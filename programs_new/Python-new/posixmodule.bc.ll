; ModuleID = 'programs_new/Python-new/posixmodule.bc.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._object = type { i64, %struct._typeobject* }
%struct._typeobject = type { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }
%struct.PyVarObject = type { %struct._object, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.PyNumberMethods = type { %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)* }
%struct.PySequenceMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)*, i8*, i32 (%struct._object*, i64, %struct._object*)*, i8*, i32 (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)* }
%struct.PyMappingMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)* }
%struct.PyBufferProcs = type { i32 (%struct._object*, %struct.bufferinfo*, i32)*, void (%struct._object*, %struct.bufferinfo*)* }
%struct.bufferinfo = type { i8*, %struct._object*, i64, i64, i32, i32, i8*, i64*, i64*, i64*, i8* }
%struct.PyMethodDef = type { i8*, %struct._object* (%struct._object*, %struct._object*)*, i32, i8* }
%struct.PyMemberDef = type opaque
%struct.PyGetSetDef = type { i8*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, %struct._object*, i8*)*, i8*, i8* }
%struct.PyModuleDef = type { %struct.PyModuleDef_Base, i8*, i8*, i64, %struct.PyMethodDef*, i32 (%struct._object*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, void (i8*)* }
%struct.PyModuleDef_Base = type { %struct._object, %struct._object* ()*, i64, %struct._object* }
%struct.PyStructSequence_Desc = type { i8*, i8*, %struct.PyStructSequence_Field*, i32 }
%struct.PyStructSequence_Field = type { i8*, i8* }
%struct._Py_Identifier = type { %struct._Py_Identifier*, i8*, %struct._object* }
%struct.constdef = type { i8*, i64 }
%struct.PyTupleObject = type { %struct.PyVarObject, [1 x %struct._object*] }
%struct.path_t = type { i8*, i8*, i32, i32, i32*, i8*, i32, i64, %struct._object*, %struct._object* }
%struct._ts = type { %struct._ts*, %struct._ts*, %struct._is*, %struct._frame*, i32, i8, i8, i32, i32, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, %struct._object*, i64, i32, %struct._object*, void (i8*)*, i8* }
%struct._is = type { %struct._is*, %struct._ts*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, i32, i32, %struct._object* }
%struct._frame = type opaque
%struct.utsname = type { [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8] }
%struct.utime_t = type { i32, i64, i64, i64, i64 }
%struct.tms = type { i64, i64, i64, i64 }
%struct.sched_param = type { i32 }
%struct.timespec = type { i64, i64 }
%struct.cpu_set_t = type { [16 x i64] }
%struct.termios = type { i32, i32, i32, i32, i8, [32 x i8], i32, i32 }
%struct.winsize = type { i16, i16, i16, i16 }
%struct.PyListObject = type { %struct.PyVarObject, %struct._object**, i64 }
%struct.PyBytesObject = type { %struct.PyVarObject, i64, [1 x i8] }
%union.__WAIT_STATUS = type { %union.wait* }
%union.wait = type { i32 }
%struct.rusage = type { %struct.timeval, %struct.timeval, %union.anon, %union.anon.1, %union.anon.2, %union.anon.3, %union.anon.4, %union.anon.5, %union.anon.6, %union.anon.7, %union.anon.8, %union.anon.9, %union.anon.10, %union.anon.11, %union.anon.12, %union.anon.13 }
%struct.timeval = type { i64, i64 }
%union.anon = type { i64 }
%union.anon.1 = type { i64 }
%union.anon.2 = type { i64 }
%union.anon.3 = type { i64 }
%union.anon.4 = type { i64 }
%union.anon.5 = type { i64 }
%union.anon.6 = type { i64 }
%union.anon.7 = type { i64 }
%union.anon.8 = type { i64 }
%union.anon.9 = type { i64 }
%union.anon.10 = type { i64 }
%union.anon.11 = type { i64 }
%union.anon.12 = type { i64 }
%union.anon.13 = type { i64 }
%struct.siginfo_t = type { i32, i32, i32, %union.anon.14 }
%union.anon.14 = type { %struct.anon.18, [80 x i8] }
%struct.anon.18 = type { i32, i32, i32, i64, i64 }
%struct.anon.15 = type { i32, i32 }
%struct.iovec = type { i8*, i64 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%union.anon.22 = type { i32 }
%union.anon.23 = type { i32 }
%union.anon.24 = type { i32 }
%union.anon.25 = type { i32 }
%union.anon.26 = type { i32 }
%union.anon.27 = type { i32 }
%union.anon.28 = type { i32 }
%union.anon.29 = type { i32 }
%struct.statvfs = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [6 x i32] }
%struct.stat64 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }

@PyExc_TypeError = external global %struct._object*, align 8
@.str = private unnamed_addr constant [34 x i8] c"uid should be integer, not %.200s\00", align 1
@PyExc_OverflowError = external global %struct._object*, align 8
@.str.1 = private unnamed_addr constant [25 x i8] c"uid is less than minimum\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"uid is greater than maximum\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"gid should be integer, not %.200s\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"gid is less than minimum\00", align 1
@.str.5 = private unnamed_addr constant [28 x i8] c"gid is greater than maximum\00", align 1
@posixmodule = internal global %struct.PyModuleDef { %struct.PyModuleDef_Base { %struct._object { i64 1, %struct._typeobject* null }, %struct._object* ()* null, i64 0, %struct._object* null }, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([259 x i8], [259 x i8]* @posix__doc__, i32 0, i32 0), i64 -1, %struct.PyMethodDef* getelementptr inbounds ([146 x %struct.PyMethodDef], [146 x %struct.PyMethodDef]* @posix_methods, i32 0, i32 0), i32 (%struct._object*)* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, void (i8*)* null }, align 8
@.str.6 = private unnamed_addr constant [8 x i8] c"environ\00", align 1
@PyExc_OSError = external global %struct._object*, align 8
@.str.7 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@posix_putenv_garbage = internal global %struct._object* null, align 8
@initialized = internal global i32 0, align 4
@.str.8 = private unnamed_addr constant [20 x i8] c"posix.waitid_result\00", align 1
@waitid_result_desc = internal global %struct.PyStructSequence_Desc { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([221 x i8], [221 x i8]* @waitid_result__doc__, i32 0, i32 0), %struct.PyStructSequence_Field* getelementptr inbounds ([6 x %struct.PyStructSequence_Field], [6 x %struct.PyStructSequence_Field]* @waitid_result_fields, i32 0, i32 0), i32 5 }, align 8
@WaitidResultType = internal global %struct._typeobject zeroinitializer, align 8
@.str.9 = private unnamed_addr constant [15 x i8] c"os.stat_result\00", align 1
@stat_result_desc = internal global %struct.PyStructSequence_Desc { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([398 x i8], [398 x i8]* @stat_result__doc__, i32 0, i32 0), %struct.PyStructSequence_Field* getelementptr inbounds ([20 x %struct.PyStructSequence_Field], [20 x %struct.PyStructSequence_Field]* @stat_result_fields, i32 0, i32 0), i32 10 }, align 8
@PyStructSequence_UnnamedField = external global i8*, align 8
@StatResultType = internal global %struct._typeobject zeroinitializer, align 8
@structseq_new = internal global %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* null, align 8
@.str.10 = private unnamed_addr constant [18 x i8] c"os.statvfs_result\00", align 1
@statvfs_result_desc = internal global %struct.PyStructSequence_Desc { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([287 x i8], [287 x i8]* @statvfs_result__doc__, i32 0, i32 0), %struct.PyStructSequence_Field* getelementptr inbounds ([11 x %struct.PyStructSequence_Field], [11 x %struct.PyStructSequence_Field]* @statvfs_result_fields, i32 0, i32 0), i32 10 }, align 8
@StatVFSResultType = internal global %struct._typeobject zeroinitializer, align 8
@ticks_per_second = internal global i64 -1, align 8
@.str.11 = private unnamed_addr constant [18 x i8] c"posix.sched_param\00", align 1
@sched_param_desc = internal global %struct.PyStructSequence_Desc { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([97 x i8], [97 x i8]* @sched_param__doc__, i32 0, i32 0), %struct.PyStructSequence_Field* getelementptr inbounds ([2 x %struct.PyStructSequence_Field], [2 x %struct.PyStructSequence_Field]* @sched_param_fields, i32 0, i32 0), i32 1 }, align 8
@SchedParamType = internal global %struct._typeobject zeroinitializer, align 8
@TerminalSizeType = internal global %struct._typeobject zeroinitializer, align 8
@TerminalSize_desc = internal global %struct.PyStructSequence_Desc { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.696, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @TerminalSize_docstring, i32 0, i32 0), %struct.PyStructSequence_Field* getelementptr inbounds ([3 x %struct.PyStructSequence_Field], [3 x %struct.PyStructSequence_Field]* @TerminalSize_fields, i32 0, i32 0), i32 2 }, align 8
@.str.12 = private unnamed_addr constant [14 x i8] c"waitid_result\00", align 1
@.str.13 = private unnamed_addr constant [12 x i8] c"stat_result\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"statvfs_result\00", align 1
@.str.15 = private unnamed_addr constant [12 x i8] c"sched_param\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"posix.times_result\00", align 1
@times_result_desc = internal global %struct.PyStructSequence_Desc { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([264 x i8], [264 x i8]* @times_result__doc__, i32 0, i32 0), %struct.PyStructSequence_Field* getelementptr inbounds ([6 x %struct.PyStructSequence_Field], [6 x %struct.PyStructSequence_Field]* @times_result_fields, i32 0, i32 0), i32 5 }, align 8
@TimesResultType = internal global %struct._typeobject zeroinitializer, align 8
@.str.17 = private unnamed_addr constant [13 x i8] c"times_result\00", align 1
@.str.18 = private unnamed_addr constant [19 x i8] c"posix.uname_result\00", align 1
@uname_result_desc = internal global %struct.PyStructSequence_Desc { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([246 x i8], [246 x i8]* @uname_result__doc__, i32 0, i32 0), %struct.PyStructSequence_Field* getelementptr inbounds ([6 x %struct.PyStructSequence_Field], [6 x %struct.PyStructSequence_Field]* @uname_result_fields, i32 0, i32 0), i32 5 }, align 8
@UnameResultType = internal global %struct._typeobject zeroinitializer, align 8
@.str.19 = private unnamed_addr constant [13 x i8] c"uname_result\00", align 1
@.str.20 = private unnamed_addr constant [14 x i8] c"terminal_size\00", align 1
@billion = internal global %struct._object* null, align 8
@.str.21 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"chmod\00", align 1
@_Py_NoneStruct = external global %struct._object, align 8
@have_functions = internal global [29 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.723, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.724, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.725, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.726, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.727, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.728, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.729, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.730, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.731, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.732, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.733, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.734, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.735, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.736, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.737, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.738, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.739, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.740, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.741, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.742, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.743, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.744, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.745, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.746, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.747, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.748, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.749, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.750, i32 0, i32 0), i8* null], align 16
@.str.23 = private unnamed_addr constant [16 x i8] c"_have_functions\00", align 1
@.str.24 = private unnamed_addr constant [6 x i8] c"posix\00", align 1
@posix__doc__ = internal global [259 x i8] c"This module provides access to operating system functionality that is\0Astandardized by the C Standard and the POSIX standard (a thinly\0Adisguised Unix interface).  Refer to the library manual and\0Acorresponding Unix manual entries for more information on calls.\00", align 16
@posix_methods = internal global [146 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyModuleDef*, %struct._object*, %struct._object*)* @os_stat to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([784 x i8], [784 x i8]* @os_stat__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyModuleDef*, %struct._object*, %struct._object*)* @os_access to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([1149 x i8], [1149 x i8]* @os_access__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.27, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyModuleDef*, %struct._object*)* @os_ttyname to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @os_ttyname__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.28, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_chdir to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @posix_chdir__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_chmod to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([845 x i8], [845 x i8]* @posix_chmod__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_fchmod, i32 1, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @posix_fchmod__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_chown to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([874 x i8], [874 x i8]* @posix_chown__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_fchown, i32 1, i8* getelementptr inbounds ([159 x i8], [159 x i8]* @posix_fchown__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.32, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_lchown, i32 1, i8* getelementptr inbounds ([199 x i8], [199 x i8]* @posix_lchown__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_chroot, i32 1, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @posix_chroot__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_ctermid, i32 4, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @posix_ctermid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @posix_getcwd_unicode to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @posix_getcwd__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @posix_getcwd_bytes to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @posix_getcwdb__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_link to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([657 x i8], [657 x i8]* @posix_link__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.38, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_listdir to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([611 x i8], [611 x i8]* @posix_listdir__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_lstat to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @posix_lstat__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_mkdir to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([371 x i8], [371 x i8]* @posix_mkdir__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.41, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_nice, i32 1, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @posix_nice__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.42, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getpriority, i32 1, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @posix_getpriority__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.43, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_setpriority, i32 1, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @posix_setpriority__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.44, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_readlink to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([381 x i8], [381 x i8]* @readlink__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_rename to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([442 x i8], [442 x i8]* @posix_rename__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.46, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_replace to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([472 x i8], [472 x i8]* @posix_replace__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_rmdir to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([317 x i8], [317 x i8]* @posix_rmdir__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.48, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @stat_float_times, i32 1, i8* getelementptr inbounds ([260 x i8], [260 x i8]* @stat_float_times__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_symlink to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([638 x i8], [638 x i8]* @posix_symlink__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.50, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_system, i32 1, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @posix_system__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.51, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_umask, i32 1, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @posix_umask__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_uname, i32 4, i8* getelementptr inbounds ([198 x i8], [198 x i8]* @posix_uname__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.53, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_unlink to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([332 x i8], [332 x i8]* @posix_unlink__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.54, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_unlink to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([332 x i8], [332 x i8]* @posix_remove__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_utime to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([1254 x i8], [1254 x i8]* @posix_utime__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.56, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_times, i32 4, i8* getelementptr inbounds ([207 x i8], [207 x i8]* @posix_times__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.57, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix__exit, i32 1, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @posix__exit__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_execv, i32 1, i8* getelementptr inbounds ([159 x i8], [159 x i8]* @posix_execv__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_execve to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([434 x i8], [434 x i8]* @posix_execve__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.60, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_fork, i32 4, i8* getelementptr inbounds ([99 x i8], [99 x i8]* @posix_fork__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.61, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_sched_get_priority_max, i32 1, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @posix_sched_get_priority_max__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.62, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_sched_get_priority_min, i32 1, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @posix_sched_get_priority_min__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.63, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_sched_getparam, i32 1, i8* getelementptr inbounds ([172 x i8], [172 x i8]* @posix_sched_getparam__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.64, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_sched_getscheduler, i32 1, i8* getelementptr inbounds ([162 x i8], [162 x i8]* @posix_sched_getscheduler__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_sched_rr_get_interval, i32 1, i8* getelementptr inbounds ([111 x i8], [111 x i8]* @posix_sched_rr_get_interval__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.66, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_sched_setparam, i32 1, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @posix_sched_setparam__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.67, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_sched_setscheduler, i32 1, i8* getelementptr inbounds ([174 x i8], [174 x i8]* @posix_sched_setscheduler__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.68, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_sched_yield, i32 4, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @posix_sched_yield__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.69, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_sched_setaffinity, i32 1, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @posix_sched_setaffinity__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.70, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_sched_getaffinity, i32 1, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @posix_sched_getaffinity__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.71, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_openpty, i32 4, i8* getelementptr inbounds ([112 x i8], [112 x i8]* @posix_openpty__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.72, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_forkpty, i32 4, i8* getelementptr inbounds ([226 x i8], [226 x i8]* @posix_forkpty__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.73, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getegid, i32 4, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @posix_getegid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.74, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_geteuid, i32 4, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @posix_geteuid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.75, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getgid, i32 4, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @posix_getgid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.76, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getgrouplist, i32 1, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @posix_getgrouplist__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.77, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getgroups, i32 4, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @posix_getgroups__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.78, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getpid, i32 4, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @posix_getpid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.79, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getpgrp, i32 4, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @posix_getpgrp__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.80, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getppid, i32 4, i8* getelementptr inbounds ([198 x i8], [198 x i8]* @posix_getppid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.81, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getuid, i32 4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @posix_getuid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.82, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getlogin, i32 4, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @posix_getlogin__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.83, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_kill, i32 1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @posix_kill__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.84, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_killpg, i32 1, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @posix_killpg__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.85, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_setuid, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @posix_setuid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.86, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_seteuid, i32 1, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @posix_seteuid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.87, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_setegid, i32 1, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @posix_setegid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.88, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_setreuid, i32 1, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @posix_setreuid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.89, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_setregid, i32 1, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @posix_setregid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.90, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_setgid, i32 1, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @posix_setgid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.91, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_setgroups, i32 8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @posix_setgroups__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.92, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_initgroups, i32 1, i8* getelementptr inbounds ([197 x i8], [197 x i8]* @posix_initgroups__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.93, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getpgid, i32 1, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @posix_getpgid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.94, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_setpgrp, i32 4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @posix_setpgrp__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.95, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_wait, i32 4, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @posix_wait__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.96, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_wait3, i32 1, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @posix_wait3__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.97, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_wait4, i32 1, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @posix_wait4__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.98, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_waitid, i32 1, i8* getelementptr inbounds ([424 x i8], [424 x i8]* @posix_waitid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.99, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_waitpid, i32 1, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @posix_waitpid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.100, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getsid, i32 1, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @posix_getsid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.101, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_setsid, i32 4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @posix_setsid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.102, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_setpgid, i32 1, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @posix_setpgid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.103, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_tcgetpgrp, i32 1, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @posix_tcgetpgrp__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.104, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_tcsetpgrp, i32 1, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @posix_tcsetpgrp__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.105, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_open to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([379 x i8], [379 x i8]* @posix_open__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.106, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_close_, i32 1, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @posix_close__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.107, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_closerange, i32 1, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @posix_closerange__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.108, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @device_encoding, i32 1, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @device_encoding__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.109, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_dup, i32 1, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @posix_dup__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.110, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_dup2 to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @posix_dup2__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.111, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_lockf, i32 1, i8* getelementptr inbounds ([241 x i8], [241 x i8]* @posix_lockf__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.112, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_lseek, i32 1, i8* getelementptr inbounds ([148 x i8], [148 x i8]* @posix_lseek__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.113, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_read, i32 1, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @posix_read__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_readv, i32 1, i8* getelementptr inbounds ([373 x i8], [373 x i8]* @posix_readv__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.115, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_pread, i32 1, i8* getelementptr inbounds ([181 x i8], [181 x i8]* @posix_pread__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.116, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_write, i32 1, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @posix_write__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.117, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_writev, i32 1, i8* getelementptr inbounds ([259 x i8], [259 x i8]* @posix_writev__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.118, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_pwrite, i32 1, i8* getelementptr inbounds ([131 x i8], [131 x i8]* @posix_pwrite__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.119, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_sendfile to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @posix_sendfile__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.120, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_fstat, i32 1, i8* getelementptr inbounds ([99 x i8], [99 x i8]* @posix_fstat__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.121, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_isatty, i32 1, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @posix_isatty__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.122, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_pipe, i32 4, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @posix_pipe__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.123, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_pipe2, i32 8, i8* getelementptr inbounds ([176 x i8], [176 x i8]* @posix_pipe2__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.124, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_mkfifo to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([346 x i8], [346 x i8]* @posix_mkfifo__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.125, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_mknod to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([699 x i8], [699 x i8]* @posix_mknod__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.126, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_major, i32 1, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @posix_major__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.127, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_minor, i32 1, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @posix_minor__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.128, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_makedev, i32 1, i8* getelementptr inbounds ([109 x i8], [109 x i8]* @posix_makedev__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.129, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_ftruncate, i32 1, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @posix_ftruncate__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.130, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_truncate to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([217 x i8], [217 x i8]* @posix_truncate__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.131, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_posix_fallocate, i32 1, i8* getelementptr inbounds ([158 x i8], [158 x i8]* @posix_posix_fallocate__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.132, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_posix_fadvise, i32 1, i8* getelementptr inbounds ([400 x i8], [400 x i8]* @posix_posix_fadvise__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.133, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_putenv, i32 1, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @posix_putenv__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.134, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_unsetenv, i32 1, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @posix_unsetenv__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.135, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_strerror, i32 1, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @posix_strerror__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.136, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_fchdir, i32 8, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @posix_fchdir__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.137, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_fsync, i32 8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @posix_fsync__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.138, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_sync, i32 4, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @posix_sync__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.139, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_fdatasync, i32 8, i8* getelementptr inbounds ([104 x i8], [104 x i8]* @posix_fdatasync__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.140, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_WCOREDUMP, i32 1, i8* getelementptr inbounds ([100 x i8], [100 x i8]* @posix_WCOREDUMP__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.141, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_WIFCONTINUED, i32 1, i8* getelementptr inbounds ([115 x i8], [115 x i8]* @posix_WIFCONTINUED__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.142, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_WIFSTOPPED, i32 1, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @posix_WIFSTOPPED__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.143, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_WIFSIGNALED, i32 1, i8* getelementptr inbounds ([103 x i8], [103 x i8]* @posix_WIFSIGNALED__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.144, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_WIFEXITED, i32 1, i8* getelementptr inbounds ([110 x i8], [110 x i8]* @posix_WIFEXITED__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.145, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_WEXITSTATUS, i32 1, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @posix_WEXITSTATUS__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.146, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_WTERMSIG, i32 1, i8* getelementptr inbounds ([109 x i8], [109 x i8]* @posix_WTERMSIG__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.147, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_WSTOPSIG, i32 1, i8* getelementptr inbounds ([106 x i8], [106 x i8]* @posix_WSTOPSIG__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.148, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_fstatvfs, i32 1, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @posix_fstatvfs__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.149, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_statvfs to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([251 x i8], [251 x i8]* @posix_statvfs__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.150, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_confstr, i32 1, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @posix_confstr__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.151, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_sysconf, i32 1, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @posix_sysconf__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.152, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_fpathconf, i32 1, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @posix_fpathconf__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.153, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_pathconf to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([278 x i8], [278 x i8]* @posix_pathconf__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.154, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_abort, i32 4, i8* getelementptr inbounds ([163 x i8], [163 x i8]* @posix_abort__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.155, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getloadavg, i32 4, i8* getelementptr inbounds ([193 x i8], [193 x i8]* @posix_getloadavg__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.156, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_urandom, i32 1, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @posix_urandom__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.157, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_setresuid, i32 1, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @posix_setresuid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.158, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_setresgid, i32 1, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @posix_setresgid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.159, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getresuid, i32 4, i8* getelementptr inbounds ([107 x i8], [107 x i8]* @posix_getresuid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.160, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_getresgid, i32 4, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @posix_getresgid__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.161, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_setxattr to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([347 x i8], [347 x i8]* @posix_setxattr__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.162, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_getxattr to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([349 x i8], [349 x i8]* @posix_getxattr__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.163, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_removexattr to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([331 x i8], [331 x i8]* @posix_removexattr__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.164, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_listxattr to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([393 x i8], [393 x i8]* @posix_listxattr__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.165, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @get_terminal_size, i32 1, i8* getelementptr inbounds ([467 x i8], [467 x i8]* @termsize__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.166, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @posix_cpu_count to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([110 x i8], [110 x i8]* @posix_cpu_count__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.167, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_get_inheritable, i32 1, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @get_inheritable__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.168, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @posix_set_inheritable, i32 1, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @set_inheritable__doc__, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@.str.25 = private unnamed_addr constant [5 x i8] c"stat\00", align 1
@os_stat__doc__ = internal global [784 x i8] c"stat($module, /, path, *, dir_fd=None, follow_symlinks=True)\0A--\0A\0APerform a stat system call on the given path.\0A\0A  path\0A    Path to be examined; can be string, bytes, or open-file-descriptor int.\0A  dir_fd\0A    If not None, it should be a file descriptor open to a directory,\0A    and path should be a relative string; path will then be relative to\0A    that directory.\0A  follow_symlinks\0A    If False, and the last element of the path is a symbolic link,\0A    stat will examine the symbolic link itself instead of the file\0A    the link points to.\0A\0Adir_fd and follow_symlinks may not be implemented\0A  on your platform.  If they are unavailable, using them will raise a\0A  NotImplementedError.\0A\0AIt's an error to use dir_fd or follow_symlinks when specifying path as\0A  an open file descriptor.\00", align 16
@.str.26 = private unnamed_addr constant [7 x i8] c"access\00", align 1
@os_access__doc__ = internal global [1149 x i8] c"access($module, /, path, mode, *, dir_fd=None, effective_ids=False,\0A       follow_symlinks=True)\0A--\0A\0AUse the real uid/gid to test for access to a path.\0A\0A  path\0A    Path to be tested; can be string, bytes, or open-file-descriptor int.\0A  mode\0A    Operating-system mode bitfield.  Can be F_OK to test existence,\0A    or the inclusive-OR of R_OK, W_OK, and X_OK.\0A  dir_fd\0A    If not None, it should be a file descriptor open to a directory,\0A    and path should be relative; path will then be relative to that\0A    directory.\0A  effective_ids\0A    If True, access will use the effective uid/gid instead of\0A    the real uid/gid.\0A  follow_symlinks\0A    If False, and the last element of the path is a symbolic link,\0A    access will examine the symbolic link itself instead of the file\0A    the link points to.\0A\0Adir_fd, effective_ids, and follow_symlinks may not be implemented\0A  on your platform.  If they are unavailable, using them will raise a\0A  NotImplementedError.\0A\0ANote that most operations will use the effective uid/gid, therefore this\0A  routine can be used in a suid/sgid environment to test if the invoking user\0A  has the specified access to the path.\00", align 16
@.str.27 = private unnamed_addr constant [8 x i8] c"ttyname\00", align 1
@os_ttyname__doc__ = internal global [128 x i8] c"ttyname($module, fd, /)\0A--\0A\0AReturn the name of the terminal device connected to 'fd'.\0A\0A  fd\0A    Integer file descriptor handle.\00", align 16
@.str.28 = private unnamed_addr constant [6 x i8] c"chdir\00", align 1
@posix_chdir__doc__ = internal global [260 x i8] c"chdir(path)\0A\0AChange the current working directory to the specified path.\0A\0Apath may always be specified as a string.\0AOn some platforms, path may also be specified as an open file descriptor.\0A  If this functionality is unavailable, using it raises an exception.\00", align 16
@posix_chmod__doc__ = internal global [845 x i8] c"chmod(path, mode, *, dir_fd=None, follow_symlinks=True)\0A\0AChange the access permissions of a file.\0A\0Apath may always be specified as a string.\0AOn some platforms, path may also be specified as an open file descriptor.\0A  If this functionality is unavailable, using it raises an exception.\0AIf dir_fd is not None, it should be a file descriptor open to a directory,\0A  and path should be relative; path will then be relative to that directory.\0AIf follow_symlinks is False, and the last element of the path is a symbolic\0A  link, chmod will modify the symbolic link itself instead of the file the\0A  link points to.\0AIt is an error to use dir_fd or follow_symlinks when specifying path as\0A  an open file descriptor.\0Adir_fd and follow_symlinks may not be implemented on your platform.\0A  If they are unavailable, using them will raise a NotImplementedError.\00", align 16
@.str.29 = private unnamed_addr constant [7 x i8] c"fchmod\00", align 1
@posix_fchmod__doc__ = internal global [124 x i8] c"fchmod(fd, mode)\0A\0AChange the access permissions of the file given by file\0Adescriptor fd.  Equivalent to os.chmod(fd, mode).\00", align 16
@.str.30 = private unnamed_addr constant [6 x i8] c"chown\00", align 1
@posix_chown__doc__ = internal global [874 x i8] c"chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True)\0A\0AChange the owner and group id of path to the numeric uid and gid.\0A\0Apath may always be specified as a string.\0AOn some platforms, path may also be specified as an open file descriptor.\0A  If this functionality is unavailable, using it raises an exception.\0AIf dir_fd is not None, it should be a file descriptor open to a directory,\0A  and path should be relative; path will then be relative to that directory.\0AIf follow_symlinks is False, and the last element of the path is a symbolic\0A  link, chown will modify the symbolic link itself instead of the file the\0A  link points to.\0AIt is an error to use dir_fd or follow_symlinks when specifying path as\0A  an open file descriptor.\0Adir_fd and follow_symlinks may not be implemented on your platform.\0A  If they are unavailable, using them will raise a NotImplementedError.\00", align 16
@.str.31 = private unnamed_addr constant [7 x i8] c"fchown\00", align 1
@posix_fchown__doc__ = internal global [159 x i8] c"fchown(fd, uid, gid)\0A\0AChange the owner and group id of the file given by file descriptor\0Afd to the numeric uid and gid.  Equivalent to os.chown(fd, uid, gid).\00", align 16
@.str.32 = private unnamed_addr constant [7 x i8] c"lchown\00", align 1
@posix_lchown__doc__ = internal global [199 x i8] c"lchown(path, uid, gid)\0A\0AChange the owner and group id of path to the numeric uid and gid.\0AThis function will not follow symbolic links.\0AEquivalent to os.chown(path, uid, gid, follow_symlinks=False).\00", align 16
@.str.33 = private unnamed_addr constant [7 x i8] c"chroot\00", align 1
@posix_chroot__doc__ = internal global [45 x i8] c"chroot(path)\0A\0AChange root directory to path.\00", align 16
@.str.34 = private unnamed_addr constant [8 x i8] c"ctermid\00", align 1
@posix_ctermid__doc__ = internal global [83 x i8] c"ctermid() -> string\0A\0AReturn the name of the controlling terminal for this process.\00", align 16
@.str.35 = private unnamed_addr constant [7 x i8] c"getcwd\00", align 1
@posix_getcwd__doc__ = internal global [86 x i8] c"getcwd() -> path\0A\0AReturn a unicode string representing the current working directory.\00", align 16
@.str.36 = private unnamed_addr constant [8 x i8] c"getcwdb\00", align 1
@posix_getcwdb__doc__ = internal global [85 x i8] c"getcwdb() -> path\0A\0AReturn a bytes string representing the current working directory.\00", align 16
@.str.37 = private unnamed_addr constant [5 x i8] c"link\00", align 1
@posix_link__doc__ = internal global [657 x i8] c"link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)\0A\0ACreate a hard link to a file.\0A\0AIf either src_dir_fd or dst_dir_fd is not None, it should be a file\0A  descriptor open to a directory, and the respective path string (src or dst)\0A  should be relative; the path will then be relative to that directory.\0AIf follow_symlinks is False, and the last element of src is a symbolic\0A  link, link will create a link to the symbolic link itself instead of the\0A  file the link points to.\0Asrc_dir_fd, dst_dir_fd, and follow_symlinks may not be implemented on your\0A  platform.  If they are unavailable, using them will raise a\0A  NotImplementedError.\00", align 16
@.str.38 = private unnamed_addr constant [8 x i8] c"listdir\00", align 1
@posix_listdir__doc__ = internal global [611 x i8] c"listdir(path='.') -> list_of_filenames\0A\0AReturn a list containing the names of the files in the directory.\0AThe list is in arbitrary order.  It does not include the special\0Aentries '.' and '..' even if they are present in the directory.\0A\0Apath can be specified as either str or bytes.  If path is bytes,\0A  the filenames returned will also be bytes; in all other circumstances\0A  the filenames returned will be str.\0AOn some platforms, path may also be specified as an open file descriptor;\0A  the file descriptor must refer to a directory.\0A  If this functionality is unavailable, using it raises NotImplementedError.\00", align 16
@.str.39 = private unnamed_addr constant [6 x i8] c"lstat\00", align 1
@posix_lstat__doc__ = internal global [140 x i8] c"lstat(path, *, dir_fd=None) -> stat result\0A\0ALike stat(), but do not follow symbolic links.\0AEquivalent to stat(path, follow_symlinks=False).\00", align 16
@.str.40 = private unnamed_addr constant [6 x i8] c"mkdir\00", align 1
@posix_mkdir__doc__ = internal global [371 x i8] c"mkdir(path, mode=0o777, *, dir_fd=None)\0A\0ACreate a directory.\0A\0AIf dir_fd is not None, it should be a file descriptor open to a directory,\0A  and path should be relative; path will then be relative to that directory.\0Adir_fd may not be implemented on your platform.\0A  If it is unavailable, using it will raise a NotImplementedError.\0A\0AThe mode argument is ignored on Windows.\00", align 16
@.str.41 = private unnamed_addr constant [5 x i8] c"nice\00", align 1
@posix_nice__doc__ = internal global [96 x i8] c"nice(inc) -> new_priority\0A\0ADecrease the priority of process by inc and return the new priority.\00", align 16
@.str.42 = private unnamed_addr constant [12 x i8] c"getpriority\00", align 1
@posix_getpriority__doc__ = internal global [78 x i8] c"getpriority(which, who) -> current_priority\0A\0AGet program scheduling priority.\00", align 16
@.str.43 = private unnamed_addr constant [12 x i8] c"setpriority\00", align 1
@posix_setpriority__doc__ = internal global [72 x i8] c"setpriority(which, who, prio) -> None\0A\0ASet program scheduling priority.\00", align 16
@.str.44 = private unnamed_addr constant [9 x i8] c"readlink\00", align 1
@readlink__doc__ = internal global [381 x i8] c"readlink(path, *, dir_fd=None) -> path\0A\0AReturn a string representing the path to which the symbolic link points.\0A\0AIf dir_fd is not None, it should be a file descriptor open to a directory,\0A  and path should be relative; path will then be relative to that directory.\0Adir_fd may not be implemented on your platform.\0A  If it is unavailable, using it will raise a NotImplementedError.\00", align 16
@.str.45 = private unnamed_addr constant [7 x i8] c"rename\00", align 1
@posix_rename__doc__ = internal global [442 x i8] c"rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)\0A\0ARename a file or directory.\0A\0AIf either src_dir_fd or dst_dir_fd is not None, it should be a file\0A  descriptor open to a directory, and the respective path string (src or dst)\0A  should be relative; the path will then be relative to that directory.\0Asrc_dir_fd and dst_dir_fd, may not be implemented on your platform.\0A  If they are unavailable, using them will raise a NotImplementedError.\00", align 16
@.str.46 = private unnamed_addr constant [8 x i8] c"replace\00", align 1
@posix_replace__doc__ = internal global [472 x i8] c"replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None)\0A\0ARename a file or directory, overwriting the destination.\0A\0AIf either src_dir_fd or dst_dir_fd is not None, it should be a file\0A  descriptor open to a directory, and the respective path string (src or dst)\0A  should be relative; the path will then be relative to that directory.\0Asrc_dir_fd and dst_dir_fd, may not be implemented on your platform.\0A  If they are unavailable, using them will raise a NotImplementedError.\00", align 16
@.str.47 = private unnamed_addr constant [6 x i8] c"rmdir\00", align 1
@posix_rmdir__doc__ = internal global [317 x i8] c"rmdir(path, *, dir_fd=None)\0A\0ARemove a directory.\0A\0AIf dir_fd is not None, it should be a file descriptor open to a directory,\0A  and path should be relative; path will then be relative to that directory.\0Adir_fd may not be implemented on your platform.\0A  If it is unavailable, using it will raise a NotImplementedError.\00", align 16
@.str.48 = private unnamed_addr constant [17 x i8] c"stat_float_times\00", align 1
@stat_float_times__doc__ = internal global [260 x i8] c"stat_float_times([newval]) -> oldval\0A\0ADetermine whether os.[lf]stat represents time stamps as float objects.\0AIf newval is True, future calls to stat() return floats, if it is False,\0Afuture calls return ints. \0AIf newval is omitted, return the current setting.\0A\00", align 16
@.str.49 = private unnamed_addr constant [8 x i8] c"symlink\00", align 1
@posix_symlink__doc__ = internal global [638 x i8] c"symlink(src, dst, target_is_directory=False, *, dir_fd=None)\0A\0ACreate a symbolic link pointing to src named dst.\0A\0Atarget_is_directory is required on Windows if the target is to be\0A  interpreted as a directory.  (On Windows, symlink requires\0A  Windows 6.0 or greater, and raises a NotImplementedError otherwise.)\0A  target_is_directory is ignored on non-Windows platforms.\0A\0AIf dir_fd is not None, it should be a file descriptor open to a directory,\0A  and path should be relative; path will then be relative to that directory.\0Adir_fd may not be implemented on your platform.\0A  If it is unavailable, using it will raise a NotImplementedError.\00", align 16
@.str.50 = private unnamed_addr constant [7 x i8] c"system\00", align 1
@posix_system__doc__ = internal global [78 x i8] c"system(command) -> exit_status\0A\0AExecute the command (a string) in a subshell.\00", align 16
@.str.51 = private unnamed_addr constant [6 x i8] c"umask\00", align 1
@posix_umask__doc__ = internal global [90 x i8] c"umask(new_mask) -> old_mask\0A\0ASet the current numeric umask and return the previous umask.\00", align 16
@.str.52 = private unnamed_addr constant [6 x i8] c"uname\00", align 1
@posix_uname__doc__ = internal global [198 x i8] c"uname() -> uname_result\0A\0AReturn an object identifying the current operating system.\0AThe object behaves like a named tuple with the following fields:\0A  (sysname, nodename, release, version, machine)\00", align 16
@.str.53 = private unnamed_addr constant [7 x i8] c"unlink\00", align 1
@posix_unlink__doc__ = internal global [332 x i8] c"unlink(path, *, dir_fd=None)\0A\0ARemove a file (same as remove()).\0A\0AIf dir_fd is not None, it should be a file descriptor open to a directory,\0A  and path should be relative; path will then be relative to that directory.\0Adir_fd may not be implemented on your platform.\0A  If it is unavailable, using it will raise a NotImplementedError.\00", align 16
@.str.54 = private unnamed_addr constant [7 x i8] c"remove\00", align 1
@posix_remove__doc__ = internal global [332 x i8] c"remove(path, *, dir_fd=None)\0A\0ARemove a file (same as unlink()).\0A\0AIf dir_fd is not None, it should be a file descriptor open to a directory,\0A  and path should be relative; path will then be relative to that directory.\0Adir_fd may not be implemented on your platform.\0A  If it is unavailable, using it will raise a NotImplementedError.\00", align 16
@.str.55 = private unnamed_addr constant [6 x i8] c"utime\00", align 1
@posix_utime__doc__ = internal global [1254 x i8] c"utime(path, times=None, *, ns=None, dir_fd=None, follow_symlinks=True)\0ASet the access and modified time of path.\0A\0Apath may always be specified as a string.\0AOn some platforms, path may also be specified as an open file descriptor.\0A  If this functionality is unavailable, using it raises an exception.\0A\0AIf times is not None, it must be a tuple (atime, mtime);\0A    atime and mtime should be expressed as float seconds since the epoch.\0AIf ns is not None, it must be a tuple (atime_ns, mtime_ns);\0A    atime_ns and mtime_ns should be expressed as integer nanoseconds\0A    since the epoch.\0AIf both times and ns are None, utime uses the current time.\0ASpecifying tuples for both times and ns is an error.\0A\0AIf dir_fd is not None, it should be a file descriptor open to a directory,\0A  and path should be relative; path will then be relative to that directory.\0AIf follow_symlinks is False, and the last element of the path is a symbolic\0A  link, utime will modify the symbolic link itself instead of the file the\0A  link points to.\0AIt is an error to use dir_fd or follow_symlinks when specifying path\0A  as an open file descriptor.\0Adir_fd and follow_symlinks may not be available on your platform.\0A  If they are unavailable, using them will raise a NotImplementedError.\00", align 16
@.str.56 = private unnamed_addr constant [6 x i8] c"times\00", align 1
@posix_times__doc__ = internal global [207 x i8] c"times() -> times_result\0A\0AReturn an object containing floating point numbers indicating process\0Atimes.  The object behaves like a named tuple with these fields:\0A  (utime, stime, cutime, cstime, elapsed_time)\00", align 16
@.str.57 = private unnamed_addr constant [6 x i8] c"_exit\00", align 1
@posix__exit__doc__ = internal global [89 x i8] c"_exit(status)\0A\0AExit to the system with specified status, without normal exit processing.\00", align 16
@.str.58 = private unnamed_addr constant [6 x i8] c"execv\00", align 1
@posix_execv__doc__ = internal global [159 x i8] c"execv(path, args)\0A\0AExecute an executable path with arguments, replacing current process.\0A\0A    path: path of executable file\0A    args: tuple or list of strings\00", align 16
@.str.59 = private unnamed_addr constant [7 x i8] c"execve\00", align 1
@posix_execve__doc__ = internal global [434 x i8] c"execve(path, args, env)\0A\0AExecute a path with arguments and environment, replacing current process.\0A\0A    path: path of executable file\0A    args: tuple or list of arguments\0A    env: dictionary of strings mapping to strings\0A\0AOn some platforms, you may specify an open file descriptor for path;\0A  execve will execute the program the file descriptor is open to.\0A  If this functionality is unavailable, using it raises NotImplementedError.\00", align 16
@.str.60 = private unnamed_addr constant [5 x i8] c"fork\00", align 1
@posix_fork__doc__ = internal global [99 x i8] c"fork() -> pid\0A\0AFork a child process.\0AReturn 0 to child process and PID of child to parent process.\00", align 16
@.str.61 = private unnamed_addr constant [23 x i8] c"sched_get_priority_max\00", align 1
@posix_sched_get_priority_max__doc__ = internal global [82 x i8] c"sched_get_priority_max(policy)\0A\0AGet the maximum scheduling priority for *policy*.\00", align 16
@.str.62 = private unnamed_addr constant [23 x i8] c"sched_get_priority_min\00", align 1
@posix_sched_get_priority_min__doc__ = internal global [82 x i8] c"sched_get_priority_min(policy)\0A\0AGet the minimum scheduling priority for *policy*.\00", align 16
@.str.63 = private unnamed_addr constant [15 x i8] c"sched_getparam\00", align 1
@posix_sched_getparam__doc__ = internal global [172 x i8] c"sched_getparam(pid) -> sched_param\0A\0AReturns scheduling parameters for the process with *pid* as an instance of the\0Asched_param class. A PID of 0 means the calling process.\00", align 16
@.str.64 = private unnamed_addr constant [19 x i8] c"sched_getscheduler\00", align 1
@posix_sched_getscheduler__doc__ = internal global [162 x i8] c"sched_getscheduler(pid)\0A\0AGet the scheduling policy for the process with a PID of *pid*.\0APassing a PID of 0 returns the scheduling policy for the calling process.\00", align 16
@.str.65 = private unnamed_addr constant [22 x i8] c"sched_rr_get_interval\00", align 1
@posix_sched_rr_get_interval__doc__ = internal global [111 x i8] c"sched_rr_get_interval(pid) -> float\0A\0AReturn the round-robin quantum for the process with PID *pid* in seconds.\00", align 16
@.str.66 = private unnamed_addr constant [15 x i8] c"sched_setparam\00", align 1
@posix_sched_setparam__doc__ = internal global [122 x i8] c"sched_setparam(pid, param)\0A\0ASet scheduling parameters for a process with PID *pid*.\0AA PID of 0 means the calling process.\00", align 16
@.str.67 = private unnamed_addr constant [19 x i8] c"sched_setscheduler\00", align 1
@posix_sched_setscheduler__doc__ = internal global [174 x i8] c"sched_setscheduler(pid, policy, param)\0A\0ASet the scheduling policy, *policy*, for *pid*.\0AIf *pid* is 0, the calling process is changed.\0A*param* is an instance of sched_param.\00", align 16
@.str.68 = private unnamed_addr constant [12 x i8] c"sched_yield\00", align 1
@posix_sched_yield__doc__ = internal global [47 x i8] c"sched_yield()\0A\0AVoluntarily relinquish the CPU.\00", align 16
@.str.69 = private unnamed_addr constant [18 x i8] c"sched_setaffinity\00", align 1
@posix_sched_setaffinity__doc__ = internal global [94 x i8] c"sched_setaffinity(pid, cpu_set)\0A\0ASet the affinity of the process with PID *pid* to *cpu_set*.\00", align 16
@.str.70 = private unnamed_addr constant [18 x i8] c"sched_getaffinity\00", align 1
@posix_sched_getaffinity__doc__ = internal global [139 x i8] c"sched_getaffinity(pid, ncpus) -> cpu_set\0A\0AReturn the affinity of the process with PID *pid*.\0AThe returned cpu_set will be of size *ncpus*.\00", align 16
@.str.71 = private unnamed_addr constant [8 x i8] c"openpty\00", align 1
@posix_openpty__doc__ = internal global [112 x i8] c"openpty() -> (master_fd, slave_fd)\0A\0AOpen a pseudo-terminal, returning open fd's for both master and slave end.\0A\00", align 16
@.str.72 = private unnamed_addr constant [8 x i8] c"forkpty\00", align 1
@posix_forkpty__doc__ = internal global [226 x i8] c"forkpty() -> (pid, master_fd)\0A\0AFork a new process with a new pseudo-terminal as controlling tty.\0A\0ALike fork(), return 0 as pid to child process, and PID of child to parent.\0ATo both, return fd of newly opened pseudo-terminal.\0A\00", align 16
@.str.73 = private unnamed_addr constant [8 x i8] c"getegid\00", align 1
@posix_getegid__doc__ = internal global [68 x i8] c"getegid() -> egid\0A\0AReturn the current process's effective group id.\00", align 16
@.str.74 = private unnamed_addr constant [8 x i8] c"geteuid\00", align 1
@posix_geteuid__doc__ = internal global [67 x i8] c"geteuid() -> euid\0A\0AReturn the current process's effective user id.\00", align 16
@.str.75 = private unnamed_addr constant [7 x i8] c"getgid\00", align 1
@posix_getgid__doc__ = internal global [56 x i8] c"getgid() -> gid\0A\0AReturn the current process's group id.\00", align 16
@.str.76 = private unnamed_addr constant [13 x i8] c"getgrouplist\00", align 1
@posix_getgrouplist__doc__ = internal global [186 x i8] c"getgrouplist(user, group) -> list of groups to which a user belongs\0A\0AReturns a list of groups to which a user belongs.\0A\0A    user: username to lookup\0A    group: base group id of the user\00", align 16
@.str.77 = private unnamed_addr constant [10 x i8] c"getgroups\00", align 1
@posix_getgroups__doc__ = internal global [89 x i8] c"getgroups() -> list of group IDs\0A\0AReturn list of supplemental group IDs for the process.\00", align 16
@.str.78 = private unnamed_addr constant [7 x i8] c"getpid\00", align 1
@posix_getpid__doc__ = internal global [47 x i8] c"getpid() -> pid\0A\0AReturn the current process id\00", align 16
@.str.79 = private unnamed_addr constant [8 x i8] c"getpgrp\00", align 1
@posix_getpgrp__doc__ = internal global [56 x i8] c"getpgrp() -> pgrp\0A\0AReturn the current process group id.\00", align 16
@.str.80 = private unnamed_addr constant [8 x i8] c"getppid\00", align 1
@posix_getppid__doc__ = internal global [198 x i8] c"getppid() -> ppid\0A\0AReturn the parent's process id.  If the parent process has already exited,\0AWindows machines will still return its id; others systems will return the id\0Aof the 'init' process (1).\00", align 16
@.str.81 = private unnamed_addr constant [7 x i8] c"getuid\00", align 1
@posix_getuid__doc__ = internal global [55 x i8] c"getuid() -> uid\0A\0AReturn the current process's user id.\00", align 16
@.str.82 = private unnamed_addr constant [9 x i8] c"getlogin\00", align 1
@posix_getlogin__doc__ = internal global [52 x i8] c"getlogin() -> string\0A\0AReturn the actual login name.\00", align 16
@.str.83 = private unnamed_addr constant [5 x i8] c"kill\00", align 1
@posix_kill__doc__ = internal global [46 x i8] c"kill(pid, sig)\0A\0AKill a process with a signal.\00", align 16
@.str.84 = private unnamed_addr constant [7 x i8] c"killpg\00", align 1
@posix_killpg__doc__ = internal global [55 x i8] c"killpg(pgid, sig)\0A\0AKill a process group with a signal.\00", align 16
@.str.85 = private unnamed_addr constant [7 x i8] c"setuid\00", align 1
@posix_setuid__doc__ = internal global [48 x i8] c"setuid(uid)\0A\0ASet the current process's user id.\00", align 16
@.str.86 = private unnamed_addr constant [8 x i8] c"seteuid\00", align 1
@posix_seteuid__doc__ = internal global [59 x i8] c"seteuid(uid)\0A\0ASet the current process's effective user id.\00", align 16
@.str.87 = private unnamed_addr constant [8 x i8] c"setegid\00", align 1
@posix_setegid__doc__ = internal global [60 x i8] c"setegid(gid)\0A\0ASet the current process's effective group id.\00", align 16
@.str.88 = private unnamed_addr constant [9 x i8] c"setreuid\00", align 1
@posix_setreuid__doc__ = internal global [77 x i8] c"setreuid(ruid, euid)\0A\0ASet the current process's real and effective user ids.\00", align 16
@.str.89 = private unnamed_addr constant [9 x i8] c"setregid\00", align 1
@posix_setregid__doc__ = internal global [78 x i8] c"setregid(rgid, egid)\0A\0ASet the current process's real and effective group ids.\00", align 16
@.str.90 = private unnamed_addr constant [7 x i8] c"setgid\00", align 1
@posix_setgid__doc__ = internal global [49 x i8] c"setgid(gid)\0A\0ASet the current process's group id.\00", align 16
@.str.91 = private unnamed_addr constant [10 x i8] c"setgroups\00", align 1
@posix_setgroups__doc__ = internal global [64 x i8] c"setgroups(list)\0A\0ASet the groups of the current process to list.\00", align 16
@.str.92 = private unnamed_addr constant [11 x i8] c"initgroups\00", align 1
@posix_initgroups__doc__ = internal global [197 x i8] c"initgroups(username, gid) -> None\0A\0ACall the system initgroups() to initialize the group access list with all of\0Athe groups of which the specified username is a member, plus the specified\0Agroup id.\00", align 16
@.str.93 = private unnamed_addr constant [8 x i8] c"getpgid\00", align 1
@posix_getpgid__doc__ = internal global [54 x i8] c"getpgid(pid) -> pgid\0A\0ACall the system call getpgid().\00", align 16
@.str.94 = private unnamed_addr constant [8 x i8] c"setpgrp\00", align 1
@posix_setpgrp__doc__ = internal global [55 x i8] c"setpgrp()\0A\0AMake this process the process group leader.\00", align 16
@.str.95 = private unnamed_addr constant [5 x i8] c"wait\00", align 1
@posix_wait__doc__ = internal global [65 x i8] c"wait() -> (pid, status)\0A\0AWait for completion of a child process.\00", align 16
@.str.96 = private unnamed_addr constant [6 x i8] c"wait3\00", align 1
@posix_wait3__doc__ = internal global [81 x i8] c"wait3(options) -> (pid, status, rusage)\0A\0AWait for completion of a child process.\00", align 16
@.str.97 = private unnamed_addr constant [6 x i8] c"wait4\00", align 1
@posix_wait4__doc__ = internal global [92 x i8] c"wait4(pid, options) -> (pid, status, rusage)\0A\0AWait for completion of a given child process.\00", align 16
@.str.98 = private unnamed_addr constant [7 x i8] c"waitid\00", align 1
@posix_waitid__doc__ = internal global [424 x i8] c"waitid(idtype, id, options) -> waitid_result\0A\0AWait for the completion of one or more child processes.\0A\0Aidtype can be P_PID, P_PGID or P_ALL.\0Aid specifies the pid to wait on.\0Aoptions is constructed from the ORing of one or more of WEXITED, WSTOPPED\0Aor WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT.\0AReturns either waitid_result or None if WNOHANG is specified and there are\0Ano children in a waitable state.\00", align 16
@.str.99 = private unnamed_addr constant [8 x i8] c"waitpid\00", align 1
@posix_waitpid__doc__ = internal global [86 x i8] c"waitpid(pid, options) -> (pid, status)\0A\0AWait for completion of a given child process.\00", align 16
@.str.100 = private unnamed_addr constant [7 x i8] c"getsid\00", align 1
@posix_getsid__doc__ = internal global [51 x i8] c"getsid(pid) -> sid\0A\0ACall the system call getsid().\00", align 16
@.str.101 = private unnamed_addr constant [7 x i8] c"setsid\00", align 1
@posix_setsid__doc__ = internal global [41 x i8] c"setsid()\0A\0ACall the system call setsid().\00", align 16
@.str.102 = private unnamed_addr constant [8 x i8] c"setpgid\00", align 1
@posix_setpgid__doc__ = internal global [52 x i8] c"setpgid(pid, pgrp)\0A\0ACall the system call setpgid().\00", align 16
@.str.103 = private unnamed_addr constant [10 x i8] c"tcgetpgrp\00", align 1
@posix_tcgetpgrp__doc__ = internal global [92 x i8] c"tcgetpgrp(fd) -> pgid\0A\0AReturn the process group associated with the terminal given by a fd.\00", align 16
@.str.104 = private unnamed_addr constant [10 x i8] c"tcsetpgrp\00", align 1
@posix_tcsetpgrp__doc__ = internal global [87 x i8] c"tcsetpgrp(fd, pgid)\0A\0ASet the process group associated with the terminal given by a fd.\00", align 16
@.str.105 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@posix_open__doc__ = internal global [379 x i8] c"open(path, flags, mode=0o777, *, dir_fd=None)\0A\0AOpen a file for low level IO.  Returns a file handle (integer).\0A\0AIf dir_fd is not None, it should be a file descriptor open to a directory,\0A  and path should be relative; path will then be relative to that directory.\0Adir_fd may not be implemented on your platform.\0A  If it is unavailable, using it will raise a NotImplementedError.\00", align 16
@.str.106 = private unnamed_addr constant [6 x i8] c"close\00", align 1
@posix_close__doc__ = internal global [55 x i8] c"close(fd)\0A\0AClose a file descriptor (for low level IO).\00", align 16
@.str.107 = private unnamed_addr constant [11 x i8] c"closerange\00", align 1
@posix_closerange__doc__ = internal global [96 x i8] c"closerange(fd_low, fd_high)\0A\0ACloses all file descriptors in [fd_low, fd_high), ignoring errors.\00", align 16
@.str.108 = private unnamed_addr constant [16 x i8] c"device_encoding\00", align 1
@device_encoding__doc__ = internal global [129 x i8] c"device_encoding(fd) -> str\0A\0AReturn a string describing the encoding of the device\0Aif the output is a terminal; else return None.\00", align 16
@.str.109 = private unnamed_addr constant [4 x i8] c"dup\00", align 1
@posix_dup__doc__ = internal global [57 x i8] c"dup(fd) -> fd2\0A\0AReturn a duplicate of a file descriptor.\00", align 16
@.str.110 = private unnamed_addr constant [5 x i8] c"dup2\00", align 1
@posix_dup2__doc__ = internal global [49 x i8] c"dup2(old_fd, new_fd)\0A\0ADuplicate file descriptor.\00", align 16
@.str.111 = private unnamed_addr constant [6 x i8] c"lockf\00", align 1
@posix_lockf__doc__ = internal global [241 x i8] c"lockf(fd, cmd, len)\0A\0AApply, test or remove a POSIX lock on an open file descriptor.\0A\0Afd is an open file descriptor.\0Acmd specifies the command to use - one of F_LOCK, F_TLOCK, F_ULOCK or\0AF_TEST.\0Alen specifies the section of the file to lock.\00", align 16
@.str.112 = private unnamed_addr constant [6 x i8] c"lseek\00", align 1
@posix_lseek__doc__ = internal global [148 x i8] c"lseek(fd, pos, how) -> newpos\0A\0ASet the current position of a file descriptor.\0AReturn the new cursor position in bytes, starting from the beginning.\00", align 16
@.str.113 = private unnamed_addr constant [5 x i8] c"read\00", align 1
@posix_read__doc__ = internal global [55 x i8] c"read(fd, buffersize) -> bytes\0A\0ARead a file descriptor.\00", align 16
@.str.114 = private unnamed_addr constant [6 x i8] c"readv\00", align 1
@posix_readv__doc__ = internal global [373 x i8] c"readv(fd, buffers) -> bytesread\0A\0ARead from a file descriptor fd into a number of mutable, bytes-like\0Aobjects (\22buffers\22).  readv will transfer data into each buffer\0Auntil it is full and then move on to the next buffer in the sequence\0Ato hold the rest of the data.\0A\0Areadv returns the total number of bytes read (which may be less than\0Athe total capacity of all the buffers.\00", align 16
@.str.115 = private unnamed_addr constant [6 x i8] c"pread\00", align 1
@posix_pread__doc__ = internal global [181 x i8] c"pread(fd, buffersize, offset) -> string\0A\0ARead from a file descriptor, fd, at a position of offset. It will read up\0Ato buffersize number of bytes. The file offset remains unchanged.\00", align 16
@.str.116 = private unnamed_addr constant [6 x i8] c"write\00", align 1
@posix_write__doc__ = internal global [67 x i8] c"write(fd, data) -> byteswritten\0A\0AWrite bytes to a file descriptor.\00", align 16
@.str.117 = private unnamed_addr constant [7 x i8] c"writev\00", align 1
@posix_writev__doc__ = internal global [259 x i8] c"writev(fd, buffers) -> byteswritten\0A\0AWrite the contents of *buffers* to file descriptor *fd*. *buffers*\0Amust be a sequence of bytes-like objects.\0A\0Awritev writes the contents of each object to the file descriptor\0Aand returns the total number of bytes written.\00", align 16
@.str.118 = private unnamed_addr constant [7 x i8] c"pwrite\00", align 1
@posix_pwrite__doc__ = internal global [131 x i8] c"pwrite(fd, string, offset) -> byteswritten\0A\0AWrite string to a file descriptor, fd, from offset, leaving the file\0Aoffset unchanged.\00", align 16
@.str.119 = private unnamed_addr constant [9 x i8] c"sendfile\00", align 1
@posix_sendfile__doc__ = internal global [216 x i8] c"sendfile(out, in, offset, nbytes) -> byteswritten\0Asendfile(out, in, offset, nbytes, headers=None, trailers=None, flags=0)\0A            -> byteswritten\0ACopy nbytes bytes from file descriptor in to file descriptor out.\00", align 16
@.str.120 = private unnamed_addr constant [6 x i8] c"fstat\00", align 1
@posix_fstat__doc__ = internal global [99 x i8] c"fstat(fd) -> stat result\0A\0ALike stat(), but for an open file descriptor.\0AEquivalent to stat(fd=fd).\00", align 16
@.str.121 = private unnamed_addr constant [7 x i8] c"isatty\00", align 1
@posix_isatty__doc__ = internal global [129 x i8] c"isatty(fd) -> bool\0A\0AReturn True if the file descriptor 'fd' is an open file descriptor\0Aconnected to the slave end of a terminal.\00", align 16
@.str.122 = private unnamed_addr constant [5 x i8] c"pipe\00", align 1
@posix_pipe__doc__ = internal global [48 x i8] c"pipe() -> (read_end, write_end)\0A\0ACreate a pipe.\00", align 16
@.str.123 = private unnamed_addr constant [6 x i8] c"pipe2\00", align 1
@posix_pipe2__doc__ = internal global [176 x i8] c"pipe2(flags) -> (read_end, write_end)\0A\0ACreate a pipe with flags set atomically.\0Aflags can be constructed by ORing together one or more of these values:\0AO_NONBLOCK, O_CLOEXEC.\0A\00", align 16
@.str.124 = private unnamed_addr constant [7 x i8] c"mkfifo\00", align 1
@posix_mkfifo__doc__ = internal global [346 x i8] c"mkfifo(path, mode=0o666, *, dir_fd=None)\0A\0ACreate a FIFO (a POSIX named pipe).\0A\0AIf dir_fd is not None, it should be a file descriptor open to a directory,\0A  and path should be relative; path will then be relative to that directory.\0Adir_fd may not be implemented on your platform.\0A  If it is unavailable, using it will raise a NotImplementedError.\00", align 16
@.str.125 = private unnamed_addr constant [6 x i8] c"mknod\00", align 1
@posix_mknod__doc__ = internal global [699 x i8] c"mknod(filename, mode=0o600, device=0, *, dir_fd=None)\0A\0ACreate a filesystem node (file, device special file or named pipe)\0Anamed filename. mode specifies both the permissions to use and the\0Atype of node to be created, being combined (bitwise OR) with one of\0AS_IFREG, S_IFCHR, S_IFBLK, and S_IFIFO. For S_IFCHR and S_IFBLK,\0Adevice defines the newly created device special file (probably using\0Aos.makedev()), otherwise it is ignored.\0A\0AIf dir_fd is not None, it should be a file descriptor open to a directory,\0A  and path should be relative; path will then be relative to that directory.\0Adir_fd may not be implemented on your platform.\0A  If it is unavailable, using it will raise a NotImplementedError.\00", align 16
@.str.126 = private unnamed_addr constant [6 x i8] c"major\00", align 1
@posix_major__doc__ = internal global [87 x i8] c"major(device) -> major number\0AExtracts a device major number from a raw device number.\00", align 16
@.str.127 = private unnamed_addr constant [6 x i8] c"minor\00", align 1
@posix_minor__doc__ = internal global [87 x i8] c"minor(device) -> minor number\0AExtracts a device minor number from a raw device number.\00", align 16
@.str.128 = private unnamed_addr constant [8 x i8] c"makedev\00", align 1
@posix_makedev__doc__ = internal global [109 x i8] c"makedev(major, minor) -> device number\0AComposes a raw device number from the major and minor device numbers.\00", align 16
@.str.129 = private unnamed_addr constant [10 x i8] c"ftruncate\00", align 1
@posix_ftruncate__doc__ = internal global [62 x i8] c"ftruncate(fd, length)\0A\0ATruncate a file to a specified length.\00", align 16
@.str.130 = private unnamed_addr constant [9 x i8] c"truncate\00", align 1
@posix_truncate__doc__ = internal global [217 x i8] c"truncate(path, length)\0A\0ATruncate the file given by path to length bytes.\0AOn some platforms, path may also be specified as an open file descriptor.\0A  If this functionality is unavailable, using it raises an exception.\00", align 16
@.str.131 = private unnamed_addr constant [16 x i8] c"posix_fallocate\00", align 1
@posix_posix_fallocate__doc__ = internal global [158 x i8] c"posix_fallocate(fd, offset, len)\0A\0AEnsures that enough disk space is allocated for the file specified by fd\0Astarting from offset and continuing for len bytes.\00", align 16
@.str.132 = private unnamed_addr constant [14 x i8] c"posix_fadvise\00", align 1
@posix_posix_fadvise__doc__ = internal global [400 x i8] c"posix_fadvise(fd, offset, len, advice)\0A\0AAnnounces an intention to access data in a specific pattern thus allowing\0Athe kernel to make optimizations.\0AThe advice applies to the region of the file specified by fd starting at\0Aoffset and continuing for len bytes.\0Aadvice is one of POSIX_FADV_NORMAL, POSIX_FADV_SEQUENTIAL,\0APOSIX_FADV_RANDOM, POSIX_FADV_NOREUSE, POSIX_FADV_WILLNEED or\0APOSIX_FADV_DONTNEED.\00", align 16
@.str.133 = private unnamed_addr constant [7 x i8] c"putenv\00", align 1
@posix_putenv__doc__ = internal global [59 x i8] c"putenv(key, value)\0A\0AChange or add an environment variable.\00", align 16
@.str.134 = private unnamed_addr constant [9 x i8] c"unsetenv\00", align 1
@posix_unsetenv__doc__ = internal global [47 x i8] c"unsetenv(key)\0A\0ADelete an environment variable.\00", align 16
@.str.135 = private unnamed_addr constant [9 x i8] c"strerror\00", align 1
@posix_strerror__doc__ = internal global [71 x i8] c"strerror(code) -> string\0A\0ATranslate an error code to a message string.\00", align 16
@.str.136 = private unnamed_addr constant [7 x i8] c"fchdir\00", align 1
@posix_fchdir__doc__ = internal global [142 x i8] c"fchdir(fd)\0A\0AChange to the directory of the given file descriptor.  fd must be\0Aopened on a directory, not a file.  Equivalent to os.chdir(fd).\00", align 16
@.str.137 = private unnamed_addr constant [6 x i8] c"fsync\00", align 1
@posix_fsync__doc__ = internal global [64 x i8] c"fsync(fildes)\0A\0Aforce write of file with filedescriptor to disk.\00", align 16
@.str.138 = private unnamed_addr constant [5 x i8] c"sync\00", align 1
@posix_sync__doc__ = internal global [43 x i8] c"sync()\0A\0AForce write of everything to disk.\00", align 16
@.str.139 = private unnamed_addr constant [10 x i8] c"fdatasync\00", align 1
@posix_fdatasync__doc__ = internal global [104 x i8] c"fdatasync(fildes)\0A\0Aforce write of file with filedescriptor to disk.\0A does not force update of metadata.\00", align 16
@.str.140 = private unnamed_addr constant [10 x i8] c"WCOREDUMP\00", align 1
@posix_WCOREDUMP__doc__ = internal global [100 x i8] c"WCOREDUMP(status) -> bool\0A\0AReturn True if the process returning 'status' was dumped to a core file.\00", align 16
@.str.141 = private unnamed_addr constant [13 x i8] c"WIFCONTINUED\00", align 1
@posix_WIFCONTINUED__doc__ = internal global [115 x i8] c"WIFCONTINUED(status) -> bool\0A\0AReturn True if the process returning 'status' was continued from a\0Ajob control stop.\00", align 16
@.str.142 = private unnamed_addr constant [11 x i8] c"WIFSTOPPED\00", align 1
@posix_WIFSTOPPED__doc__ = internal global [87 x i8] c"WIFSTOPPED(status) -> bool\0A\0AReturn True if the process returning 'status' was stopped.\00", align 16
@.str.143 = private unnamed_addr constant [12 x i8] c"WIFSIGNALED\00", align 1
@posix_WIFSIGNALED__doc__ = internal global [103 x i8] c"WIFSIGNALED(status) -> bool\0A\0AReturn True if the process returning 'status' was terminated by a signal.\00", align 16
@.str.144 = private unnamed_addr constant [10 x i8] c"WIFEXITED\00", align 1
@posix_WIFEXITED__doc__ = internal global [110 x i8] c"WIFEXITED(status) -> bool\0A\0AReturn true if the process returning 'status' exited using the exit()\0Asystem call.\00", align 16
@.str.145 = private unnamed_addr constant [12 x i8] c"WEXITSTATUS\00", align 1
@posix_WEXITSTATUS__doc__ = internal global [78 x i8] c"WEXITSTATUS(status) -> integer\0A\0AReturn the process return code from 'status'.\00", align 16
@.str.146 = private unnamed_addr constant [9 x i8] c"WTERMSIG\00", align 1
@posix_WTERMSIG__doc__ = internal global [109 x i8] c"WTERMSIG(status) -> integer\0A\0AReturn the signal that terminated the process that provided the 'status'\0Avalue.\00", align 16
@.str.147 = private unnamed_addr constant [9 x i8] c"WSTOPSIG\00", align 1
@posix_WSTOPSIG__doc__ = internal global [106 x i8] c"WSTOPSIG(status) -> integer\0A\0AReturn the signal that stopped the process that provided\0Athe 'status' value.\00", align 16
@.str.148 = private unnamed_addr constant [9 x i8] c"fstatvfs\00", align 1
@posix_fstatvfs__doc__ = internal global [108 x i8] c"fstatvfs(fd) -> statvfs result\0A\0APerform an fstatvfs system call on the given fd.\0AEquivalent to statvfs(fd).\00", align 16
@.str.149 = private unnamed_addr constant [8 x i8] c"statvfs\00", align 1
@posix_statvfs__doc__ = internal global [251 x i8] c"statvfs(path)\0A\0APerform a statvfs system call on the given path.\0A\0Apath may always be specified as a string.\0AOn some platforms, path may also be specified as an open file descriptor.\0A  If this functionality is unavailable, using it raises an exception.\00", align 16
@.str.150 = private unnamed_addr constant [8 x i8] c"confstr\00", align 1
@posix_confstr__doc__ = internal global [79 x i8] c"confstr(name) -> string\0A\0AReturn a string-valued system configuration variable.\00", align 16
@.str.151 = private unnamed_addr constant [8 x i8] c"sysconf\00", align 1
@posix_sysconf__doc__ = internal global [82 x i8] c"sysconf(name) -> integer\0A\0AReturn an integer-valued system configuration variable.\00", align 16
@.str.152 = private unnamed_addr constant [10 x i8] c"fpathconf\00", align 1
@posix_fpathconf__doc__ = internal global [129 x i8] c"fpathconf(fd, name) -> integer\0A\0AReturn the configuration limit name for the file descriptor fd.\0AIf there is no limit, return -1.\00", align 16
@.str.153 = private unnamed_addr constant [9 x i8] c"pathconf\00", align 1
@posix_pathconf__doc__ = internal global [278 x i8] c"pathconf(path, name) -> integer\0A\0AReturn the configuration limit name for the file or directory path.\0AIf there is no limit, return -1.\0AOn some platforms, path may also be specified as an open file descriptor.\0A  If this functionality is unavailable, using it raises an exception.\00", align 16
@.str.154 = private unnamed_addr constant [6 x i8] c"abort\00", align 1
@posix_abort__doc__ = internal global [163 x i8] c"abort() -> does not return!\0A\0AAbort the interpreter immediately.  This 'dumps core' or otherwise fails\0Ain the hardest way possible on the hosting operating system.\00", align 16
@.str.155 = private unnamed_addr constant [11 x i8] c"getloadavg\00", align 1
@posix_getloadavg__doc__ = internal global [193 x i8] c"getloadavg() -> (float, float, float)\0A\0AReturn the number of processes in the system run queue averaged over\0Athe last 1, 5, and 15 minutes or raises OSError if the load average\0Awas unobtainable\00", align 16
@.str.156 = private unnamed_addr constant [8 x i8] c"urandom\00", align 1
@posix_urandom__doc__ = internal global [73 x i8] c"urandom(n) -> str\0A\0AReturn n random bytes suitable for cryptographic use.\00", align 16
@.str.157 = private unnamed_addr constant [10 x i8] c"setresuid\00", align 1
@posix_setresuid__doc__ = internal global [92 x i8] c"setresuid(ruid, euid, suid)\0A\0ASet the current process's real, effective, and saved user ids.\00", align 16
@.str.158 = private unnamed_addr constant [10 x i8] c"setresgid\00", align 1
@posix_setresgid__doc__ = internal global [93 x i8] c"setresgid(rgid, egid, sgid)\0A\0ASet the current process's real, effective, and saved group ids.\00", align 16
@.str.159 = private unnamed_addr constant [10 x i8] c"getresuid\00", align 1
@posix_getresuid__doc__ = internal global [107 x i8] c"getresuid() -> (ruid, euid, suid)\0A\0AGet tuple of the current process's real, effective, and saved user ids.\00", align 16
@.str.160 = private unnamed_addr constant [10 x i8] c"getresgid\00", align 1
@posix_getresgid__doc__ = internal global [108 x i8] c"getresgid() -> (rgid, egid, sgid)\0A\0AGet tuple of the current process's real, effective, and saved group ids.\00", align 16
@.str.161 = private unnamed_addr constant [9 x i8] c"setxattr\00", align 1
@posix_setxattr__doc__ = internal global [347 x i8] c"setxattr(path, attribute, value, flags=0, *, follow_symlinks=True)\0A\0ASet extended attribute attribute on path to value.\0Apath may be either a string or an open file descriptor.\0AIf follow_symlinks is False, and the last element of the path is a symbolic\0A  link, setxattr will modify the symbolic link itself instead of the file\0A  the link points to.\00", align 16
@.str.162 = private unnamed_addr constant [9 x i8] c"getxattr\00", align 1
@posix_getxattr__doc__ = internal global [349 x i8] c"getxattr(path, attribute, *, follow_symlinks=True) -> value\0A\0AReturn the value of extended attribute attribute on path.\0A\0Apath may be either a string or an open file descriptor.\0AIf follow_symlinks is False, and the last element of the path is a symbolic\0A  link, getxattr will examine the symbolic link itself instead of the file\0A  the link points to.\00", align 16
@.str.163 = private unnamed_addr constant [12 x i8] c"removexattr\00", align 1
@posix_removexattr__doc__ = internal global [331 x i8] c"removexattr(path, attribute, *, follow_symlinks=True)\0A\0ARemove extended attribute attribute on path.\0Apath may be either a string or an open file descriptor.\0AIf follow_symlinks is False, and the last element of the path is a symbolic\0A  link, removexattr will modify the symbolic link itself instead of the file\0A  the link points to.\00", align 16
@.str.164 = private unnamed_addr constant [10 x i8] c"listxattr\00", align 1
@posix_listxattr__doc__ = internal global [393 x i8] c"listxattr(path='.', *, follow_symlinks=True)\0A\0AReturn a list of extended attributes on path.\0A\0Apath may be either None, a string, or an open file descriptor.\0Aif path is None, listxattr will examine the current directory.\0AIf follow_symlinks is False, and the last element of the path is a symbolic\0A  link, listxattr will examine the symbolic link itself instead of the file\0A  the link points to.\00", align 16
@.str.165 = private unnamed_addr constant [18 x i8] c"get_terminal_size\00", align 1
@termsize__doc__ = internal global [467 x i8] c"Return the size of the terminal window as (columns, lines).\0A\0AThe optional argument fd (default standard output) specifies\0Awhich file descriptor should be queried.\0A\0AIf the file descriptor is not connected to a terminal, an OSError\0Ais thrown.\0A\0AThis function will only be defined if an implementation is\0Aavailable for this system.\0A\0Ashutil.get_terminal_size is the high-level function which should \0Anormally be used, os.get_terminal_size is the low-level implementation.\00", align 16
@.str.166 = private unnamed_addr constant [10 x i8] c"cpu_count\00", align 1
@posix_cpu_count__doc__ = internal global [110 x i8] c"cpu_count() -> integer\0A\0AReturn the number of CPUs in the system, or None if this value cannot be\0Aestablished.\00", align 16
@.str.167 = private unnamed_addr constant [16 x i8] c"get_inheritable\00", align 1
@get_inheritable__doc__ = internal global [89 x i8] c"get_inheritable(fd) -> bool\0A\0AGet the close-on-exe flag of the specified file descriptor.\00", align 16
@.str.168 = private unnamed_addr constant [16 x i8] c"set_inheritable\00", align 1
@set_inheritable__doc__ = internal global [93 x i8] c"set_inheritable(fd, inheritable)\0A\0ASet the inheritable flag of the specified file descriptor.\00", align 16
@os_stat._keywords = internal global [4 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.171, i32 0, i32 0), i8* null], align 16
@.str.169 = private unnamed_addr constant [5 x i8] c"path\00", align 1
@.str.170 = private unnamed_addr constant [7 x i8] c"dir_fd\00", align 1
@.str.171 = private unnamed_addr constant [16 x i8] c"follow_symlinks\00", align 1
@.str.172 = private unnamed_addr constant [13 x i8] c"O&|$O&p:stat\00", align 1
@.str.173 = private unnamed_addr constant [39 x i8] c"%s%scan't specify None for %s argument\00", align 1
@.str.174 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.175 = private unnamed_addr constant [25 x i8] c"string, bytes or integer\00", align 1
@.str.176 = private unnamed_addr constant [34 x i8] c"%s%sillegal type for %s parameter\00", align 1
@PyExc_ValueError = external global %struct._object*, align 8
@.str.177 = private unnamed_addr constant [33 x i8] c"%s%sembedded NUL character in %s\00", align 1
@.str.178 = private unnamed_addr constant [34 x i8] c"argument should be %s, not %.200s\00", align 1
@.str.179 = private unnamed_addr constant [27 x i8] c"fd is greater than maximum\00", align 1
@.str.180 = private unnamed_addr constant [24 x i8] c"fd is less than minimum\00", align 1
@.str.181 = private unnamed_addr constant [47 x i8] c"%s: can't specify dir_fd without matching path\00", align 1
@.str.182 = private unnamed_addr constant [37 x i8] c"%s: can't specify both dir_fd and fd\00", align 1
@.str.183 = private unnamed_addr constant [47 x i8] c"%s: cannot use fd and follow_symlinks together\00", align 1
@_stat_float_times = internal global i32 1, align 4
@os_access._keywords = internal global [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.185, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.171, i32 0, i32 0), i8* null], align 16
@.str.184 = private unnamed_addr constant [5 x i8] c"mode\00", align 1
@.str.185 = private unnamed_addr constant [14 x i8] c"effective_ids\00", align 1
@.str.186 = private unnamed_addr constant [17 x i8] c"O&i|$O&pp:access\00", align 1
@.str.187 = private unnamed_addr constant [10 x i8] c"i:ttyname\00", align 1
@posix_chdir.keywords = internal global [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* null], align 16
@.str.188 = private unnamed_addr constant [9 x i8] c"O&:chdir\00", align 1
@posix_chmod.keywords = internal global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.171, i32 0, i32 0), i8* null], align 16
@.str.189 = private unnamed_addr constant [15 x i8] c"O&i|$O&p:chmod\00", align 1
@.str.190 = private unnamed_addr constant [10 x i8] c"ii:fchmod\00", align 1
@posix_chown.keywords = internal global [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.191, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.192, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.171, i32 0, i32 0), i8* null], align 16
@.str.191 = private unnamed_addr constant [4 x i8] c"uid\00", align 1
@.str.192 = private unnamed_addr constant [4 x i8] c"gid\00", align 1
@.str.193 = private unnamed_addr constant [18 x i8] c"O&O&O&|$O&p:chown\00", align 1
@.str.194 = private unnamed_addr constant [13 x i8] c"iO&O&:fchown\00", align 1
@.str.195 = private unnamed_addr constant [14 x i8] c"O&O&O&:lchown\00", align 1
@.str.196 = private unnamed_addr constant [10 x i8] c"O&:chroot\00", align 1
@posix_link.keywords = internal global [6 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.197, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.198, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.199, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.200, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.171, i32 0, i32 0), i8* null], align 16
@.str.197 = private unnamed_addr constant [4 x i8] c"src\00", align 1
@.str.198 = private unnamed_addr constant [4 x i8] c"dst\00", align 1
@.str.199 = private unnamed_addr constant [11 x i8] c"src_dir_fd\00", align 1
@.str.200 = private unnamed_addr constant [11 x i8] c"dst_dir_fd\00", align 1
@.str.201 = private unnamed_addr constant [16 x i8] c"O&O&|O&O&p:link\00", align 1
@PyExc_NotImplementedError = external global %struct._object*, align 8
@.str.202 = private unnamed_addr constant [40 x i8] c"link: src and dst must be the same type\00", align 1
@posix_listdir.keywords = internal global [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* null], align 16
@.str.203 = private unnamed_addr constant [12 x i8] c"|O&:listdir\00", align 1
@.str.204 = private unnamed_addr constant [2 x i8] c".\00", align 1
@posix_lstat.keywords = internal global [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8* null], align 16
@.str.205 = private unnamed_addr constant [13 x i8] c"O&|$O&:lstat\00", align 1
@posix_mkdir.keywords = internal global [4 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8* null], align 16
@.str.206 = private unnamed_addr constant [14 x i8] c"O&|i$O&:mkdir\00", align 1
@.str.207 = private unnamed_addr constant [7 x i8] c"i:nice\00", align 1
@.str.208 = private unnamed_addr constant [3 x i8] c"ii\00", align 1
@.str.209 = private unnamed_addr constant [4 x i8] c"iii\00", align 1
@posix_readlink.keywords = internal global [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8* null], align 16
@.str.210 = private unnamed_addr constant [16 x i8] c"O&|$O&:readlink\00", align 1
@internal_rename.keywords = internal global [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.197, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.198, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.199, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.200, i32 0, i32 0), i8* null], align 16
@.str.211 = private unnamed_addr constant [12 x i8] c"O&O&|$O&O&:\00", align 1
@.str.212 = private unnamed_addr constant [38 x i8] c"%s: src and dst must be the same type\00", align 1
@posix_rmdir.keywords = internal global [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8* null], align 16
@.str.213 = private unnamed_addr constant [13 x i8] c"O&|$O&:rmdir\00", align 1
@.str.214 = private unnamed_addr constant [20 x i8] c"|i:stat_float_times\00", align 1
@PyExc_DeprecationWarning = external global %struct._object*, align 8
@.str.215 = private unnamed_addr constant [33 x i8] c"stat_float_times() is deprecated\00", align 1
@posix_symlink.keywords = internal global [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.197, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.198, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.216, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8* null], align 16
@.str.216 = private unnamed_addr constant [20 x i8] c"target_is_directory\00", align 1
@.str.217 = private unnamed_addr constant [18 x i8] c"O&O&|i$O&:symlink\00", align 1
@.str.218 = private unnamed_addr constant [43 x i8] c"symlink: src and dst must be the same type\00", align 1
@.str.219 = private unnamed_addr constant [10 x i8] c"O&:system\00", align 1
@.str.220 = private unnamed_addr constant [8 x i8] c"i:umask\00", align 1
@posix_unlink.keywords = internal global [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8* null], align 16
@.str.221 = private unnamed_addr constant [14 x i8] c"O&|$O&:unlink\00", align 1
@.str.222 = private unnamed_addr constant [3 x i8] c"ns\00", align 1
@.str.223 = private unnamed_addr constant [16 x i8] c"O&|O$OO&p:utime\00", align 1
@.str.224 = private unnamed_addr constant [59 x i8] c"utime: you may specify either 'times' or 'ns' but not both\00", align 1
@PyTuple_Type = external global %struct._typeobject, align 8
@.str.225 = private unnamed_addr constant [58 x i8] c"utime: 'times' must be either a tuple of two ints or None\00", align 1
@.str.226 = private unnamed_addr constant [40 x i8] c"utime: 'ns' must be a tuple of two ints\00", align 1
@.str.227 = private unnamed_addr constant [8 x i8] c"i:_exit\00", align 1
@.str.228 = private unnamed_addr constant [10 x i8] c"O&O:execv\00", align 1
@.str.229 = private unnamed_addr constant [38 x i8] c"execv() arg 2 must be a tuple or list\00", align 1
@.str.230 = private unnamed_addr constant [32 x i8] c"execv() arg 2 must not be empty\00", align 1
@posix_execve.keywords = internal global [4 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.231, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.232, i32 0, i32 0), i8* null], align 16
@.str.231 = private unnamed_addr constant [5 x i8] c"argv\00", align 1
@.str.232 = private unnamed_addr constant [12 x i8] c"environment\00", align 1
@.str.233 = private unnamed_addr constant [12 x i8] c"O&OO:execve\00", align 1
@.str.234 = private unnamed_addr constant [37 x i8] c"execve: argv must be a tuple or list\00", align 1
@.str.235 = private unnamed_addr constant [45 x i8] c"execve: environment must be a mapping object\00", align 1
@.str.236 = private unnamed_addr constant [41 x i8] c"env.keys() or env.values() is not a list\00", align 1
@.str.237 = private unnamed_addr constant [6 x i8] c"%s=%s\00", align 1
@PyExc_RuntimeError = external global %struct._object*, align 8
@.str.238 = private unnamed_addr constant [28 x i8] c"not holding the import lock\00", align 1
@.str.239 = private unnamed_addr constant [25 x i8] c"i:sched_get_priority_max\00", align 1
@.str.240 = private unnamed_addr constant [25 x i8] c"i:sched_get_priority_min\00", align 1
@.str.241 = private unnamed_addr constant [17 x i8] c"i:sched_getparam\00", align 1
@.str.242 = private unnamed_addr constant [21 x i8] c"i:sched_getscheduler\00", align 1
@.str.243 = private unnamed_addr constant [24 x i8] c"i:sched_rr_get_interval\00", align 1
@.str.244 = private unnamed_addr constant [19 x i8] c"iO&:sched_setparam\00", align 1
@.str.245 = private unnamed_addr constant [31 x i8] c"must have a sched_param object\00", align 1
@.str.246 = private unnamed_addr constant [28 x i8] c"sched_priority out of range\00", align 1
@.str.247 = private unnamed_addr constant [24 x i8] c"iiO&:sched_setscheduler\00", align 1
@.str.248 = private unnamed_addr constant [21 x i8] c"iO:sched_setaffinity\00", align 1
@.str.249 = private unnamed_addr constant [54 x i8] c"expected an iterator of ints, but iterator yielded %R\00", align 1
@.str.250 = private unnamed_addr constant [20 x i8] c"negative CPU number\00", align 1
@.str.251 = private unnamed_addr constant [21 x i8] c"CPU number too large\00", align 1
@.str.252 = private unnamed_addr constant [20 x i8] c"i:sched_getaffinity\00", align 1
@.str.253 = private unnamed_addr constant [42 x i8] c"could not allocate a large enough CPU set\00", align 1
@.str.254 = private unnamed_addr constant [5 x i8] c"(ii)\00", align 1
@.str.255 = private unnamed_addr constant [5 x i8] c"(Ni)\00", align 1
@.str.256 = private unnamed_addr constant [17 x i8] c"sO&:getgrouplist\00", align 1
@.str.257 = private unnamed_addr constant [31 x i8] c"unable to determine login name\00", align 1
@.str.258 = private unnamed_addr constant [8 x i8] c"ii:kill\00", align 1
@.str.259 = private unnamed_addr constant [10 x i8] c"ii:killpg\00", align 1
@.str.260 = private unnamed_addr constant [10 x i8] c"O&:setuid\00", align 1
@.str.261 = private unnamed_addr constant [11 x i8] c"O&:seteuid\00", align 1
@.str.262 = private unnamed_addr constant [11 x i8] c"O&:setegid\00", align 1
@.str.263 = private unnamed_addr constant [14 x i8] c"O&O&:setreuid\00", align 1
@.str.264 = private unnamed_addr constant [14 x i8] c"O&O&:setregid\00", align 1
@.str.265 = private unnamed_addr constant [10 x i8] c"O&:setgid\00", align 1
@.str.266 = private unnamed_addr constant [38 x i8] c"setgroups argument must be a sequence\00", align 1
@.str.267 = private unnamed_addr constant [16 x i8] c"too many groups\00", align 1
@.str.268 = private unnamed_addr constant [24 x i8] c"groups must be integers\00", align 1
@.str.269 = private unnamed_addr constant [16 x i8] c"O&O&:initgroups\00", align 1
@.str.270 = private unnamed_addr constant [10 x i8] c"i:getpgid\00", align 1
@.str.271 = private unnamed_addr constant [3 x i8] c"Ni\00", align 1
@.str.272 = private unnamed_addr constant [8 x i8] c"i:wait3\00", align 1
@wait_helper.struct_rusage = internal global %struct._object* null, align 8
@wait_helper.PyId_struct_rusage = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.273, i32 0, i32 0), %struct._object* null }, align 8
@.str.273 = private unnamed_addr constant [14 x i8] c"struct_rusage\00", align 1
@.str.274 = private unnamed_addr constant [9 x i8] c"resource\00", align 1
@.str.275 = private unnamed_addr constant [4 x i8] c"NiN\00", align 1
@.str.276 = private unnamed_addr constant [9 x i8] c"ii:wait4\00", align 1
@.str.277 = private unnamed_addr constant [11 x i8] c"iii:waitid\00", align 1
@.str.278 = private unnamed_addr constant [11 x i8] c"ii:waitpid\00", align 1
@.str.279 = private unnamed_addr constant [9 x i8] c"i:getsid\00", align 1
@.str.280 = private unnamed_addr constant [11 x i8] c"ii:setpgid\00", align 1
@.str.281 = private unnamed_addr constant [12 x i8] c"i:tcgetpgrp\00", align 1
@.str.282 = private unnamed_addr constant [13 x i8] c"ii:tcsetpgrp\00", align 1
@posix_open.keywords = internal global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.283, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8* null], align 16
@.str.283 = private unnamed_addr constant [6 x i8] c"flags\00", align 1
@_Py_open_cloexec_works = external global i32, align 4
@.str.284 = private unnamed_addr constant [14 x i8] c"O&i|i$O&:open\00", align 1
@.str.285 = private unnamed_addr constant [8 x i8] c"i:close\00", align 1
@.str.286 = private unnamed_addr constant [14 x i8] c"ii:closerange\00", align 1
@.str.287 = private unnamed_addr constant [18 x i8] c"i:device_encoding\00", align 1
@.str.288 = private unnamed_addr constant [6 x i8] c"i:dup\00", align 1
@posix_dup2.keywords = internal global [4 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.289, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.290, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.291, i32 0, i32 0), i8* null], align 16
@.str.289 = private unnamed_addr constant [3 x i8] c"fd\00", align 1
@.str.290 = private unnamed_addr constant [4 x i8] c"fd2\00", align 1
@.str.291 = private unnamed_addr constant [12 x i8] c"inheritable\00", align 1
@.str.292 = private unnamed_addr constant [10 x i8] c"ii|i:dup2\00", align 1
@.str.293 = private unnamed_addr constant [11 x i8] c"iiO&:lockf\00", align 1
@.str.294 = private unnamed_addr constant [10 x i8] c"iOi:lseek\00", align 1
@.str.295 = private unnamed_addr constant [8 x i8] c"ii:read\00", align 1
@.str.296 = private unnamed_addr constant [9 x i8] c"iO:readv\00", align 1
@.str.297 = private unnamed_addr constant [33 x i8] c"readv() arg 2 must be a sequence\00", align 1
@.str.298 = private unnamed_addr constant [11 x i8] c"iiO&:pread\00", align 1
@.str.299 = private unnamed_addr constant [10 x i8] c"iy*:write\00", align 1
@.str.300 = private unnamed_addr constant [10 x i8] c"iO:writev\00", align 1
@.str.301 = private unnamed_addr constant [34 x i8] c"writev() arg 2 must be a sequence\00", align 1
@.str.302 = private unnamed_addr constant [13 x i8] c"iy*O&:pwrite\00", align 1
@posix_sendfile.keywords = internal global [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.303, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.304, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.305, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.306, i32 0, i32 0), i8* null], align 16
@.str.303 = private unnamed_addr constant [4 x i8] c"out\00", align 1
@.str.304 = private unnamed_addr constant [3 x i8] c"in\00", align 1
@.str.305 = private unnamed_addr constant [7 x i8] c"offset\00", align 1
@.str.306 = private unnamed_addr constant [6 x i8] c"count\00", align 1
@.str.307 = private unnamed_addr constant [14 x i8] c"iiOn:sendfile\00", align 1
@.str.308 = private unnamed_addr constant [2 x i8] c"n\00", align 1
@.str.309 = private unnamed_addr constant [8 x i8] c"i:fstat\00", align 1
@.str.310 = private unnamed_addr constant [9 x i8] c"i:isatty\00", align 1
@posix_mkfifo.keywords = internal global [4 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8* null], align 16
@.str.311 = private unnamed_addr constant [15 x i8] c"O&|i$O&:mkfifo\00", align 1
@posix_mknod.keywords = internal global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.312, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8* null], align 16
@.str.312 = private unnamed_addr constant [7 x i8] c"device\00", align 1
@.str.313 = private unnamed_addr constant [15 x i8] c"O&|ii$O&:mknod\00", align 1
@.str.314 = private unnamed_addr constant [8 x i8] c"i:major\00", align 1
@.str.315 = private unnamed_addr constant [8 x i8] c"i:minor\00", align 1
@.str.316 = private unnamed_addr constant [11 x i8] c"ii:makedev\00", align 1
@.str.317 = private unnamed_addr constant [14 x i8] c"iO&:ftruncate\00", align 1
@posix_truncate.keywords = internal global [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.318, i32 0, i32 0), i8* null], align 16
@.str.318 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@.str.319 = private unnamed_addr constant [14 x i8] c"O&O&:truncate\00", align 1
@.str.320 = private unnamed_addr constant [22 x i8] c"iO&O&:posix_fallocate\00", align 1
@.str.321 = private unnamed_addr constant [21 x i8] c"iO&O&i:posix_fadvise\00", align 1
@.str.322 = private unnamed_addr constant [12 x i8] c"O&O&:putenv\00", align 1
@.str.323 = private unnamed_addr constant [12 x i8] c"O&:unsetenv\00", align 1
@.str.324 = private unnamed_addr constant [11 x i8] c"i:strerror\00", align 1
@.str.325 = private unnamed_addr constant [33 x i8] c"strerror() argument out of range\00", align 1
@.str.326 = private unnamed_addr constant [16 x i8] c"surrogateescape\00", align 1
@.str.327 = private unnamed_addr constant [12 x i8] c"i:WCOREDUMP\00", align 1
@.str.328 = private unnamed_addr constant [13 x i8] c"i:WCONTINUED\00", align 1
@.str.329 = private unnamed_addr constant [13 x i8] c"i:WIFSTOPPED\00", align 1
@.str.330 = private unnamed_addr constant [14 x i8] c"i:WIFSIGNALED\00", align 1
@.str.331 = private unnamed_addr constant [12 x i8] c"i:WIFEXITED\00", align 1
@.str.332 = private unnamed_addr constant [14 x i8] c"i:WEXITSTATUS\00", align 1
@.str.333 = private unnamed_addr constant [2 x i8] c"i\00", align 1
@.str.334 = private unnamed_addr constant [11 x i8] c"i:WTERMSIG\00", align 1
@.str.335 = private unnamed_addr constant [11 x i8] c"i:WSTOPSIG\00", align 1
@.str.336 = private unnamed_addr constant [11 x i8] c"i:fstatvfs\00", align 1
@posix_statvfs.keywords = internal global [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* null], align 16
@.str.337 = private unnamed_addr constant [11 x i8] c"O&:statvfs\00", align 1
@.str.338 = private unnamed_addr constant [11 x i8] c"O&:confstr\00", align 1
@posix_constants_confstr = internal global [27 x %struct.constdef] [%struct.constdef { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.341, i32 0, i32 0), i64 2 }, %struct.constdef { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.342, i32 0, i32 0), i64 3 }, %struct.constdef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.343, i32 0, i32 0), i64 1004 }, %struct.constdef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.344, i32 0, i32 0), i64 1005 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.345, i32 0, i32 0), i64 1006 }, %struct.constdef { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.346, i32 0, i32 0), i64 1007 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.347, i32 0, i32 0), i64 1000 }, %struct.constdef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.348, i32 0, i32 0), i64 1001 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.349, i32 0, i32 0), i64 1002 }, %struct.constdef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.350, i32 0, i32 0), i64 1003 }, %struct.constdef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.351, i32 0, i32 0), i64 0 }, %struct.constdef { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.352, i32 0, i32 0), i64 1100 }, %struct.constdef { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.353, i32 0, i32 0), i64 1101 }, %struct.constdef { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.354, i32 0, i32 0), i64 1102 }, %struct.constdef { i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.355, i32 0, i32 0), i64 1103 }, %struct.constdef { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.356, i32 0, i32 0), i64 1104 }, %struct.constdef { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.357, i32 0, i32 0), i64 1105 }, %struct.constdef { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.358, i32 0, i32 0), i64 1106 }, %struct.constdef { i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.359, i32 0, i32 0), i64 1107 }, %struct.constdef { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.360, i32 0, i32 0), i64 1108 }, %struct.constdef { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.361, i32 0, i32 0), i64 1109 }, %struct.constdef { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.362, i32 0, i32 0), i64 1110 }, %struct.constdef { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.363, i32 0, i32 0), i64 1111 }, %struct.constdef { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.364, i32 0, i32 0), i64 1112 }, %struct.constdef { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.365, i32 0, i32 0), i64 1113 }, %struct.constdef { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.366, i32 0, i32 0), i64 1114 }, %struct.constdef { i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.367, i32 0, i32 0), i64 1115 }], align 16
@.str.339 = private unnamed_addr constant [48 x i8] c"configuration names must be strings or integers\00", align 1
@.str.340 = private unnamed_addr constant [32 x i8] c"unrecognized configuration name\00", align 1
@.str.341 = private unnamed_addr constant [20 x i8] c"CS_GNU_LIBC_VERSION\00", align 1
@.str.342 = private unnamed_addr constant [26 x i8] c"CS_GNU_LIBPTHREAD_VERSION\00", align 1
@.str.343 = private unnamed_addr constant [16 x i8] c"CS_LFS64_CFLAGS\00", align 1
@.str.344 = private unnamed_addr constant [17 x i8] c"CS_LFS64_LDFLAGS\00", align 1
@.str.345 = private unnamed_addr constant [14 x i8] c"CS_LFS64_LIBS\00", align 1
@.str.346 = private unnamed_addr constant [19 x i8] c"CS_LFS64_LINTFLAGS\00", align 1
@.str.347 = private unnamed_addr constant [14 x i8] c"CS_LFS_CFLAGS\00", align 1
@.str.348 = private unnamed_addr constant [15 x i8] c"CS_LFS_LDFLAGS\00", align 1
@.str.349 = private unnamed_addr constant [12 x i8] c"CS_LFS_LIBS\00", align 1
@.str.350 = private unnamed_addr constant [17 x i8] c"CS_LFS_LINTFLAGS\00", align 1
@.str.351 = private unnamed_addr constant [8 x i8] c"CS_PATH\00", align 1
@.str.352 = private unnamed_addr constant [27 x i8] c"CS_XBS5_ILP32_OFF32_CFLAGS\00", align 1
@.str.353 = private unnamed_addr constant [28 x i8] c"CS_XBS5_ILP32_OFF32_LDFLAGS\00", align 1
@.str.354 = private unnamed_addr constant [25 x i8] c"CS_XBS5_ILP32_OFF32_LIBS\00", align 1
@.str.355 = private unnamed_addr constant [30 x i8] c"CS_XBS5_ILP32_OFF32_LINTFLAGS\00", align 1
@.str.356 = private unnamed_addr constant [28 x i8] c"CS_XBS5_ILP32_OFFBIG_CFLAGS\00", align 1
@.str.357 = private unnamed_addr constant [29 x i8] c"CS_XBS5_ILP32_OFFBIG_LDFLAGS\00", align 1
@.str.358 = private unnamed_addr constant [26 x i8] c"CS_XBS5_ILP32_OFFBIG_LIBS\00", align 1
@.str.359 = private unnamed_addr constant [31 x i8] c"CS_XBS5_ILP32_OFFBIG_LINTFLAGS\00", align 1
@.str.360 = private unnamed_addr constant [26 x i8] c"CS_XBS5_LP64_OFF64_CFLAGS\00", align 1
@.str.361 = private unnamed_addr constant [27 x i8] c"CS_XBS5_LP64_OFF64_LDFLAGS\00", align 1
@.str.362 = private unnamed_addr constant [24 x i8] c"CS_XBS5_LP64_OFF64_LIBS\00", align 1
@.str.363 = private unnamed_addr constant [29 x i8] c"CS_XBS5_LP64_OFF64_LINTFLAGS\00", align 1
@.str.364 = private unnamed_addr constant [28 x i8] c"CS_XBS5_LPBIG_OFFBIG_CFLAGS\00", align 1
@.str.365 = private unnamed_addr constant [29 x i8] c"CS_XBS5_LPBIG_OFFBIG_LDFLAGS\00", align 1
@.str.366 = private unnamed_addr constant [26 x i8] c"CS_XBS5_LPBIG_OFFBIG_LIBS\00", align 1
@.str.367 = private unnamed_addr constant [31 x i8] c"CS_XBS5_LPBIG_OFFBIG_LINTFLAGS\00", align 1
@.str.368 = private unnamed_addr constant [11 x i8] c"O&:sysconf\00", align 1
@posix_constants_sysconf = internal global [134 x %struct.constdef] [%struct.constdef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.369, i32 0, i32 0), i64 95 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.370, i32 0, i32 0), i64 47 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.371, i32 0, i32 0), i64 48 }, %struct.constdef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.372, i32 0, i32 0), i64 96 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.373, i32 0, i32 0), i64 49 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.374, i32 0, i32 0), i64 50 }, %struct.constdef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.375, i32 0, i32 0), i64 52 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.376, i32 0, i32 0), i64 51 }, %struct.constdef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.377, i32 0, i32 0), i64 97 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.378, i32 0, i32 0), i64 46 }, %struct.constdef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.379, i32 0, i32 0), i64 23 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.380, i32 0, i32 0), i64 24 }, %struct.constdef { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.381, i32 0, i32 0), i64 25 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.382, i32 0, i32 0), i64 0 }, %struct.constdef { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.383, i32 0, i32 0), i64 12 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.384, i32 0, i32 0), i64 87 }, %struct.constdef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.385, i32 0, i32 0), i64 86 }, %struct.constdef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.386, i32 0, i32 0), i64 36 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.387, i32 0, i32 0), i64 37 }, %struct.constdef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.388, i32 0, i32 0), i64 38 }, %struct.constdef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.389, i32 0, i32 0), i64 39 }, %struct.constdef { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.390, i32 0, i32 0), i64 45 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.391, i32 0, i32 0), i64 101 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.392, i32 0, i32 0), i64 102 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.393, i32 0, i32 0), i64 103 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.394, i32 0, i32 0), i64 1 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.395, i32 0, i32 0), i64 2 }, %struct.constdef { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.396, i32 0, i32 0), i64 40 }, %struct.constdef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.397, i32 0, i32 0), i64 26 }, %struct.constdef { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.398, i32 0, i32 0), i64 41 }, %struct.constdef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.399, i32 0, i32 0), i64 42 }, %struct.constdef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.400, i32 0, i32 0), i64 15 }, %struct.constdef { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.401, i32 0, i32 0), i64 69 }, %struct.constdef { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.402, i32 0, i32 0), i64 70 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.403, i32 0, i32 0), i64 104 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.404, i32 0, i32 0), i64 105 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.405, i32 0, i32 0), i64 60 }, %struct.constdef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.406, i32 0, i32 0), i64 7 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.407, i32 0, i32 0), i64 43 }, %struct.constdef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.408, i32 0, i32 0), i64 71 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.409, i32 0, i32 0), i64 106 }, %struct.constdef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.410, i32 0, i32 0), i64 16 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.411, i32 0, i32 0), i64 108 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.412, i32 0, i32 0), i64 17 }, %struct.constdef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.413, i32 0, i32 0), i64 18 }, %struct.constdef { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.414, i32 0, i32 0), i64 19 }, %struct.constdef { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.415, i32 0, i32 0), i64 20 }, %struct.constdef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.416, i32 0, i32 0), i64 27 }, %struct.constdef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.417, i32 0, i32 0), i64 28 }, %struct.constdef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.418, i32 0, i32 0), i64 3 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.419, i32 0, i32 0), i64 119 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.420, i32 0, i32 0), i64 120 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.421, i32 0, i32 0), i64 121 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.422, i32 0, i32 0), i64 122 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.423, i32 0, i32 0), i64 123 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.424, i32 0, i32 0), i64 124 }, %struct.constdef { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.425, i32 0, i32 0), i64 83 }, %struct.constdef { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.426, i32 0, i32 0), i64 84 }, %struct.constdef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.427, i32 0, i32 0), i64 109 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.428, i32 0, i32 0), i64 4 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.429, i32 0, i32 0), i64 30 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.430, i32 0, i32 0), i64 30 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.431, i32 0, i32 0), i64 88 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.432, i32 0, i32 0), i64 85 }, %struct.constdef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.433, i32 0, i32 0), i64 53 }, %struct.constdef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.434, i32 0, i32 0), i64 56 }, %struct.constdef { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.435, i32 0, i32 0), i64 62 }, %struct.constdef { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.436, i32 0, i32 0), i64 61 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.437, i32 0, i32 0), i64 57 }, %struct.constdef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.438, i32 0, i32 0), i64 64 }, %struct.constdef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.439, i32 0, i32 0), i64 63 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.440, i32 0, i32 0), i64 65 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.441, i32 0, i32 0), i64 55 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.442, i32 0, i32 0), i64 54 }, %struct.constdef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.443, i32 0, i32 0), i64 58 }, %struct.constdef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.444, i32 0, i32 0), i64 13 }, %struct.constdef { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.445, i32 0, i32 0), i64 10 }, %struct.constdef { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.446, i32 0, i32 0), i64 9 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.447, i32 0, i32 0), i64 44 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.448, i32 0, i32 0), i64 31 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.449, i32 0, i32 0), i64 8 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.450, i32 0, i32 0), i64 111 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.451, i32 0, i32 0), i64 112 }, %struct.constdef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.452, i32 0, i32 0), i64 59 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.453, i32 0, i32 0), i64 21 }, %struct.constdef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.454, i32 0, i32 0), i64 32 }, %struct.constdef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.455, i32 0, i32 0), i64 33 }, %struct.constdef { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.456, i32 0, i32 0), i64 22 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.457, i32 0, i32 0), i64 113 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.458, i32 0, i32 0), i64 114 }, %struct.constdef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.459, i32 0, i32 0), i64 34 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.460, i32 0, i32 0), i64 110 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.461, i32 0, i32 0), i64 5 }, %struct.constdef { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.462, i32 0, i32 0), i64 14 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.463, i32 0, i32 0), i64 67 }, %struct.constdef { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.464, i32 0, i32 0), i64 77 }, %struct.constdef { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.465, i32 0, i32 0), i64 78 }, %struct.constdef { i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.466, i32 0, i32 0), i64 73 }, %struct.constdef { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.467, i32 0, i32 0), i64 74 }, %struct.constdef { i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.468, i32 0, i32 0), i64 79 }, %struct.constdef { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.469, i32 0, i32 0), i64 80 }, %struct.constdef { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.470, i32 0, i32 0), i64 81 }, %struct.constdef { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.471, i32 0, i32 0), i64 82 }, %struct.constdef { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.472, i32 0, i32 0), i64 68 }, %struct.constdef { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.473, i32 0, i32 0), i64 75 }, %struct.constdef { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.474, i32 0, i32 0), i64 76 }, %struct.constdef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.475, i32 0, i32 0), i64 11 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.476, i32 0, i32 0), i64 35 }, %struct.constdef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.477, i32 0, i32 0), i64 72 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.478, i32 0, i32 0), i64 6 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.479, i32 0, i32 0), i64 66 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.480, i32 0, i32 0), i64 115 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.481, i32 0, i32 0), i64 116 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.482, i32 0, i32 0), i64 60 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.483, i32 0, i32 0), i64 117 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.484, i32 0, i32 0), i64 118 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.485, i32 0, i32 0), i64 29 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.486, i32 0, i32 0), i64 107 }, %struct.constdef { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.487, i32 0, i32 0), i64 125 }, %struct.constdef { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.488, i32 0, i32 0), i64 126 }, %struct.constdef { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.489, i32 0, i32 0), i64 127 }, %struct.constdef { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.490, i32 0, i32 0), i64 128 }, %struct.constdef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.491, i32 0, i32 0), i64 92 }, %struct.constdef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.492, i32 0, i32 0), i64 93 }, %struct.constdef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.493, i32 0, i32 0), i64 129 }, %struct.constdef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.494, i32 0, i32 0), i64 130 }, %struct.constdef { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.495, i32 0, i32 0), i64 131 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.496, i32 0, i32 0), i64 94 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.497, i32 0, i32 0), i64 91 }, %struct.constdef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.498, i32 0, i32 0), i64 89 }, %struct.constdef { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.499, i32 0, i32 0), i64 90 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.500, i32 0, i32 0), i64 98 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.501, i32 0, i32 0), i64 99 }, %struct.constdef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.502, i32 0, i32 0), i64 100 }], align 16
@.str.369 = private unnamed_addr constant [15 x i8] c"SC_2_CHAR_TERM\00", align 1
@.str.370 = private unnamed_addr constant [12 x i8] c"SC_2_C_BIND\00", align 1
@.str.371 = private unnamed_addr constant [11 x i8] c"SC_2_C_DEV\00", align 1
@.str.372 = private unnamed_addr constant [15 x i8] c"SC_2_C_VERSION\00", align 1
@.str.373 = private unnamed_addr constant [14 x i8] c"SC_2_FORT_DEV\00", align 1
@.str.374 = private unnamed_addr constant [14 x i8] c"SC_2_FORT_RUN\00", align 1
@.str.375 = private unnamed_addr constant [15 x i8] c"SC_2_LOCALEDEF\00", align 1
@.str.376 = private unnamed_addr constant [12 x i8] c"SC_2_SW_DEV\00", align 1
@.str.377 = private unnamed_addr constant [9 x i8] c"SC_2_UPE\00", align 1
@.str.378 = private unnamed_addr constant [13 x i8] c"SC_2_VERSION\00", align 1
@.str.379 = private unnamed_addr constant [18 x i8] c"SC_AIO_LISTIO_MAX\00", align 1
@.str.380 = private unnamed_addr constant [11 x i8] c"SC_AIO_MAX\00", align 1
@.str.381 = private unnamed_addr constant [22 x i8] c"SC_AIO_PRIO_DELTA_MAX\00", align 1
@.str.382 = private unnamed_addr constant [11 x i8] c"SC_ARG_MAX\00", align 1
@.str.383 = private unnamed_addr constant [19 x i8] c"SC_ASYNCHRONOUS_IO\00", align 1
@.str.384 = private unnamed_addr constant [14 x i8] c"SC_ATEXIT_MAX\00", align 1
@.str.385 = private unnamed_addr constant [16 x i8] c"SC_AVPHYS_PAGES\00", align 1
@.str.386 = private unnamed_addr constant [15 x i8] c"SC_BC_BASE_MAX\00", align 1
@.str.387 = private unnamed_addr constant [14 x i8] c"SC_BC_DIM_MAX\00", align 1
@.str.388 = private unnamed_addr constant [16 x i8] c"SC_BC_SCALE_MAX\00", align 1
@.str.389 = private unnamed_addr constant [17 x i8] c"SC_BC_STRING_MAX\00", align 1
@.str.390 = private unnamed_addr constant [22 x i8] c"SC_CHARCLASS_NAME_MAX\00", align 1
@.str.391 = private unnamed_addr constant [12 x i8] c"SC_CHAR_BIT\00", align 1
@.str.392 = private unnamed_addr constant [12 x i8] c"SC_CHAR_MAX\00", align 1
@.str.393 = private unnamed_addr constant [12 x i8] c"SC_CHAR_MIN\00", align 1
@.str.394 = private unnamed_addr constant [13 x i8] c"SC_CHILD_MAX\00", align 1
@.str.395 = private unnamed_addr constant [11 x i8] c"SC_CLK_TCK\00", align 1
@.str.396 = private unnamed_addr constant [20 x i8] c"SC_COLL_WEIGHTS_MAX\00", align 1
@.str.397 = private unnamed_addr constant [18 x i8] c"SC_DELAYTIMER_MAX\00", align 1
@.str.398 = private unnamed_addr constant [19 x i8] c"SC_EQUIV_CLASS_MAX\00", align 1
@.str.399 = private unnamed_addr constant [17 x i8] c"SC_EXPR_NEST_MAX\00", align 1
@.str.400 = private unnamed_addr constant [9 x i8] c"SC_FSYNC\00", align 1
@.str.401 = private unnamed_addr constant [20 x i8] c"SC_GETGR_R_SIZE_MAX\00", align 1
@.str.402 = private unnamed_addr constant [20 x i8] c"SC_GETPW_R_SIZE_MAX\00", align 1
@.str.403 = private unnamed_addr constant [11 x i8] c"SC_INT_MAX\00", align 1
@.str.404 = private unnamed_addr constant [11 x i8] c"SC_INT_MIN\00", align 1
@.str.405 = private unnamed_addr constant [11 x i8] c"SC_IOV_MAX\00", align 1
@.str.406 = private unnamed_addr constant [15 x i8] c"SC_JOB_CONTROL\00", align 1
@.str.407 = private unnamed_addr constant [12 x i8] c"SC_LINE_MAX\00", align 1
@.str.408 = private unnamed_addr constant [18 x i8] c"SC_LOGIN_NAME_MAX\00", align 1
@.str.409 = private unnamed_addr constant [12 x i8] c"SC_LONG_BIT\00", align 1
@.str.410 = private unnamed_addr constant [16 x i8] c"SC_MAPPED_FILES\00", align 1
@.str.411 = private unnamed_addr constant [14 x i8] c"SC_MB_LEN_MAX\00", align 1
@.str.412 = private unnamed_addr constant [11 x i8] c"SC_MEMLOCK\00", align 1
@.str.413 = private unnamed_addr constant [17 x i8] c"SC_MEMLOCK_RANGE\00", align 1
@.str.414 = private unnamed_addr constant [21 x i8] c"SC_MEMORY_PROTECTION\00", align 1
@.str.415 = private unnamed_addr constant [19 x i8] c"SC_MESSAGE_PASSING\00", align 1
@.str.416 = private unnamed_addr constant [15 x i8] c"SC_MQ_OPEN_MAX\00", align 1
@.str.417 = private unnamed_addr constant [15 x i8] c"SC_MQ_PRIO_MAX\00", align 1
@.str.418 = private unnamed_addr constant [15 x i8] c"SC_NGROUPS_MAX\00", align 1
@.str.419 = private unnamed_addr constant [13 x i8] c"SC_NL_ARGMAX\00", align 1
@.str.420 = private unnamed_addr constant [14 x i8] c"SC_NL_LANGMAX\00", align 1
@.str.421 = private unnamed_addr constant [13 x i8] c"SC_NL_MSGMAX\00", align 1
@.str.422 = private unnamed_addr constant [11 x i8] c"SC_NL_NMAX\00", align 1
@.str.423 = private unnamed_addr constant [13 x i8] c"SC_NL_SETMAX\00", align 1
@.str.424 = private unnamed_addr constant [14 x i8] c"SC_NL_TEXTMAX\00", align 1
@.str.425 = private unnamed_addr constant [20 x i8] c"SC_NPROCESSORS_CONF\00", align 1
@.str.426 = private unnamed_addr constant [20 x i8] c"SC_NPROCESSORS_ONLN\00", align 1
@.str.427 = private unnamed_addr constant [9 x i8] c"SC_NZERO\00", align 1
@.str.428 = private unnamed_addr constant [12 x i8] c"SC_OPEN_MAX\00", align 1
@.str.429 = private unnamed_addr constant [12 x i8] c"SC_PAGESIZE\00", align 1
@.str.430 = private unnamed_addr constant [13 x i8] c"SC_PAGE_SIZE\00", align 1
@.str.431 = private unnamed_addr constant [12 x i8] c"SC_PASS_MAX\00", align 1
@.str.432 = private unnamed_addr constant [14 x i8] c"SC_PHYS_PAGES\00", align 1
@.str.433 = private unnamed_addr constant [7 x i8] c"SC_PII\00", align 1
@.str.434 = private unnamed_addr constant [16 x i8] c"SC_PII_INTERNET\00", align 1
@.str.435 = private unnamed_addr constant [22 x i8] c"SC_PII_INTERNET_DGRAM\00", align 1
@.str.436 = private unnamed_addr constant [23 x i8] c"SC_PII_INTERNET_STREAM\00", align 1
@.str.437 = private unnamed_addr constant [11 x i8] c"SC_PII_OSI\00", align 1
@.str.438 = private unnamed_addr constant [16 x i8] c"SC_PII_OSI_CLTS\00", align 1
@.str.439 = private unnamed_addr constant [16 x i8] c"SC_PII_OSI_COTS\00", align 1
@.str.440 = private unnamed_addr constant [13 x i8] c"SC_PII_OSI_M\00", align 1
@.str.441 = private unnamed_addr constant [14 x i8] c"SC_PII_SOCKET\00", align 1
@.str.442 = private unnamed_addr constant [11 x i8] c"SC_PII_XTI\00", align 1
@.str.443 = private unnamed_addr constant [8 x i8] c"SC_POLL\00", align 1
@.str.444 = private unnamed_addr constant [18 x i8] c"SC_PRIORITIZED_IO\00", align 1
@.str.445 = private unnamed_addr constant [23 x i8] c"SC_PRIORITY_SCHEDULING\00", align 1
@.str.446 = private unnamed_addr constant [20 x i8] c"SC_REALTIME_SIGNALS\00", align 1
@.str.447 = private unnamed_addr constant [14 x i8] c"SC_RE_DUP_MAX\00", align 1
@.str.448 = private unnamed_addr constant [13 x i8] c"SC_RTSIG_MAX\00", align 1
@.str.449 = private unnamed_addr constant [13 x i8] c"SC_SAVED_IDS\00", align 1
@.str.450 = private unnamed_addr constant [13 x i8] c"SC_SCHAR_MAX\00", align 1
@.str.451 = private unnamed_addr constant [13 x i8] c"SC_SCHAR_MIN\00", align 1
@.str.452 = private unnamed_addr constant [10 x i8] c"SC_SELECT\00", align 1
@.str.453 = private unnamed_addr constant [14 x i8] c"SC_SEMAPHORES\00", align 1
@.str.454 = private unnamed_addr constant [17 x i8] c"SC_SEM_NSEMS_MAX\00", align 1
@.str.455 = private unnamed_addr constant [17 x i8] c"SC_SEM_VALUE_MAX\00", align 1
@.str.456 = private unnamed_addr constant [25 x i8] c"SC_SHARED_MEMORY_OBJECTS\00", align 1
@.str.457 = private unnamed_addr constant [12 x i8] c"SC_SHRT_MAX\00", align 1
@.str.458 = private unnamed_addr constant [12 x i8] c"SC_SHRT_MIN\00", align 1
@.str.459 = private unnamed_addr constant [16 x i8] c"SC_SIGQUEUE_MAX\00", align 1
@.str.460 = private unnamed_addr constant [13 x i8] c"SC_SSIZE_MAX\00", align 1
@.str.461 = private unnamed_addr constant [14 x i8] c"SC_STREAM_MAX\00", align 1
@.str.462 = private unnamed_addr constant [19 x i8] c"SC_SYNCHRONIZED_IO\00", align 1
@.str.463 = private unnamed_addr constant [11 x i8] c"SC_THREADS\00", align 1
@.str.464 = private unnamed_addr constant [25 x i8] c"SC_THREAD_ATTR_STACKADDR\00", align 1
@.str.465 = private unnamed_addr constant [25 x i8] c"SC_THREAD_ATTR_STACKSIZE\00", align 1
@.str.466 = private unnamed_addr constant [32 x i8] c"SC_THREAD_DESTRUCTOR_ITERATIONS\00", align 1
@.str.467 = private unnamed_addr constant [19 x i8] c"SC_THREAD_KEYS_MAX\00", align 1
@.str.468 = private unnamed_addr constant [30 x i8] c"SC_THREAD_PRIORITY_SCHEDULING\00", align 1
@.str.469 = private unnamed_addr constant [23 x i8] c"SC_THREAD_PRIO_INHERIT\00", align 1
@.str.470 = private unnamed_addr constant [23 x i8] c"SC_THREAD_PRIO_PROTECT\00", align 1
@.str.471 = private unnamed_addr constant [25 x i8] c"SC_THREAD_PROCESS_SHARED\00", align 1
@.str.472 = private unnamed_addr constant [25 x i8] c"SC_THREAD_SAFE_FUNCTIONS\00", align 1
@.str.473 = private unnamed_addr constant [20 x i8] c"SC_THREAD_STACK_MIN\00", align 1
@.str.474 = private unnamed_addr constant [22 x i8] c"SC_THREAD_THREADS_MAX\00", align 1
@.str.475 = private unnamed_addr constant [10 x i8] c"SC_TIMERS\00", align 1
@.str.476 = private unnamed_addr constant [13 x i8] c"SC_TIMER_MAX\00", align 1
@.str.477 = private unnamed_addr constant [16 x i8] c"SC_TTY_NAME_MAX\00", align 1
@.str.478 = private unnamed_addr constant [14 x i8] c"SC_TZNAME_MAX\00", align 1
@.str.479 = private unnamed_addr constant [13 x i8] c"SC_T_IOV_MAX\00", align 1
@.str.480 = private unnamed_addr constant [13 x i8] c"SC_UCHAR_MAX\00", align 1
@.str.481 = private unnamed_addr constant [12 x i8] c"SC_UINT_MAX\00", align 1
@.str.482 = private unnamed_addr constant [14 x i8] c"SC_UIO_MAXIOV\00", align 1
@.str.483 = private unnamed_addr constant [13 x i8] c"SC_ULONG_MAX\00", align 1
@.str.484 = private unnamed_addr constant [13 x i8] c"SC_USHRT_MAX\00", align 1
@.str.485 = private unnamed_addr constant [11 x i8] c"SC_VERSION\00", align 1
@.str.486 = private unnamed_addr constant [12 x i8] c"SC_WORD_BIT\00", align 1
@.str.487 = private unnamed_addr constant [20 x i8] c"SC_XBS5_ILP32_OFF32\00", align 1
@.str.488 = private unnamed_addr constant [21 x i8] c"SC_XBS5_ILP32_OFFBIG\00", align 1
@.str.489 = private unnamed_addr constant [19 x i8] c"SC_XBS5_LP64_OFF64\00", align 1
@.str.490 = private unnamed_addr constant [21 x i8] c"SC_XBS5_LPBIG_OFFBIG\00", align 1
@.str.491 = private unnamed_addr constant [15 x i8] c"SC_XOPEN_CRYPT\00", align 1
@.str.492 = private unnamed_addr constant [18 x i8] c"SC_XOPEN_ENH_I18N\00", align 1
@.str.493 = private unnamed_addr constant [16 x i8] c"SC_XOPEN_LEGACY\00", align 1
@.str.494 = private unnamed_addr constant [18 x i8] c"SC_XOPEN_REALTIME\00", align 1
@.str.495 = private unnamed_addr constant [26 x i8] c"SC_XOPEN_REALTIME_THREADS\00", align 1
@.str.496 = private unnamed_addr constant [13 x i8] c"SC_XOPEN_SHM\00", align 1
@.str.497 = private unnamed_addr constant [14 x i8] c"SC_XOPEN_UNIX\00", align 1
@.str.498 = private unnamed_addr constant [17 x i8] c"SC_XOPEN_VERSION\00", align 1
@.str.499 = private unnamed_addr constant [21 x i8] c"SC_XOPEN_XCU_VERSION\00", align 1
@.str.500 = private unnamed_addr constant [14 x i8] c"SC_XOPEN_XPG2\00", align 1
@.str.501 = private unnamed_addr constant [14 x i8] c"SC_XOPEN_XPG3\00", align 1
@.str.502 = private unnamed_addr constant [14 x i8] c"SC_XOPEN_XPG4\00", align 1
@.str.503 = private unnamed_addr constant [14 x i8] c"iO&:fpathconf\00", align 1
@posix_constants_pathconf = internal global [20 x %struct.constdef] [%struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.504, i32 0, i32 0), i64 10 }, %struct.constdef { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.505, i32 0, i32 0), i64 6 }, %struct.constdef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.506, i32 0, i32 0), i64 13 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.507, i32 0, i32 0), i64 0 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.508, i32 0, i32 0), i64 1 }, %struct.constdef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.509, i32 0, i32 0), i64 2 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.510, i32 0, i32 0), i64 3 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.511, i32 0, i32 0), i64 7 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.512, i32 0, i32 0), i64 4 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.513, i32 0, i32 0), i64 5 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.514, i32 0, i32 0), i64 11 }, %struct.constdef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.515, i32 0, i32 0), i64 12 }, %struct.constdef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.516, i32 0, i32 0), i64 9 }, %struct.constdef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.517, i32 0, i32 0), i64 8 }, %struct.constdef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.518, i32 0, i32 0), i64 18 }, %struct.constdef { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.519, i32 0, i32 0), i64 14 }, %struct.constdef { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.520, i32 0, i32 0), i64 15 }, %struct.constdef { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.521, i32 0, i32 0), i64 16 }, %struct.constdef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.522, i32 0, i32 0), i64 17 }, %struct.constdef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.523, i32 0, i32 0), i64 19 }], align 16
@.str.504 = private unnamed_addr constant [12 x i8] c"PC_ASYNC_IO\00", align 1
@.str.505 = private unnamed_addr constant [20 x i8] c"PC_CHOWN_RESTRICTED\00", align 1
@.str.506 = private unnamed_addr constant [16 x i8] c"PC_FILESIZEBITS\00", align 1
@.str.507 = private unnamed_addr constant [12 x i8] c"PC_LINK_MAX\00", align 1
@.str.508 = private unnamed_addr constant [13 x i8] c"PC_MAX_CANON\00", align 1
@.str.509 = private unnamed_addr constant [13 x i8] c"PC_MAX_INPUT\00", align 1
@.str.510 = private unnamed_addr constant [12 x i8] c"PC_NAME_MAX\00", align 1
@.str.511 = private unnamed_addr constant [12 x i8] c"PC_NO_TRUNC\00", align 1
@.str.512 = private unnamed_addr constant [12 x i8] c"PC_PATH_MAX\00", align 1
@.str.513 = private unnamed_addr constant [12 x i8] c"PC_PIPE_BUF\00", align 1
@.str.514 = private unnamed_addr constant [11 x i8] c"PC_PRIO_IO\00", align 1
@.str.515 = private unnamed_addr constant [15 x i8] c"PC_SOCK_MAXBUF\00", align 1
@.str.516 = private unnamed_addr constant [11 x i8] c"PC_SYNC_IO\00", align 1
@.str.517 = private unnamed_addr constant [12 x i8] c"PC_VDISABLE\00", align 1
@.str.518 = private unnamed_addr constant [18 x i8] c"PC_ALLOC_SIZE_MIN\00", align 1
@.str.519 = private unnamed_addr constant [22 x i8] c"PC_REC_INCR_XFER_SIZE\00", align 1
@.str.520 = private unnamed_addr constant [21 x i8] c"PC_REC_MAX_XFER_SIZE\00", align 1
@.str.521 = private unnamed_addr constant [21 x i8] c"PC_REC_MIN_XFER_SIZE\00", align 1
@.str.522 = private unnamed_addr constant [18 x i8] c"PC_REC_XFER_ALIGN\00", align 1
@.str.523 = private unnamed_addr constant [15 x i8] c"PC_SYMLINK_MAX\00", align 1
@posix_pathconf.keywords = internal global [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.524, i32 0, i32 0), i8* null], align 16
@.str.524 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.525 = private unnamed_addr constant [14 x i8] c"O&O&:pathconf\00", align 1
@.str.526 = private unnamed_addr constant [31 x i8] c"Load averages are unobtainable\00", align 1
@.str.527 = private unnamed_addr constant [4 x i8] c"ddd\00", align 1
@.str.528 = private unnamed_addr constant [10 x i8] c"n:urandom\00", align 1
@.str.529 = private unnamed_addr constant [30 x i8] c"negative argument not allowed\00", align 1
@.str.530 = private unnamed_addr constant [17 x i8] c"O&O&O&:setresuid\00", align 1
@.str.531 = private unnamed_addr constant [17 x i8] c"O&O&O&:setresgid\00", align 1
@.str.532 = private unnamed_addr constant [6 x i8] c"(NNN)\00", align 1
@posix_setxattr.keywords = internal global [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.533, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.534, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.283, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.171, i32 0, i32 0), i8* null], align 16
@.str.533 = private unnamed_addr constant [10 x i8] c"attribute\00", align 1
@.str.534 = private unnamed_addr constant [6 x i8] c"value\00", align 1
@.str.535 = private unnamed_addr constant [20 x i8] c"O&O&y*|i$p:setxattr\00", align 1
@posix_getxattr.keywords = internal global [4 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.533, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.171, i32 0, i32 0), i8* null], align 16
@.str.536 = private unnamed_addr constant [17 x i8] c"O&O&|$p:getxattr\00", align 1
@posix_getxattr.buffer_sizes = internal global [3 x i64] [i64 128, i64 65536, i64 0], align 16
@posix_removexattr.keywords = internal global [4 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.533, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.171, i32 0, i32 0), i8* null], align 16
@.str.537 = private unnamed_addr constant [20 x i8] c"O&O&|$p:removexattr\00", align 1
@posix_listxattr.keywords = internal global [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.171, i32 0, i32 0), i8* null], align 16
@.str.538 = private unnamed_addr constant [16 x i8] c"|O&$p:listxattr\00", align 1
@posix_listxattr.buffer_sizes = internal global [3 x i64] [i64 256, i64 65536, i64 0], align 16
@stdout = external global %struct._IO_FILE*, align 8
@.str.539 = private unnamed_addr constant [3 x i8] c"|i\00", align 1
@.str.540 = private unnamed_addr constant [18 x i8] c"i:get_inheritable\00", align 1
@.str.541 = private unnamed_addr constant [19 x i8] c"ii:set_inheritable\00", align 1
@environ = external global i8**, align 8
@.str.542 = private unnamed_addr constant [5 x i8] c"F_OK\00", align 1
@.str.543 = private unnamed_addr constant [5 x i8] c"R_OK\00", align 1
@.str.544 = private unnamed_addr constant [5 x i8] c"W_OK\00", align 1
@.str.545 = private unnamed_addr constant [5 x i8] c"X_OK\00", align 1
@.str.546 = private unnamed_addr constant [12 x i8] c"NGROUPS_MAX\00", align 1
@.str.547 = private unnamed_addr constant [8 x i8] c"TMP_MAX\00", align 1
@.str.548 = private unnamed_addr constant [11 x i8] c"WCONTINUED\00", align 1
@.str.549 = private unnamed_addr constant [8 x i8] c"WNOHANG\00", align 1
@.str.550 = private unnamed_addr constant [10 x i8] c"WUNTRACED\00", align 1
@.str.551 = private unnamed_addr constant [9 x i8] c"O_RDONLY\00", align 1
@.str.552 = private unnamed_addr constant [9 x i8] c"O_WRONLY\00", align 1
@.str.553 = private unnamed_addr constant [7 x i8] c"O_RDWR\00", align 1
@.str.554 = private unnamed_addr constant [9 x i8] c"O_NDELAY\00", align 1
@.str.555 = private unnamed_addr constant [11 x i8] c"O_NONBLOCK\00", align 1
@.str.556 = private unnamed_addr constant [9 x i8] c"O_APPEND\00", align 1
@.str.557 = private unnamed_addr constant [8 x i8] c"O_DSYNC\00", align 1
@.str.558 = private unnamed_addr constant [8 x i8] c"O_RSYNC\00", align 1
@.str.559 = private unnamed_addr constant [7 x i8] c"O_SYNC\00", align 1
@.str.560 = private unnamed_addr constant [9 x i8] c"O_NOCTTY\00", align 1
@.str.561 = private unnamed_addr constant [8 x i8] c"O_CREAT\00", align 1
@.str.562 = private unnamed_addr constant [7 x i8] c"O_EXCL\00", align 1
@.str.563 = private unnamed_addr constant [8 x i8] c"O_TRUNC\00", align 1
@.str.564 = private unnamed_addr constant [12 x i8] c"O_LARGEFILE\00", align 1
@.str.565 = private unnamed_addr constant [7 x i8] c"O_PATH\00", align 1
@.str.566 = private unnamed_addr constant [13 x i8] c"PRIO_PROCESS\00", align 1
@.str.567 = private unnamed_addr constant [10 x i8] c"PRIO_PGRP\00", align 1
@.str.568 = private unnamed_addr constant [10 x i8] c"PRIO_USER\00", align 1
@.str.569 = private unnamed_addr constant [10 x i8] c"O_CLOEXEC\00", align 1
@.str.570 = private unnamed_addr constant [10 x i8] c"O_ACCMODE\00", align 1
@.str.571 = private unnamed_addr constant [10 x i8] c"SEEK_HOLE\00", align 1
@.str.572 = private unnamed_addr constant [10 x i8] c"SEEK_DATA\00", align 1
@.str.573 = private unnamed_addr constant [8 x i8] c"O_ASYNC\00", align 1
@.str.574 = private unnamed_addr constant [9 x i8] c"O_DIRECT\00", align 1
@.str.575 = private unnamed_addr constant [12 x i8] c"O_DIRECTORY\00", align 1
@.str.576 = private unnamed_addr constant [11 x i8] c"O_NOFOLLOW\00", align 1
@.str.577 = private unnamed_addr constant [10 x i8] c"O_NOATIME\00", align 1
@.str.578 = private unnamed_addr constant [6 x i8] c"EX_OK\00", align 1
@.str.579 = private unnamed_addr constant [9 x i8] c"EX_USAGE\00", align 1
@.str.580 = private unnamed_addr constant [11 x i8] c"EX_DATAERR\00", align 1
@.str.581 = private unnamed_addr constant [11 x i8] c"EX_NOINPUT\00", align 1
@.str.582 = private unnamed_addr constant [10 x i8] c"EX_NOUSER\00", align 1
@.str.583 = private unnamed_addr constant [10 x i8] c"EX_NOHOST\00", align 1
@.str.584 = private unnamed_addr constant [15 x i8] c"EX_UNAVAILABLE\00", align 1
@.str.585 = private unnamed_addr constant [12 x i8] c"EX_SOFTWARE\00", align 1
@.str.586 = private unnamed_addr constant [9 x i8] c"EX_OSERR\00", align 1
@.str.587 = private unnamed_addr constant [10 x i8] c"EX_OSFILE\00", align 1
@.str.588 = private unnamed_addr constant [13 x i8] c"EX_CANTCREAT\00", align 1
@.str.589 = private unnamed_addr constant [9 x i8] c"EX_IOERR\00", align 1
@.str.590 = private unnamed_addr constant [12 x i8] c"EX_TEMPFAIL\00", align 1
@.str.591 = private unnamed_addr constant [12 x i8] c"EX_PROTOCOL\00", align 1
@.str.592 = private unnamed_addr constant [10 x i8] c"EX_NOPERM\00", align 1
@.str.593 = private unnamed_addr constant [10 x i8] c"EX_CONFIG\00", align 1
@.str.594 = private unnamed_addr constant [10 x i8] c"ST_RDONLY\00", align 1
@.str.595 = private unnamed_addr constant [10 x i8] c"ST_NOSUID\00", align 1
@.str.596 = private unnamed_addr constant [9 x i8] c"ST_NODEV\00", align 1
@.str.597 = private unnamed_addr constant [10 x i8] c"ST_NOEXEC\00", align 1
@.str.598 = private unnamed_addr constant [15 x i8] c"ST_SYNCHRONOUS\00", align 1
@.str.599 = private unnamed_addr constant [12 x i8] c"ST_MANDLOCK\00", align 1
@.str.600 = private unnamed_addr constant [9 x i8] c"ST_WRITE\00", align 1
@.str.601 = private unnamed_addr constant [10 x i8] c"ST_APPEND\00", align 1
@.str.602 = private unnamed_addr constant [11 x i8] c"ST_NOATIME\00", align 1
@.str.603 = private unnamed_addr constant [14 x i8] c"ST_NODIRATIME\00", align 1
@.str.604 = private unnamed_addr constant [12 x i8] c"ST_RELATIME\00", align 1
@.str.605 = private unnamed_addr constant [18 x i8] c"POSIX_FADV_NORMAL\00", align 1
@.str.606 = private unnamed_addr constant [22 x i8] c"POSIX_FADV_SEQUENTIAL\00", align 1
@.str.607 = private unnamed_addr constant [18 x i8] c"POSIX_FADV_RANDOM\00", align 1
@.str.608 = private unnamed_addr constant [19 x i8] c"POSIX_FADV_NOREUSE\00", align 1
@.str.609 = private unnamed_addr constant [20 x i8] c"POSIX_FADV_WILLNEED\00", align 1
@.str.610 = private unnamed_addr constant [20 x i8] c"POSIX_FADV_DONTNEED\00", align 1
@.str.611 = private unnamed_addr constant [6 x i8] c"P_PID\00", align 1
@.str.612 = private unnamed_addr constant [7 x i8] c"P_PGID\00", align 1
@.str.613 = private unnamed_addr constant [6 x i8] c"P_ALL\00", align 1
@.str.614 = private unnamed_addr constant [8 x i8] c"WEXITED\00", align 1
@.str.615 = private unnamed_addr constant [8 x i8] c"WNOWAIT\00", align 1
@.str.616 = private unnamed_addr constant [9 x i8] c"WSTOPPED\00", align 1
@.str.617 = private unnamed_addr constant [11 x i8] c"CLD_EXITED\00", align 1
@.str.618 = private unnamed_addr constant [11 x i8] c"CLD_DUMPED\00", align 1
@.str.619 = private unnamed_addr constant [12 x i8] c"CLD_TRAPPED\00", align 1
@.str.620 = private unnamed_addr constant [14 x i8] c"CLD_CONTINUED\00", align 1
@.str.621 = private unnamed_addr constant [7 x i8] c"F_LOCK\00", align 1
@.str.622 = private unnamed_addr constant [8 x i8] c"F_TLOCK\00", align 1
@.str.623 = private unnamed_addr constant [8 x i8] c"F_ULOCK\00", align 1
@.str.624 = private unnamed_addr constant [7 x i8] c"F_TEST\00", align 1
@.str.625 = private unnamed_addr constant [12 x i8] c"SCHED_OTHER\00", align 1
@.str.626 = private unnamed_addr constant [11 x i8] c"SCHED_FIFO\00", align 1
@.str.627 = private unnamed_addr constant [9 x i8] c"SCHED_RR\00", align 1
@.str.628 = private unnamed_addr constant [12 x i8] c"SCHED_BATCH\00", align 1
@.str.629 = private unnamed_addr constant [11 x i8] c"SCHED_IDLE\00", align 1
@.str.630 = private unnamed_addr constant [20 x i8] c"SCHED_RESET_ON_FORK\00", align 1
@.str.631 = private unnamed_addr constant [13 x i8] c"XATTR_CREATE\00", align 1
@.str.632 = private unnamed_addr constant [14 x i8] c"XATTR_REPLACE\00", align 1
@.str.633 = private unnamed_addr constant [15 x i8] c"XATTR_SIZE_MAX\00", align 1
@.str.634 = private unnamed_addr constant [10 x i8] c"RTLD_LAZY\00", align 1
@.str.635 = private unnamed_addr constant [9 x i8] c"RTLD_NOW\00", align 1
@.str.636 = private unnamed_addr constant [12 x i8] c"RTLD_GLOBAL\00", align 1
@.str.637 = private unnamed_addr constant [11 x i8] c"RTLD_LOCAL\00", align 1
@.str.638 = private unnamed_addr constant [14 x i8] c"RTLD_NODELETE\00", align 1
@.str.639 = private unnamed_addr constant [12 x i8] c"RTLD_NOLOAD\00", align 1
@.str.640 = private unnamed_addr constant [14 x i8] c"RTLD_DEEPBIND\00", align 1
@.str.641 = private unnamed_addr constant [15 x i8] c"pathconf_names\00", align 1
@.str.642 = private unnamed_addr constant [14 x i8] c"confstr_names\00", align 1
@.str.643 = private unnamed_addr constant [14 x i8] c"sysconf_names\00", align 1
@waitid_result__doc__ = internal global [221 x i8] c"waitid_result: Result from waitid.\0A\0AThis object may be accessed either as a tuple of\0A  (si_pid, si_uid, si_signo, si_status, si_code),\0Aor via the attributes si_pid, si_uid, and so on.\0A\0ASee os.waitid for more information.\00", align 16
@waitid_result_fields = internal global [6 x %struct.PyStructSequence_Field] [%struct.PyStructSequence_Field { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.644, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.645, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.646, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.647, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.648, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field zeroinitializer], align 16
@.str.644 = private unnamed_addr constant [7 x i8] c"si_pid\00", align 1
@.str.645 = private unnamed_addr constant [7 x i8] c"si_uid\00", align 1
@.str.646 = private unnamed_addr constant [9 x i8] c"si_signo\00", align 1
@.str.647 = private unnamed_addr constant [10 x i8] c"si_status\00", align 1
@.str.648 = private unnamed_addr constant [8 x i8] c"si_code\00", align 1
@stat_result__doc__ = internal global [398 x i8] c"stat_result: Result from stat, fstat, or lstat.\0A\0AThis object may be accessed either as a tuple of\0A  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)\0Aor via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.\0A\0APosix/windows: If your platform supports st_blksize, st_blocks, st_rdev,\0Aor st_flags, they are available as attributes only.\0A\0ASee os.stat for more information.\00", align 16
@stat_result_fields = internal global [20 x %struct.PyStructSequence_Field] [%struct.PyStructSequence_Field { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.649, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.650, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.651, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.652, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.653, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.312, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.654, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.655, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.656, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.657, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.658, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.659, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.660, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.661, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* null, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.662, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* null, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.663, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* null, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.664, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.665, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.666, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.667, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.668, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.669, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.670, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.671, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.672, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.673, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.674, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.675, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.676, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.677, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.678, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.679, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.680, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.681, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.682, i32 0, i32 0) }, %struct.PyStructSequence_Field zeroinitializer], align 16
@.str.649 = private unnamed_addr constant [8 x i8] c"st_mode\00", align 1
@.str.650 = private unnamed_addr constant [16 x i8] c"protection bits\00", align 1
@.str.651 = private unnamed_addr constant [7 x i8] c"st_ino\00", align 1
@.str.652 = private unnamed_addr constant [6 x i8] c"inode\00", align 1
@.str.653 = private unnamed_addr constant [7 x i8] c"st_dev\00", align 1
@.str.654 = private unnamed_addr constant [9 x i8] c"st_nlink\00", align 1
@.str.655 = private unnamed_addr constant [21 x i8] c"number of hard links\00", align 1
@.str.656 = private unnamed_addr constant [7 x i8] c"st_uid\00", align 1
@.str.657 = private unnamed_addr constant [17 x i8] c"user ID of owner\00", align 1
@.str.658 = private unnamed_addr constant [7 x i8] c"st_gid\00", align 1
@.str.659 = private unnamed_addr constant [18 x i8] c"group ID of owner\00", align 1
@.str.660 = private unnamed_addr constant [8 x i8] c"st_size\00", align 1
@.str.661 = private unnamed_addr constant [21 x i8] c"total size, in bytes\00", align 1
@.str.662 = private unnamed_addr constant [28 x i8] c"integer time of last access\00", align 1
@.str.663 = private unnamed_addr constant [34 x i8] c"integer time of last modification\00", align 1
@.str.664 = private unnamed_addr constant [28 x i8] c"integer time of last change\00", align 1
@.str.665 = private unnamed_addr constant [9 x i8] c"st_atime\00", align 1
@.str.666 = private unnamed_addr constant [20 x i8] c"time of last access\00", align 1
@.str.667 = private unnamed_addr constant [9 x i8] c"st_mtime\00", align 1
@.str.668 = private unnamed_addr constant [26 x i8] c"time of last modification\00", align 1
@.str.669 = private unnamed_addr constant [9 x i8] c"st_ctime\00", align 1
@.str.670 = private unnamed_addr constant [20 x i8] c"time of last change\00", align 1
@.str.671 = private unnamed_addr constant [12 x i8] c"st_atime_ns\00", align 1
@.str.672 = private unnamed_addr constant [35 x i8] c"time of last access in nanoseconds\00", align 1
@.str.673 = private unnamed_addr constant [12 x i8] c"st_mtime_ns\00", align 1
@.str.674 = private unnamed_addr constant [41 x i8] c"time of last modification in nanoseconds\00", align 1
@.str.675 = private unnamed_addr constant [12 x i8] c"st_ctime_ns\00", align 1
@.str.676 = private unnamed_addr constant [35 x i8] c"time of last change in nanoseconds\00", align 1
@.str.677 = private unnamed_addr constant [11 x i8] c"st_blksize\00", align 1
@.str.678 = private unnamed_addr constant [29 x i8] c"blocksize for filesystem I/O\00", align 1
@.str.679 = private unnamed_addr constant [10 x i8] c"st_blocks\00", align 1
@.str.680 = private unnamed_addr constant [27 x i8] c"number of blocks allocated\00", align 1
@.str.681 = private unnamed_addr constant [8 x i8] c"st_rdev\00", align 1
@.str.682 = private unnamed_addr constant [30 x i8] c"device type (if inode device)\00", align 1
@statvfs_result__doc__ = internal global [287 x i8] c"statvfs_result: Result from statvfs or fstatvfs.\0A\0AThis object may be accessed either as a tuple of\0A  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax),\0Aor via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.\0A\0ASee os.statvfs for more information.\00", align 16
@statvfs_result_fields = internal global [11 x %struct.PyStructSequence_Field] [%struct.PyStructSequence_Field { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.683, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.684, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.685, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.686, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.687, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.688, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.689, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.690, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.691, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.692, i32 0, i32 0), i8* null }, %struct.PyStructSequence_Field zeroinitializer], align 16
@.str.683 = private unnamed_addr constant [8 x i8] c"f_bsize\00", align 1
@.str.684 = private unnamed_addr constant [9 x i8] c"f_frsize\00", align 1
@.str.685 = private unnamed_addr constant [9 x i8] c"f_blocks\00", align 1
@.str.686 = private unnamed_addr constant [8 x i8] c"f_bfree\00", align 1
@.str.687 = private unnamed_addr constant [9 x i8] c"f_bavail\00", align 1
@.str.688 = private unnamed_addr constant [8 x i8] c"f_files\00", align 1
@.str.689 = private unnamed_addr constant [8 x i8] c"f_ffree\00", align 1
@.str.690 = private unnamed_addr constant [9 x i8] c"f_favail\00", align 1
@.str.691 = private unnamed_addr constant [7 x i8] c"f_flag\00", align 1
@.str.692 = private unnamed_addr constant [10 x i8] c"f_namemax\00", align 1
@sched_param__doc__ = internal global [97 x i8] c"sched_param(sched_priority): A scheduling parameter.\0A\0ACurrent has only one field: sched_priority\00", align 16
@sched_param_fields = internal global [2 x %struct.PyStructSequence_Field] [%struct.PyStructSequence_Field { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.693, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.694, i32 0, i32 0) }, %struct.PyStructSequence_Field zeroinitializer], align 16
@.str.693 = private unnamed_addr constant [15 x i8] c"sched_priority\00", align 1
@.str.694 = private unnamed_addr constant [24 x i8] c"the scheduling priority\00", align 1
@sched_param_new.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.693, i32 0, i32 0), i8* null], align 16
@.str.695 = private unnamed_addr constant [14 x i8] c"O:sched_param\00", align 1
@.str.696 = private unnamed_addr constant [17 x i8] c"os.terminal_size\00", align 1
@TerminalSize_docstring = internal global [61 x i8] c"A tuple of (columns, lines) for holding terminal window size\00", align 16
@TerminalSize_fields = internal global [3 x %struct.PyStructSequence_Field] [%struct.PyStructSequence_Field { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.697, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.698, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.699, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.700, i32 0, i32 0) }, %struct.PyStructSequence_Field zeroinitializer], align 16
@.str.697 = private unnamed_addr constant [8 x i8] c"columns\00", align 1
@.str.698 = private unnamed_addr constant [43 x i8] c"width of the terminal window in characters\00", align 1
@.str.699 = private unnamed_addr constant [6 x i8] c"lines\00", align 1
@.str.700 = private unnamed_addr constant [44 x i8] c"height of the terminal window in characters\00", align 1
@times_result__doc__ = internal global [264 x i8] c"times_result: Result from os.times().\0A\0AThis object may be accessed either as a tuple of\0A  (user, system, children_user, children_system, elapsed),\0Aor via the attributes user, system, children_user, children_system,\0Aand elapsed.\0A\0ASee os.times for more information.\00", align 16
@times_result_fields = internal global [6 x %struct.PyStructSequence_Field] [%struct.PyStructSequence_Field { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.701, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.702, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.703, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.704, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.705, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.706, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.707, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.708, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.709, i32 0, i32 0) }, %struct.PyStructSequence_Field zeroinitializer], align 16
@.str.701 = private unnamed_addr constant [5 x i8] c"user\00", align 1
@.str.702 = private unnamed_addr constant [10 x i8] c"user time\00", align 1
@.str.703 = private unnamed_addr constant [12 x i8] c"system time\00", align 1
@.str.704 = private unnamed_addr constant [14 x i8] c"children_user\00", align 1
@.str.705 = private unnamed_addr constant [22 x i8] c"user time of children\00", align 1
@.str.706 = private unnamed_addr constant [16 x i8] c"children_system\00", align 1
@.str.707 = private unnamed_addr constant [24 x i8] c"system time of children\00", align 1
@.str.708 = private unnamed_addr constant [8 x i8] c"elapsed\00", align 1
@.str.709 = private unnamed_addr constant [50 x i8] c"elapsed time since an arbitrary point in the past\00", align 1
@uname_result__doc__ = internal global [246 x i8] c"uname_result: Result from os.uname().\0A\0AThis object may be accessed either as a tuple of\0A  (sysname, nodename, release, version, machine),\0Aor via the attributes sysname, nodename, release, version, and machine.\0A\0ASee os.uname for more information.\00", align 16
@uname_result_fields = internal global [6 x %struct.PyStructSequence_Field] [%struct.PyStructSequence_Field { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.710, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.711, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.712, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.713, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.714, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.715, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.716, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.717, i32 0, i32 0) }, %struct.PyStructSequence_Field { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.718, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.719, i32 0, i32 0) }, %struct.PyStructSequence_Field zeroinitializer], align 16
@.str.710 = private unnamed_addr constant [8 x i8] c"sysname\00", align 1
@.str.711 = private unnamed_addr constant [22 x i8] c"operating system name\00", align 1
@.str.712 = private unnamed_addr constant [9 x i8] c"nodename\00", align 1
@.str.713 = private unnamed_addr constant [52 x i8] c"name of machine on network (implementation-defined)\00", align 1
@.str.714 = private unnamed_addr constant [8 x i8] c"release\00", align 1
@.str.715 = private unnamed_addr constant [25 x i8] c"operating system release\00", align 1
@.str.716 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.717 = private unnamed_addr constant [25 x i8] c"operating system version\00", align 1
@.str.718 = private unnamed_addr constant [8 x i8] c"machine\00", align 1
@.str.719 = private unnamed_addr constant [20 x i8] c"hardware identifier\00", align 1
@.str.720 = private unnamed_addr constant [36 x i8] c"%s%s%s unavailable on this platform\00", align 1
@.str.721 = private unnamed_addr constant [51 x i8] c"%s: cannot use dir_fd and follow_symlinks together\00", align 1
@.str.722 = private unnamed_addr constant [8 x i8] c"integer\00", align 1
@.str.723 = private unnamed_addr constant [15 x i8] c"HAVE_FACCESSAT\00", align 1
@.str.724 = private unnamed_addr constant [12 x i8] c"HAVE_FCHDIR\00", align 1
@.str.725 = private unnamed_addr constant [12 x i8] c"HAVE_FCHMOD\00", align 1
@.str.726 = private unnamed_addr constant [14 x i8] c"HAVE_FCHMODAT\00", align 1
@.str.727 = private unnamed_addr constant [12 x i8] c"HAVE_FCHOWN\00", align 1
@.str.728 = private unnamed_addr constant [14 x i8] c"HAVE_FCHOWNAT\00", align 1
@.str.729 = private unnamed_addr constant [13 x i8] c"HAVE_FEXECVE\00", align 1
@.str.730 = private unnamed_addr constant [15 x i8] c"HAVE_FDOPENDIR\00", align 1
@.str.731 = private unnamed_addr constant [15 x i8] c"HAVE_FPATHCONF\00", align 1
@.str.732 = private unnamed_addr constant [13 x i8] c"HAVE_FSTATAT\00", align 1
@.str.733 = private unnamed_addr constant [14 x i8] c"HAVE_FSTATVFS\00", align 1
@.str.734 = private unnamed_addr constant [15 x i8] c"HAVE_FTRUNCATE\00", align 1
@.str.735 = private unnamed_addr constant [14 x i8] c"HAVE_FUTIMENS\00", align 1
@.str.736 = private unnamed_addr constant [13 x i8] c"HAVE_FUTIMES\00", align 1
@.str.737 = private unnamed_addr constant [15 x i8] c"HAVE_FUTIMESAT\00", align 1
@.str.738 = private unnamed_addr constant [12 x i8] c"HAVE_LINKAT\00", align 1
@.str.739 = private unnamed_addr constant [12 x i8] c"HAVE_LCHOWN\00", align 1
@.str.740 = private unnamed_addr constant [11 x i8] c"HAVE_LSTAT\00", align 1
@.str.741 = private unnamed_addr constant [13 x i8] c"HAVE_LUTIMES\00", align 1
@.str.742 = private unnamed_addr constant [13 x i8] c"HAVE_MKDIRAT\00", align 1
@.str.743 = private unnamed_addr constant [14 x i8] c"HAVE_MKFIFOAT\00", align 1
@.str.744 = private unnamed_addr constant [13 x i8] c"HAVE_MKNODAT\00", align 1
@.str.745 = private unnamed_addr constant [12 x i8] c"HAVE_OPENAT\00", align 1
@.str.746 = private unnamed_addr constant [16 x i8] c"HAVE_READLINKAT\00", align 1
@.str.747 = private unnamed_addr constant [14 x i8] c"HAVE_RENAMEAT\00", align 1
@.str.748 = private unnamed_addr constant [15 x i8] c"HAVE_SYMLINKAT\00", align 1
@.str.749 = private unnamed_addr constant [14 x i8] c"HAVE_UNLINKAT\00", align 1
@.str.750 = private unnamed_addr constant [15 x i8] c"HAVE_UTIMENSAT\00", align 1

; Function Attrs: nounwind uwtable
define %struct._object* @_PyLong_FromUid(i32 %uid) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %uid.addr = alloca i32, align 4
  store i32 %uid, i32* %uid.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %uid.addr, metadata !694, metadata !3844), !dbg !3845
  %0 = load i32, i32* %uid.addr, align 4, !dbg !3846, !tbaa !3840
  %cmp = icmp eq i32 %0, -1, !dbg !3848
  br i1 %cmp, label %if.then, label %if.end, !dbg !3849

if.then:                                          ; preds = %entry
  %call = call %struct._object* @PyLong_FromLong(i64 -1), !dbg !3850
  store %struct._object* %call, %struct._object** %retval, !dbg !3851
  br label %return, !dbg !3851

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %uid.addr, align 4, !dbg !3852, !tbaa !3840
  %conv = zext i32 %1 to i64, !dbg !3852
  %call1 = call %struct._object* @PyLong_FromUnsignedLong(i64 %conv), !dbg !3853
  store %struct._object* %call1, %struct._object** %retval, !dbg !3854
  br label %return, !dbg !3854

return:                                           ; preds = %if.end, %if.then
  %2 = load %struct._object*, %struct._object** %retval, !dbg !3855
  ret %struct._object* %2, !dbg !3855
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare %struct._object* @PyLong_FromLong(i64) #2

declare %struct._object* @PyLong_FromUnsignedLong(i64) #2

; Function Attrs: nounwind uwtable
define %struct._object* @_PyLong_FromGid(i32 %gid) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %gid.addr = alloca i32, align 4
  store i32 %gid, i32* %gid.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %gid.addr, metadata !699, metadata !3844), !dbg !3856
  %0 = load i32, i32* %gid.addr, align 4, !dbg !3857, !tbaa !3840
  %cmp = icmp eq i32 %0, -1, !dbg !3859
  br i1 %cmp, label %if.then, label %if.end, !dbg !3860

if.then:                                          ; preds = %entry
  %call = call %struct._object* @PyLong_FromLong(i64 -1), !dbg !3861
  store %struct._object* %call, %struct._object** %retval, !dbg !3862
  br label %return, !dbg !3862

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %gid.addr, align 4, !dbg !3863, !tbaa !3840
  %conv = zext i32 %1 to i64, !dbg !3863
  %call1 = call %struct._object* @PyLong_FromUnsignedLong(i64 %conv), !dbg !3864
  store %struct._object* %call1, %struct._object** %retval, !dbg !3865
  br label %return, !dbg !3865

return:                                           ; preds = %if.end, %if.then
  %2 = load %struct._object*, %struct._object** %retval, !dbg !3866
  ret %struct._object* %2, !dbg !3866
}

; Function Attrs: nounwind uwtable
define i32 @_Py_Uid_Converter(%struct._object* %obj, i8* %p) #0 {
entry:
  %retval = alloca i32, align 4
  %obj.addr = alloca %struct._object*, align 8
  %p.addr = alloca i8*, align 8
  %uid = alloca i32, align 4
  %index = alloca %struct._object*, align 8
  %overflow = alloca i32, align 4
  %result = alloca i64, align 8
  %uresult = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %obj.addr, metadata !702, metadata !3844), !dbg !3869
  store i8* %p, i8** %p.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !703, metadata !3844), !dbg !3870
  %0 = bitcast i32* %uid to i8*, !dbg !3871
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !3871
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !704, metadata !3844), !dbg !3872
  %1 = bitcast %struct._object** %index to i8*, !dbg !3873
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !3873
  call void @llvm.dbg.declare(metadata %struct._object** %index, metadata !705, metadata !3844), !dbg !3874
  %2 = bitcast i32* %overflow to i8*, !dbg !3875
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !3875
  call void @llvm.dbg.declare(metadata i32* %overflow, metadata !706, metadata !3844), !dbg !3876
  %3 = bitcast i64* %result to i8*, !dbg !3877
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !3877
  call void @llvm.dbg.declare(metadata i64* %result, metadata !707, metadata !3844), !dbg !3878
  %4 = bitcast i64* %uresult to i8*, !dbg !3879
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !3879
  call void @llvm.dbg.declare(metadata i64* %uresult, metadata !708, metadata !3844), !dbg !3880
  %5 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3881, !tbaa !3867
  %call = call %struct._object* @PyNumber_Index(%struct._object* %5), !dbg !3882
  store %struct._object* %call, %struct._object** %index, align 8, !dbg !3883, !tbaa !3867
  %6 = load %struct._object*, %struct._object** %index, align 8, !dbg !3884, !tbaa !3867
  %cmp = icmp eq %struct._object* %6, null, !dbg !3886
  br i1 %cmp, label %if.then, label %if.end, !dbg !3887

if.then:                                          ; preds = %entry
  %7 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !3888, !tbaa !3867
  %8 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3890, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1, !dbg !3891
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3891, !tbaa !3892
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 1, !dbg !3895
  %10 = load i8*, i8** %tp_name, align 8, !dbg !3895, !tbaa !3896
  %call1 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %7, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i32 0, i32 0), i8* %10), !dbg !3899
  store i32 0, i32* %retval, !dbg !3900
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3900

if.end:                                           ; preds = %entry
  %11 = load %struct._object*, %struct._object** %index, align 8, !dbg !3901, !tbaa !3867
  %call2 = call i64 @PyLong_AsLongAndOverflow(%struct._object* %11, i32* %overflow), !dbg !3902
  store i64 %call2, i64* %result, align 8, !dbg !3903, !tbaa !3904
  %12 = load i32, i32* %overflow, align 4, !dbg !3905, !tbaa !3840
  %tobool = icmp ne i32 %12, 0, !dbg !3905
  br i1 %tobool, label %if.end.21, label %if.then.3, !dbg !3907

if.then.3:                                        ; preds = %if.end
  %13 = load i64, i64* %result, align 8, !dbg !3908, !tbaa !3904
  %conv = trunc i64 %13 to i32, !dbg !3910
  store i32 %conv, i32* %uid, align 4, !dbg !3911, !tbaa !3840
  %14 = load i64, i64* %result, align 8, !dbg !3912, !tbaa !3904
  %cmp4 = icmp eq i64 %14, -1, !dbg !3914
  br i1 %cmp4, label %if.then.6, label %if.end.11, !dbg !3915

if.then.6:                                        ; preds = %if.then.3
  %call7 = call %struct._object* @PyErr_Occurred(), !dbg !3916
  %tobool8 = icmp ne %struct._object* %call7, null, !dbg !3916
  br i1 %tobool8, label %if.then.9, label %if.end.10, !dbg !3919

if.then.9:                                        ; preds = %if.then.6
  br label %fail, !dbg !3920

if.end.10:                                        ; preds = %if.then.6
  br label %success, !dbg !3921

if.end.11:                                        ; preds = %if.then.3
  %15 = load i64, i64* %result, align 8, !dbg !3922, !tbaa !3904
  %cmp12 = icmp slt i64 %15, 0, !dbg !3924
  br i1 %cmp12, label %if.then.14, label %if.end.15, !dbg !3925

if.then.14:                                       ; preds = %if.end.11
  br label %underflow, !dbg !3926

if.end.15:                                        ; preds = %if.end.11
  %16 = load i32, i32* %uid, align 4, !dbg !3927, !tbaa !3840
  %conv16 = zext i32 %16 to i64, !dbg !3929
  %17 = load i64, i64* %result, align 8, !dbg !3930, !tbaa !3904
  %cmp17 = icmp ne i64 %conv16, %17, !dbg !3931
  br i1 %cmp17, label %if.then.19, label %if.end.20, !dbg !3932

if.then.19:                                       ; preds = %if.end.15
  br label %underflow, !dbg !3933

if.end.20:                                        ; preds = %if.end.15
  br label %success, !dbg !3934

if.end.21:                                        ; preds = %if.end
  %18 = load i32, i32* %overflow, align 4, !dbg !3935, !tbaa !3840
  %cmp22 = icmp slt i32 %18, 0, !dbg !3937
  br i1 %cmp22, label %if.then.24, label %if.end.25, !dbg !3938

if.then.24:                                       ; preds = %if.end.21
  br label %underflow, !dbg !3939

if.end.25:                                        ; preds = %if.end.21
  %19 = load %struct._object*, %struct._object** %index, align 8, !dbg !3940, !tbaa !3867
  %call26 = call i64 @PyLong_AsUnsignedLong(%struct._object* %19), !dbg !3941
  store i64 %call26, i64* %uresult, align 8, !dbg !3942, !tbaa !3904
  %call27 = call %struct._object* @PyErr_Occurred(), !dbg !3943
  %tobool28 = icmp ne %struct._object* %call27, null, !dbg !3943
  br i1 %tobool28, label %if.then.29, label %if.end.34, !dbg !3945

if.then.29:                                       ; preds = %if.end.25
  %20 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !3946, !tbaa !3867
  %call30 = call i32 @PyErr_ExceptionMatches(%struct._object* %20), !dbg !3949
  %tobool31 = icmp ne i32 %call30, 0, !dbg !3949
  br i1 %tobool31, label %if.then.32, label %if.end.33, !dbg !3950

if.then.32:                                       ; preds = %if.then.29
  br label %overflow.50, !dbg !3951

if.end.33:                                        ; preds = %if.then.29
  br label %fail, !dbg !3952

if.end.34:                                        ; preds = %if.end.25
  %21 = load i64, i64* %uresult, align 8, !dbg !3953, !tbaa !3904
  %conv35 = trunc i64 %21 to i32, !dbg !3954
  store i32 %conv35, i32* %uid, align 4, !dbg !3955, !tbaa !3840
  %22 = load i32, i32* %uid, align 4, !dbg !3956, !tbaa !3840
  %cmp36 = icmp eq i32 %22, -1, !dbg !3958
  br i1 %cmp36, label %if.then.38, label %if.end.39, !dbg !3959

if.then.38:                                       ; preds = %if.end.34
  br label %overflow.50, !dbg !3960

if.end.39:                                        ; preds = %if.end.34
  %23 = load i32, i32* %uid, align 4, !dbg !3961, !tbaa !3840
  %conv40 = zext i32 %23 to i64, !dbg !3963
  %24 = load i64, i64* %uresult, align 8, !dbg !3964, !tbaa !3904
  %cmp41 = icmp ne i64 %conv40, %24, !dbg !3965
  br i1 %cmp41, label %if.then.43, label %if.end.44, !dbg !3966

if.then.43:                                       ; preds = %if.end.39
  br label %overflow.50, !dbg !3967

if.end.44:                                        ; preds = %if.end.39
  br label %success, !dbg !3964

success:                                          ; preds = %if.end.44, %if.end.20, %if.end.10
  br label %do.body, !dbg !3968

do.body:                                          ; preds = %success
  %25 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3969
  call void @llvm.lifetime.start(i64 8, i8* %25) #3, !dbg !3969
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !709, metadata !3844), !dbg !3971
  %26 = load %struct._object*, %struct._object** %index, align 8, !dbg !3972, !tbaa !3867
  store %struct._object* %26, %struct._object** %_py_decref_tmp, align 8, !dbg !3971, !tbaa !3867
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3973, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0, !dbg !3975
  %28 = load i64, i64* %ob_refcnt, align 8, !dbg !3976, !tbaa !3977
  %dec = add i64 %28, -1, !dbg !3976
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !3976, !tbaa !3977
  %cmp45 = icmp ne i64 %dec, 0, !dbg !3978
  br i1 %cmp45, label %if.then.47, label %if.else, !dbg !3979

if.then.47:                                       ; preds = %do.body
  br label %if.end.49, !dbg !3980

if.else:                                          ; preds = %do.body
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3982, !tbaa !3867
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1, !dbg !3984
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8, !dbg !3984, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4, !dbg !3985
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !3985, !tbaa !3986
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3987, !tbaa !3867
  call void %31(%struct._object* %32), !dbg !3988
  br label %if.end.49

if.end.49:                                        ; preds = %if.else, %if.then.47
  %33 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3989
  call void @llvm.lifetime.end(i64 8, i8* %33) #3, !dbg !3989
  br label %do.cond, !dbg !3991

do.cond:                                          ; preds = %if.end.49
  br label %do.end, !dbg !3992

do.end:                                           ; preds = %do.cond
  %34 = load i32, i32* %uid, align 4, !dbg !3994, !tbaa !3840
  %35 = load i8*, i8** %p.addr, align 8, !dbg !3995, !tbaa !3867
  %36 = bitcast i8* %35 to i32*, !dbg !3996
  store i32 %34, i32* %36, align 4, !dbg !3997, !tbaa !3840
  store i32 1, i32* %retval, !dbg !3998
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3998

underflow:                                        ; preds = %if.then.24, %if.then.19, %if.then.14
  %37 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !3999, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %37, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i32 0, i32 0)), !dbg !4000
  br label %fail, !dbg !4001

overflow.50:                                      ; preds = %if.then.43, %if.then.38, %if.then.32
  %38 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !4002, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %38, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i32 0, i32 0)), !dbg !4003
  br label %fail, !dbg !4003

fail:                                             ; preds = %overflow.50, %underflow, %if.end.33, %if.then.9
  br label %do.body.51, !dbg !4004

do.body.51:                                       ; preds = %fail
  %39 = bitcast %struct._object** %_py_decref_tmp52 to i8*, !dbg !4005
  call void @llvm.lifetime.start(i64 8, i8* %39) #3, !dbg !4005
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp52, metadata !711, metadata !3844), !dbg !4007
  %40 = load %struct._object*, %struct._object** %index, align 8, !dbg !4008, !tbaa !3867
  store %struct._object* %40, %struct._object** %_py_decref_tmp52, align 8, !dbg !4007, !tbaa !3867
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !4009, !tbaa !3867
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0, !dbg !4011
  %42 = load i64, i64* %ob_refcnt53, align 8, !dbg !4012, !tbaa !3977
  %dec54 = add i64 %42, -1, !dbg !4012
  store i64 %dec54, i64* %ob_refcnt53, align 8, !dbg !4012, !tbaa !3977
  %cmp55 = icmp ne i64 %dec54, 0, !dbg !4013
  br i1 %cmp55, label %if.then.57, label %if.else.58, !dbg !4014

if.then.57:                                       ; preds = %do.body.51
  br label %if.end.61, !dbg !4015

if.else.58:                                       ; preds = %do.body.51
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !4017, !tbaa !3867
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1, !dbg !4019
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8, !dbg !4019, !tbaa !3892
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4, !dbg !4020
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8, !dbg !4020, !tbaa !3986
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !4021, !tbaa !3867
  call void %45(%struct._object* %46), !dbg !4022
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  %47 = bitcast %struct._object** %_py_decref_tmp52 to i8*, !dbg !4023
  call void @llvm.lifetime.end(i64 8, i8* %47) #3, !dbg !4023
  br label %do.cond.62, !dbg !4024

do.cond.62:                                       ; preds = %if.end.61
  br label %do.end.63, !dbg !4025

do.end.63:                                        ; preds = %do.cond.62
  store i32 0, i32* %retval, !dbg !4027
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4027

cleanup:                                          ; preds = %do.end.63, %do.end, %if.then
  %48 = bitcast i64* %uresult to i8*, !dbg !4028
  call void @llvm.lifetime.end(i64 8, i8* %48) #3, !dbg !4028
  %49 = bitcast i64* %result to i8*, !dbg !4028
  call void @llvm.lifetime.end(i64 8, i8* %49) #3, !dbg !4028
  %50 = bitcast i32* %overflow to i8*, !dbg !4028
  call void @llvm.lifetime.end(i64 4, i8* %50) #3, !dbg !4028
  %51 = bitcast %struct._object** %index to i8*, !dbg !4028
  call void @llvm.lifetime.end(i64 8, i8* %51) #3, !dbg !4028
  %52 = bitcast i32* %uid to i8*, !dbg !4028
  call void @llvm.lifetime.end(i64 4, i8* %52) #3, !dbg !4028
  %53 = load i32, i32* %retval, !dbg !4028
  ret i32 %53, !dbg !4028
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #3

declare %struct._object* @PyNumber_Index(%struct._object*) #2

declare %struct._object* @PyErr_Format(%struct._object*, i8*, ...) #2

declare i64 @PyLong_AsLongAndOverflow(%struct._object*, i32*) #2

declare %struct._object* @PyErr_Occurred() #2

declare i64 @PyLong_AsUnsignedLong(%struct._object*) #2

declare i32 @PyErr_ExceptionMatches(%struct._object*) #2

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #3

declare void @PyErr_SetString(%struct._object*, i8*) #2

; Function Attrs: nounwind uwtable
define i32 @_Py_Gid_Converter(%struct._object* %obj, i8* %p) #0 {
entry:
  %retval = alloca i32, align 4
  %obj.addr = alloca %struct._object*, align 8
  %p.addr = alloca i8*, align 8
  %gid = alloca i32, align 4
  %index = alloca %struct._object*, align 8
  %overflow = alloca i32, align 4
  %result = alloca i64, align 8
  %uresult = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %obj.addr, metadata !715, metadata !3844), !dbg !4029
  store i8* %p, i8** %p.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !716, metadata !3844), !dbg !4030
  %0 = bitcast i32* %gid to i8*, !dbg !4031
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !4031
  call void @llvm.dbg.declare(metadata i32* %gid, metadata !717, metadata !3844), !dbg !4032
  %1 = bitcast %struct._object** %index to i8*, !dbg !4033
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !4033
  call void @llvm.dbg.declare(metadata %struct._object** %index, metadata !718, metadata !3844), !dbg !4034
  %2 = bitcast i32* %overflow to i8*, !dbg !4035
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !4035
  call void @llvm.dbg.declare(metadata i32* %overflow, metadata !719, metadata !3844), !dbg !4036
  %3 = bitcast i64* %result to i8*, !dbg !4037
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !4037
  call void @llvm.dbg.declare(metadata i64* %result, metadata !720, metadata !3844), !dbg !4038
  %4 = bitcast i64* %uresult to i8*, !dbg !4039
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !4039
  call void @llvm.dbg.declare(metadata i64* %uresult, metadata !721, metadata !3844), !dbg !4040
  %5 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !4041, !tbaa !3867
  %call = call %struct._object* @PyNumber_Index(%struct._object* %5), !dbg !4042
  store %struct._object* %call, %struct._object** %index, align 8, !dbg !4043, !tbaa !3867
  %6 = load %struct._object*, %struct._object** %index, align 8, !dbg !4044, !tbaa !3867
  %cmp = icmp eq %struct._object* %6, null, !dbg !4046
  br i1 %cmp, label %if.then, label %if.end, !dbg !4047

if.then:                                          ; preds = %entry
  %7 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !4048, !tbaa !3867
  %8 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !4050, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1, !dbg !4051
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4051, !tbaa !3892
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 1, !dbg !4052
  %10 = load i8*, i8** %tp_name, align 8, !dbg !4052, !tbaa !3896
  %call1 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %7, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i32 0, i32 0), i8* %10), !dbg !4053
  store i32 0, i32* %retval, !dbg !4054
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4054

if.end:                                           ; preds = %entry
  %11 = load %struct._object*, %struct._object** %index, align 8, !dbg !4055, !tbaa !3867
  %call2 = call i64 @PyLong_AsLongAndOverflow(%struct._object* %11, i32* %overflow), !dbg !4056
  store i64 %call2, i64* %result, align 8, !dbg !4057, !tbaa !3904
  %12 = load i32, i32* %overflow, align 4, !dbg !4058, !tbaa !3840
  %tobool = icmp ne i32 %12, 0, !dbg !4058
  br i1 %tobool, label %if.end.21, label %if.then.3, !dbg !4060

if.then.3:                                        ; preds = %if.end
  %13 = load i64, i64* %result, align 8, !dbg !4061, !tbaa !3904
  %conv = trunc i64 %13 to i32, !dbg !4063
  store i32 %conv, i32* %gid, align 4, !dbg !4064, !tbaa !3840
  %14 = load i64, i64* %result, align 8, !dbg !4065, !tbaa !3904
  %cmp4 = icmp eq i64 %14, -1, !dbg !4067
  br i1 %cmp4, label %if.then.6, label %if.end.11, !dbg !4068

if.then.6:                                        ; preds = %if.then.3
  %call7 = call %struct._object* @PyErr_Occurred(), !dbg !4069
  %tobool8 = icmp ne %struct._object* %call7, null, !dbg !4069
  br i1 %tobool8, label %if.then.9, label %if.end.10, !dbg !4072

if.then.9:                                        ; preds = %if.then.6
  br label %fail, !dbg !4073

if.end.10:                                        ; preds = %if.then.6
  br label %success, !dbg !4074

if.end.11:                                        ; preds = %if.then.3
  %15 = load i64, i64* %result, align 8, !dbg !4075, !tbaa !3904
  %cmp12 = icmp slt i64 %15, 0, !dbg !4077
  br i1 %cmp12, label %if.then.14, label %if.end.15, !dbg !4078

if.then.14:                                       ; preds = %if.end.11
  br label %underflow, !dbg !4079

if.end.15:                                        ; preds = %if.end.11
  %16 = load i32, i32* %gid, align 4, !dbg !4081, !tbaa !3840
  %conv16 = zext i32 %16 to i64, !dbg !4083
  %17 = load i64, i64* %result, align 8, !dbg !4084, !tbaa !3904
  %cmp17 = icmp ne i64 %conv16, %17, !dbg !4085
  br i1 %cmp17, label %if.then.19, label %if.end.20, !dbg !4086

if.then.19:                                       ; preds = %if.end.15
  br label %underflow, !dbg !4087

if.end.20:                                        ; preds = %if.end.15
  br label %success, !dbg !4088

if.end.21:                                        ; preds = %if.end
  %18 = load i32, i32* %overflow, align 4, !dbg !4089, !tbaa !3840
  %cmp22 = icmp slt i32 %18, 0, !dbg !4091
  br i1 %cmp22, label %if.then.24, label %if.end.25, !dbg !4092

if.then.24:                                       ; preds = %if.end.21
  br label %underflow, !dbg !4093

if.end.25:                                        ; preds = %if.end.21
  %19 = load %struct._object*, %struct._object** %index, align 8, !dbg !4094, !tbaa !3867
  %call26 = call i64 @PyLong_AsUnsignedLong(%struct._object* %19), !dbg !4095
  store i64 %call26, i64* %uresult, align 8, !dbg !4096, !tbaa !3904
  %call27 = call %struct._object* @PyErr_Occurred(), !dbg !4097
  %tobool28 = icmp ne %struct._object* %call27, null, !dbg !4097
  br i1 %tobool28, label %if.then.29, label %if.end.34, !dbg !4099

if.then.29:                                       ; preds = %if.end.25
  %20 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !4100, !tbaa !3867
  %call30 = call i32 @PyErr_ExceptionMatches(%struct._object* %20), !dbg !4103
  %tobool31 = icmp ne i32 %call30, 0, !dbg !4103
  br i1 %tobool31, label %if.then.32, label %if.end.33, !dbg !4104

if.then.32:                                       ; preds = %if.then.29
  br label %overflow.50, !dbg !4105

if.end.33:                                        ; preds = %if.then.29
  br label %fail, !dbg !4106

if.end.34:                                        ; preds = %if.end.25
  %21 = load i64, i64* %uresult, align 8, !dbg !4107, !tbaa !3904
  %conv35 = trunc i64 %21 to i32, !dbg !4108
  store i32 %conv35, i32* %gid, align 4, !dbg !4109, !tbaa !3840
  %22 = load i32, i32* %gid, align 4, !dbg !4110, !tbaa !3840
  %cmp36 = icmp eq i32 %22, -1, !dbg !4112
  br i1 %cmp36, label %if.then.38, label %if.end.39, !dbg !4113

if.then.38:                                       ; preds = %if.end.34
  br label %overflow.50, !dbg !4114

if.end.39:                                        ; preds = %if.end.34
  %23 = load i32, i32* %gid, align 4, !dbg !4115, !tbaa !3840
  %conv40 = zext i32 %23 to i64, !dbg !4117
  %24 = load i64, i64* %uresult, align 8, !dbg !4118, !tbaa !3904
  %cmp41 = icmp ne i64 %conv40, %24, !dbg !4119
  br i1 %cmp41, label %if.then.43, label %if.end.44, !dbg !4120

if.then.43:                                       ; preds = %if.end.39
  br label %overflow.50, !dbg !4121

if.end.44:                                        ; preds = %if.end.39
  br label %success, !dbg !4118

success:                                          ; preds = %if.end.44, %if.end.20, %if.end.10
  br label %do.body, !dbg !4122

do.body:                                          ; preds = %success
  %25 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4123
  call void @llvm.lifetime.start(i64 8, i8* %25) #3, !dbg !4123
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !722, metadata !3844), !dbg !4125
  %26 = load %struct._object*, %struct._object** %index, align 8, !dbg !4126, !tbaa !3867
  store %struct._object* %26, %struct._object** %_py_decref_tmp, align 8, !dbg !4125, !tbaa !3867
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4127, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0, !dbg !4129
  %28 = load i64, i64* %ob_refcnt, align 8, !dbg !4130, !tbaa !3977
  %dec = add i64 %28, -1, !dbg !4130
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4130, !tbaa !3977
  %cmp45 = icmp ne i64 %dec, 0, !dbg !4131
  br i1 %cmp45, label %if.then.47, label %if.else, !dbg !4132

if.then.47:                                       ; preds = %do.body
  br label %if.end.49, !dbg !4133

if.else:                                          ; preds = %do.body
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4135, !tbaa !3867
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1, !dbg !4137
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8, !dbg !4137, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4, !dbg !4138
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4138, !tbaa !3986
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4139, !tbaa !3867
  call void %31(%struct._object* %32), !dbg !4140
  br label %if.end.49

if.end.49:                                        ; preds = %if.else, %if.then.47
  %33 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4141
  call void @llvm.lifetime.end(i64 8, i8* %33) #3, !dbg !4141
  br label %do.cond, !dbg !4143

do.cond:                                          ; preds = %if.end.49
  br label %do.end, !dbg !4144

do.end:                                           ; preds = %do.cond
  %34 = load i32, i32* %gid, align 4, !dbg !4146, !tbaa !3840
  %35 = load i8*, i8** %p.addr, align 8, !dbg !4147, !tbaa !3867
  %36 = bitcast i8* %35 to i32*, !dbg !4148
  store i32 %34, i32* %36, align 4, !dbg !4149, !tbaa !3840
  store i32 1, i32* %retval, !dbg !4150
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4150

underflow:                                        ; preds = %if.then.24, %if.then.19, %if.then.14
  %37 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !4151, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %37, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i32 0, i32 0)), !dbg !4152
  br label %fail, !dbg !4153

overflow.50:                                      ; preds = %if.then.43, %if.then.38, %if.then.32
  %38 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !4154, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %38, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5, i32 0, i32 0)), !dbg !4155
  br label %fail, !dbg !4155

fail:                                             ; preds = %overflow.50, %underflow, %if.end.33, %if.then.9
  br label %do.body.51, !dbg !4156

do.body.51:                                       ; preds = %fail
  %39 = bitcast %struct._object** %_py_decref_tmp52 to i8*, !dbg !4157
  call void @llvm.lifetime.start(i64 8, i8* %39) #3, !dbg !4157
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp52, metadata !724, metadata !3844), !dbg !4159
  %40 = load %struct._object*, %struct._object** %index, align 8, !dbg !4160, !tbaa !3867
  store %struct._object* %40, %struct._object** %_py_decref_tmp52, align 8, !dbg !4159, !tbaa !3867
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !4161, !tbaa !3867
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0, !dbg !4163
  %42 = load i64, i64* %ob_refcnt53, align 8, !dbg !4164, !tbaa !3977
  %dec54 = add i64 %42, -1, !dbg !4164
  store i64 %dec54, i64* %ob_refcnt53, align 8, !dbg !4164, !tbaa !3977
  %cmp55 = icmp ne i64 %dec54, 0, !dbg !4165
  br i1 %cmp55, label %if.then.57, label %if.else.58, !dbg !4166

if.then.57:                                       ; preds = %do.body.51
  br label %if.end.61, !dbg !4167

if.else.58:                                       ; preds = %do.body.51
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !4169, !tbaa !3867
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1, !dbg !4171
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8, !dbg !4171, !tbaa !3892
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4, !dbg !4172
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8, !dbg !4172, !tbaa !3986
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !4173, !tbaa !3867
  call void %45(%struct._object* %46), !dbg !4174
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  %47 = bitcast %struct._object** %_py_decref_tmp52 to i8*, !dbg !4175
  call void @llvm.lifetime.end(i64 8, i8* %47) #3, !dbg !4175
  br label %do.cond.62, !dbg !4176

do.cond.62:                                       ; preds = %if.end.61
  br label %do.end.63, !dbg !4177

do.end.63:                                        ; preds = %do.cond.62
  store i32 0, i32* %retval, !dbg !4179
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4179

cleanup:                                          ; preds = %do.end.63, %do.end, %if.then
  %48 = bitcast i64* %uresult to i8*, !dbg !4180
  call void @llvm.lifetime.end(i64 8, i8* %48) #3, !dbg !4180
  %49 = bitcast i64* %result to i8*, !dbg !4180
  call void @llvm.lifetime.end(i64 8, i8* %49) #3, !dbg !4180
  %50 = bitcast i32* %overflow to i8*, !dbg !4180
  call void @llvm.lifetime.end(i64 4, i8* %50) #3, !dbg !4180
  %51 = bitcast %struct._object** %index to i8*, !dbg !4180
  call void @llvm.lifetime.end(i64 8, i8* %51) #3, !dbg !4180
  %52 = bitcast i32* %gid to i8*, !dbg !4180
  call void @llvm.lifetime.end(i64 4, i8* %52) #3, !dbg !4180
  %53 = load i32, i32* %retval, !dbg !4180
  ret i32 %53, !dbg !4180
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyInit_posix() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %m = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %list = alloca %struct._object*, align 8
  %trace = alloca i8**, align 8
  %cleanup.dest.slot = alloca i32
  %_py_xincref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %ignored = alloca i32, align 4
  %unicode = alloca %struct._object*, align 8
  %_py_decref_tmp103 = alloca %struct._object*, align 8
  %0 = bitcast %struct._object** %m to i8*, !dbg !4181
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !4181
  call void @llvm.dbg.declare(metadata %struct._object** %m, metadata !730, metadata !3844), !dbg !4182
  %1 = bitcast %struct._object** %v to i8*, !dbg !4181
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !4181
  call void @llvm.dbg.declare(metadata %struct._object** %v, metadata !731, metadata !3844), !dbg !4183
  %2 = bitcast %struct._object** %list to i8*, !dbg !4184
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !4184
  call void @llvm.dbg.declare(metadata %struct._object** %list, metadata !732, metadata !3844), !dbg !4185
  %3 = bitcast i8*** %trace to i8*, !dbg !4186
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !4186
  call void @llvm.dbg.declare(metadata i8*** %trace, metadata !733, metadata !3844), !dbg !4187
  %call = call %struct._object* @PyModule_Create2(%struct.PyModuleDef* @posixmodule, i32 1013), !dbg !4188
  store %struct._object* %call, %struct._object** %m, align 8, !dbg !4189, !tbaa !3867
  %4 = load %struct._object*, %struct._object** %m, align 8, !dbg !4190, !tbaa !3867
  %cmp = icmp eq %struct._object* %4, null, !dbg !4192
  br i1 %cmp, label %if.then, label %if.end, !dbg !4193

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !4194
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.115, !dbg !4194

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @convertenviron(), !dbg !4195
  store %struct._object* %call1, %struct._object** %v, align 8, !dbg !4196, !tbaa !3867
  br label %do.body, !dbg !4197

do.body:                                          ; preds = %if.end
  %5 = bitcast %struct._object** %_py_xincref_tmp to i8*, !dbg !4198
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !4198
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xincref_tmp, metadata !734, metadata !3844), !dbg !4200
  %6 = load %struct._object*, %struct._object** %v, align 8, !dbg !4201, !tbaa !3867
  store %struct._object* %6, %struct._object** %_py_xincref_tmp, align 8, !dbg !4200, !tbaa !3867
  %7 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8, !dbg !4202, !tbaa !3867
  %cmp2 = icmp ne %struct._object* %7, null, !dbg !4204
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !4205

if.then.3:                                        ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8, !dbg !4206, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0, !dbg !4208
  %9 = load i64, i64* %ob_refcnt, align 8, !dbg !4209, !tbaa !3977
  %inc = add i64 %9, 1, !dbg !4209
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !4209, !tbaa !3977
  br label %if.end.4, !dbg !4210

if.end.4:                                         ; preds = %if.then.3, %do.body
  %10 = bitcast %struct._object** %_py_xincref_tmp to i8*, !dbg !4211
  call void @llvm.lifetime.end(i64 8, i8* %10) #3, !dbg !4211
  br label %do.cond, !dbg !4214

do.cond:                                          ; preds = %if.end.4
  br label %do.end, !dbg !4215

do.end:                                           ; preds = %do.cond
  %11 = load %struct._object*, %struct._object** %v, align 8, !dbg !4217, !tbaa !3867
  %cmp5 = icmp eq %struct._object* %11, null, !dbg !4219
  br i1 %cmp5, label %if.then.8, label %lor.lhs.false, !dbg !4220

lor.lhs.false:                                    ; preds = %do.end
  %12 = load %struct._object*, %struct._object** %m, align 8, !dbg !4221, !tbaa !3867
  %13 = load %struct._object*, %struct._object** %v, align 8, !dbg !4223, !tbaa !3867
  %call6 = call i32 @PyModule_AddObject(%struct._object* %12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), %struct._object* %13), !dbg !4224
  %cmp7 = icmp ne i32 %call6, 0, !dbg !4225
  br i1 %cmp7, label %if.then.8, label %if.end.9, !dbg !4226

if.then.8:                                        ; preds = %lor.lhs.false, %do.end
  store %struct._object* null, %struct._object** %retval, !dbg !4227
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.115, !dbg !4227

if.end.9:                                         ; preds = %lor.lhs.false
  br label %do.body.10, !dbg !4228

do.body.10:                                       ; preds = %if.end.9
  %14 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4229
  call void @llvm.lifetime.start(i64 8, i8* %14) #3, !dbg !4229
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !736, metadata !3844), !dbg !4231
  %15 = load %struct._object*, %struct._object** %v, align 8, !dbg !4232, !tbaa !3867
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8, !dbg !4231, !tbaa !3867
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4233, !tbaa !3867
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0, !dbg !4235
  %17 = load i64, i64* %ob_refcnt11, align 8, !dbg !4236, !tbaa !3977
  %dec = add i64 %17, -1, !dbg !4236
  store i64 %dec, i64* %ob_refcnt11, align 8, !dbg !4236, !tbaa !3977
  %cmp12 = icmp ne i64 %dec, 0, !dbg !4237
  br i1 %cmp12, label %if.then.13, label %if.else, !dbg !4238

if.then.13:                                       ; preds = %do.body.10
  br label %if.end.14, !dbg !4239

if.else:                                          ; preds = %do.body.10
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4241, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1, !dbg !4243
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4243, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4, !dbg !4244
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4244, !tbaa !3986
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4245, !tbaa !3867
  call void %20(%struct._object* %21), !dbg !4246
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.13
  %22 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4247
  call void @llvm.lifetime.end(i64 8, i8* %22) #3, !dbg !4247
  br label %do.cond.15, !dbg !4249

do.cond.15:                                       ; preds = %if.end.14
  br label %do.end.16, !dbg !4250

do.end.16:                                        ; preds = %do.cond.15
  %23 = load %struct._object*, %struct._object** %m, align 8, !dbg !4252, !tbaa !3867
  %call17 = call i32 @all_ins(%struct._object* %23), !dbg !4254
  %tobool = icmp ne i32 %call17, 0, !dbg !4254
  br i1 %tobool, label %if.then.18, label %if.end.19, !dbg !4255

if.then.18:                                       ; preds = %do.end.16
  store %struct._object* null, %struct._object** %retval, !dbg !4256
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.115, !dbg !4256

if.end.19:                                        ; preds = %do.end.16
  %24 = load %struct._object*, %struct._object** %m, align 8, !dbg !4257, !tbaa !3867
  %call20 = call i32 @setup_confname_tables(%struct._object* %24), !dbg !4259
  %tobool21 = icmp ne i32 %call20, 0, !dbg !4259
  br i1 %tobool21, label %if.then.22, label %if.end.23, !dbg !4260

if.then.22:                                       ; preds = %if.end.19
  store %struct._object* null, %struct._object** %retval, !dbg !4261
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.115, !dbg !4261

if.end.23:                                        ; preds = %if.end.19
  %25 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !4262, !tbaa !3867
  %ob_refcnt24 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0, !dbg !4263
  %26 = load i64, i64* %ob_refcnt24, align 8, !dbg !4264, !tbaa !3977
  %inc25 = add i64 %26, 1, !dbg !4264
  store i64 %inc25, i64* %ob_refcnt24, align 8, !dbg !4264, !tbaa !3977
  %27 = load %struct._object*, %struct._object** %m, align 8, !dbg !4265, !tbaa !3867
  %28 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !4266, !tbaa !3867
  %call26 = call i32 @PyModule_AddObject(%struct._object* %27, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), %struct._object* %28), !dbg !4267
  %29 = load %struct._object*, %struct._object** @posix_putenv_garbage, align 8, !dbg !4268, !tbaa !3867
  %cmp27 = icmp eq %struct._object* %29, null, !dbg !4270
  br i1 %cmp27, label %if.then.28, label %if.end.30, !dbg !4271

if.then.28:                                       ; preds = %if.end.23
  %call29 = call %struct._object* @PyDict_New(), !dbg !4272
  store %struct._object* %call29, %struct._object** @posix_putenv_garbage, align 8, !dbg !4273, !tbaa !3867
  br label %if.end.30, !dbg !4274

if.end.30:                                        ; preds = %if.then.28, %if.end.23
  %30 = load i32, i32* @initialized, align 4, !dbg !4275, !tbaa !3840
  %tobool31 = icmp ne i32 %30, 0, !dbg !4275
  br i1 %tobool31, label %if.end.58, label %if.then.32, !dbg !4277

if.then.32:                                       ; preds = %if.end.30
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i32 0, i32 0), i8** getelementptr inbounds (%struct.PyStructSequence_Desc, %struct.PyStructSequence_Desc* @waitid_result_desc, i32 0, i32 0), align 8, !dbg !4278, !tbaa !4280
  %call33 = call i32 @PyStructSequence_InitType2(%struct._typeobject* @WaitidResultType, %struct.PyStructSequence_Desc* @waitid_result_desc), !dbg !4282
  %cmp34 = icmp slt i32 %call33, 0, !dbg !4284
  br i1 %cmp34, label %if.then.35, label %if.end.36, !dbg !4285

if.then.35:                                       ; preds = %if.then.32
  store %struct._object* null, %struct._object** %retval, !dbg !4286
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.115, !dbg !4286

if.end.36:                                        ; preds = %if.then.32
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i32 0, i32 0), i8** getelementptr inbounds (%struct.PyStructSequence_Desc, %struct.PyStructSequence_Desc* @stat_result_desc, i32 0, i32 0), align 8, !dbg !4287, !tbaa !4280
  %31 = load i8*, i8** @PyStructSequence_UnnamedField, align 8, !dbg !4288, !tbaa !3867
  %32 = load %struct.PyStructSequence_Field*, %struct.PyStructSequence_Field** getelementptr inbounds (%struct.PyStructSequence_Desc, %struct.PyStructSequence_Desc* @stat_result_desc, i32 0, i32 2), align 8, !dbg !4289, !tbaa !4290
  %arrayidx = getelementptr %struct.PyStructSequence_Field, %struct.PyStructSequence_Field* %32, i64 7, !dbg !4291
  %name = getelementptr inbounds %struct.PyStructSequence_Field, %struct.PyStructSequence_Field* %arrayidx, i32 0, i32 0, !dbg !4292
  store i8* %31, i8** %name, align 8, !dbg !4293, !tbaa !4294
  %33 = load i8*, i8** @PyStructSequence_UnnamedField, align 8, !dbg !4296, !tbaa !3867
  %34 = load %struct.PyStructSequence_Field*, %struct.PyStructSequence_Field** getelementptr inbounds (%struct.PyStructSequence_Desc, %struct.PyStructSequence_Desc* @stat_result_desc, i32 0, i32 2), align 8, !dbg !4297, !tbaa !4290
  %arrayidx37 = getelementptr %struct.PyStructSequence_Field, %struct.PyStructSequence_Field* %34, i64 8, !dbg !4298
  %name38 = getelementptr inbounds %struct.PyStructSequence_Field, %struct.PyStructSequence_Field* %arrayidx37, i32 0, i32 0, !dbg !4299
  store i8* %33, i8** %name38, align 8, !dbg !4300, !tbaa !4294
  %35 = load i8*, i8** @PyStructSequence_UnnamedField, align 8, !dbg !4301, !tbaa !3867
  %36 = load %struct.PyStructSequence_Field*, %struct.PyStructSequence_Field** getelementptr inbounds (%struct.PyStructSequence_Desc, %struct.PyStructSequence_Desc* @stat_result_desc, i32 0, i32 2), align 8, !dbg !4302, !tbaa !4290
  %arrayidx39 = getelementptr %struct.PyStructSequence_Field, %struct.PyStructSequence_Field* %36, i64 9, !dbg !4303
  %name40 = getelementptr inbounds %struct.PyStructSequence_Field, %struct.PyStructSequence_Field* %arrayidx39, i32 0, i32 0, !dbg !4304
  store i8* %35, i8** %name40, align 8, !dbg !4305, !tbaa !4294
  %call41 = call i32 @PyStructSequence_InitType2(%struct._typeobject* @StatResultType, %struct.PyStructSequence_Desc* @stat_result_desc), !dbg !4306
  %cmp42 = icmp slt i32 %call41, 0, !dbg !4308
  br i1 %cmp42, label %if.then.43, label %if.end.44, !dbg !4309

if.then.43:                                       ; preds = %if.end.36
  store %struct._object* null, %struct._object** %retval, !dbg !4310
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.115, !dbg !4310

if.end.44:                                        ; preds = %if.end.36
  %37 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @StatResultType, i32 0, i32 37), align 8, !dbg !4311, !tbaa !4312
  store %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* %37, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** @structseq_new, align 8, !dbg !4313, !tbaa !3867
  store %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @statresult_new, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @StatResultType, i32 0, i32 37), align 8, !dbg !4314, !tbaa !4312
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.10, i32 0, i32 0), i8** getelementptr inbounds (%struct.PyStructSequence_Desc, %struct.PyStructSequence_Desc* @statvfs_result_desc, i32 0, i32 0), align 8, !dbg !4315, !tbaa !4280
  %call45 = call i32 @PyStructSequence_InitType2(%struct._typeobject* @StatVFSResultType, %struct.PyStructSequence_Desc* @statvfs_result_desc), !dbg !4316
  %cmp46 = icmp slt i32 %call45, 0, !dbg !4318
  br i1 %cmp46, label %if.then.47, label %if.end.48, !dbg !4319

if.then.47:                                       ; preds = %if.end.44
  store %struct._object* null, %struct._object** %retval, !dbg !4320
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.115, !dbg !4320

if.end.48:                                        ; preds = %if.end.44
  %call49 = call i64 @sysconf(i32 2) #3, !dbg !4321
  store i64 %call49, i64* @ticks_per_second, align 8, !dbg !4322, !tbaa !3904
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11, i32 0, i32 0), i8** getelementptr inbounds (%struct.PyStructSequence_Desc, %struct.PyStructSequence_Desc* @sched_param_desc, i32 0, i32 0), align 8, !dbg !4323, !tbaa !4280
  %call50 = call i32 @PyStructSequence_InitType2(%struct._typeobject* @SchedParamType, %struct.PyStructSequence_Desc* @sched_param_desc), !dbg !4324
  %cmp51 = icmp slt i32 %call50, 0, !dbg !4326
  br i1 %cmp51, label %if.then.52, label %if.end.53, !dbg !4327

if.then.52:                                       ; preds = %if.end.48
  store %struct._object* null, %struct._object** %retval, !dbg !4328
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.115, !dbg !4328

if.end.53:                                        ; preds = %if.end.48
  store %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @sched_param_new, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @SchedParamType, i32 0, i32 37), align 8, !dbg !4329, !tbaa !4312
  %call54 = call i32 @PyStructSequence_InitType2(%struct._typeobject* @TerminalSizeType, %struct.PyStructSequence_Desc* @TerminalSize_desc), !dbg !4330
  %cmp55 = icmp slt i32 %call54, 0, !dbg !4332
  br i1 %cmp55, label %if.then.56, label %if.end.57, !dbg !4333

if.then.56:                                       ; preds = %if.end.53
  store %struct._object* null, %struct._object** %retval, !dbg !4334
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.115, !dbg !4334

if.end.57:                                        ; preds = %if.end.53
  br label %if.end.58, !dbg !4335

if.end.58:                                        ; preds = %if.end.57, %if.end.30
  %38 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @WaitidResultType, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !4336, !tbaa !3977
  %inc59 = add i64 %38, 1, !dbg !4336
  store i64 %inc59, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @WaitidResultType, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !4336, !tbaa !3977
  %39 = load %struct._object*, %struct._object** %m, align 8, !dbg !4337, !tbaa !3867
  %call60 = call i32 @PyModule_AddObject(%struct._object* %39, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @WaitidResultType, i32 0, i32 0, i32 0)), !dbg !4338
  %40 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @StatResultType, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !4339, !tbaa !3977
  %inc61 = add i64 %40, 1, !dbg !4339
  store i64 %inc61, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @StatResultType, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !4339, !tbaa !3977
  %41 = load %struct._object*, %struct._object** %m, align 8, !dbg !4340, !tbaa !3867
  %call62 = call i32 @PyModule_AddObject(%struct._object* %41, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @StatResultType, i32 0, i32 0, i32 0)), !dbg !4341
  %42 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @StatVFSResultType, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !4342, !tbaa !3977
  %inc63 = add i64 %42, 1, !dbg !4342
  store i64 %inc63, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @StatVFSResultType, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !4342, !tbaa !3977
  %43 = load %struct._object*, %struct._object** %m, align 8, !dbg !4343, !tbaa !3867
  %call64 = call i32 @PyModule_AddObject(%struct._object* %43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @StatVFSResultType, i32 0, i32 0, i32 0)), !dbg !4344
  %44 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @SchedParamType, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !4345, !tbaa !3977
  %inc65 = add i64 %44, 1, !dbg !4345
  store i64 %inc65, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @SchedParamType, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !4345, !tbaa !3977
  %45 = load %struct._object*, %struct._object** %m, align 8, !dbg !4346, !tbaa !3867
  %call66 = call i32 @PyModule_AddObject(%struct._object* %45, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @SchedParamType, i32 0, i32 0, i32 0)), !dbg !4347
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i32 0, i32 0), i8** getelementptr inbounds (%struct.PyStructSequence_Desc, %struct.PyStructSequence_Desc* @times_result_desc, i32 0, i32 0), align 8, !dbg !4348, !tbaa !4280
  %call67 = call i32 @PyStructSequence_InitType2(%struct._typeobject* @TimesResultType, %struct.PyStructSequence_Desc* @times_result_desc), !dbg !4349
  %cmp68 = icmp slt i32 %call67, 0, !dbg !4351
  br i1 %cmp68, label %if.then.69, label %if.end.70, !dbg !4352

if.then.69:                                       ; preds = %if.end.58
  store %struct._object* null, %struct._object** %retval, !dbg !4353
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.115, !dbg !4353

if.end.70:                                        ; preds = %if.end.58
  %46 = load %struct._object*, %struct._object** %m, align 8, !dbg !4354, !tbaa !3867
  %call71 = call i32 @PyModule_AddObject(%struct._object* %46, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @TimesResultType, i32 0, i32 0, i32 0)), !dbg !4355
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.18, i32 0, i32 0), i8** getelementptr inbounds (%struct.PyStructSequence_Desc, %struct.PyStructSequence_Desc* @uname_result_desc, i32 0, i32 0), align 8, !dbg !4356, !tbaa !4280
  %call72 = call i32 @PyStructSequence_InitType2(%struct._typeobject* @UnameResultType, %struct.PyStructSequence_Desc* @uname_result_desc), !dbg !4357
  %cmp73 = icmp slt i32 %call72, 0, !dbg !4359
  br i1 %cmp73, label %if.then.74, label %if.end.75, !dbg !4360

if.then.74:                                       ; preds = %if.end.70
  store %struct._object* null, %struct._object** %retval, !dbg !4361
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.115, !dbg !4361

if.end.75:                                        ; preds = %if.end.70
  %47 = load %struct._object*, %struct._object** %m, align 8, !dbg !4362, !tbaa !3867
  %call76 = call i32 @PyModule_AddObject(%struct._object* %47, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.19, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @UnameResultType, i32 0, i32 0, i32 0)), !dbg !4363
  %48 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @TerminalSizeType, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !4364, !tbaa !3977
  %inc77 = add i64 %48, 1, !dbg !4364
  store i64 %inc77, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @TerminalSizeType, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !4364, !tbaa !3977
  %49 = load %struct._object*, %struct._object** %m, align 8, !dbg !4365, !tbaa !3867
  %call78 = call i32 @PyModule_AddObject(%struct._object* %49, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.20, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @TerminalSizeType, i32 0, i32 0, i32 0)), !dbg !4366
  %call79 = call %struct._object* @PyLong_FromLong(i64 1000000000), !dbg !4367
  store %struct._object* %call79, %struct._object** @billion, align 8, !dbg !4368, !tbaa !3867
  %50 = load %struct._object*, %struct._object** @billion, align 8, !dbg !4369, !tbaa !3867
  %tobool80 = icmp ne %struct._object* %50, null, !dbg !4369
  br i1 %tobool80, label %if.end.82, label %if.then.81, !dbg !4371

if.then.81:                                       ; preds = %if.end.75
  store %struct._object* null, %struct._object** %retval, !dbg !4372
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.115, !dbg !4372

if.end.82:                                        ; preds = %if.end.75
  %51 = bitcast i32* %ignored to i8*, !dbg !4373
  call void @llvm.lifetime.start(i64 4, i8* %51) #3, !dbg !4373
  call void @llvm.dbg.declare(metadata i32* %ignored, metadata !738, metadata !3844), !dbg !4374
  %call83 = call i32 @fd_specified(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), i32 -1), !dbg !4375
  %call84 = call i32 @follow_symlinks_specified(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), i32 1), !dbg !4376
  %call85 = call i32 @dir_fd_and_follow_symlinks_invalid(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i32 -100, i32 1), !dbg !4377
  %52 = bitcast i32* %ignored to i8*, !dbg !4378
  %call86 = call i32 @dir_fd_converter(%struct._object* @_Py_NoneStruct, i8* %52), !dbg !4379
  %53 = bitcast i32* %ignored to i8*, !dbg !4380
  %call87 = call i32 @dir_fd_unavailable(%struct._object* @_Py_NoneStruct, i8* %53), !dbg !4381
  %54 = bitcast i32* %ignored to i8*, !dbg !4382
  call void @llvm.lifetime.end(i64 4, i8* %54) #3, !dbg !4382
  %call88 = call %struct._object* @PyList_New(i64 0), !dbg !4383
  store %struct._object* %call88, %struct._object** %list, align 8, !dbg !4384, !tbaa !3867
  %55 = load %struct._object*, %struct._object** %list, align 8, !dbg !4385, !tbaa !3867
  %tobool89 = icmp ne %struct._object* %55, null, !dbg !4385
  br i1 %tobool89, label %if.end.91, label %if.then.90, !dbg !4387

if.then.90:                                       ; preds = %if.end.82
  store %struct._object* null, %struct._object** %retval, !dbg !4388
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.115, !dbg !4388

if.end.91:                                        ; preds = %if.end.82
  store i8** getelementptr inbounds ([29 x i8*], [29 x i8*]* @have_functions, i32 0, i32 0), i8*** %trace, align 8, !dbg !4389, !tbaa !3867
  br label %for.cond, !dbg !4390

for.cond:                                         ; preds = %for.inc, %if.end.91
  %56 = load i8**, i8*** %trace, align 8, !dbg !4391, !tbaa !3867
  %57 = load i8*, i8** %56, align 8, !dbg !4394, !tbaa !3867
  %tobool92 = icmp ne i8* %57, null, !dbg !4395
  br i1 %tobool92, label %for.body, label %for.end, !dbg !4395

for.body:                                         ; preds = %for.cond
  %58 = bitcast %struct._object** %unicode to i8*, !dbg !4396
  call void @llvm.lifetime.start(i64 8, i8* %58) #3, !dbg !4396
  call void @llvm.dbg.declare(metadata %struct._object** %unicode, metadata !740, metadata !3844), !dbg !4397
  %59 = load i8**, i8*** %trace, align 8, !dbg !4398, !tbaa !3867
  %60 = load i8*, i8** %59, align 8, !dbg !4399, !tbaa !3867
  %61 = load i8**, i8*** %trace, align 8, !dbg !4400, !tbaa !3867
  %62 = load i8*, i8** %61, align 8, !dbg !4401, !tbaa !3867
  %call93 = call i64 @strlen(i8* %62) #11, !dbg !4402
  %call94 = call %struct._object* @PyUnicode_DecodeASCII(i8* %60, i64 %call93, i8* null), !dbg !4403
  store %struct._object* %call94, %struct._object** %unicode, align 8, !dbg !4397, !tbaa !3867
  %63 = load %struct._object*, %struct._object** %unicode, align 8, !dbg !4404, !tbaa !3867
  %tobool95 = icmp ne %struct._object* %63, null, !dbg !4404
  br i1 %tobool95, label %if.end.97, label %if.then.96, !dbg !4406

if.then.96:                                       ; preds = %for.body
  store %struct._object* null, %struct._object** %retval, !dbg !4407
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4407

if.end.97:                                        ; preds = %for.body
  %64 = load %struct._object*, %struct._object** %list, align 8, !dbg !4408, !tbaa !3867
  %65 = load %struct._object*, %struct._object** %unicode, align 8, !dbg !4410, !tbaa !3867
  %call98 = call i32 @PyList_Append(%struct._object* %64, %struct._object* %65), !dbg !4411
  %tobool99 = icmp ne i32 %call98, 0, !dbg !4411
  br i1 %tobool99, label %if.then.100, label %if.end.101, !dbg !4412

if.then.100:                                      ; preds = %if.end.97
  store %struct._object* null, %struct._object** %retval, !dbg !4413
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4413

if.end.101:                                       ; preds = %if.end.97
  br label %do.body.102, !dbg !4414

do.body.102:                                      ; preds = %if.end.101
  %66 = bitcast %struct._object** %_py_decref_tmp103 to i8*, !dbg !4415
  call void @llvm.lifetime.start(i64 8, i8* %66) #3, !dbg !4415
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp103, metadata !744, metadata !3844), !dbg !4417
  %67 = load %struct._object*, %struct._object** %unicode, align 8, !dbg !4418, !tbaa !3867
  store %struct._object* %67, %struct._object** %_py_decref_tmp103, align 8, !dbg !4417, !tbaa !3867
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8, !dbg !4419, !tbaa !3867
  %ob_refcnt104 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 0, !dbg !4421
  %69 = load i64, i64* %ob_refcnt104, align 8, !dbg !4422, !tbaa !3977
  %dec105 = add i64 %69, -1, !dbg !4422
  store i64 %dec105, i64* %ob_refcnt104, align 8, !dbg !4422, !tbaa !3977
  %cmp106 = icmp ne i64 %dec105, 0, !dbg !4423
  br i1 %cmp106, label %if.then.107, label %if.else.108, !dbg !4424

if.then.107:                                      ; preds = %do.body.102
  br label %if.end.111, !dbg !4425

if.else.108:                                      ; preds = %do.body.102
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8, !dbg !4427, !tbaa !3867
  %ob_type109 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1, !dbg !4429
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type109, align 8, !dbg !4429, !tbaa !3892
  %tp_dealloc110 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 4, !dbg !4430
  %72 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc110, align 8, !dbg !4430, !tbaa !3986
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8, !dbg !4431, !tbaa !3867
  call void %72(%struct._object* %73), !dbg !4432
  br label %if.end.111

if.end.111:                                       ; preds = %if.else.108, %if.then.107
  %74 = bitcast %struct._object** %_py_decref_tmp103 to i8*, !dbg !4433
  call void @llvm.lifetime.end(i64 8, i8* %74) #3, !dbg !4433
  br label %do.cond.112, !dbg !4435

do.cond.112:                                      ; preds = %if.end.111
  br label %do.end.113, !dbg !4436

do.end.113:                                       ; preds = %do.cond.112
  store i32 0, i32* %cleanup.dest.slot, !dbg !4438
  br label %cleanup, !dbg !4438

cleanup:                                          ; preds = %do.end.113, %if.then.100, %if.then.96
  %75 = bitcast %struct._object** %unicode to i8*, !dbg !4439
  call void @llvm.lifetime.end(i64 8, i8* %75) #3, !dbg !4439
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %for.inc, !dbg !4440

for.inc:                                          ; preds = %cleanup.cont
  %76 = load i8**, i8*** %trace, align 8, !dbg !4441, !tbaa !3867
  %incdec.ptr = getelementptr i8*, i8** %76, i32 1, !dbg !4441
  store i8** %incdec.ptr, i8*** %trace, align 8, !dbg !4441, !tbaa !3867
  br label %for.cond, !dbg !4442

for.end:                                          ; preds = %for.cond
  %77 = load %struct._object*, %struct._object** %m, align 8, !dbg !4443, !tbaa !3867
  %78 = load %struct._object*, %struct._object** %list, align 8, !dbg !4444, !tbaa !3867
  %call114 = call i32 @PyModule_AddObject(%struct._object* %77, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i32 0, i32 0), %struct._object* %78), !dbg !4445
  store i32 1, i32* @initialized, align 4, !dbg !4446, !tbaa !3840
  %79 = load %struct._object*, %struct._object** %m, align 8, !dbg !4447, !tbaa !3867
  store %struct._object* %79, %struct._object** %retval, !dbg !4448
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.115, !dbg !4448

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.115

cleanup.115:                                      ; preds = %NewDefault, %for.end, %if.then.90, %if.then.81, %if.then.74, %if.then.69, %if.then.56, %if.then.52, %if.then.47, %if.then.43, %if.then.35, %if.then.22, %if.then.18, %if.then.8, %if.then
  %80 = bitcast i8*** %trace to i8*, !dbg !4449
  call void @llvm.lifetime.end(i64 8, i8* %80) #3, !dbg !4449
  %81 = bitcast %struct._object** %list to i8*, !dbg !4449
  call void @llvm.lifetime.end(i64 8, i8* %81) #3, !dbg !4449
  %82 = bitcast %struct._object** %v to i8*, !dbg !4449
  call void @llvm.lifetime.end(i64 8, i8* %82) #3, !dbg !4449
  %83 = bitcast %struct._object** %m to i8*, !dbg !4449
  call void @llvm.lifetime.end(i64 8, i8* %83) #3, !dbg !4449
  %84 = load %struct._object*, %struct._object** %retval, !dbg !4449
  ret %struct._object* %84, !dbg !4449
}

declare %struct._object* @PyModule_Create2(%struct.PyModuleDef*, i32) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @convertenviron() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %d = alloca %struct._object*, align 8
  %e = alloca i8**, align 8
  %cleanup.dest.slot = alloca i32
  %k = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %p = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp37 = alloca %struct._object*, align 8
  %_py_decref_tmp50 = alloca %struct._object*, align 8
  %0 = bitcast %struct._object** %d to i8*, !dbg !4450
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !4450
  call void @llvm.dbg.declare(metadata %struct._object** %d, metadata !3115, metadata !3844), !dbg !4451
  %1 = bitcast i8*** %e to i8*, !dbg !4452
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !4452
  call void @llvm.dbg.declare(metadata i8*** %e, metadata !3116, metadata !3844), !dbg !4453
  %call = call %struct._object* @PyDict_New(), !dbg !4454
  store %struct._object* %call, %struct._object** %d, align 8, !dbg !4455, !tbaa !3867
  %2 = load %struct._object*, %struct._object** %d, align 8, !dbg !4456, !tbaa !3867
  %cmp = icmp eq %struct._object* %2, null, !dbg !4458
  br i1 %cmp, label %if.then, label %if.end, !dbg !4459

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !4460
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.64, !dbg !4460

if.end:                                           ; preds = %entry
  %3 = load i8**, i8*** @environ, align 8, !dbg !4461, !tbaa !3867
  %cmp1 = icmp eq i8** %3, null, !dbg !4463
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !4464

if.then.2:                                        ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %d, align 8, !dbg !4465, !tbaa !3867
  store %struct._object* %4, %struct._object** %retval, !dbg !4466
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.64, !dbg !4466

if.end.3:                                         ; preds = %if.end
  %5 = load i8**, i8*** @environ, align 8, !dbg !4467, !tbaa !3867
  store i8** %5, i8*** %e, align 8, !dbg !4468, !tbaa !3867
  br label %for.cond, !dbg !4469

for.cond:                                         ; preds = %for.inc, %if.end.3
  %6 = load i8**, i8*** %e, align 8, !dbg !4470, !tbaa !3867
  %7 = load i8*, i8** %6, align 8, !dbg !4473, !tbaa !3867
  %cmp4 = icmp ne i8* %7, null, !dbg !4474
  br i1 %cmp4, label %for.body, label %for.end, !dbg !4475

for.body:                                         ; preds = %for.cond
  %8 = bitcast %struct._object** %k to i8*, !dbg !4476
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !4476
  call void @llvm.dbg.declare(metadata %struct._object** %k, metadata !3117, metadata !3844), !dbg !4477
  %9 = bitcast %struct._object** %v to i8*, !dbg !4478
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !4478
  call void @llvm.dbg.declare(metadata %struct._object** %v, metadata !3121, metadata !3844), !dbg !4479
  %10 = bitcast i8** %p to i8*, !dbg !4480
  call void @llvm.lifetime.start(i64 8, i8* %10) #3, !dbg !4480
  call void @llvm.dbg.declare(metadata i8** %p, metadata !3122, metadata !3844), !dbg !4481
  %11 = load i8**, i8*** %e, align 8, !dbg !4482, !tbaa !3867
  %12 = load i8*, i8** %11, align 8, !dbg !4483, !tbaa !3867
  %call5 = call i8* @strchr(i8* %12, i32 61) #3, !dbg !4484
  store i8* %call5, i8** %p, align 8, !dbg !4481, !tbaa !3867
  %13 = load i8*, i8** %p, align 8, !dbg !4485, !tbaa !3867
  %cmp6 = icmp eq i8* %13, null, !dbg !4487
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !4488

if.then.7:                                        ; preds = %for.body
  store i32 4, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4489

if.end.8:                                         ; preds = %for.body
  %14 = load i8**, i8*** %e, align 8, !dbg !4490, !tbaa !3867
  %15 = load i8*, i8** %14, align 8, !dbg !4491, !tbaa !3867
  %16 = load i8*, i8** %p, align 8, !dbg !4492, !tbaa !3867
  %17 = load i8**, i8*** %e, align 8, !dbg !4493, !tbaa !3867
  %18 = load i8*, i8** %17, align 8, !dbg !4494, !tbaa !3867
  %sub.ptr.lhs.cast = ptrtoint i8* %16 to i64, !dbg !4495
  %sub.ptr.rhs.cast = ptrtoint i8* %18 to i64, !dbg !4495
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4495
  %conv = trunc i64 %sub.ptr.sub to i32, !dbg !4496
  %conv9 = sext i32 %conv to i64, !dbg !4496
  %call10 = call %struct._object* @PyBytes_FromStringAndSize(i8* %15, i64 %conv9), !dbg !4497
  store %struct._object* %call10, %struct._object** %k, align 8, !dbg !4498, !tbaa !3867
  %19 = load %struct._object*, %struct._object** %k, align 8, !dbg !4499, !tbaa !3867
  %cmp11 = icmp eq %struct._object* %19, null, !dbg !4501
  br i1 %cmp11, label %if.then.13, label %if.end.14, !dbg !4502

if.then.13:                                       ; preds = %if.end.8
  call void @PyErr_Clear(), !dbg !4503
  store i32 4, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4505

if.end.14:                                        ; preds = %if.end.8
  %20 = load i8*, i8** %p, align 8, !dbg !4506, !tbaa !3867
  %add.ptr = getelementptr i8, i8* %20, i64 1, !dbg !4507
  %21 = load i8*, i8** %p, align 8, !dbg !4508, !tbaa !3867
  %add.ptr15 = getelementptr i8, i8* %21, i64 1, !dbg !4509
  %call16 = call i64 @strlen(i8* %add.ptr15) #11, !dbg !4510
  %call17 = call %struct._object* @PyBytes_FromStringAndSize(i8* %add.ptr, i64 %call16), !dbg !4511
  store %struct._object* %call17, %struct._object** %v, align 8, !dbg !4512, !tbaa !3867
  %22 = load %struct._object*, %struct._object** %v, align 8, !dbg !4513, !tbaa !3867
  %cmp18 = icmp eq %struct._object* %22, null, !dbg !4514
  br i1 %cmp18, label %if.then.20, label %if.end.25, !dbg !4515

if.then.20:                                       ; preds = %if.end.14
  call void @PyErr_Clear(), !dbg !4516
  br label %do.body, !dbg !4517

do.body:                                          ; preds = %if.then.20
  %23 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4518
  call void @llvm.lifetime.start(i64 8, i8* %23) #3, !dbg !4518
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !3123, metadata !3844), !dbg !4520
  %24 = load %struct._object*, %struct._object** %k, align 8, !dbg !4521, !tbaa !3867
  store %struct._object* %24, %struct._object** %_py_decref_tmp, align 8, !dbg !4520, !tbaa !3867
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4522, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0, !dbg !4524
  %26 = load i64, i64* %ob_refcnt, align 8, !dbg !4525, !tbaa !3977
  %dec = add i64 %26, -1, !dbg !4525
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4525, !tbaa !3977
  %cmp21 = icmp ne i64 %dec, 0, !dbg !4526
  br i1 %cmp21, label %if.then.23, label %if.else, !dbg !4527

if.then.23:                                       ; preds = %do.body
  br label %if.end.24, !dbg !4528

if.else:                                          ; preds = %do.body
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4530, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1, !dbg !4532
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4532, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4, !dbg !4533
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4533, !tbaa !3986
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4534, !tbaa !3867
  call void %29(%struct._object* %30), !dbg !4535
  br label %if.end.24

if.end.24:                                        ; preds = %if.else, %if.then.23
  %31 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4536
  call void @llvm.lifetime.end(i64 8, i8* %31) #3, !dbg !4536
  br label %do.cond, !dbg !4538

do.cond:                                          ; preds = %if.end.24
  br label %do.end, !dbg !4539

do.end:                                           ; preds = %do.cond
  store i32 4, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4541

if.end.25:                                        ; preds = %if.end.14
  %32 = load %struct._object*, %struct._object** %d, align 8, !dbg !4542, !tbaa !3867
  %33 = load %struct._object*, %struct._object** %k, align 8, !dbg !4544, !tbaa !3867
  %call26 = call %struct._object* @PyDict_GetItem(%struct._object* %32, %struct._object* %33), !dbg !4545
  %cmp27 = icmp eq %struct._object* %call26, null, !dbg !4546
  br i1 %cmp27, label %if.then.29, label %if.end.35, !dbg !4547

if.then.29:                                       ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %d, align 8, !dbg !4548, !tbaa !3867
  %35 = load %struct._object*, %struct._object** %k, align 8, !dbg !4551, !tbaa !3867
  %36 = load %struct._object*, %struct._object** %v, align 8, !dbg !4552, !tbaa !3867
  %call30 = call i32 @PyDict_SetItem(%struct._object* %34, %struct._object* %35, %struct._object* %36), !dbg !4553
  %cmp31 = icmp ne i32 %call30, 0, !dbg !4554
  br i1 %cmp31, label %if.then.33, label %if.end.34, !dbg !4555

if.then.33:                                       ; preds = %if.then.29
  call void @PyErr_Clear(), !dbg !4556
  br label %if.end.34, !dbg !4556

if.end.34:                                        ; preds = %if.then.33, %if.then.29
  br label %if.end.35, !dbg !4557

if.end.35:                                        ; preds = %if.end.34, %if.end.25
  br label %do.body.36, !dbg !4558

do.body.36:                                       ; preds = %if.end.35
  %37 = bitcast %struct._object** %_py_decref_tmp37 to i8*, !dbg !4559
  call void @llvm.lifetime.start(i64 8, i8* %37) #3, !dbg !4559
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp37, metadata !3127, metadata !3844), !dbg !4561
  %38 = load %struct._object*, %struct._object** %k, align 8, !dbg !4562, !tbaa !3867
  store %struct._object* %38, %struct._object** %_py_decref_tmp37, align 8, !dbg !4561, !tbaa !3867
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8, !dbg !4563, !tbaa !3867
  %ob_refcnt38 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0, !dbg !4565
  %40 = load i64, i64* %ob_refcnt38, align 8, !dbg !4566, !tbaa !3977
  %dec39 = add i64 %40, -1, !dbg !4566
  store i64 %dec39, i64* %ob_refcnt38, align 8, !dbg !4566, !tbaa !3977
  %cmp40 = icmp ne i64 %dec39, 0, !dbg !4567
  br i1 %cmp40, label %if.then.42, label %if.else.43, !dbg !4568

if.then.42:                                       ; preds = %do.body.36
  br label %if.end.46, !dbg !4569

if.else.43:                                       ; preds = %do.body.36
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8, !dbg !4571, !tbaa !3867
  %ob_type44 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1, !dbg !4573
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type44, align 8, !dbg !4573, !tbaa !3892
  %tp_dealloc45 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4, !dbg !4574
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc45, align 8, !dbg !4574, !tbaa !3986
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8, !dbg !4575, !tbaa !3867
  call void %43(%struct._object* %44), !dbg !4576
  br label %if.end.46

if.end.46:                                        ; preds = %if.else.43, %if.then.42
  %45 = bitcast %struct._object** %_py_decref_tmp37 to i8*, !dbg !4577
  call void @llvm.lifetime.end(i64 8, i8* %45) #3, !dbg !4577
  br label %do.cond.47, !dbg !4579

do.cond.47:                                       ; preds = %if.end.46
  br label %do.end.48, !dbg !4580

do.end.48:                                        ; preds = %do.cond.47
  br label %do.body.49, !dbg !4582

do.body.49:                                       ; preds = %do.end.48
  %46 = bitcast %struct._object** %_py_decref_tmp50 to i8*, !dbg !4583
  call void @llvm.lifetime.start(i64 8, i8* %46) #3, !dbg !4583
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp50, metadata !3129, metadata !3844), !dbg !4585
  %47 = load %struct._object*, %struct._object** %v, align 8, !dbg !4586, !tbaa !3867
  store %struct._object* %47, %struct._object** %_py_decref_tmp50, align 8, !dbg !4585, !tbaa !3867
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8, !dbg !4587, !tbaa !3867
  %ob_refcnt51 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0, !dbg !4589
  %49 = load i64, i64* %ob_refcnt51, align 8, !dbg !4590, !tbaa !3977
  %dec52 = add i64 %49, -1, !dbg !4590
  store i64 %dec52, i64* %ob_refcnt51, align 8, !dbg !4590, !tbaa !3977
  %cmp53 = icmp ne i64 %dec52, 0, !dbg !4591
  br i1 %cmp53, label %if.then.55, label %if.else.56, !dbg !4592

if.then.55:                                       ; preds = %do.body.49
  br label %if.end.59, !dbg !4593

if.else.56:                                       ; preds = %do.body.49
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8, !dbg !4595, !tbaa !3867
  %ob_type57 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1, !dbg !4597
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type57, align 8, !dbg !4597, !tbaa !3892
  %tp_dealloc58 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4, !dbg !4598
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc58, align 8, !dbg !4598, !tbaa !3986
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8, !dbg !4599, !tbaa !3867
  call void %52(%struct._object* %53), !dbg !4600
  br label %if.end.59

if.end.59:                                        ; preds = %if.else.56, %if.then.55
  %54 = bitcast %struct._object** %_py_decref_tmp50 to i8*, !dbg !4601
  call void @llvm.lifetime.end(i64 8, i8* %54) #3, !dbg !4601
  br label %do.cond.60, !dbg !4602

do.cond.60:                                       ; preds = %if.end.59
  br label %do.end.61, !dbg !4603

do.end.61:                                        ; preds = %do.cond.60
  store i32 0, i32* %cleanup.dest.slot, !dbg !4605
  br label %cleanup, !dbg !4605

cleanup:                                          ; preds = %do.end.61, %do.end, %if.then.13, %if.then.7
  %55 = bitcast i8** %p to i8*, !dbg !4606
  call void @llvm.lifetime.end(i64 8, i8* %55) #3, !dbg !4606
  %56 = bitcast %struct._object** %v to i8*, !dbg !4606
  call void @llvm.lifetime.end(i64 8, i8* %56) #3, !dbg !4606
  %57 = bitcast %struct._object** %k to i8*, !dbg !4606
  call void @llvm.lifetime.end(i64 8, i8* %57) #3, !dbg !4606
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 4
  br i1 %SwitchLeaf, label %for.inc, label %NewDefault

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %NewDefault
  br label %for.inc, !dbg !4607

for.inc:                                          ; preds = %LeafBlock, %cleanup.cont
  %58 = load i8**, i8*** %e, align 8, !dbg !4608, !tbaa !3867
  %incdec.ptr = getelementptr i8*, i8** %58, i32 1, !dbg !4608
  store i8** %incdec.ptr, i8*** %e, align 8, !dbg !4608, !tbaa !3867
  br label %for.cond, !dbg !4609

for.end:                                          ; preds = %for.cond
  %59 = load %struct._object*, %struct._object** %d, align 8, !dbg !4610, !tbaa !3867
  store %struct._object* %59, %struct._object** %retval, !dbg !4611
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.64, !dbg !4611

cleanup.64:                                       ; preds = %for.end, %if.then.2, %if.then
  %60 = bitcast i8*** %e to i8*, !dbg !4612
  call void @llvm.lifetime.end(i64 8, i8* %60) #3, !dbg !4612
  %61 = bitcast %struct._object** %d to i8*, !dbg !4612
  call void @llvm.lifetime.end(i64 8, i8* %61) #3, !dbg !4612
  %62 = load %struct._object*, %struct._object** %retval, !dbg !4612
  ret %struct._object* %62, !dbg !4612
}

declare i32 @PyModule_AddObject(%struct._object*, i8*, %struct._object*) #2

; Function Attrs: nounwind uwtable
define internal i32 @all_ins(%struct._object* %m) #0 {
entry:
  %retval = alloca i32, align 4
  %m.addr = alloca %struct._object*, align 8
  store %struct._object* %m, %struct._object** %m.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %m.addr, metadata !3133, metadata !3844), !dbg !4613
  %0 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4614, !tbaa !3867
  %call = call i32 @PyModule_AddIntConstant(%struct._object* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.542, i32 0, i32 0), i64 0), !dbg !4616
  %tobool = icmp ne i32 %call, 0, !dbg !4616
  br i1 %tobool, label %if.then, label %if.end, !dbg !4617

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, !dbg !4618
  br label %return, !dbg !4618

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4620, !tbaa !3867
  %call1 = call i32 @PyModule_AddIntConstant(%struct._object* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.543, i32 0, i32 0), i64 4), !dbg !4622
  %tobool2 = icmp ne i32 %call1, 0, !dbg !4622
  br i1 %tobool2, label %if.then.3, label %if.end.4, !dbg !4623

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval, !dbg !4624
  br label %return, !dbg !4624

if.end.4:                                         ; preds = %if.end
  %2 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4626, !tbaa !3867
  %call5 = call i32 @PyModule_AddIntConstant(%struct._object* %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.544, i32 0, i32 0), i64 2), !dbg !4628
  %tobool6 = icmp ne i32 %call5, 0, !dbg !4628
  br i1 %tobool6, label %if.then.7, label %if.end.8, !dbg !4629

if.then.7:                                        ; preds = %if.end.4
  store i32 -1, i32* %retval, !dbg !4630
  br label %return, !dbg !4630

if.end.8:                                         ; preds = %if.end.4
  %3 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4632, !tbaa !3867
  %call9 = call i32 @PyModule_AddIntConstant(%struct._object* %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.545, i32 0, i32 0), i64 1), !dbg !4634
  %tobool10 = icmp ne i32 %call9, 0, !dbg !4634
  br i1 %tobool10, label %if.then.11, label %if.end.12, !dbg !4635

if.then.11:                                       ; preds = %if.end.8
  store i32 -1, i32* %retval, !dbg !4636
  br label %return, !dbg !4636

if.end.12:                                        ; preds = %if.end.8
  %4 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4638, !tbaa !3867
  %call13 = call i32 @PyModule_AddIntConstant(%struct._object* %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.546, i32 0, i32 0), i64 65536), !dbg !4640
  %tobool14 = icmp ne i32 %call13, 0, !dbg !4640
  br i1 %tobool14, label %if.then.15, label %if.end.16, !dbg !4641

if.then.15:                                       ; preds = %if.end.12
  store i32 -1, i32* %retval, !dbg !4642
  br label %return, !dbg !4642

if.end.16:                                        ; preds = %if.end.12
  %5 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4644, !tbaa !3867
  %call17 = call i32 @PyModule_AddIntConstant(%struct._object* %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.547, i32 0, i32 0), i64 238328), !dbg !4646
  %tobool18 = icmp ne i32 %call17, 0, !dbg !4646
  br i1 %tobool18, label %if.then.19, label %if.end.20, !dbg !4647

if.then.19:                                       ; preds = %if.end.16
  store i32 -1, i32* %retval, !dbg !4648
  br label %return, !dbg !4648

if.end.20:                                        ; preds = %if.end.16
  %6 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4650, !tbaa !3867
  %call21 = call i32 @PyModule_AddIntConstant(%struct._object* %6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.548, i32 0, i32 0), i64 8), !dbg !4652
  %tobool22 = icmp ne i32 %call21, 0, !dbg !4652
  br i1 %tobool22, label %if.then.23, label %if.end.24, !dbg !4653

if.then.23:                                       ; preds = %if.end.20
  store i32 -1, i32* %retval, !dbg !4654
  br label %return, !dbg !4654

if.end.24:                                        ; preds = %if.end.20
  %7 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4656, !tbaa !3867
  %call25 = call i32 @PyModule_AddIntConstant(%struct._object* %7, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.549, i32 0, i32 0), i64 1), !dbg !4658
  %tobool26 = icmp ne i32 %call25, 0, !dbg !4658
  br i1 %tobool26, label %if.then.27, label %if.end.28, !dbg !4659

if.then.27:                                       ; preds = %if.end.24
  store i32 -1, i32* %retval, !dbg !4660
  br label %return, !dbg !4660

if.end.28:                                        ; preds = %if.end.24
  %8 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4662, !tbaa !3867
  %call29 = call i32 @PyModule_AddIntConstant(%struct._object* %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.550, i32 0, i32 0), i64 2), !dbg !4664
  %tobool30 = icmp ne i32 %call29, 0, !dbg !4664
  br i1 %tobool30, label %if.then.31, label %if.end.32, !dbg !4665

if.then.31:                                       ; preds = %if.end.28
  store i32 -1, i32* %retval, !dbg !4666
  br label %return, !dbg !4666

if.end.32:                                        ; preds = %if.end.28
  %9 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4668, !tbaa !3867
  %call33 = call i32 @PyModule_AddIntConstant(%struct._object* %9, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.551, i32 0, i32 0), i64 0), !dbg !4670
  %tobool34 = icmp ne i32 %call33, 0, !dbg !4670
  br i1 %tobool34, label %if.then.35, label %if.end.36, !dbg !4671

if.then.35:                                       ; preds = %if.end.32
  store i32 -1, i32* %retval, !dbg !4672
  br label %return, !dbg !4672

if.end.36:                                        ; preds = %if.end.32
  %10 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4674, !tbaa !3867
  %call37 = call i32 @PyModule_AddIntConstant(%struct._object* %10, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.552, i32 0, i32 0), i64 1), !dbg !4676
  %tobool38 = icmp ne i32 %call37, 0, !dbg !4676
  br i1 %tobool38, label %if.then.39, label %if.end.40, !dbg !4677

if.then.39:                                       ; preds = %if.end.36
  store i32 -1, i32* %retval, !dbg !4678
  br label %return, !dbg !4678

if.end.40:                                        ; preds = %if.end.36
  %11 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4680, !tbaa !3867
  %call41 = call i32 @PyModule_AddIntConstant(%struct._object* %11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.553, i32 0, i32 0), i64 2), !dbg !4682
  %tobool42 = icmp ne i32 %call41, 0, !dbg !4682
  br i1 %tobool42, label %if.then.43, label %if.end.44, !dbg !4683

if.then.43:                                       ; preds = %if.end.40
  store i32 -1, i32* %retval, !dbg !4684
  br label %return, !dbg !4684

if.end.44:                                        ; preds = %if.end.40
  %12 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4686, !tbaa !3867
  %call45 = call i32 @PyModule_AddIntConstant(%struct._object* %12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.554, i32 0, i32 0), i64 2048), !dbg !4688
  %tobool46 = icmp ne i32 %call45, 0, !dbg !4688
  br i1 %tobool46, label %if.then.47, label %if.end.48, !dbg !4689

if.then.47:                                       ; preds = %if.end.44
  store i32 -1, i32* %retval, !dbg !4690
  br label %return, !dbg !4690

if.end.48:                                        ; preds = %if.end.44
  %13 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4692, !tbaa !3867
  %call49 = call i32 @PyModule_AddIntConstant(%struct._object* %13, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.555, i32 0, i32 0), i64 2048), !dbg !4694
  %tobool50 = icmp ne i32 %call49, 0, !dbg !4694
  br i1 %tobool50, label %if.then.51, label %if.end.52, !dbg !4695

if.then.51:                                       ; preds = %if.end.48
  store i32 -1, i32* %retval, !dbg !4696
  br label %return, !dbg !4696

if.end.52:                                        ; preds = %if.end.48
  %14 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4698, !tbaa !3867
  %call53 = call i32 @PyModule_AddIntConstant(%struct._object* %14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.556, i32 0, i32 0), i64 1024), !dbg !4700
  %tobool54 = icmp ne i32 %call53, 0, !dbg !4700
  br i1 %tobool54, label %if.then.55, label %if.end.56, !dbg !4701

if.then.55:                                       ; preds = %if.end.52
  store i32 -1, i32* %retval, !dbg !4702
  br label %return, !dbg !4702

if.end.56:                                        ; preds = %if.end.52
  %15 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4704, !tbaa !3867
  %call57 = call i32 @PyModule_AddIntConstant(%struct._object* %15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.557, i32 0, i32 0), i64 4096), !dbg !4706
  %tobool58 = icmp ne i32 %call57, 0, !dbg !4706
  br i1 %tobool58, label %if.then.59, label %if.end.60, !dbg !4707

if.then.59:                                       ; preds = %if.end.56
  store i32 -1, i32* %retval, !dbg !4708
  br label %return, !dbg !4708

if.end.60:                                        ; preds = %if.end.56
  %16 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4710, !tbaa !3867
  %call61 = call i32 @PyModule_AddIntConstant(%struct._object* %16, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.558, i32 0, i32 0), i64 1052672), !dbg !4712
  %tobool62 = icmp ne i32 %call61, 0, !dbg !4712
  br i1 %tobool62, label %if.then.63, label %if.end.64, !dbg !4713

if.then.63:                                       ; preds = %if.end.60
  store i32 -1, i32* %retval, !dbg !4714
  br label %return, !dbg !4714

if.end.64:                                        ; preds = %if.end.60
  %17 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4716, !tbaa !3867
  %call65 = call i32 @PyModule_AddIntConstant(%struct._object* %17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.559, i32 0, i32 0), i64 1052672), !dbg !4718
  %tobool66 = icmp ne i32 %call65, 0, !dbg !4718
  br i1 %tobool66, label %if.then.67, label %if.end.68, !dbg !4719

if.then.67:                                       ; preds = %if.end.64
  store i32 -1, i32* %retval, !dbg !4720
  br label %return, !dbg !4720

if.end.68:                                        ; preds = %if.end.64
  %18 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4722, !tbaa !3867
  %call69 = call i32 @PyModule_AddIntConstant(%struct._object* %18, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.560, i32 0, i32 0), i64 256), !dbg !4724
  %tobool70 = icmp ne i32 %call69, 0, !dbg !4724
  br i1 %tobool70, label %if.then.71, label %if.end.72, !dbg !4725

if.then.71:                                       ; preds = %if.end.68
  store i32 -1, i32* %retval, !dbg !4726
  br label %return, !dbg !4726

if.end.72:                                        ; preds = %if.end.68
  %19 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4728, !tbaa !3867
  %call73 = call i32 @PyModule_AddIntConstant(%struct._object* %19, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.561, i32 0, i32 0), i64 64), !dbg !4730
  %tobool74 = icmp ne i32 %call73, 0, !dbg !4730
  br i1 %tobool74, label %if.then.75, label %if.end.76, !dbg !4731

if.then.75:                                       ; preds = %if.end.72
  store i32 -1, i32* %retval, !dbg !4732
  br label %return, !dbg !4732

if.end.76:                                        ; preds = %if.end.72
  %20 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4734, !tbaa !3867
  %call77 = call i32 @PyModule_AddIntConstant(%struct._object* %20, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.562, i32 0, i32 0), i64 128), !dbg !4736
  %tobool78 = icmp ne i32 %call77, 0, !dbg !4736
  br i1 %tobool78, label %if.then.79, label %if.end.80, !dbg !4737

if.then.79:                                       ; preds = %if.end.76
  store i32 -1, i32* %retval, !dbg !4738
  br label %return, !dbg !4738

if.end.80:                                        ; preds = %if.end.76
  %21 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4740, !tbaa !3867
  %call81 = call i32 @PyModule_AddIntConstant(%struct._object* %21, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.563, i32 0, i32 0), i64 512), !dbg !4742
  %tobool82 = icmp ne i32 %call81, 0, !dbg !4742
  br i1 %tobool82, label %if.then.83, label %if.end.84, !dbg !4743

if.then.83:                                       ; preds = %if.end.80
  store i32 -1, i32* %retval, !dbg !4744
  br label %return, !dbg !4744

if.end.84:                                        ; preds = %if.end.80
  %22 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4746, !tbaa !3867
  %call85 = call i32 @PyModule_AddIntConstant(%struct._object* %22, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.564, i32 0, i32 0), i64 0), !dbg !4748
  %tobool86 = icmp ne i32 %call85, 0, !dbg !4748
  br i1 %tobool86, label %if.then.87, label %if.end.88, !dbg !4749

if.then.87:                                       ; preds = %if.end.84
  store i32 -1, i32* %retval, !dbg !4750
  br label %return, !dbg !4750

if.end.88:                                        ; preds = %if.end.84
  %23 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4752, !tbaa !3867
  %call89 = call i32 @PyModule_AddIntConstant(%struct._object* %23, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.565, i32 0, i32 0), i64 2097152), !dbg !4754
  %tobool90 = icmp ne i32 %call89, 0, !dbg !4754
  br i1 %tobool90, label %if.then.91, label %if.end.92, !dbg !4755

if.then.91:                                       ; preds = %if.end.88
  store i32 -1, i32* %retval, !dbg !4756
  br label %return, !dbg !4756

if.end.92:                                        ; preds = %if.end.88
  %24 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4758, !tbaa !3867
  %call93 = call i32 @PyModule_AddIntConstant(%struct._object* %24, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.566, i32 0, i32 0), i64 0), !dbg !4760
  %tobool94 = icmp ne i32 %call93, 0, !dbg !4760
  br i1 %tobool94, label %if.then.95, label %if.end.96, !dbg !4761

if.then.95:                                       ; preds = %if.end.92
  store i32 -1, i32* %retval, !dbg !4762
  br label %return, !dbg !4762

if.end.96:                                        ; preds = %if.end.92
  %25 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4764, !tbaa !3867
  %call97 = call i32 @PyModule_AddIntConstant(%struct._object* %25, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.567, i32 0, i32 0), i64 1), !dbg !4766
  %tobool98 = icmp ne i32 %call97, 0, !dbg !4766
  br i1 %tobool98, label %if.then.99, label %if.end.100, !dbg !4767

if.then.99:                                       ; preds = %if.end.96
  store i32 -1, i32* %retval, !dbg !4768
  br label %return, !dbg !4768

if.end.100:                                       ; preds = %if.end.96
  %26 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4770, !tbaa !3867
  %call101 = call i32 @PyModule_AddIntConstant(%struct._object* %26, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.568, i32 0, i32 0), i64 2), !dbg !4772
  %tobool102 = icmp ne i32 %call101, 0, !dbg !4772
  br i1 %tobool102, label %if.then.103, label %if.end.104, !dbg !4773

if.then.103:                                      ; preds = %if.end.100
  store i32 -1, i32* %retval, !dbg !4774
  br label %return, !dbg !4774

if.end.104:                                       ; preds = %if.end.100
  %27 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4776, !tbaa !3867
  %call105 = call i32 @PyModule_AddIntConstant(%struct._object* %27, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.569, i32 0, i32 0), i64 524288), !dbg !4778
  %tobool106 = icmp ne i32 %call105, 0, !dbg !4778
  br i1 %tobool106, label %if.then.107, label %if.end.108, !dbg !4779

if.then.107:                                      ; preds = %if.end.104
  store i32 -1, i32* %retval, !dbg !4780
  br label %return, !dbg !4780

if.end.108:                                       ; preds = %if.end.104
  %28 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4782, !tbaa !3867
  %call109 = call i32 @PyModule_AddIntConstant(%struct._object* %28, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.570, i32 0, i32 0), i64 3), !dbg !4784
  %tobool110 = icmp ne i32 %call109, 0, !dbg !4784
  br i1 %tobool110, label %if.then.111, label %if.end.112, !dbg !4785

if.then.111:                                      ; preds = %if.end.108
  store i32 -1, i32* %retval, !dbg !4786
  br label %return, !dbg !4786

if.end.112:                                       ; preds = %if.end.108
  %29 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4788, !tbaa !3867
  %call113 = call i32 @PyModule_AddIntConstant(%struct._object* %29, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.571, i32 0, i32 0), i64 4), !dbg !4790
  %tobool114 = icmp ne i32 %call113, 0, !dbg !4790
  br i1 %tobool114, label %if.then.115, label %if.end.116, !dbg !4791

if.then.115:                                      ; preds = %if.end.112
  store i32 -1, i32* %retval, !dbg !4792
  br label %return, !dbg !4792

if.end.116:                                       ; preds = %if.end.112
  %30 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4794, !tbaa !3867
  %call117 = call i32 @PyModule_AddIntConstant(%struct._object* %30, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.572, i32 0, i32 0), i64 3), !dbg !4796
  %tobool118 = icmp ne i32 %call117, 0, !dbg !4796
  br i1 %tobool118, label %if.then.119, label %if.end.120, !dbg !4797

if.then.119:                                      ; preds = %if.end.116
  store i32 -1, i32* %retval, !dbg !4798
  br label %return, !dbg !4798

if.end.120:                                       ; preds = %if.end.116
  %31 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4800, !tbaa !3867
  %call121 = call i32 @PyModule_AddIntConstant(%struct._object* %31, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.573, i32 0, i32 0), i64 8192), !dbg !4802
  %tobool122 = icmp ne i32 %call121, 0, !dbg !4802
  br i1 %tobool122, label %if.then.123, label %if.end.124, !dbg !4803

if.then.123:                                      ; preds = %if.end.120
  store i32 -1, i32* %retval, !dbg !4804
  br label %return, !dbg !4804

if.end.124:                                       ; preds = %if.end.120
  %32 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4806, !tbaa !3867
  %call125 = call i32 @PyModule_AddIntConstant(%struct._object* %32, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.574, i32 0, i32 0), i64 16384), !dbg !4808
  %tobool126 = icmp ne i32 %call125, 0, !dbg !4808
  br i1 %tobool126, label %if.then.127, label %if.end.128, !dbg !4809

if.then.127:                                      ; preds = %if.end.124
  store i32 -1, i32* %retval, !dbg !4810
  br label %return, !dbg !4810

if.end.128:                                       ; preds = %if.end.124
  %33 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4812, !tbaa !3867
  %call129 = call i32 @PyModule_AddIntConstant(%struct._object* %33, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.575, i32 0, i32 0), i64 65536), !dbg !4814
  %tobool130 = icmp ne i32 %call129, 0, !dbg !4814
  br i1 %tobool130, label %if.then.131, label %if.end.132, !dbg !4815

if.then.131:                                      ; preds = %if.end.128
  store i32 -1, i32* %retval, !dbg !4816
  br label %return, !dbg !4816

if.end.132:                                       ; preds = %if.end.128
  %34 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4818, !tbaa !3867
  %call133 = call i32 @PyModule_AddIntConstant(%struct._object* %34, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.576, i32 0, i32 0), i64 131072), !dbg !4820
  %tobool134 = icmp ne i32 %call133, 0, !dbg !4820
  br i1 %tobool134, label %if.then.135, label %if.end.136, !dbg !4821

if.then.135:                                      ; preds = %if.end.132
  store i32 -1, i32* %retval, !dbg !4822
  br label %return, !dbg !4822

if.end.136:                                       ; preds = %if.end.132
  %35 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4824, !tbaa !3867
  %call137 = call i32 @PyModule_AddIntConstant(%struct._object* %35, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.577, i32 0, i32 0), i64 262144), !dbg !4826
  %tobool138 = icmp ne i32 %call137, 0, !dbg !4826
  br i1 %tobool138, label %if.then.139, label %if.end.140, !dbg !4827

if.then.139:                                      ; preds = %if.end.136
  store i32 -1, i32* %retval, !dbg !4828
  br label %return, !dbg !4828

if.end.140:                                       ; preds = %if.end.136
  %36 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4830, !tbaa !3867
  %call141 = call i32 @PyModule_AddIntConstant(%struct._object* %36, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.578, i32 0, i32 0), i64 0), !dbg !4832
  %tobool142 = icmp ne i32 %call141, 0, !dbg !4832
  br i1 %tobool142, label %if.then.143, label %if.end.144, !dbg !4833

if.then.143:                                      ; preds = %if.end.140
  store i32 -1, i32* %retval, !dbg !4834
  br label %return, !dbg !4834

if.end.144:                                       ; preds = %if.end.140
  %37 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4836, !tbaa !3867
  %call145 = call i32 @PyModule_AddIntConstant(%struct._object* %37, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.579, i32 0, i32 0), i64 64), !dbg !4838
  %tobool146 = icmp ne i32 %call145, 0, !dbg !4838
  br i1 %tobool146, label %if.then.147, label %if.end.148, !dbg !4839

if.then.147:                                      ; preds = %if.end.144
  store i32 -1, i32* %retval, !dbg !4840
  br label %return, !dbg !4840

if.end.148:                                       ; preds = %if.end.144
  %38 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4842, !tbaa !3867
  %call149 = call i32 @PyModule_AddIntConstant(%struct._object* %38, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.580, i32 0, i32 0), i64 65), !dbg !4844
  %tobool150 = icmp ne i32 %call149, 0, !dbg !4844
  br i1 %tobool150, label %if.then.151, label %if.end.152, !dbg !4845

if.then.151:                                      ; preds = %if.end.148
  store i32 -1, i32* %retval, !dbg !4846
  br label %return, !dbg !4846

if.end.152:                                       ; preds = %if.end.148
  %39 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4848, !tbaa !3867
  %call153 = call i32 @PyModule_AddIntConstant(%struct._object* %39, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.581, i32 0, i32 0), i64 66), !dbg !4850
  %tobool154 = icmp ne i32 %call153, 0, !dbg !4850
  br i1 %tobool154, label %if.then.155, label %if.end.156, !dbg !4851

if.then.155:                                      ; preds = %if.end.152
  store i32 -1, i32* %retval, !dbg !4852
  br label %return, !dbg !4852

if.end.156:                                       ; preds = %if.end.152
  %40 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4854, !tbaa !3867
  %call157 = call i32 @PyModule_AddIntConstant(%struct._object* %40, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.582, i32 0, i32 0), i64 67), !dbg !4856
  %tobool158 = icmp ne i32 %call157, 0, !dbg !4856
  br i1 %tobool158, label %if.then.159, label %if.end.160, !dbg !4857

if.then.159:                                      ; preds = %if.end.156
  store i32 -1, i32* %retval, !dbg !4858
  br label %return, !dbg !4858

if.end.160:                                       ; preds = %if.end.156
  %41 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4860, !tbaa !3867
  %call161 = call i32 @PyModule_AddIntConstant(%struct._object* %41, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.583, i32 0, i32 0), i64 68), !dbg !4862
  %tobool162 = icmp ne i32 %call161, 0, !dbg !4862
  br i1 %tobool162, label %if.then.163, label %if.end.164, !dbg !4863

if.then.163:                                      ; preds = %if.end.160
  store i32 -1, i32* %retval, !dbg !4864
  br label %return, !dbg !4864

if.end.164:                                       ; preds = %if.end.160
  %42 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4866, !tbaa !3867
  %call165 = call i32 @PyModule_AddIntConstant(%struct._object* %42, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.584, i32 0, i32 0), i64 69), !dbg !4868
  %tobool166 = icmp ne i32 %call165, 0, !dbg !4868
  br i1 %tobool166, label %if.then.167, label %if.end.168, !dbg !4869

if.then.167:                                      ; preds = %if.end.164
  store i32 -1, i32* %retval, !dbg !4870
  br label %return, !dbg !4870

if.end.168:                                       ; preds = %if.end.164
  %43 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4872, !tbaa !3867
  %call169 = call i32 @PyModule_AddIntConstant(%struct._object* %43, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.585, i32 0, i32 0), i64 70), !dbg !4874
  %tobool170 = icmp ne i32 %call169, 0, !dbg !4874
  br i1 %tobool170, label %if.then.171, label %if.end.172, !dbg !4875

if.then.171:                                      ; preds = %if.end.168
  store i32 -1, i32* %retval, !dbg !4876
  br label %return, !dbg !4876

if.end.172:                                       ; preds = %if.end.168
  %44 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4878, !tbaa !3867
  %call173 = call i32 @PyModule_AddIntConstant(%struct._object* %44, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.586, i32 0, i32 0), i64 71), !dbg !4880
  %tobool174 = icmp ne i32 %call173, 0, !dbg !4880
  br i1 %tobool174, label %if.then.175, label %if.end.176, !dbg !4881

if.then.175:                                      ; preds = %if.end.172
  store i32 -1, i32* %retval, !dbg !4882
  br label %return, !dbg !4882

if.end.176:                                       ; preds = %if.end.172
  %45 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4884, !tbaa !3867
  %call177 = call i32 @PyModule_AddIntConstant(%struct._object* %45, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.587, i32 0, i32 0), i64 72), !dbg !4886
  %tobool178 = icmp ne i32 %call177, 0, !dbg !4886
  br i1 %tobool178, label %if.then.179, label %if.end.180, !dbg !4887

if.then.179:                                      ; preds = %if.end.176
  store i32 -1, i32* %retval, !dbg !4888
  br label %return, !dbg !4888

if.end.180:                                       ; preds = %if.end.176
  %46 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4890, !tbaa !3867
  %call181 = call i32 @PyModule_AddIntConstant(%struct._object* %46, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.588, i32 0, i32 0), i64 73), !dbg !4892
  %tobool182 = icmp ne i32 %call181, 0, !dbg !4892
  br i1 %tobool182, label %if.then.183, label %if.end.184, !dbg !4893

if.then.183:                                      ; preds = %if.end.180
  store i32 -1, i32* %retval, !dbg !4894
  br label %return, !dbg !4894

if.end.184:                                       ; preds = %if.end.180
  %47 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4896, !tbaa !3867
  %call185 = call i32 @PyModule_AddIntConstant(%struct._object* %47, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.589, i32 0, i32 0), i64 74), !dbg !4898
  %tobool186 = icmp ne i32 %call185, 0, !dbg !4898
  br i1 %tobool186, label %if.then.187, label %if.end.188, !dbg !4899

if.then.187:                                      ; preds = %if.end.184
  store i32 -1, i32* %retval, !dbg !4900
  br label %return, !dbg !4900

if.end.188:                                       ; preds = %if.end.184
  %48 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4902, !tbaa !3867
  %call189 = call i32 @PyModule_AddIntConstant(%struct._object* %48, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.590, i32 0, i32 0), i64 75), !dbg !4904
  %tobool190 = icmp ne i32 %call189, 0, !dbg !4904
  br i1 %tobool190, label %if.then.191, label %if.end.192, !dbg !4905

if.then.191:                                      ; preds = %if.end.188
  store i32 -1, i32* %retval, !dbg !4906
  br label %return, !dbg !4906

if.end.192:                                       ; preds = %if.end.188
  %49 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4908, !tbaa !3867
  %call193 = call i32 @PyModule_AddIntConstant(%struct._object* %49, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.591, i32 0, i32 0), i64 76), !dbg !4910
  %tobool194 = icmp ne i32 %call193, 0, !dbg !4910
  br i1 %tobool194, label %if.then.195, label %if.end.196, !dbg !4911

if.then.195:                                      ; preds = %if.end.192
  store i32 -1, i32* %retval, !dbg !4912
  br label %return, !dbg !4912

if.end.196:                                       ; preds = %if.end.192
  %50 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4914, !tbaa !3867
  %call197 = call i32 @PyModule_AddIntConstant(%struct._object* %50, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.592, i32 0, i32 0), i64 77), !dbg !4916
  %tobool198 = icmp ne i32 %call197, 0, !dbg !4916
  br i1 %tobool198, label %if.then.199, label %if.end.200, !dbg !4917

if.then.199:                                      ; preds = %if.end.196
  store i32 -1, i32* %retval, !dbg !4918
  br label %return, !dbg !4918

if.end.200:                                       ; preds = %if.end.196
  %51 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4920, !tbaa !3867
  %call201 = call i32 @PyModule_AddIntConstant(%struct._object* %51, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.593, i32 0, i32 0), i64 78), !dbg !4922
  %tobool202 = icmp ne i32 %call201, 0, !dbg !4922
  br i1 %tobool202, label %if.then.203, label %if.end.204, !dbg !4923

if.then.203:                                      ; preds = %if.end.200
  store i32 -1, i32* %retval, !dbg !4924
  br label %return, !dbg !4924

if.end.204:                                       ; preds = %if.end.200
  %52 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4926, !tbaa !3867
  %call205 = call i32 @PyModule_AddIntConstant(%struct._object* %52, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.594, i32 0, i32 0), i64 1), !dbg !4928
  %tobool206 = icmp ne i32 %call205, 0, !dbg !4928
  br i1 %tobool206, label %if.then.207, label %if.end.208, !dbg !4929

if.then.207:                                      ; preds = %if.end.204
  store i32 -1, i32* %retval, !dbg !4930
  br label %return, !dbg !4930

if.end.208:                                       ; preds = %if.end.204
  %53 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4932, !tbaa !3867
  %call209 = call i32 @PyModule_AddIntConstant(%struct._object* %53, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.595, i32 0, i32 0), i64 2), !dbg !4934
  %tobool210 = icmp ne i32 %call209, 0, !dbg !4934
  br i1 %tobool210, label %if.then.211, label %if.end.212, !dbg !4935

if.then.211:                                      ; preds = %if.end.208
  store i32 -1, i32* %retval, !dbg !4936
  br label %return, !dbg !4936

if.end.212:                                       ; preds = %if.end.208
  %54 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4938, !tbaa !3867
  %call213 = call i32 @PyModule_AddIntConstant(%struct._object* %54, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.596, i32 0, i32 0), i64 4), !dbg !4940
  %tobool214 = icmp ne i32 %call213, 0, !dbg !4940
  br i1 %tobool214, label %if.then.215, label %if.end.216, !dbg !4941

if.then.215:                                      ; preds = %if.end.212
  store i32 -1, i32* %retval, !dbg !4942
  br label %return, !dbg !4942

if.end.216:                                       ; preds = %if.end.212
  %55 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4944, !tbaa !3867
  %call217 = call i32 @PyModule_AddIntConstant(%struct._object* %55, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.597, i32 0, i32 0), i64 8), !dbg !4946
  %tobool218 = icmp ne i32 %call217, 0, !dbg !4946
  br i1 %tobool218, label %if.then.219, label %if.end.220, !dbg !4947

if.then.219:                                      ; preds = %if.end.216
  store i32 -1, i32* %retval, !dbg !4948
  br label %return, !dbg !4948

if.end.220:                                       ; preds = %if.end.216
  %56 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4950, !tbaa !3867
  %call221 = call i32 @PyModule_AddIntConstant(%struct._object* %56, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.598, i32 0, i32 0), i64 16), !dbg !4952
  %tobool222 = icmp ne i32 %call221, 0, !dbg !4952
  br i1 %tobool222, label %if.then.223, label %if.end.224, !dbg !4953

if.then.223:                                      ; preds = %if.end.220
  store i32 -1, i32* %retval, !dbg !4954
  br label %return, !dbg !4954

if.end.224:                                       ; preds = %if.end.220
  %57 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4956, !tbaa !3867
  %call225 = call i32 @PyModule_AddIntConstant(%struct._object* %57, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.599, i32 0, i32 0), i64 64), !dbg !4958
  %tobool226 = icmp ne i32 %call225, 0, !dbg !4958
  br i1 %tobool226, label %if.then.227, label %if.end.228, !dbg !4959

if.then.227:                                      ; preds = %if.end.224
  store i32 -1, i32* %retval, !dbg !4960
  br label %return, !dbg !4960

if.end.228:                                       ; preds = %if.end.224
  %58 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4962, !tbaa !3867
  %call229 = call i32 @PyModule_AddIntConstant(%struct._object* %58, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.600, i32 0, i32 0), i64 128), !dbg !4964
  %tobool230 = icmp ne i32 %call229, 0, !dbg !4964
  br i1 %tobool230, label %if.then.231, label %if.end.232, !dbg !4965

if.then.231:                                      ; preds = %if.end.228
  store i32 -1, i32* %retval, !dbg !4966
  br label %return, !dbg !4966

if.end.232:                                       ; preds = %if.end.228
  %59 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4968, !tbaa !3867
  %call233 = call i32 @PyModule_AddIntConstant(%struct._object* %59, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.601, i32 0, i32 0), i64 256), !dbg !4970
  %tobool234 = icmp ne i32 %call233, 0, !dbg !4970
  br i1 %tobool234, label %if.then.235, label %if.end.236, !dbg !4971

if.then.235:                                      ; preds = %if.end.232
  store i32 -1, i32* %retval, !dbg !4972
  br label %return, !dbg !4972

if.end.236:                                       ; preds = %if.end.232
  %60 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4974, !tbaa !3867
  %call237 = call i32 @PyModule_AddIntConstant(%struct._object* %60, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.602, i32 0, i32 0), i64 1024), !dbg !4976
  %tobool238 = icmp ne i32 %call237, 0, !dbg !4976
  br i1 %tobool238, label %if.then.239, label %if.end.240, !dbg !4977

if.then.239:                                      ; preds = %if.end.236
  store i32 -1, i32* %retval, !dbg !4978
  br label %return, !dbg !4978

if.end.240:                                       ; preds = %if.end.236
  %61 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4980, !tbaa !3867
  %call241 = call i32 @PyModule_AddIntConstant(%struct._object* %61, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.603, i32 0, i32 0), i64 2048), !dbg !4982
  %tobool242 = icmp ne i32 %call241, 0, !dbg !4982
  br i1 %tobool242, label %if.then.243, label %if.end.244, !dbg !4983

if.then.243:                                      ; preds = %if.end.240
  store i32 -1, i32* %retval, !dbg !4984
  br label %return, !dbg !4984

if.end.244:                                       ; preds = %if.end.240
  %62 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4986, !tbaa !3867
  %call245 = call i32 @PyModule_AddIntConstant(%struct._object* %62, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.604, i32 0, i32 0), i64 4096), !dbg !4988
  %tobool246 = icmp ne i32 %call245, 0, !dbg !4988
  br i1 %tobool246, label %if.then.247, label %if.end.248, !dbg !4989

if.then.247:                                      ; preds = %if.end.244
  store i32 -1, i32* %retval, !dbg !4990
  br label %return, !dbg !4990

if.end.248:                                       ; preds = %if.end.244
  %63 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4992, !tbaa !3867
  %call249 = call i32 @PyModule_AddIntConstant(%struct._object* %63, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.605, i32 0, i32 0), i64 0), !dbg !4994
  %tobool250 = icmp ne i32 %call249, 0, !dbg !4994
  br i1 %tobool250, label %if.then.251, label %if.end.252, !dbg !4995

if.then.251:                                      ; preds = %if.end.248
  store i32 -1, i32* %retval, !dbg !4996
  br label %return, !dbg !4996

if.end.252:                                       ; preds = %if.end.248
  %64 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !4998, !tbaa !3867
  %call253 = call i32 @PyModule_AddIntConstant(%struct._object* %64, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.606, i32 0, i32 0), i64 2), !dbg !5000
  %tobool254 = icmp ne i32 %call253, 0, !dbg !5000
  br i1 %tobool254, label %if.then.255, label %if.end.256, !dbg !5001

if.then.255:                                      ; preds = %if.end.252
  store i32 -1, i32* %retval, !dbg !5002
  br label %return, !dbg !5002

if.end.256:                                       ; preds = %if.end.252
  %65 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5004, !tbaa !3867
  %call257 = call i32 @PyModule_AddIntConstant(%struct._object* %65, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.607, i32 0, i32 0), i64 1), !dbg !5006
  %tobool258 = icmp ne i32 %call257, 0, !dbg !5006
  br i1 %tobool258, label %if.then.259, label %if.end.260, !dbg !5007

if.then.259:                                      ; preds = %if.end.256
  store i32 -1, i32* %retval, !dbg !5008
  br label %return, !dbg !5008

if.end.260:                                       ; preds = %if.end.256
  %66 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5010, !tbaa !3867
  %call261 = call i32 @PyModule_AddIntConstant(%struct._object* %66, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.608, i32 0, i32 0), i64 5), !dbg !5012
  %tobool262 = icmp ne i32 %call261, 0, !dbg !5012
  br i1 %tobool262, label %if.then.263, label %if.end.264, !dbg !5013

if.then.263:                                      ; preds = %if.end.260
  store i32 -1, i32* %retval, !dbg !5014
  br label %return, !dbg !5014

if.end.264:                                       ; preds = %if.end.260
  %67 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5016, !tbaa !3867
  %call265 = call i32 @PyModule_AddIntConstant(%struct._object* %67, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.609, i32 0, i32 0), i64 3), !dbg !5018
  %tobool266 = icmp ne i32 %call265, 0, !dbg !5018
  br i1 %tobool266, label %if.then.267, label %if.end.268, !dbg !5019

if.then.267:                                      ; preds = %if.end.264
  store i32 -1, i32* %retval, !dbg !5020
  br label %return, !dbg !5020

if.end.268:                                       ; preds = %if.end.264
  %68 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5022, !tbaa !3867
  %call269 = call i32 @PyModule_AddIntConstant(%struct._object* %68, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.610, i32 0, i32 0), i64 4), !dbg !5024
  %tobool270 = icmp ne i32 %call269, 0, !dbg !5024
  br i1 %tobool270, label %if.then.271, label %if.end.272, !dbg !5025

if.then.271:                                      ; preds = %if.end.268
  store i32 -1, i32* %retval, !dbg !5026
  br label %return, !dbg !5026

if.end.272:                                       ; preds = %if.end.268
  %69 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5028, !tbaa !3867
  %call273 = call i32 @PyModule_AddIntConstant(%struct._object* %69, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.611, i32 0, i32 0), i64 1), !dbg !5030
  %tobool274 = icmp ne i32 %call273, 0, !dbg !5030
  br i1 %tobool274, label %if.then.275, label %if.end.276, !dbg !5031

if.then.275:                                      ; preds = %if.end.272
  store i32 -1, i32* %retval, !dbg !5032
  br label %return, !dbg !5032

if.end.276:                                       ; preds = %if.end.272
  %70 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5034, !tbaa !3867
  %call277 = call i32 @PyModule_AddIntConstant(%struct._object* %70, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.612, i32 0, i32 0), i64 2), !dbg !5036
  %tobool278 = icmp ne i32 %call277, 0, !dbg !5036
  br i1 %tobool278, label %if.then.279, label %if.end.280, !dbg !5037

if.then.279:                                      ; preds = %if.end.276
  store i32 -1, i32* %retval, !dbg !5038
  br label %return, !dbg !5038

if.end.280:                                       ; preds = %if.end.276
  %71 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5040, !tbaa !3867
  %call281 = call i32 @PyModule_AddIntConstant(%struct._object* %71, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.613, i32 0, i32 0), i64 0), !dbg !5042
  %tobool282 = icmp ne i32 %call281, 0, !dbg !5042
  br i1 %tobool282, label %if.then.283, label %if.end.284, !dbg !5043

if.then.283:                                      ; preds = %if.end.280
  store i32 -1, i32* %retval, !dbg !5044
  br label %return, !dbg !5044

if.end.284:                                       ; preds = %if.end.280
  %72 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5046, !tbaa !3867
  %call285 = call i32 @PyModule_AddIntConstant(%struct._object* %72, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.614, i32 0, i32 0), i64 4), !dbg !5048
  %tobool286 = icmp ne i32 %call285, 0, !dbg !5048
  br i1 %tobool286, label %if.then.287, label %if.end.288, !dbg !5049

if.then.287:                                      ; preds = %if.end.284
  store i32 -1, i32* %retval, !dbg !5050
  br label %return, !dbg !5050

if.end.288:                                       ; preds = %if.end.284
  %73 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5052, !tbaa !3867
  %call289 = call i32 @PyModule_AddIntConstant(%struct._object* %73, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.615, i32 0, i32 0), i64 16777216), !dbg !5054
  %tobool290 = icmp ne i32 %call289, 0, !dbg !5054
  br i1 %tobool290, label %if.then.291, label %if.end.292, !dbg !5055

if.then.291:                                      ; preds = %if.end.288
  store i32 -1, i32* %retval, !dbg !5056
  br label %return, !dbg !5056

if.end.292:                                       ; preds = %if.end.288
  %74 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5058, !tbaa !3867
  %call293 = call i32 @PyModule_AddIntConstant(%struct._object* %74, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.616, i32 0, i32 0), i64 2), !dbg !5060
  %tobool294 = icmp ne i32 %call293, 0, !dbg !5060
  br i1 %tobool294, label %if.then.295, label %if.end.296, !dbg !5061

if.then.295:                                      ; preds = %if.end.292
  store i32 -1, i32* %retval, !dbg !5062
  br label %return, !dbg !5062

if.end.296:                                       ; preds = %if.end.292
  %75 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5064, !tbaa !3867
  %call297 = call i32 @PyModule_AddIntConstant(%struct._object* %75, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.617, i32 0, i32 0), i64 1), !dbg !5066
  %tobool298 = icmp ne i32 %call297, 0, !dbg !5066
  br i1 %tobool298, label %if.then.299, label %if.end.300, !dbg !5067

if.then.299:                                      ; preds = %if.end.296
  store i32 -1, i32* %retval, !dbg !5068
  br label %return, !dbg !5068

if.end.300:                                       ; preds = %if.end.296
  %76 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5070, !tbaa !3867
  %call301 = call i32 @PyModule_AddIntConstant(%struct._object* %76, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.618, i32 0, i32 0), i64 3), !dbg !5072
  %tobool302 = icmp ne i32 %call301, 0, !dbg !5072
  br i1 %tobool302, label %if.then.303, label %if.end.304, !dbg !5073

if.then.303:                                      ; preds = %if.end.300
  store i32 -1, i32* %retval, !dbg !5074
  br label %return, !dbg !5074

if.end.304:                                       ; preds = %if.end.300
  %77 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5076, !tbaa !3867
  %call305 = call i32 @PyModule_AddIntConstant(%struct._object* %77, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.619, i32 0, i32 0), i64 4), !dbg !5078
  %tobool306 = icmp ne i32 %call305, 0, !dbg !5078
  br i1 %tobool306, label %if.then.307, label %if.end.308, !dbg !5079

if.then.307:                                      ; preds = %if.end.304
  store i32 -1, i32* %retval, !dbg !5080
  br label %return, !dbg !5080

if.end.308:                                       ; preds = %if.end.304
  %78 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5082, !tbaa !3867
  %call309 = call i32 @PyModule_AddIntConstant(%struct._object* %78, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.620, i32 0, i32 0), i64 6), !dbg !5084
  %tobool310 = icmp ne i32 %call309, 0, !dbg !5084
  br i1 %tobool310, label %if.then.311, label %if.end.312, !dbg !5085

if.then.311:                                      ; preds = %if.end.308
  store i32 -1, i32* %retval, !dbg !5086
  br label %return, !dbg !5086

if.end.312:                                       ; preds = %if.end.308
  %79 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5088, !tbaa !3867
  %call313 = call i32 @PyModule_AddIntConstant(%struct._object* %79, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.621, i32 0, i32 0), i64 1), !dbg !5090
  %tobool314 = icmp ne i32 %call313, 0, !dbg !5090
  br i1 %tobool314, label %if.then.315, label %if.end.316, !dbg !5091

if.then.315:                                      ; preds = %if.end.312
  store i32 -1, i32* %retval, !dbg !5092
  br label %return, !dbg !5092

if.end.316:                                       ; preds = %if.end.312
  %80 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5094, !tbaa !3867
  %call317 = call i32 @PyModule_AddIntConstant(%struct._object* %80, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.622, i32 0, i32 0), i64 2), !dbg !5096
  %tobool318 = icmp ne i32 %call317, 0, !dbg !5096
  br i1 %tobool318, label %if.then.319, label %if.end.320, !dbg !5097

if.then.319:                                      ; preds = %if.end.316
  store i32 -1, i32* %retval, !dbg !5098
  br label %return, !dbg !5098

if.end.320:                                       ; preds = %if.end.316
  %81 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5100, !tbaa !3867
  %call321 = call i32 @PyModule_AddIntConstant(%struct._object* %81, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.623, i32 0, i32 0), i64 0), !dbg !5102
  %tobool322 = icmp ne i32 %call321, 0, !dbg !5102
  br i1 %tobool322, label %if.then.323, label %if.end.324, !dbg !5103

if.then.323:                                      ; preds = %if.end.320
  store i32 -1, i32* %retval, !dbg !5104
  br label %return, !dbg !5104

if.end.324:                                       ; preds = %if.end.320
  %82 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5106, !tbaa !3867
  %call325 = call i32 @PyModule_AddIntConstant(%struct._object* %82, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.624, i32 0, i32 0), i64 3), !dbg !5108
  %tobool326 = icmp ne i32 %call325, 0, !dbg !5108
  br i1 %tobool326, label %if.then.327, label %if.end.328, !dbg !5109

if.then.327:                                      ; preds = %if.end.324
  store i32 -1, i32* %retval, !dbg !5110
  br label %return, !dbg !5110

if.end.328:                                       ; preds = %if.end.324
  %83 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5112, !tbaa !3867
  %call329 = call i32 @PyModule_AddIntConstant(%struct._object* %83, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.625, i32 0, i32 0), i64 0), !dbg !5114
  %tobool330 = icmp ne i32 %call329, 0, !dbg !5114
  br i1 %tobool330, label %if.then.331, label %if.end.332, !dbg !5115

if.then.331:                                      ; preds = %if.end.328
  store i32 -1, i32* %retval, !dbg !5116
  br label %return, !dbg !5116

if.end.332:                                       ; preds = %if.end.328
  %84 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5118, !tbaa !3867
  %call333 = call i32 @PyModule_AddIntConstant(%struct._object* %84, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.626, i32 0, i32 0), i64 1), !dbg !5120
  %tobool334 = icmp ne i32 %call333, 0, !dbg !5120
  br i1 %tobool334, label %if.then.335, label %if.end.336, !dbg !5121

if.then.335:                                      ; preds = %if.end.332
  store i32 -1, i32* %retval, !dbg !5122
  br label %return, !dbg !5122

if.end.336:                                       ; preds = %if.end.332
  %85 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5124, !tbaa !3867
  %call337 = call i32 @PyModule_AddIntConstant(%struct._object* %85, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.627, i32 0, i32 0), i64 2), !dbg !5126
  %tobool338 = icmp ne i32 %call337, 0, !dbg !5126
  br i1 %tobool338, label %if.then.339, label %if.end.340, !dbg !5127

if.then.339:                                      ; preds = %if.end.336
  store i32 -1, i32* %retval, !dbg !5128
  br label %return, !dbg !5128

if.end.340:                                       ; preds = %if.end.336
  %86 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5130, !tbaa !3867
  %call341 = call i32 @PyModule_AddIntConstant(%struct._object* %86, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.628, i32 0, i32 0), i64 3), !dbg !5132
  %tobool342 = icmp ne i32 %call341, 0, !dbg !5132
  br i1 %tobool342, label %if.then.343, label %if.end.344, !dbg !5133

if.then.343:                                      ; preds = %if.end.340
  store i32 -1, i32* %retval, !dbg !5134
  br label %return, !dbg !5134

if.end.344:                                       ; preds = %if.end.340
  %87 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5136, !tbaa !3867
  %call345 = call i32 @PyModule_AddIntConstant(%struct._object* %87, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.629, i32 0, i32 0), i64 5), !dbg !5138
  %tobool346 = icmp ne i32 %call345, 0, !dbg !5138
  br i1 %tobool346, label %if.then.347, label %if.end.348, !dbg !5139

if.then.347:                                      ; preds = %if.end.344
  store i32 -1, i32* %retval, !dbg !5140
  br label %return, !dbg !5140

if.end.348:                                       ; preds = %if.end.344
  %88 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5142, !tbaa !3867
  %call349 = call i32 @PyModule_AddIntConstant(%struct._object* %88, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.630, i32 0, i32 0), i64 1073741824), !dbg !5144
  %tobool350 = icmp ne i32 %call349, 0, !dbg !5144
  br i1 %tobool350, label %if.then.351, label %if.end.352, !dbg !5145

if.then.351:                                      ; preds = %if.end.348
  store i32 -1, i32* %retval, !dbg !5146
  br label %return, !dbg !5146

if.end.352:                                       ; preds = %if.end.348
  %89 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5148, !tbaa !3867
  %call353 = call i32 @PyModule_AddIntConstant(%struct._object* %89, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.631, i32 0, i32 0), i64 1), !dbg !5150
  %tobool354 = icmp ne i32 %call353, 0, !dbg !5150
  br i1 %tobool354, label %if.then.355, label %if.end.356, !dbg !5151

if.then.355:                                      ; preds = %if.end.352
  store i32 -1, i32* %retval, !dbg !5152
  br label %return, !dbg !5152

if.end.356:                                       ; preds = %if.end.352
  %90 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5154, !tbaa !3867
  %call357 = call i32 @PyModule_AddIntConstant(%struct._object* %90, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.632, i32 0, i32 0), i64 2), !dbg !5156
  %tobool358 = icmp ne i32 %call357, 0, !dbg !5156
  br i1 %tobool358, label %if.then.359, label %if.end.360, !dbg !5157

if.then.359:                                      ; preds = %if.end.356
  store i32 -1, i32* %retval, !dbg !5158
  br label %return, !dbg !5158

if.end.360:                                       ; preds = %if.end.356
  %91 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5160, !tbaa !3867
  %call361 = call i32 @PyModule_AddIntConstant(%struct._object* %91, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.633, i32 0, i32 0), i64 65536), !dbg !5162
  %tobool362 = icmp ne i32 %call361, 0, !dbg !5162
  br i1 %tobool362, label %if.then.363, label %if.end.364, !dbg !5163

if.then.363:                                      ; preds = %if.end.360
  store i32 -1, i32* %retval, !dbg !5164
  br label %return, !dbg !5164

if.end.364:                                       ; preds = %if.end.360
  %92 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5166, !tbaa !3867
  %call365 = call i32 @PyModule_AddIntConstant(%struct._object* %92, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.634, i32 0, i32 0), i64 1), !dbg !5168
  %tobool366 = icmp ne i32 %call365, 0, !dbg !5168
  br i1 %tobool366, label %if.then.367, label %if.end.368, !dbg !5169

if.then.367:                                      ; preds = %if.end.364
  store i32 -1, i32* %retval, !dbg !5170
  br label %return, !dbg !5170

if.end.368:                                       ; preds = %if.end.364
  %93 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5172, !tbaa !3867
  %call369 = call i32 @PyModule_AddIntConstant(%struct._object* %93, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.635, i32 0, i32 0), i64 2), !dbg !5174
  %tobool370 = icmp ne i32 %call369, 0, !dbg !5174
  br i1 %tobool370, label %if.then.371, label %if.end.372, !dbg !5175

if.then.371:                                      ; preds = %if.end.368
  store i32 -1, i32* %retval, !dbg !5176
  br label %return, !dbg !5176

if.end.372:                                       ; preds = %if.end.368
  %94 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5178, !tbaa !3867
  %call373 = call i32 @PyModule_AddIntConstant(%struct._object* %94, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.636, i32 0, i32 0), i64 256), !dbg !5180
  %tobool374 = icmp ne i32 %call373, 0, !dbg !5180
  br i1 %tobool374, label %if.then.375, label %if.end.376, !dbg !5181

if.then.375:                                      ; preds = %if.end.372
  store i32 -1, i32* %retval, !dbg !5182
  br label %return, !dbg !5182

if.end.376:                                       ; preds = %if.end.372
  %95 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5184, !tbaa !3867
  %call377 = call i32 @PyModule_AddIntConstant(%struct._object* %95, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.637, i32 0, i32 0), i64 0), !dbg !5186
  %tobool378 = icmp ne i32 %call377, 0, !dbg !5186
  br i1 %tobool378, label %if.then.379, label %if.end.380, !dbg !5187

if.then.379:                                      ; preds = %if.end.376
  store i32 -1, i32* %retval, !dbg !5188
  br label %return, !dbg !5188

if.end.380:                                       ; preds = %if.end.376
  %96 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5190, !tbaa !3867
  %call381 = call i32 @PyModule_AddIntConstant(%struct._object* %96, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.638, i32 0, i32 0), i64 4096), !dbg !5192
  %tobool382 = icmp ne i32 %call381, 0, !dbg !5192
  br i1 %tobool382, label %if.then.383, label %if.end.384, !dbg !5193

if.then.383:                                      ; preds = %if.end.380
  store i32 -1, i32* %retval, !dbg !5194
  br label %return, !dbg !5194

if.end.384:                                       ; preds = %if.end.380
  %97 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5196, !tbaa !3867
  %call385 = call i32 @PyModule_AddIntConstant(%struct._object* %97, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.639, i32 0, i32 0), i64 4), !dbg !5198
  %tobool386 = icmp ne i32 %call385, 0, !dbg !5198
  br i1 %tobool386, label %if.then.387, label %if.end.388, !dbg !5199

if.then.387:                                      ; preds = %if.end.384
  store i32 -1, i32* %retval, !dbg !5200
  br label %return, !dbg !5200

if.end.388:                                       ; preds = %if.end.384
  %98 = load %struct._object*, %struct._object** %m.addr, align 8, !dbg !5202, !tbaa !3867
  %call389 = call i32 @PyModule_AddIntConstant(%struct._object* %98, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.640, i32 0, i32 0), i64 8), !dbg !5204
  %tobool390 = icmp ne i32 %call389, 0, !dbg !5204
  br i1 %tobool390, label %if.then.391, label %if.end.392, !dbg !5205

if.then.391:                                      ; preds = %if.end.388
  store i32 -1, i32* %retval, !dbg !5206
  br label %return, !dbg !5206

if.end.392:                                       ; preds = %if.end.388
  store i32 0, i32* %retval, !dbg !5208
  br label %return, !dbg !5208

return:                                           ; preds = %if.end.392, %if.then.391, %if.then.387, %if.then.383, %if.then.379, %if.then.375, %if.then.371, %if.then.367, %if.then.363, %if.then.359, %if.then.355, %if.then.351, %if.then.347, %if.then.343, %if.then.339, %if.then.335, %if.then.331, %if.then.327, %if.then.323, %if.then.319, %if.then.315, %if.then.311, %if.then.307, %if.then.303, %if.then.299, %if.then.295, %if.then.291, %if.then.287, %if.then.283, %if.then.279, %if.then.275, %if.then.271, %if.then.267, %if.then.263, %if.then.259, %if.then.255, %if.then.251, %if.then.247, %if.then.243, %if.then.239, %if.then.235, %if.then.231, %if.then.227, %if.then.223, %if.then.219, %if.then.215, %if.then.211, %if.then.207, %if.then.203, %if.then.199, %if.then.195, %if.then.191, %if.then.187, %if.then.183, %if.then.179, %if.then.175, %if.then.171, %if.then.167, %if.then.163, %if.then.159, %if.then.155, %if.then.151, %if.then.147, %if.then.143, %if.then.139, %if.then.135, %if.then.131, %if.then.127, %if.then.123, %if.then.119, %if.then.115, %if.then.111, %if.then.107, %if.then.103, %if.then.99, %if.then.95, %if.then.91, %if.then.87, %if.then.83, %if.then.79, %if.then.75, %if.then.71, %if.then.67, %if.then.63, %if.then.59, %if.then.55, %if.then.51, %if.then.47, %if.then.43, %if.then.39, %if.then.35, %if.then.31, %if.then.27, %if.then.23, %if.then.19, %if.then.15, %if.then.11, %if.then.7, %if.then.3, %if.then
  %99 = load i32, i32* %retval, !dbg !5209
  ret i32 %99, !dbg !5209
}

; Function Attrs: nounwind uwtable
define internal i32 @setup_confname_tables(%struct._object* %module) #0 {
entry:
  %retval = alloca i32, align 4
  %module.addr = alloca %struct._object*, align 8
  store %struct._object* %module, %struct._object** %module.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %module.addr, metadata !3136, metadata !3844), !dbg !5210
  %0 = load %struct._object*, %struct._object** %module.addr, align 8, !dbg !5211, !tbaa !3867
  %call = call i32 @setup_confname_table(%struct.constdef* getelementptr inbounds ([20 x %struct.constdef], [20 x %struct.constdef]* @posix_constants_pathconf, i32 0, i32 0), i64 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.641, i32 0, i32 0), %struct._object* %0), !dbg !5213
  %tobool = icmp ne i32 %call, 0, !dbg !5213
  br i1 %tobool, label %if.then, label %if.end, !dbg !5214

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, !dbg !5215
  br label %return, !dbg !5215

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %module.addr, align 8, !dbg !5216, !tbaa !3867
  %call1 = call i32 @setup_confname_table(%struct.constdef* getelementptr inbounds ([27 x %struct.constdef], [27 x %struct.constdef]* @posix_constants_confstr, i32 0, i32 0), i64 27, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.642, i32 0, i32 0), %struct._object* %1), !dbg !5218
  %tobool2 = icmp ne i32 %call1, 0, !dbg !5218
  br i1 %tobool2, label %if.then.3, label %if.end.4, !dbg !5219

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval, !dbg !5220
  br label %return, !dbg !5220

if.end.4:                                         ; preds = %if.end
  %2 = load %struct._object*, %struct._object** %module.addr, align 8, !dbg !5221, !tbaa !3867
  %call5 = call i32 @setup_confname_table(%struct.constdef* getelementptr inbounds ([134 x %struct.constdef], [134 x %struct.constdef]* @posix_constants_sysconf, i32 0, i32 0), i64 134, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.643, i32 0, i32 0), %struct._object* %2), !dbg !5223
  %tobool6 = icmp ne i32 %call5, 0, !dbg !5223
  br i1 %tobool6, label %if.then.7, label %if.end.8, !dbg !5224

if.then.7:                                        ; preds = %if.end.4
  store i32 -1, i32* %retval, !dbg !5225
  br label %return, !dbg !5225

if.end.8:                                         ; preds = %if.end.4
  store i32 0, i32* %retval, !dbg !5226
  br label %return, !dbg !5226

return:                                           ; preds = %if.end.8, %if.then.7, %if.then.3, %if.then
  %3 = load i32, i32* %retval, !dbg !5227
  ret i32 %3, !dbg !5227
}

declare %struct._object* @PyDict_New() #2

declare i32 @PyStructSequence_InitType2(%struct._typeobject*, %struct.PyStructSequence_Desc*) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @statresult_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct.PyTupleObject*, align 8
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._typeobject** %type.addr, metadata !3179, metadata !3844), !dbg !5228
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !3180, metadata !3844), !dbg !5229
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwds.addr, metadata !3181, metadata !3844), !dbg !5230
  %0 = bitcast %struct.PyTupleObject** %result to i8*, !dbg !5231
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !5231
  call void @llvm.dbg.declare(metadata %struct.PyTupleObject** %result, metadata !3182, metadata !3844), !dbg !5232
  %1 = bitcast i32* %i to i8*, !dbg !5233
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !5233
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3183, metadata !3844), !dbg !5234
  %2 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** @structseq_new, align 8, !dbg !5235, !tbaa !3867
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8, !dbg !5236, !tbaa !3867
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5237, !tbaa !3867
  %5 = load %struct._object*, %struct._object** %kwds.addr, align 8, !dbg !5238, !tbaa !3867
  %call = call %struct._object* %2(%struct._typeobject* %3, %struct._object* %4, %struct._object* %5), !dbg !5235
  %6 = bitcast %struct._object* %call to %struct.PyTupleObject*, !dbg !5239
  store %struct.PyTupleObject* %6, %struct.PyTupleObject** %result, align 8, !dbg !5240, !tbaa !3867
  %7 = load %struct.PyTupleObject*, %struct.PyTupleObject** %result, align 8, !dbg !5241, !tbaa !3867
  %tobool = icmp ne %struct.PyTupleObject* %7, null, !dbg !5241
  br i1 %tobool, label %if.end, label %if.then, !dbg !5243

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5244
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5244

if.end:                                           ; preds = %entry
  store i32 7, i32* %i, align 4, !dbg !5245, !tbaa !3840
  br label %for.cond, !dbg !5246

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4, !dbg !5247, !tbaa !3840
  %cmp = icmp sle i32 %8, 9, !dbg !5250
  br i1 %cmp, label %for.body, label %for.end, !dbg !5251

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4, !dbg !5252, !tbaa !3840
  %add = add i32 %9, 3, !dbg !5253
  %idxprom = sext i32 %add to i64, !dbg !5254
  %10 = load %struct.PyTupleObject*, %struct.PyTupleObject** %result, align 8, !dbg !5254, !tbaa !3867
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %10, i32 0, i32 1, !dbg !5255
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %idxprom, !dbg !5254
  %11 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !5254, !tbaa !3867
  %cmp1 = icmp eq %struct._object* %11, @_Py_NoneStruct, !dbg !5256
  br i1 %cmp1, label %if.then.2, label %if.end.17, !dbg !5257

if.then.2:                                        ; preds = %for.body
  br label %do.body, !dbg !5258

do.body:                                          ; preds = %if.then.2
  %12 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5259
  call void @llvm.lifetime.start(i64 8, i8* %12) #3, !dbg !5259
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !3184, metadata !3844), !dbg !5261
  store %struct._object* @_Py_NoneStruct, %struct._object** %_py_decref_tmp, align 8, !dbg !5261, !tbaa !3867
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5262, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0, !dbg !5264
  %14 = load i64, i64* %ob_refcnt, align 8, !dbg !5265, !tbaa !3977
  %dec = add i64 %14, -1, !dbg !5265
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5265, !tbaa !3977
  %cmp3 = icmp ne i64 %dec, 0, !dbg !5266
  br i1 %cmp3, label %if.then.4, label %if.else, !dbg !5267

if.then.4:                                        ; preds = %do.body
  br label %if.end.5, !dbg !5268

if.else:                                          ; preds = %do.body
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5270, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1, !dbg !5272
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5272, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4, !dbg !5273
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5273, !tbaa !3986
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5274, !tbaa !3867
  call void %17(%struct._object* %18), !dbg !5275
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  %19 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5276
  call void @llvm.lifetime.end(i64 8, i8* %19) #3, !dbg !5276
  br label %do.cond, !dbg !5278

do.cond:                                          ; preds = %if.end.5
  br label %do.end, !dbg !5279

do.end:                                           ; preds = %do.cond
  %20 = load i32, i32* %i, align 4, !dbg !5281, !tbaa !3840
  %idxprom6 = sext i32 %20 to i64, !dbg !5282
  %21 = load %struct.PyTupleObject*, %struct.PyTupleObject** %result, align 8, !dbg !5282, !tbaa !3867
  %ob_item7 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %21, i32 0, i32 1, !dbg !5283
  %arrayidx8 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item7, i32 0, i64 %idxprom6, !dbg !5282
  %22 = load %struct._object*, %struct._object** %arrayidx8, align 8, !dbg !5282, !tbaa !3867
  %ob_refcnt9 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0, !dbg !5284
  %23 = load i64, i64* %ob_refcnt9, align 8, !dbg !5285, !tbaa !3977
  %inc = add i64 %23, 1, !dbg !5285
  store i64 %inc, i64* %ob_refcnt9, align 8, !dbg !5285, !tbaa !3977
  %24 = load i32, i32* %i, align 4, !dbg !5286, !tbaa !3840
  %idxprom10 = sext i32 %24 to i64, !dbg !5287
  %25 = load %struct.PyTupleObject*, %struct.PyTupleObject** %result, align 8, !dbg !5287, !tbaa !3867
  %ob_item11 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %25, i32 0, i32 1, !dbg !5288
  %arrayidx12 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item11, i32 0, i64 %idxprom10, !dbg !5287
  %26 = load %struct._object*, %struct._object** %arrayidx12, align 8, !dbg !5287, !tbaa !3867
  %27 = load i32, i32* %i, align 4, !dbg !5289, !tbaa !3840
  %add13 = add i32 %27, 3, !dbg !5290
  %idxprom14 = sext i32 %add13 to i64, !dbg !5291
  %28 = load %struct.PyTupleObject*, %struct.PyTupleObject** %result, align 8, !dbg !5291, !tbaa !3867
  %ob_item15 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %28, i32 0, i32 1, !dbg !5292
  %arrayidx16 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item15, i32 0, i64 %idxprom14, !dbg !5291
  store %struct._object* %26, %struct._object** %arrayidx16, align 8, !dbg !5293, !tbaa !3867
  br label %if.end.17, !dbg !5294

if.end.17:                                        ; preds = %do.end, %for.body
  br label %for.inc, !dbg !5295

for.inc:                                          ; preds = %if.end.17
  %29 = load i32, i32* %i, align 4, !dbg !5296, !tbaa !3840
  %inc18 = add i32 %29, 1, !dbg !5296
  store i32 %inc18, i32* %i, align 4, !dbg !5296, !tbaa !3840
  br label %for.cond, !dbg !5297

for.end:                                          ; preds = %for.cond
  %30 = load %struct.PyTupleObject*, %struct.PyTupleObject** %result, align 8, !dbg !5298, !tbaa !3867
  %31 = bitcast %struct.PyTupleObject* %30 to %struct._object*, !dbg !5299
  store %struct._object* %31, %struct._object** %retval, !dbg !5300
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5300

cleanup:                                          ; preds = %for.end, %if.then
  %32 = bitcast i32* %i to i8*, !dbg !5301
  call void @llvm.lifetime.end(i64 4, i8* %32) #3, !dbg !5301
  %33 = bitcast %struct.PyTupleObject** %result to i8*, !dbg !5301
  call void @llvm.lifetime.end(i64 8, i8* %33) #3, !dbg !5301
  %34 = load %struct._object*, %struct._object** %retval, !dbg !5301
  ret %struct._object* %34, !dbg !5301
}

; Function Attrs: nounwind
declare i64 @sysconf(i32) #4

; Function Attrs: nounwind uwtable
define internal %struct._object* @sched_param_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %priority = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._typeobject** %type.addr, metadata !3193, metadata !3844), !dbg !5302
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !3194, metadata !3844), !dbg !5303
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !3195, metadata !3844), !dbg !5304
  %0 = bitcast %struct._object** %res to i8*, !dbg !5305
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !5305
  call void @llvm.dbg.declare(metadata %struct._object** %res, metadata !3196, metadata !3844), !dbg !5306
  %1 = bitcast %struct._object** %priority to i8*, !dbg !5305
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !5305
  call void @llvm.dbg.declare(metadata %struct._object** %priority, metadata !3197, metadata !3844), !dbg !5307
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5308, !tbaa !3867
  %3 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !5310, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %2, %struct._object* %3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.695, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @sched_param_new.kwlist, i32 0, i32 0), %struct._object** %priority), !dbg !5311
  %tobool = icmp ne i32 %call, 0, !dbg !5311
  br i1 %tobool, label %if.end, label %if.then, !dbg !5312

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5313
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5313

if.end:                                           ; preds = %entry
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8, !dbg !5314, !tbaa !3867
  %call1 = call %struct._object* @PyStructSequence_New(%struct._typeobject* %4), !dbg !5315
  store %struct._object* %call1, %struct._object** %res, align 8, !dbg !5316, !tbaa !3867
  %5 = load %struct._object*, %struct._object** %res, align 8, !dbg !5317, !tbaa !3867
  %tobool2 = icmp ne %struct._object* %5, null, !dbg !5317
  br i1 %tobool2, label %if.end.4, label %if.then.3, !dbg !5319

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !5320
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5320

if.end.4:                                         ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %priority, align 8, !dbg !5321, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0, !dbg !5322
  %7 = load i64, i64* %ob_refcnt, align 8, !dbg !5323, !tbaa !3977
  %inc = add i64 %7, 1, !dbg !5323
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !5323, !tbaa !3977
  %8 = load %struct._object*, %struct._object** %priority, align 8, !dbg !5324, !tbaa !3867
  %9 = load %struct._object*, %struct._object** %res, align 8, !dbg !5325, !tbaa !3867
  %10 = bitcast %struct._object* %9 to %struct.PyTupleObject*, !dbg !5326
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %10, i32 0, i32 1, !dbg !5327
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !5328
  store %struct._object* %8, %struct._object** %arrayidx, align 8, !dbg !5329, !tbaa !3867
  %11 = load %struct._object*, %struct._object** %res, align 8, !dbg !5330, !tbaa !3867
  store %struct._object* %11, %struct._object** %retval, !dbg !5331
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5331

cleanup:                                          ; preds = %if.end.4, %if.then.3, %if.then
  %12 = bitcast %struct._object** %priority to i8*, !dbg !5332
  call void @llvm.lifetime.end(i64 8, i8* %12) #3, !dbg !5332
  %13 = bitcast %struct._object** %res to i8*, !dbg !5332
  call void @llvm.lifetime.end(i64 8, i8* %13) #3, !dbg !5332
  %14 = load %struct._object*, %struct._object** %retval, !dbg !5332
  ret %struct._object* %14, !dbg !5332
}

; Function Attrs: nounwind uwtable
define internal i32 @fd_specified(i8* %function_name, i32 %fd) #0 {
entry:
  %retval = alloca i32, align 4
  %function_name.addr = alloca i8*, align 8
  %fd.addr = alloca i32, align 4
  store i8* %function_name, i8** %function_name.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %function_name.addr, metadata !3202, metadata !3844), !dbg !5333
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !3203, metadata !3844), !dbg !5334
  %0 = load i32, i32* %fd.addr, align 4, !dbg !5335, !tbaa !3840
  %cmp = icmp eq i32 %0, -1, !dbg !5337
  br i1 %cmp, label %if.then, label %if.end, !dbg !5338

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !5339
  br label %return, !dbg !5339

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %function_name.addr, align 8, !dbg !5340, !tbaa !3867
  call void @argument_unavailable_error(i8* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.289, i32 0, i32 0)), !dbg !5341
  store i32 1, i32* %retval, !dbg !5342
  br label %return, !dbg !5342

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval, !dbg !5343
  ret i32 %2, !dbg !5343
}

; Function Attrs: nounwind uwtable
define internal i32 @follow_symlinks_specified(i8* %function_name, i32 %follow_symlinks) #0 {
entry:
  %retval = alloca i32, align 4
  %function_name.addr = alloca i8*, align 8
  %follow_symlinks.addr = alloca i32, align 4
  store i8* %function_name, i8** %function_name.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %function_name.addr, metadata !3212, metadata !3844), !dbg !5344
  store i32 %follow_symlinks, i32* %follow_symlinks.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks.addr, metadata !3213, metadata !3844), !dbg !5345
  %0 = load i32, i32* %follow_symlinks.addr, align 4, !dbg !5346, !tbaa !3840
  %tobool = icmp ne i32 %0, 0, !dbg !5346
  br i1 %tobool, label %if.then, label %if.end, !dbg !5348

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !5349
  br label %return, !dbg !5349

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %function_name.addr, align 8, !dbg !5350, !tbaa !3867
  call void @argument_unavailable_error(i8* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.171, i32 0, i32 0)), !dbg !5351
  store i32 1, i32* %retval, !dbg !5352
  br label %return, !dbg !5352

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval, !dbg !5353
  ret i32 %2, !dbg !5353
}

; Function Attrs: nounwind uwtable
define internal i32 @dir_fd_and_follow_symlinks_invalid(i8* %function_name, i32 %dir_fd, i32 %follow_symlinks) #0 {
entry:
  %retval = alloca i32, align 4
  %function_name.addr = alloca i8*, align 8
  %dir_fd.addr = alloca i32, align 4
  %follow_symlinks.addr = alloca i32, align 4
  store i8* %function_name, i8** %function_name.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %function_name.addr, metadata !3216, metadata !3844), !dbg !5354
  store i32 %dir_fd, i32* %dir_fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %dir_fd.addr, metadata !3217, metadata !3844), !dbg !5355
  store i32 %follow_symlinks, i32* %follow_symlinks.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks.addr, metadata !3218, metadata !3844), !dbg !5356
  %0 = load i32, i32* %dir_fd.addr, align 4, !dbg !5357, !tbaa !3840
  %cmp = icmp ne i32 %0, -100, !dbg !5359
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5360

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %follow_symlinks.addr, align 4, !dbg !5361, !tbaa !3840
  %tobool = icmp ne i32 %1, 0, !dbg !5361
  br i1 %tobool, label %if.end, label %if.then, !dbg !5363

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !5364, !tbaa !3867
  %3 = load i8*, i8** %function_name.addr, align 8, !dbg !5366, !tbaa !3867
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %2, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.721, i32 0, i32 0), i8* %3), !dbg !5367
  store i32 1, i32* %retval, !dbg !5368
  br label %return, !dbg !5368

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, !dbg !5369
  br label %return, !dbg !5369

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, !dbg !5370
  ret i32 %4, !dbg !5370
}

; Function Attrs: nounwind uwtable
define internal i32 @dir_fd_converter(%struct._object* %o, i8* %p) #0 {
entry:
  %retval = alloca i32, align 4
  %o.addr = alloca %struct._object*, align 8
  %p.addr = alloca i8*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !3221, metadata !3844), !dbg !5371
  store i8* %p, i8** %p.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !3222, metadata !3844), !dbg !5372
  %0 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5373, !tbaa !3867
  %cmp = icmp eq %struct._object* %0, @_Py_NoneStruct, !dbg !5375
  br i1 %cmp, label %if.then, label %if.end, !dbg !5376

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %p.addr, align 8, !dbg !5377, !tbaa !3867
  %2 = bitcast i8* %1 to i32*, !dbg !5379
  store i32 -100, i32* %2, align 4, !dbg !5380, !tbaa !3840
  store i32 1, i32* %retval, !dbg !5381
  br label %return, !dbg !5381

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5382, !tbaa !3867
  %4 = load i8*, i8** %p.addr, align 8, !dbg !5383, !tbaa !3867
  %5 = bitcast i8* %4 to i32*, !dbg !5384
  %call = call i32 @_fd_converter(%struct._object* %3, i32* %5, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.722, i32 0, i32 0)), !dbg !5385
  store i32 %call, i32* %retval, !dbg !5386
  br label %return, !dbg !5386

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, !dbg !5387
  ret i32 %6, !dbg !5387
}

; Function Attrs: nounwind uwtable
define internal i32 @dir_fd_unavailable(%struct._object* %o, i8* %p) #0 {
entry:
  %retval = alloca i32, align 4
  %o.addr = alloca %struct._object*, align 8
  %p.addr = alloca i8*, align 8
  %dir_fd = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !3225, metadata !3844), !dbg !5388
  store i8* %p, i8** %p.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !3226, metadata !3844), !dbg !5389
  %0 = bitcast i32* %dir_fd to i8*, !dbg !5390
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !5390
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !3227, metadata !3844), !dbg !5391
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5392, !tbaa !3867
  %2 = bitcast i32* %dir_fd to i8*, !dbg !5394
  %call = call i32 @dir_fd_converter(%struct._object* %1, i8* %2), !dbg !5395
  %tobool = icmp ne i32 %call, 0, !dbg !5395
  br i1 %tobool, label %if.end, label %if.then, !dbg !5396

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !5397
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5397

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %dir_fd, align 4, !dbg !5398, !tbaa !3840
  %cmp = icmp ne i32 %3, -100, !dbg !5400
  br i1 %cmp, label %if.then.1, label %if.end.2, !dbg !5401

if.then.1:                                        ; preds = %if.end
  call void @argument_unavailable_error(i8* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0)), !dbg !5402
  store i32 0, i32* %retval, !dbg !5404
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5404

if.end.2:                                         ; preds = %if.end
  %4 = load i32, i32* %dir_fd, align 4, !dbg !5405, !tbaa !3840
  %5 = load i8*, i8** %p.addr, align 8, !dbg !5406, !tbaa !3867
  %6 = bitcast i8* %5 to i32*, !dbg !5407
  store i32 %4, i32* %6, align 4, !dbg !5408, !tbaa !3840
  store i32 1, i32* %retval, !dbg !5409
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5409

cleanup:                                          ; preds = %if.end.2, %if.then.1, %if.then
  %7 = bitcast i32* %dir_fd to i8*, !dbg !5410
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !5410
  %8 = load i32, i32* %retval, !dbg !5410
  ret i32 %8, !dbg !5410
}

declare %struct._object* @PyList_New(i64) #2

declare %struct._object* @PyUnicode_DecodeASCII(i8*, i64, i8*) #2

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #5

declare i32 @PyList_Append(%struct._object*, %struct._object*) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @os_stat(%struct.PyModuleDef* %module, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %module.addr = alloca %struct.PyModuleDef*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %return_value = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %dir_fd = alloca i32, align 4
  %follow_symlinks = alloca i32, align 4
  store %struct.PyModuleDef* %module, %struct.PyModuleDef** %module.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.PyModuleDef** %module.addr, metadata !774, metadata !3844), !dbg !5411
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !775, metadata !3844), !dbg !5412
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !776, metadata !3844), !dbg !5413
  %0 = bitcast %struct._object** %return_value to i8*, !dbg !5414
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !5414
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !777, metadata !3844), !dbg !5415
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !5415, !tbaa !3867
  %1 = bitcast %struct.path_t* %path to i8*, !dbg !5416
  call void @llvm.lifetime.start(i64 72, i8* %1) #3, !dbg !5416
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !778, metadata !3844), !dbg !5417
  %2 = bitcast %struct.path_t* %path to i8*, !dbg !5417
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 72, i32 8, i1 false), !dbg !5417
  %3 = bitcast i8* %2 to %struct.path_t*, !dbg !5417
  %4 = getelementptr %struct.path_t, %struct.path_t* %3, i32 0, i32 0, !dbg !5417
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), i8** %4, !dbg !5417
  %5 = getelementptr %struct.path_t, %struct.path_t* %3, i32 0, i32 3, !dbg !5417
  store i32 1, i32* %5, !dbg !5417
  %6 = bitcast i32* %dir_fd to i8*, !dbg !5418
  call void @llvm.lifetime.start(i64 4, i8* %6) #3, !dbg !5418
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !779, metadata !3844), !dbg !5419
  store i32 -100, i32* %dir_fd, align 4, !dbg !5419, !tbaa !3840
  %7 = bitcast i32* %follow_symlinks to i8*, !dbg !5420
  call void @llvm.lifetime.start(i64 4, i8* %7) #3, !dbg !5420
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks, metadata !780, metadata !3844), !dbg !5421
  store i32 1, i32* %follow_symlinks, align 4, !dbg !5421, !tbaa !3840
  %8 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5422, !tbaa !3867
  %9 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !5424, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %8, %struct._object* %9, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.172, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @os_stat._keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dir_fd, i32* %follow_symlinks), !dbg !5425
  %tobool = icmp ne i32 %call, 0, !dbg !5425
  br i1 %tobool, label %if.end, label %if.then, !dbg !5426

if.then:                                          ; preds = %entry
  br label %exit, !dbg !5427

if.end:                                           ; preds = %entry
  %10 = load %struct.PyModuleDef*, %struct.PyModuleDef** %module.addr, align 8, !dbg !5428, !tbaa !3867
  %11 = load i32, i32* %dir_fd, align 4, !dbg !5429, !tbaa !3840
  %12 = load i32, i32* %follow_symlinks, align 4, !dbg !5430, !tbaa !3840
  %call1 = call %struct._object* @os_stat_impl(%struct.PyModuleDef* %10, %struct.path_t* %path, i32 %11, i32 %12), !dbg !5431
  store %struct._object* %call1, %struct._object** %return_value, align 8, !dbg !5432, !tbaa !3867
  br label %exit, !dbg !5433

exit:                                             ; preds = %if.end, %if.then
  call void @path_cleanup(%struct.path_t* %path), !dbg !5434
  %13 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !5435, !tbaa !3867
  %14 = bitcast i32* %follow_symlinks to i8*, !dbg !5436
  call void @llvm.lifetime.end(i64 4, i8* %14) #3, !dbg !5436
  %15 = bitcast i32* %dir_fd to i8*, !dbg !5436
  call void @llvm.lifetime.end(i64 4, i8* %15) #3, !dbg !5436
  %16 = bitcast %struct.path_t* %path to i8*, !dbg !5436
  call void @llvm.lifetime.end(i64 72, i8* %16) #3, !dbg !5436
  %17 = bitcast %struct._object** %return_value to i8*, !dbg !5436
  call void @llvm.lifetime.end(i64 8, i8* %17) #3, !dbg !5436
  ret %struct._object* %13, !dbg !5437
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @os_access(%struct.PyModuleDef* %module, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %module.addr = alloca %struct.PyModuleDef*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %return_value = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %mode = alloca i32, align 4
  %dir_fd = alloca i32, align 4
  %effective_ids = alloca i32, align 4
  %follow_symlinks = alloca i32, align 4
  store %struct.PyModuleDef* %module, %struct.PyModuleDef** %module.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.PyModuleDef** %module.addr, metadata !1066, metadata !3844), !dbg !5438
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1067, metadata !3844), !dbg !5439
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1068, metadata !3844), !dbg !5440
  %0 = bitcast %struct._object** %return_value to i8*, !dbg !5441
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !5441
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1069, metadata !3844), !dbg !5442
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !5442, !tbaa !3867
  %1 = bitcast %struct.path_t* %path to i8*, !dbg !5443
  call void @llvm.lifetime.start(i64 72, i8* %1) #3, !dbg !5443
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !1070, metadata !3844), !dbg !5444
  %2 = bitcast %struct.path_t* %path to i8*, !dbg !5444
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 72, i32 8, i1 false), !dbg !5444
  %3 = bitcast i8* %2 to %struct.path_t*, !dbg !5444
  %4 = getelementptr %struct.path_t, %struct.path_t* %3, i32 0, i32 0, !dbg !5444
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i32 0, i32 0), i8** %4, !dbg !5444
  %5 = getelementptr %struct.path_t, %struct.path_t* %3, i32 0, i32 3, !dbg !5444
  store i32 1, i32* %5, !dbg !5444
  %6 = bitcast i32* %mode to i8*, !dbg !5445
  call void @llvm.lifetime.start(i64 4, i8* %6) #3, !dbg !5445
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !1071, metadata !3844), !dbg !5446
  %7 = bitcast i32* %dir_fd to i8*, !dbg !5447
  call void @llvm.lifetime.start(i64 4, i8* %7) #3, !dbg !5447
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !1072, metadata !3844), !dbg !5448
  store i32 -100, i32* %dir_fd, align 4, !dbg !5448, !tbaa !3840
  %8 = bitcast i32* %effective_ids to i8*, !dbg !5449
  call void @llvm.lifetime.start(i64 4, i8* %8) #3, !dbg !5449
  call void @llvm.dbg.declare(metadata i32* %effective_ids, metadata !1073, metadata !3844), !dbg !5450
  store i32 0, i32* %effective_ids, align 4, !dbg !5450, !tbaa !3840
  %9 = bitcast i32* %follow_symlinks to i8*, !dbg !5451
  call void @llvm.lifetime.start(i64 4, i8* %9) #3, !dbg !5451
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks, metadata !1074, metadata !3844), !dbg !5452
  store i32 1, i32* %follow_symlinks, align 4, !dbg !5452, !tbaa !3840
  %10 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5453, !tbaa !3867
  %11 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !5455, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %10, %struct._object* %11, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.186, i32 0, i32 0), i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @os_access._keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32* %mode, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dir_fd, i32* %effective_ids, i32* %follow_symlinks), !dbg !5456
  %tobool = icmp ne i32 %call, 0, !dbg !5456
  br i1 %tobool, label %if.end, label %if.then, !dbg !5457

if.then:                                          ; preds = %entry
  br label %exit, !dbg !5458

if.end:                                           ; preds = %entry
  %12 = load %struct.PyModuleDef*, %struct.PyModuleDef** %module.addr, align 8, !dbg !5459, !tbaa !3867
  %13 = load i32, i32* %mode, align 4, !dbg !5460, !tbaa !3840
  %14 = load i32, i32* %dir_fd, align 4, !dbg !5461, !tbaa !3840
  %15 = load i32, i32* %effective_ids, align 4, !dbg !5462, !tbaa !3840
  %16 = load i32, i32* %follow_symlinks, align 4, !dbg !5463, !tbaa !3840
  %call1 = call %struct._object* @os_access_impl(%struct.PyModuleDef* %12, %struct.path_t* %path, i32 %13, i32 %14, i32 %15, i32 %16), !dbg !5464
  store %struct._object* %call1, %struct._object** %return_value, align 8, !dbg !5465, !tbaa !3867
  br label %exit, !dbg !5466

exit:                                             ; preds = %if.end, %if.then
  call void @path_cleanup(%struct.path_t* %path), !dbg !5467
  %17 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !5468, !tbaa !3867
  %18 = bitcast i32* %follow_symlinks to i8*, !dbg !5469
  call void @llvm.lifetime.end(i64 4, i8* %18) #3, !dbg !5469
  %19 = bitcast i32* %effective_ids to i8*, !dbg !5469
  call void @llvm.lifetime.end(i64 4, i8* %19) #3, !dbg !5469
  %20 = bitcast i32* %dir_fd to i8*, !dbg !5469
  call void @llvm.lifetime.end(i64 4, i8* %20) #3, !dbg !5469
  %21 = bitcast i32* %mode to i8*, !dbg !5469
  call void @llvm.lifetime.end(i64 4, i8* %21) #3, !dbg !5469
  %22 = bitcast %struct.path_t* %path to i8*, !dbg !5469
  call void @llvm.lifetime.end(i64 72, i8* %22) #3, !dbg !5469
  %23 = bitcast %struct._object** %return_value to i8*, !dbg !5469
  call void @llvm.lifetime.end(i64 8, i8* %23) #3, !dbg !5469
  ret %struct._object* %17, !dbg !5470
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @os_ttyname(%struct.PyModuleDef* %module, %struct._object* %args) #0 {
entry:
  %module.addr = alloca %struct.PyModuleDef*, align 8
  %args.addr = alloca %struct._object*, align 8
  %return_value = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %_return_value = alloca i8*, align 8
  store %struct.PyModuleDef* %module, %struct.PyModuleDef** %module.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.PyModuleDef** %module.addr, metadata !1096, metadata !3844), !dbg !5471
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1097, metadata !3844), !dbg !5472
  %0 = bitcast %struct._object** %return_value to i8*, !dbg !5473
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !5473
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1098, metadata !3844), !dbg !5474
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !5474, !tbaa !3867
  %1 = bitcast i32* %fd to i8*, !dbg !5475
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !5475
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !1099, metadata !3844), !dbg !5476
  %2 = bitcast i8** %_return_value to i8*, !dbg !5477
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !5477
  call void @llvm.dbg.declare(metadata i8** %_return_value, metadata !1100, metadata !3844), !dbg !5478
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5479, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.187, i32 0, i32 0), i32* %fd), !dbg !5481
  %tobool = icmp ne i32 %call, 0, !dbg !5481
  br i1 %tobool, label %if.end, label %if.then, !dbg !5482

if.then:                                          ; preds = %entry
  br label %exit, !dbg !5483

if.end:                                           ; preds = %entry
  %4 = load %struct.PyModuleDef*, %struct.PyModuleDef** %module.addr, align 8, !dbg !5484, !tbaa !3867
  %5 = load i32, i32* %fd, align 4, !dbg !5485, !tbaa !3840
  %call1 = call i8* @os_ttyname_impl(%struct.PyModuleDef* %4, i32 %5), !dbg !5486
  store i8* %call1, i8** %_return_value, align 8, !dbg !5487, !tbaa !3867
  %6 = load i8*, i8** %_return_value, align 8, !dbg !5488, !tbaa !3867
  %cmp = icmp eq i8* %6, null, !dbg !5490
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !5491

if.then.2:                                        ; preds = %if.end
  br label %exit, !dbg !5492

if.end.3:                                         ; preds = %if.end
  %7 = load i8*, i8** %_return_value, align 8, !dbg !5493, !tbaa !3867
  %call4 = call %struct._object* @PyUnicode_DecodeFSDefault(i8* %7), !dbg !5494
  store %struct._object* %call4, %struct._object** %return_value, align 8, !dbg !5495, !tbaa !3867
  br label %exit, !dbg !5496

exit:                                             ; preds = %if.end.3, %if.then.2, %if.then
  %8 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !5497, !tbaa !3867
  %9 = bitcast i8** %_return_value to i8*, !dbg !5498
  call void @llvm.lifetime.end(i64 8, i8* %9) #3, !dbg !5498
  %10 = bitcast i32* %fd to i8*, !dbg !5498
  call void @llvm.lifetime.end(i64 4, i8* %10) #3, !dbg !5498
  %11 = bitcast %struct._object** %return_value to i8*, !dbg !5498
  call void @llvm.lifetime.end(i64 8, i8* %11) #3, !dbg !5498
  ret %struct._object* %8, !dbg !5499
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_chdir(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %result = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1112, metadata !3844), !dbg !5500
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1113, metadata !3844), !dbg !5501
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1114, metadata !3844), !dbg !5502
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !5503
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !5503
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !1115, metadata !3844), !dbg !5504
  %1 = bitcast i32* %result to i8*, !dbg !5505
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !5505
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1116, metadata !3844), !dbg !5506
  %2 = bitcast %struct._object** %return_value to i8*, !dbg !5507
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !5507
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1117, metadata !3844), !dbg !5508
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !5508, !tbaa !3867
  %3 = bitcast %struct.path_t* %path to i8*, !dbg !5509
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 72, i32 8, i1 false), !dbg !5509
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !5510
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.28, i32 0, i32 0), i8** %function_name, align 8, !dbg !5511, !tbaa !5512
  %allow_fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 3, !dbg !5514
  store i32 1, i32* %allow_fd, align 4, !dbg !5515, !tbaa !5516
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5517, !tbaa !3867
  %5 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !5519, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %4, %struct._object* %5, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.188, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @posix_chdir.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path), !dbg !5520
  %tobool = icmp ne i32 %call, 0, !dbg !5520
  br i1 %tobool, label %if.end, label %if.then, !dbg !5521

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5522
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5522

if.end:                                           ; preds = %entry
  %6 = bitcast %struct._ts** %_save to i8*, !dbg !5523
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !5523
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1118, metadata !3844), !dbg !5524
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !5525
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !5526, !tbaa !3867
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !5527
  %7 = load i32, i32* %fd, align 4, !dbg !5527, !tbaa !5529
  %cmp = icmp ne i32 %7, -1, !dbg !5530
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !5531

if.then.2:                                        ; preds = %if.end
  %fd3 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !5532
  %8 = load i32, i32* %fd3, align 4, !dbg !5532, !tbaa !5529
  %call4 = call i32 @fchdir(i32 %8) #3, !dbg !5533
  store i32 %call4, i32* %result, align 4, !dbg !5534, !tbaa !3840
  br label %if.end.6, !dbg !5535

if.else:                                          ; preds = %if.end
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !5536
  %9 = load i8*, i8** %narrow, align 8, !dbg !5536, !tbaa !5537
  %call5 = call i32 @chdir(i8* %9) #3, !dbg !5538
  store i32 %call5, i32* %result, align 4, !dbg !5539, !tbaa !3840
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.2
  %10 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !5540, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %10), !dbg !5541
  %11 = bitcast %struct._ts** %_save to i8*, !dbg !5542
  call void @llvm.lifetime.end(i64 8, i8* %11) #3, !dbg !5542
  %12 = load i32, i32* %result, align 4, !dbg !5543, !tbaa !3840
  %tobool7 = icmp ne i32 %12, 0, !dbg !5543
  br i1 %tobool7, label %if.then.8, label %if.end.10, !dbg !5545

if.then.8:                                        ; preds = %if.end.6
  %call9 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !5546
  store %struct._object* %call9, %struct._object** %return_value, align 8, !dbg !5548, !tbaa !3867
  br label %exit, !dbg !5549

if.end.10:                                        ; preds = %if.end.6
  store %struct._object* @_Py_NoneStruct, %struct._object** %return_value, align 8, !dbg !5550, !tbaa !3867
  %13 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5551, !tbaa !3977
  %inc = add i64 %13, 1, !dbg !5551
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5551, !tbaa !3977
  br label %exit, !dbg !5552

exit:                                             ; preds = %if.end.10, %if.then.8
  call void @path_cleanup(%struct.path_t* %path), !dbg !5553
  %14 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !5554, !tbaa !3867
  store %struct._object* %14, %struct._object** %retval, !dbg !5555
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5555

cleanup:                                          ; preds = %exit, %if.then
  %15 = bitcast %struct._object** %return_value to i8*, !dbg !5556
  call void @llvm.lifetime.end(i64 8, i8* %15) #3, !dbg !5556
  %16 = bitcast i32* %result to i8*, !dbg !5556
  call void @llvm.lifetime.end(i64 4, i8* %16) #3, !dbg !5556
  %17 = bitcast %struct.path_t* %path to i8*, !dbg !5556
  call void @llvm.lifetime.end(i64 72, i8* %17) #3, !dbg !5556
  %18 = load %struct._object*, %struct._object** %retval, !dbg !5556
  ret %struct._object* %18, !dbg !5556
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_chmod(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %mode = alloca i32, align 4
  %dir_fd = alloca i32, align 4
  %follow_symlinks = alloca i32, align 4
  %result = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %fchmodat_nofollow_unsupported = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1122, metadata !3844), !dbg !5557
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1123, metadata !3844), !dbg !5558
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1124, metadata !3844), !dbg !5559
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !5560
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !5560
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !1125, metadata !3844), !dbg !5561
  %1 = bitcast i32* %mode to i8*, !dbg !5562
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !5562
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !1126, metadata !3844), !dbg !5563
  %2 = bitcast i32* %dir_fd to i8*, !dbg !5564
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !5564
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !1127, metadata !3844), !dbg !5565
  store i32 -100, i32* %dir_fd, align 4, !dbg !5565, !tbaa !3840
  %3 = bitcast i32* %follow_symlinks to i8*, !dbg !5566
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !5566
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks, metadata !1128, metadata !3844), !dbg !5567
  store i32 1, i32* %follow_symlinks, align 4, !dbg !5567, !tbaa !3840
  %4 = bitcast i32* %result to i8*, !dbg !5568
  call void @llvm.lifetime.start(i64 4, i8* %4) #3, !dbg !5568
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1129, metadata !3844), !dbg !5569
  %5 = bitcast %struct._object** %return_value to i8*, !dbg !5570
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !5570
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1130, metadata !3844), !dbg !5571
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !5571, !tbaa !3867
  %6 = bitcast i32* %fchmodat_nofollow_unsupported to i8*, !dbg !5572
  call void @llvm.lifetime.start(i64 4, i8* %6) #3, !dbg !5572
  call void @llvm.dbg.declare(metadata i32* %fchmodat_nofollow_unsupported, metadata !1131, metadata !3844), !dbg !5573
  store i32 0, i32* %fchmodat_nofollow_unsupported, align 4, !dbg !5573, !tbaa !3840
  %7 = bitcast %struct.path_t* %path to i8*, !dbg !5574
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 72, i32 8, i1 false), !dbg !5574
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !5575
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i8** %function_name, align 8, !dbg !5576, !tbaa !5512
  %allow_fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 3, !dbg !5577
  store i32 1, i32* %allow_fd, align 4, !dbg !5578, !tbaa !5516
  %8 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5579, !tbaa !3867
  %9 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !5581, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %8, %struct._object* %9, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.189, i32 0, i32 0), i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @posix_chmod.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32* %mode, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dir_fd, i32* %follow_symlinks), !dbg !5582
  %tobool = icmp ne i32 %call, 0, !dbg !5582
  br i1 %tobool, label %if.end, label %if.then, !dbg !5583

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5584
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5584

if.end:                                           ; preds = %entry
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !5585
  call void @llvm.lifetime.start(i64 8, i8* %10) #3, !dbg !5585
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1132, metadata !3844), !dbg !5586
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !5587
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !5588, !tbaa !3867
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !5589
  %11 = load i32, i32* %fd, align 4, !dbg !5589, !tbaa !5529
  %cmp = icmp ne i32 %11, -1, !dbg !5591
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !5592

if.then.2:                                        ; preds = %if.end
  %fd3 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !5593
  %12 = load i32, i32* %fd3, align 4, !dbg !5593, !tbaa !5529
  %13 = load i32, i32* %mode, align 4, !dbg !5594, !tbaa !3840
  %call4 = call i32 @fchmod(i32 %12, i32 %13) #3, !dbg !5595
  store i32 %call4, i32* %result, align 4, !dbg !5596, !tbaa !3840
  br label %if.end.21, !dbg !5597

if.else:                                          ; preds = %if.end
  %14 = load i32, i32* %dir_fd, align 4, !dbg !5598, !tbaa !3840
  %cmp5 = icmp ne i32 %14, -100, !dbg !5600
  br i1 %cmp5, label %if.then.7, label %lor.lhs.false, !dbg !5601

lor.lhs.false:                                    ; preds = %if.else
  %15 = load i32, i32* %follow_symlinks, align 4, !dbg !5602, !tbaa !3840
  %tobool6 = icmp ne i32 %15, 0, !dbg !5602
  br i1 %tobool6, label %if.else.17, label %if.then.7, !dbg !5604

if.then.7:                                        ; preds = %lor.lhs.false, %if.else
  %16 = load i32, i32* %dir_fd, align 4, !dbg !5605, !tbaa !3840
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !5607
  %17 = load i8*, i8** %narrow, align 8, !dbg !5607, !tbaa !5537
  %18 = load i32, i32* %mode, align 4, !dbg !5608, !tbaa !3840
  %19 = load i32, i32* %follow_symlinks, align 4, !dbg !5609, !tbaa !3840
  %tobool8 = icmp ne i32 %19, 0, !dbg !5609
  %cond = select i1 %tobool8, i32 0, i32 256, !dbg !5609
  %call9 = call i32 @fchmodat(i32 %16, i8* %17, i32 %18, i32 %cond) #3, !dbg !5610
  store i32 %call9, i32* %result, align 4, !dbg !5611, !tbaa !3840
  %20 = load i32, i32* %result, align 4, !dbg !5612, !tbaa !3840
  %tobool10 = icmp ne i32 %20, 0, !dbg !5612
  br i1 %tobool10, label %land.lhs.true, label %land.end, !dbg !5613

land.lhs.true:                                    ; preds = %if.then.7
  %call11 = call i32* @__errno_location() #1, !dbg !5614
  %21 = load i32, i32* %call11, align 4, !dbg !5615, !tbaa !3840
  %cmp12 = icmp eq i32 %21, 95, !dbg !5616
  br i1 %cmp12, label %land.rhs, label %lor.lhs.false.13, !dbg !5617

lor.lhs.false.13:                                 ; preds = %land.lhs.true
  %call14 = call i32* @__errno_location() #1, !dbg !5618
  %22 = load i32, i32* %call14, align 4, !dbg !5620, !tbaa !3840
  %cmp15 = icmp eq i32 %22, 95, !dbg !5621
  br i1 %cmp15, label %land.rhs, label %land.end, !dbg !5622

land.rhs:                                         ; preds = %lor.lhs.false.13, %land.lhs.true
  %23 = load i32, i32* %follow_symlinks, align 4, !dbg !5623, !tbaa !3840
  %tobool16 = icmp ne i32 %23, 0, !dbg !5624
  %lnot = xor i1 %tobool16, true, !dbg !5624
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false.13, %if.then.7
  %24 = phi i1 [ false, %lor.lhs.false.13 ], [ false, %if.then.7 ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %24 to i32, !dbg !5625
  store i32 %land.ext, i32* %fchmodat_nofollow_unsupported, align 4, !dbg !5627, !tbaa !3840
  br label %if.end.20, !dbg !5628

if.else.17:                                       ; preds = %lor.lhs.false
  %narrow18 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !5629
  %25 = load i8*, i8** %narrow18, align 8, !dbg !5629, !tbaa !5537
  %26 = load i32, i32* %mode, align 4, !dbg !5630, !tbaa !3840
  %call19 = call i32 @chmod(i8* %25, i32 %26) #3, !dbg !5631
  store i32 %call19, i32* %result, align 4, !dbg !5632, !tbaa !3840
  br label %if.end.20

if.end.20:                                        ; preds = %if.else.17, %land.end
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %if.then.2
  %27 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !5633, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %27), !dbg !5634
  %28 = bitcast %struct._ts** %_save to i8*, !dbg !5635
  call void @llvm.lifetime.end(i64 8, i8* %28) #3, !dbg !5635
  %29 = load i32, i32* %result, align 4, !dbg !5636, !tbaa !3840
  %tobool22 = icmp ne i32 %29, 0, !dbg !5636
  br i1 %tobool22, label %if.then.23, label %if.end.35, !dbg !5638

if.then.23:                                       ; preds = %if.end.21
  %30 = load i32, i32* %fchmodat_nofollow_unsupported, align 4, !dbg !5639, !tbaa !3840
  %tobool24 = icmp ne i32 %30, 0, !dbg !5639
  br i1 %tobool24, label %if.then.25, label %if.else.32, !dbg !5642

if.then.25:                                       ; preds = %if.then.23
  %31 = load i32, i32* %dir_fd, align 4, !dbg !5643, !tbaa !3840
  %cmp26 = icmp ne i32 %31, -100, !dbg !5646
  br i1 %cmp26, label %if.then.27, label %if.else.29, !dbg !5647

if.then.27:                                       ; preds = %if.then.25
  %32 = load i32, i32* %dir_fd, align 4, !dbg !5648, !tbaa !3840
  %33 = load i32, i32* %follow_symlinks, align 4, !dbg !5649, !tbaa !3840
  %call28 = call i32 @dir_fd_and_follow_symlinks_invalid(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i32 %32, i32 %33), !dbg !5650
  br label %if.end.31, !dbg !5650

if.else.29:                                       ; preds = %if.then.25
  %34 = load i32, i32* %follow_symlinks, align 4, !dbg !5651, !tbaa !3840
  %call30 = call i32 @follow_symlinks_specified(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0), i32 %34), !dbg !5652
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.29, %if.then.27
  br label %if.end.34, !dbg !5653

if.else.32:                                       ; preds = %if.then.23
  %call33 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !5654
  store %struct._object* %call33, %struct._object** %return_value, align 8, !dbg !5655, !tbaa !3867
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.32, %if.end.31
  br label %exit, !dbg !5656

if.end.35:                                        ; preds = %if.end.21
  %35 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5657, !tbaa !3977
  %inc = add i64 %35, 1, !dbg !5657
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5657, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %return_value, align 8, !dbg !5658, !tbaa !3867
  br label %exit, !dbg !5659

exit:                                             ; preds = %if.end.35, %if.end.34
  call void @path_cleanup(%struct.path_t* %path), !dbg !5660
  %36 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !5661, !tbaa !3867
  store %struct._object* %36, %struct._object** %retval, !dbg !5662
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5662

cleanup:                                          ; preds = %exit, %if.then
  %37 = bitcast i32* %fchmodat_nofollow_unsupported to i8*, !dbg !5663
  call void @llvm.lifetime.end(i64 4, i8* %37) #3, !dbg !5663
  %38 = bitcast %struct._object** %return_value to i8*, !dbg !5663
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !5663
  %39 = bitcast i32* %result to i8*, !dbg !5663
  call void @llvm.lifetime.end(i64 4, i8* %39) #3, !dbg !5663
  %40 = bitcast i32* %follow_symlinks to i8*, !dbg !5663
  call void @llvm.lifetime.end(i64 4, i8* %40) #3, !dbg !5663
  %41 = bitcast i32* %dir_fd to i8*, !dbg !5663
  call void @llvm.lifetime.end(i64 4, i8* %41) #3, !dbg !5663
  %42 = bitcast i32* %mode to i8*, !dbg !5663
  call void @llvm.lifetime.end(i64 4, i8* %42) #3, !dbg !5663
  %43 = bitcast %struct.path_t* %path to i8*, !dbg !5663
  call void @llvm.lifetime.end(i64 72, i8* %43) #3, !dbg !5663
  %44 = load %struct._object*, %struct._object** %retval, !dbg !5663
  ret %struct._object* %44, !dbg !5663
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_fchmod(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %mode = alloca i32, align 4
  %res = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1136, metadata !3844), !dbg !5664
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1137, metadata !3844), !dbg !5665
  %0 = bitcast i32* %fd to i8*, !dbg !5666
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !5666
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !1138, metadata !3844), !dbg !5667
  %1 = bitcast i32* %mode to i8*, !dbg !5666
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !5666
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !1139, metadata !3844), !dbg !5668
  %2 = bitcast i32* %res to i8*, !dbg !5666
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !5666
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1140, metadata !3844), !dbg !5669
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5670, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.190, i32 0, i32 0), i32* %fd, i32* %mode), !dbg !5672
  %tobool = icmp ne i32 %call, 0, !dbg !5672
  br i1 %tobool, label %if.end, label %if.then, !dbg !5673

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5674
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5674

if.end:                                           ; preds = %entry
  %4 = bitcast %struct._ts** %_save to i8*, !dbg !5675
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !5675
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1141, metadata !3844), !dbg !5676
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !5677
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !5678, !tbaa !3867
  %5 = load i32, i32* %fd, align 4, !dbg !5679, !tbaa !3840
  %6 = load i32, i32* %mode, align 4, !dbg !5680, !tbaa !3840
  %call2 = call i32 @fchmod(i32 %5, i32 %6) #3, !dbg !5681
  store i32 %call2, i32* %res, align 4, !dbg !5682, !tbaa !3840
  %7 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !5683, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %7), !dbg !5684
  %8 = bitcast %struct._ts** %_save to i8*, !dbg !5685
  call void @llvm.lifetime.end(i64 8, i8* %8) #3, !dbg !5685
  %9 = load i32, i32* %res, align 4, !dbg !5686, !tbaa !3840
  %cmp = icmp slt i32 %9, 0, !dbg !5688
  br i1 %cmp, label %if.then.3, label %if.end.5, !dbg !5689

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !5690
  store %struct._object* %call4, %struct._object** %retval, !dbg !5691
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5691

if.end.5:                                         ; preds = %if.end
  %10 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5692, !tbaa !3977
  %inc = add i64 %10, 1, !dbg !5692
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5692, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !5693
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5693

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %11 = bitcast i32* %res to i8*, !dbg !5694
  call void @llvm.lifetime.end(i64 4, i8* %11) #3, !dbg !5694
  %12 = bitcast i32* %mode to i8*, !dbg !5694
  call void @llvm.lifetime.end(i64 4, i8* %12) #3, !dbg !5694
  %13 = bitcast i32* %fd to i8*, !dbg !5694
  call void @llvm.lifetime.end(i64 4, i8* %13) #3, !dbg !5694
  %14 = load %struct._object*, %struct._object** %retval, !dbg !5694
  ret %struct._object* %14, !dbg !5694
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_chown(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %uid = alloca i32, align 4
  %gid = alloca i32, align 4
  %dir_fd = alloca i32, align 4
  %follow_symlinks = alloca i32, align 4
  %result = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1145, metadata !3844), !dbg !5695
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1146, metadata !3844), !dbg !5696
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1147, metadata !3844), !dbg !5697
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !5698
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !5698
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !1148, metadata !3844), !dbg !5699
  %1 = bitcast i32* %uid to i8*, !dbg !5700
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !5700
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !1149, metadata !3844), !dbg !5701
  %2 = bitcast i32* %gid to i8*, !dbg !5702
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !5702
  call void @llvm.dbg.declare(metadata i32* %gid, metadata !1150, metadata !3844), !dbg !5703
  %3 = bitcast i32* %dir_fd to i8*, !dbg !5704
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !5704
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !1151, metadata !3844), !dbg !5705
  store i32 -100, i32* %dir_fd, align 4, !dbg !5705, !tbaa !3840
  %4 = bitcast i32* %follow_symlinks to i8*, !dbg !5706
  call void @llvm.lifetime.start(i64 4, i8* %4) #3, !dbg !5706
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks, metadata !1152, metadata !3844), !dbg !5707
  store i32 1, i32* %follow_symlinks, align 4, !dbg !5707, !tbaa !3840
  %5 = bitcast i32* %result to i8*, !dbg !5708
  call void @llvm.lifetime.start(i64 4, i8* %5) #3, !dbg !5708
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1153, metadata !3844), !dbg !5709
  %6 = bitcast %struct._object** %return_value to i8*, !dbg !5710
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !5710
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1154, metadata !3844), !dbg !5711
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !5711, !tbaa !3867
  %7 = bitcast %struct.path_t* %path to i8*, !dbg !5712
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 72, i32 8, i1 false), !dbg !5712
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !5713
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i32 0, i32 0), i8** %function_name, align 8, !dbg !5714, !tbaa !5512
  %allow_fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 3, !dbg !5715
  store i32 1, i32* %allow_fd, align 4, !dbg !5716, !tbaa !5516
  %8 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5717, !tbaa !3867
  %9 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !5719, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %8, %struct._object* %9, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.193, i32 0, i32 0), i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @posix_chown.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32 (%struct._object*, i8*)* @_Py_Uid_Converter, i32* %uid, i32 (%struct._object*, i8*)* @_Py_Gid_Converter, i32* %gid, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dir_fd, i32* %follow_symlinks), !dbg !5720
  %tobool = icmp ne i32 %call, 0, !dbg !5720
  br i1 %tobool, label %if.end, label %if.then, !dbg !5721

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5722
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5722

if.end:                                           ; preds = %entry
  %10 = load i32, i32* %dir_fd, align 4, !dbg !5723, !tbaa !3840
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !5725
  %11 = load i32, i32* %fd, align 4, !dbg !5725, !tbaa !5529
  %call1 = call i32 @dir_fd_and_fd_invalid(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i32 0, i32 0), i32 %10, i32 %11), !dbg !5726
  %tobool2 = icmp ne i32 %call1, 0, !dbg !5726
  br i1 %tobool2, label %if.then.6, label %lor.lhs.false, !dbg !5727

lor.lhs.false:                                    ; preds = %if.end
  %fd3 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !5728
  %12 = load i32, i32* %fd3, align 4, !dbg !5728, !tbaa !5529
  %13 = load i32, i32* %follow_symlinks, align 4, !dbg !5729, !tbaa !3840
  %call4 = call i32 @fd_and_follow_symlinks_invalid(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i32 0, i32 0), i32 %12, i32 %13), !dbg !5730
  %tobool5 = icmp ne i32 %call4, 0, !dbg !5730
  br i1 %tobool5, label %if.then.6, label %if.end.7, !dbg !5731

if.then.6:                                        ; preds = %lor.lhs.false, %if.end
  br label %exit, !dbg !5732

if.end.7:                                         ; preds = %lor.lhs.false
  %14 = bitcast %struct._ts** %_save to i8*, !dbg !5733
  call void @llvm.lifetime.start(i64 8, i8* %14) #3, !dbg !5733
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1155, metadata !3844), !dbg !5734
  %call8 = call %struct._ts* @PyEval_SaveThread(), !dbg !5735
  store %struct._ts* %call8, %struct._ts** %_save, align 8, !dbg !5736, !tbaa !3867
  %fd9 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !5737
  %15 = load i32, i32* %fd9, align 4, !dbg !5737, !tbaa !5529
  %cmp = icmp ne i32 %15, -1, !dbg !5739
  br i1 %cmp, label %if.then.10, label %if.else, !dbg !5740

if.then.10:                                       ; preds = %if.end.7
  %fd11 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !5741
  %16 = load i32, i32* %fd11, align 4, !dbg !5741, !tbaa !5529
  %17 = load i32, i32* %uid, align 4, !dbg !5742, !tbaa !3840
  %18 = load i32, i32* %gid, align 4, !dbg !5743, !tbaa !3840
  %call12 = call i32 @fchown(i32 %16, i32 %17, i32 %18) #3, !dbg !5744
  store i32 %call12, i32* %result, align 4, !dbg !5745, !tbaa !3840
  br label %if.end.30, !dbg !5746

if.else:                                          ; preds = %if.end.7
  %19 = load i32, i32* %follow_symlinks, align 4, !dbg !5747, !tbaa !3840
  %tobool13 = icmp ne i32 %19, 0, !dbg !5747
  br i1 %tobool13, label %if.else.17, label %land.lhs.true, !dbg !5749

land.lhs.true:                                    ; preds = %if.else
  %20 = load i32, i32* %dir_fd, align 4, !dbg !5750, !tbaa !3840
  %cmp14 = icmp eq i32 %20, -100, !dbg !5752
  br i1 %cmp14, label %if.then.15, label %if.else.17, !dbg !5753

if.then.15:                                       ; preds = %land.lhs.true
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !5754
  %21 = load i8*, i8** %narrow, align 8, !dbg !5754, !tbaa !5537
  %22 = load i32, i32* %uid, align 4, !dbg !5755, !tbaa !3840
  %23 = load i32, i32* %gid, align 4, !dbg !5756, !tbaa !3840
  %call16 = call i32 @lchown(i8* %21, i32 %22, i32 %23) #3, !dbg !5757
  store i32 %call16, i32* %result, align 4, !dbg !5758, !tbaa !3840
  br label %if.end.29, !dbg !5759

if.else.17:                                       ; preds = %land.lhs.true, %if.else
  %24 = load i32, i32* %dir_fd, align 4, !dbg !5760, !tbaa !3840
  %cmp18 = icmp ne i32 %24, -100, !dbg !5762
  br i1 %cmp18, label %if.then.21, label %lor.lhs.false.19, !dbg !5763

lor.lhs.false.19:                                 ; preds = %if.else.17
  %25 = load i32, i32* %follow_symlinks, align 4, !dbg !5764, !tbaa !3840
  %tobool20 = icmp ne i32 %25, 0, !dbg !5764
  br i1 %tobool20, label %if.else.25, label %if.then.21, !dbg !5766

if.then.21:                                       ; preds = %lor.lhs.false.19, %if.else.17
  %26 = load i32, i32* %dir_fd, align 4, !dbg !5767, !tbaa !3840
  %narrow22 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !5768
  %27 = load i8*, i8** %narrow22, align 8, !dbg !5768, !tbaa !5537
  %28 = load i32, i32* %uid, align 4, !dbg !5769, !tbaa !3840
  %29 = load i32, i32* %gid, align 4, !dbg !5770, !tbaa !3840
  %30 = load i32, i32* %follow_symlinks, align 4, !dbg !5771, !tbaa !3840
  %tobool23 = icmp ne i32 %30, 0, !dbg !5771
  %cond = select i1 %tobool23, i32 0, i32 256, !dbg !5771
  %call24 = call i32 @fchownat(i32 %26, i8* %27, i32 %28, i32 %29, i32 %cond) #3, !dbg !5772
  store i32 %call24, i32* %result, align 4, !dbg !5773, !tbaa !3840
  br label %if.end.28, !dbg !5774

if.else.25:                                       ; preds = %lor.lhs.false.19
  %narrow26 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !5775
  %31 = load i8*, i8** %narrow26, align 8, !dbg !5775, !tbaa !5537
  %32 = load i32, i32* %uid, align 4, !dbg !5776, !tbaa !3840
  %33 = load i32, i32* %gid, align 4, !dbg !5777, !tbaa !3840
  %call27 = call i32 @chown(i8* %31, i32 %32, i32 %33) #3, !dbg !5778
  store i32 %call27, i32* %result, align 4, !dbg !5779, !tbaa !3840
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.25, %if.then.21
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.then.15
  br label %if.end.30

if.end.30:                                        ; preds = %if.end.29, %if.then.10
  %34 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !5780, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %34), !dbg !5781
  %35 = bitcast %struct._ts** %_save to i8*, !dbg !5782
  call void @llvm.lifetime.end(i64 8, i8* %35) #3, !dbg !5782
  %36 = load i32, i32* %result, align 4, !dbg !5783, !tbaa !3840
  %tobool31 = icmp ne i32 %36, 0, !dbg !5783
  br i1 %tobool31, label %if.then.32, label %if.end.34, !dbg !5785

if.then.32:                                       ; preds = %if.end.30
  %call33 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !5786
  store %struct._object* %call33, %struct._object** %return_value, align 8, !dbg !5788, !tbaa !3867
  br label %exit, !dbg !5789

if.end.34:                                        ; preds = %if.end.30
  store %struct._object* @_Py_NoneStruct, %struct._object** %return_value, align 8, !dbg !5790, !tbaa !3867
  %37 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5791, !tbaa !3977
  %inc = add i64 %37, 1, !dbg !5791
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5791, !tbaa !3977
  br label %exit, !dbg !5792

exit:                                             ; preds = %if.end.34, %if.then.32, %if.then.6
  call void @path_cleanup(%struct.path_t* %path), !dbg !5793
  %38 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !5794, !tbaa !3867
  store %struct._object* %38, %struct._object** %retval, !dbg !5795
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5795

cleanup:                                          ; preds = %exit, %if.then
  %39 = bitcast %struct._object** %return_value to i8*, !dbg !5796
  call void @llvm.lifetime.end(i64 8, i8* %39) #3, !dbg !5796
  %40 = bitcast i32* %result to i8*, !dbg !5796
  call void @llvm.lifetime.end(i64 4, i8* %40) #3, !dbg !5796
  %41 = bitcast i32* %follow_symlinks to i8*, !dbg !5796
  call void @llvm.lifetime.end(i64 4, i8* %41) #3, !dbg !5796
  %42 = bitcast i32* %dir_fd to i8*, !dbg !5796
  call void @llvm.lifetime.end(i64 4, i8* %42) #3, !dbg !5796
  %43 = bitcast i32* %gid to i8*, !dbg !5796
  call void @llvm.lifetime.end(i64 4, i8* %43) #3, !dbg !5796
  %44 = bitcast i32* %uid to i8*, !dbg !5796
  call void @llvm.lifetime.end(i64 4, i8* %44) #3, !dbg !5796
  %45 = bitcast %struct.path_t* %path to i8*, !dbg !5796
  call void @llvm.lifetime.end(i64 72, i8* %45) #3, !dbg !5796
  %46 = load %struct._object*, %struct._object** %retval, !dbg !5796
  ret %struct._object* %46, !dbg !5796
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_fchown(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %uid = alloca i32, align 4
  %gid = alloca i32, align 4
  %res = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1159, metadata !3844), !dbg !5797
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1160, metadata !3844), !dbg !5798
  %0 = bitcast i32* %fd to i8*, !dbg !5799
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !5799
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !1161, metadata !3844), !dbg !5800
  %1 = bitcast i32* %uid to i8*, !dbg !5801
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !5801
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !1162, metadata !3844), !dbg !5802
  %2 = bitcast i32* %gid to i8*, !dbg !5803
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !5803
  call void @llvm.dbg.declare(metadata i32* %gid, metadata !1163, metadata !3844), !dbg !5804
  %3 = bitcast i32* %res to i8*, !dbg !5805
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !5805
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1164, metadata !3844), !dbg !5806
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5807, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.194, i32 0, i32 0), i32* %fd, i32 (%struct._object*, i8*)* @_Py_Uid_Converter, i32* %uid, i32 (%struct._object*, i8*)* @_Py_Gid_Converter, i32* %gid), !dbg !5809
  %tobool = icmp ne i32 %call, 0, !dbg !5809
  br i1 %tobool, label %if.end, label %if.then, !dbg !5810

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5811
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5811

if.end:                                           ; preds = %entry
  %5 = bitcast %struct._ts** %_save to i8*, !dbg !5812
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !5812
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1165, metadata !3844), !dbg !5813
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !5814
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !5815, !tbaa !3867
  %6 = load i32, i32* %fd, align 4, !dbg !5816, !tbaa !3840
  %7 = load i32, i32* %uid, align 4, !dbg !5817, !tbaa !3840
  %8 = load i32, i32* %gid, align 4, !dbg !5818, !tbaa !3840
  %call2 = call i32 @fchown(i32 %6, i32 %7, i32 %8) #3, !dbg !5819
  store i32 %call2, i32* %res, align 4, !dbg !5820, !tbaa !3840
  %9 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !5821, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %9), !dbg !5822
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !5823
  call void @llvm.lifetime.end(i64 8, i8* %10) #3, !dbg !5823
  %11 = load i32, i32* %res, align 4, !dbg !5824, !tbaa !3840
  %cmp = icmp slt i32 %11, 0, !dbg !5826
  br i1 %cmp, label %if.then.3, label %if.end.5, !dbg !5827

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !5828
  store %struct._object* %call4, %struct._object** %retval, !dbg !5829
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5829

if.end.5:                                         ; preds = %if.end
  %12 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5830, !tbaa !3977
  %inc = add i64 %12, 1, !dbg !5830
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5830, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !5831
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5831

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %13 = bitcast i32* %res to i8*, !dbg !5832
  call void @llvm.lifetime.end(i64 4, i8* %13) #3, !dbg !5832
  %14 = bitcast i32* %gid to i8*, !dbg !5832
  call void @llvm.lifetime.end(i64 4, i8* %14) #3, !dbg !5832
  %15 = bitcast i32* %uid to i8*, !dbg !5832
  call void @llvm.lifetime.end(i64 4, i8* %15) #3, !dbg !5832
  %16 = bitcast i32* %fd to i8*, !dbg !5832
  call void @llvm.lifetime.end(i64 4, i8* %16) #3, !dbg !5832
  %17 = load %struct._object*, %struct._object** %retval, !dbg !5832
  ret %struct._object* %17, !dbg !5832
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_lchown(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %uid = alloca i32, align 4
  %gid = alloca i32, align 4
  %res = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1169, metadata !3844), !dbg !5833
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1170, metadata !3844), !dbg !5834
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !5835
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !5835
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !1171, metadata !3844), !dbg !5836
  %1 = bitcast i32* %uid to i8*, !dbg !5837
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !5837
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !1172, metadata !3844), !dbg !5838
  %2 = bitcast i32* %gid to i8*, !dbg !5839
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !5839
  call void @llvm.dbg.declare(metadata i32* %gid, metadata !1173, metadata !3844), !dbg !5840
  %3 = bitcast i32* %res to i8*, !dbg !5841
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !5841
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1174, metadata !3844), !dbg !5842
  %4 = bitcast %struct.path_t* %path to i8*, !dbg !5843
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 72, i32 8, i1 false), !dbg !5843
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !5844
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.32, i32 0, i32 0), i8** %function_name, align 8, !dbg !5845, !tbaa !5512
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5846, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %5, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.195, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32 (%struct._object*, i8*)* @_Py_Uid_Converter, i32* %uid, i32 (%struct._object*, i8*)* @_Py_Gid_Converter, i32* %gid), !dbg !5848
  %tobool = icmp ne i32 %call, 0, !dbg !5848
  br i1 %tobool, label %if.end, label %if.then, !dbg !5849

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5850
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5850

if.end:                                           ; preds = %entry
  %6 = bitcast %struct._ts** %_save to i8*, !dbg !5851
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !5851
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1175, metadata !3844), !dbg !5852
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !5853
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !5854, !tbaa !3867
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !5855
  %7 = load i8*, i8** %narrow, align 8, !dbg !5855, !tbaa !5537
  %8 = load i32, i32* %uid, align 4, !dbg !5856, !tbaa !3840
  %9 = load i32, i32* %gid, align 4, !dbg !5857, !tbaa !3840
  %call2 = call i32 @lchown(i8* %7, i32 %8, i32 %9) #3, !dbg !5858
  store i32 %call2, i32* %res, align 4, !dbg !5859, !tbaa !3840
  %10 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !5860, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %10), !dbg !5861
  %11 = bitcast %struct._ts** %_save to i8*, !dbg !5862
  call void @llvm.lifetime.end(i64 8, i8* %11) #3, !dbg !5862
  %12 = load i32, i32* %res, align 4, !dbg !5863, !tbaa !3840
  %cmp = icmp slt i32 %12, 0, !dbg !5865
  br i1 %cmp, label %if.then.3, label %if.end.5, !dbg !5866

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !5867
  call void @path_cleanup(%struct.path_t* %path), !dbg !5869
  store %struct._object* null, %struct._object** %retval, !dbg !5870
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5870

if.end.5:                                         ; preds = %if.end
  call void @path_cleanup(%struct.path_t* %path), !dbg !5871
  %13 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5872, !tbaa !3977
  %inc = add i64 %13, 1, !dbg !5872
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5872, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !5873
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5873

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %14 = bitcast i32* %res to i8*, !dbg !5874
  call void @llvm.lifetime.end(i64 4, i8* %14) #3, !dbg !5874
  %15 = bitcast i32* %gid to i8*, !dbg !5874
  call void @llvm.lifetime.end(i64 4, i8* %15) #3, !dbg !5874
  %16 = bitcast i32* %uid to i8*, !dbg !5874
  call void @llvm.lifetime.end(i64 4, i8* %16) #3, !dbg !5874
  %17 = bitcast %struct.path_t* %path to i8*, !dbg !5874
  call void @llvm.lifetime.end(i64 72, i8* %17) #3, !dbg !5874
  %18 = load %struct._object*, %struct._object** %retval, !dbg !5874
  ret %struct._object* %18, !dbg !5874
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_chroot(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1179, metadata !3844), !dbg !5875
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1180, metadata !3844), !dbg !5876
  %0 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5877, !tbaa !3867
  %call = call %struct._object* @posix_1str(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i32 0, i32 0), %struct._object* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.196, i32 0, i32 0), i32 (i8*)* @chroot), !dbg !5878
  ret %struct._object* %call, !dbg !5879
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_ctermid(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  %ret = alloca i8*, align 8
  %buffer = alloca [9 x i8], align 1
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1198, metadata !3844), !dbg !5880
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !1199, metadata !3844), !dbg !5881
  %0 = bitcast i8** %ret to i8*, !dbg !5882
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !5882
  call void @llvm.dbg.declare(metadata i8** %ret, metadata !1200, metadata !3844), !dbg !5883
  %1 = bitcast [9 x i8]* %buffer to i8*, !dbg !5884
  call void @llvm.lifetime.start(i64 9, i8* %1) #3, !dbg !5884
  call void @llvm.dbg.declare(metadata [9 x i8]* %buffer, metadata !1201, metadata !3844), !dbg !5885
  %arraydecay = getelementptr inbounds [9 x i8], [9 x i8]* %buffer, i32 0, i32 0, !dbg !5886
  %call = call i8* @ctermid(i8* %arraydecay) #3, !dbg !5887
  store i8* %call, i8** %ret, align 8, !dbg !5888, !tbaa !3867
  %2 = load i8*, i8** %ret, align 8, !dbg !5889, !tbaa !3867
  %cmp = icmp eq i8* %2, null, !dbg !5891
  br i1 %cmp, label %if.then, label %if.end, !dbg !5892

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @posix_error(), !dbg !5893
  store %struct._object* %call1, %struct._object** %retval, !dbg !5894
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5894

if.end:                                           ; preds = %entry
  %arraydecay2 = getelementptr inbounds [9 x i8], [9 x i8]* %buffer, i32 0, i32 0, !dbg !5895
  %call3 = call %struct._object* @PyUnicode_DecodeFSDefault(i8* %arraydecay2), !dbg !5896
  store %struct._object* %call3, %struct._object** %retval, !dbg !5897
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5897

cleanup:                                          ; preds = %if.end, %if.then
  %3 = bitcast [9 x i8]* %buffer to i8*, !dbg !5898
  call void @llvm.lifetime.end(i64 9, i8* %3) #3, !dbg !5898
  %4 = bitcast i8** %ret to i8*, !dbg !5898
  call void @llvm.lifetime.end(i64 8, i8* %4) #3, !dbg !5898
  %5 = load %struct._object*, %struct._object** %retval, !dbg !5898
  ret %struct._object* %5, !dbg !5898
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getcwd_unicode(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1207, metadata !3844), !dbg !5899
  %call = call %struct._object* @posix_getcwd(i32 0), !dbg !5900
  ret %struct._object* %call, !dbg !5901
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getcwd_bytes(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1222, metadata !3844), !dbg !5902
  %call = call %struct._object* @posix_getcwd(i32 1), !dbg !5903
  ret %struct._object* %call, !dbg !5904
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_link(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %src = alloca %struct.path_t, align 8
  %dst = alloca %struct.path_t, align 8
  %src_dir_fd = alloca i32, align 4
  %dst_dir_fd = alloca i32, align 4
  %follow_symlinks = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %result = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1225, metadata !3844), !dbg !5905
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1226, metadata !3844), !dbg !5906
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1227, metadata !3844), !dbg !5907
  %0 = bitcast %struct.path_t* %src to i8*, !dbg !5908
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !5908
  call void @llvm.dbg.declare(metadata %struct.path_t* %src, metadata !1228, metadata !3844), !dbg !5909
  %1 = bitcast %struct.path_t* %dst to i8*, !dbg !5908
  call void @llvm.lifetime.start(i64 72, i8* %1) #3, !dbg !5908
  call void @llvm.dbg.declare(metadata %struct.path_t* %dst, metadata !1229, metadata !3844), !dbg !5910
  %2 = bitcast i32* %src_dir_fd to i8*, !dbg !5911
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !5911
  call void @llvm.dbg.declare(metadata i32* %src_dir_fd, metadata !1230, metadata !3844), !dbg !5912
  store i32 -100, i32* %src_dir_fd, align 4, !dbg !5912, !tbaa !3840
  %3 = bitcast i32* %dst_dir_fd to i8*, !dbg !5913
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !5913
  call void @llvm.dbg.declare(metadata i32* %dst_dir_fd, metadata !1231, metadata !3844), !dbg !5914
  store i32 -100, i32* %dst_dir_fd, align 4, !dbg !5914, !tbaa !3840
  %4 = bitcast i32* %follow_symlinks to i8*, !dbg !5915
  call void @llvm.lifetime.start(i64 4, i8* %4) #3, !dbg !5915
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks, metadata !1232, metadata !3844), !dbg !5916
  store i32 1, i32* %follow_symlinks, align 4, !dbg !5916, !tbaa !3840
  %5 = bitcast %struct._object** %return_value to i8*, !dbg !5917
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !5917
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1233, metadata !3844), !dbg !5918
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !5918, !tbaa !3867
  %6 = bitcast i32* %result to i8*, !dbg !5919
  call void @llvm.lifetime.start(i64 4, i8* %6) #3, !dbg !5919
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1234, metadata !3844), !dbg !5920
  %7 = bitcast %struct.path_t* %src to i8*, !dbg !5921
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 72, i32 8, i1 false), !dbg !5921
  %8 = bitcast %struct.path_t* %dst to i8*, !dbg !5922
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 72, i32 8, i1 false), !dbg !5922
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 0, !dbg !5923
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i32 0, i32 0), i8** %function_name, align 8, !dbg !5924, !tbaa !5512
  %function_name1 = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 0, !dbg !5925
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i32 0, i32 0), i8** %function_name1, align 8, !dbg !5926, !tbaa !5512
  %9 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5927, !tbaa !3867
  %10 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !5929, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %9, %struct._object* %10, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.201, i32 0, i32 0), i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @posix_link.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %src, i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %dst, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %src_dir_fd, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dst_dir_fd, i32* %follow_symlinks), !dbg !5930
  %tobool = icmp ne i32 %call, 0, !dbg !5930
  br i1 %tobool, label %if.end, label %if.then, !dbg !5931

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5932
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5932

if.end:                                           ; preds = %entry
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 5, !dbg !5933
  %11 = load i8*, i8** %narrow, align 8, !dbg !5933, !tbaa !5537
  %tobool2 = icmp ne i8* %11, null, !dbg !5935
  br i1 %tobool2, label %land.lhs.true, label %lor.lhs.false, !dbg !5936

land.lhs.true:                                    ; preds = %if.end
  %wide = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 4, !dbg !5937
  %12 = load i32*, i32** %wide, align 8, !dbg !5937, !tbaa !5939
  %tobool3 = icmp ne i32* %12, null, !dbg !5940
  br i1 %tobool3, label %if.then.9, label %lor.lhs.false, !dbg !5941

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.end
  %wide4 = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 4, !dbg !5942
  %13 = load i32*, i32** %wide4, align 8, !dbg !5942, !tbaa !5939
  %tobool5 = icmp ne i32* %13, null, !dbg !5945
  br i1 %tobool5, label %land.lhs.true.6, label %if.end.10, !dbg !5946

land.lhs.true.6:                                  ; preds = %lor.lhs.false
  %narrow7 = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 5, !dbg !5947
  %14 = load i8*, i8** %narrow7, align 8, !dbg !5947, !tbaa !5537
  %tobool8 = icmp ne i8* %14, null, !dbg !5949
  br i1 %tobool8, label %if.then.9, label %if.end.10, !dbg !5950

if.then.9:                                        ; preds = %land.lhs.true.6, %land.lhs.true
  %15 = load %struct._object*, %struct._object** @PyExc_NotImplementedError, align 8, !dbg !5951, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %15, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.202, i32 0, i32 0)), !dbg !5953
  br label %exit, !dbg !5954

if.end.10:                                        ; preds = %land.lhs.true.6, %lor.lhs.false
  %16 = bitcast %struct._ts** %_save to i8*, !dbg !5955
  call void @llvm.lifetime.start(i64 8, i8* %16) #3, !dbg !5955
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1235, metadata !3844), !dbg !5956
  %call11 = call %struct._ts* @PyEval_SaveThread(), !dbg !5957
  store %struct._ts* %call11, %struct._ts** %_save, align 8, !dbg !5958, !tbaa !3867
  %17 = load i32, i32* %src_dir_fd, align 4, !dbg !5959, !tbaa !3840
  %cmp = icmp ne i32 %17, -100, !dbg !5961
  br i1 %cmp, label %if.then.16, label %lor.lhs.false.12, !dbg !5962

lor.lhs.false.12:                                 ; preds = %if.end.10
  %18 = load i32, i32* %dst_dir_fd, align 4, !dbg !5963, !tbaa !3840
  %cmp13 = icmp ne i32 %18, -100, !dbg !5964
  br i1 %cmp13, label %if.then.16, label %lor.lhs.false.14, !dbg !5965

lor.lhs.false.14:                                 ; preds = %lor.lhs.false.12
  %19 = load i32, i32* %follow_symlinks, align 4, !dbg !5966, !tbaa !3840
  %tobool15 = icmp ne i32 %19, 0, !dbg !5966
  br i1 %tobool15, label %if.else, label %if.then.16, !dbg !5967

if.then.16:                                       ; preds = %lor.lhs.false.14, %lor.lhs.false.12, %if.end.10
  %20 = load i32, i32* %src_dir_fd, align 4, !dbg !5968, !tbaa !3840
  %narrow17 = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 5, !dbg !5969
  %21 = load i8*, i8** %narrow17, align 8, !dbg !5969, !tbaa !5537
  %22 = load i32, i32* %dst_dir_fd, align 4, !dbg !5970, !tbaa !3840
  %narrow18 = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 5, !dbg !5971
  %23 = load i8*, i8** %narrow18, align 8, !dbg !5971, !tbaa !5537
  %24 = load i32, i32* %follow_symlinks, align 4, !dbg !5972, !tbaa !3840
  %tobool19 = icmp ne i32 %24, 0, !dbg !5972
  %cond = select i1 %tobool19, i32 1024, i32 0, !dbg !5972
  %call20 = call i32 @linkat(i32 %20, i8* %21, i32 %22, i8* %23, i32 %cond) #3, !dbg !5973
  store i32 %call20, i32* %result, align 4, !dbg !5974, !tbaa !3840
  br label %if.end.24, !dbg !5975

if.else:                                          ; preds = %lor.lhs.false.14
  %narrow21 = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 5, !dbg !5976
  %25 = load i8*, i8** %narrow21, align 8, !dbg !5976, !tbaa !5537
  %narrow22 = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 5, !dbg !5977
  %26 = load i8*, i8** %narrow22, align 8, !dbg !5977, !tbaa !5537
  %call23 = call i32 @link(i8* %25, i8* %26) #3, !dbg !5978
  store i32 %call23, i32* %result, align 4, !dbg !5979, !tbaa !3840
  br label %if.end.24

if.end.24:                                        ; preds = %if.else, %if.then.16
  %27 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !5980, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %27), !dbg !5981
  %28 = bitcast %struct._ts** %_save to i8*, !dbg !5982
  call void @llvm.lifetime.end(i64 8, i8* %28) #3, !dbg !5982
  %29 = load i32, i32* %result, align 4, !dbg !5983, !tbaa !3840
  %tobool25 = icmp ne i32 %29, 0, !dbg !5983
  br i1 %tobool25, label %if.then.26, label %if.end.28, !dbg !5985

if.then.26:                                       ; preds = %if.end.24
  %call27 = call %struct._object* @path_error2(%struct.path_t* %src, %struct.path_t* %dst), !dbg !5986
  store %struct._object* %call27, %struct._object** %return_value, align 8, !dbg !5988, !tbaa !3867
  br label %exit, !dbg !5989

if.end.28:                                        ; preds = %if.end.24
  store %struct._object* @_Py_NoneStruct, %struct._object** %return_value, align 8, !dbg !5990, !tbaa !3867
  %30 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5991, !tbaa !3977
  %inc = add i64 %30, 1, !dbg !5991
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5991, !tbaa !3977
  br label %exit, !dbg !5992

exit:                                             ; preds = %if.end.28, %if.then.26, %if.then.9
  call void @path_cleanup(%struct.path_t* %src), !dbg !5993
  call void @path_cleanup(%struct.path_t* %dst), !dbg !5994
  %31 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !5995, !tbaa !3867
  store %struct._object* %31, %struct._object** %retval, !dbg !5996
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5996

cleanup:                                          ; preds = %exit, %if.then
  %32 = bitcast i32* %result to i8*, !dbg !5997
  call void @llvm.lifetime.end(i64 4, i8* %32) #3, !dbg !5997
  %33 = bitcast %struct._object** %return_value to i8*, !dbg !5997
  call void @llvm.lifetime.end(i64 8, i8* %33) #3, !dbg !5997
  %34 = bitcast i32* %follow_symlinks to i8*, !dbg !5997
  call void @llvm.lifetime.end(i64 4, i8* %34) #3, !dbg !5997
  %35 = bitcast i32* %dst_dir_fd to i8*, !dbg !5997
  call void @llvm.lifetime.end(i64 4, i8* %35) #3, !dbg !5997
  %36 = bitcast i32* %src_dir_fd to i8*, !dbg !5997
  call void @llvm.lifetime.end(i64 4, i8* %36) #3, !dbg !5997
  %37 = bitcast %struct.path_t* %dst to i8*, !dbg !5997
  call void @llvm.lifetime.end(i64 72, i8* %37) #3, !dbg !5997
  %38 = bitcast %struct.path_t* %src to i8*, !dbg !5997
  call void @llvm.lifetime.end(i64 72, i8* %38) #3, !dbg !5997
  %39 = load %struct._object*, %struct._object** %retval, !dbg !5997
  ret %struct._object* %39, !dbg !5997
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_listdir(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %list = alloca %struct._object*, align 8
  %return_value = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1245, metadata !3844), !dbg !5998
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1246, metadata !3844), !dbg !5999
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1247, metadata !3844), !dbg !6000
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !6001
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !6001
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !1248, metadata !3844), !dbg !6002
  %1 = bitcast %struct._object** %list to i8*, !dbg !6003
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !6003
  call void @llvm.dbg.declare(metadata %struct._object** %list, metadata !1249, metadata !3844), !dbg !6004
  store %struct._object* null, %struct._object** %list, align 8, !dbg !6004, !tbaa !3867
  %2 = bitcast %struct._object** %return_value to i8*, !dbg !6005
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !6005
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1250, metadata !3844), !dbg !6006
  %3 = bitcast %struct.path_t* %path to i8*, !dbg !6007
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 72, i32 8, i1 false), !dbg !6007
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !6008
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.38, i32 0, i32 0), i8** %function_name, align 8, !dbg !6009, !tbaa !5512
  %nullable = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 2, !dbg !6010
  store i32 1, i32* %nullable, align 4, !dbg !6011, !tbaa !6012
  %allow_fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 3, !dbg !6013
  store i32 1, i32* %allow_fd, align 4, !dbg !6014, !tbaa !5516
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !6015
  store i32 -1, i32* %fd, align 4, !dbg !6016, !tbaa !5529
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6017, !tbaa !3867
  %5 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !6019, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %4, %struct._object* %5, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.203, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @posix_listdir.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path), !dbg !6020
  %tobool = icmp ne i32 %call, 0, !dbg !6020
  br i1 %tobool, label %if.end, label %if.then, !dbg !6021

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6022
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6022

if.end:                                           ; preds = %entry
  %6 = load %struct._object*, %struct._object** %list, align 8, !dbg !6024, !tbaa !3867
  %call1 = call %struct._object* @_posix_listdir(%struct.path_t* %path, %struct._object* %6), !dbg !6025
  store %struct._object* %call1, %struct._object** %return_value, align 8, !dbg !6026, !tbaa !3867
  call void @path_cleanup(%struct.path_t* %path), !dbg !6027
  %7 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !6028, !tbaa !3867
  store %struct._object* %7, %struct._object** %retval, !dbg !6029
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6029

cleanup:                                          ; preds = %if.end, %if.then
  %8 = bitcast %struct._object** %return_value to i8*, !dbg !6030
  call void @llvm.lifetime.end(i64 8, i8* %8) #3, !dbg !6030
  %9 = bitcast %struct._object** %list to i8*, !dbg !6030
  call void @llvm.lifetime.end(i64 8, i8* %9) #3, !dbg !6030
  %10 = bitcast %struct.path_t* %path to i8*, !dbg !6030
  call void @llvm.lifetime.end(i64 72, i8* %10) #3, !dbg !6030
  %11 = load %struct._object*, %struct._object** %retval, !dbg !6030
  ret %struct._object* %11, !dbg !6030
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_lstat(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %dir_fd = alloca i32, align 4
  %follow_symlinks = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1330, metadata !3844), !dbg !6031
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1331, metadata !3844), !dbg !6032
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1332, metadata !3844), !dbg !6033
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !6034
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !6034
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !1333, metadata !3844), !dbg !6035
  %1 = bitcast i32* %dir_fd to i8*, !dbg !6036
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !6036
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !1334, metadata !3844), !dbg !6037
  store i32 -100, i32* %dir_fd, align 4, !dbg !6037, !tbaa !3840
  %2 = bitcast i32* %follow_symlinks to i8*, !dbg !6038
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !6038
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks, metadata !1335, metadata !3844), !dbg !6039
  store i32 0, i32* %follow_symlinks, align 4, !dbg !6039, !tbaa !3840
  %3 = bitcast %struct._object** %return_value to i8*, !dbg !6040
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !6040
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1336, metadata !3844), !dbg !6041
  %4 = bitcast %struct.path_t* %path to i8*, !dbg !6042
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 72, i32 8, i1 false), !dbg !6042
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !6043
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i32 0, i32 0), i8** %function_name, align 8, !dbg !6044, !tbaa !5512
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6045, !tbaa !3867
  %6 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !6047, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %5, %struct._object* %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.205, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @posix_lstat.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dir_fd), !dbg !6048
  %tobool = icmp ne i32 %call, 0, !dbg !6048
  br i1 %tobool, label %if.end, label %if.then, !dbg !6049

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6050
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6050

if.end:                                           ; preds = %entry
  %7 = load i32, i32* %dir_fd, align 4, !dbg !6051, !tbaa !3840
  %8 = load i32, i32* %follow_symlinks, align 4, !dbg !6052, !tbaa !3840
  %call1 = call %struct._object* @posix_do_stat(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i32 0, i32 0), %struct.path_t* %path, i32 %7, i32 %8), !dbg !6053
  store %struct._object* %call1, %struct._object** %return_value, align 8, !dbg !6054, !tbaa !3867
  call void @path_cleanup(%struct.path_t* %path), !dbg !6055
  %9 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !6056, !tbaa !3867
  store %struct._object* %9, %struct._object** %retval, !dbg !6057
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6057

cleanup:                                          ; preds = %if.end, %if.then
  %10 = bitcast %struct._object** %return_value to i8*, !dbg !6058
  call void @llvm.lifetime.end(i64 8, i8* %10) #3, !dbg !6058
  %11 = bitcast i32* %follow_symlinks to i8*, !dbg !6058
  call void @llvm.lifetime.end(i64 4, i8* %11) #3, !dbg !6058
  %12 = bitcast i32* %dir_fd to i8*, !dbg !6058
  call void @llvm.lifetime.end(i64 4, i8* %12) #3, !dbg !6058
  %13 = bitcast %struct.path_t* %path to i8*, !dbg !6058
  call void @llvm.lifetime.end(i64 72, i8* %13) #3, !dbg !6058
  %14 = load %struct._object*, %struct._object** %retval, !dbg !6058
  ret %struct._object* %14, !dbg !6058
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_mkdir(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %mode = alloca i32, align 4
  %dir_fd = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %result = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1339, metadata !3844), !dbg !6059
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1340, metadata !3844), !dbg !6060
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1341, metadata !3844), !dbg !6061
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !6062
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !6062
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !1342, metadata !3844), !dbg !6063
  %1 = bitcast i32* %mode to i8*, !dbg !6064
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !6064
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !1343, metadata !3844), !dbg !6065
  store i32 511, i32* %mode, align 4, !dbg !6065, !tbaa !3840
  %2 = bitcast i32* %dir_fd to i8*, !dbg !6066
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !6066
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !1344, metadata !3844), !dbg !6067
  store i32 -100, i32* %dir_fd, align 4, !dbg !6067, !tbaa !3840
  %3 = bitcast %struct._object** %return_value to i8*, !dbg !6068
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !6068
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1345, metadata !3844), !dbg !6069
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !6069, !tbaa !3867
  %4 = bitcast i32* %result to i8*, !dbg !6070
  call void @llvm.lifetime.start(i64 4, i8* %4) #3, !dbg !6070
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1346, metadata !3844), !dbg !6071
  %5 = bitcast %struct.path_t* %path to i8*, !dbg !6072
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 72, i32 8, i1 false), !dbg !6072
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !6073
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i32 0, i32 0), i8** %function_name, align 8, !dbg !6074, !tbaa !5512
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6075, !tbaa !3867
  %7 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !6077, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %6, %struct._object* %7, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.206, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @posix_mkdir.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32* %mode, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dir_fd), !dbg !6078
  %tobool = icmp ne i32 %call, 0, !dbg !6078
  br i1 %tobool, label %if.end, label %if.then, !dbg !6079

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6080
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6080

if.end:                                           ; preds = %entry
  %8 = bitcast %struct._ts** %_save to i8*, !dbg !6081
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !6081
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1347, metadata !3844), !dbg !6082
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !6083
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !6084, !tbaa !3867
  %9 = load i32, i32* %dir_fd, align 4, !dbg !6085, !tbaa !3840
  %cmp = icmp ne i32 %9, -100, !dbg !6087
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !6088

if.then.2:                                        ; preds = %if.end
  %10 = load i32, i32* %dir_fd, align 4, !dbg !6089, !tbaa !3840
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !6090
  %11 = load i8*, i8** %narrow, align 8, !dbg !6090, !tbaa !5537
  %12 = load i32, i32* %mode, align 4, !dbg !6091, !tbaa !3840
  %call3 = call i32 @mkdirat(i32 %10, i8* %11, i32 %12) #3, !dbg !6092
  store i32 %call3, i32* %result, align 4, !dbg !6093, !tbaa !3840
  br label %if.end.6, !dbg !6094

if.else:                                          ; preds = %if.end
  %narrow4 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !6095
  %13 = load i8*, i8** %narrow4, align 8, !dbg !6095, !tbaa !5537
  %14 = load i32, i32* %mode, align 4, !dbg !6096, !tbaa !3840
  %call5 = call i32 @mkdir(i8* %13, i32 %14) #3, !dbg !6097
  store i32 %call5, i32* %result, align 4, !dbg !6098, !tbaa !3840
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.2
  %15 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !6099, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %15), !dbg !6100
  %16 = bitcast %struct._ts** %_save to i8*, !dbg !6101
  call void @llvm.lifetime.end(i64 8, i8* %16) #3, !dbg !6101
  %17 = load i32, i32* %result, align 4, !dbg !6102, !tbaa !3840
  %cmp7 = icmp slt i32 %17, 0, !dbg !6104
  br i1 %cmp7, label %if.then.8, label %if.end.10, !dbg !6105

if.then.8:                                        ; preds = %if.end.6
  %call9 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !6106
  store %struct._object* %call9, %struct._object** %return_value, align 8, !dbg !6108, !tbaa !3867
  br label %exit, !dbg !6109

if.end.10:                                        ; preds = %if.end.6
  store %struct._object* @_Py_NoneStruct, %struct._object** %return_value, align 8, !dbg !6110, !tbaa !3867
  %18 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6111, !tbaa !3977
  %inc = add i64 %18, 1, !dbg !6111
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6111, !tbaa !3977
  br label %exit, !dbg !6112

exit:                                             ; preds = %if.end.10, %if.then.8
  call void @path_cleanup(%struct.path_t* %path), !dbg !6113
  %19 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !6114, !tbaa !3867
  store %struct._object* %19, %struct._object** %retval, !dbg !6115
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6115

cleanup:                                          ; preds = %exit, %if.then
  %20 = bitcast i32* %result to i8*, !dbg !6116
  call void @llvm.lifetime.end(i64 4, i8* %20) #3, !dbg !6116
  %21 = bitcast %struct._object** %return_value to i8*, !dbg !6116
  call void @llvm.lifetime.end(i64 8, i8* %21) #3, !dbg !6116
  %22 = bitcast i32* %dir_fd to i8*, !dbg !6116
  call void @llvm.lifetime.end(i64 4, i8* %22) #3, !dbg !6116
  %23 = bitcast i32* %mode to i8*, !dbg !6116
  call void @llvm.lifetime.end(i64 4, i8* %23) #3, !dbg !6116
  %24 = bitcast %struct.path_t* %path to i8*, !dbg !6116
  call void @llvm.lifetime.end(i64 72, i8* %24) #3, !dbg !6116
  %25 = load %struct._object*, %struct._object** %retval, !dbg !6116
  ret %struct._object* %25, !dbg !6116
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_nice(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %increment = alloca i32, align 4
  %value = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1351, metadata !3844), !dbg !6117
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1352, metadata !3844), !dbg !6118
  %0 = bitcast i32* %increment to i8*, !dbg !6119
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !6119
  call void @llvm.dbg.declare(metadata i32* %increment, metadata !1353, metadata !3844), !dbg !6120
  %1 = bitcast i32* %value to i8*, !dbg !6119
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !6119
  call void @llvm.dbg.declare(metadata i32* %value, metadata !1354, metadata !3844), !dbg !6121
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6122, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.207, i32 0, i32 0), i32* %increment), !dbg !6124
  %tobool = icmp ne i32 %call, 0, !dbg !6124
  br i1 %tobool, label %if.end, label %if.then, !dbg !6125

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6126
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6126

if.end:                                           ; preds = %entry
  %call1 = call i32* @__errno_location() #1, !dbg !6127
  store i32 0, i32* %call1, align 4, !dbg !6128, !tbaa !3840
  %3 = load i32, i32* %increment, align 4, !dbg !6129, !tbaa !3840
  %call2 = call i32 @nice(i32 %3) #3, !dbg !6130
  store i32 %call2, i32* %value, align 4, !dbg !6131, !tbaa !3840
  %4 = load i32, i32* %value, align 4, !dbg !6132, !tbaa !3840
  %cmp = icmp eq i32 %4, -1, !dbg !6134
  br i1 %cmp, label %land.lhs.true, label %if.end.7, !dbg !6135

land.lhs.true:                                    ; preds = %if.end
  %call3 = call i32* @__errno_location() #1, !dbg !6136
  %5 = load i32, i32* %call3, align 4, !dbg !6138, !tbaa !3840
  %cmp4 = icmp ne i32 %5, 0, !dbg !6139
  br i1 %cmp4, label %if.then.5, label %if.end.7, !dbg !6140

if.then.5:                                        ; preds = %land.lhs.true
  %call6 = call %struct._object* @posix_error(), !dbg !6141
  store %struct._object* %call6, %struct._object** %retval, !dbg !6142
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6142

if.end.7:                                         ; preds = %land.lhs.true, %if.end
  %6 = load i32, i32* %value, align 4, !dbg !6143, !tbaa !3840
  %conv = sext i32 %6 to i64, !dbg !6144
  %call8 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !6145
  store %struct._object* %call8, %struct._object** %retval, !dbg !6146
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6146

cleanup:                                          ; preds = %if.end.7, %if.then.5, %if.then
  %7 = bitcast i32* %value to i8*, !dbg !6147
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !6147
  %8 = bitcast i32* %increment to i8*, !dbg !6147
  call void @llvm.lifetime.end(i64 4, i8* %8) #3, !dbg !6147
  %9 = load %struct._object*, %struct._object** %retval, !dbg !6147
  ret %struct._object* %9, !dbg !6147
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getpriority(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %which = alloca i32, align 4
  %who = alloca i32, align 4
  %retval1 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1357, metadata !3844), !dbg !6148
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1358, metadata !3844), !dbg !6149
  %0 = bitcast i32* %which to i8*, !dbg !6150
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !6150
  call void @llvm.dbg.declare(metadata i32* %which, metadata !1359, metadata !3844), !dbg !6151
  %1 = bitcast i32* %who to i8*, !dbg !6150
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !6150
  call void @llvm.dbg.declare(metadata i32* %who, metadata !1360, metadata !3844), !dbg !6152
  %2 = bitcast i32* %retval1 to i8*, !dbg !6150
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !6150
  call void @llvm.dbg.declare(metadata i32* %retval1, metadata !1361, metadata !3844), !dbg !6153
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6154, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.208, i32 0, i32 0), i32* %which, i32* %who), !dbg !6156
  %tobool = icmp ne i32 %call, 0, !dbg !6156
  br i1 %tobool, label %if.end, label %if.then, !dbg !6157

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6158
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6158

if.end:                                           ; preds = %entry
  %call2 = call i32* @__errno_location() #1, !dbg !6159
  store i32 0, i32* %call2, align 4, !dbg !6160, !tbaa !3840
  %4 = load i32, i32* %which, align 4, !dbg !6161, !tbaa !3840
  %5 = load i32, i32* %who, align 4, !dbg !6162, !tbaa !3840
  %call3 = call i32 @getpriority(i32 %4, i32 %5) #3, !dbg !6163
  store i32 %call3, i32* %retval1, align 4, !dbg !6164, !tbaa !3840
  %call4 = call i32* @__errno_location() #1, !dbg !6165
  %6 = load i32, i32* %call4, align 4, !dbg !6167, !tbaa !3840
  %cmp = icmp ne i32 %6, 0, !dbg !6168
  br i1 %cmp, label %if.then.5, label %if.end.7, !dbg !6169

if.then.5:                                        ; preds = %if.end
  %call6 = call %struct._object* @posix_error(), !dbg !6170
  store %struct._object* %call6, %struct._object** %retval, !dbg !6171
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6171

if.end.7:                                         ; preds = %if.end
  %7 = load i32, i32* %retval1, align 4, !dbg !6172, !tbaa !3840
  %conv = sext i32 %7 to i64, !dbg !6173
  %call8 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !6174
  store %struct._object* %call8, %struct._object** %retval, !dbg !6175
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6175

cleanup:                                          ; preds = %if.end.7, %if.then.5, %if.then
  %8 = bitcast i32* %retval1 to i8*, !dbg !6176
  call void @llvm.lifetime.end(i64 4, i8* %8) #3, !dbg !6176
  %9 = bitcast i32* %who to i8*, !dbg !6176
  call void @llvm.lifetime.end(i64 4, i8* %9) #3, !dbg !6176
  %10 = bitcast i32* %which to i8*, !dbg !6176
  call void @llvm.lifetime.end(i64 4, i8* %10) #3, !dbg !6176
  %11 = load %struct._object*, %struct._object** %retval, !dbg !6176
  ret %struct._object* %11, !dbg !6176
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_setpriority(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %which = alloca i32, align 4
  %who = alloca i32, align 4
  %prio = alloca i32, align 4
  %retval1 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1364, metadata !3844), !dbg !6177
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1365, metadata !3844), !dbg !6178
  %0 = bitcast i32* %which to i8*, !dbg !6179
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !6179
  call void @llvm.dbg.declare(metadata i32* %which, metadata !1366, metadata !3844), !dbg !6180
  %1 = bitcast i32* %who to i8*, !dbg !6179
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !6179
  call void @llvm.dbg.declare(metadata i32* %who, metadata !1367, metadata !3844), !dbg !6181
  %2 = bitcast i32* %prio to i8*, !dbg !6179
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !6179
  call void @llvm.dbg.declare(metadata i32* %prio, metadata !1368, metadata !3844), !dbg !6182
  %3 = bitcast i32* %retval1 to i8*, !dbg !6179
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !6179
  call void @llvm.dbg.declare(metadata i32* %retval1, metadata !1369, metadata !3844), !dbg !6183
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6184, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.209, i32 0, i32 0), i32* %which, i32* %who, i32* %prio), !dbg !6186
  %tobool = icmp ne i32 %call, 0, !dbg !6186
  br i1 %tobool, label %if.end, label %if.then, !dbg !6187

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6188
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6188

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %which, align 4, !dbg !6189, !tbaa !3840
  %6 = load i32, i32* %who, align 4, !dbg !6190, !tbaa !3840
  %7 = load i32, i32* %prio, align 4, !dbg !6191, !tbaa !3840
  %call2 = call i32 @setpriority(i32 %5, i32 %6, i32 %7) #3, !dbg !6192
  store i32 %call2, i32* %retval1, align 4, !dbg !6193, !tbaa !3840
  %8 = load i32, i32* %retval1, align 4, !dbg !6194, !tbaa !3840
  %cmp = icmp eq i32 %8, -1, !dbg !6196
  br i1 %cmp, label %if.then.3, label %if.end.5, !dbg !6197

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !6198
  store %struct._object* %call4, %struct._object** %retval, !dbg !6199
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6199

if.end.5:                                         ; preds = %if.end
  %9 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6200, !tbaa !3977
  %inc = add i64 %9, 1, !dbg !6200
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6200, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !6201
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6201

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %10 = bitcast i32* %retval1 to i8*, !dbg !6202
  call void @llvm.lifetime.end(i64 4, i8* %10) #3, !dbg !6202
  %11 = bitcast i32* %prio to i8*, !dbg !6202
  call void @llvm.lifetime.end(i64 4, i8* %11) #3, !dbg !6202
  %12 = bitcast i32* %who to i8*, !dbg !6202
  call void @llvm.lifetime.end(i64 4, i8* %12) #3, !dbg !6202
  %13 = bitcast i32* %which to i8*, !dbg !6202
  call void @llvm.lifetime.end(i64 4, i8* %13) #3, !dbg !6202
  %14 = load %struct._object*, %struct._object** %retval, !dbg !6202
  ret %struct._object* %14, !dbg !6202
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_readlink(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %dir_fd = alloca i32, align 4
  %buffer = alloca [4096 x i8], align 16
  %length = alloca i64, align 8
  %return_value = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1372, metadata !3844), !dbg !6203
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1373, metadata !3844), !dbg !6204
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1374, metadata !3844), !dbg !6205
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !6206
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !6206
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !1375, metadata !3844), !dbg !6207
  %1 = bitcast i32* %dir_fd to i8*, !dbg !6208
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !6208
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !1376, metadata !3844), !dbg !6209
  store i32 -100, i32* %dir_fd, align 4, !dbg !6209, !tbaa !3840
  %2 = bitcast [4096 x i8]* %buffer to i8*, !dbg !6210
  call void @llvm.lifetime.start(i64 4096, i8* %2) #3, !dbg !6210
  call void @llvm.dbg.declare(metadata [4096 x i8]* %buffer, metadata !1377, metadata !3844), !dbg !6211
  %3 = bitcast i64* %length to i8*, !dbg !6212
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !6212
  call void @llvm.dbg.declare(metadata i64* %length, metadata !1381, metadata !3844), !dbg !6213
  %4 = bitcast %struct._object** %return_value to i8*, !dbg !6214
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !6214
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1382, metadata !3844), !dbg !6215
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !6215, !tbaa !3867
  %5 = bitcast %struct.path_t* %path to i8*, !dbg !6216
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 72, i32 8, i1 false), !dbg !6216
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !6217
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.44, i32 0, i32 0), i8** %function_name, align 8, !dbg !6218, !tbaa !5512
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6219, !tbaa !3867
  %7 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !6221, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %6, %struct._object* %7, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.210, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @posix_readlink.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dir_fd), !dbg !6222
  %tobool = icmp ne i32 %call, 0, !dbg !6222
  br i1 %tobool, label %if.end, label %if.then, !dbg !6223

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6224
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6224

if.end:                                           ; preds = %entry
  %8 = bitcast %struct._ts** %_save to i8*, !dbg !6225
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !6225
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1383, metadata !3844), !dbg !6226
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !6227
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !6228, !tbaa !3867
  %9 = load i32, i32* %dir_fd, align 4, !dbg !6229, !tbaa !3840
  %cmp = icmp ne i32 %9, -100, !dbg !6231
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !6232

if.then.2:                                        ; preds = %if.end
  %10 = load i32, i32* %dir_fd, align 4, !dbg !6233, !tbaa !3840
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !6234
  %11 = load i8*, i8** %narrow, align 8, !dbg !6234, !tbaa !5537
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %buffer, i32 0, i32 0, !dbg !6235
  %call3 = call i64 @readlinkat(i32 %10, i8* %11, i8* %arraydecay, i64 4096) #3, !dbg !6236
  store i64 %call3, i64* %length, align 8, !dbg !6237, !tbaa !3904
  br label %if.end.7, !dbg !6238

if.else:                                          ; preds = %if.end
  %narrow4 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !6239
  %12 = load i8*, i8** %narrow4, align 8, !dbg !6239, !tbaa !5537
  %arraydecay5 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buffer, i32 0, i32 0, !dbg !6240
  %call6 = call i64 @readlink(i8* %12, i8* %arraydecay5, i64 4096) #3, !dbg !6241
  store i64 %call6, i64* %length, align 8, !dbg !6242, !tbaa !3904
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.2
  %13 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !6243, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %13), !dbg !6244
  %14 = bitcast %struct._ts** %_save to i8*, !dbg !6245
  call void @llvm.lifetime.end(i64 8, i8* %14) #3, !dbg !6245
  %15 = load i64, i64* %length, align 8, !dbg !6246, !tbaa !3904
  %cmp8 = icmp slt i64 %15, 0, !dbg !6248
  br i1 %cmp8, label %if.then.9, label %if.end.11, !dbg !6249

if.then.9:                                        ; preds = %if.end.7
  %call10 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !6250
  store %struct._object* %call10, %struct._object** %return_value, align 8, !dbg !6252, !tbaa !3867
  br label %exit, !dbg !6253

if.end.11:                                        ; preds = %if.end.7
  %object = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 8, !dbg !6254
  %16 = load %struct._object*, %struct._object** %object, align 8, !dbg !6254, !tbaa !6256
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1, !dbg !6257
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6257, !tbaa !3892
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 19, !dbg !6258
  %18 = load i64, i64* %tp_flags, align 8, !dbg !6258, !tbaa !6259
  %and = and i64 %18, 268435456, !dbg !6260
  %cmp12 = icmp ne i64 %and, 0, !dbg !6261
  br i1 %cmp12, label %if.then.13, label %if.else.16, !dbg !6262

if.then.13:                                       ; preds = %if.end.11
  %arraydecay14 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buffer, i32 0, i32 0, !dbg !6263
  %19 = load i64, i64* %length, align 8, !dbg !6264, !tbaa !3904
  %call15 = call %struct._object* @PyUnicode_DecodeFSDefaultAndSize(i8* %arraydecay14, i64 %19), !dbg !6265
  store %struct._object* %call15, %struct._object** %return_value, align 8, !dbg !6266, !tbaa !3867
  br label %if.end.19, !dbg !6267

if.else.16:                                       ; preds = %if.end.11
  %arraydecay17 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buffer, i32 0, i32 0, !dbg !6268
  %20 = load i64, i64* %length, align 8, !dbg !6269, !tbaa !3904
  %call18 = call %struct._object* @PyBytes_FromStringAndSize(i8* %arraydecay17, i64 %20), !dbg !6270
  store %struct._object* %call18, %struct._object** %return_value, align 8, !dbg !6271, !tbaa !3867
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.16, %if.then.13
  br label %exit, !dbg !6272

exit:                                             ; preds = %if.end.19, %if.then.9
  call void @path_cleanup(%struct.path_t* %path), !dbg !6273
  %21 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !6274, !tbaa !3867
  store %struct._object* %21, %struct._object** %retval, !dbg !6275
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6275

cleanup:                                          ; preds = %exit, %if.then
  %22 = bitcast %struct._object** %return_value to i8*, !dbg !6276
  call void @llvm.lifetime.end(i64 8, i8* %22) #3, !dbg !6276
  %23 = bitcast i64* %length to i8*, !dbg !6276
  call void @llvm.lifetime.end(i64 8, i8* %23) #3, !dbg !6276
  %24 = bitcast [4096 x i8]* %buffer to i8*, !dbg !6276
  call void @llvm.lifetime.end(i64 4096, i8* %24) #3, !dbg !6276
  %25 = bitcast i32* %dir_fd to i8*, !dbg !6276
  call void @llvm.lifetime.end(i64 4, i8* %25) #3, !dbg !6276
  %26 = bitcast %struct.path_t* %path to i8*, !dbg !6276
  call void @llvm.lifetime.end(i64 72, i8* %26) #3, !dbg !6276
  %27 = load %struct._object*, %struct._object** %retval, !dbg !6276
  ret %struct._object* %27, !dbg !6276
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_rename(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1387, metadata !3844), !dbg !6277
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1388, metadata !3844), !dbg !6278
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1389, metadata !3844), !dbg !6279
  %0 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6280, !tbaa !3867
  %1 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !6281, !tbaa !3867
  %call = call %struct._object* @internal_rename(%struct._object* %0, %struct._object* %1, i32 0), !dbg !6282
  ret %struct._object* %call, !dbg !6283
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_replace(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1411, metadata !3844), !dbg !6284
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1412, metadata !3844), !dbg !6285
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1413, metadata !3844), !dbg !6286
  %0 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6287, !tbaa !3867
  %1 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !6288, !tbaa !3867
  %call = call %struct._object* @internal_rename(%struct._object* %0, %struct._object* %1, i32 1), !dbg !6289
  ret %struct._object* %call, !dbg !6290
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_rmdir(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %dir_fd = alloca i32, align 4
  %result = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1416, metadata !3844), !dbg !6291
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1417, metadata !3844), !dbg !6292
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1418, metadata !3844), !dbg !6293
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !6294
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !6294
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !1419, metadata !3844), !dbg !6295
  %1 = bitcast i32* %dir_fd to i8*, !dbg !6296
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !6296
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !1420, metadata !3844), !dbg !6297
  store i32 -100, i32* %dir_fd, align 4, !dbg !6297, !tbaa !3840
  %2 = bitcast i32* %result to i8*, !dbg !6298
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !6298
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1421, metadata !3844), !dbg !6299
  %3 = bitcast %struct._object** %return_value to i8*, !dbg !6300
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !6300
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1422, metadata !3844), !dbg !6301
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !6301, !tbaa !3867
  %4 = bitcast %struct.path_t* %path to i8*, !dbg !6302
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 72, i32 8, i1 false), !dbg !6302
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !6303
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i32 0, i32 0), i8** %function_name, align 8, !dbg !6304, !tbaa !5512
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6305, !tbaa !3867
  %6 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !6307, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %5, %struct._object* %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.213, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @posix_rmdir.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dir_fd), !dbg !6308
  %tobool = icmp ne i32 %call, 0, !dbg !6308
  br i1 %tobool, label %if.end, label %if.then, !dbg !6309

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6310
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6310

if.end:                                           ; preds = %entry
  %7 = bitcast %struct._ts** %_save to i8*, !dbg !6311
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !6311
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1423, metadata !3844), !dbg !6312
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !6313
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !6314, !tbaa !3867
  %8 = load i32, i32* %dir_fd, align 4, !dbg !6315, !tbaa !3840
  %cmp = icmp ne i32 %8, -100, !dbg !6317
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !6318

if.then.2:                                        ; preds = %if.end
  %9 = load i32, i32* %dir_fd, align 4, !dbg !6319, !tbaa !3840
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !6320
  %10 = load i8*, i8** %narrow, align 8, !dbg !6320, !tbaa !5537
  %call3 = call i32 @unlinkat(i32 %9, i8* %10, i32 512) #3, !dbg !6321
  store i32 %call3, i32* %result, align 4, !dbg !6322, !tbaa !3840
  br label %if.end.6, !dbg !6323

if.else:                                          ; preds = %if.end
  %narrow4 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !6324
  %11 = load i8*, i8** %narrow4, align 8, !dbg !6324, !tbaa !5537
  %call5 = call i32 @rmdir(i8* %11) #3, !dbg !6325
  store i32 %call5, i32* %result, align 4, !dbg !6326, !tbaa !3840
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.2
  %12 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !6327, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %12), !dbg !6328
  %13 = bitcast %struct._ts** %_save to i8*, !dbg !6329
  call void @llvm.lifetime.end(i64 8, i8* %13) #3, !dbg !6329
  %14 = load i32, i32* %result, align 4, !dbg !6330, !tbaa !3840
  %tobool7 = icmp ne i32 %14, 0, !dbg !6330
  br i1 %tobool7, label %if.then.8, label %if.end.10, !dbg !6332

if.then.8:                                        ; preds = %if.end.6
  %call9 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !6333
  store %struct._object* %call9, %struct._object** %return_value, align 8, !dbg !6335, !tbaa !3867
  br label %exit, !dbg !6336

if.end.10:                                        ; preds = %if.end.6
  store %struct._object* @_Py_NoneStruct, %struct._object** %return_value, align 8, !dbg !6337, !tbaa !3867
  %15 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6338, !tbaa !3977
  %inc = add i64 %15, 1, !dbg !6338
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6338, !tbaa !3977
  br label %exit, !dbg !6339

exit:                                             ; preds = %if.end.10, %if.then.8
  call void @path_cleanup(%struct.path_t* %path), !dbg !6340
  %16 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !6341, !tbaa !3867
  store %struct._object* %16, %struct._object** %retval, !dbg !6342
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6342

cleanup:                                          ; preds = %exit, %if.then
  %17 = bitcast %struct._object** %return_value to i8*, !dbg !6343
  call void @llvm.lifetime.end(i64 8, i8* %17) #3, !dbg !6343
  %18 = bitcast i32* %result to i8*, !dbg !6343
  call void @llvm.lifetime.end(i64 4, i8* %18) #3, !dbg !6343
  %19 = bitcast i32* %dir_fd to i8*, !dbg !6343
  call void @llvm.lifetime.end(i64 4, i8* %19) #3, !dbg !6343
  %20 = bitcast %struct.path_t* %path to i8*, !dbg !6343
  call void @llvm.lifetime.end(i64 72, i8* %20) #3, !dbg !6343
  %21 = load %struct._object*, %struct._object** %retval, !dbg !6343
  ret %struct._object* %21, !dbg !6343
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stat_float_times(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %newval = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1427, metadata !3844), !dbg !6344
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1428, metadata !3844), !dbg !6345
  %0 = bitcast i32* %newval to i8*, !dbg !6346
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !6346
  call void @llvm.dbg.declare(metadata i32* %newval, metadata !1429, metadata !3844), !dbg !6347
  store i32 -1, i32* %newval, align 4, !dbg !6347, !tbaa !3840
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6348, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.214, i32 0, i32 0), i32* %newval), !dbg !6350
  %tobool = icmp ne i32 %call, 0, !dbg !6350
  br i1 %tobool, label %if.end, label %if.then, !dbg !6351

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6352
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6352

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_DeprecationWarning, align 8, !dbg !6353, !tbaa !3867
  %call1 = call i32 @PyErr_WarnEx(%struct._object* %2, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.215, i32 0, i32 0), i64 1), !dbg !6355
  %tobool2 = icmp ne i32 %call1, 0, !dbg !6355
  br i1 %tobool2, label %if.then.3, label %if.end.4, !dbg !6356

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !6357
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6357

if.end.4:                                         ; preds = %if.end
  %3 = load i32, i32* %newval, align 4, !dbg !6358, !tbaa !3840
  %cmp = icmp eq i32 %3, -1, !dbg !6360
  br i1 %cmp, label %if.then.5, label %if.end.7, !dbg !6361

if.then.5:                                        ; preds = %if.end.4
  %4 = load i32, i32* @_stat_float_times, align 4, !dbg !6362, !tbaa !3840
  %conv = sext i32 %4 to i64, !dbg !6362
  %call6 = call %struct._object* @PyBool_FromLong(i64 %conv), !dbg !6363
  store %struct._object* %call6, %struct._object** %retval, !dbg !6364
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6364

if.end.7:                                         ; preds = %if.end.4
  %5 = load i32, i32* %newval, align 4, !dbg !6365, !tbaa !3840
  store i32 %5, i32* @_stat_float_times, align 4, !dbg !6366, !tbaa !3840
  %6 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6367, !tbaa !3977
  %inc = add i64 %6, 1, !dbg !6367
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6367, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !6368
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6368

cleanup:                                          ; preds = %if.end.7, %if.then.5, %if.then.3, %if.then
  %7 = bitcast i32* %newval to i8*, !dbg !6369
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !6369
  %8 = load %struct._object*, %struct._object** %retval, !dbg !6369
  ret %struct._object* %8, !dbg !6369
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_symlink(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %src = alloca %struct.path_t, align 8
  %dst = alloca %struct.path_t, align 8
  %dir_fd = alloca i32, align 4
  %target_is_directory = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %result = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1432, metadata !3844), !dbg !6370
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1433, metadata !3844), !dbg !6371
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1434, metadata !3844), !dbg !6372
  %0 = bitcast %struct.path_t* %src to i8*, !dbg !6373
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !6373
  call void @llvm.dbg.declare(metadata %struct.path_t* %src, metadata !1435, metadata !3844), !dbg !6374
  %1 = bitcast %struct.path_t* %dst to i8*, !dbg !6375
  call void @llvm.lifetime.start(i64 72, i8* %1) #3, !dbg !6375
  call void @llvm.dbg.declare(metadata %struct.path_t* %dst, metadata !1436, metadata !3844), !dbg !6376
  %2 = bitcast i32* %dir_fd to i8*, !dbg !6377
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !6377
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !1437, metadata !3844), !dbg !6378
  store i32 -100, i32* %dir_fd, align 4, !dbg !6378, !tbaa !3840
  %3 = bitcast i32* %target_is_directory to i8*, !dbg !6379
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !6379
  call void @llvm.dbg.declare(metadata i32* %target_is_directory, metadata !1438, metadata !3844), !dbg !6380
  store i32 0, i32* %target_is_directory, align 4, !dbg !6380, !tbaa !3840
  %4 = bitcast %struct._object** %return_value to i8*, !dbg !6381
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !6381
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1439, metadata !3844), !dbg !6382
  %5 = bitcast i32* %result to i8*, !dbg !6383
  call void @llvm.lifetime.start(i64 4, i8* %5) #3, !dbg !6383
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1440, metadata !3844), !dbg !6384
  %6 = bitcast %struct.path_t* %src to i8*, !dbg !6385
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 72, i32 8, i1 false), !dbg !6385
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 0, !dbg !6386
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i32 0, i32 0), i8** %function_name, align 8, !dbg !6387, !tbaa !5512
  %argument_name = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 1, !dbg !6388
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.197, i32 0, i32 0), i8** %argument_name, align 8, !dbg !6389, !tbaa !6390
  %7 = bitcast %struct.path_t* %dst to i8*, !dbg !6391
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 72, i32 8, i1 false), !dbg !6391
  %function_name1 = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 0, !dbg !6392
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i32 0, i32 0), i8** %function_name1, align 8, !dbg !6393, !tbaa !5512
  %argument_name2 = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 1, !dbg !6394
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.198, i32 0, i32 0), i8** %argument_name2, align 8, !dbg !6395, !tbaa !6390
  %8 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6396, !tbaa !3867
  %9 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !6398, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %8, %struct._object* %9, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.217, i32 0, i32 0), i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @posix_symlink.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %src, i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %dst, i32* %target_is_directory, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dir_fd), !dbg !6399
  %tobool = icmp ne i32 %call, 0, !dbg !6399
  br i1 %tobool, label %if.end, label %if.then, !dbg !6400

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6401
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6401

if.end:                                           ; preds = %entry
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 5, !dbg !6402
  %10 = load i8*, i8** %narrow, align 8, !dbg !6402, !tbaa !5537
  %tobool3 = icmp ne i8* %10, null, !dbg !6404
  br i1 %tobool3, label %land.lhs.true, label %lor.lhs.false, !dbg !6405

land.lhs.true:                                    ; preds = %if.end
  %wide = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 4, !dbg !6406
  %11 = load i32*, i32** %wide, align 8, !dbg !6406, !tbaa !5939
  %tobool4 = icmp ne i32* %11, null, !dbg !6408
  br i1 %tobool4, label %if.then.10, label %lor.lhs.false, !dbg !6409

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.end
  %wide5 = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 4, !dbg !6410
  %12 = load i32*, i32** %wide5, align 8, !dbg !6410, !tbaa !5939
  %tobool6 = icmp ne i32* %12, null, !dbg !6413
  br i1 %tobool6, label %land.lhs.true.7, label %if.end.11, !dbg !6414

land.lhs.true.7:                                  ; preds = %lor.lhs.false
  %narrow8 = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 5, !dbg !6415
  %13 = load i8*, i8** %narrow8, align 8, !dbg !6415, !tbaa !5537
  %tobool9 = icmp ne i8* %13, null, !dbg !6417
  br i1 %tobool9, label %if.then.10, label %if.end.11, !dbg !6418

if.then.10:                                       ; preds = %land.lhs.true.7, %land.lhs.true
  %14 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !6419, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %14, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.218, i32 0, i32 0)), !dbg !6421
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !6422, !tbaa !3867
  br label %exit, !dbg !6423

if.end.11:                                        ; preds = %land.lhs.true.7, %lor.lhs.false
  %15 = bitcast %struct._ts** %_save to i8*, !dbg !6424
  call void @llvm.lifetime.start(i64 8, i8* %15) #3, !dbg !6424
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1441, metadata !3844), !dbg !6425
  %call12 = call %struct._ts* @PyEval_SaveThread(), !dbg !6426
  store %struct._ts* %call12, %struct._ts** %_save, align 8, !dbg !6427, !tbaa !3867
  %16 = load i32, i32* %dir_fd, align 4, !dbg !6428, !tbaa !3840
  %cmp = icmp ne i32 %16, -100, !dbg !6430
  br i1 %cmp, label %if.then.13, label %if.else, !dbg !6431

if.then.13:                                       ; preds = %if.end.11
  %narrow14 = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 5, !dbg !6432
  %17 = load i8*, i8** %narrow14, align 8, !dbg !6432, !tbaa !5537
  %18 = load i32, i32* %dir_fd, align 4, !dbg !6433, !tbaa !3840
  %narrow15 = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 5, !dbg !6434
  %19 = load i8*, i8** %narrow15, align 8, !dbg !6434, !tbaa !5537
  %call16 = call i32 @symlinkat(i8* %17, i32 %18, i8* %19) #3, !dbg !6435
  store i32 %call16, i32* %result, align 4, !dbg !6436, !tbaa !3840
  br label %if.end.20, !dbg !6437

if.else:                                          ; preds = %if.end.11
  %narrow17 = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 5, !dbg !6438
  %20 = load i8*, i8** %narrow17, align 8, !dbg !6438, !tbaa !5537
  %narrow18 = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 5, !dbg !6439
  %21 = load i8*, i8** %narrow18, align 8, !dbg !6439, !tbaa !5537
  %call19 = call i32 @symlink(i8* %20, i8* %21) #3, !dbg !6440
  store i32 %call19, i32* %result, align 4, !dbg !6441, !tbaa !3840
  br label %if.end.20

if.end.20:                                        ; preds = %if.else, %if.then.13
  %22 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !6442, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %22), !dbg !6443
  %23 = bitcast %struct._ts** %_save to i8*, !dbg !6444
  call void @llvm.lifetime.end(i64 8, i8* %23) #3, !dbg !6444
  %24 = load i32, i32* %result, align 4, !dbg !6445, !tbaa !3840
  %tobool21 = icmp ne i32 %24, 0, !dbg !6445
  br i1 %tobool21, label %if.then.22, label %if.end.24, !dbg !6447

if.then.22:                                       ; preds = %if.end.20
  %call23 = call %struct._object* @path_error2(%struct.path_t* %src, %struct.path_t* %dst), !dbg !6448
  store %struct._object* %call23, %struct._object** %return_value, align 8, !dbg !6450, !tbaa !3867
  br label %exit, !dbg !6451

if.end.24:                                        ; preds = %if.end.20
  store %struct._object* @_Py_NoneStruct, %struct._object** %return_value, align 8, !dbg !6452, !tbaa !3867
  %25 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6453, !tbaa !3977
  %inc = add i64 %25, 1, !dbg !6453
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6453, !tbaa !3977
  br label %exit, !dbg !6454

exit:                                             ; preds = %if.end.24, %if.then.22, %if.then.10
  call void @path_cleanup(%struct.path_t* %src), !dbg !6455
  call void @path_cleanup(%struct.path_t* %dst), !dbg !6456
  %26 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !6457, !tbaa !3867
  store %struct._object* %26, %struct._object** %retval, !dbg !6458
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6458

cleanup:                                          ; preds = %exit, %if.then
  %27 = bitcast i32* %result to i8*, !dbg !6459
  call void @llvm.lifetime.end(i64 4, i8* %27) #3, !dbg !6459
  %28 = bitcast %struct._object** %return_value to i8*, !dbg !6459
  call void @llvm.lifetime.end(i64 8, i8* %28) #3, !dbg !6459
  %29 = bitcast i32* %target_is_directory to i8*, !dbg !6459
  call void @llvm.lifetime.end(i64 4, i8* %29) #3, !dbg !6459
  %30 = bitcast i32* %dir_fd to i8*, !dbg !6459
  call void @llvm.lifetime.end(i64 4, i8* %30) #3, !dbg !6459
  %31 = bitcast %struct.path_t* %dst to i8*, !dbg !6459
  call void @llvm.lifetime.end(i64 72, i8* %31) #3, !dbg !6459
  %32 = bitcast %struct.path_t* %src to i8*, !dbg !6459
  call void @llvm.lifetime.end(i64 72, i8* %32) #3, !dbg !6459
  %33 = load %struct._object*, %struct._object** %retval, !dbg !6459
  ret %struct._object* %33, !dbg !6459
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_system(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %sts = alloca i64, align 8
  %command_obj = alloca %struct._object*, align 8
  %command = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1445, metadata !3844), !dbg !6460
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1446, metadata !3844), !dbg !6461
  %0 = bitcast i64* %sts to i8*, !dbg !6462
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !6462
  call void @llvm.dbg.declare(metadata i64* %sts, metadata !1447, metadata !3844), !dbg !6463
  %1 = bitcast %struct._object** %command_obj to i8*, !dbg !6464
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !6464
  call void @llvm.dbg.declare(metadata %struct._object** %command_obj, metadata !1448, metadata !3844), !dbg !6465
  %2 = bitcast i8** %command to i8*, !dbg !6466
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !6466
  call void @llvm.dbg.declare(metadata i8** %command, metadata !1449, metadata !3844), !dbg !6467
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6468, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.219, i32 0, i32 0), i32 (%struct._object*, i8*)* @PyUnicode_FSConverter, %struct._object** %command_obj), !dbg !6470
  %tobool = icmp ne i32 %call, 0, !dbg !6470
  br i1 %tobool, label %if.end, label %if.then, !dbg !6471

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6472
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6472

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %command_obj, align 8, !dbg !6473, !tbaa !3867
  %call1 = call i8* @PyBytes_AsString(%struct._object* %4), !dbg !6474
  store i8* %call1, i8** %command, align 8, !dbg !6475, !tbaa !3867
  %5 = bitcast %struct._ts** %_save to i8*, !dbg !6476
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !6476
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1450, metadata !3844), !dbg !6477
  %call2 = call %struct._ts* @PyEval_SaveThread(), !dbg !6478
  store %struct._ts* %call2, %struct._ts** %_save, align 8, !dbg !6479, !tbaa !3867
  %6 = load i8*, i8** %command, align 8, !dbg !6480, !tbaa !3867
  %call3 = call i32 @system(i8* %6), !dbg !6481
  %conv = sext i32 %call3 to i64, !dbg !6481
  store i64 %conv, i64* %sts, align 8, !dbg !6482, !tbaa !3904
  %7 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !6483, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %7), !dbg !6484
  %8 = bitcast %struct._ts** %_save to i8*, !dbg !6485
  call void @llvm.lifetime.end(i64 8, i8* %8) #3, !dbg !6485
  br label %do.body, !dbg !6486

do.body:                                          ; preds = %if.end
  %9 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6487
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !6487
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1452, metadata !3844), !dbg !6489
  %10 = load %struct._object*, %struct._object** %command_obj, align 8, !dbg !6490, !tbaa !3867
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8, !dbg !6489, !tbaa !3867
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6491, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0, !dbg !6493
  %12 = load i64, i64* %ob_refcnt, align 8, !dbg !6494, !tbaa !3977
  %dec = add i64 %12, -1, !dbg !6494
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !6494, !tbaa !3977
  %cmp = icmp ne i64 %dec, 0, !dbg !6495
  br i1 %cmp, label %if.then.5, label %if.else, !dbg !6496

if.then.5:                                        ; preds = %do.body
  br label %if.end.6, !dbg !6497

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6499, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1, !dbg !6501
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6501, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4, !dbg !6502
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6502, !tbaa !3986
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6503, !tbaa !3867
  call void %15(%struct._object* %16), !dbg !6504
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  %17 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6505
  call void @llvm.lifetime.end(i64 8, i8* %17) #3, !dbg !6505
  br label %do.cond, !dbg !6507

do.cond:                                          ; preds = %if.end.6
  br label %do.end, !dbg !6508

do.end:                                           ; preds = %do.cond
  %18 = load i64, i64* %sts, align 8, !dbg !6510, !tbaa !3904
  %call7 = call %struct._object* @PyLong_FromLong(i64 %18), !dbg !6511
  store %struct._object* %call7, %struct._object** %retval, !dbg !6512
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6512

cleanup:                                          ; preds = %do.end, %if.then
  %19 = bitcast i8** %command to i8*, !dbg !6513
  call void @llvm.lifetime.end(i64 8, i8* %19) #3, !dbg !6513
  %20 = bitcast %struct._object** %command_obj to i8*, !dbg !6513
  call void @llvm.lifetime.end(i64 8, i8* %20) #3, !dbg !6513
  %21 = bitcast i64* %sts to i8*, !dbg !6513
  call void @llvm.lifetime.end(i64 8, i8* %21) #3, !dbg !6513
  %22 = load %struct._object*, %struct._object** %retval, !dbg !6513
  ret %struct._object* %22, !dbg !6513
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_umask(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1456, metadata !3844), !dbg !6514
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1457, metadata !3844), !dbg !6515
  %0 = bitcast i32* %i to i8*, !dbg !6516
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !6516
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1458, metadata !3844), !dbg !6517
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6518, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.220, i32 0, i32 0), i32* %i), !dbg !6520
  %tobool = icmp ne i32 %call, 0, !dbg !6520
  br i1 %tobool, label %if.end, label %if.then, !dbg !6521

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6522
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6522

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %i, align 4, !dbg !6523, !tbaa !3840
  %call1 = call i32 @umask(i32 %2) #3, !dbg !6524
  store i32 %call1, i32* %i, align 4, !dbg !6525, !tbaa !3840
  %3 = load i32, i32* %i, align 4, !dbg !6526, !tbaa !3840
  %cmp = icmp slt i32 %3, 0, !dbg !6528
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !6529

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !6530
  store %struct._object* %call3, %struct._object** %retval, !dbg !6531
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6531

if.end.4:                                         ; preds = %if.end
  %4 = load i32, i32* %i, align 4, !dbg !6532, !tbaa !3840
  %conv = sext i32 %4 to i64, !dbg !6533
  %call5 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !6534
  store %struct._object* %call5, %struct._object** %retval, !dbg !6535
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6535

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %5 = bitcast i32* %i to i8*, !dbg !6536
  call void @llvm.lifetime.end(i64 4, i8* %5) #3, !dbg !6536
  %6 = load %struct._object*, %struct._object** %retval, !dbg !6536
  ret %struct._object* %6, !dbg !6536
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_uname(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  %u = alloca %struct.utsname, align 1
  %res = alloca i32, align 4
  %value = alloca %struct._object*, align 8
  %_save = alloca %struct._ts*, align 8
  %cleanup.dest.slot = alloca i32
  %o = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %o13 = alloca %struct._object*, align 8
  %_py_decref_tmp19 = alloca %struct._object*, align 8
  %o36 = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %o59 = alloca %struct._object*, align 8
  %_py_decref_tmp65 = alloca %struct._object*, align 8
  %o82 = alloca %struct._object*, align 8
  %_py_decref_tmp88 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1461, metadata !3844), !dbg !6537
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !1462, metadata !3844), !dbg !6538
  %0 = bitcast %struct.utsname* %u to i8*, !dbg !6539
  call void @llvm.lifetime.start(i64 390, i8* %0) #3, !dbg !6539
  call void @llvm.dbg.declare(metadata %struct.utsname* %u, metadata !1463, metadata !3844), !dbg !6540
  %1 = bitcast i32* %res to i8*, !dbg !6541
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !6541
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1476, metadata !3844), !dbg !6542
  %2 = bitcast %struct._object** %value to i8*, !dbg !6543
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !6543
  call void @llvm.dbg.declare(metadata %struct._object** %value, metadata !1477, metadata !3844), !dbg !6544
  %3 = bitcast %struct._ts** %_save to i8*, !dbg !6545
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !6545
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1478, metadata !3844), !dbg !6546
  %call = call %struct._ts* @PyEval_SaveThread(), !dbg !6547
  store %struct._ts* %call, %struct._ts** %_save, align 8, !dbg !6548, !tbaa !3867
  %call1 = call i32 @uname(%struct.utsname* %u) #3, !dbg !6549
  store i32 %call1, i32* %res, align 4, !dbg !6550, !tbaa !3840
  %4 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !6551, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %4), !dbg !6552
  %5 = bitcast %struct._ts** %_save to i8*, !dbg !6553
  call void @llvm.lifetime.end(i64 8, i8* %5) #3, !dbg !6553
  %6 = load i32, i32* %res, align 4, !dbg !6554, !tbaa !3840
  %cmp = icmp slt i32 %6, 0, !dbg !6556
  br i1 %cmp, label %if.then, label %if.end, !dbg !6557

if.then:                                          ; preds = %entry
  %call2 = call %struct._object* @posix_error(), !dbg !6558
  store %struct._object* %call2, %struct._object** %retval, !dbg !6559
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.105, !dbg !6559

if.end:                                           ; preds = %entry
  %call3 = call %struct._object* @PyStructSequence_New(%struct._typeobject* @UnameResultType), !dbg !6560
  store %struct._object* %call3, %struct._object** %value, align 8, !dbg !6561, !tbaa !3867
  %7 = load %struct._object*, %struct._object** %value, align 8, !dbg !6562, !tbaa !3867
  %cmp4 = icmp eq %struct._object* %7, null, !dbg !6564
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !6565

if.then.5:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !6566
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.105, !dbg !6566

if.end.6:                                         ; preds = %if.end
  %8 = bitcast %struct._object** %o to i8*, !dbg !6567
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !6567
  call void @llvm.dbg.declare(metadata %struct._object** %o, metadata !1480, metadata !3844), !dbg !6568
  %sysname = getelementptr inbounds %struct.utsname, %struct.utsname* %u, i32 0, i32 0, !dbg !6569
  %arraydecay = getelementptr inbounds [65 x i8], [65 x i8]* %sysname, i32 0, i32 0, !dbg !6570
  %call7 = call %struct._object* @PyUnicode_DecodeFSDefault(i8* %arraydecay), !dbg !6571
  store %struct._object* %call7, %struct._object** %o, align 8, !dbg !6568, !tbaa !3867
  %9 = load %struct._object*, %struct._object** %o, align 8, !dbg !6572, !tbaa !3867
  %tobool = icmp ne %struct._object* %9, null, !dbg !6572
  br i1 %tobool, label %if.end.12, label %if.then.8, !dbg !6573

if.then.8:                                        ; preds = %if.end.6
  br label %do.body, !dbg !6574

do.body:                                          ; preds = %if.then.8
  %10 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6576
  call void @llvm.lifetime.start(i64 8, i8* %10) #3, !dbg !6576
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1482, metadata !3844), !dbg !6578
  %11 = load %struct._object*, %struct._object** %value, align 8, !dbg !6579, !tbaa !3867
  store %struct._object* %11, %struct._object** %_py_decref_tmp, align 8, !dbg !6578, !tbaa !3867
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6580, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0, !dbg !6582
  %13 = load i64, i64* %ob_refcnt, align 8, !dbg !6583, !tbaa !3977
  %dec = add i64 %13, -1, !dbg !6583
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !6583, !tbaa !3977
  %cmp9 = icmp ne i64 %dec, 0, !dbg !6584
  br i1 %cmp9, label %if.then.10, label %if.else, !dbg !6585

if.then.10:                                       ; preds = %do.body
  br label %if.end.11, !dbg !6586

if.else:                                          ; preds = %do.body
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6588, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1, !dbg !6590
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6590, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 4, !dbg !6591
  %16 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6591, !tbaa !3986
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6592, !tbaa !3867
  call void %16(%struct._object* %17), !dbg !6593
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.10
  %18 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6594
  call void @llvm.lifetime.end(i64 8, i8* %18) #3, !dbg !6594
  br label %do.cond, !dbg !6596

do.cond:                                          ; preds = %if.end.11
  br label %do.end, !dbg !6597

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !6599
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6601

if.end.12:                                        ; preds = %if.end.6
  %19 = load %struct._object*, %struct._object** %o, align 8, !dbg !6602, !tbaa !3867
  %20 = load %struct._object*, %struct._object** %value, align 8, !dbg !6604, !tbaa !3867
  %21 = bitcast %struct._object* %20 to %struct.PyTupleObject*, !dbg !6605
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %21, i32 0, i32 1, !dbg !6606
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !6607
  store %struct._object* %19, %struct._object** %arrayidx, align 8, !dbg !6608, !tbaa !3867
  store i32 0, i32* %cleanup.dest.slot, !dbg !6609
  br label %cleanup, !dbg !6609

cleanup:                                          ; preds = %if.end.12, %do.end
  %22 = bitcast %struct._object** %o to i8*, !dbg !6610
  call void @llvm.lifetime.end(i64 8, i8* %22) #3, !dbg !6610
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  %23 = bitcast %struct._object** %o13 to i8*, !dbg !6613
  call void @llvm.lifetime.start(i64 8, i8* %23) #3, !dbg !6613
  call void @llvm.dbg.declare(metadata %struct._object** %o13, metadata !1486, metadata !3844), !dbg !6614
  %nodename = getelementptr inbounds %struct.utsname, %struct.utsname* %u, i32 0, i32 1, !dbg !6615
  %arraydecay14 = getelementptr inbounds [65 x i8], [65 x i8]* %nodename, i32 0, i32 0, !dbg !6616
  %call15 = call %struct._object* @PyUnicode_DecodeFSDefault(i8* %arraydecay14), !dbg !6617
  store %struct._object* %call15, %struct._object** %o13, align 8, !dbg !6614, !tbaa !3867
  %24 = load %struct._object*, %struct._object** %o13, align 8, !dbg !6618, !tbaa !3867
  %tobool16 = icmp ne %struct._object* %24, null, !dbg !6618
  br i1 %tobool16, label %if.end.30, label %if.then.17, !dbg !6619

if.then.17:                                       ; preds = %cleanup.cont
  br label %do.body.18, !dbg !6620

do.body.18:                                       ; preds = %if.then.17
  %25 = bitcast %struct._object** %_py_decref_tmp19 to i8*, !dbg !6622
  call void @llvm.lifetime.start(i64 8, i8* %25) #3, !dbg !6622
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp19, metadata !1488, metadata !3844), !dbg !6624
  %26 = load %struct._object*, %struct._object** %value, align 8, !dbg !6625, !tbaa !3867
  store %struct._object* %26, %struct._object** %_py_decref_tmp19, align 8, !dbg !6624, !tbaa !3867
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8, !dbg !6626, !tbaa !3867
  %ob_refcnt20 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0, !dbg !6628
  %28 = load i64, i64* %ob_refcnt20, align 8, !dbg !6629, !tbaa !3977
  %dec21 = add i64 %28, -1, !dbg !6629
  store i64 %dec21, i64* %ob_refcnt20, align 8, !dbg !6629, !tbaa !3977
  %cmp22 = icmp ne i64 %dec21, 0, !dbg !6630
  br i1 %cmp22, label %if.then.23, label %if.else.24, !dbg !6631

if.then.23:                                       ; preds = %do.body.18
  br label %if.end.27, !dbg !6632

if.else.24:                                       ; preds = %do.body.18
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8, !dbg !6634, !tbaa !3867
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1, !dbg !6636
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8, !dbg !6636, !tbaa !3892
  %tp_dealloc26 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4, !dbg !6637
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc26, align 8, !dbg !6637, !tbaa !3986
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8, !dbg !6638, !tbaa !3867
  call void %31(%struct._object* %32), !dbg !6639
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.24, %if.then.23
  %33 = bitcast %struct._object** %_py_decref_tmp19 to i8*, !dbg !6640
  call void @llvm.lifetime.end(i64 8, i8* %33) #3, !dbg !6640
  br label %do.cond.28, !dbg !6642

do.cond.28:                                       ; preds = %if.end.27
  br label %do.end.29, !dbg !6643

do.end.29:                                        ; preds = %do.cond.28
  store %struct._object* null, %struct._object** %retval, !dbg !6645
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.33, !dbg !6647

if.end.30:                                        ; preds = %cleanup.cont
  %34 = load %struct._object*, %struct._object** %o13, align 8, !dbg !6648, !tbaa !3867
  %35 = load %struct._object*, %struct._object** %value, align 8, !dbg !6650, !tbaa !3867
  %36 = bitcast %struct._object* %35 to %struct.PyTupleObject*, !dbg !6651
  %ob_item31 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %36, i32 0, i32 1, !dbg !6652
  %arrayidx32 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item31, i32 0, i64 1, !dbg !6653
  store %struct._object* %34, %struct._object** %arrayidx32, align 8, !dbg !6654, !tbaa !3867
  store i32 0, i32* %cleanup.dest.slot, !dbg !6655
  br label %cleanup.33, !dbg !6655

cleanup.33:                                       ; preds = %if.end.30, %do.end.29
  %37 = bitcast %struct._object** %o13 to i8*, !dbg !6656
  call void @llvm.lifetime.end(i64 8, i8* %37) #3, !dbg !6656
  %cleanup.dest.34 = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.2

LeafBlock.2:                                      ; preds = %cleanup.33
  %SwitchLeaf3 = icmp eq i32 %cleanup.dest.34, 0
  br i1 %SwitchLeaf3, label %cleanup.cont.35, label %NewDefault.1

cleanup.cont.35:                                  ; preds = %LeafBlock.2
  %38 = bitcast %struct._object** %o36 to i8*, !dbg !6657
  call void @llvm.lifetime.start(i64 8, i8* %38) #3, !dbg !6657
  call void @llvm.dbg.declare(metadata %struct._object** %o36, metadata !1492, metadata !3844), !dbg !6658
  %release = getelementptr inbounds %struct.utsname, %struct.utsname* %u, i32 0, i32 2, !dbg !6659
  %arraydecay37 = getelementptr inbounds [65 x i8], [65 x i8]* %release, i32 0, i32 0, !dbg !6660
  %call38 = call %struct._object* @PyUnicode_DecodeFSDefault(i8* %arraydecay37), !dbg !6661
  store %struct._object* %call38, %struct._object** %o36, align 8, !dbg !6658, !tbaa !3867
  %39 = load %struct._object*, %struct._object** %o36, align 8, !dbg !6662, !tbaa !3867
  %tobool39 = icmp ne %struct._object* %39, null, !dbg !6662
  br i1 %tobool39, label %if.end.53, label %if.then.40, !dbg !6663

if.then.40:                                       ; preds = %cleanup.cont.35
  br label %do.body.41, !dbg !6664

do.body.41:                                       ; preds = %if.then.40
  %40 = bitcast %struct._object** %_py_decref_tmp42 to i8*, !dbg !6666
  call void @llvm.lifetime.start(i64 8, i8* %40) #3, !dbg !6666
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp42, metadata !1494, metadata !3844), !dbg !6668
  %41 = load %struct._object*, %struct._object** %value, align 8, !dbg !6669, !tbaa !3867
  store %struct._object* %41, %struct._object** %_py_decref_tmp42, align 8, !dbg !6668, !tbaa !3867
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8, !dbg !6670, !tbaa !3867
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0, !dbg !6672
  %43 = load i64, i64* %ob_refcnt43, align 8, !dbg !6673, !tbaa !3977
  %dec44 = add i64 %43, -1, !dbg !6673
  store i64 %dec44, i64* %ob_refcnt43, align 8, !dbg !6673, !tbaa !3977
  %cmp45 = icmp ne i64 %dec44, 0, !dbg !6674
  br i1 %cmp45, label %if.then.46, label %if.else.47, !dbg !6675

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50, !dbg !6676

if.else.47:                                       ; preds = %do.body.41
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8, !dbg !6678, !tbaa !3867
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1, !dbg !6680
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8, !dbg !6680, !tbaa !3892
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4, !dbg !6681
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8, !dbg !6681, !tbaa !3986
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8, !dbg !6682, !tbaa !3867
  call void %46(%struct._object* %47), !dbg !6683
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  %48 = bitcast %struct._object** %_py_decref_tmp42 to i8*, !dbg !6684
  call void @llvm.lifetime.end(i64 8, i8* %48) #3, !dbg !6684
  br label %do.cond.51, !dbg !6686

do.cond.51:                                       ; preds = %if.end.50
  br label %do.end.52, !dbg !6687

do.end.52:                                        ; preds = %do.cond.51
  store %struct._object* null, %struct._object** %retval, !dbg !6689
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56, !dbg !6691

if.end.53:                                        ; preds = %cleanup.cont.35
  %49 = load %struct._object*, %struct._object** %o36, align 8, !dbg !6692, !tbaa !3867
  %50 = load %struct._object*, %struct._object** %value, align 8, !dbg !6694, !tbaa !3867
  %51 = bitcast %struct._object* %50 to %struct.PyTupleObject*, !dbg !6695
  %ob_item54 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %51, i32 0, i32 1, !dbg !6696
  %arrayidx55 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item54, i32 0, i64 2, !dbg !6697
  store %struct._object* %49, %struct._object** %arrayidx55, align 8, !dbg !6698, !tbaa !3867
  store i32 0, i32* %cleanup.dest.slot, !dbg !6699
  br label %cleanup.56, !dbg !6699

cleanup.56:                                       ; preds = %if.end.53, %do.end.52
  %52 = bitcast %struct._object** %o36 to i8*, !dbg !6700
  call void @llvm.lifetime.end(i64 8, i8* %52) #3, !dbg !6700
  %cleanup.dest.57 = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.5

LeafBlock.5:                                      ; preds = %cleanup.56
  %SwitchLeaf6 = icmp eq i32 %cleanup.dest.57, 0
  br i1 %SwitchLeaf6, label %cleanup.cont.58, label %NewDefault.4

cleanup.cont.58:                                  ; preds = %LeafBlock.5
  %53 = bitcast %struct._object** %o59 to i8*, !dbg !6701
  call void @llvm.lifetime.start(i64 8, i8* %53) #3, !dbg !6701
  call void @llvm.dbg.declare(metadata %struct._object** %o59, metadata !1498, metadata !3844), !dbg !6702
  %version = getelementptr inbounds %struct.utsname, %struct.utsname* %u, i32 0, i32 3, !dbg !6703
  %arraydecay60 = getelementptr inbounds [65 x i8], [65 x i8]* %version, i32 0, i32 0, !dbg !6704
  %call61 = call %struct._object* @PyUnicode_DecodeFSDefault(i8* %arraydecay60), !dbg !6705
  store %struct._object* %call61, %struct._object** %o59, align 8, !dbg !6702, !tbaa !3867
  %54 = load %struct._object*, %struct._object** %o59, align 8, !dbg !6706, !tbaa !3867
  %tobool62 = icmp ne %struct._object* %54, null, !dbg !6706
  br i1 %tobool62, label %if.end.76, label %if.then.63, !dbg !6707

if.then.63:                                       ; preds = %cleanup.cont.58
  br label %do.body.64, !dbg !6708

do.body.64:                                       ; preds = %if.then.63
  %55 = bitcast %struct._object** %_py_decref_tmp65 to i8*, !dbg !6710
  call void @llvm.lifetime.start(i64 8, i8* %55) #3, !dbg !6710
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp65, metadata !1500, metadata !3844), !dbg !6712
  %56 = load %struct._object*, %struct._object** %value, align 8, !dbg !6713, !tbaa !3867
  store %struct._object* %56, %struct._object** %_py_decref_tmp65, align 8, !dbg !6712, !tbaa !3867
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp65, align 8, !dbg !6714, !tbaa !3867
  %ob_refcnt66 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0, !dbg !6716
  %58 = load i64, i64* %ob_refcnt66, align 8, !dbg !6717, !tbaa !3977
  %dec67 = add i64 %58, -1, !dbg !6717
  store i64 %dec67, i64* %ob_refcnt66, align 8, !dbg !6717, !tbaa !3977
  %cmp68 = icmp ne i64 %dec67, 0, !dbg !6718
  br i1 %cmp68, label %if.then.69, label %if.else.70, !dbg !6719

if.then.69:                                       ; preds = %do.body.64
  br label %if.end.73, !dbg !6720

if.else.70:                                       ; preds = %do.body.64
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp65, align 8, !dbg !6722, !tbaa !3867
  %ob_type71 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 1, !dbg !6724
  %60 = load %struct._typeobject*, %struct._typeobject** %ob_type71, align 8, !dbg !6724, !tbaa !3892
  %tp_dealloc72 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 4, !dbg !6725
  %61 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc72, align 8, !dbg !6725, !tbaa !3986
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp65, align 8, !dbg !6726, !tbaa !3867
  call void %61(%struct._object* %62), !dbg !6727
  br label %if.end.73

if.end.73:                                        ; preds = %if.else.70, %if.then.69
  %63 = bitcast %struct._object** %_py_decref_tmp65 to i8*, !dbg !6728
  call void @llvm.lifetime.end(i64 8, i8* %63) #3, !dbg !6728
  br label %do.cond.74, !dbg !6730

do.cond.74:                                       ; preds = %if.end.73
  br label %do.end.75, !dbg !6731

do.end.75:                                        ; preds = %do.cond.74
  store %struct._object* null, %struct._object** %retval, !dbg !6733
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.79, !dbg !6735

if.end.76:                                        ; preds = %cleanup.cont.58
  %64 = load %struct._object*, %struct._object** %o59, align 8, !dbg !6736, !tbaa !3867
  %65 = load %struct._object*, %struct._object** %value, align 8, !dbg !6738, !tbaa !3867
  %66 = bitcast %struct._object* %65 to %struct.PyTupleObject*, !dbg !6739
  %ob_item77 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %66, i32 0, i32 1, !dbg !6740
  %arrayidx78 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item77, i32 0, i64 3, !dbg !6741
  store %struct._object* %64, %struct._object** %arrayidx78, align 8, !dbg !6742, !tbaa !3867
  store i32 0, i32* %cleanup.dest.slot, !dbg !6743
  br label %cleanup.79, !dbg !6743

cleanup.79:                                       ; preds = %if.end.76, %do.end.75
  %67 = bitcast %struct._object** %o59 to i8*, !dbg !6744
  call void @llvm.lifetime.end(i64 8, i8* %67) #3, !dbg !6744
  %cleanup.dest.80 = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.8

LeafBlock.8:                                      ; preds = %cleanup.79
  %SwitchLeaf9 = icmp eq i32 %cleanup.dest.80, 0
  br i1 %SwitchLeaf9, label %cleanup.cont.81, label %NewDefault.7

cleanup.cont.81:                                  ; preds = %LeafBlock.8
  %68 = bitcast %struct._object** %o82 to i8*, !dbg !6745
  call void @llvm.lifetime.start(i64 8, i8* %68) #3, !dbg !6745
  call void @llvm.dbg.declare(metadata %struct._object** %o82, metadata !1504, metadata !3844), !dbg !6746
  %machine = getelementptr inbounds %struct.utsname, %struct.utsname* %u, i32 0, i32 4, !dbg !6747
  %arraydecay83 = getelementptr inbounds [65 x i8], [65 x i8]* %machine, i32 0, i32 0, !dbg !6748
  %call84 = call %struct._object* @PyUnicode_DecodeFSDefault(i8* %arraydecay83), !dbg !6749
  store %struct._object* %call84, %struct._object** %o82, align 8, !dbg !6746, !tbaa !3867
  %69 = load %struct._object*, %struct._object** %o82, align 8, !dbg !6750, !tbaa !3867
  %tobool85 = icmp ne %struct._object* %69, null, !dbg !6750
  br i1 %tobool85, label %if.end.99, label %if.then.86, !dbg !6751

if.then.86:                                       ; preds = %cleanup.cont.81
  br label %do.body.87, !dbg !6752

do.body.87:                                       ; preds = %if.then.86
  %70 = bitcast %struct._object** %_py_decref_tmp88 to i8*, !dbg !6754
  call void @llvm.lifetime.start(i64 8, i8* %70) #3, !dbg !6754
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp88, metadata !1506, metadata !3844), !dbg !6756
  %71 = load %struct._object*, %struct._object** %value, align 8, !dbg !6757, !tbaa !3867
  store %struct._object* %71, %struct._object** %_py_decref_tmp88, align 8, !dbg !6756, !tbaa !3867
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8, !dbg !6758, !tbaa !3867
  %ob_refcnt89 = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 0, !dbg !6760
  %73 = load i64, i64* %ob_refcnt89, align 8, !dbg !6761, !tbaa !3977
  %dec90 = add i64 %73, -1, !dbg !6761
  store i64 %dec90, i64* %ob_refcnt89, align 8, !dbg !6761, !tbaa !3977
  %cmp91 = icmp ne i64 %dec90, 0, !dbg !6762
  br i1 %cmp91, label %if.then.92, label %if.else.93, !dbg !6763

if.then.92:                                       ; preds = %do.body.87
  br label %if.end.96, !dbg !6764

if.else.93:                                       ; preds = %do.body.87
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8, !dbg !6766, !tbaa !3867
  %ob_type94 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 1, !dbg !6768
  %75 = load %struct._typeobject*, %struct._typeobject** %ob_type94, align 8, !dbg !6768, !tbaa !3892
  %tp_dealloc95 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %75, i32 0, i32 4, !dbg !6769
  %76 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc95, align 8, !dbg !6769, !tbaa !3986
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8, !dbg !6770, !tbaa !3867
  call void %76(%struct._object* %77), !dbg !6771
  br label %if.end.96

if.end.96:                                        ; preds = %if.else.93, %if.then.92
  %78 = bitcast %struct._object** %_py_decref_tmp88 to i8*, !dbg !6772
  call void @llvm.lifetime.end(i64 8, i8* %78) #3, !dbg !6772
  br label %do.cond.97, !dbg !6774

do.cond.97:                                       ; preds = %if.end.96
  br label %do.end.98, !dbg !6775

do.end.98:                                        ; preds = %do.cond.97
  store %struct._object* null, %struct._object** %retval, !dbg !6777
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.102, !dbg !6779

if.end.99:                                        ; preds = %cleanup.cont.81
  %79 = load %struct._object*, %struct._object** %o82, align 8, !dbg !6780, !tbaa !3867
  %80 = load %struct._object*, %struct._object** %value, align 8, !dbg !6782, !tbaa !3867
  %81 = bitcast %struct._object* %80 to %struct.PyTupleObject*, !dbg !6783
  %ob_item100 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %81, i32 0, i32 1, !dbg !6784
  %arrayidx101 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item100, i32 0, i64 4, !dbg !6785
  store %struct._object* %79, %struct._object** %arrayidx101, align 8, !dbg !6786, !tbaa !3867
  store i32 0, i32* %cleanup.dest.slot, !dbg !6787
  br label %cleanup.102, !dbg !6787

cleanup.102:                                      ; preds = %if.end.99, %do.end.98
  %82 = bitcast %struct._object** %o82 to i8*, !dbg !6788
  call void @llvm.lifetime.end(i64 8, i8* %82) #3, !dbg !6788
  %cleanup.dest.103 = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.11

LeafBlock.11:                                     ; preds = %cleanup.102
  %SwitchLeaf12 = icmp eq i32 %cleanup.dest.103, 0
  br i1 %SwitchLeaf12, label %cleanup.cont.104, label %NewDefault.10

cleanup.cont.104:                                 ; preds = %LeafBlock.11
  %83 = load %struct._object*, %struct._object** %value, align 8, !dbg !6789, !tbaa !3867
  store %struct._object* %83, %struct._object** %retval, !dbg !6790
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.105, !dbg !6790

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.105

NewDefault.1:                                     ; preds = %LeafBlock.2
  br label %cleanup.105

NewDefault.4:                                     ; preds = %LeafBlock.5
  br label %cleanup.105

NewDefault.7:                                     ; preds = %LeafBlock.8
  br label %cleanup.105

NewDefault.10:                                    ; preds = %LeafBlock.11
  br label %cleanup.105

cleanup.105:                                      ; preds = %NewDefault.10, %NewDefault.7, %NewDefault.4, %NewDefault.1, %NewDefault, %cleanup.cont.104, %if.then.5, %if.then
  %84 = bitcast %struct._object** %value to i8*, !dbg !6791
  call void @llvm.lifetime.end(i64 8, i8* %84) #3, !dbg !6791
  %85 = bitcast i32* %res to i8*, !dbg !6791
  call void @llvm.lifetime.end(i64 4, i8* %85) #3, !dbg !6791
  %86 = bitcast %struct.utsname* %u to i8*, !dbg !6791
  call void @llvm.lifetime.end(i64 390, i8* %86) #3, !dbg !6791
  %87 = load %struct._object*, %struct._object** %retval, !dbg !6791
  ret %struct._object* %87, !dbg !6791
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_unlink(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %dir_fd = alloca i32, align 4
  %result = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1512, metadata !3844), !dbg !6792
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1513, metadata !3844), !dbg !6793
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1514, metadata !3844), !dbg !6794
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !6795
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !6795
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !1515, metadata !3844), !dbg !6796
  %1 = bitcast i32* %dir_fd to i8*, !dbg !6797
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !6797
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !1516, metadata !3844), !dbg !6798
  store i32 -100, i32* %dir_fd, align 4, !dbg !6798, !tbaa !3840
  %2 = bitcast i32* %result to i8*, !dbg !6799
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !6799
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1517, metadata !3844), !dbg !6800
  %3 = bitcast %struct._object** %return_value to i8*, !dbg !6801
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !6801
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1518, metadata !3844), !dbg !6802
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !6802, !tbaa !3867
  %4 = bitcast %struct.path_t* %path to i8*, !dbg !6803
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 72, i32 8, i1 false), !dbg !6803
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !6804
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.53, i32 0, i32 0), i8** %function_name, align 8, !dbg !6805, !tbaa !5512
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6806, !tbaa !3867
  %6 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !6808, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %5, %struct._object* %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.221, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @posix_unlink.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dir_fd), !dbg !6809
  %tobool = icmp ne i32 %call, 0, !dbg !6809
  br i1 %tobool, label %if.end, label %if.then, !dbg !6810

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6811
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6811

if.end:                                           ; preds = %entry
  %7 = bitcast %struct._ts** %_save to i8*, !dbg !6812
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !6812
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1519, metadata !3844), !dbg !6813
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !6814
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !6815, !tbaa !3867
  %8 = load i32, i32* %dir_fd, align 4, !dbg !6816, !tbaa !3840
  %cmp = icmp ne i32 %8, -100, !dbg !6818
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !6819

if.then.2:                                        ; preds = %if.end
  %9 = load i32, i32* %dir_fd, align 4, !dbg !6820, !tbaa !3840
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !6821
  %10 = load i8*, i8** %narrow, align 8, !dbg !6821, !tbaa !5537
  %call3 = call i32 @unlinkat(i32 %9, i8* %10, i32 0) #3, !dbg !6822
  store i32 %call3, i32* %result, align 4, !dbg !6823, !tbaa !3840
  br label %if.end.6, !dbg !6824

if.else:                                          ; preds = %if.end
  %narrow4 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !6825
  %11 = load i8*, i8** %narrow4, align 8, !dbg !6825, !tbaa !5537
  %call5 = call i32 @unlink(i8* %11) #3, !dbg !6826
  store i32 %call5, i32* %result, align 4, !dbg !6827, !tbaa !3840
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.2
  %12 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !6828, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %12), !dbg !6829
  %13 = bitcast %struct._ts** %_save to i8*, !dbg !6830
  call void @llvm.lifetime.end(i64 8, i8* %13) #3, !dbg !6830
  %14 = load i32, i32* %result, align 4, !dbg !6831, !tbaa !3840
  %tobool7 = icmp ne i32 %14, 0, !dbg !6831
  br i1 %tobool7, label %if.then.8, label %if.end.10, !dbg !6833

if.then.8:                                        ; preds = %if.end.6
  %call9 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !6834
  store %struct._object* %call9, %struct._object** %return_value, align 8, !dbg !6836, !tbaa !3867
  br label %exit, !dbg !6837

if.end.10:                                        ; preds = %if.end.6
  store %struct._object* @_Py_NoneStruct, %struct._object** %return_value, align 8, !dbg !6838, !tbaa !3867
  %15 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6839, !tbaa !3977
  %inc = add i64 %15, 1, !dbg !6839
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6839, !tbaa !3977
  br label %exit, !dbg !6840

exit:                                             ; preds = %if.end.10, %if.then.8
  call void @path_cleanup(%struct.path_t* %path), !dbg !6841
  %16 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !6842, !tbaa !3867
  store %struct._object* %16, %struct._object** %retval, !dbg !6843
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6843

cleanup:                                          ; preds = %exit, %if.then
  %17 = bitcast %struct._object** %return_value to i8*, !dbg !6844
  call void @llvm.lifetime.end(i64 8, i8* %17) #3, !dbg !6844
  %18 = bitcast i32* %result to i8*, !dbg !6844
  call void @llvm.lifetime.end(i64 4, i8* %18) #3, !dbg !6844
  %19 = bitcast i32* %dir_fd to i8*, !dbg !6844
  call void @llvm.lifetime.end(i64 4, i8* %19) #3, !dbg !6844
  %20 = bitcast %struct.path_t* %path to i8*, !dbg !6844
  call void @llvm.lifetime.end(i64 72, i8* %20) #3, !dbg !6844
  %21 = load %struct._object*, %struct._object** %retval, !dbg !6844
  ret %struct._object* %21, !dbg !6844
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_utime(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %times = alloca %struct._object*, align 8
  %ns = alloca %struct._object*, align 8
  %dir_fd = alloca i32, align 4
  %follow_symlinks = alloca i32, align 4
  %keywords = alloca [6 x i8*], align 16
  %utime = alloca %struct.utime_t, align 8
  %result = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %a_sec = alloca i64, align 8
  %m_sec = alloca i64, align 8
  %a_nsec = alloca i64, align 8
  %m_nsec = alloca i64, align 8
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1523, metadata !3844), !dbg !6845
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1524, metadata !3844), !dbg !6846
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1525, metadata !3844), !dbg !6847
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !6848
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !6848
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !1526, metadata !3844), !dbg !6849
  %1 = bitcast %struct._object** %times to i8*, !dbg !6850
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !6850
  call void @llvm.dbg.declare(metadata %struct._object** %times, metadata !1527, metadata !3844), !dbg !6851
  store %struct._object* null, %struct._object** %times, align 8, !dbg !6851, !tbaa !3867
  %2 = bitcast %struct._object** %ns to i8*, !dbg !6852
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !6852
  call void @llvm.dbg.declare(metadata %struct._object** %ns, metadata !1528, metadata !3844), !dbg !6853
  store %struct._object* null, %struct._object** %ns, align 8, !dbg !6853, !tbaa !3867
  %3 = bitcast i32* %dir_fd to i8*, !dbg !6854
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !6854
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !1529, metadata !3844), !dbg !6855
  store i32 -100, i32* %dir_fd, align 4, !dbg !6855, !tbaa !3840
  %4 = bitcast i32* %follow_symlinks to i8*, !dbg !6856
  call void @llvm.lifetime.start(i64 4, i8* %4) #3, !dbg !6856
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks, metadata !1530, metadata !3844), !dbg !6857
  store i32 1, i32* %follow_symlinks, align 4, !dbg !6857, !tbaa !3840
  %5 = bitcast [6 x i8*]* %keywords to i8*, !dbg !6858
  call void @llvm.lifetime.start(i64 48, i8* %5) #3, !dbg !6858
  call void @llvm.dbg.declare(metadata [6 x i8*]* %keywords, metadata !1531, metadata !3844), !dbg !6859
  %6 = bitcast [6 x i8*]* %keywords to i8*, !dbg !6859
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 48, i32 16, i1 false), !dbg !6859
  %7 = bitcast i8* %6 to [6 x i8*]*, !dbg !6859
  %8 = getelementptr [6 x i8*], [6 x i8*]* %7, i32 0, i32 0, !dbg !6859
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8** %8, !dbg !6859
  %9 = getelementptr [6 x i8*], [6 x i8*]* %7, i32 0, i32 1, !dbg !6859
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.56, i32 0, i32 0), i8** %9, !dbg !6859
  %10 = getelementptr [6 x i8*], [6 x i8*]* %7, i32 0, i32 2, !dbg !6859
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.222, i32 0, i32 0), i8** %10, !dbg !6859
  %11 = getelementptr [6 x i8*], [6 x i8*]* %7, i32 0, i32 3, !dbg !6859
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i32 0, i32 0), i8** %11, !dbg !6859
  %12 = getelementptr [6 x i8*], [6 x i8*]* %7, i32 0, i32 4, !dbg !6859
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.171, i32 0, i32 0), i8** %12, !dbg !6859
  %13 = bitcast %struct.utime_t* %utime to i8*, !dbg !6860
  call void @llvm.lifetime.start(i64 40, i8* %13) #3, !dbg !6860
  call void @llvm.dbg.declare(metadata %struct.utime_t* %utime, metadata !1535, metadata !3844), !dbg !6861
  %14 = bitcast i32* %result to i8*, !dbg !6862
  call void @llvm.lifetime.start(i64 4, i8* %14) #3, !dbg !6862
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1544, metadata !3844), !dbg !6863
  %15 = bitcast %struct._object** %return_value to i8*, !dbg !6864
  call void @llvm.lifetime.start(i64 8, i8* %15) #3, !dbg !6864
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1545, metadata !3844), !dbg !6865
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !6865, !tbaa !3867
  %16 = bitcast %struct.path_t* %path to i8*, !dbg !6866
  call void @llvm.memset.p0i8.i64(i8* %16, i8 0, i64 72, i32 8, i1 false), !dbg !6866
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !6867
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0), i8** %function_name, align 8, !dbg !6868, !tbaa !5512
  %17 = bitcast %struct.utime_t* %utime to i8*, !dbg !6869
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 40, i32 8, i1 false), !dbg !6869
  %allow_fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 3, !dbg !6870
  store i32 1, i32* %allow_fd, align 4, !dbg !6871, !tbaa !5516
  %18 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6872, !tbaa !3867
  %19 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !6874, !tbaa !3867
  %arraydecay = getelementptr inbounds [6 x i8*], [6 x i8*]* %keywords, i32 0, i32 0, !dbg !6875
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %18, %struct._object* %19, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.223, i32 0, i32 0), i8** %arraydecay, i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, %struct._object** %times, %struct._object** %ns, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dir_fd, i32* %follow_symlinks), !dbg !6876
  %tobool = icmp ne i32 %call, 0, !dbg !6876
  br i1 %tobool, label %if.end, label %if.then, !dbg !6877

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6878
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.96, !dbg !6878

if.end:                                           ; preds = %entry
  %20 = load %struct._object*, %struct._object** %times, align 8, !dbg !6879, !tbaa !3867
  %tobool1 = icmp ne %struct._object* %20, null, !dbg !6879
  br i1 %tobool1, label %land.lhs.true, label %if.end.5, !dbg !6881

land.lhs.true:                                    ; preds = %if.end
  %21 = load %struct._object*, %struct._object** %times, align 8, !dbg !6882, !tbaa !3867
  %cmp = icmp ne %struct._object* %21, @_Py_NoneStruct, !dbg !6884
  br i1 %cmp, label %land.lhs.true.2, label %if.end.5, !dbg !6885

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %22 = load %struct._object*, %struct._object** %ns, align 8, !dbg !6886, !tbaa !3867
  %tobool3 = icmp ne %struct._object* %22, null, !dbg !6886
  br i1 %tobool3, label %if.then.4, label %if.end.5, !dbg !6888

if.then.4:                                        ; preds = %land.lhs.true.2
  %23 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !6889, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %23, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.224, i32 0, i32 0)), !dbg !6891
  br label %exit, !dbg !6892

if.end.5:                                         ; preds = %land.lhs.true.2, %land.lhs.true, %if.end
  %24 = load %struct._object*, %struct._object** %times, align 8, !dbg !6893, !tbaa !3867
  %tobool6 = icmp ne %struct._object* %24, null, !dbg !6893
  br i1 %tobool6, label %land.lhs.true.7, label %if.else, !dbg !6894

land.lhs.true.7:                                  ; preds = %if.end.5
  %25 = load %struct._object*, %struct._object** %times, align 8, !dbg !6895, !tbaa !3867
  %cmp8 = icmp ne %struct._object* %25, @_Py_NoneStruct, !dbg !6897
  br i1 %cmp8, label %if.then.9, label %if.else, !dbg !6898

if.then.9:                                        ; preds = %land.lhs.true.7
  %26 = bitcast i64* %a_sec to i8*, !dbg !6899
  call void @llvm.lifetime.start(i64 8, i8* %26) #3, !dbg !6899
  call void @llvm.dbg.declare(metadata i64* %a_sec, metadata !1546, metadata !3844), !dbg !6900
  %27 = bitcast i64* %m_sec to i8*, !dbg !6899
  call void @llvm.lifetime.start(i64 8, i8* %27) #3, !dbg !6899
  call void @llvm.dbg.declare(metadata i64* %m_sec, metadata !1549, metadata !3844), !dbg !6901
  %28 = bitcast i64* %a_nsec to i8*, !dbg !6902
  call void @llvm.lifetime.start(i64 8, i8* %28) #3, !dbg !6902
  call void @llvm.dbg.declare(metadata i64* %a_nsec, metadata !1550, metadata !3844), !dbg !6903
  %29 = bitcast i64* %m_nsec to i8*, !dbg !6902
  call void @llvm.lifetime.start(i64 8, i8* %29) #3, !dbg !6902
  call void @llvm.dbg.declare(metadata i64* %m_nsec, metadata !1551, metadata !3844), !dbg !6904
  %30 = load %struct._object*, %struct._object** %times, align 8, !dbg !6905, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !6907
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6907, !tbaa !3892
  %cmp10 = icmp eq %struct._typeobject* %31, @PyTuple_Type, !dbg !6908
  br i1 %cmp10, label %lor.lhs.false, label %if.then.13, !dbg !6909

lor.lhs.false:                                    ; preds = %if.then.9
  %32 = load %struct._object*, %struct._object** %times, align 8, !dbg !6910, !tbaa !3867
  %call11 = call i64 @PyTuple_Size(%struct._object* %32), !dbg !6912
  %cmp12 = icmp ne i64 %call11, 2, !dbg !6913
  br i1 %cmp12, label %if.then.13, label %if.end.14, !dbg !6914

if.then.13:                                       ; preds = %lor.lhs.false, %if.then.9
  %33 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !6915, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %33, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.225, i32 0, i32 0)), !dbg !6917
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6918

if.end.14:                                        ; preds = %lor.lhs.false
  %now = getelementptr inbounds %struct.utime_t, %struct.utime_t* %utime, i32 0, i32 0, !dbg !6919
  store i32 0, i32* %now, align 4, !dbg !6920, !tbaa !6921
  %34 = load %struct._object*, %struct._object** %times, align 8, !dbg !6923, !tbaa !3867
  %35 = bitcast %struct._object* %34 to %struct.PyTupleObject*, !dbg !6925
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %35, i32 0, i32 1, !dbg !6926
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !6927
  %36 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !6927, !tbaa !3867
  %call15 = call i32 @_PyTime_ObjectToTimespec(%struct._object* %36, i64* %a_sec, i64* %a_nsec, i32 0), !dbg !6928
  %cmp16 = icmp eq i32 %call15, -1, !dbg !6929
  br i1 %cmp16, label %if.then.22, label %lor.lhs.false.17, !dbg !6930

lor.lhs.false.17:                                 ; preds = %if.end.14
  %37 = load %struct._object*, %struct._object** %times, align 8, !dbg !6931, !tbaa !3867
  %38 = bitcast %struct._object* %37 to %struct.PyTupleObject*, !dbg !6932
  %ob_item18 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %38, i32 0, i32 1, !dbg !6933
  %arrayidx19 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item18, i32 0, i64 1, !dbg !6934
  %39 = load %struct._object*, %struct._object** %arrayidx19, align 8, !dbg !6934, !tbaa !3867
  %call20 = call i32 @_PyTime_ObjectToTimespec(%struct._object* %39, i64* %m_sec, i64* %m_nsec, i32 0), !dbg !6935
  %cmp21 = icmp eq i32 %call20, -1, !dbg !6936
  br i1 %cmp21, label %if.then.22, label %if.end.23, !dbg !6937

if.then.22:                                       ; preds = %lor.lhs.false.17, %if.end.14
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6938

if.end.23:                                        ; preds = %lor.lhs.false.17
  %40 = load i64, i64* %a_sec, align 8, !dbg !6940, !tbaa !3904
  %atime_s = getelementptr inbounds %struct.utime_t, %struct.utime_t* %utime, i32 0, i32 1, !dbg !6941
  store i64 %40, i64* %atime_s, align 8, !dbg !6942, !tbaa !6943
  %41 = load i64, i64* %a_nsec, align 8, !dbg !6944, !tbaa !3904
  %atime_ns = getelementptr inbounds %struct.utime_t, %struct.utime_t* %utime, i32 0, i32 2, !dbg !6945
  store i64 %41, i64* %atime_ns, align 8, !dbg !6946, !tbaa !6947
  %42 = load i64, i64* %m_sec, align 8, !dbg !6948, !tbaa !3904
  %mtime_s = getelementptr inbounds %struct.utime_t, %struct.utime_t* %utime, i32 0, i32 3, !dbg !6949
  store i64 %42, i64* %mtime_s, align 8, !dbg !6950, !tbaa !6951
  %43 = load i64, i64* %m_nsec, align 8, !dbg !6952, !tbaa !3904
  %mtime_ns = getelementptr inbounds %struct.utime_t, %struct.utime_t* %utime, i32 0, i32 4, !dbg !6953
  store i64 %43, i64* %mtime_ns, align 8, !dbg !6954, !tbaa !6955
  store i32 0, i32* %cleanup.dest.slot, !dbg !6956
  br label %cleanup, !dbg !6956

cleanup:                                          ; preds = %if.end.23, %if.then.22, %if.then.13
  %44 = bitcast i64* %m_nsec to i8*, !dbg !6957
  call void @llvm.lifetime.end(i64 8, i8* %44) #3, !dbg !6957
  %45 = bitcast i64* %a_nsec to i8*, !dbg !6957
  call void @llvm.lifetime.end(i64 8, i8* %45) #3, !dbg !6957
  %46 = bitcast i64* %m_sec to i8*, !dbg !6957
  call void @llvm.lifetime.end(i64 8, i8* %46) #3, !dbg !6957
  %47 = bitcast i64* %a_sec to i8*, !dbg !6957
  call void @llvm.lifetime.end(i64 8, i8* %47) #3, !dbg !6957
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock

NodeBlock:                                        ; preds = %cleanup
  %Pivot = icmp slt i32 %cleanup.dest, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %cleanup.dest, 2
  br i1 %SwitchLeaf2, label %exit, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.55, !dbg !6958

if.else:                                          ; preds = %land.lhs.true.7, %if.end.5
  %48 = load %struct._object*, %struct._object** %ns, align 8, !dbg !6959, !tbaa !3867
  %tobool27 = icmp ne %struct._object* %48, null, !dbg !6959
  br i1 %tobool27, label %if.then.28, label %if.else.52, !dbg !6961

if.then.28:                                       ; preds = %if.else
  %49 = load %struct._object*, %struct._object** %ns, align 8, !dbg !6962, !tbaa !3867
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1, !dbg !6965
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8, !dbg !6965, !tbaa !3892
  %cmp30 = icmp eq %struct._typeobject* %50, @PyTuple_Type, !dbg !6966
  br i1 %cmp30, label %lor.lhs.false.31, label %if.then.34, !dbg !6967

lor.lhs.false.31:                                 ; preds = %if.then.28
  %51 = load %struct._object*, %struct._object** %ns, align 8, !dbg !6968, !tbaa !3867
  %call32 = call i64 @PyTuple_Size(%struct._object* %51), !dbg !6970
  %cmp33 = icmp ne i64 %call32, 2, !dbg !6971
  br i1 %cmp33, label %if.then.34, label %if.end.35, !dbg !6972

if.then.34:                                       ; preds = %lor.lhs.false.31, %if.then.28
  %52 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !6973, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %52, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.226, i32 0, i32 0)), !dbg !6975
  br label %exit, !dbg !6976

if.end.35:                                        ; preds = %lor.lhs.false.31
  %now36 = getelementptr inbounds %struct.utime_t, %struct.utime_t* %utime, i32 0, i32 0, !dbg !6977
  store i32 0, i32* %now36, align 4, !dbg !6978, !tbaa !6921
  %53 = load %struct._object*, %struct._object** %ns, align 8, !dbg !6979, !tbaa !3867
  %54 = bitcast %struct._object* %53 to %struct.PyTupleObject*, !dbg !6981
  %ob_item37 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %54, i32 0, i32 1, !dbg !6982
  %arrayidx38 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item37, i32 0, i64 0, !dbg !6983
  %55 = load %struct._object*, %struct._object** %arrayidx38, align 8, !dbg !6983, !tbaa !3867
  %atime_s39 = getelementptr inbounds %struct.utime_t, %struct.utime_t* %utime, i32 0, i32 1, !dbg !6984
  %atime_ns40 = getelementptr inbounds %struct.utime_t, %struct.utime_t* %utime, i32 0, i32 2, !dbg !6985
  %call41 = call i32 @split_py_long_to_s_and_ns(%struct._object* %55, i64* %atime_s39, i64* %atime_ns40), !dbg !6986
  %tobool42 = icmp ne i32 %call41, 0, !dbg !6986
  br i1 %tobool42, label %lor.lhs.false.43, label %if.then.50, !dbg !6987

lor.lhs.false.43:                                 ; preds = %if.end.35
  %56 = load %struct._object*, %struct._object** %ns, align 8, !dbg !6988, !tbaa !3867
  %57 = bitcast %struct._object* %56 to %struct.PyTupleObject*, !dbg !6989
  %ob_item44 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %57, i32 0, i32 1, !dbg !6990
  %arrayidx45 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item44, i32 0, i64 1, !dbg !6991
  %58 = load %struct._object*, %struct._object** %arrayidx45, align 8, !dbg !6991, !tbaa !3867
  %mtime_s46 = getelementptr inbounds %struct.utime_t, %struct.utime_t* %utime, i32 0, i32 3, !dbg !6992
  %mtime_ns47 = getelementptr inbounds %struct.utime_t, %struct.utime_t* %utime, i32 0, i32 4, !dbg !6993
  %call48 = call i32 @split_py_long_to_s_and_ns(%struct._object* %58, i64* %mtime_s46, i64* %mtime_ns47), !dbg !6994
  %tobool49 = icmp ne i32 %call48, 0, !dbg !6994
  br i1 %tobool49, label %if.end.51, label %if.then.50, !dbg !6995

if.then.50:                                       ; preds = %lor.lhs.false.43, %if.end.35
  br label %exit, !dbg !6996

if.end.51:                                        ; preds = %lor.lhs.false.43
  br label %if.end.54, !dbg !6998

if.else.52:                                       ; preds = %if.else
  %now53 = getelementptr inbounds %struct.utime_t, %struct.utime_t* %utime, i32 0, i32 0, !dbg !6999
  store i32 1, i32* %now53, align 4, !dbg !7001, !tbaa !6921
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.52, %if.end.51
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %cleanup.cont
  %59 = load i32, i32* %dir_fd, align 4, !dbg !7002, !tbaa !3840
  %call56 = call i32 @path_and_dir_fd_invalid(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0), %struct.path_t* %path, i32 %59), !dbg !7004
  %tobool57 = icmp ne i32 %call56, 0, !dbg !7004
  br i1 %tobool57, label %if.then.65, label %lor.lhs.false.58, !dbg !7005

lor.lhs.false.58:                                 ; preds = %if.end.55
  %60 = load i32, i32* %dir_fd, align 4, !dbg !7006, !tbaa !3840
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !7007
  %61 = load i32, i32* %fd, align 4, !dbg !7007, !tbaa !5529
  %call59 = call i32 @dir_fd_and_fd_invalid(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0), i32 %60, i32 %61), !dbg !7008
  %tobool60 = icmp ne i32 %call59, 0, !dbg !7008
  br i1 %tobool60, label %if.then.65, label %lor.lhs.false.61, !dbg !7009

lor.lhs.false.61:                                 ; preds = %lor.lhs.false.58
  %fd62 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !7010
  %62 = load i32, i32* %fd62, align 4, !dbg !7010, !tbaa !5529
  %63 = load i32, i32* %follow_symlinks, align 4, !dbg !7011, !tbaa !3840
  %call63 = call i32 @fd_and_follow_symlinks_invalid(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0), i32 %62, i32 %63), !dbg !7012
  %tobool64 = icmp ne i32 %call63, 0, !dbg !7012
  br i1 %tobool64, label %if.then.65, label %if.end.66, !dbg !7013

if.then.65:                                       ; preds = %lor.lhs.false.61, %lor.lhs.false.58, %if.end.55
  br label %exit, !dbg !7014

if.end.66:                                        ; preds = %lor.lhs.false.61
  %64 = bitcast %struct._ts** %_save to i8*, !dbg !7015
  call void @llvm.lifetime.start(i64 8, i8* %64) #3, !dbg !7015
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1552, metadata !3844), !dbg !7016
  %call67 = call %struct._ts* @PyEval_SaveThread(), !dbg !7017
  store %struct._ts* %call67, %struct._ts** %_save, align 8, !dbg !7018, !tbaa !3867
  %65 = load i32, i32* %follow_symlinks, align 4, !dbg !7019, !tbaa !3840
  %tobool68 = icmp ne i32 %65, 0, !dbg !7019
  br i1 %tobool68, label %if.else.73, label %land.lhs.true.69, !dbg !7021

land.lhs.true.69:                                 ; preds = %if.end.66
  %66 = load i32, i32* %dir_fd, align 4, !dbg !7022, !tbaa !3840
  %cmp70 = icmp eq i32 %66, -100, !dbg !7024
  br i1 %cmp70, label %if.then.71, label %if.else.73, !dbg !7025

if.then.71:                                       ; preds = %land.lhs.true.69
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !7026
  %67 = load i8*, i8** %narrow, align 8, !dbg !7026, !tbaa !5537
  %call72 = call i32 @utime_nofollow_symlinks(%struct.utime_t* %utime, i8* %67), !dbg !7027
  store i32 %call72, i32* %result, align 4, !dbg !7028, !tbaa !3840
  br label %if.end.91, !dbg !7029

if.else.73:                                       ; preds = %land.lhs.true.69, %if.end.66
  %68 = load i32, i32* %dir_fd, align 4, !dbg !7030, !tbaa !3840
  %cmp74 = icmp ne i32 %68, -100, !dbg !7032
  br i1 %cmp74, label %if.then.77, label %lor.lhs.false.75, !dbg !7033

lor.lhs.false.75:                                 ; preds = %if.else.73
  %69 = load i32, i32* %follow_symlinks, align 4, !dbg !7034, !tbaa !3840
  %tobool76 = icmp ne i32 %69, 0, !dbg !7034
  br i1 %tobool76, label %if.else.80, label %if.then.77, !dbg !7036

if.then.77:                                       ; preds = %lor.lhs.false.75, %if.else.73
  %70 = load i32, i32* %dir_fd, align 4, !dbg !7037, !tbaa !3840
  %narrow78 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !7038
  %71 = load i8*, i8** %narrow78, align 8, !dbg !7038, !tbaa !5537
  %72 = load i32, i32* %follow_symlinks, align 4, !dbg !7039, !tbaa !3840
  %call79 = call i32 @utime_dir_fd(%struct.utime_t* %utime, i32 %70, i8* %71, i32 %72), !dbg !7040
  store i32 %call79, i32* %result, align 4, !dbg !7041, !tbaa !3840
  br label %if.end.90, !dbg !7042

if.else.80:                                       ; preds = %lor.lhs.false.75
  %fd81 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !7043
  %73 = load i32, i32* %fd81, align 4, !dbg !7043, !tbaa !5529
  %cmp82 = icmp ne i32 %73, -1, !dbg !7045
  br i1 %cmp82, label %if.then.83, label %if.else.86, !dbg !7046

if.then.83:                                       ; preds = %if.else.80
  %fd84 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !7047
  %74 = load i32, i32* %fd84, align 4, !dbg !7047, !tbaa !5529
  %call85 = call i32 @utime_fd(%struct.utime_t* %utime, i32 %74), !dbg !7048
  store i32 %call85, i32* %result, align 4, !dbg !7049, !tbaa !3840
  br label %if.end.89, !dbg !7050

if.else.86:                                       ; preds = %if.else.80
  %narrow87 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !7051
  %75 = load i8*, i8** %narrow87, align 8, !dbg !7051, !tbaa !5537
  %call88 = call i32 @utime_default(%struct.utime_t* %utime, i8* %75), !dbg !7052
  store i32 %call88, i32* %result, align 4, !dbg !7053, !tbaa !3840
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.83
  br label %if.end.90

if.end.90:                                        ; preds = %if.end.89, %if.then.77
  br label %if.end.91

if.end.91:                                        ; preds = %if.end.90, %if.then.71
  %76 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !7054, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %76), !dbg !7055
  %77 = bitcast %struct._ts** %_save to i8*, !dbg !7056
  call void @llvm.lifetime.end(i64 8, i8* %77) #3, !dbg !7056
  %78 = load i32, i32* %result, align 4, !dbg !7057, !tbaa !3840
  %cmp92 = icmp slt i32 %78, 0, !dbg !7059
  br i1 %cmp92, label %if.then.93, label %if.end.95, !dbg !7060

if.then.93:                                       ; preds = %if.end.91
  %call94 = call %struct._object* @posix_error(), !dbg !7061
  store %struct._object* %call94, %struct._object** %return_value, align 8, !dbg !7063, !tbaa !3867
  br label %exit, !dbg !7064

if.end.95:                                        ; preds = %if.end.91
  %79 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !7065, !tbaa !3977
  %inc = add i64 %79, 1, !dbg !7065
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !7065, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %return_value, align 8, !dbg !7066, !tbaa !3867
  br label %exit, !dbg !7067

exit:                                             ; preds = %LeafBlock.1, %if.end.95, %if.then.93, %if.then.65, %if.then.50, %if.then.34, %if.then.4
  call void @path_cleanup(%struct.path_t* %path), !dbg !7068
  %80 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !7069, !tbaa !3867
  store %struct._object* %80, %struct._object** %retval, !dbg !7070
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.96, !dbg !7070

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %cleanup.96

cleanup.96:                                       ; preds = %NewDefault, %exit, %if.then
  %81 = bitcast %struct._object** %return_value to i8*, !dbg !7071
  call void @llvm.lifetime.end(i64 8, i8* %81) #3, !dbg !7071
  %82 = bitcast i32* %result to i8*, !dbg !7071
  call void @llvm.lifetime.end(i64 4, i8* %82) #3, !dbg !7071
  %83 = bitcast %struct.utime_t* %utime to i8*, !dbg !7071
  call void @llvm.lifetime.end(i64 40, i8* %83) #3, !dbg !7071
  %84 = bitcast [6 x i8*]* %keywords to i8*, !dbg !7071
  call void @llvm.lifetime.end(i64 48, i8* %84) #3, !dbg !7071
  %85 = bitcast i32* %follow_symlinks to i8*, !dbg !7071
  call void @llvm.lifetime.end(i64 4, i8* %85) #3, !dbg !7071
  %86 = bitcast i32* %dir_fd to i8*, !dbg !7071
  call void @llvm.lifetime.end(i64 4, i8* %86) #3, !dbg !7071
  %87 = bitcast %struct._object** %ns to i8*, !dbg !7071
  call void @llvm.lifetime.end(i64 8, i8* %87) #3, !dbg !7071
  %88 = bitcast %struct._object** %times to i8*, !dbg !7071
  call void @llvm.lifetime.end(i64 8, i8* %88) #3, !dbg !7071
  %89 = bitcast %struct.path_t* %path to i8*, !dbg !7071
  call void @llvm.lifetime.end(i64 72, i8* %89) #3, !dbg !7071
  %90 = load %struct._object*, %struct._object** %retval, !dbg !7071
  ret %struct._object* %90, !dbg !7071
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_times(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  %t = alloca %struct.tms, align 8
  %c = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1610, metadata !3844), !dbg !7072
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !1611, metadata !3844), !dbg !7073
  %0 = bitcast %struct.tms* %t to i8*, !dbg !7074
  call void @llvm.lifetime.start(i64 32, i8* %0) #3, !dbg !7074
  call void @llvm.dbg.declare(metadata %struct.tms* %t, metadata !1612, metadata !3844), !dbg !7075
  %1 = bitcast i64* %c to i8*, !dbg !7076
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !7076
  call void @llvm.dbg.declare(metadata i64* %c, metadata !1620, metadata !3844), !dbg !7077
  %call = call i32* @__errno_location() #1, !dbg !7078
  store i32 0, i32* %call, align 4, !dbg !7079, !tbaa !3840
  %call1 = call i64 @times(%struct.tms* %t) #3, !dbg !7080
  store i64 %call1, i64* %c, align 8, !dbg !7081, !tbaa !3904
  %2 = load i64, i64* %c, align 8, !dbg !7082, !tbaa !3904
  %cmp = icmp eq i64 %2, -1, !dbg !7084
  br i1 %cmp, label %if.then, label %if.end, !dbg !7085

if.then:                                          ; preds = %entry
  %call2 = call %struct._object* @posix_error(), !dbg !7086
  store %struct._object* %call2, %struct._object** %retval, !dbg !7087
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7087

if.end:                                           ; preds = %entry
  %tms_utime = getelementptr inbounds %struct.tms, %struct.tms* %t, i32 0, i32 0, !dbg !7088
  %3 = load i64, i64* %tms_utime, align 8, !dbg !7088, !tbaa !7089
  %conv = sitofp i64 %3 to double, !dbg !7091
  %4 = load i64, i64* @ticks_per_second, align 8, !dbg !7092, !tbaa !3904
  %conv3 = sitofp i64 %4 to double, !dbg !7092
  %div = fdiv double %conv, %conv3, !dbg !7093
  %tms_stime = getelementptr inbounds %struct.tms, %struct.tms* %t, i32 0, i32 1, !dbg !7094
  %5 = load i64, i64* %tms_stime, align 8, !dbg !7094, !tbaa !7095
  %conv4 = sitofp i64 %5 to double, !dbg !7096
  %6 = load i64, i64* @ticks_per_second, align 8, !dbg !7097, !tbaa !3904
  %conv5 = sitofp i64 %6 to double, !dbg !7097
  %div6 = fdiv double %conv4, %conv5, !dbg !7098
  %tms_cutime = getelementptr inbounds %struct.tms, %struct.tms* %t, i32 0, i32 2, !dbg !7099
  %7 = load i64, i64* %tms_cutime, align 8, !dbg !7099, !tbaa !7100
  %conv7 = sitofp i64 %7 to double, !dbg !7101
  %8 = load i64, i64* @ticks_per_second, align 8, !dbg !7102, !tbaa !3904
  %conv8 = sitofp i64 %8 to double, !dbg !7102
  %div9 = fdiv double %conv7, %conv8, !dbg !7103
  %tms_cstime = getelementptr inbounds %struct.tms, %struct.tms* %t, i32 0, i32 3, !dbg !7104
  %9 = load i64, i64* %tms_cstime, align 8, !dbg !7104, !tbaa !7105
  %conv10 = sitofp i64 %9 to double, !dbg !7106
  %10 = load i64, i64* @ticks_per_second, align 8, !dbg !7107, !tbaa !3904
  %conv11 = sitofp i64 %10 to double, !dbg !7107
  %div12 = fdiv double %conv10, %conv11, !dbg !7108
  %11 = load i64, i64* %c, align 8, !dbg !7109, !tbaa !3904
  %conv13 = sitofp i64 %11 to double, !dbg !7110
  %12 = load i64, i64* @ticks_per_second, align 8, !dbg !7111, !tbaa !3904
  %conv14 = sitofp i64 %12 to double, !dbg !7111
  %div15 = fdiv double %conv13, %conv14, !dbg !7112
  %call16 = call %struct._object* @build_times_result(double %div, double %div6, double %div9, double %div12, double %div15), !dbg !7113
  store %struct._object* %call16, %struct._object** %retval, !dbg !7114
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7114

cleanup:                                          ; preds = %if.end, %if.then
  %13 = bitcast i64* %c to i8*, !dbg !7115
  call void @llvm.lifetime.end(i64 8, i8* %13) #3, !dbg !7115
  %14 = bitcast %struct.tms* %t to i8*, !dbg !7115
  call void @llvm.lifetime.end(i64 32, i8* %14) #3, !dbg !7115
  %15 = load %struct._object*, %struct._object** %retval, !dbg !7115
  ret %struct._object* %15, !dbg !7115
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix__exit(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %sts = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1663, metadata !3844), !dbg !7116
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1664, metadata !3844), !dbg !7117
  %0 = bitcast i32* %sts to i8*, !dbg !7118
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !7118
  call void @llvm.dbg.declare(metadata i32* %sts, metadata !1665, metadata !3844), !dbg !7119
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7120, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.227, i32 0, i32 0), i32* %sts), !dbg !7122
  %tobool = icmp ne i32 %call, 0, !dbg !7122
  br i1 %tobool, label %if.end, label %if.then, !dbg !7123

if.then:                                          ; preds = %entry
  %2 = bitcast i32* %sts to i8*, !dbg !7124
  call void @llvm.lifetime.end(i64 4, i8* %2) #3, !dbg !7124
  ret %struct._object* null, !dbg !7125

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %sts, align 4, !dbg !7126, !tbaa !3840
  call void @_exit(i32 %3) #12, !dbg !7127
  unreachable, !dbg !7127
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_execv(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %opath = alloca %struct._object*, align 8
  %path = alloca i8*, align 8
  %argv = alloca %struct._object*, align 8
  %argvlist = alloca i8**, align 8
  %argc = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp16 = alloca %struct._object*, align 8
  %_py_decref_tmp32 = alloca %struct._object*, align 8
  %_py_decref_tmp46 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1668, metadata !3844), !dbg !7128
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1669, metadata !3844), !dbg !7129
  %0 = bitcast %struct._object** %opath to i8*, !dbg !7130
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !7130
  call void @llvm.dbg.declare(metadata %struct._object** %opath, metadata !1670, metadata !3844), !dbg !7131
  %1 = bitcast i8** %path to i8*, !dbg !7132
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !7132
  call void @llvm.dbg.declare(metadata i8** %path, metadata !1671, metadata !3844), !dbg !7133
  %2 = bitcast %struct._object** %argv to i8*, !dbg !7134
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !7134
  call void @llvm.dbg.declare(metadata %struct._object** %argv, metadata !1672, metadata !3844), !dbg !7135
  %3 = bitcast i8*** %argvlist to i8*, !dbg !7136
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !7136
  call void @llvm.dbg.declare(metadata i8*** %argvlist, metadata !1673, metadata !3844), !dbg !7137
  %4 = bitcast i64* %argc to i8*, !dbg !7138
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !7138
  call void @llvm.dbg.declare(metadata i64* %argc, metadata !1674, metadata !3844), !dbg !7139
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7140, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %5, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.228, i32 0, i32 0), i32 (%struct._object*, i8*)* @PyUnicode_FSConverter, %struct._object** %opath, %struct._object** %argv), !dbg !7142
  %tobool = icmp ne i32 %call, 0, !dbg !7142
  br i1 %tobool, label %if.end, label %if.then, !dbg !7143

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7144
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7144

if.end:                                           ; preds = %entry
  %6 = load %struct._object*, %struct._object** %opath, align 8, !dbg !7145, !tbaa !3867
  %call1 = call i8* @PyBytes_AsString(%struct._object* %6), !dbg !7146
  store i8* %call1, i8** %path, align 8, !dbg !7147, !tbaa !3867
  %7 = load %struct._object*, %struct._object** %argv, align 8, !dbg !7148, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1, !dbg !7149
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7149, !tbaa !3892
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 19, !dbg !7150
  %9 = load i64, i64* %tp_flags, align 8, !dbg !7150, !tbaa !6259
  %and = and i64 %9, 33554432, !dbg !7151
  %cmp = icmp ne i64 %and, 0, !dbg !7152
  br i1 %cmp, label %if.end.11, label %land.lhs.true, !dbg !7153

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %argv, align 8, !dbg !7154, !tbaa !3867
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !7156
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8, !dbg !7156, !tbaa !3892
  %tp_flags3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 19, !dbg !7157
  %12 = load i64, i64* %tp_flags3, align 8, !dbg !7157, !tbaa !6259
  %and4 = and i64 %12, 67108864, !dbg !7158
  %cmp5 = icmp ne i64 %and4, 0, !dbg !7159
  br i1 %cmp5, label %if.end.11, label %if.then.6, !dbg !7160

if.then.6:                                        ; preds = %land.lhs.true
  %13 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !7161, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %13, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.229, i32 0, i32 0)), !dbg !7162
  br label %do.body, !dbg !7163

do.body:                                          ; preds = %if.then.6
  %14 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7164
  call void @llvm.lifetime.start(i64 8, i8* %14) #3, !dbg !7164
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1675, metadata !3844), !dbg !7166
  %15 = load %struct._object*, %struct._object** %opath, align 8, !dbg !7167, !tbaa !3867
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8, !dbg !7166, !tbaa !3867
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7168, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0, !dbg !7170
  %17 = load i64, i64* %ob_refcnt, align 8, !dbg !7171, !tbaa !3977
  %dec = add i64 %17, -1, !dbg !7171
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !7171, !tbaa !3977
  %cmp7 = icmp ne i64 %dec, 0, !dbg !7172
  br i1 %cmp7, label %if.then.8, label %if.else, !dbg !7173

if.then.8:                                        ; preds = %do.body
  br label %if.end.10, !dbg !7174

if.else:                                          ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7176, !tbaa !3867
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1, !dbg !7178
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8, !dbg !7178, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4, !dbg !7179
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7179, !tbaa !3986
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7180, !tbaa !3867
  call void %20(%struct._object* %21), !dbg !7181
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.8
  %22 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7182
  call void @llvm.lifetime.end(i64 8, i8* %22) #3, !dbg !7182
  br label %do.cond, !dbg !7184

do.cond:                                          ; preds = %if.end.10
  br label %do.end, !dbg !7185

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !7187
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7187

if.end.11:                                        ; preds = %land.lhs.true, %if.end
  %23 = load %struct._object*, %struct._object** %argv, align 8, !dbg !7188, !tbaa !3867
  %call12 = call i64 @PySequence_Size(%struct._object* %23), !dbg !7189
  store i64 %call12, i64* %argc, align 8, !dbg !7190, !tbaa !3904
  %24 = load i64, i64* %argc, align 8, !dbg !7191, !tbaa !3904
  %cmp13 = icmp slt i64 %24, 1, !dbg !7192
  br i1 %cmp13, label %if.then.14, label %if.end.27, !dbg !7193

if.then.14:                                       ; preds = %if.end.11
  %25 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !7194, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %25, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.230, i32 0, i32 0)), !dbg !7195
  br label %do.body.15, !dbg !7196

do.body.15:                                       ; preds = %if.then.14
  %26 = bitcast %struct._object** %_py_decref_tmp16 to i8*, !dbg !7197
  call void @llvm.lifetime.start(i64 8, i8* %26) #3, !dbg !7197
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp16, metadata !1679, metadata !3844), !dbg !7199
  %27 = load %struct._object*, %struct._object** %opath, align 8, !dbg !7200, !tbaa !3867
  store %struct._object* %27, %struct._object** %_py_decref_tmp16, align 8, !dbg !7199, !tbaa !3867
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8, !dbg !7201, !tbaa !3867
  %ob_refcnt17 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0, !dbg !7203
  %29 = load i64, i64* %ob_refcnt17, align 8, !dbg !7204, !tbaa !3977
  %dec18 = add i64 %29, -1, !dbg !7204
  store i64 %dec18, i64* %ob_refcnt17, align 8, !dbg !7204, !tbaa !3977
  %cmp19 = icmp ne i64 %dec18, 0, !dbg !7205
  br i1 %cmp19, label %if.then.20, label %if.else.21, !dbg !7206

if.then.20:                                       ; preds = %do.body.15
  br label %if.end.24, !dbg !7207

if.else.21:                                       ; preds = %do.body.15
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8, !dbg !7209, !tbaa !3867
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !7211
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8, !dbg !7211, !tbaa !3892
  %tp_dealloc23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4, !dbg !7212
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc23, align 8, !dbg !7212, !tbaa !3986
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8, !dbg !7213, !tbaa !3867
  call void %32(%struct._object* %33), !dbg !7214
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.21, %if.then.20
  %34 = bitcast %struct._object** %_py_decref_tmp16 to i8*, !dbg !7215
  call void @llvm.lifetime.end(i64 8, i8* %34) #3, !dbg !7215
  br label %do.cond.25, !dbg !7217

do.cond.25:                                       ; preds = %if.end.24
  br label %do.end.26, !dbg !7218

do.end.26:                                        ; preds = %do.cond.25
  store %struct._object* null, %struct._object** %retval, !dbg !7220
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7220

if.end.27:                                        ; preds = %if.end.11
  %35 = load %struct._object*, %struct._object** %argv, align 8, !dbg !7221, !tbaa !3867
  %call28 = call i8** @parse_arglist(%struct._object* %35, i64* %argc), !dbg !7222
  store i8** %call28, i8*** %argvlist, align 8, !dbg !7223, !tbaa !3867
  %36 = load i8**, i8*** %argvlist, align 8, !dbg !7224, !tbaa !3867
  %cmp29 = icmp eq i8** %36, null, !dbg !7225
  br i1 %cmp29, label %if.then.30, label %if.end.43, !dbg !7226

if.then.30:                                       ; preds = %if.end.27
  br label %do.body.31, !dbg !7227

do.body.31:                                       ; preds = %if.then.30
  %37 = bitcast %struct._object** %_py_decref_tmp32 to i8*, !dbg !7228
  call void @llvm.lifetime.start(i64 8, i8* %37) #3, !dbg !7228
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp32, metadata !1683, metadata !3844), !dbg !7230
  %38 = load %struct._object*, %struct._object** %opath, align 8, !dbg !7231, !tbaa !3867
  store %struct._object* %38, %struct._object** %_py_decref_tmp32, align 8, !dbg !7230, !tbaa !3867
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8, !dbg !7232, !tbaa !3867
  %ob_refcnt33 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0, !dbg !7234
  %40 = load i64, i64* %ob_refcnt33, align 8, !dbg !7235, !tbaa !3977
  %dec34 = add i64 %40, -1, !dbg !7235
  store i64 %dec34, i64* %ob_refcnt33, align 8, !dbg !7235, !tbaa !3977
  %cmp35 = icmp ne i64 %dec34, 0, !dbg !7236
  br i1 %cmp35, label %if.then.36, label %if.else.37, !dbg !7237

if.then.36:                                       ; preds = %do.body.31
  br label %if.end.40, !dbg !7238

if.else.37:                                       ; preds = %do.body.31
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8, !dbg !7240, !tbaa !3867
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1, !dbg !7242
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8, !dbg !7242, !tbaa !3892
  %tp_dealloc39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4, !dbg !7243
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc39, align 8, !dbg !7243, !tbaa !3986
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8, !dbg !7244, !tbaa !3867
  call void %43(%struct._object* %44), !dbg !7245
  br label %if.end.40

if.end.40:                                        ; preds = %if.else.37, %if.then.36
  %45 = bitcast %struct._object** %_py_decref_tmp32 to i8*, !dbg !7246
  call void @llvm.lifetime.end(i64 8, i8* %45) #3, !dbg !7246
  br label %do.cond.41, !dbg !7248

do.cond.41:                                       ; preds = %if.end.40
  br label %do.end.42, !dbg !7249

do.end.42:                                        ; preds = %do.cond.41
  store %struct._object* null, %struct._object** %retval, !dbg !7251
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7251

if.end.43:                                        ; preds = %if.end.27
  %46 = load i8*, i8** %path, align 8, !dbg !7252, !tbaa !3867
  %47 = load i8**, i8*** %argvlist, align 8, !dbg !7253, !tbaa !3867
  %call44 = call i32 @execv(i8* %46, i8** %47) #3, !dbg !7254
  %48 = load i8**, i8*** %argvlist, align 8, !dbg !7255, !tbaa !3867
  %49 = load i64, i64* %argc, align 8, !dbg !7256, !tbaa !3904
  call void @free_string_array(i8** %48, i64 %49), !dbg !7257
  br label %do.body.45, !dbg !7258

do.body.45:                                       ; preds = %if.end.43
  %50 = bitcast %struct._object** %_py_decref_tmp46 to i8*, !dbg !7259
  call void @llvm.lifetime.start(i64 8, i8* %50) #3, !dbg !7259
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp46, metadata !1687, metadata !3844), !dbg !7261
  %51 = load %struct._object*, %struct._object** %opath, align 8, !dbg !7262, !tbaa !3867
  store %struct._object* %51, %struct._object** %_py_decref_tmp46, align 8, !dbg !7261, !tbaa !3867
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8, !dbg !7263, !tbaa !3867
  %ob_refcnt47 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 0, !dbg !7265
  %53 = load i64, i64* %ob_refcnt47, align 8, !dbg !7266, !tbaa !3977
  %dec48 = add i64 %53, -1, !dbg !7266
  store i64 %dec48, i64* %ob_refcnt47, align 8, !dbg !7266, !tbaa !3977
  %cmp49 = icmp ne i64 %dec48, 0, !dbg !7267
  br i1 %cmp49, label %if.then.50, label %if.else.51, !dbg !7268

if.then.50:                                       ; preds = %do.body.45
  br label %if.end.54, !dbg !7269

if.else.51:                                       ; preds = %do.body.45
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8, !dbg !7271, !tbaa !3867
  %ob_type52 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 1, !dbg !7273
  %55 = load %struct._typeobject*, %struct._typeobject** %ob_type52, align 8, !dbg !7273, !tbaa !3892
  %tp_dealloc53 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 4, !dbg !7274
  %56 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc53, align 8, !dbg !7274, !tbaa !3986
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8, !dbg !7275, !tbaa !3867
  call void %56(%struct._object* %57), !dbg !7276
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.51, %if.then.50
  %58 = bitcast %struct._object** %_py_decref_tmp46 to i8*, !dbg !7277
  call void @llvm.lifetime.end(i64 8, i8* %58) #3, !dbg !7277
  br label %do.cond.55, !dbg !7279

do.cond.55:                                       ; preds = %if.end.54
  br label %do.end.56, !dbg !7280

do.end.56:                                        ; preds = %do.cond.55
  %call57 = call %struct._object* @posix_error(), !dbg !7282
  store %struct._object* %call57, %struct._object** %retval, !dbg !7283
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7283

cleanup:                                          ; preds = %do.end.56, %do.end.42, %do.end.26, %do.end, %if.then
  %59 = bitcast i64* %argc to i8*, !dbg !7284
  call void @llvm.lifetime.end(i64 8, i8* %59) #3, !dbg !7284
  %60 = bitcast i8*** %argvlist to i8*, !dbg !7284
  call void @llvm.lifetime.end(i64 8, i8* %60) #3, !dbg !7284
  %61 = bitcast %struct._object** %argv to i8*, !dbg !7284
  call void @llvm.lifetime.end(i64 8, i8* %61) #3, !dbg !7284
  %62 = bitcast i8** %path to i8*, !dbg !7284
  call void @llvm.lifetime.end(i64 8, i8* %62) #3, !dbg !7284
  %63 = bitcast %struct._object** %opath to i8*, !dbg !7284
  call void @llvm.lifetime.end(i64 8, i8* %63) #3, !dbg !7284
  %64 = load %struct._object*, %struct._object** %retval, !dbg !7284
  ret %struct._object* %64, !dbg !7284
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_execve(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %argv = alloca %struct._object*, align 8
  %env = alloca %struct._object*, align 8
  %argvlist = alloca i8**, align 8
  %envlist = alloca i8**, align 8
  %argc = alloca i64, align 8
  %envc = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1726, metadata !3844), !dbg !7285
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1727, metadata !3844), !dbg !7286
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1728, metadata !3844), !dbg !7287
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !7288
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !7288
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !1729, metadata !3844), !dbg !7289
  %1 = bitcast %struct._object** %argv to i8*, !dbg !7290
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !7290
  call void @llvm.dbg.declare(metadata %struct._object** %argv, metadata !1730, metadata !3844), !dbg !7291
  %2 = bitcast %struct._object** %env to i8*, !dbg !7290
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !7290
  call void @llvm.dbg.declare(metadata %struct._object** %env, metadata !1731, metadata !3844), !dbg !7292
  %3 = bitcast i8*** %argvlist to i8*, !dbg !7293
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !7293
  call void @llvm.dbg.declare(metadata i8*** %argvlist, metadata !1732, metadata !3844), !dbg !7294
  store i8** null, i8*** %argvlist, align 8, !dbg !7294, !tbaa !3867
  %4 = bitcast i8*** %envlist to i8*, !dbg !7295
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !7295
  call void @llvm.dbg.declare(metadata i8*** %envlist, metadata !1733, metadata !3844), !dbg !7296
  %5 = bitcast i64* %argc to i8*, !dbg !7297
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !7297
  call void @llvm.dbg.declare(metadata i64* %argc, metadata !1734, metadata !3844), !dbg !7298
  %6 = bitcast i64* %envc to i8*, !dbg !7297
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !7297
  call void @llvm.dbg.declare(metadata i64* %envc, metadata !1735, metadata !3844), !dbg !7299
  %7 = bitcast %struct.path_t* %path to i8*, !dbg !7300
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 72, i32 8, i1 false), !dbg !7300
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !7301
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.59, i32 0, i32 0), i8** %function_name, align 8, !dbg !7302, !tbaa !5512
  %allow_fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 3, !dbg !7303
  store i32 1, i32* %allow_fd, align 4, !dbg !7304, !tbaa !5516
  %8 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7305, !tbaa !3867
  %9 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !7307, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %8, %struct._object* %9, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.233, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @posix_execve.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, %struct._object** %argv, %struct._object** %env), !dbg !7308
  %tobool = icmp ne i32 %call, 0, !dbg !7308
  br i1 %tobool, label %if.end, label %if.then, !dbg !7309

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7310
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7310

if.end:                                           ; preds = %entry
  %10 = load %struct._object*, %struct._object** %argv, align 8, !dbg !7311, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !7313
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7313, !tbaa !3892
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 19, !dbg !7314
  %12 = load i64, i64* %tp_flags, align 8, !dbg !7314, !tbaa !6259
  %and = and i64 %12, 33554432, !dbg !7315
  %cmp = icmp ne i64 %and, 0, !dbg !7316
  br i1 %cmp, label %if.end.6, label %land.lhs.true, !dbg !7317

land.lhs.true:                                    ; preds = %if.end
  %13 = load %struct._object*, %struct._object** %argv, align 8, !dbg !7318, !tbaa !3867
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1, !dbg !7320
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !7320, !tbaa !3892
  %tp_flags2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 19, !dbg !7321
  %15 = load i64, i64* %tp_flags2, align 8, !dbg !7321, !tbaa !6259
  %and3 = and i64 %15, 67108864, !dbg !7322
  %cmp4 = icmp ne i64 %and3, 0, !dbg !7323
  br i1 %cmp4, label %if.end.6, label %if.then.5, !dbg !7324

if.then.5:                                        ; preds = %land.lhs.true
  %16 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !7325, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %16, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.234, i32 0, i32 0)), !dbg !7327
  br label %fail, !dbg !7328

if.end.6:                                         ; preds = %land.lhs.true, %if.end
  %17 = load %struct._object*, %struct._object** %argv, align 8, !dbg !7329, !tbaa !3867
  %call7 = call i64 @PySequence_Size(%struct._object* %17), !dbg !7330
  store i64 %call7, i64* %argc, align 8, !dbg !7331, !tbaa !3904
  %18 = load %struct._object*, %struct._object** %env, align 8, !dbg !7332, !tbaa !3867
  %call8 = call i32 @PyMapping_Check(%struct._object* %18), !dbg !7334
  %tobool9 = icmp ne i32 %call8, 0, !dbg !7334
  br i1 %tobool9, label %if.end.11, label %if.then.10, !dbg !7335

if.then.10:                                       ; preds = %if.end.6
  %19 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !7336, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %19, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.235, i32 0, i32 0)), !dbg !7338
  br label %fail, !dbg !7339

if.end.11:                                        ; preds = %if.end.6
  %20 = load %struct._object*, %struct._object** %argv, align 8, !dbg !7340, !tbaa !3867
  %call12 = call i8** @parse_arglist(%struct._object* %20, i64* %argc), !dbg !7341
  store i8** %call12, i8*** %argvlist, align 8, !dbg !7342, !tbaa !3867
  %21 = load i8**, i8*** %argvlist, align 8, !dbg !7343, !tbaa !3867
  %cmp13 = icmp eq i8** %21, null, !dbg !7345
  br i1 %cmp13, label %if.then.14, label %if.end.15, !dbg !7346

if.then.14:                                       ; preds = %if.end.11
  br label %fail, !dbg !7347

if.end.15:                                        ; preds = %if.end.11
  %22 = load %struct._object*, %struct._object** %env, align 8, !dbg !7349, !tbaa !3867
  %call16 = call i8** @parse_envlist(%struct._object* %22, i64* %envc), !dbg !7350
  store i8** %call16, i8*** %envlist, align 8, !dbg !7351, !tbaa !3867
  %23 = load i8**, i8*** %envlist, align 8, !dbg !7352, !tbaa !3867
  %cmp17 = icmp eq i8** %23, null, !dbg !7354
  br i1 %cmp17, label %if.then.18, label %if.end.19, !dbg !7355

if.then.18:                                       ; preds = %if.end.15
  br label %fail, !dbg !7356

if.end.19:                                        ; preds = %if.end.15
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !7357
  %24 = load i32, i32* %fd, align 4, !dbg !7357, !tbaa !5529
  %cmp20 = icmp sgt i32 %24, -1, !dbg !7359
  br i1 %cmp20, label %if.then.21, label %if.else, !dbg !7360

if.then.21:                                       ; preds = %if.end.19
  %fd22 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !7361
  %25 = load i32, i32* %fd22, align 4, !dbg !7361, !tbaa !5529
  %26 = load i8**, i8*** %argvlist, align 8, !dbg !7362, !tbaa !3867
  %27 = load i8**, i8*** %envlist, align 8, !dbg !7363, !tbaa !3867
  %call23 = call i32 @fexecve(i32 %25, i8** %26, i8** %27) #3, !dbg !7364
  br label %if.end.25, !dbg !7364

if.else:                                          ; preds = %if.end.19
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !7365
  %28 = load i8*, i8** %narrow, align 8, !dbg !7365, !tbaa !5537
  %29 = load i8**, i8*** %argvlist, align 8, !dbg !7366, !tbaa !3867
  %30 = load i8**, i8*** %envlist, align 8, !dbg !7367, !tbaa !3867
  %call24 = call i32 @execve(i8* %28, i8** %29, i8** %30) #3, !dbg !7368
  br label %if.end.25

if.end.25:                                        ; preds = %if.else, %if.then.21
  %call26 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !7369
  br label %while.cond, !dbg !7370

while.cond:                                       ; preds = %while.body, %if.end.25
  %31 = load i64, i64* %envc, align 8, !dbg !7371, !tbaa !3904
  %dec = add i64 %31, -1, !dbg !7371
  store i64 %dec, i64* %envc, align 8, !dbg !7371, !tbaa !3904
  %cmp27 = icmp sge i64 %dec, 0, !dbg !7374
  br i1 %cmp27, label %while.body, label %while.end, !dbg !7370

while.body:                                       ; preds = %while.cond
  %32 = load i64, i64* %envc, align 8, !dbg !7375, !tbaa !3904
  %33 = load i8**, i8*** %envlist, align 8, !dbg !7376, !tbaa !3867
  %arrayidx = getelementptr i8*, i8** %33, i64 %32, !dbg !7376
  %34 = load i8*, i8** %arrayidx, align 8, !dbg !7376, !tbaa !3867
  call void @PyMem_Free(i8* %34), !dbg !7377
  br label %while.cond, !dbg !7370

while.end:                                        ; preds = %while.cond
  %35 = load i8**, i8*** %envlist, align 8, !dbg !7378, !tbaa !3867
  %36 = bitcast i8** %35 to i8*, !dbg !7378
  call void @PyMem_Free(i8* %36), !dbg !7379
  br label %fail, !dbg !7379

fail:                                             ; preds = %while.end, %if.then.18, %if.then.14, %if.then.10, %if.then.5
  %37 = load i8**, i8*** %argvlist, align 8, !dbg !7380, !tbaa !3867
  %tobool28 = icmp ne i8** %37, null, !dbg !7380
  br i1 %tobool28, label %if.then.29, label %if.end.30, !dbg !7382

if.then.29:                                       ; preds = %fail
  %38 = load i8**, i8*** %argvlist, align 8, !dbg !7383, !tbaa !3867
  %39 = load i64, i64* %argc, align 8, !dbg !7384, !tbaa !3904
  call void @free_string_array(i8** %38, i64 %39), !dbg !7385
  br label %if.end.30, !dbg !7385

if.end.30:                                        ; preds = %if.then.29, %fail
  call void @path_cleanup(%struct.path_t* %path), !dbg !7386
  store %struct._object* null, %struct._object** %retval, !dbg !7387
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7387

cleanup:                                          ; preds = %if.end.30, %if.then
  %40 = bitcast i64* %envc to i8*, !dbg !7388
  call void @llvm.lifetime.end(i64 8, i8* %40) #3, !dbg !7388
  %41 = bitcast i64* %argc to i8*, !dbg !7388
  call void @llvm.lifetime.end(i64 8, i8* %41) #3, !dbg !7388
  %42 = bitcast i8*** %envlist to i8*, !dbg !7388
  call void @llvm.lifetime.end(i64 8, i8* %42) #3, !dbg !7388
  %43 = bitcast i8*** %argvlist to i8*, !dbg !7388
  call void @llvm.lifetime.end(i64 8, i8* %43) #3, !dbg !7388
  %44 = bitcast %struct._object** %env to i8*, !dbg !7388
  call void @llvm.lifetime.end(i64 8, i8* %44) #3, !dbg !7388
  %45 = bitcast %struct._object** %argv to i8*, !dbg !7388
  call void @llvm.lifetime.end(i64 8, i8* %45) #3, !dbg !7388
  %46 = bitcast %struct.path_t* %path to i8*, !dbg !7388
  call void @llvm.lifetime.end(i64 72, i8* %46) #3, !dbg !7388
  %47 = load %struct._object*, %struct._object** %retval, !dbg !7388
  ret %struct._object* %47, !dbg !7388
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_fork(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %result = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1787, metadata !3844), !dbg !7389
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !1788, metadata !3844), !dbg !7390
  %0 = bitcast i32* %pid to i8*, !dbg !7391
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !7391
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !1789, metadata !3844), !dbg !7392
  %1 = bitcast i32* %result to i8*, !dbg !7393
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !7393
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1792, metadata !3844), !dbg !7394
  store i32 0, i32* %result, align 4, !dbg !7394, !tbaa !3840
  call void @_PyImport_AcquireLock(), !dbg !7395
  %call = call i32 @fork() #3, !dbg !7396
  store i32 %call, i32* %pid, align 4, !dbg !7397, !tbaa !3840
  %2 = load i32, i32* %pid, align 4, !dbg !7398, !tbaa !3840
  %cmp = icmp eq i32 %2, 0, !dbg !7400
  br i1 %cmp, label %if.then, label %if.else, !dbg !7401

if.then:                                          ; preds = %entry
  call void @PyOS_AfterFork(), !dbg !7402
  br label %if.end, !dbg !7404

if.else:                                          ; preds = %entry
  %call1 = call i32 @_PyImport_ReleaseLock(), !dbg !7405
  store i32 %call1, i32* %result, align 4, !dbg !7407, !tbaa !3840
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load i32, i32* %pid, align 4, !dbg !7408, !tbaa !3840
  %cmp2 = icmp eq i32 %3, -1, !dbg !7410
  br i1 %cmp2, label %if.then.3, label %if.end.5, !dbg !7411

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !7412
  store %struct._object* %call4, %struct._object** %retval, !dbg !7413
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7413

if.end.5:                                         ; preds = %if.end
  %4 = load i32, i32* %result, align 4, !dbg !7414, !tbaa !3840
  %cmp6 = icmp slt i32 %4, 0, !dbg !7416
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !7417

if.then.7:                                        ; preds = %if.end.5
  %5 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8, !dbg !7418, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.238, i32 0, i32 0)), !dbg !7420
  store %struct._object* null, %struct._object** %retval, !dbg !7421
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7421

if.end.8:                                         ; preds = %if.end.5
  %6 = load i32, i32* %pid, align 4, !dbg !7422, !tbaa !3840
  %conv = sext i32 %6 to i64, !dbg !7422
  %call9 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !7423
  store %struct._object* %call9, %struct._object** %retval, !dbg !7424
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7424

cleanup:                                          ; preds = %if.end.8, %if.then.7, %if.then.3
  %7 = bitcast i32* %result to i8*, !dbg !7425
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !7425
  %8 = bitcast i32* %pid to i8*, !dbg !7425
  call void @llvm.lifetime.end(i64 4, i8* %8) #3, !dbg !7425
  %9 = load %struct._object*, %struct._object** %retval, !dbg !7425
  ret %struct._object* %9, !dbg !7425
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_sched_get_priority_max(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %policy = alloca i32, align 4
  %max = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1795, metadata !3844), !dbg !7426
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1796, metadata !3844), !dbg !7427
  %0 = bitcast i32* %policy to i8*, !dbg !7428
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !7428
  call void @llvm.dbg.declare(metadata i32* %policy, metadata !1797, metadata !3844), !dbg !7429
  %1 = bitcast i32* %max to i8*, !dbg !7428
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !7428
  call void @llvm.dbg.declare(metadata i32* %max, metadata !1798, metadata !3844), !dbg !7430
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7431, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.239, i32 0, i32 0), i32* %policy), !dbg !7433
  %tobool = icmp ne i32 %call, 0, !dbg !7433
  br i1 %tobool, label %if.end, label %if.then, !dbg !7434

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7435
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7435

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %policy, align 4, !dbg !7436, !tbaa !3840
  %call1 = call i32 @sched_get_priority_max(i32 %3) #3, !dbg !7437
  store i32 %call1, i32* %max, align 4, !dbg !7438, !tbaa !3840
  %4 = load i32, i32* %max, align 4, !dbg !7439, !tbaa !3840
  %cmp = icmp slt i32 %4, 0, !dbg !7441
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !7442

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !7443
  store %struct._object* %call3, %struct._object** %retval, !dbg !7444
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7444

if.end.4:                                         ; preds = %if.end
  %5 = load i32, i32* %max, align 4, !dbg !7445, !tbaa !3840
  %conv = sext i32 %5 to i64, !dbg !7445
  %call5 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !7446
  store %struct._object* %call5, %struct._object** %retval, !dbg !7447
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7447

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %6 = bitcast i32* %max to i8*, !dbg !7448
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !7448
  %7 = bitcast i32* %policy to i8*, !dbg !7448
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !7448
  %8 = load %struct._object*, %struct._object** %retval, !dbg !7448
  ret %struct._object* %8, !dbg !7448
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_sched_get_priority_min(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %policy = alloca i32, align 4
  %min = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1801, metadata !3844), !dbg !7449
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1802, metadata !3844), !dbg !7450
  %0 = bitcast i32* %policy to i8*, !dbg !7451
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !7451
  call void @llvm.dbg.declare(metadata i32* %policy, metadata !1803, metadata !3844), !dbg !7452
  %1 = bitcast i32* %min to i8*, !dbg !7451
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !7451
  call void @llvm.dbg.declare(metadata i32* %min, metadata !1804, metadata !3844), !dbg !7453
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7454, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.240, i32 0, i32 0), i32* %policy), !dbg !7456
  %tobool = icmp ne i32 %call, 0, !dbg !7456
  br i1 %tobool, label %if.end, label %if.then, !dbg !7457

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7458
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7458

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %policy, align 4, !dbg !7459, !tbaa !3840
  %call1 = call i32 @sched_get_priority_min(i32 %3) #3, !dbg !7460
  store i32 %call1, i32* %min, align 4, !dbg !7461, !tbaa !3840
  %4 = load i32, i32* %min, align 4, !dbg !7462, !tbaa !3840
  %cmp = icmp slt i32 %4, 0, !dbg !7464
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !7465

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !7466
  store %struct._object* %call3, %struct._object** %retval, !dbg !7467
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7467

if.end.4:                                         ; preds = %if.end
  %5 = load i32, i32* %min, align 4, !dbg !7468, !tbaa !3840
  %conv = sext i32 %5 to i64, !dbg !7468
  %call5 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !7469
  store %struct._object* %call5, %struct._object** %retval, !dbg !7470
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7470

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %6 = bitcast i32* %min to i8*, !dbg !7471
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !7471
  %7 = bitcast i32* %policy to i8*, !dbg !7471
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !7471
  %8 = load %struct._object*, %struct._object** %retval, !dbg !7471
  ret %struct._object* %8, !dbg !7471
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_sched_getparam(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %param = alloca %struct.sched_param, align 4
  %res = alloca %struct._object*, align 8
  %priority = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1807, metadata !3844), !dbg !7472
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1808, metadata !3844), !dbg !7473
  %0 = bitcast i32* %pid to i8*, !dbg !7474
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !7474
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !1809, metadata !3844), !dbg !7475
  %1 = bitcast %struct.sched_param* %param to i8*, !dbg !7476
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !7476
  call void @llvm.dbg.declare(metadata %struct.sched_param* %param, metadata !1810, metadata !3844), !dbg !7477
  %2 = bitcast %struct._object** %res to i8*, !dbg !7478
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !7478
  call void @llvm.dbg.declare(metadata %struct._object** %res, metadata !1814, metadata !3844), !dbg !7479
  %3 = bitcast %struct._object** %priority to i8*, !dbg !7478
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !7478
  call void @llvm.dbg.declare(metadata %struct._object** %priority, metadata !1815, metadata !3844), !dbg !7480
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7481, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.241, i32 0, i32 0), i32* %pid), !dbg !7483
  %tobool = icmp ne i32 %call, 0, !dbg !7483
  br i1 %tobool, label %if.end, label %if.then, !dbg !7484

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7485
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7485

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %pid, align 4, !dbg !7486, !tbaa !3840
  %call1 = call i32 @sched_getparam(i32 %5, %struct.sched_param* %param) #3, !dbg !7488
  %tobool2 = icmp ne i32 %call1, 0, !dbg !7488
  br i1 %tobool2, label %if.then.3, label %if.end.5, !dbg !7489

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !7490
  store %struct._object* %call4, %struct._object** %retval, !dbg !7491
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7491

if.end.5:                                         ; preds = %if.end
  %call6 = call %struct._object* @PyStructSequence_New(%struct._typeobject* @SchedParamType), !dbg !7492
  store %struct._object* %call6, %struct._object** %res, align 8, !dbg !7493, !tbaa !3867
  %6 = load %struct._object*, %struct._object** %res, align 8, !dbg !7494, !tbaa !3867
  %tobool7 = icmp ne %struct._object* %6, null, !dbg !7494
  br i1 %tobool7, label %if.end.9, label %if.then.8, !dbg !7496

if.then.8:                                        ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval, !dbg !7497
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7497

if.end.9:                                         ; preds = %if.end.5
  %__sched_priority = getelementptr inbounds %struct.sched_param, %struct.sched_param* %param, i32 0, i32 0, !dbg !7498
  %7 = load i32, i32* %__sched_priority, align 4, !dbg !7498, !tbaa !7499
  %conv = sext i32 %7 to i64, !dbg !7501
  %call10 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !7502
  store %struct._object* %call10, %struct._object** %priority, align 8, !dbg !7503, !tbaa !3867
  %8 = load %struct._object*, %struct._object** %priority, align 8, !dbg !7504, !tbaa !3867
  %tobool11 = icmp ne %struct._object* %8, null, !dbg !7504
  br i1 %tobool11, label %if.end.16, label %if.then.12, !dbg !7505

if.then.12:                                       ; preds = %if.end.9
  br label %do.body, !dbg !7506

do.body:                                          ; preds = %if.then.12
  %9 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7507
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !7507
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1816, metadata !3844), !dbg !7509
  %10 = load %struct._object*, %struct._object** %res, align 8, !dbg !7510, !tbaa !3867
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8, !dbg !7509, !tbaa !3867
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7511, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0, !dbg !7513
  %12 = load i64, i64* %ob_refcnt, align 8, !dbg !7514, !tbaa !3977
  %dec = add i64 %12, -1, !dbg !7514
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !7514, !tbaa !3977
  %cmp = icmp ne i64 %dec, 0, !dbg !7515
  br i1 %cmp, label %if.then.14, label %if.else, !dbg !7516

if.then.14:                                       ; preds = %do.body
  br label %if.end.15, !dbg !7517

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7519, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1, !dbg !7521
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7521, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4, !dbg !7522
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7522, !tbaa !3986
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7523, !tbaa !3867
  call void %15(%struct._object* %16), !dbg !7524
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.14
  %17 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7525
  call void @llvm.lifetime.end(i64 8, i8* %17) #3, !dbg !7525
  br label %do.cond, !dbg !7527

do.cond:                                          ; preds = %if.end.15
  br label %do.end, !dbg !7528

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !7530
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7530

if.end.16:                                        ; preds = %if.end.9
  %18 = load %struct._object*, %struct._object** %priority, align 8, !dbg !7531, !tbaa !3867
  %19 = load %struct._object*, %struct._object** %res, align 8, !dbg !7532, !tbaa !3867
  %20 = bitcast %struct._object* %19 to %struct.PyTupleObject*, !dbg !7533
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %20, i32 0, i32 1, !dbg !7534
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !7535
  store %struct._object* %18, %struct._object** %arrayidx, align 8, !dbg !7536, !tbaa !3867
  %21 = load %struct._object*, %struct._object** %res, align 8, !dbg !7537, !tbaa !3867
  store %struct._object* %21, %struct._object** %retval, !dbg !7538
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7538

cleanup:                                          ; preds = %if.end.16, %do.end, %if.then.8, %if.then.3, %if.then
  %22 = bitcast %struct._object** %priority to i8*, !dbg !7539
  call void @llvm.lifetime.end(i64 8, i8* %22) #3, !dbg !7539
  %23 = bitcast %struct._object** %res to i8*, !dbg !7539
  call void @llvm.lifetime.end(i64 8, i8* %23) #3, !dbg !7539
  %24 = bitcast %struct.sched_param* %param to i8*, !dbg !7539
  call void @llvm.lifetime.end(i64 4, i8* %24) #3, !dbg !7539
  %25 = bitcast i32* %pid to i8*, !dbg !7539
  call void @llvm.lifetime.end(i64 4, i8* %25) #3, !dbg !7539
  %26 = load %struct._object*, %struct._object** %retval, !dbg !7539
  ret %struct._object* %26, !dbg !7539
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_sched_getscheduler(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %policy = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1822, metadata !3844), !dbg !7540
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1823, metadata !3844), !dbg !7541
  %0 = bitcast i32* %pid to i8*, !dbg !7542
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !7542
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !1824, metadata !3844), !dbg !7543
  %1 = bitcast i32* %policy to i8*, !dbg !7544
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !7544
  call void @llvm.dbg.declare(metadata i32* %policy, metadata !1825, metadata !3844), !dbg !7545
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7546, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.242, i32 0, i32 0), i32* %pid), !dbg !7548
  %tobool = icmp ne i32 %call, 0, !dbg !7548
  br i1 %tobool, label %if.end, label %if.then, !dbg !7549

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7550
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7550

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %pid, align 4, !dbg !7551, !tbaa !3840
  %call1 = call i32 @sched_getscheduler(i32 %3) #3, !dbg !7552
  store i32 %call1, i32* %policy, align 4, !dbg !7553, !tbaa !3840
  %4 = load i32, i32* %policy, align 4, !dbg !7554, !tbaa !3840
  %cmp = icmp slt i32 %4, 0, !dbg !7556
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !7557

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !7558
  store %struct._object* %call3, %struct._object** %retval, !dbg !7559
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7559

if.end.4:                                         ; preds = %if.end
  %5 = load i32, i32* %policy, align 4, !dbg !7560, !tbaa !3840
  %conv = sext i32 %5 to i64, !dbg !7560
  %call5 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !7561
  store %struct._object* %call5, %struct._object** %retval, !dbg !7562
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7562

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %6 = bitcast i32* %policy to i8*, !dbg !7563
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !7563
  %7 = bitcast i32* %pid to i8*, !dbg !7563
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !7563
  %8 = load %struct._object*, %struct._object** %retval, !dbg !7563
  ret %struct._object* %8, !dbg !7563
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_sched_rr_get_interval(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %interval = alloca %struct.timespec, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1828, metadata !3844), !dbg !7564
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1829, metadata !3844), !dbg !7565
  %0 = bitcast i32* %pid to i8*, !dbg !7566
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !7566
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !1830, metadata !3844), !dbg !7567
  %1 = bitcast %struct.timespec* %interval to i8*, !dbg !7568
  call void @llvm.lifetime.start(i64 16, i8* %1) #3, !dbg !7568
  call void @llvm.dbg.declare(metadata %struct.timespec* %interval, metadata !1831, metadata !3844), !dbg !7569
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7570, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.243, i32 0, i32 0), i32* %pid), !dbg !7572
  %tobool = icmp ne i32 %call, 0, !dbg !7572
  br i1 %tobool, label %if.end, label %if.then, !dbg !7573

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7574
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7574

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %pid, align 4, !dbg !7575, !tbaa !3840
  %call1 = call i32 @sched_rr_get_interval(i32 %3, %struct.timespec* %interval) #3, !dbg !7577
  %tobool2 = icmp ne i32 %call1, 0, !dbg !7577
  br i1 %tobool2, label %if.then.3, label %if.end.5, !dbg !7578

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !7579
  store %struct._object* %call4, %struct._object** %retval, !dbg !7580
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7580

if.end.5:                                         ; preds = %if.end
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %interval, i32 0, i32 0, !dbg !7581
  %4 = load i64, i64* %tv_sec, align 8, !dbg !7581, !tbaa !7582
  %conv = sitofp i64 %4 to double, !dbg !7584
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %interval, i32 0, i32 1, !dbg !7585
  %5 = load i64, i64* %tv_nsec, align 8, !dbg !7585, !tbaa !7586
  %conv6 = sitofp i64 %5 to double, !dbg !7587
  %mul = fmul double 1.000000e-09, %conv6, !dbg !7588
  %add = fadd double %conv, %mul, !dbg !7589
  %call7 = call %struct._object* @PyFloat_FromDouble(double %add), !dbg !7590
  store %struct._object* %call7, %struct._object** %retval, !dbg !7591
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7591

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %6 = bitcast %struct.timespec* %interval to i8*, !dbg !7592
  call void @llvm.lifetime.end(i64 16, i8* %6) #3, !dbg !7592
  %7 = bitcast i32* %pid to i8*, !dbg !7592
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !7592
  %8 = load %struct._object*, %struct._object** %retval, !dbg !7592
  ret %struct._object* %8, !dbg !7592
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_sched_setparam(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %param = alloca %struct.sched_param, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1834, metadata !3844), !dbg !7593
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1835, metadata !3844), !dbg !7594
  %0 = bitcast i32* %pid to i8*, !dbg !7595
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !7595
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !1836, metadata !3844), !dbg !7596
  %1 = bitcast %struct.sched_param* %param to i8*, !dbg !7597
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !7597
  call void @llvm.dbg.declare(metadata %struct.sched_param* %param, metadata !1837, metadata !3844), !dbg !7598
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7599, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.244, i32 0, i32 0), i32* %pid, i32 (%struct._object*, %struct.sched_param*)* @convert_sched_param, %struct.sched_param* %param), !dbg !7601
  %tobool = icmp ne i32 %call, 0, !dbg !7601
  br i1 %tobool, label %if.end, label %if.then, !dbg !7602

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7603
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7603

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %pid, align 4, !dbg !7604, !tbaa !3840
  %call1 = call i32 @sched_setparam(i32 %3, %struct.sched_param* %param) #3, !dbg !7606
  %tobool2 = icmp ne i32 %call1, 0, !dbg !7606
  br i1 %tobool2, label %if.then.3, label %if.end.5, !dbg !7607

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !7608
  store %struct._object* %call4, %struct._object** %retval, !dbg !7609
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7609

if.end.5:                                         ; preds = %if.end
  %4 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !7610, !tbaa !3977
  %inc = add i64 %4, 1, !dbg !7610
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !7610, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !7611
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7611

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %5 = bitcast %struct.sched_param* %param to i8*, !dbg !7612
  call void @llvm.lifetime.end(i64 4, i8* %5) #3, !dbg !7612
  %6 = bitcast i32* %pid to i8*, !dbg !7612
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !7612
  %7 = load %struct._object*, %struct._object** %retval, !dbg !7612
  ret %struct._object* %7, !dbg !7612
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_sched_setscheduler(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %policy = alloca i32, align 4
  %param = alloca %struct.sched_param, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1848, metadata !3844), !dbg !7613
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1849, metadata !3844), !dbg !7614
  %0 = bitcast i32* %pid to i8*, !dbg !7615
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !7615
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !1850, metadata !3844), !dbg !7616
  %1 = bitcast i32* %policy to i8*, !dbg !7617
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !7617
  call void @llvm.dbg.declare(metadata i32* %policy, metadata !1851, metadata !3844), !dbg !7618
  %2 = bitcast %struct.sched_param* %param to i8*, !dbg !7619
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !7619
  call void @llvm.dbg.declare(metadata %struct.sched_param* %param, metadata !1852, metadata !3844), !dbg !7620
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7621, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.247, i32 0, i32 0), i32* %pid, i32* %policy, i32 (%struct._object*, %struct.sched_param*)* @convert_sched_param, %struct.sched_param* %param), !dbg !7623
  %tobool = icmp ne i32 %call, 0, !dbg !7623
  br i1 %tobool, label %if.end, label %if.then, !dbg !7624

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7625
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7625

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %pid, align 4, !dbg !7626, !tbaa !3840
  %5 = load i32, i32* %policy, align 4, !dbg !7628, !tbaa !3840
  %call1 = call i32 @sched_setscheduler(i32 %4, i32 %5, %struct.sched_param* %param) #3, !dbg !7629
  %cmp = icmp eq i32 %call1, -1, !dbg !7630
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !7631

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !7632
  store %struct._object* %call3, %struct._object** %retval, !dbg !7633
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7633

if.end.4:                                         ; preds = %if.end
  %6 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !7634, !tbaa !3977
  %inc = add i64 %6, 1, !dbg !7634
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !7634, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !7635
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7635

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %7 = bitcast %struct.sched_param* %param to i8*, !dbg !7636
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !7636
  %8 = bitcast i32* %policy to i8*, !dbg !7636
  call void @llvm.lifetime.end(i64 4, i8* %8) #3, !dbg !7636
  %9 = bitcast i32* %pid to i8*, !dbg !7636
  call void @llvm.lifetime.end(i64 4, i8* %9) #3, !dbg !7636
  %10 = load %struct._object*, %struct._object** %retval, !dbg !7636
  ret %struct._object* %10, !dbg !7636
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_sched_yield(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1855, metadata !3844), !dbg !7637
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !1856, metadata !3844), !dbg !7638
  %call = call i32 @sched_yield() #3, !dbg !7639
  %tobool = icmp ne i32 %call, 0, !dbg !7639
  br i1 %tobool, label %if.then, label %if.end, !dbg !7641

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @posix_error(), !dbg !7642
  store %struct._object* %call1, %struct._object** %retval, !dbg !7643
  br label %return, !dbg !7643

if.end:                                           ; preds = %entry
  %0 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !7644, !tbaa !3977
  %inc = add i64 %0, 1, !dbg !7644
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !7644, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !7645
  br label %return, !dbg !7645

return:                                           ; preds = %if.end, %if.then
  %1 = load %struct._object*, %struct._object** %retval, !dbg !7646
  ret %struct._object* %1, !dbg !7646
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_sched_setaffinity(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %ncpus = alloca i32, align 4
  %setsize = alloca i64, align 8
  %mask = alloca %struct.cpu_set_t*, align 8
  %iterable = alloca %struct._object*, align 8
  %iterator = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %cpu = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp29 = alloca %struct._object*, align 8
  %newncpus = alloca i32, align 4
  %newmask = alloca %struct.cpu_set_t*, align 8
  %newsetsize = alloca i64, align 8
  %__cpu = alloca i64, align 8
  %tmp = alloca i64, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp103 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp133 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1859, metadata !3844), !dbg !7647
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1860, metadata !3844), !dbg !7648
  %0 = bitcast i32* %pid to i8*, !dbg !7649
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !7649
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !1861, metadata !3844), !dbg !7650
  %1 = bitcast i32* %ncpus to i8*, !dbg !7651
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !7651
  call void @llvm.dbg.declare(metadata i32* %ncpus, metadata !1862, metadata !3844), !dbg !7652
  %2 = bitcast i64* %setsize to i8*, !dbg !7653
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !7653
  call void @llvm.dbg.declare(metadata i64* %setsize, metadata !1863, metadata !3844), !dbg !7654
  %3 = bitcast %struct.cpu_set_t** %mask to i8*, !dbg !7655
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !7655
  call void @llvm.dbg.declare(metadata %struct.cpu_set_t** %mask, metadata !1864, metadata !3844), !dbg !7656
  store %struct.cpu_set_t* null, %struct.cpu_set_t** %mask, align 8, !dbg !7656, !tbaa !3867
  %4 = bitcast %struct._object** %iterable to i8*, !dbg !7657
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !7657
  call void @llvm.dbg.declare(metadata %struct._object** %iterable, metadata !1873, metadata !3844), !dbg !7658
  %5 = bitcast %struct._object** %iterator to i8*, !dbg !7657
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !7657
  call void @llvm.dbg.declare(metadata %struct._object** %iterator, metadata !1874, metadata !3844), !dbg !7659
  store %struct._object* null, %struct._object** %iterator, align 8, !dbg !7659, !tbaa !3867
  %6 = bitcast %struct._object** %item to i8*, !dbg !7657
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !7657
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !1875, metadata !3844), !dbg !7660
  %7 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7661, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %7, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.248, i32 0, i32 0), i32* %pid, %struct._object** %iterable), !dbg !7663
  %tobool = icmp ne i32 %call, 0, !dbg !7663
  br i1 %tobool, label %if.end, label %if.then, !dbg !7664

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7665
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.148, !dbg !7665

if.end:                                           ; preds = %entry
  %8 = load %struct._object*, %struct._object** %iterable, align 8, !dbg !7666, !tbaa !3867
  %call1 = call %struct._object* @PyObject_GetIter(%struct._object* %8), !dbg !7667
  store %struct._object* %call1, %struct._object** %iterator, align 8, !dbg !7668, !tbaa !3867
  %9 = load %struct._object*, %struct._object** %iterator, align 8, !dbg !7669, !tbaa !3867
  %cmp = icmp eq %struct._object* %9, null, !dbg !7671
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !7672

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !7673
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.148, !dbg !7673

if.end.3:                                         ; preds = %if.end
  store i32 64, i32* %ncpus, align 4, !dbg !7674, !tbaa !3840
  %10 = load i32, i32* %ncpus, align 4, !dbg !7675, !tbaa !3840
  %conv = sext i32 %10 to i64, !dbg !7676
  %add = add i64 %conv, 64, !dbg !7677
  %sub = sub i64 %add, 1, !dbg !7678
  %div = udiv i64 %sub, 64, !dbg !7679
  %mul = mul i64 %div, 8, !dbg !7680
  store i64 %mul, i64* %setsize, align 8, !dbg !7681, !tbaa !3904
  %11 = load i32, i32* %ncpus, align 4, !dbg !7682, !tbaa !3840
  %conv4 = sext i32 %11 to i64, !dbg !7682
  %call5 = call %struct.cpu_set_t* @__sched_cpualloc(i64 %conv4) #3, !dbg !7683
  store %struct.cpu_set_t* %call5, %struct.cpu_set_t** %mask, align 8, !dbg !7684, !tbaa !3867
  %12 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !7685, !tbaa !3867
  %cmp6 = icmp eq %struct.cpu_set_t* %12, null, !dbg !7687
  br i1 %cmp6, label %if.then.8, label %if.end.10, !dbg !7688

if.then.8:                                        ; preds = %if.end.3
  %call9 = call %struct._object* @PyErr_NoMemory(), !dbg !7689
  br label %error, !dbg !7691

if.end.10:                                        ; preds = %if.end.3
  br label %do.body, !dbg !7692

do.body:                                          ; preds = %if.end.10
  %13 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !7693, !tbaa !3867
  %14 = bitcast %struct.cpu_set_t* %13 to i8*, !dbg !7695
  %15 = load i64, i64* %setsize, align 8, !dbg !7696, !tbaa !3904
  call void @llvm.memset.p0i8.i64(i8* %14, i8 0, i64 %15, i32 8, i1 false), !dbg !7695
  br label %do.cond, !dbg !7695

do.cond:                                          ; preds = %do.body
  br label %do.end, !dbg !7697

do.end:                                           ; preds = %do.cond
  br label %while.cond, !dbg !7699

while.cond:                                       ; preds = %cleanup.cont.94, %do.end
  %16 = load %struct._object*, %struct._object** %iterator, align 8, !dbg !7700, !tbaa !3867
  %call11 = call %struct._object* @PyIter_Next(%struct._object* %16), !dbg !7702
  store %struct._object* %call11, %struct._object** %item, align 8, !dbg !7703, !tbaa !3867
  %tobool12 = icmp ne %struct._object* %call11, null, !dbg !7699
  br i1 %tobool12, label %while.body, label %while.end.95, !dbg !7699

while.body:                                       ; preds = %while.cond
  %17 = bitcast i64* %cpu to i8*, !dbg !7704
  call void @llvm.lifetime.start(i64 8, i8* %17) #3, !dbg !7704
  call void @llvm.dbg.declare(metadata i64* %cpu, metadata !1876, metadata !3844), !dbg !7705
  %18 = load %struct._object*, %struct._object** %item, align 8, !dbg !7706, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1, !dbg !7707
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7707, !tbaa !3892
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 19, !dbg !7708
  %20 = load i64, i64* %tp_flags, align 8, !dbg !7708, !tbaa !6259
  %and = and i64 %20, 16777216, !dbg !7709
  %cmp13 = icmp ne i64 %and, 0, !dbg !7710
  br i1 %cmp13, label %if.end.26, label %if.then.15, !dbg !7711

if.then.15:                                       ; preds = %while.body
  %21 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !7712, !tbaa !3867
  %22 = load %struct._object*, %struct._object** %item, align 8, !dbg !7713, !tbaa !3867
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1, !dbg !7714
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8, !dbg !7714, !tbaa !3892
  %call17 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %21, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.249, i32 0, i32 0), %struct._typeobject* %23), !dbg !7715
  br label %do.body.18, !dbg !7716

do.body.18:                                       ; preds = %if.then.15
  %24 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7717
  call void @llvm.lifetime.start(i64 8, i8* %24) #3, !dbg !7717
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1878, metadata !3844), !dbg !7719
  %25 = load %struct._object*, %struct._object** %item, align 8, !dbg !7720, !tbaa !3867
  store %struct._object* %25, %struct._object** %_py_decref_tmp, align 8, !dbg !7719, !tbaa !3867
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7721, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0, !dbg !7723
  %27 = load i64, i64* %ob_refcnt, align 8, !dbg !7724, !tbaa !3977
  %dec = add i64 %27, -1, !dbg !7724
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !7724, !tbaa !3977
  %cmp19 = icmp ne i64 %dec, 0, !dbg !7725
  br i1 %cmp19, label %if.then.21, label %if.else, !dbg !7726

if.then.21:                                       ; preds = %do.body.18
  br label %if.end.23, !dbg !7727

if.else:                                          ; preds = %do.body.18
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7729, !tbaa !3867
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1, !dbg !7731
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8, !dbg !7731, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4, !dbg !7732
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7732, !tbaa !3986
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7733, !tbaa !3867
  call void %30(%struct._object* %31), !dbg !7734
  br label %if.end.23

if.end.23:                                        ; preds = %if.else, %if.then.21
  %32 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7735
  call void @llvm.lifetime.end(i64 8, i8* %32) #3, !dbg !7735
  br label %do.cond.24, !dbg !7737

do.cond.24:                                       ; preds = %if.end.23
  br label %do.end.25, !dbg !7738

do.end.25:                                        ; preds = %do.cond.24
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.92, !dbg !7740

if.end.26:                                        ; preds = %while.body
  %33 = load %struct._object*, %struct._object** %item, align 8, !dbg !7741, !tbaa !3867
  %call27 = call i64 @PyLong_AsLong(%struct._object* %33), !dbg !7742
  store i64 %call27, i64* %cpu, align 8, !dbg !7743, !tbaa !3904
  br label %do.body.28, !dbg !7744

do.body.28:                                       ; preds = %if.end.26
  %34 = bitcast %struct._object** %_py_decref_tmp29 to i8*, !dbg !7745
  call void @llvm.lifetime.start(i64 8, i8* %34) #3, !dbg !7745
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp29, metadata !1882, metadata !3844), !dbg !7747
  %35 = load %struct._object*, %struct._object** %item, align 8, !dbg !7748, !tbaa !3867
  store %struct._object* %35, %struct._object** %_py_decref_tmp29, align 8, !dbg !7747, !tbaa !3867
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8, !dbg !7749, !tbaa !3867
  %ob_refcnt30 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0, !dbg !7751
  %37 = load i64, i64* %ob_refcnt30, align 8, !dbg !7752, !tbaa !3977
  %dec31 = add i64 %37, -1, !dbg !7752
  store i64 %dec31, i64* %ob_refcnt30, align 8, !dbg !7752, !tbaa !3977
  %cmp32 = icmp ne i64 %dec31, 0, !dbg !7753
  br i1 %cmp32, label %if.then.34, label %if.else.35, !dbg !7754

if.then.34:                                       ; preds = %do.body.28
  br label %if.end.38, !dbg !7755

if.else.35:                                       ; preds = %do.body.28
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8, !dbg !7757, !tbaa !3867
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1, !dbg !7759
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8, !dbg !7759, !tbaa !3892
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4, !dbg !7760
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8, !dbg !7760, !tbaa !3986
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8, !dbg !7761, !tbaa !3867
  call void %40(%struct._object* %41), !dbg !7762
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  %42 = bitcast %struct._object** %_py_decref_tmp29 to i8*, !dbg !7763
  call void @llvm.lifetime.end(i64 8, i8* %42) #3, !dbg !7763
  br label %do.cond.39, !dbg !7765

do.cond.39:                                       ; preds = %if.end.38
  br label %do.end.40, !dbg !7766

do.end.40:                                        ; preds = %do.cond.39
  %43 = load i64, i64* %cpu, align 8, !dbg !7768, !tbaa !3904
  %cmp41 = icmp slt i64 %43, 0, !dbg !7770
  br i1 %cmp41, label %if.then.43, label %if.end.48, !dbg !7771

if.then.43:                                       ; preds = %do.end.40
  %call44 = call %struct._object* @PyErr_Occurred(), !dbg !7772
  %tobool45 = icmp ne %struct._object* %call44, null, !dbg !7772
  br i1 %tobool45, label %if.end.47, label %if.then.46, !dbg !7775

if.then.46:                                       ; preds = %if.then.43
  %44 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !7776, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %44, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.250, i32 0, i32 0)), !dbg !7777
  br label %if.end.47, !dbg !7777

if.end.47:                                        ; preds = %if.then.46, %if.then.43
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.92, !dbg !7778

if.end.48:                                        ; preds = %do.end.40
  %45 = load i64, i64* %cpu, align 8, !dbg !7779, !tbaa !3904
  %cmp49 = icmp sgt i64 %45, 2147483646, !dbg !7781
  br i1 %cmp49, label %if.then.51, label %if.end.52, !dbg !7782

if.then.51:                                       ; preds = %if.end.48
  %46 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !7783, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %46, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.251, i32 0, i32 0)), !dbg !7785
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.92, !dbg !7786

if.end.52:                                        ; preds = %if.end.48
  %47 = load i64, i64* %cpu, align 8, !dbg !7787, !tbaa !3904
  %48 = load i32, i32* %ncpus, align 4, !dbg !7788, !tbaa !3840
  %conv53 = sext i32 %48 to i64, !dbg !7788
  %cmp54 = icmp sge i64 %47, %conv53, !dbg !7789
  br i1 %cmp54, label %if.then.56, label %if.end.87, !dbg !7790

if.then.56:                                       ; preds = %if.end.52
  %49 = bitcast i32* %newncpus to i8*, !dbg !7791
  call void @llvm.lifetime.start(i64 4, i8* %49) #3, !dbg !7791
  call void @llvm.dbg.declare(metadata i32* %newncpus, metadata !1884, metadata !3844), !dbg !7792
  %50 = load i32, i32* %ncpus, align 4, !dbg !7793, !tbaa !3840
  store i32 %50, i32* %newncpus, align 4, !dbg !7792, !tbaa !3840
  %51 = bitcast %struct.cpu_set_t** %newmask to i8*, !dbg !7794
  call void @llvm.lifetime.start(i64 8, i8* %51) #3, !dbg !7794
  call void @llvm.dbg.declare(metadata %struct.cpu_set_t** %newmask, metadata !1887, metadata !3844), !dbg !7795
  %52 = bitcast i64* %newsetsize to i8*, !dbg !7796
  call void @llvm.lifetime.start(i64 8, i8* %52) #3, !dbg !7796
  call void @llvm.dbg.declare(metadata i64* %newsetsize, metadata !1888, metadata !3844), !dbg !7797
  br label %while.cond.57, !dbg !7798

while.cond.57:                                    ; preds = %if.end.69, %if.then.56
  %53 = load i32, i32* %newncpus, align 4, !dbg !7799, !tbaa !3840
  %conv58 = sext i32 %53 to i64, !dbg !7799
  %54 = load i64, i64* %cpu, align 8, !dbg !7802, !tbaa !3904
  %cmp59 = icmp sle i64 %conv58, %54, !dbg !7803
  br i1 %cmp59, label %while.body.61, label %while.end, !dbg !7798

while.body.61:                                    ; preds = %while.cond.57
  %55 = load i32, i32* %newncpus, align 4, !dbg !7804, !tbaa !3840
  %cmp62 = icmp sgt i32 %55, 1073741823, !dbg !7807
  br i1 %cmp62, label %if.then.64, label %if.else.67, !dbg !7808

if.then.64:                                       ; preds = %while.body.61
  %56 = load i64, i64* %cpu, align 8, !dbg !7809, !tbaa !3904
  %add65 = add i64 %56, 1, !dbg !7810
  %conv66 = trunc i64 %add65 to i32, !dbg !7809
  store i32 %conv66, i32* %newncpus, align 4, !dbg !7811, !tbaa !3840
  br label %if.end.69, !dbg !7812

if.else.67:                                       ; preds = %while.body.61
  %57 = load i32, i32* %newncpus, align 4, !dbg !7813, !tbaa !3840
  %mul68 = mul i32 %57, 2, !dbg !7814
  store i32 %mul68, i32* %newncpus, align 4, !dbg !7815, !tbaa !3840
  br label %if.end.69

if.end.69:                                        ; preds = %if.else.67, %if.then.64
  br label %while.cond.57, !dbg !7798

while.end:                                        ; preds = %while.cond.57
  %58 = load i32, i32* %newncpus, align 4, !dbg !7816, !tbaa !3840
  %conv70 = sext i32 %58 to i64, !dbg !7816
  %call71 = call %struct.cpu_set_t* @__sched_cpualloc(i64 %conv70) #3, !dbg !7817
  store %struct.cpu_set_t* %call71, %struct.cpu_set_t** %newmask, align 8, !dbg !7818, !tbaa !3867
  %59 = load %struct.cpu_set_t*, %struct.cpu_set_t** %newmask, align 8, !dbg !7819, !tbaa !3867
  %cmp72 = icmp eq %struct.cpu_set_t* %59, null, !dbg !7821
  br i1 %cmp72, label %if.then.74, label %if.end.76, !dbg !7822

if.then.74:                                       ; preds = %while.end
  %call75 = call %struct._object* @PyErr_NoMemory(), !dbg !7823
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7825

if.end.76:                                        ; preds = %while.end
  %60 = load i32, i32* %newncpus, align 4, !dbg !7826, !tbaa !3840
  %conv77 = sext i32 %60 to i64, !dbg !7827
  %add78 = add i64 %conv77, 64, !dbg !7828
  %sub79 = sub i64 %add78, 1, !dbg !7829
  %div80 = udiv i64 %sub79, 64, !dbg !7830
  %mul81 = mul i64 %div80, 8, !dbg !7831
  store i64 %mul81, i64* %newsetsize, align 8, !dbg !7832, !tbaa !3904
  br label %do.body.82, !dbg !7833

do.body.82:                                       ; preds = %if.end.76
  %61 = load %struct.cpu_set_t*, %struct.cpu_set_t** %newmask, align 8, !dbg !7834, !tbaa !3867
  %62 = bitcast %struct.cpu_set_t* %61 to i8*, !dbg !7835
  %63 = load i64, i64* %newsetsize, align 8, !dbg !7836, !tbaa !3904
  call void @llvm.memset.p0i8.i64(i8* %62, i8 0, i64 %63, i32 8, i1 false), !dbg !7835
  br label %do.cond.83, !dbg !7835

do.cond.83:                                       ; preds = %do.body.82
  br label %do.end.84, !dbg !7837

do.end.84:                                        ; preds = %do.cond.83
  %64 = load %struct.cpu_set_t*, %struct.cpu_set_t** %newmask, align 8, !dbg !7839, !tbaa !3867
  %65 = bitcast %struct.cpu_set_t* %64 to i8*, !dbg !7840
  %66 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !7841, !tbaa !3867
  %67 = bitcast %struct.cpu_set_t* %66 to i8*, !dbg !7840
  %68 = load i64, i64* %setsize, align 8, !dbg !7842, !tbaa !3904
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %65, i8* %67, i64 %68, i32 8, i1 false), !dbg !7840
  %69 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !7843, !tbaa !3867
  call void @__sched_cpufree(%struct.cpu_set_t* %69) #3, !dbg !7844
  %70 = load i64, i64* %newsetsize, align 8, !dbg !7845, !tbaa !3904
  store i64 %70, i64* %setsize, align 8, !dbg !7846, !tbaa !3904
  %71 = load %struct.cpu_set_t*, %struct.cpu_set_t** %newmask, align 8, !dbg !7847, !tbaa !3867
  store %struct.cpu_set_t* %71, %struct.cpu_set_t** %mask, align 8, !dbg !7848, !tbaa !3867
  %72 = load i32, i32* %newncpus, align 4, !dbg !7849, !tbaa !3840
  store i32 %72, i32* %ncpus, align 4, !dbg !7850, !tbaa !3840
  store i32 0, i32* %cleanup.dest.slot, !dbg !7851
  br label %cleanup, !dbg !7851

cleanup:                                          ; preds = %do.end.84, %if.then.74
  %73 = bitcast i64* %newsetsize to i8*, !dbg !7852
  call void @llvm.lifetime.end(i64 8, i8* %73) #3, !dbg !7852
  %74 = bitcast %struct.cpu_set_t** %newmask to i8*, !dbg !7852
  call void @llvm.lifetime.end(i64 8, i8* %74) #3, !dbg !7852
  %75 = bitcast i32* %newncpus to i8*, !dbg !7852
  call void @llvm.lifetime.end(i64 4, i8* %75) #3, !dbg !7852
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.87, !dbg !7854

if.end.87:                                        ; preds = %cleanup.cont, %if.end.52
  %76 = bitcast i64* %__cpu to i8*, !dbg !7855
  call void @llvm.lifetime.start(i64 8, i8* %76) #3, !dbg !7855
  call void @llvm.dbg.declare(metadata i64* %__cpu, metadata !1889, metadata !3844), !dbg !7856
  %77 = load i64, i64* %cpu, align 8, !dbg !7857, !tbaa !3904
  store i64 %77, i64* %__cpu, align 8, !dbg !7856, !tbaa !3904
  %78 = load i64, i64* %__cpu, align 8, !dbg !7858, !tbaa !3904
  %79 = load i64, i64* %setsize, align 8, !dbg !7859, !tbaa !3904
  %mul88 = mul i64 8, %79, !dbg !7860
  %cmp89 = icmp ult i64 %78, %mul88, !dbg !7861
  br i1 %cmp89, label %cond.true, label %cond.false, !dbg !7858

cond.true:                                        ; preds = %if.end.87
  %80 = load i64, i64* %__cpu, align 8, !dbg !7862, !tbaa !3904
  %rem = urem i64 %80, 64, !dbg !7864
  %shl = shl i64 1, %rem, !dbg !7865
  %81 = load i64, i64* %__cpu, align 8, !dbg !7866, !tbaa !3904
  %div91 = udiv i64 %81, 64, !dbg !7867
  %82 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !7868, !tbaa !3867
  %__bits = getelementptr inbounds %struct.cpu_set_t, %struct.cpu_set_t* %82, i32 0, i32 0, !dbg !7869
  %arraydecay = getelementptr inbounds [16 x i64], [16 x i64]* %__bits, i32 0, i32 0, !dbg !7870
  %arrayidx = getelementptr i64, i64* %arraydecay, i64 %div91, !dbg !7871
  %83 = load i64, i64* %arrayidx, align 8, !dbg !7872, !tbaa !3904
  %or = or i64 %83, %shl, !dbg !7872
  store i64 %or, i64* %arrayidx, align 8, !dbg !7872, !tbaa !3904
  br label %cond.end, !dbg !7858

cond.false:                                       ; preds = %if.end.87
  br label %cond.end, !dbg !7873

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %or, %cond.true ], [ 0, %cond.false ], !dbg !7858
  store i64 %cond, i64* %tmp, !dbg !7875, !tbaa !3904
  %84 = bitcast i64* %__cpu to i8*, !dbg !7878
  call void @llvm.lifetime.end(i64 8, i8* %84) #3, !dbg !7878
  %85 = load i64, i64* %tmp, !dbg !7879, !tbaa !3904
  store i32 0, i32* %cleanup.dest.slot, !dbg !7880
  br label %cleanup.92, !dbg !7880

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.92

cleanup.92:                                       ; preds = %NewDefault, %cond.end, %if.then.51, %if.end.47, %do.end.25
  %86 = bitcast i64* %cpu to i8*, !dbg !7881
  call void @llvm.lifetime.end(i64 8, i8* %86) #3, !dbg !7881
  %cleanup.dest.93 = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock

NodeBlock:                                        ; preds = %cleanup.92
  %Pivot = icmp slt i32 %cleanup.dest.93, 2
  br i1 %Pivot, label %LeafBlock.2, label %LeafBlock.4

LeafBlock.4:                                      ; preds = %NodeBlock
  %SwitchLeaf5 = icmp eq i32 %cleanup.dest.93, 2
  br i1 %SwitchLeaf5, label %error, label %NewDefault.1

LeafBlock.2:                                      ; preds = %NodeBlock
  %SwitchLeaf3 = icmp eq i32 %cleanup.dest.93, 0
  br i1 %SwitchLeaf3, label %cleanup.cont.94, label %NewDefault.1

cleanup.cont.94:                                  ; preds = %LeafBlock.2
  br label %while.cond, !dbg !7699

while.end.95:                                     ; preds = %while.cond
  br label %do.body.96, !dbg !7882

do.body.96:                                       ; preds = %while.end.95
  %87 = bitcast %struct._object** %_py_tmp to i8*, !dbg !7883
  call void @llvm.lifetime.start(i64 8, i8* %87) #3, !dbg !7883
  call void @llvm.dbg.declare(metadata %struct._object** %_py_tmp, metadata !1891, metadata !3844), !dbg !7885
  %88 = load %struct._object*, %struct._object** %iterator, align 8, !dbg !7886, !tbaa !3867
  store %struct._object* %88, %struct._object** %_py_tmp, align 8, !dbg !7885, !tbaa !3867
  %89 = load %struct._object*, %struct._object** %_py_tmp, align 8, !dbg !7887, !tbaa !3867
  %cmp98 = icmp ne %struct._object* %89, null, !dbg !7888
  br i1 %cmp98, label %if.then.100, label %if.end.115, !dbg !7889

if.then.100:                                      ; preds = %do.body.96
  store %struct._object* null, %struct._object** %iterator, align 8, !dbg !7890, !tbaa !3867
  br label %do.body.101, !dbg !7892

do.body.101:                                      ; preds = %if.then.100
  %90 = bitcast %struct._object** %_py_decref_tmp103 to i8*, !dbg !7893
  call void @llvm.lifetime.start(i64 8, i8* %90) #3, !dbg !7893
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp103, metadata !1893, metadata !3844), !dbg !7895
  %91 = load %struct._object*, %struct._object** %_py_tmp, align 8, !dbg !7896, !tbaa !3867
  store %struct._object* %91, %struct._object** %_py_decref_tmp103, align 8, !dbg !7895, !tbaa !3867
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8, !dbg !7897, !tbaa !3867
  %ob_refcnt104 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 0, !dbg !7899
  %93 = load i64, i64* %ob_refcnt104, align 8, !dbg !7900, !tbaa !3977
  %dec105 = add i64 %93, -1, !dbg !7900
  store i64 %dec105, i64* %ob_refcnt104, align 8, !dbg !7900, !tbaa !3977
  %cmp106 = icmp ne i64 %dec105, 0, !dbg !7901
  br i1 %cmp106, label %if.then.108, label %if.else.109, !dbg !7902

if.then.108:                                      ; preds = %do.body.101
  br label %if.end.112, !dbg !7903

if.else.109:                                      ; preds = %do.body.101
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8, !dbg !7905, !tbaa !3867
  %ob_type110 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1, !dbg !7907
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type110, align 8, !dbg !7907, !tbaa !3892
  %tp_dealloc111 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 4, !dbg !7908
  %96 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc111, align 8, !dbg !7908, !tbaa !3986
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8, !dbg !7909, !tbaa !3867
  call void %96(%struct._object* %97), !dbg !7910
  br label %if.end.112

if.end.112:                                       ; preds = %if.else.109, %if.then.108
  %98 = bitcast %struct._object** %_py_decref_tmp103 to i8*, !dbg !7911
  call void @llvm.lifetime.end(i64 8, i8* %98) #3, !dbg !7911
  br label %do.cond.113, !dbg !7913

do.cond.113:                                      ; preds = %if.end.112
  br label %do.end.114, !dbg !7914

do.end.114:                                       ; preds = %do.cond.113
  br label %if.end.115, !dbg !7916

if.end.115:                                       ; preds = %do.end.114, %do.body.96
  %99 = bitcast %struct._object** %_py_tmp to i8*, !dbg !7918
  call void @llvm.lifetime.end(i64 8, i8* %99) #3, !dbg !7918
  br label %do.cond.116, !dbg !7921

do.cond.116:                                      ; preds = %if.end.115
  br label %do.end.117, !dbg !7922

do.end.117:                                       ; preds = %do.cond.116
  %100 = load i32, i32* %pid, align 4, !dbg !7924, !tbaa !3840
  %101 = load i64, i64* %setsize, align 8, !dbg !7926, !tbaa !3904
  %102 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !7927, !tbaa !3867
  %call118 = call i32 @sched_setaffinity(i32 %100, i64 %101, %struct.cpu_set_t* %102) #3, !dbg !7928
  %tobool119 = icmp ne i32 %call118, 0, !dbg !7928
  br i1 %tobool119, label %if.then.120, label %if.end.122, !dbg !7929

if.then.120:                                      ; preds = %do.end.117
  %call121 = call %struct._object* @posix_error(), !dbg !7930
  br label %error, !dbg !7932

if.end.122:                                       ; preds = %do.end.117
  %103 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !7933, !tbaa !3867
  call void @__sched_cpufree(%struct.cpu_set_t* %103) #3, !dbg !7934
  %104 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !7935, !tbaa !3977
  %inc = add i64 %104, 1, !dbg !7935
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !7935, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !7936
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.148, !dbg !7936

error:                                            ; preds = %LeafBlock.4, %if.then.120, %if.then.8
  %105 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !7937, !tbaa !3867
  %tobool123 = icmp ne %struct.cpu_set_t* %105, null, !dbg !7937
  br i1 %tobool123, label %if.then.124, label %if.end.125, !dbg !7939

if.then.124:                                      ; preds = %error
  %106 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !7940, !tbaa !3867
  call void @__sched_cpufree(%struct.cpu_set_t* %106) #3, !dbg !7941
  br label %if.end.125, !dbg !7941

if.end.125:                                       ; preds = %if.then.124, %error
  br label %do.body.126, !dbg !7942

do.body.126:                                      ; preds = %if.end.125
  %107 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !7943
  call void @llvm.lifetime.start(i64 8, i8* %107) #3, !dbg !7943
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1897, metadata !3844), !dbg !7945
  %108 = load %struct._object*, %struct._object** %iterator, align 8, !dbg !7946, !tbaa !3867
  store %struct._object* %108, %struct._object** %_py_xdecref_tmp, align 8, !dbg !7945, !tbaa !3867
  %109 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !7947, !tbaa !3867
  %cmp128 = icmp ne %struct._object* %109, null, !dbg !7948
  br i1 %cmp128, label %if.then.130, label %if.end.145, !dbg !7949

if.then.130:                                      ; preds = %do.body.126
  br label %do.body.131, !dbg !7950

do.body.131:                                      ; preds = %if.then.130
  %110 = bitcast %struct._object** %_py_decref_tmp133 to i8*, !dbg !7952
  call void @llvm.lifetime.start(i64 8, i8* %110) #3, !dbg !7952
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp133, metadata !1899, metadata !3844), !dbg !7954
  %111 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !7955, !tbaa !3867
  store %struct._object* %111, %struct._object** %_py_decref_tmp133, align 8, !dbg !7954, !tbaa !3867
  %112 = load %struct._object*, %struct._object** %_py_decref_tmp133, align 8, !dbg !7956, !tbaa !3867
  %ob_refcnt134 = getelementptr inbounds %struct._object, %struct._object* %112, i32 0, i32 0, !dbg !7958
  %113 = load i64, i64* %ob_refcnt134, align 8, !dbg !7959, !tbaa !3977
  %dec135 = add i64 %113, -1, !dbg !7959
  store i64 %dec135, i64* %ob_refcnt134, align 8, !dbg !7959, !tbaa !3977
  %cmp136 = icmp ne i64 %dec135, 0, !dbg !7960
  br i1 %cmp136, label %if.then.138, label %if.else.139, !dbg !7961

if.then.138:                                      ; preds = %do.body.131
  br label %if.end.142, !dbg !7962

if.else.139:                                      ; preds = %do.body.131
  %114 = load %struct._object*, %struct._object** %_py_decref_tmp133, align 8, !dbg !7964, !tbaa !3867
  %ob_type140 = getelementptr inbounds %struct._object, %struct._object* %114, i32 0, i32 1, !dbg !7966
  %115 = load %struct._typeobject*, %struct._typeobject** %ob_type140, align 8, !dbg !7966, !tbaa !3892
  %tp_dealloc141 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %115, i32 0, i32 4, !dbg !7967
  %116 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc141, align 8, !dbg !7967, !tbaa !3986
  %117 = load %struct._object*, %struct._object** %_py_decref_tmp133, align 8, !dbg !7968, !tbaa !3867
  call void %116(%struct._object* %117), !dbg !7969
  br label %if.end.142

if.end.142:                                       ; preds = %if.else.139, %if.then.138
  %118 = bitcast %struct._object** %_py_decref_tmp133 to i8*, !dbg !7970
  call void @llvm.lifetime.end(i64 8, i8* %118) #3, !dbg !7970
  br label %do.cond.143, !dbg !7972

do.cond.143:                                      ; preds = %if.end.142
  br label %do.end.144, !dbg !7973

do.end.144:                                       ; preds = %do.cond.143
  br label %if.end.145, !dbg !7975

if.end.145:                                       ; preds = %do.end.144, %do.body.126
  %119 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !7977
  call void @llvm.lifetime.end(i64 8, i8* %119) #3, !dbg !7977
  br label %do.cond.146, !dbg !7978

do.cond.146:                                      ; preds = %if.end.145
  br label %do.end.147, !dbg !7979

do.end.147:                                       ; preds = %do.cond.146
  store %struct._object* null, %struct._object** %retval, !dbg !7981
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.148, !dbg !7981

NewDefault.1:                                     ; preds = %LeafBlock.4, %LeafBlock.2
  br label %cleanup.148

cleanup.148:                                      ; preds = %NewDefault.1, %do.end.147, %if.end.122, %if.then.2, %if.then
  %120 = bitcast %struct._object** %item to i8*, !dbg !7982
  call void @llvm.lifetime.end(i64 8, i8* %120) #3, !dbg !7982
  %121 = bitcast %struct._object** %iterator to i8*, !dbg !7982
  call void @llvm.lifetime.end(i64 8, i8* %121) #3, !dbg !7982
  %122 = bitcast %struct._object** %iterable to i8*, !dbg !7982
  call void @llvm.lifetime.end(i64 8, i8* %122) #3, !dbg !7982
  %123 = bitcast %struct.cpu_set_t** %mask to i8*, !dbg !7982
  call void @llvm.lifetime.end(i64 8, i8* %123) #3, !dbg !7982
  %124 = bitcast i64* %setsize to i8*, !dbg !7982
  call void @llvm.lifetime.end(i64 8, i8* %124) #3, !dbg !7982
  %125 = bitcast i32* %ncpus to i8*, !dbg !7982
  call void @llvm.lifetime.end(i64 4, i8* %125) #3, !dbg !7982
  %126 = bitcast i32* %pid to i8*, !dbg !7982
  call void @llvm.lifetime.end(i64 4, i8* %126) #3, !dbg !7982
  %127 = load %struct._object*, %struct._object** %retval, !dbg !7982
  ret %struct._object* %127, !dbg !7982
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_sched_getaffinity(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %cpu = alloca i32, align 4
  %ncpus = alloca i32, align 4
  %count = alloca i32, align 4
  %setsize = alloca i64, align 8
  %mask = alloca %struct.cpu_set_t*, align 8
  %res = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %__cpu = alloca i64, align 8
  %tmp = alloca i32, align 4
  %cpu_num = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp58 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1904, metadata !3844), !dbg !7983
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1905, metadata !3844), !dbg !7984
  %0 = bitcast i32* %pid to i8*, !dbg !7985
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !7985
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !1906, metadata !3844), !dbg !7986
  %1 = bitcast i32* %cpu to i8*, !dbg !7987
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !7987
  call void @llvm.dbg.declare(metadata i32* %cpu, metadata !1907, metadata !3844), !dbg !7988
  %2 = bitcast i32* %ncpus to i8*, !dbg !7987
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !7987
  call void @llvm.dbg.declare(metadata i32* %ncpus, metadata !1908, metadata !3844), !dbg !7989
  %3 = bitcast i32* %count to i8*, !dbg !7987
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !7987
  call void @llvm.dbg.declare(metadata i32* %count, metadata !1909, metadata !3844), !dbg !7990
  %4 = bitcast i64* %setsize to i8*, !dbg !7991
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !7991
  call void @llvm.dbg.declare(metadata i64* %setsize, metadata !1910, metadata !3844), !dbg !7992
  %5 = bitcast %struct.cpu_set_t** %mask to i8*, !dbg !7993
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !7993
  call void @llvm.dbg.declare(metadata %struct.cpu_set_t** %mask, metadata !1911, metadata !3844), !dbg !7994
  store %struct.cpu_set_t* null, %struct.cpu_set_t** %mask, align 8, !dbg !7994, !tbaa !3867
  %6 = bitcast %struct._object** %res to i8*, !dbg !7995
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !7995
  call void @llvm.dbg.declare(metadata %struct._object** %res, metadata !1912, metadata !3844), !dbg !7996
  store %struct._object* null, %struct._object** %res, align 8, !dbg !7996, !tbaa !3867
  %7 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7997, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %7, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.252, i32 0, i32 0), i32* %pid), !dbg !7999
  %tobool = icmp ne i32 %call, 0, !dbg !7999
  br i1 %tobool, label %if.end, label %if.then, !dbg !8000

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8001
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.96, !dbg !8001

if.end:                                           ; preds = %entry
  store i32 64, i32* %ncpus, align 4, !dbg !8002, !tbaa !3840
  br label %while.cond, !dbg !8003

while.cond:                                       ; preds = %if.end.21, %if.end
  br label %while.body, !dbg !8004

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %ncpus, align 4, !dbg !8007, !tbaa !3840
  %conv = sext i32 %8 to i64, !dbg !8009
  %add = add i64 %conv, 64, !dbg !8010
  %sub = sub i64 %add, 1, !dbg !8011
  %div = udiv i64 %sub, 64, !dbg !8012
  %mul = mul i64 %div, 8, !dbg !8013
  store i64 %mul, i64* %setsize, align 8, !dbg !8014, !tbaa !3904
  %9 = load i32, i32* %ncpus, align 4, !dbg !8015, !tbaa !3840
  %conv1 = sext i32 %9 to i64, !dbg !8015
  %call2 = call %struct.cpu_set_t* @__sched_cpualloc(i64 %conv1) #3, !dbg !8016
  store %struct.cpu_set_t* %call2, %struct.cpu_set_t** %mask, align 8, !dbg !8017, !tbaa !3867
  %10 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !8018, !tbaa !3867
  %cmp = icmp eq %struct.cpu_set_t* %10, null, !dbg !8020
  br i1 %cmp, label %if.then.4, label %if.end.6, !dbg !8021

if.then.4:                                        ; preds = %while.body
  %call5 = call %struct._object* @PyErr_NoMemory(), !dbg !8022
  store %struct._object* %call5, %struct._object** %retval, !dbg !8023
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.96, !dbg !8023

if.end.6:                                         ; preds = %while.body
  %11 = load i32, i32* %pid, align 4, !dbg !8024, !tbaa !3840
  %12 = load i64, i64* %setsize, align 8, !dbg !8026, !tbaa !3904
  %13 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !8027, !tbaa !3867
  %call7 = call i32 @sched_getaffinity(i32 %11, i64 %12, %struct.cpu_set_t* %13) #3, !dbg !8028
  %cmp8 = icmp eq i32 %call7, 0, !dbg !8029
  br i1 %cmp8, label %if.then.10, label %if.end.11, !dbg !8030

if.then.10:                                       ; preds = %if.end.6
  br label %while.end, !dbg !8031

if.end.11:                                        ; preds = %if.end.6
  %14 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !8032, !tbaa !3867
  call void @__sched_cpufree(%struct.cpu_set_t* %14) #3, !dbg !8033
  %call12 = call i32* @__errno_location() #1, !dbg !8034
  %15 = load i32, i32* %call12, align 4, !dbg !8036, !tbaa !3840
  %cmp13 = icmp ne i32 %15, 22, !dbg !8037
  br i1 %cmp13, label %if.then.15, label %if.end.17, !dbg !8038

if.then.15:                                       ; preds = %if.end.11
  %call16 = call %struct._object* @posix_error(), !dbg !8039
  store %struct._object* %call16, %struct._object** %retval, !dbg !8040
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.96, !dbg !8040

if.end.17:                                        ; preds = %if.end.11
  %16 = load i32, i32* %ncpus, align 4, !dbg !8041, !tbaa !3840
  %cmp18 = icmp sgt i32 %16, 1073741823, !dbg !8043
  br i1 %cmp18, label %if.then.20, label %if.end.21, !dbg !8044

if.then.20:                                       ; preds = %if.end.17
  %17 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !8045, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %17, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.253, i32 0, i32 0)), !dbg !8047
  store %struct._object* null, %struct._object** %retval, !dbg !8048
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.96, !dbg !8048

if.end.21:                                        ; preds = %if.end.17
  %18 = load i32, i32* %ncpus, align 4, !dbg !8049, !tbaa !3840
  %mul22 = mul i32 %18, 2, !dbg !8050
  store i32 %mul22, i32* %ncpus, align 4, !dbg !8051, !tbaa !3840
  br label %while.cond, !dbg !8003

while.end:                                        ; preds = %if.then.10
  %call23 = call %struct._object* @PySet_New(%struct._object* null), !dbg !8052
  store %struct._object* %call23, %struct._object** %res, align 8, !dbg !8053, !tbaa !3867
  %19 = load %struct._object*, %struct._object** %res, align 8, !dbg !8054, !tbaa !3867
  %cmp24 = icmp eq %struct._object* %19, null, !dbg !8056
  br i1 %cmp24, label %if.then.26, label %if.end.27, !dbg !8057

if.then.26:                                       ; preds = %while.end
  br label %error, !dbg !8058

if.end.27:                                        ; preds = %while.end
  store i32 0, i32* %cpu, align 4, !dbg !8059, !tbaa !3840
  %20 = load i64, i64* %setsize, align 8, !dbg !8060, !tbaa !3904
  %21 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !8061, !tbaa !3867
  %call28 = call i32 @__sched_cpucount(i64 %20, %struct.cpu_set_t* %21) #3, !dbg !8062
  store i32 %call28, i32* %count, align 4, !dbg !8063, !tbaa !3840
  br label %for.cond, !dbg !8064

for.cond:                                         ; preds = %for.inc, %if.end.27
  %22 = load i32, i32* %count, align 4, !dbg !8065, !tbaa !3840
  %tobool29 = icmp ne i32 %22, 0, !dbg !8068
  br i1 %tobool29, label %for.body, label %for.end, !dbg !8068

for.body:                                         ; preds = %for.cond
  %23 = bitcast i64* %__cpu to i8*, !dbg !8069
  call void @llvm.lifetime.start(i64 8, i8* %23) #3, !dbg !8069
  call void @llvm.dbg.declare(metadata i64* %__cpu, metadata !1913, metadata !3844), !dbg !8070
  %24 = load i32, i32* %cpu, align 4, !dbg !8071, !tbaa !3840
  %conv30 = sext i32 %24 to i64, !dbg !8072
  store i64 %conv30, i64* %__cpu, align 8, !dbg !8070, !tbaa !3904
  %25 = load i64, i64* %__cpu, align 8, !dbg !8073, !tbaa !3904
  %26 = load i64, i64* %setsize, align 8, !dbg !8074, !tbaa !3904
  %mul31 = mul i64 8, %26, !dbg !8075
  %cmp32 = icmp ult i64 %25, %mul31, !dbg !8076
  br i1 %cmp32, label %cond.true, label %cond.false, !dbg !8073

cond.true:                                        ; preds = %for.body
  %27 = load i64, i64* %__cpu, align 8, !dbg !8077, !tbaa !3904
  %div34 = udiv i64 %27, 64, !dbg !8079
  %28 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !8080, !tbaa !3867
  %__bits = getelementptr inbounds %struct.cpu_set_t, %struct.cpu_set_t* %28, i32 0, i32 0, !dbg !8081
  %arraydecay = getelementptr inbounds [16 x i64], [16 x i64]* %__bits, i32 0, i32 0, !dbg !8082
  %arrayidx = getelementptr i64, i64* %arraydecay, i64 %div34, !dbg !8083
  %29 = load i64, i64* %arrayidx, align 8, !dbg !8083, !tbaa !3904
  %30 = load i64, i64* %__cpu, align 8, !dbg !8084, !tbaa !3904
  %rem = urem i64 %30, 64, !dbg !8085
  %shl = shl i64 1, %rem, !dbg !8086
  %and = and i64 %29, %shl, !dbg !8087
  %cmp35 = icmp ne i64 %and, 0, !dbg !8088
  %conv36 = zext i1 %cmp35 to i32, !dbg !8088
  br label %cond.end, !dbg !8073

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !8089

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv36, %cond.true ], [ 0, %cond.false ], !dbg !8073
  store i32 %cond, i32* %tmp, !dbg !8091, !tbaa !3840
  %31 = bitcast i64* %__cpu to i8*, !dbg !8094
  call void @llvm.lifetime.end(i64 8, i8* %31) #3, !dbg !8094
  %32 = load i32, i32* %tmp, !dbg !8095, !tbaa !3840
  %tobool37 = icmp ne i32 %32, 0, !dbg !8096
  br i1 %tobool37, label %if.then.38, label %if.end.70, !dbg !8097

if.then.38:                                       ; preds = %cond.end
  %33 = bitcast %struct._object** %cpu_num to i8*, !dbg !8098
  call void @llvm.lifetime.start(i64 8, i8* %33) #3, !dbg !8098
  call void @llvm.dbg.declare(metadata %struct._object** %cpu_num, metadata !1919, metadata !3844), !dbg !8099
  %34 = load i32, i32* %cpu, align 4, !dbg !8100, !tbaa !3840
  %conv40 = sext i32 %34 to i64, !dbg !8100
  %call41 = call %struct._object* @PyLong_FromLong(i64 %conv40), !dbg !8101
  store %struct._object* %call41, %struct._object** %cpu_num, align 8, !dbg !8099, !tbaa !3867
  %35 = load i32, i32* %count, align 4, !dbg !8102, !tbaa !3840
  %dec = add i32 %35, -1, !dbg !8102
  store i32 %dec, i32* %count, align 4, !dbg !8102, !tbaa !3840
  %36 = load %struct._object*, %struct._object** %cpu_num, align 8, !dbg !8103, !tbaa !3867
  %cmp42 = icmp eq %struct._object* %36, null, !dbg !8105
  br i1 %cmp42, label %if.then.44, label %if.end.45, !dbg !8106

if.then.44:                                       ; preds = %if.then.38
  store i32 4, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8107

if.end.45:                                        ; preds = %if.then.38
  %37 = load %struct._object*, %struct._object** %res, align 8, !dbg !8108, !tbaa !3867
  %38 = load %struct._object*, %struct._object** %cpu_num, align 8, !dbg !8109, !tbaa !3867
  %call46 = call i32 @PySet_Add(%struct._object* %37, %struct._object* %38), !dbg !8110
  %tobool47 = icmp ne i32 %call46, 0, !dbg !8110
  br i1 %tobool47, label %if.then.48, label %if.end.55, !dbg !8111

if.then.48:                                       ; preds = %if.end.45
  br label %do.body, !dbg !8112

do.body:                                          ; preds = %if.then.48
  %39 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8113
  call void @llvm.lifetime.start(i64 8, i8* %39) #3, !dbg !8113
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1921, metadata !3844), !dbg !8115
  %40 = load %struct._object*, %struct._object** %cpu_num, align 8, !dbg !8116, !tbaa !3867
  store %struct._object* %40, %struct._object** %_py_decref_tmp, align 8, !dbg !8115, !tbaa !3867
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8117, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0, !dbg !8119
  %42 = load i64, i64* %ob_refcnt, align 8, !dbg !8120, !tbaa !3977
  %dec50 = add i64 %42, -1, !dbg !8120
  store i64 %dec50, i64* %ob_refcnt, align 8, !dbg !8120, !tbaa !3977
  %cmp51 = icmp ne i64 %dec50, 0, !dbg !8121
  br i1 %cmp51, label %if.then.53, label %if.else, !dbg !8122

if.then.53:                                       ; preds = %do.body
  br label %if.end.54, !dbg !8123

if.else:                                          ; preds = %do.body
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8125, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1, !dbg !8127
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8127, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4, !dbg !8128
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !8128, !tbaa !3986
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8129, !tbaa !3867
  call void %45(%struct._object* %46), !dbg !8130
  br label %if.end.54

if.end.54:                                        ; preds = %if.else, %if.then.53
  %47 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8131
  call void @llvm.lifetime.end(i64 8, i8* %47) #3, !dbg !8131
  br label %do.cond, !dbg !8133

do.cond:                                          ; preds = %if.end.54
  br label %do.end, !dbg !8134

do.end:                                           ; preds = %do.cond
  store i32 4, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8136

if.end.55:                                        ; preds = %if.end.45
  br label %do.body.56, !dbg !8137

do.body.56:                                       ; preds = %if.end.55
  %48 = bitcast %struct._object** %_py_decref_tmp58 to i8*, !dbg !8138
  call void @llvm.lifetime.start(i64 8, i8* %48) #3, !dbg !8138
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp58, metadata !1925, metadata !3844), !dbg !8140
  %49 = load %struct._object*, %struct._object** %cpu_num, align 8, !dbg !8141, !tbaa !3867
  store %struct._object* %49, %struct._object** %_py_decref_tmp58, align 8, !dbg !8140, !tbaa !3867
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8, !dbg !8142, !tbaa !3867
  %ob_refcnt59 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0, !dbg !8144
  %51 = load i64, i64* %ob_refcnt59, align 8, !dbg !8145, !tbaa !3977
  %dec60 = add i64 %51, -1, !dbg !8145
  store i64 %dec60, i64* %ob_refcnt59, align 8, !dbg !8145, !tbaa !3977
  %cmp61 = icmp ne i64 %dec60, 0, !dbg !8146
  br i1 %cmp61, label %if.then.63, label %if.else.64, !dbg !8147

if.then.63:                                       ; preds = %do.body.56
  br label %if.end.67, !dbg !8148

if.else.64:                                       ; preds = %do.body.56
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8, !dbg !8150, !tbaa !3867
  %ob_type65 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1, !dbg !8152
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type65, align 8, !dbg !8152, !tbaa !3892
  %tp_dealloc66 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4, !dbg !8153
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc66, align 8, !dbg !8153, !tbaa !3986
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8, !dbg !8154, !tbaa !3867
  call void %54(%struct._object* %55), !dbg !8155
  br label %if.end.67

if.end.67:                                        ; preds = %if.else.64, %if.then.63
  %56 = bitcast %struct._object** %_py_decref_tmp58 to i8*, !dbg !8156
  call void @llvm.lifetime.end(i64 8, i8* %56) #3, !dbg !8156
  br label %do.cond.68, !dbg !8158

do.cond.68:                                       ; preds = %if.end.67
  br label %do.end.69, !dbg !8159

do.end.69:                                        ; preds = %do.cond.68
  store i32 0, i32* %cleanup.dest.slot, !dbg !8161
  br label %cleanup, !dbg !8161

cleanup:                                          ; preds = %do.end.69, %do.end, %if.then.44
  %57 = bitcast %struct._object** %cpu_num to i8*, !dbg !8162
  call void @llvm.lifetime.end(i64 8, i8* %57) #3, !dbg !8162
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock

NodeBlock:                                        ; preds = %cleanup
  %Pivot = icmp slt i32 %cleanup.dest, 4
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %cleanup.dest, 4
  br i1 %SwitchLeaf2, label %error, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.70, !dbg !8164

if.end.70:                                        ; preds = %cleanup.cont, %cond.end
  br label %for.inc, !dbg !8165

for.inc:                                          ; preds = %if.end.70
  %58 = load i32, i32* %cpu, align 4, !dbg !8166, !tbaa !3840
  %inc = add i32 %58, 1, !dbg !8166
  store i32 %inc, i32* %cpu, align 4, !dbg !8166, !tbaa !3840
  br label %for.cond, !dbg !8167

for.end:                                          ; preds = %for.cond
  %59 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !8168, !tbaa !3867
  call void @__sched_cpufree(%struct.cpu_set_t* %59) #3, !dbg !8169
  %60 = load %struct._object*, %struct._object** %res, align 8, !dbg !8170, !tbaa !3867
  store %struct._object* %60, %struct._object** %retval, !dbg !8171
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.96, !dbg !8171

error:                                            ; preds = %LeafBlock.1, %if.then.26
  %61 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !8172, !tbaa !3867
  %tobool71 = icmp ne %struct.cpu_set_t* %61, null, !dbg !8172
  br i1 %tobool71, label %if.then.72, label %if.end.73, !dbg !8174

if.then.72:                                       ; preds = %error
  %62 = load %struct.cpu_set_t*, %struct.cpu_set_t** %mask, align 8, !dbg !8175, !tbaa !3867
  call void @__sched_cpufree(%struct.cpu_set_t* %62) #3, !dbg !8176
  br label %if.end.73, !dbg !8176

if.end.73:                                        ; preds = %if.then.72, %error
  br label %do.body.74, !dbg !8177

do.body.74:                                       ; preds = %if.end.73
  %63 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !8178
  call void @llvm.lifetime.start(i64 8, i8* %63) #3, !dbg !8178
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1927, metadata !3844), !dbg !8180
  %64 = load %struct._object*, %struct._object** %res, align 8, !dbg !8181, !tbaa !3867
  store %struct._object* %64, %struct._object** %_py_xdecref_tmp, align 8, !dbg !8180, !tbaa !3867
  %65 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !8182, !tbaa !3867
  %cmp76 = icmp ne %struct._object* %65, null, !dbg !8183
  br i1 %cmp76, label %if.then.78, label %if.end.93, !dbg !8184

if.then.78:                                       ; preds = %do.body.74
  br label %do.body.79, !dbg !8185

do.body.79:                                       ; preds = %if.then.78
  %66 = bitcast %struct._object** %_py_decref_tmp81 to i8*, !dbg !8187
  call void @llvm.lifetime.start(i64 8, i8* %66) #3, !dbg !8187
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp81, metadata !1929, metadata !3844), !dbg !8189
  %67 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !8190, !tbaa !3867
  store %struct._object* %67, %struct._object** %_py_decref_tmp81, align 8, !dbg !8189, !tbaa !3867
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8, !dbg !8191, !tbaa !3867
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 0, !dbg !8193
  %69 = load i64, i64* %ob_refcnt82, align 8, !dbg !8194, !tbaa !3977
  %dec83 = add i64 %69, -1, !dbg !8194
  store i64 %dec83, i64* %ob_refcnt82, align 8, !dbg !8194, !tbaa !3977
  %cmp84 = icmp ne i64 %dec83, 0, !dbg !8195
  br i1 %cmp84, label %if.then.86, label %if.else.87, !dbg !8196

if.then.86:                                       ; preds = %do.body.79
  br label %if.end.90, !dbg !8197

if.else.87:                                       ; preds = %do.body.79
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8, !dbg !8199, !tbaa !3867
  %ob_type88 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1, !dbg !8201
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type88, align 8, !dbg !8201, !tbaa !3892
  %tp_dealloc89 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 4, !dbg !8202
  %72 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc89, align 8, !dbg !8202, !tbaa !3986
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8, !dbg !8203, !tbaa !3867
  call void %72(%struct._object* %73), !dbg !8204
  br label %if.end.90

if.end.90:                                        ; preds = %if.else.87, %if.then.86
  %74 = bitcast %struct._object** %_py_decref_tmp81 to i8*, !dbg !8205
  call void @llvm.lifetime.end(i64 8, i8* %74) #3, !dbg !8205
  br label %do.cond.91, !dbg !8207

do.cond.91:                                       ; preds = %if.end.90
  br label %do.end.92, !dbg !8208

do.end.92:                                        ; preds = %do.cond.91
  br label %if.end.93, !dbg !8210

if.end.93:                                        ; preds = %do.end.92, %do.body.74
  %75 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !8212
  call void @llvm.lifetime.end(i64 8, i8* %75) #3, !dbg !8212
  br label %do.cond.94, !dbg !8215

do.cond.94:                                       ; preds = %if.end.93
  br label %do.end.95, !dbg !8216

do.end.95:                                        ; preds = %do.cond.94
  store %struct._object* null, %struct._object** %retval, !dbg !8218
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.96, !dbg !8218

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %cleanup.96

cleanup.96:                                       ; preds = %NewDefault, %do.end.95, %for.end, %if.then.20, %if.then.15, %if.then.4, %if.then
  %76 = bitcast %struct._object** %res to i8*, !dbg !8219
  call void @llvm.lifetime.end(i64 8, i8* %76) #3, !dbg !8219
  %77 = bitcast %struct.cpu_set_t** %mask to i8*, !dbg !8219
  call void @llvm.lifetime.end(i64 8, i8* %77) #3, !dbg !8219
  %78 = bitcast i64* %setsize to i8*, !dbg !8219
  call void @llvm.lifetime.end(i64 8, i8* %78) #3, !dbg !8219
  %79 = bitcast i32* %count to i8*, !dbg !8219
  call void @llvm.lifetime.end(i64 4, i8* %79) #3, !dbg !8219
  %80 = bitcast i32* %ncpus to i8*, !dbg !8219
  call void @llvm.lifetime.end(i64 4, i8* %80) #3, !dbg !8219
  %81 = bitcast i32* %cpu to i8*, !dbg !8219
  call void @llvm.lifetime.end(i64 4, i8* %81) #3, !dbg !8219
  %82 = bitcast i32* %pid to i8*, !dbg !8219
  call void @llvm.lifetime.end(i64 4, i8* %82) #3, !dbg !8219
  %83 = load %struct._object*, %struct._object** %retval, !dbg !8219
  ret %struct._object* %83, !dbg !8219
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_openpty(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  %master_fd = alloca i32, align 4
  %slave_fd = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1934, metadata !3844), !dbg !8220
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !1935, metadata !3844), !dbg !8221
  %0 = bitcast i32* %master_fd to i8*, !dbg !8222
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !8222
  call void @llvm.dbg.declare(metadata i32* %master_fd, metadata !1936, metadata !3844), !dbg !8223
  store i32 -1, i32* %master_fd, align 4, !dbg !8223, !tbaa !3840
  %1 = bitcast i32* %slave_fd to i8*, !dbg !8222
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !8222
  call void @llvm.dbg.declare(metadata i32* %slave_fd, metadata !1937, metadata !3844), !dbg !8224
  store i32 -1, i32* %slave_fd, align 4, !dbg !8224, !tbaa !3840
  %call = call i32 @openpty(i32* %master_fd, i32* %slave_fd, i8* null, %struct.termios* null, %struct.winsize* null) #3, !dbg !8225
  %cmp = icmp ne i32 %call, 0, !dbg !8227
  br i1 %cmp, label %if.then, label %if.end, !dbg !8228

if.then:                                          ; preds = %entry
  br label %posix_error, !dbg !8229

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %master_fd, align 4, !dbg !8230, !tbaa !3840
  %call1 = call i32 @_Py_set_inheritable(i32 %2, i32 0, i32* null), !dbg !8232
  %cmp2 = icmp slt i32 %call1, 0, !dbg !8233
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !8234

if.then.3:                                        ; preds = %if.end
  br label %error, !dbg !8235

if.end.4:                                         ; preds = %if.end
  %3 = load i32, i32* %slave_fd, align 4, !dbg !8236, !tbaa !3840
  %call5 = call i32 @_Py_set_inheritable(i32 %3, i32 0, i32* null), !dbg !8238
  %cmp6 = icmp slt i32 %call5, 0, !dbg !8239
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !8240

if.then.7:                                        ; preds = %if.end.4
  br label %error, !dbg !8241

if.end.8:                                         ; preds = %if.end.4
  %4 = load i32, i32* %master_fd, align 4, !dbg !8242, !tbaa !3840
  %5 = load i32, i32* %slave_fd, align 4, !dbg !8243, !tbaa !3840
  %call9 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.254, i32 0, i32 0), i32 %4, i32 %5), !dbg !8244
  store %struct._object* %call9, %struct._object** %retval, !dbg !8245
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8245

posix_error:                                      ; preds = %if.then
  %call10 = call %struct._object* @posix_error(), !dbg !8246
  br label %error, !dbg !8246

error:                                            ; preds = %posix_error, %if.then.7, %if.then.3
  %6 = load i32, i32* %master_fd, align 4, !dbg !8247, !tbaa !3840
  %cmp11 = icmp ne i32 %6, -1, !dbg !8249
  br i1 %cmp11, label %if.then.12, label %if.end.14, !dbg !8250

if.then.12:                                       ; preds = %error
  %7 = load i32, i32* %master_fd, align 4, !dbg !8251, !tbaa !3840
  %call13 = call i32 @close(i32 %7), !dbg !8252
  br label %if.end.14, !dbg !8252

if.end.14:                                        ; preds = %if.then.12, %error
  %8 = load i32, i32* %slave_fd, align 4, !dbg !8253, !tbaa !3840
  %cmp15 = icmp ne i32 %8, -1, !dbg !8255
  br i1 %cmp15, label %if.then.16, label %if.end.18, !dbg !8256

if.then.16:                                       ; preds = %if.end.14
  %9 = load i32, i32* %slave_fd, align 4, !dbg !8257, !tbaa !3840
  %call17 = call i32 @close(i32 %9), !dbg !8258
  br label %if.end.18, !dbg !8258

if.end.18:                                        ; preds = %if.then.16, %if.end.14
  store %struct._object* null, %struct._object** %retval, !dbg !8259
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8259

cleanup:                                          ; preds = %if.end.18, %if.end.8
  %10 = bitcast i32* %slave_fd to i8*, !dbg !8260
  call void @llvm.lifetime.end(i64 4, i8* %10) #3, !dbg !8260
  %11 = bitcast i32* %master_fd to i8*, !dbg !8260
  call void @llvm.lifetime.end(i64 4, i8* %11) #3, !dbg !8260
  %12 = load %struct._object*, %struct._object** %retval, !dbg !8260
  ret %struct._object* %12, !dbg !8260
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_forkpty(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  %master_fd = alloca i32, align 4
  %result = alloca i32, align 4
  %pid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1940, metadata !3844), !dbg !8261
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !1941, metadata !3844), !dbg !8262
  %0 = bitcast i32* %master_fd to i8*, !dbg !8263
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !8263
  call void @llvm.dbg.declare(metadata i32* %master_fd, metadata !1942, metadata !3844), !dbg !8264
  store i32 -1, i32* %master_fd, align 4, !dbg !8264, !tbaa !3840
  %1 = bitcast i32* %result to i8*, !dbg !8263
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !8263
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1943, metadata !3844), !dbg !8265
  store i32 0, i32* %result, align 4, !dbg !8265, !tbaa !3840
  %2 = bitcast i32* %pid to i8*, !dbg !8266
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !8266
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !1944, metadata !3844), !dbg !8267
  call void @_PyImport_AcquireLock(), !dbg !8268
  %call = call i32 @forkpty(i32* %master_fd, i8* null, %struct.termios* null, %struct.winsize* null) #3, !dbg !8269
  store i32 %call, i32* %pid, align 4, !dbg !8270, !tbaa !3840
  %3 = load i32, i32* %pid, align 4, !dbg !8271, !tbaa !3840
  %cmp = icmp eq i32 %3, 0, !dbg !8273
  br i1 %cmp, label %if.then, label %if.else, !dbg !8274

if.then:                                          ; preds = %entry
  call void @PyOS_AfterFork(), !dbg !8275
  br label %if.end, !dbg !8277

if.else:                                          ; preds = %entry
  %call1 = call i32 @_PyImport_ReleaseLock(), !dbg !8278
  store i32 %call1, i32* %result, align 4, !dbg !8280, !tbaa !3840
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load i32, i32* %pid, align 4, !dbg !8281, !tbaa !3840
  %cmp2 = icmp eq i32 %4, -1, !dbg !8283
  br i1 %cmp2, label %if.then.3, label %if.end.5, !dbg !8284

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !8285
  store %struct._object* %call4, %struct._object** %retval, !dbg !8286
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8286

if.end.5:                                         ; preds = %if.end
  %5 = load i32, i32* %result, align 4, !dbg !8287, !tbaa !3840
  %cmp6 = icmp slt i32 %5, 0, !dbg !8289
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !8290

if.then.7:                                        ; preds = %if.end.5
  %6 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8, !dbg !8291, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.238, i32 0, i32 0)), !dbg !8293
  store %struct._object* null, %struct._object** %retval, !dbg !8294
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8294

if.end.8:                                         ; preds = %if.end.5
  %7 = load i32, i32* %pid, align 4, !dbg !8295, !tbaa !3840
  %conv = sext i32 %7 to i64, !dbg !8295
  %call9 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !8296
  %8 = load i32, i32* %master_fd, align 4, !dbg !8297, !tbaa !3840
  %call10 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.255, i32 0, i32 0), %struct._object* %call9, i32 %8), !dbg !8298
  store %struct._object* %call10, %struct._object** %retval, !dbg !8299
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8299

cleanup:                                          ; preds = %if.end.8, %if.then.7, %if.then.3
  %9 = bitcast i32* %pid to i8*, !dbg !8300
  call void @llvm.lifetime.end(i64 4, i8* %9) #3, !dbg !8300
  %10 = bitcast i32* %result to i8*, !dbg !8300
  call void @llvm.lifetime.end(i64 4, i8* %10) #3, !dbg !8300
  %11 = bitcast i32* %master_fd to i8*, !dbg !8300
  call void @llvm.lifetime.end(i64 4, i8* %11) #3, !dbg !8300
  %12 = load %struct._object*, %struct._object** %retval, !dbg !8300
  ret %struct._object* %12, !dbg !8300
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getegid(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1947, metadata !3844), !dbg !8301
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !1948, metadata !3844), !dbg !8302
  %call = call i32 @getegid() #3, !dbg !8303
  %call1 = call %struct._object* @_PyLong_FromGid(i32 %call), !dbg !8304
  ret %struct._object* %call1, !dbg !8305
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_geteuid(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1951, metadata !3844), !dbg !8306
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !1952, metadata !3844), !dbg !8307
  %call = call i32 @geteuid() #3, !dbg !8308
  %call1 = call %struct._object* @_PyLong_FromUid(i32 %call), !dbg !8309
  ret %struct._object* %call1, !dbg !8310
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getgid(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1955, metadata !3844), !dbg !8311
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !1956, metadata !3844), !dbg !8312
  %call = call i32 @getgid() #3, !dbg !8313
  %call1 = call %struct._object* @_PyLong_FromGid(i32 %call), !dbg !8314
  ret %struct._object* %call1, !dbg !8315
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getgrouplist(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %user = alloca i8*, align 8
  %i = alloca i32, align 4
  %ngroups = alloca i32, align 4
  %list = alloca %struct._object*, align 8
  %groups = alloca i32*, align 8
  %basegid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %o = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1959, metadata !3844), !dbg !8316
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1960, metadata !3844), !dbg !8317
  %0 = bitcast i8** %user to i8*, !dbg !8318
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8318
  call void @llvm.dbg.declare(metadata i8** %user, metadata !1961, metadata !3844), !dbg !8319
  %1 = bitcast i32* %i to i8*, !dbg !8320
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !8320
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1962, metadata !3844), !dbg !8321
  %2 = bitcast i32* %ngroups to i8*, !dbg !8320
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !8320
  call void @llvm.dbg.declare(metadata i32* %ngroups, metadata !1963, metadata !3844), !dbg !8322
  %3 = bitcast %struct._object** %list to i8*, !dbg !8323
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !8323
  call void @llvm.dbg.declare(metadata %struct._object** %list, metadata !1964, metadata !3844), !dbg !8324
  %4 = bitcast i32** %groups to i8*, !dbg !8325
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !8325
  call void @llvm.dbg.declare(metadata i32** %groups, metadata !1965, metadata !3844), !dbg !8326
  %5 = bitcast i32* %basegid to i8*, !dbg !8325
  call void @llvm.lifetime.start(i64 4, i8* %5) #3, !dbg !8325
  call void @llvm.dbg.declare(metadata i32* %basegid, metadata !1966, metadata !3844), !dbg !8327
  store i32 65536, i32* %ngroups, align 4, !dbg !8328, !tbaa !3840
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8329, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %6, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.256, i32 0, i32 0), i8** %user, i32 (%struct._object*, i8*)* @_Py_Gid_Converter, i32* %basegid), !dbg !8331
  %tobool = icmp ne i32 %call, 0, !dbg !8331
  br i1 %tobool, label %if.end, label %if.then, !dbg !8332

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8333
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.31, !dbg !8333

if.end:                                           ; preds = %entry
  %7 = load i32, i32* %ngroups, align 4, !dbg !8334, !tbaa !3840
  %conv = sext i32 %7 to i64, !dbg !8334
  %mul = mul i64 %conv, 4, !dbg !8335
  %call1 = call i8* @PyMem_Malloc(i64 %mul), !dbg !8336
  %8 = bitcast i8* %call1 to i32*, !dbg !8336
  store i32* %8, i32** %groups, align 8, !dbg !8337, !tbaa !3867
  %9 = load i32*, i32** %groups, align 8, !dbg !8338, !tbaa !3867
  %cmp = icmp eq i32* %9, null, !dbg !8340
  br i1 %cmp, label %if.then.3, label %if.end.5, !dbg !8341

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @PyErr_NoMemory(), !dbg !8342
  store %struct._object* %call4, %struct._object** %retval, !dbg !8343
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.31, !dbg !8343

if.end.5:                                         ; preds = %if.end
  %10 = load i8*, i8** %user, align 8, !dbg !8344, !tbaa !3867
  %11 = load i32, i32* %basegid, align 4, !dbg !8346, !tbaa !3840
  %12 = load i32*, i32** %groups, align 8, !dbg !8347, !tbaa !3867
  %call6 = call i32 @getgrouplist(i8* %10, i32 %11, i32* %12, i32* %ngroups), !dbg !8348
  %cmp7 = icmp eq i32 %call6, -1, !dbg !8349
  br i1 %cmp7, label %if.then.9, label %if.end.11, !dbg !8350

if.then.9:                                        ; preds = %if.end.5
  %13 = load i32*, i32** %groups, align 8, !dbg !8351, !tbaa !3867
  %14 = bitcast i32* %13 to i8*, !dbg !8351
  call void @PyMem_Free(i8* %14), !dbg !8353
  %call10 = call %struct._object* @posix_error(), !dbg !8354
  store %struct._object* %call10, %struct._object** %retval, !dbg !8355
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.31, !dbg !8355

if.end.11:                                        ; preds = %if.end.5
  %15 = load i32, i32* %ngroups, align 4, !dbg !8356, !tbaa !3840
  %conv12 = sext i32 %15 to i64, !dbg !8356
  %call13 = call %struct._object* @PyList_New(i64 %conv12), !dbg !8357
  store %struct._object* %call13, %struct._object** %list, align 8, !dbg !8358, !tbaa !3867
  %16 = load %struct._object*, %struct._object** %list, align 8, !dbg !8359, !tbaa !3867
  %cmp14 = icmp eq %struct._object* %16, null, !dbg !8361
  br i1 %cmp14, label %if.then.16, label %if.end.17, !dbg !8362

if.then.16:                                       ; preds = %if.end.11
  %17 = load i32*, i32** %groups, align 8, !dbg !8363, !tbaa !3867
  %18 = bitcast i32* %17 to i8*, !dbg !8363
  call void @PyMem_Free(i8* %18), !dbg !8365
  store %struct._object* null, %struct._object** %retval, !dbg !8366
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.31, !dbg !8366

if.end.17:                                        ; preds = %if.end.11
  store i32 0, i32* %i, align 4, !dbg !8367, !tbaa !3840
  br label %for.cond, !dbg !8368

for.cond:                                         ; preds = %for.inc, %if.end.17
  %19 = load i32, i32* %i, align 4, !dbg !8369, !tbaa !3840
  %20 = load i32, i32* %ngroups, align 4, !dbg !8372, !tbaa !3840
  %cmp18 = icmp slt i32 %19, %20, !dbg !8373
  br i1 %cmp18, label %for.body, label %for.end, !dbg !8374

for.body:                                         ; preds = %for.cond
  %21 = bitcast %struct._object** %o to i8*, !dbg !8375
  call void @llvm.lifetime.start(i64 8, i8* %21) #3, !dbg !8375
  call void @llvm.dbg.declare(metadata %struct._object** %o, metadata !1967, metadata !3844), !dbg !8376
  %22 = load i32, i32* %i, align 4, !dbg !8377, !tbaa !3840
  %idxprom = sext i32 %22 to i64, !dbg !8378
  %23 = load i32*, i32** %groups, align 8, !dbg !8378, !tbaa !3867
  %arrayidx = getelementptr i32, i32* %23, i64 %idxprom, !dbg !8378
  %24 = load i32, i32* %arrayidx, align 4, !dbg !8378, !tbaa !3840
  %call20 = call %struct._object* @_PyLong_FromGid(i32 %24), !dbg !8379
  store %struct._object* %call20, %struct._object** %o, align 8, !dbg !8376, !tbaa !3867
  %25 = load %struct._object*, %struct._object** %o, align 8, !dbg !8380, !tbaa !3867
  %cmp21 = icmp eq %struct._object* %25, null, !dbg !8381
  br i1 %cmp21, label %if.then.23, label %if.end.28, !dbg !8382

if.then.23:                                       ; preds = %for.body
  br label %do.body, !dbg !8383

do.body:                                          ; preds = %if.then.23
  %26 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8384
  call void @llvm.lifetime.start(i64 8, i8* %26) #3, !dbg !8384
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1971, metadata !3844), !dbg !8386
  %27 = load %struct._object*, %struct._object** %list, align 8, !dbg !8387, !tbaa !3867
  store %struct._object* %27, %struct._object** %_py_decref_tmp, align 8, !dbg !8386, !tbaa !3867
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8388, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0, !dbg !8390
  %29 = load i64, i64* %ob_refcnt, align 8, !dbg !8391, !tbaa !3977
  %dec = add i64 %29, -1, !dbg !8391
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !8391, !tbaa !3977
  %cmp24 = icmp ne i64 %dec, 0, !dbg !8392
  br i1 %cmp24, label %if.then.26, label %if.else, !dbg !8393

if.then.26:                                       ; preds = %do.body
  br label %if.end.27, !dbg !8394

if.else:                                          ; preds = %do.body
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8396, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !8398
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8398, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4, !dbg !8399
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !8399, !tbaa !3986
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8400, !tbaa !3867
  call void %32(%struct._object* %33), !dbg !8401
  br label %if.end.27

if.end.27:                                        ; preds = %if.else, %if.then.26
  %34 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8402
  call void @llvm.lifetime.end(i64 8, i8* %34) #3, !dbg !8402
  br label %do.cond, !dbg !8404

do.cond:                                          ; preds = %if.end.27
  br label %do.end, !dbg !8405

do.end:                                           ; preds = %do.cond
  %35 = load i32*, i32** %groups, align 8, !dbg !8407, !tbaa !3867
  %36 = bitcast i32* %35 to i8*, !dbg !8407
  call void @PyMem_Free(i8* %36), !dbg !8408
  store %struct._object* null, %struct._object** %retval, !dbg !8409
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8409

if.end.28:                                        ; preds = %for.body
  %37 = load %struct._object*, %struct._object** %o, align 8, !dbg !8410, !tbaa !3867
  %38 = load i32, i32* %i, align 4, !dbg !8411, !tbaa !3840
  %idxprom29 = sext i32 %38 to i64, !dbg !8412
  %39 = load %struct._object*, %struct._object** %list, align 8, !dbg !8413, !tbaa !3867
  %40 = bitcast %struct._object* %39 to %struct.PyListObject*, !dbg !8414
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %40, i32 0, i32 1, !dbg !8415
  %41 = load %struct._object**, %struct._object*** %ob_item, align 8, !dbg !8415, !tbaa !8416
  %arrayidx30 = getelementptr %struct._object*, %struct._object** %41, i64 %idxprom29, !dbg !8412
  store %struct._object* %37, %struct._object** %arrayidx30, align 8, !dbg !8418, !tbaa !3867
  store i32 0, i32* %cleanup.dest.slot, !dbg !8419
  br label %cleanup, !dbg !8419

cleanup:                                          ; preds = %if.end.28, %do.end
  %42 = bitcast %struct._object** %o to i8*, !dbg !8420
  call void @llvm.lifetime.end(i64 8, i8* %42) #3, !dbg !8420
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %for.inc, !dbg !8421

for.inc:                                          ; preds = %cleanup.cont
  %43 = load i32, i32* %i, align 4, !dbg !8422, !tbaa !3840
  %inc = add i32 %43, 1, !dbg !8422
  store i32 %inc, i32* %i, align 4, !dbg !8422, !tbaa !3840
  br label %for.cond, !dbg !8423

for.end:                                          ; preds = %for.cond
  %44 = load i32*, i32** %groups, align 8, !dbg !8424, !tbaa !3867
  %45 = bitcast i32* %44 to i8*, !dbg !8424
  call void @PyMem_Free(i8* %45), !dbg !8425
  %46 = load %struct._object*, %struct._object** %list, align 8, !dbg !8426, !tbaa !3867
  store %struct._object* %46, %struct._object** %retval, !dbg !8427
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.31, !dbg !8427

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.31

cleanup.31:                                       ; preds = %NewDefault, %for.end, %if.then.16, %if.then.9, %if.then.3, %if.then
  %47 = bitcast i32* %basegid to i8*, !dbg !8428
  call void @llvm.lifetime.end(i64 4, i8* %47) #3, !dbg !8428
  %48 = bitcast i32** %groups to i8*, !dbg !8428
  call void @llvm.lifetime.end(i64 8, i8* %48) #3, !dbg !8428
  %49 = bitcast %struct._object** %list to i8*, !dbg !8428
  call void @llvm.lifetime.end(i64 8, i8* %49) #3, !dbg !8428
  %50 = bitcast i32* %ngroups to i8*, !dbg !8428
  call void @llvm.lifetime.end(i64 4, i8* %50) #3, !dbg !8428
  %51 = bitcast i32* %i to i8*, !dbg !8428
  call void @llvm.lifetime.end(i64 4, i8* %51) #3, !dbg !8428
  %52 = bitcast i8** %user to i8*, !dbg !8428
  call void @llvm.lifetime.end(i64 8, i8* %52) #3, !dbg !8428
  %53 = load %struct._object*, %struct._object** %retval, !dbg !8428
  ret %struct._object* %53, !dbg !8428
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getgroups(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %grouplist = alloca [65536 x i32], align 16
  %alt_grouplist = alloca i32*, align 8
  %n = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %i = alloca i32, align 4
  %o = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1977, metadata !3844), !dbg !8429
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !1978, metadata !3844), !dbg !8430
  %0 = bitcast %struct._object** %result to i8*, !dbg !8431
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8431
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !1979, metadata !3844), !dbg !8432
  store %struct._object* null, %struct._object** %result, align 8, !dbg !8432, !tbaa !3867
  %1 = bitcast [65536 x i32]* %grouplist to i8*, !dbg !8433
  call void @llvm.lifetime.start(i64 262144, i8* %1) #3, !dbg !8433
  call void @llvm.dbg.declare(metadata [65536 x i32]* %grouplist, metadata !1980, metadata !3844), !dbg !8434
  %2 = bitcast i32** %alt_grouplist to i8*, !dbg !8435
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !8435
  call void @llvm.dbg.declare(metadata i32** %alt_grouplist, metadata !1984, metadata !3844), !dbg !8436
  %arraydecay = getelementptr inbounds [65536 x i32], [65536 x i32]* %grouplist, i32 0, i32 0, !dbg !8437
  store i32* %arraydecay, i32** %alt_grouplist, align 8, !dbg !8436, !tbaa !3867
  %3 = bitcast i32* %n to i8*, !dbg !8438
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !8438
  call void @llvm.dbg.declare(metadata i32* %n, metadata !1985, metadata !3844), !dbg !8439
  %arraydecay1 = getelementptr inbounds [65536 x i32], [65536 x i32]* %grouplist, i32 0, i32 0, !dbg !8440
  %call = call i32 @getgroups(i32 65536, i32* %arraydecay1) #3, !dbg !8441
  store i32 %call, i32* %n, align 4, !dbg !8442, !tbaa !3840
  %4 = load i32, i32* %n, align 4, !dbg !8443, !tbaa !3840
  %cmp = icmp slt i32 %4, 0, !dbg !8445
  br i1 %cmp, label %if.then, label %if.end.29, !dbg !8446

if.then:                                          ; preds = %entry
  %call2 = call i32* @__errno_location() #1, !dbg !8447
  %5 = load i32, i32* %call2, align 4, !dbg !8450, !tbaa !3840
  %cmp3 = icmp eq i32 %5, 22, !dbg !8451
  br i1 %cmp3, label %if.then.4, label %if.else.26, !dbg !8452

if.then.4:                                        ; preds = %if.then
  %call5 = call i32 @getgroups(i32 0, i32* null) #3, !dbg !8453
  store i32 %call5, i32* %n, align 4, !dbg !8455, !tbaa !3840
  %6 = load i32, i32* %n, align 4, !dbg !8456, !tbaa !3840
  %cmp6 = icmp eq i32 %6, -1, !dbg !8458
  br i1 %cmp6, label %if.then.7, label %if.end, !dbg !8459

if.then.7:                                        ; preds = %if.then.4
  %call8 = call %struct._object* @posix_error(), !dbg !8460
  store %struct._object* %call8, %struct._object** %retval, !dbg !8462
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.55, !dbg !8462

if.end:                                           ; preds = %if.then.4
  %7 = load i32, i32* %n, align 4, !dbg !8463, !tbaa !3840
  %cmp9 = icmp eq i32 %7, 0, !dbg !8465
  br i1 %cmp9, label %if.then.10, label %if.else, !dbg !8466

if.then.10:                                       ; preds = %if.end
  %arraydecay11 = getelementptr inbounds [65536 x i32], [65536 x i32]* %grouplist, i32 0, i32 0, !dbg !8467
  store i32* %arraydecay11, i32** %alt_grouplist, align 8, !dbg !8469, !tbaa !3867
  br label %if.end.25, !dbg !8470

if.else:                                          ; preds = %if.end
  %8 = load i32, i32* %n, align 4, !dbg !8471, !tbaa !3840
  %conv = sext i32 %8 to i64, !dbg !8471
  %mul = mul i64 %conv, 4, !dbg !8473
  %call12 = call i8* @PyMem_Malloc(i64 %mul), !dbg !8474
  %9 = bitcast i8* %call12 to i32*, !dbg !8474
  store i32* %9, i32** %alt_grouplist, align 8, !dbg !8475, !tbaa !3867
  %10 = load i32*, i32** %alt_grouplist, align 8, !dbg !8476, !tbaa !3867
  %cmp13 = icmp eq i32* %10, null, !dbg !8478
  br i1 %cmp13, label %if.then.15, label %if.end.18, !dbg !8479

if.then.15:                                       ; preds = %if.else
  %call16 = call i32* @__errno_location() #1, !dbg !8480
  store i32 22, i32* %call16, align 4, !dbg !8482, !tbaa !3840
  %call17 = call %struct._object* @posix_error(), !dbg !8483
  store %struct._object* %call17, %struct._object** %retval, !dbg !8484
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.55, !dbg !8484

if.end.18:                                        ; preds = %if.else
  %11 = load i32, i32* %n, align 4, !dbg !8485, !tbaa !3840
  %12 = load i32*, i32** %alt_grouplist, align 8, !dbg !8486, !tbaa !3867
  %call19 = call i32 @getgroups(i32 %11, i32* %12) #3, !dbg !8487
  store i32 %call19, i32* %n, align 4, !dbg !8488, !tbaa !3840
  %13 = load i32, i32* %n, align 4, !dbg !8489, !tbaa !3840
  %cmp20 = icmp eq i32 %13, -1, !dbg !8491
  br i1 %cmp20, label %if.then.22, label %if.end.24, !dbg !8492

if.then.22:                                       ; preds = %if.end.18
  %14 = load i32*, i32** %alt_grouplist, align 8, !dbg !8493, !tbaa !3867
  %15 = bitcast i32* %14 to i8*, !dbg !8493
  call void @PyMem_Free(i8* %15), !dbg !8495
  %call23 = call %struct._object* @posix_error(), !dbg !8496
  store %struct._object* %call23, %struct._object** %retval, !dbg !8497
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.55, !dbg !8497

if.end.24:                                        ; preds = %if.end.18
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %if.then.10
  br label %if.end.28, !dbg !8498

if.else.26:                                       ; preds = %if.then
  %call27 = call %struct._object* @posix_error(), !dbg !8499
  store %struct._object* %call27, %struct._object** %retval, !dbg !8501
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.55, !dbg !8501

if.end.28:                                        ; preds = %if.end.25
  br label %if.end.29, !dbg !8502

if.end.29:                                        ; preds = %if.end.28, %entry
  %16 = load i32, i32* %n, align 4, !dbg !8503, !tbaa !3840
  %conv30 = sext i32 %16 to i64, !dbg !8503
  %call31 = call %struct._object* @PyList_New(i64 %conv30), !dbg !8504
  store %struct._object* %call31, %struct._object** %result, align 8, !dbg !8505, !tbaa !3867
  %17 = load %struct._object*, %struct._object** %result, align 8, !dbg !8506, !tbaa !3867
  %cmp32 = icmp ne %struct._object* %17, null, !dbg !8507
  br i1 %cmp32, label %if.then.34, label %if.end.49, !dbg !8508

if.then.34:                                       ; preds = %if.end.29
  %18 = bitcast i32* %i to i8*, !dbg !8509
  call void @llvm.lifetime.start(i64 4, i8* %18) #3, !dbg !8509
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1986, metadata !3844), !dbg !8510
  store i32 0, i32* %i, align 4, !dbg !8511, !tbaa !3840
  br label %for.cond, !dbg !8512

for.cond:                                         ; preds = %for.inc, %if.then.34
  %19 = load i32, i32* %i, align 4, !dbg !8513, !tbaa !3840
  %20 = load i32, i32* %n, align 4, !dbg !8516, !tbaa !3840
  %cmp35 = icmp slt i32 %19, %20, !dbg !8517
  br i1 %cmp35, label %for.body, label %for.end, !dbg !8518

for.body:                                         ; preds = %for.cond
  %21 = bitcast %struct._object** %o to i8*, !dbg !8519
  call void @llvm.lifetime.start(i64 8, i8* %21) #3, !dbg !8519
  call void @llvm.dbg.declare(metadata %struct._object** %o, metadata !1989, metadata !3844), !dbg !8520
  %22 = load i32, i32* %i, align 4, !dbg !8521, !tbaa !3840
  %idxprom = sext i32 %22 to i64, !dbg !8522
  %23 = load i32*, i32** %alt_grouplist, align 8, !dbg !8522, !tbaa !3867
  %arrayidx = getelementptr i32, i32* %23, i64 %idxprom, !dbg !8522
  %24 = load i32, i32* %arrayidx, align 4, !dbg !8522, !tbaa !3840
  %call37 = call %struct._object* @_PyLong_FromGid(i32 %24), !dbg !8523
  store %struct._object* %call37, %struct._object** %o, align 8, !dbg !8520, !tbaa !3867
  %25 = load %struct._object*, %struct._object** %o, align 8, !dbg !8524, !tbaa !3867
  %cmp38 = icmp eq %struct._object* %25, null, !dbg !8525
  br i1 %cmp38, label %if.then.40, label %if.end.46, !dbg !8526

if.then.40:                                       ; preds = %for.body
  br label %do.body, !dbg !8527

do.body:                                          ; preds = %if.then.40
  %26 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8528
  call void @llvm.lifetime.start(i64 8, i8* %26) #3, !dbg !8528
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1993, metadata !3844), !dbg !8530
  %27 = load %struct._object*, %struct._object** %result, align 8, !dbg !8531, !tbaa !3867
  store %struct._object* %27, %struct._object** %_py_decref_tmp, align 8, !dbg !8530, !tbaa !3867
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8532, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0, !dbg !8534
  %29 = load i64, i64* %ob_refcnt, align 8, !dbg !8535, !tbaa !3977
  %dec = add i64 %29, -1, !dbg !8535
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !8535, !tbaa !3977
  %cmp41 = icmp ne i64 %dec, 0, !dbg !8536
  br i1 %cmp41, label %if.then.43, label %if.else.44, !dbg !8537

if.then.43:                                       ; preds = %do.body
  br label %if.end.45, !dbg !8538

if.else.44:                                       ; preds = %do.body
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8540, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !8542
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8542, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4, !dbg !8543
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !8543, !tbaa !3986
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8544, !tbaa !3867
  call void %32(%struct._object* %33), !dbg !8545
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.44, %if.then.43
  %34 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8546
  call void @llvm.lifetime.end(i64 8, i8* %34) #3, !dbg !8546
  br label %do.cond, !dbg !8548

do.cond:                                          ; preds = %if.end.45
  br label %do.end, !dbg !8549

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %result, align 8, !dbg !8551, !tbaa !3867
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8552

if.end.46:                                        ; preds = %for.body
  %35 = load %struct._object*, %struct._object** %o, align 8, !dbg !8553, !tbaa !3867
  %36 = load i32, i32* %i, align 4, !dbg !8554, !tbaa !3840
  %idxprom47 = sext i32 %36 to i64, !dbg !8555
  %37 = load %struct._object*, %struct._object** %result, align 8, !dbg !8556, !tbaa !3867
  %38 = bitcast %struct._object* %37 to %struct.PyListObject*, !dbg !8557
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %38, i32 0, i32 1, !dbg !8558
  %39 = load %struct._object**, %struct._object*** %ob_item, align 8, !dbg !8558, !tbaa !8416
  %arrayidx48 = getelementptr %struct._object*, %struct._object** %39, i64 %idxprom47, !dbg !8555
  store %struct._object* %35, %struct._object** %arrayidx48, align 8, !dbg !8559, !tbaa !3867
  store i32 0, i32* %cleanup.dest.slot, !dbg !8560
  br label %cleanup, !dbg !8560

cleanup:                                          ; preds = %if.end.46, %do.end
  %40 = bitcast %struct._object** %o to i8*, !dbg !8561
  call void @llvm.lifetime.end(i64 8, i8* %40) #3, !dbg !8561
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 2
  br i1 %SwitchLeaf, label %for.end, label %NewDefault

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %NewDefault
  br label %for.inc, !dbg !8562

for.inc:                                          ; preds = %cleanup.cont
  %41 = load i32, i32* %i, align 4, !dbg !8563, !tbaa !3840
  %inc = add i32 %41, 1, !dbg !8563
  store i32 %inc, i32* %i, align 4, !dbg !8563, !tbaa !3840
  br label %for.cond, !dbg !8564

for.end:                                          ; preds = %LeafBlock, %for.cond
  %42 = bitcast i32* %i to i8*, !dbg !8565
  call void @llvm.lifetime.end(i64 4, i8* %42) #3, !dbg !8565
  br label %if.end.49, !dbg !8566

if.end.49:                                        ; preds = %for.end, %if.end.29
  %43 = load i32*, i32** %alt_grouplist, align 8, !dbg !8567, !tbaa !3867
  %arraydecay50 = getelementptr inbounds [65536 x i32], [65536 x i32]* %grouplist, i32 0, i32 0, !dbg !8569
  %cmp51 = icmp ne i32* %43, %arraydecay50, !dbg !8570
  br i1 %cmp51, label %if.then.53, label %if.end.54, !dbg !8571

if.then.53:                                       ; preds = %if.end.49
  %44 = load i32*, i32** %alt_grouplist, align 8, !dbg !8572, !tbaa !3867
  %45 = bitcast i32* %44 to i8*, !dbg !8572
  call void @PyMem_Free(i8* %45), !dbg !8574
  br label %if.end.54, !dbg !8575

if.end.54:                                        ; preds = %if.then.53, %if.end.49
  %46 = load %struct._object*, %struct._object** %result, align 8, !dbg !8576, !tbaa !3867
  store %struct._object* %46, %struct._object** %retval, !dbg !8577
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.55, !dbg !8577

cleanup.55:                                       ; preds = %if.end.54, %if.else.26, %if.then.22, %if.then.15, %if.then.7
  %47 = bitcast i32* %n to i8*, !dbg !8578
  call void @llvm.lifetime.end(i64 4, i8* %47) #3, !dbg !8578
  %48 = bitcast i32** %alt_grouplist to i8*, !dbg !8578
  call void @llvm.lifetime.end(i64 8, i8* %48) #3, !dbg !8578
  %49 = bitcast [65536 x i32]* %grouplist to i8*, !dbg !8578
  call void @llvm.lifetime.end(i64 262144, i8* %49) #3, !dbg !8578
  %50 = bitcast %struct._object** %result to i8*, !dbg !8578
  call void @llvm.lifetime.end(i64 8, i8* %50) #3, !dbg !8578
  %51 = load %struct._object*, %struct._object** %retval, !dbg !8578
  ret %struct._object* %51, !dbg !8578
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getpid(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1999, metadata !3844), !dbg !8579
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !2000, metadata !3844), !dbg !8580
  %call = call i32 @getpid() #3, !dbg !8581
  %conv = sext i32 %call to i64, !dbg !8581
  %call1 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !8582
  ret %struct._object* %call1, !dbg !8583
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getpgrp(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2003, metadata !3844), !dbg !8584
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !2004, metadata !3844), !dbg !8585
  %call = call i32 @getpgrp() #3, !dbg !8586
  %conv = sext i32 %call to i64, !dbg !8586
  %call1 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !8587
  ret %struct._object* %call1, !dbg !8588
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getppid(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2007, metadata !3844), !dbg !8589
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !2008, metadata !3844), !dbg !8590
  %call = call i32 @getppid() #3, !dbg !8591
  %conv = sext i32 %call to i64, !dbg !8591
  %call1 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !8592
  ret %struct._object* %call1, !dbg !8593
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getuid(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2011, metadata !3844), !dbg !8594
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !2012, metadata !3844), !dbg !8595
  %call = call i32 @getuid() #3, !dbg !8596
  %call1 = call %struct._object* @_PyLong_FromUid(i32 %call), !dbg !8597
  ret %struct._object* %call1, !dbg !8598
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getlogin(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %name = alloca i8*, align 8
  %old_errno = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2015, metadata !3844), !dbg !8599
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !2016, metadata !3844), !dbg !8600
  %0 = bitcast %struct._object** %result to i8*, !dbg !8601
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8601
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !2017, metadata !3844), !dbg !8602
  store %struct._object* null, %struct._object** %result, align 8, !dbg !8602, !tbaa !3867
  %1 = bitcast i8** %name to i8*, !dbg !8603
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !8603
  call void @llvm.dbg.declare(metadata i8** %name, metadata !2018, metadata !3844), !dbg !8604
  %2 = bitcast i32* %old_errno to i8*, !dbg !8605
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !8605
  call void @llvm.dbg.declare(metadata i32* %old_errno, metadata !2019, metadata !3844), !dbg !8606
  %call = call i32* @__errno_location() #1, !dbg !8607
  %3 = load i32, i32* %call, align 4, !dbg !8608, !tbaa !3840
  store i32 %3, i32* %old_errno, align 4, !dbg !8606, !tbaa !3840
  %call1 = call i32* @__errno_location() #1, !dbg !8609
  store i32 0, i32* %call1, align 4, !dbg !8610, !tbaa !3840
  %call2 = call i8* @getlogin(), !dbg !8611
  store i8* %call2, i8** %name, align 8, !dbg !8612, !tbaa !3867
  %4 = load i8*, i8** %name, align 8, !dbg !8613, !tbaa !3867
  %cmp = icmp eq i8* %4, null, !dbg !8615
  br i1 %cmp, label %if.then, label %if.else.6, !dbg !8616

if.then:                                          ; preds = %entry
  %call3 = call i32* @__errno_location() #1, !dbg !8617
  %5 = load i32, i32* %call3, align 4, !dbg !8620, !tbaa !3840
  %tobool = icmp ne i32 %5, 0, !dbg !8621
  br i1 %tobool, label %if.then.4, label %if.else, !dbg !8622

if.then.4:                                        ; preds = %if.then
  %call5 = call %struct._object* @posix_error(), !dbg !8623
  br label %if.end, !dbg !8623

if.else:                                          ; preds = %if.then
  %6 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !8624, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.257, i32 0, i32 0)), !dbg !8625
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %if.end.8, !dbg !8626

if.else.6:                                        ; preds = %entry
  %7 = load i8*, i8** %name, align 8, !dbg !8627, !tbaa !3867
  %call7 = call %struct._object* @PyUnicode_DecodeFSDefault(i8* %7), !dbg !8628
  store %struct._object* %call7, %struct._object** %result, align 8, !dbg !8629, !tbaa !3867
  br label %if.end.8

if.end.8:                                         ; preds = %if.else.6, %if.end
  %8 = load i32, i32* %old_errno, align 4, !dbg !8630, !tbaa !3840
  %call9 = call i32* @__errno_location() #1, !dbg !8631
  store i32 %8, i32* %call9, align 4, !dbg !8632, !tbaa !3840
  %9 = load %struct._object*, %struct._object** %result, align 8, !dbg !8633, !tbaa !3867
  %10 = bitcast i32* %old_errno to i8*, !dbg !8634
  call void @llvm.lifetime.end(i64 4, i8* %10) #3, !dbg !8634
  %11 = bitcast i8** %name to i8*, !dbg !8634
  call void @llvm.lifetime.end(i64 8, i8* %11) #3, !dbg !8634
  %12 = bitcast %struct._object** %result to i8*, !dbg !8634
  call void @llvm.lifetime.end(i64 8, i8* %12) #3, !dbg !8634
  ret %struct._object* %9, !dbg !8635
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_kill(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %sig = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2022, metadata !3844), !dbg !8636
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2023, metadata !3844), !dbg !8637
  %0 = bitcast i32* %pid to i8*, !dbg !8638
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !8638
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !2024, metadata !3844), !dbg !8639
  %1 = bitcast i32* %sig to i8*, !dbg !8640
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !8640
  call void @llvm.dbg.declare(metadata i32* %sig, metadata !2025, metadata !3844), !dbg !8641
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8642, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.258, i32 0, i32 0), i32* %pid, i32* %sig), !dbg !8644
  %tobool = icmp ne i32 %call, 0, !dbg !8644
  br i1 %tobool, label %if.end, label %if.then, !dbg !8645

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8646
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8646

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %pid, align 4, !dbg !8647, !tbaa !3840
  %4 = load i32, i32* %sig, align 4, !dbg !8649, !tbaa !3840
  %call1 = call i32 @kill(i32 %3, i32 %4) #3, !dbg !8650
  %cmp = icmp eq i32 %call1, -1, !dbg !8651
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !8652

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !8653
  store %struct._object* %call3, %struct._object** %retval, !dbg !8654
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8654

if.end.4:                                         ; preds = %if.end
  %5 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8655, !tbaa !3977
  %inc = add i64 %5, 1, !dbg !8655
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8655, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !8656
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8656

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %6 = bitcast i32* %sig to i8*, !dbg !8657
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !8657
  %7 = bitcast i32* %pid to i8*, !dbg !8657
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !8657
  %8 = load %struct._object*, %struct._object** %retval, !dbg !8657
  ret %struct._object* %8, !dbg !8657
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_killpg(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %sig = alloca i32, align 4
  %pgid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2028, metadata !3844), !dbg !8658
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2029, metadata !3844), !dbg !8659
  %0 = bitcast i32* %sig to i8*, !dbg !8660
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !8660
  call void @llvm.dbg.declare(metadata i32* %sig, metadata !2030, metadata !3844), !dbg !8661
  %1 = bitcast i32* %pgid to i8*, !dbg !8662
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !8662
  call void @llvm.dbg.declare(metadata i32* %pgid, metadata !2031, metadata !3844), !dbg !8663
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8664, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.259, i32 0, i32 0), i32* %pgid, i32* %sig), !dbg !8666
  %tobool = icmp ne i32 %call, 0, !dbg !8666
  br i1 %tobool, label %if.end, label %if.then, !dbg !8667

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8668
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8668

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %pgid, align 4, !dbg !8669, !tbaa !3840
  %4 = load i32, i32* %sig, align 4, !dbg !8671, !tbaa !3840
  %call1 = call i32 @killpg(i32 %3, i32 %4) #3, !dbg !8672
  %cmp = icmp eq i32 %call1, -1, !dbg !8673
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !8674

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !8675
  store %struct._object* %call3, %struct._object** %retval, !dbg !8676
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8676

if.end.4:                                         ; preds = %if.end
  %5 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8677, !tbaa !3977
  %inc = add i64 %5, 1, !dbg !8677
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8677, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !8678
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8678

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %6 = bitcast i32* %pgid to i8*, !dbg !8679
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !8679
  %7 = bitcast i32* %sig to i8*, !dbg !8679
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !8679
  %8 = load %struct._object*, %struct._object** %retval, !dbg !8679
  ret %struct._object* %8, !dbg !8679
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_setuid(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %uid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2034, metadata !3844), !dbg !8680
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2035, metadata !3844), !dbg !8681
  %0 = bitcast i32* %uid to i8*, !dbg !8682
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !8682
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !2036, metadata !3844), !dbg !8683
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8684, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.260, i32 0, i32 0), i32 (%struct._object*, i8*)* @_Py_Uid_Converter, i32* %uid), !dbg !8686
  %tobool = icmp ne i32 %call, 0, !dbg !8686
  br i1 %tobool, label %if.end, label %if.then, !dbg !8687

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8688
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8688

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %uid, align 4, !dbg !8689, !tbaa !3840
  %call1 = call i32 @setuid(i32 %2) #3, !dbg !8691
  %cmp = icmp slt i32 %call1, 0, !dbg !8692
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !8693

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !8694
  store %struct._object* %call3, %struct._object** %retval, !dbg !8695
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8695

if.end.4:                                         ; preds = %if.end
  %3 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8696, !tbaa !3977
  %inc = add i64 %3, 1, !dbg !8696
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8696, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !8697
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8697

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %4 = bitcast i32* %uid to i8*, !dbg !8698
  call void @llvm.lifetime.end(i64 4, i8* %4) #3, !dbg !8698
  %5 = load %struct._object*, %struct._object** %retval, !dbg !8698
  ret %struct._object* %5, !dbg !8698
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_seteuid(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %euid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2039, metadata !3844), !dbg !8699
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2040, metadata !3844), !dbg !8700
  %0 = bitcast i32* %euid to i8*, !dbg !8701
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !8701
  call void @llvm.dbg.declare(metadata i32* %euid, metadata !2041, metadata !3844), !dbg !8702
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8703, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.261, i32 0, i32 0), i32 (%struct._object*, i8*)* @_Py_Uid_Converter, i32* %euid), !dbg !8705
  %tobool = icmp ne i32 %call, 0, !dbg !8705
  br i1 %tobool, label %if.end, label %if.then, !dbg !8706

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8707
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8707

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %euid, align 4, !dbg !8708, !tbaa !3840
  %call1 = call i32 @seteuid(i32 %2) #3, !dbg !8710
  %cmp = icmp slt i32 %call1, 0, !dbg !8711
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !8712

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !8713
  store %struct._object* %call3, %struct._object** %retval, !dbg !8715
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8715

if.else:                                          ; preds = %if.end
  %3 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8716, !tbaa !3977
  %inc = add i64 %3, 1, !dbg !8716
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8716, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !8718
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8718

cleanup:                                          ; preds = %if.else, %if.then.2, %if.then
  %4 = bitcast i32* %euid to i8*, !dbg !8719
  call void @llvm.lifetime.end(i64 4, i8* %4) #3, !dbg !8719
  %5 = load %struct._object*, %struct._object** %retval, !dbg !8719
  ret %struct._object* %5, !dbg !8719
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_setegid(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %egid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2044, metadata !3844), !dbg !8720
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2045, metadata !3844), !dbg !8721
  %0 = bitcast i32* %egid to i8*, !dbg !8722
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !8722
  call void @llvm.dbg.declare(metadata i32* %egid, metadata !2046, metadata !3844), !dbg !8723
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8724, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.262, i32 0, i32 0), i32 (%struct._object*, i8*)* @_Py_Gid_Converter, i32* %egid), !dbg !8726
  %tobool = icmp ne i32 %call, 0, !dbg !8726
  br i1 %tobool, label %if.end, label %if.then, !dbg !8727

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8728
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8728

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %egid, align 4, !dbg !8729, !tbaa !3840
  %call1 = call i32 @setegid(i32 %2) #3, !dbg !8731
  %cmp = icmp slt i32 %call1, 0, !dbg !8732
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !8733

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !8734
  store %struct._object* %call3, %struct._object** %retval, !dbg !8736
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8736

if.else:                                          ; preds = %if.end
  %3 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8737, !tbaa !3977
  %inc = add i64 %3, 1, !dbg !8737
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8737, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !8739
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8739

cleanup:                                          ; preds = %if.else, %if.then.2, %if.then
  %4 = bitcast i32* %egid to i8*, !dbg !8740
  call void @llvm.lifetime.end(i64 4, i8* %4) #3, !dbg !8740
  %5 = load %struct._object*, %struct._object** %retval, !dbg !8740
  ret %struct._object* %5, !dbg !8740
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_setreuid(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %ruid = alloca i32, align 4
  %euid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2049, metadata !3844), !dbg !8741
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2050, metadata !3844), !dbg !8742
  %0 = bitcast i32* %ruid to i8*, !dbg !8743
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !8743
  call void @llvm.dbg.declare(metadata i32* %ruid, metadata !2051, metadata !3844), !dbg !8744
  %1 = bitcast i32* %euid to i8*, !dbg !8743
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !8743
  call void @llvm.dbg.declare(metadata i32* %euid, metadata !2052, metadata !3844), !dbg !8745
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8746, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.263, i32 0, i32 0), i32 (%struct._object*, i8*)* @_Py_Uid_Converter, i32* %ruid, i32 (%struct._object*, i8*)* @_Py_Uid_Converter, i32* %euid), !dbg !8748
  %tobool = icmp ne i32 %call, 0, !dbg !8748
  br i1 %tobool, label %if.end, label %if.then, !dbg !8749

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8750
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8750

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %ruid, align 4, !dbg !8751, !tbaa !3840
  %4 = load i32, i32* %euid, align 4, !dbg !8753, !tbaa !3840
  %call1 = call i32 @setreuid(i32 %3, i32 %4) #3, !dbg !8754
  %cmp = icmp slt i32 %call1, 0, !dbg !8755
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !8756

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !8757
  store %struct._object* %call3, %struct._object** %retval, !dbg !8759
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8759

if.else:                                          ; preds = %if.end
  %5 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8760, !tbaa !3977
  %inc = add i64 %5, 1, !dbg !8760
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8760, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !8762
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8762

cleanup:                                          ; preds = %if.else, %if.then.2, %if.then
  %6 = bitcast i32* %euid to i8*, !dbg !8763
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !8763
  %7 = bitcast i32* %ruid to i8*, !dbg !8763
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !8763
  %8 = load %struct._object*, %struct._object** %retval, !dbg !8763
  ret %struct._object* %8, !dbg !8763
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_setregid(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %rgid = alloca i32, align 4
  %egid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2055, metadata !3844), !dbg !8764
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2056, metadata !3844), !dbg !8765
  %0 = bitcast i32* %rgid to i8*, !dbg !8766
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !8766
  call void @llvm.dbg.declare(metadata i32* %rgid, metadata !2057, metadata !3844), !dbg !8767
  %1 = bitcast i32* %egid to i8*, !dbg !8766
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !8766
  call void @llvm.dbg.declare(metadata i32* %egid, metadata !2058, metadata !3844), !dbg !8768
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8769, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.264, i32 0, i32 0), i32 (%struct._object*, i8*)* @_Py_Gid_Converter, i32* %rgid, i32 (%struct._object*, i8*)* @_Py_Gid_Converter, i32* %egid), !dbg !8771
  %tobool = icmp ne i32 %call, 0, !dbg !8771
  br i1 %tobool, label %if.end, label %if.then, !dbg !8772

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8773
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8773

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %rgid, align 4, !dbg !8774, !tbaa !3840
  %4 = load i32, i32* %egid, align 4, !dbg !8776, !tbaa !3840
  %call1 = call i32 @setregid(i32 %3, i32 %4) #3, !dbg !8777
  %cmp = icmp slt i32 %call1, 0, !dbg !8778
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !8779

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !8780
  store %struct._object* %call3, %struct._object** %retval, !dbg !8782
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8782

if.else:                                          ; preds = %if.end
  %5 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8783, !tbaa !3977
  %inc = add i64 %5, 1, !dbg !8783
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8783, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !8785
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8785

cleanup:                                          ; preds = %if.else, %if.then.2, %if.then
  %6 = bitcast i32* %egid to i8*, !dbg !8786
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !8786
  %7 = bitcast i32* %rgid to i8*, !dbg !8786
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !8786
  %8 = load %struct._object*, %struct._object** %retval, !dbg !8786
  ret %struct._object* %8, !dbg !8786
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_setgid(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %gid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2061, metadata !3844), !dbg !8787
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2062, metadata !3844), !dbg !8788
  %0 = bitcast i32* %gid to i8*, !dbg !8789
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !8789
  call void @llvm.dbg.declare(metadata i32* %gid, metadata !2063, metadata !3844), !dbg !8790
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8791, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.265, i32 0, i32 0), i32 (%struct._object*, i8*)* @_Py_Gid_Converter, i32* %gid), !dbg !8793
  %tobool = icmp ne i32 %call, 0, !dbg !8793
  br i1 %tobool, label %if.end, label %if.then, !dbg !8794

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8795
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8795

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %gid, align 4, !dbg !8796, !tbaa !3840
  %call1 = call i32 @setgid(i32 %2) #3, !dbg !8798
  %cmp = icmp slt i32 %call1, 0, !dbg !8799
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !8800

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !8801
  store %struct._object* %call3, %struct._object** %retval, !dbg !8802
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8802

if.end.4:                                         ; preds = %if.end
  %3 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8803, !tbaa !3977
  %inc = add i64 %3, 1, !dbg !8803
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8803, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !8804
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8804

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %4 = bitcast i32* %gid to i8*, !dbg !8805
  call void @llvm.lifetime.end(i64 4, i8* %4) #3, !dbg !8805
  %5 = load %struct._object*, %struct._object** %retval, !dbg !8805
  ret %struct._object* %5, !dbg !8805
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_setgroups(%struct._object* %self, %struct._object* %groups) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %groups.addr = alloca %struct._object*, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %grouplist = alloca [65536 x i32], align 16
  %cleanup.dest.slot = alloca i32
  %elem = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp25 = alloca %struct._object*, align 8
  %_py_decref_tmp40 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2066, metadata !3844), !dbg !8806
  store %struct._object* %groups, %struct._object** %groups.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %groups.addr, metadata !2067, metadata !3844), !dbg !8807
  %0 = bitcast i32* %i to i8*, !dbg !8808
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !8808
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2068, metadata !3844), !dbg !8809
  %1 = bitcast i32* %len to i8*, !dbg !8808
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !8808
  call void @llvm.dbg.declare(metadata i32* %len, metadata !2069, metadata !3844), !dbg !8810
  %2 = bitcast [65536 x i32]* %grouplist to i8*, !dbg !8811
  call void @llvm.lifetime.start(i64 262144, i8* %2) #3, !dbg !8811
  call void @llvm.dbg.declare(metadata [65536 x i32]* %grouplist, metadata !2070, metadata !3844), !dbg !8812
  %3 = load %struct._object*, %struct._object** %groups.addr, align 8, !dbg !8813, !tbaa !3867
  %call = call i32 @PySequence_Check(%struct._object* %3), !dbg !8815
  %tobool = icmp ne i32 %call, 0, !dbg !8815
  br i1 %tobool, label %if.end, label %if.then, !dbg !8816

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !8817, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.266, i32 0, i32 0)), !dbg !8819
  store %struct._object* null, %struct._object** %retval, !dbg !8820
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.60, !dbg !8820

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %groups.addr, align 8, !dbg !8821, !tbaa !3867
  %call1 = call i64 @PySequence_Size(%struct._object* %5), !dbg !8822
  %conv = trunc i64 %call1 to i32, !dbg !8822
  store i32 %conv, i32* %len, align 4, !dbg !8823, !tbaa !3840
  %6 = load i32, i32* %len, align 4, !dbg !8824, !tbaa !3840
  %cmp = icmp sgt i32 %6, 65536, !dbg !8826
  br i1 %cmp, label %if.then.3, label %if.end.4, !dbg !8827

if.then.3:                                        ; preds = %if.end
  %7 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !8828, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %7, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.267, i32 0, i32 0)), !dbg !8830
  store %struct._object* null, %struct._object** %retval, !dbg !8831
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.60, !dbg !8831

if.end.4:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !8832, !tbaa !3840
  br label %for.cond, !dbg !8833

for.cond:                                         ; preds = %for.inc, %if.end.4
  %8 = load i32, i32* %i, align 4, !dbg !8834, !tbaa !3840
  %9 = load i32, i32* %len, align 4, !dbg !8837, !tbaa !3840
  %cmp5 = icmp slt i32 %8, %9, !dbg !8838
  br i1 %cmp5, label %for.body, label %for.end, !dbg !8839

for.body:                                         ; preds = %for.cond
  %10 = bitcast %struct._object** %elem to i8*, !dbg !8840
  call void @llvm.lifetime.start(i64 8, i8* %10) #3, !dbg !8840
  call void @llvm.dbg.declare(metadata %struct._object** %elem, metadata !2071, metadata !3844), !dbg !8841
  %11 = load %struct._object*, %struct._object** %groups.addr, align 8, !dbg !8842, !tbaa !3867
  %12 = load i32, i32* %i, align 4, !dbg !8843, !tbaa !3840
  %conv7 = sext i32 %12 to i64, !dbg !8843
  %call8 = call %struct._object* @PySequence_GetItem(%struct._object* %11, i64 %conv7), !dbg !8844
  store %struct._object* %call8, %struct._object** %elem, align 8, !dbg !8845, !tbaa !3867
  %13 = load %struct._object*, %struct._object** %elem, align 8, !dbg !8846, !tbaa !3867
  %tobool9 = icmp ne %struct._object* %13, null, !dbg !8846
  br i1 %tobool9, label %if.end.11, label %if.then.10, !dbg !8848

if.then.10:                                       ; preds = %for.body
  store %struct._object* null, %struct._object** %retval, !dbg !8849
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8849

if.end.11:                                        ; preds = %for.body
  %14 = load %struct._object*, %struct._object** %elem, align 8, !dbg !8850, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1, !dbg !8851
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8851, !tbaa !3892
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 19, !dbg !8852
  %16 = load i64, i64* %tp_flags, align 8, !dbg !8852, !tbaa !6259
  %and = and i64 %16, 16777216, !dbg !8853
  %cmp12 = icmp ne i64 %and, 0, !dbg !8854
  br i1 %cmp12, label %if.else.20, label %if.then.14, !dbg !8855

if.then.14:                                       ; preds = %if.end.11
  %17 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !8856, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %17, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.268, i32 0, i32 0)), !dbg !8857
  br label %do.body, !dbg !8858

do.body:                                          ; preds = %if.then.14
  %18 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8859
  call void @llvm.lifetime.start(i64 8, i8* %18) #3, !dbg !8859
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !2075, metadata !3844), !dbg !8861
  %19 = load %struct._object*, %struct._object** %elem, align 8, !dbg !8862, !tbaa !3867
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8, !dbg !8861, !tbaa !3867
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8863, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0, !dbg !8865
  %21 = load i64, i64* %ob_refcnt, align 8, !dbg !8866, !tbaa !3977
  %dec = add i64 %21, -1, !dbg !8866
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !8866, !tbaa !3977
  %cmp15 = icmp ne i64 %dec, 0, !dbg !8867
  br i1 %cmp15, label %if.then.17, label %if.else, !dbg !8868

if.then.17:                                       ; preds = %do.body
  br label %if.end.19, !dbg !8869

if.else:                                          ; preds = %do.body
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8871, !tbaa !3867
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1, !dbg !8873
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8, !dbg !8873, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4, !dbg !8874
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !8874, !tbaa !3986
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8875, !tbaa !3867
  call void %24(%struct._object* %25), !dbg !8876
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.17
  %26 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8877
  call void @llvm.lifetime.end(i64 8, i8* %26) #3, !dbg !8877
  br label %do.cond, !dbg !8879

do.cond:                                          ; preds = %if.end.19
  br label %do.end, !dbg !8880

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !8882
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8882

if.else.20:                                       ; preds = %if.end.11
  %27 = load %struct._object*, %struct._object** %elem, align 8, !dbg !8883, !tbaa !3867
  %28 = load i32, i32* %i, align 4, !dbg !8884, !tbaa !3840
  %idxprom = sext i32 %28 to i64, !dbg !8885
  %arrayidx = getelementptr [65536 x i32], [65536 x i32]* %grouplist, i32 0, i64 %idxprom, !dbg !8885
  %29 = bitcast i32* %arrayidx to i8*, !dbg !8886
  %call21 = call i32 @_Py_Gid_Converter(%struct._object* %27, i8* %29), !dbg !8887
  %tobool22 = icmp ne i32 %call21, 0, !dbg !8887
  br i1 %tobool22, label %if.end.37, label %if.then.23, !dbg !8888

if.then.23:                                       ; preds = %if.else.20
  br label %do.body.24, !dbg !8889

do.body.24:                                       ; preds = %if.then.23
  %30 = bitcast %struct._object** %_py_decref_tmp25 to i8*, !dbg !8890
  call void @llvm.lifetime.start(i64 8, i8* %30) #3, !dbg !8890
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp25, metadata !2079, metadata !3844), !dbg !8892
  %31 = load %struct._object*, %struct._object** %elem, align 8, !dbg !8893, !tbaa !3867
  store %struct._object* %31, %struct._object** %_py_decref_tmp25, align 8, !dbg !8892, !tbaa !3867
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8, !dbg !8894, !tbaa !3867
  %ob_refcnt26 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0, !dbg !8896
  %33 = load i64, i64* %ob_refcnt26, align 8, !dbg !8897, !tbaa !3977
  %dec27 = add i64 %33, -1, !dbg !8897
  store i64 %dec27, i64* %ob_refcnt26, align 8, !dbg !8897, !tbaa !3977
  %cmp28 = icmp ne i64 %dec27, 0, !dbg !8898
  br i1 %cmp28, label %if.then.30, label %if.else.31, !dbg !8899

if.then.30:                                       ; preds = %do.body.24
  br label %if.end.34, !dbg !8900

if.else.31:                                       ; preds = %do.body.24
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8, !dbg !8902, !tbaa !3867
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1, !dbg !8904
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8, !dbg !8904, !tbaa !3892
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4, !dbg !8905
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8, !dbg !8905, !tbaa !3986
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8, !dbg !8906, !tbaa !3867
  call void %36(%struct._object* %37), !dbg !8907
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  %38 = bitcast %struct._object** %_py_decref_tmp25 to i8*, !dbg !8908
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !8908
  br label %do.cond.35, !dbg !8910

do.cond.35:                                       ; preds = %if.end.34
  br label %do.end.36, !dbg !8911

do.end.36:                                        ; preds = %do.cond.35
  store %struct._object* null, %struct._object** %retval, !dbg !8913
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8913

if.end.37:                                        ; preds = %if.else.20
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37
  br label %do.body.39, !dbg !8914

do.body.39:                                       ; preds = %if.end.38
  %39 = bitcast %struct._object** %_py_decref_tmp40 to i8*, !dbg !8915
  call void @llvm.lifetime.start(i64 8, i8* %39) #3, !dbg !8915
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp40, metadata !2084, metadata !3844), !dbg !8917
  %40 = load %struct._object*, %struct._object** %elem, align 8, !dbg !8918, !tbaa !3867
  store %struct._object* %40, %struct._object** %_py_decref_tmp40, align 8, !dbg !8917, !tbaa !3867
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8, !dbg !8919, !tbaa !3867
  %ob_refcnt41 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0, !dbg !8921
  %42 = load i64, i64* %ob_refcnt41, align 8, !dbg !8922, !tbaa !3977
  %dec42 = add i64 %42, -1, !dbg !8922
  store i64 %dec42, i64* %ob_refcnt41, align 8, !dbg !8922, !tbaa !3977
  %cmp43 = icmp ne i64 %dec42, 0, !dbg !8923
  br i1 %cmp43, label %if.then.45, label %if.else.46, !dbg !8924

if.then.45:                                       ; preds = %do.body.39
  br label %if.end.49, !dbg !8925

if.else.46:                                       ; preds = %do.body.39
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8, !dbg !8927, !tbaa !3867
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1, !dbg !8929
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8, !dbg !8929, !tbaa !3892
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4, !dbg !8930
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8, !dbg !8930, !tbaa !3986
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8, !dbg !8931, !tbaa !3867
  call void %45(%struct._object* %46), !dbg !8932
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  %47 = bitcast %struct._object** %_py_decref_tmp40 to i8*, !dbg !8933
  call void @llvm.lifetime.end(i64 8, i8* %47) #3, !dbg !8933
  br label %do.cond.50, !dbg !8935

do.cond.50:                                       ; preds = %if.end.49
  br label %do.end.51, !dbg !8936

do.end.51:                                        ; preds = %do.cond.50
  store i32 0, i32* %cleanup.dest.slot, !dbg !8938
  br label %cleanup, !dbg !8938

cleanup:                                          ; preds = %do.end.51, %do.end.36, %do.end, %if.then.10
  %48 = bitcast %struct._object** %elem to i8*, !dbg !8939
  call void @llvm.lifetime.end(i64 8, i8* %48) #3, !dbg !8939
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %for.inc, !dbg !8940

for.inc:                                          ; preds = %cleanup.cont
  %49 = load i32, i32* %i, align 4, !dbg !8941, !tbaa !3840
  %inc = add i32 %49, 1, !dbg !8941
  store i32 %inc, i32* %i, align 4, !dbg !8941, !tbaa !3840
  br label %for.cond, !dbg !8942

for.end:                                          ; preds = %for.cond
  %50 = load i32, i32* %len, align 4, !dbg !8943, !tbaa !3840
  %conv52 = sext i32 %50 to i64, !dbg !8943
  %arraydecay = getelementptr inbounds [65536 x i32], [65536 x i32]* %grouplist, i32 0, i32 0, !dbg !8945
  %call53 = call i32 @setgroups(i64 %conv52, i32* %arraydecay) #3, !dbg !8946
  %cmp54 = icmp slt i32 %call53, 0, !dbg !8947
  br i1 %cmp54, label %if.then.56, label %if.end.58, !dbg !8948

if.then.56:                                       ; preds = %for.end
  %call57 = call %struct._object* @posix_error(), !dbg !8949
  store %struct._object* %call57, %struct._object** %retval, !dbg !8950
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.60, !dbg !8950

if.end.58:                                        ; preds = %for.end
  %51 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8951, !tbaa !3977
  %inc59 = add i64 %51, 1, !dbg !8951
  store i64 %inc59, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8951, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !8952
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.60, !dbg !8952

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.60

cleanup.60:                                       ; preds = %NewDefault, %if.end.58, %if.then.56, %if.then.3, %if.then
  %52 = bitcast [65536 x i32]* %grouplist to i8*, !dbg !8953
  call void @llvm.lifetime.end(i64 262144, i8* %52) #3, !dbg !8953
  %53 = bitcast i32* %len to i8*, !dbg !8953
  call void @llvm.lifetime.end(i64 4, i8* %53) #3, !dbg !8953
  %54 = bitcast i32* %i to i8*, !dbg !8953
  call void @llvm.lifetime.end(i64 4, i8* %54) #3, !dbg !8953
  %55 = load %struct._object*, %struct._object** %retval, !dbg !8953
  ret %struct._object* %55, !dbg !8953
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_initgroups(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %oname = alloca %struct._object*, align 8
  %username = alloca i8*, align 8
  %res = alloca i32, align 4
  %gid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2088, metadata !3844), !dbg !8954
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2089, metadata !3844), !dbg !8955
  %0 = bitcast %struct._object** %oname to i8*, !dbg !8956
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8956
  call void @llvm.dbg.declare(metadata %struct._object** %oname, metadata !2090, metadata !3844), !dbg !8957
  %1 = bitcast i8** %username to i8*, !dbg !8958
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !8958
  call void @llvm.dbg.declare(metadata i8** %username, metadata !2091, metadata !3844), !dbg !8959
  %2 = bitcast i32* %res to i8*, !dbg !8960
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !8960
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2092, metadata !3844), !dbg !8961
  %3 = bitcast i32* %gid to i8*, !dbg !8962
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !8962
  call void @llvm.dbg.declare(metadata i32* %gid, metadata !2093, metadata !3844), !dbg !8963
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8964, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.269, i32 0, i32 0), i32 (%struct._object*, i8*)* @PyUnicode_FSConverter, %struct._object** %oname, i32 (%struct._object*, i8*)* @_Py_Gid_Converter, i32* %gid), !dbg !8966
  %tobool = icmp ne i32 %call, 0, !dbg !8966
  br i1 %tobool, label %if.end, label %if.then, !dbg !8967

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8968
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8968

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %oname, align 8, !dbg !8969, !tbaa !3867
  %6 = bitcast %struct._object* %5 to %struct.PyBytesObject*, !dbg !8970
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %6, i32 0, i32 2, !dbg !8971
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !8972
  store i8* %arraydecay, i8** %username, align 8, !dbg !8973, !tbaa !3867
  %7 = load i8*, i8** %username, align 8, !dbg !8974, !tbaa !3867
  %8 = load i32, i32* %gid, align 4, !dbg !8975, !tbaa !3840
  %call1 = call i32 @initgroups(i8* %7, i32 %8), !dbg !8976
  store i32 %call1, i32* %res, align 4, !dbg !8977, !tbaa !3840
  br label %do.body, !dbg !8978

do.body:                                          ; preds = %if.end
  %9 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8979
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !8979
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !2094, metadata !3844), !dbg !8981
  %10 = load %struct._object*, %struct._object** %oname, align 8, !dbg !8982, !tbaa !3867
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8, !dbg !8981, !tbaa !3867
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8983, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0, !dbg !8985
  %12 = load i64, i64* %ob_refcnt, align 8, !dbg !8986, !tbaa !3977
  %dec = add i64 %12, -1, !dbg !8986
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !8986, !tbaa !3977
  %cmp = icmp ne i64 %dec, 0, !dbg !8987
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !8988

if.then.2:                                        ; preds = %do.body
  br label %if.end.3, !dbg !8989

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8991, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1, !dbg !8993
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8993, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4, !dbg !8994
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !8994, !tbaa !3986
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8995, !tbaa !3867
  call void %15(%struct._object* %16), !dbg !8996
  br label %if.end.3

if.end.3:                                         ; preds = %if.else, %if.then.2
  %17 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8997
  call void @llvm.lifetime.end(i64 8, i8* %17) #3, !dbg !8997
  br label %do.cond, !dbg !8999

do.cond:                                          ; preds = %if.end.3
  br label %do.end, !dbg !9000

do.end:                                           ; preds = %do.cond
  %18 = load i32, i32* %res, align 4, !dbg !9002, !tbaa !3840
  %cmp4 = icmp eq i32 %18, -1, !dbg !9004
  br i1 %cmp4, label %if.then.5, label %if.end.7, !dbg !9005

if.then.5:                                        ; preds = %do.end
  %19 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !9006, !tbaa !3867
  %call6 = call %struct._object* @PyErr_SetFromErrno(%struct._object* %19), !dbg !9007
  store %struct._object* %call6, %struct._object** %retval, !dbg !9008
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9008

if.end.7:                                         ; preds = %do.end
  %20 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9009, !tbaa !3977
  %inc = add i64 %20, 1, !dbg !9009
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9009, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !9010
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9010

cleanup:                                          ; preds = %if.end.7, %if.then.5, %if.then
  %21 = bitcast i32* %gid to i8*, !dbg !9011
  call void @llvm.lifetime.end(i64 4, i8* %21) #3, !dbg !9011
  %22 = bitcast i32* %res to i8*, !dbg !9011
  call void @llvm.lifetime.end(i64 4, i8* %22) #3, !dbg !9011
  %23 = bitcast i8** %username to i8*, !dbg !9011
  call void @llvm.lifetime.end(i64 8, i8* %23) #3, !dbg !9011
  %24 = bitcast %struct._object** %oname to i8*, !dbg !9011
  call void @llvm.lifetime.end(i64 8, i8* %24) #3, !dbg !9011
  %25 = load %struct._object*, %struct._object** %retval, !dbg !9011
  ret %struct._object* %25, !dbg !9011
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getpgid(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %pgid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2098, metadata !3844), !dbg !9012
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2099, metadata !3844), !dbg !9013
  %0 = bitcast i32* %pid to i8*, !dbg !9014
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9014
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !2100, metadata !3844), !dbg !9015
  %1 = bitcast i32* %pgid to i8*, !dbg !9014
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9014
  call void @llvm.dbg.declare(metadata i32* %pgid, metadata !2101, metadata !3844), !dbg !9016
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9017, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.270, i32 0, i32 0), i32* %pid), !dbg !9019
  %tobool = icmp ne i32 %call, 0, !dbg !9019
  br i1 %tobool, label %if.end, label %if.then, !dbg !9020

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9021
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9021

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %pid, align 4, !dbg !9022, !tbaa !3840
  %call1 = call i32 @getpgid(i32 %3) #3, !dbg !9023
  store i32 %call1, i32* %pgid, align 4, !dbg !9024, !tbaa !3840
  %4 = load i32, i32* %pgid, align 4, !dbg !9025, !tbaa !3840
  %cmp = icmp slt i32 %4, 0, !dbg !9027
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !9028

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !9029
  store %struct._object* %call3, %struct._object** %retval, !dbg !9030
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9030

if.end.4:                                         ; preds = %if.end
  %5 = load i32, i32* %pgid, align 4, !dbg !9031, !tbaa !3840
  %conv = sext i32 %5 to i64, !dbg !9031
  %call5 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !9032
  store %struct._object* %call5, %struct._object** %retval, !dbg !9033
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9033

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %6 = bitcast i32* %pgid to i8*, !dbg !9034
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !9034
  %7 = bitcast i32* %pid to i8*, !dbg !9034
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !9034
  %8 = load %struct._object*, %struct._object** %retval, !dbg !9034
  ret %struct._object* %8, !dbg !9034
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_setpgrp(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2104, metadata !3844), !dbg !9035
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !2105, metadata !3844), !dbg !9036
  %call = call i32 @setpgrp() #3, !dbg !9037
  %cmp = icmp slt i32 %call, 0, !dbg !9039
  br i1 %cmp, label %if.then, label %if.end, !dbg !9040

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @posix_error(), !dbg !9041
  store %struct._object* %call1, %struct._object** %retval, !dbg !9042
  br label %return, !dbg !9042

if.end:                                           ; preds = %entry
  %0 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9043, !tbaa !3977
  %inc = add i64 %0, 1, !dbg !9043
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9043, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !9044
  br label %return, !dbg !9044

return:                                           ; preds = %if.end, %if.then
  %1 = load %struct._object*, %struct._object** %retval, !dbg !9045
  ret %struct._object* %1, !dbg !9045
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_wait(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %status = alloca i32, align 4
  %_save = alloca %struct._ts*, align 8
  %agg.tmp = alloca %union.__WAIT_STATUS, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2108, metadata !3844), !dbg !9046
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !2109, metadata !3844), !dbg !9047
  %0 = bitcast i32* %pid to i8*, !dbg !9048
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9048
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !2110, metadata !3844), !dbg !9049
  %1 = bitcast i32* %status to i8*, !dbg !9050
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9050
  call void @llvm.dbg.declare(metadata i32* %status, metadata !2111, metadata !3844), !dbg !9051
  store i32 0, i32* %status, align 4, !dbg !9052, !tbaa !3840
  %2 = bitcast %struct._ts** %_save to i8*, !dbg !9053
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !9053
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2112, metadata !3844), !dbg !9054
  %call = call %struct._ts* @PyEval_SaveThread(), !dbg !9055
  store %struct._ts* %call, %struct._ts** %_save, align 8, !dbg !9056, !tbaa !3867
  %__iptr = bitcast %union.__WAIT_STATUS* %agg.tmp to i32**, !dbg !9057
  store i32* %status, i32** %__iptr, align 8, !dbg !9057, !tbaa !3867
  %coerce.dive = getelementptr %union.__WAIT_STATUS, %union.__WAIT_STATUS* %agg.tmp, i32 0, i32 0, !dbg !9058
  %3 = load %union.wait*, %union.wait** %coerce.dive, align 8, !dbg !9058
  %call1 = call i32 @wait(%union.wait* %3), !dbg !9058
  store i32 %call1, i32* %pid, align 4, !dbg !9059, !tbaa !3840
  %4 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9060, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %4), !dbg !9061
  %5 = bitcast %struct._ts** %_save to i8*, !dbg !9062
  call void @llvm.lifetime.end(i64 8, i8* %5) #3, !dbg !9062
  %6 = load i32, i32* %pid, align 4, !dbg !9063, !tbaa !3840
  %cmp = icmp eq i32 %6, -1, !dbg !9065
  br i1 %cmp, label %if.then, label %if.end, !dbg !9066

if.then:                                          ; preds = %entry
  %call2 = call %struct._object* @posix_error(), !dbg !9067
  store %struct._object* %call2, %struct._object** %retval, !dbg !9068
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9068

if.end:                                           ; preds = %entry
  %7 = load i32, i32* %pid, align 4, !dbg !9069, !tbaa !3840
  %conv = sext i32 %7 to i64, !dbg !9069
  %call3 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !9070
  %8 = load i32, i32* %status, align 4, !dbg !9071, !tbaa !3840
  %call4 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.271, i32 0, i32 0), %struct._object* %call3, i32 %8), !dbg !9072
  store %struct._object* %call4, %struct._object** %retval, !dbg !9073
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9073

cleanup:                                          ; preds = %if.end, %if.then
  %9 = bitcast i32* %status to i8*, !dbg !9074
  call void @llvm.lifetime.end(i64 4, i8* %9) #3, !dbg !9074
  %10 = bitcast i32* %pid to i8*, !dbg !9074
  call void @llvm.lifetime.end(i64 4, i8* %10) #3, !dbg !9074
  %11 = load %struct._object*, %struct._object** %retval, !dbg !9074
  ret %struct._object* %11, !dbg !9074
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_wait3(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %options = alloca i32, align 4
  %ru = alloca %struct.rusage, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %agg.tmp = alloca %union.__WAIT_STATUS, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2116, metadata !3844), !dbg !9075
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2117, metadata !3844), !dbg !9076
  %0 = bitcast i32* %pid to i8*, !dbg !9077
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9077
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !2118, metadata !3844), !dbg !9078
  %1 = bitcast i32* %options to i8*, !dbg !9079
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9079
  call void @llvm.dbg.declare(metadata i32* %options, metadata !2119, metadata !3844), !dbg !9080
  %2 = bitcast %struct.rusage* %ru to i8*, !dbg !9081
  call void @llvm.lifetime.start(i64 144, i8* %2) #3, !dbg !9081
  call void @llvm.dbg.declare(metadata %struct.rusage* %ru, metadata !2120, metadata !3844), !dbg !9082
  %3 = bitcast i32* %status to i8*, !dbg !9083
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !9083
  call void @llvm.dbg.declare(metadata i32* %status, metadata !2201, metadata !3844), !dbg !9084
  store i32 0, i32* %status, align 4, !dbg !9085, !tbaa !3840
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9086, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.272, i32 0, i32 0), i32* %options), !dbg !9088
  %tobool = icmp ne i32 %call, 0, !dbg !9088
  br i1 %tobool, label %if.end, label %if.then, !dbg !9089

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9090
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9090

if.end:                                           ; preds = %entry
  %5 = bitcast %struct._ts** %_save to i8*, !dbg !9091
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !9091
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2202, metadata !3844), !dbg !9092
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !9093
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !9094, !tbaa !3867
  %__iptr = bitcast %union.__WAIT_STATUS* %agg.tmp to i32**, !dbg !9095
  store i32* %status, i32** %__iptr, align 8, !dbg !9095, !tbaa !3867
  %6 = load i32, i32* %options, align 4, !dbg !9096, !tbaa !3840
  %coerce.dive = getelementptr %union.__WAIT_STATUS, %union.__WAIT_STATUS* %agg.tmp, i32 0, i32 0, !dbg !9097
  %7 = load %union.wait*, %union.wait** %coerce.dive, align 8, !dbg !9097
  %call2 = call i32 @wait3(%union.wait* %7, i32 %6, %struct.rusage* %ru) #3, !dbg !9097
  store i32 %call2, i32* %pid, align 4, !dbg !9098, !tbaa !3840
  %8 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9099, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %8), !dbg !9100
  %9 = bitcast %struct._ts** %_save to i8*, !dbg !9101
  call void @llvm.lifetime.end(i64 8, i8* %9) #3, !dbg !9101
  %10 = load i32, i32* %pid, align 4, !dbg !9102, !tbaa !3840
  %11 = load i32, i32* %status, align 4, !dbg !9103, !tbaa !3840
  %call3 = call %struct._object* @wait_helper(i32 %10, i32 %11, %struct.rusage* %ru), !dbg !9104
  store %struct._object* %call3, %struct._object** %retval, !dbg !9105
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9105

cleanup:                                          ; preds = %if.end, %if.then
  %12 = bitcast i32* %status to i8*, !dbg !9106
  call void @llvm.lifetime.end(i64 4, i8* %12) #3, !dbg !9106
  %13 = bitcast %struct.rusage* %ru to i8*, !dbg !9106
  call void @llvm.lifetime.end(i64 144, i8* %13) #3, !dbg !9106
  %14 = bitcast i32* %options to i8*, !dbg !9106
  call void @llvm.lifetime.end(i64 4, i8* %14) #3, !dbg !9106
  %15 = bitcast i32* %pid to i8*, !dbg !9106
  call void @llvm.lifetime.end(i64 4, i8* %15) #3, !dbg !9106
  %16 = load %struct._object*, %struct._object** %retval, !dbg !9106
  ret %struct._object* %16, !dbg !9106
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_wait4(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %options = alloca i32, align 4
  %ru = alloca %struct.rusage, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %agg.tmp = alloca %union.__WAIT_STATUS, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2224, metadata !3844), !dbg !9107
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2225, metadata !3844), !dbg !9108
  %0 = bitcast i32* %pid to i8*, !dbg !9109
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9109
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !2226, metadata !3844), !dbg !9110
  %1 = bitcast i32* %options to i8*, !dbg !9111
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9111
  call void @llvm.dbg.declare(metadata i32* %options, metadata !2227, metadata !3844), !dbg !9112
  %2 = bitcast %struct.rusage* %ru to i8*, !dbg !9113
  call void @llvm.lifetime.start(i64 144, i8* %2) #3, !dbg !9113
  call void @llvm.dbg.declare(metadata %struct.rusage* %ru, metadata !2228, metadata !3844), !dbg !9114
  %3 = bitcast i32* %status to i8*, !dbg !9115
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !9115
  call void @llvm.dbg.declare(metadata i32* %status, metadata !2229, metadata !3844), !dbg !9116
  store i32 0, i32* %status, align 4, !dbg !9117, !tbaa !3840
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9118, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.276, i32 0, i32 0), i32* %pid, i32* %options), !dbg !9120
  %tobool = icmp ne i32 %call, 0, !dbg !9120
  br i1 %tobool, label %if.end, label %if.then, !dbg !9121

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9122
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9122

if.end:                                           ; preds = %entry
  %5 = bitcast %struct._ts** %_save to i8*, !dbg !9123
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !9123
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2230, metadata !3844), !dbg !9124
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !9125
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !9126, !tbaa !3867
  %6 = load i32, i32* %pid, align 4, !dbg !9127, !tbaa !3840
  %__iptr = bitcast %union.__WAIT_STATUS* %agg.tmp to i32**, !dbg !9128
  store i32* %status, i32** %__iptr, align 8, !dbg !9128, !tbaa !3867
  %7 = load i32, i32* %options, align 4, !dbg !9129, !tbaa !3840
  %coerce.dive = getelementptr %union.__WAIT_STATUS, %union.__WAIT_STATUS* %agg.tmp, i32 0, i32 0, !dbg !9130
  %8 = load %union.wait*, %union.wait** %coerce.dive, align 8, !dbg !9130
  %call2 = call i32 @wait4(i32 %6, %union.wait* %8, i32 %7, %struct.rusage* %ru) #3, !dbg !9130
  store i32 %call2, i32* %pid, align 4, !dbg !9131, !tbaa !3840
  %9 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9132, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %9), !dbg !9133
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !9134
  call void @llvm.lifetime.end(i64 8, i8* %10) #3, !dbg !9134
  %11 = load i32, i32* %pid, align 4, !dbg !9135, !tbaa !3840
  %12 = load i32, i32* %status, align 4, !dbg !9136, !tbaa !3840
  %call3 = call %struct._object* @wait_helper(i32 %11, i32 %12, %struct.rusage* %ru), !dbg !9137
  store %struct._object* %call3, %struct._object** %retval, !dbg !9138
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9138

cleanup:                                          ; preds = %if.end, %if.then
  %13 = bitcast i32* %status to i8*, !dbg !9139
  call void @llvm.lifetime.end(i64 4, i8* %13) #3, !dbg !9139
  %14 = bitcast %struct.rusage* %ru to i8*, !dbg !9139
  call void @llvm.lifetime.end(i64 144, i8* %14) #3, !dbg !9139
  %15 = bitcast i32* %options to i8*, !dbg !9139
  call void @llvm.lifetime.end(i64 4, i8* %15) #3, !dbg !9139
  %16 = bitcast i32* %pid to i8*, !dbg !9139
  call void @llvm.lifetime.end(i64 4, i8* %16) #3, !dbg !9139
  %17 = load %struct._object*, %struct._object** %retval, !dbg !9139
  ret %struct._object* %17, !dbg !9139
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_waitid(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %idtype = alloca i32, align 4
  %id = alloca i32, align 4
  %options = alloca i32, align 4
  %res = alloca i32, align 4
  %si = alloca %struct.siginfo_t, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2234, metadata !3844), !dbg !9140
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2235, metadata !3844), !dbg !9141
  %0 = bitcast %struct._object** %result to i8*, !dbg !9142
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !9142
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !2236, metadata !3844), !dbg !9143
  %1 = bitcast i32* %idtype to i8*, !dbg !9144
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9144
  call void @llvm.dbg.declare(metadata i32* %idtype, metadata !2237, metadata !3844), !dbg !9145
  %2 = bitcast i32* %id to i8*, !dbg !9146
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !9146
  call void @llvm.dbg.declare(metadata i32* %id, metadata !2239, metadata !3844), !dbg !9147
  %3 = bitcast i32* %options to i8*, !dbg !9148
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !9148
  call void @llvm.dbg.declare(metadata i32* %options, metadata !2242, metadata !3844), !dbg !9149
  %4 = bitcast i32* %res to i8*, !dbg !9148
  call void @llvm.lifetime.start(i64 4, i8* %4) #3, !dbg !9148
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2243, metadata !3844), !dbg !9150
  %5 = bitcast %struct.siginfo_t* %si to i8*, !dbg !9151
  call void @llvm.lifetime.start(i64 128, i8* %5) #3, !dbg !9151
  call void @llvm.dbg.declare(metadata %struct.siginfo_t* %si, metadata !2244, metadata !3844), !dbg !9152
  %_sifields = getelementptr inbounds %struct.siginfo_t, %struct.siginfo_t* %si, i32 0, i32 3, !dbg !9153
  %_kill = bitcast %union.anon.14* %_sifields to %struct.anon.15*, !dbg !9154
  %si_pid = getelementptr inbounds %struct.anon.15, %struct.anon.15* %_kill, i32 0, i32 0, !dbg !9155
  store i32 0, i32* %si_pid, align 4, !dbg !9156, !tbaa !9157
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9159, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.277, i32 0, i32 0), i32* %idtype, i32* %id, i32* %options), !dbg !9161
  %tobool = icmp ne i32 %call, 0, !dbg !9161
  br i1 %tobool, label %if.end, label %if.then, !dbg !9162

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9163
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9163

if.end:                                           ; preds = %entry
  %7 = bitcast %struct._ts** %_save to i8*, !dbg !9164
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !9164
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2304, metadata !3844), !dbg !9165
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !9166
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !9167, !tbaa !3867
  %8 = load i32, i32* %idtype, align 4, !dbg !9168, !tbaa !9169
  %9 = load i32, i32* %id, align 4, !dbg !9170, !tbaa !3840
  %10 = load i32, i32* %options, align 4, !dbg !9171, !tbaa !3840
  %call2 = call i32 @waitid(i32 %8, i32 %9, %struct.siginfo_t* %si, i32 %10), !dbg !9172
  store i32 %call2, i32* %res, align 4, !dbg !9173, !tbaa !3840
  %11 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9174, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %11), !dbg !9175
  %12 = bitcast %struct._ts** %_save to i8*, !dbg !9176
  call void @llvm.lifetime.end(i64 8, i8* %12) #3, !dbg !9176
  %13 = load i32, i32* %res, align 4, !dbg !9177, !tbaa !3840
  %cmp = icmp eq i32 %13, -1, !dbg !9179
  br i1 %cmp, label %if.then.3, label %if.end.5, !dbg !9180

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !9181
  store %struct._object* %call4, %struct._object** %retval, !dbg !9182
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9182

if.end.5:                                         ; preds = %if.end
  %_sifields6 = getelementptr inbounds %struct.siginfo_t, %struct.siginfo_t* %si, i32 0, i32 3, !dbg !9183
  %_kill7 = bitcast %union.anon.14* %_sifields6 to %struct.anon.15*, !dbg !9185
  %si_pid8 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %_kill7, i32 0, i32 0, !dbg !9186
  %14 = load i32, i32* %si_pid8, align 4, !dbg !9186, !tbaa !9157
  %cmp9 = icmp eq i32 %14, 0, !dbg !9187
  br i1 %cmp9, label %if.then.10, label %if.end.11, !dbg !9188

if.then.10:                                       ; preds = %if.end.5
  %15 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9189, !tbaa !3977
  %inc = add i64 %15, 1, !dbg !9189
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9189, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !9190
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9190

if.end.11:                                        ; preds = %if.end.5
  %call12 = call %struct._object* @PyStructSequence_New(%struct._typeobject* @WaitidResultType), !dbg !9191
  store %struct._object* %call12, %struct._object** %result, align 8, !dbg !9192, !tbaa !3867
  %16 = load %struct._object*, %struct._object** %result, align 8, !dbg !9193, !tbaa !3867
  %tobool13 = icmp ne %struct._object* %16, null, !dbg !9193
  br i1 %tobool13, label %if.end.15, label %if.then.14, !dbg !9195

if.then.14:                                       ; preds = %if.end.11
  store %struct._object* null, %struct._object** %retval, !dbg !9196
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9196

if.end.15:                                        ; preds = %if.end.11
  %_sifields16 = getelementptr inbounds %struct.siginfo_t, %struct.siginfo_t* %si, i32 0, i32 3, !dbg !9197
  %_kill17 = bitcast %union.anon.14* %_sifields16 to %struct.anon.15*, !dbg !9198
  %si_pid18 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %_kill17, i32 0, i32 0, !dbg !9199
  %17 = load i32, i32* %si_pid18, align 4, !dbg !9199, !tbaa !9157
  %conv = sext i32 %17 to i64, !dbg !9200
  %call19 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !9201
  %18 = load %struct._object*, %struct._object** %result, align 8, !dbg !9202, !tbaa !3867
  %19 = bitcast %struct._object* %18 to %struct.PyTupleObject*, !dbg !9203
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %19, i32 0, i32 1, !dbg !9204
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !9205
  store %struct._object* %call19, %struct._object** %arrayidx, align 8, !dbg !9206, !tbaa !3867
  %_sifields20 = getelementptr inbounds %struct.siginfo_t, %struct.siginfo_t* %si, i32 0, i32 3, !dbg !9207
  %_kill21 = bitcast %union.anon.14* %_sifields20 to %struct.anon.15*, !dbg !9208
  %si_uid = getelementptr inbounds %struct.anon.15, %struct.anon.15* %_kill21, i32 0, i32 1, !dbg !9209
  %20 = load i32, i32* %si_uid, align 4, !dbg !9209, !tbaa !9210
  %call22 = call %struct._object* @_PyLong_FromUid(i32 %20), !dbg !9211
  %21 = load %struct._object*, %struct._object** %result, align 8, !dbg !9212, !tbaa !3867
  %22 = bitcast %struct._object* %21 to %struct.PyTupleObject*, !dbg !9213
  %ob_item23 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %22, i32 0, i32 1, !dbg !9214
  %arrayidx24 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item23, i32 0, i64 1, !dbg !9215
  store %struct._object* %call22, %struct._object** %arrayidx24, align 8, !dbg !9216, !tbaa !3867
  %si_signo = getelementptr inbounds %struct.siginfo_t, %struct.siginfo_t* %si, i32 0, i32 0, !dbg !9217
  %23 = load i32, i32* %si_signo, align 4, !dbg !9217, !tbaa !9218
  %conv25 = sext i32 %23 to i64, !dbg !9220
  %call26 = call %struct._object* @PyLong_FromLong(i64 %conv25), !dbg !9221
  %24 = load %struct._object*, %struct._object** %result, align 8, !dbg !9222, !tbaa !3867
  %25 = bitcast %struct._object* %24 to %struct.PyTupleObject*, !dbg !9223
  %ob_item27 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %25, i32 0, i32 1, !dbg !9224
  %arrayidx28 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item27, i32 0, i64 2, !dbg !9225
  store %struct._object* %call26, %struct._object** %arrayidx28, align 8, !dbg !9226, !tbaa !3867
  %_sifields29 = getelementptr inbounds %struct.siginfo_t, %struct.siginfo_t* %si, i32 0, i32 3, !dbg !9227
  %_sigchld = bitcast %union.anon.14* %_sifields29 to %struct.anon.18*, !dbg !9228
  %si_status = getelementptr inbounds %struct.anon.18, %struct.anon.18* %_sigchld, i32 0, i32 2, !dbg !9229
  %26 = load i32, i32* %si_status, align 4, !dbg !9229, !tbaa !9230
  %conv30 = sext i32 %26 to i64, !dbg !9232
  %call31 = call %struct._object* @PyLong_FromLong(i64 %conv30), !dbg !9233
  %27 = load %struct._object*, %struct._object** %result, align 8, !dbg !9234, !tbaa !3867
  %28 = bitcast %struct._object* %27 to %struct.PyTupleObject*, !dbg !9235
  %ob_item32 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %28, i32 0, i32 1, !dbg !9236
  %arrayidx33 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item32, i32 0, i64 3, !dbg !9237
  store %struct._object* %call31, %struct._object** %arrayidx33, align 8, !dbg !9238, !tbaa !3867
  %si_code = getelementptr inbounds %struct.siginfo_t, %struct.siginfo_t* %si, i32 0, i32 2, !dbg !9239
  %29 = load i32, i32* %si_code, align 4, !dbg !9239, !tbaa !9240
  %conv34 = sext i32 %29 to i64, !dbg !9241
  %call35 = call %struct._object* @PyLong_FromLong(i64 %conv34), !dbg !9242
  %30 = load %struct._object*, %struct._object** %result, align 8, !dbg !9243, !tbaa !3867
  %31 = bitcast %struct._object* %30 to %struct.PyTupleObject*, !dbg !9244
  %ob_item36 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %31, i32 0, i32 1, !dbg !9245
  %arrayidx37 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item36, i32 0, i64 4, !dbg !9246
  store %struct._object* %call35, %struct._object** %arrayidx37, align 8, !dbg !9247, !tbaa !3867
  %call38 = call %struct._object* @PyErr_Occurred(), !dbg !9248
  %tobool39 = icmp ne %struct._object* %call38, null, !dbg !9248
  br i1 %tobool39, label %if.then.40, label %if.end.45, !dbg !9249

if.then.40:                                       ; preds = %if.end.15
  br label %do.body, !dbg !9250

do.body:                                          ; preds = %if.then.40
  %32 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9251
  call void @llvm.lifetime.start(i64 8, i8* %32) #3, !dbg !9251
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !2306, metadata !3844), !dbg !9253
  %33 = load %struct._object*, %struct._object** %result, align 8, !dbg !9254, !tbaa !3867
  store %struct._object* %33, %struct._object** %_py_decref_tmp, align 8, !dbg !9253, !tbaa !3867
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9255, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 0, !dbg !9257
  %35 = load i64, i64* %ob_refcnt, align 8, !dbg !9258, !tbaa !3977
  %dec = add i64 %35, -1, !dbg !9258
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !9258, !tbaa !3977
  %cmp41 = icmp ne i64 %dec, 0, !dbg !9259
  br i1 %cmp41, label %if.then.43, label %if.else, !dbg !9260

if.then.43:                                       ; preds = %do.body
  br label %if.end.44, !dbg !9261

if.else:                                          ; preds = %do.body
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9263, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1, !dbg !9265
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9265, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 4, !dbg !9266
  %38 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !9266, !tbaa !3986
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9267, !tbaa !3867
  call void %38(%struct._object* %39), !dbg !9268
  br label %if.end.44

if.end.44:                                        ; preds = %if.else, %if.then.43
  %40 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9269
  call void @llvm.lifetime.end(i64 8, i8* %40) #3, !dbg !9269
  br label %do.cond, !dbg !9271

do.cond:                                          ; preds = %if.end.44
  br label %do.end, !dbg !9272

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !9274
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9274

if.end.45:                                        ; preds = %if.end.15
  %41 = load %struct._object*, %struct._object** %result, align 8, !dbg !9275, !tbaa !3867
  store %struct._object* %41, %struct._object** %retval, !dbg !9276
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9276

cleanup:                                          ; preds = %if.end.45, %do.end, %if.then.14, %if.then.10, %if.then.3, %if.then
  %42 = bitcast %struct.siginfo_t* %si to i8*, !dbg !9277
  call void @llvm.lifetime.end(i64 128, i8* %42) #3, !dbg !9277
  %43 = bitcast i32* %res to i8*, !dbg !9277
  call void @llvm.lifetime.end(i64 4, i8* %43) #3, !dbg !9277
  %44 = bitcast i32* %options to i8*, !dbg !9277
  call void @llvm.lifetime.end(i64 4, i8* %44) #3, !dbg !9277
  %45 = bitcast i32* %id to i8*, !dbg !9277
  call void @llvm.lifetime.end(i64 4, i8* %45) #3, !dbg !9277
  %46 = bitcast i32* %idtype to i8*, !dbg !9277
  call void @llvm.lifetime.end(i64 4, i8* %46) #3, !dbg !9277
  %47 = bitcast %struct._object** %result to i8*, !dbg !9277
  call void @llvm.lifetime.end(i64 8, i8* %47) #3, !dbg !9277
  %48 = load %struct._object*, %struct._object** %retval, !dbg !9277
  ret %struct._object* %48, !dbg !9277
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_waitpid(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %options = alloca i32, align 4
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2312, metadata !3844), !dbg !9278
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2313, metadata !3844), !dbg !9279
  %0 = bitcast i32* %pid to i8*, !dbg !9280
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9280
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !2314, metadata !3844), !dbg !9281
  %1 = bitcast i32* %options to i8*, !dbg !9282
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9282
  call void @llvm.dbg.declare(metadata i32* %options, metadata !2315, metadata !3844), !dbg !9283
  %2 = bitcast i32* %status to i8*, !dbg !9284
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !9284
  call void @llvm.dbg.declare(metadata i32* %status, metadata !2316, metadata !3844), !dbg !9285
  store i32 0, i32* %status, align 4, !dbg !9286, !tbaa !3840
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9287, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.278, i32 0, i32 0), i32* %pid, i32* %options), !dbg !9289
  %tobool = icmp ne i32 %call, 0, !dbg !9289
  br i1 %tobool, label %if.end, label %if.then, !dbg !9290

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9291
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9291

if.end:                                           ; preds = %entry
  %4 = bitcast %struct._ts** %_save to i8*, !dbg !9292
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !9292
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2317, metadata !3844), !dbg !9293
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !9294
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !9295, !tbaa !3867
  %5 = load i32, i32* %pid, align 4, !dbg !9296, !tbaa !3840
  %6 = load i32, i32* %options, align 4, !dbg !9297, !tbaa !3840
  %call2 = call i32 @waitpid(i32 %5, i32* %status, i32 %6), !dbg !9298
  store i32 %call2, i32* %pid, align 4, !dbg !9299, !tbaa !3840
  %7 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9300, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %7), !dbg !9301
  %8 = bitcast %struct._ts** %_save to i8*, !dbg !9302
  call void @llvm.lifetime.end(i64 8, i8* %8) #3, !dbg !9302
  %9 = load i32, i32* %pid, align 4, !dbg !9303, !tbaa !3840
  %cmp = icmp eq i32 %9, -1, !dbg !9305
  br i1 %cmp, label %if.then.3, label %if.end.5, !dbg !9306

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !9307
  store %struct._object* %call4, %struct._object** %retval, !dbg !9308
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9308

if.end.5:                                         ; preds = %if.end
  %10 = load i32, i32* %pid, align 4, !dbg !9309, !tbaa !3840
  %conv = sext i32 %10 to i64, !dbg !9309
  %call6 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !9310
  %11 = load i32, i32* %status, align 4, !dbg !9311, !tbaa !3840
  %call7 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.271, i32 0, i32 0), %struct._object* %call6, i32 %11), !dbg !9312
  store %struct._object* %call7, %struct._object** %retval, !dbg !9313
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9313

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %12 = bitcast i32* %status to i8*, !dbg !9314
  call void @llvm.lifetime.end(i64 4, i8* %12) #3, !dbg !9314
  %13 = bitcast i32* %options to i8*, !dbg !9314
  call void @llvm.lifetime.end(i64 4, i8* %13) #3, !dbg !9314
  %14 = bitcast i32* %pid to i8*, !dbg !9314
  call void @llvm.lifetime.end(i64 4, i8* %14) #3, !dbg !9314
  %15 = load %struct._object*, %struct._object** %retval, !dbg !9314
  ret %struct._object* %15, !dbg !9314
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getsid(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %sid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2321, metadata !3844), !dbg !9315
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2322, metadata !3844), !dbg !9316
  %0 = bitcast i32* %pid to i8*, !dbg !9317
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9317
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !2323, metadata !3844), !dbg !9318
  %1 = bitcast i32* %sid to i8*, !dbg !9319
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9319
  call void @llvm.dbg.declare(metadata i32* %sid, metadata !2324, metadata !3844), !dbg !9320
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9321, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.279, i32 0, i32 0), i32* %pid), !dbg !9323
  %tobool = icmp ne i32 %call, 0, !dbg !9323
  br i1 %tobool, label %if.end, label %if.then, !dbg !9324

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9325
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9325

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %pid, align 4, !dbg !9326, !tbaa !3840
  %call1 = call i32 @getsid(i32 %3) #3, !dbg !9327
  store i32 %call1, i32* %sid, align 4, !dbg !9328, !tbaa !3840
  %4 = load i32, i32* %sid, align 4, !dbg !9329, !tbaa !3840
  %cmp = icmp slt i32 %4, 0, !dbg !9331
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !9332

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !9333
  store %struct._object* %call3, %struct._object** %retval, !dbg !9334
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9334

if.end.4:                                         ; preds = %if.end
  %5 = load i32, i32* %sid, align 4, !dbg !9335, !tbaa !3840
  %conv = sext i32 %5 to i64, !dbg !9336
  %call5 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !9337
  store %struct._object* %call5, %struct._object** %retval, !dbg !9338
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9338

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %6 = bitcast i32* %sid to i8*, !dbg !9339
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !9339
  %7 = bitcast i32* %pid to i8*, !dbg !9339
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !9339
  %8 = load %struct._object*, %struct._object** %retval, !dbg !9339
  ret %struct._object* %8, !dbg !9339
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_setsid(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2327, metadata !3844), !dbg !9340
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !2328, metadata !3844), !dbg !9341
  %call = call i32 @setsid() #3, !dbg !9342
  %cmp = icmp slt i32 %call, 0, !dbg !9344
  br i1 %cmp, label %if.then, label %if.end, !dbg !9345

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @posix_error(), !dbg !9346
  store %struct._object* %call1, %struct._object** %retval, !dbg !9347
  br label %return, !dbg !9347

if.end:                                           ; preds = %entry
  %0 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9348, !tbaa !3977
  %inc = add i64 %0, 1, !dbg !9348
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9348, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !9349
  br label %return, !dbg !9349

return:                                           ; preds = %if.end, %if.then
  %1 = load %struct._object*, %struct._object** %retval, !dbg !9350
  ret %struct._object* %1, !dbg !9350
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_setpgid(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pid = alloca i32, align 4
  %pgrp = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2331, metadata !3844), !dbg !9351
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2332, metadata !3844), !dbg !9352
  %0 = bitcast i32* %pid to i8*, !dbg !9353
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9353
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !2333, metadata !3844), !dbg !9354
  %1 = bitcast i32* %pgrp to i8*, !dbg !9355
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9355
  call void @llvm.dbg.declare(metadata i32* %pgrp, metadata !2334, metadata !3844), !dbg !9356
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9357, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.280, i32 0, i32 0), i32* %pid, i32* %pgrp), !dbg !9359
  %tobool = icmp ne i32 %call, 0, !dbg !9359
  br i1 %tobool, label %if.end, label %if.then, !dbg !9360

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9361
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9361

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %pid, align 4, !dbg !9362, !tbaa !3840
  %4 = load i32, i32* %pgrp, align 4, !dbg !9364, !tbaa !3840
  %call1 = call i32 @setpgid(i32 %3, i32 %4) #3, !dbg !9365
  %cmp = icmp slt i32 %call1, 0, !dbg !9366
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !9367

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !9368
  store %struct._object* %call3, %struct._object** %retval, !dbg !9369
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9369

if.end.4:                                         ; preds = %if.end
  %5 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9370, !tbaa !3977
  %inc = add i64 %5, 1, !dbg !9370
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9370, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !9371
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9371

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %6 = bitcast i32* %pgrp to i8*, !dbg !9372
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !9372
  %7 = bitcast i32* %pid to i8*, !dbg !9372
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !9372
  %8 = load %struct._object*, %struct._object** %retval, !dbg !9372
  ret %struct._object* %8, !dbg !9372
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_tcgetpgrp(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %pgid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2337, metadata !3844), !dbg !9373
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2338, metadata !3844), !dbg !9374
  %0 = bitcast i32* %fd to i8*, !dbg !9375
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9375
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2339, metadata !3844), !dbg !9376
  %1 = bitcast i32* %pgid to i8*, !dbg !9377
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9377
  call void @llvm.dbg.declare(metadata i32* %pgid, metadata !2340, metadata !3844), !dbg !9378
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9379, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.281, i32 0, i32 0), i32* %fd), !dbg !9381
  %tobool = icmp ne i32 %call, 0, !dbg !9381
  br i1 %tobool, label %if.end, label %if.then, !dbg !9382

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9383
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9383

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %fd, align 4, !dbg !9384, !tbaa !3840
  %call1 = call i32 @tcgetpgrp(i32 %3) #3, !dbg !9385
  store i32 %call1, i32* %pgid, align 4, !dbg !9386, !tbaa !3840
  %4 = load i32, i32* %pgid, align 4, !dbg !9387, !tbaa !3840
  %cmp = icmp slt i32 %4, 0, !dbg !9389
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !9390

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !9391
  store %struct._object* %call3, %struct._object** %retval, !dbg !9392
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9392

if.end.4:                                         ; preds = %if.end
  %5 = load i32, i32* %pgid, align 4, !dbg !9393, !tbaa !3840
  %conv = sext i32 %5 to i64, !dbg !9393
  %call5 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !9394
  store %struct._object* %call5, %struct._object** %retval, !dbg !9395
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9395

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %6 = bitcast i32* %pgid to i8*, !dbg !9396
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !9396
  %7 = bitcast i32* %fd to i8*, !dbg !9396
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !9396
  %8 = load %struct._object*, %struct._object** %retval, !dbg !9396
  ret %struct._object* %8, !dbg !9396
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_tcsetpgrp(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %pgid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2343, metadata !3844), !dbg !9397
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2344, metadata !3844), !dbg !9398
  %0 = bitcast i32* %fd to i8*, !dbg !9399
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9399
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2345, metadata !3844), !dbg !9400
  %1 = bitcast i32* %pgid to i8*, !dbg !9401
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9401
  call void @llvm.dbg.declare(metadata i32* %pgid, metadata !2346, metadata !3844), !dbg !9402
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9403, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.282, i32 0, i32 0), i32* %fd, i32* %pgid), !dbg !9405
  %tobool = icmp ne i32 %call, 0, !dbg !9405
  br i1 %tobool, label %if.end, label %if.then, !dbg !9406

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9407
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9407

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %fd, align 4, !dbg !9408, !tbaa !3840
  %4 = load i32, i32* %pgid, align 4, !dbg !9410, !tbaa !3840
  %call1 = call i32 @tcsetpgrp(i32 %3, i32 %4) #3, !dbg !9411
  %cmp = icmp slt i32 %call1, 0, !dbg !9412
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !9413

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !9414
  store %struct._object* %call3, %struct._object** %retval, !dbg !9415
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9415

if.end.4:                                         ; preds = %if.end
  %5 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9416, !tbaa !3977
  %inc = add i64 %5, 1, !dbg !9416
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9416, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !9417
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9417

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %6 = bitcast i32* %pgid to i8*, !dbg !9418
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !9418
  %7 = bitcast i32* %fd to i8*, !dbg !9418
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !9418
  %8 = load %struct._object*, %struct._object** %retval, !dbg !9418
  ret %struct._object* %8, !dbg !9418
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_open(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %flags = alloca i32, align 4
  %mode = alloca i32, align 4
  %dir_fd = alloca i32, align 4
  %fd = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %atomic_flag_works = alloca i32*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2349, metadata !3844), !dbg !9419
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2350, metadata !3844), !dbg !9420
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !2351, metadata !3844), !dbg !9421
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !9422
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !9422
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !2352, metadata !3844), !dbg !9423
  %1 = bitcast i32* %flags to i8*, !dbg !9424
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9424
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !2353, metadata !3844), !dbg !9425
  %2 = bitcast i32* %mode to i8*, !dbg !9426
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !9426
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !2354, metadata !3844), !dbg !9427
  store i32 511, i32* %mode, align 4, !dbg !9427, !tbaa !3840
  %3 = bitcast i32* %dir_fd to i8*, !dbg !9428
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !9428
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !2355, metadata !3844), !dbg !9429
  store i32 -100, i32* %dir_fd, align 4, !dbg !9429, !tbaa !3840
  %4 = bitcast i32* %fd to i8*, !dbg !9430
  call void @llvm.lifetime.start(i64 4, i8* %4) #3, !dbg !9430
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2356, metadata !3844), !dbg !9431
  %5 = bitcast %struct._object** %return_value to i8*, !dbg !9432
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !9432
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !2357, metadata !3844), !dbg !9433
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !9433, !tbaa !3867
  %6 = bitcast i32** %atomic_flag_works to i8*, !dbg !9434
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !9434
  call void @llvm.dbg.declare(metadata i32** %atomic_flag_works, metadata !2358, metadata !3844), !dbg !9435
  store i32* @_Py_open_cloexec_works, i32** %atomic_flag_works, align 8, !dbg !9435, !tbaa !3867
  %7 = bitcast %struct.path_t* %path to i8*, !dbg !9436
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 72, i32 8, i1 false), !dbg !9436
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !9437
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.105, i32 0, i32 0), i8** %function_name, align 8, !dbg !9438, !tbaa !5512
  %8 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9439, !tbaa !3867
  %9 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !9441, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %8, %struct._object* %9, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.284, i32 0, i32 0), i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @posix_open.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32* %flags, i32* %mode, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dir_fd), !dbg !9442
  %tobool = icmp ne i32 %call, 0, !dbg !9442
  br i1 %tobool, label %if.end, label %if.then, !dbg !9443

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9444
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9444

if.end:                                           ; preds = %entry
  %10 = load i32, i32* %flags, align 4, !dbg !9445, !tbaa !3840
  %or = or i32 %10, 524288, !dbg !9445
  store i32 %or, i32* %flags, align 4, !dbg !9445, !tbaa !3840
  %11 = bitcast %struct._ts** %_save to i8*, !dbg !9446
  call void @llvm.lifetime.start(i64 8, i8* %11) #3, !dbg !9446
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2359, metadata !3844), !dbg !9447
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !9448
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !9449, !tbaa !3867
  %12 = load i32, i32* %dir_fd, align 4, !dbg !9450, !tbaa !3840
  %cmp = icmp ne i32 %12, -100, !dbg !9452
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !9453

if.then.2:                                        ; preds = %if.end
  %13 = load i32, i32* %dir_fd, align 4, !dbg !9454, !tbaa !3840
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !9455
  %14 = load i8*, i8** %narrow, align 8, !dbg !9455, !tbaa !5537
  %15 = load i32, i32* %flags, align 4, !dbg !9456, !tbaa !3840
  %16 = load i32, i32* %mode, align 4, !dbg !9457, !tbaa !3840
  %call3 = call i32 (i32, i8*, i32, ...) @openat64(i32 %13, i8* %14, i32 %15, i32 %16), !dbg !9458
  store i32 %call3, i32* %fd, align 4, !dbg !9459, !tbaa !3840
  br label %if.end.6, !dbg !9460

if.else:                                          ; preds = %if.end
  %narrow4 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !9461
  %17 = load i8*, i8** %narrow4, align 8, !dbg !9461, !tbaa !5537
  %18 = load i32, i32* %flags, align 4, !dbg !9462, !tbaa !3840
  %19 = load i32, i32* %mode, align 4, !dbg !9463, !tbaa !3840
  %call5 = call i32 (i8*, i32, ...) @open64(i8* %17, i32 %18, i32 %19), !dbg !9464
  store i32 %call5, i32* %fd, align 4, !dbg !9465, !tbaa !3840
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.2
  %20 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9466, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %20), !dbg !9467
  %21 = bitcast %struct._ts** %_save to i8*, !dbg !9468
  call void @llvm.lifetime.end(i64 8, i8* %21) #3, !dbg !9468
  %22 = load i32, i32* %fd, align 4, !dbg !9469, !tbaa !3840
  %cmp7 = icmp eq i32 %22, -1, !dbg !9471
  br i1 %cmp7, label %if.then.8, label %if.end.10, !dbg !9472

if.then.8:                                        ; preds = %if.end.6
  %23 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !9473, !tbaa !3867
  %object = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 8, !dbg !9475
  %24 = load %struct._object*, %struct._object** %object, align 8, !dbg !9475, !tbaa !6256
  %call9 = call %struct._object* @PyErr_SetFromErrnoWithFilenameObject(%struct._object* %23, %struct._object* %24), !dbg !9476
  br label %exit, !dbg !9477

if.end.10:                                        ; preds = %if.end.6
  %25 = load i32, i32* %fd, align 4, !dbg !9478, !tbaa !3840
  %26 = load i32*, i32** %atomic_flag_works, align 8, !dbg !9480, !tbaa !3867
  %call11 = call i32 @_Py_set_inheritable(i32 %25, i32 0, i32* %26), !dbg !9481
  %cmp12 = icmp slt i32 %call11, 0, !dbg !9482
  br i1 %cmp12, label %if.then.13, label %if.end.15, !dbg !9483

if.then.13:                                       ; preds = %if.end.10
  %27 = load i32, i32* %fd, align 4, !dbg !9484, !tbaa !3840
  %call14 = call i32 @close(i32 %27), !dbg !9486
  br label %exit, !dbg !9487

if.end.15:                                        ; preds = %if.end.10
  %28 = load i32, i32* %fd, align 4, !dbg !9488, !tbaa !3840
  %conv = sext i32 %28 to i64, !dbg !9489
  %call16 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !9490
  store %struct._object* %call16, %struct._object** %return_value, align 8, !dbg !9491, !tbaa !3867
  br label %exit, !dbg !9492

exit:                                             ; preds = %if.end.15, %if.then.13, %if.then.8
  call void @path_cleanup(%struct.path_t* %path), !dbg !9493
  %29 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !9494, !tbaa !3867
  store %struct._object* %29, %struct._object** %retval, !dbg !9495
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9495

cleanup:                                          ; preds = %exit, %if.then
  %30 = bitcast i32** %atomic_flag_works to i8*, !dbg !9496
  call void @llvm.lifetime.end(i64 8, i8* %30) #3, !dbg !9496
  %31 = bitcast %struct._object** %return_value to i8*, !dbg !9496
  call void @llvm.lifetime.end(i64 8, i8* %31) #3, !dbg !9496
  %32 = bitcast i32* %fd to i8*, !dbg !9496
  call void @llvm.lifetime.end(i64 4, i8* %32) #3, !dbg !9496
  %33 = bitcast i32* %dir_fd to i8*, !dbg !9496
  call void @llvm.lifetime.end(i64 4, i8* %33) #3, !dbg !9496
  %34 = bitcast i32* %mode to i8*, !dbg !9496
  call void @llvm.lifetime.end(i64 4, i8* %34) #3, !dbg !9496
  %35 = bitcast i32* %flags to i8*, !dbg !9496
  call void @llvm.lifetime.end(i64 4, i8* %35) #3, !dbg !9496
  %36 = bitcast %struct.path_t* %path to i8*, !dbg !9496
  call void @llvm.lifetime.end(i64 72, i8* %36) #3, !dbg !9496
  %37 = load %struct._object*, %struct._object** %retval, !dbg !9496
  ret %struct._object* %37, !dbg !9496
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_close_(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %res = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2363, metadata !3844), !dbg !9497
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2364, metadata !3844), !dbg !9498
  %0 = bitcast i32* %fd to i8*, !dbg !9499
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9499
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2365, metadata !3844), !dbg !9500
  %1 = bitcast i32* %res to i8*, !dbg !9499
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9499
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2366, metadata !3844), !dbg !9501
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9502, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.285, i32 0, i32 0), i32* %fd), !dbg !9504
  %tobool = icmp ne i32 %call, 0, !dbg !9504
  br i1 %tobool, label %if.end, label %if.then, !dbg !9505

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9506
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9506

if.end:                                           ; preds = %entry
  %3 = bitcast %struct._ts** %_save to i8*, !dbg !9507
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !9507
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2367, metadata !3844), !dbg !9508
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !9509
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !9510, !tbaa !3867
  %4 = load i32, i32* %fd, align 4, !dbg !9511, !tbaa !3840
  %call2 = call i32 @close(i32 %4), !dbg !9512
  store i32 %call2, i32* %res, align 4, !dbg !9513, !tbaa !3840
  %5 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9514, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %5), !dbg !9515
  %6 = bitcast %struct._ts** %_save to i8*, !dbg !9516
  call void @llvm.lifetime.end(i64 8, i8* %6) #3, !dbg !9516
  %7 = load i32, i32* %res, align 4, !dbg !9517, !tbaa !3840
  %cmp = icmp slt i32 %7, 0, !dbg !9519
  br i1 %cmp, label %if.then.3, label %if.end.5, !dbg !9520

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !9521
  store %struct._object* %call4, %struct._object** %retval, !dbg !9522
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9522

if.end.5:                                         ; preds = %if.end
  %8 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9523, !tbaa !3977
  %inc = add i64 %8, 1, !dbg !9523
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9523, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !9524
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9524

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %9 = bitcast i32* %res to i8*, !dbg !9525
  call void @llvm.lifetime.end(i64 4, i8* %9) #3, !dbg !9525
  %10 = bitcast i32* %fd to i8*, !dbg !9525
  call void @llvm.lifetime.end(i64 4, i8* %10) #3, !dbg !9525
  %11 = load %struct._object*, %struct._object** %retval, !dbg !9525
  ret %struct._object* %11, !dbg !9525
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_closerange(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd_from = alloca i32, align 4
  %fd_to = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2371, metadata !3844), !dbg !9526
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2372, metadata !3844), !dbg !9527
  %0 = bitcast i32* %fd_from to i8*, !dbg !9528
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9528
  call void @llvm.dbg.declare(metadata i32* %fd_from, metadata !2373, metadata !3844), !dbg !9529
  %1 = bitcast i32* %fd_to to i8*, !dbg !9528
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9528
  call void @llvm.dbg.declare(metadata i32* %fd_to, metadata !2374, metadata !3844), !dbg !9530
  %2 = bitcast i32* %i to i8*, !dbg !9528
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !9528
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2375, metadata !3844), !dbg !9531
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9532, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.286, i32 0, i32 0), i32* %fd_from, i32* %fd_to), !dbg !9534
  %tobool = icmp ne i32 %call, 0, !dbg !9534
  br i1 %tobool, label %if.end, label %if.then, !dbg !9535

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9536
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9536

if.end:                                           ; preds = %entry
  %4 = bitcast %struct._ts** %_save to i8*, !dbg !9537
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !9537
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2376, metadata !3844), !dbg !9538
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !9539
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !9540, !tbaa !3867
  %5 = load i32, i32* %fd_from, align 4, !dbg !9541, !tbaa !3840
  store i32 %5, i32* %i, align 4, !dbg !9543, !tbaa !3840
  br label %for.cond, !dbg !9544

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %i, align 4, !dbg !9545, !tbaa !3840
  %7 = load i32, i32* %fd_to, align 4, !dbg !9549, !tbaa !3840
  %cmp = icmp slt i32 %6, %7, !dbg !9550
  br i1 %cmp, label %for.body, label %for.end, !dbg !9551

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4, !dbg !9552, !tbaa !3840
  %call2 = call i32 @close(i32 %8), !dbg !9554
  br label %for.inc, !dbg !9555

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !9556, !tbaa !3840
  %inc = add i32 %9, 1, !dbg !9556
  store i32 %inc, i32* %i, align 4, !dbg !9556, !tbaa !3840
  br label %for.cond, !dbg !9557

for.end:                                          ; preds = %for.cond
  %10 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9558, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %10), !dbg !9559
  %11 = bitcast %struct._ts** %_save to i8*, !dbg !9560
  call void @llvm.lifetime.end(i64 8, i8* %11) #3, !dbg !9560
  %12 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9561, !tbaa !3977
  %inc3 = add i64 %12, 1, !dbg !9561
  store i64 %inc3, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9561, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !9562
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9562

cleanup:                                          ; preds = %for.end, %if.then
  %13 = bitcast i32* %i to i8*, !dbg !9563
  call void @llvm.lifetime.end(i64 4, i8* %13) #3, !dbg !9563
  %14 = bitcast i32* %fd_to to i8*, !dbg !9563
  call void @llvm.lifetime.end(i64 4, i8* %14) #3, !dbg !9563
  %15 = bitcast i32* %fd_from to i8*, !dbg !9563
  call void @llvm.lifetime.end(i64 4, i8* %15) #3, !dbg !9563
  %16 = load %struct._object*, %struct._object** %retval, !dbg !9563
  ret %struct._object* %16, !dbg !9563
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @device_encoding(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2380, metadata !3844), !dbg !9564
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2381, metadata !3844), !dbg !9565
  %0 = bitcast i32* %fd to i8*, !dbg !9566
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9566
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2382, metadata !3844), !dbg !9567
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9568, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.287, i32 0, i32 0), i32* %fd), !dbg !9570
  %tobool = icmp ne i32 %call, 0, !dbg !9570
  br i1 %tobool, label %if.end, label %if.then, !dbg !9571

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9572
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9572

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4, !dbg !9573, !tbaa !3840
  %call1 = call %struct._object* @_Py_device_encoding(i32 %2), !dbg !9574
  store %struct._object* %call1, %struct._object** %retval, !dbg !9575
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9575

cleanup:                                          ; preds = %if.end, %if.then
  %3 = bitcast i32* %fd to i8*, !dbg !9576
  call void @llvm.lifetime.end(i64 4, i8* %3) #3, !dbg !9576
  %4 = load %struct._object*, %struct._object** %retval, !dbg !9576
  ret %struct._object* %4, !dbg !9576
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_dup(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2385, metadata !3844), !dbg !9577
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2386, metadata !3844), !dbg !9578
  %0 = bitcast i32* %fd to i8*, !dbg !9579
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9579
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2387, metadata !3844), !dbg !9580
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9581, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.288, i32 0, i32 0), i32* %fd), !dbg !9583
  %tobool = icmp ne i32 %call, 0, !dbg !9583
  br i1 %tobool, label %if.end, label %if.then, !dbg !9584

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9585
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9585

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4, !dbg !9586, !tbaa !3840
  %call1 = call i32 @_Py_dup(i32 %2), !dbg !9587
  store i32 %call1, i32* %fd, align 4, !dbg !9588, !tbaa !3840
  %3 = load i32, i32* %fd, align 4, !dbg !9589, !tbaa !3840
  %cmp = icmp eq i32 %3, -1, !dbg !9591
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !9592

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !9593
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9593

if.end.3:                                         ; preds = %if.end
  %4 = load i32, i32* %fd, align 4, !dbg !9594, !tbaa !3840
  %conv = sext i32 %4 to i64, !dbg !9595
  %call4 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !9596
  store %struct._object* %call4, %struct._object** %retval, !dbg !9597
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9597

cleanup:                                          ; preds = %if.end.3, %if.then.2, %if.then
  %5 = bitcast i32* %fd to i8*, !dbg !9598
  call void @llvm.lifetime.end(i64 4, i8* %5) #3, !dbg !9598
  %6 = load %struct._object*, %struct._object** %retval, !dbg !9598
  ret %struct._object* %6, !dbg !9598
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_dup2(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %fd2 = alloca i32, align 4
  %inheritable = alloca i32, align 4
  %res = alloca i32, align 4
  %dup3_works = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %_save22 = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2390, metadata !3844), !dbg !9599
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2391, metadata !3844), !dbg !9600
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !2392, metadata !3844), !dbg !9601
  %0 = bitcast i32* %fd to i8*, !dbg !9602
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9602
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2393, metadata !3844), !dbg !9603
  %1 = bitcast i32* %fd2 to i8*, !dbg !9602
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9602
  call void @llvm.dbg.declare(metadata i32* %fd2, metadata !2394, metadata !3844), !dbg !9604
  %2 = bitcast i32* %inheritable to i8*, !dbg !9605
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !9605
  call void @llvm.dbg.declare(metadata i32* %inheritable, metadata !2395, metadata !3844), !dbg !9606
  store i32 1, i32* %inheritable, align 4, !dbg !9606, !tbaa !3840
  %3 = bitcast i32* %res to i8*, !dbg !9607
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !9607
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2396, metadata !3844), !dbg !9608
  %4 = bitcast i32* %dup3_works to i8*, !dbg !9609
  call void @llvm.lifetime.start(i64 4, i8* %4) #3, !dbg !9609
  call void @llvm.dbg.declare(metadata i32* %dup3_works, metadata !2397, metadata !3844), !dbg !9610
  store i32 -1, i32* %dup3_works, align 4, !dbg !9610, !tbaa !3840
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9611, !tbaa !3867
  %6 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !9613, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %5, %struct._object* %6, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.292, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @posix_dup2.keywords, i32 0, i32 0), i32* %fd, i32* %fd2, i32* %inheritable), !dbg !9614
  %tobool = icmp ne i32 %call, 0, !dbg !9614
  br i1 %tobool, label %if.end, label %if.then, !dbg !9615

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9616
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9616

if.end:                                           ; preds = %entry
  %7 = load i32, i32* %inheritable, align 4, !dbg !9617, !tbaa !3840
  %tobool1 = icmp ne i32 %7, 0, !dbg !9617
  br i1 %tobool1, label %if.end.17, label %land.lhs.true, !dbg !9618

land.lhs.true:                                    ; preds = %if.end
  %8 = load i32, i32* %dup3_works, align 4, !dbg !9619, !tbaa !3840
  %cmp = icmp ne i32 %8, 0, !dbg !9621
  br i1 %cmp, label %if.then.2, label %if.end.17, !dbg !9622

if.then.2:                                        ; preds = %land.lhs.true
  %9 = bitcast %struct._ts** %_save to i8*, !dbg !9623
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !9623
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2398, metadata !3844), !dbg !9624
  %call3 = call %struct._ts* @PyEval_SaveThread(), !dbg !9625
  store %struct._ts* %call3, %struct._ts** %_save, align 8, !dbg !9626, !tbaa !3867
  %10 = load i32, i32* %fd, align 4, !dbg !9627, !tbaa !3840
  %11 = load i32, i32* %fd2, align 4, !dbg !9628, !tbaa !3840
  %call4 = call i32 @dup3(i32 %10, i32 %11, i32 524288) #3, !dbg !9629
  store i32 %call4, i32* %res, align 4, !dbg !9630, !tbaa !3840
  %12 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9631, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %12), !dbg !9632
  %13 = bitcast %struct._ts** %_save to i8*, !dbg !9633
  call void @llvm.lifetime.end(i64 8, i8* %13) #3, !dbg !9633
  %14 = load i32, i32* %res, align 4, !dbg !9634, !tbaa !3840
  %cmp5 = icmp slt i32 %14, 0, !dbg !9636
  br i1 %cmp5, label %if.then.6, label %if.end.16, !dbg !9637

if.then.6:                                        ; preds = %if.then.2
  %15 = load i32, i32* %dup3_works, align 4, !dbg !9638, !tbaa !3840
  %cmp7 = icmp eq i32 %15, -1, !dbg !9641
  br i1 %cmp7, label %if.then.8, label %if.end.11, !dbg !9642

if.then.8:                                        ; preds = %if.then.6
  %call9 = call i32* @__errno_location() #1, !dbg !9643
  %16 = load i32, i32* %call9, align 4, !dbg !9644, !tbaa !3840
  %cmp10 = icmp ne i32 %16, 38, !dbg !9645
  %conv = zext i1 %cmp10 to i32, !dbg !9645
  store i32 %conv, i32* %dup3_works, align 4, !dbg !9646, !tbaa !3840
  br label %if.end.11, !dbg !9647

if.end.11:                                        ; preds = %if.then.8, %if.then.6
  %17 = load i32, i32* %dup3_works, align 4, !dbg !9648, !tbaa !3840
  %tobool12 = icmp ne i32 %17, 0, !dbg !9648
  br i1 %tobool12, label %if.then.13, label %if.end.15, !dbg !9650

if.then.13:                                       ; preds = %if.end.11
  %call14 = call %struct._object* @posix_error(), !dbg !9651
  store %struct._object* %call14, %struct._object** %retval, !dbg !9652
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9652

if.end.15:                                        ; preds = %if.end.11
  br label %if.end.16, !dbg !9653

if.end.16:                                        ; preds = %if.end.15, %if.then.2
  br label %if.end.17, !dbg !9654

if.end.17:                                        ; preds = %if.end.16, %land.lhs.true, %if.end
  %18 = load i32, i32* %inheritable, align 4, !dbg !9655, !tbaa !3840
  %tobool18 = icmp ne i32 %18, 0, !dbg !9655
  br i1 %tobool18, label %if.then.21, label %lor.lhs.false, !dbg !9656

lor.lhs.false:                                    ; preds = %if.end.17
  %19 = load i32, i32* %dup3_works, align 4, !dbg !9657, !tbaa !3840
  %cmp19 = icmp eq i32 %19, 0, !dbg !9659
  br i1 %cmp19, label %if.then.21, label %if.end.38, !dbg !9660

if.then.21:                                       ; preds = %lor.lhs.false, %if.end.17
  %20 = bitcast %struct._ts** %_save22 to i8*, !dbg !9661
  call void @llvm.lifetime.start(i64 8, i8* %20) #3, !dbg !9661
  call void @llvm.dbg.declare(metadata %struct._ts** %_save22, metadata !2402, metadata !3844), !dbg !9662
  %call23 = call %struct._ts* @PyEval_SaveThread(), !dbg !9663
  store %struct._ts* %call23, %struct._ts** %_save22, align 8, !dbg !9664, !tbaa !3867
  %21 = load i32, i32* %fd, align 4, !dbg !9665, !tbaa !3840
  %22 = load i32, i32* %fd2, align 4, !dbg !9666, !tbaa !3840
  %call24 = call i32 @dup2(i32 %21, i32 %22) #3, !dbg !9667
  store i32 %call24, i32* %res, align 4, !dbg !9668, !tbaa !3840
  %23 = load %struct._ts*, %struct._ts** %_save22, align 8, !dbg !9669, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %23), !dbg !9670
  %24 = bitcast %struct._ts** %_save22 to i8*, !dbg !9671
  call void @llvm.lifetime.end(i64 8, i8* %24) #3, !dbg !9671
  %25 = load i32, i32* %res, align 4, !dbg !9672, !tbaa !3840
  %cmp25 = icmp slt i32 %25, 0, !dbg !9674
  br i1 %cmp25, label %if.then.27, label %if.end.29, !dbg !9675

if.then.27:                                       ; preds = %if.then.21
  %call28 = call %struct._object* @posix_error(), !dbg !9676
  store %struct._object* %call28, %struct._object** %retval, !dbg !9677
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9677

if.end.29:                                        ; preds = %if.then.21
  %26 = load i32, i32* %inheritable, align 4, !dbg !9678, !tbaa !3840
  %tobool30 = icmp ne i32 %26, 0, !dbg !9678
  br i1 %tobool30, label %if.end.37, label %land.lhs.true.31, !dbg !9680

land.lhs.true.31:                                 ; preds = %if.end.29
  %27 = load i32, i32* %fd2, align 4, !dbg !9681, !tbaa !3840
  %call32 = call i32 @_Py_set_inheritable(i32 %27, i32 0, i32* null), !dbg !9683
  %cmp33 = icmp slt i32 %call32, 0, !dbg !9684
  br i1 %cmp33, label %if.then.35, label %if.end.37, !dbg !9685

if.then.35:                                       ; preds = %land.lhs.true.31
  %28 = load i32, i32* %fd2, align 4, !dbg !9686, !tbaa !3840
  %call36 = call i32 @close(i32 %28), !dbg !9688
  store %struct._object* null, %struct._object** %retval, !dbg !9689
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9689

if.end.37:                                        ; preds = %land.lhs.true.31, %if.end.29
  br label %if.end.38, !dbg !9690

if.end.38:                                        ; preds = %if.end.37, %lor.lhs.false
  %29 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9691, !tbaa !3977
  %inc = add i64 %29, 1, !dbg !9691
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9691, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !9692
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9692

cleanup:                                          ; preds = %if.end.38, %if.then.35, %if.then.27, %if.then.13, %if.then
  %30 = bitcast i32* %dup3_works to i8*, !dbg !9693
  call void @llvm.lifetime.end(i64 4, i8* %30) #3, !dbg !9693
  %31 = bitcast i32* %res to i8*, !dbg !9693
  call void @llvm.lifetime.end(i64 4, i8* %31) #3, !dbg !9693
  %32 = bitcast i32* %inheritable to i8*, !dbg !9693
  call void @llvm.lifetime.end(i64 4, i8* %32) #3, !dbg !9693
  %33 = bitcast i32* %fd2 to i8*, !dbg !9693
  call void @llvm.lifetime.end(i64 4, i8* %33) #3, !dbg !9693
  %34 = bitcast i32* %fd to i8*, !dbg !9693
  call void @llvm.lifetime.end(i64 4, i8* %34) #3, !dbg !9693
  %35 = load %struct._object*, %struct._object** %retval, !dbg !9693
  ret %struct._object* %35, !dbg !9693
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_lockf(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %cmd = alloca i32, align 4
  %res = alloca i32, align 4
  %len = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2408, metadata !3844), !dbg !9694
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2409, metadata !3844), !dbg !9695
  %0 = bitcast i32* %fd to i8*, !dbg !9696
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9696
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2410, metadata !3844), !dbg !9697
  %1 = bitcast i32* %cmd to i8*, !dbg !9696
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9696
  call void @llvm.dbg.declare(metadata i32* %cmd, metadata !2411, metadata !3844), !dbg !9698
  %2 = bitcast i32* %res to i8*, !dbg !9696
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !9696
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2412, metadata !3844), !dbg !9699
  %3 = bitcast i64* %len to i8*, !dbg !9700
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !9700
  call void @llvm.dbg.declare(metadata i64* %len, metadata !2413, metadata !3844), !dbg !9701
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9702, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.293, i32 0, i32 0), i32* %fd, i32* %cmd, i32 (%struct._object*, i8*)* @_parse_off_t, i64* %len), !dbg !9704
  %tobool = icmp ne i32 %call, 0, !dbg !9704
  br i1 %tobool, label %if.end, label %if.then, !dbg !9705

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9706
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9706

if.end:                                           ; preds = %entry
  %5 = bitcast %struct._ts** %_save to i8*, !dbg !9707
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !9707
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2414, metadata !3844), !dbg !9708
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !9709
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !9710, !tbaa !3867
  %6 = load i32, i32* %fd, align 4, !dbg !9711, !tbaa !3840
  %7 = load i32, i32* %cmd, align 4, !dbg !9712, !tbaa !3840
  %8 = load i64, i64* %len, align 8, !dbg !9713, !tbaa !3904
  %call2 = call i32 @lockf64(i32 %6, i32 %7, i64 %8), !dbg !9714
  store i32 %call2, i32* %res, align 4, !dbg !9715, !tbaa !3840
  %9 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9716, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %9), !dbg !9717
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !9718
  call void @llvm.lifetime.end(i64 8, i8* %10) #3, !dbg !9718
  %11 = load i32, i32* %res, align 4, !dbg !9719, !tbaa !3840
  %cmp = icmp slt i32 %11, 0, !dbg !9721
  br i1 %cmp, label %if.then.3, label %if.end.5, !dbg !9722

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !9723
  store %struct._object* %call4, %struct._object** %retval, !dbg !9724
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9724

if.end.5:                                         ; preds = %if.end
  %12 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9725, !tbaa !3977
  %inc = add i64 %12, 1, !dbg !9725
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9725, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !9726
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9726

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %13 = bitcast i64* %len to i8*, !dbg !9727
  call void @llvm.lifetime.end(i64 8, i8* %13) #3, !dbg !9727
  %14 = bitcast i32* %res to i8*, !dbg !9727
  call void @llvm.lifetime.end(i64 4, i8* %14) #3, !dbg !9727
  %15 = bitcast i32* %cmd to i8*, !dbg !9727
  call void @llvm.lifetime.end(i64 4, i8* %15) #3, !dbg !9727
  %16 = bitcast i32* %fd to i8*, !dbg !9727
  call void @llvm.lifetime.end(i64 4, i8* %16) #3, !dbg !9727
  %17 = load %struct._object*, %struct._object** %retval, !dbg !9727
  ret %struct._object* %17, !dbg !9727
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_lseek(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %how = alloca i32, align 4
  %pos = alloca i64, align 8
  %res = alloca i64, align 8
  %posobj = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2422, metadata !3844), !dbg !9728
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2423, metadata !3844), !dbg !9729
  %0 = bitcast i32* %fd to i8*, !dbg !9730
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9730
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2424, metadata !3844), !dbg !9731
  %1 = bitcast i32* %how to i8*, !dbg !9730
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9730
  call void @llvm.dbg.declare(metadata i32* %how, metadata !2425, metadata !3844), !dbg !9732
  %2 = bitcast i64* %pos to i8*, !dbg !9733
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !9733
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !2426, metadata !3844), !dbg !9734
  %3 = bitcast i64* %res to i8*, !dbg !9733
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !9733
  call void @llvm.dbg.declare(metadata i64* %res, metadata !2427, metadata !3844), !dbg !9735
  %4 = bitcast %struct._object** %posobj to i8*, !dbg !9736
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !9736
  call void @llvm.dbg.declare(metadata %struct._object** %posobj, metadata !2428, metadata !3844), !dbg !9737
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9738, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %5, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.294, i32 0, i32 0), i32* %fd, %struct._object** %posobj, i32* %how), !dbg !9740
  %tobool = icmp ne i32 %call, 0, !dbg !9740
  br i1 %tobool, label %if.end, label %if.then, !dbg !9741

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9742
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9742

if.end:                                           ; preds = %entry
  %6 = load i32, i32* %how, align 4, !dbg !9743, !tbaa !3840
  br label %NodeBlock.3

NodeBlock.3:                                      ; preds = %if.end
  %Pivot.4 = icmp slt i32 %6, 1
  br i1 %Pivot.4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock.3
  %Pivot = icmp slt i32 %6, 2
  br i1 %Pivot, label %sw.bb.1, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %6, 2
  br i1 %SwitchLeaf2, label %sw.bb.2, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock.3
  %SwitchLeaf = icmp eq i32 %6, 0
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  store i32 0, i32* %how, align 4, !dbg !9744, !tbaa !3840
  br label %sw.epilog, !dbg !9746

sw.bb.1:                                          ; preds = %NodeBlock
  store i32 1, i32* %how, align 4, !dbg !9747, !tbaa !3840
  br label %sw.epilog, !dbg !9748

sw.bb.2:                                          ; preds = %LeafBlock.1
  store i32 2, i32* %how, align 4, !dbg !9749, !tbaa !3840
  br label %sw.epilog, !dbg !9750

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %sw.bb.2, %sw.bb.1, %sw.bb
  %7 = load %struct._object*, %struct._object** %posobj, align 8, !dbg !9751, !tbaa !3867
  %call3 = call i64 @PyLong_AsLong(%struct._object* %7), !dbg !9752
  store i64 %call3, i64* %pos, align 8, !dbg !9753, !tbaa !3904
  %call4 = call %struct._object* @PyErr_Occurred(), !dbg !9754
  %tobool5 = icmp ne %struct._object* %call4, null, !dbg !9754
  br i1 %tobool5, label %if.then.6, label %if.end.7, !dbg !9756

if.then.6:                                        ; preds = %sw.epilog
  store %struct._object* null, %struct._object** %retval, !dbg !9757
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9757

if.end.7:                                         ; preds = %sw.epilog
  %8 = bitcast %struct._ts** %_save to i8*, !dbg !9758
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !9758
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2429, metadata !3844), !dbg !9759
  %call8 = call %struct._ts* @PyEval_SaveThread(), !dbg !9760
  store %struct._ts* %call8, %struct._ts** %_save, align 8, !dbg !9761, !tbaa !3867
  %9 = load i32, i32* %fd, align 4, !dbg !9762, !tbaa !3840
  %10 = load i64, i64* %pos, align 8, !dbg !9763, !tbaa !3904
  %11 = load i32, i32* %how, align 4, !dbg !9764, !tbaa !3840
  %call9 = call i64 @lseek64(i32 %9, i64 %10, i32 %11) #3, !dbg !9765
  store i64 %call9, i64* %res, align 8, !dbg !9766, !tbaa !3904
  %12 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9767, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %12), !dbg !9768
  %13 = bitcast %struct._ts** %_save to i8*, !dbg !9769
  call void @llvm.lifetime.end(i64 8, i8* %13) #3, !dbg !9769
  %14 = load i64, i64* %res, align 8, !dbg !9770, !tbaa !3904
  %cmp = icmp slt i64 %14, 0, !dbg !9772
  br i1 %cmp, label %if.then.10, label %if.end.12, !dbg !9773

if.then.10:                                       ; preds = %if.end.7
  %call11 = call %struct._object* @posix_error(), !dbg !9774
  store %struct._object* %call11, %struct._object** %retval, !dbg !9775
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9775

if.end.12:                                        ; preds = %if.end.7
  %15 = load i64, i64* %res, align 8, !dbg !9776, !tbaa !3904
  %call13 = call %struct._object* @PyLong_FromLong(i64 %15), !dbg !9777
  store %struct._object* %call13, %struct._object** %retval, !dbg !9778
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9778

cleanup:                                          ; preds = %if.end.12, %if.then.10, %if.then.6, %if.then
  %16 = bitcast %struct._object** %posobj to i8*, !dbg !9779
  call void @llvm.lifetime.end(i64 8, i8* %16) #3, !dbg !9779
  %17 = bitcast i64* %res to i8*, !dbg !9779
  call void @llvm.lifetime.end(i64 8, i8* %17) #3, !dbg !9779
  %18 = bitcast i64* %pos to i8*, !dbg !9779
  call void @llvm.lifetime.end(i64 8, i8* %18) #3, !dbg !9779
  %19 = bitcast i32* %how to i8*, !dbg !9779
  call void @llvm.lifetime.end(i64 4, i8* %19) #3, !dbg !9779
  %20 = bitcast i32* %fd to i8*, !dbg !9779
  call void @llvm.lifetime.end(i64 4, i8* %20) #3, !dbg !9779
  %21 = load %struct._object*, %struct._object** %retval, !dbg !9779
  ret %struct._object* %21, !dbg !9779
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_read(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %size = alloca i32, align 4
  %n = alloca i64, align 8
  %buffer = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2433, metadata !3844), !dbg !9780
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2434, metadata !3844), !dbg !9781
  %0 = bitcast i32* %fd to i8*, !dbg !9782
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9782
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2435, metadata !3844), !dbg !9783
  %1 = bitcast i32* %size to i8*, !dbg !9782
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9782
  call void @llvm.dbg.declare(metadata i32* %size, metadata !2436, metadata !3844), !dbg !9784
  %2 = bitcast i64* %n to i8*, !dbg !9785
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !9785
  call void @llvm.dbg.declare(metadata i64* %n, metadata !2437, metadata !3844), !dbg !9786
  %3 = bitcast %struct._object** %buffer to i8*, !dbg !9787
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !9787
  call void @llvm.dbg.declare(metadata %struct._object** %buffer, metadata !2438, metadata !3844), !dbg !9788
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9789, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.295, i32 0, i32 0), i32* %fd, i32* %size), !dbg !9791
  %tobool = icmp ne i32 %call, 0, !dbg !9791
  br i1 %tobool, label %if.end, label %if.then, !dbg !9792

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9793
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9793

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %size, align 4, !dbg !9794, !tbaa !3840
  %cmp = icmp slt i32 %5, 0, !dbg !9796
  br i1 %cmp, label %if.then.1, label %if.end.4, !dbg !9797

if.then.1:                                        ; preds = %if.end
  %call2 = call i32* @__errno_location() #1, !dbg !9798
  store i32 22, i32* %call2, align 4, !dbg !9800, !tbaa !3840
  %call3 = call %struct._object* @posix_error(), !dbg !9801
  store %struct._object* %call3, %struct._object** %retval, !dbg !9802
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9802

if.end.4:                                         ; preds = %if.end
  %6 = load i32, i32* %size, align 4, !dbg !9803, !tbaa !3840
  %conv = sext i32 %6 to i64, !dbg !9803
  %call5 = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 %conv), !dbg !9804
  store %struct._object* %call5, %struct._object** %buffer, align 8, !dbg !9805, !tbaa !3867
  %7 = load %struct._object*, %struct._object** %buffer, align 8, !dbg !9806, !tbaa !3867
  %cmp6 = icmp eq %struct._object* %7, null, !dbg !9808
  br i1 %cmp6, label %if.then.8, label %if.end.9, !dbg !9809

if.then.8:                                        ; preds = %if.end.4
  store %struct._object* null, %struct._object** %retval, !dbg !9810
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9810

if.end.9:                                         ; preds = %if.end.4
  %8 = bitcast %struct._ts** %_save to i8*, !dbg !9811
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !9811
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2439, metadata !3844), !dbg !9812
  %call10 = call %struct._ts* @PyEval_SaveThread(), !dbg !9813
  store %struct._ts* %call10, %struct._ts** %_save, align 8, !dbg !9814, !tbaa !3867
  %9 = load i32, i32* %fd, align 4, !dbg !9815, !tbaa !3840
  %10 = load %struct._object*, %struct._object** %buffer, align 8, !dbg !9816, !tbaa !3867
  %11 = bitcast %struct._object* %10 to %struct.PyBytesObject*, !dbg !9817
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %11, i32 0, i32 2, !dbg !9818
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !9819
  %12 = load i32, i32* %size, align 4, !dbg !9820, !tbaa !3840
  %conv11 = sext i32 %12 to i64, !dbg !9820
  %call12 = call i64 @read(i32 %9, i8* %arraydecay, i64 %conv11), !dbg !9821
  store i64 %call12, i64* %n, align 8, !dbg !9822, !tbaa !3904
  %13 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9823, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %13), !dbg !9824
  %14 = bitcast %struct._ts** %_save to i8*, !dbg !9825
  call void @llvm.lifetime.end(i64 8, i8* %14) #3, !dbg !9825
  %15 = load i64, i64* %n, align 8, !dbg !9826, !tbaa !3904
  %cmp13 = icmp slt i64 %15, 0, !dbg !9827
  br i1 %cmp13, label %if.then.15, label %if.end.21, !dbg !9828

if.then.15:                                       ; preds = %if.end.9
  br label %do.body, !dbg !9829

do.body:                                          ; preds = %if.then.15
  %16 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9830
  call void @llvm.lifetime.start(i64 8, i8* %16) #3, !dbg !9830
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !2441, metadata !3844), !dbg !9832
  %17 = load %struct._object*, %struct._object** %buffer, align 8, !dbg !9833, !tbaa !3867
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8, !dbg !9832, !tbaa !3867
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9834, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0, !dbg !9836
  %19 = load i64, i64* %ob_refcnt, align 8, !dbg !9837, !tbaa !3977
  %dec = add i64 %19, -1, !dbg !9837
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !9837, !tbaa !3977
  %cmp16 = icmp ne i64 %dec, 0, !dbg !9838
  br i1 %cmp16, label %if.then.18, label %if.else, !dbg !9839

if.then.18:                                       ; preds = %do.body
  br label %if.end.19, !dbg !9840

if.else:                                          ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9842, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1, !dbg !9844
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9844, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4, !dbg !9845
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !9845, !tbaa !3986
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9846, !tbaa !3867
  call void %22(%struct._object* %23), !dbg !9847
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.18
  %24 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9848
  call void @llvm.lifetime.end(i64 8, i8* %24) #3, !dbg !9848
  br label %do.cond, !dbg !9850

do.cond:                                          ; preds = %if.end.19
  br label %do.end, !dbg !9851

do.end:                                           ; preds = %do.cond
  %call20 = call %struct._object* @posix_error(), !dbg !9853
  store %struct._object* %call20, %struct._object** %retval, !dbg !9854
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9854

if.end.21:                                        ; preds = %if.end.9
  %25 = load i64, i64* %n, align 8, !dbg !9855, !tbaa !3904
  %26 = load i32, i32* %size, align 4, !dbg !9857, !tbaa !3840
  %conv22 = sext i32 %26 to i64, !dbg !9857
  %cmp23 = icmp ne i64 %25, %conv22, !dbg !9858
  br i1 %cmp23, label %if.then.25, label %if.end.27, !dbg !9859

if.then.25:                                       ; preds = %if.end.21
  %27 = load i64, i64* %n, align 8, !dbg !9860, !tbaa !3904
  %call26 = call i32 @_PyBytes_Resize(%struct._object** %buffer, i64 %27), !dbg !9861
  br label %if.end.27, !dbg !9861

if.end.27:                                        ; preds = %if.then.25, %if.end.21
  %28 = load %struct._object*, %struct._object** %buffer, align 8, !dbg !9862, !tbaa !3867
  store %struct._object* %28, %struct._object** %retval, !dbg !9863
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9863

cleanup:                                          ; preds = %if.end.27, %do.end, %if.then.8, %if.then.1, %if.then
  %29 = bitcast %struct._object** %buffer to i8*, !dbg !9864
  call void @llvm.lifetime.end(i64 8, i8* %29) #3, !dbg !9864
  %30 = bitcast i64* %n to i8*, !dbg !9864
  call void @llvm.lifetime.end(i64 8, i8* %30) #3, !dbg !9864
  %31 = bitcast i32* %size to i8*, !dbg !9864
  call void @llvm.lifetime.end(i64 4, i8* %31) #3, !dbg !9864
  %32 = bitcast i32* %fd to i8*, !dbg !9864
  call void @llvm.lifetime.end(i64 4, i8* %32) #3, !dbg !9864
  %33 = load %struct._object*, %struct._object** %retval, !dbg !9864
  ret %struct._object* %33, !dbg !9864
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_readv(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %cnt = alloca i32, align 4
  %n = alloca i64, align 8
  %seq = alloca %struct._object*, align 8
  %iov = alloca %struct.iovec*, align 8
  %buf = alloca %struct.bufferinfo*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2447, metadata !3844), !dbg !9865
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2448, metadata !3844), !dbg !9866
  %0 = bitcast i32* %fd to i8*, !dbg !9867
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9867
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2449, metadata !3844), !dbg !9868
  %1 = bitcast i32* %cnt to i8*, !dbg !9867
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9867
  call void @llvm.dbg.declare(metadata i32* %cnt, metadata !2450, metadata !3844), !dbg !9869
  %2 = bitcast i64* %n to i8*, !dbg !9870
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !9870
  call void @llvm.dbg.declare(metadata i64* %n, metadata !2451, metadata !3844), !dbg !9871
  %3 = bitcast %struct._object** %seq to i8*, !dbg !9872
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !9872
  call void @llvm.dbg.declare(metadata %struct._object** %seq, metadata !2452, metadata !3844), !dbg !9873
  %4 = bitcast %struct.iovec** %iov to i8*, !dbg !9874
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !9874
  call void @llvm.dbg.declare(metadata %struct.iovec** %iov, metadata !2453, metadata !3844), !dbg !9875
  %5 = bitcast %struct.bufferinfo** %buf to i8*, !dbg !9876
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !9876
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %buf, metadata !2454, metadata !3844), !dbg !9877
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9878, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.296, i32 0, i32 0), i32* %fd, %struct._object** %seq), !dbg !9880
  %tobool = icmp ne i32 %call, 0, !dbg !9880
  br i1 %tobool, label %if.end, label %if.then, !dbg !9881

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9882
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9882

if.end:                                           ; preds = %entry
  %7 = load %struct._object*, %struct._object** %seq, align 8, !dbg !9883, !tbaa !3867
  %call1 = call i32 @PySequence_Check(%struct._object* %7), !dbg !9885
  %tobool2 = icmp ne i32 %call1, 0, !dbg !9885
  br i1 %tobool2, label %if.end.4, label %if.then.3, !dbg !9886

if.then.3:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !9887, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.297, i32 0, i32 0)), !dbg !9889
  store %struct._object* null, %struct._object** %retval, !dbg !9890
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9890

if.end.4:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %seq, align 8, !dbg !9891, !tbaa !3867
  %call5 = call i64 @PySequence_Size(%struct._object* %9), !dbg !9892
  %conv = trunc i64 %call5 to i32, !dbg !9892
  store i32 %conv, i32* %cnt, align 4, !dbg !9893, !tbaa !3840
  %10 = load %struct._object*, %struct._object** %seq, align 8, !dbg !9894, !tbaa !3867
  %11 = load i32, i32* %cnt, align 4, !dbg !9896, !tbaa !3840
  %call6 = call i64 @iov_setup(%struct.iovec** %iov, %struct.bufferinfo** %buf, %struct._object* %10, i32 %11, i32 1), !dbg !9897
  %cmp = icmp slt i64 %call6, 0, !dbg !9898
  br i1 %cmp, label %if.then.8, label %if.end.9, !dbg !9899

if.then.8:                                        ; preds = %if.end.4
  store %struct._object* null, %struct._object** %retval, !dbg !9900
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9900

if.end.9:                                         ; preds = %if.end.4
  %12 = bitcast %struct._ts** %_save to i8*, !dbg !9901
  call void @llvm.lifetime.start(i64 8, i8* %12) #3, !dbg !9901
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2455, metadata !3844), !dbg !9902
  %call10 = call %struct._ts* @PyEval_SaveThread(), !dbg !9903
  store %struct._ts* %call10, %struct._ts** %_save, align 8, !dbg !9904, !tbaa !3867
  %13 = load i32, i32* %fd, align 4, !dbg !9905, !tbaa !3840
  %14 = load %struct.iovec*, %struct.iovec** %iov, align 8, !dbg !9906, !tbaa !3867
  %15 = load i32, i32* %cnt, align 4, !dbg !9907, !tbaa !3840
  %call11 = call i64 @readv(i32 %13, %struct.iovec* %14, i32 %15), !dbg !9908
  store i64 %call11, i64* %n, align 8, !dbg !9909, !tbaa !3904
  %16 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9910, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %16), !dbg !9911
  %17 = bitcast %struct._ts** %_save to i8*, !dbg !9912
  call void @llvm.lifetime.end(i64 8, i8* %17) #3, !dbg !9912
  %18 = load %struct.iovec*, %struct.iovec** %iov, align 8, !dbg !9913, !tbaa !3867
  %19 = load %struct.bufferinfo*, %struct.bufferinfo** %buf, align 8, !dbg !9914, !tbaa !3867
  %20 = load i32, i32* %cnt, align 4, !dbg !9915, !tbaa !3840
  call void @iov_cleanup(%struct.iovec* %18, %struct.bufferinfo* %19, i32 %20), !dbg !9916
  %21 = load i64, i64* %n, align 8, !dbg !9917, !tbaa !3904
  %cmp12 = icmp slt i64 %21, 0, !dbg !9919
  br i1 %cmp12, label %if.then.14, label %if.end.16, !dbg !9920

if.then.14:                                       ; preds = %if.end.9
  %call15 = call %struct._object* @posix_error(), !dbg !9921
  store %struct._object* %call15, %struct._object** %retval, !dbg !9922
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9922

if.end.16:                                        ; preds = %if.end.9
  %22 = load i64, i64* %n, align 8, !dbg !9923, !tbaa !3904
  %call17 = call %struct._object* @PyLong_FromSsize_t(i64 %22), !dbg !9924
  store %struct._object* %call17, %struct._object** %retval, !dbg !9925
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9925

cleanup:                                          ; preds = %if.end.16, %if.then.14, %if.then.8, %if.then.3, %if.then
  %23 = bitcast %struct.bufferinfo** %buf to i8*, !dbg !9926
  call void @llvm.lifetime.end(i64 8, i8* %23) #3, !dbg !9926
  %24 = bitcast %struct.iovec** %iov to i8*, !dbg !9926
  call void @llvm.lifetime.end(i64 8, i8* %24) #3, !dbg !9926
  %25 = bitcast %struct._object** %seq to i8*, !dbg !9926
  call void @llvm.lifetime.end(i64 8, i8* %25) #3, !dbg !9926
  %26 = bitcast i64* %n to i8*, !dbg !9926
  call void @llvm.lifetime.end(i64 8, i8* %26) #3, !dbg !9926
  %27 = bitcast i32* %cnt to i8*, !dbg !9926
  call void @llvm.lifetime.end(i64 4, i8* %27) #3, !dbg !9926
  %28 = bitcast i32* %fd to i8*, !dbg !9926
  call void @llvm.lifetime.end(i64 4, i8* %28) #3, !dbg !9926
  %29 = load %struct._object*, %struct._object** %retval, !dbg !9926
  ret %struct._object* %29, !dbg !9926
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_pread(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %size = alloca i32, align 4
  %offset = alloca i64, align 8
  %n = alloca i64, align 8
  %buffer = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2492, metadata !3844), !dbg !9927
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2493, metadata !3844), !dbg !9928
  %0 = bitcast i32* %fd to i8*, !dbg !9929
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !9929
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2494, metadata !3844), !dbg !9930
  %1 = bitcast i32* %size to i8*, !dbg !9929
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !9929
  call void @llvm.dbg.declare(metadata i32* %size, metadata !2495, metadata !3844), !dbg !9931
  %2 = bitcast i64* %offset to i8*, !dbg !9932
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !9932
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !2496, metadata !3844), !dbg !9933
  %3 = bitcast i64* %n to i8*, !dbg !9934
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !9934
  call void @llvm.dbg.declare(metadata i64* %n, metadata !2497, metadata !3844), !dbg !9935
  %4 = bitcast %struct._object** %buffer to i8*, !dbg !9936
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !9936
  call void @llvm.dbg.declare(metadata %struct._object** %buffer, metadata !2498, metadata !3844), !dbg !9937
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9938, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.298, i32 0, i32 0), i32* %fd, i32* %size, i32 (%struct._object*, i8*)* @_parse_off_t, i64* %offset), !dbg !9940
  %tobool = icmp ne i32 %call, 0, !dbg !9940
  br i1 %tobool, label %if.end, label %if.then, !dbg !9941

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9942
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9942

if.end:                                           ; preds = %entry
  %6 = load i32, i32* %size, align 4, !dbg !9943, !tbaa !3840
  %cmp = icmp slt i32 %6, 0, !dbg !9945
  br i1 %cmp, label %if.then.1, label %if.end.4, !dbg !9946

if.then.1:                                        ; preds = %if.end
  %call2 = call i32* @__errno_location() #1, !dbg !9947
  store i32 22, i32* %call2, align 4, !dbg !9949, !tbaa !3840
  %call3 = call %struct._object* @posix_error(), !dbg !9950
  store %struct._object* %call3, %struct._object** %retval, !dbg !9951
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9951

if.end.4:                                         ; preds = %if.end
  %7 = load i32, i32* %size, align 4, !dbg !9952, !tbaa !3840
  %conv = sext i32 %7 to i64, !dbg !9952
  %call5 = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 %conv), !dbg !9953
  store %struct._object* %call5, %struct._object** %buffer, align 8, !dbg !9954, !tbaa !3867
  %8 = load %struct._object*, %struct._object** %buffer, align 8, !dbg !9955, !tbaa !3867
  %cmp6 = icmp eq %struct._object* %8, null, !dbg !9957
  br i1 %cmp6, label %if.then.8, label %if.end.9, !dbg !9958

if.then.8:                                        ; preds = %if.end.4
  store %struct._object* null, %struct._object** %retval, !dbg !9959
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9959

if.end.9:                                         ; preds = %if.end.4
  %9 = bitcast %struct._ts** %_save to i8*, !dbg !9960
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !9960
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2499, metadata !3844), !dbg !9961
  %call10 = call %struct._ts* @PyEval_SaveThread(), !dbg !9962
  store %struct._ts* %call10, %struct._ts** %_save, align 8, !dbg !9963, !tbaa !3867
  %10 = load i32, i32* %fd, align 4, !dbg !9964, !tbaa !3840
  %11 = load %struct._object*, %struct._object** %buffer, align 8, !dbg !9965, !tbaa !3867
  %12 = bitcast %struct._object* %11 to %struct.PyBytesObject*, !dbg !9966
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %12, i32 0, i32 2, !dbg !9967
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !9968
  %13 = load i32, i32* %size, align 4, !dbg !9969, !tbaa !3840
  %conv11 = sext i32 %13 to i64, !dbg !9969
  %14 = load i64, i64* %offset, align 8, !dbg !9970, !tbaa !3904
  %call12 = call i64 @pread64(i32 %10, i8* %arraydecay, i64 %conv11, i64 %14), !dbg !9971
  store i64 %call12, i64* %n, align 8, !dbg !9972, !tbaa !3904
  %15 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9973, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %15), !dbg !9974
  %16 = bitcast %struct._ts** %_save to i8*, !dbg !9975
  call void @llvm.lifetime.end(i64 8, i8* %16) #3, !dbg !9975
  %17 = load i64, i64* %n, align 8, !dbg !9976, !tbaa !3904
  %cmp13 = icmp slt i64 %17, 0, !dbg !9977
  br i1 %cmp13, label %if.then.15, label %if.end.21, !dbg !9978

if.then.15:                                       ; preds = %if.end.9
  br label %do.body, !dbg !9979

do.body:                                          ; preds = %if.then.15
  %18 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9980
  call void @llvm.lifetime.start(i64 8, i8* %18) #3, !dbg !9980
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !2501, metadata !3844), !dbg !9982
  %19 = load %struct._object*, %struct._object** %buffer, align 8, !dbg !9983, !tbaa !3867
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8, !dbg !9982, !tbaa !3867
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9984, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0, !dbg !9986
  %21 = load i64, i64* %ob_refcnt, align 8, !dbg !9987, !tbaa !3977
  %dec = add i64 %21, -1, !dbg !9987
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !9987, !tbaa !3977
  %cmp16 = icmp ne i64 %dec, 0, !dbg !9988
  br i1 %cmp16, label %if.then.18, label %if.else, !dbg !9989

if.then.18:                                       ; preds = %do.body
  br label %if.end.19, !dbg !9990

if.else:                                          ; preds = %do.body
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9992, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1, !dbg !9994
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9994, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4, !dbg !9995
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !9995, !tbaa !3986
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9996, !tbaa !3867
  call void %24(%struct._object* %25), !dbg !9997
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.18
  %26 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9998
  call void @llvm.lifetime.end(i64 8, i8* %26) #3, !dbg !9998
  br label %do.cond, !dbg !10000

do.cond:                                          ; preds = %if.end.19
  br label %do.end, !dbg !10001

do.end:                                           ; preds = %do.cond
  %call20 = call %struct._object* @posix_error(), !dbg !10003
  store %struct._object* %call20, %struct._object** %retval, !dbg !10004
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10004

if.end.21:                                        ; preds = %if.end.9
  %27 = load i64, i64* %n, align 8, !dbg !10005, !tbaa !3904
  %28 = load i32, i32* %size, align 4, !dbg !10007, !tbaa !3840
  %conv22 = sext i32 %28 to i64, !dbg !10007
  %cmp23 = icmp ne i64 %27, %conv22, !dbg !10008
  br i1 %cmp23, label %if.then.25, label %if.end.27, !dbg !10009

if.then.25:                                       ; preds = %if.end.21
  %29 = load i64, i64* %n, align 8, !dbg !10010, !tbaa !3904
  %call26 = call i32 @_PyBytes_Resize(%struct._object** %buffer, i64 %29), !dbg !10011
  br label %if.end.27, !dbg !10011

if.end.27:                                        ; preds = %if.then.25, %if.end.21
  %30 = load %struct._object*, %struct._object** %buffer, align 8, !dbg !10012, !tbaa !3867
  store %struct._object* %30, %struct._object** %retval, !dbg !10013
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10013

cleanup:                                          ; preds = %if.end.27, %do.end, %if.then.8, %if.then.1, %if.then
  %31 = bitcast %struct._object** %buffer to i8*, !dbg !10014
  call void @llvm.lifetime.end(i64 8, i8* %31) #3, !dbg !10014
  %32 = bitcast i64* %n to i8*, !dbg !10014
  call void @llvm.lifetime.end(i64 8, i8* %32) #3, !dbg !10014
  %33 = bitcast i64* %offset to i8*, !dbg !10014
  call void @llvm.lifetime.end(i64 8, i8* %33) #3, !dbg !10014
  %34 = bitcast i32* %size to i8*, !dbg !10014
  call void @llvm.lifetime.end(i64 4, i8* %34) #3, !dbg !10014
  %35 = bitcast i32* %fd to i8*, !dbg !10014
  call void @llvm.lifetime.end(i64 4, i8* %35) #3, !dbg !10014
  %36 = load %struct._object*, %struct._object** %retval, !dbg !10014
  ret %struct._object* %36, !dbg !10014
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_write(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pbuf = alloca %struct.bufferinfo, align 8
  %fd = alloca i32, align 4
  %size = alloca i64, align 8
  %len = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2507, metadata !3844), !dbg !10015
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2508, metadata !3844), !dbg !10016
  %0 = bitcast %struct.bufferinfo* %pbuf to i8*, !dbg !10017
  call void @llvm.lifetime.start(i64 80, i8* %0) #3, !dbg !10017
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %pbuf, metadata !2509, metadata !3844), !dbg !10018
  %1 = bitcast i32* %fd to i8*, !dbg !10019
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !10019
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2510, metadata !3844), !dbg !10020
  %2 = bitcast i64* %size to i8*, !dbg !10021
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !10021
  call void @llvm.dbg.declare(metadata i64* %size, metadata !2511, metadata !3844), !dbg !10022
  %3 = bitcast i64* %len to i8*, !dbg !10021
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !10021
  call void @llvm.dbg.declare(metadata i64* %len, metadata !2512, metadata !3844), !dbg !10023
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10024, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.299, i32 0, i32 0), i32* %fd, %struct.bufferinfo* %pbuf), !dbg !10026
  %tobool = icmp ne i32 %call, 0, !dbg !10026
  br i1 %tobool, label %if.end, label %if.then, !dbg !10027

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10028
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10028

if.end:                                           ; preds = %entry
  %len1 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %pbuf, i32 0, i32 2, !dbg !10029
  %5 = load i64, i64* %len1, align 8, !dbg !10029, !tbaa !10030
  store i64 %5, i64* %len, align 8, !dbg !10032, !tbaa !3904
  %6 = bitcast %struct._ts** %_save to i8*, !dbg !10033
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !10033
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2513, metadata !3844), !dbg !10034
  %call2 = call %struct._ts* @PyEval_SaveThread(), !dbg !10035
  store %struct._ts* %call2, %struct._ts** %_save, align 8, !dbg !10036, !tbaa !3867
  %7 = load i32, i32* %fd, align 4, !dbg !10037, !tbaa !3840
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %pbuf, i32 0, i32 0, !dbg !10038
  %8 = load i8*, i8** %buf, align 8, !dbg !10038, !tbaa !10039
  %9 = load i64, i64* %len, align 8, !dbg !10040, !tbaa !3904
  %call3 = call i64 @write(i32 %7, i8* %8, i64 %9), !dbg !10041
  store i64 %call3, i64* %size, align 8, !dbg !10042, !tbaa !3904
  %10 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !10043, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %10), !dbg !10044
  %11 = bitcast %struct._ts** %_save to i8*, !dbg !10045
  call void @llvm.lifetime.end(i64 8, i8* %11) #3, !dbg !10045
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !10046
  %12 = load i64, i64* %size, align 8, !dbg !10047, !tbaa !3904
  %cmp = icmp slt i64 %12, 0, !dbg !10049
  br i1 %cmp, label %if.then.4, label %if.end.6, !dbg !10050

if.then.4:                                        ; preds = %if.end
  %call5 = call %struct._object* @posix_error(), !dbg !10051
  store %struct._object* %call5, %struct._object** %retval, !dbg !10052
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10052

if.end.6:                                         ; preds = %if.end
  %13 = load i64, i64* %size, align 8, !dbg !10053, !tbaa !3904
  %call7 = call %struct._object* @PyLong_FromSsize_t(i64 %13), !dbg !10054
  store %struct._object* %call7, %struct._object** %retval, !dbg !10055
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10055

cleanup:                                          ; preds = %if.end.6, %if.then.4, %if.then
  %14 = bitcast i64* %len to i8*, !dbg !10056
  call void @llvm.lifetime.end(i64 8, i8* %14) #3, !dbg !10056
  %15 = bitcast i64* %size to i8*, !dbg !10056
  call void @llvm.lifetime.end(i64 8, i8* %15) #3, !dbg !10056
  %16 = bitcast i32* %fd to i8*, !dbg !10056
  call void @llvm.lifetime.end(i64 4, i8* %16) #3, !dbg !10056
  %17 = bitcast %struct.bufferinfo* %pbuf to i8*, !dbg !10056
  call void @llvm.lifetime.end(i64 80, i8* %17) #3, !dbg !10056
  %18 = load %struct._object*, %struct._object** %retval, !dbg !10056
  ret %struct._object* %18, !dbg !10056
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_writev(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %cnt = alloca i32, align 4
  %res = alloca i64, align 8
  %seq = alloca %struct._object*, align 8
  %iov = alloca %struct.iovec*, align 8
  %buf = alloca %struct.bufferinfo*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2517, metadata !3844), !dbg !10057
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2518, metadata !3844), !dbg !10058
  %0 = bitcast i32* %fd to i8*, !dbg !10059
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !10059
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2519, metadata !3844), !dbg !10060
  %1 = bitcast i32* %cnt to i8*, !dbg !10059
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !10059
  call void @llvm.dbg.declare(metadata i32* %cnt, metadata !2520, metadata !3844), !dbg !10061
  %2 = bitcast i64* %res to i8*, !dbg !10062
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !10062
  call void @llvm.dbg.declare(metadata i64* %res, metadata !2521, metadata !3844), !dbg !10063
  %3 = bitcast %struct._object** %seq to i8*, !dbg !10064
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !10064
  call void @llvm.dbg.declare(metadata %struct._object** %seq, metadata !2522, metadata !3844), !dbg !10065
  %4 = bitcast %struct.iovec** %iov to i8*, !dbg !10066
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !10066
  call void @llvm.dbg.declare(metadata %struct.iovec** %iov, metadata !2523, metadata !3844), !dbg !10067
  %5 = bitcast %struct.bufferinfo** %buf to i8*, !dbg !10068
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !10068
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %buf, metadata !2524, metadata !3844), !dbg !10069
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10070, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %6, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.300, i32 0, i32 0), i32* %fd, %struct._object** %seq), !dbg !10072
  %tobool = icmp ne i32 %call, 0, !dbg !10072
  br i1 %tobool, label %if.end, label %if.then, !dbg !10073

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10074
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10074

if.end:                                           ; preds = %entry
  %7 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10075, !tbaa !3867
  %call1 = call i32 @PySequence_Check(%struct._object* %7), !dbg !10077
  %tobool2 = icmp ne i32 %call1, 0, !dbg !10077
  br i1 %tobool2, label %if.end.4, label %if.then.3, !dbg !10078

if.then.3:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !10079, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.301, i32 0, i32 0)), !dbg !10081
  store %struct._object* null, %struct._object** %retval, !dbg !10082
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10082

if.end.4:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10083, !tbaa !3867
  %call5 = call i64 @PySequence_Size(%struct._object* %9), !dbg !10084
  %conv = trunc i64 %call5 to i32, !dbg !10084
  store i32 %conv, i32* %cnt, align 4, !dbg !10085, !tbaa !3840
  %10 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10086, !tbaa !3867
  %11 = load i32, i32* %cnt, align 4, !dbg !10088, !tbaa !3840
  %call6 = call i64 @iov_setup(%struct.iovec** %iov, %struct.bufferinfo** %buf, %struct._object* %10, i32 %11, i32 0), !dbg !10089
  %cmp = icmp slt i64 %call6, 0, !dbg !10090
  br i1 %cmp, label %if.then.8, label %if.end.9, !dbg !10091

if.then.8:                                        ; preds = %if.end.4
  store %struct._object* null, %struct._object** %retval, !dbg !10092
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10092

if.end.9:                                         ; preds = %if.end.4
  %12 = bitcast %struct._ts** %_save to i8*, !dbg !10094
  call void @llvm.lifetime.start(i64 8, i8* %12) #3, !dbg !10094
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2525, metadata !3844), !dbg !10095
  %call10 = call %struct._ts* @PyEval_SaveThread(), !dbg !10096
  store %struct._ts* %call10, %struct._ts** %_save, align 8, !dbg !10097, !tbaa !3867
  %13 = load i32, i32* %fd, align 4, !dbg !10098, !tbaa !3840
  %14 = load %struct.iovec*, %struct.iovec** %iov, align 8, !dbg !10099, !tbaa !3867
  %15 = load i32, i32* %cnt, align 4, !dbg !10100, !tbaa !3840
  %call11 = call i64 @writev(i32 %13, %struct.iovec* %14, i32 %15), !dbg !10101
  store i64 %call11, i64* %res, align 8, !dbg !10102, !tbaa !3904
  %16 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !10103, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %16), !dbg !10104
  %17 = bitcast %struct._ts** %_save to i8*, !dbg !10105
  call void @llvm.lifetime.end(i64 8, i8* %17) #3, !dbg !10105
  %18 = load %struct.iovec*, %struct.iovec** %iov, align 8, !dbg !10106, !tbaa !3867
  %19 = load %struct.bufferinfo*, %struct.bufferinfo** %buf, align 8, !dbg !10107, !tbaa !3867
  %20 = load i32, i32* %cnt, align 4, !dbg !10108, !tbaa !3840
  call void @iov_cleanup(%struct.iovec* %18, %struct.bufferinfo* %19, i32 %20), !dbg !10109
  %21 = load i64, i64* %res, align 8, !dbg !10110, !tbaa !3904
  %cmp12 = icmp slt i64 %21, 0, !dbg !10112
  br i1 %cmp12, label %if.then.14, label %if.end.16, !dbg !10113

if.then.14:                                       ; preds = %if.end.9
  %call15 = call %struct._object* @posix_error(), !dbg !10114
  store %struct._object* %call15, %struct._object** %retval, !dbg !10115
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10115

if.end.16:                                        ; preds = %if.end.9
  %22 = load i64, i64* %res, align 8, !dbg !10116, !tbaa !3904
  %call17 = call %struct._object* @PyLong_FromSsize_t(i64 %22), !dbg !10117
  store %struct._object* %call17, %struct._object** %retval, !dbg !10118
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10118

cleanup:                                          ; preds = %if.end.16, %if.then.14, %if.then.8, %if.then.3, %if.then
  %23 = bitcast %struct.bufferinfo** %buf to i8*, !dbg !10119
  call void @llvm.lifetime.end(i64 8, i8* %23) #3, !dbg !10119
  %24 = bitcast %struct.iovec** %iov to i8*, !dbg !10119
  call void @llvm.lifetime.end(i64 8, i8* %24) #3, !dbg !10119
  %25 = bitcast %struct._object** %seq to i8*, !dbg !10119
  call void @llvm.lifetime.end(i64 8, i8* %25) #3, !dbg !10119
  %26 = bitcast i64* %res to i8*, !dbg !10119
  call void @llvm.lifetime.end(i64 8, i8* %26) #3, !dbg !10119
  %27 = bitcast i32* %cnt to i8*, !dbg !10119
  call void @llvm.lifetime.end(i64 4, i8* %27) #3, !dbg !10119
  %28 = bitcast i32* %fd to i8*, !dbg !10119
  call void @llvm.lifetime.end(i64 4, i8* %28) #3, !dbg !10119
  %29 = load %struct._object*, %struct._object** %retval, !dbg !10119
  ret %struct._object* %29, !dbg !10119
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_pwrite(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pbuf = alloca %struct.bufferinfo, align 8
  %fd = alloca i32, align 4
  %offset = alloca i64, align 8
  %size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2529, metadata !3844), !dbg !10120
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2530, metadata !3844), !dbg !10121
  %0 = bitcast %struct.bufferinfo* %pbuf to i8*, !dbg !10122
  call void @llvm.lifetime.start(i64 80, i8* %0) #3, !dbg !10122
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %pbuf, metadata !2531, metadata !3844), !dbg !10123
  %1 = bitcast i32* %fd to i8*, !dbg !10124
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !10124
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2532, metadata !3844), !dbg !10125
  %2 = bitcast i64* %offset to i8*, !dbg !10126
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !10126
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !2533, metadata !3844), !dbg !10127
  %3 = bitcast i64* %size to i8*, !dbg !10128
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !10128
  call void @llvm.dbg.declare(metadata i64* %size, metadata !2534, metadata !3844), !dbg !10129
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10130, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.302, i32 0, i32 0), i32* %fd, %struct.bufferinfo* %pbuf, i32 (%struct._object*, i8*)* @_parse_off_t, i64* %offset), !dbg !10132
  %tobool = icmp ne i32 %call, 0, !dbg !10132
  br i1 %tobool, label %if.end, label %if.then, !dbg !10133

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10134
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10134

if.end:                                           ; preds = %entry
  %5 = bitcast %struct._ts** %_save to i8*, !dbg !10135
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !10135
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2535, metadata !3844), !dbg !10136
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !10137
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !10138, !tbaa !3867
  %6 = load i32, i32* %fd, align 4, !dbg !10139, !tbaa !3840
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %pbuf, i32 0, i32 0, !dbg !10140
  %7 = load i8*, i8** %buf, align 8, !dbg !10140, !tbaa !10039
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %pbuf, i32 0, i32 2, !dbg !10141
  %8 = load i64, i64* %len, align 8, !dbg !10141, !tbaa !10030
  %9 = load i64, i64* %offset, align 8, !dbg !10142, !tbaa !3904
  %call2 = call i64 @pwrite64(i32 %6, i8* %7, i64 %8, i64 %9), !dbg !10143
  store i64 %call2, i64* %size, align 8, !dbg !10144, !tbaa !3904
  %10 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !10145, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %10), !dbg !10146
  %11 = bitcast %struct._ts** %_save to i8*, !dbg !10147
  call void @llvm.lifetime.end(i64 8, i8* %11) #3, !dbg !10147
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !10148
  %12 = load i64, i64* %size, align 8, !dbg !10149, !tbaa !3904
  %cmp = icmp slt i64 %12, 0, !dbg !10151
  br i1 %cmp, label %if.then.3, label %if.end.5, !dbg !10152

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !10153
  store %struct._object* %call4, %struct._object** %retval, !dbg !10154
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10154

if.end.5:                                         ; preds = %if.end
  %13 = load i64, i64* %size, align 8, !dbg !10155, !tbaa !3904
  %call6 = call %struct._object* @PyLong_FromSsize_t(i64 %13), !dbg !10156
  store %struct._object* %call6, %struct._object** %retval, !dbg !10157
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10157

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %14 = bitcast i64* %size to i8*, !dbg !10158
  call void @llvm.lifetime.end(i64 8, i8* %14) #3, !dbg !10158
  %15 = bitcast i64* %offset to i8*, !dbg !10158
  call void @llvm.lifetime.end(i64 8, i8* %15) #3, !dbg !10158
  %16 = bitcast i32* %fd to i8*, !dbg !10158
  call void @llvm.lifetime.end(i64 4, i8* %16) #3, !dbg !10158
  %17 = bitcast %struct.bufferinfo* %pbuf to i8*, !dbg !10158
  call void @llvm.lifetime.end(i64 80, i8* %17) #3, !dbg !10158
  %18 = load %struct._object*, %struct._object** %retval, !dbg !10158
  ret %struct._object* %18, !dbg !10158
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_sendfile(%struct._object* %self, %struct._object* %args, %struct._object* %kwdict) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwdict.addr = alloca %struct._object*, align 8
  %in = alloca i32, align 4
  %out = alloca i32, align 4
  %ret = alloca i64, align 8
  %offset = alloca i64, align 8
  %count = alloca i64, align 8
  %offobj = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %_save14 = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2539, metadata !3844), !dbg !10159
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2540, metadata !3844), !dbg !10160
  store %struct._object* %kwdict, %struct._object** %kwdict.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwdict.addr, metadata !2541, metadata !3844), !dbg !10161
  %0 = bitcast i32* %in to i8*, !dbg !10162
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !10162
  call void @llvm.dbg.declare(metadata i32* %in, metadata !2542, metadata !3844), !dbg !10163
  %1 = bitcast i32* %out to i8*, !dbg !10162
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !10162
  call void @llvm.dbg.declare(metadata i32* %out, metadata !2543, metadata !3844), !dbg !10164
  %2 = bitcast i64* %ret to i8*, !dbg !10165
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !10165
  call void @llvm.dbg.declare(metadata i64* %ret, metadata !2544, metadata !3844), !dbg !10166
  %3 = bitcast i64* %offset to i8*, !dbg !10167
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !10167
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !2545, metadata !3844), !dbg !10168
  %4 = bitcast i64* %count to i8*, !dbg !10169
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !10169
  call void @llvm.dbg.declare(metadata i64* %count, metadata !2546, metadata !3844), !dbg !10170
  %5 = bitcast %struct._object** %offobj to i8*, !dbg !10171
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !10171
  call void @llvm.dbg.declare(metadata %struct._object** %offobj, metadata !2547, metadata !3844), !dbg !10172
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10173, !tbaa !3867
  %7 = load %struct._object*, %struct._object** %kwdict.addr, align 8, !dbg !10175, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %6, %struct._object* %7, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.307, i32 0, i32 0), i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @posix_sendfile.keywords, i32 0, i32 0), i32* %out, i32* %in, %struct._object** %offobj, i64* %count), !dbg !10176
  %tobool = icmp ne i32 %call, 0, !dbg !10176
  br i1 %tobool, label %if.end, label %if.then, !dbg !10177

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10178
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10178

if.end:                                           ; preds = %entry
  %8 = load %struct._object*, %struct._object** %offobj, align 8, !dbg !10179, !tbaa !3867
  %cmp = icmp eq %struct._object* %8, @_Py_NoneStruct, !dbg !10180
  br i1 %cmp, label %if.then.1, label %if.end.9, !dbg !10181

if.then.1:                                        ; preds = %if.end
  %9 = bitcast %struct._ts** %_save to i8*, !dbg !10182
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !10182
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2548, metadata !3844), !dbg !10183
  %call2 = call %struct._ts* @PyEval_SaveThread(), !dbg !10184
  store %struct._ts* %call2, %struct._ts** %_save, align 8, !dbg !10185, !tbaa !3867
  %10 = load i32, i32* %out, align 4, !dbg !10186, !tbaa !3840
  %11 = load i32, i32* %in, align 4, !dbg !10187, !tbaa !3840
  %12 = load i64, i64* %count, align 8, !dbg !10188, !tbaa !3904
  %call3 = call i64 @sendfile64(i32 %10, i32 %11, i64* null, i64 %12) #3, !dbg !10189
  store i64 %call3, i64* %ret, align 8, !dbg !10190, !tbaa !3904
  %13 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !10191, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %13), !dbg !10192
  %14 = bitcast %struct._ts** %_save to i8*, !dbg !10193
  call void @llvm.lifetime.end(i64 8, i8* %14) #3, !dbg !10193
  %15 = load i64, i64* %ret, align 8, !dbg !10194, !tbaa !3904
  %cmp4 = icmp slt i64 %15, 0, !dbg !10196
  br i1 %cmp4, label %if.then.5, label %if.end.7, !dbg !10197

if.then.5:                                        ; preds = %if.then.1
  %call6 = call %struct._object* @posix_error(), !dbg !10198
  store %struct._object* %call6, %struct._object** %retval, !dbg !10199
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10199

if.end.7:                                         ; preds = %if.then.1
  %16 = load i64, i64* %ret, align 8, !dbg !10200, !tbaa !3904
  %call8 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.308, i32 0, i32 0), i64 %16), !dbg !10201
  store %struct._object* %call8, %struct._object** %retval, !dbg !10202
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10202

if.end.9:                                         ; preds = %if.end
  %17 = load %struct._object*, %struct._object** %offobj, align 8, !dbg !10203, !tbaa !3867
  %18 = bitcast i64* %offset to i8*, !dbg !10205
  %call10 = call i32 @_parse_off_t(%struct._object* %17, i8* %18), !dbg !10206
  %tobool11 = icmp ne i32 %call10, 0, !dbg !10206
  br i1 %tobool11, label %if.end.13, label %if.then.12, !dbg !10207

if.then.12:                                       ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval, !dbg !10208
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10208

if.end.13:                                        ; preds = %if.end.9
  %19 = bitcast %struct._ts** %_save14 to i8*, !dbg !10209
  call void @llvm.lifetime.start(i64 8, i8* %19) #3, !dbg !10209
  call void @llvm.dbg.declare(metadata %struct._ts** %_save14, metadata !2552, metadata !3844), !dbg !10210
  %call15 = call %struct._ts* @PyEval_SaveThread(), !dbg !10211
  store %struct._ts* %call15, %struct._ts** %_save14, align 8, !dbg !10212, !tbaa !3867
  %20 = load i32, i32* %out, align 4, !dbg !10213, !tbaa !3840
  %21 = load i32, i32* %in, align 4, !dbg !10214, !tbaa !3840
  %22 = load i64, i64* %count, align 8, !dbg !10215, !tbaa !3904
  %call16 = call i64 @sendfile64(i32 %20, i32 %21, i64* %offset, i64 %22) #3, !dbg !10216
  store i64 %call16, i64* %ret, align 8, !dbg !10217, !tbaa !3904
  %23 = load %struct._ts*, %struct._ts** %_save14, align 8, !dbg !10218, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %23), !dbg !10219
  %24 = bitcast %struct._ts** %_save14 to i8*, !dbg !10220
  call void @llvm.lifetime.end(i64 8, i8* %24) #3, !dbg !10220
  %25 = load i64, i64* %ret, align 8, !dbg !10221, !tbaa !3904
  %cmp17 = icmp slt i64 %25, 0, !dbg !10223
  br i1 %cmp17, label %if.then.18, label %if.end.20, !dbg !10224

if.then.18:                                       ; preds = %if.end.13
  %call19 = call %struct._object* @posix_error(), !dbg !10225
  store %struct._object* %call19, %struct._object** %retval, !dbg !10226
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10226

if.end.20:                                        ; preds = %if.end.13
  %26 = load i64, i64* %ret, align 8, !dbg !10227, !tbaa !3904
  %call21 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.308, i32 0, i32 0), i64 %26), !dbg !10228
  store %struct._object* %call21, %struct._object** %retval, !dbg !10229
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10229

cleanup:                                          ; preds = %if.end.20, %if.then.18, %if.then.12, %if.end.7, %if.then.5, %if.then
  %27 = bitcast %struct._object** %offobj to i8*, !dbg !10230
  call void @llvm.lifetime.end(i64 8, i8* %27) #3, !dbg !10230
  %28 = bitcast i64* %count to i8*, !dbg !10230
  call void @llvm.lifetime.end(i64 8, i8* %28) #3, !dbg !10230
  %29 = bitcast i64* %offset to i8*, !dbg !10230
  call void @llvm.lifetime.end(i64 8, i8* %29) #3, !dbg !10230
  %30 = bitcast i64* %ret to i8*, !dbg !10230
  call void @llvm.lifetime.end(i64 8, i8* %30) #3, !dbg !10230
  %31 = bitcast i32* %out to i8*, !dbg !10230
  call void @llvm.lifetime.end(i64 4, i8* %31) #3, !dbg !10230
  %32 = bitcast i32* %in to i8*, !dbg !10230
  call void @llvm.lifetime.end(i64 4, i8* %32) #3, !dbg !10230
  %33 = load %struct._object*, %struct._object** %retval, !dbg !10230
  ret %struct._object* %33, !dbg !10230
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_fstat(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %st = alloca %struct.stat, align 8
  %res = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2556, metadata !3844), !dbg !10231
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2557, metadata !3844), !dbg !10232
  %0 = bitcast i32* %fd to i8*, !dbg !10233
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !10233
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2558, metadata !3844), !dbg !10234
  %1 = bitcast %struct.stat* %st to i8*, !dbg !10235
  call void @llvm.lifetime.start(i64 144, i8* %1) #3, !dbg !10235
  call void @llvm.dbg.declare(metadata %struct.stat* %st, metadata !2559, metadata !3844), !dbg !10236
  %2 = bitcast i32* %res to i8*, !dbg !10237
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !10237
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2560, metadata !3844), !dbg !10238
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10239, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.309, i32 0, i32 0), i32* %fd), !dbg !10241
  %tobool = icmp ne i32 %call, 0, !dbg !10241
  br i1 %tobool, label %if.end, label %if.then, !dbg !10242

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10243
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10243

if.end:                                           ; preds = %entry
  %4 = bitcast %struct._ts** %_save to i8*, !dbg !10244
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !10244
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2561, metadata !3844), !dbg !10245
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !10246
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !10247, !tbaa !3867
  %5 = load i32, i32* %fd, align 4, !dbg !10248, !tbaa !3840
  %call2 = call i32 bitcast (i32 (i32, %struct.stat64*)* @fstat64 to i32 (i32, %struct.stat*)*)(i32 %5, %struct.stat* %st) #3, !dbg !10249
  store i32 %call2, i32* %res, align 4, !dbg !10250, !tbaa !3840
  %6 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !10251, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %6), !dbg !10252
  %7 = bitcast %struct._ts** %_save to i8*, !dbg !10253
  call void @llvm.lifetime.end(i64 8, i8* %7) #3, !dbg !10253
  %8 = load i32, i32* %res, align 4, !dbg !10254, !tbaa !3840
  %cmp = icmp ne i32 %8, 0, !dbg !10256
  br i1 %cmp, label %if.then.3, label %if.end.5, !dbg !10257

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !10258
  store %struct._object* %call4, %struct._object** %retval, !dbg !10260
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10260

if.end.5:                                         ; preds = %if.end
  %call6 = call %struct._object* @_pystat_fromstructstat(%struct.stat* %st), !dbg !10261
  store %struct._object* %call6, %struct._object** %retval, !dbg !10262
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10262

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %9 = bitcast i32* %res to i8*, !dbg !10263
  call void @llvm.lifetime.end(i64 4, i8* %9) #3, !dbg !10263
  %10 = bitcast %struct.stat* %st to i8*, !dbg !10263
  call void @llvm.lifetime.end(i64 144, i8* %10) #3, !dbg !10263
  %11 = bitcast i32* %fd to i8*, !dbg !10263
  call void @llvm.lifetime.end(i64 4, i8* %11) #3, !dbg !10263
  %12 = load %struct._object*, %struct._object** %retval, !dbg !10263
  ret %struct._object* %12, !dbg !10263
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_isatty(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2565, metadata !3844), !dbg !10264
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2566, metadata !3844), !dbg !10265
  %0 = bitcast i32* %fd to i8*, !dbg !10266
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !10266
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2567, metadata !3844), !dbg !10267
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10268, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.310, i32 0, i32 0), i32* %fd), !dbg !10270
  %tobool = icmp ne i32 %call, 0, !dbg !10270
  br i1 %tobool, label %if.end, label %if.then, !dbg !10271

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10272
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10272

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %fd, align 4, !dbg !10273, !tbaa !3840
  %call1 = call i32 @isatty(i32 %2) #3, !dbg !10274
  %conv = sext i32 %call1 to i64, !dbg !10274
  %call2 = call %struct._object* @PyBool_FromLong(i64 %conv), !dbg !10275
  store %struct._object* %call2, %struct._object** %retval, !dbg !10276
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10276

cleanup:                                          ; preds = %if.end, %if.then
  %3 = bitcast i32* %fd to i8*, !dbg !10277
  call void @llvm.lifetime.end(i64 4, i8* %3) #3, !dbg !10277
  %4 = load %struct._object*, %struct._object** %retval, !dbg !10277
  ret %struct._object* %4, !dbg !10277
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_pipe(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  %fds = alloca [2 x i32], align 4
  %res = alloca i32, align 4
  %_save = alloca %struct._ts*, align 8
  %_save4 = alloca %struct._ts*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2570, metadata !3844), !dbg !10278
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !2571, metadata !3844), !dbg !10279
  %0 = bitcast [2 x i32]* %fds to i8*, !dbg !10280
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !10280
  call void @llvm.dbg.declare(metadata [2 x i32]* %fds, metadata !2572, metadata !3844), !dbg !10281
  %1 = bitcast i32* %res to i8*, !dbg !10282
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !10282
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2574, metadata !3844), !dbg !10283
  %2 = bitcast %struct._ts** %_save to i8*, !dbg !10284
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !10284
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2575, metadata !3844), !dbg !10285
  %call = call %struct._ts* @PyEval_SaveThread(), !dbg !10286
  store %struct._ts* %call, %struct._ts** %_save, align 8, !dbg !10287, !tbaa !3867
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %fds, i32 0, i32 0, !dbg !10288
  %call1 = call i32 @pipe2(i32* %arraydecay, i32 524288) #3, !dbg !10289
  store i32 %call1, i32* %res, align 4, !dbg !10290, !tbaa !3840
  %3 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !10291, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %3), !dbg !10292
  %4 = bitcast %struct._ts** %_save to i8*, !dbg !10293
  call void @llvm.lifetime.end(i64 8, i8* %4) #3, !dbg !10293
  %5 = load i32, i32* %res, align 4, !dbg !10294, !tbaa !3840
  %cmp = icmp ne i32 %5, 0, !dbg !10295
  br i1 %cmp, label %land.lhs.true, label %if.end.27, !dbg !10296

land.lhs.true:                                    ; preds = %entry
  %call2 = call i32* @__errno_location() #1, !dbg !10297
  %6 = load i32, i32* %call2, align 4, !dbg !10299, !tbaa !3840
  %cmp3 = icmp eq i32 %6, 38, !dbg !10300
  br i1 %cmp3, label %if.then, label %if.end.27, !dbg !10301

if.then:                                          ; preds = %land.lhs.true
  %7 = bitcast %struct._ts** %_save4 to i8*, !dbg !10302
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !10302
  call void @llvm.dbg.declare(metadata %struct._ts** %_save4, metadata !2577, metadata !3844), !dbg !10303
  %call5 = call %struct._ts* @PyEval_SaveThread(), !dbg !10304
  store %struct._ts* %call5, %struct._ts** %_save4, align 8, !dbg !10305, !tbaa !3867
  %arraydecay6 = getelementptr inbounds [2 x i32], [2 x i32]* %fds, i32 0, i32 0, !dbg !10306
  %call7 = call i32 @pipe(i32* %arraydecay6) #3, !dbg !10307
  store i32 %call7, i32* %res, align 4, !dbg !10308, !tbaa !3840
  %8 = load %struct._ts*, %struct._ts** %_save4, align 8, !dbg !10309, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %8), !dbg !10310
  %9 = bitcast %struct._ts** %_save4 to i8*, !dbg !10311
  call void @llvm.lifetime.end(i64 8, i8* %9) #3, !dbg !10311
  %10 = load i32, i32* %res, align 4, !dbg !10312, !tbaa !3840
  %cmp8 = icmp eq i32 %10, 0, !dbg !10314
  br i1 %cmp8, label %if.then.9, label %if.end.26, !dbg !10315

if.then.9:                                        ; preds = %if.then
  %arrayidx = getelementptr [2 x i32], [2 x i32]* %fds, i32 0, i64 0, !dbg !10316
  %11 = load i32, i32* %arrayidx, align 4, !dbg !10316, !tbaa !3840
  %call10 = call i32 @_Py_set_inheritable(i32 %11, i32 0, i32* null), !dbg !10319
  %cmp11 = icmp slt i32 %call10, 0, !dbg !10320
  br i1 %cmp11, label %if.then.12, label %if.end, !dbg !10321

if.then.12:                                       ; preds = %if.then.9
  %arrayidx13 = getelementptr [2 x i32], [2 x i32]* %fds, i32 0, i64 0, !dbg !10322
  %12 = load i32, i32* %arrayidx13, align 4, !dbg !10322, !tbaa !3840
  %call14 = call i32 @close(i32 %12), !dbg !10324
  %arrayidx15 = getelementptr [2 x i32], [2 x i32]* %fds, i32 0, i64 1, !dbg !10325
  %13 = load i32, i32* %arrayidx15, align 4, !dbg !10325, !tbaa !3840
  %call16 = call i32 @close(i32 %13), !dbg !10326
  store %struct._object* null, %struct._object** %retval, !dbg !10327
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10327

if.end:                                           ; preds = %if.then.9
  %arrayidx17 = getelementptr [2 x i32], [2 x i32]* %fds, i32 0, i64 1, !dbg !10328
  %14 = load i32, i32* %arrayidx17, align 4, !dbg !10328, !tbaa !3840
  %call18 = call i32 @_Py_set_inheritable(i32 %14, i32 0, i32* null), !dbg !10330
  %cmp19 = icmp slt i32 %call18, 0, !dbg !10331
  br i1 %cmp19, label %if.then.20, label %if.end.25, !dbg !10332

if.then.20:                                       ; preds = %if.end
  %arrayidx21 = getelementptr [2 x i32], [2 x i32]* %fds, i32 0, i64 0, !dbg !10333
  %15 = load i32, i32* %arrayidx21, align 4, !dbg !10333, !tbaa !3840
  %call22 = call i32 @close(i32 %15), !dbg !10335
  %arrayidx23 = getelementptr [2 x i32], [2 x i32]* %fds, i32 0, i64 1, !dbg !10336
  %16 = load i32, i32* %arrayidx23, align 4, !dbg !10336, !tbaa !3840
  %call24 = call i32 @close(i32 %16), !dbg !10337
  store %struct._object* null, %struct._object** %retval, !dbg !10338
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10338

if.end.25:                                        ; preds = %if.end
  br label %if.end.26, !dbg !10339

if.end.26:                                        ; preds = %if.end.25, %if.then
  br label %if.end.27, !dbg !10340

if.end.27:                                        ; preds = %if.end.26, %land.lhs.true, %entry
  %17 = load i32, i32* %res, align 4, !dbg !10341, !tbaa !3840
  %cmp28 = icmp ne i32 %17, 0, !dbg !10343
  br i1 %cmp28, label %if.then.29, label %if.end.31, !dbg !10344

if.then.29:                                       ; preds = %if.end.27
  %18 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !10345, !tbaa !3867
  %call30 = call %struct._object* @PyErr_SetFromErrno(%struct._object* %18), !dbg !10346
  store %struct._object* %call30, %struct._object** %retval, !dbg !10347
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10347

if.end.31:                                        ; preds = %if.end.27
  %arrayidx32 = getelementptr [2 x i32], [2 x i32]* %fds, i32 0, i64 0, !dbg !10348
  %19 = load i32, i32* %arrayidx32, align 4, !dbg !10348, !tbaa !3840
  %arrayidx33 = getelementptr [2 x i32], [2 x i32]* %fds, i32 0, i64 1, !dbg !10349
  %20 = load i32, i32* %arrayidx33, align 4, !dbg !10349, !tbaa !3840
  %call34 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.254, i32 0, i32 0), i32 %19, i32 %20), !dbg !10350
  store %struct._object* %call34, %struct._object** %retval, !dbg !10351
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10351

cleanup:                                          ; preds = %if.end.31, %if.then.29, %if.then.20, %if.then.12
  %21 = bitcast i32* %res to i8*, !dbg !10352
  call void @llvm.lifetime.end(i64 4, i8* %21) #3, !dbg !10352
  %22 = bitcast [2 x i32]* %fds to i8*, !dbg !10352
  call void @llvm.lifetime.end(i64 8, i8* %22) #3, !dbg !10352
  %23 = load %struct._object*, %struct._object** %retval, !dbg !10352
  ret %struct._object* %23, !dbg !10352
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_pipe2(%struct._object* %self, %struct._object* %arg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %flags = alloca i32, align 4
  %fds = alloca [2 x i32], align 4
  %res = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2583, metadata !3844), !dbg !10353
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !2584, metadata !3844), !dbg !10354
  %0 = bitcast i32* %flags to i8*, !dbg !10355
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !10355
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !2585, metadata !3844), !dbg !10356
  %1 = bitcast [2 x i32]* %fds to i8*, !dbg !10357
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !10357
  call void @llvm.dbg.declare(metadata [2 x i32]* %fds, metadata !2586, metadata !3844), !dbg !10358
  %2 = bitcast i32* %res to i8*, !dbg !10359
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !10359
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2587, metadata !3844), !dbg !10360
  %3 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !10361, !tbaa !3867
  %call = call i32 @_PyLong_AsInt(%struct._object* %3), !dbg !10362
  store i32 %call, i32* %flags, align 4, !dbg !10363, !tbaa !3840
  %4 = load i32, i32* %flags, align 4, !dbg !10364, !tbaa !3840
  %cmp = icmp eq i32 %4, -1, !dbg !10366
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !10367

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred(), !dbg !10368
  %tobool = icmp ne %struct._object* %call1, null, !dbg !10368
  br i1 %tobool, label %if.then, label %if.end, !dbg !10370

if.then:                                          ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval, !dbg !10371
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10371

if.end:                                           ; preds = %land.lhs.true, %entry
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %fds, i32 0, i32 0, !dbg !10372
  %5 = load i32, i32* %flags, align 4, !dbg !10373, !tbaa !3840
  %call2 = call i32 @pipe2(i32* %arraydecay, i32 %5) #3, !dbg !10374
  store i32 %call2, i32* %res, align 4, !dbg !10375, !tbaa !3840
  %6 = load i32, i32* %res, align 4, !dbg !10376, !tbaa !3840
  %cmp3 = icmp ne i32 %6, 0, !dbg !10378
  br i1 %cmp3, label %if.then.4, label %if.end.6, !dbg !10379

if.then.4:                                        ; preds = %if.end
  %call5 = call %struct._object* @posix_error(), !dbg !10380
  store %struct._object* %call5, %struct._object** %retval, !dbg !10381
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10381

if.end.6:                                         ; preds = %if.end
  %arrayidx = getelementptr [2 x i32], [2 x i32]* %fds, i32 0, i64 0, !dbg !10382
  %7 = load i32, i32* %arrayidx, align 4, !dbg !10382, !tbaa !3840
  %arrayidx7 = getelementptr [2 x i32], [2 x i32]* %fds, i32 0, i64 1, !dbg !10383
  %8 = load i32, i32* %arrayidx7, align 4, !dbg !10383, !tbaa !3840
  %call8 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.254, i32 0, i32 0), i32 %7, i32 %8), !dbg !10384
  store %struct._object* %call8, %struct._object** %retval, !dbg !10385
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10385

cleanup:                                          ; preds = %if.end.6, %if.then.4, %if.then
  %9 = bitcast i32* %res to i8*, !dbg !10386
  call void @llvm.lifetime.end(i64 4, i8* %9) #3, !dbg !10386
  %10 = bitcast [2 x i32]* %fds to i8*, !dbg !10386
  call void @llvm.lifetime.end(i64 8, i8* %10) #3, !dbg !10386
  %11 = bitcast i32* %flags to i8*, !dbg !10386
  call void @llvm.lifetime.end(i64 4, i8* %11) #3, !dbg !10386
  %12 = load %struct._object*, %struct._object** %retval, !dbg !10386
  ret %struct._object* %12, !dbg !10386
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_mkfifo(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %mode = alloca i32, align 4
  %dir_fd = alloca i32, align 4
  %result = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2590, metadata !3844), !dbg !10387
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2591, metadata !3844), !dbg !10388
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !2592, metadata !3844), !dbg !10389
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !10390
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !10390
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !2593, metadata !3844), !dbg !10391
  %1 = bitcast i32* %mode to i8*, !dbg !10392
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !10392
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !2594, metadata !3844), !dbg !10393
  store i32 438, i32* %mode, align 4, !dbg !10393, !tbaa !3840
  %2 = bitcast i32* %dir_fd to i8*, !dbg !10394
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !10394
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !2595, metadata !3844), !dbg !10395
  store i32 -100, i32* %dir_fd, align 4, !dbg !10395, !tbaa !3840
  %3 = bitcast i32* %result to i8*, !dbg !10396
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !10396
  call void @llvm.dbg.declare(metadata i32* %result, metadata !2596, metadata !3844), !dbg !10397
  %4 = bitcast %struct._object** %return_value to i8*, !dbg !10398
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !10398
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !2597, metadata !3844), !dbg !10399
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !10399, !tbaa !3867
  %5 = bitcast %struct.path_t* %path to i8*, !dbg !10400
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 72, i32 8, i1 false), !dbg !10400
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10401, !tbaa !3867
  %7 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !10403, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %6, %struct._object* %7, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.311, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @posix_mkfifo.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32* %mode, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dir_fd), !dbg !10404
  %tobool = icmp ne i32 %call, 0, !dbg !10404
  br i1 %tobool, label %if.end, label %if.then, !dbg !10405

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10406
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10406

if.end:                                           ; preds = %entry
  %8 = bitcast %struct._ts** %_save to i8*, !dbg !10407
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !10407
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2598, metadata !3844), !dbg !10408
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !10409
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !10410, !tbaa !3867
  %9 = load i32, i32* %dir_fd, align 4, !dbg !10411, !tbaa !3840
  %cmp = icmp ne i32 %9, -100, !dbg !10413
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !10414

if.then.2:                                        ; preds = %if.end
  %10 = load i32, i32* %dir_fd, align 4, !dbg !10415, !tbaa !3840
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !10416
  %11 = load i8*, i8** %narrow, align 8, !dbg !10416, !tbaa !5537
  %12 = load i32, i32* %mode, align 4, !dbg !10417, !tbaa !3840
  %call3 = call i32 @mkfifoat(i32 %10, i8* %11, i32 %12) #3, !dbg !10418
  store i32 %call3, i32* %result, align 4, !dbg !10419, !tbaa !3840
  br label %if.end.6, !dbg !10420

if.else:                                          ; preds = %if.end
  %narrow4 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !10421
  %13 = load i8*, i8** %narrow4, align 8, !dbg !10421, !tbaa !5537
  %14 = load i32, i32* %mode, align 4, !dbg !10422, !tbaa !3840
  %call5 = call i32 @mkfifo(i8* %13, i32 %14) #3, !dbg !10423
  store i32 %call5, i32* %result, align 4, !dbg !10424, !tbaa !3840
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.2
  %15 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !10425, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %15), !dbg !10426
  %16 = bitcast %struct._ts** %_save to i8*, !dbg !10427
  call void @llvm.lifetime.end(i64 8, i8* %16) #3, !dbg !10427
  %17 = load i32, i32* %result, align 4, !dbg !10428, !tbaa !3840
  %cmp7 = icmp slt i32 %17, 0, !dbg !10430
  br i1 %cmp7, label %if.then.8, label %if.end.10, !dbg !10431

if.then.8:                                        ; preds = %if.end.6
  %call9 = call %struct._object* @posix_error(), !dbg !10432
  store %struct._object* %call9, %struct._object** %return_value, align 8, !dbg !10434, !tbaa !3867
  br label %exit, !dbg !10435

if.end.10:                                        ; preds = %if.end.6
  store %struct._object* @_Py_NoneStruct, %struct._object** %return_value, align 8, !dbg !10436, !tbaa !3867
  %18 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10437, !tbaa !3977
  %inc = add i64 %18, 1, !dbg !10437
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10437, !tbaa !3977
  br label %exit, !dbg !10438

exit:                                             ; preds = %if.end.10, %if.then.8
  call void @path_cleanup(%struct.path_t* %path), !dbg !10439
  %19 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !10440, !tbaa !3867
  store %struct._object* %19, %struct._object** %retval, !dbg !10441
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10441

cleanup:                                          ; preds = %exit, %if.then
  %20 = bitcast %struct._object** %return_value to i8*, !dbg !10442
  call void @llvm.lifetime.end(i64 8, i8* %20) #3, !dbg !10442
  %21 = bitcast i32* %result to i8*, !dbg !10442
  call void @llvm.lifetime.end(i64 4, i8* %21) #3, !dbg !10442
  %22 = bitcast i32* %dir_fd to i8*, !dbg !10442
  call void @llvm.lifetime.end(i64 4, i8* %22) #3, !dbg !10442
  %23 = bitcast i32* %mode to i8*, !dbg !10442
  call void @llvm.lifetime.end(i64 4, i8* %23) #3, !dbg !10442
  %24 = bitcast %struct.path_t* %path to i8*, !dbg !10442
  call void @llvm.lifetime.end(i64 72, i8* %24) #3, !dbg !10442
  %25 = load %struct._object*, %struct._object** %retval, !dbg !10442
  ret %struct._object* %25, !dbg !10442
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_mknod(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %mode = alloca i32, align 4
  %device = alloca i32, align 4
  %dir_fd = alloca i32, align 4
  %result = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2602, metadata !3844), !dbg !10443
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2603, metadata !3844), !dbg !10444
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !2604, metadata !3844), !dbg !10445
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !10446
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !10446
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !2605, metadata !3844), !dbg !10447
  %1 = bitcast i32* %mode to i8*, !dbg !10448
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !10448
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !2606, metadata !3844), !dbg !10449
  store i32 438, i32* %mode, align 4, !dbg !10449, !tbaa !3840
  %2 = bitcast i32* %device to i8*, !dbg !10450
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !10450
  call void @llvm.dbg.declare(metadata i32* %device, metadata !2607, metadata !3844), !dbg !10451
  store i32 0, i32* %device, align 4, !dbg !10451, !tbaa !3840
  %3 = bitcast i32* %dir_fd to i8*, !dbg !10452
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !10452
  call void @llvm.dbg.declare(metadata i32* %dir_fd, metadata !2608, metadata !3844), !dbg !10453
  store i32 -100, i32* %dir_fd, align 4, !dbg !10453, !tbaa !3840
  %4 = bitcast i32* %result to i8*, !dbg !10454
  call void @llvm.lifetime.start(i64 4, i8* %4) #3, !dbg !10454
  call void @llvm.dbg.declare(metadata i32* %result, metadata !2609, metadata !3844), !dbg !10455
  %5 = bitcast %struct._object** %return_value to i8*, !dbg !10456
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !10456
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !2610, metadata !3844), !dbg !10457
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !10457, !tbaa !3867
  %6 = bitcast %struct.path_t* %path to i8*, !dbg !10458
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 72, i32 8, i1 false), !dbg !10458
  %7 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10459, !tbaa !3867
  %8 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !10461, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %7, %struct._object* %8, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.313, i32 0, i32 0), i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @posix_mknod.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32* %mode, i32* %device, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dir_fd), !dbg !10462
  %tobool = icmp ne i32 %call, 0, !dbg !10462
  br i1 %tobool, label %if.end, label %if.then, !dbg !10463

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10464
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10464

if.end:                                           ; preds = %entry
  %9 = bitcast %struct._ts** %_save to i8*, !dbg !10465
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !10465
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2611, metadata !3844), !dbg !10466
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !10467
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !10468, !tbaa !3867
  %10 = load i32, i32* %dir_fd, align 4, !dbg !10469, !tbaa !3840
  %cmp = icmp ne i32 %10, -100, !dbg !10471
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !10472

if.then.2:                                        ; preds = %if.end
  %11 = load i32, i32* %dir_fd, align 4, !dbg !10473, !tbaa !3840
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !10474
  %12 = load i8*, i8** %narrow, align 8, !dbg !10474, !tbaa !5537
  %13 = load i32, i32* %mode, align 4, !dbg !10475, !tbaa !3840
  %14 = load i32, i32* %device, align 4, !dbg !10476, !tbaa !3840
  %conv = sext i32 %14 to i64, !dbg !10476
  %call3 = call i32 @mknodat(i32 %11, i8* %12, i32 %13, i64 %conv) #3, !dbg !10477
  store i32 %call3, i32* %result, align 4, !dbg !10478, !tbaa !3840
  br label %if.end.7, !dbg !10479

if.else:                                          ; preds = %if.end
  %narrow4 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !10480
  %15 = load i8*, i8** %narrow4, align 8, !dbg !10480, !tbaa !5537
  %16 = load i32, i32* %mode, align 4, !dbg !10481, !tbaa !3840
  %17 = load i32, i32* %device, align 4, !dbg !10482, !tbaa !3840
  %conv5 = sext i32 %17 to i64, !dbg !10482
  %call6 = call i32 @mknod(i8* %15, i32 %16, i64 %conv5) #3, !dbg !10483
  store i32 %call6, i32* %result, align 4, !dbg !10484, !tbaa !3840
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.2
  %18 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !10485, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %18), !dbg !10486
  %19 = bitcast %struct._ts** %_save to i8*, !dbg !10487
  call void @llvm.lifetime.end(i64 8, i8* %19) #3, !dbg !10487
  %20 = load i32, i32* %result, align 4, !dbg !10488, !tbaa !3840
  %cmp8 = icmp slt i32 %20, 0, !dbg !10490
  br i1 %cmp8, label %if.then.10, label %if.end.12, !dbg !10491

if.then.10:                                       ; preds = %if.end.7
  %call11 = call %struct._object* @posix_error(), !dbg !10492
  store %struct._object* %call11, %struct._object** %return_value, align 8, !dbg !10494, !tbaa !3867
  br label %exit, !dbg !10495

if.end.12:                                        ; preds = %if.end.7
  store %struct._object* @_Py_NoneStruct, %struct._object** %return_value, align 8, !dbg !10496, !tbaa !3867
  %21 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10497, !tbaa !3977
  %inc = add i64 %21, 1, !dbg !10497
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10497, !tbaa !3977
  br label %exit, !dbg !10498

exit:                                             ; preds = %if.end.12, %if.then.10
  call void @path_cleanup(%struct.path_t* %path), !dbg !10499
  %22 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !10500, !tbaa !3867
  store %struct._object* %22, %struct._object** %retval, !dbg !10501
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10501

cleanup:                                          ; preds = %exit, %if.then
  %23 = bitcast %struct._object** %return_value to i8*, !dbg !10502
  call void @llvm.lifetime.end(i64 8, i8* %23) #3, !dbg !10502
  %24 = bitcast i32* %result to i8*, !dbg !10502
  call void @llvm.lifetime.end(i64 4, i8* %24) #3, !dbg !10502
  %25 = bitcast i32* %dir_fd to i8*, !dbg !10502
  call void @llvm.lifetime.end(i64 4, i8* %25) #3, !dbg !10502
  %26 = bitcast i32* %device to i8*, !dbg !10502
  call void @llvm.lifetime.end(i64 4, i8* %26) #3, !dbg !10502
  %27 = bitcast i32* %mode to i8*, !dbg !10502
  call void @llvm.lifetime.end(i64 4, i8* %27) #3, !dbg !10502
  %28 = bitcast %struct.path_t* %path to i8*, !dbg !10502
  call void @llvm.lifetime.end(i64 72, i8* %28) #3, !dbg !10502
  %29 = load %struct._object*, %struct._object** %retval, !dbg !10502
  ret %struct._object* %29, !dbg !10502
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_major(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %device = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2630, metadata !3844), !dbg !10503
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2631, metadata !3844), !dbg !10504
  %0 = bitcast i32* %device to i8*, !dbg !10505
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !10505
  call void @llvm.dbg.declare(metadata i32* %device, metadata !2632, metadata !3844), !dbg !10506
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10507, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.314, i32 0, i32 0), i32* %device), !dbg !10509
  %tobool = icmp ne i32 %call, 0, !dbg !10509
  br i1 %tobool, label %if.end, label %if.then, !dbg !10510

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10511
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10511

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %device, align 4, !dbg !10512, !tbaa !3840
  %conv = sext i32 %2 to i64, !dbg !10512
  %call1 = call i32 @gnu_dev_major(i64 %conv) #1, !dbg !10513
  %conv2 = zext i32 %call1 to i64, !dbg !10514
  %call3 = call %struct._object* @PyLong_FromLong(i64 %conv2), !dbg !10515
  store %struct._object* %call3, %struct._object** %retval, !dbg !10516
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10516

cleanup:                                          ; preds = %if.end, %if.then
  %3 = bitcast i32* %device to i8*, !dbg !10517
  call void @llvm.lifetime.end(i64 4, i8* %3) #3, !dbg !10517
  %4 = load %struct._object*, %struct._object** %retval, !dbg !10517
  ret %struct._object* %4, !dbg !10517
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_minor(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %device = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2641, metadata !3844), !dbg !10518
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2642, metadata !3844), !dbg !10519
  %0 = bitcast i32* %device to i8*, !dbg !10520
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !10520
  call void @llvm.dbg.declare(metadata i32* %device, metadata !2643, metadata !3844), !dbg !10521
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10522, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.315, i32 0, i32 0), i32* %device), !dbg !10524
  %tobool = icmp ne i32 %call, 0, !dbg !10524
  br i1 %tobool, label %if.end, label %if.then, !dbg !10525

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10526
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10526

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %device, align 4, !dbg !10527, !tbaa !3840
  %conv = sext i32 %2 to i64, !dbg !10527
  %call1 = call i32 @gnu_dev_minor(i64 %conv) #1, !dbg !10528
  %conv2 = zext i32 %call1 to i64, !dbg !10529
  %call3 = call %struct._object* @PyLong_FromLong(i64 %conv2), !dbg !10530
  store %struct._object* %call3, %struct._object** %retval, !dbg !10531
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10531

cleanup:                                          ; preds = %if.end, %if.then
  %3 = bitcast i32* %device to i8*, !dbg !10532
  call void @llvm.lifetime.end(i64 4, i8* %3) #3, !dbg !10532
  %4 = load %struct._object*, %struct._object** %retval, !dbg !10532
  ret %struct._object* %4, !dbg !10532
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_makedev(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %major = alloca i32, align 4
  %minor = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2649, metadata !3844), !dbg !10533
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2650, metadata !3844), !dbg !10534
  %0 = bitcast i32* %major to i8*, !dbg !10535
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !10535
  call void @llvm.dbg.declare(metadata i32* %major, metadata !2651, metadata !3844), !dbg !10536
  %1 = bitcast i32* %minor to i8*, !dbg !10535
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !10535
  call void @llvm.dbg.declare(metadata i32* %minor, metadata !2652, metadata !3844), !dbg !10537
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10538, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.316, i32 0, i32 0), i32* %major, i32* %minor), !dbg !10540
  %tobool = icmp ne i32 %call, 0, !dbg !10540
  br i1 %tobool, label %if.end, label %if.then, !dbg !10541

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10542
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10542

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %major, align 4, !dbg !10543, !tbaa !3840
  %4 = load i32, i32* %minor, align 4, !dbg !10544, !tbaa !3840
  %call1 = call i64 @gnu_dev_makedev(i32 %3, i32 %4) #1, !dbg !10545
  %call2 = call %struct._object* @PyLong_FromLong(i64 %call1), !dbg !10546
  store %struct._object* %call2, %struct._object** %retval, !dbg !10547
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10547

cleanup:                                          ; preds = %if.end, %if.then
  %5 = bitcast i32* %minor to i8*, !dbg !10548
  call void @llvm.lifetime.end(i64 4, i8* %5) #3, !dbg !10548
  %6 = bitcast i32* %major to i8*, !dbg !10548
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !10548
  %7 = load %struct._object*, %struct._object** %retval, !dbg !10548
  ret %struct._object* %7, !dbg !10548
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_ftruncate(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %length = alloca i64, align 8
  %res = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2661, metadata !3844), !dbg !10549
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2662, metadata !3844), !dbg !10550
  %0 = bitcast i32* %fd to i8*, !dbg !10551
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !10551
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2663, metadata !3844), !dbg !10552
  %1 = bitcast i64* %length to i8*, !dbg !10553
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !10553
  call void @llvm.dbg.declare(metadata i64* %length, metadata !2664, metadata !3844), !dbg !10554
  %2 = bitcast i32* %res to i8*, !dbg !10555
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !10555
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2665, metadata !3844), !dbg !10556
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10557, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.317, i32 0, i32 0), i32* %fd, i32 (%struct._object*, i8*)* @_parse_off_t, i64* %length), !dbg !10559
  %tobool = icmp ne i32 %call, 0, !dbg !10559
  br i1 %tobool, label %if.end, label %if.then, !dbg !10560

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10561
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10561

if.end:                                           ; preds = %entry
  %4 = bitcast %struct._ts** %_save to i8*, !dbg !10562
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !10562
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2666, metadata !3844), !dbg !10563
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !10564
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !10565, !tbaa !3867
  %5 = load i32, i32* %fd, align 4, !dbg !10566, !tbaa !3840
  %6 = load i64, i64* %length, align 8, !dbg !10567, !tbaa !3904
  %call2 = call i32 @ftruncate64(i32 %5, i64 %6) #3, !dbg !10568
  store i32 %call2, i32* %res, align 4, !dbg !10569, !tbaa !3840
  %7 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !10570, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %7), !dbg !10571
  %8 = bitcast %struct._ts** %_save to i8*, !dbg !10572
  call void @llvm.lifetime.end(i64 8, i8* %8) #3, !dbg !10572
  %9 = load i32, i32* %res, align 4, !dbg !10573, !tbaa !3840
  %cmp = icmp slt i32 %9, 0, !dbg !10575
  br i1 %cmp, label %if.then.3, label %if.end.5, !dbg !10576

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !10577
  store %struct._object* %call4, %struct._object** %retval, !dbg !10578
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10578

if.end.5:                                         ; preds = %if.end
  %10 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10579, !tbaa !3977
  %inc = add i64 %10, 1, !dbg !10579
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10579, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !10580
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10580

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %11 = bitcast i32* %res to i8*, !dbg !10581
  call void @llvm.lifetime.end(i64 4, i8* %11) #3, !dbg !10581
  %12 = bitcast i64* %length to i8*, !dbg !10581
  call void @llvm.lifetime.end(i64 8, i8* %12) #3, !dbg !10581
  %13 = bitcast i32* %fd to i8*, !dbg !10581
  call void @llvm.lifetime.end(i64 4, i8* %13) #3, !dbg !10581
  %14 = load %struct._object*, %struct._object** %retval, !dbg !10581
  ret %struct._object* %14, !dbg !10581
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_truncate(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %length = alloca i64, align 8
  %res = alloca i32, align 4
  %result = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2670, metadata !3844), !dbg !10582
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2671, metadata !3844), !dbg !10583
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !2672, metadata !3844), !dbg !10584
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !10585
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !10585
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !2673, metadata !3844), !dbg !10586
  %1 = bitcast i64* %length to i8*, !dbg !10587
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !10587
  call void @llvm.dbg.declare(metadata i64* %length, metadata !2674, metadata !3844), !dbg !10588
  %2 = bitcast i32* %res to i8*, !dbg !10589
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !10589
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2675, metadata !3844), !dbg !10590
  %3 = bitcast %struct._object** %result to i8*, !dbg !10591
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !10591
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !2676, metadata !3844), !dbg !10592
  store %struct._object* null, %struct._object** %result, align 8, !dbg !10592, !tbaa !3867
  %4 = bitcast %struct.path_t* %path to i8*, !dbg !10593
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 72, i32 8, i1 false), !dbg !10593
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !10594
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.130, i32 0, i32 0), i8** %function_name, align 8, !dbg !10595, !tbaa !5512
  %allow_fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 3, !dbg !10596
  store i32 1, i32* %allow_fd, align 4, !dbg !10597, !tbaa !5516
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10598, !tbaa !3867
  %6 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !10600, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %5, %struct._object* %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.319, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @posix_truncate.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32 (%struct._object*, i8*)* @_parse_off_t, i64* %length), !dbg !10601
  %tobool = icmp ne i32 %call, 0, !dbg !10601
  br i1 %tobool, label %if.end, label %if.then, !dbg !10602

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10603
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10603

if.end:                                           ; preds = %entry
  %7 = bitcast %struct._ts** %_save to i8*, !dbg !10604
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !10604
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2677, metadata !3844), !dbg !10605
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !10606
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !10607, !tbaa !3867
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !10608
  %8 = load i32, i32* %fd, align 4, !dbg !10608, !tbaa !5529
  %cmp = icmp ne i32 %8, -1, !dbg !10610
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !10611

if.then.2:                                        ; preds = %if.end
  %fd3 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !10612
  %9 = load i32, i32* %fd3, align 4, !dbg !10612, !tbaa !5529
  %10 = load i64, i64* %length, align 8, !dbg !10613, !tbaa !3904
  %call4 = call i32 @ftruncate64(i32 %9, i64 %10) #3, !dbg !10614
  store i32 %call4, i32* %res, align 4, !dbg !10615, !tbaa !3840
  br label %if.end.6, !dbg !10616

if.else:                                          ; preds = %if.end
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !10617
  %11 = load i8*, i8** %narrow, align 8, !dbg !10617, !tbaa !5537
  %12 = load i64, i64* %length, align 8, !dbg !10618, !tbaa !3904
  %call5 = call i32 @truncate64(i8* %11, i64 %12) #3, !dbg !10619
  store i32 %call5, i32* %res, align 4, !dbg !10620, !tbaa !3840
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.2
  %13 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !10621, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %13), !dbg !10622
  %14 = bitcast %struct._ts** %_save to i8*, !dbg !10623
  call void @llvm.lifetime.end(i64 8, i8* %14) #3, !dbg !10623
  %15 = load i32, i32* %res, align 4, !dbg !10624, !tbaa !3840
  %cmp7 = icmp slt i32 %15, 0, !dbg !10626
  br i1 %cmp7, label %if.then.8, label %if.else.10, !dbg !10627

if.then.8:                                        ; preds = %if.end.6
  %call9 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !10628
  store %struct._object* %call9, %struct._object** %result, align 8, !dbg !10629, !tbaa !3867
  br label %if.end.11, !dbg !10630

if.else.10:                                       ; preds = %if.end.6
  %16 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10631, !tbaa !3977
  %inc = add i64 %16, 1, !dbg !10631
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10631, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %result, align 8, !dbg !10633, !tbaa !3867
  br label %if.end.11

if.end.11:                                        ; preds = %if.else.10, %if.then.8
  call void @path_cleanup(%struct.path_t* %path), !dbg !10634
  %17 = load %struct._object*, %struct._object** %result, align 8, !dbg !10635, !tbaa !3867
  store %struct._object* %17, %struct._object** %retval, !dbg !10636
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10636

cleanup:                                          ; preds = %if.end.11, %if.then
  %18 = bitcast %struct._object** %result to i8*, !dbg !10637
  call void @llvm.lifetime.end(i64 8, i8* %18) #3, !dbg !10637
  %19 = bitcast i32* %res to i8*, !dbg !10637
  call void @llvm.lifetime.end(i64 4, i8* %19) #3, !dbg !10637
  %20 = bitcast i64* %length to i8*, !dbg !10637
  call void @llvm.lifetime.end(i64 8, i8* %20) #3, !dbg !10637
  %21 = bitcast %struct.path_t* %path to i8*, !dbg !10637
  call void @llvm.lifetime.end(i64 72, i8* %21) #3, !dbg !10637
  %22 = load %struct._object*, %struct._object** %retval, !dbg !10637
  ret %struct._object* %22, !dbg !10637
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_posix_fallocate(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %offset = alloca i64, align 8
  %res = alloca i32, align 4
  %fd = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2681, metadata !3844), !dbg !10638
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2682, metadata !3844), !dbg !10639
  %0 = bitcast i64* %len to i8*, !dbg !10640
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !10640
  call void @llvm.dbg.declare(metadata i64* %len, metadata !2683, metadata !3844), !dbg !10641
  %1 = bitcast i64* %offset to i8*, !dbg !10640
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !10640
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !2684, metadata !3844), !dbg !10642
  %2 = bitcast i32* %res to i8*, !dbg !10643
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !10643
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2685, metadata !3844), !dbg !10644
  %3 = bitcast i32* %fd to i8*, !dbg !10643
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !10643
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2686, metadata !3844), !dbg !10645
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10646, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.320, i32 0, i32 0), i32* %fd, i32 (%struct._object*, i8*)* @_parse_off_t, i64* %offset, i32 (%struct._object*, i8*)* @_parse_off_t, i64* %len), !dbg !10648
  %tobool = icmp ne i32 %call, 0, !dbg !10648
  br i1 %tobool, label %if.end, label %if.then, !dbg !10649

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10650
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10650

if.end:                                           ; preds = %entry
  %5 = bitcast %struct._ts** %_save to i8*, !dbg !10651
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !10651
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2687, metadata !3844), !dbg !10652
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !10653
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !10654, !tbaa !3867
  %6 = load i32, i32* %fd, align 4, !dbg !10655, !tbaa !3840
  %7 = load i64, i64* %offset, align 8, !dbg !10656, !tbaa !3904
  %8 = load i64, i64* %len, align 8, !dbg !10657, !tbaa !3904
  %call2 = call i32 @posix_fallocate64(i32 %6, i64 %7, i64 %8), !dbg !10658
  store i32 %call2, i32* %res, align 4, !dbg !10659, !tbaa !3840
  %9 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !10660, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %9), !dbg !10661
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !10662
  call void @llvm.lifetime.end(i64 8, i8* %10) #3, !dbg !10662
  %11 = load i32, i32* %res, align 4, !dbg !10663, !tbaa !3840
  %cmp = icmp ne i32 %11, 0, !dbg !10665
  br i1 %cmp, label %if.then.3, label %if.end.6, !dbg !10666

if.then.3:                                        ; preds = %if.end
  %12 = load i32, i32* %res, align 4, !dbg !10667, !tbaa !3840
  %call4 = call i32* @__errno_location() #1, !dbg !10669
  store i32 %12, i32* %call4, align 4, !dbg !10670, !tbaa !3840
  %call5 = call %struct._object* @posix_error(), !dbg !10671
  store %struct._object* %call5, %struct._object** %retval, !dbg !10672
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10672

if.end.6:                                         ; preds = %if.end
  %13 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10673, !tbaa !3977
  %inc = add i64 %13, 1, !dbg !10673
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10673, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !10674
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10674

cleanup:                                          ; preds = %if.end.6, %if.then.3, %if.then
  %14 = bitcast i32* %fd to i8*, !dbg !10675
  call void @llvm.lifetime.end(i64 4, i8* %14) #3, !dbg !10675
  %15 = bitcast i32* %res to i8*, !dbg !10675
  call void @llvm.lifetime.end(i64 4, i8* %15) #3, !dbg !10675
  %16 = bitcast i64* %offset to i8*, !dbg !10675
  call void @llvm.lifetime.end(i64 8, i8* %16) #3, !dbg !10675
  %17 = bitcast i64* %len to i8*, !dbg !10675
  call void @llvm.lifetime.end(i64 8, i8* %17) #3, !dbg !10675
  %18 = load %struct._object*, %struct._object** %retval, !dbg !10675
  ret %struct._object* %18, !dbg !10675
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_posix_fadvise(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %offset = alloca i64, align 8
  %res = alloca i32, align 4
  %fd = alloca i32, align 4
  %advice = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2691, metadata !3844), !dbg !10676
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2692, metadata !3844), !dbg !10677
  %0 = bitcast i64* %len to i8*, !dbg !10678
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !10678
  call void @llvm.dbg.declare(metadata i64* %len, metadata !2693, metadata !3844), !dbg !10679
  %1 = bitcast i64* %offset to i8*, !dbg !10678
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !10678
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !2694, metadata !3844), !dbg !10680
  %2 = bitcast i32* %res to i8*, !dbg !10681
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !10681
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2695, metadata !3844), !dbg !10682
  %3 = bitcast i32* %fd to i8*, !dbg !10681
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !10681
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2696, metadata !3844), !dbg !10683
  %4 = bitcast i32* %advice to i8*, !dbg !10681
  call void @llvm.lifetime.start(i64 4, i8* %4) #3, !dbg !10681
  call void @llvm.dbg.declare(metadata i32* %advice, metadata !2697, metadata !3844), !dbg !10684
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10685, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %5, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.321, i32 0, i32 0), i32* %fd, i32 (%struct._object*, i8*)* @_parse_off_t, i64* %offset, i32 (%struct._object*, i8*)* @_parse_off_t, i64* %len, i32* %advice), !dbg !10687
  %tobool = icmp ne i32 %call, 0, !dbg !10687
  br i1 %tobool, label %if.end, label %if.then, !dbg !10688

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10689
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10689

if.end:                                           ; preds = %entry
  %6 = bitcast %struct._ts** %_save to i8*, !dbg !10690
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !10690
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2698, metadata !3844), !dbg !10691
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !10692
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !10693, !tbaa !3867
  %7 = load i32, i32* %fd, align 4, !dbg !10694, !tbaa !3840
  %8 = load i64, i64* %offset, align 8, !dbg !10695, !tbaa !3904
  %9 = load i64, i64* %len, align 8, !dbg !10696, !tbaa !3904
  %10 = load i32, i32* %advice, align 4, !dbg !10697, !tbaa !3840
  %call2 = call i32 @posix_fadvise64(i32 %7, i64 %8, i64 %9, i32 %10) #3, !dbg !10698
  store i32 %call2, i32* %res, align 4, !dbg !10699, !tbaa !3840
  %11 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !10700, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %11), !dbg !10701
  %12 = bitcast %struct._ts** %_save to i8*, !dbg !10702
  call void @llvm.lifetime.end(i64 8, i8* %12) #3, !dbg !10702
  %13 = load i32, i32* %res, align 4, !dbg !10703, !tbaa !3840
  %cmp = icmp ne i32 %13, 0, !dbg !10705
  br i1 %cmp, label %if.then.3, label %if.end.6, !dbg !10706

if.then.3:                                        ; preds = %if.end
  %14 = load i32, i32* %res, align 4, !dbg !10707, !tbaa !3840
  %call4 = call i32* @__errno_location() #1, !dbg !10709
  store i32 %14, i32* %call4, align 4, !dbg !10710, !tbaa !3840
  %call5 = call %struct._object* @posix_error(), !dbg !10711
  store %struct._object* %call5, %struct._object** %retval, !dbg !10712
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10712

if.end.6:                                         ; preds = %if.end
  %15 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10713, !tbaa !3977
  %inc = add i64 %15, 1, !dbg !10713
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10713, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !10714
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10714

cleanup:                                          ; preds = %if.end.6, %if.then.3, %if.then
  %16 = bitcast i32* %advice to i8*, !dbg !10715
  call void @llvm.lifetime.end(i64 4, i8* %16) #3, !dbg !10715
  %17 = bitcast i32* %fd to i8*, !dbg !10715
  call void @llvm.lifetime.end(i64 4, i8* %17) #3, !dbg !10715
  %18 = bitcast i32* %res to i8*, !dbg !10715
  call void @llvm.lifetime.end(i64 4, i8* %18) #3, !dbg !10715
  %19 = bitcast i64* %offset to i8*, !dbg !10715
  call void @llvm.lifetime.end(i64 8, i8* %19) #3, !dbg !10715
  %20 = bitcast i64* %len to i8*, !dbg !10715
  call void @llvm.lifetime.end(i64 8, i8* %20) #3, !dbg !10715
  %21 = load %struct._object*, %struct._object** %retval, !dbg !10715
  ret %struct._object* %21, !dbg !10715
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_putenv(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %newstr = alloca %struct._object*, align 8
  %os1 = alloca %struct._object*, align 8
  %os2 = alloca %struct._object*, align 8
  %s1 = alloca i8*, align 8
  %s2 = alloca i8*, align 8
  %newenv = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp21 = alloca %struct._object*, align 8
  %_py_decref_tmp33 = alloca %struct._object*, align 8
  %_py_decref_tmp45 = alloca %struct._object*, align 8
  %_py_decref_tmp57 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp72 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2702, metadata !3844), !dbg !10716
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2703, metadata !3844), !dbg !10717
  %0 = bitcast %struct._object** %newstr to i8*, !dbg !10718
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !10718
  call void @llvm.dbg.declare(metadata %struct._object** %newstr, metadata !2704, metadata !3844), !dbg !10719
  store %struct._object* null, %struct._object** %newstr, align 8, !dbg !10719, !tbaa !3867
  %1 = bitcast %struct._object** %os1 to i8*, !dbg !10720
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !10720
  call void @llvm.dbg.declare(metadata %struct._object** %os1, metadata !2705, metadata !3844), !dbg !10721
  %2 = bitcast %struct._object** %os2 to i8*, !dbg !10720
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !10720
  call void @llvm.dbg.declare(metadata %struct._object** %os2, metadata !2706, metadata !3844), !dbg !10722
  %3 = bitcast i8** %s1 to i8*, !dbg !10723
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !10723
  call void @llvm.dbg.declare(metadata i8** %s1, metadata !2707, metadata !3844), !dbg !10724
  %4 = bitcast i8** %s2 to i8*, !dbg !10723
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !10723
  call void @llvm.dbg.declare(metadata i8** %s2, metadata !2708, metadata !3844), !dbg !10725
  %5 = bitcast i8** %newenv to i8*, !dbg !10726
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !10726
  call void @llvm.dbg.declare(metadata i8** %newenv, metadata !2709, metadata !3844), !dbg !10727
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10728, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %6, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.322, i32 0, i32 0), i32 (%struct._object*, i8*)* @PyUnicode_FSConverter, %struct._object** %os1, i32 (%struct._object*, i8*)* @PyUnicode_FSConverter, %struct._object** %os2), !dbg !10730
  %tobool = icmp ne i32 %call, 0, !dbg !10730
  br i1 %tobool, label %if.end, label %if.then, !dbg !10731

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10732
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10732

if.end:                                           ; preds = %entry
  %7 = load %struct._object*, %struct._object** %os1, align 8, !dbg !10733, !tbaa !3867
  %call1 = call i8* @PyBytes_AsString(%struct._object* %7), !dbg !10734
  store i8* %call1, i8** %s1, align 8, !dbg !10735, !tbaa !3867
  %8 = load %struct._object*, %struct._object** %os2, align 8, !dbg !10736, !tbaa !3867
  %call2 = call i8* @PyBytes_AsString(%struct._object* %8), !dbg !10737
  store i8* %call2, i8** %s2, align 8, !dbg !10738, !tbaa !3867
  %9 = load i8*, i8** %s1, align 8, !dbg !10739, !tbaa !3867
  %10 = load i8*, i8** %s2, align 8, !dbg !10740, !tbaa !3867
  %call3 = call %struct._object* (i8*, ...) @PyBytes_FromFormat(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.237, i32 0, i32 0), i8* %9, i8* %10), !dbg !10741
  store %struct._object* %call3, %struct._object** %newstr, align 8, !dbg !10742, !tbaa !3867
  %11 = load %struct._object*, %struct._object** %newstr, align 8, !dbg !10743, !tbaa !3867
  %cmp = icmp eq %struct._object* %11, null, !dbg !10745
  br i1 %cmp, label %if.then.4, label %if.end.6, !dbg !10746

if.then.4:                                        ; preds = %if.end
  %call5 = call %struct._object* @PyErr_NoMemory(), !dbg !10747
  br label %error, !dbg !10749

if.end.6:                                         ; preds = %if.end
  %12 = load %struct._object*, %struct._object** %newstr, align 8, !dbg !10750, !tbaa !3867
  %13 = bitcast %struct._object* %12 to %struct.PyBytesObject*, !dbg !10751
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %13, i32 0, i32 2, !dbg !10752
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !10753
  store i8* %arraydecay, i8** %newenv, align 8, !dbg !10754, !tbaa !3867
  %14 = load i8*, i8** %newenv, align 8, !dbg !10755, !tbaa !3867
  %call7 = call i32 @putenv(i8* %14) #3, !dbg !10757
  %tobool8 = icmp ne i32 %call7, 0, !dbg !10757
  br i1 %tobool8, label %if.then.9, label %if.end.11, !dbg !10758

if.then.9:                                        ; preds = %if.end.6
  %call10 = call %struct._object* @posix_error(), !dbg !10759
  br label %error, !dbg !10761

if.end.11:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** @posix_putenv_garbage, align 8, !dbg !10762, !tbaa !3867
  %16 = load %struct._object*, %struct._object** %os1, align 8, !dbg !10763, !tbaa !3867
  %17 = load %struct._object*, %struct._object** %newstr, align 8, !dbg !10764, !tbaa !3867
  %call12 = call i32 @PyDict_SetItem(%struct._object* %15, %struct._object* %16, %struct._object* %17), !dbg !10765
  %tobool13 = icmp ne i32 %call12, 0, !dbg !10765
  br i1 %tobool13, label %if.then.14, label %if.else, !dbg !10766

if.then.14:                                       ; preds = %if.end.11
  call void @PyErr_Clear(), !dbg !10767
  br label %if.end.19, !dbg !10769

if.else:                                          ; preds = %if.end.11
  br label %do.body, !dbg !10770

do.body:                                          ; preds = %if.else
  %18 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10771
  call void @llvm.lifetime.start(i64 8, i8* %18) #3, !dbg !10771
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !2710, metadata !3844), !dbg !10773
  %19 = load %struct._object*, %struct._object** %newstr, align 8, !dbg !10774, !tbaa !3867
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8, !dbg !10773, !tbaa !3867
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10775, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0, !dbg !10777
  %21 = load i64, i64* %ob_refcnt, align 8, !dbg !10778, !tbaa !3977
  %dec = add i64 %21, -1, !dbg !10778
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !10778, !tbaa !3977
  %cmp15 = icmp ne i64 %dec, 0, !dbg !10779
  br i1 %cmp15, label %if.then.16, label %if.else.17, !dbg !10780

if.then.16:                                       ; preds = %do.body
  br label %if.end.18, !dbg !10781

if.else.17:                                       ; preds = %do.body
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10783, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1, !dbg !10785
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !10785, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4, !dbg !10786
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !10786, !tbaa !3986
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10787, !tbaa !3867
  call void %24(%struct._object* %25), !dbg !10788
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.17, %if.then.16
  %26 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10789
  call void @llvm.lifetime.end(i64 8, i8* %26) #3, !dbg !10789
  br label %do.cond, !dbg !10791

do.cond:                                          ; preds = %if.end.18
  br label %do.end, !dbg !10792

do.end:                                           ; preds = %do.cond
  br label %if.end.19

if.end.19:                                        ; preds = %do.end, %if.then.14
  br label %do.body.20, !dbg !10794

do.body.20:                                       ; preds = %if.end.19
  %27 = bitcast %struct._object** %_py_decref_tmp21 to i8*, !dbg !10795
  call void @llvm.lifetime.start(i64 8, i8* %27) #3, !dbg !10795
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp21, metadata !2714, metadata !3844), !dbg !10797
  %28 = load %struct._object*, %struct._object** %os1, align 8, !dbg !10798, !tbaa !3867
  store %struct._object* %28, %struct._object** %_py_decref_tmp21, align 8, !dbg !10797, !tbaa !3867
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8, !dbg !10799, !tbaa !3867
  %ob_refcnt22 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0, !dbg !10801
  %30 = load i64, i64* %ob_refcnt22, align 8, !dbg !10802, !tbaa !3977
  %dec23 = add i64 %30, -1, !dbg !10802
  store i64 %dec23, i64* %ob_refcnt22, align 8, !dbg !10802, !tbaa !3977
  %cmp24 = icmp ne i64 %dec23, 0, !dbg !10803
  br i1 %cmp24, label %if.then.25, label %if.else.26, !dbg !10804

if.then.25:                                       ; preds = %do.body.20
  br label %if.end.29, !dbg !10805

if.else.26:                                       ; preds = %do.body.20
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8, !dbg !10807, !tbaa !3867
  %ob_type27 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1, !dbg !10809
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type27, align 8, !dbg !10809, !tbaa !3892
  %tp_dealloc28 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4, !dbg !10810
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc28, align 8, !dbg !10810, !tbaa !3986
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8, !dbg !10811, !tbaa !3867
  call void %33(%struct._object* %34), !dbg !10812
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.26, %if.then.25
  %35 = bitcast %struct._object** %_py_decref_tmp21 to i8*, !dbg !10813
  call void @llvm.lifetime.end(i64 8, i8* %35) #3, !dbg !10813
  br label %do.cond.30, !dbg !10815

do.cond.30:                                       ; preds = %if.end.29
  br label %do.end.31, !dbg !10816

do.end.31:                                        ; preds = %do.cond.30
  br label %do.body.32, !dbg !10818

do.body.32:                                       ; preds = %do.end.31
  %36 = bitcast %struct._object** %_py_decref_tmp33 to i8*, !dbg !10819
  call void @llvm.lifetime.start(i64 8, i8* %36) #3, !dbg !10819
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp33, metadata !2716, metadata !3844), !dbg !10821
  %37 = load %struct._object*, %struct._object** %os2, align 8, !dbg !10822, !tbaa !3867
  store %struct._object* %37, %struct._object** %_py_decref_tmp33, align 8, !dbg !10821, !tbaa !3867
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8, !dbg !10823, !tbaa !3867
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 0, !dbg !10825
  %39 = load i64, i64* %ob_refcnt34, align 8, !dbg !10826, !tbaa !3977
  %dec35 = add i64 %39, -1, !dbg !10826
  store i64 %dec35, i64* %ob_refcnt34, align 8, !dbg !10826, !tbaa !3977
  %cmp36 = icmp ne i64 %dec35, 0, !dbg !10827
  br i1 %cmp36, label %if.then.37, label %if.else.38, !dbg !10828

if.then.37:                                       ; preds = %do.body.32
  br label %if.end.41, !dbg !10829

if.else.38:                                       ; preds = %do.body.32
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8, !dbg !10831, !tbaa !3867
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1, !dbg !10833
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8, !dbg !10833, !tbaa !3892
  %tp_dealloc40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 4, !dbg !10834
  %42 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc40, align 8, !dbg !10834, !tbaa !3986
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8, !dbg !10835, !tbaa !3867
  call void %42(%struct._object* %43), !dbg !10836
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.38, %if.then.37
  %44 = bitcast %struct._object** %_py_decref_tmp33 to i8*, !dbg !10837
  call void @llvm.lifetime.end(i64 8, i8* %44) #3, !dbg !10837
  br label %do.cond.42, !dbg !10838

do.cond.42:                                       ; preds = %if.end.41
  br label %do.end.43, !dbg !10839

do.end.43:                                        ; preds = %do.cond.42
  %45 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10841, !tbaa !3977
  %inc = add i64 %45, 1, !dbg !10841
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10841, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !10842
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10842

error:                                            ; preds = %if.then.9, %if.then.4
  br label %do.body.44, !dbg !10843

do.body.44:                                       ; preds = %error
  %46 = bitcast %struct._object** %_py_decref_tmp45 to i8*, !dbg !10844
  call void @llvm.lifetime.start(i64 8, i8* %46) #3, !dbg !10844
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp45, metadata !2718, metadata !3844), !dbg !10846
  %47 = load %struct._object*, %struct._object** %os1, align 8, !dbg !10847, !tbaa !3867
  store %struct._object* %47, %struct._object** %_py_decref_tmp45, align 8, !dbg !10846, !tbaa !3867
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8, !dbg !10848, !tbaa !3867
  %ob_refcnt46 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0, !dbg !10850
  %49 = load i64, i64* %ob_refcnt46, align 8, !dbg !10851, !tbaa !3977
  %dec47 = add i64 %49, -1, !dbg !10851
  store i64 %dec47, i64* %ob_refcnt46, align 8, !dbg !10851, !tbaa !3977
  %cmp48 = icmp ne i64 %dec47, 0, !dbg !10852
  br i1 %cmp48, label %if.then.49, label %if.else.50, !dbg !10853

if.then.49:                                       ; preds = %do.body.44
  br label %if.end.53, !dbg !10854

if.else.50:                                       ; preds = %do.body.44
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8, !dbg !10856, !tbaa !3867
  %ob_type51 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1, !dbg !10858
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type51, align 8, !dbg !10858, !tbaa !3892
  %tp_dealloc52 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4, !dbg !10859
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc52, align 8, !dbg !10859, !tbaa !3986
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8, !dbg !10860, !tbaa !3867
  call void %52(%struct._object* %53), !dbg !10861
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.50, %if.then.49
  %54 = bitcast %struct._object** %_py_decref_tmp45 to i8*, !dbg !10862
  call void @llvm.lifetime.end(i64 8, i8* %54) #3, !dbg !10862
  br label %do.cond.54, !dbg !10863

do.cond.54:                                       ; preds = %if.end.53
  br label %do.end.55, !dbg !10864

do.end.55:                                        ; preds = %do.cond.54
  br label %do.body.56, !dbg !10866

do.body.56:                                       ; preds = %do.end.55
  %55 = bitcast %struct._object** %_py_decref_tmp57 to i8*, !dbg !10867
  call void @llvm.lifetime.start(i64 8, i8* %55) #3, !dbg !10867
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp57, metadata !2720, metadata !3844), !dbg !10869
  %56 = load %struct._object*, %struct._object** %os2, align 8, !dbg !10870, !tbaa !3867
  store %struct._object* %56, %struct._object** %_py_decref_tmp57, align 8, !dbg !10869, !tbaa !3867
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8, !dbg !10871, !tbaa !3867
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0, !dbg !10873
  %58 = load i64, i64* %ob_refcnt58, align 8, !dbg !10874, !tbaa !3977
  %dec59 = add i64 %58, -1, !dbg !10874
  store i64 %dec59, i64* %ob_refcnt58, align 8, !dbg !10874, !tbaa !3977
  %cmp60 = icmp ne i64 %dec59, 0, !dbg !10875
  br i1 %cmp60, label %if.then.61, label %if.else.62, !dbg !10876

if.then.61:                                       ; preds = %do.body.56
  br label %if.end.65, !dbg !10877

if.else.62:                                       ; preds = %do.body.56
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8, !dbg !10879, !tbaa !3867
  %ob_type63 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 1, !dbg !10881
  %60 = load %struct._typeobject*, %struct._typeobject** %ob_type63, align 8, !dbg !10881, !tbaa !3892
  %tp_dealloc64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 4, !dbg !10882
  %61 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc64, align 8, !dbg !10882, !tbaa !3986
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8, !dbg !10883, !tbaa !3867
  call void %61(%struct._object* %62), !dbg !10884
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.62, %if.then.61
  %63 = bitcast %struct._object** %_py_decref_tmp57 to i8*, !dbg !10885
  call void @llvm.lifetime.end(i64 8, i8* %63) #3, !dbg !10885
  br label %do.cond.66, !dbg !10886

do.cond.66:                                       ; preds = %if.end.65
  br label %do.end.67, !dbg !10887

do.end.67:                                        ; preds = %do.cond.66
  br label %do.body.68, !dbg !10889

do.body.68:                                       ; preds = %do.end.67
  %64 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !10890
  call void @llvm.lifetime.start(i64 8, i8* %64) #3, !dbg !10890
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !2722, metadata !3844), !dbg !10892
  %65 = load %struct._object*, %struct._object** %newstr, align 8, !dbg !10893, !tbaa !3867
  store %struct._object* %65, %struct._object** %_py_xdecref_tmp, align 8, !dbg !10892, !tbaa !3867
  %66 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !10894, !tbaa !3867
  %cmp69 = icmp ne %struct._object* %66, null, !dbg !10895
  br i1 %cmp69, label %if.then.70, label %if.end.83, !dbg !10896

if.then.70:                                       ; preds = %do.body.68
  br label %do.body.71, !dbg !10897

do.body.71:                                       ; preds = %if.then.70
  %67 = bitcast %struct._object** %_py_decref_tmp72 to i8*, !dbg !10899
  call void @llvm.lifetime.start(i64 8, i8* %67) #3, !dbg !10899
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp72, metadata !2724, metadata !3844), !dbg !10901
  %68 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !10902, !tbaa !3867
  store %struct._object* %68, %struct._object** %_py_decref_tmp72, align 8, !dbg !10901, !tbaa !3867
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8, !dbg !10903, !tbaa !3867
  %ob_refcnt73 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 0, !dbg !10905
  %70 = load i64, i64* %ob_refcnt73, align 8, !dbg !10906, !tbaa !3977
  %dec74 = add i64 %70, -1, !dbg !10906
  store i64 %dec74, i64* %ob_refcnt73, align 8, !dbg !10906, !tbaa !3977
  %cmp75 = icmp ne i64 %dec74, 0, !dbg !10907
  br i1 %cmp75, label %if.then.76, label %if.else.77, !dbg !10908

if.then.76:                                       ; preds = %do.body.71
  br label %if.end.80, !dbg !10909

if.else.77:                                       ; preds = %do.body.71
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8, !dbg !10911, !tbaa !3867
  %ob_type78 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 1, !dbg !10913
  %72 = load %struct._typeobject*, %struct._typeobject** %ob_type78, align 8, !dbg !10913, !tbaa !3892
  %tp_dealloc79 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 4, !dbg !10914
  %73 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc79, align 8, !dbg !10914, !tbaa !3986
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8, !dbg !10915, !tbaa !3867
  call void %73(%struct._object* %74), !dbg !10916
  br label %if.end.80

if.end.80:                                        ; preds = %if.else.77, %if.then.76
  %75 = bitcast %struct._object** %_py_decref_tmp72 to i8*, !dbg !10917
  call void @llvm.lifetime.end(i64 8, i8* %75) #3, !dbg !10917
  br label %do.cond.81, !dbg !10919

do.cond.81:                                       ; preds = %if.end.80
  br label %do.end.82, !dbg !10920

do.end.82:                                        ; preds = %do.cond.81
  br label %if.end.83, !dbg !10922

if.end.83:                                        ; preds = %do.end.82, %do.body.68
  %76 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !10924
  call void @llvm.lifetime.end(i64 8, i8* %76) #3, !dbg !10924
  br label %do.cond.84, !dbg !10927

do.cond.84:                                       ; preds = %if.end.83
  br label %do.end.85, !dbg !10928

do.end.85:                                        ; preds = %do.cond.84
  store %struct._object* null, %struct._object** %retval, !dbg !10930
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10930

cleanup:                                          ; preds = %do.end.85, %do.end.43, %if.then
  %77 = bitcast i8** %newenv to i8*, !dbg !10931
  call void @llvm.lifetime.end(i64 8, i8* %77) #3, !dbg !10931
  %78 = bitcast i8** %s2 to i8*, !dbg !10931
  call void @llvm.lifetime.end(i64 8, i8* %78) #3, !dbg !10931
  %79 = bitcast i8** %s1 to i8*, !dbg !10931
  call void @llvm.lifetime.end(i64 8, i8* %79) #3, !dbg !10931
  %80 = bitcast %struct._object** %os2 to i8*, !dbg !10931
  call void @llvm.lifetime.end(i64 8, i8* %80) #3, !dbg !10931
  %81 = bitcast %struct._object** %os1 to i8*, !dbg !10931
  call void @llvm.lifetime.end(i64 8, i8* %81) #3, !dbg !10931
  %82 = bitcast %struct._object** %newstr to i8*, !dbg !10931
  call void @llvm.lifetime.end(i64 8, i8* %82) #3, !dbg !10931
  %83 = load %struct._object*, %struct._object** %retval, !dbg !10931
  ret %struct._object* %83, !dbg !10931
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_unsetenv(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  %err = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp13 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2729, metadata !3844), !dbg !10932
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2730, metadata !3844), !dbg !10933
  %0 = bitcast %struct._object** %name to i8*, !dbg !10934
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !10934
  call void @llvm.dbg.declare(metadata %struct._object** %name, metadata !2731, metadata !3844), !dbg !10935
  %1 = bitcast i32* %err to i8*, !dbg !10936
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !10936
  call void @llvm.dbg.declare(metadata i32* %err, metadata !2732, metadata !3844), !dbg !10937
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10938, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.323, i32 0, i32 0), i32 (%struct._object*, i8*)* @PyUnicode_FSConverter, %struct._object** %name), !dbg !10940
  %tobool = icmp ne i32 %call, 0, !dbg !10940
  br i1 %tobool, label %if.end, label %if.then, !dbg !10941

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10942
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10942

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %name, align 8, !dbg !10943, !tbaa !3867
  %4 = bitcast %struct._object* %3 to %struct.PyBytesObject*, !dbg !10944
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %4, i32 0, i32 2, !dbg !10945
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !10946
  %call1 = call i32 @unsetenv(i8* %arraydecay) #3, !dbg !10947
  store i32 %call1, i32* %err, align 4, !dbg !10948, !tbaa !3840
  %5 = load i32, i32* %err, align 4, !dbg !10949, !tbaa !3840
  %tobool2 = icmp ne i32 %5, 0, !dbg !10949
  br i1 %tobool2, label %if.then.3, label %if.end.7, !dbg !10950

if.then.3:                                        ; preds = %if.end
  br label %do.body, !dbg !10951

do.body:                                          ; preds = %if.then.3
  %6 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10952
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !10952
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !2733, metadata !3844), !dbg !10954
  %7 = load %struct._object*, %struct._object** %name, align 8, !dbg !10955, !tbaa !3867
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8, !dbg !10954, !tbaa !3867
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10956, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0, !dbg !10958
  %9 = load i64, i64* %ob_refcnt, align 8, !dbg !10959, !tbaa !3977
  %dec = add i64 %9, -1, !dbg !10959
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !10959, !tbaa !3977
  %cmp = icmp ne i64 %dec, 0, !dbg !10960
  br i1 %cmp, label %if.then.4, label %if.else, !dbg !10961

if.then.4:                                        ; preds = %do.body
  br label %if.end.5, !dbg !10962

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10964, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !10966
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !10966, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4, !dbg !10967
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !10967, !tbaa !3986
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10968, !tbaa !3867
  call void %12(%struct._object* %13), !dbg !10969
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  %14 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10970
  call void @llvm.lifetime.end(i64 8, i8* %14) #3, !dbg !10970
  br label %do.cond, !dbg !10972

do.cond:                                          ; preds = %if.end.5
  br label %do.end, !dbg !10973

do.end:                                           ; preds = %do.cond
  %call6 = call %struct._object* @posix_error(), !dbg !10975
  store %struct._object* %call6, %struct._object** %retval, !dbg !10976
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10976

if.end.7:                                         ; preds = %if.end
  %15 = load %struct._object*, %struct._object** @posix_putenv_garbage, align 8, !dbg !10977, !tbaa !3867
  %16 = load %struct._object*, %struct._object** %name, align 8, !dbg !10979, !tbaa !3867
  %call8 = call i32 @PyDict_DelItem(%struct._object* %15, %struct._object* %16), !dbg !10980
  %tobool9 = icmp ne i32 %call8, 0, !dbg !10980
  br i1 %tobool9, label %if.then.10, label %if.end.11, !dbg !10981

if.then.10:                                       ; preds = %if.end.7
  call void @PyErr_Clear(), !dbg !10982
  br label %if.end.11, !dbg !10984

if.end.11:                                        ; preds = %if.then.10, %if.end.7
  br label %do.body.12, !dbg !10985

do.body.12:                                       ; preds = %if.end.11
  %17 = bitcast %struct._object** %_py_decref_tmp13 to i8*, !dbg !10986
  call void @llvm.lifetime.start(i64 8, i8* %17) #3, !dbg !10986
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp13, metadata !2737, metadata !3844), !dbg !10988
  %18 = load %struct._object*, %struct._object** %name, align 8, !dbg !10989, !tbaa !3867
  store %struct._object* %18, %struct._object** %_py_decref_tmp13, align 8, !dbg !10988, !tbaa !3867
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8, !dbg !10990, !tbaa !3867
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0, !dbg !10992
  %20 = load i64, i64* %ob_refcnt14, align 8, !dbg !10993, !tbaa !3977
  %dec15 = add i64 %20, -1, !dbg !10993
  store i64 %dec15, i64* %ob_refcnt14, align 8, !dbg !10993, !tbaa !3977
  %cmp16 = icmp ne i64 %dec15, 0, !dbg !10994
  br i1 %cmp16, label %if.then.17, label %if.else.18, !dbg !10995

if.then.17:                                       ; preds = %do.body.12
  br label %if.end.21, !dbg !10996

if.else.18:                                       ; preds = %do.body.12
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8, !dbg !10998, !tbaa !3867
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1, !dbg !11000
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8, !dbg !11000, !tbaa !3892
  %tp_dealloc20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4, !dbg !11001
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc20, align 8, !dbg !11001, !tbaa !3986
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8, !dbg !11002, !tbaa !3867
  call void %23(%struct._object* %24), !dbg !11003
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.18, %if.then.17
  %25 = bitcast %struct._object** %_py_decref_tmp13 to i8*, !dbg !11004
  call void @llvm.lifetime.end(i64 8, i8* %25) #3, !dbg !11004
  br label %do.cond.22, !dbg !11006

do.cond.22:                                       ; preds = %if.end.21
  br label %do.end.23, !dbg !11007

do.end.23:                                        ; preds = %do.cond.22
  %26 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !11009, !tbaa !3977
  %inc = add i64 %26, 1, !dbg !11009
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !11009, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !11010
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11010

cleanup:                                          ; preds = %do.end.23, %do.end, %if.then
  %27 = bitcast i32* %err to i8*, !dbg !11011
  call void @llvm.lifetime.end(i64 4, i8* %27) #3, !dbg !11011
  %28 = bitcast %struct._object** %name to i8*, !dbg !11011
  call void @llvm.lifetime.end(i64 8, i8* %28) #3, !dbg !11011
  %29 = load %struct._object*, %struct._object** %retval, !dbg !11011
  ret %struct._object* %29, !dbg !11011
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_strerror(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %code = alloca i32, align 4
  %message = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2741, metadata !3844), !dbg !11012
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2742, metadata !3844), !dbg !11013
  %0 = bitcast i32* %code to i8*, !dbg !11014
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !11014
  call void @llvm.dbg.declare(metadata i32* %code, metadata !2743, metadata !3844), !dbg !11015
  %1 = bitcast i8** %message to i8*, !dbg !11016
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !11016
  call void @llvm.dbg.declare(metadata i8** %message, metadata !2744, metadata !3844), !dbg !11017
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11018, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.324, i32 0, i32 0), i32* %code), !dbg !11020
  %tobool = icmp ne i32 %call, 0, !dbg !11020
  br i1 %tobool, label %if.end, label %if.then, !dbg !11021

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11022
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11022

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %code, align 4, !dbg !11023, !tbaa !3840
  %call1 = call i8* @strerror(i32 %3) #3, !dbg !11024
  store i8* %call1, i8** %message, align 8, !dbg !11025, !tbaa !3867
  %4 = load i8*, i8** %message, align 8, !dbg !11026, !tbaa !3867
  %cmp = icmp eq i8* %4, null, !dbg !11028
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !11029

if.then.2:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !11030, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.325, i32 0, i32 0)), !dbg !11032
  store %struct._object* null, %struct._object** %retval, !dbg !11033
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11033

if.end.3:                                         ; preds = %if.end
  %6 = load i8*, i8** %message, align 8, !dbg !11034, !tbaa !3867
  %call4 = call %struct._object* @PyUnicode_DecodeLocale(i8* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.326, i32 0, i32 0)), !dbg !11035
  store %struct._object* %call4, %struct._object** %retval, !dbg !11036
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11036

cleanup:                                          ; preds = %if.end.3, %if.then.2, %if.then
  %7 = bitcast i8** %message to i8*, !dbg !11037
  call void @llvm.lifetime.end(i64 8, i8* %7) #3, !dbg !11037
  %8 = bitcast i32* %code to i8*, !dbg !11037
  call void @llvm.lifetime.end(i64 4, i8* %8) #3, !dbg !11037
  %9 = load %struct._object*, %struct._object** %retval, !dbg !11037
  ret %struct._object* %9, !dbg !11037
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_fchdir(%struct._object* %self, %struct._object* %fdobj) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %fdobj.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2747, metadata !3844), !dbg !11038
  store %struct._object* %fdobj, %struct._object** %fdobj.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %fdobj.addr, metadata !2748, metadata !3844), !dbg !11039
  %0 = load %struct._object*, %struct._object** %fdobj.addr, align 8, !dbg !11040, !tbaa !3867
  %call = call %struct._object* @posix_fildes(%struct._object* %0, i32 (i32)* @fchdir), !dbg !11041
  ret %struct._object* %call, !dbg !11042
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_fsync(%struct._object* %self, %struct._object* %fdobj) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %fdobj.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2764, metadata !3844), !dbg !11043
  store %struct._object* %fdobj, %struct._object** %fdobj.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %fdobj.addr, metadata !2765, metadata !3844), !dbg !11044
  %0 = load %struct._object*, %struct._object** %fdobj.addr, align 8, !dbg !11045, !tbaa !3867
  %call = call %struct._object* @posix_fildes(%struct._object* %0, i32 (i32)* @fsync), !dbg !11046
  ret %struct._object* %call, !dbg !11047
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_sync(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2768, metadata !3844), !dbg !11048
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !2769, metadata !3844), !dbg !11049
  %0 = bitcast %struct._ts** %_save to i8*, !dbg !11050
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !11050
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2770, metadata !3844), !dbg !11051
  %call = call %struct._ts* @PyEval_SaveThread(), !dbg !11052
  store %struct._ts* %call, %struct._ts** %_save, align 8, !dbg !11053, !tbaa !3867
  call void @sync() #3, !dbg !11054
  %1 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !11055, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %1), !dbg !11056
  %2 = bitcast %struct._ts** %_save to i8*, !dbg !11057
  call void @llvm.lifetime.end(i64 8, i8* %2) #3, !dbg !11057
  %3 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !11058, !tbaa !3977
  %inc = add i64 %3, 1, !dbg !11058
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !11058, !tbaa !3977
  ret %struct._object* @_Py_NoneStruct, !dbg !11059
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_fdatasync(%struct._object* %self, %struct._object* %fdobj) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %fdobj.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2774, metadata !3844), !dbg !11060
  store %struct._object* %fdobj, %struct._object** %fdobj.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %fdobj.addr, metadata !2775, metadata !3844), !dbg !11061
  %0 = load %struct._object*, %struct._object** %fdobj.addr, align 8, !dbg !11062, !tbaa !3867
  %call = call %struct._object* @posix_fildes(%struct._object* %0, i32 (i32)* @fdatasync), !dbg !11063
  ret %struct._object* %call, !dbg !11064
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_WCOREDUMP(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %.compoundliteral = alloca %union.anon.22, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2778, metadata !3844), !dbg !11065
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2779, metadata !3844), !dbg !11066
  %0 = bitcast i32* %status to i8*, !dbg !11067
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !11067
  call void @llvm.dbg.declare(metadata i32* %status, metadata !2780, metadata !3844), !dbg !11068
  store i32 0, i32* %status, align 4, !dbg !11069, !tbaa !3840
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11070, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.327, i32 0, i32 0), i32* %status), !dbg !11072
  %tobool = icmp ne i32 %call, 0, !dbg !11072
  br i1 %tobool, label %if.end, label %if.then, !dbg !11073

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11074
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11074

if.end:                                           ; preds = %entry
  %__in = bitcast %union.anon.22* %.compoundliteral to i32*, !dbg !11075
  %2 = load i32, i32* %status, align 4, !dbg !11076, !tbaa !3840
  store i32 %2, i32* %__in, align 4, !dbg !11075, !tbaa !3840
  %__i = bitcast %union.anon.22* %.compoundliteral to i32*, !dbg !11077
  %3 = load i32, i32* %__i, align 4, !dbg !11077, !tbaa !3840
  %and = and i32 %3, 128, !dbg !11078
  %conv = sext i32 %and to i64, !dbg !11079
  %call1 = call %struct._object* @PyBool_FromLong(i64 %conv), !dbg !11080
  store %struct._object* %call1, %struct._object** %retval, !dbg !11081
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11081

cleanup:                                          ; preds = %if.end, %if.then
  %4 = bitcast i32* %status to i8*, !dbg !11082
  call void @llvm.lifetime.end(i64 4, i8* %4) #3, !dbg !11082
  %5 = load %struct._object*, %struct._object** %retval, !dbg !11082
  ret %struct._object* %5, !dbg !11082
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_WIFCONTINUED(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %.compoundliteral = alloca %union.anon.23, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2783, metadata !3844), !dbg !11083
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2784, metadata !3844), !dbg !11084
  %0 = bitcast i32* %status to i8*, !dbg !11085
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !11085
  call void @llvm.dbg.declare(metadata i32* %status, metadata !2785, metadata !3844), !dbg !11086
  store i32 0, i32* %status, align 4, !dbg !11087, !tbaa !3840
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11088, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.328, i32 0, i32 0), i32* %status), !dbg !11090
  %tobool = icmp ne i32 %call, 0, !dbg !11090
  br i1 %tobool, label %if.end, label %if.then, !dbg !11091

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11092
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11092

if.end:                                           ; preds = %entry
  %__in = bitcast %union.anon.23* %.compoundliteral to i32*, !dbg !11093
  %2 = load i32, i32* %status, align 4, !dbg !11094, !tbaa !3840
  store i32 %2, i32* %__in, align 4, !dbg !11093, !tbaa !3840
  %__i = bitcast %union.anon.23* %.compoundliteral to i32*, !dbg !11095
  %3 = load i32, i32* %__i, align 4, !dbg !11095, !tbaa !3840
  %cmp = icmp eq i32 %3, 65535, !dbg !11096
  %conv = zext i1 %cmp to i32, !dbg !11096
  %conv1 = sext i32 %conv to i64, !dbg !11097
  %call2 = call %struct._object* @PyBool_FromLong(i64 %conv1), !dbg !11098
  store %struct._object* %call2, %struct._object** %retval, !dbg !11099
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11099

cleanup:                                          ; preds = %if.end, %if.then
  %4 = bitcast i32* %status to i8*, !dbg !11100
  call void @llvm.lifetime.end(i64 4, i8* %4) #3, !dbg !11100
  %5 = load %struct._object*, %struct._object** %retval, !dbg !11100
  ret %struct._object* %5, !dbg !11100
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_WIFSTOPPED(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %.compoundliteral = alloca %union.anon.24, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2788, metadata !3844), !dbg !11101
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2789, metadata !3844), !dbg !11102
  %0 = bitcast i32* %status to i8*, !dbg !11103
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !11103
  call void @llvm.dbg.declare(metadata i32* %status, metadata !2790, metadata !3844), !dbg !11104
  store i32 0, i32* %status, align 4, !dbg !11105, !tbaa !3840
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11106, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.329, i32 0, i32 0), i32* %status), !dbg !11108
  %tobool = icmp ne i32 %call, 0, !dbg !11108
  br i1 %tobool, label %if.end, label %if.then, !dbg !11109

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11110
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11110

if.end:                                           ; preds = %entry
  %__in = bitcast %union.anon.24* %.compoundliteral to i32*, !dbg !11111
  %2 = load i32, i32* %status, align 4, !dbg !11112, !tbaa !3840
  store i32 %2, i32* %__in, align 4, !dbg !11111, !tbaa !3840
  %__i = bitcast %union.anon.24* %.compoundliteral to i32*, !dbg !11113
  %3 = load i32, i32* %__i, align 4, !dbg !11113, !tbaa !3840
  %and = and i32 %3, 255, !dbg !11114
  %cmp = icmp eq i32 %and, 127, !dbg !11115
  %conv = zext i1 %cmp to i32, !dbg !11115
  %conv1 = sext i32 %conv to i64, !dbg !11116
  %call2 = call %struct._object* @PyBool_FromLong(i64 %conv1), !dbg !11117
  store %struct._object* %call2, %struct._object** %retval, !dbg !11118
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11118

cleanup:                                          ; preds = %if.end, %if.then
  %4 = bitcast i32* %status to i8*, !dbg !11119
  call void @llvm.lifetime.end(i64 4, i8* %4) #3, !dbg !11119
  %5 = load %struct._object*, %struct._object** %retval, !dbg !11119
  ret %struct._object* %5, !dbg !11119
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_WIFSIGNALED(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %.compoundliteral = alloca %union.anon.25, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2793, metadata !3844), !dbg !11120
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2794, metadata !3844), !dbg !11121
  %0 = bitcast i32* %status to i8*, !dbg !11122
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !11122
  call void @llvm.dbg.declare(metadata i32* %status, metadata !2795, metadata !3844), !dbg !11123
  store i32 0, i32* %status, align 4, !dbg !11124, !tbaa !3840
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11125, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.330, i32 0, i32 0), i32* %status), !dbg !11127
  %tobool = icmp ne i32 %call, 0, !dbg !11127
  br i1 %tobool, label %if.end, label %if.then, !dbg !11128

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11129
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11129

if.end:                                           ; preds = %entry
  %__in = bitcast %union.anon.25* %.compoundliteral to i32*, !dbg !11130
  %2 = load i32, i32* %status, align 4, !dbg !11131, !tbaa !3840
  store i32 %2, i32* %__in, align 4, !dbg !11130, !tbaa !3840
  %__i = bitcast %union.anon.25* %.compoundliteral to i32*, !dbg !11132
  %3 = load i32, i32* %__i, align 4, !dbg !11132, !tbaa !3840
  %and = and i32 %3, 127, !dbg !11133
  %add = add i32 %and, 1, !dbg !11134
  %conv = trunc i32 %add to i8, !dbg !11135
  %conv1 = sext i8 %conv to i32, !dbg !11135
  %shr = ashr i32 %conv1, 1, !dbg !11136
  %cmp = icmp sgt i32 %shr, 0, !dbg !11137
  %conv2 = zext i1 %cmp to i32, !dbg !11137
  %conv3 = sext i32 %conv2 to i64, !dbg !11138
  %call4 = call %struct._object* @PyBool_FromLong(i64 %conv3), !dbg !11139
  store %struct._object* %call4, %struct._object** %retval, !dbg !11140
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11140

cleanup:                                          ; preds = %if.end, %if.then
  %4 = bitcast i32* %status to i8*, !dbg !11141
  call void @llvm.lifetime.end(i64 4, i8* %4) #3, !dbg !11141
  %5 = load %struct._object*, %struct._object** %retval, !dbg !11141
  ret %struct._object* %5, !dbg !11141
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_WIFEXITED(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %.compoundliteral = alloca %union.anon.26, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2798, metadata !3844), !dbg !11142
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2799, metadata !3844), !dbg !11143
  %0 = bitcast i32* %status to i8*, !dbg !11144
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !11144
  call void @llvm.dbg.declare(metadata i32* %status, metadata !2800, metadata !3844), !dbg !11145
  store i32 0, i32* %status, align 4, !dbg !11146, !tbaa !3840
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11147, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.331, i32 0, i32 0), i32* %status), !dbg !11149
  %tobool = icmp ne i32 %call, 0, !dbg !11149
  br i1 %tobool, label %if.end, label %if.then, !dbg !11150

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11151
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11151

if.end:                                           ; preds = %entry
  %__in = bitcast %union.anon.26* %.compoundliteral to i32*, !dbg !11152
  %2 = load i32, i32* %status, align 4, !dbg !11153, !tbaa !3840
  store i32 %2, i32* %__in, align 4, !dbg !11152, !tbaa !3840
  %__i = bitcast %union.anon.26* %.compoundliteral to i32*, !dbg !11154
  %3 = load i32, i32* %__i, align 4, !dbg !11154, !tbaa !3840
  %and = and i32 %3, 127, !dbg !11155
  %cmp = icmp eq i32 %and, 0, !dbg !11156
  %conv = zext i1 %cmp to i32, !dbg !11156
  %conv1 = sext i32 %conv to i64, !dbg !11157
  %call2 = call %struct._object* @PyBool_FromLong(i64 %conv1), !dbg !11158
  store %struct._object* %call2, %struct._object** %retval, !dbg !11159
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11159

cleanup:                                          ; preds = %if.end, %if.then
  %4 = bitcast i32* %status to i8*, !dbg !11160
  call void @llvm.lifetime.end(i64 4, i8* %4) #3, !dbg !11160
  %5 = load %struct._object*, %struct._object** %retval, !dbg !11160
  ret %struct._object* %5, !dbg !11160
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_WEXITSTATUS(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %.compoundliteral = alloca %union.anon.27, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2803, metadata !3844), !dbg !11161
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2804, metadata !3844), !dbg !11162
  %0 = bitcast i32* %status to i8*, !dbg !11163
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !11163
  call void @llvm.dbg.declare(metadata i32* %status, metadata !2805, metadata !3844), !dbg !11164
  store i32 0, i32* %status, align 4, !dbg !11165, !tbaa !3840
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11166, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.332, i32 0, i32 0), i32* %status), !dbg !11168
  %tobool = icmp ne i32 %call, 0, !dbg !11168
  br i1 %tobool, label %if.end, label %if.then, !dbg !11169

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11170
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11170

if.end:                                           ; preds = %entry
  %__in = bitcast %union.anon.27* %.compoundliteral to i32*, !dbg !11171
  %2 = load i32, i32* %status, align 4, !dbg !11172, !tbaa !3840
  store i32 %2, i32* %__in, align 4, !dbg !11171, !tbaa !3840
  %__i = bitcast %union.anon.27* %.compoundliteral to i32*, !dbg !11173
  %3 = load i32, i32* %__i, align 4, !dbg !11173, !tbaa !3840
  %and = and i32 %3, 65280, !dbg !11174
  %shr = ashr i32 %and, 8, !dbg !11175
  %call1 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.333, i32 0, i32 0), i32 %shr), !dbg !11176
  store %struct._object* %call1, %struct._object** %retval, !dbg !11177
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11177

cleanup:                                          ; preds = %if.end, %if.then
  %4 = bitcast i32* %status to i8*, !dbg !11178
  call void @llvm.lifetime.end(i64 4, i8* %4) #3, !dbg !11178
  %5 = load %struct._object*, %struct._object** %retval, !dbg !11178
  ret %struct._object* %5, !dbg !11178
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_WTERMSIG(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %.compoundliteral = alloca %union.anon.28, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2808, metadata !3844), !dbg !11179
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2809, metadata !3844), !dbg !11180
  %0 = bitcast i32* %status to i8*, !dbg !11181
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !11181
  call void @llvm.dbg.declare(metadata i32* %status, metadata !2810, metadata !3844), !dbg !11182
  store i32 0, i32* %status, align 4, !dbg !11183, !tbaa !3840
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11184, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.334, i32 0, i32 0), i32* %status), !dbg !11186
  %tobool = icmp ne i32 %call, 0, !dbg !11186
  br i1 %tobool, label %if.end, label %if.then, !dbg !11187

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11188
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11188

if.end:                                           ; preds = %entry
  %__in = bitcast %union.anon.28* %.compoundliteral to i32*, !dbg !11189
  %2 = load i32, i32* %status, align 4, !dbg !11190, !tbaa !3840
  store i32 %2, i32* %__in, align 4, !dbg !11189, !tbaa !3840
  %__i = bitcast %union.anon.28* %.compoundliteral to i32*, !dbg !11191
  %3 = load i32, i32* %__i, align 4, !dbg !11191, !tbaa !3840
  %and = and i32 %3, 127, !dbg !11192
  %call1 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.333, i32 0, i32 0), i32 %and), !dbg !11193
  store %struct._object* %call1, %struct._object** %retval, !dbg !11194
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11194

cleanup:                                          ; preds = %if.end, %if.then
  %4 = bitcast i32* %status to i8*, !dbg !11195
  call void @llvm.lifetime.end(i64 4, i8* %4) #3, !dbg !11195
  %5 = load %struct._object*, %struct._object** %retval, !dbg !11195
  ret %struct._object* %5, !dbg !11195
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_WSTOPSIG(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %.compoundliteral = alloca %union.anon.29, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2813, metadata !3844), !dbg !11196
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2814, metadata !3844), !dbg !11197
  %0 = bitcast i32* %status to i8*, !dbg !11198
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !11198
  call void @llvm.dbg.declare(metadata i32* %status, metadata !2815, metadata !3844), !dbg !11199
  store i32 0, i32* %status, align 4, !dbg !11200, !tbaa !3840
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11201, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.335, i32 0, i32 0), i32* %status), !dbg !11203
  %tobool = icmp ne i32 %call, 0, !dbg !11203
  br i1 %tobool, label %if.end, label %if.then, !dbg !11204

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11205
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11205

if.end:                                           ; preds = %entry
  %__in = bitcast %union.anon.29* %.compoundliteral to i32*, !dbg !11206
  %2 = load i32, i32* %status, align 4, !dbg !11207, !tbaa !3840
  store i32 %2, i32* %__in, align 4, !dbg !11206, !tbaa !3840
  %__i = bitcast %union.anon.29* %.compoundliteral to i32*, !dbg !11208
  %3 = load i32, i32* %__i, align 4, !dbg !11208, !tbaa !3840
  %and = and i32 %3, 65280, !dbg !11209
  %shr = ashr i32 %and, 8, !dbg !11210
  %call1 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.333, i32 0, i32 0), i32 %shr), !dbg !11211
  store %struct._object* %call1, %struct._object** %retval, !dbg !11212
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11212

cleanup:                                          ; preds = %if.end, %if.then
  %4 = bitcast i32* %status to i8*, !dbg !11213
  call void @llvm.lifetime.end(i64 4, i8* %4) #3, !dbg !11213
  %5 = load %struct._object*, %struct._object** %retval, !dbg !11213
  ret %struct._object* %5, !dbg !11213
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_fstatvfs(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %res = alloca i32, align 4
  %st = alloca %struct.statvfs, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2818, metadata !3844), !dbg !11214
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2819, metadata !3844), !dbg !11215
  %0 = bitcast i32* %fd to i8*, !dbg !11216
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !11216
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2820, metadata !3844), !dbg !11217
  %1 = bitcast i32* %res to i8*, !dbg !11216
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !11216
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2821, metadata !3844), !dbg !11218
  %2 = bitcast %struct.statvfs* %st to i8*, !dbg !11219
  call void @llvm.lifetime.start(i64 112, i8* %2) #3, !dbg !11219
  call void @llvm.dbg.declare(metadata %struct.statvfs* %st, metadata !2822, metadata !3844), !dbg !11220
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11221, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.336, i32 0, i32 0), i32* %fd), !dbg !11223
  %tobool = icmp ne i32 %call, 0, !dbg !11223
  br i1 %tobool, label %if.end, label %if.then, !dbg !11224

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11225
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11225

if.end:                                           ; preds = %entry
  %4 = bitcast %struct._ts** %_save to i8*, !dbg !11226
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !11226
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2840, metadata !3844), !dbg !11227
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !11228
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !11229, !tbaa !3867
  %5 = load i32, i32* %fd, align 4, !dbg !11230, !tbaa !3840
  %call2 = call i32 @fstatvfs64(i32 %5, %struct.statvfs* %st) #3, !dbg !11231
  store i32 %call2, i32* %res, align 4, !dbg !11232, !tbaa !3840
  %6 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !11233, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %6), !dbg !11234
  %7 = bitcast %struct._ts** %_save to i8*, !dbg !11235
  call void @llvm.lifetime.end(i64 8, i8* %7) #3, !dbg !11235
  %8 = load i32, i32* %res, align 4, !dbg !11236, !tbaa !3840
  %cmp = icmp ne i32 %8, 0, !dbg !11238
  br i1 %cmp, label %if.then.3, label %if.end.5, !dbg !11239

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @posix_error(), !dbg !11240
  store %struct._object* %call4, %struct._object** %retval, !dbg !11241
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11241

if.end.5:                                         ; preds = %if.end
  %call6 = call %struct._object* @_pystatvfs_fromstructstatvfs(%struct.statvfs* byval align 8 %st), !dbg !11242
  store %struct._object* %call6, %struct._object** %retval, !dbg !11243
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11243

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %9 = bitcast %struct.statvfs* %st to i8*, !dbg !11244
  call void @llvm.lifetime.end(i64 112, i8* %9) #3, !dbg !11244
  %10 = bitcast i32* %res to i8*, !dbg !11244
  call void @llvm.lifetime.end(i64 4, i8* %10) #3, !dbg !11244
  %11 = bitcast i32* %fd to i8*, !dbg !11244
  call void @llvm.lifetime.end(i64 4, i8* %11) #3, !dbg !11244
  %12 = load %struct._object*, %struct._object** %retval, !dbg !11244
  ret %struct._object* %12, !dbg !11244
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_statvfs(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %result = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %st = alloca %struct.statvfs, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2854, metadata !3844), !dbg !11245
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2855, metadata !3844), !dbg !11246
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !2856, metadata !3844), !dbg !11247
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !11248
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !11248
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !2857, metadata !3844), !dbg !11249
  %1 = bitcast i32* %result to i8*, !dbg !11250
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !11250
  call void @llvm.dbg.declare(metadata i32* %result, metadata !2858, metadata !3844), !dbg !11251
  %2 = bitcast %struct._object** %return_value to i8*, !dbg !11252
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !11252
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !2859, metadata !3844), !dbg !11253
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !11253, !tbaa !3867
  %3 = bitcast %struct.statvfs* %st to i8*, !dbg !11254
  call void @llvm.lifetime.start(i64 112, i8* %3) #3, !dbg !11254
  call void @llvm.dbg.declare(metadata %struct.statvfs* %st, metadata !2860, metadata !3844), !dbg !11255
  %4 = bitcast %struct.path_t* %path to i8*, !dbg !11256
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 72, i32 8, i1 false), !dbg !11256
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !11257
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.149, i32 0, i32 0), i8** %function_name, align 8, !dbg !11258, !tbaa !5512
  %allow_fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 3, !dbg !11259
  store i32 1, i32* %allow_fd, align 4, !dbg !11260, !tbaa !5516
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11261, !tbaa !3867
  %6 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !11263, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %5, %struct._object* %6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.337, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @posix_statvfs.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path), !dbg !11264
  %tobool = icmp ne i32 %call, 0, !dbg !11264
  br i1 %tobool, label %if.end, label %if.then, !dbg !11265

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11266
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11266

if.end:                                           ; preds = %entry
  %7 = bitcast %struct._ts** %_save to i8*, !dbg !11267
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !11267
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2861, metadata !3844), !dbg !11268
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !11269
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !11270, !tbaa !3867
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !11271
  %8 = load i32, i32* %fd, align 4, !dbg !11271, !tbaa !5529
  %cmp = icmp ne i32 %8, -1, !dbg !11273
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !11274

if.then.2:                                        ; preds = %if.end
  %fd3 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !11275
  %9 = load i32, i32* %fd3, align 4, !dbg !11275, !tbaa !5529
  %call4 = call i32 @fstatvfs64(i32 %9, %struct.statvfs* %st) #3, !dbg !11277
  store i32 %call4, i32* %result, align 4, !dbg !11278, !tbaa !3840
  br label %if.end.6, !dbg !11279

if.else:                                          ; preds = %if.end
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !11280
  %10 = load i8*, i8** %narrow, align 8, !dbg !11280, !tbaa !5537
  %call5 = call i32 @statvfs64(i8* %10, %struct.statvfs* %st) #3, !dbg !11281
  store i32 %call5, i32* %result, align 4, !dbg !11282, !tbaa !3840
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.2
  %11 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !11283, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %11), !dbg !11284
  %12 = bitcast %struct._ts** %_save to i8*, !dbg !11285
  call void @llvm.lifetime.end(i64 8, i8* %12) #3, !dbg !11285
  %13 = load i32, i32* %result, align 4, !dbg !11286, !tbaa !3840
  %tobool7 = icmp ne i32 %13, 0, !dbg !11286
  br i1 %tobool7, label %if.then.8, label %if.end.10, !dbg !11288

if.then.8:                                        ; preds = %if.end.6
  %call9 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !11289
  store %struct._object* %call9, %struct._object** %return_value, align 8, !dbg !11291, !tbaa !3867
  br label %exit, !dbg !11292

if.end.10:                                        ; preds = %if.end.6
  %call11 = call %struct._object* @_pystatvfs_fromstructstatvfs(%struct.statvfs* byval align 8 %st), !dbg !11293
  store %struct._object* %call11, %struct._object** %return_value, align 8, !dbg !11294, !tbaa !3867
  br label %exit, !dbg !11295

exit:                                             ; preds = %if.end.10, %if.then.8
  call void @path_cleanup(%struct.path_t* %path), !dbg !11296
  %14 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !11297, !tbaa !3867
  store %struct._object* %14, %struct._object** %retval, !dbg !11298
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11298

cleanup:                                          ; preds = %exit, %if.then
  %15 = bitcast %struct.statvfs* %st to i8*, !dbg !11299
  call void @llvm.lifetime.end(i64 112, i8* %15) #3, !dbg !11299
  %16 = bitcast %struct._object** %return_value to i8*, !dbg !11299
  call void @llvm.lifetime.end(i64 8, i8* %16) #3, !dbg !11299
  %17 = bitcast i32* %result to i8*, !dbg !11299
  call void @llvm.lifetime.end(i64 4, i8* %17) #3, !dbg !11299
  %18 = bitcast %struct.path_t* %path to i8*, !dbg !11299
  call void @llvm.lifetime.end(i64 72, i8* %18) #3, !dbg !11299
  %19 = load %struct._object*, %struct._object** %retval, !dbg !11299
  ret %struct._object* %19, !dbg !11299
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_confstr(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %name = alloca i32, align 4
  %buffer = alloca [255 x i8], align 16
  %len = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %buf = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2865, metadata !3844), !dbg !11300
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2866, metadata !3844), !dbg !11301
  %0 = bitcast %struct._object** %result to i8*, !dbg !11302
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !11302
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !2867, metadata !3844), !dbg !11303
  store %struct._object* null, %struct._object** %result, align 8, !dbg !11303, !tbaa !3867
  %1 = bitcast i32* %name to i8*, !dbg !11304
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !11304
  call void @llvm.dbg.declare(metadata i32* %name, metadata !2868, metadata !3844), !dbg !11305
  %2 = bitcast [255 x i8]* %buffer to i8*, !dbg !11306
  call void @llvm.lifetime.start(i64 255, i8* %2) #3, !dbg !11306
  call void @llvm.dbg.declare(metadata [255 x i8]* %buffer, metadata !2869, metadata !3844), !dbg !11307
  %3 = bitcast i64* %len to i8*, !dbg !11308
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !11308
  call void @llvm.dbg.declare(metadata i64* %len, metadata !2873, metadata !3844), !dbg !11309
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11310, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.338, i32 0, i32 0), i32 (%struct._object*, i32*)* @conv_confstr_confname, i32* %name), !dbg !11312
  %tobool = icmp ne i32 %call, 0, !dbg !11312
  br i1 %tobool, label %if.end, label %if.then, !dbg !11313

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11314
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.23, !dbg !11314

if.end:                                           ; preds = %entry
  %call1 = call i32* @__errno_location() #1, !dbg !11315
  store i32 0, i32* %call1, align 4, !dbg !11316, !tbaa !3840
  %5 = load i32, i32* %name, align 4, !dbg !11317, !tbaa !3840
  %arraydecay = getelementptr inbounds [255 x i8], [255 x i8]* %buffer, i32 0, i32 0, !dbg !11318
  %call2 = call i64 @confstr(i32 %5, i8* %arraydecay, i64 255) #3, !dbg !11319
  store i64 %call2, i64* %len, align 8, !dbg !11320, !tbaa !3904
  %6 = load i64, i64* %len, align 8, !dbg !11321, !tbaa !3904
  %cmp = icmp eq i64 %6, 0, !dbg !11323
  br i1 %cmp, label %if.then.3, label %if.end.8, !dbg !11324

if.then.3:                                        ; preds = %if.end
  %call4 = call i32* @__errno_location() #1, !dbg !11325
  %7 = load i32, i32* %call4, align 4, !dbg !11328, !tbaa !3840
  %tobool5 = icmp ne i32 %7, 0, !dbg !11329
  br i1 %tobool5, label %if.then.6, label %if.else, !dbg !11330

if.then.6:                                        ; preds = %if.then.3
  %call7 = call %struct._object* @posix_error(), !dbg !11331
  store %struct._object* null, %struct._object** %retval, !dbg !11333
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.23, !dbg !11333

if.else:                                          ; preds = %if.then.3
  %8 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !11334, !tbaa !3977
  %inc = add i64 %8, 1, !dbg !11334
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !11334, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !11336
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.23, !dbg !11336

if.end.8:                                         ; preds = %if.end
  %9 = load i64, i64* %len, align 8, !dbg !11337, !tbaa !3904
  %cmp9 = icmp uge i64 %9, 255, !dbg !11338
  br i1 %cmp9, label %if.then.10, label %if.else.18, !dbg !11339

if.then.10:                                       ; preds = %if.end.8
  %10 = bitcast i8** %buf to i8*, !dbg !11340
  call void @llvm.lifetime.start(i64 8, i8* %10) #3, !dbg !11340
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !2874, metadata !3844), !dbg !11341
  %11 = load i64, i64* %len, align 8, !dbg !11342, !tbaa !3904
  %call11 = call i8* @PyMem_Malloc(i64 %11), !dbg !11343
  store i8* %call11, i8** %buf, align 8, !dbg !11341, !tbaa !3867
  %12 = load i8*, i8** %buf, align 8, !dbg !11344, !tbaa !3867
  %cmp12 = icmp eq i8* %12, null, !dbg !11346
  br i1 %cmp12, label %if.then.13, label %if.end.15, !dbg !11347

if.then.13:                                       ; preds = %if.then.10
  %call14 = call %struct._object* @PyErr_NoMemory(), !dbg !11348
  store %struct._object* %call14, %struct._object** %retval, !dbg !11349
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11349

if.end.15:                                        ; preds = %if.then.10
  %13 = load i32, i32* %name, align 4, !dbg !11350, !tbaa !3840
  %14 = load i8*, i8** %buf, align 8, !dbg !11351, !tbaa !3867
  %15 = load i64, i64* %len, align 8, !dbg !11352, !tbaa !3904
  %call16 = call i64 @confstr(i32 %13, i8* %14, i64 %15) #3, !dbg !11353
  %16 = load i8*, i8** %buf, align 8, !dbg !11354, !tbaa !3867
  %17 = load i64, i64* %len, align 8, !dbg !11355, !tbaa !3904
  %sub = sub i64 %17, 1, !dbg !11356
  %call17 = call %struct._object* @PyUnicode_DecodeFSDefaultAndSize(i8* %16, i64 %sub), !dbg !11357
  store %struct._object* %call17, %struct._object** %result, align 8, !dbg !11358, !tbaa !3867
  %18 = load i8*, i8** %buf, align 8, !dbg !11359, !tbaa !3867
  call void @PyMem_Free(i8* %18), !dbg !11360
  store i32 0, i32* %cleanup.dest.slot, !dbg !11361
  br label %cleanup, !dbg !11361

cleanup:                                          ; preds = %if.end.15, %if.then.13
  %19 = bitcast i8** %buf to i8*, !dbg !11362
  call void @llvm.lifetime.end(i64 8, i8* %19) #3, !dbg !11362
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.22, !dbg !11364

if.else.18:                                       ; preds = %if.end.8
  %arraydecay19 = getelementptr inbounds [255 x i8], [255 x i8]* %buffer, i32 0, i32 0, !dbg !11365
  %20 = load i64, i64* %len, align 8, !dbg !11366, !tbaa !3904
  %sub20 = sub i64 %20, 1, !dbg !11367
  %call21 = call %struct._object* @PyUnicode_DecodeFSDefaultAndSize(i8* %arraydecay19, i64 %sub20), !dbg !11368
  store %struct._object* %call21, %struct._object** %result, align 8, !dbg !11369, !tbaa !3867
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.18, %cleanup.cont
  %21 = load %struct._object*, %struct._object** %result, align 8, !dbg !11370, !tbaa !3867
  store %struct._object* %21, %struct._object** %retval, !dbg !11371
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.23, !dbg !11371

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.23

cleanup.23:                                       ; preds = %NewDefault, %if.end.22, %if.else, %if.then.6, %if.then
  %22 = bitcast i64* %len to i8*, !dbg !11372
  call void @llvm.lifetime.end(i64 8, i8* %22) #3, !dbg !11372
  %23 = bitcast [255 x i8]* %buffer to i8*, !dbg !11372
  call void @llvm.lifetime.end(i64 255, i8* %23) #3, !dbg !11372
  %24 = bitcast i32* %name to i8*, !dbg !11372
  call void @llvm.lifetime.end(i64 4, i8* %24) #3, !dbg !11372
  %25 = bitcast %struct._object** %result to i8*, !dbg !11372
  call void @llvm.lifetime.end(i64 8, i8* %25) #3, !dbg !11372
  %26 = load %struct._object*, %struct._object** %retval, !dbg !11372
  ret %struct._object* %26, !dbg !11372
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_sysconf(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %name = alloca i32, align 4
  %value = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2905, metadata !3844), !dbg !11373
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2906, metadata !3844), !dbg !11374
  %0 = bitcast %struct._object** %result to i8*, !dbg !11375
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !11375
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !2907, metadata !3844), !dbg !11376
  store %struct._object* null, %struct._object** %result, align 8, !dbg !11376, !tbaa !3867
  %1 = bitcast i32* %name to i8*, !dbg !11377
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !11377
  call void @llvm.dbg.declare(metadata i32* %name, metadata !2908, metadata !3844), !dbg !11378
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11379, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.368, i32 0, i32 0), i32 (%struct._object*, i32*)* @conv_sysconf_confname, i32* %name), !dbg !11380
  %tobool = icmp ne i32 %call, 0, !dbg !11380
  br i1 %tobool, label %if.then, label %if.end.8, !dbg !11381

if.then:                                          ; preds = %entry
  %3 = bitcast i64* %value to i8*, !dbg !11382
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !11382
  call void @llvm.dbg.declare(metadata i64* %value, metadata !2909, metadata !3844), !dbg !11383
  %call1 = call i32* @__errno_location() #1, !dbg !11384
  store i32 0, i32* %call1, align 4, !dbg !11385, !tbaa !3840
  %4 = load i32, i32* %name, align 4, !dbg !11386, !tbaa !3840
  %call2 = call i64 @sysconf(i32 %4) #3, !dbg !11387
  store i64 %call2, i64* %value, align 8, !dbg !11388, !tbaa !3904
  %5 = load i64, i64* %value, align 8, !dbg !11389, !tbaa !3904
  %cmp = icmp eq i64 %5, -1, !dbg !11391
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !11392

land.lhs.true:                                    ; preds = %if.then
  %call3 = call i32* @__errno_location() #1, !dbg !11393
  %6 = load i32, i32* %call3, align 4, !dbg !11395, !tbaa !3840
  %cmp4 = icmp ne i32 %6, 0, !dbg !11396
  br i1 %cmp4, label %if.then.5, label %if.else, !dbg !11397

if.then.5:                                        ; preds = %land.lhs.true
  %call6 = call %struct._object* @posix_error(), !dbg !11398
  br label %if.end, !dbg !11398

if.else:                                          ; preds = %land.lhs.true, %if.then
  %7 = load i64, i64* %value, align 8, !dbg !11399, !tbaa !3904
  %call7 = call %struct._object* @PyLong_FromLong(i64 %7), !dbg !11400
  store %struct._object* %call7, %struct._object** %result, align 8, !dbg !11401, !tbaa !3867
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.5
  %8 = bitcast i64* %value to i8*, !dbg !11402
  call void @llvm.lifetime.end(i64 8, i8* %8) #3, !dbg !11402
  br label %if.end.8, !dbg !11403

if.end.8:                                         ; preds = %if.end, %entry
  %9 = load %struct._object*, %struct._object** %result, align 8, !dbg !11404, !tbaa !3867
  %10 = bitcast i32* %name to i8*, !dbg !11405
  call void @llvm.lifetime.end(i64 4, i8* %10) #3, !dbg !11405
  %11 = bitcast %struct._object** %result to i8*, !dbg !11405
  call void @llvm.lifetime.end(i64 8, i8* %11) #3, !dbg !11405
  ret %struct._object* %9, !dbg !11406
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_fpathconf(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %name = alloca i32, align 4
  %fd = alloca i32, align 4
  %limit = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2918, metadata !3844), !dbg !11407
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2919, metadata !3844), !dbg !11408
  %0 = bitcast %struct._object** %result to i8*, !dbg !11409
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !11409
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !2920, metadata !3844), !dbg !11410
  store %struct._object* null, %struct._object** %result, align 8, !dbg !11410, !tbaa !3867
  %1 = bitcast i32* %name to i8*, !dbg !11411
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !11411
  call void @llvm.dbg.declare(metadata i32* %name, metadata !2921, metadata !3844), !dbg !11412
  %2 = bitcast i32* %fd to i8*, !dbg !11411
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !11411
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2922, metadata !3844), !dbg !11413
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11414, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.503, i32 0, i32 0), i32* %fd, i32 (%struct._object*, i32*)* @conv_path_confname, i32* %name), !dbg !11415
  %tobool = icmp ne i32 %call, 0, !dbg !11415
  br i1 %tobool, label %if.then, label %if.end.8, !dbg !11416

if.then:                                          ; preds = %entry
  %4 = bitcast i64* %limit to i8*, !dbg !11417
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !11417
  call void @llvm.dbg.declare(metadata i64* %limit, metadata !2923, metadata !3844), !dbg !11418
  %call1 = call i32* @__errno_location() #1, !dbg !11419
  store i32 0, i32* %call1, align 4, !dbg !11420, !tbaa !3840
  %5 = load i32, i32* %fd, align 4, !dbg !11421, !tbaa !3840
  %6 = load i32, i32* %name, align 4, !dbg !11422, !tbaa !3840
  %call2 = call i64 @fpathconf(i32 %5, i32 %6) #3, !dbg !11423
  store i64 %call2, i64* %limit, align 8, !dbg !11424, !tbaa !3904
  %7 = load i64, i64* %limit, align 8, !dbg !11425, !tbaa !3904
  %cmp = icmp eq i64 %7, -1, !dbg !11427
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !11428

land.lhs.true:                                    ; preds = %if.then
  %call3 = call i32* @__errno_location() #1, !dbg !11429
  %8 = load i32, i32* %call3, align 4, !dbg !11431, !tbaa !3840
  %cmp4 = icmp ne i32 %8, 0, !dbg !11432
  br i1 %cmp4, label %if.then.5, label %if.else, !dbg !11433

if.then.5:                                        ; preds = %land.lhs.true
  %call6 = call %struct._object* @posix_error(), !dbg !11434
  br label %if.end, !dbg !11434

if.else:                                          ; preds = %land.lhs.true, %if.then
  %9 = load i64, i64* %limit, align 8, !dbg !11435, !tbaa !3904
  %call7 = call %struct._object* @PyLong_FromLong(i64 %9), !dbg !11436
  store %struct._object* %call7, %struct._object** %result, align 8, !dbg !11437, !tbaa !3867
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.5
  %10 = bitcast i64* %limit to i8*, !dbg !11438
  call void @llvm.lifetime.end(i64 8, i8* %10) #3, !dbg !11438
  br label %if.end.8, !dbg !11439

if.end.8:                                         ; preds = %if.end, %entry
  %11 = load %struct._object*, %struct._object** %result, align 8, !dbg !11440, !tbaa !3867
  %12 = bitcast i32* %fd to i8*, !dbg !11441
  call void @llvm.lifetime.end(i64 4, i8* %12) #3, !dbg !11441
  %13 = bitcast i32* %name to i8*, !dbg !11441
  call void @llvm.lifetime.end(i64 4, i8* %13) #3, !dbg !11441
  %14 = bitcast %struct._object** %result to i8*, !dbg !11441
  call void @llvm.lifetime.end(i64 8, i8* %14) #3, !dbg !11441
  ret %struct._object* %11, !dbg !11442
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_pathconf(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %result = alloca %struct._object*, align 8
  %name = alloca i32, align 4
  %limit = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2932, metadata !3844), !dbg !11443
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2933, metadata !3844), !dbg !11444
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !2934, metadata !3844), !dbg !11445
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !11446
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !11446
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !2935, metadata !3844), !dbg !11447
  %1 = bitcast %struct._object** %result to i8*, !dbg !11448
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !11448
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !2936, metadata !3844), !dbg !11449
  store %struct._object* null, %struct._object** %result, align 8, !dbg !11449, !tbaa !3867
  %2 = bitcast i32* %name to i8*, !dbg !11450
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !11450
  call void @llvm.dbg.declare(metadata i32* %name, metadata !2937, metadata !3844), !dbg !11451
  %3 = bitcast %struct.path_t* %path to i8*, !dbg !11452
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 72, i32 8, i1 false), !dbg !11452
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !11453
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.153, i32 0, i32 0), i8** %function_name, align 8, !dbg !11454, !tbaa !5512
  %allow_fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 3, !dbg !11455
  store i32 1, i32* %allow_fd, align 4, !dbg !11456, !tbaa !5516
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11457, !tbaa !3867
  %5 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !11458, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %4, %struct._object* %5, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.525, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @posix_pathconf.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32 (%struct._object*, i32*)* @conv_path_confname, i32* %name), !dbg !11459
  %tobool = icmp ne i32 %call, 0, !dbg !11459
  br i1 %tobool, label %if.then, label %if.end.20, !dbg !11460

if.then:                                          ; preds = %entry
  %6 = bitcast i64* %limit to i8*, !dbg !11461
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !11461
  call void @llvm.dbg.declare(metadata i64* %limit, metadata !2938, metadata !3844), !dbg !11462
  %call1 = call i32* @__errno_location() #1, !dbg !11463
  store i32 0, i32* %call1, align 4, !dbg !11464, !tbaa !3840
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !11465
  %7 = load i32, i32* %fd, align 4, !dbg !11465, !tbaa !5529
  %cmp = icmp ne i32 %7, -1, !dbg !11467
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !11468

if.then.2:                                        ; preds = %if.then
  %fd3 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !11469
  %8 = load i32, i32* %fd3, align 4, !dbg !11469, !tbaa !5529
  %9 = load i32, i32* %name, align 4, !dbg !11470, !tbaa !3840
  %call4 = call i64 @fpathconf(i32 %8, i32 %9) #3, !dbg !11471
  store i64 %call4, i64* %limit, align 8, !dbg !11472, !tbaa !3904
  br label %if.end, !dbg !11473

if.else:                                          ; preds = %if.then
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !11474
  %10 = load i8*, i8** %narrow, align 8, !dbg !11474, !tbaa !5537
  %11 = load i32, i32* %name, align 4, !dbg !11475, !tbaa !3840
  %call5 = call i64 @pathconf(i8* %10, i32 %11) #3, !dbg !11476
  store i64 %call5, i64* %limit, align 8, !dbg !11477, !tbaa !3904
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  %12 = load i64, i64* %limit, align 8, !dbg !11478, !tbaa !3904
  %cmp6 = icmp eq i64 %12, -1, !dbg !11480
  br i1 %cmp6, label %land.lhs.true, label %if.else.17, !dbg !11481

land.lhs.true:                                    ; preds = %if.end
  %call7 = call i32* @__errno_location() #1, !dbg !11482
  %13 = load i32, i32* %call7, align 4, !dbg !11484, !tbaa !3840
  %cmp8 = icmp ne i32 %13, 0, !dbg !11485
  br i1 %cmp8, label %if.then.9, label %if.else.17, !dbg !11486

if.then.9:                                        ; preds = %land.lhs.true
  %call10 = call i32* @__errno_location() #1, !dbg !11487
  %14 = load i32, i32* %call10, align 4, !dbg !11490, !tbaa !3840
  %cmp11 = icmp eq i32 %14, 22, !dbg !11491
  br i1 %cmp11, label %if.then.12, label %if.else.14, !dbg !11492

if.then.12:                                       ; preds = %if.then.9
  %call13 = call %struct._object* @posix_error(), !dbg !11493
  br label %if.end.16, !dbg !11493

if.else.14:                                       ; preds = %if.then.9
  %call15 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !11494
  store %struct._object* %call15, %struct._object** %result, align 8, !dbg !11495, !tbaa !3867
  br label %if.end.16

if.end.16:                                        ; preds = %if.else.14, %if.then.12
  br label %if.end.19, !dbg !11496

if.else.17:                                       ; preds = %land.lhs.true, %if.end
  %15 = load i64, i64* %limit, align 8, !dbg !11497, !tbaa !3904
  %call18 = call %struct._object* @PyLong_FromLong(i64 %15), !dbg !11498
  store %struct._object* %call18, %struct._object** %result, align 8, !dbg !11499, !tbaa !3867
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.17, %if.end.16
  %16 = bitcast i64* %limit to i8*, !dbg !11500
  call void @llvm.lifetime.end(i64 8, i8* %16) #3, !dbg !11500
  br label %if.end.20, !dbg !11501

if.end.20:                                        ; preds = %if.end.19, %entry
  call void @path_cleanup(%struct.path_t* %path), !dbg !11502
  %17 = load %struct._object*, %struct._object** %result, align 8, !dbg !11503, !tbaa !3867
  %18 = bitcast i32* %name to i8*, !dbg !11504
  call void @llvm.lifetime.end(i64 4, i8* %18) #3, !dbg !11504
  %19 = bitcast %struct._object** %result to i8*, !dbg !11504
  call void @llvm.lifetime.end(i64 8, i8* %19) #3, !dbg !11504
  %20 = bitcast %struct.path_t* %path to i8*, !dbg !11504
  call void @llvm.lifetime.end(i64 72, i8* %20) #3, !dbg !11504
  ret %struct._object* %17, !dbg !11505
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_abort(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2943, metadata !3844), !dbg !11506
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !2944, metadata !3844), !dbg !11507
  call void @abort() #13, !dbg !11508
  unreachable, !dbg !11508

return:                                           ; No predecessors!
  %0 = load %struct._object*, %struct._object** %retval, !dbg !11509
  ret %struct._object* %0, !dbg !11509
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getloadavg(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  %loadavg = alloca [3 x double], align 16
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2947, metadata !3844), !dbg !11510
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !2948, metadata !3844), !dbg !11511
  %0 = bitcast [3 x double]* %loadavg to i8*, !dbg !11512
  call void @llvm.lifetime.start(i64 24, i8* %0) #3, !dbg !11512
  call void @llvm.dbg.declare(metadata [3 x double]* %loadavg, metadata !2949, metadata !3844), !dbg !11513
  %arraydecay = getelementptr inbounds [3 x double], [3 x double]* %loadavg, i32 0, i32 0, !dbg !11514
  %call = call i32 @getloadavg(double* %arraydecay, i32 3) #3, !dbg !11516
  %cmp = icmp ne i32 %call, 3, !dbg !11517
  br i1 %cmp, label %if.then, label %if.else, !dbg !11518

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !11519, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %1, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.526, i32 0, i32 0)), !dbg !11521
  store %struct._object* null, %struct._object** %retval, !dbg !11522
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11522

if.else:                                          ; preds = %entry
  %arrayidx = getelementptr [3 x double], [3 x double]* %loadavg, i32 0, i64 0, !dbg !11523
  %2 = load double, double* %arrayidx, align 8, !dbg !11523, !tbaa !11524
  %arrayidx1 = getelementptr [3 x double], [3 x double]* %loadavg, i32 0, i64 1, !dbg !11526
  %3 = load double, double* %arrayidx1, align 8, !dbg !11526, !tbaa !11524
  %arrayidx2 = getelementptr [3 x double], [3 x double]* %loadavg, i32 0, i64 2, !dbg !11527
  %4 = load double, double* %arrayidx2, align 8, !dbg !11527, !tbaa !11524
  %call3 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.527, i32 0, i32 0), double %2, double %3, double %4), !dbg !11528
  store %struct._object* %call3, %struct._object** %retval, !dbg !11529
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11529

cleanup:                                          ; preds = %if.else, %if.then
  %5 = bitcast [3 x double]* %loadavg to i8*, !dbg !11530
  call void @llvm.lifetime.end(i64 24, i8* %5) #3, !dbg !11530
  %6 = load %struct._object*, %struct._object** %retval, !dbg !11530
  ret %struct._object* %6, !dbg !11530
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_urandom(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %result = alloca %struct._object*, align 8
  %ret = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2953, metadata !3844), !dbg !11531
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2954, metadata !3844), !dbg !11532
  %0 = bitcast i64* %size to i8*, !dbg !11533
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !11533
  call void @llvm.dbg.declare(metadata i64* %size, metadata !2955, metadata !3844), !dbg !11534
  %1 = bitcast %struct._object** %result to i8*, !dbg !11535
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !11535
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !2956, metadata !3844), !dbg !11536
  %2 = bitcast i32* %ret to i8*, !dbg !11537
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !11537
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !2957, metadata !3844), !dbg !11538
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11539, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.528, i32 0, i32 0), i64* %size), !dbg !11541
  %tobool = icmp ne i32 %call, 0, !dbg !11541
  br i1 %tobool, label %if.end, label %if.then, !dbg !11542

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11543
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11543

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %size, align 8, !dbg !11544, !tbaa !3904
  %cmp = icmp slt i64 %4, 0, !dbg !11546
  br i1 %cmp, label %if.then.1, label %if.end.3, !dbg !11547

if.then.1:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !11548, !tbaa !3867
  %call2 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %5, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.529, i32 0, i32 0)), !dbg !11549
  store %struct._object* %call2, %struct._object** %retval, !dbg !11550
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11550

if.end.3:                                         ; preds = %if.end
  %6 = load i64, i64* %size, align 8, !dbg !11551, !tbaa !3904
  %call4 = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 %6), !dbg !11552
  store %struct._object* %call4, %struct._object** %result, align 8, !dbg !11553, !tbaa !3867
  %7 = load %struct._object*, %struct._object** %result, align 8, !dbg !11554, !tbaa !3867
  %cmp5 = icmp eq %struct._object* %7, null, !dbg !11556
  br i1 %cmp5, label %if.then.6, label %if.end.7, !dbg !11557

if.then.6:                                        ; preds = %if.end.3
  store %struct._object* null, %struct._object** %retval, !dbg !11558
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11558

if.end.7:                                         ; preds = %if.end.3
  %8 = load %struct._object*, %struct._object** %result, align 8, !dbg !11559, !tbaa !3867
  %9 = bitcast %struct._object* %8 to %struct.PyBytesObject*, !dbg !11560
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %9, i32 0, i32 2, !dbg !11561
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !11562
  %10 = load %struct._object*, %struct._object** %result, align 8, !dbg !11563, !tbaa !3867
  %11 = bitcast %struct._object* %10 to %struct.PyVarObject*, !dbg !11564
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %11, i32 0, i32 1, !dbg !11565
  %12 = load i64, i64* %ob_size, align 8, !dbg !11565, !tbaa !11566
  %call8 = call i32 @_PyOS_URandom(i8* %arraydecay, i64 %12), !dbg !11567
  store i32 %call8, i32* %ret, align 4, !dbg !11568, !tbaa !3840
  %13 = load i32, i32* %ret, align 4, !dbg !11569, !tbaa !3840
  %cmp9 = icmp eq i32 %13, -1, !dbg !11570
  br i1 %cmp9, label %if.then.10, label %if.end.14, !dbg !11571

if.then.10:                                       ; preds = %if.end.7
  br label %do.body, !dbg !11572

do.body:                                          ; preds = %if.then.10
  %14 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !11573
  call void @llvm.lifetime.start(i64 8, i8* %14) #3, !dbg !11573
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !2958, metadata !3844), !dbg !11575
  %15 = load %struct._object*, %struct._object** %result, align 8, !dbg !11576, !tbaa !3867
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8, !dbg !11575, !tbaa !3867
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11577, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0, !dbg !11579
  %17 = load i64, i64* %ob_refcnt, align 8, !dbg !11580, !tbaa !3977
  %dec = add i64 %17, -1, !dbg !11580
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !11580, !tbaa !3977
  %cmp11 = icmp ne i64 %dec, 0, !dbg !11581
  br i1 %cmp11, label %if.then.12, label %if.else, !dbg !11582

if.then.12:                                       ; preds = %do.body
  br label %if.end.13, !dbg !11583

if.else:                                          ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11585, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1, !dbg !11587
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !11587, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4, !dbg !11588
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !11588, !tbaa !3986
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11589, !tbaa !3867
  call void %20(%struct._object* %21), !dbg !11590
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.12
  %22 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !11591
  call void @llvm.lifetime.end(i64 8, i8* %22) #3, !dbg !11591
  br label %do.cond, !dbg !11593

do.cond:                                          ; preds = %if.end.13
  br label %do.end, !dbg !11594

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !11596
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11596

if.end.14:                                        ; preds = %if.end.7
  %23 = load %struct._object*, %struct._object** %result, align 8, !dbg !11597, !tbaa !3867
  store %struct._object* %23, %struct._object** %retval, !dbg !11598
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11598

cleanup:                                          ; preds = %if.end.14, %do.end, %if.then.6, %if.then.1, %if.then
  %24 = bitcast i32* %ret to i8*, !dbg !11599
  call void @llvm.lifetime.end(i64 4, i8* %24) #3, !dbg !11599
  %25 = bitcast %struct._object** %result to i8*, !dbg !11599
  call void @llvm.lifetime.end(i64 8, i8* %25) #3, !dbg !11599
  %26 = bitcast i64* %size to i8*, !dbg !11599
  call void @llvm.lifetime.end(i64 8, i8* %26) #3, !dbg !11599
  %27 = load %struct._object*, %struct._object** %retval, !dbg !11599
  ret %struct._object* %27, !dbg !11599
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_setresuid(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %ruid = alloca i32, align 4
  %euid = alloca i32, align 4
  %suid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2964, metadata !3844), !dbg !11600
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2965, metadata !3844), !dbg !11601
  %0 = bitcast i32* %ruid to i8*, !dbg !11602
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !11602
  call void @llvm.dbg.declare(metadata i32* %ruid, metadata !2966, metadata !3844), !dbg !11603
  %1 = bitcast i32* %euid to i8*, !dbg !11602
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !11602
  call void @llvm.dbg.declare(metadata i32* %euid, metadata !2967, metadata !3844), !dbg !11604
  %2 = bitcast i32* %suid to i8*, !dbg !11602
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !11602
  call void @llvm.dbg.declare(metadata i32* %suid, metadata !2968, metadata !3844), !dbg !11605
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11606, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.530, i32 0, i32 0), i32 (%struct._object*, i8*)* @_Py_Uid_Converter, i32* %ruid, i32 (%struct._object*, i8*)* @_Py_Uid_Converter, i32* %euid, i32 (%struct._object*, i8*)* @_Py_Uid_Converter, i32* %suid), !dbg !11608
  %tobool = icmp ne i32 %call, 0, !dbg !11608
  br i1 %tobool, label %if.end, label %if.then, !dbg !11609

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11610
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11610

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %ruid, align 4, !dbg !11611, !tbaa !3840
  %5 = load i32, i32* %euid, align 4, !dbg !11613, !tbaa !3840
  %6 = load i32, i32* %suid, align 4, !dbg !11614, !tbaa !3840
  %call1 = call i32 @setresuid(i32 %4, i32 %5, i32 %6) #3, !dbg !11615
  %cmp = icmp slt i32 %call1, 0, !dbg !11616
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !11617

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !11618
  store %struct._object* %call3, %struct._object** %retval, !dbg !11619
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11619

if.end.4:                                         ; preds = %if.end
  %7 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !11620, !tbaa !3977
  %inc = add i64 %7, 1, !dbg !11620
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !11620, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !11621
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11621

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %8 = bitcast i32* %suid to i8*, !dbg !11622
  call void @llvm.lifetime.end(i64 4, i8* %8) #3, !dbg !11622
  %9 = bitcast i32* %euid to i8*, !dbg !11622
  call void @llvm.lifetime.end(i64 4, i8* %9) #3, !dbg !11622
  %10 = bitcast i32* %ruid to i8*, !dbg !11622
  call void @llvm.lifetime.end(i64 4, i8* %10) #3, !dbg !11622
  %11 = load %struct._object*, %struct._object** %retval, !dbg !11622
  ret %struct._object* %11, !dbg !11622
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_setresgid(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %rgid = alloca i32, align 4
  %egid = alloca i32, align 4
  %sgid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2971, metadata !3844), !dbg !11623
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2972, metadata !3844), !dbg !11624
  %0 = bitcast i32* %rgid to i8*, !dbg !11625
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !11625
  call void @llvm.dbg.declare(metadata i32* %rgid, metadata !2973, metadata !3844), !dbg !11626
  %1 = bitcast i32* %egid to i8*, !dbg !11625
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !11625
  call void @llvm.dbg.declare(metadata i32* %egid, metadata !2974, metadata !3844), !dbg !11627
  %2 = bitcast i32* %sgid to i8*, !dbg !11625
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !11625
  call void @llvm.dbg.declare(metadata i32* %sgid, metadata !2975, metadata !3844), !dbg !11628
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11629, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.531, i32 0, i32 0), i32 (%struct._object*, i8*)* @_Py_Gid_Converter, i32* %rgid, i32 (%struct._object*, i8*)* @_Py_Gid_Converter, i32* %egid, i32 (%struct._object*, i8*)* @_Py_Gid_Converter, i32* %sgid), !dbg !11631
  %tobool = icmp ne i32 %call, 0, !dbg !11631
  br i1 %tobool, label %if.end, label %if.then, !dbg !11632

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11633
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11633

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %rgid, align 4, !dbg !11634, !tbaa !3840
  %5 = load i32, i32* %egid, align 4, !dbg !11636, !tbaa !3840
  %6 = load i32, i32* %sgid, align 4, !dbg !11637, !tbaa !3840
  %call1 = call i32 @setresgid(i32 %4, i32 %5, i32 %6) #3, !dbg !11638
  %cmp = icmp slt i32 %call1, 0, !dbg !11639
  br i1 %cmp, label %if.then.2, label %if.end.4, !dbg !11640

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @posix_error(), !dbg !11641
  store %struct._object* %call3, %struct._object** %retval, !dbg !11642
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11642

if.end.4:                                         ; preds = %if.end
  %7 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !11643, !tbaa !3977
  %inc = add i64 %7, 1, !dbg !11643
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !11643, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !11644
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11644

cleanup:                                          ; preds = %if.end.4, %if.then.2, %if.then
  %8 = bitcast i32* %sgid to i8*, !dbg !11645
  call void @llvm.lifetime.end(i64 4, i8* %8) #3, !dbg !11645
  %9 = bitcast i32* %egid to i8*, !dbg !11645
  call void @llvm.lifetime.end(i64 4, i8* %9) #3, !dbg !11645
  %10 = bitcast i32* %rgid to i8*, !dbg !11645
  call void @llvm.lifetime.end(i64 4, i8* %10) #3, !dbg !11645
  %11 = load %struct._object*, %struct._object** %retval, !dbg !11645
  ret %struct._object* %11, !dbg !11645
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getresuid(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  %ruid = alloca i32, align 4
  %euid = alloca i32, align 4
  %suid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2978, metadata !3844), !dbg !11646
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !2979, metadata !3844), !dbg !11647
  %0 = bitcast i32* %ruid to i8*, !dbg !11648
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !11648
  call void @llvm.dbg.declare(metadata i32* %ruid, metadata !2980, metadata !3844), !dbg !11649
  %1 = bitcast i32* %euid to i8*, !dbg !11648
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !11648
  call void @llvm.dbg.declare(metadata i32* %euid, metadata !2981, metadata !3844), !dbg !11650
  %2 = bitcast i32* %suid to i8*, !dbg !11648
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !11648
  call void @llvm.dbg.declare(metadata i32* %suid, metadata !2982, metadata !3844), !dbg !11651
  %call = call i32 @getresuid(i32* %ruid, i32* %euid, i32* %suid) #3, !dbg !11652
  %cmp = icmp slt i32 %call, 0, !dbg !11654
  br i1 %cmp, label %if.then, label %if.end, !dbg !11655

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @posix_error(), !dbg !11656
  store %struct._object* %call1, %struct._object** %retval, !dbg !11657
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11657

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %ruid, align 4, !dbg !11658, !tbaa !3840
  %call2 = call %struct._object* @_PyLong_FromUid(i32 %3), !dbg !11659
  %4 = load i32, i32* %euid, align 4, !dbg !11660, !tbaa !3840
  %call3 = call %struct._object* @_PyLong_FromUid(i32 %4), !dbg !11661
  %5 = load i32, i32* %suid, align 4, !dbg !11662, !tbaa !3840
  %call4 = call %struct._object* @_PyLong_FromUid(i32 %5), !dbg !11663
  %call5 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.532, i32 0, i32 0), %struct._object* %call2, %struct._object* %call3, %struct._object* %call4), !dbg !11664
  store %struct._object* %call5, %struct._object** %retval, !dbg !11665
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11665

cleanup:                                          ; preds = %if.end, %if.then
  %6 = bitcast i32* %suid to i8*, !dbg !11666
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !11666
  %7 = bitcast i32* %euid to i8*, !dbg !11666
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !11666
  %8 = bitcast i32* %ruid to i8*, !dbg !11666
  call void @llvm.lifetime.end(i64 4, i8* %8) #3, !dbg !11666
  %9 = load %struct._object*, %struct._object** %retval, !dbg !11666
  ret %struct._object* %9, !dbg !11666
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getresgid(%struct._object* %self, %struct._object* %noargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %noargs.addr = alloca %struct._object*, align 8
  %rgid = alloca i32, align 4
  %egid = alloca i32, align 4
  %sgid = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2985, metadata !3844), !dbg !11667
  store %struct._object* %noargs, %struct._object** %noargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %noargs.addr, metadata !2986, metadata !3844), !dbg !11668
  %0 = bitcast i32* %rgid to i8*, !dbg !11669
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !11669
  call void @llvm.dbg.declare(metadata i32* %rgid, metadata !2987, metadata !3844), !dbg !11670
  %1 = bitcast i32* %egid to i8*, !dbg !11669
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !11669
  call void @llvm.dbg.declare(metadata i32* %egid, metadata !2988, metadata !3844), !dbg !11671
  %2 = bitcast i32* %sgid to i8*, !dbg !11669
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !11669
  call void @llvm.dbg.declare(metadata i32* %sgid, metadata !2989, metadata !3844), !dbg !11672
  %call = call i32 @getresgid(i32* %rgid, i32* %egid, i32* %sgid) #3, !dbg !11673
  %cmp = icmp slt i32 %call, 0, !dbg !11675
  br i1 %cmp, label %if.then, label %if.end, !dbg !11676

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @posix_error(), !dbg !11677
  store %struct._object* %call1, %struct._object** %retval, !dbg !11678
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11678

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %rgid, align 4, !dbg !11679, !tbaa !3840
  %call2 = call %struct._object* @_PyLong_FromGid(i32 %3), !dbg !11680
  %4 = load i32, i32* %egid, align 4, !dbg !11681, !tbaa !3840
  %call3 = call %struct._object* @_PyLong_FromGid(i32 %4), !dbg !11682
  %5 = load i32, i32* %sgid, align 4, !dbg !11683, !tbaa !3840
  %call4 = call %struct._object* @_PyLong_FromGid(i32 %5), !dbg !11684
  %call5 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.532, i32 0, i32 0), %struct._object* %call2, %struct._object* %call3, %struct._object* %call4), !dbg !11685
  store %struct._object* %call5, %struct._object** %retval, !dbg !11686
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11686

cleanup:                                          ; preds = %if.end, %if.then
  %6 = bitcast i32* %sgid to i8*, !dbg !11687
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !11687
  %7 = bitcast i32* %egid to i8*, !dbg !11687
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !11687
  %8 = bitcast i32* %rgid to i8*, !dbg !11687
  call void @llvm.lifetime.end(i64 4, i8* %8) #3, !dbg !11687
  %9 = load %struct._object*, %struct._object** %retval, !dbg !11687
  ret %struct._object* %9, !dbg !11687
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_setxattr(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %attribute = alloca %struct.path_t, align 8
  %value = alloca %struct.bufferinfo, align 8
  %flags = alloca i32, align 4
  %follow_symlinks = alloca i32, align 4
  %result = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2992, metadata !3844), !dbg !11688
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2993, metadata !3844), !dbg !11689
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !2994, metadata !3844), !dbg !11690
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !11691
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !11691
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !2995, metadata !3844), !dbg !11692
  %1 = bitcast %struct.path_t* %attribute to i8*, !dbg !11693
  call void @llvm.lifetime.start(i64 72, i8* %1) #3, !dbg !11693
  call void @llvm.dbg.declare(metadata %struct.path_t* %attribute, metadata !2996, metadata !3844), !dbg !11694
  %2 = bitcast %struct.bufferinfo* %value to i8*, !dbg !11695
  call void @llvm.lifetime.start(i64 80, i8* %2) #3, !dbg !11695
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %value, metadata !2997, metadata !3844), !dbg !11696
  %3 = bitcast i32* %flags to i8*, !dbg !11697
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !11697
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !2998, metadata !3844), !dbg !11698
  store i32 0, i32* %flags, align 4, !dbg !11698, !tbaa !3840
  %4 = bitcast i32* %follow_symlinks to i8*, !dbg !11699
  call void @llvm.lifetime.start(i64 4, i8* %4) #3, !dbg !11699
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks, metadata !2999, metadata !3844), !dbg !11700
  store i32 1, i32* %follow_symlinks, align 4, !dbg !11700, !tbaa !3840
  %5 = bitcast i32* %result to i8*, !dbg !11701
  call void @llvm.lifetime.start(i64 4, i8* %5) #3, !dbg !11701
  call void @llvm.dbg.declare(metadata i32* %result, metadata !3000, metadata !3844), !dbg !11702
  %6 = bitcast %struct._object** %return_value to i8*, !dbg !11703
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !11703
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !3001, metadata !3844), !dbg !11704
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !11704, !tbaa !3867
  %7 = bitcast %struct.path_t* %path to i8*, !dbg !11705
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 72, i32 8, i1 false), !dbg !11705
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !11706
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.161, i32 0, i32 0), i8** %function_name, align 8, !dbg !11707, !tbaa !5512
  %allow_fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 3, !dbg !11708
  store i32 1, i32* %allow_fd, align 4, !dbg !11709, !tbaa !5516
  %8 = bitcast %struct.path_t* %attribute to i8*, !dbg !11710
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 72, i32 8, i1 false), !dbg !11710
  %9 = bitcast %struct.bufferinfo* %value to i8*, !dbg !11711
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 80, i32 8, i1 false), !dbg !11711
  %10 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11712, !tbaa !3867
  %11 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !11714, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %10, %struct._object* %11, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.535, i32 0, i32 0), i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @posix_setxattr.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %attribute, %struct.bufferinfo* %value, i32* %flags, i32* %follow_symlinks), !dbg !11715
  %tobool = icmp ne i32 %call, 0, !dbg !11715
  br i1 %tobool, label %if.end, label %if.then, !dbg !11716

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11717
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11717

if.end:                                           ; preds = %entry
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !11718
  %12 = load i32, i32* %fd, align 4, !dbg !11718, !tbaa !5529
  %13 = load i32, i32* %follow_symlinks, align 4, !dbg !11720, !tbaa !3840
  %call1 = call i32 @fd_and_follow_symlinks_invalid(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.161, i32 0, i32 0), i32 %12, i32 %13), !dbg !11721
  %tobool2 = icmp ne i32 %call1, 0, !dbg !11721
  br i1 %tobool2, label %if.then.3, label %if.end.4, !dbg !11722

if.then.3:                                        ; preds = %if.end
  br label %exit, !dbg !11723

if.end.4:                                         ; preds = %if.end
  %14 = bitcast %struct._ts** %_save to i8*, !dbg !11724
  call void @llvm.lifetime.start(i64 8, i8* %14) #3, !dbg !11724
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !3002, metadata !3844), !dbg !11725
  %call5 = call %struct._ts* @PyEval_SaveThread(), !dbg !11726
  store %struct._ts* %call5, %struct._ts** %_save, align 8, !dbg !11727, !tbaa !3867
  %fd6 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !11728
  %15 = load i32, i32* %fd6, align 4, !dbg !11728, !tbaa !5529
  %cmp = icmp sgt i32 %15, -1, !dbg !11730
  br i1 %cmp, label %if.then.7, label %if.else, !dbg !11731

if.then.7:                                        ; preds = %if.end.4
  %fd8 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !11732
  %16 = load i32, i32* %fd8, align 4, !dbg !11732, !tbaa !5529
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %attribute, i32 0, i32 5, !dbg !11733
  %17 = load i8*, i8** %narrow, align 8, !dbg !11733, !tbaa !5537
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %value, i32 0, i32 0, !dbg !11734
  %18 = load i8*, i8** %buf, align 8, !dbg !11734, !tbaa !10039
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %value, i32 0, i32 2, !dbg !11735
  %19 = load i64, i64* %len, align 8, !dbg !11735, !tbaa !10030
  %20 = load i32, i32* %flags, align 4, !dbg !11736, !tbaa !3840
  %call9 = call i32 @fsetxattr(i32 %16, i8* %17, i8* %18, i64 %19, i32 %20) #3, !dbg !11737
  store i32 %call9, i32* %result, align 4, !dbg !11738, !tbaa !3840
  br label %if.end.24, !dbg !11739

if.else:                                          ; preds = %if.end.4
  %21 = load i32, i32* %follow_symlinks, align 4, !dbg !11740, !tbaa !3840
  %tobool10 = icmp ne i32 %21, 0, !dbg !11740
  br i1 %tobool10, label %if.then.11, label %if.else.17, !dbg !11742

if.then.11:                                       ; preds = %if.else
  %narrow12 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !11743
  %22 = load i8*, i8** %narrow12, align 8, !dbg !11743, !tbaa !5537
  %narrow13 = getelementptr inbounds %struct.path_t, %struct.path_t* %attribute, i32 0, i32 5, !dbg !11744
  %23 = load i8*, i8** %narrow13, align 8, !dbg !11744, !tbaa !5537
  %buf14 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %value, i32 0, i32 0, !dbg !11745
  %24 = load i8*, i8** %buf14, align 8, !dbg !11745, !tbaa !10039
  %len15 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %value, i32 0, i32 2, !dbg !11746
  %25 = load i64, i64* %len15, align 8, !dbg !11746, !tbaa !10030
  %26 = load i32, i32* %flags, align 4, !dbg !11747, !tbaa !3840
  %call16 = call i32 @setxattr(i8* %22, i8* %23, i8* %24, i64 %25, i32 %26) #3, !dbg !11748
  store i32 %call16, i32* %result, align 4, !dbg !11749, !tbaa !3840
  br label %if.end.23, !dbg !11750

if.else.17:                                       ; preds = %if.else
  %narrow18 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !11751
  %27 = load i8*, i8** %narrow18, align 8, !dbg !11751, !tbaa !5537
  %narrow19 = getelementptr inbounds %struct.path_t, %struct.path_t* %attribute, i32 0, i32 5, !dbg !11752
  %28 = load i8*, i8** %narrow19, align 8, !dbg !11752, !tbaa !5537
  %buf20 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %value, i32 0, i32 0, !dbg !11753
  %29 = load i8*, i8** %buf20, align 8, !dbg !11753, !tbaa !10039
  %len21 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %value, i32 0, i32 2, !dbg !11754
  %30 = load i64, i64* %len21, align 8, !dbg !11754, !tbaa !10030
  %31 = load i32, i32* %flags, align 4, !dbg !11755, !tbaa !3840
  %call22 = call i32 @lsetxattr(i8* %27, i8* %28, i8* %29, i64 %30, i32 %31) #3, !dbg !11756
  store i32 %call22, i32* %result, align 4, !dbg !11757, !tbaa !3840
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.17, %if.then.11
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.then.7
  %32 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !11758, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %32), !dbg !11759
  %33 = bitcast %struct._ts** %_save to i8*, !dbg !11760
  call void @llvm.lifetime.end(i64 8, i8* %33) #3, !dbg !11760
  %34 = load i32, i32* %result, align 4, !dbg !11761, !tbaa !3840
  %tobool25 = icmp ne i32 %34, 0, !dbg !11761
  br i1 %tobool25, label %if.then.26, label %if.end.28, !dbg !11763

if.then.26:                                       ; preds = %if.end.24
  %call27 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !11764
  store %struct._object* %call27, %struct._object** %return_value, align 8, !dbg !11766, !tbaa !3867
  br label %exit, !dbg !11767

if.end.28:                                        ; preds = %if.end.24
  store %struct._object* @_Py_NoneStruct, %struct._object** %return_value, align 8, !dbg !11768, !tbaa !3867
  %35 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !11769, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0, !dbg !11770
  %36 = load i64, i64* %ob_refcnt, align 8, !dbg !11771, !tbaa !3977
  %inc = add i64 %36, 1, !dbg !11771
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !11771, !tbaa !3977
  br label %exit, !dbg !11772

exit:                                             ; preds = %if.end.28, %if.then.26, %if.then.3
  call void @path_cleanup(%struct.path_t* %path), !dbg !11773
  call void @path_cleanup(%struct.path_t* %attribute), !dbg !11774
  call void @PyBuffer_Release(%struct.bufferinfo* %value), !dbg !11775
  %37 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !11776, !tbaa !3867
  store %struct._object* %37, %struct._object** %retval, !dbg !11777
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11777

cleanup:                                          ; preds = %exit, %if.then
  %38 = bitcast %struct._object** %return_value to i8*, !dbg !11778
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !11778
  %39 = bitcast i32* %result to i8*, !dbg !11778
  call void @llvm.lifetime.end(i64 4, i8* %39) #3, !dbg !11778
  %40 = bitcast i32* %follow_symlinks to i8*, !dbg !11778
  call void @llvm.lifetime.end(i64 4, i8* %40) #3, !dbg !11778
  %41 = bitcast i32* %flags to i8*, !dbg !11778
  call void @llvm.lifetime.end(i64 4, i8* %41) #3, !dbg !11778
  %42 = bitcast %struct.bufferinfo* %value to i8*, !dbg !11778
  call void @llvm.lifetime.end(i64 80, i8* %42) #3, !dbg !11778
  %43 = bitcast %struct.path_t* %attribute to i8*, !dbg !11778
  call void @llvm.lifetime.end(i64 72, i8* %43) #3, !dbg !11778
  %44 = bitcast %struct.path_t* %path to i8*, !dbg !11778
  call void @llvm.lifetime.end(i64 72, i8* %44) #3, !dbg !11778
  %45 = load %struct._object*, %struct._object** %retval, !dbg !11778
  ret %struct._object* %45, !dbg !11778
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getxattr(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %attribute = alloca %struct.path_t, align 8
  %follow_symlinks = alloca i32, align 4
  %buffer = alloca %struct._object*, align 8
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %ptr = alloca i8*, align 8
  %result = alloca i64, align 8
  %buffer_size = alloca i64, align 8
  %_save = alloca %struct._ts*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !3006, metadata !3844), !dbg !11779
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !3007, metadata !3844), !dbg !11780
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !3008, metadata !3844), !dbg !11781
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !11782
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !11782
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !3009, metadata !3844), !dbg !11783
  %1 = bitcast %struct.path_t* %attribute to i8*, !dbg !11784
  call void @llvm.lifetime.start(i64 72, i8* %1) #3, !dbg !11784
  call void @llvm.dbg.declare(metadata %struct.path_t* %attribute, metadata !3010, metadata !3844), !dbg !11785
  %2 = bitcast i32* %follow_symlinks to i8*, !dbg !11786
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !11786
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks, metadata !3011, metadata !3844), !dbg !11787
  store i32 1, i32* %follow_symlinks, align 4, !dbg !11787, !tbaa !3840
  %3 = bitcast %struct._object** %buffer to i8*, !dbg !11788
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !11788
  call void @llvm.dbg.declare(metadata %struct._object** %buffer, metadata !3012, metadata !3844), !dbg !11789
  store %struct._object* null, %struct._object** %buffer, align 8, !dbg !11789, !tbaa !3867
  %4 = bitcast i32* %i to i8*, !dbg !11790
  call void @llvm.lifetime.start(i64 4, i8* %4) #3, !dbg !11790
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3013, metadata !3844), !dbg !11791
  %5 = bitcast %struct.path_t* %path to i8*, !dbg !11792
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 72, i32 8, i1 false), !dbg !11792
  %6 = bitcast %struct.path_t* %attribute to i8*, !dbg !11793
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 72, i32 8, i1 false), !dbg !11793
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !11794
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.162, i32 0, i32 0), i8** %function_name, align 8, !dbg !11795, !tbaa !5512
  %function_name1 = getelementptr inbounds %struct.path_t, %struct.path_t* %attribute, i32 0, i32 0, !dbg !11796
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.162, i32 0, i32 0), i8** %function_name1, align 8, !dbg !11797, !tbaa !5512
  %allow_fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 3, !dbg !11798
  store i32 1, i32* %allow_fd, align 4, !dbg !11799, !tbaa !5516
  %7 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11800, !tbaa !3867
  %8 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !11802, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %7, %struct._object* %8, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.536, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @posix_getxattr.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %attribute, i32* %follow_symlinks), !dbg !11803
  %tobool = icmp ne i32 %call, 0, !dbg !11803
  br i1 %tobool, label %if.end, label %if.then, !dbg !11804

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11805
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.48, !dbg !11805

if.end:                                           ; preds = %entry
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !11806
  %9 = load i32, i32* %fd, align 4, !dbg !11806, !tbaa !5529
  %10 = load i32, i32* %follow_symlinks, align 4, !dbg !11808, !tbaa !3840
  %call2 = call i32 @fd_and_follow_symlinks_invalid(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.162, i32 0, i32 0), i32 %9, i32 %10), !dbg !11809
  %tobool3 = icmp ne i32 %call2, 0, !dbg !11809
  br i1 %tobool3, label %if.then.4, label %if.end.5, !dbg !11810

if.then.4:                                        ; preds = %if.end
  br label %exit, !dbg !11811

if.end.5:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !11812, !tbaa !3840
  br label %for.cond, !dbg !11813

for.cond:                                         ; preds = %for.inc, %if.end.5
  %11 = bitcast i8** %ptr to i8*, !dbg !11814
  call void @llvm.lifetime.start(i64 8, i8* %11) #3, !dbg !11814
  call void @llvm.dbg.declare(metadata i8** %ptr, metadata !3014, metadata !3844), !dbg !11815
  %12 = bitcast i64* %result to i8*, !dbg !11816
  call void @llvm.lifetime.start(i64 8, i8* %12) #3, !dbg !11816
  call void @llvm.dbg.declare(metadata i64* %result, metadata !3018, metadata !3844), !dbg !11817
  %13 = bitcast i64* %buffer_size to i8*, !dbg !11818
  call void @llvm.lifetime.start(i64 8, i8* %13) #3, !dbg !11818
  call void @llvm.dbg.declare(metadata i64* %buffer_size, metadata !3019, metadata !3844), !dbg !11819
  %14 = load i32, i32* %i, align 4, !dbg !11820, !tbaa !3840
  %idxprom = sext i32 %14 to i64, !dbg !11821
  %arrayidx = getelementptr [3 x i64], [3 x i64]* @posix_getxattr.buffer_sizes, i32 0, i64 %idxprom, !dbg !11821
  %15 = load i64, i64* %arrayidx, align 8, !dbg !11821, !tbaa !3904
  store i64 %15, i64* %buffer_size, align 8, !dbg !11819, !tbaa !3904
  %16 = load i64, i64* %buffer_size, align 8, !dbg !11822, !tbaa !3904
  %tobool6 = icmp ne i64 %16, 0, !dbg !11822
  br i1 %tobool6, label %if.end.9, label %if.then.7, !dbg !11824

if.then.7:                                        ; preds = %for.cond
  %call8 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !11825
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11827

if.end.9:                                         ; preds = %for.cond
  %17 = load i64, i64* %buffer_size, align 8, !dbg !11828, !tbaa !3904
  %call10 = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 %17), !dbg !11829
  store %struct._object* %call10, %struct._object** %buffer, align 8, !dbg !11830, !tbaa !3867
  %18 = load %struct._object*, %struct._object** %buffer, align 8, !dbg !11831, !tbaa !3867
  %tobool11 = icmp ne %struct._object* %18, null, !dbg !11831
  br i1 %tobool11, label %if.end.13, label %if.then.12, !dbg !11833

if.then.12:                                       ; preds = %if.end.9
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11834

if.end.13:                                        ; preds = %if.end.9
  %19 = load %struct._object*, %struct._object** %buffer, align 8, !dbg !11835, !tbaa !3867
  %20 = bitcast %struct._object* %19 to %struct.PyBytesObject*, !dbg !11836
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %20, i32 0, i32 2, !dbg !11837
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !11838
  store i8* %arraydecay, i8** %ptr, align 8, !dbg !11839, !tbaa !3867
  %21 = bitcast %struct._ts** %_save to i8*, !dbg !11840
  call void @llvm.lifetime.start(i64 8, i8* %21) #3, !dbg !11840
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !3020, metadata !3844), !dbg !11841
  %call14 = call %struct._ts* @PyEval_SaveThread(), !dbg !11842
  store %struct._ts* %call14, %struct._ts** %_save, align 8, !dbg !11843, !tbaa !3867
  %fd15 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !11844
  %22 = load i32, i32* %fd15, align 4, !dbg !11844, !tbaa !5529
  %cmp = icmp sge i32 %22, 0, !dbg !11846
  br i1 %cmp, label %if.then.16, label %if.else, !dbg !11847

if.then.16:                                       ; preds = %if.end.13
  %fd17 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !11848
  %23 = load i32, i32* %fd17, align 4, !dbg !11848, !tbaa !5529
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %attribute, i32 0, i32 5, !dbg !11849
  %24 = load i8*, i8** %narrow, align 8, !dbg !11849, !tbaa !5537
  %25 = load i8*, i8** %ptr, align 8, !dbg !11850, !tbaa !3867
  %26 = load i64, i64* %buffer_size, align 8, !dbg !11851, !tbaa !3904
  %call18 = call i64 @fgetxattr(i32 %23, i8* %24, i8* %25, i64 %26) #3, !dbg !11852
  store i64 %call18, i64* %result, align 8, !dbg !11853, !tbaa !3904
  br label %if.end.29, !dbg !11854

if.else:                                          ; preds = %if.end.13
  %27 = load i32, i32* %follow_symlinks, align 4, !dbg !11855, !tbaa !3840
  %tobool19 = icmp ne i32 %27, 0, !dbg !11855
  br i1 %tobool19, label %if.then.20, label %if.else.24, !dbg !11857

if.then.20:                                       ; preds = %if.else
  %narrow21 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !11858
  %28 = load i8*, i8** %narrow21, align 8, !dbg !11858, !tbaa !5537
  %narrow22 = getelementptr inbounds %struct.path_t, %struct.path_t* %attribute, i32 0, i32 5, !dbg !11859
  %29 = load i8*, i8** %narrow22, align 8, !dbg !11859, !tbaa !5537
  %30 = load i8*, i8** %ptr, align 8, !dbg !11860, !tbaa !3867
  %31 = load i64, i64* %buffer_size, align 8, !dbg !11861, !tbaa !3904
  %call23 = call i64 @getxattr(i8* %28, i8* %29, i8* %30, i64 %31) #3, !dbg !11862
  store i64 %call23, i64* %result, align 8, !dbg !11863, !tbaa !3904
  br label %if.end.28, !dbg !11864

if.else.24:                                       ; preds = %if.else
  %narrow25 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !11865
  %32 = load i8*, i8** %narrow25, align 8, !dbg !11865, !tbaa !5537
  %narrow26 = getelementptr inbounds %struct.path_t, %struct.path_t* %attribute, i32 0, i32 5, !dbg !11866
  %33 = load i8*, i8** %narrow26, align 8, !dbg !11866, !tbaa !5537
  %34 = load i8*, i8** %ptr, align 8, !dbg !11867, !tbaa !3867
  %35 = load i64, i64* %buffer_size, align 8, !dbg !11868, !tbaa !3904
  %call27 = call i64 @lgetxattr(i8* %32, i8* %33, i8* %34, i64 %35) #3, !dbg !11869
  store i64 %call27, i64* %result, align 8, !dbg !11870, !tbaa !3904
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.24, %if.then.20
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.then.16
  %36 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !11871, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %36), !dbg !11872
  %37 = bitcast %struct._ts** %_save to i8*, !dbg !11873
  call void @llvm.lifetime.end(i64 8, i8* %37) #3, !dbg !11873
  %38 = load i64, i64* %result, align 8, !dbg !11874, !tbaa !3904
  %cmp30 = icmp slt i64 %38, 0, !dbg !11875
  br i1 %cmp30, label %if.then.31, label %if.end.41, !dbg !11876

if.then.31:                                       ; preds = %if.end.29
  br label %do.body, !dbg !11877

do.body:                                          ; preds = %if.then.31
  %39 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !11878
  call void @llvm.lifetime.start(i64 8, i8* %39) #3, !dbg !11878
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !3022, metadata !3844), !dbg !11880
  %40 = load %struct._object*, %struct._object** %buffer, align 8, !dbg !11881, !tbaa !3867
  store %struct._object* %40, %struct._object** %_py_decref_tmp, align 8, !dbg !11880, !tbaa !3867
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11882, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0, !dbg !11884
  %42 = load i64, i64* %ob_refcnt, align 8, !dbg !11885, !tbaa !3977
  %dec = add i64 %42, -1, !dbg !11885
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !11885, !tbaa !3977
  %cmp32 = icmp ne i64 %dec, 0, !dbg !11886
  br i1 %cmp32, label %if.then.33, label %if.else.34, !dbg !11887

if.then.33:                                       ; preds = %do.body
  br label %if.end.35, !dbg !11888

if.else.34:                                       ; preds = %do.body
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11890, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1, !dbg !11892
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !11892, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4, !dbg !11893
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !11893, !tbaa !3986
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11894, !tbaa !3867
  call void %45(%struct._object* %46), !dbg !11895
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.34, %if.then.33
  %47 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !11896
  call void @llvm.lifetime.end(i64 8, i8* %47) #3, !dbg !11896
  br label %do.cond, !dbg !11898

do.cond:                                          ; preds = %if.end.35
  br label %do.end, !dbg !11899

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %buffer, align 8, !dbg !11901, !tbaa !3867
  %call36 = call i32* @__errno_location() #1, !dbg !11902
  %48 = load i32, i32* %call36, align 4, !dbg !11904, !tbaa !3840
  %cmp37 = icmp eq i32 %48, 34, !dbg !11905
  br i1 %cmp37, label %if.then.38, label %if.end.39, !dbg !11906

if.then.38:                                       ; preds = %do.end
  store i32 5, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11907

if.end.39:                                        ; preds = %do.end
  %call40 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !11908
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11909

if.end.41:                                        ; preds = %if.end.29
  %49 = load i64, i64* %result, align 8, !dbg !11910, !tbaa !3904
  %50 = load i64, i64* %buffer_size, align 8, !dbg !11912, !tbaa !3904
  %cmp42 = icmp ne i64 %49, %50, !dbg !11913
  br i1 %cmp42, label %if.then.43, label %if.end.45, !dbg !11914

if.then.43:                                       ; preds = %if.end.41
  %51 = load i64, i64* %result, align 8, !dbg !11915, !tbaa !3904
  %call44 = call i32 @_PyBytes_Resize(%struct._object** %buffer, i64 %51), !dbg !11917
  br label %if.end.45, !dbg !11918

if.end.45:                                        ; preds = %if.then.43, %if.end.41
  store i32 3, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11919

cleanup:                                          ; preds = %if.end.45, %if.end.39, %if.then.38, %if.then.12, %if.then.7
  %52 = bitcast i64* %buffer_size to i8*, !dbg !11920
  call void @llvm.lifetime.end(i64 8, i8* %52) #3, !dbg !11920
  %53 = bitcast i64* %result to i8*, !dbg !11920
  call void @llvm.lifetime.end(i64 8, i8* %53) #3, !dbg !11920
  %54 = bitcast i8** %ptr to i8*, !dbg !11920
  call void @llvm.lifetime.end(i64 8, i8* %54) #3, !dbg !11920
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock.5

NodeBlock.5:                                      ; preds = %cleanup
  %Pivot.6 = icmp slt i32 %cleanup.dest, 3
  br i1 %Pivot.6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock.5
  %Pivot = icmp slt i32 %cleanup.dest, 5
  br i1 %Pivot, label %LeafBlock.1, label %LeafBlock.3

LeafBlock.3:                                      ; preds = %NodeBlock
  %SwitchLeaf4 = icmp eq i32 %cleanup.dest, 5
  br i1 %SwitchLeaf4, label %for.inc, label %NewDefault

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %cleanup.dest, 3
  br i1 %SwitchLeaf2, label %for.end, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock.5
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 2
  br i1 %SwitchLeaf, label %exit, label %NewDefault

for.inc:                                          ; preds = %LeafBlock.3
  %55 = load i32, i32* %i, align 4, !dbg !11921, !tbaa !3840
  %inc = add i32 %55, 1, !dbg !11921
  store i32 %inc, i32* %i, align 4, !dbg !11921, !tbaa !3840
  br label %for.cond, !dbg !11922

for.end:                                          ; preds = %LeafBlock.1
  br label %exit, !dbg !11923

exit:                                             ; preds = %LeafBlock, %for.end, %if.then.4
  call void @path_cleanup(%struct.path_t* %path), !dbg !11924
  call void @path_cleanup(%struct.path_t* %attribute), !dbg !11925
  %56 = load %struct._object*, %struct._object** %buffer, align 8, !dbg !11926, !tbaa !3867
  store %struct._object* %56, %struct._object** %retval, !dbg !11927
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.48, !dbg !11927

NewDefault:                                       ; preds = %LeafBlock.3, %LeafBlock.1, %LeafBlock
  br label %cleanup.48

cleanup.48:                                       ; preds = %NewDefault, %exit, %if.then
  %57 = bitcast i32* %i to i8*, !dbg !11928
  call void @llvm.lifetime.end(i64 4, i8* %57) #3, !dbg !11928
  %58 = bitcast %struct._object** %buffer to i8*, !dbg !11928
  call void @llvm.lifetime.end(i64 8, i8* %58) #3, !dbg !11928
  %59 = bitcast i32* %follow_symlinks to i8*, !dbg !11928
  call void @llvm.lifetime.end(i64 4, i8* %59) #3, !dbg !11928
  %60 = bitcast %struct.path_t* %attribute to i8*, !dbg !11928
  call void @llvm.lifetime.end(i64 72, i8* %60) #3, !dbg !11928
  %61 = bitcast %struct.path_t* %path to i8*, !dbg !11928
  call void @llvm.lifetime.end(i64 72, i8* %61) #3, !dbg !11928
  %62 = load %struct._object*, %struct._object** %retval, !dbg !11928
  ret %struct._object* %62, !dbg !11928
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_removexattr(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %attribute = alloca %struct.path_t, align 8
  %follow_symlinks = alloca i32, align 4
  %result = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !3028, metadata !3844), !dbg !11929
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !3029, metadata !3844), !dbg !11930
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !3030, metadata !3844), !dbg !11931
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !11932
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !11932
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !3031, metadata !3844), !dbg !11933
  %1 = bitcast %struct.path_t* %attribute to i8*, !dbg !11934
  call void @llvm.lifetime.start(i64 72, i8* %1) #3, !dbg !11934
  call void @llvm.dbg.declare(metadata %struct.path_t* %attribute, metadata !3032, metadata !3844), !dbg !11935
  %2 = bitcast i32* %follow_symlinks to i8*, !dbg !11936
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !11936
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks, metadata !3033, metadata !3844), !dbg !11937
  store i32 1, i32* %follow_symlinks, align 4, !dbg !11937, !tbaa !3840
  %3 = bitcast i32* %result to i8*, !dbg !11938
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !11938
  call void @llvm.dbg.declare(metadata i32* %result, metadata !3034, metadata !3844), !dbg !11939
  %4 = bitcast %struct._object** %return_value to i8*, !dbg !11940
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !11940
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !3035, metadata !3844), !dbg !11941
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !11941, !tbaa !3867
  %5 = bitcast %struct.path_t* %path to i8*, !dbg !11942
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 72, i32 8, i1 false), !dbg !11942
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !11943
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.163, i32 0, i32 0), i8** %function_name, align 8, !dbg !11944, !tbaa !5512
  %6 = bitcast %struct.path_t* %attribute to i8*, !dbg !11945
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 72, i32 8, i1 false), !dbg !11945
  %function_name1 = getelementptr inbounds %struct.path_t, %struct.path_t* %attribute, i32 0, i32 0, !dbg !11946
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.163, i32 0, i32 0), i8** %function_name1, align 8, !dbg !11947, !tbaa !5512
  %allow_fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 3, !dbg !11948
  store i32 1, i32* %allow_fd, align 4, !dbg !11949, !tbaa !5516
  %7 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !11950, !tbaa !3867
  %8 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !11952, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %7, %struct._object* %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.537, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @posix_removexattr.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %attribute, i32* %follow_symlinks), !dbg !11953
  %tobool = icmp ne i32 %call, 0, !dbg !11953
  br i1 %tobool, label %if.end, label %if.then, !dbg !11954

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !11955
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11955

if.end:                                           ; preds = %entry
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !11956
  %9 = load i32, i32* %fd, align 4, !dbg !11956, !tbaa !5529
  %10 = load i32, i32* %follow_symlinks, align 4, !dbg !11958, !tbaa !3840
  %call2 = call i32 @fd_and_follow_symlinks_invalid(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.163, i32 0, i32 0), i32 %9, i32 %10), !dbg !11959
  %tobool3 = icmp ne i32 %call2, 0, !dbg !11959
  br i1 %tobool3, label %if.then.4, label %if.end.5, !dbg !11960

if.then.4:                                        ; preds = %if.end
  br label %exit, !dbg !11961

if.end.5:                                         ; preds = %if.end
  %11 = bitcast %struct._ts** %_save to i8*, !dbg !11962
  call void @llvm.lifetime.start(i64 8, i8* %11) #3, !dbg !11962
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !3036, metadata !3844), !dbg !11963
  %call6 = call %struct._ts* @PyEval_SaveThread(), !dbg !11964
  store %struct._ts* %call6, %struct._ts** %_save, align 8, !dbg !11965, !tbaa !3867
  %fd7 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !11966
  %12 = load i32, i32* %fd7, align 4, !dbg !11966, !tbaa !5529
  %cmp = icmp sgt i32 %12, -1, !dbg !11968
  br i1 %cmp, label %if.then.8, label %if.else, !dbg !11969

if.then.8:                                        ; preds = %if.end.5
  %fd9 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !11970
  %13 = load i32, i32* %fd9, align 4, !dbg !11970, !tbaa !5529
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %attribute, i32 0, i32 5, !dbg !11971
  %14 = load i8*, i8** %narrow, align 8, !dbg !11971, !tbaa !5537
  %call10 = call i32 @fremovexattr(i32 %13, i8* %14) #3, !dbg !11972
  store i32 %call10, i32* %result, align 4, !dbg !11973, !tbaa !3840
  br label %if.end.21, !dbg !11974

if.else:                                          ; preds = %if.end.5
  %15 = load i32, i32* %follow_symlinks, align 4, !dbg !11975, !tbaa !3840
  %tobool11 = icmp ne i32 %15, 0, !dbg !11975
  br i1 %tobool11, label %if.then.12, label %if.else.16, !dbg !11977

if.then.12:                                       ; preds = %if.else
  %narrow13 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !11978
  %16 = load i8*, i8** %narrow13, align 8, !dbg !11978, !tbaa !5537
  %narrow14 = getelementptr inbounds %struct.path_t, %struct.path_t* %attribute, i32 0, i32 5, !dbg !11979
  %17 = load i8*, i8** %narrow14, align 8, !dbg !11979, !tbaa !5537
  %call15 = call i32 @removexattr(i8* %16, i8* %17) #3, !dbg !11980
  store i32 %call15, i32* %result, align 4, !dbg !11981, !tbaa !3840
  br label %if.end.20, !dbg !11982

if.else.16:                                       ; preds = %if.else
  %narrow17 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !11983
  %18 = load i8*, i8** %narrow17, align 8, !dbg !11983, !tbaa !5537
  %narrow18 = getelementptr inbounds %struct.path_t, %struct.path_t* %attribute, i32 0, i32 5, !dbg !11984
  %19 = load i8*, i8** %narrow18, align 8, !dbg !11984, !tbaa !5537
  %call19 = call i32 @lremovexattr(i8* %18, i8* %19) #3, !dbg !11985
  store i32 %call19, i32* %result, align 4, !dbg !11986, !tbaa !3840
  br label %if.end.20

if.end.20:                                        ; preds = %if.else.16, %if.then.12
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %if.then.8
  %20 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !11987, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %20), !dbg !11988
  %21 = bitcast %struct._ts** %_save to i8*, !dbg !11989
  call void @llvm.lifetime.end(i64 8, i8* %21) #3, !dbg !11989
  %22 = load i32, i32* %result, align 4, !dbg !11990, !tbaa !3840
  %tobool22 = icmp ne i32 %22, 0, !dbg !11990
  br i1 %tobool22, label %if.then.23, label %if.end.25, !dbg !11992

if.then.23:                                       ; preds = %if.end.21
  %call24 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !11993
  store %struct._object* %call24, %struct._object** %return_value, align 8, !dbg !11995, !tbaa !3867
  br label %exit, !dbg !11996

if.end.25:                                        ; preds = %if.end.21
  store %struct._object* @_Py_NoneStruct, %struct._object** %return_value, align 8, !dbg !11997, !tbaa !3867
  %23 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !11998, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0, !dbg !11999
  %24 = load i64, i64* %ob_refcnt, align 8, !dbg !12000, !tbaa !3977
  %inc = add i64 %24, 1, !dbg !12000
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !12000, !tbaa !3977
  br label %exit, !dbg !12001

exit:                                             ; preds = %if.end.25, %if.then.23, %if.then.4
  call void @path_cleanup(%struct.path_t* %path), !dbg !12002
  call void @path_cleanup(%struct.path_t* %attribute), !dbg !12003
  %25 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !12004, !tbaa !3867
  store %struct._object* %25, %struct._object** %retval, !dbg !12005
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12005

cleanup:                                          ; preds = %exit, %if.then
  %26 = bitcast %struct._object** %return_value to i8*, !dbg !12006
  call void @llvm.lifetime.end(i64 8, i8* %26) #3, !dbg !12006
  %27 = bitcast i32* %result to i8*, !dbg !12006
  call void @llvm.lifetime.end(i64 4, i8* %27) #3, !dbg !12006
  %28 = bitcast i32* %follow_symlinks to i8*, !dbg !12006
  call void @llvm.lifetime.end(i64 4, i8* %28) #3, !dbg !12006
  %29 = bitcast %struct.path_t* %attribute to i8*, !dbg !12006
  call void @llvm.lifetime.end(i64 72, i8* %29) #3, !dbg !12006
  %30 = bitcast %struct.path_t* %path to i8*, !dbg !12006
  call void @llvm.lifetime.end(i64 72, i8* %30) #3, !dbg !12006
  %31 = load %struct._object*, %struct._object** %retval, !dbg !12006
  ret %struct._object* %31, !dbg !12006
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_listxattr(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %path = alloca %struct.path_t, align 8
  %follow_symlinks = alloca i32, align 4
  %i = alloca i64, align 8
  %result = alloca %struct._object*, align 8
  %buffer = alloca i8*, align 8
  %name = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %start = alloca i8*, align 8
  %trace = alloca i8*, align 8
  %end = alloca i8*, align 8
  %length = alloca i64, align 8
  %buffer_size = alloca i64, align 8
  %_save = alloca %struct._ts*, align 8
  %error = alloca i32, align 4
  %attribute = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp55 = alloca %struct._object*, align 8
  %_py_decref_tmp69 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !3040, metadata !3844), !dbg !12007
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !3041, metadata !3844), !dbg !12008
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !3042, metadata !3844), !dbg !12009
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !12010
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !12010
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !3043, metadata !3844), !dbg !12011
  %1 = bitcast i32* %follow_symlinks to i8*, !dbg !12012
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !12012
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks, metadata !3044, metadata !3844), !dbg !12013
  store i32 1, i32* %follow_symlinks, align 4, !dbg !12013, !tbaa !3840
  %2 = bitcast i64* %i to i8*, !dbg !12014
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !12014
  call void @llvm.dbg.declare(metadata i64* %i, metadata !3045, metadata !3844), !dbg !12015
  %3 = bitcast %struct._object** %result to i8*, !dbg !12016
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !12016
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !3046, metadata !3844), !dbg !12017
  store %struct._object* null, %struct._object** %result, align 8, !dbg !12017, !tbaa !3867
  %4 = bitcast i8** %buffer to i8*, !dbg !12018
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !12018
  call void @llvm.dbg.declare(metadata i8** %buffer, metadata !3047, metadata !3844), !dbg !12019
  store i8* null, i8** %buffer, align 8, !dbg !12019, !tbaa !3867
  %5 = bitcast i8** %name to i8*, !dbg !12020
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !12020
  call void @llvm.dbg.declare(metadata i8** %name, metadata !3048, metadata !3844), !dbg !12021
  %6 = bitcast %struct.path_t* %path to i8*, !dbg !12022
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 72, i32 8, i1 false), !dbg !12022
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !12023
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.164, i32 0, i32 0), i8** %function_name, align 8, !dbg !12024, !tbaa !5512
  %allow_fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 3, !dbg !12025
  store i32 1, i32* %allow_fd, align 4, !dbg !12026, !tbaa !5516
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !12027
  store i32 -1, i32* %fd, align 4, !dbg !12028, !tbaa !5529
  %7 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !12029, !tbaa !3867
  %8 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !12031, !tbaa !3867
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %7, %struct._object* %8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.538, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @posix_listxattr.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path, i32* %follow_symlinks), !dbg !12032
  %tobool = icmp ne i32 %call, 0, !dbg !12032
  br i1 %tobool, label %if.end, label %if.then, !dbg !12033

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !12034
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.95, !dbg !12034

if.end:                                           ; preds = %entry
  %fd1 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !12035
  %9 = load i32, i32* %fd1, align 4, !dbg !12035, !tbaa !5529
  %10 = load i32, i32* %follow_symlinks, align 4, !dbg !12037, !tbaa !3840
  %call2 = call i32 @fd_and_follow_symlinks_invalid(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.164, i32 0, i32 0), i32 %9, i32 %10), !dbg !12038
  %tobool3 = icmp ne i32 %call2, 0, !dbg !12038
  br i1 %tobool3, label %if.then.4, label %if.end.5, !dbg !12039

if.then.4:                                        ; preds = %if.end
  br label %exit, !dbg !12040

if.end.5:                                         ; preds = %if.end
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !12041
  %11 = load i8*, i8** %narrow, align 8, !dbg !12041, !tbaa !5537
  %tobool6 = icmp ne i8* %11, null, !dbg !12042
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !12042

cond.true:                                        ; preds = %if.end.5
  %narrow7 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !12043
  %12 = load i8*, i8** %narrow7, align 8, !dbg !12043, !tbaa !5537
  br label %cond.end, !dbg !12042

cond.false:                                       ; preds = %if.end.5
  br label %cond.end, !dbg !12045

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %12, %cond.true ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.204, i32 0, i32 0), %cond.false ], !dbg !12042
  store i8* %cond, i8** %name, align 8, !dbg !12047, !tbaa !3867
  store i64 0, i64* %i, align 8, !dbg !12050, !tbaa !3904
  br label %for.cond, !dbg !12051

for.cond:                                         ; preds = %for.inc.90, %cond.end
  %13 = bitcast i8** %start to i8*, !dbg !12052
  call void @llvm.lifetime.start(i64 8, i8* %13) #3, !dbg !12052
  call void @llvm.dbg.declare(metadata i8** %start, metadata !3049, metadata !3844), !dbg !12053
  %14 = bitcast i8** %trace to i8*, !dbg !12052
  call void @llvm.lifetime.start(i64 8, i8* %14) #3, !dbg !12052
  call void @llvm.dbg.declare(metadata i8** %trace, metadata !3053, metadata !3844), !dbg !12054
  %15 = bitcast i8** %end to i8*, !dbg !12052
  call void @llvm.lifetime.start(i64 8, i8* %15) #3, !dbg !12052
  call void @llvm.dbg.declare(metadata i8** %end, metadata !3054, metadata !3844), !dbg !12055
  %16 = bitcast i64* %length to i8*, !dbg !12056
  call void @llvm.lifetime.start(i64 8, i8* %16) #3, !dbg !12056
  call void @llvm.dbg.declare(metadata i64* %length, metadata !3055, metadata !3844), !dbg !12057
  %17 = bitcast i64* %buffer_size to i8*, !dbg !12058
  call void @llvm.lifetime.start(i64 8, i8* %17) #3, !dbg !12058
  call void @llvm.dbg.declare(metadata i64* %buffer_size, metadata !3056, metadata !3844), !dbg !12059
  %18 = load i64, i64* %i, align 8, !dbg !12060, !tbaa !3904
  %arrayidx = getelementptr [3 x i64], [3 x i64]* @posix_listxattr.buffer_sizes, i32 0, i64 %18, !dbg !12061
  %19 = load i64, i64* %arrayidx, align 8, !dbg !12061, !tbaa !3904
  store i64 %19, i64* %buffer_size, align 8, !dbg !12059, !tbaa !3904
  %20 = load i64, i64* %buffer_size, align 8, !dbg !12062, !tbaa !3904
  %tobool8 = icmp ne i64 %20, 0, !dbg !12062
  br i1 %tobool8, label %if.end.11, label %if.then.9, !dbg !12064

if.then.9:                                        ; preds = %for.cond
  %call10 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !12065
  store i32 3, i32* %cleanup.dest.slot
  br label %cleanup.84, !dbg !12067

if.end.11:                                        ; preds = %for.cond
  %21 = load i64, i64* %buffer_size, align 8, !dbg !12068, !tbaa !3904
  %call12 = call i8* @PyMem_Malloc(i64 %21), !dbg !12069
  store i8* %call12, i8** %buffer, align 8, !dbg !12070, !tbaa !3867
  %22 = load i8*, i8** %buffer, align 8, !dbg !12071, !tbaa !3867
  %tobool13 = icmp ne i8* %22, null, !dbg !12071
  br i1 %tobool13, label %if.end.16, label %if.then.14, !dbg !12073

if.then.14:                                       ; preds = %if.end.11
  %call15 = call %struct._object* @PyErr_NoMemory(), !dbg !12074
  store i32 3, i32* %cleanup.dest.slot
  br label %cleanup.84, !dbg !12076

if.end.16:                                        ; preds = %if.end.11
  %23 = bitcast %struct._ts** %_save to i8*, !dbg !12077
  call void @llvm.lifetime.start(i64 8, i8* %23) #3, !dbg !12077
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !3057, metadata !3844), !dbg !12078
  %call17 = call %struct._ts* @PyEval_SaveThread(), !dbg !12079
  store %struct._ts* %call17, %struct._ts** %_save, align 8, !dbg !12080, !tbaa !3867
  %fd18 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !12081
  %24 = load i32, i32* %fd18, align 4, !dbg !12081, !tbaa !5529
  %cmp = icmp sgt i32 %24, -1, !dbg !12083
  br i1 %cmp, label %if.then.19, label %if.else, !dbg !12084

if.then.19:                                       ; preds = %if.end.16
  %fd20 = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 6, !dbg !12085
  %25 = load i32, i32* %fd20, align 4, !dbg !12085, !tbaa !5529
  %26 = load i8*, i8** %buffer, align 8, !dbg !12086, !tbaa !3867
  %27 = load i64, i64* %buffer_size, align 8, !dbg !12087, !tbaa !3904
  %call21 = call i64 @flistxattr(i32 %25, i8* %26, i64 %27) #3, !dbg !12088
  store i64 %call21, i64* %length, align 8, !dbg !12089, !tbaa !3904
  br label %if.end.28, !dbg !12090

if.else:                                          ; preds = %if.end.16
  %28 = load i32, i32* %follow_symlinks, align 4, !dbg !12091, !tbaa !3840
  %tobool22 = icmp ne i32 %28, 0, !dbg !12091
  br i1 %tobool22, label %if.then.23, label %if.else.25, !dbg !12093

if.then.23:                                       ; preds = %if.else
  %29 = load i8*, i8** %name, align 8, !dbg !12094, !tbaa !3867
  %30 = load i8*, i8** %buffer, align 8, !dbg !12095, !tbaa !3867
  %31 = load i64, i64* %buffer_size, align 8, !dbg !12096, !tbaa !3904
  %call24 = call i64 @listxattr(i8* %29, i8* %30, i64 %31) #3, !dbg !12097
  store i64 %call24, i64* %length, align 8, !dbg !12098, !tbaa !3904
  br label %if.end.27, !dbg !12099

if.else.25:                                       ; preds = %if.else
  %32 = load i8*, i8** %name, align 8, !dbg !12100, !tbaa !3867
  %33 = load i8*, i8** %buffer, align 8, !dbg !12101, !tbaa !3867
  %34 = load i64, i64* %buffer_size, align 8, !dbg !12102, !tbaa !3904
  %call26 = call i64 @llistxattr(i8* %32, i8* %33, i64 %34) #3, !dbg !12103
  store i64 %call26, i64* %length, align 8, !dbg !12104, !tbaa !3904
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.25, %if.then.23
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.then.19
  %35 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !12105, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %35), !dbg !12106
  %36 = bitcast %struct._ts** %_save to i8*, !dbg !12107
  call void @llvm.lifetime.end(i64 8, i8* %36) #3, !dbg !12107
  %37 = load i64, i64* %length, align 8, !dbg !12108, !tbaa !3904
  %cmp29 = icmp slt i64 %37, 0, !dbg !12110
  br i1 %cmp29, label %if.then.30, label %if.end.36, !dbg !12111

if.then.30:                                       ; preds = %if.end.28
  %call31 = call i32* @__errno_location() #1, !dbg !12112
  %38 = load i32, i32* %call31, align 4, !dbg !12115, !tbaa !3840
  %cmp32 = icmp eq i32 %38, 34, !dbg !12116
  br i1 %cmp32, label %if.then.33, label %if.end.34, !dbg !12117

if.then.33:                                       ; preds = %if.then.30
  %39 = load i8*, i8** %buffer, align 8, !dbg !12118, !tbaa !3867
  call void @PyMem_Free(i8* %39), !dbg !12120
  store i8* null, i8** %buffer, align 8, !dbg !12121, !tbaa !3867
  store i32 5, i32* %cleanup.dest.slot
  br label %cleanup.84, !dbg !12122

if.end.34:                                        ; preds = %if.then.30
  %call35 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !12123
  store i32 3, i32* %cleanup.dest.slot
  br label %cleanup.84, !dbg !12124

if.end.36:                                        ; preds = %if.end.28
  %call37 = call %struct._object* @PyList_New(i64 0), !dbg !12125
  store %struct._object* %call37, %struct._object** %result, align 8, !dbg !12126, !tbaa !3867
  %40 = load %struct._object*, %struct._object** %result, align 8, !dbg !12127, !tbaa !3867
  %tobool38 = icmp ne %struct._object* %40, null, !dbg !12127
  br i1 %tobool38, label %if.end.40, label %if.then.39, !dbg !12129

if.then.39:                                       ; preds = %if.end.36
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.84, !dbg !12130

if.end.40:                                        ; preds = %if.end.36
  %41 = load i8*, i8** %buffer, align 8, !dbg !12132, !tbaa !3867
  %42 = load i64, i64* %length, align 8, !dbg !12133, !tbaa !3904
  %add.ptr = getelementptr i8, i8* %41, i64 %42, !dbg !12134
  store i8* %add.ptr, i8** %end, align 8, !dbg !12135, !tbaa !3867
  %43 = load i8*, i8** %buffer, align 8, !dbg !12136, !tbaa !3867
  store i8* %43, i8** %start, align 8, !dbg !12137, !tbaa !3867
  store i8* %43, i8** %trace, align 8, !dbg !12138, !tbaa !3867
  br label %for.cond.41, !dbg !12139

for.cond.41:                                      ; preds = %for.inc, %if.end.40
  %44 = load i8*, i8** %trace, align 8, !dbg !12140, !tbaa !3867
  %45 = load i8*, i8** %end, align 8, !dbg !12143, !tbaa !3867
  %cmp42 = icmp ne i8* %44, %45, !dbg !12144
  br i1 %cmp42, label %for.body, label %for.end, !dbg !12145

for.body:                                         ; preds = %for.cond.41
  %46 = load i8*, i8** %trace, align 8, !dbg !12146, !tbaa !3867
  %47 = load i8, i8* %46, align 1, !dbg !12147, !tbaa !9169
  %tobool43 = icmp ne i8 %47, 0, !dbg !12147
  br i1 %tobool43, label %if.end.83, label %if.then.44, !dbg !12148

if.then.44:                                       ; preds = %for.body
  %48 = bitcast i32* %error to i8*, !dbg !12149
  call void @llvm.lifetime.start(i64 4, i8* %48) #3, !dbg !12149
  call void @llvm.dbg.declare(metadata i32* %error, metadata !3059, metadata !3844), !dbg !12150
  %49 = bitcast %struct._object** %attribute to i8*, !dbg !12151
  call void @llvm.lifetime.start(i64 8, i8* %49) #3, !dbg !12151
  call void @llvm.dbg.declare(metadata %struct._object** %attribute, metadata !3065, metadata !3844), !dbg !12152
  %50 = load i8*, i8** %start, align 8, !dbg !12153, !tbaa !3867
  %51 = load i8*, i8** %trace, align 8, !dbg !12154, !tbaa !3867
  %52 = load i8*, i8** %start, align 8, !dbg !12155, !tbaa !3867
  %sub.ptr.lhs.cast = ptrtoint i8* %51 to i64, !dbg !12156
  %sub.ptr.rhs.cast = ptrtoint i8* %52 to i64, !dbg !12156
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !12156
  %call45 = call %struct._object* @PyUnicode_DecodeFSDefaultAndSize(i8* %50, i64 %sub.ptr.sub), !dbg !12157
  store %struct._object* %call45, %struct._object** %attribute, align 8, !dbg !12152, !tbaa !3867
  %53 = load %struct._object*, %struct._object** %attribute, align 8, !dbg !12158, !tbaa !3867
  %tobool46 = icmp ne %struct._object* %53, null, !dbg !12158
  br i1 %tobool46, label %if.end.52, label %if.then.47, !dbg !12159

if.then.47:                                       ; preds = %if.then.44
  br label %do.body, !dbg !12160

do.body:                                          ; preds = %if.then.47
  %54 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12161
  call void @llvm.lifetime.start(i64 8, i8* %54) #3, !dbg !12161
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !3066, metadata !3844), !dbg !12163
  %55 = load %struct._object*, %struct._object** %result, align 8, !dbg !12164, !tbaa !3867
  store %struct._object* %55, %struct._object** %_py_decref_tmp, align 8, !dbg !12163, !tbaa !3867
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12165, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 0, !dbg !12167
  %57 = load i64, i64* %ob_refcnt, align 8, !dbg !12168, !tbaa !3977
  %dec = add i64 %57, -1, !dbg !12168
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !12168, !tbaa !3977
  %cmp48 = icmp ne i64 %dec, 0, !dbg !12169
  br i1 %cmp48, label %if.then.49, label %if.else.50, !dbg !12170

if.then.49:                                       ; preds = %do.body
  br label %if.end.51, !dbg !12171

if.else.50:                                       ; preds = %do.body
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12173, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 1, !dbg !12175
  %59 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !12175, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 4, !dbg !12176
  %60 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !12176, !tbaa !3986
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12177, !tbaa !3867
  call void %60(%struct._object* %61), !dbg !12178
  br label %if.end.51

if.end.51:                                        ; preds = %if.else.50, %if.then.49
  %62 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12179
  call void @llvm.lifetime.end(i64 8, i8* %62) #3, !dbg !12179
  br label %do.cond, !dbg !12181

do.cond:                                          ; preds = %if.end.51
  br label %do.end, !dbg !12182

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %result, align 8, !dbg !12184, !tbaa !3867
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12185

if.end.52:                                        ; preds = %if.then.44
  %63 = load %struct._object*, %struct._object** %result, align 8, !dbg !12186, !tbaa !3867
  %64 = load %struct._object*, %struct._object** %attribute, align 8, !dbg !12187, !tbaa !3867
  %call53 = call i32 @PyList_Append(%struct._object* %63, %struct._object* %64), !dbg !12188
  store i32 %call53, i32* %error, align 4, !dbg !12189, !tbaa !3840
  br label %do.body.54, !dbg !12190

do.body.54:                                       ; preds = %if.end.52
  %65 = bitcast %struct._object** %_py_decref_tmp55 to i8*, !dbg !12191
  call void @llvm.lifetime.start(i64 8, i8* %65) #3, !dbg !12191
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp55, metadata !3070, metadata !3844), !dbg !12193
  %66 = load %struct._object*, %struct._object** %attribute, align 8, !dbg !12194, !tbaa !3867
  store %struct._object* %66, %struct._object** %_py_decref_tmp55, align 8, !dbg !12193, !tbaa !3867
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8, !dbg !12195, !tbaa !3867
  %ob_refcnt56 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 0, !dbg !12197
  %68 = load i64, i64* %ob_refcnt56, align 8, !dbg !12198, !tbaa !3977
  %dec57 = add i64 %68, -1, !dbg !12198
  store i64 %dec57, i64* %ob_refcnt56, align 8, !dbg !12198, !tbaa !3977
  %cmp58 = icmp ne i64 %dec57, 0, !dbg !12199
  br i1 %cmp58, label %if.then.59, label %if.else.60, !dbg !12200

if.then.59:                                       ; preds = %do.body.54
  br label %if.end.63, !dbg !12201

if.else.60:                                       ; preds = %do.body.54
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8, !dbg !12203, !tbaa !3867
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 1, !dbg !12205
  %70 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8, !dbg !12205, !tbaa !3892
  %tp_dealloc62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %70, i32 0, i32 4, !dbg !12206
  %71 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc62, align 8, !dbg !12206, !tbaa !3986
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8, !dbg !12207, !tbaa !3867
  call void %71(%struct._object* %72), !dbg !12208
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.60, %if.then.59
  %73 = bitcast %struct._object** %_py_decref_tmp55 to i8*, !dbg !12209
  call void @llvm.lifetime.end(i64 8, i8* %73) #3, !dbg !12209
  br label %do.cond.64, !dbg !12211

do.cond.64:                                       ; preds = %if.end.63
  br label %do.end.65, !dbg !12212

do.end.65:                                        ; preds = %do.cond.64
  %74 = load i32, i32* %error, align 4, !dbg !12214, !tbaa !3840
  %tobool66 = icmp ne i32 %74, 0, !dbg !12214
  br i1 %tobool66, label %if.then.67, label %if.end.80, !dbg !12215

if.then.67:                                       ; preds = %do.end.65
  br label %do.body.68, !dbg !12216

do.body.68:                                       ; preds = %if.then.67
  %75 = bitcast %struct._object** %_py_decref_tmp69 to i8*, !dbg !12217
  call void @llvm.lifetime.start(i64 8, i8* %75) #3, !dbg !12217
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp69, metadata !3072, metadata !3844), !dbg !12219
  %76 = load %struct._object*, %struct._object** %result, align 8, !dbg !12220, !tbaa !3867
  store %struct._object* %76, %struct._object** %_py_decref_tmp69, align 8, !dbg !12219, !tbaa !3867
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8, !dbg !12221, !tbaa !3867
  %ob_refcnt70 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 0, !dbg !12223
  %78 = load i64, i64* %ob_refcnt70, align 8, !dbg !12224, !tbaa !3977
  %dec71 = add i64 %78, -1, !dbg !12224
  store i64 %dec71, i64* %ob_refcnt70, align 8, !dbg !12224, !tbaa !3977
  %cmp72 = icmp ne i64 %dec71, 0, !dbg !12225
  br i1 %cmp72, label %if.then.73, label %if.else.74, !dbg !12226

if.then.73:                                       ; preds = %do.body.68
  br label %if.end.77, !dbg !12227

if.else.74:                                       ; preds = %do.body.68
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8, !dbg !12229, !tbaa !3867
  %ob_type75 = getelementptr inbounds %struct._object, %struct._object* %79, i32 0, i32 1, !dbg !12231
  %80 = load %struct._typeobject*, %struct._typeobject** %ob_type75, align 8, !dbg !12231, !tbaa !3892
  %tp_dealloc76 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %80, i32 0, i32 4, !dbg !12232
  %81 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc76, align 8, !dbg !12232, !tbaa !3986
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8, !dbg !12233, !tbaa !3867
  call void %81(%struct._object* %82), !dbg !12234
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.74, %if.then.73
  %83 = bitcast %struct._object** %_py_decref_tmp69 to i8*, !dbg !12235
  call void @llvm.lifetime.end(i64 8, i8* %83) #3, !dbg !12235
  br label %do.cond.78, !dbg !12237

do.cond.78:                                       ; preds = %if.end.77
  br label %do.end.79, !dbg !12238

do.end.79:                                        ; preds = %do.cond.78
  store %struct._object* null, %struct._object** %result, align 8, !dbg !12240, !tbaa !3867
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12241

if.end.80:                                        ; preds = %do.end.65
  %84 = load i8*, i8** %trace, align 8, !dbg !12242, !tbaa !3867
  %add.ptr81 = getelementptr i8, i8* %84, i64 1, !dbg !12243
  store i8* %add.ptr81, i8** %start, align 8, !dbg !12244, !tbaa !3867
  store i32 0, i32* %cleanup.dest.slot, !dbg !12245
  br label %cleanup, !dbg !12245

cleanup:                                          ; preds = %if.end.80, %do.end.79, %do.end
  %85 = bitcast %struct._object** %attribute to i8*, !dbg !12246
  call void @llvm.lifetime.end(i64 8, i8* %85) #3, !dbg !12246
  %86 = bitcast i32* %error to i8*, !dbg !12246
  call void @llvm.lifetime.end(i64 4, i8* %86) #3, !dbg !12246
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.83, !dbg !12248

if.end.83:                                        ; preds = %cleanup.cont, %for.body
  br label %for.inc, !dbg !12249

for.inc:                                          ; preds = %if.end.83
  %87 = load i8*, i8** %trace, align 8, !dbg !12250, !tbaa !3867
  %incdec.ptr = getelementptr i8, i8* %87, i32 1, !dbg !12250
  store i8* %incdec.ptr, i8** %trace, align 8, !dbg !12250, !tbaa !3867
  br label %for.cond.41, !dbg !12251

for.end:                                          ; preds = %for.cond.41
  store i32 3, i32* %cleanup.dest.slot
  br label %cleanup.84, !dbg !12252

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.84

cleanup.84:                                       ; preds = %NewDefault, %for.end, %if.then.39, %if.end.34, %if.then.33, %if.then.14, %if.then.9
  %88 = bitcast i64* %buffer_size to i8*, !dbg !12253
  call void @llvm.lifetime.end(i64 8, i8* %88) #3, !dbg !12253
  %89 = bitcast i64* %length to i8*, !dbg !12253
  call void @llvm.lifetime.end(i64 8, i8* %89) #3, !dbg !12253
  %90 = bitcast i8** %end to i8*, !dbg !12253
  call void @llvm.lifetime.end(i64 8, i8* %90) #3, !dbg !12253
  %91 = bitcast i8** %trace to i8*, !dbg !12253
  call void @llvm.lifetime.end(i64 8, i8* %91) #3, !dbg !12253
  %92 = bitcast i8** %start to i8*, !dbg !12253
  call void @llvm.lifetime.end(i64 8, i8* %92) #3, !dbg !12253
  %cleanup.dest.89 = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock.8

NodeBlock.8:                                      ; preds = %cleanup.84
  %Pivot.9 = icmp slt i32 %cleanup.dest.89, 3
  br i1 %Pivot.9, label %LeafBlock.2, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock.8
  %Pivot = icmp slt i32 %cleanup.dest.89, 5
  br i1 %Pivot, label %LeafBlock.4, label %LeafBlock.6

LeafBlock.6:                                      ; preds = %NodeBlock
  %SwitchLeaf7 = icmp eq i32 %cleanup.dest.89, 5
  br i1 %SwitchLeaf7, label %for.inc.90, label %NewDefault.1

LeafBlock.4:                                      ; preds = %NodeBlock
  %SwitchLeaf5 = icmp eq i32 %cleanup.dest.89, 3
  br i1 %SwitchLeaf5, label %for.end.91, label %NewDefault.1

LeafBlock.2:                                      ; preds = %NodeBlock.8
  %SwitchLeaf3 = icmp eq i32 %cleanup.dest.89, 2
  br i1 %SwitchLeaf3, label %exit, label %NewDefault.1

for.inc.90:                                       ; preds = %LeafBlock.6
  %93 = load i64, i64* %i, align 8, !dbg !12254, !tbaa !3904
  %inc = add i64 %93, 1, !dbg !12254
  store i64 %inc, i64* %i, align 8, !dbg !12254, !tbaa !3904
  br label %for.cond, !dbg !12255

for.end.91:                                       ; preds = %LeafBlock.4
  br label %exit, !dbg !12256

exit:                                             ; preds = %LeafBlock.2, %for.end.91, %if.then.4
  call void @path_cleanup(%struct.path_t* %path), !dbg !12257
  %94 = load i8*, i8** %buffer, align 8, !dbg !12258, !tbaa !3867
  %tobool92 = icmp ne i8* %94, null, !dbg !12258
  br i1 %tobool92, label %if.then.93, label %if.end.94, !dbg !12260

if.then.93:                                       ; preds = %exit
  %95 = load i8*, i8** %buffer, align 8, !dbg !12261, !tbaa !3867
  call void @PyMem_Free(i8* %95), !dbg !12262
  br label %if.end.94, !dbg !12262

if.end.94:                                        ; preds = %if.then.93, %exit
  %96 = load %struct._object*, %struct._object** %result, align 8, !dbg !12263, !tbaa !3867
  store %struct._object* %96, %struct._object** %retval, !dbg !12264
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.95, !dbg !12264

NewDefault.1:                                     ; preds = %LeafBlock.6, %LeafBlock.4, %LeafBlock.2
  br label %cleanup.95

cleanup.95:                                       ; preds = %NewDefault.1, %if.end.94, %if.then
  %97 = bitcast i8** %name to i8*, !dbg !12265
  call void @llvm.lifetime.end(i64 8, i8* %97) #3, !dbg !12265
  %98 = bitcast i8** %buffer to i8*, !dbg !12265
  call void @llvm.lifetime.end(i64 8, i8* %98) #3, !dbg !12265
  %99 = bitcast %struct._object** %result to i8*, !dbg !12265
  call void @llvm.lifetime.end(i64 8, i8* %99) #3, !dbg !12265
  %100 = bitcast i64* %i to i8*, !dbg !12265
  call void @llvm.lifetime.end(i64 8, i8* %100) #3, !dbg !12265
  %101 = bitcast i32* %follow_symlinks to i8*, !dbg !12265
  call void @llvm.lifetime.end(i64 4, i8* %101) #3, !dbg !12265
  %102 = bitcast %struct.path_t* %path to i8*, !dbg !12265
  call void @llvm.lifetime.end(i64 72, i8* %102) #3, !dbg !12265
  %103 = load %struct._object*, %struct._object** %retval, !dbg !12265
  ret %struct._object* %103, !dbg !12265
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @get_terminal_size(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %columns = alloca i32, align 4
  %lines = alloca i32, align 4
  %termsize = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %w = alloca %struct.winsize, align 2
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !3078, metadata !3844), !dbg !12266
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !3079, metadata !3844), !dbg !12267
  %0 = bitcast i32* %columns to i8*, !dbg !12268
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !12268
  call void @llvm.dbg.declare(metadata i32* %columns, metadata !3080, metadata !3844), !dbg !12269
  %1 = bitcast i32* %lines to i8*, !dbg !12268
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !12268
  call void @llvm.dbg.declare(metadata i32* %lines, metadata !3081, metadata !3844), !dbg !12270
  %2 = bitcast %struct._object** %termsize to i8*, !dbg !12271
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !12271
  call void @llvm.dbg.declare(metadata %struct._object** %termsize, metadata !3082, metadata !3844), !dbg !12272
  %3 = bitcast i32* %fd to i8*, !dbg !12273
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !12273
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !3083, metadata !3844), !dbg !12274
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !12275, !tbaa !3867
  %call = call i32 @fileno(%struct._IO_FILE* %4) #3, !dbg !12276
  store i32 %call, i32* %fd, align 4, !dbg !12274, !tbaa !3840
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !12277, !tbaa !3867
  %call1 = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.539, i32 0, i32 0), i32* %fd), !dbg !12279
  %tobool = icmp ne i32 %call1, 0, !dbg !12279
  br i1 %tobool, label %if.end, label %if.then, !dbg !12280

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !12281
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26, !dbg !12281

if.end:                                           ; preds = %entry
  %6 = bitcast %struct.winsize* %w to i8*, !dbg !12282
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !12282
  call void @llvm.dbg.declare(metadata %struct.winsize* %w, metadata !3084, metadata !3844), !dbg !12283
  %7 = load i32, i32* %fd, align 4, !dbg !12284, !tbaa !3840
  %call2 = call i32 (i32, i64, ...) @ioctl(i32 %7, i64 21523, %struct.winsize* %w) #3, !dbg !12286
  %tobool3 = icmp ne i32 %call2, 0, !dbg !12286
  br i1 %tobool3, label %if.then.4, label %if.end.6, !dbg !12287

if.then.4:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !12288, !tbaa !3867
  %call5 = call %struct._object* @PyErr_SetFromErrno(%struct._object* %8), !dbg !12289
  store %struct._object* %call5, %struct._object** %retval, !dbg !12290
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12290

if.end.6:                                         ; preds = %if.end
  %ws_col = getelementptr inbounds %struct.winsize, %struct.winsize* %w, i32 0, i32 1, !dbg !12291
  %9 = load i16, i16* %ws_col, align 2, !dbg !12291, !tbaa !12292
  %conv = zext i16 %9 to i32, !dbg !12295
  store i32 %conv, i32* %columns, align 4, !dbg !12296, !tbaa !3840
  %ws_row = getelementptr inbounds %struct.winsize, %struct.winsize* %w, i32 0, i32 0, !dbg !12297
  %10 = load i16, i16* %ws_row, align 2, !dbg !12297, !tbaa !12298
  %conv7 = zext i16 %10 to i32, !dbg !12299
  store i32 %conv7, i32* %lines, align 4, !dbg !12300, !tbaa !3840
  store i32 0, i32* %cleanup.dest.slot, !dbg !12301
  br label %cleanup, !dbg !12301

cleanup:                                          ; preds = %if.end.6, %if.then.4
  %11 = bitcast %struct.winsize* %w to i8*, !dbg !12302
  call void @llvm.lifetime.end(i64 8, i8* %11) #3, !dbg !12302
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  %call8 = call %struct._object* @PyStructSequence_New(%struct._typeobject* @TerminalSizeType), !dbg !12304
  store %struct._object* %call8, %struct._object** %termsize, align 8, !dbg !12305, !tbaa !3867
  %12 = load %struct._object*, %struct._object** %termsize, align 8, !dbg !12306, !tbaa !3867
  %cmp = icmp eq %struct._object* %12, null, !dbg !12308
  br i1 %cmp, label %if.then.10, label %if.end.11, !dbg !12309

if.then.10:                                       ; preds = %cleanup.cont
  store %struct._object* null, %struct._object** %retval, !dbg !12310
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26, !dbg !12310

if.end.11:                                        ; preds = %cleanup.cont
  %13 = load i32, i32* %columns, align 4, !dbg !12311, !tbaa !3840
  %conv12 = sext i32 %13 to i64, !dbg !12311
  %call13 = call %struct._object* @PyLong_FromLong(i64 %conv12), !dbg !12312
  %14 = load %struct._object*, %struct._object** %termsize, align 8, !dbg !12313, !tbaa !3867
  %15 = bitcast %struct._object* %14 to %struct.PyTupleObject*, !dbg !12314
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %15, i32 0, i32 1, !dbg !12315
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !12316
  store %struct._object* %call13, %struct._object** %arrayidx, align 8, !dbg !12317, !tbaa !3867
  %16 = load i32, i32* %lines, align 4, !dbg !12318, !tbaa !3840
  %conv14 = sext i32 %16 to i64, !dbg !12318
  %call15 = call %struct._object* @PyLong_FromLong(i64 %conv14), !dbg !12319
  %17 = load %struct._object*, %struct._object** %termsize, align 8, !dbg !12320, !tbaa !3867
  %18 = bitcast %struct._object* %17 to %struct.PyTupleObject*, !dbg !12321
  %ob_item16 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %18, i32 0, i32 1, !dbg !12322
  %arrayidx17 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item16, i32 0, i64 1, !dbg !12323
  store %struct._object* %call15, %struct._object** %arrayidx17, align 8, !dbg !12324, !tbaa !3867
  %call18 = call %struct._object* @PyErr_Occurred(), !dbg !12325
  %tobool19 = icmp ne %struct._object* %call18, null, !dbg !12325
  br i1 %tobool19, label %if.then.20, label %if.end.25, !dbg !12326

if.then.20:                                       ; preds = %if.end.11
  br label %do.body, !dbg !12327

do.body:                                          ; preds = %if.then.20
  %19 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12328
  call void @llvm.lifetime.start(i64 8, i8* %19) #3, !dbg !12328
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !3093, metadata !3844), !dbg !12330
  %20 = load %struct._object*, %struct._object** %termsize, align 8, !dbg !12331, !tbaa !3867
  store %struct._object* %20, %struct._object** %_py_decref_tmp, align 8, !dbg !12330, !tbaa !3867
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12332, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0, !dbg !12334
  %22 = load i64, i64* %ob_refcnt, align 8, !dbg !12335, !tbaa !3977
  %dec = add i64 %22, -1, !dbg !12335
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !12335, !tbaa !3977
  %cmp21 = icmp ne i64 %dec, 0, !dbg !12336
  br i1 %cmp21, label %if.then.23, label %if.else, !dbg !12337

if.then.23:                                       ; preds = %do.body
  br label %if.end.24, !dbg !12338

if.else:                                          ; preds = %do.body
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12340, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1, !dbg !12342
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !12342, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4, !dbg !12343
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !12343, !tbaa !3986
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12344, !tbaa !3867
  call void %25(%struct._object* %26), !dbg !12345
  br label %if.end.24

if.end.24:                                        ; preds = %if.else, %if.then.23
  %27 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12346
  call void @llvm.lifetime.end(i64 8, i8* %27) #3, !dbg !12346
  br label %do.cond, !dbg !12348

do.cond:                                          ; preds = %if.end.24
  br label %do.end, !dbg !12349

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !12351
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26, !dbg !12351

if.end.25:                                        ; preds = %if.end.11
  %28 = load %struct._object*, %struct._object** %termsize, align 8, !dbg !12352, !tbaa !3867
  store %struct._object* %28, %struct._object** %retval, !dbg !12353
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26, !dbg !12353

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.26

cleanup.26:                                       ; preds = %NewDefault, %if.end.25, %do.end, %if.then.10, %if.then
  %29 = bitcast i32* %fd to i8*, !dbg !12354
  call void @llvm.lifetime.end(i64 4, i8* %29) #3, !dbg !12354
  %30 = bitcast %struct._object** %termsize to i8*, !dbg !12354
  call void @llvm.lifetime.end(i64 8, i8* %30) #3, !dbg !12354
  %31 = bitcast i32* %lines to i8*, !dbg !12354
  call void @llvm.lifetime.end(i64 4, i8* %31) #3, !dbg !12354
  %32 = bitcast i32* %columns to i8*, !dbg !12354
  call void @llvm.lifetime.end(i64 4, i8* %32) #3, !dbg !12354
  %33 = load %struct._object*, %struct._object** %retval, !dbg !12354
  ret %struct._object* %33, !dbg !12354
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_cpu_count(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %ncpu = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !3099, metadata !3844), !dbg !12355
  %0 = bitcast i32* %ncpu to i8*, !dbg !12356
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !12356
  call void @llvm.dbg.declare(metadata i32* %ncpu, metadata !3100, metadata !3844), !dbg !12357
  store i32 0, i32* %ncpu, align 4, !dbg !12357, !tbaa !3840
  %call = call i64 @sysconf(i32 84) #3, !dbg !12358
  %conv = trunc i64 %call to i32, !dbg !12358
  store i32 %conv, i32* %ncpu, align 4, !dbg !12359, !tbaa !3840
  %1 = load i32, i32* %ncpu, align 4, !dbg !12360, !tbaa !3840
  %cmp = icmp sge i32 %1, 1, !dbg !12362
  br i1 %cmp, label %if.then, label %if.else, !dbg !12363

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %ncpu, align 4, !dbg !12364, !tbaa !3840
  %conv2 = sext i32 %2 to i64, !dbg !12364
  %call3 = call %struct._object* @PyLong_FromLong(i64 %conv2), !dbg !12365
  store %struct._object* %call3, %struct._object** %retval, !dbg !12366
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12366

if.else:                                          ; preds = %entry
  %3 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !12367, !tbaa !3977
  %inc = add i64 %3, 1, !dbg !12367
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !12367, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !12368
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12368

cleanup:                                          ; preds = %if.else, %if.then
  %4 = bitcast i32* %ncpu to i8*, !dbg !12369
  call void @llvm.lifetime.end(i64 4, i8* %4) #3, !dbg !12369
  %5 = load %struct._object*, %struct._object** %retval, !dbg !12369
  ret %struct._object* %5, !dbg !12369
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_get_inheritable(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %inheritable = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !3103, metadata !3844), !dbg !12370
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !3104, metadata !3844), !dbg !12371
  %0 = bitcast i32* %fd to i8*, !dbg !12372
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !12372
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !3105, metadata !3844), !dbg !12373
  %1 = bitcast i32* %inheritable to i8*, !dbg !12374
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !12374
  call void @llvm.dbg.declare(metadata i32* %inheritable, metadata !3106, metadata !3844), !dbg !12375
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !12376, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.540, i32 0, i32 0), i32* %fd), !dbg !12378
  %tobool = icmp ne i32 %call, 0, !dbg !12378
  br i1 %tobool, label %if.end, label %if.then, !dbg !12379

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !12380
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12380

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %fd, align 4, !dbg !12381, !tbaa !3840
  %call1 = call i32 @_Py_get_inheritable(i32 %3), !dbg !12382
  store i32 %call1, i32* %inheritable, align 4, !dbg !12383, !tbaa !3840
  %4 = load i32, i32* %inheritable, align 4, !dbg !12384, !tbaa !3840
  %cmp = icmp slt i32 %4, 0, !dbg !12386
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !12387

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !12388
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12388

if.end.3:                                         ; preds = %if.end
  %5 = load i32, i32* %inheritable, align 4, !dbg !12389, !tbaa !3840
  %conv = sext i32 %5 to i64, !dbg !12389
  %call4 = call %struct._object* @PyBool_FromLong(i64 %conv), !dbg !12390
  store %struct._object* %call4, %struct._object** %retval, !dbg !12391
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12391

cleanup:                                          ; preds = %if.end.3, %if.then.2, %if.then
  %6 = bitcast i32* %inheritable to i8*, !dbg !12392
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !12392
  %7 = bitcast i32* %fd to i8*, !dbg !12392
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !12392
  %8 = load %struct._object*, %struct._object** %retval, !dbg !12392
  ret %struct._object* %8, !dbg !12392
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_set_inheritable(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %inheritable = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !3109, metadata !3844), !dbg !12393
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !3110, metadata !3844), !dbg !12394
  %0 = bitcast i32* %fd to i8*, !dbg !12395
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !12395
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !3111, metadata !3844), !dbg !12396
  %1 = bitcast i32* %inheritable to i8*, !dbg !12395
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !12395
  call void @llvm.dbg.declare(metadata i32* %inheritable, metadata !3112, metadata !3844), !dbg !12397
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !12398, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.541, i32 0, i32 0), i32* %fd, i32* %inheritable), !dbg !12400
  %tobool = icmp ne i32 %call, 0, !dbg !12400
  br i1 %tobool, label %if.end, label %if.then, !dbg !12401

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !12402
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12402

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %fd, align 4, !dbg !12403, !tbaa !3840
  %4 = load i32, i32* %inheritable, align 4, !dbg !12405, !tbaa !3840
  %call1 = call i32 @_Py_set_inheritable(i32 %3, i32 %4, i32* null), !dbg !12406
  %cmp = icmp slt i32 %call1, 0, !dbg !12407
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !12408

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !12409
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12409

if.end.3:                                         ; preds = %if.end
  %5 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !12410, !tbaa !3977
  %inc = add i64 %5, 1, !dbg !12410
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !12410, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !12411
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12411

cleanup:                                          ; preds = %if.end.3, %if.then.2, %if.then
  %6 = bitcast i32* %inheritable to i8*, !dbg !12412
  call void @llvm.lifetime.end(i64 4, i8* %6) #3, !dbg !12412
  %7 = bitcast i32* %fd to i8*, !dbg !12412
  call void @llvm.lifetime.end(i64 4, i8* %7) #3, !dbg !12412
  %8 = load %struct._object*, %struct._object** %retval, !dbg !12412
  ret %struct._object* %8, !dbg !12412
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #3

declare i32 @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object*, %struct._object*, i8*, i8**, ...) #2

; Function Attrs: nounwind uwtable
define internal i32 @path_converter(%struct._object* %o, i8* %p) #0 {
entry:
  %retval = alloca i32, align 4
  %o.addr = alloca %struct._object*, align 8
  %p.addr = alloca i8*, align 8
  %path = alloca %struct.path_t*, align 8
  %unicode = alloca %struct._object*, align 8
  %bytes = alloca %struct._object*, align 8
  %length = alloca i64, align 8
  %narrow = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %converted = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %fd43 = alloca i32, align 4
  %result = alloca i32, align 4
  %_py_decref_tmp105 = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !783, metadata !3844), !dbg !12413
  store i8* %p, i8** %p.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !784, metadata !3844), !dbg !12414
  %0 = bitcast %struct.path_t** %path to i8*, !dbg !12415
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !12415
  call void @llvm.dbg.declare(metadata %struct.path_t** %path, metadata !785, metadata !3844), !dbg !12416
  %1 = load i8*, i8** %p.addr, align 8, !dbg !12417, !tbaa !3867
  %2 = bitcast i8* %1 to %struct.path_t*, !dbg !12418
  store %struct.path_t* %2, %struct.path_t** %path, align 8, !dbg !12416, !tbaa !3867
  %3 = bitcast %struct._object** %unicode to i8*, !dbg !12419
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !12419
  call void @llvm.dbg.declare(metadata %struct._object** %unicode, metadata !786, metadata !3844), !dbg !12420
  %4 = bitcast %struct._object** %bytes to i8*, !dbg !12419
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !12419
  call void @llvm.dbg.declare(metadata %struct._object** %bytes, metadata !787, metadata !3844), !dbg !12421
  %5 = bitcast i64* %length to i8*, !dbg !12422
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !12422
  call void @llvm.dbg.declare(metadata i64* %length, metadata !788, metadata !3844), !dbg !12423
  %6 = bitcast i8** %narrow to i8*, !dbg !12424
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !12424
  call void @llvm.dbg.declare(metadata i8** %narrow, metadata !789, metadata !3844), !dbg !12425
  %7 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !12426, !tbaa !3867
  %cmp = icmp eq %struct._object* %7, null, !dbg !12428
  br i1 %cmp, label %if.then, label %if.end, !dbg !12429

if.then:                                          ; preds = %entry
  %8 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12430, !tbaa !3867
  call void @path_cleanup(%struct.path_t* %8), !dbg !12432
  store i32 1, i32* %retval, !dbg !12433
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.123, !dbg !12433

if.end:                                           ; preds = %entry
  %9 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12434, !tbaa !3867
  %cleanup = getelementptr inbounds %struct.path_t, %struct.path_t* %9, i32 0, i32 9, !dbg !12435
  store %struct._object* null, %struct._object** %cleanup, align 8, !dbg !12436, !tbaa !12437
  %10 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !12438, !tbaa !3867
  %cmp1 = icmp eq %struct._object* %10, @_Py_NoneStruct, !dbg !12440
  br i1 %cmp1, label %if.then.2, label %if.end.18, !dbg !12441

if.then.2:                                        ; preds = %if.end
  %11 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12442, !tbaa !3867
  %nullable = getelementptr inbounds %struct.path_t, %struct.path_t* %11, i32 0, i32 2, !dbg !12445
  %12 = load i32, i32* %nullable, align 4, !dbg !12445, !tbaa !6012
  %tobool = icmp ne i32 %12, 0, !dbg !12442
  br i1 %tobool, label %if.end.15, label %if.then.3, !dbg !12446

if.then.3:                                        ; preds = %if.then.2
  %13 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !12447, !tbaa !3867
  %14 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12449, !tbaa !3867
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %14, i32 0, i32 0, !dbg !12450
  %15 = load i8*, i8** %function_name, align 8, !dbg !12450, !tbaa !5512
  %tobool4 = icmp ne i8* %15, null, !dbg !12449
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !12449

cond.true:                                        ; preds = %if.then.3
  %16 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12451, !tbaa !3867
  %function_name5 = getelementptr inbounds %struct.path_t, %struct.path_t* %16, i32 0, i32 0, !dbg !12453
  %17 = load i8*, i8** %function_name5, align 8, !dbg !12453, !tbaa !5512
  br label %cond.end, !dbg !12449

cond.false:                                       ; preds = %if.then.3
  br label %cond.end, !dbg !12454

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %17, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), %cond.false ], !dbg !12449
  %18 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12456, !tbaa !3867
  %function_name6 = getelementptr inbounds %struct.path_t, %struct.path_t* %18, i32 0, i32 0, !dbg !12459
  %19 = load i8*, i8** %function_name6, align 8, !dbg !12459, !tbaa !5512
  %tobool7 = icmp ne i8* %19, null, !dbg !12460
  %cond8 = select i1 %tobool7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.174, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), !dbg !12460
  %20 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12461, !tbaa !3867
  %argument_name = getelementptr inbounds %struct.path_t, %struct.path_t* %20, i32 0, i32 1, !dbg !12462
  %21 = load i8*, i8** %argument_name, align 8, !dbg !12462, !tbaa !6390
  %tobool9 = icmp ne i8* %21, null, !dbg !12461
  br i1 %tobool9, label %cond.true.10, label %cond.false.12, !dbg !12461

cond.true.10:                                     ; preds = %cond.end
  %22 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12463, !tbaa !3867
  %argument_name11 = getelementptr inbounds %struct.path_t, %struct.path_t* %22, i32 0, i32 1, !dbg !12465
  %23 = load i8*, i8** %argument_name11, align 8, !dbg !12465, !tbaa !6390
  br label %cond.end.13, !dbg !12461

cond.false.12:                                    ; preds = %cond.end
  br label %cond.end.13, !dbg !12466

cond.end.13:                                      ; preds = %cond.false.12, %cond.true.10
  %cond14 = phi i8* [ %23, %cond.true.10 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), %cond.false.12 ], !dbg !12461
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %13, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.173, i32 0, i32 0), i8* %cond, i8* %cond8, i8* %cond14), !dbg !12468
  store i32 0, i32* %retval, !dbg !12471
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.123, !dbg !12471

if.end.15:                                        ; preds = %if.then.2
  %24 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12472, !tbaa !3867
  %wide = getelementptr inbounds %struct.path_t, %struct.path_t* %24, i32 0, i32 4, !dbg !12473
  store i32* null, i32** %wide, align 8, !dbg !12474, !tbaa !5939
  %25 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12475, !tbaa !3867
  %narrow16 = getelementptr inbounds %struct.path_t, %struct.path_t* %25, i32 0, i32 5, !dbg !12476
  store i8* null, i8** %narrow16, align 8, !dbg !12477, !tbaa !5537
  %26 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12478, !tbaa !3867
  %length17 = getelementptr inbounds %struct.path_t, %struct.path_t* %26, i32 0, i32 7, !dbg !12479
  store i64 0, i64* %length17, align 8, !dbg !12480, !tbaa !12481
  %27 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !12482, !tbaa !3867
  %28 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12483, !tbaa !3867
  %object = getelementptr inbounds %struct.path_t, %struct.path_t* %28, i32 0, i32 8, !dbg !12484
  store %struct._object* %27, %struct._object** %object, align 8, !dbg !12485, !tbaa !6256
  %29 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12486, !tbaa !3867
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %29, i32 0, i32 6, !dbg !12487
  store i32 -1, i32* %fd, align 4, !dbg !12488, !tbaa !5529
  store i32 1, i32* %retval, !dbg !12489
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.123, !dbg !12489

if.end.18:                                        ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !12490, !tbaa !3867
  %call19 = call %struct._object* @PyUnicode_FromObject(%struct._object* %30), !dbg !12491
  store %struct._object* %call19, %struct._object** %unicode, align 8, !dbg !12492, !tbaa !3867
  %31 = load %struct._object*, %struct._object** %unicode, align 8, !dbg !12493, !tbaa !3867
  %tobool20 = icmp ne %struct._object* %31, null, !dbg !12493
  br i1 %tobool20, label %if.then.21, label %if.else.29, !dbg !12494

if.then.21:                                       ; preds = %if.end.18
  %32 = bitcast i32* %converted to i8*, !dbg !12495
  call void @llvm.lifetime.start(i64 4, i8* %32) #3, !dbg !12495
  call void @llvm.dbg.declare(metadata i32* %converted, metadata !790, metadata !3844), !dbg !12496
  %33 = load %struct._object*, %struct._object** %unicode, align 8, !dbg !12497, !tbaa !3867
  %34 = bitcast %struct._object** %bytes to i8*, !dbg !12498
  %call22 = call i32 @PyUnicode_FSConverter(%struct._object* %33, i8* %34), !dbg !12499
  store i32 %call22, i32* %converted, align 4, !dbg !12496, !tbaa !3840
  br label %do.body, !dbg !12500

do.body:                                          ; preds = %if.then.21
  %35 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12501
  call void @llvm.lifetime.start(i64 8, i8* %35) #3, !dbg !12501
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !793, metadata !3844), !dbg !12503
  %36 = load %struct._object*, %struct._object** %unicode, align 8, !dbg !12504, !tbaa !3867
  store %struct._object* %36, %struct._object** %_py_decref_tmp, align 8, !dbg !12503, !tbaa !3867
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12505, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0, !dbg !12507
  %38 = load i64, i64* %ob_refcnt, align 8, !dbg !12508, !tbaa !3977
  %dec = add i64 %38, -1, !dbg !12508
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !12508, !tbaa !3977
  %cmp23 = icmp ne i64 %dec, 0, !dbg !12509
  br i1 %cmp23, label %if.then.24, label %if.else, !dbg !12510

if.then.24:                                       ; preds = %do.body
  br label %if.end.25, !dbg !12511

if.else:                                          ; preds = %do.body
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12513, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1, !dbg !12515
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !12515, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4, !dbg !12516
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !12516, !tbaa !3986
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12517, !tbaa !3867
  call void %41(%struct._object* %42), !dbg !12518
  br label %if.end.25

if.end.25:                                        ; preds = %if.else, %if.then.24
  %43 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12519
  call void @llvm.lifetime.end(i64 8, i8* %43) #3, !dbg !12519
  br label %do.cond, !dbg !12521

do.cond:                                          ; preds = %if.end.25
  br label %do.end, !dbg !12522

do.end:                                           ; preds = %do.cond
  %44 = load i32, i32* %converted, align 4, !dbg !12524, !tbaa !3840
  %tobool26 = icmp ne i32 %44, 0, !dbg !12524
  br i1 %tobool26, label %if.end.28, label %if.then.27, !dbg !12526

if.then.27:                                       ; preds = %do.end
  store %struct._object* null, %struct._object** %bytes, align 8, !dbg !12527, !tbaa !3867
  br label %if.end.28, !dbg !12528

if.end.28:                                        ; preds = %if.then.27, %do.end
  %45 = bitcast i32* %converted to i8*, !dbg !12529
  call void @llvm.lifetime.end(i64 4, i8* %45) #3, !dbg !12529
  br label %if.end.57, !dbg !12530

if.else.29:                                       ; preds = %if.end.18
  call void @PyErr_Clear(), !dbg !12531
  %46 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !12532, !tbaa !3867
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1, !dbg !12534
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8, !dbg !12534, !tbaa !3892
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 18, !dbg !12535
  %48 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer, align 8, !dbg !12535, !tbaa !12536
  %cmp31 = icmp ne %struct.PyBufferProcs* %48, null, !dbg !12537
  br i1 %cmp31, label %land.lhs.true, label %if.else.37, !dbg !12538

land.lhs.true:                                    ; preds = %if.else.29
  %49 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !12539, !tbaa !3867
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1, !dbg !12541
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8, !dbg !12541, !tbaa !3892
  %tp_as_buffer33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 18, !dbg !12542
  %51 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer33, align 8, !dbg !12542, !tbaa !12536
  %bf_getbuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %51, i32 0, i32 0, !dbg !12543
  %52 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer, align 8, !dbg !12543, !tbaa !12544
  %cmp34 = icmp ne i32 (%struct._object*, %struct.bufferinfo*, i32)* %52, null, !dbg !12546
  br i1 %cmp34, label %if.then.35, label %if.else.37, !dbg !12547

if.then.35:                                       ; preds = %land.lhs.true
  %53 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !12548, !tbaa !3867
  %call36 = call %struct._object* @PyBytes_FromObject(%struct._object* %53), !dbg !12549
  store %struct._object* %call36, %struct._object** %bytes, align 8, !dbg !12550, !tbaa !3867
  br label %if.end.38, !dbg !12551

if.else.37:                                       ; preds = %land.lhs.true, %if.else.29
  store %struct._object* null, %struct._object** %bytes, align 8, !dbg !12552, !tbaa !3867
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.37, %if.then.35
  %54 = load %struct._object*, %struct._object** %bytes, align 8, !dbg !12553, !tbaa !3867
  %tobool39 = icmp ne %struct._object* %54, null, !dbg !12553
  br i1 %tobool39, label %if.end.56, label %if.then.40, !dbg !12554

if.then.40:                                       ; preds = %if.end.38
  call void @PyErr_Clear(), !dbg !12555
  %55 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12556, !tbaa !3867
  %allow_fd = getelementptr inbounds %struct.path_t, %struct.path_t* %55, i32 0, i32 3, !dbg !12557
  %56 = load i32, i32* %allow_fd, align 4, !dbg !12557, !tbaa !5516
  %tobool41 = icmp ne i32 %56, 0, !dbg !12556
  br i1 %tobool41, label %if.then.42, label %if.end.55, !dbg !12558

if.then.42:                                       ; preds = %if.then.40
  %57 = bitcast i32* %fd43 to i8*, !dbg !12559
  call void @llvm.lifetime.start(i64 4, i8* %57) #3, !dbg !12559
  call void @llvm.dbg.declare(metadata i32* %fd43, metadata !795, metadata !3844), !dbg !12560
  %58 = bitcast i32* %result to i8*, !dbg !12561
  call void @llvm.lifetime.start(i64 4, i8* %58) #3, !dbg !12561
  call void @llvm.dbg.declare(metadata i32* %result, metadata !801, metadata !3844), !dbg !12562
  %59 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !12563, !tbaa !3867
  %call44 = call i32 @_fd_converter(%struct._object* %59, i32* %fd43, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.175, i32 0, i32 0)), !dbg !12564
  store i32 %call44, i32* %result, align 4, !dbg !12562, !tbaa !3840
  %60 = load i32, i32* %result, align 4, !dbg !12565, !tbaa !3840
  %tobool45 = icmp ne i32 %60, 0, !dbg !12565
  br i1 %tobool45, label %if.then.46, label %if.end.52, !dbg !12567

if.then.46:                                       ; preds = %if.then.42
  %61 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12568, !tbaa !3867
  %wide47 = getelementptr inbounds %struct.path_t, %struct.path_t* %61, i32 0, i32 4, !dbg !12570
  store i32* null, i32** %wide47, align 8, !dbg !12571, !tbaa !5939
  %62 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12572, !tbaa !3867
  %narrow48 = getelementptr inbounds %struct.path_t, %struct.path_t* %62, i32 0, i32 5, !dbg !12573
  store i8* null, i8** %narrow48, align 8, !dbg !12574, !tbaa !5537
  %63 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12575, !tbaa !3867
  %length49 = getelementptr inbounds %struct.path_t, %struct.path_t* %63, i32 0, i32 7, !dbg !12576
  store i64 0, i64* %length49, align 8, !dbg !12577, !tbaa !12481
  %64 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !12578, !tbaa !3867
  %65 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12579, !tbaa !3867
  %object50 = getelementptr inbounds %struct.path_t, %struct.path_t* %65, i32 0, i32 8, !dbg !12580
  store %struct._object* %64, %struct._object** %object50, align 8, !dbg !12581, !tbaa !6256
  %66 = load i32, i32* %fd43, align 4, !dbg !12582, !tbaa !3840
  %67 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12583, !tbaa !3867
  %fd51 = getelementptr inbounds %struct.path_t, %struct.path_t* %67, i32 0, i32 6, !dbg !12584
  store i32 %66, i32* %fd51, align 4, !dbg !12585, !tbaa !5529
  %68 = load i32, i32* %result, align 4, !dbg !12586, !tbaa !3840
  store i32 %68, i32* %retval, !dbg !12587
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.53, !dbg !12587

if.end.52:                                        ; preds = %if.then.42
  store i32 0, i32* %cleanup.dest.slot, !dbg !12588
  br label %cleanup.53, !dbg !12588

cleanup.53:                                       ; preds = %if.end.52, %if.then.46
  %69 = bitcast i32* %result to i8*, !dbg !12589
  call void @llvm.lifetime.end(i64 4, i8* %69) #3, !dbg !12589
  %70 = bitcast i32* %fd43 to i8*, !dbg !12589
  call void @llvm.lifetime.end(i64 4, i8* %70) #3, !dbg !12589
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup.53
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.55, !dbg !12591

if.end.55:                                        ; preds = %cleanup.cont, %if.then.40
  br label %if.end.56, !dbg !12592

if.end.56:                                        ; preds = %if.end.55, %if.end.38
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %if.end.28
  %71 = load %struct._object*, %struct._object** %bytes, align 8, !dbg !12593, !tbaa !3867
  %tobool58 = icmp ne %struct._object* %71, null, !dbg !12593
  br i1 %tobool58, label %if.end.82, label %if.then.59, !dbg !12595

if.then.59:                                       ; preds = %if.end.57
  %call60 = call %struct._object* @PyErr_Occurred(), !dbg !12596
  %tobool61 = icmp ne %struct._object* %call60, null, !dbg !12596
  br i1 %tobool61, label %if.end.81, label %if.then.62, !dbg !12599

if.then.62:                                       ; preds = %if.then.59
  %72 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !12600, !tbaa !3867
  %73 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12601, !tbaa !3867
  %function_name63 = getelementptr inbounds %struct.path_t, %struct.path_t* %73, i32 0, i32 0, !dbg !12602
  %74 = load i8*, i8** %function_name63, align 8, !dbg !12602, !tbaa !5512
  %tobool64 = icmp ne i8* %74, null, !dbg !12601
  br i1 %tobool64, label %cond.true.65, label %cond.false.67, !dbg !12601

cond.true.65:                                     ; preds = %if.then.62
  %75 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12603, !tbaa !3867
  %function_name66 = getelementptr inbounds %struct.path_t, %struct.path_t* %75, i32 0, i32 0, !dbg !12605
  %76 = load i8*, i8** %function_name66, align 8, !dbg !12605, !tbaa !5512
  br label %cond.end.68, !dbg !12601

cond.false.67:                                    ; preds = %if.then.62
  br label %cond.end.68, !dbg !12606

cond.end.68:                                      ; preds = %cond.false.67, %cond.true.65
  %cond69 = phi i8* [ %76, %cond.true.65 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), %cond.false.67 ], !dbg !12601
  %77 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12608, !tbaa !3867
  %function_name70 = getelementptr inbounds %struct.path_t, %struct.path_t* %77, i32 0, i32 0, !dbg !12611
  %78 = load i8*, i8** %function_name70, align 8, !dbg !12611, !tbaa !5512
  %tobool71 = icmp ne i8* %78, null, !dbg !12612
  %cond72 = select i1 %tobool71, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.174, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), !dbg !12612
  %79 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12613, !tbaa !3867
  %argument_name73 = getelementptr inbounds %struct.path_t, %struct.path_t* %79, i32 0, i32 1, !dbg !12614
  %80 = load i8*, i8** %argument_name73, align 8, !dbg !12614, !tbaa !6390
  %tobool74 = icmp ne i8* %80, null, !dbg !12613
  br i1 %tobool74, label %cond.true.75, label %cond.false.77, !dbg !12613

cond.true.75:                                     ; preds = %cond.end.68
  %81 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12615, !tbaa !3867
  %argument_name76 = getelementptr inbounds %struct.path_t, %struct.path_t* %81, i32 0, i32 1, !dbg !12617
  %82 = load i8*, i8** %argument_name76, align 8, !dbg !12617, !tbaa !6390
  br label %cond.end.78, !dbg !12613

cond.false.77:                                    ; preds = %cond.end.68
  br label %cond.end.78, !dbg !12618

cond.end.78:                                      ; preds = %cond.false.77, %cond.true.75
  %cond79 = phi i8* [ %82, %cond.true.75 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), %cond.false.77 ], !dbg !12613
  %call80 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %72, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.176, i32 0, i32 0), i8* %cond69, i8* %cond72, i8* %cond79), !dbg !12620
  br label %if.end.81, !dbg !12620

if.end.81:                                        ; preds = %cond.end.78, %if.then.59
  store i32 0, i32* %retval, !dbg !12623
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.123, !dbg !12623

if.end.82:                                        ; preds = %if.end.57
  %83 = load %struct._object*, %struct._object** %bytes, align 8, !dbg !12624, !tbaa !3867
  %84 = bitcast %struct._object* %83 to %struct.PyVarObject*, !dbg !12625
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %84, i32 0, i32 1, !dbg !12626
  %85 = load i64, i64* %ob_size, align 8, !dbg !12626, !tbaa !11566
  store i64 %85, i64* %length, align 8, !dbg !12627, !tbaa !3904
  %86 = load %struct._object*, %struct._object** %bytes, align 8, !dbg !12628, !tbaa !3867
  %87 = bitcast %struct._object* %86 to %struct.PyBytesObject*, !dbg !12629
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %87, i32 0, i32 2, !dbg !12630
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !12631
  store i8* %arraydecay, i8** %narrow, align 8, !dbg !12632, !tbaa !3867
  %88 = load i64, i64* %length, align 8, !dbg !12633, !tbaa !3904
  %89 = load i8*, i8** %narrow, align 8, !dbg !12634, !tbaa !3867
  %call83 = call i64 @strlen(i8* %89) #11, !dbg !12635
  %cmp84 = icmp ne i64 %88, %call83, !dbg !12636
  br i1 %cmp84, label %if.then.85, label %if.end.116, !dbg !12637

if.then.85:                                       ; preds = %if.end.82
  %90 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !12638, !tbaa !3867
  %91 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12639, !tbaa !3867
  %function_name86 = getelementptr inbounds %struct.path_t, %struct.path_t* %91, i32 0, i32 0, !dbg !12640
  %92 = load i8*, i8** %function_name86, align 8, !dbg !12640, !tbaa !5512
  %tobool87 = icmp ne i8* %92, null, !dbg !12639
  br i1 %tobool87, label %cond.true.88, label %cond.false.90, !dbg !12639

cond.true.88:                                     ; preds = %if.then.85
  %93 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12641, !tbaa !3867
  %function_name89 = getelementptr inbounds %struct.path_t, %struct.path_t* %93, i32 0, i32 0, !dbg !12643
  %94 = load i8*, i8** %function_name89, align 8, !dbg !12643, !tbaa !5512
  br label %cond.end.91, !dbg !12639

cond.false.90:                                    ; preds = %if.then.85
  br label %cond.end.91, !dbg !12644

cond.end.91:                                      ; preds = %cond.false.90, %cond.true.88
  %cond92 = phi i8* [ %94, %cond.true.88 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), %cond.false.90 ], !dbg !12639
  %95 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12646, !tbaa !3867
  %function_name93 = getelementptr inbounds %struct.path_t, %struct.path_t* %95, i32 0, i32 0, !dbg !12649
  %96 = load i8*, i8** %function_name93, align 8, !dbg !12649, !tbaa !5512
  %tobool94 = icmp ne i8* %96, null, !dbg !12650
  %cond95 = select i1 %tobool94, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.174, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), !dbg !12650
  %97 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12651, !tbaa !3867
  %argument_name96 = getelementptr inbounds %struct.path_t, %struct.path_t* %97, i32 0, i32 1, !dbg !12652
  %98 = load i8*, i8** %argument_name96, align 8, !dbg !12652, !tbaa !6390
  %tobool97 = icmp ne i8* %98, null, !dbg !12651
  br i1 %tobool97, label %cond.true.98, label %cond.false.100, !dbg !12651

cond.true.98:                                     ; preds = %cond.end.91
  %99 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12653, !tbaa !3867
  %argument_name99 = getelementptr inbounds %struct.path_t, %struct.path_t* %99, i32 0, i32 1, !dbg !12655
  %100 = load i8*, i8** %argument_name99, align 8, !dbg !12655, !tbaa !6390
  br label %cond.end.101, !dbg !12651

cond.false.100:                                   ; preds = %cond.end.91
  br label %cond.end.101, !dbg !12656

cond.end.101:                                     ; preds = %cond.false.100, %cond.true.98
  %cond102 = phi i8* [ %100, %cond.true.98 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), %cond.false.100 ], !dbg !12651
  %call103 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %90, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.177, i32 0, i32 0), i8* %cond92, i8* %cond95, i8* %cond102), !dbg !12658
  br label %do.body.104, !dbg !12661

do.body.104:                                      ; preds = %cond.end.101
  %101 = bitcast %struct._object** %_py_decref_tmp105 to i8*, !dbg !12662
  call void @llvm.lifetime.start(i64 8, i8* %101) #3, !dbg !12662
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp105, metadata !802, metadata !3844), !dbg !12664
  %102 = load %struct._object*, %struct._object** %bytes, align 8, !dbg !12665, !tbaa !3867
  store %struct._object* %102, %struct._object** %_py_decref_tmp105, align 8, !dbg !12664, !tbaa !3867
  %103 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8, !dbg !12666, !tbaa !3867
  %ob_refcnt106 = getelementptr inbounds %struct._object, %struct._object* %103, i32 0, i32 0, !dbg !12668
  %104 = load i64, i64* %ob_refcnt106, align 8, !dbg !12669, !tbaa !3977
  %dec107 = add i64 %104, -1, !dbg !12669
  store i64 %dec107, i64* %ob_refcnt106, align 8, !dbg !12669, !tbaa !3977
  %cmp108 = icmp ne i64 %dec107, 0, !dbg !12670
  br i1 %cmp108, label %if.then.109, label %if.else.110, !dbg !12671

if.then.109:                                      ; preds = %do.body.104
  br label %if.end.113, !dbg !12672

if.else.110:                                      ; preds = %do.body.104
  %105 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8, !dbg !12674, !tbaa !3867
  %ob_type111 = getelementptr inbounds %struct._object, %struct._object* %105, i32 0, i32 1, !dbg !12676
  %106 = load %struct._typeobject*, %struct._typeobject** %ob_type111, align 8, !dbg !12676, !tbaa !3892
  %tp_dealloc112 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %106, i32 0, i32 4, !dbg !12677
  %107 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc112, align 8, !dbg !12677, !tbaa !3986
  %108 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8, !dbg !12678, !tbaa !3867
  call void %107(%struct._object* %108), !dbg !12679
  br label %if.end.113

if.end.113:                                       ; preds = %if.else.110, %if.then.109
  %109 = bitcast %struct._object** %_py_decref_tmp105 to i8*, !dbg !12680
  call void @llvm.lifetime.end(i64 8, i8* %109) #3, !dbg !12680
  br label %do.cond.114, !dbg !12682

do.cond.114:                                      ; preds = %if.end.113
  br label %do.end.115, !dbg !12683

do.end.115:                                       ; preds = %do.cond.114
  store i32 0, i32* %retval, !dbg !12685
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.123, !dbg !12685

if.end.116:                                       ; preds = %if.end.82
  %110 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12686, !tbaa !3867
  %wide117 = getelementptr inbounds %struct.path_t, %struct.path_t* %110, i32 0, i32 4, !dbg !12687
  store i32* null, i32** %wide117, align 8, !dbg !12688, !tbaa !5939
  %111 = load i8*, i8** %narrow, align 8, !dbg !12689, !tbaa !3867
  %112 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12690, !tbaa !3867
  %narrow118 = getelementptr inbounds %struct.path_t, %struct.path_t* %112, i32 0, i32 5, !dbg !12691
  store i8* %111, i8** %narrow118, align 8, !dbg !12692, !tbaa !5537
  %113 = load i64, i64* %length, align 8, !dbg !12693, !tbaa !3904
  %114 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12694, !tbaa !3867
  %length119 = getelementptr inbounds %struct.path_t, %struct.path_t* %114, i32 0, i32 7, !dbg !12695
  store i64 %113, i64* %length119, align 8, !dbg !12696, !tbaa !12481
  %115 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !12697, !tbaa !3867
  %116 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12698, !tbaa !3867
  %object120 = getelementptr inbounds %struct.path_t, %struct.path_t* %116, i32 0, i32 8, !dbg !12699
  store %struct._object* %115, %struct._object** %object120, align 8, !dbg !12700, !tbaa !6256
  %117 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12701, !tbaa !3867
  %fd121 = getelementptr inbounds %struct.path_t, %struct.path_t* %117, i32 0, i32 6, !dbg !12702
  store i32 -1, i32* %fd121, align 4, !dbg !12703, !tbaa !5529
  %118 = load %struct._object*, %struct._object** %bytes, align 8, !dbg !12704, !tbaa !3867
  %119 = load %struct.path_t*, %struct.path_t** %path, align 8, !dbg !12705, !tbaa !3867
  %cleanup122 = getelementptr inbounds %struct.path_t, %struct.path_t* %119, i32 0, i32 9, !dbg !12706
  store %struct._object* %118, %struct._object** %cleanup122, align 8, !dbg !12707, !tbaa !12437
  store i32 131072, i32* %retval, !dbg !12708
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.123, !dbg !12708

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.123

cleanup.123:                                      ; preds = %NewDefault, %if.end.116, %do.end.115, %if.end.81, %if.end.15, %cond.end.13, %if.then
  %120 = bitcast i8** %narrow to i8*, !dbg !12709
  call void @llvm.lifetime.end(i64 8, i8* %120) #3, !dbg !12709
  %121 = bitcast i64* %length to i8*, !dbg !12709
  call void @llvm.lifetime.end(i64 8, i8* %121) #3, !dbg !12709
  %122 = bitcast %struct._object** %bytes to i8*, !dbg !12709
  call void @llvm.lifetime.end(i64 8, i8* %122) #3, !dbg !12709
  %123 = bitcast %struct._object** %unicode to i8*, !dbg !12709
  call void @llvm.lifetime.end(i64 8, i8* %123) #3, !dbg !12709
  %124 = bitcast %struct.path_t** %path to i8*, !dbg !12709
  call void @llvm.lifetime.end(i64 8, i8* %124) #3, !dbg !12709
  %125 = load i32, i32* %retval, !dbg !12709
  ret i32 %125, !dbg !12709
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @os_stat_impl(%struct.PyModuleDef* %module, %struct.path_t* %path, i32 %dir_fd, i32 %follow_symlinks) #0 {
entry:
  %module.addr = alloca %struct.PyModuleDef*, align 8
  %path.addr = alloca %struct.path_t*, align 8
  %dir_fd.addr = alloca i32, align 4
  %follow_symlinks.addr = alloca i32, align 4
  store %struct.PyModuleDef* %module, %struct.PyModuleDef** %module.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.PyModuleDef** %module.addr, metadata !822, metadata !3844), !dbg !12710
  store %struct.path_t* %path, %struct.path_t** %path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.path_t** %path.addr, metadata !823, metadata !3844), !dbg !12711
  store i32 %dir_fd, i32* %dir_fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %dir_fd.addr, metadata !824, metadata !3844), !dbg !12712
  store i32 %follow_symlinks, i32* %follow_symlinks.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks.addr, metadata !825, metadata !3844), !dbg !12713
  %0 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12714, !tbaa !3867
  %1 = load i32, i32* %dir_fd.addr, align 4, !dbg !12715, !tbaa !3840
  %2 = load i32, i32* %follow_symlinks.addr, align 4, !dbg !12716, !tbaa !3840
  %call = call %struct._object* @posix_do_stat(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), %struct.path_t* %0, i32 %1, i32 %2), !dbg !12717
  ret %struct._object* %call, !dbg !12718
}

; Function Attrs: nounwind uwtable
define internal void @path_cleanup(%struct.path_t* %path) #0 {
entry:
  %path.addr = alloca %struct.path_t*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.path_t* %path, %struct.path_t** %path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.path_t** %path.addr, metadata !1055, metadata !3844), !dbg !12719
  %0 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12720, !tbaa !3867
  %cleanup = getelementptr inbounds %struct.path_t, %struct.path_t* %0, i32 0, i32 9, !dbg !12721
  %1 = load %struct._object*, %struct._object** %cleanup, align 8, !dbg !12721, !tbaa !12437
  %tobool = icmp ne %struct._object* %1, null, !dbg !12720
  br i1 %tobool, label %if.then, label %if.end.10, !dbg !12722

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !12723

do.body:                                          ; preds = %if.then
  %2 = bitcast %struct._object** %_py_tmp to i8*, !dbg !12724
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !12724
  call void @llvm.dbg.declare(metadata %struct._object** %_py_tmp, metadata !1056, metadata !3844), !dbg !12726
  %3 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12727, !tbaa !3867
  %cleanup1 = getelementptr inbounds %struct.path_t, %struct.path_t* %3, i32 0, i32 9, !dbg !12728
  %4 = load %struct._object*, %struct._object** %cleanup1, align 8, !dbg !12728, !tbaa !12437
  store %struct._object* %4, %struct._object** %_py_tmp, align 8, !dbg !12726, !tbaa !3867
  %5 = load %struct._object*, %struct._object** %_py_tmp, align 8, !dbg !12729, !tbaa !3867
  %cmp = icmp ne %struct._object* %5, null, !dbg !12730
  br i1 %cmp, label %if.then.2, label %if.end.7, !dbg !12731

if.then.2:                                        ; preds = %do.body
  %6 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12732, !tbaa !3867
  %cleanup3 = getelementptr inbounds %struct.path_t, %struct.path_t* %6, i32 0, i32 9, !dbg !12734
  store %struct._object* null, %struct._object** %cleanup3, align 8, !dbg !12735, !tbaa !12437
  br label %do.body.4, !dbg !12736

do.body.4:                                        ; preds = %if.then.2
  %7 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12737
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !12737
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1060, metadata !3844), !dbg !12739
  %8 = load %struct._object*, %struct._object** %_py_tmp, align 8, !dbg !12740, !tbaa !3867
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8, !dbg !12739, !tbaa !3867
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12741, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0, !dbg !12743
  %10 = load i64, i64* %ob_refcnt, align 8, !dbg !12744, !tbaa !3977
  %dec = add i64 %10, -1, !dbg !12744
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !12744, !tbaa !3977
  %cmp5 = icmp ne i64 %dec, 0, !dbg !12745
  br i1 %cmp5, label %if.then.6, label %if.else, !dbg !12746

if.then.6:                                        ; preds = %do.body.4
  br label %if.end, !dbg !12747

if.else:                                          ; preds = %do.body.4
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12749, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1, !dbg !12751
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !12751, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4, !dbg !12752
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !12752, !tbaa !3986
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12753, !tbaa !3867
  call void %13(%struct._object* %14), !dbg !12754
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.6
  %15 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12755
  call void @llvm.lifetime.end(i64 8, i8* %15) #3, !dbg !12755
  br label %do.cond, !dbg !12757

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !12758

do.end:                                           ; preds = %do.cond
  br label %if.end.7, !dbg !12760

if.end.7:                                         ; preds = %do.end, %do.body
  %16 = bitcast %struct._object** %_py_tmp to i8*, !dbg !12762
  call void @llvm.lifetime.end(i64 8, i8* %16) #3, !dbg !12762
  br label %do.end.9, !dbg !12765

do.end.9:                                         ; preds = %if.end.7
  br label %if.end.10, !dbg !12766

if.end.10:                                        ; preds = %do.end.9, %entry
  ret void, !dbg !12767
}

declare %struct._object* @PyUnicode_FromObject(%struct._object*) #2

declare i32 @PyUnicode_FSConverter(%struct._object*, i8*) #2

declare void @PyErr_Clear() #2

declare %struct._object* @PyBytes_FromObject(%struct._object*) #2

; Function Attrs: nounwind uwtable
define internal i32 @_fd_converter(%struct._object* %o, i32* %p, i8* %allowed) #0 {
entry:
  %retval = alloca i32, align 4
  %o.addr = alloca %struct._object*, align 8
  %p.addr = alloca i32*, align 8
  %allowed.addr = alloca i8*, align 8
  %overflow = alloca i32, align 4
  %long_value = alloca i64, align 8
  %index = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !810, metadata !3844), !dbg !12768
  store i32* %p, i32** %p.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i32** %p.addr, metadata !811, metadata !3844), !dbg !12769
  store i8* %allowed, i8** %allowed.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %allowed.addr, metadata !812, metadata !3844), !dbg !12770
  %0 = bitcast i32* %overflow to i8*, !dbg !12771
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !12771
  call void @llvm.dbg.declare(metadata i32* %overflow, metadata !813, metadata !3844), !dbg !12772
  %1 = bitcast i64* %long_value to i8*, !dbg !12773
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !12773
  call void @llvm.dbg.declare(metadata i64* %long_value, metadata !814, metadata !3844), !dbg !12774
  %2 = bitcast %struct._object** %index to i8*, !dbg !12775
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !12775
  call void @llvm.dbg.declare(metadata %struct._object** %index, metadata !815, metadata !3844), !dbg !12776
  %3 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !12777, !tbaa !3867
  %call = call %struct._object* @PyNumber_Index(%struct._object* %3), !dbg !12778
  store %struct._object* %call, %struct._object** %index, align 8, !dbg !12776, !tbaa !3867
  %4 = load %struct._object*, %struct._object** %index, align 8, !dbg !12779, !tbaa !3867
  %cmp = icmp eq %struct._object* %4, null, !dbg !12781
  br i1 %cmp, label %if.then, label %if.end, !dbg !12782

if.then:                                          ; preds = %entry
  %5 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !12783, !tbaa !3867
  %6 = load i8*, i8** %allowed.addr, align 8, !dbg !12785, !tbaa !3867
  %7 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !12786, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1, !dbg !12787
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !12787, !tbaa !3892
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 1, !dbg !12788
  %9 = load i8*, i8** %tp_name, align 8, !dbg !12788, !tbaa !3896
  %call1 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.178, i32 0, i32 0), i8* %6, i8* %9), !dbg !12789
  store i32 0, i32* %retval, !dbg !12790
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12790

if.end:                                           ; preds = %entry
  %10 = load %struct._object*, %struct._object** %index, align 8, !dbg !12791, !tbaa !3867
  %call2 = call i64 @PyLong_AsLongAndOverflow(%struct._object* %10, i32* %overflow), !dbg !12792
  store i64 %call2, i64* %long_value, align 8, !dbg !12793, !tbaa !3904
  br label %do.body, !dbg !12794

do.body:                                          ; preds = %if.end
  %11 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12795
  call void @llvm.lifetime.start(i64 8, i8* %11) #3, !dbg !12795
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !816, metadata !3844), !dbg !12797
  %12 = load %struct._object*, %struct._object** %index, align 8, !dbg !12798, !tbaa !3867
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8, !dbg !12797, !tbaa !3867
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12799, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0, !dbg !12801
  %14 = load i64, i64* %ob_refcnt, align 8, !dbg !12802, !tbaa !3977
  %dec = add i64 %14, -1, !dbg !12802
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !12802, !tbaa !3977
  %cmp3 = icmp ne i64 %dec, 0, !dbg !12803
  br i1 %cmp3, label %if.then.4, label %if.else, !dbg !12804

if.then.4:                                        ; preds = %do.body
  br label %if.end.6, !dbg !12805

if.else:                                          ; preds = %do.body
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12807, !tbaa !3867
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1, !dbg !12809
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8, !dbg !12809, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4, !dbg !12810
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !12810, !tbaa !3986
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12811, !tbaa !3867
  call void %17(%struct._object* %18), !dbg !12812
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.4
  %19 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12813
  call void @llvm.lifetime.end(i64 8, i8* %19) #3, !dbg !12813
  br label %do.cond, !dbg !12815

do.cond:                                          ; preds = %if.end.6
  br label %do.end, !dbg !12816

do.end:                                           ; preds = %do.cond
  %20 = load i32, i32* %overflow, align 4, !dbg !12818, !tbaa !3840
  %cmp7 = icmp sgt i32 %20, 0, !dbg !12820
  br i1 %cmp7, label %if.then.9, label %lor.lhs.false, !dbg !12821

lor.lhs.false:                                    ; preds = %do.end
  %21 = load i64, i64* %long_value, align 8, !dbg !12822, !tbaa !3904
  %cmp8 = icmp sgt i64 %21, 2147483647, !dbg !12824
  br i1 %cmp8, label %if.then.9, label %if.end.10, !dbg !12825

if.then.9:                                        ; preds = %lor.lhs.false, %do.end
  %22 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !12826, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %22, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.179, i32 0, i32 0)), !dbg !12828
  store i32 0, i32* %retval, !dbg !12829
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12829

if.end.10:                                        ; preds = %lor.lhs.false
  %23 = load i32, i32* %overflow, align 4, !dbg !12830, !tbaa !3840
  %cmp11 = icmp slt i32 %23, 0, !dbg !12832
  br i1 %cmp11, label %if.then.14, label %lor.lhs.false.12, !dbg !12833

lor.lhs.false.12:                                 ; preds = %if.end.10
  %24 = load i64, i64* %long_value, align 8, !dbg !12834, !tbaa !3904
  %cmp13 = icmp slt i64 %24, -2147483648, !dbg !12836
  br i1 %cmp13, label %if.then.14, label %if.end.15, !dbg !12837

if.then.14:                                       ; preds = %lor.lhs.false.12, %if.end.10
  %25 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !12838, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %25, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.180, i32 0, i32 0)), !dbg !12840
  store i32 0, i32* %retval, !dbg !12841
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12841

if.end.15:                                        ; preds = %lor.lhs.false.12
  %26 = load i64, i64* %long_value, align 8, !dbg !12842, !tbaa !3904
  %conv = trunc i64 %26 to i32, !dbg !12843
  %27 = load i32*, i32** %p.addr, align 8, !dbg !12844, !tbaa !3867
  store i32 %conv, i32* %27, align 4, !dbg !12845, !tbaa !3840
  store i32 1, i32* %retval, !dbg !12846
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12846

cleanup:                                          ; preds = %if.end.15, %if.then.14, %if.then.9, %if.then
  %28 = bitcast %struct._object** %index to i8*, !dbg !12847
  call void @llvm.lifetime.end(i64 8, i8* %28) #3, !dbg !12847
  %29 = bitcast i64* %long_value to i8*, !dbg !12847
  call void @llvm.lifetime.end(i64 8, i8* %29) #3, !dbg !12847
  %30 = bitcast i32* %overflow to i8*, !dbg !12847
  call void @llvm.lifetime.end(i64 4, i8* %30) #3, !dbg !12847
  %31 = load i32, i32* %retval, !dbg !12847
  ret i32 %31, !dbg !12847
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_do_stat(i8* %function_name, %struct.path_t* %path, i32 %dir_fd, i32 %follow_symlinks) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %function_name.addr = alloca i8*, align 8
  %path.addr = alloca %struct.path_t*, align 8
  %dir_fd.addr = alloca i32, align 4
  %follow_symlinks.addr = alloca i32, align 4
  %st = alloca %struct.stat, align 8
  %result = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store i8* %function_name, i8** %function_name.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %function_name.addr, metadata !830, metadata !3844), !dbg !12848
  store %struct.path_t* %path, %struct.path_t** %path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.path_t** %path.addr, metadata !831, metadata !3844), !dbg !12849
  store i32 %dir_fd, i32* %dir_fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %dir_fd.addr, metadata !832, metadata !3844), !dbg !12850
  store i32 %follow_symlinks, i32* %follow_symlinks.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks.addr, metadata !833, metadata !3844), !dbg !12851
  %0 = bitcast %struct.stat* %st to i8*, !dbg !12852
  call void @llvm.lifetime.start(i64 144, i8* %0) #3, !dbg !12852
  call void @llvm.dbg.declare(metadata %struct.stat* %st, metadata !834, metadata !3844), !dbg !12853
  %1 = bitcast i32* %result to i8*, !dbg !12854
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !12854
  call void @llvm.dbg.declare(metadata i32* %result, metadata !868, metadata !3844), !dbg !12855
  %2 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12856, !tbaa !3867
  %3 = load i32, i32* %dir_fd.addr, align 4, !dbg !12858, !tbaa !3840
  %call = call i32 @path_and_dir_fd_invalid(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), %struct.path_t* %2, i32 %3), !dbg !12859
  %tobool = icmp ne i32 %call, 0, !dbg !12859
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !12860

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* %dir_fd.addr, align 4, !dbg !12861, !tbaa !3840
  %5 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12862, !tbaa !3867
  %fd = getelementptr inbounds %struct.path_t, %struct.path_t* %5, i32 0, i32 6, !dbg !12863
  %6 = load i32, i32* %fd, align 4, !dbg !12863, !tbaa !5529
  %call1 = call i32 @dir_fd_and_fd_invalid(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), i32 %4, i32 %6), !dbg !12864
  %tobool2 = icmp ne i32 %call1, 0, !dbg !12864
  br i1 %tobool2, label %if.then, label %lor.lhs.false.3, !dbg !12865

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %7 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12866, !tbaa !3867
  %fd4 = getelementptr inbounds %struct.path_t, %struct.path_t* %7, i32 0, i32 6, !dbg !12867
  %8 = load i32, i32* %fd4, align 4, !dbg !12867, !tbaa !5529
  %9 = load i32, i32* %follow_symlinks.addr, align 4, !dbg !12868, !tbaa !3840
  %call5 = call i32 @fd_and_follow_symlinks_invalid(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), i32 %8, i32 %9), !dbg !12869
  %tobool6 = icmp ne i32 %call5, 0, !dbg !12869
  br i1 %tobool6, label %if.then, label %if.end, !dbg !12870

if.then:                                          ; preds = %lor.lhs.false.3, %lor.lhs.false, %entry
  store %struct._object* null, %struct._object** %retval, !dbg !12871
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12871

if.end:                                           ; preds = %lor.lhs.false.3
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !12872
  call void @llvm.lifetime.start(i64 8, i8* %10) #3, !dbg !12872
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !869, metadata !3844), !dbg !12873
  %call7 = call %struct._ts* @PyEval_SaveThread(), !dbg !12874
  store %struct._ts* %call7, %struct._ts** %_save, align 8, !dbg !12875, !tbaa !3867
  %11 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12876, !tbaa !3867
  %fd8 = getelementptr inbounds %struct.path_t, %struct.path_t* %11, i32 0, i32 6, !dbg !12878
  %12 = load i32, i32* %fd8, align 4, !dbg !12878, !tbaa !5529
  %cmp = icmp ne i32 %12, -1, !dbg !12879
  br i1 %cmp, label %if.then.9, label %if.else, !dbg !12880

if.then.9:                                        ; preds = %if.end
  %13 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12881, !tbaa !3867
  %fd10 = getelementptr inbounds %struct.path_t, %struct.path_t* %13, i32 0, i32 6, !dbg !12882
  %14 = load i32, i32* %fd10, align 4, !dbg !12882, !tbaa !5529
  %call11 = call i32 bitcast (i32 (i32, %struct.stat64*)* @fstat64 to i32 (i32, %struct.stat*)*)(i32 %14, %struct.stat* %st) #3, !dbg !12883
  store i32 %call11, i32* %result, align 4, !dbg !12884, !tbaa !3840
  br label %if.end.29, !dbg !12885

if.else:                                          ; preds = %if.end
  %15 = load i32, i32* %follow_symlinks.addr, align 4, !dbg !12886, !tbaa !3840
  %tobool12 = icmp ne i32 %15, 0, !dbg !12886
  br i1 %tobool12, label %if.else.16, label %land.lhs.true, !dbg !12888

land.lhs.true:                                    ; preds = %if.else
  %16 = load i32, i32* %dir_fd.addr, align 4, !dbg !12889, !tbaa !3840
  %cmp13 = icmp eq i32 %16, -100, !dbg !12891
  br i1 %cmp13, label %if.then.14, label %if.else.16, !dbg !12892

if.then.14:                                       ; preds = %land.lhs.true
  %17 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12893, !tbaa !3867
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %17, i32 0, i32 5, !dbg !12894
  %18 = load i8*, i8** %narrow, align 8, !dbg !12894, !tbaa !5537
  %call15 = call i32 bitcast (i32 (i8*, %struct.stat64*)* @lstat64 to i32 (i8*, %struct.stat*)*)(i8* %18, %struct.stat* %st) #3, !dbg !12895
  store i32 %call15, i32* %result, align 4, !dbg !12896, !tbaa !3840
  br label %if.end.28, !dbg !12897

if.else.16:                                       ; preds = %land.lhs.true, %if.else
  %19 = load i32, i32* %dir_fd.addr, align 4, !dbg !12898, !tbaa !3840
  %cmp17 = icmp ne i32 %19, -100, !dbg !12900
  br i1 %cmp17, label %if.then.20, label %lor.lhs.false.18, !dbg !12901

lor.lhs.false.18:                                 ; preds = %if.else.16
  %20 = load i32, i32* %follow_symlinks.addr, align 4, !dbg !12902, !tbaa !3840
  %tobool19 = icmp ne i32 %20, 0, !dbg !12902
  br i1 %tobool19, label %if.else.24, label %if.then.20, !dbg !12904

if.then.20:                                       ; preds = %lor.lhs.false.18, %if.else.16
  %21 = load i32, i32* %dir_fd.addr, align 4, !dbg !12905, !tbaa !3840
  %22 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12906, !tbaa !3867
  %narrow21 = getelementptr inbounds %struct.path_t, %struct.path_t* %22, i32 0, i32 5, !dbg !12907
  %23 = load i8*, i8** %narrow21, align 8, !dbg !12907, !tbaa !5537
  %24 = load i32, i32* %follow_symlinks.addr, align 4, !dbg !12908, !tbaa !3840
  %tobool22 = icmp ne i32 %24, 0, !dbg !12908
  %cond = select i1 %tobool22, i32 0, i32 256, !dbg !12908
  %call23 = call i32 bitcast (i32 (i32, i8*, %struct.stat64*, i32)* @fstatat64 to i32 (i32, i8*, %struct.stat*, i32)*)(i32 %21, i8* %23, %struct.stat* %st, i32 %cond) #3, !dbg !12909
  store i32 %call23, i32* %result, align 4, !dbg !12910, !tbaa !3840
  br label %if.end.27, !dbg !12911

if.else.24:                                       ; preds = %lor.lhs.false.18
  %25 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12912, !tbaa !3867
  %narrow25 = getelementptr inbounds %struct.path_t, %struct.path_t* %25, i32 0, i32 5, !dbg !12913
  %26 = load i8*, i8** %narrow25, align 8, !dbg !12913, !tbaa !5537
  %call26 = call i32 bitcast (i32 (i8*, %struct.stat64*)* @stat64 to i32 (i8*, %struct.stat*)*)(i8* %26, %struct.stat* %st) #3, !dbg !12914
  store i32 %call26, i32* %result, align 4, !dbg !12915, !tbaa !3840
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.24, %if.then.20
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.then.14
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.then.9
  %27 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !12916, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %27), !dbg !12917
  %28 = bitcast %struct._ts** %_save to i8*, !dbg !12918
  call void @llvm.lifetime.end(i64 8, i8* %28) #3, !dbg !12918
  %29 = load i32, i32* %result, align 4, !dbg !12919, !tbaa !3840
  %cmp30 = icmp ne i32 %29, 0, !dbg !12921
  br i1 %cmp30, label %if.then.31, label %if.end.33, !dbg !12922

if.then.31:                                       ; preds = %if.end.29
  %30 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12923, !tbaa !3867
  %call32 = call %struct._object* @path_error(%struct.path_t* %30), !dbg !12925
  store %struct._object* %call32, %struct._object** %retval, !dbg !12926
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12926

if.end.33:                                        ; preds = %if.end.29
  %call34 = call %struct._object* @_pystat_fromstructstat(%struct.stat* %st), !dbg !12927
  store %struct._object* %call34, %struct._object** %retval, !dbg !12928
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12928

cleanup:                                          ; preds = %if.end.33, %if.then.31, %if.then
  %31 = bitcast i32* %result to i8*, !dbg !12929
  call void @llvm.lifetime.end(i64 4, i8* %31) #3, !dbg !12929
  %32 = bitcast %struct.stat* %st to i8*, !dbg !12929
  call void @llvm.lifetime.end(i64 144, i8* %32) #3, !dbg !12929
  %33 = load %struct._object*, %struct._object** %retval, !dbg !12929
  ret %struct._object* %33, !dbg !12929
}

; Function Attrs: nounwind uwtable
define internal i32 @path_and_dir_fd_invalid(i8* %function_name, %struct.path_t* %path, i32 %dir_fd) #0 {
entry:
  %retval = alloca i32, align 4
  %function_name.addr = alloca i8*, align 8
  %path.addr = alloca %struct.path_t*, align 8
  %dir_fd.addr = alloca i32, align 4
  store i8* %function_name, i8** %function_name.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %function_name.addr, metadata !933, metadata !3844), !dbg !12930
  store %struct.path_t* %path, %struct.path_t** %path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.path_t** %path.addr, metadata !934, metadata !3844), !dbg !12931
  store i32 %dir_fd, i32* %dir_fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %dir_fd.addr, metadata !935, metadata !3844), !dbg !12932
  %0 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12933, !tbaa !3867
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %0, i32 0, i32 5, !dbg !12935
  %1 = load i8*, i8** %narrow, align 8, !dbg !12935, !tbaa !5537
  %tobool = icmp ne i8* %1, null, !dbg !12933
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !12936

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12937, !tbaa !3867
  %wide = getelementptr inbounds %struct.path_t, %struct.path_t* %2, i32 0, i32 4, !dbg !12939
  %3 = load i32*, i32** %wide, align 8, !dbg !12939, !tbaa !5939
  %tobool1 = icmp ne i32* %3, null, !dbg !12940
  br i1 %tobool1, label %if.end, label %land.lhs.true.2, !dbg !12941

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %4 = load i32, i32* %dir_fd.addr, align 4, !dbg !12942, !tbaa !3840
  %cmp = icmp ne i32 %4, -100, !dbg !12944
  br i1 %cmp, label %if.then, label %if.end, !dbg !12945

if.then:                                          ; preds = %land.lhs.true.2
  %5 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !12946, !tbaa !3867
  %6 = load i8*, i8** %function_name.addr, align 8, !dbg !12948, !tbaa !3867
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %5, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.181, i32 0, i32 0), i8* %6), !dbg !12949
  store i32 1, i32* %retval, !dbg !12950
  br label %return, !dbg !12950

if.end:                                           ; preds = %land.lhs.true.2, %land.lhs.true, %entry
  store i32 0, i32* %retval, !dbg !12951
  br label %return, !dbg !12951

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, !dbg !12952
  ret i32 %7, !dbg !12952
}

; Function Attrs: nounwind uwtable
define internal i32 @dir_fd_and_fd_invalid(i8* %function_name, i32 %dir_fd, i32 %fd) #0 {
entry:
  %retval = alloca i32, align 4
  %function_name.addr = alloca i8*, align 8
  %dir_fd.addr = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  store i8* %function_name, i8** %function_name.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %function_name.addr, metadata !940, metadata !3844), !dbg !12953
  store i32 %dir_fd, i32* %dir_fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %dir_fd.addr, metadata !941, metadata !3844), !dbg !12954
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !942, metadata !3844), !dbg !12955
  %0 = load i32, i32* %dir_fd.addr, align 4, !dbg !12956, !tbaa !3840
  %cmp = icmp ne i32 %0, -100, !dbg !12958
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !12959

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %fd.addr, align 4, !dbg !12960, !tbaa !3840
  %cmp1 = icmp ne i32 %1, -1, !dbg !12962
  br i1 %cmp1, label %if.then, label %if.end, !dbg !12963

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !12964, !tbaa !3867
  %3 = load i8*, i8** %function_name.addr, align 8, !dbg !12966, !tbaa !3867
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.182, i32 0, i32 0), i8* %3), !dbg !12967
  store i32 1, i32* %retval, !dbg !12968
  br label %return, !dbg !12968

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, !dbg !12969
  br label %return, !dbg !12969

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, !dbg !12970
  ret i32 %4, !dbg !12970
}

; Function Attrs: nounwind uwtable
define internal i32 @fd_and_follow_symlinks_invalid(i8* %function_name, i32 %fd, i32 %follow_symlinks) #0 {
entry:
  %retval = alloca i32, align 4
  %function_name.addr = alloca i8*, align 8
  %fd.addr = alloca i32, align 4
  %follow_symlinks.addr = alloca i32, align 4
  store i8* %function_name, i8** %function_name.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %function_name.addr, metadata !945, metadata !3844), !dbg !12971
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !946, metadata !3844), !dbg !12972
  store i32 %follow_symlinks, i32* %follow_symlinks.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks.addr, metadata !947, metadata !3844), !dbg !12973
  %0 = load i32, i32* %fd.addr, align 4, !dbg !12974, !tbaa !3840
  %cmp = icmp sgt i32 %0, 0, !dbg !12976
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !12977

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %follow_symlinks.addr, align 4, !dbg !12978, !tbaa !3840
  %tobool = icmp ne i32 %1, 0, !dbg !12978
  br i1 %tobool, label %if.end, label %if.then, !dbg !12980

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !12981, !tbaa !3867
  %3 = load i8*, i8** %function_name.addr, align 8, !dbg !12983, !tbaa !3867
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %2, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.183, i32 0, i32 0), i8* %3), !dbg !12984
  store i32 1, i32* %retval, !dbg !12985
  br label %return, !dbg !12985

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, !dbg !12986
  br label %return, !dbg !12986

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, !dbg !12987
  ret i32 %4, !dbg !12987
}

declare %struct._ts* @PyEval_SaveThread() #2

declare void @PyEval_RestoreThread(%struct._ts*) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @path_error(%struct.path_t* %path) #0 {
entry:
  %path.addr = alloca %struct.path_t*, align 8
  store %struct.path_t* %path, %struct.path_t** %path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.path_t** %path.addr, metadata !997, metadata !3844), !dbg !12988
  %0 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !12989, !tbaa !3867
  %1 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !12990, !tbaa !3867
  %object = getelementptr inbounds %struct.path_t, %struct.path_t* %1, i32 0, i32 8, !dbg !12991
  %2 = load %struct._object*, %struct._object** %object, align 8, !dbg !12991, !tbaa !6256
  %call = call %struct._object* @PyErr_SetFromErrnoWithFilenameObject(%struct._object* %0, %struct._object* %2), !dbg !12992
  ret %struct._object* %call, !dbg !12993
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pystat_fromstructstat(%struct.stat* %st) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %st.addr = alloca %struct.stat*, align 8
  %ansec = alloca i64, align 8
  %mnsec = alloca i64, align 8
  %cnsec = alloca i64, align 8
  %v = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.stat* %st, %struct.stat** %st.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.stat** %st.addr, metadata !1003, metadata !3844), !dbg !12994
  %0 = bitcast i64* %ansec to i8*, !dbg !12995
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !12995
  call void @llvm.dbg.declare(metadata i64* %ansec, metadata !1004, metadata !3844), !dbg !12996
  %1 = bitcast i64* %mnsec to i8*, !dbg !12995
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !12995
  call void @llvm.dbg.declare(metadata i64* %mnsec, metadata !1005, metadata !3844), !dbg !12997
  %2 = bitcast i64* %cnsec to i8*, !dbg !12995
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !12995
  call void @llvm.dbg.declare(metadata i64* %cnsec, metadata !1006, metadata !3844), !dbg !12998
  %3 = bitcast %struct._object** %v to i8*, !dbg !12999
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !12999
  call void @llvm.dbg.declare(metadata %struct._object** %v, metadata !1007, metadata !3844), !dbg !13000
  %call = call %struct._object* @PyStructSequence_New(%struct._typeobject* @StatResultType), !dbg !13001
  store %struct._object* %call, %struct._object** %v, align 8, !dbg !13000, !tbaa !3867
  %4 = load %struct._object*, %struct._object** %v, align 8, !dbg !13002, !tbaa !3867
  %cmp = icmp eq %struct._object* %4, null, !dbg !13004
  br i1 %cmp, label %if.then, label %if.end, !dbg !13005

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !13006
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13006

if.end:                                           ; preds = %entry
  %5 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13007, !tbaa !3867
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %5, i32 0, i32 3, !dbg !13008
  %6 = load i32, i32* %st_mode, align 4, !dbg !13008, !tbaa !13009
  %conv = zext i32 %6 to i64, !dbg !13011
  %call1 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !13012
  %7 = load %struct._object*, %struct._object** %v, align 8, !dbg !13013, !tbaa !3867
  %8 = bitcast %struct._object* %7 to %struct.PyTupleObject*, !dbg !13014
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %8, i32 0, i32 1, !dbg !13015
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !13016
  store %struct._object* %call1, %struct._object** %arrayidx, align 8, !dbg !13017, !tbaa !3867
  %9 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13018, !tbaa !3867
  %st_ino = getelementptr inbounds %struct.stat, %struct.stat* %9, i32 0, i32 1, !dbg !13019
  %10 = load i64, i64* %st_ino, align 8, !dbg !13019, !tbaa !13020
  %call2 = call %struct._object* @PyLong_FromLong(i64 %10), !dbg !13021
  %11 = load %struct._object*, %struct._object** %v, align 8, !dbg !13022, !tbaa !3867
  %12 = bitcast %struct._object* %11 to %struct.PyTupleObject*, !dbg !13023
  %ob_item3 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %12, i32 0, i32 1, !dbg !13024
  %arrayidx4 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item3, i32 0, i64 1, !dbg !13025
  store %struct._object* %call2, %struct._object** %arrayidx4, align 8, !dbg !13026, !tbaa !3867
  %13 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13027, !tbaa !3867
  %st_dev = getelementptr inbounds %struct.stat, %struct.stat* %13, i32 0, i32 0, !dbg !13028
  %14 = load i64, i64* %st_dev, align 8, !dbg !13028, !tbaa !13029
  %call5 = call %struct._object* @PyLong_FromLongLong(i64 %14), !dbg !13030
  %15 = load %struct._object*, %struct._object** %v, align 8, !dbg !13031, !tbaa !3867
  %16 = bitcast %struct._object* %15 to %struct.PyTupleObject*, !dbg !13032
  %ob_item6 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %16, i32 0, i32 1, !dbg !13033
  %arrayidx7 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item6, i32 0, i64 2, !dbg !13034
  store %struct._object* %call5, %struct._object** %arrayidx7, align 8, !dbg !13035, !tbaa !3867
  %17 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13036, !tbaa !3867
  %st_nlink = getelementptr inbounds %struct.stat, %struct.stat* %17, i32 0, i32 2, !dbg !13037
  %18 = load i64, i64* %st_nlink, align 8, !dbg !13037, !tbaa !13038
  %call8 = call %struct._object* @PyLong_FromLong(i64 %18), !dbg !13039
  %19 = load %struct._object*, %struct._object** %v, align 8, !dbg !13040, !tbaa !3867
  %20 = bitcast %struct._object* %19 to %struct.PyTupleObject*, !dbg !13041
  %ob_item9 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %20, i32 0, i32 1, !dbg !13042
  %arrayidx10 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item9, i32 0, i64 3, !dbg !13043
  store %struct._object* %call8, %struct._object** %arrayidx10, align 8, !dbg !13044, !tbaa !3867
  %21 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13045, !tbaa !3867
  %st_uid = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 4, !dbg !13046
  %22 = load i32, i32* %st_uid, align 4, !dbg !13046, !tbaa !13047
  %call11 = call %struct._object* @_PyLong_FromUid(i32 %22), !dbg !13048
  %23 = load %struct._object*, %struct._object** %v, align 8, !dbg !13049, !tbaa !3867
  %24 = bitcast %struct._object* %23 to %struct.PyTupleObject*, !dbg !13050
  %ob_item12 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %24, i32 0, i32 1, !dbg !13051
  %arrayidx13 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item12, i32 0, i64 4, !dbg !13052
  store %struct._object* %call11, %struct._object** %arrayidx13, align 8, !dbg !13053, !tbaa !3867
  %25 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13054, !tbaa !3867
  %st_gid = getelementptr inbounds %struct.stat, %struct.stat* %25, i32 0, i32 5, !dbg !13055
  %26 = load i32, i32* %st_gid, align 4, !dbg !13055, !tbaa !13056
  %call14 = call %struct._object* @_PyLong_FromGid(i32 %26), !dbg !13057
  %27 = load %struct._object*, %struct._object** %v, align 8, !dbg !13058, !tbaa !3867
  %28 = bitcast %struct._object* %27 to %struct.PyTupleObject*, !dbg !13059
  %ob_item15 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %28, i32 0, i32 1, !dbg !13060
  %arrayidx16 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item15, i32 0, i64 5, !dbg !13061
  store %struct._object* %call14, %struct._object** %arrayidx16, align 8, !dbg !13062, !tbaa !3867
  %29 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13063, !tbaa !3867
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %29, i32 0, i32 8, !dbg !13064
  %30 = load i64, i64* %st_size, align 8, !dbg !13064, !tbaa !13065
  %call17 = call %struct._object* @PyLong_FromLong(i64 %30), !dbg !13066
  %31 = load %struct._object*, %struct._object** %v, align 8, !dbg !13067, !tbaa !3867
  %32 = bitcast %struct._object* %31 to %struct.PyTupleObject*, !dbg !13068
  %ob_item18 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %32, i32 0, i32 1, !dbg !13069
  %arrayidx19 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item18, i32 0, i64 6, !dbg !13070
  store %struct._object* %call17, %struct._object** %arrayidx19, align 8, !dbg !13071, !tbaa !3867
  %33 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13072, !tbaa !3867
  %st_atim = getelementptr inbounds %struct.stat, %struct.stat* %33, i32 0, i32 11, !dbg !13073
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %st_atim, i32 0, i32 1, !dbg !13074
  %34 = load i64, i64* %tv_nsec, align 8, !dbg !13074, !tbaa !13075
  store i64 %34, i64* %ansec, align 8, !dbg !13076, !tbaa !3904
  %35 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13077, !tbaa !3867
  %st_mtim = getelementptr inbounds %struct.stat, %struct.stat* %35, i32 0, i32 12, !dbg !13078
  %tv_nsec20 = getelementptr inbounds %struct.timespec, %struct.timespec* %st_mtim, i32 0, i32 1, !dbg !13079
  %36 = load i64, i64* %tv_nsec20, align 8, !dbg !13079, !tbaa !13080
  store i64 %36, i64* %mnsec, align 8, !dbg !13081, !tbaa !3904
  %37 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13082, !tbaa !3867
  %st_ctim = getelementptr inbounds %struct.stat, %struct.stat* %37, i32 0, i32 13, !dbg !13083
  %tv_nsec21 = getelementptr inbounds %struct.timespec, %struct.timespec* %st_ctim, i32 0, i32 1, !dbg !13084
  %38 = load i64, i64* %tv_nsec21, align 8, !dbg !13084, !tbaa !13085
  store i64 %38, i64* %cnsec, align 8, !dbg !13086, !tbaa !3904
  %39 = load %struct._object*, %struct._object** %v, align 8, !dbg !13087, !tbaa !3867
  %40 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13088, !tbaa !3867
  %st_atim22 = getelementptr inbounds %struct.stat, %struct.stat* %40, i32 0, i32 11, !dbg !13089
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %st_atim22, i32 0, i32 0, !dbg !13090
  %41 = load i64, i64* %tv_sec, align 8, !dbg !13090, !tbaa !13091
  %42 = load i64, i64* %ansec, align 8, !dbg !13092, !tbaa !3904
  call void @fill_time(%struct._object* %39, i32 7, i64 %41, i64 %42), !dbg !13093
  %43 = load %struct._object*, %struct._object** %v, align 8, !dbg !13094, !tbaa !3867
  %44 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13095, !tbaa !3867
  %st_mtim23 = getelementptr inbounds %struct.stat, %struct.stat* %44, i32 0, i32 12, !dbg !13096
  %tv_sec24 = getelementptr inbounds %struct.timespec, %struct.timespec* %st_mtim23, i32 0, i32 0, !dbg !13097
  %45 = load i64, i64* %tv_sec24, align 8, !dbg !13097, !tbaa !13098
  %46 = load i64, i64* %mnsec, align 8, !dbg !13099, !tbaa !3904
  call void @fill_time(%struct._object* %43, i32 8, i64 %45, i64 %46), !dbg !13100
  %47 = load %struct._object*, %struct._object** %v, align 8, !dbg !13101, !tbaa !3867
  %48 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13102, !tbaa !3867
  %st_ctim25 = getelementptr inbounds %struct.stat, %struct.stat* %48, i32 0, i32 13, !dbg !13103
  %tv_sec26 = getelementptr inbounds %struct.timespec, %struct.timespec* %st_ctim25, i32 0, i32 0, !dbg !13104
  %49 = load i64, i64* %tv_sec26, align 8, !dbg !13104, !tbaa !13105
  %50 = load i64, i64* %cnsec, align 8, !dbg !13106, !tbaa !3904
  call void @fill_time(%struct._object* %47, i32 9, i64 %49, i64 %50), !dbg !13107
  %51 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13108, !tbaa !3867
  %st_blksize = getelementptr inbounds %struct.stat, %struct.stat* %51, i32 0, i32 9, !dbg !13109
  %52 = load i64, i64* %st_blksize, align 8, !dbg !13109, !tbaa !13110
  %call27 = call %struct._object* @PyLong_FromLong(i64 %52), !dbg !13111
  %53 = load %struct._object*, %struct._object** %v, align 8, !dbg !13112, !tbaa !3867
  %54 = bitcast %struct._object* %53 to %struct.PyTupleObject*, !dbg !13113
  %ob_item28 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %54, i32 0, i32 1, !dbg !13114
  %arrayidx29 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item28, i32 0, i64 16, !dbg !13115
  store %struct._object* %call27, %struct._object** %arrayidx29, align 8, !dbg !13116, !tbaa !3867
  %55 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13117, !tbaa !3867
  %st_blocks = getelementptr inbounds %struct.stat, %struct.stat* %55, i32 0, i32 10, !dbg !13118
  %56 = load i64, i64* %st_blocks, align 8, !dbg !13118, !tbaa !13119
  %call30 = call %struct._object* @PyLong_FromLong(i64 %56), !dbg !13120
  %57 = load %struct._object*, %struct._object** %v, align 8, !dbg !13121, !tbaa !3867
  %58 = bitcast %struct._object* %57 to %struct.PyTupleObject*, !dbg !13122
  %ob_item31 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %58, i32 0, i32 1, !dbg !13123
  %arrayidx32 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item31, i32 0, i64 17, !dbg !13124
  store %struct._object* %call30, %struct._object** %arrayidx32, align 8, !dbg !13125, !tbaa !3867
  %59 = load %struct.stat*, %struct.stat** %st.addr, align 8, !dbg !13126, !tbaa !3867
  %st_rdev = getelementptr inbounds %struct.stat, %struct.stat* %59, i32 0, i32 7, !dbg !13127
  %60 = load i64, i64* %st_rdev, align 8, !dbg !13127, !tbaa !13128
  %call33 = call %struct._object* @PyLong_FromLong(i64 %60), !dbg !13129
  %61 = load %struct._object*, %struct._object** %v, align 8, !dbg !13130, !tbaa !3867
  %62 = bitcast %struct._object* %61 to %struct.PyTupleObject*, !dbg !13131
  %ob_item34 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %62, i32 0, i32 1, !dbg !13132
  %arrayidx35 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item34, i32 0, i64 18, !dbg !13133
  store %struct._object* %call33, %struct._object** %arrayidx35, align 8, !dbg !13134, !tbaa !3867
  %call36 = call %struct._object* @PyErr_Occurred(), !dbg !13135
  %tobool = icmp ne %struct._object* %call36, null, !dbg !13135
  br i1 %tobool, label %if.then.37, label %if.end.42, !dbg !13136

if.then.37:                                       ; preds = %if.end
  br label %do.body, !dbg !13137

do.body:                                          ; preds = %if.then.37
  %63 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !13138
  call void @llvm.lifetime.start(i64 8, i8* %63) #3, !dbg !13138
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1008, metadata !3844), !dbg !13140
  %64 = load %struct._object*, %struct._object** %v, align 8, !dbg !13141, !tbaa !3867
  store %struct._object* %64, %struct._object** %_py_decref_tmp, align 8, !dbg !13140, !tbaa !3867
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13142, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 0, !dbg !13144
  %66 = load i64, i64* %ob_refcnt, align 8, !dbg !13145, !tbaa !3977
  %dec = add i64 %66, -1, !dbg !13145
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !13145, !tbaa !3977
  %cmp38 = icmp ne i64 %dec, 0, !dbg !13146
  br i1 %cmp38, label %if.then.40, label %if.else, !dbg !13147

if.then.40:                                       ; preds = %do.body
  br label %if.end.41, !dbg !13148

if.else:                                          ; preds = %do.body
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13150, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 1, !dbg !13152
  %68 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !13152, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %68, i32 0, i32 4, !dbg !13153
  %69 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !13153, !tbaa !3986
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13154, !tbaa !3867
  call void %69(%struct._object* %70), !dbg !13155
  br label %if.end.41

if.end.41:                                        ; preds = %if.else, %if.then.40
  %71 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !13156
  call void @llvm.lifetime.end(i64 8, i8* %71) #3, !dbg !13156
  br label %do.cond, !dbg !13158

do.cond:                                          ; preds = %if.end.41
  br label %do.end, !dbg !13159

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !13161
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13161

if.end.42:                                        ; preds = %if.end
  %72 = load %struct._object*, %struct._object** %v, align 8, !dbg !13162, !tbaa !3867
  store %struct._object* %72, %struct._object** %retval, !dbg !13163
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13163

cleanup:                                          ; preds = %if.end.42, %do.end, %if.then
  %73 = bitcast %struct._object** %v to i8*, !dbg !13164
  call void @llvm.lifetime.end(i64 8, i8* %73) #3, !dbg !13164
  %74 = bitcast i64* %cnsec to i8*, !dbg !13164
  call void @llvm.lifetime.end(i64 8, i8* %74) #3, !dbg !13164
  %75 = bitcast i64* %mnsec to i8*, !dbg !13164
  call void @llvm.lifetime.end(i64 8, i8* %75) #3, !dbg !13164
  %76 = bitcast i64* %ansec to i8*, !dbg !13164
  call void @llvm.lifetime.end(i64 8, i8* %76) #3, !dbg !13164
  %77 = load %struct._object*, %struct._object** %retval, !dbg !13164
  ret %struct._object* %77, !dbg !13164
}

; Function Attrs: inlinehint nounwind uwtable
define available_externally i32 @fstat64(i32 %__fd, %struct.stat64* nonnull %__statbuf) #6 {
entry:
  %__fd.addr = alloca i32, align 4
  %__statbuf.addr = alloca %struct.stat64*, align 8
  store i32 %__fd, i32* %__fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %__fd.addr, metadata !973, metadata !3844), !dbg !13165
  store %struct.stat64* %__statbuf, %struct.stat64** %__statbuf.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.stat64** %__statbuf.addr, metadata !974, metadata !3844), !dbg !13166
  %0 = load i32, i32* %__fd.addr, align 4, !dbg !13167, !tbaa !3840
  %1 = load %struct.stat64*, %struct.stat64** %__statbuf.addr, align 8, !dbg !13168, !tbaa !3867
  %call = call i32 @__fxstat64(i32 1, i32 %0, %struct.stat64* %1) #3, !dbg !13169
  ret i32 %call, !dbg !13170
}

; Function Attrs: nounwind
declare i32 @__fxstat64(i32, i32, %struct.stat64*) #4

; Function Attrs: inlinehint nounwind uwtable
define available_externally i32 @lstat64(i8* nonnull %__path, %struct.stat64* nonnull %__statbuf) #6 {
entry:
  %__path.addr = alloca i8*, align 8
  %__statbuf.addr = alloca %struct.stat64*, align 8
  store i8* %__path, i8** %__path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %__path.addr, metadata !979, metadata !3844), !dbg !13171
  store %struct.stat64* %__statbuf, %struct.stat64** %__statbuf.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.stat64** %__statbuf.addr, metadata !980, metadata !3844), !dbg !13172
  %0 = load i8*, i8** %__path.addr, align 8, !dbg !13173, !tbaa !3867
  %1 = load %struct.stat64*, %struct.stat64** %__statbuf.addr, align 8, !dbg !13174, !tbaa !3867
  %call = call i32 @__lxstat64(i32 1, i8* %0, %struct.stat64* %1) #3, !dbg !13175
  ret i32 %call, !dbg !13176
}

; Function Attrs: nounwind
declare i32 @__lxstat64(i32, i8*, %struct.stat64*) #4

; Function Attrs: inlinehint nounwind uwtable
define available_externally i32 @fstatat64(i32 %__fd, i8* nonnull %__filename, %struct.stat64* nonnull %__statbuf, i32 %__flag) #6 {
entry:
  %__fd.addr = alloca i32, align 4
  %__filename.addr = alloca i8*, align 8
  %__statbuf.addr = alloca %struct.stat64*, align 8
  %__flag.addr = alloca i32, align 4
  store i32 %__fd, i32* %__fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %__fd.addr, metadata !985, metadata !3844), !dbg !13177
  store i8* %__filename, i8** %__filename.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %__filename.addr, metadata !986, metadata !3844), !dbg !13178
  store %struct.stat64* %__statbuf, %struct.stat64** %__statbuf.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.stat64** %__statbuf.addr, metadata !987, metadata !3844), !dbg !13179
  store i32 %__flag, i32* %__flag.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %__flag.addr, metadata !988, metadata !3844), !dbg !13180
  %0 = load i32, i32* %__fd.addr, align 4, !dbg !13181, !tbaa !3840
  %1 = load i8*, i8** %__filename.addr, align 8, !dbg !13182, !tbaa !3867
  %2 = load %struct.stat64*, %struct.stat64** %__statbuf.addr, align 8, !dbg !13183, !tbaa !3867
  %3 = load i32, i32* %__flag.addr, align 4, !dbg !13184, !tbaa !3840
  %call = call i32 @__fxstatat64(i32 1, i32 %0, i8* %1, %struct.stat64* %2, i32 %3) #3, !dbg !13185
  ret i32 %call, !dbg !13186
}

; Function Attrs: nounwind
declare i32 @__fxstatat64(i32, i32, i8*, %struct.stat64*, i32) #4

; Function Attrs: inlinehint nounwind uwtable
define available_externally i32 @stat64(i8* nonnull %__path, %struct.stat64* nonnull %__statbuf) #6 {
entry:
  %__path.addr = alloca i8*, align 8
  %__statbuf.addr = alloca %struct.stat64*, align 8
  store i8* %__path, i8** %__path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %__path.addr, metadata !991, metadata !3844), !dbg !13187
  store %struct.stat64* %__statbuf, %struct.stat64** %__statbuf.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.stat64** %__statbuf.addr, metadata !992, metadata !3844), !dbg !13188
  %0 = load i8*, i8** %__path.addr, align 8, !dbg !13189, !tbaa !3867
  %1 = load %struct.stat64*, %struct.stat64** %__statbuf.addr, align 8, !dbg !13190, !tbaa !3867
  %call = call i32 @__xstat64(i32 1, i8* %0, %struct.stat64* %1) #3, !dbg !13191
  ret i32 %call, !dbg !13192
}

; Function Attrs: nounwind
declare i32 @__xstat64(i32, i8*, %struct.stat64*) #4

declare %struct._object* @PyErr_SetFromErrnoWithFilenameObject(%struct._object*, %struct._object*) #2

declare %struct._object* @PyStructSequence_New(%struct._typeobject*) #2

declare %struct._object* @PyLong_FromLongLong(i64) #2

; Function Attrs: nounwind uwtable
define internal void @fill_time(%struct._object* %v, i32 %index, i64 %sec, i64 %nsec) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %index.addr = alloca i32, align 4
  %sec.addr = alloca i64, align 8
  %nsec.addr = alloca i64, align 8
  %s = alloca %struct._object*, align 8
  %ns_fractional = alloca %struct._object*, align 8
  %s_in_ns = alloca %struct._object*, align 8
  %ns_total = alloca %struct._object*, align 8
  %float_s = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp40 = alloca %struct._object*, align 8
  %_py_decref_tmp45 = alloca %struct._object*, align 8
  %_py_xdecref_tmp61 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  %_py_xdecref_tmp82 = alloca %struct._object*, align 8
  %_py_decref_tmp87 = alloca %struct._object*, align 8
  %_py_xdecref_tmp103 = alloca %struct._object*, align 8
  %_py_decref_tmp108 = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !1017, metadata !3844), !dbg !13193
  store i32 %index, i32* %index.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !1018, metadata !3844), !dbg !13194
  store i64 %sec, i64* %sec.addr, align 8, !tbaa !3904
  call void @llvm.dbg.declare(metadata i64* %sec.addr, metadata !1019, metadata !3844), !dbg !13195
  store i64 %nsec, i64* %nsec.addr, align 8, !tbaa !3904
  call void @llvm.dbg.declare(metadata i64* %nsec.addr, metadata !1020, metadata !3844), !dbg !13196
  %0 = bitcast %struct._object** %s to i8*, !dbg !13197
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !13197
  call void @llvm.dbg.declare(metadata %struct._object** %s, metadata !1021, metadata !3844), !dbg !13198
  %1 = load i64, i64* %sec.addr, align 8, !dbg !13199, !tbaa !3904
  %call = call %struct._object* @_PyLong_FromTime_t(i64 %1), !dbg !13200
  store %struct._object* %call, %struct._object** %s, align 8, !dbg !13198, !tbaa !3867
  %2 = bitcast %struct._object** %ns_fractional to i8*, !dbg !13201
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !13201
  call void @llvm.dbg.declare(metadata %struct._object** %ns_fractional, metadata !1022, metadata !3844), !dbg !13202
  %3 = load i64, i64* %nsec.addr, align 8, !dbg !13203, !tbaa !3904
  %call1 = call %struct._object* @PyLong_FromUnsignedLong(i64 %3), !dbg !13204
  store %struct._object* %call1, %struct._object** %ns_fractional, align 8, !dbg !13202, !tbaa !3867
  %4 = bitcast %struct._object** %s_in_ns to i8*, !dbg !13205
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !13205
  call void @llvm.dbg.declare(metadata %struct._object** %s_in_ns, metadata !1023, metadata !3844), !dbg !13206
  store %struct._object* null, %struct._object** %s_in_ns, align 8, !dbg !13206, !tbaa !3867
  %5 = bitcast %struct._object** %ns_total to i8*, !dbg !13207
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !13207
  call void @llvm.dbg.declare(metadata %struct._object** %ns_total, metadata !1024, metadata !3844), !dbg !13208
  store %struct._object* null, %struct._object** %ns_total, align 8, !dbg !13208, !tbaa !3867
  %6 = bitcast %struct._object** %float_s to i8*, !dbg !13209
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !13209
  call void @llvm.dbg.declare(metadata %struct._object** %float_s, metadata !1025, metadata !3844), !dbg !13210
  store %struct._object* null, %struct._object** %float_s, align 8, !dbg !13210, !tbaa !3867
  %7 = load %struct._object*, %struct._object** %s, align 8, !dbg !13211, !tbaa !3867
  %tobool = icmp ne %struct._object* %7, null, !dbg !13211
  br i1 %tobool, label %land.lhs.true, label %if.then, !dbg !13213

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct._object*, %struct._object** %ns_fractional, align 8, !dbg !13214, !tbaa !3867
  %tobool2 = icmp ne %struct._object* %8, null, !dbg !13214
  br i1 %tobool2, label %if.end, label %if.then, !dbg !13216

if.then:                                          ; preds = %land.lhs.true, %entry
  br label %exit, !dbg !13217

if.end:                                           ; preds = %land.lhs.true
  %9 = load %struct._object*, %struct._object** %s, align 8, !dbg !13218, !tbaa !3867
  %10 = load %struct._object*, %struct._object** @billion, align 8, !dbg !13219, !tbaa !3867
  %call3 = call %struct._object* @PyNumber_Multiply(%struct._object* %9, %struct._object* %10), !dbg !13220
  store %struct._object* %call3, %struct._object** %s_in_ns, align 8, !dbg !13221, !tbaa !3867
  %11 = load %struct._object*, %struct._object** %s_in_ns, align 8, !dbg !13222, !tbaa !3867
  %tobool4 = icmp ne %struct._object* %11, null, !dbg !13222
  br i1 %tobool4, label %if.end.6, label %if.then.5, !dbg !13224

if.then.5:                                        ; preds = %if.end
  br label %exit, !dbg !13225

if.end.6:                                         ; preds = %if.end
  %12 = load %struct._object*, %struct._object** %s_in_ns, align 8, !dbg !13226, !tbaa !3867
  %13 = load %struct._object*, %struct._object** %ns_fractional, align 8, !dbg !13227, !tbaa !3867
  %call7 = call %struct._object* @PyNumber_Add(%struct._object* %12, %struct._object* %13), !dbg !13228
  store %struct._object* %call7, %struct._object** %ns_total, align 8, !dbg !13229, !tbaa !3867
  %14 = load %struct._object*, %struct._object** %ns_total, align 8, !dbg !13230, !tbaa !3867
  %tobool8 = icmp ne %struct._object* %14, null, !dbg !13230
  br i1 %tobool8, label %if.end.10, label %if.then.9, !dbg !13232

if.then.9:                                        ; preds = %if.end.6
  br label %exit, !dbg !13233

if.end.10:                                        ; preds = %if.end.6
  %15 = load i32, i32* @_stat_float_times, align 4, !dbg !13234, !tbaa !3840
  %tobool11 = icmp ne i32 %15, 0, !dbg !13234
  br i1 %tobool11, label %if.then.12, label %if.else, !dbg !13236

if.then.12:                                       ; preds = %if.end.10
  %16 = load i64, i64* %sec.addr, align 8, !dbg !13237, !tbaa !3904
  %conv = sitofp i64 %16 to double, !dbg !13237
  %17 = load i64, i64* %nsec.addr, align 8, !dbg !13239, !tbaa !3904
  %conv13 = uitofp i64 %17 to double, !dbg !13239
  %mul = fmul double 1.000000e-09, %conv13, !dbg !13240
  %add = fadd double %conv, %mul, !dbg !13241
  %call14 = call %struct._object* @PyFloat_FromDouble(double %add), !dbg !13242
  store %struct._object* %call14, %struct._object** %float_s, align 8, !dbg !13243, !tbaa !3867
  %18 = load %struct._object*, %struct._object** %float_s, align 8, !dbg !13244, !tbaa !3867
  %tobool15 = icmp ne %struct._object* %18, null, !dbg !13244
  br i1 %tobool15, label %if.end.17, label %if.then.16, !dbg !13246

if.then.16:                                       ; preds = %if.then.12
  br label %exit, !dbg !13247

if.end.17:                                        ; preds = %if.then.12
  br label %if.end.18, !dbg !13248

if.else:                                          ; preds = %if.end.10
  %19 = load %struct._object*, %struct._object** %s, align 8, !dbg !13249, !tbaa !3867
  store %struct._object* %19, %struct._object** %float_s, align 8, !dbg !13251, !tbaa !3867
  %20 = load %struct._object*, %struct._object** %float_s, align 8, !dbg !13252, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0, !dbg !13253
  %21 = load i64, i64* %ob_refcnt, align 8, !dbg !13254, !tbaa !3977
  %inc = add i64 %21, 1, !dbg !13254
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !13254, !tbaa !3977
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.end.17
  %22 = load %struct._object*, %struct._object** %s, align 8, !dbg !13255, !tbaa !3867
  %23 = load i32, i32* %index.addr, align 4, !dbg !13256, !tbaa !3840
  %idxprom = sext i32 %23 to i64, !dbg !13257
  %24 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !13258, !tbaa !3867
  %25 = bitcast %struct._object* %24 to %struct.PyTupleObject*, !dbg !13259
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %25, i32 0, i32 1, !dbg !13260
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %idxprom, !dbg !13257
  store %struct._object* %22, %struct._object** %arrayidx, align 8, !dbg !13261, !tbaa !3867
  %26 = load %struct._object*, %struct._object** %float_s, align 8, !dbg !13262, !tbaa !3867
  %27 = load i32, i32* %index.addr, align 4, !dbg !13263, !tbaa !3840
  %add19 = add i32 %27, 3, !dbg !13264
  %idxprom20 = sext i32 %add19 to i64, !dbg !13265
  %28 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !13266, !tbaa !3867
  %29 = bitcast %struct._object* %28 to %struct.PyTupleObject*, !dbg !13267
  %ob_item21 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %29, i32 0, i32 1, !dbg !13268
  %arrayidx22 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item21, i32 0, i64 %idxprom20, !dbg !13265
  store %struct._object* %26, %struct._object** %arrayidx22, align 8, !dbg !13269, !tbaa !3867
  %30 = load %struct._object*, %struct._object** %ns_total, align 8, !dbg !13270, !tbaa !3867
  %31 = load i32, i32* %index.addr, align 4, !dbg !13271, !tbaa !3840
  %add23 = add i32 %31, 6, !dbg !13272
  %idxprom24 = sext i32 %add23 to i64, !dbg !13273
  %32 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !13274, !tbaa !3867
  %33 = bitcast %struct._object* %32 to %struct.PyTupleObject*, !dbg !13275
  %ob_item25 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %33, i32 0, i32 1, !dbg !13276
  %arrayidx26 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item25, i32 0, i64 %idxprom24, !dbg !13273
  store %struct._object* %30, %struct._object** %arrayidx26, align 8, !dbg !13277, !tbaa !3867
  store %struct._object* null, %struct._object** %s, align 8, !dbg !13278, !tbaa !3867
  store %struct._object* null, %struct._object** %float_s, align 8, !dbg !13279, !tbaa !3867
  store %struct._object* null, %struct._object** %ns_total, align 8, !dbg !13280, !tbaa !3867
  br label %exit, !dbg !13281

exit:                                             ; preds = %if.end.18, %if.then.16, %if.then.9, %if.then.5, %if.then
  br label %do.body, !dbg !13282

do.body:                                          ; preds = %exit
  %34 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !13283
  call void @llvm.lifetime.start(i64 8, i8* %34) #3, !dbg !13283
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1026, metadata !3844), !dbg !13285
  %35 = load %struct._object*, %struct._object** %s, align 8, !dbg !13286, !tbaa !3867
  store %struct._object* %35, %struct._object** %_py_xdecref_tmp, align 8, !dbg !13285, !tbaa !3867
  %36 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !13287, !tbaa !3867
  %cmp = icmp ne %struct._object* %36, null, !dbg !13288
  br i1 %cmp, label %if.then.28, label %if.end.36, !dbg !13289

if.then.28:                                       ; preds = %do.body
  br label %do.body.29, !dbg !13290

do.body.29:                                       ; preds = %if.then.28
  %37 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !13292
  call void @llvm.lifetime.start(i64 8, i8* %37) #3, !dbg !13292
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1028, metadata !3844), !dbg !13294
  %38 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !13295, !tbaa !3867
  store %struct._object* %38, %struct._object** %_py_decref_tmp, align 8, !dbg !13294, !tbaa !3867
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13296, !tbaa !3867
  %ob_refcnt30 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0, !dbg !13298
  %40 = load i64, i64* %ob_refcnt30, align 8, !dbg !13299, !tbaa !3977
  %dec = add i64 %40, -1, !dbg !13299
  store i64 %dec, i64* %ob_refcnt30, align 8, !dbg !13299, !tbaa !3977
  %cmp31 = icmp ne i64 %dec, 0, !dbg !13300
  br i1 %cmp31, label %if.then.33, label %if.else.34, !dbg !13301

if.then.33:                                       ; preds = %do.body.29
  br label %if.end.35, !dbg !13302

if.else.34:                                       ; preds = %do.body.29
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13304, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1, !dbg !13306
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !13306, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4, !dbg !13307
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !13307, !tbaa !3986
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13308, !tbaa !3867
  call void %43(%struct._object* %44), !dbg !13309
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.34, %if.then.33
  %45 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !13310
  call void @llvm.lifetime.end(i64 8, i8* %45) #3, !dbg !13310
  br label %do.cond, !dbg !13312

do.cond:                                          ; preds = %if.end.35
  br label %do.end, !dbg !13313

do.end:                                           ; preds = %do.cond
  br label %if.end.36, !dbg !13315

if.end.36:                                        ; preds = %do.end, %do.body
  %46 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !13317
  call void @llvm.lifetime.end(i64 8, i8* %46) #3, !dbg !13317
  br label %do.cond.37, !dbg !13320

do.cond.37:                                       ; preds = %if.end.36
  br label %do.end.38, !dbg !13321

do.end.38:                                        ; preds = %do.cond.37
  br label %do.body.39, !dbg !13323

do.body.39:                                       ; preds = %do.end.38
  %47 = bitcast %struct._object** %_py_xdecref_tmp40 to i8*, !dbg !13324
  call void @llvm.lifetime.start(i64 8, i8* %47) #3, !dbg !13324
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp40, metadata !1031, metadata !3844), !dbg !13326
  %48 = load %struct._object*, %struct._object** %ns_fractional, align 8, !dbg !13327, !tbaa !3867
  store %struct._object* %48, %struct._object** %_py_xdecref_tmp40, align 8, !dbg !13326, !tbaa !3867
  %49 = load %struct._object*, %struct._object** %_py_xdecref_tmp40, align 8, !dbg !13328, !tbaa !3867
  %cmp41 = icmp ne %struct._object* %49, null, !dbg !13329
  br i1 %cmp41, label %if.then.43, label %if.end.57, !dbg !13330

if.then.43:                                       ; preds = %do.body.39
  br label %do.body.44, !dbg !13331

do.body.44:                                       ; preds = %if.then.43
  %50 = bitcast %struct._object** %_py_decref_tmp45 to i8*, !dbg !13333
  call void @llvm.lifetime.start(i64 8, i8* %50) #3, !dbg !13333
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp45, metadata !1033, metadata !3844), !dbg !13335
  %51 = load %struct._object*, %struct._object** %_py_xdecref_tmp40, align 8, !dbg !13336, !tbaa !3867
  store %struct._object* %51, %struct._object** %_py_decref_tmp45, align 8, !dbg !13335, !tbaa !3867
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8, !dbg !13337, !tbaa !3867
  %ob_refcnt46 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 0, !dbg !13339
  %53 = load i64, i64* %ob_refcnt46, align 8, !dbg !13340, !tbaa !3977
  %dec47 = add i64 %53, -1, !dbg !13340
  store i64 %dec47, i64* %ob_refcnt46, align 8, !dbg !13340, !tbaa !3977
  %cmp48 = icmp ne i64 %dec47, 0, !dbg !13341
  br i1 %cmp48, label %if.then.50, label %if.else.51, !dbg !13342

if.then.50:                                       ; preds = %do.body.44
  br label %if.end.54, !dbg !13343

if.else.51:                                       ; preds = %do.body.44
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8, !dbg !13345, !tbaa !3867
  %ob_type52 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 1, !dbg !13347
  %55 = load %struct._typeobject*, %struct._typeobject** %ob_type52, align 8, !dbg !13347, !tbaa !3892
  %tp_dealloc53 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 4, !dbg !13348
  %56 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc53, align 8, !dbg !13348, !tbaa !3986
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8, !dbg !13349, !tbaa !3867
  call void %56(%struct._object* %57), !dbg !13350
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.51, %if.then.50
  %58 = bitcast %struct._object** %_py_decref_tmp45 to i8*, !dbg !13351
  call void @llvm.lifetime.end(i64 8, i8* %58) #3, !dbg !13351
  br label %do.cond.55, !dbg !13353

do.cond.55:                                       ; preds = %if.end.54
  br label %do.end.56, !dbg !13354

do.end.56:                                        ; preds = %do.cond.55
  br label %if.end.57, !dbg !13356

if.end.57:                                        ; preds = %do.end.56, %do.body.39
  %59 = bitcast %struct._object** %_py_xdecref_tmp40 to i8*, !dbg !13358
  call void @llvm.lifetime.end(i64 8, i8* %59) #3, !dbg !13358
  br label %do.cond.58, !dbg !13359

do.cond.58:                                       ; preds = %if.end.57
  br label %do.end.59, !dbg !13360

do.end.59:                                        ; preds = %do.cond.58
  br label %do.body.60, !dbg !13362

do.body.60:                                       ; preds = %do.end.59
  %60 = bitcast %struct._object** %_py_xdecref_tmp61 to i8*, !dbg !13363
  call void @llvm.lifetime.start(i64 8, i8* %60) #3, !dbg !13363
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp61, metadata !1036, metadata !3844), !dbg !13365
  %61 = load %struct._object*, %struct._object** %s_in_ns, align 8, !dbg !13366, !tbaa !3867
  store %struct._object* %61, %struct._object** %_py_xdecref_tmp61, align 8, !dbg !13365, !tbaa !3867
  %62 = load %struct._object*, %struct._object** %_py_xdecref_tmp61, align 8, !dbg !13367, !tbaa !3867
  %cmp62 = icmp ne %struct._object* %62, null, !dbg !13368
  br i1 %cmp62, label %if.then.64, label %if.end.78, !dbg !13369

if.then.64:                                       ; preds = %do.body.60
  br label %do.body.65, !dbg !13370

do.body.65:                                       ; preds = %if.then.64
  %63 = bitcast %struct._object** %_py_decref_tmp66 to i8*, !dbg !13372
  call void @llvm.lifetime.start(i64 8, i8* %63) #3, !dbg !13372
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp66, metadata !1038, metadata !3844), !dbg !13374
  %64 = load %struct._object*, %struct._object** %_py_xdecref_tmp61, align 8, !dbg !13375, !tbaa !3867
  store %struct._object* %64, %struct._object** %_py_decref_tmp66, align 8, !dbg !13374, !tbaa !3867
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8, !dbg !13376, !tbaa !3867
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 0, !dbg !13378
  %66 = load i64, i64* %ob_refcnt67, align 8, !dbg !13379, !tbaa !3977
  %dec68 = add i64 %66, -1, !dbg !13379
  store i64 %dec68, i64* %ob_refcnt67, align 8, !dbg !13379, !tbaa !3977
  %cmp69 = icmp ne i64 %dec68, 0, !dbg !13380
  br i1 %cmp69, label %if.then.71, label %if.else.72, !dbg !13381

if.then.71:                                       ; preds = %do.body.65
  br label %if.end.75, !dbg !13382

if.else.72:                                       ; preds = %do.body.65
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8, !dbg !13384, !tbaa !3867
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 1, !dbg !13386
  %68 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8, !dbg !13386, !tbaa !3892
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %68, i32 0, i32 4, !dbg !13387
  %69 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8, !dbg !13387, !tbaa !3986
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8, !dbg !13388, !tbaa !3867
  call void %69(%struct._object* %70), !dbg !13389
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  %71 = bitcast %struct._object** %_py_decref_tmp66 to i8*, !dbg !13390
  call void @llvm.lifetime.end(i64 8, i8* %71) #3, !dbg !13390
  br label %do.cond.76, !dbg !13392

do.cond.76:                                       ; preds = %if.end.75
  br label %do.end.77, !dbg !13393

do.end.77:                                        ; preds = %do.cond.76
  br label %if.end.78, !dbg !13395

if.end.78:                                        ; preds = %do.end.77, %do.body.60
  %72 = bitcast %struct._object** %_py_xdecref_tmp61 to i8*, !dbg !13397
  call void @llvm.lifetime.end(i64 8, i8* %72) #3, !dbg !13397
  br label %do.cond.79, !dbg !13398

do.cond.79:                                       ; preds = %if.end.78
  br label %do.end.80, !dbg !13399

do.end.80:                                        ; preds = %do.cond.79
  br label %do.body.81, !dbg !13401

do.body.81:                                       ; preds = %do.end.80
  %73 = bitcast %struct._object** %_py_xdecref_tmp82 to i8*, !dbg !13402
  call void @llvm.lifetime.start(i64 8, i8* %73) #3, !dbg !13402
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp82, metadata !1041, metadata !3844), !dbg !13404
  %74 = load %struct._object*, %struct._object** %ns_total, align 8, !dbg !13405, !tbaa !3867
  store %struct._object* %74, %struct._object** %_py_xdecref_tmp82, align 8, !dbg !13404, !tbaa !3867
  %75 = load %struct._object*, %struct._object** %_py_xdecref_tmp82, align 8, !dbg !13406, !tbaa !3867
  %cmp83 = icmp ne %struct._object* %75, null, !dbg !13407
  br i1 %cmp83, label %if.then.85, label %if.end.99, !dbg !13408

if.then.85:                                       ; preds = %do.body.81
  br label %do.body.86, !dbg !13409

do.body.86:                                       ; preds = %if.then.85
  %76 = bitcast %struct._object** %_py_decref_tmp87 to i8*, !dbg !13411
  call void @llvm.lifetime.start(i64 8, i8* %76) #3, !dbg !13411
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp87, metadata !1043, metadata !3844), !dbg !13413
  %77 = load %struct._object*, %struct._object** %_py_xdecref_tmp82, align 8, !dbg !13414, !tbaa !3867
  store %struct._object* %77, %struct._object** %_py_decref_tmp87, align 8, !dbg !13413, !tbaa !3867
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp87, align 8, !dbg !13415, !tbaa !3867
  %ob_refcnt88 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 0, !dbg !13417
  %79 = load i64, i64* %ob_refcnt88, align 8, !dbg !13418, !tbaa !3977
  %dec89 = add i64 %79, -1, !dbg !13418
  store i64 %dec89, i64* %ob_refcnt88, align 8, !dbg !13418, !tbaa !3977
  %cmp90 = icmp ne i64 %dec89, 0, !dbg !13419
  br i1 %cmp90, label %if.then.92, label %if.else.93, !dbg !13420

if.then.92:                                       ; preds = %do.body.86
  br label %if.end.96, !dbg !13421

if.else.93:                                       ; preds = %do.body.86
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp87, align 8, !dbg !13423, !tbaa !3867
  %ob_type94 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 1, !dbg !13425
  %81 = load %struct._typeobject*, %struct._typeobject** %ob_type94, align 8, !dbg !13425, !tbaa !3892
  %tp_dealloc95 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %81, i32 0, i32 4, !dbg !13426
  %82 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc95, align 8, !dbg !13426, !tbaa !3986
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp87, align 8, !dbg !13427, !tbaa !3867
  call void %82(%struct._object* %83), !dbg !13428
  br label %if.end.96

if.end.96:                                        ; preds = %if.else.93, %if.then.92
  %84 = bitcast %struct._object** %_py_decref_tmp87 to i8*, !dbg !13429
  call void @llvm.lifetime.end(i64 8, i8* %84) #3, !dbg !13429
  br label %do.cond.97, !dbg !13431

do.cond.97:                                       ; preds = %if.end.96
  br label %do.end.98, !dbg !13432

do.end.98:                                        ; preds = %do.cond.97
  br label %if.end.99, !dbg !13434

if.end.99:                                        ; preds = %do.end.98, %do.body.81
  %85 = bitcast %struct._object** %_py_xdecref_tmp82 to i8*, !dbg !13436
  call void @llvm.lifetime.end(i64 8, i8* %85) #3, !dbg !13436
  br label %do.cond.100, !dbg !13437

do.cond.100:                                      ; preds = %if.end.99
  br label %do.end.101, !dbg !13438

do.end.101:                                       ; preds = %do.cond.100
  br label %do.body.102, !dbg !13440

do.body.102:                                      ; preds = %do.end.101
  %86 = bitcast %struct._object** %_py_xdecref_tmp103 to i8*, !dbg !13441
  call void @llvm.lifetime.start(i64 8, i8* %86) #3, !dbg !13441
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp103, metadata !1046, metadata !3844), !dbg !13443
  %87 = load %struct._object*, %struct._object** %float_s, align 8, !dbg !13444, !tbaa !3867
  store %struct._object* %87, %struct._object** %_py_xdecref_tmp103, align 8, !dbg !13443, !tbaa !3867
  %88 = load %struct._object*, %struct._object** %_py_xdecref_tmp103, align 8, !dbg !13445, !tbaa !3867
  %cmp104 = icmp ne %struct._object* %88, null, !dbg !13446
  br i1 %cmp104, label %if.then.106, label %if.end.120, !dbg !13447

if.then.106:                                      ; preds = %do.body.102
  br label %do.body.107, !dbg !13448

do.body.107:                                      ; preds = %if.then.106
  %89 = bitcast %struct._object** %_py_decref_tmp108 to i8*, !dbg !13450
  call void @llvm.lifetime.start(i64 8, i8* %89) #3, !dbg !13450
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp108, metadata !1048, metadata !3844), !dbg !13452
  %90 = load %struct._object*, %struct._object** %_py_xdecref_tmp103, align 8, !dbg !13453, !tbaa !3867
  store %struct._object* %90, %struct._object** %_py_decref_tmp108, align 8, !dbg !13452, !tbaa !3867
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp108, align 8, !dbg !13454, !tbaa !3867
  %ob_refcnt109 = getelementptr inbounds %struct._object, %struct._object* %91, i32 0, i32 0, !dbg !13456
  %92 = load i64, i64* %ob_refcnt109, align 8, !dbg !13457, !tbaa !3977
  %dec110 = add i64 %92, -1, !dbg !13457
  store i64 %dec110, i64* %ob_refcnt109, align 8, !dbg !13457, !tbaa !3977
  %cmp111 = icmp ne i64 %dec110, 0, !dbg !13458
  br i1 %cmp111, label %if.then.113, label %if.else.114, !dbg !13459

if.then.113:                                      ; preds = %do.body.107
  br label %if.end.117, !dbg !13460

if.else.114:                                      ; preds = %do.body.107
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp108, align 8, !dbg !13462, !tbaa !3867
  %ob_type115 = getelementptr inbounds %struct._object, %struct._object* %93, i32 0, i32 1, !dbg !13464
  %94 = load %struct._typeobject*, %struct._typeobject** %ob_type115, align 8, !dbg !13464, !tbaa !3892
  %tp_dealloc116 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %94, i32 0, i32 4, !dbg !13465
  %95 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc116, align 8, !dbg !13465, !tbaa !3986
  %96 = load %struct._object*, %struct._object** %_py_decref_tmp108, align 8, !dbg !13466, !tbaa !3867
  call void %95(%struct._object* %96), !dbg !13467
  br label %if.end.117

if.end.117:                                       ; preds = %if.else.114, %if.then.113
  %97 = bitcast %struct._object** %_py_decref_tmp108 to i8*, !dbg !13468
  call void @llvm.lifetime.end(i64 8, i8* %97) #3, !dbg !13468
  br label %do.cond.118, !dbg !13470

do.cond.118:                                      ; preds = %if.end.117
  br label %do.end.119, !dbg !13471

do.end.119:                                       ; preds = %do.cond.118
  br label %if.end.120, !dbg !13473

if.end.120:                                       ; preds = %do.end.119, %do.body.102
  %98 = bitcast %struct._object** %_py_xdecref_tmp103 to i8*, !dbg !13475
  call void @llvm.lifetime.end(i64 8, i8* %98) #3, !dbg !13475
  br label %do.cond.121, !dbg !13476

do.cond.121:                                      ; preds = %if.end.120
  br label %do.end.122, !dbg !13477

do.end.122:                                       ; preds = %do.cond.121
  %99 = bitcast %struct._object** %float_s to i8*, !dbg !13479
  call void @llvm.lifetime.end(i64 8, i8* %99) #3, !dbg !13479
  %100 = bitcast %struct._object** %ns_total to i8*, !dbg !13479
  call void @llvm.lifetime.end(i64 8, i8* %100) #3, !dbg !13479
  %101 = bitcast %struct._object** %s_in_ns to i8*, !dbg !13479
  call void @llvm.lifetime.end(i64 8, i8* %101) #3, !dbg !13479
  %102 = bitcast %struct._object** %ns_fractional to i8*, !dbg !13479
  call void @llvm.lifetime.end(i64 8, i8* %102) #3, !dbg !13479
  %103 = bitcast %struct._object** %s to i8*, !dbg !13479
  call void @llvm.lifetime.end(i64 8, i8* %103) #3, !dbg !13479
  ret void, !dbg !13479
}

declare %struct._object* @_PyLong_FromTime_t(i64) #2

declare %struct._object* @PyNumber_Multiply(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_Add(%struct._object*, %struct._object*) #2

declare %struct._object* @PyFloat_FromDouble(double) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @os_access_impl(%struct.PyModuleDef* %module, %struct.path_t* %path, i32 %mode, i32 %dir_fd, i32 %effective_ids, i32 %follow_symlinks) #0 {
entry:
  %module.addr = alloca %struct.PyModuleDef*, align 8
  %path.addr = alloca %struct.path_t*, align 8
  %mode.addr = alloca i32, align 4
  %dir_fd.addr = alloca i32, align 4
  %effective_ids.addr = alloca i32, align 4
  %follow_symlinks.addr = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %result = alloca i32, align 4
  %_save = alloca %struct._ts*, align 8
  %flags = alloca i32, align 4
  store %struct.PyModuleDef* %module, %struct.PyModuleDef** %module.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.PyModuleDef** %module.addr, metadata !1079, metadata !3844), !dbg !13480
  store %struct.path_t* %path, %struct.path_t** %path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.path_t** %path.addr, metadata !1080, metadata !3844), !dbg !13481
  store i32 %mode, i32* %mode.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !1081, metadata !3844), !dbg !13482
  store i32 %dir_fd, i32* %dir_fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %dir_fd.addr, metadata !1082, metadata !3844), !dbg !13483
  store i32 %effective_ids, i32* %effective_ids.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %effective_ids.addr, metadata !1083, metadata !3844), !dbg !13484
  store i32 %follow_symlinks, i32* %follow_symlinks.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks.addr, metadata !1084, metadata !3844), !dbg !13485
  %0 = bitcast %struct._object** %return_value to i8*, !dbg !13486
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !13486
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1085, metadata !3844), !dbg !13487
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !13487, !tbaa !3867
  %1 = bitcast i32* %result to i8*, !dbg !13488
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !13488
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1086, metadata !3844), !dbg !13489
  %2 = bitcast %struct._ts** %_save to i8*, !dbg !13490
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !13490
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1087, metadata !3844), !dbg !13491
  %call = call %struct._ts* @PyEval_SaveThread(), !dbg !13492
  store %struct._ts* %call, %struct._ts** %_save, align 8, !dbg !13493, !tbaa !3867
  %3 = load i32, i32* %dir_fd.addr, align 4, !dbg !13494, !tbaa !3840
  %cmp = icmp ne i32 %3, -100, !dbg !13495
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !13496

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* %effective_ids.addr, align 4, !dbg !13497, !tbaa !3840
  %tobool = icmp ne i32 %4, 0, !dbg !13497
  br i1 %tobool, label %if.then, label %lor.lhs.false.1, !dbg !13498

lor.lhs.false.1:                                  ; preds = %lor.lhs.false
  %5 = load i32, i32* %follow_symlinks.addr, align 4, !dbg !13499, !tbaa !3840
  %tobool2 = icmp ne i32 %5, 0, !dbg !13499
  br i1 %tobool2, label %if.else, label %if.then, !dbg !13500

if.then:                                          ; preds = %lor.lhs.false.1, %lor.lhs.false, %entry
  %6 = bitcast i32* %flags to i8*, !dbg !13501
  call void @llvm.lifetime.start(i64 4, i8* %6) #3, !dbg !13501
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1089, metadata !3844), !dbg !13502
  store i32 0, i32* %flags, align 4, !dbg !13502, !tbaa !3840
  %7 = load i32, i32* %follow_symlinks.addr, align 4, !dbg !13503, !tbaa !3840
  %tobool3 = icmp ne i32 %7, 0, !dbg !13503
  br i1 %tobool3, label %if.end, label %if.then.4, !dbg !13505

if.then.4:                                        ; preds = %if.then
  %8 = load i32, i32* %flags, align 4, !dbg !13506, !tbaa !3840
  %or = or i32 %8, 256, !dbg !13506
  store i32 %or, i32* %flags, align 4, !dbg !13506, !tbaa !3840
  br label %if.end, !dbg !13507

if.end:                                           ; preds = %if.then.4, %if.then
  %9 = load i32, i32* %effective_ids.addr, align 4, !dbg !13508, !tbaa !3840
  %tobool5 = icmp ne i32 %9, 0, !dbg !13508
  br i1 %tobool5, label %if.then.6, label %if.end.8, !dbg !13510

if.then.6:                                        ; preds = %if.end
  %10 = load i32, i32* %flags, align 4, !dbg !13511, !tbaa !3840
  %or7 = or i32 %10, 512, !dbg !13511
  store i32 %or7, i32* %flags, align 4, !dbg !13511, !tbaa !3840
  br label %if.end.8, !dbg !13512

if.end.8:                                         ; preds = %if.then.6, %if.end
  %11 = load i32, i32* %dir_fd.addr, align 4, !dbg !13513, !tbaa !3840
  %12 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !13514, !tbaa !3867
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %12, i32 0, i32 5, !dbg !13515
  %13 = load i8*, i8** %narrow, align 8, !dbg !13515, !tbaa !5537
  %14 = load i32, i32* %mode.addr, align 4, !dbg !13516, !tbaa !3840
  %15 = load i32, i32* %flags, align 4, !dbg !13517, !tbaa !3840
  %call9 = call i32 @faccessat(i32 %11, i8* %13, i32 %14, i32 %15) #3, !dbg !13518
  store i32 %call9, i32* %result, align 4, !dbg !13519, !tbaa !3840
  %16 = bitcast i32* %flags to i8*, !dbg !13520
  call void @llvm.lifetime.end(i64 4, i8* %16) #3, !dbg !13520
  br label %if.end.12, !dbg !13521

if.else:                                          ; preds = %lor.lhs.false.1
  %17 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !13522, !tbaa !3867
  %narrow10 = getelementptr inbounds %struct.path_t, %struct.path_t* %17, i32 0, i32 5, !dbg !13523
  %18 = load i8*, i8** %narrow10, align 8, !dbg !13523, !tbaa !5537
  %19 = load i32, i32* %mode.addr, align 4, !dbg !13524, !tbaa !3840
  %call11 = call i32 @access(i8* %18, i32 %19) #3, !dbg !13525
  store i32 %call11, i32* %result, align 4, !dbg !13526, !tbaa !3840
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.end.8
  %20 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !13527, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %20), !dbg !13528
  %21 = bitcast %struct._ts** %_save to i8*, !dbg !13529
  call void @llvm.lifetime.end(i64 8, i8* %21) #3, !dbg !13529
  %22 = load i32, i32* %result, align 4, !dbg !13530, !tbaa !3840
  %tobool13 = icmp ne i32 %22, 0, !dbg !13531
  %lnot = xor i1 %tobool13, true, !dbg !13531
  %lnot.ext = zext i1 %lnot to i32, !dbg !13531
  %conv = sext i32 %lnot.ext to i64, !dbg !13531
  %call14 = call %struct._object* @PyBool_FromLong(i64 %conv), !dbg !13532
  store %struct._object* %call14, %struct._object** %return_value, align 8, !dbg !13533, !tbaa !3867
  %23 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !13534, !tbaa !3867
  %24 = bitcast i32* %result to i8*, !dbg !13535
  call void @llvm.lifetime.end(i64 4, i8* %24) #3, !dbg !13535
  %25 = bitcast %struct._object** %return_value to i8*, !dbg !13535
  call void @llvm.lifetime.end(i64 8, i8* %25) #3, !dbg !13535
  ret %struct._object* %23, !dbg !13536
}

; Function Attrs: nounwind
declare i32 @faccessat(i32, i8*, i32, i32) #4

; Function Attrs: nounwind
declare i32 @access(i8*, i32) #4

declare %struct._object* @PyBool_FromLong(i64) #2

declare i32 @_PyArg_ParseTuple_SizeT(%struct._object*, i8*, ...) #2

; Function Attrs: nounwind uwtable
define internal i8* @os_ttyname_impl(%struct.PyModuleDef* %module, i32 %fd) #0 {
entry:
  %module.addr = alloca %struct.PyModuleDef*, align 8
  %fd.addr = alloca i32, align 4
  %ret = alloca i8*, align 8
  store %struct.PyModuleDef* %module, %struct.PyModuleDef** %module.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.PyModuleDef** %module.addr, metadata !1105, metadata !3844), !dbg !13537
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !1106, metadata !3844), !dbg !13538
  %0 = bitcast i8** %ret to i8*, !dbg !13539
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !13539
  call void @llvm.dbg.declare(metadata i8** %ret, metadata !1107, metadata !3844), !dbg !13540
  %1 = load i32, i32* %fd.addr, align 4, !dbg !13541, !tbaa !3840
  %call = call i8* @ttyname(i32 %1) #3, !dbg !13542
  store i8* %call, i8** %ret, align 8, !dbg !13543, !tbaa !3867
  %2 = load i8*, i8** %ret, align 8, !dbg !13544, !tbaa !3867
  %cmp = icmp eq i8* %2, null, !dbg !13546
  br i1 %cmp, label %if.then, label %if.end, !dbg !13547

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @posix_error(), !dbg !13548
  br label %if.end, !dbg !13548

if.end:                                           ; preds = %if.then, %entry
  %3 = load i8*, i8** %ret, align 8, !dbg !13549, !tbaa !3867
  %4 = bitcast i8** %ret to i8*, !dbg !13550
  call void @llvm.lifetime.end(i64 8, i8* %4) #3, !dbg !13550
  ret i8* %3, !dbg !13551
}

declare %struct._object* @PyUnicode_DecodeFSDefault(i8*) #2

; Function Attrs: nounwind
declare i8* @ttyname(i32) #4

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_error() #0 {
entry:
  %0 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !13552, !tbaa !3867
  %call = call %struct._object* @PyErr_SetFromErrno(%struct._object* %0), !dbg !13553
  ret %struct._object* %call, !dbg !13554
}

declare %struct._object* @PyErr_SetFromErrno(%struct._object*) #2

; Function Attrs: nounwind
declare i32 @fchdir(i32) #4

; Function Attrs: nounwind
declare i32 @chdir(i8*) #4

; Function Attrs: nounwind
declare i32 @fchmod(i32, i32) #4

; Function Attrs: nounwind
declare i32 @fchmodat(i32, i8*, i32, i32) #4

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #7

; Function Attrs: nounwind
declare i32 @chmod(i8*, i32) #4

; Function Attrs: nounwind
declare i32 @fchown(i32, i32, i32) #4

; Function Attrs: nounwind
declare i32 @lchown(i8*, i32, i32) #4

; Function Attrs: nounwind
declare i32 @fchownat(i32, i8*, i32, i32, i32) #4

; Function Attrs: nounwind
declare i32 @chown(i8*, i32, i32) #4

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_1str(i8* %func_name, %struct._object* %args, i8* %format, i32 (i8*)* %func) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %func_name.addr = alloca i8*, align 8
  %args.addr = alloca %struct._object*, align 8
  %format.addr = alloca i8*, align 8
  %func.addr = alloca i32 (i8*)*, align 8
  %path = alloca %struct.path_t, align 8
  %res = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store i8* %func_name, i8** %func_name.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %func_name.addr, metadata !1188, metadata !3844), !dbg !13555
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1189, metadata !3844), !dbg !13556
  store i8* %format, i8** %format.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !1190, metadata !3844), !dbg !13557
  store i32 (i8*)* %func, i32 (i8*)** %func.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i32 (i8*)** %func.addr, metadata !1191, metadata !3844), !dbg !13558
  %0 = bitcast %struct.path_t* %path to i8*, !dbg !13559
  call void @llvm.lifetime.start(i64 72, i8* %0) #3, !dbg !13559
  call void @llvm.dbg.declare(metadata %struct.path_t* %path, metadata !1192, metadata !3844), !dbg !13560
  %1 = bitcast i32* %res to i8*, !dbg !13561
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !13561
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1193, metadata !3844), !dbg !13562
  %2 = bitcast %struct.path_t* %path to i8*, !dbg !13563
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 72, i32 8, i1 false), !dbg !13563
  %3 = load i8*, i8** %func_name.addr, align 8, !dbg !13564, !tbaa !3867
  %function_name = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 0, !dbg !13565
  store i8* %3, i8** %function_name, align 8, !dbg !13566, !tbaa !5512
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !13567, !tbaa !3867
  %5 = load i8*, i8** %format.addr, align 8, !dbg !13569, !tbaa !3867
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* %5, i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %path), !dbg !13570
  %tobool = icmp ne i32 %call, 0, !dbg !13570
  br i1 %tobool, label %if.end, label %if.then, !dbg !13571

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !13572
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13572

if.end:                                           ; preds = %entry
  %6 = bitcast %struct._ts** %_save to i8*, !dbg !13573
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !13573
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1194, metadata !3844), !dbg !13574
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !13575
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !13576, !tbaa !3867
  %7 = load i32 (i8*)*, i32 (i8*)** %func.addr, align 8, !dbg !13577, !tbaa !3867
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %path, i32 0, i32 5, !dbg !13578
  %8 = load i8*, i8** %narrow, align 8, !dbg !13578, !tbaa !5537
  %call2 = call i32 %7(i8* %8), !dbg !13579
  store i32 %call2, i32* %res, align 4, !dbg !13580, !tbaa !3840
  %9 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !13581, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %9), !dbg !13582
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !13583
  call void @llvm.lifetime.end(i64 8, i8* %10) #3, !dbg !13583
  %11 = load i32, i32* %res, align 4, !dbg !13584, !tbaa !3840
  %cmp = icmp slt i32 %11, 0, !dbg !13586
  br i1 %cmp, label %if.then.3, label %if.end.5, !dbg !13587

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @path_error(%struct.path_t* %path), !dbg !13588
  call void @path_cleanup(%struct.path_t* %path), !dbg !13590
  store %struct._object* null, %struct._object** %retval, !dbg !13591
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13591

if.end.5:                                         ; preds = %if.end
  call void @path_cleanup(%struct.path_t* %path), !dbg !13592
  %12 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !13593, !tbaa !3977
  %inc = add i64 %12, 1, !dbg !13593
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !13593, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !13594
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13594

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %13 = bitcast i32* %res to i8*, !dbg !13595
  call void @llvm.lifetime.end(i64 4, i8* %13) #3, !dbg !13595
  %14 = bitcast %struct.path_t* %path to i8*, !dbg !13595
  call void @llvm.lifetime.end(i64 72, i8* %14) #3, !dbg !13595
  %15 = load %struct._object*, %struct._object** %retval, !dbg !13595
  ret %struct._object* %15, !dbg !13595
}

; Function Attrs: nounwind
declare i32 @chroot(i8*) #4

; Function Attrs: nounwind
declare i8* @ctermid(i8*) #4

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_getcwd(i32 %use_bytes) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %use_bytes.addr = alloca i32, align 4
  %buf = alloca [1026 x i8], align 16
  %res = alloca i8*, align 8
  %_save = alloca %struct._ts*, align 8
  %cleanup.dest.slot = alloca i32
  store i32 %use_bytes, i32* %use_bytes.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %use_bytes.addr, metadata !1212, metadata !3844), !dbg !13596
  %0 = bitcast [1026 x i8]* %buf to i8*, !dbg !13597
  call void @llvm.lifetime.start(i64 1026, i8* %0) #3, !dbg !13597
  call void @llvm.dbg.declare(metadata [1026 x i8]* %buf, metadata !1213, metadata !3844), !dbg !13598
  %1 = bitcast i8** %res to i8*, !dbg !13599
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !13599
  call void @llvm.dbg.declare(metadata i8** %res, metadata !1217, metadata !3844), !dbg !13600
  %2 = bitcast %struct._ts** %_save to i8*, !dbg !13601
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !13601
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1218, metadata !3844), !dbg !13602
  %call = call %struct._ts* @PyEval_SaveThread(), !dbg !13603
  store %struct._ts* %call, %struct._ts** %_save, align 8, !dbg !13604, !tbaa !3867
  %arraydecay = getelementptr inbounds [1026 x i8], [1026 x i8]* %buf, i32 0, i32 0, !dbg !13605
  %call1 = call i8* @getcwd(i8* %arraydecay, i64 1026) #3, !dbg !13606
  store i8* %call1, i8** %res, align 8, !dbg !13607, !tbaa !3867
  %3 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !13608, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %3), !dbg !13609
  %4 = bitcast %struct._ts** %_save to i8*, !dbg !13610
  call void @llvm.lifetime.end(i64 8, i8* %4) #3, !dbg !13610
  %5 = load i8*, i8** %res, align 8, !dbg !13611, !tbaa !3867
  %cmp = icmp eq i8* %5, null, !dbg !13613
  br i1 %cmp, label %if.then, label %if.end, !dbg !13614

if.then:                                          ; preds = %entry
  %call2 = call %struct._object* @posix_error(), !dbg !13615
  store %struct._object* %call2, %struct._object** %retval, !dbg !13616
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13616

if.end:                                           ; preds = %entry
  %6 = load i32, i32* %use_bytes.addr, align 4, !dbg !13617, !tbaa !3840
  %tobool = icmp ne i32 %6, 0, !dbg !13617
  br i1 %tobool, label %if.then.3, label %if.end.8, !dbg !13619

if.then.3:                                        ; preds = %if.end
  %arraydecay4 = getelementptr inbounds [1026 x i8], [1026 x i8]* %buf, i32 0, i32 0, !dbg !13620
  %arraydecay5 = getelementptr inbounds [1026 x i8], [1026 x i8]* %buf, i32 0, i32 0, !dbg !13621
  %call6 = call i64 @strlen(i8* %arraydecay5) #11, !dbg !13622
  %call7 = call %struct._object* @PyBytes_FromStringAndSize(i8* %arraydecay4, i64 %call6), !dbg !13623
  store %struct._object* %call7, %struct._object** %retval, !dbg !13624
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13624

if.end.8:                                         ; preds = %if.end
  %arraydecay9 = getelementptr inbounds [1026 x i8], [1026 x i8]* %buf, i32 0, i32 0, !dbg !13625
  %call10 = call %struct._object* @PyUnicode_DecodeFSDefault(i8* %arraydecay9), !dbg !13626
  store %struct._object* %call10, %struct._object** %retval, !dbg !13627
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13627

cleanup:                                          ; preds = %if.end.8, %if.then.3, %if.then
  %7 = bitcast i8** %res to i8*, !dbg !13628
  call void @llvm.lifetime.end(i64 8, i8* %7) #3, !dbg !13628
  %8 = bitcast [1026 x i8]* %buf to i8*, !dbg !13628
  call void @llvm.lifetime.end(i64 1026, i8* %8) #3, !dbg !13628
  %9 = load %struct._object*, %struct._object** %retval, !dbg !13628
  ret %struct._object* %9, !dbg !13628
}

; Function Attrs: nounwind
declare i8* @getcwd(i8*, i64) #4

declare %struct._object* @PyBytes_FromStringAndSize(i8*, i64) #2

; Function Attrs: nounwind
declare i32 @linkat(i32, i8*, i32, i8*, i32) #4

; Function Attrs: nounwind
declare i32 @link(i8*, i8*) #4

; Function Attrs: nounwind uwtable
define internal %struct._object* @path_error2(%struct.path_t* %path, %struct.path_t* %path2) #0 {
entry:
  %path.addr = alloca %struct.path_t*, align 8
  %path2.addr = alloca %struct.path_t*, align 8
  store %struct.path_t* %path, %struct.path_t** %path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.path_t** %path.addr, metadata !1241, metadata !3844), !dbg !13629
  store %struct.path_t* %path2, %struct.path_t** %path2.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.path_t** %path2.addr, metadata !1242, metadata !3844), !dbg !13630
  %0 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !13631, !tbaa !3867
  %1 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !13632, !tbaa !3867
  %object = getelementptr inbounds %struct.path_t, %struct.path_t* %1, i32 0, i32 8, !dbg !13633
  %2 = load %struct._object*, %struct._object** %object, align 8, !dbg !13633, !tbaa !6256
  %3 = load %struct.path_t*, %struct.path_t** %path2.addr, align 8, !dbg !13634, !tbaa !3867
  %object1 = getelementptr inbounds %struct.path_t, %struct.path_t* %3, i32 0, i32 8, !dbg !13635
  %4 = load %struct._object*, %struct._object** %object1, align 8, !dbg !13635, !tbaa !6256
  %call = call %struct._object* @PyErr_SetFromErrnoWithFilenameObjects(%struct._object* %0, %struct._object* %2, %struct._object* %4), !dbg !13636
  ret %struct._object* %call, !dbg !13637
}

declare %struct._object* @PyErr_SetFromErrnoWithFilenameObjects(%struct._object*, %struct._object*, %struct._object*) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @_posix_listdir(%struct.path_t* %path, %struct._object* %list) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %path.addr = alloca %struct.path_t*, align 8
  %list.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %dirp = alloca %struct.__dirstream*, align 8
  %ep = alloca %struct.dirent*, align 8
  %return_str = alloca i32, align 4
  %fd = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %name = alloca i8*, align 8
  %_save13 = alloca %struct._ts*, align 8
  %_save22 = alloca %struct._ts*, align 8
  %_save32 = alloca %struct._ts*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp91 = alloca %struct._object*, align 8
  %_py_decref_tmp112 = alloca %struct._object*, align 8
  %_py_tmp125 = alloca %struct._object*, align 8
  %_py_decref_tmp130 = alloca %struct._object*, align 8
  %_py_decref_tmp147 = alloca %struct._object*, align 8
  %_save162 = alloca %struct._ts*, align 8
  store %struct.path_t* %path, %struct.path_t** %path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.path_t** %path.addr, metadata !1255, metadata !3844), !dbg !13638
  store %struct._object* %list, %struct._object** %list.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %list.addr, metadata !1256, metadata !3844), !dbg !13639
  %0 = bitcast %struct._object** %v to i8*, !dbg !13640
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !13640
  call void @llvm.dbg.declare(metadata %struct._object** %v, metadata !1257, metadata !3844), !dbg !13641
  %1 = bitcast %struct.__dirstream** %dirp to i8*, !dbg !13642
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !13642
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %dirp, metadata !1258, metadata !3844), !dbg !13643
  store %struct.__dirstream* null, %struct.__dirstream** %dirp, align 8, !dbg !13643, !tbaa !3867
  %2 = bitcast %struct.dirent** %ep to i8*, !dbg !13644
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !13644
  call void @llvm.dbg.declare(metadata %struct.dirent** %ep, metadata !1263, metadata !3844), !dbg !13645
  %3 = bitcast i32* %return_str to i8*, !dbg !13646
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !13646
  call void @llvm.dbg.declare(metadata i32* %return_str, metadata !1277, metadata !3844), !dbg !13647
  %4 = bitcast i32* %fd to i8*, !dbg !13648
  call void @llvm.lifetime.start(i64 4, i8* %4) #3, !dbg !13648
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !1278, metadata !3844), !dbg !13649
  store i32 -1, i32* %fd, align 4, !dbg !13649, !tbaa !3840
  %call = call i32* @__errno_location() #1, !dbg !13650
  store i32 0, i32* %call, align 4, !dbg !13651, !tbaa !3840
  %5 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !13652, !tbaa !3867
  %fd1 = getelementptr inbounds %struct.path_t, %struct.path_t* %5, i32 0, i32 6, !dbg !13653
  %6 = load i32, i32* %fd1, align 4, !dbg !13653, !tbaa !5529
  %cmp = icmp ne i32 %6, -1, !dbg !13654
  br i1 %cmp, label %if.then, label %if.else, !dbg !13655

if.then:                                          ; preds = %entry
  %7 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !13656, !tbaa !3867
  %fd2 = getelementptr inbounds %struct.path_t, %struct.path_t* %7, i32 0, i32 6, !dbg !13657
  %8 = load i32, i32* %fd2, align 4, !dbg !13657, !tbaa !5529
  %call3 = call i32 @_Py_dup(i32 %8), !dbg !13658
  store i32 %call3, i32* %fd, align 4, !dbg !13659, !tbaa !3840
  %9 = load i32, i32* %fd, align 4, !dbg !13660, !tbaa !3840
  %cmp4 = icmp eq i32 %9, -1, !dbg !13662
  br i1 %cmp4, label %if.then.5, label %if.end, !dbg !13663

if.then.5:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval, !dbg !13664
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13664

if.end:                                           ; preds = %if.then
  store i32 1, i32* %return_str, align 4, !dbg !13665, !tbaa !3840
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !13666
  call void @llvm.lifetime.start(i64 8, i8* %10) #3, !dbg !13666
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1279, metadata !3844), !dbg !13667
  %call6 = call %struct._ts* @PyEval_SaveThread(), !dbg !13668
  store %struct._ts* %call6, %struct._ts** %_save, align 8, !dbg !13669, !tbaa !3867
  %11 = load i32, i32* %fd, align 4, !dbg !13670, !tbaa !3840
  %call7 = call %struct.__dirstream* @fdopendir(i32 %11), !dbg !13671
  store %struct.__dirstream* %call7, %struct.__dirstream** %dirp, align 8, !dbg !13672, !tbaa !3867
  %12 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !13673, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %12), !dbg !13674
  %13 = bitcast %struct._ts** %_save to i8*, !dbg !13675
  call void @llvm.lifetime.end(i64 8, i8* %13) #3, !dbg !13675
  br label %if.end.16, !dbg !13676

if.else:                                          ; preds = %entry
  %14 = bitcast i8** %name to i8*, !dbg !13677
  call void @llvm.lifetime.start(i64 8, i8* %14) #3, !dbg !13677
  call void @llvm.dbg.declare(metadata i8** %name, metadata !1283, metadata !3844), !dbg !13678
  %15 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !13679, !tbaa !3867
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %15, i32 0, i32 5, !dbg !13681
  %16 = load i8*, i8** %narrow, align 8, !dbg !13681, !tbaa !5537
  %tobool = icmp ne i8* %16, null, !dbg !13679
  br i1 %tobool, label %if.then.8, label %if.else.11, !dbg !13682

if.then.8:                                        ; preds = %if.else
  %17 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !13683, !tbaa !3867
  %narrow9 = getelementptr inbounds %struct.path_t, %struct.path_t* %17, i32 0, i32 5, !dbg !13685
  %18 = load i8*, i8** %narrow9, align 8, !dbg !13685, !tbaa !5537
  store i8* %18, i8** %name, align 8, !dbg !13686, !tbaa !3867
  %19 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !13687, !tbaa !3867
  %object = getelementptr inbounds %struct.path_t, %struct.path_t* %19, i32 0, i32 8, !dbg !13688
  %20 = load %struct._object*, %struct._object** %object, align 8, !dbg !13688, !tbaa !6256
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1, !dbg !13689
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !13689, !tbaa !3892
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 19, !dbg !13690
  %22 = load i64, i64* %tp_flags, align 8, !dbg !13690, !tbaa !6259
  %and = and i64 %22, 134217728, !dbg !13691
  %cmp10 = icmp ne i64 %and, 0, !dbg !13692
  %lnot = xor i1 %cmp10, true, !dbg !13693
  %lnot.ext = zext i1 %lnot to i32, !dbg !13693
  store i32 %lnot.ext, i32* %return_str, align 4, !dbg !13694, !tbaa !3840
  br label %if.end.12, !dbg !13695

if.else.11:                                       ; preds = %if.else
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.204, i32 0, i32 0), i8** %name, align 8, !dbg !13696, !tbaa !3867
  store i32 1, i32* %return_str, align 4, !dbg !13698, !tbaa !3840
  br label %if.end.12

if.end.12:                                        ; preds = %if.else.11, %if.then.8
  %23 = bitcast %struct._ts** %_save13 to i8*, !dbg !13699
  call void @llvm.lifetime.start(i64 8, i8* %23) #3, !dbg !13699
  call void @llvm.dbg.declare(metadata %struct._ts** %_save13, metadata !1285, metadata !3844), !dbg !13700
  %call14 = call %struct._ts* @PyEval_SaveThread(), !dbg !13701
  store %struct._ts* %call14, %struct._ts** %_save13, align 8, !dbg !13702, !tbaa !3867
  %24 = load i8*, i8** %name, align 8, !dbg !13703, !tbaa !3867
  %call15 = call %struct.__dirstream* @opendir(i8* %24), !dbg !13704
  store %struct.__dirstream* %call15, %struct.__dirstream** %dirp, align 8, !dbg !13705, !tbaa !3867
  %25 = load %struct._ts*, %struct._ts** %_save13, align 8, !dbg !13706, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %25), !dbg !13707
  %26 = bitcast %struct._ts** %_save13 to i8*, !dbg !13708
  call void @llvm.lifetime.end(i64 8, i8* %26) #3, !dbg !13708
  %27 = bitcast i8** %name to i8*, !dbg !13709
  call void @llvm.lifetime.end(i64 8, i8* %27) #3, !dbg !13709
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.12, %if.end
  %28 = load %struct.__dirstream*, %struct.__dirstream** %dirp, align 8, !dbg !13710, !tbaa !3867
  %cmp17 = icmp eq %struct.__dirstream* %28, null, !dbg !13711
  br i1 %cmp17, label %if.then.18, label %if.end.26, !dbg !13712

if.then.18:                                       ; preds = %if.end.16
  %29 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !13713, !tbaa !3867
  %call19 = call %struct._object* @path_error(%struct.path_t* %29), !dbg !13714
  store %struct._object* %call19, %struct._object** %list.addr, align 8, !dbg !13715, !tbaa !3867
  %30 = load i32, i32* %fd, align 4, !dbg !13716, !tbaa !3840
  %cmp20 = icmp ne i32 %30, -1, !dbg !13717
  br i1 %cmp20, label %if.then.21, label %if.end.25, !dbg !13718

if.then.21:                                       ; preds = %if.then.18
  %31 = bitcast %struct._ts** %_save22 to i8*, !dbg !13719
  call void @llvm.lifetime.start(i64 8, i8* %31) #3, !dbg !13719
  call void @llvm.dbg.declare(metadata %struct._ts** %_save22, metadata !1287, metadata !3844), !dbg !13720
  %call23 = call %struct._ts* @PyEval_SaveThread(), !dbg !13721
  store %struct._ts* %call23, %struct._ts** %_save22, align 8, !dbg !13722, !tbaa !3867
  %32 = load i32, i32* %fd, align 4, !dbg !13723, !tbaa !3840
  %call24 = call i32 @close(i32 %32), !dbg !13724
  %33 = load %struct._ts*, %struct._ts** %_save22, align 8, !dbg !13725, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %33), !dbg !13726
  %34 = bitcast %struct._ts** %_save22 to i8*, !dbg !13727
  call void @llvm.lifetime.end(i64 8, i8* %34) #3, !dbg !13727
  br label %if.end.25, !dbg !13728

if.end.25:                                        ; preds = %if.then.21, %if.then.18
  br label %exit, !dbg !13729

if.end.26:                                        ; preds = %if.end.16
  %call27 = call %struct._object* @PyList_New(i64 0), !dbg !13730
  store %struct._object* %call27, %struct._object** %list.addr, align 8, !dbg !13732, !tbaa !3867
  %cmp28 = icmp eq %struct._object* %call27, null, !dbg !13733
  br i1 %cmp28, label %if.then.29, label %if.end.30, !dbg !13734

if.then.29:                                       ; preds = %if.end.26
  br label %exit, !dbg !13735

if.end.30:                                        ; preds = %if.end.26
  br label %for.cond, !dbg !13737

for.cond:                                         ; preds = %do.end.158, %if.then.65, %if.end.30
  %call31 = call i32* @__errno_location() #1, !dbg !13738
  store i32 0, i32* %call31, align 4, !dbg !13739, !tbaa !3840
  %35 = bitcast %struct._ts** %_save32 to i8*, !dbg !13740
  call void @llvm.lifetime.start(i64 8, i8* %35) #3, !dbg !13740
  call void @llvm.dbg.declare(metadata %struct._ts** %_save32, metadata !1293, metadata !3844), !dbg !13741
  %call33 = call %struct._ts* @PyEval_SaveThread(), !dbg !13742
  store %struct._ts* %call33, %struct._ts** %_save32, align 8, !dbg !13743, !tbaa !3867
  %36 = load %struct.__dirstream*, %struct.__dirstream** %dirp, align 8, !dbg !13744, !tbaa !3867
  %call34 = call %struct.dirent* @readdir64(%struct.__dirstream* %36), !dbg !13745
  store %struct.dirent* %call34, %struct.dirent** %ep, align 8, !dbg !13746, !tbaa !3867
  %37 = load %struct._ts*, %struct._ts** %_save32, align 8, !dbg !13747, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %37), !dbg !13748
  %38 = bitcast %struct._ts** %_save32 to i8*, !dbg !13749
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !13749
  %39 = load %struct.dirent*, %struct.dirent** %ep, align 8, !dbg !13750, !tbaa !3867
  %cmp35 = icmp eq %struct.dirent* %39, null, !dbg !13751
  br i1 %cmp35, label %if.then.36, label %if.end.47, !dbg !13752

if.then.36:                                       ; preds = %for.cond
  %call37 = call i32* @__errno_location() #1, !dbg !13753
  %40 = load i32, i32* %call37, align 4, !dbg !13754, !tbaa !3840
  %cmp38 = icmp eq i32 %40, 0, !dbg !13755
  br i1 %cmp38, label %if.then.39, label %if.else.40, !dbg !13756

if.then.39:                                       ; preds = %if.then.36
  br label %for.end, !dbg !13757

if.else.40:                                       ; preds = %if.then.36
  br label %do.body, !dbg !13759

do.body:                                          ; preds = %if.else.40
  %41 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !13760
  call void @llvm.lifetime.start(i64 8, i8* %41) #3, !dbg !13760
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1298, metadata !3844), !dbg !13762
  %42 = load %struct._object*, %struct._object** %list.addr, align 8, !dbg !13763, !tbaa !3867
  store %struct._object* %42, %struct._object** %_py_decref_tmp, align 8, !dbg !13762, !tbaa !3867
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13764, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0, !dbg !13766
  %44 = load i64, i64* %ob_refcnt, align 8, !dbg !13767, !tbaa !3977
  %dec = add i64 %44, -1, !dbg !13767
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !13767, !tbaa !3977
  %cmp41 = icmp ne i64 %dec, 0, !dbg !13768
  br i1 %cmp41, label %if.then.42, label %if.else.43, !dbg !13769

if.then.42:                                       ; preds = %do.body
  br label %if.end.45, !dbg !13770

if.else.43:                                       ; preds = %do.body
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13772, !tbaa !3867
  %ob_type44 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1, !dbg !13774
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type44, align 8, !dbg !13774, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4, !dbg !13775
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !13775, !tbaa !3986
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13776, !tbaa !3867
  call void %47(%struct._object* %48), !dbg !13777
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.43, %if.then.42
  %49 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !13778
  call void @llvm.lifetime.end(i64 8, i8* %49) #3, !dbg !13778
  br label %do.cond, !dbg !13780

do.cond:                                          ; preds = %if.end.45
  br label %do.end, !dbg !13781

do.end:                                           ; preds = %do.cond
  %50 = load %struct.path_t*, %struct.path_t** %path.addr, align 8, !dbg !13783, !tbaa !3867
  %call46 = call %struct._object* @path_error(%struct.path_t* %50), !dbg !13784
  store %struct._object* %call46, %struct._object** %list.addr, align 8, !dbg !13785, !tbaa !3867
  br label %exit, !dbg !13786

if.end.47:                                        ; preds = %for.cond
  %51 = load %struct.dirent*, %struct.dirent** %ep, align 8, !dbg !13787, !tbaa !3867
  %d_name = getelementptr inbounds %struct.dirent, %struct.dirent* %51, i32 0, i32 4, !dbg !13789
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %d_name, i32 0, i64 0, !dbg !13787
  %52 = load i8, i8* %arrayidx, align 1, !dbg !13787, !tbaa !9169
  %conv = sext i8 %52 to i32, !dbg !13787
  %cmp48 = icmp eq i32 %conv, 46, !dbg !13790
  br i1 %cmp48, label %land.lhs.true, label %if.end.66, !dbg !13791

land.lhs.true:                                    ; preds = %if.end.47
  %53 = load %struct.dirent*, %struct.dirent** %ep, align 8, !dbg !13792, !tbaa !3867
  %d_name50 = getelementptr inbounds %struct.dirent, %struct.dirent* %53, i32 0, i32 4, !dbg !13793
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %d_name50, i32 0, i32 0, !dbg !13794
  %call51 = call i64 @strlen(i8* %arraydecay) #11, !dbg !13795
  %cmp52 = icmp eq i64 %call51, 1, !dbg !13796
  br i1 %cmp52, label %if.then.65, label %lor.lhs.false, !dbg !13797

lor.lhs.false:                                    ; preds = %land.lhs.true
  %54 = load %struct.dirent*, %struct.dirent** %ep, align 8, !dbg !13798, !tbaa !3867
  %d_name54 = getelementptr inbounds %struct.dirent, %struct.dirent* %54, i32 0, i32 4, !dbg !13799
  %arrayidx55 = getelementptr [256 x i8], [256 x i8]* %d_name54, i32 0, i64 1, !dbg !13798
  %55 = load i8, i8* %arrayidx55, align 1, !dbg !13798, !tbaa !9169
  %conv56 = sext i8 %55 to i32, !dbg !13798
  %cmp57 = icmp eq i32 %conv56, 46, !dbg !13800
  br i1 %cmp57, label %land.lhs.true.59, label %if.end.66, !dbg !13801

land.lhs.true.59:                                 ; preds = %lor.lhs.false
  %56 = load %struct.dirent*, %struct.dirent** %ep, align 8, !dbg !13802, !tbaa !3867
  %d_name60 = getelementptr inbounds %struct.dirent, %struct.dirent* %56, i32 0, i32 4, !dbg !13804
  %arraydecay61 = getelementptr inbounds [256 x i8], [256 x i8]* %d_name60, i32 0, i32 0, !dbg !13805
  %call62 = call i64 @strlen(i8* %arraydecay61) #11, !dbg !13806
  %cmp63 = icmp eq i64 %call62, 2, !dbg !13807
  br i1 %cmp63, label %if.then.65, label %if.end.66, !dbg !13808

if.then.65:                                       ; preds = %land.lhs.true.59, %land.lhs.true
  br label %for.cond, !dbg !13809

if.end.66:                                        ; preds = %land.lhs.true.59, %lor.lhs.false, %if.end.47
  %57 = load i32, i32* %return_str, align 4, !dbg !13810, !tbaa !3840
  %tobool67 = icmp ne i32 %57, 0, !dbg !13810
  br i1 %tobool67, label %if.then.68, label %if.else.75, !dbg !13812

if.then.68:                                       ; preds = %if.end.66
  %58 = load %struct.dirent*, %struct.dirent** %ep, align 8, !dbg !13813, !tbaa !3867
  %d_name69 = getelementptr inbounds %struct.dirent, %struct.dirent* %58, i32 0, i32 4, !dbg !13814
  %arraydecay70 = getelementptr inbounds [256 x i8], [256 x i8]* %d_name69, i32 0, i32 0, !dbg !13813
  %59 = load %struct.dirent*, %struct.dirent** %ep, align 8, !dbg !13815, !tbaa !3867
  %d_name71 = getelementptr inbounds %struct.dirent, %struct.dirent* %59, i32 0, i32 4, !dbg !13816
  %arraydecay72 = getelementptr inbounds [256 x i8], [256 x i8]* %d_name71, i32 0, i32 0, !dbg !13817
  %call73 = call i64 @strlen(i8* %arraydecay72) #11, !dbg !13818
  %call74 = call %struct._object* @PyUnicode_DecodeFSDefaultAndSize(i8* %arraydecay70, i64 %call73), !dbg !13819
  store %struct._object* %call74, %struct._object** %v, align 8, !dbg !13820, !tbaa !3867
  br label %if.end.82, !dbg !13821

if.else.75:                                       ; preds = %if.end.66
  %60 = load %struct.dirent*, %struct.dirent** %ep, align 8, !dbg !13822, !tbaa !3867
  %d_name76 = getelementptr inbounds %struct.dirent, %struct.dirent* %60, i32 0, i32 4, !dbg !13823
  %arraydecay77 = getelementptr inbounds [256 x i8], [256 x i8]* %d_name76, i32 0, i32 0, !dbg !13822
  %61 = load %struct.dirent*, %struct.dirent** %ep, align 8, !dbg !13824, !tbaa !3867
  %d_name78 = getelementptr inbounds %struct.dirent, %struct.dirent* %61, i32 0, i32 4, !dbg !13825
  %arraydecay79 = getelementptr inbounds [256 x i8], [256 x i8]* %d_name78, i32 0, i32 0, !dbg !13826
  %call80 = call i64 @strlen(i8* %arraydecay79) #11, !dbg !13827
  %call81 = call %struct._object* @PyBytes_FromStringAndSize(i8* %arraydecay77, i64 %call80), !dbg !13828
  store %struct._object* %call81, %struct._object** %v, align 8, !dbg !13829, !tbaa !3867
  br label %if.end.82

if.end.82:                                        ; preds = %if.else.75, %if.then.68
  %62 = load %struct._object*, %struct._object** %v, align 8, !dbg !13830, !tbaa !3867
  %cmp83 = icmp eq %struct._object* %62, null, !dbg !13831
  br i1 %cmp83, label %if.then.85, label %if.end.106, !dbg !13832

if.then.85:                                       ; preds = %if.end.82
  br label %do.body.86, !dbg !13833

do.body.86:                                       ; preds = %if.then.85
  %63 = bitcast %struct._object** %_py_tmp to i8*, !dbg !13834
  call void @llvm.lifetime.start(i64 8, i8* %63) #3, !dbg !13834
  call void @llvm.dbg.declare(metadata %struct._object** %_py_tmp, metadata !1304, metadata !3844), !dbg !13836
  %64 = load %struct._object*, %struct._object** %list.addr, align 8, !dbg !13837, !tbaa !3867
  store %struct._object* %64, %struct._object** %_py_tmp, align 8, !dbg !13836, !tbaa !3867
  %65 = load %struct._object*, %struct._object** %_py_tmp, align 8, !dbg !13838, !tbaa !3867
  %cmp87 = icmp ne %struct._object* %65, null, !dbg !13839
  br i1 %cmp87, label %if.then.89, label %if.end.103, !dbg !13840

if.then.89:                                       ; preds = %do.body.86
  store %struct._object* null, %struct._object** %list.addr, align 8, !dbg !13841, !tbaa !3867
  br label %do.body.90, !dbg !13843

do.body.90:                                       ; preds = %if.then.89
  %66 = bitcast %struct._object** %_py_decref_tmp91 to i8*, !dbg !13844
  call void @llvm.lifetime.start(i64 8, i8* %66) #3, !dbg !13844
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp91, metadata !1308, metadata !3844), !dbg !13846
  %67 = load %struct._object*, %struct._object** %_py_tmp, align 8, !dbg !13847, !tbaa !3867
  store %struct._object* %67, %struct._object** %_py_decref_tmp91, align 8, !dbg !13846, !tbaa !3867
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp91, align 8, !dbg !13848, !tbaa !3867
  %ob_refcnt92 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 0, !dbg !13850
  %69 = load i64, i64* %ob_refcnt92, align 8, !dbg !13851, !tbaa !3977
  %dec93 = add i64 %69, -1, !dbg !13851
  store i64 %dec93, i64* %ob_refcnt92, align 8, !dbg !13851, !tbaa !3977
  %cmp94 = icmp ne i64 %dec93, 0, !dbg !13852
  br i1 %cmp94, label %if.then.96, label %if.else.97, !dbg !13853

if.then.96:                                       ; preds = %do.body.90
  br label %if.end.100, !dbg !13854

if.else.97:                                       ; preds = %do.body.90
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp91, align 8, !dbg !13856, !tbaa !3867
  %ob_type98 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1, !dbg !13858
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type98, align 8, !dbg !13858, !tbaa !3892
  %tp_dealloc99 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 4, !dbg !13859
  %72 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc99, align 8, !dbg !13859, !tbaa !3986
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp91, align 8, !dbg !13860, !tbaa !3867
  call void %72(%struct._object* %73), !dbg !13861
  br label %if.end.100

if.end.100:                                       ; preds = %if.else.97, %if.then.96
  %74 = bitcast %struct._object** %_py_decref_tmp91 to i8*, !dbg !13862
  call void @llvm.lifetime.end(i64 8, i8* %74) #3, !dbg !13862
  br label %do.cond.101, !dbg !13864

do.cond.101:                                      ; preds = %if.end.100
  br label %do.end.102, !dbg !13865

do.end.102:                                       ; preds = %do.cond.101
  br label %if.end.103, !dbg !13867

if.end.103:                                       ; preds = %do.end.102, %do.body.86
  %75 = bitcast %struct._object** %_py_tmp to i8*, !dbg !13869
  call void @llvm.lifetime.end(i64 8, i8* %75) #3, !dbg !13869
  br label %do.cond.104, !dbg !13872

do.cond.104:                                      ; preds = %if.end.103
  br label %do.end.105, !dbg !13873

do.end.105:                                       ; preds = %do.cond.104
  br label %for.end, !dbg !13875

if.end.106:                                       ; preds = %if.end.82
  %76 = load %struct._object*, %struct._object** %list.addr, align 8, !dbg !13876, !tbaa !3867
  %77 = load %struct._object*, %struct._object** %v, align 8, !dbg !13877, !tbaa !3867
  %call107 = call i32 @PyList_Append(%struct._object* %76, %struct._object* %77), !dbg !13878
  %cmp108 = icmp ne i32 %call107, 0, !dbg !13879
  br i1 %cmp108, label %if.then.110, label %if.end.145, !dbg !13880

if.then.110:                                      ; preds = %if.end.106
  br label %do.body.111, !dbg !13881

do.body.111:                                      ; preds = %if.then.110
  %78 = bitcast %struct._object** %_py_decref_tmp112 to i8*, !dbg !13882
  call void @llvm.lifetime.start(i64 8, i8* %78) #3, !dbg !13882
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp112, metadata !1312, metadata !3844), !dbg !13884
  %79 = load %struct._object*, %struct._object** %v, align 8, !dbg !13885, !tbaa !3867
  store %struct._object* %79, %struct._object** %_py_decref_tmp112, align 8, !dbg !13884, !tbaa !3867
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp112, align 8, !dbg !13886, !tbaa !3867
  %ob_refcnt113 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 0, !dbg !13888
  %81 = load i64, i64* %ob_refcnt113, align 8, !dbg !13889, !tbaa !3977
  %dec114 = add i64 %81, -1, !dbg !13889
  store i64 %dec114, i64* %ob_refcnt113, align 8, !dbg !13889, !tbaa !3977
  %cmp115 = icmp ne i64 %dec114, 0, !dbg !13890
  br i1 %cmp115, label %if.then.117, label %if.else.118, !dbg !13891

if.then.117:                                      ; preds = %do.body.111
  br label %if.end.121, !dbg !13892

if.else.118:                                      ; preds = %do.body.111
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp112, align 8, !dbg !13894, !tbaa !3867
  %ob_type119 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 1, !dbg !13896
  %83 = load %struct._typeobject*, %struct._typeobject** %ob_type119, align 8, !dbg !13896, !tbaa !3892
  %tp_dealloc120 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %83, i32 0, i32 4, !dbg !13897
  %84 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc120, align 8, !dbg !13897, !tbaa !3986
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp112, align 8, !dbg !13898, !tbaa !3867
  call void %84(%struct._object* %85), !dbg !13899
  br label %if.end.121

if.end.121:                                       ; preds = %if.else.118, %if.then.117
  %86 = bitcast %struct._object** %_py_decref_tmp112 to i8*, !dbg !13900
  call void @llvm.lifetime.end(i64 8, i8* %86) #3, !dbg !13900
  br label %do.cond.122, !dbg !13902

do.cond.122:                                      ; preds = %if.end.121
  br label %do.end.123, !dbg !13903

do.end.123:                                       ; preds = %do.cond.122
  br label %do.body.124, !dbg !13905

do.body.124:                                      ; preds = %do.end.123
  %87 = bitcast %struct._object** %_py_tmp125 to i8*, !dbg !13906
  call void @llvm.lifetime.start(i64 8, i8* %87) #3, !dbg !13906
  call void @llvm.dbg.declare(metadata %struct._object** %_py_tmp125, metadata !1316, metadata !3844), !dbg !13908
  %88 = load %struct._object*, %struct._object** %list.addr, align 8, !dbg !13909, !tbaa !3867
  store %struct._object* %88, %struct._object** %_py_tmp125, align 8, !dbg !13908, !tbaa !3867
  %89 = load %struct._object*, %struct._object** %_py_tmp125, align 8, !dbg !13910, !tbaa !3867
  %cmp126 = icmp ne %struct._object* %89, null, !dbg !13911
  br i1 %cmp126, label %if.then.128, label %if.end.142, !dbg !13912

if.then.128:                                      ; preds = %do.body.124
  store %struct._object* null, %struct._object** %list.addr, align 8, !dbg !13913, !tbaa !3867
  br label %do.body.129, !dbg !13915

do.body.129:                                      ; preds = %if.then.128
  %90 = bitcast %struct._object** %_py_decref_tmp130 to i8*, !dbg !13916
  call void @llvm.lifetime.start(i64 8, i8* %90) #3, !dbg !13916
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp130, metadata !1318, metadata !3844), !dbg !13918
  %91 = load %struct._object*, %struct._object** %_py_tmp125, align 8, !dbg !13919, !tbaa !3867
  store %struct._object* %91, %struct._object** %_py_decref_tmp130, align 8, !dbg !13918, !tbaa !3867
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8, !dbg !13920, !tbaa !3867
  %ob_refcnt131 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 0, !dbg !13922
  %93 = load i64, i64* %ob_refcnt131, align 8, !dbg !13923, !tbaa !3977
  %dec132 = add i64 %93, -1, !dbg !13923
  store i64 %dec132, i64* %ob_refcnt131, align 8, !dbg !13923, !tbaa !3977
  %cmp133 = icmp ne i64 %dec132, 0, !dbg !13924
  br i1 %cmp133, label %if.then.135, label %if.else.136, !dbg !13925

if.then.135:                                      ; preds = %do.body.129
  br label %if.end.139, !dbg !13926

if.else.136:                                      ; preds = %do.body.129
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8, !dbg !13928, !tbaa !3867
  %ob_type137 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1, !dbg !13930
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type137, align 8, !dbg !13930, !tbaa !3892
  %tp_dealloc138 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 4, !dbg !13931
  %96 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc138, align 8, !dbg !13931, !tbaa !3986
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8, !dbg !13932, !tbaa !3867
  call void %96(%struct._object* %97), !dbg !13933
  br label %if.end.139

if.end.139:                                       ; preds = %if.else.136, %if.then.135
  %98 = bitcast %struct._object** %_py_decref_tmp130 to i8*, !dbg !13934
  call void @llvm.lifetime.end(i64 8, i8* %98) #3, !dbg !13934
  br label %do.cond.140, !dbg !13936

do.cond.140:                                      ; preds = %if.end.139
  br label %do.end.141, !dbg !13937

do.end.141:                                       ; preds = %do.cond.140
  br label %if.end.142, !dbg !13939

if.end.142:                                       ; preds = %do.end.141, %do.body.124
  %99 = bitcast %struct._object** %_py_tmp125 to i8*, !dbg !13941
  call void @llvm.lifetime.end(i64 8, i8* %99) #3, !dbg !13941
  br label %do.cond.143, !dbg !13944

do.cond.143:                                      ; preds = %if.end.142
  br label %do.end.144, !dbg !13945

do.end.144:                                       ; preds = %do.cond.143
  br label %for.end, !dbg !13947

if.end.145:                                       ; preds = %if.end.106
  br label %do.body.146, !dbg !13948

do.body.146:                                      ; preds = %if.end.145
  %100 = bitcast %struct._object** %_py_decref_tmp147 to i8*, !dbg !13949
  call void @llvm.lifetime.start(i64 8, i8* %100) #3, !dbg !13949
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp147, metadata !1322, metadata !3844), !dbg !13951
  %101 = load %struct._object*, %struct._object** %v, align 8, !dbg !13952, !tbaa !3867
  store %struct._object* %101, %struct._object** %_py_decref_tmp147, align 8, !dbg !13951, !tbaa !3867
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8, !dbg !13953, !tbaa !3867
  %ob_refcnt148 = getelementptr inbounds %struct._object, %struct._object* %102, i32 0, i32 0, !dbg !13955
  %103 = load i64, i64* %ob_refcnt148, align 8, !dbg !13956, !tbaa !3977
  %dec149 = add i64 %103, -1, !dbg !13956
  store i64 %dec149, i64* %ob_refcnt148, align 8, !dbg !13956, !tbaa !3977
  %cmp150 = icmp ne i64 %dec149, 0, !dbg !13957
  br i1 %cmp150, label %if.then.152, label %if.else.153, !dbg !13958

if.then.152:                                      ; preds = %do.body.146
  br label %if.end.156, !dbg !13959

if.else.153:                                      ; preds = %do.body.146
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8, !dbg !13961, !tbaa !3867
  %ob_type154 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 1, !dbg !13963
  %105 = load %struct._typeobject*, %struct._typeobject** %ob_type154, align 8, !dbg !13963, !tbaa !3892
  %tp_dealloc155 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %105, i32 0, i32 4, !dbg !13964
  %106 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc155, align 8, !dbg !13964, !tbaa !3986
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8, !dbg !13965, !tbaa !3867
  call void %106(%struct._object* %107), !dbg !13966
  br label %if.end.156

if.end.156:                                       ; preds = %if.else.153, %if.then.152
  %108 = bitcast %struct._object** %_py_decref_tmp147 to i8*, !dbg !13967
  call void @llvm.lifetime.end(i64 8, i8* %108) #3, !dbg !13967
  br label %do.cond.157, !dbg !13969

do.cond.157:                                      ; preds = %if.end.156
  br label %do.end.158, !dbg !13970

do.end.158:                                       ; preds = %do.cond.157
  br label %for.cond, !dbg !13972

for.end:                                          ; preds = %do.end.144, %do.end.105, %if.then.39
  br label %exit, !dbg !13973

exit:                                             ; preds = %for.end, %do.end, %if.then.29, %if.end.25
  %109 = load %struct.__dirstream*, %struct.__dirstream** %dirp, align 8, !dbg !13974, !tbaa !3867
  %cmp159 = icmp ne %struct.__dirstream* %109, null, !dbg !13975
  br i1 %cmp159, label %if.then.161, label %if.end.169, !dbg !13976

if.then.161:                                      ; preds = %exit
  %110 = bitcast %struct._ts** %_save162 to i8*, !dbg !13977
  call void @llvm.lifetime.start(i64 8, i8* %110) #3, !dbg !13977
  call void @llvm.dbg.declare(metadata %struct._ts** %_save162, metadata !1324, metadata !3844), !dbg !13978
  %call163 = call %struct._ts* @PyEval_SaveThread(), !dbg !13979
  store %struct._ts* %call163, %struct._ts** %_save162, align 8, !dbg !13980, !tbaa !3867
  %111 = load i32, i32* %fd, align 4, !dbg !13981, !tbaa !3840
  %cmp164 = icmp sgt i32 %111, -1, !dbg !13983
  br i1 %cmp164, label %if.then.166, label %if.end.167, !dbg !13984

if.then.166:                                      ; preds = %if.then.161
  %112 = load %struct.__dirstream*, %struct.__dirstream** %dirp, align 8, !dbg !13985, !tbaa !3867
  call void @rewinddir(%struct.__dirstream* %112) #3, !dbg !13986
  br label %if.end.167, !dbg !13986

if.end.167:                                       ; preds = %if.then.166, %if.then.161
  %113 = load %struct.__dirstream*, %struct.__dirstream** %dirp, align 8, !dbg !13987, !tbaa !3867
  %call168 = call i32 @closedir(%struct.__dirstream* %113), !dbg !13988
  %114 = load %struct._ts*, %struct._ts** %_save162, align 8, !dbg !13989, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %114), !dbg !13990
  %115 = bitcast %struct._ts** %_save162 to i8*, !dbg !13991
  call void @llvm.lifetime.end(i64 8, i8* %115) #3, !dbg !13991
  br label %if.end.169, !dbg !13992

if.end.169:                                       ; preds = %if.end.167, %exit
  %116 = load %struct._object*, %struct._object** %list.addr, align 8, !dbg !13993, !tbaa !3867
  store %struct._object* %116, %struct._object** %retval, !dbg !13994
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13994

cleanup:                                          ; preds = %if.end.169, %if.then.5
  %117 = bitcast i32* %fd to i8*, !dbg !13995
  call void @llvm.lifetime.end(i64 4, i8* %117) #3, !dbg !13995
  %118 = bitcast i32* %return_str to i8*, !dbg !13995
  call void @llvm.lifetime.end(i64 4, i8* %118) #3, !dbg !13995
  %119 = bitcast %struct.dirent** %ep to i8*, !dbg !13995
  call void @llvm.lifetime.end(i64 8, i8* %119) #3, !dbg !13995
  %120 = bitcast %struct.__dirstream** %dirp to i8*, !dbg !13995
  call void @llvm.lifetime.end(i64 8, i8* %120) #3, !dbg !13995
  %121 = bitcast %struct._object** %v to i8*, !dbg !13995
  call void @llvm.lifetime.end(i64 8, i8* %121) #3, !dbg !13995
  %122 = load %struct._object*, %struct._object** %retval, !dbg !13995
  ret %struct._object* %122, !dbg !13995
}

declare i32 @_Py_dup(i32) #2

declare %struct.__dirstream* @fdopendir(i32) #2

declare %struct.__dirstream* @opendir(i8*) #2

declare i32 @close(i32) #2

declare %struct.dirent* @readdir64(%struct.__dirstream*) #2

declare %struct._object* @PyUnicode_DecodeFSDefaultAndSize(i8*, i64) #2

; Function Attrs: nounwind
declare void @rewinddir(%struct.__dirstream*) #4

declare i32 @closedir(%struct.__dirstream*) #2

; Function Attrs: nounwind
declare i32 @mkdirat(i32, i8*, i32) #4

; Function Attrs: nounwind
declare i32 @mkdir(i8*, i32) #4

; Function Attrs: nounwind
declare i32 @nice(i32) #4

; Function Attrs: nounwind
declare i32 @getpriority(i32, i32) #4

; Function Attrs: nounwind
declare i32 @setpriority(i32, i32, i32) #4

; Function Attrs: nounwind
declare i64 @readlinkat(i32, i8*, i8*, i64) #4

; Function Attrs: nounwind
declare i64 @readlink(i8*, i8*, i64) #4

; Function Attrs: nounwind uwtable
define internal %struct._object* @internal_rename(%struct._object* %args, %struct._object* %kwargs, i32 %is_replace) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %is_replace.addr = alloca i32, align 4
  %function_name = alloca i8*, align 8
  %src = alloca %struct.path_t, align 8
  %dst = alloca %struct.path_t, align 8
  %src_dir_fd = alloca i32, align 4
  %dst_dir_fd = alloca i32, align 4
  %dir_fd_specified = alloca i32, align 4
  %return_value = alloca %struct._object*, align 8
  %format = alloca [24 x i8], align 16
  %result = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1392, metadata !3844), !dbg !13996
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1393, metadata !3844), !dbg !13997
  store i32 %is_replace, i32* %is_replace.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %is_replace.addr, metadata !1394, metadata !3844), !dbg !13998
  %0 = bitcast i8** %function_name to i8*, !dbg !13999
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !13999
  call void @llvm.dbg.declare(metadata i8** %function_name, metadata !1395, metadata !3844), !dbg !14000
  %1 = load i32, i32* %is_replace.addr, align 4, !dbg !14001, !tbaa !3840
  %tobool = icmp ne i32 %1, 0, !dbg !14001
  %cond = select i1 %tobool, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i32 0, i32 0), !dbg !14001
  store i8* %cond, i8** %function_name, align 8, !dbg !14000, !tbaa !3867
  %2 = bitcast %struct.path_t* %src to i8*, !dbg !14002
  call void @llvm.lifetime.start(i64 72, i8* %2) #3, !dbg !14002
  call void @llvm.dbg.declare(metadata %struct.path_t* %src, metadata !1396, metadata !3844), !dbg !14003
  %3 = bitcast %struct.path_t* %dst to i8*, !dbg !14004
  call void @llvm.lifetime.start(i64 72, i8* %3) #3, !dbg !14004
  call void @llvm.dbg.declare(metadata %struct.path_t* %dst, metadata !1397, metadata !3844), !dbg !14005
  %4 = bitcast i32* %src_dir_fd to i8*, !dbg !14006
  call void @llvm.lifetime.start(i64 4, i8* %4) #3, !dbg !14006
  call void @llvm.dbg.declare(metadata i32* %src_dir_fd, metadata !1398, metadata !3844), !dbg !14007
  store i32 -100, i32* %src_dir_fd, align 4, !dbg !14007, !tbaa !3840
  %5 = bitcast i32* %dst_dir_fd to i8*, !dbg !14008
  call void @llvm.lifetime.start(i64 4, i8* %5) #3, !dbg !14008
  call void @llvm.dbg.declare(metadata i32* %dst_dir_fd, metadata !1399, metadata !3844), !dbg !14009
  store i32 -100, i32* %dst_dir_fd, align 4, !dbg !14009, !tbaa !3840
  %6 = bitcast i32* %dir_fd_specified to i8*, !dbg !14010
  call void @llvm.lifetime.start(i64 4, i8* %6) #3, !dbg !14010
  call void @llvm.dbg.declare(metadata i32* %dir_fd_specified, metadata !1400, metadata !3844), !dbg !14011
  %7 = bitcast %struct._object** %return_value to i8*, !dbg !14012
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !14012
  call void @llvm.dbg.declare(metadata %struct._object** %return_value, metadata !1401, metadata !3844), !dbg !14013
  store %struct._object* null, %struct._object** %return_value, align 8, !dbg !14013, !tbaa !3867
  %8 = bitcast [24 x i8]* %format to i8*, !dbg !14014
  call void @llvm.lifetime.start(i64 24, i8* %8) #3, !dbg !14014
  call void @llvm.dbg.declare(metadata [24 x i8]* %format, metadata !1402, metadata !3844), !dbg !14015
  %9 = bitcast i32* %result to i8*, !dbg !14016
  call void @llvm.lifetime.start(i64 4, i8* %9) #3, !dbg !14016
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1406, metadata !3844), !dbg !14017
  %10 = bitcast %struct.path_t* %src to i8*, !dbg !14018
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 72, i32 8, i1 false), !dbg !14018
  %11 = bitcast %struct.path_t* %dst to i8*, !dbg !14019
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 72, i32 8, i1 false), !dbg !14019
  %12 = load i8*, i8** %function_name, align 8, !dbg !14020, !tbaa !3867
  %function_name1 = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 0, !dbg !14021
  store i8* %12, i8** %function_name1, align 8, !dbg !14022, !tbaa !5512
  %13 = load i8*, i8** %function_name, align 8, !dbg !14023, !tbaa !3867
  %function_name2 = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 0, !dbg !14024
  store i8* %13, i8** %function_name2, align 8, !dbg !14025, !tbaa !5512
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %format, i32 0, i32 0, !dbg !14026
  %call = call i8* @strcpy(i8* %arraydecay, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.211, i32 0, i32 0)) #3, !dbg !14027
  %arraydecay3 = getelementptr inbounds [24 x i8], [24 x i8]* %format, i32 0, i32 0, !dbg !14028
  %14 = load i8*, i8** %function_name, align 8, !dbg !14029, !tbaa !3867
  %call4 = call i8* @strcat(i8* %arraydecay3, i8* %14) #3, !dbg !14030
  %15 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !14031, !tbaa !3867
  %16 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !14033, !tbaa !3867
  %arraydecay5 = getelementptr inbounds [24 x i8], [24 x i8]* %format, i32 0, i32 0, !dbg !14034
  %call6 = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %15, %struct._object* %16, i8* %arraydecay5, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @internal_rename.keywords, i32 0, i32 0), i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %src, i32 (%struct._object*, i8*)* @path_converter, %struct.path_t* %dst, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %src_dir_fd, i32 (%struct._object*, i8*)* @dir_fd_converter, i32* %dst_dir_fd), !dbg !14035
  %tobool7 = icmp ne i32 %call6, 0, !dbg !14035
  br i1 %tobool7, label %if.end, label %if.then, !dbg !14036

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !14037
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !14037

if.end:                                           ; preds = %entry
  %17 = load i32, i32* %src_dir_fd, align 4, !dbg !14038, !tbaa !3840
  %cmp = icmp ne i32 %17, -100, !dbg !14039
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !14040

lor.rhs:                                          ; preds = %if.end
  %18 = load i32, i32* %dst_dir_fd, align 4, !dbg !14041, !tbaa !3840
  %cmp8 = icmp ne i32 %18, -100, !dbg !14042
  br label %lor.end, !dbg !14040

lor.end:                                          ; preds = %lor.rhs, %if.end
  %19 = phi i1 [ true, %if.end ], [ %cmp8, %lor.rhs ]
  %lor.ext = zext i1 %19 to i32, !dbg !14043
  store i32 %lor.ext, i32* %dir_fd_specified, align 4, !dbg !14046, !tbaa !3840
  %narrow = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 5, !dbg !14047
  %20 = load i8*, i8** %narrow, align 8, !dbg !14047, !tbaa !5537
  %tobool9 = icmp ne i8* %20, null, !dbg !14049
  br i1 %tobool9, label %land.lhs.true, label %lor.lhs.false, !dbg !14050

land.lhs.true:                                    ; preds = %lor.end
  %wide = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 4, !dbg !14051
  %21 = load i32*, i32** %wide, align 8, !dbg !14051, !tbaa !5939
  %tobool10 = icmp ne i32* %21, null, !dbg !14053
  br i1 %tobool10, label %if.then.16, label %lor.lhs.false, !dbg !14054

lor.lhs.false:                                    ; preds = %land.lhs.true, %lor.end
  %wide11 = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 4, !dbg !14055
  %22 = load i32*, i32** %wide11, align 8, !dbg !14055, !tbaa !5939
  %tobool12 = icmp ne i32* %22, null, !dbg !14058
  br i1 %tobool12, label %land.lhs.true.13, label %if.end.18, !dbg !14059

land.lhs.true.13:                                 ; preds = %lor.lhs.false
  %narrow14 = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 5, !dbg !14060
  %23 = load i8*, i8** %narrow14, align 8, !dbg !14060, !tbaa !5537
  %tobool15 = icmp ne i8* %23, null, !dbg !14062
  br i1 %tobool15, label %if.then.16, label %if.end.18, !dbg !14063

if.then.16:                                       ; preds = %land.lhs.true.13, %land.lhs.true
  %24 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !14064, !tbaa !3867
  %25 = load i8*, i8** %function_name, align 8, !dbg !14066, !tbaa !3867
  %call17 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %24, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.212, i32 0, i32 0), i8* %25), !dbg !14067
  br label %exit, !dbg !14068

if.end.18:                                        ; preds = %land.lhs.true.13, %lor.lhs.false
  %26 = bitcast %struct._ts** %_save to i8*, !dbg !14069
  call void @llvm.lifetime.start(i64 8, i8* %26) #3, !dbg !14069
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1407, metadata !3844), !dbg !14070
  %call19 = call %struct._ts* @PyEval_SaveThread(), !dbg !14071
  store %struct._ts* %call19, %struct._ts** %_save, align 8, !dbg !14072, !tbaa !3867
  %27 = load i32, i32* %dir_fd_specified, align 4, !dbg !14073, !tbaa !3840
  %tobool20 = icmp ne i32 %27, 0, !dbg !14073
  br i1 %tobool20, label %if.then.21, label %if.else, !dbg !14075

if.then.21:                                       ; preds = %if.end.18
  %28 = load i32, i32* %src_dir_fd, align 4, !dbg !14076, !tbaa !3840
  %narrow22 = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 5, !dbg !14077
  %29 = load i8*, i8** %narrow22, align 8, !dbg !14077, !tbaa !5537
  %30 = load i32, i32* %dst_dir_fd, align 4, !dbg !14078, !tbaa !3840
  %narrow23 = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 5, !dbg !14079
  %31 = load i8*, i8** %narrow23, align 8, !dbg !14079, !tbaa !5537
  %call24 = call i32 @renameat(i32 %28, i8* %29, i32 %30, i8* %31) #3, !dbg !14080
  store i32 %call24, i32* %result, align 4, !dbg !14081, !tbaa !3840
  br label %if.end.28, !dbg !14082

if.else:                                          ; preds = %if.end.18
  %narrow25 = getelementptr inbounds %struct.path_t, %struct.path_t* %src, i32 0, i32 5, !dbg !14083
  %32 = load i8*, i8** %narrow25, align 8, !dbg !14083, !tbaa !5537
  %narrow26 = getelementptr inbounds %struct.path_t, %struct.path_t* %dst, i32 0, i32 5, !dbg !14084
  %33 = load i8*, i8** %narrow26, align 8, !dbg !14084, !tbaa !5537
  %call27 = call i32 @rename(i8* %32, i8* %33) #3, !dbg !14085
  store i32 %call27, i32* %result, align 4, !dbg !14086, !tbaa !3840
  br label %if.end.28

if.end.28:                                        ; preds = %if.else, %if.then.21
  %34 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !14087, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %34), !dbg !14088
  %35 = bitcast %struct._ts** %_save to i8*, !dbg !14089
  call void @llvm.lifetime.end(i64 8, i8* %35) #3, !dbg !14089
  %36 = load i32, i32* %result, align 4, !dbg !14090, !tbaa !3840
  %tobool29 = icmp ne i32 %36, 0, !dbg !14090
  br i1 %tobool29, label %if.then.30, label %if.end.32, !dbg !14092

if.then.30:                                       ; preds = %if.end.28
  %call31 = call %struct._object* @path_error2(%struct.path_t* %src, %struct.path_t* %dst), !dbg !14093
  store %struct._object* %call31, %struct._object** %return_value, align 8, !dbg !14095, !tbaa !3867
  br label %exit, !dbg !14096

if.end.32:                                        ; preds = %if.end.28
  %37 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !14097, !tbaa !3977
  %inc = add i64 %37, 1, !dbg !14097
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !14097, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %return_value, align 8, !dbg !14098, !tbaa !3867
  br label %exit, !dbg !14099

exit:                                             ; preds = %if.end.32, %if.then.30, %if.then.16
  call void @path_cleanup(%struct.path_t* %src), !dbg !14100
  call void @path_cleanup(%struct.path_t* %dst), !dbg !14101
  %38 = load %struct._object*, %struct._object** %return_value, align 8, !dbg !14102, !tbaa !3867
  store %struct._object* %38, %struct._object** %retval, !dbg !14103
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !14103

cleanup:                                          ; preds = %exit, %if.then
  %39 = bitcast i32* %result to i8*, !dbg !14104
  call void @llvm.lifetime.end(i64 4, i8* %39) #3, !dbg !14104
  %40 = bitcast [24 x i8]* %format to i8*, !dbg !14104
  call void @llvm.lifetime.end(i64 24, i8* %40) #3, !dbg !14104
  %41 = bitcast %struct._object** %return_value to i8*, !dbg !14104
  call void @llvm.lifetime.end(i64 8, i8* %41) #3, !dbg !14104
  %42 = bitcast i32* %dir_fd_specified to i8*, !dbg !14104
  call void @llvm.lifetime.end(i64 4, i8* %42) #3, !dbg !14104
  %43 = bitcast i32* %dst_dir_fd to i8*, !dbg !14104
  call void @llvm.lifetime.end(i64 4, i8* %43) #3, !dbg !14104
  %44 = bitcast i32* %src_dir_fd to i8*, !dbg !14104
  call void @llvm.lifetime.end(i64 4, i8* %44) #3, !dbg !14104
  %45 = bitcast %struct.path_t* %dst to i8*, !dbg !14104
  call void @llvm.lifetime.end(i64 72, i8* %45) #3, !dbg !14104
  %46 = bitcast %struct.path_t* %src to i8*, !dbg !14104
  call void @llvm.lifetime.end(i64 72, i8* %46) #3, !dbg !14104
  %47 = bitcast i8** %function_name to i8*, !dbg !14104
  call void @llvm.lifetime.end(i64 8, i8* %47) #3, !dbg !14104
  %48 = load %struct._object*, %struct._object** %retval, !dbg !14104
  ret %struct._object* %48, !dbg !14104
}

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #4

; Function Attrs: nounwind
declare i8* @strcat(i8*, i8*) #4

; Function Attrs: nounwind
declare i32 @renameat(i32, i8*, i32, i8*) #4

; Function Attrs: nounwind
declare i32 @rename(i8*, i8*) #4

; Function Attrs: nounwind
declare i32 @unlinkat(i32, i8*, i32) #4

; Function Attrs: nounwind
declare i32 @rmdir(i8*) #4

declare i32 @PyErr_WarnEx(%struct._object*, i8*, i64) #2

; Function Attrs: nounwind
declare i32 @symlinkat(i8*, i32, i8*) #4

; Function Attrs: nounwind
declare i32 @symlink(i8*, i8*) #4

declare i8* @PyBytes_AsString(%struct._object*) #2

declare i32 @system(i8*) #2

; Function Attrs: nounwind
declare i32 @umask(i32) #4

; Function Attrs: nounwind
declare i32 @uname(%struct.utsname*) #4

; Function Attrs: nounwind
declare i32 @unlink(i8*) #4

declare i64 @PyTuple_Size(%struct._object*) #2

declare i32 @_PyTime_ObjectToTimespec(%struct._object*, i64*, i64*, i32) #2

; Function Attrs: nounwind uwtable
define internal i32 @split_py_long_to_s_and_ns(%struct._object* %py_long, i64* %s, i64* %ns) #0 {
entry:
  %py_long.addr = alloca %struct._object*, align 8
  %s.addr = alloca i64*, align 8
  %ns.addr = alloca i64*, align 8
  %result = alloca i32, align 4
  %divmod = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %py_long, %struct._object** %py_long.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %py_long.addr, metadata !1560, metadata !3844), !dbg !14105
  store i64* %s, i64** %s.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i64** %s.addr, metadata !1561, metadata !3844), !dbg !14106
  store i64* %ns, i64** %ns.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i64** %ns.addr, metadata !1562, metadata !3844), !dbg !14107
  %0 = bitcast i32* %result to i8*, !dbg !14108
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !14108
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1563, metadata !3844), !dbg !14109
  store i32 0, i32* %result, align 4, !dbg !14109, !tbaa !3840
  %1 = bitcast %struct._object** %divmod to i8*, !dbg !14110
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !14110
  call void @llvm.dbg.declare(metadata %struct._object** %divmod, metadata !1564, metadata !3844), !dbg !14111
  %2 = load %struct._object*, %struct._object** %py_long.addr, align 8, !dbg !14112, !tbaa !3867
  %3 = load %struct._object*, %struct._object** @billion, align 8, !dbg !14113, !tbaa !3867
  %call = call %struct._object* @PyNumber_Divmod(%struct._object* %2, %struct._object* %3), !dbg !14114
  store %struct._object* %call, %struct._object** %divmod, align 8, !dbg !14115, !tbaa !3867
  %4 = load %struct._object*, %struct._object** %divmod, align 8, !dbg !14116, !tbaa !3867
  %tobool = icmp ne %struct._object* %4, null, !dbg !14116
  br i1 %tobool, label %if.end, label %if.then, !dbg !14118

if.then:                                          ; preds = %entry
  br label %exit, !dbg !14119

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %divmod, align 8, !dbg !14120, !tbaa !3867
  %6 = bitcast %struct._object* %5 to %struct.PyTupleObject*, !dbg !14121
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %6, i32 0, i32 1, !dbg !14122
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !14123
  %7 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !14123, !tbaa !3867
  %call1 = call i64 @_PyLong_AsTime_t(%struct._object* %7), !dbg !14124
  %8 = load i64*, i64** %s.addr, align 8, !dbg !14125, !tbaa !3867
  store i64 %call1, i64* %8, align 8, !dbg !14126, !tbaa !3904
  %9 = load i64*, i64** %s.addr, align 8, !dbg !14127, !tbaa !3867
  %10 = load i64, i64* %9, align 8, !dbg !14129, !tbaa !3904
  %cmp = icmp eq i64 %10, -1, !dbg !14130
  br i1 %cmp, label %land.lhs.true, label %if.end.5, !dbg !14131

land.lhs.true:                                    ; preds = %if.end
  %call2 = call %struct._object* @PyErr_Occurred(), !dbg !14132
  %tobool3 = icmp ne %struct._object* %call2, null, !dbg !14132
  br i1 %tobool3, label %if.then.4, label %if.end.5, !dbg !14134

if.then.4:                                        ; preds = %land.lhs.true
  br label %exit, !dbg !14135

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %11 = load %struct._object*, %struct._object** %divmod, align 8, !dbg !14136, !tbaa !3867
  %12 = bitcast %struct._object* %11 to %struct.PyTupleObject*, !dbg !14137
  %ob_item6 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %12, i32 0, i32 1, !dbg !14138
  %arrayidx7 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item6, i32 0, i64 1, !dbg !14139
  %13 = load %struct._object*, %struct._object** %arrayidx7, align 8, !dbg !14139, !tbaa !3867
  %call8 = call i64 @PyLong_AsLong(%struct._object* %13), !dbg !14140
  %14 = load i64*, i64** %ns.addr, align 8, !dbg !14141, !tbaa !3867
  store i64 %call8, i64* %14, align 8, !dbg !14142, !tbaa !3904
  %15 = load i64*, i64** %ns.addr, align 8, !dbg !14143, !tbaa !3867
  %16 = load i64, i64* %15, align 8, !dbg !14145, !tbaa !3904
  %cmp9 = icmp eq i64 %16, -1, !dbg !14146
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.14, !dbg !14147

land.lhs.true.10:                                 ; preds = %if.end.5
  %call11 = call %struct._object* @PyErr_Occurred(), !dbg !14148
  %tobool12 = icmp ne %struct._object* %call11, null, !dbg !14148
  br i1 %tobool12, label %if.then.13, label %if.end.14, !dbg !14150

if.then.13:                                       ; preds = %land.lhs.true.10
  br label %exit, !dbg !14151

if.end.14:                                        ; preds = %land.lhs.true.10, %if.end.5
  store i32 1, i32* %result, align 4, !dbg !14152, !tbaa !3840
  br label %exit, !dbg !14153

exit:                                             ; preds = %if.end.14, %if.then.13, %if.then.4, %if.then
  br label %do.body, !dbg !14154

do.body:                                          ; preds = %exit
  %17 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !14155
  call void @llvm.lifetime.start(i64 8, i8* %17) #3, !dbg !14155
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1565, metadata !3844), !dbg !14157
  %18 = load %struct._object*, %struct._object** %divmod, align 8, !dbg !14158, !tbaa !3867
  store %struct._object* %18, %struct._object** %_py_xdecref_tmp, align 8, !dbg !14157, !tbaa !3867
  %19 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !14159, !tbaa !3867
  %cmp15 = icmp ne %struct._object* %19, null, !dbg !14160
  br i1 %cmp15, label %if.then.16, label %if.end.21, !dbg !14161

if.then.16:                                       ; preds = %do.body
  br label %do.body.17, !dbg !14162

do.body.17:                                       ; preds = %if.then.16
  %20 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !14164
  call void @llvm.lifetime.start(i64 8, i8* %20) #3, !dbg !14164
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1567, metadata !3844), !dbg !14166
  %21 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !14167, !tbaa !3867
  store %struct._object* %21, %struct._object** %_py_decref_tmp, align 8, !dbg !14166, !tbaa !3867
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14168, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0, !dbg !14170
  %23 = load i64, i64* %ob_refcnt, align 8, !dbg !14171, !tbaa !3977
  %dec = add i64 %23, -1, !dbg !14171
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !14171, !tbaa !3977
  %cmp18 = icmp ne i64 %dec, 0, !dbg !14172
  br i1 %cmp18, label %if.then.19, label %if.else, !dbg !14173

if.then.19:                                       ; preds = %do.body.17
  br label %if.end.20, !dbg !14174

if.else:                                          ; preds = %do.body.17
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14176, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1, !dbg !14178
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !14178, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4, !dbg !14179
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !14179, !tbaa !3986
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14180, !tbaa !3867
  call void %26(%struct._object* %27), !dbg !14181
  br label %if.end.20

if.end.20:                                        ; preds = %if.else, %if.then.19
  %28 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !14182
  call void @llvm.lifetime.end(i64 8, i8* %28) #3, !dbg !14182
  br label %do.cond, !dbg !14184

do.cond:                                          ; preds = %if.end.20
  br label %do.end, !dbg !14185

do.end:                                           ; preds = %do.cond
  br label %if.end.21, !dbg !14187

if.end.21:                                        ; preds = %do.end, %do.body
  %29 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !14189
  call void @llvm.lifetime.end(i64 8, i8* %29) #3, !dbg !14189
  br label %do.cond.22, !dbg !14192

do.cond.22:                                       ; preds = %if.end.21
  br label %do.end.23, !dbg !14193

do.end.23:                                        ; preds = %do.cond.22
  %30 = load i32, i32* %result, align 4, !dbg !14195, !tbaa !3840
  %31 = bitcast %struct._object** %divmod to i8*, !dbg !14196
  call void @llvm.lifetime.end(i64 8, i8* %31) #3, !dbg !14196
  %32 = bitcast i32* %result to i8*, !dbg !14196
  call void @llvm.lifetime.end(i64 4, i8* %32) #3, !dbg !14196
  ret i32 %30, !dbg !14197
}

; Function Attrs: nounwind uwtable
define internal i32 @utime_nofollow_symlinks(%struct.utime_t* %utime, i8* %path) #0 {
entry:
  %utime.addr = alloca %struct.utime_t*, align 8
  %path.addr = alloca i8*, align 8
  %ts = alloca [2 x %struct.timespec], align 16
  %time = alloca %struct.timespec*, align 8
  store %struct.utime_t* %utime, %struct.utime_t** %utime.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.utime_t** %utime.addr, metadata !1575, metadata !3844), !dbg !14198
  store i8* %path, i8** %path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !1576, metadata !3844), !dbg !14199
  %0 = bitcast [2 x %struct.timespec]* %ts to i8*, !dbg !14200
  call void @llvm.lifetime.start(i64 32, i8* %0) #3, !dbg !14200
  call void @llvm.dbg.declare(metadata [2 x %struct.timespec]* %ts, metadata !1577, metadata !3844), !dbg !14201
  %1 = bitcast %struct.timespec** %time to i8*, !dbg !14202
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !14202
  call void @llvm.dbg.declare(metadata %struct.timespec** %time, metadata !1581, metadata !3844), !dbg !14203
  %2 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14204, !tbaa !3867
  %now = getelementptr inbounds %struct.utime_t, %struct.utime_t* %2, i32 0, i32 0, !dbg !14206
  %3 = load i32, i32* %now, align 4, !dbg !14206, !tbaa !6921
  %tobool = icmp ne i32 %3, 0, !dbg !14204
  br i1 %tobool, label %if.then, label %if.else, !dbg !14207

if.then:                                          ; preds = %entry
  store %struct.timespec* null, %struct.timespec** %time, align 8, !dbg !14208, !tbaa !3867
  br label %if.end, !dbg !14210

if.else:                                          ; preds = %entry
  %4 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14211, !tbaa !3867
  %atime_s = getelementptr inbounds %struct.utime_t, %struct.utime_t* %4, i32 0, i32 1, !dbg !14214
  %5 = load i64, i64* %atime_s, align 8, !dbg !14214, !tbaa !6943
  %arrayidx = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 0, !dbg !14215
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx, i32 0, i32 0, !dbg !14216
  store i64 %5, i64* %tv_sec, align 8, !dbg !14217, !tbaa !7582
  %6 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14218, !tbaa !3867
  %atime_ns = getelementptr inbounds %struct.utime_t, %struct.utime_t* %6, i32 0, i32 2, !dbg !14219
  %7 = load i64, i64* %atime_ns, align 8, !dbg !14219, !tbaa !6947
  %arrayidx1 = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 0, !dbg !14220
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx1, i32 0, i32 1, !dbg !14221
  store i64 %7, i64* %tv_nsec, align 8, !dbg !14222, !tbaa !7586
  %8 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14223, !tbaa !3867
  %mtime_s = getelementptr inbounds %struct.utime_t, %struct.utime_t* %8, i32 0, i32 3, !dbg !14224
  %9 = load i64, i64* %mtime_s, align 8, !dbg !14224, !tbaa !6951
  %arrayidx2 = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 1, !dbg !14225
  %tv_sec3 = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx2, i32 0, i32 0, !dbg !14226
  store i64 %9, i64* %tv_sec3, align 8, !dbg !14227, !tbaa !7582
  %10 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14228, !tbaa !3867
  %mtime_ns = getelementptr inbounds %struct.utime_t, %struct.utime_t* %10, i32 0, i32 4, !dbg !14229
  %11 = load i64, i64* %mtime_ns, align 8, !dbg !14229, !tbaa !6955
  %arrayidx4 = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 1, !dbg !14230
  %tv_nsec5 = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx4, i32 0, i32 1, !dbg !14231
  store i64 %11, i64* %tv_nsec5, align 8, !dbg !14232, !tbaa !7586
  %arraydecay = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i32 0, !dbg !14233
  store %struct.timespec* %arraydecay, %struct.timespec** %time, align 8, !dbg !14234, !tbaa !3867
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load i8*, i8** %path.addr, align 8, !dbg !14235, !tbaa !3867
  %13 = load %struct.timespec*, %struct.timespec** %time, align 8, !dbg !14236, !tbaa !3867
  %call = call i32 @utimensat(i32 -100, i8* %12, %struct.timespec* %13, i32 256) #3, !dbg !14237
  %14 = bitcast %struct.timespec** %time to i8*, !dbg !14238
  call void @llvm.lifetime.end(i64 8, i8* %14) #3, !dbg !14238
  %15 = bitcast [2 x %struct.timespec]* %ts to i8*, !dbg !14238
  call void @llvm.lifetime.end(i64 32, i8* %15) #3, !dbg !14238
  ret i32 %call, !dbg !14239
}

; Function Attrs: nounwind uwtable
define internal i32 @utime_dir_fd(%struct.utime_t* %utime, i32 %dir_fd, i8* %path, i32 %follow_symlinks) #0 {
entry:
  %utime.addr = alloca %struct.utime_t*, align 8
  %dir_fd.addr = alloca i32, align 4
  %path.addr = alloca i8*, align 8
  %follow_symlinks.addr = alloca i32, align 4
  %flags = alloca i32, align 4
  %ts = alloca [2 x %struct.timespec], align 16
  %time = alloca %struct.timespec*, align 8
  store %struct.utime_t* %utime, %struct.utime_t** %utime.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.utime_t** %utime.addr, metadata !1587, metadata !3844), !dbg !14240
  store i32 %dir_fd, i32* %dir_fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %dir_fd.addr, metadata !1588, metadata !3844), !dbg !14241
  store i8* %path, i8** %path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !1589, metadata !3844), !dbg !14242
  store i32 %follow_symlinks, i32* %follow_symlinks.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %follow_symlinks.addr, metadata !1590, metadata !3844), !dbg !14243
  %0 = bitcast i32* %flags to i8*, !dbg !14244
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !14244
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1591, metadata !3844), !dbg !14245
  %1 = load i32, i32* %follow_symlinks.addr, align 4, !dbg !14246, !tbaa !3840
  %tobool = icmp ne i32 %1, 0, !dbg !14246
  %cond = select i1 %tobool, i32 0, i32 256, !dbg !14246
  store i32 %cond, i32* %flags, align 4, !dbg !14245, !tbaa !3840
  %2 = bitcast [2 x %struct.timespec]* %ts to i8*, !dbg !14247
  call void @llvm.lifetime.start(i64 32, i8* %2) #3, !dbg !14247
  call void @llvm.dbg.declare(metadata [2 x %struct.timespec]* %ts, metadata !1592, metadata !3844), !dbg !14248
  %3 = bitcast %struct.timespec** %time to i8*, !dbg !14249
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !14249
  call void @llvm.dbg.declare(metadata %struct.timespec** %time, metadata !1593, metadata !3844), !dbg !14250
  %4 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14251, !tbaa !3867
  %now = getelementptr inbounds %struct.utime_t, %struct.utime_t* %4, i32 0, i32 0, !dbg !14253
  %5 = load i32, i32* %now, align 4, !dbg !14253, !tbaa !6921
  %tobool1 = icmp ne i32 %5, 0, !dbg !14251
  br i1 %tobool1, label %if.then, label %if.else, !dbg !14254

if.then:                                          ; preds = %entry
  store %struct.timespec* null, %struct.timespec** %time, align 8, !dbg !14255, !tbaa !3867
  br label %if.end, !dbg !14257

if.else:                                          ; preds = %entry
  %6 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14258, !tbaa !3867
  %atime_s = getelementptr inbounds %struct.utime_t, %struct.utime_t* %6, i32 0, i32 1, !dbg !14261
  %7 = load i64, i64* %atime_s, align 8, !dbg !14261, !tbaa !6943
  %arrayidx = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 0, !dbg !14262
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx, i32 0, i32 0, !dbg !14263
  store i64 %7, i64* %tv_sec, align 8, !dbg !14264, !tbaa !7582
  %8 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14265, !tbaa !3867
  %atime_ns = getelementptr inbounds %struct.utime_t, %struct.utime_t* %8, i32 0, i32 2, !dbg !14266
  %9 = load i64, i64* %atime_ns, align 8, !dbg !14266, !tbaa !6947
  %arrayidx2 = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 0, !dbg !14267
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx2, i32 0, i32 1, !dbg !14268
  store i64 %9, i64* %tv_nsec, align 8, !dbg !14269, !tbaa !7586
  %10 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14270, !tbaa !3867
  %mtime_s = getelementptr inbounds %struct.utime_t, %struct.utime_t* %10, i32 0, i32 3, !dbg !14271
  %11 = load i64, i64* %mtime_s, align 8, !dbg !14271, !tbaa !6951
  %arrayidx3 = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 1, !dbg !14272
  %tv_sec4 = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx3, i32 0, i32 0, !dbg !14273
  store i64 %11, i64* %tv_sec4, align 8, !dbg !14274, !tbaa !7582
  %12 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14275, !tbaa !3867
  %mtime_ns = getelementptr inbounds %struct.utime_t, %struct.utime_t* %12, i32 0, i32 4, !dbg !14276
  %13 = load i64, i64* %mtime_ns, align 8, !dbg !14276, !tbaa !6955
  %arrayidx5 = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 1, !dbg !14277
  %tv_nsec6 = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx5, i32 0, i32 1, !dbg !14278
  store i64 %13, i64* %tv_nsec6, align 8, !dbg !14279, !tbaa !7586
  %arraydecay = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i32 0, !dbg !14280
  store %struct.timespec* %arraydecay, %struct.timespec** %time, align 8, !dbg !14281, !tbaa !3867
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load i32, i32* %dir_fd.addr, align 4, !dbg !14282, !tbaa !3840
  %15 = load i8*, i8** %path.addr, align 8, !dbg !14283, !tbaa !3867
  %16 = load %struct.timespec*, %struct.timespec** %time, align 8, !dbg !14284, !tbaa !3867
  %17 = load i32, i32* %flags, align 4, !dbg !14285, !tbaa !3840
  %call = call i32 @utimensat(i32 %14, i8* %15, %struct.timespec* %16, i32 %17) #3, !dbg !14286
  %18 = bitcast %struct.timespec** %time to i8*, !dbg !14287
  call void @llvm.lifetime.end(i64 8, i8* %18) #3, !dbg !14287
  %19 = bitcast [2 x %struct.timespec]* %ts to i8*, !dbg !14287
  call void @llvm.lifetime.end(i64 32, i8* %19) #3, !dbg !14287
  %20 = bitcast i32* %flags to i8*, !dbg !14287
  call void @llvm.lifetime.end(i64 4, i8* %20) #3, !dbg !14287
  ret i32 %call, !dbg !14288
}

; Function Attrs: nounwind uwtable
define internal i32 @utime_fd(%struct.utime_t* %utime, i32 %fd) #0 {
entry:
  %utime.addr = alloca %struct.utime_t*, align 8
  %fd.addr = alloca i32, align 4
  %ts = alloca [2 x %struct.timespec], align 16
  %time = alloca %struct.timespec*, align 8
  store %struct.utime_t* %utime, %struct.utime_t** %utime.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.utime_t** %utime.addr, metadata !1598, metadata !3844), !dbg !14289
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !1599, metadata !3844), !dbg !14290
  %0 = bitcast [2 x %struct.timespec]* %ts to i8*, !dbg !14291
  call void @llvm.lifetime.start(i64 32, i8* %0) #3, !dbg !14291
  call void @llvm.dbg.declare(metadata [2 x %struct.timespec]* %ts, metadata !1600, metadata !3844), !dbg !14292
  %1 = bitcast %struct.timespec** %time to i8*, !dbg !14293
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !14293
  call void @llvm.dbg.declare(metadata %struct.timespec** %time, metadata !1601, metadata !3844), !dbg !14294
  %2 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14295, !tbaa !3867
  %now = getelementptr inbounds %struct.utime_t, %struct.utime_t* %2, i32 0, i32 0, !dbg !14297
  %3 = load i32, i32* %now, align 4, !dbg !14297, !tbaa !6921
  %tobool = icmp ne i32 %3, 0, !dbg !14295
  br i1 %tobool, label %if.then, label %if.else, !dbg !14298

if.then:                                          ; preds = %entry
  store %struct.timespec* null, %struct.timespec** %time, align 8, !dbg !14299, !tbaa !3867
  br label %if.end, !dbg !14301

if.else:                                          ; preds = %entry
  %4 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14302, !tbaa !3867
  %atime_s = getelementptr inbounds %struct.utime_t, %struct.utime_t* %4, i32 0, i32 1, !dbg !14305
  %5 = load i64, i64* %atime_s, align 8, !dbg !14305, !tbaa !6943
  %arrayidx = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 0, !dbg !14306
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx, i32 0, i32 0, !dbg !14307
  store i64 %5, i64* %tv_sec, align 8, !dbg !14308, !tbaa !7582
  %6 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14309, !tbaa !3867
  %atime_ns = getelementptr inbounds %struct.utime_t, %struct.utime_t* %6, i32 0, i32 2, !dbg !14310
  %7 = load i64, i64* %atime_ns, align 8, !dbg !14310, !tbaa !6947
  %arrayidx1 = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 0, !dbg !14311
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx1, i32 0, i32 1, !dbg !14312
  store i64 %7, i64* %tv_nsec, align 8, !dbg !14313, !tbaa !7586
  %8 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14314, !tbaa !3867
  %mtime_s = getelementptr inbounds %struct.utime_t, %struct.utime_t* %8, i32 0, i32 3, !dbg !14315
  %9 = load i64, i64* %mtime_s, align 8, !dbg !14315, !tbaa !6951
  %arrayidx2 = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 1, !dbg !14316
  %tv_sec3 = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx2, i32 0, i32 0, !dbg !14317
  store i64 %9, i64* %tv_sec3, align 8, !dbg !14318, !tbaa !7582
  %10 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14319, !tbaa !3867
  %mtime_ns = getelementptr inbounds %struct.utime_t, %struct.utime_t* %10, i32 0, i32 4, !dbg !14320
  %11 = load i64, i64* %mtime_ns, align 8, !dbg !14320, !tbaa !6955
  %arrayidx4 = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 1, !dbg !14321
  %tv_nsec5 = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx4, i32 0, i32 1, !dbg !14322
  store i64 %11, i64* %tv_nsec5, align 8, !dbg !14323, !tbaa !7586
  %arraydecay = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i32 0, !dbg !14324
  store %struct.timespec* %arraydecay, %struct.timespec** %time, align 8, !dbg !14325, !tbaa !3867
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %fd.addr, align 4, !dbg !14326, !tbaa !3840
  %13 = load %struct.timespec*, %struct.timespec** %time, align 8, !dbg !14327, !tbaa !3867
  %call = call i32 @futimens(i32 %12, %struct.timespec* %13) #3, !dbg !14328
  %14 = bitcast %struct.timespec** %time to i8*, !dbg !14329
  call void @llvm.lifetime.end(i64 8, i8* %14) #3, !dbg !14329
  %15 = bitcast [2 x %struct.timespec]* %ts to i8*, !dbg !14329
  call void @llvm.lifetime.end(i64 32, i8* %15) #3, !dbg !14329
  ret i32 %call, !dbg !14330
}

; Function Attrs: nounwind uwtable
define internal i32 @utime_default(%struct.utime_t* %utime, i8* %path) #0 {
entry:
  %utime.addr = alloca %struct.utime_t*, align 8
  %path.addr = alloca i8*, align 8
  %ts = alloca [2 x %struct.timespec], align 16
  %time = alloca %struct.timespec*, align 8
  store %struct.utime_t* %utime, %struct.utime_t** %utime.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.utime_t** %utime.addr, metadata !1604, metadata !3844), !dbg !14331
  store i8* %path, i8** %path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %path.addr, metadata !1605, metadata !3844), !dbg !14332
  %0 = bitcast [2 x %struct.timespec]* %ts to i8*, !dbg !14333
  call void @llvm.lifetime.start(i64 32, i8* %0) #3, !dbg !14333
  call void @llvm.dbg.declare(metadata [2 x %struct.timespec]* %ts, metadata !1606, metadata !3844), !dbg !14334
  %1 = bitcast %struct.timespec** %time to i8*, !dbg !14335
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !14335
  call void @llvm.dbg.declare(metadata %struct.timespec** %time, metadata !1607, metadata !3844), !dbg !14336
  %2 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14337, !tbaa !3867
  %now = getelementptr inbounds %struct.utime_t, %struct.utime_t* %2, i32 0, i32 0, !dbg !14339
  %3 = load i32, i32* %now, align 4, !dbg !14339, !tbaa !6921
  %tobool = icmp ne i32 %3, 0, !dbg !14337
  br i1 %tobool, label %if.then, label %if.else, !dbg !14340

if.then:                                          ; preds = %entry
  store %struct.timespec* null, %struct.timespec** %time, align 8, !dbg !14341, !tbaa !3867
  br label %if.end, !dbg !14343

if.else:                                          ; preds = %entry
  %4 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14344, !tbaa !3867
  %atime_s = getelementptr inbounds %struct.utime_t, %struct.utime_t* %4, i32 0, i32 1, !dbg !14347
  %5 = load i64, i64* %atime_s, align 8, !dbg !14347, !tbaa !6943
  %arrayidx = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 0, !dbg !14348
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx, i32 0, i32 0, !dbg !14349
  store i64 %5, i64* %tv_sec, align 8, !dbg !14350, !tbaa !7582
  %6 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14351, !tbaa !3867
  %atime_ns = getelementptr inbounds %struct.utime_t, %struct.utime_t* %6, i32 0, i32 2, !dbg !14352
  %7 = load i64, i64* %atime_ns, align 8, !dbg !14352, !tbaa !6947
  %arrayidx1 = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 0, !dbg !14353
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx1, i32 0, i32 1, !dbg !14354
  store i64 %7, i64* %tv_nsec, align 8, !dbg !14355, !tbaa !7586
  %8 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14356, !tbaa !3867
  %mtime_s = getelementptr inbounds %struct.utime_t, %struct.utime_t* %8, i32 0, i32 3, !dbg !14357
  %9 = load i64, i64* %mtime_s, align 8, !dbg !14357, !tbaa !6951
  %arrayidx2 = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 1, !dbg !14358
  %tv_sec3 = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx2, i32 0, i32 0, !dbg !14359
  store i64 %9, i64* %tv_sec3, align 8, !dbg !14360, !tbaa !7582
  %10 = load %struct.utime_t*, %struct.utime_t** %utime.addr, align 8, !dbg !14361, !tbaa !3867
  %mtime_ns = getelementptr inbounds %struct.utime_t, %struct.utime_t* %10, i32 0, i32 4, !dbg !14362
  %11 = load i64, i64* %mtime_ns, align 8, !dbg !14362, !tbaa !6955
  %arrayidx4 = getelementptr [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i64 1, !dbg !14363
  %tv_nsec5 = getelementptr inbounds %struct.timespec, %struct.timespec* %arrayidx4, i32 0, i32 1, !dbg !14364
  store i64 %11, i64* %tv_nsec5, align 8, !dbg !14365, !tbaa !7586
  %arraydecay = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %ts, i32 0, i32 0, !dbg !14366
  store %struct.timespec* %arraydecay, %struct.timespec** %time, align 8, !dbg !14367, !tbaa !3867
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load i8*, i8** %path.addr, align 8, !dbg !14368, !tbaa !3867
  %13 = load %struct.timespec*, %struct.timespec** %time, align 8, !dbg !14369, !tbaa !3867
  %call = call i32 @utimensat(i32 -100, i8* %12, %struct.timespec* %13, i32 0) #3, !dbg !14370
  %14 = bitcast %struct.timespec** %time to i8*, !dbg !14371
  call void @llvm.lifetime.end(i64 8, i8* %14) #3, !dbg !14371
  %15 = bitcast [2 x %struct.timespec]* %ts to i8*, !dbg !14371
  call void @llvm.lifetime.end(i64 32, i8* %15) #3, !dbg !14371
  ret i32 %call, !dbg !14372
}

declare %struct._object* @PyNumber_Divmod(%struct._object*, %struct._object*) #2

declare i64 @_PyLong_AsTime_t(%struct._object*) #2

declare i64 @PyLong_AsLong(%struct._object*) #2

; Function Attrs: nounwind
declare i32 @utimensat(i32, i8*, %struct.timespec*, i32) #4

; Function Attrs: nounwind
declare i32 @futimens(i32, %struct.timespec*) #4

; Function Attrs: nounwind
declare i64 @times(%struct.tms*) #4

; Function Attrs: nounwind uwtable
define internal %struct._object* @build_times_result(double %user, double %system, double %children_user, double %children_system, double %elapsed) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %user.addr = alloca double, align 8
  %system.addr = alloca double, align 8
  %children_user.addr = alloca double, align 8
  %children_system.addr = alloca double, align 8
  %elapsed.addr = alloca double, align 8
  %value = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %o = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %o7 = alloca %struct._object*, align 8
  %_py_decref_tmp12 = alloca %struct._object*, align 8
  %o29 = alloca %struct._object*, align 8
  %_py_decref_tmp34 = alloca %struct._object*, align 8
  %o51 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %o73 = alloca %struct._object*, align 8
  %_py_decref_tmp78 = alloca %struct._object*, align 8
  store double %user, double* %user.addr, align 8, !tbaa !11524
  call void @llvm.dbg.declare(metadata double* %user.addr, metadata !1625, metadata !3844), !dbg !14373
  store double %system, double* %system.addr, align 8, !tbaa !11524
  call void @llvm.dbg.declare(metadata double* %system.addr, metadata !1626, metadata !3844), !dbg !14374
  store double %children_user, double* %children_user.addr, align 8, !tbaa !11524
  call void @llvm.dbg.declare(metadata double* %children_user.addr, metadata !1627, metadata !3844), !dbg !14375
  store double %children_system, double* %children_system.addr, align 8, !tbaa !11524
  call void @llvm.dbg.declare(metadata double* %children_system.addr, metadata !1628, metadata !3844), !dbg !14376
  store double %elapsed, double* %elapsed.addr, align 8, !tbaa !11524
  call void @llvm.dbg.declare(metadata double* %elapsed.addr, metadata !1629, metadata !3844), !dbg !14377
  %0 = bitcast %struct._object** %value to i8*, !dbg !14378
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !14378
  call void @llvm.dbg.declare(metadata %struct._object** %value, metadata !1630, metadata !3844), !dbg !14379
  %call = call %struct._object* @PyStructSequence_New(%struct._typeobject* @TimesResultType), !dbg !14380
  store %struct._object* %call, %struct._object** %value, align 8, !dbg !14379, !tbaa !3867
  %1 = load %struct._object*, %struct._object** %value, align 8, !dbg !14381, !tbaa !3867
  %cmp = icmp eq %struct._object* %1, null, !dbg !14383
  br i1 %cmp, label %if.then, label %if.end, !dbg !14384

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !14385
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.95, !dbg !14385

if.end:                                           ; preds = %entry
  %2 = bitcast %struct._object** %o to i8*, !dbg !14386
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !14386
  call void @llvm.dbg.declare(metadata %struct._object** %o, metadata !1631, metadata !3844), !dbg !14387
  %3 = load double, double* %user.addr, align 8, !dbg !14388, !tbaa !11524
  %call1 = call %struct._object* @PyFloat_FromDouble(double %3), !dbg !14389
  store %struct._object* %call1, %struct._object** %o, align 8, !dbg !14387, !tbaa !3867
  %4 = load %struct._object*, %struct._object** %o, align 8, !dbg !14390, !tbaa !3867
  %tobool = icmp ne %struct._object* %4, null, !dbg !14390
  br i1 %tobool, label %if.end.6, label %if.then.2, !dbg !14391

if.then.2:                                        ; preds = %if.end
  br label %do.body, !dbg !14392

do.body:                                          ; preds = %if.then.2
  %5 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !14394
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !14394
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1633, metadata !3844), !dbg !14396
  %6 = load %struct._object*, %struct._object** %value, align 8, !dbg !14397, !tbaa !3867
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8, !dbg !14396, !tbaa !3867
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14398, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0, !dbg !14400
  %8 = load i64, i64* %ob_refcnt, align 8, !dbg !14401, !tbaa !3977
  %dec = add i64 %8, -1, !dbg !14401
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !14401, !tbaa !3977
  %cmp3 = icmp ne i64 %dec, 0, !dbg !14402
  br i1 %cmp3, label %if.then.4, label %if.else, !dbg !14403

if.then.4:                                        ; preds = %do.body
  br label %if.end.5, !dbg !14404

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14406, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1, !dbg !14408
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !14408, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4, !dbg !14409
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !14409, !tbaa !3986
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14410, !tbaa !3867
  call void %11(%struct._object* %12), !dbg !14411
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  %13 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !14412
  call void @llvm.lifetime.end(i64 8, i8* %13) #3, !dbg !14412
  br label %do.cond, !dbg !14414

do.cond:                                          ; preds = %if.end.5
  br label %do.end, !dbg !14415

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !14417
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !14419

if.end.6:                                         ; preds = %if.end
  %14 = load %struct._object*, %struct._object** %o, align 8, !dbg !14420, !tbaa !3867
  %15 = load %struct._object*, %struct._object** %value, align 8, !dbg !14422, !tbaa !3867
  %16 = bitcast %struct._object* %15 to %struct.PyTupleObject*, !dbg !14423
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %16, i32 0, i32 1, !dbg !14424
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !14425
  store %struct._object* %14, %struct._object** %arrayidx, align 8, !dbg !14426, !tbaa !3867
  store i32 0, i32* %cleanup.dest.slot, !dbg !14427
  br label %cleanup, !dbg !14427

cleanup:                                          ; preds = %if.end.6, %do.end
  %17 = bitcast %struct._object** %o to i8*, !dbg !14428
  call void @llvm.lifetime.end(i64 8, i8* %17) #3, !dbg !14428
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  %18 = bitcast %struct._object** %o7 to i8*, !dbg !14431
  call void @llvm.lifetime.start(i64 8, i8* %18) #3, !dbg !14431
  call void @llvm.dbg.declare(metadata %struct._object** %o7, metadata !1637, metadata !3844), !dbg !14432
  %19 = load double, double* %system.addr, align 8, !dbg !14433, !tbaa !11524
  %call8 = call %struct._object* @PyFloat_FromDouble(double %19), !dbg !14434
  store %struct._object* %call8, %struct._object** %o7, align 8, !dbg !14432, !tbaa !3867
  %20 = load %struct._object*, %struct._object** %o7, align 8, !dbg !14435, !tbaa !3867
  %tobool9 = icmp ne %struct._object* %20, null, !dbg !14435
  br i1 %tobool9, label %if.end.23, label %if.then.10, !dbg !14436

if.then.10:                                       ; preds = %cleanup.cont
  br label %do.body.11, !dbg !14437

do.body.11:                                       ; preds = %if.then.10
  %21 = bitcast %struct._object** %_py_decref_tmp12 to i8*, !dbg !14439
  call void @llvm.lifetime.start(i64 8, i8* %21) #3, !dbg !14439
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp12, metadata !1639, metadata !3844), !dbg !14441
  %22 = load %struct._object*, %struct._object** %value, align 8, !dbg !14442, !tbaa !3867
  store %struct._object* %22, %struct._object** %_py_decref_tmp12, align 8, !dbg !14441, !tbaa !3867
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8, !dbg !14443, !tbaa !3867
  %ob_refcnt13 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0, !dbg !14445
  %24 = load i64, i64* %ob_refcnt13, align 8, !dbg !14446, !tbaa !3977
  %dec14 = add i64 %24, -1, !dbg !14446
  store i64 %dec14, i64* %ob_refcnt13, align 8, !dbg !14446, !tbaa !3977
  %cmp15 = icmp ne i64 %dec14, 0, !dbg !14447
  br i1 %cmp15, label %if.then.16, label %if.else.17, !dbg !14448

if.then.16:                                       ; preds = %do.body.11
  br label %if.end.20, !dbg !14449

if.else.17:                                       ; preds = %do.body.11
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8, !dbg !14451, !tbaa !3867
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1, !dbg !14453
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8, !dbg !14453, !tbaa !3892
  %tp_dealloc19 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4, !dbg !14454
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc19, align 8, !dbg !14454, !tbaa !3986
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8, !dbg !14455, !tbaa !3867
  call void %27(%struct._object* %28), !dbg !14456
  br label %if.end.20

if.end.20:                                        ; preds = %if.else.17, %if.then.16
  %29 = bitcast %struct._object** %_py_decref_tmp12 to i8*, !dbg !14457
  call void @llvm.lifetime.end(i64 8, i8* %29) #3, !dbg !14457
  br label %do.cond.21, !dbg !14459

do.cond.21:                                       ; preds = %if.end.20
  br label %do.end.22, !dbg !14460

do.end.22:                                        ; preds = %do.cond.21
  store %struct._object* null, %struct._object** %retval, !dbg !14462
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.26, !dbg !14464

if.end.23:                                        ; preds = %cleanup.cont
  %30 = load %struct._object*, %struct._object** %o7, align 8, !dbg !14465, !tbaa !3867
  %31 = load %struct._object*, %struct._object** %value, align 8, !dbg !14467, !tbaa !3867
  %32 = bitcast %struct._object* %31 to %struct.PyTupleObject*, !dbg !14468
  %ob_item24 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %32, i32 0, i32 1, !dbg !14469
  %arrayidx25 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item24, i32 0, i64 1, !dbg !14470
  store %struct._object* %30, %struct._object** %arrayidx25, align 8, !dbg !14471, !tbaa !3867
  store i32 0, i32* %cleanup.dest.slot, !dbg !14472
  br label %cleanup.26, !dbg !14472

cleanup.26:                                       ; preds = %if.end.23, %do.end.22
  %33 = bitcast %struct._object** %o7 to i8*, !dbg !14473
  call void @llvm.lifetime.end(i64 8, i8* %33) #3, !dbg !14473
  %cleanup.dest.27 = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.2

LeafBlock.2:                                      ; preds = %cleanup.26
  %SwitchLeaf3 = icmp eq i32 %cleanup.dest.27, 0
  br i1 %SwitchLeaf3, label %cleanup.cont.28, label %NewDefault.1

cleanup.cont.28:                                  ; preds = %LeafBlock.2
  %34 = bitcast %struct._object** %o29 to i8*, !dbg !14474
  call void @llvm.lifetime.start(i64 8, i8* %34) #3, !dbg !14474
  call void @llvm.dbg.declare(metadata %struct._object** %o29, metadata !1643, metadata !3844), !dbg !14475
  %35 = load double, double* %children_user.addr, align 8, !dbg !14476, !tbaa !11524
  %call30 = call %struct._object* @PyFloat_FromDouble(double %35), !dbg !14477
  store %struct._object* %call30, %struct._object** %o29, align 8, !dbg !14475, !tbaa !3867
  %36 = load %struct._object*, %struct._object** %o29, align 8, !dbg !14478, !tbaa !3867
  %tobool31 = icmp ne %struct._object* %36, null, !dbg !14478
  br i1 %tobool31, label %if.end.45, label %if.then.32, !dbg !14479

if.then.32:                                       ; preds = %cleanup.cont.28
  br label %do.body.33, !dbg !14480

do.body.33:                                       ; preds = %if.then.32
  %37 = bitcast %struct._object** %_py_decref_tmp34 to i8*, !dbg !14482
  call void @llvm.lifetime.start(i64 8, i8* %37) #3, !dbg !14482
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp34, metadata !1645, metadata !3844), !dbg !14484
  %38 = load %struct._object*, %struct._object** %value, align 8, !dbg !14485, !tbaa !3867
  store %struct._object* %38, %struct._object** %_py_decref_tmp34, align 8, !dbg !14484, !tbaa !3867
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8, !dbg !14486, !tbaa !3867
  %ob_refcnt35 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0, !dbg !14488
  %40 = load i64, i64* %ob_refcnt35, align 8, !dbg !14489, !tbaa !3977
  %dec36 = add i64 %40, -1, !dbg !14489
  store i64 %dec36, i64* %ob_refcnt35, align 8, !dbg !14489, !tbaa !3977
  %cmp37 = icmp ne i64 %dec36, 0, !dbg !14490
  br i1 %cmp37, label %if.then.38, label %if.else.39, !dbg !14491

if.then.38:                                       ; preds = %do.body.33
  br label %if.end.42, !dbg !14492

if.else.39:                                       ; preds = %do.body.33
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8, !dbg !14494, !tbaa !3867
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1, !dbg !14496
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8, !dbg !14496, !tbaa !3892
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4, !dbg !14497
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8, !dbg !14497, !tbaa !3986
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8, !dbg !14498, !tbaa !3867
  call void %43(%struct._object* %44), !dbg !14499
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  %45 = bitcast %struct._object** %_py_decref_tmp34 to i8*, !dbg !14500
  call void @llvm.lifetime.end(i64 8, i8* %45) #3, !dbg !14500
  br label %do.cond.43, !dbg !14502

do.cond.43:                                       ; preds = %if.end.42
  br label %do.end.44, !dbg !14503

do.end.44:                                        ; preds = %do.cond.43
  store %struct._object* null, %struct._object** %retval, !dbg !14505
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.48, !dbg !14507

if.end.45:                                        ; preds = %cleanup.cont.28
  %46 = load %struct._object*, %struct._object** %o29, align 8, !dbg !14508, !tbaa !3867
  %47 = load %struct._object*, %struct._object** %value, align 8, !dbg !14510, !tbaa !3867
  %48 = bitcast %struct._object* %47 to %struct.PyTupleObject*, !dbg !14511
  %ob_item46 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %48, i32 0, i32 1, !dbg !14512
  %arrayidx47 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item46, i32 0, i64 2, !dbg !14513
  store %struct._object* %46, %struct._object** %arrayidx47, align 8, !dbg !14514, !tbaa !3867
  store i32 0, i32* %cleanup.dest.slot, !dbg !14515
  br label %cleanup.48, !dbg !14515

cleanup.48:                                       ; preds = %if.end.45, %do.end.44
  %49 = bitcast %struct._object** %o29 to i8*, !dbg !14516
  call void @llvm.lifetime.end(i64 8, i8* %49) #3, !dbg !14516
  %cleanup.dest.49 = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.5

LeafBlock.5:                                      ; preds = %cleanup.48
  %SwitchLeaf6 = icmp eq i32 %cleanup.dest.49, 0
  br i1 %SwitchLeaf6, label %cleanup.cont.50, label %NewDefault.4

cleanup.cont.50:                                  ; preds = %LeafBlock.5
  %50 = bitcast %struct._object** %o51 to i8*, !dbg !14517
  call void @llvm.lifetime.start(i64 8, i8* %50) #3, !dbg !14517
  call void @llvm.dbg.declare(metadata %struct._object** %o51, metadata !1649, metadata !3844), !dbg !14518
  %51 = load double, double* %children_system.addr, align 8, !dbg !14519, !tbaa !11524
  %call52 = call %struct._object* @PyFloat_FromDouble(double %51), !dbg !14520
  store %struct._object* %call52, %struct._object** %o51, align 8, !dbg !14518, !tbaa !3867
  %52 = load %struct._object*, %struct._object** %o51, align 8, !dbg !14521, !tbaa !3867
  %tobool53 = icmp ne %struct._object* %52, null, !dbg !14521
  br i1 %tobool53, label %if.end.67, label %if.then.54, !dbg !14522

if.then.54:                                       ; preds = %cleanup.cont.50
  br label %do.body.55, !dbg !14523

do.body.55:                                       ; preds = %if.then.54
  %53 = bitcast %struct._object** %_py_decref_tmp56 to i8*, !dbg !14525
  call void @llvm.lifetime.start(i64 8, i8* %53) #3, !dbg !14525
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp56, metadata !1651, metadata !3844), !dbg !14527
  %54 = load %struct._object*, %struct._object** %value, align 8, !dbg !14528, !tbaa !3867
  store %struct._object* %54, %struct._object** %_py_decref_tmp56, align 8, !dbg !14527, !tbaa !3867
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8, !dbg !14529, !tbaa !3867
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 0, !dbg !14531
  %56 = load i64, i64* %ob_refcnt57, align 8, !dbg !14532, !tbaa !3977
  %dec58 = add i64 %56, -1, !dbg !14532
  store i64 %dec58, i64* %ob_refcnt57, align 8, !dbg !14532, !tbaa !3977
  %cmp59 = icmp ne i64 %dec58, 0, !dbg !14533
  br i1 %cmp59, label %if.then.60, label %if.else.61, !dbg !14534

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64, !dbg !14535

if.else.61:                                       ; preds = %do.body.55
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8, !dbg !14537, !tbaa !3867
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 1, !dbg !14539
  %58 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8, !dbg !14539, !tbaa !3892
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %58, i32 0, i32 4, !dbg !14540
  %59 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8, !dbg !14540, !tbaa !3986
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8, !dbg !14541, !tbaa !3867
  call void %59(%struct._object* %60), !dbg !14542
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  %61 = bitcast %struct._object** %_py_decref_tmp56 to i8*, !dbg !14543
  call void @llvm.lifetime.end(i64 8, i8* %61) #3, !dbg !14543
  br label %do.cond.65, !dbg !14545

do.cond.65:                                       ; preds = %if.end.64
  br label %do.end.66, !dbg !14546

do.end.66:                                        ; preds = %do.cond.65
  store %struct._object* null, %struct._object** %retval, !dbg !14548
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.70, !dbg !14550

if.end.67:                                        ; preds = %cleanup.cont.50
  %62 = load %struct._object*, %struct._object** %o51, align 8, !dbg !14551, !tbaa !3867
  %63 = load %struct._object*, %struct._object** %value, align 8, !dbg !14553, !tbaa !3867
  %64 = bitcast %struct._object* %63 to %struct.PyTupleObject*, !dbg !14554
  %ob_item68 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %64, i32 0, i32 1, !dbg !14555
  %arrayidx69 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item68, i32 0, i64 3, !dbg !14556
  store %struct._object* %62, %struct._object** %arrayidx69, align 8, !dbg !14557, !tbaa !3867
  store i32 0, i32* %cleanup.dest.slot, !dbg !14558
  br label %cleanup.70, !dbg !14558

cleanup.70:                                       ; preds = %if.end.67, %do.end.66
  %65 = bitcast %struct._object** %o51 to i8*, !dbg !14559
  call void @llvm.lifetime.end(i64 8, i8* %65) #3, !dbg !14559
  %cleanup.dest.71 = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.8

LeafBlock.8:                                      ; preds = %cleanup.70
  %SwitchLeaf9 = icmp eq i32 %cleanup.dest.71, 0
  br i1 %SwitchLeaf9, label %cleanup.cont.72, label %NewDefault.7

cleanup.cont.72:                                  ; preds = %LeafBlock.8
  %66 = bitcast %struct._object** %o73 to i8*, !dbg !14560
  call void @llvm.lifetime.start(i64 8, i8* %66) #3, !dbg !14560
  call void @llvm.dbg.declare(metadata %struct._object** %o73, metadata !1655, metadata !3844), !dbg !14561
  %67 = load double, double* %elapsed.addr, align 8, !dbg !14562, !tbaa !11524
  %call74 = call %struct._object* @PyFloat_FromDouble(double %67), !dbg !14563
  store %struct._object* %call74, %struct._object** %o73, align 8, !dbg !14561, !tbaa !3867
  %68 = load %struct._object*, %struct._object** %o73, align 8, !dbg !14564, !tbaa !3867
  %tobool75 = icmp ne %struct._object* %68, null, !dbg !14564
  br i1 %tobool75, label %if.end.89, label %if.then.76, !dbg !14565

if.then.76:                                       ; preds = %cleanup.cont.72
  br label %do.body.77, !dbg !14566

do.body.77:                                       ; preds = %if.then.76
  %69 = bitcast %struct._object** %_py_decref_tmp78 to i8*, !dbg !14568
  call void @llvm.lifetime.start(i64 8, i8* %69) #3, !dbg !14568
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp78, metadata !1657, metadata !3844), !dbg !14570
  %70 = load %struct._object*, %struct._object** %value, align 8, !dbg !14571, !tbaa !3867
  store %struct._object* %70, %struct._object** %_py_decref_tmp78, align 8, !dbg !14570, !tbaa !3867
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8, !dbg !14572, !tbaa !3867
  %ob_refcnt79 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 0, !dbg !14574
  %72 = load i64, i64* %ob_refcnt79, align 8, !dbg !14575, !tbaa !3977
  %dec80 = add i64 %72, -1, !dbg !14575
  store i64 %dec80, i64* %ob_refcnt79, align 8, !dbg !14575, !tbaa !3977
  %cmp81 = icmp ne i64 %dec80, 0, !dbg !14576
  br i1 %cmp81, label %if.then.82, label %if.else.83, !dbg !14577

if.then.82:                                       ; preds = %do.body.77
  br label %if.end.86, !dbg !14578

if.else.83:                                       ; preds = %do.body.77
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8, !dbg !14580, !tbaa !3867
  %ob_type84 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 1, !dbg !14582
  %74 = load %struct._typeobject*, %struct._typeobject** %ob_type84, align 8, !dbg !14582, !tbaa !3892
  %tp_dealloc85 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %74, i32 0, i32 4, !dbg !14583
  %75 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc85, align 8, !dbg !14583, !tbaa !3986
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8, !dbg !14584, !tbaa !3867
  call void %75(%struct._object* %76), !dbg !14585
  br label %if.end.86

if.end.86:                                        ; preds = %if.else.83, %if.then.82
  %77 = bitcast %struct._object** %_py_decref_tmp78 to i8*, !dbg !14586
  call void @llvm.lifetime.end(i64 8, i8* %77) #3, !dbg !14586
  br label %do.cond.87, !dbg !14588

do.cond.87:                                       ; preds = %if.end.86
  br label %do.end.88, !dbg !14589

do.end.88:                                        ; preds = %do.cond.87
  store %struct._object* null, %struct._object** %retval, !dbg !14591
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.92, !dbg !14593

if.end.89:                                        ; preds = %cleanup.cont.72
  %78 = load %struct._object*, %struct._object** %o73, align 8, !dbg !14594, !tbaa !3867
  %79 = load %struct._object*, %struct._object** %value, align 8, !dbg !14596, !tbaa !3867
  %80 = bitcast %struct._object* %79 to %struct.PyTupleObject*, !dbg !14597
  %ob_item90 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %80, i32 0, i32 1, !dbg !14598
  %arrayidx91 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item90, i32 0, i64 4, !dbg !14599
  store %struct._object* %78, %struct._object** %arrayidx91, align 8, !dbg !14600, !tbaa !3867
  store i32 0, i32* %cleanup.dest.slot, !dbg !14601
  br label %cleanup.92, !dbg !14601

cleanup.92:                                       ; preds = %if.end.89, %do.end.88
  %81 = bitcast %struct._object** %o73 to i8*, !dbg !14602
  call void @llvm.lifetime.end(i64 8, i8* %81) #3, !dbg !14602
  %cleanup.dest.93 = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.11

LeafBlock.11:                                     ; preds = %cleanup.92
  %SwitchLeaf12 = icmp eq i32 %cleanup.dest.93, 0
  br i1 %SwitchLeaf12, label %cleanup.cont.94, label %NewDefault.10

cleanup.cont.94:                                  ; preds = %LeafBlock.11
  %82 = load %struct._object*, %struct._object** %value, align 8, !dbg !14603, !tbaa !3867
  store %struct._object* %82, %struct._object** %retval, !dbg !14604
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.95, !dbg !14604

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.95

NewDefault.1:                                     ; preds = %LeafBlock.2
  br label %cleanup.95

NewDefault.4:                                     ; preds = %LeafBlock.5
  br label %cleanup.95

NewDefault.7:                                     ; preds = %LeafBlock.8
  br label %cleanup.95

NewDefault.10:                                    ; preds = %LeafBlock.11
  br label %cleanup.95

cleanup.95:                                       ; preds = %NewDefault.10, %NewDefault.7, %NewDefault.4, %NewDefault.1, %NewDefault, %cleanup.cont.94, %if.then
  %83 = bitcast %struct._object** %value to i8*, !dbg !14605
  call void @llvm.lifetime.end(i64 8, i8* %83) #3, !dbg !14605
  %84 = load %struct._object*, %struct._object** %retval, !dbg !14605
  ret %struct._object* %84, !dbg !14605
}

; Function Attrs: noreturn
declare void @_exit(i32) #8

declare i64 @PySequence_Size(%struct._object*) #2

; Function Attrs: nounwind uwtable
define internal i8** @parse_arglist(%struct._object* %argv, i64* %argc) #0 {
entry:
  %retval = alloca i8**, align 8
  %argv.addr = alloca %struct._object*, align 8
  %argc.addr = alloca i64*, align 8
  %i = alloca i32, align 4
  %argvlist = alloca i8**, align 8
  %cleanup.dest.slot = alloca i32
  %item = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp21 = alloca %struct._object*, align 8
  store %struct._object* %argv, %struct._object** %argv.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %argv.addr, metadata !1693, metadata !3844), !dbg !14606
  store i64* %argc, i64** %argc.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i64** %argc.addr, metadata !1694, metadata !3844), !dbg !14607
  %0 = bitcast i32* %i to i8*, !dbg !14608
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !14608
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1695, metadata !3844), !dbg !14609
  %1 = bitcast i8*** %argvlist to i8*, !dbg !14610
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !14610
  call void @llvm.dbg.declare(metadata i8*** %argvlist, metadata !1696, metadata !3844), !dbg !14611
  %2 = load i64*, i64** %argc.addr, align 8, !dbg !14612, !tbaa !3867
  %3 = load i64, i64* %2, align 8, !dbg !14613, !tbaa !3904
  %add = add i64 %3, 1, !dbg !14614
  %cmp = icmp ugt i64 %add, 1152921504606846975, !dbg !14615
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !14616

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !14617

cond.false:                                       ; preds = %entry
  %4 = load i64*, i64** %argc.addr, align 8, !dbg !14619, !tbaa !3867
  %5 = load i64, i64* %4, align 8, !dbg !14621, !tbaa !3904
  %add1 = add i64 %5, 1, !dbg !14622
  %mul = mul i64 %add1, 8, !dbg !14623
  %call = call i8* @PyMem_Malloc(i64 %mul), !dbg !14624
  %6 = bitcast i8* %call to i8**, !dbg !14625
  br label %cond.end, !dbg !14616

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8** [ null, %cond.true ], [ %6, %cond.false ], !dbg !14616
  store i8** %cond, i8*** %argvlist, align 8, !dbg !14626, !tbaa !3867
  %7 = load i8**, i8*** %argvlist, align 8, !dbg !14629, !tbaa !3867
  %cmp2 = icmp eq i8** %7, null, !dbg !14631
  br i1 %cmp2, label %if.then, label %if.end, !dbg !14632

if.then:                                          ; preds = %cond.end
  %call3 = call %struct._object* @PyErr_NoMemory(), !dbg !14633
  store i8** null, i8*** %retval, !dbg !14635
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.35, !dbg !14635

if.end:                                           ; preds = %cond.end
  store i32 0, i32* %i, align 4, !dbg !14636, !tbaa !3840
  br label %for.cond, !dbg !14637

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4, !dbg !14638, !tbaa !3840
  %conv = sext i32 %8 to i64, !dbg !14638
  %9 = load i64*, i64** %argc.addr, align 8, !dbg !14641, !tbaa !3867
  %10 = load i64, i64* %9, align 8, !dbg !14642, !tbaa !3904
  %cmp4 = icmp slt i64 %conv, %10, !dbg !14643
  br i1 %cmp4, label %for.body, label %for.end, !dbg !14644

for.body:                                         ; preds = %for.cond
  %11 = bitcast %struct._object** %item to i8*, !dbg !14645
  call void @llvm.lifetime.start(i64 8, i8* %11) #3, !dbg !14645
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !1697, metadata !3844), !dbg !14646
  %12 = load %struct._object*, %struct._object** %argv.addr, align 8, !dbg !14647, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1, !dbg !14648
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !14648, !tbaa !3892
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 11, !dbg !14649
  %14 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !14649, !tbaa !14650
  %sq_item = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %14, i32 0, i32 3, !dbg !14651
  %15 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_item, align 8, !dbg !14651, !tbaa !14652
  %16 = load %struct._object*, %struct._object** %argv.addr, align 8, !dbg !14654, !tbaa !3867
  %17 = load i32, i32* %i, align 4, !dbg !14655, !tbaa !3840
  %conv6 = sext i32 %17 to i64, !dbg !14655
  %call7 = call %struct._object* %15(%struct._object* %16, i64 %conv6), !dbg !14656
  store %struct._object* %call7, %struct._object** %item, align 8, !dbg !14646, !tbaa !3867
  %18 = load %struct._object*, %struct._object** %item, align 8, !dbg !14657, !tbaa !3867
  %cmp8 = icmp eq %struct._object* %18, null, !dbg !14659
  br i1 %cmp8, label %if.then.10, label %if.end.11, !dbg !14660

if.then.10:                                       ; preds = %for.body
  store i32 5, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !14661

if.end.11:                                        ; preds = %for.body
  %19 = load %struct._object*, %struct._object** %item, align 8, !dbg !14662, !tbaa !3867
  %20 = load i32, i32* %i, align 4, !dbg !14663, !tbaa !3840
  %idxprom = sext i32 %20 to i64, !dbg !14664
  %21 = load i8**, i8*** %argvlist, align 8, !dbg !14664, !tbaa !3867
  %arrayidx = getelementptr i8*, i8** %21, i64 %idxprom, !dbg !14664
  %call12 = call i32 @fsconvert_strdup(%struct._object* %19, i8** %arrayidx), !dbg !14665
  %tobool = icmp ne i32 %call12, 0, !dbg !14665
  br i1 %tobool, label %if.end.19, label %if.then.13, !dbg !14666

if.then.13:                                       ; preds = %if.end.11
  br label %do.body, !dbg !14667

do.body:                                          ; preds = %if.then.13
  %22 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !14668
  call void @llvm.lifetime.start(i64 8, i8* %22) #3, !dbg !14668
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1701, metadata !3844), !dbg !14670
  %23 = load %struct._object*, %struct._object** %item, align 8, !dbg !14671, !tbaa !3867
  store %struct._object* %23, %struct._object** %_py_decref_tmp, align 8, !dbg !14670, !tbaa !3867
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14672, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0, !dbg !14674
  %25 = load i64, i64* %ob_refcnt, align 8, !dbg !14675, !tbaa !3977
  %dec = add i64 %25, -1, !dbg !14675
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !14675, !tbaa !3977
  %cmp14 = icmp ne i64 %dec, 0, !dbg !14676
  br i1 %cmp14, label %if.then.16, label %if.else, !dbg !14677

if.then.16:                                       ; preds = %do.body
  br label %if.end.18, !dbg !14678

if.else:                                          ; preds = %do.body
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14680, !tbaa !3867
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1, !dbg !14682
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8, !dbg !14682, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4, !dbg !14683
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !14683, !tbaa !3986
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14684, !tbaa !3867
  call void %28(%struct._object* %29), !dbg !14685
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.16
  %30 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !14686
  call void @llvm.lifetime.end(i64 8, i8* %30) #3, !dbg !14686
  br label %do.cond, !dbg !14688

do.cond:                                          ; preds = %if.end.18
  br label %do.end, !dbg !14689

do.end:                                           ; preds = %do.cond
  store i32 5, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !14691

if.end.19:                                        ; preds = %if.end.11
  br label %do.body.20, !dbg !14692

do.body.20:                                       ; preds = %if.end.19
  %31 = bitcast %struct._object** %_py_decref_tmp21 to i8*, !dbg !14693
  call void @llvm.lifetime.start(i64 8, i8* %31) #3, !dbg !14693
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp21, metadata !1705, metadata !3844), !dbg !14695
  %32 = load %struct._object*, %struct._object** %item, align 8, !dbg !14696, !tbaa !3867
  store %struct._object* %32, %struct._object** %_py_decref_tmp21, align 8, !dbg !14695, !tbaa !3867
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8, !dbg !14697, !tbaa !3867
  %ob_refcnt22 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0, !dbg !14699
  %34 = load i64, i64* %ob_refcnt22, align 8, !dbg !14700, !tbaa !3977
  %dec23 = add i64 %34, -1, !dbg !14700
  store i64 %dec23, i64* %ob_refcnt22, align 8, !dbg !14700, !tbaa !3977
  %cmp24 = icmp ne i64 %dec23, 0, !dbg !14701
  br i1 %cmp24, label %if.then.26, label %if.else.27, !dbg !14702

if.then.26:                                       ; preds = %do.body.20
  br label %if.end.30, !dbg !14703

if.else.27:                                       ; preds = %do.body.20
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8, !dbg !14705, !tbaa !3867
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1, !dbg !14707
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8, !dbg !14707, !tbaa !3892
  %tp_dealloc29 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4, !dbg !14708
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc29, align 8, !dbg !14708, !tbaa !3986
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8, !dbg !14709, !tbaa !3867
  call void %37(%struct._object* %38), !dbg !14710
  br label %if.end.30

if.end.30:                                        ; preds = %if.else.27, %if.then.26
  %39 = bitcast %struct._object** %_py_decref_tmp21 to i8*, !dbg !14711
  call void @llvm.lifetime.end(i64 8, i8* %39) #3, !dbg !14711
  br label %do.cond.31, !dbg !14713

do.cond.31:                                       ; preds = %if.end.30
  br label %do.end.32, !dbg !14714

do.end.32:                                        ; preds = %do.cond.31
  store i32 0, i32* %cleanup.dest.slot, !dbg !14716
  br label %cleanup, !dbg !14716

cleanup:                                          ; preds = %do.end.32, %do.end, %if.then.10
  %40 = bitcast %struct._object** %item to i8*, !dbg !14717
  call void @llvm.lifetime.end(i64 8, i8* %40) #3, !dbg !14717
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock

NodeBlock:                                        ; preds = %cleanup
  %Pivot = icmp slt i32 %cleanup.dest, 5
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %cleanup.dest, 5
  br i1 %SwitchLeaf2, label %fail, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %for.inc, !dbg !14718

for.inc:                                          ; preds = %cleanup.cont
  %41 = load i32, i32* %i, align 4, !dbg !14719, !tbaa !3840
  %inc = add i32 %41, 1, !dbg !14719
  store i32 %inc, i32* %i, align 4, !dbg !14719, !tbaa !3840
  br label %for.cond, !dbg !14720

for.end:                                          ; preds = %for.cond
  %42 = load i64*, i64** %argc.addr, align 8, !dbg !14721, !tbaa !3867
  %43 = load i64, i64* %42, align 8, !dbg !14722, !tbaa !3904
  %44 = load i8**, i8*** %argvlist, align 8, !dbg !14723, !tbaa !3867
  %arrayidx33 = getelementptr i8*, i8** %44, i64 %43, !dbg !14723
  store i8* null, i8** %arrayidx33, align 8, !dbg !14724, !tbaa !3867
  %45 = load i8**, i8*** %argvlist, align 8, !dbg !14725, !tbaa !3867
  store i8** %45, i8*** %retval, !dbg !14726
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.35, !dbg !14726

fail:                                             ; preds = %LeafBlock.1
  %46 = load i32, i32* %i, align 4, !dbg !14727, !tbaa !3840
  %conv34 = sext i32 %46 to i64, !dbg !14727
  %47 = load i64*, i64** %argc.addr, align 8, !dbg !14728, !tbaa !3867
  store i64 %conv34, i64* %47, align 8, !dbg !14729, !tbaa !3904
  %48 = load i8**, i8*** %argvlist, align 8, !dbg !14730, !tbaa !3867
  %49 = load i64*, i64** %argc.addr, align 8, !dbg !14731, !tbaa !3867
  %50 = load i64, i64* %49, align 8, !dbg !14732, !tbaa !3904
  call void @free_string_array(i8** %48, i64 %50), !dbg !14733
  store i8** null, i8*** %retval, !dbg !14734
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.35, !dbg !14734

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %cleanup.35

cleanup.35:                                       ; preds = %NewDefault, %fail, %for.end, %if.then
  %51 = bitcast i8*** %argvlist to i8*, !dbg !14735
  call void @llvm.lifetime.end(i64 8, i8* %51) #3, !dbg !14735
  %52 = bitcast i32* %i to i8*, !dbg !14735
  call void @llvm.lifetime.end(i64 4, i8* %52) #3, !dbg !14735
  %53 = load i8**, i8*** %retval, !dbg !14735
  ret i8** %53, !dbg !14735
}

; Function Attrs: nounwind
declare i32 @execv(i8*, i8**) #4

; Function Attrs: nounwind uwtable
define internal void @free_string_array(i8** %array, i64 %count) #0 {
entry:
  %array.addr = alloca i8**, align 8
  %count.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i8** %array, i8*** %array.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8*** %array.addr, metadata !1721, metadata !3844), !dbg !14736
  store i64 %count, i64* %count.addr, align 8, !tbaa !3904
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !1722, metadata !3844), !dbg !14737
  %0 = bitcast i64* %i to i8*, !dbg !14738
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !14738
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1723, metadata !3844), !dbg !14739
  store i64 0, i64* %i, align 8, !dbg !14740, !tbaa !3904
  br label %for.cond, !dbg !14742

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !dbg !14743, !tbaa !3904
  %2 = load i64, i64* %count.addr, align 8, !dbg !14747, !tbaa !3904
  %cmp = icmp slt i64 %1, %2, !dbg !14748
  br i1 %cmp, label %for.body, label %for.end, !dbg !14749

for.body:                                         ; preds = %for.cond
  %3 = load i64, i64* %i, align 8, !dbg !14750, !tbaa !3904
  %4 = load i8**, i8*** %array.addr, align 8, !dbg !14751, !tbaa !3867
  %arrayidx = getelementptr i8*, i8** %4, i64 %3, !dbg !14751
  %5 = load i8*, i8** %arrayidx, align 8, !dbg !14751, !tbaa !3867
  call void @PyMem_Free(i8* %5), !dbg !14752
  br label %for.inc, !dbg !14752

for.inc:                                          ; preds = %for.body
  %6 = load i64, i64* %i, align 8, !dbg !14753, !tbaa !3904
  %inc = add i64 %6, 1, !dbg !14753
  store i64 %inc, i64* %i, align 8, !dbg !14753, !tbaa !3904
  br label %for.cond, !dbg !14754

for.end:                                          ; preds = %for.cond
  %7 = load i8**, i8*** %array.addr, align 8, !dbg !14755, !tbaa !3867
  %8 = bitcast i8** %7 to i8*, !dbg !14755
  call void @PyMem_Free(i8* %8), !dbg !14756
  %9 = bitcast i64* %i to i8*, !dbg !14757
  call void @llvm.lifetime.end(i64 8, i8* %9) #3, !dbg !14757
  ret void, !dbg !14757
}

declare i8* @PyMem_Malloc(i64) #2

declare %struct._object* @PyErr_NoMemory() #2

; Function Attrs: nounwind uwtable
define internal i32 @fsconvert_strdup(%struct._object* %o, i8** %out) #0 {
entry:
  %retval = alloca i32, align 4
  %o.addr = alloca %struct._object*, align 8
  %out.addr = alloca i8**, align 8
  %bytes = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1711, metadata !3844), !dbg !14758
  store i8** %out, i8*** %out.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8*** %out.addr, metadata !1712, metadata !3844), !dbg !14759
  %0 = bitcast %struct._object** %bytes to i8*, !dbg !14760
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !14760
  call void @llvm.dbg.declare(metadata %struct._object** %bytes, metadata !1713, metadata !3844), !dbg !14761
  %1 = bitcast i64* %size to i8*, !dbg !14762
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !14762
  call void @llvm.dbg.declare(metadata i64* %size, metadata !1714, metadata !3844), !dbg !14763
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !14764, !tbaa !3867
  %3 = bitcast %struct._object** %bytes to i8*, !dbg !14766
  %call = call i32 @PyUnicode_FSConverter(%struct._object* %2, i8* %3), !dbg !14767
  %tobool = icmp ne i32 %call, 0, !dbg !14767
  br i1 %tobool, label %if.end, label %if.then, !dbg !14768

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !14769
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !14769

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %bytes, align 8, !dbg !14770, !tbaa !3867
  %5 = bitcast %struct._object* %4 to %struct.PyVarObject*, !dbg !14771
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %5, i32 0, i32 1, !dbg !14772
  %6 = load i64, i64* %ob_size, align 8, !dbg !14772, !tbaa !11566
  store i64 %6, i64* %size, align 8, !dbg !14773, !tbaa !3904
  %7 = load i64, i64* %size, align 8, !dbg !14774, !tbaa !3904
  %add = add i64 %7, 1, !dbg !14775
  %call1 = call i8* @PyMem_Malloc(i64 %add), !dbg !14776
  %8 = load i8**, i8*** %out.addr, align 8, !dbg !14777, !tbaa !3867
  store i8* %call1, i8** %8, align 8, !dbg !14778, !tbaa !3867
  %9 = load i8**, i8*** %out.addr, align 8, !dbg !14779, !tbaa !3867
  %10 = load i8*, i8** %9, align 8, !dbg !14781, !tbaa !3867
  %tobool2 = icmp ne i8* %10, null, !dbg !14781
  br i1 %tobool2, label %if.end.5, label %if.then.3, !dbg !14782

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @PyErr_NoMemory(), !dbg !14783
  store i32 0, i32* %retval, !dbg !14785
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !14785

if.end.5:                                         ; preds = %if.end
  %11 = load i8**, i8*** %out.addr, align 8, !dbg !14786, !tbaa !3867
  %12 = load i8*, i8** %11, align 8, !dbg !14787, !tbaa !3867
  %13 = load %struct._object*, %struct._object** %bytes, align 8, !dbg !14788, !tbaa !3867
  %call6 = call i8* @PyBytes_AsString(%struct._object* %13), !dbg !14789
  %14 = load i64, i64* %size, align 8, !dbg !14790, !tbaa !3904
  %add7 = add i64 %14, 1, !dbg !14791
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %call6, i64 %add7, i32 1, i1 false), !dbg !14792
  br label %do.body, !dbg !14793

do.body:                                          ; preds = %if.end.5
  %15 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !14794
  call void @llvm.lifetime.start(i64 8, i8* %15) #3, !dbg !14794
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1715, metadata !3844), !dbg !14796
  %16 = load %struct._object*, %struct._object** %bytes, align 8, !dbg !14797, !tbaa !3867
  store %struct._object* %16, %struct._object** %_py_decref_tmp, align 8, !dbg !14796, !tbaa !3867
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14798, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0, !dbg !14800
  %18 = load i64, i64* %ob_refcnt, align 8, !dbg !14801, !tbaa !3977
  %dec = add i64 %18, -1, !dbg !14801
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !14801, !tbaa !3977
  %cmp = icmp ne i64 %dec, 0, !dbg !14802
  br i1 %cmp, label %if.then.8, label %if.else, !dbg !14803

if.then.8:                                        ; preds = %do.body
  br label %if.end.9, !dbg !14804

if.else:                                          ; preds = %do.body
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14806, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1, !dbg !14808
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !14808, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4, !dbg !14809
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !14809, !tbaa !3986
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14810, !tbaa !3867
  call void %21(%struct._object* %22), !dbg !14811
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  %23 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !14812
  call void @llvm.lifetime.end(i64 8, i8* %23) #3, !dbg !14812
  br label %do.cond, !dbg !14814

do.cond:                                          ; preds = %if.end.9
  br label %do.end, !dbg !14815

do.end:                                           ; preds = %do.cond
  store i32 1, i32* %retval, !dbg !14817
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !14817

cleanup:                                          ; preds = %do.end, %if.then.3, %if.then
  %24 = bitcast i64* %size to i8*, !dbg !14818
  call void @llvm.lifetime.end(i64 8, i8* %24) #3, !dbg !14818
  %25 = bitcast %struct._object** %bytes to i8*, !dbg !14818
  call void @llvm.lifetime.end(i64 8, i8* %25) #3, !dbg !14818
  %26 = load i32, i32* %retval, !dbg !14818
  ret i32 %26, !dbg !14818
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #3

declare void @PyMem_Free(i8*) #2

declare i32 @PyMapping_Check(%struct._object*) #2

; Function Attrs: nounwind uwtable
define internal i8** @parse_envlist(%struct._object* %env, i64* %envc_ptr) #0 {
entry:
  %retval = alloca i8**, align 8
  %env.addr = alloca %struct._object*, align 8
  %envc_ptr.addr = alloca i64*, align 8
  %envlist = alloca i8**, align 8
  %i = alloca i64, align 8
  %pos = alloca i64, align 8
  %envc = alloca i64, align 8
  %keys = alloca %struct._object*, align 8
  %vals = alloca %struct._object*, align 8
  %key = alloca %struct._object*, align 8
  %val = alloca %struct._object*, align 8
  %key2 = alloca %struct._object*, align 8
  %val2 = alloca %struct._object*, align 8
  %p = alloca i8*, align 8
  %k = alloca i8*, align 8
  %v = alloca i8*, align 8
  %len = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp59 = alloca %struct._object*, align 8
  %_py_decref_tmp71 = alloca %struct._object*, align 8
  %_py_decref_tmp85 = alloca %struct._object*, align 8
  %_py_decref_tmp97 = alloca %struct._object*, align 8
  %_py_decref_tmp110 = alloca %struct._object*, align 8
  %_py_decref_tmp122 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp138 = alloca %struct._object*, align 8
  %_py_xdecref_tmp153 = alloca %struct._object*, align 8
  %_py_decref_tmp157 = alloca %struct._object*, align 8
  store %struct._object* %env, %struct._object** %env.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %env.addr, metadata !1738, metadata !3844), !dbg !14819
  store i64* %envc_ptr, i64** %envc_ptr.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i64** %envc_ptr.addr, metadata !1739, metadata !3844), !dbg !14820
  %0 = bitcast i8*** %envlist to i8*, !dbg !14821
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !14821
  call void @llvm.dbg.declare(metadata i8*** %envlist, metadata !1740, metadata !3844), !dbg !14822
  %1 = bitcast i64* %i to i8*, !dbg !14823
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !14823
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1741, metadata !3844), !dbg !14824
  %2 = bitcast i64* %pos to i8*, !dbg !14823
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !14823
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !1742, metadata !3844), !dbg !14825
  %3 = bitcast i64* %envc to i8*, !dbg !14823
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !14823
  call void @llvm.dbg.declare(metadata i64* %envc, metadata !1743, metadata !3844), !dbg !14826
  %4 = bitcast %struct._object** %keys to i8*, !dbg !14827
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !14827
  call void @llvm.dbg.declare(metadata %struct._object** %keys, metadata !1744, metadata !3844), !dbg !14828
  store %struct._object* null, %struct._object** %keys, align 8, !dbg !14828, !tbaa !3867
  %5 = bitcast %struct._object** %vals to i8*, !dbg !14827
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !14827
  call void @llvm.dbg.declare(metadata %struct._object** %vals, metadata !1745, metadata !3844), !dbg !14829
  store %struct._object* null, %struct._object** %vals, align 8, !dbg !14829, !tbaa !3867
  %6 = bitcast %struct._object** %key to i8*, !dbg !14830
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !14830
  call void @llvm.dbg.declare(metadata %struct._object** %key, metadata !1746, metadata !3844), !dbg !14831
  %7 = bitcast %struct._object** %val to i8*, !dbg !14830
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !14830
  call void @llvm.dbg.declare(metadata %struct._object** %val, metadata !1747, metadata !3844), !dbg !14832
  %8 = bitcast %struct._object** %key2 to i8*, !dbg !14830
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !14830
  call void @llvm.dbg.declare(metadata %struct._object** %key2, metadata !1748, metadata !3844), !dbg !14833
  %9 = bitcast %struct._object** %val2 to i8*, !dbg !14830
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !14830
  call void @llvm.dbg.declare(metadata %struct._object** %val2, metadata !1749, metadata !3844), !dbg !14834
  %10 = bitcast i8** %p to i8*, !dbg !14835
  call void @llvm.lifetime.start(i64 8, i8* %10) #3, !dbg !14835
  call void @llvm.dbg.declare(metadata i8** %p, metadata !1750, metadata !3844), !dbg !14836
  %11 = bitcast i8** %k to i8*, !dbg !14835
  call void @llvm.lifetime.start(i64 8, i8* %11) #3, !dbg !14835
  call void @llvm.dbg.declare(metadata i8** %k, metadata !1751, metadata !3844), !dbg !14837
  %12 = bitcast i8** %v to i8*, !dbg !14835
  call void @llvm.lifetime.start(i64 8, i8* %12) #3, !dbg !14835
  call void @llvm.dbg.declare(metadata i8** %v, metadata !1752, metadata !3844), !dbg !14838
  %13 = bitcast i64* %len to i8*, !dbg !14839
  call void @llvm.lifetime.start(i64 8, i8* %13) #3, !dbg !14839
  call void @llvm.dbg.declare(metadata i64* %len, metadata !1753, metadata !3844), !dbg !14840
  %14 = load %struct._object*, %struct._object** %env.addr, align 8, !dbg !14841, !tbaa !3867
  %call = call i64 @PyMapping_Size(%struct._object* %14), !dbg !14842
  store i64 %call, i64* %i, align 8, !dbg !14843, !tbaa !3904
  %15 = load i64, i64* %i, align 8, !dbg !14844, !tbaa !3904
  %cmp = icmp slt i64 %15, 0, !dbg !14846
  br i1 %cmp, label %if.then, label %if.end, !dbg !14847

if.then:                                          ; preds = %entry
  store i8** null, i8*** %retval, !dbg !14848
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !14848

if.end:                                           ; preds = %entry
  %16 = load i64, i64* %i, align 8, !dbg !14849, !tbaa !3904
  %add = add i64 %16, 1, !dbg !14850
  %cmp1 = icmp ugt i64 %add, 1152921504606846975, !dbg !14851
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !14852

cond.true:                                        ; preds = %if.end
  br label %cond.end, !dbg !14853

cond.false:                                       ; preds = %if.end
  %17 = load i64, i64* %i, align 8, !dbg !14855, !tbaa !3904
  %add2 = add i64 %17, 1, !dbg !14857
  %mul = mul i64 %add2, 8, !dbg !14858
  %call3 = call i8* @PyMem_Malloc(i64 %mul), !dbg !14859
  %18 = bitcast i8* %call3 to i8**, !dbg !14860
  br label %cond.end, !dbg !14852

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8** [ null, %cond.true ], [ %18, %cond.false ], !dbg !14852
  store i8** %cond, i8*** %envlist, align 8, !dbg !14861, !tbaa !3867
  %19 = load i8**, i8*** %envlist, align 8, !dbg !14864, !tbaa !3867
  %cmp4 = icmp eq i8** %19, null, !dbg !14866
  br i1 %cmp4, label %if.then.5, label %if.end.7, !dbg !14867

if.then.5:                                        ; preds = %cond.end
  %call6 = call %struct._object* @PyErr_NoMemory(), !dbg !14868
  store i8** null, i8*** %retval, !dbg !14870
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !14870

if.end.7:                                         ; preds = %cond.end
  store i64 0, i64* %envc, align 8, !dbg !14871, !tbaa !3904
  %20 = load %struct._object*, %struct._object** %env.addr, align 8, !dbg !14872, !tbaa !3867
  %call8 = call %struct._object* @PyMapping_Keys(%struct._object* %20), !dbg !14873
  store %struct._object* %call8, %struct._object** %keys, align 8, !dbg !14874, !tbaa !3867
  %21 = load %struct._object*, %struct._object** %keys, align 8, !dbg !14875, !tbaa !3867
  %tobool = icmp ne %struct._object* %21, null, !dbg !14875
  br i1 %tobool, label %if.end.10, label %if.then.9, !dbg !14877

if.then.9:                                        ; preds = %if.end.7
  br label %error, !dbg !14878

if.end.10:                                        ; preds = %if.end.7
  %22 = load %struct._object*, %struct._object** %env.addr, align 8, !dbg !14879, !tbaa !3867
  %call11 = call %struct._object* @PyMapping_Values(%struct._object* %22), !dbg !14880
  store %struct._object* %call11, %struct._object** %vals, align 8, !dbg !14881, !tbaa !3867
  %23 = load %struct._object*, %struct._object** %vals, align 8, !dbg !14882, !tbaa !3867
  %tobool12 = icmp ne %struct._object* %23, null, !dbg !14882
  br i1 %tobool12, label %if.end.14, label %if.then.13, !dbg !14884

if.then.13:                                       ; preds = %if.end.10
  br label %error, !dbg !14885

if.end.14:                                        ; preds = %if.end.10
  %24 = load %struct._object*, %struct._object** %keys, align 8, !dbg !14886, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1, !dbg !14888
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !14888, !tbaa !3892
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 19, !dbg !14889
  %26 = load i64, i64* %tp_flags, align 8, !dbg !14889, !tbaa !6259
  %and = and i64 %26, 33554432, !dbg !14890
  %cmp15 = icmp ne i64 %and, 0, !dbg !14891
  br i1 %cmp15, label %lor.lhs.false, label %if.then.20, !dbg !14892

lor.lhs.false:                                    ; preds = %if.end.14
  %27 = load %struct._object*, %struct._object** %vals, align 8, !dbg !14893, !tbaa !3867
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1, !dbg !14895
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8, !dbg !14895, !tbaa !3892
  %tp_flags17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 19, !dbg !14896
  %29 = load i64, i64* %tp_flags17, align 8, !dbg !14896, !tbaa !6259
  %and18 = and i64 %29, 33554432, !dbg !14897
  %cmp19 = icmp ne i64 %and18, 0, !dbg !14898
  br i1 %cmp19, label %if.end.22, label %if.then.20, !dbg !14899

if.then.20:                                       ; preds = %lor.lhs.false, %if.end.14
  %30 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !14900, !tbaa !3867
  %call21 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %30, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.236, i32 0, i32 0)), !dbg !14902
  br label %error, !dbg !14903

if.end.22:                                        ; preds = %lor.lhs.false
  store i64 0, i64* %pos, align 8, !dbg !14904, !tbaa !3904
  br label %for.cond, !dbg !14905

for.cond:                                         ; preds = %for.inc, %if.end.22
  %31 = load i64, i64* %pos, align 8, !dbg !14906, !tbaa !3904
  %32 = load i64, i64* %i, align 8, !dbg !14909, !tbaa !3904
  %cmp23 = icmp slt i64 %31, %32, !dbg !14910
  br i1 %cmp23, label %for.body, label %for.end, !dbg !14911

for.body:                                         ; preds = %for.cond
  %33 = load %struct._object*, %struct._object** %keys, align 8, !dbg !14912, !tbaa !3867
  %34 = load i64, i64* %pos, align 8, !dbg !14913, !tbaa !3904
  %call24 = call %struct._object* @PyList_GetItem(%struct._object* %33, i64 %34), !dbg !14914
  store %struct._object* %call24, %struct._object** %key, align 8, !dbg !14915, !tbaa !3867
  %35 = load %struct._object*, %struct._object** %vals, align 8, !dbg !14916, !tbaa !3867
  %36 = load i64, i64* %pos, align 8, !dbg !14917, !tbaa !3904
  %call25 = call %struct._object* @PyList_GetItem(%struct._object* %35, i64 %36), !dbg !14918
  store %struct._object* %call25, %struct._object** %val, align 8, !dbg !14919, !tbaa !3867
  %37 = load %struct._object*, %struct._object** %key, align 8, !dbg !14920, !tbaa !3867
  %tobool26 = icmp ne %struct._object* %37, null, !dbg !14920
  br i1 %tobool26, label %lor.lhs.false.27, label %if.then.29, !dbg !14922

lor.lhs.false.27:                                 ; preds = %for.body
  %38 = load %struct._object*, %struct._object** %val, align 8, !dbg !14923, !tbaa !3867
  %tobool28 = icmp ne %struct._object* %38, null, !dbg !14923
  br i1 %tobool28, label %if.end.30, label %if.then.29, !dbg !14925

if.then.29:                                       ; preds = %lor.lhs.false.27, %for.body
  br label %error, !dbg !14926

if.end.30:                                        ; preds = %lor.lhs.false.27
  %39 = load %struct._object*, %struct._object** %key, align 8, !dbg !14927, !tbaa !3867
  %40 = bitcast %struct._object** %key2 to i8*, !dbg !14929
  %call31 = call i32 @PyUnicode_FSConverter(%struct._object* %39, i8* %40), !dbg !14930
  %cmp32 = icmp eq i32 %call31, 0, !dbg !14931
  br i1 %cmp32, label %if.then.33, label %if.end.34, !dbg !14932

if.then.33:                                       ; preds = %if.end.30
  br label %error, !dbg !14933

if.end.34:                                        ; preds = %if.end.30
  %41 = load %struct._object*, %struct._object** %val, align 8, !dbg !14934, !tbaa !3867
  %42 = bitcast %struct._object** %val2 to i8*, !dbg !14935
  %call35 = call i32 @PyUnicode_FSConverter(%struct._object* %41, i8* %42), !dbg !14936
  %cmp36 = icmp eq i32 %call35, 0, !dbg !14937
  br i1 %cmp36, label %if.then.37, label %if.end.42, !dbg !14938

if.then.37:                                       ; preds = %if.end.34
  br label %do.body, !dbg !14939

do.body:                                          ; preds = %if.then.37
  %43 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !14940
  call void @llvm.lifetime.start(i64 8, i8* %43) #3, !dbg !14940
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1754, metadata !3844), !dbg !14942
  %44 = load %struct._object*, %struct._object** %key2, align 8, !dbg !14943, !tbaa !3867
  store %struct._object* %44, %struct._object** %_py_decref_tmp, align 8, !dbg !14942, !tbaa !3867
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14944, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 0, !dbg !14946
  %46 = load i64, i64* %ob_refcnt, align 8, !dbg !14947, !tbaa !3977
  %dec = add i64 %46, -1, !dbg !14947
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !14947, !tbaa !3977
  %cmp38 = icmp ne i64 %dec, 0, !dbg !14948
  br i1 %cmp38, label %if.then.39, label %if.else, !dbg !14949

if.then.39:                                       ; preds = %do.body
  br label %if.end.41, !dbg !14950

if.else:                                          ; preds = %do.body
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14952, !tbaa !3867
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 1, !dbg !14954
  %48 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8, !dbg !14954, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %48, i32 0, i32 4, !dbg !14955
  %49 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !14955, !tbaa !3986
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !14956, !tbaa !3867
  call void %49(%struct._object* %50), !dbg !14957
  br label %if.end.41

if.end.41:                                        ; preds = %if.else, %if.then.39
  %51 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !14958
  call void @llvm.lifetime.end(i64 8, i8* %51) #3, !dbg !14958
  br label %do.cond, !dbg !14960

do.cond:                                          ; preds = %if.end.41
  br label %do.end, !dbg !14961

do.end:                                           ; preds = %do.cond
  br label %error, !dbg !14963

if.end.42:                                        ; preds = %if.end.34
  %52 = load %struct._object*, %struct._object** %key2, align 8, !dbg !14964, !tbaa !3867
  %call43 = call i8* @PyBytes_AsString(%struct._object* %52), !dbg !14965
  store i8* %call43, i8** %k, align 8, !dbg !14966, !tbaa !3867
  %53 = load %struct._object*, %struct._object** %val2, align 8, !dbg !14967, !tbaa !3867
  %call44 = call i8* @PyBytes_AsString(%struct._object* %53), !dbg !14968
  store i8* %call44, i8** %v, align 8, !dbg !14969, !tbaa !3867
  %54 = load %struct._object*, %struct._object** %key2, align 8, !dbg !14970, !tbaa !3867
  %55 = bitcast %struct._object* %54 to %struct.PyVarObject*, !dbg !14971
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %55, i32 0, i32 1, !dbg !14972
  %56 = load i64, i64* %ob_size, align 8, !dbg !14972, !tbaa !11566
  %57 = load %struct._object*, %struct._object** %val2, align 8, !dbg !14973, !tbaa !3867
  %58 = bitcast %struct._object* %57 to %struct.PyVarObject*, !dbg !14974
  %ob_size45 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %58, i32 0, i32 1, !dbg !14975
  %59 = load i64, i64* %ob_size45, align 8, !dbg !14975, !tbaa !11566
  %add46 = add i64 %56, %59, !dbg !14976
  %add47 = add i64 %add46, 2, !dbg !14977
  store i64 %add47, i64* %len, align 8, !dbg !14978, !tbaa !3904
  %60 = load i64, i64* %len, align 8, !dbg !14979, !tbaa !3904
  %cmp48 = icmp ugt i64 %60, 9223372036854775807, !dbg !14980
  br i1 %cmp48, label %cond.true.49, label %cond.false.50, !dbg !14981

cond.true.49:                                     ; preds = %if.end.42
  br label %cond.end.53, !dbg !14982

cond.false.50:                                    ; preds = %if.end.42
  %61 = load i64, i64* %len, align 8, !dbg !14984, !tbaa !3904
  %mul51 = mul i64 %61, 1, !dbg !14986
  %call52 = call i8* @PyMem_Malloc(i64 %mul51), !dbg !14987
  br label %cond.end.53, !dbg !14981

cond.end.53:                                      ; preds = %cond.false.50, %cond.true.49
  %cond54 = phi i8* [ null, %cond.true.49 ], [ %call52, %cond.false.50 ], !dbg !14981
  store i8* %cond54, i8** %p, align 8, !dbg !14988, !tbaa !3867
  %62 = load i8*, i8** %p, align 8, !dbg !14991, !tbaa !3867
  %cmp55 = icmp eq i8* %62, null, !dbg !14992
  br i1 %cmp55, label %if.then.56, label %if.end.82, !dbg !14993

if.then.56:                                       ; preds = %cond.end.53
  %call57 = call %struct._object* @PyErr_NoMemory(), !dbg !14994
  br label %do.body.58, !dbg !14995

do.body.58:                                       ; preds = %if.then.56
  %63 = bitcast %struct._object** %_py_decref_tmp59 to i8*, !dbg !14996
  call void @llvm.lifetime.start(i64 8, i8* %63) #3, !dbg !14996
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp59, metadata !1761, metadata !3844), !dbg !14998
  %64 = load %struct._object*, %struct._object** %key2, align 8, !dbg !14999, !tbaa !3867
  store %struct._object* %64, %struct._object** %_py_decref_tmp59, align 8, !dbg !14998, !tbaa !3867
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8, !dbg !15000, !tbaa !3867
  %ob_refcnt60 = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 0, !dbg !15002
  %66 = load i64, i64* %ob_refcnt60, align 8, !dbg !15003, !tbaa !3977
  %dec61 = add i64 %66, -1, !dbg !15003
  store i64 %dec61, i64* %ob_refcnt60, align 8, !dbg !15003, !tbaa !3977
  %cmp62 = icmp ne i64 %dec61, 0, !dbg !15004
  br i1 %cmp62, label %if.then.63, label %if.else.64, !dbg !15005

if.then.63:                                       ; preds = %do.body.58
  br label %if.end.67, !dbg !15006

if.else.64:                                       ; preds = %do.body.58
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8, !dbg !15008, !tbaa !3867
  %ob_type65 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 1, !dbg !15010
  %68 = load %struct._typeobject*, %struct._typeobject** %ob_type65, align 8, !dbg !15010, !tbaa !3892
  %tp_dealloc66 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %68, i32 0, i32 4, !dbg !15011
  %69 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc66, align 8, !dbg !15011, !tbaa !3986
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8, !dbg !15012, !tbaa !3867
  call void %69(%struct._object* %70), !dbg !15013
  br label %if.end.67

if.end.67:                                        ; preds = %if.else.64, %if.then.63
  %71 = bitcast %struct._object** %_py_decref_tmp59 to i8*, !dbg !15014
  call void @llvm.lifetime.end(i64 8, i8* %71) #3, !dbg !15014
  br label %do.cond.68, !dbg !15016

do.cond.68:                                       ; preds = %if.end.67
  br label %do.end.69, !dbg !15017

do.end.69:                                        ; preds = %do.cond.68
  br label %do.body.70, !dbg !15019

do.body.70:                                       ; preds = %do.end.69
  %72 = bitcast %struct._object** %_py_decref_tmp71 to i8*, !dbg !15020
  call void @llvm.lifetime.start(i64 8, i8* %72) #3, !dbg !15020
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp71, metadata !1765, metadata !3844), !dbg !15022
  %73 = load %struct._object*, %struct._object** %val2, align 8, !dbg !15023, !tbaa !3867
  store %struct._object* %73, %struct._object** %_py_decref_tmp71, align 8, !dbg !15022, !tbaa !3867
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8, !dbg !15024, !tbaa !3867
  %ob_refcnt72 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 0, !dbg !15026
  %75 = load i64, i64* %ob_refcnt72, align 8, !dbg !15027, !tbaa !3977
  %dec73 = add i64 %75, -1, !dbg !15027
  store i64 %dec73, i64* %ob_refcnt72, align 8, !dbg !15027, !tbaa !3977
  %cmp74 = icmp ne i64 %dec73, 0, !dbg !15028
  br i1 %cmp74, label %if.then.75, label %if.else.76, !dbg !15029

if.then.75:                                       ; preds = %do.body.70
  br label %if.end.79, !dbg !15030

if.else.76:                                       ; preds = %do.body.70
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8, !dbg !15032, !tbaa !3867
  %ob_type77 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 1, !dbg !15034
  %77 = load %struct._typeobject*, %struct._typeobject** %ob_type77, align 8, !dbg !15034, !tbaa !3892
  %tp_dealloc78 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %77, i32 0, i32 4, !dbg !15035
  %78 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc78, align 8, !dbg !15035, !tbaa !3986
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8, !dbg !15036, !tbaa !3867
  call void %78(%struct._object* %79), !dbg !15037
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.76, %if.then.75
  %80 = bitcast %struct._object** %_py_decref_tmp71 to i8*, !dbg !15038
  call void @llvm.lifetime.end(i64 8, i8* %80) #3, !dbg !15038
  br label %do.cond.80, !dbg !15039

do.cond.80:                                       ; preds = %if.end.79
  br label %do.end.81, !dbg !15040

do.end.81:                                        ; preds = %do.cond.80
  br label %error, !dbg !15042

if.end.82:                                        ; preds = %cond.end.53
  %81 = load i8*, i8** %p, align 8, !dbg !15043, !tbaa !3867
  %82 = load i64, i64* %len, align 8, !dbg !15044, !tbaa !3904
  %83 = load i8*, i8** %k, align 8, !dbg !15045, !tbaa !3867
  %84 = load i8*, i8** %v, align 8, !dbg !15046, !tbaa !3867
  %call83 = call i32 (i8*, i64, i8*, ...) @PyOS_snprintf(i8* %81, i64 %82, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.237, i32 0, i32 0), i8* %83, i8* %84), !dbg !15047
  %85 = load i8*, i8** %p, align 8, !dbg !15048, !tbaa !3867
  %86 = load i64, i64* %envc, align 8, !dbg !15049, !tbaa !3904
  %inc = add i64 %86, 1, !dbg !15049
  store i64 %inc, i64* %envc, align 8, !dbg !15049, !tbaa !3904
  %87 = load i8**, i8*** %envlist, align 8, !dbg !15050, !tbaa !3867
  %arrayidx = getelementptr i8*, i8** %87, i64 %86, !dbg !15050
  store i8* %85, i8** %arrayidx, align 8, !dbg !15051, !tbaa !3867
  br label %do.body.84, !dbg !15052

do.body.84:                                       ; preds = %if.end.82
  %88 = bitcast %struct._object** %_py_decref_tmp85 to i8*, !dbg !15053
  call void @llvm.lifetime.start(i64 8, i8* %88) #3, !dbg !15053
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp85, metadata !1767, metadata !3844), !dbg !15055
  %89 = load %struct._object*, %struct._object** %key2, align 8, !dbg !15056, !tbaa !3867
  store %struct._object* %89, %struct._object** %_py_decref_tmp85, align 8, !dbg !15055, !tbaa !3867
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8, !dbg !15057, !tbaa !3867
  %ob_refcnt86 = getelementptr inbounds %struct._object, %struct._object* %90, i32 0, i32 0, !dbg !15059
  %91 = load i64, i64* %ob_refcnt86, align 8, !dbg !15060, !tbaa !3977
  %dec87 = add i64 %91, -1, !dbg !15060
  store i64 %dec87, i64* %ob_refcnt86, align 8, !dbg !15060, !tbaa !3977
  %cmp88 = icmp ne i64 %dec87, 0, !dbg !15061
  br i1 %cmp88, label %if.then.89, label %if.else.90, !dbg !15062

if.then.89:                                       ; preds = %do.body.84
  br label %if.end.93, !dbg !15063

if.else.90:                                       ; preds = %do.body.84
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8, !dbg !15065, !tbaa !3867
  %ob_type91 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 1, !dbg !15067
  %93 = load %struct._typeobject*, %struct._typeobject** %ob_type91, align 8, !dbg !15067, !tbaa !3892
  %tp_dealloc92 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %93, i32 0, i32 4, !dbg !15068
  %94 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc92, align 8, !dbg !15068, !tbaa !3986
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8, !dbg !15069, !tbaa !3867
  call void %94(%struct._object* %95), !dbg !15070
  br label %if.end.93

if.end.93:                                        ; preds = %if.else.90, %if.then.89
  %96 = bitcast %struct._object** %_py_decref_tmp85 to i8*, !dbg !15071
  call void @llvm.lifetime.end(i64 8, i8* %96) #3, !dbg !15071
  br label %do.cond.94, !dbg !15073

do.cond.94:                                       ; preds = %if.end.93
  br label %do.end.95, !dbg !15074

do.end.95:                                        ; preds = %do.cond.94
  br label %do.body.96, !dbg !15076

do.body.96:                                       ; preds = %do.end.95
  %97 = bitcast %struct._object** %_py_decref_tmp97 to i8*, !dbg !15077
  call void @llvm.lifetime.start(i64 8, i8* %97) #3, !dbg !15077
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp97, metadata !1769, metadata !3844), !dbg !15079
  %98 = load %struct._object*, %struct._object** %val2, align 8, !dbg !15080, !tbaa !3867
  store %struct._object* %98, %struct._object** %_py_decref_tmp97, align 8, !dbg !15079, !tbaa !3867
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8, !dbg !15081, !tbaa !3867
  %ob_refcnt98 = getelementptr inbounds %struct._object, %struct._object* %99, i32 0, i32 0, !dbg !15083
  %100 = load i64, i64* %ob_refcnt98, align 8, !dbg !15084, !tbaa !3977
  %dec99 = add i64 %100, -1, !dbg !15084
  store i64 %dec99, i64* %ob_refcnt98, align 8, !dbg !15084, !tbaa !3977
  %cmp100 = icmp ne i64 %dec99, 0, !dbg !15085
  br i1 %cmp100, label %if.then.101, label %if.else.102, !dbg !15086

if.then.101:                                      ; preds = %do.body.96
  br label %if.end.105, !dbg !15087

if.else.102:                                      ; preds = %do.body.96
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8, !dbg !15089, !tbaa !3867
  %ob_type103 = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 1, !dbg !15091
  %102 = load %struct._typeobject*, %struct._typeobject** %ob_type103, align 8, !dbg !15091, !tbaa !3892
  %tp_dealloc104 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %102, i32 0, i32 4, !dbg !15092
  %103 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc104, align 8, !dbg !15092, !tbaa !3986
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8, !dbg !15093, !tbaa !3867
  call void %103(%struct._object* %104), !dbg !15094
  br label %if.end.105

if.end.105:                                       ; preds = %if.else.102, %if.then.101
  %105 = bitcast %struct._object** %_py_decref_tmp97 to i8*, !dbg !15095
  call void @llvm.lifetime.end(i64 8, i8* %105) #3, !dbg !15095
  br label %do.cond.106, !dbg !15096

do.cond.106:                                      ; preds = %if.end.105
  br label %do.end.107, !dbg !15097

do.end.107:                                       ; preds = %do.cond.106
  br label %for.inc, !dbg !15099

for.inc:                                          ; preds = %do.end.107
  %106 = load i64, i64* %pos, align 8, !dbg !15100, !tbaa !3904
  %inc108 = add i64 %106, 1, !dbg !15100
  store i64 %inc108, i64* %pos, align 8, !dbg !15100, !tbaa !3904
  br label %for.cond, !dbg !15101

for.end:                                          ; preds = %for.cond
  br label %do.body.109, !dbg !15102

do.body.109:                                      ; preds = %for.end
  %107 = bitcast %struct._object** %_py_decref_tmp110 to i8*, !dbg !15103
  call void @llvm.lifetime.start(i64 8, i8* %107) #3, !dbg !15103
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp110, metadata !1771, metadata !3844), !dbg !15105
  %108 = load %struct._object*, %struct._object** %vals, align 8, !dbg !15106, !tbaa !3867
  store %struct._object* %108, %struct._object** %_py_decref_tmp110, align 8, !dbg !15105, !tbaa !3867
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp110, align 8, !dbg !15107, !tbaa !3867
  %ob_refcnt111 = getelementptr inbounds %struct._object, %struct._object* %109, i32 0, i32 0, !dbg !15109
  %110 = load i64, i64* %ob_refcnt111, align 8, !dbg !15110, !tbaa !3977
  %dec112 = add i64 %110, -1, !dbg !15110
  store i64 %dec112, i64* %ob_refcnt111, align 8, !dbg !15110, !tbaa !3977
  %cmp113 = icmp ne i64 %dec112, 0, !dbg !15111
  br i1 %cmp113, label %if.then.114, label %if.else.115, !dbg !15112

if.then.114:                                      ; preds = %do.body.109
  br label %if.end.118, !dbg !15113

if.else.115:                                      ; preds = %do.body.109
  %111 = load %struct._object*, %struct._object** %_py_decref_tmp110, align 8, !dbg !15115, !tbaa !3867
  %ob_type116 = getelementptr inbounds %struct._object, %struct._object* %111, i32 0, i32 1, !dbg !15117
  %112 = load %struct._typeobject*, %struct._typeobject** %ob_type116, align 8, !dbg !15117, !tbaa !3892
  %tp_dealloc117 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %112, i32 0, i32 4, !dbg !15118
  %113 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc117, align 8, !dbg !15118, !tbaa !3986
  %114 = load %struct._object*, %struct._object** %_py_decref_tmp110, align 8, !dbg !15119, !tbaa !3867
  call void %113(%struct._object* %114), !dbg !15120
  br label %if.end.118

if.end.118:                                       ; preds = %if.else.115, %if.then.114
  %115 = bitcast %struct._object** %_py_decref_tmp110 to i8*, !dbg !15121
  call void @llvm.lifetime.end(i64 8, i8* %115) #3, !dbg !15121
  br label %do.cond.119, !dbg !15123

do.cond.119:                                      ; preds = %if.end.118
  br label %do.end.120, !dbg !15124

do.end.120:                                       ; preds = %do.cond.119
  br label %do.body.121, !dbg !15126

do.body.121:                                      ; preds = %do.end.120
  %116 = bitcast %struct._object** %_py_decref_tmp122 to i8*, !dbg !15127
  call void @llvm.lifetime.start(i64 8, i8* %116) #3, !dbg !15127
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp122, metadata !1773, metadata !3844), !dbg !15129
  %117 = load %struct._object*, %struct._object** %keys, align 8, !dbg !15130, !tbaa !3867
  store %struct._object* %117, %struct._object** %_py_decref_tmp122, align 8, !dbg !15129, !tbaa !3867
  %118 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8, !dbg !15131, !tbaa !3867
  %ob_refcnt123 = getelementptr inbounds %struct._object, %struct._object* %118, i32 0, i32 0, !dbg !15133
  %119 = load i64, i64* %ob_refcnt123, align 8, !dbg !15134, !tbaa !3977
  %dec124 = add i64 %119, -1, !dbg !15134
  store i64 %dec124, i64* %ob_refcnt123, align 8, !dbg !15134, !tbaa !3977
  %cmp125 = icmp ne i64 %dec124, 0, !dbg !15135
  br i1 %cmp125, label %if.then.126, label %if.else.127, !dbg !15136

if.then.126:                                      ; preds = %do.body.121
  br label %if.end.130, !dbg !15137

if.else.127:                                      ; preds = %do.body.121
  %120 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8, !dbg !15139, !tbaa !3867
  %ob_type128 = getelementptr inbounds %struct._object, %struct._object* %120, i32 0, i32 1, !dbg !15141
  %121 = load %struct._typeobject*, %struct._typeobject** %ob_type128, align 8, !dbg !15141, !tbaa !3892
  %tp_dealloc129 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %121, i32 0, i32 4, !dbg !15142
  %122 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc129, align 8, !dbg !15142, !tbaa !3986
  %123 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8, !dbg !15143, !tbaa !3867
  call void %122(%struct._object* %123), !dbg !15144
  br label %if.end.130

if.end.130:                                       ; preds = %if.else.127, %if.then.126
  %124 = bitcast %struct._object** %_py_decref_tmp122 to i8*, !dbg !15145
  call void @llvm.lifetime.end(i64 8, i8* %124) #3, !dbg !15145
  br label %do.cond.131, !dbg !15146

do.cond.131:                                      ; preds = %if.end.130
  br label %do.end.132, !dbg !15147

do.end.132:                                       ; preds = %do.cond.131
  %125 = load i64, i64* %envc, align 8, !dbg !15149, !tbaa !3904
  %126 = load i8**, i8*** %envlist, align 8, !dbg !15150, !tbaa !3867
  %arrayidx133 = getelementptr i8*, i8** %126, i64 %125, !dbg !15150
  store i8* null, i8** %arrayidx133, align 8, !dbg !15151, !tbaa !3867
  %127 = load i64, i64* %envc, align 8, !dbg !15152, !tbaa !3904
  %128 = load i64*, i64** %envc_ptr.addr, align 8, !dbg !15153, !tbaa !3867
  store i64 %127, i64* %128, align 8, !dbg !15154, !tbaa !3904
  %129 = load i8**, i8*** %envlist, align 8, !dbg !15155, !tbaa !3867
  store i8** %129, i8*** %retval, !dbg !15156
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15156

error:                                            ; preds = %do.end.81, %do.end, %if.then.33, %if.then.29, %if.then.20, %if.then.13, %if.then.9
  br label %do.body.134, !dbg !15157

do.body.134:                                      ; preds = %error
  %130 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !15158
  call void @llvm.lifetime.start(i64 8, i8* %130) #3, !dbg !15158
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1775, metadata !3844), !dbg !15160
  %131 = load %struct._object*, %struct._object** %keys, align 8, !dbg !15161, !tbaa !3867
  store %struct._object* %131, %struct._object** %_py_xdecref_tmp, align 8, !dbg !15160, !tbaa !3867
  %132 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !15162, !tbaa !3867
  %cmp135 = icmp ne %struct._object* %132, null, !dbg !15163
  br i1 %cmp135, label %if.then.136, label %if.end.149, !dbg !15164

if.then.136:                                      ; preds = %do.body.134
  br label %do.body.137, !dbg !15165

do.body.137:                                      ; preds = %if.then.136
  %133 = bitcast %struct._object** %_py_decref_tmp138 to i8*, !dbg !15167
  call void @llvm.lifetime.start(i64 8, i8* %133) #3, !dbg !15167
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp138, metadata !1777, metadata !3844), !dbg !15169
  %134 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !15170, !tbaa !3867
  store %struct._object* %134, %struct._object** %_py_decref_tmp138, align 8, !dbg !15169, !tbaa !3867
  %135 = load %struct._object*, %struct._object** %_py_decref_tmp138, align 8, !dbg !15171, !tbaa !3867
  %ob_refcnt139 = getelementptr inbounds %struct._object, %struct._object* %135, i32 0, i32 0, !dbg !15173
  %136 = load i64, i64* %ob_refcnt139, align 8, !dbg !15174, !tbaa !3977
  %dec140 = add i64 %136, -1, !dbg !15174
  store i64 %dec140, i64* %ob_refcnt139, align 8, !dbg !15174, !tbaa !3977
  %cmp141 = icmp ne i64 %dec140, 0, !dbg !15175
  br i1 %cmp141, label %if.then.142, label %if.else.143, !dbg !15176

if.then.142:                                      ; preds = %do.body.137
  br label %if.end.146, !dbg !15177

if.else.143:                                      ; preds = %do.body.137
  %137 = load %struct._object*, %struct._object** %_py_decref_tmp138, align 8, !dbg !15179, !tbaa !3867
  %ob_type144 = getelementptr inbounds %struct._object, %struct._object* %137, i32 0, i32 1, !dbg !15181
  %138 = load %struct._typeobject*, %struct._typeobject** %ob_type144, align 8, !dbg !15181, !tbaa !3892
  %tp_dealloc145 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %138, i32 0, i32 4, !dbg !15182
  %139 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc145, align 8, !dbg !15182, !tbaa !3986
  %140 = load %struct._object*, %struct._object** %_py_decref_tmp138, align 8, !dbg !15183, !tbaa !3867
  call void %139(%struct._object* %140), !dbg !15184
  br label %if.end.146

if.end.146:                                       ; preds = %if.else.143, %if.then.142
  %141 = bitcast %struct._object** %_py_decref_tmp138 to i8*, !dbg !15185
  call void @llvm.lifetime.end(i64 8, i8* %141) #3, !dbg !15185
  br label %do.cond.147, !dbg !15187

do.cond.147:                                      ; preds = %if.end.146
  br label %do.end.148, !dbg !15188

do.end.148:                                       ; preds = %do.cond.147
  br label %if.end.149, !dbg !15190

if.end.149:                                       ; preds = %do.end.148, %do.body.134
  %142 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !15192
  call void @llvm.lifetime.end(i64 8, i8* %142) #3, !dbg !15192
  br label %do.cond.150, !dbg !15194

do.cond.150:                                      ; preds = %if.end.149
  br label %do.end.151, !dbg !15195

do.end.151:                                       ; preds = %do.cond.150
  br label %do.body.152, !dbg !15197

do.body.152:                                      ; preds = %do.end.151
  %143 = bitcast %struct._object** %_py_xdecref_tmp153 to i8*, !dbg !15198
  call void @llvm.lifetime.start(i64 8, i8* %143) #3, !dbg !15198
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp153, metadata !1780, metadata !3844), !dbg !15200
  %144 = load %struct._object*, %struct._object** %vals, align 8, !dbg !15201, !tbaa !3867
  store %struct._object* %144, %struct._object** %_py_xdecref_tmp153, align 8, !dbg !15200, !tbaa !3867
  %145 = load %struct._object*, %struct._object** %_py_xdecref_tmp153, align 8, !dbg !15202, !tbaa !3867
  %cmp154 = icmp ne %struct._object* %145, null, !dbg !15203
  br i1 %cmp154, label %if.then.155, label %if.end.168, !dbg !15204

if.then.155:                                      ; preds = %do.body.152
  br label %do.body.156, !dbg !15205

do.body.156:                                      ; preds = %if.then.155
  %146 = bitcast %struct._object** %_py_decref_tmp157 to i8*, !dbg !15207
  call void @llvm.lifetime.start(i64 8, i8* %146) #3, !dbg !15207
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp157, metadata !1782, metadata !3844), !dbg !15209
  %147 = load %struct._object*, %struct._object** %_py_xdecref_tmp153, align 8, !dbg !15210, !tbaa !3867
  store %struct._object* %147, %struct._object** %_py_decref_tmp157, align 8, !dbg !15209, !tbaa !3867
  %148 = load %struct._object*, %struct._object** %_py_decref_tmp157, align 8, !dbg !15211, !tbaa !3867
  %ob_refcnt158 = getelementptr inbounds %struct._object, %struct._object* %148, i32 0, i32 0, !dbg !15213
  %149 = load i64, i64* %ob_refcnt158, align 8, !dbg !15214, !tbaa !3977
  %dec159 = add i64 %149, -1, !dbg !15214
  store i64 %dec159, i64* %ob_refcnt158, align 8, !dbg !15214, !tbaa !3977
  %cmp160 = icmp ne i64 %dec159, 0, !dbg !15215
  br i1 %cmp160, label %if.then.161, label %if.else.162, !dbg !15216

if.then.161:                                      ; preds = %do.body.156
  br label %if.end.165, !dbg !15217

if.else.162:                                      ; preds = %do.body.156
  %150 = load %struct._object*, %struct._object** %_py_decref_tmp157, align 8, !dbg !15219, !tbaa !3867
  %ob_type163 = getelementptr inbounds %struct._object, %struct._object* %150, i32 0, i32 1, !dbg !15221
  %151 = load %struct._typeobject*, %struct._typeobject** %ob_type163, align 8, !dbg !15221, !tbaa !3892
  %tp_dealloc164 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %151, i32 0, i32 4, !dbg !15222
  %152 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc164, align 8, !dbg !15222, !tbaa !3986
  %153 = load %struct._object*, %struct._object** %_py_decref_tmp157, align 8, !dbg !15223, !tbaa !3867
  call void %152(%struct._object* %153), !dbg !15224
  br label %if.end.165

if.end.165:                                       ; preds = %if.else.162, %if.then.161
  %154 = bitcast %struct._object** %_py_decref_tmp157 to i8*, !dbg !15225
  call void @llvm.lifetime.end(i64 8, i8* %154) #3, !dbg !15225
  br label %do.cond.166, !dbg !15227

do.cond.166:                                      ; preds = %if.end.165
  br label %do.end.167, !dbg !15228

do.end.167:                                       ; preds = %do.cond.166
  br label %if.end.168, !dbg !15230

if.end.168:                                       ; preds = %do.end.167, %do.body.152
  %155 = bitcast %struct._object** %_py_xdecref_tmp153 to i8*, !dbg !15232
  call void @llvm.lifetime.end(i64 8, i8* %155) #3, !dbg !15232
  br label %do.cond.169, !dbg !15233

do.cond.169:                                      ; preds = %if.end.168
  br label %do.end.170, !dbg !15234

do.end.170:                                       ; preds = %do.cond.169
  br label %while.cond, !dbg !15236

while.cond:                                       ; preds = %while.body, %do.end.170
  %156 = load i64, i64* %envc, align 8, !dbg !15237, !tbaa !3904
  %dec171 = add i64 %156, -1, !dbg !15237
  store i64 %dec171, i64* %envc, align 8, !dbg !15237, !tbaa !3904
  %cmp172 = icmp sge i64 %dec171, 0, !dbg !15239
  br i1 %cmp172, label %while.body, label %while.end, !dbg !15236

while.body:                                       ; preds = %while.cond
  %157 = load i64, i64* %envc, align 8, !dbg !15240, !tbaa !3904
  %158 = load i8**, i8*** %envlist, align 8, !dbg !15241, !tbaa !3867
  %arrayidx173 = getelementptr i8*, i8** %158, i64 %157, !dbg !15241
  %159 = load i8*, i8** %arrayidx173, align 8, !dbg !15241, !tbaa !3867
  call void @PyMem_Free(i8* %159), !dbg !15242
  br label %while.cond, !dbg !15236

while.end:                                        ; preds = %while.cond
  %160 = load i8**, i8*** %envlist, align 8, !dbg !15243, !tbaa !3867
  %161 = bitcast i8** %160 to i8*, !dbg !15243
  call void @PyMem_Free(i8* %161), !dbg !15244
  store i8** null, i8*** %retval, !dbg !15245
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15245

cleanup:                                          ; preds = %while.end, %do.end.132, %if.then.5, %if.then
  %162 = bitcast i64* %len to i8*, !dbg !15246
  call void @llvm.lifetime.end(i64 8, i8* %162) #3, !dbg !15246
  %163 = bitcast i8** %v to i8*, !dbg !15246
  call void @llvm.lifetime.end(i64 8, i8* %163) #3, !dbg !15246
  %164 = bitcast i8** %k to i8*, !dbg !15246
  call void @llvm.lifetime.end(i64 8, i8* %164) #3, !dbg !15246
  %165 = bitcast i8** %p to i8*, !dbg !15246
  call void @llvm.lifetime.end(i64 8, i8* %165) #3, !dbg !15246
  %166 = bitcast %struct._object** %val2 to i8*, !dbg !15246
  call void @llvm.lifetime.end(i64 8, i8* %166) #3, !dbg !15246
  %167 = bitcast %struct._object** %key2 to i8*, !dbg !15246
  call void @llvm.lifetime.end(i64 8, i8* %167) #3, !dbg !15246
  %168 = bitcast %struct._object** %val to i8*, !dbg !15246
  call void @llvm.lifetime.end(i64 8, i8* %168) #3, !dbg !15246
  %169 = bitcast %struct._object** %key to i8*, !dbg !15246
  call void @llvm.lifetime.end(i64 8, i8* %169) #3, !dbg !15246
  %170 = bitcast %struct._object** %vals to i8*, !dbg !15246
  call void @llvm.lifetime.end(i64 8, i8* %170) #3, !dbg !15246
  %171 = bitcast %struct._object** %keys to i8*, !dbg !15246
  call void @llvm.lifetime.end(i64 8, i8* %171) #3, !dbg !15246
  %172 = bitcast i64* %envc to i8*, !dbg !15246
  call void @llvm.lifetime.end(i64 8, i8* %172) #3, !dbg !15246
  %173 = bitcast i64* %pos to i8*, !dbg !15246
  call void @llvm.lifetime.end(i64 8, i8* %173) #3, !dbg !15246
  %174 = bitcast i64* %i to i8*, !dbg !15246
  call void @llvm.lifetime.end(i64 8, i8* %174) #3, !dbg !15246
  %175 = bitcast i8*** %envlist to i8*, !dbg !15246
  call void @llvm.lifetime.end(i64 8, i8* %175) #3, !dbg !15246
  %176 = load i8**, i8*** %retval, !dbg !15246
  ret i8** %176, !dbg !15246
}

; Function Attrs: nounwind
declare i32 @fexecve(i32, i8**, i8**) #4

; Function Attrs: nounwind
declare i32 @execve(i8*, i8**, i8**) #4

declare i64 @PyMapping_Size(%struct._object*) #2

declare %struct._object* @PyMapping_Keys(%struct._object*) #2

declare %struct._object* @PyMapping_Values(%struct._object*) #2

declare %struct._object* @PyList_GetItem(%struct._object*, i64) #2

declare i32 @PyOS_snprintf(i8*, i64, i8*, ...) #2

declare void @_PyImport_AcquireLock() #2

; Function Attrs: nounwind
declare i32 @fork() #4

declare void @PyOS_AfterFork() #2

declare i32 @_PyImport_ReleaseLock() #2

; Function Attrs: nounwind
declare i32 @sched_get_priority_max(i32) #4

; Function Attrs: nounwind
declare i32 @sched_get_priority_min(i32) #4

; Function Attrs: nounwind
declare i32 @sched_getparam(i32, %struct.sched_param*) #4

; Function Attrs: nounwind
declare i32 @sched_getscheduler(i32) #4

; Function Attrs: nounwind
declare i32 @sched_rr_get_interval(i32, %struct.timespec*) #4

; Function Attrs: nounwind uwtable
define internal i32 @convert_sched_param(%struct._object* %param, %struct.sched_param* %res) #0 {
entry:
  %retval = alloca i32, align 4
  %param.addr = alloca %struct._object*, align 8
  %res.addr = alloca %struct.sched_param*, align 8
  %priority = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %param, %struct._object** %param.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %param.addr, metadata !1843, metadata !3844), !dbg !15247
  store %struct.sched_param* %res, %struct.sched_param** %res.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.sched_param** %res.addr, metadata !1844, metadata !3844), !dbg !15248
  %0 = bitcast i64* %priority to i8*, !dbg !15249
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !15249
  call void @llvm.dbg.declare(metadata i64* %priority, metadata !1845, metadata !3844), !dbg !15250
  %1 = load %struct._object*, %struct._object** %param.addr, align 8, !dbg !15251, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !15253
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !15253, !tbaa !3892
  %cmp = icmp ne %struct._typeobject* %2, @SchedParamType, !dbg !15254
  br i1 %cmp, label %if.then, label %if.end, !dbg !15255

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !15256, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.245, i32 0, i32 0)), !dbg !15258
  store i32 0, i32* %retval, !dbg !15259
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15259

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %param.addr, align 8, !dbg !15260, !tbaa !3867
  %5 = bitcast %struct._object* %4 to %struct.PyTupleObject*, !dbg !15261
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %5, i32 0, i32 1, !dbg !15262
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !15263
  %6 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !15263, !tbaa !3867
  %call = call i64 @PyLong_AsLong(%struct._object* %6), !dbg !15264
  store i64 %call, i64* %priority, align 8, !dbg !15265, !tbaa !3904
  %7 = load i64, i64* %priority, align 8, !dbg !15266, !tbaa !3904
  %cmp1 = icmp eq i64 %7, -1, !dbg !15268
  br i1 %cmp1, label %land.lhs.true, label %if.end.4, !dbg !15269

land.lhs.true:                                    ; preds = %if.end
  %call2 = call %struct._object* @PyErr_Occurred(), !dbg !15270
  %tobool = icmp ne %struct._object* %call2, null, !dbg !15270
  br i1 %tobool, label %if.then.3, label %if.end.4, !dbg !15272

if.then.3:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval, !dbg !15273
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15273

if.end.4:                                         ; preds = %land.lhs.true, %if.end
  %8 = load i64, i64* %priority, align 8, !dbg !15274, !tbaa !3904
  %cmp5 = icmp sgt i64 %8, 2147483647, !dbg !15276
  br i1 %cmp5, label %if.then.7, label %lor.lhs.false, !dbg !15277

lor.lhs.false:                                    ; preds = %if.end.4
  %9 = load i64, i64* %priority, align 8, !dbg !15278, !tbaa !3904
  %cmp6 = icmp slt i64 %9, -2147483648, !dbg !15280
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !15281

if.then.7:                                        ; preds = %lor.lhs.false, %if.end.4
  %10 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !15282, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %10, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.246, i32 0, i32 0)), !dbg !15284
  store i32 0, i32* %retval, !dbg !15285
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15285

if.end.8:                                         ; preds = %lor.lhs.false
  %11 = load i64, i64* %priority, align 8, !dbg !15286, !tbaa !3904
  %conv = trunc i64 %11 to i32, !dbg !15287
  %12 = load %struct.sched_param*, %struct.sched_param** %res.addr, align 8, !dbg !15288, !tbaa !3867
  %__sched_priority = getelementptr inbounds %struct.sched_param, %struct.sched_param* %12, i32 0, i32 0, !dbg !15289
  store i32 %conv, i32* %__sched_priority, align 4, !dbg !15290, !tbaa !7499
  store i32 1, i32* %retval, !dbg !15291
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15291

cleanup:                                          ; preds = %if.end.8, %if.then.7, %if.then.3, %if.then
  %13 = bitcast i64* %priority to i8*, !dbg !15292
  call void @llvm.lifetime.end(i64 8, i8* %13) #3, !dbg !15292
  %14 = load i32, i32* %retval, !dbg !15292
  ret i32 %14, !dbg !15292
}

; Function Attrs: nounwind
declare i32 @sched_setparam(i32, %struct.sched_param*) #4

; Function Attrs: nounwind
declare i32 @sched_setscheduler(i32, i32, %struct.sched_param*) #4

; Function Attrs: nounwind
declare i32 @sched_yield() #4

declare %struct._object* @PyObject_GetIter(%struct._object*) #2

; Function Attrs: nounwind
declare %struct.cpu_set_t* @__sched_cpualloc(i64) #4

declare %struct._object* @PyIter_Next(%struct._object*) #2

; Function Attrs: nounwind
declare void @__sched_cpufree(%struct.cpu_set_t*) #4

; Function Attrs: nounwind
declare i32 @sched_setaffinity(i32, i64, %struct.cpu_set_t*) #4

; Function Attrs: nounwind
declare i32 @sched_getaffinity(i32, i64, %struct.cpu_set_t*) #4

declare %struct._object* @PySet_New(%struct._object*) #2

; Function Attrs: nounwind
declare i32 @__sched_cpucount(i64, %struct.cpu_set_t*) #4

declare i32 @PySet_Add(%struct._object*, %struct._object*) #2

; Function Attrs: nounwind
declare i32 @openpty(i32*, i32*, i8*, %struct.termios*, %struct.winsize*) #4

declare i32 @_Py_set_inheritable(i32, i32, i32*) #2

declare %struct._object* @_Py_BuildValue_SizeT(i8*, ...) #2

; Function Attrs: nounwind
declare i32 @forkpty(i32*, i8*, %struct.termios*, %struct.winsize*) #4

; Function Attrs: nounwind
declare i32 @getegid() #4

; Function Attrs: nounwind
declare i32 @geteuid() #4

; Function Attrs: nounwind
declare i32 @getgid() #4

declare i32 @getgrouplist(i8*, i32, i32*, i32*) #2

; Function Attrs: nounwind
declare i32 @getgroups(i32, i32*) #4

; Function Attrs: nounwind
declare i32 @getpid() #4

; Function Attrs: nounwind
declare i32 @getpgrp() #4

; Function Attrs: nounwind
declare i32 @getppid() #4

; Function Attrs: nounwind
declare i32 @getuid() #4

declare i8* @getlogin() #2

; Function Attrs: nounwind
declare i32 @kill(i32, i32) #4

; Function Attrs: nounwind
declare i32 @killpg(i32, i32) #4

; Function Attrs: nounwind
declare i32 @setuid(i32) #4

; Function Attrs: nounwind
declare i32 @seteuid(i32) #4

; Function Attrs: nounwind
declare i32 @setegid(i32) #4

; Function Attrs: nounwind
declare i32 @setreuid(i32, i32) #4

; Function Attrs: nounwind
declare i32 @setregid(i32, i32) #4

; Function Attrs: nounwind
declare i32 @setgid(i32) #4

declare i32 @PySequence_Check(%struct._object*) #2

declare %struct._object* @PySequence_GetItem(%struct._object*, i64) #2

; Function Attrs: nounwind
declare i32 @setgroups(i64, i32*) #4

declare i32 @initgroups(i8*, i32) #2

; Function Attrs: nounwind
declare i32 @getpgid(i32) #4

; Function Attrs: nounwind
declare i32 @setpgrp() #4

declare i32 @wait(%union.wait*) #2

; Function Attrs: nounwind
declare i32 @wait3(%union.wait*, i32, %struct.rusage*) #4

; Function Attrs: nounwind uwtable
define internal %struct._object* @wait_helper(i32 %pid, i32 %status, %struct.rusage* %ru) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %pid.addr = alloca i32, align 4
  %status.addr = alloca i32, align 4
  %ru.addr = alloca %struct.rusage*, align 8
  %result = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %m = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp77 = alloca %struct._object*, align 8
  store i32 %pid, i32* %pid.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %pid.addr, metadata !2209, metadata !3844), !dbg !15293
  store i32 %status, i32* %status.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %status.addr, metadata !2210, metadata !3844), !dbg !15294
  store %struct.rusage* %ru, %struct.rusage** %ru.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.rusage** %ru.addr, metadata !2211, metadata !3844), !dbg !15295
  %0 = bitcast %struct._object** %result to i8*, !dbg !15296
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !15296
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !2212, metadata !3844), !dbg !15297
  %1 = load i32, i32* %pid.addr, align 4, !dbg !15298, !tbaa !3840
  %cmp = icmp eq i32 %1, -1, !dbg !15300
  br i1 %cmp, label %if.then, label %if.end, !dbg !15301

if.then:                                          ; preds = %entry
  %call = call %struct._object* @posix_error(), !dbg !15302
  store %struct._object* %call, %struct._object** %retval, !dbg !15303
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.93, !dbg !15303

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** @wait_helper.struct_rusage, align 8, !dbg !15304, !tbaa !3867
  %cmp1 = icmp eq %struct._object* %2, null, !dbg !15305
  br i1 %cmp1, label %if.then.2, label %if.end.14, !dbg !15306

if.then.2:                                        ; preds = %if.end
  %3 = bitcast %struct._object** %m to i8*, !dbg !15307
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !15307
  call void @llvm.dbg.declare(metadata %struct._object** %m, metadata !2213, metadata !3844), !dbg !15308
  %call3 = call %struct._object* @PyImport_ImportModuleNoBlock(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.274, i32 0, i32 0)), !dbg !15309
  store %struct._object* %call3, %struct._object** %m, align 8, !dbg !15308, !tbaa !3867
  %4 = load %struct._object*, %struct._object** %m, align 8, !dbg !15310, !tbaa !3867
  %cmp4 = icmp eq %struct._object* %4, null, !dbg !15312
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !15313

if.then.5:                                        ; preds = %if.then.2
  store %struct._object* null, %struct._object** %retval, !dbg !15314
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15314

if.end.6:                                         ; preds = %if.then.2
  %5 = load %struct._object*, %struct._object** %m, align 8, !dbg !15315, !tbaa !3867
  %call7 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %5, %struct._Py_Identifier* @wait_helper.PyId_struct_rusage), !dbg !15316
  store %struct._object* %call7, %struct._object** @wait_helper.struct_rusage, align 8, !dbg !15317, !tbaa !3867
  br label %do.body, !dbg !15318

do.body:                                          ; preds = %if.end.6
  %6 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !15319
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !15319
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !2216, metadata !3844), !dbg !15321
  %7 = load %struct._object*, %struct._object** %m, align 8, !dbg !15322, !tbaa !3867
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8, !dbg !15321, !tbaa !3867
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !15323, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0, !dbg !15325
  %9 = load i64, i64* %ob_refcnt, align 8, !dbg !15326, !tbaa !3977
  %dec = add i64 %9, -1, !dbg !15326
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !15326, !tbaa !3977
  %cmp8 = icmp ne i64 %dec, 0, !dbg !15327
  br i1 %cmp8, label %if.then.9, label %if.else, !dbg !15328

if.then.9:                                        ; preds = %do.body
  br label %if.end.10, !dbg !15329

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !15331, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !15333
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !15333, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4, !dbg !15334
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !15334, !tbaa !3986
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !15335, !tbaa !3867
  call void %12(%struct._object* %13), !dbg !15336
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  %14 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !15337
  call void @llvm.lifetime.end(i64 8, i8* %14) #3, !dbg !15337
  br label %do.cond, !dbg !15339

do.cond:                                          ; preds = %if.end.10
  br label %do.end, !dbg !15340

do.end:                                           ; preds = %do.cond
  %15 = load %struct._object*, %struct._object** @wait_helper.struct_rusage, align 8, !dbg !15342, !tbaa !3867
  %cmp11 = icmp eq %struct._object* %15, null, !dbg !15344
  br i1 %cmp11, label %if.then.12, label %if.end.13, !dbg !15345

if.then.12:                                       ; preds = %do.end
  store %struct._object* null, %struct._object** %retval, !dbg !15346
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15346

if.end.13:                                        ; preds = %do.end
  store i32 0, i32* %cleanup.dest.slot, !dbg !15347
  br label %cleanup, !dbg !15347

cleanup:                                          ; preds = %if.end.13, %if.then.12, %if.then.5
  %16 = bitcast %struct._object** %m to i8*, !dbg !15348
  call void @llvm.lifetime.end(i64 8, i8* %16) #3, !dbg !15348
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.14, !dbg !15350

if.end.14:                                        ; preds = %cleanup.cont, %if.end
  %17 = load %struct._object*, %struct._object** @wait_helper.struct_rusage, align 8, !dbg !15351, !tbaa !3867
  %18 = bitcast %struct._object* %17 to %struct._typeobject*, !dbg !15352
  %call15 = call %struct._object* @PyStructSequence_New(%struct._typeobject* %18), !dbg !15353
  store %struct._object* %call15, %struct._object** %result, align 8, !dbg !15354, !tbaa !3867
  %19 = load %struct._object*, %struct._object** %result, align 8, !dbg !15355, !tbaa !3867
  %tobool = icmp ne %struct._object* %19, null, !dbg !15355
  br i1 %tobool, label %if.end.17, label %if.then.16, !dbg !15357

if.then.16:                                       ; preds = %if.end.14
  store %struct._object* null, %struct._object** %retval, !dbg !15358
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.93, !dbg !15358

if.end.17:                                        ; preds = %if.end.14
  %20 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15359, !tbaa !3867
  %ru_utime = getelementptr inbounds %struct.rusage, %struct.rusage* %20, i32 0, i32 0, !dbg !15360
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %ru_utime, i32 0, i32 0, !dbg !15361
  %21 = load i64, i64* %tv_sec, align 8, !dbg !15361, !tbaa !15362
  %conv = sitofp i64 %21 to double, !dbg !15365
  %22 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15366, !tbaa !3867
  %ru_utime18 = getelementptr inbounds %struct.rusage, %struct.rusage* %22, i32 0, i32 0, !dbg !15367
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %ru_utime18, i32 0, i32 1, !dbg !15368
  %23 = load i64, i64* %tv_usec, align 8, !dbg !15368, !tbaa !15369
  %conv19 = sitofp i64 %23 to double, !dbg !15370
  %mul = fmul double %conv19, 1.000000e-06, !dbg !15371
  %add = fadd double %conv, %mul, !dbg !15372
  %call20 = call %struct._object* @PyFloat_FromDouble(double %add), !dbg !15373
  %24 = load %struct._object*, %struct._object** %result, align 8, !dbg !15374, !tbaa !3867
  %25 = bitcast %struct._object* %24 to %struct.PyTupleObject*, !dbg !15375
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %25, i32 0, i32 1, !dbg !15376
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !15377
  store %struct._object* %call20, %struct._object** %arrayidx, align 8, !dbg !15378, !tbaa !3867
  %26 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15379, !tbaa !3867
  %ru_stime = getelementptr inbounds %struct.rusage, %struct.rusage* %26, i32 0, i32 1, !dbg !15380
  %tv_sec21 = getelementptr inbounds %struct.timeval, %struct.timeval* %ru_stime, i32 0, i32 0, !dbg !15381
  %27 = load i64, i64* %tv_sec21, align 8, !dbg !15381, !tbaa !15382
  %conv22 = sitofp i64 %27 to double, !dbg !15383
  %28 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15384, !tbaa !3867
  %ru_stime23 = getelementptr inbounds %struct.rusage, %struct.rusage* %28, i32 0, i32 1, !dbg !15385
  %tv_usec24 = getelementptr inbounds %struct.timeval, %struct.timeval* %ru_stime23, i32 0, i32 1, !dbg !15386
  %29 = load i64, i64* %tv_usec24, align 8, !dbg !15386, !tbaa !15387
  %conv25 = sitofp i64 %29 to double, !dbg !15388
  %mul26 = fmul double %conv25, 1.000000e-06, !dbg !15389
  %add27 = fadd double %conv22, %mul26, !dbg !15390
  %call28 = call %struct._object* @PyFloat_FromDouble(double %add27), !dbg !15391
  %30 = load %struct._object*, %struct._object** %result, align 8, !dbg !15392, !tbaa !3867
  %31 = bitcast %struct._object* %30 to %struct.PyTupleObject*, !dbg !15393
  %ob_item29 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %31, i32 0, i32 1, !dbg !15394
  %arrayidx30 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item29, i32 0, i64 1, !dbg !15395
  store %struct._object* %call28, %struct._object** %arrayidx30, align 8, !dbg !15396, !tbaa !3867
  %32 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15397, !tbaa !3867
  %33 = getelementptr inbounds %struct.rusage, %struct.rusage* %32, i32 0, i32 2, !dbg !15398
  %ru_maxrss = bitcast %union.anon* %33 to i64*, !dbg !15398
  %34 = load i64, i64* %ru_maxrss, align 8, !dbg !15398, !tbaa !3904
  %call31 = call %struct._object* @PyLong_FromLong(i64 %34), !dbg !15399
  %35 = load %struct._object*, %struct._object** %result, align 8, !dbg !15400, !tbaa !3867
  %36 = bitcast %struct._object* %35 to %struct.PyTupleObject*, !dbg !15401
  %ob_item32 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %36, i32 0, i32 1, !dbg !15402
  %arrayidx33 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item32, i32 0, i64 2, !dbg !15403
  store %struct._object* %call31, %struct._object** %arrayidx33, align 8, !dbg !15404, !tbaa !3867
  %37 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15405, !tbaa !3867
  %38 = getelementptr inbounds %struct.rusage, %struct.rusage* %37, i32 0, i32 3, !dbg !15406
  %ru_ixrss = bitcast %union.anon.1* %38 to i64*, !dbg !15406
  %39 = load i64, i64* %ru_ixrss, align 8, !dbg !15406, !tbaa !3904
  %call34 = call %struct._object* @PyLong_FromLong(i64 %39), !dbg !15407
  %40 = load %struct._object*, %struct._object** %result, align 8, !dbg !15408, !tbaa !3867
  %41 = bitcast %struct._object* %40 to %struct.PyTupleObject*, !dbg !15409
  %ob_item35 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %41, i32 0, i32 1, !dbg !15410
  %arrayidx36 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item35, i32 0, i64 3, !dbg !15411
  store %struct._object* %call34, %struct._object** %arrayidx36, align 8, !dbg !15412, !tbaa !3867
  %42 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15413, !tbaa !3867
  %43 = getelementptr inbounds %struct.rusage, %struct.rusage* %42, i32 0, i32 4, !dbg !15414
  %ru_idrss = bitcast %union.anon.2* %43 to i64*, !dbg !15414
  %44 = load i64, i64* %ru_idrss, align 8, !dbg !15414, !tbaa !3904
  %call37 = call %struct._object* @PyLong_FromLong(i64 %44), !dbg !15415
  %45 = load %struct._object*, %struct._object** %result, align 8, !dbg !15416, !tbaa !3867
  %46 = bitcast %struct._object* %45 to %struct.PyTupleObject*, !dbg !15417
  %ob_item38 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %46, i32 0, i32 1, !dbg !15418
  %arrayidx39 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item38, i32 0, i64 4, !dbg !15419
  store %struct._object* %call37, %struct._object** %arrayidx39, align 8, !dbg !15420, !tbaa !3867
  %47 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15421, !tbaa !3867
  %48 = getelementptr inbounds %struct.rusage, %struct.rusage* %47, i32 0, i32 5, !dbg !15422
  %ru_isrss = bitcast %union.anon.3* %48 to i64*, !dbg !15422
  %49 = load i64, i64* %ru_isrss, align 8, !dbg !15422, !tbaa !3904
  %call40 = call %struct._object* @PyLong_FromLong(i64 %49), !dbg !15423
  %50 = load %struct._object*, %struct._object** %result, align 8, !dbg !15424, !tbaa !3867
  %51 = bitcast %struct._object* %50 to %struct.PyTupleObject*, !dbg !15425
  %ob_item41 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %51, i32 0, i32 1, !dbg !15426
  %arrayidx42 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item41, i32 0, i64 5, !dbg !15427
  store %struct._object* %call40, %struct._object** %arrayidx42, align 8, !dbg !15428, !tbaa !3867
  %52 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15429, !tbaa !3867
  %53 = getelementptr inbounds %struct.rusage, %struct.rusage* %52, i32 0, i32 6, !dbg !15430
  %ru_minflt = bitcast %union.anon.4* %53 to i64*, !dbg !15430
  %54 = load i64, i64* %ru_minflt, align 8, !dbg !15430, !tbaa !3904
  %call43 = call %struct._object* @PyLong_FromLong(i64 %54), !dbg !15431
  %55 = load %struct._object*, %struct._object** %result, align 8, !dbg !15432, !tbaa !3867
  %56 = bitcast %struct._object* %55 to %struct.PyTupleObject*, !dbg !15433
  %ob_item44 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %56, i32 0, i32 1, !dbg !15434
  %arrayidx45 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item44, i32 0, i64 6, !dbg !15435
  store %struct._object* %call43, %struct._object** %arrayidx45, align 8, !dbg !15436, !tbaa !3867
  %57 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15437, !tbaa !3867
  %58 = getelementptr inbounds %struct.rusage, %struct.rusage* %57, i32 0, i32 7, !dbg !15438
  %ru_majflt = bitcast %union.anon.5* %58 to i64*, !dbg !15438
  %59 = load i64, i64* %ru_majflt, align 8, !dbg !15438, !tbaa !3904
  %call46 = call %struct._object* @PyLong_FromLong(i64 %59), !dbg !15439
  %60 = load %struct._object*, %struct._object** %result, align 8, !dbg !15440, !tbaa !3867
  %61 = bitcast %struct._object* %60 to %struct.PyTupleObject*, !dbg !15441
  %ob_item47 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %61, i32 0, i32 1, !dbg !15442
  %arrayidx48 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item47, i32 0, i64 7, !dbg !15443
  store %struct._object* %call46, %struct._object** %arrayidx48, align 8, !dbg !15444, !tbaa !3867
  %62 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15445, !tbaa !3867
  %63 = getelementptr inbounds %struct.rusage, %struct.rusage* %62, i32 0, i32 8, !dbg !15446
  %ru_nswap = bitcast %union.anon.6* %63 to i64*, !dbg !15446
  %64 = load i64, i64* %ru_nswap, align 8, !dbg !15446, !tbaa !3904
  %call49 = call %struct._object* @PyLong_FromLong(i64 %64), !dbg !15447
  %65 = load %struct._object*, %struct._object** %result, align 8, !dbg !15448, !tbaa !3867
  %66 = bitcast %struct._object* %65 to %struct.PyTupleObject*, !dbg !15449
  %ob_item50 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %66, i32 0, i32 1, !dbg !15450
  %arrayidx51 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item50, i32 0, i64 8, !dbg !15451
  store %struct._object* %call49, %struct._object** %arrayidx51, align 8, !dbg !15452, !tbaa !3867
  %67 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15453, !tbaa !3867
  %68 = getelementptr inbounds %struct.rusage, %struct.rusage* %67, i32 0, i32 9, !dbg !15454
  %ru_inblock = bitcast %union.anon.7* %68 to i64*, !dbg !15454
  %69 = load i64, i64* %ru_inblock, align 8, !dbg !15454, !tbaa !3904
  %call52 = call %struct._object* @PyLong_FromLong(i64 %69), !dbg !15455
  %70 = load %struct._object*, %struct._object** %result, align 8, !dbg !15456, !tbaa !3867
  %71 = bitcast %struct._object* %70 to %struct.PyTupleObject*, !dbg !15457
  %ob_item53 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %71, i32 0, i32 1, !dbg !15458
  %arrayidx54 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item53, i32 0, i64 9, !dbg !15459
  store %struct._object* %call52, %struct._object** %arrayidx54, align 8, !dbg !15460, !tbaa !3867
  %72 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15461, !tbaa !3867
  %73 = getelementptr inbounds %struct.rusage, %struct.rusage* %72, i32 0, i32 10, !dbg !15462
  %ru_oublock = bitcast %union.anon.8* %73 to i64*, !dbg !15462
  %74 = load i64, i64* %ru_oublock, align 8, !dbg !15462, !tbaa !3904
  %call55 = call %struct._object* @PyLong_FromLong(i64 %74), !dbg !15463
  %75 = load %struct._object*, %struct._object** %result, align 8, !dbg !15464, !tbaa !3867
  %76 = bitcast %struct._object* %75 to %struct.PyTupleObject*, !dbg !15465
  %ob_item56 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %76, i32 0, i32 1, !dbg !15466
  %arrayidx57 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item56, i32 0, i64 10, !dbg !15467
  store %struct._object* %call55, %struct._object** %arrayidx57, align 8, !dbg !15468, !tbaa !3867
  %77 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15469, !tbaa !3867
  %78 = getelementptr inbounds %struct.rusage, %struct.rusage* %77, i32 0, i32 11, !dbg !15470
  %ru_msgsnd = bitcast %union.anon.9* %78 to i64*, !dbg !15470
  %79 = load i64, i64* %ru_msgsnd, align 8, !dbg !15470, !tbaa !3904
  %call58 = call %struct._object* @PyLong_FromLong(i64 %79), !dbg !15471
  %80 = load %struct._object*, %struct._object** %result, align 8, !dbg !15472, !tbaa !3867
  %81 = bitcast %struct._object* %80 to %struct.PyTupleObject*, !dbg !15473
  %ob_item59 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %81, i32 0, i32 1, !dbg !15474
  %arrayidx60 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item59, i32 0, i64 11, !dbg !15475
  store %struct._object* %call58, %struct._object** %arrayidx60, align 8, !dbg !15476, !tbaa !3867
  %82 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15477, !tbaa !3867
  %83 = getelementptr inbounds %struct.rusage, %struct.rusage* %82, i32 0, i32 12, !dbg !15478
  %ru_msgrcv = bitcast %union.anon.10* %83 to i64*, !dbg !15478
  %84 = load i64, i64* %ru_msgrcv, align 8, !dbg !15478, !tbaa !3904
  %call61 = call %struct._object* @PyLong_FromLong(i64 %84), !dbg !15479
  %85 = load %struct._object*, %struct._object** %result, align 8, !dbg !15480, !tbaa !3867
  %86 = bitcast %struct._object* %85 to %struct.PyTupleObject*, !dbg !15481
  %ob_item62 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %86, i32 0, i32 1, !dbg !15482
  %arrayidx63 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item62, i32 0, i64 12, !dbg !15483
  store %struct._object* %call61, %struct._object** %arrayidx63, align 8, !dbg !15484, !tbaa !3867
  %87 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15485, !tbaa !3867
  %88 = getelementptr inbounds %struct.rusage, %struct.rusage* %87, i32 0, i32 13, !dbg !15486
  %ru_nsignals = bitcast %union.anon.11* %88 to i64*, !dbg !15486
  %89 = load i64, i64* %ru_nsignals, align 8, !dbg !15486, !tbaa !3904
  %call64 = call %struct._object* @PyLong_FromLong(i64 %89), !dbg !15487
  %90 = load %struct._object*, %struct._object** %result, align 8, !dbg !15488, !tbaa !3867
  %91 = bitcast %struct._object* %90 to %struct.PyTupleObject*, !dbg !15489
  %ob_item65 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %91, i32 0, i32 1, !dbg !15490
  %arrayidx66 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item65, i32 0, i64 13, !dbg !15491
  store %struct._object* %call64, %struct._object** %arrayidx66, align 8, !dbg !15492, !tbaa !3867
  %92 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15493, !tbaa !3867
  %93 = getelementptr inbounds %struct.rusage, %struct.rusage* %92, i32 0, i32 14, !dbg !15494
  %ru_nvcsw = bitcast %union.anon.12* %93 to i64*, !dbg !15494
  %94 = load i64, i64* %ru_nvcsw, align 8, !dbg !15494, !tbaa !3904
  %call67 = call %struct._object* @PyLong_FromLong(i64 %94), !dbg !15495
  %95 = load %struct._object*, %struct._object** %result, align 8, !dbg !15496, !tbaa !3867
  %96 = bitcast %struct._object* %95 to %struct.PyTupleObject*, !dbg !15497
  %ob_item68 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %96, i32 0, i32 1, !dbg !15498
  %arrayidx69 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item68, i32 0, i64 14, !dbg !15499
  store %struct._object* %call67, %struct._object** %arrayidx69, align 8, !dbg !15500, !tbaa !3867
  %97 = load %struct.rusage*, %struct.rusage** %ru.addr, align 8, !dbg !15501, !tbaa !3867
  %98 = getelementptr inbounds %struct.rusage, %struct.rusage* %97, i32 0, i32 15, !dbg !15502
  %ru_nivcsw = bitcast %union.anon.13* %98 to i64*, !dbg !15502
  %99 = load i64, i64* %ru_nivcsw, align 8, !dbg !15502, !tbaa !3904
  %call70 = call %struct._object* @PyLong_FromLong(i64 %99), !dbg !15503
  %100 = load %struct._object*, %struct._object** %result, align 8, !dbg !15504, !tbaa !3867
  %101 = bitcast %struct._object* %100 to %struct.PyTupleObject*, !dbg !15505
  %ob_item71 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %101, i32 0, i32 1, !dbg !15506
  %arrayidx72 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item71, i32 0, i64 15, !dbg !15507
  store %struct._object* %call70, %struct._object** %arrayidx72, align 8, !dbg !15508, !tbaa !3867
  %call73 = call %struct._object* @PyErr_Occurred(), !dbg !15509
  %tobool74 = icmp ne %struct._object* %call73, null, !dbg !15509
  br i1 %tobool74, label %if.then.75, label %if.end.89, !dbg !15510

if.then.75:                                       ; preds = %if.end.17
  br label %do.body.76, !dbg !15511

do.body.76:                                       ; preds = %if.then.75
  %102 = bitcast %struct._object** %_py_decref_tmp77 to i8*, !dbg !15512
  call void @llvm.lifetime.start(i64 8, i8* %102) #3, !dbg !15512
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp77, metadata !2218, metadata !3844), !dbg !15514
  %103 = load %struct._object*, %struct._object** %result, align 8, !dbg !15515, !tbaa !3867
  store %struct._object* %103, %struct._object** %_py_decref_tmp77, align 8, !dbg !15514, !tbaa !3867
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8, !dbg !15516, !tbaa !3867
  %ob_refcnt78 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 0, !dbg !15518
  %105 = load i64, i64* %ob_refcnt78, align 8, !dbg !15519, !tbaa !3977
  %dec79 = add i64 %105, -1, !dbg !15519
  store i64 %dec79, i64* %ob_refcnt78, align 8, !dbg !15519, !tbaa !3977
  %cmp80 = icmp ne i64 %dec79, 0, !dbg !15520
  br i1 %cmp80, label %if.then.82, label %if.else.83, !dbg !15521

if.then.82:                                       ; preds = %do.body.76
  br label %if.end.86, !dbg !15522

if.else.83:                                       ; preds = %do.body.76
  %106 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8, !dbg !15524, !tbaa !3867
  %ob_type84 = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 1, !dbg !15526
  %107 = load %struct._typeobject*, %struct._typeobject** %ob_type84, align 8, !dbg !15526, !tbaa !3892
  %tp_dealloc85 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %107, i32 0, i32 4, !dbg !15527
  %108 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc85, align 8, !dbg !15527, !tbaa !3986
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8, !dbg !15528, !tbaa !3867
  call void %108(%struct._object* %109), !dbg !15529
  br label %if.end.86

if.end.86:                                        ; preds = %if.else.83, %if.then.82
  %110 = bitcast %struct._object** %_py_decref_tmp77 to i8*, !dbg !15530
  call void @llvm.lifetime.end(i64 8, i8* %110) #3, !dbg !15530
  br label %do.cond.87, !dbg !15532

do.cond.87:                                       ; preds = %if.end.86
  br label %do.end.88, !dbg !15533

do.end.88:                                        ; preds = %do.cond.87
  store %struct._object* null, %struct._object** %retval, !dbg !15535
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.93, !dbg !15535

if.end.89:                                        ; preds = %if.end.17
  %111 = load i32, i32* %pid.addr, align 4, !dbg !15536, !tbaa !3840
  %conv90 = sext i32 %111 to i64, !dbg !15536
  %call91 = call %struct._object* @PyLong_FromLong(i64 %conv90), !dbg !15537
  %112 = load i32, i32* %status.addr, align 4, !dbg !15538, !tbaa !3840
  %113 = load %struct._object*, %struct._object** %result, align 8, !dbg !15539, !tbaa !3867
  %call92 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.275, i32 0, i32 0), %struct._object* %call91, i32 %112, %struct._object* %113), !dbg !15540
  store %struct._object* %call92, %struct._object** %retval, !dbg !15541
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.93, !dbg !15541

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.93

cleanup.93:                                       ; preds = %NewDefault, %if.end.89, %do.end.88, %if.then.16, %if.then
  %114 = bitcast %struct._object** %result to i8*, !dbg !15542
  call void @llvm.lifetime.end(i64 8, i8* %114) #3, !dbg !15542
  %115 = load %struct._object*, %struct._object** %retval, !dbg !15542
  ret %struct._object* %115, !dbg !15542
}

declare %struct._object* @PyImport_ImportModuleNoBlock(i8*) #2

declare %struct._object* @_PyObject_GetAttrId(%struct._object*, %struct._Py_Identifier*) #2

; Function Attrs: nounwind
declare i32 @wait4(i32, %union.wait*, i32, %struct.rusage*) #4

declare i32 @waitid(i32, i32, %struct.siginfo_t*, i32) #2

declare i32 @waitpid(i32, i32*, i32) #2

; Function Attrs: nounwind
declare i32 @getsid(i32) #4

; Function Attrs: nounwind
declare i32 @setsid() #4

; Function Attrs: nounwind
declare i32 @setpgid(i32, i32) #4

; Function Attrs: nounwind
declare i32 @tcgetpgrp(i32) #4

; Function Attrs: nounwind
declare i32 @tcsetpgrp(i32, i32) #4

declare i32 @openat64(i32, i8*, i32, ...) #2

declare i32 @open64(i8*, i32, ...) #2

declare %struct._object* @_Py_device_encoding(i32) #2

; Function Attrs: nounwind
declare i32 @dup3(i32, i32, i32) #4

; Function Attrs: nounwind
declare i32 @dup2(i32, i32) #4

; Function Attrs: nounwind uwtable
define internal i32 @_parse_off_t(%struct._object* %arg, i8* %addr) #0 {
entry:
  %retval = alloca i32, align 4
  %arg.addr = alloca %struct._object*, align 8
  %addr.addr = alloca i8*, align 8
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !2418, metadata !3844), !dbg !15543
  store i8* %addr, i8** %addr.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %addr.addr, metadata !2419, metadata !3844), !dbg !15544
  %0 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !15545, !tbaa !3867
  %call = call i64 @PyLong_AsLong(%struct._object* %0), !dbg !15546
  %1 = load i8*, i8** %addr.addr, align 8, !dbg !15547, !tbaa !3867
  %2 = bitcast i8* %1 to i64*, !dbg !15548
  store i64 %call, i64* %2, align 8, !dbg !15549, !tbaa !3904
  %call1 = call %struct._object* @PyErr_Occurred(), !dbg !15550
  %tobool = icmp ne %struct._object* %call1, null, !dbg !15550
  br i1 %tobool, label %if.then, label %if.end, !dbg !15552

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !15553
  br label %return, !dbg !15553

if.end:                                           ; preds = %entry
  store i32 1, i32* %retval, !dbg !15554
  br label %return, !dbg !15554

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, !dbg !15555
  ret i32 %3, !dbg !15555
}

declare i32 @lockf64(i32, i32, i64) #2

; Function Attrs: nounwind
declare i64 @lseek64(i32, i64, i32) #4

declare i64 @read(i32, i8*, i64) #2

declare i32 @_PyBytes_Resize(%struct._object**, i64) #2

; Function Attrs: nounwind uwtable
define internal i64 @iov_setup(%struct.iovec** %iov, %struct.bufferinfo** %buf, %struct._object* %seq, i32 %cnt, i32 %type) #0 {
entry:
  %retval = alloca i64, align 8
  %iov.addr = alloca %struct.iovec**, align 8
  %buf.addr = alloca %struct.bufferinfo**, align 8
  %seq.addr = alloca %struct._object*, align 8
  %cnt.addr = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %blen = alloca i64, align 8
  %total = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %item = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  store %struct.iovec** %iov, %struct.iovec*** %iov.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.iovec*** %iov.addr, metadata !2463, metadata !3844), !dbg !15556
  store %struct.bufferinfo** %buf, %struct.bufferinfo*** %buf.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.bufferinfo*** %buf.addr, metadata !2464, metadata !3844), !dbg !15557
  store %struct._object* %seq, %struct._object** %seq.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %seq.addr, metadata !2465, metadata !3844), !dbg !15558
  store i32 %cnt, i32* %cnt.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %cnt.addr, metadata !2466, metadata !3844), !dbg !15559
  store i32 %type, i32* %type.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !2467, metadata !3844), !dbg !15560
  %0 = bitcast i32* %i to i8*, !dbg !15561
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !15561
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2468, metadata !3844), !dbg !15562
  %1 = bitcast i32* %j to i8*, !dbg !15561
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !15561
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2469, metadata !3844), !dbg !15563
  %2 = bitcast i64* %blen to i8*, !dbg !15564
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !15564
  call void @llvm.dbg.declare(metadata i64* %blen, metadata !2470, metadata !3844), !dbg !15565
  %3 = bitcast i64* %total to i8*, !dbg !15564
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !15564
  call void @llvm.dbg.declare(metadata i64* %total, metadata !2471, metadata !3844), !dbg !15566
  store i64 0, i64* %total, align 8, !dbg !15566, !tbaa !3904
  %4 = load i32, i32* %cnt.addr, align 4, !dbg !15567, !tbaa !3840
  %conv = sext i32 %4 to i64, !dbg !15568
  %cmp = icmp ugt i64 %conv, 576460752303423487, !dbg !15569
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !15570

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !15571

cond.false:                                       ; preds = %entry
  %5 = load i32, i32* %cnt.addr, align 4, !dbg !15573, !tbaa !3840
  %conv2 = sext i32 %5 to i64, !dbg !15575
  %mul = mul i64 %conv2, 16, !dbg !15576
  %call = call i8* @PyMem_Malloc(i64 %mul), !dbg !15577
  %6 = bitcast i8* %call to %struct.iovec*, !dbg !15578
  br label %cond.end, !dbg !15570

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.iovec* [ null, %cond.true ], [ %6, %cond.false ], !dbg !15570
  %7 = load %struct.iovec**, %struct.iovec*** %iov.addr, align 8, !dbg !15579, !tbaa !3867
  store %struct.iovec* %cond, %struct.iovec** %7, align 8, !dbg !15582, !tbaa !3867
  %8 = load %struct.iovec**, %struct.iovec*** %iov.addr, align 8, !dbg !15583, !tbaa !3867
  %9 = load %struct.iovec*, %struct.iovec** %8, align 8, !dbg !15585, !tbaa !3867
  %cmp3 = icmp eq %struct.iovec* %9, null, !dbg !15586
  br i1 %cmp3, label %if.then, label %if.end, !dbg !15587

if.then:                                          ; preds = %cond.end
  %call5 = call %struct._object* @PyErr_NoMemory(), !dbg !15588
  store i64 -1, i64* %retval, !dbg !15590
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.69, !dbg !15590

if.end:                                           ; preds = %cond.end
  %10 = load i32, i32* %cnt.addr, align 4, !dbg !15591, !tbaa !3840
  %conv6 = sext i32 %10 to i64, !dbg !15592
  %cmp7 = icmp ugt i64 %conv6, 115292150460684697, !dbg !15593
  br i1 %cmp7, label %cond.true.9, label %cond.false.10, !dbg !15594

cond.true.9:                                      ; preds = %if.end
  br label %cond.end.14, !dbg !15595

cond.false.10:                                    ; preds = %if.end
  %11 = load i32, i32* %cnt.addr, align 4, !dbg !15596, !tbaa !3840
  %conv11 = sext i32 %11 to i64, !dbg !15597
  %mul12 = mul i64 %conv11, 80, !dbg !15598
  %call13 = call i8* @PyMem_Malloc(i64 %mul12), !dbg !15599
  %12 = bitcast i8* %call13 to %struct.bufferinfo*, !dbg !15600
  br label %cond.end.14, !dbg !15594

cond.end.14:                                      ; preds = %cond.false.10, %cond.true.9
  %cond15 = phi %struct.bufferinfo* [ null, %cond.true.9 ], [ %12, %cond.false.10 ], !dbg !15594
  %13 = load %struct.bufferinfo**, %struct.bufferinfo*** %buf.addr, align 8, !dbg !15601, !tbaa !3867
  store %struct.bufferinfo* %cond15, %struct.bufferinfo** %13, align 8, !dbg !15602, !tbaa !3867
  %14 = load %struct.bufferinfo**, %struct.bufferinfo*** %buf.addr, align 8, !dbg !15603, !tbaa !3867
  %15 = load %struct.bufferinfo*, %struct.bufferinfo** %14, align 8, !dbg !15605, !tbaa !3867
  %cmp16 = icmp eq %struct.bufferinfo* %15, null, !dbg !15606
  br i1 %cmp16, label %if.then.18, label %if.end.20, !dbg !15607

if.then.18:                                       ; preds = %cond.end.14
  %16 = load %struct.iovec**, %struct.iovec*** %iov.addr, align 8, !dbg !15608, !tbaa !3867
  %17 = load %struct.iovec*, %struct.iovec** %16, align 8, !dbg !15610, !tbaa !3867
  %18 = bitcast %struct.iovec* %17 to i8*, !dbg !15610
  call void @PyMem_Free(i8* %18), !dbg !15611
  %call19 = call %struct._object* @PyErr_NoMemory(), !dbg !15612
  store i64 -1, i64* %retval, !dbg !15613
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.69, !dbg !15613

if.end.20:                                        ; preds = %cond.end.14
  store i32 0, i32* %i, align 4, !dbg !15614, !tbaa !3840
  br label %for.cond, !dbg !15615

for.cond:                                         ; preds = %for.inc, %if.end.20
  %19 = load i32, i32* %i, align 4, !dbg !15616, !tbaa !3840
  %20 = load i32, i32* %cnt.addr, align 4, !dbg !15619, !tbaa !3840
  %cmp21 = icmp slt i32 %19, %20, !dbg !15620
  br i1 %cmp21, label %for.body, label %for.end, !dbg !15621

for.body:                                         ; preds = %for.cond
  %21 = bitcast %struct._object** %item to i8*, !dbg !15622
  call void @llvm.lifetime.start(i64 8, i8* %21) #3, !dbg !15622
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !2472, metadata !3844), !dbg !15623
  %22 = load %struct._object*, %struct._object** %seq.addr, align 8, !dbg !15624, !tbaa !3867
  %23 = load i32, i32* %i, align 4, !dbg !15625, !tbaa !3840
  %conv23 = sext i32 %23 to i64, !dbg !15625
  %call24 = call %struct._object* @PySequence_GetItem(%struct._object* %22, i64 %conv23), !dbg !15626
  store %struct._object* %call24, %struct._object** %item, align 8, !dbg !15623, !tbaa !3867
  %24 = load %struct._object*, %struct._object** %item, align 8, !dbg !15627, !tbaa !3867
  %cmp25 = icmp eq %struct._object* %24, null, !dbg !15629
  br i1 %cmp25, label %if.then.27, label %if.end.28, !dbg !15630

if.then.27:                                       ; preds = %for.body
  store i32 5, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15631

if.end.28:                                        ; preds = %for.body
  %25 = load %struct._object*, %struct._object** %item, align 8, !dbg !15632, !tbaa !3867
  %26 = load i32, i32* %i, align 4, !dbg !15633, !tbaa !3840
  %idxprom = sext i32 %26 to i64, !dbg !15634
  %27 = load %struct.bufferinfo**, %struct.bufferinfo*** %buf.addr, align 8, !dbg !15635, !tbaa !3867
  %28 = load %struct.bufferinfo*, %struct.bufferinfo** %27, align 8, !dbg !15636, !tbaa !3867
  %arrayidx = getelementptr %struct.bufferinfo, %struct.bufferinfo* %28, i64 %idxprom, !dbg !15634
  %29 = load i32, i32* %type.addr, align 4, !dbg !15637, !tbaa !3840
  %call29 = call i32 @PyObject_GetBuffer(%struct._object* %25, %struct.bufferinfo* %arrayidx, i32 %29), !dbg !15638
  %cmp30 = icmp eq i32 %call29, -1, !dbg !15639
  br i1 %cmp30, label %if.then.32, label %if.end.37, !dbg !15640

if.then.32:                                       ; preds = %if.end.28
  br label %do.body, !dbg !15641

do.body:                                          ; preds = %if.then.32
  %30 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !15642
  call void @llvm.lifetime.start(i64 8, i8* %30) #3, !dbg !15642
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !2476, metadata !3844), !dbg !15644
  %31 = load %struct._object*, %struct._object** %item, align 8, !dbg !15645, !tbaa !3867
  store %struct._object* %31, %struct._object** %_py_decref_tmp, align 8, !dbg !15644, !tbaa !3867
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !15646, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0, !dbg !15648
  %33 = load i64, i64* %ob_refcnt, align 8, !dbg !15649, !tbaa !3977
  %dec = add i64 %33, -1, !dbg !15649
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !15649, !tbaa !3977
  %cmp33 = icmp ne i64 %dec, 0, !dbg !15650
  br i1 %cmp33, label %if.then.35, label %if.else, !dbg !15651

if.then.35:                                       ; preds = %do.body
  br label %if.end.36, !dbg !15652

if.else:                                          ; preds = %do.body
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !15654, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1, !dbg !15656
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !15656, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4, !dbg !15657
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !15657, !tbaa !3986
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !15658, !tbaa !3867
  call void %36(%struct._object* %37), !dbg !15659
  br label %if.end.36

if.end.36:                                        ; preds = %if.else, %if.then.35
  %38 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !15660
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !15660
  br label %do.cond, !dbg !15662

do.cond:                                          ; preds = %if.end.36
  br label %do.end, !dbg !15663

do.end:                                           ; preds = %do.cond
  store i32 5, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15665

if.end.37:                                        ; preds = %if.end.28
  br label %do.body.38, !dbg !15666

do.body.38:                                       ; preds = %if.end.37
  %39 = bitcast %struct._object** %_py_decref_tmp39 to i8*, !dbg !15667
  call void @llvm.lifetime.start(i64 8, i8* %39) #3, !dbg !15667
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp39, metadata !2480, metadata !3844), !dbg !15669
  %40 = load %struct._object*, %struct._object** %item, align 8, !dbg !15670, !tbaa !3867
  store %struct._object* %40, %struct._object** %_py_decref_tmp39, align 8, !dbg !15669, !tbaa !3867
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8, !dbg !15671, !tbaa !3867
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0, !dbg !15673
  %42 = load i64, i64* %ob_refcnt40, align 8, !dbg !15674, !tbaa !3977
  %dec41 = add i64 %42, -1, !dbg !15674
  store i64 %dec41, i64* %ob_refcnt40, align 8, !dbg !15674, !tbaa !3977
  %cmp42 = icmp ne i64 %dec41, 0, !dbg !15675
  br i1 %cmp42, label %if.then.44, label %if.else.45, !dbg !15676

if.then.44:                                       ; preds = %do.body.38
  br label %if.end.48, !dbg !15677

if.else.45:                                       ; preds = %do.body.38
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8, !dbg !15679, !tbaa !3867
  %ob_type46 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1, !dbg !15681
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type46, align 8, !dbg !15681, !tbaa !3892
  %tp_dealloc47 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4, !dbg !15682
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc47, align 8, !dbg !15682, !tbaa !3986
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8, !dbg !15683, !tbaa !3867
  call void %45(%struct._object* %46), !dbg !15684
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.45, %if.then.44
  %47 = bitcast %struct._object** %_py_decref_tmp39 to i8*, !dbg !15685
  call void @llvm.lifetime.end(i64 8, i8* %47) #3, !dbg !15685
  br label %do.cond.49, !dbg !15687

do.cond.49:                                       ; preds = %if.end.48
  br label %do.end.50, !dbg !15688

do.end.50:                                        ; preds = %do.cond.49
  %48 = load i32, i32* %i, align 4, !dbg !15690, !tbaa !3840
  %idxprom51 = sext i32 %48 to i64, !dbg !15691
  %49 = load %struct.bufferinfo**, %struct.bufferinfo*** %buf.addr, align 8, !dbg !15692, !tbaa !3867
  %50 = load %struct.bufferinfo*, %struct.bufferinfo** %49, align 8, !dbg !15693, !tbaa !3867
  %arrayidx52 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %50, i64 %idxprom51, !dbg !15691
  %buf53 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %arrayidx52, i32 0, i32 0, !dbg !15694
  %51 = load i8*, i8** %buf53, align 8, !dbg !15694, !tbaa !10039
  %52 = load i32, i32* %i, align 4, !dbg !15695, !tbaa !3840
  %idxprom54 = sext i32 %52 to i64, !dbg !15696
  %53 = load %struct.iovec**, %struct.iovec*** %iov.addr, align 8, !dbg !15697, !tbaa !3867
  %54 = load %struct.iovec*, %struct.iovec** %53, align 8, !dbg !15698, !tbaa !3867
  %arrayidx55 = getelementptr %struct.iovec, %struct.iovec* %54, i64 %idxprom54, !dbg !15696
  %iov_base = getelementptr inbounds %struct.iovec, %struct.iovec* %arrayidx55, i32 0, i32 0, !dbg !15699
  store i8* %51, i8** %iov_base, align 8, !dbg !15700, !tbaa !15701
  %55 = load i32, i32* %i, align 4, !dbg !15703, !tbaa !3840
  %idxprom56 = sext i32 %55 to i64, !dbg !15704
  %56 = load %struct.bufferinfo**, %struct.bufferinfo*** %buf.addr, align 8, !dbg !15705, !tbaa !3867
  %57 = load %struct.bufferinfo*, %struct.bufferinfo** %56, align 8, !dbg !15706, !tbaa !3867
  %arrayidx57 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %57, i64 %idxprom56, !dbg !15704
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %arrayidx57, i32 0, i32 2, !dbg !15707
  %58 = load i64, i64* %len, align 8, !dbg !15707, !tbaa !10030
  store i64 %58, i64* %blen, align 8, !dbg !15708, !tbaa !3904
  %59 = load i64, i64* %blen, align 8, !dbg !15709, !tbaa !3904
  %60 = load i32, i32* %i, align 4, !dbg !15710, !tbaa !3840
  %idxprom58 = sext i32 %60 to i64, !dbg !15711
  %61 = load %struct.iovec**, %struct.iovec*** %iov.addr, align 8, !dbg !15712, !tbaa !3867
  %62 = load %struct.iovec*, %struct.iovec** %61, align 8, !dbg !15713, !tbaa !3867
  %arrayidx59 = getelementptr %struct.iovec, %struct.iovec* %62, i64 %idxprom58, !dbg !15711
  %iov_len = getelementptr inbounds %struct.iovec, %struct.iovec* %arrayidx59, i32 0, i32 1, !dbg !15714
  store i64 %59, i64* %iov_len, align 8, !dbg !15715, !tbaa !15716
  %63 = load i64, i64* %blen, align 8, !dbg !15717, !tbaa !3904
  %64 = load i64, i64* %total, align 8, !dbg !15718, !tbaa !3904
  %add = add i64 %64, %63, !dbg !15718
  store i64 %add, i64* %total, align 8, !dbg !15718, !tbaa !3904
  store i32 0, i32* %cleanup.dest.slot, !dbg !15719
  br label %cleanup, !dbg !15719

cleanup:                                          ; preds = %do.end.50, %do.end, %if.then.27
  %65 = bitcast %struct._object** %item to i8*, !dbg !15720
  call void @llvm.lifetime.end(i64 8, i8* %65) #3, !dbg !15720
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock

NodeBlock:                                        ; preds = %cleanup
  %Pivot = icmp slt i32 %cleanup.dest, 5
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %cleanup.dest, 5
  br i1 %SwitchLeaf2, label %fail, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %for.inc, !dbg !15721

for.inc:                                          ; preds = %cleanup.cont
  %66 = load i32, i32* %i, align 4, !dbg !15722, !tbaa !3840
  %inc = add i32 %66, 1, !dbg !15722
  store i32 %inc, i32* %i, align 4, !dbg !15722, !tbaa !3840
  br label %for.cond, !dbg !15723

for.end:                                          ; preds = %for.cond
  %67 = load i64, i64* %total, align 8, !dbg !15724, !tbaa !3904
  store i64 %67, i64* %retval, !dbg !15725
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.69, !dbg !15725

fail:                                             ; preds = %LeafBlock.1
  %68 = load %struct.iovec**, %struct.iovec*** %iov.addr, align 8, !dbg !15726, !tbaa !3867
  %69 = load %struct.iovec*, %struct.iovec** %68, align 8, !dbg !15727, !tbaa !3867
  %70 = bitcast %struct.iovec* %69 to i8*, !dbg !15727
  call void @PyMem_Free(i8* %70), !dbg !15728
  store i32 0, i32* %j, align 4, !dbg !15729, !tbaa !3840
  br label %for.cond.60, !dbg !15731

for.cond.60:                                      ; preds = %for.inc.66, %fail
  %71 = load i32, i32* %j, align 4, !dbg !15732, !tbaa !3840
  %72 = load i32, i32* %i, align 4, !dbg !15736, !tbaa !3840
  %cmp61 = icmp slt i32 %71, %72, !dbg !15737
  br i1 %cmp61, label %for.body.63, label %for.end.68, !dbg !15738

for.body.63:                                      ; preds = %for.cond.60
  %73 = load i32, i32* %j, align 4, !dbg !15739, !tbaa !3840
  %idxprom64 = sext i32 %73 to i64, !dbg !15741
  %74 = load %struct.bufferinfo**, %struct.bufferinfo*** %buf.addr, align 8, !dbg !15742, !tbaa !3867
  %75 = load %struct.bufferinfo*, %struct.bufferinfo** %74, align 8, !dbg !15743, !tbaa !3867
  %arrayidx65 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %75, i64 %idxprom64, !dbg !15741
  call void @PyBuffer_Release(%struct.bufferinfo* %arrayidx65), !dbg !15744
  br label %for.inc.66, !dbg !15745

for.inc.66:                                       ; preds = %for.body.63
  %76 = load i32, i32* %j, align 4, !dbg !15746, !tbaa !3840
  %inc67 = add i32 %76, 1, !dbg !15746
  store i32 %inc67, i32* %j, align 4, !dbg !15746, !tbaa !3840
  br label %for.cond.60, !dbg !15747

for.end.68:                                       ; preds = %for.cond.60
  %77 = load %struct.bufferinfo**, %struct.bufferinfo*** %buf.addr, align 8, !dbg !15748, !tbaa !3867
  %78 = load %struct.bufferinfo*, %struct.bufferinfo** %77, align 8, !dbg !15749, !tbaa !3867
  %79 = bitcast %struct.bufferinfo* %78 to i8*, !dbg !15749
  call void @PyMem_Free(i8* %79), !dbg !15750
  store i64 -1, i64* %retval, !dbg !15751
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.69, !dbg !15751

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %cleanup.69

cleanup.69:                                       ; preds = %NewDefault, %for.end.68, %for.end, %if.then.18, %if.then
  %80 = bitcast i64* %total to i8*, !dbg !15752
  call void @llvm.lifetime.end(i64 8, i8* %80) #3, !dbg !15752
  %81 = bitcast i64* %blen to i8*, !dbg !15752
  call void @llvm.lifetime.end(i64 8, i8* %81) #3, !dbg !15752
  %82 = bitcast i32* %j to i8*, !dbg !15752
  call void @llvm.lifetime.end(i64 4, i8* %82) #3, !dbg !15752
  %83 = bitcast i32* %i to i8*, !dbg !15752
  call void @llvm.lifetime.end(i64 4, i8* %83) #3, !dbg !15752
  %84 = load i64, i64* %retval, !dbg !15752
  ret i64 %84, !dbg !15752
}

declare i64 @readv(i32, %struct.iovec*, i32) #2

; Function Attrs: nounwind uwtable
define internal void @iov_cleanup(%struct.iovec* %iov, %struct.bufferinfo* %buf, i32 %cnt) #0 {
entry:
  %iov.addr = alloca %struct.iovec*, align 8
  %buf.addr = alloca %struct.bufferinfo*, align 8
  %cnt.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.iovec* %iov, %struct.iovec** %iov.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.iovec** %iov.addr, metadata !2486, metadata !3844), !dbg !15753
  store %struct.bufferinfo* %buf, %struct.bufferinfo** %buf.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %buf.addr, metadata !2487, metadata !3844), !dbg !15754
  store i32 %cnt, i32* %cnt.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %cnt.addr, metadata !2488, metadata !3844), !dbg !15755
  %0 = bitcast i32* %i to i8*, !dbg !15756
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !15756
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2489, metadata !3844), !dbg !15757
  %1 = load %struct.iovec*, %struct.iovec** %iov.addr, align 8, !dbg !15758, !tbaa !3867
  %2 = bitcast %struct.iovec* %1 to i8*, !dbg !15758
  call void @PyMem_Free(i8* %2), !dbg !15759
  store i32 0, i32* %i, align 4, !dbg !15760, !tbaa !3840
  br label %for.cond, !dbg !15762

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !15763, !tbaa !3840
  %4 = load i32, i32* %cnt.addr, align 4, !dbg !15767, !tbaa !3840
  %cmp = icmp slt i32 %3, %4, !dbg !15768
  br i1 %cmp, label %for.body, label %for.end, !dbg !15769

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4, !dbg !15770, !tbaa !3840
  %idxprom = sext i32 %5 to i64, !dbg !15772
  %6 = load %struct.bufferinfo*, %struct.bufferinfo** %buf.addr, align 8, !dbg !15772, !tbaa !3867
  %arrayidx = getelementptr %struct.bufferinfo, %struct.bufferinfo* %6, i64 %idxprom, !dbg !15772
  call void @PyBuffer_Release(%struct.bufferinfo* %arrayidx), !dbg !15773
  br label %for.inc, !dbg !15774

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !15775, !tbaa !3840
  %inc = add i32 %7, 1, !dbg !15775
  store i32 %inc, i32* %i, align 4, !dbg !15775, !tbaa !3840
  br label %for.cond, !dbg !15776

for.end:                                          ; preds = %for.cond
  %8 = load %struct.bufferinfo*, %struct.bufferinfo** %buf.addr, align 8, !dbg !15777, !tbaa !3867
  %9 = bitcast %struct.bufferinfo* %8 to i8*, !dbg !15777
  call void @PyMem_Free(i8* %9), !dbg !15778
  %10 = bitcast i32* %i to i8*, !dbg !15779
  call void @llvm.lifetime.end(i64 4, i8* %10) #3, !dbg !15779
  ret void, !dbg !15779
}

declare %struct._object* @PyLong_FromSsize_t(i64) #2

declare i32 @PyObject_GetBuffer(%struct._object*, %struct.bufferinfo*, i32) #2

declare void @PyBuffer_Release(%struct.bufferinfo*) #2

declare i64 @pread64(i32, i8*, i64, i64) #2

declare i64 @write(i32, i8*, i64) #2

declare i64 @writev(i32, %struct.iovec*, i32) #2

declare i64 @pwrite64(i32, i8*, i64, i64) #2

; Function Attrs: nounwind
declare i64 @sendfile64(i32, i32, i64*, i64) #4

; Function Attrs: nounwind
declare i32 @isatty(i32) #4

; Function Attrs: nounwind
declare i32 @pipe2(i32*, i32) #4

; Function Attrs: nounwind
declare i32 @pipe(i32*) #4

declare i32 @_PyLong_AsInt(%struct._object*) #2

; Function Attrs: nounwind
declare i32 @mkfifoat(i32, i8*, i32) #4

; Function Attrs: nounwind
declare i32 @mkfifo(i8*, i32) #4

; Function Attrs: inlinehint nounwind uwtable
define available_externally i32 @mknodat(i32 %__fd, i8* nonnull %__path, i32 %__mode, i64 %__dev) #6 {
entry:
  %__fd.addr = alloca i32, align 4
  %__path.addr = alloca i8*, align 8
  %__mode.addr = alloca i32, align 4
  %__dev.addr = alloca i64, align 8
  store i32 %__fd, i32* %__fd.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %__fd.addr, metadata !2617, metadata !3844), !dbg !15780
  store i8* %__path, i8** %__path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %__path.addr, metadata !2618, metadata !3844), !dbg !15781
  store i32 %__mode, i32* %__mode.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %__mode.addr, metadata !2619, metadata !3844), !dbg !15782
  store i64 %__dev, i64* %__dev.addr, align 8, !tbaa !3904
  call void @llvm.dbg.declare(metadata i64* %__dev.addr, metadata !2620, metadata !3844), !dbg !15783
  %0 = load i32, i32* %__fd.addr, align 4, !dbg !15784, !tbaa !3840
  %1 = load i8*, i8** %__path.addr, align 8, !dbg !15785, !tbaa !3867
  %2 = load i32, i32* %__mode.addr, align 4, !dbg !15786, !tbaa !3840
  %call = call i32 @__xmknodat(i32 0, i32 %0, i8* %1, i32 %2, i64* %__dev.addr) #3, !dbg !15787
  ret i32 %call, !dbg !15788
}

; Function Attrs: inlinehint nounwind uwtable
define available_externally i32 @mknod(i8* nonnull %__path, i32 %__mode, i64 %__dev) #6 {
entry:
  %__path.addr = alloca i8*, align 8
  %__mode.addr = alloca i32, align 4
  %__dev.addr = alloca i64, align 8
  store i8* %__path, i8** %__path.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %__path.addr, metadata !2625, metadata !3844), !dbg !15789
  store i32 %__mode, i32* %__mode.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %__mode.addr, metadata !2626, metadata !3844), !dbg !15790
  store i64 %__dev, i64* %__dev.addr, align 8, !tbaa !3904
  call void @llvm.dbg.declare(metadata i64* %__dev.addr, metadata !2627, metadata !3844), !dbg !15791
  %0 = load i8*, i8** %__path.addr, align 8, !dbg !15792, !tbaa !3867
  %1 = load i32, i32* %__mode.addr, align 4, !dbg !15793, !tbaa !3840
  %call = call i32 @__xmknod(i32 0, i8* %0, i32 %1, i64* %__dev.addr) #3, !dbg !15794
  ret i32 %call, !dbg !15795
}

; Function Attrs: nounwind
declare i32 @__xmknodat(i32, i32, i8*, i32, i64*) #4

; Function Attrs: nounwind
declare i32 @__xmknod(i32, i8*, i32, i64*) #4

; Function Attrs: inlinehint nounwind readnone uwtable
define available_externally i32 @gnu_dev_major(i64 %__dev) #9 {
entry:
  %__dev.addr = alloca i64, align 8
  store i64 %__dev, i64* %__dev.addr, align 8, !tbaa !15796
  call void @llvm.dbg.declare(metadata i64* %__dev.addr, metadata !2638, metadata !3844), !dbg !15798
  %0 = load i64, i64* %__dev.addr, align 8, !dbg !15799, !tbaa !15796
  %shr = lshr i64 %0, 8, !dbg !15800
  %and = and i64 %shr, 4095, !dbg !15801
  %1 = load i64, i64* %__dev.addr, align 8, !dbg !15802, !tbaa !15796
  %shr1 = lshr i64 %1, 32, !dbg !15803
  %conv = trunc i64 %shr1 to i32, !dbg !15804
  %and2 = and i32 %conv, -4096, !dbg !15805
  %conv3 = zext i32 %and2 to i64, !dbg !15806
  %or = or i64 %and, %conv3, !dbg !15807
  %conv4 = trunc i64 %or to i32, !dbg !15808
  ret i32 %conv4, !dbg !15809
}

; Function Attrs: inlinehint nounwind readnone uwtable
define available_externally i32 @gnu_dev_minor(i64 %__dev) #9 {
entry:
  %__dev.addr = alloca i64, align 8
  store i64 %__dev, i64* %__dev.addr, align 8, !tbaa !15796
  call void @llvm.dbg.declare(metadata i64* %__dev.addr, metadata !2646, metadata !3844), !dbg !15810
  %0 = load i64, i64* %__dev.addr, align 8, !dbg !15811, !tbaa !15796
  %and = and i64 %0, 255, !dbg !15812
  %1 = load i64, i64* %__dev.addr, align 8, !dbg !15813, !tbaa !15796
  %shr = lshr i64 %1, 12, !dbg !15814
  %conv = trunc i64 %shr to i32, !dbg !15815
  %and1 = and i32 %conv, -256, !dbg !15816
  %conv2 = zext i32 %and1 to i64, !dbg !15817
  %or = or i64 %and, %conv2, !dbg !15818
  %conv3 = trunc i64 %or to i32, !dbg !15819
  ret i32 %conv3, !dbg !15820
}

; Function Attrs: inlinehint nounwind readnone uwtable
define available_externally i64 @gnu_dev_makedev(i32 %__major, i32 %__minor) #9 {
entry:
  %__major.addr = alloca i32, align 4
  %__minor.addr = alloca i32, align 4
  store i32 %__major, i32* %__major.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %__major.addr, metadata !2657, metadata !3844), !dbg !15821
  store i32 %__minor, i32* %__minor.addr, align 4, !tbaa !3840
  call void @llvm.dbg.declare(metadata i32* %__minor.addr, metadata !2658, metadata !3844), !dbg !15822
  %0 = load i32, i32* %__minor.addr, align 4, !dbg !15823, !tbaa !3840
  %and = and i32 %0, 255, !dbg !15824
  %1 = load i32, i32* %__major.addr, align 4, !dbg !15825, !tbaa !3840
  %and1 = and i32 %1, 4095, !dbg !15826
  %shl = shl i32 %and1, 8, !dbg !15827
  %or = or i32 %and, %shl, !dbg !15828
  %conv = zext i32 %or to i64, !dbg !15829
  %2 = load i32, i32* %__minor.addr, align 4, !dbg !15830, !tbaa !3840
  %and2 = and i32 %2, -256, !dbg !15831
  %conv3 = zext i32 %and2 to i64, !dbg !15832
  %shl4 = shl i64 %conv3, 12, !dbg !15833
  %or5 = or i64 %conv, %shl4, !dbg !15834
  %3 = load i32, i32* %__major.addr, align 4, !dbg !15835, !tbaa !3840
  %and6 = and i32 %3, -4096, !dbg !15836
  %conv7 = zext i32 %and6 to i64, !dbg !15837
  %shl8 = shl i64 %conv7, 32, !dbg !15838
  %or9 = or i64 %or5, %shl8, !dbg !15839
  ret i64 %or9, !dbg !15840
}

; Function Attrs: nounwind
declare i32 @ftruncate64(i32, i64) #4

; Function Attrs: nounwind
declare i32 @truncate64(i8*, i64) #4

declare i32 @posix_fallocate64(i32, i64, i64) #2

; Function Attrs: nounwind
declare i32 @posix_fadvise64(i32, i64, i64, i32) #4

declare %struct._object* @PyBytes_FromFormat(i8*, ...) #2

; Function Attrs: nounwind
declare i32 @putenv(i8*) #4

declare i32 @PyDict_SetItem(%struct._object*, %struct._object*, %struct._object*) #2

; Function Attrs: nounwind
declare i32 @unsetenv(i8*) #4

declare i32 @PyDict_DelItem(%struct._object*, %struct._object*) #2

; Function Attrs: nounwind
declare i8* @strerror(i32) #4

declare %struct._object* @PyUnicode_DecodeLocale(i8*, i8*) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @posix_fildes(%struct._object* %fdobj, i32 (i32)* %func) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %fdobj.addr = alloca %struct._object*, align 8
  %func.addr = alloca i32 (i32)*, align 8
  %fd = alloca i32, align 4
  %res = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %fdobj, %struct._object** %fdobj.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %fdobj.addr, metadata !2756, metadata !3844), !dbg !15841
  store i32 (i32)* %func, i32 (i32)** %func.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i32 (i32)** %func.addr, metadata !2757, metadata !3844), !dbg !15842
  %0 = bitcast i32* %fd to i8*, !dbg !15843
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !15843
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !2758, metadata !3844), !dbg !15844
  %1 = bitcast i32* %res to i8*, !dbg !15845
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !15845
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2759, metadata !3844), !dbg !15846
  %2 = load %struct._object*, %struct._object** %fdobj.addr, align 8, !dbg !15847, !tbaa !3867
  %call = call i32 @PyObject_AsFileDescriptor(%struct._object* %2), !dbg !15848
  store i32 %call, i32* %fd, align 4, !dbg !15849, !tbaa !3840
  %3 = load i32, i32* %fd, align 4, !dbg !15850, !tbaa !3840
  %cmp = icmp slt i32 %3, 0, !dbg !15852
  br i1 %cmp, label %if.then, label %if.end, !dbg !15853

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !15854
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15854

if.end:                                           ; preds = %entry
  %4 = bitcast %struct._ts** %_save to i8*, !dbg !15855
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !15855
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !2760, metadata !3844), !dbg !15856
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !15857
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !15858, !tbaa !3867
  %5 = load i32 (i32)*, i32 (i32)** %func.addr, align 8, !dbg !15859, !tbaa !3867
  %6 = load i32, i32* %fd, align 4, !dbg !15860, !tbaa !3840
  %call2 = call i32 %5(i32 %6), !dbg !15861
  store i32 %call2, i32* %res, align 4, !dbg !15862, !tbaa !3840
  %7 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !15863, !tbaa !3867
  call void @PyEval_RestoreThread(%struct._ts* %7), !dbg !15864
  %8 = bitcast %struct._ts** %_save to i8*, !dbg !15865
  call void @llvm.lifetime.end(i64 8, i8* %8) #3, !dbg !15865
  %9 = load i32, i32* %res, align 4, !dbg !15866, !tbaa !3840
  %cmp3 = icmp slt i32 %9, 0, !dbg !15868
  br i1 %cmp3, label %if.then.4, label %if.end.6, !dbg !15869

if.then.4:                                        ; preds = %if.end
  %call5 = call %struct._object* @posix_error(), !dbg !15870
  store %struct._object* %call5, %struct._object** %retval, !dbg !15871
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15871

if.end.6:                                         ; preds = %if.end
  %10 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !15872, !tbaa !3977
  %inc = add i64 %10, 1, !dbg !15872
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !15872, !tbaa !3977
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !15873
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15873

cleanup:                                          ; preds = %if.end.6, %if.then.4, %if.then
  %11 = bitcast i32* %res to i8*, !dbg !15874
  call void @llvm.lifetime.end(i64 4, i8* %11) #3, !dbg !15874
  %12 = bitcast i32* %fd to i8*, !dbg !15874
  call void @llvm.lifetime.end(i64 4, i8* %12) #3, !dbg !15874
  %13 = load %struct._object*, %struct._object** %retval, !dbg !15874
  ret %struct._object* %13, !dbg !15874
}

declare i32 @PyObject_AsFileDescriptor(%struct._object*) #2

declare i32 @fsync(i32) #2

; Function Attrs: nounwind
declare void @sync() #4

declare i32 @fdatasync(i32) #2

; Function Attrs: nounwind
declare i32 @fstatvfs64(i32, %struct.statvfs*) #4

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pystatvfs_fromstructstatvfs(%struct.statvfs* byval align 8 %st) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  call void @llvm.dbg.declare(metadata %struct.statvfs* %st, metadata !2846, metadata !3844), !dbg !15875
  %0 = bitcast %struct._object** %v to i8*, !dbg !15876
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !15876
  call void @llvm.dbg.declare(metadata %struct._object** %v, metadata !2847, metadata !3844), !dbg !15877
  %call = call %struct._object* @PyStructSequence_New(%struct._typeobject* @StatVFSResultType), !dbg !15878
  store %struct._object* %call, %struct._object** %v, align 8, !dbg !15877, !tbaa !3867
  %1 = load %struct._object*, %struct._object** %v, align 8, !dbg !15879, !tbaa !3867
  %cmp = icmp eq %struct._object* %1, null, !dbg !15881
  br i1 %cmp, label %if.then, label %if.end, !dbg !15882

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !15883
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15883

if.end:                                           ; preds = %entry
  %f_bsize = getelementptr inbounds %struct.statvfs, %struct.statvfs* %st, i32 0, i32 0, !dbg !15884
  %2 = load i64, i64* %f_bsize, align 8, !dbg !15884, !tbaa !15885
  %call1 = call %struct._object* @PyLong_FromLong(i64 %2), !dbg !15887
  %3 = load %struct._object*, %struct._object** %v, align 8, !dbg !15888, !tbaa !3867
  %4 = bitcast %struct._object* %3 to %struct.PyTupleObject*, !dbg !15889
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4, i32 0, i32 1, !dbg !15890
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !15891
  store %struct._object* %call1, %struct._object** %arrayidx, align 8, !dbg !15892, !tbaa !3867
  %f_frsize = getelementptr inbounds %struct.statvfs, %struct.statvfs* %st, i32 0, i32 1, !dbg !15893
  %5 = load i64, i64* %f_frsize, align 8, !dbg !15893, !tbaa !15894
  %call2 = call %struct._object* @PyLong_FromLong(i64 %5), !dbg !15895
  %6 = load %struct._object*, %struct._object** %v, align 8, !dbg !15896, !tbaa !3867
  %7 = bitcast %struct._object* %6 to %struct.PyTupleObject*, !dbg !15897
  %ob_item3 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %7, i32 0, i32 1, !dbg !15898
  %arrayidx4 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item3, i32 0, i64 1, !dbg !15899
  store %struct._object* %call2, %struct._object** %arrayidx4, align 8, !dbg !15900, !tbaa !3867
  %f_blocks = getelementptr inbounds %struct.statvfs, %struct.statvfs* %st, i32 0, i32 2, !dbg !15901
  %8 = load i64, i64* %f_blocks, align 8, !dbg !15901, !tbaa !15902
  %call5 = call %struct._object* @PyLong_FromLong(i64 %8), !dbg !15903
  %9 = load %struct._object*, %struct._object** %v, align 8, !dbg !15904, !tbaa !3867
  %10 = bitcast %struct._object* %9 to %struct.PyTupleObject*, !dbg !15905
  %ob_item6 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %10, i32 0, i32 1, !dbg !15906
  %arrayidx7 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item6, i32 0, i64 2, !dbg !15907
  store %struct._object* %call5, %struct._object** %arrayidx7, align 8, !dbg !15908, !tbaa !3867
  %f_bfree = getelementptr inbounds %struct.statvfs, %struct.statvfs* %st, i32 0, i32 3, !dbg !15909
  %11 = load i64, i64* %f_bfree, align 8, !dbg !15909, !tbaa !15910
  %call8 = call %struct._object* @PyLong_FromLong(i64 %11), !dbg !15911
  %12 = load %struct._object*, %struct._object** %v, align 8, !dbg !15912, !tbaa !3867
  %13 = bitcast %struct._object* %12 to %struct.PyTupleObject*, !dbg !15913
  %ob_item9 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %13, i32 0, i32 1, !dbg !15914
  %arrayidx10 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item9, i32 0, i64 3, !dbg !15915
  store %struct._object* %call8, %struct._object** %arrayidx10, align 8, !dbg !15916, !tbaa !3867
  %f_bavail = getelementptr inbounds %struct.statvfs, %struct.statvfs* %st, i32 0, i32 4, !dbg !15917
  %14 = load i64, i64* %f_bavail, align 8, !dbg !15917, !tbaa !15918
  %call11 = call %struct._object* @PyLong_FromLong(i64 %14), !dbg !15919
  %15 = load %struct._object*, %struct._object** %v, align 8, !dbg !15920, !tbaa !3867
  %16 = bitcast %struct._object* %15 to %struct.PyTupleObject*, !dbg !15921
  %ob_item12 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %16, i32 0, i32 1, !dbg !15922
  %arrayidx13 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item12, i32 0, i64 4, !dbg !15923
  store %struct._object* %call11, %struct._object** %arrayidx13, align 8, !dbg !15924, !tbaa !3867
  %f_files = getelementptr inbounds %struct.statvfs, %struct.statvfs* %st, i32 0, i32 5, !dbg !15925
  %17 = load i64, i64* %f_files, align 8, !dbg !15925, !tbaa !15926
  %call14 = call %struct._object* @PyLong_FromLong(i64 %17), !dbg !15927
  %18 = load %struct._object*, %struct._object** %v, align 8, !dbg !15928, !tbaa !3867
  %19 = bitcast %struct._object* %18 to %struct.PyTupleObject*, !dbg !15929
  %ob_item15 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %19, i32 0, i32 1, !dbg !15930
  %arrayidx16 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item15, i32 0, i64 5, !dbg !15931
  store %struct._object* %call14, %struct._object** %arrayidx16, align 8, !dbg !15932, !tbaa !3867
  %f_ffree = getelementptr inbounds %struct.statvfs, %struct.statvfs* %st, i32 0, i32 6, !dbg !15933
  %20 = load i64, i64* %f_ffree, align 8, !dbg !15933, !tbaa !15934
  %call17 = call %struct._object* @PyLong_FromLong(i64 %20), !dbg !15935
  %21 = load %struct._object*, %struct._object** %v, align 8, !dbg !15936, !tbaa !3867
  %22 = bitcast %struct._object* %21 to %struct.PyTupleObject*, !dbg !15937
  %ob_item18 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %22, i32 0, i32 1, !dbg !15938
  %arrayidx19 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item18, i32 0, i64 6, !dbg !15939
  store %struct._object* %call17, %struct._object** %arrayidx19, align 8, !dbg !15940, !tbaa !3867
  %f_favail = getelementptr inbounds %struct.statvfs, %struct.statvfs* %st, i32 0, i32 7, !dbg !15941
  %23 = load i64, i64* %f_favail, align 8, !dbg !15941, !tbaa !15942
  %call20 = call %struct._object* @PyLong_FromLong(i64 %23), !dbg !15943
  %24 = load %struct._object*, %struct._object** %v, align 8, !dbg !15944, !tbaa !3867
  %25 = bitcast %struct._object* %24 to %struct.PyTupleObject*, !dbg !15945
  %ob_item21 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %25, i32 0, i32 1, !dbg !15946
  %arrayidx22 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item21, i32 0, i64 7, !dbg !15947
  store %struct._object* %call20, %struct._object** %arrayidx22, align 8, !dbg !15948, !tbaa !3867
  %f_flag = getelementptr inbounds %struct.statvfs, %struct.statvfs* %st, i32 0, i32 9, !dbg !15949
  %26 = load i64, i64* %f_flag, align 8, !dbg !15949, !tbaa !15950
  %call23 = call %struct._object* @PyLong_FromLong(i64 %26), !dbg !15951
  %27 = load %struct._object*, %struct._object** %v, align 8, !dbg !15952, !tbaa !3867
  %28 = bitcast %struct._object* %27 to %struct.PyTupleObject*, !dbg !15953
  %ob_item24 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %28, i32 0, i32 1, !dbg !15954
  %arrayidx25 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item24, i32 0, i64 8, !dbg !15955
  store %struct._object* %call23, %struct._object** %arrayidx25, align 8, !dbg !15956, !tbaa !3867
  %f_namemax = getelementptr inbounds %struct.statvfs, %struct.statvfs* %st, i32 0, i32 10, !dbg !15957
  %29 = load i64, i64* %f_namemax, align 8, !dbg !15957, !tbaa !15958
  %call26 = call %struct._object* @PyLong_FromLong(i64 %29), !dbg !15959
  %30 = load %struct._object*, %struct._object** %v, align 8, !dbg !15960, !tbaa !3867
  %31 = bitcast %struct._object* %30 to %struct.PyTupleObject*, !dbg !15961
  %ob_item27 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %31, i32 0, i32 1, !dbg !15962
  %arrayidx28 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item27, i32 0, i64 9, !dbg !15963
  store %struct._object* %call26, %struct._object** %arrayidx28, align 8, !dbg !15964, !tbaa !3867
  %call29 = call %struct._object* @PyErr_Occurred(), !dbg !15965
  %tobool = icmp ne %struct._object* %call29, null, !dbg !15965
  br i1 %tobool, label %if.then.30, label %if.end.34, !dbg !15966

if.then.30:                                       ; preds = %if.end
  br label %do.body, !dbg !15967

do.body:                                          ; preds = %if.then.30
  %32 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !15968
  call void @llvm.lifetime.start(i64 8, i8* %32) #3, !dbg !15968
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !2848, metadata !3844), !dbg !15970
  %33 = load %struct._object*, %struct._object** %v, align 8, !dbg !15971, !tbaa !3867
  store %struct._object* %33, %struct._object** %_py_decref_tmp, align 8, !dbg !15970, !tbaa !3867
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !15972, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 0, !dbg !15974
  %35 = load i64, i64* %ob_refcnt, align 8, !dbg !15975, !tbaa !3977
  %dec = add i64 %35, -1, !dbg !15975
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !15975, !tbaa !3977
  %cmp31 = icmp ne i64 %dec, 0, !dbg !15976
  br i1 %cmp31, label %if.then.32, label %if.else, !dbg !15977

if.then.32:                                       ; preds = %do.body
  br label %if.end.33, !dbg !15978

if.else:                                          ; preds = %do.body
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !15980, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1, !dbg !15982
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !15982, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 4, !dbg !15983
  %38 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !15983, !tbaa !3986
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !15984, !tbaa !3867
  call void %38(%struct._object* %39), !dbg !15985
  br label %if.end.33

if.end.33:                                        ; preds = %if.else, %if.then.32
  %40 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !15986
  call void @llvm.lifetime.end(i64 8, i8* %40) #3, !dbg !15986
  br label %do.cond, !dbg !15988

do.cond:                                          ; preds = %if.end.33
  br label %do.end, !dbg !15989

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !15991
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15991

if.end.34:                                        ; preds = %if.end
  %41 = load %struct._object*, %struct._object** %v, align 8, !dbg !15992, !tbaa !3867
  store %struct._object* %41, %struct._object** %retval, !dbg !15993
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !15993

cleanup:                                          ; preds = %if.end.34, %do.end, %if.then
  %42 = bitcast %struct._object** %v to i8*, !dbg !15994
  call void @llvm.lifetime.end(i64 8, i8* %42) #3, !dbg !15994
  %43 = load %struct._object*, %struct._object** %retval, !dbg !15994
  ret %struct._object* %43, !dbg !15994
}

; Function Attrs: nounwind
declare i32 @statvfs64(i8*, %struct.statvfs*) #4

; Function Attrs: nounwind uwtable
define internal i32 @conv_confstr_confname(%struct._object* %arg, i32* %valuep) #0 {
entry:
  %arg.addr = alloca %struct._object*, align 8
  %valuep.addr = alloca i32*, align 8
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !2881, metadata !3844), !dbg !15995
  store i32* %valuep, i32** %valuep.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i32** %valuep.addr, metadata !2882, metadata !3844), !dbg !15996
  %0 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !15997, !tbaa !3867
  %1 = load i32*, i32** %valuep.addr, align 8, !dbg !15998, !tbaa !3867
  %call = call i32 @conv_confname(%struct._object* %0, i32* %1, %struct.constdef* getelementptr inbounds ([27 x %struct.constdef], [27 x %struct.constdef]* @posix_constants_confstr, i32 0, i32 0), i64 27), !dbg !15999
  ret i32 %call, !dbg !16000
}

; Function Attrs: nounwind
declare i64 @confstr(i32, i8*, i64) #4

; Function Attrs: nounwind uwtable
define internal i32 @conv_confname(%struct._object* %arg, i32* %valuep, %struct.constdef* %table, i64 %tablesize) #0 {
entry:
  %retval = alloca i32, align 4
  %arg.addr = alloca %struct._object*, align 8
  %valuep.addr = alloca i32*, align 8
  %table.addr = alloca %struct.constdef*, align 8
  %tablesize.addr = alloca i64, align 8
  %lo = alloca i64, align 8
  %mid = alloca i64, align 8
  %hi = alloca i64, align 8
  %cmp1 = alloca i32, align 4
  %confname = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %__s1_len = alloca i64, align 8
  %__s2_len = alloca i64, align 8
  %tmp = alloca i32, align 4
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !2888, metadata !3844), !dbg !16001
  store i32* %valuep, i32** %valuep.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i32** %valuep.addr, metadata !2889, metadata !3844), !dbg !16002
  store %struct.constdef* %table, %struct.constdef** %table.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.constdef** %table.addr, metadata !2890, metadata !3844), !dbg !16003
  store i64 %tablesize, i64* %tablesize.addr, align 8, !tbaa !3904
  call void @llvm.dbg.declare(metadata i64* %tablesize.addr, metadata !2891, metadata !3844), !dbg !16004
  %0 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !16005, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1, !dbg !16006
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !16006, !tbaa !3892
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19, !dbg !16007
  %2 = load i64, i64* %tp_flags, align 8, !dbg !16007, !tbaa !6259
  %and = and i64 %2, 16777216, !dbg !16008
  %cmp = icmp ne i64 %and, 0, !dbg !16009
  br i1 %cmp, label %if.then, label %if.else, !dbg !16010

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !16011, !tbaa !3867
  %call = call i64 @PyLong_AsLong(%struct._object* %3), !dbg !16013
  %conv = trunc i64 %call to i32, !dbg !16013
  %4 = load i32*, i32** %valuep.addr, align 8, !dbg !16014, !tbaa !3867
  store i32 %conv, i32* %4, align 4, !dbg !16015, !tbaa !3840
  store i32 1, i32* %retval, !dbg !16016
  br label %return, !dbg !16016

if.else:                                          ; preds = %entry
  %5 = bitcast i64* %lo to i8*, !dbg !16017
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !16017
  call void @llvm.dbg.declare(metadata i64* %lo, metadata !2892, metadata !3844), !dbg !16018
  store i64 0, i64* %lo, align 8, !dbg !16018, !tbaa !3904
  %6 = bitcast i64* %mid to i8*, !dbg !16019
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !16019
  call void @llvm.dbg.declare(metadata i64* %mid, metadata !2895, metadata !3844), !dbg !16020
  %7 = bitcast i64* %hi to i8*, !dbg !16021
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !16021
  call void @llvm.dbg.declare(metadata i64* %hi, metadata !2896, metadata !3844), !dbg !16022
  %8 = load i64, i64* %tablesize.addr, align 8, !dbg !16023, !tbaa !3904
  store i64 %8, i64* %hi, align 8, !dbg !16022, !tbaa !3904
  %9 = bitcast i32* %cmp1 to i8*, !dbg !16024
  call void @llvm.lifetime.start(i64 4, i8* %9) #3, !dbg !16024
  call void @llvm.dbg.declare(metadata i32* %cmp1, metadata !2897, metadata !3844), !dbg !16025
  %10 = bitcast i8** %confname to i8*, !dbg !16026
  call void @llvm.lifetime.start(i64 8, i8* %10) #3, !dbg !16026
  call void @llvm.dbg.declare(metadata i8** %confname, metadata !2898, metadata !3844), !dbg !16027
  %11 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !16028, !tbaa !3867
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1, !dbg !16030
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8, !dbg !16030, !tbaa !3892
  %tp_flags3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 19, !dbg !16031
  %13 = load i64, i64* %tp_flags3, align 8, !dbg !16031, !tbaa !6259
  %and4 = and i64 %13, 268435456, !dbg !16032
  %cmp5 = icmp ne i64 %and4, 0, !dbg !16033
  br i1 %cmp5, label %if.end, label %if.then.7, !dbg !16034

if.then.7:                                        ; preds = %if.else
  %14 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !16035, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %14, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.339, i32 0, i32 0)), !dbg !16037
  store i32 0, i32* %retval, !dbg !16038
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !16038

if.end:                                           ; preds = %if.else
  %15 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !16039, !tbaa !3867
  %call8 = call i8* @PyUnicode_AsUTF8(%struct._object* %15), !dbg !16040
  store i8* %call8, i8** %confname, align 8, !dbg !16041, !tbaa !3867
  %16 = load i8*, i8** %confname, align 8, !dbg !16042, !tbaa !3867
  %cmp9 = icmp eq i8* %16, null, !dbg !16044
  br i1 %cmp9, label %if.then.11, label %if.end.12, !dbg !16045

if.then.11:                                       ; preds = %if.end
  store i32 0, i32* %retval, !dbg !16046
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !16046

if.end.12:                                        ; preds = %if.end
  br label %while.cond, !dbg !16047

while.cond:                                       ; preds = %if.end.28, %if.end.12
  %17 = load i64, i64* %lo, align 8, !dbg !16048, !tbaa !3904
  %18 = load i64, i64* %hi, align 8, !dbg !16051, !tbaa !3904
  %cmp13 = icmp ult i64 %17, %18, !dbg !16052
  br i1 %cmp13, label %while.body, label %while.end, !dbg !16047

while.body:                                       ; preds = %while.cond
  %19 = load i64, i64* %lo, align 8, !dbg !16053, !tbaa !3904
  %20 = load i64, i64* %hi, align 8, !dbg !16054, !tbaa !3904
  %add = add i64 %19, %20, !dbg !16055
  %div = udiv i64 %add, 2, !dbg !16056
  store i64 %div, i64* %mid, align 8, !dbg !16057, !tbaa !3904
  %21 = bitcast i64* %__s1_len to i8*, !dbg !16058
  call void @llvm.lifetime.start(i64 8, i8* %21) #3, !dbg !16058
  call void @llvm.dbg.declare(metadata i64* %__s1_len, metadata !2899, metadata !3844), !dbg !16059
  %22 = bitcast i64* %__s2_len to i8*, !dbg !16058
  call void @llvm.lifetime.start(i64 8, i8* %22) #3, !dbg !16058
  call void @llvm.dbg.declare(metadata i64* %__s2_len, metadata !2902, metadata !3844), !dbg !16060
  %23 = load i8*, i8** %confname, align 8, !dbg !16061, !tbaa !3867
  %24 = load i64, i64* %mid, align 8, !dbg !16062, !tbaa !3904
  %25 = load %struct.constdef*, %struct.constdef** %table.addr, align 8, !dbg !16063, !tbaa !3867
  %arrayidx = getelementptr %struct.constdef, %struct.constdef* %25, i64 %24, !dbg !16063
  %name = getelementptr inbounds %struct.constdef, %struct.constdef* %arrayidx, i32 0, i32 0, !dbg !16064
  %26 = load i8*, i8** %name, align 8, !dbg !16064, !tbaa !16065
  %call15 = call i32 @strcmp(i8* %23, i8* %26) #3, !dbg !16067
  store i32 %call15, i32* %tmp, !dbg !16058, !tbaa !3840
  %27 = bitcast i64* %__s2_len to i8*, !dbg !16068
  call void @llvm.lifetime.end(i64 8, i8* %27) #3, !dbg !16068
  %28 = bitcast i64* %__s1_len to i8*, !dbg !16068
  call void @llvm.lifetime.end(i64 8, i8* %28) #3, !dbg !16068
  %29 = load i32, i32* %tmp, !dbg !16069, !tbaa !3840
  store i32 %29, i32* %cmp1, align 4, !dbg !16070, !tbaa !3840
  %30 = load i32, i32* %cmp1, align 4, !dbg !16071, !tbaa !3840
  %cmp16 = icmp slt i32 %30, 0, !dbg !16073
  br i1 %cmp16, label %if.then.18, label %if.else.19, !dbg !16074

if.then.18:                                       ; preds = %while.body
  %31 = load i64, i64* %mid, align 8, !dbg !16075, !tbaa !3904
  store i64 %31, i64* %hi, align 8, !dbg !16076, !tbaa !3904
  br label %if.end.28, !dbg !16077

if.else.19:                                       ; preds = %while.body
  %32 = load i32, i32* %cmp1, align 4, !dbg !16078, !tbaa !3840
  %cmp20 = icmp sgt i32 %32, 0, !dbg !16080
  br i1 %cmp20, label %if.then.22, label %if.else.24, !dbg !16081

if.then.22:                                       ; preds = %if.else.19
  %33 = load i64, i64* %mid, align 8, !dbg !16082, !tbaa !3904
  %add23 = add i64 %33, 1, !dbg !16083
  store i64 %add23, i64* %lo, align 8, !dbg !16084, !tbaa !3904
  br label %if.end.27, !dbg !16085

if.else.24:                                       ; preds = %if.else.19
  %34 = load i64, i64* %mid, align 8, !dbg !16086, !tbaa !3904
  %35 = load %struct.constdef*, %struct.constdef** %table.addr, align 8, !dbg !16088, !tbaa !3867
  %arrayidx25 = getelementptr %struct.constdef, %struct.constdef* %35, i64 %34, !dbg !16088
  %value = getelementptr inbounds %struct.constdef, %struct.constdef* %arrayidx25, i32 0, i32 1, !dbg !16089
  %36 = load i64, i64* %value, align 8, !dbg !16089, !tbaa !16090
  %conv26 = trunc i64 %36 to i32, !dbg !16088
  %37 = load i32*, i32** %valuep.addr, align 8, !dbg !16091, !tbaa !3867
  store i32 %conv26, i32* %37, align 4, !dbg !16092, !tbaa !3840
  store i32 1, i32* %retval, !dbg !16093
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !16093

if.end.27:                                        ; preds = %if.then.22
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.then.18
  br label %while.cond, !dbg !16047

while.end:                                        ; preds = %while.cond
  %38 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !16094, !tbaa !3867
  call void @PyErr_SetString(%struct._object* %38, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.340, i32 0, i32 0)), !dbg !16095
  store i32 0, i32* %retval, !dbg !16096
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !16096

cleanup:                                          ; preds = %while.end, %if.else.24, %if.then.11, %if.then.7
  %39 = bitcast i8** %confname to i8*, !dbg !16097
  call void @llvm.lifetime.end(i64 8, i8* %39) #3, !dbg !16097
  %40 = bitcast i32* %cmp1 to i8*, !dbg !16097
  call void @llvm.lifetime.end(i64 4, i8* %40) #3, !dbg !16097
  %41 = bitcast i64* %hi to i8*, !dbg !16097
  call void @llvm.lifetime.end(i64 8, i8* %41) #3, !dbg !16097
  %42 = bitcast i64* %mid to i8*, !dbg !16097
  call void @llvm.lifetime.end(i64 8, i8* %42) #3, !dbg !16097
  %43 = bitcast i64* %lo to i8*, !dbg !16097
  call void @llvm.lifetime.end(i64 8, i8* %43) #3, !dbg !16097
  br label %return

return:                                           ; preds = %cleanup, %if.then
  %44 = load i32, i32* %retval, !dbg !16098
  ret i32 %44, !dbg !16098
}

declare i8* @PyUnicode_AsUTF8(%struct._object*) #2

; Function Attrs: nounwind
declare i32 @strcmp(i8*, i8*) #4

; Function Attrs: nounwind uwtable
define internal i32 @conv_sysconf_confname(%struct._object* %arg, i32* %valuep) #0 {
entry:
  %arg.addr = alloca %struct._object*, align 8
  %valuep.addr = alloca i32*, align 8
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !2914, metadata !3844), !dbg !16099
  store i32* %valuep, i32** %valuep.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i32** %valuep.addr, metadata !2915, metadata !3844), !dbg !16100
  %0 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !16101, !tbaa !3867
  %1 = load i32*, i32** %valuep.addr, align 8, !dbg !16102, !tbaa !3867
  %call = call i32 @conv_confname(%struct._object* %0, i32* %1, %struct.constdef* getelementptr inbounds ([134 x %struct.constdef], [134 x %struct.constdef]* @posix_constants_sysconf, i32 0, i32 0), i64 134), !dbg !16103
  ret i32 %call, !dbg !16104
}

; Function Attrs: nounwind uwtable
define internal i32 @conv_path_confname(%struct._object* %arg, i32* %valuep) #0 {
entry:
  %arg.addr = alloca %struct._object*, align 8
  %valuep.addr = alloca i32*, align 8
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !2928, metadata !3844), !dbg !16105
  store i32* %valuep, i32** %valuep.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i32** %valuep.addr, metadata !2929, metadata !3844), !dbg !16106
  %0 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !16107, !tbaa !3867
  %1 = load i32*, i32** %valuep.addr, align 8, !dbg !16108, !tbaa !3867
  %call = call i32 @conv_confname(%struct._object* %0, i32* %1, %struct.constdef* getelementptr inbounds ([20 x %struct.constdef], [20 x %struct.constdef]* @posix_constants_pathconf, i32 0, i32 0), i64 20), !dbg !16109
  ret i32 %call, !dbg !16110
}

; Function Attrs: nounwind
declare i64 @fpathconf(i32, i32) #4

; Function Attrs: nounwind
declare i64 @pathconf(i8*, i32) #4

; Function Attrs: noreturn nounwind
declare void @abort() #10

; Function Attrs: nounwind
declare i32 @getloadavg(double*, i32) #4

declare i32 @_PyOS_URandom(i8*, i64) #2

; Function Attrs: nounwind
declare i32 @setresuid(i32, i32, i32) #4

; Function Attrs: nounwind
declare i32 @setresgid(i32, i32, i32) #4

; Function Attrs: nounwind
declare i32 @getresuid(i32*, i32*, i32*) #4

; Function Attrs: nounwind
declare i32 @getresgid(i32*, i32*, i32*) #4

; Function Attrs: nounwind
declare i32 @fsetxattr(i32, i8*, i8*, i64, i32) #4

; Function Attrs: nounwind
declare i32 @setxattr(i8*, i8*, i8*, i64, i32) #4

; Function Attrs: nounwind
declare i32 @lsetxattr(i8*, i8*, i8*, i64, i32) #4

; Function Attrs: nounwind
declare i64 @fgetxattr(i32, i8*, i8*, i64) #4

; Function Attrs: nounwind
declare i64 @getxattr(i8*, i8*, i8*, i64) #4

; Function Attrs: nounwind
declare i64 @lgetxattr(i8*, i8*, i8*, i64) #4

; Function Attrs: nounwind
declare i32 @fremovexattr(i32, i8*) #4

; Function Attrs: nounwind
declare i32 @removexattr(i8*, i8*) #4

; Function Attrs: nounwind
declare i32 @lremovexattr(i8*, i8*) #4

; Function Attrs: nounwind
declare i64 @flistxattr(i32, i8*, i64) #4

; Function Attrs: nounwind
declare i64 @listxattr(i8*, i8*, i64) #4

; Function Attrs: nounwind
declare i64 @llistxattr(i8*, i8*, i64) #4

; Function Attrs: nounwind
declare i32 @fileno(%struct._IO_FILE*) #4

; Function Attrs: nounwind
declare i32 @ioctl(i32, i64, ...) #4

declare i32 @_Py_get_inheritable(i32) #2

; Function Attrs: nounwind
declare i8* @strchr(i8*, i32) #4

declare %struct._object* @PyDict_GetItem(%struct._object*, %struct._object*) #2

declare i32 @PyModule_AddIntConstant(%struct._object*, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @setup_confname_table(%struct.constdef* %table, i64 %tablesize, i8* %tablename, %struct._object* %module) #0 {
entry:
  %retval = alloca i32, align 4
  %table.addr = alloca %struct.constdef*, align 8
  %tablesize.addr = alloca i64, align 8
  %tablename.addr = alloca i8*, align 8
  %module.addr = alloca %struct._object*, align 8
  %d = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %o = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp18 = alloca %struct._object*, align 8
  %_py_decref_tmp31 = alloca %struct._object*, align 8
  store %struct.constdef* %table, %struct.constdef** %table.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct.constdef** %table.addr, metadata !3141, metadata !3844), !dbg !16111
  store i64 %tablesize, i64* %tablesize.addr, align 8, !tbaa !3904
  call void @llvm.dbg.declare(metadata i64* %tablesize.addr, metadata !3142, metadata !3844), !dbg !16112
  store i8* %tablename, i8** %tablename.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %tablename.addr, metadata !3143, metadata !3844), !dbg !16113
  store %struct._object* %module, %struct._object** %module.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata %struct._object** %module.addr, metadata !3144, metadata !3844), !dbg !16114
  %0 = bitcast %struct._object** %d to i8*, !dbg !16115
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !16115
  call void @llvm.dbg.declare(metadata %struct._object** %d, metadata !3145, metadata !3844), !dbg !16116
  store %struct._object* null, %struct._object** %d, align 8, !dbg !16116, !tbaa !3867
  %1 = bitcast i64* %i to i8*, !dbg !16117
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !16117
  call void @llvm.dbg.declare(metadata i64* %i, metadata !3146, metadata !3844), !dbg !16118
  %2 = load %struct.constdef*, %struct.constdef** %table.addr, align 8, !dbg !16119, !tbaa !3867
  %3 = bitcast %struct.constdef* %2 to i8*, !dbg !16119
  %4 = load i64, i64* %tablesize.addr, align 8, !dbg !16120, !tbaa !3904
  call void @qsort(i8* %3, i64 %4, i64 16, i32 (i8*, i8*)* @cmp_constdefs), !dbg !16121
  %call = call %struct._object* @PyDict_New(), !dbg !16122
  store %struct._object* %call, %struct._object** %d, align 8, !dbg !16123, !tbaa !3867
  %5 = load %struct._object*, %struct._object** %d, align 8, !dbg !16124, !tbaa !3867
  %cmp = icmp eq %struct._object* %5, null, !dbg !16126
  br i1 %cmp, label %if.then, label %if.end, !dbg !16127

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, !dbg !16128
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.43, !dbg !16128

if.end:                                           ; preds = %entry
  store i64 0, i64* %i, align 8, !dbg !16129, !tbaa !3904
  br label %for.cond, !dbg !16130

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i64, i64* %i, align 8, !dbg !16131, !tbaa !3904
  %7 = load i64, i64* %tablesize.addr, align 8, !dbg !16134, !tbaa !3904
  %cmp1 = icmp ult i64 %6, %7, !dbg !16135
  br i1 %cmp1, label %for.body, label %for.end, !dbg !16136

for.body:                                         ; preds = %for.cond
  %8 = bitcast %struct._object** %o to i8*, !dbg !16137
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !16137
  call void @llvm.dbg.declare(metadata %struct._object** %o, metadata !3147, metadata !3844), !dbg !16138
  %9 = load i64, i64* %i, align 8, !dbg !16139, !tbaa !3904
  %10 = load %struct.constdef*, %struct.constdef** %table.addr, align 8, !dbg !16140, !tbaa !3867
  %arrayidx = getelementptr %struct.constdef, %struct.constdef* %10, i64 %9, !dbg !16140
  %value = getelementptr inbounds %struct.constdef, %struct.constdef* %arrayidx, i32 0, i32 1, !dbg !16141
  %11 = load i64, i64* %value, align 8, !dbg !16141, !tbaa !16090
  %call2 = call %struct._object* @PyLong_FromLong(i64 %11), !dbg !16142
  store %struct._object* %call2, %struct._object** %o, align 8, !dbg !16138, !tbaa !3867
  %12 = load %struct._object*, %struct._object** %o, align 8, !dbg !16143, !tbaa !3867
  %cmp3 = icmp eq %struct._object* %12, null, !dbg !16144
  br i1 %cmp3, label %if.then.7, label %lor.lhs.false, !dbg !16145

lor.lhs.false:                                    ; preds = %for.body
  %13 = load %struct._object*, %struct._object** %d, align 8, !dbg !16146, !tbaa !3867
  %14 = load i64, i64* %i, align 8, !dbg !16148, !tbaa !3904
  %15 = load %struct.constdef*, %struct.constdef** %table.addr, align 8, !dbg !16149, !tbaa !3867
  %arrayidx4 = getelementptr %struct.constdef, %struct.constdef* %15, i64 %14, !dbg !16149
  %name = getelementptr inbounds %struct.constdef, %struct.constdef* %arrayidx4, i32 0, i32 0, !dbg !16150
  %16 = load i8*, i8** %name, align 8, !dbg !16150, !tbaa !16065
  %17 = load %struct._object*, %struct._object** %o, align 8, !dbg !16151, !tbaa !3867
  %call5 = call i32 @PyDict_SetItemString(%struct._object* %13, i8* %16, %struct._object* %17), !dbg !16152
  %cmp6 = icmp eq i32 %call5, -1, !dbg !16153
  br i1 %cmp6, label %if.then.7, label %if.end.29, !dbg !16154

if.then.7:                                        ; preds = %lor.lhs.false, %for.body
  br label %do.body, !dbg !16155

do.body:                                          ; preds = %if.then.7
  %18 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !16156
  call void @llvm.lifetime.start(i64 8, i8* %18) #3, !dbg !16156
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !3151, metadata !3844), !dbg !16158
  %19 = load %struct._object*, %struct._object** %o, align 8, !dbg !16159, !tbaa !3867
  store %struct._object* %19, %struct._object** %_py_xdecref_tmp, align 8, !dbg !16158, !tbaa !3867
  %20 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !16160, !tbaa !3867
  %cmp8 = icmp ne %struct._object* %20, null, !dbg !16161
  br i1 %cmp8, label %if.then.9, label %if.end.14, !dbg !16162

if.then.9:                                        ; preds = %do.body
  br label %do.body.10, !dbg !16163

do.body.10:                                       ; preds = %if.then.9
  %21 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !16165
  call void @llvm.lifetime.start(i64 8, i8* %21) #3, !dbg !16165
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !3155, metadata !3844), !dbg !16167
  %22 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !16168, !tbaa !3867
  store %struct._object* %22, %struct._object** %_py_decref_tmp, align 8, !dbg !16167, !tbaa !3867
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !16169, !tbaa !3867
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0, !dbg !16171
  %24 = load i64, i64* %ob_refcnt, align 8, !dbg !16172, !tbaa !3977
  %dec = add i64 %24, -1, !dbg !16172
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !16172, !tbaa !3977
  %cmp11 = icmp ne i64 %dec, 0, !dbg !16173
  br i1 %cmp11, label %if.then.12, label %if.else, !dbg !16174

if.then.12:                                       ; preds = %do.body.10
  br label %if.end.13, !dbg !16175

if.else:                                          ; preds = %do.body.10
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !16177, !tbaa !3867
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1, !dbg !16179
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !16179, !tbaa !3892
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4, !dbg !16180
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !16180, !tbaa !3986
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !16181, !tbaa !3867
  call void %27(%struct._object* %28), !dbg !16182
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.12
  %29 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !16183
  call void @llvm.lifetime.end(i64 8, i8* %29) #3, !dbg !16183
  br label %do.cond, !dbg !16185

do.cond:                                          ; preds = %if.end.13
  br label %do.end, !dbg !16186

do.end:                                           ; preds = %do.cond
  br label %if.end.14, !dbg !16188

if.end.14:                                        ; preds = %do.end, %do.body
  %30 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !16190
  call void @llvm.lifetime.end(i64 8, i8* %30) #3, !dbg !16190
  br label %do.cond.15, !dbg !16193

do.cond.15:                                       ; preds = %if.end.14
  br label %do.end.16, !dbg !16194

do.end.16:                                        ; preds = %do.cond.15
  br label %do.body.17, !dbg !16196

do.body.17:                                       ; preds = %do.end.16
  %31 = bitcast %struct._object** %_py_decref_tmp18 to i8*, !dbg !16197
  call void @llvm.lifetime.start(i64 8, i8* %31) #3, !dbg !16197
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp18, metadata !3158, metadata !3844), !dbg !16199
  %32 = load %struct._object*, %struct._object** %d, align 8, !dbg !16200, !tbaa !3867
  store %struct._object* %32, %struct._object** %_py_decref_tmp18, align 8, !dbg !16199, !tbaa !3867
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8, !dbg !16201, !tbaa !3867
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0, !dbg !16203
  %34 = load i64, i64* %ob_refcnt19, align 8, !dbg !16204, !tbaa !3977
  %dec20 = add i64 %34, -1, !dbg !16204
  store i64 %dec20, i64* %ob_refcnt19, align 8, !dbg !16204, !tbaa !3977
  %cmp21 = icmp ne i64 %dec20, 0, !dbg !16205
  br i1 %cmp21, label %if.then.22, label %if.else.23, !dbg !16206

if.then.22:                                       ; preds = %do.body.17
  br label %if.end.26, !dbg !16207

if.else.23:                                       ; preds = %do.body.17
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8, !dbg !16209, !tbaa !3867
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1, !dbg !16211
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8, !dbg !16211, !tbaa !3892
  %tp_dealloc25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4, !dbg !16212
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc25, align 8, !dbg !16212, !tbaa !3986
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8, !dbg !16213, !tbaa !3867
  call void %37(%struct._object* %38), !dbg !16214
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.23, %if.then.22
  %39 = bitcast %struct._object** %_py_decref_tmp18 to i8*, !dbg !16215
  call void @llvm.lifetime.end(i64 8, i8* %39) #3, !dbg !16215
  br label %do.cond.27, !dbg !16217

do.cond.27:                                       ; preds = %if.end.26
  br label %do.end.28, !dbg !16218

do.end.28:                                        ; preds = %do.cond.27
  store i32 -1, i32* %retval, !dbg !16220
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !16220

if.end.29:                                        ; preds = %lor.lhs.false
  br label %do.body.30, !dbg !16221

do.body.30:                                       ; preds = %if.end.29
  %40 = bitcast %struct._object** %_py_decref_tmp31 to i8*, !dbg !16222
  call void @llvm.lifetime.start(i64 8, i8* %40) #3, !dbg !16222
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp31, metadata !3160, metadata !3844), !dbg !16224
  %41 = load %struct._object*, %struct._object** %o, align 8, !dbg !16225, !tbaa !3867
  store %struct._object* %41, %struct._object** %_py_decref_tmp31, align 8, !dbg !16224, !tbaa !3867
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8, !dbg !16226, !tbaa !3867
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0, !dbg !16228
  %43 = load i64, i64* %ob_refcnt32, align 8, !dbg !16229, !tbaa !3977
  %dec33 = add i64 %43, -1, !dbg !16229
  store i64 %dec33, i64* %ob_refcnt32, align 8, !dbg !16229, !tbaa !3977
  %cmp34 = icmp ne i64 %dec33, 0, !dbg !16230
  br i1 %cmp34, label %if.then.35, label %if.else.36, !dbg !16231

if.then.35:                                       ; preds = %do.body.30
  br label %if.end.39, !dbg !16232

if.else.36:                                       ; preds = %do.body.30
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8, !dbg !16234, !tbaa !3867
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1, !dbg !16236
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8, !dbg !16236, !tbaa !3892
  %tp_dealloc38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4, !dbg !16237
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc38, align 8, !dbg !16237, !tbaa !3986
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8, !dbg !16238, !tbaa !3867
  call void %46(%struct._object* %47), !dbg !16239
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.36, %if.then.35
  %48 = bitcast %struct._object** %_py_decref_tmp31 to i8*, !dbg !16240
  call void @llvm.lifetime.end(i64 8, i8* %48) #3, !dbg !16240
  br label %do.cond.40, !dbg !16242

do.cond.40:                                       ; preds = %if.end.39
  br label %do.end.41, !dbg !16243

do.end.41:                                        ; preds = %do.cond.40
  store i32 0, i32* %cleanup.dest.slot, !dbg !16245
  br label %cleanup, !dbg !16245

cleanup:                                          ; preds = %do.end.41, %do.end.28
  %49 = bitcast %struct._object** %o to i8*, !dbg !16246
  call void @llvm.lifetime.end(i64 8, i8* %49) #3, !dbg !16246
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %for.inc, !dbg !16247

for.inc:                                          ; preds = %cleanup.cont
  %50 = load i64, i64* %i, align 8, !dbg !16248, !tbaa !3904
  %inc = add i64 %50, 1, !dbg !16248
  store i64 %inc, i64* %i, align 8, !dbg !16248, !tbaa !3904
  br label %for.cond, !dbg !16249

for.end:                                          ; preds = %for.cond
  %51 = load %struct._object*, %struct._object** %module.addr, align 8, !dbg !16250, !tbaa !3867
  %52 = load i8*, i8** %tablename.addr, align 8, !dbg !16251, !tbaa !3867
  %53 = load %struct._object*, %struct._object** %d, align 8, !dbg !16252, !tbaa !3867
  %call42 = call i32 @PyModule_AddObject(%struct._object* %51, i8* %52, %struct._object* %53), !dbg !16253
  store i32 %call42, i32* %retval, !dbg !16254
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.43, !dbg !16254

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.43

cleanup.43:                                       ; preds = %NewDefault, %for.end, %if.then
  %54 = bitcast i64* %i to i8*, !dbg !16255
  call void @llvm.lifetime.end(i64 8, i8* %54) #3, !dbg !16255
  %55 = bitcast %struct._object** %d to i8*, !dbg !16255
  call void @llvm.lifetime.end(i64 8, i8* %55) #3, !dbg !16255
  %56 = load i32, i32* %retval, !dbg !16255
  ret i32 %56, !dbg !16255
}

declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: nounwind uwtable
define internal i32 @cmp_constdefs(i8* %v1, i8* %v2) #0 {
entry:
  %v1.addr = alloca i8*, align 8
  %v2.addr = alloca i8*, align 8
  %c1 = alloca %struct.constdef*, align 8
  %c2 = alloca %struct.constdef*, align 8
  %__s1_len = alloca i64, align 8
  %__s2_len = alloca i64, align 8
  %tmp = alloca i32, align 4
  store i8* %v1, i8** %v1.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %v1.addr, metadata !3168, metadata !3844), !dbg !16256
  store i8* %v2, i8** %v2.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %v2.addr, metadata !3169, metadata !3844), !dbg !16257
  %0 = bitcast %struct.constdef** %c1 to i8*, !dbg !16258
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !16258
  call void @llvm.dbg.declare(metadata %struct.constdef** %c1, metadata !3170, metadata !3844), !dbg !16259
  %1 = load i8*, i8** %v1.addr, align 8, !dbg !16260, !tbaa !3867
  %2 = bitcast i8* %1 to %struct.constdef*, !dbg !16261
  store %struct.constdef* %2, %struct.constdef** %c1, align 8, !dbg !16259, !tbaa !3867
  %3 = bitcast %struct.constdef** %c2 to i8*, !dbg !16262
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !16262
  call void @llvm.dbg.declare(metadata %struct.constdef** %c2, metadata !3171, metadata !3844), !dbg !16263
  %4 = load i8*, i8** %v2.addr, align 8, !dbg !16264, !tbaa !3867
  %5 = bitcast i8* %4 to %struct.constdef*, !dbg !16265
  store %struct.constdef* %5, %struct.constdef** %c2, align 8, !dbg !16263, !tbaa !3867
  %6 = bitcast i64* %__s1_len to i8*, !dbg !16266
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !16266
  call void @llvm.dbg.declare(metadata i64* %__s1_len, metadata !3172, metadata !3844), !dbg !16267
  %7 = bitcast i64* %__s2_len to i8*, !dbg !16266
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !16266
  call void @llvm.dbg.declare(metadata i64* %__s2_len, metadata !3174, metadata !3844), !dbg !16268
  %8 = load %struct.constdef*, %struct.constdef** %c1, align 8, !dbg !16269, !tbaa !3867
  %name = getelementptr inbounds %struct.constdef, %struct.constdef* %8, i32 0, i32 0, !dbg !16270
  %9 = load i8*, i8** %name, align 8, !dbg !16270, !tbaa !16065
  %10 = load %struct.constdef*, %struct.constdef** %c2, align 8, !dbg !16271, !tbaa !3867
  %name1 = getelementptr inbounds %struct.constdef, %struct.constdef* %10, i32 0, i32 0, !dbg !16272
  %11 = load i8*, i8** %name1, align 8, !dbg !16272, !tbaa !16065
  %call = call i32 @strcmp(i8* %9, i8* %11) #3, !dbg !16273
  store i32 %call, i32* %tmp, !dbg !16266, !tbaa !3840
  %12 = bitcast i64* %__s2_len to i8*, !dbg !16274
  call void @llvm.lifetime.end(i64 8, i8* %12) #3, !dbg !16274
  %13 = bitcast i64* %__s1_len to i8*, !dbg !16274
  call void @llvm.lifetime.end(i64 8, i8* %13) #3, !dbg !16274
  %14 = load i32, i32* %tmp, !dbg !16275, !tbaa !3840
  %15 = bitcast %struct.constdef** %c2 to i8*, !dbg !16276
  call void @llvm.lifetime.end(i64 8, i8* %15) #3, !dbg !16276
  %16 = bitcast %struct.constdef** %c1 to i8*, !dbg !16276
  call void @llvm.lifetime.end(i64 8, i8* %16) #3, !dbg !16276
  ret i32 %14, !dbg !16277
}

declare i32 @PyDict_SetItemString(%struct._object*, i8*, %struct._object*) #2

; Function Attrs: nounwind uwtable
define internal void @argument_unavailable_error(i8* %function_name, i8* %argument_name) #0 {
entry:
  %function_name.addr = alloca i8*, align 8
  %argument_name.addr = alloca i8*, align 8
  store i8* %function_name, i8** %function_name.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %function_name.addr, metadata !3208, metadata !3844), !dbg !16278
  store i8* %argument_name, i8** %argument_name.addr, align 8, !tbaa !3867
  call void @llvm.dbg.declare(metadata i8** %argument_name.addr, metadata !3209, metadata !3844), !dbg !16279
  %0 = load %struct._object*, %struct._object** @PyExc_NotImplementedError, align 8, !dbg !16280, !tbaa !3867
  %1 = load i8*, i8** %function_name.addr, align 8, !dbg !16281, !tbaa !3867
  %cmp = icmp ne i8* %1, null, !dbg !16282
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !16283

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %function_name.addr, align 8, !dbg !16284, !tbaa !3867
  br label %cond.end, !dbg !16283

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !16286

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %2, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), %cond.false ], !dbg !16283
  %3 = load i8*, i8** %function_name.addr, align 8, !dbg !16288, !tbaa !3867
  %cmp1 = icmp ne i8* %3, null, !dbg !16289
  %cond2 = select i1 %cmp1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.174, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.21, i32 0, i32 0), !dbg !16290
  %4 = load i8*, i8** %argument_name.addr, align 8, !dbg !16291, !tbaa !3867
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.720, i32 0, i32 0), i8* %cond, i8* %cond2, i8* %4), !dbg !16292
  ret void, !dbg !16293
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readonly }
attributes #12 = { noreturn }
attributes #13 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3837, !3838}
!llvm.ident = !{!3839}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.1 (https://github.com/llvm-mirror/clang.git 0dbefa1b83eb90f7a06b5df5df254ce32be3db4b) (git@github.com:kim-yoonseung/llvm.git e8e68907a8135028089af4d924da468e2b7257fa)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !267, subprograms: !689, globals: !3228)
!1 = !DIFile(filename: "posixmodule.c", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!2 = !{!3, !221, !226, !232, !238, !253, !262}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 72, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "/usr/include/bits/confname.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!5 = !{!6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220}
!6 = !DIEnumerator(name: "_SC_ARG_MAX", value: 0)
!7 = !DIEnumerator(name: "_SC_CHILD_MAX", value: 1)
!8 = !DIEnumerator(name: "_SC_CLK_TCK", value: 2)
!9 = !DIEnumerator(name: "_SC_NGROUPS_MAX", value: 3)
!10 = !DIEnumerator(name: "_SC_OPEN_MAX", value: 4)
!11 = !DIEnumerator(name: "_SC_STREAM_MAX", value: 5)
!12 = !DIEnumerator(name: "_SC_TZNAME_MAX", value: 6)
!13 = !DIEnumerator(name: "_SC_JOB_CONTROL", value: 7)
!14 = !DIEnumerator(name: "_SC_SAVED_IDS", value: 8)
!15 = !DIEnumerator(name: "_SC_REALTIME_SIGNALS", value: 9)
!16 = !DIEnumerator(name: "_SC_PRIORITY_SCHEDULING", value: 10)
!17 = !DIEnumerator(name: "_SC_TIMERS", value: 11)
!18 = !DIEnumerator(name: "_SC_ASYNCHRONOUS_IO", value: 12)
!19 = !DIEnumerator(name: "_SC_PRIORITIZED_IO", value: 13)
!20 = !DIEnumerator(name: "_SC_SYNCHRONIZED_IO", value: 14)
!21 = !DIEnumerator(name: "_SC_FSYNC", value: 15)
!22 = !DIEnumerator(name: "_SC_MAPPED_FILES", value: 16)
!23 = !DIEnumerator(name: "_SC_MEMLOCK", value: 17)
!24 = !DIEnumerator(name: "_SC_MEMLOCK_RANGE", value: 18)
!25 = !DIEnumerator(name: "_SC_MEMORY_PROTECTION", value: 19)
!26 = !DIEnumerator(name: "_SC_MESSAGE_PASSING", value: 20)
!27 = !DIEnumerator(name: "_SC_SEMAPHORES", value: 21)
!28 = !DIEnumerator(name: "_SC_SHARED_MEMORY_OBJECTS", value: 22)
!29 = !DIEnumerator(name: "_SC_AIO_LISTIO_MAX", value: 23)
!30 = !DIEnumerator(name: "_SC_AIO_MAX", value: 24)
!31 = !DIEnumerator(name: "_SC_AIO_PRIO_DELTA_MAX", value: 25)
!32 = !DIEnumerator(name: "_SC_DELAYTIMER_MAX", value: 26)
!33 = !DIEnumerator(name: "_SC_MQ_OPEN_MAX", value: 27)
!34 = !DIEnumerator(name: "_SC_MQ_PRIO_MAX", value: 28)
!35 = !DIEnumerator(name: "_SC_VERSION", value: 29)
!36 = !DIEnumerator(name: "_SC_PAGESIZE", value: 30)
!37 = !DIEnumerator(name: "_SC_RTSIG_MAX", value: 31)
!38 = !DIEnumerator(name: "_SC_SEM_NSEMS_MAX", value: 32)
!39 = !DIEnumerator(name: "_SC_SEM_VALUE_MAX", value: 33)
!40 = !DIEnumerator(name: "_SC_SIGQUEUE_MAX", value: 34)
!41 = !DIEnumerator(name: "_SC_TIMER_MAX", value: 35)
!42 = !DIEnumerator(name: "_SC_BC_BASE_MAX", value: 36)
!43 = !DIEnumerator(name: "_SC_BC_DIM_MAX", value: 37)
!44 = !DIEnumerator(name: "_SC_BC_SCALE_MAX", value: 38)
!45 = !DIEnumerator(name: "_SC_BC_STRING_MAX", value: 39)
!46 = !DIEnumerator(name: "_SC_COLL_WEIGHTS_MAX", value: 40)
!47 = !DIEnumerator(name: "_SC_EQUIV_CLASS_MAX", value: 41)
!48 = !DIEnumerator(name: "_SC_EXPR_NEST_MAX", value: 42)
!49 = !DIEnumerator(name: "_SC_LINE_MAX", value: 43)
!50 = !DIEnumerator(name: "_SC_RE_DUP_MAX", value: 44)
!51 = !DIEnumerator(name: "_SC_CHARCLASS_NAME_MAX", value: 45)
!52 = !DIEnumerator(name: "_SC_2_VERSION", value: 46)
!53 = !DIEnumerator(name: "_SC_2_C_BIND", value: 47)
!54 = !DIEnumerator(name: "_SC_2_C_DEV", value: 48)
!55 = !DIEnumerator(name: "_SC_2_FORT_DEV", value: 49)
!56 = !DIEnumerator(name: "_SC_2_FORT_RUN", value: 50)
!57 = !DIEnumerator(name: "_SC_2_SW_DEV", value: 51)
!58 = !DIEnumerator(name: "_SC_2_LOCALEDEF", value: 52)
!59 = !DIEnumerator(name: "_SC_PII", value: 53)
!60 = !DIEnumerator(name: "_SC_PII_XTI", value: 54)
!61 = !DIEnumerator(name: "_SC_PII_SOCKET", value: 55)
!62 = !DIEnumerator(name: "_SC_PII_INTERNET", value: 56)
!63 = !DIEnumerator(name: "_SC_PII_OSI", value: 57)
!64 = !DIEnumerator(name: "_SC_POLL", value: 58)
!65 = !DIEnumerator(name: "_SC_SELECT", value: 59)
!66 = !DIEnumerator(name: "_SC_UIO_MAXIOV", value: 60)
!67 = !DIEnumerator(name: "_SC_IOV_MAX", value: 60)
!68 = !DIEnumerator(name: "_SC_PII_INTERNET_STREAM", value: 61)
!69 = !DIEnumerator(name: "_SC_PII_INTERNET_DGRAM", value: 62)
!70 = !DIEnumerator(name: "_SC_PII_OSI_COTS", value: 63)
!71 = !DIEnumerator(name: "_SC_PII_OSI_CLTS", value: 64)
!72 = !DIEnumerator(name: "_SC_PII_OSI_M", value: 65)
!73 = !DIEnumerator(name: "_SC_T_IOV_MAX", value: 66)
!74 = !DIEnumerator(name: "_SC_THREADS", value: 67)
!75 = !DIEnumerator(name: "_SC_THREAD_SAFE_FUNCTIONS", value: 68)
!76 = !DIEnumerator(name: "_SC_GETGR_R_SIZE_MAX", value: 69)
!77 = !DIEnumerator(name: "_SC_GETPW_R_SIZE_MAX", value: 70)
!78 = !DIEnumerator(name: "_SC_LOGIN_NAME_MAX", value: 71)
!79 = !DIEnumerator(name: "_SC_TTY_NAME_MAX", value: 72)
!80 = !DIEnumerator(name: "_SC_THREAD_DESTRUCTOR_ITERATIONS", value: 73)
!81 = !DIEnumerator(name: "_SC_THREAD_KEYS_MAX", value: 74)
!82 = !DIEnumerator(name: "_SC_THREAD_STACK_MIN", value: 75)
!83 = !DIEnumerator(name: "_SC_THREAD_THREADS_MAX", value: 76)
!84 = !DIEnumerator(name: "_SC_THREAD_ATTR_STACKADDR", value: 77)
!85 = !DIEnumerator(name: "_SC_THREAD_ATTR_STACKSIZE", value: 78)
!86 = !DIEnumerator(name: "_SC_THREAD_PRIORITY_SCHEDULING", value: 79)
!87 = !DIEnumerator(name: "_SC_THREAD_PRIO_INHERIT", value: 80)
!88 = !DIEnumerator(name: "_SC_THREAD_PRIO_PROTECT", value: 81)
!89 = !DIEnumerator(name: "_SC_THREAD_PROCESS_SHARED", value: 82)
!90 = !DIEnumerator(name: "_SC_NPROCESSORS_CONF", value: 83)
!91 = !DIEnumerator(name: "_SC_NPROCESSORS_ONLN", value: 84)
!92 = !DIEnumerator(name: "_SC_PHYS_PAGES", value: 85)
!93 = !DIEnumerator(name: "_SC_AVPHYS_PAGES", value: 86)
!94 = !DIEnumerator(name: "_SC_ATEXIT_MAX", value: 87)
!95 = !DIEnumerator(name: "_SC_PASS_MAX", value: 88)
!96 = !DIEnumerator(name: "_SC_XOPEN_VERSION", value: 89)
!97 = !DIEnumerator(name: "_SC_XOPEN_XCU_VERSION", value: 90)
!98 = !DIEnumerator(name: "_SC_XOPEN_UNIX", value: 91)
!99 = !DIEnumerator(name: "_SC_XOPEN_CRYPT", value: 92)
!100 = !DIEnumerator(name: "_SC_XOPEN_ENH_I18N", value: 93)
!101 = !DIEnumerator(name: "_SC_XOPEN_SHM", value: 94)
!102 = !DIEnumerator(name: "_SC_2_CHAR_TERM", value: 95)
!103 = !DIEnumerator(name: "_SC_2_C_VERSION", value: 96)
!104 = !DIEnumerator(name: "_SC_2_UPE", value: 97)
!105 = !DIEnumerator(name: "_SC_XOPEN_XPG2", value: 98)
!106 = !DIEnumerator(name: "_SC_XOPEN_XPG3", value: 99)
!107 = !DIEnumerator(name: "_SC_XOPEN_XPG4", value: 100)
!108 = !DIEnumerator(name: "_SC_CHAR_BIT", value: 101)
!109 = !DIEnumerator(name: "_SC_CHAR_MAX", value: 102)
!110 = !DIEnumerator(name: "_SC_CHAR_MIN", value: 103)
!111 = !DIEnumerator(name: "_SC_INT_MAX", value: 104)
!112 = !DIEnumerator(name: "_SC_INT_MIN", value: 105)
!113 = !DIEnumerator(name: "_SC_LONG_BIT", value: 106)
!114 = !DIEnumerator(name: "_SC_WORD_BIT", value: 107)
!115 = !DIEnumerator(name: "_SC_MB_LEN_MAX", value: 108)
!116 = !DIEnumerator(name: "_SC_NZERO", value: 109)
!117 = !DIEnumerator(name: "_SC_SSIZE_MAX", value: 110)
!118 = !DIEnumerator(name: "_SC_SCHAR_MAX", value: 111)
!119 = !DIEnumerator(name: "_SC_SCHAR_MIN", value: 112)
!120 = !DIEnumerator(name: "_SC_SHRT_MAX", value: 113)
!121 = !DIEnumerator(name: "_SC_SHRT_MIN", value: 114)
!122 = !DIEnumerator(name: "_SC_UCHAR_MAX", value: 115)
!123 = !DIEnumerator(name: "_SC_UINT_MAX", value: 116)
!124 = !DIEnumerator(name: "_SC_ULONG_MAX", value: 117)
!125 = !DIEnumerator(name: "_SC_USHRT_MAX", value: 118)
!126 = !DIEnumerator(name: "_SC_NL_ARGMAX", value: 119)
!127 = !DIEnumerator(name: "_SC_NL_LANGMAX", value: 120)
!128 = !DIEnumerator(name: "_SC_NL_MSGMAX", value: 121)
!129 = !DIEnumerator(name: "_SC_NL_NMAX", value: 122)
!130 = !DIEnumerator(name: "_SC_NL_SETMAX", value: 123)
!131 = !DIEnumerator(name: "_SC_NL_TEXTMAX", value: 124)
!132 = !DIEnumerator(name: "_SC_XBS5_ILP32_OFF32", value: 125)
!133 = !DIEnumerator(name: "_SC_XBS5_ILP32_OFFBIG", value: 126)
!134 = !DIEnumerator(name: "_SC_XBS5_LP64_OFF64", value: 127)
!135 = !DIEnumerator(name: "_SC_XBS5_LPBIG_OFFBIG", value: 128)
!136 = !DIEnumerator(name: "_SC_XOPEN_LEGACY", value: 129)
!137 = !DIEnumerator(name: "_SC_XOPEN_REALTIME", value: 130)
!138 = !DIEnumerator(name: "_SC_XOPEN_REALTIME_THREADS", value: 131)
!139 = !DIEnumerator(name: "_SC_ADVISORY_INFO", value: 132)
!140 = !DIEnumerator(name: "_SC_BARRIERS", value: 133)
!141 = !DIEnumerator(name: "_SC_BASE", value: 134)
!142 = !DIEnumerator(name: "_SC_C_LANG_SUPPORT", value: 135)
!143 = !DIEnumerator(name: "_SC_C_LANG_SUPPORT_R", value: 136)
!144 = !DIEnumerator(name: "_SC_CLOCK_SELECTION", value: 137)
!145 = !DIEnumerator(name: "_SC_CPUTIME", value: 138)
!146 = !DIEnumerator(name: "_SC_THREAD_CPUTIME", value: 139)
!147 = !DIEnumerator(name: "_SC_DEVICE_IO", value: 140)
!148 = !DIEnumerator(name: "_SC_DEVICE_SPECIFIC", value: 141)
!149 = !DIEnumerator(name: "_SC_DEVICE_SPECIFIC_R", value: 142)
!150 = !DIEnumerator(name: "_SC_FD_MGMT", value: 143)
!151 = !DIEnumerator(name: "_SC_FIFO", value: 144)
!152 = !DIEnumerator(name: "_SC_PIPE", value: 145)
!153 = !DIEnumerator(name: "_SC_FILE_ATTRIBUTES", value: 146)
!154 = !DIEnumerator(name: "_SC_FILE_LOCKING", value: 147)
!155 = !DIEnumerator(name: "_SC_FILE_SYSTEM", value: 148)
!156 = !DIEnumerator(name: "_SC_MONOTONIC_CLOCK", value: 149)
!157 = !DIEnumerator(name: "_SC_MULTI_PROCESS", value: 150)
!158 = !DIEnumerator(name: "_SC_SINGLE_PROCESS", value: 151)
!159 = !DIEnumerator(name: "_SC_NETWORKING", value: 152)
!160 = !DIEnumerator(name: "_SC_READER_WRITER_LOCKS", value: 153)
!161 = !DIEnumerator(name: "_SC_SPIN_LOCKS", value: 154)
!162 = !DIEnumerator(name: "_SC_REGEXP", value: 155)
!163 = !DIEnumerator(name: "_SC_REGEX_VERSION", value: 156)
!164 = !DIEnumerator(name: "_SC_SHELL", value: 157)
!165 = !DIEnumerator(name: "_SC_SIGNALS", value: 158)
!166 = !DIEnumerator(name: "_SC_SPAWN", value: 159)
!167 = !DIEnumerator(name: "_SC_SPORADIC_SERVER", value: 160)
!168 = !DIEnumerator(name: "_SC_THREAD_SPORADIC_SERVER", value: 161)
!169 = !DIEnumerator(name: "_SC_SYSTEM_DATABASE", value: 162)
!170 = !DIEnumerator(name: "_SC_SYSTEM_DATABASE_R", value: 163)
!171 = !DIEnumerator(name: "_SC_TIMEOUTS", value: 164)
!172 = !DIEnumerator(name: "_SC_TYPED_MEMORY_OBJECTS", value: 165)
!173 = !DIEnumerator(name: "_SC_USER_GROUPS", value: 166)
!174 = !DIEnumerator(name: "_SC_USER_GROUPS_R", value: 167)
!175 = !DIEnumerator(name: "_SC_2_PBS", value: 168)
!176 = !DIEnumerator(name: "_SC_2_PBS_ACCOUNTING", value: 169)
!177 = !DIEnumerator(name: "_SC_2_PBS_LOCATE", value: 170)
!178 = !DIEnumerator(name: "_SC_2_PBS_MESSAGE", value: 171)
!179 = !DIEnumerator(name: "_SC_2_PBS_TRACK", value: 172)
!180 = !DIEnumerator(name: "_SC_SYMLOOP_MAX", value: 173)
!181 = !DIEnumerator(name: "_SC_STREAMS", value: 174)
!182 = !DIEnumerator(name: "_SC_2_PBS_CHECKPOINT", value: 175)
!183 = !DIEnumerator(name: "_SC_V6_ILP32_OFF32", value: 176)
!184 = !DIEnumerator(name: "_SC_V6_ILP32_OFFBIG", value: 177)
!185 = !DIEnumerator(name: "_SC_V6_LP64_OFF64", value: 178)
!186 = !DIEnumerator(name: "_SC_V6_LPBIG_OFFBIG", value: 179)
!187 = !DIEnumerator(name: "_SC_HOST_NAME_MAX", value: 180)
!188 = !DIEnumerator(name: "_SC_TRACE", value: 181)
!189 = !DIEnumerator(name: "_SC_TRACE_EVENT_FILTER", value: 182)
!190 = !DIEnumerator(name: "_SC_TRACE_INHERIT", value: 183)
!191 = !DIEnumerator(name: "_SC_TRACE_LOG", value: 184)
!192 = !DIEnumerator(name: "_SC_LEVEL1_ICACHE_SIZE", value: 185)
!193 = !DIEnumerator(name: "_SC_LEVEL1_ICACHE_ASSOC", value: 186)
!194 = !DIEnumerator(name: "_SC_LEVEL1_ICACHE_LINESIZE", value: 187)
!195 = !DIEnumerator(name: "_SC_LEVEL1_DCACHE_SIZE", value: 188)
!196 = !DIEnumerator(name: "_SC_LEVEL1_DCACHE_ASSOC", value: 189)
!197 = !DIEnumerator(name: "_SC_LEVEL1_DCACHE_LINESIZE", value: 190)
!198 = !DIEnumerator(name: "_SC_LEVEL2_CACHE_SIZE", value: 191)
!199 = !DIEnumerator(name: "_SC_LEVEL2_CACHE_ASSOC", value: 192)
!200 = !DIEnumerator(name: "_SC_LEVEL2_CACHE_LINESIZE", value: 193)
!201 = !DIEnumerator(name: "_SC_LEVEL3_CACHE_SIZE", value: 194)
!202 = !DIEnumerator(name: "_SC_LEVEL3_CACHE_ASSOC", value: 195)
!203 = !DIEnumerator(name: "_SC_LEVEL3_CACHE_LINESIZE", value: 196)
!204 = !DIEnumerator(name: "_SC_LEVEL4_CACHE_SIZE", value: 197)
!205 = !DIEnumerator(name: "_SC_LEVEL4_CACHE_ASSOC", value: 198)
!206 = !DIEnumerator(name: "_SC_LEVEL4_CACHE_LINESIZE", value: 199)
!207 = !DIEnumerator(name: "_SC_IPV6", value: 235)
!208 = !DIEnumerator(name: "_SC_RAW_SOCKETS", value: 236)
!209 = !DIEnumerator(name: "_SC_V7_ILP32_OFF32", value: 237)
!210 = !DIEnumerator(name: "_SC_V7_ILP32_OFFBIG", value: 238)
!211 = !DIEnumerator(name: "_SC_V7_LP64_OFF64", value: 239)
!212 = !DIEnumerator(name: "_SC_V7_LPBIG_OFFBIG", value: 240)
!213 = !DIEnumerator(name: "_SC_SS_REPL_MAX", value: 241)
!214 = !DIEnumerator(name: "_SC_TRACE_EVENT_NAME_MAX", value: 242)
!215 = !DIEnumerator(name: "_SC_TRACE_NAME_MAX", value: 243)
!216 = !DIEnumerator(name: "_SC_TRACE_SYS_MAX", value: 244)
!217 = !DIEnumerator(name: "_SC_TRACE_USER_EVENT_MAX", value: 245)
!218 = !DIEnumerator(name: "_SC_XOPEN_STREAMS", value: 246)
!219 = !DIEnumerator(name: "_SC_THREAD_ROBUST_PRIO_INHERIT", value: 247)
!220 = !DIEnumerator(name: "_SC_THREAD_ROBUST_PRIO_PROTECT", value: 248)
!221 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !222, line: 57, size: 32, align: 32, elements: !223)
!222 = !DIFile(filename: "Include/pytime.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!223 = !{!224, !225}
!224 = !DIEnumerator(name: "_PyTime_ROUND_DOWN", value: 0)
!225 = !DIEnumerator(name: "_PyTime_ROUND_UP", value: 1)
!226 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !227, line: 100, size: 32, align: 32, elements: !228)
!227 = !DIFile(filename: "/usr/include/sys/wait.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!228 = !{!229, !230, !231}
!229 = !DIEnumerator(name: "P_ALL", value: 0)
!230 = !DIEnumerator(name: "P_PID", value: 1)
!231 = !DIEnumerator(name: "P_PGID", value: 2)
!232 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__priority_which", file: !233, line: 292, size: 32, align: 32, elements: !234)
!233 = !DIFile(filename: "/usr/include/bits/resource.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!234 = !{!235, !236, !237}
!235 = !DIEnumerator(name: "PRIO_PROCESS", value: 0)
!236 = !DIEnumerator(name: "PRIO_PGRP", value: 1)
!237 = !DIEnumerator(name: "PRIO_USER", value: 2)
!238 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !239, line: 80, size: 32, align: 32, elements: !240)
!239 = !DIFile(filename: "/usr/include/bits/statvfs.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!240 = !{!241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252}
!241 = !DIEnumerator(name: "ST_RDONLY", value: 1)
!242 = !DIEnumerator(name: "ST_NOSUID", value: 2)
!243 = !DIEnumerator(name: "ST_NODEV", value: 4)
!244 = !DIEnumerator(name: "ST_NOEXEC", value: 8)
!245 = !DIEnumerator(name: "ST_SYNCHRONOUS", value: 16)
!246 = !DIEnumerator(name: "ST_MANDLOCK", value: 64)
!247 = !DIEnumerator(name: "ST_WRITE", value: 128)
!248 = !DIEnumerator(name: "ST_APPEND", value: 256)
!249 = !DIEnumerator(name: "ST_IMMUTABLE", value: 512)
!250 = !DIEnumerator(name: "ST_NOATIME", value: 1024)
!251 = !DIEnumerator(name: "ST_NODIRATIME", value: 2048)
!252 = !DIEnumerator(name: "ST_RELATIME", value: 4096)
!253 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !254, line: 246, size: 32, align: 32, elements: !255)
!254 = !DIFile(filename: "/usr/include/bits/siginfo.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!255 = !{!256, !257, !258, !259, !260, !261}
!256 = !DIEnumerator(name: "CLD_EXITED", value: 1)
!257 = !DIEnumerator(name: "CLD_KILLED", value: 2)
!258 = !DIEnumerator(name: "CLD_DUMPED", value: 3)
!259 = !DIEnumerator(name: "CLD_TRAPPED", value: 4)
!260 = !DIEnumerator(name: "CLD_STOPPED", value: 5)
!261 = !DIEnumerator(name: "CLD_CONTINUED", value: 6)
!262 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !263, line: 29, size: 32, align: 32, elements: !264)
!263 = !DIFile(filename: "/usr/include/sys/xattr.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!264 = !{!265, !266}
!265 = !DIEnumerator(name: "XATTR_CREATE", value: 1)
!266 = !DIEnumerator(name: "XATTR_REPLACE", value: 2)
!267 = !{!268, !273, !275, !276, !287, !366, !612, !613, !314, !614, !631, !632, !640, !648, !649, !652, !364, !282, !653, !322, !654, !656, !657, !659, !668, !670, !672, !505, !272, !678, !349, !679, !685, !688}
!268 = !DIDerivedType(tag: DW_TAG_typedef, name: "uid_t", file: !269, line: 80, baseType: !270)
!269 = !DIFile(filename: "/usr/include/sys/types.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!270 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !271, line: 134, baseType: !272)
!271 = !DIFile(filename: "/usr/include/bits/types.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!272 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!273 = !DIDerivedType(tag: DW_TAG_typedef, name: "gid_t", file: !269, line: 65, baseType: !274)
!274 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !271, line: 135, baseType: !272)
!275 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !277, size: 64, align: 64)
!277 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyObject", file: !278, line: 109, baseType: !279)
!278 = !DIFile(filename: "Include/object.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!279 = !DICompositeType(tag: DW_TAG_structure_type, name: "_object", file: !278, line: 105, size: 128, align: 64, elements: !280)
!280 = !{!281, !288}
!281 = !DIDerivedType(tag: DW_TAG_member, name: "ob_refcnt", scope: !279, file: !278, line: 107, baseType: !282, size: 64, align: 64)
!282 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_ssize_t", file: !283, line: 177, baseType: !284)
!283 = !DIFile(filename: "Include/pyport.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!284 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !285, line: 102, baseType: !286)
!285 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!286 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !271, line: 181, baseType: !287)
!287 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!288 = !DIDerivedType(tag: DW_TAG_member, name: "ob_type", scope: !279, file: !278, line: 108, baseType: !289, size: 64, align: 64, offset: 64)
!289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !290, size: 64, align: 64)
!290 = !DICompositeType(tag: DW_TAG_structure_type, name: "_typeobject", file: !278, line: 334, size: 3200, align: 64, elements: !291)
!291 = !{!292, !298, !302, !303, !304, !309, !372, !377, !382, !383, !388, !440, !471, !483, !489, !490, !491, !493, !495, !526, !527, !528, !537, !538, !543, !544, !546, !548, !558, !561, !579, !580, !581, !583, !585, !586, !588, !593, !598, !603, !604, !605, !606, !607, !608, !609, !610, !611}
!292 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !290, file: !278, line: 335, baseType: !293, size: 192, align: 64)
!293 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyVarObject", file: !278, line: 114, baseType: !294)
!294 = !DICompositeType(tag: DW_TAG_structure_type, file: !278, line: 111, size: 192, align: 64, elements: !295)
!295 = !{!296, !297}
!296 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !294, file: !278, line: 112, baseType: !277, size: 128, align: 64)
!297 = !DIDerivedType(tag: DW_TAG_member, name: "ob_size", scope: !294, file: !278, line: 113, baseType: !282, size: 64, align: 64, offset: 128)
!298 = !DIDerivedType(tag: DW_TAG_member, name: "tp_name", scope: !290, file: !278, line: 336, baseType: !299, size: 64, align: 64, offset: 192)
!299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !300, size: 64, align: 64)
!300 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !301)
!301 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!302 = !DIDerivedType(tag: DW_TAG_member, name: "tp_basicsize", scope: !290, file: !278, line: 337, baseType: !282, size: 64, align: 64, offset: 256)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "tp_itemsize", scope: !290, file: !278, line: 337, baseType: !282, size: 64, align: 64, offset: 320)
!304 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dealloc", scope: !290, file: !278, line: 341, baseType: !305, size: 64, align: 64, offset: 384)
!305 = !DIDerivedType(tag: DW_TAG_typedef, name: "destructor", file: !278, line: 308, baseType: !306)
!306 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !307, size: 64, align: 64)
!307 = !DISubroutineType(types: !308)
!308 = !{null, !276}
!309 = !DIDerivedType(tag: DW_TAG_member, name: "tp_print", scope: !290, file: !278, line: 342, baseType: !310, size: 64, align: 64, offset: 448)
!310 = !DIDerivedType(tag: DW_TAG_typedef, name: "printfunc", file: !278, line: 314, baseType: !311)
!311 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !312, size: 64, align: 64)
!312 = !DISubroutineType(types: !313)
!313 = !{!314, !276, !315, !314}
!314 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !316, size: 64, align: 64)
!316 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !285, line: 48, baseType: !317)
!317 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !318, line: 246, size: 1728, align: 64, elements: !319)
!318 = !DIFile(filename: "/usr/include/libio.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!319 = !{!320, !321, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !341, !342, !343, !344, !346, !348, !350, !354, !357, !359, !360, !361, !362, !363, !367, !368}
!320 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !317, file: !318, line: 247, baseType: !314, size: 32, align: 32)
!321 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !317, file: !318, line: 252, baseType: !322, size: 64, align: 64, offset: 64)
!322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !301, size: 64, align: 64)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !317, file: !318, line: 253, baseType: !322, size: 64, align: 64, offset: 128)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !317, file: !318, line: 254, baseType: !322, size: 64, align: 64, offset: 192)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !317, file: !318, line: 255, baseType: !322, size: 64, align: 64, offset: 256)
!326 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !317, file: !318, line: 256, baseType: !322, size: 64, align: 64, offset: 320)
!327 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !317, file: !318, line: 257, baseType: !322, size: 64, align: 64, offset: 384)
!328 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !317, file: !318, line: 258, baseType: !322, size: 64, align: 64, offset: 448)
!329 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !317, file: !318, line: 259, baseType: !322, size: 64, align: 64, offset: 512)
!330 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !317, file: !318, line: 261, baseType: !322, size: 64, align: 64, offset: 576)
!331 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !317, file: !318, line: 262, baseType: !322, size: 64, align: 64, offset: 640)
!332 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !317, file: !318, line: 263, baseType: !322, size: 64, align: 64, offset: 704)
!333 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !317, file: !318, line: 265, baseType: !334, size: 64, align: 64, offset: 768)
!334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !335, size: 64, align: 64)
!335 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !318, line: 161, size: 192, align: 64, elements: !336)
!336 = !{!337, !338, !340}
!337 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !335, file: !318, line: 162, baseType: !334, size: 64, align: 64)
!338 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !335, file: !318, line: 163, baseType: !339, size: 64, align: 64, offset: 64)
!339 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !317, size: 64, align: 64)
!340 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !335, file: !318, line: 167, baseType: !314, size: 32, align: 32, offset: 128)
!341 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !317, file: !318, line: 267, baseType: !339, size: 64, align: 64, offset: 832)
!342 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !317, file: !318, line: 269, baseType: !314, size: 32, align: 32, offset: 896)
!343 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !317, file: !318, line: 273, baseType: !314, size: 32, align: 32, offset: 928)
!344 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !317, file: !318, line: 275, baseType: !345, size: 64, align: 64, offset: 960)
!345 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !271, line: 140, baseType: !287)
!346 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !317, file: !318, line: 279, baseType: !347, size: 16, align: 16, offset: 1024)
!347 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!348 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !317, file: !318, line: 280, baseType: !349, size: 8, align: 8, offset: 1040)
!349 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !317, file: !318, line: 281, baseType: !351, size: 8, align: 8, offset: 1048)
!351 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 8, align: 8, elements: !352)
!352 = !{!353}
!353 = !DISubrange(count: 1)
!354 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !317, file: !318, line: 285, baseType: !355, size: 64, align: 64, offset: 1088)
!355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !356, size: 64, align: 64)
!356 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !318, line: 155, baseType: null)
!357 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !317, file: !318, line: 294, baseType: !358, size: 64, align: 64, offset: 1152)
!358 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !271, line: 141, baseType: !287)
!359 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !317, file: !318, line: 303, baseType: !275, size: 64, align: 64, offset: 1216)
!360 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !317, file: !318, line: 304, baseType: !275, size: 64, align: 64, offset: 1280)
!361 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !317, file: !318, line: 305, baseType: !275, size: 64, align: 64, offset: 1344)
!362 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !317, file: !318, line: 306, baseType: !275, size: 64, align: 64, offset: 1408)
!363 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !317, file: !318, line: 307, baseType: !364, size: 64, align: 64, offset: 1472)
!364 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !365, line: 62, baseType: !366)
!365 = !DIFile(filename: "/opt/devel/yoonseung.kim/llvm_work/build/bin/../lib/clang/3.7.1/include/stddef.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!366 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!367 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !317, file: !318, line: 309, baseType: !314, size: 32, align: 32, offset: 1536)
!368 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !317, file: !318, line: 311, baseType: !369, size: 160, align: 8, offset: 1568)
!369 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 160, align: 8, elements: !370)
!370 = !{!371}
!371 = !DISubrange(count: 20)
!372 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getattr", scope: !290, file: !278, line: 343, baseType: !373, size: 64, align: 64, offset: 512)
!373 = !DIDerivedType(tag: DW_TAG_typedef, name: "getattrfunc", file: !278, line: 316, baseType: !374)
!374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !375, size: 64, align: 64)
!375 = !DISubroutineType(types: !376)
!376 = !{!276, !276, !322}
!377 = !DIDerivedType(tag: DW_TAG_member, name: "tp_setattr", scope: !290, file: !278, line: 344, baseType: !378, size: 64, align: 64, offset: 576)
!378 = !DIDerivedType(tag: DW_TAG_typedef, name: "setattrfunc", file: !278, line: 318, baseType: !379)
!379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !380, size: 64, align: 64)
!380 = !DISubroutineType(types: !381)
!381 = !{!314, !276, !322, !276}
!382 = !DIDerivedType(tag: DW_TAG_member, name: "tp_reserved", scope: !290, file: !278, line: 345, baseType: !275, size: 64, align: 64, offset: 640)
!383 = !DIDerivedType(tag: DW_TAG_member, name: "tp_repr", scope: !290, file: !278, line: 346, baseType: !384, size: 64, align: 64, offset: 704)
!384 = !DIDerivedType(tag: DW_TAG_typedef, name: "reprfunc", file: !278, line: 320, baseType: !385)
!385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !386, size: 64, align: 64)
!386 = !DISubroutineType(types: !387)
!387 = !{!276, !276}
!388 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_number", scope: !290, file: !278, line: 350, baseType: !389, size: 64, align: 64, offset: 768)
!389 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !390, size: 64, align: 64)
!390 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyNumberMethods", file: !278, line: 278, baseType: !391)
!391 = !DICompositeType(tag: DW_TAG_structure_type, file: !278, line: 236, size: 2176, align: 64, elements: !392)
!392 = !{!393, !398, !399, !400, !401, !402, !407, !409, !410, !411, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439}
!393 = !DIDerivedType(tag: DW_TAG_member, name: "nb_add", scope: !391, file: !278, line: 241, baseType: !394, size: 64, align: 64)
!394 = !DIDerivedType(tag: DW_TAG_typedef, name: "binaryfunc", file: !278, line: 166, baseType: !395)
!395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !396, size: 64, align: 64)
!396 = !DISubroutineType(types: !397)
!397 = !{!276, !276, !276}
!398 = !DIDerivedType(tag: DW_TAG_member, name: "nb_subtract", scope: !391, file: !278, line: 242, baseType: !394, size: 64, align: 64, offset: 64)
!399 = !DIDerivedType(tag: DW_TAG_member, name: "nb_multiply", scope: !391, file: !278, line: 243, baseType: !394, size: 64, align: 64, offset: 128)
!400 = !DIDerivedType(tag: DW_TAG_member, name: "nb_remainder", scope: !391, file: !278, line: 244, baseType: !394, size: 64, align: 64, offset: 192)
!401 = !DIDerivedType(tag: DW_TAG_member, name: "nb_divmod", scope: !391, file: !278, line: 245, baseType: !394, size: 64, align: 64, offset: 256)
!402 = !DIDerivedType(tag: DW_TAG_member, name: "nb_power", scope: !391, file: !278, line: 246, baseType: !403, size: 64, align: 64, offset: 320)
!403 = !DIDerivedType(tag: DW_TAG_typedef, name: "ternaryfunc", file: !278, line: 167, baseType: !404)
!404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !405, size: 64, align: 64)
!405 = !DISubroutineType(types: !406)
!406 = !{!276, !276, !276, !276}
!407 = !DIDerivedType(tag: DW_TAG_member, name: "nb_negative", scope: !391, file: !278, line: 247, baseType: !408, size: 64, align: 64, offset: 384)
!408 = !DIDerivedType(tag: DW_TAG_typedef, name: "unaryfunc", file: !278, line: 165, baseType: !385)
!409 = !DIDerivedType(tag: DW_TAG_member, name: "nb_positive", scope: !391, file: !278, line: 248, baseType: !408, size: 64, align: 64, offset: 448)
!410 = !DIDerivedType(tag: DW_TAG_member, name: "nb_absolute", scope: !391, file: !278, line: 249, baseType: !408, size: 64, align: 64, offset: 512)
!411 = !DIDerivedType(tag: DW_TAG_member, name: "nb_bool", scope: !391, file: !278, line: 250, baseType: !412, size: 64, align: 64, offset: 576)
!412 = !DIDerivedType(tag: DW_TAG_typedef, name: "inquiry", file: !278, line: 168, baseType: !413)
!413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !414, size: 64, align: 64)
!414 = !DISubroutineType(types: !415)
!415 = !{!314, !276}
!416 = !DIDerivedType(tag: DW_TAG_member, name: "nb_invert", scope: !391, file: !278, line: 251, baseType: !408, size: 64, align: 64, offset: 640)
!417 = !DIDerivedType(tag: DW_TAG_member, name: "nb_lshift", scope: !391, file: !278, line: 252, baseType: !394, size: 64, align: 64, offset: 704)
!418 = !DIDerivedType(tag: DW_TAG_member, name: "nb_rshift", scope: !391, file: !278, line: 253, baseType: !394, size: 64, align: 64, offset: 768)
!419 = !DIDerivedType(tag: DW_TAG_member, name: "nb_and", scope: !391, file: !278, line: 254, baseType: !394, size: 64, align: 64, offset: 832)
!420 = !DIDerivedType(tag: DW_TAG_member, name: "nb_xor", scope: !391, file: !278, line: 255, baseType: !394, size: 64, align: 64, offset: 896)
!421 = !DIDerivedType(tag: DW_TAG_member, name: "nb_or", scope: !391, file: !278, line: 256, baseType: !394, size: 64, align: 64, offset: 960)
!422 = !DIDerivedType(tag: DW_TAG_member, name: "nb_int", scope: !391, file: !278, line: 257, baseType: !408, size: 64, align: 64, offset: 1024)
!423 = !DIDerivedType(tag: DW_TAG_member, name: "nb_reserved", scope: !391, file: !278, line: 258, baseType: !275, size: 64, align: 64, offset: 1088)
!424 = !DIDerivedType(tag: DW_TAG_member, name: "nb_float", scope: !391, file: !278, line: 259, baseType: !408, size: 64, align: 64, offset: 1152)
!425 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_add", scope: !391, file: !278, line: 261, baseType: !394, size: 64, align: 64, offset: 1216)
!426 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_subtract", scope: !391, file: !278, line: 262, baseType: !394, size: 64, align: 64, offset: 1280)
!427 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_multiply", scope: !391, file: !278, line: 263, baseType: !394, size: 64, align: 64, offset: 1344)
!428 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_remainder", scope: !391, file: !278, line: 264, baseType: !394, size: 64, align: 64, offset: 1408)
!429 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_power", scope: !391, file: !278, line: 265, baseType: !403, size: 64, align: 64, offset: 1472)
!430 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_lshift", scope: !391, file: !278, line: 266, baseType: !394, size: 64, align: 64, offset: 1536)
!431 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_rshift", scope: !391, file: !278, line: 267, baseType: !394, size: 64, align: 64, offset: 1600)
!432 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_and", scope: !391, file: !278, line: 268, baseType: !394, size: 64, align: 64, offset: 1664)
!433 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_xor", scope: !391, file: !278, line: 269, baseType: !394, size: 64, align: 64, offset: 1728)
!434 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_or", scope: !391, file: !278, line: 270, baseType: !394, size: 64, align: 64, offset: 1792)
!435 = !DIDerivedType(tag: DW_TAG_member, name: "nb_floor_divide", scope: !391, file: !278, line: 272, baseType: !394, size: 64, align: 64, offset: 1856)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "nb_true_divide", scope: !391, file: !278, line: 273, baseType: !394, size: 64, align: 64, offset: 1920)
!437 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_floor_divide", scope: !391, file: !278, line: 274, baseType: !394, size: 64, align: 64, offset: 1984)
!438 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_true_divide", scope: !391, file: !278, line: 275, baseType: !394, size: 64, align: 64, offset: 2048)
!439 = !DIDerivedType(tag: DW_TAG_member, name: "nb_index", scope: !391, file: !278, line: 277, baseType: !408, size: 64, align: 64, offset: 2112)
!440 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_sequence", scope: !290, file: !278, line: 351, baseType: !441, size: 64, align: 64, offset: 832)
!441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !442, size: 64, align: 64)
!442 = !DIDerivedType(tag: DW_TAG_typedef, name: "PySequenceMethods", file: !278, line: 292, baseType: !443)
!443 = !DICompositeType(tag: DW_TAG_structure_type, file: !278, line: 280, size: 640, align: 64, elements: !444)
!444 = !{!445, !450, !451, !456, !457, !458, !463, !464, !469, !470}
!445 = !DIDerivedType(tag: DW_TAG_member, name: "sq_length", scope: !443, file: !278, line: 281, baseType: !446, size: 64, align: 64)
!446 = !DIDerivedType(tag: DW_TAG_typedef, name: "lenfunc", file: !278, line: 169, baseType: !447)
!447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !448, size: 64, align: 64)
!448 = !DISubroutineType(types: !449)
!449 = !{!282, !276}
!450 = !DIDerivedType(tag: DW_TAG_member, name: "sq_concat", scope: !443, file: !278, line: 282, baseType: !394, size: 64, align: 64, offset: 64)
!451 = !DIDerivedType(tag: DW_TAG_member, name: "sq_repeat", scope: !443, file: !278, line: 283, baseType: !452, size: 64, align: 64, offset: 128)
!452 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssizeargfunc", file: !278, line: 170, baseType: !453)
!453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !454, size: 64, align: 64)
!454 = !DISubroutineType(types: !455)
!455 = !{!276, !276, !282}
!456 = !DIDerivedType(tag: DW_TAG_member, name: "sq_item", scope: !443, file: !278, line: 284, baseType: !452, size: 64, align: 64, offset: 192)
!457 = !DIDerivedType(tag: DW_TAG_member, name: "was_sq_slice", scope: !443, file: !278, line: 285, baseType: !275, size: 64, align: 64, offset: 256)
!458 = !DIDerivedType(tag: DW_TAG_member, name: "sq_ass_item", scope: !443, file: !278, line: 286, baseType: !459, size: 64, align: 64, offset: 320)
!459 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssizeobjargproc", file: !278, line: 172, baseType: !460)
!460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !461, size: 64, align: 64)
!461 = !DISubroutineType(types: !462)
!462 = !{!314, !276, !282, !276}
!463 = !DIDerivedType(tag: DW_TAG_member, name: "was_sq_ass_slice", scope: !443, file: !278, line: 287, baseType: !275, size: 64, align: 64, offset: 384)
!464 = !DIDerivedType(tag: DW_TAG_member, name: "sq_contains", scope: !443, file: !278, line: 288, baseType: !465, size: 64, align: 64, offset: 448)
!465 = !DIDerivedType(tag: DW_TAG_typedef, name: "objobjproc", file: !278, line: 231, baseType: !466)
!466 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !467, size: 64, align: 64)
!467 = !DISubroutineType(types: !468)
!468 = !{!314, !276, !276}
!469 = !DIDerivedType(tag: DW_TAG_member, name: "sq_inplace_concat", scope: !443, file: !278, line: 290, baseType: !394, size: 64, align: 64, offset: 512)
!470 = !DIDerivedType(tag: DW_TAG_member, name: "sq_inplace_repeat", scope: !443, file: !278, line: 291, baseType: !452, size: 64, align: 64, offset: 576)
!471 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_mapping", scope: !290, file: !278, line: 352, baseType: !472, size: 64, align: 64, offset: 896)
!472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !473, size: 64, align: 64)
!473 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyMappingMethods", file: !278, line: 298, baseType: !474)
!474 = !DICompositeType(tag: DW_TAG_structure_type, file: !278, line: 294, size: 192, align: 64, elements: !475)
!475 = !{!476, !477, !478}
!476 = !DIDerivedType(tag: DW_TAG_member, name: "mp_length", scope: !474, file: !278, line: 295, baseType: !446, size: 64, align: 64)
!477 = !DIDerivedType(tag: DW_TAG_member, name: "mp_subscript", scope: !474, file: !278, line: 296, baseType: !394, size: 64, align: 64, offset: 64)
!478 = !DIDerivedType(tag: DW_TAG_member, name: "mp_ass_subscript", scope: !474, file: !278, line: 297, baseType: !479, size: 64, align: 64, offset: 128)
!479 = !DIDerivedType(tag: DW_TAG_typedef, name: "objobjargproc", file: !278, line: 174, baseType: !480)
!480 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !481, size: 64, align: 64)
!481 = !DISubroutineType(types: !482)
!482 = !{!314, !276, !276, !276}
!483 = !DIDerivedType(tag: DW_TAG_member, name: "tp_hash", scope: !290, file: !278, line: 356, baseType: !484, size: 64, align: 64, offset: 960)
!484 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashfunc", file: !278, line: 321, baseType: !485)
!485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !486, size: 64, align: 64)
!486 = !DISubroutineType(types: !487)
!487 = !{!488, !276}
!488 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_hash_t", file: !283, line: 186, baseType: !282)
!489 = !DIDerivedType(tag: DW_TAG_member, name: "tp_call", scope: !290, file: !278, line: 357, baseType: !403, size: 64, align: 64, offset: 1024)
!490 = !DIDerivedType(tag: DW_TAG_member, name: "tp_str", scope: !290, file: !278, line: 358, baseType: !384, size: 64, align: 64, offset: 1088)
!491 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getattro", scope: !290, file: !278, line: 359, baseType: !492, size: 64, align: 64, offset: 1152)
!492 = !DIDerivedType(tag: DW_TAG_typedef, name: "getattrofunc", file: !278, line: 317, baseType: !395)
!493 = !DIDerivedType(tag: DW_TAG_member, name: "tp_setattro", scope: !290, file: !278, line: 360, baseType: !494, size: 64, align: 64, offset: 1216)
!494 = !DIDerivedType(tag: DW_TAG_typedef, name: "setattrofunc", file: !278, line: 319, baseType: !480)
!495 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_buffer", scope: !290, file: !278, line: 363, baseType: !496, size: 64, align: 64, offset: 1280)
!496 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !497, size: 64, align: 64)
!497 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyBufferProcs", file: !278, line: 304, baseType: !498)
!498 = !DICompositeType(tag: DW_TAG_structure_type, file: !278, line: 301, size: 128, align: 64, elements: !499)
!499 = !{!500, !521}
!500 = !DIDerivedType(tag: DW_TAG_member, name: "bf_getbuffer", scope: !498, file: !278, line: 302, baseType: !501, size: 64, align: 64)
!501 = !DIDerivedType(tag: DW_TAG_typedef, name: "getbufferproc", file: !278, line: 193, baseType: !502)
!502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !503, size: 64, align: 64)
!503 = !DISubroutineType(types: !504)
!504 = !{!314, !276, !505, !314}
!505 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !506, size: 64, align: 64)
!506 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_buffer", file: !278, line: 191, baseType: !507)
!507 = !DICompositeType(tag: DW_TAG_structure_type, name: "bufferinfo", file: !278, line: 178, size: 640, align: 64, elements: !508)
!508 = !{!509, !510, !511, !512, !513, !514, !515, !516, !518, !519, !520}
!509 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !507, file: !278, line: 179, baseType: !275, size: 64, align: 64)
!510 = !DIDerivedType(tag: DW_TAG_member, name: "obj", scope: !507, file: !278, line: 180, baseType: !276, size: 64, align: 64, offset: 64)
!511 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !507, file: !278, line: 181, baseType: !282, size: 64, align: 64, offset: 128)
!512 = !DIDerivedType(tag: DW_TAG_member, name: "itemsize", scope: !507, file: !278, line: 182, baseType: !282, size: 64, align: 64, offset: 192)
!513 = !DIDerivedType(tag: DW_TAG_member, name: "readonly", scope: !507, file: !278, line: 184, baseType: !314, size: 32, align: 32, offset: 256)
!514 = !DIDerivedType(tag: DW_TAG_member, name: "ndim", scope: !507, file: !278, line: 185, baseType: !314, size: 32, align: 32, offset: 288)
!515 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !507, file: !278, line: 186, baseType: !322, size: 64, align: 64, offset: 320)
!516 = !DIDerivedType(tag: DW_TAG_member, name: "shape", scope: !507, file: !278, line: 187, baseType: !517, size: 64, align: 64, offset: 384)
!517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !282, size: 64, align: 64)
!518 = !DIDerivedType(tag: DW_TAG_member, name: "strides", scope: !507, file: !278, line: 188, baseType: !517, size: 64, align: 64, offset: 448)
!519 = !DIDerivedType(tag: DW_TAG_member, name: "suboffsets", scope: !507, file: !278, line: 189, baseType: !517, size: 64, align: 64, offset: 512)
!520 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !507, file: !278, line: 190, baseType: !275, size: 64, align: 64, offset: 576)
!521 = !DIDerivedType(tag: DW_TAG_member, name: "bf_releasebuffer", scope: !498, file: !278, line: 303, baseType: !522, size: 64, align: 64, offset: 64)
!522 = !DIDerivedType(tag: DW_TAG_typedef, name: "releasebufferproc", file: !278, line: 194, baseType: !523)
!523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !524, size: 64, align: 64)
!524 = !DISubroutineType(types: !525)
!525 = !{null, !276, !505}
!526 = !DIDerivedType(tag: DW_TAG_member, name: "tp_flags", scope: !290, file: !278, line: 366, baseType: !366, size: 64, align: 64, offset: 1344)
!527 = !DIDerivedType(tag: DW_TAG_member, name: "tp_doc", scope: !290, file: !278, line: 368, baseType: !299, size: 64, align: 64, offset: 1408)
!528 = !DIDerivedType(tag: DW_TAG_member, name: "tp_traverse", scope: !290, file: !278, line: 372, baseType: !529, size: 64, align: 64, offset: 1472)
!529 = !DIDerivedType(tag: DW_TAG_typedef, name: "traverseproc", file: !278, line: 233, baseType: !530)
!530 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !531, size: 64, align: 64)
!531 = !DISubroutineType(types: !532)
!532 = !{!314, !276, !533, !275}
!533 = !DIDerivedType(tag: DW_TAG_typedef, name: "visitproc", file: !278, line: 232, baseType: !534)
!534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !535, size: 64, align: 64)
!535 = !DISubroutineType(types: !536)
!536 = !{!314, !276, !275}
!537 = !DIDerivedType(tag: DW_TAG_member, name: "tp_clear", scope: !290, file: !278, line: 375, baseType: !412, size: 64, align: 64, offset: 1536)
!538 = !DIDerivedType(tag: DW_TAG_member, name: "tp_richcompare", scope: !290, file: !278, line: 379, baseType: !539, size: 64, align: 64, offset: 1600)
!539 = !DIDerivedType(tag: DW_TAG_typedef, name: "richcmpfunc", file: !278, line: 322, baseType: !540)
!540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !541, size: 64, align: 64)
!541 = !DISubroutineType(types: !542)
!542 = !{!276, !276, !276, !314}
!543 = !DIDerivedType(tag: DW_TAG_member, name: "tp_weaklistoffset", scope: !290, file: !278, line: 382, baseType: !282, size: 64, align: 64, offset: 1664)
!544 = !DIDerivedType(tag: DW_TAG_member, name: "tp_iter", scope: !290, file: !278, line: 385, baseType: !545, size: 64, align: 64, offset: 1728)
!545 = !DIDerivedType(tag: DW_TAG_typedef, name: "getiterfunc", file: !278, line: 323, baseType: !385)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "tp_iternext", scope: !290, file: !278, line: 386, baseType: !547, size: 64, align: 64, offset: 1792)
!547 = !DIDerivedType(tag: DW_TAG_typedef, name: "iternextfunc", file: !278, line: 324, baseType: !385)
!548 = !DIDerivedType(tag: DW_TAG_member, name: "tp_methods", scope: !290, file: !278, line: 389, baseType: !549, size: 64, align: 64, offset: 1856)
!549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !550, size: 64, align: 64)
!550 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyMethodDef", file: !551, line: 40, size: 256, align: 64, elements: !552)
!551 = !DIFile(filename: "Include/methodobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!552 = !{!553, !554, !556, !557}
!553 = !DIDerivedType(tag: DW_TAG_member, name: "ml_name", scope: !550, file: !551, line: 41, baseType: !299, size: 64, align: 64)
!554 = !DIDerivedType(tag: DW_TAG_member, name: "ml_meth", scope: !550, file: !551, line: 42, baseType: !555, size: 64, align: 64, offset: 64)
!555 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyCFunction", file: !551, line: 18, baseType: !395)
!556 = !DIDerivedType(tag: DW_TAG_member, name: "ml_flags", scope: !550, file: !551, line: 43, baseType: !314, size: 32, align: 32, offset: 128)
!557 = !DIDerivedType(tag: DW_TAG_member, name: "ml_doc", scope: !550, file: !551, line: 45, baseType: !299, size: 64, align: 64, offset: 192)
!558 = !DIDerivedType(tag: DW_TAG_member, name: "tp_members", scope: !290, file: !278, line: 390, baseType: !559, size: 64, align: 64, offset: 1920)
!559 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !560, size: 64, align: 64)
!560 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyMemberDef", file: !278, line: 390, flags: DIFlagFwdDecl)
!561 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getset", scope: !290, file: !278, line: 391, baseType: !562, size: 64, align: 64, offset: 1984)
!562 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !563, size: 64, align: 64)
!563 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyGetSetDef", file: !564, line: 11, size: 320, align: 64, elements: !565)
!564 = !DIFile(filename: "Include/descrobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!565 = !{!566, !567, !572, !577, !578}
!566 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !563, file: !564, line: 12, baseType: !322, size: 64, align: 64)
!567 = !DIDerivedType(tag: DW_TAG_member, name: "get", scope: !563, file: !564, line: 13, baseType: !568, size: 64, align: 64, offset: 64)
!568 = !DIDerivedType(tag: DW_TAG_typedef, name: "getter", file: !564, line: 8, baseType: !569)
!569 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !570, size: 64, align: 64)
!570 = !DISubroutineType(types: !571)
!571 = !{!276, !276, !275}
!572 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !563, file: !564, line: 14, baseType: !573, size: 64, align: 64, offset: 128)
!573 = !DIDerivedType(tag: DW_TAG_typedef, name: "setter", file: !564, line: 9, baseType: !574)
!574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !575, size: 64, align: 64)
!575 = !DISubroutineType(types: !576)
!576 = !{!314, !276, !276, !275}
!577 = !DIDerivedType(tag: DW_TAG_member, name: "doc", scope: !563, file: !564, line: 15, baseType: !322, size: 64, align: 64, offset: 192)
!578 = !DIDerivedType(tag: DW_TAG_member, name: "closure", scope: !563, file: !564, line: 16, baseType: !275, size: 64, align: 64, offset: 256)
!579 = !DIDerivedType(tag: DW_TAG_member, name: "tp_base", scope: !290, file: !278, line: 392, baseType: !289, size: 64, align: 64, offset: 2048)
!580 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dict", scope: !290, file: !278, line: 393, baseType: !276, size: 64, align: 64, offset: 2112)
!581 = !DIDerivedType(tag: DW_TAG_member, name: "tp_descr_get", scope: !290, file: !278, line: 394, baseType: !582, size: 64, align: 64, offset: 2176)
!582 = !DIDerivedType(tag: DW_TAG_typedef, name: "descrgetfunc", file: !278, line: 325, baseType: !404)
!583 = !DIDerivedType(tag: DW_TAG_member, name: "tp_descr_set", scope: !290, file: !278, line: 395, baseType: !584, size: 64, align: 64, offset: 2240)
!584 = !DIDerivedType(tag: DW_TAG_typedef, name: "descrsetfunc", file: !278, line: 326, baseType: !480)
!585 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dictoffset", scope: !290, file: !278, line: 396, baseType: !282, size: 64, align: 64, offset: 2304)
!586 = !DIDerivedType(tag: DW_TAG_member, name: "tp_init", scope: !290, file: !278, line: 397, baseType: !587, size: 64, align: 64, offset: 2368)
!587 = !DIDerivedType(tag: DW_TAG_typedef, name: "initproc", file: !278, line: 327, baseType: !480)
!588 = !DIDerivedType(tag: DW_TAG_member, name: "tp_alloc", scope: !290, file: !278, line: 398, baseType: !589, size: 64, align: 64, offset: 2432)
!589 = !DIDerivedType(tag: DW_TAG_typedef, name: "allocfunc", file: !278, line: 329, baseType: !590)
!590 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !591, size: 64, align: 64)
!591 = !DISubroutineType(types: !592)
!592 = !{!276, !289, !282}
!593 = !DIDerivedType(tag: DW_TAG_member, name: "tp_new", scope: !290, file: !278, line: 399, baseType: !594, size: 64, align: 64, offset: 2496)
!594 = !DIDerivedType(tag: DW_TAG_typedef, name: "newfunc", file: !278, line: 328, baseType: !595)
!595 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !596, size: 64, align: 64)
!596 = !DISubroutineType(types: !597)
!597 = !{!276, !289, !276, !276}
!598 = !DIDerivedType(tag: DW_TAG_member, name: "tp_free", scope: !290, file: !278, line: 400, baseType: !599, size: 64, align: 64, offset: 2560)
!599 = !DIDerivedType(tag: DW_TAG_typedef, name: "freefunc", file: !278, line: 307, baseType: !600)
!600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !601, size: 64, align: 64)
!601 = !DISubroutineType(types: !602)
!602 = !{null, !275}
!603 = !DIDerivedType(tag: DW_TAG_member, name: "tp_is_gc", scope: !290, file: !278, line: 401, baseType: !412, size: 64, align: 64, offset: 2624)
!604 = !DIDerivedType(tag: DW_TAG_member, name: "tp_bases", scope: !290, file: !278, line: 402, baseType: !276, size: 64, align: 64, offset: 2688)
!605 = !DIDerivedType(tag: DW_TAG_member, name: "tp_mro", scope: !290, file: !278, line: 403, baseType: !276, size: 64, align: 64, offset: 2752)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "tp_cache", scope: !290, file: !278, line: 404, baseType: !276, size: 64, align: 64, offset: 2816)
!607 = !DIDerivedType(tag: DW_TAG_member, name: "tp_subclasses", scope: !290, file: !278, line: 405, baseType: !276, size: 64, align: 64, offset: 2880)
!608 = !DIDerivedType(tag: DW_TAG_member, name: "tp_weaklist", scope: !290, file: !278, line: 406, baseType: !276, size: 64, align: 64, offset: 2944)
!609 = !DIDerivedType(tag: DW_TAG_member, name: "tp_del", scope: !290, file: !278, line: 407, baseType: !305, size: 64, align: 64, offset: 3008)
!610 = !DIDerivedType(tag: DW_TAG_member, name: "tp_version_tag", scope: !290, file: !278, line: 410, baseType: !272, size: 32, align: 32, offset: 3072)
!611 = !DIDerivedType(tag: DW_TAG_member, name: "tp_finalize", scope: !290, file: !278, line: 412, baseType: !305, size: 64, align: 64, offset: 3136)
!612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !268, size: 64, align: 64)
!613 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !273, size: 64, align: 64)
!614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !615, size: 64, align: 64)
!615 = !DIDerivedType(tag: DW_TAG_typedef, name: "path_t", file: !616, line: 775, baseType: !617)
!616 = !DIFile(filename: "./Modules/posixmodule.c", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!617 = !DICompositeType(tag: DW_TAG_structure_type, file: !616, line: 764, size: 576, align: 64, elements: !618)
!618 = !{!619, !620, !621, !622, !623, !626, !627, !628, !629, !630}
!619 = !DIDerivedType(tag: DW_TAG_member, name: "function_name", scope: !617, file: !616, line: 765, baseType: !299, size: 64, align: 64)
!620 = !DIDerivedType(tag: DW_TAG_member, name: "argument_name", scope: !617, file: !616, line: 766, baseType: !299, size: 64, align: 64, offset: 64)
!621 = !DIDerivedType(tag: DW_TAG_member, name: "nullable", scope: !617, file: !616, line: 767, baseType: !314, size: 32, align: 32, offset: 128)
!622 = !DIDerivedType(tag: DW_TAG_member, name: "allow_fd", scope: !617, file: !616, line: 768, baseType: !314, size: 32, align: 32, offset: 160)
!623 = !DIDerivedType(tag: DW_TAG_member, name: "wide", scope: !617, file: !616, line: 769, baseType: !624, size: 64, align: 64, offset: 192)
!624 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !625, size: 64, align: 64)
!625 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !365, line: 90, baseType: !314)
!626 = !DIDerivedType(tag: DW_TAG_member, name: "narrow", scope: !617, file: !616, line: 770, baseType: !322, size: 64, align: 64, offset: 256)
!627 = !DIDerivedType(tag: DW_TAG_member, name: "fd", scope: !617, file: !616, line: 771, baseType: !314, size: 32, align: 32, offset: 320)
!628 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !617, file: !616, line: 772, baseType: !282, size: 64, align: 64, offset: 384)
!629 = !DIDerivedType(tag: DW_TAG_member, name: "object", scope: !617, file: !616, line: 773, baseType: !276, size: 64, align: 64, offset: 448)
!630 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !617, file: !616, line: 774, baseType: !276, size: 64, align: 64, offset: 512)
!631 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !293, size: 64, align: 64)
!632 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !633, size: 64, align: 64)
!633 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyBytesObject", file: !634, line: 41, baseType: !635)
!634 = !DIFile(filename: "Include/bytesobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!635 = !DICompositeType(tag: DW_TAG_structure_type, file: !634, line: 31, size: 320, align: 64, elements: !636)
!636 = !{!637, !638, !639}
!637 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !635, file: !634, line: 32, baseType: !293, size: 192, align: 64)
!638 = !DIDerivedType(tag: DW_TAG_member, name: "ob_shash", scope: !635, file: !634, line: 33, baseType: !488, size: 64, align: 64, offset: 192)
!639 = !DIDerivedType(tag: DW_TAG_member, name: "ob_sval", scope: !635, file: !634, line: 34, baseType: !351, size: 8, align: 8, offset: 256)
!640 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !641, size: 64, align: 64)
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyTupleObject", file: !642, line: 33, baseType: !643)
!642 = !DIFile(filename: "Include/tupleobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!643 = !DICompositeType(tag: DW_TAG_structure_type, file: !642, line: 25, size: 256, align: 64, elements: !644)
!644 = !{!645, !646}
!645 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !643, file: !642, line: 26, baseType: !293, size: 192, align: 64)
!646 = !DIDerivedType(tag: DW_TAG_member, name: "ob_item", scope: !643, file: !642, line: 27, baseType: !647, size: 64, align: 64, offset: 192)
!647 = !DICompositeType(tag: DW_TAG_array_type, baseType: !276, size: 64, align: 64, elements: !352)
!648 = !DIBasicType(name: "long long int", size: 64, align: 64, encoding: DW_ATE_signed)
!649 = !DIDerivedType(tag: DW_TAG_typedef, name: "clock_t", file: !650, line: 59, baseType: !651)
!650 = !DIFile(filename: "/usr/include/time.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "__clock_t", file: !271, line: 144, baseType: !287)
!652 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!653 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !322, size: 64, align: 64)
!654 = !DIDerivedType(tag: DW_TAG_typedef, name: "__cpu_mask", file: !655, line: 119, baseType: !366)
!655 = !DIFile(filename: "/usr/include/bits/sched.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !654, size: 64, align: 64)
!657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !658, size: 64, align: 64)
!658 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !654)
!659 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !660, size: 64, align: 64)
!660 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyListObject", file: !661, line: 40, baseType: !662)
!661 = !DIFile(filename: "Include/listobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!662 = !DICompositeType(tag: DW_TAG_structure_type, file: !661, line: 23, size: 320, align: 64, elements: !663)
!663 = !{!664, !665, !667}
!664 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !662, file: !661, line: 24, baseType: !293, size: 192, align: 64)
!665 = !DIDerivedType(tag: DW_TAG_member, name: "ob_item", scope: !662, file: !661, line: 26, baseType: !666, size: 64, align: 64, offset: 192)
!666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !276, size: 64, align: 64)
!667 = !DIDerivedType(tag: DW_TAG_member, name: "allocated", scope: !662, file: !661, line: 39, baseType: !282, size: 64, align: 64, offset: 256)
!668 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !669, size: 64, align: 64)
!669 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyTypeObject", file: !278, line: 422, baseType: !290)
!670 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !671, size: 64, align: 64)
!671 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !285, line: 92, baseType: !358)
!672 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !673, size: 64, align: 64)
!673 = !DICompositeType(tag: DW_TAG_structure_type, name: "iovec", file: !674, line: 43, size: 128, align: 64, elements: !675)
!674 = !DIFile(filename: "/usr/include/bits/uio.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!675 = !{!676, !677}
!676 = !DIDerivedType(tag: DW_TAG_member, name: "iov_base", scope: !673, file: !674, line: 45, baseType: !275, size: 64, align: 64)
!677 = !DIDerivedType(tag: DW_TAG_member, name: "iov_len", scope: !673, file: !674, line: 46, baseType: !364, size: 64, align: 64, offset: 64)
!678 = !DIBasicType(name: "long long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !680, size: 64, align: 64)
!680 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !681)
!681 = !DICompositeType(tag: DW_TAG_structure_type, name: "constdef", file: !616, line: 9331, size: 128, align: 64, elements: !682)
!682 = !{!683, !684}
!683 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !681, file: !616, line: 9332, baseType: !322, size: 64, align: 64)
!684 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !681, file: !616, line: 9333, baseType: !287, size: 64, align: 64, offset: 64)
!685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !686, size: 64, align: 64)
!686 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyStructSequence", file: !687, line: 35, baseType: !641)
!687 = !DIFile(filename: "Include/structseq.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !314, size: 64, align: 64)
!689 = !{!690, !695, !700, !713, !726, !746, !781, !806, !818, !826, !929, !936, !943, !948, !975, !981, !989, !993, !998, !1012, !1051, !1064, !1075, !1092, !1101, !1108, !1110, !1120, !1134, !1143, !1157, !1167, !1177, !1181, !1196, !1205, !1208, !1220, !1223, !1237, !1243, !1251, !1328, !1337, !1349, !1355, !1362, !1370, !1385, !1390, !1409, !1414, !1425, !1430, !1443, !1454, !1459, !1510, !1521, !1554, !1570, !1583, !1594, !1602, !1608, !1621, !1661, !1666, !1689, !1707, !1717, !1724, !1736, !1785, !1793, !1799, !1805, !1820, !1826, !1832, !1838, !1846, !1853, !1857, !1902, !1932, !1938, !1945, !1949, !1953, !1957, !1975, !1997, !2001, !2005, !2009, !2013, !2020, !2026, !2032, !2037, !2042, !2047, !2053, !2059, !2064, !2086, !2096, !2102, !2106, !2114, !2204, !2222, !2232, !2310, !2319, !2325, !2329, !2335, !2341, !2347, !2361, !2369, !2378, !2383, !2388, !2406, !2416, !2420, !2431, !2445, !2457, !2482, !2490, !2505, !2515, !2527, !2537, !2554, !2563, !2568, !2581, !2588, !2600, !2613, !2621, !2628, !2633, !2639, !2644, !2647, !2653, !2659, !2668, !2679, !2689, !2700, !2727, !2739, !2745, !2749, !2762, !2766, !2772, !2776, !2781, !2786, !2791, !2796, !2801, !2806, !2811, !2816, !2842, !2852, !2863, !2877, !2883, !2903, !2912, !2916, !2926, !2930, !2941, !2945, !2951, !2962, !2969, !2976, !2983, !2990, !3004, !3026, !3038, !3076, !3097, !3101, !3107, !3113, !3131, !3134, !3137, !3162, !3175, !3191, !3198, !3204, !3210, !3214, !3219, !3223}
!690 = !DISubprogram(name: "_PyLong_FromUid", scope: !616, file: !616, line: 396, type: !691, isLocal: false, isDefinition: true, scopeLine: 397, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (i32)* @_PyLong_FromUid, variables: !693)
!691 = !DISubroutineType(types: !692)
!692 = !{!276, !268}
!693 = !{!694}
!694 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "uid", arg: 1, scope: !690, file: !616, line: 396, type: !268)
!695 = !DISubprogram(name: "_PyLong_FromGid", scope: !616, file: !616, line: 404, type: !696, isLocal: false, isDefinition: true, scopeLine: 405, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (i32)* @_PyLong_FromGid, variables: !698)
!696 = !DISubroutineType(types: !697)
!697 = !{!276, !273}
!698 = !{!699}
!699 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "gid", arg: 1, scope: !695, file: !616, line: 404, type: !273)
!700 = !DISubprogram(name: "_Py_Uid_Converter", scope: !616, file: !616, line: 412, type: !535, isLocal: false, isDefinition: true, scopeLine: 413, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i8*)* @_Py_Uid_Converter, variables: !701)
!701 = !{!702, !703, !704, !705, !706, !707, !708, !709, !711}
!702 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "obj", arg: 1, scope: !700, file: !616, line: 412, type: !276)
!703 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "p", arg: 2, scope: !700, file: !616, line: 412, type: !275)
!704 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "uid", scope: !700, file: !616, line: 414, type: !268)
!705 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !700, file: !616, line: 415, type: !276)
!706 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "overflow", scope: !700, file: !616, line: 416, type: !314)
!707 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !700, file: !616, line: 417, type: !287)
!708 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "uresult", scope: !700, file: !616, line: 418, type: !366)
!709 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !710, file: !616, line: 498, type: !276)
!710 = distinct !DILexicalBlock(scope: !700, file: !616, line: 498, column: 8)
!711 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !712, file: !616, line: 513, type: !276)
!712 = distinct !DILexicalBlock(scope: !700, file: !616, line: 513, column: 8)
!713 = !DISubprogram(name: "_Py_Gid_Converter", scope: !616, file: !616, line: 518, type: !535, isLocal: false, isDefinition: true, scopeLine: 519, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i8*)* @_Py_Gid_Converter, variables: !714)
!714 = !{!715, !716, !717, !718, !719, !720, !721, !722, !724}
!715 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "obj", arg: 1, scope: !713, file: !616, line: 518, type: !276)
!716 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "p", arg: 2, scope: !713, file: !616, line: 518, type: !275)
!717 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "gid", scope: !713, file: !616, line: 520, type: !273)
!718 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !713, file: !616, line: 521, type: !276)
!719 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "overflow", scope: !713, file: !616, line: 522, type: !314)
!720 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !713, file: !616, line: 523, type: !287)
!721 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "uresult", scope: !713, file: !616, line: 524, type: !366)
!722 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !723, file: !616, line: 605, type: !276)
!723 = distinct !DILexicalBlock(scope: !713, file: !616, line: 605, column: 8)
!724 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !725, file: !616, line: 620, type: !276)
!725 = distinct !DILexicalBlock(scope: !713, file: !616, line: 620, column: 8)
!726 = !DISubprogram(name: "PyInit_posix", scope: !616, file: !616, line: 12208, type: !727, isLocal: false, isDefinition: true, scopeLine: 12209, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* ()* @PyInit_posix, variables: !729)
!727 = !DISubroutineType(types: !728)
!728 = !{!276}
!729 = !{!730, !731, !732, !733, !734, !736, !738, !740, !744}
!730 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !726, file: !616, line: 12210, type: !276)
!731 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !726, file: !616, line: 12210, type: !276)
!732 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "list", scope: !726, file: !616, line: 12211, type: !276)
!733 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "trace", scope: !726, file: !616, line: 12212, type: !653)
!734 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xincref_tmp", scope: !735, file: !616, line: 12224, type: !276)
!735 = distinct !DILexicalBlock(scope: !726, file: !616, line: 12224, column: 8)
!736 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !737, file: !616, line: 12227, type: !276)
!737 = distinct !DILexicalBlock(scope: !726, file: !616, line: 12227, column: 8)
!738 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ignored", scope: !739, file: !616, line: 12357, type: !314)
!739 = distinct !DILexicalBlock(scope: !726, file: !616, line: 12356, column: 5)
!740 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "unicode", scope: !741, file: !616, line: 12373, type: !276)
!741 = distinct !DILexicalBlock(scope: !742, file: !616, line: 12372, column: 51)
!742 = distinct !DILexicalBlock(scope: !743, file: !616, line: 12372, column: 5)
!743 = distinct !DILexicalBlock(scope: !726, file: !616, line: 12372, column: 5)
!744 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !745, file: !616, line: 12378, type: !276)
!745 = distinct !DILexicalBlock(scope: !741, file: !616, line: 12378, column: 12)
!746 = !DISubprogram(name: "os_stat", scope: !616, file: !616, line: 2480, type: !747, isLocal: true, isDefinition: true, scopeLine: 2481, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyModuleDef*, %struct._object*, %struct._object*)* @os_stat, variables: !773)
!747 = !DISubroutineType(types: !748)
!748 = !{!276, !749, !276, !276}
!749 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !750, size: 64, align: 64)
!750 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyModuleDef", file: !751, line: 57, baseType: !752)
!751 = !DIFile(filename: "Include/moduleobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!752 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyModuleDef", file: !751, line: 47, size: 832, align: 64, elements: !753)
!753 = !{!754, !763, !764, !765, !766, !769, !770, !771, !772}
!754 = !DIDerivedType(tag: DW_TAG_member, name: "m_base", scope: !752, file: !751, line: 48, baseType: !755, size: 320, align: 64)
!755 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyModuleDef_Base", file: !751, line: 38, baseType: !756)
!756 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyModuleDef_Base", file: !751, line: 33, size: 320, align: 64, elements: !757)
!757 = !{!758, !759, !761, !762}
!758 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !756, file: !751, line: 34, baseType: !277, size: 128, align: 64)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "m_init", scope: !756, file: !751, line: 35, baseType: !760, size: 64, align: 64, offset: 128)
!760 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !727, size: 64, align: 64)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "m_index", scope: !756, file: !751, line: 36, baseType: !282, size: 64, align: 64, offset: 192)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "m_copy", scope: !756, file: !751, line: 37, baseType: !276, size: 64, align: 64, offset: 256)
!763 = !DIDerivedType(tag: DW_TAG_member, name: "m_name", scope: !752, file: !751, line: 49, baseType: !299, size: 64, align: 64, offset: 320)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "m_doc", scope: !752, file: !751, line: 50, baseType: !299, size: 64, align: 64, offset: 384)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "m_size", scope: !752, file: !751, line: 51, baseType: !282, size: 64, align: 64, offset: 448)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "m_methods", scope: !752, file: !751, line: 52, baseType: !767, size: 64, align: 64, offset: 512)
!767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !768, size: 64, align: 64)
!768 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyMethodDef", file: !551, line: 47, baseType: !550)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "m_reload", scope: !752, file: !751, line: 53, baseType: !412, size: 64, align: 64, offset: 576)
!770 = !DIDerivedType(tag: DW_TAG_member, name: "m_traverse", scope: !752, file: !751, line: 54, baseType: !529, size: 64, align: 64, offset: 640)
!771 = !DIDerivedType(tag: DW_TAG_member, name: "m_clear", scope: !752, file: !751, line: 55, baseType: !412, size: 64, align: 64, offset: 704)
!772 = !DIDerivedType(tag: DW_TAG_member, name: "m_free", scope: !752, file: !751, line: 56, baseType: !599, size: 64, align: 64, offset: 768)
!773 = !{!774, !775, !776, !777, !778, !779, !780}
!774 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "module", arg: 1, scope: !746, file: !616, line: 2480, type: !749)
!775 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !746, file: !616, line: 2480, type: !276)
!776 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !746, file: !616, line: 2480, type: !276)
!777 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !746, file: !616, line: 2482, type: !276)
!778 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !746, file: !616, line: 2484, type: !615)
!779 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !746, file: !616, line: 2485, type: !314)
!780 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "follow_symlinks", scope: !746, file: !616, line: 2486, type: !314)
!781 = !DISubprogram(name: "path_converter", scope: !616, file: !616, line: 788, type: !535, isLocal: true, isDefinition: true, scopeLine: 788, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i8*)* @path_converter, variables: !782)
!782 = !{!783, !784, !785, !786, !787, !788, !789, !790, !793, !795, !801, !802}
!783 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !781, file: !616, line: 788, type: !276)
!784 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "p", arg: 2, scope: !781, file: !616, line: 788, type: !275)
!785 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !781, file: !616, line: 789, type: !614)
!786 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "unicode", scope: !781, file: !616, line: 790, type: !276)
!787 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bytes", scope: !781, file: !616, line: 790, type: !276)
!788 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "length", scope: !781, file: !616, line: 791, type: !282)
!789 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "narrow", scope: !781, file: !616, line: 792, type: !322)
!790 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "converted", scope: !791, file: !616, line: 847, type: !314)
!791 = distinct !DILexicalBlock(scope: !792, file: !616, line: 824, column: 18)
!792 = distinct !DILexicalBlock(scope: !781, file: !616, line: 824, column: 9)
!793 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !794, file: !616, line: 848, type: !276)
!794 = distinct !DILexicalBlock(scope: !791, file: !616, line: 848, column: 12)
!795 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !796, file: !616, line: 862, type: !314)
!796 = distinct !DILexicalBlock(scope: !797, file: !616, line: 861, column: 33)
!797 = distinct !DILexicalBlock(scope: !798, file: !616, line: 861, column: 17)
!798 = distinct !DILexicalBlock(scope: !799, file: !616, line: 859, column: 21)
!799 = distinct !DILexicalBlock(scope: !800, file: !616, line: 859, column: 13)
!800 = distinct !DILexicalBlock(scope: !792, file: !616, line: 853, column: 10)
!801 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !796, file: !616, line: 863, type: !314)
!802 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !803, file: !616, line: 902, type: !276)
!803 = distinct !DILexicalBlock(scope: !804, file: !616, line: 902, column: 12)
!804 = distinct !DILexicalBlock(scope: !805, file: !616, line: 900, column: 35)
!805 = distinct !DILexicalBlock(scope: !781, file: !616, line: 900, column: 9)
!806 = !DISubprogram(name: "_fd_converter", scope: !616, file: !616, line: 640, type: !807, isLocal: true, isDefinition: true, scopeLine: 641, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i32*, i8*)* @_fd_converter, variables: !809)
!807 = !DISubroutineType(types: !808)
!808 = !{!314, !276, !688, !299}
!809 = !{!810, !811, !812, !813, !814, !815, !816}
!810 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !806, file: !616, line: 640, type: !276)
!811 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "p", arg: 2, scope: !806, file: !616, line: 640, type: !688)
!812 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "allowed", arg: 3, scope: !806, file: !616, line: 640, type: !299)
!813 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "overflow", scope: !806, file: !616, line: 642, type: !314)
!814 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "long_value", scope: !806, file: !616, line: 643, type: !287)
!815 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !806, file: !616, line: 645, type: !276)
!816 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !817, file: !616, line: 654, type: !276)
!817 = distinct !DILexicalBlock(scope: !806, file: !616, line: 654, column: 8)
!818 = !DISubprogram(name: "os_stat_impl", scope: !616, file: !616, line: 2502, type: !819, isLocal: true, isDefinition: true, scopeLine: 2504, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyModuleDef*, %struct.path_t*, i32, i32)* @os_stat_impl, variables: !821)
!819 = !DISubroutineType(types: !820)
!820 = !{!276, !749, !614, !314, !314}
!821 = !{!822, !823, !824, !825}
!822 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "module", arg: 1, scope: !818, file: !616, line: 2502, type: !749)
!823 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "path", arg: 2, scope: !818, file: !616, line: 2502, type: !614)
!824 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dir_fd", arg: 3, scope: !818, file: !616, line: 2502, type: !314)
!825 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "follow_symlinks", arg: 4, scope: !818, file: !616, line: 2502, type: !314)
!826 = !DISubprogram(name: "posix_do_stat", scope: !616, file: !616, line: 2313, type: !827, isLocal: true, isDefinition: true, scopeLine: 2315, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (i8*, %struct.path_t*, i32, i32)* @posix_do_stat, variables: !829)
!827 = !DISubroutineType(types: !828)
!828 = !{!276, !322, !614, !314, !314}
!829 = !{!830, !831, !832, !833, !834, !868, !869}
!830 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "function_name", arg: 1, scope: !826, file: !616, line: 2313, type: !322)
!831 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "path", arg: 2, scope: !826, file: !616, line: 2313, type: !614)
!832 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dir_fd", arg: 3, scope: !826, file: !616, line: 2314, type: !314)
!833 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "follow_symlinks", arg: 4, scope: !826, file: !616, line: 2314, type: !314)
!834 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "st", scope: !826, file: !616, line: 2316, type: !835)
!835 = !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !836, line: 46, size: 1152, align: 64, elements: !837)
!836 = !DIFile(filename: "/usr/include/bits/stat.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!837 = !{!838, !840, !842, !844, !846, !847, !848, !849, !850, !851, !853, !855, !862, !863, !864}
!838 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !835, file: !836, line: 48, baseType: !839, size: 64, align: 64)
!839 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !271, line: 133, baseType: !366)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !835, file: !836, line: 53, baseType: !841, size: 64, align: 64, offset: 64)
!841 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !271, line: 136, baseType: !366)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !835, file: !836, line: 61, baseType: !843, size: 64, align: 64, offset: 128)
!843 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !271, line: 139, baseType: !366)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !835, file: !836, line: 62, baseType: !845, size: 32, align: 32, offset: 192)
!845 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !271, line: 138, baseType: !272)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !835, file: !836, line: 64, baseType: !270, size: 32, align: 32, offset: 224)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !835, file: !836, line: 65, baseType: !274, size: 32, align: 32, offset: 256)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !835, file: !836, line: 67, baseType: !314, size: 32, align: 32, offset: 288)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !835, file: !836, line: 69, baseType: !839, size: 64, align: 64, offset: 320)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !835, file: !836, line: 74, baseType: !345, size: 64, align: 64, offset: 384)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !835, file: !836, line: 78, baseType: !852, size: 64, align: 64, offset: 448)
!852 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !271, line: 162, baseType: !287)
!853 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !835, file: !836, line: 80, baseType: !854, size: 64, align: 64, offset: 512)
!854 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !271, line: 167, baseType: !287)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !835, file: !836, line: 91, baseType: !856, size: 128, align: 64, offset: 576)
!856 = !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !650, line: 120, size: 128, align: 64, elements: !857)
!857 = !{!858, !860}
!858 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !856, file: !650, line: 122, baseType: !859, size: 64, align: 64)
!859 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !271, line: 148, baseType: !287)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !856, file: !650, line: 123, baseType: !861, size: 64, align: 64, offset: 64)
!861 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !271, line: 184, baseType: !287)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !835, file: !836, line: 92, baseType: !856, size: 128, align: 64, offset: 704)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !835, file: !836, line: 93, baseType: !856, size: 128, align: 64, offset: 832)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "__unused", scope: !835, file: !836, line: 106, baseType: !865, size: 192, align: 64, offset: 960)
!865 = !DICompositeType(tag: DW_TAG_array_type, baseType: !861, size: 192, align: 64, elements: !866)
!866 = !{!867}
!867 = !DISubrange(count: 3)
!868 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !826, file: !616, line: 2317, type: !314)
!869 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !870, file: !616, line: 2329, type: !871)
!870 = distinct !DILexicalBlock(scope: !826, file: !616, line: 2329, column: 5)
!871 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !872, size: 64, align: 64)
!872 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyThreadState", file: !873, line: 139, baseType: !874)
!873 = !DIFile(filename: "Include/pystate.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!874 = !DICompositeType(tag: DW_TAG_structure_type, name: "_ts", file: !873, line: 69, size: 1536, align: 64, elements: !875)
!875 = !{!876, !878, !879, !899, !902, !903, !904, !905, !906, !907, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928}
!876 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !874, file: !873, line: 72, baseType: !877, size: 64, align: 64)
!877 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !874, size: 64, align: 64)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !874, file: !873, line: 73, baseType: !877, size: 64, align: 64, offset: 64)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "interp", scope: !874, file: !873, line: 74, baseType: !880, size: 64, align: 64, offset: 128)
!880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !881, size: 64, align: 64)
!881 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyInterpreterState", file: !873, line: 44, baseType: !882)
!882 = !DICompositeType(tag: DW_TAG_structure_type, name: "_is", file: !873, line: 19, size: 832, align: 64, elements: !883)
!883 = !{!884, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898}
!884 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !882, file: !873, line: 21, baseType: !885, size: 64, align: 64)
!885 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !882, size: 64, align: 64)
!886 = !DIDerivedType(tag: DW_TAG_member, name: "tstate_head", scope: !882, file: !873, line: 22, baseType: !877, size: 64, align: 64, offset: 64)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "modules", scope: !882, file: !873, line: 24, baseType: !276, size: 64, align: 64, offset: 128)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "modules_by_index", scope: !882, file: !873, line: 25, baseType: !276, size: 64, align: 64, offset: 192)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "sysdict", scope: !882, file: !873, line: 26, baseType: !276, size: 64, align: 64, offset: 256)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "builtins", scope: !882, file: !873, line: 27, baseType: !276, size: 64, align: 64, offset: 320)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "importlib", scope: !882, file: !873, line: 28, baseType: !276, size: 64, align: 64, offset: 384)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "codec_search_path", scope: !882, file: !873, line: 30, baseType: !276, size: 64, align: 64, offset: 448)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "codec_search_cache", scope: !882, file: !873, line: 31, baseType: !276, size: 64, align: 64, offset: 512)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "codec_error_registry", scope: !882, file: !873, line: 32, baseType: !276, size: 64, align: 64, offset: 576)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "codecs_initialized", scope: !882, file: !873, line: 33, baseType: !314, size: 32, align: 32, offset: 640)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "fscodec_initialized", scope: !882, file: !873, line: 34, baseType: !314, size: 32, align: 32, offset: 672)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "dlopenflags", scope: !882, file: !873, line: 37, baseType: !314, size: 32, align: 32, offset: 704)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "builtins_copy", scope: !882, file: !873, line: 43, baseType: !276, size: 64, align: 64, offset: 768)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "frame", scope: !874, file: !873, line: 76, baseType: !900, size: 64, align: 64, offset: 192)
!900 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !901, size: 64, align: 64)
!901 = !DICompositeType(tag: DW_TAG_structure_type, name: "_frame", file: !873, line: 50, flags: DIFlagFwdDecl)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "recursion_depth", scope: !874, file: !873, line: 77, baseType: !314, size: 32, align: 32, offset: 256)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "overflowed", scope: !874, file: !873, line: 78, baseType: !301, size: 8, align: 8, offset: 288)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "recursion_critical", scope: !874, file: !873, line: 80, baseType: !301, size: 8, align: 8, offset: 296)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "tracing", scope: !874, file: !873, line: 85, baseType: !314, size: 32, align: 32, offset: 320)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "use_tracing", scope: !874, file: !873, line: 86, baseType: !314, size: 32, align: 32, offset: 352)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "c_profilefunc", scope: !874, file: !873, line: 88, baseType: !908, size: 64, align: 64, offset: 384)
!908 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_tracefunc", file: !873, line: 54, baseType: !909)
!909 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !910, size: 64, align: 64)
!910 = !DISubroutineType(types: !911)
!911 = !{!314, !276, !900, !314, !276}
!912 = !DIDerivedType(tag: DW_TAG_member, name: "c_tracefunc", scope: !874, file: !873, line: 89, baseType: !908, size: 64, align: 64, offset: 448)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "c_profileobj", scope: !874, file: !873, line: 90, baseType: !276, size: 64, align: 64, offset: 512)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "c_traceobj", scope: !874, file: !873, line: 91, baseType: !276, size: 64, align: 64, offset: 576)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "curexc_type", scope: !874, file: !873, line: 93, baseType: !276, size: 64, align: 64, offset: 640)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "curexc_value", scope: !874, file: !873, line: 94, baseType: !276, size: 64, align: 64, offset: 704)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "curexc_traceback", scope: !874, file: !873, line: 95, baseType: !276, size: 64, align: 64, offset: 768)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "exc_type", scope: !874, file: !873, line: 97, baseType: !276, size: 64, align: 64, offset: 832)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "exc_value", scope: !874, file: !873, line: 98, baseType: !276, size: 64, align: 64, offset: 896)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "exc_traceback", scope: !874, file: !873, line: 99, baseType: !276, size: 64, align: 64, offset: 960)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "dict", scope: !874, file: !873, line: 101, baseType: !276, size: 64, align: 64, offset: 1024)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "gilstate_counter", scope: !874, file: !873, line: 103, baseType: !314, size: 32, align: 32, offset: 1088)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "async_exc", scope: !874, file: !873, line: 105, baseType: !276, size: 64, align: 64, offset: 1152)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "thread_id", scope: !874, file: !873, line: 106, baseType: !287, size: 64, align: 64, offset: 1216)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "trash_delete_nesting", scope: !874, file: !873, line: 108, baseType: !314, size: 32, align: 32, offset: 1280)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "trash_delete_later", scope: !874, file: !873, line: 109, baseType: !276, size: 64, align: 64, offset: 1344)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "on_delete", scope: !874, file: !873, line: 134, baseType: !600, size: 64, align: 64, offset: 1408)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "on_delete_data", scope: !874, file: !873, line: 135, baseType: !275, size: 64, align: 64, offset: 1472)
!929 = !DISubprogram(name: "path_and_dir_fd_invalid", scope: !616, file: !616, line: 957, type: !930, isLocal: true, isDefinition: true, scopeLine: 957, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i8*, %struct.path_t*, i32)* @path_and_dir_fd_invalid, variables: !932)
!930 = !DISubroutineType(types: !931)
!931 = !{!314, !322, !614, !314}
!932 = !{!933, !934, !935}
!933 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "function_name", arg: 1, scope: !929, file: !616, line: 957, type: !322)
!934 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "path", arg: 2, scope: !929, file: !616, line: 957, type: !614)
!935 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dir_fd", arg: 3, scope: !929, file: !616, line: 957, type: !314)
!936 = !DISubprogram(name: "dir_fd_and_fd_invalid", scope: !616, file: !616, line: 968, type: !937, isLocal: true, isDefinition: true, scopeLine: 968, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i8*, i32, i32)* @dir_fd_and_fd_invalid, variables: !939)
!937 = !DISubroutineType(types: !938)
!938 = !{!314, !322, !314, !314}
!939 = !{!940, !941, !942}
!940 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "function_name", arg: 1, scope: !936, file: !616, line: 968, type: !322)
!941 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dir_fd", arg: 2, scope: !936, file: !616, line: 968, type: !314)
!942 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fd", arg: 3, scope: !936, file: !616, line: 968, type: !314)
!943 = !DISubprogram(name: "fd_and_follow_symlinks_invalid", scope: !616, file: !616, line: 979, type: !937, isLocal: true, isDefinition: true, scopeLine: 980, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i8*, i32, i32)* @fd_and_follow_symlinks_invalid, variables: !944)
!944 = !{!945, !946, !947}
!945 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "function_name", arg: 1, scope: !943, file: !616, line: 979, type: !322)
!946 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fd", arg: 2, scope: !943, file: !616, line: 979, type: !314)
!947 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "follow_symlinks", arg: 3, scope: !943, file: !616, line: 980, type: !314)
!948 = !DISubprogram(name: "fstat64", scope: !949, file: !949, line: 517, type: !950, isLocal: false, isDefinition: true, scopeLine: 518, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i32, %struct.stat64*)* @fstat64, variables: !972)
!949 = !DIFile(filename: "/usr/include/sys/stat.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!950 = !DISubroutineType(types: !951)
!951 = !{!314, !314, !952}
!952 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !953, size: 64, align: 64)
!953 = !DICompositeType(tag: DW_TAG_structure_type, name: "stat64", file: !836, line: 119, size: 1152, align: 64, elements: !954)
!954 = !{!955, !956, !958, !959, !960, !961, !962, !963, !964, !965, !966, !968, !969, !970, !971}
!955 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !953, file: !836, line: 121, baseType: !839, size: 64, align: 64)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !953, file: !836, line: 123, baseType: !957, size: 64, align: 64, offset: 64)
!957 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino64_t", file: !271, line: 137, baseType: !366)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !953, file: !836, line: 124, baseType: !843, size: 64, align: 64, offset: 128)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !953, file: !836, line: 125, baseType: !845, size: 32, align: 32, offset: 192)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !953, file: !836, line: 132, baseType: !270, size: 32, align: 32, offset: 224)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !953, file: !836, line: 133, baseType: !274, size: 32, align: 32, offset: 256)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !953, file: !836, line: 135, baseType: !314, size: 32, align: 32, offset: 288)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !953, file: !836, line: 136, baseType: !839, size: 64, align: 64, offset: 320)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !953, file: !836, line: 137, baseType: !345, size: 64, align: 64, offset: 384)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !953, file: !836, line: 143, baseType: !852, size: 64, align: 64, offset: 448)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !953, file: !836, line: 144, baseType: !967, size: 64, align: 64, offset: 512)
!967 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt64_t", file: !271, line: 168, baseType: !287)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !953, file: !836, line: 152, baseType: !856, size: 128, align: 64, offset: 576)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !953, file: !836, line: 153, baseType: !856, size: 128, align: 64, offset: 704)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !953, file: !836, line: 154, baseType: !856, size: 128, align: 64, offset: 832)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "__unused", scope: !953, file: !836, line: 164, baseType: !865, size: 192, align: 64, offset: 960)
!972 = !{!973, !974}
!973 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__fd", arg: 1, scope: !948, file: !949, line: 517, type: !314)
!974 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__statbuf", arg: 2, scope: !948, file: !949, line: 517, type: !952)
!975 = !DISubprogram(name: "lstat64", scope: !949, file: !949, line: 510, type: !976, isLocal: false, isDefinition: true, scopeLine: 511, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i8*, %struct.stat64*)* @lstat64, variables: !978)
!976 = !DISubroutineType(types: !977)
!977 = !{!314, !299, !952}
!978 = !{!979, !980}
!979 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__path", arg: 1, scope: !975, file: !949, line: 510, type: !299)
!980 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__statbuf", arg: 2, scope: !975, file: !949, line: 510, type: !952)
!981 = !DISubprogram(name: "fstatat64", scope: !949, file: !949, line: 524, type: !982, isLocal: false, isDefinition: true, scopeLine: 526, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i32, i8*, %struct.stat64*, i32)* @fstatat64, variables: !984)
!982 = !DISubroutineType(types: !983)
!983 = !{!314, !314, !299, !952, !314}
!984 = !{!985, !986, !987, !988}
!985 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__fd", arg: 1, scope: !981, file: !949, line: 524, type: !314)
!986 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__filename", arg: 2, scope: !981, file: !949, line: 524, type: !299)
!987 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__statbuf", arg: 3, scope: !981, file: !949, line: 524, type: !952)
!988 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__flag", arg: 4, scope: !981, file: !949, line: 524, type: !314)
!989 = !DISubprogram(name: "stat64", scope: !949, file: !949, line: 503, type: !976, isLocal: false, isDefinition: true, scopeLine: 504, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i8*, %struct.stat64*)* @stat64, variables: !990)
!990 = !{!991, !992}
!991 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__path", arg: 1, scope: !989, file: !949, line: 503, type: !299)
!992 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__statbuf", arg: 2, scope: !989, file: !949, line: 503, type: !952)
!993 = !DISubprogram(name: "path_error", scope: !616, file: !616, line: 1305, type: !994, isLocal: true, isDefinition: true, scopeLine: 1306, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.path_t*)* @path_error, variables: !996)
!994 = !DISubroutineType(types: !995)
!995 = !{!276, !614}
!996 = !{!997}
!997 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "path", arg: 1, scope: !993, file: !616, line: 1305, type: !614)
!998 = !DISubprogram(name: "_pystat_fromstructstat", scope: !616, file: !616, line: 2205, type: !999, isLocal: true, isDefinition: true, scopeLine: 2206, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.stat*)* @_pystat_fromstructstat, variables: !1002)
!999 = !DISubroutineType(types: !1000)
!1000 = !{!276, !1001}
!1001 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !835, size: 64, align: 64)
!1002 = !{!1003, !1004, !1005, !1006, !1007, !1008}
!1003 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "st", arg: 1, scope: !998, file: !616, line: 2205, type: !1001)
!1004 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ansec", scope: !998, file: !616, line: 2207, type: !366)
!1005 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mnsec", scope: !998, file: !616, line: 2207, type: !366)
!1006 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cnsec", scope: !998, file: !616, line: 2207, type: !366)
!1007 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !998, file: !616, line: 2208, type: !276)
!1008 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1009, file: !616, line: 2302, type: !276)
!1009 = distinct !DILexicalBlock(scope: !1010, file: !616, line: 2302, column: 12)
!1010 = distinct !DILexicalBlock(scope: !1011, file: !616, line: 2301, column: 27)
!1011 = distinct !DILexicalBlock(scope: !998, file: !616, line: 2301, column: 9)
!1012 = !DISubprogram(name: "fill_time", scope: !616, file: !616, line: 2159, type: !1013, isLocal: true, isDefinition: true, scopeLine: 2160, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct._object*, i32, i64, i64)* @fill_time, variables: !1016)
!1013 = !DISubroutineType(types: !1014)
!1014 = !{null, !276, !314, !1015, !366}
!1015 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !650, line: 75, baseType: !859)
!1016 = !{!1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1028, !1031, !1033, !1036, !1038, !1041, !1043, !1046, !1048}
!1017 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !1012, file: !616, line: 2159, type: !276)
!1018 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "index", arg: 2, scope: !1012, file: !616, line: 2159, type: !314)
!1019 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sec", arg: 3, scope: !1012, file: !616, line: 2159, type: !1015)
!1020 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "nsec", arg: 4, scope: !1012, file: !616, line: 2159, type: !366)
!1021 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !1012, file: !616, line: 2161, type: !276)
!1022 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ns_fractional", scope: !1012, file: !616, line: 2162, type: !276)
!1023 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s_in_ns", scope: !1012, file: !616, line: 2163, type: !276)
!1024 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ns_total", scope: !1012, file: !616, line: 2164, type: !276)
!1025 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "float_s", scope: !1012, file: !616, line: 2165, type: !276)
!1026 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1027, file: !616, line: 2195, type: !276)
!1027 = distinct !DILexicalBlock(scope: !1012, file: !616, line: 2195, column: 8)
!1028 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1029, file: !616, line: 2195, type: !276)
!1029 = distinct !DILexicalBlock(scope: !1030, file: !616, line: 2195, column: 93)
!1030 = distinct !DILexicalBlock(scope: !1027, file: !616, line: 2195, column: 59)
!1031 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1032, file: !616, line: 2196, type: !276)
!1032 = distinct !DILexicalBlock(scope: !1012, file: !616, line: 2196, column: 8)
!1033 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1034, file: !616, line: 2196, type: !276)
!1034 = distinct !DILexicalBlock(scope: !1035, file: !616, line: 2196, column: 105)
!1035 = distinct !DILexicalBlock(scope: !1032, file: !616, line: 2196, column: 71)
!1036 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1037, file: !616, line: 2197, type: !276)
!1037 = distinct !DILexicalBlock(scope: !1012, file: !616, line: 2197, column: 8)
!1038 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1039, file: !616, line: 2197, type: !276)
!1039 = distinct !DILexicalBlock(scope: !1040, file: !616, line: 2197, column: 99)
!1040 = distinct !DILexicalBlock(scope: !1037, file: !616, line: 2197, column: 65)
!1041 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1042, file: !616, line: 2198, type: !276)
!1042 = distinct !DILexicalBlock(scope: !1012, file: !616, line: 2198, column: 8)
!1043 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1044, file: !616, line: 2198, type: !276)
!1044 = distinct !DILexicalBlock(scope: !1045, file: !616, line: 2198, column: 100)
!1045 = distinct !DILexicalBlock(scope: !1042, file: !616, line: 2198, column: 66)
!1046 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1047, file: !616, line: 2199, type: !276)
!1047 = distinct !DILexicalBlock(scope: !1012, file: !616, line: 2199, column: 8)
!1048 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1049, file: !616, line: 2199, type: !276)
!1049 = distinct !DILexicalBlock(scope: !1050, file: !616, line: 2199, column: 99)
!1050 = distinct !DILexicalBlock(scope: !1047, file: !616, line: 2199, column: 65)
!1051 = !DISubprogram(name: "path_cleanup", scope: !616, file: !616, line: 781, type: !1052, isLocal: true, isDefinition: true, scopeLine: 781, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct.path_t*)* @path_cleanup, variables: !1054)
!1052 = !DISubroutineType(types: !1053)
!1053 = !{null, !614}
!1054 = !{!1055, !1056, !1060}
!1055 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "path", arg: 1, scope: !1051, file: !616, line: 781, type: !614)
!1056 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_tmp", scope: !1057, file: !616, line: 783, type: !276)
!1057 = distinct !DILexicalBlock(scope: !1058, file: !616, line: 783, column: 12)
!1058 = distinct !DILexicalBlock(scope: !1059, file: !616, line: 782, column: 24)
!1059 = distinct !DILexicalBlock(scope: !1051, file: !616, line: 782, column: 9)
!1060 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1061, file: !616, line: 783, type: !276)
!1061 = distinct !DILexicalBlock(scope: !1062, file: !616, line: 783, column: 125)
!1062 = distinct !DILexicalBlock(scope: !1063, file: !616, line: 783, column: 90)
!1063 = distinct !DILexicalBlock(scope: !1057, file: !616, line: 783, column: 67)
!1064 = !DISubprogram(name: "os_access", scope: !616, file: !616, line: 2622, type: !747, isLocal: true, isDefinition: true, scopeLine: 2623, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyModuleDef*, %struct._object*, %struct._object*)* @os_access, variables: !1065)
!1065 = !{!1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074}
!1066 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "module", arg: 1, scope: !1064, file: !616, line: 2622, type: !749)
!1067 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1064, file: !616, line: 2622, type: !276)
!1068 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1064, file: !616, line: 2622, type: !276)
!1069 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1064, file: !616, line: 2624, type: !276)
!1070 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1064, file: !616, line: 2626, type: !615)
!1071 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mode", scope: !1064, file: !616, line: 2627, type: !314)
!1072 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !1064, file: !616, line: 2628, type: !314)
!1073 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "effective_ids", scope: !1064, file: !616, line: 2629, type: !314)
!1074 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "follow_symlinks", scope: !1064, file: !616, line: 2630, type: !314)
!1075 = !DISubprogram(name: "os_access_impl", scope: !616, file: !616, line: 2646, type: !1076, isLocal: true, isDefinition: true, scopeLine: 2648, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyModuleDef*, %struct.path_t*, i32, i32, i32, i32)* @os_access_impl, variables: !1078)
!1076 = !DISubroutineType(types: !1077)
!1077 = !{!276, !749, !614, !314, !314, !314, !314}
!1078 = !{!1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1089}
!1079 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "module", arg: 1, scope: !1075, file: !616, line: 2646, type: !749)
!1080 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "path", arg: 2, scope: !1075, file: !616, line: 2646, type: !614)
!1081 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "mode", arg: 3, scope: !1075, file: !616, line: 2646, type: !314)
!1082 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dir_fd", arg: 4, scope: !1075, file: !616, line: 2646, type: !314)
!1083 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "effective_ids", arg: 5, scope: !1075, file: !616, line: 2646, type: !314)
!1084 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "follow_symlinks", arg: 6, scope: !1075, file: !616, line: 2646, type: !314)
!1085 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1075, file: !616, line: 2649, type: !276)
!1086 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1075, file: !616, line: 2654, type: !314)
!1087 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1088, file: !616, line: 2690, type: !871)
!1088 = distinct !DILexicalBlock(scope: !1075, file: !616, line: 2690, column: 5)
!1089 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !1090, file: !616, line: 2695, type: !314)
!1090 = distinct !DILexicalBlock(scope: !1091, file: !616, line: 2694, column: 27)
!1091 = distinct !DILexicalBlock(scope: !1088, file: !616, line: 2692, column: 9)
!1092 = !DISubprogram(name: "os_ttyname", scope: !616, file: !616, line: 2758, type: !1093, isLocal: true, isDefinition: true, scopeLine: 2759, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyModuleDef*, %struct._object*)* @os_ttyname, variables: !1095)
!1093 = !DISubroutineType(types: !1094)
!1094 = !{!276, !749, !276}
!1095 = !{!1096, !1097, !1098, !1099, !1100}
!1096 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "module", arg: 1, scope: !1092, file: !616, line: 2758, type: !749)
!1097 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1092, file: !616, line: 2758, type: !276)
!1098 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1092, file: !616, line: 2760, type: !276)
!1099 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !1092, file: !616, line: 2761, type: !314)
!1100 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_return_value", scope: !1092, file: !616, line: 2762, type: !322)
!1101 = !DISubprogram(name: "os_ttyname_impl", scope: !616, file: !616, line: 2778, type: !1102, isLocal: true, isDefinition: true, scopeLine: 2780, flags: DIFlagPrototyped, isOptimized: true, function: i8* (%struct.PyModuleDef*, i32)* @os_ttyname_impl, variables: !1104)
!1102 = !DISubroutineType(types: !1103)
!1103 = !{!322, !749, !314}
!1104 = !{!1105, !1106, !1107}
!1105 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "module", arg: 1, scope: !1101, file: !616, line: 2778, type: !749)
!1106 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fd", arg: 2, scope: !1101, file: !616, line: 2778, type: !314)
!1107 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !1101, file: !616, line: 2781, type: !322)
!1108 = !DISubprogram(name: "posix_error", scope: !616, file: !616, line: 1267, type: !727, isLocal: true, isDefinition: true, scopeLine: 1268, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* ()* @posix_error, variables: !1109)
!1109 = !{}
!1110 = !DISubprogram(name: "posix_chdir", scope: !616, file: !616, line: 2823, type: !405, isLocal: true, isDefinition: true, scopeLine: 2824, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_chdir, variables: !1111)
!1111 = !{!1112, !1113, !1114, !1115, !1116, !1117, !1118}
!1112 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1110, file: !616, line: 2823, type: !276)
!1113 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1110, file: !616, line: 2823, type: !276)
!1114 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1110, file: !616, line: 2823, type: !276)
!1115 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1110, file: !616, line: 2825, type: !615)
!1116 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1110, file: !616, line: 2826, type: !314)
!1117 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1110, file: !616, line: 2827, type: !276)
!1118 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1119, file: !616, line: 2840, type: !871)
!1119 = distinct !DILexicalBlock(scope: !1110, file: !616, line: 2840, column: 5)
!1120 = !DISubprogram(name: "posix_chmod", scope: !616, file: !616, line: 2902, type: !405, isLocal: true, isDefinition: true, scopeLine: 2903, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_chmod, variables: !1121)
!1121 = !{!1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132}
!1122 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1120, file: !616, line: 2902, type: !276)
!1123 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1120, file: !616, line: 2902, type: !276)
!1124 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1120, file: !616, line: 2902, type: !276)
!1125 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1120, file: !616, line: 2904, type: !615)
!1126 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mode", scope: !1120, file: !616, line: 2905, type: !314)
!1127 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !1120, file: !616, line: 2906, type: !314)
!1128 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "follow_symlinks", scope: !1120, file: !616, line: 2907, type: !314)
!1129 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1120, file: !616, line: 2908, type: !314)
!1130 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1120, file: !616, line: 2909, type: !276)
!1131 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fchmodat_nofollow_unsupported", scope: !1120, file: !616, line: 2918, type: !314)
!1132 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1133, file: !616, line: 2967, type: !871)
!1133 = distinct !DILexicalBlock(scope: !1120, file: !616, line: 2967, column: 5)
!1134 = !DISubprogram(name: "posix_fchmod", scope: !616, file: !616, line: 3037, type: !396, isLocal: true, isDefinition: true, scopeLine: 3038, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_fchmod, variables: !1135)
!1135 = !{!1136, !1137, !1138, !1139, !1140, !1141}
!1136 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1134, file: !616, line: 3037, type: !276)
!1137 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1134, file: !616, line: 3037, type: !276)
!1138 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !1134, file: !616, line: 3039, type: !314)
!1139 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mode", scope: !1134, file: !616, line: 3039, type: !314)
!1140 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1134, file: !616, line: 3039, type: !314)
!1141 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1142, file: !616, line: 3042, type: !871)
!1142 = distinct !DILexicalBlock(scope: !1134, file: !616, line: 3042, column: 5)
!1143 = !DISubprogram(name: "posix_chown", scope: !616, file: !616, line: 3247, type: !405, isLocal: true, isDefinition: true, scopeLine: 3248, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_chown, variables: !1144)
!1144 = !{!1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155}
!1145 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1143, file: !616, line: 3247, type: !276)
!1146 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1143, file: !616, line: 3247, type: !276)
!1147 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1143, file: !616, line: 3247, type: !276)
!1148 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1143, file: !616, line: 3249, type: !615)
!1149 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "uid", scope: !1143, file: !616, line: 3250, type: !268)
!1150 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "gid", scope: !1143, file: !616, line: 3251, type: !273)
!1151 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !1143, file: !616, line: 3252, type: !314)
!1152 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "follow_symlinks", scope: !1143, file: !616, line: 3253, type: !314)
!1153 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1143, file: !616, line: 3254, type: !314)
!1154 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1143, file: !616, line: 3255, type: !276)
!1155 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1156, file: !616, line: 3297, type: !871)
!1156 = distinct !DILexicalBlock(scope: !1143, file: !616, line: 3297, column: 5)
!1157 = !DISubprogram(name: "posix_fchown", scope: !616, file: !616, line: 3338, type: !396, isLocal: true, isDefinition: true, scopeLine: 3339, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_fchown, variables: !1158)
!1158 = !{!1159, !1160, !1161, !1162, !1163, !1164, !1165}
!1159 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1157, file: !616, line: 3338, type: !276)
!1160 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1157, file: !616, line: 3338, type: !276)
!1161 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !1157, file: !616, line: 3340, type: !314)
!1162 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "uid", scope: !1157, file: !616, line: 3341, type: !268)
!1163 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "gid", scope: !1157, file: !616, line: 3342, type: !273)
!1164 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1157, file: !616, line: 3343, type: !314)
!1165 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1166, file: !616, line: 3348, type: !871)
!1166 = distinct !DILexicalBlock(scope: !1157, file: !616, line: 3348, column: 5)
!1167 = !DISubprogram(name: "posix_lchown", scope: !616, file: !616, line: 3365, type: !396, isLocal: true, isDefinition: true, scopeLine: 3366, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_lchown, variables: !1168)
!1168 = !{!1169, !1170, !1171, !1172, !1173, !1174, !1175}
!1169 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1167, file: !616, line: 3365, type: !276)
!1170 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1167, file: !616, line: 3365, type: !276)
!1171 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1167, file: !616, line: 3367, type: !615)
!1172 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "uid", scope: !1167, file: !616, line: 3368, type: !268)
!1173 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "gid", scope: !1167, file: !616, line: 3369, type: !273)
!1174 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1167, file: !616, line: 3370, type: !314)
!1175 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1176, file: !616, line: 3378, type: !871)
!1176 = distinct !DILexicalBlock(scope: !1167, file: !616, line: 3378, column: 5)
!1177 = !DISubprogram(name: "posix_chroot", scope: !616, file: !616, line: 3176, type: !396, isLocal: true, isDefinition: true, scopeLine: 3177, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_chroot, variables: !1178)
!1178 = !{!1179, !1180}
!1179 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1177, file: !616, line: 3176, type: !276)
!1180 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1177, file: !616, line: 3176, type: !276)
!1181 = !DISubprogram(name: "posix_1str", scope: !616, file: !616, line: 1351, type: !1182, isLocal: true, isDefinition: true, scopeLine: 1353, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (i8*, %struct._object*, i8*, i32 (i8*)*)* @posix_1str, variables: !1187)
!1182 = !DISubroutineType(types: !1183)
!1183 = !{!276, !299, !276, !322, !1184}
!1184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1185, size: 64, align: 64)
!1185 = !DISubroutineType(types: !1186)
!1186 = !{!314, !299}
!1187 = !{!1188, !1189, !1190, !1191, !1192, !1193, !1194}
!1188 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "func_name", arg: 1, scope: !1181, file: !616, line: 1351, type: !299)
!1189 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1181, file: !616, line: 1351, type: !276)
!1190 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "format", arg: 3, scope: !1181, file: !616, line: 1351, type: !322)
!1191 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "func", arg: 4, scope: !1181, file: !616, line: 1352, type: !1184)
!1192 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1181, file: !616, line: 1354, type: !615)
!1193 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1181, file: !616, line: 1355, type: !314)
!1194 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1195, file: !616, line: 1361, type: !871)
!1195 = distinct !DILexicalBlock(scope: !1181, file: !616, line: 1361, column: 5)
!1196 = !DISubprogram(name: "posix_ctermid", scope: !616, file: !616, line: 2798, type: !396, isLocal: true, isDefinition: true, scopeLine: 2799, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_ctermid, variables: !1197)
!1197 = !{!1198, !1199, !1200, !1201}
!1198 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1196, file: !616, line: 2798, type: !276)
!1199 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !1196, file: !616, line: 2798, type: !276)
!1200 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !1196, file: !616, line: 2800, type: !322)
!1201 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffer", scope: !1196, file: !616, line: 2801, type: !1202)
!1202 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 72, align: 8, elements: !1203)
!1203 = !{!1204}
!1204 = !DISubrange(count: 9)
!1205 = !DISubprogram(name: "posix_getcwd_unicode", scope: !616, file: !616, line: 3450, type: !386, isLocal: true, isDefinition: true, scopeLine: 3451, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @posix_getcwd_unicode, variables: !1206)
!1206 = !{!1207}
!1207 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1205, file: !616, line: 3450, type: !276)
!1208 = !DISubprogram(name: "posix_getcwd", scope: !616, file: !616, line: 3394, type: !1209, isLocal: true, isDefinition: true, scopeLine: 3395, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (i32)* @posix_getcwd, variables: !1211)
!1209 = !DISubroutineType(types: !1210)
!1210 = !{!276, !314}
!1211 = !{!1212, !1213, !1217, !1218}
!1212 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "use_bytes", arg: 1, scope: !1208, file: !616, line: 3394, type: !314)
!1213 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1208, file: !616, line: 3396, type: !1214)
!1214 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 8208, align: 8, elements: !1215)
!1215 = !{!1216}
!1216 = !DISubrange(count: 1026)
!1217 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1208, file: !616, line: 3397, type: !322)
!1218 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1219, file: !616, line: 3435, type: !871)
!1219 = distinct !DILexicalBlock(scope: !1208, file: !616, line: 3435, column: 5)
!1220 = !DISubprogram(name: "posix_getcwd_bytes", scope: !616, file: !616, line: 3460, type: !386, isLocal: true, isDefinition: true, scopeLine: 3461, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @posix_getcwd_bytes, variables: !1221)
!1221 = !{!1222}
!1222 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1220, file: !616, line: 3460, type: !276)
!1223 = !DISubprogram(name: "posix_link", scope: !616, file: !616, line: 3485, type: !405, isLocal: true, isDefinition: true, scopeLine: 3486, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_link, variables: !1224)
!1224 = !{!1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235}
!1225 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1223, file: !616, line: 3485, type: !276)
!1226 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1223, file: !616, line: 3485, type: !276)
!1227 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1223, file: !616, line: 3485, type: !276)
!1228 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "src", scope: !1223, file: !616, line: 3487, type: !615)
!1229 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dst", scope: !1223, file: !616, line: 3487, type: !615)
!1230 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "src_dir_fd", scope: !1223, file: !616, line: 3488, type: !314)
!1231 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dst_dir_fd", scope: !1223, file: !616, line: 3489, type: !314)
!1232 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "follow_symlinks", scope: !1223, file: !616, line: 3490, type: !314)
!1233 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1223, file: !616, line: 3491, type: !276)
!1234 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1223, file: !616, line: 3497, type: !314)
!1235 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1236, file: !616, line: 3538, type: !871)
!1236 = distinct !DILexicalBlock(scope: !1223, file: !616, line: 3538, column: 5)
!1237 = !DISubprogram(name: "path_error2", scope: !616, file: !616, line: 1317, type: !1238, isLocal: true, isDefinition: true, scopeLine: 1318, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.path_t*, %struct.path_t*)* @path_error2, variables: !1240)
!1238 = !DISubroutineType(types: !1239)
!1239 = !{!276, !614, !614}
!1240 = !{!1241, !1242}
!1241 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "path", arg: 1, scope: !1237, file: !616, line: 1317, type: !614)
!1242 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "path2", arg: 2, scope: !1237, file: !616, line: 1317, type: !614)
!1243 = !DISubprogram(name: "posix_listdir", scope: !616, file: !616, line: 3846, type: !405, isLocal: true, isDefinition: true, scopeLine: 3847, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_listdir, variables: !1244)
!1244 = !{!1245, !1246, !1247, !1248, !1249, !1250}
!1245 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1243, file: !616, line: 3846, type: !276)
!1246 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1243, file: !616, line: 3846, type: !276)
!1247 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1243, file: !616, line: 3846, type: !276)
!1248 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1243, file: !616, line: 3848, type: !615)
!1249 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "list", scope: !1243, file: !616, line: 3849, type: !276)
!1250 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1243, file: !616, line: 3851, type: !276)
!1251 = !DISubprogram(name: "_posix_listdir", scope: !616, file: !616, line: 3739, type: !1252, isLocal: true, isDefinition: true, scopeLine: 3740, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.path_t*, %struct._object*)* @_posix_listdir, variables: !1254)
!1252 = !DISubroutineType(types: !1253)
!1253 = !{!276, !614, !276}
!1254 = !{!1255, !1256, !1257, !1258, !1263, !1277, !1278, !1279, !1283, !1285, !1287, !1293, !1298, !1304, !1308, !1312, !1316, !1318, !1322, !1324}
!1255 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "path", arg: 1, scope: !1251, file: !616, line: 3739, type: !614)
!1256 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "list", arg: 2, scope: !1251, file: !616, line: 3739, type: !276)
!1257 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !1251, file: !616, line: 3741, type: !276)
!1258 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dirp", scope: !1251, file: !616, line: 3742, type: !1259)
!1259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1260, size: 64, align: 64)
!1260 = !DIDerivedType(tag: DW_TAG_typedef, name: "DIR", file: !1261, line: 128, baseType: !1262)
!1261 = !DIFile(filename: "/usr/include/dirent.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!1262 = !DICompositeType(tag: DW_TAG_structure_type, name: "__dirstream", file: !1261, line: 128, flags: DIFlagFwdDecl)
!1263 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ep", scope: !1251, file: !616, line: 3743, type: !1264)
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64, align: 64)
!1265 = !DICompositeType(tag: DW_TAG_structure_type, name: "dirent", file: !1266, line: 22, size: 2240, align: 64, elements: !1267)
!1266 = !DIFile(filename: "/usr/include/bits/dirent.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!1267 = !{!1268, !1269, !1270, !1271, !1273}
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !1265, file: !1266, line: 28, baseType: !957, size: 64, align: 64)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !1265, file: !1266, line: 29, baseType: !358, size: 64, align: 64, offset: 64)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !1265, file: !1266, line: 31, baseType: !347, size: 16, align: 16, offset: 128)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !1265, file: !1266, line: 32, baseType: !1272, size: 8, align: 8, offset: 144)
!1272 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !1265, file: !1266, line: 33, baseType: !1274, size: 2048, align: 8, offset: 152)
!1274 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2048, align: 8, elements: !1275)
!1275 = !{!1276}
!1276 = !DISubrange(count: 256)
!1277 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_str", scope: !1251, file: !616, line: 3744, type: !314)
!1278 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !1251, file: !616, line: 3746, type: !314)
!1279 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1280, file: !616, line: 3759, type: !871)
!1280 = distinct !DILexicalBlock(scope: !1281, file: !616, line: 3759, column: 9)
!1281 = distinct !DILexicalBlock(scope: !1282, file: !616, line: 3751, column: 25)
!1282 = distinct !DILexicalBlock(scope: !1251, file: !616, line: 3751, column: 9)
!1283 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "name", scope: !1284, file: !616, line: 3766, type: !322)
!1284 = distinct !DILexicalBlock(scope: !1282, file: !616, line: 3765, column: 5)
!1285 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1286, file: !616, line: 3777, type: !871)
!1286 = distinct !DILexicalBlock(scope: !1284, file: !616, line: 3777, column: 9)
!1287 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1288, file: !616, line: 3786, type: !871)
!1288 = distinct !DILexicalBlock(scope: !1289, file: !616, line: 3786, column: 13)
!1289 = distinct !DILexicalBlock(scope: !1290, file: !616, line: 3785, column: 23)
!1290 = distinct !DILexicalBlock(scope: !1291, file: !616, line: 3785, column: 13)
!1291 = distinct !DILexicalBlock(scope: !1292, file: !616, line: 3782, column: 29)
!1292 = distinct !DILexicalBlock(scope: !1251, file: !616, line: 3782, column: 9)
!1293 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1294, file: !616, line: 3798, type: !871)
!1294 = distinct !DILexicalBlock(scope: !1295, file: !616, line: 3798, column: 9)
!1295 = distinct !DILexicalBlock(scope: !1296, file: !616, line: 3796, column: 14)
!1296 = distinct !DILexicalBlock(scope: !1297, file: !616, line: 3796, column: 5)
!1297 = distinct !DILexicalBlock(scope: !1251, file: !616, line: 3796, column: 5)
!1298 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1299, file: !616, line: 3805, type: !276)
!1299 = distinct !DILexicalBlock(scope: !1300, file: !616, line: 3805, column: 20)
!1300 = distinct !DILexicalBlock(scope: !1301, file: !616, line: 3804, column: 20)
!1301 = distinct !DILexicalBlock(scope: !1302, file: !616, line: 3802, column: 17)
!1302 = distinct !DILexicalBlock(scope: !1303, file: !616, line: 3801, column: 31)
!1303 = distinct !DILexicalBlock(scope: !1295, file: !616, line: 3801, column: 13)
!1304 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_tmp", scope: !1305, file: !616, line: 3819, type: !276)
!1305 = distinct !DILexicalBlock(scope: !1306, file: !616, line: 3819, column: 16)
!1306 = distinct !DILexicalBlock(scope: !1307, file: !616, line: 3818, column: 30)
!1307 = distinct !DILexicalBlock(scope: !1295, file: !616, line: 3818, column: 13)
!1308 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1309, file: !616, line: 3819, type: !276)
!1309 = distinct !DILexicalBlock(scope: !1310, file: !616, line: 3819, column: 111)
!1310 = distinct !DILexicalBlock(scope: !1311, file: !616, line: 3819, column: 85)
!1311 = distinct !DILexicalBlock(scope: !1305, file: !616, line: 3819, column: 62)
!1312 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1313, file: !616, line: 3823, type: !276)
!1313 = distinct !DILexicalBlock(scope: !1314, file: !616, line: 3823, column: 16)
!1314 = distinct !DILexicalBlock(scope: !1315, file: !616, line: 3822, column: 42)
!1315 = distinct !DILexicalBlock(scope: !1295, file: !616, line: 3822, column: 13)
!1316 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_tmp", scope: !1317, file: !616, line: 3824, type: !276)
!1317 = distinct !DILexicalBlock(scope: !1314, file: !616, line: 3824, column: 16)
!1318 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1319, file: !616, line: 3824, type: !276)
!1319 = distinct !DILexicalBlock(scope: !1320, file: !616, line: 3824, column: 111)
!1320 = distinct !DILexicalBlock(scope: !1321, file: !616, line: 3824, column: 85)
!1321 = distinct !DILexicalBlock(scope: !1317, file: !616, line: 3824, column: 62)
!1322 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1323, file: !616, line: 3827, type: !276)
!1323 = distinct !DILexicalBlock(scope: !1295, file: !616, line: 3827, column: 12)
!1324 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1325, file: !616, line: 3832, type: !871)
!1325 = distinct !DILexicalBlock(scope: !1326, file: !616, line: 3832, column: 9)
!1326 = distinct !DILexicalBlock(scope: !1327, file: !616, line: 3831, column: 29)
!1327 = distinct !DILexicalBlock(scope: !1251, file: !616, line: 3831, column: 9)
!1328 = !DISubprogram(name: "posix_lstat", scope: !616, file: !616, line: 2514, type: !405, isLocal: true, isDefinition: true, scopeLine: 2515, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_lstat, variables: !1329)
!1329 = !{!1330, !1331, !1332, !1333, !1334, !1335, !1336}
!1330 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1328, file: !616, line: 2514, type: !276)
!1331 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1328, file: !616, line: 2514, type: !276)
!1332 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1328, file: !616, line: 2514, type: !276)
!1333 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1328, file: !616, line: 2517, type: !615)
!1334 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !1328, file: !616, line: 2518, type: !314)
!1335 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "follow_symlinks", scope: !1328, file: !616, line: 2519, type: !314)
!1336 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1328, file: !616, line: 2520, type: !276)
!1337 = !DISubprogram(name: "posix_mkdir", scope: !616, file: !616, line: 4100, type: !405, isLocal: true, isDefinition: true, scopeLine: 4101, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_mkdir, variables: !1338)
!1338 = !{!1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347}
!1339 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1337, file: !616, line: 4100, type: !276)
!1340 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1337, file: !616, line: 4100, type: !276)
!1341 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1337, file: !616, line: 4100, type: !276)
!1342 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1337, file: !616, line: 4102, type: !615)
!1343 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mode", scope: !1337, file: !616, line: 4103, type: !314)
!1344 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !1337, file: !616, line: 4104, type: !314)
!1345 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1337, file: !616, line: 4106, type: !276)
!1346 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1337, file: !616, line: 4107, type: !314)
!1347 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1348, file: !616, line: 4134, type: !871)
!1348 = distinct !DILexicalBlock(scope: !1337, file: !616, line: 4134, column: 5)
!1349 = !DISubprogram(name: "posix_nice", scope: !616, file: !616, line: 4171, type: !396, isLocal: true, isDefinition: true, scopeLine: 4172, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_nice, variables: !1350)
!1350 = !{!1351, !1352, !1353, !1354}
!1351 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1349, file: !616, line: 4171, type: !276)
!1352 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1349, file: !616, line: 4171, type: !276)
!1353 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "increment", scope: !1349, file: !616, line: 4173, type: !314)
!1354 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "value", scope: !1349, file: !616, line: 4173, type: !314)
!1355 = !DISubprogram(name: "posix_getpriority", scope: !616, file: !616, line: 4208, type: !396, isLocal: true, isDefinition: true, scopeLine: 4209, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getpriority, variables: !1356)
!1356 = !{!1357, !1358, !1359, !1360, !1361}
!1357 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1355, file: !616, line: 4208, type: !276)
!1358 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1355, file: !616, line: 4208, type: !276)
!1359 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "which", scope: !1355, file: !616, line: 4210, type: !314)
!1360 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "who", scope: !1355, file: !616, line: 4210, type: !314)
!1361 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1355, file: !616, line: 4210, type: !314)
!1362 = !DISubprogram(name: "posix_setpriority", scope: !616, file: !616, line: 4229, type: !396, isLocal: true, isDefinition: true, scopeLine: 4230, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_setpriority, variables: !1363)
!1363 = !{!1364, !1365, !1366, !1367, !1368, !1369}
!1364 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1362, file: !616, line: 4229, type: !276)
!1365 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1362, file: !616, line: 4229, type: !276)
!1366 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "which", scope: !1362, file: !616, line: 4231, type: !314)
!1367 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "who", scope: !1362, file: !616, line: 4231, type: !314)
!1368 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "prio", scope: !1362, file: !616, line: 4231, type: !314)
!1369 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1362, file: !616, line: 4231, type: !314)
!1370 = !DISubprogram(name: "posix_readlink", scope: !616, file: !616, line: 7079, type: !405, isLocal: true, isDefinition: true, scopeLine: 7080, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_readlink, variables: !1371)
!1371 = !{!1372, !1373, !1374, !1375, !1376, !1377, !1381, !1382, !1383}
!1372 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1370, file: !616, line: 7079, type: !276)
!1373 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1370, file: !616, line: 7079, type: !276)
!1374 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1370, file: !616, line: 7079, type: !276)
!1375 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1370, file: !616, line: 7081, type: !615)
!1376 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !1370, file: !616, line: 7082, type: !314)
!1377 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffer", scope: !1370, file: !616, line: 7083, type: !1378)
!1378 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 32768, align: 8, elements: !1379)
!1379 = !{!1380}
!1380 = !DISubrange(count: 4096)
!1381 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "length", scope: !1370, file: !616, line: 7084, type: !284)
!1382 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1370, file: !616, line: 7085, type: !276)
!1383 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1384, file: !616, line: 7100, type: !871)
!1384 = distinct !DILexicalBlock(scope: !1370, file: !616, line: 7100, column: 5)
!1385 = !DISubprogram(name: "posix_rename", scope: !616, file: !616, line: 4339, type: !405, isLocal: true, isDefinition: true, scopeLine: 4340, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_rename, variables: !1386)
!1386 = !{!1387, !1388, !1389}
!1387 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1385, file: !616, line: 4339, type: !276)
!1388 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1385, file: !616, line: 4339, type: !276)
!1389 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1385, file: !616, line: 4339, type: !276)
!1390 = !DISubprogram(name: "internal_rename", scope: !616, file: !616, line: 4244, type: !541, isLocal: true, isDefinition: true, scopeLine: 4245, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, i32)* @internal_rename, variables: !1391)
!1391 = !{!1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1406, !1407}
!1392 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 1, scope: !1390, file: !616, line: 4244, type: !276)
!1393 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 2, scope: !1390, file: !616, line: 4244, type: !276)
!1394 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "is_replace", arg: 3, scope: !1390, file: !616, line: 4244, type: !314)
!1395 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "function_name", scope: !1390, file: !616, line: 4246, type: !322)
!1396 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "src", scope: !1390, file: !616, line: 4247, type: !615)
!1397 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dst", scope: !1390, file: !616, line: 4248, type: !615)
!1398 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "src_dir_fd", scope: !1390, file: !616, line: 4249, type: !314)
!1399 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dst_dir_fd", scope: !1390, file: !616, line: 4250, type: !314)
!1400 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd_specified", scope: !1390, file: !616, line: 4251, type: !314)
!1401 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1390, file: !616, line: 4252, type: !276)
!1402 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "format", scope: !1390, file: !616, line: 4253, type: !1403)
!1403 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 192, align: 8, elements: !1404)
!1404 = !{!1405}
!1405 = !DISubrange(count: 24)
!1406 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1390, file: !616, line: 4260, type: !314)
!1407 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1408, file: !616, line: 4305, type: !871)
!1408 = distinct !DILexicalBlock(scope: !1390, file: !616, line: 4305, column: 5)
!1409 = !DISubprogram(name: "posix_replace", scope: !616, file: !616, line: 4355, type: !405, isLocal: true, isDefinition: true, scopeLine: 4356, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_replace, variables: !1410)
!1410 = !{!1411, !1412, !1413}
!1411 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1409, file: !616, line: 4355, type: !276)
!1412 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1409, file: !616, line: 4355, type: !276)
!1413 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1409, file: !616, line: 4355, type: !276)
!1414 = !DISubprogram(name: "posix_rmdir", scope: !616, file: !616, line: 4370, type: !405, isLocal: true, isDefinition: true, scopeLine: 4371, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_rmdir, variables: !1415)
!1415 = !{!1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423}
!1416 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1414, file: !616, line: 4370, type: !276)
!1417 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1414, file: !616, line: 4370, type: !276)
!1418 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1414, file: !616, line: 4370, type: !276)
!1419 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1414, file: !616, line: 4372, type: !615)
!1420 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !1414, file: !616, line: 4373, type: !314)
!1421 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1414, file: !616, line: 4375, type: !314)
!1422 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1414, file: !616, line: 4376, type: !276)
!1423 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1424, file: !616, line: 4390, type: !871)
!1424 = distinct !DILexicalBlock(scope: !1414, file: !616, line: 4390, column: 5)
!1425 = !DISubprogram(name: "stat_float_times", scope: !616, file: !616, line: 2139, type: !396, isLocal: true, isDefinition: true, scopeLine: 2140, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @stat_float_times, variables: !1426)
!1426 = !{!1427, !1428, !1429}
!1427 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1425, file: !616, line: 2139, type: !276)
!1428 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1425, file: !616, line: 2139, type: !276)
!1429 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newval", scope: !1425, file: !616, line: 2141, type: !314)
!1430 = !DISubprogram(name: "posix_symlink", scope: !616, file: !616, line: 7289, type: !405, isLocal: true, isDefinition: true, scopeLine: 7290, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_symlink, variables: !1431)
!1431 = !{!1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441}
!1432 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1430, file: !616, line: 7289, type: !276)
!1433 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1430, file: !616, line: 7289, type: !276)
!1434 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1430, file: !616, line: 7289, type: !276)
!1435 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "src", scope: !1430, file: !616, line: 7291, type: !615)
!1436 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dst", scope: !1430, file: !616, line: 7292, type: !615)
!1437 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !1430, file: !616, line: 7293, type: !314)
!1438 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "target_is_directory", scope: !1430, file: !616, line: 7294, type: !314)
!1439 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1430, file: !616, line: 7297, type: !276)
!1440 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1430, file: !616, line: 7301, type: !314)
!1441 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1442, file: !616, line: 7367, type: !871)
!1442 = distinct !DILexicalBlock(scope: !1430, file: !616, line: 7367, column: 5)
!1443 = !DISubprogram(name: "posix_system", scope: !616, file: !616, line: 4427, type: !396, isLocal: true, isDefinition: true, scopeLine: 4428, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_system, variables: !1444)
!1444 = !{!1445, !1446, !1447, !1448, !1449, !1450, !1452}
!1445 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1443, file: !616, line: 4427, type: !276)
!1446 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1443, file: !616, line: 4427, type: !276)
!1447 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sts", scope: !1443, file: !616, line: 4429, type: !287)
!1448 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "command_obj", scope: !1443, file: !616, line: 4439, type: !276)
!1449 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "command", scope: !1443, file: !616, line: 4440, type: !322)
!1450 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1451, file: !616, line: 4446, type: !871)
!1451 = distinct !DILexicalBlock(scope: !1443, file: !616, line: 4446, column: 5)
!1452 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1453, file: !616, line: 4449, type: !276)
!1453 = distinct !DILexicalBlock(scope: !1443, file: !616, line: 4449, column: 8)
!1454 = !DISubprogram(name: "posix_umask", scope: !616, file: !616, line: 4461, type: !396, isLocal: true, isDefinition: true, scopeLine: 4462, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_umask, variables: !1455)
!1455 = !{!1456, !1457, !1458}
!1456 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1454, file: !616, line: 4461, type: !276)
!1457 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1454, file: !616, line: 4461, type: !276)
!1458 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1454, file: !616, line: 4463, type: !314)
!1459 = !DISubprogram(name: "posix_uname", scope: !616, file: !616, line: 4613, type: !396, isLocal: true, isDefinition: true, scopeLine: 4614, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_uname, variables: !1460)
!1460 = !{!1461, !1462, !1463, !1476, !1477, !1478, !1480, !1482, !1486, !1488, !1492, !1494, !1498, !1500, !1504, !1506}
!1461 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1459, file: !616, line: 4613, type: !276)
!1462 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !1459, file: !616, line: 4613, type: !276)
!1463 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "u", scope: !1459, file: !616, line: 4615, type: !1464)
!1464 = !DICompositeType(tag: DW_TAG_structure_type, name: "utsname", file: !1465, line: 48, size: 3120, align: 8, elements: !1466)
!1465 = !DIFile(filename: "/usr/include/sys/utsname.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!1466 = !{!1467, !1471, !1472, !1473, !1474, !1475}
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "sysname", scope: !1464, file: !1465, line: 51, baseType: !1468, size: 520, align: 8)
!1468 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 520, align: 8, elements: !1469)
!1469 = !{!1470}
!1470 = !DISubrange(count: 65)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "nodename", scope: !1464, file: !1465, line: 54, baseType: !1468, size: 520, align: 8, offset: 520)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !1464, file: !1465, line: 57, baseType: !1468, size: 520, align: 8, offset: 1040)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1464, file: !1465, line: 59, baseType: !1468, size: 520, align: 8, offset: 1560)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1464, file: !1465, line: 62, baseType: !1468, size: 520, align: 8, offset: 2080)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "domainname", scope: !1464, file: !1465, line: 67, baseType: !1468, size: 520, align: 8, offset: 2600)
!1476 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1459, file: !616, line: 4616, type: !314)
!1477 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "value", scope: !1459, file: !616, line: 4617, type: !276)
!1478 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1479, file: !616, line: 4619, type: !871)
!1479 = distinct !DILexicalBlock(scope: !1459, file: !616, line: 4619, column: 5)
!1480 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "o", scope: !1481, file: !616, line: 4639, type: !276)
!1481 = distinct !DILexicalBlock(scope: !1459, file: !616, line: 4639, column: 5)
!1482 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1483, file: !616, line: 4639, type: !276)
!1483 = distinct !DILexicalBlock(scope: !1484, file: !616, line: 4639, column: 72)
!1484 = distinct !DILexicalBlock(scope: !1485, file: !616, line: 4639, column: 67)
!1485 = distinct !DILexicalBlock(scope: !1481, file: !616, line: 4639, column: 63)
!1486 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "o", scope: !1487, file: !616, line: 4640, type: !276)
!1487 = distinct !DILexicalBlock(scope: !1459, file: !616, line: 4640, column: 5)
!1488 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1489, file: !616, line: 4640, type: !276)
!1489 = distinct !DILexicalBlock(scope: !1490, file: !616, line: 4640, column: 73)
!1490 = distinct !DILexicalBlock(scope: !1491, file: !616, line: 4640, column: 68)
!1491 = distinct !DILexicalBlock(scope: !1487, file: !616, line: 4640, column: 64)
!1492 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "o", scope: !1493, file: !616, line: 4641, type: !276)
!1493 = distinct !DILexicalBlock(scope: !1459, file: !616, line: 4641, column: 5)
!1494 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1495, file: !616, line: 4641, type: !276)
!1495 = distinct !DILexicalBlock(scope: !1496, file: !616, line: 4641, column: 72)
!1496 = distinct !DILexicalBlock(scope: !1497, file: !616, line: 4641, column: 67)
!1497 = distinct !DILexicalBlock(scope: !1493, file: !616, line: 4641, column: 63)
!1498 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "o", scope: !1499, file: !616, line: 4642, type: !276)
!1499 = distinct !DILexicalBlock(scope: !1459, file: !616, line: 4642, column: 5)
!1500 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1501, file: !616, line: 4642, type: !276)
!1501 = distinct !DILexicalBlock(scope: !1502, file: !616, line: 4642, column: 72)
!1502 = distinct !DILexicalBlock(scope: !1503, file: !616, line: 4642, column: 67)
!1503 = distinct !DILexicalBlock(scope: !1499, file: !616, line: 4642, column: 63)
!1504 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "o", scope: !1505, file: !616, line: 4643, type: !276)
!1505 = distinct !DILexicalBlock(scope: !1459, file: !616, line: 4643, column: 5)
!1506 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1507, file: !616, line: 4643, type: !276)
!1507 = distinct !DILexicalBlock(scope: !1508, file: !616, line: 4643, column: 72)
!1508 = distinct !DILexicalBlock(scope: !1509, file: !616, line: 4643, column: 67)
!1509 = distinct !DILexicalBlock(scope: !1505, file: !616, line: 4643, column: 63)
!1510 = !DISubprogram(name: "posix_unlink", scope: !616, file: !616, line: 4527, type: !405, isLocal: true, isDefinition: true, scopeLine: 4528, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_unlink, variables: !1511)
!1511 = !{!1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519}
!1512 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1510, file: !616, line: 4527, type: !276)
!1513 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1510, file: !616, line: 4527, type: !276)
!1514 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1510, file: !616, line: 4527, type: !276)
!1515 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1510, file: !616, line: 4529, type: !615)
!1516 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !1510, file: !616, line: 4530, type: !314)
!1517 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1510, file: !616, line: 4532, type: !314)
!1518 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1510, file: !616, line: 4533, type: !276)
!1519 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1520, file: !616, line: 4547, type: !871)
!1520 = distinct !DILexicalBlock(scope: !1510, file: !616, line: 4547, column: 5)
!1521 = !DISubprogram(name: "posix_utime", scope: !616, file: !616, line: 4846, type: !405, isLocal: true, isDefinition: true, scopeLine: 4847, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_utime, variables: !1522)
!1522 = !{!1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1535, !1544, !1545, !1546, !1549, !1550, !1551, !1552}
!1523 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1521, file: !616, line: 4846, type: !276)
!1524 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1521, file: !616, line: 4846, type: !276)
!1525 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1521, file: !616, line: 4846, type: !276)
!1526 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1521, file: !616, line: 4848, type: !615)
!1527 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "times", scope: !1521, file: !616, line: 4849, type: !276)
!1528 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ns", scope: !1521, file: !616, line: 4850, type: !276)
!1529 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !1521, file: !616, line: 4851, type: !314)
!1530 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "follow_symlinks", scope: !1521, file: !616, line: 4852, type: !314)
!1531 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "keywords", scope: !1521, file: !616, line: 4853, type: !1532)
!1532 = !DICompositeType(tag: DW_TAG_array_type, baseType: !322, size: 384, align: 64, elements: !1533)
!1533 = !{!1534}
!1534 = !DISubrange(count: 6)
!1535 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "utime", scope: !1521, file: !616, line: 4856, type: !1536)
!1536 = !DIDerivedType(tag: DW_TAG_typedef, name: "utime_t", file: !616, line: 4684, baseType: !1537)
!1537 = !DICompositeType(tag: DW_TAG_structure_type, file: !616, line: 4678, size: 320, align: 64, elements: !1538)
!1538 = !{!1539, !1540, !1541, !1542, !1543}
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "now", scope: !1537, file: !616, line: 4679, baseType: !314, size: 32, align: 32)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "atime_s", scope: !1537, file: !616, line: 4680, baseType: !1015, size: 64, align: 64, offset: 64)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "atime_ns", scope: !1537, file: !616, line: 4681, baseType: !287, size: 64, align: 64, offset: 128)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "mtime_s", scope: !1537, file: !616, line: 4682, baseType: !1015, size: 64, align: 64, offset: 192)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "mtime_ns", scope: !1537, file: !616, line: 4683, baseType: !287, size: 64, align: 64, offset: 256)
!1544 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1521, file: !616, line: 4862, type: !314)
!1545 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !1521, file: !616, line: 4865, type: !276)
!1546 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a_sec", scope: !1547, file: !616, line: 4894, type: !1015)
!1547 = distinct !DILexicalBlock(scope: !1548, file: !616, line: 4893, column: 48)
!1548 = distinct !DILexicalBlock(scope: !1521, file: !616, line: 4893, column: 9)
!1549 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m_sec", scope: !1547, file: !616, line: 4894, type: !1015)
!1550 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a_nsec", scope: !1547, file: !616, line: 4895, type: !287)
!1551 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m_nsec", scope: !1547, file: !616, line: 4895, type: !287)
!1552 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1553, file: !616, line: 4985, type: !871)
!1553 = distinct !DILexicalBlock(scope: !1521, file: !616, line: 4985, column: 5)
!1554 = !DISubprogram(name: "split_py_long_to_s_and_ns", scope: !616, file: !616, line: 4825, type: !1555, isLocal: true, isDefinition: true, scopeLine: 4826, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i64*, i64*)* @split_py_long_to_s_and_ns, variables: !1559)
!1555 = !DISubroutineType(types: !1556)
!1556 = !{!314, !276, !1557, !1558}
!1557 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1015, size: 64, align: 64)
!1558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !287, size: 64, align: 64)
!1559 = !{!1560, !1561, !1562, !1563, !1564, !1565, !1567}
!1560 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "py_long", arg: 1, scope: !1554, file: !616, line: 4825, type: !276)
!1561 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 2, scope: !1554, file: !616, line: 4825, type: !1557)
!1562 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "ns", arg: 3, scope: !1554, file: !616, line: 4825, type: !1558)
!1563 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1554, file: !616, line: 4827, type: !314)
!1564 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "divmod", scope: !1554, file: !616, line: 4828, type: !276)
!1565 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1566, file: !616, line: 4841, type: !276)
!1566 = distinct !DILexicalBlock(scope: !1554, file: !616, line: 4841, column: 8)
!1567 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1568, file: !616, line: 4841, type: !276)
!1568 = distinct !DILexicalBlock(scope: !1569, file: !616, line: 4841, column: 98)
!1569 = distinct !DILexicalBlock(scope: !1566, file: !616, line: 4841, column: 64)
!1570 = !DISubprogram(name: "utime_nofollow_symlinks", scope: !616, file: !616, line: 4789, type: !1571, isLocal: true, isDefinition: true, scopeLine: 4790, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.utime_t*, i8*)* @utime_nofollow_symlinks, variables: !1574)
!1571 = !DISubroutineType(types: !1572)
!1572 = !{!314, !1573, !322}
!1573 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1536, size: 64, align: 64)
!1574 = !{!1575, !1576, !1577, !1581}
!1575 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "utime", arg: 1, scope: !1570, file: !616, line: 4789, type: !1573)
!1576 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "path", arg: 2, scope: !1570, file: !616, line: 4789, type: !322)
!1577 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ts", scope: !1570, file: !616, line: 4792, type: !1578)
!1578 = !DICompositeType(tag: DW_TAG_array_type, baseType: !856, size: 256, align: 64, elements: !1579)
!1579 = !{!1580}
!1580 = !DISubrange(count: 2)
!1581 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "time", scope: !1570, file: !616, line: 4792, type: !1582)
!1582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !856, size: 64, align: 64)
!1583 = !DISubprogram(name: "utime_dir_fd", scope: !616, file: !616, line: 4744, type: !1584, isLocal: true, isDefinition: true, scopeLine: 4745, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.utime_t*, i32, i8*, i32)* @utime_dir_fd, variables: !1586)
!1584 = !DISubroutineType(types: !1585)
!1585 = !{!314, !1573, !314, !322, !314}
!1586 = !{!1587, !1588, !1589, !1590, !1591, !1592, !1593}
!1587 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "utime", arg: 1, scope: !1583, file: !616, line: 4744, type: !1573)
!1588 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dir_fd", arg: 2, scope: !1583, file: !616, line: 4744, type: !314)
!1589 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "path", arg: 3, scope: !1583, file: !616, line: 4744, type: !322)
!1590 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "follow_symlinks", arg: 4, scope: !1583, file: !616, line: 4744, type: !314)
!1591 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !1583, file: !616, line: 4747, type: !314)
!1592 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ts", scope: !1583, file: !616, line: 4748, type: !1578)
!1593 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "time", scope: !1583, file: !616, line: 4748, type: !1582)
!1594 = !DISubprogram(name: "utime_fd", scope: !616, file: !616, line: 4769, type: !1595, isLocal: true, isDefinition: true, scopeLine: 4770, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.utime_t*, i32)* @utime_fd, variables: !1597)
!1595 = !DISubroutineType(types: !1596)
!1596 = !{!314, !1573, !314}
!1597 = !{!1598, !1599, !1600, !1601}
!1598 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "utime", arg: 1, scope: !1594, file: !616, line: 4769, type: !1573)
!1599 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fd", arg: 2, scope: !1594, file: !616, line: 4769, type: !314)
!1600 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ts", scope: !1594, file: !616, line: 4772, type: !1578)
!1601 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "time", scope: !1594, file: !616, line: 4772, type: !1582)
!1602 = !DISubprogram(name: "utime_default", scope: !616, file: !616, line: 4805, type: !1571, isLocal: true, isDefinition: true, scopeLine: 4806, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.utime_t*, i8*)* @utime_default, variables: !1603)
!1603 = !{!1604, !1605, !1606, !1607}
!1604 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "utime", arg: 1, scope: !1602, file: !616, line: 4805, type: !1573)
!1605 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "path", arg: 2, scope: !1602, file: !616, line: 4805, type: !322)
!1606 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ts", scope: !1602, file: !616, line: 4808, type: !1578)
!1607 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "time", scope: !1602, file: !616, line: 4808, type: !1582)
!1608 = !DISubprogram(name: "posix_times", scope: !616, file: !616, line: 7565, type: !396, isLocal: true, isDefinition: true, scopeLine: 7566, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_times, variables: !1609)
!1609 = !{!1610, !1611, !1612, !1620}
!1610 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1608, file: !616, line: 7565, type: !276)
!1611 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !1608, file: !616, line: 7565, type: !276)
!1612 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t", scope: !1608, file: !616, line: 7567, type: !1613)
!1613 = !DICompositeType(tag: DW_TAG_structure_type, name: "tms", file: !1614, line: 34, size: 256, align: 64, elements: !1615)
!1614 = !DIFile(filename: "/usr/include/sys/times.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!1615 = !{!1616, !1617, !1618, !1619}
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "tms_utime", scope: !1613, file: !1614, line: 36, baseType: !649, size: 64, align: 64)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "tms_stime", scope: !1613, file: !1614, line: 37, baseType: !649, size: 64, align: 64, offset: 64)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "tms_cutime", scope: !1613, file: !1614, line: 39, baseType: !649, size: 64, align: 64, offset: 128)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "tms_cstime", scope: !1613, file: !1614, line: 40, baseType: !649, size: 64, align: 64, offset: 192)
!1620 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c", scope: !1608, file: !616, line: 7568, type: !649)
!1621 = !DISubprogram(name: "build_times_result", scope: !616, file: !616, line: 7504, type: !1622, isLocal: true, isDefinition: true, scopeLine: 7507, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (double, double, double, double, double)* @build_times_result, variables: !1624)
!1622 = !DISubroutineType(types: !1623)
!1623 = !{!276, !652, !652, !652, !652, !652}
!1624 = !{!1625, !1626, !1627, !1628, !1629, !1630, !1631, !1633, !1637, !1639, !1643, !1645, !1649, !1651, !1655, !1657}
!1625 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "user", arg: 1, scope: !1621, file: !616, line: 7504, type: !652)
!1626 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "system", arg: 2, scope: !1621, file: !616, line: 7504, type: !652)
!1627 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "children_user", arg: 3, scope: !1621, file: !616, line: 7505, type: !652)
!1628 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "children_system", arg: 4, scope: !1621, file: !616, line: 7505, type: !652)
!1629 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "elapsed", arg: 5, scope: !1621, file: !616, line: 7506, type: !652)
!1630 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "value", scope: !1621, file: !616, line: 7508, type: !276)
!1631 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "o", scope: !1632, file: !616, line: 7522, type: !276)
!1632 = distinct !DILexicalBlock(scope: !1621, file: !616, line: 7522, column: 5)
!1633 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1634, file: !616, line: 7522, type: !276)
!1634 = distinct !DILexicalBlock(scope: !1635, file: !616, line: 7522, column: 60)
!1635 = distinct !DILexicalBlock(scope: !1636, file: !616, line: 7522, column: 55)
!1636 = distinct !DILexicalBlock(scope: !1632, file: !616, line: 7522, column: 51)
!1637 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "o", scope: !1638, file: !616, line: 7523, type: !276)
!1638 = distinct !DILexicalBlock(scope: !1621, file: !616, line: 7523, column: 5)
!1639 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1640, file: !616, line: 7523, type: !276)
!1640 = distinct !DILexicalBlock(scope: !1641, file: !616, line: 7523, column: 62)
!1641 = distinct !DILexicalBlock(scope: !1642, file: !616, line: 7523, column: 57)
!1642 = distinct !DILexicalBlock(scope: !1638, file: !616, line: 7523, column: 53)
!1643 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "o", scope: !1644, file: !616, line: 7524, type: !276)
!1644 = distinct !DILexicalBlock(scope: !1621, file: !616, line: 7524, column: 5)
!1645 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1646, file: !616, line: 7524, type: !276)
!1646 = distinct !DILexicalBlock(scope: !1647, file: !616, line: 7524, column: 69)
!1647 = distinct !DILexicalBlock(scope: !1648, file: !616, line: 7524, column: 64)
!1648 = distinct !DILexicalBlock(scope: !1644, file: !616, line: 7524, column: 60)
!1649 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "o", scope: !1650, file: !616, line: 7525, type: !276)
!1650 = distinct !DILexicalBlock(scope: !1621, file: !616, line: 7525, column: 5)
!1651 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1652, file: !616, line: 7525, type: !276)
!1652 = distinct !DILexicalBlock(scope: !1653, file: !616, line: 7525, column: 71)
!1653 = distinct !DILexicalBlock(scope: !1654, file: !616, line: 7525, column: 66)
!1654 = distinct !DILexicalBlock(scope: !1650, file: !616, line: 7525, column: 62)
!1655 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "o", scope: !1656, file: !616, line: 7526, type: !276)
!1656 = distinct !DILexicalBlock(scope: !1621, file: !616, line: 7526, column: 5)
!1657 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1658, file: !616, line: 7526, type: !276)
!1658 = distinct !DILexicalBlock(scope: !1659, file: !616, line: 7526, column: 63)
!1659 = distinct !DILexicalBlock(scope: !1660, file: !616, line: 7526, column: 58)
!1660 = distinct !DILexicalBlock(scope: !1656, file: !616, line: 7526, column: 54)
!1661 = !DISubprogram(name: "posix__exit", scope: !616, file: !616, line: 5036, type: !396, isLocal: true, isDefinition: true, scopeLine: 5037, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix__exit, variables: !1662)
!1662 = !{!1663, !1664, !1665}
!1663 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1661, file: !616, line: 5036, type: !276)
!1664 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1661, file: !616, line: 5036, type: !276)
!1665 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sts", scope: !1661, file: !616, line: 5038, type: !314)
!1666 = !DISubprogram(name: "posix_execv", scope: !616, file: !616, line: 5188, type: !396, isLocal: true, isDefinition: true, scopeLine: 5189, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_execv, variables: !1667)
!1667 = !{!1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1679, !1683, !1687}
!1668 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1666, file: !616, line: 5188, type: !276)
!1669 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1666, file: !616, line: 5188, type: !276)
!1670 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "opath", scope: !1666, file: !616, line: 5190, type: !276)
!1671 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1666, file: !616, line: 5191, type: !322)
!1672 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argv", scope: !1666, file: !616, line: 5192, type: !276)
!1673 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argvlist", scope: !1666, file: !616, line: 5193, type: !653)
!1674 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argc", scope: !1666, file: !616, line: 5194, type: !282)
!1675 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1676, file: !616, line: 5207, type: !276)
!1676 = distinct !DILexicalBlock(scope: !1677, file: !616, line: 5207, column: 12)
!1677 = distinct !DILexicalBlock(scope: !1678, file: !616, line: 5204, column: 151)
!1678 = distinct !DILexicalBlock(scope: !1666, file: !616, line: 5204, column: 9)
!1679 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1680, file: !616, line: 5213, type: !276)
!1680 = distinct !DILexicalBlock(scope: !1681, file: !616, line: 5213, column: 12)
!1681 = distinct !DILexicalBlock(scope: !1682, file: !616, line: 5211, column: 19)
!1682 = distinct !DILexicalBlock(scope: !1666, file: !616, line: 5211, column: 9)
!1683 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1684, file: !616, line: 5219, type: !276)
!1684 = distinct !DILexicalBlock(scope: !1685, file: !616, line: 5219, column: 12)
!1685 = distinct !DILexicalBlock(scope: !1686, file: !616, line: 5218, column: 33)
!1686 = distinct !DILexicalBlock(scope: !1666, file: !616, line: 5218, column: 9)
!1687 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1688, file: !616, line: 5228, type: !276)
!1688 = distinct !DILexicalBlock(scope: !1666, file: !616, line: 5228, column: 8)
!1689 = !DISubprogram(name: "parse_arglist", scope: !616, file: !616, line: 5152, type: !1690, isLocal: true, isDefinition: true, scopeLine: 5153, flags: DIFlagPrototyped, isOptimized: true, function: i8** (%struct._object*, i64*)* @parse_arglist, variables: !1692)
!1690 = !DISubroutineType(types: !1691)
!1691 = !{!653, !276, !517}
!1692 = !{!1693, !1694, !1695, !1696, !1697, !1701, !1705}
!1693 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 1, scope: !1689, file: !616, line: 5152, type: !276)
!1694 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 2, scope: !1689, file: !616, line: 5152, type: !517)
!1695 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1689, file: !616, line: 5154, type: !314)
!1696 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argvlist", scope: !1689, file: !616, line: 5155, type: !653)
!1697 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !1698, file: !616, line: 5161, type: !276)
!1698 = distinct !DILexicalBlock(scope: !1699, file: !616, line: 5160, column: 33)
!1699 = distinct !DILexicalBlock(scope: !1700, file: !616, line: 5160, column: 5)
!1700 = distinct !DILexicalBlock(scope: !1689, file: !616, line: 5160, column: 5)
!1701 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1702, file: !616, line: 5165, type: !276)
!1702 = distinct !DILexicalBlock(scope: !1703, file: !616, line: 5165, column: 16)
!1703 = distinct !DILexicalBlock(scope: !1704, file: !616, line: 5164, column: 52)
!1704 = distinct !DILexicalBlock(scope: !1698, file: !616, line: 5164, column: 13)
!1705 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1706, file: !616, line: 5168, type: !276)
!1706 = distinct !DILexicalBlock(scope: !1698, file: !616, line: 5168, column: 12)
!1707 = !DISubprogram(name: "fsconvert_strdup", scope: !616, file: !616, line: 5056, type: !1708, isLocal: true, isDefinition: true, scopeLine: 5057, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i8**)* @fsconvert_strdup, variables: !1710)
!1708 = !DISubroutineType(types: !1709)
!1709 = !{!314, !276, !653}
!1710 = !{!1711, !1712, !1713, !1714, !1715}
!1711 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1707, file: !616, line: 5056, type: !276)
!1712 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "out", arg: 2, scope: !1707, file: !616, line: 5056, type: !653)
!1713 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bytes", scope: !1707, file: !616, line: 5058, type: !276)
!1714 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !1707, file: !616, line: 5059, type: !282)
!1715 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1716, file: !616, line: 5069, type: !276)
!1716 = distinct !DILexicalBlock(scope: !1707, file: !616, line: 5069, column: 8)
!1717 = !DISubprogram(name: "free_string_array", scope: !616, file: !616, line: 5047, type: !1718, isLocal: true, isDefinition: true, scopeLine: 5048, flags: DIFlagPrototyped, isOptimized: true, function: void (i8**, i64)* @free_string_array, variables: !1720)
!1718 = !DISubroutineType(types: !1719)
!1719 = !{null, !653, !282}
!1720 = !{!1721, !1722, !1723}
!1721 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "array", arg: 1, scope: !1717, file: !616, line: 5047, type: !653)
!1722 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "count", arg: 2, scope: !1717, file: !616, line: 5047, type: !282)
!1723 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1717, file: !616, line: 5049, type: !282)
!1724 = !DISubprogram(name: "posix_execve", scope: !616, file: !616, line: 5245, type: !405, isLocal: true, isDefinition: true, scopeLine: 5246, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_execve, variables: !1725)
!1725 = !{!1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735}
!1726 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1724, file: !616, line: 5245, type: !276)
!1727 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1724, file: !616, line: 5245, type: !276)
!1728 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1724, file: !616, line: 5245, type: !276)
!1729 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1724, file: !616, line: 5247, type: !615)
!1730 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argv", scope: !1724, file: !616, line: 5248, type: !276)
!1731 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "env", scope: !1724, file: !616, line: 5248, type: !276)
!1732 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argvlist", scope: !1724, file: !616, line: 5249, type: !653)
!1733 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "envlist", scope: !1724, file: !616, line: 5250, type: !653)
!1734 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argc", scope: !1724, file: !616, line: 5251, type: !282)
!1735 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "envc", scope: !1724, file: !616, line: 5251, type: !282)
!1736 = !DISubprogram(name: "parse_envlist", scope: !616, file: !616, line: 5076, type: !1690, isLocal: true, isDefinition: true, scopeLine: 5077, flags: DIFlagPrototyped, isOptimized: true, function: i8** (%struct._object*, i64*)* @parse_envlist, variables: !1737)
!1737 = !{!1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1761, !1765, !1767, !1769, !1771, !1773, !1775, !1777, !1780, !1782}
!1738 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "env", arg: 1, scope: !1736, file: !616, line: 5076, type: !276)
!1739 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "envc_ptr", arg: 2, scope: !1736, file: !616, line: 5076, type: !517)
!1740 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "envlist", scope: !1736, file: !616, line: 5078, type: !653)
!1741 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1736, file: !616, line: 5079, type: !282)
!1742 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pos", scope: !1736, file: !616, line: 5079, type: !282)
!1743 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "envc", scope: !1736, file: !616, line: 5079, type: !282)
!1744 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "keys", scope: !1736, file: !616, line: 5080, type: !276)
!1745 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vals", scope: !1736, file: !616, line: 5080, type: !276)
!1746 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "key", scope: !1736, file: !616, line: 5081, type: !276)
!1747 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "val", scope: !1736, file: !616, line: 5081, type: !276)
!1748 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "key2", scope: !1736, file: !616, line: 5081, type: !276)
!1749 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "val2", scope: !1736, file: !616, line: 5081, type: !276)
!1750 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !1736, file: !616, line: 5082, type: !322)
!1751 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !1736, file: !616, line: 5082, type: !322)
!1752 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !1736, file: !616, line: 5082, type: !322)
!1753 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !1736, file: !616, line: 5083, type: !364)
!1754 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1755, file: !616, line: 5115, type: !276)
!1755 = distinct !DILexicalBlock(scope: !1756, file: !616, line: 5115, column: 16)
!1756 = distinct !DILexicalBlock(scope: !1757, file: !616, line: 5114, column: 53)
!1757 = distinct !DILexicalBlock(scope: !1758, file: !616, line: 5114, column: 13)
!1758 = distinct !DILexicalBlock(scope: !1759, file: !616, line: 5106, column: 35)
!1759 = distinct !DILexicalBlock(scope: !1760, file: !616, line: 5106, column: 5)
!1760 = distinct !DILexicalBlock(scope: !1736, file: !616, line: 5106, column: 5)
!1761 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1762, file: !616, line: 5126, type: !276)
!1762 = distinct !DILexicalBlock(scope: !1763, file: !616, line: 5126, column: 16)
!1763 = distinct !DILexicalBlock(scope: !1764, file: !616, line: 5124, column: 30)
!1764 = distinct !DILexicalBlock(scope: !1758, file: !616, line: 5124, column: 13)
!1765 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1766, file: !616, line: 5127, type: !276)
!1766 = distinct !DILexicalBlock(scope: !1763, file: !616, line: 5127, column: 16)
!1767 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1768, file: !616, line: 5132, type: !276)
!1768 = distinct !DILexicalBlock(scope: !1758, file: !616, line: 5132, column: 12)
!1769 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1770, file: !616, line: 5133, type: !276)
!1770 = distinct !DILexicalBlock(scope: !1758, file: !616, line: 5133, column: 12)
!1771 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1772, file: !616, line: 5135, type: !276)
!1772 = distinct !DILexicalBlock(scope: !1736, file: !616, line: 5135, column: 8)
!1773 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1774, file: !616, line: 5136, type: !276)
!1774 = distinct !DILexicalBlock(scope: !1736, file: !616, line: 5136, column: 8)
!1775 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1776, file: !616, line: 5143, type: !276)
!1776 = distinct !DILexicalBlock(scope: !1736, file: !616, line: 5143, column: 8)
!1777 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1778, file: !616, line: 5143, type: !276)
!1778 = distinct !DILexicalBlock(scope: !1779, file: !616, line: 5143, column: 96)
!1779 = distinct !DILexicalBlock(scope: !1776, file: !616, line: 5143, column: 62)
!1780 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1781, file: !616, line: 5144, type: !276)
!1781 = distinct !DILexicalBlock(scope: !1736, file: !616, line: 5144, column: 8)
!1782 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1783, file: !616, line: 5144, type: !276)
!1783 = distinct !DILexicalBlock(scope: !1784, file: !616, line: 5144, column: 96)
!1784 = distinct !DILexicalBlock(scope: !1781, file: !616, line: 5144, column: 62)
!1785 = !DISubprogram(name: "posix_fork", scope: !616, file: !616, line: 5530, type: !396, isLocal: true, isDefinition: true, scopeLine: 5531, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_fork, variables: !1786)
!1786 = !{!1787, !1788, !1789, !1792}
!1787 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1785, file: !616, line: 5530, type: !276)
!1788 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !1785, file: !616, line: 5530, type: !276)
!1789 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !1785, file: !616, line: 5532, type: !1790)
!1790 = !DIDerivedType(tag: DW_TAG_typedef, name: "pid_t", file: !269, line: 98, baseType: !1791)
!1791 = !DIDerivedType(tag: DW_TAG_typedef, name: "__pid_t", file: !271, line: 142, baseType: !314)
!1792 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1785, file: !616, line: 5533, type: !314)
!1793 = !DISubprogram(name: "posix_sched_get_priority_max", scope: !616, file: !616, line: 5564, type: !396, isLocal: true, isDefinition: true, scopeLine: 5565, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_sched_get_priority_max, variables: !1794)
!1794 = !{!1795, !1796, !1797, !1798}
!1795 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1793, file: !616, line: 5564, type: !276)
!1796 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1793, file: !616, line: 5564, type: !276)
!1797 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "policy", scope: !1793, file: !616, line: 5566, type: !314)
!1798 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "max", scope: !1793, file: !616, line: 5566, type: !314)
!1799 = !DISubprogram(name: "posix_sched_get_priority_min", scope: !616, file: !616, line: 5581, type: !396, isLocal: true, isDefinition: true, scopeLine: 5582, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_sched_get_priority_min, variables: !1800)
!1800 = !{!1801, !1802, !1803, !1804}
!1801 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1799, file: !616, line: 5581, type: !276)
!1802 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1799, file: !616, line: 5581, type: !276)
!1803 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "policy", scope: !1799, file: !616, line: 5583, type: !314)
!1804 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "min", scope: !1799, file: !616, line: 5583, type: !314)
!1805 = !DISubprogram(name: "posix_sched_getparam", scope: !616, file: !616, line: 5713, type: !396, isLocal: true, isDefinition: true, scopeLine: 5714, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_sched_getparam, variables: !1806)
!1806 = !{!1807, !1808, !1809, !1810, !1814, !1815, !1816}
!1807 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1805, file: !616, line: 5713, type: !276)
!1808 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1805, file: !616, line: 5713, type: !276)
!1809 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !1805, file: !616, line: 5715, type: !1790)
!1810 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "param", scope: !1805, file: !616, line: 5716, type: !1811)
!1811 = !DICompositeType(tag: DW_TAG_structure_type, name: "sched_param", file: !655, line: 73, size: 32, align: 32, elements: !1812)
!1812 = !{!1813}
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "__sched_priority", scope: !1811, file: !655, line: 75, baseType: !314, size: 32, align: 32)
!1814 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1805, file: !616, line: 5717, type: !276)
!1815 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "priority", scope: !1805, file: !616, line: 5717, type: !276)
!1816 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1817, file: !616, line: 5728, type: !276)
!1817 = distinct !DILexicalBlock(scope: !1818, file: !616, line: 5728, column: 12)
!1818 = distinct !DILexicalBlock(scope: !1819, file: !616, line: 5727, column: 20)
!1819 = distinct !DILexicalBlock(scope: !1805, file: !616, line: 5727, column: 9)
!1820 = !DISubprogram(name: "posix_sched_getscheduler", scope: !616, file: !616, line: 5603, type: !396, isLocal: true, isDefinition: true, scopeLine: 5604, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_sched_getscheduler, variables: !1821)
!1821 = !{!1822, !1823, !1824, !1825}
!1822 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1820, file: !616, line: 5603, type: !276)
!1823 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1820, file: !616, line: 5603, type: !276)
!1824 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !1820, file: !616, line: 5605, type: !1790)
!1825 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "policy", scope: !1820, file: !616, line: 5606, type: !314)
!1826 = !DISubprogram(name: "posix_sched_rr_get_interval", scope: !616, file: !616, line: 5763, type: !396, isLocal: true, isDefinition: true, scopeLine: 5764, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_sched_rr_get_interval, variables: !1827)
!1827 = !{!1828, !1829, !1830, !1831}
!1828 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1826, file: !616, line: 5763, type: !276)
!1829 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1826, file: !616, line: 5763, type: !276)
!1830 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !1826, file: !616, line: 5765, type: !1790)
!1831 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "interval", scope: !1826, file: !616, line: 5766, type: !856)
!1832 = !DISubprogram(name: "posix_sched_setparam", scope: !616, file: !616, line: 5741, type: !396, isLocal: true, isDefinition: true, scopeLine: 5742, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_sched_setparam, variables: !1833)
!1833 = !{!1834, !1835, !1836, !1837}
!1834 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1832, file: !616, line: 5741, type: !276)
!1835 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1832, file: !616, line: 5741, type: !276)
!1836 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !1832, file: !616, line: 5743, type: !1790)
!1837 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "param", scope: !1832, file: !616, line: 5744, type: !1811)
!1838 = !DISubprogram(name: "convert_sched_param", scope: !616, file: !616, line: 5653, type: !1839, isLocal: true, isDefinition: true, scopeLine: 5654, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct.sched_param*)* @convert_sched_param, variables: !1842)
!1839 = !DISubroutineType(types: !1840)
!1840 = !{!314, !276, !1841}
!1841 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1811, size: 64, align: 64)
!1842 = !{!1843, !1844, !1845}
!1843 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "param", arg: 1, scope: !1838, file: !616, line: 5653, type: !276)
!1844 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "res", arg: 2, scope: !1838, file: !616, line: 5653, type: !1841)
!1845 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "priority", scope: !1838, file: !616, line: 5655, type: !287)
!1846 = !DISubprogram(name: "posix_sched_setscheduler", scope: !616, file: !616, line: 5683, type: !396, isLocal: true, isDefinition: true, scopeLine: 5684, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_sched_setscheduler, variables: !1847)
!1847 = !{!1848, !1849, !1850, !1851, !1852}
!1848 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1846, file: !616, line: 5683, type: !276)
!1849 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1846, file: !616, line: 5683, type: !276)
!1850 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !1846, file: !616, line: 5685, type: !1790)
!1851 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "policy", scope: !1846, file: !616, line: 5686, type: !314)
!1852 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "param", scope: !1846, file: !616, line: 5687, type: !1811)
!1853 = !DISubprogram(name: "posix_sched_yield", scope: !616, file: !616, line: 5782, type: !396, isLocal: true, isDefinition: true, scopeLine: 5783, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_sched_yield, variables: !1854)
!1854 = !{!1855, !1856}
!1855 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1853, file: !616, line: 5782, type: !276)
!1856 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !1853, file: !616, line: 5782, type: !276)
!1857 = !DISubprogram(name: "posix_sched_setaffinity", scope: !616, file: !616, line: 5799, type: !396, isLocal: true, isDefinition: true, scopeLine: 5800, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_sched_setaffinity, variables: !1858)
!1858 = !{!1859, !1860, !1861, !1862, !1863, !1864, !1873, !1874, !1875, !1876, !1878, !1882, !1884, !1887, !1888, !1889, !1891, !1893, !1897, !1899}
!1859 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1857, file: !616, line: 5799, type: !276)
!1860 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1857, file: !616, line: 5799, type: !276)
!1861 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !1857, file: !616, line: 5801, type: !1790)
!1862 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ncpus", scope: !1857, file: !616, line: 5802, type: !314)
!1863 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "setsize", scope: !1857, file: !616, line: 5803, type: !364)
!1864 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mask", scope: !1857, file: !616, line: 5804, type: !1865)
!1865 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1866, size: 64, align: 64)
!1866 = !DIDerivedType(tag: DW_TAG_typedef, name: "cpu_set_t", file: !655, line: 129, baseType: !1867)
!1867 = !DICompositeType(tag: DW_TAG_structure_type, file: !655, line: 126, size: 1024, align: 64, elements: !1868)
!1868 = !{!1869}
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "__bits", scope: !1867, file: !655, line: 128, baseType: !1870, size: 1024, align: 64)
!1870 = !DICompositeType(tag: DW_TAG_array_type, baseType: !654, size: 1024, align: 64, elements: !1871)
!1871 = !{!1872}
!1872 = !DISubrange(count: 16)
!1873 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "iterable", scope: !1857, file: !616, line: 5805, type: !276)
!1874 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "iterator", scope: !1857, file: !616, line: 5805, type: !276)
!1875 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !1857, file: !616, line: 5805, type: !276)
!1876 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cpu", scope: !1877, file: !616, line: 5825, type: !287)
!1877 = distinct !DILexicalBlock(scope: !1857, file: !616, line: 5824, column: 44)
!1878 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1879, file: !616, line: 5831, type: !276)
!1879 = distinct !DILexicalBlock(scope: !1880, file: !616, line: 5831, column: 16)
!1880 = distinct !DILexicalBlock(scope: !1881, file: !616, line: 5826, column: 83)
!1881 = distinct !DILexicalBlock(scope: !1877, file: !616, line: 5826, column: 13)
!1882 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1883, file: !616, line: 5835, type: !276)
!1883 = distinct !DILexicalBlock(scope: !1877, file: !616, line: 5835, column: 12)
!1884 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newncpus", scope: !1885, file: !616, line: 5847, type: !314)
!1885 = distinct !DILexicalBlock(scope: !1886, file: !616, line: 5845, column: 27)
!1886 = distinct !DILexicalBlock(scope: !1877, file: !616, line: 5845, column: 13)
!1887 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newmask", scope: !1885, file: !616, line: 5848, type: !1865)
!1888 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newsetsize", scope: !1885, file: !616, line: 5849, type: !364)
!1889 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__cpu", scope: !1890, file: !616, line: 5869, type: !364)
!1890 = distinct !DILexicalBlock(scope: !1877, file: !616, line: 5869, column: 25)
!1891 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_tmp", scope: !1892, file: !616, line: 5871, type: !276)
!1892 = distinct !DILexicalBlock(scope: !1857, file: !616, line: 5871, column: 8)
!1893 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1894, file: !616, line: 5871, type: !276)
!1894 = distinct !DILexicalBlock(scope: !1895, file: !616, line: 5871, column: 111)
!1895 = distinct !DILexicalBlock(scope: !1896, file: !616, line: 5871, column: 81)
!1896 = distinct !DILexicalBlock(scope: !1892, file: !616, line: 5871, column: 58)
!1897 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1898, file: !616, line: 5883, type: !276)
!1898 = distinct !DILexicalBlock(scope: !1857, file: !616, line: 5883, column: 8)
!1899 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1900, file: !616, line: 5883, type: !276)
!1900 = distinct !DILexicalBlock(scope: !1901, file: !616, line: 5883, column: 100)
!1901 = distinct !DILexicalBlock(scope: !1898, file: !616, line: 5883, column: 66)
!1902 = !DISubprogram(name: "posix_sched_getaffinity", scope: !616, file: !616, line: 5893, type: !396, isLocal: true, isDefinition: true, scopeLine: 5894, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_sched_getaffinity, variables: !1903)
!1903 = !{!1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1919, !1921, !1925, !1927, !1929}
!1904 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1902, file: !616, line: 5893, type: !276)
!1905 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1902, file: !616, line: 5893, type: !276)
!1906 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !1902, file: !616, line: 5895, type: !1790)
!1907 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cpu", scope: !1902, file: !616, line: 5896, type: !314)
!1908 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ncpus", scope: !1902, file: !616, line: 5896, type: !314)
!1909 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1902, file: !616, line: 5896, type: !314)
!1910 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "setsize", scope: !1902, file: !616, line: 5897, type: !364)
!1911 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mask", scope: !1902, file: !616, line: 5898, type: !1865)
!1912 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1902, file: !616, line: 5899, type: !276)
!1913 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__cpu", scope: !1914, file: !616, line: 5928, type: !364)
!1914 = distinct !DILexicalBlock(scope: !1915, file: !616, line: 5928, column: 29)
!1915 = distinct !DILexicalBlock(scope: !1916, file: !616, line: 5928, column: 13)
!1916 = distinct !DILexicalBlock(scope: !1917, file: !616, line: 5927, column: 75)
!1917 = distinct !DILexicalBlock(scope: !1918, file: !616, line: 5927, column: 5)
!1918 = distinct !DILexicalBlock(scope: !1902, file: !616, line: 5927, column: 5)
!1919 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cpu_num", scope: !1920, file: !616, line: 5929, type: !276)
!1920 = distinct !DILexicalBlock(scope: !1915, file: !616, line: 5928, column: 235)
!1921 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1922, file: !616, line: 5934, type: !276)
!1922 = distinct !DILexicalBlock(scope: !1923, file: !616, line: 5934, column: 20)
!1923 = distinct !DILexicalBlock(scope: !1924, file: !616, line: 5933, column: 42)
!1924 = distinct !DILexicalBlock(scope: !1920, file: !616, line: 5933, column: 17)
!1925 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1926, file: !616, line: 5937, type: !276)
!1926 = distinct !DILexicalBlock(scope: !1920, file: !616, line: 5937, column: 16)
!1927 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1928, file: !616, line: 5946, type: !276)
!1928 = distinct !DILexicalBlock(scope: !1902, file: !616, line: 5946, column: 8)
!1929 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1930, file: !616, line: 5946, type: !276)
!1930 = distinct !DILexicalBlock(scope: !1931, file: !616, line: 5946, column: 95)
!1931 = distinct !DILexicalBlock(scope: !1928, file: !616, line: 5946, column: 61)
!1932 = !DISubprogram(name: "posix_openpty", scope: !616, file: !616, line: 5986, type: !396, isLocal: true, isDefinition: true, scopeLine: 5987, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_openpty, variables: !1933)
!1933 = !{!1934, !1935, !1936, !1937}
!1934 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1932, file: !616, line: 5986, type: !276)
!1935 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !1932, file: !616, line: 5986, type: !276)
!1936 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "master_fd", scope: !1932, file: !616, line: 5988, type: !314)
!1937 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "slave_fd", scope: !1932, file: !616, line: 5988, type: !314)
!1938 = !DISubprogram(name: "posix_forkpty", scope: !616, file: !616, line: 6083, type: !396, isLocal: true, isDefinition: true, scopeLine: 6084, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_forkpty, variables: !1939)
!1939 = !{!1940, !1941, !1942, !1943, !1944}
!1940 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1938, file: !616, line: 6083, type: !276)
!1941 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !1938, file: !616, line: 6083, type: !276)
!1942 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "master_fd", scope: !1938, file: !616, line: 6085, type: !314)
!1943 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1938, file: !616, line: 6085, type: !314)
!1944 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !1938, file: !616, line: 6086, type: !1790)
!1945 = !DISubprogram(name: "posix_getegid", scope: !616, file: !616, line: 6116, type: !396, isLocal: true, isDefinition: true, scopeLine: 6117, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getegid, variables: !1946)
!1946 = !{!1947, !1948}
!1947 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1945, file: !616, line: 6116, type: !276)
!1948 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !1945, file: !616, line: 6116, type: !276)
!1949 = !DISubprogram(name: "posix_geteuid", scope: !616, file: !616, line: 6129, type: !396, isLocal: true, isDefinition: true, scopeLine: 6130, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_geteuid, variables: !1950)
!1950 = !{!1951, !1952}
!1951 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1949, file: !616, line: 6129, type: !276)
!1952 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !1949, file: !616, line: 6129, type: !276)
!1953 = !DISubprogram(name: "posix_getgid", scope: !616, file: !616, line: 6142, type: !396, isLocal: true, isDefinition: true, scopeLine: 6143, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getgid, variables: !1954)
!1954 = !{!1955, !1956}
!1955 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1953, file: !616, line: 6142, type: !276)
!1956 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !1953, file: !616, line: 6142, type: !276)
!1957 = !DISubprogram(name: "posix_getgrouplist", scope: !616, file: !616, line: 6167, type: !396, isLocal: true, isDefinition: true, scopeLine: 6168, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getgrouplist, variables: !1958)
!1958 = !{!1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1971}
!1959 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1957, file: !616, line: 6167, type: !276)
!1960 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1957, file: !616, line: 6167, type: !276)
!1961 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "user", scope: !1957, file: !616, line: 6176, type: !299)
!1962 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1957, file: !616, line: 6177, type: !314)
!1963 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ngroups", scope: !1957, file: !616, line: 6177, type: !314)
!1964 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "list", scope: !1957, file: !616, line: 6178, type: !276)
!1965 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "groups", scope: !1957, file: !616, line: 6182, type: !613)
!1966 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "basegid", scope: !1957, file: !616, line: 6182, type: !273)
!1967 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "o", scope: !1968, file: !616, line: 6218, type: !276)
!1968 = distinct !DILexicalBlock(scope: !1969, file: !616, line: 6214, column: 35)
!1969 = distinct !DILexicalBlock(scope: !1970, file: !616, line: 6214, column: 5)
!1970 = distinct !DILexicalBlock(scope: !1957, file: !616, line: 6214, column: 5)
!1971 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1972, file: !616, line: 6221, type: !276)
!1972 = distinct !DILexicalBlock(scope: !1973, file: !616, line: 6221, column: 16)
!1973 = distinct !DILexicalBlock(scope: !1974, file: !616, line: 6220, column: 30)
!1974 = distinct !DILexicalBlock(scope: !1968, file: !616, line: 6220, column: 13)
!1975 = !DISubprogram(name: "posix_getgroups", scope: !616, file: !616, line: 6240, type: !396, isLocal: true, isDefinition: true, scopeLine: 6241, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getgroups, variables: !1976)
!1976 = !{!1977, !1978, !1979, !1980, !1984, !1985, !1986, !1989, !1993}
!1977 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1975, file: !616, line: 6240, type: !276)
!1978 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !1975, file: !616, line: 6240, type: !276)
!1979 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1975, file: !616, line: 6242, type: !276)
!1980 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "grouplist", scope: !1975, file: !616, line: 6250, type: !1981)
!1981 = !DICompositeType(tag: DW_TAG_array_type, baseType: !273, size: 2097152, align: 32, elements: !1982)
!1982 = !{!1983}
!1983 = !DISubrange(count: 65536)
!1984 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "alt_grouplist", scope: !1975, file: !616, line: 6260, type: !613)
!1985 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1975, file: !616, line: 6261, type: !314)
!1986 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1987, file: !616, line: 6321, type: !314)
!1987 = distinct !DILexicalBlock(scope: !1988, file: !616, line: 6320, column: 31)
!1988 = distinct !DILexicalBlock(scope: !1975, file: !616, line: 6320, column: 9)
!1989 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "o", scope: !1990, file: !616, line: 6323, type: !276)
!1990 = distinct !DILexicalBlock(scope: !1991, file: !616, line: 6322, column: 33)
!1991 = distinct !DILexicalBlock(scope: !1992, file: !616, line: 6322, column: 9)
!1992 = distinct !DILexicalBlock(scope: !1987, file: !616, line: 6322, column: 9)
!1993 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1994, file: !616, line: 6325, type: !276)
!1994 = distinct !DILexicalBlock(scope: !1995, file: !616, line: 6325, column: 20)
!1995 = distinct !DILexicalBlock(scope: !1996, file: !616, line: 6324, column: 34)
!1996 = distinct !DILexicalBlock(scope: !1990, file: !616, line: 6324, column: 17)
!1997 = !DISubprogram(name: "posix_getpid", scope: !616, file: !616, line: 6154, type: !396, isLocal: true, isDefinition: true, scopeLine: 6155, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getpid, variables: !1998)
!1998 = !{!1999, !2000}
!1999 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1997, file: !616, line: 6154, type: !276)
!2000 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !1997, file: !616, line: 6154, type: !276)
!2001 = !DISubprogram(name: "posix_getpgrp", scope: !616, file: !616, line: 6407, type: !396, isLocal: true, isDefinition: true, scopeLine: 6408, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getpgrp, variables: !2002)
!2002 = !{!2003, !2004}
!2003 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2001, file: !616, line: 6407, type: !276)
!2004 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !2001, file: !616, line: 6407, type: !276)
!2005 = !DISubprogram(name: "posix_getppid", scope: !616, file: !616, line: 6489, type: !396, isLocal: true, isDefinition: true, scopeLine: 6490, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getppid, variables: !2006)
!2006 = !{!2007, !2008}
!2007 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2005, file: !616, line: 6489, type: !276)
!2008 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !2005, file: !616, line: 6489, type: !276)
!2009 = !DISubprogram(name: "posix_getuid", scope: !616, file: !616, line: 6545, type: !396, isLocal: true, isDefinition: true, scopeLine: 6546, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getuid, variables: !2010)
!2010 = !{!2011, !2012}
!2011 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2009, file: !616, line: 6545, type: !276)
!2012 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !2009, file: !616, line: 6545, type: !276)
!2013 = !DISubprogram(name: "posix_getlogin", scope: !616, file: !616, line: 6506, type: !396, isLocal: true, isDefinition: true, scopeLine: 6507, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getlogin, variables: !2014)
!2014 = !{!2015, !2016, !2017, !2018, !2019}
!2015 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2013, file: !616, line: 6506, type: !276)
!2016 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !2013, file: !616, line: 6506, type: !276)
!2017 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2013, file: !616, line: 6508, type: !276)
!2018 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "name", scope: !2013, file: !616, line: 6520, type: !322)
!2019 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "old_errno", scope: !2013, file: !616, line: 6521, type: !314)
!2020 = !DISubprogram(name: "posix_kill", scope: !616, file: !616, line: 6558, type: !396, isLocal: true, isDefinition: true, scopeLine: 6559, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_kill, variables: !2021)
!2021 = !{!2022, !2023, !2024, !2025}
!2022 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2020, file: !616, line: 6558, type: !276)
!2023 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2020, file: !616, line: 6558, type: !276)
!2024 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !2020, file: !616, line: 6560, type: !1790)
!2025 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sig", scope: !2020, file: !616, line: 6561, type: !314)
!2026 = !DISubprogram(name: "posix_killpg", scope: !616, file: !616, line: 6577, type: !396, isLocal: true, isDefinition: true, scopeLine: 6578, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_killpg, variables: !2027)
!2027 = !{!2028, !2029, !2030, !2031}
!2028 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2026, file: !616, line: 6577, type: !276)
!2029 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2026, file: !616, line: 6577, type: !276)
!2030 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sig", scope: !2026, file: !616, line: 6579, type: !314)
!2031 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pgid", scope: !2026, file: !616, line: 6580, type: !1790)
!2032 = !DISubprogram(name: "posix_setuid", scope: !616, file: !616, line: 6671, type: !396, isLocal: true, isDefinition: true, scopeLine: 6672, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_setuid, variables: !2033)
!2033 = !{!2034, !2035, !2036}
!2034 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2032, file: !616, line: 6671, type: !276)
!2035 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2032, file: !616, line: 6671, type: !276)
!2036 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "uid", scope: !2032, file: !616, line: 6673, type: !268)
!2037 = !DISubprogram(name: "posix_seteuid", scope: !616, file: !616, line: 6690, type: !396, isLocal: true, isDefinition: true, scopeLine: 6691, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_seteuid, variables: !2038)
!2038 = !{!2039, !2040, !2041}
!2039 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2037, file: !616, line: 6690, type: !276)
!2040 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2037, file: !616, line: 6690, type: !276)
!2041 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "euid", scope: !2037, file: !616, line: 6692, type: !268)
!2042 = !DISubprogram(name: "posix_setegid", scope: !616, file: !616, line: 6710, type: !396, isLocal: true, isDefinition: true, scopeLine: 6711, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_setegid, variables: !2043)
!2043 = !{!2044, !2045, !2046}
!2044 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2042, file: !616, line: 6710, type: !276)
!2045 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2042, file: !616, line: 6710, type: !276)
!2046 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "egid", scope: !2042, file: !616, line: 6712, type: !273)
!2047 = !DISubprogram(name: "posix_setreuid", scope: !616, file: !616, line: 6730, type: !396, isLocal: true, isDefinition: true, scopeLine: 6731, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_setreuid, variables: !2048)
!2048 = !{!2049, !2050, !2051, !2052}
!2049 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2047, file: !616, line: 6730, type: !276)
!2050 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2047, file: !616, line: 6730, type: !276)
!2051 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ruid", scope: !2047, file: !616, line: 6732, type: !268)
!2052 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "euid", scope: !2047, file: !616, line: 6732, type: !268)
!2053 = !DISubprogram(name: "posix_setregid", scope: !616, file: !616, line: 6752, type: !396, isLocal: true, isDefinition: true, scopeLine: 6753, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_setregid, variables: !2054)
!2054 = !{!2055, !2056, !2057, !2058}
!2055 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2053, file: !616, line: 6752, type: !276)
!2056 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2053, file: !616, line: 6752, type: !276)
!2057 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rgid", scope: !2053, file: !616, line: 6754, type: !273)
!2058 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "egid", scope: !2053, file: !616, line: 6754, type: !273)
!2059 = !DISubprogram(name: "posix_setgid", scope: !616, file: !616, line: 6774, type: !396, isLocal: true, isDefinition: true, scopeLine: 6775, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_setgid, variables: !2060)
!2060 = !{!2061, !2062, !2063}
!2061 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2059, file: !616, line: 6774, type: !276)
!2062 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2059, file: !616, line: 6774, type: !276)
!2063 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "gid", scope: !2059, file: !616, line: 6776, type: !273)
!2064 = !DISubprogram(name: "posix_setgroups", scope: !616, file: !616, line: 6792, type: !396, isLocal: true, isDefinition: true, scopeLine: 6793, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_setgroups, variables: !2065)
!2065 = !{!2066, !2067, !2068, !2069, !2070, !2071, !2075, !2079, !2084}
!2066 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2064, file: !616, line: 6792, type: !276)
!2067 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "groups", arg: 2, scope: !2064, file: !616, line: 6792, type: !276)
!2068 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !2064, file: !616, line: 6794, type: !314)
!2069 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !2064, file: !616, line: 6794, type: !314)
!2070 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "grouplist", scope: !2064, file: !616, line: 6795, type: !1981)
!2071 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "elem", scope: !2072, file: !616, line: 6807, type: !276)
!2072 = distinct !DILexicalBlock(scope: !2073, file: !616, line: 6806, column: 30)
!2073 = distinct !DILexicalBlock(scope: !2074, file: !616, line: 6806, column: 5)
!2074 = distinct !DILexicalBlock(scope: !2064, file: !616, line: 6806, column: 5)
!2075 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2076, file: !616, line: 6814, type: !276)
!2076 = distinct !DILexicalBlock(scope: !2077, file: !616, line: 6814, column: 16)
!2077 = distinct !DILexicalBlock(scope: !2078, file: !616, line: 6811, column: 83)
!2078 = distinct !DILexicalBlock(scope: !2072, file: !616, line: 6811, column: 13)
!2079 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2080, file: !616, line: 6818, type: !276)
!2080 = distinct !DILexicalBlock(scope: !2081, file: !616, line: 6818, column: 20)
!2081 = distinct !DILexicalBlock(scope: !2082, file: !616, line: 6817, column: 58)
!2082 = distinct !DILexicalBlock(scope: !2083, file: !616, line: 6817, column: 17)
!2083 = distinct !DILexicalBlock(scope: !2078, file: !616, line: 6816, column: 16)
!2084 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2085, file: !616, line: 6822, type: !276)
!2085 = distinct !DILexicalBlock(scope: !2072, file: !616, line: 6822, column: 12)
!2086 = !DISubprogram(name: "posix_initgroups", scope: !616, file: !616, line: 6349, type: !396, isLocal: true, isDefinition: true, scopeLine: 6350, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_initgroups, variables: !2087)
!2087 = !{!2088, !2089, !2090, !2091, !2092, !2093, !2094}
!2088 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2086, file: !616, line: 6349, type: !276)
!2089 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2086, file: !616, line: 6349, type: !276)
!2090 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "oname", scope: !2086, file: !616, line: 6351, type: !276)
!2091 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "username", scope: !2086, file: !616, line: 6352, type: !322)
!2092 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2086, file: !616, line: 6353, type: !314)
!2093 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "gid", scope: !2086, file: !616, line: 6357, type: !273)
!2094 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2095, file: !616, line: 6373, type: !276)
!2095 = distinct !DILexicalBlock(scope: !2086, file: !616, line: 6373, column: 8)
!2096 = !DISubprogram(name: "posix_getpgid", scope: !616, file: !616, line: 6388, type: !396, isLocal: true, isDefinition: true, scopeLine: 6389, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getpgid, variables: !2097)
!2097 = !{!2098, !2099, !2100, !2101}
!2098 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2096, file: !616, line: 6388, type: !276)
!2099 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2096, file: !616, line: 6388, type: !276)
!2100 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !2096, file: !616, line: 6390, type: !1790)
!2101 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pgid", scope: !2096, file: !616, line: 6390, type: !1790)
!2102 = !DISubprogram(name: "posix_setpgrp", scope: !616, file: !616, line: 6424, type: !396, isLocal: true, isDefinition: true, scopeLine: 6425, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_setpgrp, variables: !2103)
!2103 = !{!2104, !2105}
!2104 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2102, file: !616, line: 6424, type: !276)
!2105 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !2102, file: !616, line: 6424, type: !276)
!2106 = !DISubprogram(name: "posix_wait", scope: !616, file: !616, line: 7048, type: !396, isLocal: true, isDefinition: true, scopeLine: 7049, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_wait, variables: !2107)
!2107 = !{!2108, !2109, !2110, !2111, !2112}
!2108 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2106, file: !616, line: 7048, type: !276)
!2109 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !2106, file: !616, line: 7048, type: !276)
!2110 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !2106, file: !616, line: 7050, type: !1790)
!2111 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !2106, file: !616, line: 7051, type: !314)
!2112 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2113, file: !616, line: 7054, type: !871)
!2113 = distinct !DILexicalBlock(scope: !2106, file: !616, line: 7054, column: 5)
!2114 = !DISubprogram(name: "posix_wait3", scope: !616, file: !616, line: 6899, type: !396, isLocal: true, isDefinition: true, scopeLine: 6900, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_wait3, variables: !2115)
!2115 = !{!2116, !2117, !2118, !2119, !2120, !2201, !2202}
!2116 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2114, file: !616, line: 6899, type: !276)
!2117 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2114, file: !616, line: 6899, type: !276)
!2118 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !2114, file: !616, line: 6901, type: !1790)
!2119 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "options", scope: !2114, file: !616, line: 6902, type: !314)
!2120 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ru", scope: !2114, file: !616, line: 6903, type: !2121)
!2121 = !DICompositeType(tag: DW_TAG_structure_type, name: "rusage", file: !233, line: 187, size: 1152, align: 64, elements: !2122)
!2122 = !{!2123, !2130, !2131, !2136, !2141, !2146, !2151, !2156, !2161, !2166, !2171, !2176, !2181, !2186, !2191, !2196}
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "ru_utime", scope: !2121, file: !233, line: 190, baseType: !2124, size: 128, align: 64)
!2124 = !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !2125, line: 30, size: 128, align: 64, elements: !2126)
!2125 = !DIFile(filename: "/usr/include/bits/time.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!2126 = !{!2127, !2128}
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2124, file: !2125, line: 32, baseType: !859, size: 64, align: 64)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2124, file: !2125, line: 33, baseType: !2129, size: 64, align: 64, offset: 64)
!2129 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !271, line: 150, baseType: !287)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "ru_stime", scope: !2121, file: !233, line: 192, baseType: !2124, size: 128, align: 64, offset: 128)
!2131 = !DIDerivedType(tag: DW_TAG_member, scope: !2121, file: !233, line: 194, baseType: !2132, size: 64, align: 64, offset: 256)
!2132 = !DICompositeType(tag: DW_TAG_union_type, scope: !2121, file: !233, line: 194, size: 64, align: 64, elements: !2133)
!2133 = !{!2134, !2135}
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "ru_maxrss", scope: !2132, file: !233, line: 196, baseType: !287, size: 64, align: 64)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_maxrss_word", scope: !2132, file: !233, line: 197, baseType: !861, size: 64, align: 64)
!2136 = !DIDerivedType(tag: DW_TAG_member, scope: !2121, file: !233, line: 202, baseType: !2137, size: 64, align: 64, offset: 320)
!2137 = !DICompositeType(tag: DW_TAG_union_type, scope: !2121, file: !233, line: 202, size: 64, align: 64, elements: !2138)
!2138 = !{!2139, !2140}
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "ru_ixrss", scope: !2137, file: !233, line: 204, baseType: !287, size: 64, align: 64)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_ixrss_word", scope: !2137, file: !233, line: 205, baseType: !861, size: 64, align: 64)
!2141 = !DIDerivedType(tag: DW_TAG_member, scope: !2121, file: !233, line: 208, baseType: !2142, size: 64, align: 64, offset: 384)
!2142 = !DICompositeType(tag: DW_TAG_union_type, scope: !2121, file: !233, line: 208, size: 64, align: 64, elements: !2143)
!2143 = !{!2144, !2145}
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "ru_idrss", scope: !2142, file: !233, line: 210, baseType: !287, size: 64, align: 64)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_idrss_word", scope: !2142, file: !233, line: 211, baseType: !861, size: 64, align: 64)
!2146 = !DIDerivedType(tag: DW_TAG_member, scope: !2121, file: !233, line: 214, baseType: !2147, size: 64, align: 64, offset: 448)
!2147 = !DICompositeType(tag: DW_TAG_union_type, scope: !2121, file: !233, line: 214, size: 64, align: 64, elements: !2148)
!2148 = !{!2149, !2150}
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "ru_isrss", scope: !2147, file: !233, line: 216, baseType: !287, size: 64, align: 64)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_isrss_word", scope: !2147, file: !233, line: 217, baseType: !861, size: 64, align: 64)
!2151 = !DIDerivedType(tag: DW_TAG_member, scope: !2121, file: !233, line: 221, baseType: !2152, size: 64, align: 64, offset: 512)
!2152 = !DICompositeType(tag: DW_TAG_union_type, scope: !2121, file: !233, line: 221, size: 64, align: 64, elements: !2153)
!2153 = !{!2154, !2155}
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "ru_minflt", scope: !2152, file: !233, line: 223, baseType: !287, size: 64, align: 64)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_minflt_word", scope: !2152, file: !233, line: 224, baseType: !861, size: 64, align: 64)
!2156 = !DIDerivedType(tag: DW_TAG_member, scope: !2121, file: !233, line: 227, baseType: !2157, size: 64, align: 64, offset: 576)
!2157 = !DICompositeType(tag: DW_TAG_union_type, scope: !2121, file: !233, line: 227, size: 64, align: 64, elements: !2158)
!2158 = !{!2159, !2160}
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "ru_majflt", scope: !2157, file: !233, line: 229, baseType: !287, size: 64, align: 64)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_majflt_word", scope: !2157, file: !233, line: 230, baseType: !861, size: 64, align: 64)
!2161 = !DIDerivedType(tag: DW_TAG_member, scope: !2121, file: !233, line: 233, baseType: !2162, size: 64, align: 64, offset: 640)
!2162 = !DICompositeType(tag: DW_TAG_union_type, scope: !2121, file: !233, line: 233, size: 64, align: 64, elements: !2163)
!2163 = !{!2164, !2165}
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "ru_nswap", scope: !2162, file: !233, line: 235, baseType: !287, size: 64, align: 64)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_nswap_word", scope: !2162, file: !233, line: 236, baseType: !861, size: 64, align: 64)
!2166 = !DIDerivedType(tag: DW_TAG_member, scope: !2121, file: !233, line: 240, baseType: !2167, size: 64, align: 64, offset: 704)
!2167 = !DICompositeType(tag: DW_TAG_union_type, scope: !2121, file: !233, line: 240, size: 64, align: 64, elements: !2168)
!2168 = !{!2169, !2170}
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "ru_inblock", scope: !2167, file: !233, line: 242, baseType: !287, size: 64, align: 64)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_inblock_word", scope: !2167, file: !233, line: 243, baseType: !861, size: 64, align: 64)
!2171 = !DIDerivedType(tag: DW_TAG_member, scope: !2121, file: !233, line: 246, baseType: !2172, size: 64, align: 64, offset: 768)
!2172 = !DICompositeType(tag: DW_TAG_union_type, scope: !2121, file: !233, line: 246, size: 64, align: 64, elements: !2173)
!2173 = !{!2174, !2175}
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "ru_oublock", scope: !2172, file: !233, line: 248, baseType: !287, size: 64, align: 64)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_oublock_word", scope: !2172, file: !233, line: 249, baseType: !861, size: 64, align: 64)
!2176 = !DIDerivedType(tag: DW_TAG_member, scope: !2121, file: !233, line: 252, baseType: !2177, size: 64, align: 64, offset: 832)
!2177 = !DICompositeType(tag: DW_TAG_union_type, scope: !2121, file: !233, line: 252, size: 64, align: 64, elements: !2178)
!2178 = !{!2179, !2180}
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "ru_msgsnd", scope: !2177, file: !233, line: 254, baseType: !287, size: 64, align: 64)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_msgsnd_word", scope: !2177, file: !233, line: 255, baseType: !861, size: 64, align: 64)
!2181 = !DIDerivedType(tag: DW_TAG_member, scope: !2121, file: !233, line: 258, baseType: !2182, size: 64, align: 64, offset: 896)
!2182 = !DICompositeType(tag: DW_TAG_union_type, scope: !2121, file: !233, line: 258, size: 64, align: 64, elements: !2183)
!2183 = !{!2184, !2185}
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "ru_msgrcv", scope: !2182, file: !233, line: 260, baseType: !287, size: 64, align: 64)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_msgrcv_word", scope: !2182, file: !233, line: 261, baseType: !861, size: 64, align: 64)
!2186 = !DIDerivedType(tag: DW_TAG_member, scope: !2121, file: !233, line: 264, baseType: !2187, size: 64, align: 64, offset: 960)
!2187 = !DICompositeType(tag: DW_TAG_union_type, scope: !2121, file: !233, line: 264, size: 64, align: 64, elements: !2188)
!2188 = !{!2189, !2190}
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "ru_nsignals", scope: !2187, file: !233, line: 266, baseType: !287, size: 64, align: 64)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_nsignals_word", scope: !2187, file: !233, line: 267, baseType: !861, size: 64, align: 64)
!2191 = !DIDerivedType(tag: DW_TAG_member, scope: !2121, file: !233, line: 272, baseType: !2192, size: 64, align: 64, offset: 1024)
!2192 = !DICompositeType(tag: DW_TAG_union_type, scope: !2121, file: !233, line: 272, size: 64, align: 64, elements: !2193)
!2193 = !{!2194, !2195}
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "ru_nvcsw", scope: !2192, file: !233, line: 274, baseType: !287, size: 64, align: 64)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_nvcsw_word", scope: !2192, file: !233, line: 275, baseType: !861, size: 64, align: 64)
!2196 = !DIDerivedType(tag: DW_TAG_member, scope: !2121, file: !233, line: 279, baseType: !2197, size: 64, align: 64, offset: 1088)
!2197 = !DICompositeType(tag: DW_TAG_union_type, scope: !2121, file: !233, line: 279, size: 64, align: 64, elements: !2198)
!2198 = !{!2199, !2200}
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "ru_nivcsw", scope: !2197, file: !233, line: 281, baseType: !287, size: 64, align: 64)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "__ru_nivcsw_word", scope: !2197, file: !233, line: 282, baseType: !861, size: 64, align: 64)
!2201 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !2114, file: !616, line: 6904, type: !314)
!2202 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2203, file: !616, line: 6910, type: !871)
!2203 = distinct !DILexicalBlock(scope: !2114, file: !616, line: 6910, column: 5)
!2204 = !DISubprogram(name: "wait_helper", scope: !616, file: !616, line: 6834, type: !2205, isLocal: true, isDefinition: true, scopeLine: 6835, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (i32, i32, %struct.rusage*)* @wait_helper, variables: !2208)
!2205 = !DISubroutineType(types: !2206)
!2206 = !{!276, !1790, !314, !2207}
!2207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2121, size: 64, align: 64)
!2208 = !{!2209, !2210, !2211, !2212, !2213, !2216, !2218}
!2209 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "pid", arg: 1, scope: !2204, file: !616, line: 6834, type: !1790)
!2210 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "status", arg: 2, scope: !2204, file: !616, line: 6834, type: !314)
!2211 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "ru", arg: 3, scope: !2204, file: !616, line: 6834, type: !2207)
!2212 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2204, file: !616, line: 6836, type: !276)
!2213 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !2214, file: !616, line: 6844, type: !276)
!2214 = distinct !DILexicalBlock(scope: !2215, file: !616, line: 6843, column: 38)
!2215 = distinct !DILexicalBlock(scope: !2204, file: !616, line: 6843, column: 9)
!2216 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2217, file: !616, line: 6848, type: !276)
!2217 = distinct !DILexicalBlock(scope: !2214, file: !616, line: 6848, column: 12)
!2218 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2219, file: !616, line: 6885, type: !276)
!2219 = distinct !DILexicalBlock(scope: !2220, file: !616, line: 6885, column: 12)
!2220 = distinct !DILexicalBlock(scope: !2221, file: !616, line: 6884, column: 27)
!2221 = distinct !DILexicalBlock(scope: !2204, file: !616, line: 6884, column: 9)
!2222 = !DISubprogram(name: "posix_wait4", scope: !616, file: !616, line: 6924, type: !396, isLocal: true, isDefinition: true, scopeLine: 6925, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_wait4, variables: !2223)
!2223 = !{!2224, !2225, !2226, !2227, !2228, !2229, !2230}
!2224 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2222, file: !616, line: 6924, type: !276)
!2225 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2222, file: !616, line: 6924, type: !276)
!2226 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !2222, file: !616, line: 6926, type: !1790)
!2227 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "options", scope: !2222, file: !616, line: 6927, type: !314)
!2228 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ru", scope: !2222, file: !616, line: 6928, type: !2121)
!2229 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !2222, file: !616, line: 6929, type: !314)
!2230 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2231, file: !616, line: 6935, type: !871)
!2231 = distinct !DILexicalBlock(scope: !2222, file: !616, line: 6935, column: 5)
!2232 = !DISubprogram(name: "posix_waitid", scope: !616, file: !616, line: 6955, type: !396, isLocal: true, isDefinition: true, scopeLine: 6956, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_waitid, variables: !2233)
!2233 = !{!2234, !2235, !2236, !2237, !2239, !2242, !2243, !2244, !2304, !2306}
!2234 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2232, file: !616, line: 6955, type: !276)
!2235 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2232, file: !616, line: 6955, type: !276)
!2236 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2232, file: !616, line: 6957, type: !276)
!2237 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "idtype", scope: !2232, file: !616, line: 6958, type: !2238)
!2238 = !DIDerivedType(tag: DW_TAG_typedef, name: "idtype_t", file: !227, line: 105, baseType: !226)
!2239 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "id", scope: !2232, file: !616, line: 6959, type: !2240)
!2240 = !DIDerivedType(tag: DW_TAG_typedef, name: "id_t", file: !269, line: 104, baseType: !2241)
!2241 = !DIDerivedType(tag: DW_TAG_typedef, name: "__id_t", file: !271, line: 147, baseType: !272)
!2242 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "options", scope: !2232, file: !616, line: 6960, type: !314)
!2243 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2232, file: !616, line: 6960, type: !314)
!2244 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "si", scope: !2232, file: !616, line: 6961, type: !2245)
!2245 = !DIDerivedType(tag: DW_TAG_typedef, name: "siginfo_t", file: !254, line: 127, baseType: !2246)
!2246 = !DICompositeType(tag: DW_TAG_structure_type, file: !254, line: 62, size: 1024, align: 64, elements: !2247)
!2247 = !{!2248, !2249, !2250, !2251}
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "si_signo", scope: !2246, file: !254, line: 64, baseType: !314, size: 32, align: 32)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "si_errno", scope: !2246, file: !254, line: 65, baseType: !314, size: 32, align: 32, offset: 32)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "si_code", scope: !2246, file: !254, line: 67, baseType: !314, size: 32, align: 32, offset: 64)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "_sifields", scope: !2246, file: !254, line: 126, baseType: !2252, size: 896, align: 64, offset: 128)
!2252 = !DICompositeType(tag: DW_TAG_union_type, scope: !2246, file: !254, line: 69, size: 896, align: 64, elements: !2253)
!2253 = !{!2254, !2258, !2263, !2274, !2280, !2289, !2293, !2298}
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "_pad", scope: !2252, file: !254, line: 71, baseType: !2255, size: 896, align: 32)
!2255 = !DICompositeType(tag: DW_TAG_array_type, baseType: !314, size: 896, align: 32, elements: !2256)
!2256 = !{!2257}
!2257 = !DISubrange(count: 28)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "_kill", scope: !2252, file: !254, line: 78, baseType: !2259, size: 64, align: 32)
!2259 = !DICompositeType(tag: DW_TAG_structure_type, scope: !2252, file: !254, line: 74, size: 64, align: 32, elements: !2260)
!2260 = !{!2261, !2262}
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "si_pid", scope: !2259, file: !254, line: 76, baseType: !1791, size: 32, align: 32)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "si_uid", scope: !2259, file: !254, line: 77, baseType: !270, size: 32, align: 32, offset: 32)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "_timer", scope: !2252, file: !254, line: 86, baseType: !2264, size: 128, align: 64)
!2264 = !DICompositeType(tag: DW_TAG_structure_type, scope: !2252, file: !254, line: 81, size: 128, align: 64, elements: !2265)
!2265 = !{!2266, !2267, !2268}
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "si_tid", scope: !2264, file: !254, line: 83, baseType: !314, size: 32, align: 32)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "si_overrun", scope: !2264, file: !254, line: 84, baseType: !314, size: 32, align: 32, offset: 32)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "si_sigval", scope: !2264, file: !254, line: 85, baseType: !2269, size: 64, align: 64, offset: 64)
!2269 = !DIDerivedType(tag: DW_TAG_typedef, name: "sigval_t", file: !254, line: 36, baseType: !2270)
!2270 = !DICompositeType(tag: DW_TAG_union_type, name: "sigval", file: !254, line: 32, size: 64, align: 64, elements: !2271)
!2271 = !{!2272, !2273}
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "sival_int", scope: !2270, file: !254, line: 34, baseType: !314, size: 32, align: 32)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "sival_ptr", scope: !2270, file: !254, line: 35, baseType: !275, size: 64, align: 64)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "_rt", scope: !2252, file: !254, line: 94, baseType: !2275, size: 128, align: 64)
!2275 = !DICompositeType(tag: DW_TAG_structure_type, scope: !2252, file: !254, line: 89, size: 128, align: 64, elements: !2276)
!2276 = !{!2277, !2278, !2279}
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "si_pid", scope: !2275, file: !254, line: 91, baseType: !1791, size: 32, align: 32)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "si_uid", scope: !2275, file: !254, line: 92, baseType: !270, size: 32, align: 32, offset: 32)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "si_sigval", scope: !2275, file: !254, line: 93, baseType: !2269, size: 64, align: 64, offset: 64)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "_sigchld", scope: !2252, file: !254, line: 104, baseType: !2281, size: 256, align: 64)
!2281 = !DICompositeType(tag: DW_TAG_structure_type, scope: !2252, file: !254, line: 97, size: 256, align: 64, elements: !2282)
!2282 = !{!2283, !2284, !2285, !2286, !2288}
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "si_pid", scope: !2281, file: !254, line: 99, baseType: !1791, size: 32, align: 32)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "si_uid", scope: !2281, file: !254, line: 100, baseType: !270, size: 32, align: 32, offset: 32)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "si_status", scope: !2281, file: !254, line: 101, baseType: !314, size: 32, align: 32, offset: 64)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "si_utime", scope: !2281, file: !254, line: 102, baseType: !2287, size: 64, align: 64, offset: 128)
!2287 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sigchld_clock_t", file: !254, line: 58, baseType: !651)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "si_stime", scope: !2281, file: !254, line: 103, baseType: !2287, size: 64, align: 64, offset: 192)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "_sigfault", scope: !2252, file: !254, line: 110, baseType: !2290, size: 64, align: 64)
!2290 = !DICompositeType(tag: DW_TAG_structure_type, scope: !2252, file: !254, line: 107, size: 64, align: 64, elements: !2291)
!2291 = !{!2292}
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "si_addr", scope: !2290, file: !254, line: 109, baseType: !275, size: 64, align: 64)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "_sigpoll", scope: !2252, file: !254, line: 117, baseType: !2294, size: 128, align: 64)
!2294 = !DICompositeType(tag: DW_TAG_structure_type, scope: !2252, file: !254, line: 113, size: 128, align: 64, elements: !2295)
!2295 = !{!2296, !2297}
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "si_band", scope: !2294, file: !254, line: 115, baseType: !287, size: 64, align: 64)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "si_fd", scope: !2294, file: !254, line: 116, baseType: !314, size: 32, align: 32, offset: 64)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "_sigsys", scope: !2252, file: !254, line: 125, baseType: !2299, size: 128, align: 64)
!2299 = !DICompositeType(tag: DW_TAG_structure_type, scope: !2252, file: !254, line: 120, size: 128, align: 64, elements: !2300)
!2300 = !{!2301, !2302, !2303}
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "_call_addr", scope: !2299, file: !254, line: 122, baseType: !275, size: 64, align: 64)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "_syscall", scope: !2299, file: !254, line: 123, baseType: !314, size: 32, align: 32, offset: 64)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "_arch", scope: !2299, file: !254, line: 124, baseType: !272, size: 32, align: 32, offset: 96)
!2304 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2305, file: !616, line: 6965, type: !871)
!2305 = distinct !DILexicalBlock(scope: !2232, file: !616, line: 6965, column: 5)
!2306 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2307, file: !616, line: 6984, type: !276)
!2307 = distinct !DILexicalBlock(scope: !2308, file: !616, line: 6984, column: 12)
!2308 = distinct !DILexicalBlock(scope: !2309, file: !616, line: 6983, column: 27)
!2309 = distinct !DILexicalBlock(scope: !2232, file: !616, line: 6983, column: 9)
!2310 = !DISubprogram(name: "posix_waitpid", scope: !616, file: !616, line: 6998, type: !396, isLocal: true, isDefinition: true, scopeLine: 6999, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_waitpid, variables: !2311)
!2311 = !{!2312, !2313, !2314, !2315, !2316, !2317}
!2312 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2310, file: !616, line: 6998, type: !276)
!2313 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2310, file: !616, line: 6998, type: !276)
!2314 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !2310, file: !616, line: 7000, type: !1790)
!2315 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "options", scope: !2310, file: !616, line: 7001, type: !314)
!2316 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !2310, file: !616, line: 7002, type: !314)
!2317 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2318, file: !616, line: 7007, type: !871)
!2318 = distinct !DILexicalBlock(scope: !2310, file: !616, line: 7007, column: 5)
!2319 = !DISubprogram(name: "posix_getsid", scope: !616, file: !616, line: 7591, type: !396, isLocal: true, isDefinition: true, scopeLine: 7592, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getsid, variables: !2320)
!2320 = !{!2321, !2322, !2323, !2324}
!2321 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2319, file: !616, line: 7591, type: !276)
!2322 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2319, file: !616, line: 7591, type: !276)
!2323 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !2319, file: !616, line: 7593, type: !1790)
!2324 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sid", scope: !2319, file: !616, line: 7594, type: !314)
!2325 = !DISubprogram(name: "posix_setsid", scope: !616, file: !616, line: 7611, type: !396, isLocal: true, isDefinition: true, scopeLine: 7612, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_setsid, variables: !2326)
!2326 = !{!2327, !2328}
!2327 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2325, file: !616, line: 7611, type: !276)
!2328 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !2325, file: !616, line: 7611, type: !276)
!2329 = !DISubprogram(name: "posix_setpgid", scope: !616, file: !616, line: 7626, type: !396, isLocal: true, isDefinition: true, scopeLine: 7627, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_setpgid, variables: !2330)
!2330 = !{!2331, !2332, !2333, !2334}
!2331 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2329, file: !616, line: 7626, type: !276)
!2332 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2329, file: !616, line: 7626, type: !276)
!2333 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !2329, file: !616, line: 7628, type: !1790)
!2334 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pgrp", scope: !2329, file: !616, line: 7629, type: !314)
!2335 = !DISubprogram(name: "posix_tcgetpgrp", scope: !616, file: !616, line: 7646, type: !396, isLocal: true, isDefinition: true, scopeLine: 7647, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_tcgetpgrp, variables: !2336)
!2336 = !{!2337, !2338, !2339, !2340}
!2337 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2335, file: !616, line: 7646, type: !276)
!2338 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2335, file: !616, line: 7646, type: !276)
!2339 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2335, file: !616, line: 7648, type: !314)
!2340 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pgid", scope: !2335, file: !616, line: 7649, type: !1790)
!2341 = !DISubprogram(name: "posix_tcsetpgrp", scope: !616, file: !616, line: 7666, type: !396, isLocal: true, isDefinition: true, scopeLine: 7667, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_tcsetpgrp, variables: !2342)
!2342 = !{!2343, !2344, !2345, !2346}
!2343 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2341, file: !616, line: 7666, type: !276)
!2344 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2341, file: !616, line: 7666, type: !276)
!2345 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2341, file: !616, line: 7668, type: !314)
!2346 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pgid", scope: !2341, file: !616, line: 7669, type: !1790)
!2347 = !DISubprogram(name: "posix_open", scope: !616, file: !616, line: 7695, type: !405, isLocal: true, isDefinition: true, scopeLine: 7696, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_open, variables: !2348)
!2348 = !{!2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359}
!2349 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2347, file: !616, line: 7695, type: !276)
!2350 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2347, file: !616, line: 7695, type: !276)
!2351 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !2347, file: !616, line: 7695, type: !276)
!2352 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !2347, file: !616, line: 7697, type: !615)
!2353 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !2347, file: !616, line: 7698, type: !314)
!2354 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mode", scope: !2347, file: !616, line: 7699, type: !314)
!2355 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !2347, file: !616, line: 7700, type: !314)
!2356 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2347, file: !616, line: 7701, type: !314)
!2357 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !2347, file: !616, line: 7702, type: !276)
!2358 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_flag_works", scope: !2347, file: !616, line: 7705, type: !688)
!2359 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2360, file: !616, line: 7729, type: !871)
!2360 = distinct !DILexicalBlock(scope: !2347, file: !616, line: 7729, column: 5)
!2361 = !DISubprogram(name: "posix_close_", scope: !616, file: !616, line: 7771, type: !396, isLocal: true, isDefinition: true, scopeLine: 7772, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_close_, variables: !2362)
!2362 = !{!2363, !2364, !2365, !2366, !2367}
!2363 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2361, file: !616, line: 7771, type: !276)
!2364 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2361, file: !616, line: 7771, type: !276)
!2365 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2361, file: !616, line: 7773, type: !314)
!2366 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2361, file: !616, line: 7773, type: !314)
!2367 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2368, file: !616, line: 7778, type: !871)
!2368 = distinct !DILexicalBlock(scope: !2361, file: !616, line: 7778, column: 5)
!2369 = !DISubprogram(name: "posix_closerange", scope: !616, file: !616, line: 7793, type: !396, isLocal: true, isDefinition: true, scopeLine: 7794, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_closerange, variables: !2370)
!2370 = !{!2371, !2372, !2373, !2374, !2375, !2376}
!2371 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2369, file: !616, line: 7793, type: !276)
!2372 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2369, file: !616, line: 7793, type: !276)
!2373 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd_from", scope: !2369, file: !616, line: 7795, type: !314)
!2374 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd_to", scope: !2369, file: !616, line: 7795, type: !314)
!2375 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !2369, file: !616, line: 7795, type: !314)
!2376 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2377, file: !616, line: 7798, type: !871)
!2377 = distinct !DILexicalBlock(scope: !2369, file: !616, line: 7798, column: 5)
!2378 = !DISubprogram(name: "device_encoding", scope: !616, file: !616, line: 10491, type: !396, isLocal: true, isDefinition: true, scopeLine: 10492, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @device_encoding, variables: !2379)
!2379 = !{!2380, !2381, !2382}
!2380 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2378, file: !616, line: 10491, type: !276)
!2381 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2378, file: !616, line: 10491, type: !276)
!2382 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2378, file: !616, line: 10493, type: !314)
!2383 = !DISubprogram(name: "posix_dup", scope: !616, file: !616, line: 7812, type: !396, isLocal: true, isDefinition: true, scopeLine: 7813, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_dup, variables: !2384)
!2384 = !{!2385, !2386, !2387}
!2385 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2383, file: !616, line: 7812, type: !276)
!2386 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2383, file: !616, line: 7812, type: !276)
!2387 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2383, file: !616, line: 7814, type: !314)
!2388 = !DISubprogram(name: "posix_dup2", scope: !616, file: !616, line: 7832, type: !405, isLocal: true, isDefinition: true, scopeLine: 7833, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_dup2, variables: !2389)
!2389 = !{!2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2402}
!2390 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2388, file: !616, line: 7832, type: !276)
!2391 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2388, file: !616, line: 7832, type: !276)
!2392 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !2388, file: !616, line: 7832, type: !276)
!2393 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2388, file: !616, line: 7835, type: !314)
!2394 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd2", scope: !2388, file: !616, line: 7835, type: !314)
!2395 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "inheritable", scope: !2388, file: !616, line: 7836, type: !314)
!2396 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2388, file: !616, line: 7837, type: !314)
!2397 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dup3_works", scope: !2388, file: !616, line: 7841, type: !314)
!2398 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2399, file: !616, line: 7878, type: !871)
!2399 = distinct !DILexicalBlock(scope: !2400, file: !616, line: 7878, column: 9)
!2400 = distinct !DILexicalBlock(scope: !2401, file: !616, line: 7877, column: 42)
!2401 = distinct !DILexicalBlock(scope: !2388, file: !616, line: 7877, column: 9)
!2402 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2403, file: !616, line: 7892, type: !871)
!2403 = distinct !DILexicalBlock(scope: !2404, file: !616, line: 7892, column: 9)
!2404 = distinct !DILexicalBlock(scope: !2405, file: !616, line: 7890, column: 5)
!2405 = distinct !DILexicalBlock(scope: !2388, file: !616, line: 7889, column: 9)
!2406 = !DISubprogram(name: "posix_lockf", scope: !616, file: !616, line: 7922, type: !396, isLocal: true, isDefinition: true, scopeLine: 7923, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_lockf, variables: !2407)
!2407 = !{!2408, !2409, !2410, !2411, !2412, !2413, !2414}
!2408 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2406, file: !616, line: 7922, type: !276)
!2409 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2406, file: !616, line: 7922, type: !276)
!2410 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2406, file: !616, line: 7924, type: !314)
!2411 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmd", scope: !2406, file: !616, line: 7924, type: !314)
!2412 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2406, file: !616, line: 7924, type: !314)
!2413 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !2406, file: !616, line: 7925, type: !671)
!2414 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2415, file: !616, line: 7930, type: !871)
!2415 = distinct !DILexicalBlock(scope: !2406, file: !616, line: 7930, column: 5)
!2416 = !DISubprogram(name: "_parse_off_t", scope: !616, file: !616, line: 1005, type: !535, isLocal: true, isDefinition: true, scopeLine: 1006, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i8*)* @_parse_off_t, variables: !2417)
!2417 = !{!2418, !2419}
!2418 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 1, scope: !2416, file: !616, line: 1005, type: !276)
!2419 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addr", arg: 2, scope: !2416, file: !616, line: 1005, type: !275)
!2420 = !DISubprogram(name: "posix_lseek", scope: !616, file: !616, line: 7948, type: !396, isLocal: true, isDefinition: true, scopeLine: 7949, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_lseek, variables: !2421)
!2421 = !{!2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429}
!2422 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2420, file: !616, line: 7948, type: !276)
!2423 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2420, file: !616, line: 7948, type: !276)
!2424 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2420, file: !616, line: 7950, type: !314)
!2425 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "how", scope: !2420, file: !616, line: 7950, type: !314)
!2426 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pos", scope: !2420, file: !616, line: 7954, type: !671)
!2427 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2420, file: !616, line: 7954, type: !671)
!2428 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "posobj", scope: !2420, file: !616, line: 7956, type: !276)
!2429 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2430, file: !616, line: 7978, type: !871)
!2430 = distinct !DILexicalBlock(scope: !2420, file: !616, line: 7978, column: 5)
!2431 = !DISubprogram(name: "posix_read", scope: !616, file: !616, line: 8001, type: !396, isLocal: true, isDefinition: true, scopeLine: 8002, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_read, variables: !2432)
!2432 = !{!2433, !2434, !2435, !2436, !2437, !2438, !2439, !2441}
!2433 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2431, file: !616, line: 8001, type: !276)
!2434 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2431, file: !616, line: 8001, type: !276)
!2435 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2431, file: !616, line: 8003, type: !314)
!2436 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !2431, file: !616, line: 8003, type: !314)
!2437 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !2431, file: !616, line: 8004, type: !282)
!2438 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffer", scope: !2431, file: !616, line: 8005, type: !276)
!2439 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2440, file: !616, line: 8019, type: !871)
!2440 = distinct !DILexicalBlock(scope: !2431, file: !616, line: 8019, column: 5)
!2441 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2442, file: !616, line: 8023, type: !276)
!2442 = distinct !DILexicalBlock(scope: !2443, file: !616, line: 8023, column: 12)
!2443 = distinct !DILexicalBlock(scope: !2444, file: !616, line: 8022, column: 16)
!2444 = distinct !DILexicalBlock(scope: !2431, file: !616, line: 8022, column: 9)
!2445 = !DISubprogram(name: "posix_readv", scope: !616, file: !616, line: 8100, type: !396, isLocal: true, isDefinition: true, scopeLine: 8101, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_readv, variables: !2446)
!2446 = !{!2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455}
!2447 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2445, file: !616, line: 8100, type: !276)
!2448 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2445, file: !616, line: 8100, type: !276)
!2449 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2445, file: !616, line: 8102, type: !314)
!2450 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cnt", scope: !2445, file: !616, line: 8102, type: !314)
!2451 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !2445, file: !616, line: 8103, type: !282)
!2452 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "seq", scope: !2445, file: !616, line: 8104, type: !276)
!2453 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "iov", scope: !2445, file: !616, line: 8105, type: !672)
!2454 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !2445, file: !616, line: 8106, type: !505)
!2455 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2456, file: !616, line: 8120, type: !871)
!2456 = distinct !DILexicalBlock(scope: !2445, file: !616, line: 8120, column: 5)
!2457 = !DISubprogram(name: "iov_setup", scope: !616, file: !616, line: 8034, type: !2458, isLocal: true, isDefinition: true, scopeLine: 8035, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct.iovec**, %struct.bufferinfo**, %struct._object*, i32, i32)* @iov_setup, variables: !2462)
!2458 = !DISubroutineType(types: !2459)
!2459 = !{!282, !2460, !2461, !276, !314, !314}
!2460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !672, size: 64, align: 64)
!2461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !505, size: 64, align: 64)
!2462 = !{!2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2471, !2472, !2476, !2480}
!2463 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "iov", arg: 1, scope: !2457, file: !616, line: 8034, type: !2460)
!2464 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "buf", arg: 2, scope: !2457, file: !616, line: 8034, type: !2461)
!2465 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "seq", arg: 3, scope: !2457, file: !616, line: 8034, type: !276)
!2466 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cnt", arg: 4, scope: !2457, file: !616, line: 8034, type: !314)
!2467 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "type", arg: 5, scope: !2457, file: !616, line: 8034, type: !314)
!2468 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !2457, file: !616, line: 8036, type: !314)
!2469 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !2457, file: !616, line: 8036, type: !314)
!2470 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "blen", scope: !2457, file: !616, line: 8037, type: !282)
!2471 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "total", scope: !2457, file: !616, line: 8037, type: !282)
!2472 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !2473, file: !616, line: 8053, type: !276)
!2473 = distinct !DILexicalBlock(scope: !2474, file: !616, line: 8052, column: 31)
!2474 = distinct !DILexicalBlock(scope: !2475, file: !616, line: 8052, column: 5)
!2475 = distinct !DILexicalBlock(scope: !2457, file: !616, line: 8052, column: 5)
!2476 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2477, file: !616, line: 8057, type: !276)
!2477 = distinct !DILexicalBlock(scope: !2478, file: !616, line: 8057, column: 16)
!2478 = distinct !DILexicalBlock(scope: !2479, file: !616, line: 8056, column: 63)
!2479 = distinct !DILexicalBlock(scope: !2473, file: !616, line: 8056, column: 13)
!2480 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2481, file: !616, line: 8060, type: !276)
!2481 = distinct !DILexicalBlock(scope: !2473, file: !616, line: 8060, column: 12)
!2482 = !DISubprogram(name: "iov_cleanup", scope: !616, file: !616, line: 8078, type: !2483, isLocal: true, isDefinition: true, scopeLine: 8079, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct.iovec*, %struct.bufferinfo*, i32)* @iov_cleanup, variables: !2485)
!2483 = !DISubroutineType(types: !2484)
!2484 = !{null, !672, !505, !314}
!2485 = !{!2486, !2487, !2488, !2489}
!2486 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "iov", arg: 1, scope: !2482, file: !616, line: 8078, type: !672)
!2487 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "buf", arg: 2, scope: !2482, file: !616, line: 8078, type: !505)
!2488 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cnt", arg: 3, scope: !2482, file: !616, line: 8078, type: !314)
!2489 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !2482, file: !616, line: 8080, type: !314)
!2490 = !DISubprogram(name: "posix_pread", scope: !616, file: !616, line: 8139, type: !396, isLocal: true, isDefinition: true, scopeLine: 8140, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_pread, variables: !2491)
!2491 = !{!2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2501}
!2492 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2490, file: !616, line: 8139, type: !276)
!2493 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2490, file: !616, line: 8139, type: !276)
!2494 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2490, file: !616, line: 8141, type: !314)
!2495 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !2490, file: !616, line: 8141, type: !314)
!2496 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "offset", scope: !2490, file: !616, line: 8142, type: !671)
!2497 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !2490, file: !616, line: 8143, type: !282)
!2498 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffer", scope: !2490, file: !616, line: 8144, type: !276)
!2499 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2500, file: !616, line: 8159, type: !871)
!2500 = distinct !DILexicalBlock(scope: !2490, file: !616, line: 8159, column: 5)
!2501 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2502, file: !616, line: 8163, type: !276)
!2502 = distinct !DILexicalBlock(scope: !2503, file: !616, line: 8163, column: 12)
!2503 = distinct !DILexicalBlock(scope: !2504, file: !616, line: 8162, column: 16)
!2504 = distinct !DILexicalBlock(scope: !2490, file: !616, line: 8162, column: 9)
!2505 = !DISubprogram(name: "posix_write", scope: !616, file: !616, line: 8177, type: !396, isLocal: true, isDefinition: true, scopeLine: 8178, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_write, variables: !2506)
!2506 = !{!2507, !2508, !2509, !2510, !2511, !2512, !2513}
!2507 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2505, file: !616, line: 8177, type: !276)
!2508 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2505, file: !616, line: 8177, type: !276)
!2509 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pbuf", scope: !2505, file: !616, line: 8179, type: !506)
!2510 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2505, file: !616, line: 8180, type: !314)
!2511 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !2505, file: !616, line: 8181, type: !282)
!2512 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !2505, file: !616, line: 8181, type: !282)
!2513 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2514, file: !616, line: 8190, type: !871)
!2514 = distinct !DILexicalBlock(scope: !2505, file: !616, line: 8190, column: 5)
!2515 = !DISubprogram(name: "posix_writev", scope: !616, file: !616, line: 8497, type: !396, isLocal: true, isDefinition: true, scopeLine: 8498, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_writev, variables: !2516)
!2516 = !{!2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525}
!2517 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2515, file: !616, line: 8497, type: !276)
!2518 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2515, file: !616, line: 8497, type: !276)
!2519 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2515, file: !616, line: 8499, type: !314)
!2520 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cnt", scope: !2515, file: !616, line: 8499, type: !314)
!2521 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2515, file: !616, line: 8500, type: !282)
!2522 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "seq", scope: !2515, file: !616, line: 8501, type: !276)
!2523 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "iov", scope: !2515, file: !616, line: 8502, type: !672)
!2524 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !2515, file: !616, line: 8503, type: !505)
!2525 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2526, file: !616, line: 8517, type: !871)
!2526 = distinct !DILexicalBlock(scope: !2515, file: !616, line: 8517, column: 5)
!2527 = !DISubprogram(name: "posix_pwrite", scope: !616, file: !616, line: 8536, type: !396, isLocal: true, isDefinition: true, scopeLine: 8537, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_pwrite, variables: !2528)
!2528 = !{!2529, !2530, !2531, !2532, !2533, !2534, !2535}
!2529 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2527, file: !616, line: 8536, type: !276)
!2530 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2527, file: !616, line: 8536, type: !276)
!2531 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pbuf", scope: !2527, file: !616, line: 8538, type: !506)
!2532 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2527, file: !616, line: 8539, type: !314)
!2533 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "offset", scope: !2527, file: !616, line: 8540, type: !671)
!2534 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !2527, file: !616, line: 8541, type: !282)
!2535 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2536, file: !616, line: 8550, type: !871)
!2536 = distinct !DILexicalBlock(scope: !2527, file: !616, line: 8550, column: 5)
!2537 = !DISubprogram(name: "posix_sendfile", scope: !616, file: !616, line: 8213, type: !405, isLocal: true, isDefinition: true, scopeLine: 8214, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_sendfile, variables: !2538)
!2538 = !{!2539, !2540, !2541, !2542, !2543, !2544, !2545, !2546, !2547, !2548, !2552}
!2539 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2537, file: !616, line: 8213, type: !276)
!2540 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2537, file: !616, line: 8213, type: !276)
!2541 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwdict", arg: 3, scope: !2537, file: !616, line: 8213, type: !276)
!2542 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "in", scope: !2537, file: !616, line: 8215, type: !314)
!2543 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "out", scope: !2537, file: !616, line: 8215, type: !314)
!2544 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !2537, file: !616, line: 8216, type: !282)
!2545 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "offset", scope: !2537, file: !616, line: 8217, type: !671)
!2546 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !2537, file: !616, line: 8316, type: !282)
!2547 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "offobj", scope: !2537, file: !616, line: 8317, type: !276)
!2548 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2549, file: !616, line: 8325, type: !871)
!2549 = distinct !DILexicalBlock(scope: !2550, file: !616, line: 8325, column: 9)
!2550 = distinct !DILexicalBlock(scope: !2551, file: !616, line: 8324, column: 38)
!2551 = distinct !DILexicalBlock(scope: !2537, file: !616, line: 8324, column: 9)
!2552 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2553, file: !616, line: 8335, type: !871)
!2553 = distinct !DILexicalBlock(scope: !2537, file: !616, line: 8335, column: 5)
!2554 = !DISubprogram(name: "posix_fstat", scope: !616, file: !616, line: 8351, type: !396, isLocal: true, isDefinition: true, scopeLine: 8352, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_fstat, variables: !2555)
!2555 = !{!2556, !2557, !2558, !2559, !2560, !2561}
!2556 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2554, file: !616, line: 8351, type: !276)
!2557 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2554, file: !616, line: 8351, type: !276)
!2558 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2554, file: !616, line: 8353, type: !314)
!2559 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "st", scope: !2554, file: !616, line: 8354, type: !835)
!2560 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2554, file: !616, line: 8355, type: !314)
!2561 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2562, file: !616, line: 8358, type: !871)
!2562 = distinct !DILexicalBlock(scope: !2554, file: !616, line: 8358, column: 5)
!2563 = !DISubprogram(name: "posix_isatty", scope: !616, file: !616, line: 8378, type: !396, isLocal: true, isDefinition: true, scopeLine: 8379, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_isatty, variables: !2564)
!2564 = !{!2565, !2566, !2567}
!2565 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2563, file: !616, line: 8378, type: !276)
!2566 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2563, file: !616, line: 8378, type: !276)
!2567 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2563, file: !616, line: 8380, type: !314)
!2568 = !DISubprogram(name: "posix_pipe", scope: !616, file: !616, line: 8394, type: !396, isLocal: true, isDefinition: true, scopeLine: 8395, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_pipe, variables: !2569)
!2569 = !{!2570, !2571, !2572, !2574, !2575, !2577}
!2570 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2568, file: !616, line: 8394, type: !276)
!2571 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !2568, file: !616, line: 8394, type: !276)
!2572 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fds", scope: !2568, file: !616, line: 8396, type: !2573)
!2573 = !DICompositeType(tag: DW_TAG_array_type, baseType: !314, size: 64, align: 32, elements: !1579)
!2574 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2568, file: !616, line: 8402, type: !314)
!2575 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2576, file: !616, line: 8428, type: !871)
!2576 = distinct !DILexicalBlock(scope: !2568, file: !616, line: 8428, column: 5)
!2577 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2578, file: !616, line: 8435, type: !871)
!2578 = distinct !DILexicalBlock(scope: !2579, file: !616, line: 8435, column: 9)
!2579 = distinct !DILexicalBlock(scope: !2580, file: !616, line: 8433, column: 5)
!2580 = distinct !DILexicalBlock(scope: !2568, file: !616, line: 8432, column: 9)
!2581 = !DISubprogram(name: "posix_pipe2", scope: !616, file: !616, line: 8471, type: !396, isLocal: true, isDefinition: true, scopeLine: 8472, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_pipe2, variables: !2582)
!2582 = !{!2583, !2584, !2585, !2586, !2587}
!2583 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2581, file: !616, line: 8471, type: !276)
!2584 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !2581, file: !616, line: 8471, type: !276)
!2585 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !2581, file: !616, line: 8473, type: !314)
!2586 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fds", scope: !2581, file: !616, line: 8474, type: !2573)
!2587 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2581, file: !616, line: 8475, type: !314)
!2588 = !DISubprogram(name: "posix_mkfifo", scope: !616, file: !616, line: 8571, type: !405, isLocal: true, isDefinition: true, scopeLine: 8572, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_mkfifo, variables: !2589)
!2589 = !{!2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598}
!2590 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2588, file: !616, line: 8571, type: !276)
!2591 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2588, file: !616, line: 8571, type: !276)
!2592 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !2588, file: !616, line: 8571, type: !276)
!2593 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !2588, file: !616, line: 8573, type: !615)
!2594 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mode", scope: !2588, file: !616, line: 8574, type: !314)
!2595 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !2588, file: !616, line: 8575, type: !314)
!2596 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2588, file: !616, line: 8576, type: !314)
!2597 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !2588, file: !616, line: 8577, type: !276)
!2598 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2599, file: !616, line: 8592, type: !871)
!2599 = distinct !DILexicalBlock(scope: !2588, file: !616, line: 8592, column: 5)
!2600 = !DISubprogram(name: "posix_mknod", scope: !616, file: !616, line: 8632, type: !405, isLocal: true, isDefinition: true, scopeLine: 8633, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_mknod, variables: !2601)
!2601 = !{!2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611}
!2602 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2600, file: !616, line: 8632, type: !276)
!2603 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2600, file: !616, line: 8632, type: !276)
!2604 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !2600, file: !616, line: 8632, type: !276)
!2605 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !2600, file: !616, line: 8634, type: !615)
!2606 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mode", scope: !2600, file: !616, line: 8635, type: !314)
!2607 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "device", scope: !2600, file: !616, line: 8636, type: !314)
!2608 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !2600, file: !616, line: 8637, type: !314)
!2609 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2600, file: !616, line: 8638, type: !314)
!2610 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !2600, file: !616, line: 8639, type: !276)
!2611 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2612, file: !616, line: 8654, type: !871)
!2612 = distinct !DILexicalBlock(scope: !2600, file: !616, line: 8654, column: 5)
!2613 = !DISubprogram(name: "mknodat", scope: !949, file: !949, line: 492, type: !2614, isLocal: false, isDefinition: true, scopeLine: 494, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i32, i8*, i32, i64)* @mknodat, variables: !2616)
!2614 = !DISubroutineType(types: !2615)
!2615 = !{!314, !314, !299, !845, !839}
!2616 = !{!2617, !2618, !2619, !2620}
!2617 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__fd", arg: 1, scope: !2613, file: !949, line: 492, type: !314)
!2618 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__path", arg: 2, scope: !2613, file: !949, line: 492, type: !299)
!2619 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__mode", arg: 3, scope: !2613, file: !949, line: 492, type: !845)
!2620 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__dev", arg: 4, scope: !2613, file: !949, line: 492, type: !839)
!2621 = !DISubprogram(name: "mknod", scope: !949, file: !949, line: 484, type: !2622, isLocal: false, isDefinition: true, scopeLine: 485, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i8*, i32, i64)* @mknod, variables: !2624)
!2622 = !DISubroutineType(types: !2623)
!2623 = !{!314, !299, !845, !839}
!2624 = !{!2625, !2626, !2627}
!2625 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__path", arg: 1, scope: !2621, file: !949, line: 484, type: !299)
!2626 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__mode", arg: 2, scope: !2621, file: !949, line: 484, type: !845)
!2627 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__dev", arg: 3, scope: !2621, file: !949, line: 484, type: !839)
!2628 = !DISubprogram(name: "posix_major", scope: !616, file: !616, line: 8683, type: !396, isLocal: true, isDefinition: true, scopeLine: 8684, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_major, variables: !2629)
!2629 = !{!2630, !2631, !2632}
!2630 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2628, file: !616, line: 8683, type: !276)
!2631 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2628, file: !616, line: 8683, type: !276)
!2632 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "device", scope: !2628, file: !616, line: 8685, type: !314)
!2633 = !DISubprogram(name: "gnu_dev_major", scope: !2634, file: !2634, line: 44, type: !2635, isLocal: false, isDefinition: true, scopeLine: 45, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i64)* @gnu_dev_major, variables: !2637)
!2634 = !DIFile(filename: "/usr/include/sys/sysmacros.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!2635 = !DISubroutineType(types: !2636)
!2636 = !{!272, !678}
!2637 = !{!2638}
!2638 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__dev", arg: 1, scope: !2633, file: !2634, line: 44, type: !678)
!2639 = !DISubprogram(name: "posix_minor", scope: !616, file: !616, line: 8696, type: !396, isLocal: true, isDefinition: true, scopeLine: 8697, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_minor, variables: !2640)
!2640 = !{!2641, !2642, !2643}
!2641 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2639, file: !616, line: 8696, type: !276)
!2642 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2639, file: !616, line: 8696, type: !276)
!2643 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "device", scope: !2639, file: !616, line: 8698, type: !314)
!2644 = !DISubprogram(name: "gnu_dev_minor", scope: !2634, file: !2634, line: 50, type: !2635, isLocal: false, isDefinition: true, scopeLine: 51, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i64)* @gnu_dev_minor, variables: !2645)
!2645 = !{!2646}
!2646 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__dev", arg: 1, scope: !2644, file: !2634, line: 50, type: !678)
!2647 = !DISubprogram(name: "posix_makedev", scope: !616, file: !616, line: 8709, type: !396, isLocal: true, isDefinition: true, scopeLine: 8710, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_makedev, variables: !2648)
!2648 = !{!2649, !2650, !2651, !2652}
!2649 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2647, file: !616, line: 8709, type: !276)
!2650 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2647, file: !616, line: 8709, type: !276)
!2651 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "major", scope: !2647, file: !616, line: 8711, type: !314)
!2652 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "minor", scope: !2647, file: !616, line: 8711, type: !314)
!2653 = !DISubprogram(name: "gnu_dev_makedev", scope: !2634, file: !2634, line: 56, type: !2654, isLocal: false, isDefinition: true, scopeLine: 57, flags: DIFlagPrototyped, isOptimized: true, function: i64 (i32, i32)* @gnu_dev_makedev, variables: !2656)
!2654 = !DISubroutineType(types: !2655)
!2655 = !{!678, !272, !272}
!2656 = !{!2657, !2658}
!2657 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__major", arg: 1, scope: !2653, file: !2634, line: 56, type: !272)
!2658 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__minor", arg: 2, scope: !2653, file: !2634, line: 56, type: !272)
!2659 = !DISubprogram(name: "posix_ftruncate", scope: !616, file: !616, line: 8725, type: !396, isLocal: true, isDefinition: true, scopeLine: 8726, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_ftruncate, variables: !2660)
!2660 = !{!2661, !2662, !2663, !2664, !2665, !2666}
!2661 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2659, file: !616, line: 8725, type: !276)
!2662 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2659, file: !616, line: 8725, type: !276)
!2663 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2659, file: !616, line: 8727, type: !314)
!2664 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "length", scope: !2659, file: !616, line: 8728, type: !671)
!2665 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2659, file: !616, line: 8729, type: !314)
!2666 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2667, file: !616, line: 8734, type: !871)
!2667 = distinct !DILexicalBlock(scope: !2659, file: !616, line: 8734, column: 5)
!2668 = !DISubprogram(name: "posix_truncate", scope: !616, file: !616, line: 8752, type: !405, isLocal: true, isDefinition: true, scopeLine: 8753, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_truncate, variables: !2669)
!2669 = !{!2670, !2671, !2672, !2673, !2674, !2675, !2676, !2677}
!2670 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2668, file: !616, line: 8752, type: !276)
!2671 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2668, file: !616, line: 8752, type: !276)
!2672 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !2668, file: !616, line: 8752, type: !276)
!2673 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !2668, file: !616, line: 8754, type: !615)
!2674 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "length", scope: !2668, file: !616, line: 8755, type: !671)
!2675 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2668, file: !616, line: 8756, type: !314)
!2676 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2668, file: !616, line: 8757, type: !276)
!2677 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2678, file: !616, line: 8770, type: !871)
!2678 = distinct !DILexicalBlock(scope: !2668, file: !616, line: 8770, column: 5)
!2679 = !DISubprogram(name: "posix_posix_fallocate", scope: !616, file: !616, line: 8796, type: !396, isLocal: true, isDefinition: true, scopeLine: 8797, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_posix_fallocate, variables: !2680)
!2680 = !{!2681, !2682, !2683, !2684, !2685, !2686, !2687}
!2681 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2679, file: !616, line: 8796, type: !276)
!2682 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2679, file: !616, line: 8796, type: !276)
!2683 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !2679, file: !616, line: 8798, type: !671)
!2684 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "offset", scope: !2679, file: !616, line: 8798, type: !671)
!2685 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2679, file: !616, line: 8799, type: !314)
!2686 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2679, file: !616, line: 8799, type: !314)
!2687 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2688, file: !616, line: 8805, type: !871)
!2688 = distinct !DILexicalBlock(scope: !2679, file: !616, line: 8805, column: 5)
!2689 = !DISubprogram(name: "posix_posix_fadvise", scope: !616, file: !616, line: 8828, type: !396, isLocal: true, isDefinition: true, scopeLine: 8829, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_posix_fadvise, variables: !2690)
!2690 = !{!2691, !2692, !2693, !2694, !2695, !2696, !2697, !2698}
!2691 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2689, file: !616, line: 8828, type: !276)
!2692 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2689, file: !616, line: 8828, type: !276)
!2693 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !2689, file: !616, line: 8830, type: !671)
!2694 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "offset", scope: !2689, file: !616, line: 8830, type: !671)
!2695 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2689, file: !616, line: 8831, type: !314)
!2696 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2689, file: !616, line: 8831, type: !314)
!2697 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "advice", scope: !2689, file: !616, line: 8831, type: !314)
!2698 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2699, file: !616, line: 8837, type: !871)
!2699 = distinct !DILexicalBlock(scope: !2689, file: !616, line: 8837, column: 5)
!2700 = !DISubprogram(name: "posix_putenv", scope: !616, file: !616, line: 8858, type: !396, isLocal: true, isDefinition: true, scopeLine: 8859, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_putenv, variables: !2701)
!2701 = !{!2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2714, !2716, !2718, !2720, !2722, !2724}
!2702 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2700, file: !616, line: 8858, type: !276)
!2703 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2700, file: !616, line: 8858, type: !276)
!2704 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newstr", scope: !2700, file: !616, line: 8860, type: !276)
!2705 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "os1", scope: !2700, file: !616, line: 8890, type: !276)
!2706 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "os2", scope: !2700, file: !616, line: 8890, type: !276)
!2707 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s1", scope: !2700, file: !616, line: 8891, type: !322)
!2708 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s2", scope: !2700, file: !616, line: 8891, type: !322)
!2709 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newenv", scope: !2700, file: !616, line: 8892, type: !322)
!2710 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2711, file: !616, line: 8924, type: !276)
!2711 = distinct !DILexicalBlock(scope: !2712, file: !616, line: 8924, column: 12)
!2712 = distinct !DILexicalBlock(scope: !2713, file: !616, line: 8923, column: 10)
!2713 = distinct !DILexicalBlock(scope: !2700, file: !616, line: 8919, column: 9)
!2714 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2715, file: !616, line: 8928, type: !276)
!2715 = distinct !DILexicalBlock(scope: !2700, file: !616, line: 8928, column: 8)
!2716 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2717, file: !616, line: 8929, type: !276)
!2717 = distinct !DILexicalBlock(scope: !2700, file: !616, line: 8929, column: 8)
!2718 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2719, file: !616, line: 8935, type: !276)
!2719 = distinct !DILexicalBlock(scope: !2700, file: !616, line: 8935, column: 8)
!2720 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2721, file: !616, line: 8936, type: !276)
!2721 = distinct !DILexicalBlock(scope: !2700, file: !616, line: 8936, column: 8)
!2722 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !2723, file: !616, line: 8938, type: !276)
!2723 = distinct !DILexicalBlock(scope: !2700, file: !616, line: 8938, column: 8)
!2724 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2725, file: !616, line: 8938, type: !276)
!2725 = distinct !DILexicalBlock(scope: !2726, file: !616, line: 8938, column: 98)
!2726 = distinct !DILexicalBlock(scope: !2723, file: !616, line: 8938, column: 64)
!2727 = !DISubprogram(name: "posix_unsetenv", scope: !616, file: !616, line: 8949, type: !396, isLocal: true, isDefinition: true, scopeLine: 8950, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_unsetenv, variables: !2728)
!2728 = !{!2729, !2730, !2731, !2732, !2733, !2737}
!2729 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2727, file: !616, line: 8949, type: !276)
!2730 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2727, file: !616, line: 8949, type: !276)
!2731 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "name", scope: !2727, file: !616, line: 8951, type: !276)
!2732 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "err", scope: !2727, file: !616, line: 8953, type: !314)
!2733 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2734, file: !616, line: 8966, type: !276)
!2734 = distinct !DILexicalBlock(scope: !2735, file: !616, line: 8966, column: 12)
!2735 = distinct !DILexicalBlock(scope: !2736, file: !616, line: 8965, column: 14)
!2736 = distinct !DILexicalBlock(scope: !2727, file: !616, line: 8965, column: 9)
!2737 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2738, file: !616, line: 8980, type: !276)
!2738 = distinct !DILexicalBlock(scope: !2727, file: !616, line: 8980, column: 8)
!2739 = !DISubprogram(name: "posix_strerror", scope: !616, file: !616, line: 8990, type: !396, isLocal: true, isDefinition: true, scopeLine: 8991, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_strerror, variables: !2740)
!2740 = !{!2741, !2742, !2743, !2744}
!2741 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2739, file: !616, line: 8990, type: !276)
!2742 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2739, file: !616, line: 8990, type: !276)
!2743 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "code", scope: !2739, file: !616, line: 8992, type: !314)
!2744 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "message", scope: !2739, file: !616, line: 8993, type: !322)
!2745 = !DISubprogram(name: "posix_fchdir", scope: !616, file: !616, line: 2877, type: !396, isLocal: true, isDefinition: true, scopeLine: 2878, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_fchdir, variables: !2746)
!2746 = !{!2747, !2748}
!2747 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2745, file: !616, line: 2877, type: !276)
!2748 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fdobj", arg: 2, scope: !2745, file: !616, line: 2877, type: !276)
!2749 = !DISubprogram(name: "posix_fildes", scope: !616, file: !616, line: 1332, type: !2750, isLocal: true, isDefinition: true, scopeLine: 1333, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i32 (i32)*)* @posix_fildes, variables: !2755)
!2750 = !DISubroutineType(types: !2751)
!2751 = !{!276, !276, !2752}
!2752 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2753, size: 64, align: 64)
!2753 = !DISubroutineType(types: !2754)
!2754 = !{!314, !314}
!2755 = !{!2756, !2757, !2758, !2759, !2760}
!2756 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fdobj", arg: 1, scope: !2749, file: !616, line: 1332, type: !276)
!2757 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "func", arg: 2, scope: !2749, file: !616, line: 1332, type: !2752)
!2758 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2749, file: !616, line: 1334, type: !314)
!2759 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2749, file: !616, line: 1335, type: !314)
!2760 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2761, file: !616, line: 1341, type: !871)
!2761 = distinct !DILexicalBlock(scope: !2749, file: !616, line: 1341, column: 5)
!2762 = !DISubprogram(name: "posix_fsync", scope: !616, file: !616, line: 3188, type: !396, isLocal: true, isDefinition: true, scopeLine: 3189, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_fsync, variables: !2763)
!2763 = !{!2764, !2765}
!2764 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2762, file: !616, line: 3188, type: !276)
!2765 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fdobj", arg: 2, scope: !2762, file: !616, line: 3188, type: !276)
!2766 = !DISubprogram(name: "posix_sync", scope: !616, file: !616, line: 3200, type: !396, isLocal: true, isDefinition: true, scopeLine: 3201, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_sync, variables: !2767)
!2767 = !{!2768, !2769, !2770}
!2768 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2766, file: !616, line: 3200, type: !276)
!2769 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !2766, file: !616, line: 3200, type: !276)
!2770 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2771, file: !616, line: 3202, type: !871)
!2771 = distinct !DILexicalBlock(scope: !2766, file: !616, line: 3202, column: 5)
!2772 = !DISubprogram(name: "posix_fdatasync", scope: !616, file: !616, line: 3221, type: !396, isLocal: true, isDefinition: true, scopeLine: 3222, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_fdatasync, variables: !2773)
!2773 = !{!2774, !2775}
!2774 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2772, file: !616, line: 3221, type: !276)
!2775 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fdobj", arg: 2, scope: !2772, file: !616, line: 3221, type: !276)
!2776 = !DISubprogram(name: "posix_WCOREDUMP", scope: !616, file: !616, line: 9014, type: !396, isLocal: true, isDefinition: true, scopeLine: 9015, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_WCOREDUMP, variables: !2777)
!2777 = !{!2778, !2779, !2780}
!2778 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2776, file: !616, line: 9014, type: !276)
!2779 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2776, file: !616, line: 9014, type: !276)
!2780 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !2776, file: !616, line: 9016, type: !314)
!2781 = !DISubprogram(name: "posix_WIFCONTINUED", scope: !616, file: !616, line: 9033, type: !396, isLocal: true, isDefinition: true, scopeLine: 9034, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_WIFCONTINUED, variables: !2782)
!2782 = !{!2783, !2784, !2785}
!2783 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2781, file: !616, line: 9033, type: !276)
!2784 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2781, file: !616, line: 9033, type: !276)
!2785 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !2781, file: !616, line: 9035, type: !314)
!2786 = !DISubprogram(name: "posix_WIFSTOPPED", scope: !616, file: !616, line: 9051, type: !396, isLocal: true, isDefinition: true, scopeLine: 9052, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_WIFSTOPPED, variables: !2787)
!2787 = !{!2788, !2789, !2790}
!2788 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2786, file: !616, line: 9051, type: !276)
!2789 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2786, file: !616, line: 9051, type: !276)
!2790 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !2786, file: !616, line: 9053, type: !314)
!2791 = !DISubprogram(name: "posix_WIFSIGNALED", scope: !616, file: !616, line: 9069, type: !396, isLocal: true, isDefinition: true, scopeLine: 9070, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_WIFSIGNALED, variables: !2792)
!2792 = !{!2793, !2794, !2795}
!2793 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2791, file: !616, line: 9069, type: !276)
!2794 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2791, file: !616, line: 9069, type: !276)
!2795 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !2791, file: !616, line: 9071, type: !314)
!2796 = !DISubprogram(name: "posix_WIFEXITED", scope: !616, file: !616, line: 9088, type: !396, isLocal: true, isDefinition: true, scopeLine: 9089, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_WIFEXITED, variables: !2797)
!2797 = !{!2798, !2799, !2800}
!2798 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2796, file: !616, line: 9088, type: !276)
!2799 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2796, file: !616, line: 9088, type: !276)
!2800 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !2796, file: !616, line: 9090, type: !314)
!2801 = !DISubprogram(name: "posix_WEXITSTATUS", scope: !616, file: !616, line: 9106, type: !396, isLocal: true, isDefinition: true, scopeLine: 9107, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_WEXITSTATUS, variables: !2802)
!2802 = !{!2803, !2804, !2805}
!2803 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2801, file: !616, line: 9106, type: !276)
!2804 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2801, file: !616, line: 9106, type: !276)
!2805 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !2801, file: !616, line: 9108, type: !314)
!2806 = !DISubprogram(name: "posix_WTERMSIG", scope: !616, file: !616, line: 9125, type: !396, isLocal: true, isDefinition: true, scopeLine: 9126, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_WTERMSIG, variables: !2807)
!2807 = !{!2808, !2809, !2810}
!2808 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2806, file: !616, line: 9125, type: !276)
!2809 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2806, file: !616, line: 9125, type: !276)
!2810 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !2806, file: !616, line: 9127, type: !314)
!2811 = !DISubprogram(name: "posix_WSTOPSIG", scope: !616, file: !616, line: 9144, type: !396, isLocal: true, isDefinition: true, scopeLine: 9145, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_WSTOPSIG, variables: !2812)
!2812 = !{!2813, !2814, !2815}
!2813 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2811, file: !616, line: 9144, type: !276)
!2814 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2811, file: !616, line: 9144, type: !276)
!2815 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !2811, file: !616, line: 9146, type: !314)
!2816 = !DISubprogram(name: "posix_fstatvfs", scope: !616, file: !616, line: 9216, type: !396, isLocal: true, isDefinition: true, scopeLine: 9217, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_fstatvfs, variables: !2817)
!2817 = !{!2818, !2819, !2820, !2821, !2822, !2840}
!2818 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2816, file: !616, line: 9216, type: !276)
!2819 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2816, file: !616, line: 9216, type: !276)
!2820 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2816, file: !616, line: 9218, type: !314)
!2821 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !2816, file: !616, line: 9218, type: !314)
!2822 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "st", scope: !2816, file: !616, line: 9219, type: !2823)
!2823 = !DICompositeType(tag: DW_TAG_structure_type, name: "statvfs", file: !239, line: 29, size: 896, align: 64, elements: !2824)
!2824 = !{!2825, !2826, !2827, !2829, !2830, !2831, !2833, !2834, !2835, !2836, !2837, !2838}
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "f_bsize", scope: !2823, file: !239, line: 31, baseType: !366, size: 64, align: 64)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "f_frsize", scope: !2823, file: !239, line: 32, baseType: !366, size: 64, align: 64, offset: 64)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "f_blocks", scope: !2823, file: !239, line: 41, baseType: !2828, size: 64, align: 64, offset: 128)
!2828 = !DIDerivedType(tag: DW_TAG_typedef, name: "__fsblkcnt64_t", file: !271, line: 172, baseType: !366)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "f_bfree", scope: !2823, file: !239, line: 42, baseType: !2828, size: 64, align: 64, offset: 192)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "f_bavail", scope: !2823, file: !239, line: 43, baseType: !2828, size: 64, align: 64, offset: 256)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "f_files", scope: !2823, file: !239, line: 44, baseType: !2832, size: 64, align: 64, offset: 320)
!2832 = !DIDerivedType(tag: DW_TAG_typedef, name: "__fsfilcnt64_t", file: !271, line: 176, baseType: !366)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "f_ffree", scope: !2823, file: !239, line: 45, baseType: !2832, size: 64, align: 64, offset: 384)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "f_favail", scope: !2823, file: !239, line: 46, baseType: !2832, size: 64, align: 64, offset: 448)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "f_fsid", scope: !2823, file: !239, line: 48, baseType: !366, size: 64, align: 64, offset: 512)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "f_flag", scope: !2823, file: !239, line: 52, baseType: !366, size: 64, align: 64, offset: 576)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "f_namemax", scope: !2823, file: !239, line: 53, baseType: !366, size: 64, align: 64, offset: 640)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "__f_spare", scope: !2823, file: !239, line: 54, baseType: !2839, size: 192, align: 32, offset: 704)
!2839 = !DICompositeType(tag: DW_TAG_array_type, baseType: !314, size: 192, align: 32, elements: !1533)
!2840 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2841, file: !616, line: 9223, type: !871)
!2841 = distinct !DILexicalBlock(scope: !2816, file: !616, line: 9223, column: 5)
!2842 = !DISubprogram(name: "_pystatvfs_fromstructstatvfs", scope: !616, file: !616, line: 9168, type: !2843, isLocal: true, isDefinition: true, scopeLine: 9168, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.statvfs*)* @_pystatvfs_fromstructstatvfs, variables: !2845)
!2843 = !DISubroutineType(types: !2844)
!2844 = !{!276, !2823}
!2845 = !{!2846, !2847, !2848}
!2846 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "st", arg: 1, scope: !2842, file: !616, line: 9168, type: !2823)
!2847 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !2842, file: !616, line: 9169, type: !276)
!2848 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2849, file: !616, line: 9203, type: !276)
!2849 = distinct !DILexicalBlock(scope: !2850, file: !616, line: 9203, column: 12)
!2850 = distinct !DILexicalBlock(scope: !2851, file: !616, line: 9202, column: 27)
!2851 = distinct !DILexicalBlock(scope: !2842, file: !616, line: 9202, column: 9)
!2852 = !DISubprogram(name: "posix_statvfs", scope: !616, file: !616, line: 9246, type: !405, isLocal: true, isDefinition: true, scopeLine: 9247, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_statvfs, variables: !2853)
!2853 = !{!2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861}
!2854 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2852, file: !616, line: 9246, type: !276)
!2855 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2852, file: !616, line: 9246, type: !276)
!2856 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !2852, file: !616, line: 9246, type: !276)
!2857 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !2852, file: !616, line: 9249, type: !615)
!2858 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2852, file: !616, line: 9250, type: !314)
!2859 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !2852, file: !616, line: 9251, type: !276)
!2860 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "st", scope: !2852, file: !616, line: 9252, type: !2823)
!2861 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !2862, file: !616, line: 9264, type: !871)
!2862 = distinct !DILexicalBlock(scope: !2852, file: !616, line: 9264, column: 5)
!2863 = !DISubprogram(name: "posix_confstr", scope: !616, file: !616, line: 9717, type: !396, isLocal: true, isDefinition: true, scopeLine: 9718, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_confstr, variables: !2864)
!2864 = !{!2865, !2866, !2867, !2868, !2869, !2873, !2874}
!2865 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2863, file: !616, line: 9717, type: !276)
!2866 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2863, file: !616, line: 9717, type: !276)
!2867 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2863, file: !616, line: 9719, type: !276)
!2868 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "name", scope: !2863, file: !616, line: 9720, type: !314)
!2869 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffer", scope: !2863, file: !616, line: 9721, type: !2870)
!2870 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2040, align: 8, elements: !2871)
!2871 = !{!2872}
!2872 = !DISubrange(count: 255)
!2873 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !2863, file: !616, line: 9722, type: !364)
!2874 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !2875, file: !616, line: 9740, type: !322)
!2875 = distinct !DILexicalBlock(scope: !2876, file: !616, line: 9739, column: 32)
!2876 = distinct !DILexicalBlock(scope: !2863, file: !616, line: 9739, column: 9)
!2877 = !DISubprogram(name: "conv_confstr_confname", scope: !616, file: !616, line: 9705, type: !2878, isLocal: true, isDefinition: true, scopeLine: 9706, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i32*)* @conv_confstr_confname, variables: !2880)
!2878 = !DISubroutineType(types: !2879)
!2879 = !{!314, !276, !688}
!2880 = !{!2881, !2882}
!2881 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 1, scope: !2877, file: !616, line: 9705, type: !276)
!2882 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "valuep", arg: 2, scope: !2877, file: !616, line: 9705, type: !688)
!2883 = !DISubprogram(name: "conv_confname", scope: !616, file: !616, line: 9337, type: !2884, isLocal: true, isDefinition: true, scopeLine: 9339, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i32*, %struct.constdef*, i64)* @conv_confname, variables: !2887)
!2884 = !DISubroutineType(types: !2885)
!2885 = !{!314, !276, !688, !2886, !364}
!2886 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !681, size: 64, align: 64)
!2887 = !{!2888, !2889, !2890, !2891, !2892, !2895, !2896, !2897, !2898, !2899, !2902}
!2888 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 1, scope: !2883, file: !616, line: 9337, type: !276)
!2889 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "valuep", arg: 2, scope: !2883, file: !616, line: 9337, type: !688)
!2890 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "table", arg: 3, scope: !2883, file: !616, line: 9337, type: !2886)
!2891 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "tablesize", arg: 4, scope: !2883, file: !616, line: 9338, type: !364)
!2892 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "lo", scope: !2893, file: !616, line: 9346, type: !364)
!2893 = distinct !DILexicalBlock(scope: !2894, file: !616, line: 9344, column: 10)
!2894 = distinct !DILexicalBlock(scope: !2883, file: !616, line: 9340, column: 9)
!2895 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mid", scope: !2893, file: !616, line: 9347, type: !364)
!2896 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hi", scope: !2893, file: !616, line: 9348, type: !364)
!2897 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmp", scope: !2893, file: !616, line: 9349, type: !314)
!2898 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "confname", scope: !2893, file: !616, line: 9350, type: !299)
!2899 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__s1_len", scope: !2900, file: !616, line: 9361, type: !364)
!2900 = distinct !DILexicalBlock(scope: !2901, file: !616, line: 9361, column: 34)
!2901 = distinct !DILexicalBlock(scope: !2893, file: !616, line: 9359, column: 25)
!2902 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__s2_len", scope: !2900, file: !616, line: 9361, type: !364)
!2903 = !DISubprogram(name: "posix_sysconf", scope: !616, file: !616, line: 10263, type: !396, isLocal: true, isDefinition: true, scopeLine: 10264, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_sysconf, variables: !2904)
!2904 = !{!2905, !2906, !2907, !2908, !2909}
!2905 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2903, file: !616, line: 10263, type: !276)
!2906 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2903, file: !616, line: 10263, type: !276)
!2907 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2903, file: !616, line: 10265, type: !276)
!2908 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "name", scope: !2903, file: !616, line: 10266, type: !314)
!2909 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "value", scope: !2910, file: !616, line: 10269, type: !287)
!2910 = distinct !DILexicalBlock(scope: !2911, file: !616, line: 10268, column: 84)
!2911 = distinct !DILexicalBlock(scope: !2903, file: !616, line: 10268, column: 9)
!2912 = !DISubprogram(name: "conv_sysconf_confname", scope: !616, file: !616, line: 10251, type: !2878, isLocal: true, isDefinition: true, scopeLine: 10252, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i32*)* @conv_sysconf_confname, variables: !2913)
!2913 = !{!2914, !2915}
!2914 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 1, scope: !2912, file: !616, line: 10251, type: !276)
!2915 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "valuep", arg: 2, scope: !2912, file: !616, line: 10251, type: !688)
!2916 = !DISubprogram(name: "posix_fpathconf", scope: !616, file: !616, line: 9481, type: !396, isLocal: true, isDefinition: true, scopeLine: 9482, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_fpathconf, variables: !2917)
!2917 = !{!2918, !2919, !2920, !2921, !2922, !2923}
!2918 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2916, file: !616, line: 9481, type: !276)
!2919 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2916, file: !616, line: 9481, type: !276)
!2920 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2916, file: !616, line: 9483, type: !276)
!2921 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "name", scope: !2916, file: !616, line: 9484, type: !314)
!2922 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !2916, file: !616, line: 9484, type: !314)
!2923 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "limit", scope: !2924, file: !616, line: 9488, type: !287)
!2924 = distinct !DILexicalBlock(scope: !2925, file: !616, line: 9487, column: 54)
!2925 = distinct !DILexicalBlock(scope: !2916, file: !616, line: 9486, column: 9)
!2926 = !DISubprogram(name: "conv_path_confname", scope: !616, file: !616, line: 9466, type: !2878, isLocal: true, isDefinition: true, scopeLine: 9467, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i32*)* @conv_path_confname, variables: !2927)
!2927 = !{!2928, !2929}
!2928 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 1, scope: !2926, file: !616, line: 9466, type: !276)
!2929 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "valuep", arg: 2, scope: !2926, file: !616, line: 9466, type: !688)
!2930 = !DISubprogram(name: "posix_pathconf", scope: !616, file: !616, line: 9511, type: !405, isLocal: true, isDefinition: true, scopeLine: 9512, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_pathconf, variables: !2931)
!2931 = !{!2932, !2933, !2934, !2935, !2936, !2937, !2938}
!2932 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2930, file: !616, line: 9511, type: !276)
!2933 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2930, file: !616, line: 9511, type: !276)
!2934 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !2930, file: !616, line: 9511, type: !276)
!2935 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !2930, file: !616, line: 9513, type: !615)
!2936 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2930, file: !616, line: 9514, type: !276)
!2937 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "name", scope: !2930, file: !616, line: 9515, type: !314)
!2938 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "limit", scope: !2939, file: !616, line: 9526, type: !287)
!2939 = distinct !DILexicalBlock(scope: !2940, file: !616, line: 9525, column: 65)
!2940 = distinct !DILexicalBlock(scope: !2930, file: !616, line: 9523, column: 9)
!2941 = !DISubprogram(name: "posix_abort", scope: !616, file: !616, line: 10363, type: !396, isLocal: true, isDefinition: true, scopeLine: 10364, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_abort, variables: !2942)
!2942 = !{!2943, !2944}
!2943 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2941, file: !616, line: 10363, type: !276)
!2944 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !2941, file: !616, line: 10363, type: !276)
!2945 = !DISubprogram(name: "posix_getloadavg", scope: !616, file: !616, line: 10474, type: !396, isLocal: true, isDefinition: true, scopeLine: 10475, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getloadavg, variables: !2946)
!2946 = !{!2947, !2948, !2949}
!2947 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2945, file: !616, line: 10474, type: !276)
!2948 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !2945, file: !616, line: 10474, type: !276)
!2949 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "loadavg", scope: !2945, file: !616, line: 10476, type: !2950)
!2950 = !DICompositeType(tag: DW_TAG_array_type, baseType: !652, size: 192, align: 64, elements: !866)
!2951 = !DISubprogram(name: "posix_urandom", scope: !616, file: !616, line: 10890, type: !396, isLocal: true, isDefinition: true, scopeLine: 10891, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_urandom, variables: !2952)
!2952 = !{!2953, !2954, !2955, !2956, !2957, !2958}
!2953 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2951, file: !616, line: 10890, type: !276)
!2954 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2951, file: !616, line: 10890, type: !276)
!2955 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !2951, file: !616, line: 10892, type: !282)
!2956 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2951, file: !616, line: 10893, type: !276)
!2957 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !2951, file: !616, line: 10894, type: !314)
!2958 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2959, file: !616, line: 10909, type: !276)
!2959 = distinct !DILexicalBlock(scope: !2960, file: !616, line: 10909, column: 12)
!2960 = distinct !DILexicalBlock(scope: !2961, file: !616, line: 10908, column: 20)
!2961 = distinct !DILexicalBlock(scope: !2951, file: !616, line: 10908, column: 9)
!2962 = !DISubprogram(name: "posix_setresuid", scope: !616, file: !616, line: 10507, type: !396, isLocal: true, isDefinition: true, scopeLine: 10508, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_setresuid, variables: !2963)
!2963 = !{!2964, !2965, !2966, !2967, !2968}
!2964 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2962, file: !616, line: 10507, type: !276)
!2965 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2962, file: !616, line: 10507, type: !276)
!2966 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ruid", scope: !2962, file: !616, line: 10510, type: !268)
!2967 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "euid", scope: !2962, file: !616, line: 10510, type: !268)
!2968 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "suid", scope: !2962, file: !616, line: 10510, type: !268)
!2969 = !DISubprogram(name: "posix_setresgid", scope: !616, file: !616, line: 10528, type: !396, isLocal: true, isDefinition: true, scopeLine: 10529, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_setresgid, variables: !2970)
!2970 = !{!2971, !2972, !2973, !2974, !2975}
!2971 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2969, file: !616, line: 10528, type: !276)
!2972 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2969, file: !616, line: 10528, type: !276)
!2973 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rgid", scope: !2969, file: !616, line: 10530, type: !273)
!2974 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "egid", scope: !2969, file: !616, line: 10530, type: !273)
!2975 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sgid", scope: !2969, file: !616, line: 10530, type: !273)
!2976 = !DISubprogram(name: "posix_getresuid", scope: !616, file: !616, line: 10548, type: !396, isLocal: true, isDefinition: true, scopeLine: 10549, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getresuid, variables: !2977)
!2977 = !{!2978, !2979, !2980, !2981, !2982}
!2978 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2976, file: !616, line: 10548, type: !276)
!2979 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !2976, file: !616, line: 10548, type: !276)
!2980 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ruid", scope: !2976, file: !616, line: 10550, type: !268)
!2981 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "euid", scope: !2976, file: !616, line: 10550, type: !268)
!2982 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "suid", scope: !2976, file: !616, line: 10550, type: !268)
!2983 = !DISubprogram(name: "posix_getresgid", scope: !616, file: !616, line: 10565, type: !396, isLocal: true, isDefinition: true, scopeLine: 10566, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_getresgid, variables: !2984)
!2984 = !{!2985, !2986, !2987, !2988, !2989}
!2985 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2983, file: !616, line: 10565, type: !276)
!2986 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "noargs", arg: 2, scope: !2983, file: !616, line: 10565, type: !276)
!2987 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rgid", scope: !2983, file: !616, line: 10567, type: !268)
!2988 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "egid", scope: !2983, file: !616, line: 10567, type: !268)
!2989 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sgid", scope: !2983, file: !616, line: 10567, type: !268)
!2990 = !DISubprogram(name: "posix_setxattr", scope: !616, file: !616, line: 10665, type: !405, isLocal: true, isDefinition: true, scopeLine: 10666, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_setxattr, variables: !2991)
!2991 = !{!2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002}
!2992 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2990, file: !616, line: 10665, type: !276)
!2993 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2990, file: !616, line: 10665, type: !276)
!2994 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !2990, file: !616, line: 10665, type: !276)
!2995 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !2990, file: !616, line: 10667, type: !615)
!2996 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "attribute", scope: !2990, file: !616, line: 10668, type: !615)
!2997 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "value", scope: !2990, file: !616, line: 10669, type: !506)
!2998 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !2990, file: !616, line: 10670, type: !314)
!2999 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "follow_symlinks", scope: !2990, file: !616, line: 10671, type: !314)
!3000 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2990, file: !616, line: 10672, type: !314)
!3001 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !2990, file: !616, line: 10673, type: !276)
!3002 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !3003, file: !616, line: 10693, type: !871)
!3003 = distinct !DILexicalBlock(scope: !2990, file: !616, line: 10693, column: 5)
!3004 = !DISubprogram(name: "posix_getxattr", scope: !616, file: !616, line: 10588, type: !405, isLocal: true, isDefinition: true, scopeLine: 10589, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_getxattr, variables: !3005)
!3005 = !{!3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3018, !3019, !3020, !3022}
!3006 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !3004, file: !616, line: 10588, type: !276)
!3007 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !3004, file: !616, line: 10588, type: !276)
!3008 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !3004, file: !616, line: 10588, type: !276)
!3009 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !3004, file: !616, line: 10590, type: !615)
!3010 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "attribute", scope: !3004, file: !616, line: 10591, type: !615)
!3011 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "follow_symlinks", scope: !3004, file: !616, line: 10592, type: !314)
!3012 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffer", scope: !3004, file: !616, line: 10593, type: !276)
!3013 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !3004, file: !616, line: 10594, type: !314)
!3014 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ptr", scope: !3015, file: !616, line: 10612, type: !275)
!3015 = distinct !DILexicalBlock(scope: !3016, file: !616, line: 10611, column: 24)
!3016 = distinct !DILexicalBlock(scope: !3017, file: !616, line: 10611, column: 5)
!3017 = distinct !DILexicalBlock(scope: !3004, file: !616, line: 10611, column: 5)
!3018 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !3015, file: !616, line: 10613, type: !284)
!3019 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffer_size", scope: !3015, file: !616, line: 10615, type: !282)
!3020 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !3021, file: !616, line: 10625, type: !871)
!3021 = distinct !DILexicalBlock(scope: !3015, file: !616, line: 10625, column: 9)
!3022 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !3023, file: !616, line: 10635, type: !276)
!3023 = distinct !DILexicalBlock(scope: !3024, file: !616, line: 10635, column: 16)
!3024 = distinct !DILexicalBlock(scope: !3025, file: !616, line: 10634, column: 25)
!3025 = distinct !DILexicalBlock(scope: !3015, file: !616, line: 10634, column: 13)
!3026 = !DISubprogram(name: "posix_removexattr", scope: !616, file: !616, line: 10730, type: !405, isLocal: true, isDefinition: true, scopeLine: 10731, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_removexattr, variables: !3027)
!3027 = !{!3028, !3029, !3030, !3031, !3032, !3033, !3034, !3035, !3036}
!3028 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !3026, file: !616, line: 10730, type: !276)
!3029 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !3026, file: !616, line: 10730, type: !276)
!3030 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !3026, file: !616, line: 10730, type: !276)
!3031 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !3026, file: !616, line: 10732, type: !615)
!3032 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "attribute", scope: !3026, file: !616, line: 10733, type: !615)
!3033 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "follow_symlinks", scope: !3026, file: !616, line: 10734, type: !314)
!3034 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !3026, file: !616, line: 10735, type: !314)
!3035 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "return_value", scope: !3026, file: !616, line: 10736, type: !276)
!3036 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !3037, file: !616, line: 10754, type: !871)
!3037 = distinct !DILexicalBlock(scope: !3026, file: !616, line: 10754, column: 5)
!3038 = !DISubprogram(name: "posix_listxattr", scope: !616, file: !616, line: 10789, type: !405, isLocal: true, isDefinition: true, scopeLine: 10790, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @posix_listxattr, variables: !3039)
!3039 = !{!3040, !3041, !3042, !3043, !3044, !3045, !3046, !3047, !3048, !3049, !3053, !3054, !3055, !3056, !3057, !3059, !3065, !3066, !3070, !3072}
!3040 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !3038, file: !616, line: 10789, type: !276)
!3041 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !3038, file: !616, line: 10789, type: !276)
!3042 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !3038, file: !616, line: 10789, type: !276)
!3043 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !3038, file: !616, line: 10791, type: !615)
!3044 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "follow_symlinks", scope: !3038, file: !616, line: 10792, type: !314)
!3045 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !3038, file: !616, line: 10793, type: !282)
!3046 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !3038, file: !616, line: 10794, type: !276)
!3047 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffer", scope: !3038, file: !616, line: 10795, type: !322)
!3048 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "name", scope: !3038, file: !616, line: 10796, type: !322)
!3049 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !3050, file: !616, line: 10813, type: !322)
!3050 = distinct !DILexicalBlock(scope: !3051, file: !616, line: 10812, column: 24)
!3051 = distinct !DILexicalBlock(scope: !3052, file: !616, line: 10812, column: 5)
!3052 = distinct !DILexicalBlock(scope: !3038, file: !616, line: 10812, column: 5)
!3053 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "trace", scope: !3050, file: !616, line: 10813, type: !322)
!3054 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "end", scope: !3050, file: !616, line: 10813, type: !322)
!3055 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "length", scope: !3050, file: !616, line: 10814, type: !284)
!3056 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffer_size", scope: !3050, file: !616, line: 10816, type: !282)
!3057 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !3058, file: !616, line: 10828, type: !871)
!3058 = distinct !DILexicalBlock(scope: !3050, file: !616, line: 10828, column: 9)
!3059 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "error", scope: !3060, file: !616, line: 10855, type: !314)
!3060 = distinct !DILexicalBlock(scope: !3061, file: !616, line: 10854, column: 26)
!3061 = distinct !DILexicalBlock(scope: !3062, file: !616, line: 10854, column: 17)
!3062 = distinct !DILexicalBlock(scope: !3063, file: !616, line: 10853, column: 61)
!3063 = distinct !DILexicalBlock(scope: !3064, file: !616, line: 10853, column: 9)
!3064 = distinct !DILexicalBlock(scope: !3050, file: !616, line: 10853, column: 9)
!3065 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "attribute", scope: !3060, file: !616, line: 10856, type: !276)
!3066 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !3067, file: !616, line: 10859, type: !276)
!3067 = distinct !DILexicalBlock(scope: !3068, file: !616, line: 10859, column: 24)
!3068 = distinct !DILexicalBlock(scope: !3069, file: !616, line: 10858, column: 33)
!3069 = distinct !DILexicalBlock(scope: !3060, file: !616, line: 10858, column: 21)
!3070 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !3071, file: !616, line: 10864, type: !276)
!3071 = distinct !DILexicalBlock(scope: !3060, file: !616, line: 10864, column: 20)
!3072 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !3073, file: !616, line: 10866, type: !276)
!3073 = distinct !DILexicalBlock(scope: !3074, file: !616, line: 10866, column: 24)
!3074 = distinct !DILexicalBlock(scope: !3075, file: !616, line: 10865, column: 28)
!3075 = distinct !DILexicalBlock(scope: !3060, file: !616, line: 10865, column: 21)
!3076 = !DISubprogram(name: "get_terminal_size", scope: !616, file: !616, line: 10952, type: !396, isLocal: true, isDefinition: true, scopeLine: 10953, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @get_terminal_size, variables: !3077)
!3077 = !{!3078, !3079, !3080, !3081, !3082, !3083, !3084, !3093}
!3078 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !3076, file: !616, line: 10952, type: !276)
!3079 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !3076, file: !616, line: 10952, type: !276)
!3080 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "columns", scope: !3076, file: !616, line: 10954, type: !314)
!3081 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "lines", scope: !3076, file: !616, line: 10954, type: !314)
!3082 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "termsize", scope: !3076, file: !616, line: 10955, type: !276)
!3083 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !3076, file: !616, line: 10957, type: !314)
!3084 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "w", scope: !3085, file: !616, line: 10971, type: !3086)
!3085 = distinct !DILexicalBlock(scope: !3076, file: !616, line: 10970, column: 5)
!3086 = !DICompositeType(tag: DW_TAG_structure_type, name: "winsize", file: !3087, line: 27, size: 64, align: 16, elements: !3088)
!3087 = !DIFile(filename: "/usr/include/bits/ioctl-types.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!3088 = !{!3089, !3090, !3091, !3092}
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "ws_row", scope: !3086, file: !3087, line: 29, baseType: !347, size: 16, align: 16)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "ws_col", scope: !3086, file: !3087, line: 30, baseType: !347, size: 16, align: 16, offset: 16)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "ws_xpixel", scope: !3086, file: !3087, line: 31, baseType: !347, size: 16, align: 16, offset: 32)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "ws_ypixel", scope: !3086, file: !3087, line: 32, baseType: !347, size: 16, align: 16, offset: 48)
!3093 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !3094, file: !616, line: 11014, type: !276)
!3094 = distinct !DILexicalBlock(scope: !3095, file: !616, line: 11014, column: 12)
!3095 = distinct !DILexicalBlock(scope: !3096, file: !616, line: 11013, column: 27)
!3096 = distinct !DILexicalBlock(scope: !3076, file: !616, line: 11013, column: 9)
!3097 = !DISubprogram(name: "posix_cpu_count", scope: !616, file: !616, line: 11027, type: !386, isLocal: true, isDefinition: true, scopeLine: 11028, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @posix_cpu_count, variables: !3098)
!3098 = !{!3099, !3100}
!3099 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !3097, file: !616, line: 11027, type: !276)
!3100 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ncpu", scope: !3097, file: !616, line: 11029, type: !314)
!3101 = !DISubprogram(name: "posix_get_inheritable", scope: !616, file: !616, line: 11062, type: !396, isLocal: true, isDefinition: true, scopeLine: 11063, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_get_inheritable, variables: !3102)
!3102 = !{!3103, !3104, !3105, !3106}
!3103 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !3101, file: !616, line: 11062, type: !276)
!3104 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !3101, file: !616, line: 11062, type: !276)
!3105 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !3101, file: !616, line: 11064, type: !314)
!3106 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "inheritable", scope: !3101, file: !616, line: 11065, type: !314)
!3107 = !DISubprogram(name: "posix_set_inheritable", scope: !616, file: !616, line: 11085, type: !396, isLocal: true, isDefinition: true, scopeLine: 11086, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @posix_set_inheritable, variables: !3108)
!3108 = !{!3109, !3110, !3111, !3112}
!3109 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !3107, file: !616, line: 11085, type: !276)
!3110 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !3107, file: !616, line: 11085, type: !276)
!3111 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !3107, file: !616, line: 11087, type: !314)
!3112 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "inheritable", scope: !3107, file: !616, line: 11087, type: !314)
!3113 = !DISubprogram(name: "convertenviron", scope: !616, file: !616, line: 1185, type: !727, isLocal: true, isDefinition: true, scopeLine: 1186, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* ()* @convertenviron, variables: !3114)
!3114 = !{!3115, !3116, !3117, !3121, !3122, !3123, !3127, !3129}
!3115 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "d", scope: !3113, file: !616, line: 1187, type: !276)
!3116 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "e", scope: !3113, file: !616, line: 1191, type: !653)
!3117 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !3118, file: !616, line: 1237, type: !276)
!3118 = distinct !DILexicalBlock(scope: !3119, file: !616, line: 1236, column: 46)
!3119 = distinct !DILexicalBlock(scope: !3120, file: !616, line: 1236, column: 5)
!3120 = distinct !DILexicalBlock(scope: !3113, file: !616, line: 1236, column: 5)
!3121 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !3118, file: !616, line: 1238, type: !276)
!3122 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !3118, file: !616, line: 1239, type: !322)
!3123 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !3124, file: !616, line: 1250, type: !276)
!3124 = distinct !DILexicalBlock(scope: !3125, file: !616, line: 1250, column: 16)
!3125 = distinct !DILexicalBlock(scope: !3126, file: !616, line: 1248, column: 30)
!3126 = distinct !DILexicalBlock(scope: !3118, file: !616, line: 1248, column: 13)
!3127 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !3128, file: !616, line: 1257, type: !276)
!3128 = distinct !DILexicalBlock(scope: !3118, file: !616, line: 1257, column: 12)
!3129 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !3130, file: !616, line: 1258, type: !276)
!3130 = distinct !DILexicalBlock(scope: !3118, file: !616, line: 1258, column: 12)
!3131 = !DISubprogram(name: "all_ins", scope: !616, file: !616, line: 11647, type: !414, isLocal: true, isDefinition: true, scopeLine: 11648, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*)* @all_ins, variables: !3132)
!3132 = !{!3133}
!3133 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 1, scope: !3131, file: !616, line: 11647, type: !276)
!3134 = !DISubprogram(name: "setup_confname_tables", scope: !616, file: !616, line: 10330, type: !414, isLocal: true, isDefinition: true, scopeLine: 10331, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*)* @setup_confname_tables, variables: !3135)
!3135 = !{!3136}
!3136 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "module", arg: 1, scope: !3134, file: !616, line: 10330, type: !276)
!3137 = !DISubprogram(name: "setup_confname_table", scope: !616, file: !616, line: 10305, type: !3138, isLocal: true, isDefinition: true, scopeLine: 10307, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.constdef*, i64, i8*, %struct._object*)* @setup_confname_table, variables: !3140)
!3138 = !DISubroutineType(types: !3139)
!3139 = !{!314, !2886, !364, !322, !276}
!3140 = !{!3141, !3142, !3143, !3144, !3145, !3146, !3147, !3151, !3155, !3158, !3160}
!3141 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "table", arg: 1, scope: !3137, file: !616, line: 10305, type: !2886)
!3142 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "tablesize", arg: 2, scope: !3137, file: !616, line: 10305, type: !364)
!3143 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "tablename", arg: 3, scope: !3137, file: !616, line: 10306, type: !322)
!3144 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "module", arg: 4, scope: !3137, file: !616, line: 10306, type: !276)
!3145 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "d", scope: !3137, file: !616, line: 10308, type: !276)
!3146 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !3137, file: !616, line: 10309, type: !364)
!3147 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "o", scope: !3148, file: !616, line: 10317, type: !276)
!3148 = distinct !DILexicalBlock(scope: !3149, file: !616, line: 10316, column: 35)
!3149 = distinct !DILexicalBlock(scope: !3150, file: !616, line: 10316, column: 5)
!3150 = distinct !DILexicalBlock(scope: !3137, file: !616, line: 10316, column: 5)
!3151 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !3152, file: !616, line: 10319, type: !276)
!3152 = distinct !DILexicalBlock(scope: !3153, file: !616, line: 10319, column: 16)
!3153 = distinct !DILexicalBlock(scope: !3154, file: !616, line: 10318, column: 81)
!3154 = distinct !DILexicalBlock(scope: !3148, file: !616, line: 10318, column: 13)
!3155 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !3156, file: !616, line: 10319, type: !276)
!3156 = distinct !DILexicalBlock(scope: !3157, file: !616, line: 10319, column: 101)
!3157 = distinct !DILexicalBlock(scope: !3152, file: !616, line: 10319, column: 67)
!3158 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !3159, file: !616, line: 10320, type: !276)
!3159 = distinct !DILexicalBlock(scope: !3153, file: !616, line: 10320, column: 16)
!3160 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !3161, file: !616, line: 10323, type: !276)
!3161 = distinct !DILexicalBlock(scope: !3148, file: !616, line: 10323, column: 12)
!3162 = !DISubprogram(name: "cmp_constdefs", scope: !616, file: !616, line: 10294, type: !3163, isLocal: true, isDefinition: true, scopeLine: 10295, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i8*, i8*)* @cmp_constdefs, variables: !3167)
!3163 = !DISubroutineType(types: !3164)
!3164 = !{!314, !3165, !3165}
!3165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3166, size: 64, align: 64)
!3166 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!3167 = !{!3168, !3169, !3170, !3171, !3172, !3174}
!3168 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v1", arg: 1, scope: !3162, file: !616, line: 10294, type: !3165)
!3169 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v2", arg: 2, scope: !3162, file: !616, line: 10294, type: !3165)
!3170 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c1", scope: !3162, file: !616, line: 10296, type: !679)
!3171 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c2", scope: !3162, file: !616, line: 10298, type: !679)
!3172 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__s1_len", scope: !3173, file: !616, line: 10301, type: !364)
!3173 = distinct !DILexicalBlock(scope: !3162, file: !616, line: 10301, column: 27)
!3174 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__s2_len", scope: !3173, file: !616, line: 10301, type: !364)
!3175 = !DISubprogram(name: "statresult_new", scope: !616, file: !616, line: 2105, type: !3176, isLocal: true, isDefinition: true, scopeLine: 2106, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @statresult_new, variables: !3178)
!3176 = !DISubroutineType(types: !3177)
!3177 = !{!276, !668, !276, !276}
!3178 = !{!3179, !3180, !3181, !3182, !3183, !3184}
!3179 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "type", arg: 1, scope: !3175, file: !616, line: 2105, type: !668)
!3180 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !3175, file: !616, line: 2105, type: !276)
!3181 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwds", arg: 3, scope: !3175, file: !616, line: 2105, type: !276)
!3182 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !3175, file: !616, line: 2107, type: !685)
!3183 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !3175, file: !616, line: 2108, type: !314)
!3184 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !3185, file: !616, line: 2118, type: !276)
!3185 = distinct !DILexicalBlock(scope: !3186, file: !616, line: 2118, column: 16)
!3186 = distinct !DILexicalBlock(scope: !3187, file: !616, line: 2117, column: 56)
!3187 = distinct !DILexicalBlock(scope: !3188, file: !616, line: 2117, column: 13)
!3188 = distinct !DILexicalBlock(scope: !3189, file: !616, line: 2116, column: 30)
!3189 = distinct !DILexicalBlock(scope: !3190, file: !616, line: 2116, column: 5)
!3190 = distinct !DILexicalBlock(scope: !3175, file: !616, line: 2116, column: 5)
!3191 = !DISubprogram(name: "sched_param_new", scope: !616, file: !616, line: 5621, type: !3176, isLocal: true, isDefinition: true, scopeLine: 5622, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @sched_param_new, variables: !3192)
!3192 = !{!3193, !3194, !3195, !3196, !3197}
!3193 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "type", arg: 1, scope: !3191, file: !616, line: 5621, type: !668)
!3194 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !3191, file: !616, line: 5621, type: !276)
!3195 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !3191, file: !616, line: 5621, type: !276)
!3196 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !3191, file: !616, line: 5623, type: !276)
!3197 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "priority", scope: !3191, file: !616, line: 5623, type: !276)
!3198 = !DISubprogram(name: "fd_specified", scope: !616, file: !616, line: 939, type: !3199, isLocal: true, isDefinition: true, scopeLine: 939, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i8*, i32)* @fd_specified, variables: !3201)
!3199 = !DISubroutineType(types: !3200)
!3200 = !{!314, !322, !314}
!3201 = !{!3202, !3203}
!3202 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "function_name", arg: 1, scope: !3198, file: !616, line: 939, type: !322)
!3203 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fd", arg: 2, scope: !3198, file: !616, line: 939, type: !314)
!3204 = !DISubprogram(name: "argument_unavailable_error", scope: !616, file: !616, line: 916, type: !3205, isLocal: true, isDefinition: true, scopeLine: 916, flags: DIFlagPrototyped, isOptimized: true, function: void (i8*, i8*)* @argument_unavailable_error, variables: !3207)
!3205 = !DISubroutineType(types: !3206)
!3206 = !{null, !322, !322}
!3207 = !{!3208, !3209}
!3208 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "function_name", arg: 1, scope: !3204, file: !616, line: 916, type: !322)
!3209 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argument_name", arg: 2, scope: !3204, file: !616, line: 916, type: !322)
!3210 = !DISubprogram(name: "follow_symlinks_specified", scope: !616, file: !616, line: 948, type: !3199, isLocal: true, isDefinition: true, scopeLine: 948, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i8*, i32)* @follow_symlinks_specified, variables: !3211)
!3211 = !{!3212, !3213}
!3212 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "function_name", arg: 1, scope: !3210, file: !616, line: 948, type: !322)
!3213 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "follow_symlinks", arg: 2, scope: !3210, file: !616, line: 948, type: !314)
!3214 = !DISubprogram(name: "dir_fd_and_follow_symlinks_invalid", scope: !616, file: !616, line: 991, type: !937, isLocal: true, isDefinition: true, scopeLine: 992, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i8*, i32, i32)* @dir_fd_and_follow_symlinks_invalid, variables: !3215)
!3215 = !{!3216, !3217, !3218}
!3216 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "function_name", arg: 1, scope: !3214, file: !616, line: 991, type: !322)
!3217 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dir_fd", arg: 2, scope: !3214, file: !616, line: 991, type: !314)
!3218 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "follow_symlinks", arg: 3, scope: !3214, file: !616, line: 992, type: !314)
!3219 = !DISubprogram(name: "dir_fd_converter", scope: !616, file: !616, line: 671, type: !535, isLocal: true, isDefinition: true, scopeLine: 672, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i8*)* @dir_fd_converter, variables: !3220)
!3220 = !{!3221, !3222}
!3221 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !3219, file: !616, line: 671, type: !276)
!3222 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "p", arg: 2, scope: !3219, file: !616, line: 671, type: !275)
!3223 = !DISubprogram(name: "dir_fd_unavailable", scope: !616, file: !616, line: 925, type: !535, isLocal: true, isDefinition: true, scopeLine: 926, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i8*)* @dir_fd_unavailable, variables: !3224)
!3224 = !{!3225, !3226, !3227}
!3225 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !3223, file: !616, line: 925, type: !276)
!3226 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "p", arg: 2, scope: !3223, file: !616, line: 925, type: !275)
!3227 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dir_fd", scope: !3223, file: !616, line: 927, type: !314)
!3228 = !{!3229, !3230, !3231, !3232, !3233, !3234, !3235, !3236, !3237, !3238, !3239, !3240, !3244, !3248, !3252, !3253, !3257, !3258, !3262, !3266, !3268, !3272, !3276, !3280, !3284, !3285, !3289, !3293, !3297, !3301, !3305, !3309, !3313, !3314, !3318, !3319, !3323, !3325, !3329, !3330, !3334, !3338, !3342, !3346, !3347, !3351, !3352, !3356, !3360, !3361, !3365, !3366, !3367, !3371, !3372, !3376, !3380, !3381, !3385, !3386, !3390, !3394, !3398, !3399, !3400, !3404, !3408, !3412, !3413, !3417, !3421, !3425, !3429, !3433, !3437, !3439, !3443, !3447, !3451, !3455, !3459, !3463, !3467, !3471, !3472, !3473, !3474, !3475, !3479, !3483, !3487, !3488, !3492, !3496, !3500, !3504, !3505, !3509, !3513, !3517, !3521, !3522, !3523, !3524, !3532, !3536, !3540, !3544, !3545, !3549, !3553, !3554, !3555, !3559, !3560, !3564, !3565, !3566, !3570, !3574, !3575, !3576, !3580, !3584, !3585, !3589, !3593, !3594, !3595, !3599, !3600, !3604, !3605, !3606, !3607, !3611, !3612, !3616, !3617, !3621, !3622, !3623, !3627, !3631, !3632, !3636, !3640, !3644, !3645, !3646, !3650, !3654, !3655, !3659, !3663, !3667, !3671, !3672, !3676, !3680, !3681, !3682, !3686, !3690, !3691, !3695, !3699, !3703, !3707, !3708, !3710, !3711, !3712, !3716, !3720, !3724, !3728, !3729, !3733, !3737, !3738, !3739, !3743, !3744, !3746, !3750, !3751, !3755, !3756, !3757, !3761, !3765, !3766, !3767, !3768, !3781, !3785, !3788, !3789, !3793, !3795, !3796, !3800, !3804, !3805, !3806, !3810, !3812, !3813, !3814, !3818, !3820, !3821, !3825, !3826, !3827, !3831, !3832, !3833}
!3229 = !DIGlobalVariable(name: "WaitidResultType", scope: !0, file: !616, line: 2093, type: !669, isLocal: true, isDefinition: true, variable: %struct._typeobject* @WaitidResultType)
!3230 = !DIGlobalVariable(name: "initialized", scope: !0, file: !616, line: 2096, type: !314, isLocal: true, isDefinition: true, variable: i32* @initialized)
!3231 = !DIGlobalVariable(name: "StatResultType", scope: !0, file: !616, line: 2097, type: !669, isLocal: true, isDefinition: true, variable: %struct._typeobject* @StatResultType)
!3232 = !DIGlobalVariable(name: "StatVFSResultType", scope: !0, file: !616, line: 2098, type: !669, isLocal: true, isDefinition: true, variable: %struct._typeobject* @StatVFSResultType)
!3233 = !DIGlobalVariable(name: "SchedParamType", scope: !0, file: !616, line: 2100, type: !669, isLocal: true, isDefinition: true, variable: %struct._typeobject* @SchedParamType)
!3234 = !DIGlobalVariable(name: "structseq_new", scope: !0, file: !616, line: 2102, type: !594, isLocal: true, isDefinition: true, variable: %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** @structseq_new)
!3235 = !DIGlobalVariable(name: "UnameResultType", scope: !0, file: !616, line: 4608, type: !669, isLocal: true, isDefinition: true, variable: %struct._typeobject* @UnameResultType)
!3236 = !DIGlobalVariable(name: "TimesResultType", scope: !0, file: !616, line: 7495, type: !669, isLocal: true, isDefinition: true, variable: %struct._typeobject* @TimesResultType)
!3237 = !DIGlobalVariable(name: "posix_putenv_garbage", scope: !0, file: !616, line: 8855, type: !276, isLocal: true, isDefinition: true, variable: %struct._object** @posix_putenv_garbage)
!3238 = !DIGlobalVariable(name: "TerminalSizeType", scope: !0, file: !616, line: 10917, type: !669, isLocal: true, isDefinition: true, variable: %struct._typeobject* @TerminalSizeType)
!3239 = !DIGlobalVariable(name: "posixmodule", scope: !0, file: !616, line: 12064, type: !752, isLocal: true, isDefinition: true, variable: %struct.PyModuleDef* @posixmodule)
!3240 = !DIGlobalVariable(name: "posix__doc__", scope: !0, file: !616, line: 36, type: !3241, isLocal: true, isDefinition: true, variable: [259 x i8]* @posix__doc__)
!3241 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2072, align: 8, elements: !3242)
!3242 = !{!3243}
!3243 = !DISubrange(count: 259)
!3244 = !DIGlobalVariable(name: "posix_methods", scope: !0, file: !616, line: 11163, type: !3245, isLocal: true, isDefinition: true, variable: [146 x %struct.PyMethodDef]* @posix_methods)
!3245 = !DICompositeType(tag: DW_TAG_array_type, baseType: !768, size: 37376, align: 64, elements: !3246)
!3246 = !{!3247}
!3247 = !DISubrange(count: 146)
!3248 = !DIGlobalVariable(name: "_keywords", scope: !746, file: !616, line: 2483, type: !3249, isLocal: true, isDefinition: true, variable: [4 x i8*]* @os_stat._keywords)
!3249 = !DICompositeType(tag: DW_TAG_array_type, baseType: !322, size: 256, align: 64, elements: !3250)
!3250 = !{!3251}
!3251 = !DISubrange(count: 4)
!3252 = !DIGlobalVariable(name: "_stat_float_times", scope: !0, file: !616, line: 2129, type: !314, isLocal: true, isDefinition: true, variable: i32* @_stat_float_times)
!3253 = !DIGlobalVariable(name: "os_stat__doc__", scope: !0, file: !616, line: 2449, type: !3254, isLocal: true, isDefinition: true, variable: [784 x i8]* @os_stat__doc__)
!3254 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 6272, align: 8, elements: !3255)
!3255 = !{!3256}
!3256 = !DISubrange(count: 784)
!3257 = !DIGlobalVariable(name: "_keywords", scope: !1064, file: !616, line: 2625, type: !1532, isLocal: true, isDefinition: true, variable: [6 x i8*]* @os_access._keywords)
!3258 = !DIGlobalVariable(name: "os_access__doc__", scope: !0, file: !616, line: 2583, type: !3259, isLocal: true, isDefinition: true, variable: [1149 x i8]* @os_access__doc__)
!3259 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 9192, align: 8, elements: !3260)
!3260 = !{!3261}
!3261 = !DISubrange(count: 1149)
!3262 = !DIGlobalVariable(name: "os_ttyname__doc__", scope: !0, file: !616, line: 2742, type: !3263, isLocal: true, isDefinition: true, variable: [128 x i8]* @os_ttyname__doc__)
!3263 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1024, align: 8, elements: !3264)
!3264 = !{!3265}
!3265 = !DISubrange(count: 128)
!3266 = !DIGlobalVariable(name: "keywords", scope: !1110, file: !616, line: 2828, type: !3267, isLocal: true, isDefinition: true, variable: [2 x i8*]* @posix_chdir.keywords)
!3267 = !DICompositeType(tag: DW_TAG_array_type, baseType: !322, size: 128, align: 64, elements: !1579)
!3268 = !DIGlobalVariable(name: "posix_chdir__doc__", scope: !0, file: !616, line: 2814, type: !3269, isLocal: true, isDefinition: true, variable: [260 x i8]* @posix_chdir__doc__)
!3269 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2080, align: 8, elements: !3270)
!3270 = !{!3271}
!3271 = !DISubrange(count: 260)
!3272 = !DIGlobalVariable(name: "keywords", scope: !1120, file: !616, line: 2910, type: !3273, isLocal: true, isDefinition: true, variable: [5 x i8*]* @posix_chmod.keywords)
!3273 = !DICompositeType(tag: DW_TAG_array_type, baseType: !322, size: 320, align: 64, elements: !3274)
!3274 = !{!3275}
!3275 = !DISubrange(count: 5)
!3276 = !DIGlobalVariable(name: "posix_chmod__doc__", scope: !0, file: !616, line: 2884, type: !3277, isLocal: true, isDefinition: true, variable: [845 x i8]* @posix_chmod__doc__)
!3277 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 6760, align: 8, elements: !3278)
!3278 = !{!3279}
!3279 = !DISubrange(count: 845)
!3280 = !DIGlobalVariable(name: "posix_fchmod__doc__", scope: !0, file: !616, line: 3031, type: !3281, isLocal: true, isDefinition: true, variable: [124 x i8]* @posix_fchmod__doc__)
!3281 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 992, align: 8, elements: !3282)
!3282 = !{!3283}
!3283 = !DISubrange(count: 124)
!3284 = !DIGlobalVariable(name: "keywords", scope: !1143, file: !616, line: 3256, type: !1532, isLocal: true, isDefinition: true, variable: [6 x i8*]* @posix_chown.keywords)
!3285 = !DIGlobalVariable(name: "posix_chown__doc__", scope: !0, file: !616, line: 3229, type: !3286, isLocal: true, isDefinition: true, variable: [874 x i8]* @posix_chown__doc__)
!3286 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 6992, align: 8, elements: !3287)
!3287 = !{!3288}
!3288 = !DISubrange(count: 874)
!3289 = !DIGlobalVariable(name: "posix_fchown__doc__", scope: !0, file: !616, line: 3332, type: !3290, isLocal: true, isDefinition: true, variable: [159 x i8]* @posix_fchown__doc__)
!3290 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1272, align: 8, elements: !3291)
!3291 = !{!3292}
!3292 = !DISubrange(count: 159)
!3293 = !DIGlobalVariable(name: "posix_lchown__doc__", scope: !0, file: !616, line: 3358, type: !3294, isLocal: true, isDefinition: true, variable: [199 x i8]* @posix_lchown__doc__)
!3294 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1592, align: 8, elements: !3295)
!3295 = !{!3296}
!3296 = !DISubrange(count: 199)
!3297 = !DIGlobalVariable(name: "posix_chroot__doc__", scope: !0, file: !616, line: 3171, type: !3298, isLocal: true, isDefinition: true, variable: [45 x i8]* @posix_chroot__doc__)
!3298 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 360, align: 8, elements: !3299)
!3299 = !{!3300}
!3300 = !DISubrange(count: 45)
!3301 = !DIGlobalVariable(name: "posix_ctermid__doc__", scope: !0, file: !616, line: 2793, type: !3302, isLocal: true, isDefinition: true, variable: [83 x i8]* @posix_ctermid__doc__)
!3302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 664, align: 8, elements: !3303)
!3303 = !{!3304}
!3304 = !DISubrange(count: 83)
!3305 = !DIGlobalVariable(name: "posix_getcwd__doc__", scope: !0, file: !616, line: 3445, type: !3306, isLocal: true, isDefinition: true, variable: [86 x i8]* @posix_getcwd__doc__)
!3306 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 688, align: 8, elements: !3307)
!3307 = !{!3308}
!3308 = !DISubrange(count: 86)
!3309 = !DIGlobalVariable(name: "posix_getcwdb__doc__", scope: !0, file: !616, line: 3455, type: !3310, isLocal: true, isDefinition: true, variable: [85 x i8]* @posix_getcwdb__doc__)
!3310 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 680, align: 8, elements: !3311)
!3311 = !{!3312}
!3312 = !DISubrange(count: 85)
!3313 = !DIGlobalVariable(name: "keywords", scope: !1223, file: !616, line: 3492, type: !1532, isLocal: true, isDefinition: true, variable: [6 x i8*]* @posix_link.keywords)
!3314 = !DIGlobalVariable(name: "posix_link__doc__", scope: !0, file: !616, line: 3470, type: !3315, isLocal: true, isDefinition: true, variable: [657 x i8]* @posix_link__doc__)
!3315 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 5256, align: 8, elements: !3316)
!3316 = !{!3317}
!3317 = !DISubrange(count: 657)
!3318 = !DIGlobalVariable(name: "keywords", scope: !1243, file: !616, line: 3850, type: !3267, isLocal: true, isDefinition: true, variable: [2 x i8*]* @posix_listdir.keywords)
!3319 = !DIGlobalVariable(name: "posix_listdir__doc__", scope: !0, file: !616, line: 3569, type: !3320, isLocal: true, isDefinition: true, variable: [611 x i8]* @posix_listdir__doc__)
!3320 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 4888, align: 8, elements: !3321)
!3321 = !{!3322}
!3322 = !DISubrange(count: 611)
!3323 = !DIGlobalVariable(name: "keywords", scope: !1328, file: !616, line: 2516, type: !3324, isLocal: true, isDefinition: true, variable: [3 x i8*]* @posix_lstat.keywords)
!3324 = !DICompositeType(tag: DW_TAG_array_type, baseType: !322, size: 192, align: 64, elements: !866)
!3325 = !DIGlobalVariable(name: "posix_lstat__doc__", scope: !0, file: !616, line: 2508, type: !3326, isLocal: true, isDefinition: true, variable: [140 x i8]* @posix_lstat__doc__)
!3326 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1120, align: 8, elements: !3327)
!3327 = !{!3328}
!3328 = !DISubrange(count: 140)
!3329 = !DIGlobalVariable(name: "keywords", scope: !1337, file: !616, line: 4105, type: !3249, isLocal: true, isDefinition: true, variable: [4 x i8*]* @posix_mkdir.keywords)
!3330 = !DIGlobalVariable(name: "posix_mkdir__doc__", scope: !0, file: !616, line: 4088, type: !3331, isLocal: true, isDefinition: true, variable: [371 x i8]* @posix_mkdir__doc__)
!3331 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2968, align: 8, elements: !3332)
!3332 = !{!3333}
!3333 = !DISubrange(count: 371)
!3334 = !DIGlobalVariable(name: "posix_nice__doc__", scope: !0, file: !616, line: 4166, type: !3335, isLocal: true, isDefinition: true, variable: [96 x i8]* @posix_nice__doc__)
!3335 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 768, align: 8, elements: !3336)
!3336 = !{!3337}
!3337 = !DISubrange(count: 96)
!3338 = !DIGlobalVariable(name: "posix_getpriority__doc__", scope: !0, file: !616, line: 4203, type: !3339, isLocal: true, isDefinition: true, variable: [78 x i8]* @posix_getpriority__doc__)
!3339 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 624, align: 8, elements: !3340)
!3340 = !{!3341}
!3341 = !DISubrange(count: 78)
!3342 = !DIGlobalVariable(name: "posix_setpriority__doc__", scope: !0, file: !616, line: 4224, type: !3343, isLocal: true, isDefinition: true, variable: [72 x i8]* @posix_setpriority__doc__)
!3343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 576, align: 8, elements: !3344)
!3344 = !{!3345}
!3345 = !DISubrange(count: 72)
!3346 = !DIGlobalVariable(name: "keywords", scope: !1370, file: !616, line: 7086, type: !3324, isLocal: true, isDefinition: true, variable: [3 x i8*]* @posix_readlink.keywords)
!3347 = !DIGlobalVariable(name: "readlink__doc__", scope: !0, file: !616, line: 7066, type: !3348, isLocal: true, isDefinition: true, variable: [381 x i8]* @readlink__doc__)
!3348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 3048, align: 8, elements: !3349)
!3349 = !{!3350}
!3350 = !DISubrange(count: 381)
!3351 = !DIGlobalVariable(name: "keywords", scope: !1390, file: !616, line: 4254, type: !3273, isLocal: true, isDefinition: true, variable: [5 x i8*]* @internal_rename.keywords)
!3352 = !DIGlobalVariable(name: "posix_rename__doc__", scope: !0, file: !616, line: 4328, type: !3353, isLocal: true, isDefinition: true, variable: [442 x i8]* @posix_rename__doc__)
!3353 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 3536, align: 8, elements: !3354)
!3354 = !{!3355}
!3355 = !DISubrange(count: 442)
!3356 = !DIGlobalVariable(name: "posix_replace__doc__", scope: !0, file: !616, line: 4344, type: !3357, isLocal: true, isDefinition: true, variable: [472 x i8]* @posix_replace__doc__)
!3357 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 3776, align: 8, elements: !3358)
!3358 = !{!3359}
!3359 = !DISubrange(count: 472)
!3360 = !DIGlobalVariable(name: "keywords", scope: !1414, file: !616, line: 4374, type: !3324, isLocal: true, isDefinition: true, variable: [3 x i8*]* @posix_rmdir.keywords)
!3361 = !DIGlobalVariable(name: "posix_rmdir__doc__", scope: !0, file: !616, line: 4360, type: !3362, isLocal: true, isDefinition: true, variable: [317 x i8]* @posix_rmdir__doc__)
!3362 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2536, align: 8, elements: !3363)
!3363 = !{!3364}
!3364 = !DISubrange(count: 317)
!3365 = !DIGlobalVariable(name: "stat_float_times__doc__", scope: !0, file: !616, line: 2131, type: !3269, isLocal: true, isDefinition: true, variable: [260 x i8]* @stat_float_times__doc__)
!3366 = !DIGlobalVariable(name: "keywords", scope: !1430, file: !616, line: 7295, type: !3273, isLocal: true, isDefinition: true, variable: [5 x i8*]* @posix_symlink.keywords)
!3367 = !DIGlobalVariable(name: "posix_symlink__doc__", scope: !0, file: !616, line: 7128, type: !3368, isLocal: true, isDefinition: true, variable: [638 x i8]* @posix_symlink__doc__)
!3368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 5104, align: 8, elements: !3369)
!3369 = !{!3370}
!3370 = !DISubrange(count: 638)
!3371 = !DIGlobalVariable(name: "posix_system__doc__", scope: !0, file: !616, line: 4422, type: !3339, isLocal: true, isDefinition: true, variable: [78 x i8]* @posix_system__doc__)
!3372 = !DIGlobalVariable(name: "posix_umask__doc__", scope: !0, file: !616, line: 4456, type: !3373, isLocal: true, isDefinition: true, variable: [90 x i8]* @posix_umask__doc__)
!3373 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 720, align: 8, elements: !3374)
!3374 = !{!3375}
!3375 = !DISubrange(count: 90)
!3376 = !DIGlobalVariable(name: "posix_uname__doc__", scope: !0, file: !616, line: 4578, type: !3377, isLocal: true, isDefinition: true, variable: [198 x i8]* @posix_uname__doc__)
!3377 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1584, align: 8, elements: !3378)
!3378 = !{!3379}
!3379 = !DISubrange(count: 198)
!3380 = !DIGlobalVariable(name: "keywords", scope: !1510, file: !616, line: 4531, type: !3324, isLocal: true, isDefinition: true, variable: [3 x i8*]* @posix_unlink.keywords)
!3381 = !DIGlobalVariable(name: "posix_unlink__doc__", scope: !0, file: !616, line: 4508, type: !3382, isLocal: true, isDefinition: true, variable: [332 x i8]* @posix_unlink__doc__)
!3382 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2656, align: 8, elements: !3383)
!3383 = !{!3384}
!3384 = !DISubrange(count: 332)
!3385 = !DIGlobalVariable(name: "posix_remove__doc__", scope: !0, file: !616, line: 4517, type: !3382, isLocal: true, isDefinition: true, variable: [332 x i8]* @posix_remove__doc__)
!3386 = !DIGlobalVariable(name: "posix_utime__doc__", scope: !0, file: !616, line: 4652, type: !3387, isLocal: true, isDefinition: true, variable: [1254 x i8]* @posix_utime__doc__)
!3387 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 10032, align: 8, elements: !3388)
!3388 = !{!3389}
!3389 = !DISubrange(count: 1254)
!3390 = !DIGlobalVariable(name: "posix_times__doc__", scope: !0, file: !616, line: 7533, type: !3391, isLocal: true, isDefinition: true, variable: [207 x i8]* @posix_times__doc__)
!3391 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1656, align: 8, elements: !3392)
!3392 = !{!3393}
!3393 = !DISubrange(count: 207)
!3394 = !DIGlobalVariable(name: "posix__exit__doc__", scope: !0, file: !616, line: 5031, type: !3395, isLocal: true, isDefinition: true, variable: [89 x i8]* @posix__exit__doc__)
!3395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 712, align: 8, elements: !3396)
!3396 = !{!3397}
!3397 = !DISubrange(count: 89)
!3398 = !DIGlobalVariable(name: "posix_execv__doc__", scope: !0, file: !616, line: 5180, type: !3290, isLocal: true, isDefinition: true, variable: [159 x i8]* @posix_execv__doc__)
!3399 = !DIGlobalVariable(name: "keywords", scope: !1724, file: !616, line: 5252, type: !3249, isLocal: true, isDefinition: true, variable: [4 x i8*]* @posix_execve.keywords)
!3400 = !DIGlobalVariable(name: "posix_execve__doc__", scope: !0, file: !616, line: 5232, type: !3401, isLocal: true, isDefinition: true, variable: [434 x i8]* @posix_execve__doc__)
!3401 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 3472, align: 8, elements: !3402)
!3402 = !{!3403}
!3403 = !DISubrange(count: 434)
!3404 = !DIGlobalVariable(name: "posix_fork__doc__", scope: !0, file: !616, line: 5524, type: !3405, isLocal: true, isDefinition: true, variable: [99 x i8]* @posix_fork__doc__)
!3405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 792, align: 8, elements: !3406)
!3406 = !{!3407}
!3407 = !DISubrange(count: 99)
!3408 = !DIGlobalVariable(name: "posix_sched_get_priority_max__doc__", scope: !0, file: !616, line: 5559, type: !3409, isLocal: true, isDefinition: true, variable: [82 x i8]* @posix_sched_get_priority_max__doc__)
!3409 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 656, align: 8, elements: !3410)
!3410 = !{!3411}
!3411 = !DISubrange(count: 82)
!3412 = !DIGlobalVariable(name: "posix_sched_get_priority_min__doc__", scope: !0, file: !616, line: 5576, type: !3409, isLocal: true, isDefinition: true, variable: [82 x i8]* @posix_sched_get_priority_min__doc__)
!3413 = !DIGlobalVariable(name: "posix_sched_getparam__doc__", scope: !0, file: !616, line: 5707, type: !3414, isLocal: true, isDefinition: true, variable: [172 x i8]* @posix_sched_getparam__doc__)
!3414 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1376, align: 8, elements: !3415)
!3415 = !{!3416}
!3416 = !DISubrange(count: 172)
!3417 = !DIGlobalVariable(name: "posix_sched_getscheduler__doc__", scope: !0, file: !616, line: 5597, type: !3418, isLocal: true, isDefinition: true, variable: [162 x i8]* @posix_sched_getscheduler__doc__)
!3418 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1296, align: 8, elements: !3419)
!3419 = !{!3420}
!3420 = !DISubrange(count: 162)
!3421 = !DIGlobalVariable(name: "posix_sched_rr_get_interval__doc__", scope: !0, file: !616, line: 5758, type: !3422, isLocal: true, isDefinition: true, variable: [111 x i8]* @posix_sched_rr_get_interval__doc__)
!3422 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 888, align: 8, elements: !3423)
!3423 = !{!3424}
!3424 = !DISubrange(count: 111)
!3425 = !DIGlobalVariable(name: "posix_sched_setparam__doc__", scope: !0, file: !616, line: 5735, type: !3426, isLocal: true, isDefinition: true, variable: [122 x i8]* @posix_sched_setparam__doc__)
!3426 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 976, align: 8, elements: !3427)
!3427 = !{!3428}
!3428 = !DISubrange(count: 122)
!3429 = !DIGlobalVariable(name: "posix_sched_setscheduler__doc__", scope: !0, file: !616, line: 5676, type: !3430, isLocal: true, isDefinition: true, variable: [174 x i8]* @posix_sched_setscheduler__doc__)
!3430 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1392, align: 8, elements: !3431)
!3431 = !{!3432}
!3432 = !DISubrange(count: 174)
!3433 = !DIGlobalVariable(name: "posix_sched_yield__doc__", scope: !0, file: !616, line: 5777, type: !3434, isLocal: true, isDefinition: true, variable: [47 x i8]* @posix_sched_yield__doc__)
!3434 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 376, align: 8, elements: !3435)
!3435 = !{!3436}
!3436 = !DISubrange(count: 47)
!3437 = !DIGlobalVariable(name: "NCPUS_START", scope: !0, file: !616, line: 5792, type: !3438, isLocal: true, isDefinition: true, variable: i32 64)
!3438 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !314)
!3439 = !DIGlobalVariable(name: "posix_sched_setaffinity__doc__", scope: !0, file: !616, line: 5794, type: !3440, isLocal: true, isDefinition: true, variable: [94 x i8]* @posix_sched_setaffinity__doc__)
!3440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 752, align: 8, elements: !3441)
!3441 = !{!3442}
!3442 = !DISubrange(count: 94)
!3443 = !DIGlobalVariable(name: "posix_sched_getaffinity__doc__", scope: !0, file: !616, line: 5887, type: !3444, isLocal: true, isDefinition: true, variable: [139 x i8]* @posix_sched_getaffinity__doc__)
!3444 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1112, align: 8, elements: !3445)
!3445 = !{!3446}
!3446 = !DISubrange(count: 139)
!3447 = !DIGlobalVariable(name: "posix_openpty__doc__", scope: !0, file: !616, line: 5981, type: !3448, isLocal: true, isDefinition: true, variable: [112 x i8]* @posix_openpty__doc__)
!3448 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 896, align: 8, elements: !3449)
!3449 = !{!3450}
!3450 = !DISubrange(count: 112)
!3451 = !DIGlobalVariable(name: "posix_forkpty__doc__", scope: !0, file: !616, line: 6076, type: !3452, isLocal: true, isDefinition: true, variable: [226 x i8]* @posix_forkpty__doc__)
!3452 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1808, align: 8, elements: !3453)
!3453 = !{!3454}
!3454 = !DISubrange(count: 226)
!3455 = !DIGlobalVariable(name: "posix_getegid__doc__", scope: !0, file: !616, line: 6111, type: !3456, isLocal: true, isDefinition: true, variable: [68 x i8]* @posix_getegid__doc__)
!3456 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 544, align: 8, elements: !3457)
!3457 = !{!3458}
!3458 = !DISubrange(count: 68)
!3459 = !DIGlobalVariable(name: "posix_geteuid__doc__", scope: !0, file: !616, line: 6124, type: !3460, isLocal: true, isDefinition: true, variable: [67 x i8]* @posix_geteuid__doc__)
!3460 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 536, align: 8, elements: !3461)
!3461 = !{!3462}
!3462 = !DISubrange(count: 67)
!3463 = !DIGlobalVariable(name: "posix_getgid__doc__", scope: !0, file: !616, line: 6137, type: !3464, isLocal: true, isDefinition: true, variable: [56 x i8]* @posix_getgid__doc__)
!3464 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 448, align: 8, elements: !3465)
!3465 = !{!3466}
!3466 = !DISubrange(count: 56)
!3467 = !DIGlobalVariable(name: "posix_getgrouplist__doc__", scope: !0, file: !616, line: 6160, type: !3468, isLocal: true, isDefinition: true, variable: [186 x i8]* @posix_getgrouplist__doc__)
!3468 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1488, align: 8, elements: !3469)
!3469 = !{!3470}
!3470 = !DISubrange(count: 186)
!3471 = !DIGlobalVariable(name: "posix_getgroups__doc__", scope: !0, file: !616, line: 6235, type: !3395, isLocal: true, isDefinition: true, variable: [89 x i8]* @posix_getgroups__doc__)
!3472 = !DIGlobalVariable(name: "posix_getpid__doc__", scope: !0, file: !616, line: 6149, type: !3434, isLocal: true, isDefinition: true, variable: [47 x i8]* @posix_getpid__doc__)
!3473 = !DIGlobalVariable(name: "posix_getpgrp__doc__", scope: !0, file: !616, line: 6402, type: !3464, isLocal: true, isDefinition: true, variable: [56 x i8]* @posix_getpgrp__doc__)
!3474 = !DIGlobalVariable(name: "posix_getppid__doc__", scope: !0, file: !616, line: 6482, type: !3377, isLocal: true, isDefinition: true, variable: [198 x i8]* @posix_getppid__doc__)
!3475 = !DIGlobalVariable(name: "posix_getuid__doc__", scope: !0, file: !616, line: 6540, type: !3476, isLocal: true, isDefinition: true, variable: [55 x i8]* @posix_getuid__doc__)
!3476 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 440, align: 8, elements: !3477)
!3477 = !{!3478}
!3478 = !DISubrange(count: 55)
!3479 = !DIGlobalVariable(name: "posix_getlogin__doc__", scope: !0, file: !616, line: 6501, type: !3480, isLocal: true, isDefinition: true, variable: [52 x i8]* @posix_getlogin__doc__)
!3480 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 416, align: 8, elements: !3481)
!3481 = !{!3482}
!3482 = !DISubrange(count: 52)
!3483 = !DIGlobalVariable(name: "posix_kill__doc__", scope: !0, file: !616, line: 6553, type: !3484, isLocal: true, isDefinition: true, variable: [46 x i8]* @posix_kill__doc__)
!3484 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 368, align: 8, elements: !3485)
!3485 = !{!3486}
!3486 = !DISubrange(count: 46)
!3487 = !DIGlobalVariable(name: "posix_killpg__doc__", scope: !0, file: !616, line: 6572, type: !3476, isLocal: true, isDefinition: true, variable: [55 x i8]* @posix_killpg__doc__)
!3488 = !DIGlobalVariable(name: "posix_setuid__doc__", scope: !0, file: !616, line: 6666, type: !3489, isLocal: true, isDefinition: true, variable: [48 x i8]* @posix_setuid__doc__)
!3489 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 384, align: 8, elements: !3490)
!3490 = !{!3491}
!3491 = !DISubrange(count: 48)
!3492 = !DIGlobalVariable(name: "posix_seteuid__doc__", scope: !0, file: !616, line: 6685, type: !3493, isLocal: true, isDefinition: true, variable: [59 x i8]* @posix_seteuid__doc__)
!3493 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 472, align: 8, elements: !3494)
!3494 = !{!3495}
!3495 = !DISubrange(count: 59)
!3496 = !DIGlobalVariable(name: "posix_setegid__doc__", scope: !0, file: !616, line: 6705, type: !3497, isLocal: true, isDefinition: true, variable: [60 x i8]* @posix_setegid__doc__)
!3497 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 480, align: 8, elements: !3498)
!3498 = !{!3499}
!3499 = !DISubrange(count: 60)
!3500 = !DIGlobalVariable(name: "posix_setreuid__doc__", scope: !0, file: !616, line: 6725, type: !3501, isLocal: true, isDefinition: true, variable: [77 x i8]* @posix_setreuid__doc__)
!3501 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 616, align: 8, elements: !3502)
!3502 = !{!3503}
!3503 = !DISubrange(count: 77)
!3504 = !DIGlobalVariable(name: "posix_setregid__doc__", scope: !0, file: !616, line: 6747, type: !3339, isLocal: true, isDefinition: true, variable: [78 x i8]* @posix_setregid__doc__)
!3505 = !DIGlobalVariable(name: "posix_setgid__doc__", scope: !0, file: !616, line: 6769, type: !3506, isLocal: true, isDefinition: true, variable: [49 x i8]* @posix_setgid__doc__)
!3506 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 392, align: 8, elements: !3507)
!3507 = !{!3508}
!3508 = !DISubrange(count: 49)
!3509 = !DIGlobalVariable(name: "posix_setgroups__doc__", scope: !0, file: !616, line: 6787, type: !3510, isLocal: true, isDefinition: true, variable: [64 x i8]* @posix_setgroups__doc__)
!3510 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 512, align: 8, elements: !3511)
!3511 = !{!3512}
!3512 = !DISubrange(count: 64)
!3513 = !DIGlobalVariable(name: "posix_initgroups__doc__", scope: !0, file: !616, line: 6342, type: !3514, isLocal: true, isDefinition: true, variable: [197 x i8]* @posix_initgroups__doc__)
!3514 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1576, align: 8, elements: !3515)
!3515 = !{!3516}
!3516 = !DISubrange(count: 197)
!3517 = !DIGlobalVariable(name: "posix_getpgid__doc__", scope: !0, file: !616, line: 6383, type: !3518, isLocal: true, isDefinition: true, variable: [54 x i8]* @posix_getpgid__doc__)
!3518 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 432, align: 8, elements: !3519)
!3519 = !{!3520}
!3520 = !DISubrange(count: 54)
!3521 = !DIGlobalVariable(name: "posix_setpgrp__doc__", scope: !0, file: !616, line: 6419, type: !3476, isLocal: true, isDefinition: true, variable: [55 x i8]* @posix_setpgrp__doc__)
!3522 = !DIGlobalVariable(name: "posix_wait__doc__", scope: !0, file: !616, line: 7043, type: !1468, isLocal: true, isDefinition: true, variable: [65 x i8]* @posix_wait__doc__)
!3523 = !DIGlobalVariable(name: "struct_rusage", scope: !2204, file: !616, line: 6837, type: !276, isLocal: true, isDefinition: true, variable: %struct._object** @wait_helper.struct_rusage)
!3524 = !DIGlobalVariable(name: "PyId_struct_rusage", scope: !2204, file: !616, line: 6838, type: !3525, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @wait_helper.PyId_struct_rusage)
!3525 = !DIDerivedType(tag: DW_TAG_typedef, name: "_Py_Identifier", file: !278, line: 144, baseType: !3526)
!3526 = !DICompositeType(tag: DW_TAG_structure_type, name: "_Py_Identifier", file: !278, line: 140, size: 192, align: 64, elements: !3527)
!3527 = !{!3528, !3530, !3531}
!3528 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3526, file: !278, line: 141, baseType: !3529, size: 64, align: 64)
!3529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3526, size: 64, align: 64)
!3530 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !3526, file: !278, line: 142, baseType: !299, size: 64, align: 64, offset: 64)
!3531 = !DIDerivedType(tag: DW_TAG_member, name: "object", scope: !3526, file: !278, line: 143, baseType: !276, size: 64, align: 64, offset: 128)
!3532 = !DIGlobalVariable(name: "posix_wait3__doc__", scope: !0, file: !616, line: 6894, type: !3533, isLocal: true, isDefinition: true, variable: [81 x i8]* @posix_wait3__doc__)
!3533 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 648, align: 8, elements: !3534)
!3534 = !{!3535}
!3535 = !DISubrange(count: 81)
!3536 = !DIGlobalVariable(name: "posix_wait4__doc__", scope: !0, file: !616, line: 6919, type: !3537, isLocal: true, isDefinition: true, variable: [92 x i8]* @posix_wait4__doc__)
!3537 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 736, align: 8, elements: !3538)
!3538 = !{!3539}
!3539 = !DISubrange(count: 92)
!3540 = !DIGlobalVariable(name: "posix_waitid__doc__", scope: !0, file: !616, line: 6944, type: !3541, isLocal: true, isDefinition: true, variable: [424 x i8]* @posix_waitid__doc__)
!3541 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 3392, align: 8, elements: !3542)
!3542 = !{!3543}
!3543 = !DISubrange(count: 424)
!3544 = !DIGlobalVariable(name: "posix_waitpid__doc__", scope: !0, file: !616, line: 6993, type: !3306, isLocal: true, isDefinition: true, variable: [86 x i8]* @posix_waitpid__doc__)
!3545 = !DIGlobalVariable(name: "posix_getsid__doc__", scope: !0, file: !616, line: 7586, type: !3546, isLocal: true, isDefinition: true, variable: [51 x i8]* @posix_getsid__doc__)
!3546 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 408, align: 8, elements: !3547)
!3547 = !{!3548}
!3548 = !DISubrange(count: 51)
!3549 = !DIGlobalVariable(name: "posix_setsid__doc__", scope: !0, file: !616, line: 7606, type: !3550, isLocal: true, isDefinition: true, variable: [41 x i8]* @posix_setsid__doc__)
!3550 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 328, align: 8, elements: !3551)
!3551 = !{!3552}
!3552 = !DISubrange(count: 41)
!3553 = !DIGlobalVariable(name: "posix_setpgid__doc__", scope: !0, file: !616, line: 7621, type: !3480, isLocal: true, isDefinition: true, variable: [52 x i8]* @posix_setpgid__doc__)
!3554 = !DIGlobalVariable(name: "posix_tcgetpgrp__doc__", scope: !0, file: !616, line: 7641, type: !3537, isLocal: true, isDefinition: true, variable: [92 x i8]* @posix_tcgetpgrp__doc__)
!3555 = !DIGlobalVariable(name: "posix_tcsetpgrp__doc__", scope: !0, file: !616, line: 7661, type: !3556, isLocal: true, isDefinition: true, variable: [87 x i8]* @posix_tcsetpgrp__doc__)
!3556 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 696, align: 8, elements: !3557)
!3557 = !{!3558}
!3558 = !DISubrange(count: 87)
!3559 = !DIGlobalVariable(name: "keywords", scope: !2347, file: !616, line: 7703, type: !3273, isLocal: true, isDefinition: true, variable: [5 x i8*]* @posix_open.keywords)
!3560 = !DIGlobalVariable(name: "posix_open__doc__", scope: !0, file: !616, line: 7685, type: !3561, isLocal: true, isDefinition: true, variable: [379 x i8]* @posix_open__doc__)
!3561 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 3032, align: 8, elements: !3562)
!3562 = !{!3563}
!3563 = !DISubrange(count: 379)
!3564 = !DIGlobalVariable(name: "posix_close__doc__", scope: !0, file: !616, line: 7762, type: !3476, isLocal: true, isDefinition: true, variable: [55 x i8]* @posix_close__doc__)
!3565 = !DIGlobalVariable(name: "posix_closerange__doc__", scope: !0, file: !616, line: 7788, type: !3335, isLocal: true, isDefinition: true, variable: [96 x i8]* @posix_closerange__doc__)
!3566 = !DIGlobalVariable(name: "device_encoding__doc__", scope: !0, file: !616, line: 10485, type: !3567, isLocal: true, isDefinition: true, variable: [129 x i8]* @device_encoding__doc__)
!3567 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1032, align: 8, elements: !3568)
!3568 = !{!3569}
!3569 = !DISubrange(count: 129)
!3570 = !DIGlobalVariable(name: "posix_dup__doc__", scope: !0, file: !616, line: 7807, type: !3571, isLocal: true, isDefinition: true, variable: [57 x i8]* @posix_dup__doc__)
!3571 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 456, align: 8, elements: !3572)
!3572 = !{!3573}
!3573 = !DISubrange(count: 57)
!3574 = !DIGlobalVariable(name: "keywords", scope: !2388, file: !616, line: 7834, type: !3249, isLocal: true, isDefinition: true, variable: [4 x i8*]* @posix_dup2.keywords)
!3575 = !DIGlobalVariable(name: "posix_dup2__doc__", scope: !0, file: !616, line: 7827, type: !3506, isLocal: true, isDefinition: true, variable: [49 x i8]* @posix_dup2__doc__)
!3576 = !DIGlobalVariable(name: "posix_lockf__doc__", scope: !0, file: !616, line: 7913, type: !3577, isLocal: true, isDefinition: true, variable: [241 x i8]* @posix_lockf__doc__)
!3577 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1928, align: 8, elements: !3578)
!3578 = !{!3579}
!3579 = !DISubrange(count: 241)
!3580 = !DIGlobalVariable(name: "posix_lseek__doc__", scope: !0, file: !616, line: 7942, type: !3581, isLocal: true, isDefinition: true, variable: [148 x i8]* @posix_lseek__doc__)
!3581 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1184, align: 8, elements: !3582)
!3582 = !{!3583}
!3583 = !DISubrange(count: 148)
!3584 = !DIGlobalVariable(name: "posix_read__doc__", scope: !0, file: !616, line: 7996, type: !3476, isLocal: true, isDefinition: true, variable: [55 x i8]* @posix_read__doc__)
!3585 = !DIGlobalVariable(name: "posix_readv__doc__", scope: !0, file: !616, line: 8090, type: !3586, isLocal: true, isDefinition: true, variable: [373 x i8]* @posix_readv__doc__)
!3586 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2984, align: 8, elements: !3587)
!3587 = !{!3588}
!3588 = !DISubrange(count: 373)
!3589 = !DIGlobalVariable(name: "posix_pread__doc__", scope: !0, file: !616, line: 8133, type: !3590, isLocal: true, isDefinition: true, variable: [181 x i8]* @posix_pread__doc__)
!3590 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1448, align: 8, elements: !3591)
!3591 = !{!3592}
!3592 = !DISubrange(count: 181)
!3593 = !DIGlobalVariable(name: "posix_write__doc__", scope: !0, file: !616, line: 8172, type: !3460, isLocal: true, isDefinition: true, variable: [67 x i8]* @posix_write__doc__)
!3594 = !DIGlobalVariable(name: "posix_writev__doc__", scope: !0, file: !616, line: 8489, type: !3241, isLocal: true, isDefinition: true, variable: [259 x i8]* @posix_writev__doc__)
!3595 = !DIGlobalVariable(name: "posix_pwrite__doc__", scope: !0, file: !616, line: 8530, type: !3596, isLocal: true, isDefinition: true, variable: [131 x i8]* @posix_pwrite__doc__)
!3596 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1048, align: 8, elements: !3597)
!3597 = !{!3598}
!3598 = !DISubrange(count: 131)
!3599 = !DIGlobalVariable(name: "keywords", scope: !2537, file: !616, line: 8318, type: !3273, isLocal: true, isDefinition: true, variable: [5 x i8*]* @posix_sendfile.keywords)
!3600 = !DIGlobalVariable(name: "posix_sendfile__doc__", scope: !0, file: !616, line: 8206, type: !3601, isLocal: true, isDefinition: true, variable: [216 x i8]* @posix_sendfile__doc__)
!3601 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1728, align: 8, elements: !3602)
!3602 = !{!3603}
!3603 = !DISubrange(count: 216)
!3604 = !DIGlobalVariable(name: "posix_fstat__doc__", scope: !0, file: !616, line: 8345, type: !3405, isLocal: true, isDefinition: true, variable: [99 x i8]* @posix_fstat__doc__)
!3605 = !DIGlobalVariable(name: "posix_isatty__doc__", scope: !0, file: !616, line: 8372, type: !3567, isLocal: true, isDefinition: true, variable: [129 x i8]* @posix_isatty__doc__)
!3606 = !DIGlobalVariable(name: "posix_pipe__doc__", scope: !0, file: !616, line: 8389, type: !3489, isLocal: true, isDefinition: true, variable: [48 x i8]* @posix_pipe__doc__)
!3607 = !DIGlobalVariable(name: "posix_pipe2__doc__", scope: !0, file: !616, line: 8463, type: !3608, isLocal: true, isDefinition: true, variable: [176 x i8]* @posix_pipe2__doc__)
!3608 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1408, align: 8, elements: !3609)
!3609 = !{!3610}
!3610 = !DISubrange(count: 176)
!3611 = !DIGlobalVariable(name: "keywords", scope: !2588, file: !616, line: 8578, type: !3249, isLocal: true, isDefinition: true, variable: [4 x i8*]* @posix_mkfifo.keywords)
!3612 = !DIGlobalVariable(name: "posix_mkfifo__doc__", scope: !0, file: !616, line: 8561, type: !3613, isLocal: true, isDefinition: true, variable: [346 x i8]* @posix_mkfifo__doc__)
!3613 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2768, align: 8, elements: !3614)
!3614 = !{!3615}
!3615 = !DISubrange(count: 346)
!3616 = !DIGlobalVariable(name: "keywords", scope: !2600, file: !616, line: 8640, type: !3273, isLocal: true, isDefinition: true, variable: [5 x i8*]* @posix_mknod.keywords)
!3617 = !DIGlobalVariable(name: "posix_mknod__doc__", scope: !0, file: !616, line: 8616, type: !3618, isLocal: true, isDefinition: true, variable: [699 x i8]* @posix_mknod__doc__)
!3618 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 5592, align: 8, elements: !3619)
!3619 = !{!3620}
!3620 = !DISubrange(count: 699)
!3621 = !DIGlobalVariable(name: "posix_major__doc__", scope: !0, file: !616, line: 8678, type: !3556, isLocal: true, isDefinition: true, variable: [87 x i8]* @posix_major__doc__)
!3622 = !DIGlobalVariable(name: "posix_minor__doc__", scope: !0, file: !616, line: 8691, type: !3556, isLocal: true, isDefinition: true, variable: [87 x i8]* @posix_minor__doc__)
!3623 = !DIGlobalVariable(name: "posix_makedev__doc__", scope: !0, file: !616, line: 8704, type: !3624, isLocal: true, isDefinition: true, variable: [109 x i8]* @posix_makedev__doc__)
!3624 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 872, align: 8, elements: !3625)
!3625 = !{!3626}
!3626 = !DISubrange(count: 109)
!3627 = !DIGlobalVariable(name: "posix_ftruncate__doc__", scope: !0, file: !616, line: 8720, type: !3628, isLocal: true, isDefinition: true, variable: [62 x i8]* @posix_ftruncate__doc__)
!3628 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 496, align: 8, elements: !3629)
!3629 = !{!3630}
!3630 = !DISubrange(count: 62)
!3631 = !DIGlobalVariable(name: "keywords", scope: !2668, file: !616, line: 8758, type: !3324, isLocal: true, isDefinition: true, variable: [3 x i8*]* @posix_truncate.keywords)
!3632 = !DIGlobalVariable(name: "posix_truncate__doc__", scope: !0, file: !616, line: 8745, type: !3633, isLocal: true, isDefinition: true, variable: [217 x i8]* @posix_truncate__doc__)
!3633 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1736, align: 8, elements: !3634)
!3634 = !{!3635}
!3635 = !DISubrange(count: 217)
!3636 = !DIGlobalVariable(name: "posix_posix_fallocate__doc__", scope: !0, file: !616, line: 8790, type: !3637, isLocal: true, isDefinition: true, variable: [158 x i8]* @posix_posix_fallocate__doc__)
!3637 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1264, align: 8, elements: !3638)
!3638 = !{!3639}
!3639 = !DISubrange(count: 158)
!3640 = !DIGlobalVariable(name: "posix_posix_fadvise__doc__", scope: !0, file: !616, line: 8817, type: !3641, isLocal: true, isDefinition: true, variable: [400 x i8]* @posix_posix_fadvise__doc__)
!3641 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 3200, align: 8, elements: !3642)
!3642 = !{!3643}
!3643 = !DISubrange(count: 400)
!3644 = !DIGlobalVariable(name: "posix_putenv__doc__", scope: !0, file: !616, line: 8849, type: !3493, isLocal: true, isDefinition: true, variable: [59 x i8]* @posix_putenv__doc__)
!3645 = !DIGlobalVariable(name: "posix_unsetenv__doc__", scope: !0, file: !616, line: 8944, type: !3434, isLocal: true, isDefinition: true, variable: [47 x i8]* @posix_unsetenv__doc__)
!3646 = !DIGlobalVariable(name: "posix_strerror__doc__", scope: !0, file: !616, line: 8985, type: !3647, isLocal: true, isDefinition: true, variable: [71 x i8]* @posix_strerror__doc__)
!3647 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 568, align: 8, elements: !3648)
!3648 = !{!3649}
!3649 = !DISubrange(count: 71)
!3650 = !DIGlobalVariable(name: "posix_fchdir__doc__", scope: !0, file: !616, line: 2871, type: !3651, isLocal: true, isDefinition: true, variable: [142 x i8]* @posix_fchdir__doc__)
!3651 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1136, align: 8, elements: !3652)
!3652 = !{!3653}
!3653 = !DISubrange(count: 142)
!3654 = !DIGlobalVariable(name: "posix_fsync__doc__", scope: !0, file: !616, line: 3183, type: !3510, isLocal: true, isDefinition: true, variable: [64 x i8]* @posix_fsync__doc__)
!3655 = !DIGlobalVariable(name: "posix_sync__doc__", scope: !0, file: !616, line: 3195, type: !3656, isLocal: true, isDefinition: true, variable: [43 x i8]* @posix_sync__doc__)
!3656 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 344, align: 8, elements: !3657)
!3657 = !{!3658}
!3658 = !DISubrange(count: 43)
!3659 = !DIGlobalVariable(name: "posix_fdatasync__doc__", scope: !0, file: !616, line: 3215, type: !3660, isLocal: true, isDefinition: true, variable: [104 x i8]* @posix_fdatasync__doc__)
!3660 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 832, align: 8, elements: !3661)
!3661 = !{!3662}
!3662 = !DISubrange(count: 104)
!3663 = !DIGlobalVariable(name: "posix_WCOREDUMP__doc__", scope: !0, file: !616, line: 9009, type: !3664, isLocal: true, isDefinition: true, variable: [100 x i8]* @posix_WCOREDUMP__doc__)
!3664 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 800, align: 8, elements: !3665)
!3665 = !{!3666}
!3666 = !DISubrange(count: 100)
!3667 = !DIGlobalVariable(name: "posix_WIFCONTINUED__doc__", scope: !0, file: !616, line: 9027, type: !3668, isLocal: true, isDefinition: true, variable: [115 x i8]* @posix_WIFCONTINUED__doc__)
!3668 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 920, align: 8, elements: !3669)
!3669 = !{!3670}
!3670 = !DISubrange(count: 115)
!3671 = !DIGlobalVariable(name: "posix_WIFSTOPPED__doc__", scope: !0, file: !616, line: 9046, type: !3556, isLocal: true, isDefinition: true, variable: [87 x i8]* @posix_WIFSTOPPED__doc__)
!3672 = !DIGlobalVariable(name: "posix_WIFSIGNALED__doc__", scope: !0, file: !616, line: 9064, type: !3673, isLocal: true, isDefinition: true, variable: [103 x i8]* @posix_WIFSIGNALED__doc__)
!3673 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 824, align: 8, elements: !3674)
!3674 = !{!3675}
!3675 = !DISubrange(count: 103)
!3676 = !DIGlobalVariable(name: "posix_WIFEXITED__doc__", scope: !0, file: !616, line: 9082, type: !3677, isLocal: true, isDefinition: true, variable: [110 x i8]* @posix_WIFEXITED__doc__)
!3677 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 880, align: 8, elements: !3678)
!3678 = !{!3679}
!3679 = !DISubrange(count: 110)
!3680 = !DIGlobalVariable(name: "posix_WEXITSTATUS__doc__", scope: !0, file: !616, line: 9101, type: !3339, isLocal: true, isDefinition: true, variable: [78 x i8]* @posix_WEXITSTATUS__doc__)
!3681 = !DIGlobalVariable(name: "posix_WTERMSIG__doc__", scope: !0, file: !616, line: 9119, type: !3624, isLocal: true, isDefinition: true, variable: [109 x i8]* @posix_WTERMSIG__doc__)
!3682 = !DIGlobalVariable(name: "posix_WSTOPSIG__doc__", scope: !0, file: !616, line: 9138, type: !3683, isLocal: true, isDefinition: true, variable: [106 x i8]* @posix_WSTOPSIG__doc__)
!3683 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 848, align: 8, elements: !3684)
!3684 = !{!3685}
!3685 = !DISubrange(count: 106)
!3686 = !DIGlobalVariable(name: "posix_fstatvfs__doc__", scope: !0, file: !616, line: 9210, type: !3687, isLocal: true, isDefinition: true, variable: [108 x i8]* @posix_fstatvfs__doc__)
!3687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 864, align: 8, elements: !3688)
!3688 = !{!3689}
!3689 = !DISubrange(count: 108)
!3690 = !DIGlobalVariable(name: "keywords", scope: !2852, file: !616, line: 9248, type: !3267, isLocal: true, isDefinition: true, variable: [2 x i8*]* @posix_statvfs.keywords)
!3691 = !DIGlobalVariable(name: "posix_statvfs__doc__", scope: !0, file: !616, line: 9237, type: !3692, isLocal: true, isDefinition: true, variable: [251 x i8]* @posix_statvfs__doc__)
!3692 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2008, align: 8, elements: !3693)
!3693 = !{!3694}
!3694 = !DISubrange(count: 251)
!3695 = !DIGlobalVariable(name: "posix_constants_confstr", scope: !0, file: !616, line: 9551, type: !3696, isLocal: true, isDefinition: true, variable: [27 x %struct.constdef]* @posix_constants_confstr)
!3696 = !DICompositeType(tag: DW_TAG_array_type, baseType: !681, size: 3456, align: 64, elements: !3697)
!3697 = !{!3698}
!3698 = !DISubrange(count: 27)
!3699 = !DIGlobalVariable(name: "posix_confstr__doc__", scope: !0, file: !616, line: 9712, type: !3700, isLocal: true, isDefinition: true, variable: [79 x i8]* @posix_confstr__doc__)
!3700 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 632, align: 8, elements: !3701)
!3701 = !{!3702}
!3702 = !DISubrange(count: 79)
!3703 = !DIGlobalVariable(name: "posix_constants_sysconf", scope: !0, file: !616, line: 9755, type: !3704, isLocal: true, isDefinition: true, variable: [134 x %struct.constdef]* @posix_constants_sysconf)
!3704 = !DICompositeType(tag: DW_TAG_array_type, baseType: !681, size: 17152, align: 64, elements: !3705)
!3705 = !{!3706}
!3706 = !DISubrange(count: 134)
!3707 = !DIGlobalVariable(name: "posix_sysconf__doc__", scope: !0, file: !616, line: 10258, type: !3409, isLocal: true, isDefinition: true, variable: [82 x i8]* @posix_sysconf__doc__)
!3708 = !DIGlobalVariable(name: "posix_constants_pathconf", scope: !0, file: !616, line: 9378, type: !3709, isLocal: true, isDefinition: true, variable: [20 x %struct.constdef]* @posix_constants_pathconf)
!3709 = !DICompositeType(tag: DW_TAG_array_type, baseType: !681, size: 2560, align: 64, elements: !370)
!3710 = !DIGlobalVariable(name: "posix_fpathconf__doc__", scope: !0, file: !616, line: 9475, type: !3567, isLocal: true, isDefinition: true, variable: [129 x i8]* @posix_fpathconf__doc__)
!3711 = !DIGlobalVariable(name: "keywords", scope: !2930, file: !616, line: 9516, type: !3324, isLocal: true, isDefinition: true, variable: [3 x i8*]* @posix_pathconf.keywords)
!3712 = !DIGlobalVariable(name: "posix_pathconf__doc__", scope: !0, file: !616, line: 9503, type: !3713, isLocal: true, isDefinition: true, variable: [278 x i8]* @posix_pathconf__doc__)
!3713 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2224, align: 8, elements: !3714)
!3714 = !{!3715}
!3715 = !DISubrange(count: 278)
!3716 = !DIGlobalVariable(name: "posix_abort__doc__", scope: !0, file: !616, line: 10357, type: !3717, isLocal: true, isDefinition: true, variable: [163 x i8]* @posix_abort__doc__)
!3717 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1304, align: 8, elements: !3718)
!3718 = !{!3719}
!3719 = !DISubrange(count: 163)
!3720 = !DIGlobalVariable(name: "posix_getloadavg__doc__", scope: !0, file: !616, line: 10467, type: !3721, isLocal: true, isDefinition: true, variable: [193 x i8]* @posix_getloadavg__doc__)
!3721 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1544, align: 8, elements: !3722)
!3722 = !{!3723}
!3723 = !DISubrange(count: 193)
!3724 = !DIGlobalVariable(name: "posix_urandom__doc__", scope: !0, file: !616, line: 10885, type: !3725, isLocal: true, isDefinition: true, variable: [73 x i8]* @posix_urandom__doc__)
!3725 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 584, align: 8, elements: !3726)
!3726 = !{!3727}
!3727 = !DISubrange(count: 73)
!3728 = !DIGlobalVariable(name: "posix_setresuid__doc__", scope: !0, file: !616, line: 10502, type: !3537, isLocal: true, isDefinition: true, variable: [92 x i8]* @posix_setresuid__doc__)
!3729 = !DIGlobalVariable(name: "posix_setresgid__doc__", scope: !0, file: !616, line: 10523, type: !3730, isLocal: true, isDefinition: true, variable: [93 x i8]* @posix_setresgid__doc__)
!3730 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 744, align: 8, elements: !3731)
!3731 = !{!3732}
!3732 = !DISubrange(count: 93)
!3733 = !DIGlobalVariable(name: "posix_getresuid__doc__", scope: !0, file: !616, line: 10543, type: !3734, isLocal: true, isDefinition: true, variable: [107 x i8]* @posix_getresuid__doc__)
!3734 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 856, align: 8, elements: !3735)
!3735 = !{!3736}
!3736 = !DISubrange(count: 107)
!3737 = !DIGlobalVariable(name: "posix_getresgid__doc__", scope: !0, file: !616, line: 10560, type: !3687, isLocal: true, isDefinition: true, variable: [108 x i8]* @posix_getresgid__doc__)
!3738 = !DIGlobalVariable(name: "keywords", scope: !2990, file: !616, line: 10674, type: !1532, isLocal: true, isDefinition: true, variable: [6 x i8*]* @posix_setxattr.keywords)
!3739 = !DIGlobalVariable(name: "posix_setxattr__doc__", scope: !0, file: !616, line: 10656, type: !3740, isLocal: true, isDefinition: true, variable: [347 x i8]* @posix_setxattr__doc__)
!3740 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2776, align: 8, elements: !3741)
!3741 = !{!3742}
!3742 = !DISubrange(count: 347)
!3743 = !DIGlobalVariable(name: "keywords", scope: !3004, file: !616, line: 10595, type: !3249, isLocal: true, isDefinition: true, variable: [4 x i8*]* @posix_getxattr.keywords)
!3744 = !DIGlobalVariable(name: "buffer_sizes", scope: !3004, file: !616, line: 10614, type: !3745, isLocal: true, isDefinition: true, variable: [3 x i64]* @posix_getxattr.buffer_sizes)
!3745 = !DICompositeType(tag: DW_TAG_array_type, baseType: !282, size: 192, align: 64, elements: !866)
!3746 = !DIGlobalVariable(name: "posix_getxattr__doc__", scope: !0, file: !616, line: 10578, type: !3747, isLocal: true, isDefinition: true, variable: [349 x i8]* @posix_getxattr__doc__)
!3747 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2792, align: 8, elements: !3748)
!3748 = !{!3749}
!3749 = !DISubrange(count: 349)
!3750 = !DIGlobalVariable(name: "keywords", scope: !3026, file: !616, line: 10737, type: !3249, isLocal: true, isDefinition: true, variable: [4 x i8*]* @posix_removexattr.keywords)
!3751 = !DIGlobalVariable(name: "posix_removexattr__doc__", scope: !0, file: !616, line: 10721, type: !3752, isLocal: true, isDefinition: true, variable: [331 x i8]* @posix_removexattr__doc__)
!3752 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2648, align: 8, elements: !3753)
!3753 = !{!3754}
!3754 = !DISubrange(count: 331)
!3755 = !DIGlobalVariable(name: "keywords", scope: !3038, file: !616, line: 10797, type: !3324, isLocal: true, isDefinition: true, variable: [3 x i8*]* @posix_listxattr.keywords)
!3756 = !DIGlobalVariable(name: "buffer_sizes", scope: !3038, file: !616, line: 10815, type: !3745, isLocal: true, isDefinition: true, variable: [3 x i64]* @posix_listxattr.buffer_sizes)
!3757 = !DIGlobalVariable(name: "posix_listxattr__doc__", scope: !0, file: !616, line: 10778, type: !3758, isLocal: true, isDefinition: true, variable: [393 x i8]* @posix_listxattr__doc__)
!3758 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 3144, align: 8, elements: !3759)
!3759 = !{!3760}
!3760 = !DISubrange(count: 393)
!3761 = !DIGlobalVariable(name: "termsize__doc__", scope: !0, file: !616, line: 10936, type: !3762, isLocal: true, isDefinition: true, variable: [467 x i8]* @termsize__doc__)
!3762 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 3736, align: 8, elements: !3763)
!3763 = !{!3764}
!3764 = !DISubrange(count: 467)
!3765 = !DIGlobalVariable(name: "posix_cpu_count__doc__", scope: !0, file: !616, line: 11021, type: !3677, isLocal: true, isDefinition: true, variable: [110 x i8]* @posix_cpu_count__doc__)
!3766 = !DIGlobalVariable(name: "get_inheritable__doc__", scope: !0, file: !616, line: 11056, type: !3395, isLocal: true, isDefinition: true, variable: [89 x i8]* @get_inheritable__doc__)
!3767 = !DIGlobalVariable(name: "set_inheritable__doc__", scope: !0, file: !616, line: 11079, type: !3730, isLocal: true, isDefinition: true, variable: [93 x i8]* @set_inheritable__doc__)
!3768 = !DIGlobalVariable(name: "waitid_result_desc", scope: !0, file: !616, line: 2087, type: !3769, isLocal: true, isDefinition: true, variable: %struct.PyStructSequence_Desc* @waitid_result_desc)
!3769 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyStructSequence_Desc", file: !687, line: 20, baseType: !3770)
!3770 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyStructSequence_Desc", file: !687, line: 15, size: 256, align: 64, elements: !3771)
!3771 = !{!3772, !3773, !3774, !3780}
!3772 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3770, file: !687, line: 16, baseType: !322, size: 64, align: 64)
!3773 = !DIDerivedType(tag: DW_TAG_member, name: "doc", scope: !3770, file: !687, line: 17, baseType: !322, size: 64, align: 64, offset: 64)
!3774 = !DIDerivedType(tag: DW_TAG_member, name: "fields", scope: !3770, file: !687, line: 18, baseType: !3775, size: 64, align: 64, offset: 128)
!3775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3776, size: 64, align: 64)
!3776 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyStructSequence_Field", file: !687, line: 10, size: 128, align: 64, elements: !3777)
!3777 = !{!3778, !3779}
!3778 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3776, file: !687, line: 11, baseType: !322, size: 64, align: 64)
!3779 = !DIDerivedType(tag: DW_TAG_member, name: "doc", scope: !3776, file: !687, line: 12, baseType: !322, size: 64, align: 64, offset: 64)
!3780 = !DIDerivedType(tag: DW_TAG_member, name: "n_in_sequence", scope: !3770, file: !687, line: 19, baseType: !314, size: 32, align: 32, offset: 192)
!3781 = !DIGlobalVariable(name: "waitid_result__doc__", scope: !0, file: !616, line: 2070, type: !3782, isLocal: true, isDefinition: true, variable: [221 x i8]* @waitid_result__doc__)
!3782 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1768, align: 8, elements: !3783)
!3783 = !{!3784}
!3784 = !DISubrange(count: 221)
!3785 = !DIGlobalVariable(name: "waitid_result_fields", scope: !0, file: !616, line: 2078, type: !3786, isLocal: true, isDefinition: true, variable: [6 x %struct.PyStructSequence_Field]* @waitid_result_fields)
!3786 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3787, size: 768, align: 64, elements: !1533)
!3787 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyStructSequence_Field", file: !687, line: 13, baseType: !3776)
!3788 = !DIGlobalVariable(name: "stat_result_desc", scope: !0, file: !616, line: 2033, type: !3769, isLocal: true, isDefinition: true, variable: %struct.PyStructSequence_Desc* @stat_result_desc)
!3789 = !DIGlobalVariable(name: "stat_result__doc__", scope: !0, file: !616, line: 1947, type: !3790, isLocal: true, isDefinition: true, variable: [398 x i8]* @stat_result__doc__)
!3790 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 3184, align: 8, elements: !3791)
!3791 = !{!3792}
!3792 = !DISubrange(count: 398)
!3793 = !DIGlobalVariable(name: "stat_result_fields", scope: !0, file: !616, line: 1958, type: !3794, isLocal: true, isDefinition: true, variable: [20 x %struct.PyStructSequence_Field]* @stat_result_fields)
!3794 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3787, size: 2560, align: 64, elements: !370)
!3795 = !DIGlobalVariable(name: "statvfs_result_desc", scope: !0, file: !616, line: 2062, type: !3769, isLocal: true, isDefinition: true, variable: %struct.PyStructSequence_Desc* @statvfs_result_desc)
!3796 = !DIGlobalVariable(name: "statvfs_result__doc__", scope: !0, file: !616, line: 2040, type: !3797, isLocal: true, isDefinition: true, variable: [287 x i8]* @statvfs_result__doc__)
!3797 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2296, align: 8, elements: !3798)
!3798 = !{!3799}
!3799 = !DISubrange(count: 287)
!3800 = !DIGlobalVariable(name: "statvfs_result_fields", scope: !0, file: !616, line: 2048, type: !3801, isLocal: true, isDefinition: true, variable: [11 x %struct.PyStructSequence_Field]* @statvfs_result_fields)
!3801 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3787, size: 1408, align: 64, elements: !3802)
!3802 = !{!3803}
!3803 = !DISubrange(count: 11)
!3804 = !DIGlobalVariable(name: "ticks_per_second", scope: !0, file: !616, line: 7563, type: !287, isLocal: true, isDefinition: true, variable: i64* @ticks_per_second)
!3805 = !DIGlobalVariable(name: "sched_param_desc", scope: !0, file: !616, line: 5645, type: !3769, isLocal: true, isDefinition: true, variable: %struct.PyStructSequence_Desc* @sched_param_desc)
!3806 = !DIGlobalVariable(name: "sched_param__doc__", scope: !0, file: !616, line: 5636, type: !3807, isLocal: true, isDefinition: true, variable: [97 x i8]* @sched_param__doc__)
!3807 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 776, align: 8, elements: !3808)
!3808 = !{!3809}
!3809 = !DISubrange(count: 97)
!3810 = !DIGlobalVariable(name: "sched_param_fields", scope: !0, file: !616, line: 5640, type: !3811, isLocal: true, isDefinition: true, variable: [2 x %struct.PyStructSequence_Field]* @sched_param_fields)
!3811 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3787, size: 256, align: 64, elements: !1579)
!3812 = !DIGlobalVariable(name: "kwlist", scope: !3191, file: !616, line: 5624, type: !3267, isLocal: true, isDefinition: true, variable: [2 x i8*]* @sched_param_new.kwlist)
!3813 = !DIGlobalVariable(name: "TerminalSize_desc", scope: !0, file: !616, line: 10928, type: !3769, isLocal: true, isDefinition: true, variable: %struct.PyStructSequence_Desc* @TerminalSize_desc)
!3814 = !DIGlobalVariable(name: "TerminalSize_docstring", scope: !0, file: !616, line: 10919, type: !3815, isLocal: true, isDefinition: true, variable: [61 x i8]* @TerminalSize_docstring)
!3815 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 488, align: 8, elements: !3816)
!3816 = !{!3817}
!3817 = !DISubrange(count: 61)
!3818 = !DIGlobalVariable(name: "TerminalSize_fields", scope: !0, file: !616, line: 10922, type: !3819, isLocal: true, isDefinition: true, variable: [3 x %struct.PyStructSequence_Field]* @TerminalSize_fields)
!3819 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3787, size: 384, align: 64, elements: !866)
!3820 = !DIGlobalVariable(name: "times_result_desc", scope: !0, file: !616, line: 7488, type: !3769, isLocal: true, isDefinition: true, variable: %struct.PyStructSequence_Desc* @times_result_desc)
!3821 = !DIGlobalVariable(name: "times_result__doc__", scope: !0, file: !616, line: 7479, type: !3822, isLocal: true, isDefinition: true, variable: [264 x i8]* @times_result__doc__)
!3822 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 2112, align: 8, elements: !3823)
!3823 = !{!3824}
!3824 = !DISubrange(count: 264)
!3825 = !DIGlobalVariable(name: "times_result_fields", scope: !0, file: !616, line: 7470, type: !3786, isLocal: true, isDefinition: true, variable: [6 x %struct.PyStructSequence_Field]* @times_result_fields)
!3826 = !DIGlobalVariable(name: "uname_result_desc", scope: !0, file: !616, line: 4601, type: !3769, isLocal: true, isDefinition: true, variable: %struct.PyStructSequence_Desc* @uname_result_desc)
!3827 = !DIGlobalVariable(name: "uname_result__doc__", scope: !0, file: !616, line: 4593, type: !3828, isLocal: true, isDefinition: true, variable: [246 x i8]* @uname_result__doc__)
!3828 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 1968, align: 8, elements: !3829)
!3829 = !{!3830}
!3830 = !DISubrange(count: 246)
!3831 = !DIGlobalVariable(name: "uname_result_fields", scope: !0, file: !616, line: 4584, type: !3786, isLocal: true, isDefinition: true, variable: [6 x %struct.PyStructSequence_Field]* @uname_result_fields)
!3832 = !DIGlobalVariable(name: "billion", scope: !0, file: !616, line: 2156, type: !276, isLocal: true, isDefinition: true, variable: %struct._object** @billion)
!3833 = !DIGlobalVariable(name: "have_functions", scope: !0, file: !616, line: 12077, type: !3834, isLocal: true, isDefinition: true, variable: [29 x i8*]* @have_functions)
!3834 = !DICompositeType(tag: DW_TAG_array_type, baseType: !322, size: 1856, align: 64, elements: !3835)
!3835 = !{!3836}
!3836 = !DISubrange(count: 29)
!3837 = !{i32 2, !"Dwarf Version", i32 4}
!3838 = !{i32 2, !"Debug Info Version", i32 3}
!3839 = !{!"clang version 3.7.1 (https://github.com/llvm-mirror/clang.git 0dbefa1b83eb90f7a06b5df5df254ce32be3db4b) (git@github.com:kim-yoonseung/llvm.git e8e68907a8135028089af4d924da468e2b7257fa)"}
!3840 = !{!3841, !3841, i64 0}
!3841 = !{!"int", !3842, i64 0}
!3842 = !{!"omnipotent char", !3843, i64 0}
!3843 = !{!"Simple C/C++ TBAA"}
!3844 = !DIExpression()
!3845 = !DILocation(line: 396, column: 23, scope: !690)
!3846 = !DILocation(line: 398, column: 9, scope: !3847)
!3847 = distinct !DILexicalBlock(scope: !690, file: !616, line: 398, column: 9)
!3848 = !DILocation(line: 398, column: 13, scope: !3847)
!3849 = !DILocation(line: 398, column: 9, scope: !690)
!3850 = !DILocation(line: 399, column: 16, scope: !3847)
!3851 = !DILocation(line: 399, column: 9, scope: !3847)
!3852 = !DILocation(line: 400, column: 36, scope: !690)
!3853 = !DILocation(line: 400, column: 12, scope: !690)
!3854 = !DILocation(line: 400, column: 5, scope: !690)
!3855 = !DILocation(line: 401, column: 1, scope: !690)
!3856 = !DILocation(line: 404, column: 23, scope: !695)
!3857 = !DILocation(line: 406, column: 9, scope: !3858)
!3858 = distinct !DILexicalBlock(scope: !695, file: !616, line: 406, column: 9)
!3859 = !DILocation(line: 406, column: 13, scope: !3858)
!3860 = !DILocation(line: 406, column: 9, scope: !695)
!3861 = !DILocation(line: 407, column: 16, scope: !3858)
!3862 = !DILocation(line: 407, column: 9, scope: !3858)
!3863 = !DILocation(line: 408, column: 36, scope: !695)
!3864 = !DILocation(line: 408, column: 12, scope: !695)
!3865 = !DILocation(line: 408, column: 5, scope: !695)
!3866 = !DILocation(line: 409, column: 1, scope: !695)
!3867 = !{!3868, !3868, i64 0}
!3868 = !{!"any pointer", !3842, i64 0}
!3869 = !DILocation(line: 412, column: 29, scope: !700)
!3870 = !DILocation(line: 412, column: 40, scope: !700)
!3871 = !DILocation(line: 414, column: 5, scope: !700)
!3872 = !DILocation(line: 414, column: 11, scope: !700)
!3873 = !DILocation(line: 415, column: 5, scope: !700)
!3874 = !DILocation(line: 415, column: 15, scope: !700)
!3875 = !DILocation(line: 416, column: 5, scope: !700)
!3876 = !DILocation(line: 416, column: 9, scope: !700)
!3877 = !DILocation(line: 417, column: 5, scope: !700)
!3878 = !DILocation(line: 417, column: 10, scope: !700)
!3879 = !DILocation(line: 418, column: 5, scope: !700)
!3880 = !DILocation(line: 418, column: 19, scope: !700)
!3881 = !DILocation(line: 420, column: 28, scope: !700)
!3882 = !DILocation(line: 420, column: 13, scope: !700)
!3883 = !DILocation(line: 420, column: 11, scope: !700)
!3884 = !DILocation(line: 421, column: 9, scope: !3885)
!3885 = distinct !DILexicalBlock(scope: !700, file: !616, line: 421, column: 9)
!3886 = !DILocation(line: 421, column: 15, scope: !3885)
!3887 = !DILocation(line: 421, column: 9, scope: !700)
!3888 = !DILocation(line: 422, column: 22, scope: !3889)
!3889 = distinct !DILexicalBlock(scope: !3885, file: !616, line: 421, column: 30)
!3890 = !DILocation(line: 424, column: 36, scope: !3889)
!3891 = !DILocation(line: 424, column: 43, scope: !3889)
!3892 = !{!3893, !3868, i64 8}
!3893 = !{!"_object", !3894, i64 0, !3868, i64 8}
!3894 = !{!"long", !3842, i64 0}
!3895 = !DILocation(line: 424, column: 53, scope: !3889)
!3896 = !{!3897, !3868, i64 24}
!3897 = !{!"_typeobject", !3898, i64 0, !3868, i64 24, !3894, i64 32, !3894, i64 40, !3868, i64 48, !3868, i64 56, !3868, i64 64, !3868, i64 72, !3868, i64 80, !3868, i64 88, !3868, i64 96, !3868, i64 104, !3868, i64 112, !3868, i64 120, !3868, i64 128, !3868, i64 136, !3868, i64 144, !3868, i64 152, !3868, i64 160, !3894, i64 168, !3868, i64 176, !3868, i64 184, !3868, i64 192, !3868, i64 200, !3894, i64 208, !3868, i64 216, !3868, i64 224, !3868, i64 232, !3868, i64 240, !3868, i64 248, !3868, i64 256, !3868, i64 264, !3868, i64 272, !3868, i64 280, !3894, i64 288, !3868, i64 296, !3868, i64 304, !3868, i64 312, !3868, i64 320, !3868, i64 328, !3868, i64 336, !3868, i64 344, !3868, i64 352, !3868, i64 360, !3868, i64 368, !3868, i64 376, !3841, i64 384, !3868, i64 392}
!3898 = !{!"", !3893, i64 0, !3894, i64 16}
!3899 = !DILocation(line: 422, column: 9, scope: !3889)
!3900 = !DILocation(line: 425, column: 9, scope: !3889)
!3901 = !DILocation(line: 441, column: 39, scope: !700)
!3902 = !DILocation(line: 441, column: 14, scope: !700)
!3903 = !DILocation(line: 441, column: 12, scope: !700)
!3904 = !{!3894, !3894, i64 0}
!3905 = !DILocation(line: 443, column: 10, scope: !3906)
!3906 = distinct !DILexicalBlock(scope: !700, file: !616, line: 443, column: 9)
!3907 = !DILocation(line: 443, column: 9, scope: !700)
!3908 = !DILocation(line: 444, column: 22, scope: !3909)
!3909 = distinct !DILexicalBlock(scope: !3906, file: !616, line: 443, column: 20)
!3910 = !DILocation(line: 444, column: 15, scope: !3909)
!3911 = !DILocation(line: 444, column: 13, scope: !3909)
!3912 = !DILocation(line: 446, column: 13, scope: !3913)
!3913 = distinct !DILexicalBlock(scope: !3909, file: !616, line: 446, column: 13)
!3914 = !DILocation(line: 446, column: 20, scope: !3913)
!3915 = !DILocation(line: 446, column: 13, scope: !3909)
!3916 = !DILocation(line: 447, column: 17, scope: !3917)
!3917 = distinct !DILexicalBlock(scope: !3918, file: !616, line: 447, column: 17)
!3918 = distinct !DILexicalBlock(scope: !3913, file: !616, line: 446, column: 27)
!3919 = !DILocation(line: 447, column: 17, scope: !3918)
!3920 = !DILocation(line: 448, column: 17, scope: !3917)
!3921 = !DILocation(line: 450, column: 13, scope: !3918)
!3922 = !DILocation(line: 454, column: 13, scope: !3923)
!3923 = distinct !DILexicalBlock(scope: !3909, file: !616, line: 454, column: 13)
!3924 = !DILocation(line: 454, column: 20, scope: !3923)
!3925 = !DILocation(line: 454, column: 13, scope: !3909)
!3926 = !DILocation(line: 455, column: 13, scope: !3923)
!3927 = !DILocation(line: 459, column: 19, scope: !3928)
!3928 = distinct !DILexicalBlock(scope: !3909, file: !616, line: 458, column: 13)
!3929 = !DILocation(line: 459, column: 13, scope: !3928)
!3930 = !DILocation(line: 459, column: 26, scope: !3928)
!3931 = !DILocation(line: 459, column: 23, scope: !3928)
!3932 = !DILocation(line: 458, column: 13, scope: !3909)
!3933 = !DILocation(line: 460, column: 13, scope: !3928)
!3934 = !DILocation(line: 461, column: 9, scope: !3909)
!3935 = !DILocation(line: 464, column: 9, scope: !3936)
!3936 = distinct !DILexicalBlock(scope: !700, file: !616, line: 464, column: 9)
!3937 = !DILocation(line: 464, column: 18, scope: !3936)
!3938 = !DILocation(line: 464, column: 9, scope: !700)
!3939 = !DILocation(line: 465, column: 9, scope: !3936)
!3940 = !DILocation(line: 472, column: 37, scope: !700)
!3941 = !DILocation(line: 472, column: 15, scope: !700)
!3942 = !DILocation(line: 472, column: 13, scope: !700)
!3943 = !DILocation(line: 473, column: 9, scope: !3944)
!3944 = distinct !DILexicalBlock(scope: !700, file: !616, line: 473, column: 9)
!3945 = !DILocation(line: 473, column: 9, scope: !700)
!3946 = !DILocation(line: 474, column: 36, scope: !3947)
!3947 = distinct !DILexicalBlock(scope: !3948, file: !616, line: 474, column: 13)
!3948 = distinct !DILexicalBlock(scope: !3944, file: !616, line: 473, column: 27)
!3949 = !DILocation(line: 474, column: 13, scope: !3947)
!3950 = !DILocation(line: 474, column: 13, scope: !3948)
!3951 = !DILocation(line: 475, column: 13, scope: !3947)
!3952 = !DILocation(line: 476, column: 9, scope: !3948)
!3953 = !DILocation(line: 479, column: 18, scope: !700)
!3954 = !DILocation(line: 479, column: 11, scope: !700)
!3955 = !DILocation(line: 479, column: 9, scope: !700)
!3956 = !DILocation(line: 488, column: 9, scope: !3957)
!3957 = distinct !DILexicalBlock(scope: !700, file: !616, line: 488, column: 9)
!3958 = !DILocation(line: 488, column: 13, scope: !3957)
!3959 = !DILocation(line: 488, column: 9, scope: !700)
!3960 = !DILocation(line: 489, column: 9, scope: !3957)
!3961 = !DILocation(line: 493, column: 24, scope: !3962)
!3962 = distinct !DILexicalBlock(scope: !700, file: !616, line: 492, column: 9)
!3963 = !DILocation(line: 493, column: 9, scope: !3962)
!3964 = !DILocation(line: 493, column: 31, scope: !3962)
!3965 = !DILocation(line: 493, column: 28, scope: !3962)
!3966 = !DILocation(line: 492, column: 9, scope: !700)
!3967 = !DILocation(line: 494, column: 9, scope: !3962)
!3968 = !DILocation(line: 498, column: 5, scope: !700)
!3969 = !DILocation(line: 498, column: 10, scope: !3970)
!3970 = !DILexicalBlockFile(scope: !710, file: !616, discriminator: 1)
!3971 = !DILocation(line: 498, column: 20, scope: !710)
!3972 = !DILocation(line: 498, column: 50, scope: !710)
!3973 = !DILocation(line: 498, column: 66, scope: !3974)
!3974 = distinct !DILexicalBlock(scope: !710, file: !616, line: 498, column: 63)
!3975 = !DILocation(line: 498, column: 83, scope: !3974)
!3976 = !DILocation(line: 498, column: 63, scope: !3974)
!3977 = !{!3893, !3894, i64 0}
!3978 = !DILocation(line: 498, column: 93, scope: !3974)
!3979 = !DILocation(line: 498, column: 63, scope: !710)
!3980 = !DILocation(line: 498, column: 63, scope: !3981)
!3981 = !DILexicalBlockFile(scope: !710, file: !616, discriminator: 2)
!3982 = !DILocation(line: 498, column: 124, scope: !3983)
!3983 = !DILexicalBlockFile(scope: !3974, file: !616, discriminator: 3)
!3984 = !DILocation(line: 498, column: 142, scope: !3974)
!3985 = !DILocation(line: 498, column: 152, scope: !3974)
!3986 = !{!3897, !3868, i64 48}
!3987 = !DILocation(line: 498, column: 177, scope: !3974)
!3988 = !DILocation(line: 498, column: 108, scope: !3974)
!3989 = !DILocation(line: 498, column: 196, scope: !3990)
!3990 = !DILexicalBlockFile(scope: !700, file: !616, discriminator: 4)
!3991 = !DILocation(line: 498, column: 196, scope: !710)
!3992 = !DILocation(line: 498, column: 196, scope: !3993)
!3993 = !DILexicalBlockFile(scope: !710, file: !616, discriminator: 5)
!3994 = !DILocation(line: 499, column: 19, scope: !700)
!3995 = !DILocation(line: 499, column: 15, scope: !700)
!3996 = !DILocation(line: 499, column: 6, scope: !700)
!3997 = !DILocation(line: 499, column: 17, scope: !700)
!3998 = !DILocation(line: 500, column: 5, scope: !700)
!3999 = !DILocation(line: 503, column: 21, scope: !700)
!4000 = !DILocation(line: 503, column: 5, scope: !700)
!4001 = !DILocation(line: 505, column: 5, scope: !700)
!4002 = !DILocation(line: 508, column: 21, scope: !700)
!4003 = !DILocation(line: 508, column: 5, scope: !700)
!4004 = !DILocation(line: 513, column: 5, scope: !700)
!4005 = !DILocation(line: 513, column: 10, scope: !4006)
!4006 = !DILexicalBlockFile(scope: !712, file: !616, discriminator: 1)
!4007 = !DILocation(line: 513, column: 20, scope: !712)
!4008 = !DILocation(line: 513, column: 50, scope: !712)
!4009 = !DILocation(line: 513, column: 66, scope: !4010)
!4010 = distinct !DILexicalBlock(scope: !712, file: !616, line: 513, column: 63)
!4011 = !DILocation(line: 513, column: 83, scope: !4010)
!4012 = !DILocation(line: 513, column: 63, scope: !4010)
!4013 = !DILocation(line: 513, column: 93, scope: !4010)
!4014 = !DILocation(line: 513, column: 63, scope: !712)
!4015 = !DILocation(line: 513, column: 63, scope: !4016)
!4016 = !DILexicalBlockFile(scope: !712, file: !616, discriminator: 2)
!4017 = !DILocation(line: 513, column: 124, scope: !4018)
!4018 = !DILexicalBlockFile(scope: !4010, file: !616, discriminator: 3)
!4019 = !DILocation(line: 513, column: 142, scope: !4010)
!4020 = !DILocation(line: 513, column: 152, scope: !4010)
!4021 = !DILocation(line: 513, column: 177, scope: !4010)
!4022 = !DILocation(line: 513, column: 108, scope: !4010)
!4023 = !DILocation(line: 513, column: 196, scope: !3990)
!4024 = !DILocation(line: 513, column: 196, scope: !712)
!4025 = !DILocation(line: 513, column: 196, scope: !4026)
!4026 = !DILexicalBlockFile(scope: !712, file: !616, discriminator: 5)
!4027 = !DILocation(line: 514, column: 5, scope: !700)
!4028 = !DILocation(line: 515, column: 1, scope: !700)
!4029 = !DILocation(line: 518, column: 29, scope: !713)
!4030 = !DILocation(line: 518, column: 40, scope: !713)
!4031 = !DILocation(line: 520, column: 5, scope: !713)
!4032 = !DILocation(line: 520, column: 11, scope: !713)
!4033 = !DILocation(line: 521, column: 5, scope: !713)
!4034 = !DILocation(line: 521, column: 15, scope: !713)
!4035 = !DILocation(line: 522, column: 5, scope: !713)
!4036 = !DILocation(line: 522, column: 9, scope: !713)
!4037 = !DILocation(line: 523, column: 5, scope: !713)
!4038 = !DILocation(line: 523, column: 10, scope: !713)
!4039 = !DILocation(line: 524, column: 5, scope: !713)
!4040 = !DILocation(line: 524, column: 19, scope: !713)
!4041 = !DILocation(line: 526, column: 28, scope: !713)
!4042 = !DILocation(line: 526, column: 13, scope: !713)
!4043 = !DILocation(line: 526, column: 11, scope: !713)
!4044 = !DILocation(line: 527, column: 9, scope: !4045)
!4045 = distinct !DILexicalBlock(scope: !713, file: !616, line: 527, column: 9)
!4046 = !DILocation(line: 527, column: 15, scope: !4045)
!4047 = !DILocation(line: 527, column: 9, scope: !713)
!4048 = !DILocation(line: 528, column: 22, scope: !4049)
!4049 = distinct !DILexicalBlock(scope: !4045, file: !616, line: 527, column: 30)
!4050 = !DILocation(line: 530, column: 36, scope: !4049)
!4051 = !DILocation(line: 530, column: 43, scope: !4049)
!4052 = !DILocation(line: 530, column: 53, scope: !4049)
!4053 = !DILocation(line: 528, column: 9, scope: !4049)
!4054 = !DILocation(line: 531, column: 9, scope: !4049)
!4055 = !DILocation(line: 547, column: 39, scope: !713)
!4056 = !DILocation(line: 547, column: 14, scope: !713)
!4057 = !DILocation(line: 547, column: 12, scope: !713)
!4058 = !DILocation(line: 549, column: 10, scope: !4059)
!4059 = distinct !DILexicalBlock(scope: !713, file: !616, line: 549, column: 9)
!4060 = !DILocation(line: 549, column: 9, scope: !713)
!4061 = !DILocation(line: 550, column: 22, scope: !4062)
!4062 = distinct !DILexicalBlock(scope: !4059, file: !616, line: 549, column: 20)
!4063 = !DILocation(line: 550, column: 15, scope: !4062)
!4064 = !DILocation(line: 550, column: 13, scope: !4062)
!4065 = !DILocation(line: 552, column: 13, scope: !4066)
!4066 = distinct !DILexicalBlock(scope: !4062, file: !616, line: 552, column: 13)
!4067 = !DILocation(line: 552, column: 20, scope: !4066)
!4068 = !DILocation(line: 552, column: 13, scope: !4062)
!4069 = !DILocation(line: 553, column: 17, scope: !4070)
!4070 = distinct !DILexicalBlock(scope: !4071, file: !616, line: 553, column: 17)
!4071 = distinct !DILexicalBlock(scope: !4066, file: !616, line: 552, column: 27)
!4072 = !DILocation(line: 553, column: 17, scope: !4071)
!4073 = !DILocation(line: 554, column: 17, scope: !4070)
!4074 = !DILocation(line: 556, column: 13, scope: !4071)
!4075 = !DILocation(line: 560, column: 13, scope: !4076)
!4076 = distinct !DILexicalBlock(scope: !4062, file: !616, line: 560, column: 13)
!4077 = !DILocation(line: 560, column: 20, scope: !4076)
!4078 = !DILocation(line: 560, column: 13, scope: !4062)
!4079 = !DILocation(line: 561, column: 13, scope: !4080)
!4080 = distinct !DILexicalBlock(scope: !4076, file: !616, line: 560, column: 25)
!4081 = !DILocation(line: 566, column: 19, scope: !4082)
!4082 = distinct !DILexicalBlock(scope: !4062, file: !616, line: 565, column: 13)
!4083 = !DILocation(line: 566, column: 13, scope: !4082)
!4084 = !DILocation(line: 566, column: 26, scope: !4082)
!4085 = !DILocation(line: 566, column: 23, scope: !4082)
!4086 = !DILocation(line: 565, column: 13, scope: !4062)
!4087 = !DILocation(line: 567, column: 13, scope: !4082)
!4088 = !DILocation(line: 568, column: 9, scope: !4062)
!4089 = !DILocation(line: 571, column: 9, scope: !4090)
!4090 = distinct !DILexicalBlock(scope: !713, file: !616, line: 571, column: 9)
!4091 = !DILocation(line: 571, column: 18, scope: !4090)
!4092 = !DILocation(line: 571, column: 9, scope: !713)
!4093 = !DILocation(line: 572, column: 9, scope: !4090)
!4094 = !DILocation(line: 579, column: 37, scope: !713)
!4095 = !DILocation(line: 579, column: 15, scope: !713)
!4096 = !DILocation(line: 579, column: 13, scope: !713)
!4097 = !DILocation(line: 580, column: 9, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !713, file: !616, line: 580, column: 9)
!4099 = !DILocation(line: 580, column: 9, scope: !713)
!4100 = !DILocation(line: 581, column: 36, scope: !4101)
!4101 = distinct !DILexicalBlock(scope: !4102, file: !616, line: 581, column: 13)
!4102 = distinct !DILexicalBlock(scope: !4098, file: !616, line: 580, column: 27)
!4103 = !DILocation(line: 581, column: 13, scope: !4101)
!4104 = !DILocation(line: 581, column: 13, scope: !4102)
!4105 = !DILocation(line: 582, column: 13, scope: !4101)
!4106 = !DILocation(line: 583, column: 9, scope: !4102)
!4107 = !DILocation(line: 586, column: 18, scope: !713)
!4108 = !DILocation(line: 586, column: 11, scope: !713)
!4109 = !DILocation(line: 586, column: 9, scope: !713)
!4110 = !DILocation(line: 595, column: 9, scope: !4111)
!4111 = distinct !DILexicalBlock(scope: !713, file: !616, line: 595, column: 9)
!4112 = !DILocation(line: 595, column: 13, scope: !4111)
!4113 = !DILocation(line: 595, column: 9, scope: !713)
!4114 = !DILocation(line: 596, column: 9, scope: !4111)
!4115 = !DILocation(line: 600, column: 24, scope: !4116)
!4116 = distinct !DILexicalBlock(scope: !713, file: !616, line: 599, column: 9)
!4117 = !DILocation(line: 600, column: 9, scope: !4116)
!4118 = !DILocation(line: 600, column: 31, scope: !4116)
!4119 = !DILocation(line: 600, column: 28, scope: !4116)
!4120 = !DILocation(line: 599, column: 9, scope: !713)
!4121 = !DILocation(line: 601, column: 9, scope: !4116)
!4122 = !DILocation(line: 605, column: 5, scope: !713)
!4123 = !DILocation(line: 605, column: 10, scope: !4124)
!4124 = !DILexicalBlockFile(scope: !723, file: !616, discriminator: 1)
!4125 = !DILocation(line: 605, column: 20, scope: !723)
!4126 = !DILocation(line: 605, column: 50, scope: !723)
!4127 = !DILocation(line: 605, column: 66, scope: !4128)
!4128 = distinct !DILexicalBlock(scope: !723, file: !616, line: 605, column: 63)
!4129 = !DILocation(line: 605, column: 83, scope: !4128)
!4130 = !DILocation(line: 605, column: 63, scope: !4128)
!4131 = !DILocation(line: 605, column: 93, scope: !4128)
!4132 = !DILocation(line: 605, column: 63, scope: !723)
!4133 = !DILocation(line: 605, column: 63, scope: !4134)
!4134 = !DILexicalBlockFile(scope: !723, file: !616, discriminator: 2)
!4135 = !DILocation(line: 605, column: 124, scope: !4136)
!4136 = !DILexicalBlockFile(scope: !4128, file: !616, discriminator: 3)
!4137 = !DILocation(line: 605, column: 142, scope: !4128)
!4138 = !DILocation(line: 605, column: 152, scope: !4128)
!4139 = !DILocation(line: 605, column: 177, scope: !4128)
!4140 = !DILocation(line: 605, column: 108, scope: !4128)
!4141 = !DILocation(line: 605, column: 196, scope: !4142)
!4142 = !DILexicalBlockFile(scope: !713, file: !616, discriminator: 4)
!4143 = !DILocation(line: 605, column: 196, scope: !723)
!4144 = !DILocation(line: 605, column: 196, scope: !4145)
!4145 = !DILexicalBlockFile(scope: !723, file: !616, discriminator: 5)
!4146 = !DILocation(line: 606, column: 19, scope: !713)
!4147 = !DILocation(line: 606, column: 15, scope: !713)
!4148 = !DILocation(line: 606, column: 6, scope: !713)
!4149 = !DILocation(line: 606, column: 17, scope: !713)
!4150 = !DILocation(line: 607, column: 5, scope: !713)
!4151 = !DILocation(line: 610, column: 21, scope: !713)
!4152 = !DILocation(line: 610, column: 5, scope: !713)
!4153 = !DILocation(line: 612, column: 5, scope: !713)
!4154 = !DILocation(line: 615, column: 21, scope: !713)
!4155 = !DILocation(line: 615, column: 5, scope: !713)
!4156 = !DILocation(line: 620, column: 5, scope: !713)
!4157 = !DILocation(line: 620, column: 10, scope: !4158)
!4158 = !DILexicalBlockFile(scope: !725, file: !616, discriminator: 1)
!4159 = !DILocation(line: 620, column: 20, scope: !725)
!4160 = !DILocation(line: 620, column: 50, scope: !725)
!4161 = !DILocation(line: 620, column: 66, scope: !4162)
!4162 = distinct !DILexicalBlock(scope: !725, file: !616, line: 620, column: 63)
!4163 = !DILocation(line: 620, column: 83, scope: !4162)
!4164 = !DILocation(line: 620, column: 63, scope: !4162)
!4165 = !DILocation(line: 620, column: 93, scope: !4162)
!4166 = !DILocation(line: 620, column: 63, scope: !725)
!4167 = !DILocation(line: 620, column: 63, scope: !4168)
!4168 = !DILexicalBlockFile(scope: !725, file: !616, discriminator: 2)
!4169 = !DILocation(line: 620, column: 124, scope: !4170)
!4170 = !DILexicalBlockFile(scope: !4162, file: !616, discriminator: 3)
!4171 = !DILocation(line: 620, column: 142, scope: !4162)
!4172 = !DILocation(line: 620, column: 152, scope: !4162)
!4173 = !DILocation(line: 620, column: 177, scope: !4162)
!4174 = !DILocation(line: 620, column: 108, scope: !4162)
!4175 = !DILocation(line: 620, column: 196, scope: !4142)
!4176 = !DILocation(line: 620, column: 196, scope: !725)
!4177 = !DILocation(line: 620, column: 196, scope: !4178)
!4178 = !DILexicalBlockFile(scope: !725, file: !616, discriminator: 5)
!4179 = !DILocation(line: 621, column: 5, scope: !713)
!4180 = !DILocation(line: 622, column: 1, scope: !713)
!4181 = !DILocation(line: 12210, column: 5, scope: !726)
!4182 = !DILocation(line: 12210, column: 15, scope: !726)
!4183 = !DILocation(line: 12210, column: 19, scope: !726)
!4184 = !DILocation(line: 12211, column: 5, scope: !726)
!4185 = !DILocation(line: 12211, column: 15, scope: !726)
!4186 = !DILocation(line: 12212, column: 5, scope: !726)
!4187 = !DILocation(line: 12212, column: 12, scope: !726)
!4188 = !DILocation(line: 12218, column: 9, scope: !726)
!4189 = !DILocation(line: 12218, column: 7, scope: !726)
!4190 = !DILocation(line: 12219, column: 9, scope: !4191)
!4191 = distinct !DILexicalBlock(scope: !726, file: !616, line: 12219, column: 9)
!4192 = !DILocation(line: 12219, column: 11, scope: !4191)
!4193 = !DILocation(line: 12219, column: 9, scope: !726)
!4194 = !DILocation(line: 12220, column: 9, scope: !4191)
!4195 = !DILocation(line: 12223, column: 9, scope: !726)
!4196 = !DILocation(line: 12223, column: 7, scope: !726)
!4197 = !DILocation(line: 12224, column: 5, scope: !726)
!4198 = !DILocation(line: 12224, column: 10, scope: !4199)
!4199 = !DILexicalBlockFile(scope: !735, file: !616, discriminator: 1)
!4200 = !DILocation(line: 12224, column: 20, scope: !735)
!4201 = !DILocation(line: 12224, column: 51, scope: !735)
!4202 = !DILocation(line: 12224, column: 59, scope: !4203)
!4203 = distinct !DILexicalBlock(scope: !735, file: !616, line: 12224, column: 59)
!4204 = !DILocation(line: 12224, column: 75, scope: !4203)
!4205 = !DILocation(line: 12224, column: 59, scope: !735)
!4206 = !DILocation(line: 12224, column: 106, scope: !4207)
!4207 = !DILexicalBlockFile(scope: !4203, file: !616, discriminator: 2)
!4208 = !DILocation(line: 12224, column: 125, scope: !4203)
!4209 = !DILocation(line: 12224, column: 134, scope: !4203)
!4210 = !DILocation(line: 12224, column: 90, scope: !4203)
!4211 = !DILocation(line: 12224, column: 139, scope: !4212)
!4212 = !DILexicalBlockFile(scope: !4213, file: !616, discriminator: 4)
!4213 = !DILexicalBlockFile(scope: !726, file: !616, discriminator: 3)
!4214 = !DILocation(line: 12224, column: 139, scope: !735)
!4215 = !DILocation(line: 12224, column: 139, scope: !4216)
!4216 = !DILexicalBlockFile(scope: !735, file: !616, discriminator: 5)
!4217 = !DILocation(line: 12225, column: 9, scope: !4218)
!4218 = distinct !DILexicalBlock(scope: !726, file: !616, line: 12225, column: 9)
!4219 = !DILocation(line: 12225, column: 11, scope: !4218)
!4220 = !DILocation(line: 12225, column: 25, scope: !4218)
!4221 = !DILocation(line: 12225, column: 47, scope: !4222)
!4222 = !DILexicalBlockFile(scope: !4218, file: !616, discriminator: 1)
!4223 = !DILocation(line: 12225, column: 61, scope: !4218)
!4224 = !DILocation(line: 12225, column: 28, scope: !4218)
!4225 = !DILocation(line: 12225, column: 64, scope: !4218)
!4226 = !DILocation(line: 12225, column: 9, scope: !726)
!4227 = !DILocation(line: 12226, column: 9, scope: !4218)
!4228 = !DILocation(line: 12227, column: 5, scope: !726)
!4229 = !DILocation(line: 12227, column: 10, scope: !4230)
!4230 = !DILexicalBlockFile(scope: !737, file: !616, discriminator: 1)
!4231 = !DILocation(line: 12227, column: 20, scope: !737)
!4232 = !DILocation(line: 12227, column: 50, scope: !737)
!4233 = !DILocation(line: 12227, column: 62, scope: !4234)
!4234 = distinct !DILexicalBlock(scope: !737, file: !616, line: 12227, column: 59)
!4235 = !DILocation(line: 12227, column: 79, scope: !4234)
!4236 = !DILocation(line: 12227, column: 59, scope: !4234)
!4237 = !DILocation(line: 12227, column: 89, scope: !4234)
!4238 = !DILocation(line: 12227, column: 59, scope: !737)
!4239 = !DILocation(line: 12227, column: 59, scope: !4240)
!4240 = !DILexicalBlockFile(scope: !737, file: !616, discriminator: 2)
!4241 = !DILocation(line: 12227, column: 120, scope: !4242)
!4242 = !DILexicalBlockFile(scope: !4234, file: !616, discriminator: 3)
!4243 = !DILocation(line: 12227, column: 138, scope: !4234)
!4244 = !DILocation(line: 12227, column: 148, scope: !4234)
!4245 = !DILocation(line: 12227, column: 173, scope: !4234)
!4246 = !DILocation(line: 12227, column: 104, scope: !4234)
!4247 = !DILocation(line: 12227, column: 192, scope: !4248)
!4248 = !DILexicalBlockFile(scope: !726, file: !616, discriminator: 4)
!4249 = !DILocation(line: 12227, column: 192, scope: !737)
!4250 = !DILocation(line: 12227, column: 192, scope: !4251)
!4251 = !DILexicalBlockFile(scope: !737, file: !616, discriminator: 5)
!4252 = !DILocation(line: 12229, column: 17, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !726, file: !616, line: 12229, column: 9)
!4254 = !DILocation(line: 12229, column: 9, scope: !4253)
!4255 = !DILocation(line: 12229, column: 9, scope: !726)
!4256 = !DILocation(line: 12230, column: 9, scope: !4253)
!4257 = !DILocation(line: 12232, column: 31, scope: !4258)
!4258 = distinct !DILexicalBlock(scope: !726, file: !616, line: 12232, column: 9)
!4259 = !DILocation(line: 12232, column: 9, scope: !4258)
!4260 = !DILocation(line: 12232, column: 9, scope: !726)
!4261 = !DILocation(line: 12233, column: 9, scope: !4258)
!4262 = !DILocation(line: 12235, column: 21, scope: !726)
!4263 = !DILocation(line: 12235, column: 38, scope: !726)
!4264 = !DILocation(line: 12235, column: 47, scope: !726)
!4265 = !DILocation(line: 12236, column: 24, scope: !726)
!4266 = !DILocation(line: 12236, column: 36, scope: !726)
!4267 = !DILocation(line: 12236, column: 5, scope: !726)
!4268 = !DILocation(line: 12239, column: 9, scope: !4269)
!4269 = distinct !DILexicalBlock(scope: !726, file: !616, line: 12239, column: 9)
!4270 = !DILocation(line: 12239, column: 30, scope: !4269)
!4271 = !DILocation(line: 12239, column: 9, scope: !726)
!4272 = !DILocation(line: 12240, column: 32, scope: !4269)
!4273 = !DILocation(line: 12240, column: 30, scope: !4269)
!4274 = !DILocation(line: 12240, column: 9, scope: !4269)
!4275 = !DILocation(line: 12243, column: 10, scope: !4276)
!4276 = distinct !DILexicalBlock(scope: !726, file: !616, line: 12243, column: 9)
!4277 = !DILocation(line: 12243, column: 9, scope: !726)
!4278 = !DILocation(line: 12245, column: 33, scope: !4279)
!4279 = distinct !DILexicalBlock(scope: !4276, file: !616, line: 12243, column: 23)
!4280 = !{!4281, !3868, i64 0}
!4281 = !{!"PyStructSequence_Desc", !3868, i64 0, !3868, i64 8, !3868, i64 16, !3841, i64 24}
!4282 = !DILocation(line: 12246, column: 13, scope: !4283)
!4283 = distinct !DILexicalBlock(scope: !4279, file: !616, line: 12246, column: 13)
!4284 = !DILocation(line: 12246, column: 80, scope: !4283)
!4285 = !DILocation(line: 12246, column: 13, scope: !4279)
!4286 = !DILocation(line: 12247, column: 13, scope: !4283)
!4287 = !DILocation(line: 12250, column: 31, scope: !4279)
!4288 = !DILocation(line: 12251, column: 43, scope: !4279)
!4289 = !DILocation(line: 12251, column: 26, scope: !4279)
!4290 = !{!4281, !3868, i64 16}
!4291 = !DILocation(line: 12251, column: 9, scope: !4279)
!4292 = !DILocation(line: 12251, column: 36, scope: !4279)
!4293 = !DILocation(line: 12251, column: 41, scope: !4279)
!4294 = !{!4295, !3868, i64 0}
!4295 = !{!"PyStructSequence_Field", !3868, i64 0, !3868, i64 8}
!4296 = !DILocation(line: 12252, column: 43, scope: !4279)
!4297 = !DILocation(line: 12252, column: 26, scope: !4279)
!4298 = !DILocation(line: 12252, column: 9, scope: !4279)
!4299 = !DILocation(line: 12252, column: 36, scope: !4279)
!4300 = !DILocation(line: 12252, column: 41, scope: !4279)
!4301 = !DILocation(line: 12253, column: 43, scope: !4279)
!4302 = !DILocation(line: 12253, column: 26, scope: !4279)
!4303 = !DILocation(line: 12253, column: 9, scope: !4279)
!4304 = !DILocation(line: 12253, column: 36, scope: !4279)
!4305 = !DILocation(line: 12253, column: 41, scope: !4279)
!4306 = !DILocation(line: 12254, column: 13, scope: !4307)
!4307 = distinct !DILexicalBlock(scope: !4279, file: !616, line: 12254, column: 13)
!4308 = !DILocation(line: 12254, column: 76, scope: !4307)
!4309 = !DILocation(line: 12254, column: 13, scope: !4279)
!4310 = !DILocation(line: 12255, column: 13, scope: !4307)
!4311 = !DILocation(line: 12256, column: 40, scope: !4279)
!4312 = !{!3897, !3868, i64 312}
!4313 = !DILocation(line: 12256, column: 23, scope: !4279)
!4314 = !DILocation(line: 12257, column: 31, scope: !4279)
!4315 = !DILocation(line: 12259, column: 34, scope: !4279)
!4316 = !DILocation(line: 12260, column: 13, scope: !4317)
!4317 = distinct !DILexicalBlock(scope: !4279, file: !616, line: 12260, column: 13)
!4318 = !DILocation(line: 12261, column: 62, scope: !4317)
!4319 = !DILocation(line: 12260, column: 13, scope: !4279)
!4320 = !DILocation(line: 12262, column: 13, scope: !4317)
!4321 = !DILocation(line: 12265, column: 28, scope: !4279)
!4322 = !DILocation(line: 12265, column: 26, scope: !4279)
!4323 = !DILocation(line: 12274, column: 31, scope: !4279)
!4324 = !DILocation(line: 12275, column: 13, scope: !4325)
!4325 = distinct !DILexicalBlock(scope: !4279, file: !616, line: 12275, column: 13)
!4326 = !DILocation(line: 12275, column: 76, scope: !4325)
!4327 = !DILocation(line: 12275, column: 13, scope: !4279)
!4328 = !DILocation(line: 12276, column: 13, scope: !4325)
!4329 = !DILocation(line: 12277, column: 31, scope: !4279)
!4330 = !DILocation(line: 12281, column: 13, scope: !4331)
!4331 = distinct !DILexicalBlock(scope: !4279, file: !616, line: 12281, column: 13)
!4332 = !DILocation(line: 12282, column: 60, scope: !4331)
!4333 = !DILocation(line: 12281, column: 13, scope: !4279)
!4334 = !DILocation(line: 12283, column: 13, scope: !4331)
!4335 = !DILocation(line: 12284, column: 5, scope: !4279)
!4336 = !DILocation(line: 12286, column: 63, scope: !726)
!4337 = !DILocation(line: 12287, column: 24, scope: !726)
!4338 = !DILocation(line: 12287, column: 5, scope: !726)
!4339 = !DILocation(line: 12289, column: 61, scope: !726)
!4340 = !DILocation(line: 12290, column: 24, scope: !726)
!4341 = !DILocation(line: 12290, column: 5, scope: !726)
!4342 = !DILocation(line: 12291, column: 64, scope: !726)
!4343 = !DILocation(line: 12292, column: 24, scope: !726)
!4344 = !DILocation(line: 12292, column: 5, scope: !726)
!4345 = !DILocation(line: 12296, column: 49, scope: !726)
!4346 = !DILocation(line: 12297, column: 24, scope: !726)
!4347 = !DILocation(line: 12297, column: 5, scope: !726)
!4348 = !DILocation(line: 12300, column: 28, scope: !726)
!4349 = !DILocation(line: 12301, column: 9, scope: !4350)
!4350 = distinct !DILexicalBlock(scope: !726, file: !616, line: 12301, column: 9)
!4351 = !DILocation(line: 12301, column: 74, scope: !4350)
!4352 = !DILocation(line: 12301, column: 9, scope: !726)
!4353 = !DILocation(line: 12302, column: 9, scope: !4350)
!4354 = !DILocation(line: 12303, column: 24, scope: !726)
!4355 = !DILocation(line: 12303, column: 5, scope: !726)
!4356 = !DILocation(line: 12305, column: 28, scope: !726)
!4357 = !DILocation(line: 12306, column: 9, scope: !4358)
!4358 = distinct !DILexicalBlock(scope: !726, file: !616, line: 12306, column: 9)
!4359 = !DILocation(line: 12306, column: 74, scope: !4358)
!4360 = !DILocation(line: 12306, column: 9, scope: !726)
!4361 = !DILocation(line: 12307, column: 9, scope: !4358)
!4362 = !DILocation(line: 12308, column: 24, scope: !726)
!4363 = !DILocation(line: 12308, column: 5, scope: !726)
!4364 = !DILocation(line: 12348, column: 51, scope: !726)
!4365 = !DILocation(line: 12349, column: 24, scope: !726)
!4366 = !DILocation(line: 12349, column: 5, scope: !726)
!4367 = !DILocation(line: 12351, column: 15, scope: !726)
!4368 = !DILocation(line: 12351, column: 13, scope: !726)
!4369 = !DILocation(line: 12352, column: 10, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !726, file: !616, line: 12352, column: 9)
!4371 = !DILocation(line: 12352, column: 9, scope: !726)
!4372 = !DILocation(line: 12353, column: 9, scope: !4370)
!4373 = !DILocation(line: 12357, column: 5, scope: !739)
!4374 = !DILocation(line: 12357, column: 9, scope: !739)
!4375 = !DILocation(line: 12358, column: 5, scope: !739)
!4376 = !DILocation(line: 12359, column: 5, scope: !739)
!4377 = !DILocation(line: 12360, column: 5, scope: !739)
!4378 = !DILocation(line: 12361, column: 41, scope: !739)
!4379 = !DILocation(line: 12361, column: 5, scope: !739)
!4380 = !DILocation(line: 12362, column: 43, scope: !739)
!4381 = !DILocation(line: 12362, column: 5, scope: !739)
!4382 = !DILocation(line: 12363, column: 5, scope: !726)
!4383 = !DILocation(line: 12369, column: 12, scope: !726)
!4384 = !DILocation(line: 12369, column: 10, scope: !726)
!4385 = !DILocation(line: 12370, column: 10, scope: !4386)
!4386 = distinct !DILexicalBlock(scope: !726, file: !616, line: 12370, column: 9)
!4387 = !DILocation(line: 12370, column: 9, scope: !726)
!4388 = !DILocation(line: 12371, column: 9, scope: !4386)
!4389 = !DILocation(line: 12372, column: 16, scope: !743)
!4390 = !DILocation(line: 12372, column: 10, scope: !743)
!4391 = !DILocation(line: 12372, column: 35, scope: !4392)
!4392 = !DILexicalBlockFile(scope: !4393, file: !616, discriminator: 2)
!4393 = !DILexicalBlockFile(scope: !742, file: !616, discriminator: 1)
!4394 = !DILocation(line: 12372, column: 34, scope: !742)
!4395 = !DILocation(line: 12372, column: 5, scope: !743)
!4396 = !DILocation(line: 12373, column: 9, scope: !741)
!4397 = !DILocation(line: 12373, column: 19, scope: !741)
!4398 = !DILocation(line: 12373, column: 52, scope: !741)
!4399 = !DILocation(line: 12373, column: 51, scope: !741)
!4400 = !DILocation(line: 12373, column: 67, scope: !741)
!4401 = !DILocation(line: 12373, column: 66, scope: !741)
!4402 = !DILocation(line: 12373, column: 59, scope: !741)
!4403 = !DILocation(line: 12373, column: 29, scope: !741)
!4404 = !DILocation(line: 12374, column: 14, scope: !4405)
!4405 = distinct !DILexicalBlock(scope: !741, file: !616, line: 12374, column: 13)
!4406 = !DILocation(line: 12374, column: 13, scope: !741)
!4407 = !DILocation(line: 12375, column: 13, scope: !4405)
!4408 = !DILocation(line: 12376, column: 27, scope: !4409)
!4409 = distinct !DILexicalBlock(scope: !741, file: !616, line: 12376, column: 13)
!4410 = !DILocation(line: 12376, column: 33, scope: !4409)
!4411 = !DILocation(line: 12376, column: 13, scope: !4409)
!4412 = !DILocation(line: 12376, column: 13, scope: !741)
!4413 = !DILocation(line: 12377, column: 13, scope: !4409)
!4414 = !DILocation(line: 12378, column: 9, scope: !741)
!4415 = !DILocation(line: 12378, column: 14, scope: !4416)
!4416 = !DILexicalBlockFile(scope: !745, file: !616, discriminator: 1)
!4417 = !DILocation(line: 12378, column: 24, scope: !745)
!4418 = !DILocation(line: 12378, column: 54, scope: !745)
!4419 = !DILocation(line: 12378, column: 72, scope: !4420)
!4420 = distinct !DILexicalBlock(scope: !745, file: !616, line: 12378, column: 69)
!4421 = !DILocation(line: 12378, column: 89, scope: !4420)
!4422 = !DILocation(line: 12378, column: 69, scope: !4420)
!4423 = !DILocation(line: 12378, column: 99, scope: !4420)
!4424 = !DILocation(line: 12378, column: 69, scope: !745)
!4425 = !DILocation(line: 12378, column: 69, scope: !4426)
!4426 = !DILexicalBlockFile(scope: !745, file: !616, discriminator: 2)
!4427 = !DILocation(line: 12378, column: 130, scope: !4428)
!4428 = !DILexicalBlockFile(scope: !4420, file: !616, discriminator: 3)
!4429 = !DILocation(line: 12378, column: 148, scope: !4420)
!4430 = !DILocation(line: 12378, column: 158, scope: !4420)
!4431 = !DILocation(line: 12378, column: 183, scope: !4420)
!4432 = !DILocation(line: 12378, column: 114, scope: !4420)
!4433 = !DILocation(line: 12378, column: 202, scope: !4434)
!4434 = !DILexicalBlockFile(scope: !741, file: !616, discriminator: 4)
!4435 = !DILocation(line: 12378, column: 202, scope: !745)
!4436 = !DILocation(line: 12378, column: 202, scope: !4437)
!4437 = !DILexicalBlockFile(scope: !745, file: !616, discriminator: 5)
!4438 = !DILocation(line: 12379, column: 5, scope: !742)
!4439 = !DILocation(line: 12379, column: 5, scope: !4393)
!4440 = !DILocation(line: 12379, column: 5, scope: !741)
!4441 = !DILocation(line: 12372, column: 47, scope: !742)
!4442 = !DILocation(line: 12372, column: 5, scope: !742)
!4443 = !DILocation(line: 12380, column: 24, scope: !726)
!4444 = !DILocation(line: 12380, column: 46, scope: !726)
!4445 = !DILocation(line: 12380, column: 5, scope: !726)
!4446 = !DILocation(line: 12382, column: 17, scope: !726)
!4447 = !DILocation(line: 12384, column: 12, scope: !726)
!4448 = !DILocation(line: 12384, column: 5, scope: !726)
!4449 = !DILocation(line: 12385, column: 1, scope: !726)
!4450 = !DILocation(line: 1187, column: 5, scope: !3113)
!4451 = !DILocation(line: 1187, column: 15, scope: !3113)
!4452 = !DILocation(line: 1191, column: 5, scope: !3113)
!4453 = !DILocation(line: 1191, column: 12, scope: !3113)
!4454 = !DILocation(line: 1194, column: 9, scope: !3113)
!4455 = !DILocation(line: 1194, column: 7, scope: !3113)
!4456 = !DILocation(line: 1195, column: 9, scope: !4457)
!4457 = distinct !DILexicalBlock(scope: !3113, file: !616, line: 1195, column: 9)
!4458 = !DILocation(line: 1195, column: 11, scope: !4457)
!4459 = !DILocation(line: 1195, column: 9, scope: !3113)
!4460 = !DILocation(line: 1196, column: 9, scope: !4457)
!4461 = !DILocation(line: 1233, column: 9, scope: !4462)
!4462 = distinct !DILexicalBlock(scope: !3113, file: !616, line: 1233, column: 9)
!4463 = !DILocation(line: 1233, column: 17, scope: !4462)
!4464 = !DILocation(line: 1233, column: 9, scope: !3113)
!4465 = !DILocation(line: 1234, column: 16, scope: !4462)
!4466 = !DILocation(line: 1234, column: 9, scope: !4462)
!4467 = !DILocation(line: 1236, column: 14, scope: !3120)
!4468 = !DILocation(line: 1236, column: 12, scope: !3120)
!4469 = !DILocation(line: 1236, column: 10, scope: !3120)
!4470 = !DILocation(line: 1236, column: 24, scope: !4471)
!4471 = !DILexicalBlockFile(scope: !4472, file: !616, discriminator: 2)
!4472 = !DILexicalBlockFile(scope: !3119, file: !616, discriminator: 1)
!4473 = !DILocation(line: 1236, column: 23, scope: !3119)
!4474 = !DILocation(line: 1236, column: 26, scope: !3119)
!4475 = !DILocation(line: 1236, column: 5, scope: !3120)
!4476 = !DILocation(line: 1237, column: 9, scope: !3118)
!4477 = !DILocation(line: 1237, column: 19, scope: !3118)
!4478 = !DILocation(line: 1238, column: 9, scope: !3118)
!4479 = !DILocation(line: 1238, column: 19, scope: !3118)
!4480 = !DILocation(line: 1239, column: 9, scope: !3118)
!4481 = !DILocation(line: 1239, column: 15, scope: !3118)
!4482 = !DILocation(line: 1239, column: 163, scope: !3118)
!4483 = !DILocation(line: 1239, column: 162, scope: !3118)
!4484 = !DILocation(line: 1239, column: 144, scope: !3118)
!4485 = !DILocation(line: 1240, column: 13, scope: !4486)
!4486 = distinct !DILexicalBlock(scope: !3118, file: !616, line: 1240, column: 13)
!4487 = !DILocation(line: 1240, column: 15, scope: !4486)
!4488 = !DILocation(line: 1240, column: 13, scope: !3118)
!4489 = !DILocation(line: 1241, column: 13, scope: !4486)
!4490 = !DILocation(line: 1242, column: 40, scope: !3118)
!4491 = !DILocation(line: 1242, column: 39, scope: !3118)
!4492 = !DILocation(line: 1242, column: 49, scope: !3118)
!4493 = !DILocation(line: 1242, column: 52, scope: !3118)
!4494 = !DILocation(line: 1242, column: 51, scope: !3118)
!4495 = !DILocation(line: 1242, column: 50, scope: !3118)
!4496 = !DILocation(line: 1242, column: 43, scope: !3118)
!4497 = !DILocation(line: 1242, column: 13, scope: !3118)
!4498 = !DILocation(line: 1242, column: 11, scope: !3118)
!4499 = !DILocation(line: 1243, column: 13, scope: !4500)
!4500 = distinct !DILexicalBlock(scope: !3118, file: !616, line: 1243, column: 13)
!4501 = !DILocation(line: 1243, column: 15, scope: !4500)
!4502 = !DILocation(line: 1243, column: 13, scope: !3118)
!4503 = !DILocation(line: 1244, column: 13, scope: !4504)
!4504 = distinct !DILexicalBlock(scope: !4500, file: !616, line: 1243, column: 30)
!4505 = !DILocation(line: 1245, column: 13, scope: !4504)
!4506 = !DILocation(line: 1247, column: 39, scope: !3118)
!4507 = !DILocation(line: 1247, column: 40, scope: !3118)
!4508 = !DILocation(line: 1247, column: 51, scope: !3118)
!4509 = !DILocation(line: 1247, column: 52, scope: !3118)
!4510 = !DILocation(line: 1247, column: 44, scope: !3118)
!4511 = !DILocation(line: 1247, column: 13, scope: !3118)
!4512 = !DILocation(line: 1247, column: 11, scope: !3118)
!4513 = !DILocation(line: 1248, column: 13, scope: !3126)
!4514 = !DILocation(line: 1248, column: 15, scope: !3126)
!4515 = !DILocation(line: 1248, column: 13, scope: !3118)
!4516 = !DILocation(line: 1249, column: 13, scope: !3125)
!4517 = !DILocation(line: 1250, column: 13, scope: !3125)
!4518 = !DILocation(line: 1250, column: 18, scope: !4519)
!4519 = !DILexicalBlockFile(scope: !3124, file: !616, discriminator: 1)
!4520 = !DILocation(line: 1250, column: 28, scope: !3124)
!4521 = !DILocation(line: 1250, column: 58, scope: !3124)
!4522 = !DILocation(line: 1250, column: 70, scope: !4523)
!4523 = distinct !DILexicalBlock(scope: !3124, file: !616, line: 1250, column: 67)
!4524 = !DILocation(line: 1250, column: 87, scope: !4523)
!4525 = !DILocation(line: 1250, column: 67, scope: !4523)
!4526 = !DILocation(line: 1250, column: 97, scope: !4523)
!4527 = !DILocation(line: 1250, column: 67, scope: !3124)
!4528 = !DILocation(line: 1250, column: 67, scope: !4529)
!4529 = !DILexicalBlockFile(scope: !3124, file: !616, discriminator: 2)
!4530 = !DILocation(line: 1250, column: 128, scope: !4531)
!4531 = !DILexicalBlockFile(scope: !4523, file: !616, discriminator: 3)
!4532 = !DILocation(line: 1250, column: 146, scope: !4523)
!4533 = !DILocation(line: 1250, column: 156, scope: !4523)
!4534 = !DILocation(line: 1250, column: 181, scope: !4523)
!4535 = !DILocation(line: 1250, column: 112, scope: !4523)
!4536 = !DILocation(line: 1250, column: 200, scope: !4537)
!4537 = !DILexicalBlockFile(scope: !3125, file: !616, discriminator: 4)
!4538 = !DILocation(line: 1250, column: 200, scope: !3124)
!4539 = !DILocation(line: 1250, column: 200, scope: !4540)
!4540 = !DILexicalBlockFile(scope: !3124, file: !616, discriminator: 5)
!4541 = !DILocation(line: 1251, column: 13, scope: !3125)
!4542 = !DILocation(line: 1253, column: 28, scope: !4543)
!4543 = distinct !DILexicalBlock(scope: !3118, file: !616, line: 1253, column: 13)
!4544 = !DILocation(line: 1253, column: 31, scope: !4543)
!4545 = !DILocation(line: 1253, column: 13, scope: !4543)
!4546 = !DILocation(line: 1253, column: 34, scope: !4543)
!4547 = !DILocation(line: 1253, column: 13, scope: !3118)
!4548 = !DILocation(line: 1254, column: 32, scope: !4549)
!4549 = distinct !DILexicalBlock(scope: !4550, file: !616, line: 1254, column: 17)
!4550 = distinct !DILexicalBlock(scope: !4543, file: !616, line: 1253, column: 49)
!4551 = !DILocation(line: 1254, column: 35, scope: !4549)
!4552 = !DILocation(line: 1254, column: 38, scope: !4549)
!4553 = !DILocation(line: 1254, column: 17, scope: !4549)
!4554 = !DILocation(line: 1254, column: 41, scope: !4549)
!4555 = !DILocation(line: 1254, column: 17, scope: !4550)
!4556 = !DILocation(line: 1255, column: 17, scope: !4549)
!4557 = !DILocation(line: 1256, column: 9, scope: !4550)
!4558 = !DILocation(line: 1257, column: 9, scope: !3118)
!4559 = !DILocation(line: 1257, column: 14, scope: !4560)
!4560 = !DILexicalBlockFile(scope: !3128, file: !616, discriminator: 1)
!4561 = !DILocation(line: 1257, column: 24, scope: !3128)
!4562 = !DILocation(line: 1257, column: 54, scope: !3128)
!4563 = !DILocation(line: 1257, column: 66, scope: !4564)
!4564 = distinct !DILexicalBlock(scope: !3128, file: !616, line: 1257, column: 63)
!4565 = !DILocation(line: 1257, column: 83, scope: !4564)
!4566 = !DILocation(line: 1257, column: 63, scope: !4564)
!4567 = !DILocation(line: 1257, column: 93, scope: !4564)
!4568 = !DILocation(line: 1257, column: 63, scope: !3128)
!4569 = !DILocation(line: 1257, column: 63, scope: !4570)
!4570 = !DILexicalBlockFile(scope: !3128, file: !616, discriminator: 2)
!4571 = !DILocation(line: 1257, column: 124, scope: !4572)
!4572 = !DILexicalBlockFile(scope: !4564, file: !616, discriminator: 3)
!4573 = !DILocation(line: 1257, column: 142, scope: !4564)
!4574 = !DILocation(line: 1257, column: 152, scope: !4564)
!4575 = !DILocation(line: 1257, column: 177, scope: !4564)
!4576 = !DILocation(line: 1257, column: 108, scope: !4564)
!4577 = !DILocation(line: 1257, column: 196, scope: !4578)
!4578 = !DILexicalBlockFile(scope: !3118, file: !616, discriminator: 4)
!4579 = !DILocation(line: 1257, column: 196, scope: !3128)
!4580 = !DILocation(line: 1257, column: 196, scope: !4581)
!4581 = !DILexicalBlockFile(scope: !3128, file: !616, discriminator: 5)
!4582 = !DILocation(line: 1258, column: 9, scope: !3118)
!4583 = !DILocation(line: 1258, column: 14, scope: !4584)
!4584 = !DILexicalBlockFile(scope: !3130, file: !616, discriminator: 1)
!4585 = !DILocation(line: 1258, column: 24, scope: !3130)
!4586 = !DILocation(line: 1258, column: 54, scope: !3130)
!4587 = !DILocation(line: 1258, column: 66, scope: !4588)
!4588 = distinct !DILexicalBlock(scope: !3130, file: !616, line: 1258, column: 63)
!4589 = !DILocation(line: 1258, column: 83, scope: !4588)
!4590 = !DILocation(line: 1258, column: 63, scope: !4588)
!4591 = !DILocation(line: 1258, column: 93, scope: !4588)
!4592 = !DILocation(line: 1258, column: 63, scope: !3130)
!4593 = !DILocation(line: 1258, column: 63, scope: !4594)
!4594 = !DILexicalBlockFile(scope: !3130, file: !616, discriminator: 2)
!4595 = !DILocation(line: 1258, column: 124, scope: !4596)
!4596 = !DILexicalBlockFile(scope: !4588, file: !616, discriminator: 3)
!4597 = !DILocation(line: 1258, column: 142, scope: !4588)
!4598 = !DILocation(line: 1258, column: 152, scope: !4588)
!4599 = !DILocation(line: 1258, column: 177, scope: !4588)
!4600 = !DILocation(line: 1258, column: 108, scope: !4588)
!4601 = !DILocation(line: 1258, column: 196, scope: !4578)
!4602 = !DILocation(line: 1258, column: 196, scope: !3130)
!4603 = !DILocation(line: 1258, column: 196, scope: !4604)
!4604 = !DILexicalBlockFile(scope: !3130, file: !616, discriminator: 5)
!4605 = !DILocation(line: 1259, column: 5, scope: !3119)
!4606 = !DILocation(line: 1259, column: 5, scope: !4472)
!4607 = !DILocation(line: 1259, column: 5, scope: !3118)
!4608 = !DILocation(line: 1236, column: 42, scope: !3119)
!4609 = !DILocation(line: 1236, column: 5, scope: !3119)
!4610 = !DILocation(line: 1261, column: 12, scope: !3113)
!4611 = !DILocation(line: 1261, column: 5, scope: !3113)
!4612 = !DILocation(line: 1262, column: 1, scope: !3113)
!4613 = !DILocation(line: 11647, column: 19, scope: !3131)
!4614 = !DILocation(line: 11650, column: 33, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11650, column: 9)
!4616 = !DILocation(line: 11650, column: 9, scope: !4615)
!4617 = !DILocation(line: 11650, column: 9, scope: !3131)
!4618 = !DILocation(line: 11650, column: 48, scope: !4619)
!4619 = !DILexicalBlockFile(scope: !4615, file: !616, discriminator: 1)
!4620 = !DILocation(line: 11653, column: 33, scope: !4621)
!4621 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11653, column: 9)
!4622 = !DILocation(line: 11653, column: 9, scope: !4621)
!4623 = !DILocation(line: 11653, column: 9, scope: !3131)
!4624 = !DILocation(line: 11653, column: 48, scope: !4625)
!4625 = !DILexicalBlockFile(scope: !4621, file: !616, discriminator: 1)
!4626 = !DILocation(line: 11656, column: 33, scope: !4627)
!4627 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11656, column: 9)
!4628 = !DILocation(line: 11656, column: 9, scope: !4627)
!4629 = !DILocation(line: 11656, column: 9, scope: !3131)
!4630 = !DILocation(line: 11656, column: 48, scope: !4631)
!4631 = !DILexicalBlockFile(scope: !4627, file: !616, discriminator: 1)
!4632 = !DILocation(line: 11659, column: 33, scope: !4633)
!4633 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11659, column: 9)
!4634 = !DILocation(line: 11659, column: 9, scope: !4633)
!4635 = !DILocation(line: 11659, column: 9, scope: !3131)
!4636 = !DILocation(line: 11659, column: 48, scope: !4637)
!4637 = !DILexicalBlockFile(scope: !4633, file: !616, discriminator: 1)
!4638 = !DILocation(line: 11662, column: 33, scope: !4639)
!4639 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11662, column: 9)
!4640 = !DILocation(line: 11662, column: 9, scope: !4639)
!4641 = !DILocation(line: 11662, column: 9, scope: !3131)
!4642 = !DILocation(line: 11662, column: 59, scope: !4643)
!4643 = !DILexicalBlockFile(scope: !4639, file: !616, discriminator: 1)
!4644 = !DILocation(line: 11665, column: 33, scope: !4645)
!4645 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11665, column: 9)
!4646 = !DILocation(line: 11665, column: 9, scope: !4645)
!4647 = !DILocation(line: 11665, column: 9, scope: !3131)
!4648 = !DILocation(line: 11665, column: 56, scope: !4649)
!4649 = !DILexicalBlockFile(scope: !4645, file: !616, discriminator: 1)
!4650 = !DILocation(line: 11668, column: 33, scope: !4651)
!4651 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11668, column: 9)
!4652 = !DILocation(line: 11668, column: 9, scope: !4651)
!4653 = !DILocation(line: 11668, column: 9, scope: !3131)
!4654 = !DILocation(line: 11668, column: 54, scope: !4655)
!4655 = !DILexicalBlockFile(scope: !4651, file: !616, discriminator: 1)
!4656 = !DILocation(line: 11671, column: 33, scope: !4657)
!4657 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11671, column: 9)
!4658 = !DILocation(line: 11671, column: 9, scope: !4657)
!4659 = !DILocation(line: 11671, column: 9, scope: !3131)
!4660 = !DILocation(line: 11671, column: 51, scope: !4661)
!4661 = !DILexicalBlockFile(scope: !4657, file: !616, discriminator: 1)
!4662 = !DILocation(line: 11674, column: 33, scope: !4663)
!4663 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11674, column: 9)
!4664 = !DILocation(line: 11674, column: 9, scope: !4663)
!4665 = !DILocation(line: 11674, column: 9, scope: !3131)
!4666 = !DILocation(line: 11674, column: 53, scope: !4667)
!4667 = !DILexicalBlockFile(scope: !4663, file: !616, discriminator: 1)
!4668 = !DILocation(line: 11677, column: 33, scope: !4669)
!4669 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11677, column: 9)
!4670 = !DILocation(line: 11677, column: 9, scope: !4669)
!4671 = !DILocation(line: 11677, column: 9, scope: !3131)
!4672 = !DILocation(line: 11677, column: 53, scope: !4673)
!4673 = !DILexicalBlockFile(scope: !4669, file: !616, discriminator: 1)
!4674 = !DILocation(line: 11680, column: 33, scope: !4675)
!4675 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11680, column: 9)
!4676 = !DILocation(line: 11680, column: 9, scope: !4675)
!4677 = !DILocation(line: 11680, column: 9, scope: !3131)
!4678 = !DILocation(line: 11680, column: 53, scope: !4679)
!4679 = !DILexicalBlockFile(scope: !4675, file: !616, discriminator: 1)
!4680 = !DILocation(line: 11683, column: 33, scope: !4681)
!4681 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11683, column: 9)
!4682 = !DILocation(line: 11683, column: 9, scope: !4681)
!4683 = !DILocation(line: 11683, column: 9, scope: !3131)
!4684 = !DILocation(line: 11683, column: 51, scope: !4685)
!4685 = !DILexicalBlockFile(scope: !4681, file: !616, discriminator: 1)
!4686 = !DILocation(line: 11686, column: 33, scope: !4687)
!4687 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11686, column: 9)
!4688 = !DILocation(line: 11686, column: 9, scope: !4687)
!4689 = !DILocation(line: 11686, column: 9, scope: !3131)
!4690 = !DILocation(line: 11686, column: 56, scope: !4691)
!4691 = !DILexicalBlockFile(scope: !4687, file: !616, discriminator: 1)
!4692 = !DILocation(line: 11689, column: 33, scope: !4693)
!4693 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11689, column: 9)
!4694 = !DILocation(line: 11689, column: 9, scope: !4693)
!4695 = !DILocation(line: 11689, column: 9, scope: !3131)
!4696 = !DILocation(line: 11689, column: 58, scope: !4697)
!4697 = !DILexicalBlockFile(scope: !4693, file: !616, discriminator: 1)
!4698 = !DILocation(line: 11692, column: 33, scope: !4699)
!4699 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11692, column: 9)
!4700 = !DILocation(line: 11692, column: 9, scope: !4699)
!4701 = !DILocation(line: 11692, column: 9, scope: !3131)
!4702 = !DILocation(line: 11692, column: 56, scope: !4703)
!4703 = !DILexicalBlockFile(scope: !4699, file: !616, discriminator: 1)
!4704 = !DILocation(line: 11695, column: 33, scope: !4705)
!4705 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11695, column: 9)
!4706 = !DILocation(line: 11695, column: 9, scope: !4705)
!4707 = !DILocation(line: 11695, column: 9, scope: !3131)
!4708 = !DILocation(line: 11695, column: 56, scope: !4709)
!4709 = !DILexicalBlockFile(scope: !4705, file: !616, discriminator: 1)
!4710 = !DILocation(line: 11698, column: 33, scope: !4711)
!4711 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11698, column: 9)
!4712 = !DILocation(line: 11698, column: 9, scope: !4711)
!4713 = !DILocation(line: 11698, column: 9, scope: !3131)
!4714 = !DILocation(line: 11698, column: 58, scope: !4715)
!4715 = !DILexicalBlockFile(scope: !4711, file: !616, discriminator: 1)
!4716 = !DILocation(line: 11701, column: 33, scope: !4717)
!4717 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11701, column: 9)
!4718 = !DILocation(line: 11701, column: 9, scope: !4717)
!4719 = !DILocation(line: 11701, column: 9, scope: !3131)
!4720 = !DILocation(line: 11701, column: 57, scope: !4721)
!4721 = !DILexicalBlockFile(scope: !4717, file: !616, discriminator: 1)
!4722 = !DILocation(line: 11704, column: 33, scope: !4723)
!4723 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11704, column: 9)
!4724 = !DILocation(line: 11704, column: 9, scope: !4723)
!4725 = !DILocation(line: 11704, column: 9, scope: !3131)
!4726 = !DILocation(line: 11704, column: 55, scope: !4727)
!4727 = !DILexicalBlockFile(scope: !4723, file: !616, discriminator: 1)
!4728 = !DILocation(line: 11707, column: 33, scope: !4729)
!4729 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11707, column: 9)
!4730 = !DILocation(line: 11707, column: 9, scope: !4729)
!4731 = !DILocation(line: 11707, column: 9, scope: !3131)
!4732 = !DILocation(line: 11707, column: 54, scope: !4733)
!4733 = !DILexicalBlockFile(scope: !4729, file: !616, discriminator: 1)
!4734 = !DILocation(line: 11710, column: 33, scope: !4735)
!4735 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11710, column: 9)
!4736 = !DILocation(line: 11710, column: 9, scope: !4735)
!4737 = !DILocation(line: 11710, column: 9, scope: !3131)
!4738 = !DILocation(line: 11710, column: 53, scope: !4739)
!4739 = !DILexicalBlockFile(scope: !4735, file: !616, discriminator: 1)
!4740 = !DILocation(line: 11713, column: 33, scope: !4741)
!4741 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11713, column: 9)
!4742 = !DILocation(line: 11713, column: 9, scope: !4741)
!4743 = !DILocation(line: 11713, column: 9, scope: !3131)
!4744 = !DILocation(line: 11713, column: 55, scope: !4745)
!4745 = !DILexicalBlockFile(scope: !4741, file: !616, discriminator: 1)
!4746 = !DILocation(line: 11725, column: 33, scope: !4747)
!4747 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11725, column: 9)
!4748 = !DILocation(line: 11725, column: 9, scope: !4747)
!4749 = !DILocation(line: 11725, column: 9, scope: !3131)
!4750 = !DILocation(line: 11725, column: 55, scope: !4751)
!4751 = !DILexicalBlockFile(scope: !4747, file: !616, discriminator: 1)
!4752 = !DILocation(line: 11740, column: 33, scope: !4753)
!4753 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11740, column: 9)
!4754 = !DILocation(line: 11740, column: 9, scope: !4753)
!4755 = !DILocation(line: 11740, column: 9, scope: !3131)
!4756 = !DILocation(line: 11740, column: 58, scope: !4757)
!4757 = !DILexicalBlockFile(scope: !4753, file: !616, discriminator: 1)
!4758 = !DILocation(line: 11749, column: 33, scope: !4759)
!4759 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11749, column: 9)
!4760 = !DILocation(line: 11749, column: 9, scope: !4759)
!4761 = !DILocation(line: 11749, column: 9, scope: !3131)
!4762 = !DILocation(line: 11749, column: 67, scope: !4763)
!4763 = !DILexicalBlockFile(scope: !4759, file: !616, discriminator: 1)
!4764 = !DILocation(line: 11752, column: 33, scope: !4765)
!4765 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11752, column: 9)
!4766 = !DILocation(line: 11752, column: 9, scope: !4765)
!4767 = !DILocation(line: 11752, column: 9, scope: !3131)
!4768 = !DILocation(line: 11752, column: 61, scope: !4769)
!4769 = !DILexicalBlockFile(scope: !4765, file: !616, discriminator: 1)
!4770 = !DILocation(line: 11755, column: 33, scope: !4771)
!4771 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11755, column: 9)
!4772 = !DILocation(line: 11755, column: 9, scope: !4771)
!4773 = !DILocation(line: 11755, column: 9, scope: !3131)
!4774 = !DILocation(line: 11755, column: 61, scope: !4775)
!4775 = !DILexicalBlockFile(scope: !4771, file: !616, discriminator: 1)
!4776 = !DILocation(line: 11758, column: 33, scope: !4777)
!4777 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11758, column: 9)
!4778 = !DILocation(line: 11758, column: 9, scope: !4777)
!4779 = !DILocation(line: 11758, column: 9, scope: !3131)
!4780 = !DILocation(line: 11758, column: 60, scope: !4781)
!4781 = !DILexicalBlockFile(scope: !4777, file: !616, discriminator: 1)
!4782 = !DILocation(line: 11761, column: 33, scope: !4783)
!4783 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11761, column: 9)
!4784 = !DILocation(line: 11761, column: 9, scope: !4783)
!4785 = !DILocation(line: 11761, column: 9, scope: !3131)
!4786 = !DILocation(line: 11761, column: 56, scope: !4787)
!4787 = !DILexicalBlockFile(scope: !4783, file: !616, discriminator: 1)
!4788 = !DILocation(line: 11766, column: 33, scope: !4789)
!4789 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11766, column: 9)
!4790 = !DILocation(line: 11766, column: 9, scope: !4789)
!4791 = !DILocation(line: 11766, column: 9, scope: !3131)
!4792 = !DILocation(line: 11766, column: 53, scope: !4793)
!4793 = !DILexicalBlockFile(scope: !4789, file: !616, discriminator: 1)
!4794 = !DILocation(line: 11769, column: 33, scope: !4795)
!4795 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11769, column: 9)
!4796 = !DILocation(line: 11769, column: 9, scope: !4795)
!4797 = !DILocation(line: 11769, column: 9, scope: !3131)
!4798 = !DILocation(line: 11769, column: 53, scope: !4799)
!4799 = !DILexicalBlockFile(scope: !4795, file: !616, discriminator: 1)
!4800 = !DILocation(line: 11799, column: 33, scope: !4801)
!4801 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11799, column: 9)
!4802 = !DILocation(line: 11799, column: 9, scope: !4801)
!4803 = !DILocation(line: 11799, column: 9, scope: !3131)
!4804 = !DILocation(line: 11799, column: 56, scope: !4805)
!4805 = !DILexicalBlockFile(scope: !4801, file: !616, discriminator: 1)
!4806 = !DILocation(line: 11803, column: 33, scope: !4807)
!4807 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11803, column: 9)
!4808 = !DILocation(line: 11803, column: 9, scope: !4807)
!4809 = !DILocation(line: 11803, column: 9, scope: !3131)
!4810 = !DILocation(line: 11803, column: 57, scope: !4811)
!4811 = !DILexicalBlockFile(scope: !4807, file: !616, discriminator: 1)
!4812 = !DILocation(line: 11807, column: 33, scope: !4813)
!4813 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11807, column: 9)
!4814 = !DILocation(line: 11807, column: 9, scope: !4813)
!4815 = !DILocation(line: 11807, column: 9, scope: !3131)
!4816 = !DILocation(line: 11807, column: 61, scope: !4817)
!4817 = !DILexicalBlockFile(scope: !4813, file: !616, discriminator: 1)
!4818 = !DILocation(line: 11811, column: 33, scope: !4819)
!4819 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11811, column: 9)
!4820 = !DILocation(line: 11811, column: 9, scope: !4819)
!4821 = !DILocation(line: 11811, column: 9, scope: !3131)
!4822 = !DILocation(line: 11811, column: 60, scope: !4823)
!4823 = !DILexicalBlockFile(scope: !4819, file: !616, discriminator: 1)
!4824 = !DILocation(line: 11819, column: 33, scope: !4825)
!4825 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11819, column: 9)
!4826 = !DILocation(line: 11819, column: 9, scope: !4825)
!4827 = !DILocation(line: 11819, column: 9, scope: !3131)
!4828 = !DILocation(line: 11819, column: 60, scope: !4829)
!4829 = !DILexicalBlockFile(scope: !4825, file: !616, discriminator: 1)
!4830 = !DILocation(line: 11824, column: 33, scope: !4831)
!4831 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11824, column: 9)
!4832 = !DILocation(line: 11824, column: 9, scope: !4831)
!4833 = !DILocation(line: 11824, column: 9, scope: !3131)
!4834 = !DILocation(line: 11824, column: 49, scope: !4835)
!4835 = !DILexicalBlockFile(scope: !4831, file: !616, discriminator: 1)
!4836 = !DILocation(line: 11827, column: 33, scope: !4837)
!4837 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11827, column: 9)
!4838 = !DILocation(line: 11827, column: 9, scope: !4837)
!4839 = !DILocation(line: 11827, column: 9, scope: !3131)
!4840 = !DILocation(line: 11827, column: 53, scope: !4841)
!4841 = !DILexicalBlockFile(scope: !4837, file: !616, discriminator: 1)
!4842 = !DILocation(line: 11830, column: 33, scope: !4843)
!4843 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11830, column: 9)
!4844 = !DILocation(line: 11830, column: 9, scope: !4843)
!4845 = !DILocation(line: 11830, column: 9, scope: !3131)
!4846 = !DILocation(line: 11830, column: 55, scope: !4847)
!4847 = !DILexicalBlockFile(scope: !4843, file: !616, discriminator: 1)
!4848 = !DILocation(line: 11833, column: 33, scope: !4849)
!4849 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11833, column: 9)
!4850 = !DILocation(line: 11833, column: 9, scope: !4849)
!4851 = !DILocation(line: 11833, column: 9, scope: !3131)
!4852 = !DILocation(line: 11833, column: 55, scope: !4853)
!4853 = !DILexicalBlockFile(scope: !4849, file: !616, discriminator: 1)
!4854 = !DILocation(line: 11836, column: 33, scope: !4855)
!4855 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11836, column: 9)
!4856 = !DILocation(line: 11836, column: 9, scope: !4855)
!4857 = !DILocation(line: 11836, column: 9, scope: !3131)
!4858 = !DILocation(line: 11836, column: 54, scope: !4859)
!4859 = !DILexicalBlockFile(scope: !4855, file: !616, discriminator: 1)
!4860 = !DILocation(line: 11839, column: 33, scope: !4861)
!4861 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11839, column: 9)
!4862 = !DILocation(line: 11839, column: 9, scope: !4861)
!4863 = !DILocation(line: 11839, column: 9, scope: !3131)
!4864 = !DILocation(line: 11839, column: 54, scope: !4865)
!4865 = !DILexicalBlockFile(scope: !4861, file: !616, discriminator: 1)
!4866 = !DILocation(line: 11842, column: 33, scope: !4867)
!4867 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11842, column: 9)
!4868 = !DILocation(line: 11842, column: 9, scope: !4867)
!4869 = !DILocation(line: 11842, column: 9, scope: !3131)
!4870 = !DILocation(line: 11842, column: 59, scope: !4871)
!4871 = !DILexicalBlockFile(scope: !4867, file: !616, discriminator: 1)
!4872 = !DILocation(line: 11845, column: 33, scope: !4873)
!4873 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11845, column: 9)
!4874 = !DILocation(line: 11845, column: 9, scope: !4873)
!4875 = !DILocation(line: 11845, column: 9, scope: !3131)
!4876 = !DILocation(line: 11845, column: 56, scope: !4877)
!4877 = !DILexicalBlockFile(scope: !4873, file: !616, discriminator: 1)
!4878 = !DILocation(line: 11848, column: 33, scope: !4879)
!4879 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11848, column: 9)
!4880 = !DILocation(line: 11848, column: 9, scope: !4879)
!4881 = !DILocation(line: 11848, column: 9, scope: !3131)
!4882 = !DILocation(line: 11848, column: 53, scope: !4883)
!4883 = !DILexicalBlockFile(scope: !4879, file: !616, discriminator: 1)
!4884 = !DILocation(line: 11851, column: 33, scope: !4885)
!4885 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11851, column: 9)
!4886 = !DILocation(line: 11851, column: 9, scope: !4885)
!4887 = !DILocation(line: 11851, column: 9, scope: !3131)
!4888 = !DILocation(line: 11851, column: 54, scope: !4889)
!4889 = !DILexicalBlockFile(scope: !4885, file: !616, discriminator: 1)
!4890 = !DILocation(line: 11854, column: 33, scope: !4891)
!4891 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11854, column: 9)
!4892 = !DILocation(line: 11854, column: 9, scope: !4891)
!4893 = !DILocation(line: 11854, column: 9, scope: !3131)
!4894 = !DILocation(line: 11854, column: 57, scope: !4895)
!4895 = !DILexicalBlockFile(scope: !4891, file: !616, discriminator: 1)
!4896 = !DILocation(line: 11857, column: 33, scope: !4897)
!4897 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11857, column: 9)
!4898 = !DILocation(line: 11857, column: 9, scope: !4897)
!4899 = !DILocation(line: 11857, column: 9, scope: !3131)
!4900 = !DILocation(line: 11857, column: 53, scope: !4901)
!4901 = !DILexicalBlockFile(scope: !4897, file: !616, discriminator: 1)
!4902 = !DILocation(line: 11860, column: 33, scope: !4903)
!4903 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11860, column: 9)
!4904 = !DILocation(line: 11860, column: 9, scope: !4903)
!4905 = !DILocation(line: 11860, column: 9, scope: !3131)
!4906 = !DILocation(line: 11860, column: 56, scope: !4907)
!4907 = !DILexicalBlockFile(scope: !4903, file: !616, discriminator: 1)
!4908 = !DILocation(line: 11863, column: 33, scope: !4909)
!4909 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11863, column: 9)
!4910 = !DILocation(line: 11863, column: 9, scope: !4909)
!4911 = !DILocation(line: 11863, column: 9, scope: !3131)
!4912 = !DILocation(line: 11863, column: 56, scope: !4913)
!4913 = !DILexicalBlockFile(scope: !4909, file: !616, discriminator: 1)
!4914 = !DILocation(line: 11866, column: 33, scope: !4915)
!4915 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11866, column: 9)
!4916 = !DILocation(line: 11866, column: 9, scope: !4915)
!4917 = !DILocation(line: 11866, column: 9, scope: !3131)
!4918 = !DILocation(line: 11866, column: 54, scope: !4919)
!4919 = !DILexicalBlockFile(scope: !4915, file: !616, discriminator: 1)
!4920 = !DILocation(line: 11869, column: 33, scope: !4921)
!4921 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11869, column: 9)
!4922 = !DILocation(line: 11869, column: 9, scope: !4921)
!4923 = !DILocation(line: 11869, column: 9, scope: !3131)
!4924 = !DILocation(line: 11869, column: 54, scope: !4925)
!4925 = !DILexicalBlockFile(scope: !4921, file: !616, discriminator: 1)
!4926 = !DILocation(line: 11877, column: 33, scope: !4927)
!4927 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11877, column: 9)
!4928 = !DILocation(line: 11877, column: 9, scope: !4927)
!4929 = !DILocation(line: 11877, column: 9, scope: !3131)
!4930 = !DILocation(line: 11877, column: 61, scope: !4931)
!4931 = !DILexicalBlockFile(scope: !4927, file: !616, discriminator: 1)
!4932 = !DILocation(line: 11880, column: 33, scope: !4933)
!4933 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11880, column: 9)
!4934 = !DILocation(line: 11880, column: 9, scope: !4933)
!4935 = !DILocation(line: 11880, column: 9, scope: !3131)
!4936 = !DILocation(line: 11880, column: 61, scope: !4937)
!4937 = !DILexicalBlockFile(scope: !4933, file: !616, discriminator: 1)
!4938 = !DILocation(line: 11885, column: 33, scope: !4939)
!4939 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11885, column: 9)
!4940 = !DILocation(line: 11885, column: 9, scope: !4939)
!4941 = !DILocation(line: 11885, column: 9, scope: !3131)
!4942 = !DILocation(line: 11885, column: 59, scope: !4943)
!4943 = !DILexicalBlockFile(scope: !4939, file: !616, discriminator: 1)
!4944 = !DILocation(line: 11888, column: 33, scope: !4945)
!4945 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11888, column: 9)
!4946 = !DILocation(line: 11888, column: 9, scope: !4945)
!4947 = !DILocation(line: 11888, column: 9, scope: !3131)
!4948 = !DILocation(line: 11888, column: 61, scope: !4949)
!4949 = !DILexicalBlockFile(scope: !4945, file: !616, discriminator: 1)
!4950 = !DILocation(line: 11891, column: 33, scope: !4951)
!4951 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11891, column: 9)
!4952 = !DILocation(line: 11891, column: 9, scope: !4951)
!4953 = !DILocation(line: 11891, column: 9, scope: !3131)
!4954 = !DILocation(line: 11891, column: 71, scope: !4955)
!4955 = !DILexicalBlockFile(scope: !4951, file: !616, discriminator: 1)
!4956 = !DILocation(line: 11894, column: 33, scope: !4957)
!4957 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11894, column: 9)
!4958 = !DILocation(line: 11894, column: 9, scope: !4957)
!4959 = !DILocation(line: 11894, column: 9, scope: !3131)
!4960 = !DILocation(line: 11894, column: 65, scope: !4961)
!4961 = !DILexicalBlockFile(scope: !4957, file: !616, discriminator: 1)
!4962 = !DILocation(line: 11897, column: 33, scope: !4963)
!4963 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11897, column: 9)
!4964 = !DILocation(line: 11897, column: 9, scope: !4963)
!4965 = !DILocation(line: 11897, column: 9, scope: !3131)
!4966 = !DILocation(line: 11897, column: 59, scope: !4967)
!4967 = !DILexicalBlockFile(scope: !4963, file: !616, discriminator: 1)
!4968 = !DILocation(line: 11900, column: 33, scope: !4969)
!4969 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11900, column: 9)
!4970 = !DILocation(line: 11900, column: 9, scope: !4969)
!4971 = !DILocation(line: 11900, column: 9, scope: !3131)
!4972 = !DILocation(line: 11900, column: 61, scope: !4973)
!4973 = !DILexicalBlockFile(scope: !4969, file: !616, discriminator: 1)
!4974 = !DILocation(line: 11903, column: 33, scope: !4975)
!4975 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11903, column: 9)
!4976 = !DILocation(line: 11903, column: 9, scope: !4975)
!4977 = !DILocation(line: 11903, column: 9, scope: !3131)
!4978 = !DILocation(line: 11903, column: 63, scope: !4979)
!4979 = !DILexicalBlockFile(scope: !4975, file: !616, discriminator: 1)
!4980 = !DILocation(line: 11906, column: 33, scope: !4981)
!4981 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11906, column: 9)
!4982 = !DILocation(line: 11906, column: 9, scope: !4981)
!4983 = !DILocation(line: 11906, column: 9, scope: !3131)
!4984 = !DILocation(line: 11906, column: 69, scope: !4985)
!4985 = !DILexicalBlockFile(scope: !4981, file: !616, discriminator: 1)
!4986 = !DILocation(line: 11909, column: 33, scope: !4987)
!4987 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11909, column: 9)
!4988 = !DILocation(line: 11909, column: 9, scope: !4987)
!4989 = !DILocation(line: 11909, column: 9, scope: !3131)
!4990 = !DILocation(line: 11909, column: 65, scope: !4991)
!4991 = !DILexicalBlockFile(scope: !4987, file: !616, discriminator: 1)
!4992 = !DILocation(line: 11925, column: 33, scope: !4993)
!4993 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11925, column: 9)
!4994 = !DILocation(line: 11925, column: 9, scope: !4993)
!4995 = !DILocation(line: 11925, column: 9, scope: !3131)
!4996 = !DILocation(line: 11925, column: 61, scope: !4997)
!4997 = !DILexicalBlockFile(scope: !4993, file: !616, discriminator: 1)
!4998 = !DILocation(line: 11928, column: 33, scope: !4999)
!4999 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11928, column: 9)
!5000 = !DILocation(line: 11928, column: 9, scope: !4999)
!5001 = !DILocation(line: 11928, column: 9, scope: !3131)
!5002 = !DILocation(line: 11928, column: 65, scope: !5003)
!5003 = !DILexicalBlockFile(scope: !4999, file: !616, discriminator: 1)
!5004 = !DILocation(line: 11931, column: 33, scope: !5005)
!5005 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11931, column: 9)
!5006 = !DILocation(line: 11931, column: 9, scope: !5005)
!5007 = !DILocation(line: 11931, column: 9, scope: !3131)
!5008 = !DILocation(line: 11931, column: 61, scope: !5009)
!5009 = !DILexicalBlockFile(scope: !5005, file: !616, discriminator: 1)
!5010 = !DILocation(line: 11934, column: 33, scope: !5011)
!5011 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11934, column: 9)
!5012 = !DILocation(line: 11934, column: 9, scope: !5011)
!5013 = !DILocation(line: 11934, column: 9, scope: !3131)
!5014 = !DILocation(line: 11934, column: 62, scope: !5015)
!5015 = !DILexicalBlockFile(scope: !5011, file: !616, discriminator: 1)
!5016 = !DILocation(line: 11937, column: 33, scope: !5017)
!5017 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11937, column: 9)
!5018 = !DILocation(line: 11937, column: 9, scope: !5017)
!5019 = !DILocation(line: 11937, column: 9, scope: !3131)
!5020 = !DILocation(line: 11937, column: 63, scope: !5021)
!5021 = !DILexicalBlockFile(scope: !5017, file: !616, discriminator: 1)
!5022 = !DILocation(line: 11940, column: 33, scope: !5023)
!5023 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11940, column: 9)
!5024 = !DILocation(line: 11940, column: 9, scope: !5023)
!5025 = !DILocation(line: 11940, column: 9, scope: !3131)
!5026 = !DILocation(line: 11940, column: 63, scope: !5027)
!5027 = !DILexicalBlockFile(scope: !5023, file: !616, discriminator: 1)
!5028 = !DILocation(line: 11945, column: 33, scope: !5029)
!5029 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11945, column: 9)
!5030 = !DILocation(line: 11945, column: 9, scope: !5029)
!5031 = !DILocation(line: 11945, column: 9, scope: !3131)
!5032 = !DILocation(line: 11945, column: 53, scope: !5033)
!5033 = !DILexicalBlockFile(scope: !5029, file: !616, discriminator: 1)
!5034 = !DILocation(line: 11946, column: 33, scope: !5035)
!5035 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11946, column: 9)
!5036 = !DILocation(line: 11946, column: 9, scope: !5035)
!5037 = !DILocation(line: 11946, column: 9, scope: !3131)
!5038 = !DILocation(line: 11946, column: 55, scope: !5039)
!5039 = !DILexicalBlockFile(scope: !5035, file: !616, discriminator: 1)
!5040 = !DILocation(line: 11947, column: 33, scope: !5041)
!5041 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11947, column: 9)
!5042 = !DILocation(line: 11947, column: 9, scope: !5041)
!5043 = !DILocation(line: 11947, column: 9, scope: !3131)
!5044 = !DILocation(line: 11947, column: 53, scope: !5045)
!5045 = !DILexicalBlockFile(scope: !5041, file: !616, discriminator: 1)
!5046 = !DILocation(line: 11950, column: 33, scope: !5047)
!5047 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11950, column: 9)
!5048 = !DILocation(line: 11950, column: 9, scope: !5047)
!5049 = !DILocation(line: 11950, column: 9, scope: !3131)
!5050 = !DILocation(line: 11950, column: 51, scope: !5051)
!5051 = !DILexicalBlockFile(scope: !5047, file: !616, discriminator: 1)
!5052 = !DILocation(line: 11953, column: 33, scope: !5053)
!5053 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11953, column: 9)
!5054 = !DILocation(line: 11953, column: 9, scope: !5053)
!5055 = !DILocation(line: 11953, column: 9, scope: !3131)
!5056 = !DILocation(line: 11953, column: 60, scope: !5057)
!5057 = !DILexicalBlockFile(scope: !5053, file: !616, discriminator: 1)
!5058 = !DILocation(line: 11956, column: 33, scope: !5059)
!5059 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11956, column: 9)
!5060 = !DILocation(line: 11956, column: 9, scope: !5059)
!5061 = !DILocation(line: 11956, column: 9, scope: !3131)
!5062 = !DILocation(line: 11956, column: 52, scope: !5063)
!5063 = !DILexicalBlockFile(scope: !5059, file: !616, discriminator: 1)
!5064 = !DILocation(line: 11959, column: 33, scope: !5065)
!5065 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11959, column: 9)
!5066 = !DILocation(line: 11959, column: 9, scope: !5065)
!5067 = !DILocation(line: 11959, column: 9, scope: !3131)
!5068 = !DILocation(line: 11959, column: 63, scope: !5069)
!5069 = !DILexicalBlockFile(scope: !5065, file: !616, discriminator: 1)
!5070 = !DILocation(line: 11962, column: 33, scope: !5071)
!5071 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11962, column: 9)
!5072 = !DILocation(line: 11962, column: 9, scope: !5071)
!5073 = !DILocation(line: 11962, column: 9, scope: !3131)
!5074 = !DILocation(line: 11962, column: 63, scope: !5075)
!5075 = !DILexicalBlockFile(scope: !5071, file: !616, discriminator: 1)
!5076 = !DILocation(line: 11965, column: 33, scope: !5077)
!5077 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11965, column: 9)
!5078 = !DILocation(line: 11965, column: 9, scope: !5077)
!5079 = !DILocation(line: 11965, column: 9, scope: !3131)
!5080 = !DILocation(line: 11965, column: 65, scope: !5081)
!5081 = !DILexicalBlockFile(scope: !5077, file: !616, discriminator: 1)
!5082 = !DILocation(line: 11968, column: 33, scope: !5083)
!5083 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11968, column: 9)
!5084 = !DILocation(line: 11968, column: 9, scope: !5083)
!5085 = !DILocation(line: 11968, column: 9, scope: !3131)
!5086 = !DILocation(line: 11968, column: 69, scope: !5087)
!5087 = !DILexicalBlockFile(scope: !5083, file: !616, discriminator: 1)
!5088 = !DILocation(line: 11973, column: 33, scope: !5089)
!5089 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11973, column: 9)
!5090 = !DILocation(line: 11973, column: 9, scope: !5089)
!5091 = !DILocation(line: 11973, column: 9, scope: !3131)
!5092 = !DILocation(line: 11973, column: 50, scope: !5093)
!5093 = !DILexicalBlockFile(scope: !5089, file: !616, discriminator: 1)
!5094 = !DILocation(line: 11976, column: 33, scope: !5095)
!5095 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11976, column: 9)
!5096 = !DILocation(line: 11976, column: 9, scope: !5095)
!5097 = !DILocation(line: 11976, column: 9, scope: !3131)
!5098 = !DILocation(line: 11976, column: 51, scope: !5099)
!5099 = !DILexicalBlockFile(scope: !5095, file: !616, discriminator: 1)
!5100 = !DILocation(line: 11979, column: 33, scope: !5101)
!5101 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11979, column: 9)
!5102 = !DILocation(line: 11979, column: 9, scope: !5101)
!5103 = !DILocation(line: 11979, column: 9, scope: !3131)
!5104 = !DILocation(line: 11979, column: 51, scope: !5105)
!5105 = !DILexicalBlockFile(scope: !5101, file: !616, discriminator: 1)
!5106 = !DILocation(line: 11982, column: 33, scope: !5107)
!5107 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11982, column: 9)
!5108 = !DILocation(line: 11982, column: 9, scope: !5107)
!5109 = !DILocation(line: 11982, column: 9, scope: !3131)
!5110 = !DILocation(line: 11982, column: 50, scope: !5111)
!5111 = !DILexicalBlockFile(scope: !5107, file: !616, discriminator: 1)
!5112 = !DILocation(line: 11994, column: 33, scope: !5113)
!5113 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11994, column: 9)
!5114 = !DILocation(line: 11994, column: 9, scope: !5113)
!5115 = !DILocation(line: 11994, column: 9, scope: !3131)
!5116 = !DILocation(line: 11994, column: 55, scope: !5117)
!5117 = !DILexicalBlockFile(scope: !5113, file: !616, discriminator: 1)
!5118 = !DILocation(line: 11995, column: 33, scope: !5119)
!5119 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11995, column: 9)
!5120 = !DILocation(line: 11995, column: 9, scope: !5119)
!5121 = !DILocation(line: 11995, column: 9, scope: !3131)
!5122 = !DILocation(line: 11995, column: 54, scope: !5123)
!5123 = !DILexicalBlockFile(scope: !5119, file: !616, discriminator: 1)
!5124 = !DILocation(line: 11996, column: 33, scope: !5125)
!5125 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 11996, column: 9)
!5126 = !DILocation(line: 11996, column: 9, scope: !5125)
!5127 = !DILocation(line: 11996, column: 9, scope: !3131)
!5128 = !DILocation(line: 11996, column: 52, scope: !5129)
!5129 = !DILexicalBlockFile(scope: !5125, file: !616, discriminator: 1)
!5130 = !DILocation(line: 12001, column: 33, scope: !5131)
!5131 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 12001, column: 9)
!5132 = !DILocation(line: 12001, column: 9, scope: !5131)
!5133 = !DILocation(line: 12001, column: 9, scope: !3131)
!5134 = !DILocation(line: 12001, column: 55, scope: !5135)
!5135 = !DILexicalBlockFile(scope: !5131, file: !616, discriminator: 1)
!5136 = !DILocation(line: 12004, column: 33, scope: !5137)
!5137 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 12004, column: 9)
!5138 = !DILocation(line: 12004, column: 9, scope: !5137)
!5139 = !DILocation(line: 12004, column: 9, scope: !3131)
!5140 = !DILocation(line: 12004, column: 54, scope: !5141)
!5141 = !DILexicalBlockFile(scope: !5137, file: !616, discriminator: 1)
!5142 = !DILocation(line: 12007, column: 33, scope: !5143)
!5143 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 12007, column: 9)
!5144 = !DILocation(line: 12007, column: 9, scope: !5143)
!5145 = !DILocation(line: 12007, column: 9, scope: !3131)
!5146 = !DILocation(line: 12007, column: 72, scope: !5147)
!5147 = !DILexicalBlockFile(scope: !5143, file: !616, discriminator: 1)
!5148 = !DILocation(line: 12024, column: 33, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 12024, column: 9)
!5150 = !DILocation(line: 12024, column: 9, scope: !5149)
!5151 = !DILocation(line: 12024, column: 9, scope: !3131)
!5152 = !DILocation(line: 12024, column: 67, scope: !5153)
!5153 = !DILexicalBlockFile(scope: !5149, file: !616, discriminator: 1)
!5154 = !DILocation(line: 12025, column: 33, scope: !5155)
!5155 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 12025, column: 9)
!5156 = !DILocation(line: 12025, column: 9, scope: !5155)
!5157 = !DILocation(line: 12025, column: 9, scope: !3131)
!5158 = !DILocation(line: 12025, column: 69, scope: !5159)
!5159 = !DILexicalBlockFile(scope: !5155, file: !616, discriminator: 1)
!5160 = !DILocation(line: 12026, column: 33, scope: !5161)
!5161 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 12026, column: 9)
!5162 = !DILocation(line: 12026, column: 9, scope: !5161)
!5163 = !DILocation(line: 12026, column: 9, scope: !3131)
!5164 = !DILocation(line: 12026, column: 62, scope: !5165)
!5165 = !DILexicalBlockFile(scope: !5161, file: !616, discriminator: 1)
!5166 = !DILocation(line: 12030, column: 33, scope: !5167)
!5167 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 12030, column: 9)
!5168 = !DILocation(line: 12030, column: 9, scope: !5167)
!5169 = !DILocation(line: 12030, column: 9, scope: !3131)
!5170 = !DILocation(line: 12030, column: 59, scope: !5171)
!5171 = !DILexicalBlockFile(scope: !5167, file: !616, discriminator: 1)
!5172 = !DILocation(line: 12033, column: 33, scope: !5173)
!5173 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 12033, column: 9)
!5174 = !DILocation(line: 12033, column: 9, scope: !5173)
!5175 = !DILocation(line: 12033, column: 9, scope: !3131)
!5176 = !DILocation(line: 12033, column: 58, scope: !5177)
!5177 = !DILexicalBlockFile(scope: !5173, file: !616, discriminator: 1)
!5178 = !DILocation(line: 12036, column: 33, scope: !5179)
!5179 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 12036, column: 9)
!5180 = !DILocation(line: 12036, column: 9, scope: !5179)
!5181 = !DILocation(line: 12036, column: 9, scope: !3131)
!5182 = !DILocation(line: 12036, column: 61, scope: !5183)
!5183 = !DILexicalBlockFile(scope: !5179, file: !616, discriminator: 1)
!5184 = !DILocation(line: 12039, column: 33, scope: !5185)
!5185 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 12039, column: 9)
!5186 = !DILocation(line: 12039, column: 9, scope: !5185)
!5187 = !DILocation(line: 12039, column: 9, scope: !3131)
!5188 = !DILocation(line: 12039, column: 54, scope: !5189)
!5189 = !DILexicalBlockFile(scope: !5185, file: !616, discriminator: 1)
!5190 = !DILocation(line: 12042, column: 33, scope: !5191)
!5191 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 12042, column: 9)
!5192 = !DILocation(line: 12042, column: 9, scope: !5191)
!5193 = !DILocation(line: 12042, column: 9, scope: !3131)
!5194 = !DILocation(line: 12042, column: 63, scope: !5195)
!5195 = !DILexicalBlockFile(scope: !5191, file: !616, discriminator: 1)
!5196 = !DILocation(line: 12045, column: 33, scope: !5197)
!5197 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 12045, column: 9)
!5198 = !DILocation(line: 12045, column: 9, scope: !5197)
!5199 = !DILocation(line: 12045, column: 9, scope: !3131)
!5200 = !DILocation(line: 12045, column: 61, scope: !5201)
!5201 = !DILexicalBlockFile(scope: !5197, file: !616, discriminator: 1)
!5202 = !DILocation(line: 12048, column: 33, scope: !5203)
!5203 = distinct !DILexicalBlock(scope: !3131, file: !616, line: 12048, column: 9)
!5204 = !DILocation(line: 12048, column: 9, scope: !5203)
!5205 = !DILocation(line: 12048, column: 9, scope: !3131)
!5206 = !DILocation(line: 12048, column: 63, scope: !5207)
!5207 = !DILexicalBlockFile(scope: !5203, file: !616, discriminator: 1)
!5208 = !DILocation(line: 12051, column: 5, scope: !3131)
!5209 = !DILocation(line: 12052, column: 1, scope: !3131)
!5210 = !DILocation(line: 10330, column: 33, scope: !3134)
!5211 = !DILocation(line: 10336, column: 48, scope: !5212)
!5212 = distinct !DILexicalBlock(scope: !3134, file: !616, line: 10333, column: 9)
!5213 = !DILocation(line: 10333, column: 9, scope: !5212)
!5214 = !DILocation(line: 10333, column: 9, scope: !3134)
!5215 = !DILocation(line: 10337, column: 9, scope: !5212)
!5216 = !DILocation(line: 10343, column: 47, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !3134, file: !616, line: 10340, column: 9)
!5218 = !DILocation(line: 10340, column: 9, scope: !5217)
!5219 = !DILocation(line: 10340, column: 9, scope: !3134)
!5220 = !DILocation(line: 10344, column: 9, scope: !5217)
!5221 = !DILocation(line: 10350, column: 47, scope: !5222)
!5222 = distinct !DILexicalBlock(scope: !3134, file: !616, line: 10347, column: 9)
!5223 = !DILocation(line: 10347, column: 9, scope: !5222)
!5224 = !DILocation(line: 10347, column: 9, scope: !3134)
!5225 = !DILocation(line: 10351, column: 9, scope: !5222)
!5226 = !DILocation(line: 10353, column: 5, scope: !3134)
!5227 = !DILocation(line: 10354, column: 1, scope: !3134)
!5228 = !DILocation(line: 2105, column: 30, scope: !3175)
!5229 = !DILocation(line: 2105, column: 46, scope: !3175)
!5230 = !DILocation(line: 2105, column: 62, scope: !3175)
!5231 = !DILocation(line: 2107, column: 5, scope: !3175)
!5232 = !DILocation(line: 2107, column: 23, scope: !3175)
!5233 = !DILocation(line: 2108, column: 5, scope: !3175)
!5234 = !DILocation(line: 2108, column: 9, scope: !3175)
!5235 = !DILocation(line: 2110, column: 33, scope: !3175)
!5236 = !DILocation(line: 2110, column: 47, scope: !3175)
!5237 = !DILocation(line: 2110, column: 53, scope: !3175)
!5238 = !DILocation(line: 2110, column: 59, scope: !3175)
!5239 = !DILocation(line: 2110, column: 14, scope: !3175)
!5240 = !DILocation(line: 2110, column: 12, scope: !3175)
!5241 = !DILocation(line: 2111, column: 10, scope: !5242)
!5242 = distinct !DILexicalBlock(scope: !3175, file: !616, line: 2111, column: 9)
!5243 = !DILocation(line: 2111, column: 9, scope: !3175)
!5244 = !DILocation(line: 2112, column: 9, scope: !5242)
!5245 = !DILocation(line: 2116, column: 12, scope: !3190)
!5246 = !DILocation(line: 2116, column: 10, scope: !3190)
!5247 = !DILocation(line: 2116, column: 17, scope: !5248)
!5248 = !DILexicalBlockFile(scope: !5249, file: !616, discriminator: 2)
!5249 = !DILexicalBlockFile(scope: !3189, file: !616, discriminator: 1)
!5250 = !DILocation(line: 2116, column: 19, scope: !3189)
!5251 = !DILocation(line: 2116, column: 5, scope: !3190)
!5252 = !DILocation(line: 2117, column: 29, scope: !3187)
!5253 = !DILocation(line: 2117, column: 30, scope: !3187)
!5254 = !DILocation(line: 2117, column: 13, scope: !3187)
!5255 = !DILocation(line: 2117, column: 21, scope: !3187)
!5256 = !DILocation(line: 2117, column: 34, scope: !3187)
!5257 = !DILocation(line: 2117, column: 13, scope: !3188)
!5258 = !DILocation(line: 2118, column: 13, scope: !3186)
!5259 = !DILocation(line: 2118, column: 18, scope: !5260)
!5260 = !DILexicalBlockFile(scope: !3185, file: !616, discriminator: 1)
!5261 = !DILocation(line: 2118, column: 28, scope: !3185)
!5262 = !DILocation(line: 2118, column: 86, scope: !5263)
!5263 = distinct !DILexicalBlock(scope: !3185, file: !616, line: 2118, column: 83)
!5264 = !DILocation(line: 2118, column: 103, scope: !5263)
!5265 = !DILocation(line: 2118, column: 83, scope: !5263)
!5266 = !DILocation(line: 2118, column: 113, scope: !5263)
!5267 = !DILocation(line: 2118, column: 83, scope: !3185)
!5268 = !DILocation(line: 2118, column: 83, scope: !5269)
!5269 = !DILexicalBlockFile(scope: !3185, file: !616, discriminator: 2)
!5270 = !DILocation(line: 2118, column: 144, scope: !5271)
!5271 = !DILexicalBlockFile(scope: !5263, file: !616, discriminator: 3)
!5272 = !DILocation(line: 2118, column: 162, scope: !5263)
!5273 = !DILocation(line: 2118, column: 172, scope: !5263)
!5274 = !DILocation(line: 2118, column: 197, scope: !5263)
!5275 = !DILocation(line: 2118, column: 128, scope: !5263)
!5276 = !DILocation(line: 2118, column: 216, scope: !5277)
!5277 = !DILexicalBlockFile(scope: !3186, file: !616, discriminator: 4)
!5278 = !DILocation(line: 2118, column: 216, scope: !3185)
!5279 = !DILocation(line: 2118, column: 216, scope: !5280)
!5280 = !DILexicalBlockFile(scope: !3185, file: !616, discriminator: 5)
!5281 = !DILocation(line: 2119, column: 45, scope: !3186)
!5282 = !DILocation(line: 2119, column: 29, scope: !3186)
!5283 = !DILocation(line: 2119, column: 37, scope: !3186)
!5284 = !DILocation(line: 2119, column: 51, scope: !3186)
!5285 = !DILocation(line: 2119, column: 60, scope: !3186)
!5286 = !DILocation(line: 2120, column: 52, scope: !3186)
!5287 = !DILocation(line: 2120, column: 36, scope: !3186)
!5288 = !DILocation(line: 2120, column: 44, scope: !3186)
!5289 = !DILocation(line: 2120, column: 29, scope: !3186)
!5290 = !DILocation(line: 2120, column: 30, scope: !3186)
!5291 = !DILocation(line: 2120, column: 13, scope: !3186)
!5292 = !DILocation(line: 2120, column: 21, scope: !3186)
!5293 = !DILocation(line: 2120, column: 34, scope: !3186)
!5294 = !DILocation(line: 2121, column: 9, scope: !3186)
!5295 = !DILocation(line: 2122, column: 5, scope: !3188)
!5296 = !DILocation(line: 2116, column: 26, scope: !3189)
!5297 = !DILocation(line: 2116, column: 5, scope: !3189)
!5298 = !DILocation(line: 2123, column: 23, scope: !3175)
!5299 = !DILocation(line: 2123, column: 12, scope: !3175)
!5300 = !DILocation(line: 2123, column: 5, scope: !3175)
!5301 = !DILocation(line: 2124, column: 1, scope: !3175)
!5302 = !DILocation(line: 5621, column: 31, scope: !3191)
!5303 = !DILocation(line: 5621, column: 47, scope: !3191)
!5304 = !DILocation(line: 5621, column: 63, scope: !3191)
!5305 = !DILocation(line: 5623, column: 5, scope: !3191)
!5306 = !DILocation(line: 5623, column: 15, scope: !3191)
!5307 = !DILocation(line: 5623, column: 21, scope: !3191)
!5308 = !DILocation(line: 5626, column: 45, scope: !5309)
!5309 = distinct !DILexicalBlock(scope: !3191, file: !616, line: 5626, column: 9)
!5310 = !DILocation(line: 5626, column: 51, scope: !5309)
!5311 = !DILocation(line: 5626, column: 10, scope: !5309)
!5312 = !DILocation(line: 5626, column: 9, scope: !3191)
!5313 = !DILocation(line: 5627, column: 9, scope: !5309)
!5314 = !DILocation(line: 5628, column: 32, scope: !3191)
!5315 = !DILocation(line: 5628, column: 11, scope: !3191)
!5316 = !DILocation(line: 5628, column: 9, scope: !3191)
!5317 = !DILocation(line: 5629, column: 10, scope: !5318)
!5318 = distinct !DILexicalBlock(scope: !3191, file: !616, line: 5629, column: 9)
!5319 = !DILocation(line: 5629, column: 9, scope: !3191)
!5320 = !DILocation(line: 5630, column: 9, scope: !5318)
!5321 = !DILocation(line: 5631, column: 21, scope: !3191)
!5322 = !DILocation(line: 5631, column: 33, scope: !3191)
!5323 = !DILocation(line: 5631, column: 42, scope: !3191)
!5324 = !DILocation(line: 5632, column: 45, scope: !3191)
!5325 = !DILocation(line: 5632, column: 25, scope: !3191)
!5326 = !DILocation(line: 5632, column: 7, scope: !3191)
!5327 = !DILocation(line: 5632, column: 32, scope: !3191)
!5328 = !DILocation(line: 5632, column: 6, scope: !3191)
!5329 = !DILocation(line: 5632, column: 43, scope: !3191)
!5330 = !DILocation(line: 5633, column: 12, scope: !3191)
!5331 = !DILocation(line: 5633, column: 5, scope: !3191)
!5332 = !DILocation(line: 5634, column: 1, scope: !3191)
!5333 = !DILocation(line: 939, column: 20, scope: !3198)
!5334 = !DILocation(line: 939, column: 39, scope: !3198)
!5335 = !DILocation(line: 940, column: 9, scope: !5336)
!5336 = distinct !DILexicalBlock(scope: !3198, file: !616, line: 940, column: 9)
!5337 = !DILocation(line: 940, column: 12, scope: !5336)
!5338 = !DILocation(line: 940, column: 9, scope: !3198)
!5339 = !DILocation(line: 941, column: 9, scope: !5336)
!5340 = !DILocation(line: 943, column: 32, scope: !3198)
!5341 = !DILocation(line: 943, column: 5, scope: !3198)
!5342 = !DILocation(line: 944, column: 5, scope: !3198)
!5343 = !DILocation(line: 945, column: 1, scope: !3198)
!5344 = !DILocation(line: 948, column: 33, scope: !3210)
!5345 = !DILocation(line: 948, column: 52, scope: !3210)
!5346 = !DILocation(line: 949, column: 9, scope: !5347)
!5347 = distinct !DILexicalBlock(scope: !3210, file: !616, line: 949, column: 9)
!5348 = !DILocation(line: 949, column: 9, scope: !3210)
!5349 = !DILocation(line: 950, column: 9, scope: !5347)
!5350 = !DILocation(line: 952, column: 32, scope: !3210)
!5351 = !DILocation(line: 952, column: 5, scope: !3210)
!5352 = !DILocation(line: 953, column: 5, scope: !3210)
!5353 = !DILocation(line: 954, column: 1, scope: !3210)
!5354 = !DILocation(line: 991, column: 42, scope: !3214)
!5355 = !DILocation(line: 991, column: 61, scope: !3214)
!5356 = !DILocation(line: 992, column: 40, scope: !3214)
!5357 = !DILocation(line: 993, column: 10, scope: !5358)
!5358 = distinct !DILexicalBlock(scope: !3214, file: !616, line: 993, column: 9)
!5359 = !DILocation(line: 993, column: 17, scope: !5358)
!5360 = !DILocation(line: 993, column: 31, scope: !5358)
!5361 = !DILocation(line: 993, column: 36, scope: !5362)
!5362 = !DILexicalBlockFile(scope: !5358, file: !616, discriminator: 1)
!5363 = !DILocation(line: 993, column: 9, scope: !3214)
!5364 = !DILocation(line: 994, column: 22, scope: !5365)
!5365 = distinct !DILexicalBlock(scope: !5358, file: !616, line: 993, column: 54)
!5366 = !DILocation(line: 996, column: 22, scope: !5365)
!5367 = !DILocation(line: 994, column: 9, scope: !5365)
!5368 = !DILocation(line: 997, column: 9, scope: !5365)
!5369 = !DILocation(line: 999, column: 5, scope: !3214)
!5370 = !DILocation(line: 1000, column: 1, scope: !3214)
!5371 = !DILocation(line: 671, column: 28, scope: !3219)
!5372 = !DILocation(line: 671, column: 37, scope: !3219)
!5373 = !DILocation(line: 673, column: 9, scope: !5374)
!5374 = distinct !DILexicalBlock(scope: !3219, file: !616, line: 673, column: 9)
!5375 = !DILocation(line: 673, column: 11, scope: !5374)
!5376 = !DILocation(line: 673, column: 9, scope: !3219)
!5377 = !DILocation(line: 674, column: 17, scope: !5378)
!5378 = distinct !DILexicalBlock(scope: !5374, file: !616, line: 673, column: 33)
!5379 = !DILocation(line: 674, column: 10, scope: !5378)
!5380 = !DILocation(line: 674, column: 19, scope: !5378)
!5381 = !DILocation(line: 675, column: 9, scope: !5378)
!5382 = !DILocation(line: 677, column: 26, scope: !3219)
!5383 = !DILocation(line: 677, column: 36, scope: !3219)
!5384 = !DILocation(line: 677, column: 29, scope: !3219)
!5385 = !DILocation(line: 677, column: 12, scope: !3219)
!5386 = !DILocation(line: 677, column: 5, scope: !3219)
!5387 = !DILocation(line: 678, column: 1, scope: !3219)
!5388 = !DILocation(line: 925, column: 30, scope: !3223)
!5389 = !DILocation(line: 925, column: 39, scope: !3223)
!5390 = !DILocation(line: 927, column: 5, scope: !3223)
!5391 = !DILocation(line: 927, column: 9, scope: !3223)
!5392 = !DILocation(line: 928, column: 27, scope: !5393)
!5393 = distinct !DILexicalBlock(scope: !3223, file: !616, line: 928, column: 9)
!5394 = !DILocation(line: 928, column: 30, scope: !5393)
!5395 = !DILocation(line: 928, column: 10, scope: !5393)
!5396 = !DILocation(line: 928, column: 9, scope: !3223)
!5397 = !DILocation(line: 929, column: 9, scope: !5393)
!5398 = !DILocation(line: 930, column: 9, scope: !5399)
!5399 = distinct !DILexicalBlock(scope: !3223, file: !616, line: 930, column: 9)
!5400 = !DILocation(line: 930, column: 16, scope: !5399)
!5401 = !DILocation(line: 930, column: 9, scope: !3223)
!5402 = !DILocation(line: 931, column: 9, scope: !5403)
!5403 = distinct !DILexicalBlock(scope: !5399, file: !616, line: 930, column: 30)
!5404 = !DILocation(line: 932, column: 9, scope: !5403)
!5405 = !DILocation(line: 934, column: 17, scope: !3223)
!5406 = !DILocation(line: 934, column: 13, scope: !3223)
!5407 = !DILocation(line: 934, column: 6, scope: !3223)
!5408 = !DILocation(line: 934, column: 15, scope: !3223)
!5409 = !DILocation(line: 935, column: 5, scope: !3223)
!5410 = !DILocation(line: 936, column: 1, scope: !3223)
!5411 = !DILocation(line: 2480, column: 22, scope: !746)
!5412 = !DILocation(line: 2480, column: 40, scope: !746)
!5413 = !DILocation(line: 2480, column: 56, scope: !746)
!5414 = !DILocation(line: 2482, column: 5, scope: !746)
!5415 = !DILocation(line: 2482, column: 15, scope: !746)
!5416 = !DILocation(line: 2484, column: 5, scope: !746)
!5417 = !DILocation(line: 2484, column: 12, scope: !746)
!5418 = !DILocation(line: 2485, column: 5, scope: !746)
!5419 = !DILocation(line: 2485, column: 9, scope: !746)
!5420 = !DILocation(line: 2486, column: 5, scope: !746)
!5421 = !DILocation(line: 2486, column: 9, scope: !746)
!5422 = !DILocation(line: 2488, column: 45, scope: !5423)
!5423 = distinct !DILexicalBlock(scope: !746, file: !616, line: 2488, column: 9)
!5424 = !DILocation(line: 2488, column: 51, scope: !5423)
!5425 = !DILocation(line: 2488, column: 10, scope: !5423)
!5426 = !DILocation(line: 2488, column: 9, scope: !746)
!5427 = !DILocation(line: 2491, column: 9, scope: !5423)
!5428 = !DILocation(line: 2492, column: 33, scope: !746)
!5429 = !DILocation(line: 2492, column: 48, scope: !746)
!5430 = !DILocation(line: 2492, column: 56, scope: !746)
!5431 = !DILocation(line: 2492, column: 20, scope: !746)
!5432 = !DILocation(line: 2492, column: 18, scope: !746)
!5433 = !DILocation(line: 2492, column: 5, scope: !746)
!5434 = !DILocation(line: 2496, column: 5, scope: !746)
!5435 = !DILocation(line: 2498, column: 12, scope: !746)
!5436 = !DILocation(line: 2499, column: 1, scope: !746)
!5437 = !DILocation(line: 2498, column: 5, scope: !746)
!5438 = !DILocation(line: 2622, column: 24, scope: !1064)
!5439 = !DILocation(line: 2622, column: 42, scope: !1064)
!5440 = !DILocation(line: 2622, column: 58, scope: !1064)
!5441 = !DILocation(line: 2624, column: 5, scope: !1064)
!5442 = !DILocation(line: 2624, column: 15, scope: !1064)
!5443 = !DILocation(line: 2626, column: 5, scope: !1064)
!5444 = !DILocation(line: 2626, column: 12, scope: !1064)
!5445 = !DILocation(line: 2627, column: 5, scope: !1064)
!5446 = !DILocation(line: 2627, column: 9, scope: !1064)
!5447 = !DILocation(line: 2628, column: 5, scope: !1064)
!5448 = !DILocation(line: 2628, column: 9, scope: !1064)
!5449 = !DILocation(line: 2629, column: 5, scope: !1064)
!5450 = !DILocation(line: 2629, column: 9, scope: !1064)
!5451 = !DILocation(line: 2630, column: 5, scope: !1064)
!5452 = !DILocation(line: 2630, column: 9, scope: !1064)
!5453 = !DILocation(line: 2632, column: 45, scope: !5454)
!5454 = distinct !DILexicalBlock(scope: !1064, file: !616, line: 2632, column: 9)
!5455 = !DILocation(line: 2632, column: 51, scope: !5454)
!5456 = !DILocation(line: 2632, column: 10, scope: !5454)
!5457 = !DILocation(line: 2632, column: 9, scope: !1064)
!5458 = !DILocation(line: 2635, column: 9, scope: !5454)
!5459 = !DILocation(line: 2636, column: 35, scope: !1064)
!5460 = !DILocation(line: 2636, column: 50, scope: !1064)
!5461 = !DILocation(line: 2636, column: 56, scope: !1064)
!5462 = !DILocation(line: 2636, column: 64, scope: !1064)
!5463 = !DILocation(line: 2636, column: 79, scope: !1064)
!5464 = !DILocation(line: 2636, column: 20, scope: !1064)
!5465 = !DILocation(line: 2636, column: 18, scope: !1064)
!5466 = !DILocation(line: 2636, column: 5, scope: !1064)
!5467 = !DILocation(line: 2640, column: 5, scope: !1064)
!5468 = !DILocation(line: 2642, column: 12, scope: !1064)
!5469 = !DILocation(line: 2643, column: 1, scope: !1064)
!5470 = !DILocation(line: 2642, column: 5, scope: !1064)
!5471 = !DILocation(line: 2758, column: 25, scope: !1092)
!5472 = !DILocation(line: 2758, column: 43, scope: !1092)
!5473 = !DILocation(line: 2760, column: 5, scope: !1092)
!5474 = !DILocation(line: 2760, column: 15, scope: !1092)
!5475 = !DILocation(line: 2761, column: 5, scope: !1092)
!5476 = !DILocation(line: 2761, column: 9, scope: !1092)
!5477 = !DILocation(line: 2762, column: 5, scope: !1092)
!5478 = !DILocation(line: 2762, column: 11, scope: !1092)
!5479 = !DILocation(line: 2764, column: 34, scope: !5480)
!5480 = distinct !DILexicalBlock(scope: !1092, file: !616, line: 2764, column: 9)
!5481 = !DILocation(line: 2764, column: 10, scope: !5480)
!5482 = !DILocation(line: 2764, column: 9, scope: !1092)
!5483 = !DILocation(line: 2767, column: 9, scope: !5480)
!5484 = !DILocation(line: 2768, column: 37, scope: !1092)
!5485 = !DILocation(line: 2768, column: 45, scope: !1092)
!5486 = !DILocation(line: 2768, column: 21, scope: !1092)
!5487 = !DILocation(line: 2768, column: 19, scope: !1092)
!5488 = !DILocation(line: 2769, column: 9, scope: !5489)
!5489 = distinct !DILexicalBlock(scope: !1092, file: !616, line: 2769, column: 9)
!5490 = !DILocation(line: 2769, column: 23, scope: !5489)
!5491 = !DILocation(line: 2769, column: 9, scope: !1092)
!5492 = !DILocation(line: 2770, column: 9, scope: !5489)
!5493 = !DILocation(line: 2771, column: 46, scope: !1092)
!5494 = !DILocation(line: 2771, column: 20, scope: !1092)
!5495 = !DILocation(line: 2771, column: 18, scope: !1092)
!5496 = !DILocation(line: 2771, column: 5, scope: !1092)
!5497 = !DILocation(line: 2774, column: 12, scope: !1092)
!5498 = !DILocation(line: 2775, column: 1, scope: !1092)
!5499 = !DILocation(line: 2774, column: 5, scope: !1092)
!5500 = !DILocation(line: 2823, column: 23, scope: !1110)
!5501 = !DILocation(line: 2823, column: 39, scope: !1110)
!5502 = !DILocation(line: 2823, column: 55, scope: !1110)
!5503 = !DILocation(line: 2825, column: 5, scope: !1110)
!5504 = !DILocation(line: 2825, column: 12, scope: !1110)
!5505 = !DILocation(line: 2826, column: 5, scope: !1110)
!5506 = !DILocation(line: 2826, column: 9, scope: !1110)
!5507 = !DILocation(line: 2827, column: 5, scope: !1110)
!5508 = !DILocation(line: 2827, column: 15, scope: !1110)
!5509 = !DILocation(line: 2830, column: 5, scope: !1110)
!5510 = !DILocation(line: 2831, column: 10, scope: !1110)
!5511 = !DILocation(line: 2831, column: 24, scope: !1110)
!5512 = !{!5513, !3868, i64 0}
!5513 = !{!"", !3868, i64 0, !3868, i64 8, !3841, i64 16, !3841, i64 20, !3868, i64 24, !3868, i64 32, !3841, i64 40, !3894, i64 48, !3868, i64 56, !3868, i64 64}
!5514 = !DILocation(line: 2833, column: 10, scope: !1110)
!5515 = !DILocation(line: 2833, column: 19, scope: !1110)
!5516 = !{!5513, !3841, i64 20}
!5517 = !DILocation(line: 2835, column: 45, scope: !5518)
!5518 = distinct !DILexicalBlock(scope: !1110, file: !616, line: 2835, column: 9)
!5519 = !DILocation(line: 2835, column: 51, scope: !5518)
!5520 = !DILocation(line: 2835, column: 10, scope: !5518)
!5521 = !DILocation(line: 2835, column: 9, scope: !1110)
!5522 = !DILocation(line: 2838, column: 9, scope: !5518)
!5523 = !DILocation(line: 2840, column: 7, scope: !1119)
!5524 = !DILocation(line: 2840, column: 22, scope: !1119)
!5525 = !DILocation(line: 2840, column: 37, scope: !1119)
!5526 = !DILocation(line: 2840, column: 35, scope: !1119)
!5527 = !DILocation(line: 2849, column: 14, scope: !5528)
!5528 = distinct !DILexicalBlock(scope: !1119, file: !616, line: 2849, column: 9)
!5529 = !{!5513, !3841, i64 40}
!5530 = !DILocation(line: 2849, column: 17, scope: !5528)
!5531 = !DILocation(line: 2849, column: 9, scope: !1119)
!5532 = !DILocation(line: 2850, column: 30, scope: !5528)
!5533 = !DILocation(line: 2850, column: 18, scope: !5528)
!5534 = !DILocation(line: 2850, column: 16, scope: !5528)
!5535 = !DILocation(line: 2850, column: 9, scope: !5528)
!5536 = !DILocation(line: 2853, column: 29, scope: !5528)
!5537 = !{!5513, !3868, i64 32}
!5538 = !DILocation(line: 2853, column: 18, scope: !5528)
!5539 = !DILocation(line: 2853, column: 16, scope: !5528)
!5540 = !DILocation(line: 2855, column: 26, scope: !1119)
!5541 = !DILocation(line: 2855, column: 5, scope: !1119)
!5542 = !DILocation(line: 2855, column: 34, scope: !1110)
!5543 = !DILocation(line: 2857, column: 9, scope: !5544)
!5544 = distinct !DILexicalBlock(scope: !1110, file: !616, line: 2857, column: 9)
!5545 = !DILocation(line: 2857, column: 9, scope: !1110)
!5546 = !DILocation(line: 2858, column: 24, scope: !5547)
!5547 = distinct !DILexicalBlock(scope: !5544, file: !616, line: 2857, column: 17)
!5548 = !DILocation(line: 2858, column: 22, scope: !5547)
!5549 = !DILocation(line: 2859, column: 9, scope: !5547)
!5550 = !DILocation(line: 2862, column: 18, scope: !1110)
!5551 = !DILocation(line: 2863, column: 51, scope: !1110)
!5552 = !DILocation(line: 2863, column: 5, scope: !1110)
!5553 = !DILocation(line: 2866, column: 5, scope: !1110)
!5554 = !DILocation(line: 2867, column: 12, scope: !1110)
!5555 = !DILocation(line: 2867, column: 5, scope: !1110)
!5556 = !DILocation(line: 2868, column: 1, scope: !1110)
!5557 = !DILocation(line: 2902, column: 23, scope: !1120)
!5558 = !DILocation(line: 2902, column: 39, scope: !1120)
!5559 = !DILocation(line: 2902, column: 55, scope: !1120)
!5560 = !DILocation(line: 2904, column: 5, scope: !1120)
!5561 = !DILocation(line: 2904, column: 12, scope: !1120)
!5562 = !DILocation(line: 2905, column: 5, scope: !1120)
!5563 = !DILocation(line: 2905, column: 9, scope: !1120)
!5564 = !DILocation(line: 2906, column: 5, scope: !1120)
!5565 = !DILocation(line: 2906, column: 9, scope: !1120)
!5566 = !DILocation(line: 2907, column: 5, scope: !1120)
!5567 = !DILocation(line: 2907, column: 9, scope: !1120)
!5568 = !DILocation(line: 2908, column: 5, scope: !1120)
!5569 = !DILocation(line: 2908, column: 9, scope: !1120)
!5570 = !DILocation(line: 2909, column: 5, scope: !1120)
!5571 = !DILocation(line: 2909, column: 15, scope: !1120)
!5572 = !DILocation(line: 2918, column: 5, scope: !1120)
!5573 = !DILocation(line: 2918, column: 9, scope: !1120)
!5574 = !DILocation(line: 2921, column: 5, scope: !1120)
!5575 = !DILocation(line: 2922, column: 10, scope: !1120)
!5576 = !DILocation(line: 2922, column: 24, scope: !1120)
!5577 = !DILocation(line: 2924, column: 10, scope: !1120)
!5578 = !DILocation(line: 2924, column: 19, scope: !1120)
!5579 = !DILocation(line: 2926, column: 45, scope: !5580)
!5580 = distinct !DILexicalBlock(scope: !1120, file: !616, line: 2926, column: 9)
!5581 = !DILocation(line: 2926, column: 51, scope: !5580)
!5582 = !DILocation(line: 2926, column: 10, scope: !5580)
!5583 = !DILocation(line: 2926, column: 9, scope: !1120)
!5584 = !DILocation(line: 2935, column: 9, scope: !5580)
!5585 = !DILocation(line: 2967, column: 7, scope: !1133)
!5586 = !DILocation(line: 2967, column: 22, scope: !1133)
!5587 = !DILocation(line: 2967, column: 37, scope: !1133)
!5588 = !DILocation(line: 2967, column: 35, scope: !1133)
!5589 = !DILocation(line: 2969, column: 14, scope: !5590)
!5590 = distinct !DILexicalBlock(scope: !1133, file: !616, line: 2969, column: 9)
!5591 = !DILocation(line: 2969, column: 17, scope: !5590)
!5592 = !DILocation(line: 2969, column: 9, scope: !1133)
!5593 = !DILocation(line: 2970, column: 30, scope: !5590)
!5594 = !DILocation(line: 2970, column: 34, scope: !5590)
!5595 = !DILocation(line: 2970, column: 18, scope: !5590)
!5596 = !DILocation(line: 2970, column: 16, scope: !5590)
!5597 = !DILocation(line: 2970, column: 9, scope: !5590)
!5598 = !DILocation(line: 2979, column: 10, scope: !5599)
!5599 = distinct !DILexicalBlock(scope: !5590, file: !616, line: 2979, column: 9)
!5600 = !DILocation(line: 2979, column: 17, scope: !5599)
!5601 = !DILocation(line: 2979, column: 31, scope: !5599)
!5602 = !DILocation(line: 2979, column: 35, scope: !5603)
!5603 = !DILexicalBlockFile(scope: !5599, file: !616, discriminator: 1)
!5604 = !DILocation(line: 2979, column: 9, scope: !5590)
!5605 = !DILocation(line: 2990, column: 27, scope: !5606)
!5606 = distinct !DILexicalBlock(scope: !5599, file: !616, line: 2979, column: 52)
!5607 = !DILocation(line: 2990, column: 40, scope: !5606)
!5608 = !DILocation(line: 2990, column: 48, scope: !5606)
!5609 = !DILocation(line: 2991, column: 27, scope: !5606)
!5610 = !DILocation(line: 2990, column: 18, scope: !5606)
!5611 = !DILocation(line: 2990, column: 16, scope: !5606)
!5612 = !DILocation(line: 2997, column: 26, scope: !5606)
!5613 = !DILocation(line: 2997, column: 33, scope: !5606)
!5614 = !DILocation(line: 2998, column: 30, scope: !5606)
!5615 = !DILocation(line: 2998, column: 29, scope: !5606)
!5616 = !DILocation(line: 2998, column: 51, scope: !5606)
!5617 = !DILocation(line: 2998, column: 58, scope: !5606)
!5618 = !DILocation(line: 2998, column: 64, scope: !5619)
!5619 = !DILexicalBlockFile(scope: !5606, file: !616, discriminator: 1)
!5620 = !DILocation(line: 2998, column: 63, scope: !5606)
!5621 = !DILocation(line: 2998, column: 85, scope: !5606)
!5622 = !DILocation(line: 2998, column: 93, scope: !5606)
!5623 = !DILocation(line: 2999, column: 27, scope: !5606)
!5624 = !DILocation(line: 2999, column: 26, scope: !5606)
!5625 = !DILocation(line: 2998, column: 93, scope: !5626)
!5626 = !DILexicalBlockFile(scope: !5606, file: !616, discriminator: 2)
!5627 = !DILocation(line: 2996, column: 39, scope: !5606)
!5628 = !DILocation(line: 3000, column: 5, scope: !5606)
!5629 = !DILocation(line: 3003, column: 29, scope: !5599)
!5630 = !DILocation(line: 3003, column: 37, scope: !5599)
!5631 = !DILocation(line: 3003, column: 18, scope: !5599)
!5632 = !DILocation(line: 3003, column: 16, scope: !5599)
!5633 = !DILocation(line: 3004, column: 26, scope: !1133)
!5634 = !DILocation(line: 3004, column: 5, scope: !1133)
!5635 = !DILocation(line: 3004, column: 34, scope: !1120)
!5636 = !DILocation(line: 3006, column: 9, scope: !5637)
!5637 = distinct !DILexicalBlock(scope: !1120, file: !616, line: 3006, column: 9)
!5638 = !DILocation(line: 3006, column: 9, scope: !1120)
!5639 = !DILocation(line: 3008, column: 13, scope: !5640)
!5640 = distinct !DILexicalBlock(scope: !5641, file: !616, line: 3008, column: 13)
!5641 = distinct !DILexicalBlock(scope: !5637, file: !616, line: 3006, column: 17)
!5642 = !DILocation(line: 3008, column: 13, scope: !5641)
!5643 = !DILocation(line: 3009, column: 17, scope: !5644)
!5644 = distinct !DILexicalBlock(scope: !5645, file: !616, line: 3009, column: 17)
!5645 = distinct !DILexicalBlock(scope: !5640, file: !616, line: 3008, column: 44)
!5646 = !DILocation(line: 3009, column: 24, scope: !5644)
!5647 = !DILocation(line: 3009, column: 17, scope: !5645)
!5648 = !DILocation(line: 3011, column: 52, scope: !5644)
!5649 = !DILocation(line: 3011, column: 60, scope: !5644)
!5650 = !DILocation(line: 3010, column: 17, scope: !5644)
!5651 = !DILocation(line: 3013, column: 52, scope: !5644)
!5652 = !DILocation(line: 3013, column: 17, scope: !5644)
!5653 = !DILocation(line: 3014, column: 9, scope: !5645)
!5654 = !DILocation(line: 3017, column: 28, scope: !5640)
!5655 = !DILocation(line: 3017, column: 26, scope: !5640)
!5656 = !DILocation(line: 3018, column: 9, scope: !5641)
!5657 = !DILocation(line: 3022, column: 51, scope: !1120)
!5658 = !DILocation(line: 3023, column: 18, scope: !1120)
!5659 = !DILocation(line: 3023, column: 5, scope: !1120)
!5660 = !DILocation(line: 3025, column: 5, scope: !1120)
!5661 = !DILocation(line: 3026, column: 12, scope: !1120)
!5662 = !DILocation(line: 3026, column: 5, scope: !1120)
!5663 = !DILocation(line: 3027, column: 1, scope: !1120)
!5664 = !DILocation(line: 3037, column: 24, scope: !1134)
!5665 = !DILocation(line: 3037, column: 40, scope: !1134)
!5666 = !DILocation(line: 3039, column: 5, scope: !1134)
!5667 = !DILocation(line: 3039, column: 9, scope: !1134)
!5668 = !DILocation(line: 3039, column: 13, scope: !1134)
!5669 = !DILocation(line: 3039, column: 19, scope: !1134)
!5670 = !DILocation(line: 3040, column: 34, scope: !5671)
!5671 = distinct !DILexicalBlock(scope: !1134, file: !616, line: 3040, column: 9)
!5672 = !DILocation(line: 3040, column: 10, scope: !5671)
!5673 = !DILocation(line: 3040, column: 9, scope: !1134)
!5674 = !DILocation(line: 3041, column: 9, scope: !5671)
!5675 = !DILocation(line: 3042, column: 7, scope: !1142)
!5676 = !DILocation(line: 3042, column: 22, scope: !1142)
!5677 = !DILocation(line: 3042, column: 37, scope: !1142)
!5678 = !DILocation(line: 3042, column: 35, scope: !1142)
!5679 = !DILocation(line: 3043, column: 18, scope: !1142)
!5680 = !DILocation(line: 3043, column: 22, scope: !1142)
!5681 = !DILocation(line: 3043, column: 11, scope: !1142)
!5682 = !DILocation(line: 3043, column: 9, scope: !1142)
!5683 = !DILocation(line: 3044, column: 26, scope: !1142)
!5684 = !DILocation(line: 3044, column: 5, scope: !1142)
!5685 = !DILocation(line: 3044, column: 34, scope: !1134)
!5686 = !DILocation(line: 3045, column: 9, scope: !5687)
!5687 = distinct !DILexicalBlock(scope: !1134, file: !616, line: 3045, column: 9)
!5688 = !DILocation(line: 3045, column: 13, scope: !5687)
!5689 = !DILocation(line: 3045, column: 9, scope: !1134)
!5690 = !DILocation(line: 3046, column: 16, scope: !5687)
!5691 = !DILocation(line: 3046, column: 9, scope: !5687)
!5692 = !DILocation(line: 3047, column: 58, scope: !1134)
!5693 = !DILocation(line: 3047, column: 5, scope: !1134)
!5694 = !DILocation(line: 3048, column: 1, scope: !1134)
!5695 = !DILocation(line: 3247, column: 23, scope: !1143)
!5696 = !DILocation(line: 3247, column: 39, scope: !1143)
!5697 = !DILocation(line: 3247, column: 55, scope: !1143)
!5698 = !DILocation(line: 3249, column: 5, scope: !1143)
!5699 = !DILocation(line: 3249, column: 12, scope: !1143)
!5700 = !DILocation(line: 3250, column: 5, scope: !1143)
!5701 = !DILocation(line: 3250, column: 11, scope: !1143)
!5702 = !DILocation(line: 3251, column: 5, scope: !1143)
!5703 = !DILocation(line: 3251, column: 11, scope: !1143)
!5704 = !DILocation(line: 3252, column: 5, scope: !1143)
!5705 = !DILocation(line: 3252, column: 9, scope: !1143)
!5706 = !DILocation(line: 3253, column: 5, scope: !1143)
!5707 = !DILocation(line: 3253, column: 9, scope: !1143)
!5708 = !DILocation(line: 3254, column: 5, scope: !1143)
!5709 = !DILocation(line: 3254, column: 9, scope: !1143)
!5710 = !DILocation(line: 3255, column: 5, scope: !1143)
!5711 = !DILocation(line: 3255, column: 15, scope: !1143)
!5712 = !DILocation(line: 3259, column: 5, scope: !1143)
!5713 = !DILocation(line: 3260, column: 10, scope: !1143)
!5714 = !DILocation(line: 3260, column: 24, scope: !1143)
!5715 = !DILocation(line: 3262, column: 10, scope: !1143)
!5716 = !DILocation(line: 3262, column: 19, scope: !1143)
!5717 = !DILocation(line: 3264, column: 45, scope: !5718)
!5718 = distinct !DILexicalBlock(scope: !1143, file: !616, line: 3264, column: 9)
!5719 = !DILocation(line: 3264, column: 51, scope: !5718)
!5720 = !DILocation(line: 3264, column: 10, scope: !5718)
!5721 = !DILocation(line: 3264, column: 9, scope: !1143)
!5722 = !DILocation(line: 3274, column: 9, scope: !5718)
!5723 = !DILocation(line: 3280, column: 40, scope: !5724)
!5724 = distinct !DILexicalBlock(scope: !1143, file: !616, line: 3280, column: 9)
!5725 = !DILocation(line: 3280, column: 53, scope: !5724)
!5726 = !DILocation(line: 3280, column: 9, scope: !5724)
!5727 = !DILocation(line: 3280, column: 57, scope: !5724)
!5728 = !DILocation(line: 3281, column: 54, scope: !5724)
!5729 = !DILocation(line: 3281, column: 58, scope: !5724)
!5730 = !DILocation(line: 3281, column: 9, scope: !5724)
!5731 = !DILocation(line: 3280, column: 9, scope: !1143)
!5732 = !DILocation(line: 3282, column: 9, scope: !5724)
!5733 = !DILocation(line: 3297, column: 7, scope: !1156)
!5734 = !DILocation(line: 3297, column: 22, scope: !1156)
!5735 = !DILocation(line: 3297, column: 37, scope: !1156)
!5736 = !DILocation(line: 3297, column: 35, scope: !1156)
!5737 = !DILocation(line: 3299, column: 14, scope: !5738)
!5738 = distinct !DILexicalBlock(scope: !1156, file: !616, line: 3299, column: 9)
!5739 = !DILocation(line: 3299, column: 17, scope: !5738)
!5740 = !DILocation(line: 3299, column: 9, scope: !1156)
!5741 = !DILocation(line: 3300, column: 30, scope: !5738)
!5742 = !DILocation(line: 3300, column: 34, scope: !5738)
!5743 = !DILocation(line: 3300, column: 39, scope: !5738)
!5744 = !DILocation(line: 3300, column: 18, scope: !5738)
!5745 = !DILocation(line: 3300, column: 16, scope: !5738)
!5746 = !DILocation(line: 3300, column: 9, scope: !5738)
!5747 = !DILocation(line: 3304, column: 11, scope: !5748)
!5748 = distinct !DILexicalBlock(scope: !5738, file: !616, line: 3304, column: 9)
!5749 = !DILocation(line: 3304, column: 28, scope: !5748)
!5750 = !DILocation(line: 3304, column: 32, scope: !5751)
!5751 = !DILexicalBlockFile(scope: !5748, file: !616, discriminator: 1)
!5752 = !DILocation(line: 3304, column: 39, scope: !5748)
!5753 = !DILocation(line: 3304, column: 9, scope: !5738)
!5754 = !DILocation(line: 3305, column: 30, scope: !5748)
!5755 = !DILocation(line: 3305, column: 38, scope: !5748)
!5756 = !DILocation(line: 3305, column: 43, scope: !5748)
!5757 = !DILocation(line: 3305, column: 18, scope: !5748)
!5758 = !DILocation(line: 3305, column: 16, scope: !5748)
!5759 = !DILocation(line: 3305, column: 9, scope: !5748)
!5760 = !DILocation(line: 3309, column: 10, scope: !5761)
!5761 = distinct !DILexicalBlock(scope: !5748, file: !616, line: 3309, column: 9)
!5762 = !DILocation(line: 3309, column: 17, scope: !5761)
!5763 = !DILocation(line: 3309, column: 31, scope: !5761)
!5764 = !DILocation(line: 3309, column: 36, scope: !5765)
!5765 = !DILexicalBlockFile(scope: !5761, file: !616, discriminator: 1)
!5766 = !DILocation(line: 3309, column: 9, scope: !5748)
!5767 = !DILocation(line: 3310, column: 27, scope: !5761)
!5768 = !DILocation(line: 3310, column: 40, scope: !5761)
!5769 = !DILocation(line: 3310, column: 48, scope: !5761)
!5770 = !DILocation(line: 3310, column: 53, scope: !5761)
!5771 = !DILocation(line: 3311, column: 27, scope: !5761)
!5772 = !DILocation(line: 3310, column: 18, scope: !5761)
!5773 = !DILocation(line: 3310, column: 16, scope: !5761)
!5774 = !DILocation(line: 3310, column: 9, scope: !5761)
!5775 = !DILocation(line: 3314, column: 29, scope: !5761)
!5776 = !DILocation(line: 3314, column: 37, scope: !5761)
!5777 = !DILocation(line: 3314, column: 42, scope: !5761)
!5778 = !DILocation(line: 3314, column: 18, scope: !5761)
!5779 = !DILocation(line: 3314, column: 16, scope: !5761)
!5780 = !DILocation(line: 3315, column: 26, scope: !1156)
!5781 = !DILocation(line: 3315, column: 5, scope: !1156)
!5782 = !DILocation(line: 3315, column: 34, scope: !1143)
!5783 = !DILocation(line: 3317, column: 9, scope: !5784)
!5784 = distinct !DILexicalBlock(scope: !1143, file: !616, line: 3317, column: 9)
!5785 = !DILocation(line: 3317, column: 9, scope: !1143)
!5786 = !DILocation(line: 3318, column: 24, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5784, file: !616, line: 3317, column: 17)
!5788 = !DILocation(line: 3318, column: 22, scope: !5787)
!5789 = !DILocation(line: 3319, column: 9, scope: !5787)
!5790 = !DILocation(line: 3322, column: 18, scope: !1143)
!5791 = !DILocation(line: 3323, column: 51, scope: !1143)
!5792 = !DILocation(line: 3323, column: 5, scope: !1143)
!5793 = !DILocation(line: 3326, column: 5, scope: !1143)
!5794 = !DILocation(line: 3327, column: 12, scope: !1143)
!5795 = !DILocation(line: 3327, column: 5, scope: !1143)
!5796 = !DILocation(line: 3328, column: 1, scope: !1143)
!5797 = !DILocation(line: 3338, column: 24, scope: !1157)
!5798 = !DILocation(line: 3338, column: 40, scope: !1157)
!5799 = !DILocation(line: 3340, column: 5, scope: !1157)
!5800 = !DILocation(line: 3340, column: 9, scope: !1157)
!5801 = !DILocation(line: 3341, column: 5, scope: !1157)
!5802 = !DILocation(line: 3341, column: 11, scope: !1157)
!5803 = !DILocation(line: 3342, column: 5, scope: !1157)
!5804 = !DILocation(line: 3342, column: 11, scope: !1157)
!5805 = !DILocation(line: 3343, column: 5, scope: !1157)
!5806 = !DILocation(line: 3343, column: 9, scope: !1157)
!5807 = !DILocation(line: 3344, column: 34, scope: !5808)
!5808 = distinct !DILexicalBlock(scope: !1157, file: !616, line: 3344, column: 9)
!5809 = !DILocation(line: 3344, column: 10, scope: !5808)
!5810 = !DILocation(line: 3344, column: 9, scope: !1157)
!5811 = !DILocation(line: 3347, column: 9, scope: !5808)
!5812 = !DILocation(line: 3348, column: 7, scope: !1166)
!5813 = !DILocation(line: 3348, column: 22, scope: !1166)
!5814 = !DILocation(line: 3348, column: 37, scope: !1166)
!5815 = !DILocation(line: 3348, column: 35, scope: !1166)
!5816 = !DILocation(line: 3349, column: 18, scope: !1166)
!5817 = !DILocation(line: 3349, column: 22, scope: !1166)
!5818 = !DILocation(line: 3349, column: 27, scope: !1166)
!5819 = !DILocation(line: 3349, column: 11, scope: !1166)
!5820 = !DILocation(line: 3349, column: 9, scope: !1166)
!5821 = !DILocation(line: 3350, column: 26, scope: !1166)
!5822 = !DILocation(line: 3350, column: 5, scope: !1166)
!5823 = !DILocation(line: 3350, column: 34, scope: !1157)
!5824 = !DILocation(line: 3351, column: 9, scope: !5825)
!5825 = distinct !DILexicalBlock(scope: !1157, file: !616, line: 3351, column: 9)
!5826 = !DILocation(line: 3351, column: 13, scope: !5825)
!5827 = !DILocation(line: 3351, column: 9, scope: !1157)
!5828 = !DILocation(line: 3352, column: 16, scope: !5825)
!5829 = !DILocation(line: 3352, column: 9, scope: !5825)
!5830 = !DILocation(line: 3353, column: 58, scope: !1157)
!5831 = !DILocation(line: 3353, column: 5, scope: !1157)
!5832 = !DILocation(line: 3354, column: 1, scope: !1157)
!5833 = !DILocation(line: 3365, column: 24, scope: !1167)
!5834 = !DILocation(line: 3365, column: 40, scope: !1167)
!5835 = !DILocation(line: 3367, column: 5, scope: !1167)
!5836 = !DILocation(line: 3367, column: 12, scope: !1167)
!5837 = !DILocation(line: 3368, column: 5, scope: !1167)
!5838 = !DILocation(line: 3368, column: 11, scope: !1167)
!5839 = !DILocation(line: 3369, column: 5, scope: !1167)
!5840 = !DILocation(line: 3369, column: 11, scope: !1167)
!5841 = !DILocation(line: 3370, column: 5, scope: !1167)
!5842 = !DILocation(line: 3370, column: 9, scope: !1167)
!5843 = !DILocation(line: 3371, column: 5, scope: !1167)
!5844 = !DILocation(line: 3372, column: 10, scope: !1167)
!5845 = !DILocation(line: 3372, column: 24, scope: !1167)
!5846 = !DILocation(line: 3373, column: 34, scope: !5847)
!5847 = distinct !DILexicalBlock(scope: !1167, file: !616, line: 3373, column: 9)
!5848 = !DILocation(line: 3373, column: 10, scope: !5847)
!5849 = !DILocation(line: 3373, column: 9, scope: !1167)
!5850 = !DILocation(line: 3377, column: 9, scope: !5847)
!5851 = !DILocation(line: 3378, column: 7, scope: !1176)
!5852 = !DILocation(line: 3378, column: 22, scope: !1176)
!5853 = !DILocation(line: 3378, column: 37, scope: !1176)
!5854 = !DILocation(line: 3378, column: 35, scope: !1176)
!5855 = !DILocation(line: 3379, column: 23, scope: !1176)
!5856 = !DILocation(line: 3379, column: 31, scope: !1176)
!5857 = !DILocation(line: 3379, column: 36, scope: !1176)
!5858 = !DILocation(line: 3379, column: 11, scope: !1176)
!5859 = !DILocation(line: 3379, column: 9, scope: !1176)
!5860 = !DILocation(line: 3380, column: 26, scope: !1176)
!5861 = !DILocation(line: 3380, column: 5, scope: !1176)
!5862 = !DILocation(line: 3380, column: 34, scope: !1167)
!5863 = !DILocation(line: 3381, column: 9, scope: !5864)
!5864 = distinct !DILexicalBlock(scope: !1167, file: !616, line: 3381, column: 9)
!5865 = !DILocation(line: 3381, column: 13, scope: !5864)
!5866 = !DILocation(line: 3381, column: 9, scope: !1167)
!5867 = !DILocation(line: 3382, column: 9, scope: !5868)
!5868 = distinct !DILexicalBlock(scope: !5864, file: !616, line: 3381, column: 18)
!5869 = !DILocation(line: 3383, column: 9, scope: !5868)
!5870 = !DILocation(line: 3384, column: 9, scope: !5868)
!5871 = !DILocation(line: 3386, column: 5, scope: !1167)
!5872 = !DILocation(line: 3387, column: 51, scope: !1167)
!5873 = !DILocation(line: 3388, column: 5, scope: !1167)
!5874 = !DILocation(line: 3389, column: 1, scope: !1167)
!5875 = !DILocation(line: 3176, column: 24, scope: !1177)
!5876 = !DILocation(line: 3176, column: 40, scope: !1177)
!5877 = !DILocation(line: 3178, column: 33, scope: !1177)
!5878 = !DILocation(line: 3178, column: 12, scope: !1177)
!5879 = !DILocation(line: 3178, column: 5, scope: !1177)
!5880 = !DILocation(line: 2798, column: 25, scope: !1196)
!5881 = !DILocation(line: 2798, column: 41, scope: !1196)
!5882 = !DILocation(line: 2800, column: 5, scope: !1196)
!5883 = !DILocation(line: 2800, column: 11, scope: !1196)
!5884 = !DILocation(line: 2801, column: 5, scope: !1196)
!5885 = !DILocation(line: 2801, column: 10, scope: !1196)
!5886 = !DILocation(line: 2806, column: 19, scope: !1196)
!5887 = !DILocation(line: 2806, column: 11, scope: !1196)
!5888 = !DILocation(line: 2806, column: 9, scope: !1196)
!5889 = !DILocation(line: 2808, column: 9, scope: !5890)
!5890 = distinct !DILexicalBlock(scope: !1196, file: !616, line: 2808, column: 9)
!5891 = !DILocation(line: 2808, column: 13, scope: !5890)
!5892 = !DILocation(line: 2808, column: 9, scope: !1196)
!5893 = !DILocation(line: 2809, column: 16, scope: !5890)
!5894 = !DILocation(line: 2809, column: 9, scope: !5890)
!5895 = !DILocation(line: 2810, column: 38, scope: !1196)
!5896 = !DILocation(line: 2810, column: 12, scope: !1196)
!5897 = !DILocation(line: 2810, column: 5, scope: !1196)
!5898 = !DILocation(line: 2811, column: 1, scope: !1196)
!5899 = !DILocation(line: 3450, column: 32, scope: !1205)
!5900 = !DILocation(line: 3452, column: 12, scope: !1205)
!5901 = !DILocation(line: 3452, column: 5, scope: !1205)
!5902 = !DILocation(line: 3460, column: 30, scope: !1220)
!5903 = !DILocation(line: 3462, column: 12, scope: !1220)
!5904 = !DILocation(line: 3462, column: 5, scope: !1220)
!5905 = !DILocation(line: 3485, column: 22, scope: !1223)
!5906 = !DILocation(line: 3485, column: 38, scope: !1223)
!5907 = !DILocation(line: 3485, column: 54, scope: !1223)
!5908 = !DILocation(line: 3487, column: 5, scope: !1223)
!5909 = !DILocation(line: 3487, column: 12, scope: !1223)
!5910 = !DILocation(line: 3487, column: 17, scope: !1223)
!5911 = !DILocation(line: 3488, column: 5, scope: !1223)
!5912 = !DILocation(line: 3488, column: 9, scope: !1223)
!5913 = !DILocation(line: 3489, column: 5, scope: !1223)
!5914 = !DILocation(line: 3489, column: 9, scope: !1223)
!5915 = !DILocation(line: 3490, column: 5, scope: !1223)
!5916 = !DILocation(line: 3490, column: 9, scope: !1223)
!5917 = !DILocation(line: 3491, column: 5, scope: !1223)
!5918 = !DILocation(line: 3491, column: 15, scope: !1223)
!5919 = !DILocation(line: 3497, column: 5, scope: !1223)
!5920 = !DILocation(line: 3497, column: 9, scope: !1223)
!5921 = !DILocation(line: 3500, column: 5, scope: !1223)
!5922 = !DILocation(line: 3501, column: 5, scope: !1223)
!5923 = !DILocation(line: 3502, column: 9, scope: !1223)
!5924 = !DILocation(line: 3502, column: 23, scope: !1223)
!5925 = !DILocation(line: 3503, column: 9, scope: !1223)
!5926 = !DILocation(line: 3503, column: 23, scope: !1223)
!5927 = !DILocation(line: 3504, column: 45, scope: !5928)
!5928 = distinct !DILexicalBlock(scope: !1223, file: !616, line: 3504, column: 9)
!5929 = !DILocation(line: 3504, column: 51, scope: !5928)
!5930 = !DILocation(line: 3504, column: 10, scope: !5928)
!5931 = !DILocation(line: 3504, column: 9, scope: !1223)
!5932 = !DILocation(line: 3510, column: 9, scope: !5928)
!5933 = !DILocation(line: 3519, column: 14, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !1223, file: !616, line: 3519, column: 9)
!5935 = !DILocation(line: 3519, column: 10, scope: !5934)
!5936 = !DILocation(line: 3519, column: 21, scope: !5934)
!5937 = !DILocation(line: 3519, column: 28, scope: !5938)
!5938 = !DILexicalBlockFile(scope: !5934, file: !616, discriminator: 1)
!5939 = !{!5513, !3868, i64 24}
!5940 = !DILocation(line: 3519, column: 24, scope: !5934)
!5941 = !DILocation(line: 3519, column: 34, scope: !5934)
!5942 = !DILocation(line: 3519, column: 42, scope: !5943)
!5943 = !DILexicalBlockFile(scope: !5944, file: !616, discriminator: 3)
!5944 = !DILexicalBlockFile(scope: !5934, file: !616, discriminator: 2)
!5945 = !DILocation(line: 3519, column: 38, scope: !5934)
!5946 = !DILocation(line: 3519, column: 47, scope: !5934)
!5947 = !DILocation(line: 3519, column: 54, scope: !5948)
!5948 = !DILexicalBlockFile(scope: !5934, file: !616, discriminator: 4)
!5949 = !DILocation(line: 3519, column: 50, scope: !5934)
!5950 = !DILocation(line: 3519, column: 9, scope: !1223)
!5951 = !DILocation(line: 3520, column: 25, scope: !5952)
!5952 = distinct !DILexicalBlock(scope: !5934, file: !616, line: 3519, column: 63)
!5953 = !DILocation(line: 3520, column: 9, scope: !5952)
!5954 = !DILocation(line: 3522, column: 9, scope: !5952)
!5955 = !DILocation(line: 3538, column: 7, scope: !1236)
!5956 = !DILocation(line: 3538, column: 22, scope: !1236)
!5957 = !DILocation(line: 3538, column: 37, scope: !1236)
!5958 = !DILocation(line: 3538, column: 35, scope: !1236)
!5959 = !DILocation(line: 3540, column: 10, scope: !5960)
!5960 = distinct !DILexicalBlock(scope: !1236, file: !616, line: 3540, column: 9)
!5961 = !DILocation(line: 3540, column: 21, scope: !5960)
!5962 = !DILocation(line: 3540, column: 35, scope: !5960)
!5963 = !DILocation(line: 3541, column: 10, scope: !5960)
!5964 = !DILocation(line: 3541, column: 21, scope: !5960)
!5965 = !DILocation(line: 3541, column: 35, scope: !5960)
!5966 = !DILocation(line: 3542, column: 11, scope: !5960)
!5967 = !DILocation(line: 3540, column: 9, scope: !1236)
!5968 = !DILocation(line: 3543, column: 25, scope: !5960)
!5969 = !DILocation(line: 3543, column: 41, scope: !5960)
!5970 = !DILocation(line: 3544, column: 13, scope: !5960)
!5971 = !DILocation(line: 3544, column: 29, scope: !5960)
!5972 = !DILocation(line: 3545, column: 13, scope: !5960)
!5973 = !DILocation(line: 3543, column: 18, scope: !5960)
!5974 = !DILocation(line: 3543, column: 16, scope: !5960)
!5975 = !DILocation(line: 3543, column: 9, scope: !5960)
!5976 = !DILocation(line: 3548, column: 27, scope: !5960)
!5977 = !DILocation(line: 3548, column: 39, scope: !5960)
!5978 = !DILocation(line: 3548, column: 18, scope: !5960)
!5979 = !DILocation(line: 3548, column: 16, scope: !5960)
!5980 = !DILocation(line: 3549, column: 26, scope: !1236)
!5981 = !DILocation(line: 3549, column: 5, scope: !1236)
!5982 = !DILocation(line: 3549, column: 34, scope: !1223)
!5983 = !DILocation(line: 3551, column: 9, scope: !5984)
!5984 = distinct !DILexicalBlock(scope: !1223, file: !616, line: 3551, column: 9)
!5985 = !DILocation(line: 3551, column: 9, scope: !1223)
!5986 = !DILocation(line: 3552, column: 24, scope: !5987)
!5987 = distinct !DILexicalBlock(scope: !5984, file: !616, line: 3551, column: 17)
!5988 = !DILocation(line: 3552, column: 22, scope: !5987)
!5989 = !DILocation(line: 3553, column: 9, scope: !5987)
!5990 = !DILocation(line: 3557, column: 18, scope: !1223)
!5991 = !DILocation(line: 3558, column: 51, scope: !1223)
!5992 = !DILocation(line: 3558, column: 5, scope: !1223)
!5993 = !DILocation(line: 3561, column: 5, scope: !1223)
!5994 = !DILocation(line: 3562, column: 5, scope: !1223)
!5995 = !DILocation(line: 3563, column: 12, scope: !1223)
!5996 = !DILocation(line: 3563, column: 5, scope: !1223)
!5997 = !DILocation(line: 3564, column: 1, scope: !1223)
!5998 = !DILocation(line: 3846, column: 25, scope: !1243)
!5999 = !DILocation(line: 3846, column: 41, scope: !1243)
!6000 = !DILocation(line: 3846, column: 57, scope: !1243)
!6001 = !DILocation(line: 3848, column: 5, scope: !1243)
!6002 = !DILocation(line: 3848, column: 12, scope: !1243)
!6003 = !DILocation(line: 3849, column: 5, scope: !1243)
!6004 = !DILocation(line: 3849, column: 15, scope: !1243)
!6005 = !DILocation(line: 3851, column: 5, scope: !1243)
!6006 = !DILocation(line: 3851, column: 15, scope: !1243)
!6007 = !DILocation(line: 3853, column: 5, scope: !1243)
!6008 = !DILocation(line: 3854, column: 10, scope: !1243)
!6009 = !DILocation(line: 3854, column: 24, scope: !1243)
!6010 = !DILocation(line: 3855, column: 10, scope: !1243)
!6011 = !DILocation(line: 3855, column: 19, scope: !1243)
!6012 = !{!5513, !3841, i64 16}
!6013 = !DILocation(line: 3857, column: 10, scope: !1243)
!6014 = !DILocation(line: 3857, column: 19, scope: !1243)
!6015 = !DILocation(line: 3858, column: 10, scope: !1243)
!6016 = !DILocation(line: 3858, column: 13, scope: !1243)
!6017 = !DILocation(line: 3861, column: 45, scope: !6018)
!6018 = distinct !DILexicalBlock(scope: !1243, file: !616, line: 3861, column: 9)
!6019 = !DILocation(line: 3861, column: 51, scope: !6018)
!6020 = !DILocation(line: 3861, column: 10, scope: !6018)
!6021 = !DILocation(line: 3861, column: 9, scope: !1243)
!6022 = !DILocation(line: 3863, column: 9, scope: !6023)
!6023 = distinct !DILexicalBlock(scope: !6018, file: !616, line: 3862, column: 62)
!6024 = !DILocation(line: 3869, column: 42, scope: !1243)
!6025 = !DILocation(line: 3869, column: 20, scope: !1243)
!6026 = !DILocation(line: 3869, column: 18, scope: !1243)
!6027 = !DILocation(line: 3871, column: 5, scope: !1243)
!6028 = !DILocation(line: 3872, column: 12, scope: !1243)
!6029 = !DILocation(line: 3872, column: 5, scope: !1243)
!6030 = !DILocation(line: 3873, column: 1, scope: !1243)
!6031 = !DILocation(line: 2514, column: 23, scope: !1328)
!6032 = !DILocation(line: 2514, column: 39, scope: !1328)
!6033 = !DILocation(line: 2514, column: 55, scope: !1328)
!6034 = !DILocation(line: 2517, column: 5, scope: !1328)
!6035 = !DILocation(line: 2517, column: 12, scope: !1328)
!6036 = !DILocation(line: 2518, column: 5, scope: !1328)
!6037 = !DILocation(line: 2518, column: 9, scope: !1328)
!6038 = !DILocation(line: 2519, column: 5, scope: !1328)
!6039 = !DILocation(line: 2519, column: 9, scope: !1328)
!6040 = !DILocation(line: 2520, column: 5, scope: !1328)
!6041 = !DILocation(line: 2520, column: 15, scope: !1328)
!6042 = !DILocation(line: 2522, column: 5, scope: !1328)
!6043 = !DILocation(line: 2523, column: 10, scope: !1328)
!6044 = !DILocation(line: 2523, column: 24, scope: !1328)
!6045 = !DILocation(line: 2524, column: 45, scope: !6046)
!6046 = distinct !DILexicalBlock(scope: !1328, file: !616, line: 2524, column: 9)
!6047 = !DILocation(line: 2524, column: 51, scope: !6046)
!6048 = !DILocation(line: 2524, column: 10, scope: !6046)
!6049 = !DILocation(line: 2524, column: 9, scope: !1328)
!6050 = !DILocation(line: 2532, column: 9, scope: !6046)
!6051 = !DILocation(line: 2533, column: 50, scope: !1328)
!6052 = !DILocation(line: 2533, column: 58, scope: !1328)
!6053 = !DILocation(line: 2533, column: 20, scope: !1328)
!6054 = !DILocation(line: 2533, column: 18, scope: !1328)
!6055 = !DILocation(line: 2534, column: 5, scope: !1328)
!6056 = !DILocation(line: 2535, column: 12, scope: !1328)
!6057 = !DILocation(line: 2535, column: 5, scope: !1328)
!6058 = !DILocation(line: 2536, column: 1, scope: !1328)
!6059 = !DILocation(line: 4100, column: 23, scope: !1337)
!6060 = !DILocation(line: 4100, column: 39, scope: !1337)
!6061 = !DILocation(line: 4100, column: 55, scope: !1337)
!6062 = !DILocation(line: 4102, column: 5, scope: !1337)
!6063 = !DILocation(line: 4102, column: 12, scope: !1337)
!6064 = !DILocation(line: 4103, column: 5, scope: !1337)
!6065 = !DILocation(line: 4103, column: 9, scope: !1337)
!6066 = !DILocation(line: 4104, column: 5, scope: !1337)
!6067 = !DILocation(line: 4104, column: 9, scope: !1337)
!6068 = !DILocation(line: 4106, column: 5, scope: !1337)
!6069 = !DILocation(line: 4106, column: 15, scope: !1337)
!6070 = !DILocation(line: 4107, column: 5, scope: !1337)
!6071 = !DILocation(line: 4107, column: 9, scope: !1337)
!6072 = !DILocation(line: 4109, column: 5, scope: !1337)
!6073 = !DILocation(line: 4110, column: 10, scope: !1337)
!6074 = !DILocation(line: 4110, column: 24, scope: !1337)
!6075 = !DILocation(line: 4111, column: 45, scope: !6076)
!6076 = distinct !DILexicalBlock(scope: !1337, file: !616, line: 4111, column: 9)
!6077 = !DILocation(line: 4111, column: 51, scope: !6076)
!6078 = !DILocation(line: 4111, column: 10, scope: !6076)
!6079 = !DILocation(line: 4111, column: 9, scope: !1337)
!6080 = !DILocation(line: 4119, column: 9, scope: !6076)
!6081 = !DILocation(line: 4134, column: 7, scope: !1348)
!6082 = !DILocation(line: 4134, column: 22, scope: !1348)
!6083 = !DILocation(line: 4134, column: 37, scope: !1348)
!6084 = !DILocation(line: 4134, column: 35, scope: !1348)
!6085 = !DILocation(line: 4136, column: 9, scope: !6086)
!6086 = distinct !DILexicalBlock(scope: !1348, file: !616, line: 4136, column: 9)
!6087 = !DILocation(line: 4136, column: 16, scope: !6086)
!6088 = !DILocation(line: 4136, column: 9, scope: !1348)
!6089 = !DILocation(line: 4137, column: 26, scope: !6086)
!6090 = !DILocation(line: 4137, column: 39, scope: !6086)
!6091 = !DILocation(line: 4137, column: 47, scope: !6086)
!6092 = !DILocation(line: 4137, column: 18, scope: !6086)
!6093 = !DILocation(line: 4137, column: 16, scope: !6086)
!6094 = !DILocation(line: 4137, column: 9, scope: !6086)
!6095 = !DILocation(line: 4143, column: 29, scope: !6086)
!6096 = !DILocation(line: 4143, column: 37, scope: !6086)
!6097 = !DILocation(line: 4143, column: 18, scope: !6086)
!6098 = !DILocation(line: 4143, column: 16, scope: !6086)
!6099 = !DILocation(line: 4145, column: 26, scope: !1348)
!6100 = !DILocation(line: 4145, column: 5, scope: !1348)
!6101 = !DILocation(line: 4145, column: 34, scope: !1337)
!6102 = !DILocation(line: 4146, column: 9, scope: !6103)
!6103 = distinct !DILexicalBlock(scope: !1337, file: !616, line: 4146, column: 9)
!6104 = !DILocation(line: 4146, column: 16, scope: !6103)
!6105 = !DILocation(line: 4146, column: 9, scope: !1337)
!6106 = !DILocation(line: 4147, column: 24, scope: !6107)
!6107 = distinct !DILexicalBlock(scope: !6103, file: !616, line: 4146, column: 21)
!6108 = !DILocation(line: 4147, column: 22, scope: !6107)
!6109 = !DILocation(line: 4148, column: 9, scope: !6107)
!6110 = !DILocation(line: 4151, column: 18, scope: !1337)
!6111 = !DILocation(line: 4152, column: 51, scope: !1337)
!6112 = !DILocation(line: 4152, column: 5, scope: !1337)
!6113 = !DILocation(line: 4154, column: 5, scope: !1337)
!6114 = !DILocation(line: 4155, column: 12, scope: !1337)
!6115 = !DILocation(line: 4155, column: 5, scope: !1337)
!6116 = !DILocation(line: 4156, column: 1, scope: !1337)
!6117 = !DILocation(line: 4171, column: 22, scope: !1349)
!6118 = !DILocation(line: 4171, column: 38, scope: !1349)
!6119 = !DILocation(line: 4173, column: 5, scope: !1349)
!6120 = !DILocation(line: 4173, column: 9, scope: !1349)
!6121 = !DILocation(line: 4173, column: 20, scope: !1349)
!6122 = !DILocation(line: 4175, column: 34, scope: !6123)
!6123 = distinct !DILexicalBlock(scope: !1349, file: !616, line: 4175, column: 9)
!6124 = !DILocation(line: 4175, column: 10, scope: !6123)
!6125 = !DILocation(line: 4175, column: 9, scope: !1349)
!6126 = !DILocation(line: 4176, column: 9, scope: !6123)
!6127 = !DILocation(line: 4188, column: 7, scope: !1349)
!6128 = !DILocation(line: 4188, column: 28, scope: !1349)
!6129 = !DILocation(line: 4189, column: 18, scope: !1349)
!6130 = !DILocation(line: 4189, column: 13, scope: !1349)
!6131 = !DILocation(line: 4189, column: 11, scope: !1349)
!6132 = !DILocation(line: 4194, column: 9, scope: !6133)
!6133 = distinct !DILexicalBlock(scope: !1349, file: !616, line: 4194, column: 9)
!6134 = !DILocation(line: 4194, column: 15, scope: !6133)
!6135 = !DILocation(line: 4194, column: 21, scope: !6133)
!6136 = !DILocation(line: 4194, column: 26, scope: !6137)
!6137 = !DILexicalBlockFile(scope: !6133, file: !616, discriminator: 1)
!6138 = !DILocation(line: 4194, column: 25, scope: !6133)
!6139 = !DILocation(line: 4194, column: 47, scope: !6133)
!6140 = !DILocation(line: 4194, column: 9, scope: !1349)
!6141 = !DILocation(line: 4196, column: 16, scope: !6133)
!6142 = !DILocation(line: 4196, column: 9, scope: !6133)
!6143 = !DILocation(line: 4197, column: 35, scope: !1349)
!6144 = !DILocation(line: 4197, column: 28, scope: !1349)
!6145 = !DILocation(line: 4197, column: 12, scope: !1349)
!6146 = !DILocation(line: 4197, column: 5, scope: !1349)
!6147 = !DILocation(line: 4198, column: 1, scope: !1349)
!6148 = !DILocation(line: 4208, column: 29, scope: !1355)
!6149 = !DILocation(line: 4208, column: 45, scope: !1355)
!6150 = !DILocation(line: 4210, column: 5, scope: !1355)
!6151 = !DILocation(line: 4210, column: 9, scope: !1355)
!6152 = !DILocation(line: 4210, column: 16, scope: !1355)
!6153 = !DILocation(line: 4210, column: 21, scope: !1355)
!6154 = !DILocation(line: 4212, column: 34, scope: !6155)
!6155 = distinct !DILexicalBlock(scope: !1355, file: !616, line: 4212, column: 9)
!6156 = !DILocation(line: 4212, column: 10, scope: !6155)
!6157 = !DILocation(line: 4212, column: 9, scope: !1355)
!6158 = !DILocation(line: 4213, column: 9, scope: !6155)
!6159 = !DILocation(line: 4214, column: 7, scope: !1355)
!6160 = !DILocation(line: 4214, column: 28, scope: !1355)
!6161 = !DILocation(line: 4215, column: 26, scope: !1355)
!6162 = !DILocation(line: 4215, column: 33, scope: !1355)
!6163 = !DILocation(line: 4215, column: 14, scope: !1355)
!6164 = !DILocation(line: 4215, column: 12, scope: !1355)
!6165 = !DILocation(line: 4216, column: 11, scope: !6166)
!6166 = distinct !DILexicalBlock(scope: !1355, file: !616, line: 4216, column: 9)
!6167 = !DILocation(line: 4216, column: 10, scope: !6166)
!6168 = !DILocation(line: 4216, column: 32, scope: !6166)
!6169 = !DILocation(line: 4216, column: 9, scope: !1355)
!6170 = !DILocation(line: 4217, column: 16, scope: !6166)
!6171 = !DILocation(line: 4217, column: 9, scope: !6166)
!6172 = !DILocation(line: 4218, column: 34, scope: !1355)
!6173 = !DILocation(line: 4218, column: 28, scope: !1355)
!6174 = !DILocation(line: 4218, column: 12, scope: !1355)
!6175 = !DILocation(line: 4218, column: 5, scope: !1355)
!6176 = !DILocation(line: 4219, column: 1, scope: !1355)
!6177 = !DILocation(line: 4229, column: 29, scope: !1362)
!6178 = !DILocation(line: 4229, column: 45, scope: !1362)
!6179 = !DILocation(line: 4231, column: 5, scope: !1362)
!6180 = !DILocation(line: 4231, column: 9, scope: !1362)
!6181 = !DILocation(line: 4231, column: 16, scope: !1362)
!6182 = !DILocation(line: 4231, column: 21, scope: !1362)
!6183 = !DILocation(line: 4231, column: 27, scope: !1362)
!6184 = !DILocation(line: 4233, column: 34, scope: !6185)
!6185 = distinct !DILexicalBlock(scope: !1362, file: !616, line: 4233, column: 9)
!6186 = !DILocation(line: 4233, column: 10, scope: !6185)
!6187 = !DILocation(line: 4233, column: 9, scope: !1362)
!6188 = !DILocation(line: 4234, column: 9, scope: !6185)
!6189 = !DILocation(line: 4235, column: 26, scope: !1362)
!6190 = !DILocation(line: 4235, column: 33, scope: !1362)
!6191 = !DILocation(line: 4235, column: 38, scope: !1362)
!6192 = !DILocation(line: 4235, column: 14, scope: !1362)
!6193 = !DILocation(line: 4235, column: 12, scope: !1362)
!6194 = !DILocation(line: 4236, column: 9, scope: !6195)
!6195 = distinct !DILexicalBlock(scope: !1362, file: !616, line: 4236, column: 9)
!6196 = !DILocation(line: 4236, column: 16, scope: !6195)
!6197 = !DILocation(line: 4236, column: 9, scope: !1362)
!6198 = !DILocation(line: 4237, column: 16, scope: !6195)
!6199 = !DILocation(line: 4237, column: 9, scope: !6195)
!6200 = !DILocation(line: 4238, column: 58, scope: !1362)
!6201 = !DILocation(line: 4238, column: 5, scope: !1362)
!6202 = !DILocation(line: 4239, column: 1, scope: !1362)
!6203 = !DILocation(line: 7079, column: 26, scope: !1370)
!6204 = !DILocation(line: 7079, column: 42, scope: !1370)
!6205 = !DILocation(line: 7079, column: 58, scope: !1370)
!6206 = !DILocation(line: 7081, column: 5, scope: !1370)
!6207 = !DILocation(line: 7081, column: 12, scope: !1370)
!6208 = !DILocation(line: 7082, column: 5, scope: !1370)
!6209 = !DILocation(line: 7082, column: 9, scope: !1370)
!6210 = !DILocation(line: 7083, column: 5, scope: !1370)
!6211 = !DILocation(line: 7083, column: 10, scope: !1370)
!6212 = !DILocation(line: 7084, column: 5, scope: !1370)
!6213 = !DILocation(line: 7084, column: 13, scope: !1370)
!6214 = !DILocation(line: 7085, column: 5, scope: !1370)
!6215 = !DILocation(line: 7085, column: 15, scope: !1370)
!6216 = !DILocation(line: 7088, column: 5, scope: !1370)
!6217 = !DILocation(line: 7089, column: 10, scope: !1370)
!6218 = !DILocation(line: 7089, column: 24, scope: !1370)
!6219 = !DILocation(line: 7090, column: 45, scope: !6220)
!6220 = distinct !DILexicalBlock(scope: !1370, file: !616, line: 7090, column: 9)
!6221 = !DILocation(line: 7090, column: 51, scope: !6220)
!6222 = !DILocation(line: 7090, column: 10, scope: !6220)
!6223 = !DILocation(line: 7090, column: 9, scope: !1370)
!6224 = !DILocation(line: 7098, column: 9, scope: !6220)
!6225 = !DILocation(line: 7100, column: 7, scope: !1384)
!6226 = !DILocation(line: 7100, column: 22, scope: !1384)
!6227 = !DILocation(line: 7100, column: 37, scope: !1384)
!6228 = !DILocation(line: 7100, column: 35, scope: !1384)
!6229 = !DILocation(line: 7102, column: 9, scope: !6230)
!6230 = distinct !DILexicalBlock(scope: !1384, file: !616, line: 7102, column: 9)
!6231 = !DILocation(line: 7102, column: 16, scope: !6230)
!6232 = !DILocation(line: 7102, column: 9, scope: !1384)
!6233 = !DILocation(line: 7103, column: 29, scope: !6230)
!6234 = !DILocation(line: 7103, column: 42, scope: !6230)
!6235 = !DILocation(line: 7103, column: 50, scope: !6230)
!6236 = !DILocation(line: 7103, column: 18, scope: !6230)
!6237 = !DILocation(line: 7103, column: 16, scope: !6230)
!6238 = !DILocation(line: 7103, column: 9, scope: !6230)
!6239 = !DILocation(line: 7106, column: 32, scope: !6230)
!6240 = !DILocation(line: 7106, column: 40, scope: !6230)
!6241 = !DILocation(line: 7106, column: 18, scope: !6230)
!6242 = !DILocation(line: 7106, column: 16, scope: !6230)
!6243 = !DILocation(line: 7107, column: 26, scope: !1384)
!6244 = !DILocation(line: 7107, column: 5, scope: !1384)
!6245 = !DILocation(line: 7107, column: 34, scope: !1370)
!6246 = !DILocation(line: 7109, column: 9, scope: !6247)
!6247 = distinct !DILexicalBlock(scope: !1370, file: !616, line: 7109, column: 9)
!6248 = !DILocation(line: 7109, column: 16, scope: !6247)
!6249 = !DILocation(line: 7109, column: 9, scope: !1370)
!6250 = !DILocation(line: 7110, column: 24, scope: !6251)
!6251 = distinct !DILexicalBlock(scope: !6247, file: !616, line: 7109, column: 21)
!6252 = !DILocation(line: 7110, column: 22, scope: !6251)
!6253 = !DILocation(line: 7111, column: 9, scope: !6251)
!6254 = !DILocation(line: 7114, column: 31, scope: !6255)
!6255 = distinct !DILexicalBlock(scope: !1370, file: !616, line: 7114, column: 9)
!6256 = !{!5513, !3868, i64 56}
!6257 = !DILocation(line: 7114, column: 41, scope: !6255)
!6258 = !DILocation(line: 7114, column: 52, scope: !6255)
!6259 = !{!3897, !3894, i64 168}
!6260 = !DILocation(line: 7114, column: 61, scope: !6255)
!6261 = !DILocation(line: 7114, column: 78, scope: !6255)
!6262 = !DILocation(line: 7114, column: 9, scope: !1370)
!6263 = !DILocation(line: 7115, column: 57, scope: !6255)
!6264 = !DILocation(line: 7115, column: 65, scope: !6255)
!6265 = !DILocation(line: 7115, column: 24, scope: !6255)
!6266 = !DILocation(line: 7115, column: 22, scope: !6255)
!6267 = !DILocation(line: 7115, column: 9, scope: !6255)
!6268 = !DILocation(line: 7117, column: 50, scope: !6255)
!6269 = !DILocation(line: 7117, column: 58, scope: !6255)
!6270 = !DILocation(line: 7117, column: 24, scope: !6255)
!6271 = !DILocation(line: 7117, column: 22, scope: !6255)
!6272 = !DILocation(line: 7114, column: 82, scope: !6255)
!6273 = !DILocation(line: 7119, column: 5, scope: !1370)
!6274 = !DILocation(line: 7120, column: 12, scope: !1370)
!6275 = !DILocation(line: 7120, column: 5, scope: !1370)
!6276 = !DILocation(line: 7121, column: 1, scope: !1370)
!6277 = !DILocation(line: 4339, column: 24, scope: !1385)
!6278 = !DILocation(line: 4339, column: 40, scope: !1385)
!6279 = !DILocation(line: 4339, column: 56, scope: !1385)
!6280 = !DILocation(line: 4341, column: 28, scope: !1385)
!6281 = !DILocation(line: 4341, column: 34, scope: !1385)
!6282 = !DILocation(line: 4341, column: 12, scope: !1385)
!6283 = !DILocation(line: 4341, column: 5, scope: !1385)
!6284 = !DILocation(line: 4355, column: 25, scope: !1409)
!6285 = !DILocation(line: 4355, column: 41, scope: !1409)
!6286 = !DILocation(line: 4355, column: 57, scope: !1409)
!6287 = !DILocation(line: 4357, column: 28, scope: !1409)
!6288 = !DILocation(line: 4357, column: 34, scope: !1409)
!6289 = !DILocation(line: 4357, column: 12, scope: !1409)
!6290 = !DILocation(line: 4357, column: 5, scope: !1409)
!6291 = !DILocation(line: 4370, column: 23, scope: !1414)
!6292 = !DILocation(line: 4370, column: 39, scope: !1414)
!6293 = !DILocation(line: 4370, column: 55, scope: !1414)
!6294 = !DILocation(line: 4372, column: 5, scope: !1414)
!6295 = !DILocation(line: 4372, column: 12, scope: !1414)
!6296 = !DILocation(line: 4373, column: 5, scope: !1414)
!6297 = !DILocation(line: 4373, column: 9, scope: !1414)
!6298 = !DILocation(line: 4375, column: 5, scope: !1414)
!6299 = !DILocation(line: 4375, column: 9, scope: !1414)
!6300 = !DILocation(line: 4376, column: 5, scope: !1414)
!6301 = !DILocation(line: 4376, column: 15, scope: !1414)
!6302 = !DILocation(line: 4378, column: 5, scope: !1414)
!6303 = !DILocation(line: 4379, column: 10, scope: !1414)
!6304 = !DILocation(line: 4379, column: 24, scope: !1414)
!6305 = !DILocation(line: 4380, column: 45, scope: !6306)
!6306 = distinct !DILexicalBlock(scope: !1414, file: !616, line: 4380, column: 9)
!6307 = !DILocation(line: 4380, column: 51, scope: !6306)
!6308 = !DILocation(line: 4380, column: 10, scope: !6306)
!6309 = !DILocation(line: 4380, column: 9, scope: !1414)
!6310 = !DILocation(line: 4388, column: 9, scope: !6306)
!6311 = !DILocation(line: 4390, column: 7, scope: !1424)
!6312 = !DILocation(line: 4390, column: 22, scope: !1424)
!6313 = !DILocation(line: 4390, column: 37, scope: !1424)
!6314 = !DILocation(line: 4390, column: 35, scope: !1424)
!6315 = !DILocation(line: 4399, column: 9, scope: !6316)
!6316 = distinct !DILexicalBlock(scope: !1424, file: !616, line: 4399, column: 9)
!6317 = !DILocation(line: 4399, column: 16, scope: !6316)
!6318 = !DILocation(line: 4399, column: 9, scope: !1424)
!6319 = !DILocation(line: 4400, column: 27, scope: !6316)
!6320 = !DILocation(line: 4400, column: 40, scope: !6316)
!6321 = !DILocation(line: 4400, column: 18, scope: !6316)
!6322 = !DILocation(line: 4400, column: 16, scope: !6316)
!6323 = !DILocation(line: 4400, column: 9, scope: !6316)
!6324 = !DILocation(line: 4403, column: 29, scope: !6316)
!6325 = !DILocation(line: 4403, column: 18, scope: !6316)
!6326 = !DILocation(line: 4403, column: 16, scope: !6316)
!6327 = !DILocation(line: 4405, column: 26, scope: !1424)
!6328 = !DILocation(line: 4405, column: 5, scope: !1424)
!6329 = !DILocation(line: 4405, column: 34, scope: !1414)
!6330 = !DILocation(line: 4407, column: 9, scope: !6331)
!6331 = distinct !DILexicalBlock(scope: !1414, file: !616, line: 4407, column: 9)
!6332 = !DILocation(line: 4407, column: 9, scope: !1414)
!6333 = !DILocation(line: 4408, column: 24, scope: !6334)
!6334 = distinct !DILexicalBlock(scope: !6331, file: !616, line: 4407, column: 17)
!6335 = !DILocation(line: 4408, column: 22, scope: !6334)
!6336 = !DILocation(line: 4409, column: 9, scope: !6334)
!6337 = !DILocation(line: 4412, column: 18, scope: !1414)
!6338 = !DILocation(line: 4413, column: 51, scope: !1414)
!6339 = !DILocation(line: 4413, column: 5, scope: !1414)
!6340 = !DILocation(line: 4416, column: 5, scope: !1414)
!6341 = !DILocation(line: 4417, column: 12, scope: !1414)
!6342 = !DILocation(line: 4417, column: 5, scope: !1414)
!6343 = !DILocation(line: 4418, column: 1, scope: !1414)
!6344 = !DILocation(line: 2139, column: 28, scope: !1425)
!6345 = !DILocation(line: 2139, column: 44, scope: !1425)
!6346 = !DILocation(line: 2141, column: 5, scope: !1425)
!6347 = !DILocation(line: 2141, column: 9, scope: !1425)
!6348 = !DILocation(line: 2142, column: 34, scope: !6349)
!6349 = distinct !DILexicalBlock(scope: !1425, file: !616, line: 2142, column: 9)
!6350 = !DILocation(line: 2142, column: 10, scope: !6349)
!6351 = !DILocation(line: 2142, column: 9, scope: !1425)
!6352 = !DILocation(line: 2143, column: 9, scope: !6349)
!6353 = !DILocation(line: 2144, column: 22, scope: !6354)
!6354 = distinct !DILexicalBlock(scope: !1425, file: !616, line: 2144, column: 9)
!6355 = !DILocation(line: 2144, column: 9, scope: !6354)
!6356 = !DILocation(line: 2144, column: 9, scope: !1425)
!6357 = !DILocation(line: 2147, column: 9, scope: !6354)
!6358 = !DILocation(line: 2148, column: 9, scope: !6359)
!6359 = distinct !DILexicalBlock(scope: !1425, file: !616, line: 2148, column: 9)
!6360 = !DILocation(line: 2148, column: 16, scope: !6359)
!6361 = !DILocation(line: 2148, column: 9, scope: !1425)
!6362 = !DILocation(line: 2150, column: 32, scope: !6359)
!6363 = !DILocation(line: 2150, column: 16, scope: !6359)
!6364 = !DILocation(line: 2150, column: 9, scope: !6359)
!6365 = !DILocation(line: 2151, column: 25, scope: !1425)
!6366 = !DILocation(line: 2151, column: 23, scope: !1425)
!6367 = !DILocation(line: 2152, column: 51, scope: !1425)
!6368 = !DILocation(line: 2153, column: 5, scope: !1425)
!6369 = !DILocation(line: 2154, column: 1, scope: !1425)
!6370 = !DILocation(line: 7289, column: 25, scope: !1430)
!6371 = !DILocation(line: 7289, column: 41, scope: !1430)
!6372 = !DILocation(line: 7289, column: 57, scope: !1430)
!6373 = !DILocation(line: 7291, column: 5, scope: !1430)
!6374 = !DILocation(line: 7291, column: 12, scope: !1430)
!6375 = !DILocation(line: 7292, column: 5, scope: !1430)
!6376 = !DILocation(line: 7292, column: 12, scope: !1430)
!6377 = !DILocation(line: 7293, column: 5, scope: !1430)
!6378 = !DILocation(line: 7293, column: 9, scope: !1430)
!6379 = !DILocation(line: 7294, column: 5, scope: !1430)
!6380 = !DILocation(line: 7294, column: 9, scope: !1430)
!6381 = !DILocation(line: 7297, column: 5, scope: !1430)
!6382 = !DILocation(line: 7297, column: 15, scope: !1430)
!6383 = !DILocation(line: 7301, column: 5, scope: !1430)
!6384 = !DILocation(line: 7301, column: 9, scope: !1430)
!6385 = !DILocation(line: 7304, column: 5, scope: !1430)
!6386 = !DILocation(line: 7305, column: 9, scope: !1430)
!6387 = !DILocation(line: 7305, column: 23, scope: !1430)
!6388 = !DILocation(line: 7306, column: 9, scope: !1430)
!6389 = !DILocation(line: 7306, column: 23, scope: !1430)
!6390 = !{!5513, !3868, i64 8}
!6391 = !DILocation(line: 7307, column: 5, scope: !1430)
!6392 = !DILocation(line: 7308, column: 9, scope: !1430)
!6393 = !DILocation(line: 7308, column: 23, scope: !1430)
!6394 = !DILocation(line: 7309, column: 9, scope: !1430)
!6395 = !DILocation(line: 7309, column: 23, scope: !1430)
!6396 = !DILocation(line: 7323, column: 45, scope: !6397)
!6397 = distinct !DILexicalBlock(scope: !1430, file: !616, line: 7323, column: 9)
!6398 = !DILocation(line: 7323, column: 51, scope: !6397)
!6399 = !DILocation(line: 7323, column: 10, scope: !6397)
!6400 = !DILocation(line: 7323, column: 9, scope: !1430)
!6401 = !DILocation(line: 7334, column: 9, scope: !6397)
!6402 = !DILocation(line: 7336, column: 14, scope: !6403)
!6403 = distinct !DILexicalBlock(scope: !1430, file: !616, line: 7336, column: 9)
!6404 = !DILocation(line: 7336, column: 10, scope: !6403)
!6405 = !DILocation(line: 7336, column: 21, scope: !6403)
!6406 = !DILocation(line: 7336, column: 28, scope: !6407)
!6407 = !DILexicalBlockFile(scope: !6403, file: !616, discriminator: 1)
!6408 = !DILocation(line: 7336, column: 24, scope: !6403)
!6409 = !DILocation(line: 7336, column: 34, scope: !6403)
!6410 = !DILocation(line: 7336, column: 42, scope: !6411)
!6411 = !DILexicalBlockFile(scope: !6412, file: !616, discriminator: 3)
!6412 = !DILexicalBlockFile(scope: !6403, file: !616, discriminator: 2)
!6413 = !DILocation(line: 7336, column: 38, scope: !6403)
!6414 = !DILocation(line: 7336, column: 47, scope: !6403)
!6415 = !DILocation(line: 7336, column: 54, scope: !6416)
!6416 = !DILexicalBlockFile(scope: !6403, file: !616, discriminator: 4)
!6417 = !DILocation(line: 7336, column: 50, scope: !6403)
!6418 = !DILocation(line: 7336, column: 9, scope: !1430)
!6419 = !DILocation(line: 7337, column: 25, scope: !6420)
!6420 = distinct !DILexicalBlock(scope: !6403, file: !616, line: 7336, column: 63)
!6421 = !DILocation(line: 7337, column: 9, scope: !6420)
!6422 = !DILocation(line: 7339, column: 22, scope: !6420)
!6423 = !DILocation(line: 7340, column: 9, scope: !6420)
!6424 = !DILocation(line: 7367, column: 7, scope: !1442)
!6425 = !DILocation(line: 7367, column: 22, scope: !1442)
!6426 = !DILocation(line: 7367, column: 37, scope: !1442)
!6427 = !DILocation(line: 7367, column: 35, scope: !1442)
!6428 = !DILocation(line: 7369, column: 9, scope: !6429)
!6429 = distinct !DILexicalBlock(scope: !1442, file: !616, line: 7369, column: 9)
!6430 = !DILocation(line: 7369, column: 16, scope: !6429)
!6431 = !DILocation(line: 7369, column: 9, scope: !1442)
!6432 = !DILocation(line: 7370, column: 32, scope: !6429)
!6433 = !DILocation(line: 7370, column: 40, scope: !6429)
!6434 = !DILocation(line: 7370, column: 52, scope: !6429)
!6435 = !DILocation(line: 7370, column: 18, scope: !6429)
!6436 = !DILocation(line: 7370, column: 16, scope: !6429)
!6437 = !DILocation(line: 7370, column: 9, scope: !6429)
!6438 = !DILocation(line: 7373, column: 30, scope: !6429)
!6439 = !DILocation(line: 7373, column: 42, scope: !6429)
!6440 = !DILocation(line: 7373, column: 18, scope: !6429)
!6441 = !DILocation(line: 7373, column: 16, scope: !6429)
!6442 = !DILocation(line: 7374, column: 26, scope: !1442)
!6443 = !DILocation(line: 7374, column: 5, scope: !1442)
!6444 = !DILocation(line: 7374, column: 34, scope: !1430)
!6445 = !DILocation(line: 7376, column: 9, scope: !6446)
!6446 = distinct !DILexicalBlock(scope: !1430, file: !616, line: 7376, column: 9)
!6447 = !DILocation(line: 7376, column: 9, scope: !1430)
!6448 = !DILocation(line: 7377, column: 24, scope: !6449)
!6449 = distinct !DILexicalBlock(scope: !6446, file: !616, line: 7376, column: 17)
!6450 = !DILocation(line: 7377, column: 22, scope: !6449)
!6451 = !DILocation(line: 7378, column: 9, scope: !6449)
!6452 = !DILocation(line: 7382, column: 18, scope: !1430)
!6453 = !DILocation(line: 7383, column: 51, scope: !1430)
!6454 = !DILocation(line: 7384, column: 5, scope: !1430)
!6455 = !DILocation(line: 7386, column: 5, scope: !1430)
!6456 = !DILocation(line: 7387, column: 5, scope: !1430)
!6457 = !DILocation(line: 7388, column: 12, scope: !1430)
!6458 = !DILocation(line: 7388, column: 5, scope: !1430)
!6459 = !DILocation(line: 7389, column: 1, scope: !1430)
!6460 = !DILocation(line: 4427, column: 24, scope: !1443)
!6461 = !DILocation(line: 4427, column: 40, scope: !1443)
!6462 = !DILocation(line: 4429, column: 5, scope: !1443)
!6463 = !DILocation(line: 4429, column: 10, scope: !1443)
!6464 = !DILocation(line: 4439, column: 5, scope: !1443)
!6465 = !DILocation(line: 4439, column: 15, scope: !1443)
!6466 = !DILocation(line: 4440, column: 5, scope: !1443)
!6467 = !DILocation(line: 4440, column: 11, scope: !1443)
!6468 = !DILocation(line: 4441, column: 34, scope: !6469)
!6469 = distinct !DILexicalBlock(scope: !1443, file: !616, line: 4441, column: 9)
!6470 = !DILocation(line: 4441, column: 10, scope: !6469)
!6471 = !DILocation(line: 4441, column: 9, scope: !1443)
!6472 = !DILocation(line: 4443, column: 9, scope: !6469)
!6473 = !DILocation(line: 4445, column: 32, scope: !1443)
!6474 = !DILocation(line: 4445, column: 15, scope: !1443)
!6475 = !DILocation(line: 4445, column: 13, scope: !1443)
!6476 = !DILocation(line: 4446, column: 7, scope: !1451)
!6477 = !DILocation(line: 4446, column: 22, scope: !1451)
!6478 = !DILocation(line: 4446, column: 37, scope: !1451)
!6479 = !DILocation(line: 4446, column: 35, scope: !1451)
!6480 = !DILocation(line: 4447, column: 18, scope: !1451)
!6481 = !DILocation(line: 4447, column: 11, scope: !1451)
!6482 = !DILocation(line: 4447, column: 9, scope: !1451)
!6483 = !DILocation(line: 4448, column: 26, scope: !1451)
!6484 = !DILocation(line: 4448, column: 5, scope: !1451)
!6485 = !DILocation(line: 4448, column: 34, scope: !1443)
!6486 = !DILocation(line: 4449, column: 5, scope: !1443)
!6487 = !DILocation(line: 4449, column: 10, scope: !6488)
!6488 = !DILexicalBlockFile(scope: !1453, file: !616, discriminator: 1)
!6489 = !DILocation(line: 4449, column: 20, scope: !1453)
!6490 = !DILocation(line: 4449, column: 50, scope: !1453)
!6491 = !DILocation(line: 4449, column: 72, scope: !6492)
!6492 = distinct !DILexicalBlock(scope: !1453, file: !616, line: 4449, column: 69)
!6493 = !DILocation(line: 4449, column: 89, scope: !6492)
!6494 = !DILocation(line: 4449, column: 69, scope: !6492)
!6495 = !DILocation(line: 4449, column: 99, scope: !6492)
!6496 = !DILocation(line: 4449, column: 69, scope: !1453)
!6497 = !DILocation(line: 4449, column: 69, scope: !6498)
!6498 = !DILexicalBlockFile(scope: !1453, file: !616, discriminator: 2)
!6499 = !DILocation(line: 4449, column: 130, scope: !6500)
!6500 = !DILexicalBlockFile(scope: !6492, file: !616, discriminator: 3)
!6501 = !DILocation(line: 4449, column: 148, scope: !6492)
!6502 = !DILocation(line: 4449, column: 158, scope: !6492)
!6503 = !DILocation(line: 4449, column: 183, scope: !6492)
!6504 = !DILocation(line: 4449, column: 114, scope: !6492)
!6505 = !DILocation(line: 4449, column: 202, scope: !6506)
!6506 = !DILexicalBlockFile(scope: !1443, file: !616, discriminator: 4)
!6507 = !DILocation(line: 4449, column: 202, scope: !1453)
!6508 = !DILocation(line: 4449, column: 202, scope: !6509)
!6509 = !DILexicalBlockFile(scope: !1453, file: !616, discriminator: 5)
!6510 = !DILocation(line: 4451, column: 28, scope: !1443)
!6511 = !DILocation(line: 4451, column: 12, scope: !1443)
!6512 = !DILocation(line: 4451, column: 5, scope: !1443)
!6513 = !DILocation(line: 4452, column: 1, scope: !1443)
!6514 = !DILocation(line: 4461, column: 23, scope: !1454)
!6515 = !DILocation(line: 4461, column: 39, scope: !1454)
!6516 = !DILocation(line: 4463, column: 5, scope: !1454)
!6517 = !DILocation(line: 4463, column: 9, scope: !1454)
!6518 = !DILocation(line: 4464, column: 34, scope: !6519)
!6519 = distinct !DILexicalBlock(scope: !1454, file: !616, line: 4464, column: 9)
!6520 = !DILocation(line: 4464, column: 10, scope: !6519)
!6521 = !DILocation(line: 4464, column: 9, scope: !1454)
!6522 = !DILocation(line: 4465, column: 9, scope: !6519)
!6523 = !DILocation(line: 4466, column: 20, scope: !1454)
!6524 = !DILocation(line: 4466, column: 14, scope: !1454)
!6525 = !DILocation(line: 4466, column: 7, scope: !1454)
!6526 = !DILocation(line: 4467, column: 9, scope: !6527)
!6527 = distinct !DILexicalBlock(scope: !1454, file: !616, line: 4467, column: 9)
!6528 = !DILocation(line: 4467, column: 11, scope: !6527)
!6529 = !DILocation(line: 4467, column: 9, scope: !1454)
!6530 = !DILocation(line: 4468, column: 16, scope: !6527)
!6531 = !DILocation(line: 4468, column: 9, scope: !6527)
!6532 = !DILocation(line: 4469, column: 34, scope: !1454)
!6533 = !DILocation(line: 4469, column: 28, scope: !1454)
!6534 = !DILocation(line: 4469, column: 12, scope: !1454)
!6535 = !DILocation(line: 4469, column: 5, scope: !1454)
!6536 = !DILocation(line: 4470, column: 1, scope: !1454)
!6537 = !DILocation(line: 4613, column: 23, scope: !1459)
!6538 = !DILocation(line: 4613, column: 39, scope: !1459)
!6539 = !DILocation(line: 4615, column: 5, scope: !1459)
!6540 = !DILocation(line: 4615, column: 20, scope: !1459)
!6541 = !DILocation(line: 4616, column: 5, scope: !1459)
!6542 = !DILocation(line: 4616, column: 9, scope: !1459)
!6543 = !DILocation(line: 4617, column: 5, scope: !1459)
!6544 = !DILocation(line: 4617, column: 15, scope: !1459)
!6545 = !DILocation(line: 4619, column: 7, scope: !1479)
!6546 = !DILocation(line: 4619, column: 22, scope: !1479)
!6547 = !DILocation(line: 4619, column: 37, scope: !1479)
!6548 = !DILocation(line: 4619, column: 35, scope: !1479)
!6549 = !DILocation(line: 4620, column: 11, scope: !1479)
!6550 = !DILocation(line: 4620, column: 9, scope: !1479)
!6551 = !DILocation(line: 4621, column: 26, scope: !1479)
!6552 = !DILocation(line: 4621, column: 5, scope: !1479)
!6553 = !DILocation(line: 4621, column: 34, scope: !1459)
!6554 = !DILocation(line: 4622, column: 9, scope: !6555)
!6555 = distinct !DILexicalBlock(scope: !1459, file: !616, line: 4622, column: 9)
!6556 = !DILocation(line: 4622, column: 13, scope: !6555)
!6557 = !DILocation(line: 4622, column: 9, scope: !1459)
!6558 = !DILocation(line: 4623, column: 16, scope: !6555)
!6559 = !DILocation(line: 4623, column: 9, scope: !6555)
!6560 = !DILocation(line: 4625, column: 13, scope: !1459)
!6561 = !DILocation(line: 4625, column: 11, scope: !1459)
!6562 = !DILocation(line: 4626, column: 9, scope: !6563)
!6563 = distinct !DILexicalBlock(scope: !1459, file: !616, line: 4626, column: 9)
!6564 = !DILocation(line: 4626, column: 15, scope: !6563)
!6565 = !DILocation(line: 4626, column: 9, scope: !1459)
!6566 = !DILocation(line: 4627, column: 9, scope: !6563)
!6567 = !DILocation(line: 4639, column: 7, scope: !1481)
!6568 = !DILocation(line: 4639, column: 17, scope: !1481)
!6569 = !DILocation(line: 4639, column: 49, scope: !1481)
!6570 = !DILocation(line: 4639, column: 47, scope: !1481)
!6571 = !DILocation(line: 4639, column: 21, scope: !1481)
!6572 = !DILocation(line: 4639, column: 64, scope: !1485)
!6573 = !DILocation(line: 4639, column: 63, scope: !1481)
!6574 = !DILocation(line: 4639, column: 69, scope: !6575)
!6575 = !DILexicalBlockFile(scope: !1484, file: !616, discriminator: 2)
!6576 = !DILocation(line: 4639, column: 74, scope: !6577)
!6577 = !DILexicalBlockFile(scope: !1483, file: !616, discriminator: 3)
!6578 = !DILocation(line: 4639, column: 84, scope: !1483)
!6579 = !DILocation(line: 4639, column: 114, scope: !1483)
!6580 = !DILocation(line: 4639, column: 130, scope: !6581)
!6581 = distinct !DILexicalBlock(scope: !1483, file: !616, line: 4639, column: 127)
!6582 = !DILocation(line: 4639, column: 147, scope: !6581)
!6583 = !DILocation(line: 4639, column: 127, scope: !6581)
!6584 = !DILocation(line: 4639, column: 157, scope: !6581)
!6585 = !DILocation(line: 4639, column: 127, scope: !1483)
!6586 = !DILocation(line: 4639, column: 127, scope: !6587)
!6587 = !DILexicalBlockFile(scope: !1483, file: !616, discriminator: 4)
!6588 = !DILocation(line: 4639, column: 188, scope: !6589)
!6589 = !DILexicalBlockFile(scope: !6581, file: !616, discriminator: 5)
!6590 = !DILocation(line: 4639, column: 206, scope: !6581)
!6591 = !DILocation(line: 4639, column: 216, scope: !6581)
!6592 = !DILocation(line: 4639, column: 241, scope: !6581)
!6593 = !DILocation(line: 4639, column: 172, scope: !6581)
!6594 = !DILocation(line: 4639, column: 260, scope: !6595)
!6595 = !DILexicalBlockFile(scope: !1484, file: !616, discriminator: 6)
!6596 = !DILocation(line: 4639, column: 260, scope: !1483)
!6597 = !DILocation(line: 4639, column: 260, scope: !6598)
!6598 = !DILexicalBlockFile(scope: !1483, file: !616, discriminator: 7)
!6599 = !DILocation(line: 4639, column: 273, scope: !6600)
!6600 = !DILexicalBlockFile(scope: !1484, file: !616, discriminator: 8)
!6601 = !DILocation(line: 4639, column: 273, scope: !1484)
!6602 = !DILocation(line: 4639, column: 336, scope: !6603)
!6603 = !DILexicalBlockFile(scope: !1481, file: !616, discriminator: 1)
!6604 = !DILocation(line: 4639, column: 314, scope: !1481)
!6605 = !DILocation(line: 4639, column: 296, scope: !1481)
!6606 = !DILocation(line: 4639, column: 323, scope: !1481)
!6607 = !DILocation(line: 4639, column: 295, scope: !1481)
!6608 = !DILocation(line: 4639, column: 334, scope: !1481)
!6609 = !DILocation(line: 4639, column: 340, scope: !1459)
!6610 = !DILocation(line: 4639, column: 340, scope: !6611)
!6611 = !DILexicalBlockFile(scope: !6612, file: !616, discriminator: 10)
!6612 = !DILexicalBlockFile(scope: !1459, file: !616, discriminator: 9)
!6613 = !DILocation(line: 4640, column: 7, scope: !1487)
!6614 = !DILocation(line: 4640, column: 17, scope: !1487)
!6615 = !DILocation(line: 4640, column: 49, scope: !1487)
!6616 = !DILocation(line: 4640, column: 47, scope: !1487)
!6617 = !DILocation(line: 4640, column: 21, scope: !1487)
!6618 = !DILocation(line: 4640, column: 65, scope: !1491)
!6619 = !DILocation(line: 4640, column: 64, scope: !1487)
!6620 = !DILocation(line: 4640, column: 70, scope: !6621)
!6621 = !DILexicalBlockFile(scope: !1490, file: !616, discriminator: 2)
!6622 = !DILocation(line: 4640, column: 75, scope: !6623)
!6623 = !DILexicalBlockFile(scope: !1489, file: !616, discriminator: 3)
!6624 = !DILocation(line: 4640, column: 85, scope: !1489)
!6625 = !DILocation(line: 4640, column: 115, scope: !1489)
!6626 = !DILocation(line: 4640, column: 131, scope: !6627)
!6627 = distinct !DILexicalBlock(scope: !1489, file: !616, line: 4640, column: 128)
!6628 = !DILocation(line: 4640, column: 148, scope: !6627)
!6629 = !DILocation(line: 4640, column: 128, scope: !6627)
!6630 = !DILocation(line: 4640, column: 158, scope: !6627)
!6631 = !DILocation(line: 4640, column: 128, scope: !1489)
!6632 = !DILocation(line: 4640, column: 128, scope: !6633)
!6633 = !DILexicalBlockFile(scope: !1489, file: !616, discriminator: 4)
!6634 = !DILocation(line: 4640, column: 189, scope: !6635)
!6635 = !DILexicalBlockFile(scope: !6627, file: !616, discriminator: 5)
!6636 = !DILocation(line: 4640, column: 207, scope: !6627)
!6637 = !DILocation(line: 4640, column: 217, scope: !6627)
!6638 = !DILocation(line: 4640, column: 242, scope: !6627)
!6639 = !DILocation(line: 4640, column: 173, scope: !6627)
!6640 = !DILocation(line: 4640, column: 261, scope: !6641)
!6641 = !DILexicalBlockFile(scope: !1490, file: !616, discriminator: 6)
!6642 = !DILocation(line: 4640, column: 261, scope: !1489)
!6643 = !DILocation(line: 4640, column: 261, scope: !6644)
!6644 = !DILexicalBlockFile(scope: !1489, file: !616, discriminator: 7)
!6645 = !DILocation(line: 4640, column: 274, scope: !6646)
!6646 = !DILexicalBlockFile(scope: !1490, file: !616, discriminator: 8)
!6647 = !DILocation(line: 4640, column: 274, scope: !1490)
!6648 = !DILocation(line: 4640, column: 337, scope: !6649)
!6649 = !DILexicalBlockFile(scope: !1487, file: !616, discriminator: 1)
!6650 = !DILocation(line: 4640, column: 315, scope: !1487)
!6651 = !DILocation(line: 4640, column: 297, scope: !1487)
!6652 = !DILocation(line: 4640, column: 324, scope: !1487)
!6653 = !DILocation(line: 4640, column: 296, scope: !1487)
!6654 = !DILocation(line: 4640, column: 335, scope: !1487)
!6655 = !DILocation(line: 4640, column: 341, scope: !1459)
!6656 = !DILocation(line: 4640, column: 341, scope: !6611)
!6657 = !DILocation(line: 4641, column: 7, scope: !1493)
!6658 = !DILocation(line: 4641, column: 17, scope: !1493)
!6659 = !DILocation(line: 4641, column: 49, scope: !1493)
!6660 = !DILocation(line: 4641, column: 47, scope: !1493)
!6661 = !DILocation(line: 4641, column: 21, scope: !1493)
!6662 = !DILocation(line: 4641, column: 64, scope: !1497)
!6663 = !DILocation(line: 4641, column: 63, scope: !1493)
!6664 = !DILocation(line: 4641, column: 69, scope: !6665)
!6665 = !DILexicalBlockFile(scope: !1496, file: !616, discriminator: 2)
!6666 = !DILocation(line: 4641, column: 74, scope: !6667)
!6667 = !DILexicalBlockFile(scope: !1495, file: !616, discriminator: 3)
!6668 = !DILocation(line: 4641, column: 84, scope: !1495)
!6669 = !DILocation(line: 4641, column: 114, scope: !1495)
!6670 = !DILocation(line: 4641, column: 130, scope: !6671)
!6671 = distinct !DILexicalBlock(scope: !1495, file: !616, line: 4641, column: 127)
!6672 = !DILocation(line: 4641, column: 147, scope: !6671)
!6673 = !DILocation(line: 4641, column: 127, scope: !6671)
!6674 = !DILocation(line: 4641, column: 157, scope: !6671)
!6675 = !DILocation(line: 4641, column: 127, scope: !1495)
!6676 = !DILocation(line: 4641, column: 127, scope: !6677)
!6677 = !DILexicalBlockFile(scope: !1495, file: !616, discriminator: 4)
!6678 = !DILocation(line: 4641, column: 188, scope: !6679)
!6679 = !DILexicalBlockFile(scope: !6671, file: !616, discriminator: 5)
!6680 = !DILocation(line: 4641, column: 206, scope: !6671)
!6681 = !DILocation(line: 4641, column: 216, scope: !6671)
!6682 = !DILocation(line: 4641, column: 241, scope: !6671)
!6683 = !DILocation(line: 4641, column: 172, scope: !6671)
!6684 = !DILocation(line: 4641, column: 260, scope: !6685)
!6685 = !DILexicalBlockFile(scope: !1496, file: !616, discriminator: 6)
!6686 = !DILocation(line: 4641, column: 260, scope: !1495)
!6687 = !DILocation(line: 4641, column: 260, scope: !6688)
!6688 = !DILexicalBlockFile(scope: !1495, file: !616, discriminator: 7)
!6689 = !DILocation(line: 4641, column: 273, scope: !6690)
!6690 = !DILexicalBlockFile(scope: !1496, file: !616, discriminator: 8)
!6691 = !DILocation(line: 4641, column: 273, scope: !1496)
!6692 = !DILocation(line: 4641, column: 336, scope: !6693)
!6693 = !DILexicalBlockFile(scope: !1493, file: !616, discriminator: 1)
!6694 = !DILocation(line: 4641, column: 314, scope: !1493)
!6695 = !DILocation(line: 4641, column: 296, scope: !1493)
!6696 = !DILocation(line: 4641, column: 323, scope: !1493)
!6697 = !DILocation(line: 4641, column: 295, scope: !1493)
!6698 = !DILocation(line: 4641, column: 334, scope: !1493)
!6699 = !DILocation(line: 4641, column: 340, scope: !1459)
!6700 = !DILocation(line: 4641, column: 340, scope: !6611)
!6701 = !DILocation(line: 4642, column: 7, scope: !1499)
!6702 = !DILocation(line: 4642, column: 17, scope: !1499)
!6703 = !DILocation(line: 4642, column: 49, scope: !1499)
!6704 = !DILocation(line: 4642, column: 47, scope: !1499)
!6705 = !DILocation(line: 4642, column: 21, scope: !1499)
!6706 = !DILocation(line: 4642, column: 64, scope: !1503)
!6707 = !DILocation(line: 4642, column: 63, scope: !1499)
!6708 = !DILocation(line: 4642, column: 69, scope: !6709)
!6709 = !DILexicalBlockFile(scope: !1502, file: !616, discriminator: 2)
!6710 = !DILocation(line: 4642, column: 74, scope: !6711)
!6711 = !DILexicalBlockFile(scope: !1501, file: !616, discriminator: 3)
!6712 = !DILocation(line: 4642, column: 84, scope: !1501)
!6713 = !DILocation(line: 4642, column: 114, scope: !1501)
!6714 = !DILocation(line: 4642, column: 130, scope: !6715)
!6715 = distinct !DILexicalBlock(scope: !1501, file: !616, line: 4642, column: 127)
!6716 = !DILocation(line: 4642, column: 147, scope: !6715)
!6717 = !DILocation(line: 4642, column: 127, scope: !6715)
!6718 = !DILocation(line: 4642, column: 157, scope: !6715)
!6719 = !DILocation(line: 4642, column: 127, scope: !1501)
!6720 = !DILocation(line: 4642, column: 127, scope: !6721)
!6721 = !DILexicalBlockFile(scope: !1501, file: !616, discriminator: 4)
!6722 = !DILocation(line: 4642, column: 188, scope: !6723)
!6723 = !DILexicalBlockFile(scope: !6715, file: !616, discriminator: 5)
!6724 = !DILocation(line: 4642, column: 206, scope: !6715)
!6725 = !DILocation(line: 4642, column: 216, scope: !6715)
!6726 = !DILocation(line: 4642, column: 241, scope: !6715)
!6727 = !DILocation(line: 4642, column: 172, scope: !6715)
!6728 = !DILocation(line: 4642, column: 260, scope: !6729)
!6729 = !DILexicalBlockFile(scope: !1502, file: !616, discriminator: 6)
!6730 = !DILocation(line: 4642, column: 260, scope: !1501)
!6731 = !DILocation(line: 4642, column: 260, scope: !6732)
!6732 = !DILexicalBlockFile(scope: !1501, file: !616, discriminator: 7)
!6733 = !DILocation(line: 4642, column: 273, scope: !6734)
!6734 = !DILexicalBlockFile(scope: !1502, file: !616, discriminator: 8)
!6735 = !DILocation(line: 4642, column: 273, scope: !1502)
!6736 = !DILocation(line: 4642, column: 336, scope: !6737)
!6737 = !DILexicalBlockFile(scope: !1499, file: !616, discriminator: 1)
!6738 = !DILocation(line: 4642, column: 314, scope: !1499)
!6739 = !DILocation(line: 4642, column: 296, scope: !1499)
!6740 = !DILocation(line: 4642, column: 323, scope: !1499)
!6741 = !DILocation(line: 4642, column: 295, scope: !1499)
!6742 = !DILocation(line: 4642, column: 334, scope: !1499)
!6743 = !DILocation(line: 4642, column: 340, scope: !1459)
!6744 = !DILocation(line: 4642, column: 340, scope: !6611)
!6745 = !DILocation(line: 4643, column: 7, scope: !1505)
!6746 = !DILocation(line: 4643, column: 17, scope: !1505)
!6747 = !DILocation(line: 4643, column: 49, scope: !1505)
!6748 = !DILocation(line: 4643, column: 47, scope: !1505)
!6749 = !DILocation(line: 4643, column: 21, scope: !1505)
!6750 = !DILocation(line: 4643, column: 64, scope: !1509)
!6751 = !DILocation(line: 4643, column: 63, scope: !1505)
!6752 = !DILocation(line: 4643, column: 69, scope: !6753)
!6753 = !DILexicalBlockFile(scope: !1508, file: !616, discriminator: 2)
!6754 = !DILocation(line: 4643, column: 74, scope: !6755)
!6755 = !DILexicalBlockFile(scope: !1507, file: !616, discriminator: 3)
!6756 = !DILocation(line: 4643, column: 84, scope: !1507)
!6757 = !DILocation(line: 4643, column: 114, scope: !1507)
!6758 = !DILocation(line: 4643, column: 130, scope: !6759)
!6759 = distinct !DILexicalBlock(scope: !1507, file: !616, line: 4643, column: 127)
!6760 = !DILocation(line: 4643, column: 147, scope: !6759)
!6761 = !DILocation(line: 4643, column: 127, scope: !6759)
!6762 = !DILocation(line: 4643, column: 157, scope: !6759)
!6763 = !DILocation(line: 4643, column: 127, scope: !1507)
!6764 = !DILocation(line: 4643, column: 127, scope: !6765)
!6765 = !DILexicalBlockFile(scope: !1507, file: !616, discriminator: 4)
!6766 = !DILocation(line: 4643, column: 188, scope: !6767)
!6767 = !DILexicalBlockFile(scope: !6759, file: !616, discriminator: 5)
!6768 = !DILocation(line: 4643, column: 206, scope: !6759)
!6769 = !DILocation(line: 4643, column: 216, scope: !6759)
!6770 = !DILocation(line: 4643, column: 241, scope: !6759)
!6771 = !DILocation(line: 4643, column: 172, scope: !6759)
!6772 = !DILocation(line: 4643, column: 260, scope: !6773)
!6773 = !DILexicalBlockFile(scope: !1508, file: !616, discriminator: 6)
!6774 = !DILocation(line: 4643, column: 260, scope: !1507)
!6775 = !DILocation(line: 4643, column: 260, scope: !6776)
!6776 = !DILexicalBlockFile(scope: !1507, file: !616, discriminator: 7)
!6777 = !DILocation(line: 4643, column: 273, scope: !6778)
!6778 = !DILexicalBlockFile(scope: !1508, file: !616, discriminator: 8)
!6779 = !DILocation(line: 4643, column: 273, scope: !1508)
!6780 = !DILocation(line: 4643, column: 336, scope: !6781)
!6781 = !DILexicalBlockFile(scope: !1505, file: !616, discriminator: 1)
!6782 = !DILocation(line: 4643, column: 314, scope: !1505)
!6783 = !DILocation(line: 4643, column: 296, scope: !1505)
!6784 = !DILocation(line: 4643, column: 323, scope: !1505)
!6785 = !DILocation(line: 4643, column: 295, scope: !1505)
!6786 = !DILocation(line: 4643, column: 334, scope: !1505)
!6787 = !DILocation(line: 4643, column: 340, scope: !1459)
!6788 = !DILocation(line: 4643, column: 340, scope: !6611)
!6789 = !DILocation(line: 4647, column: 12, scope: !1459)
!6790 = !DILocation(line: 4647, column: 5, scope: !1459)
!6791 = !DILocation(line: 4648, column: 1, scope: !1459)
!6792 = !DILocation(line: 4527, column: 24, scope: !1510)
!6793 = !DILocation(line: 4527, column: 40, scope: !1510)
!6794 = !DILocation(line: 4527, column: 56, scope: !1510)
!6795 = !DILocation(line: 4529, column: 5, scope: !1510)
!6796 = !DILocation(line: 4529, column: 12, scope: !1510)
!6797 = !DILocation(line: 4530, column: 5, scope: !1510)
!6798 = !DILocation(line: 4530, column: 9, scope: !1510)
!6799 = !DILocation(line: 4532, column: 5, scope: !1510)
!6800 = !DILocation(line: 4532, column: 9, scope: !1510)
!6801 = !DILocation(line: 4533, column: 5, scope: !1510)
!6802 = !DILocation(line: 4533, column: 15, scope: !1510)
!6803 = !DILocation(line: 4535, column: 5, scope: !1510)
!6804 = !DILocation(line: 4536, column: 10, scope: !1510)
!6805 = !DILocation(line: 4536, column: 24, scope: !1510)
!6806 = !DILocation(line: 4537, column: 45, scope: !6807)
!6807 = distinct !DILexicalBlock(scope: !1510, file: !616, line: 4537, column: 9)
!6808 = !DILocation(line: 4537, column: 51, scope: !6807)
!6809 = !DILocation(line: 4537, column: 10, scope: !6807)
!6810 = !DILocation(line: 4537, column: 9, scope: !1510)
!6811 = !DILocation(line: 4545, column: 9, scope: !6807)
!6812 = !DILocation(line: 4547, column: 7, scope: !1520)
!6813 = !DILocation(line: 4547, column: 22, scope: !1520)
!6814 = !DILocation(line: 4547, column: 37, scope: !1520)
!6815 = !DILocation(line: 4547, column: 35, scope: !1520)
!6816 = !DILocation(line: 4556, column: 9, scope: !6817)
!6817 = distinct !DILexicalBlock(scope: !1520, file: !616, line: 4556, column: 9)
!6818 = !DILocation(line: 4556, column: 16, scope: !6817)
!6819 = !DILocation(line: 4556, column: 9, scope: !1520)
!6820 = !DILocation(line: 4557, column: 27, scope: !6817)
!6821 = !DILocation(line: 4557, column: 40, scope: !6817)
!6822 = !DILocation(line: 4557, column: 18, scope: !6817)
!6823 = !DILocation(line: 4557, column: 16, scope: !6817)
!6824 = !DILocation(line: 4557, column: 9, scope: !6817)
!6825 = !DILocation(line: 4560, column: 30, scope: !6817)
!6826 = !DILocation(line: 4560, column: 18, scope: !6817)
!6827 = !DILocation(line: 4560, column: 16, scope: !6817)
!6828 = !DILocation(line: 4562, column: 26, scope: !1520)
!6829 = !DILocation(line: 4562, column: 5, scope: !1520)
!6830 = !DILocation(line: 4562, column: 34, scope: !1510)
!6831 = !DILocation(line: 4564, column: 9, scope: !6832)
!6832 = distinct !DILexicalBlock(scope: !1510, file: !616, line: 4564, column: 9)
!6833 = !DILocation(line: 4564, column: 9, scope: !1510)
!6834 = !DILocation(line: 4565, column: 24, scope: !6835)
!6835 = distinct !DILexicalBlock(scope: !6832, file: !616, line: 4564, column: 17)
!6836 = !DILocation(line: 4565, column: 22, scope: !6835)
!6837 = !DILocation(line: 4566, column: 9, scope: !6835)
!6838 = !DILocation(line: 4569, column: 18, scope: !1510)
!6839 = !DILocation(line: 4570, column: 51, scope: !1510)
!6840 = !DILocation(line: 4570, column: 5, scope: !1510)
!6841 = !DILocation(line: 4573, column: 5, scope: !1510)
!6842 = !DILocation(line: 4574, column: 12, scope: !1510)
!6843 = !DILocation(line: 4574, column: 5, scope: !1510)
!6844 = !DILocation(line: 4575, column: 1, scope: !1510)
!6845 = !DILocation(line: 4846, column: 23, scope: !1521)
!6846 = !DILocation(line: 4846, column: 39, scope: !1521)
!6847 = !DILocation(line: 4846, column: 55, scope: !1521)
!6848 = !DILocation(line: 4848, column: 5, scope: !1521)
!6849 = !DILocation(line: 4848, column: 12, scope: !1521)
!6850 = !DILocation(line: 4849, column: 5, scope: !1521)
!6851 = !DILocation(line: 4849, column: 15, scope: !1521)
!6852 = !DILocation(line: 4850, column: 5, scope: !1521)
!6853 = !DILocation(line: 4850, column: 15, scope: !1521)
!6854 = !DILocation(line: 4851, column: 5, scope: !1521)
!6855 = !DILocation(line: 4851, column: 9, scope: !1521)
!6856 = !DILocation(line: 4852, column: 5, scope: !1521)
!6857 = !DILocation(line: 4852, column: 9, scope: !1521)
!6858 = !DILocation(line: 4853, column: 5, scope: !1521)
!6859 = !DILocation(line: 4853, column: 11, scope: !1521)
!6860 = !DILocation(line: 4856, column: 5, scope: !1521)
!6861 = !DILocation(line: 4856, column: 13, scope: !1521)
!6862 = !DILocation(line: 4862, column: 5, scope: !1521)
!6863 = !DILocation(line: 4862, column: 9, scope: !1521)
!6864 = !DILocation(line: 4865, column: 5, scope: !1521)
!6865 = !DILocation(line: 4865, column: 15, scope: !1521)
!6866 = !DILocation(line: 4867, column: 5, scope: !1521)
!6867 = !DILocation(line: 4868, column: 10, scope: !1521)
!6868 = !DILocation(line: 4868, column: 24, scope: !1521)
!6869 = !DILocation(line: 4869, column: 5, scope: !1521)
!6870 = !DILocation(line: 4871, column: 10, scope: !1521)
!6871 = !DILocation(line: 4871, column: 19, scope: !1521)
!6872 = !DILocation(line: 4873, column: 45, scope: !6873)
!6873 = distinct !DILexicalBlock(scope: !1521, file: !616, line: 4873, column: 9)
!6874 = !DILocation(line: 4873, column: 51, scope: !6873)
!6875 = !DILocation(line: 4874, column: 32, scope: !6873)
!6876 = !DILocation(line: 4873, column: 10, scope: !6873)
!6877 = !DILocation(line: 4873, column: 9, scope: !1521)
!6878 = !DILocation(line: 4884, column: 9, scope: !6873)
!6879 = !DILocation(line: 4886, column: 9, scope: !6880)
!6880 = distinct !DILexicalBlock(scope: !1521, file: !616, line: 4886, column: 9)
!6881 = !DILocation(line: 4886, column: 15, scope: !6880)
!6882 = !DILocation(line: 4886, column: 19, scope: !6883)
!6883 = !DILexicalBlockFile(scope: !6880, file: !616, discriminator: 1)
!6884 = !DILocation(line: 4886, column: 25, scope: !6880)
!6885 = !DILocation(line: 4886, column: 47, scope: !6880)
!6886 = !DILocation(line: 4886, column: 50, scope: !6887)
!6887 = !DILexicalBlockFile(scope: !6880, file: !616, discriminator: 2)
!6888 = !DILocation(line: 4886, column: 9, scope: !1521)
!6889 = !DILocation(line: 4887, column: 25, scope: !6890)
!6890 = distinct !DILexicalBlock(scope: !6880, file: !616, line: 4886, column: 54)
!6891 = !DILocation(line: 4887, column: 9, scope: !6890)
!6892 = !DILocation(line: 4890, column: 9, scope: !6890)
!6893 = !DILocation(line: 4893, column: 9, scope: !1548)
!6894 = !DILocation(line: 4893, column: 15, scope: !1548)
!6895 = !DILocation(line: 4893, column: 19, scope: !6896)
!6896 = !DILexicalBlockFile(scope: !1548, file: !616, discriminator: 1)
!6897 = !DILocation(line: 4893, column: 25, scope: !1548)
!6898 = !DILocation(line: 4893, column: 9, scope: !1521)
!6899 = !DILocation(line: 4894, column: 9, scope: !1547)
!6900 = !DILocation(line: 4894, column: 16, scope: !1547)
!6901 = !DILocation(line: 4894, column: 23, scope: !1547)
!6902 = !DILocation(line: 4895, column: 9, scope: !1547)
!6903 = !DILocation(line: 4895, column: 14, scope: !1547)
!6904 = !DILocation(line: 4895, column: 22, scope: !1547)
!6905 = !DILocation(line: 4896, column: 29, scope: !6906)
!6906 = distinct !DILexicalBlock(scope: !1547, file: !616, line: 4896, column: 13)
!6907 = !DILocation(line: 4896, column: 38, scope: !6906)
!6908 = !DILocation(line: 4896, column: 47, scope: !6906)
!6909 = !DILocation(line: 4896, column: 65, scope: !6906)
!6910 = !DILocation(line: 4896, column: 82, scope: !6911)
!6911 = !DILexicalBlockFile(scope: !6906, file: !616, discriminator: 1)
!6912 = !DILocation(line: 4896, column: 69, scope: !6906)
!6913 = !DILocation(line: 4896, column: 89, scope: !6906)
!6914 = !DILocation(line: 4896, column: 13, scope: !1547)
!6915 = !DILocation(line: 4897, column: 29, scope: !6916)
!6916 = distinct !DILexicalBlock(scope: !6906, file: !616, line: 4896, column: 96)
!6917 = !DILocation(line: 4897, column: 13, scope: !6916)
!6918 = !DILocation(line: 4900, column: 13, scope: !6916)
!6919 = !DILocation(line: 4902, column: 15, scope: !1547)
!6920 = !DILocation(line: 4902, column: 19, scope: !1547)
!6921 = !{!6922, !3841, i64 0}
!6922 = !{!"", !3841, i64 0, !3894, i64 8, !3894, i64 16, !3894, i64 24, !3894, i64 32}
!6923 = !DILocation(line: 4903, column: 58, scope: !6924)
!6924 = distinct !DILexicalBlock(scope: !1547, file: !616, line: 4903, column: 13)
!6925 = !DILocation(line: 4903, column: 40, scope: !6924)
!6926 = !DILocation(line: 4903, column: 67, scope: !6924)
!6927 = !DILocation(line: 4903, column: 39, scope: !6924)
!6928 = !DILocation(line: 4903, column: 13, scope: !6924)
!6929 = !DILocation(line: 4904, column: 75, scope: !6924)
!6930 = !DILocation(line: 4904, column: 81, scope: !6924)
!6931 = !DILocation(line: 4905, column: 58, scope: !6924)
!6932 = !DILocation(line: 4905, column: 40, scope: !6924)
!6933 = !DILocation(line: 4905, column: 67, scope: !6924)
!6934 = !DILocation(line: 4905, column: 39, scope: !6924)
!6935 = !DILocation(line: 4905, column: 13, scope: !6924)
!6936 = !DILocation(line: 4906, column: 75, scope: !6924)
!6937 = !DILocation(line: 4903, column: 13, scope: !1547)
!6938 = !DILocation(line: 4907, column: 13, scope: !6939)
!6939 = distinct !DILexicalBlock(scope: !6924, file: !616, line: 4906, column: 82)
!6940 = !DILocation(line: 4909, column: 25, scope: !1547)
!6941 = !DILocation(line: 4909, column: 15, scope: !1547)
!6942 = !DILocation(line: 4909, column: 23, scope: !1547)
!6943 = !{!6922, !3894, i64 8}
!6944 = !DILocation(line: 4910, column: 26, scope: !1547)
!6945 = !DILocation(line: 4910, column: 15, scope: !1547)
!6946 = !DILocation(line: 4910, column: 24, scope: !1547)
!6947 = !{!6922, !3894, i64 16}
!6948 = !DILocation(line: 4911, column: 25, scope: !1547)
!6949 = !DILocation(line: 4911, column: 15, scope: !1547)
!6950 = !DILocation(line: 4911, column: 23, scope: !1547)
!6951 = !{!6922, !3894, i64 24}
!6952 = !DILocation(line: 4912, column: 26, scope: !1547)
!6953 = !DILocation(line: 4912, column: 15, scope: !1547)
!6954 = !DILocation(line: 4912, column: 24, scope: !1547)
!6955 = !{!6922, !3894, i64 32}
!6956 = !DILocation(line: 4913, column: 5, scope: !1548)
!6957 = !DILocation(line: 4913, column: 5, scope: !6896)
!6958 = !DILocation(line: 4913, column: 5, scope: !1547)
!6959 = !DILocation(line: 4914, column: 14, scope: !6960)
!6960 = distinct !DILexicalBlock(scope: !1548, file: !616, line: 4914, column: 14)
!6961 = !DILocation(line: 4914, column: 14, scope: !1548)
!6962 = !DILocation(line: 4915, column: 29, scope: !6963)
!6963 = distinct !DILexicalBlock(scope: !6964, file: !616, line: 4915, column: 13)
!6964 = distinct !DILexicalBlock(scope: !6960, file: !616, line: 4914, column: 18)
!6965 = !DILocation(line: 4915, column: 35, scope: !6963)
!6966 = !DILocation(line: 4915, column: 44, scope: !6963)
!6967 = !DILocation(line: 4915, column: 62, scope: !6963)
!6968 = !DILocation(line: 4915, column: 79, scope: !6969)
!6969 = !DILexicalBlockFile(scope: !6963, file: !616, discriminator: 1)
!6970 = !DILocation(line: 4915, column: 66, scope: !6963)
!6971 = !DILocation(line: 4915, column: 83, scope: !6963)
!6972 = !DILocation(line: 4915, column: 13, scope: !6964)
!6973 = !DILocation(line: 4916, column: 29, scope: !6974)
!6974 = distinct !DILexicalBlock(scope: !6963, file: !616, line: 4915, column: 90)
!6975 = !DILocation(line: 4916, column: 13, scope: !6974)
!6976 = !DILocation(line: 4918, column: 13, scope: !6974)
!6977 = !DILocation(line: 4920, column: 15, scope: !6964)
!6978 = !DILocation(line: 4920, column: 19, scope: !6964)
!6979 = !DILocation(line: 4921, column: 60, scope: !6980)
!6980 = distinct !DILexicalBlock(scope: !6964, file: !616, line: 4921, column: 13)
!6981 = !DILocation(line: 4921, column: 42, scope: !6980)
!6982 = !DILocation(line: 4921, column: 66, scope: !6980)
!6983 = !DILocation(line: 4921, column: 41, scope: !6980)
!6984 = !DILocation(line: 4922, column: 46, scope: !6980)
!6985 = !DILocation(line: 4922, column: 62, scope: !6980)
!6986 = !DILocation(line: 4921, column: 14, scope: !6980)
!6987 = !DILocation(line: 4922, column: 72, scope: !6980)
!6988 = !DILocation(line: 4923, column: 60, scope: !6980)
!6989 = !DILocation(line: 4923, column: 42, scope: !6980)
!6990 = !DILocation(line: 4923, column: 66, scope: !6980)
!6991 = !DILocation(line: 4923, column: 41, scope: !6980)
!6992 = !DILocation(line: 4924, column: 47, scope: !6980)
!6993 = !DILocation(line: 4924, column: 63, scope: !6980)
!6994 = !DILocation(line: 4923, column: 14, scope: !6980)
!6995 = !DILocation(line: 4921, column: 13, scope: !6964)
!6996 = !DILocation(line: 4925, column: 13, scope: !6997)
!6997 = distinct !DILexicalBlock(scope: !6980, file: !616, line: 4924, column: 74)
!6998 = !DILocation(line: 4927, column: 5, scope: !6964)
!6999 = !DILocation(line: 4930, column: 15, scope: !7000)
!7000 = distinct !DILexicalBlock(scope: !6960, file: !616, line: 4928, column: 10)
!7001 = !DILocation(line: 4930, column: 19, scope: !7000)
!7002 = !DILocation(line: 4938, column: 49, scope: !7003)
!7003 = distinct !DILexicalBlock(scope: !1521, file: !616, line: 4938, column: 9)
!7004 = !DILocation(line: 4938, column: 9, scope: !7003)
!7005 = !DILocation(line: 4938, column: 57, scope: !7003)
!7006 = !DILocation(line: 4939, column: 40, scope: !7003)
!7007 = !DILocation(line: 4939, column: 53, scope: !7003)
!7008 = !DILocation(line: 4939, column: 9, scope: !7003)
!7009 = !DILocation(line: 4939, column: 57, scope: !7003)
!7010 = !DILocation(line: 4940, column: 54, scope: !7003)
!7011 = !DILocation(line: 4940, column: 58, scope: !7003)
!7012 = !DILocation(line: 4940, column: 9, scope: !7003)
!7013 = !DILocation(line: 4938, column: 9, scope: !1521)
!7014 = !DILocation(line: 4941, column: 9, scope: !7003)
!7015 = !DILocation(line: 4985, column: 7, scope: !1553)
!7016 = !DILocation(line: 4985, column: 22, scope: !1553)
!7017 = !DILocation(line: 4985, column: 37, scope: !1553)
!7018 = !DILocation(line: 4985, column: 35, scope: !1553)
!7019 = !DILocation(line: 4988, column: 11, scope: !7020)
!7020 = distinct !DILexicalBlock(scope: !1553, file: !616, line: 4988, column: 9)
!7021 = !DILocation(line: 4988, column: 28, scope: !7020)
!7022 = !DILocation(line: 4988, column: 32, scope: !7023)
!7023 = !DILexicalBlockFile(scope: !7020, file: !616, discriminator: 1)
!7024 = !DILocation(line: 4988, column: 39, scope: !7020)
!7025 = !DILocation(line: 4988, column: 9, scope: !1553)
!7026 = !DILocation(line: 4989, column: 55, scope: !7020)
!7027 = !DILocation(line: 4989, column: 18, scope: !7020)
!7028 = !DILocation(line: 4989, column: 16, scope: !7020)
!7029 = !DILocation(line: 4989, column: 9, scope: !7020)
!7030 = !DILocation(line: 4994, column: 10, scope: !7031)
!7031 = distinct !DILexicalBlock(scope: !7020, file: !616, line: 4994, column: 9)
!7032 = !DILocation(line: 4994, column: 17, scope: !7031)
!7033 = !DILocation(line: 4994, column: 31, scope: !7031)
!7034 = !DILocation(line: 4994, column: 36, scope: !7035)
!7035 = !DILexicalBlockFile(scope: !7031, file: !616, discriminator: 1)
!7036 = !DILocation(line: 4994, column: 9, scope: !7020)
!7037 = !DILocation(line: 4995, column: 39, scope: !7031)
!7038 = !DILocation(line: 4995, column: 52, scope: !7031)
!7039 = !DILocation(line: 4995, column: 60, scope: !7031)
!7040 = !DILocation(line: 4995, column: 18, scope: !7031)
!7041 = !DILocation(line: 4995, column: 16, scope: !7031)
!7042 = !DILocation(line: 4995, column: 9, scope: !7031)
!7043 = !DILocation(line: 5000, column: 14, scope: !7044)
!7044 = distinct !DILexicalBlock(scope: !7031, file: !616, line: 5000, column: 9)
!7045 = !DILocation(line: 5000, column: 17, scope: !7044)
!7046 = !DILocation(line: 5000, column: 9, scope: !7031)
!7047 = !DILocation(line: 5001, column: 40, scope: !7044)
!7048 = !DILocation(line: 5001, column: 18, scope: !7044)
!7049 = !DILocation(line: 5001, column: 16, scope: !7044)
!7050 = !DILocation(line: 5001, column: 9, scope: !7044)
!7051 = !DILocation(line: 5005, column: 41, scope: !7044)
!7052 = !DILocation(line: 5005, column: 14, scope: !7044)
!7053 = !DILocation(line: 5005, column: 12, scope: !7044)
!7054 = !DILocation(line: 5007, column: 26, scope: !1553)
!7055 = !DILocation(line: 5007, column: 5, scope: !1553)
!7056 = !DILocation(line: 5007, column: 34, scope: !1521)
!7057 = !DILocation(line: 5009, column: 9, scope: !7058)
!7058 = distinct !DILexicalBlock(scope: !1521, file: !616, line: 5009, column: 9)
!7059 = !DILocation(line: 5009, column: 16, scope: !7058)
!7060 = !DILocation(line: 5009, column: 9, scope: !1521)
!7061 = !DILocation(line: 5011, column: 24, scope: !7062)
!7062 = distinct !DILexicalBlock(scope: !7058, file: !616, line: 5009, column: 21)
!7063 = !DILocation(line: 5011, column: 22, scope: !7062)
!7064 = !DILocation(line: 5012, column: 9, scope: !7062)
!7065 = !DILocation(line: 5017, column: 51, scope: !1521)
!7066 = !DILocation(line: 5018, column: 18, scope: !1521)
!7067 = !DILocation(line: 5018, column: 5, scope: !1521)
!7068 = !DILocation(line: 5021, column: 5, scope: !1521)
!7069 = !DILocation(line: 5026, column: 12, scope: !1521)
!7070 = !DILocation(line: 5026, column: 5, scope: !1521)
!7071 = !DILocation(line: 5027, column: 1, scope: !1521)
!7072 = !DILocation(line: 7565, column: 23, scope: !1608)
!7073 = !DILocation(line: 7565, column: 39, scope: !1608)
!7074 = !DILocation(line: 7567, column: 5, scope: !1608)
!7075 = !DILocation(line: 7567, column: 16, scope: !1608)
!7076 = !DILocation(line: 7568, column: 5, scope: !1608)
!7077 = !DILocation(line: 7568, column: 13, scope: !1608)
!7078 = !DILocation(line: 7569, column: 7, scope: !1608)
!7079 = !DILocation(line: 7569, column: 28, scope: !1608)
!7080 = !DILocation(line: 7570, column: 9, scope: !1608)
!7081 = !DILocation(line: 7570, column: 7, scope: !1608)
!7082 = !DILocation(line: 7571, column: 9, scope: !7083)
!7083 = distinct !DILexicalBlock(scope: !1608, file: !616, line: 7571, column: 9)
!7084 = !DILocation(line: 7571, column: 11, scope: !7083)
!7085 = !DILocation(line: 7571, column: 9, scope: !1608)
!7086 = !DILocation(line: 7572, column: 16, scope: !7083)
!7087 = !DILocation(line: 7572, column: 9, scope: !7083)
!7088 = !DILocation(line: 7574, column: 36, scope: !1608)
!7089 = !{!7090, !3894, i64 0}
!7090 = !{!"tms", !3894, i64 0, !3894, i64 8, !3894, i64 16, !3894, i64 24}
!7091 = !DILocation(line: 7574, column: 26, scope: !1608)
!7092 = !DILocation(line: 7574, column: 48, scope: !1608)
!7093 = !DILocation(line: 7574, column: 46, scope: !1608)
!7094 = !DILocation(line: 7575, column: 36, scope: !1608)
!7095 = !{!7090, !3894, i64 8}
!7096 = !DILocation(line: 7575, column: 26, scope: !1608)
!7097 = !DILocation(line: 7575, column: 48, scope: !1608)
!7098 = !DILocation(line: 7575, column: 46, scope: !1608)
!7099 = !DILocation(line: 7576, column: 36, scope: !1608)
!7100 = !{!7090, !3894, i64 16}
!7101 = !DILocation(line: 7576, column: 26, scope: !1608)
!7102 = !DILocation(line: 7576, column: 49, scope: !1608)
!7103 = !DILocation(line: 7576, column: 47, scope: !1608)
!7104 = !DILocation(line: 7577, column: 36, scope: !1608)
!7105 = !{!7090, !3894, i64 24}
!7106 = !DILocation(line: 7577, column: 26, scope: !1608)
!7107 = !DILocation(line: 7577, column: 49, scope: !1608)
!7108 = !DILocation(line: 7577, column: 47, scope: !1608)
!7109 = !DILocation(line: 7578, column: 34, scope: !1608)
!7110 = !DILocation(line: 7578, column: 26, scope: !1608)
!7111 = !DILocation(line: 7578, column: 38, scope: !1608)
!7112 = !DILocation(line: 7578, column: 36, scope: !1608)
!7113 = !DILocation(line: 7573, column: 12, scope: !1608)
!7114 = !DILocation(line: 7573, column: 5, scope: !1608)
!7115 = !DILocation(line: 7579, column: 1, scope: !1608)
!7116 = !DILocation(line: 5036, column: 23, scope: !1661)
!7117 = !DILocation(line: 5036, column: 39, scope: !1661)
!7118 = !DILocation(line: 5038, column: 5, scope: !1661)
!7119 = !DILocation(line: 5038, column: 9, scope: !1661)
!7120 = !DILocation(line: 5039, column: 34, scope: !7121)
!7121 = distinct !DILexicalBlock(scope: !1661, file: !616, line: 5039, column: 9)
!7122 = !DILocation(line: 5039, column: 10, scope: !7121)
!7123 = !DILocation(line: 5039, column: 9, scope: !1661)
!7124 = !DILocation(line: 5043, column: 1, scope: !1661)
!7125 = !DILocation(line: 5040, column: 9, scope: !7121)
!7126 = !DILocation(line: 5041, column: 11, scope: !1661)
!7127 = !DILocation(line: 5041, column: 5, scope: !1661)
!7128 = !DILocation(line: 5188, column: 23, scope: !1666)
!7129 = !DILocation(line: 5188, column: 39, scope: !1666)
!7130 = !DILocation(line: 5190, column: 5, scope: !1666)
!7131 = !DILocation(line: 5190, column: 15, scope: !1666)
!7132 = !DILocation(line: 5191, column: 5, scope: !1666)
!7133 = !DILocation(line: 5191, column: 11, scope: !1666)
!7134 = !DILocation(line: 5192, column: 5, scope: !1666)
!7135 = !DILocation(line: 5192, column: 15, scope: !1666)
!7136 = !DILocation(line: 5193, column: 5, scope: !1666)
!7137 = !DILocation(line: 5193, column: 12, scope: !1666)
!7138 = !DILocation(line: 5194, column: 5, scope: !1666)
!7139 = !DILocation(line: 5194, column: 16, scope: !1666)
!7140 = !DILocation(line: 5199, column: 34, scope: !7141)
!7141 = distinct !DILexicalBlock(scope: !1666, file: !616, line: 5199, column: 9)
!7142 = !DILocation(line: 5199, column: 10, scope: !7141)
!7143 = !DILocation(line: 5199, column: 9, scope: !1666)
!7144 = !DILocation(line: 5202, column: 9, scope: !7141)
!7145 = !DILocation(line: 5203, column: 29, scope: !1666)
!7146 = !DILocation(line: 5203, column: 12, scope: !1666)
!7147 = !DILocation(line: 5203, column: 10, scope: !1666)
!7148 = !DILocation(line: 5204, column: 27, scope: !1678)
!7149 = !DILocation(line: 5204, column: 35, scope: !1678)
!7150 = !DILocation(line: 5204, column: 46, scope: !1678)
!7151 = !DILocation(line: 5204, column: 55, scope: !1678)
!7152 = !DILocation(line: 5204, column: 72, scope: !1678)
!7153 = !DILocation(line: 5204, column: 78, scope: !1678)
!7154 = !DILocation(line: 5204, column: 99, scope: !7155)
!7155 = !DILexicalBlockFile(scope: !1678, file: !616, discriminator: 1)
!7156 = !DILocation(line: 5204, column: 107, scope: !1678)
!7157 = !DILocation(line: 5204, column: 118, scope: !1678)
!7158 = !DILocation(line: 5204, column: 127, scope: !1678)
!7159 = !DILocation(line: 5204, column: 144, scope: !1678)
!7160 = !DILocation(line: 5204, column: 9, scope: !1666)
!7161 = !DILocation(line: 5205, column: 25, scope: !1677)
!7162 = !DILocation(line: 5205, column: 9, scope: !1677)
!7163 = !DILocation(line: 5207, column: 9, scope: !1677)
!7164 = !DILocation(line: 5207, column: 14, scope: !7165)
!7165 = !DILexicalBlockFile(scope: !1676, file: !616, discriminator: 1)
!7166 = !DILocation(line: 5207, column: 24, scope: !1676)
!7167 = !DILocation(line: 5207, column: 54, scope: !1676)
!7168 = !DILocation(line: 5207, column: 70, scope: !7169)
!7169 = distinct !DILexicalBlock(scope: !1676, file: !616, line: 5207, column: 67)
!7170 = !DILocation(line: 5207, column: 87, scope: !7169)
!7171 = !DILocation(line: 5207, column: 67, scope: !7169)
!7172 = !DILocation(line: 5207, column: 97, scope: !7169)
!7173 = !DILocation(line: 5207, column: 67, scope: !1676)
!7174 = !DILocation(line: 5207, column: 67, scope: !7175)
!7175 = !DILexicalBlockFile(scope: !1676, file: !616, discriminator: 2)
!7176 = !DILocation(line: 5207, column: 128, scope: !7177)
!7177 = !DILexicalBlockFile(scope: !7169, file: !616, discriminator: 3)
!7178 = !DILocation(line: 5207, column: 146, scope: !7169)
!7179 = !DILocation(line: 5207, column: 156, scope: !7169)
!7180 = !DILocation(line: 5207, column: 181, scope: !7169)
!7181 = !DILocation(line: 5207, column: 112, scope: !7169)
!7182 = !DILocation(line: 5207, column: 200, scope: !7183)
!7183 = !DILexicalBlockFile(scope: !1677, file: !616, discriminator: 4)
!7184 = !DILocation(line: 5207, column: 200, scope: !1676)
!7185 = !DILocation(line: 5207, column: 200, scope: !7186)
!7186 = !DILexicalBlockFile(scope: !1676, file: !616, discriminator: 5)
!7187 = !DILocation(line: 5208, column: 9, scope: !1677)
!7188 = !DILocation(line: 5210, column: 28, scope: !1666)
!7189 = !DILocation(line: 5210, column: 12, scope: !1666)
!7190 = !DILocation(line: 5210, column: 10, scope: !1666)
!7191 = !DILocation(line: 5211, column: 9, scope: !1682)
!7192 = !DILocation(line: 5211, column: 14, scope: !1682)
!7193 = !DILocation(line: 5211, column: 9, scope: !1666)
!7194 = !DILocation(line: 5212, column: 25, scope: !1681)
!7195 = !DILocation(line: 5212, column: 9, scope: !1681)
!7196 = !DILocation(line: 5213, column: 9, scope: !1681)
!7197 = !DILocation(line: 5213, column: 14, scope: !7198)
!7198 = !DILexicalBlockFile(scope: !1680, file: !616, discriminator: 1)
!7199 = !DILocation(line: 5213, column: 24, scope: !1680)
!7200 = !DILocation(line: 5213, column: 54, scope: !1680)
!7201 = !DILocation(line: 5213, column: 70, scope: !7202)
!7202 = distinct !DILexicalBlock(scope: !1680, file: !616, line: 5213, column: 67)
!7203 = !DILocation(line: 5213, column: 87, scope: !7202)
!7204 = !DILocation(line: 5213, column: 67, scope: !7202)
!7205 = !DILocation(line: 5213, column: 97, scope: !7202)
!7206 = !DILocation(line: 5213, column: 67, scope: !1680)
!7207 = !DILocation(line: 5213, column: 67, scope: !7208)
!7208 = !DILexicalBlockFile(scope: !1680, file: !616, discriminator: 2)
!7209 = !DILocation(line: 5213, column: 128, scope: !7210)
!7210 = !DILexicalBlockFile(scope: !7202, file: !616, discriminator: 3)
!7211 = !DILocation(line: 5213, column: 146, scope: !7202)
!7212 = !DILocation(line: 5213, column: 156, scope: !7202)
!7213 = !DILocation(line: 5213, column: 181, scope: !7202)
!7214 = !DILocation(line: 5213, column: 112, scope: !7202)
!7215 = !DILocation(line: 5213, column: 200, scope: !7216)
!7216 = !DILexicalBlockFile(scope: !1681, file: !616, discriminator: 4)
!7217 = !DILocation(line: 5213, column: 200, scope: !1680)
!7218 = !DILocation(line: 5213, column: 200, scope: !7219)
!7219 = !DILexicalBlockFile(scope: !1680, file: !616, discriminator: 5)
!7220 = !DILocation(line: 5214, column: 9, scope: !1681)
!7221 = !DILocation(line: 5217, column: 30, scope: !1666)
!7222 = !DILocation(line: 5217, column: 16, scope: !1666)
!7223 = !DILocation(line: 5217, column: 14, scope: !1666)
!7224 = !DILocation(line: 5218, column: 9, scope: !1686)
!7225 = !DILocation(line: 5218, column: 18, scope: !1686)
!7226 = !DILocation(line: 5218, column: 9, scope: !1666)
!7227 = !DILocation(line: 5219, column: 9, scope: !1685)
!7228 = !DILocation(line: 5219, column: 14, scope: !7229)
!7229 = !DILexicalBlockFile(scope: !1684, file: !616, discriminator: 1)
!7230 = !DILocation(line: 5219, column: 24, scope: !1684)
!7231 = !DILocation(line: 5219, column: 54, scope: !1684)
!7232 = !DILocation(line: 5219, column: 70, scope: !7233)
!7233 = distinct !DILexicalBlock(scope: !1684, file: !616, line: 5219, column: 67)
!7234 = !DILocation(line: 5219, column: 87, scope: !7233)
!7235 = !DILocation(line: 5219, column: 67, scope: !7233)
!7236 = !DILocation(line: 5219, column: 97, scope: !7233)
!7237 = !DILocation(line: 5219, column: 67, scope: !1684)
!7238 = !DILocation(line: 5219, column: 67, scope: !7239)
!7239 = !DILexicalBlockFile(scope: !1684, file: !616, discriminator: 2)
!7240 = !DILocation(line: 5219, column: 128, scope: !7241)
!7241 = !DILexicalBlockFile(scope: !7233, file: !616, discriminator: 3)
!7242 = !DILocation(line: 5219, column: 146, scope: !7233)
!7243 = !DILocation(line: 5219, column: 156, scope: !7233)
!7244 = !DILocation(line: 5219, column: 181, scope: !7233)
!7245 = !DILocation(line: 5219, column: 112, scope: !7233)
!7246 = !DILocation(line: 5219, column: 200, scope: !7247)
!7247 = !DILexicalBlockFile(scope: !1685, file: !616, discriminator: 4)
!7248 = !DILocation(line: 5219, column: 200, scope: !1684)
!7249 = !DILocation(line: 5219, column: 200, scope: !7250)
!7250 = !DILexicalBlockFile(scope: !1684, file: !616, discriminator: 5)
!7251 = !DILocation(line: 5220, column: 9, scope: !1685)
!7252 = !DILocation(line: 5223, column: 11, scope: !1666)
!7253 = !DILocation(line: 5223, column: 17, scope: !1666)
!7254 = !DILocation(line: 5223, column: 5, scope: !1666)
!7255 = !DILocation(line: 5227, column: 23, scope: !1666)
!7256 = !DILocation(line: 5227, column: 33, scope: !1666)
!7257 = !DILocation(line: 5227, column: 5, scope: !1666)
!7258 = !DILocation(line: 5228, column: 5, scope: !1666)
!7259 = !DILocation(line: 5228, column: 10, scope: !7260)
!7260 = !DILexicalBlockFile(scope: !1688, file: !616, discriminator: 1)
!7261 = !DILocation(line: 5228, column: 20, scope: !1688)
!7262 = !DILocation(line: 5228, column: 50, scope: !1688)
!7263 = !DILocation(line: 5228, column: 66, scope: !7264)
!7264 = distinct !DILexicalBlock(scope: !1688, file: !616, line: 5228, column: 63)
!7265 = !DILocation(line: 5228, column: 83, scope: !7264)
!7266 = !DILocation(line: 5228, column: 63, scope: !7264)
!7267 = !DILocation(line: 5228, column: 93, scope: !7264)
!7268 = !DILocation(line: 5228, column: 63, scope: !1688)
!7269 = !DILocation(line: 5228, column: 63, scope: !7270)
!7270 = !DILexicalBlockFile(scope: !1688, file: !616, discriminator: 2)
!7271 = !DILocation(line: 5228, column: 124, scope: !7272)
!7272 = !DILexicalBlockFile(scope: !7264, file: !616, discriminator: 3)
!7273 = !DILocation(line: 5228, column: 142, scope: !7264)
!7274 = !DILocation(line: 5228, column: 152, scope: !7264)
!7275 = !DILocation(line: 5228, column: 177, scope: !7264)
!7276 = !DILocation(line: 5228, column: 108, scope: !7264)
!7277 = !DILocation(line: 5228, column: 196, scope: !7278)
!7278 = !DILexicalBlockFile(scope: !1666, file: !616, discriminator: 4)
!7279 = !DILocation(line: 5228, column: 196, scope: !1688)
!7280 = !DILocation(line: 5228, column: 196, scope: !7281)
!7281 = !DILexicalBlockFile(scope: !1688, file: !616, discriminator: 5)
!7282 = !DILocation(line: 5229, column: 12, scope: !1666)
!7283 = !DILocation(line: 5229, column: 5, scope: !1666)
!7284 = !DILocation(line: 5230, column: 1, scope: !1666)
!7285 = !DILocation(line: 5245, column: 24, scope: !1724)
!7286 = !DILocation(line: 5245, column: 40, scope: !1724)
!7287 = !DILocation(line: 5245, column: 56, scope: !1724)
!7288 = !DILocation(line: 5247, column: 5, scope: !1724)
!7289 = !DILocation(line: 5247, column: 12, scope: !1724)
!7290 = !DILocation(line: 5248, column: 5, scope: !1724)
!7291 = !DILocation(line: 5248, column: 15, scope: !1724)
!7292 = !DILocation(line: 5248, column: 22, scope: !1724)
!7293 = !DILocation(line: 5249, column: 5, scope: !1724)
!7294 = !DILocation(line: 5249, column: 12, scope: !1724)
!7295 = !DILocation(line: 5250, column: 5, scope: !1724)
!7296 = !DILocation(line: 5250, column: 12, scope: !1724)
!7297 = !DILocation(line: 5251, column: 5, scope: !1724)
!7298 = !DILocation(line: 5251, column: 16, scope: !1724)
!7299 = !DILocation(line: 5251, column: 22, scope: !1724)
!7300 = !DILocation(line: 5258, column: 5, scope: !1724)
!7301 = !DILocation(line: 5259, column: 10, scope: !1724)
!7302 = !DILocation(line: 5259, column: 24, scope: !1724)
!7303 = !DILocation(line: 5261, column: 10, scope: !1724)
!7304 = !DILocation(line: 5261, column: 19, scope: !1724)
!7305 = !DILocation(line: 5263, column: 45, scope: !7306)
!7306 = distinct !DILexicalBlock(scope: !1724, file: !616, line: 5263, column: 9)
!7307 = !DILocation(line: 5263, column: 51, scope: !7306)
!7308 = !DILocation(line: 5263, column: 10, scope: !7306)
!7309 = !DILocation(line: 5263, column: 9, scope: !1724)
!7310 = !DILocation(line: 5267, column: 9, scope: !7306)
!7311 = !DILocation(line: 5269, column: 27, scope: !7312)
!7312 = distinct !DILexicalBlock(scope: !1724, file: !616, line: 5269, column: 9)
!7313 = !DILocation(line: 5269, column: 35, scope: !7312)
!7314 = !DILocation(line: 5269, column: 46, scope: !7312)
!7315 = !DILocation(line: 5269, column: 55, scope: !7312)
!7316 = !DILocation(line: 5269, column: 72, scope: !7312)
!7317 = !DILocation(line: 5269, column: 78, scope: !7312)
!7318 = !DILocation(line: 5269, column: 99, scope: !7319)
!7319 = !DILexicalBlockFile(scope: !7312, file: !616, discriminator: 1)
!7320 = !DILocation(line: 5269, column: 107, scope: !7312)
!7321 = !DILocation(line: 5269, column: 118, scope: !7312)
!7322 = !DILocation(line: 5269, column: 127, scope: !7312)
!7323 = !DILocation(line: 5269, column: 144, scope: !7312)
!7324 = !DILocation(line: 5269, column: 9, scope: !1724)
!7325 = !DILocation(line: 5270, column: 25, scope: !7326)
!7326 = distinct !DILexicalBlock(scope: !7312, file: !616, line: 5269, column: 151)
!7327 = !DILocation(line: 5270, column: 9, scope: !7326)
!7328 = !DILocation(line: 5272, column: 9, scope: !7326)
!7329 = !DILocation(line: 5274, column: 28, scope: !1724)
!7330 = !DILocation(line: 5274, column: 12, scope: !1724)
!7331 = !DILocation(line: 5274, column: 10, scope: !1724)
!7332 = !DILocation(line: 5275, column: 26, scope: !7333)
!7333 = distinct !DILexicalBlock(scope: !1724, file: !616, line: 5275, column: 9)
!7334 = !DILocation(line: 5275, column: 10, scope: !7333)
!7335 = !DILocation(line: 5275, column: 9, scope: !1724)
!7336 = !DILocation(line: 5276, column: 25, scope: !7337)
!7337 = distinct !DILexicalBlock(scope: !7333, file: !616, line: 5275, column: 32)
!7338 = !DILocation(line: 5276, column: 9, scope: !7337)
!7339 = !DILocation(line: 5278, column: 9, scope: !7337)
!7340 = !DILocation(line: 5281, column: 30, scope: !1724)
!7341 = !DILocation(line: 5281, column: 16, scope: !1724)
!7342 = !DILocation(line: 5281, column: 14, scope: !1724)
!7343 = !DILocation(line: 5282, column: 9, scope: !7344)
!7344 = distinct !DILexicalBlock(scope: !1724, file: !616, line: 5282, column: 9)
!7345 = !DILocation(line: 5282, column: 18, scope: !7344)
!7346 = !DILocation(line: 5282, column: 9, scope: !1724)
!7347 = !DILocation(line: 5283, column: 9, scope: !7348)
!7348 = distinct !DILexicalBlock(scope: !7344, file: !616, line: 5282, column: 33)
!7349 = !DILocation(line: 5286, column: 29, scope: !1724)
!7350 = !DILocation(line: 5286, column: 15, scope: !1724)
!7351 = !DILocation(line: 5286, column: 13, scope: !1724)
!7352 = !DILocation(line: 5287, column: 9, scope: !7353)
!7353 = distinct !DILexicalBlock(scope: !1724, file: !616, line: 5287, column: 9)
!7354 = !DILocation(line: 5287, column: 17, scope: !7353)
!7355 = !DILocation(line: 5287, column: 9, scope: !1724)
!7356 = !DILocation(line: 5288, column: 9, scope: !7353)
!7357 = !DILocation(line: 5291, column: 14, scope: !7358)
!7358 = distinct !DILexicalBlock(scope: !1724, file: !616, line: 5291, column: 9)
!7359 = !DILocation(line: 5291, column: 17, scope: !7358)
!7360 = !DILocation(line: 5291, column: 9, scope: !1724)
!7361 = !DILocation(line: 5292, column: 22, scope: !7358)
!7362 = !DILocation(line: 5292, column: 26, scope: !7358)
!7363 = !DILocation(line: 5292, column: 36, scope: !7358)
!7364 = !DILocation(line: 5292, column: 9, scope: !7358)
!7365 = !DILocation(line: 5295, column: 21, scope: !7358)
!7366 = !DILocation(line: 5295, column: 29, scope: !7358)
!7367 = !DILocation(line: 5295, column: 39, scope: !7358)
!7368 = !DILocation(line: 5295, column: 9, scope: !7358)
!7369 = !DILocation(line: 5299, column: 5, scope: !1724)
!7370 = !DILocation(line: 5301, column: 5, scope: !1724)
!7371 = !DILocation(line: 5301, column: 12, scope: !7372)
!7372 = !DILexicalBlockFile(scope: !7373, file: !616, discriminator: 2)
!7373 = !DILexicalBlockFile(scope: !1724, file: !616, discriminator: 1)
!7374 = !DILocation(line: 5301, column: 19, scope: !1724)
!7375 = !DILocation(line: 5302, column: 28, scope: !1724)
!7376 = !DILocation(line: 5302, column: 20, scope: !1724)
!7377 = !DILocation(line: 5302, column: 9, scope: !1724)
!7378 = !DILocation(line: 5303, column: 16, scope: !1724)
!7379 = !DILocation(line: 5303, column: 5, scope: !1724)
!7380 = !DILocation(line: 5305, column: 9, scope: !7381)
!7381 = distinct !DILexicalBlock(scope: !1724, file: !616, line: 5305, column: 9)
!7382 = !DILocation(line: 5305, column: 9, scope: !1724)
!7383 = !DILocation(line: 5306, column: 27, scope: !7381)
!7384 = !DILocation(line: 5306, column: 37, scope: !7381)
!7385 = !DILocation(line: 5306, column: 9, scope: !7381)
!7386 = !DILocation(line: 5307, column: 5, scope: !1724)
!7387 = !DILocation(line: 5308, column: 5, scope: !1724)
!7388 = !DILocation(line: 5309, column: 1, scope: !1724)
!7389 = !DILocation(line: 5530, column: 22, scope: !1785)
!7390 = !DILocation(line: 5530, column: 38, scope: !1785)
!7391 = !DILocation(line: 5532, column: 5, scope: !1785)
!7392 = !DILocation(line: 5532, column: 11, scope: !1785)
!7393 = !DILocation(line: 5533, column: 5, scope: !1785)
!7394 = !DILocation(line: 5533, column: 9, scope: !1785)
!7395 = !DILocation(line: 5534, column: 5, scope: !1785)
!7396 = !DILocation(line: 5535, column: 11, scope: !1785)
!7397 = !DILocation(line: 5535, column: 9, scope: !1785)
!7398 = !DILocation(line: 5536, column: 9, scope: !7399)
!7399 = distinct !DILexicalBlock(scope: !1785, file: !616, line: 5536, column: 9)
!7400 = !DILocation(line: 5536, column: 13, scope: !7399)
!7401 = !DILocation(line: 5536, column: 9, scope: !1785)
!7402 = !DILocation(line: 5538, column: 9, scope: !7403)
!7403 = distinct !DILexicalBlock(scope: !7399, file: !616, line: 5536, column: 19)
!7404 = !DILocation(line: 5539, column: 5, scope: !7403)
!7405 = !DILocation(line: 5541, column: 18, scope: !7406)
!7406 = distinct !DILexicalBlock(scope: !7399, file: !616, line: 5539, column: 12)
!7407 = !DILocation(line: 5541, column: 16, scope: !7406)
!7408 = !DILocation(line: 5543, column: 9, scope: !7409)
!7409 = distinct !DILexicalBlock(scope: !1785, file: !616, line: 5543, column: 9)
!7410 = !DILocation(line: 5543, column: 13, scope: !7409)
!7411 = !DILocation(line: 5543, column: 9, scope: !1785)
!7412 = !DILocation(line: 5544, column: 16, scope: !7409)
!7413 = !DILocation(line: 5544, column: 9, scope: !7409)
!7414 = !DILocation(line: 5545, column: 9, scope: !7415)
!7415 = distinct !DILexicalBlock(scope: !1785, file: !616, line: 5545, column: 9)
!7416 = !DILocation(line: 5545, column: 16, scope: !7415)
!7417 = !DILocation(line: 5545, column: 9, scope: !1785)
!7418 = !DILocation(line: 5547, column: 25, scope: !7419)
!7419 = distinct !DILexicalBlock(scope: !7415, file: !616, line: 5545, column: 21)
!7420 = !DILocation(line: 5547, column: 9, scope: !7419)
!7421 = !DILocation(line: 5549, column: 9, scope: !7419)
!7422 = !DILocation(line: 5551, column: 28, scope: !1785)
!7423 = !DILocation(line: 5551, column: 12, scope: !1785)
!7424 = !DILocation(line: 5551, column: 5, scope: !1785)
!7425 = !DILocation(line: 5552, column: 1, scope: !1785)
!7426 = !DILocation(line: 5564, column: 40, scope: !1793)
!7427 = !DILocation(line: 5564, column: 56, scope: !1793)
!7428 = !DILocation(line: 5566, column: 5, scope: !1793)
!7429 = !DILocation(line: 5566, column: 9, scope: !1793)
!7430 = !DILocation(line: 5566, column: 17, scope: !1793)
!7431 = !DILocation(line: 5568, column: 34, scope: !7432)
!7432 = distinct !DILexicalBlock(scope: !1793, file: !616, line: 5568, column: 9)
!7433 = !DILocation(line: 5568, column: 10, scope: !7432)
!7434 = !DILocation(line: 5568, column: 9, scope: !1793)
!7435 = !DILocation(line: 5569, column: 9, scope: !7432)
!7436 = !DILocation(line: 5570, column: 34, scope: !1793)
!7437 = !DILocation(line: 5570, column: 11, scope: !1793)
!7438 = !DILocation(line: 5570, column: 9, scope: !1793)
!7439 = !DILocation(line: 5571, column: 9, scope: !7440)
!7440 = distinct !DILexicalBlock(scope: !1793, file: !616, line: 5571, column: 9)
!7441 = !DILocation(line: 5571, column: 13, scope: !7440)
!7442 = !DILocation(line: 5571, column: 9, scope: !1793)
!7443 = !DILocation(line: 5572, column: 16, scope: !7440)
!7444 = !DILocation(line: 5572, column: 9, scope: !7440)
!7445 = !DILocation(line: 5573, column: 28, scope: !1793)
!7446 = !DILocation(line: 5573, column: 12, scope: !1793)
!7447 = !DILocation(line: 5573, column: 5, scope: !1793)
!7448 = !DILocation(line: 5574, column: 1, scope: !1793)
!7449 = !DILocation(line: 5581, column: 40, scope: !1799)
!7450 = !DILocation(line: 5581, column: 56, scope: !1799)
!7451 = !DILocation(line: 5583, column: 5, scope: !1799)
!7452 = !DILocation(line: 5583, column: 9, scope: !1799)
!7453 = !DILocation(line: 5583, column: 17, scope: !1799)
!7454 = !DILocation(line: 5585, column: 34, scope: !7455)
!7455 = distinct !DILexicalBlock(scope: !1799, file: !616, line: 5585, column: 9)
!7456 = !DILocation(line: 5585, column: 10, scope: !7455)
!7457 = !DILocation(line: 5585, column: 9, scope: !1799)
!7458 = !DILocation(line: 5586, column: 9, scope: !7455)
!7459 = !DILocation(line: 5587, column: 34, scope: !1799)
!7460 = !DILocation(line: 5587, column: 11, scope: !1799)
!7461 = !DILocation(line: 5587, column: 9, scope: !1799)
!7462 = !DILocation(line: 5588, column: 9, scope: !7463)
!7463 = distinct !DILexicalBlock(scope: !1799, file: !616, line: 5588, column: 9)
!7464 = !DILocation(line: 5588, column: 13, scope: !7463)
!7465 = !DILocation(line: 5588, column: 9, scope: !1799)
!7466 = !DILocation(line: 5589, column: 16, scope: !7463)
!7467 = !DILocation(line: 5589, column: 9, scope: !7463)
!7468 = !DILocation(line: 5590, column: 28, scope: !1799)
!7469 = !DILocation(line: 5590, column: 12, scope: !1799)
!7470 = !DILocation(line: 5590, column: 5, scope: !1799)
!7471 = !DILocation(line: 5591, column: 1, scope: !1799)
!7472 = !DILocation(line: 5713, column: 32, scope: !1805)
!7473 = !DILocation(line: 5713, column: 48, scope: !1805)
!7474 = !DILocation(line: 5715, column: 5, scope: !1805)
!7475 = !DILocation(line: 5715, column: 11, scope: !1805)
!7476 = !DILocation(line: 5716, column: 5, scope: !1805)
!7477 = !DILocation(line: 5716, column: 24, scope: !1805)
!7478 = !DILocation(line: 5717, column: 5, scope: !1805)
!7479 = !DILocation(line: 5717, column: 15, scope: !1805)
!7480 = !DILocation(line: 5717, column: 21, scope: !1805)
!7481 = !DILocation(line: 5719, column: 34, scope: !7482)
!7482 = distinct !DILexicalBlock(scope: !1805, file: !616, line: 5719, column: 9)
!7483 = !DILocation(line: 5719, column: 10, scope: !7482)
!7484 = !DILocation(line: 5719, column: 9, scope: !1805)
!7485 = !DILocation(line: 5720, column: 9, scope: !7482)
!7486 = !DILocation(line: 5721, column: 24, scope: !7487)
!7487 = distinct !DILexicalBlock(scope: !1805, file: !616, line: 5721, column: 9)
!7488 = !DILocation(line: 5721, column: 9, scope: !7487)
!7489 = !DILocation(line: 5721, column: 9, scope: !1805)
!7490 = !DILocation(line: 5722, column: 16, scope: !7487)
!7491 = !DILocation(line: 5722, column: 9, scope: !7487)
!7492 = !DILocation(line: 5723, column: 11, scope: !1805)
!7493 = !DILocation(line: 5723, column: 9, scope: !1805)
!7494 = !DILocation(line: 5724, column: 10, scope: !7495)
!7495 = distinct !DILexicalBlock(scope: !1805, file: !616, line: 5724, column: 9)
!7496 = !DILocation(line: 5724, column: 9, scope: !1805)
!7497 = !DILocation(line: 5725, column: 9, scope: !7495)
!7498 = !DILocation(line: 5726, column: 38, scope: !1805)
!7499 = !{!7500, !3841, i64 0}
!7500 = !{!"sched_param", !3841, i64 0}
!7501 = !DILocation(line: 5726, column: 32, scope: !1805)
!7502 = !DILocation(line: 5726, column: 16, scope: !1805)
!7503 = !DILocation(line: 5726, column: 14, scope: !1805)
!7504 = !DILocation(line: 5727, column: 10, scope: !1819)
!7505 = !DILocation(line: 5727, column: 9, scope: !1805)
!7506 = !DILocation(line: 5728, column: 9, scope: !1818)
!7507 = !DILocation(line: 5728, column: 14, scope: !7508)
!7508 = !DILexicalBlockFile(scope: !1817, file: !616, discriminator: 1)
!7509 = !DILocation(line: 5728, column: 24, scope: !1817)
!7510 = !DILocation(line: 5728, column: 54, scope: !1817)
!7511 = !DILocation(line: 5728, column: 68, scope: !7512)
!7512 = distinct !DILexicalBlock(scope: !1817, file: !616, line: 5728, column: 65)
!7513 = !DILocation(line: 5728, column: 85, scope: !7512)
!7514 = !DILocation(line: 5728, column: 65, scope: !7512)
!7515 = !DILocation(line: 5728, column: 95, scope: !7512)
!7516 = !DILocation(line: 5728, column: 65, scope: !1817)
!7517 = !DILocation(line: 5728, column: 65, scope: !7518)
!7518 = !DILexicalBlockFile(scope: !1817, file: !616, discriminator: 2)
!7519 = !DILocation(line: 5728, column: 126, scope: !7520)
!7520 = !DILexicalBlockFile(scope: !7512, file: !616, discriminator: 3)
!7521 = !DILocation(line: 5728, column: 144, scope: !7512)
!7522 = !DILocation(line: 5728, column: 154, scope: !7512)
!7523 = !DILocation(line: 5728, column: 179, scope: !7512)
!7524 = !DILocation(line: 5728, column: 110, scope: !7512)
!7525 = !DILocation(line: 5728, column: 198, scope: !7526)
!7526 = !DILexicalBlockFile(scope: !1818, file: !616, discriminator: 4)
!7527 = !DILocation(line: 5728, column: 198, scope: !1817)
!7528 = !DILocation(line: 5728, column: 198, scope: !7529)
!7529 = !DILexicalBlockFile(scope: !1817, file: !616, discriminator: 5)
!7530 = !DILocation(line: 5729, column: 9, scope: !1818)
!7531 = !DILocation(line: 5731, column: 45, scope: !1805)
!7532 = !DILocation(line: 5731, column: 25, scope: !1805)
!7533 = !DILocation(line: 5731, column: 7, scope: !1805)
!7534 = !DILocation(line: 5731, column: 32, scope: !1805)
!7535 = !DILocation(line: 5731, column: 6, scope: !1805)
!7536 = !DILocation(line: 5731, column: 43, scope: !1805)
!7537 = !DILocation(line: 5732, column: 12, scope: !1805)
!7538 = !DILocation(line: 5732, column: 5, scope: !1805)
!7539 = !DILocation(line: 5733, column: 1, scope: !1805)
!7540 = !DILocation(line: 5603, column: 36, scope: !1820)
!7541 = !DILocation(line: 5603, column: 52, scope: !1820)
!7542 = !DILocation(line: 5605, column: 5, scope: !1820)
!7543 = !DILocation(line: 5605, column: 11, scope: !1820)
!7544 = !DILocation(line: 5606, column: 5, scope: !1820)
!7545 = !DILocation(line: 5606, column: 9, scope: !1820)
!7546 = !DILocation(line: 5608, column: 34, scope: !7547)
!7547 = distinct !DILexicalBlock(scope: !1820, file: !616, line: 5608, column: 9)
!7548 = !DILocation(line: 5608, column: 10, scope: !7547)
!7549 = !DILocation(line: 5608, column: 9, scope: !1820)
!7550 = !DILocation(line: 5609, column: 9, scope: !7547)
!7551 = !DILocation(line: 5610, column: 33, scope: !1820)
!7552 = !DILocation(line: 5610, column: 14, scope: !1820)
!7553 = !DILocation(line: 5610, column: 12, scope: !1820)
!7554 = !DILocation(line: 5611, column: 9, scope: !7555)
!7555 = distinct !DILexicalBlock(scope: !1820, file: !616, line: 5611, column: 9)
!7556 = !DILocation(line: 5611, column: 16, scope: !7555)
!7557 = !DILocation(line: 5611, column: 9, scope: !1820)
!7558 = !DILocation(line: 5612, column: 16, scope: !7555)
!7559 = !DILocation(line: 5612, column: 9, scope: !7555)
!7560 = !DILocation(line: 5613, column: 28, scope: !1820)
!7561 = !DILocation(line: 5613, column: 12, scope: !1820)
!7562 = !DILocation(line: 5613, column: 5, scope: !1820)
!7563 = !DILocation(line: 5614, column: 1, scope: !1820)
!7564 = !DILocation(line: 5763, column: 39, scope: !1826)
!7565 = !DILocation(line: 5763, column: 55, scope: !1826)
!7566 = !DILocation(line: 5765, column: 5, scope: !1826)
!7567 = !DILocation(line: 5765, column: 11, scope: !1826)
!7568 = !DILocation(line: 5766, column: 5, scope: !1826)
!7569 = !DILocation(line: 5766, column: 21, scope: !1826)
!7570 = !DILocation(line: 5768, column: 34, scope: !7571)
!7571 = distinct !DILexicalBlock(scope: !1826, file: !616, line: 5768, column: 9)
!7572 = !DILocation(line: 5768, column: 10, scope: !7571)
!7573 = !DILocation(line: 5768, column: 9, scope: !1826)
!7574 = !DILocation(line: 5769, column: 9, scope: !7571)
!7575 = !DILocation(line: 5770, column: 31, scope: !7576)
!7576 = distinct !DILexicalBlock(scope: !1826, file: !616, line: 5770, column: 9)
!7577 = !DILocation(line: 5770, column: 9, scope: !7576)
!7578 = !DILocation(line: 5770, column: 9, scope: !1826)
!7579 = !DILocation(line: 5771, column: 16, scope: !7576)
!7580 = !DILocation(line: 5771, column: 9, scope: !7576)
!7581 = !DILocation(line: 5772, column: 48, scope: !1826)
!7582 = !{!7583, !3894, i64 0}
!7583 = !{!"timespec", !3894, i64 0, !3894, i64 8}
!7584 = !DILocation(line: 5772, column: 31, scope: !1826)
!7585 = !DILocation(line: 5772, column: 71, scope: !1826)
!7586 = !{!7583, !3894, i64 8}
!7587 = !DILocation(line: 5772, column: 62, scope: !1826)
!7588 = !DILocation(line: 5772, column: 61, scope: !1826)
!7589 = !DILocation(line: 5772, column: 55, scope: !1826)
!7590 = !DILocation(line: 5772, column: 12, scope: !1826)
!7591 = !DILocation(line: 5772, column: 5, scope: !1826)
!7592 = !DILocation(line: 5773, column: 1, scope: !1826)
!7593 = !DILocation(line: 5741, column: 32, scope: !1832)
!7594 = !DILocation(line: 5741, column: 48, scope: !1832)
!7595 = !DILocation(line: 5743, column: 5, scope: !1832)
!7596 = !DILocation(line: 5743, column: 11, scope: !1832)
!7597 = !DILocation(line: 5744, column: 5, scope: !1832)
!7598 = !DILocation(line: 5744, column: 24, scope: !1832)
!7599 = !DILocation(line: 5746, column: 34, scope: !7600)
!7600 = distinct !DILexicalBlock(scope: !1832, file: !616, line: 5746, column: 9)
!7601 = !DILocation(line: 5746, column: 10, scope: !7600)
!7602 = !DILocation(line: 5746, column: 9, scope: !1832)
!7603 = !DILocation(line: 5748, column: 9, scope: !7600)
!7604 = !DILocation(line: 5749, column: 24, scope: !7605)
!7605 = distinct !DILexicalBlock(scope: !1832, file: !616, line: 5749, column: 9)
!7606 = !DILocation(line: 5749, column: 9, scope: !7605)
!7607 = !DILocation(line: 5749, column: 9, scope: !1832)
!7608 = !DILocation(line: 5750, column: 16, scope: !7605)
!7609 = !DILocation(line: 5750, column: 9, scope: !7605)
!7610 = !DILocation(line: 5751, column: 58, scope: !1832)
!7611 = !DILocation(line: 5751, column: 5, scope: !1832)
!7612 = !DILocation(line: 5752, column: 1, scope: !1832)
!7613 = !DILocation(line: 5683, column: 36, scope: !1846)
!7614 = !DILocation(line: 5683, column: 52, scope: !1846)
!7615 = !DILocation(line: 5685, column: 5, scope: !1846)
!7616 = !DILocation(line: 5685, column: 11, scope: !1846)
!7617 = !DILocation(line: 5686, column: 5, scope: !1846)
!7618 = !DILocation(line: 5686, column: 9, scope: !1846)
!7619 = !DILocation(line: 5687, column: 5, scope: !1846)
!7620 = !DILocation(line: 5687, column: 24, scope: !1846)
!7621 = !DILocation(line: 5689, column: 34, scope: !7622)
!7622 = distinct !DILexicalBlock(scope: !1846, file: !616, line: 5689, column: 9)
!7623 = !DILocation(line: 5689, column: 10, scope: !7622)
!7624 = !DILocation(line: 5689, column: 9, scope: !1846)
!7625 = !DILocation(line: 5691, column: 9, scope: !7622)
!7626 = !DILocation(line: 5698, column: 28, scope: !7627)
!7627 = distinct !DILexicalBlock(scope: !1846, file: !616, line: 5698, column: 9)
!7628 = !DILocation(line: 5698, column: 33, scope: !7627)
!7629 = !DILocation(line: 5698, column: 9, scope: !7627)
!7630 = !DILocation(line: 5698, column: 49, scope: !7627)
!7631 = !DILocation(line: 5698, column: 9, scope: !1846)
!7632 = !DILocation(line: 5699, column: 16, scope: !7627)
!7633 = !DILocation(line: 5699, column: 9, scope: !7627)
!7634 = !DILocation(line: 5700, column: 58, scope: !1846)
!7635 = !DILocation(line: 5700, column: 5, scope: !1846)
!7636 = !DILocation(line: 5701, column: 1, scope: !1846)
!7637 = !DILocation(line: 5782, column: 29, scope: !1853)
!7638 = !DILocation(line: 5782, column: 45, scope: !1853)
!7639 = !DILocation(line: 5784, column: 9, scope: !7640)
!7640 = distinct !DILexicalBlock(scope: !1853, file: !616, line: 5784, column: 9)
!7641 = !DILocation(line: 5784, column: 9, scope: !1853)
!7642 = !DILocation(line: 5785, column: 16, scope: !7640)
!7643 = !DILocation(line: 5785, column: 9, scope: !7640)
!7644 = !DILocation(line: 5786, column: 58, scope: !1853)
!7645 = !DILocation(line: 5786, column: 5, scope: !1853)
!7646 = !DILocation(line: 5787, column: 1, scope: !1853)
!7647 = !DILocation(line: 5799, column: 35, scope: !1857)
!7648 = !DILocation(line: 5799, column: 51, scope: !1857)
!7649 = !DILocation(line: 5801, column: 5, scope: !1857)
!7650 = !DILocation(line: 5801, column: 11, scope: !1857)
!7651 = !DILocation(line: 5802, column: 5, scope: !1857)
!7652 = !DILocation(line: 5802, column: 9, scope: !1857)
!7653 = !DILocation(line: 5803, column: 5, scope: !1857)
!7654 = !DILocation(line: 5803, column: 12, scope: !1857)
!7655 = !DILocation(line: 5804, column: 5, scope: !1857)
!7656 = !DILocation(line: 5804, column: 16, scope: !1857)
!7657 = !DILocation(line: 5805, column: 5, scope: !1857)
!7658 = !DILocation(line: 5805, column: 15, scope: !1857)
!7659 = !DILocation(line: 5805, column: 26, scope: !1857)
!7660 = !DILocation(line: 5805, column: 50, scope: !1857)
!7661 = !DILocation(line: 5807, column: 34, scope: !7662)
!7662 = distinct !DILexicalBlock(scope: !1857, file: !616, line: 5807, column: 9)
!7663 = !DILocation(line: 5807, column: 10, scope: !7662)
!7664 = !DILocation(line: 5807, column: 9, scope: !1857)
!7665 = !DILocation(line: 5809, column: 9, scope: !7662)
!7666 = !DILocation(line: 5811, column: 33, scope: !1857)
!7667 = !DILocation(line: 5811, column: 16, scope: !1857)
!7668 = !DILocation(line: 5811, column: 14, scope: !1857)
!7669 = !DILocation(line: 5812, column: 9, scope: !7670)
!7670 = distinct !DILexicalBlock(scope: !1857, file: !616, line: 5812, column: 9)
!7671 = !DILocation(line: 5812, column: 18, scope: !7670)
!7672 = !DILocation(line: 5812, column: 9, scope: !1857)
!7673 = !DILocation(line: 5813, column: 9, scope: !7670)
!7674 = !DILocation(line: 5815, column: 11, scope: !1857)
!7675 = !DILocation(line: 5816, column: 19, scope: !1857)
!7676 = !DILocation(line: 5816, column: 18, scope: !1857)
!7677 = !DILocation(line: 5816, column: 26, scope: !1857)
!7678 = !DILocation(line: 5816, column: 54, scope: !1857)
!7679 = !DILocation(line: 5816, column: 59, scope: !1857)
!7680 = !DILocation(line: 5816, column: 88, scope: !1857)
!7681 = !DILocation(line: 5816, column: 13, scope: !1857)
!7682 = !DILocation(line: 5817, column: 30, scope: !1857)
!7683 = !DILocation(line: 5817, column: 12, scope: !1857)
!7684 = !DILocation(line: 5817, column: 10, scope: !1857)
!7685 = !DILocation(line: 5818, column: 9, scope: !7686)
!7686 = distinct !DILexicalBlock(scope: !1857, file: !616, line: 5818, column: 9)
!7687 = !DILocation(line: 5818, column: 14, scope: !7686)
!7688 = !DILocation(line: 5818, column: 9, scope: !1857)
!7689 = !DILocation(line: 5819, column: 9, scope: !7690)
!7690 = distinct !DILexicalBlock(scope: !7686, file: !616, line: 5818, column: 29)
!7691 = !DILocation(line: 5820, column: 9, scope: !7690)
!7692 = !DILocation(line: 5822, column: 5, scope: !1857)
!7693 = !DILocation(line: 5822, column: 26, scope: !7694)
!7694 = !DILexicalBlockFile(scope: !1857, file: !616, discriminator: 1)
!7695 = !DILocation(line: 5822, column: 8, scope: !1857)
!7696 = !DILocation(line: 5822, column: 38, scope: !1857)
!7697 = !DILocation(line: 5822, column: 8, scope: !7698)
!7698 = !DILexicalBlockFile(scope: !1857, file: !616, discriminator: 2)
!7699 = !DILocation(line: 5824, column: 5, scope: !1857)
!7700 = !DILocation(line: 5824, column: 32, scope: !7701)
!7701 = !DILexicalBlockFile(scope: !7694, file: !616, discriminator: 2)
!7702 = !DILocation(line: 5824, column: 20, scope: !1857)
!7703 = !DILocation(line: 5824, column: 18, scope: !1857)
!7704 = !DILocation(line: 5825, column: 9, scope: !1877)
!7705 = !DILocation(line: 5825, column: 14, scope: !1877)
!7706 = !DILocation(line: 5826, column: 31, scope: !1881)
!7707 = !DILocation(line: 5826, column: 39, scope: !1881)
!7708 = !DILocation(line: 5826, column: 50, scope: !1881)
!7709 = !DILocation(line: 5826, column: 59, scope: !1881)
!7710 = !DILocation(line: 5826, column: 76, scope: !1881)
!7711 = !DILocation(line: 5826, column: 13, scope: !1877)
!7712 = !DILocation(line: 5827, column: 26, scope: !1880)
!7713 = !DILocation(line: 5830, column: 39, scope: !1880)
!7714 = !DILocation(line: 5830, column: 47, scope: !1880)
!7715 = !DILocation(line: 5827, column: 13, scope: !1880)
!7716 = !DILocation(line: 5831, column: 13, scope: !1880)
!7717 = !DILocation(line: 5831, column: 18, scope: !7718)
!7718 = !DILexicalBlockFile(scope: !1879, file: !616, discriminator: 1)
!7719 = !DILocation(line: 5831, column: 28, scope: !1879)
!7720 = !DILocation(line: 5831, column: 58, scope: !1879)
!7721 = !DILocation(line: 5831, column: 73, scope: !7722)
!7722 = distinct !DILexicalBlock(scope: !1879, file: !616, line: 5831, column: 70)
!7723 = !DILocation(line: 5831, column: 90, scope: !7722)
!7724 = !DILocation(line: 5831, column: 70, scope: !7722)
!7725 = !DILocation(line: 5831, column: 100, scope: !7722)
!7726 = !DILocation(line: 5831, column: 70, scope: !1879)
!7727 = !DILocation(line: 5831, column: 70, scope: !7728)
!7728 = !DILexicalBlockFile(scope: !1879, file: !616, discriminator: 2)
!7729 = !DILocation(line: 5831, column: 131, scope: !7730)
!7730 = !DILexicalBlockFile(scope: !7722, file: !616, discriminator: 3)
!7731 = !DILocation(line: 5831, column: 149, scope: !7722)
!7732 = !DILocation(line: 5831, column: 159, scope: !7722)
!7733 = !DILocation(line: 5831, column: 184, scope: !7722)
!7734 = !DILocation(line: 5831, column: 115, scope: !7722)
!7735 = !DILocation(line: 5831, column: 203, scope: !7736)
!7736 = !DILexicalBlockFile(scope: !1880, file: !616, discriminator: 4)
!7737 = !DILocation(line: 5831, column: 203, scope: !1879)
!7738 = !DILocation(line: 5831, column: 203, scope: !7739)
!7739 = !DILexicalBlockFile(scope: !1879, file: !616, discriminator: 5)
!7740 = !DILocation(line: 5832, column: 13, scope: !1880)
!7741 = !DILocation(line: 5834, column: 29, scope: !1877)
!7742 = !DILocation(line: 5834, column: 15, scope: !1877)
!7743 = !DILocation(line: 5834, column: 13, scope: !1877)
!7744 = !DILocation(line: 5835, column: 9, scope: !1877)
!7745 = !DILocation(line: 5835, column: 14, scope: !7746)
!7746 = !DILexicalBlockFile(scope: !1883, file: !616, discriminator: 1)
!7747 = !DILocation(line: 5835, column: 24, scope: !1883)
!7748 = !DILocation(line: 5835, column: 54, scope: !1883)
!7749 = !DILocation(line: 5835, column: 69, scope: !7750)
!7750 = distinct !DILexicalBlock(scope: !1883, file: !616, line: 5835, column: 66)
!7751 = !DILocation(line: 5835, column: 86, scope: !7750)
!7752 = !DILocation(line: 5835, column: 66, scope: !7750)
!7753 = !DILocation(line: 5835, column: 96, scope: !7750)
!7754 = !DILocation(line: 5835, column: 66, scope: !1883)
!7755 = !DILocation(line: 5835, column: 66, scope: !7756)
!7756 = !DILexicalBlockFile(scope: !1883, file: !616, discriminator: 2)
!7757 = !DILocation(line: 5835, column: 127, scope: !7758)
!7758 = !DILexicalBlockFile(scope: !7750, file: !616, discriminator: 3)
!7759 = !DILocation(line: 5835, column: 145, scope: !7750)
!7760 = !DILocation(line: 5835, column: 155, scope: !7750)
!7761 = !DILocation(line: 5835, column: 180, scope: !7750)
!7762 = !DILocation(line: 5835, column: 111, scope: !7750)
!7763 = !DILocation(line: 5835, column: 199, scope: !7764)
!7764 = !DILexicalBlockFile(scope: !1877, file: !616, discriminator: 4)
!7765 = !DILocation(line: 5835, column: 199, scope: !1883)
!7766 = !DILocation(line: 5835, column: 199, scope: !7767)
!7767 = !DILexicalBlockFile(scope: !1883, file: !616, discriminator: 5)
!7768 = !DILocation(line: 5836, column: 13, scope: !7769)
!7769 = distinct !DILexicalBlock(scope: !1877, file: !616, line: 5836, column: 13)
!7770 = !DILocation(line: 5836, column: 17, scope: !7769)
!7771 = !DILocation(line: 5836, column: 13, scope: !1877)
!7772 = !DILocation(line: 5837, column: 18, scope: !7773)
!7773 = distinct !DILexicalBlock(scope: !7774, file: !616, line: 5837, column: 17)
!7774 = distinct !DILexicalBlock(scope: !7769, file: !616, line: 5836, column: 22)
!7775 = !DILocation(line: 5837, column: 17, scope: !7774)
!7776 = !DILocation(line: 5838, column: 33, scope: !7773)
!7777 = !DILocation(line: 5838, column: 17, scope: !7773)
!7778 = !DILocation(line: 5839, column: 13, scope: !7774)
!7779 = !DILocation(line: 5841, column: 13, scope: !7780)
!7780 = distinct !DILexicalBlock(scope: !1877, file: !616, line: 5841, column: 13)
!7781 = !DILocation(line: 5841, column: 17, scope: !7780)
!7782 = !DILocation(line: 5841, column: 13, scope: !1877)
!7783 = !DILocation(line: 5842, column: 29, scope: !7784)
!7784 = distinct !DILexicalBlock(scope: !7780, file: !616, line: 5841, column: 35)
!7785 = !DILocation(line: 5842, column: 13, scope: !7784)
!7786 = !DILocation(line: 5843, column: 13, scope: !7784)
!7787 = !DILocation(line: 5845, column: 13, scope: !1886)
!7788 = !DILocation(line: 5845, column: 20, scope: !1886)
!7789 = !DILocation(line: 5845, column: 17, scope: !1886)
!7790 = !DILocation(line: 5845, column: 13, scope: !1877)
!7791 = !DILocation(line: 5847, column: 13, scope: !1885)
!7792 = !DILocation(line: 5847, column: 17, scope: !1885)
!7793 = !DILocation(line: 5847, column: 28, scope: !1885)
!7794 = !DILocation(line: 5848, column: 13, scope: !1885)
!7795 = !DILocation(line: 5848, column: 24, scope: !1885)
!7796 = !DILocation(line: 5849, column: 13, scope: !1885)
!7797 = !DILocation(line: 5849, column: 20, scope: !1885)
!7798 = !DILocation(line: 5850, column: 13, scope: !1885)
!7799 = !DILocation(line: 5850, column: 20, scope: !7800)
!7800 = !DILexicalBlockFile(scope: !7801, file: !616, discriminator: 2)
!7801 = !DILexicalBlockFile(scope: !1885, file: !616, discriminator: 1)
!7802 = !DILocation(line: 5850, column: 32, scope: !1885)
!7803 = !DILocation(line: 5850, column: 29, scope: !1885)
!7804 = !DILocation(line: 5851, column: 21, scope: !7805)
!7805 = distinct !DILexicalBlock(scope: !7806, file: !616, line: 5851, column: 21)
!7806 = distinct !DILexicalBlock(scope: !1885, file: !616, line: 5850, column: 37)
!7807 = !DILocation(line: 5851, column: 30, scope: !7805)
!7808 = !DILocation(line: 5851, column: 21, scope: !7806)
!7809 = !DILocation(line: 5852, column: 32, scope: !7805)
!7810 = !DILocation(line: 5852, column: 36, scope: !7805)
!7811 = !DILocation(line: 5852, column: 30, scope: !7805)
!7812 = !DILocation(line: 5852, column: 21, scope: !7805)
!7813 = !DILocation(line: 5854, column: 32, scope: !7805)
!7814 = !DILocation(line: 5854, column: 41, scope: !7805)
!7815 = !DILocation(line: 5854, column: 30, scope: !7805)
!7816 = !DILocation(line: 5856, column: 41, scope: !1885)
!7817 = !DILocation(line: 5856, column: 23, scope: !1885)
!7818 = !DILocation(line: 5856, column: 21, scope: !1885)
!7819 = !DILocation(line: 5857, column: 17, scope: !7820)
!7820 = distinct !DILexicalBlock(scope: !1885, file: !616, line: 5857, column: 17)
!7821 = !DILocation(line: 5857, column: 25, scope: !7820)
!7822 = !DILocation(line: 5857, column: 17, scope: !1885)
!7823 = !DILocation(line: 5858, column: 17, scope: !7824)
!7824 = distinct !DILexicalBlock(scope: !7820, file: !616, line: 5857, column: 40)
!7825 = !DILocation(line: 5859, column: 17, scope: !7824)
!7826 = !DILocation(line: 5861, column: 30, scope: !1885)
!7827 = !DILocation(line: 5861, column: 29, scope: !1885)
!7828 = !DILocation(line: 5861, column: 40, scope: !1885)
!7829 = !DILocation(line: 5861, column: 68, scope: !1885)
!7830 = !DILocation(line: 5861, column: 73, scope: !1885)
!7831 = !DILocation(line: 5861, column: 102, scope: !1885)
!7832 = !DILocation(line: 5861, column: 24, scope: !1885)
!7833 = !DILocation(line: 5862, column: 13, scope: !1885)
!7834 = !DILocation(line: 5862, column: 34, scope: !7801)
!7835 = !DILocation(line: 5862, column: 16, scope: !1885)
!7836 = !DILocation(line: 5862, column: 49, scope: !1885)
!7837 = !DILocation(line: 5862, column: 16, scope: !7838)
!7838 = !DILexicalBlockFile(scope: !1885, file: !616, discriminator: 2)
!7839 = !DILocation(line: 5863, column: 20, scope: !1885)
!7840 = !DILocation(line: 5863, column: 13, scope: !1885)
!7841 = !DILocation(line: 5863, column: 29, scope: !1885)
!7842 = !DILocation(line: 5863, column: 35, scope: !1885)
!7843 = !DILocation(line: 5864, column: 30, scope: !1885)
!7844 = !DILocation(line: 5864, column: 13, scope: !1885)
!7845 = !DILocation(line: 5865, column: 23, scope: !1885)
!7846 = !DILocation(line: 5865, column: 21, scope: !1885)
!7847 = !DILocation(line: 5866, column: 20, scope: !1885)
!7848 = !DILocation(line: 5866, column: 18, scope: !1885)
!7849 = !DILocation(line: 5867, column: 21, scope: !1885)
!7850 = !DILocation(line: 5867, column: 19, scope: !1885)
!7851 = !DILocation(line: 5868, column: 9, scope: !1886)
!7852 = !DILocation(line: 5868, column: 9, scope: !7853)
!7853 = !DILexicalBlockFile(scope: !1886, file: !616, discriminator: 1)
!7854 = !DILocation(line: 5868, column: 9, scope: !1885)
!7855 = !DILocation(line: 5869, column: 27, scope: !1890)
!7856 = !DILocation(line: 5869, column: 34, scope: !1890)
!7857 = !DILocation(line: 5869, column: 43, scope: !1890)
!7858 = !DILocation(line: 5869, column: 49, scope: !1890)
!7859 = !DILocation(line: 5869, column: 62, scope: !1890)
!7860 = !DILocation(line: 5869, column: 59, scope: !1890)
!7861 = !DILocation(line: 5869, column: 55, scope: !1890)
!7862 = !DILocation(line: 5869, column: 171, scope: !7863)
!7863 = !DILexicalBlockFile(scope: !1890, file: !616, discriminator: 1)
!7864 = !DILocation(line: 5869, column: 178, scope: !1890)
!7865 = !DILocation(line: 5869, column: 166, scope: !1890)
!7866 = !DILocation(line: 5869, column: 110, scope: !1890)
!7867 = !DILocation(line: 5869, column: 117, scope: !1890)
!7868 = !DILocation(line: 5869, column: 92, scope: !1890)
!7869 = !DILocation(line: 5869, column: 99, scope: !1890)
!7870 = !DILocation(line: 5869, column: 90, scope: !1890)
!7871 = !DILocation(line: 5869, column: 74, scope: !1890)
!7872 = !DILocation(line: 5869, column: 147, scope: !1890)
!7873 = !DILocation(line: 5869, column: 49, scope: !7874)
!7874 = !DILexicalBlockFile(scope: !1890, file: !616, discriminator: 2)
!7875 = !DILocation(line: 5869, column: 27, scope: !7876)
!7876 = !DILexicalBlockFile(scope: !7877, file: !616, discriminator: 4)
!7877 = !DILexicalBlockFile(scope: !1890, file: !616, discriminator: 3)
!7878 = !DILocation(line: 5869, column: 214, scope: !1877)
!7879 = !DILocation(line: 5869, column: 214, scope: !1890)
!7880 = !DILocation(line: 5870, column: 5, scope: !1857)
!7881 = !DILocation(line: 5870, column: 5, scope: !7694)
!7882 = !DILocation(line: 5871, column: 5, scope: !1857)
!7883 = !DILocation(line: 5871, column: 10, scope: !7884)
!7884 = !DILexicalBlockFile(scope: !1892, file: !616, discriminator: 1)
!7885 = !DILocation(line: 5871, column: 20, scope: !1892)
!7886 = !DILocation(line: 5871, column: 43, scope: !1892)
!7887 = !DILocation(line: 5871, column: 58, scope: !1896)
!7888 = !DILocation(line: 5871, column: 66, scope: !1896)
!7889 = !DILocation(line: 5871, column: 58, scope: !1892)
!7890 = !DILocation(line: 5871, column: 94, scope: !7891)
!7891 = !DILexicalBlockFile(scope: !1895, file: !616, discriminator: 2)
!7892 = !DILocation(line: 5871, column: 108, scope: !1895)
!7893 = !DILocation(line: 5871, column: 113, scope: !7894)
!7894 = !DILexicalBlockFile(scope: !1894, file: !616, discriminator: 4)
!7895 = !DILocation(line: 5871, column: 123, scope: !1894)
!7896 = !DILocation(line: 5871, column: 153, scope: !1894)
!7897 = !DILocation(line: 5871, column: 171, scope: !7898)
!7898 = distinct !DILexicalBlock(scope: !1894, file: !616, line: 5871, column: 168)
!7899 = !DILocation(line: 5871, column: 188, scope: !7898)
!7900 = !DILocation(line: 5871, column: 168, scope: !7898)
!7901 = !DILocation(line: 5871, column: 198, scope: !7898)
!7902 = !DILocation(line: 5871, column: 168, scope: !1894)
!7903 = !DILocation(line: 5871, column: 168, scope: !7904)
!7904 = !DILexicalBlockFile(scope: !1894, file: !616, discriminator: 5)
!7905 = !DILocation(line: 5871, column: 229, scope: !7906)
!7906 = !DILexicalBlockFile(scope: !7898, file: !616, discriminator: 6)
!7907 = !DILocation(line: 5871, column: 247, scope: !7898)
!7908 = !DILocation(line: 5871, column: 257, scope: !7898)
!7909 = !DILocation(line: 5871, column: 282, scope: !7898)
!7910 = !DILocation(line: 5871, column: 213, scope: !7898)
!7911 = !DILocation(line: 5871, column: 301, scope: !7912)
!7912 = !DILexicalBlockFile(scope: !1895, file: !616, discriminator: 7)
!7913 = !DILocation(line: 5871, column: 301, scope: !1894)
!7914 = !DILocation(line: 5871, column: 301, scope: !7915)
!7915 = !DILexicalBlockFile(scope: !1894, file: !616, discriminator: 8)
!7916 = !DILocation(line: 5871, column: 314, scope: !7917)
!7917 = !DILexicalBlockFile(scope: !1895, file: !616, discriminator: 9)
!7918 = !DILocation(line: 5871, column: 316, scope: !7919)
!7919 = !DILexicalBlockFile(scope: !7920, file: !616, discriminator: 10)
!7920 = !DILexicalBlockFile(scope: !1857, file: !616, discriminator: 3)
!7921 = !DILocation(line: 5871, column: 316, scope: !1892)
!7922 = !DILocation(line: 5871, column: 316, scope: !7923)
!7923 = !DILexicalBlockFile(scope: !1892, file: !616, discriminator: 11)
!7924 = !DILocation(line: 5873, column: 27, scope: !7925)
!7925 = distinct !DILexicalBlock(scope: !1857, file: !616, line: 5873, column: 9)
!7926 = !DILocation(line: 5873, column: 32, scope: !7925)
!7927 = !DILocation(line: 5873, column: 41, scope: !7925)
!7928 = !DILocation(line: 5873, column: 9, scope: !7925)
!7929 = !DILocation(line: 5873, column: 9, scope: !1857)
!7930 = !DILocation(line: 5874, column: 9, scope: !7931)
!7931 = distinct !DILexicalBlock(scope: !7925, file: !616, line: 5873, column: 48)
!7932 = !DILocation(line: 5875, column: 9, scope: !7931)
!7933 = !DILocation(line: 5877, column: 22, scope: !1857)
!7934 = !DILocation(line: 5877, column: 5, scope: !1857)
!7935 = !DILocation(line: 5878, column: 58, scope: !1857)
!7936 = !DILocation(line: 5878, column: 5, scope: !1857)
!7937 = !DILocation(line: 5881, column: 9, scope: !7938)
!7938 = distinct !DILexicalBlock(scope: !1857, file: !616, line: 5881, column: 9)
!7939 = !DILocation(line: 5881, column: 9, scope: !1857)
!7940 = !DILocation(line: 5882, column: 26, scope: !7938)
!7941 = !DILocation(line: 5882, column: 9, scope: !7938)
!7942 = !DILocation(line: 5883, column: 5, scope: !1857)
!7943 = !DILocation(line: 5883, column: 10, scope: !7944)
!7944 = !DILexicalBlockFile(scope: !1898, file: !616, discriminator: 1)
!7945 = !DILocation(line: 5883, column: 20, scope: !1898)
!7946 = !DILocation(line: 5883, column: 51, scope: !1898)
!7947 = !DILocation(line: 5883, column: 66, scope: !1901)
!7948 = !DILocation(line: 5883, column: 82, scope: !1901)
!7949 = !DILocation(line: 5883, column: 66, scope: !1898)
!7950 = !DILocation(line: 5883, column: 97, scope: !7951)
!7951 = !DILexicalBlockFile(scope: !1901, file: !616, discriminator: 2)
!7952 = !DILocation(line: 5883, column: 102, scope: !7953)
!7953 = !DILexicalBlockFile(scope: !1900, file: !616, discriminator: 4)
!7954 = !DILocation(line: 5883, column: 112, scope: !1900)
!7955 = !DILocation(line: 5883, column: 142, scope: !1900)
!7956 = !DILocation(line: 5883, column: 168, scope: !7957)
!7957 = distinct !DILexicalBlock(scope: !1900, file: !616, line: 5883, column: 165)
!7958 = !DILocation(line: 5883, column: 185, scope: !7957)
!7959 = !DILocation(line: 5883, column: 165, scope: !7957)
!7960 = !DILocation(line: 5883, column: 195, scope: !7957)
!7961 = !DILocation(line: 5883, column: 165, scope: !1900)
!7962 = !DILocation(line: 5883, column: 165, scope: !7963)
!7963 = !DILexicalBlockFile(scope: !1900, file: !616, discriminator: 5)
!7964 = !DILocation(line: 5883, column: 226, scope: !7965)
!7965 = !DILexicalBlockFile(scope: !7957, file: !616, discriminator: 6)
!7966 = !DILocation(line: 5883, column: 244, scope: !7957)
!7967 = !DILocation(line: 5883, column: 254, scope: !7957)
!7968 = !DILocation(line: 5883, column: 279, scope: !7957)
!7969 = !DILocation(line: 5883, column: 210, scope: !7957)
!7970 = !DILocation(line: 5883, column: 298, scope: !7971)
!7971 = !DILexicalBlockFile(scope: !1901, file: !616, discriminator: 7)
!7972 = !DILocation(line: 5883, column: 298, scope: !1900)
!7973 = !DILocation(line: 5883, column: 298, scope: !7974)
!7974 = !DILexicalBlockFile(scope: !1900, file: !616, discriminator: 8)
!7975 = !DILocation(line: 5883, column: 298, scope: !7976)
!7976 = !DILexicalBlockFile(scope: !1900, file: !616, discriminator: 9)
!7977 = !DILocation(line: 5883, column: 311, scope: !7919)
!7978 = !DILocation(line: 5883, column: 311, scope: !1898)
!7979 = !DILocation(line: 5883, column: 311, scope: !7980)
!7980 = !DILexicalBlockFile(scope: !1898, file: !616, discriminator: 11)
!7981 = !DILocation(line: 5884, column: 5, scope: !1857)
!7982 = !DILocation(line: 5885, column: 1, scope: !1857)
!7983 = !DILocation(line: 5893, column: 35, scope: !1902)
!7984 = !DILocation(line: 5893, column: 51, scope: !1902)
!7985 = !DILocation(line: 5895, column: 5, scope: !1902)
!7986 = !DILocation(line: 5895, column: 11, scope: !1902)
!7987 = !DILocation(line: 5896, column: 5, scope: !1902)
!7988 = !DILocation(line: 5896, column: 9, scope: !1902)
!7989 = !DILocation(line: 5896, column: 14, scope: !1902)
!7990 = !DILocation(line: 5896, column: 21, scope: !1902)
!7991 = !DILocation(line: 5897, column: 5, scope: !1902)
!7992 = !DILocation(line: 5897, column: 12, scope: !1902)
!7993 = !DILocation(line: 5898, column: 5, scope: !1902)
!7994 = !DILocation(line: 5898, column: 16, scope: !1902)
!7995 = !DILocation(line: 5899, column: 5, scope: !1902)
!7996 = !DILocation(line: 5899, column: 15, scope: !1902)
!7997 = !DILocation(line: 5901, column: 34, scope: !7998)
!7998 = distinct !DILexicalBlock(scope: !1902, file: !616, line: 5901, column: 9)
!7999 = !DILocation(line: 5901, column: 10, scope: !7998)
!8000 = !DILocation(line: 5901, column: 9, scope: !1902)
!8001 = !DILocation(line: 5903, column: 9, scope: !7998)
!8002 = !DILocation(line: 5905, column: 11, scope: !1902)
!8003 = !DILocation(line: 5906, column: 5, scope: !1902)
!8004 = !DILocation(line: 5906, column: 5, scope: !8005)
!8005 = !DILexicalBlockFile(scope: !8006, file: !616, discriminator: 2)
!8006 = !DILexicalBlockFile(scope: !1902, file: !616, discriminator: 1)
!8007 = !DILocation(line: 5907, column: 23, scope: !8008)
!8008 = distinct !DILexicalBlock(scope: !1902, file: !616, line: 5906, column: 15)
!8009 = !DILocation(line: 5907, column: 22, scope: !8008)
!8010 = !DILocation(line: 5907, column: 30, scope: !8008)
!8011 = !DILocation(line: 5907, column: 58, scope: !8008)
!8012 = !DILocation(line: 5907, column: 63, scope: !8008)
!8013 = !DILocation(line: 5907, column: 92, scope: !8008)
!8014 = !DILocation(line: 5907, column: 17, scope: !8008)
!8015 = !DILocation(line: 5908, column: 34, scope: !8008)
!8016 = !DILocation(line: 5908, column: 16, scope: !8008)
!8017 = !DILocation(line: 5908, column: 14, scope: !8008)
!8018 = !DILocation(line: 5909, column: 13, scope: !8019)
!8019 = distinct !DILexicalBlock(scope: !8008, file: !616, line: 5909, column: 13)
!8020 = !DILocation(line: 5909, column: 18, scope: !8019)
!8021 = !DILocation(line: 5909, column: 13, scope: !8008)
!8022 = !DILocation(line: 5910, column: 20, scope: !8019)
!8023 = !DILocation(line: 5910, column: 13, scope: !8019)
!8024 = !DILocation(line: 5911, column: 31, scope: !8025)
!8025 = distinct !DILexicalBlock(scope: !8008, file: !616, line: 5911, column: 13)
!8026 = !DILocation(line: 5911, column: 36, scope: !8025)
!8027 = !DILocation(line: 5911, column: 45, scope: !8025)
!8028 = !DILocation(line: 5911, column: 13, scope: !8025)
!8029 = !DILocation(line: 5911, column: 51, scope: !8025)
!8030 = !DILocation(line: 5911, column: 13, scope: !8008)
!8031 = !DILocation(line: 5912, column: 13, scope: !8025)
!8032 = !DILocation(line: 5913, column: 26, scope: !8008)
!8033 = !DILocation(line: 5913, column: 9, scope: !8008)
!8034 = !DILocation(line: 5914, column: 15, scope: !8035)
!8035 = distinct !DILexicalBlock(scope: !8008, file: !616, line: 5914, column: 13)
!8036 = !DILocation(line: 5914, column: 14, scope: !8035)
!8037 = !DILocation(line: 5914, column: 36, scope: !8035)
!8038 = !DILocation(line: 5914, column: 13, scope: !8008)
!8039 = !DILocation(line: 5915, column: 20, scope: !8035)
!8040 = !DILocation(line: 5915, column: 13, scope: !8035)
!8041 = !DILocation(line: 5916, column: 13, scope: !8042)
!8042 = distinct !DILexicalBlock(scope: !8008, file: !616, line: 5916, column: 13)
!8043 = !DILocation(line: 5916, column: 19, scope: !8042)
!8044 = !DILocation(line: 5916, column: 13, scope: !8008)
!8045 = !DILocation(line: 5917, column: 29, scope: !8046)
!8046 = distinct !DILexicalBlock(scope: !8042, file: !616, line: 5916, column: 37)
!8047 = !DILocation(line: 5917, column: 13, scope: !8046)
!8048 = !DILocation(line: 5919, column: 13, scope: !8046)
!8049 = !DILocation(line: 5921, column: 17, scope: !8008)
!8050 = !DILocation(line: 5921, column: 23, scope: !8008)
!8051 = !DILocation(line: 5921, column: 15, scope: !8008)
!8052 = !DILocation(line: 5924, column: 11, scope: !1902)
!8053 = !DILocation(line: 5924, column: 9, scope: !1902)
!8054 = !DILocation(line: 5925, column: 9, scope: !8055)
!8055 = distinct !DILexicalBlock(scope: !1902, file: !616, line: 5925, column: 9)
!8056 = !DILocation(line: 5925, column: 13, scope: !8055)
!8057 = !DILocation(line: 5925, column: 9, scope: !1902)
!8058 = !DILocation(line: 5926, column: 9, scope: !8055)
!8059 = !DILocation(line: 5927, column: 14, scope: !1918)
!8060 = !DILocation(line: 5927, column: 45, scope: !1918)
!8061 = !DILocation(line: 5927, column: 54, scope: !1918)
!8062 = !DILocation(line: 5927, column: 27, scope: !1918)
!8063 = !DILocation(line: 5927, column: 25, scope: !1918)
!8064 = !DILocation(line: 5927, column: 10, scope: !1918)
!8065 = !DILocation(line: 5927, column: 61, scope: !8066)
!8066 = !DILexicalBlockFile(scope: !8067, file: !616, discriminator: 2)
!8067 = !DILexicalBlockFile(scope: !1917, file: !616, discriminator: 1)
!8068 = !DILocation(line: 5927, column: 5, scope: !1918)
!8069 = !DILocation(line: 5928, column: 31, scope: !1914)
!8070 = !DILocation(line: 5928, column: 38, scope: !1914)
!8071 = !DILocation(line: 5928, column: 47, scope: !1914)
!8072 = !DILocation(line: 5928, column: 46, scope: !1914)
!8073 = !DILocation(line: 5928, column: 53, scope: !1914)
!8074 = !DILocation(line: 5928, column: 66, scope: !1914)
!8075 = !DILocation(line: 5928, column: 63, scope: !1914)
!8076 = !DILocation(line: 5928, column: 59, scope: !1914)
!8077 = !DILocation(line: 5928, column: 121, scope: !8078)
!8078 = !DILexicalBlockFile(scope: !1914, file: !616, discriminator: 1)
!8079 = !DILocation(line: 5928, column: 128, scope: !1914)
!8080 = !DILocation(line: 5928, column: 103, scope: !1914)
!8081 = !DILocation(line: 5928, column: 110, scope: !1914)
!8082 = !DILocation(line: 5928, column: 101, scope: !1914)
!8083 = !DILocation(line: 5928, column: 79, scope: !1914)
!8084 = !DILocation(line: 5928, column: 181, scope: !1914)
!8085 = !DILocation(line: 5928, column: 188, scope: !1914)
!8086 = !DILocation(line: 5928, column: 176, scope: !1914)
!8087 = !DILocation(line: 5928, column: 158, scope: !1914)
!8088 = !DILocation(line: 5928, column: 220, scope: !1914)
!8089 = !DILocation(line: 5928, column: 53, scope: !8090)
!8090 = !DILexicalBlockFile(scope: !1914, file: !616, discriminator: 2)
!8091 = !DILocation(line: 5928, column: 31, scope: !8092)
!8092 = !DILexicalBlockFile(scope: !8093, file: !616, discriminator: 4)
!8093 = !DILexicalBlockFile(scope: !1914, file: !616, discriminator: 3)
!8094 = !DILocation(line: 5928, column: 230, scope: !1915)
!8095 = !DILocation(line: 5928, column: 230, scope: !1914)
!8096 = !DILocation(line: 5928, column: 28, scope: !1915)
!8097 = !DILocation(line: 5928, column: 13, scope: !1916)
!8098 = !DILocation(line: 5929, column: 13, scope: !1920)
!8099 = !DILocation(line: 5929, column: 23, scope: !1920)
!8100 = !DILocation(line: 5929, column: 49, scope: !1920)
!8101 = !DILocation(line: 5929, column: 33, scope: !1920)
!8102 = !DILocation(line: 5930, column: 13, scope: !1920)
!8103 = !DILocation(line: 5931, column: 17, scope: !8104)
!8104 = distinct !DILexicalBlock(scope: !1920, file: !616, line: 5931, column: 17)
!8105 = !DILocation(line: 5931, column: 25, scope: !8104)
!8106 = !DILocation(line: 5931, column: 17, scope: !1920)
!8107 = !DILocation(line: 5932, column: 17, scope: !8104)
!8108 = !DILocation(line: 5933, column: 27, scope: !1924)
!8109 = !DILocation(line: 5933, column: 32, scope: !1924)
!8110 = !DILocation(line: 5933, column: 17, scope: !1924)
!8111 = !DILocation(line: 5933, column: 17, scope: !1920)
!8112 = !DILocation(line: 5934, column: 17, scope: !1923)
!8113 = !DILocation(line: 5934, column: 22, scope: !8114)
!8114 = !DILexicalBlockFile(scope: !1922, file: !616, discriminator: 1)
!8115 = !DILocation(line: 5934, column: 32, scope: !1922)
!8116 = !DILocation(line: 5934, column: 62, scope: !1922)
!8117 = !DILocation(line: 5934, column: 80, scope: !8118)
!8118 = distinct !DILexicalBlock(scope: !1922, file: !616, line: 5934, column: 77)
!8119 = !DILocation(line: 5934, column: 97, scope: !8118)
!8120 = !DILocation(line: 5934, column: 77, scope: !8118)
!8121 = !DILocation(line: 5934, column: 107, scope: !8118)
!8122 = !DILocation(line: 5934, column: 77, scope: !1922)
!8123 = !DILocation(line: 5934, column: 77, scope: !8124)
!8124 = !DILexicalBlockFile(scope: !1922, file: !616, discriminator: 2)
!8125 = !DILocation(line: 5934, column: 138, scope: !8126)
!8126 = !DILexicalBlockFile(scope: !8118, file: !616, discriminator: 3)
!8127 = !DILocation(line: 5934, column: 156, scope: !8118)
!8128 = !DILocation(line: 5934, column: 166, scope: !8118)
!8129 = !DILocation(line: 5934, column: 191, scope: !8118)
!8130 = !DILocation(line: 5934, column: 122, scope: !8118)
!8131 = !DILocation(line: 5934, column: 210, scope: !8132)
!8132 = !DILexicalBlockFile(scope: !1923, file: !616, discriminator: 4)
!8133 = !DILocation(line: 5934, column: 210, scope: !1922)
!8134 = !DILocation(line: 5934, column: 210, scope: !8135)
!8135 = !DILexicalBlockFile(scope: !1922, file: !616, discriminator: 5)
!8136 = !DILocation(line: 5935, column: 17, scope: !1923)
!8137 = !DILocation(line: 5937, column: 13, scope: !1920)
!8138 = !DILocation(line: 5937, column: 18, scope: !8139)
!8139 = !DILexicalBlockFile(scope: !1926, file: !616, discriminator: 1)
!8140 = !DILocation(line: 5937, column: 28, scope: !1926)
!8141 = !DILocation(line: 5937, column: 58, scope: !1926)
!8142 = !DILocation(line: 5937, column: 76, scope: !8143)
!8143 = distinct !DILexicalBlock(scope: !1926, file: !616, line: 5937, column: 73)
!8144 = !DILocation(line: 5937, column: 93, scope: !8143)
!8145 = !DILocation(line: 5937, column: 73, scope: !8143)
!8146 = !DILocation(line: 5937, column: 103, scope: !8143)
!8147 = !DILocation(line: 5937, column: 73, scope: !1926)
!8148 = !DILocation(line: 5937, column: 73, scope: !8149)
!8149 = !DILexicalBlockFile(scope: !1926, file: !616, discriminator: 2)
!8150 = !DILocation(line: 5937, column: 134, scope: !8151)
!8151 = !DILexicalBlockFile(scope: !8143, file: !616, discriminator: 3)
!8152 = !DILocation(line: 5937, column: 152, scope: !8143)
!8153 = !DILocation(line: 5937, column: 162, scope: !8143)
!8154 = !DILocation(line: 5937, column: 187, scope: !8143)
!8155 = !DILocation(line: 5937, column: 118, scope: !8143)
!8156 = !DILocation(line: 5937, column: 206, scope: !8157)
!8157 = !DILexicalBlockFile(scope: !1920, file: !616, discriminator: 4)
!8158 = !DILocation(line: 5937, column: 206, scope: !1926)
!8159 = !DILocation(line: 5937, column: 206, scope: !8160)
!8160 = !DILexicalBlockFile(scope: !1926, file: !616, discriminator: 5)
!8161 = !DILocation(line: 5938, column: 9, scope: !1915)
!8162 = !DILocation(line: 5938, column: 9, scope: !8163)
!8163 = !DILexicalBlockFile(scope: !1915, file: !616, discriminator: 1)
!8164 = !DILocation(line: 5938, column: 9, scope: !1920)
!8165 = !DILocation(line: 5939, column: 5, scope: !1916)
!8166 = !DILocation(line: 5927, column: 71, scope: !1917)
!8167 = !DILocation(line: 5927, column: 5, scope: !1917)
!8168 = !DILocation(line: 5940, column: 22, scope: !1902)
!8169 = !DILocation(line: 5940, column: 5, scope: !1902)
!8170 = !DILocation(line: 5941, column: 12, scope: !1902)
!8171 = !DILocation(line: 5941, column: 5, scope: !1902)
!8172 = !DILocation(line: 5944, column: 9, scope: !8173)
!8173 = distinct !DILexicalBlock(scope: !1902, file: !616, line: 5944, column: 9)
!8174 = !DILocation(line: 5944, column: 9, scope: !1902)
!8175 = !DILocation(line: 5945, column: 26, scope: !8173)
!8176 = !DILocation(line: 5945, column: 9, scope: !8173)
!8177 = !DILocation(line: 5946, column: 5, scope: !1902)
!8178 = !DILocation(line: 5946, column: 10, scope: !8179)
!8179 = !DILexicalBlockFile(scope: !1928, file: !616, discriminator: 1)
!8180 = !DILocation(line: 5946, column: 20, scope: !1928)
!8181 = !DILocation(line: 5946, column: 51, scope: !1928)
!8182 = !DILocation(line: 5946, column: 61, scope: !1931)
!8183 = !DILocation(line: 5946, column: 77, scope: !1931)
!8184 = !DILocation(line: 5946, column: 61, scope: !1928)
!8185 = !DILocation(line: 5946, column: 92, scope: !8186)
!8186 = !DILexicalBlockFile(scope: !1931, file: !616, discriminator: 2)
!8187 = !DILocation(line: 5946, column: 97, scope: !8188)
!8188 = !DILexicalBlockFile(scope: !1930, file: !616, discriminator: 4)
!8189 = !DILocation(line: 5946, column: 107, scope: !1930)
!8190 = !DILocation(line: 5946, column: 137, scope: !1930)
!8191 = !DILocation(line: 5946, column: 163, scope: !8192)
!8192 = distinct !DILexicalBlock(scope: !1930, file: !616, line: 5946, column: 160)
!8193 = !DILocation(line: 5946, column: 180, scope: !8192)
!8194 = !DILocation(line: 5946, column: 160, scope: !8192)
!8195 = !DILocation(line: 5946, column: 190, scope: !8192)
!8196 = !DILocation(line: 5946, column: 160, scope: !1930)
!8197 = !DILocation(line: 5946, column: 160, scope: !8198)
!8198 = !DILexicalBlockFile(scope: !1930, file: !616, discriminator: 5)
!8199 = !DILocation(line: 5946, column: 221, scope: !8200)
!8200 = !DILexicalBlockFile(scope: !8192, file: !616, discriminator: 6)
!8201 = !DILocation(line: 5946, column: 239, scope: !8192)
!8202 = !DILocation(line: 5946, column: 249, scope: !8192)
!8203 = !DILocation(line: 5946, column: 274, scope: !8192)
!8204 = !DILocation(line: 5946, column: 205, scope: !8192)
!8205 = !DILocation(line: 5946, column: 293, scope: !8206)
!8206 = !DILexicalBlockFile(scope: !1931, file: !616, discriminator: 7)
!8207 = !DILocation(line: 5946, column: 293, scope: !1930)
!8208 = !DILocation(line: 5946, column: 293, scope: !8209)
!8209 = !DILexicalBlockFile(scope: !1930, file: !616, discriminator: 8)
!8210 = !DILocation(line: 5946, column: 293, scope: !8211)
!8211 = !DILexicalBlockFile(scope: !1930, file: !616, discriminator: 9)
!8212 = !DILocation(line: 5946, column: 306, scope: !8213)
!8213 = !DILexicalBlockFile(scope: !8214, file: !616, discriminator: 10)
!8214 = !DILexicalBlockFile(scope: !1902, file: !616, discriminator: 3)
!8215 = !DILocation(line: 5946, column: 306, scope: !1928)
!8216 = !DILocation(line: 5946, column: 306, scope: !8217)
!8217 = !DILexicalBlockFile(scope: !1928, file: !616, discriminator: 11)
!8218 = !DILocation(line: 5947, column: 5, scope: !1902)
!8219 = !DILocation(line: 5948, column: 1, scope: !1902)
!8220 = !DILocation(line: 5986, column: 25, scope: !1932)
!8221 = !DILocation(line: 5986, column: 41, scope: !1932)
!8222 = !DILocation(line: 5988, column: 5, scope: !1932)
!8223 = !DILocation(line: 5988, column: 9, scope: !1932)
!8224 = !DILocation(line: 5988, column: 25, scope: !1932)
!8225 = !DILocation(line: 6000, column: 9, scope: !8226)
!8226 = distinct !DILexicalBlock(scope: !1932, file: !616, line: 6000, column: 9)
!8227 = !DILocation(line: 6000, column: 76, scope: !8226)
!8228 = !DILocation(line: 6000, column: 9, scope: !1932)
!8229 = !DILocation(line: 6001, column: 9, scope: !8226)
!8230 = !DILocation(line: 6003, column: 29, scope: !8231)
!8231 = distinct !DILexicalBlock(scope: !1932, file: !616, line: 6003, column: 9)
!8232 = !DILocation(line: 6003, column: 9, scope: !8231)
!8233 = !DILocation(line: 6003, column: 55, scope: !8231)
!8234 = !DILocation(line: 6003, column: 9, scope: !1932)
!8235 = !DILocation(line: 6004, column: 9, scope: !8231)
!8236 = !DILocation(line: 6005, column: 29, scope: !8237)
!8237 = distinct !DILexicalBlock(scope: !1932, file: !616, line: 6005, column: 9)
!8238 = !DILocation(line: 6005, column: 9, scope: !8237)
!8239 = !DILocation(line: 6005, column: 54, scope: !8237)
!8240 = !DILocation(line: 6005, column: 9, scope: !1932)
!8241 = !DILocation(line: 6006, column: 9, scope: !8237)
!8242 = !DILocation(line: 6060, column: 41, scope: !1932)
!8243 = !DILocation(line: 6060, column: 52, scope: !1932)
!8244 = !DILocation(line: 6060, column: 12, scope: !1932)
!8245 = !DILocation(line: 6060, column: 5, scope: !1932)
!8246 = !DILocation(line: 6063, column: 5, scope: !1932)
!8247 = !DILocation(line: 6067, column: 9, scope: !8248)
!8248 = distinct !DILexicalBlock(scope: !1932, file: !616, line: 6067, column: 9)
!8249 = !DILocation(line: 6067, column: 19, scope: !8248)
!8250 = !DILocation(line: 6067, column: 9, scope: !1932)
!8251 = !DILocation(line: 6068, column: 15, scope: !8248)
!8252 = !DILocation(line: 6068, column: 9, scope: !8248)
!8253 = !DILocation(line: 6069, column: 9, scope: !8254)
!8254 = distinct !DILexicalBlock(scope: !1932, file: !616, line: 6069, column: 9)
!8255 = !DILocation(line: 6069, column: 18, scope: !8254)
!8256 = !DILocation(line: 6069, column: 9, scope: !1932)
!8257 = !DILocation(line: 6070, column: 15, scope: !8254)
!8258 = !DILocation(line: 6070, column: 9, scope: !8254)
!8259 = !DILocation(line: 6071, column: 5, scope: !1932)
!8260 = !DILocation(line: 6072, column: 1, scope: !1932)
!8261 = !DILocation(line: 6083, column: 25, scope: !1938)
!8262 = !DILocation(line: 6083, column: 41, scope: !1938)
!8263 = !DILocation(line: 6085, column: 5, scope: !1938)
!8264 = !DILocation(line: 6085, column: 9, scope: !1938)
!8265 = !DILocation(line: 6085, column: 25, scope: !1938)
!8266 = !DILocation(line: 6086, column: 5, scope: !1938)
!8267 = !DILocation(line: 6086, column: 11, scope: !1938)
!8268 = !DILocation(line: 6088, column: 5, scope: !1938)
!8269 = !DILocation(line: 6089, column: 11, scope: !1938)
!8270 = !DILocation(line: 6089, column: 9, scope: !1938)
!8271 = !DILocation(line: 6090, column: 9, scope: !8272)
!8272 = distinct !DILexicalBlock(scope: !1938, file: !616, line: 6090, column: 9)
!8273 = !DILocation(line: 6090, column: 13, scope: !8272)
!8274 = !DILocation(line: 6090, column: 9, scope: !1938)
!8275 = !DILocation(line: 6092, column: 9, scope: !8276)
!8276 = distinct !DILexicalBlock(scope: !8272, file: !616, line: 6090, column: 19)
!8277 = !DILocation(line: 6093, column: 5, scope: !8276)
!8278 = !DILocation(line: 6095, column: 18, scope: !8279)
!8279 = distinct !DILexicalBlock(scope: !8272, file: !616, line: 6093, column: 12)
!8280 = !DILocation(line: 6095, column: 16, scope: !8279)
!8281 = !DILocation(line: 6097, column: 9, scope: !8282)
!8282 = distinct !DILexicalBlock(scope: !1938, file: !616, line: 6097, column: 9)
!8283 = !DILocation(line: 6097, column: 13, scope: !8282)
!8284 = !DILocation(line: 6097, column: 9, scope: !1938)
!8285 = !DILocation(line: 6098, column: 16, scope: !8282)
!8286 = !DILocation(line: 6098, column: 9, scope: !8282)
!8287 = !DILocation(line: 6099, column: 9, scope: !8288)
!8288 = distinct !DILexicalBlock(scope: !1938, file: !616, line: 6099, column: 9)
!8289 = !DILocation(line: 6099, column: 16, scope: !8288)
!8290 = !DILocation(line: 6099, column: 9, scope: !1938)
!8291 = !DILocation(line: 6101, column: 25, scope: !8292)
!8292 = distinct !DILexicalBlock(scope: !8288, file: !616, line: 6099, column: 21)
!8293 = !DILocation(line: 6101, column: 9, scope: !8292)
!8294 = !DILocation(line: 6103, column: 9, scope: !8292)
!8295 = !DILocation(line: 6105, column: 57, scope: !1938)
!8296 = !DILocation(line: 6105, column: 41, scope: !1938)
!8297 = !DILocation(line: 6105, column: 63, scope: !1938)
!8298 = !DILocation(line: 6105, column: 12, scope: !1938)
!8299 = !DILocation(line: 6105, column: 5, scope: !1938)
!8300 = !DILocation(line: 6106, column: 1, scope: !1938)
!8301 = !DILocation(line: 6116, column: 25, scope: !1945)
!8302 = !DILocation(line: 6116, column: 41, scope: !1945)
!8303 = !DILocation(line: 6118, column: 28, scope: !1945)
!8304 = !DILocation(line: 6118, column: 12, scope: !1945)
!8305 = !DILocation(line: 6118, column: 5, scope: !1945)
!8306 = !DILocation(line: 6129, column: 25, scope: !1949)
!8307 = !DILocation(line: 6129, column: 41, scope: !1949)
!8308 = !DILocation(line: 6131, column: 28, scope: !1949)
!8309 = !DILocation(line: 6131, column: 12, scope: !1949)
!8310 = !DILocation(line: 6131, column: 5, scope: !1949)
!8311 = !DILocation(line: 6142, column: 24, scope: !1953)
!8312 = !DILocation(line: 6142, column: 40, scope: !1953)
!8313 = !DILocation(line: 6144, column: 28, scope: !1953)
!8314 = !DILocation(line: 6144, column: 12, scope: !1953)
!8315 = !DILocation(line: 6144, column: 5, scope: !1953)
!8316 = !DILocation(line: 6167, column: 30, scope: !1957)
!8317 = !DILocation(line: 6167, column: 46, scope: !1957)
!8318 = !DILocation(line: 6176, column: 5, scope: !1957)
!8319 = !DILocation(line: 6176, column: 17, scope: !1957)
!8320 = !DILocation(line: 6177, column: 5, scope: !1957)
!8321 = !DILocation(line: 6177, column: 9, scope: !1957)
!8322 = !DILocation(line: 6177, column: 12, scope: !1957)
!8323 = !DILocation(line: 6178, column: 5, scope: !1957)
!8324 = !DILocation(line: 6178, column: 15, scope: !1957)
!8325 = !DILocation(line: 6182, column: 5, scope: !1957)
!8326 = !DILocation(line: 6182, column: 12, scope: !1957)
!8327 = !DILocation(line: 6182, column: 20, scope: !1957)
!8328 = !DILocation(line: 6184, column: 13, scope: !1957)
!8329 = !DILocation(line: 6190, column: 34, scope: !8330)
!8330 = distinct !DILexicalBlock(scope: !1957, file: !616, line: 6190, column: 9)
!8331 = !DILocation(line: 6190, column: 10, scope: !8330)
!8332 = !DILocation(line: 6190, column: 9, scope: !1957)
!8333 = !DILocation(line: 6192, column: 9, scope: !8330)
!8334 = !DILocation(line: 6198, column: 27, scope: !1957)
!8335 = !DILocation(line: 6198, column: 35, scope: !1957)
!8336 = !DILocation(line: 6198, column: 14, scope: !1957)
!8337 = !DILocation(line: 6198, column: 12, scope: !1957)
!8338 = !DILocation(line: 6200, column: 9, scope: !8339)
!8339 = distinct !DILexicalBlock(scope: !1957, file: !616, line: 6200, column: 9)
!8340 = !DILocation(line: 6200, column: 16, scope: !8339)
!8341 = !DILocation(line: 6200, column: 9, scope: !1957)
!8342 = !DILocation(line: 6201, column: 16, scope: !8339)
!8343 = !DILocation(line: 6201, column: 9, scope: !8339)
!8344 = !DILocation(line: 6203, column: 22, scope: !8345)
!8345 = distinct !DILexicalBlock(scope: !1957, file: !616, line: 6203, column: 9)
!8346 = !DILocation(line: 6203, column: 28, scope: !8345)
!8347 = !DILocation(line: 6203, column: 37, scope: !8345)
!8348 = !DILocation(line: 6203, column: 9, scope: !8345)
!8349 = !DILocation(line: 6203, column: 55, scope: !8345)
!8350 = !DILocation(line: 6203, column: 9, scope: !1957)
!8351 = !DILocation(line: 6204, column: 20, scope: !8352)
!8352 = distinct !DILexicalBlock(scope: !8345, file: !616, line: 6203, column: 62)
!8353 = !DILocation(line: 6204, column: 9, scope: !8352)
!8354 = !DILocation(line: 6205, column: 16, scope: !8352)
!8355 = !DILocation(line: 6205, column: 9, scope: !8352)
!8356 = !DILocation(line: 6208, column: 23, scope: !1957)
!8357 = !DILocation(line: 6208, column: 12, scope: !1957)
!8358 = !DILocation(line: 6208, column: 10, scope: !1957)
!8359 = !DILocation(line: 6209, column: 9, scope: !8360)
!8360 = distinct !DILexicalBlock(scope: !1957, file: !616, line: 6209, column: 9)
!8361 = !DILocation(line: 6209, column: 14, scope: !8360)
!8362 = !DILocation(line: 6209, column: 9, scope: !1957)
!8363 = !DILocation(line: 6210, column: 20, scope: !8364)
!8364 = distinct !DILexicalBlock(scope: !8360, file: !616, line: 6209, column: 29)
!8365 = !DILocation(line: 6210, column: 9, scope: !8364)
!8366 = !DILocation(line: 6211, column: 9, scope: !8364)
!8367 = !DILocation(line: 6214, column: 12, scope: !1970)
!8368 = !DILocation(line: 6214, column: 10, scope: !1970)
!8369 = !DILocation(line: 6214, column: 17, scope: !8370)
!8370 = !DILexicalBlockFile(scope: !8371, file: !616, discriminator: 2)
!8371 = !DILexicalBlockFile(scope: !1969, file: !616, discriminator: 1)
!8372 = !DILocation(line: 6214, column: 21, scope: !1969)
!8373 = !DILocation(line: 6214, column: 19, scope: !1969)
!8374 = !DILocation(line: 6214, column: 5, scope: !1970)
!8375 = !DILocation(line: 6218, column: 9, scope: !1968)
!8376 = !DILocation(line: 6218, column: 19, scope: !1968)
!8377 = !DILocation(line: 6218, column: 46, scope: !1968)
!8378 = !DILocation(line: 6218, column: 39, scope: !1968)
!8379 = !DILocation(line: 6218, column: 23, scope: !1968)
!8380 = !DILocation(line: 6220, column: 13, scope: !1974)
!8381 = !DILocation(line: 6220, column: 15, scope: !1974)
!8382 = !DILocation(line: 6220, column: 13, scope: !1968)
!8383 = !DILocation(line: 6221, column: 13, scope: !1973)
!8384 = !DILocation(line: 6221, column: 18, scope: !8385)
!8385 = !DILexicalBlockFile(scope: !1972, file: !616, discriminator: 1)
!8386 = !DILocation(line: 6221, column: 28, scope: !1972)
!8387 = !DILocation(line: 6221, column: 58, scope: !1972)
!8388 = !DILocation(line: 6221, column: 73, scope: !8389)
!8389 = distinct !DILexicalBlock(scope: !1972, file: !616, line: 6221, column: 70)
!8390 = !DILocation(line: 6221, column: 90, scope: !8389)
!8391 = !DILocation(line: 6221, column: 70, scope: !8389)
!8392 = !DILocation(line: 6221, column: 100, scope: !8389)
!8393 = !DILocation(line: 6221, column: 70, scope: !1972)
!8394 = !DILocation(line: 6221, column: 70, scope: !8395)
!8395 = !DILexicalBlockFile(scope: !1972, file: !616, discriminator: 2)
!8396 = !DILocation(line: 6221, column: 131, scope: !8397)
!8397 = !DILexicalBlockFile(scope: !8389, file: !616, discriminator: 3)
!8398 = !DILocation(line: 6221, column: 149, scope: !8389)
!8399 = !DILocation(line: 6221, column: 159, scope: !8389)
!8400 = !DILocation(line: 6221, column: 184, scope: !8389)
!8401 = !DILocation(line: 6221, column: 115, scope: !8389)
!8402 = !DILocation(line: 6221, column: 203, scope: !8403)
!8403 = !DILexicalBlockFile(scope: !1973, file: !616, discriminator: 4)
!8404 = !DILocation(line: 6221, column: 203, scope: !1972)
!8405 = !DILocation(line: 6221, column: 203, scope: !8406)
!8406 = !DILexicalBlockFile(scope: !1972, file: !616, discriminator: 5)
!8407 = !DILocation(line: 6222, column: 24, scope: !1973)
!8408 = !DILocation(line: 6222, column: 13, scope: !1973)
!8409 = !DILocation(line: 6223, column: 13, scope: !1973)
!8410 = !DILocation(line: 6225, column: 50, scope: !1968)
!8411 = !DILocation(line: 6225, column: 44, scope: !1968)
!8412 = !DILocation(line: 6225, column: 10, scope: !1968)
!8413 = !DILocation(line: 6225, column: 28, scope: !1968)
!8414 = !DILocation(line: 6225, column: 11, scope: !1968)
!8415 = !DILocation(line: 6225, column: 36, scope: !1968)
!8416 = !{!8417, !3868, i64 24}
!8417 = !{!"", !3898, i64 0, !3868, i64 24, !3894, i64 32}
!8418 = !DILocation(line: 6225, column: 47, scope: !1968)
!8419 = !DILocation(line: 6226, column: 5, scope: !1969)
!8420 = !DILocation(line: 6226, column: 5, scope: !8371)
!8421 = !DILocation(line: 6226, column: 5, scope: !1968)
!8422 = !DILocation(line: 6214, column: 31, scope: !1969)
!8423 = !DILocation(line: 6214, column: 5, scope: !1969)
!8424 = !DILocation(line: 6228, column: 16, scope: !1957)
!8425 = !DILocation(line: 6228, column: 5, scope: !1957)
!8426 = !DILocation(line: 6230, column: 12, scope: !1957)
!8427 = !DILocation(line: 6230, column: 5, scope: !1957)
!8428 = !DILocation(line: 6231, column: 1, scope: !1957)
!8429 = !DILocation(line: 6240, column: 27, scope: !1975)
!8430 = !DILocation(line: 6240, column: 43, scope: !1975)
!8431 = !DILocation(line: 6242, column: 5, scope: !1975)
!8432 = !DILocation(line: 6242, column: 15, scope: !1975)
!8433 = !DILocation(line: 6250, column: 5, scope: !1975)
!8434 = !DILocation(line: 6250, column: 11, scope: !1975)
!8435 = !DILocation(line: 6260, column: 5, scope: !1975)
!8436 = !DILocation(line: 6260, column: 12, scope: !1975)
!8437 = !DILocation(line: 6260, column: 28, scope: !1975)
!8438 = !DILocation(line: 6261, column: 5, scope: !1975)
!8439 = !DILocation(line: 6261, column: 9, scope: !1975)
!8440 = !DILocation(line: 6291, column: 26, scope: !1975)
!8441 = !DILocation(line: 6291, column: 9, scope: !1975)
!8442 = !DILocation(line: 6291, column: 7, scope: !1975)
!8443 = !DILocation(line: 6292, column: 9, scope: !8444)
!8444 = distinct !DILexicalBlock(scope: !1975, file: !616, line: 6292, column: 9)
!8445 = !DILocation(line: 6292, column: 11, scope: !8444)
!8446 = !DILocation(line: 6292, column: 9, scope: !1975)
!8447 = !DILocation(line: 6293, column: 15, scope: !8448)
!8448 = distinct !DILexicalBlock(scope: !8449, file: !616, line: 6293, column: 13)
!8449 = distinct !DILexicalBlock(scope: !8444, file: !616, line: 6292, column: 16)
!8450 = !DILocation(line: 6293, column: 14, scope: !8448)
!8451 = !DILocation(line: 6293, column: 36, scope: !8448)
!8452 = !DILocation(line: 6293, column: 13, scope: !8449)
!8453 = !DILocation(line: 6294, column: 17, scope: !8454)
!8454 = distinct !DILexicalBlock(scope: !8448, file: !616, line: 6293, column: 43)
!8455 = !DILocation(line: 6294, column: 15, scope: !8454)
!8456 = !DILocation(line: 6295, column: 17, scope: !8457)
!8457 = distinct !DILexicalBlock(scope: !8454, file: !616, line: 6295, column: 17)
!8458 = !DILocation(line: 6295, column: 19, scope: !8457)
!8459 = !DILocation(line: 6295, column: 17, scope: !8454)
!8460 = !DILocation(line: 6296, column: 24, scope: !8461)
!8461 = distinct !DILexicalBlock(scope: !8457, file: !616, line: 6295, column: 26)
!8462 = !DILocation(line: 6296, column: 17, scope: !8461)
!8463 = !DILocation(line: 6298, column: 17, scope: !8464)
!8464 = distinct !DILexicalBlock(scope: !8454, file: !616, line: 6298, column: 17)
!8465 = !DILocation(line: 6298, column: 19, scope: !8464)
!8466 = !DILocation(line: 6298, column: 17, scope: !8454)
!8467 = !DILocation(line: 6300, column: 33, scope: !8468)
!8468 = distinct !DILexicalBlock(scope: !8464, file: !616, line: 6298, column: 25)
!8469 = !DILocation(line: 6300, column: 31, scope: !8468)
!8470 = !DILocation(line: 6301, column: 13, scope: !8468)
!8471 = !DILocation(line: 6302, column: 46, scope: !8472)
!8472 = distinct !DILexicalBlock(scope: !8464, file: !616, line: 6301, column: 20)
!8473 = !DILocation(line: 6302, column: 48, scope: !8472)
!8474 = !DILocation(line: 6302, column: 33, scope: !8472)
!8475 = !DILocation(line: 6302, column: 31, scope: !8472)
!8476 = !DILocation(line: 6303, column: 21, scope: !8477)
!8477 = distinct !DILexicalBlock(scope: !8472, file: !616, line: 6303, column: 21)
!8478 = !DILocation(line: 6303, column: 35, scope: !8477)
!8479 = !DILocation(line: 6303, column: 21, scope: !8472)
!8480 = !DILocation(line: 6304, column: 23, scope: !8481)
!8481 = distinct !DILexicalBlock(scope: !8477, file: !616, line: 6303, column: 50)
!8482 = !DILocation(line: 6304, column: 44, scope: !8481)
!8483 = !DILocation(line: 6305, column: 28, scope: !8481)
!8484 = !DILocation(line: 6305, column: 21, scope: !8481)
!8485 = !DILocation(line: 6307, column: 31, scope: !8472)
!8486 = !DILocation(line: 6307, column: 34, scope: !8472)
!8487 = !DILocation(line: 6307, column: 21, scope: !8472)
!8488 = !DILocation(line: 6307, column: 19, scope: !8472)
!8489 = !DILocation(line: 6308, column: 21, scope: !8490)
!8490 = distinct !DILexicalBlock(scope: !8472, file: !616, line: 6308, column: 21)
!8491 = !DILocation(line: 6308, column: 23, scope: !8490)
!8492 = !DILocation(line: 6308, column: 21, scope: !8472)
!8493 = !DILocation(line: 6309, column: 32, scope: !8494)
!8494 = distinct !DILexicalBlock(scope: !8490, file: !616, line: 6308, column: 30)
!8495 = !DILocation(line: 6309, column: 21, scope: !8494)
!8496 = !DILocation(line: 6310, column: 28, scope: !8494)
!8497 = !DILocation(line: 6310, column: 21, scope: !8494)
!8498 = !DILocation(line: 6313, column: 9, scope: !8454)
!8499 = !DILocation(line: 6314, column: 20, scope: !8500)
!8500 = distinct !DILexicalBlock(scope: !8448, file: !616, line: 6313, column: 16)
!8501 = !DILocation(line: 6314, column: 13, scope: !8500)
!8502 = !DILocation(line: 6316, column: 5, scope: !8449)
!8503 = !DILocation(line: 6319, column: 25, scope: !1975)
!8504 = !DILocation(line: 6319, column: 14, scope: !1975)
!8505 = !DILocation(line: 6319, column: 12, scope: !1975)
!8506 = !DILocation(line: 6320, column: 9, scope: !1988)
!8507 = !DILocation(line: 6320, column: 16, scope: !1988)
!8508 = !DILocation(line: 6320, column: 9, scope: !1975)
!8509 = !DILocation(line: 6321, column: 9, scope: !1987)
!8510 = !DILocation(line: 6321, column: 13, scope: !1987)
!8511 = !DILocation(line: 6322, column: 16, scope: !1992)
!8512 = !DILocation(line: 6322, column: 14, scope: !1992)
!8513 = !DILocation(line: 6322, column: 21, scope: !8514)
!8514 = !DILexicalBlockFile(scope: !8515, file: !616, discriminator: 2)
!8515 = !DILexicalBlockFile(scope: !1991, file: !616, discriminator: 1)
!8516 = !DILocation(line: 6322, column: 25, scope: !1991)
!8517 = !DILocation(line: 6322, column: 23, scope: !1991)
!8518 = !DILocation(line: 6322, column: 9, scope: !1992)
!8519 = !DILocation(line: 6323, column: 13, scope: !1990)
!8520 = !DILocation(line: 6323, column: 23, scope: !1990)
!8521 = !DILocation(line: 6323, column: 57, scope: !1990)
!8522 = !DILocation(line: 6323, column: 43, scope: !1990)
!8523 = !DILocation(line: 6323, column: 27, scope: !1990)
!8524 = !DILocation(line: 6324, column: 17, scope: !1996)
!8525 = !DILocation(line: 6324, column: 19, scope: !1996)
!8526 = !DILocation(line: 6324, column: 17, scope: !1990)
!8527 = !DILocation(line: 6325, column: 17, scope: !1995)
!8528 = !DILocation(line: 6325, column: 22, scope: !8529)
!8529 = !DILexicalBlockFile(scope: !1994, file: !616, discriminator: 1)
!8530 = !DILocation(line: 6325, column: 32, scope: !1994)
!8531 = !DILocation(line: 6325, column: 62, scope: !1994)
!8532 = !DILocation(line: 6325, column: 79, scope: !8533)
!8533 = distinct !DILexicalBlock(scope: !1994, file: !616, line: 6325, column: 76)
!8534 = !DILocation(line: 6325, column: 96, scope: !8533)
!8535 = !DILocation(line: 6325, column: 76, scope: !8533)
!8536 = !DILocation(line: 6325, column: 106, scope: !8533)
!8537 = !DILocation(line: 6325, column: 76, scope: !1994)
!8538 = !DILocation(line: 6325, column: 76, scope: !8539)
!8539 = !DILexicalBlockFile(scope: !1994, file: !616, discriminator: 2)
!8540 = !DILocation(line: 6325, column: 137, scope: !8541)
!8541 = !DILexicalBlockFile(scope: !8533, file: !616, discriminator: 3)
!8542 = !DILocation(line: 6325, column: 155, scope: !8533)
!8543 = !DILocation(line: 6325, column: 165, scope: !8533)
!8544 = !DILocation(line: 6325, column: 190, scope: !8533)
!8545 = !DILocation(line: 6325, column: 121, scope: !8533)
!8546 = !DILocation(line: 6325, column: 209, scope: !8547)
!8547 = !DILexicalBlockFile(scope: !1995, file: !616, discriminator: 4)
!8548 = !DILocation(line: 6325, column: 209, scope: !1994)
!8549 = !DILocation(line: 6325, column: 209, scope: !8550)
!8550 = !DILexicalBlockFile(scope: !1994, file: !616, discriminator: 5)
!8551 = !DILocation(line: 6326, column: 24, scope: !1995)
!8552 = !DILocation(line: 6327, column: 17, scope: !1995)
!8553 = !DILocation(line: 6329, column: 56, scope: !1990)
!8554 = !DILocation(line: 6329, column: 50, scope: !1990)
!8555 = !DILocation(line: 6329, column: 14, scope: !1990)
!8556 = !DILocation(line: 6329, column: 32, scope: !1990)
!8557 = !DILocation(line: 6329, column: 15, scope: !1990)
!8558 = !DILocation(line: 6329, column: 42, scope: !1990)
!8559 = !DILocation(line: 6329, column: 53, scope: !1990)
!8560 = !DILocation(line: 6330, column: 9, scope: !1991)
!8561 = !DILocation(line: 6330, column: 9, scope: !8515)
!8562 = !DILocation(line: 6330, column: 9, scope: !1990)
!8563 = !DILocation(line: 6322, column: 28, scope: !1991)
!8564 = !DILocation(line: 6322, column: 9, scope: !1991)
!8565 = !DILocation(line: 6331, column: 5, scope: !1988)
!8566 = !DILocation(line: 6331, column: 5, scope: !1987)
!8567 = !DILocation(line: 6333, column: 9, scope: !8568)
!8568 = distinct !DILexicalBlock(scope: !1975, file: !616, line: 6333, column: 9)
!8569 = !DILocation(line: 6333, column: 26, scope: !8568)
!8570 = !DILocation(line: 6333, column: 23, scope: !8568)
!8571 = !DILocation(line: 6333, column: 9, scope: !1975)
!8572 = !DILocation(line: 6334, column: 20, scope: !8573)
!8573 = distinct !DILexicalBlock(scope: !8568, file: !616, line: 6333, column: 37)
!8574 = !DILocation(line: 6334, column: 9, scope: !8573)
!8575 = !DILocation(line: 6335, column: 5, scope: !8573)
!8576 = !DILocation(line: 6337, column: 12, scope: !1975)
!8577 = !DILocation(line: 6337, column: 5, scope: !1975)
!8578 = !DILocation(line: 6338, column: 1, scope: !1975)
!8579 = !DILocation(line: 6154, column: 24, scope: !1997)
!8580 = !DILocation(line: 6154, column: 40, scope: !1997)
!8581 = !DILocation(line: 6156, column: 28, scope: !1997)
!8582 = !DILocation(line: 6156, column: 12, scope: !1997)
!8583 = !DILocation(line: 6156, column: 5, scope: !1997)
!8584 = !DILocation(line: 6407, column: 25, scope: !2001)
!8585 = !DILocation(line: 6407, column: 41, scope: !2001)
!8586 = !DILocation(line: 6412, column: 28, scope: !2001)
!8587 = !DILocation(line: 6412, column: 12, scope: !2001)
!8588 = !DILocation(line: 6412, column: 5, scope: !2001)
!8589 = !DILocation(line: 6489, column: 25, scope: !2005)
!8590 = !DILocation(line: 6489, column: 41, scope: !2005)
!8591 = !DILocation(line: 6494, column: 28, scope: !2005)
!8592 = !DILocation(line: 6494, column: 12, scope: !2005)
!8593 = !DILocation(line: 6494, column: 5, scope: !2005)
!8594 = !DILocation(line: 6545, column: 24, scope: !2009)
!8595 = !DILocation(line: 6545, column: 40, scope: !2009)
!8596 = !DILocation(line: 6547, column: 28, scope: !2009)
!8597 = !DILocation(line: 6547, column: 12, scope: !2009)
!8598 = !DILocation(line: 6547, column: 5, scope: !2009)
!8599 = !DILocation(line: 6506, column: 26, scope: !2013)
!8600 = !DILocation(line: 6506, column: 42, scope: !2013)
!8601 = !DILocation(line: 6508, column: 5, scope: !2013)
!8602 = !DILocation(line: 6508, column: 15, scope: !2013)
!8603 = !DILocation(line: 6520, column: 5, scope: !2013)
!8604 = !DILocation(line: 6520, column: 11, scope: !2013)
!8605 = !DILocation(line: 6521, column: 5, scope: !2013)
!8606 = !DILocation(line: 6521, column: 9, scope: !2013)
!8607 = !DILocation(line: 6521, column: 23, scope: !2013)
!8608 = !DILocation(line: 6521, column: 22, scope: !2013)
!8609 = !DILocation(line: 6523, column: 7, scope: !2013)
!8610 = !DILocation(line: 6523, column: 28, scope: !2013)
!8611 = !DILocation(line: 6524, column: 12, scope: !2013)
!8612 = !DILocation(line: 6524, column: 10, scope: !2013)
!8613 = !DILocation(line: 6525, column: 9, scope: !8614)
!8614 = distinct !DILexicalBlock(scope: !2013, file: !616, line: 6525, column: 9)
!8615 = !DILocation(line: 6525, column: 14, scope: !8614)
!8616 = !DILocation(line: 6525, column: 9, scope: !2013)
!8617 = !DILocation(line: 6526, column: 15, scope: !8618)
!8618 = distinct !DILexicalBlock(scope: !8619, file: !616, line: 6526, column: 13)
!8619 = distinct !DILexicalBlock(scope: !8614, file: !616, line: 6525, column: 29)
!8620 = !DILocation(line: 6526, column: 14, scope: !8618)
!8621 = !DILocation(line: 6526, column: 13, scope: !8618)
!8622 = !DILocation(line: 6526, column: 13, scope: !8619)
!8623 = !DILocation(line: 6527, column: 13, scope: !8618)
!8624 = !DILocation(line: 6529, column: 29, scope: !8618)
!8625 = !DILocation(line: 6529, column: 13, scope: !8618)
!8626 = !DILocation(line: 6530, column: 5, scope: !8619)
!8627 = !DILocation(line: 6532, column: 44, scope: !8614)
!8628 = !DILocation(line: 6532, column: 18, scope: !8614)
!8629 = !DILocation(line: 6532, column: 16, scope: !8614)
!8630 = !DILocation(line: 6533, column: 30, scope: !2013)
!8631 = !DILocation(line: 6533, column: 7, scope: !2013)
!8632 = !DILocation(line: 6533, column: 28, scope: !2013)
!8633 = !DILocation(line: 6535, column: 12, scope: !2013)
!8634 = !DILocation(line: 6536, column: 1, scope: !2013)
!8635 = !DILocation(line: 6535, column: 5, scope: !2013)
!8636 = !DILocation(line: 6558, column: 22, scope: !2020)
!8637 = !DILocation(line: 6558, column: 38, scope: !2020)
!8638 = !DILocation(line: 6560, column: 5, scope: !2020)
!8639 = !DILocation(line: 6560, column: 11, scope: !2020)
!8640 = !DILocation(line: 6561, column: 5, scope: !2020)
!8641 = !DILocation(line: 6561, column: 9, scope: !2020)
!8642 = !DILocation(line: 6562, column: 34, scope: !8643)
!8643 = distinct !DILexicalBlock(scope: !2020, file: !616, line: 6562, column: 9)
!8644 = !DILocation(line: 6562, column: 10, scope: !8643)
!8645 = !DILocation(line: 6562, column: 9, scope: !2020)
!8646 = !DILocation(line: 6563, column: 9, scope: !8643)
!8647 = !DILocation(line: 6564, column: 14, scope: !8648)
!8648 = distinct !DILexicalBlock(scope: !2020, file: !616, line: 6564, column: 9)
!8649 = !DILocation(line: 6564, column: 19, scope: !8648)
!8650 = !DILocation(line: 6564, column: 9, scope: !8648)
!8651 = !DILocation(line: 6564, column: 24, scope: !8648)
!8652 = !DILocation(line: 6564, column: 9, scope: !2020)
!8653 = !DILocation(line: 6565, column: 16, scope: !8648)
!8654 = !DILocation(line: 6565, column: 9, scope: !8648)
!8655 = !DILocation(line: 6566, column: 51, scope: !2020)
!8656 = !DILocation(line: 6567, column: 5, scope: !2020)
!8657 = !DILocation(line: 6568, column: 1, scope: !2020)
!8658 = !DILocation(line: 6577, column: 24, scope: !2026)
!8659 = !DILocation(line: 6577, column: 40, scope: !2026)
!8660 = !DILocation(line: 6579, column: 5, scope: !2026)
!8661 = !DILocation(line: 6579, column: 9, scope: !2026)
!8662 = !DILocation(line: 6580, column: 5, scope: !2026)
!8663 = !DILocation(line: 6580, column: 11, scope: !2026)
!8664 = !DILocation(line: 6585, column: 34, scope: !8665)
!8665 = distinct !DILexicalBlock(scope: !2026, file: !616, line: 6585, column: 9)
!8666 = !DILocation(line: 6585, column: 10, scope: !8665)
!8667 = !DILocation(line: 6585, column: 9, scope: !2026)
!8668 = !DILocation(line: 6586, column: 9, scope: !8665)
!8669 = !DILocation(line: 6587, column: 16, scope: !8670)
!8670 = distinct !DILexicalBlock(scope: !2026, file: !616, line: 6587, column: 9)
!8671 = !DILocation(line: 6587, column: 22, scope: !8670)
!8672 = !DILocation(line: 6587, column: 9, scope: !8670)
!8673 = !DILocation(line: 6587, column: 27, scope: !8670)
!8674 = !DILocation(line: 6587, column: 9, scope: !2026)
!8675 = !DILocation(line: 6588, column: 16, scope: !8670)
!8676 = !DILocation(line: 6588, column: 9, scope: !8670)
!8677 = !DILocation(line: 6589, column: 51, scope: !2026)
!8678 = !DILocation(line: 6590, column: 5, scope: !2026)
!8679 = !DILocation(line: 6591, column: 1, scope: !2026)
!8680 = !DILocation(line: 6671, column: 24, scope: !2032)
!8681 = !DILocation(line: 6671, column: 40, scope: !2032)
!8682 = !DILocation(line: 6673, column: 5, scope: !2032)
!8683 = !DILocation(line: 6673, column: 11, scope: !2032)
!8684 = !DILocation(line: 6674, column: 34, scope: !8685)
!8685 = distinct !DILexicalBlock(scope: !2032, file: !616, line: 6674, column: 9)
!8686 = !DILocation(line: 6674, column: 10, scope: !8685)
!8687 = !DILocation(line: 6674, column: 9, scope: !2032)
!8688 = !DILocation(line: 6675, column: 9, scope: !8685)
!8689 = !DILocation(line: 6676, column: 16, scope: !8690)
!8690 = distinct !DILexicalBlock(scope: !2032, file: !616, line: 6676, column: 9)
!8691 = !DILocation(line: 6676, column: 9, scope: !8690)
!8692 = !DILocation(line: 6676, column: 21, scope: !8690)
!8693 = !DILocation(line: 6676, column: 9, scope: !2032)
!8694 = !DILocation(line: 6677, column: 16, scope: !8690)
!8695 = !DILocation(line: 6677, column: 9, scope: !8690)
!8696 = !DILocation(line: 6678, column: 51, scope: !2032)
!8697 = !DILocation(line: 6679, column: 5, scope: !2032)
!8698 = !DILocation(line: 6680, column: 1, scope: !2032)
!8699 = !DILocation(line: 6690, column: 26, scope: !2037)
!8700 = !DILocation(line: 6690, column: 42, scope: !2037)
!8701 = !DILocation(line: 6692, column: 5, scope: !2037)
!8702 = !DILocation(line: 6692, column: 11, scope: !2037)
!8703 = !DILocation(line: 6693, column: 34, scope: !8704)
!8704 = distinct !DILexicalBlock(scope: !2037, file: !616, line: 6693, column: 9)
!8705 = !DILocation(line: 6693, column: 10, scope: !8704)
!8706 = !DILocation(line: 6693, column: 9, scope: !2037)
!8707 = !DILocation(line: 6694, column: 9, scope: !8704)
!8708 = !DILocation(line: 6695, column: 17, scope: !8709)
!8709 = distinct !DILexicalBlock(scope: !2037, file: !616, line: 6695, column: 9)
!8710 = !DILocation(line: 6695, column: 9, scope: !8709)
!8711 = !DILocation(line: 6695, column: 23, scope: !8709)
!8712 = !DILocation(line: 6695, column: 9, scope: !2037)
!8713 = !DILocation(line: 6696, column: 16, scope: !8714)
!8714 = distinct !DILexicalBlock(scope: !8709, file: !616, line: 6695, column: 28)
!8715 = !DILocation(line: 6696, column: 9, scope: !8714)
!8716 = !DILocation(line: 6698, column: 55, scope: !8717)
!8717 = distinct !DILexicalBlock(scope: !8709, file: !616, line: 6697, column: 12)
!8718 = !DILocation(line: 6699, column: 9, scope: !8717)
!8719 = !DILocation(line: 6701, column: 1, scope: !2037)
!8720 = !DILocation(line: 6710, column: 26, scope: !2042)
!8721 = !DILocation(line: 6710, column: 42, scope: !2042)
!8722 = !DILocation(line: 6712, column: 5, scope: !2042)
!8723 = !DILocation(line: 6712, column: 11, scope: !2042)
!8724 = !DILocation(line: 6713, column: 34, scope: !8725)
!8725 = distinct !DILexicalBlock(scope: !2042, file: !616, line: 6713, column: 9)
!8726 = !DILocation(line: 6713, column: 10, scope: !8725)
!8727 = !DILocation(line: 6713, column: 9, scope: !2042)
!8728 = !DILocation(line: 6714, column: 9, scope: !8725)
!8729 = !DILocation(line: 6715, column: 17, scope: !8730)
!8730 = distinct !DILexicalBlock(scope: !2042, file: !616, line: 6715, column: 9)
!8731 = !DILocation(line: 6715, column: 9, scope: !8730)
!8732 = !DILocation(line: 6715, column: 23, scope: !8730)
!8733 = !DILocation(line: 6715, column: 9, scope: !2042)
!8734 = !DILocation(line: 6716, column: 16, scope: !8735)
!8735 = distinct !DILexicalBlock(scope: !8730, file: !616, line: 6715, column: 28)
!8736 = !DILocation(line: 6716, column: 9, scope: !8735)
!8737 = !DILocation(line: 6718, column: 55, scope: !8738)
!8738 = distinct !DILexicalBlock(scope: !8730, file: !616, line: 6717, column: 12)
!8739 = !DILocation(line: 6719, column: 9, scope: !8738)
!8740 = !DILocation(line: 6721, column: 1, scope: !2042)
!8741 = !DILocation(line: 6730, column: 27, scope: !2047)
!8742 = !DILocation(line: 6730, column: 43, scope: !2047)
!8743 = !DILocation(line: 6732, column: 5, scope: !2047)
!8744 = !DILocation(line: 6732, column: 11, scope: !2047)
!8745 = !DILocation(line: 6732, column: 17, scope: !2047)
!8746 = !DILocation(line: 6733, column: 34, scope: !8747)
!8747 = distinct !DILexicalBlock(scope: !2047, file: !616, line: 6733, column: 9)
!8748 = !DILocation(line: 6733, column: 10, scope: !8747)
!8749 = !DILocation(line: 6733, column: 9, scope: !2047)
!8750 = !DILocation(line: 6736, column: 9, scope: !8747)
!8751 = !DILocation(line: 6737, column: 18, scope: !8752)
!8752 = distinct !DILexicalBlock(scope: !2047, file: !616, line: 6737, column: 9)
!8753 = !DILocation(line: 6737, column: 24, scope: !8752)
!8754 = !DILocation(line: 6737, column: 9, scope: !8752)
!8755 = !DILocation(line: 6737, column: 30, scope: !8752)
!8756 = !DILocation(line: 6737, column: 9, scope: !2047)
!8757 = !DILocation(line: 6738, column: 16, scope: !8758)
!8758 = distinct !DILexicalBlock(scope: !8752, file: !616, line: 6737, column: 35)
!8759 = !DILocation(line: 6738, column: 9, scope: !8758)
!8760 = !DILocation(line: 6740, column: 55, scope: !8761)
!8761 = distinct !DILexicalBlock(scope: !8752, file: !616, line: 6739, column: 12)
!8762 = !DILocation(line: 6741, column: 9, scope: !8761)
!8763 = !DILocation(line: 6743, column: 1, scope: !2047)
!8764 = !DILocation(line: 6752, column: 27, scope: !2053)
!8765 = !DILocation(line: 6752, column: 43, scope: !2053)
!8766 = !DILocation(line: 6754, column: 5, scope: !2053)
!8767 = !DILocation(line: 6754, column: 11, scope: !2053)
!8768 = !DILocation(line: 6754, column: 17, scope: !2053)
!8769 = !DILocation(line: 6755, column: 34, scope: !8770)
!8770 = distinct !DILexicalBlock(scope: !2053, file: !616, line: 6755, column: 9)
!8771 = !DILocation(line: 6755, column: 10, scope: !8770)
!8772 = !DILocation(line: 6755, column: 9, scope: !2053)
!8773 = !DILocation(line: 6758, column: 9, scope: !8770)
!8774 = !DILocation(line: 6759, column: 18, scope: !8775)
!8775 = distinct !DILexicalBlock(scope: !2053, file: !616, line: 6759, column: 9)
!8776 = !DILocation(line: 6759, column: 24, scope: !8775)
!8777 = !DILocation(line: 6759, column: 9, scope: !8775)
!8778 = !DILocation(line: 6759, column: 30, scope: !8775)
!8779 = !DILocation(line: 6759, column: 9, scope: !2053)
!8780 = !DILocation(line: 6760, column: 16, scope: !8781)
!8781 = distinct !DILexicalBlock(scope: !8775, file: !616, line: 6759, column: 35)
!8782 = !DILocation(line: 6760, column: 9, scope: !8781)
!8783 = !DILocation(line: 6762, column: 55, scope: !8784)
!8784 = distinct !DILexicalBlock(scope: !8775, file: !616, line: 6761, column: 12)
!8785 = !DILocation(line: 6763, column: 9, scope: !8784)
!8786 = !DILocation(line: 6765, column: 1, scope: !2053)
!8787 = !DILocation(line: 6774, column: 24, scope: !2059)
!8788 = !DILocation(line: 6774, column: 40, scope: !2059)
!8789 = !DILocation(line: 6776, column: 5, scope: !2059)
!8790 = !DILocation(line: 6776, column: 11, scope: !2059)
!8791 = !DILocation(line: 6777, column: 34, scope: !8792)
!8792 = distinct !DILexicalBlock(scope: !2059, file: !616, line: 6777, column: 9)
!8793 = !DILocation(line: 6777, column: 10, scope: !8792)
!8794 = !DILocation(line: 6777, column: 9, scope: !2059)
!8795 = !DILocation(line: 6778, column: 9, scope: !8792)
!8796 = !DILocation(line: 6779, column: 16, scope: !8797)
!8797 = distinct !DILexicalBlock(scope: !2059, file: !616, line: 6779, column: 9)
!8798 = !DILocation(line: 6779, column: 9, scope: !8797)
!8799 = !DILocation(line: 6779, column: 21, scope: !8797)
!8800 = !DILocation(line: 6779, column: 9, scope: !2059)
!8801 = !DILocation(line: 6780, column: 16, scope: !8797)
!8802 = !DILocation(line: 6780, column: 9, scope: !8797)
!8803 = !DILocation(line: 6781, column: 51, scope: !2059)
!8804 = !DILocation(line: 6782, column: 5, scope: !2059)
!8805 = !DILocation(line: 6783, column: 1, scope: !2059)
!8806 = !DILocation(line: 6792, column: 27, scope: !2064)
!8807 = !DILocation(line: 6792, column: 43, scope: !2064)
!8808 = !DILocation(line: 6794, column: 5, scope: !2064)
!8809 = !DILocation(line: 6794, column: 9, scope: !2064)
!8810 = !DILocation(line: 6794, column: 12, scope: !2064)
!8811 = !DILocation(line: 6795, column: 5, scope: !2064)
!8812 = !DILocation(line: 6795, column: 11, scope: !2064)
!8813 = !DILocation(line: 6797, column: 27, scope: !8814)
!8814 = distinct !DILexicalBlock(scope: !2064, file: !616, line: 6797, column: 9)
!8815 = !DILocation(line: 6797, column: 10, scope: !8814)
!8816 = !DILocation(line: 6797, column: 9, scope: !2064)
!8817 = !DILocation(line: 6798, column: 25, scope: !8818)
!8818 = distinct !DILexicalBlock(scope: !8814, file: !616, line: 6797, column: 36)
!8819 = !DILocation(line: 6798, column: 9, scope: !8818)
!8820 = !DILocation(line: 6799, column: 9, scope: !8818)
!8821 = !DILocation(line: 6801, column: 27, scope: !2064)
!8822 = !DILocation(line: 6801, column: 11, scope: !2064)
!8823 = !DILocation(line: 6801, column: 9, scope: !2064)
!8824 = !DILocation(line: 6802, column: 9, scope: !8825)
!8825 = distinct !DILexicalBlock(scope: !2064, file: !616, line: 6802, column: 9)
!8826 = !DILocation(line: 6802, column: 13, scope: !8825)
!8827 = !DILocation(line: 6802, column: 9, scope: !2064)
!8828 = !DILocation(line: 6803, column: 25, scope: !8829)
!8829 = distinct !DILexicalBlock(scope: !8825, file: !616, line: 6802, column: 22)
!8830 = !DILocation(line: 6803, column: 9, scope: !8829)
!8831 = !DILocation(line: 6804, column: 9, scope: !8829)
!8832 = !DILocation(line: 6806, column: 11, scope: !2074)
!8833 = !DILocation(line: 6806, column: 9, scope: !2074)
!8834 = !DILocation(line: 6806, column: 16, scope: !8835)
!8835 = !DILexicalBlockFile(scope: !8836, file: !616, discriminator: 2)
!8836 = !DILexicalBlockFile(scope: !2073, file: !616, discriminator: 1)
!8837 = !DILocation(line: 6806, column: 20, scope: !2073)
!8838 = !DILocation(line: 6806, column: 18, scope: !2073)
!8839 = !DILocation(line: 6806, column: 5, scope: !2074)
!8840 = !DILocation(line: 6807, column: 9, scope: !2072)
!8841 = !DILocation(line: 6807, column: 19, scope: !2072)
!8842 = !DILocation(line: 6808, column: 35, scope: !2072)
!8843 = !DILocation(line: 6808, column: 43, scope: !2072)
!8844 = !DILocation(line: 6808, column: 16, scope: !2072)
!8845 = !DILocation(line: 6808, column: 14, scope: !2072)
!8846 = !DILocation(line: 6809, column: 14, scope: !8847)
!8847 = distinct !DILexicalBlock(scope: !2072, file: !616, line: 6809, column: 13)
!8848 = !DILocation(line: 6809, column: 13, scope: !2072)
!8849 = !DILocation(line: 6810, column: 13, scope: !8847)
!8850 = !DILocation(line: 6811, column: 31, scope: !2078)
!8851 = !DILocation(line: 6811, column: 39, scope: !2078)
!8852 = !DILocation(line: 6811, column: 50, scope: !2078)
!8853 = !DILocation(line: 6811, column: 59, scope: !2078)
!8854 = !DILocation(line: 6811, column: 76, scope: !2078)
!8855 = !DILocation(line: 6811, column: 13, scope: !2072)
!8856 = !DILocation(line: 6812, column: 29, scope: !2077)
!8857 = !DILocation(line: 6812, column: 13, scope: !2077)
!8858 = !DILocation(line: 6814, column: 13, scope: !2077)
!8859 = !DILocation(line: 6814, column: 18, scope: !8860)
!8860 = !DILexicalBlockFile(scope: !2076, file: !616, discriminator: 1)
!8861 = !DILocation(line: 6814, column: 28, scope: !2076)
!8862 = !DILocation(line: 6814, column: 58, scope: !2076)
!8863 = !DILocation(line: 6814, column: 73, scope: !8864)
!8864 = distinct !DILexicalBlock(scope: !2076, file: !616, line: 6814, column: 70)
!8865 = !DILocation(line: 6814, column: 90, scope: !8864)
!8866 = !DILocation(line: 6814, column: 70, scope: !8864)
!8867 = !DILocation(line: 6814, column: 100, scope: !8864)
!8868 = !DILocation(line: 6814, column: 70, scope: !2076)
!8869 = !DILocation(line: 6814, column: 70, scope: !8870)
!8870 = !DILexicalBlockFile(scope: !2076, file: !616, discriminator: 2)
!8871 = !DILocation(line: 6814, column: 131, scope: !8872)
!8872 = !DILexicalBlockFile(scope: !8864, file: !616, discriminator: 3)
!8873 = !DILocation(line: 6814, column: 149, scope: !8864)
!8874 = !DILocation(line: 6814, column: 159, scope: !8864)
!8875 = !DILocation(line: 6814, column: 184, scope: !8864)
!8876 = !DILocation(line: 6814, column: 115, scope: !8864)
!8877 = !DILocation(line: 6814, column: 203, scope: !8878)
!8878 = !DILexicalBlockFile(scope: !2077, file: !616, discriminator: 4)
!8879 = !DILocation(line: 6814, column: 203, scope: !2076)
!8880 = !DILocation(line: 6814, column: 203, scope: !8881)
!8881 = !DILexicalBlockFile(scope: !2076, file: !616, discriminator: 5)
!8882 = !DILocation(line: 6815, column: 13, scope: !2077)
!8883 = !DILocation(line: 6817, column: 36, scope: !2082)
!8884 = !DILocation(line: 6817, column: 53, scope: !2082)
!8885 = !DILocation(line: 6817, column: 43, scope: !2082)
!8886 = !DILocation(line: 6817, column: 42, scope: !2082)
!8887 = !DILocation(line: 6817, column: 18, scope: !2082)
!8888 = !DILocation(line: 6817, column: 17, scope: !2083)
!8889 = !DILocation(line: 6818, column: 17, scope: !2081)
!8890 = !DILocation(line: 6818, column: 22, scope: !8891)
!8891 = !DILexicalBlockFile(scope: !2080, file: !616, discriminator: 1)
!8892 = !DILocation(line: 6818, column: 32, scope: !2080)
!8893 = !DILocation(line: 6818, column: 62, scope: !2080)
!8894 = !DILocation(line: 6818, column: 77, scope: !8895)
!8895 = distinct !DILexicalBlock(scope: !2080, file: !616, line: 6818, column: 74)
!8896 = !DILocation(line: 6818, column: 94, scope: !8895)
!8897 = !DILocation(line: 6818, column: 74, scope: !8895)
!8898 = !DILocation(line: 6818, column: 104, scope: !8895)
!8899 = !DILocation(line: 6818, column: 74, scope: !2080)
!8900 = !DILocation(line: 6818, column: 74, scope: !8901)
!8901 = !DILexicalBlockFile(scope: !2080, file: !616, discriminator: 2)
!8902 = !DILocation(line: 6818, column: 135, scope: !8903)
!8903 = !DILexicalBlockFile(scope: !8895, file: !616, discriminator: 3)
!8904 = !DILocation(line: 6818, column: 153, scope: !8895)
!8905 = !DILocation(line: 6818, column: 163, scope: !8895)
!8906 = !DILocation(line: 6818, column: 188, scope: !8895)
!8907 = !DILocation(line: 6818, column: 119, scope: !8895)
!8908 = !DILocation(line: 6818, column: 207, scope: !8909)
!8909 = !DILexicalBlockFile(scope: !2081, file: !616, discriminator: 4)
!8910 = !DILocation(line: 6818, column: 207, scope: !2080)
!8911 = !DILocation(line: 6818, column: 207, scope: !8912)
!8912 = !DILexicalBlockFile(scope: !2080, file: !616, discriminator: 5)
!8913 = !DILocation(line: 6819, column: 17, scope: !2081)
!8914 = !DILocation(line: 6822, column: 9, scope: !2072)
!8915 = !DILocation(line: 6822, column: 14, scope: !8916)
!8916 = !DILexicalBlockFile(scope: !2085, file: !616, discriminator: 1)
!8917 = !DILocation(line: 6822, column: 24, scope: !2085)
!8918 = !DILocation(line: 6822, column: 54, scope: !2085)
!8919 = !DILocation(line: 6822, column: 69, scope: !8920)
!8920 = distinct !DILexicalBlock(scope: !2085, file: !616, line: 6822, column: 66)
!8921 = !DILocation(line: 6822, column: 86, scope: !8920)
!8922 = !DILocation(line: 6822, column: 66, scope: !8920)
!8923 = !DILocation(line: 6822, column: 96, scope: !8920)
!8924 = !DILocation(line: 6822, column: 66, scope: !2085)
!8925 = !DILocation(line: 6822, column: 66, scope: !8926)
!8926 = !DILexicalBlockFile(scope: !2085, file: !616, discriminator: 2)
!8927 = !DILocation(line: 6822, column: 127, scope: !8928)
!8928 = !DILexicalBlockFile(scope: !8920, file: !616, discriminator: 3)
!8929 = !DILocation(line: 6822, column: 145, scope: !8920)
!8930 = !DILocation(line: 6822, column: 155, scope: !8920)
!8931 = !DILocation(line: 6822, column: 180, scope: !8920)
!8932 = !DILocation(line: 6822, column: 111, scope: !8920)
!8933 = !DILocation(line: 6822, column: 199, scope: !8934)
!8934 = !DILexicalBlockFile(scope: !2072, file: !616, discriminator: 4)
!8935 = !DILocation(line: 6822, column: 199, scope: !2085)
!8936 = !DILocation(line: 6822, column: 199, scope: !8937)
!8937 = !DILexicalBlockFile(scope: !2085, file: !616, discriminator: 5)
!8938 = !DILocation(line: 6823, column: 5, scope: !2073)
!8939 = !DILocation(line: 6823, column: 5, scope: !8836)
!8940 = !DILocation(line: 6823, column: 5, scope: !2072)
!8941 = !DILocation(line: 6806, column: 26, scope: !2073)
!8942 = !DILocation(line: 6806, column: 5, scope: !2073)
!8943 = !DILocation(line: 6825, column: 19, scope: !8944)
!8944 = distinct !DILexicalBlock(scope: !2064, file: !616, line: 6825, column: 9)
!8945 = !DILocation(line: 6825, column: 24, scope: !8944)
!8946 = !DILocation(line: 6825, column: 9, scope: !8944)
!8947 = !DILocation(line: 6825, column: 35, scope: !8944)
!8948 = !DILocation(line: 6825, column: 9, scope: !2064)
!8949 = !DILocation(line: 6826, column: 16, scope: !8944)
!8950 = !DILocation(line: 6826, column: 9, scope: !8944)
!8951 = !DILocation(line: 6827, column: 51, scope: !2064)
!8952 = !DILocation(line: 6828, column: 5, scope: !2064)
!8953 = !DILocation(line: 6829, column: 1, scope: !2064)
!8954 = !DILocation(line: 6349, column: 28, scope: !2086)
!8955 = !DILocation(line: 6349, column: 44, scope: !2086)
!8956 = !DILocation(line: 6351, column: 5, scope: !2086)
!8957 = !DILocation(line: 6351, column: 15, scope: !2086)
!8958 = !DILocation(line: 6352, column: 5, scope: !2086)
!8959 = !DILocation(line: 6352, column: 11, scope: !2086)
!8960 = !DILocation(line: 6353, column: 5, scope: !2086)
!8961 = !DILocation(line: 6353, column: 9, scope: !2086)
!8962 = !DILocation(line: 6357, column: 5, scope: !2086)
!8963 = !DILocation(line: 6357, column: 11, scope: !2086)
!8964 = !DILocation(line: 6365, column: 34, scope: !8965)
!8965 = distinct !DILexicalBlock(scope: !2086, file: !616, line: 6365, column: 9)
!8966 = !DILocation(line: 6365, column: 10, scope: !8965)
!8967 = !DILocation(line: 6365, column: 9, scope: !2086)
!8968 = !DILocation(line: 6369, column: 9, scope: !8965)
!8969 = !DILocation(line: 6370, column: 51, scope: !2086)
!8970 = !DILocation(line: 6370, column: 33, scope: !2086)
!8971 = !DILocation(line: 6370, column: 60, scope: !2086)
!8972 = !DILocation(line: 6370, column: 31, scope: !2086)
!8973 = !DILocation(line: 6370, column: 14, scope: !2086)
!8974 = !DILocation(line: 6372, column: 22, scope: !2086)
!8975 = !DILocation(line: 6372, column: 32, scope: !2086)
!8976 = !DILocation(line: 6372, column: 11, scope: !2086)
!8977 = !DILocation(line: 6372, column: 9, scope: !2086)
!8978 = !DILocation(line: 6373, column: 5, scope: !2086)
!8979 = !DILocation(line: 6373, column: 10, scope: !8980)
!8980 = !DILexicalBlockFile(scope: !2095, file: !616, discriminator: 1)
!8981 = !DILocation(line: 6373, column: 20, scope: !2095)
!8982 = !DILocation(line: 6373, column: 50, scope: !2095)
!8983 = !DILocation(line: 6373, column: 66, scope: !8984)
!8984 = distinct !DILexicalBlock(scope: !2095, file: !616, line: 6373, column: 63)
!8985 = !DILocation(line: 6373, column: 83, scope: !8984)
!8986 = !DILocation(line: 6373, column: 63, scope: !8984)
!8987 = !DILocation(line: 6373, column: 93, scope: !8984)
!8988 = !DILocation(line: 6373, column: 63, scope: !2095)
!8989 = !DILocation(line: 6373, column: 63, scope: !8990)
!8990 = !DILexicalBlockFile(scope: !2095, file: !616, discriminator: 2)
!8991 = !DILocation(line: 6373, column: 124, scope: !8992)
!8992 = !DILexicalBlockFile(scope: !8984, file: !616, discriminator: 3)
!8993 = !DILocation(line: 6373, column: 142, scope: !8984)
!8994 = !DILocation(line: 6373, column: 152, scope: !8984)
!8995 = !DILocation(line: 6373, column: 177, scope: !8984)
!8996 = !DILocation(line: 6373, column: 108, scope: !8984)
!8997 = !DILocation(line: 6373, column: 196, scope: !8998)
!8998 = !DILexicalBlockFile(scope: !2086, file: !616, discriminator: 4)
!8999 = !DILocation(line: 6373, column: 196, scope: !2095)
!9000 = !DILocation(line: 6373, column: 196, scope: !9001)
!9001 = !DILexicalBlockFile(scope: !2095, file: !616, discriminator: 5)
!9002 = !DILocation(line: 6374, column: 9, scope: !9003)
!9003 = distinct !DILexicalBlock(scope: !2086, file: !616, line: 6374, column: 9)
!9004 = !DILocation(line: 6374, column: 13, scope: !9003)
!9005 = !DILocation(line: 6374, column: 9, scope: !2086)
!9006 = !DILocation(line: 6375, column: 35, scope: !9003)
!9007 = !DILocation(line: 6375, column: 16, scope: !9003)
!9008 = !DILocation(line: 6375, column: 9, scope: !9003)
!9009 = !DILocation(line: 6377, column: 51, scope: !2086)
!9010 = !DILocation(line: 6378, column: 5, scope: !2086)
!9011 = !DILocation(line: 6379, column: 1, scope: !2086)
!9012 = !DILocation(line: 6388, column: 25, scope: !2096)
!9013 = !DILocation(line: 6388, column: 41, scope: !2096)
!9014 = !DILocation(line: 6390, column: 5, scope: !2096)
!9015 = !DILocation(line: 6390, column: 11, scope: !2096)
!9016 = !DILocation(line: 6390, column: 16, scope: !2096)
!9017 = !DILocation(line: 6391, column: 34, scope: !9018)
!9018 = distinct !DILexicalBlock(scope: !2096, file: !616, line: 6391, column: 9)
!9019 = !DILocation(line: 6391, column: 10, scope: !9018)
!9020 = !DILocation(line: 6391, column: 9, scope: !2096)
!9021 = !DILocation(line: 6392, column: 9, scope: !9018)
!9022 = !DILocation(line: 6393, column: 20, scope: !2096)
!9023 = !DILocation(line: 6393, column: 12, scope: !2096)
!9024 = !DILocation(line: 6393, column: 10, scope: !2096)
!9025 = !DILocation(line: 6394, column: 9, scope: !9026)
!9026 = distinct !DILexicalBlock(scope: !2096, file: !616, line: 6394, column: 9)
!9027 = !DILocation(line: 6394, column: 14, scope: !9026)
!9028 = !DILocation(line: 6394, column: 9, scope: !2096)
!9029 = !DILocation(line: 6395, column: 16, scope: !9026)
!9030 = !DILocation(line: 6395, column: 9, scope: !9026)
!9031 = !DILocation(line: 6396, column: 28, scope: !2096)
!9032 = !DILocation(line: 6396, column: 12, scope: !2096)
!9033 = !DILocation(line: 6396, column: 5, scope: !2096)
!9034 = !DILocation(line: 6397, column: 1, scope: !2096)
!9035 = !DILocation(line: 6424, column: 25, scope: !2102)
!9036 = !DILocation(line: 6424, column: 41, scope: !2102)
!9037 = !DILocation(line: 6429, column: 9, scope: !9038)
!9038 = distinct !DILexicalBlock(scope: !2102, file: !616, line: 6429, column: 9)
!9039 = !DILocation(line: 6429, column: 19, scope: !9038)
!9040 = !DILocation(line: 6429, column: 9, scope: !2102)
!9041 = !DILocation(line: 6431, column: 16, scope: !9038)
!9042 = !DILocation(line: 6431, column: 9, scope: !9038)
!9043 = !DILocation(line: 6432, column: 51, scope: !2102)
!9044 = !DILocation(line: 6433, column: 5, scope: !2102)
!9045 = !DILocation(line: 6434, column: 1, scope: !2102)
!9046 = !DILocation(line: 7048, column: 22, scope: !2106)
!9047 = !DILocation(line: 7048, column: 38, scope: !2106)
!9048 = !DILocation(line: 7050, column: 5, scope: !2106)
!9049 = !DILocation(line: 7050, column: 11, scope: !2106)
!9050 = !DILocation(line: 7051, column: 5, scope: !2106)
!9051 = !DILocation(line: 7051, column: 9, scope: !2106)
!9052 = !DILocation(line: 7052, column: 14, scope: !2106)
!9053 = !DILocation(line: 7054, column: 7, scope: !2113)
!9054 = !DILocation(line: 7054, column: 22, scope: !2113)
!9055 = !DILocation(line: 7054, column: 37, scope: !2113)
!9056 = !DILocation(line: 7054, column: 35, scope: !2113)
!9057 = !DILocation(line: 7055, column: 16, scope: !2113)
!9058 = !DILocation(line: 7055, column: 11, scope: !2113)
!9059 = !DILocation(line: 7055, column: 9, scope: !2113)
!9060 = !DILocation(line: 7056, column: 26, scope: !2113)
!9061 = !DILocation(line: 7056, column: 5, scope: !2113)
!9062 = !DILocation(line: 7056, column: 34, scope: !2106)
!9063 = !DILocation(line: 7057, column: 9, scope: !9064)
!9064 = distinct !DILexicalBlock(scope: !2106, file: !616, line: 7057, column: 9)
!9065 = !DILocation(line: 7057, column: 13, scope: !9064)
!9066 = !DILocation(line: 7057, column: 9, scope: !2106)
!9067 = !DILocation(line: 7058, column: 16, scope: !9064)
!9068 = !DILocation(line: 7058, column: 9, scope: !9064)
!9069 = !DILocation(line: 7060, column: 55, scope: !2106)
!9070 = !DILocation(line: 7060, column: 39, scope: !2106)
!9071 = !DILocation(line: 7060, column: 62, scope: !2106)
!9072 = !DILocation(line: 7060, column: 12, scope: !2106)
!9073 = !DILocation(line: 7060, column: 5, scope: !2106)
!9074 = !DILocation(line: 7061, column: 1, scope: !2106)
!9075 = !DILocation(line: 6899, column: 23, scope: !2114)
!9076 = !DILocation(line: 6899, column: 39, scope: !2114)
!9077 = !DILocation(line: 6901, column: 5, scope: !2114)
!9078 = !DILocation(line: 6901, column: 11, scope: !2114)
!9079 = !DILocation(line: 6902, column: 5, scope: !2114)
!9080 = !DILocation(line: 6902, column: 9, scope: !2114)
!9081 = !DILocation(line: 6903, column: 5, scope: !2114)
!9082 = !DILocation(line: 6903, column: 19, scope: !2114)
!9083 = !DILocation(line: 6904, column: 5, scope: !2114)
!9084 = !DILocation(line: 6904, column: 9, scope: !2114)
!9085 = !DILocation(line: 6905, column: 14, scope: !2114)
!9086 = !DILocation(line: 6907, column: 34, scope: !9087)
!9087 = distinct !DILexicalBlock(scope: !2114, file: !616, line: 6907, column: 9)
!9088 = !DILocation(line: 6907, column: 10, scope: !9087)
!9089 = !DILocation(line: 6907, column: 9, scope: !2114)
!9090 = !DILocation(line: 6908, column: 9, scope: !9087)
!9091 = !DILocation(line: 6910, column: 7, scope: !2203)
!9092 = !DILocation(line: 6910, column: 22, scope: !2203)
!9093 = !DILocation(line: 6910, column: 37, scope: !2203)
!9094 = !DILocation(line: 6910, column: 35, scope: !2203)
!9095 = !DILocation(line: 6911, column: 17, scope: !2203)
!9096 = !DILocation(line: 6911, column: 26, scope: !2203)
!9097 = !DILocation(line: 6911, column: 11, scope: !2203)
!9098 = !DILocation(line: 6911, column: 9, scope: !2203)
!9099 = !DILocation(line: 6912, column: 26, scope: !2203)
!9100 = !DILocation(line: 6912, column: 5, scope: !2203)
!9101 = !DILocation(line: 6912, column: 34, scope: !2114)
!9102 = !DILocation(line: 6914, column: 24, scope: !2114)
!9103 = !DILocation(line: 6914, column: 30, scope: !2114)
!9104 = !DILocation(line: 6914, column: 12, scope: !2114)
!9105 = !DILocation(line: 6914, column: 5, scope: !2114)
!9106 = !DILocation(line: 6915, column: 1, scope: !2114)
!9107 = !DILocation(line: 6924, column: 23, scope: !2222)
!9108 = !DILocation(line: 6924, column: 39, scope: !2222)
!9109 = !DILocation(line: 6926, column: 5, scope: !2222)
!9110 = !DILocation(line: 6926, column: 11, scope: !2222)
!9111 = !DILocation(line: 6927, column: 5, scope: !2222)
!9112 = !DILocation(line: 6927, column: 9, scope: !2222)
!9113 = !DILocation(line: 6928, column: 5, scope: !2222)
!9114 = !DILocation(line: 6928, column: 19, scope: !2222)
!9115 = !DILocation(line: 6929, column: 5, scope: !2222)
!9116 = !DILocation(line: 6929, column: 9, scope: !2222)
!9117 = !DILocation(line: 6930, column: 14, scope: !2222)
!9118 = !DILocation(line: 6932, column: 34, scope: !9119)
!9119 = distinct !DILexicalBlock(scope: !2222, file: !616, line: 6932, column: 9)
!9120 = !DILocation(line: 6932, column: 10, scope: !9119)
!9121 = !DILocation(line: 6932, column: 9, scope: !2222)
!9122 = !DILocation(line: 6933, column: 9, scope: !9119)
!9123 = !DILocation(line: 6935, column: 7, scope: !2231)
!9124 = !DILocation(line: 6935, column: 22, scope: !2231)
!9125 = !DILocation(line: 6935, column: 37, scope: !2231)
!9126 = !DILocation(line: 6935, column: 35, scope: !2231)
!9127 = !DILocation(line: 6936, column: 17, scope: !2231)
!9128 = !DILocation(line: 6936, column: 22, scope: !2231)
!9129 = !DILocation(line: 6936, column: 31, scope: !2231)
!9130 = !DILocation(line: 6936, column: 11, scope: !2231)
!9131 = !DILocation(line: 6936, column: 9, scope: !2231)
!9132 = !DILocation(line: 6937, column: 26, scope: !2231)
!9133 = !DILocation(line: 6937, column: 5, scope: !2231)
!9134 = !DILocation(line: 6937, column: 34, scope: !2222)
!9135 = !DILocation(line: 6939, column: 24, scope: !2222)
!9136 = !DILocation(line: 6939, column: 30, scope: !2222)
!9137 = !DILocation(line: 6939, column: 12, scope: !2222)
!9138 = !DILocation(line: 6939, column: 5, scope: !2222)
!9139 = !DILocation(line: 6940, column: 1, scope: !2222)
!9140 = !DILocation(line: 6955, column: 24, scope: !2232)
!9141 = !DILocation(line: 6955, column: 40, scope: !2232)
!9142 = !DILocation(line: 6957, column: 5, scope: !2232)
!9143 = !DILocation(line: 6957, column: 15, scope: !2232)
!9144 = !DILocation(line: 6958, column: 5, scope: !2232)
!9145 = !DILocation(line: 6958, column: 14, scope: !2232)
!9146 = !DILocation(line: 6959, column: 5, scope: !2232)
!9147 = !DILocation(line: 6959, column: 10, scope: !2232)
!9148 = !DILocation(line: 6960, column: 5, scope: !2232)
!9149 = !DILocation(line: 6960, column: 9, scope: !2232)
!9150 = !DILocation(line: 6960, column: 18, scope: !2232)
!9151 = !DILocation(line: 6961, column: 5, scope: !2232)
!9152 = !DILocation(line: 6961, column: 15, scope: !2232)
!9153 = !DILocation(line: 6962, column: 8, scope: !2232)
!9154 = !DILocation(line: 6962, column: 18, scope: !2232)
!9155 = !DILocation(line: 6962, column: 24, scope: !2232)
!9156 = !DILocation(line: 6962, column: 31, scope: !2232)
!9157 = !{!9158, !3841, i64 0}
!9158 = !{!"", !3841, i64 0, !3841, i64 4}
!9159 = !DILocation(line: 6963, column: 34, scope: !9160)
!9160 = distinct !DILexicalBlock(scope: !2232, file: !616, line: 6963, column: 9)
!9161 = !DILocation(line: 6963, column: 10, scope: !9160)
!9162 = !DILocation(line: 6963, column: 9, scope: !2232)
!9163 = !DILocation(line: 6964, column: 9, scope: !9160)
!9164 = !DILocation(line: 6965, column: 7, scope: !2305)
!9165 = !DILocation(line: 6965, column: 22, scope: !2305)
!9166 = !DILocation(line: 6965, column: 37, scope: !2305)
!9167 = !DILocation(line: 6965, column: 35, scope: !2305)
!9168 = !DILocation(line: 6966, column: 18, scope: !2305)
!9169 = !{!3842, !3842, i64 0}
!9170 = !DILocation(line: 6966, column: 26, scope: !2305)
!9171 = !DILocation(line: 6966, column: 35, scope: !2305)
!9172 = !DILocation(line: 6966, column: 11, scope: !2305)
!9173 = !DILocation(line: 6966, column: 9, scope: !2305)
!9174 = !DILocation(line: 6967, column: 26, scope: !2305)
!9175 = !DILocation(line: 6967, column: 5, scope: !2305)
!9176 = !DILocation(line: 6967, column: 34, scope: !2232)
!9177 = !DILocation(line: 6968, column: 9, scope: !9178)
!9178 = distinct !DILexicalBlock(scope: !2232, file: !616, line: 6968, column: 9)
!9179 = !DILocation(line: 6968, column: 13, scope: !9178)
!9180 = !DILocation(line: 6968, column: 9, scope: !2232)
!9181 = !DILocation(line: 6969, column: 16, scope: !9178)
!9182 = !DILocation(line: 6969, column: 9, scope: !9178)
!9183 = !DILocation(line: 6971, column: 12, scope: !9184)
!9184 = distinct !DILexicalBlock(scope: !2232, file: !616, line: 6971, column: 9)
!9185 = !DILocation(line: 6971, column: 22, scope: !9184)
!9186 = !DILocation(line: 6971, column: 28, scope: !9184)
!9187 = !DILocation(line: 6971, column: 35, scope: !9184)
!9188 = !DILocation(line: 6971, column: 9, scope: !2232)
!9189 = !DILocation(line: 6972, column: 62, scope: !9184)
!9190 = !DILocation(line: 6972, column: 9, scope: !9184)
!9191 = !DILocation(line: 6974, column: 14, scope: !2232)
!9192 = !DILocation(line: 6974, column: 12, scope: !2232)
!9193 = !DILocation(line: 6975, column: 10, scope: !9194)
!9194 = distinct !DILexicalBlock(scope: !2232, file: !616, line: 6975, column: 9)
!9195 = !DILocation(line: 6975, column: 9, scope: !2232)
!9196 = !DILocation(line: 6976, column: 9, scope: !9194)
!9197 = !DILocation(line: 6978, column: 67, scope: !2232)
!9198 = !DILocation(line: 6978, column: 77, scope: !2232)
!9199 = !DILocation(line: 6978, column: 83, scope: !2232)
!9200 = !DILocation(line: 6978, column: 64, scope: !2232)
!9201 = !DILocation(line: 6978, column: 48, scope: !2232)
!9202 = !DILocation(line: 6978, column: 25, scope: !2232)
!9203 = !DILocation(line: 6978, column: 7, scope: !2232)
!9204 = !DILocation(line: 6978, column: 35, scope: !2232)
!9205 = !DILocation(line: 6978, column: 6, scope: !2232)
!9206 = !DILocation(line: 6978, column: 46, scope: !2232)
!9207 = !DILocation(line: 6979, column: 67, scope: !2232)
!9208 = !DILocation(line: 6979, column: 77, scope: !2232)
!9209 = !DILocation(line: 6979, column: 83, scope: !2232)
!9210 = !{!9158, !3841, i64 4}
!9211 = !DILocation(line: 6979, column: 48, scope: !2232)
!9212 = !DILocation(line: 6979, column: 25, scope: !2232)
!9213 = !DILocation(line: 6979, column: 7, scope: !2232)
!9214 = !DILocation(line: 6979, column: 35, scope: !2232)
!9215 = !DILocation(line: 6979, column: 6, scope: !2232)
!9216 = !DILocation(line: 6979, column: 46, scope: !2232)
!9217 = !DILocation(line: 6980, column: 74, scope: !2232)
!9218 = !{!9219, !3841, i64 0}
!9219 = !{!"", !3841, i64 0, !3841, i64 4, !3841, i64 8, !3842, i64 16}
!9220 = !DILocation(line: 6980, column: 64, scope: !2232)
!9221 = !DILocation(line: 6980, column: 48, scope: !2232)
!9222 = !DILocation(line: 6980, column: 25, scope: !2232)
!9223 = !DILocation(line: 6980, column: 7, scope: !2232)
!9224 = !DILocation(line: 6980, column: 35, scope: !2232)
!9225 = !DILocation(line: 6980, column: 6, scope: !2232)
!9226 = !DILocation(line: 6980, column: 46, scope: !2232)
!9227 = !DILocation(line: 6981, column: 74, scope: !2232)
!9228 = !DILocation(line: 6981, column: 84, scope: !2232)
!9229 = !DILocation(line: 6981, column: 93, scope: !2232)
!9230 = !{!9231, !3841, i64 8}
!9231 = !{!"", !3841, i64 0, !3841, i64 4, !3841, i64 8, !3894, i64 16, !3894, i64 24}
!9232 = !DILocation(line: 6981, column: 64, scope: !2232)
!9233 = !DILocation(line: 6981, column: 48, scope: !2232)
!9234 = !DILocation(line: 6981, column: 25, scope: !2232)
!9235 = !DILocation(line: 6981, column: 7, scope: !2232)
!9236 = !DILocation(line: 6981, column: 35, scope: !2232)
!9237 = !DILocation(line: 6981, column: 6, scope: !2232)
!9238 = !DILocation(line: 6981, column: 46, scope: !2232)
!9239 = !DILocation(line: 6982, column: 74, scope: !2232)
!9240 = !{!9219, !3841, i64 8}
!9241 = !DILocation(line: 6982, column: 64, scope: !2232)
!9242 = !DILocation(line: 6982, column: 48, scope: !2232)
!9243 = !DILocation(line: 6982, column: 25, scope: !2232)
!9244 = !DILocation(line: 6982, column: 7, scope: !2232)
!9245 = !DILocation(line: 6982, column: 35, scope: !2232)
!9246 = !DILocation(line: 6982, column: 6, scope: !2232)
!9247 = !DILocation(line: 6982, column: 46, scope: !2232)
!9248 = !DILocation(line: 6983, column: 9, scope: !2309)
!9249 = !DILocation(line: 6983, column: 9, scope: !2232)
!9250 = !DILocation(line: 6984, column: 9, scope: !2308)
!9251 = !DILocation(line: 6984, column: 14, scope: !9252)
!9252 = !DILexicalBlockFile(scope: !2307, file: !616, discriminator: 1)
!9253 = !DILocation(line: 6984, column: 24, scope: !2307)
!9254 = !DILocation(line: 6984, column: 54, scope: !2307)
!9255 = !DILocation(line: 6984, column: 71, scope: !9256)
!9256 = distinct !DILexicalBlock(scope: !2307, file: !616, line: 6984, column: 68)
!9257 = !DILocation(line: 6984, column: 88, scope: !9256)
!9258 = !DILocation(line: 6984, column: 68, scope: !9256)
!9259 = !DILocation(line: 6984, column: 98, scope: !9256)
!9260 = !DILocation(line: 6984, column: 68, scope: !2307)
!9261 = !DILocation(line: 6984, column: 68, scope: !9262)
!9262 = !DILexicalBlockFile(scope: !2307, file: !616, discriminator: 2)
!9263 = !DILocation(line: 6984, column: 129, scope: !9264)
!9264 = !DILexicalBlockFile(scope: !9256, file: !616, discriminator: 3)
!9265 = !DILocation(line: 6984, column: 147, scope: !9256)
!9266 = !DILocation(line: 6984, column: 157, scope: !9256)
!9267 = !DILocation(line: 6984, column: 182, scope: !9256)
!9268 = !DILocation(line: 6984, column: 113, scope: !9256)
!9269 = !DILocation(line: 6984, column: 201, scope: !9270)
!9270 = !DILexicalBlockFile(scope: !2308, file: !616, discriminator: 4)
!9271 = !DILocation(line: 6984, column: 201, scope: !2307)
!9272 = !DILocation(line: 6984, column: 201, scope: !9273)
!9273 = !DILexicalBlockFile(scope: !2307, file: !616, discriminator: 5)
!9274 = !DILocation(line: 6985, column: 9, scope: !2308)
!9275 = !DILocation(line: 6988, column: 12, scope: !2232)
!9276 = !DILocation(line: 6988, column: 5, scope: !2232)
!9277 = !DILocation(line: 6989, column: 1, scope: !2232)
!9278 = !DILocation(line: 6998, column: 25, scope: !2310)
!9279 = !DILocation(line: 6998, column: 41, scope: !2310)
!9280 = !DILocation(line: 7000, column: 5, scope: !2310)
!9281 = !DILocation(line: 7000, column: 11, scope: !2310)
!9282 = !DILocation(line: 7001, column: 5, scope: !2310)
!9283 = !DILocation(line: 7001, column: 9, scope: !2310)
!9284 = !DILocation(line: 7002, column: 5, scope: !2310)
!9285 = !DILocation(line: 7002, column: 9, scope: !2310)
!9286 = !DILocation(line: 7003, column: 14, scope: !2310)
!9287 = !DILocation(line: 7005, column: 34, scope: !9288)
!9288 = distinct !DILexicalBlock(scope: !2310, file: !616, line: 7005, column: 9)
!9289 = !DILocation(line: 7005, column: 10, scope: !9288)
!9290 = !DILocation(line: 7005, column: 9, scope: !2310)
!9291 = !DILocation(line: 7006, column: 9, scope: !9288)
!9292 = !DILocation(line: 7007, column: 7, scope: !2318)
!9293 = !DILocation(line: 7007, column: 22, scope: !2318)
!9294 = !DILocation(line: 7007, column: 37, scope: !2318)
!9295 = !DILocation(line: 7007, column: 35, scope: !2318)
!9296 = !DILocation(line: 7008, column: 19, scope: !2318)
!9297 = !DILocation(line: 7008, column: 33, scope: !2318)
!9298 = !DILocation(line: 7008, column: 11, scope: !2318)
!9299 = !DILocation(line: 7008, column: 9, scope: !2318)
!9300 = !DILocation(line: 7009, column: 26, scope: !2318)
!9301 = !DILocation(line: 7009, column: 5, scope: !2318)
!9302 = !DILocation(line: 7009, column: 34, scope: !2310)
!9303 = !DILocation(line: 7010, column: 9, scope: !9304)
!9304 = distinct !DILexicalBlock(scope: !2310, file: !616, line: 7010, column: 9)
!9305 = !DILocation(line: 7010, column: 13, scope: !9304)
!9306 = !DILocation(line: 7010, column: 9, scope: !2310)
!9307 = !DILocation(line: 7011, column: 16, scope: !9304)
!9308 = !DILocation(line: 7011, column: 9, scope: !9304)
!9309 = !DILocation(line: 7013, column: 55, scope: !2310)
!9310 = !DILocation(line: 7013, column: 39, scope: !2310)
!9311 = !DILocation(line: 7013, column: 62, scope: !2310)
!9312 = !DILocation(line: 7013, column: 12, scope: !2310)
!9313 = !DILocation(line: 7013, column: 5, scope: !2310)
!9314 = !DILocation(line: 7014, column: 1, scope: !2310)
!9315 = !DILocation(line: 7591, column: 24, scope: !2319)
!9316 = !DILocation(line: 7591, column: 40, scope: !2319)
!9317 = !DILocation(line: 7593, column: 5, scope: !2319)
!9318 = !DILocation(line: 7593, column: 11, scope: !2319)
!9319 = !DILocation(line: 7594, column: 5, scope: !2319)
!9320 = !DILocation(line: 7594, column: 9, scope: !2319)
!9321 = !DILocation(line: 7595, column: 34, scope: !9322)
!9322 = distinct !DILexicalBlock(scope: !2319, file: !616, line: 7595, column: 9)
!9323 = !DILocation(line: 7595, column: 10, scope: !9322)
!9324 = !DILocation(line: 7595, column: 9, scope: !2319)
!9325 = !DILocation(line: 7596, column: 9, scope: !9322)
!9326 = !DILocation(line: 7597, column: 18, scope: !2319)
!9327 = !DILocation(line: 7597, column: 11, scope: !2319)
!9328 = !DILocation(line: 7597, column: 9, scope: !2319)
!9329 = !DILocation(line: 7598, column: 9, scope: !9330)
!9330 = distinct !DILexicalBlock(scope: !2319, file: !616, line: 7598, column: 9)
!9331 = !DILocation(line: 7598, column: 13, scope: !9330)
!9332 = !DILocation(line: 7598, column: 9, scope: !2319)
!9333 = !DILocation(line: 7599, column: 16, scope: !9330)
!9334 = !DILocation(line: 7599, column: 9, scope: !9330)
!9335 = !DILocation(line: 7600, column: 34, scope: !2319)
!9336 = !DILocation(line: 7600, column: 28, scope: !2319)
!9337 = !DILocation(line: 7600, column: 12, scope: !2319)
!9338 = !DILocation(line: 7600, column: 5, scope: !2319)
!9339 = !DILocation(line: 7601, column: 1, scope: !2319)
!9340 = !DILocation(line: 7611, column: 24, scope: !2325)
!9341 = !DILocation(line: 7611, column: 40, scope: !2325)
!9342 = !DILocation(line: 7613, column: 9, scope: !9343)
!9343 = distinct !DILexicalBlock(scope: !2325, file: !616, line: 7613, column: 9)
!9344 = !DILocation(line: 7613, column: 18, scope: !9343)
!9345 = !DILocation(line: 7613, column: 9, scope: !2325)
!9346 = !DILocation(line: 7614, column: 16, scope: !9343)
!9347 = !DILocation(line: 7614, column: 9, scope: !9343)
!9348 = !DILocation(line: 7615, column: 51, scope: !2325)
!9349 = !DILocation(line: 7616, column: 5, scope: !2325)
!9350 = !DILocation(line: 7617, column: 1, scope: !2325)
!9351 = !DILocation(line: 7626, column: 25, scope: !2329)
!9352 = !DILocation(line: 7626, column: 41, scope: !2329)
!9353 = !DILocation(line: 7628, column: 5, scope: !2329)
!9354 = !DILocation(line: 7628, column: 11, scope: !2329)
!9355 = !DILocation(line: 7629, column: 5, scope: !2329)
!9356 = !DILocation(line: 7629, column: 9, scope: !2329)
!9357 = !DILocation(line: 7630, column: 34, scope: !9358)
!9358 = distinct !DILexicalBlock(scope: !2329, file: !616, line: 7630, column: 9)
!9359 = !DILocation(line: 7630, column: 10, scope: !9358)
!9360 = !DILocation(line: 7630, column: 9, scope: !2329)
!9361 = !DILocation(line: 7631, column: 9, scope: !9358)
!9362 = !DILocation(line: 7632, column: 17, scope: !9363)
!9363 = distinct !DILexicalBlock(scope: !2329, file: !616, line: 7632, column: 9)
!9364 = !DILocation(line: 7632, column: 22, scope: !9363)
!9365 = !DILocation(line: 7632, column: 9, scope: !9363)
!9366 = !DILocation(line: 7632, column: 28, scope: !9363)
!9367 = !DILocation(line: 7632, column: 9, scope: !2329)
!9368 = !DILocation(line: 7633, column: 16, scope: !9363)
!9369 = !DILocation(line: 7633, column: 9, scope: !9363)
!9370 = !DILocation(line: 7634, column: 51, scope: !2329)
!9371 = !DILocation(line: 7635, column: 5, scope: !2329)
!9372 = !DILocation(line: 7636, column: 1, scope: !2329)
!9373 = !DILocation(line: 7646, column: 27, scope: !2335)
!9374 = !DILocation(line: 7646, column: 43, scope: !2335)
!9375 = !DILocation(line: 7648, column: 5, scope: !2335)
!9376 = !DILocation(line: 7648, column: 9, scope: !2335)
!9377 = !DILocation(line: 7649, column: 5, scope: !2335)
!9378 = !DILocation(line: 7649, column: 11, scope: !2335)
!9379 = !DILocation(line: 7650, column: 34, scope: !9380)
!9380 = distinct !DILexicalBlock(scope: !2335, file: !616, line: 7650, column: 9)
!9381 = !DILocation(line: 7650, column: 10, scope: !9380)
!9382 = !DILocation(line: 7650, column: 9, scope: !2335)
!9383 = !DILocation(line: 7651, column: 9, scope: !9380)
!9384 = !DILocation(line: 7652, column: 22, scope: !2335)
!9385 = !DILocation(line: 7652, column: 12, scope: !2335)
!9386 = !DILocation(line: 7652, column: 10, scope: !2335)
!9387 = !DILocation(line: 7653, column: 9, scope: !9388)
!9388 = distinct !DILexicalBlock(scope: !2335, file: !616, line: 7653, column: 9)
!9389 = !DILocation(line: 7653, column: 14, scope: !9388)
!9390 = !DILocation(line: 7653, column: 9, scope: !2335)
!9391 = !DILocation(line: 7654, column: 16, scope: !9388)
!9392 = !DILocation(line: 7654, column: 9, scope: !9388)
!9393 = !DILocation(line: 7655, column: 28, scope: !2335)
!9394 = !DILocation(line: 7655, column: 12, scope: !2335)
!9395 = !DILocation(line: 7655, column: 5, scope: !2335)
!9396 = !DILocation(line: 7656, column: 1, scope: !2335)
!9397 = !DILocation(line: 7666, column: 27, scope: !2341)
!9398 = !DILocation(line: 7666, column: 43, scope: !2341)
!9399 = !DILocation(line: 7668, column: 5, scope: !2341)
!9400 = !DILocation(line: 7668, column: 9, scope: !2341)
!9401 = !DILocation(line: 7669, column: 5, scope: !2341)
!9402 = !DILocation(line: 7669, column: 11, scope: !2341)
!9403 = !DILocation(line: 7670, column: 34, scope: !9404)
!9404 = distinct !DILexicalBlock(scope: !2341, file: !616, line: 7670, column: 9)
!9405 = !DILocation(line: 7670, column: 10, scope: !9404)
!9406 = !DILocation(line: 7670, column: 9, scope: !2341)
!9407 = !DILocation(line: 7671, column: 9, scope: !9404)
!9408 = !DILocation(line: 7672, column: 19, scope: !9409)
!9409 = distinct !DILexicalBlock(scope: !2341, file: !616, line: 7672, column: 9)
!9410 = !DILocation(line: 7672, column: 23, scope: !9409)
!9411 = !DILocation(line: 7672, column: 9, scope: !9409)
!9412 = !DILocation(line: 7672, column: 29, scope: !9409)
!9413 = !DILocation(line: 7672, column: 9, scope: !2341)
!9414 = !DILocation(line: 7673, column: 16, scope: !9409)
!9415 = !DILocation(line: 7673, column: 9, scope: !9409)
!9416 = !DILocation(line: 7674, column: 51, scope: !2341)
!9417 = !DILocation(line: 7675, column: 5, scope: !2341)
!9418 = !DILocation(line: 7676, column: 1, scope: !2341)
!9419 = !DILocation(line: 7695, column: 22, scope: !2347)
!9420 = !DILocation(line: 7695, column: 38, scope: !2347)
!9421 = !DILocation(line: 7695, column: 54, scope: !2347)
!9422 = !DILocation(line: 7697, column: 5, scope: !2347)
!9423 = !DILocation(line: 7697, column: 12, scope: !2347)
!9424 = !DILocation(line: 7698, column: 5, scope: !2347)
!9425 = !DILocation(line: 7698, column: 9, scope: !2347)
!9426 = !DILocation(line: 7699, column: 5, scope: !2347)
!9427 = !DILocation(line: 7699, column: 9, scope: !2347)
!9428 = !DILocation(line: 7700, column: 5, scope: !2347)
!9429 = !DILocation(line: 7700, column: 9, scope: !2347)
!9430 = !DILocation(line: 7701, column: 5, scope: !2347)
!9431 = !DILocation(line: 7701, column: 9, scope: !2347)
!9432 = !DILocation(line: 7702, column: 5, scope: !2347)
!9433 = !DILocation(line: 7702, column: 15, scope: !2347)
!9434 = !DILocation(line: 7705, column: 5, scope: !2347)
!9435 = !DILocation(line: 7705, column: 10, scope: !2347)
!9436 = !DILocation(line: 7710, column: 5, scope: !2347)
!9437 = !DILocation(line: 7711, column: 10, scope: !2347)
!9438 = !DILocation(line: 7711, column: 24, scope: !2347)
!9439 = !DILocation(line: 7712, column: 45, scope: !9440)
!9440 = distinct !DILexicalBlock(scope: !2347, file: !616, line: 7712, column: 9)
!9441 = !DILocation(line: 7712, column: 51, scope: !9440)
!9442 = !DILocation(line: 7712, column: 10, scope: !9440)
!9443 = !DILocation(line: 7712, column: 9, scope: !2347)
!9444 = !DILocation(line: 7721, column: 9, scope: !9440)
!9445 = !DILocation(line: 7726, column: 11, scope: !2347)
!9446 = !DILocation(line: 7729, column: 7, scope: !2360)
!9447 = !DILocation(line: 7729, column: 22, scope: !2360)
!9448 = !DILocation(line: 7729, column: 37, scope: !2360)
!9449 = !DILocation(line: 7729, column: 35, scope: !2360)
!9450 = !DILocation(line: 7736, column: 9, scope: !9451)
!9451 = distinct !DILexicalBlock(scope: !2360, file: !616, line: 7736, column: 9)
!9452 = !DILocation(line: 7736, column: 16, scope: !9451)
!9453 = !DILocation(line: 7736, column: 9, scope: !2360)
!9454 = !DILocation(line: 7737, column: 21, scope: !9451)
!9455 = !DILocation(line: 7737, column: 34, scope: !9451)
!9456 = !DILocation(line: 7737, column: 42, scope: !9451)
!9457 = !DILocation(line: 7737, column: 49, scope: !9451)
!9458 = !DILocation(line: 7737, column: 14, scope: !9451)
!9459 = !DILocation(line: 7737, column: 12, scope: !9451)
!9460 = !DILocation(line: 7737, column: 9, scope: !9451)
!9461 = !DILocation(line: 7740, column: 24, scope: !9451)
!9462 = !DILocation(line: 7740, column: 32, scope: !9451)
!9463 = !DILocation(line: 7740, column: 39, scope: !9451)
!9464 = !DILocation(line: 7740, column: 14, scope: !9451)
!9465 = !DILocation(line: 7740, column: 12, scope: !9451)
!9466 = !DILocation(line: 7741, column: 26, scope: !2360)
!9467 = !DILocation(line: 7741, column: 5, scope: !2360)
!9468 = !DILocation(line: 7741, column: 34, scope: !2347)
!9469 = !DILocation(line: 7743, column: 9, scope: !9470)
!9470 = distinct !DILexicalBlock(scope: !2347, file: !616, line: 7743, column: 9)
!9471 = !DILocation(line: 7743, column: 12, scope: !9470)
!9472 = !DILocation(line: 7743, column: 9, scope: !2347)
!9473 = !DILocation(line: 7744, column: 46, scope: !9474)
!9474 = distinct !DILexicalBlock(scope: !9470, file: !616, line: 7743, column: 19)
!9475 = !DILocation(line: 7744, column: 66, scope: !9474)
!9476 = !DILocation(line: 7744, column: 9, scope: !9474)
!9477 = !DILocation(line: 7745, column: 9, scope: !9474)
!9478 = !DILocation(line: 7749, column: 29, scope: !9479)
!9479 = distinct !DILexicalBlock(scope: !2347, file: !616, line: 7749, column: 9)
!9480 = !DILocation(line: 7749, column: 36, scope: !9479)
!9481 = !DILocation(line: 7749, column: 9, scope: !9479)
!9482 = !DILocation(line: 7749, column: 55, scope: !9479)
!9483 = !DILocation(line: 7749, column: 9, scope: !2347)
!9484 = !DILocation(line: 7750, column: 15, scope: !9485)
!9485 = distinct !DILexicalBlock(scope: !9479, file: !616, line: 7749, column: 60)
!9486 = !DILocation(line: 7750, column: 9, scope: !9485)
!9487 = !DILocation(line: 7751, column: 9, scope: !9485)
!9488 = !DILocation(line: 7755, column: 42, scope: !2347)
!9489 = !DILocation(line: 7755, column: 36, scope: !2347)
!9490 = !DILocation(line: 7755, column: 20, scope: !2347)
!9491 = !DILocation(line: 7755, column: 18, scope: !2347)
!9492 = !DILocation(line: 7755, column: 5, scope: !2347)
!9493 = !DILocation(line: 7758, column: 5, scope: !2347)
!9494 = !DILocation(line: 7759, column: 12, scope: !2347)
!9495 = !DILocation(line: 7759, column: 5, scope: !2347)
!9496 = !DILocation(line: 7760, column: 1, scope: !2347)
!9497 = !DILocation(line: 7771, column: 24, scope: !2361)
!9498 = !DILocation(line: 7771, column: 40, scope: !2361)
!9499 = !DILocation(line: 7773, column: 5, scope: !2361)
!9500 = !DILocation(line: 7773, column: 9, scope: !2361)
!9501 = !DILocation(line: 7773, column: 13, scope: !2361)
!9502 = !DILocation(line: 7774, column: 34, scope: !9503)
!9503 = distinct !DILexicalBlock(scope: !2361, file: !616, line: 7774, column: 9)
!9504 = !DILocation(line: 7774, column: 10, scope: !9503)
!9505 = !DILocation(line: 7774, column: 9, scope: !2361)
!9506 = !DILocation(line: 7775, column: 9, scope: !9503)
!9507 = !DILocation(line: 7778, column: 7, scope: !2368)
!9508 = !DILocation(line: 7778, column: 22, scope: !2368)
!9509 = !DILocation(line: 7778, column: 37, scope: !2368)
!9510 = !DILocation(line: 7778, column: 35, scope: !2368)
!9511 = !DILocation(line: 7779, column: 17, scope: !2368)
!9512 = !DILocation(line: 7779, column: 11, scope: !2368)
!9513 = !DILocation(line: 7779, column: 9, scope: !2368)
!9514 = !DILocation(line: 7780, column: 26, scope: !2368)
!9515 = !DILocation(line: 7780, column: 5, scope: !2368)
!9516 = !DILocation(line: 7780, column: 34, scope: !2361)
!9517 = !DILocation(line: 7781, column: 9, scope: !9518)
!9518 = distinct !DILexicalBlock(scope: !2361, file: !616, line: 7781, column: 9)
!9519 = !DILocation(line: 7781, column: 13, scope: !9518)
!9520 = !DILocation(line: 7781, column: 9, scope: !2361)
!9521 = !DILocation(line: 7782, column: 16, scope: !9518)
!9522 = !DILocation(line: 7782, column: 9, scope: !9518)
!9523 = !DILocation(line: 7783, column: 51, scope: !2361)
!9524 = !DILocation(line: 7784, column: 5, scope: !2361)
!9525 = !DILocation(line: 7785, column: 1, scope: !2361)
!9526 = !DILocation(line: 7793, column: 28, scope: !2369)
!9527 = !DILocation(line: 7793, column: 44, scope: !2369)
!9528 = !DILocation(line: 7795, column: 5, scope: !2369)
!9529 = !DILocation(line: 7795, column: 9, scope: !2369)
!9530 = !DILocation(line: 7795, column: 18, scope: !2369)
!9531 = !DILocation(line: 7795, column: 25, scope: !2369)
!9532 = !DILocation(line: 7796, column: 34, scope: !9533)
!9533 = distinct !DILexicalBlock(scope: !2369, file: !616, line: 7796, column: 9)
!9534 = !DILocation(line: 7796, column: 10, scope: !9533)
!9535 = !DILocation(line: 7796, column: 9, scope: !2369)
!9536 = !DILocation(line: 7797, column: 9, scope: !9533)
!9537 = !DILocation(line: 7798, column: 7, scope: !2377)
!9538 = !DILocation(line: 7798, column: 22, scope: !2377)
!9539 = !DILocation(line: 7798, column: 37, scope: !2377)
!9540 = !DILocation(line: 7798, column: 35, scope: !2377)
!9541 = !DILocation(line: 7799, column: 14, scope: !9542)
!9542 = distinct !DILexicalBlock(scope: !2377, file: !616, line: 7799, column: 5)
!9543 = !DILocation(line: 7799, column: 12, scope: !9542)
!9544 = !DILocation(line: 7799, column: 10, scope: !9542)
!9545 = !DILocation(line: 7799, column: 23, scope: !9546)
!9546 = !DILexicalBlockFile(scope: !9547, file: !616, discriminator: 2)
!9547 = !DILexicalBlockFile(scope: !9548, file: !616, discriminator: 1)
!9548 = distinct !DILexicalBlock(scope: !9542, file: !616, line: 7799, column: 5)
!9549 = !DILocation(line: 7799, column: 27, scope: !9548)
!9550 = !DILocation(line: 7799, column: 25, scope: !9548)
!9551 = !DILocation(line: 7799, column: 5, scope: !9542)
!9552 = !DILocation(line: 7801, column: 19, scope: !9553)
!9553 = distinct !DILexicalBlock(scope: !9548, file: !616, line: 7800, column: 13)
!9554 = !DILocation(line: 7801, column: 13, scope: !9553)
!9555 = !DILocation(line: 7800, column: 15, scope: !9553)
!9556 = !DILocation(line: 7799, column: 35, scope: !9548)
!9557 = !DILocation(line: 7799, column: 5, scope: !9548)
!9558 = !DILocation(line: 7802, column: 26, scope: !2377)
!9559 = !DILocation(line: 7802, column: 5, scope: !2377)
!9560 = !DILocation(line: 7802, column: 34, scope: !2369)
!9561 = !DILocation(line: 7803, column: 58, scope: !2369)
!9562 = !DILocation(line: 7803, column: 5, scope: !2369)
!9563 = !DILocation(line: 7804, column: 1, scope: !2369)
!9564 = !DILocation(line: 10491, column: 27, scope: !2378)
!9565 = !DILocation(line: 10491, column: 43, scope: !2378)
!9566 = !DILocation(line: 10493, column: 5, scope: !2378)
!9567 = !DILocation(line: 10493, column: 9, scope: !2378)
!9568 = !DILocation(line: 10495, column: 34, scope: !9569)
!9569 = distinct !DILexicalBlock(scope: !2378, file: !616, line: 10495, column: 9)
!9570 = !DILocation(line: 10495, column: 10, scope: !9569)
!9571 = !DILocation(line: 10495, column: 9, scope: !2378)
!9572 = !DILocation(line: 10496, column: 9, scope: !9569)
!9573 = !DILocation(line: 10498, column: 32, scope: !2378)
!9574 = !DILocation(line: 10498, column: 12, scope: !2378)
!9575 = !DILocation(line: 10498, column: 5, scope: !2378)
!9576 = !DILocation(line: 10499, column: 1, scope: !2378)
!9577 = !DILocation(line: 7812, column: 21, scope: !2383)
!9578 = !DILocation(line: 7812, column: 37, scope: !2383)
!9579 = !DILocation(line: 7814, column: 5, scope: !2383)
!9580 = !DILocation(line: 7814, column: 9, scope: !2383)
!9581 = !DILocation(line: 7816, column: 34, scope: !9582)
!9582 = distinct !DILexicalBlock(scope: !2383, file: !616, line: 7816, column: 9)
!9583 = !DILocation(line: 7816, column: 10, scope: !9582)
!9584 = !DILocation(line: 7816, column: 9, scope: !2383)
!9585 = !DILocation(line: 7817, column: 9, scope: !9582)
!9586 = !DILocation(line: 7819, column: 18, scope: !2383)
!9587 = !DILocation(line: 7819, column: 10, scope: !2383)
!9588 = !DILocation(line: 7819, column: 8, scope: !2383)
!9589 = !DILocation(line: 7820, column: 9, scope: !9590)
!9590 = distinct !DILexicalBlock(scope: !2383, file: !616, line: 7820, column: 9)
!9591 = !DILocation(line: 7820, column: 12, scope: !9590)
!9592 = !DILocation(line: 7820, column: 9, scope: !2383)
!9593 = !DILocation(line: 7821, column: 9, scope: !9590)
!9594 = !DILocation(line: 7823, column: 34, scope: !2383)
!9595 = !DILocation(line: 7823, column: 28, scope: !2383)
!9596 = !DILocation(line: 7823, column: 12, scope: !2383)
!9597 = !DILocation(line: 7823, column: 5, scope: !2383)
!9598 = !DILocation(line: 7824, column: 1, scope: !2383)
!9599 = !DILocation(line: 7832, column: 22, scope: !2388)
!9600 = !DILocation(line: 7832, column: 38, scope: !2388)
!9601 = !DILocation(line: 7832, column: 54, scope: !2388)
!9602 = !DILocation(line: 7835, column: 5, scope: !2388)
!9603 = !DILocation(line: 7835, column: 9, scope: !2388)
!9604 = !DILocation(line: 7835, column: 13, scope: !2388)
!9605 = !DILocation(line: 7836, column: 5, scope: !2388)
!9606 = !DILocation(line: 7836, column: 9, scope: !2388)
!9607 = !DILocation(line: 7837, column: 5, scope: !2388)
!9608 = !DILocation(line: 7837, column: 9, scope: !2388)
!9609 = !DILocation(line: 7841, column: 5, scope: !2388)
!9610 = !DILocation(line: 7841, column: 9, scope: !2388)
!9611 = !DILocation(line: 7844, column: 45, scope: !9612)
!9612 = distinct !DILexicalBlock(scope: !2388, file: !616, line: 7844, column: 9)
!9613 = !DILocation(line: 7844, column: 51, scope: !9612)
!9614 = !DILocation(line: 7844, column: 10, scope: !9612)
!9615 = !DILocation(line: 7844, column: 9, scope: !2388)
!9616 = !DILocation(line: 7846, column: 9, scope: !9612)
!9617 = !DILocation(line: 7877, column: 10, scope: !2401)
!9618 = !DILocation(line: 7877, column: 22, scope: !2401)
!9619 = !DILocation(line: 7877, column: 25, scope: !9620)
!9620 = !DILexicalBlockFile(scope: !2401, file: !616, discriminator: 1)
!9621 = !DILocation(line: 7877, column: 36, scope: !2401)
!9622 = !DILocation(line: 7877, column: 9, scope: !2388)
!9623 = !DILocation(line: 7878, column: 11, scope: !2399)
!9624 = !DILocation(line: 7878, column: 26, scope: !2399)
!9625 = !DILocation(line: 7878, column: 41, scope: !2399)
!9626 = !DILocation(line: 7878, column: 39, scope: !2399)
!9627 = !DILocation(line: 7879, column: 20, scope: !2399)
!9628 = !DILocation(line: 7879, column: 24, scope: !2399)
!9629 = !DILocation(line: 7879, column: 15, scope: !2399)
!9630 = !DILocation(line: 7879, column: 13, scope: !2399)
!9631 = !DILocation(line: 7880, column: 30, scope: !2399)
!9632 = !DILocation(line: 7880, column: 9, scope: !2399)
!9633 = !DILocation(line: 7880, column: 38, scope: !2400)
!9634 = !DILocation(line: 7881, column: 13, scope: !9635)
!9635 = distinct !DILexicalBlock(scope: !2400, file: !616, line: 7881, column: 13)
!9636 = !DILocation(line: 7881, column: 17, scope: !9635)
!9637 = !DILocation(line: 7881, column: 13, scope: !2400)
!9638 = !DILocation(line: 7882, column: 17, scope: !9639)
!9639 = distinct !DILexicalBlock(scope: !9640, file: !616, line: 7882, column: 17)
!9640 = distinct !DILexicalBlock(scope: !9635, file: !616, line: 7881, column: 22)
!9641 = !DILocation(line: 7882, column: 28, scope: !9639)
!9642 = !DILocation(line: 7882, column: 17, scope: !9640)
!9643 = !DILocation(line: 7883, column: 33, scope: !9639)
!9644 = !DILocation(line: 7883, column: 32, scope: !9639)
!9645 = !DILocation(line: 7883, column: 54, scope: !9639)
!9646 = !DILocation(line: 7883, column: 28, scope: !9639)
!9647 = !DILocation(line: 7883, column: 17, scope: !9639)
!9648 = !DILocation(line: 7884, column: 17, scope: !9649)
!9649 = distinct !DILexicalBlock(scope: !9640, file: !616, line: 7884, column: 17)
!9650 = !DILocation(line: 7884, column: 17, scope: !9640)
!9651 = !DILocation(line: 7885, column: 24, scope: !9649)
!9652 = !DILocation(line: 7885, column: 17, scope: !9649)
!9653 = !DILocation(line: 7886, column: 9, scope: !9640)
!9654 = !DILocation(line: 7887, column: 5, scope: !2400)
!9655 = !DILocation(line: 7889, column: 9, scope: !2405)
!9656 = !DILocation(line: 7889, column: 21, scope: !2405)
!9657 = !DILocation(line: 7889, column: 24, scope: !9658)
!9658 = !DILexicalBlockFile(scope: !2405, file: !616, discriminator: 1)
!9659 = !DILocation(line: 7889, column: 35, scope: !2405)
!9660 = !DILocation(line: 7889, column: 9, scope: !2388)
!9661 = !DILocation(line: 7892, column: 11, scope: !2403)
!9662 = !DILocation(line: 7892, column: 26, scope: !2403)
!9663 = !DILocation(line: 7892, column: 41, scope: !2403)
!9664 = !DILocation(line: 7892, column: 39, scope: !2403)
!9665 = !DILocation(line: 7893, column: 20, scope: !2403)
!9666 = !DILocation(line: 7893, column: 24, scope: !2403)
!9667 = !DILocation(line: 7893, column: 15, scope: !2403)
!9668 = !DILocation(line: 7893, column: 13, scope: !2403)
!9669 = !DILocation(line: 7894, column: 30, scope: !2403)
!9670 = !DILocation(line: 7894, column: 9, scope: !2403)
!9671 = !DILocation(line: 7894, column: 38, scope: !2404)
!9672 = !DILocation(line: 7895, column: 13, scope: !9673)
!9673 = distinct !DILexicalBlock(scope: !2404, file: !616, line: 7895, column: 13)
!9674 = !DILocation(line: 7895, column: 17, scope: !9673)
!9675 = !DILocation(line: 7895, column: 13, scope: !2404)
!9676 = !DILocation(line: 7896, column: 20, scope: !9673)
!9677 = !DILocation(line: 7896, column: 13, scope: !9673)
!9678 = !DILocation(line: 7898, column: 14, scope: !9679)
!9679 = distinct !DILexicalBlock(scope: !2404, file: !616, line: 7898, column: 13)
!9680 = !DILocation(line: 7898, column: 26, scope: !9679)
!9681 = !DILocation(line: 7898, column: 49, scope: !9682)
!9682 = !DILexicalBlockFile(scope: !9679, file: !616, discriminator: 1)
!9683 = !DILocation(line: 7898, column: 29, scope: !9679)
!9684 = !DILocation(line: 7898, column: 69, scope: !9679)
!9685 = !DILocation(line: 7898, column: 13, scope: !2404)
!9686 = !DILocation(line: 7899, column: 19, scope: !9687)
!9687 = distinct !DILexicalBlock(scope: !9679, file: !616, line: 7898, column: 74)
!9688 = !DILocation(line: 7899, column: 13, scope: !9687)
!9689 = !DILocation(line: 7900, column: 13, scope: !9687)
!9690 = !DILocation(line: 7903, column: 5, scope: !2404)
!9691 = !DILocation(line: 7908, column: 51, scope: !2388)
!9692 = !DILocation(line: 7909, column: 5, scope: !2388)
!9693 = !DILocation(line: 7910, column: 1, scope: !2388)
!9694 = !DILocation(line: 7922, column: 23, scope: !2406)
!9695 = !DILocation(line: 7922, column: 39, scope: !2406)
!9696 = !DILocation(line: 7924, column: 5, scope: !2406)
!9697 = !DILocation(line: 7924, column: 9, scope: !2406)
!9698 = !DILocation(line: 7924, column: 13, scope: !2406)
!9699 = !DILocation(line: 7924, column: 18, scope: !2406)
!9700 = !DILocation(line: 7925, column: 5, scope: !2406)
!9701 = !DILocation(line: 7925, column: 11, scope: !2406)
!9702 = !DILocation(line: 7926, column: 34, scope: !9703)
!9703 = distinct !DILexicalBlock(scope: !2406, file: !616, line: 7926, column: 9)
!9704 = !DILocation(line: 7926, column: 10, scope: !9703)
!9705 = !DILocation(line: 7926, column: 9, scope: !2406)
!9706 = !DILocation(line: 7928, column: 9, scope: !9703)
!9707 = !DILocation(line: 7930, column: 7, scope: !2415)
!9708 = !DILocation(line: 7930, column: 22, scope: !2415)
!9709 = !DILocation(line: 7930, column: 37, scope: !2415)
!9710 = !DILocation(line: 7930, column: 35, scope: !2415)
!9711 = !DILocation(line: 7931, column: 17, scope: !2415)
!9712 = !DILocation(line: 7931, column: 21, scope: !2415)
!9713 = !DILocation(line: 7931, column: 26, scope: !2415)
!9714 = !DILocation(line: 7931, column: 11, scope: !2415)
!9715 = !DILocation(line: 7931, column: 9, scope: !2415)
!9716 = !DILocation(line: 7932, column: 26, scope: !2415)
!9717 = !DILocation(line: 7932, column: 5, scope: !2415)
!9718 = !DILocation(line: 7932, column: 34, scope: !2406)
!9719 = !DILocation(line: 7934, column: 9, scope: !9720)
!9720 = distinct !DILexicalBlock(scope: !2406, file: !616, line: 7934, column: 9)
!9721 = !DILocation(line: 7934, column: 13, scope: !9720)
!9722 = !DILocation(line: 7934, column: 9, scope: !2406)
!9723 = !DILocation(line: 7935, column: 16, scope: !9720)
!9724 = !DILocation(line: 7935, column: 9, scope: !9720)
!9725 = !DILocation(line: 7937, column: 58, scope: !2406)
!9726 = !DILocation(line: 7937, column: 5, scope: !2406)
!9727 = !DILocation(line: 7938, column: 1, scope: !2406)
!9728 = !DILocation(line: 7948, column: 23, scope: !2420)
!9729 = !DILocation(line: 7948, column: 39, scope: !2420)
!9730 = !DILocation(line: 7950, column: 5, scope: !2420)
!9731 = !DILocation(line: 7950, column: 9, scope: !2420)
!9732 = !DILocation(line: 7950, column: 13, scope: !2420)
!9733 = !DILocation(line: 7954, column: 5, scope: !2420)
!9734 = !DILocation(line: 7954, column: 11, scope: !2420)
!9735 = !DILocation(line: 7954, column: 16, scope: !2420)
!9736 = !DILocation(line: 7956, column: 5, scope: !2420)
!9737 = !DILocation(line: 7956, column: 15, scope: !2420)
!9738 = !DILocation(line: 7957, column: 34, scope: !9739)
!9739 = distinct !DILexicalBlock(scope: !2420, file: !616, line: 7957, column: 9)
!9740 = !DILocation(line: 7957, column: 10, scope: !9739)
!9741 = !DILocation(line: 7957, column: 9, scope: !2420)
!9742 = !DILocation(line: 7958, column: 9, scope: !9739)
!9743 = !DILocation(line: 7961, column: 13, scope: !2420)
!9744 = !DILocation(line: 7962, column: 17, scope: !9745)
!9745 = distinct !DILexicalBlock(scope: !2420, file: !616, line: 7961, column: 18)
!9746 = !DILocation(line: 7962, column: 22, scope: !9745)
!9747 = !DILocation(line: 7963, column: 17, scope: !9745)
!9748 = !DILocation(line: 7963, column: 22, scope: !9745)
!9749 = !DILocation(line: 7964, column: 17, scope: !9745)
!9750 = !DILocation(line: 7964, column: 22, scope: !9745)
!9751 = !DILocation(line: 7969, column: 25, scope: !2420)
!9752 = !DILocation(line: 7969, column: 11, scope: !2420)
!9753 = !DILocation(line: 7969, column: 9, scope: !2420)
!9754 = !DILocation(line: 7973, column: 9, scope: !9755)
!9755 = distinct !DILexicalBlock(scope: !2420, file: !616, line: 7973, column: 9)
!9756 = !DILocation(line: 7973, column: 9, scope: !2420)
!9757 = !DILocation(line: 7974, column: 9, scope: !9755)
!9758 = !DILocation(line: 7978, column: 7, scope: !2430)
!9759 = !DILocation(line: 7978, column: 22, scope: !2430)
!9760 = !DILocation(line: 7978, column: 37, scope: !2430)
!9761 = !DILocation(line: 7978, column: 35, scope: !2430)
!9762 = !DILocation(line: 7982, column: 17, scope: !2430)
!9763 = !DILocation(line: 7982, column: 21, scope: !2430)
!9764 = !DILocation(line: 7982, column: 26, scope: !2430)
!9765 = !DILocation(line: 7982, column: 11, scope: !2430)
!9766 = !DILocation(line: 7982, column: 9, scope: !2430)
!9767 = !DILocation(line: 7984, column: 26, scope: !2430)
!9768 = !DILocation(line: 7984, column: 5, scope: !2430)
!9769 = !DILocation(line: 7984, column: 34, scope: !2420)
!9770 = !DILocation(line: 7985, column: 9, scope: !9771)
!9771 = distinct !DILexicalBlock(scope: !2420, file: !616, line: 7985, column: 9)
!9772 = !DILocation(line: 7985, column: 13, scope: !9771)
!9773 = !DILocation(line: 7985, column: 9, scope: !2420)
!9774 = !DILocation(line: 7986, column: 16, scope: !9771)
!9775 = !DILocation(line: 7986, column: 9, scope: !9771)
!9776 = !DILocation(line: 7989, column: 28, scope: !2420)
!9777 = !DILocation(line: 7989, column: 12, scope: !2420)
!9778 = !DILocation(line: 7989, column: 5, scope: !2420)
!9779 = !DILocation(line: 7993, column: 1, scope: !2420)
!9780 = !DILocation(line: 8001, column: 22, scope: !2431)
!9781 = !DILocation(line: 8001, column: 38, scope: !2431)
!9782 = !DILocation(line: 8003, column: 5, scope: !2431)
!9783 = !DILocation(line: 8003, column: 9, scope: !2431)
!9784 = !DILocation(line: 8003, column: 13, scope: !2431)
!9785 = !DILocation(line: 8004, column: 5, scope: !2431)
!9786 = !DILocation(line: 8004, column: 16, scope: !2431)
!9787 = !DILocation(line: 8005, column: 5, scope: !2431)
!9788 = !DILocation(line: 8005, column: 15, scope: !2431)
!9789 = !DILocation(line: 8006, column: 34, scope: !9790)
!9790 = distinct !DILexicalBlock(scope: !2431, file: !616, line: 8006, column: 9)
!9791 = !DILocation(line: 8006, column: 10, scope: !9790)
!9792 = !DILocation(line: 8006, column: 9, scope: !2431)
!9793 = !DILocation(line: 8007, column: 9, scope: !9790)
!9794 = !DILocation(line: 8008, column: 9, scope: !9795)
!9795 = distinct !DILexicalBlock(scope: !2431, file: !616, line: 8008, column: 9)
!9796 = !DILocation(line: 8008, column: 14, scope: !9795)
!9797 = !DILocation(line: 8008, column: 9, scope: !2431)
!9798 = !DILocation(line: 8009, column: 11, scope: !9799)
!9799 = distinct !DILexicalBlock(scope: !9795, file: !616, line: 8008, column: 19)
!9800 = !DILocation(line: 8009, column: 32, scope: !9799)
!9801 = !DILocation(line: 8010, column: 16, scope: !9799)
!9802 = !DILocation(line: 8010, column: 9, scope: !9799)
!9803 = !DILocation(line: 8012, column: 60, scope: !2431)
!9804 = !DILocation(line: 8012, column: 14, scope: !2431)
!9805 = !DILocation(line: 8012, column: 12, scope: !2431)
!9806 = !DILocation(line: 8013, column: 9, scope: !9807)
!9807 = distinct !DILexicalBlock(scope: !2431, file: !616, line: 8013, column: 9)
!9808 = !DILocation(line: 8013, column: 16, scope: !9807)
!9809 = !DILocation(line: 8013, column: 9, scope: !2431)
!9810 = !DILocation(line: 8014, column: 9, scope: !9807)
!9811 = !DILocation(line: 8019, column: 7, scope: !2440)
!9812 = !DILocation(line: 8019, column: 22, scope: !2440)
!9813 = !DILocation(line: 8019, column: 37, scope: !2440)
!9814 = !DILocation(line: 8019, column: 35, scope: !2440)
!9815 = !DILocation(line: 8020, column: 14, scope: !2440)
!9816 = !DILocation(line: 8020, column: 53, scope: !2440)
!9817 = !DILocation(line: 8020, column: 35, scope: !2440)
!9818 = !DILocation(line: 8020, column: 63, scope: !2440)
!9819 = !DILocation(line: 8020, column: 33, scope: !2440)
!9820 = !DILocation(line: 8020, column: 74, scope: !2440)
!9821 = !DILocation(line: 8020, column: 9, scope: !2440)
!9822 = !DILocation(line: 8020, column: 7, scope: !2440)
!9823 = !DILocation(line: 8021, column: 26, scope: !2440)
!9824 = !DILocation(line: 8021, column: 5, scope: !2440)
!9825 = !DILocation(line: 8021, column: 34, scope: !2431)
!9826 = !DILocation(line: 8022, column: 9, scope: !2444)
!9827 = !DILocation(line: 8022, column: 11, scope: !2444)
!9828 = !DILocation(line: 8022, column: 9, scope: !2431)
!9829 = !DILocation(line: 8023, column: 9, scope: !2443)
!9830 = !DILocation(line: 8023, column: 14, scope: !9831)
!9831 = !DILexicalBlockFile(scope: !2442, file: !616, discriminator: 1)
!9832 = !DILocation(line: 8023, column: 24, scope: !2442)
!9833 = !DILocation(line: 8023, column: 54, scope: !2442)
!9834 = !DILocation(line: 8023, column: 71, scope: !9835)
!9835 = distinct !DILexicalBlock(scope: !2442, file: !616, line: 8023, column: 68)
!9836 = !DILocation(line: 8023, column: 88, scope: !9835)
!9837 = !DILocation(line: 8023, column: 68, scope: !9835)
!9838 = !DILocation(line: 8023, column: 98, scope: !9835)
!9839 = !DILocation(line: 8023, column: 68, scope: !2442)
!9840 = !DILocation(line: 8023, column: 68, scope: !9841)
!9841 = !DILexicalBlockFile(scope: !2442, file: !616, discriminator: 2)
!9842 = !DILocation(line: 8023, column: 129, scope: !9843)
!9843 = !DILexicalBlockFile(scope: !9835, file: !616, discriminator: 3)
!9844 = !DILocation(line: 8023, column: 147, scope: !9835)
!9845 = !DILocation(line: 8023, column: 157, scope: !9835)
!9846 = !DILocation(line: 8023, column: 182, scope: !9835)
!9847 = !DILocation(line: 8023, column: 113, scope: !9835)
!9848 = !DILocation(line: 8023, column: 201, scope: !9849)
!9849 = !DILexicalBlockFile(scope: !2443, file: !616, discriminator: 4)
!9850 = !DILocation(line: 8023, column: 201, scope: !2442)
!9851 = !DILocation(line: 8023, column: 201, scope: !9852)
!9852 = !DILexicalBlockFile(scope: !2442, file: !616, discriminator: 5)
!9853 = !DILocation(line: 8024, column: 16, scope: !2443)
!9854 = !DILocation(line: 8024, column: 9, scope: !2443)
!9855 = !DILocation(line: 8026, column: 9, scope: !9856)
!9856 = distinct !DILexicalBlock(scope: !2431, file: !616, line: 8026, column: 9)
!9857 = !DILocation(line: 8026, column: 14, scope: !9856)
!9858 = !DILocation(line: 8026, column: 11, scope: !9856)
!9859 = !DILocation(line: 8026, column: 9, scope: !2431)
!9860 = !DILocation(line: 8027, column: 34, scope: !9856)
!9861 = !DILocation(line: 8027, column: 9, scope: !9856)
!9862 = !DILocation(line: 8028, column: 12, scope: !2431)
!9863 = !DILocation(line: 8028, column: 5, scope: !2431)
!9864 = !DILocation(line: 8029, column: 1, scope: !2431)
!9865 = !DILocation(line: 8100, column: 23, scope: !2445)
!9866 = !DILocation(line: 8100, column: 39, scope: !2445)
!9867 = !DILocation(line: 8102, column: 5, scope: !2445)
!9868 = !DILocation(line: 8102, column: 9, scope: !2445)
!9869 = !DILocation(line: 8102, column: 13, scope: !2445)
!9870 = !DILocation(line: 8103, column: 5, scope: !2445)
!9871 = !DILocation(line: 8103, column: 16, scope: !2445)
!9872 = !DILocation(line: 8104, column: 5, scope: !2445)
!9873 = !DILocation(line: 8104, column: 15, scope: !2445)
!9874 = !DILocation(line: 8105, column: 5, scope: !2445)
!9875 = !DILocation(line: 8105, column: 19, scope: !2445)
!9876 = !DILocation(line: 8106, column: 5, scope: !2445)
!9877 = !DILocation(line: 8106, column: 16, scope: !2445)
!9878 = !DILocation(line: 8108, column: 34, scope: !9879)
!9879 = distinct !DILexicalBlock(scope: !2445, file: !616, line: 8108, column: 9)
!9880 = !DILocation(line: 8108, column: 10, scope: !9879)
!9881 = !DILocation(line: 8108, column: 9, scope: !2445)
!9882 = !DILocation(line: 8109, column: 9, scope: !9879)
!9883 = !DILocation(line: 8110, column: 27, scope: !9884)
!9884 = distinct !DILexicalBlock(scope: !2445, file: !616, line: 8110, column: 9)
!9885 = !DILocation(line: 8110, column: 10, scope: !9884)
!9886 = !DILocation(line: 8110, column: 9, scope: !2445)
!9887 = !DILocation(line: 8111, column: 25, scope: !9888)
!9888 = distinct !DILexicalBlock(scope: !9884, file: !616, line: 8110, column: 33)
!9889 = !DILocation(line: 8111, column: 9, scope: !9888)
!9890 = !DILocation(line: 8113, column: 9, scope: !9888)
!9891 = !DILocation(line: 8115, column: 27, scope: !2445)
!9892 = !DILocation(line: 8115, column: 11, scope: !2445)
!9893 = !DILocation(line: 8115, column: 9, scope: !2445)
!9894 = !DILocation(line: 8117, column: 31, scope: !9895)
!9895 = distinct !DILexicalBlock(scope: !2445, file: !616, line: 8117, column: 9)
!9896 = !DILocation(line: 8117, column: 36, scope: !9895)
!9897 = !DILocation(line: 8117, column: 9, scope: !9895)
!9898 = !DILocation(line: 8117, column: 49, scope: !9895)
!9899 = !DILocation(line: 8117, column: 9, scope: !2445)
!9900 = !DILocation(line: 8118, column: 9, scope: !9895)
!9901 = !DILocation(line: 8120, column: 7, scope: !2456)
!9902 = !DILocation(line: 8120, column: 22, scope: !2456)
!9903 = !DILocation(line: 8120, column: 37, scope: !2456)
!9904 = !DILocation(line: 8120, column: 35, scope: !2456)
!9905 = !DILocation(line: 8121, column: 15, scope: !2456)
!9906 = !DILocation(line: 8121, column: 19, scope: !2456)
!9907 = !DILocation(line: 8121, column: 24, scope: !2456)
!9908 = !DILocation(line: 8121, column: 9, scope: !2456)
!9909 = !DILocation(line: 8121, column: 7, scope: !2456)
!9910 = !DILocation(line: 8122, column: 26, scope: !2456)
!9911 = !DILocation(line: 8122, column: 5, scope: !2456)
!9912 = !DILocation(line: 8122, column: 34, scope: !2445)
!9913 = !DILocation(line: 8124, column: 17, scope: !2445)
!9914 = !DILocation(line: 8124, column: 22, scope: !2445)
!9915 = !DILocation(line: 8124, column: 27, scope: !2445)
!9916 = !DILocation(line: 8124, column: 5, scope: !2445)
!9917 = !DILocation(line: 8125, column: 9, scope: !9918)
!9918 = distinct !DILexicalBlock(scope: !2445, file: !616, line: 8125, column: 9)
!9919 = !DILocation(line: 8125, column: 11, scope: !9918)
!9920 = !DILocation(line: 8125, column: 9, scope: !2445)
!9921 = !DILocation(line: 8126, column: 16, scope: !9918)
!9922 = !DILocation(line: 8126, column: 9, scope: !9918)
!9923 = !DILocation(line: 8128, column: 31, scope: !2445)
!9924 = !DILocation(line: 8128, column: 12, scope: !2445)
!9925 = !DILocation(line: 8128, column: 5, scope: !2445)
!9926 = !DILocation(line: 8129, column: 1, scope: !2445)
!9927 = !DILocation(line: 8139, column: 23, scope: !2490)
!9928 = !DILocation(line: 8139, column: 39, scope: !2490)
!9929 = !DILocation(line: 8141, column: 5, scope: !2490)
!9930 = !DILocation(line: 8141, column: 9, scope: !2490)
!9931 = !DILocation(line: 8141, column: 13, scope: !2490)
!9932 = !DILocation(line: 8142, column: 5, scope: !2490)
!9933 = !DILocation(line: 8142, column: 11, scope: !2490)
!9934 = !DILocation(line: 8143, column: 5, scope: !2490)
!9935 = !DILocation(line: 8143, column: 16, scope: !2490)
!9936 = !DILocation(line: 8144, column: 5, scope: !2490)
!9937 = !DILocation(line: 8144, column: 15, scope: !2490)
!9938 = !DILocation(line: 8145, column: 34, scope: !9939)
!9939 = distinct !DILexicalBlock(scope: !2490, file: !616, line: 8145, column: 9)
!9940 = !DILocation(line: 8145, column: 10, scope: !9939)
!9941 = !DILocation(line: 8145, column: 9, scope: !2490)
!9942 = !DILocation(line: 8146, column: 9, scope: !9939)
!9943 = !DILocation(line: 8148, column: 9, scope: !9944)
!9944 = distinct !DILexicalBlock(scope: !2490, file: !616, line: 8148, column: 9)
!9945 = !DILocation(line: 8148, column: 14, scope: !9944)
!9946 = !DILocation(line: 8148, column: 9, scope: !2490)
!9947 = !DILocation(line: 8149, column: 11, scope: !9948)
!9948 = distinct !DILexicalBlock(scope: !9944, file: !616, line: 8148, column: 19)
!9949 = !DILocation(line: 8149, column: 32, scope: !9948)
!9950 = !DILocation(line: 8150, column: 16, scope: !9948)
!9951 = !DILocation(line: 8150, column: 9, scope: !9948)
!9952 = !DILocation(line: 8152, column: 60, scope: !2490)
!9953 = !DILocation(line: 8152, column: 14, scope: !2490)
!9954 = !DILocation(line: 8152, column: 12, scope: !2490)
!9955 = !DILocation(line: 8153, column: 9, scope: !9956)
!9956 = distinct !DILexicalBlock(scope: !2490, file: !616, line: 8153, column: 9)
!9957 = !DILocation(line: 8153, column: 16, scope: !9956)
!9958 = !DILocation(line: 8153, column: 9, scope: !2490)
!9959 = !DILocation(line: 8154, column: 9, scope: !9956)
!9960 = !DILocation(line: 8159, column: 7, scope: !2500)
!9961 = !DILocation(line: 8159, column: 22, scope: !2500)
!9962 = !DILocation(line: 8159, column: 37, scope: !2500)
!9963 = !DILocation(line: 8159, column: 35, scope: !2500)
!9964 = !DILocation(line: 8160, column: 15, scope: !2500)
!9965 = !DILocation(line: 8160, column: 54, scope: !2500)
!9966 = !DILocation(line: 8160, column: 36, scope: !2500)
!9967 = !DILocation(line: 8160, column: 64, scope: !2500)
!9968 = !DILocation(line: 8160, column: 34, scope: !2500)
!9969 = !DILocation(line: 8160, column: 75, scope: !2500)
!9970 = !DILocation(line: 8160, column: 81, scope: !2500)
!9971 = !DILocation(line: 8160, column: 9, scope: !2500)
!9972 = !DILocation(line: 8160, column: 7, scope: !2500)
!9973 = !DILocation(line: 8161, column: 26, scope: !2500)
!9974 = !DILocation(line: 8161, column: 5, scope: !2500)
!9975 = !DILocation(line: 8161, column: 34, scope: !2490)
!9976 = !DILocation(line: 8162, column: 9, scope: !2504)
!9977 = !DILocation(line: 8162, column: 11, scope: !2504)
!9978 = !DILocation(line: 8162, column: 9, scope: !2490)
!9979 = !DILocation(line: 8163, column: 9, scope: !2503)
!9980 = !DILocation(line: 8163, column: 14, scope: !9981)
!9981 = !DILexicalBlockFile(scope: !2502, file: !616, discriminator: 1)
!9982 = !DILocation(line: 8163, column: 24, scope: !2502)
!9983 = !DILocation(line: 8163, column: 54, scope: !2502)
!9984 = !DILocation(line: 8163, column: 71, scope: !9985)
!9985 = distinct !DILexicalBlock(scope: !2502, file: !616, line: 8163, column: 68)
!9986 = !DILocation(line: 8163, column: 88, scope: !9985)
!9987 = !DILocation(line: 8163, column: 68, scope: !9985)
!9988 = !DILocation(line: 8163, column: 98, scope: !9985)
!9989 = !DILocation(line: 8163, column: 68, scope: !2502)
!9990 = !DILocation(line: 8163, column: 68, scope: !9991)
!9991 = !DILexicalBlockFile(scope: !2502, file: !616, discriminator: 2)
!9992 = !DILocation(line: 8163, column: 129, scope: !9993)
!9993 = !DILexicalBlockFile(scope: !9985, file: !616, discriminator: 3)
!9994 = !DILocation(line: 8163, column: 147, scope: !9985)
!9995 = !DILocation(line: 8163, column: 157, scope: !9985)
!9996 = !DILocation(line: 8163, column: 182, scope: !9985)
!9997 = !DILocation(line: 8163, column: 113, scope: !9985)
!9998 = !DILocation(line: 8163, column: 201, scope: !9999)
!9999 = !DILexicalBlockFile(scope: !2503, file: !616, discriminator: 4)
!10000 = !DILocation(line: 8163, column: 201, scope: !2502)
!10001 = !DILocation(line: 8163, column: 201, scope: !10002)
!10002 = !DILexicalBlockFile(scope: !2502, file: !616, discriminator: 5)
!10003 = !DILocation(line: 8164, column: 16, scope: !2503)
!10004 = !DILocation(line: 8164, column: 9, scope: !2503)
!10005 = !DILocation(line: 8166, column: 9, scope: !10006)
!10006 = distinct !DILexicalBlock(scope: !2490, file: !616, line: 8166, column: 9)
!10007 = !DILocation(line: 8166, column: 14, scope: !10006)
!10008 = !DILocation(line: 8166, column: 11, scope: !10006)
!10009 = !DILocation(line: 8166, column: 9, scope: !2490)
!10010 = !DILocation(line: 8167, column: 34, scope: !10006)
!10011 = !DILocation(line: 8167, column: 9, scope: !10006)
!10012 = !DILocation(line: 8168, column: 12, scope: !2490)
!10013 = !DILocation(line: 8168, column: 5, scope: !2490)
!10014 = !DILocation(line: 8169, column: 1, scope: !2490)
!10015 = !DILocation(line: 8177, column: 23, scope: !2505)
!10016 = !DILocation(line: 8177, column: 39, scope: !2505)
!10017 = !DILocation(line: 8179, column: 5, scope: !2505)
!10018 = !DILocation(line: 8179, column: 15, scope: !2505)
!10019 = !DILocation(line: 8180, column: 5, scope: !2505)
!10020 = !DILocation(line: 8180, column: 9, scope: !2505)
!10021 = !DILocation(line: 8181, column: 5, scope: !2505)
!10022 = !DILocation(line: 8181, column: 16, scope: !2505)
!10023 = !DILocation(line: 8181, column: 22, scope: !2505)
!10024 = !DILocation(line: 8183, column: 34, scope: !10025)
!10025 = distinct !DILexicalBlock(scope: !2505, file: !616, line: 8183, column: 9)
!10026 = !DILocation(line: 8183, column: 10, scope: !10025)
!10027 = !DILocation(line: 8183, column: 9, scope: !2505)
!10028 = !DILocation(line: 8184, column: 9, scope: !10025)
!10029 = !DILocation(line: 8189, column: 16, scope: !2505)
!10030 = !{!10031, !3894, i64 16}
!10031 = !{!"bufferinfo", !3868, i64 0, !3868, i64 8, !3894, i64 16, !3894, i64 24, !3841, i64 32, !3841, i64 36, !3868, i64 40, !3868, i64 48, !3868, i64 56, !3868, i64 64, !3868, i64 72}
!10032 = !DILocation(line: 8189, column: 9, scope: !2505)
!10033 = !DILocation(line: 8190, column: 7, scope: !2514)
!10034 = !DILocation(line: 8190, column: 22, scope: !2514)
!10035 = !DILocation(line: 8190, column: 37, scope: !2514)
!10036 = !DILocation(line: 8190, column: 35, scope: !2514)
!10037 = !DILocation(line: 8196, column: 18, scope: !2514)
!10038 = !DILocation(line: 8196, column: 27, scope: !2514)
!10039 = !{!10031, !3868, i64 0}
!10040 = !DILocation(line: 8196, column: 32, scope: !2514)
!10041 = !DILocation(line: 8196, column: 12, scope: !2514)
!10042 = !DILocation(line: 8196, column: 10, scope: !2514)
!10043 = !DILocation(line: 8198, column: 26, scope: !2514)
!10044 = !DILocation(line: 8198, column: 5, scope: !2514)
!10045 = !DILocation(line: 8198, column: 34, scope: !2505)
!10046 = !DILocation(line: 8199, column: 5, scope: !2505)
!10047 = !DILocation(line: 8200, column: 9, scope: !10048)
!10048 = distinct !DILexicalBlock(scope: !2505, file: !616, line: 8200, column: 9)
!10049 = !DILocation(line: 8200, column: 14, scope: !10048)
!10050 = !DILocation(line: 8200, column: 9, scope: !2505)
!10051 = !DILocation(line: 8201, column: 16, scope: !10048)
!10052 = !DILocation(line: 8201, column: 9, scope: !10048)
!10053 = !DILocation(line: 8202, column: 31, scope: !2505)
!10054 = !DILocation(line: 8202, column: 12, scope: !2505)
!10055 = !DILocation(line: 8202, column: 5, scope: !2505)
!10056 = !DILocation(line: 8203, column: 1, scope: !2505)
!10057 = !DILocation(line: 8497, column: 24, scope: !2515)
!10058 = !DILocation(line: 8497, column: 40, scope: !2515)
!10059 = !DILocation(line: 8499, column: 5, scope: !2515)
!10060 = !DILocation(line: 8499, column: 9, scope: !2515)
!10061 = !DILocation(line: 8499, column: 13, scope: !2515)
!10062 = !DILocation(line: 8500, column: 5, scope: !2515)
!10063 = !DILocation(line: 8500, column: 16, scope: !2515)
!10064 = !DILocation(line: 8501, column: 5, scope: !2515)
!10065 = !DILocation(line: 8501, column: 15, scope: !2515)
!10066 = !DILocation(line: 8502, column: 5, scope: !2515)
!10067 = !DILocation(line: 8502, column: 19, scope: !2515)
!10068 = !DILocation(line: 8503, column: 5, scope: !2515)
!10069 = !DILocation(line: 8503, column: 16, scope: !2515)
!10070 = !DILocation(line: 8504, column: 34, scope: !10071)
!10071 = distinct !DILexicalBlock(scope: !2515, file: !616, line: 8504, column: 9)
!10072 = !DILocation(line: 8504, column: 10, scope: !10071)
!10073 = !DILocation(line: 8504, column: 9, scope: !2515)
!10074 = !DILocation(line: 8505, column: 9, scope: !10071)
!10075 = !DILocation(line: 8506, column: 27, scope: !10076)
!10076 = distinct !DILexicalBlock(scope: !2515, file: !616, line: 8506, column: 9)
!10077 = !DILocation(line: 8506, column: 10, scope: !10076)
!10078 = !DILocation(line: 8506, column: 9, scope: !2515)
!10079 = !DILocation(line: 8507, column: 25, scope: !10080)
!10080 = distinct !DILexicalBlock(scope: !10076, file: !616, line: 8506, column: 33)
!10081 = !DILocation(line: 8507, column: 9, scope: !10080)
!10082 = !DILocation(line: 8509, column: 9, scope: !10080)
!10083 = !DILocation(line: 8511, column: 27, scope: !2515)
!10084 = !DILocation(line: 8511, column: 11, scope: !2515)
!10085 = !DILocation(line: 8511, column: 9, scope: !2515)
!10086 = !DILocation(line: 8513, column: 31, scope: !10087)
!10087 = distinct !DILexicalBlock(scope: !2515, file: !616, line: 8513, column: 9)
!10088 = !DILocation(line: 8513, column: 36, scope: !10087)
!10089 = !DILocation(line: 8513, column: 9, scope: !10087)
!10090 = !DILocation(line: 8513, column: 44, scope: !10087)
!10091 = !DILocation(line: 8513, column: 9, scope: !2515)
!10092 = !DILocation(line: 8514, column: 9, scope: !10093)
!10093 = distinct !DILexicalBlock(scope: !10087, file: !616, line: 8513, column: 49)
!10094 = !DILocation(line: 8517, column: 7, scope: !2526)
!10095 = !DILocation(line: 8517, column: 22, scope: !2526)
!10096 = !DILocation(line: 8517, column: 37, scope: !2526)
!10097 = !DILocation(line: 8517, column: 35, scope: !2526)
!10098 = !DILocation(line: 8518, column: 18, scope: !2526)
!10099 = !DILocation(line: 8518, column: 22, scope: !2526)
!10100 = !DILocation(line: 8518, column: 27, scope: !2526)
!10101 = !DILocation(line: 8518, column: 11, scope: !2526)
!10102 = !DILocation(line: 8518, column: 9, scope: !2526)
!10103 = !DILocation(line: 8519, column: 26, scope: !2526)
!10104 = !DILocation(line: 8519, column: 5, scope: !2526)
!10105 = !DILocation(line: 8519, column: 34, scope: !2515)
!10106 = !DILocation(line: 8521, column: 17, scope: !2515)
!10107 = !DILocation(line: 8521, column: 22, scope: !2515)
!10108 = !DILocation(line: 8521, column: 27, scope: !2515)
!10109 = !DILocation(line: 8521, column: 5, scope: !2515)
!10110 = !DILocation(line: 8522, column: 9, scope: !10111)
!10111 = distinct !DILexicalBlock(scope: !2515, file: !616, line: 8522, column: 9)
!10112 = !DILocation(line: 8522, column: 13, scope: !10111)
!10113 = !DILocation(line: 8522, column: 9, scope: !2515)
!10114 = !DILocation(line: 8523, column: 16, scope: !10111)
!10115 = !DILocation(line: 8523, column: 9, scope: !10111)
!10116 = !DILocation(line: 8525, column: 31, scope: !2515)
!10117 = !DILocation(line: 8525, column: 12, scope: !2515)
!10118 = !DILocation(line: 8525, column: 5, scope: !2515)
!10119 = !DILocation(line: 8526, column: 1, scope: !2515)
!10120 = !DILocation(line: 8536, column: 24, scope: !2527)
!10121 = !DILocation(line: 8536, column: 40, scope: !2527)
!10122 = !DILocation(line: 8538, column: 5, scope: !2527)
!10123 = !DILocation(line: 8538, column: 15, scope: !2527)
!10124 = !DILocation(line: 8539, column: 5, scope: !2527)
!10125 = !DILocation(line: 8539, column: 9, scope: !2527)
!10126 = !DILocation(line: 8540, column: 5, scope: !2527)
!10127 = !DILocation(line: 8540, column: 11, scope: !2527)
!10128 = !DILocation(line: 8541, column: 5, scope: !2527)
!10129 = !DILocation(line: 8541, column: 16, scope: !2527)
!10130 = !DILocation(line: 8543, column: 34, scope: !10131)
!10131 = distinct !DILexicalBlock(scope: !2527, file: !616, line: 8543, column: 9)
!10132 = !DILocation(line: 8543, column: 10, scope: !10131)
!10133 = !DILocation(line: 8543, column: 9, scope: !2527)
!10134 = !DILocation(line: 8544, column: 9, scope: !10131)
!10135 = !DILocation(line: 8550, column: 7, scope: !2536)
!10136 = !DILocation(line: 8550, column: 22, scope: !2536)
!10137 = !DILocation(line: 8550, column: 37, scope: !2536)
!10138 = !DILocation(line: 8550, column: 35, scope: !2536)
!10139 = !DILocation(line: 8551, column: 19, scope: !2536)
!10140 = !DILocation(line: 8551, column: 28, scope: !2536)
!10141 = !DILocation(line: 8551, column: 46, scope: !2536)
!10142 = !DILocation(line: 8551, column: 51, scope: !2536)
!10143 = !DILocation(line: 8551, column: 12, scope: !2536)
!10144 = !DILocation(line: 8551, column: 10, scope: !2536)
!10145 = !DILocation(line: 8552, column: 26, scope: !2536)
!10146 = !DILocation(line: 8552, column: 5, scope: !2536)
!10147 = !DILocation(line: 8552, column: 34, scope: !2527)
!10148 = !DILocation(line: 8553, column: 5, scope: !2527)
!10149 = !DILocation(line: 8554, column: 9, scope: !10150)
!10150 = distinct !DILexicalBlock(scope: !2527, file: !616, line: 8554, column: 9)
!10151 = !DILocation(line: 8554, column: 14, scope: !10150)
!10152 = !DILocation(line: 8554, column: 9, scope: !2527)
!10153 = !DILocation(line: 8555, column: 16, scope: !10150)
!10154 = !DILocation(line: 8555, column: 9, scope: !10150)
!10155 = !DILocation(line: 8556, column: 31, scope: !2527)
!10156 = !DILocation(line: 8556, column: 12, scope: !2527)
!10157 = !DILocation(line: 8556, column: 5, scope: !2527)
!10158 = !DILocation(line: 8557, column: 1, scope: !2527)
!10159 = !DILocation(line: 8213, column: 26, scope: !2537)
!10160 = !DILocation(line: 8213, column: 42, scope: !2537)
!10161 = !DILocation(line: 8213, column: 58, scope: !2537)
!10162 = !DILocation(line: 8215, column: 5, scope: !2537)
!10163 = !DILocation(line: 8215, column: 9, scope: !2537)
!10164 = !DILocation(line: 8215, column: 13, scope: !2537)
!10165 = !DILocation(line: 8216, column: 5, scope: !2537)
!10166 = !DILocation(line: 8216, column: 16, scope: !2537)
!10167 = !DILocation(line: 8217, column: 5, scope: !2537)
!10168 = !DILocation(line: 8217, column: 11, scope: !2537)
!10169 = !DILocation(line: 8316, column: 5, scope: !2537)
!10170 = !DILocation(line: 8316, column: 16, scope: !2537)
!10171 = !DILocation(line: 8317, column: 5, scope: !2537)
!10172 = !DILocation(line: 8317, column: 15, scope: !2537)
!10173 = !DILocation(line: 8320, column: 45, scope: !10174)
!10174 = distinct !DILexicalBlock(scope: !2537, file: !616, line: 8320, column: 9)
!10175 = !DILocation(line: 8320, column: 51, scope: !10174)
!10176 = !DILocation(line: 8320, column: 10, scope: !10174)
!10177 = !DILocation(line: 8320, column: 9, scope: !2537)
!10178 = !DILocation(line: 8322, column: 9, scope: !10174)
!10179 = !DILocation(line: 8324, column: 9, scope: !2551)
!10180 = !DILocation(line: 8324, column: 16, scope: !2551)
!10181 = !DILocation(line: 8324, column: 9, scope: !2537)
!10182 = !DILocation(line: 8325, column: 11, scope: !2549)
!10183 = !DILocation(line: 8325, column: 26, scope: !2549)
!10184 = !DILocation(line: 8325, column: 41, scope: !2549)
!10185 = !DILocation(line: 8325, column: 39, scope: !2549)
!10186 = !DILocation(line: 8326, column: 24, scope: !2549)
!10187 = !DILocation(line: 8326, column: 29, scope: !2549)
!10188 = !DILocation(line: 8326, column: 45, scope: !2549)
!10189 = !DILocation(line: 8326, column: 15, scope: !2549)
!10190 = !DILocation(line: 8326, column: 13, scope: !2549)
!10191 = !DILocation(line: 8327, column: 30, scope: !2549)
!10192 = !DILocation(line: 8327, column: 9, scope: !2549)
!10193 = !DILocation(line: 8327, column: 38, scope: !2550)
!10194 = !DILocation(line: 8328, column: 13, scope: !10195)
!10195 = distinct !DILexicalBlock(scope: !2550, file: !616, line: 8328, column: 13)
!10196 = !DILocation(line: 8328, column: 17, scope: !10195)
!10197 = !DILocation(line: 8328, column: 13, scope: !2550)
!10198 = !DILocation(line: 8329, column: 20, scope: !10195)
!10199 = !DILocation(line: 8329, column: 13, scope: !10195)
!10200 = !DILocation(line: 8330, column: 42, scope: !2550)
!10201 = !DILocation(line: 8330, column: 16, scope: !2550)
!10202 = !DILocation(line: 8330, column: 9, scope: !2550)
!10203 = !DILocation(line: 8333, column: 23, scope: !10204)
!10204 = distinct !DILexicalBlock(scope: !2537, file: !616, line: 8333, column: 9)
!10205 = !DILocation(line: 8333, column: 31, scope: !10204)
!10206 = !DILocation(line: 8333, column: 10, scope: !10204)
!10207 = !DILocation(line: 8333, column: 9, scope: !2537)
!10208 = !DILocation(line: 8334, column: 9, scope: !10204)
!10209 = !DILocation(line: 8335, column: 7, scope: !2553)
!10210 = !DILocation(line: 8335, column: 22, scope: !2553)
!10211 = !DILocation(line: 8335, column: 37, scope: !2553)
!10212 = !DILocation(line: 8335, column: 35, scope: !2553)
!10213 = !DILocation(line: 8336, column: 20, scope: !2553)
!10214 = !DILocation(line: 8336, column: 25, scope: !2553)
!10215 = !DILocation(line: 8336, column: 38, scope: !2553)
!10216 = !DILocation(line: 8336, column: 11, scope: !2553)
!10217 = !DILocation(line: 8336, column: 9, scope: !2553)
!10218 = !DILocation(line: 8337, column: 26, scope: !2553)
!10219 = !DILocation(line: 8337, column: 5, scope: !2553)
!10220 = !DILocation(line: 8337, column: 34, scope: !2537)
!10221 = !DILocation(line: 8338, column: 9, scope: !10222)
!10222 = distinct !DILexicalBlock(scope: !2537, file: !616, line: 8338, column: 9)
!10223 = !DILocation(line: 8338, column: 13, scope: !10222)
!10224 = !DILocation(line: 8338, column: 9, scope: !2537)
!10225 = !DILocation(line: 8339, column: 16, scope: !10222)
!10226 = !DILocation(line: 8339, column: 9, scope: !10222)
!10227 = !DILocation(line: 8340, column: 38, scope: !2537)
!10228 = !DILocation(line: 8340, column: 12, scope: !2537)
!10229 = !DILocation(line: 8340, column: 5, scope: !2537)
!10230 = !DILocation(line: 8342, column: 1, scope: !2537)
!10231 = !DILocation(line: 8351, column: 23, scope: !2554)
!10232 = !DILocation(line: 8351, column: 39, scope: !2554)
!10233 = !DILocation(line: 8353, column: 5, scope: !2554)
!10234 = !DILocation(line: 8353, column: 9, scope: !2554)
!10235 = !DILocation(line: 8354, column: 5, scope: !2554)
!10236 = !DILocation(line: 8354, column: 17, scope: !2554)
!10237 = !DILocation(line: 8355, column: 5, scope: !2554)
!10238 = !DILocation(line: 8355, column: 9, scope: !2554)
!10239 = !DILocation(line: 8356, column: 34, scope: !10240)
!10240 = distinct !DILexicalBlock(scope: !2554, file: !616, line: 8356, column: 9)
!10241 = !DILocation(line: 8356, column: 10, scope: !10240)
!10242 = !DILocation(line: 8356, column: 9, scope: !2554)
!10243 = !DILocation(line: 8357, column: 9, scope: !10240)
!10244 = !DILocation(line: 8358, column: 7, scope: !2562)
!10245 = !DILocation(line: 8358, column: 22, scope: !2562)
!10246 = !DILocation(line: 8358, column: 37, scope: !2562)
!10247 = !DILocation(line: 8358, column: 35, scope: !2562)
!10248 = !DILocation(line: 8359, column: 17, scope: !2562)
!10249 = !DILocation(line: 8359, column: 11, scope: !2562)
!10250 = !DILocation(line: 8359, column: 9, scope: !2562)
!10251 = !DILocation(line: 8360, column: 26, scope: !2562)
!10252 = !DILocation(line: 8360, column: 5, scope: !2562)
!10253 = !DILocation(line: 8360, column: 34, scope: !2554)
!10254 = !DILocation(line: 8361, column: 9, scope: !10255)
!10255 = distinct !DILexicalBlock(scope: !2554, file: !616, line: 8361, column: 9)
!10256 = !DILocation(line: 8361, column: 13, scope: !10255)
!10257 = !DILocation(line: 8361, column: 9, scope: !2554)
!10258 = !DILocation(line: 8365, column: 16, scope: !10259)
!10259 = distinct !DILexicalBlock(scope: !10255, file: !616, line: 8361, column: 19)
!10260 = !DILocation(line: 8365, column: 9, scope: !10259)
!10261 = !DILocation(line: 8369, column: 12, scope: !2554)
!10262 = !DILocation(line: 8369, column: 5, scope: !2554)
!10263 = !DILocation(line: 8370, column: 1, scope: !2554)
!10264 = !DILocation(line: 8378, column: 24, scope: !2563)
!10265 = !DILocation(line: 8378, column: 40, scope: !2563)
!10266 = !DILocation(line: 8380, column: 5, scope: !2563)
!10267 = !DILocation(line: 8380, column: 9, scope: !2563)
!10268 = !DILocation(line: 8381, column: 34, scope: !10269)
!10269 = distinct !DILexicalBlock(scope: !2563, file: !616, line: 8381, column: 9)
!10270 = !DILocation(line: 8381, column: 10, scope: !10269)
!10271 = !DILocation(line: 8381, column: 9, scope: !2563)
!10272 = !DILocation(line: 8382, column: 9, scope: !10269)
!10273 = !DILocation(line: 8385, column: 35, scope: !2563)
!10274 = !DILocation(line: 8385, column: 28, scope: !2563)
!10275 = !DILocation(line: 8385, column: 12, scope: !2563)
!10276 = !DILocation(line: 8385, column: 5, scope: !2563)
!10277 = !DILocation(line: 8386, column: 1, scope: !2563)
!10278 = !DILocation(line: 8394, column: 22, scope: !2568)
!10279 = !DILocation(line: 8394, column: 38, scope: !2568)
!10280 = !DILocation(line: 8396, column: 5, scope: !2568)
!10281 = !DILocation(line: 8396, column: 9, scope: !2568)
!10282 = !DILocation(line: 8402, column: 5, scope: !2568)
!10283 = !DILocation(line: 8402, column: 9, scope: !2568)
!10284 = !DILocation(line: 8428, column: 7, scope: !2576)
!10285 = !DILocation(line: 8428, column: 22, scope: !2576)
!10286 = !DILocation(line: 8428, column: 37, scope: !2576)
!10287 = !DILocation(line: 8428, column: 35, scope: !2576)
!10288 = !DILocation(line: 8429, column: 17, scope: !2576)
!10289 = !DILocation(line: 8429, column: 11, scope: !2576)
!10290 = !DILocation(line: 8429, column: 9, scope: !2576)
!10291 = !DILocation(line: 8430, column: 26, scope: !2576)
!10292 = !DILocation(line: 8430, column: 5, scope: !2576)
!10293 = !DILocation(line: 8430, column: 34, scope: !2568)
!10294 = !DILocation(line: 8432, column: 9, scope: !2580)
!10295 = !DILocation(line: 8432, column: 13, scope: !2580)
!10296 = !DILocation(line: 8432, column: 18, scope: !2580)
!10297 = !DILocation(line: 8432, column: 23, scope: !10298)
!10298 = !DILexicalBlockFile(scope: !2580, file: !616, discriminator: 1)
!10299 = !DILocation(line: 8432, column: 22, scope: !2580)
!10300 = !DILocation(line: 8432, column: 44, scope: !2580)
!10301 = !DILocation(line: 8432, column: 9, scope: !2568)
!10302 = !DILocation(line: 8435, column: 11, scope: !2578)
!10303 = !DILocation(line: 8435, column: 26, scope: !2578)
!10304 = !DILocation(line: 8435, column: 41, scope: !2578)
!10305 = !DILocation(line: 8435, column: 39, scope: !2578)
!10306 = !DILocation(line: 8436, column: 20, scope: !2578)
!10307 = !DILocation(line: 8436, column: 15, scope: !2578)
!10308 = !DILocation(line: 8436, column: 13, scope: !2578)
!10309 = !DILocation(line: 8437, column: 30, scope: !2578)
!10310 = !DILocation(line: 8437, column: 9, scope: !2578)
!10311 = !DILocation(line: 8437, column: 38, scope: !2579)
!10312 = !DILocation(line: 8439, column: 13, scope: !10313)
!10313 = distinct !DILexicalBlock(scope: !2579, file: !616, line: 8439, column: 13)
!10314 = !DILocation(line: 8439, column: 17, scope: !10313)
!10315 = !DILocation(line: 8439, column: 13, scope: !2579)
!10316 = !DILocation(line: 8440, column: 37, scope: !10317)
!10317 = distinct !DILexicalBlock(scope: !10318, file: !616, line: 8440, column: 17)
!10318 = distinct !DILexicalBlock(scope: !10313, file: !616, line: 8439, column: 23)
!10319 = !DILocation(line: 8440, column: 17, scope: !10317)
!10320 = !DILocation(line: 8440, column: 60, scope: !10317)
!10321 = !DILocation(line: 8440, column: 17, scope: !10318)
!10322 = !DILocation(line: 8441, column: 23, scope: !10323)
!10323 = distinct !DILexicalBlock(scope: !10317, file: !616, line: 8440, column: 65)
!10324 = !DILocation(line: 8441, column: 17, scope: !10323)
!10325 = !DILocation(line: 8442, column: 23, scope: !10323)
!10326 = !DILocation(line: 8442, column: 17, scope: !10323)
!10327 = !DILocation(line: 8443, column: 17, scope: !10323)
!10328 = !DILocation(line: 8445, column: 37, scope: !10329)
!10329 = distinct !DILexicalBlock(scope: !10318, file: !616, line: 8445, column: 17)
!10330 = !DILocation(line: 8445, column: 17, scope: !10329)
!10331 = !DILocation(line: 8445, column: 60, scope: !10329)
!10332 = !DILocation(line: 8445, column: 17, scope: !10318)
!10333 = !DILocation(line: 8446, column: 23, scope: !10334)
!10334 = distinct !DILexicalBlock(scope: !10329, file: !616, line: 8445, column: 65)
!10335 = !DILocation(line: 8446, column: 17, scope: !10334)
!10336 = !DILocation(line: 8447, column: 23, scope: !10334)
!10337 = !DILocation(line: 8447, column: 17, scope: !10334)
!10338 = !DILocation(line: 8448, column: 17, scope: !10334)
!10339 = !DILocation(line: 8450, column: 9, scope: !10318)
!10340 = !DILocation(line: 8452, column: 5, scope: !2579)
!10341 = !DILocation(line: 8455, column: 9, scope: !10342)
!10342 = distinct !DILexicalBlock(scope: !2568, file: !616, line: 8455, column: 9)
!10343 = !DILocation(line: 8455, column: 13, scope: !10342)
!10344 = !DILocation(line: 8455, column: 9, scope: !2568)
!10345 = !DILocation(line: 8456, column: 35, scope: !10342)
!10346 = !DILocation(line: 8456, column: 16, scope: !10342)
!10347 = !DILocation(line: 8456, column: 9, scope: !10342)
!10348 = !DILocation(line: 8458, column: 41, scope: !2568)
!10349 = !DILocation(line: 8458, column: 49, scope: !2568)
!10350 = !DILocation(line: 8458, column: 12, scope: !2568)
!10351 = !DILocation(line: 8458, column: 5, scope: !2568)
!10352 = !DILocation(line: 8459, column: 1, scope: !2568)
!10353 = !DILocation(line: 8471, column: 23, scope: !2581)
!10354 = !DILocation(line: 8471, column: 39, scope: !2581)
!10355 = !DILocation(line: 8473, column: 5, scope: !2581)
!10356 = !DILocation(line: 8473, column: 9, scope: !2581)
!10357 = !DILocation(line: 8474, column: 5, scope: !2581)
!10358 = !DILocation(line: 8474, column: 9, scope: !2581)
!10359 = !DILocation(line: 8475, column: 5, scope: !2581)
!10360 = !DILocation(line: 8475, column: 9, scope: !2581)
!10361 = !DILocation(line: 8477, column: 27, scope: !2581)
!10362 = !DILocation(line: 8477, column: 13, scope: !2581)
!10363 = !DILocation(line: 8477, column: 11, scope: !2581)
!10364 = !DILocation(line: 8478, column: 9, scope: !10365)
!10365 = distinct !DILexicalBlock(scope: !2581, file: !616, line: 8478, column: 9)
!10366 = !DILocation(line: 8478, column: 15, scope: !10365)
!10367 = !DILocation(line: 8478, column: 21, scope: !10365)
!10368 = !DILocation(line: 8478, column: 24, scope: !10369)
!10369 = !DILexicalBlockFile(scope: !10365, file: !616, discriminator: 1)
!10370 = !DILocation(line: 8478, column: 9, scope: !2581)
!10371 = !DILocation(line: 8479, column: 9, scope: !10365)
!10372 = !DILocation(line: 8481, column: 17, scope: !2581)
!10373 = !DILocation(line: 8481, column: 22, scope: !2581)
!10374 = !DILocation(line: 8481, column: 11, scope: !2581)
!10375 = !DILocation(line: 8481, column: 9, scope: !2581)
!10376 = !DILocation(line: 8482, column: 9, scope: !10377)
!10377 = distinct !DILexicalBlock(scope: !2581, file: !616, line: 8482, column: 9)
!10378 = !DILocation(line: 8482, column: 13, scope: !10377)
!10379 = !DILocation(line: 8482, column: 9, scope: !2581)
!10380 = !DILocation(line: 8483, column: 16, scope: !10377)
!10381 = !DILocation(line: 8483, column: 9, scope: !10377)
!10382 = !DILocation(line: 8484, column: 41, scope: !2581)
!10383 = !DILocation(line: 8484, column: 49, scope: !2581)
!10384 = !DILocation(line: 8484, column: 12, scope: !2581)
!10385 = !DILocation(line: 8484, column: 5, scope: !2581)
!10386 = !DILocation(line: 8485, column: 1, scope: !2581)
!10387 = !DILocation(line: 8571, column: 24, scope: !2588)
!10388 = !DILocation(line: 8571, column: 40, scope: !2588)
!10389 = !DILocation(line: 8571, column: 56, scope: !2588)
!10390 = !DILocation(line: 8573, column: 5, scope: !2588)
!10391 = !DILocation(line: 8573, column: 12, scope: !2588)
!10392 = !DILocation(line: 8574, column: 5, scope: !2588)
!10393 = !DILocation(line: 8574, column: 9, scope: !2588)
!10394 = !DILocation(line: 8575, column: 5, scope: !2588)
!10395 = !DILocation(line: 8575, column: 9, scope: !2588)
!10396 = !DILocation(line: 8576, column: 5, scope: !2588)
!10397 = !DILocation(line: 8576, column: 9, scope: !2588)
!10398 = !DILocation(line: 8577, column: 5, scope: !2588)
!10399 = !DILocation(line: 8577, column: 15, scope: !2588)
!10400 = !DILocation(line: 8580, column: 5, scope: !2588)
!10401 = !DILocation(line: 8581, column: 45, scope: !10402)
!10402 = distinct !DILexicalBlock(scope: !2588, file: !616, line: 8581, column: 9)
!10403 = !DILocation(line: 8581, column: 51, scope: !10402)
!10404 = !DILocation(line: 8581, column: 10, scope: !10402)
!10405 = !DILocation(line: 8581, column: 9, scope: !2588)
!10406 = !DILocation(line: 8590, column: 9, scope: !10402)
!10407 = !DILocation(line: 8592, column: 7, scope: !2599)
!10408 = !DILocation(line: 8592, column: 22, scope: !2599)
!10409 = !DILocation(line: 8592, column: 37, scope: !2599)
!10410 = !DILocation(line: 8592, column: 35, scope: !2599)
!10411 = !DILocation(line: 8594, column: 9, scope: !10412)
!10412 = distinct !DILexicalBlock(scope: !2599, file: !616, line: 8594, column: 9)
!10413 = !DILocation(line: 8594, column: 16, scope: !10412)
!10414 = !DILocation(line: 8594, column: 9, scope: !2599)
!10415 = !DILocation(line: 8595, column: 27, scope: !10412)
!10416 = !DILocation(line: 8595, column: 40, scope: !10412)
!10417 = !DILocation(line: 8595, column: 48, scope: !10412)
!10418 = !DILocation(line: 8595, column: 18, scope: !10412)
!10419 = !DILocation(line: 8595, column: 16, scope: !10412)
!10420 = !DILocation(line: 8595, column: 9, scope: !10412)
!10421 = !DILocation(line: 8598, column: 30, scope: !10412)
!10422 = !DILocation(line: 8598, column: 38, scope: !10412)
!10423 = !DILocation(line: 8598, column: 18, scope: !10412)
!10424 = !DILocation(line: 8598, column: 16, scope: !10412)
!10425 = !DILocation(line: 8599, column: 26, scope: !2599)
!10426 = !DILocation(line: 8599, column: 5, scope: !2599)
!10427 = !DILocation(line: 8599, column: 34, scope: !2588)
!10428 = !DILocation(line: 8601, column: 9, scope: !10429)
!10429 = distinct !DILexicalBlock(scope: !2588, file: !616, line: 8601, column: 9)
!10430 = !DILocation(line: 8601, column: 16, scope: !10429)
!10431 = !DILocation(line: 8601, column: 9, scope: !2588)
!10432 = !DILocation(line: 8602, column: 24, scope: !10433)
!10433 = distinct !DILexicalBlock(scope: !10429, file: !616, line: 8601, column: 21)
!10434 = !DILocation(line: 8602, column: 22, scope: !10433)
!10435 = !DILocation(line: 8603, column: 9, scope: !10433)
!10436 = !DILocation(line: 8606, column: 18, scope: !2588)
!10437 = !DILocation(line: 8607, column: 51, scope: !2588)
!10438 = !DILocation(line: 8607, column: 5, scope: !2588)
!10439 = !DILocation(line: 8610, column: 5, scope: !2588)
!10440 = !DILocation(line: 8611, column: 12, scope: !2588)
!10441 = !DILocation(line: 8611, column: 5, scope: !2588)
!10442 = !DILocation(line: 8612, column: 1, scope: !2588)
!10443 = !DILocation(line: 8632, column: 23, scope: !2600)
!10444 = !DILocation(line: 8632, column: 39, scope: !2600)
!10445 = !DILocation(line: 8632, column: 55, scope: !2600)
!10446 = !DILocation(line: 8634, column: 5, scope: !2600)
!10447 = !DILocation(line: 8634, column: 12, scope: !2600)
!10448 = !DILocation(line: 8635, column: 5, scope: !2600)
!10449 = !DILocation(line: 8635, column: 9, scope: !2600)
!10450 = !DILocation(line: 8636, column: 5, scope: !2600)
!10451 = !DILocation(line: 8636, column: 9, scope: !2600)
!10452 = !DILocation(line: 8637, column: 5, scope: !2600)
!10453 = !DILocation(line: 8637, column: 9, scope: !2600)
!10454 = !DILocation(line: 8638, column: 5, scope: !2600)
!10455 = !DILocation(line: 8638, column: 9, scope: !2600)
!10456 = !DILocation(line: 8639, column: 5, scope: !2600)
!10457 = !DILocation(line: 8639, column: 15, scope: !2600)
!10458 = !DILocation(line: 8642, column: 5, scope: !2600)
!10459 = !DILocation(line: 8643, column: 45, scope: !10460)
!10460 = distinct !DILexicalBlock(scope: !2600, file: !616, line: 8643, column: 9)
!10461 = !DILocation(line: 8643, column: 51, scope: !10460)
!10462 = !DILocation(line: 8643, column: 10, scope: !10460)
!10463 = !DILocation(line: 8643, column: 9, scope: !2600)
!10464 = !DILocation(line: 8652, column: 9, scope: !10460)
!10465 = !DILocation(line: 8654, column: 7, scope: !2612)
!10466 = !DILocation(line: 8654, column: 22, scope: !2612)
!10467 = !DILocation(line: 8654, column: 37, scope: !2612)
!10468 = !DILocation(line: 8654, column: 35, scope: !2612)
!10469 = !DILocation(line: 8656, column: 9, scope: !10470)
!10470 = distinct !DILexicalBlock(scope: !2612, file: !616, line: 8656, column: 9)
!10471 = !DILocation(line: 8656, column: 16, scope: !10470)
!10472 = !DILocation(line: 8656, column: 9, scope: !2612)
!10473 = !DILocation(line: 8657, column: 26, scope: !10470)
!10474 = !DILocation(line: 8657, column: 39, scope: !10470)
!10475 = !DILocation(line: 8657, column: 47, scope: !10470)
!10476 = !DILocation(line: 8657, column: 53, scope: !10470)
!10477 = !DILocation(line: 8657, column: 18, scope: !10470)
!10478 = !DILocation(line: 8657, column: 16, scope: !10470)
!10479 = !DILocation(line: 8657, column: 9, scope: !10470)
!10480 = !DILocation(line: 8660, column: 29, scope: !10470)
!10481 = !DILocation(line: 8660, column: 37, scope: !10470)
!10482 = !DILocation(line: 8660, column: 43, scope: !10470)
!10483 = !DILocation(line: 8660, column: 18, scope: !10470)
!10484 = !DILocation(line: 8660, column: 16, scope: !10470)
!10485 = !DILocation(line: 8661, column: 26, scope: !2612)
!10486 = !DILocation(line: 8661, column: 5, scope: !2612)
!10487 = !DILocation(line: 8661, column: 34, scope: !2600)
!10488 = !DILocation(line: 8663, column: 9, scope: !10489)
!10489 = distinct !DILexicalBlock(scope: !2600, file: !616, line: 8663, column: 9)
!10490 = !DILocation(line: 8663, column: 16, scope: !10489)
!10491 = !DILocation(line: 8663, column: 9, scope: !2600)
!10492 = !DILocation(line: 8664, column: 24, scope: !10493)
!10493 = distinct !DILexicalBlock(scope: !10489, file: !616, line: 8663, column: 21)
!10494 = !DILocation(line: 8664, column: 22, scope: !10493)
!10495 = !DILocation(line: 8665, column: 9, scope: !10493)
!10496 = !DILocation(line: 8668, column: 18, scope: !2600)
!10497 = !DILocation(line: 8669, column: 51, scope: !2600)
!10498 = !DILocation(line: 8669, column: 5, scope: !2600)
!10499 = !DILocation(line: 8672, column: 5, scope: !2600)
!10500 = !DILocation(line: 8673, column: 12, scope: !2600)
!10501 = !DILocation(line: 8673, column: 5, scope: !2600)
!10502 = !DILocation(line: 8674, column: 1, scope: !2600)
!10503 = !DILocation(line: 8683, column: 23, scope: !2628)
!10504 = !DILocation(line: 8683, column: 39, scope: !2628)
!10505 = !DILocation(line: 8685, column: 5, scope: !2628)
!10506 = !DILocation(line: 8685, column: 9, scope: !2628)
!10507 = !DILocation(line: 8686, column: 34, scope: !10508)
!10508 = distinct !DILexicalBlock(scope: !2628, file: !616, line: 8686, column: 9)
!10509 = !DILocation(line: 8686, column: 10, scope: !10508)
!10510 = !DILocation(line: 8686, column: 9, scope: !2628)
!10511 = !DILocation(line: 8687, column: 9, scope: !10508)
!10512 = !DILocation(line: 8688, column: 49, scope: !2628)
!10513 = !DILocation(line: 8688, column: 34, scope: !2628)
!10514 = !DILocation(line: 8688, column: 28, scope: !2628)
!10515 = !DILocation(line: 8688, column: 12, scope: !2628)
!10516 = !DILocation(line: 8688, column: 5, scope: !2628)
!10517 = !DILocation(line: 8689, column: 1, scope: !2628)
!10518 = !DILocation(line: 8696, column: 23, scope: !2639)
!10519 = !DILocation(line: 8696, column: 39, scope: !2639)
!10520 = !DILocation(line: 8698, column: 5, scope: !2639)
!10521 = !DILocation(line: 8698, column: 9, scope: !2639)
!10522 = !DILocation(line: 8699, column: 34, scope: !10523)
!10523 = distinct !DILexicalBlock(scope: !2639, file: !616, line: 8699, column: 9)
!10524 = !DILocation(line: 8699, column: 10, scope: !10523)
!10525 = !DILocation(line: 8699, column: 9, scope: !2639)
!10526 = !DILocation(line: 8700, column: 9, scope: !10523)
!10527 = !DILocation(line: 8701, column: 49, scope: !2639)
!10528 = !DILocation(line: 8701, column: 34, scope: !2639)
!10529 = !DILocation(line: 8701, column: 28, scope: !2639)
!10530 = !DILocation(line: 8701, column: 12, scope: !2639)
!10531 = !DILocation(line: 8701, column: 5, scope: !2639)
!10532 = !DILocation(line: 8702, column: 1, scope: !2639)
!10533 = !DILocation(line: 8709, column: 25, scope: !2647)
!10534 = !DILocation(line: 8709, column: 41, scope: !2647)
!10535 = !DILocation(line: 8711, column: 5, scope: !2647)
!10536 = !DILocation(line: 8711, column: 9, scope: !2647)
!10537 = !DILocation(line: 8711, column: 16, scope: !2647)
!10538 = !DILocation(line: 8712, column: 34, scope: !10539)
!10539 = distinct !DILexicalBlock(scope: !2647, file: !616, line: 8712, column: 9)
!10540 = !DILocation(line: 8712, column: 10, scope: !10539)
!10541 = !DILocation(line: 8712, column: 9, scope: !2647)
!10542 = !DILocation(line: 8713, column: 9, scope: !10539)
!10543 = !DILocation(line: 8714, column: 51, scope: !2647)
!10544 = !DILocation(line: 8714, column: 58, scope: !2647)
!10545 = !DILocation(line: 8714, column: 34, scope: !2647)
!10546 = !DILocation(line: 8714, column: 12, scope: !2647)
!10547 = !DILocation(line: 8714, column: 5, scope: !2647)
!10548 = !DILocation(line: 8715, column: 1, scope: !2647)
!10549 = !DILocation(line: 8725, column: 27, scope: !2659)
!10550 = !DILocation(line: 8725, column: 43, scope: !2659)
!10551 = !DILocation(line: 8727, column: 5, scope: !2659)
!10552 = !DILocation(line: 8727, column: 9, scope: !2659)
!10553 = !DILocation(line: 8728, column: 5, scope: !2659)
!10554 = !DILocation(line: 8728, column: 11, scope: !2659)
!10555 = !DILocation(line: 8729, column: 5, scope: !2659)
!10556 = !DILocation(line: 8729, column: 9, scope: !2659)
!10557 = !DILocation(line: 8731, column: 34, scope: !10558)
!10558 = distinct !DILexicalBlock(scope: !2659, file: !616, line: 8731, column: 9)
!10559 = !DILocation(line: 8731, column: 10, scope: !10558)
!10560 = !DILocation(line: 8731, column: 9, scope: !2659)
!10561 = !DILocation(line: 8732, column: 9, scope: !10558)
!10562 = !DILocation(line: 8734, column: 7, scope: !2667)
!10563 = !DILocation(line: 8734, column: 22, scope: !2667)
!10564 = !DILocation(line: 8734, column: 37, scope: !2667)
!10565 = !DILocation(line: 8734, column: 35, scope: !2667)
!10566 = !DILocation(line: 8735, column: 21, scope: !2667)
!10567 = !DILocation(line: 8735, column: 25, scope: !2667)
!10568 = !DILocation(line: 8735, column: 11, scope: !2667)
!10569 = !DILocation(line: 8735, column: 9, scope: !2667)
!10570 = !DILocation(line: 8736, column: 26, scope: !2667)
!10571 = !DILocation(line: 8736, column: 5, scope: !2667)
!10572 = !DILocation(line: 8736, column: 34, scope: !2659)
!10573 = !DILocation(line: 8737, column: 9, scope: !10574)
!10574 = distinct !DILexicalBlock(scope: !2659, file: !616, line: 8737, column: 9)
!10575 = !DILocation(line: 8737, column: 13, scope: !10574)
!10576 = !DILocation(line: 8737, column: 9, scope: !2659)
!10577 = !DILocation(line: 8738, column: 16, scope: !10574)
!10578 = !DILocation(line: 8738, column: 9, scope: !10574)
!10579 = !DILocation(line: 8739, column: 51, scope: !2659)
!10580 = !DILocation(line: 8740, column: 5, scope: !2659)
!10581 = !DILocation(line: 8741, column: 1, scope: !2659)
!10582 = !DILocation(line: 8752, column: 26, scope: !2668)
!10583 = !DILocation(line: 8752, column: 42, scope: !2668)
!10584 = !DILocation(line: 8752, column: 58, scope: !2668)
!10585 = !DILocation(line: 8754, column: 5, scope: !2668)
!10586 = !DILocation(line: 8754, column: 12, scope: !2668)
!10587 = !DILocation(line: 8755, column: 5, scope: !2668)
!10588 = !DILocation(line: 8755, column: 11, scope: !2668)
!10589 = !DILocation(line: 8756, column: 5, scope: !2668)
!10590 = !DILocation(line: 8756, column: 9, scope: !2668)
!10591 = !DILocation(line: 8757, column: 5, scope: !2668)
!10592 = !DILocation(line: 8757, column: 15, scope: !2668)
!10593 = !DILocation(line: 8760, column: 5, scope: !2668)
!10594 = !DILocation(line: 8761, column: 10, scope: !2668)
!10595 = !DILocation(line: 8761, column: 24, scope: !2668)
!10596 = !DILocation(line: 8763, column: 10, scope: !2668)
!10597 = !DILocation(line: 8763, column: 19, scope: !2668)
!10598 = !DILocation(line: 8765, column: 45, scope: !10599)
!10599 = distinct !DILexicalBlock(scope: !2668, file: !616, line: 8765, column: 9)
!10600 = !DILocation(line: 8765, column: 51, scope: !10599)
!10601 = !DILocation(line: 8765, column: 10, scope: !10599)
!10602 = !DILocation(line: 8765, column: 9, scope: !2668)
!10603 = !DILocation(line: 8768, column: 9, scope: !10599)
!10604 = !DILocation(line: 8770, column: 7, scope: !2678)
!10605 = !DILocation(line: 8770, column: 22, scope: !2678)
!10606 = !DILocation(line: 8770, column: 37, scope: !2678)
!10607 = !DILocation(line: 8770, column: 35, scope: !2678)
!10608 = !DILocation(line: 8772, column: 14, scope: !10609)
!10609 = distinct !DILexicalBlock(scope: !2678, file: !616, line: 8772, column: 9)
!10610 = !DILocation(line: 8772, column: 17, scope: !10609)
!10611 = !DILocation(line: 8772, column: 9, scope: !2678)
!10612 = !DILocation(line: 8773, column: 30, scope: !10609)
!10613 = !DILocation(line: 8773, column: 34, scope: !10609)
!10614 = !DILocation(line: 8773, column: 15, scope: !10609)
!10615 = !DILocation(line: 8773, column: 13, scope: !10609)
!10616 = !DILocation(line: 8773, column: 9, scope: !10609)
!10617 = !DILocation(line: 8776, column: 29, scope: !10609)
!10618 = !DILocation(line: 8776, column: 37, scope: !10609)
!10619 = !DILocation(line: 8776, column: 15, scope: !10609)
!10620 = !DILocation(line: 8776, column: 13, scope: !10609)
!10621 = !DILocation(line: 8777, column: 26, scope: !2678)
!10622 = !DILocation(line: 8777, column: 5, scope: !2678)
!10623 = !DILocation(line: 8777, column: 34, scope: !2668)
!10624 = !DILocation(line: 8778, column: 9, scope: !10625)
!10625 = distinct !DILexicalBlock(scope: !2668, file: !616, line: 8778, column: 9)
!10626 = !DILocation(line: 8778, column: 13, scope: !10625)
!10627 = !DILocation(line: 8778, column: 9, scope: !2668)
!10628 = !DILocation(line: 8779, column: 18, scope: !10625)
!10629 = !DILocation(line: 8779, column: 16, scope: !10625)
!10630 = !DILocation(line: 8779, column: 9, scope: !10625)
!10631 = !DILocation(line: 8781, column: 55, scope: !10632)
!10632 = distinct !DILexicalBlock(scope: !10625, file: !616, line: 8780, column: 10)
!10633 = !DILocation(line: 8782, column: 16, scope: !10632)
!10634 = !DILocation(line: 8784, column: 5, scope: !2668)
!10635 = !DILocation(line: 8785, column: 12, scope: !2668)
!10636 = !DILocation(line: 8785, column: 5, scope: !2668)
!10637 = !DILocation(line: 8786, column: 1, scope: !2668)
!10638 = !DILocation(line: 8796, column: 33, scope: !2679)
!10639 = !DILocation(line: 8796, column: 49, scope: !2679)
!10640 = !DILocation(line: 8798, column: 5, scope: !2679)
!10641 = !DILocation(line: 8798, column: 11, scope: !2679)
!10642 = !DILocation(line: 8798, column: 16, scope: !2679)
!10643 = !DILocation(line: 8799, column: 5, scope: !2679)
!10644 = !DILocation(line: 8799, column: 9, scope: !2679)
!10645 = !DILocation(line: 8799, column: 14, scope: !2679)
!10646 = !DILocation(line: 8801, column: 34, scope: !10647)
!10647 = distinct !DILexicalBlock(scope: !2679, file: !616, line: 8801, column: 9)
!10648 = !DILocation(line: 8801, column: 10, scope: !10647)
!10649 = !DILocation(line: 8801, column: 9, scope: !2679)
!10650 = !DILocation(line: 8803, column: 9, scope: !10647)
!10651 = !DILocation(line: 8805, column: 7, scope: !2688)
!10652 = !DILocation(line: 8805, column: 22, scope: !2688)
!10653 = !DILocation(line: 8805, column: 37, scope: !2688)
!10654 = !DILocation(line: 8805, column: 35, scope: !2688)
!10655 = !DILocation(line: 8806, column: 27, scope: !2688)
!10656 = !DILocation(line: 8806, column: 31, scope: !2688)
!10657 = !DILocation(line: 8806, column: 39, scope: !2688)
!10658 = !DILocation(line: 8806, column: 11, scope: !2688)
!10659 = !DILocation(line: 8806, column: 9, scope: !2688)
!10660 = !DILocation(line: 8807, column: 26, scope: !2688)
!10661 = !DILocation(line: 8807, column: 5, scope: !2688)
!10662 = !DILocation(line: 8807, column: 34, scope: !2679)
!10663 = !DILocation(line: 8808, column: 9, scope: !10664)
!10664 = distinct !DILexicalBlock(scope: !2679, file: !616, line: 8808, column: 9)
!10665 = !DILocation(line: 8808, column: 13, scope: !10664)
!10666 = !DILocation(line: 8808, column: 9, scope: !2679)
!10667 = !DILocation(line: 8809, column: 34, scope: !10668)
!10668 = distinct !DILexicalBlock(scope: !10664, file: !616, line: 8808, column: 19)
!10669 = !DILocation(line: 8809, column: 11, scope: !10668)
!10670 = !DILocation(line: 8809, column: 32, scope: !10668)
!10671 = !DILocation(line: 8810, column: 16, scope: !10668)
!10672 = !DILocation(line: 8810, column: 9, scope: !10668)
!10673 = !DILocation(line: 8812, column: 58, scope: !2679)
!10674 = !DILocation(line: 8812, column: 5, scope: !2679)
!10675 = !DILocation(line: 8813, column: 1, scope: !2679)
!10676 = !DILocation(line: 8828, column: 31, scope: !2689)
!10677 = !DILocation(line: 8828, column: 47, scope: !2689)
!10678 = !DILocation(line: 8830, column: 5, scope: !2689)
!10679 = !DILocation(line: 8830, column: 11, scope: !2689)
!10680 = !DILocation(line: 8830, column: 16, scope: !2689)
!10681 = !DILocation(line: 8831, column: 5, scope: !2689)
!10682 = !DILocation(line: 8831, column: 9, scope: !2689)
!10683 = !DILocation(line: 8831, column: 14, scope: !2689)
!10684 = !DILocation(line: 8831, column: 18, scope: !2689)
!10685 = !DILocation(line: 8833, column: 34, scope: !10686)
!10686 = distinct !DILexicalBlock(scope: !2689, file: !616, line: 8833, column: 9)
!10687 = !DILocation(line: 8833, column: 10, scope: !10686)
!10688 = !DILocation(line: 8833, column: 9, scope: !2689)
!10689 = !DILocation(line: 8835, column: 9, scope: !10686)
!10690 = !DILocation(line: 8837, column: 7, scope: !2699)
!10691 = !DILocation(line: 8837, column: 22, scope: !2699)
!10692 = !DILocation(line: 8837, column: 37, scope: !2699)
!10693 = !DILocation(line: 8837, column: 35, scope: !2699)
!10694 = !DILocation(line: 8838, column: 25, scope: !2699)
!10695 = !DILocation(line: 8838, column: 29, scope: !2699)
!10696 = !DILocation(line: 8838, column: 37, scope: !2699)
!10697 = !DILocation(line: 8838, column: 42, scope: !2699)
!10698 = !DILocation(line: 8838, column: 11, scope: !2699)
!10699 = !DILocation(line: 8838, column: 9, scope: !2699)
!10700 = !DILocation(line: 8839, column: 26, scope: !2699)
!10701 = !DILocation(line: 8839, column: 5, scope: !2699)
!10702 = !DILocation(line: 8839, column: 34, scope: !2689)
!10703 = !DILocation(line: 8840, column: 9, scope: !10704)
!10704 = distinct !DILexicalBlock(scope: !2689, file: !616, line: 8840, column: 9)
!10705 = !DILocation(line: 8840, column: 13, scope: !10704)
!10706 = !DILocation(line: 8840, column: 9, scope: !2689)
!10707 = !DILocation(line: 8841, column: 34, scope: !10708)
!10708 = distinct !DILexicalBlock(scope: !10704, file: !616, line: 8840, column: 19)
!10709 = !DILocation(line: 8841, column: 11, scope: !10708)
!10710 = !DILocation(line: 8841, column: 32, scope: !10708)
!10711 = !DILocation(line: 8842, column: 16, scope: !10708)
!10712 = !DILocation(line: 8842, column: 9, scope: !10708)
!10713 = !DILocation(line: 8844, column: 58, scope: !2689)
!10714 = !DILocation(line: 8844, column: 5, scope: !2689)
!10715 = !DILocation(line: 8845, column: 1, scope: !2689)
!10716 = !DILocation(line: 8858, column: 24, scope: !2700)
!10717 = !DILocation(line: 8858, column: 40, scope: !2700)
!10718 = !DILocation(line: 8860, column: 5, scope: !2700)
!10719 = !DILocation(line: 8860, column: 15, scope: !2700)
!10720 = !DILocation(line: 8890, column: 5, scope: !2700)
!10721 = !DILocation(line: 8890, column: 15, scope: !2700)
!10722 = !DILocation(line: 8890, column: 21, scope: !2700)
!10723 = !DILocation(line: 8891, column: 5, scope: !2700)
!10724 = !DILocation(line: 8891, column: 11, scope: !2700)
!10725 = !DILocation(line: 8891, column: 16, scope: !2700)
!10726 = !DILocation(line: 8892, column: 5, scope: !2700)
!10727 = !DILocation(line: 8892, column: 11, scope: !2700)
!10728 = !DILocation(line: 8894, column: 34, scope: !10729)
!10729 = distinct !DILexicalBlock(scope: !2700, file: !616, line: 8894, column: 9)
!10730 = !DILocation(line: 8894, column: 10, scope: !10729)
!10731 = !DILocation(line: 8894, column: 9, scope: !2700)
!10732 = !DILocation(line: 8898, column: 9, scope: !10729)
!10733 = !DILocation(line: 8899, column: 27, scope: !2700)
!10734 = !DILocation(line: 8899, column: 10, scope: !2700)
!10735 = !DILocation(line: 8899, column: 8, scope: !2700)
!10736 = !DILocation(line: 8900, column: 27, scope: !2700)
!10737 = !DILocation(line: 8900, column: 10, scope: !2700)
!10738 = !DILocation(line: 8900, column: 8, scope: !2700)
!10739 = !DILocation(line: 8902, column: 42, scope: !2700)
!10740 = !DILocation(line: 8902, column: 46, scope: !2700)
!10741 = !DILocation(line: 8902, column: 14, scope: !2700)
!10742 = !DILocation(line: 8902, column: 12, scope: !2700)
!10743 = !DILocation(line: 8903, column: 9, scope: !10744)
!10744 = distinct !DILexicalBlock(scope: !2700, file: !616, line: 8903, column: 9)
!10745 = !DILocation(line: 8903, column: 16, scope: !10744)
!10746 = !DILocation(line: 8903, column: 9, scope: !2700)
!10747 = !DILocation(line: 8904, column: 9, scope: !10748)
!10748 = distinct !DILexicalBlock(scope: !10744, file: !616, line: 8903, column: 31)
!10749 = !DILocation(line: 8905, column: 9, scope: !10748)
!10750 = !DILocation(line: 8908, column: 49, scope: !2700)
!10751 = !DILocation(line: 8908, column: 31, scope: !2700)
!10752 = !DILocation(line: 8908, column: 59, scope: !2700)
!10753 = !DILocation(line: 8908, column: 29, scope: !2700)
!10754 = !DILocation(line: 8908, column: 12, scope: !2700)
!10755 = !DILocation(line: 8909, column: 16, scope: !10756)
!10756 = distinct !DILexicalBlock(scope: !2700, file: !616, line: 8909, column: 9)
!10757 = !DILocation(line: 8909, column: 9, scope: !10756)
!10758 = !DILocation(line: 8909, column: 9, scope: !2700)
!10759 = !DILocation(line: 8910, column: 9, scope: !10760)
!10760 = distinct !DILexicalBlock(scope: !10756, file: !616, line: 8909, column: 25)
!10761 = !DILocation(line: 8911, column: 9, scope: !10760)
!10762 = !DILocation(line: 8919, column: 24, scope: !2713)
!10763 = !DILocation(line: 8919, column: 46, scope: !2713)
!10764 = !DILocation(line: 8919, column: 51, scope: !2713)
!10765 = !DILocation(line: 8919, column: 9, scope: !2713)
!10766 = !DILocation(line: 8919, column: 9, scope: !2700)
!10767 = !DILocation(line: 8921, column: 9, scope: !10768)
!10768 = distinct !DILexicalBlock(scope: !2713, file: !616, line: 8919, column: 60)
!10769 = !DILocation(line: 8922, column: 5, scope: !10768)
!10770 = !DILocation(line: 8924, column: 9, scope: !2712)
!10771 = !DILocation(line: 8924, column: 14, scope: !10772)
!10772 = !DILexicalBlockFile(scope: !2711, file: !616, discriminator: 1)
!10773 = !DILocation(line: 8924, column: 24, scope: !2711)
!10774 = !DILocation(line: 8924, column: 54, scope: !2711)
!10775 = !DILocation(line: 8924, column: 71, scope: !10776)
!10776 = distinct !DILexicalBlock(scope: !2711, file: !616, line: 8924, column: 68)
!10777 = !DILocation(line: 8924, column: 88, scope: !10776)
!10778 = !DILocation(line: 8924, column: 68, scope: !10776)
!10779 = !DILocation(line: 8924, column: 98, scope: !10776)
!10780 = !DILocation(line: 8924, column: 68, scope: !2711)
!10781 = !DILocation(line: 8924, column: 68, scope: !10782)
!10782 = !DILexicalBlockFile(scope: !2711, file: !616, discriminator: 2)
!10783 = !DILocation(line: 8924, column: 129, scope: !10784)
!10784 = !DILexicalBlockFile(scope: !10776, file: !616, discriminator: 3)
!10785 = !DILocation(line: 8924, column: 147, scope: !10776)
!10786 = !DILocation(line: 8924, column: 157, scope: !10776)
!10787 = !DILocation(line: 8924, column: 182, scope: !10776)
!10788 = !DILocation(line: 8924, column: 113, scope: !10776)
!10789 = !DILocation(line: 8924, column: 201, scope: !10790)
!10790 = !DILexicalBlockFile(scope: !2712, file: !616, discriminator: 4)
!10791 = !DILocation(line: 8924, column: 201, scope: !2711)
!10792 = !DILocation(line: 8924, column: 201, scope: !10793)
!10793 = !DILexicalBlockFile(scope: !2711, file: !616, discriminator: 5)
!10794 = !DILocation(line: 8928, column: 5, scope: !2700)
!10795 = !DILocation(line: 8928, column: 10, scope: !10796)
!10796 = !DILexicalBlockFile(scope: !2715, file: !616, discriminator: 1)
!10797 = !DILocation(line: 8928, column: 20, scope: !2715)
!10798 = !DILocation(line: 8928, column: 50, scope: !2715)
!10799 = !DILocation(line: 8928, column: 64, scope: !10800)
!10800 = distinct !DILexicalBlock(scope: !2715, file: !616, line: 8928, column: 61)
!10801 = !DILocation(line: 8928, column: 81, scope: !10800)
!10802 = !DILocation(line: 8928, column: 61, scope: !10800)
!10803 = !DILocation(line: 8928, column: 91, scope: !10800)
!10804 = !DILocation(line: 8928, column: 61, scope: !2715)
!10805 = !DILocation(line: 8928, column: 61, scope: !10806)
!10806 = !DILexicalBlockFile(scope: !2715, file: !616, discriminator: 2)
!10807 = !DILocation(line: 8928, column: 122, scope: !10808)
!10808 = !DILexicalBlockFile(scope: !10800, file: !616, discriminator: 3)
!10809 = !DILocation(line: 8928, column: 140, scope: !10800)
!10810 = !DILocation(line: 8928, column: 150, scope: !10800)
!10811 = !DILocation(line: 8928, column: 175, scope: !10800)
!10812 = !DILocation(line: 8928, column: 106, scope: !10800)
!10813 = !DILocation(line: 8928, column: 194, scope: !10814)
!10814 = !DILexicalBlockFile(scope: !2700, file: !616, discriminator: 4)
!10815 = !DILocation(line: 8928, column: 194, scope: !2715)
!10816 = !DILocation(line: 8928, column: 194, scope: !10817)
!10817 = !DILexicalBlockFile(scope: !2715, file: !616, discriminator: 5)
!10818 = !DILocation(line: 8929, column: 5, scope: !2700)
!10819 = !DILocation(line: 8929, column: 10, scope: !10820)
!10820 = !DILexicalBlockFile(scope: !2717, file: !616, discriminator: 1)
!10821 = !DILocation(line: 8929, column: 20, scope: !2717)
!10822 = !DILocation(line: 8929, column: 50, scope: !2717)
!10823 = !DILocation(line: 8929, column: 64, scope: !10824)
!10824 = distinct !DILexicalBlock(scope: !2717, file: !616, line: 8929, column: 61)
!10825 = !DILocation(line: 8929, column: 81, scope: !10824)
!10826 = !DILocation(line: 8929, column: 61, scope: !10824)
!10827 = !DILocation(line: 8929, column: 91, scope: !10824)
!10828 = !DILocation(line: 8929, column: 61, scope: !2717)
!10829 = !DILocation(line: 8929, column: 61, scope: !10830)
!10830 = !DILexicalBlockFile(scope: !2717, file: !616, discriminator: 2)
!10831 = !DILocation(line: 8929, column: 122, scope: !10832)
!10832 = !DILexicalBlockFile(scope: !10824, file: !616, discriminator: 3)
!10833 = !DILocation(line: 8929, column: 140, scope: !10824)
!10834 = !DILocation(line: 8929, column: 150, scope: !10824)
!10835 = !DILocation(line: 8929, column: 175, scope: !10824)
!10836 = !DILocation(line: 8929, column: 106, scope: !10824)
!10837 = !DILocation(line: 8929, column: 194, scope: !10814)
!10838 = !DILocation(line: 8929, column: 194, scope: !2717)
!10839 = !DILocation(line: 8929, column: 194, scope: !10840)
!10840 = !DILexicalBlockFile(scope: !2717, file: !616, discriminator: 5)
!10841 = !DILocation(line: 8931, column: 58, scope: !2700)
!10842 = !DILocation(line: 8931, column: 5, scope: !2700)
!10843 = !DILocation(line: 8935, column: 5, scope: !2700)
!10844 = !DILocation(line: 8935, column: 10, scope: !10845)
!10845 = !DILexicalBlockFile(scope: !2719, file: !616, discriminator: 1)
!10846 = !DILocation(line: 8935, column: 20, scope: !2719)
!10847 = !DILocation(line: 8935, column: 50, scope: !2719)
!10848 = !DILocation(line: 8935, column: 64, scope: !10849)
!10849 = distinct !DILexicalBlock(scope: !2719, file: !616, line: 8935, column: 61)
!10850 = !DILocation(line: 8935, column: 81, scope: !10849)
!10851 = !DILocation(line: 8935, column: 61, scope: !10849)
!10852 = !DILocation(line: 8935, column: 91, scope: !10849)
!10853 = !DILocation(line: 8935, column: 61, scope: !2719)
!10854 = !DILocation(line: 8935, column: 61, scope: !10855)
!10855 = !DILexicalBlockFile(scope: !2719, file: !616, discriminator: 2)
!10856 = !DILocation(line: 8935, column: 122, scope: !10857)
!10857 = !DILexicalBlockFile(scope: !10849, file: !616, discriminator: 3)
!10858 = !DILocation(line: 8935, column: 140, scope: !10849)
!10859 = !DILocation(line: 8935, column: 150, scope: !10849)
!10860 = !DILocation(line: 8935, column: 175, scope: !10849)
!10861 = !DILocation(line: 8935, column: 106, scope: !10849)
!10862 = !DILocation(line: 8935, column: 194, scope: !10814)
!10863 = !DILocation(line: 8935, column: 194, scope: !2719)
!10864 = !DILocation(line: 8935, column: 194, scope: !10865)
!10865 = !DILexicalBlockFile(scope: !2719, file: !616, discriminator: 5)
!10866 = !DILocation(line: 8936, column: 5, scope: !2700)
!10867 = !DILocation(line: 8936, column: 10, scope: !10868)
!10868 = !DILexicalBlockFile(scope: !2721, file: !616, discriminator: 1)
!10869 = !DILocation(line: 8936, column: 20, scope: !2721)
!10870 = !DILocation(line: 8936, column: 50, scope: !2721)
!10871 = !DILocation(line: 8936, column: 64, scope: !10872)
!10872 = distinct !DILexicalBlock(scope: !2721, file: !616, line: 8936, column: 61)
!10873 = !DILocation(line: 8936, column: 81, scope: !10872)
!10874 = !DILocation(line: 8936, column: 61, scope: !10872)
!10875 = !DILocation(line: 8936, column: 91, scope: !10872)
!10876 = !DILocation(line: 8936, column: 61, scope: !2721)
!10877 = !DILocation(line: 8936, column: 61, scope: !10878)
!10878 = !DILexicalBlockFile(scope: !2721, file: !616, discriminator: 2)
!10879 = !DILocation(line: 8936, column: 122, scope: !10880)
!10880 = !DILexicalBlockFile(scope: !10872, file: !616, discriminator: 3)
!10881 = !DILocation(line: 8936, column: 140, scope: !10872)
!10882 = !DILocation(line: 8936, column: 150, scope: !10872)
!10883 = !DILocation(line: 8936, column: 175, scope: !10872)
!10884 = !DILocation(line: 8936, column: 106, scope: !10872)
!10885 = !DILocation(line: 8936, column: 194, scope: !10814)
!10886 = !DILocation(line: 8936, column: 194, scope: !2721)
!10887 = !DILocation(line: 8936, column: 194, scope: !10888)
!10888 = !DILexicalBlockFile(scope: !2721, file: !616, discriminator: 5)
!10889 = !DILocation(line: 8938, column: 5, scope: !2700)
!10890 = !DILocation(line: 8938, column: 10, scope: !10891)
!10891 = !DILexicalBlockFile(scope: !2723, file: !616, discriminator: 1)
!10892 = !DILocation(line: 8938, column: 20, scope: !2723)
!10893 = !DILocation(line: 8938, column: 51, scope: !2723)
!10894 = !DILocation(line: 8938, column: 64, scope: !2726)
!10895 = !DILocation(line: 8938, column: 80, scope: !2726)
!10896 = !DILocation(line: 8938, column: 64, scope: !2723)
!10897 = !DILocation(line: 8938, column: 95, scope: !10898)
!10898 = !DILexicalBlockFile(scope: !2726, file: !616, discriminator: 2)
!10899 = !DILocation(line: 8938, column: 100, scope: !10900)
!10900 = !DILexicalBlockFile(scope: !2725, file: !616, discriminator: 4)
!10901 = !DILocation(line: 8938, column: 110, scope: !2725)
!10902 = !DILocation(line: 8938, column: 140, scope: !2725)
!10903 = !DILocation(line: 8938, column: 166, scope: !10904)
!10904 = distinct !DILexicalBlock(scope: !2725, file: !616, line: 8938, column: 163)
!10905 = !DILocation(line: 8938, column: 183, scope: !10904)
!10906 = !DILocation(line: 8938, column: 163, scope: !10904)
!10907 = !DILocation(line: 8938, column: 193, scope: !10904)
!10908 = !DILocation(line: 8938, column: 163, scope: !2725)
!10909 = !DILocation(line: 8938, column: 163, scope: !10910)
!10910 = !DILexicalBlockFile(scope: !2725, file: !616, discriminator: 5)
!10911 = !DILocation(line: 8938, column: 224, scope: !10912)
!10912 = !DILexicalBlockFile(scope: !10904, file: !616, discriminator: 6)
!10913 = !DILocation(line: 8938, column: 242, scope: !10904)
!10914 = !DILocation(line: 8938, column: 252, scope: !10904)
!10915 = !DILocation(line: 8938, column: 277, scope: !10904)
!10916 = !DILocation(line: 8938, column: 208, scope: !10904)
!10917 = !DILocation(line: 8938, column: 296, scope: !10918)
!10918 = !DILexicalBlockFile(scope: !2726, file: !616, discriminator: 7)
!10919 = !DILocation(line: 8938, column: 296, scope: !2725)
!10920 = !DILocation(line: 8938, column: 296, scope: !10921)
!10921 = !DILexicalBlockFile(scope: !2725, file: !616, discriminator: 8)
!10922 = !DILocation(line: 8938, column: 296, scope: !10923)
!10923 = !DILexicalBlockFile(scope: !2725, file: !616, discriminator: 9)
!10924 = !DILocation(line: 8938, column: 309, scope: !10925)
!10925 = !DILexicalBlockFile(scope: !10926, file: !616, discriminator: 10)
!10926 = !DILexicalBlockFile(scope: !2700, file: !616, discriminator: 3)
!10927 = !DILocation(line: 8938, column: 309, scope: !2723)
!10928 = !DILocation(line: 8938, column: 309, scope: !10929)
!10929 = !DILexicalBlockFile(scope: !2723, file: !616, discriminator: 11)
!10930 = !DILocation(line: 8939, column: 5, scope: !2700)
!10931 = !DILocation(line: 8940, column: 1, scope: !2700)
!10932 = !DILocation(line: 8949, column: 26, scope: !2727)
!10933 = !DILocation(line: 8949, column: 42, scope: !2727)
!10934 = !DILocation(line: 8951, column: 5, scope: !2727)
!10935 = !DILocation(line: 8951, column: 15, scope: !2727)
!10936 = !DILocation(line: 8953, column: 5, scope: !2727)
!10937 = !DILocation(line: 8953, column: 9, scope: !2727)
!10938 = !DILocation(line: 8956, column: 34, scope: !10939)
!10939 = distinct !DILexicalBlock(scope: !2727, file: !616, line: 8956, column: 9)
!10940 = !DILocation(line: 8956, column: 10, scope: !10939)
!10941 = !DILocation(line: 8956, column: 9, scope: !2727)
!10942 = !DILocation(line: 8959, column: 9, scope: !10939)
!10943 = !DILocation(line: 8964, column: 55, scope: !2727)
!10944 = !DILocation(line: 8964, column: 37, scope: !2727)
!10945 = !DILocation(line: 8964, column: 63, scope: !2727)
!10946 = !DILocation(line: 8964, column: 35, scope: !2727)
!10947 = !DILocation(line: 8964, column: 11, scope: !2727)
!10948 = !DILocation(line: 8964, column: 9, scope: !2727)
!10949 = !DILocation(line: 8965, column: 9, scope: !2736)
!10950 = !DILocation(line: 8965, column: 9, scope: !2727)
!10951 = !DILocation(line: 8966, column: 9, scope: !2735)
!10952 = !DILocation(line: 8966, column: 14, scope: !10953)
!10953 = !DILexicalBlockFile(scope: !2734, file: !616, discriminator: 1)
!10954 = !DILocation(line: 8966, column: 24, scope: !2734)
!10955 = !DILocation(line: 8966, column: 54, scope: !2734)
!10956 = !DILocation(line: 8966, column: 69, scope: !10957)
!10957 = distinct !DILexicalBlock(scope: !2734, file: !616, line: 8966, column: 66)
!10958 = !DILocation(line: 8966, column: 86, scope: !10957)
!10959 = !DILocation(line: 8966, column: 66, scope: !10957)
!10960 = !DILocation(line: 8966, column: 96, scope: !10957)
!10961 = !DILocation(line: 8966, column: 66, scope: !2734)
!10962 = !DILocation(line: 8966, column: 66, scope: !10963)
!10963 = !DILexicalBlockFile(scope: !2734, file: !616, discriminator: 2)
!10964 = !DILocation(line: 8966, column: 127, scope: !10965)
!10965 = !DILexicalBlockFile(scope: !10957, file: !616, discriminator: 3)
!10966 = !DILocation(line: 8966, column: 145, scope: !10957)
!10967 = !DILocation(line: 8966, column: 155, scope: !10957)
!10968 = !DILocation(line: 8966, column: 180, scope: !10957)
!10969 = !DILocation(line: 8966, column: 111, scope: !10957)
!10970 = !DILocation(line: 8966, column: 199, scope: !10971)
!10971 = !DILexicalBlockFile(scope: !2735, file: !616, discriminator: 4)
!10972 = !DILocation(line: 8966, column: 199, scope: !2734)
!10973 = !DILocation(line: 8966, column: 199, scope: !10974)
!10974 = !DILexicalBlockFile(scope: !2734, file: !616, discriminator: 5)
!10975 = !DILocation(line: 8967, column: 16, scope: !2735)
!10976 = !DILocation(line: 8967, column: 9, scope: !2735)
!10977 = !DILocation(line: 8976, column: 24, scope: !10978)
!10978 = distinct !DILexicalBlock(scope: !2727, file: !616, line: 8976, column: 9)
!10979 = !DILocation(line: 8976, column: 46, scope: !10978)
!10980 = !DILocation(line: 8976, column: 9, scope: !10978)
!10981 = !DILocation(line: 8976, column: 9, scope: !2727)
!10982 = !DILocation(line: 8978, column: 9, scope: !10983)
!10983 = distinct !DILexicalBlock(scope: !10978, file: !616, line: 8976, column: 53)
!10984 = !DILocation(line: 8979, column: 5, scope: !10983)
!10985 = !DILocation(line: 8980, column: 5, scope: !2727)
!10986 = !DILocation(line: 8980, column: 10, scope: !10987)
!10987 = !DILexicalBlockFile(scope: !2738, file: !616, discriminator: 1)
!10988 = !DILocation(line: 8980, column: 20, scope: !2738)
!10989 = !DILocation(line: 8980, column: 50, scope: !2738)
!10990 = !DILocation(line: 8980, column: 65, scope: !10991)
!10991 = distinct !DILexicalBlock(scope: !2738, file: !616, line: 8980, column: 62)
!10992 = !DILocation(line: 8980, column: 82, scope: !10991)
!10993 = !DILocation(line: 8980, column: 62, scope: !10991)
!10994 = !DILocation(line: 8980, column: 92, scope: !10991)
!10995 = !DILocation(line: 8980, column: 62, scope: !2738)
!10996 = !DILocation(line: 8980, column: 62, scope: !10997)
!10997 = !DILexicalBlockFile(scope: !2738, file: !616, discriminator: 2)
!10998 = !DILocation(line: 8980, column: 123, scope: !10999)
!10999 = !DILexicalBlockFile(scope: !10991, file: !616, discriminator: 3)
!11000 = !DILocation(line: 8980, column: 141, scope: !10991)
!11001 = !DILocation(line: 8980, column: 151, scope: !10991)
!11002 = !DILocation(line: 8980, column: 176, scope: !10991)
!11003 = !DILocation(line: 8980, column: 107, scope: !10991)
!11004 = !DILocation(line: 8980, column: 195, scope: !11005)
!11005 = !DILexicalBlockFile(scope: !2727, file: !616, discriminator: 4)
!11006 = !DILocation(line: 8980, column: 195, scope: !2738)
!11007 = !DILocation(line: 8980, column: 195, scope: !11008)
!11008 = !DILexicalBlockFile(scope: !2738, file: !616, discriminator: 5)
!11009 = !DILocation(line: 8981, column: 58, scope: !2727)
!11010 = !DILocation(line: 8981, column: 5, scope: !2727)
!11011 = !DILocation(line: 8982, column: 1, scope: !2727)
!11012 = !DILocation(line: 8990, column: 26, scope: !2739)
!11013 = !DILocation(line: 8990, column: 42, scope: !2739)
!11014 = !DILocation(line: 8992, column: 5, scope: !2739)
!11015 = !DILocation(line: 8992, column: 9, scope: !2739)
!11016 = !DILocation(line: 8993, column: 5, scope: !2739)
!11017 = !DILocation(line: 8993, column: 11, scope: !2739)
!11018 = !DILocation(line: 8994, column: 34, scope: !11019)
!11019 = distinct !DILexicalBlock(scope: !2739, file: !616, line: 8994, column: 9)
!11020 = !DILocation(line: 8994, column: 10, scope: !11019)
!11021 = !DILocation(line: 8994, column: 9, scope: !2739)
!11022 = !DILocation(line: 8995, column: 9, scope: !11019)
!11023 = !DILocation(line: 8996, column: 24, scope: !2739)
!11024 = !DILocation(line: 8996, column: 15, scope: !2739)
!11025 = !DILocation(line: 8996, column: 13, scope: !2739)
!11026 = !DILocation(line: 8997, column: 9, scope: !11027)
!11027 = distinct !DILexicalBlock(scope: !2739, file: !616, line: 8997, column: 9)
!11028 = !DILocation(line: 8997, column: 17, scope: !11027)
!11029 = !DILocation(line: 8997, column: 9, scope: !2739)
!11030 = !DILocation(line: 8998, column: 25, scope: !11031)
!11031 = distinct !DILexicalBlock(scope: !11027, file: !616, line: 8997, column: 32)
!11032 = !DILocation(line: 8998, column: 9, scope: !11031)
!11033 = !DILocation(line: 9000, column: 9, scope: !11031)
!11034 = !DILocation(line: 9002, column: 35, scope: !2739)
!11035 = !DILocation(line: 9002, column: 12, scope: !2739)
!11036 = !DILocation(line: 9002, column: 5, scope: !2739)
!11037 = !DILocation(line: 9003, column: 1, scope: !2739)
!11038 = !DILocation(line: 2877, column: 24, scope: !2745)
!11039 = !DILocation(line: 2877, column: 40, scope: !2745)
!11040 = !DILocation(line: 2879, column: 25, scope: !2745)
!11041 = !DILocation(line: 2879, column: 12, scope: !2745)
!11042 = !DILocation(line: 2879, column: 5, scope: !2745)
!11043 = !DILocation(line: 3188, column: 23, scope: !2762)
!11044 = !DILocation(line: 3188, column: 39, scope: !2762)
!11045 = !DILocation(line: 3190, column: 25, scope: !2762)
!11046 = !DILocation(line: 3190, column: 12, scope: !2762)
!11047 = !DILocation(line: 3190, column: 5, scope: !2762)
!11048 = !DILocation(line: 3200, column: 22, scope: !2766)
!11049 = !DILocation(line: 3200, column: 38, scope: !2766)
!11050 = !DILocation(line: 3202, column: 7, scope: !2771)
!11051 = !DILocation(line: 3202, column: 22, scope: !2771)
!11052 = !DILocation(line: 3202, column: 37, scope: !2771)
!11053 = !DILocation(line: 3202, column: 35, scope: !2771)
!11054 = !DILocation(line: 3203, column: 5, scope: !2771)
!11055 = !DILocation(line: 3204, column: 26, scope: !2771)
!11056 = !DILocation(line: 3204, column: 5, scope: !2771)
!11057 = !DILocation(line: 3204, column: 34, scope: !2766)
!11058 = !DILocation(line: 3205, column: 58, scope: !2766)
!11059 = !DILocation(line: 3205, column: 5, scope: !2766)
!11060 = !DILocation(line: 3221, column: 27, scope: !2772)
!11061 = !DILocation(line: 3221, column: 43, scope: !2772)
!11062 = !DILocation(line: 3223, column: 25, scope: !2772)
!11063 = !DILocation(line: 3223, column: 12, scope: !2772)
!11064 = !DILocation(line: 3223, column: 5, scope: !2772)
!11065 = !DILocation(line: 9014, column: 27, scope: !2776)
!11066 = !DILocation(line: 9014, column: 43, scope: !2776)
!11067 = !DILocation(line: 9016, column: 5, scope: !2776)
!11068 = !DILocation(line: 9016, column: 9, scope: !2776)
!11069 = !DILocation(line: 9017, column: 14, scope: !2776)
!11070 = !DILocation(line: 9019, column: 34, scope: !11071)
!11071 = distinct !DILexicalBlock(scope: !2776, file: !616, line: 9019, column: 9)
!11072 = !DILocation(line: 9019, column: 10, scope: !11071)
!11073 = !DILocation(line: 9019, column: 9, scope: !2776)
!11074 = !DILocation(line: 9020, column: 9, scope: !11071)
!11075 = !DILocation(line: 9022, column: 91, scope: !2776)
!11076 = !DILocation(line: 9022, column: 102, scope: !2776)
!11077 = !DILocation(line: 9022, column: 113, scope: !2776)
!11078 = !DILocation(line: 9022, column: 120, scope: !2776)
!11079 = !DILocation(line: 9022, column: 28, scope: !2776)
!11080 = !DILocation(line: 9022, column: 12, scope: !2776)
!11081 = !DILocation(line: 9022, column: 5, scope: !2776)
!11082 = !DILocation(line: 9023, column: 1, scope: !2776)
!11083 = !DILocation(line: 9033, column: 30, scope: !2781)
!11084 = !DILocation(line: 9033, column: 46, scope: !2781)
!11085 = !DILocation(line: 9035, column: 5, scope: !2781)
!11086 = !DILocation(line: 9035, column: 9, scope: !2781)
!11087 = !DILocation(line: 9036, column: 14, scope: !2781)
!11088 = !DILocation(line: 9038, column: 34, scope: !11089)
!11089 = distinct !DILexicalBlock(scope: !2781, file: !616, line: 9038, column: 9)
!11090 = !DILocation(line: 9038, column: 10, scope: !11089)
!11091 = !DILocation(line: 9038, column: 9, scope: !2781)
!11092 = !DILocation(line: 9039, column: 9, scope: !11089)
!11093 = !DILocation(line: 9041, column: 91, scope: !2781)
!11094 = !DILocation(line: 9041, column: 102, scope: !2781)
!11095 = !DILocation(line: 9041, column: 113, scope: !2781)
!11096 = !DILocation(line: 9041, column: 120, scope: !2781)
!11097 = !DILocation(line: 9041, column: 28, scope: !2781)
!11098 = !DILocation(line: 9041, column: 12, scope: !2781)
!11099 = !DILocation(line: 9041, column: 5, scope: !2781)
!11100 = !DILocation(line: 9042, column: 1, scope: !2781)
!11101 = !DILocation(line: 9051, column: 28, scope: !2786)
!11102 = !DILocation(line: 9051, column: 44, scope: !2786)
!11103 = !DILocation(line: 9053, column: 5, scope: !2786)
!11104 = !DILocation(line: 9053, column: 9, scope: !2786)
!11105 = !DILocation(line: 9054, column: 14, scope: !2786)
!11106 = !DILocation(line: 9056, column: 34, scope: !11107)
!11107 = distinct !DILexicalBlock(scope: !2786, file: !616, line: 9056, column: 9)
!11108 = !DILocation(line: 9056, column: 10, scope: !11107)
!11109 = !DILocation(line: 9056, column: 9, scope: !2786)
!11110 = !DILocation(line: 9057, column: 9, scope: !11107)
!11111 = !DILocation(line: 9059, column: 92, scope: !2786)
!11112 = !DILocation(line: 9059, column: 103, scope: !2786)
!11113 = !DILocation(line: 9059, column: 114, scope: !2786)
!11114 = !DILocation(line: 9059, column: 121, scope: !2786)
!11115 = !DILocation(line: 9059, column: 129, scope: !2786)
!11116 = !DILocation(line: 9059, column: 28, scope: !2786)
!11117 = !DILocation(line: 9059, column: 12, scope: !2786)
!11118 = !DILocation(line: 9059, column: 5, scope: !2786)
!11119 = !DILocation(line: 9060, column: 1, scope: !2786)
!11120 = !DILocation(line: 9069, column: 29, scope: !2791)
!11121 = !DILocation(line: 9069, column: 45, scope: !2791)
!11122 = !DILocation(line: 9071, column: 5, scope: !2791)
!11123 = !DILocation(line: 9071, column: 9, scope: !2791)
!11124 = !DILocation(line: 9072, column: 14, scope: !2791)
!11125 = !DILocation(line: 9074, column: 34, scope: !11126)
!11126 = distinct !DILexicalBlock(scope: !2791, file: !616, line: 9074, column: 9)
!11127 = !DILocation(line: 9074, column: 10, scope: !11126)
!11128 = !DILocation(line: 9074, column: 9, scope: !2791)
!11129 = !DILocation(line: 9075, column: 9, scope: !11126)
!11130 = !DILocation(line: 9077, column: 108, scope: !2791)
!11131 = !DILocation(line: 9077, column: 119, scope: !2791)
!11132 = !DILocation(line: 9077, column: 130, scope: !2791)
!11133 = !DILocation(line: 9077, column: 137, scope: !2791)
!11134 = !DILocation(line: 9077, column: 145, scope: !2791)
!11135 = !DILocation(line: 9077, column: 30, scope: !2791)
!11136 = !DILocation(line: 9077, column: 150, scope: !2791)
!11137 = !DILocation(line: 9077, column: 156, scope: !2791)
!11138 = !DILocation(line: 9077, column: 28, scope: !2791)
!11139 = !DILocation(line: 9077, column: 12, scope: !2791)
!11140 = !DILocation(line: 9077, column: 5, scope: !2791)
!11141 = !DILocation(line: 9078, column: 1, scope: !2791)
!11142 = !DILocation(line: 9088, column: 27, scope: !2796)
!11143 = !DILocation(line: 9088, column: 43, scope: !2796)
!11144 = !DILocation(line: 9090, column: 5, scope: !2796)
!11145 = !DILocation(line: 9090, column: 9, scope: !2796)
!11146 = !DILocation(line: 9091, column: 14, scope: !2796)
!11147 = !DILocation(line: 9093, column: 34, scope: !11148)
!11148 = distinct !DILexicalBlock(scope: !2796, file: !616, line: 9093, column: 9)
!11149 = !DILocation(line: 9093, column: 10, scope: !11148)
!11150 = !DILocation(line: 9093, column: 9, scope: !2796)
!11151 = !DILocation(line: 9094, column: 9, scope: !11148)
!11152 = !DILocation(line: 9096, column: 92, scope: !2796)
!11153 = !DILocation(line: 9096, column: 103, scope: !2796)
!11154 = !DILocation(line: 9096, column: 114, scope: !2796)
!11155 = !DILocation(line: 9096, column: 121, scope: !2796)
!11156 = !DILocation(line: 9096, column: 129, scope: !2796)
!11157 = !DILocation(line: 9096, column: 28, scope: !2796)
!11158 = !DILocation(line: 9096, column: 12, scope: !2796)
!11159 = !DILocation(line: 9096, column: 5, scope: !2796)
!11160 = !DILocation(line: 9097, column: 1, scope: !2796)
!11161 = !DILocation(line: 9106, column: 29, scope: !2801)
!11162 = !DILocation(line: 9106, column: 45, scope: !2801)
!11163 = !DILocation(line: 9108, column: 5, scope: !2801)
!11164 = !DILocation(line: 9108, column: 9, scope: !2801)
!11165 = !DILocation(line: 9109, column: 14, scope: !2801)
!11166 = !DILocation(line: 9111, column: 34, scope: !11167)
!11167 = distinct !DILexicalBlock(scope: !2801, file: !616, line: 9111, column: 9)
!11168 = !DILocation(line: 9111, column: 10, scope: !11167)
!11169 = !DILocation(line: 9111, column: 9, scope: !2801)
!11170 = !DILocation(line: 9112, column: 9, scope: !11167)
!11171 = !DILocation(line: 9114, column: 102, scope: !2801)
!11172 = !DILocation(line: 9114, column: 113, scope: !2801)
!11173 = !DILocation(line: 9114, column: 124, scope: !2801)
!11174 = !DILocation(line: 9114, column: 131, scope: !2801)
!11175 = !DILocation(line: 9114, column: 141, scope: !2801)
!11176 = !DILocation(line: 9114, column: 12, scope: !2801)
!11177 = !DILocation(line: 9114, column: 5, scope: !2801)
!11178 = !DILocation(line: 9115, column: 1, scope: !2801)
!11179 = !DILocation(line: 9125, column: 26, scope: !2806)
!11180 = !DILocation(line: 9125, column: 42, scope: !2806)
!11181 = !DILocation(line: 9127, column: 5, scope: !2806)
!11182 = !DILocation(line: 9127, column: 9, scope: !2806)
!11183 = !DILocation(line: 9128, column: 14, scope: !2806)
!11184 = !DILocation(line: 9130, column: 34, scope: !11185)
!11185 = distinct !DILexicalBlock(scope: !2806, file: !616, line: 9130, column: 9)
!11186 = !DILocation(line: 9130, column: 10, scope: !11185)
!11187 = !DILocation(line: 9130, column: 9, scope: !2806)
!11188 = !DILocation(line: 9131, column: 9, scope: !11185)
!11189 = !DILocation(line: 9133, column: 101, scope: !2806)
!11190 = !DILocation(line: 9133, column: 112, scope: !2806)
!11191 = !DILocation(line: 9133, column: 123, scope: !2806)
!11192 = !DILocation(line: 9133, column: 130, scope: !2806)
!11193 = !DILocation(line: 9133, column: 12, scope: !2806)
!11194 = !DILocation(line: 9133, column: 5, scope: !2806)
!11195 = !DILocation(line: 9134, column: 1, scope: !2806)
!11196 = !DILocation(line: 9144, column: 26, scope: !2811)
!11197 = !DILocation(line: 9144, column: 42, scope: !2811)
!11198 = !DILocation(line: 9146, column: 5, scope: !2811)
!11199 = !DILocation(line: 9146, column: 9, scope: !2811)
!11200 = !DILocation(line: 9147, column: 14, scope: !2811)
!11201 = !DILocation(line: 9149, column: 34, scope: !11202)
!11202 = distinct !DILexicalBlock(scope: !2811, file: !616, line: 9149, column: 9)
!11203 = !DILocation(line: 9149, column: 10, scope: !11202)
!11204 = !DILocation(line: 9149, column: 9, scope: !2811)
!11205 = !DILocation(line: 9150, column: 9, scope: !11202)
!11206 = !DILocation(line: 9152, column: 102, scope: !2811)
!11207 = !DILocation(line: 9152, column: 113, scope: !2811)
!11208 = !DILocation(line: 9152, column: 124, scope: !2811)
!11209 = !DILocation(line: 9152, column: 131, scope: !2811)
!11210 = !DILocation(line: 9152, column: 141, scope: !2811)
!11211 = !DILocation(line: 9152, column: 12, scope: !2811)
!11212 = !DILocation(line: 9152, column: 5, scope: !2811)
!11213 = !DILocation(line: 9153, column: 1, scope: !2811)
!11214 = !DILocation(line: 9216, column: 26, scope: !2816)
!11215 = !DILocation(line: 9216, column: 42, scope: !2816)
!11216 = !DILocation(line: 9218, column: 5, scope: !2816)
!11217 = !DILocation(line: 9218, column: 9, scope: !2816)
!11218 = !DILocation(line: 9218, column: 13, scope: !2816)
!11219 = !DILocation(line: 9219, column: 5, scope: !2816)
!11220 = !DILocation(line: 9219, column: 20, scope: !2816)
!11221 = !DILocation(line: 9221, column: 34, scope: !11222)
!11222 = distinct !DILexicalBlock(scope: !2816, file: !616, line: 9221, column: 9)
!11223 = !DILocation(line: 9221, column: 10, scope: !11222)
!11224 = !DILocation(line: 9221, column: 9, scope: !2816)
!11225 = !DILocation(line: 9222, column: 9, scope: !11222)
!11226 = !DILocation(line: 9223, column: 7, scope: !2841)
!11227 = !DILocation(line: 9223, column: 22, scope: !2841)
!11228 = !DILocation(line: 9223, column: 37, scope: !2841)
!11229 = !DILocation(line: 9223, column: 35, scope: !2841)
!11230 = !DILocation(line: 9224, column: 20, scope: !2841)
!11231 = !DILocation(line: 9224, column: 11, scope: !2841)
!11232 = !DILocation(line: 9224, column: 9, scope: !2841)
!11233 = !DILocation(line: 9225, column: 26, scope: !2841)
!11234 = !DILocation(line: 9225, column: 5, scope: !2841)
!11235 = !DILocation(line: 9225, column: 34, scope: !2816)
!11236 = !DILocation(line: 9226, column: 9, scope: !11237)
!11237 = distinct !DILexicalBlock(scope: !2816, file: !616, line: 9226, column: 9)
!11238 = !DILocation(line: 9226, column: 13, scope: !11237)
!11239 = !DILocation(line: 9226, column: 9, scope: !2816)
!11240 = !DILocation(line: 9227, column: 16, scope: !11237)
!11241 = !DILocation(line: 9227, column: 9, scope: !11237)
!11242 = !DILocation(line: 9229, column: 12, scope: !2816)
!11243 = !DILocation(line: 9229, column: 5, scope: !2816)
!11244 = !DILocation(line: 9230, column: 1, scope: !2816)
!11245 = !DILocation(line: 9246, column: 25, scope: !2852)
!11246 = !DILocation(line: 9246, column: 41, scope: !2852)
!11247 = !DILocation(line: 9246, column: 57, scope: !2852)
!11248 = !DILocation(line: 9249, column: 5, scope: !2852)
!11249 = !DILocation(line: 9249, column: 12, scope: !2852)
!11250 = !DILocation(line: 9250, column: 5, scope: !2852)
!11251 = !DILocation(line: 9250, column: 9, scope: !2852)
!11252 = !DILocation(line: 9251, column: 5, scope: !2852)
!11253 = !DILocation(line: 9251, column: 15, scope: !2852)
!11254 = !DILocation(line: 9252, column: 5, scope: !2852)
!11255 = !DILocation(line: 9252, column: 20, scope: !2852)
!11256 = !DILocation(line: 9254, column: 5, scope: !2852)
!11257 = !DILocation(line: 9255, column: 10, scope: !2852)
!11258 = !DILocation(line: 9255, column: 24, scope: !2852)
!11259 = !DILocation(line: 9257, column: 10, scope: !2852)
!11260 = !DILocation(line: 9257, column: 19, scope: !2852)
!11261 = !DILocation(line: 9259, column: 45, scope: !11262)
!11262 = distinct !DILexicalBlock(scope: !2852, file: !616, line: 9259, column: 9)
!11263 = !DILocation(line: 9259, column: 51, scope: !11262)
!11264 = !DILocation(line: 9259, column: 10, scope: !11262)
!11265 = !DILocation(line: 9259, column: 9, scope: !2852)
!11266 = !DILocation(line: 9262, column: 9, scope: !11262)
!11267 = !DILocation(line: 9264, column: 7, scope: !2862)
!11268 = !DILocation(line: 9264, column: 22, scope: !2862)
!11269 = !DILocation(line: 9264, column: 37, scope: !2862)
!11270 = !DILocation(line: 9264, column: 35, scope: !2862)
!11271 = !DILocation(line: 9266, column: 14, scope: !11272)
!11272 = distinct !DILexicalBlock(scope: !2862, file: !616, line: 9266, column: 9)
!11273 = !DILocation(line: 9266, column: 17, scope: !11272)
!11274 = !DILocation(line: 9266, column: 9, scope: !2862)
!11275 = !DILocation(line: 9274, column: 32, scope: !11276)
!11276 = distinct !DILexicalBlock(scope: !11272, file: !616, line: 9266, column: 24)
!11277 = !DILocation(line: 9274, column: 18, scope: !11276)
!11278 = !DILocation(line: 9274, column: 16, scope: !11276)
!11279 = !DILocation(line: 9275, column: 5, scope: !11276)
!11280 = !DILocation(line: 9278, column: 31, scope: !11272)
!11281 = !DILocation(line: 9278, column: 18, scope: !11272)
!11282 = !DILocation(line: 9278, column: 16, scope: !11272)
!11283 = !DILocation(line: 9279, column: 26, scope: !2862)
!11284 = !DILocation(line: 9279, column: 5, scope: !2862)
!11285 = !DILocation(line: 9279, column: 34, scope: !2852)
!11286 = !DILocation(line: 9281, column: 9, scope: !11287)
!11287 = distinct !DILexicalBlock(scope: !2852, file: !616, line: 9281, column: 9)
!11288 = !DILocation(line: 9281, column: 9, scope: !2852)
!11289 = !DILocation(line: 9282, column: 24, scope: !11290)
!11290 = distinct !DILexicalBlock(scope: !11287, file: !616, line: 9281, column: 17)
!11291 = !DILocation(line: 9282, column: 22, scope: !11290)
!11292 = !DILocation(line: 9283, column: 9, scope: !11290)
!11293 = !DILocation(line: 9286, column: 20, scope: !2852)
!11294 = !DILocation(line: 9286, column: 18, scope: !2852)
!11295 = !DILocation(line: 9286, column: 5, scope: !2852)
!11296 = !DILocation(line: 9289, column: 5, scope: !2852)
!11297 = !DILocation(line: 9290, column: 12, scope: !2852)
!11298 = !DILocation(line: 9290, column: 5, scope: !2852)
!11299 = !DILocation(line: 9291, column: 1, scope: !2852)
!11300 = !DILocation(line: 9717, column: 25, scope: !2863)
!11301 = !DILocation(line: 9717, column: 41, scope: !2863)
!11302 = !DILocation(line: 9719, column: 5, scope: !2863)
!11303 = !DILocation(line: 9719, column: 15, scope: !2863)
!11304 = !DILocation(line: 9720, column: 5, scope: !2863)
!11305 = !DILocation(line: 9720, column: 9, scope: !2863)
!11306 = !DILocation(line: 9721, column: 5, scope: !2863)
!11307 = !DILocation(line: 9721, column: 10, scope: !2863)
!11308 = !DILocation(line: 9722, column: 5, scope: !2863)
!11309 = !DILocation(line: 9722, column: 12, scope: !2863)
!11310 = !DILocation(line: 9724, column: 34, scope: !11311)
!11311 = distinct !DILexicalBlock(scope: !2863, file: !616, line: 9724, column: 9)
!11312 = !DILocation(line: 9724, column: 10, scope: !11311)
!11313 = !DILocation(line: 9724, column: 9, scope: !2863)
!11314 = !DILocation(line: 9725, column: 9, scope: !11311)
!11315 = !DILocation(line: 9727, column: 7, scope: !2863)
!11316 = !DILocation(line: 9727, column: 28, scope: !2863)
!11317 = !DILocation(line: 9728, column: 19, scope: !2863)
!11318 = !DILocation(line: 9728, column: 25, scope: !2863)
!11319 = !DILocation(line: 9728, column: 11, scope: !2863)
!11320 = !DILocation(line: 9728, column: 9, scope: !2863)
!11321 = !DILocation(line: 9729, column: 9, scope: !11322)
!11322 = distinct !DILexicalBlock(scope: !2863, file: !616, line: 9729, column: 9)
!11323 = !DILocation(line: 9729, column: 13, scope: !11322)
!11324 = !DILocation(line: 9729, column: 9, scope: !2863)
!11325 = !DILocation(line: 9730, column: 15, scope: !11326)
!11326 = distinct !DILexicalBlock(scope: !11327, file: !616, line: 9730, column: 13)
!11327 = distinct !DILexicalBlock(scope: !11322, file: !616, line: 9729, column: 19)
!11328 = !DILocation(line: 9730, column: 14, scope: !11326)
!11329 = !DILocation(line: 9730, column: 13, scope: !11326)
!11330 = !DILocation(line: 9730, column: 13, scope: !11327)
!11331 = !DILocation(line: 9731, column: 13, scope: !11332)
!11332 = distinct !DILexicalBlock(scope: !11326, file: !616, line: 9730, column: 37)
!11333 = !DILocation(line: 9732, column: 13, scope: !11332)
!11334 = !DILocation(line: 9735, column: 66, scope: !11335)
!11335 = distinct !DILexicalBlock(scope: !11326, file: !616, line: 9734, column: 14)
!11336 = !DILocation(line: 9735, column: 13, scope: !11335)
!11337 = !DILocation(line: 9739, column: 9, scope: !2876)
!11338 = !DILocation(line: 9739, column: 13, scope: !2876)
!11339 = !DILocation(line: 9739, column: 9, scope: !2863)
!11340 = !DILocation(line: 9740, column: 9, scope: !2875)
!11341 = !DILocation(line: 9740, column: 15, scope: !2875)
!11342 = !DILocation(line: 9740, column: 34, scope: !2875)
!11343 = !DILocation(line: 9740, column: 21, scope: !2875)
!11344 = !DILocation(line: 9741, column: 13, scope: !11345)
!11345 = distinct !DILexicalBlock(scope: !2875, file: !616, line: 9741, column: 13)
!11346 = !DILocation(line: 9741, column: 17, scope: !11345)
!11347 = !DILocation(line: 9741, column: 13, scope: !2875)
!11348 = !DILocation(line: 9742, column: 20, scope: !11345)
!11349 = !DILocation(line: 9742, column: 13, scope: !11345)
!11350 = !DILocation(line: 9743, column: 17, scope: !2875)
!11351 = !DILocation(line: 9743, column: 23, scope: !2875)
!11352 = !DILocation(line: 9743, column: 28, scope: !2875)
!11353 = !DILocation(line: 9743, column: 9, scope: !2875)
!11354 = !DILocation(line: 9744, column: 51, scope: !2875)
!11355 = !DILocation(line: 9744, column: 56, scope: !2875)
!11356 = !DILocation(line: 9744, column: 59, scope: !2875)
!11357 = !DILocation(line: 9744, column: 18, scope: !2875)
!11358 = !DILocation(line: 9744, column: 16, scope: !2875)
!11359 = !DILocation(line: 9745, column: 20, scope: !2875)
!11360 = !DILocation(line: 9745, column: 9, scope: !2875)
!11361 = !DILocation(line: 9746, column: 5, scope: !2876)
!11362 = !DILocation(line: 9746, column: 5, scope: !11363)
!11363 = !DILexicalBlockFile(scope: !2876, file: !616, discriminator: 1)
!11364 = !DILocation(line: 9746, column: 5, scope: !2875)
!11365 = !DILocation(line: 9748, column: 51, scope: !2876)
!11366 = !DILocation(line: 9748, column: 59, scope: !2876)
!11367 = !DILocation(line: 9748, column: 62, scope: !2876)
!11368 = !DILocation(line: 9748, column: 18, scope: !2876)
!11369 = !DILocation(line: 9748, column: 16, scope: !2876)
!11370 = !DILocation(line: 9749, column: 12, scope: !2863)
!11371 = !DILocation(line: 9749, column: 5, scope: !2863)
!11372 = !DILocation(line: 9750, column: 1, scope: !2863)
!11373 = !DILocation(line: 10263, column: 25, scope: !2903)
!11374 = !DILocation(line: 10263, column: 41, scope: !2903)
!11375 = !DILocation(line: 10265, column: 5, scope: !2903)
!11376 = !DILocation(line: 10265, column: 15, scope: !2903)
!11377 = !DILocation(line: 10266, column: 5, scope: !2903)
!11378 = !DILocation(line: 10266, column: 9, scope: !2903)
!11379 = !DILocation(line: 10268, column: 33, scope: !2911)
!11380 = !DILocation(line: 10268, column: 9, scope: !2911)
!11381 = !DILocation(line: 10268, column: 9, scope: !2903)
!11382 = !DILocation(line: 10269, column: 9, scope: !2910)
!11383 = !DILocation(line: 10269, column: 14, scope: !2910)
!11384 = !DILocation(line: 10271, column: 11, scope: !2910)
!11385 = !DILocation(line: 10271, column: 32, scope: !2910)
!11386 = !DILocation(line: 10272, column: 25, scope: !2910)
!11387 = !DILocation(line: 10272, column: 17, scope: !2910)
!11388 = !DILocation(line: 10272, column: 15, scope: !2910)
!11389 = !DILocation(line: 10273, column: 13, scope: !11390)
!11390 = distinct !DILexicalBlock(scope: !2910, file: !616, line: 10273, column: 13)
!11391 = !DILocation(line: 10273, column: 19, scope: !11390)
!11392 = !DILocation(line: 10273, column: 25, scope: !11390)
!11393 = !DILocation(line: 10273, column: 30, scope: !11394)
!11394 = !DILexicalBlockFile(scope: !11390, file: !616, discriminator: 1)
!11395 = !DILocation(line: 10273, column: 29, scope: !11390)
!11396 = !DILocation(line: 10273, column: 51, scope: !11390)
!11397 = !DILocation(line: 10273, column: 13, scope: !2910)
!11398 = !DILocation(line: 10274, column: 13, scope: !11390)
!11399 = !DILocation(line: 10276, column: 38, scope: !11390)
!11400 = !DILocation(line: 10276, column: 22, scope: !11390)
!11401 = !DILocation(line: 10276, column: 20, scope: !11390)
!11402 = !DILocation(line: 10277, column: 5, scope: !2911)
!11403 = !DILocation(line: 10277, column: 5, scope: !2910)
!11404 = !DILocation(line: 10278, column: 12, scope: !2903)
!11405 = !DILocation(line: 10279, column: 1, scope: !2903)
!11406 = !DILocation(line: 10278, column: 5, scope: !2903)
!11407 = !DILocation(line: 9481, column: 27, scope: !2916)
!11408 = !DILocation(line: 9481, column: 43, scope: !2916)
!11409 = !DILocation(line: 9483, column: 5, scope: !2916)
!11410 = !DILocation(line: 9483, column: 15, scope: !2916)
!11411 = !DILocation(line: 9484, column: 5, scope: !2916)
!11412 = !DILocation(line: 9484, column: 9, scope: !2916)
!11413 = !DILocation(line: 9484, column: 15, scope: !2916)
!11414 = !DILocation(line: 9486, column: 33, scope: !2925)
!11415 = !DILocation(line: 9486, column: 9, scope: !2925)
!11416 = !DILocation(line: 9486, column: 9, scope: !2916)
!11417 = !DILocation(line: 9488, column: 9, scope: !2924)
!11418 = !DILocation(line: 9488, column: 14, scope: !2924)
!11419 = !DILocation(line: 9490, column: 11, scope: !2924)
!11420 = !DILocation(line: 9490, column: 32, scope: !2924)
!11421 = !DILocation(line: 9491, column: 27, scope: !2924)
!11422 = !DILocation(line: 9491, column: 31, scope: !2924)
!11423 = !DILocation(line: 9491, column: 17, scope: !2924)
!11424 = !DILocation(line: 9491, column: 15, scope: !2924)
!11425 = !DILocation(line: 9492, column: 13, scope: !11426)
!11426 = distinct !DILexicalBlock(scope: !2924, file: !616, line: 9492, column: 13)
!11427 = !DILocation(line: 9492, column: 19, scope: !11426)
!11428 = !DILocation(line: 9492, column: 25, scope: !11426)
!11429 = !DILocation(line: 9492, column: 30, scope: !11430)
!11430 = !DILexicalBlockFile(scope: !11426, file: !616, discriminator: 1)
!11431 = !DILocation(line: 9492, column: 29, scope: !11426)
!11432 = !DILocation(line: 9492, column: 51, scope: !11426)
!11433 = !DILocation(line: 9492, column: 13, scope: !2924)
!11434 = !DILocation(line: 9493, column: 13, scope: !11426)
!11435 = !DILocation(line: 9495, column: 38, scope: !11426)
!11436 = !DILocation(line: 9495, column: 22, scope: !11426)
!11437 = !DILocation(line: 9495, column: 20, scope: !11426)
!11438 = !DILocation(line: 9496, column: 5, scope: !2925)
!11439 = !DILocation(line: 9496, column: 5, scope: !2924)
!11440 = !DILocation(line: 9497, column: 12, scope: !2916)
!11441 = !DILocation(line: 9498, column: 1, scope: !2916)
!11442 = !DILocation(line: 9497, column: 5, scope: !2916)
!11443 = !DILocation(line: 9511, column: 26, scope: !2930)
!11444 = !DILocation(line: 9511, column: 42, scope: !2930)
!11445 = !DILocation(line: 9511, column: 58, scope: !2930)
!11446 = !DILocation(line: 9513, column: 5, scope: !2930)
!11447 = !DILocation(line: 9513, column: 12, scope: !2930)
!11448 = !DILocation(line: 9514, column: 5, scope: !2930)
!11449 = !DILocation(line: 9514, column: 15, scope: !2930)
!11450 = !DILocation(line: 9515, column: 5, scope: !2930)
!11451 = !DILocation(line: 9515, column: 9, scope: !2930)
!11452 = !DILocation(line: 9518, column: 5, scope: !2930)
!11453 = !DILocation(line: 9519, column: 10, scope: !2930)
!11454 = !DILocation(line: 9519, column: 24, scope: !2930)
!11455 = !DILocation(line: 9521, column: 10, scope: !2930)
!11456 = !DILocation(line: 9521, column: 19, scope: !2930)
!11457 = !DILocation(line: 9523, column: 44, scope: !2940)
!11458 = !DILocation(line: 9523, column: 50, scope: !2940)
!11459 = !DILocation(line: 9523, column: 9, scope: !2940)
!11460 = !DILocation(line: 9523, column: 9, scope: !2930)
!11461 = !DILocation(line: 9526, column: 5, scope: !2939)
!11462 = !DILocation(line: 9526, column: 10, scope: !2939)
!11463 = !DILocation(line: 9528, column: 7, scope: !2939)
!11464 = !DILocation(line: 9528, column: 28, scope: !2939)
!11465 = !DILocation(line: 9530, column: 14, scope: !11466)
!11466 = distinct !DILexicalBlock(scope: !2939, file: !616, line: 9530, column: 9)
!11467 = !DILocation(line: 9530, column: 17, scope: !11466)
!11468 = !DILocation(line: 9530, column: 9, scope: !2939)
!11469 = !DILocation(line: 9531, column: 32, scope: !11466)
!11470 = !DILocation(line: 9531, column: 36, scope: !11466)
!11471 = !DILocation(line: 9531, column: 17, scope: !11466)
!11472 = !DILocation(line: 9531, column: 15, scope: !11466)
!11473 = !DILocation(line: 9531, column: 9, scope: !11466)
!11474 = !DILocation(line: 9534, column: 31, scope: !11466)
!11475 = !DILocation(line: 9534, column: 39, scope: !11466)
!11476 = !DILocation(line: 9534, column: 17, scope: !11466)
!11477 = !DILocation(line: 9534, column: 15, scope: !11466)
!11478 = !DILocation(line: 9535, column: 9, scope: !11479)
!11479 = distinct !DILexicalBlock(scope: !2939, file: !616, line: 9535, column: 9)
!11480 = !DILocation(line: 9535, column: 15, scope: !11479)
!11481 = !DILocation(line: 9535, column: 21, scope: !11479)
!11482 = !DILocation(line: 9535, column: 26, scope: !11483)
!11483 = !DILexicalBlockFile(scope: !11479, file: !616, discriminator: 1)
!11484 = !DILocation(line: 9535, column: 25, scope: !11479)
!11485 = !DILocation(line: 9535, column: 47, scope: !11479)
!11486 = !DILocation(line: 9535, column: 9, scope: !2939)
!11487 = !DILocation(line: 9536, column: 15, scope: !11488)
!11488 = distinct !DILexicalBlock(scope: !11489, file: !616, line: 9536, column: 13)
!11489 = distinct !DILexicalBlock(scope: !11479, file: !616, line: 9535, column: 53)
!11490 = !DILocation(line: 9536, column: 14, scope: !11488)
!11491 = !DILocation(line: 9536, column: 36, scope: !11488)
!11492 = !DILocation(line: 9536, column: 13, scope: !11489)
!11493 = !DILocation(line: 9538, column: 13, scope: !11488)
!11494 = !DILocation(line: 9540, column: 22, scope: !11488)
!11495 = !DILocation(line: 9540, column: 20, scope: !11488)
!11496 = !DILocation(line: 9541, column: 5, scope: !11489)
!11497 = !DILocation(line: 9543, column: 34, scope: !11479)
!11498 = !DILocation(line: 9543, column: 18, scope: !11479)
!11499 = !DILocation(line: 9543, column: 16, scope: !11479)
!11500 = !DILocation(line: 9544, column: 5, scope: !2940)
!11501 = !DILocation(line: 9544, column: 5, scope: !2939)
!11502 = !DILocation(line: 9545, column: 5, scope: !2930)
!11503 = !DILocation(line: 9546, column: 12, scope: !2930)
!11504 = !DILocation(line: 9547, column: 1, scope: !2930)
!11505 = !DILocation(line: 9546, column: 5, scope: !2930)
!11506 = !DILocation(line: 10363, column: 23, scope: !2941)
!11507 = !DILocation(line: 10363, column: 39, scope: !2941)
!11508 = !DILocation(line: 10365, column: 5, scope: !2941)
!11509 = !DILocation(line: 10369, column: 1, scope: !2941)
!11510 = !DILocation(line: 10474, column: 28, scope: !2945)
!11511 = !DILocation(line: 10474, column: 44, scope: !2945)
!11512 = !DILocation(line: 10476, column: 5, scope: !2945)
!11513 = !DILocation(line: 10476, column: 12, scope: !2945)
!11514 = !DILocation(line: 10477, column: 20, scope: !11515)
!11515 = distinct !DILexicalBlock(scope: !2945, file: !616, line: 10477, column: 9)
!11516 = !DILocation(line: 10477, column: 9, scope: !11515)
!11517 = !DILocation(line: 10477, column: 31, scope: !11515)
!11518 = !DILocation(line: 10477, column: 9, scope: !2945)
!11519 = !DILocation(line: 10478, column: 25, scope: !11520)
!11520 = distinct !DILexicalBlock(scope: !11515, file: !616, line: 10477, column: 36)
!11521 = !DILocation(line: 10478, column: 9, scope: !11520)
!11522 = !DILocation(line: 10479, column: 9, scope: !11520)
!11523 = !DILocation(line: 10481, column: 44, scope: !11515)
!11524 = !{!11525, !11525, i64 0}
!11525 = !{!"double", !3842, i64 0}
!11526 = !DILocation(line: 10481, column: 56, scope: !11515)
!11527 = !DILocation(line: 10481, column: 68, scope: !11515)
!11528 = !DILocation(line: 10481, column: 16, scope: !11515)
!11529 = !DILocation(line: 10481, column: 9, scope: !11515)
!11530 = !DILocation(line: 10482, column: 1, scope: !2945)
!11531 = !DILocation(line: 10890, column: 25, scope: !2951)
!11532 = !DILocation(line: 10890, column: 41, scope: !2951)
!11533 = !DILocation(line: 10892, column: 5, scope: !2951)
!11534 = !DILocation(line: 10892, column: 16, scope: !2951)
!11535 = !DILocation(line: 10893, column: 5, scope: !2951)
!11536 = !DILocation(line: 10893, column: 15, scope: !2951)
!11537 = !DILocation(line: 10894, column: 5, scope: !2951)
!11538 = !DILocation(line: 10894, column: 9, scope: !2951)
!11539 = !DILocation(line: 10897, column: 34, scope: !11540)
!11540 = distinct !DILexicalBlock(scope: !2951, file: !616, line: 10897, column: 9)
!11541 = !DILocation(line: 10897, column: 10, scope: !11540)
!11542 = !DILocation(line: 10897, column: 9, scope: !2951)
!11543 = !DILocation(line: 10898, column: 9, scope: !11540)
!11544 = !DILocation(line: 10899, column: 9, scope: !11545)
!11545 = distinct !DILexicalBlock(scope: !2951, file: !616, line: 10899, column: 9)
!11546 = !DILocation(line: 10899, column: 14, scope: !11545)
!11547 = !DILocation(line: 10899, column: 9, scope: !2951)
!11548 = !DILocation(line: 10900, column: 29, scope: !11545)
!11549 = !DILocation(line: 10900, column: 16, scope: !11545)
!11550 = !DILocation(line: 10900, column: 9, scope: !11545)
!11551 = !DILocation(line: 10902, column: 52, scope: !2951)
!11552 = !DILocation(line: 10902, column: 14, scope: !2951)
!11553 = !DILocation(line: 10902, column: 12, scope: !2951)
!11554 = !DILocation(line: 10903, column: 9, scope: !11555)
!11555 = distinct !DILexicalBlock(scope: !2951, file: !616, line: 10903, column: 9)
!11556 = !DILocation(line: 10903, column: 16, scope: !11555)
!11557 = !DILocation(line: 10903, column: 9, scope: !2951)
!11558 = !DILocation(line: 10904, column: 9, scope: !11555)
!11559 = !DILocation(line: 10906, column: 60, scope: !2951)
!11560 = !DILocation(line: 10906, column: 42, scope: !2951)
!11561 = !DILocation(line: 10906, column: 70, scope: !2951)
!11562 = !DILocation(line: 10906, column: 40, scope: !2951)
!11563 = !DILocation(line: 10907, column: 56, scope: !2951)
!11564 = !DILocation(line: 10907, column: 41, scope: !2951)
!11565 = !DILocation(line: 10907, column: 66, scope: !2951)
!11566 = !{!3898, !3894, i64 16}
!11567 = !DILocation(line: 10906, column: 11, scope: !2951)
!11568 = !DILocation(line: 10906, column: 9, scope: !2951)
!11569 = !DILocation(line: 10908, column: 9, scope: !2961)
!11570 = !DILocation(line: 10908, column: 13, scope: !2961)
!11571 = !DILocation(line: 10908, column: 9, scope: !2951)
!11572 = !DILocation(line: 10909, column: 9, scope: !2960)
!11573 = !DILocation(line: 10909, column: 14, scope: !11574)
!11574 = !DILexicalBlockFile(scope: !2959, file: !616, discriminator: 1)
!11575 = !DILocation(line: 10909, column: 24, scope: !2959)
!11576 = !DILocation(line: 10909, column: 54, scope: !2959)
!11577 = !DILocation(line: 10909, column: 71, scope: !11578)
!11578 = distinct !DILexicalBlock(scope: !2959, file: !616, line: 10909, column: 68)
!11579 = !DILocation(line: 10909, column: 88, scope: !11578)
!11580 = !DILocation(line: 10909, column: 68, scope: !11578)
!11581 = !DILocation(line: 10909, column: 98, scope: !11578)
!11582 = !DILocation(line: 10909, column: 68, scope: !2959)
!11583 = !DILocation(line: 10909, column: 68, scope: !11584)
!11584 = !DILexicalBlockFile(scope: !2959, file: !616, discriminator: 2)
!11585 = !DILocation(line: 10909, column: 129, scope: !11586)
!11586 = !DILexicalBlockFile(scope: !11578, file: !616, discriminator: 3)
!11587 = !DILocation(line: 10909, column: 147, scope: !11578)
!11588 = !DILocation(line: 10909, column: 157, scope: !11578)
!11589 = !DILocation(line: 10909, column: 182, scope: !11578)
!11590 = !DILocation(line: 10909, column: 113, scope: !11578)
!11591 = !DILocation(line: 10909, column: 201, scope: !11592)
!11592 = !DILexicalBlockFile(scope: !2960, file: !616, discriminator: 4)
!11593 = !DILocation(line: 10909, column: 201, scope: !2959)
!11594 = !DILocation(line: 10909, column: 201, scope: !11595)
!11595 = !DILexicalBlockFile(scope: !2959, file: !616, discriminator: 5)
!11596 = !DILocation(line: 10910, column: 9, scope: !2960)
!11597 = !DILocation(line: 10912, column: 12, scope: !2951)
!11598 = !DILocation(line: 10912, column: 5, scope: !2951)
!11599 = !DILocation(line: 10913, column: 1, scope: !2951)
!11600 = !DILocation(line: 10507, column: 28, scope: !2962)
!11601 = !DILocation(line: 10507, column: 44, scope: !2962)
!11602 = !DILocation(line: 10510, column: 5, scope: !2962)
!11603 = !DILocation(line: 10510, column: 11, scope: !2962)
!11604 = !DILocation(line: 10510, column: 17, scope: !2962)
!11605 = !DILocation(line: 10510, column: 23, scope: !2962)
!11606 = !DILocation(line: 10511, column: 34, scope: !11607)
!11607 = distinct !DILexicalBlock(scope: !2962, file: !616, line: 10511, column: 9)
!11608 = !DILocation(line: 10511, column: 10, scope: !11607)
!11609 = !DILocation(line: 10511, column: 9, scope: !2962)
!11610 = !DILocation(line: 10515, column: 9, scope: !11607)
!11611 = !DILocation(line: 10516, column: 19, scope: !11612)
!11612 = distinct !DILexicalBlock(scope: !2962, file: !616, line: 10516, column: 9)
!11613 = !DILocation(line: 10516, column: 25, scope: !11612)
!11614 = !DILocation(line: 10516, column: 31, scope: !11612)
!11615 = !DILocation(line: 10516, column: 9, scope: !11612)
!11616 = !DILocation(line: 10516, column: 37, scope: !11612)
!11617 = !DILocation(line: 10516, column: 9, scope: !2962)
!11618 = !DILocation(line: 10517, column: 16, scope: !11612)
!11619 = !DILocation(line: 10517, column: 9, scope: !11612)
!11620 = !DILocation(line: 10518, column: 58, scope: !2962)
!11621 = !DILocation(line: 10518, column: 5, scope: !2962)
!11622 = !DILocation(line: 10519, column: 1, scope: !2962)
!11623 = !DILocation(line: 10528, column: 28, scope: !2969)
!11624 = !DILocation(line: 10528, column: 44, scope: !2969)
!11625 = !DILocation(line: 10530, column: 5, scope: !2969)
!11626 = !DILocation(line: 10530, column: 11, scope: !2969)
!11627 = !DILocation(line: 10530, column: 17, scope: !2969)
!11628 = !DILocation(line: 10530, column: 23, scope: !2969)
!11629 = !DILocation(line: 10531, column: 34, scope: !11630)
!11630 = distinct !DILexicalBlock(scope: !2969, file: !616, line: 10531, column: 9)
!11631 = !DILocation(line: 10531, column: 10, scope: !11630)
!11632 = !DILocation(line: 10531, column: 9, scope: !2969)
!11633 = !DILocation(line: 10535, column: 9, scope: !11630)
!11634 = !DILocation(line: 10536, column: 19, scope: !11635)
!11635 = distinct !DILexicalBlock(scope: !2969, file: !616, line: 10536, column: 9)
!11636 = !DILocation(line: 10536, column: 25, scope: !11635)
!11637 = !DILocation(line: 10536, column: 31, scope: !11635)
!11638 = !DILocation(line: 10536, column: 9, scope: !11635)
!11639 = !DILocation(line: 10536, column: 37, scope: !11635)
!11640 = !DILocation(line: 10536, column: 9, scope: !2969)
!11641 = !DILocation(line: 10537, column: 16, scope: !11635)
!11642 = !DILocation(line: 10537, column: 9, scope: !11635)
!11643 = !DILocation(line: 10538, column: 58, scope: !2969)
!11644 = !DILocation(line: 10538, column: 5, scope: !2969)
!11645 = !DILocation(line: 10539, column: 1, scope: !2969)
!11646 = !DILocation(line: 10548, column: 28, scope: !2976)
!11647 = !DILocation(line: 10548, column: 44, scope: !2976)
!11648 = !DILocation(line: 10550, column: 5, scope: !2976)
!11649 = !DILocation(line: 10550, column: 11, scope: !2976)
!11650 = !DILocation(line: 10550, column: 17, scope: !2976)
!11651 = !DILocation(line: 10550, column: 23, scope: !2976)
!11652 = !DILocation(line: 10551, column: 9, scope: !11653)
!11653 = distinct !DILexicalBlock(scope: !2976, file: !616, line: 10551, column: 9)
!11654 = !DILocation(line: 10551, column: 40, scope: !11653)
!11655 = !DILocation(line: 10551, column: 9, scope: !2976)
!11656 = !DILocation(line: 10552, column: 16, scope: !11653)
!11657 = !DILocation(line: 10552, column: 9, scope: !11653)
!11658 = !DILocation(line: 10553, column: 58, scope: !2976)
!11659 = !DILocation(line: 10553, column: 42, scope: !2976)
!11660 = !DILocation(line: 10554, column: 51, scope: !2976)
!11661 = !DILocation(line: 10554, column: 35, scope: !2976)
!11662 = !DILocation(line: 10555, column: 51, scope: !2976)
!11663 = !DILocation(line: 10555, column: 35, scope: !2976)
!11664 = !DILocation(line: 10553, column: 12, scope: !2976)
!11665 = !DILocation(line: 10553, column: 5, scope: !2976)
!11666 = !DILocation(line: 10556, column: 1, scope: !2976)
!11667 = !DILocation(line: 10565, column: 28, scope: !2983)
!11668 = !DILocation(line: 10565, column: 44, scope: !2983)
!11669 = !DILocation(line: 10567, column: 5, scope: !2983)
!11670 = !DILocation(line: 10567, column: 11, scope: !2983)
!11671 = !DILocation(line: 10567, column: 17, scope: !2983)
!11672 = !DILocation(line: 10567, column: 23, scope: !2983)
!11673 = !DILocation(line: 10568, column: 9, scope: !11674)
!11674 = distinct !DILexicalBlock(scope: !2983, file: !616, line: 10568, column: 9)
!11675 = !DILocation(line: 10568, column: 40, scope: !11674)
!11676 = !DILocation(line: 10568, column: 9, scope: !2983)
!11677 = !DILocation(line: 10569, column: 16, scope: !11674)
!11678 = !DILocation(line: 10569, column: 9, scope: !11674)
!11679 = !DILocation(line: 10570, column: 58, scope: !2983)
!11680 = !DILocation(line: 10570, column: 42, scope: !2983)
!11681 = !DILocation(line: 10571, column: 51, scope: !2983)
!11682 = !DILocation(line: 10571, column: 35, scope: !2983)
!11683 = !DILocation(line: 10572, column: 51, scope: !2983)
!11684 = !DILocation(line: 10572, column: 35, scope: !2983)
!11685 = !DILocation(line: 10570, column: 12, scope: !2983)
!11686 = !DILocation(line: 10570, column: 5, scope: !2983)
!11687 = !DILocation(line: 10573, column: 1, scope: !2983)
!11688 = !DILocation(line: 10665, column: 26, scope: !2990)
!11689 = !DILocation(line: 10665, column: 42, scope: !2990)
!11690 = !DILocation(line: 10665, column: 58, scope: !2990)
!11691 = !DILocation(line: 10667, column: 5, scope: !2990)
!11692 = !DILocation(line: 10667, column: 12, scope: !2990)
!11693 = !DILocation(line: 10668, column: 5, scope: !2990)
!11694 = !DILocation(line: 10668, column: 12, scope: !2990)
!11695 = !DILocation(line: 10669, column: 5, scope: !2990)
!11696 = !DILocation(line: 10669, column: 15, scope: !2990)
!11697 = !DILocation(line: 10670, column: 5, scope: !2990)
!11698 = !DILocation(line: 10670, column: 9, scope: !2990)
!11699 = !DILocation(line: 10671, column: 5, scope: !2990)
!11700 = !DILocation(line: 10671, column: 9, scope: !2990)
!11701 = !DILocation(line: 10672, column: 5, scope: !2990)
!11702 = !DILocation(line: 10672, column: 9, scope: !2990)
!11703 = !DILocation(line: 10673, column: 5, scope: !2990)
!11704 = !DILocation(line: 10673, column: 15, scope: !2990)
!11705 = !DILocation(line: 10677, column: 5, scope: !2990)
!11706 = !DILocation(line: 10678, column: 10, scope: !2990)
!11707 = !DILocation(line: 10678, column: 24, scope: !2990)
!11708 = !DILocation(line: 10679, column: 10, scope: !2990)
!11709 = !DILocation(line: 10679, column: 19, scope: !2990)
!11710 = !DILocation(line: 10680, column: 5, scope: !2990)
!11711 = !DILocation(line: 10681, column: 5, scope: !2990)
!11712 = !DILocation(line: 10682, column: 45, scope: !11713)
!11713 = distinct !DILexicalBlock(scope: !2990, file: !616, line: 10682, column: 9)
!11714 = !DILocation(line: 10682, column: 51, scope: !11713)
!11715 = !DILocation(line: 10682, column: 10, scope: !11713)
!11716 = !DILocation(line: 10682, column: 9, scope: !2990)
!11717 = !DILocation(line: 10688, column: 9, scope: !11713)
!11718 = !DILocation(line: 10690, column: 57, scope: !11719)
!11719 = distinct !DILexicalBlock(scope: !2990, file: !616, line: 10690, column: 9)
!11720 = !DILocation(line: 10690, column: 61, scope: !11719)
!11721 = !DILocation(line: 10690, column: 9, scope: !11719)
!11722 = !DILocation(line: 10690, column: 9, scope: !2990)
!11723 = !DILocation(line: 10691, column: 9, scope: !11719)
!11724 = !DILocation(line: 10693, column: 7, scope: !3003)
!11725 = !DILocation(line: 10693, column: 22, scope: !3003)
!11726 = !DILocation(line: 10693, column: 37, scope: !3003)
!11727 = !DILocation(line: 10693, column: 35, scope: !3003)
!11728 = !DILocation(line: 10694, column: 14, scope: !11729)
!11729 = distinct !DILexicalBlock(scope: !3003, file: !616, line: 10694, column: 9)
!11730 = !DILocation(line: 10694, column: 17, scope: !11729)
!11731 = !DILocation(line: 10694, column: 9, scope: !3003)
!11732 = !DILocation(line: 10695, column: 33, scope: !11729)
!11733 = !DILocation(line: 10695, column: 47, scope: !11729)
!11734 = !DILocation(line: 10696, column: 34, scope: !11729)
!11735 = !DILocation(line: 10696, column: 45, scope: !11729)
!11736 = !DILocation(line: 10696, column: 50, scope: !11729)
!11737 = !DILocation(line: 10695, column: 18, scope: !11729)
!11738 = !DILocation(line: 10695, column: 16, scope: !11729)
!11739 = !DILocation(line: 10695, column: 9, scope: !11729)
!11740 = !DILocation(line: 10697, column: 14, scope: !11741)
!11741 = distinct !DILexicalBlock(scope: !11729, file: !616, line: 10697, column: 14)
!11742 = !DILocation(line: 10697, column: 14, scope: !11729)
!11743 = !DILocation(line: 10698, column: 32, scope: !11741)
!11744 = !DILocation(line: 10698, column: 50, scope: !11741)
!11745 = !DILocation(line: 10699, column: 34, scope: !11741)
!11746 = !DILocation(line: 10699, column: 45, scope: !11741)
!11747 = !DILocation(line: 10699, column: 50, scope: !11741)
!11748 = !DILocation(line: 10698, column: 18, scope: !11741)
!11749 = !DILocation(line: 10698, column: 16, scope: !11741)
!11750 = !DILocation(line: 10698, column: 9, scope: !11741)
!11751 = !DILocation(line: 10701, column: 33, scope: !11741)
!11752 = !DILocation(line: 10701, column: 51, scope: !11741)
!11753 = !DILocation(line: 10702, column: 34, scope: !11741)
!11754 = !DILocation(line: 10702, column: 45, scope: !11741)
!11755 = !DILocation(line: 10702, column: 50, scope: !11741)
!11756 = !DILocation(line: 10701, column: 18, scope: !11741)
!11757 = !DILocation(line: 10701, column: 16, scope: !11741)
!11758 = !DILocation(line: 10703, column: 26, scope: !3003)
!11759 = !DILocation(line: 10703, column: 5, scope: !3003)
!11760 = !DILocation(line: 10703, column: 34, scope: !2990)
!11761 = !DILocation(line: 10705, column: 9, scope: !11762)
!11762 = distinct !DILexicalBlock(scope: !2990, file: !616, line: 10705, column: 9)
!11763 = !DILocation(line: 10705, column: 9, scope: !2990)
!11764 = !DILocation(line: 10706, column: 24, scope: !11765)
!11765 = distinct !DILexicalBlock(scope: !11762, file: !616, line: 10705, column: 17)
!11766 = !DILocation(line: 10706, column: 22, scope: !11765)
!11767 = !DILocation(line: 10707, column: 9, scope: !11765)
!11768 = !DILocation(line: 10710, column: 18, scope: !2990)
!11769 = !DILocation(line: 10711, column: 21, scope: !2990)
!11770 = !DILocation(line: 10711, column: 37, scope: !2990)
!11771 = !DILocation(line: 10711, column: 46, scope: !2990)
!11772 = !DILocation(line: 10711, column: 5, scope: !2990)
!11773 = !DILocation(line: 10714, column: 5, scope: !2990)
!11774 = !DILocation(line: 10715, column: 5, scope: !2990)
!11775 = !DILocation(line: 10716, column: 5, scope: !2990)
!11776 = !DILocation(line: 10718, column: 12, scope: !2990)
!11777 = !DILocation(line: 10718, column: 5, scope: !2990)
!11778 = !DILocation(line: 10719, column: 1, scope: !2990)
!11779 = !DILocation(line: 10588, column: 26, scope: !3004)
!11780 = !DILocation(line: 10588, column: 42, scope: !3004)
!11781 = !DILocation(line: 10588, column: 58, scope: !3004)
!11782 = !DILocation(line: 10590, column: 5, scope: !3004)
!11783 = !DILocation(line: 10590, column: 12, scope: !3004)
!11784 = !DILocation(line: 10591, column: 5, scope: !3004)
!11785 = !DILocation(line: 10591, column: 12, scope: !3004)
!11786 = !DILocation(line: 10592, column: 5, scope: !3004)
!11787 = !DILocation(line: 10592, column: 9, scope: !3004)
!11788 = !DILocation(line: 10593, column: 5, scope: !3004)
!11789 = !DILocation(line: 10593, column: 15, scope: !3004)
!11790 = !DILocation(line: 10594, column: 5, scope: !3004)
!11791 = !DILocation(line: 10594, column: 9, scope: !3004)
!11792 = !DILocation(line: 10597, column: 5, scope: !3004)
!11793 = !DILocation(line: 10598, column: 5, scope: !3004)
!11794 = !DILocation(line: 10599, column: 10, scope: !3004)
!11795 = !DILocation(line: 10599, column: 24, scope: !3004)
!11796 = !DILocation(line: 10600, column: 15, scope: !3004)
!11797 = !DILocation(line: 10600, column: 29, scope: !3004)
!11798 = !DILocation(line: 10601, column: 10, scope: !3004)
!11799 = !DILocation(line: 10601, column: 19, scope: !3004)
!11800 = !DILocation(line: 10602, column: 45, scope: !11801)
!11801 = distinct !DILexicalBlock(scope: !3004, file: !616, line: 10602, column: 9)
!11802 = !DILocation(line: 10602, column: 51, scope: !11801)
!11803 = !DILocation(line: 10602, column: 10, scope: !11801)
!11804 = !DILocation(line: 10602, column: 9, scope: !3004)
!11805 = !DILocation(line: 10606, column: 9, scope: !11801)
!11806 = !DILocation(line: 10608, column: 57, scope: !11807)
!11807 = distinct !DILexicalBlock(scope: !3004, file: !616, line: 10608, column: 9)
!11808 = !DILocation(line: 10608, column: 61, scope: !11807)
!11809 = !DILocation(line: 10608, column: 9, scope: !11807)
!11810 = !DILocation(line: 10608, column: 9, scope: !3004)
!11811 = !DILocation(line: 10609, column: 9, scope: !11807)
!11812 = !DILocation(line: 10611, column: 12, scope: !3017)
!11813 = !DILocation(line: 10611, column: 10, scope: !3017)
!11814 = !DILocation(line: 10612, column: 9, scope: !3015)
!11815 = !DILocation(line: 10612, column: 15, scope: !3015)
!11816 = !DILocation(line: 10613, column: 9, scope: !3015)
!11817 = !DILocation(line: 10613, column: 17, scope: !3015)
!11818 = !DILocation(line: 10615, column: 9, scope: !3015)
!11819 = !DILocation(line: 10615, column: 20, scope: !3015)
!11820 = !DILocation(line: 10615, column: 47, scope: !3015)
!11821 = !DILocation(line: 10615, column: 34, scope: !3015)
!11822 = !DILocation(line: 10616, column: 14, scope: !11823)
!11823 = distinct !DILexicalBlock(scope: !3015, file: !616, line: 10616, column: 13)
!11824 = !DILocation(line: 10616, column: 13, scope: !3015)
!11825 = !DILocation(line: 10617, column: 13, scope: !11826)
!11826 = distinct !DILexicalBlock(scope: !11823, file: !616, line: 10616, column: 27)
!11827 = !DILocation(line: 10618, column: 13, scope: !11826)
!11828 = !DILocation(line: 10620, column: 56, scope: !3015)
!11829 = !DILocation(line: 10620, column: 18, scope: !3015)
!11830 = !DILocation(line: 10620, column: 16, scope: !3015)
!11831 = !DILocation(line: 10621, column: 14, scope: !11832)
!11832 = distinct !DILexicalBlock(scope: !3015, file: !616, line: 10621, column: 13)
!11833 = !DILocation(line: 10621, column: 13, scope: !3015)
!11834 = !DILocation(line: 10622, column: 13, scope: !11832)
!11835 = !DILocation(line: 10623, column: 50, scope: !3015)
!11836 = !DILocation(line: 10623, column: 32, scope: !3015)
!11837 = !DILocation(line: 10623, column: 60, scope: !3015)
!11838 = !DILocation(line: 10623, column: 30, scope: !3015)
!11839 = !DILocation(line: 10623, column: 13, scope: !3015)
!11840 = !DILocation(line: 10625, column: 11, scope: !3021)
!11841 = !DILocation(line: 10625, column: 26, scope: !3021)
!11842 = !DILocation(line: 10625, column: 41, scope: !3021)
!11843 = !DILocation(line: 10625, column: 39, scope: !3021)
!11844 = !DILocation(line: 10626, column: 18, scope: !11845)
!11845 = distinct !DILexicalBlock(scope: !3021, file: !616, line: 10626, column: 13)
!11846 = !DILocation(line: 10626, column: 21, scope: !11845)
!11847 = !DILocation(line: 10626, column: 13, scope: !3021)
!11848 = !DILocation(line: 10627, column: 37, scope: !11845)
!11849 = !DILocation(line: 10627, column: 51, scope: !11845)
!11850 = !DILocation(line: 10627, column: 59, scope: !11845)
!11851 = !DILocation(line: 10627, column: 64, scope: !11845)
!11852 = !DILocation(line: 10627, column: 22, scope: !11845)
!11853 = !DILocation(line: 10627, column: 20, scope: !11845)
!11854 = !DILocation(line: 10627, column: 13, scope: !11845)
!11855 = !DILocation(line: 10628, column: 18, scope: !11856)
!11856 = distinct !DILexicalBlock(scope: !11845, file: !616, line: 10628, column: 18)
!11857 = !DILocation(line: 10628, column: 18, scope: !11845)
!11858 = !DILocation(line: 10629, column: 36, scope: !11856)
!11859 = !DILocation(line: 10629, column: 54, scope: !11856)
!11860 = !DILocation(line: 10629, column: 62, scope: !11856)
!11861 = !DILocation(line: 10629, column: 67, scope: !11856)
!11862 = !DILocation(line: 10629, column: 22, scope: !11856)
!11863 = !DILocation(line: 10629, column: 20, scope: !11856)
!11864 = !DILocation(line: 10629, column: 13, scope: !11856)
!11865 = !DILocation(line: 10631, column: 37, scope: !11856)
!11866 = !DILocation(line: 10631, column: 55, scope: !11856)
!11867 = !DILocation(line: 10631, column: 63, scope: !11856)
!11868 = !DILocation(line: 10631, column: 68, scope: !11856)
!11869 = !DILocation(line: 10631, column: 22, scope: !11856)
!11870 = !DILocation(line: 10631, column: 20, scope: !11856)
!11871 = !DILocation(line: 10632, column: 30, scope: !3021)
!11872 = !DILocation(line: 10632, column: 9, scope: !3021)
!11873 = !DILocation(line: 10632, column: 38, scope: !3015)
!11874 = !DILocation(line: 10634, column: 13, scope: !3025)
!11875 = !DILocation(line: 10634, column: 20, scope: !3025)
!11876 = !DILocation(line: 10634, column: 13, scope: !3015)
!11877 = !DILocation(line: 10635, column: 13, scope: !3024)
!11878 = !DILocation(line: 10635, column: 18, scope: !11879)
!11879 = !DILexicalBlockFile(scope: !3023, file: !616, discriminator: 1)
!11880 = !DILocation(line: 10635, column: 28, scope: !3023)
!11881 = !DILocation(line: 10635, column: 58, scope: !3023)
!11882 = !DILocation(line: 10635, column: 75, scope: !11883)
!11883 = distinct !DILexicalBlock(scope: !3023, file: !616, line: 10635, column: 72)
!11884 = !DILocation(line: 10635, column: 92, scope: !11883)
!11885 = !DILocation(line: 10635, column: 72, scope: !11883)
!11886 = !DILocation(line: 10635, column: 102, scope: !11883)
!11887 = !DILocation(line: 10635, column: 72, scope: !3023)
!11888 = !DILocation(line: 10635, column: 72, scope: !11889)
!11889 = !DILexicalBlockFile(scope: !3023, file: !616, discriminator: 2)
!11890 = !DILocation(line: 10635, column: 133, scope: !11891)
!11891 = !DILexicalBlockFile(scope: !11883, file: !616, discriminator: 3)
!11892 = !DILocation(line: 10635, column: 151, scope: !11883)
!11893 = !DILocation(line: 10635, column: 161, scope: !11883)
!11894 = !DILocation(line: 10635, column: 186, scope: !11883)
!11895 = !DILocation(line: 10635, column: 117, scope: !11883)
!11896 = !DILocation(line: 10635, column: 205, scope: !11897)
!11897 = !DILexicalBlockFile(scope: !3024, file: !616, discriminator: 4)
!11898 = !DILocation(line: 10635, column: 205, scope: !3023)
!11899 = !DILocation(line: 10635, column: 205, scope: !11900)
!11900 = !DILexicalBlockFile(scope: !3023, file: !616, discriminator: 5)
!11901 = !DILocation(line: 10636, column: 20, scope: !3024)
!11902 = !DILocation(line: 10637, column: 19, scope: !11903)
!11903 = distinct !DILexicalBlock(scope: !3024, file: !616, line: 10637, column: 17)
!11904 = !DILocation(line: 10637, column: 18, scope: !11903)
!11905 = !DILocation(line: 10637, column: 40, scope: !11903)
!11906 = !DILocation(line: 10637, column: 17, scope: !3024)
!11907 = !DILocation(line: 10638, column: 17, scope: !11903)
!11908 = !DILocation(line: 10639, column: 13, scope: !3024)
!11909 = !DILocation(line: 10640, column: 13, scope: !3024)
!11910 = !DILocation(line: 10643, column: 13, scope: !11911)
!11911 = distinct !DILexicalBlock(scope: !3015, file: !616, line: 10643, column: 13)
!11912 = !DILocation(line: 10643, column: 23, scope: !11911)
!11913 = !DILocation(line: 10643, column: 20, scope: !11911)
!11914 = !DILocation(line: 10643, column: 13, scope: !3015)
!11915 = !DILocation(line: 10645, column: 38, scope: !11916)
!11916 = distinct !DILexicalBlock(scope: !11911, file: !616, line: 10643, column: 36)
!11917 = !DILocation(line: 10645, column: 13, scope: !11916)
!11918 = !DILocation(line: 10646, column: 9, scope: !11916)
!11919 = !DILocation(line: 10647, column: 9, scope: !3015)
!11920 = !DILocation(line: 10648, column: 5, scope: !3016)
!11921 = !DILocation(line: 10611, column: 20, scope: !3016)
!11922 = !DILocation(line: 10611, column: 5, scope: !3016)
!11923 = !DILocation(line: 10648, column: 5, scope: !3017)
!11924 = !DILocation(line: 10651, column: 5, scope: !3004)
!11925 = !DILocation(line: 10652, column: 5, scope: !3004)
!11926 = !DILocation(line: 10653, column: 12, scope: !3004)
!11927 = !DILocation(line: 10653, column: 5, scope: !3004)
!11928 = !DILocation(line: 10654, column: 1, scope: !3004)
!11929 = !DILocation(line: 10730, column: 29, scope: !3026)
!11930 = !DILocation(line: 10730, column: 45, scope: !3026)
!11931 = !DILocation(line: 10730, column: 61, scope: !3026)
!11932 = !DILocation(line: 10732, column: 5, scope: !3026)
!11933 = !DILocation(line: 10732, column: 12, scope: !3026)
!11934 = !DILocation(line: 10733, column: 5, scope: !3026)
!11935 = !DILocation(line: 10733, column: 12, scope: !3026)
!11936 = !DILocation(line: 10734, column: 5, scope: !3026)
!11937 = !DILocation(line: 10734, column: 9, scope: !3026)
!11938 = !DILocation(line: 10735, column: 5, scope: !3026)
!11939 = !DILocation(line: 10735, column: 9, scope: !3026)
!11940 = !DILocation(line: 10736, column: 5, scope: !3026)
!11941 = !DILocation(line: 10736, column: 15, scope: !3026)
!11942 = !DILocation(line: 10739, column: 5, scope: !3026)
!11943 = !DILocation(line: 10740, column: 10, scope: !3026)
!11944 = !DILocation(line: 10740, column: 24, scope: !3026)
!11945 = !DILocation(line: 10741, column: 5, scope: !3026)
!11946 = !DILocation(line: 10742, column: 15, scope: !3026)
!11947 = !DILocation(line: 10742, column: 29, scope: !3026)
!11948 = !DILocation(line: 10743, column: 10, scope: !3026)
!11949 = !DILocation(line: 10743, column: 19, scope: !3026)
!11950 = !DILocation(line: 10744, column: 45, scope: !11951)
!11951 = distinct !DILexicalBlock(scope: !3026, file: !616, line: 10744, column: 9)
!11952 = !DILocation(line: 10744, column: 51, scope: !11951)
!11953 = !DILocation(line: 10744, column: 10, scope: !11951)
!11954 = !DILocation(line: 10744, column: 9, scope: !3026)
!11955 = !DILocation(line: 10749, column: 9, scope: !11951)
!11956 = !DILocation(line: 10751, column: 60, scope: !11957)
!11957 = distinct !DILexicalBlock(scope: !3026, file: !616, line: 10751, column: 9)
!11958 = !DILocation(line: 10751, column: 64, scope: !11957)
!11959 = !DILocation(line: 10751, column: 9, scope: !11957)
!11960 = !DILocation(line: 10751, column: 9, scope: !3026)
!11961 = !DILocation(line: 10752, column: 9, scope: !11957)
!11962 = !DILocation(line: 10754, column: 7, scope: !3037)
!11963 = !DILocation(line: 10754, column: 22, scope: !3037)
!11964 = !DILocation(line: 10754, column: 37, scope: !3037)
!11965 = !DILocation(line: 10754, column: 35, scope: !3037)
!11966 = !DILocation(line: 10755, column: 14, scope: !11967)
!11967 = distinct !DILexicalBlock(scope: !3037, file: !616, line: 10755, column: 9)
!11968 = !DILocation(line: 10755, column: 17, scope: !11967)
!11969 = !DILocation(line: 10755, column: 9, scope: !3037)
!11970 = !DILocation(line: 10756, column: 36, scope: !11967)
!11971 = !DILocation(line: 10756, column: 50, scope: !11967)
!11972 = !DILocation(line: 10756, column: 18, scope: !11967)
!11973 = !DILocation(line: 10756, column: 16, scope: !11967)
!11974 = !DILocation(line: 10756, column: 9, scope: !11967)
!11975 = !DILocation(line: 10757, column: 14, scope: !11976)
!11976 = distinct !DILexicalBlock(scope: !11967, file: !616, line: 10757, column: 14)
!11977 = !DILocation(line: 10757, column: 14, scope: !11967)
!11978 = !DILocation(line: 10758, column: 35, scope: !11976)
!11979 = !DILocation(line: 10758, column: 53, scope: !11976)
!11980 = !DILocation(line: 10758, column: 18, scope: !11976)
!11981 = !DILocation(line: 10758, column: 16, scope: !11976)
!11982 = !DILocation(line: 10758, column: 9, scope: !11976)
!11983 = !DILocation(line: 10760, column: 36, scope: !11976)
!11984 = !DILocation(line: 10760, column: 54, scope: !11976)
!11985 = !DILocation(line: 10760, column: 18, scope: !11976)
!11986 = !DILocation(line: 10760, column: 16, scope: !11976)
!11987 = !DILocation(line: 10761, column: 26, scope: !3037)
!11988 = !DILocation(line: 10761, column: 5, scope: !3037)
!11989 = !DILocation(line: 10761, column: 34, scope: !3026)
!11990 = !DILocation(line: 10763, column: 9, scope: !11991)
!11991 = distinct !DILexicalBlock(scope: !3026, file: !616, line: 10763, column: 9)
!11992 = !DILocation(line: 10763, column: 9, scope: !3026)
!11993 = !DILocation(line: 10764, column: 24, scope: !11994)
!11994 = distinct !DILexicalBlock(scope: !11991, file: !616, line: 10763, column: 17)
!11995 = !DILocation(line: 10764, column: 22, scope: !11994)
!11996 = !DILocation(line: 10765, column: 9, scope: !11994)
!11997 = !DILocation(line: 10768, column: 18, scope: !3026)
!11998 = !DILocation(line: 10769, column: 21, scope: !3026)
!11999 = !DILocation(line: 10769, column: 37, scope: !3026)
!12000 = !DILocation(line: 10769, column: 46, scope: !3026)
!12001 = !DILocation(line: 10769, column: 5, scope: !3026)
!12002 = !DILocation(line: 10772, column: 5, scope: !3026)
!12003 = !DILocation(line: 10773, column: 5, scope: !3026)
!12004 = !DILocation(line: 10775, column: 12, scope: !3026)
!12005 = !DILocation(line: 10775, column: 5, scope: !3026)
!12006 = !DILocation(line: 10776, column: 1, scope: !3026)
!12007 = !DILocation(line: 10789, column: 27, scope: !3038)
!12008 = !DILocation(line: 10789, column: 43, scope: !3038)
!12009 = !DILocation(line: 10789, column: 59, scope: !3038)
!12010 = !DILocation(line: 10791, column: 5, scope: !3038)
!12011 = !DILocation(line: 10791, column: 12, scope: !3038)
!12012 = !DILocation(line: 10792, column: 5, scope: !3038)
!12013 = !DILocation(line: 10792, column: 9, scope: !3038)
!12014 = !DILocation(line: 10793, column: 5, scope: !3038)
!12015 = !DILocation(line: 10793, column: 16, scope: !3038)
!12016 = !DILocation(line: 10794, column: 5, scope: !3038)
!12017 = !DILocation(line: 10794, column: 15, scope: !3038)
!12018 = !DILocation(line: 10795, column: 5, scope: !3038)
!12019 = !DILocation(line: 10795, column: 11, scope: !3038)
!12020 = !DILocation(line: 10796, column: 5, scope: !3038)
!12021 = !DILocation(line: 10796, column: 11, scope: !3038)
!12022 = !DILocation(line: 10799, column: 5, scope: !3038)
!12023 = !DILocation(line: 10800, column: 10, scope: !3038)
!12024 = !DILocation(line: 10800, column: 24, scope: !3038)
!12025 = !DILocation(line: 10801, column: 10, scope: !3038)
!12026 = !DILocation(line: 10801, column: 19, scope: !3038)
!12027 = !DILocation(line: 10802, column: 10, scope: !3038)
!12028 = !DILocation(line: 10802, column: 13, scope: !3038)
!12029 = !DILocation(line: 10803, column: 45, scope: !12030)
!12030 = distinct !DILexicalBlock(scope: !3038, file: !616, line: 10803, column: 9)
!12031 = !DILocation(line: 10803, column: 51, scope: !12030)
!12032 = !DILocation(line: 10803, column: 10, scope: !12030)
!12033 = !DILocation(line: 10803, column: 9, scope: !3038)
!12034 = !DILocation(line: 10806, column: 9, scope: !12030)
!12035 = !DILocation(line: 10808, column: 58, scope: !12036)
!12036 = distinct !DILexicalBlock(scope: !3038, file: !616, line: 10808, column: 9)
!12037 = !DILocation(line: 10808, column: 62, scope: !12036)
!12038 = !DILocation(line: 10808, column: 9, scope: !12036)
!12039 = !DILocation(line: 10808, column: 9, scope: !3038)
!12040 = !DILocation(line: 10809, column: 9, scope: !12036)
!12041 = !DILocation(line: 10811, column: 17, scope: !3038)
!12042 = !DILocation(line: 10811, column: 12, scope: !3038)
!12043 = !DILocation(line: 10811, column: 31, scope: !12044)
!12044 = !DILexicalBlockFile(scope: !3038, file: !616, discriminator: 1)
!12045 = !DILocation(line: 10811, column: 12, scope: !12046)
!12046 = !DILexicalBlockFile(scope: !3038, file: !616, discriminator: 2)
!12047 = !DILocation(line: 10811, column: 10, scope: !12048)
!12048 = !DILexicalBlockFile(scope: !12049, file: !616, discriminator: 4)
!12049 = !DILexicalBlockFile(scope: !3038, file: !616, discriminator: 3)
!12050 = !DILocation(line: 10812, column: 12, scope: !3052)
!12051 = !DILocation(line: 10812, column: 10, scope: !3052)
!12052 = !DILocation(line: 10813, column: 9, scope: !3050)
!12053 = !DILocation(line: 10813, column: 15, scope: !3050)
!12054 = !DILocation(line: 10813, column: 23, scope: !3050)
!12055 = !DILocation(line: 10813, column: 31, scope: !3050)
!12056 = !DILocation(line: 10814, column: 9, scope: !3050)
!12057 = !DILocation(line: 10814, column: 17, scope: !3050)
!12058 = !DILocation(line: 10816, column: 9, scope: !3050)
!12059 = !DILocation(line: 10816, column: 20, scope: !3050)
!12060 = !DILocation(line: 10816, column: 47, scope: !3050)
!12061 = !DILocation(line: 10816, column: 34, scope: !3050)
!12062 = !DILocation(line: 10817, column: 14, scope: !12063)
!12063 = distinct !DILexicalBlock(scope: !3050, file: !616, line: 10817, column: 13)
!12064 = !DILocation(line: 10817, column: 13, scope: !3050)
!12065 = !DILocation(line: 10819, column: 13, scope: !12066)
!12066 = distinct !DILexicalBlock(scope: !12063, file: !616, line: 10817, column: 27)
!12067 = !DILocation(line: 10820, column: 13, scope: !12066)
!12068 = !DILocation(line: 10822, column: 31, scope: !3050)
!12069 = !DILocation(line: 10822, column: 18, scope: !3050)
!12070 = !DILocation(line: 10822, column: 16, scope: !3050)
!12071 = !DILocation(line: 10823, column: 14, scope: !12072)
!12072 = distinct !DILexicalBlock(scope: !3050, file: !616, line: 10823, column: 13)
!12073 = !DILocation(line: 10823, column: 13, scope: !3050)
!12074 = !DILocation(line: 10824, column: 13, scope: !12075)
!12075 = distinct !DILexicalBlock(scope: !12072, file: !616, line: 10823, column: 22)
!12076 = !DILocation(line: 10825, column: 13, scope: !12075)
!12077 = !DILocation(line: 10828, column: 11, scope: !3058)
!12078 = !DILocation(line: 10828, column: 26, scope: !3058)
!12079 = !DILocation(line: 10828, column: 41, scope: !3058)
!12080 = !DILocation(line: 10828, column: 39, scope: !3058)
!12081 = !DILocation(line: 10829, column: 18, scope: !12082)
!12082 = distinct !DILexicalBlock(scope: !3058, file: !616, line: 10829, column: 13)
!12083 = !DILocation(line: 10829, column: 21, scope: !12082)
!12084 = !DILocation(line: 10829, column: 13, scope: !3058)
!12085 = !DILocation(line: 10830, column: 38, scope: !12082)
!12086 = !DILocation(line: 10830, column: 42, scope: !12082)
!12087 = !DILocation(line: 10830, column: 50, scope: !12082)
!12088 = !DILocation(line: 10830, column: 22, scope: !12082)
!12089 = !DILocation(line: 10830, column: 20, scope: !12082)
!12090 = !DILocation(line: 10830, column: 13, scope: !12082)
!12091 = !DILocation(line: 10831, column: 18, scope: !12092)
!12092 = distinct !DILexicalBlock(scope: !12082, file: !616, line: 10831, column: 18)
!12093 = !DILocation(line: 10831, column: 18, scope: !12082)
!12094 = !DILocation(line: 10832, column: 32, scope: !12092)
!12095 = !DILocation(line: 10832, column: 38, scope: !12092)
!12096 = !DILocation(line: 10832, column: 46, scope: !12092)
!12097 = !DILocation(line: 10832, column: 22, scope: !12092)
!12098 = !DILocation(line: 10832, column: 20, scope: !12092)
!12099 = !DILocation(line: 10832, column: 13, scope: !12092)
!12100 = !DILocation(line: 10834, column: 33, scope: !12092)
!12101 = !DILocation(line: 10834, column: 39, scope: !12092)
!12102 = !DILocation(line: 10834, column: 47, scope: !12092)
!12103 = !DILocation(line: 10834, column: 22, scope: !12092)
!12104 = !DILocation(line: 10834, column: 20, scope: !12092)
!12105 = !DILocation(line: 10835, column: 30, scope: !3058)
!12106 = !DILocation(line: 10835, column: 9, scope: !3058)
!12107 = !DILocation(line: 10835, column: 38, scope: !3050)
!12108 = !DILocation(line: 10837, column: 13, scope: !12109)
!12109 = distinct !DILexicalBlock(scope: !3050, file: !616, line: 10837, column: 13)
!12110 = !DILocation(line: 10837, column: 20, scope: !12109)
!12111 = !DILocation(line: 10837, column: 13, scope: !3050)
!12112 = !DILocation(line: 10838, column: 19, scope: !12113)
!12113 = distinct !DILexicalBlock(scope: !12114, file: !616, line: 10838, column: 17)
!12114 = distinct !DILexicalBlock(scope: !12109, file: !616, line: 10837, column: 25)
!12115 = !DILocation(line: 10838, column: 18, scope: !12113)
!12116 = !DILocation(line: 10838, column: 40, scope: !12113)
!12117 = !DILocation(line: 10838, column: 17, scope: !12114)
!12118 = !DILocation(line: 10839, column: 28, scope: !12119)
!12119 = distinct !DILexicalBlock(scope: !12113, file: !616, line: 10838, column: 47)
!12120 = !DILocation(line: 10839, column: 17, scope: !12119)
!12121 = !DILocation(line: 10840, column: 24, scope: !12119)
!12122 = !DILocation(line: 10841, column: 17, scope: !12119)
!12123 = !DILocation(line: 10843, column: 13, scope: !12114)
!12124 = !DILocation(line: 10844, column: 13, scope: !12114)
!12125 = !DILocation(line: 10847, column: 18, scope: !3050)
!12126 = !DILocation(line: 10847, column: 16, scope: !3050)
!12127 = !DILocation(line: 10848, column: 14, scope: !12128)
!12128 = distinct !DILexicalBlock(scope: !3050, file: !616, line: 10848, column: 13)
!12129 = !DILocation(line: 10848, column: 13, scope: !3050)
!12130 = !DILocation(line: 10849, column: 13, scope: !12131)
!12131 = distinct !DILexicalBlock(scope: !12128, file: !616, line: 10848, column: 22)
!12132 = !DILocation(line: 10852, column: 15, scope: !3050)
!12133 = !DILocation(line: 10852, column: 24, scope: !3050)
!12134 = !DILocation(line: 10852, column: 22, scope: !3050)
!12135 = !DILocation(line: 10852, column: 13, scope: !3050)
!12136 = !DILocation(line: 10853, column: 30, scope: !3064)
!12137 = !DILocation(line: 10853, column: 28, scope: !3064)
!12138 = !DILocation(line: 10853, column: 20, scope: !3064)
!12139 = !DILocation(line: 10853, column: 14, scope: !3064)
!12140 = !DILocation(line: 10853, column: 38, scope: !12141)
!12141 = !DILexicalBlockFile(scope: !12142, file: !616, discriminator: 2)
!12142 = !DILexicalBlockFile(scope: !3063, file: !616, discriminator: 1)
!12143 = !DILocation(line: 10853, column: 47, scope: !3063)
!12144 = !DILocation(line: 10853, column: 44, scope: !3063)
!12145 = !DILocation(line: 10853, column: 9, scope: !3064)
!12146 = !DILocation(line: 10854, column: 19, scope: !3061)
!12147 = !DILocation(line: 10854, column: 18, scope: !3061)
!12148 = !DILocation(line: 10854, column: 17, scope: !3062)
!12149 = !DILocation(line: 10855, column: 17, scope: !3060)
!12150 = !DILocation(line: 10855, column: 21, scope: !3060)
!12151 = !DILocation(line: 10856, column: 17, scope: !3060)
!12152 = !DILocation(line: 10856, column: 27, scope: !3060)
!12153 = !DILocation(line: 10856, column: 72, scope: !3060)
!12154 = !DILocation(line: 10857, column: 66, scope: !3060)
!12155 = !DILocation(line: 10857, column: 74, scope: !3060)
!12156 = !DILocation(line: 10857, column: 72, scope: !3060)
!12157 = !DILocation(line: 10856, column: 39, scope: !3060)
!12158 = !DILocation(line: 10858, column: 22, scope: !3069)
!12159 = !DILocation(line: 10858, column: 21, scope: !3060)
!12160 = !DILocation(line: 10859, column: 21, scope: !3068)
!12161 = !DILocation(line: 10859, column: 26, scope: !12162)
!12162 = !DILexicalBlockFile(scope: !3067, file: !616, discriminator: 1)
!12163 = !DILocation(line: 10859, column: 36, scope: !3067)
!12164 = !DILocation(line: 10859, column: 66, scope: !3067)
!12165 = !DILocation(line: 10859, column: 83, scope: !12166)
!12166 = distinct !DILexicalBlock(scope: !3067, file: !616, line: 10859, column: 80)
!12167 = !DILocation(line: 10859, column: 100, scope: !12166)
!12168 = !DILocation(line: 10859, column: 80, scope: !12166)
!12169 = !DILocation(line: 10859, column: 110, scope: !12166)
!12170 = !DILocation(line: 10859, column: 80, scope: !3067)
!12171 = !DILocation(line: 10859, column: 80, scope: !12172)
!12172 = !DILexicalBlockFile(scope: !3067, file: !616, discriminator: 2)
!12173 = !DILocation(line: 10859, column: 141, scope: !12174)
!12174 = !DILexicalBlockFile(scope: !12166, file: !616, discriminator: 3)
!12175 = !DILocation(line: 10859, column: 159, scope: !12166)
!12176 = !DILocation(line: 10859, column: 169, scope: !12166)
!12177 = !DILocation(line: 10859, column: 194, scope: !12166)
!12178 = !DILocation(line: 10859, column: 125, scope: !12166)
!12179 = !DILocation(line: 10859, column: 213, scope: !12180)
!12180 = !DILexicalBlockFile(scope: !3068, file: !616, discriminator: 4)
!12181 = !DILocation(line: 10859, column: 213, scope: !3067)
!12182 = !DILocation(line: 10859, column: 213, scope: !12183)
!12183 = !DILexicalBlockFile(scope: !3067, file: !616, discriminator: 5)
!12184 = !DILocation(line: 10860, column: 28, scope: !3068)
!12185 = !DILocation(line: 10861, column: 21, scope: !3068)
!12186 = !DILocation(line: 10863, column: 39, scope: !3060)
!12187 = !DILocation(line: 10863, column: 47, scope: !3060)
!12188 = !DILocation(line: 10863, column: 25, scope: !3060)
!12189 = !DILocation(line: 10863, column: 23, scope: !3060)
!12190 = !DILocation(line: 10864, column: 17, scope: !3060)
!12191 = !DILocation(line: 10864, column: 22, scope: !12192)
!12192 = !DILexicalBlockFile(scope: !3071, file: !616, discriminator: 1)
!12193 = !DILocation(line: 10864, column: 32, scope: !3071)
!12194 = !DILocation(line: 10864, column: 62, scope: !3071)
!12195 = !DILocation(line: 10864, column: 82, scope: !12196)
!12196 = distinct !DILexicalBlock(scope: !3071, file: !616, line: 10864, column: 79)
!12197 = !DILocation(line: 10864, column: 99, scope: !12196)
!12198 = !DILocation(line: 10864, column: 79, scope: !12196)
!12199 = !DILocation(line: 10864, column: 109, scope: !12196)
!12200 = !DILocation(line: 10864, column: 79, scope: !3071)
!12201 = !DILocation(line: 10864, column: 79, scope: !12202)
!12202 = !DILexicalBlockFile(scope: !3071, file: !616, discriminator: 2)
!12203 = !DILocation(line: 10864, column: 140, scope: !12204)
!12204 = !DILexicalBlockFile(scope: !12196, file: !616, discriminator: 3)
!12205 = !DILocation(line: 10864, column: 158, scope: !12196)
!12206 = !DILocation(line: 10864, column: 168, scope: !12196)
!12207 = !DILocation(line: 10864, column: 193, scope: !12196)
!12208 = !DILocation(line: 10864, column: 124, scope: !12196)
!12209 = !DILocation(line: 10864, column: 212, scope: !12210)
!12210 = !DILexicalBlockFile(scope: !3060, file: !616, discriminator: 4)
!12211 = !DILocation(line: 10864, column: 212, scope: !3071)
!12212 = !DILocation(line: 10864, column: 212, scope: !12213)
!12213 = !DILexicalBlockFile(scope: !3071, file: !616, discriminator: 5)
!12214 = !DILocation(line: 10865, column: 21, scope: !3075)
!12215 = !DILocation(line: 10865, column: 21, scope: !3060)
!12216 = !DILocation(line: 10866, column: 21, scope: !3074)
!12217 = !DILocation(line: 10866, column: 26, scope: !12218)
!12218 = !DILexicalBlockFile(scope: !3073, file: !616, discriminator: 1)
!12219 = !DILocation(line: 10866, column: 36, scope: !3073)
!12220 = !DILocation(line: 10866, column: 66, scope: !3073)
!12221 = !DILocation(line: 10866, column: 83, scope: !12222)
!12222 = distinct !DILexicalBlock(scope: !3073, file: !616, line: 10866, column: 80)
!12223 = !DILocation(line: 10866, column: 100, scope: !12222)
!12224 = !DILocation(line: 10866, column: 80, scope: !12222)
!12225 = !DILocation(line: 10866, column: 110, scope: !12222)
!12226 = !DILocation(line: 10866, column: 80, scope: !3073)
!12227 = !DILocation(line: 10866, column: 80, scope: !12228)
!12228 = !DILexicalBlockFile(scope: !3073, file: !616, discriminator: 2)
!12229 = !DILocation(line: 10866, column: 141, scope: !12230)
!12230 = !DILexicalBlockFile(scope: !12222, file: !616, discriminator: 3)
!12231 = !DILocation(line: 10866, column: 159, scope: !12222)
!12232 = !DILocation(line: 10866, column: 169, scope: !12222)
!12233 = !DILocation(line: 10866, column: 194, scope: !12222)
!12234 = !DILocation(line: 10866, column: 125, scope: !12222)
!12235 = !DILocation(line: 10866, column: 213, scope: !12236)
!12236 = !DILexicalBlockFile(scope: !3074, file: !616, discriminator: 4)
!12237 = !DILocation(line: 10866, column: 213, scope: !3073)
!12238 = !DILocation(line: 10866, column: 213, scope: !12239)
!12239 = !DILexicalBlockFile(scope: !3073, file: !616, discriminator: 5)
!12240 = !DILocation(line: 10867, column: 28, scope: !3074)
!12241 = !DILocation(line: 10868, column: 21, scope: !3074)
!12242 = !DILocation(line: 10870, column: 25, scope: !3060)
!12243 = !DILocation(line: 10870, column: 31, scope: !3060)
!12244 = !DILocation(line: 10870, column: 23, scope: !3060)
!12245 = !DILocation(line: 10871, column: 13, scope: !3061)
!12246 = !DILocation(line: 10871, column: 13, scope: !12247)
!12247 = !DILexicalBlockFile(scope: !3061, file: !616, discriminator: 1)
!12248 = !DILocation(line: 10871, column: 13, scope: !3060)
!12249 = !DILocation(line: 10872, column: 9, scope: !3062)
!12250 = !DILocation(line: 10853, column: 57, scope: !3063)
!12251 = !DILocation(line: 10853, column: 9, scope: !3063)
!12252 = !DILocation(line: 10873, column: 5, scope: !3050)
!12253 = !DILocation(line: 10874, column: 5, scope: !3051)
!12254 = !DILocation(line: 10812, column: 20, scope: !3051)
!12255 = !DILocation(line: 10812, column: 5, scope: !3051)
!12256 = !DILocation(line: 10874, column: 5, scope: !3052)
!12257 = !DILocation(line: 10876, column: 5, scope: !3038)
!12258 = !DILocation(line: 10877, column: 9, scope: !12259)
!12259 = distinct !DILexicalBlock(scope: !3038, file: !616, line: 10877, column: 9)
!12260 = !DILocation(line: 10877, column: 9, scope: !3038)
!12261 = !DILocation(line: 10878, column: 20, scope: !12259)
!12262 = !DILocation(line: 10878, column: 9, scope: !12259)
!12263 = !DILocation(line: 10879, column: 12, scope: !3038)
!12264 = !DILocation(line: 10879, column: 5, scope: !3038)
!12265 = !DILocation(line: 10880, column: 1, scope: !3038)
!12266 = !DILocation(line: 10952, column: 29, scope: !3076)
!12267 = !DILocation(line: 10952, column: 45, scope: !3076)
!12268 = !DILocation(line: 10954, column: 5, scope: !3076)
!12269 = !DILocation(line: 10954, column: 9, scope: !3076)
!12270 = !DILocation(line: 10954, column: 18, scope: !3076)
!12271 = !DILocation(line: 10955, column: 5, scope: !3076)
!12272 = !DILocation(line: 10955, column: 15, scope: !3076)
!12273 = !DILocation(line: 10957, column: 5, scope: !3076)
!12274 = !DILocation(line: 10957, column: 9, scope: !3076)
!12275 = !DILocation(line: 10957, column: 21, scope: !3076)
!12276 = !DILocation(line: 10957, column: 14, scope: !3076)
!12277 = !DILocation(line: 10966, column: 34, scope: !12278)
!12278 = distinct !DILexicalBlock(scope: !3076, file: !616, line: 10966, column: 9)
!12279 = !DILocation(line: 10966, column: 10, scope: !12278)
!12280 = !DILocation(line: 10966, column: 9, scope: !3076)
!12281 = !DILocation(line: 10967, column: 9, scope: !12278)
!12282 = !DILocation(line: 10971, column: 9, scope: !3085)
!12283 = !DILocation(line: 10971, column: 24, scope: !3085)
!12284 = !DILocation(line: 10972, column: 19, scope: !12285)
!12285 = distinct !DILexicalBlock(scope: !3085, file: !616, line: 10972, column: 13)
!12286 = !DILocation(line: 10972, column: 13, scope: !12285)
!12287 = !DILocation(line: 10972, column: 13, scope: !3085)
!12288 = !DILocation(line: 10973, column: 39, scope: !12285)
!12289 = !DILocation(line: 10973, column: 20, scope: !12285)
!12290 = !DILocation(line: 10973, column: 13, scope: !12285)
!12291 = !DILocation(line: 10974, column: 21, scope: !3085)
!12292 = !{!12293, !12294, i64 2}
!12293 = !{!"winsize", !12294, i64 0, !12294, i64 2, !12294, i64 4, !12294, i64 6}
!12294 = !{!"short", !3842, i64 0}
!12295 = !DILocation(line: 10974, column: 19, scope: !3085)
!12296 = !DILocation(line: 10974, column: 17, scope: !3085)
!12297 = !DILocation(line: 10975, column: 19, scope: !3085)
!12298 = !{!12293, !12294, i64 0}
!12299 = !DILocation(line: 10975, column: 17, scope: !3085)
!12300 = !DILocation(line: 10975, column: 15, scope: !3085)
!12301 = !DILocation(line: 10976, column: 5, scope: !3076)
!12302 = !DILocation(line: 10976, column: 5, scope: !12303)
!12303 = !DILexicalBlockFile(scope: !3076, file: !616, discriminator: 1)
!12304 = !DILocation(line: 11008, column: 16, scope: !3076)
!12305 = !DILocation(line: 11008, column: 14, scope: !3076)
!12306 = !DILocation(line: 11009, column: 9, scope: !12307)
!12307 = distinct !DILexicalBlock(scope: !3076, file: !616, line: 11009, column: 9)
!12308 = !DILocation(line: 11009, column: 18, scope: !12307)
!12309 = !DILocation(line: 11009, column: 9, scope: !3076)
!12310 = !DILocation(line: 11010, column: 9, scope: !12307)
!12311 = !DILocation(line: 11011, column: 66, scope: !3076)
!12312 = !DILocation(line: 11011, column: 50, scope: !3076)
!12313 = !DILocation(line: 11011, column: 25, scope: !3076)
!12314 = !DILocation(line: 11011, column: 7, scope: !3076)
!12315 = !DILocation(line: 11011, column: 37, scope: !3076)
!12316 = !DILocation(line: 11011, column: 6, scope: !3076)
!12317 = !DILocation(line: 11011, column: 48, scope: !3076)
!12318 = !DILocation(line: 11012, column: 66, scope: !3076)
!12319 = !DILocation(line: 11012, column: 50, scope: !3076)
!12320 = !DILocation(line: 11012, column: 25, scope: !3076)
!12321 = !DILocation(line: 11012, column: 7, scope: !3076)
!12322 = !DILocation(line: 11012, column: 37, scope: !3076)
!12323 = !DILocation(line: 11012, column: 6, scope: !3076)
!12324 = !DILocation(line: 11012, column: 48, scope: !3076)
!12325 = !DILocation(line: 11013, column: 9, scope: !3096)
!12326 = !DILocation(line: 11013, column: 9, scope: !3076)
!12327 = !DILocation(line: 11014, column: 9, scope: !3095)
!12328 = !DILocation(line: 11014, column: 14, scope: !12329)
!12329 = !DILexicalBlockFile(scope: !3094, file: !616, discriminator: 1)
!12330 = !DILocation(line: 11014, column: 24, scope: !3094)
!12331 = !DILocation(line: 11014, column: 54, scope: !3094)
!12332 = !DILocation(line: 11014, column: 73, scope: !12333)
!12333 = distinct !DILexicalBlock(scope: !3094, file: !616, line: 11014, column: 70)
!12334 = !DILocation(line: 11014, column: 90, scope: !12333)
!12335 = !DILocation(line: 11014, column: 70, scope: !12333)
!12336 = !DILocation(line: 11014, column: 100, scope: !12333)
!12337 = !DILocation(line: 11014, column: 70, scope: !3094)
!12338 = !DILocation(line: 11014, column: 70, scope: !12339)
!12339 = !DILexicalBlockFile(scope: !3094, file: !616, discriminator: 2)
!12340 = !DILocation(line: 11014, column: 131, scope: !12341)
!12341 = !DILexicalBlockFile(scope: !12333, file: !616, discriminator: 3)
!12342 = !DILocation(line: 11014, column: 149, scope: !12333)
!12343 = !DILocation(line: 11014, column: 159, scope: !12333)
!12344 = !DILocation(line: 11014, column: 184, scope: !12333)
!12345 = !DILocation(line: 11014, column: 115, scope: !12333)
!12346 = !DILocation(line: 11014, column: 203, scope: !12347)
!12347 = !DILexicalBlockFile(scope: !3095, file: !616, discriminator: 4)
!12348 = !DILocation(line: 11014, column: 203, scope: !3094)
!12349 = !DILocation(line: 11014, column: 203, scope: !12350)
!12350 = !DILexicalBlockFile(scope: !3094, file: !616, discriminator: 5)
!12351 = !DILocation(line: 11015, column: 9, scope: !3095)
!12352 = !DILocation(line: 11017, column: 12, scope: !3076)
!12353 = !DILocation(line: 11017, column: 5, scope: !3076)
!12354 = !DILocation(line: 11018, column: 1, scope: !3076)
!12355 = !DILocation(line: 11027, column: 27, scope: !3097)
!12356 = !DILocation(line: 11029, column: 5, scope: !3097)
!12357 = !DILocation(line: 11029, column: 9, scope: !3097)
!12358 = !DILocation(line: 11037, column: 12, scope: !3097)
!12359 = !DILocation(line: 11037, column: 10, scope: !3097)
!12360 = !DILocation(line: 11050, column: 9, scope: !12361)
!12361 = distinct !DILexicalBlock(scope: !3097, file: !616, line: 11050, column: 9)
!12362 = !DILocation(line: 11050, column: 14, scope: !12361)
!12363 = !DILocation(line: 11050, column: 9, scope: !3097)
!12364 = !DILocation(line: 11051, column: 32, scope: !12361)
!12365 = !DILocation(line: 11051, column: 16, scope: !12361)
!12366 = !DILocation(line: 11051, column: 9, scope: !12361)
!12367 = !DILocation(line: 11053, column: 62, scope: !12361)
!12368 = !DILocation(line: 11053, column: 9, scope: !12361)
!12369 = !DILocation(line: 11054, column: 1, scope: !3097)
!12370 = !DILocation(line: 11062, column: 33, scope: !3101)
!12371 = !DILocation(line: 11062, column: 49, scope: !3101)
!12372 = !DILocation(line: 11064, column: 5, scope: !3101)
!12373 = !DILocation(line: 11064, column: 9, scope: !3101)
!12374 = !DILocation(line: 11065, column: 5, scope: !3101)
!12375 = !DILocation(line: 11065, column: 9, scope: !3101)
!12376 = !DILocation(line: 11067, column: 34, scope: !12377)
!12377 = distinct !DILexicalBlock(scope: !3101, file: !616, line: 11067, column: 9)
!12378 = !DILocation(line: 11067, column: 10, scope: !12377)
!12379 = !DILocation(line: 11067, column: 9, scope: !3101)
!12380 = !DILocation(line: 11068, column: 9, scope: !12377)
!12381 = !DILocation(line: 11073, column: 39, scope: !3101)
!12382 = !DILocation(line: 11073, column: 19, scope: !3101)
!12383 = !DILocation(line: 11073, column: 17, scope: !3101)
!12384 = !DILocation(line: 11074, column: 9, scope: !12385)
!12385 = distinct !DILexicalBlock(scope: !3101, file: !616, line: 11074, column: 9)
!12386 = !DILocation(line: 11074, column: 21, scope: !12385)
!12387 = !DILocation(line: 11074, column: 9, scope: !3101)
!12388 = !DILocation(line: 11075, column: 9, scope: !12385)
!12389 = !DILocation(line: 11076, column: 28, scope: !3101)
!12390 = !DILocation(line: 11076, column: 12, scope: !3101)
!12391 = !DILocation(line: 11076, column: 5, scope: !3101)
!12392 = !DILocation(line: 11077, column: 1, scope: !3101)
!12393 = !DILocation(line: 11085, column: 33, scope: !3107)
!12394 = !DILocation(line: 11085, column: 49, scope: !3107)
!12395 = !DILocation(line: 11087, column: 5, scope: !3107)
!12396 = !DILocation(line: 11087, column: 9, scope: !3107)
!12397 = !DILocation(line: 11087, column: 13, scope: !3107)
!12398 = !DILocation(line: 11089, column: 34, scope: !12399)
!12399 = distinct !DILexicalBlock(scope: !3107, file: !616, line: 11089, column: 9)
!12400 = !DILocation(line: 11089, column: 10, scope: !12399)
!12401 = !DILocation(line: 11089, column: 9, scope: !3107)
!12402 = !DILocation(line: 11090, column: 9, scope: !12399)
!12403 = !DILocation(line: 11095, column: 29, scope: !12404)
!12404 = distinct !DILexicalBlock(scope: !3107, file: !616, line: 11095, column: 9)
!12405 = !DILocation(line: 11095, column: 33, scope: !12404)
!12406 = !DILocation(line: 11095, column: 9, scope: !12404)
!12407 = !DILocation(line: 11095, column: 58, scope: !12404)
!12408 = !DILocation(line: 11095, column: 9, scope: !3107)
!12409 = !DILocation(line: 11096, column: 9, scope: !12404)
!12410 = !DILocation(line: 11097, column: 58, scope: !3107)
!12411 = !DILocation(line: 11097, column: 5, scope: !3107)
!12412 = !DILocation(line: 11098, column: 1, scope: !3107)
!12413 = !DILocation(line: 788, column: 26, scope: !781)
!12414 = !DILocation(line: 788, column: 35, scope: !781)
!12415 = !DILocation(line: 789, column: 5, scope: !781)
!12416 = !DILocation(line: 789, column: 13, scope: !781)
!12417 = !DILocation(line: 789, column: 30, scope: !781)
!12418 = !DILocation(line: 789, column: 20, scope: !781)
!12419 = !DILocation(line: 790, column: 5, scope: !781)
!12420 = !DILocation(line: 790, column: 15, scope: !781)
!12421 = !DILocation(line: 790, column: 25, scope: !781)
!12422 = !DILocation(line: 791, column: 5, scope: !781)
!12423 = !DILocation(line: 791, column: 16, scope: !781)
!12424 = !DILocation(line: 792, column: 5, scope: !781)
!12425 = !DILocation(line: 792, column: 11, scope: !781)
!12426 = !DILocation(line: 801, column: 9, scope: !12427)
!12427 = distinct !DILexicalBlock(scope: !781, file: !616, line: 801, column: 9)
!12428 = !DILocation(line: 801, column: 11, scope: !12427)
!12429 = !DILocation(line: 801, column: 9, scope: !781)
!12430 = !DILocation(line: 802, column: 22, scope: !12431)
!12431 = distinct !DILexicalBlock(scope: !12427, file: !616, line: 801, column: 26)
!12432 = !DILocation(line: 802, column: 9, scope: !12431)
!12433 = !DILocation(line: 803, column: 9, scope: !12431)
!12434 = !DILocation(line: 807, column: 5, scope: !781)
!12435 = !DILocation(line: 807, column: 11, scope: !781)
!12436 = !DILocation(line: 807, column: 19, scope: !781)
!12437 = !{!5513, !3868, i64 64}
!12438 = !DILocation(line: 809, column: 9, scope: !12439)
!12439 = distinct !DILexicalBlock(scope: !781, file: !616, line: 809, column: 9)
!12440 = !DILocation(line: 809, column: 11, scope: !12439)
!12441 = !DILocation(line: 809, column: 9, scope: !781)
!12442 = !DILocation(line: 810, column: 14, scope: !12443)
!12443 = distinct !DILexicalBlock(scope: !12444, file: !616, line: 810, column: 13)
!12444 = distinct !DILexicalBlock(scope: !12439, file: !616, line: 809, column: 33)
!12445 = !DILocation(line: 810, column: 20, scope: !12443)
!12446 = !DILocation(line: 810, column: 13, scope: !12444)
!12447 = !DILocation(line: 811, column: 26, scope: !12448)
!12448 = distinct !DILexicalBlock(scope: !12443, file: !616, line: 810, column: 30)
!12449 = !DILocation(line: 811, column: 88, scope: !12448)
!12450 = !DILocation(line: 811, column: 94, scope: !12448)
!12451 = !DILocation(line: 811, column: 110, scope: !12452)
!12452 = !DILexicalBlockFile(scope: !12448, file: !616, discriminator: 1)
!12453 = !DILocation(line: 811, column: 116, scope: !12448)
!12454 = !DILocation(line: 811, column: 88, scope: !12455)
!12455 = !DILexicalBlockFile(scope: !12448, file: !616, discriminator: 2)
!12456 = !DILocation(line: 811, column: 136, scope: !12457)
!12457 = !DILexicalBlockFile(scope: !12458, file: !616, discriminator: 4)
!12458 = !DILexicalBlockFile(scope: !12448, file: !616, discriminator: 3)
!12459 = !DILocation(line: 811, column: 142, scope: !12448)
!12460 = !DILocation(line: 811, column: 136, scope: !12448)
!12461 = !DILocation(line: 811, column: 169, scope: !12448)
!12462 = !DILocation(line: 811, column: 175, scope: !12448)
!12463 = !DILocation(line: 811, column: 191, scope: !12464)
!12464 = !DILexicalBlockFile(scope: !12448, file: !616, discriminator: 5)
!12465 = !DILocation(line: 811, column: 197, scope: !12448)
!12466 = !DILocation(line: 811, column: 169, scope: !12467)
!12467 = !DILexicalBlockFile(scope: !12448, file: !616, discriminator: 6)
!12468 = !DILocation(line: 811, column: 13, scope: !12469)
!12469 = !DILexicalBlockFile(scope: !12470, file: !616, discriminator: 8)
!12470 = !DILexicalBlockFile(scope: !12448, file: !616, discriminator: 7)
!12471 = !DILocation(line: 813, column: 13, scope: !12448)
!12472 = !DILocation(line: 815, column: 9, scope: !12444)
!12473 = !DILocation(line: 815, column: 15, scope: !12444)
!12474 = !DILocation(line: 815, column: 20, scope: !12444)
!12475 = !DILocation(line: 816, column: 9, scope: !12444)
!12476 = !DILocation(line: 816, column: 15, scope: !12444)
!12477 = !DILocation(line: 816, column: 22, scope: !12444)
!12478 = !DILocation(line: 817, column: 9, scope: !12444)
!12479 = !DILocation(line: 817, column: 15, scope: !12444)
!12480 = !DILocation(line: 817, column: 22, scope: !12444)
!12481 = !{!5513, !3894, i64 48}
!12482 = !DILocation(line: 818, column: 24, scope: !12444)
!12483 = !DILocation(line: 818, column: 9, scope: !12444)
!12484 = !DILocation(line: 818, column: 15, scope: !12444)
!12485 = !DILocation(line: 818, column: 22, scope: !12444)
!12486 = !DILocation(line: 819, column: 9, scope: !12444)
!12487 = !DILocation(line: 819, column: 15, scope: !12444)
!12488 = !DILocation(line: 819, column: 18, scope: !12444)
!12489 = !DILocation(line: 820, column: 9, scope: !12444)
!12490 = !DILocation(line: 823, column: 36, scope: !781)
!12491 = !DILocation(line: 823, column: 15, scope: !781)
!12492 = !DILocation(line: 823, column: 13, scope: !781)
!12493 = !DILocation(line: 824, column: 9, scope: !792)
!12494 = !DILocation(line: 824, column: 9, scope: !781)
!12495 = !DILocation(line: 847, column: 9, scope: !791)
!12496 = !DILocation(line: 847, column: 13, scope: !791)
!12497 = !DILocation(line: 847, column: 47, scope: !791)
!12498 = !DILocation(line: 847, column: 56, scope: !791)
!12499 = !DILocation(line: 847, column: 25, scope: !791)
!12500 = !DILocation(line: 848, column: 9, scope: !791)
!12501 = !DILocation(line: 848, column: 14, scope: !12502)
!12502 = !DILexicalBlockFile(scope: !794, file: !616, discriminator: 1)
!12503 = !DILocation(line: 848, column: 24, scope: !794)
!12504 = !DILocation(line: 848, column: 54, scope: !794)
!12505 = !DILocation(line: 848, column: 72, scope: !12506)
!12506 = distinct !DILexicalBlock(scope: !794, file: !616, line: 848, column: 69)
!12507 = !DILocation(line: 848, column: 89, scope: !12506)
!12508 = !DILocation(line: 848, column: 69, scope: !12506)
!12509 = !DILocation(line: 848, column: 99, scope: !12506)
!12510 = !DILocation(line: 848, column: 69, scope: !794)
!12511 = !DILocation(line: 848, column: 69, scope: !12512)
!12512 = !DILexicalBlockFile(scope: !794, file: !616, discriminator: 2)
!12513 = !DILocation(line: 848, column: 130, scope: !12514)
!12514 = !DILexicalBlockFile(scope: !12506, file: !616, discriminator: 3)
!12515 = !DILocation(line: 848, column: 148, scope: !12506)
!12516 = !DILocation(line: 848, column: 158, scope: !12506)
!12517 = !DILocation(line: 848, column: 183, scope: !12506)
!12518 = !DILocation(line: 848, column: 114, scope: !12506)
!12519 = !DILocation(line: 848, column: 202, scope: !12520)
!12520 = !DILexicalBlockFile(scope: !791, file: !616, discriminator: 4)
!12521 = !DILocation(line: 848, column: 202, scope: !794)
!12522 = !DILocation(line: 848, column: 202, scope: !12523)
!12523 = !DILexicalBlockFile(scope: !794, file: !616, discriminator: 5)
!12524 = !DILocation(line: 849, column: 14, scope: !12525)
!12525 = distinct !DILexicalBlock(scope: !791, file: !616, line: 849, column: 13)
!12526 = !DILocation(line: 849, column: 13, scope: !791)
!12527 = !DILocation(line: 850, column: 19, scope: !12525)
!12528 = !DILocation(line: 850, column: 13, scope: !12525)
!12529 = !DILocation(line: 852, column: 5, scope: !792)
!12530 = !DILocation(line: 852, column: 5, scope: !791)
!12531 = !DILocation(line: 854, column: 9, scope: !800)
!12532 = !DILocation(line: 855, column: 16, scope: !12533)
!12533 = distinct !DILexicalBlock(scope: !800, file: !616, line: 855, column: 13)
!12534 = !DILocation(line: 855, column: 20, scope: !12533)
!12535 = !DILocation(line: 855, column: 29, scope: !12533)
!12536 = !{!3897, !3868, i64 160}
!12537 = !DILocation(line: 855, column: 42, scope: !12533)
!12538 = !DILocation(line: 855, column: 57, scope: !12533)
!12539 = !DILocation(line: 855, column: 62, scope: !12540)
!12540 = !DILexicalBlockFile(scope: !12533, file: !616, discriminator: 1)
!12541 = !DILocation(line: 855, column: 66, scope: !12533)
!12542 = !DILocation(line: 855, column: 75, scope: !12533)
!12543 = !DILocation(line: 855, column: 89, scope: !12533)
!12544 = !{!12545, !3868, i64 0}
!12545 = !{!"", !3868, i64 0, !3868, i64 8}
!12546 = !DILocation(line: 855, column: 102, scope: !12533)
!12547 = !DILocation(line: 855, column: 13, scope: !800)
!12548 = !DILocation(line: 856, column: 40, scope: !12533)
!12549 = !DILocation(line: 856, column: 21, scope: !12533)
!12550 = !DILocation(line: 856, column: 19, scope: !12533)
!12551 = !DILocation(line: 856, column: 13, scope: !12533)
!12552 = !DILocation(line: 858, column: 19, scope: !12533)
!12553 = !DILocation(line: 859, column: 14, scope: !799)
!12554 = !DILocation(line: 859, column: 13, scope: !800)
!12555 = !DILocation(line: 860, column: 13, scope: !798)
!12556 = !DILocation(line: 861, column: 17, scope: !797)
!12557 = !DILocation(line: 861, column: 23, scope: !797)
!12558 = !DILocation(line: 861, column: 17, scope: !798)
!12559 = !DILocation(line: 862, column: 17, scope: !796)
!12560 = !DILocation(line: 862, column: 21, scope: !796)
!12561 = !DILocation(line: 863, column: 17, scope: !796)
!12562 = !DILocation(line: 863, column: 21, scope: !796)
!12563 = !DILocation(line: 863, column: 44, scope: !796)
!12564 = !DILocation(line: 863, column: 30, scope: !796)
!12565 = !DILocation(line: 865, column: 21, scope: !12566)
!12566 = distinct !DILexicalBlock(scope: !796, file: !616, line: 865, column: 21)
!12567 = !DILocation(line: 865, column: 21, scope: !796)
!12568 = !DILocation(line: 866, column: 21, scope: !12569)
!12569 = distinct !DILexicalBlock(scope: !12566, file: !616, line: 865, column: 29)
!12570 = !DILocation(line: 866, column: 27, scope: !12569)
!12571 = !DILocation(line: 866, column: 32, scope: !12569)
!12572 = !DILocation(line: 867, column: 21, scope: !12569)
!12573 = !DILocation(line: 867, column: 27, scope: !12569)
!12574 = !DILocation(line: 867, column: 34, scope: !12569)
!12575 = !DILocation(line: 868, column: 21, scope: !12569)
!12576 = !DILocation(line: 868, column: 27, scope: !12569)
!12577 = !DILocation(line: 868, column: 34, scope: !12569)
!12578 = !DILocation(line: 869, column: 36, scope: !12569)
!12579 = !DILocation(line: 869, column: 21, scope: !12569)
!12580 = !DILocation(line: 869, column: 27, scope: !12569)
!12581 = !DILocation(line: 869, column: 34, scope: !12569)
!12582 = !DILocation(line: 870, column: 32, scope: !12569)
!12583 = !DILocation(line: 870, column: 21, scope: !12569)
!12584 = !DILocation(line: 870, column: 27, scope: !12569)
!12585 = !DILocation(line: 870, column: 30, scope: !12569)
!12586 = !DILocation(line: 871, column: 28, scope: !12569)
!12587 = !DILocation(line: 871, column: 21, scope: !12569)
!12588 = !DILocation(line: 873, column: 13, scope: !797)
!12589 = !DILocation(line: 873, column: 13, scope: !12590)
!12590 = !DILexicalBlockFile(scope: !797, file: !616, discriminator: 1)
!12591 = !DILocation(line: 873, column: 13, scope: !796)
!12592 = !DILocation(line: 874, column: 9, scope: !798)
!12593 = !DILocation(line: 877, column: 10, scope: !12594)
!12594 = distinct !DILexicalBlock(scope: !781, file: !616, line: 877, column: 9)
!12595 = !DILocation(line: 877, column: 9, scope: !781)
!12596 = !DILocation(line: 878, column: 14, scope: !12597)
!12597 = distinct !DILexicalBlock(scope: !12598, file: !616, line: 878, column: 13)
!12598 = distinct !DILexicalBlock(scope: !12594, file: !616, line: 877, column: 17)
!12599 = !DILocation(line: 878, column: 13, scope: !12598)
!12600 = !DILocation(line: 879, column: 26, scope: !12597)
!12601 = !DILocation(line: 879, column: 83, scope: !12597)
!12602 = !DILocation(line: 879, column: 89, scope: !12597)
!12603 = !DILocation(line: 879, column: 105, scope: !12604)
!12604 = !DILexicalBlockFile(scope: !12597, file: !616, discriminator: 1)
!12605 = !DILocation(line: 879, column: 111, scope: !12597)
!12606 = !DILocation(line: 879, column: 83, scope: !12607)
!12607 = !DILexicalBlockFile(scope: !12597, file: !616, discriminator: 2)
!12608 = !DILocation(line: 879, column: 131, scope: !12609)
!12609 = !DILexicalBlockFile(scope: !12610, file: !616, discriminator: 4)
!12610 = !DILexicalBlockFile(scope: !12597, file: !616, discriminator: 3)
!12611 = !DILocation(line: 879, column: 137, scope: !12597)
!12612 = !DILocation(line: 879, column: 131, scope: !12597)
!12613 = !DILocation(line: 879, column: 164, scope: !12597)
!12614 = !DILocation(line: 879, column: 170, scope: !12597)
!12615 = !DILocation(line: 879, column: 186, scope: !12616)
!12616 = !DILexicalBlockFile(scope: !12597, file: !616, discriminator: 5)
!12617 = !DILocation(line: 879, column: 192, scope: !12597)
!12618 = !DILocation(line: 879, column: 164, scope: !12619)
!12619 = !DILexicalBlockFile(scope: !12597, file: !616, discriminator: 6)
!12620 = !DILocation(line: 879, column: 13, scope: !12621)
!12621 = !DILexicalBlockFile(scope: !12622, file: !616, discriminator: 8)
!12622 = !DILexicalBlockFile(scope: !12597, file: !616, discriminator: 7)
!12623 = !DILocation(line: 880, column: 9, scope: !12598)
!12624 = !DILocation(line: 890, column: 45, scope: !781)
!12625 = !DILocation(line: 890, column: 30, scope: !781)
!12626 = !DILocation(line: 890, column: 54, scope: !781)
!12627 = !DILocation(line: 890, column: 12, scope: !781)
!12628 = !DILocation(line: 899, column: 49, scope: !781)
!12629 = !DILocation(line: 899, column: 31, scope: !781)
!12630 = !DILocation(line: 899, column: 58, scope: !781)
!12631 = !DILocation(line: 899, column: 29, scope: !781)
!12632 = !DILocation(line: 899, column: 12, scope: !781)
!12633 = !DILocation(line: 900, column: 9, scope: !805)
!12634 = !DILocation(line: 900, column: 26, scope: !805)
!12635 = !DILocation(line: 900, column: 19, scope: !805)
!12636 = !DILocation(line: 900, column: 16, scope: !805)
!12637 = !DILocation(line: 900, column: 9, scope: !781)
!12638 = !DILocation(line: 901, column: 22, scope: !804)
!12639 = !DILocation(line: 901, column: 79, scope: !804)
!12640 = !DILocation(line: 901, column: 85, scope: !804)
!12641 = !DILocation(line: 901, column: 101, scope: !12642)
!12642 = !DILexicalBlockFile(scope: !804, file: !616, discriminator: 1)
!12643 = !DILocation(line: 901, column: 107, scope: !804)
!12644 = !DILocation(line: 901, column: 79, scope: !12645)
!12645 = !DILexicalBlockFile(scope: !804, file: !616, discriminator: 2)
!12646 = !DILocation(line: 901, column: 127, scope: !12647)
!12647 = !DILexicalBlockFile(scope: !12648, file: !616, discriminator: 4)
!12648 = !DILexicalBlockFile(scope: !804, file: !616, discriminator: 3)
!12649 = !DILocation(line: 901, column: 133, scope: !804)
!12650 = !DILocation(line: 901, column: 127, scope: !804)
!12651 = !DILocation(line: 901, column: 160, scope: !804)
!12652 = !DILocation(line: 901, column: 166, scope: !804)
!12653 = !DILocation(line: 901, column: 182, scope: !12654)
!12654 = !DILexicalBlockFile(scope: !804, file: !616, discriminator: 5)
!12655 = !DILocation(line: 901, column: 188, scope: !804)
!12656 = !DILocation(line: 901, column: 160, scope: !12657)
!12657 = !DILexicalBlockFile(scope: !804, file: !616, discriminator: 6)
!12658 = !DILocation(line: 901, column: 9, scope: !12659)
!12659 = !DILexicalBlockFile(scope: !12660, file: !616, discriminator: 8)
!12660 = !DILexicalBlockFile(scope: !804, file: !616, discriminator: 7)
!12661 = !DILocation(line: 902, column: 9, scope: !804)
!12662 = !DILocation(line: 902, column: 14, scope: !12663)
!12663 = !DILexicalBlockFile(scope: !803, file: !616, discriminator: 1)
!12664 = !DILocation(line: 902, column: 24, scope: !803)
!12665 = !DILocation(line: 902, column: 54, scope: !803)
!12666 = !DILocation(line: 902, column: 70, scope: !12667)
!12667 = distinct !DILexicalBlock(scope: !803, file: !616, line: 902, column: 67)
!12668 = !DILocation(line: 902, column: 87, scope: !12667)
!12669 = !DILocation(line: 902, column: 67, scope: !12667)
!12670 = !DILocation(line: 902, column: 97, scope: !12667)
!12671 = !DILocation(line: 902, column: 67, scope: !803)
!12672 = !DILocation(line: 902, column: 67, scope: !12673)
!12673 = !DILexicalBlockFile(scope: !803, file: !616, discriminator: 2)
!12674 = !DILocation(line: 902, column: 128, scope: !12675)
!12675 = !DILexicalBlockFile(scope: !12667, file: !616, discriminator: 3)
!12676 = !DILocation(line: 902, column: 146, scope: !12667)
!12677 = !DILocation(line: 902, column: 156, scope: !12667)
!12678 = !DILocation(line: 902, column: 181, scope: !12667)
!12679 = !DILocation(line: 902, column: 112, scope: !12667)
!12680 = !DILocation(line: 902, column: 200, scope: !12681)
!12681 = !DILexicalBlockFile(scope: !804, file: !616, discriminator: 4)
!12682 = !DILocation(line: 902, column: 200, scope: !803)
!12683 = !DILocation(line: 902, column: 200, scope: !12684)
!12684 = !DILexicalBlockFile(scope: !803, file: !616, discriminator: 5)
!12685 = !DILocation(line: 903, column: 9, scope: !804)
!12686 = !DILocation(line: 906, column: 5, scope: !781)
!12687 = !DILocation(line: 906, column: 11, scope: !781)
!12688 = !DILocation(line: 906, column: 16, scope: !781)
!12689 = !DILocation(line: 907, column: 20, scope: !781)
!12690 = !DILocation(line: 907, column: 5, scope: !781)
!12691 = !DILocation(line: 907, column: 11, scope: !781)
!12692 = !DILocation(line: 907, column: 18, scope: !781)
!12693 = !DILocation(line: 908, column: 20, scope: !781)
!12694 = !DILocation(line: 908, column: 5, scope: !781)
!12695 = !DILocation(line: 908, column: 11, scope: !781)
!12696 = !DILocation(line: 908, column: 18, scope: !781)
!12697 = !DILocation(line: 909, column: 20, scope: !781)
!12698 = !DILocation(line: 909, column: 5, scope: !781)
!12699 = !DILocation(line: 909, column: 11, scope: !781)
!12700 = !DILocation(line: 909, column: 18, scope: !781)
!12701 = !DILocation(line: 910, column: 5, scope: !781)
!12702 = !DILocation(line: 910, column: 11, scope: !781)
!12703 = !DILocation(line: 910, column: 14, scope: !781)
!12704 = !DILocation(line: 911, column: 21, scope: !781)
!12705 = !DILocation(line: 911, column: 5, scope: !781)
!12706 = !DILocation(line: 911, column: 11, scope: !781)
!12707 = !DILocation(line: 911, column: 19, scope: !781)
!12708 = !DILocation(line: 912, column: 5, scope: !781)
!12709 = !DILocation(line: 913, column: 1, scope: !781)
!12710 = !DILocation(line: 2502, column: 27, scope: !818)
!12711 = !DILocation(line: 2502, column: 43, scope: !818)
!12712 = !DILocation(line: 2502, column: 53, scope: !818)
!12713 = !DILocation(line: 2502, column: 65, scope: !818)
!12714 = !DILocation(line: 2505, column: 34, scope: !818)
!12715 = !DILocation(line: 2505, column: 40, scope: !818)
!12716 = !DILocation(line: 2505, column: 48, scope: !818)
!12717 = !DILocation(line: 2505, column: 12, scope: !818)
!12718 = !DILocation(line: 2505, column: 5, scope: !818)
!12719 = !DILocation(line: 781, column: 22, scope: !1051)
!12720 = !DILocation(line: 782, column: 9, scope: !1059)
!12721 = !DILocation(line: 782, column: 15, scope: !1059)
!12722 = !DILocation(line: 782, column: 9, scope: !1051)
!12723 = !DILocation(line: 783, column: 9, scope: !1058)
!12724 = !DILocation(line: 783, column: 14, scope: !12725)
!12725 = !DILexicalBlockFile(scope: !1057, file: !616, discriminator: 1)
!12726 = !DILocation(line: 783, column: 24, scope: !1057)
!12727 = !DILocation(line: 783, column: 47, scope: !1057)
!12728 = !DILocation(line: 783, column: 53, scope: !1057)
!12729 = !DILocation(line: 783, column: 67, scope: !1063)
!12730 = !DILocation(line: 783, column: 75, scope: !1063)
!12731 = !DILocation(line: 783, column: 67, scope: !1057)
!12732 = !DILocation(line: 783, column: 93, scope: !12733)
!12733 = !DILexicalBlockFile(scope: !1062, file: !616, discriminator: 2)
!12734 = !DILocation(line: 783, column: 99, scope: !1062)
!12735 = !DILocation(line: 783, column: 108, scope: !1062)
!12736 = !DILocation(line: 783, column: 122, scope: !1062)
!12737 = !DILocation(line: 783, column: 127, scope: !12738)
!12738 = !DILexicalBlockFile(scope: !1061, file: !616, discriminator: 4)
!12739 = !DILocation(line: 783, column: 137, scope: !1061)
!12740 = !DILocation(line: 783, column: 167, scope: !1061)
!12741 = !DILocation(line: 783, column: 185, scope: !12742)
!12742 = distinct !DILexicalBlock(scope: !1061, file: !616, line: 783, column: 182)
!12743 = !DILocation(line: 783, column: 202, scope: !12742)
!12744 = !DILocation(line: 783, column: 182, scope: !12742)
!12745 = !DILocation(line: 783, column: 212, scope: !12742)
!12746 = !DILocation(line: 783, column: 182, scope: !1061)
!12747 = !DILocation(line: 783, column: 182, scope: !12748)
!12748 = !DILexicalBlockFile(scope: !1061, file: !616, discriminator: 5)
!12749 = !DILocation(line: 783, column: 243, scope: !12750)
!12750 = !DILexicalBlockFile(scope: !12742, file: !616, discriminator: 6)
!12751 = !DILocation(line: 783, column: 261, scope: !12742)
!12752 = !DILocation(line: 783, column: 271, scope: !12742)
!12753 = !DILocation(line: 783, column: 296, scope: !12742)
!12754 = !DILocation(line: 783, column: 227, scope: !12742)
!12755 = !DILocation(line: 783, column: 315, scope: !12756)
!12756 = !DILexicalBlockFile(scope: !1062, file: !616, discriminator: 7)
!12757 = !DILocation(line: 783, column: 315, scope: !1061)
!12758 = !DILocation(line: 783, column: 315, scope: !12759)
!12759 = !DILexicalBlockFile(scope: !1061, file: !616, discriminator: 8)
!12760 = !DILocation(line: 783, column: 328, scope: !12761)
!12761 = !DILexicalBlockFile(scope: !1062, file: !616, discriminator: 9)
!12762 = !DILocation(line: 783, column: 330, scope: !12763)
!12763 = !DILexicalBlockFile(scope: !12764, file: !616, discriminator: 10)
!12764 = !DILexicalBlockFile(scope: !1058, file: !616, discriminator: 3)
!12765 = !DILocation(line: 783, column: 330, scope: !1057)
!12766 = !DILocation(line: 784, column: 5, scope: !1058)
!12767 = !DILocation(line: 785, column: 1, scope: !1051)
!12768 = !DILocation(line: 640, column: 25, scope: !806)
!12769 = !DILocation(line: 640, column: 33, scope: !806)
!12770 = !DILocation(line: 640, column: 48, scope: !806)
!12771 = !DILocation(line: 642, column: 5, scope: !806)
!12772 = !DILocation(line: 642, column: 9, scope: !806)
!12773 = !DILocation(line: 643, column: 5, scope: !806)
!12774 = !DILocation(line: 643, column: 10, scope: !806)
!12775 = !DILocation(line: 645, column: 5, scope: !806)
!12776 = !DILocation(line: 645, column: 15, scope: !806)
!12777 = !DILocation(line: 645, column: 38, scope: !806)
!12778 = !DILocation(line: 645, column: 23, scope: !806)
!12779 = !DILocation(line: 646, column: 9, scope: !12780)
!12780 = distinct !DILexicalBlock(scope: !806, file: !616, line: 646, column: 9)
!12781 = !DILocation(line: 646, column: 15, scope: !12780)
!12782 = !DILocation(line: 646, column: 9, scope: !806)
!12783 = !DILocation(line: 647, column: 22, scope: !12784)
!12784 = distinct !DILexicalBlock(scope: !12780, file: !616, line: 646, column: 30)
!12785 = !DILocation(line: 649, column: 22, scope: !12784)
!12786 = !DILocation(line: 649, column: 45, scope: !12784)
!12787 = !DILocation(line: 649, column: 50, scope: !12784)
!12788 = !DILocation(line: 649, column: 60, scope: !12784)
!12789 = !DILocation(line: 647, column: 9, scope: !12784)
!12790 = !DILocation(line: 650, column: 9, scope: !12784)
!12791 = !DILocation(line: 653, column: 43, scope: !806)
!12792 = !DILocation(line: 653, column: 18, scope: !806)
!12793 = !DILocation(line: 653, column: 16, scope: !806)
!12794 = !DILocation(line: 654, column: 5, scope: !806)
!12795 = !DILocation(line: 654, column: 10, scope: !12796)
!12796 = !DILexicalBlockFile(scope: !817, file: !616, discriminator: 1)
!12797 = !DILocation(line: 654, column: 20, scope: !817)
!12798 = !DILocation(line: 654, column: 50, scope: !817)
!12799 = !DILocation(line: 654, column: 66, scope: !12800)
!12800 = distinct !DILexicalBlock(scope: !817, file: !616, line: 654, column: 63)
!12801 = !DILocation(line: 654, column: 83, scope: !12800)
!12802 = !DILocation(line: 654, column: 63, scope: !12800)
!12803 = !DILocation(line: 654, column: 93, scope: !12800)
!12804 = !DILocation(line: 654, column: 63, scope: !817)
!12805 = !DILocation(line: 654, column: 63, scope: !12806)
!12806 = !DILexicalBlockFile(scope: !817, file: !616, discriminator: 2)
!12807 = !DILocation(line: 654, column: 124, scope: !12808)
!12808 = !DILexicalBlockFile(scope: !12800, file: !616, discriminator: 3)
!12809 = !DILocation(line: 654, column: 142, scope: !12800)
!12810 = !DILocation(line: 654, column: 152, scope: !12800)
!12811 = !DILocation(line: 654, column: 177, scope: !12800)
!12812 = !DILocation(line: 654, column: 108, scope: !12800)
!12813 = !DILocation(line: 654, column: 196, scope: !12814)
!12814 = !DILexicalBlockFile(scope: !806, file: !616, discriminator: 4)
!12815 = !DILocation(line: 654, column: 196, scope: !817)
!12816 = !DILocation(line: 654, column: 196, scope: !12817)
!12817 = !DILexicalBlockFile(scope: !817, file: !616, discriminator: 5)
!12818 = !DILocation(line: 655, column: 9, scope: !12819)
!12819 = distinct !DILexicalBlock(scope: !806, file: !616, line: 655, column: 9)
!12820 = !DILocation(line: 655, column: 18, scope: !12819)
!12821 = !DILocation(line: 655, column: 22, scope: !12819)
!12822 = !DILocation(line: 655, column: 25, scope: !12823)
!12823 = !DILexicalBlockFile(scope: !12819, file: !616, discriminator: 1)
!12824 = !DILocation(line: 655, column: 36, scope: !12819)
!12825 = !DILocation(line: 655, column: 9, scope: !806)
!12826 = !DILocation(line: 656, column: 25, scope: !12827)
!12827 = distinct !DILexicalBlock(scope: !12819, file: !616, line: 655, column: 50)
!12828 = !DILocation(line: 656, column: 9, scope: !12827)
!12829 = !DILocation(line: 658, column: 9, scope: !12827)
!12830 = !DILocation(line: 660, column: 9, scope: !12831)
!12831 = distinct !DILexicalBlock(scope: !806, file: !616, line: 660, column: 9)
!12832 = !DILocation(line: 660, column: 18, scope: !12831)
!12833 = !DILocation(line: 660, column: 22, scope: !12831)
!12834 = !DILocation(line: 660, column: 25, scope: !12835)
!12835 = !DILexicalBlockFile(scope: !12831, file: !616, discriminator: 1)
!12836 = !DILocation(line: 660, column: 36, scope: !12831)
!12837 = !DILocation(line: 660, column: 9, scope: !806)
!12838 = !DILocation(line: 661, column: 25, scope: !12839)
!12839 = distinct !DILexicalBlock(scope: !12831, file: !616, line: 660, column: 56)
!12840 = !DILocation(line: 661, column: 9, scope: !12839)
!12841 = !DILocation(line: 663, column: 9, scope: !12839)
!12842 = !DILocation(line: 666, column: 15, scope: !806)
!12843 = !DILocation(line: 666, column: 10, scope: !806)
!12844 = !DILocation(line: 666, column: 6, scope: !806)
!12845 = !DILocation(line: 666, column: 8, scope: !806)
!12846 = !DILocation(line: 667, column: 5, scope: !806)
!12847 = !DILocation(line: 668, column: 1, scope: !806)
!12848 = !DILocation(line: 2313, column: 21, scope: !826)
!12849 = !DILocation(line: 2313, column: 44, scope: !826)
!12850 = !DILocation(line: 2314, column: 19, scope: !826)
!12851 = !DILocation(line: 2314, column: 31, scope: !826)
!12852 = !DILocation(line: 2316, column: 5, scope: !826)
!12853 = !DILocation(line: 2316, column: 17, scope: !826)
!12854 = !DILocation(line: 2317, column: 5, scope: !826)
!12855 = !DILocation(line: 2317, column: 9, scope: !826)
!12856 = !DILocation(line: 2324, column: 41, scope: !12857)
!12857 = distinct !DILexicalBlock(scope: !826, file: !616, line: 2324, column: 9)
!12858 = !DILocation(line: 2324, column: 47, scope: !12857)
!12859 = !DILocation(line: 2324, column: 9, scope: !12857)
!12860 = !DILocation(line: 2324, column: 55, scope: !12857)
!12861 = !DILocation(line: 2325, column: 39, scope: !12857)
!12862 = !DILocation(line: 2325, column: 47, scope: !12857)
!12863 = !DILocation(line: 2325, column: 53, scope: !12857)
!12864 = !DILocation(line: 2325, column: 9, scope: !12857)
!12865 = !DILocation(line: 2325, column: 57, scope: !12857)
!12866 = !DILocation(line: 2326, column: 48, scope: !12857)
!12867 = !DILocation(line: 2326, column: 54, scope: !12857)
!12868 = !DILocation(line: 2326, column: 58, scope: !12857)
!12869 = !DILocation(line: 2326, column: 9, scope: !12857)
!12870 = !DILocation(line: 2324, column: 9, scope: !826)
!12871 = !DILocation(line: 2327, column: 9, scope: !12857)
!12872 = !DILocation(line: 2329, column: 7, scope: !870)
!12873 = !DILocation(line: 2329, column: 22, scope: !870)
!12874 = !DILocation(line: 2329, column: 37, scope: !870)
!12875 = !DILocation(line: 2329, column: 35, scope: !870)
!12876 = !DILocation(line: 2330, column: 9, scope: !12877)
!12877 = distinct !DILexicalBlock(scope: !870, file: !616, line: 2330, column: 9)
!12878 = !DILocation(line: 2330, column: 15, scope: !12877)
!12879 = !DILocation(line: 2330, column: 18, scope: !12877)
!12880 = !DILocation(line: 2330, column: 9, scope: !870)
!12881 = !DILocation(line: 2331, column: 24, scope: !12877)
!12882 = !DILocation(line: 2331, column: 30, scope: !12877)
!12883 = !DILocation(line: 2331, column: 18, scope: !12877)
!12884 = !DILocation(line: 2331, column: 16, scope: !12877)
!12885 = !DILocation(line: 2331, column: 9, scope: !12877)
!12886 = !DILocation(line: 2343, column: 11, scope: !12887)
!12887 = distinct !DILexicalBlock(scope: !12877, file: !616, line: 2343, column: 9)
!12888 = !DILocation(line: 2343, column: 28, scope: !12887)
!12889 = !DILocation(line: 2343, column: 32, scope: !12890)
!12890 = !DILexicalBlockFile(scope: !12887, file: !616, discriminator: 1)
!12891 = !DILocation(line: 2343, column: 39, scope: !12887)
!12892 = !DILocation(line: 2343, column: 9, scope: !12877)
!12893 = !DILocation(line: 2344, column: 24, scope: !12887)
!12894 = !DILocation(line: 2344, column: 30, scope: !12887)
!12895 = !DILocation(line: 2344, column: 18, scope: !12887)
!12896 = !DILocation(line: 2344, column: 16, scope: !12887)
!12897 = !DILocation(line: 2344, column: 9, scope: !12887)
!12898 = !DILocation(line: 2348, column: 10, scope: !12899)
!12899 = distinct !DILexicalBlock(scope: !12887, file: !616, line: 2348, column: 9)
!12900 = !DILocation(line: 2348, column: 17, scope: !12899)
!12901 = !DILocation(line: 2348, column: 31, scope: !12899)
!12902 = !DILocation(line: 2348, column: 35, scope: !12903)
!12903 = !DILexicalBlockFile(scope: !12899, file: !616, discriminator: 1)
!12904 = !DILocation(line: 2348, column: 9, scope: !12887)
!12905 = !DILocation(line: 2349, column: 26, scope: !12899)
!12906 = !DILocation(line: 2349, column: 34, scope: !12899)
!12907 = !DILocation(line: 2349, column: 40, scope: !12899)
!12908 = !DILocation(line: 2350, column: 26, scope: !12899)
!12909 = !DILocation(line: 2349, column: 18, scope: !12899)
!12910 = !DILocation(line: 2349, column: 16, scope: !12899)
!12911 = !DILocation(line: 2349, column: 9, scope: !12899)
!12912 = !DILocation(line: 2353, column: 23, scope: !12899)
!12913 = !DILocation(line: 2353, column: 29, scope: !12899)
!12914 = !DILocation(line: 2353, column: 18, scope: !12899)
!12915 = !DILocation(line: 2353, column: 16, scope: !12899)
!12916 = !DILocation(line: 2354, column: 26, scope: !870)
!12917 = !DILocation(line: 2354, column: 5, scope: !870)
!12918 = !DILocation(line: 2354, column: 34, scope: !826)
!12919 = !DILocation(line: 2356, column: 9, scope: !12920)
!12920 = distinct !DILexicalBlock(scope: !826, file: !616, line: 2356, column: 9)
!12921 = !DILocation(line: 2356, column: 16, scope: !12920)
!12922 = !DILocation(line: 2356, column: 9, scope: !826)
!12923 = !DILocation(line: 2357, column: 27, scope: !12924)
!12924 = distinct !DILexicalBlock(scope: !12920, file: !616, line: 2356, column: 22)
!12925 = !DILocation(line: 2357, column: 16, scope: !12924)
!12926 = !DILocation(line: 2357, column: 9, scope: !12924)
!12927 = !DILocation(line: 2360, column: 12, scope: !826)
!12928 = !DILocation(line: 2360, column: 5, scope: !826)
!12929 = !DILocation(line: 2361, column: 1, scope: !826)
!12930 = !DILocation(line: 957, column: 31, scope: !929)
!12931 = !DILocation(line: 957, column: 54, scope: !929)
!12932 = !DILocation(line: 957, column: 64, scope: !929)
!12933 = !DILocation(line: 958, column: 10, scope: !12934)
!12934 = distinct !DILexicalBlock(scope: !929, file: !616, line: 958, column: 9)
!12935 = !DILocation(line: 958, column: 16, scope: !12934)
!12936 = !DILocation(line: 958, column: 23, scope: !12934)
!12937 = !DILocation(line: 958, column: 27, scope: !12938)
!12938 = !DILexicalBlockFile(scope: !12934, file: !616, discriminator: 1)
!12939 = !DILocation(line: 958, column: 33, scope: !12934)
!12940 = !DILocation(line: 958, column: 27, scope: !12934)
!12941 = !DILocation(line: 958, column: 38, scope: !12934)
!12942 = !DILocation(line: 958, column: 42, scope: !12943)
!12943 = !DILexicalBlockFile(scope: !12934, file: !616, discriminator: 2)
!12944 = !DILocation(line: 958, column: 49, scope: !12934)
!12945 = !DILocation(line: 958, column: 9, scope: !929)
!12946 = !DILocation(line: 959, column: 22, scope: !12947)
!12947 = distinct !DILexicalBlock(scope: !12934, file: !616, line: 958, column: 64)
!12948 = !DILocation(line: 961, column: 22, scope: !12947)
!12949 = !DILocation(line: 959, column: 9, scope: !12947)
!12950 = !DILocation(line: 962, column: 9, scope: !12947)
!12951 = !DILocation(line: 964, column: 5, scope: !929)
!12952 = !DILocation(line: 965, column: 1, scope: !929)
!12953 = !DILocation(line: 968, column: 29, scope: !936)
!12954 = !DILocation(line: 968, column: 48, scope: !936)
!12955 = !DILocation(line: 968, column: 60, scope: !936)
!12956 = !DILocation(line: 969, column: 10, scope: !12957)
!12957 = distinct !DILexicalBlock(scope: !936, file: !616, line: 969, column: 9)
!12958 = !DILocation(line: 969, column: 17, scope: !12957)
!12959 = !DILocation(line: 969, column: 31, scope: !12957)
!12960 = !DILocation(line: 969, column: 35, scope: !12961)
!12961 = !DILexicalBlockFile(scope: !12957, file: !616, discriminator: 1)
!12962 = !DILocation(line: 969, column: 38, scope: !12957)
!12963 = !DILocation(line: 969, column: 9, scope: !936)
!12964 = !DILocation(line: 970, column: 22, scope: !12965)
!12965 = distinct !DILexicalBlock(scope: !12957, file: !616, line: 969, column: 46)
!12966 = !DILocation(line: 972, column: 22, scope: !12965)
!12967 = !DILocation(line: 970, column: 9, scope: !12965)
!12968 = !DILocation(line: 973, column: 9, scope: !12965)
!12969 = !DILocation(line: 975, column: 5, scope: !936)
!12970 = !DILocation(line: 976, column: 1, scope: !936)
!12971 = !DILocation(line: 979, column: 38, scope: !943)
!12972 = !DILocation(line: 979, column: 57, scope: !943)
!12973 = !DILocation(line: 980, column: 36, scope: !943)
!12974 = !DILocation(line: 981, column: 10, scope: !12975)
!12975 = distinct !DILexicalBlock(scope: !943, file: !616, line: 981, column: 9)
!12976 = !DILocation(line: 981, column: 13, scope: !12975)
!12977 = !DILocation(line: 981, column: 18, scope: !12975)
!12978 = !DILocation(line: 981, column: 23, scope: !12979)
!12979 = !DILexicalBlockFile(scope: !12975, file: !616, discriminator: 1)
!12980 = !DILocation(line: 981, column: 9, scope: !943)
!12981 = !DILocation(line: 982, column: 22, scope: !12982)
!12982 = distinct !DILexicalBlock(scope: !12975, file: !616, line: 981, column: 41)
!12983 = !DILocation(line: 984, column: 22, scope: !12982)
!12984 = !DILocation(line: 982, column: 9, scope: !12982)
!12985 = !DILocation(line: 985, column: 9, scope: !12982)
!12986 = !DILocation(line: 987, column: 5, scope: !943)
!12987 = !DILocation(line: 988, column: 1, scope: !943)
!12988 = !DILocation(line: 1305, column: 20, scope: !993)
!12989 = !DILocation(line: 1311, column: 49, scope: !993)
!12990 = !DILocation(line: 1311, column: 64, scope: !993)
!12991 = !DILocation(line: 1311, column: 70, scope: !993)
!12992 = !DILocation(line: 1311, column: 12, scope: !993)
!12993 = !DILocation(line: 1311, column: 5, scope: !993)
!12994 = !DILocation(line: 2205, column: 37, scope: !998)
!12995 = !DILocation(line: 2207, column: 5, scope: !998)
!12996 = !DILocation(line: 2207, column: 19, scope: !998)
!12997 = !DILocation(line: 2207, column: 26, scope: !998)
!12998 = !DILocation(line: 2207, column: 33, scope: !998)
!12999 = !DILocation(line: 2208, column: 5, scope: !998)
!13000 = !DILocation(line: 2208, column: 15, scope: !998)
!13001 = !DILocation(line: 2208, column: 19, scope: !998)
!13002 = !DILocation(line: 2209, column: 9, scope: !13003)
!13003 = distinct !DILexicalBlock(scope: !998, file: !616, line: 2209, column: 9)
!13004 = !DILocation(line: 2209, column: 11, scope: !13003)
!13005 = !DILocation(line: 2209, column: 9, scope: !998)
!13006 = !DILocation(line: 2210, column: 9, scope: !13003)
!13007 = !DILocation(line: 2212, column: 65, scope: !998)
!13008 = !DILocation(line: 2212, column: 69, scope: !998)
!13009 = !{!13010, !3841, i64 24}
!13010 = !{!"stat", !3894, i64 0, !3894, i64 8, !3894, i64 16, !3841, i64 24, !3841, i64 28, !3841, i64 32, !3841, i64 36, !3894, i64 40, !3894, i64 48, !3894, i64 56, !3894, i64 64, !7583, i64 72, !7583, i64 88, !7583, i64 104, !3842, i64 120}
!13011 = !DILocation(line: 2212, column: 59, scope: !998)
!13012 = !DILocation(line: 2212, column: 43, scope: !998)
!13013 = !DILocation(line: 2212, column: 25, scope: !998)
!13014 = !DILocation(line: 2212, column: 7, scope: !998)
!13015 = !DILocation(line: 2212, column: 30, scope: !998)
!13016 = !DILocation(line: 2212, column: 6, scope: !998)
!13017 = !DILocation(line: 2212, column: 41, scope: !998)
!13018 = !DILocation(line: 2217, column: 65, scope: !998)
!13019 = !DILocation(line: 2217, column: 69, scope: !998)
!13020 = !{!13010, !3894, i64 8}
!13021 = !DILocation(line: 2217, column: 43, scope: !998)
!13022 = !DILocation(line: 2217, column: 25, scope: !998)
!13023 = !DILocation(line: 2217, column: 7, scope: !998)
!13024 = !DILocation(line: 2217, column: 30, scope: !998)
!13025 = !DILocation(line: 2217, column: 6, scope: !998)
!13026 = !DILocation(line: 2217, column: 41, scope: !998)
!13027 = !DILocation(line: 2222, column: 74, scope: !998)
!13028 = !DILocation(line: 2222, column: 78, scope: !998)
!13029 = !{!13010, !3894, i64 0}
!13030 = !DILocation(line: 2222, column: 43, scope: !998)
!13031 = !DILocation(line: 2222, column: 25, scope: !998)
!13032 = !DILocation(line: 2222, column: 7, scope: !998)
!13033 = !DILocation(line: 2222, column: 30, scope: !998)
!13034 = !DILocation(line: 2222, column: 6, scope: !998)
!13035 = !DILocation(line: 2222, column: 41, scope: !998)
!13036 = !DILocation(line: 2227, column: 65, scope: !998)
!13037 = !DILocation(line: 2227, column: 69, scope: !998)
!13038 = !{!13010, !3894, i64 16}
!13039 = !DILocation(line: 2227, column: 43, scope: !998)
!13040 = !DILocation(line: 2227, column: 25, scope: !998)
!13041 = !DILocation(line: 2227, column: 7, scope: !998)
!13042 = !DILocation(line: 2227, column: 30, scope: !998)
!13043 = !DILocation(line: 2227, column: 6, scope: !998)
!13044 = !DILocation(line: 2227, column: 41, scope: !998)
!13045 = !DILocation(line: 2232, column: 59, scope: !998)
!13046 = !DILocation(line: 2232, column: 63, scope: !998)
!13047 = !{!13010, !3841, i64 28}
!13048 = !DILocation(line: 2232, column: 43, scope: !998)
!13049 = !DILocation(line: 2232, column: 25, scope: !998)
!13050 = !DILocation(line: 2232, column: 7, scope: !998)
!13051 = !DILocation(line: 2232, column: 30, scope: !998)
!13052 = !DILocation(line: 2232, column: 6, scope: !998)
!13053 = !DILocation(line: 2232, column: 41, scope: !998)
!13054 = !DILocation(line: 2233, column: 59, scope: !998)
!13055 = !DILocation(line: 2233, column: 63, scope: !998)
!13056 = !{!13010, !3841, i64 32}
!13057 = !DILocation(line: 2233, column: 43, scope: !998)
!13058 = !DILocation(line: 2233, column: 25, scope: !998)
!13059 = !DILocation(line: 2233, column: 7, scope: !998)
!13060 = !DILocation(line: 2233, column: 30, scope: !998)
!13061 = !DILocation(line: 2233, column: 6, scope: !998)
!13062 = !DILocation(line: 2233, column: 41, scope: !998)
!13063 = !DILocation(line: 2239, column: 59, scope: !998)
!13064 = !DILocation(line: 2239, column: 63, scope: !998)
!13065 = !{!13010, !3894, i64 48}
!13066 = !DILocation(line: 2239, column: 43, scope: !998)
!13067 = !DILocation(line: 2239, column: 25, scope: !998)
!13068 = !DILocation(line: 2239, column: 7, scope: !998)
!13069 = !DILocation(line: 2239, column: 30, scope: !998)
!13070 = !DILocation(line: 2239, column: 6, scope: !998)
!13071 = !DILocation(line: 2239, column: 41, scope: !998)
!13072 = !DILocation(line: 2243, column: 13, scope: !998)
!13073 = !DILocation(line: 2243, column: 17, scope: !998)
!13074 = !DILocation(line: 2243, column: 25, scope: !998)
!13075 = !{!13010, !3894, i64 80}
!13076 = !DILocation(line: 2243, column: 11, scope: !998)
!13077 = !DILocation(line: 2244, column: 13, scope: !998)
!13078 = !DILocation(line: 2244, column: 17, scope: !998)
!13079 = !DILocation(line: 2244, column: 25, scope: !998)
!13080 = !{!13010, !3894, i64 96}
!13081 = !DILocation(line: 2244, column: 11, scope: !998)
!13082 = !DILocation(line: 2245, column: 13, scope: !998)
!13083 = !DILocation(line: 2245, column: 17, scope: !998)
!13084 = !DILocation(line: 2245, column: 25, scope: !998)
!13085 = !{!13010, !3894, i64 112}
!13086 = !DILocation(line: 2245, column: 11, scope: !998)
!13087 = !DILocation(line: 2257, column: 15, scope: !998)
!13088 = !DILocation(line: 2257, column: 21, scope: !998)
!13089 = !DILocation(line: 2257, column: 25, scope: !998)
!13090 = !DILocation(line: 2257, column: 33, scope: !998)
!13091 = !{!13010, !3894, i64 72}
!13092 = !DILocation(line: 2257, column: 41, scope: !998)
!13093 = !DILocation(line: 2257, column: 5, scope: !998)
!13094 = !DILocation(line: 2258, column: 15, scope: !998)
!13095 = !DILocation(line: 2258, column: 21, scope: !998)
!13096 = !DILocation(line: 2258, column: 25, scope: !998)
!13097 = !DILocation(line: 2258, column: 33, scope: !998)
!13098 = !{!13010, !3894, i64 88}
!13099 = !DILocation(line: 2258, column: 41, scope: !998)
!13100 = !DILocation(line: 2258, column: 5, scope: !998)
!13101 = !DILocation(line: 2259, column: 15, scope: !998)
!13102 = !DILocation(line: 2259, column: 21, scope: !998)
!13103 = !DILocation(line: 2259, column: 25, scope: !998)
!13104 = !DILocation(line: 2259, column: 33, scope: !998)
!13105 = !{!13010, !3894, i64 104}
!13106 = !DILocation(line: 2259, column: 41, scope: !998)
!13107 = !DILocation(line: 2259, column: 5, scope: !998)
!13108 = !DILocation(line: 2262, column: 66, scope: !998)
!13109 = !DILocation(line: 2262, column: 70, scope: !998)
!13110 = !{!13010, !3894, i64 56}
!13111 = !DILocation(line: 2262, column: 44, scope: !998)
!13112 = !DILocation(line: 2262, column: 25, scope: !998)
!13113 = !DILocation(line: 2262, column: 7, scope: !998)
!13114 = !DILocation(line: 2262, column: 30, scope: !998)
!13115 = !DILocation(line: 2262, column: 6, scope: !998)
!13116 = !DILocation(line: 2262, column: 42, scope: !998)
!13117 = !DILocation(line: 2266, column: 71, scope: !998)
!13118 = !DILocation(line: 2266, column: 75, scope: !998)
!13119 = !{!13010, !3894, i64 64}
!13120 = !DILocation(line: 2266, column: 49, scope: !998)
!13121 = !DILocation(line: 2266, column: 25, scope: !998)
!13122 = !DILocation(line: 2266, column: 7, scope: !998)
!13123 = !DILocation(line: 2266, column: 30, scope: !998)
!13124 = !DILocation(line: 2266, column: 6, scope: !998)
!13125 = !DILocation(line: 2266, column: 47, scope: !998)
!13126 = !DILocation(line: 2270, column: 75, scope: !998)
!13127 = !DILocation(line: 2270, column: 79, scope: !998)
!13128 = !{!13010, !3894, i64 40}
!13129 = !DILocation(line: 2270, column: 53, scope: !998)
!13130 = !DILocation(line: 2270, column: 25, scope: !998)
!13131 = !DILocation(line: 2270, column: 7, scope: !998)
!13132 = !DILocation(line: 2270, column: 30, scope: !998)
!13133 = !DILocation(line: 2270, column: 6, scope: !998)
!13134 = !DILocation(line: 2270, column: 51, scope: !998)
!13135 = !DILocation(line: 2301, column: 9, scope: !1011)
!13136 = !DILocation(line: 2301, column: 9, scope: !998)
!13137 = !DILocation(line: 2302, column: 9, scope: !1010)
!13138 = !DILocation(line: 2302, column: 14, scope: !13139)
!13139 = !DILexicalBlockFile(scope: !1009, file: !616, discriminator: 1)
!13140 = !DILocation(line: 2302, column: 24, scope: !1009)
!13141 = !DILocation(line: 2302, column: 54, scope: !1009)
!13142 = !DILocation(line: 2302, column: 66, scope: !13143)
!13143 = distinct !DILexicalBlock(scope: !1009, file: !616, line: 2302, column: 63)
!13144 = !DILocation(line: 2302, column: 83, scope: !13143)
!13145 = !DILocation(line: 2302, column: 63, scope: !13143)
!13146 = !DILocation(line: 2302, column: 93, scope: !13143)
!13147 = !DILocation(line: 2302, column: 63, scope: !1009)
!13148 = !DILocation(line: 2302, column: 63, scope: !13149)
!13149 = !DILexicalBlockFile(scope: !1009, file: !616, discriminator: 2)
!13150 = !DILocation(line: 2302, column: 124, scope: !13151)
!13151 = !DILexicalBlockFile(scope: !13143, file: !616, discriminator: 3)
!13152 = !DILocation(line: 2302, column: 142, scope: !13143)
!13153 = !DILocation(line: 2302, column: 152, scope: !13143)
!13154 = !DILocation(line: 2302, column: 177, scope: !13143)
!13155 = !DILocation(line: 2302, column: 108, scope: !13143)
!13156 = !DILocation(line: 2302, column: 196, scope: !13157)
!13157 = !DILexicalBlockFile(scope: !1010, file: !616, discriminator: 4)
!13158 = !DILocation(line: 2302, column: 196, scope: !1009)
!13159 = !DILocation(line: 2302, column: 196, scope: !13160)
!13160 = !DILexicalBlockFile(scope: !1009, file: !616, discriminator: 5)
!13161 = !DILocation(line: 2303, column: 9, scope: !1010)
!13162 = !DILocation(line: 2306, column: 12, scope: !998)
!13163 = !DILocation(line: 2306, column: 5, scope: !998)
!13164 = !DILocation(line: 2307, column: 1, scope: !998)
!13165 = !DILocation(line: 517, column: 45, scope: !948)
!13166 = !DILocation(line: 517, column: 66, scope: !948)
!13167 = !DILocation(line: 519, column: 25, scope: !948)
!13168 = !DILocation(line: 519, column: 31, scope: !948)
!13169 = !DILocation(line: 519, column: 10, scope: !948)
!13170 = !DILocation(line: 519, column: 3, scope: !948)
!13171 = !DILocation(line: 510, column: 53, scope: !975)
!13172 = !DILocation(line: 510, column: 76, scope: !975)
!13173 = !DILocation(line: 512, column: 25, scope: !975)
!13174 = !DILocation(line: 512, column: 33, scope: !975)
!13175 = !DILocation(line: 512, column: 10, scope: !975)
!13176 = !DILocation(line: 512, column: 3, scope: !975)
!13177 = !DILocation(line: 524, column: 47, scope: !981)
!13178 = !DILocation(line: 524, column: 65, scope: !981)
!13179 = !DILocation(line: 524, column: 92, scope: !981)
!13180 = !DILocation(line: 524, column: 107, scope: !981)
!13181 = !DILocation(line: 527, column: 27, scope: !981)
!13182 = !DILocation(line: 527, column: 33, scope: !981)
!13183 = !DILocation(line: 527, column: 45, scope: !981)
!13184 = !DILocation(line: 527, column: 56, scope: !981)
!13185 = !DILocation(line: 527, column: 10, scope: !981)
!13186 = !DILocation(line: 527, column: 3, scope: !981)
!13187 = !DILocation(line: 503, column: 52, scope: !989)
!13188 = !DILocation(line: 503, column: 75, scope: !989)
!13189 = !DILocation(line: 505, column: 24, scope: !989)
!13190 = !DILocation(line: 505, column: 32, scope: !989)
!13191 = !DILocation(line: 505, column: 10, scope: !989)
!13192 = !DILocation(line: 505, column: 3, scope: !989)
!13193 = !DILocation(line: 2159, column: 21, scope: !1012)
!13194 = !DILocation(line: 2159, column: 28, scope: !1012)
!13195 = !DILocation(line: 2159, column: 42, scope: !1012)
!13196 = !DILocation(line: 2159, column: 61, scope: !1012)
!13197 = !DILocation(line: 2161, column: 5, scope: !1012)
!13198 = !DILocation(line: 2161, column: 15, scope: !1012)
!13199 = !DILocation(line: 2161, column: 38, scope: !1012)
!13200 = !DILocation(line: 2161, column: 19, scope: !1012)
!13201 = !DILocation(line: 2162, column: 5, scope: !1012)
!13202 = !DILocation(line: 2162, column: 15, scope: !1012)
!13203 = !DILocation(line: 2162, column: 55, scope: !1012)
!13204 = !DILocation(line: 2162, column: 31, scope: !1012)
!13205 = !DILocation(line: 2163, column: 5, scope: !1012)
!13206 = !DILocation(line: 2163, column: 15, scope: !1012)
!13207 = !DILocation(line: 2164, column: 5, scope: !1012)
!13208 = !DILocation(line: 2164, column: 15, scope: !1012)
!13209 = !DILocation(line: 2165, column: 5, scope: !1012)
!13210 = !DILocation(line: 2165, column: 15, scope: !1012)
!13211 = !DILocation(line: 2167, column: 11, scope: !13212)
!13212 = distinct !DILexicalBlock(scope: !1012, file: !616, line: 2167, column: 9)
!13213 = !DILocation(line: 2167, column: 13, scope: !13212)
!13214 = !DILocation(line: 2167, column: 16, scope: !13215)
!13215 = !DILexicalBlockFile(scope: !13212, file: !616, discriminator: 1)
!13216 = !DILocation(line: 2167, column: 9, scope: !1012)
!13217 = !DILocation(line: 2168, column: 9, scope: !13212)
!13218 = !DILocation(line: 2170, column: 33, scope: !1012)
!13219 = !DILocation(line: 2170, column: 36, scope: !1012)
!13220 = !DILocation(line: 2170, column: 15, scope: !1012)
!13221 = !DILocation(line: 2170, column: 13, scope: !1012)
!13222 = !DILocation(line: 2171, column: 10, scope: !13223)
!13223 = distinct !DILexicalBlock(scope: !1012, file: !616, line: 2171, column: 9)
!13224 = !DILocation(line: 2171, column: 9, scope: !1012)
!13225 = !DILocation(line: 2172, column: 9, scope: !13223)
!13226 = !DILocation(line: 2174, column: 29, scope: !1012)
!13227 = !DILocation(line: 2174, column: 38, scope: !1012)
!13228 = !DILocation(line: 2174, column: 16, scope: !1012)
!13229 = !DILocation(line: 2174, column: 14, scope: !1012)
!13230 = !DILocation(line: 2175, column: 10, scope: !13231)
!13231 = distinct !DILexicalBlock(scope: !1012, file: !616, line: 2175, column: 9)
!13232 = !DILocation(line: 2175, column: 9, scope: !1012)
!13233 = !DILocation(line: 2176, column: 9, scope: !13231)
!13234 = !DILocation(line: 2178, column: 9, scope: !13235)
!13235 = distinct !DILexicalBlock(scope: !1012, file: !616, line: 2178, column: 9)
!13236 = !DILocation(line: 2178, column: 9, scope: !1012)
!13237 = !DILocation(line: 2179, column: 38, scope: !13238)
!13238 = distinct !DILexicalBlock(scope: !13235, file: !616, line: 2178, column: 28)
!13239 = !DILocation(line: 2179, column: 49, scope: !13238)
!13240 = !DILocation(line: 2179, column: 48, scope: !13238)
!13241 = !DILocation(line: 2179, column: 42, scope: !13238)
!13242 = !DILocation(line: 2179, column: 19, scope: !13238)
!13243 = !DILocation(line: 2179, column: 17, scope: !13238)
!13244 = !DILocation(line: 2180, column: 14, scope: !13245)
!13245 = distinct !DILexicalBlock(scope: !13238, file: !616, line: 2180, column: 13)
!13246 = !DILocation(line: 2180, column: 13, scope: !13238)
!13247 = !DILocation(line: 2181, column: 13, scope: !13245)
!13248 = !DILocation(line: 2182, column: 5, scope: !13238)
!13249 = !DILocation(line: 2184, column: 19, scope: !13250)
!13250 = distinct !DILexicalBlock(scope: !13235, file: !616, line: 2183, column: 10)
!13251 = !DILocation(line: 2184, column: 17, scope: !13250)
!13252 = !DILocation(line: 2185, column: 25, scope: !13250)
!13253 = !DILocation(line: 2185, column: 36, scope: !13250)
!13254 = !DILocation(line: 2185, column: 45, scope: !13250)
!13255 = !DILocation(line: 2188, column: 47, scope: !1012)
!13256 = !DILocation(line: 2188, column: 38, scope: !1012)
!13257 = !DILocation(line: 2188, column: 6, scope: !1012)
!13258 = !DILocation(line: 2188, column: 25, scope: !1012)
!13259 = !DILocation(line: 2188, column: 7, scope: !1012)
!13260 = !DILocation(line: 2188, column: 30, scope: !1012)
!13261 = !DILocation(line: 2188, column: 45, scope: !1012)
!13262 = !DILocation(line: 2189, column: 49, scope: !1012)
!13263 = !DILocation(line: 2189, column: 38, scope: !1012)
!13264 = !DILocation(line: 2189, column: 43, scope: !1012)
!13265 = !DILocation(line: 2189, column: 6, scope: !1012)
!13266 = !DILocation(line: 2189, column: 25, scope: !1012)
!13267 = !DILocation(line: 2189, column: 7, scope: !1012)
!13268 = !DILocation(line: 2189, column: 30, scope: !1012)
!13269 = !DILocation(line: 2189, column: 47, scope: !1012)
!13270 = !DILocation(line: 2190, column: 49, scope: !1012)
!13271 = !DILocation(line: 2190, column: 38, scope: !1012)
!13272 = !DILocation(line: 2190, column: 43, scope: !1012)
!13273 = !DILocation(line: 2190, column: 6, scope: !1012)
!13274 = !DILocation(line: 2190, column: 25, scope: !1012)
!13275 = !DILocation(line: 2190, column: 7, scope: !1012)
!13276 = !DILocation(line: 2190, column: 30, scope: !1012)
!13277 = !DILocation(line: 2190, column: 47, scope: !1012)
!13278 = !DILocation(line: 2191, column: 7, scope: !1012)
!13279 = !DILocation(line: 2192, column: 13, scope: !1012)
!13280 = !DILocation(line: 2193, column: 14, scope: !1012)
!13281 = !DILocation(line: 2193, column: 5, scope: !1012)
!13282 = !DILocation(line: 2195, column: 5, scope: !1012)
!13283 = !DILocation(line: 2195, column: 10, scope: !13284)
!13284 = !DILexicalBlockFile(scope: !1027, file: !616, discriminator: 1)
!13285 = !DILocation(line: 2195, column: 20, scope: !1027)
!13286 = !DILocation(line: 2195, column: 51, scope: !1027)
!13287 = !DILocation(line: 2195, column: 59, scope: !1030)
!13288 = !DILocation(line: 2195, column: 75, scope: !1030)
!13289 = !DILocation(line: 2195, column: 59, scope: !1027)
!13290 = !DILocation(line: 2195, column: 90, scope: !13291)
!13291 = !DILexicalBlockFile(scope: !1030, file: !616, discriminator: 2)
!13292 = !DILocation(line: 2195, column: 95, scope: !13293)
!13293 = !DILexicalBlockFile(scope: !1029, file: !616, discriminator: 4)
!13294 = !DILocation(line: 2195, column: 105, scope: !1029)
!13295 = !DILocation(line: 2195, column: 135, scope: !1029)
!13296 = !DILocation(line: 2195, column: 161, scope: !13297)
!13297 = distinct !DILexicalBlock(scope: !1029, file: !616, line: 2195, column: 158)
!13298 = !DILocation(line: 2195, column: 178, scope: !13297)
!13299 = !DILocation(line: 2195, column: 158, scope: !13297)
!13300 = !DILocation(line: 2195, column: 188, scope: !13297)
!13301 = !DILocation(line: 2195, column: 158, scope: !1029)
!13302 = !DILocation(line: 2195, column: 158, scope: !13303)
!13303 = !DILexicalBlockFile(scope: !1029, file: !616, discriminator: 5)
!13304 = !DILocation(line: 2195, column: 219, scope: !13305)
!13305 = !DILexicalBlockFile(scope: !13297, file: !616, discriminator: 6)
!13306 = !DILocation(line: 2195, column: 237, scope: !13297)
!13307 = !DILocation(line: 2195, column: 247, scope: !13297)
!13308 = !DILocation(line: 2195, column: 272, scope: !13297)
!13309 = !DILocation(line: 2195, column: 203, scope: !13297)
!13310 = !DILocation(line: 2195, column: 291, scope: !13311)
!13311 = !DILexicalBlockFile(scope: !1030, file: !616, discriminator: 7)
!13312 = !DILocation(line: 2195, column: 291, scope: !1029)
!13313 = !DILocation(line: 2195, column: 291, scope: !13314)
!13314 = !DILexicalBlockFile(scope: !1029, file: !616, discriminator: 8)
!13315 = !DILocation(line: 2195, column: 291, scope: !13316)
!13316 = !DILexicalBlockFile(scope: !1029, file: !616, discriminator: 9)
!13317 = !DILocation(line: 2195, column: 304, scope: !13318)
!13318 = !DILexicalBlockFile(scope: !13319, file: !616, discriminator: 10)
!13319 = !DILexicalBlockFile(scope: !1012, file: !616, discriminator: 3)
!13320 = !DILocation(line: 2195, column: 304, scope: !1027)
!13321 = !DILocation(line: 2195, column: 304, scope: !13322)
!13322 = !DILexicalBlockFile(scope: !1027, file: !616, discriminator: 11)
!13323 = !DILocation(line: 2196, column: 5, scope: !1012)
!13324 = !DILocation(line: 2196, column: 10, scope: !13325)
!13325 = !DILexicalBlockFile(scope: !1032, file: !616, discriminator: 1)
!13326 = !DILocation(line: 2196, column: 20, scope: !1032)
!13327 = !DILocation(line: 2196, column: 51, scope: !1032)
!13328 = !DILocation(line: 2196, column: 71, scope: !1035)
!13329 = !DILocation(line: 2196, column: 87, scope: !1035)
!13330 = !DILocation(line: 2196, column: 71, scope: !1032)
!13331 = !DILocation(line: 2196, column: 102, scope: !13332)
!13332 = !DILexicalBlockFile(scope: !1035, file: !616, discriminator: 2)
!13333 = !DILocation(line: 2196, column: 107, scope: !13334)
!13334 = !DILexicalBlockFile(scope: !1034, file: !616, discriminator: 4)
!13335 = !DILocation(line: 2196, column: 117, scope: !1034)
!13336 = !DILocation(line: 2196, column: 147, scope: !1034)
!13337 = !DILocation(line: 2196, column: 173, scope: !13338)
!13338 = distinct !DILexicalBlock(scope: !1034, file: !616, line: 2196, column: 170)
!13339 = !DILocation(line: 2196, column: 190, scope: !13338)
!13340 = !DILocation(line: 2196, column: 170, scope: !13338)
!13341 = !DILocation(line: 2196, column: 200, scope: !13338)
!13342 = !DILocation(line: 2196, column: 170, scope: !1034)
!13343 = !DILocation(line: 2196, column: 170, scope: !13344)
!13344 = !DILexicalBlockFile(scope: !1034, file: !616, discriminator: 5)
!13345 = !DILocation(line: 2196, column: 231, scope: !13346)
!13346 = !DILexicalBlockFile(scope: !13338, file: !616, discriminator: 6)
!13347 = !DILocation(line: 2196, column: 249, scope: !13338)
!13348 = !DILocation(line: 2196, column: 259, scope: !13338)
!13349 = !DILocation(line: 2196, column: 284, scope: !13338)
!13350 = !DILocation(line: 2196, column: 215, scope: !13338)
!13351 = !DILocation(line: 2196, column: 303, scope: !13352)
!13352 = !DILexicalBlockFile(scope: !1035, file: !616, discriminator: 7)
!13353 = !DILocation(line: 2196, column: 303, scope: !1034)
!13354 = !DILocation(line: 2196, column: 303, scope: !13355)
!13355 = !DILexicalBlockFile(scope: !1034, file: !616, discriminator: 8)
!13356 = !DILocation(line: 2196, column: 303, scope: !13357)
!13357 = !DILexicalBlockFile(scope: !1034, file: !616, discriminator: 9)
!13358 = !DILocation(line: 2196, column: 316, scope: !13318)
!13359 = !DILocation(line: 2196, column: 316, scope: !1032)
!13360 = !DILocation(line: 2196, column: 316, scope: !13361)
!13361 = !DILexicalBlockFile(scope: !1032, file: !616, discriminator: 11)
!13362 = !DILocation(line: 2197, column: 5, scope: !1012)
!13363 = !DILocation(line: 2197, column: 10, scope: !13364)
!13364 = !DILexicalBlockFile(scope: !1037, file: !616, discriminator: 1)
!13365 = !DILocation(line: 2197, column: 20, scope: !1037)
!13366 = !DILocation(line: 2197, column: 51, scope: !1037)
!13367 = !DILocation(line: 2197, column: 65, scope: !1040)
!13368 = !DILocation(line: 2197, column: 81, scope: !1040)
!13369 = !DILocation(line: 2197, column: 65, scope: !1037)
!13370 = !DILocation(line: 2197, column: 96, scope: !13371)
!13371 = !DILexicalBlockFile(scope: !1040, file: !616, discriminator: 2)
!13372 = !DILocation(line: 2197, column: 101, scope: !13373)
!13373 = !DILexicalBlockFile(scope: !1039, file: !616, discriminator: 4)
!13374 = !DILocation(line: 2197, column: 111, scope: !1039)
!13375 = !DILocation(line: 2197, column: 141, scope: !1039)
!13376 = !DILocation(line: 2197, column: 167, scope: !13377)
!13377 = distinct !DILexicalBlock(scope: !1039, file: !616, line: 2197, column: 164)
!13378 = !DILocation(line: 2197, column: 184, scope: !13377)
!13379 = !DILocation(line: 2197, column: 164, scope: !13377)
!13380 = !DILocation(line: 2197, column: 194, scope: !13377)
!13381 = !DILocation(line: 2197, column: 164, scope: !1039)
!13382 = !DILocation(line: 2197, column: 164, scope: !13383)
!13383 = !DILexicalBlockFile(scope: !1039, file: !616, discriminator: 5)
!13384 = !DILocation(line: 2197, column: 225, scope: !13385)
!13385 = !DILexicalBlockFile(scope: !13377, file: !616, discriminator: 6)
!13386 = !DILocation(line: 2197, column: 243, scope: !13377)
!13387 = !DILocation(line: 2197, column: 253, scope: !13377)
!13388 = !DILocation(line: 2197, column: 278, scope: !13377)
!13389 = !DILocation(line: 2197, column: 209, scope: !13377)
!13390 = !DILocation(line: 2197, column: 297, scope: !13391)
!13391 = !DILexicalBlockFile(scope: !1040, file: !616, discriminator: 7)
!13392 = !DILocation(line: 2197, column: 297, scope: !1039)
!13393 = !DILocation(line: 2197, column: 297, scope: !13394)
!13394 = !DILexicalBlockFile(scope: !1039, file: !616, discriminator: 8)
!13395 = !DILocation(line: 2197, column: 297, scope: !13396)
!13396 = !DILexicalBlockFile(scope: !1039, file: !616, discriminator: 9)
!13397 = !DILocation(line: 2197, column: 310, scope: !13318)
!13398 = !DILocation(line: 2197, column: 310, scope: !1037)
!13399 = !DILocation(line: 2197, column: 310, scope: !13400)
!13400 = !DILexicalBlockFile(scope: !1037, file: !616, discriminator: 11)
!13401 = !DILocation(line: 2198, column: 5, scope: !1012)
!13402 = !DILocation(line: 2198, column: 10, scope: !13403)
!13403 = !DILexicalBlockFile(scope: !1042, file: !616, discriminator: 1)
!13404 = !DILocation(line: 2198, column: 20, scope: !1042)
!13405 = !DILocation(line: 2198, column: 51, scope: !1042)
!13406 = !DILocation(line: 2198, column: 66, scope: !1045)
!13407 = !DILocation(line: 2198, column: 82, scope: !1045)
!13408 = !DILocation(line: 2198, column: 66, scope: !1042)
!13409 = !DILocation(line: 2198, column: 97, scope: !13410)
!13410 = !DILexicalBlockFile(scope: !1045, file: !616, discriminator: 2)
!13411 = !DILocation(line: 2198, column: 102, scope: !13412)
!13412 = !DILexicalBlockFile(scope: !1044, file: !616, discriminator: 4)
!13413 = !DILocation(line: 2198, column: 112, scope: !1044)
!13414 = !DILocation(line: 2198, column: 142, scope: !1044)
!13415 = !DILocation(line: 2198, column: 168, scope: !13416)
!13416 = distinct !DILexicalBlock(scope: !1044, file: !616, line: 2198, column: 165)
!13417 = !DILocation(line: 2198, column: 185, scope: !13416)
!13418 = !DILocation(line: 2198, column: 165, scope: !13416)
!13419 = !DILocation(line: 2198, column: 195, scope: !13416)
!13420 = !DILocation(line: 2198, column: 165, scope: !1044)
!13421 = !DILocation(line: 2198, column: 165, scope: !13422)
!13422 = !DILexicalBlockFile(scope: !1044, file: !616, discriminator: 5)
!13423 = !DILocation(line: 2198, column: 226, scope: !13424)
!13424 = !DILexicalBlockFile(scope: !13416, file: !616, discriminator: 6)
!13425 = !DILocation(line: 2198, column: 244, scope: !13416)
!13426 = !DILocation(line: 2198, column: 254, scope: !13416)
!13427 = !DILocation(line: 2198, column: 279, scope: !13416)
!13428 = !DILocation(line: 2198, column: 210, scope: !13416)
!13429 = !DILocation(line: 2198, column: 298, scope: !13430)
!13430 = !DILexicalBlockFile(scope: !1045, file: !616, discriminator: 7)
!13431 = !DILocation(line: 2198, column: 298, scope: !1044)
!13432 = !DILocation(line: 2198, column: 298, scope: !13433)
!13433 = !DILexicalBlockFile(scope: !1044, file: !616, discriminator: 8)
!13434 = !DILocation(line: 2198, column: 298, scope: !13435)
!13435 = !DILexicalBlockFile(scope: !1044, file: !616, discriminator: 9)
!13436 = !DILocation(line: 2198, column: 311, scope: !13318)
!13437 = !DILocation(line: 2198, column: 311, scope: !1042)
!13438 = !DILocation(line: 2198, column: 311, scope: !13439)
!13439 = !DILexicalBlockFile(scope: !1042, file: !616, discriminator: 11)
!13440 = !DILocation(line: 2199, column: 5, scope: !1012)
!13441 = !DILocation(line: 2199, column: 10, scope: !13442)
!13442 = !DILexicalBlockFile(scope: !1047, file: !616, discriminator: 1)
!13443 = !DILocation(line: 2199, column: 20, scope: !1047)
!13444 = !DILocation(line: 2199, column: 51, scope: !1047)
!13445 = !DILocation(line: 2199, column: 65, scope: !1050)
!13446 = !DILocation(line: 2199, column: 81, scope: !1050)
!13447 = !DILocation(line: 2199, column: 65, scope: !1047)
!13448 = !DILocation(line: 2199, column: 96, scope: !13449)
!13449 = !DILexicalBlockFile(scope: !1050, file: !616, discriminator: 2)
!13450 = !DILocation(line: 2199, column: 101, scope: !13451)
!13451 = !DILexicalBlockFile(scope: !1049, file: !616, discriminator: 4)
!13452 = !DILocation(line: 2199, column: 111, scope: !1049)
!13453 = !DILocation(line: 2199, column: 141, scope: !1049)
!13454 = !DILocation(line: 2199, column: 167, scope: !13455)
!13455 = distinct !DILexicalBlock(scope: !1049, file: !616, line: 2199, column: 164)
!13456 = !DILocation(line: 2199, column: 184, scope: !13455)
!13457 = !DILocation(line: 2199, column: 164, scope: !13455)
!13458 = !DILocation(line: 2199, column: 194, scope: !13455)
!13459 = !DILocation(line: 2199, column: 164, scope: !1049)
!13460 = !DILocation(line: 2199, column: 164, scope: !13461)
!13461 = !DILexicalBlockFile(scope: !1049, file: !616, discriminator: 5)
!13462 = !DILocation(line: 2199, column: 225, scope: !13463)
!13463 = !DILexicalBlockFile(scope: !13455, file: !616, discriminator: 6)
!13464 = !DILocation(line: 2199, column: 243, scope: !13455)
!13465 = !DILocation(line: 2199, column: 253, scope: !13455)
!13466 = !DILocation(line: 2199, column: 278, scope: !13455)
!13467 = !DILocation(line: 2199, column: 209, scope: !13455)
!13468 = !DILocation(line: 2199, column: 297, scope: !13469)
!13469 = !DILexicalBlockFile(scope: !1050, file: !616, discriminator: 7)
!13470 = !DILocation(line: 2199, column: 297, scope: !1049)
!13471 = !DILocation(line: 2199, column: 297, scope: !13472)
!13472 = !DILexicalBlockFile(scope: !1049, file: !616, discriminator: 8)
!13473 = !DILocation(line: 2199, column: 297, scope: !13474)
!13474 = !DILexicalBlockFile(scope: !1049, file: !616, discriminator: 9)
!13475 = !DILocation(line: 2199, column: 310, scope: !13318)
!13476 = !DILocation(line: 2199, column: 310, scope: !1047)
!13477 = !DILocation(line: 2199, column: 310, scope: !13478)
!13478 = !DILexicalBlockFile(scope: !1047, file: !616, discriminator: 11)
!13479 = !DILocation(line: 2200, column: 1, scope: !1012)
!13480 = !DILocation(line: 2646, column: 29, scope: !1075)
!13481 = !DILocation(line: 2646, column: 45, scope: !1075)
!13482 = !DILocation(line: 2646, column: 55, scope: !1075)
!13483 = !DILocation(line: 2646, column: 65, scope: !1075)
!13484 = !DILocation(line: 2646, column: 77, scope: !1075)
!13485 = !DILocation(line: 2646, column: 96, scope: !1075)
!13486 = !DILocation(line: 2649, column: 5, scope: !1075)
!13487 = !DILocation(line: 2649, column: 15, scope: !1075)
!13488 = !DILocation(line: 2654, column: 5, scope: !1075)
!13489 = !DILocation(line: 2654, column: 9, scope: !1075)
!13490 = !DILocation(line: 2690, column: 7, scope: !1088)
!13491 = !DILocation(line: 2690, column: 22, scope: !1088)
!13492 = !DILocation(line: 2690, column: 37, scope: !1088)
!13493 = !DILocation(line: 2690, column: 35, scope: !1088)
!13494 = !DILocation(line: 2692, column: 10, scope: !1091)
!13495 = !DILocation(line: 2692, column: 17, scope: !1091)
!13496 = !DILocation(line: 2692, column: 31, scope: !1091)
!13497 = !DILocation(line: 2693, column: 9, scope: !1091)
!13498 = !DILocation(line: 2693, column: 23, scope: !1091)
!13499 = !DILocation(line: 2694, column: 10, scope: !1091)
!13500 = !DILocation(line: 2692, column: 9, scope: !1088)
!13501 = !DILocation(line: 2695, column: 9, scope: !1090)
!13502 = !DILocation(line: 2695, column: 13, scope: !1090)
!13503 = !DILocation(line: 2696, column: 14, scope: !13504)
!13504 = distinct !DILexicalBlock(scope: !1090, file: !616, line: 2696, column: 13)
!13505 = !DILocation(line: 2696, column: 13, scope: !1090)
!13506 = !DILocation(line: 2697, column: 19, scope: !13504)
!13507 = !DILocation(line: 2697, column: 13, scope: !13504)
!13508 = !DILocation(line: 2698, column: 13, scope: !13509)
!13509 = distinct !DILexicalBlock(scope: !1090, file: !616, line: 2698, column: 13)
!13510 = !DILocation(line: 2698, column: 13, scope: !1090)
!13511 = !DILocation(line: 2699, column: 19, scope: !13509)
!13512 = !DILocation(line: 2699, column: 13, scope: !13509)
!13513 = !DILocation(line: 2700, column: 28, scope: !1090)
!13514 = !DILocation(line: 2700, column: 36, scope: !1090)
!13515 = !DILocation(line: 2700, column: 42, scope: !1090)
!13516 = !DILocation(line: 2700, column: 50, scope: !1090)
!13517 = !DILocation(line: 2700, column: 56, scope: !1090)
!13518 = !DILocation(line: 2700, column: 18, scope: !1090)
!13519 = !DILocation(line: 2700, column: 16, scope: !1090)
!13520 = !DILocation(line: 2701, column: 5, scope: !1091)
!13521 = !DILocation(line: 2701, column: 5, scope: !1090)
!13522 = !DILocation(line: 2704, column: 25, scope: !1091)
!13523 = !DILocation(line: 2704, column: 31, scope: !1091)
!13524 = !DILocation(line: 2704, column: 39, scope: !1091)
!13525 = !DILocation(line: 2704, column: 18, scope: !1091)
!13526 = !DILocation(line: 2704, column: 16, scope: !1091)
!13527 = !DILocation(line: 2705, column: 26, scope: !1088)
!13528 = !DILocation(line: 2705, column: 5, scope: !1088)
!13529 = !DILocation(line: 2705, column: 34, scope: !1075)
!13530 = !DILocation(line: 2706, column: 37, scope: !1075)
!13531 = !DILocation(line: 2706, column: 36, scope: !1075)
!13532 = !DILocation(line: 2706, column: 20, scope: !1075)
!13533 = !DILocation(line: 2706, column: 18, scope: !1075)
!13534 = !DILocation(line: 2712, column: 12, scope: !1075)
!13535 = !DILocation(line: 2713, column: 1, scope: !1075)
!13536 = !DILocation(line: 2712, column: 5, scope: !1075)
!13537 = !DILocation(line: 2778, column: 30, scope: !1101)
!13538 = !DILocation(line: 2778, column: 42, scope: !1101)
!13539 = !DILocation(line: 2781, column: 5, scope: !1101)
!13540 = !DILocation(line: 2781, column: 11, scope: !1101)
!13541 = !DILocation(line: 2783, column: 19, scope: !1101)
!13542 = !DILocation(line: 2783, column: 11, scope: !1101)
!13543 = !DILocation(line: 2783, column: 9, scope: !1101)
!13544 = !DILocation(line: 2784, column: 9, scope: !13545)
!13545 = distinct !DILexicalBlock(scope: !1101, file: !616, line: 2784, column: 9)
!13546 = !DILocation(line: 2784, column: 13, scope: !13545)
!13547 = !DILocation(line: 2784, column: 9, scope: !1101)
!13548 = !DILocation(line: 2785, column: 9, scope: !13545)
!13549 = !DILocation(line: 2786, column: 12, scope: !1101)
!13550 = !DILocation(line: 2787, column: 1, scope: !1101)
!13551 = !DILocation(line: 2786, column: 5, scope: !1101)
!13552 = !DILocation(line: 1269, column: 31, scope: !1108)
!13553 = !DILocation(line: 1269, column: 12, scope: !1108)
!13554 = !DILocation(line: 1269, column: 5, scope: !1108)
!13555 = !DILocation(line: 1351, column: 24, scope: !1181)
!13556 = !DILocation(line: 1351, column: 45, scope: !1181)
!13557 = !DILocation(line: 1351, column: 57, scope: !1181)
!13558 = !DILocation(line: 1352, column: 18, scope: !1181)
!13559 = !DILocation(line: 1354, column: 5, scope: !1181)
!13560 = !DILocation(line: 1354, column: 12, scope: !1181)
!13561 = !DILocation(line: 1355, column: 5, scope: !1181)
!13562 = !DILocation(line: 1355, column: 9, scope: !1181)
!13563 = !DILocation(line: 1356, column: 5, scope: !1181)
!13564 = !DILocation(line: 1357, column: 26, scope: !1181)
!13565 = !DILocation(line: 1357, column: 10, scope: !1181)
!13566 = !DILocation(line: 1357, column: 24, scope: !1181)
!13567 = !DILocation(line: 1358, column: 34, scope: !13568)
!13568 = distinct !DILexicalBlock(scope: !1181, file: !616, line: 1358, column: 9)
!13569 = !DILocation(line: 1358, column: 40, scope: !13568)
!13570 = !DILocation(line: 1358, column: 10, scope: !13568)
!13571 = !DILocation(line: 1358, column: 9, scope: !1181)
!13572 = !DILocation(line: 1360, column: 9, scope: !13568)
!13573 = !DILocation(line: 1361, column: 7, scope: !1195)
!13574 = !DILocation(line: 1361, column: 22, scope: !1195)
!13575 = !DILocation(line: 1361, column: 37, scope: !1195)
!13576 = !DILocation(line: 1361, column: 35, scope: !1195)
!13577 = !DILocation(line: 1362, column: 13, scope: !1195)
!13578 = !DILocation(line: 1362, column: 24, scope: !1195)
!13579 = !DILocation(line: 1362, column: 11, scope: !1195)
!13580 = !DILocation(line: 1362, column: 9, scope: !1195)
!13581 = !DILocation(line: 1363, column: 26, scope: !1195)
!13582 = !DILocation(line: 1363, column: 5, scope: !1195)
!13583 = !DILocation(line: 1363, column: 34, scope: !1181)
!13584 = !DILocation(line: 1364, column: 9, scope: !13585)
!13585 = distinct !DILexicalBlock(scope: !1181, file: !616, line: 1364, column: 9)
!13586 = !DILocation(line: 1364, column: 13, scope: !13585)
!13587 = !DILocation(line: 1364, column: 9, scope: !1181)
!13588 = !DILocation(line: 1365, column: 9, scope: !13589)
!13589 = distinct !DILexicalBlock(scope: !13585, file: !616, line: 1364, column: 18)
!13590 = !DILocation(line: 1366, column: 9, scope: !13589)
!13591 = !DILocation(line: 1367, column: 9, scope: !13589)
!13592 = !DILocation(line: 1369, column: 5, scope: !1181)
!13593 = !DILocation(line: 1370, column: 51, scope: !1181)
!13594 = !DILocation(line: 1371, column: 5, scope: !1181)
!13595 = !DILocation(line: 1372, column: 1, scope: !1181)
!13596 = !DILocation(line: 3394, column: 18, scope: !1208)
!13597 = !DILocation(line: 3396, column: 5, scope: !1208)
!13598 = !DILocation(line: 3396, column: 10, scope: !1208)
!13599 = !DILocation(line: 3397, column: 5, scope: !1208)
!13600 = !DILocation(line: 3397, column: 11, scope: !1208)
!13601 = !DILocation(line: 3435, column: 7, scope: !1219)
!13602 = !DILocation(line: 3435, column: 22, scope: !1219)
!13603 = !DILocation(line: 3435, column: 37, scope: !1219)
!13604 = !DILocation(line: 3435, column: 35, scope: !1219)
!13605 = !DILocation(line: 3436, column: 18, scope: !1219)
!13606 = !DILocation(line: 3436, column: 11, scope: !1219)
!13607 = !DILocation(line: 3436, column: 9, scope: !1219)
!13608 = !DILocation(line: 3437, column: 26, scope: !1219)
!13609 = !DILocation(line: 3437, column: 5, scope: !1219)
!13610 = !DILocation(line: 3437, column: 34, scope: !1208)
!13611 = !DILocation(line: 3438, column: 9, scope: !13612)
!13612 = distinct !DILexicalBlock(scope: !1208, file: !616, line: 3438, column: 9)
!13613 = !DILocation(line: 3438, column: 13, scope: !13612)
!13614 = !DILocation(line: 3438, column: 9, scope: !1208)
!13615 = !DILocation(line: 3439, column: 16, scope: !13612)
!13616 = !DILocation(line: 3439, column: 9, scope: !13612)
!13617 = !DILocation(line: 3440, column: 9, scope: !13618)
!13618 = distinct !DILexicalBlock(scope: !1208, file: !616, line: 3440, column: 9)
!13619 = !DILocation(line: 3440, column: 9, scope: !1208)
!13620 = !DILocation(line: 3441, column: 42, scope: !13618)
!13621 = !DILocation(line: 3441, column: 54, scope: !13618)
!13622 = !DILocation(line: 3441, column: 47, scope: !13618)
!13623 = !DILocation(line: 3441, column: 16, scope: !13618)
!13624 = !DILocation(line: 3441, column: 9, scope: !13618)
!13625 = !DILocation(line: 3442, column: 38, scope: !1208)
!13626 = !DILocation(line: 3442, column: 12, scope: !1208)
!13627 = !DILocation(line: 3442, column: 5, scope: !1208)
!13628 = !DILocation(line: 3443, column: 1, scope: !1208)
!13629 = !DILocation(line: 1317, column: 21, scope: !1237)
!13630 = !DILocation(line: 1317, column: 35, scope: !1237)
!13631 = !DILocation(line: 1323, column: 50, scope: !1237)
!13632 = !DILocation(line: 1324, column: 9, scope: !1237)
!13633 = !DILocation(line: 1324, column: 15, scope: !1237)
!13634 = !DILocation(line: 1324, column: 23, scope: !1237)
!13635 = !DILocation(line: 1324, column: 30, scope: !1237)
!13636 = !DILocation(line: 1323, column: 12, scope: !1237)
!13637 = !DILocation(line: 1323, column: 5, scope: !1237)
!13638 = !DILocation(line: 3739, column: 24, scope: !1251)
!13639 = !DILocation(line: 3739, column: 40, scope: !1251)
!13640 = !DILocation(line: 3741, column: 5, scope: !1251)
!13641 = !DILocation(line: 3741, column: 15, scope: !1251)
!13642 = !DILocation(line: 3742, column: 5, scope: !1251)
!13643 = !DILocation(line: 3742, column: 10, scope: !1251)
!13644 = !DILocation(line: 3743, column: 5, scope: !1251)
!13645 = !DILocation(line: 3743, column: 20, scope: !1251)
!13646 = !DILocation(line: 3744, column: 5, scope: !1251)
!13647 = !DILocation(line: 3744, column: 9, scope: !1251)
!13648 = !DILocation(line: 3746, column: 5, scope: !1251)
!13649 = !DILocation(line: 3746, column: 9, scope: !1251)
!13650 = !DILocation(line: 3749, column: 7, scope: !1251)
!13651 = !DILocation(line: 3749, column: 28, scope: !1251)
!13652 = !DILocation(line: 3751, column: 9, scope: !1282)
!13653 = !DILocation(line: 3751, column: 15, scope: !1282)
!13654 = !DILocation(line: 3751, column: 18, scope: !1282)
!13655 = !DILocation(line: 3751, column: 9, scope: !1251)
!13656 = !DILocation(line: 3753, column: 22, scope: !1281)
!13657 = !DILocation(line: 3753, column: 28, scope: !1281)
!13658 = !DILocation(line: 3753, column: 14, scope: !1281)
!13659 = !DILocation(line: 3753, column: 12, scope: !1281)
!13660 = !DILocation(line: 3754, column: 13, scope: !13661)
!13661 = distinct !DILexicalBlock(scope: !1281, file: !616, line: 3754, column: 13)
!13662 = !DILocation(line: 3754, column: 16, scope: !13661)
!13663 = !DILocation(line: 3754, column: 13, scope: !1281)
!13664 = !DILocation(line: 3755, column: 13, scope: !13661)
!13665 = !DILocation(line: 3757, column: 20, scope: !1281)
!13666 = !DILocation(line: 3759, column: 11, scope: !1280)
!13667 = !DILocation(line: 3759, column: 26, scope: !1280)
!13668 = !DILocation(line: 3759, column: 41, scope: !1280)
!13669 = !DILocation(line: 3759, column: 39, scope: !1280)
!13670 = !DILocation(line: 3760, column: 26, scope: !1280)
!13671 = !DILocation(line: 3760, column: 16, scope: !1280)
!13672 = !DILocation(line: 3760, column: 14, scope: !1280)
!13673 = !DILocation(line: 3761, column: 30, scope: !1280)
!13674 = !DILocation(line: 3761, column: 9, scope: !1280)
!13675 = !DILocation(line: 3761, column: 38, scope: !1281)
!13676 = !DILocation(line: 3762, column: 5, scope: !1281)
!13677 = !DILocation(line: 3766, column: 9, scope: !1284)
!13678 = !DILocation(line: 3766, column: 15, scope: !1284)
!13679 = !DILocation(line: 3767, column: 13, scope: !13680)
!13680 = distinct !DILexicalBlock(scope: !1284, file: !616, line: 3767, column: 13)
!13681 = !DILocation(line: 3767, column: 19, scope: !13680)
!13682 = !DILocation(line: 3767, column: 13, scope: !1284)
!13683 = !DILocation(line: 3768, column: 20, scope: !13684)
!13684 = distinct !DILexicalBlock(scope: !13680, file: !616, line: 3767, column: 27)
!13685 = !DILocation(line: 3768, column: 26, scope: !13684)
!13686 = !DILocation(line: 3768, column: 18, scope: !13684)
!13687 = !DILocation(line: 3770, column: 45, scope: !13684)
!13688 = !DILocation(line: 3770, column: 51, scope: !13684)
!13689 = !DILocation(line: 3770, column: 61, scope: !13684)
!13690 = !DILocation(line: 3770, column: 72, scope: !13684)
!13691 = !DILocation(line: 3770, column: 81, scope: !13684)
!13692 = !DILocation(line: 3770, column: 98, scope: !13684)
!13693 = !DILocation(line: 3770, column: 26, scope: !13684)
!13694 = !DILocation(line: 3770, column: 24, scope: !13684)
!13695 = !DILocation(line: 3771, column: 9, scope: !13684)
!13696 = !DILocation(line: 3773, column: 18, scope: !13697)
!13697 = distinct !DILexicalBlock(scope: !13680, file: !616, line: 3772, column: 14)
!13698 = !DILocation(line: 3774, column: 24, scope: !13697)
!13699 = !DILocation(line: 3777, column: 11, scope: !1286)
!13700 = !DILocation(line: 3777, column: 26, scope: !1286)
!13701 = !DILocation(line: 3777, column: 41, scope: !1286)
!13702 = !DILocation(line: 3777, column: 39, scope: !1286)
!13703 = !DILocation(line: 3778, column: 24, scope: !1286)
!13704 = !DILocation(line: 3778, column: 16, scope: !1286)
!13705 = !DILocation(line: 3778, column: 14, scope: !1286)
!13706 = !DILocation(line: 3779, column: 30, scope: !1286)
!13707 = !DILocation(line: 3779, column: 9, scope: !1286)
!13708 = !DILocation(line: 3779, column: 38, scope: !1284)
!13709 = !DILocation(line: 3780, column: 5, scope: !1282)
!13710 = !DILocation(line: 3782, column: 9, scope: !1292)
!13711 = !DILocation(line: 3782, column: 14, scope: !1292)
!13712 = !DILocation(line: 3782, column: 9, scope: !1251)
!13713 = !DILocation(line: 3783, column: 27, scope: !1291)
!13714 = !DILocation(line: 3783, column: 16, scope: !1291)
!13715 = !DILocation(line: 3783, column: 14, scope: !1291)
!13716 = !DILocation(line: 3785, column: 13, scope: !1290)
!13717 = !DILocation(line: 3785, column: 16, scope: !1290)
!13718 = !DILocation(line: 3785, column: 13, scope: !1291)
!13719 = !DILocation(line: 3786, column: 15, scope: !1288)
!13720 = !DILocation(line: 3786, column: 30, scope: !1288)
!13721 = !DILocation(line: 3786, column: 45, scope: !1288)
!13722 = !DILocation(line: 3786, column: 43, scope: !1288)
!13723 = !DILocation(line: 3787, column: 19, scope: !1288)
!13724 = !DILocation(line: 3787, column: 13, scope: !1288)
!13725 = !DILocation(line: 3788, column: 34, scope: !1288)
!13726 = !DILocation(line: 3788, column: 13, scope: !1288)
!13727 = !DILocation(line: 3788, column: 42, scope: !1289)
!13728 = !DILocation(line: 3789, column: 9, scope: !1289)
!13729 = !DILocation(line: 3791, column: 9, scope: !1291)
!13730 = !DILocation(line: 3793, column: 17, scope: !13731)
!13731 = distinct !DILexicalBlock(scope: !1251, file: !616, line: 3793, column: 9)
!13732 = !DILocation(line: 3793, column: 15, scope: !13731)
!13733 = !DILocation(line: 3793, column: 32, scope: !13731)
!13734 = !DILocation(line: 3793, column: 9, scope: !1251)
!13735 = !DILocation(line: 3794, column: 9, scope: !13736)
!13736 = distinct !DILexicalBlock(scope: !13731, file: !616, line: 3793, column: 47)
!13737 = !DILocation(line: 3796, column: 5, scope: !1251)
!13738 = !DILocation(line: 3797, column: 11, scope: !1295)
!13739 = !DILocation(line: 3797, column: 32, scope: !1295)
!13740 = !DILocation(line: 3798, column: 11, scope: !1294)
!13741 = !DILocation(line: 3798, column: 26, scope: !1294)
!13742 = !DILocation(line: 3798, column: 41, scope: !1294)
!13743 = !DILocation(line: 3798, column: 39, scope: !1294)
!13744 = !DILocation(line: 3799, column: 22, scope: !1294)
!13745 = !DILocation(line: 3799, column: 14, scope: !1294)
!13746 = !DILocation(line: 3799, column: 12, scope: !1294)
!13747 = !DILocation(line: 3800, column: 30, scope: !1294)
!13748 = !DILocation(line: 3800, column: 9, scope: !1294)
!13749 = !DILocation(line: 3800, column: 38, scope: !1295)
!13750 = !DILocation(line: 3801, column: 13, scope: !1303)
!13751 = !DILocation(line: 3801, column: 16, scope: !1303)
!13752 = !DILocation(line: 3801, column: 13, scope: !1295)
!13753 = !DILocation(line: 3802, column: 19, scope: !1301)
!13754 = !DILocation(line: 3802, column: 18, scope: !1301)
!13755 = !DILocation(line: 3802, column: 40, scope: !1301)
!13756 = !DILocation(line: 3802, column: 17, scope: !1302)
!13757 = !DILocation(line: 3803, column: 17, scope: !13758)
!13758 = distinct !DILexicalBlock(scope: !1301, file: !616, line: 3802, column: 46)
!13759 = !DILocation(line: 3805, column: 17, scope: !1300)
!13760 = !DILocation(line: 3805, column: 22, scope: !13761)
!13761 = !DILexicalBlockFile(scope: !1299, file: !616, discriminator: 1)
!13762 = !DILocation(line: 3805, column: 32, scope: !1299)
!13763 = !DILocation(line: 3805, column: 62, scope: !1299)
!13764 = !DILocation(line: 3805, column: 77, scope: !13765)
!13765 = distinct !DILexicalBlock(scope: !1299, file: !616, line: 3805, column: 74)
!13766 = !DILocation(line: 3805, column: 94, scope: !13765)
!13767 = !DILocation(line: 3805, column: 74, scope: !13765)
!13768 = !DILocation(line: 3805, column: 104, scope: !13765)
!13769 = !DILocation(line: 3805, column: 74, scope: !1299)
!13770 = !DILocation(line: 3805, column: 74, scope: !13771)
!13771 = !DILexicalBlockFile(scope: !1299, file: !616, discriminator: 2)
!13772 = !DILocation(line: 3805, column: 135, scope: !13773)
!13773 = !DILexicalBlockFile(scope: !13765, file: !616, discriminator: 3)
!13774 = !DILocation(line: 3805, column: 153, scope: !13765)
!13775 = !DILocation(line: 3805, column: 163, scope: !13765)
!13776 = !DILocation(line: 3805, column: 188, scope: !13765)
!13777 = !DILocation(line: 3805, column: 119, scope: !13765)
!13778 = !DILocation(line: 3805, column: 207, scope: !13779)
!13779 = !DILexicalBlockFile(scope: !1300, file: !616, discriminator: 4)
!13780 = !DILocation(line: 3805, column: 207, scope: !1299)
!13781 = !DILocation(line: 3805, column: 207, scope: !13782)
!13782 = !DILexicalBlockFile(scope: !1299, file: !616, discriminator: 5)
!13783 = !DILocation(line: 3806, column: 35, scope: !1300)
!13784 = !DILocation(line: 3806, column: 24, scope: !1300)
!13785 = !DILocation(line: 3806, column: 22, scope: !1300)
!13786 = !DILocation(line: 3807, column: 17, scope: !1300)
!13787 = !DILocation(line: 3810, column: 13, scope: !13788)
!13788 = distinct !DILexicalBlock(scope: !1295, file: !616, line: 3810, column: 13)
!13789 = !DILocation(line: 3810, column: 17, scope: !13788)
!13790 = !DILocation(line: 3810, column: 27, scope: !13788)
!13791 = !DILocation(line: 3810, column: 34, scope: !13788)
!13792 = !DILocation(line: 3811, column: 22, scope: !13788)
!13793 = !DILocation(line: 3811, column: 27, scope: !13788)
!13794 = !DILocation(line: 3811, column: 21, scope: !13788)
!13795 = !DILocation(line: 3811, column: 14, scope: !13788)
!13796 = !DILocation(line: 3811, column: 35, scope: !13788)
!13797 = !DILocation(line: 3811, column: 40, scope: !13788)
!13798 = !DILocation(line: 3812, column: 15, scope: !13788)
!13799 = !DILocation(line: 3812, column: 19, scope: !13788)
!13800 = !DILocation(line: 3812, column: 29, scope: !13788)
!13801 = !DILocation(line: 3812, column: 36, scope: !13788)
!13802 = !DILocation(line: 3812, column: 47, scope: !13803)
!13803 = !DILexicalBlockFile(scope: !13788, file: !616, discriminator: 1)
!13804 = !DILocation(line: 3812, column: 52, scope: !13788)
!13805 = !DILocation(line: 3812, column: 46, scope: !13788)
!13806 = !DILocation(line: 3812, column: 39, scope: !13788)
!13807 = !DILocation(line: 3812, column: 60, scope: !13788)
!13808 = !DILocation(line: 3810, column: 13, scope: !1295)
!13809 = !DILocation(line: 3813, column: 13, scope: !13788)
!13810 = !DILocation(line: 3814, column: 13, scope: !13811)
!13811 = distinct !DILexicalBlock(scope: !1295, file: !616, line: 3814, column: 13)
!13812 = !DILocation(line: 3814, column: 13, scope: !1295)
!13813 = !DILocation(line: 3815, column: 50, scope: !13811)
!13814 = !DILocation(line: 3815, column: 54, scope: !13811)
!13815 = !DILocation(line: 3815, column: 70, scope: !13811)
!13816 = !DILocation(line: 3815, column: 75, scope: !13811)
!13817 = !DILocation(line: 3815, column: 69, scope: !13811)
!13818 = !DILocation(line: 3815, column: 62, scope: !13811)
!13819 = !DILocation(line: 3815, column: 17, scope: !13811)
!13820 = !DILocation(line: 3815, column: 15, scope: !13811)
!13821 = !DILocation(line: 3815, column: 13, scope: !13811)
!13822 = !DILocation(line: 3817, column: 43, scope: !13811)
!13823 = !DILocation(line: 3817, column: 47, scope: !13811)
!13824 = !DILocation(line: 3817, column: 63, scope: !13811)
!13825 = !DILocation(line: 3817, column: 68, scope: !13811)
!13826 = !DILocation(line: 3817, column: 62, scope: !13811)
!13827 = !DILocation(line: 3817, column: 55, scope: !13811)
!13828 = !DILocation(line: 3817, column: 17, scope: !13811)
!13829 = !DILocation(line: 3817, column: 15, scope: !13811)
!13830 = !DILocation(line: 3818, column: 13, scope: !1307)
!13831 = !DILocation(line: 3818, column: 15, scope: !1307)
!13832 = !DILocation(line: 3818, column: 13, scope: !1295)
!13833 = !DILocation(line: 3819, column: 13, scope: !1306)
!13834 = !DILocation(line: 3819, column: 18, scope: !13835)
!13835 = !DILexicalBlockFile(scope: !1305, file: !616, discriminator: 1)
!13836 = !DILocation(line: 3819, column: 28, scope: !1305)
!13837 = !DILocation(line: 3819, column: 51, scope: !1305)
!13838 = !DILocation(line: 3819, column: 62, scope: !1311)
!13839 = !DILocation(line: 3819, column: 70, scope: !1311)
!13840 = !DILocation(line: 3819, column: 62, scope: !1305)
!13841 = !DILocation(line: 3819, column: 94, scope: !13842)
!13842 = !DILexicalBlockFile(scope: !1310, file: !616, discriminator: 2)
!13843 = !DILocation(line: 3819, column: 108, scope: !1310)
!13844 = !DILocation(line: 3819, column: 113, scope: !13845)
!13845 = !DILexicalBlockFile(scope: !1309, file: !616, discriminator: 4)
!13846 = !DILocation(line: 3819, column: 123, scope: !1309)
!13847 = !DILocation(line: 3819, column: 153, scope: !1309)
!13848 = !DILocation(line: 3819, column: 171, scope: !13849)
!13849 = distinct !DILexicalBlock(scope: !1309, file: !616, line: 3819, column: 168)
!13850 = !DILocation(line: 3819, column: 188, scope: !13849)
!13851 = !DILocation(line: 3819, column: 168, scope: !13849)
!13852 = !DILocation(line: 3819, column: 198, scope: !13849)
!13853 = !DILocation(line: 3819, column: 168, scope: !1309)
!13854 = !DILocation(line: 3819, column: 168, scope: !13855)
!13855 = !DILexicalBlockFile(scope: !1309, file: !616, discriminator: 5)
!13856 = !DILocation(line: 3819, column: 229, scope: !13857)
!13857 = !DILexicalBlockFile(scope: !13849, file: !616, discriminator: 6)
!13858 = !DILocation(line: 3819, column: 247, scope: !13849)
!13859 = !DILocation(line: 3819, column: 257, scope: !13849)
!13860 = !DILocation(line: 3819, column: 282, scope: !13849)
!13861 = !DILocation(line: 3819, column: 213, scope: !13849)
!13862 = !DILocation(line: 3819, column: 301, scope: !13863)
!13863 = !DILexicalBlockFile(scope: !1310, file: !616, discriminator: 7)
!13864 = !DILocation(line: 3819, column: 301, scope: !1309)
!13865 = !DILocation(line: 3819, column: 301, scope: !13866)
!13866 = !DILexicalBlockFile(scope: !1309, file: !616, discriminator: 8)
!13867 = !DILocation(line: 3819, column: 314, scope: !13868)
!13868 = !DILexicalBlockFile(scope: !1310, file: !616, discriminator: 9)
!13869 = !DILocation(line: 3819, column: 316, scope: !13870)
!13870 = !DILexicalBlockFile(scope: !13871, file: !616, discriminator: 10)
!13871 = !DILexicalBlockFile(scope: !1306, file: !616, discriminator: 3)
!13872 = !DILocation(line: 3819, column: 316, scope: !1305)
!13873 = !DILocation(line: 3819, column: 316, scope: !13874)
!13874 = !DILexicalBlockFile(scope: !1305, file: !616, discriminator: 11)
!13875 = !DILocation(line: 3820, column: 13, scope: !1306)
!13876 = !DILocation(line: 3822, column: 27, scope: !1315)
!13877 = !DILocation(line: 3822, column: 33, scope: !1315)
!13878 = !DILocation(line: 3822, column: 13, scope: !1315)
!13879 = !DILocation(line: 3822, column: 36, scope: !1315)
!13880 = !DILocation(line: 3822, column: 13, scope: !1295)
!13881 = !DILocation(line: 3823, column: 13, scope: !1314)
!13882 = !DILocation(line: 3823, column: 18, scope: !13883)
!13883 = !DILexicalBlockFile(scope: !1313, file: !616, discriminator: 1)
!13884 = !DILocation(line: 3823, column: 28, scope: !1313)
!13885 = !DILocation(line: 3823, column: 58, scope: !1313)
!13886 = !DILocation(line: 3823, column: 70, scope: !13887)
!13887 = distinct !DILexicalBlock(scope: !1313, file: !616, line: 3823, column: 67)
!13888 = !DILocation(line: 3823, column: 87, scope: !13887)
!13889 = !DILocation(line: 3823, column: 67, scope: !13887)
!13890 = !DILocation(line: 3823, column: 97, scope: !13887)
!13891 = !DILocation(line: 3823, column: 67, scope: !1313)
!13892 = !DILocation(line: 3823, column: 67, scope: !13893)
!13893 = !DILexicalBlockFile(scope: !1313, file: !616, discriminator: 2)
!13894 = !DILocation(line: 3823, column: 128, scope: !13895)
!13895 = !DILexicalBlockFile(scope: !13887, file: !616, discriminator: 3)
!13896 = !DILocation(line: 3823, column: 146, scope: !13887)
!13897 = !DILocation(line: 3823, column: 156, scope: !13887)
!13898 = !DILocation(line: 3823, column: 181, scope: !13887)
!13899 = !DILocation(line: 3823, column: 112, scope: !13887)
!13900 = !DILocation(line: 3823, column: 200, scope: !13901)
!13901 = !DILexicalBlockFile(scope: !1314, file: !616, discriminator: 4)
!13902 = !DILocation(line: 3823, column: 200, scope: !1313)
!13903 = !DILocation(line: 3823, column: 200, scope: !13904)
!13904 = !DILexicalBlockFile(scope: !1313, file: !616, discriminator: 5)
!13905 = !DILocation(line: 3824, column: 13, scope: !1314)
!13906 = !DILocation(line: 3824, column: 18, scope: !13907)
!13907 = !DILexicalBlockFile(scope: !1317, file: !616, discriminator: 1)
!13908 = !DILocation(line: 3824, column: 28, scope: !1317)
!13909 = !DILocation(line: 3824, column: 51, scope: !1317)
!13910 = !DILocation(line: 3824, column: 62, scope: !1321)
!13911 = !DILocation(line: 3824, column: 70, scope: !1321)
!13912 = !DILocation(line: 3824, column: 62, scope: !1317)
!13913 = !DILocation(line: 3824, column: 94, scope: !13914)
!13914 = !DILexicalBlockFile(scope: !1320, file: !616, discriminator: 2)
!13915 = !DILocation(line: 3824, column: 108, scope: !1320)
!13916 = !DILocation(line: 3824, column: 113, scope: !13917)
!13917 = !DILexicalBlockFile(scope: !1319, file: !616, discriminator: 4)
!13918 = !DILocation(line: 3824, column: 123, scope: !1319)
!13919 = !DILocation(line: 3824, column: 153, scope: !1319)
!13920 = !DILocation(line: 3824, column: 171, scope: !13921)
!13921 = distinct !DILexicalBlock(scope: !1319, file: !616, line: 3824, column: 168)
!13922 = !DILocation(line: 3824, column: 188, scope: !13921)
!13923 = !DILocation(line: 3824, column: 168, scope: !13921)
!13924 = !DILocation(line: 3824, column: 198, scope: !13921)
!13925 = !DILocation(line: 3824, column: 168, scope: !1319)
!13926 = !DILocation(line: 3824, column: 168, scope: !13927)
!13927 = !DILexicalBlockFile(scope: !1319, file: !616, discriminator: 5)
!13928 = !DILocation(line: 3824, column: 229, scope: !13929)
!13929 = !DILexicalBlockFile(scope: !13921, file: !616, discriminator: 6)
!13930 = !DILocation(line: 3824, column: 247, scope: !13921)
!13931 = !DILocation(line: 3824, column: 257, scope: !13921)
!13932 = !DILocation(line: 3824, column: 282, scope: !13921)
!13933 = !DILocation(line: 3824, column: 213, scope: !13921)
!13934 = !DILocation(line: 3824, column: 301, scope: !13935)
!13935 = !DILexicalBlockFile(scope: !1320, file: !616, discriminator: 7)
!13936 = !DILocation(line: 3824, column: 301, scope: !1319)
!13937 = !DILocation(line: 3824, column: 301, scope: !13938)
!13938 = !DILexicalBlockFile(scope: !1319, file: !616, discriminator: 8)
!13939 = !DILocation(line: 3824, column: 314, scope: !13940)
!13940 = !DILexicalBlockFile(scope: !1320, file: !616, discriminator: 9)
!13941 = !DILocation(line: 3824, column: 316, scope: !13942)
!13942 = !DILexicalBlockFile(scope: !13943, file: !616, discriminator: 10)
!13943 = !DILexicalBlockFile(scope: !1314, file: !616, discriminator: 3)
!13944 = !DILocation(line: 3824, column: 316, scope: !1317)
!13945 = !DILocation(line: 3824, column: 316, scope: !13946)
!13946 = !DILexicalBlockFile(scope: !1317, file: !616, discriminator: 11)
!13947 = !DILocation(line: 3825, column: 13, scope: !1314)
!13948 = !DILocation(line: 3827, column: 9, scope: !1295)
!13949 = !DILocation(line: 3827, column: 14, scope: !13950)
!13950 = !DILexicalBlockFile(scope: !1323, file: !616, discriminator: 1)
!13951 = !DILocation(line: 3827, column: 24, scope: !1323)
!13952 = !DILocation(line: 3827, column: 54, scope: !1323)
!13953 = !DILocation(line: 3827, column: 66, scope: !13954)
!13954 = distinct !DILexicalBlock(scope: !1323, file: !616, line: 3827, column: 63)
!13955 = !DILocation(line: 3827, column: 83, scope: !13954)
!13956 = !DILocation(line: 3827, column: 63, scope: !13954)
!13957 = !DILocation(line: 3827, column: 93, scope: !13954)
!13958 = !DILocation(line: 3827, column: 63, scope: !1323)
!13959 = !DILocation(line: 3827, column: 63, scope: !13960)
!13960 = !DILexicalBlockFile(scope: !1323, file: !616, discriminator: 2)
!13961 = !DILocation(line: 3827, column: 124, scope: !13962)
!13962 = !DILexicalBlockFile(scope: !13954, file: !616, discriminator: 3)
!13963 = !DILocation(line: 3827, column: 142, scope: !13954)
!13964 = !DILocation(line: 3827, column: 152, scope: !13954)
!13965 = !DILocation(line: 3827, column: 177, scope: !13954)
!13966 = !DILocation(line: 3827, column: 108, scope: !13954)
!13967 = !DILocation(line: 3827, column: 196, scope: !13968)
!13968 = !DILexicalBlockFile(scope: !1295, file: !616, discriminator: 4)
!13969 = !DILocation(line: 3827, column: 196, scope: !1323)
!13970 = !DILocation(line: 3827, column: 196, scope: !13971)
!13971 = !DILexicalBlockFile(scope: !1323, file: !616, discriminator: 5)
!13972 = !DILocation(line: 3796, column: 5, scope: !1296)
!13973 = !DILocation(line: 3828, column: 5, scope: !1297)
!13974 = !DILocation(line: 3831, column: 9, scope: !1327)
!13975 = !DILocation(line: 3831, column: 14, scope: !1327)
!13976 = !DILocation(line: 3831, column: 9, scope: !1251)
!13977 = !DILocation(line: 3832, column: 11, scope: !1325)
!13978 = !DILocation(line: 3832, column: 26, scope: !1325)
!13979 = !DILocation(line: 3832, column: 41, scope: !1325)
!13980 = !DILocation(line: 3832, column: 39, scope: !1325)
!13981 = !DILocation(line: 3834, column: 13, scope: !13982)
!13982 = distinct !DILexicalBlock(scope: !1325, file: !616, line: 3834, column: 13)
!13983 = !DILocation(line: 3834, column: 16, scope: !13982)
!13984 = !DILocation(line: 3834, column: 13, scope: !1325)
!13985 = !DILocation(line: 3835, column: 23, scope: !13982)
!13986 = !DILocation(line: 3835, column: 13, scope: !13982)
!13987 = !DILocation(line: 3837, column: 18, scope: !1325)
!13988 = !DILocation(line: 3837, column: 9, scope: !1325)
!13989 = !DILocation(line: 3838, column: 30, scope: !1325)
!13990 = !DILocation(line: 3838, column: 9, scope: !1325)
!13991 = !DILocation(line: 3838, column: 38, scope: !1326)
!13992 = !DILocation(line: 3839, column: 5, scope: !1326)
!13993 = !DILocation(line: 3841, column: 12, scope: !1251)
!13994 = !DILocation(line: 3841, column: 5, scope: !1251)
!13995 = !DILocation(line: 3842, column: 1, scope: !1251)
!13996 = !DILocation(line: 4244, column: 27, scope: !1390)
!13997 = !DILocation(line: 4244, column: 43, scope: !1390)
!13998 = !DILocation(line: 4244, column: 55, scope: !1390)
!13999 = !DILocation(line: 4246, column: 5, scope: !1390)
!14000 = !DILocation(line: 4246, column: 11, scope: !1390)
!14001 = !DILocation(line: 4246, column: 27, scope: !1390)
!14002 = !DILocation(line: 4247, column: 5, scope: !1390)
!14003 = !DILocation(line: 4247, column: 12, scope: !1390)
!14004 = !DILocation(line: 4248, column: 5, scope: !1390)
!14005 = !DILocation(line: 4248, column: 12, scope: !1390)
!14006 = !DILocation(line: 4249, column: 5, scope: !1390)
!14007 = !DILocation(line: 4249, column: 9, scope: !1390)
!14008 = !DILocation(line: 4250, column: 5, scope: !1390)
!14009 = !DILocation(line: 4250, column: 9, scope: !1390)
!14010 = !DILocation(line: 4251, column: 5, scope: !1390)
!14011 = !DILocation(line: 4251, column: 9, scope: !1390)
!14012 = !DILocation(line: 4252, column: 5, scope: !1390)
!14013 = !DILocation(line: 4252, column: 15, scope: !1390)
!14014 = !DILocation(line: 4253, column: 5, scope: !1390)
!14015 = !DILocation(line: 4253, column: 10, scope: !1390)
!14016 = !DILocation(line: 4260, column: 5, scope: !1390)
!14017 = !DILocation(line: 4260, column: 9, scope: !1390)
!14018 = !DILocation(line: 4263, column: 5, scope: !1390)
!14019 = !DILocation(line: 4264, column: 5, scope: !1390)
!14020 = !DILocation(line: 4265, column: 25, scope: !1390)
!14021 = !DILocation(line: 4265, column: 9, scope: !1390)
!14022 = !DILocation(line: 4265, column: 23, scope: !1390)
!14023 = !DILocation(line: 4266, column: 25, scope: !1390)
!14024 = !DILocation(line: 4266, column: 9, scope: !1390)
!14025 = !DILocation(line: 4266, column: 23, scope: !1390)
!14026 = !DILocation(line: 4267, column: 12, scope: !1390)
!14027 = !DILocation(line: 4267, column: 5, scope: !1390)
!14028 = !DILocation(line: 4268, column: 12, scope: !1390)
!14029 = !DILocation(line: 4268, column: 20, scope: !1390)
!14030 = !DILocation(line: 4268, column: 5, scope: !1390)
!14031 = !DILocation(line: 4269, column: 45, scope: !14032)
!14032 = distinct !DILexicalBlock(scope: !1390, file: !616, line: 4269, column: 9)
!14033 = !DILocation(line: 4269, column: 51, scope: !14032)
!14034 = !DILocation(line: 4269, column: 59, scope: !14032)
!14035 = !DILocation(line: 4269, column: 10, scope: !14032)
!14036 = !DILocation(line: 4269, column: 9, scope: !1390)
!14037 = !DILocation(line: 4274, column: 9, scope: !14032)
!14038 = !DILocation(line: 4276, column: 25, scope: !1390)
!14039 = !DILocation(line: 4276, column: 36, scope: !1390)
!14040 = !DILocation(line: 4276, column: 50, scope: !1390)
!14041 = !DILocation(line: 4277, column: 25, scope: !1390)
!14042 = !DILocation(line: 4277, column: 36, scope: !1390)
!14043 = !DILocation(line: 4276, column: 50, scope: !14044)
!14044 = !DILexicalBlockFile(scope: !14045, file: !616, discriminator: 2)
!14045 = !DILexicalBlockFile(scope: !1390, file: !616, discriminator: 1)
!14046 = !DILocation(line: 4276, column: 22, scope: !1390)
!14047 = !DILocation(line: 4285, column: 14, scope: !14048)
!14048 = distinct !DILexicalBlock(scope: !1390, file: !616, line: 4285, column: 9)
!14049 = !DILocation(line: 4285, column: 10, scope: !14048)
!14050 = !DILocation(line: 4285, column: 21, scope: !14048)
!14051 = !DILocation(line: 4285, column: 28, scope: !14052)
!14052 = !DILexicalBlockFile(scope: !14048, file: !616, discriminator: 1)
!14053 = !DILocation(line: 4285, column: 24, scope: !14048)
!14054 = !DILocation(line: 4285, column: 34, scope: !14048)
!14055 = !DILocation(line: 4285, column: 42, scope: !14056)
!14056 = !DILexicalBlockFile(scope: !14057, file: !616, discriminator: 3)
!14057 = !DILexicalBlockFile(scope: !14048, file: !616, discriminator: 2)
!14058 = !DILocation(line: 4285, column: 38, scope: !14048)
!14059 = !DILocation(line: 4285, column: 47, scope: !14048)
!14060 = !DILocation(line: 4285, column: 54, scope: !14061)
!14061 = !DILexicalBlockFile(scope: !14048, file: !616, discriminator: 4)
!14062 = !DILocation(line: 4285, column: 50, scope: !14048)
!14063 = !DILocation(line: 4285, column: 9, scope: !1390)
!14064 = !DILocation(line: 4286, column: 22, scope: !14065)
!14065 = distinct !DILexicalBlock(scope: !14048, file: !616, line: 4285, column: 63)
!14066 = !DILocation(line: 4287, column: 63, scope: !14065)
!14067 = !DILocation(line: 4286, column: 9, scope: !14065)
!14068 = !DILocation(line: 4288, column: 9, scope: !14065)
!14069 = !DILocation(line: 4305, column: 7, scope: !1408)
!14070 = !DILocation(line: 4305, column: 22, scope: !1408)
!14071 = !DILocation(line: 4305, column: 37, scope: !1408)
!14072 = !DILocation(line: 4305, column: 35, scope: !1408)
!14073 = !DILocation(line: 4307, column: 9, scope: !14074)
!14074 = distinct !DILexicalBlock(scope: !1408, file: !616, line: 4307, column: 9)
!14075 = !DILocation(line: 4307, column: 9, scope: !1408)
!14076 = !DILocation(line: 4308, column: 27, scope: !14074)
!14077 = !DILocation(line: 4308, column: 43, scope: !14074)
!14078 = !DILocation(line: 4308, column: 51, scope: !14074)
!14079 = !DILocation(line: 4308, column: 67, scope: !14074)
!14080 = !DILocation(line: 4308, column: 18, scope: !14074)
!14081 = !DILocation(line: 4308, column: 16, scope: !14074)
!14082 = !DILocation(line: 4308, column: 9, scope: !14074)
!14083 = !DILocation(line: 4311, column: 29, scope: !14074)
!14084 = !DILocation(line: 4311, column: 41, scope: !14074)
!14085 = !DILocation(line: 4311, column: 18, scope: !14074)
!14086 = !DILocation(line: 4311, column: 16, scope: !14074)
!14087 = !DILocation(line: 4312, column: 26, scope: !1408)
!14088 = !DILocation(line: 4312, column: 5, scope: !1408)
!14089 = !DILocation(line: 4312, column: 34, scope: !1390)
!14090 = !DILocation(line: 4314, column: 9, scope: !14091)
!14091 = distinct !DILexicalBlock(scope: !1390, file: !616, line: 4314, column: 9)
!14092 = !DILocation(line: 4314, column: 9, scope: !1390)
!14093 = !DILocation(line: 4315, column: 24, scope: !14094)
!14094 = distinct !DILexicalBlock(scope: !14091, file: !616, line: 4314, column: 17)
!14095 = !DILocation(line: 4315, column: 22, scope: !14094)
!14096 = !DILocation(line: 4316, column: 9, scope: !14094)
!14097 = !DILocation(line: 4320, column: 51, scope: !1390)
!14098 = !DILocation(line: 4321, column: 18, scope: !1390)
!14099 = !DILocation(line: 4321, column: 5, scope: !1390)
!14100 = !DILocation(line: 4323, column: 5, scope: !1390)
!14101 = !DILocation(line: 4324, column: 5, scope: !1390)
!14102 = !DILocation(line: 4325, column: 12, scope: !1390)
!14103 = !DILocation(line: 4325, column: 5, scope: !1390)
!14104 = !DILocation(line: 4326, column: 1, scope: !1390)
!14105 = !DILocation(line: 4825, column: 37, scope: !1554)
!14106 = !DILocation(line: 4825, column: 54, scope: !1554)
!14107 = !DILocation(line: 4825, column: 63, scope: !1554)
!14108 = !DILocation(line: 4827, column: 5, scope: !1554)
!14109 = !DILocation(line: 4827, column: 9, scope: !1554)
!14110 = !DILocation(line: 4828, column: 5, scope: !1554)
!14111 = !DILocation(line: 4828, column: 15, scope: !1554)
!14112 = !DILocation(line: 4829, column: 30, scope: !1554)
!14113 = !DILocation(line: 4829, column: 39, scope: !1554)
!14114 = !DILocation(line: 4829, column: 14, scope: !1554)
!14115 = !DILocation(line: 4829, column: 12, scope: !1554)
!14116 = !DILocation(line: 4830, column: 10, scope: !14117)
!14117 = distinct !DILexicalBlock(scope: !1554, file: !616, line: 4830, column: 9)
!14118 = !DILocation(line: 4830, column: 9, scope: !1554)
!14119 = !DILocation(line: 4831, column: 9, scope: !14117)
!14120 = !DILocation(line: 4832, column: 47, scope: !1554)
!14121 = !DILocation(line: 4832, column: 29, scope: !1554)
!14122 = !DILocation(line: 4832, column: 57, scope: !1554)
!14123 = !DILocation(line: 4832, column: 28, scope: !1554)
!14124 = !DILocation(line: 4832, column: 10, scope: !1554)
!14125 = !DILocation(line: 4832, column: 6, scope: !1554)
!14126 = !DILocation(line: 4832, column: 8, scope: !1554)
!14127 = !DILocation(line: 4833, column: 11, scope: !14128)
!14128 = distinct !DILexicalBlock(scope: !1554, file: !616, line: 4833, column: 9)
!14129 = !DILocation(line: 4833, column: 10, scope: !14128)
!14130 = !DILocation(line: 4833, column: 13, scope: !14128)
!14131 = !DILocation(line: 4833, column: 20, scope: !14128)
!14132 = !DILocation(line: 4833, column: 23, scope: !14133)
!14133 = !DILexicalBlockFile(scope: !14128, file: !616, discriminator: 1)
!14134 = !DILocation(line: 4833, column: 9, scope: !1554)
!14135 = !DILocation(line: 4834, column: 9, scope: !14128)
!14136 = !DILocation(line: 4835, column: 45, scope: !1554)
!14137 = !DILocation(line: 4835, column: 27, scope: !1554)
!14138 = !DILocation(line: 4835, column: 55, scope: !1554)
!14139 = !DILocation(line: 4835, column: 26, scope: !1554)
!14140 = !DILocation(line: 4835, column: 11, scope: !1554)
!14141 = !DILocation(line: 4835, column: 6, scope: !1554)
!14142 = !DILocation(line: 4835, column: 9, scope: !1554)
!14143 = !DILocation(line: 4836, column: 11, scope: !14144)
!14144 = distinct !DILexicalBlock(scope: !1554, file: !616, line: 4836, column: 9)
!14145 = !DILocation(line: 4836, column: 10, scope: !14144)
!14146 = !DILocation(line: 4836, column: 14, scope: !14144)
!14147 = !DILocation(line: 4836, column: 21, scope: !14144)
!14148 = !DILocation(line: 4836, column: 24, scope: !14149)
!14149 = !DILexicalBlockFile(scope: !14144, file: !616, discriminator: 1)
!14150 = !DILocation(line: 4836, column: 9, scope: !1554)
!14151 = !DILocation(line: 4837, column: 9, scope: !14144)
!14152 = !DILocation(line: 4839, column: 12, scope: !1554)
!14153 = !DILocation(line: 4839, column: 5, scope: !1554)
!14154 = !DILocation(line: 4841, column: 5, scope: !1554)
!14155 = !DILocation(line: 4841, column: 10, scope: !14156)
!14156 = !DILexicalBlockFile(scope: !1566, file: !616, discriminator: 1)
!14157 = !DILocation(line: 4841, column: 20, scope: !1566)
!14158 = !DILocation(line: 4841, column: 51, scope: !1566)
!14159 = !DILocation(line: 4841, column: 64, scope: !1569)
!14160 = !DILocation(line: 4841, column: 80, scope: !1569)
!14161 = !DILocation(line: 4841, column: 64, scope: !1566)
!14162 = !DILocation(line: 4841, column: 95, scope: !14163)
!14163 = !DILexicalBlockFile(scope: !1569, file: !616, discriminator: 2)
!14164 = !DILocation(line: 4841, column: 100, scope: !14165)
!14165 = !DILexicalBlockFile(scope: !1568, file: !616, discriminator: 4)
!14166 = !DILocation(line: 4841, column: 110, scope: !1568)
!14167 = !DILocation(line: 4841, column: 140, scope: !1568)
!14168 = !DILocation(line: 4841, column: 166, scope: !14169)
!14169 = distinct !DILexicalBlock(scope: !1568, file: !616, line: 4841, column: 163)
!14170 = !DILocation(line: 4841, column: 183, scope: !14169)
!14171 = !DILocation(line: 4841, column: 163, scope: !14169)
!14172 = !DILocation(line: 4841, column: 193, scope: !14169)
!14173 = !DILocation(line: 4841, column: 163, scope: !1568)
!14174 = !DILocation(line: 4841, column: 163, scope: !14175)
!14175 = !DILexicalBlockFile(scope: !1568, file: !616, discriminator: 5)
!14176 = !DILocation(line: 4841, column: 224, scope: !14177)
!14177 = !DILexicalBlockFile(scope: !14169, file: !616, discriminator: 6)
!14178 = !DILocation(line: 4841, column: 242, scope: !14169)
!14179 = !DILocation(line: 4841, column: 252, scope: !14169)
!14180 = !DILocation(line: 4841, column: 277, scope: !14169)
!14181 = !DILocation(line: 4841, column: 208, scope: !14169)
!14182 = !DILocation(line: 4841, column: 296, scope: !14183)
!14183 = !DILexicalBlockFile(scope: !1569, file: !616, discriminator: 7)
!14184 = !DILocation(line: 4841, column: 296, scope: !1568)
!14185 = !DILocation(line: 4841, column: 296, scope: !14186)
!14186 = !DILexicalBlockFile(scope: !1568, file: !616, discriminator: 8)
!14187 = !DILocation(line: 4841, column: 296, scope: !14188)
!14188 = !DILexicalBlockFile(scope: !1568, file: !616, discriminator: 9)
!14189 = !DILocation(line: 4841, column: 309, scope: !14190)
!14190 = !DILexicalBlockFile(scope: !14191, file: !616, discriminator: 10)
!14191 = !DILexicalBlockFile(scope: !1554, file: !616, discriminator: 3)
!14192 = !DILocation(line: 4841, column: 309, scope: !1566)
!14193 = !DILocation(line: 4841, column: 309, scope: !14194)
!14194 = !DILexicalBlockFile(scope: !1566, file: !616, discriminator: 11)
!14195 = !DILocation(line: 4842, column: 12, scope: !1554)
!14196 = !DILocation(line: 4843, column: 1, scope: !1554)
!14197 = !DILocation(line: 4842, column: 5, scope: !1554)
!14198 = !DILocation(line: 4789, column: 34, scope: !1570)
!14199 = !DILocation(line: 4789, column: 47, scope: !1570)
!14200 = !DILocation(line: 4792, column: 5, scope: !1570)
!14201 = !DILocation(line: 4792, column: 21, scope: !1570)
!14202 = !DILocation(line: 4792, column: 28, scope: !1570)
!14203 = !DILocation(line: 4792, column: 45, scope: !1570)
!14204 = !DILocation(line: 4792, column: 55, scope: !14205)
!14205 = distinct !DILexicalBlock(scope: !1570, file: !616, line: 4792, column: 55)
!14206 = !DILocation(line: 4792, column: 62, scope: !14205)
!14207 = !DILocation(line: 4792, column: 55, scope: !1570)
!14208 = !DILocation(line: 4792, column: 72, scope: !14209)
!14209 = !DILexicalBlockFile(scope: !14205, file: !616, discriminator: 1)
!14210 = !DILocation(line: 4792, column: 67, scope: !14205)
!14211 = !DILocation(line: 4792, column: 108, scope: !14212)
!14212 = !DILexicalBlockFile(scope: !14213, file: !616, discriminator: 2)
!14213 = distinct !DILexicalBlock(scope: !14205, file: !616, line: 4792, column: 91)
!14214 = !DILocation(line: 4792, column: 115, scope: !14213)
!14215 = !DILocation(line: 4792, column: 93, scope: !14213)
!14216 = !DILocation(line: 4792, column: 99, scope: !14213)
!14217 = !DILocation(line: 4792, column: 106, scope: !14213)
!14218 = !DILocation(line: 4792, column: 140, scope: !14213)
!14219 = !DILocation(line: 4792, column: 147, scope: !14213)
!14220 = !DILocation(line: 4792, column: 124, scope: !14213)
!14221 = !DILocation(line: 4792, column: 130, scope: !14213)
!14222 = !DILocation(line: 4792, column: 138, scope: !14213)
!14223 = !DILocation(line: 4792, column: 172, scope: !14213)
!14224 = !DILocation(line: 4792, column: 179, scope: !14213)
!14225 = !DILocation(line: 4792, column: 157, scope: !14213)
!14226 = !DILocation(line: 4792, column: 163, scope: !14213)
!14227 = !DILocation(line: 4792, column: 170, scope: !14213)
!14228 = !DILocation(line: 4792, column: 204, scope: !14213)
!14229 = !DILocation(line: 4792, column: 211, scope: !14213)
!14230 = !DILocation(line: 4792, column: 188, scope: !14213)
!14231 = !DILocation(line: 4792, column: 194, scope: !14213)
!14232 = !DILocation(line: 4792, column: 202, scope: !14213)
!14233 = !DILocation(line: 4792, column: 228, scope: !14213)
!14234 = !DILocation(line: 4792, column: 226, scope: !14213)
!14235 = !DILocation(line: 4793, column: 33, scope: !1570)
!14236 = !DILocation(line: 4793, column: 39, scope: !1570)
!14237 = !DILocation(line: 4793, column: 12, scope: !1570)
!14238 = !DILocation(line: 4798, column: 1, scope: !1570)
!14239 = !DILocation(line: 4793, column: 5, scope: !1570)
!14240 = !DILocation(line: 4744, column: 23, scope: !1583)
!14241 = !DILocation(line: 4744, column: 34, scope: !1583)
!14242 = !DILocation(line: 4744, column: 48, scope: !1583)
!14243 = !DILocation(line: 4744, column: 58, scope: !1583)
!14244 = !DILocation(line: 4747, column: 5, scope: !1583)
!14245 = !DILocation(line: 4747, column: 9, scope: !1583)
!14246 = !DILocation(line: 4747, column: 17, scope: !1583)
!14247 = !DILocation(line: 4748, column: 5, scope: !1583)
!14248 = !DILocation(line: 4748, column: 21, scope: !1583)
!14249 = !DILocation(line: 4748, column: 28, scope: !1583)
!14250 = !DILocation(line: 4748, column: 45, scope: !1583)
!14251 = !DILocation(line: 4748, column: 55, scope: !14252)
!14252 = distinct !DILexicalBlock(scope: !1583, file: !616, line: 4748, column: 55)
!14253 = !DILocation(line: 4748, column: 62, scope: !14252)
!14254 = !DILocation(line: 4748, column: 55, scope: !1583)
!14255 = !DILocation(line: 4748, column: 72, scope: !14256)
!14256 = !DILexicalBlockFile(scope: !14252, file: !616, discriminator: 1)
!14257 = !DILocation(line: 4748, column: 67, scope: !14252)
!14258 = !DILocation(line: 4748, column: 108, scope: !14259)
!14259 = !DILexicalBlockFile(scope: !14260, file: !616, discriminator: 2)
!14260 = distinct !DILexicalBlock(scope: !14252, file: !616, line: 4748, column: 91)
!14261 = !DILocation(line: 4748, column: 115, scope: !14260)
!14262 = !DILocation(line: 4748, column: 93, scope: !14260)
!14263 = !DILocation(line: 4748, column: 99, scope: !14260)
!14264 = !DILocation(line: 4748, column: 106, scope: !14260)
!14265 = !DILocation(line: 4748, column: 140, scope: !14260)
!14266 = !DILocation(line: 4748, column: 147, scope: !14260)
!14267 = !DILocation(line: 4748, column: 124, scope: !14260)
!14268 = !DILocation(line: 4748, column: 130, scope: !14260)
!14269 = !DILocation(line: 4748, column: 138, scope: !14260)
!14270 = !DILocation(line: 4748, column: 172, scope: !14260)
!14271 = !DILocation(line: 4748, column: 179, scope: !14260)
!14272 = !DILocation(line: 4748, column: 157, scope: !14260)
!14273 = !DILocation(line: 4748, column: 163, scope: !14260)
!14274 = !DILocation(line: 4748, column: 170, scope: !14260)
!14275 = !DILocation(line: 4748, column: 204, scope: !14260)
!14276 = !DILocation(line: 4748, column: 211, scope: !14260)
!14277 = !DILocation(line: 4748, column: 188, scope: !14260)
!14278 = !DILocation(line: 4748, column: 194, scope: !14260)
!14279 = !DILocation(line: 4748, column: 202, scope: !14260)
!14280 = !DILocation(line: 4748, column: 228, scope: !14260)
!14281 = !DILocation(line: 4748, column: 226, scope: !14260)
!14282 = !DILocation(line: 4749, column: 22, scope: !1583)
!14283 = !DILocation(line: 4749, column: 30, scope: !1583)
!14284 = !DILocation(line: 4749, column: 36, scope: !1583)
!14285 = !DILocation(line: 4749, column: 42, scope: !1583)
!14286 = !DILocation(line: 4749, column: 12, scope: !1583)
!14287 = !DILocation(line: 4760, column: 1, scope: !1583)
!14288 = !DILocation(line: 4749, column: 5, scope: !1583)
!14289 = !DILocation(line: 4769, column: 19, scope: !1594)
!14290 = !DILocation(line: 4769, column: 30, scope: !1594)
!14291 = !DILocation(line: 4772, column: 5, scope: !1594)
!14292 = !DILocation(line: 4772, column: 21, scope: !1594)
!14293 = !DILocation(line: 4772, column: 28, scope: !1594)
!14294 = !DILocation(line: 4772, column: 45, scope: !1594)
!14295 = !DILocation(line: 4772, column: 55, scope: !14296)
!14296 = distinct !DILexicalBlock(scope: !1594, file: !616, line: 4772, column: 55)
!14297 = !DILocation(line: 4772, column: 62, scope: !14296)
!14298 = !DILocation(line: 4772, column: 55, scope: !1594)
!14299 = !DILocation(line: 4772, column: 72, scope: !14300)
!14300 = !DILexicalBlockFile(scope: !14296, file: !616, discriminator: 1)
!14301 = !DILocation(line: 4772, column: 67, scope: !14296)
!14302 = !DILocation(line: 4772, column: 108, scope: !14303)
!14303 = !DILexicalBlockFile(scope: !14304, file: !616, discriminator: 2)
!14304 = distinct !DILexicalBlock(scope: !14296, file: !616, line: 4772, column: 91)
!14305 = !DILocation(line: 4772, column: 115, scope: !14304)
!14306 = !DILocation(line: 4772, column: 93, scope: !14304)
!14307 = !DILocation(line: 4772, column: 99, scope: !14304)
!14308 = !DILocation(line: 4772, column: 106, scope: !14304)
!14309 = !DILocation(line: 4772, column: 140, scope: !14304)
!14310 = !DILocation(line: 4772, column: 147, scope: !14304)
!14311 = !DILocation(line: 4772, column: 124, scope: !14304)
!14312 = !DILocation(line: 4772, column: 130, scope: !14304)
!14313 = !DILocation(line: 4772, column: 138, scope: !14304)
!14314 = !DILocation(line: 4772, column: 172, scope: !14304)
!14315 = !DILocation(line: 4772, column: 179, scope: !14304)
!14316 = !DILocation(line: 4772, column: 157, scope: !14304)
!14317 = !DILocation(line: 4772, column: 163, scope: !14304)
!14318 = !DILocation(line: 4772, column: 170, scope: !14304)
!14319 = !DILocation(line: 4772, column: 204, scope: !14304)
!14320 = !DILocation(line: 4772, column: 211, scope: !14304)
!14321 = !DILocation(line: 4772, column: 188, scope: !14304)
!14322 = !DILocation(line: 4772, column: 194, scope: !14304)
!14323 = !DILocation(line: 4772, column: 202, scope: !14304)
!14324 = !DILocation(line: 4772, column: 228, scope: !14304)
!14325 = !DILocation(line: 4772, column: 226, scope: !14304)
!14326 = !DILocation(line: 4773, column: 21, scope: !1594)
!14327 = !DILocation(line: 4773, column: 25, scope: !1594)
!14328 = !DILocation(line: 4773, column: 12, scope: !1594)
!14329 = !DILocation(line: 4778, column: 1, scope: !1594)
!14330 = !DILocation(line: 4773, column: 5, scope: !1594)
!14331 = !DILocation(line: 4805, column: 24, scope: !1602)
!14332 = !DILocation(line: 4805, column: 37, scope: !1602)
!14333 = !DILocation(line: 4808, column: 5, scope: !1602)
!14334 = !DILocation(line: 4808, column: 21, scope: !1602)
!14335 = !DILocation(line: 4808, column: 28, scope: !1602)
!14336 = !DILocation(line: 4808, column: 45, scope: !1602)
!14337 = !DILocation(line: 4808, column: 55, scope: !14338)
!14338 = distinct !DILexicalBlock(scope: !1602, file: !616, line: 4808, column: 55)
!14339 = !DILocation(line: 4808, column: 62, scope: !14338)
!14340 = !DILocation(line: 4808, column: 55, scope: !1602)
!14341 = !DILocation(line: 4808, column: 72, scope: !14342)
!14342 = !DILexicalBlockFile(scope: !14338, file: !616, discriminator: 1)
!14343 = !DILocation(line: 4808, column: 67, scope: !14338)
!14344 = !DILocation(line: 4808, column: 108, scope: !14345)
!14345 = !DILexicalBlockFile(scope: !14346, file: !616, discriminator: 2)
!14346 = distinct !DILexicalBlock(scope: !14338, file: !616, line: 4808, column: 91)
!14347 = !DILocation(line: 4808, column: 115, scope: !14346)
!14348 = !DILocation(line: 4808, column: 93, scope: !14346)
!14349 = !DILocation(line: 4808, column: 99, scope: !14346)
!14350 = !DILocation(line: 4808, column: 106, scope: !14346)
!14351 = !DILocation(line: 4808, column: 140, scope: !14346)
!14352 = !DILocation(line: 4808, column: 147, scope: !14346)
!14353 = !DILocation(line: 4808, column: 124, scope: !14346)
!14354 = !DILocation(line: 4808, column: 130, scope: !14346)
!14355 = !DILocation(line: 4808, column: 138, scope: !14346)
!14356 = !DILocation(line: 4808, column: 172, scope: !14346)
!14357 = !DILocation(line: 4808, column: 179, scope: !14346)
!14358 = !DILocation(line: 4808, column: 157, scope: !14346)
!14359 = !DILocation(line: 4808, column: 163, scope: !14346)
!14360 = !DILocation(line: 4808, column: 170, scope: !14346)
!14361 = !DILocation(line: 4808, column: 204, scope: !14346)
!14362 = !DILocation(line: 4808, column: 211, scope: !14346)
!14363 = !DILocation(line: 4808, column: 188, scope: !14346)
!14364 = !DILocation(line: 4808, column: 194, scope: !14346)
!14365 = !DILocation(line: 4808, column: 202, scope: !14346)
!14366 = !DILocation(line: 4808, column: 228, scope: !14346)
!14367 = !DILocation(line: 4808, column: 226, scope: !14346)
!14368 = !DILocation(line: 4809, column: 33, scope: !1602)
!14369 = !DILocation(line: 4809, column: 39, scope: !1602)
!14370 = !DILocation(line: 4809, column: 12, scope: !1602)
!14371 = !DILocation(line: 4820, column: 1, scope: !1602)
!14372 = !DILocation(line: 4809, column: 5, scope: !1602)
!14373 = !DILocation(line: 7504, column: 27, scope: !1621)
!14374 = !DILocation(line: 7504, column: 40, scope: !1621)
!14375 = !DILocation(line: 7505, column: 12, scope: !1621)
!14376 = !DILocation(line: 7505, column: 34, scope: !1621)
!14377 = !DILocation(line: 7506, column: 12, scope: !1621)
!14378 = !DILocation(line: 7508, column: 5, scope: !1621)
!14379 = !DILocation(line: 7508, column: 15, scope: !1621)
!14380 = !DILocation(line: 7508, column: 23, scope: !1621)
!14381 = !DILocation(line: 7509, column: 9, scope: !14382)
!14382 = distinct !DILexicalBlock(scope: !1621, file: !616, line: 7509, column: 9)
!14383 = !DILocation(line: 7509, column: 15, scope: !14382)
!14384 = !DILocation(line: 7509, column: 9, scope: !1621)
!14385 = !DILocation(line: 7510, column: 9, scope: !14382)
!14386 = !DILocation(line: 7522, column: 7, scope: !1632)
!14387 = !DILocation(line: 7522, column: 17, scope: !1632)
!14388 = !DILocation(line: 7522, column: 40, scope: !1632)
!14389 = !DILocation(line: 7522, column: 21, scope: !1632)
!14390 = !DILocation(line: 7522, column: 52, scope: !1636)
!14391 = !DILocation(line: 7522, column: 51, scope: !1632)
!14392 = !DILocation(line: 7522, column: 57, scope: !14393)
!14393 = !DILexicalBlockFile(scope: !1635, file: !616, discriminator: 2)
!14394 = !DILocation(line: 7522, column: 62, scope: !14395)
!14395 = !DILexicalBlockFile(scope: !1634, file: !616, discriminator: 3)
!14396 = !DILocation(line: 7522, column: 72, scope: !1634)
!14397 = !DILocation(line: 7522, column: 102, scope: !1634)
!14398 = !DILocation(line: 7522, column: 118, scope: !14399)
!14399 = distinct !DILexicalBlock(scope: !1634, file: !616, line: 7522, column: 115)
!14400 = !DILocation(line: 7522, column: 135, scope: !14399)
!14401 = !DILocation(line: 7522, column: 115, scope: !14399)
!14402 = !DILocation(line: 7522, column: 145, scope: !14399)
!14403 = !DILocation(line: 7522, column: 115, scope: !1634)
!14404 = !DILocation(line: 7522, column: 115, scope: !14405)
!14405 = !DILexicalBlockFile(scope: !1634, file: !616, discriminator: 4)
!14406 = !DILocation(line: 7522, column: 176, scope: !14407)
!14407 = !DILexicalBlockFile(scope: !14399, file: !616, discriminator: 5)
!14408 = !DILocation(line: 7522, column: 194, scope: !14399)
!14409 = !DILocation(line: 7522, column: 204, scope: !14399)
!14410 = !DILocation(line: 7522, column: 229, scope: !14399)
!14411 = !DILocation(line: 7522, column: 160, scope: !14399)
!14412 = !DILocation(line: 7522, column: 248, scope: !14413)
!14413 = !DILexicalBlockFile(scope: !1635, file: !616, discriminator: 6)
!14414 = !DILocation(line: 7522, column: 248, scope: !1634)
!14415 = !DILocation(line: 7522, column: 248, scope: !14416)
!14416 = !DILexicalBlockFile(scope: !1634, file: !616, discriminator: 7)
!14417 = !DILocation(line: 7522, column: 261, scope: !14418)
!14418 = !DILexicalBlockFile(scope: !1635, file: !616, discriminator: 8)
!14419 = !DILocation(line: 7522, column: 261, scope: !1635)
!14420 = !DILocation(line: 7522, column: 324, scope: !14421)
!14421 = !DILexicalBlockFile(scope: !1632, file: !616, discriminator: 1)
!14422 = !DILocation(line: 7522, column: 302, scope: !1632)
!14423 = !DILocation(line: 7522, column: 284, scope: !1632)
!14424 = !DILocation(line: 7522, column: 311, scope: !1632)
!14425 = !DILocation(line: 7522, column: 283, scope: !1632)
!14426 = !DILocation(line: 7522, column: 322, scope: !1632)
!14427 = !DILocation(line: 7522, column: 328, scope: !1621)
!14428 = !DILocation(line: 7522, column: 328, scope: !14429)
!14429 = !DILexicalBlockFile(scope: !14430, file: !616, discriminator: 10)
!14430 = !DILexicalBlockFile(scope: !1621, file: !616, discriminator: 9)
!14431 = !DILocation(line: 7523, column: 7, scope: !1638)
!14432 = !DILocation(line: 7523, column: 17, scope: !1638)
!14433 = !DILocation(line: 7523, column: 40, scope: !1638)
!14434 = !DILocation(line: 7523, column: 21, scope: !1638)
!14435 = !DILocation(line: 7523, column: 54, scope: !1642)
!14436 = !DILocation(line: 7523, column: 53, scope: !1638)
!14437 = !DILocation(line: 7523, column: 59, scope: !14438)
!14438 = !DILexicalBlockFile(scope: !1641, file: !616, discriminator: 2)
!14439 = !DILocation(line: 7523, column: 64, scope: !14440)
!14440 = !DILexicalBlockFile(scope: !1640, file: !616, discriminator: 3)
!14441 = !DILocation(line: 7523, column: 74, scope: !1640)
!14442 = !DILocation(line: 7523, column: 104, scope: !1640)
!14443 = !DILocation(line: 7523, column: 120, scope: !14444)
!14444 = distinct !DILexicalBlock(scope: !1640, file: !616, line: 7523, column: 117)
!14445 = !DILocation(line: 7523, column: 137, scope: !14444)
!14446 = !DILocation(line: 7523, column: 117, scope: !14444)
!14447 = !DILocation(line: 7523, column: 147, scope: !14444)
!14448 = !DILocation(line: 7523, column: 117, scope: !1640)
!14449 = !DILocation(line: 7523, column: 117, scope: !14450)
!14450 = !DILexicalBlockFile(scope: !1640, file: !616, discriminator: 4)
!14451 = !DILocation(line: 7523, column: 178, scope: !14452)
!14452 = !DILexicalBlockFile(scope: !14444, file: !616, discriminator: 5)
!14453 = !DILocation(line: 7523, column: 196, scope: !14444)
!14454 = !DILocation(line: 7523, column: 206, scope: !14444)
!14455 = !DILocation(line: 7523, column: 231, scope: !14444)
!14456 = !DILocation(line: 7523, column: 162, scope: !14444)
!14457 = !DILocation(line: 7523, column: 250, scope: !14458)
!14458 = !DILexicalBlockFile(scope: !1641, file: !616, discriminator: 6)
!14459 = !DILocation(line: 7523, column: 250, scope: !1640)
!14460 = !DILocation(line: 7523, column: 250, scope: !14461)
!14461 = !DILexicalBlockFile(scope: !1640, file: !616, discriminator: 7)
!14462 = !DILocation(line: 7523, column: 263, scope: !14463)
!14463 = !DILexicalBlockFile(scope: !1641, file: !616, discriminator: 8)
!14464 = !DILocation(line: 7523, column: 263, scope: !1641)
!14465 = !DILocation(line: 7523, column: 326, scope: !14466)
!14466 = !DILexicalBlockFile(scope: !1638, file: !616, discriminator: 1)
!14467 = !DILocation(line: 7523, column: 304, scope: !1638)
!14468 = !DILocation(line: 7523, column: 286, scope: !1638)
!14469 = !DILocation(line: 7523, column: 313, scope: !1638)
!14470 = !DILocation(line: 7523, column: 285, scope: !1638)
!14471 = !DILocation(line: 7523, column: 324, scope: !1638)
!14472 = !DILocation(line: 7523, column: 330, scope: !1621)
!14473 = !DILocation(line: 7523, column: 330, scope: !14429)
!14474 = !DILocation(line: 7524, column: 7, scope: !1644)
!14475 = !DILocation(line: 7524, column: 17, scope: !1644)
!14476 = !DILocation(line: 7524, column: 40, scope: !1644)
!14477 = !DILocation(line: 7524, column: 21, scope: !1644)
!14478 = !DILocation(line: 7524, column: 61, scope: !1648)
!14479 = !DILocation(line: 7524, column: 60, scope: !1644)
!14480 = !DILocation(line: 7524, column: 66, scope: !14481)
!14481 = !DILexicalBlockFile(scope: !1647, file: !616, discriminator: 2)
!14482 = !DILocation(line: 7524, column: 71, scope: !14483)
!14483 = !DILexicalBlockFile(scope: !1646, file: !616, discriminator: 3)
!14484 = !DILocation(line: 7524, column: 81, scope: !1646)
!14485 = !DILocation(line: 7524, column: 111, scope: !1646)
!14486 = !DILocation(line: 7524, column: 127, scope: !14487)
!14487 = distinct !DILexicalBlock(scope: !1646, file: !616, line: 7524, column: 124)
!14488 = !DILocation(line: 7524, column: 144, scope: !14487)
!14489 = !DILocation(line: 7524, column: 124, scope: !14487)
!14490 = !DILocation(line: 7524, column: 154, scope: !14487)
!14491 = !DILocation(line: 7524, column: 124, scope: !1646)
!14492 = !DILocation(line: 7524, column: 124, scope: !14493)
!14493 = !DILexicalBlockFile(scope: !1646, file: !616, discriminator: 4)
!14494 = !DILocation(line: 7524, column: 185, scope: !14495)
!14495 = !DILexicalBlockFile(scope: !14487, file: !616, discriminator: 5)
!14496 = !DILocation(line: 7524, column: 203, scope: !14487)
!14497 = !DILocation(line: 7524, column: 213, scope: !14487)
!14498 = !DILocation(line: 7524, column: 238, scope: !14487)
!14499 = !DILocation(line: 7524, column: 169, scope: !14487)
!14500 = !DILocation(line: 7524, column: 257, scope: !14501)
!14501 = !DILexicalBlockFile(scope: !1647, file: !616, discriminator: 6)
!14502 = !DILocation(line: 7524, column: 257, scope: !1646)
!14503 = !DILocation(line: 7524, column: 257, scope: !14504)
!14504 = !DILexicalBlockFile(scope: !1646, file: !616, discriminator: 7)
!14505 = !DILocation(line: 7524, column: 270, scope: !14506)
!14506 = !DILexicalBlockFile(scope: !1647, file: !616, discriminator: 8)
!14507 = !DILocation(line: 7524, column: 270, scope: !1647)
!14508 = !DILocation(line: 7524, column: 333, scope: !14509)
!14509 = !DILexicalBlockFile(scope: !1644, file: !616, discriminator: 1)
!14510 = !DILocation(line: 7524, column: 311, scope: !1644)
!14511 = !DILocation(line: 7524, column: 293, scope: !1644)
!14512 = !DILocation(line: 7524, column: 320, scope: !1644)
!14513 = !DILocation(line: 7524, column: 292, scope: !1644)
!14514 = !DILocation(line: 7524, column: 331, scope: !1644)
!14515 = !DILocation(line: 7524, column: 337, scope: !1621)
!14516 = !DILocation(line: 7524, column: 337, scope: !14429)
!14517 = !DILocation(line: 7525, column: 7, scope: !1650)
!14518 = !DILocation(line: 7525, column: 17, scope: !1650)
!14519 = !DILocation(line: 7525, column: 40, scope: !1650)
!14520 = !DILocation(line: 7525, column: 21, scope: !1650)
!14521 = !DILocation(line: 7525, column: 63, scope: !1654)
!14522 = !DILocation(line: 7525, column: 62, scope: !1650)
!14523 = !DILocation(line: 7525, column: 68, scope: !14524)
!14524 = !DILexicalBlockFile(scope: !1653, file: !616, discriminator: 2)
!14525 = !DILocation(line: 7525, column: 73, scope: !14526)
!14526 = !DILexicalBlockFile(scope: !1652, file: !616, discriminator: 3)
!14527 = !DILocation(line: 7525, column: 83, scope: !1652)
!14528 = !DILocation(line: 7525, column: 113, scope: !1652)
!14529 = !DILocation(line: 7525, column: 129, scope: !14530)
!14530 = distinct !DILexicalBlock(scope: !1652, file: !616, line: 7525, column: 126)
!14531 = !DILocation(line: 7525, column: 146, scope: !14530)
!14532 = !DILocation(line: 7525, column: 126, scope: !14530)
!14533 = !DILocation(line: 7525, column: 156, scope: !14530)
!14534 = !DILocation(line: 7525, column: 126, scope: !1652)
!14535 = !DILocation(line: 7525, column: 126, scope: !14536)
!14536 = !DILexicalBlockFile(scope: !1652, file: !616, discriminator: 4)
!14537 = !DILocation(line: 7525, column: 187, scope: !14538)
!14538 = !DILexicalBlockFile(scope: !14530, file: !616, discriminator: 5)
!14539 = !DILocation(line: 7525, column: 205, scope: !14530)
!14540 = !DILocation(line: 7525, column: 215, scope: !14530)
!14541 = !DILocation(line: 7525, column: 240, scope: !14530)
!14542 = !DILocation(line: 7525, column: 171, scope: !14530)
!14543 = !DILocation(line: 7525, column: 259, scope: !14544)
!14544 = !DILexicalBlockFile(scope: !1653, file: !616, discriminator: 6)
!14545 = !DILocation(line: 7525, column: 259, scope: !1652)
!14546 = !DILocation(line: 7525, column: 259, scope: !14547)
!14547 = !DILexicalBlockFile(scope: !1652, file: !616, discriminator: 7)
!14548 = !DILocation(line: 7525, column: 272, scope: !14549)
!14549 = !DILexicalBlockFile(scope: !1653, file: !616, discriminator: 8)
!14550 = !DILocation(line: 7525, column: 272, scope: !1653)
!14551 = !DILocation(line: 7525, column: 335, scope: !14552)
!14552 = !DILexicalBlockFile(scope: !1650, file: !616, discriminator: 1)
!14553 = !DILocation(line: 7525, column: 313, scope: !1650)
!14554 = !DILocation(line: 7525, column: 295, scope: !1650)
!14555 = !DILocation(line: 7525, column: 322, scope: !1650)
!14556 = !DILocation(line: 7525, column: 294, scope: !1650)
!14557 = !DILocation(line: 7525, column: 333, scope: !1650)
!14558 = !DILocation(line: 7525, column: 339, scope: !1621)
!14559 = !DILocation(line: 7525, column: 339, scope: !14429)
!14560 = !DILocation(line: 7526, column: 7, scope: !1656)
!14561 = !DILocation(line: 7526, column: 17, scope: !1656)
!14562 = !DILocation(line: 7526, column: 40, scope: !1656)
!14563 = !DILocation(line: 7526, column: 21, scope: !1656)
!14564 = !DILocation(line: 7526, column: 55, scope: !1660)
!14565 = !DILocation(line: 7526, column: 54, scope: !1656)
!14566 = !DILocation(line: 7526, column: 60, scope: !14567)
!14567 = !DILexicalBlockFile(scope: !1659, file: !616, discriminator: 2)
!14568 = !DILocation(line: 7526, column: 65, scope: !14569)
!14569 = !DILexicalBlockFile(scope: !1658, file: !616, discriminator: 3)
!14570 = !DILocation(line: 7526, column: 75, scope: !1658)
!14571 = !DILocation(line: 7526, column: 105, scope: !1658)
!14572 = !DILocation(line: 7526, column: 121, scope: !14573)
!14573 = distinct !DILexicalBlock(scope: !1658, file: !616, line: 7526, column: 118)
!14574 = !DILocation(line: 7526, column: 138, scope: !14573)
!14575 = !DILocation(line: 7526, column: 118, scope: !14573)
!14576 = !DILocation(line: 7526, column: 148, scope: !14573)
!14577 = !DILocation(line: 7526, column: 118, scope: !1658)
!14578 = !DILocation(line: 7526, column: 118, scope: !14579)
!14579 = !DILexicalBlockFile(scope: !1658, file: !616, discriminator: 4)
!14580 = !DILocation(line: 7526, column: 179, scope: !14581)
!14581 = !DILexicalBlockFile(scope: !14573, file: !616, discriminator: 5)
!14582 = !DILocation(line: 7526, column: 197, scope: !14573)
!14583 = !DILocation(line: 7526, column: 207, scope: !14573)
!14584 = !DILocation(line: 7526, column: 232, scope: !14573)
!14585 = !DILocation(line: 7526, column: 163, scope: !14573)
!14586 = !DILocation(line: 7526, column: 251, scope: !14587)
!14587 = !DILexicalBlockFile(scope: !1659, file: !616, discriminator: 6)
!14588 = !DILocation(line: 7526, column: 251, scope: !1658)
!14589 = !DILocation(line: 7526, column: 251, scope: !14590)
!14590 = !DILexicalBlockFile(scope: !1658, file: !616, discriminator: 7)
!14591 = !DILocation(line: 7526, column: 264, scope: !14592)
!14592 = !DILexicalBlockFile(scope: !1659, file: !616, discriminator: 8)
!14593 = !DILocation(line: 7526, column: 264, scope: !1659)
!14594 = !DILocation(line: 7526, column: 327, scope: !14595)
!14595 = !DILexicalBlockFile(scope: !1656, file: !616, discriminator: 1)
!14596 = !DILocation(line: 7526, column: 305, scope: !1656)
!14597 = !DILocation(line: 7526, column: 287, scope: !1656)
!14598 = !DILocation(line: 7526, column: 314, scope: !1656)
!14599 = !DILocation(line: 7526, column: 286, scope: !1656)
!14600 = !DILocation(line: 7526, column: 325, scope: !1656)
!14601 = !DILocation(line: 7526, column: 331, scope: !1621)
!14602 = !DILocation(line: 7526, column: 331, scope: !14429)
!14603 = !DILocation(line: 7530, column: 12, scope: !1621)
!14604 = !DILocation(line: 7530, column: 5, scope: !1621)
!14605 = !DILocation(line: 7531, column: 1, scope: !1621)
!14606 = !DILocation(line: 5152, column: 25, scope: !1689)
!14607 = !DILocation(line: 5152, column: 43, scope: !1689)
!14608 = !DILocation(line: 5154, column: 5, scope: !1689)
!14609 = !DILocation(line: 5154, column: 9, scope: !1689)
!14610 = !DILocation(line: 5155, column: 5, scope: !1689)
!14611 = !DILocation(line: 5155, column: 12, scope: !1689)
!14612 = !DILocation(line: 5155, column: 36, scope: !1689)
!14613 = !DILocation(line: 5155, column: 35, scope: !1689)
!14614 = !DILocation(line: 5155, column: 40, scope: !1689)
!14615 = !DILocation(line: 5155, column: 44, scope: !1689)
!14616 = !DILocation(line: 5155, column: 25, scope: !1689)
!14617 = !DILocation(line: 5155, column: 25, scope: !14618)
!14618 = !DILexicalBlockFile(scope: !1689, file: !616, discriminator: 1)
!14619 = !DILocation(line: 5155, column: 139, scope: !14620)
!14620 = !DILexicalBlockFile(scope: !1689, file: !616, discriminator: 2)
!14621 = !DILocation(line: 5155, column: 138, scope: !1689)
!14622 = !DILocation(line: 5155, column: 143, scope: !1689)
!14623 = !DILocation(line: 5155, column: 147, scope: !1689)
!14624 = !DILocation(line: 5155, column: 124, scope: !1689)
!14625 = !DILocation(line: 5155, column: 113, scope: !1689)
!14626 = !DILocation(line: 5155, column: 12, scope: !14627)
!14627 = !DILexicalBlockFile(scope: !14628, file: !616, discriminator: 4)
!14628 = !DILexicalBlockFile(scope: !1689, file: !616, discriminator: 3)
!14629 = !DILocation(line: 5156, column: 9, scope: !14630)
!14630 = distinct !DILexicalBlock(scope: !1689, file: !616, line: 5156, column: 9)
!14631 = !DILocation(line: 5156, column: 18, scope: !14630)
!14632 = !DILocation(line: 5156, column: 9, scope: !1689)
!14633 = !DILocation(line: 5157, column: 9, scope: !14634)
!14634 = distinct !DILexicalBlock(scope: !14630, file: !616, line: 5156, column: 33)
!14635 = !DILocation(line: 5158, column: 9, scope: !14634)
!14636 = !DILocation(line: 5160, column: 12, scope: !1700)
!14637 = !DILocation(line: 5160, column: 10, scope: !1700)
!14638 = !DILocation(line: 5160, column: 17, scope: !14639)
!14639 = !DILexicalBlockFile(scope: !14640, file: !616, discriminator: 2)
!14640 = !DILexicalBlockFile(scope: !1699, file: !616, discriminator: 1)
!14641 = !DILocation(line: 5160, column: 22, scope: !1699)
!14642 = !DILocation(line: 5160, column: 21, scope: !1699)
!14643 = !DILocation(line: 5160, column: 19, scope: !1699)
!14644 = !DILocation(line: 5160, column: 5, scope: !1700)
!14645 = !DILocation(line: 5161, column: 9, scope: !1698)
!14646 = !DILocation(line: 5161, column: 19, scope: !1698)
!14647 = !DILocation(line: 5161, column: 42, scope: !1698)
!14648 = !DILocation(line: 5161, column: 50, scope: !1698)
!14649 = !DILocation(line: 5161, column: 60, scope: !1698)
!14650 = !{!3897, !3868, i64 104}
!14651 = !DILocation(line: 5161, column: 76, scope: !1698)
!14652 = !{!14653, !3868, i64 24}
!14653 = !{!"", !3868, i64 0, !3868, i64 8, !3868, i64 16, !3868, i64 24, !3868, i64 32, !3868, i64 40, !3868, i64 48, !3868, i64 56, !3868, i64 64, !3868, i64 72}
!14654 = !DILocation(line: 5161, column: 84, scope: !1698)
!14655 = !DILocation(line: 5161, column: 90, scope: !1698)
!14656 = !DILocation(line: 5161, column: 28, scope: !1698)
!14657 = !DILocation(line: 5162, column: 13, scope: !14658)
!14658 = distinct !DILexicalBlock(scope: !1698, file: !616, line: 5162, column: 13)
!14659 = !DILocation(line: 5162, column: 18, scope: !14658)
!14660 = !DILocation(line: 5162, column: 13, scope: !1698)
!14661 = !DILocation(line: 5163, column: 13, scope: !14658)
!14662 = !DILocation(line: 5164, column: 31, scope: !1704)
!14663 = !DILocation(line: 5164, column: 47, scope: !1704)
!14664 = !DILocation(line: 5164, column: 38, scope: !1704)
!14665 = !DILocation(line: 5164, column: 14, scope: !1704)
!14666 = !DILocation(line: 5164, column: 13, scope: !1698)
!14667 = !DILocation(line: 5165, column: 13, scope: !1703)
!14668 = !DILocation(line: 5165, column: 18, scope: !14669)
!14669 = !DILexicalBlockFile(scope: !1702, file: !616, discriminator: 1)
!14670 = !DILocation(line: 5165, column: 28, scope: !1702)
!14671 = !DILocation(line: 5165, column: 58, scope: !1702)
!14672 = !DILocation(line: 5165, column: 73, scope: !14673)
!14673 = distinct !DILexicalBlock(scope: !1702, file: !616, line: 5165, column: 70)
!14674 = !DILocation(line: 5165, column: 90, scope: !14673)
!14675 = !DILocation(line: 5165, column: 70, scope: !14673)
!14676 = !DILocation(line: 5165, column: 100, scope: !14673)
!14677 = !DILocation(line: 5165, column: 70, scope: !1702)
!14678 = !DILocation(line: 5165, column: 70, scope: !14679)
!14679 = !DILexicalBlockFile(scope: !1702, file: !616, discriminator: 2)
!14680 = !DILocation(line: 5165, column: 131, scope: !14681)
!14681 = !DILexicalBlockFile(scope: !14673, file: !616, discriminator: 3)
!14682 = !DILocation(line: 5165, column: 149, scope: !14673)
!14683 = !DILocation(line: 5165, column: 159, scope: !14673)
!14684 = !DILocation(line: 5165, column: 184, scope: !14673)
!14685 = !DILocation(line: 5165, column: 115, scope: !14673)
!14686 = !DILocation(line: 5165, column: 203, scope: !14687)
!14687 = !DILexicalBlockFile(scope: !1703, file: !616, discriminator: 4)
!14688 = !DILocation(line: 5165, column: 203, scope: !1702)
!14689 = !DILocation(line: 5165, column: 203, scope: !14690)
!14690 = !DILexicalBlockFile(scope: !1702, file: !616, discriminator: 5)
!14691 = !DILocation(line: 5166, column: 13, scope: !1703)
!14692 = !DILocation(line: 5168, column: 9, scope: !1698)
!14693 = !DILocation(line: 5168, column: 14, scope: !14694)
!14694 = !DILexicalBlockFile(scope: !1706, file: !616, discriminator: 1)
!14695 = !DILocation(line: 5168, column: 24, scope: !1706)
!14696 = !DILocation(line: 5168, column: 54, scope: !1706)
!14697 = !DILocation(line: 5168, column: 69, scope: !14698)
!14698 = distinct !DILexicalBlock(scope: !1706, file: !616, line: 5168, column: 66)
!14699 = !DILocation(line: 5168, column: 86, scope: !14698)
!14700 = !DILocation(line: 5168, column: 66, scope: !14698)
!14701 = !DILocation(line: 5168, column: 96, scope: !14698)
!14702 = !DILocation(line: 5168, column: 66, scope: !1706)
!14703 = !DILocation(line: 5168, column: 66, scope: !14704)
!14704 = !DILexicalBlockFile(scope: !1706, file: !616, discriminator: 2)
!14705 = !DILocation(line: 5168, column: 127, scope: !14706)
!14706 = !DILexicalBlockFile(scope: !14698, file: !616, discriminator: 3)
!14707 = !DILocation(line: 5168, column: 145, scope: !14698)
!14708 = !DILocation(line: 5168, column: 155, scope: !14698)
!14709 = !DILocation(line: 5168, column: 180, scope: !14698)
!14710 = !DILocation(line: 5168, column: 111, scope: !14698)
!14711 = !DILocation(line: 5168, column: 199, scope: !14712)
!14712 = !DILexicalBlockFile(scope: !1698, file: !616, discriminator: 4)
!14713 = !DILocation(line: 5168, column: 199, scope: !1706)
!14714 = !DILocation(line: 5168, column: 199, scope: !14715)
!14715 = !DILexicalBlockFile(scope: !1706, file: !616, discriminator: 5)
!14716 = !DILocation(line: 5169, column: 5, scope: !1699)
!14717 = !DILocation(line: 5169, column: 5, scope: !14640)
!14718 = !DILocation(line: 5169, column: 5, scope: !1698)
!14719 = !DILocation(line: 5160, column: 29, scope: !1699)
!14720 = !DILocation(line: 5160, column: 5, scope: !1699)
!14721 = !DILocation(line: 5170, column: 15, scope: !1689)
!14722 = !DILocation(line: 5170, column: 14, scope: !1689)
!14723 = !DILocation(line: 5170, column: 5, scope: !1689)
!14724 = !DILocation(line: 5170, column: 21, scope: !1689)
!14725 = !DILocation(line: 5171, column: 12, scope: !1689)
!14726 = !DILocation(line: 5171, column: 5, scope: !1689)
!14727 = !DILocation(line: 5173, column: 13, scope: !1689)
!14728 = !DILocation(line: 5173, column: 6, scope: !1689)
!14729 = !DILocation(line: 5173, column: 11, scope: !1689)
!14730 = !DILocation(line: 5174, column: 23, scope: !1689)
!14731 = !DILocation(line: 5174, column: 34, scope: !1689)
!14732 = !DILocation(line: 5174, column: 33, scope: !1689)
!14733 = !DILocation(line: 5174, column: 5, scope: !1689)
!14734 = !DILocation(line: 5175, column: 5, scope: !1689)
!14735 = !DILocation(line: 5176, column: 1, scope: !1689)
!14736 = !DILocation(line: 5047, column: 26, scope: !1717)
!14737 = !DILocation(line: 5047, column: 44, scope: !1717)
!14738 = !DILocation(line: 5049, column: 5, scope: !1717)
!14739 = !DILocation(line: 5049, column: 16, scope: !1717)
!14740 = !DILocation(line: 5050, column: 12, scope: !14741)
!14741 = distinct !DILexicalBlock(scope: !1717, file: !616, line: 5050, column: 5)
!14742 = !DILocation(line: 5050, column: 10, scope: !14741)
!14743 = !DILocation(line: 5050, column: 17, scope: !14744)
!14744 = !DILexicalBlockFile(scope: !14745, file: !616, discriminator: 2)
!14745 = !DILexicalBlockFile(scope: !14746, file: !616, discriminator: 1)
!14746 = distinct !DILexicalBlock(scope: !14741, file: !616, line: 5050, column: 5)
!14747 = !DILocation(line: 5050, column: 21, scope: !14746)
!14748 = !DILocation(line: 5050, column: 19, scope: !14746)
!14749 = !DILocation(line: 5050, column: 5, scope: !14741)
!14750 = !DILocation(line: 5051, column: 26, scope: !14746)
!14751 = !DILocation(line: 5051, column: 20, scope: !14746)
!14752 = !DILocation(line: 5051, column: 9, scope: !14746)
!14753 = !DILocation(line: 5050, column: 29, scope: !14746)
!14754 = !DILocation(line: 5050, column: 5, scope: !14746)
!14755 = !DILocation(line: 5052, column: 16, scope: !1717)
!14756 = !DILocation(line: 5052, column: 5, scope: !1717)
!14757 = !DILocation(line: 5053, column: 1, scope: !1717)
!14758 = !DILocation(line: 5056, column: 32, scope: !1707)
!14759 = !DILocation(line: 5056, column: 41, scope: !1707)
!14760 = !DILocation(line: 5058, column: 5, scope: !1707)
!14761 = !DILocation(line: 5058, column: 15, scope: !1707)
!14762 = !DILocation(line: 5059, column: 5, scope: !1707)
!14763 = !DILocation(line: 5059, column: 16, scope: !1707)
!14764 = !DILocation(line: 5060, column: 32, scope: !14765)
!14765 = distinct !DILexicalBlock(scope: !1707, file: !616, line: 5060, column: 9)
!14766 = !DILocation(line: 5060, column: 35, scope: !14765)
!14767 = !DILocation(line: 5060, column: 10, scope: !14765)
!14768 = !DILocation(line: 5060, column: 9, scope: !1707)
!14769 = !DILocation(line: 5061, column: 9, scope: !14765)
!14770 = !DILocation(line: 5062, column: 43, scope: !1707)
!14771 = !DILocation(line: 5062, column: 28, scope: !1707)
!14772 = !DILocation(line: 5062, column: 52, scope: !1707)
!14773 = !DILocation(line: 5062, column: 10, scope: !1707)
!14774 = !DILocation(line: 5063, column: 25, scope: !1707)
!14775 = !DILocation(line: 5063, column: 29, scope: !1707)
!14776 = !DILocation(line: 5063, column: 12, scope: !1707)
!14777 = !DILocation(line: 5063, column: 6, scope: !1707)
!14778 = !DILocation(line: 5063, column: 10, scope: !1707)
!14779 = !DILocation(line: 5064, column: 11, scope: !14780)
!14780 = distinct !DILexicalBlock(scope: !1707, file: !616, line: 5064, column: 9)
!14781 = !DILocation(line: 5064, column: 10, scope: !14780)
!14782 = !DILocation(line: 5064, column: 9, scope: !1707)
!14783 = !DILocation(line: 5065, column: 9, scope: !14784)
!14784 = distinct !DILexicalBlock(scope: !14780, file: !616, line: 5064, column: 16)
!14785 = !DILocation(line: 5066, column: 9, scope: !14784)
!14786 = !DILocation(line: 5068, column: 13, scope: !1707)
!14787 = !DILocation(line: 5068, column: 12, scope: !1707)
!14788 = !DILocation(line: 5068, column: 35, scope: !1707)
!14789 = !DILocation(line: 5068, column: 18, scope: !1707)
!14790 = !DILocation(line: 5068, column: 43, scope: !1707)
!14791 = !DILocation(line: 5068, column: 47, scope: !1707)
!14792 = !DILocation(line: 5068, column: 5, scope: !1707)
!14793 = !DILocation(line: 5069, column: 5, scope: !1707)
!14794 = !DILocation(line: 5069, column: 10, scope: !14795)
!14795 = !DILexicalBlockFile(scope: !1716, file: !616, discriminator: 1)
!14796 = !DILocation(line: 5069, column: 20, scope: !1716)
!14797 = !DILocation(line: 5069, column: 50, scope: !1716)
!14798 = !DILocation(line: 5069, column: 66, scope: !14799)
!14799 = distinct !DILexicalBlock(scope: !1716, file: !616, line: 5069, column: 63)
!14800 = !DILocation(line: 5069, column: 83, scope: !14799)
!14801 = !DILocation(line: 5069, column: 63, scope: !14799)
!14802 = !DILocation(line: 5069, column: 93, scope: !14799)
!14803 = !DILocation(line: 5069, column: 63, scope: !1716)
!14804 = !DILocation(line: 5069, column: 63, scope: !14805)
!14805 = !DILexicalBlockFile(scope: !1716, file: !616, discriminator: 2)
!14806 = !DILocation(line: 5069, column: 124, scope: !14807)
!14807 = !DILexicalBlockFile(scope: !14799, file: !616, discriminator: 3)
!14808 = !DILocation(line: 5069, column: 142, scope: !14799)
!14809 = !DILocation(line: 5069, column: 152, scope: !14799)
!14810 = !DILocation(line: 5069, column: 177, scope: !14799)
!14811 = !DILocation(line: 5069, column: 108, scope: !14799)
!14812 = !DILocation(line: 5069, column: 196, scope: !14813)
!14813 = !DILexicalBlockFile(scope: !1707, file: !616, discriminator: 4)
!14814 = !DILocation(line: 5069, column: 196, scope: !1716)
!14815 = !DILocation(line: 5069, column: 196, scope: !14816)
!14816 = !DILexicalBlockFile(scope: !1716, file: !616, discriminator: 5)
!14817 = !DILocation(line: 5070, column: 5, scope: !1707)
!14818 = !DILocation(line: 5071, column: 1, scope: !1707)
!14819 = !DILocation(line: 5076, column: 25, scope: !1736)
!14820 = !DILocation(line: 5076, column: 42, scope: !1736)
!14821 = !DILocation(line: 5078, column: 5, scope: !1736)
!14822 = !DILocation(line: 5078, column: 12, scope: !1736)
!14823 = !DILocation(line: 5079, column: 5, scope: !1736)
!14824 = !DILocation(line: 5079, column: 16, scope: !1736)
!14825 = !DILocation(line: 5079, column: 19, scope: !1736)
!14826 = !DILocation(line: 5079, column: 24, scope: !1736)
!14827 = !DILocation(line: 5080, column: 5, scope: !1736)
!14828 = !DILocation(line: 5080, column: 15, scope: !1736)
!14829 = !DILocation(line: 5080, column: 33, scope: !1736)
!14830 = !DILocation(line: 5081, column: 5, scope: !1736)
!14831 = !DILocation(line: 5081, column: 15, scope: !1736)
!14832 = !DILocation(line: 5081, column: 21, scope: !1736)
!14833 = !DILocation(line: 5081, column: 27, scope: !1736)
!14834 = !DILocation(line: 5081, column: 34, scope: !1736)
!14835 = !DILocation(line: 5082, column: 5, scope: !1736)
!14836 = !DILocation(line: 5082, column: 11, scope: !1736)
!14837 = !DILocation(line: 5082, column: 15, scope: !1736)
!14838 = !DILocation(line: 5082, column: 19, scope: !1736)
!14839 = !DILocation(line: 5083, column: 5, scope: !1736)
!14840 = !DILocation(line: 5083, column: 12, scope: !1736)
!14841 = !DILocation(line: 5085, column: 24, scope: !1736)
!14842 = !DILocation(line: 5085, column: 9, scope: !1736)
!14843 = !DILocation(line: 5085, column: 7, scope: !1736)
!14844 = !DILocation(line: 5086, column: 9, scope: !14845)
!14845 = distinct !DILexicalBlock(scope: !1736, file: !616, line: 5086, column: 9)
!14846 = !DILocation(line: 5086, column: 11, scope: !14845)
!14847 = !DILocation(line: 5086, column: 9, scope: !1736)
!14848 = !DILocation(line: 5087, column: 9, scope: !14845)
!14849 = !DILocation(line: 5088, column: 27, scope: !1736)
!14850 = !DILocation(line: 5088, column: 29, scope: !1736)
!14851 = !DILocation(line: 5088, column: 34, scope: !1736)
!14852 = !DILocation(line: 5088, column: 17, scope: !1736)
!14853 = !DILocation(line: 5088, column: 17, scope: !14854)
!14854 = !DILexicalBlockFile(scope: !1736, file: !616, discriminator: 1)
!14855 = !DILocation(line: 5088, column: 128, scope: !14856)
!14856 = !DILexicalBlockFile(scope: !1736, file: !616, discriminator: 2)
!14857 = !DILocation(line: 5088, column: 130, scope: !1736)
!14858 = !DILocation(line: 5088, column: 135, scope: !1736)
!14859 = !DILocation(line: 5088, column: 114, scope: !1736)
!14860 = !DILocation(line: 5088, column: 103, scope: !1736)
!14861 = !DILocation(line: 5088, column: 13, scope: !14862)
!14862 = !DILexicalBlockFile(scope: !14863, file: !616, discriminator: 4)
!14863 = !DILexicalBlockFile(scope: !1736, file: !616, discriminator: 3)
!14864 = !DILocation(line: 5089, column: 9, scope: !14865)
!14865 = distinct !DILexicalBlock(scope: !1736, file: !616, line: 5089, column: 9)
!14866 = !DILocation(line: 5089, column: 17, scope: !14865)
!14867 = !DILocation(line: 5089, column: 9, scope: !1736)
!14868 = !DILocation(line: 5090, column: 9, scope: !14869)
!14869 = distinct !DILexicalBlock(scope: !14865, file: !616, line: 5089, column: 32)
!14870 = !DILocation(line: 5091, column: 9, scope: !14869)
!14871 = !DILocation(line: 5093, column: 10, scope: !1736)
!14872 = !DILocation(line: 5094, column: 27, scope: !1736)
!14873 = !DILocation(line: 5094, column: 12, scope: !1736)
!14874 = !DILocation(line: 5094, column: 10, scope: !1736)
!14875 = !DILocation(line: 5095, column: 10, scope: !14876)
!14876 = distinct !DILexicalBlock(scope: !1736, file: !616, line: 5095, column: 9)
!14877 = !DILocation(line: 5095, column: 9, scope: !1736)
!14878 = !DILocation(line: 5096, column: 9, scope: !14876)
!14879 = !DILocation(line: 5097, column: 29, scope: !1736)
!14880 = !DILocation(line: 5097, column: 12, scope: !1736)
!14881 = !DILocation(line: 5097, column: 10, scope: !1736)
!14882 = !DILocation(line: 5098, column: 10, scope: !14883)
!14883 = distinct !DILexicalBlock(scope: !1736, file: !616, line: 5098, column: 9)
!14884 = !DILocation(line: 5098, column: 9, scope: !1736)
!14885 = !DILocation(line: 5099, column: 9, scope: !14883)
!14886 = !DILocation(line: 5100, column: 27, scope: !14887)
!14887 = distinct !DILexicalBlock(scope: !1736, file: !616, line: 5100, column: 9)
!14888 = !DILocation(line: 5100, column: 35, scope: !14887)
!14889 = !DILocation(line: 5100, column: 46, scope: !14887)
!14890 = !DILocation(line: 5100, column: 55, scope: !14887)
!14891 = !DILocation(line: 5100, column: 72, scope: !14887)
!14892 = !DILocation(line: 5100, column: 78, scope: !14887)
!14893 = !DILocation(line: 5100, column: 99, scope: !14894)
!14894 = !DILexicalBlockFile(scope: !14887, file: !616, discriminator: 1)
!14895 = !DILocation(line: 5100, column: 107, scope: !14887)
!14896 = !DILocation(line: 5100, column: 118, scope: !14887)
!14897 = !DILocation(line: 5100, column: 127, scope: !14887)
!14898 = !DILocation(line: 5100, column: 144, scope: !14887)
!14899 = !DILocation(line: 5100, column: 9, scope: !1736)
!14900 = !DILocation(line: 5101, column: 22, scope: !14901)
!14901 = distinct !DILexicalBlock(scope: !14887, file: !616, line: 5100, column: 151)
!14902 = !DILocation(line: 5101, column: 9, scope: !14901)
!14903 = !DILocation(line: 5103, column: 9, scope: !14901)
!14904 = !DILocation(line: 5106, column: 14, scope: !1760)
!14905 = !DILocation(line: 5106, column: 10, scope: !1760)
!14906 = !DILocation(line: 5106, column: 19, scope: !14907)
!14907 = !DILexicalBlockFile(scope: !14908, file: !616, discriminator: 2)
!14908 = !DILexicalBlockFile(scope: !1759, file: !616, discriminator: 1)
!14909 = !DILocation(line: 5106, column: 25, scope: !1759)
!14910 = !DILocation(line: 5106, column: 23, scope: !1759)
!14911 = !DILocation(line: 5106, column: 5, scope: !1760)
!14912 = !DILocation(line: 5107, column: 30, scope: !1758)
!14913 = !DILocation(line: 5107, column: 36, scope: !1758)
!14914 = !DILocation(line: 5107, column: 15, scope: !1758)
!14915 = !DILocation(line: 5107, column: 13, scope: !1758)
!14916 = !DILocation(line: 5108, column: 30, scope: !1758)
!14917 = !DILocation(line: 5108, column: 36, scope: !1758)
!14918 = !DILocation(line: 5108, column: 15, scope: !1758)
!14919 = !DILocation(line: 5108, column: 13, scope: !1758)
!14920 = !DILocation(line: 5109, column: 14, scope: !14921)
!14921 = distinct !DILexicalBlock(scope: !1758, file: !616, line: 5109, column: 13)
!14922 = !DILocation(line: 5109, column: 18, scope: !14921)
!14923 = !DILocation(line: 5109, column: 22, scope: !14924)
!14924 = !DILexicalBlockFile(scope: !14921, file: !616, discriminator: 1)
!14925 = !DILocation(line: 5109, column: 13, scope: !1758)
!14926 = !DILocation(line: 5110, column: 13, scope: !14921)
!14927 = !DILocation(line: 5112, column: 35, scope: !14928)
!14928 = distinct !DILexicalBlock(scope: !1758, file: !616, line: 5112, column: 13)
!14929 = !DILocation(line: 5112, column: 40, scope: !14928)
!14930 = !DILocation(line: 5112, column: 13, scope: !14928)
!14931 = !DILocation(line: 5112, column: 47, scope: !14928)
!14932 = !DILocation(line: 5112, column: 13, scope: !1758)
!14933 = !DILocation(line: 5113, column: 13, scope: !14928)
!14934 = !DILocation(line: 5114, column: 35, scope: !1757)
!14935 = !DILocation(line: 5114, column: 40, scope: !1757)
!14936 = !DILocation(line: 5114, column: 13, scope: !1757)
!14937 = !DILocation(line: 5114, column: 47, scope: !1757)
!14938 = !DILocation(line: 5114, column: 13, scope: !1758)
!14939 = !DILocation(line: 5115, column: 13, scope: !1756)
!14940 = !DILocation(line: 5115, column: 18, scope: !14941)
!14941 = !DILexicalBlockFile(scope: !1755, file: !616, discriminator: 1)
!14942 = !DILocation(line: 5115, column: 28, scope: !1755)
!14943 = !DILocation(line: 5115, column: 58, scope: !1755)
!14944 = !DILocation(line: 5115, column: 73, scope: !14945)
!14945 = distinct !DILexicalBlock(scope: !1755, file: !616, line: 5115, column: 70)
!14946 = !DILocation(line: 5115, column: 90, scope: !14945)
!14947 = !DILocation(line: 5115, column: 70, scope: !14945)
!14948 = !DILocation(line: 5115, column: 100, scope: !14945)
!14949 = !DILocation(line: 5115, column: 70, scope: !1755)
!14950 = !DILocation(line: 5115, column: 70, scope: !14951)
!14951 = !DILexicalBlockFile(scope: !1755, file: !616, discriminator: 2)
!14952 = !DILocation(line: 5115, column: 131, scope: !14953)
!14953 = !DILexicalBlockFile(scope: !14945, file: !616, discriminator: 3)
!14954 = !DILocation(line: 5115, column: 149, scope: !14945)
!14955 = !DILocation(line: 5115, column: 159, scope: !14945)
!14956 = !DILocation(line: 5115, column: 184, scope: !14945)
!14957 = !DILocation(line: 5115, column: 115, scope: !14945)
!14958 = !DILocation(line: 5115, column: 203, scope: !14959)
!14959 = !DILexicalBlockFile(scope: !1756, file: !616, discriminator: 4)
!14960 = !DILocation(line: 5115, column: 203, scope: !1755)
!14961 = !DILocation(line: 5115, column: 203, scope: !14962)
!14962 = !DILexicalBlockFile(scope: !1755, file: !616, discriminator: 5)
!14963 = !DILocation(line: 5116, column: 13, scope: !1756)
!14964 = !DILocation(line: 5119, column: 30, scope: !1758)
!14965 = !DILocation(line: 5119, column: 13, scope: !1758)
!14966 = !DILocation(line: 5119, column: 11, scope: !1758)
!14967 = !DILocation(line: 5120, column: 30, scope: !1758)
!14968 = !DILocation(line: 5120, column: 13, scope: !1758)
!14969 = !DILocation(line: 5120, column: 11, scope: !1758)
!14970 = !DILocation(line: 5121, column: 46, scope: !1758)
!14971 = !DILocation(line: 5121, column: 31, scope: !1758)
!14972 = !DILocation(line: 5121, column: 54, scope: !1758)
!14973 = !DILocation(line: 5121, column: 97, scope: !1758)
!14974 = !DILocation(line: 5121, column: 82, scope: !1758)
!14975 = !DILocation(line: 5121, column: 105, scope: !1758)
!14976 = !DILocation(line: 5121, column: 64, scope: !1758)
!14977 = !DILocation(line: 5121, column: 115, scope: !1758)
!14978 = !DILocation(line: 5121, column: 13, scope: !1758)
!14979 = !DILocation(line: 5123, column: 25, scope: !1758)
!14980 = !DILocation(line: 5123, column: 30, scope: !1758)
!14981 = !DILocation(line: 5123, column: 15, scope: !1758)
!14982 = !DILocation(line: 5123, column: 15, scope: !14983)
!14983 = !DILexicalBlockFile(scope: !1758, file: !616, discriminator: 1)
!14984 = !DILocation(line: 5123, column: 120, scope: !14985)
!14985 = !DILexicalBlockFile(scope: !1758, file: !616, discriminator: 2)
!14986 = !DILocation(line: 5123, column: 125, scope: !1758)
!14987 = !DILocation(line: 5123, column: 106, scope: !1758)
!14988 = !DILocation(line: 5123, column: 11, scope: !14989)
!14989 = !DILexicalBlockFile(scope: !14990, file: !616, discriminator: 4)
!14990 = !DILexicalBlockFile(scope: !1758, file: !616, discriminator: 3)
!14991 = !DILocation(line: 5124, column: 13, scope: !1764)
!14992 = !DILocation(line: 5124, column: 15, scope: !1764)
!14993 = !DILocation(line: 5124, column: 13, scope: !1758)
!14994 = !DILocation(line: 5125, column: 13, scope: !1763)
!14995 = !DILocation(line: 5126, column: 13, scope: !1763)
!14996 = !DILocation(line: 5126, column: 18, scope: !14997)
!14997 = !DILexicalBlockFile(scope: !1762, file: !616, discriminator: 1)
!14998 = !DILocation(line: 5126, column: 28, scope: !1762)
!14999 = !DILocation(line: 5126, column: 58, scope: !1762)
!15000 = !DILocation(line: 5126, column: 73, scope: !15001)
!15001 = distinct !DILexicalBlock(scope: !1762, file: !616, line: 5126, column: 70)
!15002 = !DILocation(line: 5126, column: 90, scope: !15001)
!15003 = !DILocation(line: 5126, column: 70, scope: !15001)
!15004 = !DILocation(line: 5126, column: 100, scope: !15001)
!15005 = !DILocation(line: 5126, column: 70, scope: !1762)
!15006 = !DILocation(line: 5126, column: 70, scope: !15007)
!15007 = !DILexicalBlockFile(scope: !1762, file: !616, discriminator: 2)
!15008 = !DILocation(line: 5126, column: 131, scope: !15009)
!15009 = !DILexicalBlockFile(scope: !15001, file: !616, discriminator: 3)
!15010 = !DILocation(line: 5126, column: 149, scope: !15001)
!15011 = !DILocation(line: 5126, column: 159, scope: !15001)
!15012 = !DILocation(line: 5126, column: 184, scope: !15001)
!15013 = !DILocation(line: 5126, column: 115, scope: !15001)
!15014 = !DILocation(line: 5126, column: 203, scope: !15015)
!15015 = !DILexicalBlockFile(scope: !1763, file: !616, discriminator: 4)
!15016 = !DILocation(line: 5126, column: 203, scope: !1762)
!15017 = !DILocation(line: 5126, column: 203, scope: !15018)
!15018 = !DILexicalBlockFile(scope: !1762, file: !616, discriminator: 5)
!15019 = !DILocation(line: 5127, column: 13, scope: !1763)
!15020 = !DILocation(line: 5127, column: 18, scope: !15021)
!15021 = !DILexicalBlockFile(scope: !1766, file: !616, discriminator: 1)
!15022 = !DILocation(line: 5127, column: 28, scope: !1766)
!15023 = !DILocation(line: 5127, column: 58, scope: !1766)
!15024 = !DILocation(line: 5127, column: 73, scope: !15025)
!15025 = distinct !DILexicalBlock(scope: !1766, file: !616, line: 5127, column: 70)
!15026 = !DILocation(line: 5127, column: 90, scope: !15025)
!15027 = !DILocation(line: 5127, column: 70, scope: !15025)
!15028 = !DILocation(line: 5127, column: 100, scope: !15025)
!15029 = !DILocation(line: 5127, column: 70, scope: !1766)
!15030 = !DILocation(line: 5127, column: 70, scope: !15031)
!15031 = !DILexicalBlockFile(scope: !1766, file: !616, discriminator: 2)
!15032 = !DILocation(line: 5127, column: 131, scope: !15033)
!15033 = !DILexicalBlockFile(scope: !15025, file: !616, discriminator: 3)
!15034 = !DILocation(line: 5127, column: 149, scope: !15025)
!15035 = !DILocation(line: 5127, column: 159, scope: !15025)
!15036 = !DILocation(line: 5127, column: 184, scope: !15025)
!15037 = !DILocation(line: 5127, column: 115, scope: !15025)
!15038 = !DILocation(line: 5127, column: 203, scope: !15015)
!15039 = !DILocation(line: 5127, column: 203, scope: !1766)
!15040 = !DILocation(line: 5127, column: 203, scope: !15041)
!15041 = !DILexicalBlockFile(scope: !1766, file: !616, discriminator: 5)
!15042 = !DILocation(line: 5128, column: 13, scope: !1763)
!15043 = !DILocation(line: 5130, column: 23, scope: !1758)
!15044 = !DILocation(line: 5130, column: 26, scope: !1758)
!15045 = !DILocation(line: 5130, column: 40, scope: !1758)
!15046 = !DILocation(line: 5130, column: 43, scope: !1758)
!15047 = !DILocation(line: 5130, column: 9, scope: !1758)
!15048 = !DILocation(line: 5131, column: 27, scope: !1758)
!15049 = !DILocation(line: 5131, column: 21, scope: !1758)
!15050 = !DILocation(line: 5131, column: 9, scope: !1758)
!15051 = !DILocation(line: 5131, column: 25, scope: !1758)
!15052 = !DILocation(line: 5132, column: 9, scope: !1758)
!15053 = !DILocation(line: 5132, column: 14, scope: !15054)
!15054 = !DILexicalBlockFile(scope: !1768, file: !616, discriminator: 1)
!15055 = !DILocation(line: 5132, column: 24, scope: !1768)
!15056 = !DILocation(line: 5132, column: 54, scope: !1768)
!15057 = !DILocation(line: 5132, column: 69, scope: !15058)
!15058 = distinct !DILexicalBlock(scope: !1768, file: !616, line: 5132, column: 66)
!15059 = !DILocation(line: 5132, column: 86, scope: !15058)
!15060 = !DILocation(line: 5132, column: 66, scope: !15058)
!15061 = !DILocation(line: 5132, column: 96, scope: !15058)
!15062 = !DILocation(line: 5132, column: 66, scope: !1768)
!15063 = !DILocation(line: 5132, column: 66, scope: !15064)
!15064 = !DILexicalBlockFile(scope: !1768, file: !616, discriminator: 2)
!15065 = !DILocation(line: 5132, column: 127, scope: !15066)
!15066 = !DILexicalBlockFile(scope: !15058, file: !616, discriminator: 3)
!15067 = !DILocation(line: 5132, column: 145, scope: !15058)
!15068 = !DILocation(line: 5132, column: 155, scope: !15058)
!15069 = !DILocation(line: 5132, column: 180, scope: !15058)
!15070 = !DILocation(line: 5132, column: 111, scope: !15058)
!15071 = !DILocation(line: 5132, column: 199, scope: !15072)
!15072 = !DILexicalBlockFile(scope: !1758, file: !616, discriminator: 4)
!15073 = !DILocation(line: 5132, column: 199, scope: !1768)
!15074 = !DILocation(line: 5132, column: 199, scope: !15075)
!15075 = !DILexicalBlockFile(scope: !1768, file: !616, discriminator: 5)
!15076 = !DILocation(line: 5133, column: 9, scope: !1758)
!15077 = !DILocation(line: 5133, column: 14, scope: !15078)
!15078 = !DILexicalBlockFile(scope: !1770, file: !616, discriminator: 1)
!15079 = !DILocation(line: 5133, column: 24, scope: !1770)
!15080 = !DILocation(line: 5133, column: 54, scope: !1770)
!15081 = !DILocation(line: 5133, column: 69, scope: !15082)
!15082 = distinct !DILexicalBlock(scope: !1770, file: !616, line: 5133, column: 66)
!15083 = !DILocation(line: 5133, column: 86, scope: !15082)
!15084 = !DILocation(line: 5133, column: 66, scope: !15082)
!15085 = !DILocation(line: 5133, column: 96, scope: !15082)
!15086 = !DILocation(line: 5133, column: 66, scope: !1770)
!15087 = !DILocation(line: 5133, column: 66, scope: !15088)
!15088 = !DILexicalBlockFile(scope: !1770, file: !616, discriminator: 2)
!15089 = !DILocation(line: 5133, column: 127, scope: !15090)
!15090 = !DILexicalBlockFile(scope: !15082, file: !616, discriminator: 3)
!15091 = !DILocation(line: 5133, column: 145, scope: !15082)
!15092 = !DILocation(line: 5133, column: 155, scope: !15082)
!15093 = !DILocation(line: 5133, column: 180, scope: !15082)
!15094 = !DILocation(line: 5133, column: 111, scope: !15082)
!15095 = !DILocation(line: 5133, column: 199, scope: !15072)
!15096 = !DILocation(line: 5133, column: 199, scope: !1770)
!15097 = !DILocation(line: 5133, column: 199, scope: !15098)
!15098 = !DILexicalBlockFile(scope: !1770, file: !616, discriminator: 5)
!15099 = !DILocation(line: 5134, column: 5, scope: !1758)
!15100 = !DILocation(line: 5106, column: 31, scope: !1759)
!15101 = !DILocation(line: 5106, column: 5, scope: !1759)
!15102 = !DILocation(line: 5135, column: 5, scope: !1736)
!15103 = !DILocation(line: 5135, column: 10, scope: !15104)
!15104 = !DILexicalBlockFile(scope: !1772, file: !616, discriminator: 1)
!15105 = !DILocation(line: 5135, column: 20, scope: !1772)
!15106 = !DILocation(line: 5135, column: 50, scope: !1772)
!15107 = !DILocation(line: 5135, column: 65, scope: !15108)
!15108 = distinct !DILexicalBlock(scope: !1772, file: !616, line: 5135, column: 62)
!15109 = !DILocation(line: 5135, column: 82, scope: !15108)
!15110 = !DILocation(line: 5135, column: 62, scope: !15108)
!15111 = !DILocation(line: 5135, column: 92, scope: !15108)
!15112 = !DILocation(line: 5135, column: 62, scope: !1772)
!15113 = !DILocation(line: 5135, column: 62, scope: !15114)
!15114 = !DILexicalBlockFile(scope: !1772, file: !616, discriminator: 2)
!15115 = !DILocation(line: 5135, column: 123, scope: !15116)
!15116 = !DILexicalBlockFile(scope: !15108, file: !616, discriminator: 3)
!15117 = !DILocation(line: 5135, column: 141, scope: !15108)
!15118 = !DILocation(line: 5135, column: 151, scope: !15108)
!15119 = !DILocation(line: 5135, column: 176, scope: !15108)
!15120 = !DILocation(line: 5135, column: 107, scope: !15108)
!15121 = !DILocation(line: 5135, column: 195, scope: !15122)
!15122 = !DILexicalBlockFile(scope: !1736, file: !616, discriminator: 4)
!15123 = !DILocation(line: 5135, column: 195, scope: !1772)
!15124 = !DILocation(line: 5135, column: 195, scope: !15125)
!15125 = !DILexicalBlockFile(scope: !1772, file: !616, discriminator: 5)
!15126 = !DILocation(line: 5136, column: 5, scope: !1736)
!15127 = !DILocation(line: 5136, column: 10, scope: !15128)
!15128 = !DILexicalBlockFile(scope: !1774, file: !616, discriminator: 1)
!15129 = !DILocation(line: 5136, column: 20, scope: !1774)
!15130 = !DILocation(line: 5136, column: 50, scope: !1774)
!15131 = !DILocation(line: 5136, column: 65, scope: !15132)
!15132 = distinct !DILexicalBlock(scope: !1774, file: !616, line: 5136, column: 62)
!15133 = !DILocation(line: 5136, column: 82, scope: !15132)
!15134 = !DILocation(line: 5136, column: 62, scope: !15132)
!15135 = !DILocation(line: 5136, column: 92, scope: !15132)
!15136 = !DILocation(line: 5136, column: 62, scope: !1774)
!15137 = !DILocation(line: 5136, column: 62, scope: !15138)
!15138 = !DILexicalBlockFile(scope: !1774, file: !616, discriminator: 2)
!15139 = !DILocation(line: 5136, column: 123, scope: !15140)
!15140 = !DILexicalBlockFile(scope: !15132, file: !616, discriminator: 3)
!15141 = !DILocation(line: 5136, column: 141, scope: !15132)
!15142 = !DILocation(line: 5136, column: 151, scope: !15132)
!15143 = !DILocation(line: 5136, column: 176, scope: !15132)
!15144 = !DILocation(line: 5136, column: 107, scope: !15132)
!15145 = !DILocation(line: 5136, column: 195, scope: !15122)
!15146 = !DILocation(line: 5136, column: 195, scope: !1774)
!15147 = !DILocation(line: 5136, column: 195, scope: !15148)
!15148 = !DILexicalBlockFile(scope: !1774, file: !616, discriminator: 5)
!15149 = !DILocation(line: 5138, column: 13, scope: !1736)
!15150 = !DILocation(line: 5138, column: 5, scope: !1736)
!15151 = !DILocation(line: 5138, column: 19, scope: !1736)
!15152 = !DILocation(line: 5139, column: 17, scope: !1736)
!15153 = !DILocation(line: 5139, column: 6, scope: !1736)
!15154 = !DILocation(line: 5139, column: 15, scope: !1736)
!15155 = !DILocation(line: 5140, column: 12, scope: !1736)
!15156 = !DILocation(line: 5140, column: 5, scope: !1736)
!15157 = !DILocation(line: 5143, column: 5, scope: !1736)
!15158 = !DILocation(line: 5143, column: 10, scope: !15159)
!15159 = !DILexicalBlockFile(scope: !1776, file: !616, discriminator: 1)
!15160 = !DILocation(line: 5143, column: 20, scope: !1776)
!15161 = !DILocation(line: 5143, column: 51, scope: !1776)
!15162 = !DILocation(line: 5143, column: 62, scope: !1779)
!15163 = !DILocation(line: 5143, column: 78, scope: !1779)
!15164 = !DILocation(line: 5143, column: 62, scope: !1776)
!15165 = !DILocation(line: 5143, column: 93, scope: !15166)
!15166 = !DILexicalBlockFile(scope: !1779, file: !616, discriminator: 2)
!15167 = !DILocation(line: 5143, column: 98, scope: !15168)
!15168 = !DILexicalBlockFile(scope: !1778, file: !616, discriminator: 4)
!15169 = !DILocation(line: 5143, column: 108, scope: !1778)
!15170 = !DILocation(line: 5143, column: 138, scope: !1778)
!15171 = !DILocation(line: 5143, column: 164, scope: !15172)
!15172 = distinct !DILexicalBlock(scope: !1778, file: !616, line: 5143, column: 161)
!15173 = !DILocation(line: 5143, column: 181, scope: !15172)
!15174 = !DILocation(line: 5143, column: 161, scope: !15172)
!15175 = !DILocation(line: 5143, column: 191, scope: !15172)
!15176 = !DILocation(line: 5143, column: 161, scope: !1778)
!15177 = !DILocation(line: 5143, column: 161, scope: !15178)
!15178 = !DILexicalBlockFile(scope: !1778, file: !616, discriminator: 5)
!15179 = !DILocation(line: 5143, column: 222, scope: !15180)
!15180 = !DILexicalBlockFile(scope: !15172, file: !616, discriminator: 6)
!15181 = !DILocation(line: 5143, column: 240, scope: !15172)
!15182 = !DILocation(line: 5143, column: 250, scope: !15172)
!15183 = !DILocation(line: 5143, column: 275, scope: !15172)
!15184 = !DILocation(line: 5143, column: 206, scope: !15172)
!15185 = !DILocation(line: 5143, column: 294, scope: !15186)
!15186 = !DILexicalBlockFile(scope: !1779, file: !616, discriminator: 7)
!15187 = !DILocation(line: 5143, column: 294, scope: !1778)
!15188 = !DILocation(line: 5143, column: 294, scope: !15189)
!15189 = !DILexicalBlockFile(scope: !1778, file: !616, discriminator: 8)
!15190 = !DILocation(line: 5143, column: 294, scope: !15191)
!15191 = !DILexicalBlockFile(scope: !1778, file: !616, discriminator: 9)
!15192 = !DILocation(line: 5143, column: 307, scope: !15193)
!15193 = !DILexicalBlockFile(scope: !14863, file: !616, discriminator: 10)
!15194 = !DILocation(line: 5143, column: 307, scope: !1776)
!15195 = !DILocation(line: 5143, column: 307, scope: !15196)
!15196 = !DILexicalBlockFile(scope: !1776, file: !616, discriminator: 11)
!15197 = !DILocation(line: 5144, column: 5, scope: !1736)
!15198 = !DILocation(line: 5144, column: 10, scope: !15199)
!15199 = !DILexicalBlockFile(scope: !1781, file: !616, discriminator: 1)
!15200 = !DILocation(line: 5144, column: 20, scope: !1781)
!15201 = !DILocation(line: 5144, column: 51, scope: !1781)
!15202 = !DILocation(line: 5144, column: 62, scope: !1784)
!15203 = !DILocation(line: 5144, column: 78, scope: !1784)
!15204 = !DILocation(line: 5144, column: 62, scope: !1781)
!15205 = !DILocation(line: 5144, column: 93, scope: !15206)
!15206 = !DILexicalBlockFile(scope: !1784, file: !616, discriminator: 2)
!15207 = !DILocation(line: 5144, column: 98, scope: !15208)
!15208 = !DILexicalBlockFile(scope: !1783, file: !616, discriminator: 4)
!15209 = !DILocation(line: 5144, column: 108, scope: !1783)
!15210 = !DILocation(line: 5144, column: 138, scope: !1783)
!15211 = !DILocation(line: 5144, column: 164, scope: !15212)
!15212 = distinct !DILexicalBlock(scope: !1783, file: !616, line: 5144, column: 161)
!15213 = !DILocation(line: 5144, column: 181, scope: !15212)
!15214 = !DILocation(line: 5144, column: 161, scope: !15212)
!15215 = !DILocation(line: 5144, column: 191, scope: !15212)
!15216 = !DILocation(line: 5144, column: 161, scope: !1783)
!15217 = !DILocation(line: 5144, column: 161, scope: !15218)
!15218 = !DILexicalBlockFile(scope: !1783, file: !616, discriminator: 5)
!15219 = !DILocation(line: 5144, column: 222, scope: !15220)
!15220 = !DILexicalBlockFile(scope: !15212, file: !616, discriminator: 6)
!15221 = !DILocation(line: 5144, column: 240, scope: !15212)
!15222 = !DILocation(line: 5144, column: 250, scope: !15212)
!15223 = !DILocation(line: 5144, column: 275, scope: !15212)
!15224 = !DILocation(line: 5144, column: 206, scope: !15212)
!15225 = !DILocation(line: 5144, column: 294, scope: !15226)
!15226 = !DILexicalBlockFile(scope: !1784, file: !616, discriminator: 7)
!15227 = !DILocation(line: 5144, column: 294, scope: !1783)
!15228 = !DILocation(line: 5144, column: 294, scope: !15229)
!15229 = !DILexicalBlockFile(scope: !1783, file: !616, discriminator: 8)
!15230 = !DILocation(line: 5144, column: 294, scope: !15231)
!15231 = !DILexicalBlockFile(scope: !1783, file: !616, discriminator: 9)
!15232 = !DILocation(line: 5144, column: 307, scope: !15193)
!15233 = !DILocation(line: 5144, column: 307, scope: !1781)
!15234 = !DILocation(line: 5144, column: 307, scope: !15235)
!15235 = !DILexicalBlockFile(scope: !1781, file: !616, discriminator: 11)
!15236 = !DILocation(line: 5145, column: 5, scope: !1736)
!15237 = !DILocation(line: 5145, column: 12, scope: !15238)
!15238 = !DILexicalBlockFile(scope: !14854, file: !616, discriminator: 2)
!15239 = !DILocation(line: 5145, column: 19, scope: !1736)
!15240 = !DILocation(line: 5146, column: 28, scope: !1736)
!15241 = !DILocation(line: 5146, column: 20, scope: !1736)
!15242 = !DILocation(line: 5146, column: 9, scope: !1736)
!15243 = !DILocation(line: 5147, column: 16, scope: !1736)
!15244 = !DILocation(line: 5147, column: 5, scope: !1736)
!15245 = !DILocation(line: 5148, column: 5, scope: !1736)
!15246 = !DILocation(line: 5149, column: 1, scope: !1736)
!15247 = !DILocation(line: 5653, column: 31, scope: !1838)
!15248 = !DILocation(line: 5653, column: 58, scope: !1838)
!15249 = !DILocation(line: 5655, column: 5, scope: !1838)
!15250 = !DILocation(line: 5655, column: 10, scope: !1838)
!15251 = !DILocation(line: 5657, column: 23, scope: !15252)
!15252 = distinct !DILexicalBlock(scope: !1838, file: !616, line: 5657, column: 9)
!15253 = !DILocation(line: 5657, column: 32, scope: !15252)
!15254 = !DILocation(line: 5657, column: 41, scope: !15252)
!15255 = !DILocation(line: 5657, column: 9, scope: !1838)
!15256 = !DILocation(line: 5658, column: 25, scope: !15257)
!15257 = distinct !DILexicalBlock(scope: !15252, file: !616, line: 5657, column: 61)
!15258 = !DILocation(line: 5658, column: 9, scope: !15257)
!15259 = !DILocation(line: 5659, column: 9, scope: !15257)
!15260 = !DILocation(line: 5661, column: 50, scope: !1838)
!15261 = !DILocation(line: 5661, column: 32, scope: !1838)
!15262 = !DILocation(line: 5661, column: 59, scope: !1838)
!15263 = !DILocation(line: 5661, column: 31, scope: !1838)
!15264 = !DILocation(line: 5661, column: 16, scope: !1838)
!15265 = !DILocation(line: 5661, column: 14, scope: !1838)
!15266 = !DILocation(line: 5662, column: 9, scope: !15267)
!15267 = distinct !DILexicalBlock(scope: !1838, file: !616, line: 5662, column: 9)
!15268 = !DILocation(line: 5662, column: 18, scope: !15267)
!15269 = !DILocation(line: 5662, column: 24, scope: !15267)
!15270 = !DILocation(line: 5662, column: 27, scope: !15271)
!15271 = !DILexicalBlockFile(scope: !15267, file: !616, discriminator: 1)
!15272 = !DILocation(line: 5662, column: 9, scope: !1838)
!15273 = !DILocation(line: 5663, column: 9, scope: !15267)
!15274 = !DILocation(line: 5664, column: 9, scope: !15275)
!15275 = distinct !DILexicalBlock(scope: !1838, file: !616, line: 5664, column: 9)
!15276 = !DILocation(line: 5664, column: 18, scope: !15275)
!15277 = !DILocation(line: 5664, column: 31, scope: !15275)
!15278 = !DILocation(line: 5664, column: 34, scope: !15279)
!15279 = !DILexicalBlockFile(scope: !15275, file: !616, discriminator: 1)
!15280 = !DILocation(line: 5664, column: 43, scope: !15275)
!15281 = !DILocation(line: 5664, column: 9, scope: !1838)
!15282 = !DILocation(line: 5665, column: 25, scope: !15283)
!15283 = distinct !DILexicalBlock(scope: !15275, file: !616, line: 5664, column: 63)
!15284 = !DILocation(line: 5665, column: 9, scope: !15283)
!15285 = !DILocation(line: 5666, column: 9, scope: !15283)
!15286 = !DILocation(line: 5668, column: 35, scope: !1838)
!15287 = !DILocation(line: 5668, column: 29, scope: !1838)
!15288 = !DILocation(line: 5668, column: 5, scope: !1838)
!15289 = !DILocation(line: 5668, column: 10, scope: !1838)
!15290 = !DILocation(line: 5668, column: 27, scope: !1838)
!15291 = !DILocation(line: 5669, column: 5, scope: !1838)
!15292 = !DILocation(line: 5670, column: 1, scope: !1838)
!15293 = !DILocation(line: 6834, column: 19, scope: !2204)
!15294 = !DILocation(line: 6834, column: 28, scope: !2204)
!15295 = !DILocation(line: 6834, column: 51, scope: !2204)
!15296 = !DILocation(line: 6836, column: 5, scope: !2204)
!15297 = !DILocation(line: 6836, column: 15, scope: !2204)
!15298 = !DILocation(line: 6840, column: 9, scope: !15299)
!15299 = distinct !DILexicalBlock(scope: !2204, file: !616, line: 6840, column: 9)
!15300 = !DILocation(line: 6840, column: 13, scope: !15299)
!15301 = !DILocation(line: 6840, column: 9, scope: !2204)
!15302 = !DILocation(line: 6841, column: 16, scope: !15299)
!15303 = !DILocation(line: 6841, column: 9, scope: !15299)
!15304 = !DILocation(line: 6843, column: 9, scope: !2215)
!15305 = !DILocation(line: 6843, column: 23, scope: !2215)
!15306 = !DILocation(line: 6843, column: 9, scope: !2204)
!15307 = !DILocation(line: 6844, column: 9, scope: !2214)
!15308 = !DILocation(line: 6844, column: 19, scope: !2214)
!15309 = !DILocation(line: 6844, column: 23, scope: !2214)
!15310 = !DILocation(line: 6845, column: 13, scope: !15311)
!15311 = distinct !DILexicalBlock(scope: !2214, file: !616, line: 6845, column: 13)
!15312 = !DILocation(line: 6845, column: 15, scope: !15311)
!15313 = !DILocation(line: 6845, column: 13, scope: !2214)
!15314 = !DILocation(line: 6846, column: 13, scope: !15311)
!15315 = !DILocation(line: 6847, column: 45, scope: !2214)
!15316 = !DILocation(line: 6847, column: 25, scope: !2214)
!15317 = !DILocation(line: 6847, column: 23, scope: !2214)
!15318 = !DILocation(line: 6848, column: 9, scope: !2214)
!15319 = !DILocation(line: 6848, column: 14, scope: !15320)
!15320 = !DILexicalBlockFile(scope: !2217, file: !616, discriminator: 1)
!15321 = !DILocation(line: 6848, column: 24, scope: !2217)
!15322 = !DILocation(line: 6848, column: 54, scope: !2217)
!15323 = !DILocation(line: 6848, column: 66, scope: !15324)
!15324 = distinct !DILexicalBlock(scope: !2217, file: !616, line: 6848, column: 63)
!15325 = !DILocation(line: 6848, column: 83, scope: !15324)
!15326 = !DILocation(line: 6848, column: 63, scope: !15324)
!15327 = !DILocation(line: 6848, column: 93, scope: !15324)
!15328 = !DILocation(line: 6848, column: 63, scope: !2217)
!15329 = !DILocation(line: 6848, column: 63, scope: !15330)
!15330 = !DILexicalBlockFile(scope: !2217, file: !616, discriminator: 2)
!15331 = !DILocation(line: 6848, column: 124, scope: !15332)
!15332 = !DILexicalBlockFile(scope: !15324, file: !616, discriminator: 3)
!15333 = !DILocation(line: 6848, column: 142, scope: !15324)
!15334 = !DILocation(line: 6848, column: 152, scope: !15324)
!15335 = !DILocation(line: 6848, column: 177, scope: !15324)
!15336 = !DILocation(line: 6848, column: 108, scope: !15324)
!15337 = !DILocation(line: 6848, column: 196, scope: !15338)
!15338 = !DILexicalBlockFile(scope: !2214, file: !616, discriminator: 4)
!15339 = !DILocation(line: 6848, column: 196, scope: !2217)
!15340 = !DILocation(line: 6848, column: 196, scope: !15341)
!15341 = !DILexicalBlockFile(scope: !2217, file: !616, discriminator: 5)
!15342 = !DILocation(line: 6849, column: 13, scope: !15343)
!15343 = distinct !DILexicalBlock(scope: !2214, file: !616, line: 6849, column: 13)
!15344 = !DILocation(line: 6849, column: 27, scope: !15343)
!15345 = !DILocation(line: 6849, column: 13, scope: !2214)
!15346 = !DILocation(line: 6850, column: 13, scope: !15343)
!15347 = !DILocation(line: 6851, column: 5, scope: !2215)
!15348 = !DILocation(line: 6851, column: 5, scope: !15349)
!15349 = !DILexicalBlockFile(scope: !2215, file: !616, discriminator: 1)
!15350 = !DILocation(line: 6851, column: 5, scope: !2214)
!15351 = !DILocation(line: 6854, column: 51, scope: !2204)
!15352 = !DILocation(line: 6854, column: 35, scope: !2204)
!15353 = !DILocation(line: 6854, column: 14, scope: !2204)
!15354 = !DILocation(line: 6854, column: 12, scope: !2204)
!15355 = !DILocation(line: 6855, column: 10, scope: !15356)
!15356 = distinct !DILexicalBlock(scope: !2204, file: !616, line: 6855, column: 9)
!15357 = !DILocation(line: 6855, column: 9, scope: !2204)
!15358 = !DILocation(line: 6856, column: 9, scope: !15356)
!15359 = !DILocation(line: 6862, column: 77, scope: !2204)
!15360 = !DILocation(line: 6862, column: 81, scope: !2204)
!15361 = !DILocation(line: 6862, column: 91, scope: !2204)
!15362 = !{!15363, !3894, i64 0}
!15363 = !{!"rusage", !15364, i64 0, !15364, i64 16, !3842, i64 32, !3842, i64 40, !3842, i64 48, !3842, i64 56, !3842, i64 64, !3842, i64 72, !3842, i64 80, !3842, i64 88, !3842, i64 96, !3842, i64 104, !3842, i64 112, !3842, i64 120, !3842, i64 128, !3842, i64 136}
!15364 = !{!"timeval", !3894, i64 0, !3894, i64 8}
!15365 = !DILocation(line: 6862, column: 68, scope: !2204)
!15366 = !DILocation(line: 6862, column: 101, scope: !2204)
!15367 = !DILocation(line: 6862, column: 105, scope: !2204)
!15368 = !DILocation(line: 6862, column: 115, scope: !2204)
!15369 = !{!15363, !3894, i64 8}
!15370 = !DILocation(line: 6862, column: 100, scope: !2204)
!15371 = !DILocation(line: 6862, column: 123, scope: !2204)
!15372 = !DILocation(line: 6862, column: 98, scope: !2204)
!15373 = !DILocation(line: 6862, column: 48, scope: !2204)
!15374 = !DILocation(line: 6862, column: 25, scope: !2204)
!15375 = !DILocation(line: 6862, column: 7, scope: !2204)
!15376 = !DILocation(line: 6862, column: 35, scope: !2204)
!15377 = !DILocation(line: 6862, column: 6, scope: !2204)
!15378 = !DILocation(line: 6862, column: 46, scope: !2204)
!15379 = !DILocation(line: 6864, column: 77, scope: !2204)
!15380 = !DILocation(line: 6864, column: 81, scope: !2204)
!15381 = !DILocation(line: 6864, column: 91, scope: !2204)
!15382 = !{!15363, !3894, i64 16}
!15383 = !DILocation(line: 6864, column: 68, scope: !2204)
!15384 = !DILocation(line: 6864, column: 101, scope: !2204)
!15385 = !DILocation(line: 6864, column: 105, scope: !2204)
!15386 = !DILocation(line: 6864, column: 115, scope: !2204)
!15387 = !{!15363, !3894, i64 24}
!15388 = !DILocation(line: 6864, column: 100, scope: !2204)
!15389 = !DILocation(line: 6864, column: 123, scope: !2204)
!15390 = !DILocation(line: 6864, column: 98, scope: !2204)
!15391 = !DILocation(line: 6864, column: 48, scope: !2204)
!15392 = !DILocation(line: 6864, column: 25, scope: !2204)
!15393 = !DILocation(line: 6864, column: 7, scope: !2204)
!15394 = !DILocation(line: 6864, column: 35, scope: !2204)
!15395 = !DILocation(line: 6864, column: 6, scope: !2204)
!15396 = !DILocation(line: 6864, column: 46, scope: !2204)
!15397 = !DILocation(line: 6868, column: 64, scope: !2204)
!15398 = !DILocation(line: 6868, column: 68, scope: !2204)
!15399 = !DILocation(line: 6868, column: 48, scope: !2204)
!15400 = !DILocation(line: 6868, column: 25, scope: !2204)
!15401 = !DILocation(line: 6868, column: 7, scope: !2204)
!15402 = !DILocation(line: 6868, column: 35, scope: !2204)
!15403 = !DILocation(line: 6868, column: 6, scope: !2204)
!15404 = !DILocation(line: 6868, column: 46, scope: !2204)
!15405 = !DILocation(line: 6869, column: 64, scope: !2204)
!15406 = !DILocation(line: 6869, column: 68, scope: !2204)
!15407 = !DILocation(line: 6869, column: 48, scope: !2204)
!15408 = !DILocation(line: 6869, column: 25, scope: !2204)
!15409 = !DILocation(line: 6869, column: 7, scope: !2204)
!15410 = !DILocation(line: 6869, column: 35, scope: !2204)
!15411 = !DILocation(line: 6869, column: 6, scope: !2204)
!15412 = !DILocation(line: 6869, column: 46, scope: !2204)
!15413 = !DILocation(line: 6870, column: 64, scope: !2204)
!15414 = !DILocation(line: 6870, column: 68, scope: !2204)
!15415 = !DILocation(line: 6870, column: 48, scope: !2204)
!15416 = !DILocation(line: 6870, column: 25, scope: !2204)
!15417 = !DILocation(line: 6870, column: 7, scope: !2204)
!15418 = !DILocation(line: 6870, column: 35, scope: !2204)
!15419 = !DILocation(line: 6870, column: 6, scope: !2204)
!15420 = !DILocation(line: 6870, column: 46, scope: !2204)
!15421 = !DILocation(line: 6871, column: 64, scope: !2204)
!15422 = !DILocation(line: 6871, column: 68, scope: !2204)
!15423 = !DILocation(line: 6871, column: 48, scope: !2204)
!15424 = !DILocation(line: 6871, column: 25, scope: !2204)
!15425 = !DILocation(line: 6871, column: 7, scope: !2204)
!15426 = !DILocation(line: 6871, column: 35, scope: !2204)
!15427 = !DILocation(line: 6871, column: 6, scope: !2204)
!15428 = !DILocation(line: 6871, column: 46, scope: !2204)
!15429 = !DILocation(line: 6872, column: 64, scope: !2204)
!15430 = !DILocation(line: 6872, column: 68, scope: !2204)
!15431 = !DILocation(line: 6872, column: 48, scope: !2204)
!15432 = !DILocation(line: 6872, column: 25, scope: !2204)
!15433 = !DILocation(line: 6872, column: 7, scope: !2204)
!15434 = !DILocation(line: 6872, column: 35, scope: !2204)
!15435 = !DILocation(line: 6872, column: 6, scope: !2204)
!15436 = !DILocation(line: 6872, column: 46, scope: !2204)
!15437 = !DILocation(line: 6873, column: 64, scope: !2204)
!15438 = !DILocation(line: 6873, column: 68, scope: !2204)
!15439 = !DILocation(line: 6873, column: 48, scope: !2204)
!15440 = !DILocation(line: 6873, column: 25, scope: !2204)
!15441 = !DILocation(line: 6873, column: 7, scope: !2204)
!15442 = !DILocation(line: 6873, column: 35, scope: !2204)
!15443 = !DILocation(line: 6873, column: 6, scope: !2204)
!15444 = !DILocation(line: 6873, column: 46, scope: !2204)
!15445 = !DILocation(line: 6874, column: 64, scope: !2204)
!15446 = !DILocation(line: 6874, column: 68, scope: !2204)
!15447 = !DILocation(line: 6874, column: 48, scope: !2204)
!15448 = !DILocation(line: 6874, column: 25, scope: !2204)
!15449 = !DILocation(line: 6874, column: 7, scope: !2204)
!15450 = !DILocation(line: 6874, column: 35, scope: !2204)
!15451 = !DILocation(line: 6874, column: 6, scope: !2204)
!15452 = !DILocation(line: 6874, column: 46, scope: !2204)
!15453 = !DILocation(line: 6875, column: 64, scope: !2204)
!15454 = !DILocation(line: 6875, column: 68, scope: !2204)
!15455 = !DILocation(line: 6875, column: 48, scope: !2204)
!15456 = !DILocation(line: 6875, column: 25, scope: !2204)
!15457 = !DILocation(line: 6875, column: 7, scope: !2204)
!15458 = !DILocation(line: 6875, column: 35, scope: !2204)
!15459 = !DILocation(line: 6875, column: 6, scope: !2204)
!15460 = !DILocation(line: 6875, column: 46, scope: !2204)
!15461 = !DILocation(line: 6876, column: 65, scope: !2204)
!15462 = !DILocation(line: 6876, column: 69, scope: !2204)
!15463 = !DILocation(line: 6876, column: 49, scope: !2204)
!15464 = !DILocation(line: 6876, column: 25, scope: !2204)
!15465 = !DILocation(line: 6876, column: 7, scope: !2204)
!15466 = !DILocation(line: 6876, column: 35, scope: !2204)
!15467 = !DILocation(line: 6876, column: 6, scope: !2204)
!15468 = !DILocation(line: 6876, column: 47, scope: !2204)
!15469 = !DILocation(line: 6877, column: 65, scope: !2204)
!15470 = !DILocation(line: 6877, column: 69, scope: !2204)
!15471 = !DILocation(line: 6877, column: 49, scope: !2204)
!15472 = !DILocation(line: 6877, column: 25, scope: !2204)
!15473 = !DILocation(line: 6877, column: 7, scope: !2204)
!15474 = !DILocation(line: 6877, column: 35, scope: !2204)
!15475 = !DILocation(line: 6877, column: 6, scope: !2204)
!15476 = !DILocation(line: 6877, column: 47, scope: !2204)
!15477 = !DILocation(line: 6878, column: 65, scope: !2204)
!15478 = !DILocation(line: 6878, column: 69, scope: !2204)
!15479 = !DILocation(line: 6878, column: 49, scope: !2204)
!15480 = !DILocation(line: 6878, column: 25, scope: !2204)
!15481 = !DILocation(line: 6878, column: 7, scope: !2204)
!15482 = !DILocation(line: 6878, column: 35, scope: !2204)
!15483 = !DILocation(line: 6878, column: 6, scope: !2204)
!15484 = !DILocation(line: 6878, column: 47, scope: !2204)
!15485 = !DILocation(line: 6879, column: 65, scope: !2204)
!15486 = !DILocation(line: 6879, column: 69, scope: !2204)
!15487 = !DILocation(line: 6879, column: 49, scope: !2204)
!15488 = !DILocation(line: 6879, column: 25, scope: !2204)
!15489 = !DILocation(line: 6879, column: 7, scope: !2204)
!15490 = !DILocation(line: 6879, column: 35, scope: !2204)
!15491 = !DILocation(line: 6879, column: 6, scope: !2204)
!15492 = !DILocation(line: 6879, column: 47, scope: !2204)
!15493 = !DILocation(line: 6880, column: 65, scope: !2204)
!15494 = !DILocation(line: 6880, column: 69, scope: !2204)
!15495 = !DILocation(line: 6880, column: 49, scope: !2204)
!15496 = !DILocation(line: 6880, column: 25, scope: !2204)
!15497 = !DILocation(line: 6880, column: 7, scope: !2204)
!15498 = !DILocation(line: 6880, column: 35, scope: !2204)
!15499 = !DILocation(line: 6880, column: 6, scope: !2204)
!15500 = !DILocation(line: 6880, column: 47, scope: !2204)
!15501 = !DILocation(line: 6881, column: 65, scope: !2204)
!15502 = !DILocation(line: 6881, column: 69, scope: !2204)
!15503 = !DILocation(line: 6881, column: 49, scope: !2204)
!15504 = !DILocation(line: 6881, column: 25, scope: !2204)
!15505 = !DILocation(line: 6881, column: 7, scope: !2204)
!15506 = !DILocation(line: 6881, column: 35, scope: !2204)
!15507 = !DILocation(line: 6881, column: 6, scope: !2204)
!15508 = !DILocation(line: 6881, column: 47, scope: !2204)
!15509 = !DILocation(line: 6884, column: 9, scope: !2221)
!15510 = !DILocation(line: 6884, column: 9, scope: !2204)
!15511 = !DILocation(line: 6885, column: 9, scope: !2220)
!15512 = !DILocation(line: 6885, column: 14, scope: !15513)
!15513 = !DILexicalBlockFile(scope: !2219, file: !616, discriminator: 1)
!15514 = !DILocation(line: 6885, column: 24, scope: !2219)
!15515 = !DILocation(line: 6885, column: 54, scope: !2219)
!15516 = !DILocation(line: 6885, column: 71, scope: !15517)
!15517 = distinct !DILexicalBlock(scope: !2219, file: !616, line: 6885, column: 68)
!15518 = !DILocation(line: 6885, column: 88, scope: !15517)
!15519 = !DILocation(line: 6885, column: 68, scope: !15517)
!15520 = !DILocation(line: 6885, column: 98, scope: !15517)
!15521 = !DILocation(line: 6885, column: 68, scope: !2219)
!15522 = !DILocation(line: 6885, column: 68, scope: !15523)
!15523 = !DILexicalBlockFile(scope: !2219, file: !616, discriminator: 2)
!15524 = !DILocation(line: 6885, column: 129, scope: !15525)
!15525 = !DILexicalBlockFile(scope: !15517, file: !616, discriminator: 3)
!15526 = !DILocation(line: 6885, column: 147, scope: !15517)
!15527 = !DILocation(line: 6885, column: 157, scope: !15517)
!15528 = !DILocation(line: 6885, column: 182, scope: !15517)
!15529 = !DILocation(line: 6885, column: 113, scope: !15517)
!15530 = !DILocation(line: 6885, column: 201, scope: !15531)
!15531 = !DILexicalBlockFile(scope: !2220, file: !616, discriminator: 4)
!15532 = !DILocation(line: 6885, column: 201, scope: !2219)
!15533 = !DILocation(line: 6885, column: 201, scope: !15534)
!15534 = !DILexicalBlockFile(scope: !2219, file: !616, discriminator: 5)
!15535 = !DILocation(line: 6886, column: 9, scope: !2220)
!15536 = !DILocation(line: 6889, column: 56, scope: !2204)
!15537 = !DILocation(line: 6889, column: 40, scope: !2204)
!15538 = !DILocation(line: 6889, column: 62, scope: !2204)
!15539 = !DILocation(line: 6889, column: 70, scope: !2204)
!15540 = !DILocation(line: 6889, column: 12, scope: !2204)
!15541 = !DILocation(line: 6889, column: 5, scope: !2204)
!15542 = !DILocation(line: 6890, column: 1, scope: !2204)
!15543 = !DILocation(line: 1005, column: 24, scope: !2416)
!15544 = !DILocation(line: 1005, column: 35, scope: !2416)
!15545 = !DILocation(line: 1008, column: 37, scope: !2416)
!15546 = !DILocation(line: 1008, column: 23, scope: !2416)
!15547 = !DILocation(line: 1008, column: 15, scope: !2416)
!15548 = !DILocation(line: 1008, column: 7, scope: !2416)
!15549 = !DILocation(line: 1008, column: 21, scope: !2416)
!15550 = !DILocation(line: 1012, column: 9, scope: !15551)
!15551 = distinct !DILexicalBlock(scope: !2416, file: !616, line: 1012, column: 9)
!15552 = !DILocation(line: 1012, column: 9, scope: !2416)
!15553 = !DILocation(line: 1013, column: 9, scope: !15551)
!15554 = !DILocation(line: 1014, column: 5, scope: !2416)
!15555 = !DILocation(line: 1015, column: 1, scope: !2416)
!15556 = !DILocation(line: 8034, column: 26, scope: !2457)
!15557 = !DILocation(line: 8034, column: 43, scope: !2457)
!15558 = !DILocation(line: 8034, column: 58, scope: !2457)
!15559 = !DILocation(line: 8034, column: 67, scope: !2457)
!15560 = !DILocation(line: 8034, column: 76, scope: !2457)
!15561 = !DILocation(line: 8036, column: 5, scope: !2457)
!15562 = !DILocation(line: 8036, column: 9, scope: !2457)
!15563 = !DILocation(line: 8036, column: 12, scope: !2457)
!15564 = !DILocation(line: 8037, column: 5, scope: !2457)
!15565 = !DILocation(line: 8037, column: 16, scope: !2457)
!15566 = !DILocation(line: 8037, column: 22, scope: !2457)
!15567 = !DILocation(line: 8039, column: 24, scope: !2457)
!15568 = !DILocation(line: 8039, column: 15, scope: !2457)
!15569 = !DILocation(line: 8039, column: 29, scope: !2457)
!15570 = !DILocation(line: 8039, column: 14, scope: !2457)
!15571 = !DILocation(line: 8039, column: 14, scope: !15572)
!15572 = !DILexicalBlockFile(scope: !2457, file: !616, discriminator: 1)
!15573 = !DILocation(line: 8039, column: 135, scope: !15574)
!15574 = !DILexicalBlockFile(scope: !2457, file: !616, discriminator: 2)
!15575 = !DILocation(line: 8039, column: 134, scope: !2457)
!15576 = !DILocation(line: 8039, column: 140, scope: !2457)
!15577 = !DILocation(line: 8039, column: 121, scope: !2457)
!15578 = !DILocation(line: 8039, column: 104, scope: !2457)
!15579 = !DILocation(line: 8039, column: 6, scope: !15580)
!15580 = !DILexicalBlockFile(scope: !15581, file: !616, discriminator: 4)
!15581 = !DILexicalBlockFile(scope: !2457, file: !616, discriminator: 3)
!15582 = !DILocation(line: 8039, column: 10, scope: !2457)
!15583 = !DILocation(line: 8040, column: 10, scope: !15584)
!15584 = distinct !DILexicalBlock(scope: !2457, file: !616, line: 8040, column: 9)
!15585 = !DILocation(line: 8040, column: 9, scope: !15584)
!15586 = !DILocation(line: 8040, column: 14, scope: !15584)
!15587 = !DILocation(line: 8040, column: 9, scope: !2457)
!15588 = !DILocation(line: 8041, column: 9, scope: !15589)
!15589 = distinct !DILexicalBlock(scope: !15584, file: !616, line: 8040, column: 29)
!15590 = !DILocation(line: 8042, column: 9, scope: !15589)
!15591 = !DILocation(line: 8045, column: 24, scope: !2457)
!15592 = !DILocation(line: 8045, column: 15, scope: !2457)
!15593 = !DILocation(line: 8045, column: 29, scope: !2457)
!15594 = !DILocation(line: 8045, column: 14, scope: !2457)
!15595 = !DILocation(line: 8045, column: 14, scope: !15572)
!15596 = !DILocation(line: 8045, column: 129, scope: !15574)
!15597 = !DILocation(line: 8045, column: 128, scope: !2457)
!15598 = !DILocation(line: 8045, column: 134, scope: !2457)
!15599 = !DILocation(line: 8045, column: 115, scope: !2457)
!15600 = !DILocation(line: 8045, column: 101, scope: !2457)
!15601 = !DILocation(line: 8045, column: 6, scope: !15580)
!15602 = !DILocation(line: 8045, column: 10, scope: !2457)
!15603 = !DILocation(line: 8046, column: 10, scope: !15604)
!15604 = distinct !DILexicalBlock(scope: !2457, file: !616, line: 8046, column: 9)
!15605 = !DILocation(line: 8046, column: 9, scope: !15604)
!15606 = !DILocation(line: 8046, column: 14, scope: !15604)
!15607 = !DILocation(line: 8046, column: 9, scope: !2457)
!15608 = !DILocation(line: 8047, column: 21, scope: !15609)
!15609 = distinct !DILexicalBlock(scope: !15604, file: !616, line: 8046, column: 29)
!15610 = !DILocation(line: 8047, column: 20, scope: !15609)
!15611 = !DILocation(line: 8047, column: 9, scope: !15609)
!15612 = !DILocation(line: 8048, column: 9, scope: !15609)
!15613 = !DILocation(line: 8049, column: 9, scope: !15609)
!15614 = !DILocation(line: 8052, column: 12, scope: !2475)
!15615 = !DILocation(line: 8052, column: 10, scope: !2475)
!15616 = !DILocation(line: 8052, column: 17, scope: !15617)
!15617 = !DILexicalBlockFile(scope: !15618, file: !616, discriminator: 2)
!15618 = !DILexicalBlockFile(scope: !2474, file: !616, discriminator: 1)
!15619 = !DILocation(line: 8052, column: 21, scope: !2474)
!15620 = !DILocation(line: 8052, column: 19, scope: !2474)
!15621 = !DILocation(line: 8052, column: 5, scope: !2475)
!15622 = !DILocation(line: 8053, column: 9, scope: !2473)
!15623 = !DILocation(line: 8053, column: 19, scope: !2473)
!15624 = !DILocation(line: 8053, column: 45, scope: !2473)
!15625 = !DILocation(line: 8053, column: 50, scope: !2473)
!15626 = !DILocation(line: 8053, column: 26, scope: !2473)
!15627 = !DILocation(line: 8054, column: 13, scope: !15628)
!15628 = distinct !DILexicalBlock(scope: !2473, file: !616, line: 8054, column: 13)
!15629 = !DILocation(line: 8054, column: 18, scope: !15628)
!15630 = !DILocation(line: 8054, column: 13, scope: !2473)
!15631 = !DILocation(line: 8055, column: 13, scope: !15628)
!15632 = !DILocation(line: 8056, column: 32, scope: !2479)
!15633 = !DILocation(line: 8056, column: 46, scope: !2479)
!15634 = !DILocation(line: 8056, column: 39, scope: !2479)
!15635 = !DILocation(line: 8056, column: 41, scope: !2479)
!15636 = !DILocation(line: 8056, column: 40, scope: !2479)
!15637 = !DILocation(line: 8056, column: 50, scope: !2479)
!15638 = !DILocation(line: 8056, column: 13, scope: !2479)
!15639 = !DILocation(line: 8056, column: 56, scope: !2479)
!15640 = !DILocation(line: 8056, column: 13, scope: !2473)
!15641 = !DILocation(line: 8057, column: 13, scope: !2478)
!15642 = !DILocation(line: 8057, column: 18, scope: !15643)
!15643 = !DILexicalBlockFile(scope: !2477, file: !616, discriminator: 1)
!15644 = !DILocation(line: 8057, column: 28, scope: !2477)
!15645 = !DILocation(line: 8057, column: 58, scope: !2477)
!15646 = !DILocation(line: 8057, column: 73, scope: !15647)
!15647 = distinct !DILexicalBlock(scope: !2477, file: !616, line: 8057, column: 70)
!15648 = !DILocation(line: 8057, column: 90, scope: !15647)
!15649 = !DILocation(line: 8057, column: 70, scope: !15647)
!15650 = !DILocation(line: 8057, column: 100, scope: !15647)
!15651 = !DILocation(line: 8057, column: 70, scope: !2477)
!15652 = !DILocation(line: 8057, column: 70, scope: !15653)
!15653 = !DILexicalBlockFile(scope: !2477, file: !616, discriminator: 2)
!15654 = !DILocation(line: 8057, column: 131, scope: !15655)
!15655 = !DILexicalBlockFile(scope: !15647, file: !616, discriminator: 3)
!15656 = !DILocation(line: 8057, column: 149, scope: !15647)
!15657 = !DILocation(line: 8057, column: 159, scope: !15647)
!15658 = !DILocation(line: 8057, column: 184, scope: !15647)
!15659 = !DILocation(line: 8057, column: 115, scope: !15647)
!15660 = !DILocation(line: 8057, column: 203, scope: !15661)
!15661 = !DILexicalBlockFile(scope: !2478, file: !616, discriminator: 4)
!15662 = !DILocation(line: 8057, column: 203, scope: !2477)
!15663 = !DILocation(line: 8057, column: 203, scope: !15664)
!15664 = !DILexicalBlockFile(scope: !2477, file: !616, discriminator: 5)
!15665 = !DILocation(line: 8058, column: 13, scope: !2478)
!15666 = !DILocation(line: 8060, column: 9, scope: !2473)
!15667 = !DILocation(line: 8060, column: 14, scope: !15668)
!15668 = !DILexicalBlockFile(scope: !2481, file: !616, discriminator: 1)
!15669 = !DILocation(line: 8060, column: 24, scope: !2481)
!15670 = !DILocation(line: 8060, column: 54, scope: !2481)
!15671 = !DILocation(line: 8060, column: 69, scope: !15672)
!15672 = distinct !DILexicalBlock(scope: !2481, file: !616, line: 8060, column: 66)
!15673 = !DILocation(line: 8060, column: 86, scope: !15672)
!15674 = !DILocation(line: 8060, column: 66, scope: !15672)
!15675 = !DILocation(line: 8060, column: 96, scope: !15672)
!15676 = !DILocation(line: 8060, column: 66, scope: !2481)
!15677 = !DILocation(line: 8060, column: 66, scope: !15678)
!15678 = !DILexicalBlockFile(scope: !2481, file: !616, discriminator: 2)
!15679 = !DILocation(line: 8060, column: 127, scope: !15680)
!15680 = !DILexicalBlockFile(scope: !15672, file: !616, discriminator: 3)
!15681 = !DILocation(line: 8060, column: 145, scope: !15672)
!15682 = !DILocation(line: 8060, column: 155, scope: !15672)
!15683 = !DILocation(line: 8060, column: 180, scope: !15672)
!15684 = !DILocation(line: 8060, column: 111, scope: !15672)
!15685 = !DILocation(line: 8060, column: 199, scope: !15686)
!15686 = !DILexicalBlockFile(scope: !2473, file: !616, discriminator: 4)
!15687 = !DILocation(line: 8060, column: 199, scope: !2481)
!15688 = !DILocation(line: 8060, column: 199, scope: !15689)
!15689 = !DILexicalBlockFile(scope: !2481, file: !616, discriminator: 5)
!15690 = !DILocation(line: 8061, column: 37, scope: !2473)
!15691 = !DILocation(line: 8061, column: 30, scope: !2473)
!15692 = !DILocation(line: 8061, column: 32, scope: !2473)
!15693 = !DILocation(line: 8061, column: 31, scope: !2473)
!15694 = !DILocation(line: 8061, column: 40, scope: !2473)
!15695 = !DILocation(line: 8061, column: 16, scope: !2473)
!15696 = !DILocation(line: 8061, column: 9, scope: !2473)
!15697 = !DILocation(line: 8061, column: 11, scope: !2473)
!15698 = !DILocation(line: 8061, column: 10, scope: !2473)
!15699 = !DILocation(line: 8061, column: 19, scope: !2473)
!15700 = !DILocation(line: 8061, column: 28, scope: !2473)
!15701 = !{!15702, !3868, i64 0}
!15702 = !{!"iovec", !3868, i64 0, !3894, i64 8}
!15703 = !DILocation(line: 8062, column: 23, scope: !2473)
!15704 = !DILocation(line: 8062, column: 16, scope: !2473)
!15705 = !DILocation(line: 8062, column: 18, scope: !2473)
!15706 = !DILocation(line: 8062, column: 17, scope: !2473)
!15707 = !DILocation(line: 8062, column: 26, scope: !2473)
!15708 = !DILocation(line: 8062, column: 14, scope: !2473)
!15709 = !DILocation(line: 8063, column: 29, scope: !2473)
!15710 = !DILocation(line: 8063, column: 16, scope: !2473)
!15711 = !DILocation(line: 8063, column: 9, scope: !2473)
!15712 = !DILocation(line: 8063, column: 11, scope: !2473)
!15713 = !DILocation(line: 8063, column: 10, scope: !2473)
!15714 = !DILocation(line: 8063, column: 19, scope: !2473)
!15715 = !DILocation(line: 8063, column: 27, scope: !2473)
!15716 = !{!15702, !3894, i64 8}
!15717 = !DILocation(line: 8064, column: 18, scope: !2473)
!15718 = !DILocation(line: 8064, column: 15, scope: !2473)
!15719 = !DILocation(line: 8065, column: 5, scope: !2474)
!15720 = !DILocation(line: 8065, column: 5, scope: !15618)
!15721 = !DILocation(line: 8065, column: 5, scope: !2473)
!15722 = !DILocation(line: 8052, column: 27, scope: !2474)
!15723 = !DILocation(line: 8052, column: 5, scope: !2474)
!15724 = !DILocation(line: 8066, column: 12, scope: !2457)
!15725 = !DILocation(line: 8066, column: 5, scope: !2457)
!15726 = !DILocation(line: 8069, column: 17, scope: !2457)
!15727 = !DILocation(line: 8069, column: 16, scope: !2457)
!15728 = !DILocation(line: 8069, column: 5, scope: !2457)
!15729 = !DILocation(line: 8070, column: 12, scope: !15730)
!15730 = distinct !DILexicalBlock(scope: !2457, file: !616, line: 8070, column: 5)
!15731 = !DILocation(line: 8070, column: 10, scope: !15730)
!15732 = !DILocation(line: 8070, column: 17, scope: !15733)
!15733 = !DILexicalBlockFile(scope: !15734, file: !616, discriminator: 2)
!15734 = !DILexicalBlockFile(scope: !15735, file: !616, discriminator: 1)
!15735 = distinct !DILexicalBlock(scope: !15730, file: !616, line: 8070, column: 5)
!15736 = !DILocation(line: 8070, column: 21, scope: !15735)
!15737 = !DILocation(line: 8070, column: 19, scope: !15735)
!15738 = !DILocation(line: 8070, column: 5, scope: !15730)
!15739 = !DILocation(line: 8071, column: 34, scope: !15740)
!15740 = distinct !DILexicalBlock(scope: !15735, file: !616, line: 8070, column: 29)
!15741 = !DILocation(line: 8071, column: 27, scope: !15740)
!15742 = !DILocation(line: 8071, column: 29, scope: !15740)
!15743 = !DILocation(line: 8071, column: 28, scope: !15740)
!15744 = !DILocation(line: 8071, column: 9, scope: !15740)
!15745 = !DILocation(line: 8072, column: 5, scope: !15740)
!15746 = !DILocation(line: 8070, column: 25, scope: !15735)
!15747 = !DILocation(line: 8070, column: 5, scope: !15735)
!15748 = !DILocation(line: 8073, column: 17, scope: !2457)
!15749 = !DILocation(line: 8073, column: 16, scope: !2457)
!15750 = !DILocation(line: 8073, column: 5, scope: !2457)
!15751 = !DILocation(line: 8074, column: 5, scope: !2457)
!15752 = !DILocation(line: 8075, column: 1, scope: !2457)
!15753 = !DILocation(line: 8078, column: 27, scope: !2482)
!15754 = !DILocation(line: 8078, column: 43, scope: !2482)
!15755 = !DILocation(line: 8078, column: 52, scope: !2482)
!15756 = !DILocation(line: 8080, column: 5, scope: !2482)
!15757 = !DILocation(line: 8080, column: 9, scope: !2482)
!15758 = !DILocation(line: 8081, column: 16, scope: !2482)
!15759 = !DILocation(line: 8081, column: 5, scope: !2482)
!15760 = !DILocation(line: 8082, column: 12, scope: !15761)
!15761 = distinct !DILexicalBlock(scope: !2482, file: !616, line: 8082, column: 5)
!15762 = !DILocation(line: 8082, column: 10, scope: !15761)
!15763 = !DILocation(line: 8082, column: 17, scope: !15764)
!15764 = !DILexicalBlockFile(scope: !15765, file: !616, discriminator: 2)
!15765 = !DILexicalBlockFile(scope: !15766, file: !616, discriminator: 1)
!15766 = distinct !DILexicalBlock(scope: !15761, file: !616, line: 8082, column: 5)
!15767 = !DILocation(line: 8082, column: 21, scope: !15766)
!15768 = !DILocation(line: 8082, column: 19, scope: !15766)
!15769 = !DILocation(line: 8082, column: 5, scope: !15761)
!15770 = !DILocation(line: 8083, column: 31, scope: !15771)
!15771 = distinct !DILexicalBlock(scope: !15766, file: !616, line: 8082, column: 31)
!15772 = !DILocation(line: 8083, column: 27, scope: !15771)
!15773 = !DILocation(line: 8083, column: 9, scope: !15771)
!15774 = !DILocation(line: 8084, column: 5, scope: !15771)
!15775 = !DILocation(line: 8082, column: 27, scope: !15766)
!15776 = !DILocation(line: 8082, column: 5, scope: !15766)
!15777 = !DILocation(line: 8085, column: 16, scope: !2482)
!15778 = !DILocation(line: 8085, column: 5, scope: !2482)
!15779 = !DILocation(line: 8086, column: 1, scope: !2482)
!15780 = !DILocation(line: 492, column: 45, scope: !2613)
!15781 = !DILocation(line: 492, column: 63, scope: !2613)
!15782 = !DILocation(line: 492, column: 80, scope: !2613)
!15783 = !DILocation(line: 492, column: 96, scope: !2613)
!15784 = !DILocation(line: 495, column: 25, scope: !2613)
!15785 = !DILocation(line: 495, column: 31, scope: !2613)
!15786 = !DILocation(line: 495, column: 39, scope: !2613)
!15787 = !DILocation(line: 495, column: 10, scope: !2613)
!15788 = !DILocation(line: 495, column: 3, scope: !2613)
!15789 = !DILocation(line: 484, column: 51, scope: !2621)
!15790 = !DILocation(line: 484, column: 68, scope: !2621)
!15791 = !DILocation(line: 484, column: 84, scope: !2621)
!15792 = !DILocation(line: 486, column: 23, scope: !2621)
!15793 = !DILocation(line: 486, column: 31, scope: !2621)
!15794 = !DILocation(line: 486, column: 10, scope: !2621)
!15795 = !DILocation(line: 486, column: 3, scope: !2621)
!15796 = !{!15797, !15797, i64 0}
!15797 = !{!"long long", !3842, i64 0}
!15798 = !DILocation(line: 44, column: 70, scope: !2633)
!15799 = !DILocation(line: 46, column: 12, scope: !2633)
!15800 = !DILocation(line: 46, column: 18, scope: !2633)
!15801 = !DILocation(line: 46, column: 24, scope: !2633)
!15802 = !DILocation(line: 46, column: 52, scope: !2633)
!15803 = !DILocation(line: 46, column: 58, scope: !2633)
!15804 = !DILocation(line: 46, column: 36, scope: !2633)
!15805 = !DILocation(line: 46, column: 65, scope: !2633)
!15806 = !DILocation(line: 46, column: 35, scope: !2633)
!15807 = !DILocation(line: 46, column: 33, scope: !2633)
!15808 = !DILocation(line: 46, column: 10, scope: !2633)
!15809 = !DILocation(line: 46, column: 3, scope: !2633)
!15810 = !DILocation(line: 50, column: 70, scope: !2644)
!15811 = !DILocation(line: 52, column: 11, scope: !2644)
!15812 = !DILocation(line: 52, column: 17, scope: !2644)
!15813 = !DILocation(line: 52, column: 44, scope: !2644)
!15814 = !DILocation(line: 52, column: 50, scope: !2644)
!15815 = !DILocation(line: 52, column: 28, scope: !2644)
!15816 = !DILocation(line: 52, column: 57, scope: !2644)
!15817 = !DILocation(line: 52, column: 27, scope: !2644)
!15818 = !DILocation(line: 52, column: 25, scope: !2644)
!15819 = !DILocation(line: 52, column: 10, scope: !2644)
!15820 = !DILocation(line: 52, column: 3, scope: !2644)
!15821 = !DILocation(line: 56, column: 62, scope: !2653)
!15822 = !DILocation(line: 56, column: 84, scope: !2653)
!15823 = !DILocation(line: 58, column: 12, scope: !2653)
!15824 = !DILocation(line: 58, column: 20, scope: !2653)
!15825 = !DILocation(line: 58, column: 32, scope: !2653)
!15826 = !DILocation(line: 58, column: 40, scope: !2653)
!15827 = !DILocation(line: 58, column: 49, scope: !2653)
!15828 = !DILocation(line: 58, column: 28, scope: !2653)
!15829 = !DILocation(line: 58, column: 11, scope: !2653)
!15830 = !DILocation(line: 59, column: 34, scope: !2653)
!15831 = !DILocation(line: 59, column: 42, scope: !2653)
!15832 = !DILocation(line: 59, column: 8, scope: !2653)
!15833 = !DILocation(line: 59, column: 52, scope: !2653)
!15834 = !DILocation(line: 59, column: 4, scope: !2653)
!15835 = !DILocation(line: 60, column: 34, scope: !2653)
!15836 = !DILocation(line: 60, column: 42, scope: !2653)
!15837 = !DILocation(line: 60, column: 8, scope: !2653)
!15838 = !DILocation(line: 60, column: 53, scope: !2653)
!15839 = !DILocation(line: 60, column: 4, scope: !2653)
!15840 = !DILocation(line: 58, column: 3, scope: !2653)
!15841 = !DILocation(line: 1332, column: 24, scope: !2749)
!15842 = !DILocation(line: 1332, column: 37, scope: !2749)
!15843 = !DILocation(line: 1334, column: 5, scope: !2749)
!15844 = !DILocation(line: 1334, column: 9, scope: !2749)
!15845 = !DILocation(line: 1335, column: 5, scope: !2749)
!15846 = !DILocation(line: 1335, column: 9, scope: !2749)
!15847 = !DILocation(line: 1336, column: 36, scope: !2749)
!15848 = !DILocation(line: 1336, column: 10, scope: !2749)
!15849 = !DILocation(line: 1336, column: 8, scope: !2749)
!15850 = !DILocation(line: 1337, column: 9, scope: !15851)
!15851 = distinct !DILexicalBlock(scope: !2749, file: !616, line: 1337, column: 9)
!15852 = !DILocation(line: 1337, column: 12, scope: !15851)
!15853 = !DILocation(line: 1337, column: 9, scope: !2749)
!15854 = !DILocation(line: 1338, column: 9, scope: !15851)
!15855 = !DILocation(line: 1341, column: 7, scope: !2761)
!15856 = !DILocation(line: 1341, column: 22, scope: !2761)
!15857 = !DILocation(line: 1341, column: 37, scope: !2761)
!15858 = !DILocation(line: 1341, column: 35, scope: !2761)
!15859 = !DILocation(line: 1342, column: 13, scope: !2761)
!15860 = !DILocation(line: 1342, column: 19, scope: !2761)
!15861 = !DILocation(line: 1342, column: 11, scope: !2761)
!15862 = !DILocation(line: 1342, column: 9, scope: !2761)
!15863 = !DILocation(line: 1343, column: 26, scope: !2761)
!15864 = !DILocation(line: 1343, column: 5, scope: !2761)
!15865 = !DILocation(line: 1343, column: 34, scope: !2749)
!15866 = !DILocation(line: 1344, column: 9, scope: !15867)
!15867 = distinct !DILexicalBlock(scope: !2749, file: !616, line: 1344, column: 9)
!15868 = !DILocation(line: 1344, column: 13, scope: !15867)
!15869 = !DILocation(line: 1344, column: 9, scope: !2749)
!15870 = !DILocation(line: 1345, column: 16, scope: !15867)
!15871 = !DILocation(line: 1345, column: 9, scope: !15867)
!15872 = !DILocation(line: 1346, column: 51, scope: !2749)
!15873 = !DILocation(line: 1347, column: 5, scope: !2749)
!15874 = !DILocation(line: 1348, column: 1, scope: !2749)
!15875 = !DILocation(line: 9168, column: 45, scope: !2842)
!15876 = !DILocation(line: 9169, column: 5, scope: !2842)
!15877 = !DILocation(line: 9169, column: 15, scope: !2842)
!15878 = !DILocation(line: 9169, column: 19, scope: !2842)
!15879 = !DILocation(line: 9170, column: 9, scope: !15880)
!15880 = distinct !DILexicalBlock(scope: !2842, file: !616, line: 9170, column: 9)
!15881 = !DILocation(line: 9170, column: 11, scope: !15880)
!15882 = !DILocation(line: 9170, column: 9, scope: !2842)
!15883 = !DILocation(line: 9171, column: 9, scope: !15880)
!15884 = !DILocation(line: 9174, column: 69, scope: !2842)
!15885 = !{!15886, !3894, i64 0}
!15886 = !{!"statvfs", !3894, i64 0, !3894, i64 8, !3894, i64 16, !3894, i64 24, !3894, i64 32, !3894, i64 40, !3894, i64 48, !3894, i64 56, !3894, i64 64, !3894, i64 72, !3894, i64 80, !3842, i64 88}
!15887 = !DILocation(line: 9174, column: 43, scope: !2842)
!15888 = !DILocation(line: 9174, column: 25, scope: !2842)
!15889 = !DILocation(line: 9174, column: 7, scope: !2842)
!15890 = !DILocation(line: 9174, column: 30, scope: !2842)
!15891 = !DILocation(line: 9174, column: 6, scope: !2842)
!15892 = !DILocation(line: 9174, column: 41, scope: !2842)
!15893 = !DILocation(line: 9175, column: 69, scope: !2842)
!15894 = !{!15886, !3894, i64 8}
!15895 = !DILocation(line: 9175, column: 43, scope: !2842)
!15896 = !DILocation(line: 9175, column: 25, scope: !2842)
!15897 = !DILocation(line: 9175, column: 7, scope: !2842)
!15898 = !DILocation(line: 9175, column: 30, scope: !2842)
!15899 = !DILocation(line: 9175, column: 6, scope: !2842)
!15900 = !DILocation(line: 9175, column: 41, scope: !2842)
!15901 = !DILocation(line: 9176, column: 69, scope: !2842)
!15902 = !{!15886, !3894, i64 16}
!15903 = !DILocation(line: 9176, column: 43, scope: !2842)
!15904 = !DILocation(line: 9176, column: 25, scope: !2842)
!15905 = !DILocation(line: 9176, column: 7, scope: !2842)
!15906 = !DILocation(line: 9176, column: 30, scope: !2842)
!15907 = !DILocation(line: 9176, column: 6, scope: !2842)
!15908 = !DILocation(line: 9176, column: 41, scope: !2842)
!15909 = !DILocation(line: 9177, column: 69, scope: !2842)
!15910 = !{!15886, !3894, i64 24}
!15911 = !DILocation(line: 9177, column: 43, scope: !2842)
!15912 = !DILocation(line: 9177, column: 25, scope: !2842)
!15913 = !DILocation(line: 9177, column: 7, scope: !2842)
!15914 = !DILocation(line: 9177, column: 30, scope: !2842)
!15915 = !DILocation(line: 9177, column: 6, scope: !2842)
!15916 = !DILocation(line: 9177, column: 41, scope: !2842)
!15917 = !DILocation(line: 9178, column: 69, scope: !2842)
!15918 = !{!15886, !3894, i64 32}
!15919 = !DILocation(line: 9178, column: 43, scope: !2842)
!15920 = !DILocation(line: 9178, column: 25, scope: !2842)
!15921 = !DILocation(line: 9178, column: 7, scope: !2842)
!15922 = !DILocation(line: 9178, column: 30, scope: !2842)
!15923 = !DILocation(line: 9178, column: 6, scope: !2842)
!15924 = !DILocation(line: 9178, column: 41, scope: !2842)
!15925 = !DILocation(line: 9179, column: 69, scope: !2842)
!15926 = !{!15886, !3894, i64 40}
!15927 = !DILocation(line: 9179, column: 43, scope: !2842)
!15928 = !DILocation(line: 9179, column: 25, scope: !2842)
!15929 = !DILocation(line: 9179, column: 7, scope: !2842)
!15930 = !DILocation(line: 9179, column: 30, scope: !2842)
!15931 = !DILocation(line: 9179, column: 6, scope: !2842)
!15932 = !DILocation(line: 9179, column: 41, scope: !2842)
!15933 = !DILocation(line: 9180, column: 69, scope: !2842)
!15934 = !{!15886, !3894, i64 48}
!15935 = !DILocation(line: 9180, column: 43, scope: !2842)
!15936 = !DILocation(line: 9180, column: 25, scope: !2842)
!15937 = !DILocation(line: 9180, column: 7, scope: !2842)
!15938 = !DILocation(line: 9180, column: 30, scope: !2842)
!15939 = !DILocation(line: 9180, column: 6, scope: !2842)
!15940 = !DILocation(line: 9180, column: 41, scope: !2842)
!15941 = !DILocation(line: 9181, column: 69, scope: !2842)
!15942 = !{!15886, !3894, i64 56}
!15943 = !DILocation(line: 9181, column: 43, scope: !2842)
!15944 = !DILocation(line: 9181, column: 25, scope: !2842)
!15945 = !DILocation(line: 9181, column: 7, scope: !2842)
!15946 = !DILocation(line: 9181, column: 30, scope: !2842)
!15947 = !DILocation(line: 9181, column: 6, scope: !2842)
!15948 = !DILocation(line: 9181, column: 41, scope: !2842)
!15949 = !DILocation(line: 9182, column: 69, scope: !2842)
!15950 = !{!15886, !3894, i64 72}
!15951 = !DILocation(line: 9182, column: 43, scope: !2842)
!15952 = !DILocation(line: 9182, column: 25, scope: !2842)
!15953 = !DILocation(line: 9182, column: 7, scope: !2842)
!15954 = !DILocation(line: 9182, column: 30, scope: !2842)
!15955 = !DILocation(line: 9182, column: 6, scope: !2842)
!15956 = !DILocation(line: 9182, column: 41, scope: !2842)
!15957 = !DILocation(line: 9183, column: 69, scope: !2842)
!15958 = !{!15886, !3894, i64 80}
!15959 = !DILocation(line: 9183, column: 43, scope: !2842)
!15960 = !DILocation(line: 9183, column: 25, scope: !2842)
!15961 = !DILocation(line: 9183, column: 7, scope: !2842)
!15962 = !DILocation(line: 9183, column: 30, scope: !2842)
!15963 = !DILocation(line: 9183, column: 6, scope: !2842)
!15964 = !DILocation(line: 9183, column: 41, scope: !2842)
!15965 = !DILocation(line: 9202, column: 9, scope: !2851)
!15966 = !DILocation(line: 9202, column: 9, scope: !2842)
!15967 = !DILocation(line: 9203, column: 9, scope: !2850)
!15968 = !DILocation(line: 9203, column: 14, scope: !15969)
!15969 = !DILexicalBlockFile(scope: !2849, file: !616, discriminator: 1)
!15970 = !DILocation(line: 9203, column: 24, scope: !2849)
!15971 = !DILocation(line: 9203, column: 54, scope: !2849)
!15972 = !DILocation(line: 9203, column: 66, scope: !15973)
!15973 = distinct !DILexicalBlock(scope: !2849, file: !616, line: 9203, column: 63)
!15974 = !DILocation(line: 9203, column: 83, scope: !15973)
!15975 = !DILocation(line: 9203, column: 63, scope: !15973)
!15976 = !DILocation(line: 9203, column: 93, scope: !15973)
!15977 = !DILocation(line: 9203, column: 63, scope: !2849)
!15978 = !DILocation(line: 9203, column: 63, scope: !15979)
!15979 = !DILexicalBlockFile(scope: !2849, file: !616, discriminator: 2)
!15980 = !DILocation(line: 9203, column: 124, scope: !15981)
!15981 = !DILexicalBlockFile(scope: !15973, file: !616, discriminator: 3)
!15982 = !DILocation(line: 9203, column: 142, scope: !15973)
!15983 = !DILocation(line: 9203, column: 152, scope: !15973)
!15984 = !DILocation(line: 9203, column: 177, scope: !15973)
!15985 = !DILocation(line: 9203, column: 108, scope: !15973)
!15986 = !DILocation(line: 9203, column: 196, scope: !15987)
!15987 = !DILexicalBlockFile(scope: !2850, file: !616, discriminator: 4)
!15988 = !DILocation(line: 9203, column: 196, scope: !2849)
!15989 = !DILocation(line: 9203, column: 196, scope: !15990)
!15990 = !DILexicalBlockFile(scope: !2849, file: !616, discriminator: 5)
!15991 = !DILocation(line: 9204, column: 9, scope: !2850)
!15992 = !DILocation(line: 9207, column: 12, scope: !2842)
!15993 = !DILocation(line: 9207, column: 5, scope: !2842)
!15994 = !DILocation(line: 9208, column: 1, scope: !2842)
!15995 = !DILocation(line: 9705, column: 33, scope: !2877)
!15996 = !DILocation(line: 9705, column: 43, scope: !2877)
!15997 = !DILocation(line: 9707, column: 26, scope: !2877)
!15998 = !DILocation(line: 9707, column: 31, scope: !2877)
!15999 = !DILocation(line: 9707, column: 12, scope: !2877)
!16000 = !DILocation(line: 9707, column: 5, scope: !2877)
!16001 = !DILocation(line: 9337, column: 25, scope: !2883)
!16002 = !DILocation(line: 9337, column: 35, scope: !2883)
!16003 = !DILocation(line: 9337, column: 60, scope: !2883)
!16004 = !DILocation(line: 9338, column: 22, scope: !2883)
!16005 = !DILocation(line: 9340, column: 26, scope: !2894)
!16006 = !DILocation(line: 9340, column: 33, scope: !2894)
!16007 = !DILocation(line: 9340, column: 44, scope: !2894)
!16008 = !DILocation(line: 9340, column: 53, scope: !2894)
!16009 = !DILocation(line: 9340, column: 70, scope: !2894)
!16010 = !DILocation(line: 9340, column: 9, scope: !2883)
!16011 = !DILocation(line: 9341, column: 33, scope: !16012)
!16012 = distinct !DILexicalBlock(scope: !2894, file: !616, line: 9340, column: 77)
!16013 = !DILocation(line: 9341, column: 19, scope: !16012)
!16014 = !DILocation(line: 9341, column: 10, scope: !16012)
!16015 = !DILocation(line: 9341, column: 17, scope: !16012)
!16016 = !DILocation(line: 9342, column: 9, scope: !16012)
!16017 = !DILocation(line: 9346, column: 9, scope: !2893)
!16018 = !DILocation(line: 9346, column: 16, scope: !2893)
!16019 = !DILocation(line: 9347, column: 9, scope: !2893)
!16020 = !DILocation(line: 9347, column: 16, scope: !2893)
!16021 = !DILocation(line: 9348, column: 9, scope: !2893)
!16022 = !DILocation(line: 9348, column: 16, scope: !2893)
!16023 = !DILocation(line: 9348, column: 21, scope: !2893)
!16024 = !DILocation(line: 9349, column: 9, scope: !2893)
!16025 = !DILocation(line: 9349, column: 13, scope: !2893)
!16026 = !DILocation(line: 9350, column: 9, scope: !2893)
!16027 = !DILocation(line: 9350, column: 21, scope: !2893)
!16028 = !DILocation(line: 9351, column: 31, scope: !16029)
!16029 = distinct !DILexicalBlock(scope: !2893, file: !616, line: 9351, column: 13)
!16030 = !DILocation(line: 9351, column: 38, scope: !16029)
!16031 = !DILocation(line: 9351, column: 49, scope: !16029)
!16032 = !DILocation(line: 9351, column: 58, scope: !16029)
!16033 = !DILocation(line: 9351, column: 75, scope: !16029)
!16034 = !DILocation(line: 9351, column: 13, scope: !2893)
!16035 = !DILocation(line: 9352, column: 29, scope: !16036)
!16036 = distinct !DILexicalBlock(scope: !16029, file: !616, line: 9351, column: 82)
!16037 = !DILocation(line: 9352, column: 13, scope: !16036)
!16038 = !DILocation(line: 9354, column: 13, scope: !16036)
!16039 = !DILocation(line: 9356, column: 37, scope: !2893)
!16040 = !DILocation(line: 9356, column: 20, scope: !2893)
!16041 = !DILocation(line: 9356, column: 18, scope: !2893)
!16042 = !DILocation(line: 9357, column: 13, scope: !16043)
!16043 = distinct !DILexicalBlock(scope: !2893, file: !616, line: 9357, column: 13)
!16044 = !DILocation(line: 9357, column: 22, scope: !16043)
!16045 = !DILocation(line: 9357, column: 13, scope: !2893)
!16046 = !DILocation(line: 9358, column: 13, scope: !16043)
!16047 = !DILocation(line: 9359, column: 9, scope: !2893)
!16048 = !DILocation(line: 9359, column: 16, scope: !16049)
!16049 = !DILexicalBlockFile(scope: !16050, file: !616, discriminator: 2)
!16050 = !DILexicalBlockFile(scope: !2893, file: !616, discriminator: 1)
!16051 = !DILocation(line: 9359, column: 21, scope: !2893)
!16052 = !DILocation(line: 9359, column: 19, scope: !2893)
!16053 = !DILocation(line: 9360, column: 20, scope: !2901)
!16054 = !DILocation(line: 9360, column: 25, scope: !2901)
!16055 = !DILocation(line: 9360, column: 23, scope: !2901)
!16056 = !DILocation(line: 9360, column: 29, scope: !2901)
!16057 = !DILocation(line: 9360, column: 17, scope: !2901)
!16058 = !DILocation(line: 9361, column: 36, scope: !2900)
!16059 = !DILocation(line: 9361, column: 43, scope: !2900)
!16060 = !DILocation(line: 9361, column: 53, scope: !2900)
!16061 = !DILocation(line: 9361, column: 2356, scope: !2900)
!16062 = !DILocation(line: 9361, column: 2372, scope: !2900)
!16063 = !DILocation(line: 9361, column: 2366, scope: !2900)
!16064 = !DILocation(line: 9361, column: 2377, scope: !2900)
!16065 = !{!16066, !3868, i64 0}
!16066 = !{!"constdef", !3868, i64 0, !3894, i64 8}
!16067 = !DILocation(line: 9361, column: 2338, scope: !2900)
!16068 = !DILocation(line: 9361, column: 2387, scope: !2901)
!16069 = !DILocation(line: 9361, column: 2387, scope: !2900)
!16070 = !DILocation(line: 9361, column: 17, scope: !2901)
!16071 = !DILocation(line: 9362, column: 17, scope: !16072)
!16072 = distinct !DILexicalBlock(scope: !2901, file: !616, line: 9362, column: 17)
!16073 = !DILocation(line: 9362, column: 21, scope: !16072)
!16074 = !DILocation(line: 9362, column: 17, scope: !2901)
!16075 = !DILocation(line: 9363, column: 22, scope: !16072)
!16076 = !DILocation(line: 9363, column: 20, scope: !16072)
!16077 = !DILocation(line: 9363, column: 17, scope: !16072)
!16078 = !DILocation(line: 9364, column: 22, scope: !16079)
!16079 = distinct !DILexicalBlock(scope: !16072, file: !616, line: 9364, column: 22)
!16080 = !DILocation(line: 9364, column: 26, scope: !16079)
!16081 = !DILocation(line: 9364, column: 22, scope: !16072)
!16082 = !DILocation(line: 9365, column: 22, scope: !16079)
!16083 = !DILocation(line: 9365, column: 26, scope: !16079)
!16084 = !DILocation(line: 9365, column: 20, scope: !16079)
!16085 = !DILocation(line: 9365, column: 17, scope: !16079)
!16086 = !DILocation(line: 9367, column: 33, scope: !16087)
!16087 = distinct !DILexicalBlock(scope: !16079, file: !616, line: 9366, column: 18)
!16088 = !DILocation(line: 9367, column: 27, scope: !16087)
!16089 = !DILocation(line: 9367, column: 38, scope: !16087)
!16090 = !{!16066, !3894, i64 8}
!16091 = !DILocation(line: 9367, column: 18, scope: !16087)
!16092 = !DILocation(line: 9367, column: 25, scope: !16087)
!16093 = !DILocation(line: 9368, column: 17, scope: !16087)
!16094 = !DILocation(line: 9371, column: 25, scope: !2893)
!16095 = !DILocation(line: 9371, column: 9, scope: !2893)
!16096 = !DILocation(line: 9372, column: 9, scope: !2893)
!16097 = !DILocation(line: 9373, column: 5, scope: !2894)
!16098 = !DILocation(line: 9374, column: 1, scope: !2883)
!16099 = !DILocation(line: 10251, column: 33, scope: !2912)
!16100 = !DILocation(line: 10251, column: 43, scope: !2912)
!16101 = !DILocation(line: 10253, column: 26, scope: !2912)
!16102 = !DILocation(line: 10253, column: 31, scope: !2912)
!16103 = !DILocation(line: 10253, column: 12, scope: !2912)
!16104 = !DILocation(line: 10253, column: 5, scope: !2912)
!16105 = !DILocation(line: 9466, column: 30, scope: !2926)
!16106 = !DILocation(line: 9466, column: 40, scope: !2926)
!16107 = !DILocation(line: 9468, column: 26, scope: !2926)
!16108 = !DILocation(line: 9468, column: 31, scope: !2926)
!16109 = !DILocation(line: 9468, column: 12, scope: !2926)
!16110 = !DILocation(line: 9468, column: 5, scope: !2926)
!16111 = !DILocation(line: 10305, column: 39, scope: !3137)
!16112 = !DILocation(line: 10305, column: 53, scope: !3137)
!16113 = !DILocation(line: 10306, column: 28, scope: !3137)
!16114 = !DILocation(line: 10306, column: 49, scope: !3137)
!16115 = !DILocation(line: 10308, column: 5, scope: !3137)
!16116 = !DILocation(line: 10308, column: 15, scope: !3137)
!16117 = !DILocation(line: 10309, column: 5, scope: !3137)
!16118 = !DILocation(line: 10309, column: 12, scope: !3137)
!16119 = !DILocation(line: 10311, column: 11, scope: !3137)
!16120 = !DILocation(line: 10311, column: 18, scope: !3137)
!16121 = !DILocation(line: 10311, column: 5, scope: !3137)
!16122 = !DILocation(line: 10312, column: 9, scope: !3137)
!16123 = !DILocation(line: 10312, column: 7, scope: !3137)
!16124 = !DILocation(line: 10313, column: 9, scope: !16125)
!16125 = distinct !DILexicalBlock(scope: !3137, file: !616, line: 10313, column: 9)
!16126 = !DILocation(line: 10313, column: 11, scope: !16125)
!16127 = !DILocation(line: 10313, column: 9, scope: !3137)
!16128 = !DILocation(line: 10314, column: 9, scope: !16125)
!16129 = !DILocation(line: 10316, column: 11, scope: !3150)
!16130 = !DILocation(line: 10316, column: 10, scope: !3150)
!16131 = !DILocation(line: 10316, column: 15, scope: !16132)
!16132 = !DILexicalBlockFile(scope: !16133, file: !616, discriminator: 2)
!16133 = !DILexicalBlockFile(scope: !3149, file: !616, discriminator: 1)
!16134 = !DILocation(line: 10316, column: 19, scope: !3149)
!16135 = !DILocation(line: 10316, column: 17, scope: !3149)
!16136 = !DILocation(line: 10316, column: 5, scope: !3150)
!16137 = !DILocation(line: 10317, column: 9, scope: !3148)
!16138 = !DILocation(line: 10317, column: 19, scope: !3148)
!16139 = !DILocation(line: 10317, column: 45, scope: !3148)
!16140 = !DILocation(line: 10317, column: 39, scope: !3148)
!16141 = !DILocation(line: 10317, column: 48, scope: !3148)
!16142 = !DILocation(line: 10317, column: 23, scope: !3148)
!16143 = !DILocation(line: 10318, column: 13, scope: !3154)
!16144 = !DILocation(line: 10318, column: 15, scope: !3154)
!16145 = !DILocation(line: 10318, column: 29, scope: !3154)
!16146 = !DILocation(line: 10318, column: 53, scope: !16147)
!16147 = !DILexicalBlockFile(scope: !3154, file: !616, discriminator: 1)
!16148 = !DILocation(line: 10318, column: 62, scope: !3154)
!16149 = !DILocation(line: 10318, column: 56, scope: !3154)
!16150 = !DILocation(line: 10318, column: 65, scope: !3154)
!16151 = !DILocation(line: 10318, column: 71, scope: !3154)
!16152 = !DILocation(line: 10318, column: 32, scope: !3154)
!16153 = !DILocation(line: 10318, column: 74, scope: !3154)
!16154 = !DILocation(line: 10318, column: 13, scope: !3148)
!16155 = !DILocation(line: 10319, column: 13, scope: !3153)
!16156 = !DILocation(line: 10319, column: 18, scope: !16157)
!16157 = !DILexicalBlockFile(scope: !3152, file: !616, discriminator: 1)
!16158 = !DILocation(line: 10319, column: 28, scope: !3152)
!16159 = !DILocation(line: 10319, column: 59, scope: !3152)
!16160 = !DILocation(line: 10319, column: 67, scope: !3157)
!16161 = !DILocation(line: 10319, column: 83, scope: !3157)
!16162 = !DILocation(line: 10319, column: 67, scope: !3152)
!16163 = !DILocation(line: 10319, column: 98, scope: !16164)
!16164 = !DILexicalBlockFile(scope: !3157, file: !616, discriminator: 2)
!16165 = !DILocation(line: 10319, column: 103, scope: !16166)
!16166 = !DILexicalBlockFile(scope: !3156, file: !616, discriminator: 4)
!16167 = !DILocation(line: 10319, column: 113, scope: !3156)
!16168 = !DILocation(line: 10319, column: 143, scope: !3156)
!16169 = !DILocation(line: 10319, column: 169, scope: !16170)
!16170 = distinct !DILexicalBlock(scope: !3156, file: !616, line: 10319, column: 166)
!16171 = !DILocation(line: 10319, column: 186, scope: !16170)
!16172 = !DILocation(line: 10319, column: 166, scope: !16170)
!16173 = !DILocation(line: 10319, column: 196, scope: !16170)
!16174 = !DILocation(line: 10319, column: 166, scope: !3156)
!16175 = !DILocation(line: 10319, column: 166, scope: !16176)
!16176 = !DILexicalBlockFile(scope: !3156, file: !616, discriminator: 5)
!16177 = !DILocation(line: 10319, column: 227, scope: !16178)
!16178 = !DILexicalBlockFile(scope: !16170, file: !616, discriminator: 6)
!16179 = !DILocation(line: 10319, column: 245, scope: !16170)
!16180 = !DILocation(line: 10319, column: 255, scope: !16170)
!16181 = !DILocation(line: 10319, column: 280, scope: !16170)
!16182 = !DILocation(line: 10319, column: 211, scope: !16170)
!16183 = !DILocation(line: 10319, column: 299, scope: !16184)
!16184 = !DILexicalBlockFile(scope: !3157, file: !616, discriminator: 7)
!16185 = !DILocation(line: 10319, column: 299, scope: !3156)
!16186 = !DILocation(line: 10319, column: 299, scope: !16187)
!16187 = !DILexicalBlockFile(scope: !3156, file: !616, discriminator: 8)
!16188 = !DILocation(line: 10319, column: 299, scope: !16189)
!16189 = !DILexicalBlockFile(scope: !3156, file: !616, discriminator: 9)
!16190 = !DILocation(line: 10319, column: 312, scope: !16191)
!16191 = !DILexicalBlockFile(scope: !16192, file: !616, discriminator: 10)
!16192 = !DILexicalBlockFile(scope: !3153, file: !616, discriminator: 3)
!16193 = !DILocation(line: 10319, column: 312, scope: !3152)
!16194 = !DILocation(line: 10319, column: 312, scope: !16195)
!16195 = !DILexicalBlockFile(scope: !3152, file: !616, discriminator: 11)
!16196 = !DILocation(line: 10320, column: 13, scope: !3153)
!16197 = !DILocation(line: 10320, column: 18, scope: !16198)
!16198 = !DILexicalBlockFile(scope: !3159, file: !616, discriminator: 1)
!16199 = !DILocation(line: 10320, column: 28, scope: !3159)
!16200 = !DILocation(line: 10320, column: 58, scope: !3159)
!16201 = !DILocation(line: 10320, column: 70, scope: !16202)
!16202 = distinct !DILexicalBlock(scope: !3159, file: !616, line: 10320, column: 67)
!16203 = !DILocation(line: 10320, column: 87, scope: !16202)
!16204 = !DILocation(line: 10320, column: 67, scope: !16202)
!16205 = !DILocation(line: 10320, column: 97, scope: !16202)
!16206 = !DILocation(line: 10320, column: 67, scope: !3159)
!16207 = !DILocation(line: 10320, column: 67, scope: !16208)
!16208 = !DILexicalBlockFile(scope: !3159, file: !616, discriminator: 2)
!16209 = !DILocation(line: 10320, column: 128, scope: !16210)
!16210 = !DILexicalBlockFile(scope: !16202, file: !616, discriminator: 3)
!16211 = !DILocation(line: 10320, column: 146, scope: !16202)
!16212 = !DILocation(line: 10320, column: 156, scope: !16202)
!16213 = !DILocation(line: 10320, column: 181, scope: !16202)
!16214 = !DILocation(line: 10320, column: 112, scope: !16202)
!16215 = !DILocation(line: 10320, column: 200, scope: !16216)
!16216 = !DILexicalBlockFile(scope: !3153, file: !616, discriminator: 4)
!16217 = !DILocation(line: 10320, column: 200, scope: !3159)
!16218 = !DILocation(line: 10320, column: 200, scope: !16219)
!16219 = !DILexicalBlockFile(scope: !3159, file: !616, discriminator: 5)
!16220 = !DILocation(line: 10321, column: 13, scope: !3153)
!16221 = !DILocation(line: 10323, column: 9, scope: !3148)
!16222 = !DILocation(line: 10323, column: 14, scope: !16223)
!16223 = !DILexicalBlockFile(scope: !3161, file: !616, discriminator: 1)
!16224 = !DILocation(line: 10323, column: 24, scope: !3161)
!16225 = !DILocation(line: 10323, column: 54, scope: !3161)
!16226 = !DILocation(line: 10323, column: 66, scope: !16227)
!16227 = distinct !DILexicalBlock(scope: !3161, file: !616, line: 10323, column: 63)
!16228 = !DILocation(line: 10323, column: 83, scope: !16227)
!16229 = !DILocation(line: 10323, column: 63, scope: !16227)
!16230 = !DILocation(line: 10323, column: 93, scope: !16227)
!16231 = !DILocation(line: 10323, column: 63, scope: !3161)
!16232 = !DILocation(line: 10323, column: 63, scope: !16233)
!16233 = !DILexicalBlockFile(scope: !3161, file: !616, discriminator: 2)
!16234 = !DILocation(line: 10323, column: 124, scope: !16235)
!16235 = !DILexicalBlockFile(scope: !16227, file: !616, discriminator: 3)
!16236 = !DILocation(line: 10323, column: 142, scope: !16227)
!16237 = !DILocation(line: 10323, column: 152, scope: !16227)
!16238 = !DILocation(line: 10323, column: 177, scope: !16227)
!16239 = !DILocation(line: 10323, column: 108, scope: !16227)
!16240 = !DILocation(line: 10323, column: 196, scope: !16241)
!16241 = !DILexicalBlockFile(scope: !3148, file: !616, discriminator: 4)
!16242 = !DILocation(line: 10323, column: 196, scope: !3161)
!16243 = !DILocation(line: 10323, column: 196, scope: !16244)
!16244 = !DILexicalBlockFile(scope: !3161, file: !616, discriminator: 5)
!16245 = !DILocation(line: 10324, column: 5, scope: !3149)
!16246 = !DILocation(line: 10324, column: 5, scope: !16133)
!16247 = !DILocation(line: 10324, column: 5, scope: !3148)
!16248 = !DILocation(line: 10316, column: 30, scope: !3149)
!16249 = !DILocation(line: 10316, column: 5, scope: !3149)
!16250 = !DILocation(line: 10325, column: 31, scope: !3137)
!16251 = !DILocation(line: 10325, column: 39, scope: !3137)
!16252 = !DILocation(line: 10325, column: 50, scope: !3137)
!16253 = !DILocation(line: 10325, column: 12, scope: !3137)
!16254 = !DILocation(line: 10325, column: 5, scope: !3137)
!16255 = !DILocation(line: 10326, column: 1, scope: !3137)
!16256 = !DILocation(line: 10294, column: 27, scope: !3162)
!16257 = !DILocation(line: 10294, column: 43, scope: !3162)
!16258 = !DILocation(line: 10296, column: 5, scope: !3162)
!16259 = !DILocation(line: 10296, column: 28, scope: !3162)
!16260 = !DILocation(line: 10297, column: 31, scope: !3162)
!16261 = !DILocation(line: 10297, column: 5, scope: !3162)
!16262 = !DILocation(line: 10298, column: 5, scope: !3162)
!16263 = !DILocation(line: 10298, column: 28, scope: !3162)
!16264 = !DILocation(line: 10299, column: 31, scope: !3162)
!16265 = !DILocation(line: 10299, column: 5, scope: !3162)
!16266 = !DILocation(line: 10301, column: 29, scope: !3173)
!16267 = !DILocation(line: 10301, column: 36, scope: !3173)
!16268 = !DILocation(line: 10301, column: 46, scope: !3173)
!16269 = !DILocation(line: 10301, column: 2216, scope: !3173)
!16270 = !DILocation(line: 10301, column: 2220, scope: !3173)
!16271 = !DILocation(line: 10301, column: 2226, scope: !3173)
!16272 = !DILocation(line: 10301, column: 2230, scope: !3173)
!16273 = !DILocation(line: 10301, column: 2198, scope: !3173)
!16274 = !DILocation(line: 10301, column: 2240, scope: !3162)
!16275 = !DILocation(line: 10301, column: 2240, scope: !3173)
!16276 = !DILocation(line: 10302, column: 1, scope: !3162)
!16277 = !DILocation(line: 10301, column: 5, scope: !3162)
!16278 = !DILocation(line: 916, column: 34, scope: !3204)
!16279 = !DILocation(line: 916, column: 55, scope: !3204)
!16280 = !DILocation(line: 917, column: 18, scope: !3204)
!16281 = !DILocation(line: 919, column: 10, scope: !3204)
!16282 = !DILocation(line: 919, column: 24, scope: !3204)
!16283 = !DILocation(line: 919, column: 9, scope: !3204)
!16284 = !DILocation(line: 919, column: 41, scope: !16285)
!16285 = !DILexicalBlockFile(scope: !3204, file: !616, discriminator: 1)
!16286 = !DILocation(line: 919, column: 9, scope: !16287)
!16287 = !DILexicalBlockFile(scope: !3204, file: !616, discriminator: 2)
!16288 = !DILocation(line: 920, column: 10, scope: !3204)
!16289 = !DILocation(line: 920, column: 24, scope: !3204)
!16290 = !DILocation(line: 920, column: 9, scope: !3204)
!16291 = !DILocation(line: 921, column: 9, scope: !3204)
!16292 = !DILocation(line: 917, column: 5, scope: !3204)
!16293 = !DILocation(line: 922, column: 1, scope: !3204)
