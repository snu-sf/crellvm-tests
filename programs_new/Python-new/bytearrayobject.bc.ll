; ModuleID = 'programs_new/Python-new/bytearrayobject.bc.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._object = type { i64, %struct._typeobject* }
%struct._typeobject = type { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, {}*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, {}*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, {}*, {}*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }
%struct.PyVarObject = type { %struct._object, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.PyNumberMethods = type { %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, {}*, {}*, {}*, i32 (%struct._object*)*, {}*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, {}*, i8*, {}*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, {}* }
%struct.PySequenceMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)*, i8*, i32 (%struct._object*, i64, %struct._object*)*, i8*, i32 (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)* }
%struct.PyMappingMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)* }
%struct.PyBufferProcs = type { i32 (%struct._object*, %struct.bufferinfo*, i32)*, void (%struct._object*, %struct.bufferinfo*)* }
%struct.bufferinfo = type { i8*, %struct._object*, i64, i64, i32, i32, i8*, i64*, i64*, i64*, i8* }
%struct.PyMethodDef = type { i8*, %struct._object* (%struct._object*, %struct._object*)*, i32, i8* }
%struct.PyMemberDef = type { i8*, i32, i64, i32, i8* }
%struct.PyGetSetDef = type { i8*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, %struct._object*, i8*)*, i8*, i8* }
%struct._longobject = type { %struct.PyVarObject, [1 x i32] }
%struct._Py_Identifier = type { %struct._Py_Identifier*, i8*, %struct._object* }
%union._gc_head = type { %struct.anon.0 }
%struct.anon.0 = type { %union._gc_head*, %union._gc_head*, i64 }
%struct.PyByteArrayObject = type { %struct.PyVarObject, i64, i8*, i8*, i32 }
%struct.bytesiterobject = type { %struct._object, i64, %struct.PyByteArrayObject* }
%struct.PyTupleObject = type { %struct.PyVarObject, [1 x %struct._object*] }
%struct.PyASCIIObject = type { %struct._object, i64, i64, %struct.anon, i32* }
%struct.anon = type { i32 }
%struct.PyCompactUnicodeObject = type { %struct.PyASCIIObject, i64, i8*, i64 }
%struct.PyUnicodeObject = type { %struct.PyCompactUnicodeObject, %union.anon }
%union.anon = type { i8* }
%struct.PyListObject = type { %struct.PyVarObject, %struct._object**, i64 }

@_PyByteArray_empty_string = global [1 x i8] zeroinitializer, align 1
@PyExc_SystemError = external global %struct._object*, align 8
@.str = private unnamed_addr constant [54 x i8] c"Negative size passed to PyByteArray_FromStringAndSize\00", align 1
@PyExc_TypeError = external global %struct._object*, align 8
@.str.1 = private unnamed_addr constant [30 x i8] c"can't concat %.100s to %.100s\00", align 1
@PyType_Type = external global %struct._typeobject, align 8
@.str.2 = private unnamed_addr constant [10 x i8] c"bytearray\00", align 1
@bytearray_as_sequence = internal global %struct.PySequenceMethods { i64 (%struct._object*)* bitcast (i64 (%struct.PyByteArrayObject*)* @bytearray_length to i64 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*)* @PyByteArray_Concat, %struct._object* (%struct._object*, i64)* bitcast (%struct._object* (%struct.PyByteArrayObject*, i64)* @bytearray_repeat to %struct._object* (%struct._object*, i64)*), %struct._object* (%struct._object*, i64)* bitcast (%struct._object* (%struct.PyByteArrayObject*, i64)* @bytearray_getitem to %struct._object* (%struct._object*, i64)*), i8* null, i32 (%struct._object*, i64, %struct._object*)* bitcast (i32 (%struct.PyByteArrayObject*, i64, %struct._object*)* @bytearray_setitem to i32 (%struct._object*, i64, %struct._object*)*), i8* null, i32 (%struct._object*, %struct._object*)* @bytearray_contains, %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_iconcat to %struct._object* (%struct._object*, %struct._object*)*), %struct._object* (%struct._object*, i64)* bitcast (%struct._object* (%struct.PyByteArrayObject*, i64)* @bytearray_irepeat to %struct._object* (%struct._object*, i64)*) }, align 8
@bytearray_as_mapping = internal global %struct.PyMappingMethods { i64 (%struct._object*)* bitcast (i64 (%struct.PyByteArrayObject*)* @bytearray_length to i64 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_subscript to %struct._object* (%struct._object*, %struct._object*)*), i32 (%struct._object*, %struct._object*, %struct._object*)* bitcast (i32 (%struct.PyByteArrayObject*, %struct._object*, %struct._object*)* @bytearray_ass_subscript to i32 (%struct._object*, %struct._object*, %struct._object*)*) }, align 8
@bytearray_as_buffer = internal global %struct.PyBufferProcs { i32 (%struct._object*, %struct.bufferinfo*, i32)* bitcast (i32 (%struct.PyByteArrayObject*, %struct.bufferinfo*, i32)* @bytearray_getbuffer to i32 (%struct._object*, %struct.bufferinfo*, i32)*), void (%struct._object*, %struct.bufferinfo*)* bitcast (void (%struct.PyByteArrayObject*, %struct.bufferinfo*)* @bytearray_releasebuffer to void (%struct._object*, %struct.bufferinfo*)*) }, align 8
@bytearray_doc = internal global [514 x i8] c"bytearray(iterable_of_ints) -> bytearray\0Abytearray(string, encoding[, errors]) -> bytearray\0Abytearray(bytes_or_buffer) -> mutable copy of bytes_or_buffer\0Abytearray(int) -> bytes array of size given by the parameter initialized with null bytes\0Abytearray() -> empty bytes array\0A\0AConstruct an mutable bytearray object from:\0A  - an iterable yielding integers in range(256)\0A  - a text string encoded using the specified encoding\0A  - a bytes or a buffer object\0A  - any object implementing the buffer API.\0A  - an integer\00", align 16
@bytearray_methods = internal global [51 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*)* @bytearray_alloc to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @alloc_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*)* @bytearray_reduce to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @reduce_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_reduce_ex to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @reduce_ex_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*)* @bytearray_sizeof to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @sizeof_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_append to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @append__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.26, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @stringlib_capitalize to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_Py_capitalize__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @stringlib_center, i32 1, i8* getelementptr inbounds ([163 x i8], [163 x i8]* @center__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.28, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*)* @bytearray_clear to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @clear__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*)* @bytearray_copy to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @copy__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_count to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([199 x i8], [199 x i8]* @count__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @bytearray_decode to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([429 x i8], [429 x i8]* @decode_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_endswith to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([264 x i8], [264 x i8]* @endswith__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @stringlib_expandtabs to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([173 x i8], [173 x i8]* @expandtabs__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_extend to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([107 x i8], [107 x i8]* @extend__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_find to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([239 x i8], [239 x i8]* @find__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @bytearray_fromhex, i32 17, i8* getelementptr inbounds ([230 x i8], [230 x i8]* @fromhex_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_index to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([106 x i8], [106 x i8]* @index__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_insert to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @insert__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.39, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @stringlib_isalnum to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_Py_isalnum__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.40, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @stringlib_isalpha to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_Py_isalpha__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.41, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @stringlib_isdigit to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_Py_isdigit__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @stringlib_islower to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_Py_islower__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.43, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @stringlib_isspace to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_Py_isspace__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @stringlib_istitle to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_Py_istitle__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @stringlib_isupper to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_Py_isupper__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @bytearray_join, i32 8, i8* getelementptr inbounds ([162 x i8], [162 x i8]* @join_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @stringlib_ljust, i32 1, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @ljust__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @stringlib_lower to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_Py_lower__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_lstrip to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([180 x i8], [180 x i8]* @lstrip__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @bytearray_maketrans, i32 33, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_Py_maketrans__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.51, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_partition to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @partition__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.52, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_pop to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([119 x i8], [119 x i8]* @pop__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.53, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_remove to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @remove__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.54, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_replace to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([207 x i8], [207 x i8]* @replace__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.55, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_reverse to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @reverse__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.56, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_rfind to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([241 x i8], [241 x i8]* @rfind__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_rindex to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @rindex__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @stringlib_rjust, i32 1, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @rjust__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.59, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_rpartition to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([252 x i8], [252 x i8]* @rpartition__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*, %struct._object*)* @bytearray_rsplit to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([344 x i8], [344 x i8]* @rsplit__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.61, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_rstrip to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([182 x i8], [182 x i8]* @rstrip__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.62, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*, %struct._object*)* @bytearray_split to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([292 x i8], [292 x i8]* @split__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.63, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @bytearray_splitlines to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([191 x i8], [191 x i8]* @splitlines__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_startswith to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([268 x i8], [268 x i8]* @startswith__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_strip to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([184 x i8], [184 x i8]* @strip__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.66, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @stringlib_swapcase to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_Py_swapcase__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.67, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @stringlib_title to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_Py_title__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_translate to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([276 x i8], [276 x i8]* @translate__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.69, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @stringlib_upper to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_Py_upper__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.70, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @stringlib_zfill, i32 1, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @zfill__doc__, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@PyByteArray_Type = global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* @PyType_Type }, i64 0 }, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i32 0, i32 0), i64 56, i64 0, void (%struct._object*)* bitcast (void (%struct.PyByteArrayObject*)* @bytearray_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyByteArrayObject*)* @bytearray_repr to %struct._object* (%struct._object*)*), %struct.PyNumberMethods* null, %struct.PySequenceMethods* @bytearray_as_sequence, %struct.PyMappingMethods* @bytearray_as_mapping, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* @bytearray_str, %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* @bytearray_as_buffer, i64 263168, i8* getelementptr inbounds ([514 x i8], [514 x i8]* @bytearray_doc, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* @bytearray_richcompare, i64 0, %struct._object* (%struct._object*)* @bytearray_iter, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([51 x %struct.PyMethodDef], [51 x %struct.PyMethodDef]* @bytearray_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* bitcast (i32 (%struct.PyByteArrayObject*, %struct._object*, %struct._object*)* @bytearray_init to i32 (%struct._object*, %struct._object*, %struct._object*)*), %struct._object* (%struct._typeobject*, i64)* @PyType_GenericAlloc, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @PyType_GenericNew, void (i8*)* @PyObject_Free, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.3 = private unnamed_addr constant [19 x i8] c"bytearray_iterator\00", align 1
@bytearrayiter_methods = internal global [4 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.124, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.bytesiterobject*)* @bytearrayiter_length_hint to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @length_hint_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.bytesiterobject*)* @bytearrayiter_reduce to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @reduce_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.125, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.bytesiterobject*, %struct._object*)* @bytearrayiter_setstate to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @setstate_doc, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@PyByteArrayIter_Type = global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* @PyType_Type }, i64 0 }, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0), i64 32, i64 0, void (%struct._object*)* bitcast (void (%struct.bytesiterobject*)* @bytearrayiter_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 278528, i8* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.bytesiterobject*, i32 (%struct._object*, i8*)*, i8*)* @bytearrayiter_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* @PyObject_SelfIter, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.bytesiterobject*)* @bytearrayiter_next to %struct._object* (%struct._object*)*), %struct.PyMethodDef* getelementptr inbounds ([4 x %struct.PyMethodDef], [4 x %struct.PyMethodDef]* @bytearrayiter_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* null, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@PyExc_BufferError = external global %struct._object*, align 8
@.str.4 = private unnamed_addr constant [52 x i8] c"Existing exports of data: object cannot be re-sized\00", align 1
@.str.5 = private unnamed_addr constant [43 x i8] c"Type %.100s doesn't support the buffer API\00", align 1
@.str.6 = private unnamed_addr constant [50 x i8] c"deallocated bytearray object has exported buffers\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"bytearray(b\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c")\00", align 1
@PyExc_OverflowError = external global %struct._object*, align 8
@.str.9 = private unnamed_addr constant [43 x i8] c"bytearray object is too large to make repr\00", align 1
@Py_hexdigits = external global i8*, align 8
@PyExc_IndexError = external global %struct._object*, align 8
@.str.10 = private unnamed_addr constant [29 x i8] c"bytearray index out of range\00", align 1
@.str.11 = private unnamed_addr constant [38 x i8] c"can't set bytearray slice from %.100s\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"an integer is required\00", align 1
@PyExc_ValueError = external global %struct._object*, align 8
@.str.13 = private unnamed_addr constant [30 x i8] c"byte must be in range(0, 256)\00", align 1
@PySlice_Type = external global %struct._typeobject, align 8
@.str.14 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.15 = private unnamed_addr constant [35 x i8] c"bytearray indices must be integers\00", align 1
@.str.16 = private unnamed_addr constant [34 x i8] c"bytearray indices must be integer\00", align 1
@.str.17 = private unnamed_addr constant [70 x i8] c"can assign only bytes, buffers, or iterables of ints in range(0, 256)\00", align 1
@.str.18 = private unnamed_addr constant [66 x i8] c"attempt to assign bytes of size %zd to extended slice of size %zd\00", align 1
@Py_BytesWarningFlag = external global i32, align 4
@PyExc_BytesWarning = external global %struct._object*, align 8
@.str.19 = private unnamed_addr constant [30 x i8] c"str() on a bytearray instance\00", align 1
@PyUnicode_Type = external global %struct._typeobject, align 8
@.str.20 = private unnamed_addr constant [40 x i8] c"Comparison between bytearray and string\00", align 1
@_Py_NotImplementedStruct = external global %struct._object, align 8
@_Py_TrueStruct = external global %struct._longobject, align 8
@_Py_FalseStruct = external global %struct._longobject, align 8
@.str.21 = private unnamed_addr constant [10 x i8] c"__alloc__\00", align 1
@alloc_doc = internal global [69 x i8] c"B.__alloc__() -> int\0A\0AReturn the number of bytes actually allocated.\00", align 16
@.str.22 = private unnamed_addr constant [11 x i8] c"__reduce__\00", align 1
@reduce_doc = internal global [39 x i8] c"Return state information for pickling.\00", align 16
@.str.23 = private unnamed_addr constant [14 x i8] c"__reduce_ex__\00", align 1
@reduce_ex_doc = internal global [39 x i8] c"Return state information for pickling.\00", align 16
@.str.24 = private unnamed_addr constant [11 x i8] c"__sizeof__\00", align 1
@sizeof_doc = internal global [66 x i8] c"B.__sizeof__() -> int\0A \0AReturns the size of B in memory, in bytes\00", align 16
@.str.25 = private unnamed_addr constant [7 x i8] c"append\00", align 1
@append__doc__ = internal global [61 x i8] c"B.append(int) -> None\0A\0AAppend a single item to the end of B.\00", align 16
@.str.26 = private unnamed_addr constant [11 x i8] c"capitalize\00", align 1
@_Py_capitalize__doc__ = external constant [0 x i8], align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"center\00", align 1
@center__doc__ = internal global [163 x i8] c"B.center(width[, fillchar]) -> copy of B\0A\0AReturn B centered in a string of length width.  Padding is\0Adone using the specified fill character (default is a space).\00", align 16
@.str.28 = private unnamed_addr constant [6 x i8] c"clear\00", align 1
@clear__doc__ = internal global [44 x i8] c"B.clear() -> None\0A\0ARemove all items from B.\00", align 16
@.str.29 = private unnamed_addr constant [5 x i8] c"copy\00", align 1
@copy__doc__ = internal global [43 x i8] c"B.copy() -> bytearray\0A\0AReturn a copy of B.\00", align 16
@.str.30 = private unnamed_addr constant [6 x i8] c"count\00", align 1
@count__doc__ = internal global [199 x i8] c"B.count(sub[, start[, end]]) -> int\0A\0AReturn the number of non-overlapping occurrences of subsection sub in\0Abytes B[start:end].  Optional arguments start and end are interpreted\0Aas in slice notation.\00", align 16
@.str.31 = private unnamed_addr constant [7 x i8] c"decode\00", align 1
@decode_doc = internal global [429 x i8] c"B.decode(encoding='utf-8', errors='strict') -> str\0A\0ADecode B using the codec registered for encoding. Default encoding\0Ais 'utf-8'. errors may be given to set a different error\0Ahandling scheme.  Default is 'strict' meaning that encoding errors raise\0Aa UnicodeDecodeError.  Other possible values are 'ignore' and 'replace'\0Aas well as any other name registered with codecs.register_error that is\0Aable to handle UnicodeDecodeErrors.\00", align 16
@.str.32 = private unnamed_addr constant [9 x i8] c"endswith\00", align 1
@endswith__doc__ = internal global [264 x i8] c"B.endswith(suffix[, start[, end]]) -> bool\0A\0AReturn True if B ends with the specified suffix, False otherwise.\0AWith optional start, test B beginning at that position.\0AWith optional end, stop comparing B at that position.\0Asuffix can also be a tuple of bytes to try.\00", align 16
@.str.33 = private unnamed_addr constant [11 x i8] c"expandtabs\00", align 1
@expandtabs__doc__ = internal global [173 x i8] c"B.expandtabs(tabsize=8) -> copy of B\0A\0AReturn a copy of B where all tab characters are expanded using spaces.\0AIf tabsize is not given, a tab size of 8 characters is assumed.\00", align 16
@.str.34 = private unnamed_addr constant [7 x i8] c"extend\00", align 1
@extend__doc__ = internal global [107 x i8] c"B.extend(iterable_of_ints) -> None\0A\0AAppend all the elements from the iterator or sequence to the\0Aend of B.\00", align 16
@.str.35 = private unnamed_addr constant [5 x i8] c"find\00", align 1
@find__doc__ = internal global [239 x i8] c"B.find(sub[, start[, end]]) -> int\0A\0AReturn the lowest index in B where subsection sub is found,\0Asuch that sub is contained within B[start,end].  Optional\0Aarguments start and end are interpreted as in slice notation.\0A\0AReturn -1 on failure.\00", align 16
@.str.36 = private unnamed_addr constant [8 x i8] c"fromhex\00", align 1
@fromhex_doc = internal global [230 x i8] c"bytearray.fromhex(string) -> bytearray (static method)\0A\0ACreate a bytearray object from a string of hexadecimal numbers.\0ASpaces between two numbers are accepted.\0AExample: bytearray.fromhex('B9 01EF') -> bytearray(b'\5Cxb9\5Cx01\5Cxef').\00", align 16
@.str.37 = private unnamed_addr constant [6 x i8] c"index\00", align 1
@index__doc__ = internal global [106 x i8] c"B.index(sub[, start[, end]]) -> int\0A\0ALike B.find() but raise ValueError when the subsection is not found.\00", align 16
@.str.38 = private unnamed_addr constant [7 x i8] c"insert\00", align 1
@insert__doc__ = internal global [94 x i8] c"B.insert(index, int) -> None\0A\0AInsert a single item into the bytearray before the given index.\00", align 16
@.str.39 = private unnamed_addr constant [8 x i8] c"isalnum\00", align 1
@_Py_isalnum__doc__ = external constant [0 x i8], align 1
@.str.40 = private unnamed_addr constant [8 x i8] c"isalpha\00", align 1
@_Py_isalpha__doc__ = external constant [0 x i8], align 1
@.str.41 = private unnamed_addr constant [8 x i8] c"isdigit\00", align 1
@_Py_isdigit__doc__ = external constant [0 x i8], align 1
@.str.42 = private unnamed_addr constant [8 x i8] c"islower\00", align 1
@_Py_islower__doc__ = external constant [0 x i8], align 1
@.str.43 = private unnamed_addr constant [8 x i8] c"isspace\00", align 1
@_Py_isspace__doc__ = external constant [0 x i8], align 1
@.str.44 = private unnamed_addr constant [8 x i8] c"istitle\00", align 1
@_Py_istitle__doc__ = external constant [0 x i8], align 1
@.str.45 = private unnamed_addr constant [8 x i8] c"isupper\00", align 1
@_Py_isupper__doc__ = external constant [0 x i8], align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"join\00", align 1
@join_doc = internal global [162 x i8] c"B.join(iterable_of_bytes) -> bytearray\0A\0AConcatenate any number of bytes/bytearray objects, with B\0Ain between each pair, and return the result as a new bytearray.\00", align 16
@.str.47 = private unnamed_addr constant [6 x i8] c"ljust\00", align 1
@ljust__doc__ = internal global [167 x i8] c"B.ljust(width[, fillchar]) -> copy of B\0A\0AReturn B left justified in a string of length width. Padding is\0Adone using the specified fill character (default is a space).\00", align 16
@.str.48 = private unnamed_addr constant [6 x i8] c"lower\00", align 1
@_Py_lower__doc__ = external constant [0 x i8], align 1
@.str.49 = private unnamed_addr constant [7 x i8] c"lstrip\00", align 1
@lstrip__doc__ = internal global [180 x i8] c"B.lstrip([bytes]) -> bytearray\0A\0AStrip leading bytes contained in the argument\0Aand return the result as a new bytearray.\0AIf the argument is omitted, strip leading ASCII whitespace.\00", align 16
@.str.50 = private unnamed_addr constant [10 x i8] c"maketrans\00", align 1
@_Py_maketrans__doc__ = external constant [0 x i8], align 1
@.str.51 = private unnamed_addr constant [10 x i8] c"partition\00", align 1
@partition__doc__ = internal global [225 x i8] c"B.partition(sep) -> (head, sep, tail)\0A\0ASearch for the separator sep in B, and return the part before it,\0Athe separator itself, and the part after it.  If the separator is not\0Afound, returns B and two empty bytearray objects.\00", align 16
@.str.52 = private unnamed_addr constant [4 x i8] c"pop\00", align 1
@pop__doc__ = internal global [119 x i8] c"B.pop([index]) -> int\0A\0ARemove and return a single item from B. If no index\0Aargument is given, will pop the last value.\00", align 16
@.str.53 = private unnamed_addr constant [7 x i8] c"remove\00", align 1
@remove__doc__ = internal global [68 x i8] c"B.remove(int) -> None\0A\0ARemove the first occurrence of a value in B.\00", align 16
@.str.54 = private unnamed_addr constant [8 x i8] c"replace\00", align 1
@replace__doc__ = internal global [207 x i8] c"B.replace(old, new[, count]) -> bytearray\0A\0AReturn a copy of B with all occurrences of subsection\0Aold replaced by new.  If the optional argument count is\0Agiven, only the first count occurrences are replaced.\00", align 16
@.str.55 = private unnamed_addr constant [8 x i8] c"reverse\00", align 1
@reverse__doc__ = internal global [68 x i8] c"B.reverse() -> None\0A\0AReverse the order of the values in B in place.\00", align 16
@.str.56 = private unnamed_addr constant [6 x i8] c"rfind\00", align 1
@rfind__doc__ = internal global [241 x i8] c"B.rfind(sub[, start[, end]]) -> int\0A\0AReturn the highest index in B where subsection sub is found,\0Asuch that sub is contained within B[start,end].  Optional\0Aarguments start and end are interpreted as in slice notation.\0A\0AReturn -1 on failure.\00", align 16
@.str.57 = private unnamed_addr constant [7 x i8] c"rindex\00", align 1
@rindex__doc__ = internal global [108 x i8] c"B.rindex(sub[, start[, end]]) -> int\0A\0ALike B.rfind() but raise ValueError when the subsection is not found.\00", align 16
@.str.58 = private unnamed_addr constant [6 x i8] c"rjust\00", align 1
@rjust__doc__ = internal global [167 x i8] c"B.rjust(width[, fillchar]) -> copy of B\0A\0AReturn B right justified in a string of length width. Padding is\0Adone using the specified fill character (default is a space)\00", align 16
@.str.59 = private unnamed_addr constant [11 x i8] c"rpartition\00", align 1
@rpartition__doc__ = internal global [252 x i8] c"B.rpartition(sep) -> (head, sep, tail)\0A\0ASearch for the separator sep in B, starting at the end of B,\0Aand return the part before it, the separator itself, and the\0Apart after it.  If the separator is not found, returns two empty\0Abytearray objects and B.\00", align 16
@.str.60 = private unnamed_addr constant [7 x i8] c"rsplit\00", align 1
@rsplit__doc__ = internal global [344 x i8] c"B.rsplit(sep=None, maxsplit=-1) -> list of bytearrays\0A\0AReturn a list of the sections in B, using sep as the delimiter,\0Astarting at the end of B and working to the front.\0AIf sep is not given, B is split on ASCII whitespace characters\0A(space, tab, return, newline, formfeed, vertical tab).\0AIf maxsplit is given, at most maxsplit splits are done.\00", align 16
@.str.61 = private unnamed_addr constant [7 x i8] c"rstrip\00", align 1
@rstrip__doc__ = internal global [182 x i8] c"B.rstrip([bytes]) -> bytearray\0A\0AStrip trailing bytes contained in the argument\0Aand return the result as a new bytearray.\0AIf the argument is omitted, strip trailing ASCII whitespace.\00", align 16
@.str.62 = private unnamed_addr constant [6 x i8] c"split\00", align 1
@split__doc__ = internal global [292 x i8] c"B.split(sep=None, maxsplit=-1) -> list of bytearrays\0A\0AReturn a list of the sections in B, using sep as the delimiter.\0AIf sep is not given, B is split on ASCII whitespace characters\0A(space, tab, return, newline, formfeed, vertical tab).\0AIf maxsplit is given, at most maxsplit splits are done.\00", align 16
@.str.63 = private unnamed_addr constant [11 x i8] c"splitlines\00", align 1
@splitlines__doc__ = internal global [191 x i8] c"B.splitlines([keepends]) -> list of lines\0A\0AReturn a list of the lines in B, breaking at line boundaries.\0ALine breaks are not included in the resulting list unless keepends\0Ais given and true.\00", align 16
@.str.64 = private unnamed_addr constant [11 x i8] c"startswith\00", align 1
@startswith__doc__ = internal global [268 x i8] c"B.startswith(prefix[, start[, end]]) -> bool\0A\0AReturn True if B starts with the specified prefix, False otherwise.\0AWith optional start, test B beginning at that position.\0AWith optional end, stop comparing B at that position.\0Aprefix can also be a tuple of bytes to try.\00", align 16
@.str.65 = private unnamed_addr constant [6 x i8] c"strip\00", align 1
@strip__doc__ = internal global [184 x i8] c"B.strip([bytes]) -> bytearray\0A\0AStrip leading and trailing bytes contained in the argument\0Aand return the result as a new bytearray.\0AIf the argument is omitted, strip ASCII whitespace.\00", align 16
@.str.66 = private unnamed_addr constant [9 x i8] c"swapcase\00", align 1
@_Py_swapcase__doc__ = external constant [0 x i8], align 1
@.str.67 = private unnamed_addr constant [6 x i8] c"title\00", align 1
@_Py_title__doc__ = external constant [0 x i8], align 1
@.str.68 = private unnamed_addr constant [10 x i8] c"translate\00", align 1
@translate__doc__ = internal global [276 x i8] c"B.translate(table[, deletechars]) -> bytearray\0A\0AReturn a copy of B, where all characters occurring in the\0Aoptional argument deletechars are removed, and the remaining\0Acharacters have been mapped through the given translation\0Atable, which must be a bytes object of length 256.\00", align 16
@.str.69 = private unnamed_addr constant [6 x i8] c"upper\00", align 1
@_Py_upper__doc__ = external constant [0 x i8], align 1
@.str.70 = private unnamed_addr constant [6 x i8] c"zfill\00", align 1
@zfill__doc__ = internal global [139 x i8] c"B.zfill(width) -> copy of B\0A\0APad a numeric string B with zeros on the left, to fill a field\0Aof the specified width.  B is never truncated.\00", align 16
@_common_reduce.PyId___dict__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.71, i32 0, i32 0), %struct._object* null }, align 8
@.str.71 = private unnamed_addr constant [9 x i8] c"__dict__\00", align 1
@_Py_NoneStruct = external global %struct._object, align 8
@.str.72 = private unnamed_addr constant [9 x i8] c"(O(Ns)N)\00", align 1
@.str.73 = private unnamed_addr constant [8 x i8] c"latin-1\00", align 1
@.str.74 = private unnamed_addr constant [9 x i8] c"(O(y#)N)\00", align 1
@.str.75 = private unnamed_addr constant [7 x i8] c"(O()N)\00", align 1
@.str.76 = private unnamed_addr constant [17 x i8] c"|i:__reduce_ex__\00", align 1
@.str.77 = private unnamed_addr constant [37 x i8] c"cannot add more objects to bytearray\00", align 1
@.str.78 = private unnamed_addr constant [11 x i8] c"n|c:center\00", align 1
@bytearray_decode.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.80, i32 0, i32 0), i8* null], align 16
@.str.79 = private unnamed_addr constant [9 x i8] c"encoding\00", align 1
@.str.80 = private unnamed_addr constant [7 x i8] c"errors\00", align 1
@.str.81 = private unnamed_addr constant [11 x i8] c"|ss:decode\00", align 1
@.str.82 = private unnamed_addr constant [61 x i8] c"endswith first arg must be bytes or a tuple of bytes, not %s\00", align 1
@stringlib_expandtabs.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.83, i32 0, i32 0), i8* null], align 16
@.str.83 = private unnamed_addr constant [8 x i8] c"tabsize\00", align 1
@.str.84 = private unnamed_addr constant [14 x i8] c"|i:expandtabs\00", align 1
@.str.85 = private unnamed_addr constant [16 x i8] c"result too long\00", align 1
@.str.86 = private unnamed_addr constant [24 x i8] c"find/rfind/index/rindex\00", align 1
@.str.87 = private unnamed_addr constant [10 x i8] c"U:fromhex\00", align 1
@.str.88 = private unnamed_addr constant [62 x i8] c"non-hexadecimal number found in fromhex() arg at position %zd\00", align 1
@_Py_ctype_table = external constant [256 x i32], align 16
@_Py_ctype_tolower = external constant [256 x i8], align 16
@.str.89 = private unnamed_addr constant [21 x i8] c"subsection not found\00", align 1
@.str.90 = private unnamed_addr constant [10 x i8] c"nO:insert\00", align 1
@.str.91 = private unnamed_addr constant [26 x i8] c"can only join an iterable\00", align 1
@.str.92 = private unnamed_addr constant [98 x i8] c"sequence item %zd: expected bytes, bytearray, or an object with the buffer interface, %.80s found\00", align 1
@.str.93 = private unnamed_addr constant [26 x i8] c"join() result is too long\00", align 1
@PyExc_RuntimeError = external global %struct._object*, align 8
@.str.94 = private unnamed_addr constant [39 x i8] c"sequence changed size during iteration\00", align 1
@.str.95 = private unnamed_addr constant [10 x i8] c"n|c:ljust\00", align 1
@.str.96 = private unnamed_addr constant [10 x i8] c"|O:lstrip\00", align 1
@.str.97 = private unnamed_addr constant [7 x i8] c"\09\0A\0D\0C\0B \00", align 1
@.str.98 = private unnamed_addr constant [16 x i8] c"empty separator\00", align 1
@.str.99 = private unnamed_addr constant [7 x i8] c"|n:pop\00", align 1
@.str.100 = private unnamed_addr constant [25 x i8] c"pop from empty bytearray\00", align 1
@.str.101 = private unnamed_addr constant [23 x i8] c"pop index out of range\00", align 1
@.str.102 = private unnamed_addr constant [29 x i8] c"value not found in bytearray\00", align 1
@.str.103 = private unnamed_addr constant [13 x i8] c"OO|n:replace\00", align 1
@.str.104 = private unnamed_addr constant [27 x i8] c"replace string is too long\00", align 1
@.str.105 = private unnamed_addr constant [26 x i8] c"replace bytes is too long\00", align 1
@.str.106 = private unnamed_addr constant [10 x i8] c"n|c:rjust\00", align 1
@bytearray_rsplit.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.108, i32 0, i32 0), i8* null], align 16
@.str.107 = private unnamed_addr constant [4 x i8] c"sep\00", align 1
@.str.108 = private unnamed_addr constant [9 x i8] c"maxsplit\00", align 1
@.str.109 = private unnamed_addr constant [11 x i8] c"|On:rsplit\00", align 1
@.str.110 = private unnamed_addr constant [10 x i8] c"|O:rstrip\00", align 1
@bytearray_split.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.108, i32 0, i32 0), i8* null], align 16
@.str.111 = private unnamed_addr constant [10 x i8] c"|On:split\00", align 1
@bytearray_splitlines.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.112, i32 0, i32 0), i8* null], align 16
@.str.112 = private unnamed_addr constant [9 x i8] c"keepends\00", align 1
@.str.113 = private unnamed_addr constant [14 x i8] c"|i:splitlines\00", align 1
@.str.114 = private unnamed_addr constant [63 x i8] c"startswith first arg must be bytes or a tuple of bytes, not %s\00", align 1
@.str.115 = private unnamed_addr constant [9 x i8] c"|O:strip\00", align 1
@.str.116 = private unnamed_addr constant [46 x i8] c"translation table must be 256 characters long\00", align 1
@.str.117 = private unnamed_addr constant [8 x i8] c"n:zfill\00", align 1
@bytearray_init.kwlist = internal global [4 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.80, i32 0, i32 0), i8* null], align 16
@.str.118 = private unnamed_addr constant [7 x i8] c"source\00", align 1
@.str.119 = private unnamed_addr constant [15 x i8] c"|Oss:bytearray\00", align 1
@.str.120 = private unnamed_addr constant [45 x i8] c"encoding or errors without sequence argument\00", align 1
@.str.121 = private unnamed_addr constant [36 x i8] c"string argument without an encoding\00", align 1
@.str.122 = private unnamed_addr constant [45 x i8] c"encoding or errors without a string argument\00", align 1
@.str.123 = private unnamed_addr constant [15 x i8] c"negative count\00", align 1
@PyExc_StopIteration = external global %struct._object*, align 8
@.str.124 = private unnamed_addr constant [16 x i8] c"__length_hint__\00", align 1
@length_hint_doc = internal global [55 x i8] c"Private method returning an estimate of len(list(it)).\00", align 16
@.str.125 = private unnamed_addr constant [13 x i8] c"__setstate__\00", align 1
@setstate_doc = internal global [38 x i8] c"Set state information for unpickling.\00", align 16
@.str.126 = private unnamed_addr constant [6 x i8] c"N(O)n\00", align 1
@.str.127 = private unnamed_addr constant [5 x i8] c"iter\00", align 1
@.str.128 = private unnamed_addr constant [5 x i8] c"N(N)\00", align 1
@.str.129 = private unnamed_addr constant [26 x i8] c"Objects/bytearrayobject.c\00", align 1
@.str.130 = private unnamed_addr constant [26 x i8] c"GC object already tracked\00", align 1
@_PyGC_generation0 = external global %union._gc_head*, align 8

; Function Attrs: nounwind uwtable
define void @PyByteArray_Fini() #0 {
entry:
  ret void, !dbg !2117
}

; Function Attrs: nounwind uwtable
define i32 @PyByteArray_Init() #0 {
entry:
  ret i32 1, !dbg !2118
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyByteArray_FromObject(%struct._object* %input) #0 {
entry:
  %input.addr = alloca %struct._object*, align 8
  store %struct._object* %input, %struct._object** %input.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %input.addr, metadata !474, metadata !2123), !dbg !2124
  %0 = load %struct._object*, %struct._object** %input.addr, align 8, !dbg !2125, !tbaa !2119
  %call = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyByteArray_Type to %struct._typeobject*), i32 0, i32 0, i32 0), %struct._object* %0, i8* null), !dbg !2126
  ret %struct._object* %call, !dbg !2127
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare %struct._object* @PyObject_CallFunctionObjArgs(%struct._object*, ...) #2

; Function Attrs: nounwind uwtable
define %struct._object* @PyByteArray_FromStringAndSize(i8* %bytes, i64 %size) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %bytes.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %new = alloca %struct.PyByteArrayObject*, align 8
  %alloc = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store i8* %bytes, i8** %bytes.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %bytes.addr, metadata !479, metadata !2123), !dbg !2128
  store i64 %size, i64* %size.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !480, metadata !2123), !dbg !2131
  %0 = bitcast %struct.PyByteArrayObject** %new to i8*, !dbg !2132
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !2132
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %new, metadata !481, metadata !2123), !dbg !2133
  %1 = bitcast i64* %alloc to i8*, !dbg !2134
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !2134
  call void @llvm.dbg.declare(metadata i64* %alloc, metadata !482, metadata !2123), !dbg !2135
  %2 = load i64, i64* %size.addr, align 8, !dbg !2136, !tbaa !2129
  %cmp = icmp slt i64 %2, 0, !dbg !2138
  br i1 %cmp, label %if.then, label %if.end, !dbg !2139

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8, !dbg !2140, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i32 0, i32 0)), !dbg !2142
  store %struct._object* null, %struct._object** %retval, !dbg !2143
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2143

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %size.addr, align 8, !dbg !2144, !tbaa !2129
  %cmp1 = icmp eq i64 %4, 9223372036854775807, !dbg !2146
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !2147

if.then.2:                                        ; preds = %if.end
  %call = call %struct._object* @PyErr_NoMemory(), !dbg !2148
  store %struct._object* %call, %struct._object** %retval, !dbg !2150
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2150

if.end.3:                                         ; preds = %if.end
  %call4 = call %struct._object* @_PyObject_New(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyByteArray_Type to %struct._typeobject*)), !dbg !2151
  %5 = bitcast %struct._object* %call4 to %struct.PyByteArrayObject*, !dbg !2152
  store %struct.PyByteArrayObject* %5, %struct.PyByteArrayObject** %new, align 8, !dbg !2153, !tbaa !2119
  %6 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %new, align 8, !dbg !2154, !tbaa !2119
  %cmp5 = icmp eq %struct.PyByteArrayObject* %6, null, !dbg !2156
  br i1 %cmp5, label %if.then.6, label %if.end.7, !dbg !2157

if.then.6:                                        ; preds = %if.end.3
  store %struct._object* null, %struct._object** %retval, !dbg !2158
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2158

if.end.7:                                         ; preds = %if.end.3
  %7 = load i64, i64* %size.addr, align 8, !dbg !2159, !tbaa !2129
  %cmp8 = icmp eq i64 %7, 0, !dbg !2160
  br i1 %cmp8, label %if.then.9, label %if.else, !dbg !2161

if.then.9:                                        ; preds = %if.end.7
  %8 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %new, align 8, !dbg !2162, !tbaa !2119
  %ob_bytes = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %8, i32 0, i32 2, !dbg !2164
  store i8* null, i8** %ob_bytes, align 8, !dbg !2165, !tbaa !2166
  store i64 0, i64* %alloc, align 8, !dbg !2171, !tbaa !2129
  br label %if.end.27, !dbg !2172

if.else:                                          ; preds = %if.end.7
  %9 = load i64, i64* %size.addr, align 8, !dbg !2173, !tbaa !2129
  %add = add i64 %9, 1, !dbg !2174
  store i64 %add, i64* %alloc, align 8, !dbg !2175, !tbaa !2129
  %10 = load i64, i64* %alloc, align 8, !dbg !2176, !tbaa !2129
  %call10 = call i8* @PyObject_Malloc(i64 %10), !dbg !2177
  %11 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %new, align 8, !dbg !2178, !tbaa !2119
  %ob_bytes11 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %11, i32 0, i32 2, !dbg !2179
  store i8* %call10, i8** %ob_bytes11, align 8, !dbg !2180, !tbaa !2166
  %12 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %new, align 8, !dbg !2181, !tbaa !2119
  %ob_bytes12 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %12, i32 0, i32 2, !dbg !2182
  %13 = load i8*, i8** %ob_bytes12, align 8, !dbg !2182, !tbaa !2166
  %cmp13 = icmp eq i8* %13, null, !dbg !2183
  br i1 %cmp13, label %if.then.14, label %if.end.20, !dbg !2184

if.then.14:                                       ; preds = %if.else
  br label %do.body, !dbg !2185

do.body:                                          ; preds = %if.then.14
  %14 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2186
  call void @llvm.lifetime.start(i64 8, i8* %14) #3, !dbg !2186
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !483, metadata !2123), !dbg !2188
  %15 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %new, align 8, !dbg !2189, !tbaa !2119
  %16 = bitcast %struct.PyByteArrayObject* %15 to %struct._object*, !dbg !2190
  store %struct._object* %16, %struct._object** %_py_decref_tmp, align 8, !dbg !2188, !tbaa !2119
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2191, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0, !dbg !2193
  %18 = load i64, i64* %ob_refcnt, align 8, !dbg !2194, !tbaa !2195
  %dec = add i64 %18, -1, !dbg !2194
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !2194, !tbaa !2195
  %cmp15 = icmp ne i64 %dec, 0, !dbg !2196
  br i1 %cmp15, label %if.then.16, label %if.else.17, !dbg !2197

if.then.16:                                       ; preds = %do.body
  br label %if.end.18, !dbg !2198

if.else.17:                                       ; preds = %do.body
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2200, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1, !dbg !2202
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2202, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4, !dbg !2204
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !2204, !tbaa !2205
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2207, !tbaa !2119
  call void %21(%struct._object* %22), !dbg !2208
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.17, %if.then.16
  %23 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2209
  call void @llvm.lifetime.end(i64 8, i8* %23) #3, !dbg !2209
  br label %do.cond, !dbg !2211

do.cond:                                          ; preds = %if.end.18
  br label %do.end, !dbg !2212

do.end:                                           ; preds = %do.cond
  %call19 = call %struct._object* @PyErr_NoMemory(), !dbg !2214
  store %struct._object* %call19, %struct._object** %retval, !dbg !2215
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2215

if.end.20:                                        ; preds = %if.else
  %24 = load i8*, i8** %bytes.addr, align 8, !dbg !2216, !tbaa !2119
  %cmp21 = icmp ne i8* %24, null, !dbg !2218
  br i1 %cmp21, label %land.lhs.true, label %if.end.25, !dbg !2219

land.lhs.true:                                    ; preds = %if.end.20
  %25 = load i64, i64* %size.addr, align 8, !dbg !2220, !tbaa !2129
  %cmp22 = icmp sgt i64 %25, 0, !dbg !2222
  br i1 %cmp22, label %if.then.23, label %if.end.25, !dbg !2223

if.then.23:                                       ; preds = %land.lhs.true
  %26 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %new, align 8, !dbg !2224, !tbaa !2119
  %ob_bytes24 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %26, i32 0, i32 2, !dbg !2225
  %27 = load i8*, i8** %ob_bytes24, align 8, !dbg !2225, !tbaa !2166
  %28 = load i8*, i8** %bytes.addr, align 8, !dbg !2226, !tbaa !2119
  %29 = load i64, i64* %size.addr, align 8, !dbg !2227, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 %29, i32 1, i1 false), !dbg !2228
  br label %if.end.25, !dbg !2228

if.end.25:                                        ; preds = %if.then.23, %land.lhs.true, %if.end.20
  %30 = load i64, i64* %size.addr, align 8, !dbg !2229, !tbaa !2129
  %31 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %new, align 8, !dbg !2230, !tbaa !2119
  %ob_bytes26 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %31, i32 0, i32 2, !dbg !2231
  %32 = load i8*, i8** %ob_bytes26, align 8, !dbg !2231, !tbaa !2166
  %arrayidx = getelementptr i8, i8* %32, i64 %30, !dbg !2230
  store i8 0, i8* %arrayidx, align 1, !dbg !2232, !tbaa !2233
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.25, %if.then.9
  %33 = load i64, i64* %size.addr, align 8, !dbg !2234, !tbaa !2129
  %34 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %new, align 8, !dbg !2235, !tbaa !2119
  %35 = bitcast %struct.PyByteArrayObject* %34 to %struct.PyVarObject*, !dbg !2236
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %35, i32 0, i32 1, !dbg !2237
  store i64 %33, i64* %ob_size, align 8, !dbg !2238, !tbaa !2239
  %36 = load i64, i64* %alloc, align 8, !dbg !2240, !tbaa !2129
  %37 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %new, align 8, !dbg !2241, !tbaa !2119
  %ob_alloc = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %37, i32 0, i32 1, !dbg !2242
  store i64 %36, i64* %ob_alloc, align 8, !dbg !2243, !tbaa !2244
  %38 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %new, align 8, !dbg !2245, !tbaa !2119
  %ob_bytes28 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %38, i32 0, i32 2, !dbg !2246
  %39 = load i8*, i8** %ob_bytes28, align 8, !dbg !2246, !tbaa !2166
  %40 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %new, align 8, !dbg !2247, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %40, i32 0, i32 3, !dbg !2248
  store i8* %39, i8** %ob_start, align 8, !dbg !2249, !tbaa !2250
  %41 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %new, align 8, !dbg !2251, !tbaa !2119
  %ob_exports = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %41, i32 0, i32 4, !dbg !2252
  store i32 0, i32* %ob_exports, align 4, !dbg !2253, !tbaa !2254
  %42 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %new, align 8, !dbg !2255, !tbaa !2119
  %43 = bitcast %struct.PyByteArrayObject* %42 to %struct._object*, !dbg !2256
  store %struct._object* %43, %struct._object** %retval, !dbg !2257
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2257

cleanup:                                          ; preds = %if.end.27, %do.end, %if.then.6, %if.then.2, %if.then
  %44 = bitcast i64* %alloc to i8*, !dbg !2258
  call void @llvm.lifetime.end(i64 8, i8* %44) #3, !dbg !2258
  %45 = bitcast %struct.PyByteArrayObject** %new to i8*, !dbg !2258
  call void @llvm.lifetime.end(i64 8, i8* %45) #3, !dbg !2258
  %46 = load %struct._object*, %struct._object** %retval, !dbg !2258
  ret %struct._object* %46, !dbg !2258
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #3

declare void @PyErr_SetString(%struct._object*, i8*) #2

declare %struct._object* @PyErr_NoMemory() #2

declare %struct._object* @_PyObject_New(%struct._typeobject*) #2

declare i8* @PyObject_Malloc(i64) #2

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #3

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #3

; Function Attrs: nounwind uwtable
define i64 @PyByteArray_Size(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !491, metadata !2123), !dbg !2259
  %0 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2260, !tbaa !2119
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*, !dbg !2261
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1, !dbg !2262
  %2 = load i64, i64* %ob_size, align 8, !dbg !2262, !tbaa !2239
  ret i64 %2, !dbg !2263
}

; Function Attrs: nounwind uwtable
define i8* @PyByteArray_AsString(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !496, metadata !2123), !dbg !2264
  %0 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2265, !tbaa !2119
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*, !dbg !2266
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1, !dbg !2267
  %2 = load i64, i64* %ob_size, align 8, !dbg !2267, !tbaa !2239
  %tobool = icmp ne i64 %2, 0, !dbg !2268
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2268

cond.true:                                        ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2269, !tbaa !2119
  %4 = bitcast %struct._object* %3 to %struct.PyByteArrayObject*, !dbg !2271
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %4, i32 0, i32 3, !dbg !2272
  %5 = load i8*, i8** %ob_start, align 8, !dbg !2272, !tbaa !2250
  br label %cond.end, !dbg !2268

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2273

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %5, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !2268
  ret i8* %cond, !dbg !2275
}

; Function Attrs: nounwind uwtable
define i32 @PyByteArray_Resize(%struct._object* %self, i64 %size) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %size.addr = alloca i64, align 8
  %sval = alloca i8*, align 8
  %obj = alloca %struct.PyByteArrayObject*, align 8
  %alloc = alloca i64, align 8
  %logical_offset = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !501, metadata !2123), !dbg !2278
  store i64 %size, i64* %size.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !502, metadata !2123), !dbg !2279
  %0 = bitcast i8** %sval to i8*, !dbg !2280
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !2280
  call void @llvm.dbg.declare(metadata i8** %sval, metadata !503, metadata !2123), !dbg !2281
  %1 = bitcast %struct.PyByteArrayObject** %obj to i8*, !dbg !2282
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !2282
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %obj, metadata !504, metadata !2123), !dbg !2283
  %2 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2284, !tbaa !2119
  %3 = bitcast %struct._object* %2 to %struct.PyByteArrayObject*, !dbg !2285
  store %struct.PyByteArrayObject* %3, %struct.PyByteArrayObject** %obj, align 8, !dbg !2283, !tbaa !2119
  %4 = bitcast i64* %alloc to i8*, !dbg !2286
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !2286
  call void @llvm.dbg.declare(metadata i64* %alloc, metadata !505, metadata !2123), !dbg !2287
  %5 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj, align 8, !dbg !2288, !tbaa !2119
  %ob_alloc = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %5, i32 0, i32 1, !dbg !2289
  %6 = load i64, i64* %ob_alloc, align 8, !dbg !2289, !tbaa !2244
  store i64 %6, i64* %alloc, align 8, !dbg !2287, !tbaa !2129
  %7 = bitcast i64* %logical_offset to i8*, !dbg !2290
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !2290
  call void @llvm.dbg.declare(metadata i64* %logical_offset, metadata !506, metadata !2123), !dbg !2291
  %8 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj, align 8, !dbg !2292, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %8, i32 0, i32 3, !dbg !2293
  %9 = load i8*, i8** %ob_start, align 8, !dbg !2293, !tbaa !2250
  %10 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj, align 8, !dbg !2294, !tbaa !2119
  %ob_bytes = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %10, i32 0, i32 2, !dbg !2295
  %11 = load i8*, i8** %ob_bytes, align 8, !dbg !2295, !tbaa !2166
  %sub.ptr.lhs.cast = ptrtoint i8* %9 to i64, !dbg !2296
  %sub.ptr.rhs.cast = ptrtoint i8* %11 to i64, !dbg !2296
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !2296
  store i64 %sub.ptr.sub, i64* %logical_offset, align 8, !dbg !2291, !tbaa !2129
  %12 = load i64, i64* %size.addr, align 8, !dbg !2297, !tbaa !2129
  %13 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2299, !tbaa !2119
  %14 = bitcast %struct._object* %13 to %struct.PyVarObject*, !dbg !2300
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %14, i32 0, i32 1, !dbg !2301
  %15 = load i64, i64* %ob_size, align 8, !dbg !2301, !tbaa !2239
  %cmp = icmp eq i64 %12, %15, !dbg !2302
  br i1 %cmp, label %if.then, label %if.end, !dbg !2303

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !2304
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2304

if.end:                                           ; preds = %entry
  %16 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj, align 8, !dbg !2306, !tbaa !2119
  %call = call i32 @_canresize(%struct.PyByteArrayObject* %16), !dbg !2308
  %tobool = icmp ne i32 %call, 0, !dbg !2308
  br i1 %tobool, label %if.end.2, label %if.then.1, !dbg !2309

if.then.1:                                        ; preds = %if.end
  store i32 -1, i32* %retval, !dbg !2310
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2310

if.end.2:                                         ; preds = %if.end
  %17 = load i64, i64* %size.addr, align 8, !dbg !2312, !tbaa !2129
  %18 = load i64, i64* %logical_offset, align 8, !dbg !2314, !tbaa !2129
  %add = add i64 %17, %18, !dbg !2315
  %add3 = add i64 %add, 1, !dbg !2316
  %19 = load i64, i64* %alloc, align 8, !dbg !2317, !tbaa !2129
  %cmp4 = icmp slt i64 %add3, %19, !dbg !2318
  br i1 %cmp4, label %if.then.5, label %if.else.14, !dbg !2319

if.then.5:                                        ; preds = %if.end.2
  %20 = load i64, i64* %size.addr, align 8, !dbg !2320, !tbaa !2129
  %21 = load i64, i64* %alloc, align 8, !dbg !2323, !tbaa !2129
  %div = sdiv i64 %21, 2, !dbg !2324
  %cmp6 = icmp slt i64 %20, %div, !dbg !2325
  br i1 %cmp6, label %if.then.7, label %if.else, !dbg !2326

if.then.7:                                        ; preds = %if.then.5
  %22 = load i64, i64* %size.addr, align 8, !dbg !2327, !tbaa !2129
  %add8 = add i64 %22, 1, !dbg !2329
  store i64 %add8, i64* %alloc, align 8, !dbg !2330, !tbaa !2129
  br label %if.end.13, !dbg !2331

if.else:                                          ; preds = %if.then.5
  %23 = load i64, i64* %size.addr, align 8, !dbg !2332, !tbaa !2129
  %24 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2334, !tbaa !2119
  %25 = bitcast %struct._object* %24 to %struct.PyVarObject*, !dbg !2335
  %ob_size9 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %25, i32 0, i32 1, !dbg !2336
  store i64 %23, i64* %ob_size9, align 8, !dbg !2337, !tbaa !2239
  %26 = load i64, i64* %size.addr, align 8, !dbg !2338, !tbaa !2129
  %27 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2339, !tbaa !2119
  %28 = bitcast %struct._object* %27 to %struct.PyVarObject*, !dbg !2340
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %28, i32 0, i32 1, !dbg !2341
  %29 = load i64, i64* %ob_size10, align 8, !dbg !2341, !tbaa !2239
  %tobool11 = icmp ne i64 %29, 0, !dbg !2342
  br i1 %tobool11, label %cond.true, label %cond.false, !dbg !2342

cond.true:                                        ; preds = %if.else
  %30 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2343, !tbaa !2119
  %31 = bitcast %struct._object* %30 to %struct.PyByteArrayObject*, !dbg !2345
  %ob_start12 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %31, i32 0, i32 3, !dbg !2346
  %32 = load i8*, i8** %ob_start12, align 8, !dbg !2346, !tbaa !2250
  br label %cond.end, !dbg !2342

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !2347

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %32, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !2342
  %arrayidx = getelementptr i8, i8* %cond, i64 %26, !dbg !2349
  store i8 0, i8* %arrayidx, align 1, !dbg !2352, !tbaa !2233
  store i32 0, i32* %retval, !dbg !2353
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2353

if.end.13:                                        ; preds = %if.then.7
  br label %if.end.28, !dbg !2354

if.else.14:                                       ; preds = %if.end.2
  %33 = load i64, i64* %size.addr, align 8, !dbg !2355, !tbaa !2129
  %conv = sitofp i64 %33 to double, !dbg !2355
  %34 = load i64, i64* %alloc, align 8, !dbg !2358, !tbaa !2129
  %conv15 = sitofp i64 %34 to double, !dbg !2358
  %mul = fmul double %conv15, 1.125000e+00, !dbg !2359
  %cmp16 = fcmp ole double %conv, %mul, !dbg !2360
  br i1 %cmp16, label %if.then.18, label %if.else.25, !dbg !2361

if.then.18:                                       ; preds = %if.else.14
  %35 = load i64, i64* %size.addr, align 8, !dbg !2362, !tbaa !2129
  %36 = load i64, i64* %size.addr, align 8, !dbg !2364, !tbaa !2129
  %shr = ashr i64 %36, 3, !dbg !2365
  %add19 = add i64 %35, %shr, !dbg !2366
  %37 = load i64, i64* %size.addr, align 8, !dbg !2367, !tbaa !2129
  %cmp20 = icmp slt i64 %37, 9, !dbg !2368
  %cond22 = select i1 %cmp20, i32 3, i32 6, !dbg !2367
  %conv23 = sext i32 %cond22 to i64, !dbg !2369
  %add24 = add i64 %add19, %conv23, !dbg !2370
  store i64 %add24, i64* %alloc, align 8, !dbg !2371, !tbaa !2129
  br label %if.end.27, !dbg !2372

if.else.25:                                       ; preds = %if.else.14
  %38 = load i64, i64* %size.addr, align 8, !dbg !2373, !tbaa !2129
  %add26 = add i64 %38, 1, !dbg !2375
  store i64 %add26, i64* %alloc, align 8, !dbg !2376, !tbaa !2129
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.25, %if.then.18
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.end.13
  %39 = load i64, i64* %logical_offset, align 8, !dbg !2377, !tbaa !2129
  %cmp29 = icmp sgt i64 %39, 0, !dbg !2379
  br i1 %cmp29, label %if.then.31, label %if.else.54, !dbg !2380

if.then.31:                                       ; preds = %if.end.28
  %40 = load i64, i64* %alloc, align 8, !dbg !2381, !tbaa !2129
  %call32 = call i8* @PyObject_Malloc(i64 %40), !dbg !2383
  store i8* %call32, i8** %sval, align 8, !dbg !2384, !tbaa !2119
  %41 = load i8*, i8** %sval, align 8, !dbg !2385, !tbaa !2119
  %cmp33 = icmp eq i8* %41, null, !dbg !2387
  br i1 %cmp33, label %if.then.35, label %if.end.37, !dbg !2388

if.then.35:                                       ; preds = %if.then.31
  %call36 = call %struct._object* @PyErr_NoMemory(), !dbg !2389
  store i32 -1, i32* %retval, !dbg !2391
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2391

if.end.37:                                        ; preds = %if.then.31
  %42 = load i8*, i8** %sval, align 8, !dbg !2392, !tbaa !2119
  %43 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2393, !tbaa !2119
  %44 = bitcast %struct._object* %43 to %struct.PyVarObject*, !dbg !2394
  %ob_size38 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %44, i32 0, i32 1, !dbg !2395
  %45 = load i64, i64* %ob_size38, align 8, !dbg !2395, !tbaa !2239
  %tobool39 = icmp ne i64 %45, 0, !dbg !2396
  br i1 %tobool39, label %cond.true.40, label %cond.false.42, !dbg !2396

cond.true.40:                                     ; preds = %if.end.37
  %46 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2397, !tbaa !2119
  %47 = bitcast %struct._object* %46 to %struct.PyByteArrayObject*, !dbg !2399
  %ob_start41 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %47, i32 0, i32 3, !dbg !2400
  %48 = load i8*, i8** %ob_start41, align 8, !dbg !2400, !tbaa !2250
  br label %cond.end.43, !dbg !2396

cond.false.42:                                    ; preds = %if.end.37
  br label %cond.end.43, !dbg !2401

cond.end.43:                                      ; preds = %cond.false.42, %cond.true.40
  %cond44 = phi i8* [ %48, %cond.true.40 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.42 ], !dbg !2396
  %49 = load i64, i64* %size.addr, align 8, !dbg !2403, !tbaa !2129
  %50 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2406, !tbaa !2119
  %51 = bitcast %struct._object* %50 to %struct.PyVarObject*, !dbg !2407
  %ob_size45 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %51, i32 0, i32 1, !dbg !2408
  %52 = load i64, i64* %ob_size45, align 8, !dbg !2408, !tbaa !2239
  %cmp46 = icmp sgt i64 %49, %52, !dbg !2409
  br i1 %cmp46, label %cond.true.48, label %cond.false.50, !dbg !2410

cond.true.48:                                     ; preds = %cond.end.43
  %53 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2411, !tbaa !2119
  %54 = bitcast %struct._object* %53 to %struct.PyVarObject*, !dbg !2413
  %ob_size49 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %54, i32 0, i32 1, !dbg !2414
  %55 = load i64, i64* %ob_size49, align 8, !dbg !2414, !tbaa !2239
  br label %cond.end.51, !dbg !2410

cond.false.50:                                    ; preds = %cond.end.43
  %56 = load i64, i64* %size.addr, align 8, !dbg !2415, !tbaa !2129
  br label %cond.end.51, !dbg !2410

cond.end.51:                                      ; preds = %cond.false.50, %cond.true.48
  %cond52 = phi i64 [ %55, %cond.true.48 ], [ %56, %cond.false.50 ], !dbg !2410
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %42, i8* %cond44, i64 %cond52, i32 1, i1 false), !dbg !2417
  %57 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj, align 8, !dbg !2420, !tbaa !2119
  %ob_bytes53 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %57, i32 0, i32 2, !dbg !2421
  %58 = load i8*, i8** %ob_bytes53, align 8, !dbg !2421, !tbaa !2166
  call void @PyObject_Free(i8* %58), !dbg !2422
  br label %if.end.62, !dbg !2423

if.else.54:                                       ; preds = %if.end.28
  %59 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj, align 8, !dbg !2424, !tbaa !2119
  %ob_bytes55 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %59, i32 0, i32 2, !dbg !2426
  %60 = load i8*, i8** %ob_bytes55, align 8, !dbg !2426, !tbaa !2166
  %61 = load i64, i64* %alloc, align 8, !dbg !2427, !tbaa !2129
  %call56 = call i8* @PyObject_Realloc(i8* %60, i64 %61), !dbg !2428
  store i8* %call56, i8** %sval, align 8, !dbg !2429, !tbaa !2119
  %62 = load i8*, i8** %sval, align 8, !dbg !2430, !tbaa !2119
  %cmp57 = icmp eq i8* %62, null, !dbg !2432
  br i1 %cmp57, label %if.then.59, label %if.end.61, !dbg !2433

if.then.59:                                       ; preds = %if.else.54
  %call60 = call %struct._object* @PyErr_NoMemory(), !dbg !2434
  store i32 -1, i32* %retval, !dbg !2436
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2436

if.end.61:                                        ; preds = %if.else.54
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %cond.end.51
  %63 = load i8*, i8** %sval, align 8, !dbg !2437, !tbaa !2119
  %64 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj, align 8, !dbg !2438, !tbaa !2119
  %ob_start63 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %64, i32 0, i32 3, !dbg !2439
  store i8* %63, i8** %ob_start63, align 8, !dbg !2440, !tbaa !2250
  %65 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj, align 8, !dbg !2441, !tbaa !2119
  %ob_bytes64 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %65, i32 0, i32 2, !dbg !2442
  store i8* %63, i8** %ob_bytes64, align 8, !dbg !2443, !tbaa !2166
  %66 = load i64, i64* %size.addr, align 8, !dbg !2444, !tbaa !2129
  %67 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2445, !tbaa !2119
  %68 = bitcast %struct._object* %67 to %struct.PyVarObject*, !dbg !2446
  %ob_size65 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %68, i32 0, i32 1, !dbg !2447
  store i64 %66, i64* %ob_size65, align 8, !dbg !2448, !tbaa !2239
  %69 = load i64, i64* %alloc, align 8, !dbg !2449, !tbaa !2129
  %70 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj, align 8, !dbg !2450, !tbaa !2119
  %ob_alloc66 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %70, i32 0, i32 1, !dbg !2451
  store i64 %69, i64* %ob_alloc66, align 8, !dbg !2452, !tbaa !2244
  %71 = load i64, i64* %size.addr, align 8, !dbg !2453, !tbaa !2129
  %72 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj, align 8, !dbg !2454, !tbaa !2119
  %ob_bytes67 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %72, i32 0, i32 2, !dbg !2455
  %73 = load i8*, i8** %ob_bytes67, align 8, !dbg !2455, !tbaa !2166
  %arrayidx68 = getelementptr i8, i8* %73, i64 %71, !dbg !2454
  store i8 0, i8* %arrayidx68, align 1, !dbg !2456, !tbaa !2233
  store i32 0, i32* %retval, !dbg !2457
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2457

cleanup:                                          ; preds = %if.end.62, %if.then.59, %if.then.35, %cond.end, %if.then.1, %if.then
  %74 = bitcast i64* %logical_offset to i8*, !dbg !2458
  call void @llvm.lifetime.end(i64 8, i8* %74) #3, !dbg !2458
  %75 = bitcast i64* %alloc to i8*, !dbg !2458
  call void @llvm.lifetime.end(i64 8, i8* %75) #3, !dbg !2458
  %76 = bitcast %struct.PyByteArrayObject** %obj to i8*, !dbg !2458
  call void @llvm.lifetime.end(i64 8, i8* %76) #3, !dbg !2458
  %77 = bitcast i8** %sval to i8*, !dbg !2458
  call void @llvm.lifetime.end(i64 8, i8* %77) #3, !dbg !2458
  %78 = load i32, i32* %retval, !dbg !2458
  ret i32 %78, !dbg !2458
}

; Function Attrs: nounwind uwtable
define internal i32 @_canresize(%struct.PyByteArrayObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !519, metadata !2123), !dbg !2459
  %0 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !2460, !tbaa !2119
  %ob_exports = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %0, i32 0, i32 4, !dbg !2462
  %1 = load i32, i32* %ob_exports, align 4, !dbg !2462, !tbaa !2254
  %cmp = icmp sgt i32 %1, 0, !dbg !2463
  br i1 %cmp, label %if.then, label %if.end, !dbg !2464

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_BufferError, align 8, !dbg !2465, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %2, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.4, i32 0, i32 0)), !dbg !2467
  store i32 0, i32* %retval, !dbg !2468
  br label %return, !dbg !2468

if.end:                                           ; preds = %entry
  store i32 1, i32* %retval, !dbg !2469
  br label %return, !dbg !2469

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, !dbg !2470
  ret i32 %3, !dbg !2470
}

declare void @PyObject_Free(i8*) #2

declare i8* @PyObject_Realloc(i8*, i64) #2

; Function Attrs: nounwind uwtable
define %struct._object* @PyByteArray_Concat(%struct._object* %a, %struct._object* %b) #0 {
entry:
  %a.addr = alloca %struct._object*, align 8
  %b.addr = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %va = alloca %struct.bufferinfo, align 8
  %vb = alloca %struct.bufferinfo, align 8
  %result = alloca %struct.PyByteArrayObject*, align 8
  store %struct._object* %a, %struct._object** %a.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %a.addr, metadata !509, metadata !2123), !dbg !2471
  store %struct._object* %b, %struct._object** %b.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %b.addr, metadata !510, metadata !2123), !dbg !2472
  %0 = bitcast i64* %size to i8*, !dbg !2473
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !2473
  call void @llvm.dbg.declare(metadata i64* %size, metadata !511, metadata !2123), !dbg !2474
  %1 = bitcast %struct.bufferinfo* %va to i8*, !dbg !2475
  call void @llvm.lifetime.start(i64 80, i8* %1) #3, !dbg !2475
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %va, metadata !512, metadata !2123), !dbg !2476
  %2 = bitcast %struct.bufferinfo* %vb to i8*, !dbg !2475
  call void @llvm.lifetime.start(i64 80, i8* %2) #3, !dbg !2475
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %vb, metadata !513, metadata !2123), !dbg !2477
  %3 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !2478
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !2478
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %result, metadata !514, metadata !2123), !dbg !2479
  store %struct.PyByteArrayObject* null, %struct.PyByteArrayObject** %result, align 8, !dbg !2479, !tbaa !2119
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %va, i32 0, i32 2, !dbg !2480
  store i64 -1, i64* %len, align 8, !dbg !2481, !tbaa !2482
  %len1 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vb, i32 0, i32 2, !dbg !2484
  store i64 -1, i64* %len1, align 8, !dbg !2485, !tbaa !2482
  %4 = load %struct._object*, %struct._object** %a.addr, align 8, !dbg !2486, !tbaa !2119
  %call = call i64 @_getbuffer(%struct._object* %4, %struct.bufferinfo* %va), !dbg !2488
  %cmp = icmp slt i64 %call, 0, !dbg !2489
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2490

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct._object*, %struct._object** %b.addr, align 8, !dbg !2491, !tbaa !2119
  %call2 = call i64 @_getbuffer(%struct._object* %5, %struct.bufferinfo* %vb), !dbg !2492
  %cmp3 = icmp slt i64 %call2, 0, !dbg !2493
  br i1 %cmp3, label %if.then, label %if.end, !dbg !2494

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !2495, !tbaa !2119
  %7 = load %struct._object*, %struct._object** %a.addr, align 8, !dbg !2497, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1, !dbg !2498
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2498, !tbaa !2203
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 1, !dbg !2499
  %9 = load i8*, i8** %tp_name, align 8, !dbg !2499, !tbaa !2500
  %10 = load %struct._object*, %struct._object** %b.addr, align 8, !dbg !2501, !tbaa !2119
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !2502
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8, !dbg !2502, !tbaa !2203
  %tp_name5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 1, !dbg !2503
  %12 = load i8*, i8** %tp_name5, align 8, !dbg !2503, !tbaa !2500
  %call6 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %6, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i32 0, i32 0), i8* %9, i8* %12), !dbg !2504
  br label %done, !dbg !2505

if.end:                                           ; preds = %lor.lhs.false
  %len7 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %va, i32 0, i32 2, !dbg !2506
  %13 = load i64, i64* %len7, align 8, !dbg !2506, !tbaa !2482
  %len8 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vb, i32 0, i32 2, !dbg !2507
  %14 = load i64, i64* %len8, align 8, !dbg !2507, !tbaa !2482
  %add = add i64 %13, %14, !dbg !2508
  store i64 %add, i64* %size, align 8, !dbg !2509, !tbaa !2129
  %15 = load i64, i64* %size, align 8, !dbg !2510, !tbaa !2129
  %cmp9 = icmp slt i64 %15, 0, !dbg !2512
  br i1 %cmp9, label %if.then.10, label %if.end.12, !dbg !2513

if.then.10:                                       ; preds = %if.end
  %call11 = call %struct._object* @PyErr_NoMemory(), !dbg !2514
  br label %done, !dbg !2516

if.end.12:                                        ; preds = %if.end
  %16 = load i64, i64* %size, align 8, !dbg !2517, !tbaa !2129
  %call13 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %16), !dbg !2518
  %17 = bitcast %struct._object* %call13 to %struct.PyByteArrayObject*, !dbg !2519
  store %struct.PyByteArrayObject* %17, %struct.PyByteArrayObject** %result, align 8, !dbg !2520, !tbaa !2119
  %18 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !2521, !tbaa !2119
  %cmp14 = icmp ne %struct.PyByteArrayObject* %18, null, !dbg !2523
  br i1 %cmp14, label %if.then.15, label %if.end.21, !dbg !2524

if.then.15:                                       ; preds = %if.end.12
  %19 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !2525, !tbaa !2119
  %ob_bytes = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %19, i32 0, i32 2, !dbg !2527
  %20 = load i8*, i8** %ob_bytes, align 8, !dbg !2527, !tbaa !2166
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %va, i32 0, i32 0, !dbg !2528
  %21 = load i8*, i8** %buf, align 8, !dbg !2528, !tbaa !2529
  %len16 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %va, i32 0, i32 2, !dbg !2530
  %22 = load i64, i64* %len16, align 8, !dbg !2530, !tbaa !2482
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 %22, i32 1, i1 false), !dbg !2531
  %23 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !2532, !tbaa !2119
  %ob_bytes17 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %23, i32 0, i32 2, !dbg !2533
  %24 = load i8*, i8** %ob_bytes17, align 8, !dbg !2533, !tbaa !2166
  %len18 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %va, i32 0, i32 2, !dbg !2534
  %25 = load i64, i64* %len18, align 8, !dbg !2534, !tbaa !2482
  %add.ptr = getelementptr i8, i8* %24, i64 %25, !dbg !2535
  %buf19 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vb, i32 0, i32 0, !dbg !2536
  %26 = load i8*, i8** %buf19, align 8, !dbg !2536, !tbaa !2529
  %len20 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vb, i32 0, i32 2, !dbg !2537
  %27 = load i64, i64* %len20, align 8, !dbg !2537, !tbaa !2482
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %26, i64 %27, i32 1, i1 false), !dbg !2538
  br label %if.end.21, !dbg !2539

if.end.21:                                        ; preds = %if.then.15, %if.end.12
  br label %done, !dbg !2540

done:                                             ; preds = %if.end.21, %if.then.10, %if.then
  %len22 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %va, i32 0, i32 2, !dbg !2542
  %28 = load i64, i64* %len22, align 8, !dbg !2542, !tbaa !2482
  %cmp23 = icmp ne i64 %28, -1, !dbg !2544
  br i1 %cmp23, label %if.then.24, label %if.end.25, !dbg !2545

if.then.24:                                       ; preds = %done
  call void @PyBuffer_Release(%struct.bufferinfo* %va), !dbg !2546
  br label %if.end.25, !dbg !2546

if.end.25:                                        ; preds = %if.then.24, %done
  %len26 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vb, i32 0, i32 2, !dbg !2547
  %29 = load i64, i64* %len26, align 8, !dbg !2547, !tbaa !2482
  %cmp27 = icmp ne i64 %29, -1, !dbg !2549
  br i1 %cmp27, label %if.then.28, label %if.end.29, !dbg !2550

if.then.28:                                       ; preds = %if.end.25
  call void @PyBuffer_Release(%struct.bufferinfo* %vb), !dbg !2551
  br label %if.end.29, !dbg !2551

if.end.29:                                        ; preds = %if.then.28, %if.end.25
  %30 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !2552, !tbaa !2119
  %31 = bitcast %struct.PyByteArrayObject* %30 to %struct._object*, !dbg !2553
  %32 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !2554
  call void @llvm.lifetime.end(i64 8, i8* %32) #3, !dbg !2554
  %33 = bitcast %struct.bufferinfo* %vb to i8*, !dbg !2554
  call void @llvm.lifetime.end(i64 80, i8* %33) #3, !dbg !2554
  %34 = bitcast %struct.bufferinfo* %va to i8*, !dbg !2554
  call void @llvm.lifetime.end(i64 80, i8* %34) #3, !dbg !2554
  %35 = bitcast i64* %size to i8*, !dbg !2554
  call void @llvm.lifetime.end(i64 8, i8* %35) #3, !dbg !2554
  ret %struct._object* %31, !dbg !2555
}

; Function Attrs: nounwind uwtable
define internal i64 @_getbuffer(%struct._object* %obj, %struct.bufferinfo* %view) #0 {
entry:
  %retval = alloca i64, align 8
  %obj.addr = alloca %struct._object*, align 8
  %view.addr = alloca %struct.bufferinfo*, align 8
  %buffer = alloca %struct.PyBufferProcs*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %obj, %struct._object** %obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %obj.addr, metadata !524, metadata !2123), !dbg !2556
  store %struct.bufferinfo* %view, %struct.bufferinfo** %view.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %view.addr, metadata !525, metadata !2123), !dbg !2557
  %0 = bitcast %struct.PyBufferProcs** %buffer to i8*, !dbg !2558
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !2558
  call void @llvm.dbg.declare(metadata %struct.PyBufferProcs** %buffer, metadata !526, metadata !2123), !dbg !2559
  %1 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !2560, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !2561
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2561, !tbaa !2203
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 18, !dbg !2562
  %3 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer, align 8, !dbg !2562, !tbaa !2563
  store %struct.PyBufferProcs* %3, %struct.PyBufferProcs** %buffer, align 8, !dbg !2559, !tbaa !2119
  %4 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %buffer, align 8, !dbg !2564, !tbaa !2119
  %cmp = icmp eq %struct.PyBufferProcs* %4, null, !dbg !2566
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2567

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %buffer, align 8, !dbg !2568, !tbaa !2119
  %bf_getbuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %5, i32 0, i32 0, !dbg !2570
  %6 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer, align 8, !dbg !2570, !tbaa !2571
  %cmp1 = icmp eq i32 (%struct._object*, %struct.bufferinfo*, i32)* %6, null, !dbg !2573
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2574

if.then:                                          ; preds = %lor.lhs.false, %entry
  %7 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !2575, !tbaa !2119
  %8 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !2577, !tbaa !2119
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1, !dbg !2578
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8, !dbg !2578, !tbaa !2203
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 1, !dbg !2579
  %10 = load i8*, i8** %tp_name, align 8, !dbg !2579, !tbaa !2500
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %7, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.5, i32 0, i32 0), i8* %10), !dbg !2580
  store i64 -1, i64* %retval, !dbg !2581
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2581

if.end:                                           ; preds = %lor.lhs.false
  %11 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %buffer, align 8, !dbg !2582, !tbaa !2119
  %bf_getbuffer3 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %11, i32 0, i32 0, !dbg !2584
  %12 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer3, align 8, !dbg !2584, !tbaa !2571
  %13 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !2585, !tbaa !2119
  %14 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !2586, !tbaa !2119
  %call4 = call i32 %12(%struct._object* %13, %struct.bufferinfo* %14, i32 0), !dbg !2582
  %cmp5 = icmp slt i32 %call4, 0, !dbg !2587
  br i1 %cmp5, label %if.then.6, label %if.end.7, !dbg !2588

if.then.6:                                        ; preds = %if.end
  store i64 -1, i64* %retval, !dbg !2589
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2589

if.end.7:                                         ; preds = %if.end
  %15 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !2590, !tbaa !2119
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %15, i32 0, i32 2, !dbg !2591
  %16 = load i64, i64* %len, align 8, !dbg !2591, !tbaa !2482
  store i64 %16, i64* %retval, !dbg !2592
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2592

cleanup:                                          ; preds = %if.end.7, %if.then.6, %if.then
  %17 = bitcast %struct.PyBufferProcs** %buffer to i8*, !dbg !2593
  call void @llvm.lifetime.end(i64 8, i8* %17) #3, !dbg !2593
  %18 = load i64, i64* %retval, !dbg !2593
  ret i64 %18, !dbg !2593
}

declare %struct._object* @PyErr_Format(%struct._object*, i8*, ...) #2

declare void @PyBuffer_Release(%struct.bufferinfo*) #2

; Function Attrs: nounwind uwtable
define internal void @bytearray_dealloc(%struct.PyByteArrayObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !531, metadata !2123), !dbg !2594
  %0 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !2595, !tbaa !2119
  %ob_exports = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %0, i32 0, i32 4, !dbg !2597
  %1 = load i32, i32* %ob_exports, align 4, !dbg !2597, !tbaa !2254
  %cmp = icmp sgt i32 %1, 0, !dbg !2598
  br i1 %cmp, label %if.then, label %if.end, !dbg !2599

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8, !dbg !2600, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %2, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.6, i32 0, i32 0)), !dbg !2602
  call void @PyErr_Print(), !dbg !2603
  br label %if.end, !dbg !2604

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !2605, !tbaa !2119
  %ob_bytes = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %3, i32 0, i32 2, !dbg !2607
  %4 = load i8*, i8** %ob_bytes, align 8, !dbg !2607, !tbaa !2166
  %cmp1 = icmp ne i8* %4, null, !dbg !2608
  br i1 %cmp1, label %if.then.2, label %if.end.4, !dbg !2609

if.then.2:                                        ; preds = %if.end
  %5 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !2610, !tbaa !2119
  %ob_bytes3 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %5, i32 0, i32 2, !dbg !2612
  %6 = load i8*, i8** %ob_bytes3, align 8, !dbg !2612, !tbaa !2166
  call void @PyObject_Free(i8* %6), !dbg !2613
  br label %if.end.4, !dbg !2614

if.end.4:                                         ; preds = %if.then.2, %if.end
  %7 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !2615, !tbaa !2119
  %8 = bitcast %struct.PyByteArrayObject* %7 to %struct._object*, !dbg !2616
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1, !dbg !2617
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2617, !tbaa !2203
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 38, !dbg !2618
  %10 = load void (i8*)*, void (i8*)** %tp_free, align 8, !dbg !2618, !tbaa !2619
  %11 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !2620, !tbaa !2119
  %12 = bitcast %struct.PyByteArrayObject* %11 to %struct._object*, !dbg !2621
  %13 = bitcast %struct._object* %12 to i8*, !dbg !2621
  call void %10(i8* %13), !dbg !2622
  ret void, !dbg !2623
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_repr(%struct.PyByteArrayObject* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %quote_prefix = alloca i8*, align 8
  %quote_postfix = alloca i8*, align 8
  %length = alloca i64, align 8
  %newsize = alloca i64, align 8
  %v = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %bytes = alloca i8*, align 8
  %c = alloca i8, align 1
  %p = alloca i8*, align 8
  %quote = alloca i32, align 4
  %test = alloca i8*, align 8
  %start = alloca i8*, align 8
  %buffer = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !536, metadata !2123), !dbg !2624
  %0 = bitcast i8** %quote_prefix to i8*, !dbg !2625
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !2625
  call void @llvm.dbg.declare(metadata i8** %quote_prefix, metadata !537, metadata !2123), !dbg !2626
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i32 0, i32 0), i8** %quote_prefix, align 8, !dbg !2626, !tbaa !2119
  %1 = bitcast i8** %quote_postfix to i8*, !dbg !2627
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !2627
  call void @llvm.dbg.declare(metadata i8** %quote_postfix, metadata !538, metadata !2123), !dbg !2628
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0), i8** %quote_postfix, align 8, !dbg !2628, !tbaa !2119
  %2 = bitcast i64* %length to i8*, !dbg !2629
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !2629
  call void @llvm.dbg.declare(metadata i64* %length, metadata !539, metadata !2123), !dbg !2630
  %3 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !2631, !tbaa !2119
  %4 = bitcast %struct.PyByteArrayObject* %3 to %struct.PyVarObject*, !dbg !2632
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %4, i32 0, i32 1, !dbg !2633
  %5 = load i64, i64* %ob_size, align 8, !dbg !2633, !tbaa !2239
  store i64 %5, i64* %length, align 8, !dbg !2630, !tbaa !2129
  %6 = bitcast i64* %newsize to i8*, !dbg !2634
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !2634
  call void @llvm.dbg.declare(metadata i64* %newsize, metadata !540, metadata !2123), !dbg !2635
  %7 = bitcast %struct._object** %v to i8*, !dbg !2636
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !2636
  call void @llvm.dbg.declare(metadata %struct._object** %v, metadata !541, metadata !2123), !dbg !2637
  %8 = bitcast i64* %i to i8*, !dbg !2638
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !2638
  call void @llvm.dbg.declare(metadata i64* %i, metadata !542, metadata !2123), !dbg !2639
  %9 = bitcast i8** %bytes to i8*, !dbg !2640
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !2640
  call void @llvm.dbg.declare(metadata i8** %bytes, metadata !543, metadata !2123), !dbg !2641
  call void @llvm.lifetime.start(i64 1, i8* %c) #3, !dbg !2642
  call void @llvm.dbg.declare(metadata i8* %c, metadata !544, metadata !2123), !dbg !2643
  %10 = bitcast i8** %p to i8*, !dbg !2644
  call void @llvm.lifetime.start(i64 8, i8* %10) #3, !dbg !2644
  call void @llvm.dbg.declare(metadata i8** %p, metadata !545, metadata !2123), !dbg !2645
  %11 = bitcast i32* %quote to i8*, !dbg !2646
  call void @llvm.lifetime.start(i64 4, i8* %11) #3, !dbg !2646
  call void @llvm.dbg.declare(metadata i32* %quote, metadata !546, metadata !2123), !dbg !2647
  %12 = bitcast i8** %test to i8*, !dbg !2648
  call void @llvm.lifetime.start(i64 8, i8* %12) #3, !dbg !2648
  call void @llvm.dbg.declare(metadata i8** %test, metadata !547, metadata !2123), !dbg !2649
  %13 = bitcast i8** %start to i8*, !dbg !2648
  call void @llvm.lifetime.start(i64 8, i8* %13) #3, !dbg !2648
  call void @llvm.dbg.declare(metadata i8** %start, metadata !548, metadata !2123), !dbg !2650
  %14 = bitcast i8** %buffer to i8*, !dbg !2651
  call void @llvm.lifetime.start(i64 8, i8* %14) #3, !dbg !2651
  call void @llvm.dbg.declare(metadata i8** %buffer, metadata !549, metadata !2123), !dbg !2652
  %15 = load i64, i64* %length, align 8, !dbg !2653, !tbaa !2129
  %cmp = icmp sgt i64 %15, 2305843009213693948, !dbg !2655
  br i1 %cmp, label %if.then, label %if.end, !dbg !2656

if.then:                                          ; preds = %entry
  %16 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !2657, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.9, i32 0, i32 0)), !dbg !2659
  store %struct._object* null, %struct._object** %retval, !dbg !2660
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2660

if.end:                                           ; preds = %entry
  %17 = load i64, i64* %length, align 8, !dbg !2661, !tbaa !2129
  %mul = mul i64 %17, 4, !dbg !2662
  %add = add i64 15, %mul, !dbg !2663
  store i64 %add, i64* %newsize, align 8, !dbg !2664, !tbaa !2129
  %18 = load i64, i64* %newsize, align 8, !dbg !2665, !tbaa !2129
  %call = call i8* @PyObject_Malloc(i64 %18), !dbg !2666
  store i8* %call, i8** %buffer, align 8, !dbg !2667, !tbaa !2119
  %19 = load i8*, i8** %buffer, align 8, !dbg !2668, !tbaa !2119
  %cmp1 = icmp eq i8* %19, null, !dbg !2670
  br i1 %cmp1, label %if.then.2, label %if.end.4, !dbg !2671

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @PyErr_NoMemory(), !dbg !2672
  store %struct._object* null, %struct._object** %retval, !dbg !2674
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2674

if.end.4:                                         ; preds = %if.end
  store i32 39, i32* %quote, align 4, !dbg !2675, !tbaa !2676
  %20 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !2677, !tbaa !2119
  %21 = bitcast %struct.PyByteArrayObject* %20 to %struct.PyVarObject*, !dbg !2678
  %ob_size5 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %21, i32 0, i32 1, !dbg !2679
  %22 = load i64, i64* %ob_size5, align 8, !dbg !2679, !tbaa !2239
  %tobool = icmp ne i64 %22, 0, !dbg !2680
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2680

cond.true:                                        ; preds = %if.end.4
  %23 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !2681, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %23, i32 0, i32 3, !dbg !2683
  %24 = load i8*, i8** %ob_start, align 8, !dbg !2683, !tbaa !2250
  br label %cond.end, !dbg !2680

cond.false:                                       ; preds = %if.end.4
  br label %cond.end, !dbg !2684

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %24, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !2680
  store i8* %cond, i8** %start, align 8, !dbg !2686, !tbaa !2119
  %25 = load i8*, i8** %start, align 8, !dbg !2689, !tbaa !2119
  store i8* %25, i8** %test, align 8, !dbg !2691, !tbaa !2119
  br label %for.cond, !dbg !2692

for.cond:                                         ; preds = %for.inc, %cond.end
  %26 = load i8*, i8** %test, align 8, !dbg !2693, !tbaa !2119
  %27 = load i8*, i8** %start, align 8, !dbg !2697, !tbaa !2119
  %28 = load i64, i64* %length, align 8, !dbg !2698, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %27, i64 %28, !dbg !2699
  %cmp6 = icmp ult i8* %26, %add.ptr, !dbg !2700
  br i1 %cmp6, label %for.body, label %for.end, !dbg !2701

for.body:                                         ; preds = %for.cond
  %29 = load i8*, i8** %test, align 8, !dbg !2702, !tbaa !2119
  %30 = load i8, i8* %29, align 1, !dbg !2705, !tbaa !2233
  %conv = sext i8 %30 to i32, !dbg !2705
  %cmp7 = icmp eq i32 %conv, 34, !dbg !2706
  br i1 %cmp7, label %if.then.9, label %if.else, !dbg !2707

if.then.9:                                        ; preds = %for.body
  store i32 39, i32* %quote, align 4, !dbg !2708, !tbaa !2676
  br label %for.end, !dbg !2710

if.else:                                          ; preds = %for.body
  %31 = load i8*, i8** %test, align 8, !dbg !2711, !tbaa !2119
  %32 = load i8, i8* %31, align 1, !dbg !2713, !tbaa !2233
  %conv10 = sext i8 %32 to i32, !dbg !2713
  %cmp11 = icmp eq i32 %conv10, 39, !dbg !2714
  br i1 %cmp11, label %if.then.13, label %if.end.14, !dbg !2715

if.then.13:                                       ; preds = %if.else
  store i32 34, i32* %quote, align 4, !dbg !2716, !tbaa !2676
  br label %if.end.14, !dbg !2717

if.end.14:                                        ; preds = %if.then.13, %if.else
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14
  br label %for.inc, !dbg !2718

for.inc:                                          ; preds = %if.end.15
  %33 = load i8*, i8** %test, align 8, !dbg !2719, !tbaa !2119
  %incdec.ptr = getelementptr i8, i8* %33, i32 1, !dbg !2719
  store i8* %incdec.ptr, i8** %test, align 8, !dbg !2719, !tbaa !2119
  br label %for.cond, !dbg !2720

for.end:                                          ; preds = %if.then.9, %for.cond
  %34 = load i8*, i8** %buffer, align 8, !dbg !2721, !tbaa !2119
  store i8* %34, i8** %p, align 8, !dbg !2722, !tbaa !2119
  br label %while.cond, !dbg !2723

while.cond:                                       ; preds = %while.body, %for.end
  %35 = load i8*, i8** %quote_prefix, align 8, !dbg !2724, !tbaa !2119
  %36 = load i8, i8* %35, align 1, !dbg !2726, !tbaa !2233
  %tobool16 = icmp ne i8 %36, 0, !dbg !2723
  br i1 %tobool16, label %while.body, label %while.end, !dbg !2723

while.body:                                       ; preds = %while.cond
  %37 = load i8*, i8** %quote_prefix, align 8, !dbg !2727, !tbaa !2119
  %incdec.ptr17 = getelementptr i8, i8* %37, i32 1, !dbg !2727
  store i8* %incdec.ptr17, i8** %quote_prefix, align 8, !dbg !2727, !tbaa !2119
  %38 = load i8, i8* %37, align 1, !dbg !2728, !tbaa !2233
  %39 = load i8*, i8** %p, align 8, !dbg !2729, !tbaa !2119
  %incdec.ptr18 = getelementptr i8, i8* %39, i32 1, !dbg !2729
  store i8* %incdec.ptr18, i8** %p, align 8, !dbg !2729, !tbaa !2119
  store i8 %38, i8* %39, align 1, !dbg !2730, !tbaa !2233
  br label %while.cond, !dbg !2723

while.end:                                        ; preds = %while.cond
  %40 = load i32, i32* %quote, align 4, !dbg !2731, !tbaa !2676
  %conv19 = trunc i32 %40 to i8, !dbg !2731
  %41 = load i8*, i8** %p, align 8, !dbg !2732, !tbaa !2119
  %incdec.ptr20 = getelementptr i8, i8* %41, i32 1, !dbg !2732
  store i8* %incdec.ptr20, i8** %p, align 8, !dbg !2732, !tbaa !2119
  store i8 %conv19, i8* %41, align 1, !dbg !2733, !tbaa !2233
  %42 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !2734, !tbaa !2119
  %43 = bitcast %struct.PyByteArrayObject* %42 to %struct.PyVarObject*, !dbg !2735
  %ob_size21 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %43, i32 0, i32 1, !dbg !2736
  %44 = load i64, i64* %ob_size21, align 8, !dbg !2736, !tbaa !2239
  %tobool22 = icmp ne i64 %44, 0, !dbg !2737
  br i1 %tobool22, label %cond.true.23, label %cond.false.25, !dbg !2737

cond.true.23:                                     ; preds = %while.end
  %45 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !2738, !tbaa !2119
  %ob_start24 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %45, i32 0, i32 3, !dbg !2739
  %46 = load i8*, i8** %ob_start24, align 8, !dbg !2739, !tbaa !2250
  br label %cond.end.26, !dbg !2737

cond.false.25:                                    ; preds = %while.end
  br label %cond.end.26, !dbg !2740

cond.end.26:                                      ; preds = %cond.false.25, %cond.true.23
  %cond27 = phi i8* [ %46, %cond.true.23 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.25 ], !dbg !2737
  store i8* %cond27, i8** %bytes, align 8, !dbg !2741, !tbaa !2119
  store i64 0, i64* %i, align 8, !dbg !2742, !tbaa !2129
  br label %for.cond.28, !dbg !2744

for.cond.28:                                      ; preds = %for.inc.98, %cond.end.26
  %47 = load i64, i64* %i, align 8, !dbg !2745, !tbaa !2129
  %48 = load i64, i64* %length, align 8, !dbg !2749, !tbaa !2129
  %cmp29 = icmp slt i64 %47, %48, !dbg !2750
  br i1 %cmp29, label %for.body.31, label %for.end.99, !dbg !2751

for.body.31:                                      ; preds = %for.cond.28
  %49 = load i64, i64* %i, align 8, !dbg !2752, !tbaa !2129
  %50 = load i8*, i8** %bytes, align 8, !dbg !2754, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %50, i64 %49, !dbg !2754
  %51 = load i8, i8* %arrayidx, align 1, !dbg !2754, !tbaa !2233
  store i8 %51, i8* %c, align 1, !dbg !2755, !tbaa !2233
  %52 = load i8, i8* %c, align 1, !dbg !2756, !tbaa !2233
  %conv32 = sext i8 %52 to i32, !dbg !2756
  %cmp33 = icmp eq i32 %conv32, 39, !dbg !2758
  br i1 %cmp33, label %if.then.38, label %lor.lhs.false, !dbg !2759

lor.lhs.false:                                    ; preds = %for.body.31
  %53 = load i8, i8* %c, align 1, !dbg !2760, !tbaa !2233
  %conv35 = sext i8 %53 to i32, !dbg !2760
  %cmp36 = icmp eq i32 %conv35, 92, !dbg !2762
  br i1 %cmp36, label %if.then.38, label %if.else.41, !dbg !2763

if.then.38:                                       ; preds = %lor.lhs.false, %for.body.31
  %54 = load i8*, i8** %p, align 8, !dbg !2764, !tbaa !2119
  %incdec.ptr39 = getelementptr i8, i8* %54, i32 1, !dbg !2764
  store i8* %incdec.ptr39, i8** %p, align 8, !dbg !2764, !tbaa !2119
  store i8 92, i8* %54, align 1, !dbg !2765, !tbaa !2233
  %55 = load i8, i8* %c, align 1, !dbg !2766, !tbaa !2233
  %56 = load i8*, i8** %p, align 8, !dbg !2767, !tbaa !2119
  %incdec.ptr40 = getelementptr i8, i8* %56, i32 1, !dbg !2767
  store i8* %incdec.ptr40, i8** %p, align 8, !dbg !2767, !tbaa !2119
  store i8 %55, i8* %56, align 1, !dbg !2768, !tbaa !2233
  br label %if.end.97, !dbg !2769

if.else.41:                                       ; preds = %lor.lhs.false
  %57 = load i8, i8* %c, align 1, !dbg !2770, !tbaa !2233
  %conv42 = sext i8 %57 to i32, !dbg !2770
  %cmp43 = icmp eq i32 %conv42, 9, !dbg !2772
  br i1 %cmp43, label %if.then.45, label %if.else.48, !dbg !2773

if.then.45:                                       ; preds = %if.else.41
  %58 = load i8*, i8** %p, align 8, !dbg !2774, !tbaa !2119
  %incdec.ptr46 = getelementptr i8, i8* %58, i32 1, !dbg !2774
  store i8* %incdec.ptr46, i8** %p, align 8, !dbg !2774, !tbaa !2119
  store i8 92, i8* %58, align 1, !dbg !2775, !tbaa !2233
  %59 = load i8*, i8** %p, align 8, !dbg !2776, !tbaa !2119
  %incdec.ptr47 = getelementptr i8, i8* %59, i32 1, !dbg !2776
  store i8* %incdec.ptr47, i8** %p, align 8, !dbg !2776, !tbaa !2119
  store i8 116, i8* %59, align 1, !dbg !2777, !tbaa !2233
  br label %if.end.96, !dbg !2778

if.else.48:                                       ; preds = %if.else.41
  %60 = load i8, i8* %c, align 1, !dbg !2779, !tbaa !2233
  %conv49 = sext i8 %60 to i32, !dbg !2779
  %cmp50 = icmp eq i32 %conv49, 10, !dbg !2781
  br i1 %cmp50, label %if.then.52, label %if.else.55, !dbg !2782

if.then.52:                                       ; preds = %if.else.48
  %61 = load i8*, i8** %p, align 8, !dbg !2783, !tbaa !2119
  %incdec.ptr53 = getelementptr i8, i8* %61, i32 1, !dbg !2783
  store i8* %incdec.ptr53, i8** %p, align 8, !dbg !2783, !tbaa !2119
  store i8 92, i8* %61, align 1, !dbg !2784, !tbaa !2233
  %62 = load i8*, i8** %p, align 8, !dbg !2785, !tbaa !2119
  %incdec.ptr54 = getelementptr i8, i8* %62, i32 1, !dbg !2785
  store i8* %incdec.ptr54, i8** %p, align 8, !dbg !2785, !tbaa !2119
  store i8 110, i8* %62, align 1, !dbg !2786, !tbaa !2233
  br label %if.end.95, !dbg !2787

if.else.55:                                       ; preds = %if.else.48
  %63 = load i8, i8* %c, align 1, !dbg !2788, !tbaa !2233
  %conv56 = sext i8 %63 to i32, !dbg !2788
  %cmp57 = icmp eq i32 %conv56, 13, !dbg !2790
  br i1 %cmp57, label %if.then.59, label %if.else.62, !dbg !2791

if.then.59:                                       ; preds = %if.else.55
  %64 = load i8*, i8** %p, align 8, !dbg !2792, !tbaa !2119
  %incdec.ptr60 = getelementptr i8, i8* %64, i32 1, !dbg !2792
  store i8* %incdec.ptr60, i8** %p, align 8, !dbg !2792, !tbaa !2119
  store i8 92, i8* %64, align 1, !dbg !2793, !tbaa !2233
  %65 = load i8*, i8** %p, align 8, !dbg !2794, !tbaa !2119
  %incdec.ptr61 = getelementptr i8, i8* %65, i32 1, !dbg !2794
  store i8* %incdec.ptr61, i8** %p, align 8, !dbg !2794, !tbaa !2119
  store i8 114, i8* %65, align 1, !dbg !2795, !tbaa !2233
  br label %if.end.94, !dbg !2796

if.else.62:                                       ; preds = %if.else.55
  %66 = load i8, i8* %c, align 1, !dbg !2797, !tbaa !2233
  %conv63 = sext i8 %66 to i32, !dbg !2797
  %cmp64 = icmp eq i32 %conv63, 0, !dbg !2799
  br i1 %cmp64, label %if.then.66, label %if.else.71, !dbg !2800

if.then.66:                                       ; preds = %if.else.62
  %67 = load i8*, i8** %p, align 8, !dbg !2801, !tbaa !2119
  %incdec.ptr67 = getelementptr i8, i8* %67, i32 1, !dbg !2801
  store i8* %incdec.ptr67, i8** %p, align 8, !dbg !2801, !tbaa !2119
  store i8 92, i8* %67, align 1, !dbg !2802, !tbaa !2233
  %68 = load i8*, i8** %p, align 8, !dbg !2803, !tbaa !2119
  %incdec.ptr68 = getelementptr i8, i8* %68, i32 1, !dbg !2803
  store i8* %incdec.ptr68, i8** %p, align 8, !dbg !2803, !tbaa !2119
  store i8 120, i8* %68, align 1, !dbg !2804, !tbaa !2233
  %69 = load i8*, i8** %p, align 8, !dbg !2805, !tbaa !2119
  %incdec.ptr69 = getelementptr i8, i8* %69, i32 1, !dbg !2805
  store i8* %incdec.ptr69, i8** %p, align 8, !dbg !2805, !tbaa !2119
  store i8 48, i8* %69, align 1, !dbg !2806, !tbaa !2233
  %70 = load i8*, i8** %p, align 8, !dbg !2807, !tbaa !2119
  %incdec.ptr70 = getelementptr i8, i8* %70, i32 1, !dbg !2807
  store i8* %incdec.ptr70, i8** %p, align 8, !dbg !2807, !tbaa !2119
  store i8 48, i8* %70, align 1, !dbg !2808, !tbaa !2233
  br label %if.end.93, !dbg !2809

if.else.71:                                       ; preds = %if.else.62
  %71 = load i8, i8* %c, align 1, !dbg !2810, !tbaa !2233
  %conv72 = sext i8 %71 to i32, !dbg !2810
  %cmp73 = icmp slt i32 %conv72, 32, !dbg !2812
  br i1 %cmp73, label %if.then.79, label %lor.lhs.false.75, !dbg !2813

lor.lhs.false.75:                                 ; preds = %if.else.71
  %72 = load i8, i8* %c, align 1, !dbg !2814, !tbaa !2233
  %conv76 = sext i8 %72 to i32, !dbg !2814
  %cmp77 = icmp sge i32 %conv76, 127, !dbg !2816
  br i1 %cmp77, label %if.then.79, label %if.else.90, !dbg !2817

if.then.79:                                       ; preds = %lor.lhs.false.75, %if.else.71
  %73 = load i8*, i8** %p, align 8, !dbg !2818, !tbaa !2119
  %incdec.ptr80 = getelementptr i8, i8* %73, i32 1, !dbg !2818
  store i8* %incdec.ptr80, i8** %p, align 8, !dbg !2818, !tbaa !2119
  store i8 92, i8* %73, align 1, !dbg !2820, !tbaa !2233
  %74 = load i8*, i8** %p, align 8, !dbg !2821, !tbaa !2119
  %incdec.ptr81 = getelementptr i8, i8* %74, i32 1, !dbg !2821
  store i8* %incdec.ptr81, i8** %p, align 8, !dbg !2821, !tbaa !2119
  store i8 120, i8* %74, align 1, !dbg !2822, !tbaa !2233
  %75 = load i8, i8* %c, align 1, !dbg !2823, !tbaa !2233
  %conv82 = sext i8 %75 to i32, !dbg !2823
  %and = and i32 %conv82, 240, !dbg !2824
  %shr = ashr i32 %and, 4, !dbg !2825
  %idxprom = sext i32 %shr to i64, !dbg !2826
  %76 = load i8*, i8** @Py_hexdigits, align 8, !dbg !2826, !tbaa !2119
  %arrayidx83 = getelementptr i8, i8* %76, i64 %idxprom, !dbg !2826
  %77 = load i8, i8* %arrayidx83, align 1, !dbg !2826, !tbaa !2233
  %78 = load i8*, i8** %p, align 8, !dbg !2827, !tbaa !2119
  %incdec.ptr84 = getelementptr i8, i8* %78, i32 1, !dbg !2827
  store i8* %incdec.ptr84, i8** %p, align 8, !dbg !2827, !tbaa !2119
  store i8 %77, i8* %78, align 1, !dbg !2828, !tbaa !2233
  %79 = load i8, i8* %c, align 1, !dbg !2829, !tbaa !2233
  %conv85 = sext i8 %79 to i32, !dbg !2829
  %and86 = and i32 %conv85, 15, !dbg !2830
  %idxprom87 = sext i32 %and86 to i64, !dbg !2831
  %80 = load i8*, i8** @Py_hexdigits, align 8, !dbg !2831, !tbaa !2119
  %arrayidx88 = getelementptr i8, i8* %80, i64 %idxprom87, !dbg !2831
  %81 = load i8, i8* %arrayidx88, align 1, !dbg !2831, !tbaa !2233
  %82 = load i8*, i8** %p, align 8, !dbg !2832, !tbaa !2119
  %incdec.ptr89 = getelementptr i8, i8* %82, i32 1, !dbg !2832
  store i8* %incdec.ptr89, i8** %p, align 8, !dbg !2832, !tbaa !2119
  store i8 %81, i8* %82, align 1, !dbg !2833, !tbaa !2233
  br label %if.end.92, !dbg !2834

if.else.90:                                       ; preds = %lor.lhs.false.75
  %83 = load i8, i8* %c, align 1, !dbg !2835, !tbaa !2233
  %84 = load i8*, i8** %p, align 8, !dbg !2836, !tbaa !2119
  %incdec.ptr91 = getelementptr i8, i8* %84, i32 1, !dbg !2836
  store i8* %incdec.ptr91, i8** %p, align 8, !dbg !2836, !tbaa !2119
  store i8 %83, i8* %84, align 1, !dbg !2837, !tbaa !2233
  br label %if.end.92

if.end.92:                                        ; preds = %if.else.90, %if.then.79
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92, %if.then.66
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93, %if.then.59
  br label %if.end.95

if.end.95:                                        ; preds = %if.end.94, %if.then.52
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %if.then.45
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %if.then.38
  br label %for.inc.98, !dbg !2838

for.inc.98:                                       ; preds = %if.end.97
  %85 = load i64, i64* %i, align 8, !dbg !2839, !tbaa !2129
  %inc = add i64 %85, 1, !dbg !2839
  store i64 %inc, i64* %i, align 8, !dbg !2839, !tbaa !2129
  br label %for.cond.28, !dbg !2840

for.end.99:                                       ; preds = %for.cond.28
  %86 = load i32, i32* %quote, align 4, !dbg !2841, !tbaa !2676
  %conv100 = trunc i32 %86 to i8, !dbg !2841
  %87 = load i8*, i8** %p, align 8, !dbg !2842, !tbaa !2119
  %incdec.ptr101 = getelementptr i8, i8* %87, i32 1, !dbg !2842
  store i8* %incdec.ptr101, i8** %p, align 8, !dbg !2842, !tbaa !2119
  store i8 %conv100, i8* %87, align 1, !dbg !2843, !tbaa !2233
  br label %while.cond.102, !dbg !2844

while.cond.102:                                   ; preds = %while.body.104, %for.end.99
  %88 = load i8*, i8** %quote_postfix, align 8, !dbg !2845, !tbaa !2119
  %89 = load i8, i8* %88, align 1, !dbg !2846, !tbaa !2233
  %tobool103 = icmp ne i8 %89, 0, !dbg !2844
  br i1 %tobool103, label %while.body.104, label %while.end.107, !dbg !2844

while.body.104:                                   ; preds = %while.cond.102
  %90 = load i8*, i8** %quote_postfix, align 8, !dbg !2847, !tbaa !2119
  %incdec.ptr105 = getelementptr i8, i8* %90, i32 1, !dbg !2847
  store i8* %incdec.ptr105, i8** %quote_postfix, align 8, !dbg !2847, !tbaa !2119
  %91 = load i8, i8* %90, align 1, !dbg !2849, !tbaa !2233
  %92 = load i8*, i8** %p, align 8, !dbg !2850, !tbaa !2119
  %incdec.ptr106 = getelementptr i8, i8* %92, i32 1, !dbg !2850
  store i8* %incdec.ptr106, i8** %p, align 8, !dbg !2850, !tbaa !2119
  store i8 %91, i8* %92, align 1, !dbg !2851, !tbaa !2233
  br label %while.cond.102, !dbg !2844

while.end.107:                                    ; preds = %while.cond.102
  %93 = load i8*, i8** %buffer, align 8, !dbg !2852, !tbaa !2119
  %94 = load i8*, i8** %p, align 8, !dbg !2853, !tbaa !2119
  %95 = load i8*, i8** %buffer, align 8, !dbg !2854, !tbaa !2119
  %sub.ptr.lhs.cast = ptrtoint i8* %94 to i64, !dbg !2855
  %sub.ptr.rhs.cast = ptrtoint i8* %95 to i64, !dbg !2855
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !2855
  %call108 = call %struct._object* @PyUnicode_DecodeASCII(i8* %93, i64 %sub.ptr.sub, i8* null), !dbg !2856
  store %struct._object* %call108, %struct._object** %v, align 8, !dbg !2857, !tbaa !2119
  %96 = load i8*, i8** %buffer, align 8, !dbg !2858, !tbaa !2119
  call void @PyObject_Free(i8* %96), !dbg !2859
  %97 = load %struct._object*, %struct._object** %v, align 8, !dbg !2860, !tbaa !2119
  store %struct._object* %97, %struct._object** %retval, !dbg !2861
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2861

cleanup:                                          ; preds = %while.end.107, %if.then.2, %if.then
  %98 = bitcast i8** %buffer to i8*, !dbg !2862
  call void @llvm.lifetime.end(i64 8, i8* %98) #3, !dbg !2862
  %99 = bitcast i8** %start to i8*, !dbg !2862
  call void @llvm.lifetime.end(i64 8, i8* %99) #3, !dbg !2862
  %100 = bitcast i8** %test to i8*, !dbg !2862
  call void @llvm.lifetime.end(i64 8, i8* %100) #3, !dbg !2862
  %101 = bitcast i32* %quote to i8*, !dbg !2862
  call void @llvm.lifetime.end(i64 4, i8* %101) #3, !dbg !2862
  %102 = bitcast i8** %p to i8*, !dbg !2862
  call void @llvm.lifetime.end(i64 8, i8* %102) #3, !dbg !2862
  call void @llvm.lifetime.end(i64 1, i8* %c) #3, !dbg !2862
  %103 = bitcast i8** %bytes to i8*, !dbg !2862
  call void @llvm.lifetime.end(i64 8, i8* %103) #3, !dbg !2862
  %104 = bitcast i64* %i to i8*, !dbg !2862
  call void @llvm.lifetime.end(i64 8, i8* %104) #3, !dbg !2862
  %105 = bitcast %struct._object** %v to i8*, !dbg !2862
  call void @llvm.lifetime.end(i64 8, i8* %105) #3, !dbg !2862
  %106 = bitcast i64* %newsize to i8*, !dbg !2862
  call void @llvm.lifetime.end(i64 8, i8* %106) #3, !dbg !2862
  %107 = bitcast i64* %length to i8*, !dbg !2862
  call void @llvm.lifetime.end(i64 8, i8* %107) #3, !dbg !2862
  %108 = bitcast i8** %quote_postfix to i8*, !dbg !2862
  call void @llvm.lifetime.end(i64 8, i8* %108) #3, !dbg !2862
  %109 = bitcast i8** %quote_prefix to i8*, !dbg !2862
  call void @llvm.lifetime.end(i64 8, i8* %109) #3, !dbg !2862
  %110 = load %struct._object*, %struct._object** %retval, !dbg !2862
  ret %struct._object* %110, !dbg !2862
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_str(%struct._object* %op) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %op.addr = alloca %struct._object*, align 8
  store %struct._object* %op, %struct._object** %op.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %op.addr, metadata !773, metadata !2123), !dbg !2863
  %0 = load i32, i32* @Py_BytesWarningFlag, align 4, !dbg !2864, !tbaa !2676
  %tobool = icmp ne i32 %0, 0, !dbg !2864
  br i1 %tobool, label %if.then, label %if.end.3, !dbg !2866

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_BytesWarning, align 8, !dbg !2867, !tbaa !2119
  %call = call i32 @PyErr_WarnEx(%struct._object* %1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.19, i32 0, i32 0), i64 1), !dbg !2870
  %tobool1 = icmp ne i32 %call, 0, !dbg !2870
  br i1 %tobool1, label %if.then.2, label %if.end, !dbg !2871

if.then.2:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval, !dbg !2872
  br label %return, !dbg !2872

if.end:                                           ; preds = %if.then
  br label %if.end.3, !dbg !2873

if.end.3:                                         ; preds = %if.end, %entry
  %2 = load %struct._object*, %struct._object** %op.addr, align 8, !dbg !2874, !tbaa !2119
  %3 = bitcast %struct._object* %2 to %struct.PyByteArrayObject*, !dbg !2875
  %call4 = call %struct._object* @bytearray_repr(%struct.PyByteArrayObject* %3), !dbg !2876
  store %struct._object* %call4, %struct._object** %retval, !dbg !2877
  br label %return, !dbg !2877

return:                                           ; preds = %if.end.3, %if.then.2
  %4 = load %struct._object*, %struct._object** %retval, !dbg !2878
  ret %struct._object* %4, !dbg !2878
}

declare %struct._object* @PyObject_GenericGetAttr(%struct._object*, %struct._object*) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_richcompare(%struct._object* %self, %struct._object* %other, i32 %op) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %op.addr = alloca i32, align 4
  %self_size = alloca i64, align 8
  %other_size = alloca i64, align 8
  %self_bytes = alloca %struct.bufferinfo, align 8
  %other_bytes = alloca %struct.bufferinfo, align 8
  %res = alloca %struct._object*, align 8
  %minsize = alloca i64, align 8
  %cmp = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !791, metadata !2123), !dbg !2879
  store %struct._object* %other, %struct._object** %other.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %other.addr, metadata !792, metadata !2123), !dbg !2880
  store i32 %op, i32* %op.addr, align 4, !tbaa !2676
  call void @llvm.dbg.declare(metadata i32* %op.addr, metadata !793, metadata !2123), !dbg !2881
  %0 = bitcast i64* %self_size to i8*, !dbg !2882
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !2882
  call void @llvm.dbg.declare(metadata i64* %self_size, metadata !794, metadata !2123), !dbg !2883
  %1 = bitcast i64* %other_size to i8*, !dbg !2882
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !2882
  call void @llvm.dbg.declare(metadata i64* %other_size, metadata !795, metadata !2123), !dbg !2884
  %2 = bitcast %struct.bufferinfo* %self_bytes to i8*, !dbg !2885
  call void @llvm.lifetime.start(i64 80, i8* %2) #3, !dbg !2885
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %self_bytes, metadata !796, metadata !2123), !dbg !2886
  %3 = bitcast %struct.bufferinfo* %other_bytes to i8*, !dbg !2885
  call void @llvm.lifetime.start(i64 80, i8* %3) #3, !dbg !2885
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %other_bytes, metadata !797, metadata !2123), !dbg !2887
  %4 = bitcast %struct._object** %res to i8*, !dbg !2888
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !2888
  call void @llvm.dbg.declare(metadata %struct._object** %res, metadata !798, metadata !2123), !dbg !2889
  %5 = bitcast i64* %minsize to i8*, !dbg !2890
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !2890
  call void @llvm.dbg.declare(metadata i64* %minsize, metadata !799, metadata !2123), !dbg !2891
  %6 = bitcast i32* %cmp to i8*, !dbg !2892
  call void @llvm.lifetime.start(i64 4, i8* %6) #3, !dbg !2892
  call void @llvm.dbg.declare(metadata i32* %cmp, metadata !800, metadata !2123), !dbg !2893
  %7 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2894, !tbaa !2119
  %call = call i32 @PyObject_IsInstance(%struct._object* %7, %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyUnicode_Type, i32 0, i32 0, i32 0)), !dbg !2896
  %tobool = icmp ne i32 %call, 0, !dbg !2896
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !2897

lor.lhs.false:                                    ; preds = %entry
  %8 = load %struct._object*, %struct._object** %other.addr, align 8, !dbg !2898, !tbaa !2119
  %call1 = call i32 @PyObject_IsInstance(%struct._object* %8, %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyUnicode_Type, i32 0, i32 0, i32 0)), !dbg !2899
  %tobool2 = icmp ne i32 %call1, 0, !dbg !2899
  br i1 %tobool2, label %if.then, label %if.end.12, !dbg !2900

if.then:                                          ; preds = %lor.lhs.false, %entry
  %9 = load i32, i32* @Py_BytesWarningFlag, align 4, !dbg !2901, !tbaa !2676
  %tobool3 = icmp ne i32 %9, 0, !dbg !2901
  br i1 %tobool3, label %land.lhs.true, label %if.end.11, !dbg !2904

land.lhs.true:                                    ; preds = %if.then
  %10 = load i32, i32* %op.addr, align 4, !dbg !2905, !tbaa !2676
  %cmp4 = icmp eq i32 %10, 2, !dbg !2907
  br i1 %cmp4, label %if.then.7, label %lor.lhs.false.5, !dbg !2908

lor.lhs.false.5:                                  ; preds = %land.lhs.true
  %11 = load i32, i32* %op.addr, align 4, !dbg !2909, !tbaa !2676
  %cmp6 = icmp eq i32 %11, 3, !dbg !2911
  br i1 %cmp6, label %if.then.7, label %if.end.11, !dbg !2912

if.then.7:                                        ; preds = %lor.lhs.false.5, %land.lhs.true
  %12 = load %struct._object*, %struct._object** @PyExc_BytesWarning, align 8, !dbg !2913, !tbaa !2119
  %call8 = call i32 @PyErr_WarnEx(%struct._object* %12, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.20, i32 0, i32 0), i64 1), !dbg !2916
  %tobool9 = icmp ne i32 %call8, 0, !dbg !2916
  br i1 %tobool9, label %if.then.10, label %if.end, !dbg !2917

if.then.10:                                       ; preds = %if.then.7
  store %struct._object* null, %struct._object** %retval, !dbg !2918
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2918

if.end:                                           ; preds = %if.then.7
  br label %if.end.11, !dbg !2919

if.end.11:                                        ; preds = %if.end, %lor.lhs.false.5, %if.then
  %13 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8, !dbg !2920, !tbaa !2195
  %inc = add i64 %13, 1, !dbg !2920
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8, !dbg !2920, !tbaa !2195
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval, !dbg !2921
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2921

if.end.12:                                        ; preds = %lor.lhs.false
  %14 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !2922, !tbaa !2119
  %call13 = call i64 @_getbuffer(%struct._object* %14, %struct.bufferinfo* %self_bytes), !dbg !2923
  store i64 %call13, i64* %self_size, align 8, !dbg !2924, !tbaa !2129
  %15 = load i64, i64* %self_size, align 8, !dbg !2925, !tbaa !2129
  %cmp14 = icmp slt i64 %15, 0, !dbg !2927
  br i1 %cmp14, label %if.then.15, label %if.end.17, !dbg !2928

if.then.15:                                       ; preds = %if.end.12
  call void @PyErr_Clear(), !dbg !2929
  %16 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8, !dbg !2931, !tbaa !2195
  %inc16 = add i64 %16, 1, !dbg !2931
  store i64 %inc16, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8, !dbg !2931, !tbaa !2195
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval, !dbg !2932
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2932

if.end.17:                                        ; preds = %if.end.12
  %17 = load %struct._object*, %struct._object** %other.addr, align 8, !dbg !2933, !tbaa !2119
  %call18 = call i64 @_getbuffer(%struct._object* %17, %struct.bufferinfo* %other_bytes), !dbg !2934
  store i64 %call18, i64* %other_size, align 8, !dbg !2935, !tbaa !2129
  %18 = load i64, i64* %other_size, align 8, !dbg !2936, !tbaa !2129
  %cmp19 = icmp slt i64 %18, 0, !dbg !2938
  br i1 %cmp19, label %if.then.20, label %if.end.22, !dbg !2939

if.then.20:                                       ; preds = %if.end.17
  call void @PyErr_Clear(), !dbg !2940
  call void @PyBuffer_Release(%struct.bufferinfo* %self_bytes), !dbg !2942
  %19 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8, !dbg !2943, !tbaa !2195
  %inc21 = add i64 %19, 1, !dbg !2943
  store i64 %inc21, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8, !dbg !2943, !tbaa !2195
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval, !dbg !2944
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2944

if.end.22:                                        ; preds = %if.end.17
  %20 = load i64, i64* %self_size, align 8, !dbg !2945, !tbaa !2129
  %21 = load i64, i64* %other_size, align 8, !dbg !2947, !tbaa !2129
  %cmp23 = icmp ne i64 %20, %21, !dbg !2948
  br i1 %cmp23, label %land.lhs.true.24, label %if.else, !dbg !2949

land.lhs.true.24:                                 ; preds = %if.end.22
  %22 = load i32, i32* %op.addr, align 4, !dbg !2950, !tbaa !2676
  %cmp25 = icmp eq i32 %22, 2, !dbg !2952
  br i1 %cmp25, label %if.then.28, label %lor.lhs.false.26, !dbg !2953

lor.lhs.false.26:                                 ; preds = %land.lhs.true.24
  %23 = load i32, i32* %op.addr, align 4, !dbg !2954, !tbaa !2676
  %cmp27 = icmp eq i32 %23, 3, !dbg !2956
  br i1 %cmp27, label %if.then.28, label %if.else, !dbg !2957

if.then.28:                                       ; preds = %lor.lhs.false.26, %land.lhs.true.24
  %24 = load i32, i32* %op.addr, align 4, !dbg !2958, !tbaa !2676
  %cmp29 = icmp eq i32 %24, 3, !dbg !2960
  %conv = zext i1 %cmp29 to i32, !dbg !2960
  store i32 %conv, i32* %cmp, align 4, !dbg !2961, !tbaa !2676
  br label %if.end.66, !dbg !2962

if.else:                                          ; preds = %lor.lhs.false.26, %if.end.22
  %25 = load i64, i64* %self_size, align 8, !dbg !2963, !tbaa !2129
  store i64 %25, i64* %minsize, align 8, !dbg !2965, !tbaa !2129
  %26 = load i64, i64* %other_size, align 8, !dbg !2966, !tbaa !2129
  %27 = load i64, i64* %minsize, align 8, !dbg !2968, !tbaa !2129
  %cmp30 = icmp slt i64 %26, %27, !dbg !2969
  br i1 %cmp30, label %if.then.32, label %if.end.33, !dbg !2970

if.then.32:                                       ; preds = %if.else
  %28 = load i64, i64* %other_size, align 8, !dbg !2971, !tbaa !2129
  store i64 %28, i64* %minsize, align 8, !dbg !2972, !tbaa !2129
  br label %if.end.33, !dbg !2973

if.end.33:                                        ; preds = %if.then.32, %if.else
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %self_bytes, i32 0, i32 0, !dbg !2974
  %29 = load i8*, i8** %buf, align 8, !dbg !2974, !tbaa !2529
  %buf34 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %other_bytes, i32 0, i32 0, !dbg !2975
  %30 = load i8*, i8** %buf34, align 8, !dbg !2975, !tbaa !2529
  %31 = load i64, i64* %minsize, align 8, !dbg !2976, !tbaa !2129
  %call35 = call i32 @memcmp(i8* %29, i8* %30, i64 %31) #8, !dbg !2977
  store i32 %call35, i32* %cmp, align 4, !dbg !2978, !tbaa !2676
  %32 = load i32, i32* %cmp, align 4, !dbg !2979, !tbaa !2676
  %cmp36 = icmp eq i32 %32, 0, !dbg !2981
  br i1 %cmp36, label %if.then.38, label %if.end.48, !dbg !2982

if.then.38:                                       ; preds = %if.end.33
  %33 = load i64, i64* %self_size, align 8, !dbg !2983, !tbaa !2129
  %34 = load i64, i64* %other_size, align 8, !dbg !2986, !tbaa !2129
  %cmp39 = icmp slt i64 %33, %34, !dbg !2987
  br i1 %cmp39, label %if.then.41, label %if.else.42, !dbg !2988

if.then.41:                                       ; preds = %if.then.38
  store i32 -1, i32* %cmp, align 4, !dbg !2989, !tbaa !2676
  br label %if.end.47, !dbg !2990

if.else.42:                                       ; preds = %if.then.38
  %35 = load i64, i64* %self_size, align 8, !dbg !2991, !tbaa !2129
  %36 = load i64, i64* %other_size, align 8, !dbg !2993, !tbaa !2129
  %cmp43 = icmp sgt i64 %35, %36, !dbg !2994
  br i1 %cmp43, label %if.then.45, label %if.end.46, !dbg !2995

if.then.45:                                       ; preds = %if.else.42
  store i32 1, i32* %cmp, align 4, !dbg !2996, !tbaa !2676
  br label %if.end.46, !dbg !2997

if.end.46:                                        ; preds = %if.then.45, %if.else.42
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.then.41
  br label %if.end.48, !dbg !2998

if.end.48:                                        ; preds = %if.end.47, %if.end.33
  %37 = load i32, i32* %op.addr, align 4, !dbg !2999, !tbaa !2676
  br label %NodeBlock.9

NodeBlock.9:                                      ; preds = %if.end.48
  %Pivot.10 = icmp slt i32 %37, 3
  br i1 %Pivot.10, label %NodeBlock.1, label %NodeBlock.7

NodeBlock.7:                                      ; preds = %NodeBlock.9
  %Pivot.8 = icmp slt i32 %37, 4
  br i1 %Pivot.8, label %sw.bb.57, label %NodeBlock.5

NodeBlock.5:                                      ; preds = %NodeBlock.7
  %Pivot.6 = icmp slt i32 %37, 5
  br i1 %Pivot.6, label %sw.bb.60, label %LeafBlock.3

LeafBlock.3:                                      ; preds = %NodeBlock.5
  %SwitchLeaf4 = icmp eq i32 %37, 5
  br i1 %SwitchLeaf4, label %sw.bb.63, label %NewDefault

NodeBlock.1:                                      ; preds = %NodeBlock.9
  %Pivot.2 = icmp slt i32 %37, 1
  br i1 %Pivot.2, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock.1
  %Pivot = icmp slt i32 %37, 2
  br i1 %Pivot, label %sw.bb.51, label %sw.bb.54

LeafBlock:                                        ; preds = %NodeBlock.1
  %SwitchLeaf = icmp eq i32 %37, 0
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %38 = load i32, i32* %cmp, align 4, !dbg !3000, !tbaa !2676
  %cmp49 = icmp slt i32 %38, 0, !dbg !3002
  %conv50 = zext i1 %cmp49 to i32, !dbg !3002
  store i32 %conv50, i32* %cmp, align 4, !dbg !3003, !tbaa !2676
  br label %sw.epilog, !dbg !3004

sw.bb.51:                                         ; preds = %NodeBlock
  %39 = load i32, i32* %cmp, align 4, !dbg !3005, !tbaa !2676
  %cmp52 = icmp sle i32 %39, 0, !dbg !3006
  %conv53 = zext i1 %cmp52 to i32, !dbg !3006
  store i32 %conv53, i32* %cmp, align 4, !dbg !3007, !tbaa !2676
  br label %sw.epilog, !dbg !3008

sw.bb.54:                                         ; preds = %NodeBlock
  %40 = load i32, i32* %cmp, align 4, !dbg !3009, !tbaa !2676
  %cmp55 = icmp eq i32 %40, 0, !dbg !3010
  %conv56 = zext i1 %cmp55 to i32, !dbg !3010
  store i32 %conv56, i32* %cmp, align 4, !dbg !3011, !tbaa !2676
  br label %sw.epilog, !dbg !3012

sw.bb.57:                                         ; preds = %NodeBlock.7
  %41 = load i32, i32* %cmp, align 4, !dbg !3013, !tbaa !2676
  %cmp58 = icmp ne i32 %41, 0, !dbg !3014
  %conv59 = zext i1 %cmp58 to i32, !dbg !3014
  store i32 %conv59, i32* %cmp, align 4, !dbg !3015, !tbaa !2676
  br label %sw.epilog, !dbg !3016

sw.bb.60:                                         ; preds = %NodeBlock.5
  %42 = load i32, i32* %cmp, align 4, !dbg !3017, !tbaa !2676
  %cmp61 = icmp sgt i32 %42, 0, !dbg !3018
  %conv62 = zext i1 %cmp61 to i32, !dbg !3018
  store i32 %conv62, i32* %cmp, align 4, !dbg !3019, !tbaa !2676
  br label %sw.epilog, !dbg !3020

sw.bb.63:                                         ; preds = %LeafBlock.3
  %43 = load i32, i32* %cmp, align 4, !dbg !3021, !tbaa !2676
  %cmp64 = icmp sge i32 %43, 0, !dbg !3022
  %conv65 = zext i1 %cmp64 to i32, !dbg !3022
  store i32 %conv65, i32* %cmp, align 4, !dbg !3023, !tbaa !2676
  br label %sw.epilog, !dbg !3024

NewDefault:                                       ; preds = %LeafBlock.3, %LeafBlock
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %sw.bb.63, %sw.bb.60, %sw.bb.57, %sw.bb.54, %sw.bb.51, %sw.bb
  br label %if.end.66

if.end.66:                                        ; preds = %sw.epilog, %if.then.28
  %44 = load i32, i32* %cmp, align 4, !dbg !3025, !tbaa !2676
  %tobool67 = icmp ne i32 %44, 0, !dbg !3025
  %cond = select i1 %tobool67, %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0), !dbg !3025
  store %struct._object* %cond, %struct._object** %res, align 8, !dbg !3026, !tbaa !2119
  call void @PyBuffer_Release(%struct.bufferinfo* %self_bytes), !dbg !3027
  call void @PyBuffer_Release(%struct.bufferinfo* %other_bytes), !dbg !3028
  %45 = load %struct._object*, %struct._object** %res, align 8, !dbg !3029, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 0, !dbg !3030
  %46 = load i64, i64* %ob_refcnt, align 8, !dbg !3031, !tbaa !2195
  %inc68 = add i64 %46, 1, !dbg !3031
  store i64 %inc68, i64* %ob_refcnt, align 8, !dbg !3031, !tbaa !2195
  %47 = load %struct._object*, %struct._object** %res, align 8, !dbg !3032, !tbaa !2119
  store %struct._object* %47, %struct._object** %retval, !dbg !3033
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3033

cleanup:                                          ; preds = %if.end.66, %if.then.20, %if.then.15, %if.end.11, %if.then.10
  %48 = bitcast i32* %cmp to i8*, !dbg !3034
  call void @llvm.lifetime.end(i64 4, i8* %48) #3, !dbg !3034
  %49 = bitcast i64* %minsize to i8*, !dbg !3034
  call void @llvm.lifetime.end(i64 8, i8* %49) #3, !dbg !3034
  %50 = bitcast %struct._object** %res to i8*, !dbg !3034
  call void @llvm.lifetime.end(i64 8, i8* %50) #3, !dbg !3034
  %51 = bitcast %struct.bufferinfo* %other_bytes to i8*, !dbg !3034
  call void @llvm.lifetime.end(i64 80, i8* %51) #3, !dbg !3034
  %52 = bitcast %struct.bufferinfo* %self_bytes to i8*, !dbg !3034
  call void @llvm.lifetime.end(i64 80, i8* %52) #3, !dbg !3034
  %53 = bitcast i64* %other_size to i8*, !dbg !3034
  call void @llvm.lifetime.end(i64 8, i8* %53) #3, !dbg !3034
  %54 = bitcast i64* %self_size to i8*, !dbg !3034
  call void @llvm.lifetime.end(i64 8, i8* %54) #3, !dbg !3034
  %55 = load %struct._object*, %struct._object** %retval, !dbg !3034
  ret %struct._object* %55, !dbg !3034
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_iter(%struct._object* %seq) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %seq.addr = alloca %struct._object*, align 8
  %it = alloca %struct.bytesiterobject*, align 8
  %cleanup.dest.slot = alloca i32
  %g = alloca %union._gc_head*, align 8
  store %struct._object* %seq, %struct._object** %seq.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %seq.addr, metadata !1921, metadata !2123), !dbg !3035
  %0 = bitcast %struct.bytesiterobject** %it to i8*, !dbg !3036
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !3036
  call void @llvm.dbg.declare(metadata %struct.bytesiterobject** %it, metadata !1922, metadata !2123), !dbg !3037
  %1 = load %struct._object*, %struct._object** %seq.addr, align 8, !dbg !3038, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !3040
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3040, !tbaa !2203
  %cmp = icmp eq %struct._typeobject* %2, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyByteArray_Type to %struct._typeobject*), !dbg !3041
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !3042

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** %seq.addr, align 8, !dbg !3043, !tbaa !2119
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1, !dbg !3045
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !3045, !tbaa !2203
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %4, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyByteArray_Type to %struct._typeobject*)), !dbg !3046
  %tobool = icmp ne i32 %call, 0, !dbg !3046
  br i1 %tobool, label %if.end, label %if.then, !dbg !3047

if.then:                                          ; preds = %lor.lhs.false
  call void @_PyErr_BadInternalCall(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.129, i32 0, i32 0), i32 3089), !dbg !3048
  store %struct._object* null, %struct._object** %retval, !dbg !3050
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3050

if.end:                                           ; preds = %lor.lhs.false, %entry
  %call2 = call %struct._object* @_PyObject_GC_New(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyByteArrayIter_Type to %struct._typeobject*)), !dbg !3051
  %5 = bitcast %struct._object* %call2 to %struct.bytesiterobject*, !dbg !3052
  store %struct.bytesiterobject* %5, %struct.bytesiterobject** %it, align 8, !dbg !3053, !tbaa !2119
  %6 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it, align 8, !dbg !3054, !tbaa !2119
  %cmp3 = icmp eq %struct.bytesiterobject* %6, null, !dbg !3056
  br i1 %cmp3, label %if.then.4, label %if.end.5, !dbg !3057

if.then.4:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !3058
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3058

if.end.5:                                         ; preds = %if.end
  %7 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it, align 8, !dbg !3059, !tbaa !2119
  %it_index = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %7, i32 0, i32 1, !dbg !3060
  store i64 0, i64* %it_index, align 8, !dbg !3061, !tbaa !3062
  %8 = load %struct._object*, %struct._object** %seq.addr, align 8, !dbg !3064, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0, !dbg !3065
  %9 = load i64, i64* %ob_refcnt, align 8, !dbg !3066, !tbaa !2195
  %inc = add i64 %9, 1, !dbg !3066
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !3066, !tbaa !2195
  %10 = load %struct._object*, %struct._object** %seq.addr, align 8, !dbg !3067, !tbaa !2119
  %11 = bitcast %struct._object* %10 to %struct.PyByteArrayObject*, !dbg !3068
  %12 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it, align 8, !dbg !3069, !tbaa !2119
  %it_seq = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %12, i32 0, i32 2, !dbg !3070
  store %struct.PyByteArrayObject* %11, %struct.PyByteArrayObject** %it_seq, align 8, !dbg !3071, !tbaa !3072
  br label %do.body, !dbg !3073

do.body:                                          ; preds = %if.end.5
  %13 = bitcast %union._gc_head** %g to i8*, !dbg !3074
  call void @llvm.lifetime.start(i64 8, i8* %13) #3, !dbg !3074
  call void @llvm.dbg.declare(metadata %union._gc_head** %g, metadata !1923, metadata !2123), !dbg !3076
  %14 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it, align 8, !dbg !3077, !tbaa !2119
  %15 = bitcast %struct.bytesiterobject* %14 to %union._gc_head*, !dbg !3078
  %add.ptr = getelementptr %union._gc_head, %union._gc_head* %15, i64 -1, !dbg !3079
  store %union._gc_head* %add.ptr, %union._gc_head** %g, align 8, !dbg !3076, !tbaa !2119
  %16 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3080, !tbaa !2119
  %gc = bitcast %union._gc_head* %16 to %struct.anon.0*, !dbg !3082
  %gc_refs = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc, i32 0, i32 2, !dbg !3083
  %17 = load i64, i64* %gc_refs, align 8, !dbg !3083, !tbaa !3084
  %shr = ashr i64 %17, 1, !dbg !3086
  %cmp6 = icmp ne i64 %shr, -2, !dbg !3087
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !3088

if.then.7:                                        ; preds = %do.body
  call void @Py_FatalError(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.130, i32 0, i32 0)) #9, !dbg !3089
  unreachable, !dbg !3089

if.end.8:                                         ; preds = %do.body
  br label %do.body.9, !dbg !3091

do.body.9:                                        ; preds = %if.end.8
  %18 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3093, !tbaa !2119
  %gc10 = bitcast %union._gc_head* %18 to %struct.anon.0*, !dbg !3096
  %gc_refs11 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc10, i32 0, i32 2, !dbg !3097
  %19 = load i64, i64* %gc_refs11, align 8, !dbg !3097, !tbaa !3084
  %and = and i64 %19, 1, !dbg !3098
  %or = or i64 %and, -6, !dbg !3099
  %20 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3100, !tbaa !2119
  %gc12 = bitcast %union._gc_head* %20 to %struct.anon.0*, !dbg !3101
  %gc_refs13 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc12, i32 0, i32 2, !dbg !3102
  store i64 %or, i64* %gc_refs13, align 8, !dbg !3103, !tbaa !3084
  br label %do.cond, !dbg !3104

do.cond:                                          ; preds = %do.body.9
  br label %do.end, !dbg !3105

do.end:                                           ; preds = %do.cond
  %21 = load %union._gc_head*, %union._gc_head** @_PyGC_generation0, align 8, !dbg !3107, !tbaa !2119
  %22 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3109, !tbaa !2119
  %gc14 = bitcast %union._gc_head* %22 to %struct.anon.0*, !dbg !3110
  %gc_next = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc14, i32 0, i32 0, !dbg !3111
  store %union._gc_head* %21, %union._gc_head** %gc_next, align 8, !dbg !3112, !tbaa !3113
  %23 = load %union._gc_head*, %union._gc_head** @_PyGC_generation0, align 8, !dbg !3114, !tbaa !2119
  %gc15 = bitcast %union._gc_head* %23 to %struct.anon.0*, !dbg !3115
  %gc_prev = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc15, i32 0, i32 1, !dbg !3116
  %24 = load %union._gc_head*, %union._gc_head** %gc_prev, align 8, !dbg !3116, !tbaa !3117
  %25 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3118, !tbaa !2119
  %gc16 = bitcast %union._gc_head* %25 to %struct.anon.0*, !dbg !3119
  %gc_prev17 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc16, i32 0, i32 1, !dbg !3120
  store %union._gc_head* %24, %union._gc_head** %gc_prev17, align 8, !dbg !3121, !tbaa !3117
  %26 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3122, !tbaa !2119
  %27 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3123, !tbaa !2119
  %gc18 = bitcast %union._gc_head* %27 to %struct.anon.0*, !dbg !3124
  %gc_prev19 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc18, i32 0, i32 1, !dbg !3125
  %28 = load %union._gc_head*, %union._gc_head** %gc_prev19, align 8, !dbg !3125, !tbaa !3117
  %gc20 = bitcast %union._gc_head* %28 to %struct.anon.0*, !dbg !3126
  %gc_next21 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc20, i32 0, i32 0, !dbg !3127
  store %union._gc_head* %26, %union._gc_head** %gc_next21, align 8, !dbg !3128, !tbaa !3113
  %29 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3129, !tbaa !2119
  %30 = load %union._gc_head*, %union._gc_head** @_PyGC_generation0, align 8, !dbg !3130, !tbaa !2119
  %gc22 = bitcast %union._gc_head* %30 to %struct.anon.0*, !dbg !3131
  %gc_prev23 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc22, i32 0, i32 1, !dbg !3132
  store %union._gc_head* %29, %union._gc_head** %gc_prev23, align 8, !dbg !3133, !tbaa !3117
  %31 = bitcast %union._gc_head** %g to i8*, !dbg !3134
  call void @llvm.lifetime.end(i64 8, i8* %31) #3, !dbg !3134
  br label %do.cond.24, !dbg !3135

do.cond.24:                                       ; preds = %do.end
  br label %do.end.25, !dbg !3136

do.end.25:                                        ; preds = %do.cond.24
  %32 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it, align 8, !dbg !3138, !tbaa !2119
  %33 = bitcast %struct.bytesiterobject* %32 to %struct._object*, !dbg !3139
  store %struct._object* %33, %struct._object** %retval, !dbg !3140
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3140

cleanup:                                          ; preds = %do.end.25, %if.then.4, %if.then
  %34 = bitcast %struct.bytesiterobject** %it to i8*, !dbg !3141
  call void @llvm.lifetime.end(i64 8, i8* %34) #3, !dbg !3141
  %35 = load %struct._object*, %struct._object** %retval, !dbg !3141
  ret %struct._object* %35, !dbg !3141
}

; Function Attrs: nounwind uwtable
define internal i32 @bytearray_init(%struct.PyByteArrayObject* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %arg = alloca %struct._object*, align 8
  %encoding = alloca i8*, align 8
  %errors = alloca i8*, align 8
  %count = alloca i64, align 8
  %it = alloca %struct._object*, align 8
  %iternext = alloca %struct._object* (%struct._object*)*, align 8
  %cleanup.dest.slot = alloca i32
  %encoded = alloca %struct._object*, align 8
  %new = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp32 = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %view = alloca %struct.bufferinfo, align 8
  %item = alloca %struct._object*, align 8
  %rc = alloca i32, align 4
  %value = alloca i32, align 4
  %_py_decref_tmp122 = alloca %struct._object*, align 8
  %_py_decref_tmp159 = alloca %struct._object*, align 8
  %_py_decref_tmp172 = alloca %struct._object*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1837, metadata !2123), !dbg !3142
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1838, metadata !2123), !dbg !3143
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %kwds.addr, metadata !1839, metadata !2123), !dbg !3144
  %0 = bitcast %struct._object** %arg to i8*, !dbg !3145
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !3145
  call void @llvm.dbg.declare(metadata %struct._object** %arg, metadata !1840, metadata !2123), !dbg !3146
  store %struct._object* null, %struct._object** %arg, align 8, !dbg !3146, !tbaa !2119
  %1 = bitcast i8** %encoding to i8*, !dbg !3147
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !3147
  call void @llvm.dbg.declare(metadata i8** %encoding, metadata !1841, metadata !2123), !dbg !3148
  store i8* null, i8** %encoding, align 8, !dbg !3148, !tbaa !2119
  %2 = bitcast i8** %errors to i8*, !dbg !3149
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !3149
  call void @llvm.dbg.declare(metadata i8** %errors, metadata !1842, metadata !2123), !dbg !3150
  store i8* null, i8** %errors, align 8, !dbg !3150, !tbaa !2119
  %3 = bitcast i64* %count to i8*, !dbg !3151
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !3151
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1843, metadata !2123), !dbg !3152
  %4 = bitcast %struct._object** %it to i8*, !dbg !3153
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !3153
  call void @llvm.dbg.declare(metadata %struct._object** %it, metadata !1844, metadata !2123), !dbg !3154
  %5 = bitcast %struct._object* (%struct._object*)** %iternext to i8*, !dbg !3155
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !3155
  call void @llvm.dbg.declare(metadata %struct._object* (%struct._object*)** %iternext, metadata !1845, metadata !2123), !dbg !3156
  %6 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3157, !tbaa !2119
  %7 = bitcast %struct.PyByteArrayObject* %6 to %struct.PyVarObject*, !dbg !3159
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %7, i32 0, i32 1, !dbg !3160
  %8 = load i64, i64* %ob_size, align 8, !dbg !3160, !tbaa !2239
  %cmp = icmp ne i64 %8, 0, !dbg !3161
  br i1 %cmp, label %if.then, label %if.end.3, !dbg !3162

if.then:                                          ; preds = %entry
  %9 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3163, !tbaa !2119
  %10 = bitcast %struct.PyByteArrayObject* %9 to %struct._object*, !dbg !3166
  %call = call i32 @PyByteArray_Resize(%struct._object* %10, i64 0), !dbg !3167
  %cmp1 = icmp slt i32 %call, 0, !dbg !3168
  br i1 %cmp1, label %if.then.2, label %if.end, !dbg !3169

if.then.2:                                        ; preds = %if.then
  store i32 -1, i32* %retval, !dbg !3170
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.184, !dbg !3170

if.end:                                           ; preds = %if.then
  br label %if.end.3, !dbg !3171

if.end.3:                                         ; preds = %if.end, %entry
  %11 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !3172, !tbaa !2119
  %12 = load %struct._object*, %struct._object** %kwds.addr, align 8, !dbg !3174, !tbaa !2119
  %call4 = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %11, %struct._object* %12, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @bytearray_init.kwlist, i32 0, i32 0), %struct._object** %arg, i8** %encoding, i8** %errors), !dbg !3175
  %tobool = icmp ne i32 %call4, 0, !dbg !3175
  br i1 %tobool, label %if.end.6, label %if.then.5, !dbg !3176

if.then.5:                                        ; preds = %if.end.3
  store i32 -1, i32* %retval, !dbg !3177
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.184, !dbg !3177

if.end.6:                                         ; preds = %if.end.3
  %13 = load %struct._object*, %struct._object** %arg, align 8, !dbg !3178, !tbaa !2119
  %cmp7 = icmp eq %struct._object* %13, null, !dbg !3180
  br i1 %cmp7, label %if.then.8, label %if.end.13, !dbg !3181

if.then.8:                                        ; preds = %if.end.6
  %14 = load i8*, i8** %encoding, align 8, !dbg !3182, !tbaa !2119
  %cmp9 = icmp ne i8* %14, null, !dbg !3185
  br i1 %cmp9, label %if.then.11, label %lor.lhs.false, !dbg !3186

lor.lhs.false:                                    ; preds = %if.then.8
  %15 = load i8*, i8** %errors, align 8, !dbg !3187, !tbaa !2119
  %cmp10 = icmp ne i8* %15, null, !dbg !3189
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !3190

if.then.11:                                       ; preds = %lor.lhs.false, %if.then.8
  %16 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !3191, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %16, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.120, i32 0, i32 0)), !dbg !3193
  store i32 -1, i32* %retval, !dbg !3194
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.184, !dbg !3194

if.end.12:                                        ; preds = %lor.lhs.false
  store i32 0, i32* %retval, !dbg !3195
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.184, !dbg !3195

if.end.13:                                        ; preds = %if.end.6
  %17 = load %struct._object*, %struct._object** %arg, align 8, !dbg !3196, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1, !dbg !3197
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3197, !tbaa !2203
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 19, !dbg !3198
  %19 = load i64, i64* %tp_flags, align 8, !dbg !3198, !tbaa !3199
  %and = and i64 %19, 268435456, !dbg !3200
  %cmp14 = icmp ne i64 %and, 0, !dbg !3201
  br i1 %cmp14, label %if.then.15, label %if.end.44, !dbg !3202

if.then.15:                                       ; preds = %if.end.13
  %20 = bitcast %struct._object** %encoded to i8*, !dbg !3203
  call void @llvm.lifetime.start(i64 8, i8* %20) #3, !dbg !3203
  call void @llvm.dbg.declare(metadata %struct._object** %encoded, metadata !1846, metadata !2123), !dbg !3204
  %21 = bitcast %struct._object** %new to i8*, !dbg !3203
  call void @llvm.lifetime.start(i64 8, i8* %21) #3, !dbg !3203
  call void @llvm.dbg.declare(metadata %struct._object** %new, metadata !1849, metadata !2123), !dbg !3205
  %22 = load i8*, i8** %encoding, align 8, !dbg !3206, !tbaa !2119
  %cmp16 = icmp eq i8* %22, null, !dbg !3208
  br i1 %cmp16, label %if.then.17, label %if.end.18, !dbg !3209

if.then.17:                                       ; preds = %if.then.15
  %23 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !3210, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %23, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.121, i32 0, i32 0)), !dbg !3212
  store i32 -1, i32* %retval, !dbg !3213
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3213

if.end.18:                                        ; preds = %if.then.15
  %24 = load %struct._object*, %struct._object** %arg, align 8, !dbg !3214, !tbaa !2119
  %25 = load i8*, i8** %encoding, align 8, !dbg !3215, !tbaa !2119
  %26 = load i8*, i8** %errors, align 8, !dbg !3216, !tbaa !2119
  %call19 = call %struct._object* @PyUnicode_AsEncodedString(%struct._object* %24, i8* %25, i8* %26), !dbg !3217
  store %struct._object* %call19, %struct._object** %encoded, align 8, !dbg !3218, !tbaa !2119
  %27 = load %struct._object*, %struct._object** %encoded, align 8, !dbg !3219, !tbaa !2119
  %cmp20 = icmp eq %struct._object* %27, null, !dbg !3221
  br i1 %cmp20, label %if.then.21, label %if.end.22, !dbg !3222

if.then.21:                                       ; preds = %if.end.18
  store i32 -1, i32* %retval, !dbg !3223
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3223

if.end.22:                                        ; preds = %if.end.18
  %28 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3224, !tbaa !2119
  %29 = load %struct._object*, %struct._object** %encoded, align 8, !dbg !3225, !tbaa !2119
  %call23 = call %struct._object* @bytearray_iconcat(%struct.PyByteArrayObject* %28, %struct._object* %29), !dbg !3226
  store %struct._object* %call23, %struct._object** %new, align 8, !dbg !3227, !tbaa !2119
  br label %do.body, !dbg !3228

do.body:                                          ; preds = %if.end.22
  %30 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3229
  call void @llvm.lifetime.start(i64 8, i8* %30) #3, !dbg !3229
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1850, metadata !2123), !dbg !3231
  %31 = load %struct._object*, %struct._object** %encoded, align 8, !dbg !3232, !tbaa !2119
  store %struct._object* %31, %struct._object** %_py_decref_tmp, align 8, !dbg !3231, !tbaa !2119
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3233, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0, !dbg !3235
  %33 = load i64, i64* %ob_refcnt, align 8, !dbg !3236, !tbaa !2195
  %dec = add i64 %33, -1, !dbg !3236
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !3236, !tbaa !2195
  %cmp24 = icmp ne i64 %dec, 0, !dbg !3237
  br i1 %cmp24, label %if.then.25, label %if.else, !dbg !3238

if.then.25:                                       ; preds = %do.body
  br label %if.end.27, !dbg !3239

if.else:                                          ; preds = %do.body
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3241, !tbaa !2119
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1, !dbg !3243
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8, !dbg !3243, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4, !dbg !3244
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !3244, !tbaa !2205
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3245, !tbaa !2119
  call void %36(%struct._object* %37), !dbg !3246
  br label %if.end.27

if.end.27:                                        ; preds = %if.else, %if.then.25
  %38 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3247
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !3247
  br label %do.cond, !dbg !3249

do.cond:                                          ; preds = %if.end.27
  br label %do.end, !dbg !3250

do.end:                                           ; preds = %do.cond
  %39 = load %struct._object*, %struct._object** %new, align 8, !dbg !3252, !tbaa !2119
  %cmp28 = icmp eq %struct._object* %39, null, !dbg !3254
  br i1 %cmp28, label %if.then.29, label %if.end.30, !dbg !3255

if.then.29:                                       ; preds = %do.end
  store i32 -1, i32* %retval, !dbg !3256
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3256

if.end.30:                                        ; preds = %do.end
  br label %do.body.31, !dbg !3257

do.body.31:                                       ; preds = %if.end.30
  %40 = bitcast %struct._object** %_py_decref_tmp32 to i8*, !dbg !3258
  call void @llvm.lifetime.start(i64 8, i8* %40) #3, !dbg !3258
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp32, metadata !1852, metadata !2123), !dbg !3260
  %41 = load %struct._object*, %struct._object** %new, align 8, !dbg !3261, !tbaa !2119
  store %struct._object* %41, %struct._object** %_py_decref_tmp32, align 8, !dbg !3260, !tbaa !2119
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8, !dbg !3262, !tbaa !2119
  %ob_refcnt33 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0, !dbg !3264
  %43 = load i64, i64* %ob_refcnt33, align 8, !dbg !3265, !tbaa !2195
  %dec34 = add i64 %43, -1, !dbg !3265
  store i64 %dec34, i64* %ob_refcnt33, align 8, !dbg !3265, !tbaa !2195
  %cmp35 = icmp ne i64 %dec34, 0, !dbg !3266
  br i1 %cmp35, label %if.then.36, label %if.else.37, !dbg !3267

if.then.36:                                       ; preds = %do.body.31
  br label %if.end.40, !dbg !3268

if.else.37:                                       ; preds = %do.body.31
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8, !dbg !3270, !tbaa !2119
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1, !dbg !3272
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8, !dbg !3272, !tbaa !2203
  %tp_dealloc39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4, !dbg !3273
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc39, align 8, !dbg !3273, !tbaa !2205
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8, !dbg !3274, !tbaa !2119
  call void %46(%struct._object* %47), !dbg !3275
  br label %if.end.40

if.end.40:                                        ; preds = %if.else.37, %if.then.36
  %48 = bitcast %struct._object** %_py_decref_tmp32 to i8*, !dbg !3276
  call void @llvm.lifetime.end(i64 8, i8* %48) #3, !dbg !3276
  br label %do.cond.41, !dbg !3277

do.cond.41:                                       ; preds = %if.end.40
  br label %do.end.42, !dbg !3278

do.end.42:                                        ; preds = %do.cond.41
  store i32 0, i32* %retval, !dbg !3280
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3280

cleanup:                                          ; preds = %do.end.42, %if.then.29, %if.then.21, %if.then.17
  %49 = bitcast %struct._object** %new to i8*, !dbg !3281
  call void @llvm.lifetime.end(i64 8, i8* %49) #3, !dbg !3281
  %50 = bitcast %struct._object** %encoded to i8*, !dbg !3281
  call void @llvm.lifetime.end(i64 8, i8* %50) #3, !dbg !3281
  br label %cleanup.184

if.end.44:                                        ; preds = %if.end.13
  %51 = load i8*, i8** %encoding, align 8, !dbg !3282, !tbaa !2119
  %cmp45 = icmp ne i8* %51, null, !dbg !3284
  br i1 %cmp45, label %if.then.48, label %lor.lhs.false.46, !dbg !3285

lor.lhs.false.46:                                 ; preds = %if.end.44
  %52 = load i8*, i8** %errors, align 8, !dbg !3286, !tbaa !2119
  %cmp47 = icmp ne i8* %52, null, !dbg !3288
  br i1 %cmp47, label %if.then.48, label %if.end.49, !dbg !3289

if.then.48:                                       ; preds = %lor.lhs.false.46, %if.end.44
  %53 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !3290, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %53, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.122, i32 0, i32 0)), !dbg !3292
  store i32 -1, i32* %retval, !dbg !3293
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.184, !dbg !3293

if.end.49:                                        ; preds = %lor.lhs.false.46
  %54 = load %struct._object*, %struct._object** %arg, align 8, !dbg !3294, !tbaa !2119
  %55 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !3295, !tbaa !2119
  %call50 = call i64 @PyNumber_AsSsize_t(%struct._object* %54, %struct._object* %55), !dbg !3296
  store i64 %call50, i64* %count, align 8, !dbg !3297, !tbaa !2129
  %56 = load i64, i64* %count, align 8, !dbg !3298, !tbaa !2129
  %cmp51 = icmp eq i64 %56, -1, !dbg !3300
  br i1 %cmp51, label %land.lhs.true, label %if.else.59, !dbg !3301

land.lhs.true:                                    ; preds = %if.end.49
  %call52 = call %struct._object* @PyErr_Occurred(), !dbg !3302
  %tobool53 = icmp ne %struct._object* %call52, null, !dbg !3302
  br i1 %tobool53, label %if.then.54, label %if.else.59, !dbg !3304

if.then.54:                                       ; preds = %land.lhs.true
  %57 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !3305, !tbaa !2119
  %call55 = call i32 @PyErr_ExceptionMatches(%struct._object* %57), !dbg !3308
  %tobool56 = icmp ne i32 %call55, 0, !dbg !3308
  br i1 %tobool56, label %if.then.57, label %if.end.58, !dbg !3309

if.then.57:                                       ; preds = %if.then.54
  store i32 -1, i32* %retval, !dbg !3310
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.184, !dbg !3310

if.end.58:                                        ; preds = %if.then.54
  call void @PyErr_Clear(), !dbg !3311
  br label %if.end.72, !dbg !3312

if.else.59:                                       ; preds = %land.lhs.true, %if.end.49
  %58 = load i64, i64* %count, align 8, !dbg !3313, !tbaa !2129
  %cmp60 = icmp slt i64 %58, 0, !dbg !3315
  br i1 %cmp60, label %if.then.61, label %if.else.62, !dbg !3316

if.then.61:                                       ; preds = %if.else.59
  %59 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !3317, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %59, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.123, i32 0, i32 0)), !dbg !3319
  store i32 -1, i32* %retval, !dbg !3320
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.184, !dbg !3320

if.else.62:                                       ; preds = %if.else.59
  %60 = load i64, i64* %count, align 8, !dbg !3321, !tbaa !2129
  %cmp63 = icmp sgt i64 %60, 0, !dbg !3324
  br i1 %cmp63, label %if.then.64, label %if.end.71, !dbg !3325

if.then.64:                                       ; preds = %if.else.62
  %61 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3326, !tbaa !2119
  %62 = bitcast %struct.PyByteArrayObject* %61 to %struct._object*, !dbg !3329
  %63 = load i64, i64* %count, align 8, !dbg !3330, !tbaa !2129
  %call65 = call i32 @PyByteArray_Resize(%struct._object* %62, i64 %63), !dbg !3331
  %tobool66 = icmp ne i32 %call65, 0, !dbg !3331
  br i1 %tobool66, label %if.then.67, label %if.end.68, !dbg !3332

if.then.67:                                       ; preds = %if.then.64
  store i32 -1, i32* %retval, !dbg !3333
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.184, !dbg !3333

if.end.68:                                        ; preds = %if.then.64
  %64 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3334, !tbaa !2119
  %65 = bitcast %struct.PyByteArrayObject* %64 to %struct.PyVarObject*, !dbg !3335
  %ob_size69 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %65, i32 0, i32 1, !dbg !3336
  %66 = load i64, i64* %ob_size69, align 8, !dbg !3336, !tbaa !2239
  %tobool70 = icmp ne i64 %66, 0, !dbg !3337
  br i1 %tobool70, label %cond.true, label %cond.false, !dbg !3337

cond.true:                                        ; preds = %if.end.68
  %67 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3338, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %67, i32 0, i32 3, !dbg !3340
  %68 = load i8*, i8** %ob_start, align 8, !dbg !3340, !tbaa !2250
  br label %cond.end, !dbg !3337

cond.false:                                       ; preds = %if.end.68
  br label %cond.end, !dbg !3341

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %68, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !3337
  %69 = load i64, i64* %count, align 8, !dbg !3343, !tbaa !2129
  call void @llvm.memset.p0i8.i64(i8* %cond, i8 0, i64 %69, i32 1, i1 false), !dbg !3346
  br label %if.end.71, !dbg !3347

if.end.71:                                        ; preds = %cond.end, %if.else.62
  store i32 0, i32* %retval, !dbg !3348
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.184, !dbg !3348

if.end.72:                                        ; preds = %if.end.58
  %70 = load %struct._object*, %struct._object** %arg, align 8, !dbg !3349, !tbaa !2119
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1, !dbg !3350
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8, !dbg !3350, !tbaa !2203
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 18, !dbg !3351
  %72 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer, align 8, !dbg !3351, !tbaa !2563
  %cmp74 = icmp ne %struct.PyBufferProcs* %72, null, !dbg !3352
  br i1 %cmp74, label %land.lhs.true.75, label %if.end.101, !dbg !3353

land.lhs.true.75:                                 ; preds = %if.end.72
  %73 = load %struct._object*, %struct._object** %arg, align 8, !dbg !3354, !tbaa !2119
  %ob_type76 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 1, !dbg !3356
  %74 = load %struct._typeobject*, %struct._typeobject** %ob_type76, align 8, !dbg !3356, !tbaa !2203
  %tp_as_buffer77 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %74, i32 0, i32 18, !dbg !3357
  %75 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer77, align 8, !dbg !3357, !tbaa !2563
  %bf_getbuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %75, i32 0, i32 0, !dbg !3358
  %76 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer, align 8, !dbg !3358, !tbaa !2571
  %cmp78 = icmp ne i32 (%struct._object*, %struct.bufferinfo*, i32)* %76, null, !dbg !3359
  br i1 %cmp78, label %if.then.79, label %if.end.101, !dbg !3360

if.then.79:                                       ; preds = %land.lhs.true.75
  %77 = bitcast i64* %size to i8*, !dbg !3361
  call void @llvm.lifetime.start(i64 8, i8* %77) #3, !dbg !3361
  call void @llvm.dbg.declare(metadata i64* %size, metadata !1854, metadata !2123), !dbg !3362
  %78 = bitcast %struct.bufferinfo* %view to i8*, !dbg !3363
  call void @llvm.lifetime.start(i64 80, i8* %78) #3, !dbg !3363
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %view, metadata !1857, metadata !2123), !dbg !3364
  %79 = load %struct._object*, %struct._object** %arg, align 8, !dbg !3365, !tbaa !2119
  %call80 = call i32 @PyObject_GetBuffer(%struct._object* %79, %struct.bufferinfo* %view, i32 284), !dbg !3367
  %cmp81 = icmp slt i32 %call80, 0, !dbg !3368
  br i1 %cmp81, label %if.then.82, label %if.end.83, !dbg !3369

if.then.82:                                       ; preds = %if.then.79
  store i32 -1, i32* %retval, !dbg !3370
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.99, !dbg !3370

if.end.83:                                        ; preds = %if.then.79
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view, i32 0, i32 2, !dbg !3371
  %80 = load i64, i64* %len, align 8, !dbg !3371, !tbaa !2482
  store i64 %80, i64* %size, align 8, !dbg !3372, !tbaa !2129
  %81 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3373, !tbaa !2119
  %82 = bitcast %struct.PyByteArrayObject* %81 to %struct._object*, !dbg !3375
  %83 = load i64, i64* %size, align 8, !dbg !3376, !tbaa !2129
  %call84 = call i32 @PyByteArray_Resize(%struct._object* %82, i64 %83), !dbg !3377
  %cmp85 = icmp slt i32 %call84, 0, !dbg !3378
  br i1 %cmp85, label %if.then.86, label %if.end.87, !dbg !3379

if.then.86:                                       ; preds = %if.end.83
  br label %fail, !dbg !3380

if.end.87:                                        ; preds = %if.end.83
  %84 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3382, !tbaa !2119
  %85 = bitcast %struct.PyByteArrayObject* %84 to %struct.PyVarObject*, !dbg !3384
  %ob_size88 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %85, i32 0, i32 1, !dbg !3385
  %86 = load i64, i64* %ob_size88, align 8, !dbg !3385, !tbaa !2239
  %tobool89 = icmp ne i64 %86, 0, !dbg !3386
  br i1 %tobool89, label %cond.true.90, label %cond.false.92, !dbg !3386

cond.true.90:                                     ; preds = %if.end.87
  %87 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3387, !tbaa !2119
  %ob_start91 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %87, i32 0, i32 3, !dbg !3389
  %88 = load i8*, i8** %ob_start91, align 8, !dbg !3389, !tbaa !2250
  br label %cond.end.93, !dbg !3386

cond.false.92:                                    ; preds = %if.end.87
  br label %cond.end.93, !dbg !3390

cond.end.93:                                      ; preds = %cond.false.92, %cond.true.90
  %cond94 = phi i8* [ %88, %cond.true.90 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.92 ], !dbg !3386
  %89 = load i64, i64* %size, align 8, !dbg !3392, !tbaa !2129
  %call95 = call i32 @PyBuffer_ToContiguous(i8* %cond94, %struct.bufferinfo* %view, i64 %89, i8 signext 67), !dbg !3393
  %cmp96 = icmp slt i32 %call95, 0, !dbg !3394
  br i1 %cmp96, label %if.then.97, label %if.end.98, !dbg !3395

if.then.97:                                       ; preds = %cond.end.93
  br label %fail, !dbg !3396

if.end.98:                                        ; preds = %cond.end.93
  call void @PyBuffer_Release(%struct.bufferinfo* %view), !dbg !3397
  store i32 0, i32* %retval, !dbg !3398
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.99, !dbg !3398

fail:                                             ; preds = %if.then.97, %if.then.86
  call void @PyBuffer_Release(%struct.bufferinfo* %view), !dbg !3399
  store i32 -1, i32* %retval, !dbg !3400
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.99, !dbg !3400

cleanup.99:                                       ; preds = %fail, %if.end.98, %if.then.82
  %90 = bitcast %struct.bufferinfo* %view to i8*, !dbg !3401
  call void @llvm.lifetime.end(i64 80, i8* %90) #3, !dbg !3401
  %91 = bitcast i64* %size to i8*, !dbg !3401
  call void @llvm.lifetime.end(i64 8, i8* %91) #3, !dbg !3401
  br label %cleanup.184

if.end.101:                                       ; preds = %land.lhs.true.75, %if.end.72
  %92 = load %struct._object*, %struct._object** %arg, align 8, !dbg !3402, !tbaa !2119
  %call102 = call %struct._object* @PyObject_GetIter(%struct._object* %92), !dbg !3403
  store %struct._object* %call102, %struct._object** %it, align 8, !dbg !3404, !tbaa !2119
  %93 = load %struct._object*, %struct._object** %it, align 8, !dbg !3405, !tbaa !2119
  %cmp103 = icmp eq %struct._object* %93, null, !dbg !3407
  br i1 %cmp103, label %if.then.104, label %if.end.105, !dbg !3408

if.then.104:                                      ; preds = %if.end.101
  store i32 -1, i32* %retval, !dbg !3409
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.184, !dbg !3409

if.end.105:                                       ; preds = %if.end.101
  %94 = load %struct._object*, %struct._object** %it, align 8, !dbg !3410, !tbaa !2119
  %ob_type106 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1, !dbg !3411
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type106, align 8, !dbg !3411, !tbaa !2203
  %tp_iternext = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 26, !dbg !3412
  %tp_iternext107 = bitcast {}** %tp_iternext to %struct._object* (%struct._object*)**, !dbg !3412
  %96 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext107, align 8, !dbg !3412, !tbaa !3413
  store %struct._object* (%struct._object*)* %96, %struct._object* (%struct._object*)** %iternext, align 8, !dbg !3414, !tbaa !2119
  br label %for.cond, !dbg !3415

for.cond:                                         ; preds = %cleanup.cont, %if.end.105
  %97 = bitcast %struct._object** %item to i8*, !dbg !3416
  call void @llvm.lifetime.start(i64 8, i8* %97) #3, !dbg !3416
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !1858, metadata !2123), !dbg !3417
  %98 = bitcast i32* %rc to i8*, !dbg !3418
  call void @llvm.lifetime.start(i64 4, i8* %98) #3, !dbg !3418
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !1862, metadata !2123), !dbg !3419
  %99 = bitcast i32* %value to i8*, !dbg !3418
  call void @llvm.lifetime.start(i64 4, i8* %99) #3, !dbg !3418
  call void @llvm.dbg.declare(metadata i32* %value, metadata !1863, metadata !2123), !dbg !3420
  %100 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %iternext, align 8, !dbg !3421, !tbaa !2119
  %101 = load %struct._object*, %struct._object** %it, align 8, !dbg !3422, !tbaa !2119
  %call108 = call %struct._object* %100(%struct._object* %101), !dbg !3421
  store %struct._object* %call108, %struct._object** %item, align 8, !dbg !3423, !tbaa !2119
  %102 = load %struct._object*, %struct._object** %item, align 8, !dbg !3424, !tbaa !2119
  %cmp109 = icmp eq %struct._object* %102, null, !dbg !3426
  br i1 %cmp109, label %if.then.110, label %if.end.119, !dbg !3427

if.then.110:                                      ; preds = %for.cond
  %call111 = call %struct._object* @PyErr_Occurred(), !dbg !3428
  %tobool112 = icmp ne %struct._object* %call111, null, !dbg !3428
  br i1 %tobool112, label %if.then.113, label %if.end.118, !dbg !3431

if.then.113:                                      ; preds = %if.then.110
  %103 = load %struct._object*, %struct._object** @PyExc_StopIteration, align 8, !dbg !3432, !tbaa !2119
  %call114 = call i32 @PyErr_ExceptionMatches(%struct._object* %103), !dbg !3435
  %tobool115 = icmp ne i32 %call114, 0, !dbg !3435
  br i1 %tobool115, label %if.end.117, label %if.then.116, !dbg !3436

if.then.116:                                      ; preds = %if.then.113
  store i32 9, i32* %cleanup.dest.slot
  br label %cleanup.155, !dbg !3437

if.end.117:                                       ; preds = %if.then.113
  call void @PyErr_Clear(), !dbg !3438
  br label %if.end.118, !dbg !3439

if.end.118:                                       ; preds = %if.end.117, %if.then.110
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup.155, !dbg !3440

if.end.119:                                       ; preds = %for.cond
  %104 = load %struct._object*, %struct._object** %item, align 8, !dbg !3441, !tbaa !2119
  %call120 = call i32 @_getbytevalue(%struct._object* %104, i32* %value), !dbg !3442
  store i32 %call120, i32* %rc, align 4, !dbg !3443, !tbaa !2676
  br label %do.body.121, !dbg !3444

do.body.121:                                      ; preds = %if.end.119
  %105 = bitcast %struct._object** %_py_decref_tmp122 to i8*, !dbg !3445
  call void @llvm.lifetime.start(i64 8, i8* %105) #3, !dbg !3445
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp122, metadata !1864, metadata !2123), !dbg !3447
  %106 = load %struct._object*, %struct._object** %item, align 8, !dbg !3448, !tbaa !2119
  store %struct._object* %106, %struct._object** %_py_decref_tmp122, align 8, !dbg !3447, !tbaa !2119
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8, !dbg !3449, !tbaa !2119
  %ob_refcnt123 = getelementptr inbounds %struct._object, %struct._object* %107, i32 0, i32 0, !dbg !3451
  %108 = load i64, i64* %ob_refcnt123, align 8, !dbg !3452, !tbaa !2195
  %dec124 = add i64 %108, -1, !dbg !3452
  store i64 %dec124, i64* %ob_refcnt123, align 8, !dbg !3452, !tbaa !2195
  %cmp125 = icmp ne i64 %dec124, 0, !dbg !3453
  br i1 %cmp125, label %if.then.126, label %if.else.127, !dbg !3454

if.then.126:                                      ; preds = %do.body.121
  br label %if.end.130, !dbg !3455

if.else.127:                                      ; preds = %do.body.121
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8, !dbg !3457, !tbaa !2119
  %ob_type128 = getelementptr inbounds %struct._object, %struct._object* %109, i32 0, i32 1, !dbg !3459
  %110 = load %struct._typeobject*, %struct._typeobject** %ob_type128, align 8, !dbg !3459, !tbaa !2203
  %tp_dealloc129 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %110, i32 0, i32 4, !dbg !3460
  %111 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc129, align 8, !dbg !3460, !tbaa !2205
  %112 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8, !dbg !3461, !tbaa !2119
  call void %111(%struct._object* %112), !dbg !3462
  br label %if.end.130

if.end.130:                                       ; preds = %if.else.127, %if.then.126
  %113 = bitcast %struct._object** %_py_decref_tmp122 to i8*, !dbg !3463
  call void @llvm.lifetime.end(i64 8, i8* %113) #3, !dbg !3463
  br label %do.cond.131, !dbg !3465

do.cond.131:                                      ; preds = %if.end.130
  br label %do.end.132, !dbg !3466

do.end.132:                                       ; preds = %do.cond.131
  %114 = load i32, i32* %rc, align 4, !dbg !3468, !tbaa !2676
  %tobool133 = icmp ne i32 %114, 0, !dbg !3468
  br i1 %tobool133, label %if.end.135, label %if.then.134, !dbg !3470

if.then.134:                                      ; preds = %do.end.132
  store i32 9, i32* %cleanup.dest.slot
  br label %cleanup.155, !dbg !3471

if.end.135:                                       ; preds = %do.end.132
  %115 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3472, !tbaa !2119
  %116 = bitcast %struct.PyByteArrayObject* %115 to %struct.PyVarObject*, !dbg !3474
  %ob_size136 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %116, i32 0, i32 1, !dbg !3475
  %117 = load i64, i64* %ob_size136, align 8, !dbg !3475, !tbaa !2239
  %118 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3476, !tbaa !2119
  %ob_alloc = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %118, i32 0, i32 1, !dbg !3477
  %119 = load i64, i64* %ob_alloc, align 8, !dbg !3477, !tbaa !2244
  %cmp137 = icmp slt i64 %117, %119, !dbg !3478
  br i1 %cmp137, label %if.then.138, label %if.else.140, !dbg !3479

if.then.138:                                      ; preds = %if.end.135
  %120 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3480, !tbaa !2119
  %121 = bitcast %struct.PyByteArrayObject* %120 to %struct.PyVarObject*, !dbg !3481
  %ob_size139 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %121, i32 0, i32 1, !dbg !3482
  %122 = load i64, i64* %ob_size139, align 8, !dbg !3483, !tbaa !2239
  %inc = add i64 %122, 1, !dbg !3483
  store i64 %inc, i64* %ob_size139, align 8, !dbg !3483, !tbaa !2239
  br label %if.end.146, !dbg !3484

if.else.140:                                      ; preds = %if.end.135
  %123 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3485, !tbaa !2119
  %124 = bitcast %struct.PyByteArrayObject* %123 to %struct._object*, !dbg !3487
  %125 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3488, !tbaa !2119
  %126 = bitcast %struct.PyByteArrayObject* %125 to %struct.PyVarObject*, !dbg !3489
  %ob_size141 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %126, i32 0, i32 1, !dbg !3490
  %127 = load i64, i64* %ob_size141, align 8, !dbg !3490, !tbaa !2239
  %add = add i64 %127, 1, !dbg !3491
  %call142 = call i32 @PyByteArray_Resize(%struct._object* %124, i64 %add), !dbg !3492
  %cmp143 = icmp slt i32 %call142, 0, !dbg !3493
  br i1 %cmp143, label %if.then.144, label %if.end.145, !dbg !3494

if.then.144:                                      ; preds = %if.else.140
  store i32 9, i32* %cleanup.dest.slot
  br label %cleanup.155, !dbg !3495

if.end.145:                                       ; preds = %if.else.140
  br label %if.end.146

if.end.146:                                       ; preds = %if.end.145, %if.then.138
  %128 = load i32, i32* %value, align 4, !dbg !3496, !tbaa !2676
  %conv = trunc i32 %128 to i8, !dbg !3496
  %129 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3497, !tbaa !2119
  %130 = bitcast %struct.PyByteArrayObject* %129 to %struct.PyVarObject*, !dbg !3498
  %ob_size147 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %130, i32 0, i32 1, !dbg !3499
  %131 = load i64, i64* %ob_size147, align 8, !dbg !3499, !tbaa !2239
  %sub = sub i64 %131, 1, !dbg !3500
  %132 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3501, !tbaa !2119
  %133 = bitcast %struct.PyByteArrayObject* %132 to %struct.PyVarObject*, !dbg !3502
  %ob_size148 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %133, i32 0, i32 1, !dbg !3503
  %134 = load i64, i64* %ob_size148, align 8, !dbg !3503, !tbaa !2239
  %tobool149 = icmp ne i64 %134, 0, !dbg !3504
  br i1 %tobool149, label %cond.true.150, label %cond.false.152, !dbg !3504

cond.true.150:                                    ; preds = %if.end.146
  %135 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3505, !tbaa !2119
  %ob_start151 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %135, i32 0, i32 3, !dbg !3507
  %136 = load i8*, i8** %ob_start151, align 8, !dbg !3507, !tbaa !2250
  br label %cond.end.153, !dbg !3504

cond.false.152:                                   ; preds = %if.end.146
  br label %cond.end.153, !dbg !3508

cond.end.153:                                     ; preds = %cond.false.152, %cond.true.150
  %cond154 = phi i8* [ %136, %cond.true.150 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.152 ], !dbg !3504
  %arrayidx = getelementptr i8, i8* %cond154, i64 %sub, !dbg !3510
  store i8 %conv, i8* %arrayidx, align 1, !dbg !3513, !tbaa !2233
  store i32 0, i32* %cleanup.dest.slot, !dbg !3514
  br label %cleanup.155, !dbg !3514

cleanup.155:                                      ; preds = %cond.end.153, %if.then.144, %if.then.134, %if.end.118, %if.then.116
  %137 = bitcast i32* %value to i8*, !dbg !3515
  call void @llvm.lifetime.end(i64 4, i8* %137) #3, !dbg !3515
  %138 = bitcast i32* %rc to i8*, !dbg !3515
  call void @llvm.lifetime.end(i64 4, i8* %138) #3, !dbg !3515
  %139 = bitcast %struct._object** %item to i8*, !dbg !3515
  call void @llvm.lifetime.end(i64 8, i8* %139) #3, !dbg !3515
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock.5

NodeBlock.5:                                      ; preds = %cleanup.155
  %Pivot.6 = icmp slt i32 %cleanup.dest, 7
  br i1 %Pivot.6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock.5
  %Pivot = icmp slt i32 %cleanup.dest, 9
  br i1 %Pivot, label %LeafBlock.1, label %LeafBlock.3

LeafBlock.3:                                      ; preds = %NodeBlock
  %SwitchLeaf4 = icmp eq i32 %cleanup.dest, 9
  br i1 %SwitchLeaf4, label %error, label %NewDefault

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %cleanup.dest, 7
  br i1 %SwitchLeaf2, label %for.end, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock.5
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %for.cond, !dbg !3517

for.end:                                          ; preds = %LeafBlock.1
  br label %do.body.158, !dbg !3518

do.body.158:                                      ; preds = %for.end
  %140 = bitcast %struct._object** %_py_decref_tmp159 to i8*, !dbg !3519
  call void @llvm.lifetime.start(i64 8, i8* %140) #3, !dbg !3519
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp159, metadata !1866, metadata !2123), !dbg !3521
  %141 = load %struct._object*, %struct._object** %it, align 8, !dbg !3522, !tbaa !2119
  store %struct._object* %141, %struct._object** %_py_decref_tmp159, align 8, !dbg !3521, !tbaa !2119
  %142 = load %struct._object*, %struct._object** %_py_decref_tmp159, align 8, !dbg !3523, !tbaa !2119
  %ob_refcnt160 = getelementptr inbounds %struct._object, %struct._object* %142, i32 0, i32 0, !dbg !3525
  %143 = load i64, i64* %ob_refcnt160, align 8, !dbg !3526, !tbaa !2195
  %dec161 = add i64 %143, -1, !dbg !3526
  store i64 %dec161, i64* %ob_refcnt160, align 8, !dbg !3526, !tbaa !2195
  %cmp162 = icmp ne i64 %dec161, 0, !dbg !3527
  br i1 %cmp162, label %if.then.164, label %if.else.165, !dbg !3528

if.then.164:                                      ; preds = %do.body.158
  br label %if.end.168, !dbg !3529

if.else.165:                                      ; preds = %do.body.158
  %144 = load %struct._object*, %struct._object** %_py_decref_tmp159, align 8, !dbg !3531, !tbaa !2119
  %ob_type166 = getelementptr inbounds %struct._object, %struct._object* %144, i32 0, i32 1, !dbg !3533
  %145 = load %struct._typeobject*, %struct._typeobject** %ob_type166, align 8, !dbg !3533, !tbaa !2203
  %tp_dealloc167 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %145, i32 0, i32 4, !dbg !3534
  %146 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc167, align 8, !dbg !3534, !tbaa !2205
  %147 = load %struct._object*, %struct._object** %_py_decref_tmp159, align 8, !dbg !3535, !tbaa !2119
  call void %146(%struct._object* %147), !dbg !3536
  br label %if.end.168

if.end.168:                                       ; preds = %if.else.165, %if.then.164
  %148 = bitcast %struct._object** %_py_decref_tmp159 to i8*, !dbg !3537
  call void @llvm.lifetime.end(i64 8, i8* %148) #3, !dbg !3537
  br label %do.cond.169, !dbg !3539

do.cond.169:                                      ; preds = %if.end.168
  br label %do.end.170, !dbg !3540

do.end.170:                                       ; preds = %do.cond.169
  store i32 0, i32* %retval, !dbg !3542
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.184, !dbg !3542

error:                                            ; preds = %LeafBlock.3
  br label %do.body.171, !dbg !3543

do.body.171:                                      ; preds = %error
  %149 = bitcast %struct._object** %_py_decref_tmp172 to i8*, !dbg !3544
  call void @llvm.lifetime.start(i64 8, i8* %149) #3, !dbg !3544
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp172, metadata !1868, metadata !2123), !dbg !3546
  %150 = load %struct._object*, %struct._object** %it, align 8, !dbg !3547, !tbaa !2119
  store %struct._object* %150, %struct._object** %_py_decref_tmp172, align 8, !dbg !3546, !tbaa !2119
  %151 = load %struct._object*, %struct._object** %_py_decref_tmp172, align 8, !dbg !3548, !tbaa !2119
  %ob_refcnt173 = getelementptr inbounds %struct._object, %struct._object* %151, i32 0, i32 0, !dbg !3550
  %152 = load i64, i64* %ob_refcnt173, align 8, !dbg !3551, !tbaa !2195
  %dec174 = add i64 %152, -1, !dbg !3551
  store i64 %dec174, i64* %ob_refcnt173, align 8, !dbg !3551, !tbaa !2195
  %cmp175 = icmp ne i64 %dec174, 0, !dbg !3552
  br i1 %cmp175, label %if.then.177, label %if.else.178, !dbg !3553

if.then.177:                                      ; preds = %do.body.171
  br label %if.end.181, !dbg !3554

if.else.178:                                      ; preds = %do.body.171
  %153 = load %struct._object*, %struct._object** %_py_decref_tmp172, align 8, !dbg !3556, !tbaa !2119
  %ob_type179 = getelementptr inbounds %struct._object, %struct._object* %153, i32 0, i32 1, !dbg !3558
  %154 = load %struct._typeobject*, %struct._typeobject** %ob_type179, align 8, !dbg !3558, !tbaa !2203
  %tp_dealloc180 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %154, i32 0, i32 4, !dbg !3559
  %155 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc180, align 8, !dbg !3559, !tbaa !2205
  %156 = load %struct._object*, %struct._object** %_py_decref_tmp172, align 8, !dbg !3560, !tbaa !2119
  call void %155(%struct._object* %156), !dbg !3561
  br label %if.end.181

if.end.181:                                       ; preds = %if.else.178, %if.then.177
  %157 = bitcast %struct._object** %_py_decref_tmp172 to i8*, !dbg !3562
  call void @llvm.lifetime.end(i64 8, i8* %157) #3, !dbg !3562
  br label %do.cond.182, !dbg !3563

do.cond.182:                                      ; preds = %if.end.181
  br label %do.end.183, !dbg !3564

do.end.183:                                       ; preds = %do.cond.182
  store i32 -1, i32* %retval, !dbg !3566
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.184, !dbg !3566

NewDefault:                                       ; preds = %LeafBlock.3, %LeafBlock.1, %LeafBlock
  br label %cleanup.184

cleanup.184:                                      ; preds = %NewDefault, %do.end.183, %do.end.170, %if.then.104, %cleanup.99, %if.end.71, %if.then.67, %if.then.61, %if.then.57, %if.then.48, %cleanup, %if.end.12, %if.then.11, %if.then.5, %if.then.2
  %158 = bitcast %struct._object* (%struct._object*)** %iternext to i8*, !dbg !3567
  call void @llvm.lifetime.end(i64 8, i8* %158) #3, !dbg !3567
  %159 = bitcast %struct._object** %it to i8*, !dbg !3567
  call void @llvm.lifetime.end(i64 8, i8* %159) #3, !dbg !3567
  %160 = bitcast i64* %count to i8*, !dbg !3567
  call void @llvm.lifetime.end(i64 8, i8* %160) #3, !dbg !3567
  %161 = bitcast i8** %errors to i8*, !dbg !3567
  call void @llvm.lifetime.end(i64 8, i8* %161) #3, !dbg !3567
  %162 = bitcast i8** %encoding to i8*, !dbg !3567
  call void @llvm.lifetime.end(i64 8, i8* %162) #3, !dbg !3567
  %163 = bitcast %struct._object** %arg to i8*, !dbg !3567
  call void @llvm.lifetime.end(i64 8, i8* %163) #3, !dbg !3567
  %164 = load i32, i32* %retval, !dbg !3567
  ret i32 %164, !dbg !3567
}

declare %struct._object* @PyType_GenericAlloc(%struct._typeobject*, i64) #2

declare %struct._object* @PyType_GenericNew(%struct._typeobject*, %struct._object*, %struct._object*) #2

; Function Attrs: nounwind uwtable
define internal void @bytearrayiter_dealloc(%struct.bytesiterobject* %it) #0 {
entry:
  %it.addr = alloca %struct.bytesiterobject*, align 8
  %g = alloca %union._gc_head*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.bytesiterobject* %it, %struct.bytesiterobject** %it.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.bytesiterobject** %it.addr, metadata !1874, metadata !2123), !dbg !3568
  br label %do.body, !dbg !3569

do.body:                                          ; preds = %entry
  %0 = bitcast %union._gc_head** %g to i8*, !dbg !3570
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !3570
  call void @llvm.dbg.declare(metadata %union._gc_head** %g, metadata !1875, metadata !2123), !dbg !3572
  %1 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !3573, !tbaa !2119
  %2 = bitcast %struct.bytesiterobject* %1 to %union._gc_head*, !dbg !3574
  %add.ptr = getelementptr %union._gc_head, %union._gc_head* %2, i64 -1, !dbg !3575
  store %union._gc_head* %add.ptr, %union._gc_head** %g, align 8, !dbg !3572, !tbaa !2119
  br label %do.body.1, !dbg !3576

do.body.1:                                        ; preds = %do.body
  %3 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3577, !tbaa !2119
  %gc = bitcast %union._gc_head* %3 to %struct.anon.0*, !dbg !3580
  %gc_refs = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc, i32 0, i32 2, !dbg !3581
  %4 = load i64, i64* %gc_refs, align 8, !dbg !3581, !tbaa !3084
  %and = and i64 %4, 1, !dbg !3582
  %or = or i64 %and, -4, !dbg !3583
  %5 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3584, !tbaa !2119
  %gc2 = bitcast %union._gc_head* %5 to %struct.anon.0*, !dbg !3585
  %gc_refs3 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc2, i32 0, i32 2, !dbg !3586
  store i64 %or, i64* %gc_refs3, align 8, !dbg !3587, !tbaa !3084
  br label %do.cond, !dbg !3588

do.cond:                                          ; preds = %do.body.1
  br label %do.end, !dbg !3589

do.end:                                           ; preds = %do.cond
  %6 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3591, !tbaa !2119
  %gc4 = bitcast %union._gc_head* %6 to %struct.anon.0*, !dbg !3593
  %gc_next = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc4, i32 0, i32 0, !dbg !3594
  %7 = load %union._gc_head*, %union._gc_head** %gc_next, align 8, !dbg !3594, !tbaa !3113
  %8 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3595, !tbaa !2119
  %gc5 = bitcast %union._gc_head* %8 to %struct.anon.0*, !dbg !3596
  %gc_prev = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc5, i32 0, i32 1, !dbg !3597
  %9 = load %union._gc_head*, %union._gc_head** %gc_prev, align 8, !dbg !3597, !tbaa !3117
  %gc6 = bitcast %union._gc_head* %9 to %struct.anon.0*, !dbg !3598
  %gc_next7 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc6, i32 0, i32 0, !dbg !3599
  store %union._gc_head* %7, %union._gc_head** %gc_next7, align 8, !dbg !3600, !tbaa !3113
  %10 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3601, !tbaa !2119
  %gc8 = bitcast %union._gc_head* %10 to %struct.anon.0*, !dbg !3602
  %gc_prev9 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc8, i32 0, i32 1, !dbg !3603
  %11 = load %union._gc_head*, %union._gc_head** %gc_prev9, align 8, !dbg !3603, !tbaa !3117
  %12 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3604, !tbaa !2119
  %gc10 = bitcast %union._gc_head* %12 to %struct.anon.0*, !dbg !3605
  %gc_next11 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc10, i32 0, i32 0, !dbg !3606
  %13 = load %union._gc_head*, %union._gc_head** %gc_next11, align 8, !dbg !3606, !tbaa !3113
  %gc12 = bitcast %union._gc_head* %13 to %struct.anon.0*, !dbg !3607
  %gc_prev13 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc12, i32 0, i32 1, !dbg !3608
  store %union._gc_head* %11, %union._gc_head** %gc_prev13, align 8, !dbg !3609, !tbaa !3117
  %14 = load %union._gc_head*, %union._gc_head** %g, align 8, !dbg !3610, !tbaa !2119
  %gc14 = bitcast %union._gc_head* %14 to %struct.anon.0*, !dbg !3611
  %gc_next15 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %gc14, i32 0, i32 0, !dbg !3612
  store %union._gc_head* null, %union._gc_head** %gc_next15, align 8, !dbg !3613, !tbaa !3113
  %15 = bitcast %union._gc_head** %g to i8*, !dbg !3614
  call void @llvm.lifetime.end(i64 8, i8* %15) #3, !dbg !3614
  br label %do.end.17, !dbg !3615

do.end.17:                                        ; preds = %do.end
  br label %do.body.18, !dbg !3616

do.body.18:                                       ; preds = %do.end.17
  %16 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !3617
  call void @llvm.lifetime.start(i64 8, i8* %16) #3, !dbg !3617
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1877, metadata !2123), !dbg !3619
  %17 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !3620, !tbaa !2119
  %it_seq = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %17, i32 0, i32 2, !dbg !3621
  %18 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %it_seq, align 8, !dbg !3621, !tbaa !3072
  %19 = bitcast %struct.PyByteArrayObject* %18 to %struct._object*, !dbg !3622
  store %struct._object* %19, %struct._object** %_py_xdecref_tmp, align 8, !dbg !3619, !tbaa !2119
  %20 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !3623, !tbaa !2119
  %cmp = icmp ne %struct._object* %20, null, !dbg !3624
  br i1 %cmp, label %if.then, label %if.end.24, !dbg !3625

if.then:                                          ; preds = %do.body.18
  br label %do.body.19, !dbg !3626

do.body.19:                                       ; preds = %if.then
  %21 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3628
  call void @llvm.lifetime.start(i64 8, i8* %21) #3, !dbg !3628
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1879, metadata !2123), !dbg !3630
  %22 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !3631, !tbaa !2119
  store %struct._object* %22, %struct._object** %_py_decref_tmp, align 8, !dbg !3630, !tbaa !2119
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3632, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0, !dbg !3634
  %24 = load i64, i64* %ob_refcnt, align 8, !dbg !3635, !tbaa !2195
  %dec = add i64 %24, -1, !dbg !3635
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !3635, !tbaa !2195
  %cmp20 = icmp ne i64 %dec, 0, !dbg !3636
  br i1 %cmp20, label %if.then.21, label %if.else, !dbg !3637

if.then.21:                                       ; preds = %do.body.19
  br label %if.end, !dbg !3638

if.else:                                          ; preds = %do.body.19
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3640, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1, !dbg !3642
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3642, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4, !dbg !3643
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !3643, !tbaa !2205
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3644, !tbaa !2119
  call void %27(%struct._object* %28), !dbg !3645
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.21
  %29 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3646
  call void @llvm.lifetime.end(i64 8, i8* %29) #3, !dbg !3646
  br label %do.cond.22, !dbg !3648

do.cond.22:                                       ; preds = %if.end
  br label %do.end.23, !dbg !3649

do.end.23:                                        ; preds = %do.cond.22
  br label %if.end.24, !dbg !3651

if.end.24:                                        ; preds = %do.end.23, %do.body.18
  %30 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !3653
  call void @llvm.lifetime.end(i64 8, i8* %30) #3, !dbg !3653
  br label %do.end.26, !dbg !3656

do.end.26:                                        ; preds = %if.end.24
  %31 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !3657, !tbaa !2119
  %32 = bitcast %struct.bytesiterobject* %31 to i8*, !dbg !3657
  call void @PyObject_GC_Del(i8* %32), !dbg !3658
  ret void, !dbg !3659
}

; Function Attrs: nounwind uwtable
define internal i32 @bytearrayiter_traverse(%struct.bytesiterobject* %it, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %it.addr = alloca %struct.bytesiterobject*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %vret = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.bytesiterobject* %it, %struct.bytesiterobject** %it.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.bytesiterobject** %it.addr, metadata !1886, metadata !2123), !dbg !3660
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i32 (%struct._object*, i8*)** %visit.addr, metadata !1887, metadata !2123), !dbg !3661
  store i8* %arg, i8** %arg.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !1888, metadata !2123), !dbg !3662
  br label %do.body, !dbg !3663

do.body:                                          ; preds = %entry
  %0 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !3664, !tbaa !2119
  %it_seq = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %0, i32 0, i32 2, !dbg !3666
  %1 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %it_seq, align 8, !dbg !3666, !tbaa !3072
  %tobool = icmp ne %struct.PyByteArrayObject* %1, null, !dbg !3667
  br i1 %tobool, label %if.then, label %if.end.4, !dbg !3668

if.then:                                          ; preds = %do.body
  %2 = bitcast i32* %vret to i8*, !dbg !3669
  call void @llvm.lifetime.start(i64 4, i8* %2) #3, !dbg !3669
  call void @llvm.dbg.declare(metadata i32* %vret, metadata !1889, metadata !2123), !dbg !3671
  %3 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8, !dbg !3672, !tbaa !2119
  %4 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !3673, !tbaa !2119
  %it_seq1 = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %4, i32 0, i32 2, !dbg !3674
  %5 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %it_seq1, align 8, !dbg !3674, !tbaa !3072
  %6 = bitcast %struct.PyByteArrayObject* %5 to %struct._object*, !dbg !3675
  %7 = load i8*, i8** %arg.addr, align 8, !dbg !3676, !tbaa !2119
  %call = call i32 %3(%struct._object* %6, i8* %7), !dbg !3672
  store i32 %call, i32* %vret, align 4, !dbg !3671, !tbaa !2676
  %8 = load i32, i32* %vret, align 4, !dbg !3677, !tbaa !2676
  %tobool2 = icmp ne i32 %8, 0, !dbg !3677
  br i1 %tobool2, label %if.then.3, label %if.end, !dbg !3679

if.then.3:                                        ; preds = %if.then
  %9 = load i32, i32* %vret, align 4, !dbg !3680, !tbaa !2676
  store i32 %9, i32* %retval, !dbg !3682
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3682

if.end:                                           ; preds = %if.then
  store i32 0, i32* %cleanup.dest.slot, !dbg !3683
  br label %cleanup, !dbg !3683

cleanup:                                          ; preds = %if.end, %if.then.3
  %10 = bitcast i32* %vret to i8*, !dbg !3685
  call void @llvm.lifetime.end(i64 4, i8* %10) #3, !dbg !3685
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 1
  br i1 %SwitchLeaf, label %return, label %NewDefault

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %NewDefault
  br label %if.end.4, !dbg !3688

if.end.4:                                         ; preds = %cleanup.cont, %do.body
  br label %do.end, !dbg !3689

do.end:                                           ; preds = %if.end.4
  store i32 0, i32* %retval, !dbg !3692
  br label %return, !dbg !3692

return:                                           ; preds = %LeafBlock, %do.end
  %11 = load i32, i32* %retval, !dbg !3693
  ret i32 %11, !dbg !3693
}

declare %struct._object* @PyObject_SelfIter(%struct._object*) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearrayiter_next(%struct.bytesiterobject* %it) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %it.addr = alloca %struct.bytesiterobject*, align 8
  %seq = alloca %struct.PyByteArrayObject*, align 8
  %item = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.bytesiterobject* %it, %struct.bytesiterobject** %it.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.bytesiterobject** %it.addr, metadata !1897, metadata !2123), !dbg !3694
  %0 = bitcast %struct.PyByteArrayObject** %seq to i8*, !dbg !3695
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !3695
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %seq, metadata !1898, metadata !2123), !dbg !3696
  %1 = bitcast %struct._object** %item to i8*, !dbg !3697
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !3697
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !1899, metadata !2123), !dbg !3698
  %2 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !3699, !tbaa !2119
  %it_seq = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %2, i32 0, i32 2, !dbg !3700
  %3 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %it_seq, align 8, !dbg !3700, !tbaa !3072
  store %struct.PyByteArrayObject* %3, %struct.PyByteArrayObject** %seq, align 8, !dbg !3701, !tbaa !2119
  %4 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %seq, align 8, !dbg !3702, !tbaa !2119
  %cmp = icmp eq %struct.PyByteArrayObject* %4, null, !dbg !3704
  br i1 %cmp, label %if.then, label %if.end, !dbg !3705

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !3706
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3706

if.end:                                           ; preds = %entry
  %5 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !3707, !tbaa !2119
  %it_index = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %5, i32 0, i32 1, !dbg !3709
  %6 = load i64, i64* %it_index, align 8, !dbg !3709, !tbaa !3062
  %7 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %seq, align 8, !dbg !3710, !tbaa !2119
  %8 = bitcast %struct.PyByteArrayObject* %7 to %struct.PyVarObject*, !dbg !3711
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !3712
  %9 = load i64, i64* %ob_size, align 8, !dbg !3712, !tbaa !2239
  %cmp1 = icmp slt i64 %6, %9, !dbg !3713
  br i1 %cmp1, label %if.then.2, label %if.end.10, !dbg !3714

if.then.2:                                        ; preds = %if.end
  %10 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !3715, !tbaa !2119
  %it_index3 = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %10, i32 0, i32 1, !dbg !3717
  %11 = load i64, i64* %it_index3, align 8, !dbg !3717, !tbaa !3062
  %12 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %seq, align 8, !dbg !3718, !tbaa !2119
  %13 = bitcast %struct.PyByteArrayObject* %12 to %struct.PyVarObject*, !dbg !3719
  %ob_size4 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %13, i32 0, i32 1, !dbg !3720
  %14 = load i64, i64* %ob_size4, align 8, !dbg !3720, !tbaa !2239
  %tobool = icmp ne i64 %14, 0, !dbg !3721
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3721

cond.true:                                        ; preds = %if.then.2
  %15 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %seq, align 8, !dbg !3722, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %15, i32 0, i32 3, !dbg !3724
  %16 = load i8*, i8** %ob_start, align 8, !dbg !3724, !tbaa !2250
  br label %cond.end, !dbg !3721

cond.false:                                       ; preds = %if.then.2
  br label %cond.end, !dbg !3725

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %16, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !3721
  %arrayidx = getelementptr i8, i8* %cond, i64 %11, !dbg !3727
  %17 = load i8, i8* %arrayidx, align 1, !dbg !3727, !tbaa !2233
  %conv = zext i8 %17 to i64, !dbg !3730
  %call = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !3731
  store %struct._object* %call, %struct._object** %item, align 8, !dbg !3732, !tbaa !2119
  %18 = load %struct._object*, %struct._object** %item, align 8, !dbg !3733, !tbaa !2119
  %cmp5 = icmp ne %struct._object* %18, null, !dbg !3735
  br i1 %cmp5, label %if.then.7, label %if.end.9, !dbg !3736

if.then.7:                                        ; preds = %cond.end
  %19 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !3737, !tbaa !2119
  %it_index8 = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %19, i32 0, i32 1, !dbg !3738
  %20 = load i64, i64* %it_index8, align 8, !dbg !3739, !tbaa !3062
  %inc = add i64 %20, 1, !dbg !3739
  store i64 %inc, i64* %it_index8, align 8, !dbg !3739, !tbaa !3062
  br label %if.end.9, !dbg !3739

if.end.9:                                         ; preds = %if.then.7, %cond.end
  %21 = load %struct._object*, %struct._object** %item, align 8, !dbg !3740, !tbaa !2119
  store %struct._object* %21, %struct._object** %retval, !dbg !3741
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3741

if.end.10:                                        ; preds = %if.end
  br label %do.body, !dbg !3742

do.body:                                          ; preds = %if.end.10
  %22 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3743
  call void @llvm.lifetime.start(i64 8, i8* %22) #3, !dbg !3743
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1900, metadata !2123), !dbg !3745
  %23 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %seq, align 8, !dbg !3746, !tbaa !2119
  %24 = bitcast %struct.PyByteArrayObject* %23 to %struct._object*, !dbg !3747
  store %struct._object* %24, %struct._object** %_py_decref_tmp, align 8, !dbg !3745, !tbaa !2119
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3748, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0, !dbg !3750
  %26 = load i64, i64* %ob_refcnt, align 8, !dbg !3751, !tbaa !2195
  %dec = add i64 %26, -1, !dbg !3751
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !3751, !tbaa !2195
  %cmp11 = icmp ne i64 %dec, 0, !dbg !3752
  br i1 %cmp11, label %if.then.13, label %if.else, !dbg !3753

if.then.13:                                       ; preds = %do.body
  br label %if.end.14, !dbg !3754

if.else:                                          ; preds = %do.body
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3756, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1, !dbg !3758
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3758, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4, !dbg !3759
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !3759, !tbaa !2205
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3760, !tbaa !2119
  call void %29(%struct._object* %30), !dbg !3761
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.13
  %31 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3762
  call void @llvm.lifetime.end(i64 8, i8* %31) #3, !dbg !3762
  br label %do.cond, !dbg !3764

do.cond:                                          ; preds = %if.end.14
  br label %do.end, !dbg !3765

do.end:                                           ; preds = %do.cond
  %32 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !3767, !tbaa !2119
  %it_seq15 = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %32, i32 0, i32 2, !dbg !3768
  store %struct.PyByteArrayObject* null, %struct.PyByteArrayObject** %it_seq15, align 8, !dbg !3769, !tbaa !3072
  store %struct._object* null, %struct._object** %retval, !dbg !3770
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3770

cleanup:                                          ; preds = %do.end, %if.end.9, %if.then
  %33 = bitcast %struct._object** %item to i8*, !dbg !3771
  call void @llvm.lifetime.end(i64 8, i8* %33) #3, !dbg !3771
  %34 = bitcast %struct.PyByteArrayObject** %seq to i8*, !dbg !3771
  call void @llvm.lifetime.end(i64 8, i8* %34) #3, !dbg !3771
  %35 = load %struct._object*, %struct._object** %retval, !dbg !3771
  ret %struct._object* %35, !dbg !3771
}

declare void @PyErr_Print() #2

declare %struct._object* @PyUnicode_DecodeASCII(i8*, i64, i8*) #2

; Function Attrs: nounwind uwtable
define internal i64 @bytearray_length(%struct.PyByteArrayObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !554, metadata !2123), !dbg !3772
  %0 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3773, !tbaa !2119
  %1 = bitcast %struct.PyByteArrayObject* %0 to %struct.PyVarObject*, !dbg !3774
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1, !dbg !3775
  %2 = load i64, i64* %ob_size, align 8, !dbg !3775, !tbaa !2239
  ret i64 %2, !dbg !3776
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_repeat(%struct.PyByteArrayObject* %self, i64 %count) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %count.addr = alloca i64, align 8
  %result = alloca %struct.PyByteArrayObject*, align 8
  %mysize = alloca i64, align 8
  %size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %i = alloca i64, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !559, metadata !2123), !dbg !3777
  store i64 %count, i64* %count.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !560, metadata !2123), !dbg !3778
  %0 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !3779
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !3779
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %result, metadata !561, metadata !2123), !dbg !3780
  %1 = bitcast i64* %mysize to i8*, !dbg !3781
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !3781
  call void @llvm.dbg.declare(metadata i64* %mysize, metadata !562, metadata !2123), !dbg !3782
  %2 = bitcast i64* %size to i8*, !dbg !3783
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !3783
  call void @llvm.dbg.declare(metadata i64* %size, metadata !563, metadata !2123), !dbg !3784
  %3 = load i64, i64* %count.addr, align 8, !dbg !3785, !tbaa !2129
  %cmp = icmp slt i64 %3, 0, !dbg !3787
  br i1 %cmp, label %if.then, label %if.end, !dbg !3788

if.then:                                          ; preds = %entry
  store i64 0, i64* %count.addr, align 8, !dbg !3789, !tbaa !2129
  br label %if.end, !dbg !3790

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3791, !tbaa !2119
  %5 = bitcast %struct.PyByteArrayObject* %4 to %struct.PyVarObject*, !dbg !3792
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %5, i32 0, i32 1, !dbg !3793
  %6 = load i64, i64* %ob_size, align 8, !dbg !3793, !tbaa !2239
  store i64 %6, i64* %mysize, align 8, !dbg !3794, !tbaa !2129
  %7 = load i64, i64* %count.addr, align 8, !dbg !3795, !tbaa !2129
  %cmp1 = icmp sgt i64 %7, 0, !dbg !3797
  br i1 %cmp1, label %land.lhs.true, label %if.end.4, !dbg !3798

land.lhs.true:                                    ; preds = %if.end
  %8 = load i64, i64* %mysize, align 8, !dbg !3799, !tbaa !2129
  %9 = load i64, i64* %count.addr, align 8, !dbg !3801, !tbaa !2129
  %div = sdiv i64 9223372036854775807, %9, !dbg !3802
  %cmp2 = icmp sgt i64 %8, %div, !dbg !3803
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !3804

if.then.3:                                        ; preds = %land.lhs.true
  %call = call %struct._object* @PyErr_NoMemory(), !dbg !3805
  store %struct._object* %call, %struct._object** %retval, !dbg !3806
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3806

if.end.4:                                         ; preds = %land.lhs.true, %if.end
  %10 = load i64, i64* %mysize, align 8, !dbg !3807, !tbaa !2129
  %11 = load i64, i64* %count.addr, align 8, !dbg !3808, !tbaa !2129
  %mul = mul i64 %10, %11, !dbg !3809
  store i64 %mul, i64* %size, align 8, !dbg !3810, !tbaa !2129
  %12 = load i64, i64* %size, align 8, !dbg !3811, !tbaa !2129
  %call5 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %12), !dbg !3812
  %13 = bitcast %struct._object* %call5 to %struct.PyByteArrayObject*, !dbg !3813
  store %struct.PyByteArrayObject* %13, %struct.PyByteArrayObject** %result, align 8, !dbg !3814, !tbaa !2119
  %14 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !3815, !tbaa !2119
  %cmp6 = icmp ne %struct.PyByteArrayObject* %14, null, !dbg !3816
  br i1 %cmp6, label %land.lhs.true.7, label %if.end.19, !dbg !3817

land.lhs.true.7:                                  ; preds = %if.end.4
  %15 = load i64, i64* %size, align 8, !dbg !3818, !tbaa !2129
  %cmp8 = icmp ne i64 %15, 0, !dbg !3820
  br i1 %cmp8, label %if.then.9, label %if.end.19, !dbg !3821

if.then.9:                                        ; preds = %land.lhs.true.7
  %16 = load i64, i64* %mysize, align 8, !dbg !3822, !tbaa !2129
  %cmp10 = icmp eq i64 %16, 1, !dbg !3823
  br i1 %cmp10, label %if.then.11, label %if.else, !dbg !3824

if.then.11:                                       ; preds = %if.then.9
  %17 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !3825, !tbaa !2119
  %ob_bytes = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %17, i32 0, i32 2, !dbg !3826
  %18 = load i8*, i8** %ob_bytes, align 8, !dbg !3826, !tbaa !2166
  %19 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3827, !tbaa !2119
  %ob_bytes12 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %19, i32 0, i32 2, !dbg !3828
  %20 = load i8*, i8** %ob_bytes12, align 8, !dbg !3828, !tbaa !2166
  %arrayidx = getelementptr i8, i8* %20, i64 0, !dbg !3827
  %21 = load i8, i8* %arrayidx, align 1, !dbg !3827, !tbaa !2233
  %conv = sext i8 %21 to i32, !dbg !3827
  %22 = trunc i32 %conv to i8, !dbg !3829
  %23 = load i64, i64* %size, align 8, !dbg !3830, !tbaa !2129
  call void @llvm.memset.p0i8.i64(i8* %18, i8 %22, i64 %23, i32 1, i1 false), !dbg !3829
  br label %if.end.18, !dbg !3829

if.else:                                          ; preds = %if.then.9
  %24 = bitcast i64* %i to i8*, !dbg !3831
  call void @llvm.lifetime.start(i64 8, i8* %24) #3, !dbg !3831
  call void @llvm.dbg.declare(metadata i64* %i, metadata !564, metadata !2123), !dbg !3832
  store i64 0, i64* %i, align 8, !dbg !3833, !tbaa !2129
  br label %for.cond, !dbg !3835

for.cond:                                         ; preds = %for.inc, %if.else
  %25 = load i64, i64* %i, align 8, !dbg !3836, !tbaa !2129
  %26 = load i64, i64* %count.addr, align 8, !dbg !3840, !tbaa !2129
  %cmp13 = icmp slt i64 %25, %26, !dbg !3841
  br i1 %cmp13, label %for.body, label %for.end, !dbg !3842

for.body:                                         ; preds = %for.cond
  %27 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !3843, !tbaa !2119
  %ob_bytes15 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %27, i32 0, i32 2, !dbg !3844
  %28 = load i8*, i8** %ob_bytes15, align 8, !dbg !3844, !tbaa !2166
  %29 = load i64, i64* %i, align 8, !dbg !3845, !tbaa !2129
  %30 = load i64, i64* %mysize, align 8, !dbg !3846, !tbaa !2129
  %mul16 = mul i64 %29, %30, !dbg !3847
  %add.ptr = getelementptr i8, i8* %28, i64 %mul16, !dbg !3848
  %31 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3849, !tbaa !2119
  %ob_bytes17 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %31, i32 0, i32 2, !dbg !3850
  %32 = load i8*, i8** %ob_bytes17, align 8, !dbg !3850, !tbaa !2166
  %33 = load i64, i64* %mysize, align 8, !dbg !3851, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %32, i64 %33, i32 1, i1 false), !dbg !3852
  br label %for.inc, !dbg !3852

for.inc:                                          ; preds = %for.body
  %34 = load i64, i64* %i, align 8, !dbg !3853, !tbaa !2129
  %inc = add i64 %34, 1, !dbg !3853
  store i64 %inc, i64* %i, align 8, !dbg !3853, !tbaa !2129
  br label %for.cond, !dbg !3854

for.end:                                          ; preds = %for.cond
  %35 = bitcast i64* %i to i8*, !dbg !3855
  call void @llvm.lifetime.end(i64 8, i8* %35) #3, !dbg !3855
  br label %if.end.18

if.end.18:                                        ; preds = %for.end, %if.then.11
  br label %if.end.19, !dbg !3856

if.end.19:                                        ; preds = %if.end.18, %land.lhs.true.7, %if.end.4
  %36 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !3857, !tbaa !2119
  %37 = bitcast %struct.PyByteArrayObject* %36 to %struct._object*, !dbg !3858
  store %struct._object* %37, %struct._object** %retval, !dbg !3859
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3859

cleanup:                                          ; preds = %if.end.19, %if.then.3
  %38 = bitcast i64* %size to i8*, !dbg !3860
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !3860
  %39 = bitcast i64* %mysize to i8*, !dbg !3860
  call void @llvm.lifetime.end(i64 8, i8* %39) #3, !dbg !3860
  %40 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !3860
  call void @llvm.lifetime.end(i64 8, i8* %40) #3, !dbg !3860
  %41 = load %struct._object*, %struct._object** %retval, !dbg !3860
  ret %struct._object* %41, !dbg !3860
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_getitem(%struct.PyByteArrayObject* %self, i64 %i) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %i.addr = alloca i64, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !571, metadata !2123), !dbg !3861
  store i64 %i, i64* %i.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !572, metadata !2123), !dbg !3862
  %0 = load i64, i64* %i.addr, align 8, !dbg !3863, !tbaa !2129
  %cmp = icmp slt i64 %0, 0, !dbg !3865
  br i1 %cmp, label %if.then, label %if.end, !dbg !3866

if.then:                                          ; preds = %entry
  %1 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3867, !tbaa !2119
  %2 = bitcast %struct.PyByteArrayObject* %1 to %struct.PyVarObject*, !dbg !3868
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1, !dbg !3869
  %3 = load i64, i64* %ob_size, align 8, !dbg !3869, !tbaa !2239
  %4 = load i64, i64* %i.addr, align 8, !dbg !3870, !tbaa !2129
  %add = add i64 %4, %3, !dbg !3870
  store i64 %add, i64* %i.addr, align 8, !dbg !3870, !tbaa !2129
  br label %if.end, !dbg !3871

if.end:                                           ; preds = %if.then, %entry
  %5 = load i64, i64* %i.addr, align 8, !dbg !3872, !tbaa !2129
  %cmp1 = icmp slt i64 %5, 0, !dbg !3874
  br i1 %cmp1, label %if.then.4, label %lor.lhs.false, !dbg !3875

lor.lhs.false:                                    ; preds = %if.end
  %6 = load i64, i64* %i.addr, align 8, !dbg !3876, !tbaa !2129
  %7 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3878, !tbaa !2119
  %8 = bitcast %struct.PyByteArrayObject* %7 to %struct.PyVarObject*, !dbg !3879
  %ob_size2 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !3880
  %9 = load i64, i64* %ob_size2, align 8, !dbg !3880, !tbaa !2239
  %cmp3 = icmp sge i64 %6, %9, !dbg !3881
  br i1 %cmp3, label %if.then.4, label %if.end.5, !dbg !3882

if.then.4:                                        ; preds = %lor.lhs.false, %if.end
  %10 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !3883, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %10, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.10, i32 0, i32 0)), !dbg !3885
  store %struct._object* null, %struct._object** %retval, !dbg !3886
  br label %return, !dbg !3886

if.end.5:                                         ; preds = %lor.lhs.false
  %11 = load i64, i64* %i.addr, align 8, !dbg !3887, !tbaa !2129
  %12 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3888, !tbaa !2119
  %13 = bitcast %struct.PyByteArrayObject* %12 to %struct.PyVarObject*, !dbg !3889
  %ob_size6 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %13, i32 0, i32 1, !dbg !3890
  %14 = load i64, i64* %ob_size6, align 8, !dbg !3890, !tbaa !2239
  %tobool = icmp ne i64 %14, 0, !dbg !3891
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3891

cond.true:                                        ; preds = %if.end.5
  %15 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3892, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %15, i32 0, i32 3, !dbg !3894
  %16 = load i8*, i8** %ob_start, align 8, !dbg !3894, !tbaa !2250
  br label %cond.end, !dbg !3891

cond.false:                                       ; preds = %if.end.5
  br label %cond.end, !dbg !3895

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %16, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !3891
  %arrayidx = getelementptr i8, i8* %cond, i64 %11, !dbg !3897
  %17 = load i8, i8* %arrayidx, align 1, !dbg !3897, !tbaa !2233
  %conv = zext i8 %17 to i64, !dbg !3900
  %call = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !3901
  store %struct._object* %call, %struct._object** %retval, !dbg !3902
  br label %return, !dbg !3902

return:                                           ; preds = %cond.end, %if.then.4
  %18 = load %struct._object*, %struct._object** %retval, !dbg !3903
  ret %struct._object* %18, !dbg !3903
}

; Function Attrs: nounwind uwtable
define internal i32 @bytearray_setitem(%struct.PyByteArrayObject* %self, i64 %i, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %i.addr = alloca i64, align 8
  %value.addr = alloca %struct._object*, align 8
  %ival = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !577, metadata !2123), !dbg !3904
  store i64 %i, i64* %i.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !578, metadata !2123), !dbg !3905
  store %struct._object* %value, %struct._object** %value.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %value.addr, metadata !579, metadata !2123), !dbg !3906
  %0 = bitcast i32* %ival to i8*, !dbg !3907
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !3907
  call void @llvm.dbg.declare(metadata i32* %ival, metadata !580, metadata !2123), !dbg !3908
  %1 = load i64, i64* %i.addr, align 8, !dbg !3909, !tbaa !2129
  %cmp = icmp slt i64 %1, 0, !dbg !3911
  br i1 %cmp, label %if.then, label %if.end, !dbg !3912

if.then:                                          ; preds = %entry
  %2 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3913, !tbaa !2119
  %3 = bitcast %struct.PyByteArrayObject* %2 to %struct.PyVarObject*, !dbg !3914
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1, !dbg !3915
  %4 = load i64, i64* %ob_size, align 8, !dbg !3915, !tbaa !2239
  %5 = load i64, i64* %i.addr, align 8, !dbg !3916, !tbaa !2129
  %add = add i64 %5, %4, !dbg !3916
  store i64 %add, i64* %i.addr, align 8, !dbg !3916, !tbaa !2129
  br label %if.end, !dbg !3917

if.end:                                           ; preds = %if.then, %entry
  %6 = load i64, i64* %i.addr, align 8, !dbg !3918, !tbaa !2129
  %cmp1 = icmp slt i64 %6, 0, !dbg !3920
  br i1 %cmp1, label %if.then.4, label %lor.lhs.false, !dbg !3921

lor.lhs.false:                                    ; preds = %if.end
  %7 = load i64, i64* %i.addr, align 8, !dbg !3922, !tbaa !2129
  %8 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3924, !tbaa !2119
  %9 = bitcast %struct.PyByteArrayObject* %8 to %struct.PyVarObject*, !dbg !3925
  %ob_size2 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %9, i32 0, i32 1, !dbg !3926
  %10 = load i64, i64* %ob_size2, align 8, !dbg !3926, !tbaa !2239
  %cmp3 = icmp sge i64 %7, %10, !dbg !3927
  br i1 %cmp3, label %if.then.4, label %if.end.5, !dbg !3928

if.then.4:                                        ; preds = %lor.lhs.false, %if.end
  %11 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !3929, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %11, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.10, i32 0, i32 0)), !dbg !3931
  store i32 -1, i32* %retval, !dbg !3932
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3932

if.end.5:                                         ; preds = %lor.lhs.false
  %12 = load %struct._object*, %struct._object** %value.addr, align 8, !dbg !3933, !tbaa !2119
  %cmp6 = icmp eq %struct._object* %12, null, !dbg !3935
  br i1 %cmp6, label %if.then.7, label %if.end.9, !dbg !3936

if.then.7:                                        ; preds = %if.end.5
  %13 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3937, !tbaa !2119
  %14 = load i64, i64* %i.addr, align 8, !dbg !3938, !tbaa !2129
  %15 = load i64, i64* %i.addr, align 8, !dbg !3939, !tbaa !2129
  %add8 = add i64 %15, 1, !dbg !3940
  %call = call i32 @bytearray_setslice(%struct.PyByteArrayObject* %13, i64 %14, i64 %add8, %struct._object* null), !dbg !3941
  store i32 %call, i32* %retval, !dbg !3942
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3942

if.end.9:                                         ; preds = %if.end.5
  %16 = load %struct._object*, %struct._object** %value.addr, align 8, !dbg !3943, !tbaa !2119
  %call10 = call i32 @_getbytevalue(%struct._object* %16, i32* %ival), !dbg !3945
  %tobool = icmp ne i32 %call10, 0, !dbg !3945
  br i1 %tobool, label %if.end.12, label %if.then.11, !dbg !3946

if.then.11:                                       ; preds = %if.end.9
  store i32 -1, i32* %retval, !dbg !3947
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3947

if.end.12:                                        ; preds = %if.end.9
  %17 = load i32, i32* %ival, align 4, !dbg !3948, !tbaa !2676
  %conv = trunc i32 %17 to i8, !dbg !3948
  %18 = load i64, i64* %i.addr, align 8, !dbg !3949, !tbaa !2129
  %19 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3950, !tbaa !2119
  %20 = bitcast %struct.PyByteArrayObject* %19 to %struct.PyVarObject*, !dbg !3951
  %ob_size13 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %20, i32 0, i32 1, !dbg !3952
  %21 = load i64, i64* %ob_size13, align 8, !dbg !3952, !tbaa !2239
  %tobool14 = icmp ne i64 %21, 0, !dbg !3953
  br i1 %tobool14, label %cond.true, label %cond.false, !dbg !3953

cond.true:                                        ; preds = %if.end.12
  %22 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !3954, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %22, i32 0, i32 3, !dbg !3956
  %23 = load i8*, i8** %ob_start, align 8, !dbg !3956, !tbaa !2250
  br label %cond.end, !dbg !3953

cond.false:                                       ; preds = %if.end.12
  br label %cond.end, !dbg !3957

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %23, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !3953
  %arrayidx = getelementptr i8, i8* %cond, i64 %18, !dbg !3959
  store i8 %conv, i8* %arrayidx, align 1, !dbg !3962, !tbaa !2233
  store i32 0, i32* %retval, !dbg !3963
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3963

cleanup:                                          ; preds = %cond.end, %if.then.11, %if.then.7, %if.then.4
  %24 = bitcast i32* %ival to i8*, !dbg !3964
  call void @llvm.lifetime.end(i64 4, i8* %24) #3, !dbg !3964
  %25 = load i32, i32* %retval, !dbg !3964
  ret i32 %25, !dbg !3964
}

; Function Attrs: nounwind uwtable
define internal i32 @bytearray_contains(%struct._object* %self, %struct._object* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %ival = alloca i64, align 8
  %varg = alloca %struct.bufferinfo, align 8
  %pos = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !626, metadata !2123), !dbg !3965
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !627, metadata !2123), !dbg !3966
  %0 = bitcast i64* %ival to i8*, !dbg !3967
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !3967
  call void @llvm.dbg.declare(metadata i64* %ival, metadata !628, metadata !2123), !dbg !3968
  %1 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !3969, !tbaa !2119
  %2 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !3970, !tbaa !2119
  %call = call i64 @PyNumber_AsSsize_t(%struct._object* %1, %struct._object* %2), !dbg !3971
  store i64 %call, i64* %ival, align 8, !dbg !3968, !tbaa !2129
  %3 = load i64, i64* %ival, align 8, !dbg !3972, !tbaa !2129
  %cmp = icmp eq i64 %3, -1, !dbg !3973
  br i1 %cmp, label %land.lhs.true, label %if.end.10, !dbg !3974

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred(), !dbg !3975
  %tobool = icmp ne %struct._object* %call1, null, !dbg !3975
  br i1 %tobool, label %if.then, label %if.end.10, !dbg !3977

if.then:                                          ; preds = %land.lhs.true
  %4 = bitcast %struct.bufferinfo* %varg to i8*, !dbg !3978
  call void @llvm.lifetime.start(i64 80, i8* %4) #3, !dbg !3978
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %varg, metadata !629, metadata !2123), !dbg !3979
  %5 = bitcast i64* %pos to i8*, !dbg !3980
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !3980
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !632, metadata !2123), !dbg !3981
  call void @PyErr_Clear(), !dbg !3982
  %6 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !3983, !tbaa !2119
  %call2 = call i64 @_getbuffer(%struct._object* %6, %struct.bufferinfo* %varg), !dbg !3985
  %cmp3 = icmp slt i64 %call2, 0, !dbg !3986
  br i1 %cmp3, label %if.then.4, label %if.end, !dbg !3987

if.then.4:                                        ; preds = %if.then
  store i32 -1, i32* %retval, !dbg !3988
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3988

if.end:                                           ; preds = %if.then
  %7 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !3989, !tbaa !2119
  %8 = bitcast %struct._object* %7 to %struct.PyVarObject*, !dbg !3990
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !3991
  %9 = load i64, i64* %ob_size, align 8, !dbg !3991, !tbaa !2239
  %tobool5 = icmp ne i64 %9, 0, !dbg !3992
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !3992

cond.true:                                        ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !3993, !tbaa !2119
  %11 = bitcast %struct._object* %10 to %struct.PyByteArrayObject*, !dbg !3995
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %11, i32 0, i32 3, !dbg !3996
  %12 = load i8*, i8** %ob_start, align 8, !dbg !3996, !tbaa !2250
  br label %cond.end, !dbg !3992

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3997

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %12, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !3992
  %13 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !3999, !tbaa !2119
  %14 = bitcast %struct._object* %13 to %struct.PyVarObject*, !dbg !4002
  %ob_size6 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %14, i32 0, i32 1, !dbg !4003
  %15 = load i64, i64* %ob_size6, align 8, !dbg !4003, !tbaa !2239
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %varg, i32 0, i32 0, !dbg !4004
  %16 = load i8*, i8** %buf, align 8, !dbg !4004, !tbaa !2529
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %varg, i32 0, i32 2, !dbg !4005
  %17 = load i64, i64* %len, align 8, !dbg !4005, !tbaa !2482
  %call7 = call i64 @stringlib_find(i8* %cond, i64 %15, i8* %16, i64 %17, i64 0), !dbg !4006
  store i64 %call7, i64* %pos, align 8, !dbg !4007, !tbaa !2129
  call void @PyBuffer_Release(%struct.bufferinfo* %varg), !dbg !4008
  %18 = load i64, i64* %pos, align 8, !dbg !4009, !tbaa !2129
  %cmp8 = icmp sge i64 %18, 0, !dbg !4010
  %conv = zext i1 %cmp8 to i32, !dbg !4010
  store i32 %conv, i32* %retval, !dbg !4011
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4011

cleanup:                                          ; preds = %cond.end, %if.then.4
  %19 = bitcast i64* %pos to i8*, !dbg !4012
  call void @llvm.lifetime.end(i64 8, i8* %19) #3, !dbg !4012
  %20 = bitcast %struct.bufferinfo* %varg to i8*, !dbg !4012
  call void @llvm.lifetime.end(i64 80, i8* %20) #3, !dbg !4012
  br label %cleanup.29

if.end.10:                                        ; preds = %land.lhs.true, %entry
  %21 = load i64, i64* %ival, align 8, !dbg !4013, !tbaa !2129
  %cmp11 = icmp slt i64 %21, 0, !dbg !4015
  br i1 %cmp11, label %if.then.15, label %lor.lhs.false, !dbg !4016

lor.lhs.false:                                    ; preds = %if.end.10
  %22 = load i64, i64* %ival, align 8, !dbg !4017, !tbaa !2129
  %cmp13 = icmp sge i64 %22, 256, !dbg !4019
  br i1 %cmp13, label %if.then.15, label %if.end.16, !dbg !4020

if.then.15:                                       ; preds = %lor.lhs.false, %if.end.10
  %23 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !4021, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %23, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i32 0, i32 0)), !dbg !4023
  store i32 -1, i32* %retval, !dbg !4024
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.29, !dbg !4024

if.end.16:                                        ; preds = %lor.lhs.false
  %24 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !4025, !tbaa !2119
  %25 = bitcast %struct._object* %24 to %struct.PyVarObject*, !dbg !4026
  %ob_size17 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %25, i32 0, i32 1, !dbg !4027
  %26 = load i64, i64* %ob_size17, align 8, !dbg !4027, !tbaa !2239
  %tobool18 = icmp ne i64 %26, 0, !dbg !4028
  br i1 %tobool18, label %cond.true.19, label %cond.false.21, !dbg !4028

cond.true.19:                                     ; preds = %if.end.16
  %27 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !4029, !tbaa !2119
  %28 = bitcast %struct._object* %27 to %struct.PyByteArrayObject*, !dbg !4031
  %ob_start20 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %28, i32 0, i32 3, !dbg !4032
  %29 = load i8*, i8** %ob_start20, align 8, !dbg !4032, !tbaa !2250
  br label %cond.end.22, !dbg !4028

cond.false.21:                                    ; preds = %if.end.16
  br label %cond.end.22, !dbg !4033

cond.end.22:                                      ; preds = %cond.false.21, %cond.true.19
  %cond23 = phi i8* [ %29, %cond.true.19 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.21 ], !dbg !4028
  %30 = load i64, i64* %ival, align 8, !dbg !4035, !tbaa !2129
  %conv24 = trunc i64 %30 to i32, !dbg !4038
  %31 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !4039, !tbaa !2119
  %32 = bitcast %struct._object* %31 to %struct.PyVarObject*, !dbg !4040
  %ob_size25 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %32, i32 0, i32 1, !dbg !4041
  %33 = load i64, i64* %ob_size25, align 8, !dbg !4041, !tbaa !2239
  %call26 = call i8* @memchr(i8* %cond23, i32 %conv24, i64 %33) #8, !dbg !4042
  %cmp27 = icmp ne i8* %call26, null, !dbg !4043
  %conv28 = zext i1 %cmp27 to i32, !dbg !4043
  store i32 %conv28, i32* %retval, !dbg !4044
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.29, !dbg !4044

cleanup.29:                                       ; preds = %cond.end.22, %if.then.15, %cleanup
  %34 = bitcast i64* %ival to i8*, !dbg !4045
  call void @llvm.lifetime.end(i64 8, i8* %34) #3, !dbg !4045
  %35 = load i32, i32* %retval, !dbg !4045
  ret i32 %35, !dbg !4045
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_iconcat(%struct.PyByteArrayObject* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %other.addr = alloca %struct._object*, align 8
  %mysize = alloca i64, align 8
  %size = alloca i64, align 8
  %vo = alloca %struct.bufferinfo, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !696, metadata !2123), !dbg !4046
  store %struct._object* %other, %struct._object** %other.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %other.addr, metadata !697, metadata !2123), !dbg !4047
  %0 = bitcast i64* %mysize to i8*, !dbg !4048
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !4048
  call void @llvm.dbg.declare(metadata i64* %mysize, metadata !698, metadata !2123), !dbg !4049
  %1 = bitcast i64* %size to i8*, !dbg !4050
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !4050
  call void @llvm.dbg.declare(metadata i64* %size, metadata !699, metadata !2123), !dbg !4051
  %2 = bitcast %struct.bufferinfo* %vo to i8*, !dbg !4052
  call void @llvm.lifetime.start(i64 80, i8* %2) #3, !dbg !4052
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %vo, metadata !700, metadata !2123), !dbg !4053
  %3 = load %struct._object*, %struct._object** %other.addr, align 8, !dbg !4054, !tbaa !2119
  %call = call i64 @_getbuffer(%struct._object* %3, %struct.bufferinfo* %vo), !dbg !4056
  %cmp = icmp slt i64 %call, 0, !dbg !4057
  br i1 %cmp, label %if.then, label %if.end, !dbg !4058

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !4059, !tbaa !2119
  %5 = load %struct._object*, %struct._object** %other.addr, align 8, !dbg !4061, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !4062
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4062, !tbaa !2203
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 1, !dbg !4063
  %7 = load i8*, i8** %tp_name, align 8, !dbg !4063, !tbaa !2500
  %8 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4064, !tbaa !2119
  %9 = bitcast %struct.PyByteArrayObject* %8 to %struct._object*, !dbg !4065
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1, !dbg !4066
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !4066, !tbaa !2203
  %tp_name2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 1, !dbg !4067
  %11 = load i8*, i8** %tp_name2, align 8, !dbg !4067, !tbaa !2500
  %call3 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %4, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i32 0, i32 0), i8* %7, i8* %11), !dbg !4068
  store %struct._object* null, %struct._object** %retval, !dbg !4069
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4069

if.end:                                           ; preds = %entry
  %12 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4070, !tbaa !2119
  %13 = bitcast %struct.PyByteArrayObject* %12 to %struct.PyVarObject*, !dbg !4071
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %13, i32 0, i32 1, !dbg !4072
  %14 = load i64, i64* %ob_size, align 8, !dbg !4072, !tbaa !2239
  store i64 %14, i64* %mysize, align 8, !dbg !4073, !tbaa !2129
  %15 = load i64, i64* %mysize, align 8, !dbg !4074, !tbaa !2129
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vo, i32 0, i32 2, !dbg !4075
  %16 = load i64, i64* %len, align 8, !dbg !4075, !tbaa !2482
  %add = add i64 %15, %16, !dbg !4076
  store i64 %add, i64* %size, align 8, !dbg !4077, !tbaa !2129
  %17 = load i64, i64* %size, align 8, !dbg !4078, !tbaa !2129
  %cmp4 = icmp slt i64 %17, 0, !dbg !4080
  br i1 %cmp4, label %if.then.5, label %if.end.7, !dbg !4081

if.then.5:                                        ; preds = %if.end
  call void @PyBuffer_Release(%struct.bufferinfo* %vo), !dbg !4082
  %call6 = call %struct._object* @PyErr_NoMemory(), !dbg !4084
  store %struct._object* %call6, %struct._object** %retval, !dbg !4085
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4085

if.end.7:                                         ; preds = %if.end
  %18 = load i64, i64* %size, align 8, !dbg !4086, !tbaa !2129
  %19 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4088, !tbaa !2119
  %ob_alloc = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %19, i32 0, i32 1, !dbg !4089
  %20 = load i64, i64* %ob_alloc, align 8, !dbg !4089, !tbaa !2244
  %cmp8 = icmp slt i64 %18, %20, !dbg !4090
  br i1 %cmp8, label %if.then.9, label %if.else, !dbg !4091

if.then.9:                                        ; preds = %if.end.7
  %21 = load i64, i64* %size, align 8, !dbg !4092, !tbaa !2129
  %22 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4094, !tbaa !2119
  %23 = bitcast %struct.PyByteArrayObject* %22 to %struct.PyVarObject*, !dbg !4095
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %23, i32 0, i32 1, !dbg !4096
  store i64 %21, i64* %ob_size10, align 8, !dbg !4097, !tbaa !2239
  %24 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4098, !tbaa !2119
  %25 = bitcast %struct.PyByteArrayObject* %24 to %struct.PyVarObject*, !dbg !4099
  %ob_size11 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %25, i32 0, i32 1, !dbg !4100
  %26 = load i64, i64* %ob_size11, align 8, !dbg !4100, !tbaa !2239
  %27 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4101, !tbaa !2119
  %28 = bitcast %struct.PyByteArrayObject* %27 to %struct.PyVarObject*, !dbg !4102
  %ob_size12 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %28, i32 0, i32 1, !dbg !4103
  %29 = load i64, i64* %ob_size12, align 8, !dbg !4103, !tbaa !2239
  %tobool = icmp ne i64 %29, 0, !dbg !4104
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4104

cond.true:                                        ; preds = %if.then.9
  %30 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4105, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %30, i32 0, i32 3, !dbg !4107
  %31 = load i8*, i8** %ob_start, align 8, !dbg !4107, !tbaa !2250
  br label %cond.end, !dbg !4104

cond.false:                                       ; preds = %if.then.9
  br label %cond.end, !dbg !4108

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %31, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !4104
  %arrayidx = getelementptr i8, i8* %cond, i64 %26, !dbg !4110
  store i8 0, i8* %arrayidx, align 1, !dbg !4113, !tbaa !2233
  br label %if.end.17, !dbg !4114

if.else:                                          ; preds = %if.end.7
  %32 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4115, !tbaa !2119
  %33 = bitcast %struct.PyByteArrayObject* %32 to %struct._object*, !dbg !4117
  %34 = load i64, i64* %size, align 8, !dbg !4118, !tbaa !2129
  %call13 = call i32 @PyByteArray_Resize(%struct._object* %33, i64 %34), !dbg !4119
  %cmp14 = icmp slt i32 %call13, 0, !dbg !4120
  br i1 %cmp14, label %if.then.15, label %if.end.16, !dbg !4121

if.then.15:                                       ; preds = %if.else
  call void @PyBuffer_Release(%struct.bufferinfo* %vo), !dbg !4122
  store %struct._object* null, %struct._object** %retval, !dbg !4124
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4124

if.end.16:                                        ; preds = %if.else
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %cond.end
  %35 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4125, !tbaa !2119
  %36 = bitcast %struct.PyByteArrayObject* %35 to %struct.PyVarObject*, !dbg !4126
  %ob_size18 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %36, i32 0, i32 1, !dbg !4127
  %37 = load i64, i64* %ob_size18, align 8, !dbg !4127, !tbaa !2239
  %tobool19 = icmp ne i64 %37, 0, !dbg !4128
  br i1 %tobool19, label %cond.true.20, label %cond.false.22, !dbg !4128

cond.true.20:                                     ; preds = %if.end.17
  %38 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4129, !tbaa !2119
  %ob_start21 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %38, i32 0, i32 3, !dbg !4131
  %39 = load i8*, i8** %ob_start21, align 8, !dbg !4131, !tbaa !2250
  br label %cond.end.23, !dbg !4128

cond.false.22:                                    ; preds = %if.end.17
  br label %cond.end.23, !dbg !4132

cond.end.23:                                      ; preds = %cond.false.22, %cond.true.20
  %cond24 = phi i8* [ %39, %cond.true.20 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.22 ], !dbg !4128
  %40 = load i64, i64* %mysize, align 8, !dbg !4134, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %cond24, i64 %40, !dbg !4137
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vo, i32 0, i32 0, !dbg !4138
  %41 = load i8*, i8** %buf, align 8, !dbg !4138, !tbaa !2529
  %len25 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vo, i32 0, i32 2, !dbg !4139
  %42 = load i64, i64* %len25, align 8, !dbg !4139, !tbaa !2482
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %41, i64 %42, i32 1, i1 false), !dbg !4140
  call void @PyBuffer_Release(%struct.bufferinfo* %vo), !dbg !4141
  %43 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4142, !tbaa !2119
  %44 = bitcast %struct.PyByteArrayObject* %43 to %struct._object*, !dbg !4143
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0, !dbg !4144
  %45 = load i64, i64* %ob_refcnt, align 8, !dbg !4145, !tbaa !2195
  %inc = add i64 %45, 1, !dbg !4145
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !4145, !tbaa !2195
  %46 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4146, !tbaa !2119
  %47 = bitcast %struct.PyByteArrayObject* %46 to %struct._object*, !dbg !4147
  store %struct._object* %47, %struct._object** %retval, !dbg !4148
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4148

cleanup:                                          ; preds = %cond.end.23, %if.then.15, %if.then.5, %if.then
  %48 = bitcast %struct.bufferinfo* %vo to i8*, !dbg !4149
  call void @llvm.lifetime.end(i64 80, i8* %48) #3, !dbg !4149
  %49 = bitcast i64* %size to i8*, !dbg !4149
  call void @llvm.lifetime.end(i64 8, i8* %49) #3, !dbg !4149
  %50 = bitcast i64* %mysize to i8*, !dbg !4149
  call void @llvm.lifetime.end(i64 8, i8* %50) #3, !dbg !4149
  %51 = load %struct._object*, %struct._object** %retval, !dbg !4149
  ret %struct._object* %51, !dbg !4149
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_irepeat(%struct.PyByteArrayObject* %self, i64 %count) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %count.addr = alloca i64, align 8
  %mysize = alloca i64, align 8
  %size = alloca i64, align 8
  %buf = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %i = alloca i64, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !703, metadata !2123), !dbg !4150
  store i64 %count, i64* %count.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !704, metadata !2123), !dbg !4151
  %0 = bitcast i64* %mysize to i8*, !dbg !4152
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !4152
  call void @llvm.dbg.declare(metadata i64* %mysize, metadata !705, metadata !2123), !dbg !4153
  %1 = bitcast i64* %size to i8*, !dbg !4154
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !4154
  call void @llvm.dbg.declare(metadata i64* %size, metadata !706, metadata !2123), !dbg !4155
  %2 = bitcast i8** %buf to i8*, !dbg !4156
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !4156
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !707, metadata !2123), !dbg !4157
  %3 = load i64, i64* %count.addr, align 8, !dbg !4158, !tbaa !2129
  %cmp = icmp slt i64 %3, 0, !dbg !4160
  br i1 %cmp, label %if.then, label %if.end, !dbg !4161

if.then:                                          ; preds = %entry
  store i64 0, i64* %count.addr, align 8, !dbg !4162, !tbaa !2129
  br label %if.end, !dbg !4163

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4164, !tbaa !2119
  %5 = bitcast %struct.PyByteArrayObject* %4 to %struct.PyVarObject*, !dbg !4165
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %5, i32 0, i32 1, !dbg !4166
  %6 = load i64, i64* %ob_size, align 8, !dbg !4166, !tbaa !2239
  store i64 %6, i64* %mysize, align 8, !dbg !4167, !tbaa !2129
  %7 = load i64, i64* %count.addr, align 8, !dbg !4168, !tbaa !2129
  %cmp1 = icmp sgt i64 %7, 0, !dbg !4170
  br i1 %cmp1, label %land.lhs.true, label %if.end.4, !dbg !4171

land.lhs.true:                                    ; preds = %if.end
  %8 = load i64, i64* %mysize, align 8, !dbg !4172, !tbaa !2129
  %9 = load i64, i64* %count.addr, align 8, !dbg !4174, !tbaa !2129
  %div = sdiv i64 9223372036854775807, %9, !dbg !4175
  %cmp2 = icmp sgt i64 %8, %div, !dbg !4176
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !4177

if.then.3:                                        ; preds = %land.lhs.true
  %call = call %struct._object* @PyErr_NoMemory(), !dbg !4178
  store %struct._object* %call, %struct._object** %retval, !dbg !4179
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4179

if.end.4:                                         ; preds = %land.lhs.true, %if.end
  %10 = load i64, i64* %mysize, align 8, !dbg !4180, !tbaa !2129
  %11 = load i64, i64* %count.addr, align 8, !dbg !4181, !tbaa !2129
  %mul = mul i64 %10, %11, !dbg !4182
  store i64 %mul, i64* %size, align 8, !dbg !4183, !tbaa !2129
  %12 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4184, !tbaa !2119
  %13 = bitcast %struct.PyByteArrayObject* %12 to %struct._object*, !dbg !4186
  %14 = load i64, i64* %size, align 8, !dbg !4187, !tbaa !2129
  %call5 = call i32 @PyByteArray_Resize(%struct._object* %13, i64 %14), !dbg !4188
  %cmp6 = icmp slt i32 %call5, 0, !dbg !4189
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !4190

if.then.7:                                        ; preds = %if.end.4
  store %struct._object* null, %struct._object** %retval, !dbg !4191
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4191

if.end.8:                                         ; preds = %if.end.4
  %15 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4192, !tbaa !2119
  %16 = bitcast %struct.PyByteArrayObject* %15 to %struct.PyVarObject*, !dbg !4193
  %ob_size9 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %16, i32 0, i32 1, !dbg !4194
  %17 = load i64, i64* %ob_size9, align 8, !dbg !4194, !tbaa !2239
  %tobool = icmp ne i64 %17, 0, !dbg !4195
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4195

cond.true:                                        ; preds = %if.end.8
  %18 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4196, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %18, i32 0, i32 3, !dbg !4198
  %19 = load i8*, i8** %ob_start, align 8, !dbg !4198, !tbaa !2250
  br label %cond.end, !dbg !4195

cond.false:                                       ; preds = %if.end.8
  br label %cond.end, !dbg !4199

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %19, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !4195
  store i8* %cond, i8** %buf, align 8, !dbg !4201, !tbaa !2119
  %20 = load i64, i64* %mysize, align 8, !dbg !4204, !tbaa !2129
  %cmp10 = icmp eq i64 %20, 1, !dbg !4205
  br i1 %cmp10, label %if.then.11, label %if.else, !dbg !4206

if.then.11:                                       ; preds = %cond.end
  %21 = load i8*, i8** %buf, align 8, !dbg !4207, !tbaa !2119
  %22 = load i8*, i8** %buf, align 8, !dbg !4208, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %22, i64 0, !dbg !4208
  %23 = load i8, i8* %arrayidx, align 1, !dbg !4208, !tbaa !2233
  %conv = sext i8 %23 to i32, !dbg !4208
  %24 = trunc i32 %conv to i8, !dbg !4209
  %25 = load i64, i64* %size, align 8, !dbg !4210, !tbaa !2129
  call void @llvm.memset.p0i8.i64(i8* %21, i8 %24, i64 %25, i32 1, i1 false), !dbg !4209
  br label %if.end.15, !dbg !4209

if.else:                                          ; preds = %cond.end
  %26 = bitcast i64* %i to i8*, !dbg !4211
  call void @llvm.lifetime.start(i64 8, i8* %26) #3, !dbg !4211
  call void @llvm.dbg.declare(metadata i64* %i, metadata !708, metadata !2123), !dbg !4212
  store i64 1, i64* %i, align 8, !dbg !4213, !tbaa !2129
  br label %for.cond, !dbg !4215

for.cond:                                         ; preds = %for.inc, %if.else
  %27 = load i64, i64* %i, align 8, !dbg !4216, !tbaa !2129
  %28 = load i64, i64* %count.addr, align 8, !dbg !4220, !tbaa !2129
  %cmp12 = icmp slt i64 %27, %28, !dbg !4221
  br i1 %cmp12, label %for.body, label %for.end, !dbg !4222

for.body:                                         ; preds = %for.cond
  %29 = load i8*, i8** %buf, align 8, !dbg !4223, !tbaa !2119
  %30 = load i64, i64* %i, align 8, !dbg !4224, !tbaa !2129
  %31 = load i64, i64* %mysize, align 8, !dbg !4225, !tbaa !2129
  %mul14 = mul i64 %30, %31, !dbg !4226
  %add.ptr = getelementptr i8, i8* %29, i64 %mul14, !dbg !4227
  %32 = load i8*, i8** %buf, align 8, !dbg !4228, !tbaa !2119
  %33 = load i64, i64* %mysize, align 8, !dbg !4229, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %32, i64 %33, i32 1, i1 false), !dbg !4230
  br label %for.inc, !dbg !4230

for.inc:                                          ; preds = %for.body
  %34 = load i64, i64* %i, align 8, !dbg !4231, !tbaa !2129
  %inc = add i64 %34, 1, !dbg !4231
  store i64 %inc, i64* %i, align 8, !dbg !4231, !tbaa !2129
  br label %for.cond, !dbg !4232

for.end:                                          ; preds = %for.cond
  %35 = bitcast i64* %i to i8*, !dbg !4233
  call void @llvm.lifetime.end(i64 8, i8* %35) #3, !dbg !4233
  br label %if.end.15

if.end.15:                                        ; preds = %for.end, %if.then.11
  %36 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4234, !tbaa !2119
  %37 = bitcast %struct.PyByteArrayObject* %36 to %struct._object*, !dbg !4235
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0, !dbg !4236
  %38 = load i64, i64* %ob_refcnt, align 8, !dbg !4237, !tbaa !2195
  %inc16 = add i64 %38, 1, !dbg !4237
  store i64 %inc16, i64* %ob_refcnt, align 8, !dbg !4237, !tbaa !2195
  %39 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4238, !tbaa !2119
  %40 = bitcast %struct.PyByteArrayObject* %39 to %struct._object*, !dbg !4239
  store %struct._object* %40, %struct._object** %retval, !dbg !4240
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4240

cleanup:                                          ; preds = %if.end.15, %if.then.7, %if.then.3
  %41 = bitcast i8** %buf to i8*, !dbg !4241
  call void @llvm.lifetime.end(i64 8, i8* %41) #3, !dbg !4241
  %42 = bitcast i64* %size to i8*, !dbg !4241
  call void @llvm.lifetime.end(i64 8, i8* %42) #3, !dbg !4241
  %43 = bitcast i64* %mysize to i8*, !dbg !4241
  call void @llvm.lifetime.end(i64 8, i8* %43) #3, !dbg !4241
  %44 = load %struct._object*, %struct._object** %retval, !dbg !4241
  ret %struct._object* %44, !dbg !4241
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #3

declare %struct._object* @PyLong_FromLong(i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @bytearray_setslice(%struct.PyByteArrayObject* %self, i64 %lo, i64 %hi, %struct._object* %values) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %lo.addr = alloca i64, align 8
  %hi.addr = alloca i64, align 8
  %values.addr = alloca %struct._object*, align 8
  %needed = alloca i64, align 8
  %bytes = alloca i8*, align 8
  %vbytes = alloca %struct.bufferinfo, align 8
  %res = alloca i32, align 4
  %err = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !585, metadata !2123), !dbg !4242
  store i64 %lo, i64* %lo.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %lo.addr, metadata !586, metadata !2123), !dbg !4243
  store i64 %hi, i64* %hi.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %hi.addr, metadata !587, metadata !2123), !dbg !4244
  store %struct._object* %values, %struct._object** %values.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %values.addr, metadata !588, metadata !2123), !dbg !4245
  %0 = bitcast i64* %needed to i8*, !dbg !4246
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !4246
  call void @llvm.dbg.declare(metadata i64* %needed, metadata !589, metadata !2123), !dbg !4247
  %1 = bitcast i8** %bytes to i8*, !dbg !4248
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !4248
  call void @llvm.dbg.declare(metadata i8** %bytes, metadata !590, metadata !2123), !dbg !4249
  %2 = bitcast %struct.bufferinfo* %vbytes to i8*, !dbg !4250
  call void @llvm.lifetime.start(i64 80, i8* %2) #3, !dbg !4250
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %vbytes, metadata !591, metadata !2123), !dbg !4251
  %3 = bitcast i32* %res to i8*, !dbg !4252
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !4252
  call void @llvm.dbg.declare(metadata i32* %res, metadata !592, metadata !2123), !dbg !4253
  store i32 0, i32* %res, align 4, !dbg !4253, !tbaa !2676
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vbytes, i32 0, i32 2, !dbg !4254
  store i64 -1, i64* %len, align 8, !dbg !4255, !tbaa !2482
  %4 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !4256, !tbaa !2119
  %5 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4257, !tbaa !2119
  %6 = bitcast %struct.PyByteArrayObject* %5 to %struct._object*, !dbg !4258
  %cmp = icmp eq %struct._object* %4, %6, !dbg !4259
  br i1 %cmp, label %if.then, label %if.end.7, !dbg !4260

if.then:                                          ; preds = %entry
  %7 = bitcast i32* %err to i8*, !dbg !4261
  call void @llvm.lifetime.start(i64 4, i8* %7) #3, !dbg !4261
  call void @llvm.dbg.declare(metadata i32* %err, metadata !593, metadata !2123), !dbg !4262
  %8 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !4263, !tbaa !2119
  %call = call %struct._object* @PyByteArray_FromObject(%struct._object* %8), !dbg !4264
  store %struct._object* %call, %struct._object** %values.addr, align 8, !dbg !4265, !tbaa !2119
  %9 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !4266, !tbaa !2119
  %cmp1 = icmp eq %struct._object* %9, null, !dbg !4268
  br i1 %cmp1, label %if.then.2, label %if.end, !dbg !4269

if.then.2:                                        ; preds = %if.then
  store i32 -1, i32* %retval, !dbg !4270
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4270

if.end:                                           ; preds = %if.then
  %10 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4271, !tbaa !2119
  %11 = load i64, i64* %lo.addr, align 8, !dbg !4272, !tbaa !2129
  %12 = load i64, i64* %hi.addr, align 8, !dbg !4273, !tbaa !2129
  %13 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !4274, !tbaa !2119
  %call3 = call i32 @bytearray_setslice(%struct.PyByteArrayObject* %10, i64 %11, i64 %12, %struct._object* %13), !dbg !4275
  store i32 %call3, i32* %err, align 4, !dbg !4276, !tbaa !2676
  br label %do.body, !dbg !4277

do.body:                                          ; preds = %if.end
  %14 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4278
  call void @llvm.lifetime.start(i64 8, i8* %14) #3, !dbg !4278
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !596, metadata !2123), !dbg !4280
  %15 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !4281, !tbaa !2119
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8, !dbg !4280, !tbaa !2119
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4282, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0, !dbg !4284
  %17 = load i64, i64* %ob_refcnt, align 8, !dbg !4285, !tbaa !2195
  %dec = add i64 %17, -1, !dbg !4285
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4285, !tbaa !2195
  %cmp4 = icmp ne i64 %dec, 0, !dbg !4286
  br i1 %cmp4, label %if.then.5, label %if.else, !dbg !4287

if.then.5:                                        ; preds = %do.body
  br label %if.end.6, !dbg !4288

if.else:                                          ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4290, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1, !dbg !4292
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4292, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4, !dbg !4293
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4293, !tbaa !2205
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4294, !tbaa !2119
  call void %20(%struct._object* %21), !dbg !4295
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  %22 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4296
  call void @llvm.lifetime.end(i64 8, i8* %22) #3, !dbg !4296
  br label %do.cond, !dbg !4298

do.cond:                                          ; preds = %if.end.6
  br label %do.end, !dbg !4299

do.end:                                           ; preds = %do.cond
  %23 = load i32, i32* %err, align 4, !dbg !4301, !tbaa !2676
  store i32 %23, i32* %retval, !dbg !4302
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4302

cleanup:                                          ; preds = %do.end, %if.then.2
  %24 = bitcast i32* %err to i8*, !dbg !4303
  call void @llvm.lifetime.end(i64 4, i8* %24) #3, !dbg !4303
  br label %cleanup.34

if.end.7:                                         ; preds = %entry
  %25 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !4304, !tbaa !2119
  %cmp8 = icmp eq %struct._object* %25, null, !dbg !4306
  br i1 %cmp8, label %if.then.9, label %if.else.10, !dbg !4307

if.then.9:                                        ; preds = %if.end.7
  store i8* null, i8** %bytes, align 8, !dbg !4308, !tbaa !2119
  store i64 0, i64* %needed, align 8, !dbg !4310, !tbaa !2129
  br label %if.end.18, !dbg !4311

if.else.10:                                       ; preds = %if.end.7
  %26 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !4312, !tbaa !2119
  %call11 = call i64 @_getbuffer(%struct._object* %26, %struct.bufferinfo* %vbytes), !dbg !4315
  %cmp12 = icmp slt i64 %call11, 0, !dbg !4316
  br i1 %cmp12, label %if.then.13, label %if.end.16, !dbg !4317

if.then.13:                                       ; preds = %if.else.10
  %27 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !4318, !tbaa !2119
  %28 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !4320, !tbaa !2119
  %ob_type14 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1, !dbg !4321
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type14, align 8, !dbg !4321, !tbaa !2203
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 1, !dbg !4322
  %30 = load i8*, i8** %tp_name, align 8, !dbg !4322, !tbaa !2500
  %call15 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %27, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.11, i32 0, i32 0), i8* %30), !dbg !4323
  store i32 -1, i32* %retval, !dbg !4324
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.34, !dbg !4324

if.end.16:                                        ; preds = %if.else.10
  %len17 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vbytes, i32 0, i32 2, !dbg !4325
  %31 = load i64, i64* %len17, align 8, !dbg !4325, !tbaa !2482
  store i64 %31, i64* %needed, align 8, !dbg !4326, !tbaa !2129
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vbytes, i32 0, i32 0, !dbg !4327
  %32 = load i8*, i8** %buf, align 8, !dbg !4327, !tbaa !2529
  store i8* %32, i8** %bytes, align 8, !dbg !4328, !tbaa !2119
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.16, %if.then.9
  %33 = load i64, i64* %lo.addr, align 8, !dbg !4329, !tbaa !2129
  %cmp19 = icmp slt i64 %33, 0, !dbg !4331
  br i1 %cmp19, label %if.then.20, label %if.end.21, !dbg !4332

if.then.20:                                       ; preds = %if.end.18
  store i64 0, i64* %lo.addr, align 8, !dbg !4333, !tbaa !2129
  br label %if.end.21, !dbg !4334

if.end.21:                                        ; preds = %if.then.20, %if.end.18
  %34 = load i64, i64* %hi.addr, align 8, !dbg !4335, !tbaa !2129
  %35 = load i64, i64* %lo.addr, align 8, !dbg !4337, !tbaa !2129
  %cmp22 = icmp slt i64 %34, %35, !dbg !4338
  br i1 %cmp22, label %if.then.23, label %if.end.24, !dbg !4339

if.then.23:                                       ; preds = %if.end.21
  %36 = load i64, i64* %lo.addr, align 8, !dbg !4340, !tbaa !2129
  store i64 %36, i64* %hi.addr, align 8, !dbg !4341, !tbaa !2129
  br label %if.end.24, !dbg !4342

if.end.24:                                        ; preds = %if.then.23, %if.end.21
  %37 = load i64, i64* %hi.addr, align 8, !dbg !4343, !tbaa !2129
  %38 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4345, !tbaa !2119
  %39 = bitcast %struct.PyByteArrayObject* %38 to %struct.PyVarObject*, !dbg !4346
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %39, i32 0, i32 1, !dbg !4347
  %40 = load i64, i64* %ob_size, align 8, !dbg !4347, !tbaa !2239
  %cmp25 = icmp sgt i64 %37, %40, !dbg !4348
  br i1 %cmp25, label %if.then.26, label %if.end.28, !dbg !4349

if.then.26:                                       ; preds = %if.end.24
  %41 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4350, !tbaa !2119
  %42 = bitcast %struct.PyByteArrayObject* %41 to %struct.PyVarObject*, !dbg !4351
  %ob_size27 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %42, i32 0, i32 1, !dbg !4352
  %43 = load i64, i64* %ob_size27, align 8, !dbg !4352, !tbaa !2239
  store i64 %43, i64* %hi.addr, align 8, !dbg !4353, !tbaa !2129
  br label %if.end.28, !dbg !4354

if.end.28:                                        ; preds = %if.then.26, %if.end.24
  %44 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4355, !tbaa !2119
  %45 = load i64, i64* %lo.addr, align 8, !dbg !4356, !tbaa !2129
  %46 = load i64, i64* %hi.addr, align 8, !dbg !4357, !tbaa !2129
  %47 = load i8*, i8** %bytes, align 8, !dbg !4358, !tbaa !2119
  %48 = load i64, i64* %needed, align 8, !dbg !4359, !tbaa !2129
  %call29 = call i32 @bytearray_setslice_linear(%struct.PyByteArrayObject* %44, i64 %45, i64 %46, i8* %47, i64 %48), !dbg !4360
  store i32 %call29, i32* %res, align 4, !dbg !4361, !tbaa !2676
  %len30 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vbytes, i32 0, i32 2, !dbg !4362
  %49 = load i64, i64* %len30, align 8, !dbg !4362, !tbaa !2482
  %cmp31 = icmp ne i64 %49, -1, !dbg !4364
  br i1 %cmp31, label %if.then.32, label %if.end.33, !dbg !4365

if.then.32:                                       ; preds = %if.end.28
  call void @PyBuffer_Release(%struct.bufferinfo* %vbytes), !dbg !4366
  br label %if.end.33, !dbg !4366

if.end.33:                                        ; preds = %if.then.32, %if.end.28
  %50 = load i32, i32* %res, align 4, !dbg !4367, !tbaa !2676
  store i32 %50, i32* %retval, !dbg !4368
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.34, !dbg !4368

cleanup.34:                                       ; preds = %if.end.33, %if.then.13, %cleanup
  %51 = bitcast i32* %res to i8*, !dbg !4369
  call void @llvm.lifetime.end(i64 4, i8* %51) #3, !dbg !4369
  %52 = bitcast %struct.bufferinfo* %vbytes to i8*, !dbg !4369
  call void @llvm.lifetime.end(i64 80, i8* %52) #3, !dbg !4369
  %53 = bitcast i8** %bytes to i8*, !dbg !4369
  call void @llvm.lifetime.end(i64 8, i8* %53) #3, !dbg !4369
  %54 = bitcast i64* %needed to i8*, !dbg !4369
  call void @llvm.lifetime.end(i64 8, i8* %54) #3, !dbg !4369
  %55 = load i32, i32* %retval, !dbg !4369
  ret i32 %55, !dbg !4369
}

; Function Attrs: nounwind uwtable
define internal i32 @_getbytevalue(%struct._object* %arg, i32* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %arg.addr = alloca %struct._object*, align 8
  %value.addr = alloca i32*, align 8
  %face_value = alloca i64, align 8
  %index = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !616, metadata !2123), !dbg !4370
  store i32* %value, i32** %value.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i32** %value.addr, metadata !617, metadata !2123), !dbg !4371
  %0 = bitcast i64* %face_value to i8*, !dbg !4372
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !4372
  call void @llvm.dbg.declare(metadata i64* %face_value, metadata !618, metadata !2123), !dbg !4373
  %1 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !4374, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !4375
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4375, !tbaa !2203
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 19, !dbg !4376
  %3 = load i64, i64* %tp_flags, align 8, !dbg !4376, !tbaa !3199
  %and = and i64 %3, 16777216, !dbg !4377
  %cmp = icmp ne i64 %and, 0, !dbg !4378
  br i1 %cmp, label %if.then, label %if.else, !dbg !4379

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !4380, !tbaa !2119
  %call = call i64 @PyLong_AsLong(%struct._object* %4), !dbg !4382
  store i64 %call, i64* %face_value, align 8, !dbg !4383, !tbaa !2129
  br label %if.end.11, !dbg !4384

if.else:                                          ; preds = %entry
  %5 = bitcast %struct._object** %index to i8*, !dbg !4385
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !4385
  call void @llvm.dbg.declare(metadata %struct._object** %index, metadata !619, metadata !2123), !dbg !4386
  %6 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !4387, !tbaa !2119
  %call1 = call %struct._object* @PyNumber_Index(%struct._object* %6), !dbg !4388
  store %struct._object* %call1, %struct._object** %index, align 8, !dbg !4386, !tbaa !2119
  %7 = load %struct._object*, %struct._object** %index, align 8, !dbg !4389, !tbaa !2119
  %cmp2 = icmp eq %struct._object* %7, null, !dbg !4391
  br i1 %cmp2, label %if.then.3, label %if.end, !dbg !4392

if.then.3:                                        ; preds = %if.else
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !4393, !tbaa !2119
  %call4 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %8, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i32 0, i32 0)), !dbg !4395
  %9 = load i32*, i32** %value.addr, align 8, !dbg !4396, !tbaa !2119
  store i32 -1, i32* %9, align 4, !dbg !4397, !tbaa !2676
  store i32 0, i32* %retval, !dbg !4398
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4398

if.end:                                           ; preds = %if.else
  %10 = load %struct._object*, %struct._object** %index, align 8, !dbg !4399, !tbaa !2119
  %call5 = call i64 @PyLong_AsLong(%struct._object* %10), !dbg !4400
  store i64 %call5, i64* %face_value, align 8, !dbg !4401, !tbaa !2129
  br label %do.body, !dbg !4402

do.body:                                          ; preds = %if.end
  %11 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4403
  call void @llvm.lifetime.start(i64 8, i8* %11) #3, !dbg !4403
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !622, metadata !2123), !dbg !4405
  %12 = load %struct._object*, %struct._object** %index, align 8, !dbg !4406, !tbaa !2119
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8, !dbg !4405, !tbaa !2119
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4407, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0, !dbg !4409
  %14 = load i64, i64* %ob_refcnt, align 8, !dbg !4410, !tbaa !2195
  %dec = add i64 %14, -1, !dbg !4410
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4410, !tbaa !2195
  %cmp6 = icmp ne i64 %dec, 0, !dbg !4411
  br i1 %cmp6, label %if.then.7, label %if.else.8, !dbg !4412

if.then.7:                                        ; preds = %do.body
  br label %if.end.10, !dbg !4413

if.else.8:                                        ; preds = %do.body
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4415, !tbaa !2119
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1, !dbg !4417
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8, !dbg !4417, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4, !dbg !4418
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4418, !tbaa !2205
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4419, !tbaa !2119
  call void %17(%struct._object* %18), !dbg !4420
  br label %if.end.10

if.end.10:                                        ; preds = %if.else.8, %if.then.7
  %19 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4421
  call void @llvm.lifetime.end(i64 8, i8* %19) #3, !dbg !4421
  br label %do.cond, !dbg !4423

do.cond:                                          ; preds = %if.end.10
  br label %do.end, !dbg !4424

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %cleanup.dest.slot, !dbg !4426
  br label %cleanup, !dbg !4426

cleanup:                                          ; preds = %do.end, %if.then.3
  %20 = bitcast %struct._object** %index to i8*, !dbg !4427
  call void @llvm.lifetime.end(i64 8, i8* %20) #3, !dbg !4427
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.11

if.end.11:                                        ; preds = %cleanup.cont, %if.then
  %21 = load i64, i64* %face_value, align 8, !dbg !4429, !tbaa !2129
  %cmp12 = icmp slt i64 %21, 0, !dbg !4431
  br i1 %cmp12, label %if.then.14, label %lor.lhs.false, !dbg !4432

lor.lhs.false:                                    ; preds = %if.end.11
  %22 = load i64, i64* %face_value, align 8, !dbg !4433, !tbaa !2129
  %cmp13 = icmp sge i64 %22, 256, !dbg !4435
  br i1 %cmp13, label %if.then.14, label %if.end.15, !dbg !4436

if.then.14:                                       ; preds = %lor.lhs.false, %if.end.11
  %23 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !4437, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %23, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i32 0, i32 0)), !dbg !4439
  %24 = load i32*, i32** %value.addr, align 8, !dbg !4440, !tbaa !2119
  store i32 -1, i32* %24, align 4, !dbg !4441, !tbaa !2676
  store i32 0, i32* %retval, !dbg !4442
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.16, !dbg !4442

if.end.15:                                        ; preds = %lor.lhs.false
  %25 = load i64, i64* %face_value, align 8, !dbg !4443, !tbaa !2129
  %conv = trunc i64 %25 to i32, !dbg !4443
  %26 = load i32*, i32** %value.addr, align 8, !dbg !4444, !tbaa !2119
  store i32 %conv, i32* %26, align 4, !dbg !4445, !tbaa !2676
  store i32 1, i32* %retval, !dbg !4446
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.16, !dbg !4446

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.16

cleanup.16:                                       ; preds = %NewDefault, %if.end.15, %if.then.14
  %27 = bitcast i64* %face_value to i8*, !dbg !4447
  call void @llvm.lifetime.end(i64 8, i8* %27) #3, !dbg !4447
  %28 = load i32, i32* %retval, !dbg !4447
  ret i32 %28, !dbg !4447
}

; Function Attrs: nounwind uwtable
define internal i32 @bytearray_setslice_linear(%struct.PyByteArrayObject* %self, i64 %lo, i64 %hi, i8* %bytes, i64 %bytes_len) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %lo.addr = alloca i64, align 8
  %hi.addr = alloca i64, align 8
  %bytes.addr = alloca i8*, align 8
  %bytes_len.addr = alloca i64, align 8
  %avail = alloca i64, align 8
  %buf = alloca i8*, align 8
  %growth = alloca i64, align 8
  %res = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !602, metadata !2123), !dbg !4448
  store i64 %lo, i64* %lo.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %lo.addr, metadata !603, metadata !2123), !dbg !4449
  store i64 %hi, i64* %hi.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %hi.addr, metadata !604, metadata !2123), !dbg !4450
  store i8* %bytes, i8** %bytes.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %bytes.addr, metadata !605, metadata !2123), !dbg !4451
  store i64 %bytes_len, i64* %bytes_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %bytes_len.addr, metadata !606, metadata !2123), !dbg !4452
  %0 = bitcast i64* %avail to i8*, !dbg !4453
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !4453
  call void @llvm.dbg.declare(metadata i64* %avail, metadata !607, metadata !2123), !dbg !4454
  %1 = load i64, i64* %hi.addr, align 8, !dbg !4455, !tbaa !2129
  %2 = load i64, i64* %lo.addr, align 8, !dbg !4456, !tbaa !2129
  %sub = sub i64 %1, %2, !dbg !4457
  store i64 %sub, i64* %avail, align 8, !dbg !4454, !tbaa !2129
  %3 = bitcast i8** %buf to i8*, !dbg !4458
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !4458
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !608, metadata !2123), !dbg !4459
  %4 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4460, !tbaa !2119
  %5 = bitcast %struct.PyByteArrayObject* %4 to %struct.PyVarObject*, !dbg !4461
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %5, i32 0, i32 1, !dbg !4462
  %6 = load i64, i64* %ob_size, align 8, !dbg !4462, !tbaa !2239
  %tobool = icmp ne i64 %6, 0, !dbg !4463
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4463

cond.true:                                        ; preds = %entry
  %7 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4464, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %7, i32 0, i32 3, !dbg !4466
  %8 = load i8*, i8** %ob_start, align 8, !dbg !4466, !tbaa !2250
  br label %cond.end, !dbg !4463

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4467

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %8, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !4463
  store i8* %cond, i8** %buf, align 8, !dbg !4469, !tbaa !2119
  %9 = bitcast i64* %growth to i8*, !dbg !4472
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !4472
  call void @llvm.dbg.declare(metadata i64* %growth, metadata !609, metadata !2123), !dbg !4473
  %10 = load i64, i64* %bytes_len.addr, align 8, !dbg !4474, !tbaa !2129
  %11 = load i64, i64* %avail, align 8, !dbg !4475, !tbaa !2129
  %sub1 = sub i64 %10, %11, !dbg !4476
  store i64 %sub1, i64* %growth, align 8, !dbg !4473, !tbaa !2129
  %12 = bitcast i32* %res to i8*, !dbg !4477
  call void @llvm.lifetime.start(i64 4, i8* %12) #3, !dbg !4477
  call void @llvm.dbg.declare(metadata i32* %res, metadata !610, metadata !2123), !dbg !4478
  store i32 0, i32* %res, align 4, !dbg !4478, !tbaa !2676
  %13 = load i64, i64* %growth, align 8, !dbg !4479, !tbaa !2129
  %cmp = icmp slt i64 %13, 0, !dbg !4481
  br i1 %cmp, label %if.then, label %if.else.32, !dbg !4482

if.then:                                          ; preds = %cond.end
  %14 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4483, !tbaa !2119
  %call = call i32 @_canresize(%struct.PyByteArrayObject* %14), !dbg !4486
  %tobool2 = icmp ne i32 %call, 0, !dbg !4486
  br i1 %tobool2, label %if.end, label %if.then.3, !dbg !4487

if.then.3:                                        ; preds = %if.then
  store i32 -1, i32* %retval, !dbg !4488
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4488

if.end:                                           ; preds = %if.then
  %15 = load i64, i64* %lo.addr, align 8, !dbg !4489, !tbaa !2129
  %cmp4 = icmp eq i64 %15, 0, !dbg !4491
  br i1 %cmp4, label %if.then.5, label %if.else, !dbg !4492

if.then.5:                                        ; preds = %if.end
  %16 = load i64, i64* %growth, align 8, !dbg !4493, !tbaa !2129
  %17 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4495, !tbaa !2119
  %ob_start6 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %17, i32 0, i32 3, !dbg !4496
  %18 = load i8*, i8** %ob_start6, align 8, !dbg !4497, !tbaa !2250
  %idx.neg = sub i64 0, %16, !dbg !4497
  %add.ptr = getelementptr i8, i8* %18, i64 %idx.neg, !dbg !4497
  store i8* %add.ptr, i8** %ob_start6, align 8, !dbg !4497, !tbaa !2250
  br label %if.end.12, !dbg !4498

if.else:                                          ; preds = %if.end
  %19 = load i8*, i8** %buf, align 8, !dbg !4499, !tbaa !2119
  %20 = load i64, i64* %lo.addr, align 8, !dbg !4501, !tbaa !2129
  %add.ptr7 = getelementptr i8, i8* %19, i64 %20, !dbg !4502
  %21 = load i64, i64* %bytes_len.addr, align 8, !dbg !4503, !tbaa !2129
  %add.ptr8 = getelementptr i8, i8* %add.ptr7, i64 %21, !dbg !4504
  %22 = load i8*, i8** %buf, align 8, !dbg !4505, !tbaa !2119
  %23 = load i64, i64* %hi.addr, align 8, !dbg !4506, !tbaa !2129
  %add.ptr9 = getelementptr i8, i8* %22, i64 %23, !dbg !4507
  %24 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4508, !tbaa !2119
  %25 = bitcast %struct.PyByteArrayObject* %24 to %struct.PyVarObject*, !dbg !4509
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %25, i32 0, i32 1, !dbg !4510
  %26 = load i64, i64* %ob_size10, align 8, !dbg !4510, !tbaa !2239
  %27 = load i64, i64* %hi.addr, align 8, !dbg !4511, !tbaa !2129
  %sub11 = sub i64 %26, %27, !dbg !4512
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr8, i8* %add.ptr9, i64 %sub11, i32 1, i1 false), !dbg !4513
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.5
  %28 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4514, !tbaa !2119
  %29 = bitcast %struct.PyByteArrayObject* %28 to %struct._object*, !dbg !4516
  %30 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4517, !tbaa !2119
  %31 = bitcast %struct.PyByteArrayObject* %30 to %struct.PyVarObject*, !dbg !4518
  %ob_size13 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %31, i32 0, i32 1, !dbg !4519
  %32 = load i64, i64* %ob_size13, align 8, !dbg !4519, !tbaa !2239
  %33 = load i64, i64* %growth, align 8, !dbg !4520, !tbaa !2129
  %add = add i64 %32, %33, !dbg !4521
  %call14 = call i32 @PyByteArray_Resize(%struct._object* %29, i64 %add), !dbg !4522
  %cmp15 = icmp slt i32 %call14, 0, !dbg !4523
  br i1 %cmp15, label %if.then.16, label %if.end.24, !dbg !4524

if.then.16:                                       ; preds = %if.end.12
  %34 = load i64, i64* %lo.addr, align 8, !dbg !4525, !tbaa !2129
  %cmp17 = icmp eq i64 %34, 0, !dbg !4528
  br i1 %cmp17, label %if.then.18, label %if.end.21, !dbg !4529

if.then.18:                                       ; preds = %if.then.16
  %35 = load i64, i64* %growth, align 8, !dbg !4530, !tbaa !2129
  %36 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4532, !tbaa !2119
  %ob_start19 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %36, i32 0, i32 3, !dbg !4533
  %37 = load i8*, i8** %ob_start19, align 8, !dbg !4534, !tbaa !2250
  %add.ptr20 = getelementptr i8, i8* %37, i64 %35, !dbg !4534
  store i8* %add.ptr20, i8** %ob_start19, align 8, !dbg !4534, !tbaa !2250
  store i32 -1, i32* %retval, !dbg !4535
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4535

if.end.21:                                        ; preds = %if.then.16
  %38 = load i64, i64* %growth, align 8, !dbg !4536, !tbaa !2129
  %39 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4537, !tbaa !2119
  %40 = bitcast %struct.PyByteArrayObject* %39 to %struct.PyVarObject*, !dbg !4538
  %ob_size22 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %40, i32 0, i32 1, !dbg !4539
  %41 = load i64, i64* %ob_size22, align 8, !dbg !4540, !tbaa !2239
  %add23 = add i64 %41, %38, !dbg !4540
  store i64 %add23, i64* %ob_size22, align 8, !dbg !4540, !tbaa !2239
  store i32 -1, i32* %res, align 4, !dbg !4541, !tbaa !2676
  br label %if.end.24, !dbg !4542

if.end.24:                                        ; preds = %if.end.21, %if.end.12
  %42 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4543, !tbaa !2119
  %43 = bitcast %struct.PyByteArrayObject* %42 to %struct.PyVarObject*, !dbg !4544
  %ob_size25 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %43, i32 0, i32 1, !dbg !4545
  %44 = load i64, i64* %ob_size25, align 8, !dbg !4545, !tbaa !2239
  %tobool26 = icmp ne i64 %44, 0, !dbg !4546
  br i1 %tobool26, label %cond.true.27, label %cond.false.29, !dbg !4546

cond.true.27:                                     ; preds = %if.end.24
  %45 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4547, !tbaa !2119
  %ob_start28 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %45, i32 0, i32 3, !dbg !4549
  %46 = load i8*, i8** %ob_start28, align 8, !dbg !4549, !tbaa !2250
  br label %cond.end.30, !dbg !4546

cond.false.29:                                    ; preds = %if.end.24
  br label %cond.end.30, !dbg !4550

cond.end.30:                                      ; preds = %cond.false.29, %cond.true.27
  %cond31 = phi i8* [ %46, %cond.true.27 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.29 ], !dbg !4546
  store i8* %cond31, i8** %buf, align 8, !dbg !4552, !tbaa !2119
  br label %if.end.61, !dbg !4555

if.else.32:                                       ; preds = %cond.end
  %47 = load i64, i64* %growth, align 8, !dbg !4556, !tbaa !2129
  %cmp33 = icmp sgt i64 %47, 0, !dbg !4558
  br i1 %cmp33, label %if.then.34, label %if.end.60, !dbg !4559

if.then.34:                                       ; preds = %if.else.32
  %48 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4560, !tbaa !2119
  %49 = bitcast %struct.PyByteArrayObject* %48 to %struct.PyVarObject*, !dbg !4563
  %ob_size35 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %49, i32 0, i32 1, !dbg !4564
  %50 = load i64, i64* %ob_size35, align 8, !dbg !4564, !tbaa !2239
  %51 = load i64, i64* %growth, align 8, !dbg !4565, !tbaa !2129
  %sub36 = sub i64 9223372036854775807, %51, !dbg !4566
  %cmp37 = icmp sgt i64 %50, %sub36, !dbg !4567
  br i1 %cmp37, label %if.then.38, label %if.end.40, !dbg !4568

if.then.38:                                       ; preds = %if.then.34
  %call39 = call %struct._object* @PyErr_NoMemory(), !dbg !4569
  store i32 -1, i32* %retval, !dbg !4571
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4571

if.end.40:                                        ; preds = %if.then.34
  %52 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4572, !tbaa !2119
  %53 = bitcast %struct.PyByteArrayObject* %52 to %struct._object*, !dbg !4574
  %54 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4575, !tbaa !2119
  %55 = bitcast %struct.PyByteArrayObject* %54 to %struct.PyVarObject*, !dbg !4576
  %ob_size41 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %55, i32 0, i32 1, !dbg !4577
  %56 = load i64, i64* %ob_size41, align 8, !dbg !4577, !tbaa !2239
  %57 = load i64, i64* %growth, align 8, !dbg !4578, !tbaa !2129
  %add42 = add i64 %56, %57, !dbg !4579
  %call43 = call i32 @PyByteArray_Resize(%struct._object* %53, i64 %add42), !dbg !4580
  %cmp44 = icmp slt i32 %call43, 0, !dbg !4581
  br i1 %cmp44, label %if.then.45, label %if.end.46, !dbg !4582

if.then.45:                                       ; preds = %if.end.40
  store i32 -1, i32* %retval, !dbg !4583
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4583

if.end.46:                                        ; preds = %if.end.40
  %58 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4585, !tbaa !2119
  %59 = bitcast %struct.PyByteArrayObject* %58 to %struct.PyVarObject*, !dbg !4586
  %ob_size47 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %59, i32 0, i32 1, !dbg !4587
  %60 = load i64, i64* %ob_size47, align 8, !dbg !4587, !tbaa !2239
  %tobool48 = icmp ne i64 %60, 0, !dbg !4588
  br i1 %tobool48, label %cond.true.49, label %cond.false.51, !dbg !4588

cond.true.49:                                     ; preds = %if.end.46
  %61 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4589, !tbaa !2119
  %ob_start50 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %61, i32 0, i32 3, !dbg !4591
  %62 = load i8*, i8** %ob_start50, align 8, !dbg !4591, !tbaa !2250
  br label %cond.end.52, !dbg !4588

cond.false.51:                                    ; preds = %if.end.46
  br label %cond.end.52, !dbg !4592

cond.end.52:                                      ; preds = %cond.false.51, %cond.true.49
  %cond53 = phi i8* [ %62, %cond.true.49 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.51 ], !dbg !4588
  store i8* %cond53, i8** %buf, align 8, !dbg !4594, !tbaa !2119
  %63 = load i8*, i8** %buf, align 8, !dbg !4597, !tbaa !2119
  %64 = load i64, i64* %lo.addr, align 8, !dbg !4598, !tbaa !2129
  %add.ptr54 = getelementptr i8, i8* %63, i64 %64, !dbg !4599
  %65 = load i64, i64* %bytes_len.addr, align 8, !dbg !4600, !tbaa !2129
  %add.ptr55 = getelementptr i8, i8* %add.ptr54, i64 %65, !dbg !4601
  %66 = load i8*, i8** %buf, align 8, !dbg !4602, !tbaa !2119
  %67 = load i64, i64* %hi.addr, align 8, !dbg !4603, !tbaa !2129
  %add.ptr56 = getelementptr i8, i8* %66, i64 %67, !dbg !4604
  %68 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !4605, !tbaa !2119
  %69 = bitcast %struct.PyByteArrayObject* %68 to %struct.PyVarObject*, !dbg !4606
  %ob_size57 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %69, i32 0, i32 1, !dbg !4607
  %70 = load i64, i64* %ob_size57, align 8, !dbg !4607, !tbaa !2239
  %71 = load i64, i64* %lo.addr, align 8, !dbg !4608, !tbaa !2129
  %sub58 = sub i64 %70, %71, !dbg !4609
  %72 = load i64, i64* %bytes_len.addr, align 8, !dbg !4610, !tbaa !2129
  %sub59 = sub i64 %sub58, %72, !dbg !4611
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr55, i8* %add.ptr56, i64 %sub59, i32 1, i1 false), !dbg !4612
  br label %if.end.60, !dbg !4613

if.end.60:                                        ; preds = %cond.end.52, %if.else.32
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %cond.end.30
  %73 = load i64, i64* %bytes_len.addr, align 8, !dbg !4614, !tbaa !2129
  %cmp62 = icmp sgt i64 %73, 0, !dbg !4616
  br i1 %cmp62, label %if.then.63, label %if.end.65, !dbg !4617

if.then.63:                                       ; preds = %if.end.61
  %74 = load i8*, i8** %buf, align 8, !dbg !4618, !tbaa !2119
  %75 = load i64, i64* %lo.addr, align 8, !dbg !4619, !tbaa !2129
  %add.ptr64 = getelementptr i8, i8* %74, i64 %75, !dbg !4620
  %76 = load i8*, i8** %bytes.addr, align 8, !dbg !4621, !tbaa !2119
  %77 = load i64, i64* %bytes_len.addr, align 8, !dbg !4622, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr64, i8* %76, i64 %77, i32 1, i1 false), !dbg !4623
  br label %if.end.65, !dbg !4623

if.end.65:                                        ; preds = %if.then.63, %if.end.61
  %78 = load i32, i32* %res, align 4, !dbg !4624, !tbaa !2676
  store i32 %78, i32* %retval, !dbg !4625
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4625

cleanup:                                          ; preds = %if.end.65, %if.then.45, %if.then.38, %if.then.18, %if.then.3
  %79 = bitcast i32* %res to i8*, !dbg !4626
  call void @llvm.lifetime.end(i64 4, i8* %79) #3, !dbg !4626
  %80 = bitcast i64* %growth to i8*, !dbg !4626
  call void @llvm.lifetime.end(i64 8, i8* %80) #3, !dbg !4626
  %81 = bitcast i8** %buf to i8*, !dbg !4626
  call void @llvm.lifetime.end(i64 8, i8* %81) #3, !dbg !4626
  %82 = bitcast i64* %avail to i8*, !dbg !4626
  call void @llvm.lifetime.end(i64 8, i8* %82) #3, !dbg !4626
  %83 = load i32, i32* %retval, !dbg !4626
  ret i32 %83, !dbg !4626
}

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #3

declare i64 @PyLong_AsLong(%struct._object*) #2

declare %struct._object* @PyNumber_Index(%struct._object*) #2

declare i64 @PyNumber_AsSsize_t(%struct._object*, %struct._object*) #2

declare %struct._object* @PyErr_Occurred() #2

declare void @PyErr_Clear() #2

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @stringlib_find(i8* %str, i64 %str_len, i8* %sub, i64 %sub_len, i64 %offset) #4 {
entry:
  %retval = alloca i64, align 8
  %str.addr = alloca i8*, align 8
  %str_len.addr = alloca i64, align 8
  %sub.addr = alloca i8*, align 8
  %sub_len.addr = alloca i64, align 8
  %offset.addr = alloca i64, align 8
  %pos = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i8* %str, i8** %str.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !638, metadata !2123), !dbg !4627
  store i64 %str_len, i64* %str_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %str_len.addr, metadata !639, metadata !2123), !dbg !4628
  store i8* %sub, i8** %sub.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %sub.addr, metadata !640, metadata !2123), !dbg !4629
  store i64 %sub_len, i64* %sub_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %sub_len.addr, metadata !641, metadata !2123), !dbg !4630
  store i64 %offset, i64* %offset.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !642, metadata !2123), !dbg !4631
  %0 = bitcast i64* %pos to i8*, !dbg !4632
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !4632
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !643, metadata !2123), !dbg !4633
  %1 = load i64, i64* %str_len.addr, align 8, !dbg !4634, !tbaa !2129
  %cmp = icmp slt i64 %1, 0, !dbg !4636
  br i1 %cmp, label %if.then, label %if.end, !dbg !4637

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval, !dbg !4638
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4638

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %sub_len.addr, align 8, !dbg !4639, !tbaa !2129
  %cmp1 = icmp eq i64 %2, 0, !dbg !4641
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !4642

if.then.2:                                        ; preds = %if.end
  %3 = load i64, i64* %offset.addr, align 8, !dbg !4643, !tbaa !2129
  store i64 %3, i64* %retval, !dbg !4644
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4644

if.end.3:                                         ; preds = %if.end
  %4 = load i8*, i8** %str.addr, align 8, !dbg !4645, !tbaa !2119
  %5 = load i64, i64* %str_len.addr, align 8, !dbg !4646, !tbaa !2129
  %6 = load i8*, i8** %sub.addr, align 8, !dbg !4647, !tbaa !2119
  %7 = load i64, i64* %sub_len.addr, align 8, !dbg !4648, !tbaa !2129
  %call = call i64 @fastsearch(i8* %4, i64 %5, i8* %6, i64 %7, i64 -1, i32 1), !dbg !4649
  store i64 %call, i64* %pos, align 8, !dbg !4650, !tbaa !2129
  %8 = load i64, i64* %pos, align 8, !dbg !4651, !tbaa !2129
  %cmp4 = icmp sge i64 %8, 0, !dbg !4653
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !4654

if.then.5:                                        ; preds = %if.end.3
  %9 = load i64, i64* %offset.addr, align 8, !dbg !4655, !tbaa !2129
  %10 = load i64, i64* %pos, align 8, !dbg !4656, !tbaa !2129
  %add = add i64 %10, %9, !dbg !4656
  store i64 %add, i64* %pos, align 8, !dbg !4656, !tbaa !2129
  br label %if.end.6, !dbg !4657

if.end.6:                                         ; preds = %if.then.5, %if.end.3
  %11 = load i64, i64* %pos, align 8, !dbg !4658, !tbaa !2129
  store i64 %11, i64* %retval, !dbg !4659
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4659

cleanup:                                          ; preds = %if.end.6, %if.then.2, %if.then
  %12 = bitcast i64* %pos to i8*, !dbg !4660
  call void @llvm.lifetime.end(i64 8, i8* %12) #3, !dbg !4660
  %13 = load i64, i64* %retval, !dbg !4660
  ret i64 %13, !dbg !4660
}

; Function Attrs: nounwind readonly
declare i8* @memchr(i8*, i32, i64) #5

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @fastsearch(i8* %s, i64 %n, i8* %p, i64 %m, i64 %maxcount, i32 %mode) #4 {
entry:
  %retval = alloca i64, align 8
  %s.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %p.addr = alloca i8*, align 8
  %m.addr = alloca i64, align 8
  %maxcount.addr = alloca i64, align 8
  %mode.addr = alloca i32, align 4
  %mask = alloca i64, align 8
  %skip = alloca i64, align 8
  %count = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %mlast = alloca i64, align 8
  %w = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %needle = alloca i8, align 1
  %ss = alloca i8*, align 8
  %pp = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !649, metadata !2123), !dbg !4661
  store i64 %n, i64* %n.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !650, metadata !2123), !dbg !4662
  store i8* %p, i8** %p.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !651, metadata !2123), !dbg !4663
  store i64 %m, i64* %m.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %m.addr, metadata !652, metadata !2123), !dbg !4664
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !653, metadata !2123), !dbg !4665
  store i32 %mode, i32* %mode.addr, align 4, !tbaa !2676
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !654, metadata !2123), !dbg !4666
  %0 = bitcast i64* %mask to i8*, !dbg !4667
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !4667
  call void @llvm.dbg.declare(metadata i64* %mask, metadata !655, metadata !2123), !dbg !4668
  %1 = bitcast i64* %skip to i8*, !dbg !4669
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !4669
  call void @llvm.dbg.declare(metadata i64* %skip, metadata !656, metadata !2123), !dbg !4670
  %2 = bitcast i64* %count to i8*, !dbg !4669
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !4669
  call void @llvm.dbg.declare(metadata i64* %count, metadata !657, metadata !2123), !dbg !4671
  store i64 0, i64* %count, align 8, !dbg !4671, !tbaa !2129
  %3 = bitcast i64* %i to i8*, !dbg !4672
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !4672
  call void @llvm.dbg.declare(metadata i64* %i, metadata !658, metadata !2123), !dbg !4673
  %4 = bitcast i64* %j to i8*, !dbg !4672
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !4672
  call void @llvm.dbg.declare(metadata i64* %j, metadata !659, metadata !2123), !dbg !4674
  %5 = bitcast i64* %mlast to i8*, !dbg !4672
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !4672
  call void @llvm.dbg.declare(metadata i64* %mlast, metadata !660, metadata !2123), !dbg !4675
  %6 = bitcast i64* %w to i8*, !dbg !4672
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !4672
  call void @llvm.dbg.declare(metadata i64* %w, metadata !661, metadata !2123), !dbg !4676
  %7 = load i64, i64* %n.addr, align 8, !dbg !4677, !tbaa !2129
  %8 = load i64, i64* %m.addr, align 8, !dbg !4678, !tbaa !2129
  %sub = sub i64 %7, %8, !dbg !4679
  store i64 %sub, i64* %w, align 8, !dbg !4680, !tbaa !2129
  %9 = load i64, i64* %w, align 8, !dbg !4681, !tbaa !2129
  %cmp = icmp slt i64 %9, 0, !dbg !4683
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4684

lor.lhs.false:                                    ; preds = %entry
  %10 = load i32, i32* %mode.addr, align 4, !dbg !4685, !tbaa !2676
  %cmp1 = icmp eq i32 %10, 0, !dbg !4687
  br i1 %cmp1, label %land.lhs.true, label %if.end, !dbg !4688

land.lhs.true:                                    ; preds = %lor.lhs.false
  %11 = load i64, i64* %maxcount.addr, align 8, !dbg !4689, !tbaa !2129
  %cmp2 = icmp eq i64 %11, 0, !dbg !4691
  br i1 %cmp2, label %if.then, label %if.end, !dbg !4692

if.then:                                          ; preds = %land.lhs.true, %entry
  store i64 -1, i64* %retval, !dbg !4693
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.275, !dbg !4693

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %12 = load i64, i64* %m.addr, align 8, !dbg !4694, !tbaa !2129
  %cmp3 = icmp sle i64 %12, 1, !dbg !4695
  br i1 %cmp3, label %if.then.4, label %if.end.71, !dbg !4696

if.then.4:                                        ; preds = %if.end
  %13 = load i64, i64* %m.addr, align 8, !dbg !4697, !tbaa !2129
  %cmp5 = icmp sle i64 %13, 0, !dbg !4699
  br i1 %cmp5, label %if.then.6, label %if.end.7, !dbg !4700

if.then.6:                                        ; preds = %if.then.4
  store i64 -1, i64* %retval, !dbg !4701
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.275, !dbg !4701

if.end.7:                                         ; preds = %if.then.4
  %14 = load i64, i64* %n.addr, align 8, !dbg !4702, !tbaa !2129
  %cmp8 = icmp sgt i64 %14, 10, !dbg !4703
  br i1 %cmp8, label %land.lhs.true.9, label %if.end.16, !dbg !4704

land.lhs.true.9:                                  ; preds = %if.end.7
  %15 = load i32, i32* %mode.addr, align 4, !dbg !4705, !tbaa !2676
  %cmp10 = icmp eq i32 %15, 1, !dbg !4707
  br i1 %cmp10, label %if.then.13, label %lor.lhs.false.11, !dbg !4708

lor.lhs.false.11:                                 ; preds = %land.lhs.true.9
  %16 = load i32, i32* %mode.addr, align 4, !dbg !4709, !tbaa !2676
  %cmp12 = icmp eq i32 %16, 2, !dbg !4710
  br i1 %cmp12, label %if.then.13, label %if.end.16, !dbg !4711

if.then.13:                                       ; preds = %lor.lhs.false.11, %land.lhs.true.9
  call void @llvm.lifetime.start(i64 1, i8* %needle) #3, !dbg !4712
  call void @llvm.dbg.declare(metadata i8* %needle, metadata !662, metadata !2123), !dbg !4713
  %17 = load i8*, i8** %p.addr, align 8, !dbg !4714, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %17, i64 0, !dbg !4714
  %18 = load i8, i8* %arrayidx, align 1, !dbg !4714, !tbaa !2233
  %conv = sext i8 %18 to i32, !dbg !4714
  %and = and i32 %conv, 255, !dbg !4715
  %conv14 = trunc i32 %and to i8, !dbg !4714
  store i8 %conv14, i8* %needle, align 1, !dbg !4716, !tbaa !2233
  %19 = load i8*, i8** %s.addr, align 8, !dbg !4717, !tbaa !2119
  %20 = load i64, i64* %n.addr, align 8, !dbg !4718, !tbaa !2129
  %21 = load i8*, i8** %p.addr, align 8, !dbg !4719, !tbaa !2119
  %arrayidx15 = getelementptr i8, i8* %21, i64 0, !dbg !4719
  %22 = load i8, i8* %arrayidx15, align 1, !dbg !4719, !tbaa !2233
  %23 = load i8, i8* %needle, align 1, !dbg !4720, !tbaa !2233
  %24 = load i64, i64* %maxcount.addr, align 8, !dbg !4721, !tbaa !2129
  %25 = load i32, i32* %mode.addr, align 4, !dbg !4722, !tbaa !2676
  %call = call i64 @stringlib_fastsearch_memchr_1char(i8* %19, i64 %20, i8 signext %22, i8 zeroext %23, i64 %24, i32 %25), !dbg !4723
  store i64 %call, i64* %retval, !dbg !4724
  store i32 1, i32* %cleanup.dest.slot
  call void @llvm.lifetime.end(i64 1, i8* %needle) #3, !dbg !4725
  br label %cleanup.275

if.end.16:                                        ; preds = %lor.lhs.false.11, %if.end.7
  %26 = load i32, i32* %mode.addr, align 4, !dbg !4726, !tbaa !2676
  %cmp17 = icmp eq i32 %26, 0, !dbg !4728
  br i1 %cmp17, label %if.then.19, label %if.else, !dbg !4729

if.then.19:                                       ; preds = %if.end.16
  store i64 0, i64* %i, align 8, !dbg !4730, !tbaa !2129
  br label %for.cond, !dbg !4733

for.cond:                                         ; preds = %for.inc, %if.then.19
  %27 = load i64, i64* %i, align 8, !dbg !4734, !tbaa !2129
  %28 = load i64, i64* %n.addr, align 8, !dbg !4738, !tbaa !2129
  %cmp20 = icmp slt i64 %27, %28, !dbg !4739
  br i1 %cmp20, label %for.body, label %for.end, !dbg !4740

for.body:                                         ; preds = %for.cond
  %29 = load i64, i64* %i, align 8, !dbg !4741, !tbaa !2129
  %30 = load i8*, i8** %s.addr, align 8, !dbg !4743, !tbaa !2119
  %arrayidx22 = getelementptr i8, i8* %30, i64 %29, !dbg !4743
  %31 = load i8, i8* %arrayidx22, align 1, !dbg !4743, !tbaa !2233
  %conv23 = sext i8 %31 to i32, !dbg !4743
  %32 = load i8*, i8** %p.addr, align 8, !dbg !4744, !tbaa !2119
  %arrayidx24 = getelementptr i8, i8* %32, i64 0, !dbg !4744
  %33 = load i8, i8* %arrayidx24, align 1, !dbg !4744, !tbaa !2233
  %conv25 = sext i8 %33 to i32, !dbg !4744
  %cmp26 = icmp eq i32 %conv23, %conv25, !dbg !4745
  br i1 %cmp26, label %if.then.28, label %if.end.33, !dbg !4746

if.then.28:                                       ; preds = %for.body
  %34 = load i64, i64* %count, align 8, !dbg !4747, !tbaa !2129
  %inc = add i64 %34, 1, !dbg !4747
  store i64 %inc, i64* %count, align 8, !dbg !4747, !tbaa !2129
  %35 = load i64, i64* %count, align 8, !dbg !4749, !tbaa !2129
  %36 = load i64, i64* %maxcount.addr, align 8, !dbg !4751, !tbaa !2129
  %cmp29 = icmp eq i64 %35, %36, !dbg !4752
  br i1 %cmp29, label %if.then.31, label %if.end.32, !dbg !4753

if.then.31:                                       ; preds = %if.then.28
  %37 = load i64, i64* %maxcount.addr, align 8, !dbg !4754, !tbaa !2129
  store i64 %37, i64* %retval, !dbg !4755
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.275, !dbg !4755

if.end.32:                                        ; preds = %if.then.28
  br label %if.end.33, !dbg !4756

if.end.33:                                        ; preds = %if.end.32, %for.body
  br label %for.inc, !dbg !4757

for.inc:                                          ; preds = %if.end.33
  %38 = load i64, i64* %i, align 8, !dbg !4759, !tbaa !2129
  %inc34 = add i64 %38, 1, !dbg !4759
  store i64 %inc34, i64* %i, align 8, !dbg !4759, !tbaa !2129
  br label %for.cond, !dbg !4760

for.end:                                          ; preds = %for.cond
  %39 = load i64, i64* %count, align 8, !dbg !4761, !tbaa !2129
  store i64 %39, i64* %retval, !dbg !4762
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.275, !dbg !4762

if.else:                                          ; preds = %if.end.16
  %40 = load i32, i32* %mode.addr, align 4, !dbg !4763, !tbaa !2676
  %cmp35 = icmp eq i32 %40, 1, !dbg !4765
  br i1 %cmp35, label %if.then.37, label %if.else.53, !dbg !4766

if.then.37:                                       ; preds = %if.else
  store i64 0, i64* %i, align 8, !dbg !4767, !tbaa !2129
  br label %for.cond.38, !dbg !4770

for.cond.38:                                      ; preds = %for.inc.50, %if.then.37
  %41 = load i64, i64* %i, align 8, !dbg !4771, !tbaa !2129
  %42 = load i64, i64* %n.addr, align 8, !dbg !4775, !tbaa !2129
  %cmp39 = icmp slt i64 %41, %42, !dbg !4776
  br i1 %cmp39, label %for.body.41, label %for.end.52, !dbg !4777

for.body.41:                                      ; preds = %for.cond.38
  %43 = load i64, i64* %i, align 8, !dbg !4778, !tbaa !2129
  %44 = load i8*, i8** %s.addr, align 8, !dbg !4780, !tbaa !2119
  %arrayidx42 = getelementptr i8, i8* %44, i64 %43, !dbg !4780
  %45 = load i8, i8* %arrayidx42, align 1, !dbg !4780, !tbaa !2233
  %conv43 = sext i8 %45 to i32, !dbg !4780
  %46 = load i8*, i8** %p.addr, align 8, !dbg !4781, !tbaa !2119
  %arrayidx44 = getelementptr i8, i8* %46, i64 0, !dbg !4781
  %47 = load i8, i8* %arrayidx44, align 1, !dbg !4781, !tbaa !2233
  %conv45 = sext i8 %47 to i32, !dbg !4781
  %cmp46 = icmp eq i32 %conv43, %conv45, !dbg !4782
  br i1 %cmp46, label %if.then.48, label %if.end.49, !dbg !4783

if.then.48:                                       ; preds = %for.body.41
  %48 = load i64, i64* %i, align 8, !dbg !4784, !tbaa !2129
  store i64 %48, i64* %retval, !dbg !4785
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.275, !dbg !4785

if.end.49:                                        ; preds = %for.body.41
  br label %for.inc.50, !dbg !4786

for.inc.50:                                       ; preds = %if.end.49
  %49 = load i64, i64* %i, align 8, !dbg !4788, !tbaa !2129
  %inc51 = add i64 %49, 1, !dbg !4788
  store i64 %inc51, i64* %i, align 8, !dbg !4788, !tbaa !2129
  br label %for.cond.38, !dbg !4789

for.end.52:                                       ; preds = %for.cond.38
  br label %if.end.69, !dbg !4790

if.else.53:                                       ; preds = %if.else
  %50 = load i64, i64* %n.addr, align 8, !dbg !4791, !tbaa !2129
  %sub54 = sub i64 %50, 1, !dbg !4794
  store i64 %sub54, i64* %i, align 8, !dbg !4795, !tbaa !2129
  br label %for.cond.55, !dbg !4796

for.cond.55:                                      ; preds = %for.inc.67, %if.else.53
  %51 = load i64, i64* %i, align 8, !dbg !4797, !tbaa !2129
  %cmp56 = icmp sgt i64 %51, -1, !dbg !4801
  br i1 %cmp56, label %for.body.58, label %for.end.68, !dbg !4802

for.body.58:                                      ; preds = %for.cond.55
  %52 = load i64, i64* %i, align 8, !dbg !4803, !tbaa !2129
  %53 = load i8*, i8** %s.addr, align 8, !dbg !4805, !tbaa !2119
  %arrayidx59 = getelementptr i8, i8* %53, i64 %52, !dbg !4805
  %54 = load i8, i8* %arrayidx59, align 1, !dbg !4805, !tbaa !2233
  %conv60 = sext i8 %54 to i32, !dbg !4805
  %55 = load i8*, i8** %p.addr, align 8, !dbg !4806, !tbaa !2119
  %arrayidx61 = getelementptr i8, i8* %55, i64 0, !dbg !4806
  %56 = load i8, i8* %arrayidx61, align 1, !dbg !4806, !tbaa !2233
  %conv62 = sext i8 %56 to i32, !dbg !4806
  %cmp63 = icmp eq i32 %conv60, %conv62, !dbg !4807
  br i1 %cmp63, label %if.then.65, label %if.end.66, !dbg !4808

if.then.65:                                       ; preds = %for.body.58
  %57 = load i64, i64* %i, align 8, !dbg !4809, !tbaa !2129
  store i64 %57, i64* %retval, !dbg !4810
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.275, !dbg !4810

if.end.66:                                        ; preds = %for.body.58
  br label %for.inc.67, !dbg !4811

for.inc.67:                                       ; preds = %if.end.66
  %58 = load i64, i64* %i, align 8, !dbg !4813, !tbaa !2129
  %dec = add i64 %58, -1, !dbg !4813
  store i64 %dec, i64* %i, align 8, !dbg !4813, !tbaa !2129
  br label %for.cond.55, !dbg !4814

for.end.68:                                       ; preds = %for.cond.55
  br label %if.end.69

if.end.69:                                        ; preds = %for.end.68, %for.end.52
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69
  store i64 -1, i64* %retval, !dbg !4815
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.275, !dbg !4815

if.end.71:                                        ; preds = %if.end
  %59 = load i64, i64* %m.addr, align 8, !dbg !4816, !tbaa !2129
  %sub72 = sub i64 %59, 1, !dbg !4817
  store i64 %sub72, i64* %mlast, align 8, !dbg !4818, !tbaa !2129
  %60 = load i64, i64* %mlast, align 8, !dbg !4819, !tbaa !2129
  %sub73 = sub i64 %60, 1, !dbg !4820
  store i64 %sub73, i64* %skip, align 8, !dbg !4821, !tbaa !2129
  store i64 0, i64* %mask, align 8, !dbg !4822, !tbaa !2129
  %61 = load i32, i32* %mode.addr, align 4, !dbg !4823, !tbaa !2676
  %cmp74 = icmp ne i32 %61, 2, !dbg !4824
  br i1 %cmp74, label %if.then.76, label %if.else.175, !dbg !4825

if.then.76:                                       ; preds = %if.end.71
  %62 = bitcast i8** %ss to i8*, !dbg !4826
  call void @llvm.lifetime.start(i64 8, i8* %62) #3, !dbg !4826
  call void @llvm.dbg.declare(metadata i8** %ss, metadata !667, metadata !2123), !dbg !4827
  %63 = load i8*, i8** %s.addr, align 8, !dbg !4828, !tbaa !2119
  %64 = load i64, i64* %m.addr, align 8, !dbg !4829, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %63, i64 %64, !dbg !4830
  %add.ptr77 = getelementptr i8, i8* %add.ptr, i64 -1, !dbg !4831
  store i8* %add.ptr77, i8** %ss, align 8, !dbg !4827, !tbaa !2119
  %65 = bitcast i8** %pp to i8*, !dbg !4832
  call void @llvm.lifetime.start(i64 8, i8* %65) #3, !dbg !4832
  call void @llvm.dbg.declare(metadata i8** %pp, metadata !670, metadata !2123), !dbg !4833
  %66 = load i8*, i8** %p.addr, align 8, !dbg !4834, !tbaa !2119
  %67 = load i64, i64* %m.addr, align 8, !dbg !4835, !tbaa !2129
  %add.ptr78 = getelementptr i8, i8* %66, i64 %67, !dbg !4836
  %add.ptr79 = getelementptr i8, i8* %add.ptr78, i64 -1, !dbg !4837
  store i8* %add.ptr79, i8** %pp, align 8, !dbg !4833, !tbaa !2119
  store i64 0, i64* %i, align 8, !dbg !4838, !tbaa !2129
  br label %for.cond.80, !dbg !4840

for.cond.80:                                      ; preds = %for.inc.97, %if.then.76
  %68 = load i64, i64* %i, align 8, !dbg !4841, !tbaa !2129
  %69 = load i64, i64* %mlast, align 8, !dbg !4845, !tbaa !2129
  %cmp81 = icmp slt i64 %68, %69, !dbg !4846
  br i1 %cmp81, label %for.body.83, label %for.end.99, !dbg !4847

for.body.83:                                      ; preds = %for.cond.80
  %70 = load i64, i64* %i, align 8, !dbg !4848, !tbaa !2129
  %71 = load i8*, i8** %p.addr, align 8, !dbg !4850, !tbaa !2119
  %arrayidx84 = getelementptr i8, i8* %71, i64 %70, !dbg !4850
  %72 = load i8, i8* %arrayidx84, align 1, !dbg !4850, !tbaa !2233
  %conv85 = sext i8 %72 to i32, !dbg !4851
  %and86 = and i32 %conv85, 63, !dbg !4852
  %sh_prom = zext i32 %and86 to i64, !dbg !4853
  %shl = shl i64 1, %sh_prom, !dbg !4853
  %73 = load i64, i64* %mask, align 8, !dbg !4854, !tbaa !2129
  %or = or i64 %73, %shl, !dbg !4854
  store i64 %or, i64* %mask, align 8, !dbg !4854, !tbaa !2129
  %74 = load i64, i64* %i, align 8, !dbg !4855, !tbaa !2129
  %75 = load i8*, i8** %p.addr, align 8, !dbg !4857, !tbaa !2119
  %arrayidx87 = getelementptr i8, i8* %75, i64 %74, !dbg !4857
  %76 = load i8, i8* %arrayidx87, align 1, !dbg !4857, !tbaa !2233
  %conv88 = sext i8 %76 to i32, !dbg !4857
  %77 = load i64, i64* %mlast, align 8, !dbg !4858, !tbaa !2129
  %78 = load i8*, i8** %p.addr, align 8, !dbg !4859, !tbaa !2119
  %arrayidx89 = getelementptr i8, i8* %78, i64 %77, !dbg !4859
  %79 = load i8, i8* %arrayidx89, align 1, !dbg !4859, !tbaa !2233
  %conv90 = sext i8 %79 to i32, !dbg !4859
  %cmp91 = icmp eq i32 %conv88, %conv90, !dbg !4860
  br i1 %cmp91, label %if.then.93, label %if.end.96, !dbg !4861

if.then.93:                                       ; preds = %for.body.83
  %80 = load i64, i64* %mlast, align 8, !dbg !4862, !tbaa !2129
  %81 = load i64, i64* %i, align 8, !dbg !4863, !tbaa !2129
  %sub94 = sub i64 %80, %81, !dbg !4864
  %sub95 = sub i64 %sub94, 1, !dbg !4865
  store i64 %sub95, i64* %skip, align 8, !dbg !4866, !tbaa !2129
  br label %if.end.96, !dbg !4867

if.end.96:                                        ; preds = %if.then.93, %for.body.83
  br label %for.inc.97, !dbg !4868

for.inc.97:                                       ; preds = %if.end.96
  %82 = load i64, i64* %i, align 8, !dbg !4869, !tbaa !2129
  %inc98 = add i64 %82, 1, !dbg !4869
  store i64 %inc98, i64* %i, align 8, !dbg !4869, !tbaa !2129
  br label %for.cond.80, !dbg !4870

for.end.99:                                       ; preds = %for.cond.80
  %83 = load i64, i64* %mlast, align 8, !dbg !4871, !tbaa !2129
  %84 = load i8*, i8** %p.addr, align 8, !dbg !4872, !tbaa !2119
  %arrayidx100 = getelementptr i8, i8* %84, i64 %83, !dbg !4872
  %85 = load i8, i8* %arrayidx100, align 1, !dbg !4872, !tbaa !2233
  %conv101 = sext i8 %85 to i32, !dbg !4873
  %and102 = and i32 %conv101, 63, !dbg !4874
  %sh_prom103 = zext i32 %and102 to i64, !dbg !4875
  %shl104 = shl i64 1, %sh_prom103, !dbg !4875
  %86 = load i64, i64* %mask, align 8, !dbg !4876, !tbaa !2129
  %or105 = or i64 %86, %shl104, !dbg !4876
  store i64 %or105, i64* %mask, align 8, !dbg !4876, !tbaa !2129
  store i64 0, i64* %i, align 8, !dbg !4877, !tbaa !2129
  br label %for.cond.106, !dbg !4879

for.cond.106:                                     ; preds = %for.inc.171, %for.end.99
  %87 = load i64, i64* %i, align 8, !dbg !4880, !tbaa !2129
  %88 = load i64, i64* %w, align 8, !dbg !4884, !tbaa !2129
  %cmp107 = icmp sle i64 %87, %88, !dbg !4885
  br i1 %cmp107, label %for.body.109, label %for.end.173, !dbg !4886

for.body.109:                                     ; preds = %for.cond.106
  %89 = load i64, i64* %i, align 8, !dbg !4887, !tbaa !2129
  %90 = load i8*, i8** %ss, align 8, !dbg !4890, !tbaa !2119
  %arrayidx110 = getelementptr i8, i8* %90, i64 %89, !dbg !4890
  %91 = load i8, i8* %arrayidx110, align 1, !dbg !4890, !tbaa !2233
  %conv111 = sext i8 %91 to i32, !dbg !4890
  %92 = load i8*, i8** %pp, align 8, !dbg !4891, !tbaa !2119
  %arrayidx112 = getelementptr i8, i8* %92, i64 0, !dbg !4891
  %93 = load i8, i8* %arrayidx112, align 1, !dbg !4891, !tbaa !2233
  %conv113 = sext i8 %93 to i32, !dbg !4891
  %cmp114 = icmp eq i32 %conv111, %conv113, !dbg !4892
  br i1 %cmp114, label %if.then.116, label %if.else.158, !dbg !4893

if.then.116:                                      ; preds = %for.body.109
  store i64 0, i64* %j, align 8, !dbg !4894, !tbaa !2129
  br label %for.cond.117, !dbg !4897

for.cond.117:                                     ; preds = %for.inc.129, %if.then.116
  %94 = load i64, i64* %j, align 8, !dbg !4898, !tbaa !2129
  %95 = load i64, i64* %mlast, align 8, !dbg !4902, !tbaa !2129
  %cmp118 = icmp slt i64 %94, %95, !dbg !4903
  br i1 %cmp118, label %for.body.120, label %for.end.131, !dbg !4904

for.body.120:                                     ; preds = %for.cond.117
  %96 = load i64, i64* %i, align 8, !dbg !4905, !tbaa !2129
  %97 = load i64, i64* %j, align 8, !dbg !4907, !tbaa !2129
  %add = add i64 %96, %97, !dbg !4908
  %98 = load i8*, i8** %s.addr, align 8, !dbg !4909, !tbaa !2119
  %arrayidx121 = getelementptr i8, i8* %98, i64 %add, !dbg !4909
  %99 = load i8, i8* %arrayidx121, align 1, !dbg !4909, !tbaa !2233
  %conv122 = sext i8 %99 to i32, !dbg !4909
  %100 = load i64, i64* %j, align 8, !dbg !4910, !tbaa !2129
  %101 = load i8*, i8** %p.addr, align 8, !dbg !4911, !tbaa !2119
  %arrayidx123 = getelementptr i8, i8* %101, i64 %100, !dbg !4911
  %102 = load i8, i8* %arrayidx123, align 1, !dbg !4911, !tbaa !2233
  %conv124 = sext i8 %102 to i32, !dbg !4911
  %cmp125 = icmp ne i32 %conv122, %conv124, !dbg !4912
  br i1 %cmp125, label %if.then.127, label %if.end.128, !dbg !4913

if.then.127:                                      ; preds = %for.body.120
  br label %for.end.131, !dbg !4914

if.end.128:                                       ; preds = %for.body.120
  br label %for.inc.129, !dbg !4915

for.inc.129:                                      ; preds = %if.end.128
  %103 = load i64, i64* %j, align 8, !dbg !4917, !tbaa !2129
  %inc130 = add i64 %103, 1, !dbg !4917
  store i64 %inc130, i64* %j, align 8, !dbg !4917, !tbaa !2129
  br label %for.cond.117, !dbg !4918

for.end.131:                                      ; preds = %if.then.127, %for.cond.117
  %104 = load i64, i64* %j, align 8, !dbg !4919, !tbaa !2129
  %105 = load i64, i64* %mlast, align 8, !dbg !4921, !tbaa !2129
  %cmp132 = icmp eq i64 %104, %105, !dbg !4922
  br i1 %cmp132, label %if.then.134, label %if.end.145, !dbg !4923

if.then.134:                                      ; preds = %for.end.131
  %106 = load i32, i32* %mode.addr, align 4, !dbg !4924, !tbaa !2676
  %cmp135 = icmp ne i32 %106, 0, !dbg !4927
  br i1 %cmp135, label %if.then.137, label %if.end.138, !dbg !4928

if.then.137:                                      ; preds = %if.then.134
  %107 = load i64, i64* %i, align 8, !dbg !4929, !tbaa !2129
  store i64 %107, i64* %retval, !dbg !4930
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4930

if.end.138:                                       ; preds = %if.then.134
  %108 = load i64, i64* %count, align 8, !dbg !4931, !tbaa !2129
  %inc139 = add i64 %108, 1, !dbg !4931
  store i64 %inc139, i64* %count, align 8, !dbg !4931, !tbaa !2129
  %109 = load i64, i64* %count, align 8, !dbg !4932, !tbaa !2129
  %110 = load i64, i64* %maxcount.addr, align 8, !dbg !4934, !tbaa !2129
  %cmp140 = icmp eq i64 %109, %110, !dbg !4935
  br i1 %cmp140, label %if.then.142, label %if.end.143, !dbg !4936

if.then.142:                                      ; preds = %if.end.138
  %111 = load i64, i64* %maxcount.addr, align 8, !dbg !4937, !tbaa !2129
  store i64 %111, i64* %retval, !dbg !4938
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4938

if.end.143:                                       ; preds = %if.end.138
  %112 = load i64, i64* %i, align 8, !dbg !4939, !tbaa !2129
  %113 = load i64, i64* %mlast, align 8, !dbg !4940, !tbaa !2129
  %add144 = add i64 %112, %113, !dbg !4941
  store i64 %add144, i64* %i, align 8, !dbg !4942, !tbaa !2129
  br label %for.inc.171, !dbg !4943

if.end.145:                                       ; preds = %for.end.131
  %114 = load i64, i64* %mask, align 8, !dbg !4944, !tbaa !2129
  %115 = load i64, i64* %i, align 8, !dbg !4946, !tbaa !2129
  %add146 = add i64 %115, 1, !dbg !4947
  %116 = load i8*, i8** %ss, align 8, !dbg !4948, !tbaa !2119
  %arrayidx147 = getelementptr i8, i8* %116, i64 %add146, !dbg !4948
  %117 = load i8, i8* %arrayidx147, align 1, !dbg !4948, !tbaa !2233
  %conv148 = sext i8 %117 to i32, !dbg !4949
  %and149 = and i32 %conv148, 63, !dbg !4950
  %sh_prom150 = zext i32 %and149 to i64, !dbg !4951
  %shl151 = shl i64 1, %sh_prom150, !dbg !4951
  %and152 = and i64 %114, %shl151, !dbg !4952
  %tobool = icmp ne i64 %and152, 0, !dbg !4952
  br i1 %tobool, label %if.else.155, label %if.then.153, !dbg !4953

if.then.153:                                      ; preds = %if.end.145
  %118 = load i64, i64* %i, align 8, !dbg !4954, !tbaa !2129
  %119 = load i64, i64* %m.addr, align 8, !dbg !4955, !tbaa !2129
  %add154 = add i64 %118, %119, !dbg !4956
  store i64 %add154, i64* %i, align 8, !dbg !4957, !tbaa !2129
  br label %if.end.157, !dbg !4958

if.else.155:                                      ; preds = %if.end.145
  %120 = load i64, i64* %i, align 8, !dbg !4959, !tbaa !2129
  %121 = load i64, i64* %skip, align 8, !dbg !4960, !tbaa !2129
  %add156 = add i64 %120, %121, !dbg !4961
  store i64 %add156, i64* %i, align 8, !dbg !4962, !tbaa !2129
  br label %if.end.157

if.end.157:                                       ; preds = %if.else.155, %if.then.153
  br label %if.end.170, !dbg !4963

if.else.158:                                      ; preds = %for.body.109
  %122 = load i64, i64* %mask, align 8, !dbg !4964, !tbaa !2129
  %123 = load i64, i64* %i, align 8, !dbg !4967, !tbaa !2129
  %add159 = add i64 %123, 1, !dbg !4968
  %124 = load i8*, i8** %ss, align 8, !dbg !4969, !tbaa !2119
  %arrayidx160 = getelementptr i8, i8* %124, i64 %add159, !dbg !4969
  %125 = load i8, i8* %arrayidx160, align 1, !dbg !4969, !tbaa !2233
  %conv161 = sext i8 %125 to i32, !dbg !4970
  %and162 = and i32 %conv161, 63, !dbg !4971
  %sh_prom163 = zext i32 %and162 to i64, !dbg !4972
  %shl164 = shl i64 1, %sh_prom163, !dbg !4972
  %and165 = and i64 %122, %shl164, !dbg !4973
  %tobool166 = icmp ne i64 %and165, 0, !dbg !4973
  br i1 %tobool166, label %if.end.169, label %if.then.167, !dbg !4974

if.then.167:                                      ; preds = %if.else.158
  %126 = load i64, i64* %i, align 8, !dbg !4975, !tbaa !2129
  %127 = load i64, i64* %m.addr, align 8, !dbg !4976, !tbaa !2129
  %add168 = add i64 %126, %127, !dbg !4977
  store i64 %add168, i64* %i, align 8, !dbg !4978, !tbaa !2129
  br label %if.end.169, !dbg !4979

if.end.169:                                       ; preds = %if.then.167, %if.else.158
  br label %if.end.170

if.end.170:                                       ; preds = %if.end.169, %if.end.157
  br label %for.inc.171, !dbg !4980

for.inc.171:                                      ; preds = %if.end.170, %if.end.143
  %128 = load i64, i64* %i, align 8, !dbg !4981, !tbaa !2129
  %inc172 = add i64 %128, 1, !dbg !4981
  store i64 %inc172, i64* %i, align 8, !dbg !4981, !tbaa !2129
  br label %for.cond.106, !dbg !4982

for.end.173:                                      ; preds = %for.cond.106
  store i32 0, i32* %cleanup.dest.slot, !dbg !4983
  br label %cleanup, !dbg !4983

cleanup:                                          ; preds = %for.end.173, %if.then.142, %if.then.137
  %129 = bitcast i8** %pp to i8*, !dbg !4984
  call void @llvm.lifetime.end(i64 8, i8* %129) #3, !dbg !4984
  %130 = bitcast i8** %ss to i8*, !dbg !4984
  call void @llvm.lifetime.end(i64 8, i8* %130) #3, !dbg !4984
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.270, !dbg !4986

if.else.175:                                      ; preds = %if.end.71
  %131 = load i8*, i8** %p.addr, align 8, !dbg !4987, !tbaa !2119
  %arrayidx176 = getelementptr i8, i8* %131, i64 0, !dbg !4987
  %132 = load i8, i8* %arrayidx176, align 1, !dbg !4987, !tbaa !2233
  %conv177 = sext i8 %132 to i32, !dbg !4989
  %and178 = and i32 %conv177, 63, !dbg !4990
  %sh_prom179 = zext i32 %and178 to i64, !dbg !4991
  %shl180 = shl i64 1, %sh_prom179, !dbg !4991
  %133 = load i64, i64* %mask, align 8, !dbg !4992, !tbaa !2129
  %or181 = or i64 %133, %shl180, !dbg !4992
  store i64 %or181, i64* %mask, align 8, !dbg !4992, !tbaa !2129
  %134 = load i64, i64* %mlast, align 8, !dbg !4993, !tbaa !2129
  store i64 %134, i64* %i, align 8, !dbg !4995, !tbaa !2129
  br label %for.cond.182, !dbg !4996

for.cond.182:                                     ; preds = %for.inc.201, %if.else.175
  %135 = load i64, i64* %i, align 8, !dbg !4997, !tbaa !2129
  %cmp183 = icmp sgt i64 %135, 0, !dbg !5001
  br i1 %cmp183, label %for.body.185, label %for.end.203, !dbg !5002

for.body.185:                                     ; preds = %for.cond.182
  %136 = load i64, i64* %i, align 8, !dbg !5003, !tbaa !2129
  %137 = load i8*, i8** %p.addr, align 8, !dbg !5005, !tbaa !2119
  %arrayidx186 = getelementptr i8, i8* %137, i64 %136, !dbg !5005
  %138 = load i8, i8* %arrayidx186, align 1, !dbg !5005, !tbaa !2233
  %conv187 = sext i8 %138 to i32, !dbg !5006
  %and188 = and i32 %conv187, 63, !dbg !5007
  %sh_prom189 = zext i32 %and188 to i64, !dbg !5008
  %shl190 = shl i64 1, %sh_prom189, !dbg !5008
  %139 = load i64, i64* %mask, align 8, !dbg !5009, !tbaa !2129
  %or191 = or i64 %139, %shl190, !dbg !5009
  store i64 %or191, i64* %mask, align 8, !dbg !5009, !tbaa !2129
  %140 = load i64, i64* %i, align 8, !dbg !5010, !tbaa !2129
  %141 = load i8*, i8** %p.addr, align 8, !dbg !5012, !tbaa !2119
  %arrayidx192 = getelementptr i8, i8* %141, i64 %140, !dbg !5012
  %142 = load i8, i8* %arrayidx192, align 1, !dbg !5012, !tbaa !2233
  %conv193 = sext i8 %142 to i32, !dbg !5012
  %143 = load i8*, i8** %p.addr, align 8, !dbg !5013, !tbaa !2119
  %arrayidx194 = getelementptr i8, i8* %143, i64 0, !dbg !5013
  %144 = load i8, i8* %arrayidx194, align 1, !dbg !5013, !tbaa !2233
  %conv195 = sext i8 %144 to i32, !dbg !5013
  %cmp196 = icmp eq i32 %conv193, %conv195, !dbg !5014
  br i1 %cmp196, label %if.then.198, label %if.end.200, !dbg !5015

if.then.198:                                      ; preds = %for.body.185
  %145 = load i64, i64* %i, align 8, !dbg !5016, !tbaa !2129
  %sub199 = sub i64 %145, 1, !dbg !5017
  store i64 %sub199, i64* %skip, align 8, !dbg !5018, !tbaa !2129
  br label %if.end.200, !dbg !5019

if.end.200:                                       ; preds = %if.then.198, %for.body.185
  br label %for.inc.201, !dbg !5020

for.inc.201:                                      ; preds = %if.end.200
  %146 = load i64, i64* %i, align 8, !dbg !5021, !tbaa !2129
  %dec202 = add i64 %146, -1, !dbg !5021
  store i64 %dec202, i64* %i, align 8, !dbg !5021, !tbaa !2129
  br label %for.cond.182, !dbg !5022

for.end.203:                                      ; preds = %for.cond.182
  %147 = load i64, i64* %w, align 8, !dbg !5023, !tbaa !2129
  store i64 %147, i64* %i, align 8, !dbg !5025, !tbaa !2129
  br label %for.cond.204, !dbg !5026

for.cond.204:                                     ; preds = %for.inc.267, %for.end.203
  %148 = load i64, i64* %i, align 8, !dbg !5027, !tbaa !2129
  %cmp205 = icmp sge i64 %148, 0, !dbg !5031
  br i1 %cmp205, label %for.body.207, label %for.end.269, !dbg !5032

for.body.207:                                     ; preds = %for.cond.204
  %149 = load i64, i64* %i, align 8, !dbg !5033, !tbaa !2129
  %150 = load i8*, i8** %s.addr, align 8, !dbg !5036, !tbaa !2119
  %arrayidx208 = getelementptr i8, i8* %150, i64 %149, !dbg !5036
  %151 = load i8, i8* %arrayidx208, align 1, !dbg !5036, !tbaa !2233
  %conv209 = sext i8 %151 to i32, !dbg !5036
  %152 = load i8*, i8** %p.addr, align 8, !dbg !5037, !tbaa !2119
  %arrayidx210 = getelementptr i8, i8* %152, i64 0, !dbg !5037
  %153 = load i8, i8* %arrayidx210, align 1, !dbg !5037, !tbaa !2233
  %conv211 = sext i8 %153 to i32, !dbg !5037
  %cmp212 = icmp eq i32 %conv209, %conv211, !dbg !5038
  br i1 %cmp212, label %if.then.214, label %if.else.251, !dbg !5039

if.then.214:                                      ; preds = %for.body.207
  %154 = load i64, i64* %mlast, align 8, !dbg !5040, !tbaa !2129
  store i64 %154, i64* %j, align 8, !dbg !5043, !tbaa !2129
  br label %for.cond.215, !dbg !5044

for.cond.215:                                     ; preds = %for.inc.228, %if.then.214
  %155 = load i64, i64* %j, align 8, !dbg !5045, !tbaa !2129
  %cmp216 = icmp sgt i64 %155, 0, !dbg !5049
  br i1 %cmp216, label %for.body.218, label %for.end.230, !dbg !5050

for.body.218:                                     ; preds = %for.cond.215
  %156 = load i64, i64* %i, align 8, !dbg !5051, !tbaa !2129
  %157 = load i64, i64* %j, align 8, !dbg !5053, !tbaa !2129
  %add219 = add i64 %156, %157, !dbg !5054
  %158 = load i8*, i8** %s.addr, align 8, !dbg !5055, !tbaa !2119
  %arrayidx220 = getelementptr i8, i8* %158, i64 %add219, !dbg !5055
  %159 = load i8, i8* %arrayidx220, align 1, !dbg !5055, !tbaa !2233
  %conv221 = sext i8 %159 to i32, !dbg !5055
  %160 = load i64, i64* %j, align 8, !dbg !5056, !tbaa !2129
  %161 = load i8*, i8** %p.addr, align 8, !dbg !5057, !tbaa !2119
  %arrayidx222 = getelementptr i8, i8* %161, i64 %160, !dbg !5057
  %162 = load i8, i8* %arrayidx222, align 1, !dbg !5057, !tbaa !2233
  %conv223 = sext i8 %162 to i32, !dbg !5057
  %cmp224 = icmp ne i32 %conv221, %conv223, !dbg !5058
  br i1 %cmp224, label %if.then.226, label %if.end.227, !dbg !5059

if.then.226:                                      ; preds = %for.body.218
  br label %for.end.230, !dbg !5060

if.end.227:                                       ; preds = %for.body.218
  br label %for.inc.228, !dbg !5061

for.inc.228:                                      ; preds = %if.end.227
  %163 = load i64, i64* %j, align 8, !dbg !5063, !tbaa !2129
  %dec229 = add i64 %163, -1, !dbg !5063
  store i64 %dec229, i64* %j, align 8, !dbg !5063, !tbaa !2129
  br label %for.cond.215, !dbg !5064

for.end.230:                                      ; preds = %if.then.226, %for.cond.215
  %164 = load i64, i64* %j, align 8, !dbg !5065, !tbaa !2129
  %cmp231 = icmp eq i64 %164, 0, !dbg !5067
  br i1 %cmp231, label %if.then.233, label %if.end.234, !dbg !5068

if.then.233:                                      ; preds = %for.end.230
  %165 = load i64, i64* %i, align 8, !dbg !5069, !tbaa !2129
  store i64 %165, i64* %retval, !dbg !5070
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.275, !dbg !5070

if.end.234:                                       ; preds = %for.end.230
  %166 = load i64, i64* %i, align 8, !dbg !5071, !tbaa !2129
  %cmp235 = icmp sgt i64 %166, 0, !dbg !5073
  br i1 %cmp235, label %land.lhs.true.237, label %if.else.248, !dbg !5074

land.lhs.true.237:                                ; preds = %if.end.234
  %167 = load i64, i64* %mask, align 8, !dbg !5075, !tbaa !2129
  %168 = load i64, i64* %i, align 8, !dbg !5077, !tbaa !2129
  %sub238 = sub i64 %168, 1, !dbg !5078
  %169 = load i8*, i8** %s.addr, align 8, !dbg !5079, !tbaa !2119
  %arrayidx239 = getelementptr i8, i8* %169, i64 %sub238, !dbg !5079
  %170 = load i8, i8* %arrayidx239, align 1, !dbg !5079, !tbaa !2233
  %conv240 = sext i8 %170 to i32, !dbg !5080
  %and241 = and i32 %conv240, 63, !dbg !5081
  %sh_prom242 = zext i32 %and241 to i64, !dbg !5082
  %shl243 = shl i64 1, %sh_prom242, !dbg !5082
  %and244 = and i64 %167, %shl243, !dbg !5083
  %tobool245 = icmp ne i64 %and244, 0, !dbg !5083
  br i1 %tobool245, label %if.else.248, label %if.then.246, !dbg !5084

if.then.246:                                      ; preds = %land.lhs.true.237
  %171 = load i64, i64* %i, align 8, !dbg !5085, !tbaa !2129
  %172 = load i64, i64* %m.addr, align 8, !dbg !5086, !tbaa !2129
  %sub247 = sub i64 %171, %172, !dbg !5087
  store i64 %sub247, i64* %i, align 8, !dbg !5088, !tbaa !2129
  br label %if.end.250, !dbg !5089

if.else.248:                                      ; preds = %land.lhs.true.237, %if.end.234
  %173 = load i64, i64* %i, align 8, !dbg !5090, !tbaa !2129
  %174 = load i64, i64* %skip, align 8, !dbg !5091, !tbaa !2129
  %sub249 = sub i64 %173, %174, !dbg !5092
  store i64 %sub249, i64* %i, align 8, !dbg !5093, !tbaa !2129
  br label %if.end.250

if.end.250:                                       ; preds = %if.else.248, %if.then.246
  br label %if.end.266, !dbg !5094

if.else.251:                                      ; preds = %for.body.207
  %175 = load i64, i64* %i, align 8, !dbg !5095, !tbaa !2129
  %cmp252 = icmp sgt i64 %175, 0, !dbg !5098
  br i1 %cmp252, label %land.lhs.true.254, label %if.end.265, !dbg !5099

land.lhs.true.254:                                ; preds = %if.else.251
  %176 = load i64, i64* %mask, align 8, !dbg !5100, !tbaa !2129
  %177 = load i64, i64* %i, align 8, !dbg !5102, !tbaa !2129
  %sub255 = sub i64 %177, 1, !dbg !5103
  %178 = load i8*, i8** %s.addr, align 8, !dbg !5104, !tbaa !2119
  %arrayidx256 = getelementptr i8, i8* %178, i64 %sub255, !dbg !5104
  %179 = load i8, i8* %arrayidx256, align 1, !dbg !5104, !tbaa !2233
  %conv257 = sext i8 %179 to i32, !dbg !5105
  %and258 = and i32 %conv257, 63, !dbg !5106
  %sh_prom259 = zext i32 %and258 to i64, !dbg !5107
  %shl260 = shl i64 1, %sh_prom259, !dbg !5107
  %and261 = and i64 %176, %shl260, !dbg !5108
  %tobool262 = icmp ne i64 %and261, 0, !dbg !5108
  br i1 %tobool262, label %if.end.265, label %if.then.263, !dbg !5109

if.then.263:                                      ; preds = %land.lhs.true.254
  %180 = load i64, i64* %i, align 8, !dbg !5110, !tbaa !2129
  %181 = load i64, i64* %m.addr, align 8, !dbg !5111, !tbaa !2129
  %sub264 = sub i64 %180, %181, !dbg !5112
  store i64 %sub264, i64* %i, align 8, !dbg !5113, !tbaa !2129
  br label %if.end.265, !dbg !5114

if.end.265:                                       ; preds = %if.then.263, %land.lhs.true.254, %if.else.251
  br label %if.end.266

if.end.266:                                       ; preds = %if.end.265, %if.end.250
  br label %for.inc.267, !dbg !5115

for.inc.267:                                      ; preds = %if.end.266
  %182 = load i64, i64* %i, align 8, !dbg !5116, !tbaa !2129
  %dec268 = add i64 %182, -1, !dbg !5116
  store i64 %dec268, i64* %i, align 8, !dbg !5116, !tbaa !2129
  br label %for.cond.204, !dbg !5117

for.end.269:                                      ; preds = %for.cond.204
  br label %if.end.270

if.end.270:                                       ; preds = %for.end.269, %cleanup.cont
  %183 = load i32, i32* %mode.addr, align 4, !dbg !5118, !tbaa !2676
  %cmp271 = icmp ne i32 %183, 0, !dbg !5120
  br i1 %cmp271, label %if.then.273, label %if.end.274, !dbg !5121

if.then.273:                                      ; preds = %if.end.270
  store i64 -1, i64* %retval, !dbg !5122
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.275, !dbg !5122

if.end.274:                                       ; preds = %if.end.270
  %184 = load i64, i64* %count, align 8, !dbg !5123, !tbaa !2129
  store i64 %184, i64* %retval, !dbg !5124
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.275, !dbg !5124

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.275

cleanup.275:                                      ; preds = %NewDefault, %if.end.274, %if.then.273, %if.then.233, %if.end.70, %if.then.65, %if.then.48, %for.end, %if.then.31, %if.then.13, %if.then.6, %if.then
  %185 = bitcast i64* %w to i8*, !dbg !5125
  call void @llvm.lifetime.end(i64 8, i8* %185) #3, !dbg !5125
  %186 = bitcast i64* %mlast to i8*, !dbg !5125
  call void @llvm.lifetime.end(i64 8, i8* %186) #3, !dbg !5125
  %187 = bitcast i64* %j to i8*, !dbg !5125
  call void @llvm.lifetime.end(i64 8, i8* %187) #3, !dbg !5125
  %188 = bitcast i64* %i to i8*, !dbg !5125
  call void @llvm.lifetime.end(i64 8, i8* %188) #3, !dbg !5125
  %189 = bitcast i64* %count to i8*, !dbg !5125
  call void @llvm.lifetime.end(i64 8, i8* %189) #3, !dbg !5125
  %190 = bitcast i64* %skip to i8*, !dbg !5125
  call void @llvm.lifetime.end(i64 8, i8* %190) #3, !dbg !5125
  %191 = bitcast i64* %mask to i8*, !dbg !5125
  call void @llvm.lifetime.end(i64 8, i8* %191) #3, !dbg !5125
  %192 = load i64, i64* %retval, !dbg !5125
  ret i64 %192, !dbg !5125
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @stringlib_fastsearch_memchr_1char(i8* %s, i64 %n, i8 signext %ch, i8 zeroext %needle, i64 %maxcount, i32 %mode) #4 {
entry:
  %retval = alloca i64, align 8
  %s.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %ch.addr = alloca i8, align 1
  %needle.addr = alloca i8, align 1
  %maxcount.addr = alloca i64, align 8
  %mode.addr = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %e = alloca i8*, align 8
  %candidate = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %found = alloca i8*, align 8
  %candidate17 = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !675, metadata !2123), !dbg !5126
  store i64 %n, i64* %n.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !676, metadata !2123), !dbg !5127
  store i8 %ch, i8* %ch.addr, align 1, !tbaa !2233
  call void @llvm.dbg.declare(metadata i8* %ch.addr, metadata !677, metadata !2123), !dbg !5128
  store i8 %needle, i8* %needle.addr, align 1, !tbaa !2233
  call void @llvm.dbg.declare(metadata i8* %needle.addr, metadata !678, metadata !2123), !dbg !5129
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !679, metadata !2123), !dbg !5130
  store i32 %mode, i32* %mode.addr, align 4, !tbaa !2676
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !680, metadata !2123), !dbg !5131
  %0 = load i32, i32* %mode.addr, align 4, !dbg !5132, !tbaa !2676
  %cmp = icmp eq i32 %0, 1, !dbg !5133
  br i1 %cmp, label %if.then, label %if.else, !dbg !5134

if.then:                                          ; preds = %entry
  %1 = bitcast i8** %ptr to i8*, !dbg !5135
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !5135
  call void @llvm.dbg.declare(metadata i8** %ptr, metadata !681, metadata !2123), !dbg !5136
  %2 = load i8*, i8** %s.addr, align 8, !dbg !5137, !tbaa !2119
  store i8* %2, i8** %ptr, align 8, !dbg !5136, !tbaa !2119
  %3 = bitcast i8** %e to i8*, !dbg !5138
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !5138
  call void @llvm.dbg.declare(metadata i8** %e, metadata !684, metadata !2123), !dbg !5139
  %4 = load i8*, i8** %s.addr, align 8, !dbg !5140, !tbaa !2119
  %5 = load i64, i64* %n.addr, align 8, !dbg !5141, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %4, i64 %5, !dbg !5142
  store i8* %add.ptr, i8** %e, align 8, !dbg !5139, !tbaa !2119
  br label %while.cond, !dbg !5143

while.cond:                                       ; preds = %if.then
  %6 = load i8*, i8** %ptr, align 8, !dbg !5144, !tbaa !2119
  %7 = load i8*, i8** %e, align 8, !dbg !5146, !tbaa !2119
  %cmp1 = icmp ult i8* %6, %7, !dbg !5147
  br i1 %cmp1, label %while.body, label %while.end, !dbg !5143

while.body:                                       ; preds = %while.cond
  %8 = bitcast i8** %candidate to i8*, !dbg !5148
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !5148
  call void @llvm.dbg.declare(metadata i8** %candidate, metadata !685, metadata !2123), !dbg !5149
  %9 = load i8*, i8** %ptr, align 8, !dbg !5150, !tbaa !2119
  %10 = load i8, i8* %needle.addr, align 1, !dbg !5151, !tbaa !2233
  %conv = zext i8 %10 to i32, !dbg !5151
  %11 = load i8*, i8** %e, align 8, !dbg !5152, !tbaa !2119
  %12 = load i8*, i8** %ptr, align 8, !dbg !5153, !tbaa !2119
  %sub.ptr.lhs.cast = ptrtoint i8* %11 to i64, !dbg !5154
  %sub.ptr.rhs.cast = ptrtoint i8* %12 to i64, !dbg !5154
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !5154
  %mul = mul i64 %sub.ptr.sub, 1, !dbg !5155
  %call = call i8* @memchr(i8* %9, i32 %conv, i64 %mul) #8, !dbg !5156
  store i8* %call, i8** %candidate, align 8, !dbg !5149, !tbaa !2119
  %13 = load i8*, i8** %candidate, align 8, !dbg !5157, !tbaa !2119
  %cmp2 = icmp eq i8* %13, null, !dbg !5159
  br i1 %cmp2, label %if.then.4, label %if.end, !dbg !5160

if.then.4:                                        ; preds = %while.body
  store i64 -1, i64* %retval, !dbg !5161
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5161

if.end:                                           ; preds = %while.body
  %14 = load i8*, i8** %candidate, align 8, !dbg !5162, !tbaa !2119
  %15 = ptrtoint i8* %14 to i64, !dbg !5163
  %16 = inttoptr i64 %15 to i8*, !dbg !5164
  store i8* %16, i8** %ptr, align 8, !dbg !5165, !tbaa !2119
  %17 = load i8*, i8** %ptr, align 8, !dbg !5166, !tbaa !2119
  %18 = load i8*, i8** %s.addr, align 8, !dbg !5168, !tbaa !2119
  %sub.ptr.lhs.cast5 = ptrtoint i8* %17 to i64, !dbg !5169
  %sub.ptr.rhs.cast6 = ptrtoint i8* %18 to i64, !dbg !5169
  %sub.ptr.sub7 = sub i64 %sub.ptr.lhs.cast5, %sub.ptr.rhs.cast6, !dbg !5169
  store i64 %sub.ptr.sub7, i64* %retval, !dbg !5170
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5170

cleanup:                                          ; preds = %if.end, %if.then.4
  %19 = bitcast i8** %candidate to i8*, !dbg !5171
  call void @llvm.lifetime.end(i64 8, i8* %19) #3, !dbg !5171
  br label %cleanup.8

while.end:                                        ; preds = %while.cond
  store i64 -1, i64* %retval, !dbg !5172
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.8, !dbg !5172

cleanup.8:                                        ; preds = %while.end, %cleanup
  %20 = bitcast i8** %e to i8*, !dbg !5173
  call void @llvm.lifetime.end(i64 8, i8* %20) #3, !dbg !5173
  %21 = bitcast i8** %ptr to i8*, !dbg !5173
  call void @llvm.lifetime.end(i64 8, i8* %21) #3, !dbg !5173
  br label %return

if.else:                                          ; preds = %entry
  %22 = load i32, i32* %mode.addr, align 4, !dbg !5174, !tbaa !2676
  %cmp10 = icmp eq i32 %22, 2, !dbg !5175
  br i1 %cmp10, label %if.then.12, label %if.else.31, !dbg !5176

if.then.12:                                       ; preds = %if.else
  br label %while.cond.13, !dbg !5177

while.cond.13:                                    ; preds = %if.then.12
  %23 = load i64, i64* %n.addr, align 8, !dbg !5178, !tbaa !2129
  %cmp14 = icmp sgt i64 %23, 0, !dbg !5180
  br i1 %cmp14, label %while.body.16, label %while.end.30, !dbg !5177

while.body.16:                                    ; preds = %while.cond.13
  %24 = bitcast i8** %found to i8*, !dbg !5181
  call void @llvm.lifetime.start(i64 8, i8* %24) #3, !dbg !5181
  call void @llvm.dbg.declare(metadata i8** %found, metadata !687, metadata !2123), !dbg !5182
  %25 = bitcast i8** %candidate17 to i8*, !dbg !5183
  call void @llvm.lifetime.start(i64 8, i8* %25) #3, !dbg !5183
  call void @llvm.dbg.declare(metadata i8** %candidate17, metadata !691, metadata !2123), !dbg !5184
  %26 = load i8*, i8** %s.addr, align 8, !dbg !5185, !tbaa !2119
  %27 = load i8, i8* %needle.addr, align 1, !dbg !5186, !tbaa !2233
  %conv18 = zext i8 %27 to i32, !dbg !5186
  %28 = load i64, i64* %n.addr, align 8, !dbg !5187, !tbaa !2129
  %mul19 = mul i64 %28, 1, !dbg !5188
  %call20 = call i8* @memrchr(i8* %26, i32 %conv18, i64 %mul19) #8, !dbg !5189
  store i8* %call20, i8** %candidate17, align 8, !dbg !5184, !tbaa !2119
  %29 = load i8*, i8** %candidate17, align 8, !dbg !5190, !tbaa !2119
  %cmp21 = icmp eq i8* %29, null, !dbg !5192
  br i1 %cmp21, label %if.then.23, label %if.end.24, !dbg !5193

if.then.23:                                       ; preds = %while.body.16
  store i64 -1, i64* %retval, !dbg !5194
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.28, !dbg !5194

if.end.24:                                        ; preds = %while.body.16
  %30 = load i8*, i8** %candidate17, align 8, !dbg !5195, !tbaa !2119
  %31 = ptrtoint i8* %30 to i64, !dbg !5196
  %32 = inttoptr i64 %31 to i8*, !dbg !5197
  store i8* %32, i8** %found, align 8, !dbg !5198, !tbaa !2119
  %33 = load i8*, i8** %found, align 8, !dbg !5199, !tbaa !2119
  %34 = load i8*, i8** %s.addr, align 8, !dbg !5200, !tbaa !2119
  %sub.ptr.lhs.cast25 = ptrtoint i8* %33 to i64, !dbg !5201
  %sub.ptr.rhs.cast26 = ptrtoint i8* %34 to i64, !dbg !5201
  %sub.ptr.sub27 = sub i64 %sub.ptr.lhs.cast25, %sub.ptr.rhs.cast26, !dbg !5201
  store i64 %sub.ptr.sub27, i64* %n.addr, align 8, !dbg !5202, !tbaa !2129
  %35 = load i64, i64* %n.addr, align 8, !dbg !5203, !tbaa !2129
  store i64 %35, i64* %retval, !dbg !5205
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.28, !dbg !5205

cleanup.28:                                       ; preds = %if.end.24, %if.then.23
  %36 = bitcast i8** %candidate17 to i8*, !dbg !5206
  call void @llvm.lifetime.end(i64 8, i8* %36) #3, !dbg !5206
  %37 = bitcast i8** %found to i8*, !dbg !5206
  call void @llvm.lifetime.end(i64 8, i8* %37) #3, !dbg !5206
  br label %return

while.end.30:                                     ; preds = %while.cond.13
  store i64 -1, i64* %retval, !dbg !5207
  br label %return, !dbg !5207

if.else.31:                                       ; preds = %if.else
  store i64 0, i64* %retval, !dbg !5208
  br label %return, !dbg !5208

return:                                           ; preds = %if.else.31, %while.end.30, %cleanup.28, %cleanup.8
  %38 = load i64, i64* %retval, !dbg !5210
  ret i64 %38, !dbg !5210
}

; Function Attrs: nounwind readonly
declare i8* @memrchr(i8*, i32, i64) #5

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_subscript(%struct.PyByteArrayObject* %self, %struct._object* %index) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %index.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %start = alloca i64, align 8
  %stop = alloca i64, align 8
  %step = alloca i64, align 8
  %slicelength = alloca i64, align 8
  %cur = alloca i64, align 8
  %i24 = alloca i64, align 8
  %source_buf = alloca i8*, align 8
  %result_buf = alloca i8*, align 8
  %result = alloca %struct._object*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !713, metadata !2123), !dbg !5211
  store %struct._object* %index, %struct._object** %index.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %index.addr, metadata !714, metadata !2123), !dbg !5212
  %0 = load %struct._object*, %struct._object** %index.addr, align 8, !dbg !5213, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1, !dbg !5214
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5214, !tbaa !2203
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 10, !dbg !5215
  %2 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !5215, !tbaa !5216
  %cmp = icmp ne %struct.PyNumberMethods* %2, null, !dbg !5217
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !5218

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** %index.addr, align 8, !dbg !5219, !tbaa !2119
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1, !dbg !5221
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !5221, !tbaa !2203
  %tp_as_number2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 10, !dbg !5222
  %5 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number2, align 8, !dbg !5222, !tbaa !5216
  %nb_index = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %5, i32 0, i32 33, !dbg !5223
  %nb_index3 = bitcast {}** %nb_index to %struct._object* (%struct._object*)**, !dbg !5223
  %6 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index3, align 8, !dbg !5223, !tbaa !5224
  %cmp4 = icmp ne %struct._object* (%struct._object*)* %6, null, !dbg !5226
  br i1 %cmp4, label %if.then, label %if.else, !dbg !5227

if.then:                                          ; preds = %land.lhs.true
  %7 = bitcast i64* %i to i8*, !dbg !5228
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !5228
  call void @llvm.dbg.declare(metadata i64* %i, metadata !715, metadata !2123), !dbg !5229
  %8 = load %struct._object*, %struct._object** %index.addr, align 8, !dbg !5230, !tbaa !2119
  %9 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !5231, !tbaa !2119
  %call = call i64 @PyNumber_AsSsize_t(%struct._object* %8, %struct._object* %9), !dbg !5232
  store i64 %call, i64* %i, align 8, !dbg !5229, !tbaa !2129
  %10 = load i64, i64* %i, align 8, !dbg !5233, !tbaa !2129
  %cmp5 = icmp eq i64 %10, -1, !dbg !5235
  br i1 %cmp5, label %land.lhs.true.6, label %if.end, !dbg !5236

land.lhs.true.6:                                  ; preds = %if.then
  %call7 = call %struct._object* @PyErr_Occurred(), !dbg !5237
  %tobool = icmp ne %struct._object* %call7, null, !dbg !5237
  br i1 %tobool, label %if.then.8, label %if.end, !dbg !5239

if.then.8:                                        ; preds = %land.lhs.true.6
  store %struct._object* null, %struct._object** %retval, !dbg !5240
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5240

if.end:                                           ; preds = %land.lhs.true.6, %if.then
  %11 = load i64, i64* %i, align 8, !dbg !5241, !tbaa !2129
  %cmp9 = icmp slt i64 %11, 0, !dbg !5243
  br i1 %cmp9, label %if.then.10, label %if.end.11, !dbg !5244

if.then.10:                                       ; preds = %if.end
  %12 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5245, !tbaa !2119
  %13 = bitcast %struct.PyByteArrayObject* %12 to %struct.PyVarObject*, !dbg !5246
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %13, i32 0, i32 1, !dbg !5247
  %14 = load i64, i64* %ob_size, align 8, !dbg !5247, !tbaa !2239
  %15 = load i64, i64* %i, align 8, !dbg !5248, !tbaa !2129
  %add = add i64 %15, %14, !dbg !5248
  store i64 %add, i64* %i, align 8, !dbg !5248, !tbaa !2129
  br label %if.end.11, !dbg !5249

if.end.11:                                        ; preds = %if.then.10, %if.end
  %16 = load i64, i64* %i, align 8, !dbg !5250, !tbaa !2129
  %cmp12 = icmp slt i64 %16, 0, !dbg !5252
  br i1 %cmp12, label %if.then.15, label %lor.lhs.false, !dbg !5253

lor.lhs.false:                                    ; preds = %if.end.11
  %17 = load i64, i64* %i, align 8, !dbg !5254, !tbaa !2129
  %18 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5256, !tbaa !2119
  %19 = bitcast %struct.PyByteArrayObject* %18 to %struct.PyVarObject*, !dbg !5257
  %ob_size13 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %19, i32 0, i32 1, !dbg !5258
  %20 = load i64, i64* %ob_size13, align 8, !dbg !5258, !tbaa !2239
  %cmp14 = icmp sge i64 %17, %20, !dbg !5259
  br i1 %cmp14, label %if.then.15, label %if.end.16, !dbg !5260

if.then.15:                                       ; preds = %lor.lhs.false, %if.end.11
  %21 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !5261, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %21, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.10, i32 0, i32 0)), !dbg !5263
  store %struct._object* null, %struct._object** %retval, !dbg !5264
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5264

if.end.16:                                        ; preds = %lor.lhs.false
  %22 = load i64, i64* %i, align 8, !dbg !5265, !tbaa !2129
  %23 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5266, !tbaa !2119
  %24 = bitcast %struct.PyByteArrayObject* %23 to %struct.PyVarObject*, !dbg !5267
  %ob_size17 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %24, i32 0, i32 1, !dbg !5268
  %25 = load i64, i64* %ob_size17, align 8, !dbg !5268, !tbaa !2239
  %tobool18 = icmp ne i64 %25, 0, !dbg !5269
  br i1 %tobool18, label %cond.true, label %cond.false, !dbg !5269

cond.true:                                        ; preds = %if.end.16
  %26 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5270, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %26, i32 0, i32 3, !dbg !5272
  %27 = load i8*, i8** %ob_start, align 8, !dbg !5272, !tbaa !2250
  br label %cond.end, !dbg !5269

cond.false:                                       ; preds = %if.end.16
  br label %cond.end, !dbg !5273

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %27, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !5269
  %arrayidx = getelementptr i8, i8* %cond, i64 %22, !dbg !5275
  %28 = load i8, i8* %arrayidx, align 1, !dbg !5275, !tbaa !2233
  %conv = zext i8 %28 to i64, !dbg !5278
  %call19 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !5279
  store %struct._object* %call19, %struct._object** %retval, !dbg !5280
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5280

cleanup:                                          ; preds = %cond.end, %if.then.15, %if.then.8
  %29 = bitcast i64* %i to i8*, !dbg !5281
  call void @llvm.lifetime.end(i64 8, i8* %29) #3, !dbg !5281
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %30 = load %struct._object*, %struct._object** %index.addr, align 8, !dbg !5282, !tbaa !2119
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !5283
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8, !dbg !5283, !tbaa !2203
  %cmp21 = icmp eq %struct._typeobject* %31, @PySlice_Type, !dbg !5284
  br i1 %cmp21, label %if.then.23, label %if.else.81, !dbg !5285

if.then.23:                                       ; preds = %if.else
  %32 = bitcast i64* %start to i8*, !dbg !5286
  call void @llvm.lifetime.start(i64 8, i8* %32) #3, !dbg !5286
  call void @llvm.dbg.declare(metadata i64* %start, metadata !718, metadata !2123), !dbg !5287
  %33 = bitcast i64* %stop to i8*, !dbg !5286
  call void @llvm.lifetime.start(i64 8, i8* %33) #3, !dbg !5286
  call void @llvm.dbg.declare(metadata i64* %stop, metadata !721, metadata !2123), !dbg !5288
  %34 = bitcast i64* %step to i8*, !dbg !5286
  call void @llvm.lifetime.start(i64 8, i8* %34) #3, !dbg !5286
  call void @llvm.dbg.declare(metadata i64* %step, metadata !722, metadata !2123), !dbg !5289
  %35 = bitcast i64* %slicelength to i8*, !dbg !5286
  call void @llvm.lifetime.start(i64 8, i8* %35) #3, !dbg !5286
  call void @llvm.dbg.declare(metadata i64* %slicelength, metadata !723, metadata !2123), !dbg !5290
  %36 = bitcast i64* %cur to i8*, !dbg !5286
  call void @llvm.lifetime.start(i64 8, i8* %36) #3, !dbg !5286
  call void @llvm.dbg.declare(metadata i64* %cur, metadata !724, metadata !2123), !dbg !5291
  %37 = bitcast i64* %i24 to i8*, !dbg !5286
  call void @llvm.lifetime.start(i64 8, i8* %37) #3, !dbg !5286
  call void @llvm.dbg.declare(metadata i64* %i24, metadata !725, metadata !2123), !dbg !5292
  %38 = load %struct._object*, %struct._object** %index.addr, align 8, !dbg !5293, !tbaa !2119
  %39 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5295, !tbaa !2119
  %40 = bitcast %struct.PyByteArrayObject* %39 to %struct.PyVarObject*, !dbg !5296
  %ob_size25 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %40, i32 0, i32 1, !dbg !5297
  %41 = load i64, i64* %ob_size25, align 8, !dbg !5297, !tbaa !2239
  %call26 = call i32 @PySlice_GetIndicesEx(%struct._object* %38, i64 %41, i64* %start, i64* %stop, i64* %step, i64* %slicelength), !dbg !5298
  %cmp27 = icmp slt i32 %call26, 0, !dbg !5299
  br i1 %cmp27, label %if.then.29, label %if.end.30, !dbg !5300

if.then.29:                                       ; preds = %if.then.23
  store %struct._object* null, %struct._object** %retval, !dbg !5301
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.75, !dbg !5301

if.end.30:                                        ; preds = %if.then.23
  %42 = load i64, i64* %slicelength, align 8, !dbg !5303, !tbaa !2129
  %cmp31 = icmp sle i64 %42, 0, !dbg !5304
  br i1 %cmp31, label %if.then.33, label %if.else.35, !dbg !5305

if.then.33:                                       ; preds = %if.end.30
  %call34 = call %struct._object* @PyByteArray_FromStringAndSize(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i32 0, i32 0), i64 0), !dbg !5306
  store %struct._object* %call34, %struct._object** %retval, !dbg !5307
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.75, !dbg !5307

if.else.35:                                       ; preds = %if.end.30
  %43 = load i64, i64* %step, align 8, !dbg !5308, !tbaa !2129
  %cmp36 = icmp eq i64 %43, 1, !dbg !5309
  br i1 %cmp36, label %if.then.38, label %if.else.47, !dbg !5310

if.then.38:                                       ; preds = %if.else.35
  %44 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5311, !tbaa !2119
  %45 = bitcast %struct.PyByteArrayObject* %44 to %struct.PyVarObject*, !dbg !5313
  %ob_size39 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %45, i32 0, i32 1, !dbg !5314
  %46 = load i64, i64* %ob_size39, align 8, !dbg !5314, !tbaa !2239
  %tobool40 = icmp ne i64 %46, 0, !dbg !5315
  br i1 %tobool40, label %cond.true.41, label %cond.false.43, !dbg !5315

cond.true.41:                                     ; preds = %if.then.38
  %47 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5316, !tbaa !2119
  %ob_start42 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %47, i32 0, i32 3, !dbg !5318
  %48 = load i8*, i8** %ob_start42, align 8, !dbg !5318, !tbaa !2250
  br label %cond.end.44, !dbg !5315

cond.false.43:                                    ; preds = %if.then.38
  br label %cond.end.44, !dbg !5319

cond.end.44:                                      ; preds = %cond.false.43, %cond.true.41
  %cond45 = phi i8* [ %48, %cond.true.41 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.43 ], !dbg !5315
  %49 = load i64, i64* %start, align 8, !dbg !5321, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %cond45, i64 %49, !dbg !5324
  %50 = load i64, i64* %slicelength, align 8, !dbg !5325, !tbaa !2129
  %call46 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr, i64 %50), !dbg !5326
  store %struct._object* %call46, %struct._object** %retval, !dbg !5327
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.75, !dbg !5327

if.else.47:                                       ; preds = %if.else.35
  %51 = bitcast i8** %source_buf to i8*, !dbg !5328
  call void @llvm.lifetime.start(i64 8, i8* %51) #3, !dbg !5328
  call void @llvm.dbg.declare(metadata i8** %source_buf, metadata !726, metadata !2123), !dbg !5329
  %52 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5330, !tbaa !2119
  %53 = bitcast %struct.PyByteArrayObject* %52 to %struct.PyVarObject*, !dbg !5331
  %ob_size48 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %53, i32 0, i32 1, !dbg !5332
  %54 = load i64, i64* %ob_size48, align 8, !dbg !5332, !tbaa !2239
  %tobool49 = icmp ne i64 %54, 0, !dbg !5333
  br i1 %tobool49, label %cond.true.50, label %cond.false.52, !dbg !5333

cond.true.50:                                     ; preds = %if.else.47
  %55 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5334, !tbaa !2119
  %ob_start51 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %55, i32 0, i32 3, !dbg !5336
  %56 = load i8*, i8** %ob_start51, align 8, !dbg !5336, !tbaa !2250
  br label %cond.end.53, !dbg !5333

cond.false.52:                                    ; preds = %if.else.47
  br label %cond.end.53, !dbg !5337

cond.end.53:                                      ; preds = %cond.false.52, %cond.true.50
  %cond54 = phi i8* [ %56, %cond.true.50 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.52 ], !dbg !5333
  store i8* %cond54, i8** %source_buf, align 8, !dbg !5339, !tbaa !2119
  %57 = bitcast i8** %result_buf to i8*, !dbg !5342
  call void @llvm.lifetime.start(i64 8, i8* %57) #3, !dbg !5342
  call void @llvm.dbg.declare(metadata i8** %result_buf, metadata !730, metadata !2123), !dbg !5343
  %58 = bitcast %struct._object** %result to i8*, !dbg !5344
  call void @llvm.lifetime.start(i64 8, i8* %58) #3, !dbg !5344
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !731, metadata !2123), !dbg !5345
  %59 = load i64, i64* %slicelength, align 8, !dbg !5346, !tbaa !2129
  %call55 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %59), !dbg !5347
  store %struct._object* %call55, %struct._object** %result, align 8, !dbg !5348, !tbaa !2119
  %60 = load %struct._object*, %struct._object** %result, align 8, !dbg !5349, !tbaa !2119
  %cmp56 = icmp eq %struct._object* %60, null, !dbg !5351
  br i1 %cmp56, label %if.then.58, label %if.end.59, !dbg !5352

if.then.58:                                       ; preds = %cond.end.53
  store %struct._object* null, %struct._object** %retval, !dbg !5353
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.72, !dbg !5353

if.end.59:                                        ; preds = %cond.end.53
  %61 = load %struct._object*, %struct._object** %result, align 8, !dbg !5354, !tbaa !2119
  %62 = bitcast %struct._object* %61 to %struct.PyVarObject*, !dbg !5355
  %ob_size60 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %62, i32 0, i32 1, !dbg !5356
  %63 = load i64, i64* %ob_size60, align 8, !dbg !5356, !tbaa !2239
  %tobool61 = icmp ne i64 %63, 0, !dbg !5357
  br i1 %tobool61, label %cond.true.62, label %cond.false.64, !dbg !5357

cond.true.62:                                     ; preds = %if.end.59
  %64 = load %struct._object*, %struct._object** %result, align 8, !dbg !5358, !tbaa !2119
  %65 = bitcast %struct._object* %64 to %struct.PyByteArrayObject*, !dbg !5359
  %ob_start63 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %65, i32 0, i32 3, !dbg !5360
  %66 = load i8*, i8** %ob_start63, align 8, !dbg !5360, !tbaa !2250
  br label %cond.end.65, !dbg !5357

cond.false.64:                                    ; preds = %if.end.59
  br label %cond.end.65, !dbg !5361

cond.end.65:                                      ; preds = %cond.false.64, %cond.true.62
  %cond66 = phi i8* [ %66, %cond.true.62 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.64 ], !dbg !5357
  store i8* %cond66, i8** %result_buf, align 8, !dbg !5362, !tbaa !2119
  %67 = load i64, i64* %start, align 8, !dbg !5363, !tbaa !2129
  store i64 %67, i64* %cur, align 8, !dbg !5365, !tbaa !2129
  store i64 0, i64* %i24, align 8, !dbg !5366, !tbaa !2129
  br label %for.cond, !dbg !5367

for.cond:                                         ; preds = %for.inc, %cond.end.65
  %68 = load i64, i64* %i24, align 8, !dbg !5368, !tbaa !2129
  %69 = load i64, i64* %slicelength, align 8, !dbg !5372, !tbaa !2129
  %cmp67 = icmp slt i64 %68, %69, !dbg !5373
  br i1 %cmp67, label %for.body, label %for.end, !dbg !5374

for.body:                                         ; preds = %for.cond
  %70 = load i64, i64* %cur, align 8, !dbg !5375, !tbaa !2129
  %71 = load i8*, i8** %source_buf, align 8, !dbg !5377, !tbaa !2119
  %arrayidx69 = getelementptr i8, i8* %71, i64 %70, !dbg !5377
  %72 = load i8, i8* %arrayidx69, align 1, !dbg !5377, !tbaa !2233
  %73 = load i64, i64* %i24, align 8, !dbg !5378, !tbaa !2129
  %74 = load i8*, i8** %result_buf, align 8, !dbg !5379, !tbaa !2119
  %arrayidx70 = getelementptr i8, i8* %74, i64 %73, !dbg !5379
  store i8 %72, i8* %arrayidx70, align 1, !dbg !5380, !tbaa !2233
  br label %for.inc, !dbg !5381

for.inc:                                          ; preds = %for.body
  %75 = load i64, i64* %step, align 8, !dbg !5382, !tbaa !2129
  %76 = load i64, i64* %cur, align 8, !dbg !5383, !tbaa !2129
  %add71 = add i64 %76, %75, !dbg !5383
  store i64 %add71, i64* %cur, align 8, !dbg !5383, !tbaa !2129
  %77 = load i64, i64* %i24, align 8, !dbg !5384, !tbaa !2129
  %inc = add i64 %77, 1, !dbg !5384
  store i64 %inc, i64* %i24, align 8, !dbg !5384, !tbaa !2129
  br label %for.cond, !dbg !5385

for.end:                                          ; preds = %for.cond
  %78 = load %struct._object*, %struct._object** %result, align 8, !dbg !5386, !tbaa !2119
  store %struct._object* %78, %struct._object** %retval, !dbg !5387
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.72, !dbg !5387

cleanup.72:                                       ; preds = %for.end, %if.then.58
  %79 = bitcast %struct._object** %result to i8*, !dbg !5388
  call void @llvm.lifetime.end(i64 8, i8* %79) #3, !dbg !5388
  %80 = bitcast i8** %result_buf to i8*, !dbg !5388
  call void @llvm.lifetime.end(i64 8, i8* %80) #3, !dbg !5388
  %81 = bitcast i8** %source_buf to i8*, !dbg !5388
  call void @llvm.lifetime.end(i64 8, i8* %81) #3, !dbg !5388
  br label %cleanup.75

cleanup.75:                                       ; preds = %cleanup.72, %cond.end.44, %if.then.33, %if.then.29
  %82 = bitcast i64* %i24 to i8*, !dbg !5389
  call void @llvm.lifetime.end(i64 8, i8* %82) #3, !dbg !5389
  %83 = bitcast i64* %cur to i8*, !dbg !5389
  call void @llvm.lifetime.end(i64 8, i8* %83) #3, !dbg !5389
  %84 = bitcast i64* %slicelength to i8*, !dbg !5389
  call void @llvm.lifetime.end(i64 8, i8* %84) #3, !dbg !5389
  %85 = bitcast i64* %step to i8*, !dbg !5389
  call void @llvm.lifetime.end(i64 8, i8* %85) #3, !dbg !5389
  %86 = bitcast i64* %stop to i8*, !dbg !5389
  call void @llvm.lifetime.end(i64 8, i8* %86) #3, !dbg !5389
  %87 = bitcast i64* %start to i8*, !dbg !5389
  call void @llvm.lifetime.end(i64 8, i8* %87) #3, !dbg !5389
  br label %return

if.else.81:                                       ; preds = %if.else
  %88 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !5390, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %88, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.15, i32 0, i32 0)), !dbg !5392
  store %struct._object* null, %struct._object** %retval, !dbg !5393
  br label %return, !dbg !5393

return:                                           ; preds = %if.else.81, %cleanup.75, %cleanup
  %89 = load %struct._object*, %struct._object** %retval, !dbg !5394
  ret %struct._object* %89, !dbg !5394
}

; Function Attrs: nounwind uwtable
define internal i32 @bytearray_ass_subscript(%struct.PyByteArrayObject* %self, %struct._object* %index, %struct._object* %values) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %index.addr = alloca %struct._object*, align 8
  %values.addr = alloca %struct._object*, align 8
  %start = alloca i64, align 8
  %stop = alloca i64, align 8
  %step = alloca i64, align 8
  %slicelen = alloca i64, align 8
  %needed = alloca i64, align 8
  %buf = alloca i8*, align 8
  %bytes = alloca i8*, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %ival = alloca i32, align 4
  %err = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %cur = alloca i64, align 8
  %i110 = alloca i64, align 8
  %lim = alloca i64, align 8
  %i166 = alloca i64, align 8
  %cur167 = alloca i64, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !736, metadata !2123), !dbg !5395
  store %struct._object* %index, %struct._object** %index.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %index.addr, metadata !737, metadata !2123), !dbg !5396
  store %struct._object* %values, %struct._object** %values.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %values.addr, metadata !738, metadata !2123), !dbg !5397
  %0 = bitcast i64* %start to i8*, !dbg !5398
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !5398
  call void @llvm.dbg.declare(metadata i64* %start, metadata !739, metadata !2123), !dbg !5399
  %1 = bitcast i64* %stop to i8*, !dbg !5398
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !5398
  call void @llvm.dbg.declare(metadata i64* %stop, metadata !740, metadata !2123), !dbg !5400
  %2 = bitcast i64* %step to i8*, !dbg !5398
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !5398
  call void @llvm.dbg.declare(metadata i64* %step, metadata !741, metadata !2123), !dbg !5401
  %3 = bitcast i64* %slicelen to i8*, !dbg !5398
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !5398
  call void @llvm.dbg.declare(metadata i64* %slicelen, metadata !742, metadata !2123), !dbg !5402
  %4 = bitcast i64* %needed to i8*, !dbg !5398
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !5398
  call void @llvm.dbg.declare(metadata i64* %needed, metadata !743, metadata !2123), !dbg !5403
  %5 = bitcast i8** %buf to i8*, !dbg !5404
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !5404
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !744, metadata !2123), !dbg !5405
  %6 = bitcast i8** %bytes to i8*, !dbg !5404
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !5404
  call void @llvm.dbg.declare(metadata i8** %bytes, metadata !745, metadata !2123), !dbg !5406
  %7 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5407, !tbaa !2119
  %8 = bitcast %struct.PyByteArrayObject* %7 to %struct.PyVarObject*, !dbg !5408
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !5409
  %9 = load i64, i64* %ob_size, align 8, !dbg !5409, !tbaa !2239
  %tobool = icmp ne i64 %9, 0, !dbg !5410
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5410

cond.true:                                        ; preds = %entry
  %10 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5411, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %10, i32 0, i32 3, !dbg !5413
  %11 = load i8*, i8** %ob_start, align 8, !dbg !5413, !tbaa !2250
  br label %cond.end, !dbg !5410

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5414

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %11, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !5410
  store i8* %cond, i8** %buf, align 8, !dbg !5416, !tbaa !2119
  %12 = load %struct._object*, %struct._object** %index.addr, align 8, !dbg !5419, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1, !dbg !5420
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5420, !tbaa !2203
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 10, !dbg !5421
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !5421, !tbaa !5216
  %cmp = icmp ne %struct.PyNumberMethods* %14, null, !dbg !5422
  br i1 %cmp, label %land.lhs.true, label %if.else.28, !dbg !5423

land.lhs.true:                                    ; preds = %cond.end
  %15 = load %struct._object*, %struct._object** %index.addr, align 8, !dbg !5424, !tbaa !2119
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1, !dbg !5426
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !5426, !tbaa !2203
  %tp_as_number2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 10, !dbg !5427
  %17 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number2, align 8, !dbg !5427, !tbaa !5216
  %nb_index = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %17, i32 0, i32 33, !dbg !5428
  %nb_index3 = bitcast {}** %nb_index to %struct._object* (%struct._object*)**, !dbg !5428
  %18 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index3, align 8, !dbg !5428, !tbaa !5224
  %cmp4 = icmp ne %struct._object* (%struct._object*)* %18, null, !dbg !5429
  br i1 %cmp4, label %if.then, label %if.else.28, !dbg !5430

if.then:                                          ; preds = %land.lhs.true
  %19 = bitcast i64* %i to i8*, !dbg !5431
  call void @llvm.lifetime.start(i64 8, i8* %19) #3, !dbg !5431
  call void @llvm.dbg.declare(metadata i64* %i, metadata !746, metadata !2123), !dbg !5432
  %20 = load %struct._object*, %struct._object** %index.addr, align 8, !dbg !5433, !tbaa !2119
  %21 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !5434, !tbaa !2119
  %call = call i64 @PyNumber_AsSsize_t(%struct._object* %20, %struct._object* %21), !dbg !5435
  store i64 %call, i64* %i, align 8, !dbg !5432, !tbaa !2129
  %22 = load i64, i64* %i, align 8, !dbg !5436, !tbaa !2129
  %cmp5 = icmp eq i64 %22, -1, !dbg !5438
  br i1 %cmp5, label %land.lhs.true.6, label %if.end, !dbg !5439

land.lhs.true.6:                                  ; preds = %if.then
  %call7 = call %struct._object* @PyErr_Occurred(), !dbg !5440
  %tobool8 = icmp ne %struct._object* %call7, null, !dbg !5440
  br i1 %tobool8, label %if.then.9, label %if.end, !dbg !5442

if.then.9:                                        ; preds = %land.lhs.true.6
  store i32 -1, i32* %retval, !dbg !5443
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.27, !dbg !5443

if.end:                                           ; preds = %land.lhs.true.6, %if.then
  %23 = load i64, i64* %i, align 8, !dbg !5444, !tbaa !2129
  %cmp10 = icmp slt i64 %23, 0, !dbg !5446
  br i1 %cmp10, label %if.then.11, label %if.end.13, !dbg !5447

if.then.11:                                       ; preds = %if.end
  %24 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5448, !tbaa !2119
  %25 = bitcast %struct.PyByteArrayObject* %24 to %struct.PyVarObject*, !dbg !5449
  %ob_size12 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %25, i32 0, i32 1, !dbg !5450
  %26 = load i64, i64* %ob_size12, align 8, !dbg !5450, !tbaa !2239
  %27 = load i64, i64* %i, align 8, !dbg !5451, !tbaa !2129
  %add = add i64 %27, %26, !dbg !5451
  store i64 %add, i64* %i, align 8, !dbg !5451, !tbaa !2129
  br label %if.end.13, !dbg !5452

if.end.13:                                        ; preds = %if.then.11, %if.end
  %28 = load i64, i64* %i, align 8, !dbg !5453, !tbaa !2129
  %cmp14 = icmp slt i64 %28, 0, !dbg !5455
  br i1 %cmp14, label %if.then.17, label %lor.lhs.false, !dbg !5456

lor.lhs.false:                                    ; preds = %if.end.13
  %29 = load i64, i64* %i, align 8, !dbg !5457, !tbaa !2129
  %30 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5459, !tbaa !2119
  %31 = bitcast %struct.PyByteArrayObject* %30 to %struct.PyVarObject*, !dbg !5460
  %ob_size15 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %31, i32 0, i32 1, !dbg !5461
  %32 = load i64, i64* %ob_size15, align 8, !dbg !5461, !tbaa !2239
  %cmp16 = icmp sge i64 %29, %32, !dbg !5462
  br i1 %cmp16, label %if.then.17, label %if.end.18, !dbg !5463

if.then.17:                                       ; preds = %lor.lhs.false, %if.end.13
  %33 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !5464, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %33, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.10, i32 0, i32 0)), !dbg !5466
  store i32 -1, i32* %retval, !dbg !5467
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.27, !dbg !5467

if.end.18:                                        ; preds = %lor.lhs.false
  %34 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5468, !tbaa !2119
  %cmp19 = icmp eq %struct._object* %34, null, !dbg !5469
  br i1 %cmp19, label %if.then.20, label %if.else, !dbg !5470

if.then.20:                                       ; preds = %if.end.18
  %35 = load i64, i64* %i, align 8, !dbg !5471, !tbaa !2129
  store i64 %35, i64* %start, align 8, !dbg !5473, !tbaa !2129
  %36 = load i64, i64* %i, align 8, !dbg !5474, !tbaa !2129
  %add21 = add i64 %36, 1, !dbg !5475
  store i64 %add21, i64* %stop, align 8, !dbg !5476, !tbaa !2129
  store i64 1, i64* %step, align 8, !dbg !5477, !tbaa !2129
  store i64 1, i64* %slicelen, align 8, !dbg !5478, !tbaa !2129
  br label %if.end.26, !dbg !5479

if.else:                                          ; preds = %if.end.18
  %37 = bitcast i32* %ival to i8*, !dbg !5480
  call void @llvm.lifetime.start(i64 4, i8* %37) #3, !dbg !5480
  call void @llvm.dbg.declare(metadata i32* %ival, metadata !749, metadata !2123), !dbg !5481
  %38 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5482, !tbaa !2119
  %call22 = call i32 @_getbytevalue(%struct._object* %38, i32* %ival), !dbg !5484
  %tobool23 = icmp ne i32 %call22, 0, !dbg !5484
  br i1 %tobool23, label %if.end.25, label %if.then.24, !dbg !5485

if.then.24:                                       ; preds = %if.else
  store i32 -1, i32* %retval, !dbg !5486
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5486

if.end.25:                                        ; preds = %if.else
  %39 = load i32, i32* %ival, align 4, !dbg !5487, !tbaa !2676
  %conv = trunc i32 %39 to i8, !dbg !5488
  %40 = load i64, i64* %i, align 8, !dbg !5489, !tbaa !2129
  %41 = load i8*, i8** %buf, align 8, !dbg !5490, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %41, i64 %40, !dbg !5490
  store i8 %conv, i8* %arrayidx, align 1, !dbg !5491, !tbaa !2233
  store i32 0, i32* %retval, !dbg !5492
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5492

cleanup:                                          ; preds = %if.end.25, %if.then.24
  %42 = bitcast i32* %ival to i8*, !dbg !5493
  call void @llvm.lifetime.end(i64 4, i8* %42) #3, !dbg !5493
  br label %cleanup.27

if.end.26:                                        ; preds = %if.then.20
  store i32 0, i32* %cleanup.dest.slot, !dbg !5494
  br label %cleanup.27, !dbg !5494

cleanup.27:                                       ; preds = %if.end.26, %cleanup, %if.then.17, %if.then.9
  %43 = bitcast i64* %i to i8*, !dbg !5495
  call void @llvm.lifetime.end(i64 8, i8* %43) #3, !dbg !5495
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup.27
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.41, !dbg !5496

if.else.28:                                       ; preds = %land.lhs.true, %cond.end
  %44 = load %struct._object*, %struct._object** %index.addr, align 8, !dbg !5497, !tbaa !2119
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1, !dbg !5499
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8, !dbg !5499, !tbaa !2203
  %cmp30 = icmp eq %struct._typeobject* %45, @PySlice_Type, !dbg !5500
  br i1 %cmp30, label %if.then.32, label %if.else.39, !dbg !5501

if.then.32:                                       ; preds = %if.else.28
  %46 = load %struct._object*, %struct._object** %index.addr, align 8, !dbg !5502, !tbaa !2119
  %47 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5505, !tbaa !2119
  %48 = bitcast %struct.PyByteArrayObject* %47 to %struct.PyVarObject*, !dbg !5506
  %ob_size33 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %48, i32 0, i32 1, !dbg !5507
  %49 = load i64, i64* %ob_size33, align 8, !dbg !5507, !tbaa !2239
  %call34 = call i32 @PySlice_GetIndicesEx(%struct._object* %46, i64 %49, i64* %start, i64* %stop, i64* %step, i64* %slicelen), !dbg !5508
  %cmp35 = icmp slt i32 %call34, 0, !dbg !5509
  br i1 %cmp35, label %if.then.37, label %if.end.38, !dbg !5510

if.then.37:                                       ; preds = %if.then.32
  store i32 -1, i32* %retval, !dbg !5511
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.185, !dbg !5511

if.end.38:                                        ; preds = %if.then.32
  br label %if.end.40, !dbg !5513

if.else.39:                                       ; preds = %if.else.28
  %50 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !5514, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %50, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.16, i32 0, i32 0)), !dbg !5516
  store i32 -1, i32* %retval, !dbg !5517
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.185, !dbg !5517

if.end.40:                                        ; preds = %if.end.38
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %cleanup.cont
  %51 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5518, !tbaa !2119
  %cmp42 = icmp eq %struct._object* %51, null, !dbg !5519
  br i1 %cmp42, label %if.then.44, label %if.else.45, !dbg !5520

if.then.44:                                       ; preds = %if.end.41
  store i8* null, i8** %bytes, align 8, !dbg !5521, !tbaa !2119
  store i64 0, i64* %needed, align 8, !dbg !5523, !tbaa !2129
  br label %if.end.88, !dbg !5524

if.else.45:                                       ; preds = %if.end.41
  %52 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5525, !tbaa !2119
  %53 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5526, !tbaa !2119
  %54 = bitcast %struct.PyByteArrayObject* %53 to %struct._object*, !dbg !5527
  %cmp46 = icmp eq %struct._object* %52, %54, !dbg !5528
  br i1 %cmp46, label %if.then.56, label %lor.lhs.false.48, !dbg !5529

lor.lhs.false.48:                                 ; preds = %if.else.45
  %55 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5530, !tbaa !2119
  %ob_type49 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1, !dbg !5532
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type49, align 8, !dbg !5532, !tbaa !2203
  %cmp50 = icmp eq %struct._typeobject* %56, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyByteArray_Type to %struct._typeobject*), !dbg !5533
  br i1 %cmp50, label %if.else.78, label %lor.lhs.false.52, !dbg !5534

lor.lhs.false.52:                                 ; preds = %lor.lhs.false.48
  %57 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5535, !tbaa !2119
  %ob_type53 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 1, !dbg !5537
  %58 = load %struct._typeobject*, %struct._typeobject** %ob_type53, align 8, !dbg !5537, !tbaa !2203
  %call54 = call i32 @PyType_IsSubtype(%struct._typeobject* %58, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyByteArray_Type to %struct._typeobject*)), !dbg !5538
  %tobool55 = icmp ne i32 %call54, 0, !dbg !5538
  br i1 %tobool55, label %if.else.78, label %if.then.56, !dbg !5539

if.then.56:                                       ; preds = %lor.lhs.false.52, %if.else.45
  %59 = bitcast i32* %err to i8*, !dbg !5540
  call void @llvm.lifetime.start(i64 4, i8* %59) #3, !dbg !5540
  call void @llvm.dbg.declare(metadata i32* %err, metadata !752, metadata !2123), !dbg !5541
  %60 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5542, !tbaa !2119
  %call57 = call i32 @PyNumber_Check(%struct._object* %60), !dbg !5544
  %tobool58 = icmp ne i32 %call57, 0, !dbg !5544
  br i1 %tobool58, label %if.then.63, label %lor.lhs.false.59, !dbg !5545

lor.lhs.false.59:                                 ; preds = %if.then.56
  %61 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5546, !tbaa !2119
  %ob_type60 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1, !dbg !5548
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type60, align 8, !dbg !5548, !tbaa !2203
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 19, !dbg !5549
  %63 = load i64, i64* %tp_flags, align 8, !dbg !5549, !tbaa !3199
  %and = and i64 %63, 268435456, !dbg !5550
  %cmp61 = icmp ne i64 %and, 0, !dbg !5551
  br i1 %cmp61, label %if.then.63, label %if.end.64, !dbg !5552

if.then.63:                                       ; preds = %lor.lhs.false.59, %if.then.56
  %64 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !5553, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %64, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.17, i32 0, i32 0)), !dbg !5555
  store i32 -1, i32* %retval, !dbg !5556
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.77, !dbg !5556

if.end.64:                                        ; preds = %lor.lhs.false.59
  %65 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5557, !tbaa !2119
  %call65 = call %struct._object* @PyByteArray_FromObject(%struct._object* %65), !dbg !5558
  store %struct._object* %call65, %struct._object** %values.addr, align 8, !dbg !5559, !tbaa !2119
  %66 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5560, !tbaa !2119
  %cmp66 = icmp eq %struct._object* %66, null, !dbg !5562
  br i1 %cmp66, label %if.then.68, label %if.end.69, !dbg !5563

if.then.68:                                       ; preds = %if.end.64
  store i32 -1, i32* %retval, !dbg !5564
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.77, !dbg !5564

if.end.69:                                        ; preds = %if.end.64
  %67 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5565, !tbaa !2119
  %68 = load %struct._object*, %struct._object** %index.addr, align 8, !dbg !5566, !tbaa !2119
  %69 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5567, !tbaa !2119
  %call70 = call i32 @bytearray_ass_subscript(%struct.PyByteArrayObject* %67, %struct._object* %68, %struct._object* %69), !dbg !5568
  store i32 %call70, i32* %err, align 4, !dbg !5569, !tbaa !2676
  br label %do.body, !dbg !5570

do.body:                                          ; preds = %if.end.69
  %70 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5571
  call void @llvm.lifetime.start(i64 8, i8* %70) #3, !dbg !5571
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !756, metadata !2123), !dbg !5573
  %71 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5574, !tbaa !2119
  store %struct._object* %71, %struct._object** %_py_decref_tmp, align 8, !dbg !5573, !tbaa !2119
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5575, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 0, !dbg !5577
  %73 = load i64, i64* %ob_refcnt, align 8, !dbg !5578, !tbaa !2195
  %dec = add i64 %73, -1, !dbg !5578
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5578, !tbaa !2195
  %cmp71 = icmp ne i64 %dec, 0, !dbg !5579
  br i1 %cmp71, label %if.then.73, label %if.else.74, !dbg !5580

if.then.73:                                       ; preds = %do.body
  br label %if.end.76, !dbg !5581

if.else.74:                                       ; preds = %do.body
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5583, !tbaa !2119
  %ob_type75 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 1, !dbg !5585
  %75 = load %struct._typeobject*, %struct._typeobject** %ob_type75, align 8, !dbg !5585, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %75, i32 0, i32 4, !dbg !5586
  %76 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5586, !tbaa !2205
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5587, !tbaa !2119
  call void %76(%struct._object* %77), !dbg !5588
  br label %if.end.76

if.end.76:                                        ; preds = %if.else.74, %if.then.73
  %78 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5589
  call void @llvm.lifetime.end(i64 8, i8* %78) #3, !dbg !5589
  br label %do.cond, !dbg !5591

do.cond:                                          ; preds = %if.end.76
  br label %do.end, !dbg !5592

do.end:                                           ; preds = %do.cond
  %79 = load i32, i32* %err, align 4, !dbg !5594, !tbaa !2676
  store i32 %79, i32* %retval, !dbg !5595
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.77, !dbg !5595

cleanup.77:                                       ; preds = %do.end, %if.then.68, %if.then.63
  %80 = bitcast i32* %err to i8*, !dbg !5596
  call void @llvm.lifetime.end(i64 4, i8* %80) #3, !dbg !5596
  br label %cleanup.185

if.else.78:                                       ; preds = %lor.lhs.false.52, %lor.lhs.false.48
  %81 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5597, !tbaa !2119
  %82 = bitcast %struct._object* %81 to %struct.PyVarObject*, !dbg !5599
  %ob_size79 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %82, i32 0, i32 1, !dbg !5600
  %83 = load i64, i64* %ob_size79, align 8, !dbg !5600, !tbaa !2239
  %tobool80 = icmp ne i64 %83, 0, !dbg !5601
  br i1 %tobool80, label %cond.true.81, label %cond.false.83, !dbg !5601

cond.true.81:                                     ; preds = %if.else.78
  %84 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5602, !tbaa !2119
  %85 = bitcast %struct._object* %84 to %struct.PyByteArrayObject*, !dbg !5604
  %ob_start82 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %85, i32 0, i32 3, !dbg !5605
  %86 = load i8*, i8** %ob_start82, align 8, !dbg !5605, !tbaa !2250
  br label %cond.end.84, !dbg !5601

cond.false.83:                                    ; preds = %if.else.78
  br label %cond.end.84, !dbg !5606

cond.end.84:                                      ; preds = %cond.false.83, %cond.true.81
  %cond85 = phi i8* [ %86, %cond.true.81 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.83 ], !dbg !5601
  store i8* %cond85, i8** %bytes, align 8, !dbg !5608, !tbaa !2119
  %87 = load %struct._object*, %struct._object** %values.addr, align 8, !dbg !5611, !tbaa !2119
  %88 = bitcast %struct._object* %87 to %struct.PyVarObject*, !dbg !5612
  %ob_size86 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %88, i32 0, i32 1, !dbg !5613
  %89 = load i64, i64* %ob_size86, align 8, !dbg !5613, !tbaa !2239
  store i64 %89, i64* %needed, align 8, !dbg !5614, !tbaa !2129
  br label %if.end.87

if.end.87:                                        ; preds = %cond.end.84
  br label %if.end.88

if.end.88:                                        ; preds = %if.end.87, %if.then.44
  %90 = load i64, i64* %step, align 8, !dbg !5615, !tbaa !2129
  %cmp89 = icmp slt i64 %90, 0, !dbg !5617
  br i1 %cmp89, label %land.lhs.true.91, label %lor.lhs.false.94, !dbg !5618

land.lhs.true.91:                                 ; preds = %if.end.88
  %91 = load i64, i64* %start, align 8, !dbg !5619, !tbaa !2129
  %92 = load i64, i64* %stop, align 8, !dbg !5621, !tbaa !2129
  %cmp92 = icmp slt i64 %91, %92, !dbg !5622
  br i1 %cmp92, label %if.then.100, label %lor.lhs.false.94, !dbg !5623

lor.lhs.false.94:                                 ; preds = %land.lhs.true.91, %if.end.88
  %93 = load i64, i64* %step, align 8, !dbg !5624, !tbaa !2129
  %cmp95 = icmp sgt i64 %93, 0, !dbg !5625
  br i1 %cmp95, label %land.lhs.true.97, label %if.end.101, !dbg !5626

land.lhs.true.97:                                 ; preds = %lor.lhs.false.94
  %94 = load i64, i64* %start, align 8, !dbg !5627, !tbaa !2129
  %95 = load i64, i64* %stop, align 8, !dbg !5628, !tbaa !2129
  %cmp98 = icmp sgt i64 %94, %95, !dbg !5629
  br i1 %cmp98, label %if.then.100, label %if.end.101, !dbg !5630

if.then.100:                                      ; preds = %land.lhs.true.97, %land.lhs.true.91
  %96 = load i64, i64* %start, align 8, !dbg !5631, !tbaa !2129
  store i64 %96, i64* %stop, align 8, !dbg !5632, !tbaa !2129
  br label %if.end.101, !dbg !5633

if.end.101:                                       ; preds = %if.then.100, %land.lhs.true.97, %lor.lhs.false.94
  %97 = load i64, i64* %step, align 8, !dbg !5634, !tbaa !2129
  %cmp102 = icmp eq i64 %97, 1, !dbg !5635
  br i1 %cmp102, label %if.then.104, label %if.else.106, !dbg !5636

if.then.104:                                      ; preds = %if.end.101
  %98 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5637, !tbaa !2119
  %99 = load i64, i64* %start, align 8, !dbg !5639, !tbaa !2129
  %100 = load i64, i64* %stop, align 8, !dbg !5640, !tbaa !2129
  %101 = load i8*, i8** %bytes, align 8, !dbg !5641, !tbaa !2119
  %102 = load i64, i64* %needed, align 8, !dbg !5642, !tbaa !2129
  %call105 = call i32 @bytearray_setslice_linear(%struct.PyByteArrayObject* %98, i64 %99, i64 %100, i8* %101, i64 %102), !dbg !5643
  store i32 %call105, i32* %retval, !dbg !5644
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.185, !dbg !5644

if.else.106:                                      ; preds = %if.end.101
  %103 = load i64, i64* %needed, align 8, !dbg !5645, !tbaa !2129
  %cmp107 = icmp eq i64 %103, 0, !dbg !5646
  br i1 %cmp107, label %if.then.109, label %if.else.165, !dbg !5647

if.then.109:                                      ; preds = %if.else.106
  %104 = bitcast i64* %cur to i8*, !dbg !5648
  call void @llvm.lifetime.start(i64 8, i8* %104) #3, !dbg !5648
  call void @llvm.dbg.declare(metadata i64* %cur, metadata !758, metadata !2123), !dbg !5649
  %105 = bitcast i64* %i110 to i8*, !dbg !5650
  call void @llvm.lifetime.start(i64 8, i8* %105) #3, !dbg !5650
  call void @llvm.dbg.declare(metadata i64* %i110, metadata !763, metadata !2123), !dbg !5651
  %106 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5652, !tbaa !2119
  %call111 = call i32 @_canresize(%struct.PyByteArrayObject* %106), !dbg !5654
  %tobool112 = icmp ne i32 %call111, 0, !dbg !5654
  br i1 %tobool112, label %if.end.114, label %if.then.113, !dbg !5655

if.then.113:                                      ; preds = %if.then.109
  store i32 -1, i32* %retval, !dbg !5656
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.163, !dbg !5656

if.end.114:                                       ; preds = %if.then.109
  %107 = load i64, i64* %slicelen, align 8, !dbg !5657, !tbaa !2129
  %cmp115 = icmp eq i64 %107, 0, !dbg !5659
  br i1 %cmp115, label %if.then.117, label %if.end.118, !dbg !5660

if.then.117:                                      ; preds = %if.end.114
  store i32 0, i32* %retval, !dbg !5661
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.163, !dbg !5661

if.end.118:                                       ; preds = %if.end.114
  %108 = load i64, i64* %step, align 8, !dbg !5662, !tbaa !2129
  %cmp119 = icmp slt i64 %108, 0, !dbg !5664
  br i1 %cmp119, label %if.then.121, label %if.end.126, !dbg !5665

if.then.121:                                      ; preds = %if.end.118
  %109 = load i64, i64* %start, align 8, !dbg !5666, !tbaa !2129
  %add122 = add i64 %109, 1, !dbg !5668
  store i64 %add122, i64* %stop, align 8, !dbg !5669, !tbaa !2129
  %110 = load i64, i64* %stop, align 8, !dbg !5670, !tbaa !2129
  %111 = load i64, i64* %step, align 8, !dbg !5671, !tbaa !2129
  %112 = load i64, i64* %slicelen, align 8, !dbg !5672, !tbaa !2129
  %sub = sub i64 %112, 1, !dbg !5673
  %mul = mul i64 %111, %sub, !dbg !5674
  %add123 = add i64 %110, %mul, !dbg !5675
  %sub124 = sub i64 %add123, 1, !dbg !5676
  store i64 %sub124, i64* %start, align 8, !dbg !5677, !tbaa !2129
  %113 = load i64, i64* %step, align 8, !dbg !5678, !tbaa !2129
  %sub125 = sub i64 0, %113, !dbg !5679
  store i64 %sub125, i64* %step, align 8, !dbg !5680, !tbaa !2129
  br label %if.end.126, !dbg !5681

if.end.126:                                       ; preds = %if.then.121, %if.end.118
  %114 = load i64, i64* %start, align 8, !dbg !5682, !tbaa !2129
  store i64 %114, i64* %cur, align 8, !dbg !5683, !tbaa !2129
  store i64 0, i64* %i110, align 8, !dbg !5684, !tbaa !2129
  br label %for.cond, !dbg !5685

for.cond:                                         ; preds = %for.inc, %if.end.126
  %115 = load i64, i64* %i110, align 8, !dbg !5686, !tbaa !2129
  %116 = load i64, i64* %slicelen, align 8, !dbg !5687, !tbaa !2129
  %cmp127 = icmp slt i64 %115, %116, !dbg !5688
  br i1 %cmp127, label %for.body, label %for.end, !dbg !5689

for.body:                                         ; preds = %for.cond
  %117 = bitcast i64* %lim to i8*, !dbg !5690
  call void @llvm.lifetime.start(i64 8, i8* %117) #3, !dbg !5690
  call void @llvm.dbg.declare(metadata i64* %lim, metadata !764, metadata !2123), !dbg !5691
  %118 = load i64, i64* %step, align 8, !dbg !5692, !tbaa !2129
  %sub129 = sub i64 %118, 1, !dbg !5693
  store i64 %sub129, i64* %lim, align 8, !dbg !5691, !tbaa !2129
  %119 = load i64, i64* %cur, align 8, !dbg !5694, !tbaa !2129
  %120 = load i64, i64* %step, align 8, !dbg !5696, !tbaa !2129
  %add130 = add i64 %119, %120, !dbg !5697
  %121 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5698, !tbaa !2119
  %122 = bitcast %struct.PyByteArrayObject* %121 to %struct.PyVarObject*, !dbg !5699
  %ob_size131 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %122, i32 0, i32 1, !dbg !5700
  %123 = load i64, i64* %ob_size131, align 8, !dbg !5700, !tbaa !2239
  %cmp132 = icmp uge i64 %add130, %123, !dbg !5701
  br i1 %cmp132, label %if.then.134, label %if.end.138, !dbg !5702

if.then.134:                                      ; preds = %for.body
  %124 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5703, !tbaa !2119
  %125 = bitcast %struct.PyByteArrayObject* %124 to %struct.PyVarObject*, !dbg !5704
  %ob_size135 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %125, i32 0, i32 1, !dbg !5705
  %126 = load i64, i64* %ob_size135, align 8, !dbg !5705, !tbaa !2239
  %127 = load i64, i64* %cur, align 8, !dbg !5706, !tbaa !2129
  %sub136 = sub i64 %126, %127, !dbg !5707
  %sub137 = sub i64 %sub136, 1, !dbg !5708
  store i64 %sub137, i64* %lim, align 8, !dbg !5709, !tbaa !2129
  br label %if.end.138, !dbg !5710

if.end.138:                                       ; preds = %if.then.134, %for.body
  %128 = load i8*, i8** %buf, align 8, !dbg !5711, !tbaa !2119
  %129 = load i64, i64* %cur, align 8, !dbg !5712, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %128, i64 %129, !dbg !5713
  %130 = load i64, i64* %i110, align 8, !dbg !5714, !tbaa !2129
  %idx.neg = sub i64 0, %130, !dbg !5715
  %add.ptr139 = getelementptr i8, i8* %add.ptr, i64 %idx.neg, !dbg !5715
  %131 = load i8*, i8** %buf, align 8, !dbg !5716, !tbaa !2119
  %132 = load i64, i64* %cur, align 8, !dbg !5717, !tbaa !2129
  %add.ptr140 = getelementptr i8, i8* %131, i64 %132, !dbg !5718
  %add.ptr141 = getelementptr i8, i8* %add.ptr140, i64 1, !dbg !5719
  %133 = load i64, i64* %lim, align 8, !dbg !5720, !tbaa !2129
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr139, i8* %add.ptr141, i64 %133, i32 1, i1 false), !dbg !5721
  %134 = bitcast i64* %lim to i8*, !dbg !5722
  call void @llvm.lifetime.end(i64 8, i8* %134) #3, !dbg !5722
  br label %for.inc, !dbg !5723

for.inc:                                          ; preds = %if.end.138
  %135 = load i64, i64* %step, align 8, !dbg !5724, !tbaa !2129
  %136 = load i64, i64* %cur, align 8, !dbg !5725, !tbaa !2129
  %add142 = add i64 %136, %135, !dbg !5725
  store i64 %add142, i64* %cur, align 8, !dbg !5725, !tbaa !2129
  %137 = load i64, i64* %i110, align 8, !dbg !5726, !tbaa !2129
  %inc = add i64 %137, 1, !dbg !5726
  store i64 %inc, i64* %i110, align 8, !dbg !5726, !tbaa !2129
  br label %for.cond, !dbg !5727

for.end:                                          ; preds = %for.cond
  %138 = load i64, i64* %start, align 8, !dbg !5728, !tbaa !2129
  %139 = load i64, i64* %slicelen, align 8, !dbg !5729, !tbaa !2129
  %140 = load i64, i64* %step, align 8, !dbg !5730, !tbaa !2129
  %mul143 = mul i64 %139, %140, !dbg !5731
  %add144 = add i64 %138, %mul143, !dbg !5732
  store i64 %add144, i64* %cur, align 8, !dbg !5733, !tbaa !2129
  %141 = load i64, i64* %cur, align 8, !dbg !5734, !tbaa !2129
  %142 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5736, !tbaa !2119
  %143 = bitcast %struct.PyByteArrayObject* %142 to %struct.PyVarObject*, !dbg !5737
  %ob_size145 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %143, i32 0, i32 1, !dbg !5738
  %144 = load i64, i64* %ob_size145, align 8, !dbg !5738, !tbaa !2239
  %cmp146 = icmp ult i64 %141, %144, !dbg !5739
  br i1 %cmp146, label %if.then.148, label %if.end.155, !dbg !5740

if.then.148:                                      ; preds = %for.end
  %145 = load i8*, i8** %buf, align 8, !dbg !5741, !tbaa !2119
  %146 = load i64, i64* %cur, align 8, !dbg !5743, !tbaa !2129
  %add.ptr149 = getelementptr i8, i8* %145, i64 %146, !dbg !5744
  %147 = load i64, i64* %slicelen, align 8, !dbg !5745, !tbaa !2129
  %idx.neg150 = sub i64 0, %147, !dbg !5746
  %add.ptr151 = getelementptr i8, i8* %add.ptr149, i64 %idx.neg150, !dbg !5746
  %148 = load i8*, i8** %buf, align 8, !dbg !5747, !tbaa !2119
  %149 = load i64, i64* %cur, align 8, !dbg !5748, !tbaa !2129
  %add.ptr152 = getelementptr i8, i8* %148, i64 %149, !dbg !5749
  %150 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5750, !tbaa !2119
  %151 = bitcast %struct.PyByteArrayObject* %150 to %struct.PyVarObject*, !dbg !5751
  %ob_size153 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %151, i32 0, i32 1, !dbg !5752
  %152 = load i64, i64* %ob_size153, align 8, !dbg !5752, !tbaa !2239
  %153 = load i64, i64* %cur, align 8, !dbg !5753, !tbaa !2129
  %sub154 = sub i64 %152, %153, !dbg !5754
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr151, i8* %add.ptr152, i64 %sub154, i32 1, i1 false), !dbg !5755
  br label %if.end.155, !dbg !5756

if.end.155:                                       ; preds = %if.then.148, %for.end
  %154 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5757, !tbaa !2119
  %155 = bitcast %struct.PyByteArrayObject* %154 to %struct._object*, !dbg !5759
  %156 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5760, !tbaa !2119
  %157 = bitcast %struct.PyByteArrayObject* %156 to %struct.PyVarObject*, !dbg !5761
  %ob_size156 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %157, i32 0, i32 1, !dbg !5762
  %158 = load i64, i64* %ob_size156, align 8, !dbg !5762, !tbaa !2239
  %159 = load i64, i64* %slicelen, align 8, !dbg !5763, !tbaa !2129
  %sub157 = sub i64 %158, %159, !dbg !5764
  %call158 = call i32 @PyByteArray_Resize(%struct._object* %155, i64 %sub157), !dbg !5765
  %cmp159 = icmp slt i32 %call158, 0, !dbg !5766
  br i1 %cmp159, label %if.then.161, label %if.end.162, !dbg !5767

if.then.161:                                      ; preds = %if.end.155
  store i32 -1, i32* %retval, !dbg !5768
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.163, !dbg !5768

if.end.162:                                       ; preds = %if.end.155
  store i32 0, i32* %retval, !dbg !5769
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.163, !dbg !5769

cleanup.163:                                      ; preds = %if.end.162, %if.then.161, %if.then.117, %if.then.113
  %160 = bitcast i64* %i110 to i8*, !dbg !5770
  call void @llvm.lifetime.end(i64 8, i8* %160) #3, !dbg !5770
  %161 = bitcast i64* %cur to i8*, !dbg !5770
  call void @llvm.lifetime.end(i64 8, i8* %161) #3, !dbg !5770
  br label %cleanup.185

if.else.165:                                      ; preds = %if.else.106
  %162 = bitcast i64* %i166 to i8*, !dbg !5771
  call void @llvm.lifetime.start(i64 8, i8* %162) #3, !dbg !5771
  call void @llvm.dbg.declare(metadata i64* %i166, metadata !768, metadata !2123), !dbg !5772
  %163 = bitcast i64* %cur167 to i8*, !dbg !5773
  call void @llvm.lifetime.start(i64 8, i8* %163) #3, !dbg !5773
  call void @llvm.dbg.declare(metadata i64* %cur167, metadata !770, metadata !2123), !dbg !5774
  %164 = load i64, i64* %needed, align 8, !dbg !5775, !tbaa !2129
  %165 = load i64, i64* %slicelen, align 8, !dbg !5777, !tbaa !2129
  %cmp168 = icmp ne i64 %164, %165, !dbg !5778
  br i1 %cmp168, label %if.then.170, label %if.end.172, !dbg !5779

if.then.170:                                      ; preds = %if.else.165
  %166 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !5780, !tbaa !2119
  %167 = load i64, i64* %needed, align 8, !dbg !5782, !tbaa !2129
  %168 = load i64, i64* %slicelen, align 8, !dbg !5783, !tbaa !2129
  %call171 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %166, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.18, i32 0, i32 0), i64 %167, i64 %168), !dbg !5784
  store i32 -1, i32* %retval, !dbg !5785
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.183, !dbg !5785

if.end.172:                                       ; preds = %if.else.165
  %169 = load i64, i64* %start, align 8, !dbg !5786, !tbaa !2129
  store i64 %169, i64* %cur167, align 8, !dbg !5788, !tbaa !2129
  store i64 0, i64* %i166, align 8, !dbg !5789, !tbaa !2129
  br label %for.cond.173, !dbg !5790

for.cond.173:                                     ; preds = %for.inc.179, %if.end.172
  %170 = load i64, i64* %i166, align 8, !dbg !5791, !tbaa !2129
  %171 = load i64, i64* %slicelen, align 8, !dbg !5795, !tbaa !2129
  %cmp174 = icmp slt i64 %170, %171, !dbg !5796
  br i1 %cmp174, label %for.body.176, label %for.end.182, !dbg !5797

for.body.176:                                     ; preds = %for.cond.173
  %172 = load i64, i64* %i166, align 8, !dbg !5798, !tbaa !2129
  %173 = load i8*, i8** %bytes, align 8, !dbg !5799, !tbaa !2119
  %arrayidx177 = getelementptr i8, i8* %173, i64 %172, !dbg !5799
  %174 = load i8, i8* %arrayidx177, align 1, !dbg !5799, !tbaa !2233
  %175 = load i64, i64* %cur167, align 8, !dbg !5800, !tbaa !2129
  %176 = load i8*, i8** %buf, align 8, !dbg !5801, !tbaa !2119
  %arrayidx178 = getelementptr i8, i8* %176, i64 %175, !dbg !5801
  store i8 %174, i8* %arrayidx178, align 1, !dbg !5802, !tbaa !2233
  br label %for.inc.179, !dbg !5801

for.inc.179:                                      ; preds = %for.body.176
  %177 = load i64, i64* %step, align 8, !dbg !5803, !tbaa !2129
  %178 = load i64, i64* %cur167, align 8, !dbg !5804, !tbaa !2129
  %add180 = add i64 %178, %177, !dbg !5804
  store i64 %add180, i64* %cur167, align 8, !dbg !5804, !tbaa !2129
  %179 = load i64, i64* %i166, align 8, !dbg !5805, !tbaa !2129
  %inc181 = add i64 %179, 1, !dbg !5805
  store i64 %inc181, i64* %i166, align 8, !dbg !5805, !tbaa !2129
  br label %for.cond.173, !dbg !5806

for.end.182:                                      ; preds = %for.cond.173
  store i32 0, i32* %retval, !dbg !5807
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.183, !dbg !5807

cleanup.183:                                      ; preds = %for.end.182, %if.then.170
  %180 = bitcast i64* %cur167 to i8*, !dbg !5808
  call void @llvm.lifetime.end(i64 8, i8* %180) #3, !dbg !5808
  %181 = bitcast i64* %i166 to i8*, !dbg !5808
  call void @llvm.lifetime.end(i64 8, i8* %181) #3, !dbg !5808
  br label %cleanup.185

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.185

cleanup.185:                                      ; preds = %NewDefault, %cleanup.183, %cleanup.163, %if.then.104, %cleanup.77, %if.else.39, %if.then.37
  %182 = bitcast i8** %bytes to i8*, !dbg !5809
  call void @llvm.lifetime.end(i64 8, i8* %182) #3, !dbg !5809
  %183 = bitcast i8** %buf to i8*, !dbg !5809
  call void @llvm.lifetime.end(i64 8, i8* %183) #3, !dbg !5809
  %184 = bitcast i64* %needed to i8*, !dbg !5809
  call void @llvm.lifetime.end(i64 8, i8* %184) #3, !dbg !5809
  %185 = bitcast i64* %slicelen to i8*, !dbg !5809
  call void @llvm.lifetime.end(i64 8, i8* %185) #3, !dbg !5809
  %186 = bitcast i64* %step to i8*, !dbg !5809
  call void @llvm.lifetime.end(i64 8, i8* %186) #3, !dbg !5809
  %187 = bitcast i64* %stop to i8*, !dbg !5809
  call void @llvm.lifetime.end(i64 8, i8* %187) #3, !dbg !5809
  %188 = bitcast i64* %start to i8*, !dbg !5809
  call void @llvm.lifetime.end(i64 8, i8* %188) #3, !dbg !5809
  %189 = load i32, i32* %retval, !dbg !5809
  ret i32 %189, !dbg !5809
}

declare i32 @PySlice_GetIndicesEx(%struct._object*, i64, i64*, i64*, i64*, i64*) #2

declare i32 @PyType_IsSubtype(%struct._typeobject*, %struct._typeobject*) #2

declare i32 @PyNumber_Check(%struct._object*) #2

declare i32 @PyErr_WarnEx(%struct._object*, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @bytearray_getbuffer(%struct.PyByteArrayObject* %obj, %struct.bufferinfo* %view, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %obj.addr = alloca %struct.PyByteArrayObject*, align 8
  %view.addr = alloca %struct.bufferinfo*, align 8
  %flags.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %obj, %struct.PyByteArrayObject** %obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %obj.addr, metadata !778, metadata !2123), !dbg !5810
  store %struct.bufferinfo* %view, %struct.bufferinfo** %view.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %view.addr, metadata !779, metadata !2123), !dbg !5811
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !2676
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !780, metadata !2123), !dbg !5812
  %0 = bitcast i32* %ret to i8*, !dbg !5813
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !5813
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !781, metadata !2123), !dbg !5814
  %1 = bitcast i8** %ptr to i8*, !dbg !5815
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !5815
  call void @llvm.dbg.declare(metadata i8** %ptr, metadata !782, metadata !2123), !dbg !5816
  %2 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !5817, !tbaa !2119
  %cmp = icmp eq %struct.bufferinfo* %2, null, !dbg !5819
  br i1 %cmp, label %if.then, label %if.end, !dbg !5820

if.then:                                          ; preds = %entry
  %3 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj.addr, align 8, !dbg !5821, !tbaa !2119
  %ob_exports = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %3, i32 0, i32 4, !dbg !5823
  %4 = load i32, i32* %ob_exports, align 4, !dbg !5824, !tbaa !2254
  %inc = add i32 %4, 1, !dbg !5824
  store i32 %inc, i32* %ob_exports, align 4, !dbg !5824, !tbaa !2254
  store i32 0, i32* %retval, !dbg !5825
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5825

if.end:                                           ; preds = %entry
  %5 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj.addr, align 8, !dbg !5826, !tbaa !2119
  %6 = bitcast %struct.PyByteArrayObject* %5 to %struct.PyVarObject*, !dbg !5827
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1, !dbg !5828
  %7 = load i64, i64* %ob_size, align 8, !dbg !5828, !tbaa !2239
  %tobool = icmp ne i64 %7, 0, !dbg !5829
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5829

cond.true:                                        ; preds = %if.end
  %8 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj.addr, align 8, !dbg !5830, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %8, i32 0, i32 3, !dbg !5832
  %9 = load i8*, i8** %ob_start, align 8, !dbg !5832, !tbaa !2250
  br label %cond.end, !dbg !5829

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5833

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %9, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !5829
  store i8* %cond, i8** %ptr, align 8, !dbg !5835, !tbaa !2119
  %10 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !5838, !tbaa !2119
  %11 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj.addr, align 8, !dbg !5839, !tbaa !2119
  %12 = bitcast %struct.PyByteArrayObject* %11 to %struct._object*, !dbg !5840
  %13 = load i8*, i8** %ptr, align 8, !dbg !5841, !tbaa !2119
  %14 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj.addr, align 8, !dbg !5842, !tbaa !2119
  %15 = bitcast %struct.PyByteArrayObject* %14 to %struct.PyVarObject*, !dbg !5843
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %15, i32 0, i32 1, !dbg !5844
  %16 = load i64, i64* %ob_size1, align 8, !dbg !5844, !tbaa !2239
  %17 = load i32, i32* %flags.addr, align 4, !dbg !5845, !tbaa !2676
  %call = call i32 @PyBuffer_FillInfo(%struct.bufferinfo* %10, %struct._object* %12, i8* %13, i64 %16, i32 0, i32 %17), !dbg !5846
  store i32 %call, i32* %ret, align 4, !dbg !5847, !tbaa !2676
  %18 = load i32, i32* %ret, align 4, !dbg !5848, !tbaa !2676
  %cmp2 = icmp sge i32 %18, 0, !dbg !5850
  br i1 %cmp2, label %if.then.3, label %if.end.6, !dbg !5851

if.then.3:                                        ; preds = %cond.end
  %19 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj.addr, align 8, !dbg !5852, !tbaa !2119
  %ob_exports4 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %19, i32 0, i32 4, !dbg !5854
  %20 = load i32, i32* %ob_exports4, align 4, !dbg !5855, !tbaa !2254
  %inc5 = add i32 %20, 1, !dbg !5855
  store i32 %inc5, i32* %ob_exports4, align 4, !dbg !5855, !tbaa !2254
  br label %if.end.6, !dbg !5856

if.end.6:                                         ; preds = %if.then.3, %cond.end
  %21 = load i32, i32* %ret, align 4, !dbg !5857, !tbaa !2676
  store i32 %21, i32* %retval, !dbg !5858
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5858

cleanup:                                          ; preds = %if.end.6, %if.then
  %22 = bitcast i8** %ptr to i8*, !dbg !5859
  call void @llvm.lifetime.end(i64 8, i8* %22) #3, !dbg !5859
  %23 = bitcast i32* %ret to i8*, !dbg !5859
  call void @llvm.lifetime.end(i64 4, i8* %23) #3, !dbg !5859
  %24 = load i32, i32* %retval, !dbg !5859
  ret i32 %24, !dbg !5859
}

; Function Attrs: nounwind uwtable
define internal void @bytearray_releasebuffer(%struct.PyByteArrayObject* %obj, %struct.bufferinfo* %view) #0 {
entry:
  %obj.addr = alloca %struct.PyByteArrayObject*, align 8
  %view.addr = alloca %struct.bufferinfo*, align 8
  store %struct.PyByteArrayObject* %obj, %struct.PyByteArrayObject** %obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %obj.addr, metadata !787, metadata !2123), !dbg !5860
  store %struct.bufferinfo* %view, %struct.bufferinfo** %view.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %view.addr, metadata !788, metadata !2123), !dbg !5861
  %0 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %obj.addr, align 8, !dbg !5862, !tbaa !2119
  %ob_exports = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %0, i32 0, i32 4, !dbg !5863
  %1 = load i32, i32* %ob_exports, align 4, !dbg !5864, !tbaa !2254
  %dec = add i32 %1, -1, !dbg !5864
  store i32 %dec, i32* %ob_exports, align 4, !dbg !5864, !tbaa !2254
  ret void, !dbg !5865
}

declare i32 @PyBuffer_FillInfo(%struct.bufferinfo*, %struct._object*, i8*, i64, i32, i32) #2

declare i32 @PyObject_IsInstance(%struct._object*, %struct._object*) #2

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8*, i8*, i64) #5

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_alloc(%struct.PyByteArrayObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !803, metadata !2123), !dbg !5866
  %0 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5867, !tbaa !2119
  %ob_alloc = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %0, i32 0, i32 1, !dbg !5868
  %1 = load i64, i64* %ob_alloc, align 8, !dbg !5868, !tbaa !2244
  %call = call %struct._object* @PyLong_FromSsize_t(i64 %1), !dbg !5869
  ret %struct._object* %call, !dbg !5870
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_reduce(%struct.PyByteArrayObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !806, metadata !2123), !dbg !5871
  %0 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5872, !tbaa !2119
  %call = call %struct._object* @_common_reduce(%struct.PyByteArrayObject* %0, i32 2), !dbg !5873
  ret %struct._object* %call, !dbg !5874
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_reduce_ex(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %proto = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !820, metadata !2123), !dbg !5875
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !821, metadata !2123), !dbg !5876
  %0 = bitcast i32* %proto to i8*, !dbg !5877
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !5877
  call void @llvm.dbg.declare(metadata i32* %proto, metadata !822, metadata !2123), !dbg !5878
  store i32 0, i32* %proto, align 4, !dbg !5878, !tbaa !2676
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5879, !tbaa !2119
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.76, i32 0, i32 0), i32* %proto), !dbg !5881
  %tobool = icmp ne i32 %call, 0, !dbg !5881
  br i1 %tobool, label %if.end, label %if.then, !dbg !5882

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5883
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5883

if.end:                                           ; preds = %entry
  %2 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5884, !tbaa !2119
  %3 = load i32, i32* %proto, align 4, !dbg !5885, !tbaa !2676
  %call1 = call %struct._object* @_common_reduce(%struct.PyByteArrayObject* %2, i32 %3), !dbg !5886
  store %struct._object* %call1, %struct._object** %retval, !dbg !5887
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5887

cleanup:                                          ; preds = %if.end, %if.then
  %4 = bitcast i32* %proto to i8*, !dbg !5888
  call void @llvm.lifetime.end(i64 4, i8* %4) #3, !dbg !5888
  %5 = load %struct._object*, %struct._object** %retval, !dbg !5888
  ret %struct._object* %5, !dbg !5888
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_sizeof(%struct.PyByteArrayObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %res = alloca i64, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !825, metadata !2123), !dbg !5889
  %0 = bitcast i64* %res to i8*, !dbg !5890
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !5890
  call void @llvm.dbg.declare(metadata i64* %res, metadata !826, metadata !2123), !dbg !5891
  %1 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5892, !tbaa !2119
  %ob_alloc = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %1, i32 0, i32 1, !dbg !5893
  %2 = load i64, i64* %ob_alloc, align 8, !dbg !5893, !tbaa !2244
  %mul = mul i64 %2, 1, !dbg !5894
  %add = add i64 56, %mul, !dbg !5895
  store i64 %add, i64* %res, align 8, !dbg !5896, !tbaa !2129
  %3 = load i64, i64* %res, align 8, !dbg !5897, !tbaa !2129
  %call = call %struct._object* @PyLong_FromSsize_t(i64 %3), !dbg !5898
  %4 = bitcast i64* %res to i8*, !dbg !5899
  call void @llvm.lifetime.end(i64 8, i8* %4) #3, !dbg !5899
  ret %struct._object* %call, !dbg !5900
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_append(%struct.PyByteArrayObject* %self, %struct._object* %arg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %value = alloca i32, align 4
  %n = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !829, metadata !2123), !dbg !5901
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !830, metadata !2123), !dbg !5902
  %0 = bitcast i32* %value to i8*, !dbg !5903
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !5903
  call void @llvm.dbg.declare(metadata i32* %value, metadata !831, metadata !2123), !dbg !5904
  %1 = bitcast i64* %n to i8*, !dbg !5905
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !5905
  call void @llvm.dbg.declare(metadata i64* %n, metadata !832, metadata !2123), !dbg !5906
  %2 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5907, !tbaa !2119
  %3 = bitcast %struct.PyByteArrayObject* %2 to %struct.PyVarObject*, !dbg !5908
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1, !dbg !5909
  %4 = load i64, i64* %ob_size, align 8, !dbg !5909, !tbaa !2239
  store i64 %4, i64* %n, align 8, !dbg !5906, !tbaa !2129
  %5 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !5910, !tbaa !2119
  %call = call i32 @_getbytevalue(%struct._object* %5, i32* %value), !dbg !5912
  %tobool = icmp ne i32 %call, 0, !dbg !5912
  br i1 %tobool, label %if.end, label %if.then, !dbg !5913

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5914
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5914

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %n, align 8, !dbg !5915, !tbaa !2129
  %cmp = icmp eq i64 %6, 9223372036854775807, !dbg !5917
  br i1 %cmp, label %if.then.1, label %if.end.2, !dbg !5918

if.then.1:                                        ; preds = %if.end
  %7 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !5919, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %7, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.77, i32 0, i32 0)), !dbg !5921
  store %struct._object* null, %struct._object** %retval, !dbg !5922
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5922

if.end.2:                                         ; preds = %if.end
  %8 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5923, !tbaa !2119
  %9 = bitcast %struct.PyByteArrayObject* %8 to %struct._object*, !dbg !5925
  %10 = load i64, i64* %n, align 8, !dbg !5926, !tbaa !2129
  %add = add i64 %10, 1, !dbg !5927
  %call3 = call i32 @PyByteArray_Resize(%struct._object* %9, i64 %add), !dbg !5928
  %cmp4 = icmp slt i32 %call3, 0, !dbg !5929
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !5930

if.then.5:                                        ; preds = %if.end.2
  store %struct._object* null, %struct._object** %retval, !dbg !5931
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5931

if.end.6:                                         ; preds = %if.end.2
  %11 = load i32, i32* %value, align 4, !dbg !5932, !tbaa !2676
  %conv = trunc i32 %11 to i8, !dbg !5932
  %12 = load i64, i64* %n, align 8, !dbg !5933, !tbaa !2129
  %13 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5934, !tbaa !2119
  %14 = bitcast %struct.PyByteArrayObject* %13 to %struct.PyVarObject*, !dbg !5935
  %ob_size7 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %14, i32 0, i32 1, !dbg !5936
  %15 = load i64, i64* %ob_size7, align 8, !dbg !5936, !tbaa !2239
  %tobool8 = icmp ne i64 %15, 0, !dbg !5937
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !5937

cond.true:                                        ; preds = %if.end.6
  %16 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !5938, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %16, i32 0, i32 3, !dbg !5940
  %17 = load i8*, i8** %ob_start, align 8, !dbg !5940, !tbaa !2250
  br label %cond.end, !dbg !5937

cond.false:                                       ; preds = %if.end.6
  br label %cond.end, !dbg !5941

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %17, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !5937
  %arrayidx = getelementptr i8, i8* %cond, i64 %12, !dbg !5943
  store i8 %conv, i8* %arrayidx, align 1, !dbg !5946, !tbaa !2233
  %18 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5947, !tbaa !2195
  %inc = add i64 %18, 1, !dbg !5947
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !5947, !tbaa !2195
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !5948
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5948

cleanup:                                          ; preds = %cond.end, %if.then.5, %if.then.1, %if.then
  %19 = bitcast i64* %n to i8*, !dbg !5949
  call void @llvm.lifetime.end(i64 8, i8* %19) #3, !dbg !5949
  %20 = bitcast i32* %value to i8*, !dbg !5949
  call void @llvm.lifetime.end(i64 4, i8* %20) #3, !dbg !5949
  %21 = load %struct._object*, %struct._object** %retval, !dbg !5949
  ret %struct._object* %21, !dbg !5949
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_capitalize(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %newobj = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !836, metadata !2123), !dbg !5950
  %0 = bitcast %struct._object** %newobj to i8*, !dbg !5951
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !5951
  call void @llvm.dbg.declare(metadata %struct._object** %newobj, metadata !837, metadata !2123), !dbg !5952
  %1 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !5953, !tbaa !2119
  %2 = bitcast %struct._object* %1 to %struct.PyVarObject*, !dbg !5954
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1, !dbg !5955
  %3 = load i64, i64* %ob_size, align 8, !dbg !5955, !tbaa !2239
  %call = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %3), !dbg !5956
  store %struct._object* %call, %struct._object** %newobj, align 8, !dbg !5957, !tbaa !2119
  %4 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !5958, !tbaa !2119
  %tobool = icmp ne %struct._object* %4, null, !dbg !5958
  br i1 %tobool, label %if.end, label %if.then, !dbg !5960

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5961
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5961

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !5962, !tbaa !2119
  %6 = bitcast %struct._object* %5 to %struct.PyVarObject*, !dbg !5963
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1, !dbg !5964
  %7 = load i64, i64* %ob_size1, align 8, !dbg !5964, !tbaa !2239
  %tobool2 = icmp ne i64 %7, 0, !dbg !5965
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !5965

cond.true:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !5966, !tbaa !2119
  %9 = bitcast %struct._object* %8 to %struct.PyByteArrayObject*, !dbg !5968
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %9, i32 0, i32 3, !dbg !5969
  %10 = load i8*, i8** %ob_start, align 8, !dbg !5969, !tbaa !2250
  br label %cond.end, !dbg !5965

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5970

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !5965
  %11 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !5972, !tbaa !2119
  %12 = bitcast %struct._object* %11 to %struct.PyVarObject*, !dbg !5975
  %ob_size3 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %12, i32 0, i32 1, !dbg !5976
  %13 = load i64, i64* %ob_size3, align 8, !dbg !5976, !tbaa !2239
  %tobool4 = icmp ne i64 %13, 0, !dbg !5977
  br i1 %tobool4, label %cond.true.5, label %cond.false.7, !dbg !5977

cond.true.5:                                      ; preds = %cond.end
  %14 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !5978, !tbaa !2119
  %15 = bitcast %struct._object* %14 to %struct.PyByteArrayObject*, !dbg !5980
  %ob_start6 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %15, i32 0, i32 3, !dbg !5981
  %16 = load i8*, i8** %ob_start6, align 8, !dbg !5981, !tbaa !2250
  br label %cond.end.8, !dbg !5977

cond.false.7:                                     ; preds = %cond.end
  br label %cond.end.8, !dbg !5982

cond.end.8:                                       ; preds = %cond.false.7, %cond.true.5
  %cond9 = phi i8* [ %16, %cond.true.5 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.7 ], !dbg !5977
  %17 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !5984, !tbaa !2119
  %18 = bitcast %struct._object* %17 to %struct.PyVarObject*, !dbg !5985
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1, !dbg !5986
  %19 = load i64, i64* %ob_size10, align 8, !dbg !5986, !tbaa !2239
  call void @_Py_bytes_capitalize(i8* %cond, i8* %cond9, i64 %19), !dbg !5987
  %20 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !5988, !tbaa !2119
  store %struct._object* %20, %struct._object** %retval, !dbg !5989
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5989

cleanup:                                          ; preds = %cond.end.8, %if.then
  %21 = bitcast %struct._object** %newobj to i8*, !dbg !5990
  call void @llvm.lifetime.end(i64 8, i8* %21) #3, !dbg !5990
  %22 = load %struct._object*, %struct._object** %retval, !dbg !5990
  ret %struct._object* %22, !dbg !5990
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_center(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %marg = alloca i64, align 8
  %left = alloca i64, align 8
  %width = alloca i64, align 8
  %fillchar = alloca i8, align 1
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !841, metadata !2123), !dbg !5991
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !842, metadata !2123), !dbg !5992
  %0 = bitcast i64* %marg to i8*, !dbg !5993
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !5993
  call void @llvm.dbg.declare(metadata i64* %marg, metadata !843, metadata !2123), !dbg !5994
  %1 = bitcast i64* %left to i8*, !dbg !5993
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !5993
  call void @llvm.dbg.declare(metadata i64* %left, metadata !844, metadata !2123), !dbg !5995
  %2 = bitcast i64* %width to i8*, !dbg !5996
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !5996
  call void @llvm.dbg.declare(metadata i64* %width, metadata !845, metadata !2123), !dbg !5997
  call void @llvm.lifetime.start(i64 1, i8* %fillchar) #3, !dbg !5998
  call void @llvm.dbg.declare(metadata i8* %fillchar, metadata !846, metadata !2123), !dbg !5999
  store i8 32, i8* %fillchar, align 1, !dbg !5999, !tbaa !2233
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6000, !tbaa !2119
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.78, i32 0, i32 0), i64* %width, i8* %fillchar), !dbg !6002
  %tobool = icmp ne i32 %call, 0, !dbg !6002
  br i1 %tobool, label %if.end, label %if.then, !dbg !6003

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6004
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6004

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6005, !tbaa !2119
  %5 = bitcast %struct._object* %4 to %struct.PyVarObject*, !dbg !6007
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %5, i32 0, i32 1, !dbg !6008
  %6 = load i64, i64* %ob_size, align 8, !dbg !6008, !tbaa !2239
  %7 = load i64, i64* %width, align 8, !dbg !6009, !tbaa !2129
  %cmp = icmp sge i64 %6, %7, !dbg !6010
  br i1 %cmp, label %land.lhs.true, label %if.end.7, !dbg !6011

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6012, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1, !dbg !6014
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6014, !tbaa !2203
  %cmp1 = icmp eq %struct._typeobject* %9, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyByteArray_Type to %struct._typeobject*), !dbg !6015
  br i1 %cmp1, label %if.then.2, label %if.end.7, !dbg !6016

if.then.2:                                        ; preds = %land.lhs.true
  %10 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6017, !tbaa !2119
  %11 = bitcast %struct._object* %10 to %struct.PyVarObject*, !dbg !6019
  %ob_size3 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %11, i32 0, i32 1, !dbg !6020
  %12 = load i64, i64* %ob_size3, align 8, !dbg !6020, !tbaa !2239
  %tobool4 = icmp ne i64 %12, 0, !dbg !6021
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !6021

cond.true:                                        ; preds = %if.then.2
  %13 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6022, !tbaa !2119
  %14 = bitcast %struct._object* %13 to %struct.PyByteArrayObject*, !dbg !6024
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %14, i32 0, i32 3, !dbg !6025
  %15 = load i8*, i8** %ob_start, align 8, !dbg !6025, !tbaa !2250
  br label %cond.end, !dbg !6021

cond.false:                                       ; preds = %if.then.2
  br label %cond.end, !dbg !6026

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %15, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !6021
  %16 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6028, !tbaa !2119
  %17 = bitcast %struct._object* %16 to %struct.PyVarObject*, !dbg !6031
  %ob_size5 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %17, i32 0, i32 1, !dbg !6032
  %18 = load i64, i64* %ob_size5, align 8, !dbg !6032, !tbaa !2239
  %call6 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %cond, i64 %18), !dbg !6033
  store %struct._object* %call6, %struct._object** %retval, !dbg !6034
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6034

if.end.7:                                         ; preds = %land.lhs.true, %if.end
  %19 = load i64, i64* %width, align 8, !dbg !6035, !tbaa !2129
  %20 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6036, !tbaa !2119
  %21 = bitcast %struct._object* %20 to %struct.PyVarObject*, !dbg !6037
  %ob_size8 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %21, i32 0, i32 1, !dbg !6038
  %22 = load i64, i64* %ob_size8, align 8, !dbg !6038, !tbaa !2239
  %sub = sub i64 %19, %22, !dbg !6039
  store i64 %sub, i64* %marg, align 8, !dbg !6040, !tbaa !2129
  %23 = load i64, i64* %marg, align 8, !dbg !6041, !tbaa !2129
  %div = sdiv i64 %23, 2, !dbg !6042
  %24 = load i64, i64* %marg, align 8, !dbg !6043, !tbaa !2129
  %25 = load i64, i64* %width, align 8, !dbg !6044, !tbaa !2129
  %and = and i64 %24, %25, !dbg !6045
  %and9 = and i64 %and, 1, !dbg !6046
  %add = add i64 %div, %and9, !dbg !6047
  store i64 %add, i64* %left, align 8, !dbg !6048, !tbaa !2129
  %26 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6049, !tbaa !2119
  %27 = load i64, i64* %left, align 8, !dbg !6050, !tbaa !2129
  %28 = load i64, i64* %marg, align 8, !dbg !6051, !tbaa !2129
  %29 = load i64, i64* %left, align 8, !dbg !6052, !tbaa !2129
  %sub10 = sub i64 %28, %29, !dbg !6053
  %30 = load i8, i8* %fillchar, align 1, !dbg !6054, !tbaa !2233
  %call11 = call %struct._object* @pad(%struct._object* %26, i64 %27, i64 %sub10, i8 signext %30), !dbg !6055
  store %struct._object* %call11, %struct._object** %retval, !dbg !6056
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6056

cleanup:                                          ; preds = %if.end.7, %cond.end, %if.then
  call void @llvm.lifetime.end(i64 1, i8* %fillchar) #3, !dbg !6057
  %31 = bitcast i64* %width to i8*, !dbg !6057
  call void @llvm.lifetime.end(i64 8, i8* %31) #3, !dbg !6057
  %32 = bitcast i64* %left to i8*, !dbg !6057
  call void @llvm.lifetime.end(i64 8, i8* %32) #3, !dbg !6057
  %33 = bitcast i64* %marg to i8*, !dbg !6057
  call void @llvm.lifetime.end(i64 8, i8* %33) #3, !dbg !6057
  %34 = load %struct._object*, %struct._object** %retval, !dbg !6057
  ret %struct._object* %34, !dbg !6057
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_clear(%struct.PyByteArrayObject* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !858, metadata !2123), !dbg !6058
  %0 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6059, !tbaa !2119
  %1 = bitcast %struct.PyByteArrayObject* %0 to %struct._object*, !dbg !6061
  %call = call i32 @PyByteArray_Resize(%struct._object* %1, i64 0), !dbg !6062
  %cmp = icmp slt i32 %call, 0, !dbg !6063
  br i1 %cmp, label %if.then, label %if.end, !dbg !6064

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6065
  br label %return, !dbg !6065

if.end:                                           ; preds = %entry
  %2 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6066, !tbaa !2195
  %inc = add i64 %2, 1, !dbg !6066
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6066, !tbaa !2195
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !6067
  br label %return, !dbg !6067

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct._object*, %struct._object** %retval, !dbg !6068
  ret %struct._object* %3, !dbg !6068
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_copy(%struct.PyByteArrayObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !861, metadata !2123), !dbg !6069
  %0 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6070, !tbaa !2119
  %1 = bitcast %struct.PyByteArrayObject* %0 to %struct._object*, !dbg !6071
  %2 = bitcast %struct._object* %1 to %struct.PyVarObject*, !dbg !6072
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1, !dbg !6073
  %3 = load i64, i64* %ob_size, align 8, !dbg !6073, !tbaa !2239
  %tobool = icmp ne i64 %3, 0, !dbg !6074
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6074

cond.true:                                        ; preds = %entry
  %4 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6075, !tbaa !2119
  %5 = bitcast %struct.PyByteArrayObject* %4 to %struct._object*, !dbg !6077
  %6 = bitcast %struct._object* %5 to %struct.PyByteArrayObject*, !dbg !6078
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %6, i32 0, i32 3, !dbg !6079
  %7 = load i8*, i8** %ob_start, align 8, !dbg !6079, !tbaa !2250
  br label %cond.end, !dbg !6074

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6080

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %7, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !6074
  %8 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6082, !tbaa !2119
  %9 = bitcast %struct.PyByteArrayObject* %8 to %struct.PyVarObject*, !dbg !6083
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %9, i32 0, i32 1, !dbg !6084
  %10 = load i64, i64* %ob_size1, align 8, !dbg !6084, !tbaa !2239
  %call = call %struct._object* @PyByteArray_FromStringAndSize(i8* %cond, i64 %10), !dbg !6085
  ret %struct._object* %call, !dbg !6086
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_count(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %sub_obj = alloca %struct._object*, align 8
  %str = alloca i8*, align 8
  %sub = alloca i8*, align 8
  %sub_len = alloca i64, align 8
  %byte = alloca i8, align 1
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %vsub = alloca %struct.bufferinfo, align 8
  %count_obj = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !864, metadata !2123), !dbg !6087
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !865, metadata !2123), !dbg !6088
  %0 = bitcast %struct._object** %sub_obj to i8*, !dbg !6089
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !6089
  call void @llvm.dbg.declare(metadata %struct._object** %sub_obj, metadata !866, metadata !2123), !dbg !6090
  %1 = bitcast i8** %str to i8*, !dbg !6091
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !6091
  call void @llvm.dbg.declare(metadata i8** %str, metadata !867, metadata !2123), !dbg !6092
  %2 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6093, !tbaa !2119
  %3 = bitcast %struct.PyByteArrayObject* %2 to %struct.PyVarObject*, !dbg !6094
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1, !dbg !6095
  %4 = load i64, i64* %ob_size, align 8, !dbg !6095, !tbaa !2239
  %tobool = icmp ne i64 %4, 0, !dbg !6096
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6096

cond.true:                                        ; preds = %entry
  %5 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6097, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %5, i32 0, i32 3, !dbg !6099
  %6 = load i8*, i8** %ob_start, align 8, !dbg !6099, !tbaa !2250
  br label %cond.end, !dbg !6096

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6100

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %6, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !6096
  store i8* %cond, i8** %str, align 8, !dbg !6102, !tbaa !2119
  %7 = bitcast i8** %sub to i8*, !dbg !6091
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !6091
  call void @llvm.dbg.declare(metadata i8** %sub, metadata !868, metadata !2123), !dbg !6105
  %8 = bitcast i64* %sub_len to i8*, !dbg !6106
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !6106
  call void @llvm.dbg.declare(metadata i64* %sub_len, metadata !869, metadata !2123), !dbg !6107
  call void @llvm.lifetime.start(i64 1, i8* %byte) #3, !dbg !6108
  call void @llvm.dbg.declare(metadata i8* %byte, metadata !870, metadata !2123), !dbg !6109
  %9 = bitcast i64* %start to i8*, !dbg !6110
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !6110
  call void @llvm.dbg.declare(metadata i64* %start, metadata !871, metadata !2123), !dbg !6111
  store i64 0, i64* %start, align 8, !dbg !6111, !tbaa !2129
  %10 = bitcast i64* %end to i8*, !dbg !6110
  call void @llvm.lifetime.start(i64 8, i8* %10) #3, !dbg !6110
  call void @llvm.dbg.declare(metadata i64* %end, metadata !872, metadata !2123), !dbg !6112
  store i64 9223372036854775807, i64* %end, align 8, !dbg !6112, !tbaa !2129
  %11 = bitcast %struct.bufferinfo* %vsub to i8*, !dbg !6113
  call void @llvm.lifetime.start(i64 80, i8* %11) #3, !dbg !6113
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %vsub, metadata !873, metadata !2123), !dbg !6114
  %12 = bitcast %struct._object** %count_obj to i8*, !dbg !6115
  call void @llvm.lifetime.start(i64 8, i8* %12) #3, !dbg !6115
  call void @llvm.dbg.declare(metadata %struct._object** %count_obj, metadata !874, metadata !2123), !dbg !6116
  %13 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6117, !tbaa !2119
  %call = call i32 @stringlib_parse_args_finds_byte(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30, i32 0, i32 0), %struct._object* %13, %struct._object** %sub_obj, i8* %byte, i64* %start, i64* %end), !dbg !6119
  %tobool1 = icmp ne i32 %call, 0, !dbg !6119
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6120

if.then:                                          ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval, !dbg !6121
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6121

if.end:                                           ; preds = %cond.end
  %14 = load %struct._object*, %struct._object** %sub_obj, align 8, !dbg !6122, !tbaa !2119
  %tobool2 = icmp ne %struct._object* %14, null, !dbg !6122
  br i1 %tobool2, label %if.then.3, label %if.else, !dbg !6124

if.then.3:                                        ; preds = %if.end
  %15 = load %struct._object*, %struct._object** %sub_obj, align 8, !dbg !6125, !tbaa !2119
  %call4 = call i64 @_getbuffer(%struct._object* %15, %struct.bufferinfo* %vsub), !dbg !6128
  %cmp = icmp slt i64 %call4, 0, !dbg !6129
  br i1 %cmp, label %if.then.5, label %if.end.6, !dbg !6130

if.then.5:                                        ; preds = %if.then.3
  store %struct._object* null, %struct._object** %retval, !dbg !6131
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6131

if.end.6:                                         ; preds = %if.then.3
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vsub, i32 0, i32 0, !dbg !6132
  %16 = load i8*, i8** %buf, align 8, !dbg !6132, !tbaa !2529
  store i8* %16, i8** %sub, align 8, !dbg !6133, !tbaa !2119
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vsub, i32 0, i32 2, !dbg !6134
  %17 = load i64, i64* %len, align 8, !dbg !6134, !tbaa !2482
  store i64 %17, i64* %sub_len, align 8, !dbg !6135, !tbaa !2129
  br label %if.end.7, !dbg !6136

if.else:                                          ; preds = %if.end
  store i8* %byte, i8** %sub, align 8, !dbg !6137, !tbaa !2119
  store i64 1, i64* %sub_len, align 8, !dbg !6139, !tbaa !2129
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.end.6
  %18 = load i64, i64* %end, align 8, !dbg !6140, !tbaa !2129
  %19 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6142, !tbaa !2119
  %20 = bitcast %struct.PyByteArrayObject* %19 to %struct.PyVarObject*, !dbg !6143
  %ob_size8 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %20, i32 0, i32 1, !dbg !6144
  %21 = load i64, i64* %ob_size8, align 8, !dbg !6144, !tbaa !2239
  %cmp9 = icmp sgt i64 %18, %21, !dbg !6145
  br i1 %cmp9, label %if.then.10, label %if.else.12, !dbg !6146

if.then.10:                                       ; preds = %if.end.7
  %22 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6147, !tbaa !2119
  %23 = bitcast %struct.PyByteArrayObject* %22 to %struct.PyVarObject*, !dbg !6149
  %ob_size11 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %23, i32 0, i32 1, !dbg !6150
  %24 = load i64, i64* %ob_size11, align 8, !dbg !6150, !tbaa !2239
  store i64 %24, i64* %end, align 8, !dbg !6151, !tbaa !2129
  br label %if.end.20, !dbg !6152

if.else.12:                                       ; preds = %if.end.7
  %25 = load i64, i64* %end, align 8, !dbg !6153, !tbaa !2129
  %cmp13 = icmp slt i64 %25, 0, !dbg !6156
  br i1 %cmp13, label %if.then.14, label %if.end.19, !dbg !6157

if.then.14:                                       ; preds = %if.else.12
  %26 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6158, !tbaa !2119
  %27 = bitcast %struct.PyByteArrayObject* %26 to %struct.PyVarObject*, !dbg !6161
  %ob_size15 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %27, i32 0, i32 1, !dbg !6162
  %28 = load i64, i64* %ob_size15, align 8, !dbg !6162, !tbaa !2239
  %29 = load i64, i64* %end, align 8, !dbg !6163, !tbaa !2129
  %add = add i64 %29, %28, !dbg !6163
  store i64 %add, i64* %end, align 8, !dbg !6163, !tbaa !2129
  %30 = load i64, i64* %end, align 8, !dbg !6164, !tbaa !2129
  %cmp16 = icmp slt i64 %30, 0, !dbg !6166
  br i1 %cmp16, label %if.then.17, label %if.end.18, !dbg !6167

if.then.17:                                       ; preds = %if.then.14
  store i64 0, i64* %end, align 8, !dbg !6168, !tbaa !2129
  br label %if.end.18, !dbg !6170

if.end.18:                                        ; preds = %if.then.17, %if.then.14
  br label %if.end.19, !dbg !6171

if.end.19:                                        ; preds = %if.end.18, %if.else.12
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %if.then.10
  %31 = load i64, i64* %start, align 8, !dbg !6174, !tbaa !2129
  %cmp21 = icmp slt i64 %31, 0, !dbg !6177
  br i1 %cmp21, label %if.then.22, label %if.end.28, !dbg !6178

if.then.22:                                       ; preds = %if.end.20
  %32 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6179, !tbaa !2119
  %33 = bitcast %struct.PyByteArrayObject* %32 to %struct.PyVarObject*, !dbg !6182
  %ob_size23 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %33, i32 0, i32 1, !dbg !6183
  %34 = load i64, i64* %ob_size23, align 8, !dbg !6183, !tbaa !2239
  %35 = load i64, i64* %start, align 8, !dbg !6184, !tbaa !2129
  %add24 = add i64 %35, %34, !dbg !6184
  store i64 %add24, i64* %start, align 8, !dbg !6184, !tbaa !2129
  %36 = load i64, i64* %start, align 8, !dbg !6185, !tbaa !2129
  %cmp25 = icmp slt i64 %36, 0, !dbg !6187
  br i1 %cmp25, label %if.then.26, label %if.end.27, !dbg !6188

if.then.26:                                       ; preds = %if.then.22
  store i64 0, i64* %start, align 8, !dbg !6189, !tbaa !2129
  br label %if.end.27, !dbg !6191

if.end.27:                                        ; preds = %if.then.26, %if.then.22
  br label %if.end.28, !dbg !6192

if.end.28:                                        ; preds = %if.end.27, %if.end.20
  %37 = load i8*, i8** %str, align 8, !dbg !6195, !tbaa !2119
  %38 = load i64, i64* %start, align 8, !dbg !6196, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %37, i64 %38, !dbg !6197
  %39 = load i64, i64* %end, align 8, !dbg !6198, !tbaa !2129
  %40 = load i64, i64* %start, align 8, !dbg !6199, !tbaa !2129
  %sub29 = sub i64 %39, %40, !dbg !6200
  %41 = load i8*, i8** %sub, align 8, !dbg !6201, !tbaa !2119
  %42 = load i64, i64* %sub_len, align 8, !dbg !6202, !tbaa !2129
  %call30 = call i64 @stringlib_count(i8* %add.ptr, i64 %sub29, i8* %41, i64 %42, i64 9223372036854775807), !dbg !6203
  %call31 = call %struct._object* @PyLong_FromSsize_t(i64 %call30), !dbg !6204
  store %struct._object* %call31, %struct._object** %count_obj, align 8, !dbg !6205, !tbaa !2119
  %43 = load %struct._object*, %struct._object** %sub_obj, align 8, !dbg !6206, !tbaa !2119
  %tobool32 = icmp ne %struct._object* %43, null, !dbg !6206
  br i1 %tobool32, label %if.then.33, label %if.end.34, !dbg !6208

if.then.33:                                       ; preds = %if.end.28
  call void @PyBuffer_Release(%struct.bufferinfo* %vsub), !dbg !6209
  br label %if.end.34, !dbg !6209

if.end.34:                                        ; preds = %if.then.33, %if.end.28
  %44 = load %struct._object*, %struct._object** %count_obj, align 8, !dbg !6210, !tbaa !2119
  store %struct._object* %44, %struct._object** %retval, !dbg !6211
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6211

cleanup:                                          ; preds = %if.end.34, %if.then.5, %if.then
  %45 = bitcast %struct._object** %count_obj to i8*, !dbg !6212
  call void @llvm.lifetime.end(i64 8, i8* %45) #3, !dbg !6212
  %46 = bitcast %struct.bufferinfo* %vsub to i8*, !dbg !6212
  call void @llvm.lifetime.end(i64 80, i8* %46) #3, !dbg !6212
  %47 = bitcast i64* %end to i8*, !dbg !6212
  call void @llvm.lifetime.end(i64 8, i8* %47) #3, !dbg !6212
  %48 = bitcast i64* %start to i8*, !dbg !6212
  call void @llvm.lifetime.end(i64 8, i8* %48) #3, !dbg !6212
  call void @llvm.lifetime.end(i64 1, i8* %byte) #3, !dbg !6212
  %49 = bitcast i64* %sub_len to i8*, !dbg !6212
  call void @llvm.lifetime.end(i64 8, i8* %49) #3, !dbg !6212
  %50 = bitcast i8** %sub to i8*, !dbg !6212
  call void @llvm.lifetime.end(i64 8, i8* %50) #3, !dbg !6212
  %51 = bitcast i8** %str to i8*, !dbg !6212
  call void @llvm.lifetime.end(i64 8, i8* %51) #3, !dbg !6212
  %52 = bitcast %struct._object** %sub_obj to i8*, !dbg !6212
  call void @llvm.lifetime.end(i64 8, i8* %52) #3, !dbg !6212
  %53 = load %struct._object*, %struct._object** %retval, !dbg !6212
  ret %struct._object* %53, !dbg !6212
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_decode(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %encoding = alloca i8*, align 8
  %errors = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !918, metadata !2123), !dbg !6213
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !919, metadata !2123), !dbg !6214
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !920, metadata !2123), !dbg !6215
  %0 = bitcast i8** %encoding to i8*, !dbg !6216
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !6216
  call void @llvm.dbg.declare(metadata i8** %encoding, metadata !921, metadata !2123), !dbg !6217
  store i8* null, i8** %encoding, align 8, !dbg !6217, !tbaa !2119
  %1 = bitcast i8** %errors to i8*, !dbg !6218
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !6218
  call void @llvm.dbg.declare(metadata i8** %errors, metadata !922, metadata !2123), !dbg !6219
  store i8* null, i8** %errors, align 8, !dbg !6219, !tbaa !2119
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6220, !tbaa !2119
  %3 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !6222, !tbaa !2119
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %2, %struct._object* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.81, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @bytearray_decode.kwlist, i32 0, i32 0), i8** %encoding, i8** %errors), !dbg !6223
  %tobool = icmp ne i32 %call, 0, !dbg !6223
  br i1 %tobool, label %if.end, label %if.then, !dbg !6224

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6225
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6225

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %encoding, align 8, !dbg !6226, !tbaa !2119
  %cmp = icmp eq i8* %4, null, !dbg !6228
  br i1 %cmp, label %if.then.1, label %if.end.3, !dbg !6229

if.then.1:                                        ; preds = %if.end
  %call2 = call i8* @PyUnicode_GetDefaultEncoding(), !dbg !6230
  store i8* %call2, i8** %encoding, align 8, !dbg !6231, !tbaa !2119
  br label %if.end.3, !dbg !6232

if.end.3:                                         ; preds = %if.then.1, %if.end
  %5 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6233, !tbaa !2119
  %6 = load i8*, i8** %encoding, align 8, !dbg !6234, !tbaa !2119
  %7 = load i8*, i8** %errors, align 8, !dbg !6235, !tbaa !2119
  %call4 = call %struct._object* @PyUnicode_FromEncodedObject(%struct._object* %5, i8* %6, i8* %7), !dbg !6236
  store %struct._object* %call4, %struct._object** %retval, !dbg !6237
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6237

cleanup:                                          ; preds = %if.end.3, %if.then
  %8 = bitcast i8** %errors to i8*, !dbg !6238
  call void @llvm.lifetime.end(i64 8, i8* %8) #3, !dbg !6238
  %9 = bitcast i8** %encoding to i8*, !dbg !6238
  call void @llvm.lifetime.end(i64 8, i8* %9) #3, !dbg !6238
  %10 = load %struct._object*, %struct._object** %retval, !dbg !6238
  ret %struct._object* %10, !dbg !6238
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_endswith(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %subobj = alloca %struct._object*, align 8
  %result = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %i = alloca i64, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !925, metadata !2123), !dbg !6239
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !926, metadata !2123), !dbg !6240
  %0 = bitcast i64* %start to i8*, !dbg !6241
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !6241
  call void @llvm.dbg.declare(metadata i64* %start, metadata !927, metadata !2123), !dbg !6242
  store i64 0, i64* %start, align 8, !dbg !6242, !tbaa !2129
  %1 = bitcast i64* %end to i8*, !dbg !6243
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !6243
  call void @llvm.dbg.declare(metadata i64* %end, metadata !928, metadata !2123), !dbg !6244
  store i64 9223372036854775807, i64* %end, align 8, !dbg !6244, !tbaa !2129
  %2 = bitcast %struct._object** %subobj to i8*, !dbg !6245
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !6245
  call void @llvm.dbg.declare(metadata %struct._object** %subobj, metadata !929, metadata !2123), !dbg !6246
  %3 = bitcast i32* %result to i8*, !dbg !6247
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !6247
  call void @llvm.dbg.declare(metadata i32* %result, metadata !930, metadata !2123), !dbg !6248
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6249, !tbaa !2119
  %call = call i32 @stringlib_parse_args_finds(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32, i32 0, i32 0), %struct._object* %4, %struct._object** %subobj, i64* %start, i64* %end), !dbg !6251
  %tobool = icmp ne i32 %call, 0, !dbg !6251
  br i1 %tobool, label %if.end, label %if.then, !dbg !6252

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6253
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.24, !dbg !6253

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !6254, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !6255
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6255, !tbaa !2203
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 19, !dbg !6256
  %7 = load i64, i64* %tp_flags, align 8, !dbg !6256, !tbaa !3199
  %and = and i64 %7, 67108864, !dbg !6257
  %cmp = icmp ne i64 %and, 0, !dbg !6258
  br i1 %cmp, label %if.then.1, label %if.end.12, !dbg !6259

if.then.1:                                        ; preds = %if.end
  %8 = bitcast i64* %i to i8*, !dbg !6260
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !6260
  call void @llvm.dbg.declare(metadata i64* %i, metadata !931, metadata !2123), !dbg !6261
  store i64 0, i64* %i, align 8, !dbg !6262, !tbaa !2129
  br label %for.cond, !dbg !6264

for.cond:                                         ; preds = %for.inc, %if.then.1
  %9 = load i64, i64* %i, align 8, !dbg !6265, !tbaa !2129
  %10 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !6269, !tbaa !2119
  %11 = bitcast %struct._object* %10 to %struct.PyVarObject*, !dbg !6270
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %11, i32 0, i32 1, !dbg !6271
  %12 = load i64, i64* %ob_size, align 8, !dbg !6271, !tbaa !2239
  %cmp2 = icmp slt i64 %9, %12, !dbg !6272
  br i1 %cmp2, label %for.body, label %for.end, !dbg !6273

for.body:                                         ; preds = %for.cond
  %13 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6274, !tbaa !2119
  %14 = load i64, i64* %i, align 8, !dbg !6276, !tbaa !2129
  %15 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !6277, !tbaa !2119
  %16 = bitcast %struct._object* %15 to %struct.PyTupleObject*, !dbg !6278
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %16, i32 0, i32 1, !dbg !6279
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %14, !dbg !6280
  %17 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !6280, !tbaa !2119
  %18 = load i64, i64* %start, align 8, !dbg !6281, !tbaa !2129
  %19 = load i64, i64* %end, align 8, !dbg !6282, !tbaa !2129
  %call3 = call i32 @_bytearray_tailmatch(%struct.PyByteArrayObject* %13, %struct._object* %17, i64 %18, i64 %19, i32 1), !dbg !6283
  store i32 %call3, i32* %result, align 4, !dbg !6284, !tbaa !2676
  %20 = load i32, i32* %result, align 4, !dbg !6285, !tbaa !2676
  %cmp4 = icmp eq i32 %20, -1, !dbg !6287
  br i1 %cmp4, label %if.then.5, label %if.else, !dbg !6288

if.then.5:                                        ; preds = %for.body
  store %struct._object* null, %struct._object** %retval, !dbg !6289
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6289

if.else:                                          ; preds = %for.body
  %21 = load i32, i32* %result, align 4, !dbg !6290, !tbaa !2676
  %tobool6 = icmp ne i32 %21, 0, !dbg !6290
  br i1 %tobool6, label %if.then.7, label %if.end.8, !dbg !6292

if.then.7:                                        ; preds = %if.else
  %22 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !6293, !tbaa !2195
  %inc = add i64 %22, 1, !dbg !6293
  store i64 %inc, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !6293, !tbaa !2195
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object** %retval, !dbg !6295
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6295

if.end.8:                                         ; preds = %if.else
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8
  br label %for.inc, !dbg !6296

for.inc:                                          ; preds = %if.end.9
  %23 = load i64, i64* %i, align 8, !dbg !6297, !tbaa !2129
  %inc10 = add i64 %23, 1, !dbg !6297
  store i64 %inc10, i64* %i, align 8, !dbg !6297, !tbaa !2129
  br label %for.cond, !dbg !6298

for.end:                                          ; preds = %for.cond
  %24 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !6299, !tbaa !2195
  %inc11 = add i64 %24, 1, !dbg !6299
  store i64 %inc11, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !6299, !tbaa !2195
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0), %struct._object** %retval, !dbg !6300
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6300

cleanup:                                          ; preds = %for.end, %if.then.7, %if.then.5
  %25 = bitcast i64* %i to i8*, !dbg !6301
  call void @llvm.lifetime.end(i64 8, i8* %25) #3, !dbg !6301
  br label %cleanup.24

if.end.12:                                        ; preds = %if.end
  %26 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6302, !tbaa !2119
  %27 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !6303, !tbaa !2119
  %28 = load i64, i64* %start, align 8, !dbg !6304, !tbaa !2129
  %29 = load i64, i64* %end, align 8, !dbg !6305, !tbaa !2129
  %call13 = call i32 @_bytearray_tailmatch(%struct.PyByteArrayObject* %26, %struct._object* %27, i64 %28, i64 %29, i32 1), !dbg !6306
  store i32 %call13, i32* %result, align 4, !dbg !6307, !tbaa !2676
  %30 = load i32, i32* %result, align 4, !dbg !6308, !tbaa !2676
  %cmp14 = icmp eq i32 %30, -1, !dbg !6310
  br i1 %cmp14, label %if.then.15, label %if.else.22, !dbg !6311

if.then.15:                                       ; preds = %if.end.12
  %31 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !6312, !tbaa !2119
  %call16 = call i32 @PyErr_ExceptionMatches(%struct._object* %31), !dbg !6315
  %tobool17 = icmp ne i32 %call16, 0, !dbg !6315
  br i1 %tobool17, label %if.then.18, label %if.end.21, !dbg !6316

if.then.18:                                       ; preds = %if.then.15
  %32 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !6317, !tbaa !2119
  %33 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !6318, !tbaa !2119
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1, !dbg !6319
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8, !dbg !6319, !tbaa !2203
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 1, !dbg !6320
  %35 = load i8*, i8** %tp_name, align 8, !dbg !6320, !tbaa !2500
  %call20 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %32, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.82, i32 0, i32 0), i8* %35), !dbg !6321
  br label %if.end.21, !dbg !6321

if.end.21:                                        ; preds = %if.then.18, %if.then.15
  store %struct._object* null, %struct._object** %retval, !dbg !6322
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.24, !dbg !6322

if.else.22:                                       ; preds = %if.end.12
  %36 = load i32, i32* %result, align 4, !dbg !6323, !tbaa !2676
  %conv = sext i32 %36 to i64, !dbg !6323
  %call23 = call %struct._object* @PyBool_FromLong(i64 %conv), !dbg !6324
  store %struct._object* %call23, %struct._object** %retval, !dbg !6325
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.24, !dbg !6325

cleanup.24:                                       ; preds = %if.else.22, %if.end.21, %cleanup, %if.then
  %37 = bitcast i32* %result to i8*, !dbg !6326
  call void @llvm.lifetime.end(i64 4, i8* %37) #3, !dbg !6326
  %38 = bitcast %struct._object** %subobj to i8*, !dbg !6326
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !6326
  %39 = bitcast i64* %end to i8*, !dbg !6326
  call void @llvm.lifetime.end(i64 8, i8* %39) #3, !dbg !6326
  %40 = bitcast i64* %start to i8*, !dbg !6326
  call void @llvm.lifetime.end(i64 8, i8* %40) #3, !dbg !6326
  %41 = load %struct._object*, %struct._object** %retval, !dbg !6326
  ret %struct._object* %41, !dbg !6326
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_expandtabs(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %e = alloca i8*, align 8
  %p = alloca i8*, align 8
  %q = alloca i8*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %u = alloca %struct._object*, align 8
  %tabsize = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %incr = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !949, metadata !2123), !dbg !6327
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !950, metadata !2123), !dbg !6328
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %kwds.addr, metadata !951, metadata !2123), !dbg !6329
  %0 = bitcast i8** %e to i8*, !dbg !6330
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !6330
  call void @llvm.dbg.declare(metadata i8** %e, metadata !952, metadata !2123), !dbg !6331
  %1 = bitcast i8** %p to i8*, !dbg !6330
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !6330
  call void @llvm.dbg.declare(metadata i8** %p, metadata !953, metadata !2123), !dbg !6332
  %2 = bitcast i8** %q to i8*, !dbg !6333
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !6333
  call void @llvm.dbg.declare(metadata i8** %q, metadata !954, metadata !2123), !dbg !6334
  %3 = bitcast i64* %i to i8*, !dbg !6335
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !6335
  call void @llvm.dbg.declare(metadata i64* %i, metadata !955, metadata !2123), !dbg !6336
  %4 = bitcast i64* %j to i8*, !dbg !6335
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !6335
  call void @llvm.dbg.declare(metadata i64* %j, metadata !956, metadata !2123), !dbg !6337
  %5 = bitcast %struct._object** %u to i8*, !dbg !6338
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !6338
  call void @llvm.dbg.declare(metadata %struct._object** %u, metadata !957, metadata !2123), !dbg !6339
  %6 = bitcast i32* %tabsize to i8*, !dbg !6340
  call void @llvm.lifetime.start(i64 4, i8* %6) #3, !dbg !6340
  call void @llvm.dbg.declare(metadata i32* %tabsize, metadata !958, metadata !2123), !dbg !6341
  store i32 8, i32* %tabsize, align 4, !dbg !6341, !tbaa !2676
  %7 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6342, !tbaa !2119
  %8 = load %struct._object*, %struct._object** %kwds.addr, align 8, !dbg !6344, !tbaa !2119
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %7, %struct._object* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.84, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @stringlib_expandtabs.kwlist, i32 0, i32 0), i32* %tabsize), !dbg !6345
  %tobool = icmp ne i32 %call, 0, !dbg !6345
  br i1 %tobool, label %if.end, label %if.then, !dbg !6346

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6347
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.102, !dbg !6347

if.end:                                           ; preds = %entry
  store i64 0, i64* %j, align 8, !dbg !6348, !tbaa !2129
  store i64 0, i64* %i, align 8, !dbg !6349, !tbaa !2129
  %9 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6350, !tbaa !2119
  %10 = bitcast %struct._object* %9 to %struct.PyVarObject*, !dbg !6351
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %10, i32 0, i32 1, !dbg !6352
  %11 = load i64, i64* %ob_size, align 8, !dbg !6352, !tbaa !2239
  %tobool1 = icmp ne i64 %11, 0, !dbg !6353
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6353

cond.true:                                        ; preds = %if.end
  %12 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6354, !tbaa !2119
  %13 = bitcast %struct._object* %12 to %struct.PyByteArrayObject*, !dbg !6356
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %13, i32 0, i32 3, !dbg !6357
  %14 = load i8*, i8** %ob_start, align 8, !dbg !6357, !tbaa !2250
  br label %cond.end, !dbg !6353

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !6358

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %14, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !6353
  %15 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6360, !tbaa !2119
  %16 = bitcast %struct._object* %15 to %struct.PyVarObject*, !dbg !6363
  %ob_size2 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %16, i32 0, i32 1, !dbg !6364
  %17 = load i64, i64* %ob_size2, align 8, !dbg !6364, !tbaa !2239
  %add.ptr = getelementptr i8, i8* %cond, i64 %17, !dbg !6365
  store i8* %add.ptr, i8** %e, align 8, !dbg !6366, !tbaa !2119
  %18 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6367, !tbaa !2119
  %19 = bitcast %struct._object* %18 to %struct.PyVarObject*, !dbg !6368
  %ob_size3 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %19, i32 0, i32 1, !dbg !6369
  %20 = load i64, i64* %ob_size3, align 8, !dbg !6369, !tbaa !2239
  %tobool4 = icmp ne i64 %20, 0, !dbg !6370
  br i1 %tobool4, label %cond.true.5, label %cond.false.7, !dbg !6370

cond.true.5:                                      ; preds = %cond.end
  %21 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6371, !tbaa !2119
  %22 = bitcast %struct._object* %21 to %struct.PyByteArrayObject*, !dbg !6373
  %ob_start6 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %22, i32 0, i32 3, !dbg !6374
  %23 = load i8*, i8** %ob_start6, align 8, !dbg !6374, !tbaa !2250
  br label %cond.end.8, !dbg !6370

cond.false.7:                                     ; preds = %cond.end
  br label %cond.end.8, !dbg !6375

cond.end.8:                                       ; preds = %cond.false.7, %cond.true.5
  %cond9 = phi i8* [ %23, %cond.true.5 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.7 ], !dbg !6370
  store i8* %cond9, i8** %p, align 8, !dbg !6377, !tbaa !2119
  br label %for.cond, !dbg !6380

for.cond:                                         ; preds = %for.inc, %cond.end.8
  %24 = load i8*, i8** %p, align 8, !dbg !6381, !tbaa !2119
  %25 = load i8*, i8** %e, align 8, !dbg !6384, !tbaa !2119
  %cmp = icmp ult i8* %24, %25, !dbg !6385
  br i1 %cmp, label %for.body, label %for.end, !dbg !6386

for.body:                                         ; preds = %for.cond
  %26 = load i8*, i8** %p, align 8, !dbg !6387, !tbaa !2119
  %27 = load i8, i8* %26, align 1, !dbg !6388, !tbaa !2233
  %conv = sext i8 %27 to i32, !dbg !6388
  %cmp10 = icmp eq i32 %conv, 9, !dbg !6389
  br i1 %cmp10, label %if.then.12, label %if.else, !dbg !6390

if.then.12:                                       ; preds = %for.body
  %28 = load i32, i32* %tabsize, align 4, !dbg !6391, !tbaa !2676
  %cmp13 = icmp sgt i32 %28, 0, !dbg !6392
  br i1 %cmp13, label %if.then.15, label %if.end.23, !dbg !6393

if.then.15:                                       ; preds = %if.then.12
  %29 = bitcast i64* %incr to i8*, !dbg !6394
  call void @llvm.lifetime.start(i64 8, i8* %29) #3, !dbg !6394
  call void @llvm.dbg.declare(metadata i64* %incr, metadata !959, metadata !2123), !dbg !6395
  %30 = load i32, i32* %tabsize, align 4, !dbg !6396, !tbaa !2676
  %conv16 = sext i32 %30 to i64, !dbg !6396
  %31 = load i64, i64* %j, align 8, !dbg !6397, !tbaa !2129
  %32 = load i32, i32* %tabsize, align 4, !dbg !6398, !tbaa !2676
  %conv17 = sext i32 %32 to i64, !dbg !6398
  %rem = srem i64 %31, %conv17, !dbg !6399
  %sub = sub i64 %conv16, %rem, !dbg !6400
  store i64 %sub, i64* %incr, align 8, !dbg !6395, !tbaa !2129
  %33 = load i64, i64* %j, align 8, !dbg !6401, !tbaa !2129
  %34 = load i64, i64* %incr, align 8, !dbg !6403, !tbaa !2129
  %sub18 = sub i64 9223372036854775807, %34, !dbg !6404
  %cmp19 = icmp sgt i64 %33, %sub18, !dbg !6405
  br i1 %cmp19, label %if.then.21, label %if.end.22, !dbg !6406

if.then.21:                                       ; preds = %if.then.15
  store i32 5, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6407

if.end.22:                                        ; preds = %if.then.15
  %35 = load i64, i64* %incr, align 8, !dbg !6408, !tbaa !2129
  %36 = load i64, i64* %j, align 8, !dbg !6409, !tbaa !2129
  %add = add i64 %36, %35, !dbg !6409
  store i64 %add, i64* %j, align 8, !dbg !6409, !tbaa !2129
  store i32 0, i32* %cleanup.dest.slot, !dbg !6410
  br label %cleanup, !dbg !6410

cleanup:                                          ; preds = %if.end.22, %if.then.21
  %37 = bitcast i64* %incr to i8*, !dbg !6411
  call void @llvm.lifetime.end(i64 8, i8* %37) #3, !dbg !6411
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock

NodeBlock:                                        ; preds = %cleanup
  %Pivot = icmp slt i32 %cleanup.dest, 5
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %cleanup.dest, 5
  br i1 %SwitchLeaf2, label %overflow, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.23, !dbg !6413

if.end.23:                                        ; preds = %cleanup.cont, %if.then.12
  br label %if.end.42, !dbg !6414

if.else:                                          ; preds = %for.body
  %38 = load i64, i64* %j, align 8, !dbg !6415, !tbaa !2129
  %cmp24 = icmp sgt i64 %38, 9223372036854775806, !dbg !6418
  br i1 %cmp24, label %if.then.26, label %if.end.27, !dbg !6419

if.then.26:                                       ; preds = %if.else
  br label %overflow, !dbg !6420

if.end.27:                                        ; preds = %if.else
  %39 = load i64, i64* %j, align 8, !dbg !6421, !tbaa !2129
  %inc = add i64 %39, 1, !dbg !6421
  store i64 %inc, i64* %j, align 8, !dbg !6421, !tbaa !2129
  %40 = load i8*, i8** %p, align 8, !dbg !6422, !tbaa !2119
  %41 = load i8, i8* %40, align 1, !dbg !6424, !tbaa !2233
  %conv28 = sext i8 %41 to i32, !dbg !6424
  %cmp29 = icmp eq i32 %conv28, 10, !dbg !6425
  br i1 %cmp29, label %if.then.34, label %lor.lhs.false, !dbg !6426

lor.lhs.false:                                    ; preds = %if.end.27
  %42 = load i8*, i8** %p, align 8, !dbg !6427, !tbaa !2119
  %43 = load i8, i8* %42, align 1, !dbg !6429, !tbaa !2233
  %conv31 = sext i8 %43 to i32, !dbg !6429
  %cmp32 = icmp eq i32 %conv31, 13, !dbg !6430
  br i1 %cmp32, label %if.then.34, label %if.end.41, !dbg !6431

if.then.34:                                       ; preds = %lor.lhs.false, %if.end.27
  %44 = load i64, i64* %i, align 8, !dbg !6432, !tbaa !2129
  %45 = load i64, i64* %j, align 8, !dbg !6435, !tbaa !2129
  %sub35 = sub i64 9223372036854775807, %45, !dbg !6436
  %cmp36 = icmp sgt i64 %44, %sub35, !dbg !6437
  br i1 %cmp36, label %if.then.38, label %if.end.39, !dbg !6438

if.then.38:                                       ; preds = %if.then.34
  br label %overflow, !dbg !6439

if.end.39:                                        ; preds = %if.then.34
  %46 = load i64, i64* %j, align 8, !dbg !6440, !tbaa !2129
  %47 = load i64, i64* %i, align 8, !dbg !6441, !tbaa !2129
  %add40 = add i64 %47, %46, !dbg !6441
  store i64 %add40, i64* %i, align 8, !dbg !6441, !tbaa !2129
  store i64 0, i64* %j, align 8, !dbg !6442, !tbaa !2129
  br label %if.end.41, !dbg !6443

if.end.41:                                        ; preds = %if.end.39, %lor.lhs.false
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %if.end.23
  br label %for.inc, !dbg !6444

for.inc:                                          ; preds = %if.end.42
  %48 = load i8*, i8** %p, align 8, !dbg !6445, !tbaa !2119
  %incdec.ptr = getelementptr i8, i8* %48, i32 1, !dbg !6445
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !6445, !tbaa !2119
  br label %for.cond, !dbg !6446

for.end:                                          ; preds = %for.cond
  %49 = load i64, i64* %i, align 8, !dbg !6447, !tbaa !2129
  %50 = load i64, i64* %j, align 8, !dbg !6449, !tbaa !2129
  %sub43 = sub i64 9223372036854775807, %50, !dbg !6450
  %cmp44 = icmp sgt i64 %49, %sub43, !dbg !6451
  br i1 %cmp44, label %if.then.46, label %if.end.47, !dbg !6452

if.then.46:                                       ; preds = %for.end
  br label %overflow, !dbg !6453

if.end.47:                                        ; preds = %for.end
  %51 = load i64, i64* %i, align 8, !dbg !6454, !tbaa !2129
  %52 = load i64, i64* %j, align 8, !dbg !6455, !tbaa !2129
  %add48 = add i64 %51, %52, !dbg !6456
  %call49 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %add48), !dbg !6457
  store %struct._object* %call49, %struct._object** %u, align 8, !dbg !6458, !tbaa !2119
  %53 = load %struct._object*, %struct._object** %u, align 8, !dbg !6459, !tbaa !2119
  %tobool50 = icmp ne %struct._object* %53, null, !dbg !6459
  br i1 %tobool50, label %if.end.52, label %if.then.51, !dbg !6461

if.then.51:                                       ; preds = %if.end.47
  store %struct._object* null, %struct._object** %retval, !dbg !6462
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.102, !dbg !6462

if.end.52:                                        ; preds = %if.end.47
  store i64 0, i64* %j, align 8, !dbg !6463, !tbaa !2129
  %54 = load %struct._object*, %struct._object** %u, align 8, !dbg !6464, !tbaa !2119
  %55 = bitcast %struct._object* %54 to %struct.PyVarObject*, !dbg !6465
  %ob_size53 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %55, i32 0, i32 1, !dbg !6466
  %56 = load i64, i64* %ob_size53, align 8, !dbg !6466, !tbaa !2239
  %tobool54 = icmp ne i64 %56, 0, !dbg !6467
  br i1 %tobool54, label %cond.true.55, label %cond.false.57, !dbg !6467

cond.true.55:                                     ; preds = %if.end.52
  %57 = load %struct._object*, %struct._object** %u, align 8, !dbg !6468, !tbaa !2119
  %58 = bitcast %struct._object* %57 to %struct.PyByteArrayObject*, !dbg !6469
  %ob_start56 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %58, i32 0, i32 3, !dbg !6470
  %59 = load i8*, i8** %ob_start56, align 8, !dbg !6470, !tbaa !2250
  br label %cond.end.58, !dbg !6467

cond.false.57:                                    ; preds = %if.end.52
  br label %cond.end.58, !dbg !6471

cond.end.58:                                      ; preds = %cond.false.57, %cond.true.55
  %cond59 = phi i8* [ %59, %cond.true.55 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.57 ], !dbg !6467
  store i8* %cond59, i8** %q, align 8, !dbg !6472, !tbaa !2119
  %60 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6473, !tbaa !2119
  %61 = bitcast %struct._object* %60 to %struct.PyVarObject*, !dbg !6475
  %ob_size60 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %61, i32 0, i32 1, !dbg !6476
  %62 = load i64, i64* %ob_size60, align 8, !dbg !6476, !tbaa !2239
  %tobool61 = icmp ne i64 %62, 0, !dbg !6477
  br i1 %tobool61, label %cond.true.62, label %cond.false.64, !dbg !6477

cond.true.62:                                     ; preds = %cond.end.58
  %63 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !6478, !tbaa !2119
  %64 = bitcast %struct._object* %63 to %struct.PyByteArrayObject*, !dbg !6480
  %ob_start63 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %64, i32 0, i32 3, !dbg !6481
  %65 = load i8*, i8** %ob_start63, align 8, !dbg !6481, !tbaa !2250
  br label %cond.end.65, !dbg !6477

cond.false.64:                                    ; preds = %cond.end.58
  br label %cond.end.65, !dbg !6482

cond.end.65:                                      ; preds = %cond.false.64, %cond.true.62
  %cond66 = phi i8* [ %65, %cond.true.62 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.64 ], !dbg !6477
  store i8* %cond66, i8** %p, align 8, !dbg !6484, !tbaa !2119
  br label %for.cond.67, !dbg !6487

for.cond.67:                                      ; preds = %for.inc.99, %cond.end.65
  %66 = load i8*, i8** %p, align 8, !dbg !6488, !tbaa !2119
  %67 = load i8*, i8** %e, align 8, !dbg !6492, !tbaa !2119
  %cmp68 = icmp ult i8* %66, %67, !dbg !6493
  br i1 %cmp68, label %for.body.70, label %for.end.101, !dbg !6494

for.body.70:                                      ; preds = %for.cond.67
  %68 = load i8*, i8** %p, align 8, !dbg !6495, !tbaa !2119
  %69 = load i8, i8* %68, align 1, !dbg !6498, !tbaa !2233
  %conv71 = sext i8 %69 to i32, !dbg !6498
  %cmp72 = icmp eq i32 %conv71, 9, !dbg !6499
  br i1 %cmp72, label %if.then.74, label %if.else.86, !dbg !6500

if.then.74:                                       ; preds = %for.body.70
  %70 = load i32, i32* %tabsize, align 4, !dbg !6501, !tbaa !2676
  %cmp75 = icmp sgt i32 %70, 0, !dbg !6504
  br i1 %cmp75, label %if.then.77, label %if.end.85, !dbg !6505

if.then.77:                                       ; preds = %if.then.74
  %71 = load i32, i32* %tabsize, align 4, !dbg !6506, !tbaa !2676
  %conv78 = sext i32 %71 to i64, !dbg !6506
  %72 = load i64, i64* %j, align 8, !dbg !6508, !tbaa !2129
  %73 = load i32, i32* %tabsize, align 4, !dbg !6509, !tbaa !2676
  %conv79 = sext i32 %73 to i64, !dbg !6509
  %rem80 = srem i64 %72, %conv79, !dbg !6510
  %sub81 = sub i64 %conv78, %rem80, !dbg !6511
  store i64 %sub81, i64* %i, align 8, !dbg !6512, !tbaa !2129
  %74 = load i64, i64* %i, align 8, !dbg !6513, !tbaa !2129
  %75 = load i64, i64* %j, align 8, !dbg !6514, !tbaa !2129
  %add82 = add i64 %75, %74, !dbg !6514
  store i64 %add82, i64* %j, align 8, !dbg !6514, !tbaa !2129
  br label %while.cond, !dbg !6515

while.cond:                                       ; preds = %while.body, %if.then.77
  %76 = load i64, i64* %i, align 8, !dbg !6516, !tbaa !2129
  %dec = add i64 %76, -1, !dbg !6516
  store i64 %dec, i64* %i, align 8, !dbg !6516, !tbaa !2129
  %tobool83 = icmp ne i64 %76, 0, !dbg !6515
  br i1 %tobool83, label %while.body, label %while.end, !dbg !6515

while.body:                                       ; preds = %while.cond
  %77 = load i8*, i8** %q, align 8, !dbg !6519, !tbaa !2119
  %incdec.ptr84 = getelementptr i8, i8* %77, i32 1, !dbg !6519
  store i8* %incdec.ptr84, i8** %q, align 8, !dbg !6519, !tbaa !2119
  store i8 32, i8* %77, align 1, !dbg !6520, !tbaa !2233
  br label %while.cond, !dbg !6515

while.end:                                        ; preds = %while.cond
  br label %if.end.85, !dbg !6521

if.end.85:                                        ; preds = %while.end, %if.then.74
  br label %if.end.98, !dbg !6522

if.else.86:                                       ; preds = %for.body.70
  %78 = load i64, i64* %j, align 8, !dbg !6523, !tbaa !2129
  %inc87 = add i64 %78, 1, !dbg !6523
  store i64 %inc87, i64* %j, align 8, !dbg !6523, !tbaa !2129
  %79 = load i8*, i8** %p, align 8, !dbg !6525, !tbaa !2119
  %80 = load i8, i8* %79, align 1, !dbg !6526, !tbaa !2233
  %81 = load i8*, i8** %q, align 8, !dbg !6527, !tbaa !2119
  %incdec.ptr88 = getelementptr i8, i8* %81, i32 1, !dbg !6527
  store i8* %incdec.ptr88, i8** %q, align 8, !dbg !6527, !tbaa !2119
  store i8 %80, i8* %81, align 1, !dbg !6528, !tbaa !2233
  %82 = load i8*, i8** %p, align 8, !dbg !6529, !tbaa !2119
  %83 = load i8, i8* %82, align 1, !dbg !6531, !tbaa !2233
  %conv89 = sext i8 %83 to i32, !dbg !6531
  %cmp90 = icmp eq i32 %conv89, 10, !dbg !6532
  br i1 %cmp90, label %if.then.96, label %lor.lhs.false.92, !dbg !6533

lor.lhs.false.92:                                 ; preds = %if.else.86
  %84 = load i8*, i8** %p, align 8, !dbg !6534, !tbaa !2119
  %85 = load i8, i8* %84, align 1, !dbg !6536, !tbaa !2233
  %conv93 = sext i8 %85 to i32, !dbg !6536
  %cmp94 = icmp eq i32 %conv93, 13, !dbg !6537
  br i1 %cmp94, label %if.then.96, label %if.end.97, !dbg !6538

if.then.96:                                       ; preds = %lor.lhs.false.92, %if.else.86
  store i64 0, i64* %j, align 8, !dbg !6539, !tbaa !2129
  br label %if.end.97, !dbg !6540

if.end.97:                                        ; preds = %if.then.96, %lor.lhs.false.92
  br label %if.end.98

if.end.98:                                        ; preds = %if.end.97, %if.end.85
  br label %for.inc.99, !dbg !6541

for.inc.99:                                       ; preds = %if.end.98
  %86 = load i8*, i8** %p, align 8, !dbg !6542, !tbaa !2119
  %incdec.ptr100 = getelementptr i8, i8* %86, i32 1, !dbg !6542
  store i8* %incdec.ptr100, i8** %p, align 8, !dbg !6542, !tbaa !2119
  br label %for.cond.67, !dbg !6543

for.end.101:                                      ; preds = %for.cond.67
  %87 = load %struct._object*, %struct._object** %u, align 8, !dbg !6544, !tbaa !2119
  store %struct._object* %87, %struct._object** %retval, !dbg !6545
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.102, !dbg !6545

overflow:                                         ; preds = %LeafBlock.1, %if.then.46, %if.then.38, %if.then.26
  %88 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !6546, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %88, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.85, i32 0, i32 0)), !dbg !6547
  store %struct._object* null, %struct._object** %retval, !dbg !6548
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.102, !dbg !6548

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %cleanup.102

cleanup.102:                                      ; preds = %NewDefault, %overflow, %for.end.101, %if.then.51, %if.then
  %89 = bitcast i32* %tabsize to i8*, !dbg !6549
  call void @llvm.lifetime.end(i64 4, i8* %89) #3, !dbg !6549
  %90 = bitcast %struct._object** %u to i8*, !dbg !6549
  call void @llvm.lifetime.end(i64 8, i8* %90) #3, !dbg !6549
  %91 = bitcast i64* %j to i8*, !dbg !6549
  call void @llvm.lifetime.end(i64 8, i8* %91) #3, !dbg !6549
  %92 = bitcast i64* %i to i8*, !dbg !6549
  call void @llvm.lifetime.end(i64 8, i8* %92) #3, !dbg !6549
  %93 = bitcast i8** %q to i8*, !dbg !6549
  call void @llvm.lifetime.end(i64 8, i8* %93) #3, !dbg !6549
  %94 = bitcast i8** %p to i8*, !dbg !6549
  call void @llvm.lifetime.end(i64 8, i8* %94) #3, !dbg !6549
  %95 = bitcast i8** %e to i8*, !dbg !6549
  call void @llvm.lifetime.end(i64 8, i8* %95) #3, !dbg !6549
  %96 = load %struct._object*, %struct._object** %retval, !dbg !6549
  ret %struct._object* %96, !dbg !6549
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_extend(%struct.PyByteArrayObject* %self, %struct._object* %arg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %it = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %bytearray_obj = alloca %struct._object*, align 8
  %buf_size = alloca i64, align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %buf = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  %_py_decref_tmp43 = alloca %struct._object*, align 8
  %_py_decref_tmp55 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  %_py_decref_tmp102 = alloca %struct._object*, align 8
  %_py_decref_tmp115 = alloca %struct._object*, align 8
  %_py_decref_tmp137 = alloca %struct._object*, align 8
  %_py_decref_tmp154 = alloca %struct._object*, align 8
  %_py_decref_tmp174 = alloca %struct._object*, align 8
  %_py_decref_tmp188 = alloca %struct._object*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !969, metadata !2123), !dbg !6550
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !970, metadata !2123), !dbg !6551
  %0 = bitcast %struct._object** %it to i8*, !dbg !6552
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !6552
  call void @llvm.dbg.declare(metadata %struct._object** %it, metadata !971, metadata !2123), !dbg !6553
  %1 = bitcast %struct._object** %item to i8*, !dbg !6552
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !6552
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !972, metadata !2123), !dbg !6554
  %2 = bitcast %struct._object** %bytearray_obj to i8*, !dbg !6552
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !6552
  call void @llvm.dbg.declare(metadata %struct._object** %bytearray_obj, metadata !973, metadata !2123), !dbg !6555
  %3 = bitcast i64* %buf_size to i8*, !dbg !6556
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !6556
  call void @llvm.dbg.declare(metadata i64* %buf_size, metadata !974, metadata !2123), !dbg !6557
  store i64 0, i64* %buf_size, align 8, !dbg !6557, !tbaa !2129
  %4 = bitcast i64* %len to i8*, !dbg !6556
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !6556
  call void @llvm.dbg.declare(metadata i64* %len, metadata !975, metadata !2123), !dbg !6558
  store i64 0, i64* %len, align 8, !dbg !6558, !tbaa !2129
  %5 = bitcast i32* %value to i8*, !dbg !6559
  call void @llvm.lifetime.start(i64 4, i8* %5) #3, !dbg !6559
  call void @llvm.dbg.declare(metadata i32* %value, metadata !976, metadata !2123), !dbg !6560
  %6 = bitcast i8** %buf to i8*, !dbg !6561
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !6561
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !977, metadata !2123), !dbg !6562
  %7 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !6563, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1, !dbg !6565
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6565, !tbaa !2203
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 18, !dbg !6566
  %9 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer, align 8, !dbg !6566, !tbaa !2563
  %cmp = icmp ne %struct.PyBufferProcs* %9, null, !dbg !6567
  br i1 %cmp, label %land.lhs.true, label %if.end.7, !dbg !6568

land.lhs.true:                                    ; preds = %entry
  %10 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !6569, !tbaa !2119
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !6571
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !6571, !tbaa !2203
  %tp_as_buffer2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 18, !dbg !6572
  %12 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer2, align 8, !dbg !6572, !tbaa !2563
  %bf_getbuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %12, i32 0, i32 0, !dbg !6573
  %13 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer, align 8, !dbg !6573, !tbaa !2571
  %cmp3 = icmp ne i32 (%struct._object*, %struct.bufferinfo*, i32)* %13, null, !dbg !6574
  br i1 %cmp3, label %if.then, label %if.end.7, !dbg !6575

if.then:                                          ; preds = %land.lhs.true
  %14 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6576, !tbaa !2119
  %15 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6579, !tbaa !2119
  %16 = bitcast %struct.PyByteArrayObject* %15 to %struct.PyVarObject*, !dbg !6580
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %16, i32 0, i32 1, !dbg !6581
  %17 = load i64, i64* %ob_size, align 8, !dbg !6581, !tbaa !2239
  %18 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6582, !tbaa !2119
  %19 = bitcast %struct.PyByteArrayObject* %18 to %struct.PyVarObject*, !dbg !6583
  %ob_size4 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %19, i32 0, i32 1, !dbg !6584
  %20 = load i64, i64* %ob_size4, align 8, !dbg !6584, !tbaa !2239
  %21 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !6585, !tbaa !2119
  %call = call i32 @bytearray_setslice(%struct.PyByteArrayObject* %14, i64 %17, i64 %20, %struct._object* %21), !dbg !6586
  %cmp5 = icmp eq i32 %call, -1, !dbg !6587
  br i1 %cmp5, label %if.then.6, label %if.end, !dbg !6588

if.then.6:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval, !dbg !6589
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6589

if.end:                                           ; preds = %if.then
  %22 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6590, !tbaa !2195
  %inc = add i64 %22, 1, !dbg !6590
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6590, !tbaa !2195
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !6591
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6591

if.end.7:                                         ; preds = %land.lhs.true, %entry
  %23 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !6592, !tbaa !2119
  %call8 = call %struct._object* @PyObject_GetIter(%struct._object* %23), !dbg !6593
  store %struct._object* %call8, %struct._object** %it, align 8, !dbg !6594, !tbaa !2119
  %24 = load %struct._object*, %struct._object** %it, align 8, !dbg !6595, !tbaa !2119
  %cmp9 = icmp eq %struct._object* %24, null, !dbg !6597
  br i1 %cmp9, label %if.then.10, label %if.end.11, !dbg !6598

if.then.10:                                       ; preds = %if.end.7
  store %struct._object* null, %struct._object** %retval, !dbg !6599
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6599

if.end.11:                                        ; preds = %if.end.7
  %25 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !6600, !tbaa !2119
  %call12 = call i64 @PyObject_LengthHint(%struct._object* %25, i64 32), !dbg !6601
  store i64 %call12, i64* %buf_size, align 8, !dbg !6602, !tbaa !2129
  %26 = load i64, i64* %buf_size, align 8, !dbg !6603, !tbaa !2129
  %cmp13 = icmp eq i64 %26, -1, !dbg !6604
  br i1 %cmp13, label %if.then.14, label %if.end.19, !dbg !6605

if.then.14:                                       ; preds = %if.end.11
  br label %do.body, !dbg !6606

do.body:                                          ; preds = %if.then.14
  %27 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6607
  call void @llvm.lifetime.start(i64 8, i8* %27) #3, !dbg !6607
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !978, metadata !2123), !dbg !6609
  %28 = load %struct._object*, %struct._object** %it, align 8, !dbg !6610, !tbaa !2119
  store %struct._object* %28, %struct._object** %_py_decref_tmp, align 8, !dbg !6609, !tbaa !2119
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6611, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0, !dbg !6613
  %30 = load i64, i64* %ob_refcnt, align 8, !dbg !6614, !tbaa !2195
  %dec = add i64 %30, -1, !dbg !6614
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !6614, !tbaa !2195
  %cmp15 = icmp ne i64 %dec, 0, !dbg !6615
  br i1 %cmp15, label %if.then.16, label %if.else, !dbg !6616

if.then.16:                                       ; preds = %do.body
  br label %if.end.18, !dbg !6617

if.else:                                          ; preds = %do.body
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6619, !tbaa !2119
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1, !dbg !6621
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8, !dbg !6621, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4, !dbg !6622
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6622, !tbaa !2205
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6623, !tbaa !2119
  call void %33(%struct._object* %34), !dbg !6624
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.16
  %35 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6625
  call void @llvm.lifetime.end(i64 8, i8* %35) #3, !dbg !6625
  br label %do.cond, !dbg !6627

do.cond:                                          ; preds = %if.end.18
  br label %do.end, !dbg !6628

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !6630
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6630

if.end.19:                                        ; preds = %if.end.11
  %36 = load i64, i64* %buf_size, align 8, !dbg !6631, !tbaa !2129
  %call20 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %36), !dbg !6632
  store %struct._object* %call20, %struct._object** %bytearray_obj, align 8, !dbg !6633, !tbaa !2119
  %37 = load %struct._object*, %struct._object** %bytearray_obj, align 8, !dbg !6634, !tbaa !2119
  %cmp21 = icmp eq %struct._object* %37, null, !dbg !6635
  br i1 %cmp21, label %if.then.22, label %if.end.35, !dbg !6636

if.then.22:                                       ; preds = %if.end.19
  br label %do.body.23, !dbg !6637

do.body.23:                                       ; preds = %if.then.22
  %38 = bitcast %struct._object** %_py_decref_tmp24 to i8*, !dbg !6638
  call void @llvm.lifetime.start(i64 8, i8* %38) #3, !dbg !6638
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp24, metadata !982, metadata !2123), !dbg !6640
  %39 = load %struct._object*, %struct._object** %it, align 8, !dbg !6641, !tbaa !2119
  store %struct._object* %39, %struct._object** %_py_decref_tmp24, align 8, !dbg !6640, !tbaa !2119
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8, !dbg !6642, !tbaa !2119
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 0, !dbg !6644
  %41 = load i64, i64* %ob_refcnt25, align 8, !dbg !6645, !tbaa !2195
  %dec26 = add i64 %41, -1, !dbg !6645
  store i64 %dec26, i64* %ob_refcnt25, align 8, !dbg !6645, !tbaa !2195
  %cmp27 = icmp ne i64 %dec26, 0, !dbg !6646
  br i1 %cmp27, label %if.then.28, label %if.else.29, !dbg !6647

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32, !dbg !6648

if.else.29:                                       ; preds = %do.body.23
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8, !dbg !6650, !tbaa !2119
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1, !dbg !6652
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8, !dbg !6652, !tbaa !2203
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 4, !dbg !6653
  %44 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8, !dbg !6653, !tbaa !2205
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8, !dbg !6654, !tbaa !2119
  call void %44(%struct._object* %45), !dbg !6655
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  %46 = bitcast %struct._object** %_py_decref_tmp24 to i8*, !dbg !6656
  call void @llvm.lifetime.end(i64 8, i8* %46) #3, !dbg !6656
  br label %do.cond.33, !dbg !6658

do.cond.33:                                       ; preds = %if.end.32
  br label %do.end.34, !dbg !6659

do.end.34:                                        ; preds = %do.cond.33
  store %struct._object* null, %struct._object** %retval, !dbg !6661
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6661

if.end.35:                                        ; preds = %if.end.19
  %47 = load %struct._object*, %struct._object** %bytearray_obj, align 8, !dbg !6662, !tbaa !2119
  %48 = bitcast %struct._object* %47 to %struct.PyVarObject*, !dbg !6663
  %ob_size36 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %48, i32 0, i32 1, !dbg !6664
  %49 = load i64, i64* %ob_size36, align 8, !dbg !6664, !tbaa !2239
  %tobool = icmp ne i64 %49, 0, !dbg !6665
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6665

cond.true:                                        ; preds = %if.end.35
  %50 = load %struct._object*, %struct._object** %bytearray_obj, align 8, !dbg !6666, !tbaa !2119
  %51 = bitcast %struct._object* %50 to %struct.PyByteArrayObject*, !dbg !6668
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %51, i32 0, i32 3, !dbg !6669
  %52 = load i8*, i8** %ob_start, align 8, !dbg !6669, !tbaa !2250
  br label %cond.end, !dbg !6665

cond.false:                                       ; preds = %if.end.35
  br label %cond.end, !dbg !6670

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %52, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !6665
  store i8* %cond, i8** %buf, align 8, !dbg !6672, !tbaa !2119
  br label %while.cond, !dbg !6675

while.cond:                                       ; preds = %if.end.135, %cond.end
  %53 = load %struct._object*, %struct._object** %it, align 8, !dbg !6676, !tbaa !2119
  %call37 = call %struct._object* @PyIter_Next(%struct._object* %53), !dbg !6678
  store %struct._object* %call37, %struct._object** %item, align 8, !dbg !6679, !tbaa !2119
  %cmp38 = icmp ne %struct._object* %call37, null, !dbg !6680
  br i1 %cmp38, label %while.body, label %while.end, !dbg !6675

while.body:                                       ; preds = %while.cond
  %54 = load %struct._object*, %struct._object** %item, align 8, !dbg !6681, !tbaa !2119
  %call39 = call i32 @_getbytevalue(%struct._object* %54, i32* %value), !dbg !6682
  %tobool40 = icmp ne i32 %call39, 0, !dbg !6682
  br i1 %tobool40, label %if.end.78, label %if.then.41, !dbg !6683

if.then.41:                                       ; preds = %while.body
  br label %do.body.42, !dbg !6684

do.body.42:                                       ; preds = %if.then.41
  %55 = bitcast %struct._object** %_py_decref_tmp43 to i8*, !dbg !6685
  call void @llvm.lifetime.start(i64 8, i8* %55) #3, !dbg !6685
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp43, metadata !986, metadata !2123), !dbg !6687
  %56 = load %struct._object*, %struct._object** %item, align 8, !dbg !6688, !tbaa !2119
  store %struct._object* %56, %struct._object** %_py_decref_tmp43, align 8, !dbg !6687, !tbaa !2119
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp43, align 8, !dbg !6689, !tbaa !2119
  %ob_refcnt44 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0, !dbg !6691
  %58 = load i64, i64* %ob_refcnt44, align 8, !dbg !6692, !tbaa !2195
  %dec45 = add i64 %58, -1, !dbg !6692
  store i64 %dec45, i64* %ob_refcnt44, align 8, !dbg !6692, !tbaa !2195
  %cmp46 = icmp ne i64 %dec45, 0, !dbg !6693
  br i1 %cmp46, label %if.then.47, label %if.else.48, !dbg !6694

if.then.47:                                       ; preds = %do.body.42
  br label %if.end.51, !dbg !6695

if.else.48:                                       ; preds = %do.body.42
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp43, align 8, !dbg !6697, !tbaa !2119
  %ob_type49 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 1, !dbg !6699
  %60 = load %struct._typeobject*, %struct._typeobject** %ob_type49, align 8, !dbg !6699, !tbaa !2203
  %tp_dealloc50 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 4, !dbg !6700
  %61 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc50, align 8, !dbg !6700, !tbaa !2205
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp43, align 8, !dbg !6701, !tbaa !2119
  call void %61(%struct._object* %62), !dbg !6702
  br label %if.end.51

if.end.51:                                        ; preds = %if.else.48, %if.then.47
  %63 = bitcast %struct._object** %_py_decref_tmp43 to i8*, !dbg !6703
  call void @llvm.lifetime.end(i64 8, i8* %63) #3, !dbg !6703
  br label %do.cond.52, !dbg !6705

do.cond.52:                                       ; preds = %if.end.51
  br label %do.end.53, !dbg !6706

do.end.53:                                        ; preds = %do.cond.52
  br label %do.body.54, !dbg !6708

do.body.54:                                       ; preds = %do.end.53
  %64 = bitcast %struct._object** %_py_decref_tmp55 to i8*, !dbg !6709
  call void @llvm.lifetime.start(i64 8, i8* %64) #3, !dbg !6709
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp55, metadata !991, metadata !2123), !dbg !6711
  %65 = load %struct._object*, %struct._object** %it, align 8, !dbg !6712, !tbaa !2119
  store %struct._object* %65, %struct._object** %_py_decref_tmp55, align 8, !dbg !6711, !tbaa !2119
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8, !dbg !6713, !tbaa !2119
  %ob_refcnt56 = getelementptr inbounds %struct._object, %struct._object* %66, i32 0, i32 0, !dbg !6715
  %67 = load i64, i64* %ob_refcnt56, align 8, !dbg !6716, !tbaa !2195
  %dec57 = add i64 %67, -1, !dbg !6716
  store i64 %dec57, i64* %ob_refcnt56, align 8, !dbg !6716, !tbaa !2195
  %cmp58 = icmp ne i64 %dec57, 0, !dbg !6717
  br i1 %cmp58, label %if.then.59, label %if.else.60, !dbg !6718

if.then.59:                                       ; preds = %do.body.54
  br label %if.end.63, !dbg !6719

if.else.60:                                       ; preds = %do.body.54
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8, !dbg !6721, !tbaa !2119
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 1, !dbg !6723
  %69 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8, !dbg !6723, !tbaa !2203
  %tp_dealloc62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %69, i32 0, i32 4, !dbg !6724
  %70 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc62, align 8, !dbg !6724, !tbaa !2205
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8, !dbg !6725, !tbaa !2119
  call void %70(%struct._object* %71), !dbg !6726
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.60, %if.then.59
  %72 = bitcast %struct._object** %_py_decref_tmp55 to i8*, !dbg !6727
  call void @llvm.lifetime.end(i64 8, i8* %72) #3, !dbg !6727
  br label %do.cond.64, !dbg !6728

do.cond.64:                                       ; preds = %if.end.63
  br label %do.end.65, !dbg !6729

do.end.65:                                        ; preds = %do.cond.64
  br label %do.body.66, !dbg !6731

do.body.66:                                       ; preds = %do.end.65
  %73 = bitcast %struct._object** %_py_decref_tmp67 to i8*, !dbg !6732
  call void @llvm.lifetime.start(i64 8, i8* %73) #3, !dbg !6732
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp67, metadata !993, metadata !2123), !dbg !6734
  %74 = load %struct._object*, %struct._object** %bytearray_obj, align 8, !dbg !6735, !tbaa !2119
  store %struct._object* %74, %struct._object** %_py_decref_tmp67, align 8, !dbg !6734, !tbaa !2119
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8, !dbg !6736, !tbaa !2119
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 0, !dbg !6738
  %76 = load i64, i64* %ob_refcnt68, align 8, !dbg !6739, !tbaa !2195
  %dec69 = add i64 %76, -1, !dbg !6739
  store i64 %dec69, i64* %ob_refcnt68, align 8, !dbg !6739, !tbaa !2195
  %cmp70 = icmp ne i64 %dec69, 0, !dbg !6740
  br i1 %cmp70, label %if.then.71, label %if.else.72, !dbg !6741

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75, !dbg !6742

if.else.72:                                       ; preds = %do.body.66
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8, !dbg !6744, !tbaa !2119
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 1, !dbg !6746
  %78 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8, !dbg !6746, !tbaa !2203
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %78, i32 0, i32 4, !dbg !6747
  %79 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8, !dbg !6747, !tbaa !2205
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8, !dbg !6748, !tbaa !2119
  call void %79(%struct._object* %80), !dbg !6749
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  %81 = bitcast %struct._object** %_py_decref_tmp67 to i8*, !dbg !6750
  call void @llvm.lifetime.end(i64 8, i8* %81) #3, !dbg !6750
  br label %do.cond.76, !dbg !6751

do.cond.76:                                       ; preds = %if.end.75
  br label %do.end.77, !dbg !6752

do.end.77:                                        ; preds = %do.cond.76
  store %struct._object* null, %struct._object** %retval, !dbg !6754
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6754

if.end.78:                                        ; preds = %while.body
  %82 = load i32, i32* %value, align 4, !dbg !6755, !tbaa !2676
  %conv = trunc i32 %82 to i8, !dbg !6755
  %83 = load i64, i64* %len, align 8, !dbg !6756, !tbaa !2129
  %inc79 = add i64 %83, 1, !dbg !6756
  store i64 %inc79, i64* %len, align 8, !dbg !6756, !tbaa !2129
  %84 = load i8*, i8** %buf, align 8, !dbg !6757, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %84, i64 %83, !dbg !6757
  store i8 %conv, i8* %arrayidx, align 1, !dbg !6758, !tbaa !2233
  br label %do.body.80, !dbg !6759

do.body.80:                                       ; preds = %if.end.78
  %85 = bitcast %struct._object** %_py_decref_tmp81 to i8*, !dbg !6760
  call void @llvm.lifetime.start(i64 8, i8* %85) #3, !dbg !6760
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp81, metadata !995, metadata !2123), !dbg !6762
  %86 = load %struct._object*, %struct._object** %item, align 8, !dbg !6763, !tbaa !2119
  store %struct._object* %86, %struct._object** %_py_decref_tmp81, align 8, !dbg !6762, !tbaa !2119
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8, !dbg !6764, !tbaa !2119
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 0, !dbg !6766
  %88 = load i64, i64* %ob_refcnt82, align 8, !dbg !6767, !tbaa !2195
  %dec83 = add i64 %88, -1, !dbg !6767
  store i64 %dec83, i64* %ob_refcnt82, align 8, !dbg !6767, !tbaa !2195
  %cmp84 = icmp ne i64 %dec83, 0, !dbg !6768
  br i1 %cmp84, label %if.then.86, label %if.else.87, !dbg !6769

if.then.86:                                       ; preds = %do.body.80
  br label %if.end.90, !dbg !6770

if.else.87:                                       ; preds = %do.body.80
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8, !dbg !6772, !tbaa !2119
  %ob_type88 = getelementptr inbounds %struct._object, %struct._object* %89, i32 0, i32 1, !dbg !6774
  %90 = load %struct._typeobject*, %struct._typeobject** %ob_type88, align 8, !dbg !6774, !tbaa !2203
  %tp_dealloc89 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %90, i32 0, i32 4, !dbg !6775
  %91 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc89, align 8, !dbg !6775, !tbaa !2205
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8, !dbg !6776, !tbaa !2119
  call void %91(%struct._object* %92), !dbg !6777
  br label %if.end.90

if.end.90:                                        ; preds = %if.else.87, %if.then.86
  %93 = bitcast %struct._object** %_py_decref_tmp81 to i8*, !dbg !6778
  call void @llvm.lifetime.end(i64 8, i8* %93) #3, !dbg !6778
  br label %do.cond.91, !dbg !6780

do.cond.91:                                       ; preds = %if.end.90
  br label %do.end.92, !dbg !6781

do.end.92:                                        ; preds = %do.cond.91
  %94 = load i64, i64* %len, align 8, !dbg !6783, !tbaa !2129
  %95 = load i64, i64* %buf_size, align 8, !dbg !6784, !tbaa !2129
  %cmp93 = icmp sge i64 %94, %95, !dbg !6785
  br i1 %cmp93, label %if.then.95, label %if.end.135, !dbg !6786

if.then.95:                                       ; preds = %do.end.92
  %96 = load i64, i64* %len, align 8, !dbg !6787, !tbaa !2129
  %97 = load i64, i64* %len, align 8, !dbg !6788, !tbaa !2129
  %shr = ashr i64 %97, 1, !dbg !6789
  %add = add i64 %96, %shr, !dbg !6790
  %add96 = add i64 %add, 1, !dbg !6791
  store i64 %add96, i64* %buf_size, align 8, !dbg !6792, !tbaa !2129
  %98 = load %struct._object*, %struct._object** %bytearray_obj, align 8, !dbg !6793, !tbaa !2119
  %99 = load i64, i64* %buf_size, align 8, !dbg !6794, !tbaa !2129
  %call97 = call i32 @PyByteArray_Resize(%struct._object* %98, i64 %99), !dbg !6795
  %cmp98 = icmp slt i32 %call97, 0, !dbg !6796
  br i1 %cmp98, label %if.then.100, label %if.end.127, !dbg !6797

if.then.100:                                      ; preds = %if.then.95
  br label %do.body.101, !dbg !6798

do.body.101:                                      ; preds = %if.then.100
  %100 = bitcast %struct._object** %_py_decref_tmp102 to i8*, !dbg !6799
  call void @llvm.lifetime.start(i64 8, i8* %100) #3, !dbg !6799
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp102, metadata !997, metadata !2123), !dbg !6801
  %101 = load %struct._object*, %struct._object** %it, align 8, !dbg !6802, !tbaa !2119
  store %struct._object* %101, %struct._object** %_py_decref_tmp102, align 8, !dbg !6801, !tbaa !2119
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp102, align 8, !dbg !6803, !tbaa !2119
  %ob_refcnt103 = getelementptr inbounds %struct._object, %struct._object* %102, i32 0, i32 0, !dbg !6805
  %103 = load i64, i64* %ob_refcnt103, align 8, !dbg !6806, !tbaa !2195
  %dec104 = add i64 %103, -1, !dbg !6806
  store i64 %dec104, i64* %ob_refcnt103, align 8, !dbg !6806, !tbaa !2195
  %cmp105 = icmp ne i64 %dec104, 0, !dbg !6807
  br i1 %cmp105, label %if.then.107, label %if.else.108, !dbg !6808

if.then.107:                                      ; preds = %do.body.101
  br label %if.end.111, !dbg !6809

if.else.108:                                      ; preds = %do.body.101
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp102, align 8, !dbg !6811, !tbaa !2119
  %ob_type109 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 1, !dbg !6813
  %105 = load %struct._typeobject*, %struct._typeobject** %ob_type109, align 8, !dbg !6813, !tbaa !2203
  %tp_dealloc110 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %105, i32 0, i32 4, !dbg !6814
  %106 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc110, align 8, !dbg !6814, !tbaa !2205
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp102, align 8, !dbg !6815, !tbaa !2119
  call void %106(%struct._object* %107), !dbg !6816
  br label %if.end.111

if.end.111:                                       ; preds = %if.else.108, %if.then.107
  %108 = bitcast %struct._object** %_py_decref_tmp102 to i8*, !dbg !6817
  call void @llvm.lifetime.end(i64 8, i8* %108) #3, !dbg !6817
  br label %do.cond.112, !dbg !6819

do.cond.112:                                      ; preds = %if.end.111
  br label %do.end.113, !dbg !6820

do.end.113:                                       ; preds = %do.cond.112
  br label %do.body.114, !dbg !6822

do.body.114:                                      ; preds = %do.end.113
  %109 = bitcast %struct._object** %_py_decref_tmp115 to i8*, !dbg !6823
  call void @llvm.lifetime.start(i64 8, i8* %109) #3, !dbg !6823
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp115, metadata !1003, metadata !2123), !dbg !6825
  %110 = load %struct._object*, %struct._object** %bytearray_obj, align 8, !dbg !6826, !tbaa !2119
  store %struct._object* %110, %struct._object** %_py_decref_tmp115, align 8, !dbg !6825, !tbaa !2119
  %111 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8, !dbg !6827, !tbaa !2119
  %ob_refcnt116 = getelementptr inbounds %struct._object, %struct._object* %111, i32 0, i32 0, !dbg !6829
  %112 = load i64, i64* %ob_refcnt116, align 8, !dbg !6830, !tbaa !2195
  %dec117 = add i64 %112, -1, !dbg !6830
  store i64 %dec117, i64* %ob_refcnt116, align 8, !dbg !6830, !tbaa !2195
  %cmp118 = icmp ne i64 %dec117, 0, !dbg !6831
  br i1 %cmp118, label %if.then.120, label %if.else.121, !dbg !6832

if.then.120:                                      ; preds = %do.body.114
  br label %if.end.124, !dbg !6833

if.else.121:                                      ; preds = %do.body.114
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8, !dbg !6835, !tbaa !2119
  %ob_type122 = getelementptr inbounds %struct._object, %struct._object* %113, i32 0, i32 1, !dbg !6837
  %114 = load %struct._typeobject*, %struct._typeobject** %ob_type122, align 8, !dbg !6837, !tbaa !2203
  %tp_dealloc123 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %114, i32 0, i32 4, !dbg !6838
  %115 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc123, align 8, !dbg !6838, !tbaa !2205
  %116 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8, !dbg !6839, !tbaa !2119
  call void %115(%struct._object* %116), !dbg !6840
  br label %if.end.124

if.end.124:                                       ; preds = %if.else.121, %if.then.120
  %117 = bitcast %struct._object** %_py_decref_tmp115 to i8*, !dbg !6841
  call void @llvm.lifetime.end(i64 8, i8* %117) #3, !dbg !6841
  br label %do.cond.125, !dbg !6842

do.cond.125:                                      ; preds = %if.end.124
  br label %do.end.126, !dbg !6843

do.end.126:                                       ; preds = %do.cond.125
  store %struct._object* null, %struct._object** %retval, !dbg !6845
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6845

if.end.127:                                       ; preds = %if.then.95
  %118 = load %struct._object*, %struct._object** %bytearray_obj, align 8, !dbg !6846, !tbaa !2119
  %119 = bitcast %struct._object* %118 to %struct.PyVarObject*, !dbg !6847
  %ob_size128 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %119, i32 0, i32 1, !dbg !6848
  %120 = load i64, i64* %ob_size128, align 8, !dbg !6848, !tbaa !2239
  %tobool129 = icmp ne i64 %120, 0, !dbg !6849
  br i1 %tobool129, label %cond.true.130, label %cond.false.132, !dbg !6849

cond.true.130:                                    ; preds = %if.end.127
  %121 = load %struct._object*, %struct._object** %bytearray_obj, align 8, !dbg !6850, !tbaa !2119
  %122 = bitcast %struct._object* %121 to %struct.PyByteArrayObject*, !dbg !6852
  %ob_start131 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %122, i32 0, i32 3, !dbg !6853
  %123 = load i8*, i8** %ob_start131, align 8, !dbg !6853, !tbaa !2250
  br label %cond.end.133, !dbg !6849

cond.false.132:                                   ; preds = %if.end.127
  br label %cond.end.133, !dbg !6854

cond.end.133:                                     ; preds = %cond.false.132, %cond.true.130
  %cond134 = phi i8* [ %123, %cond.true.130 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.132 ], !dbg !6849
  store i8* %cond134, i8** %buf, align 8, !dbg !6856, !tbaa !2119
  br label %if.end.135, !dbg !6859

if.end.135:                                       ; preds = %cond.end.133, %do.end.92
  br label %while.cond, !dbg !6675

while.end:                                        ; preds = %while.cond
  br label %do.body.136, !dbg !6860

do.body.136:                                      ; preds = %while.end
  %124 = bitcast %struct._object** %_py_decref_tmp137 to i8*, !dbg !6861
  call void @llvm.lifetime.start(i64 8, i8* %124) #3, !dbg !6861
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp137, metadata !1005, metadata !2123), !dbg !6863
  %125 = load %struct._object*, %struct._object** %it, align 8, !dbg !6864, !tbaa !2119
  store %struct._object* %125, %struct._object** %_py_decref_tmp137, align 8, !dbg !6863, !tbaa !2119
  %126 = load %struct._object*, %struct._object** %_py_decref_tmp137, align 8, !dbg !6865, !tbaa !2119
  %ob_refcnt138 = getelementptr inbounds %struct._object, %struct._object* %126, i32 0, i32 0, !dbg !6867
  %127 = load i64, i64* %ob_refcnt138, align 8, !dbg !6868, !tbaa !2195
  %dec139 = add i64 %127, -1, !dbg !6868
  store i64 %dec139, i64* %ob_refcnt138, align 8, !dbg !6868, !tbaa !2195
  %cmp140 = icmp ne i64 %dec139, 0, !dbg !6869
  br i1 %cmp140, label %if.then.142, label %if.else.143, !dbg !6870

if.then.142:                                      ; preds = %do.body.136
  br label %if.end.146, !dbg !6871

if.else.143:                                      ; preds = %do.body.136
  %128 = load %struct._object*, %struct._object** %_py_decref_tmp137, align 8, !dbg !6873, !tbaa !2119
  %ob_type144 = getelementptr inbounds %struct._object, %struct._object* %128, i32 0, i32 1, !dbg !6875
  %129 = load %struct._typeobject*, %struct._typeobject** %ob_type144, align 8, !dbg !6875, !tbaa !2203
  %tp_dealloc145 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %129, i32 0, i32 4, !dbg !6876
  %130 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc145, align 8, !dbg !6876, !tbaa !2205
  %131 = load %struct._object*, %struct._object** %_py_decref_tmp137, align 8, !dbg !6877, !tbaa !2119
  call void %130(%struct._object* %131), !dbg !6878
  br label %if.end.146

if.end.146:                                       ; preds = %if.else.143, %if.then.142
  %132 = bitcast %struct._object** %_py_decref_tmp137 to i8*, !dbg !6879
  call void @llvm.lifetime.end(i64 8, i8* %132) #3, !dbg !6879
  br label %do.cond.147, !dbg !6881

do.cond.147:                                      ; preds = %if.end.146
  br label %do.end.148, !dbg !6882

do.end.148:                                       ; preds = %do.cond.147
  %133 = load %struct._object*, %struct._object** %bytearray_obj, align 8, !dbg !6884, !tbaa !2119
  %134 = load i64, i64* %len, align 8, !dbg !6885, !tbaa !2129
  %call149 = call i32 @PyByteArray_Resize(%struct._object* %133, i64 %134), !dbg !6886
  %cmp150 = icmp slt i32 %call149, 0, !dbg !6887
  br i1 %cmp150, label %if.then.152, label %if.end.166, !dbg !6888

if.then.152:                                      ; preds = %do.end.148
  br label %do.body.153, !dbg !6889

do.body.153:                                      ; preds = %if.then.152
  %135 = bitcast %struct._object** %_py_decref_tmp154 to i8*, !dbg !6890
  call void @llvm.lifetime.start(i64 8, i8* %135) #3, !dbg !6890
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp154, metadata !1007, metadata !2123), !dbg !6892
  %136 = load %struct._object*, %struct._object** %bytearray_obj, align 8, !dbg !6893, !tbaa !2119
  store %struct._object* %136, %struct._object** %_py_decref_tmp154, align 8, !dbg !6892, !tbaa !2119
  %137 = load %struct._object*, %struct._object** %_py_decref_tmp154, align 8, !dbg !6894, !tbaa !2119
  %ob_refcnt155 = getelementptr inbounds %struct._object, %struct._object* %137, i32 0, i32 0, !dbg !6896
  %138 = load i64, i64* %ob_refcnt155, align 8, !dbg !6897, !tbaa !2195
  %dec156 = add i64 %138, -1, !dbg !6897
  store i64 %dec156, i64* %ob_refcnt155, align 8, !dbg !6897, !tbaa !2195
  %cmp157 = icmp ne i64 %dec156, 0, !dbg !6898
  br i1 %cmp157, label %if.then.159, label %if.else.160, !dbg !6899

if.then.159:                                      ; preds = %do.body.153
  br label %if.end.163, !dbg !6900

if.else.160:                                      ; preds = %do.body.153
  %139 = load %struct._object*, %struct._object** %_py_decref_tmp154, align 8, !dbg !6902, !tbaa !2119
  %ob_type161 = getelementptr inbounds %struct._object, %struct._object* %139, i32 0, i32 1, !dbg !6904
  %140 = load %struct._typeobject*, %struct._typeobject** %ob_type161, align 8, !dbg !6904, !tbaa !2203
  %tp_dealloc162 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %140, i32 0, i32 4, !dbg !6905
  %141 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc162, align 8, !dbg !6905, !tbaa !2205
  %142 = load %struct._object*, %struct._object** %_py_decref_tmp154, align 8, !dbg !6906, !tbaa !2119
  call void %141(%struct._object* %142), !dbg !6907
  br label %if.end.163

if.end.163:                                       ; preds = %if.else.160, %if.then.159
  %143 = bitcast %struct._object** %_py_decref_tmp154 to i8*, !dbg !6908
  call void @llvm.lifetime.end(i64 8, i8* %143) #3, !dbg !6908
  br label %do.cond.164, !dbg !6910

do.cond.164:                                      ; preds = %if.end.163
  br label %do.end.165, !dbg !6911

do.end.165:                                       ; preds = %do.cond.164
  store %struct._object* null, %struct._object** %retval, !dbg !6913
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6913

if.end.166:                                       ; preds = %do.end.148
  %144 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6914, !tbaa !2119
  %145 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6915, !tbaa !2119
  %146 = bitcast %struct.PyByteArrayObject* %145 to %struct.PyVarObject*, !dbg !6916
  %ob_size167 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %146, i32 0, i32 1, !dbg !6917
  %147 = load i64, i64* %ob_size167, align 8, !dbg !6917, !tbaa !2239
  %148 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6918, !tbaa !2119
  %149 = bitcast %struct.PyByteArrayObject* %148 to %struct.PyVarObject*, !dbg !6919
  %ob_size168 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %149, i32 0, i32 1, !dbg !6920
  %150 = load i64, i64* %ob_size168, align 8, !dbg !6920, !tbaa !2239
  %151 = load %struct._object*, %struct._object** %bytearray_obj, align 8, !dbg !6921, !tbaa !2119
  %call169 = call i32 @bytearray_setslice(%struct.PyByteArrayObject* %144, i64 %147, i64 %150, %struct._object* %151), !dbg !6922
  %cmp170 = icmp eq i32 %call169, -1, !dbg !6923
  br i1 %cmp170, label %if.then.172, label %if.end.186, !dbg !6924

if.then.172:                                      ; preds = %if.end.166
  br label %do.body.173, !dbg !6925

do.body.173:                                      ; preds = %if.then.172
  %152 = bitcast %struct._object** %_py_decref_tmp174 to i8*, !dbg !6926
  call void @llvm.lifetime.start(i64 8, i8* %152) #3, !dbg !6926
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp174, metadata !1011, metadata !2123), !dbg !6928
  %153 = load %struct._object*, %struct._object** %bytearray_obj, align 8, !dbg !6929, !tbaa !2119
  store %struct._object* %153, %struct._object** %_py_decref_tmp174, align 8, !dbg !6928, !tbaa !2119
  %154 = load %struct._object*, %struct._object** %_py_decref_tmp174, align 8, !dbg !6930, !tbaa !2119
  %ob_refcnt175 = getelementptr inbounds %struct._object, %struct._object* %154, i32 0, i32 0, !dbg !6932
  %155 = load i64, i64* %ob_refcnt175, align 8, !dbg !6933, !tbaa !2195
  %dec176 = add i64 %155, -1, !dbg !6933
  store i64 %dec176, i64* %ob_refcnt175, align 8, !dbg !6933, !tbaa !2195
  %cmp177 = icmp ne i64 %dec176, 0, !dbg !6934
  br i1 %cmp177, label %if.then.179, label %if.else.180, !dbg !6935

if.then.179:                                      ; preds = %do.body.173
  br label %if.end.183, !dbg !6936

if.else.180:                                      ; preds = %do.body.173
  %156 = load %struct._object*, %struct._object** %_py_decref_tmp174, align 8, !dbg !6938, !tbaa !2119
  %ob_type181 = getelementptr inbounds %struct._object, %struct._object* %156, i32 0, i32 1, !dbg !6940
  %157 = load %struct._typeobject*, %struct._typeobject** %ob_type181, align 8, !dbg !6940, !tbaa !2203
  %tp_dealloc182 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %157, i32 0, i32 4, !dbg !6941
  %158 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc182, align 8, !dbg !6941, !tbaa !2205
  %159 = load %struct._object*, %struct._object** %_py_decref_tmp174, align 8, !dbg !6942, !tbaa !2119
  call void %158(%struct._object* %159), !dbg !6943
  br label %if.end.183

if.end.183:                                       ; preds = %if.else.180, %if.then.179
  %160 = bitcast %struct._object** %_py_decref_tmp174 to i8*, !dbg !6944
  call void @llvm.lifetime.end(i64 8, i8* %160) #3, !dbg !6944
  br label %do.cond.184, !dbg !6946

do.cond.184:                                      ; preds = %if.end.183
  br label %do.end.185, !dbg !6947

do.end.185:                                       ; preds = %do.cond.184
  store %struct._object* null, %struct._object** %retval, !dbg !6949
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6949

if.end.186:                                       ; preds = %if.end.166
  br label %do.body.187, !dbg !6950

do.body.187:                                      ; preds = %if.end.186
  %161 = bitcast %struct._object** %_py_decref_tmp188 to i8*, !dbg !6951
  call void @llvm.lifetime.start(i64 8, i8* %161) #3, !dbg !6951
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp188, metadata !1015, metadata !2123), !dbg !6953
  %162 = load %struct._object*, %struct._object** %bytearray_obj, align 8, !dbg !6954, !tbaa !2119
  store %struct._object* %162, %struct._object** %_py_decref_tmp188, align 8, !dbg !6953, !tbaa !2119
  %163 = load %struct._object*, %struct._object** %_py_decref_tmp188, align 8, !dbg !6955, !tbaa !2119
  %ob_refcnt189 = getelementptr inbounds %struct._object, %struct._object* %163, i32 0, i32 0, !dbg !6957
  %164 = load i64, i64* %ob_refcnt189, align 8, !dbg !6958, !tbaa !2195
  %dec190 = add i64 %164, -1, !dbg !6958
  store i64 %dec190, i64* %ob_refcnt189, align 8, !dbg !6958, !tbaa !2195
  %cmp191 = icmp ne i64 %dec190, 0, !dbg !6959
  br i1 %cmp191, label %if.then.193, label %if.else.194, !dbg !6960

if.then.193:                                      ; preds = %do.body.187
  br label %if.end.197, !dbg !6961

if.else.194:                                      ; preds = %do.body.187
  %165 = load %struct._object*, %struct._object** %_py_decref_tmp188, align 8, !dbg !6963, !tbaa !2119
  %ob_type195 = getelementptr inbounds %struct._object, %struct._object* %165, i32 0, i32 1, !dbg !6965
  %166 = load %struct._typeobject*, %struct._typeobject** %ob_type195, align 8, !dbg !6965, !tbaa !2203
  %tp_dealloc196 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %166, i32 0, i32 4, !dbg !6966
  %167 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc196, align 8, !dbg !6966, !tbaa !2205
  %168 = load %struct._object*, %struct._object** %_py_decref_tmp188, align 8, !dbg !6967, !tbaa !2119
  call void %167(%struct._object* %168), !dbg !6968
  br label %if.end.197

if.end.197:                                       ; preds = %if.else.194, %if.then.193
  %169 = bitcast %struct._object** %_py_decref_tmp188 to i8*, !dbg !6969
  call void @llvm.lifetime.end(i64 8, i8* %169) #3, !dbg !6969
  br label %do.cond.198, !dbg !6970

do.cond.198:                                      ; preds = %if.end.197
  br label %do.end.199, !dbg !6971

do.end.199:                                       ; preds = %do.cond.198
  %170 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6973, !tbaa !2195
  %inc200 = add i64 %170, 1, !dbg !6973
  store i64 %inc200, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6973, !tbaa !2195
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !6974
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6974

cleanup:                                          ; preds = %do.end.199, %do.end.185, %do.end.165, %do.end.126, %do.end.77, %do.end.34, %do.end, %if.then.10, %if.end, %if.then.6
  %171 = bitcast i8** %buf to i8*, !dbg !6975
  call void @llvm.lifetime.end(i64 8, i8* %171) #3, !dbg !6975
  %172 = bitcast i32* %value to i8*, !dbg !6975
  call void @llvm.lifetime.end(i64 4, i8* %172) #3, !dbg !6975
  %173 = bitcast i64* %len to i8*, !dbg !6975
  call void @llvm.lifetime.end(i64 8, i8* %173) #3, !dbg !6975
  %174 = bitcast i64* %buf_size to i8*, !dbg !6975
  call void @llvm.lifetime.end(i64 8, i8* %174) #3, !dbg !6975
  %175 = bitcast %struct._object** %bytearray_obj to i8*, !dbg !6975
  call void @llvm.lifetime.end(i64 8, i8* %175) #3, !dbg !6975
  %176 = bitcast %struct._object** %item to i8*, !dbg !6975
  call void @llvm.lifetime.end(i64 8, i8* %176) #3, !dbg !6975
  %177 = bitcast %struct._object** %it to i8*, !dbg !6975
  call void @llvm.lifetime.end(i64 8, i8* %177) #3, !dbg !6975
  %178 = load %struct._object*, %struct._object** %retval, !dbg !6975
  ret %struct._object* %178, !dbg !6975
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_find(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %result = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1019, metadata !2123), !dbg !6976
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1020, metadata !2123), !dbg !6977
  %0 = bitcast i64* %result to i8*, !dbg !6978
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !6978
  call void @llvm.dbg.declare(metadata i64* %result, metadata !1021, metadata !2123), !dbg !6979
  %1 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !6980, !tbaa !2119
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6981, !tbaa !2119
  %call = call i64 @bytearray_find_internal(%struct.PyByteArrayObject* %1, %struct._object* %2, i32 1), !dbg !6982
  store i64 %call, i64* %result, align 8, !dbg !6979, !tbaa !2129
  %3 = load i64, i64* %result, align 8, !dbg !6983, !tbaa !2129
  %cmp = icmp eq i64 %3, -2, !dbg !6985
  br i1 %cmp, label %if.then, label %if.end, !dbg !6986

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !6987
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6987

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %result, align 8, !dbg !6988, !tbaa !2129
  %call1 = call %struct._object* @PyLong_FromSsize_t(i64 %4), !dbg !6989
  store %struct._object* %call1, %struct._object** %retval, !dbg !6990
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6990

cleanup:                                          ; preds = %if.end, %if.then
  %5 = bitcast i64* %result to i8*, !dbg !6991
  call void @llvm.lifetime.end(i64 8, i8* %5) #3, !dbg !6991
  %6 = load %struct._object*, %struct._object** %retval, !dbg !6991
  ret %struct._object* %6, !dbg !6991
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_fromhex(%struct._object* %cls, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %newbytes = alloca %struct._object*, align 8
  %hexobj = alloca %struct._object*, align 8
  %buf = alloca i8*, align 8
  %hexlen = alloca i64, align 8
  %byteslen = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %top = alloca i32, align 4
  %bot = alloca i32, align 4
  %data = alloca i8*, align 8
  %kind = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %cls.addr, metadata !1065, metadata !2123), !dbg !6992
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1066, metadata !2123), !dbg !6993
  %0 = bitcast %struct._object** %newbytes to i8*, !dbg !6994
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !6994
  call void @llvm.dbg.declare(metadata %struct._object** %newbytes, metadata !1067, metadata !2123), !dbg !6995
  %1 = bitcast %struct._object** %hexobj to i8*, !dbg !6994
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !6994
  call void @llvm.dbg.declare(metadata %struct._object** %hexobj, metadata !1068, metadata !2123), !dbg !6996
  %2 = bitcast i8** %buf to i8*, !dbg !6997
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !6997
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !1069, metadata !2123), !dbg !6998
  %3 = bitcast i64* %hexlen to i8*, !dbg !6999
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !6999
  call void @llvm.dbg.declare(metadata i64* %hexlen, metadata !1070, metadata !2123), !dbg !7000
  %4 = bitcast i64* %byteslen to i8*, !dbg !6999
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !6999
  call void @llvm.dbg.declare(metadata i64* %byteslen, metadata !1071, metadata !2123), !dbg !7001
  %5 = bitcast i64* %i to i8*, !dbg !6999
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !6999
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1072, metadata !2123), !dbg !7002
  %6 = bitcast i64* %j to i8*, !dbg !6999
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !6999
  call void @llvm.dbg.declare(metadata i64* %j, metadata !1073, metadata !2123), !dbg !7003
  %7 = bitcast i32* %top to i8*, !dbg !7004
  call void @llvm.lifetime.start(i64 4, i8* %7) #3, !dbg !7004
  call void @llvm.dbg.declare(metadata i32* %top, metadata !1074, metadata !2123), !dbg !7005
  %8 = bitcast i32* %bot to i8*, !dbg !7004
  call void @llvm.lifetime.start(i64 4, i8* %8) #3, !dbg !7004
  call void @llvm.dbg.declare(metadata i32* %bot, metadata !1075, metadata !2123), !dbg !7006
  %9 = bitcast i8** %data to i8*, !dbg !7007
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !7007
  call void @llvm.dbg.declare(metadata i8** %data, metadata !1076, metadata !2123), !dbg !7008
  %10 = bitcast i32* %kind to i8*, !dbg !7009
  call void @llvm.lifetime.start(i64 4, i8* %10) #3, !dbg !7009
  call void @llvm.dbg.declare(metadata i32* %kind, metadata !1077, metadata !2123), !dbg !7010
  %11 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7011, !tbaa !2119
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.87, i32 0, i32 0), %struct._object** %hexobj), !dbg !7013
  %tobool = icmp ne i32 %call, 0, !dbg !7013
  br i1 %tobool, label %if.end, label %if.then, !dbg !7014

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7015
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7015

if.end:                                           ; preds = %entry
  %12 = load %struct._object*, %struct._object** %hexobj, align 8, !dbg !7016, !tbaa !2119
  %13 = bitcast %struct._object* %12 to %struct.PyASCIIObject*, !dbg !7018
  %state = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %13, i32 0, i32 3, !dbg !7019
  %14 = bitcast %struct.anon* %state to i32*, !dbg !7020
  %bf.load = load i32, i32* %14, align 4, !dbg !7020
  %bf.lshr = lshr i32 %bf.load, 7, !dbg !7020
  %bf.clear = and i32 %bf.lshr, 1, !dbg !7020
  %tobool1 = icmp ne i32 %bf.clear, 0, !dbg !7021
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7021

cond.true:                                        ; preds = %if.end
  br label %cond.end, !dbg !7022

cond.false:                                       ; preds = %if.end
  %15 = load %struct._object*, %struct._object** %hexobj, align 8, !dbg !7024, !tbaa !2119
  %call2 = call i32 @_PyUnicode_Ready(%struct._object* %15), !dbg !7026
  br label %cond.end, !dbg !7021

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %call2, %cond.false ], !dbg !7021
  %tobool3 = icmp ne i32 %cond, 0, !dbg !7027
  br i1 %tobool3, label %if.then.4, label %if.end.5, !dbg !7030

if.then.4:                                        ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval, !dbg !7031
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7031

if.end.5:                                         ; preds = %cond.end
  %16 = load %struct._object*, %struct._object** %hexobj, align 8, !dbg !7032, !tbaa !2119
  %17 = bitcast %struct._object* %16 to %struct.PyASCIIObject*, !dbg !7033
  %state6 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %17, i32 0, i32 3, !dbg !7034
  %18 = bitcast %struct.anon* %state6 to i32*, !dbg !7035
  %bf.load7 = load i32, i32* %18, align 4, !dbg !7035
  %bf.lshr8 = lshr i32 %bf.load7, 2, !dbg !7035
  %bf.clear9 = and i32 %bf.lshr8, 7, !dbg !7035
  store i32 %bf.clear9, i32* %kind, align 4, !dbg !7036, !tbaa !2676
  %19 = load %struct._object*, %struct._object** %hexobj, align 8, !dbg !7037, !tbaa !2119
  %20 = bitcast %struct._object* %19 to %struct.PyASCIIObject*, !dbg !7038
  %state10 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %20, i32 0, i32 3, !dbg !7039
  %21 = bitcast %struct.anon* %state10 to i32*, !dbg !7040
  %bf.load11 = load i32, i32* %21, align 4, !dbg !7040
  %bf.lshr12 = lshr i32 %bf.load11, 5, !dbg !7040
  %bf.clear13 = and i32 %bf.lshr12, 1, !dbg !7040
  %tobool14 = icmp ne i32 %bf.clear13, 0, !dbg !7041
  br i1 %tobool14, label %cond.true.15, label %cond.false.26, !dbg !7041

cond.true.15:                                     ; preds = %if.end.5
  %22 = load %struct._object*, %struct._object** %hexobj, align 8, !dbg !7042, !tbaa !2119
  %23 = bitcast %struct._object* %22 to %struct.PyASCIIObject*, !dbg !7044
  %state16 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %23, i32 0, i32 3, !dbg !7045
  %24 = bitcast %struct.anon* %state16 to i32*, !dbg !7046
  %bf.load17 = load i32, i32* %24, align 4, !dbg !7046
  %bf.lshr18 = lshr i32 %bf.load17, 6, !dbg !7046
  %bf.clear19 = and i32 %bf.lshr18, 1, !dbg !7046
  %tobool20 = icmp ne i32 %bf.clear19, 0, !dbg !7047
  br i1 %tobool20, label %cond.true.21, label %cond.false.22, !dbg !7047

cond.true.21:                                     ; preds = %cond.true.15
  %25 = load %struct._object*, %struct._object** %hexobj, align 8, !dbg !7048, !tbaa !2119
  %26 = bitcast %struct._object* %25 to %struct.PyASCIIObject*, !dbg !7050
  %add.ptr = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %26, i64 1, !dbg !7051
  %27 = bitcast %struct.PyASCIIObject* %add.ptr to i8*, !dbg !7052
  br label %cond.end.24, !dbg !7047

cond.false.22:                                    ; preds = %cond.true.15
  %28 = load %struct._object*, %struct._object** %hexobj, align 8, !dbg !7053, !tbaa !2119
  %29 = bitcast %struct._object* %28 to %struct.PyCompactUnicodeObject*, !dbg !7055
  %add.ptr23 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %29, i64 1, !dbg !7056
  %30 = bitcast %struct.PyCompactUnicodeObject* %add.ptr23 to i8*, !dbg !7057
  br label %cond.end.24, !dbg !7047

cond.end.24:                                      ; preds = %cond.false.22, %cond.true.21
  %cond25 = phi i8* [ %27, %cond.true.21 ], [ %30, %cond.false.22 ], !dbg !7047
  br label %cond.end.28, !dbg !7058

cond.false.26:                                    ; preds = %if.end.5
  %31 = load %struct._object*, %struct._object** %hexobj, align 8, !dbg !7061, !tbaa !2119
  %32 = bitcast %struct._object* %31 to %struct.PyUnicodeObject*, !dbg !7063
  %data27 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %32, i32 0, i32 1, !dbg !7064
  %any = bitcast %union.anon* %data27 to i8**, !dbg !7065
  %33 = load i8*, i8** %any, align 8, !dbg !7065, !tbaa !2119
  br label %cond.end.28, !dbg !7041

cond.end.28:                                      ; preds = %cond.false.26, %cond.end.24
  %cond29 = phi i8* [ %cond25, %cond.end.24 ], [ %33, %cond.false.26 ], !dbg !7041
  store i8* %cond29, i8** %data, align 8, !dbg !7066, !tbaa !2119
  %34 = load %struct._object*, %struct._object** %hexobj, align 8, !dbg !7069, !tbaa !2119
  %35 = bitcast %struct._object* %34 to %struct.PyASCIIObject*, !dbg !7070
  %length = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %35, i32 0, i32 1, !dbg !7071
  %36 = load i64, i64* %length, align 8, !dbg !7071, !tbaa !7072
  store i64 %36, i64* %hexlen, align 8, !dbg !7075, !tbaa !2129
  %37 = load i64, i64* %hexlen, align 8, !dbg !7076, !tbaa !2129
  %div = sdiv i64 %37, 2, !dbg !7077
  store i64 %div, i64* %byteslen, align 8, !dbg !7078, !tbaa !2129
  %38 = load i64, i64* %byteslen, align 8, !dbg !7079, !tbaa !2129
  %call30 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %38), !dbg !7080
  store %struct._object* %call30, %struct._object** %newbytes, align 8, !dbg !7081, !tbaa !2119
  %39 = load %struct._object*, %struct._object** %newbytes, align 8, !dbg !7082, !tbaa !2119
  %tobool31 = icmp ne %struct._object* %39, null, !dbg !7082
  br i1 %tobool31, label %if.end.33, label %if.then.32, !dbg !7084

if.then.32:                                       ; preds = %cond.end.28
  store %struct._object* null, %struct._object** %retval, !dbg !7085
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7085

if.end.33:                                        ; preds = %cond.end.28
  %40 = load %struct._object*, %struct._object** %newbytes, align 8, !dbg !7086, !tbaa !2119
  %41 = bitcast %struct._object* %40 to %struct.PyVarObject*, !dbg !7087
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %41, i32 0, i32 1, !dbg !7088
  %42 = load i64, i64* %ob_size, align 8, !dbg !7088, !tbaa !2239
  %tobool34 = icmp ne i64 %42, 0, !dbg !7089
  br i1 %tobool34, label %cond.true.35, label %cond.false.36, !dbg !7089

cond.true.35:                                     ; preds = %if.end.33
  %43 = load %struct._object*, %struct._object** %newbytes, align 8, !dbg !7090, !tbaa !2119
  %44 = bitcast %struct._object* %43 to %struct.PyByteArrayObject*, !dbg !7091
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %44, i32 0, i32 3, !dbg !7092
  %45 = load i8*, i8** %ob_start, align 8, !dbg !7092, !tbaa !2250
  br label %cond.end.37, !dbg !7089

cond.false.36:                                    ; preds = %if.end.33
  br label %cond.end.37, !dbg !7093

cond.end.37:                                      ; preds = %cond.false.36, %cond.true.35
  %cond38 = phi i8* [ %45, %cond.true.35 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.36 ], !dbg !7089
  store i8* %cond38, i8** %buf, align 8, !dbg !7094, !tbaa !2119
  store i64 0, i64* %j, align 8, !dbg !7096, !tbaa !2129
  store i64 0, i64* %i, align 8, !dbg !7098, !tbaa !2129
  br label %for.cond, !dbg !7099

for.cond:                                         ; preds = %for.inc, %cond.end.37
  %46 = load i64, i64* %i, align 8, !dbg !7100, !tbaa !2129
  %47 = load i64, i64* %hexlen, align 8, !dbg !7104, !tbaa !2129
  %cmp = icmp slt i64 %46, %47, !dbg !7105
  br i1 %cmp, label %for.body, label %for.end, !dbg !7106

for.body:                                         ; preds = %for.cond
  br label %while.cond, !dbg !7107

while.cond:                                       ; preds = %while.body, %for.body
  %48 = load i32, i32* %kind, align 4, !dbg !7109, !tbaa !2676
  %cmp39 = icmp eq i32 %48, 1, !dbg !7112
  br i1 %cmp39, label %cond.true.40, label %cond.false.41, !dbg !7113

cond.true.40:                                     ; preds = %while.cond
  %49 = load i64, i64* %i, align 8, !dbg !7114, !tbaa !2129
  %50 = load i8*, i8** %data, align 8, !dbg !7116, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %50, i64 %49, !dbg !7117
  %51 = load i8, i8* %arrayidx, align 1, !dbg !7117, !tbaa !2233
  %conv = zext i8 %51 to i32, !dbg !7117
  br label %cond.end.51, !dbg !7113

cond.false.41:                                    ; preds = %while.cond
  %52 = load i32, i32* %kind, align 4, !dbg !7118, !tbaa !2676
  %cmp42 = icmp eq i32 %52, 2, !dbg !7120
  br i1 %cmp42, label %cond.true.44, label %cond.false.47, !dbg !7121

cond.true.44:                                     ; preds = %cond.false.41
  %53 = load i64, i64* %i, align 8, !dbg !7122, !tbaa !2129
  %54 = load i8*, i8** %data, align 8, !dbg !7124, !tbaa !2119
  %55 = bitcast i8* %54 to i16*, !dbg !7125
  %arrayidx45 = getelementptr i16, i16* %55, i64 %53, !dbg !7126
  %56 = load i16, i16* %arrayidx45, align 2, !dbg !7126, !tbaa !7127
  %conv46 = zext i16 %56 to i32, !dbg !7126
  br label %cond.end.49, !dbg !7121

cond.false.47:                                    ; preds = %cond.false.41
  %57 = load i64, i64* %i, align 8, !dbg !7129, !tbaa !2129
  %58 = load i8*, i8** %data, align 8, !dbg !7131, !tbaa !2119
  %59 = bitcast i8* %58 to i32*, !dbg !7132
  %arrayidx48 = getelementptr i32, i32* %59, i64 %57, !dbg !7133
  %60 = load i32, i32* %arrayidx48, align 4, !dbg !7133, !tbaa !2676
  br label %cond.end.49, !dbg !7121

cond.end.49:                                      ; preds = %cond.false.47, %cond.true.44
  %cond50 = phi i32 [ %conv46, %cond.true.44 ], [ %60, %cond.false.47 ], !dbg !7121
  br label %cond.end.51, !dbg !7134

cond.end.51:                                      ; preds = %cond.end.49, %cond.true.40
  %cond52 = phi i32 [ %conv, %cond.true.40 ], [ %cond50, %cond.end.49 ], !dbg !7113
  %cmp53 = icmp eq i32 %cond52, 32, !dbg !7137
  br i1 %cmp53, label %while.body, label %while.end, !dbg !7107

while.body:                                       ; preds = %cond.end.51
  %61 = load i64, i64* %i, align 8, !dbg !7140, !tbaa !2129
  %inc = add i64 %61, 1, !dbg !7140
  store i64 %inc, i64* %i, align 8, !dbg !7140, !tbaa !2129
  br label %while.cond, !dbg !7107

while.end:                                        ; preds = %cond.end.51
  %62 = load i64, i64* %i, align 8, !dbg !7141, !tbaa !2129
  %63 = load i64, i64* %hexlen, align 8, !dbg !7143, !tbaa !2129
  %cmp55 = icmp sge i64 %62, %63, !dbg !7144
  br i1 %cmp55, label %if.then.57, label %if.end.58, !dbg !7145

if.then.57:                                       ; preds = %while.end
  br label %for.end, !dbg !7146

if.end.58:                                        ; preds = %while.end
  %64 = load i32, i32* %kind, align 4, !dbg !7147, !tbaa !2676
  %cmp59 = icmp eq i32 %64, 1, !dbg !7148
  br i1 %cmp59, label %cond.true.61, label %cond.false.64, !dbg !7149

cond.true.61:                                     ; preds = %if.end.58
  %65 = load i64, i64* %i, align 8, !dbg !7150, !tbaa !2129
  %66 = load i8*, i8** %data, align 8, !dbg !7151, !tbaa !2119
  %arrayidx62 = getelementptr i8, i8* %66, i64 %65, !dbg !7152
  %67 = load i8, i8* %arrayidx62, align 1, !dbg !7152, !tbaa !2233
  %conv63 = zext i8 %67 to i32, !dbg !7152
  br label %cond.end.74, !dbg !7149

cond.false.64:                                    ; preds = %if.end.58
  %68 = load i32, i32* %kind, align 4, !dbg !7153, !tbaa !2676
  %cmp65 = icmp eq i32 %68, 2, !dbg !7154
  br i1 %cmp65, label %cond.true.67, label %cond.false.70, !dbg !7155

cond.true.67:                                     ; preds = %cond.false.64
  %69 = load i64, i64* %i, align 8, !dbg !7156, !tbaa !2129
  %70 = load i8*, i8** %data, align 8, !dbg !7157, !tbaa !2119
  %71 = bitcast i8* %70 to i16*, !dbg !7158
  %arrayidx68 = getelementptr i16, i16* %71, i64 %69, !dbg !7159
  %72 = load i16, i16* %arrayidx68, align 2, !dbg !7159, !tbaa !7127
  %conv69 = zext i16 %72 to i32, !dbg !7159
  br label %cond.end.72, !dbg !7155

cond.false.70:                                    ; preds = %cond.false.64
  %73 = load i64, i64* %i, align 8, !dbg !7160, !tbaa !2129
  %74 = load i8*, i8** %data, align 8, !dbg !7161, !tbaa !2119
  %75 = bitcast i8* %74 to i32*, !dbg !7162
  %arrayidx71 = getelementptr i32, i32* %75, i64 %73, !dbg !7163
  %76 = load i32, i32* %arrayidx71, align 4, !dbg !7163, !tbaa !2676
  br label %cond.end.72, !dbg !7155

cond.end.72:                                      ; preds = %cond.false.70, %cond.true.67
  %cond73 = phi i32 [ %conv69, %cond.true.67 ], [ %76, %cond.false.70 ], !dbg !7155
  br label %cond.end.74, !dbg !7164

cond.end.74:                                      ; preds = %cond.end.72, %cond.true.61
  %cond75 = phi i32 [ %conv63, %cond.true.61 ], [ %cond73, %cond.end.72 ], !dbg !7149
  %call76 = call i32 @hex_digit_to_int(i32 %cond75), !dbg !7166
  store i32 %call76, i32* %top, align 4, !dbg !7168, !tbaa !2676
  %77 = load i32, i32* %kind, align 4, !dbg !7169, !tbaa !2676
  %cmp77 = icmp eq i32 %77, 1, !dbg !7170
  br i1 %cmp77, label %cond.true.79, label %cond.false.82, !dbg !7171

cond.true.79:                                     ; preds = %cond.end.74
  %78 = load i64, i64* %i, align 8, !dbg !7172, !tbaa !2129
  %add = add i64 %78, 1, !dbg !7173
  %79 = load i8*, i8** %data, align 8, !dbg !7174, !tbaa !2119
  %arrayidx80 = getelementptr i8, i8* %79, i64 %add, !dbg !7175
  %80 = load i8, i8* %arrayidx80, align 1, !dbg !7175, !tbaa !2233
  %conv81 = zext i8 %80 to i32, !dbg !7175
  br label %cond.end.94, !dbg !7171

cond.false.82:                                    ; preds = %cond.end.74
  %81 = load i32, i32* %kind, align 4, !dbg !7176, !tbaa !2676
  %cmp83 = icmp eq i32 %81, 2, !dbg !7177
  br i1 %cmp83, label %cond.true.85, label %cond.false.89, !dbg !7178

cond.true.85:                                     ; preds = %cond.false.82
  %82 = load i64, i64* %i, align 8, !dbg !7179, !tbaa !2129
  %add86 = add i64 %82, 1, !dbg !7180
  %83 = load i8*, i8** %data, align 8, !dbg !7181, !tbaa !2119
  %84 = bitcast i8* %83 to i16*, !dbg !7182
  %arrayidx87 = getelementptr i16, i16* %84, i64 %add86, !dbg !7183
  %85 = load i16, i16* %arrayidx87, align 2, !dbg !7183, !tbaa !7127
  %conv88 = zext i16 %85 to i32, !dbg !7183
  br label %cond.end.92, !dbg !7178

cond.false.89:                                    ; preds = %cond.false.82
  %86 = load i64, i64* %i, align 8, !dbg !7184, !tbaa !2129
  %add90 = add i64 %86, 1, !dbg !7185
  %87 = load i8*, i8** %data, align 8, !dbg !7186, !tbaa !2119
  %88 = bitcast i8* %87 to i32*, !dbg !7187
  %arrayidx91 = getelementptr i32, i32* %88, i64 %add90, !dbg !7188
  %89 = load i32, i32* %arrayidx91, align 4, !dbg !7188, !tbaa !2676
  br label %cond.end.92, !dbg !7178

cond.end.92:                                      ; preds = %cond.false.89, %cond.true.85
  %cond93 = phi i32 [ %conv88, %cond.true.85 ], [ %89, %cond.false.89 ], !dbg !7178
  br label %cond.end.94, !dbg !7189

cond.end.94:                                      ; preds = %cond.end.92, %cond.true.79
  %cond95 = phi i32 [ %conv81, %cond.true.79 ], [ %cond93, %cond.end.92 ], !dbg !7171
  %call96 = call i32 @hex_digit_to_int(i32 %cond95), !dbg !7190
  store i32 %call96, i32* %bot, align 4, !dbg !7191, !tbaa !2676
  %90 = load i32, i32* %top, align 4, !dbg !7192, !tbaa !2676
  %cmp97 = icmp eq i32 %90, -1, !dbg !7194
  br i1 %cmp97, label %if.then.101, label %lor.lhs.false, !dbg !7195

lor.lhs.false:                                    ; preds = %cond.end.94
  %91 = load i32, i32* %bot, align 4, !dbg !7196, !tbaa !2676
  %cmp99 = icmp eq i32 %91, -1, !dbg !7198
  br i1 %cmp99, label %if.then.101, label %if.end.103, !dbg !7199

if.then.101:                                      ; preds = %lor.lhs.false, %cond.end.94
  %92 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !7200, !tbaa !2119
  %93 = load i64, i64* %i, align 8, !dbg !7202, !tbaa !2129
  %call102 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %92, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.88, i32 0, i32 0), i64 %93), !dbg !7203
  br label %error, !dbg !7204

if.end.103:                                       ; preds = %lor.lhs.false
  %94 = load i32, i32* %top, align 4, !dbg !7205, !tbaa !2676
  %shl = shl i32 %94, 4, !dbg !7206
  %95 = load i32, i32* %bot, align 4, !dbg !7207, !tbaa !2676
  %add104 = add i32 %shl, %95, !dbg !7208
  %conv105 = trunc i32 %add104 to i8, !dbg !7209
  %96 = load i64, i64* %j, align 8, !dbg !7210, !tbaa !2129
  %inc106 = add i64 %96, 1, !dbg !7210
  store i64 %inc106, i64* %j, align 8, !dbg !7210, !tbaa !2129
  %97 = load i8*, i8** %buf, align 8, !dbg !7211, !tbaa !2119
  %arrayidx107 = getelementptr i8, i8* %97, i64 %96, !dbg !7211
  store i8 %conv105, i8* %arrayidx107, align 1, !dbg !7212, !tbaa !2233
  br label %for.inc, !dbg !7213

for.inc:                                          ; preds = %if.end.103
  %98 = load i64, i64* %i, align 8, !dbg !7214, !tbaa !2129
  %add108 = add i64 %98, 2, !dbg !7214
  store i64 %add108, i64* %i, align 8, !dbg !7214, !tbaa !2129
  br label %for.cond, !dbg !7215

for.end:                                          ; preds = %if.then.57, %for.cond
  %99 = load %struct._object*, %struct._object** %newbytes, align 8, !dbg !7216, !tbaa !2119
  %100 = load i64, i64* %j, align 8, !dbg !7218, !tbaa !2129
  %call109 = call i32 @PyByteArray_Resize(%struct._object* %99, i64 %100), !dbg !7219
  %cmp110 = icmp slt i32 %call109, 0, !dbg !7220
  br i1 %cmp110, label %if.then.112, label %if.end.113, !dbg !7221

if.then.112:                                      ; preds = %for.end
  br label %error, !dbg !7222

if.end.113:                                       ; preds = %for.end
  %101 = load %struct._object*, %struct._object** %newbytes, align 8, !dbg !7223, !tbaa !2119
  store %struct._object* %101, %struct._object** %retval, !dbg !7224
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7224

error:                                            ; preds = %if.then.112, %if.then.101
  br label %do.body, !dbg !7225

do.body:                                          ; preds = %error
  %102 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7226
  call void @llvm.lifetime.start(i64 8, i8* %102) #3, !dbg !7226
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1078, metadata !2123), !dbg !7228
  %103 = load %struct._object*, %struct._object** %newbytes, align 8, !dbg !7229, !tbaa !2119
  store %struct._object* %103, %struct._object** %_py_decref_tmp, align 8, !dbg !7228, !tbaa !2119
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7230, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 0, !dbg !7232
  %105 = load i64, i64* %ob_refcnt, align 8, !dbg !7233, !tbaa !2195
  %dec = add i64 %105, -1, !dbg !7233
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !7233, !tbaa !2195
  %cmp114 = icmp ne i64 %dec, 0, !dbg !7234
  br i1 %cmp114, label %if.then.116, label %if.else, !dbg !7235

if.then.116:                                      ; preds = %do.body
  br label %if.end.117, !dbg !7236

if.else:                                          ; preds = %do.body
  %106 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7238, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 1, !dbg !7240
  %107 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7240, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %107, i32 0, i32 4, !dbg !7241
  %108 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7241, !tbaa !2205
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7242, !tbaa !2119
  call void %108(%struct._object* %109), !dbg !7243
  br label %if.end.117

if.end.117:                                       ; preds = %if.else, %if.then.116
  %110 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7244
  call void @llvm.lifetime.end(i64 8, i8* %110) #3, !dbg !7244
  br label %do.cond, !dbg !7245

do.cond:                                          ; preds = %if.end.117
  br label %do.end, !dbg !7246

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !7248
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7248

cleanup:                                          ; preds = %do.end, %if.end.113, %if.then.32, %if.then.4, %if.then
  %111 = bitcast i32* %kind to i8*, !dbg !7249
  call void @llvm.lifetime.end(i64 4, i8* %111) #3, !dbg !7249
  %112 = bitcast i8** %data to i8*, !dbg !7249
  call void @llvm.lifetime.end(i64 8, i8* %112) #3, !dbg !7249
  %113 = bitcast i32* %bot to i8*, !dbg !7249
  call void @llvm.lifetime.end(i64 4, i8* %113) #3, !dbg !7249
  %114 = bitcast i32* %top to i8*, !dbg !7249
  call void @llvm.lifetime.end(i64 4, i8* %114) #3, !dbg !7249
  %115 = bitcast i64* %j to i8*, !dbg !7249
  call void @llvm.lifetime.end(i64 8, i8* %115) #3, !dbg !7249
  %116 = bitcast i64* %i to i8*, !dbg !7249
  call void @llvm.lifetime.end(i64 8, i8* %116) #3, !dbg !7249
  %117 = bitcast i64* %byteslen to i8*, !dbg !7249
  call void @llvm.lifetime.end(i64 8, i8* %117) #3, !dbg !7249
  %118 = bitcast i64* %hexlen to i8*, !dbg !7249
  call void @llvm.lifetime.end(i64 8, i8* %118) #3, !dbg !7249
  %119 = bitcast i8** %buf to i8*, !dbg !7249
  call void @llvm.lifetime.end(i64 8, i8* %119) #3, !dbg !7249
  %120 = bitcast %struct._object** %hexobj to i8*, !dbg !7249
  call void @llvm.lifetime.end(i64 8, i8* %120) #3, !dbg !7249
  %121 = bitcast %struct._object** %newbytes to i8*, !dbg !7249
  call void @llvm.lifetime.end(i64 8, i8* %121) #3, !dbg !7249
  %122 = load %struct._object*, %struct._object** %retval, !dbg !7249
  ret %struct._object* %122, !dbg !7249
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_index(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %result = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1087, metadata !2123), !dbg !7250
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1088, metadata !2123), !dbg !7251
  %0 = bitcast i64* %result to i8*, !dbg !7252
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !7252
  call void @llvm.dbg.declare(metadata i64* %result, metadata !1089, metadata !2123), !dbg !7253
  %1 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7254, !tbaa !2119
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7255, !tbaa !2119
  %call = call i64 @bytearray_find_internal(%struct.PyByteArrayObject* %1, %struct._object* %2, i32 1), !dbg !7256
  store i64 %call, i64* %result, align 8, !dbg !7253, !tbaa !2129
  %3 = load i64, i64* %result, align 8, !dbg !7257, !tbaa !2129
  %cmp = icmp eq i64 %3, -2, !dbg !7259
  br i1 %cmp, label %if.then, label %if.end, !dbg !7260

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7261
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7261

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %result, align 8, !dbg !7262, !tbaa !2129
  %cmp1 = icmp eq i64 %4, -1, !dbg !7264
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !7265

if.then.2:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !7266, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.89, i32 0, i32 0)), !dbg !7268
  store %struct._object* null, %struct._object** %retval, !dbg !7269
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7269

if.end.3:                                         ; preds = %if.end
  %6 = load i64, i64* %result, align 8, !dbg !7270, !tbaa !2129
  %call4 = call %struct._object* @PyLong_FromSsize_t(i64 %6), !dbg !7271
  store %struct._object* %call4, %struct._object** %retval, !dbg !7272
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7272

cleanup:                                          ; preds = %if.end.3, %if.then.2, %if.then
  %7 = bitcast i64* %result to i8*, !dbg !7273
  call void @llvm.lifetime.end(i64 8, i8* %7) #3, !dbg !7273
  %8 = load %struct._object*, %struct._object** %retval, !dbg !7273
  ret %struct._object* %8, !dbg !7273
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_insert(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %ival = alloca i32, align 4
  %where = alloca i64, align 8
  %n = alloca i64, align 8
  %buf = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1092, metadata !2123), !dbg !7274
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1093, metadata !2123), !dbg !7275
  %0 = bitcast %struct._object** %value to i8*, !dbg !7276
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !7276
  call void @llvm.dbg.declare(metadata %struct._object** %value, metadata !1094, metadata !2123), !dbg !7277
  %1 = bitcast i32* %ival to i8*, !dbg !7278
  call void @llvm.lifetime.start(i64 4, i8* %1) #3, !dbg !7278
  call void @llvm.dbg.declare(metadata i32* %ival, metadata !1095, metadata !2123), !dbg !7279
  %2 = bitcast i64* %where to i8*, !dbg !7280
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !7280
  call void @llvm.dbg.declare(metadata i64* %where, metadata !1096, metadata !2123), !dbg !7281
  %3 = bitcast i64* %n to i8*, !dbg !7280
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !7280
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1097, metadata !2123), !dbg !7282
  %4 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7283, !tbaa !2119
  %5 = bitcast %struct.PyByteArrayObject* %4 to %struct.PyVarObject*, !dbg !7284
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %5, i32 0, i32 1, !dbg !7285
  %6 = load i64, i64* %ob_size, align 8, !dbg !7285, !tbaa !2239
  store i64 %6, i64* %n, align 8, !dbg !7282, !tbaa !2129
  %7 = bitcast i8** %buf to i8*, !dbg !7286
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !7286
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !1098, metadata !2123), !dbg !7287
  %8 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7288, !tbaa !2119
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.90, i32 0, i32 0), i64* %where, %struct._object** %value), !dbg !7290
  %tobool = icmp ne i32 %call, 0, !dbg !7290
  br i1 %tobool, label %if.end, label %if.then, !dbg !7291

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7292
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7292

if.end:                                           ; preds = %entry
  %9 = load i64, i64* %n, align 8, !dbg !7293, !tbaa !2129
  %cmp = icmp eq i64 %9, 9223372036854775807, !dbg !7295
  br i1 %cmp, label %if.then.1, label %if.end.2, !dbg !7296

if.then.1:                                        ; preds = %if.end
  %10 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !7297, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %10, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.77, i32 0, i32 0)), !dbg !7299
  store %struct._object* null, %struct._object** %retval, !dbg !7300
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7300

if.end.2:                                         ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %value, align 8, !dbg !7301, !tbaa !2119
  %call3 = call i32 @_getbytevalue(%struct._object* %11, i32* %ival), !dbg !7303
  %tobool4 = icmp ne i32 %call3, 0, !dbg !7303
  br i1 %tobool4, label %if.end.6, label %if.then.5, !dbg !7304

if.then.5:                                        ; preds = %if.end.2
  store %struct._object* null, %struct._object** %retval, !dbg !7305
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7305

if.end.6:                                         ; preds = %if.end.2
  %12 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7306, !tbaa !2119
  %13 = bitcast %struct.PyByteArrayObject* %12 to %struct._object*, !dbg !7308
  %14 = load i64, i64* %n, align 8, !dbg !7309, !tbaa !2129
  %add = add i64 %14, 1, !dbg !7310
  %call7 = call i32 @PyByteArray_Resize(%struct._object* %13, i64 %add), !dbg !7311
  %cmp8 = icmp slt i32 %call7, 0, !dbg !7312
  br i1 %cmp8, label %if.then.9, label %if.end.10, !dbg !7313

if.then.9:                                        ; preds = %if.end.6
  store %struct._object* null, %struct._object** %retval, !dbg !7314
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7314

if.end.10:                                        ; preds = %if.end.6
  %15 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7315, !tbaa !2119
  %16 = bitcast %struct.PyByteArrayObject* %15 to %struct.PyVarObject*, !dbg !7316
  %ob_size11 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %16, i32 0, i32 1, !dbg !7317
  %17 = load i64, i64* %ob_size11, align 8, !dbg !7317, !tbaa !2239
  %tobool12 = icmp ne i64 %17, 0, !dbg !7318
  br i1 %tobool12, label %cond.true, label %cond.false, !dbg !7318

cond.true:                                        ; preds = %if.end.10
  %18 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7319, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %18, i32 0, i32 3, !dbg !7321
  %19 = load i8*, i8** %ob_start, align 8, !dbg !7321, !tbaa !2250
  br label %cond.end, !dbg !7318

cond.false:                                       ; preds = %if.end.10
  br label %cond.end, !dbg !7322

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %19, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7318
  store i8* %cond, i8** %buf, align 8, !dbg !7324, !tbaa !2119
  %20 = load i64, i64* %where, align 8, !dbg !7327, !tbaa !2129
  %cmp13 = icmp slt i64 %20, 0, !dbg !7329
  br i1 %cmp13, label %if.then.14, label %if.end.19, !dbg !7330

if.then.14:                                       ; preds = %cond.end
  %21 = load i64, i64* %n, align 8, !dbg !7331, !tbaa !2129
  %22 = load i64, i64* %where, align 8, !dbg !7333, !tbaa !2129
  %add15 = add i64 %22, %21, !dbg !7333
  store i64 %add15, i64* %where, align 8, !dbg !7333, !tbaa !2129
  %23 = load i64, i64* %where, align 8, !dbg !7334, !tbaa !2129
  %cmp16 = icmp slt i64 %23, 0, !dbg !7336
  br i1 %cmp16, label %if.then.17, label %if.end.18, !dbg !7337

if.then.17:                                       ; preds = %if.then.14
  store i64 0, i64* %where, align 8, !dbg !7338, !tbaa !2129
  br label %if.end.18, !dbg !7339

if.end.18:                                        ; preds = %if.then.17, %if.then.14
  br label %if.end.19, !dbg !7340

if.end.19:                                        ; preds = %if.end.18, %cond.end
  %24 = load i64, i64* %where, align 8, !dbg !7341, !tbaa !2129
  %25 = load i64, i64* %n, align 8, !dbg !7343, !tbaa !2129
  %cmp20 = icmp sgt i64 %24, %25, !dbg !7344
  br i1 %cmp20, label %if.then.21, label %if.end.22, !dbg !7345

if.then.21:                                       ; preds = %if.end.19
  %26 = load i64, i64* %n, align 8, !dbg !7346, !tbaa !2129
  store i64 %26, i64* %where, align 8, !dbg !7347, !tbaa !2129
  br label %if.end.22, !dbg !7348

if.end.22:                                        ; preds = %if.then.21, %if.end.19
  %27 = load i8*, i8** %buf, align 8, !dbg !7349, !tbaa !2119
  %28 = load i64, i64* %where, align 8, !dbg !7350, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %27, i64 %28, !dbg !7351
  %add.ptr23 = getelementptr i8, i8* %add.ptr, i64 1, !dbg !7352
  %29 = load i8*, i8** %buf, align 8, !dbg !7353, !tbaa !2119
  %30 = load i64, i64* %where, align 8, !dbg !7354, !tbaa !2129
  %add.ptr24 = getelementptr i8, i8* %29, i64 %30, !dbg !7355
  %31 = load i64, i64* %n, align 8, !dbg !7356, !tbaa !2129
  %32 = load i64, i64* %where, align 8, !dbg !7357, !tbaa !2129
  %sub = sub i64 %31, %32, !dbg !7358
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr23, i8* %add.ptr24, i64 %sub, i32 1, i1 false), !dbg !7359
  %33 = load i32, i32* %ival, align 4, !dbg !7360, !tbaa !2676
  %conv = trunc i32 %33 to i8, !dbg !7360
  %34 = load i64, i64* %where, align 8, !dbg !7361, !tbaa !2129
  %35 = load i8*, i8** %buf, align 8, !dbg !7362, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %35, i64 %34, !dbg !7362
  store i8 %conv, i8* %arrayidx, align 1, !dbg !7363, !tbaa !2233
  %36 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !7364, !tbaa !2195
  %inc = add i64 %36, 1, !dbg !7364
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !7364, !tbaa !2195
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !7365
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7365

cleanup:                                          ; preds = %if.end.22, %if.then.9, %if.then.5, %if.then.1, %if.then
  %37 = bitcast i8** %buf to i8*, !dbg !7366
  call void @llvm.lifetime.end(i64 8, i8* %37) #3, !dbg !7366
  %38 = bitcast i64* %n to i8*, !dbg !7366
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !7366
  %39 = bitcast i64* %where to i8*, !dbg !7366
  call void @llvm.lifetime.end(i64 8, i8* %39) #3, !dbg !7366
  %40 = bitcast i32* %ival to i8*, !dbg !7366
  call void @llvm.lifetime.end(i64 4, i8* %40) #3, !dbg !7366
  %41 = bitcast %struct._object** %value to i8*, !dbg !7366
  call void @llvm.lifetime.end(i64 8, i8* %41) #3, !dbg !7366
  %42 = load %struct._object*, %struct._object** %retval, !dbg !7366
  ret %struct._object* %42, !dbg !7366
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_isalnum(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1101, metadata !2123), !dbg !7367
  %0 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7368, !tbaa !2119
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*, !dbg !7369
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1, !dbg !7370
  %2 = load i64, i64* %ob_size, align 8, !dbg !7370, !tbaa !2239
  %tobool = icmp ne i64 %2, 0, !dbg !7371
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7371

cond.true:                                        ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7372, !tbaa !2119
  %4 = bitcast %struct._object* %3 to %struct.PyByteArrayObject*, !dbg !7374
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %4, i32 0, i32 3, !dbg !7375
  %5 = load i8*, i8** %ob_start, align 8, !dbg !7375, !tbaa !2250
  br label %cond.end, !dbg !7371

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7376

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %5, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7371
  %6 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7378, !tbaa !2119
  %7 = bitcast %struct._object* %6 to %struct.PyVarObject*, !dbg !7381
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %7, i32 0, i32 1, !dbg !7382
  %8 = load i64, i64* %ob_size1, align 8, !dbg !7382, !tbaa !2239
  %call = call %struct._object* @_Py_bytes_isalnum(i8* %cond, i64 %8), !dbg !7383
  ret %struct._object* %call, !dbg !7384
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_isalpha(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1104, metadata !2123), !dbg !7385
  %0 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7386, !tbaa !2119
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*, !dbg !7387
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1, !dbg !7388
  %2 = load i64, i64* %ob_size, align 8, !dbg !7388, !tbaa !2239
  %tobool = icmp ne i64 %2, 0, !dbg !7389
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7389

cond.true:                                        ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7390, !tbaa !2119
  %4 = bitcast %struct._object* %3 to %struct.PyByteArrayObject*, !dbg !7392
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %4, i32 0, i32 3, !dbg !7393
  %5 = load i8*, i8** %ob_start, align 8, !dbg !7393, !tbaa !2250
  br label %cond.end, !dbg !7389

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7394

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %5, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7389
  %6 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7396, !tbaa !2119
  %7 = bitcast %struct._object* %6 to %struct.PyVarObject*, !dbg !7399
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %7, i32 0, i32 1, !dbg !7400
  %8 = load i64, i64* %ob_size1, align 8, !dbg !7400, !tbaa !2239
  %call = call %struct._object* @_Py_bytes_isalpha(i8* %cond, i64 %8), !dbg !7401
  ret %struct._object* %call, !dbg !7402
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_isdigit(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1107, metadata !2123), !dbg !7403
  %0 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7404, !tbaa !2119
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*, !dbg !7405
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1, !dbg !7406
  %2 = load i64, i64* %ob_size, align 8, !dbg !7406, !tbaa !2239
  %tobool = icmp ne i64 %2, 0, !dbg !7407
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7407

cond.true:                                        ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7408, !tbaa !2119
  %4 = bitcast %struct._object* %3 to %struct.PyByteArrayObject*, !dbg !7410
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %4, i32 0, i32 3, !dbg !7411
  %5 = load i8*, i8** %ob_start, align 8, !dbg !7411, !tbaa !2250
  br label %cond.end, !dbg !7407

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7412

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %5, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7407
  %6 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7414, !tbaa !2119
  %7 = bitcast %struct._object* %6 to %struct.PyVarObject*, !dbg !7417
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %7, i32 0, i32 1, !dbg !7418
  %8 = load i64, i64* %ob_size1, align 8, !dbg !7418, !tbaa !2239
  %call = call %struct._object* @_Py_bytes_isdigit(i8* %cond, i64 %8), !dbg !7419
  ret %struct._object* %call, !dbg !7420
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_islower(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1110, metadata !2123), !dbg !7421
  %0 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7422, !tbaa !2119
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*, !dbg !7423
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1, !dbg !7424
  %2 = load i64, i64* %ob_size, align 8, !dbg !7424, !tbaa !2239
  %tobool = icmp ne i64 %2, 0, !dbg !7425
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7425

cond.true:                                        ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7426, !tbaa !2119
  %4 = bitcast %struct._object* %3 to %struct.PyByteArrayObject*, !dbg !7428
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %4, i32 0, i32 3, !dbg !7429
  %5 = load i8*, i8** %ob_start, align 8, !dbg !7429, !tbaa !2250
  br label %cond.end, !dbg !7425

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7430

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %5, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7425
  %6 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7432, !tbaa !2119
  %7 = bitcast %struct._object* %6 to %struct.PyVarObject*, !dbg !7435
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %7, i32 0, i32 1, !dbg !7436
  %8 = load i64, i64* %ob_size1, align 8, !dbg !7436, !tbaa !2239
  %call = call %struct._object* @_Py_bytes_islower(i8* %cond, i64 %8), !dbg !7437
  ret %struct._object* %call, !dbg !7438
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_isspace(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1113, metadata !2123), !dbg !7439
  %0 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7440, !tbaa !2119
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*, !dbg !7441
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1, !dbg !7442
  %2 = load i64, i64* %ob_size, align 8, !dbg !7442, !tbaa !2239
  %tobool = icmp ne i64 %2, 0, !dbg !7443
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7443

cond.true:                                        ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7444, !tbaa !2119
  %4 = bitcast %struct._object* %3 to %struct.PyByteArrayObject*, !dbg !7446
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %4, i32 0, i32 3, !dbg !7447
  %5 = load i8*, i8** %ob_start, align 8, !dbg !7447, !tbaa !2250
  br label %cond.end, !dbg !7443

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7448

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %5, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7443
  %6 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7450, !tbaa !2119
  %7 = bitcast %struct._object* %6 to %struct.PyVarObject*, !dbg !7453
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %7, i32 0, i32 1, !dbg !7454
  %8 = load i64, i64* %ob_size1, align 8, !dbg !7454, !tbaa !2239
  %call = call %struct._object* @_Py_bytes_isspace(i8* %cond, i64 %8), !dbg !7455
  ret %struct._object* %call, !dbg !7456
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_istitle(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1116, metadata !2123), !dbg !7457
  %0 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7458, !tbaa !2119
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*, !dbg !7459
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1, !dbg !7460
  %2 = load i64, i64* %ob_size, align 8, !dbg !7460, !tbaa !2239
  %tobool = icmp ne i64 %2, 0, !dbg !7461
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7461

cond.true:                                        ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7462, !tbaa !2119
  %4 = bitcast %struct._object* %3 to %struct.PyByteArrayObject*, !dbg !7464
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %4, i32 0, i32 3, !dbg !7465
  %5 = load i8*, i8** %ob_start, align 8, !dbg !7465, !tbaa !2250
  br label %cond.end, !dbg !7461

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7466

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %5, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7461
  %6 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7468, !tbaa !2119
  %7 = bitcast %struct._object* %6 to %struct.PyVarObject*, !dbg !7471
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %7, i32 0, i32 1, !dbg !7472
  %8 = load i64, i64* %ob_size1, align 8, !dbg !7472, !tbaa !2239
  %call = call %struct._object* @_Py_bytes_istitle(i8* %cond, i64 %8), !dbg !7473
  ret %struct._object* %call, !dbg !7474
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_isupper(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1119, metadata !2123), !dbg !7475
  %0 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7476, !tbaa !2119
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*, !dbg !7477
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1, !dbg !7478
  %2 = load i64, i64* %ob_size, align 8, !dbg !7478, !tbaa !2239
  %tobool = icmp ne i64 %2, 0, !dbg !7479
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7479

cond.true:                                        ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7480, !tbaa !2119
  %4 = bitcast %struct._object* %3 to %struct.PyByteArrayObject*, !dbg !7482
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %4, i32 0, i32 3, !dbg !7483
  %5 = load i8*, i8** %ob_start, align 8, !dbg !7483, !tbaa !2250
  br label %cond.end, !dbg !7479

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7484

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %5, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7479
  %6 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7486, !tbaa !2119
  %7 = bitcast %struct._object* %6 to %struct.PyVarObject*, !dbg !7489
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %7, i32 0, i32 1, !dbg !7490
  %8 = load i64, i64* %ob_size1, align 8, !dbg !7490, !tbaa !2239
  %call = call %struct._object* @_Py_bytes_isupper(i8* %cond, i64 %8), !dbg !7491
  ret %struct._object* %call, !dbg !7492
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_join(%struct._object* %self, %struct._object* %iterable) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %iterable.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1122, metadata !2123), !dbg !7493
  store %struct._object* %iterable, %struct._object** %iterable.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %iterable.addr, metadata !1123, metadata !2123), !dbg !7494
  %0 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7495, !tbaa !2119
  %1 = load %struct._object*, %struct._object** %iterable.addr, align 8, !dbg !7496, !tbaa !2119
  %call = call %struct._object* @stringlib_bytes_join(%struct._object* %0, %struct._object* %1), !dbg !7497
  ret %struct._object* %call, !dbg !7498
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_ljust(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %width = alloca i64, align 8
  %fillchar = alloca i8, align 1
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1175, metadata !2123), !dbg !7499
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1176, metadata !2123), !dbg !7500
  %0 = bitcast i64* %width to i8*, !dbg !7501
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !7501
  call void @llvm.dbg.declare(metadata i64* %width, metadata !1177, metadata !2123), !dbg !7502
  call void @llvm.lifetime.start(i64 1, i8* %fillchar) #3, !dbg !7503
  call void @llvm.dbg.declare(metadata i8* %fillchar, metadata !1178, metadata !2123), !dbg !7504
  store i8 32, i8* %fillchar, align 1, !dbg !7504, !tbaa !2233
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7505, !tbaa !2119
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.95, i32 0, i32 0), i64* %width, i8* %fillchar), !dbg !7507
  %tobool = icmp ne i32 %call, 0, !dbg !7507
  br i1 %tobool, label %if.end, label %if.then, !dbg !7508

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7509
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7509

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7510, !tbaa !2119
  %3 = bitcast %struct._object* %2 to %struct.PyVarObject*, !dbg !7512
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1, !dbg !7513
  %4 = load i64, i64* %ob_size, align 8, !dbg !7513, !tbaa !2239
  %5 = load i64, i64* %width, align 8, !dbg !7514, !tbaa !2129
  %cmp = icmp sge i64 %4, %5, !dbg !7515
  br i1 %cmp, label %land.lhs.true, label %if.end.7, !dbg !7516

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7517, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1, !dbg !7519
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7519, !tbaa !2203
  %cmp1 = icmp eq %struct._typeobject* %7, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyByteArray_Type to %struct._typeobject*), !dbg !7520
  br i1 %cmp1, label %if.then.2, label %if.end.7, !dbg !7521

if.then.2:                                        ; preds = %land.lhs.true
  %8 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7522, !tbaa !2119
  %9 = bitcast %struct._object* %8 to %struct.PyVarObject*, !dbg !7524
  %ob_size3 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %9, i32 0, i32 1, !dbg !7525
  %10 = load i64, i64* %ob_size3, align 8, !dbg !7525, !tbaa !2239
  %tobool4 = icmp ne i64 %10, 0, !dbg !7526
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !7526

cond.true:                                        ; preds = %if.then.2
  %11 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7527, !tbaa !2119
  %12 = bitcast %struct._object* %11 to %struct.PyByteArrayObject*, !dbg !7529
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %12, i32 0, i32 3, !dbg !7530
  %13 = load i8*, i8** %ob_start, align 8, !dbg !7530, !tbaa !2250
  br label %cond.end, !dbg !7526

cond.false:                                       ; preds = %if.then.2
  br label %cond.end, !dbg !7531

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %13, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7526
  %14 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7533, !tbaa !2119
  %15 = bitcast %struct._object* %14 to %struct.PyVarObject*, !dbg !7536
  %ob_size5 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %15, i32 0, i32 1, !dbg !7537
  %16 = load i64, i64* %ob_size5, align 8, !dbg !7537, !tbaa !2239
  %call6 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %cond, i64 %16), !dbg !7538
  store %struct._object* %call6, %struct._object** %retval, !dbg !7539
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7539

if.end.7:                                         ; preds = %land.lhs.true, %if.end
  %17 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7540, !tbaa !2119
  %18 = load i64, i64* %width, align 8, !dbg !7541, !tbaa !2129
  %19 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7542, !tbaa !2119
  %20 = bitcast %struct._object* %19 to %struct.PyVarObject*, !dbg !7543
  %ob_size8 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %20, i32 0, i32 1, !dbg !7544
  %21 = load i64, i64* %ob_size8, align 8, !dbg !7544, !tbaa !2239
  %sub = sub i64 %18, %21, !dbg !7545
  %22 = load i8, i8* %fillchar, align 1, !dbg !7546, !tbaa !2233
  %call9 = call %struct._object* @pad(%struct._object* %17, i64 0, i64 %sub, i8 signext %22), !dbg !7547
  store %struct._object* %call9, %struct._object** %retval, !dbg !7548
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7548

cleanup:                                          ; preds = %if.end.7, %cond.end, %if.then
  call void @llvm.lifetime.end(i64 1, i8* %fillchar) #3, !dbg !7549
  %23 = bitcast i64* %width to i8*, !dbg !7549
  call void @llvm.lifetime.end(i64 8, i8* %23) #3, !dbg !7549
  %24 = load %struct._object*, %struct._object** %retval, !dbg !7549
  ret %struct._object* %24, !dbg !7549
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_lower(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %newobj = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1181, metadata !2123), !dbg !7550
  %0 = bitcast %struct._object** %newobj to i8*, !dbg !7551
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !7551
  call void @llvm.dbg.declare(metadata %struct._object** %newobj, metadata !1182, metadata !2123), !dbg !7552
  %1 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7553, !tbaa !2119
  %2 = bitcast %struct._object* %1 to %struct.PyVarObject*, !dbg !7554
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1, !dbg !7555
  %3 = load i64, i64* %ob_size, align 8, !dbg !7555, !tbaa !2239
  %call = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %3), !dbg !7556
  store %struct._object* %call, %struct._object** %newobj, align 8, !dbg !7557, !tbaa !2119
  %4 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !7558, !tbaa !2119
  %tobool = icmp ne %struct._object* %4, null, !dbg !7558
  br i1 %tobool, label %if.end, label %if.then, !dbg !7560

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7561
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7561

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !7562, !tbaa !2119
  %6 = bitcast %struct._object* %5 to %struct.PyVarObject*, !dbg !7563
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1, !dbg !7564
  %7 = load i64, i64* %ob_size1, align 8, !dbg !7564, !tbaa !2239
  %tobool2 = icmp ne i64 %7, 0, !dbg !7565
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !7565

cond.true:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !7566, !tbaa !2119
  %9 = bitcast %struct._object* %8 to %struct.PyByteArrayObject*, !dbg !7568
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %9, i32 0, i32 3, !dbg !7569
  %10 = load i8*, i8** %ob_start, align 8, !dbg !7569, !tbaa !2250
  br label %cond.end, !dbg !7565

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7570

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7565
  %11 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7572, !tbaa !2119
  %12 = bitcast %struct._object* %11 to %struct.PyVarObject*, !dbg !7575
  %ob_size3 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %12, i32 0, i32 1, !dbg !7576
  %13 = load i64, i64* %ob_size3, align 8, !dbg !7576, !tbaa !2239
  %tobool4 = icmp ne i64 %13, 0, !dbg !7577
  br i1 %tobool4, label %cond.true.5, label %cond.false.7, !dbg !7577

cond.true.5:                                      ; preds = %cond.end
  %14 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7578, !tbaa !2119
  %15 = bitcast %struct._object* %14 to %struct.PyByteArrayObject*, !dbg !7580
  %ob_start6 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %15, i32 0, i32 3, !dbg !7581
  %16 = load i8*, i8** %ob_start6, align 8, !dbg !7581, !tbaa !2250
  br label %cond.end.8, !dbg !7577

cond.false.7:                                     ; preds = %cond.end
  br label %cond.end.8, !dbg !7582

cond.end.8:                                       ; preds = %cond.false.7, %cond.true.5
  %cond9 = phi i8* [ %16, %cond.true.5 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.7 ], !dbg !7577
  %17 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !7584, !tbaa !2119
  %18 = bitcast %struct._object* %17 to %struct.PyVarObject*, !dbg !7585
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1, !dbg !7586
  %19 = load i64, i64* %ob_size10, align 8, !dbg !7586, !tbaa !2239
  call void @_Py_bytes_lower(i8* %cond, i8* %cond9, i64 %19), !dbg !7587
  %20 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !7588, !tbaa !2119
  store %struct._object* %20, %struct._object** %retval, !dbg !7589
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7589

cleanup:                                          ; preds = %cond.end.8, %if.then
  %21 = bitcast %struct._object** %newobj to i8*, !dbg !7590
  call void @llvm.lifetime.end(i64 8, i8* %21) #3, !dbg !7590
  %22 = load %struct._object*, %struct._object** %retval, !dbg !7590
  ret %struct._object* %22, !dbg !7590
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_lstrip(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %left = alloca i64, align 8
  %right = alloca i64, align 8
  %mysize = alloca i64, align 8
  %argsize = alloca i64, align 8
  %myptr = alloca i8*, align 8
  %argptr = alloca i8*, align 8
  %arg = alloca %struct._object*, align 8
  %varg = alloca %struct.bufferinfo, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1185, metadata !2123), !dbg !7591
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1186, metadata !2123), !dbg !7592
  %0 = bitcast i64* %left to i8*, !dbg !7593
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !7593
  call void @llvm.dbg.declare(metadata i64* %left, metadata !1187, metadata !2123), !dbg !7594
  %1 = bitcast i64* %right to i8*, !dbg !7593
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !7593
  call void @llvm.dbg.declare(metadata i64* %right, metadata !1188, metadata !2123), !dbg !7595
  %2 = bitcast i64* %mysize to i8*, !dbg !7593
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !7593
  call void @llvm.dbg.declare(metadata i64* %mysize, metadata !1189, metadata !2123), !dbg !7596
  %3 = bitcast i64* %argsize to i8*, !dbg !7593
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !7593
  call void @llvm.dbg.declare(metadata i64* %argsize, metadata !1190, metadata !2123), !dbg !7597
  %4 = bitcast i8** %myptr to i8*, !dbg !7598
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !7598
  call void @llvm.dbg.declare(metadata i8** %myptr, metadata !1191, metadata !2123), !dbg !7599
  %5 = bitcast i8** %argptr to i8*, !dbg !7598
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !7598
  call void @llvm.dbg.declare(metadata i8** %argptr, metadata !1192, metadata !2123), !dbg !7600
  %6 = bitcast %struct._object** %arg to i8*, !dbg !7601
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !7601
  call void @llvm.dbg.declare(metadata %struct._object** %arg, metadata !1193, metadata !2123), !dbg !7602
  store %struct._object* @_Py_NoneStruct, %struct._object** %arg, align 8, !dbg !7602, !tbaa !2119
  %7 = bitcast %struct.bufferinfo* %varg to i8*, !dbg !7603
  call void @llvm.lifetime.start(i64 80, i8* %7) #3, !dbg !7603
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %varg, metadata !1194, metadata !2123), !dbg !7604
  %8 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7605, !tbaa !2119
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.96, i32 0, i32 0), %struct._object** %arg), !dbg !7607
  %tobool = icmp ne i32 %call, 0, !dbg !7607
  br i1 %tobool, label %if.end, label %if.then, !dbg !7608

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7609
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7609

if.end:                                           ; preds = %entry
  %9 = load %struct._object*, %struct._object** %arg, align 8, !dbg !7610, !tbaa !2119
  %cmp = icmp eq %struct._object* %9, @_Py_NoneStruct, !dbg !7612
  br i1 %cmp, label %if.then.1, label %if.else, !dbg !7613

if.then.1:                                        ; preds = %if.end
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0), i8** %argptr, align 8, !dbg !7614, !tbaa !2119
  store i64 6, i64* %argsize, align 8, !dbg !7616, !tbaa !2129
  br label %if.end.6, !dbg !7617

if.else:                                          ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %arg, align 8, !dbg !7618, !tbaa !2119
  %call2 = call i64 @_getbuffer(%struct._object* %10, %struct.bufferinfo* %varg), !dbg !7621
  %cmp3 = icmp slt i64 %call2, 0, !dbg !7622
  br i1 %cmp3, label %if.then.4, label %if.end.5, !dbg !7623

if.then.4:                                        ; preds = %if.else
  store %struct._object* null, %struct._object** %retval, !dbg !7624
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7624

if.end.5:                                         ; preds = %if.else
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %varg, i32 0, i32 0, !dbg !7625
  %11 = load i8*, i8** %buf, align 8, !dbg !7625, !tbaa !2529
  store i8* %11, i8** %argptr, align 8, !dbg !7626, !tbaa !2119
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %varg, i32 0, i32 2, !dbg !7627
  %12 = load i64, i64* %len, align 8, !dbg !7627, !tbaa !2482
  store i64 %12, i64* %argsize, align 8, !dbg !7628, !tbaa !2129
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.then.1
  %13 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7629, !tbaa !2119
  %14 = bitcast %struct.PyByteArrayObject* %13 to %struct.PyVarObject*, !dbg !7630
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %14, i32 0, i32 1, !dbg !7631
  %15 = load i64, i64* %ob_size, align 8, !dbg !7631, !tbaa !2239
  %tobool7 = icmp ne i64 %15, 0, !dbg !7632
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !7632

cond.true:                                        ; preds = %if.end.6
  %16 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7633, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %16, i32 0, i32 3, !dbg !7635
  %17 = load i8*, i8** %ob_start, align 8, !dbg !7635, !tbaa !2250
  br label %cond.end, !dbg !7632

cond.false:                                       ; preds = %if.end.6
  br label %cond.end, !dbg !7636

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %17, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7632
  store i8* %cond, i8** %myptr, align 8, !dbg !7638, !tbaa !2119
  %18 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7641, !tbaa !2119
  %19 = bitcast %struct.PyByteArrayObject* %18 to %struct.PyVarObject*, !dbg !7642
  %ob_size8 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %19, i32 0, i32 1, !dbg !7643
  %20 = load i64, i64* %ob_size8, align 8, !dbg !7643, !tbaa !2239
  store i64 %20, i64* %mysize, align 8, !dbg !7644, !tbaa !2129
  %21 = load i8*, i8** %myptr, align 8, !dbg !7645, !tbaa !2119
  %22 = load i64, i64* %mysize, align 8, !dbg !7646, !tbaa !2129
  %23 = load i8*, i8** %argptr, align 8, !dbg !7647, !tbaa !2119
  %24 = load i64, i64* %argsize, align 8, !dbg !7648, !tbaa !2129
  %call9 = call i64 @lstrip_helper(i8* %21, i64 %22, i8* %23, i64 %24), !dbg !7649
  store i64 %call9, i64* %left, align 8, !dbg !7650, !tbaa !2129
  %25 = load i64, i64* %mysize, align 8, !dbg !7651, !tbaa !2129
  store i64 %25, i64* %right, align 8, !dbg !7652, !tbaa !2129
  %26 = load %struct._object*, %struct._object** %arg, align 8, !dbg !7653, !tbaa !2119
  %cmp10 = icmp ne %struct._object* %26, @_Py_NoneStruct, !dbg !7655
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !7656

if.then.11:                                       ; preds = %cond.end
  call void @PyBuffer_Release(%struct.bufferinfo* %varg), !dbg !7657
  br label %if.end.12, !dbg !7657

if.end.12:                                        ; preds = %if.then.11, %cond.end
  %27 = load i8*, i8** %myptr, align 8, !dbg !7658, !tbaa !2119
  %28 = load i64, i64* %left, align 8, !dbg !7659, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %27, i64 %28, !dbg !7660
  %29 = load i64, i64* %right, align 8, !dbg !7661, !tbaa !2129
  %30 = load i64, i64* %left, align 8, !dbg !7662, !tbaa !2129
  %sub = sub i64 %29, %30, !dbg !7663
  %call13 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr, i64 %sub), !dbg !7664
  store %struct._object* %call13, %struct._object** %retval, !dbg !7665
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7665

cleanup:                                          ; preds = %if.end.12, %if.then.4, %if.then
  %31 = bitcast %struct.bufferinfo* %varg to i8*, !dbg !7666
  call void @llvm.lifetime.end(i64 80, i8* %31) #3, !dbg !7666
  %32 = bitcast %struct._object** %arg to i8*, !dbg !7666
  call void @llvm.lifetime.end(i64 8, i8* %32) #3, !dbg !7666
  %33 = bitcast i8** %argptr to i8*, !dbg !7666
  call void @llvm.lifetime.end(i64 8, i8* %33) #3, !dbg !7666
  %34 = bitcast i8** %myptr to i8*, !dbg !7666
  call void @llvm.lifetime.end(i64 8, i8* %34) #3, !dbg !7666
  %35 = bitcast i64* %argsize to i8*, !dbg !7666
  call void @llvm.lifetime.end(i64 8, i8* %35) #3, !dbg !7666
  %36 = bitcast i64* %mysize to i8*, !dbg !7666
  call void @llvm.lifetime.end(i64 8, i8* %36) #3, !dbg !7666
  %37 = bitcast i64* %right to i8*, !dbg !7666
  call void @llvm.lifetime.end(i64 8, i8* %37) #3, !dbg !7666
  %38 = bitcast i64* %left to i8*, !dbg !7666
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !7666
  %39 = load %struct._object*, %struct._object** %retval, !dbg !7666
  ret %struct._object* %39, !dbg !7666
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_maketrans(%struct._object* %null, %struct._object* %args) #0 {
entry:
  %null.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  store %struct._object* %null, %struct._object** %null.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %null.addr, metadata !1206, metadata !2123), !dbg !7667
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1207, metadata !2123), !dbg !7668
  %0 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7669, !tbaa !2119
  %call = call %struct._object* @_Py_bytes_maketrans(%struct._object* %0), !dbg !7670
  ret %struct._object* %call, !dbg !7671
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_partition(%struct.PyByteArrayObject* %self, %struct._object* %sep_obj) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %sep_obj.addr = alloca %struct._object*, align 8
  %bytesep = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1210, metadata !2123), !dbg !7672
  store %struct._object* %sep_obj, %struct._object** %sep_obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %sep_obj.addr, metadata !1211, metadata !2123), !dbg !7673
  %0 = bitcast %struct._object** %bytesep to i8*, !dbg !7674
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !7674
  call void @llvm.dbg.declare(metadata %struct._object** %bytesep, metadata !1212, metadata !2123), !dbg !7675
  %1 = bitcast %struct._object** %result to i8*, !dbg !7674
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !7674
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !1213, metadata !2123), !dbg !7676
  %2 = load %struct._object*, %struct._object** %sep_obj.addr, align 8, !dbg !7677, !tbaa !2119
  %call = call %struct._object* @PyByteArray_FromObject(%struct._object* %2), !dbg !7678
  store %struct._object* %call, %struct._object** %bytesep, align 8, !dbg !7679, !tbaa !2119
  %3 = load %struct._object*, %struct._object** %bytesep, align 8, !dbg !7680, !tbaa !2119
  %tobool = icmp ne %struct._object* %3, null, !dbg !7680
  br i1 %tobool, label %if.end, label %if.then, !dbg !7682

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7683
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7683

if.end:                                           ; preds = %entry
  %4 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7684, !tbaa !2119
  %5 = bitcast %struct.PyByteArrayObject* %4 to %struct._object*, !dbg !7685
  %6 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7686, !tbaa !2119
  %7 = bitcast %struct.PyByteArrayObject* %6 to %struct.PyVarObject*, !dbg !7687
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %7, i32 0, i32 1, !dbg !7688
  %8 = load i64, i64* %ob_size, align 8, !dbg !7688, !tbaa !2239
  %tobool1 = icmp ne i64 %8, 0, !dbg !7689
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7689

cond.true:                                        ; preds = %if.end
  %9 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7690, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %9, i32 0, i32 3, !dbg !7692
  %10 = load i8*, i8** %ob_start, align 8, !dbg !7692, !tbaa !2250
  br label %cond.end, !dbg !7689

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7693

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7689
  %11 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7695, !tbaa !2119
  %12 = bitcast %struct.PyByteArrayObject* %11 to %struct.PyVarObject*, !dbg !7698
  %ob_size2 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %12, i32 0, i32 1, !dbg !7699
  %13 = load i64, i64* %ob_size2, align 8, !dbg !7699, !tbaa !2239
  %14 = load %struct._object*, %struct._object** %bytesep, align 8, !dbg !7700, !tbaa !2119
  %15 = load %struct._object*, %struct._object** %bytesep, align 8, !dbg !7701, !tbaa !2119
  %16 = bitcast %struct._object* %15 to %struct.PyVarObject*, !dbg !7702
  %ob_size3 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %16, i32 0, i32 1, !dbg !7703
  %17 = load i64, i64* %ob_size3, align 8, !dbg !7703, !tbaa !2239
  %tobool4 = icmp ne i64 %17, 0, !dbg !7704
  br i1 %tobool4, label %cond.true.5, label %cond.false.7, !dbg !7704

cond.true.5:                                      ; preds = %cond.end
  %18 = load %struct._object*, %struct._object** %bytesep, align 8, !dbg !7705, !tbaa !2119
  %19 = bitcast %struct._object* %18 to %struct.PyByteArrayObject*, !dbg !7706
  %ob_start6 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %19, i32 0, i32 3, !dbg !7707
  %20 = load i8*, i8** %ob_start6, align 8, !dbg !7707, !tbaa !2250
  br label %cond.end.8, !dbg !7704

cond.false.7:                                     ; preds = %cond.end
  br label %cond.end.8, !dbg !7708

cond.end.8:                                       ; preds = %cond.false.7, %cond.true.5
  %cond9 = phi i8* [ %20, %cond.true.5 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.7 ], !dbg !7704
  %21 = load %struct._object*, %struct._object** %bytesep, align 8, !dbg !7709, !tbaa !2119
  %22 = bitcast %struct._object* %21 to %struct.PyVarObject*, !dbg !7710
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %22, i32 0, i32 1, !dbg !7711
  %23 = load i64, i64* %ob_size10, align 8, !dbg !7711, !tbaa !2239
  %call11 = call %struct._object* @stringlib_partition(%struct._object* %5, i8* %cond, i64 %13, %struct._object* %14, i8* %cond9, i64 %23), !dbg !7712
  store %struct._object* %call11, %struct._object** %result, align 8, !dbg !7713, !tbaa !2119
  br label %do.body, !dbg !7714

do.body:                                          ; preds = %cond.end.8
  %24 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7715
  call void @llvm.lifetime.start(i64 8, i8* %24) #3, !dbg !7715
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1214, metadata !2123), !dbg !7717
  %25 = load %struct._object*, %struct._object** %bytesep, align 8, !dbg !7718, !tbaa !2119
  store %struct._object* %25, %struct._object** %_py_decref_tmp, align 8, !dbg !7717, !tbaa !2119
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7719, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0, !dbg !7721
  %27 = load i64, i64* %ob_refcnt, align 8, !dbg !7722, !tbaa !2195
  %dec = add i64 %27, -1, !dbg !7722
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !7722, !tbaa !2195
  %cmp = icmp ne i64 %dec, 0, !dbg !7723
  br i1 %cmp, label %if.then.12, label %if.else, !dbg !7724

if.then.12:                                       ; preds = %do.body
  br label %if.end.13, !dbg !7725

if.else:                                          ; preds = %do.body
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7727, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1, !dbg !7729
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7729, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4, !dbg !7730
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7730, !tbaa !2205
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7731, !tbaa !2119
  call void %30(%struct._object* %31), !dbg !7732
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.12
  %32 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7733
  call void @llvm.lifetime.end(i64 8, i8* %32) #3, !dbg !7733
  br label %do.cond, !dbg !7735

do.cond:                                          ; preds = %if.end.13
  br label %do.end, !dbg !7736

do.end:                                           ; preds = %do.cond
  %33 = load %struct._object*, %struct._object** %result, align 8, !dbg !7738, !tbaa !2119
  store %struct._object* %33, %struct._object** %retval, !dbg !7739
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7739

cleanup:                                          ; preds = %do.end, %if.then
  %34 = bitcast %struct._object** %result to i8*, !dbg !7740
  call void @llvm.lifetime.end(i64 8, i8* %34) #3, !dbg !7740
  %35 = bitcast %struct._object** %bytesep to i8*, !dbg !7740
  call void @llvm.lifetime.end(i64 8, i8* %35) #3, !dbg !7740
  %36 = load %struct._object*, %struct._object** %retval, !dbg !7740
  ret %struct._object* %36, !dbg !7740
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_pop(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %value = alloca i32, align 4
  %where = alloca i64, align 8
  %n = alloca i64, align 8
  %buf = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1241, metadata !2123), !dbg !7741
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1242, metadata !2123), !dbg !7742
  %0 = bitcast i32* %value to i8*, !dbg !7743
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !7743
  call void @llvm.dbg.declare(metadata i32* %value, metadata !1243, metadata !2123), !dbg !7744
  %1 = bitcast i64* %where to i8*, !dbg !7745
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !7745
  call void @llvm.dbg.declare(metadata i64* %where, metadata !1244, metadata !2123), !dbg !7746
  store i64 -1, i64* %where, align 8, !dbg !7746, !tbaa !2129
  %2 = bitcast i64* %n to i8*, !dbg !7745
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !7745
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1245, metadata !2123), !dbg !7747
  %3 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7748, !tbaa !2119
  %4 = bitcast %struct.PyByteArrayObject* %3 to %struct.PyVarObject*, !dbg !7749
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %4, i32 0, i32 1, !dbg !7750
  %5 = load i64, i64* %ob_size, align 8, !dbg !7750, !tbaa !2239
  store i64 %5, i64* %n, align 8, !dbg !7747, !tbaa !2129
  %6 = bitcast i8** %buf to i8*, !dbg !7751
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !7751
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !1246, metadata !2123), !dbg !7752
  %7 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7753, !tbaa !2119
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.99, i32 0, i32 0), i64* %where), !dbg !7755
  %tobool = icmp ne i32 %call, 0, !dbg !7755
  br i1 %tobool, label %if.end, label %if.then, !dbg !7756

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7757
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7757

if.end:                                           ; preds = %entry
  %8 = load i64, i64* %n, align 8, !dbg !7758, !tbaa !2129
  %cmp = icmp eq i64 %8, 0, !dbg !7760
  br i1 %cmp, label %if.then.1, label %if.end.2, !dbg !7761

if.then.1:                                        ; preds = %if.end
  %9 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !7762, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %9, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.100, i32 0, i32 0)), !dbg !7764
  store %struct._object* null, %struct._object** %retval, !dbg !7765
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7765

if.end.2:                                         ; preds = %if.end
  %10 = load i64, i64* %where, align 8, !dbg !7766, !tbaa !2129
  %cmp3 = icmp slt i64 %10, 0, !dbg !7768
  br i1 %cmp3, label %if.then.4, label %if.end.6, !dbg !7769

if.then.4:                                        ; preds = %if.end.2
  %11 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7770, !tbaa !2119
  %12 = bitcast %struct.PyByteArrayObject* %11 to %struct.PyVarObject*, !dbg !7771
  %ob_size5 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %12, i32 0, i32 1, !dbg !7772
  %13 = load i64, i64* %ob_size5, align 8, !dbg !7772, !tbaa !2239
  %14 = load i64, i64* %where, align 8, !dbg !7773, !tbaa !2129
  %add = add i64 %14, %13, !dbg !7773
  store i64 %add, i64* %where, align 8, !dbg !7773, !tbaa !2129
  br label %if.end.6, !dbg !7774

if.end.6:                                         ; preds = %if.then.4, %if.end.2
  %15 = load i64, i64* %where, align 8, !dbg !7775, !tbaa !2129
  %cmp7 = icmp slt i64 %15, 0, !dbg !7777
  br i1 %cmp7, label %if.then.10, label %lor.lhs.false, !dbg !7778

lor.lhs.false:                                    ; preds = %if.end.6
  %16 = load i64, i64* %where, align 8, !dbg !7779, !tbaa !2129
  %17 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7781, !tbaa !2119
  %18 = bitcast %struct.PyByteArrayObject* %17 to %struct.PyVarObject*, !dbg !7782
  %ob_size8 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1, !dbg !7783
  %19 = load i64, i64* %ob_size8, align 8, !dbg !7783, !tbaa !2239
  %cmp9 = icmp sge i64 %16, %19, !dbg !7784
  br i1 %cmp9, label %if.then.10, label %if.end.11, !dbg !7785

if.then.10:                                       ; preds = %lor.lhs.false, %if.end.6
  %20 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !7786, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %20, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.101, i32 0, i32 0)), !dbg !7788
  store %struct._object* null, %struct._object** %retval, !dbg !7789
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7789

if.end.11:                                        ; preds = %lor.lhs.false
  %21 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7790, !tbaa !2119
  %call12 = call i32 @_canresize(%struct.PyByteArrayObject* %21), !dbg !7792
  %tobool13 = icmp ne i32 %call12, 0, !dbg !7792
  br i1 %tobool13, label %if.end.15, label %if.then.14, !dbg !7793

if.then.14:                                       ; preds = %if.end.11
  store %struct._object* null, %struct._object** %retval, !dbg !7794
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7794

if.end.15:                                        ; preds = %if.end.11
  %22 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7795, !tbaa !2119
  %23 = bitcast %struct.PyByteArrayObject* %22 to %struct.PyVarObject*, !dbg !7796
  %ob_size16 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %23, i32 0, i32 1, !dbg !7797
  %24 = load i64, i64* %ob_size16, align 8, !dbg !7797, !tbaa !2239
  %tobool17 = icmp ne i64 %24, 0, !dbg !7798
  br i1 %tobool17, label %cond.true, label %cond.false, !dbg !7798

cond.true:                                        ; preds = %if.end.15
  %25 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7799, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %25, i32 0, i32 3, !dbg !7801
  %26 = load i8*, i8** %ob_start, align 8, !dbg !7801, !tbaa !2250
  br label %cond.end, !dbg !7798

cond.false:                                       ; preds = %if.end.15
  br label %cond.end, !dbg !7802

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %26, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7798
  store i8* %cond, i8** %buf, align 8, !dbg !7804, !tbaa !2119
  %27 = load i64, i64* %where, align 8, !dbg !7807, !tbaa !2129
  %28 = load i8*, i8** %buf, align 8, !dbg !7808, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %28, i64 %27, !dbg !7808
  %29 = load i8, i8* %arrayidx, align 1, !dbg !7808, !tbaa !2233
  %conv = sext i8 %29 to i32, !dbg !7808
  store i32 %conv, i32* %value, align 4, !dbg !7809, !tbaa !2676
  %30 = load i8*, i8** %buf, align 8, !dbg !7810, !tbaa !2119
  %31 = load i64, i64* %where, align 8, !dbg !7811, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %30, i64 %31, !dbg !7812
  %32 = load i8*, i8** %buf, align 8, !dbg !7813, !tbaa !2119
  %33 = load i64, i64* %where, align 8, !dbg !7814, !tbaa !2129
  %add.ptr18 = getelementptr i8, i8* %32, i64 %33, !dbg !7815
  %add.ptr19 = getelementptr i8, i8* %add.ptr18, i64 1, !dbg !7816
  %34 = load i64, i64* %n, align 8, !dbg !7817, !tbaa !2129
  %35 = load i64, i64* %where, align 8, !dbg !7818, !tbaa !2129
  %sub = sub i64 %34, %35, !dbg !7819
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr, i8* %add.ptr19, i64 %sub, i32 1, i1 false), !dbg !7820
  %36 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7821, !tbaa !2119
  %37 = bitcast %struct.PyByteArrayObject* %36 to %struct._object*, !dbg !7823
  %38 = load i64, i64* %n, align 8, !dbg !7824, !tbaa !2129
  %sub20 = sub i64 %38, 1, !dbg !7825
  %call21 = call i32 @PyByteArray_Resize(%struct._object* %37, i64 %sub20), !dbg !7826
  %cmp22 = icmp slt i32 %call21, 0, !dbg !7827
  br i1 %cmp22, label %if.then.24, label %if.end.25, !dbg !7828

if.then.24:                                       ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval, !dbg !7829
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7829

if.end.25:                                        ; preds = %cond.end
  %39 = load i32, i32* %value, align 4, !dbg !7830, !tbaa !2676
  %conv26 = trunc i32 %39 to i8, !dbg !7831
  %conv27 = zext i8 %conv26 to i64, !dbg !7831
  %call28 = call %struct._object* @PyLong_FromLong(i64 %conv27), !dbg !7832
  store %struct._object* %call28, %struct._object** %retval, !dbg !7833
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7833

cleanup:                                          ; preds = %if.end.25, %if.then.24, %if.then.14, %if.then.10, %if.then.1, %if.then
  %40 = bitcast i8** %buf to i8*, !dbg !7834
  call void @llvm.lifetime.end(i64 8, i8* %40) #3, !dbg !7834
  %41 = bitcast i64* %n to i8*, !dbg !7834
  call void @llvm.lifetime.end(i64 8, i8* %41) #3, !dbg !7834
  %42 = bitcast i64* %where to i8*, !dbg !7834
  call void @llvm.lifetime.end(i64 8, i8* %42) #3, !dbg !7834
  %43 = bitcast i32* %value to i8*, !dbg !7834
  call void @llvm.lifetime.end(i64 4, i8* %43) #3, !dbg !7834
  %44 = load %struct._object*, %struct._object** %retval, !dbg !7834
  ret %struct._object* %44, !dbg !7834
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_remove(%struct.PyByteArrayObject* %self, %struct._object* %arg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %value = alloca i32, align 4
  %where = alloca i64, align 8
  %n = alloca i64, align 8
  %buf = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1249, metadata !2123), !dbg !7835
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !1250, metadata !2123), !dbg !7836
  %0 = bitcast i32* %value to i8*, !dbg !7837
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !7837
  call void @llvm.dbg.declare(metadata i32* %value, metadata !1251, metadata !2123), !dbg !7838
  %1 = bitcast i64* %where to i8*, !dbg !7839
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !7839
  call void @llvm.dbg.declare(metadata i64* %where, metadata !1252, metadata !2123), !dbg !7840
  %2 = bitcast i64* %n to i8*, !dbg !7839
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !7839
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1253, metadata !2123), !dbg !7841
  %3 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7842, !tbaa !2119
  %4 = bitcast %struct.PyByteArrayObject* %3 to %struct.PyVarObject*, !dbg !7843
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %4, i32 0, i32 1, !dbg !7844
  %5 = load i64, i64* %ob_size, align 8, !dbg !7844, !tbaa !2239
  store i64 %5, i64* %n, align 8, !dbg !7841, !tbaa !2129
  %6 = bitcast i8** %buf to i8*, !dbg !7845
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !7845
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !1254, metadata !2123), !dbg !7846
  %7 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7847, !tbaa !2119
  %8 = bitcast %struct.PyByteArrayObject* %7 to %struct.PyVarObject*, !dbg !7848
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !7849
  %9 = load i64, i64* %ob_size1, align 8, !dbg !7849, !tbaa !2239
  %tobool = icmp ne i64 %9, 0, !dbg !7850
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7850

cond.true:                                        ; preds = %entry
  %10 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7851, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %10, i32 0, i32 3, !dbg !7853
  %11 = load i8*, i8** %ob_start, align 8, !dbg !7853, !tbaa !2250
  br label %cond.end, !dbg !7850

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7854

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %11, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7850
  store i8* %cond, i8** %buf, align 8, !dbg !7856, !tbaa !2119
  %12 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !7859, !tbaa !2119
  %call = call i32 @_getbytevalue(%struct._object* %12, i32* %value), !dbg !7861
  %tobool2 = icmp ne i32 %call, 0, !dbg !7861
  br i1 %tobool2, label %if.end, label %if.then, !dbg !7862

if.then:                                          ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval, !dbg !7863
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7863

if.end:                                           ; preds = %cond.end
  store i64 0, i64* %where, align 8, !dbg !7864, !tbaa !2129
  br label %for.cond, !dbg !7866

for.cond:                                         ; preds = %for.inc, %if.end
  %13 = load i64, i64* %where, align 8, !dbg !7867, !tbaa !2129
  %14 = load i64, i64* %n, align 8, !dbg !7871, !tbaa !2129
  %cmp = icmp slt i64 %13, %14, !dbg !7872
  br i1 %cmp, label %for.body, label %for.end, !dbg !7873

for.body:                                         ; preds = %for.cond
  %15 = load i64, i64* %where, align 8, !dbg !7874, !tbaa !2129
  %16 = load i8*, i8** %buf, align 8, !dbg !7877, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %16, i64 %15, !dbg !7877
  %17 = load i8, i8* %arrayidx, align 1, !dbg !7877, !tbaa !2233
  %conv = sext i8 %17 to i32, !dbg !7877
  %18 = load i32, i32* %value, align 4, !dbg !7878, !tbaa !2676
  %cmp3 = icmp eq i32 %conv, %18, !dbg !7879
  br i1 %cmp3, label %if.then.5, label %if.end.6, !dbg !7880

if.then.5:                                        ; preds = %for.body
  br label %for.end, !dbg !7881

if.end.6:                                         ; preds = %for.body
  br label %for.inc, !dbg !7882

for.inc:                                          ; preds = %if.end.6
  %19 = load i64, i64* %where, align 8, !dbg !7883, !tbaa !2129
  %inc = add i64 %19, 1, !dbg !7883
  store i64 %inc, i64* %where, align 8, !dbg !7883, !tbaa !2129
  br label %for.cond, !dbg !7884

for.end:                                          ; preds = %if.then.5, %for.cond
  %20 = load i64, i64* %where, align 8, !dbg !7885, !tbaa !2129
  %21 = load i64, i64* %n, align 8, !dbg !7887, !tbaa !2129
  %cmp7 = icmp eq i64 %20, %21, !dbg !7888
  br i1 %cmp7, label %if.then.9, label %if.end.10, !dbg !7889

if.then.9:                                        ; preds = %for.end
  %22 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !7890, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %22, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.102, i32 0, i32 0)), !dbg !7892
  store %struct._object* null, %struct._object** %retval, !dbg !7893
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7893

if.end.10:                                        ; preds = %for.end
  %23 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7894, !tbaa !2119
  %call11 = call i32 @_canresize(%struct.PyByteArrayObject* %23), !dbg !7896
  %tobool12 = icmp ne i32 %call11, 0, !dbg !7896
  br i1 %tobool12, label %if.end.14, label %if.then.13, !dbg !7897

if.then.13:                                       ; preds = %if.end.10
  store %struct._object* null, %struct._object** %retval, !dbg !7898
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7898

if.end.14:                                        ; preds = %if.end.10
  %24 = load i8*, i8** %buf, align 8, !dbg !7899, !tbaa !2119
  %25 = load i64, i64* %where, align 8, !dbg !7900, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %24, i64 %25, !dbg !7901
  %26 = load i8*, i8** %buf, align 8, !dbg !7902, !tbaa !2119
  %27 = load i64, i64* %where, align 8, !dbg !7903, !tbaa !2129
  %add.ptr15 = getelementptr i8, i8* %26, i64 %27, !dbg !7904
  %add.ptr16 = getelementptr i8, i8* %add.ptr15, i64 1, !dbg !7905
  %28 = load i64, i64* %n, align 8, !dbg !7906, !tbaa !2129
  %29 = load i64, i64* %where, align 8, !dbg !7907, !tbaa !2129
  %sub = sub i64 %28, %29, !dbg !7908
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr, i8* %add.ptr16, i64 %sub, i32 1, i1 false), !dbg !7909
  %30 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7910, !tbaa !2119
  %31 = bitcast %struct.PyByteArrayObject* %30 to %struct._object*, !dbg !7912
  %32 = load i64, i64* %n, align 8, !dbg !7913, !tbaa !2129
  %sub17 = sub i64 %32, 1, !dbg !7914
  %call18 = call i32 @PyByteArray_Resize(%struct._object* %31, i64 %sub17), !dbg !7915
  %cmp19 = icmp slt i32 %call18, 0, !dbg !7916
  br i1 %cmp19, label %if.then.21, label %if.end.22, !dbg !7917

if.then.21:                                       ; preds = %if.end.14
  store %struct._object* null, %struct._object** %retval, !dbg !7918
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7918

if.end.22:                                        ; preds = %if.end.14
  %33 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !7919, !tbaa !2195
  %inc23 = add i64 %33, 1, !dbg !7919
  store i64 %inc23, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !7919, !tbaa !2195
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !7920
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7920

cleanup:                                          ; preds = %if.end.22, %if.then.21, %if.then.13, %if.then.9, %if.then
  %34 = bitcast i8** %buf to i8*, !dbg !7921
  call void @llvm.lifetime.end(i64 8, i8* %34) #3, !dbg !7921
  %35 = bitcast i64* %n to i8*, !dbg !7921
  call void @llvm.lifetime.end(i64 8, i8* %35) #3, !dbg !7921
  %36 = bitcast i64* %where to i8*, !dbg !7921
  call void @llvm.lifetime.end(i64 8, i8* %36) #3, !dbg !7921
  %37 = bitcast i32* %value to i8*, !dbg !7921
  call void @llvm.lifetime.end(i64 4, i8* %37) #3, !dbg !7921
  %38 = load %struct._object*, %struct._object** %retval, !dbg !7921
  ret %struct._object* %38, !dbg !7921
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_replace(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %count = alloca i64, align 8
  %from = alloca %struct._object*, align 8
  %to = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %vfrom = alloca %struct.bufferinfo, align 8
  %vto = alloca %struct.bufferinfo, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1257, metadata !2123), !dbg !7922
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1258, metadata !2123), !dbg !7923
  %0 = bitcast i64* %count to i8*, !dbg !7924
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !7924
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1259, metadata !2123), !dbg !7925
  store i64 -1, i64* %count, align 8, !dbg !7925, !tbaa !2129
  %1 = bitcast %struct._object** %from to i8*, !dbg !7926
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !7926
  call void @llvm.dbg.declare(metadata %struct._object** %from, metadata !1260, metadata !2123), !dbg !7927
  %2 = bitcast %struct._object** %to to i8*, !dbg !7926
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !7926
  call void @llvm.dbg.declare(metadata %struct._object** %to, metadata !1261, metadata !2123), !dbg !7928
  %3 = bitcast %struct._object** %res to i8*, !dbg !7926
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !7926
  call void @llvm.dbg.declare(metadata %struct._object** %res, metadata !1262, metadata !2123), !dbg !7929
  %4 = bitcast %struct.bufferinfo* %vfrom to i8*, !dbg !7930
  call void @llvm.lifetime.start(i64 80, i8* %4) #3, !dbg !7930
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %vfrom, metadata !1263, metadata !2123), !dbg !7931
  %5 = bitcast %struct.bufferinfo* %vto to i8*, !dbg !7930
  call void @llvm.lifetime.start(i64 80, i8* %5) #3, !dbg !7930
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %vto, metadata !1264, metadata !2123), !dbg !7932
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7933, !tbaa !2119
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.103, i32 0, i32 0), %struct._object** %from, %struct._object** %to, i64* %count), !dbg !7935
  %tobool = icmp ne i32 %call, 0, !dbg !7935
  br i1 %tobool, label %if.end, label %if.then, !dbg !7936

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !7937
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7937

if.end:                                           ; preds = %entry
  %7 = load %struct._object*, %struct._object** %from, align 8, !dbg !7938, !tbaa !2119
  %call1 = call i64 @_getbuffer(%struct._object* %7, %struct.bufferinfo* %vfrom), !dbg !7940
  %cmp = icmp slt i64 %call1, 0, !dbg !7941
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !7942

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !7943
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7943

if.end.3:                                         ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %to, align 8, !dbg !7944, !tbaa !2119
  %call4 = call i64 @_getbuffer(%struct._object* %8, %struct.bufferinfo* %vto), !dbg !7946
  %cmp5 = icmp slt i64 %call4, 0, !dbg !7947
  br i1 %cmp5, label %if.then.6, label %if.end.7, !dbg !7948

if.then.6:                                        ; preds = %if.end.3
  call void @PyBuffer_Release(%struct.bufferinfo* %vfrom), !dbg !7949
  store %struct._object* null, %struct._object** %retval, !dbg !7951
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7951

if.end.7:                                         ; preds = %if.end.3
  %9 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7952, !tbaa !2119
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vfrom, i32 0, i32 0, !dbg !7953
  %10 = load i8*, i8** %buf, align 8, !dbg !7953, !tbaa !2529
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vfrom, i32 0, i32 2, !dbg !7954
  %11 = load i64, i64* %len, align 8, !dbg !7954, !tbaa !2482
  %buf8 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vto, i32 0, i32 0, !dbg !7955
  %12 = load i8*, i8** %buf8, align 8, !dbg !7955, !tbaa !2529
  %len9 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vto, i32 0, i32 2, !dbg !7956
  %13 = load i64, i64* %len9, align 8, !dbg !7956, !tbaa !2482
  %14 = load i64, i64* %count, align 8, !dbg !7957, !tbaa !2129
  %call10 = call %struct.PyByteArrayObject* @replace(%struct.PyByteArrayObject* %9, i8* %10, i64 %11, i8* %12, i64 %13, i64 %14), !dbg !7958
  %15 = bitcast %struct.PyByteArrayObject* %call10 to %struct._object*, !dbg !7959
  store %struct._object* %15, %struct._object** %res, align 8, !dbg !7960, !tbaa !2119
  call void @PyBuffer_Release(%struct.bufferinfo* %vfrom), !dbg !7961
  call void @PyBuffer_Release(%struct.bufferinfo* %vto), !dbg !7962
  %16 = load %struct._object*, %struct._object** %res, align 8, !dbg !7963, !tbaa !2119
  store %struct._object* %16, %struct._object** %retval, !dbg !7964
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7964

cleanup:                                          ; preds = %if.end.7, %if.then.6, %if.then.2, %if.then
  %17 = bitcast %struct.bufferinfo* %vto to i8*, !dbg !7965
  call void @llvm.lifetime.end(i64 80, i8* %17) #3, !dbg !7965
  %18 = bitcast %struct.bufferinfo* %vfrom to i8*, !dbg !7965
  call void @llvm.lifetime.end(i64 80, i8* %18) #3, !dbg !7965
  %19 = bitcast %struct._object** %res to i8*, !dbg !7965
  call void @llvm.lifetime.end(i64 8, i8* %19) #3, !dbg !7965
  %20 = bitcast %struct._object** %to to i8*, !dbg !7965
  call void @llvm.lifetime.end(i64 8, i8* %20) #3, !dbg !7965
  %21 = bitcast %struct._object** %from to i8*, !dbg !7965
  call void @llvm.lifetime.end(i64 8, i8* %21) #3, !dbg !7965
  %22 = bitcast i64* %count to i8*, !dbg !7965
  call void @llvm.lifetime.end(i64 8, i8* %22) #3, !dbg !7965
  %23 = load %struct._object*, %struct._object** %retval, !dbg !7965
  ret %struct._object* %23, !dbg !7965
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_reverse(%struct.PyByteArrayObject* %self, %struct._object* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %unused.addr = alloca %struct._object*, align 8
  %swap = alloca i8, align 1
  %head = alloca i8*, align 8
  %tail = alloca i8*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %n = alloca i64, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1406, metadata !2123), !dbg !7966
  store %struct._object* %unused, %struct._object** %unused.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %unused.addr, metadata !1407, metadata !2123), !dbg !7967
  call void @llvm.lifetime.start(i64 1, i8* %swap) #3, !dbg !7968
  call void @llvm.dbg.declare(metadata i8* %swap, metadata !1408, metadata !2123), !dbg !7969
  %0 = bitcast i8** %head to i8*, !dbg !7968
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !7968
  call void @llvm.dbg.declare(metadata i8** %head, metadata !1409, metadata !2123), !dbg !7970
  %1 = bitcast i8** %tail to i8*, !dbg !7968
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !7968
  call void @llvm.dbg.declare(metadata i8** %tail, metadata !1410, metadata !2123), !dbg !7971
  %2 = bitcast i64* %i to i8*, !dbg !7972
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !7972
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1411, metadata !2123), !dbg !7973
  %3 = bitcast i64* %j to i8*, !dbg !7972
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !7972
  call void @llvm.dbg.declare(metadata i64* %j, metadata !1412, metadata !2123), !dbg !7974
  %4 = bitcast i64* %n to i8*, !dbg !7972
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !7972
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1413, metadata !2123), !dbg !7975
  %5 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7976, !tbaa !2119
  %6 = bitcast %struct.PyByteArrayObject* %5 to %struct.PyVarObject*, !dbg !7977
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1, !dbg !7978
  %7 = load i64, i64* %ob_size, align 8, !dbg !7978, !tbaa !2239
  store i64 %7, i64* %n, align 8, !dbg !7975, !tbaa !2129
  %8 = load i64, i64* %n, align 8, !dbg !7979, !tbaa !2129
  %div = sdiv i64 %8, 2, !dbg !7980
  store i64 %div, i64* %j, align 8, !dbg !7981, !tbaa !2129
  %9 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7982, !tbaa !2119
  %10 = bitcast %struct.PyByteArrayObject* %9 to %struct.PyVarObject*, !dbg !7983
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %10, i32 0, i32 1, !dbg !7984
  %11 = load i64, i64* %ob_size1, align 8, !dbg !7984, !tbaa !2239
  %tobool = icmp ne i64 %11, 0, !dbg !7985
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7985

cond.true:                                        ; preds = %entry
  %12 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !7986, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %12, i32 0, i32 3, !dbg !7988
  %13 = load i8*, i8** %ob_start, align 8, !dbg !7988, !tbaa !2250
  br label %cond.end, !dbg !7985

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7989

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %13, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !7985
  store i8* %cond, i8** %head, align 8, !dbg !7991, !tbaa !2119
  %14 = load i8*, i8** %head, align 8, !dbg !7994, !tbaa !2119
  %15 = load i64, i64* %n, align 8, !dbg !7995, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %14, i64 %15, !dbg !7996
  %add.ptr2 = getelementptr i8, i8* %add.ptr, i64 -1, !dbg !7997
  store i8* %add.ptr2, i8** %tail, align 8, !dbg !7998, !tbaa !2119
  store i64 0, i64* %i, align 8, !dbg !7999, !tbaa !2129
  br label %for.cond, !dbg !8001

for.cond:                                         ; preds = %for.inc, %cond.end
  %16 = load i64, i64* %i, align 8, !dbg !8002, !tbaa !2129
  %17 = load i64, i64* %j, align 8, !dbg !8006, !tbaa !2129
  %cmp = icmp slt i64 %16, %17, !dbg !8007
  br i1 %cmp, label %for.body, label %for.end, !dbg !8008

for.body:                                         ; preds = %for.cond
  %18 = load i8*, i8** %head, align 8, !dbg !8009, !tbaa !2119
  %19 = load i8, i8* %18, align 1, !dbg !8011, !tbaa !2233
  store i8 %19, i8* %swap, align 1, !dbg !8012, !tbaa !2233
  %20 = load i8*, i8** %tail, align 8, !dbg !8013, !tbaa !2119
  %21 = load i8, i8* %20, align 1, !dbg !8014, !tbaa !2233
  %22 = load i8*, i8** %head, align 8, !dbg !8015, !tbaa !2119
  %incdec.ptr = getelementptr i8, i8* %22, i32 1, !dbg !8015
  store i8* %incdec.ptr, i8** %head, align 8, !dbg !8015, !tbaa !2119
  store i8 %21, i8* %22, align 1, !dbg !8016, !tbaa !2233
  %23 = load i8, i8* %swap, align 1, !dbg !8017, !tbaa !2233
  %24 = load i8*, i8** %tail, align 8, !dbg !8018, !tbaa !2119
  %incdec.ptr3 = getelementptr i8, i8* %24, i32 -1, !dbg !8018
  store i8* %incdec.ptr3, i8** %tail, align 8, !dbg !8018, !tbaa !2119
  store i8 %23, i8* %24, align 1, !dbg !8019, !tbaa !2233
  br label %for.inc, !dbg !8020

for.inc:                                          ; preds = %for.body
  %25 = load i64, i64* %i, align 8, !dbg !8021, !tbaa !2129
  %inc = add i64 %25, 1, !dbg !8021
  store i64 %inc, i64* %i, align 8, !dbg !8021, !tbaa !2129
  br label %for.cond, !dbg !8022

for.end:                                          ; preds = %for.cond
  %26 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8023, !tbaa !2195
  %inc4 = add i64 %26, 1, !dbg !8023
  store i64 %inc4, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !8023, !tbaa !2195
  %27 = bitcast i64* %n to i8*, !dbg !8024
  call void @llvm.lifetime.end(i64 8, i8* %27) #3, !dbg !8024
  %28 = bitcast i64* %j to i8*, !dbg !8024
  call void @llvm.lifetime.end(i64 8, i8* %28) #3, !dbg !8024
  %29 = bitcast i64* %i to i8*, !dbg !8024
  call void @llvm.lifetime.end(i64 8, i8* %29) #3, !dbg !8024
  %30 = bitcast i8** %tail to i8*, !dbg !8024
  call void @llvm.lifetime.end(i64 8, i8* %30) #3, !dbg !8024
  %31 = bitcast i8** %head to i8*, !dbg !8024
  call void @llvm.lifetime.end(i64 8, i8* %31) #3, !dbg !8024
  call void @llvm.lifetime.end(i64 1, i8* %swap) #3, !dbg !8024
  ret %struct._object* @_Py_NoneStruct, !dbg !8025
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_rfind(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %result = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1416, metadata !2123), !dbg !8026
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1417, metadata !2123), !dbg !8027
  %0 = bitcast i64* %result to i8*, !dbg !8028
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8028
  call void @llvm.dbg.declare(metadata i64* %result, metadata !1418, metadata !2123), !dbg !8029
  %1 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8030, !tbaa !2119
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8031, !tbaa !2119
  %call = call i64 @bytearray_find_internal(%struct.PyByteArrayObject* %1, %struct._object* %2, i32 -1), !dbg !8032
  store i64 %call, i64* %result, align 8, !dbg !8029, !tbaa !2129
  %3 = load i64, i64* %result, align 8, !dbg !8033, !tbaa !2129
  %cmp = icmp eq i64 %3, -2, !dbg !8035
  br i1 %cmp, label %if.then, label %if.end, !dbg !8036

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8037
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8037

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %result, align 8, !dbg !8038, !tbaa !2129
  %call1 = call %struct._object* @PyLong_FromSsize_t(i64 %4), !dbg !8039
  store %struct._object* %call1, %struct._object** %retval, !dbg !8040
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8040

cleanup:                                          ; preds = %if.end, %if.then
  %5 = bitcast i64* %result to i8*, !dbg !8041
  call void @llvm.lifetime.end(i64 8, i8* %5) #3, !dbg !8041
  %6 = load %struct._object*, %struct._object** %retval, !dbg !8041
  ret %struct._object* %6, !dbg !8041
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_rindex(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %result = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1421, metadata !2123), !dbg !8042
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1422, metadata !2123), !dbg !8043
  %0 = bitcast i64* %result to i8*, !dbg !8044
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8044
  call void @llvm.dbg.declare(metadata i64* %result, metadata !1423, metadata !2123), !dbg !8045
  %1 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8046, !tbaa !2119
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8047, !tbaa !2119
  %call = call i64 @bytearray_find_internal(%struct.PyByteArrayObject* %1, %struct._object* %2, i32 -1), !dbg !8048
  store i64 %call, i64* %result, align 8, !dbg !8045, !tbaa !2129
  %3 = load i64, i64* %result, align 8, !dbg !8049, !tbaa !2129
  %cmp = icmp eq i64 %3, -2, !dbg !8051
  br i1 %cmp, label %if.then, label %if.end, !dbg !8052

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8053
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8053

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %result, align 8, !dbg !8054, !tbaa !2129
  %cmp1 = icmp eq i64 %4, -1, !dbg !8056
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !8057

if.then.2:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !8058, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.89, i32 0, i32 0)), !dbg !8060
  store %struct._object* null, %struct._object** %retval, !dbg !8061
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8061

if.end.3:                                         ; preds = %if.end
  %6 = load i64, i64* %result, align 8, !dbg !8062, !tbaa !2129
  %call4 = call %struct._object* @PyLong_FromSsize_t(i64 %6), !dbg !8063
  store %struct._object* %call4, %struct._object** %retval, !dbg !8064
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8064

cleanup:                                          ; preds = %if.end.3, %if.then.2, %if.then
  %7 = bitcast i64* %result to i8*, !dbg !8065
  call void @llvm.lifetime.end(i64 8, i8* %7) #3, !dbg !8065
  %8 = load %struct._object*, %struct._object** %retval, !dbg !8065
  ret %struct._object* %8, !dbg !8065
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_rjust(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %width = alloca i64, align 8
  %fillchar = alloca i8, align 1
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1426, metadata !2123), !dbg !8066
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1427, metadata !2123), !dbg !8067
  %0 = bitcast i64* %width to i8*, !dbg !8068
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8068
  call void @llvm.dbg.declare(metadata i64* %width, metadata !1428, metadata !2123), !dbg !8069
  call void @llvm.lifetime.start(i64 1, i8* %fillchar) #3, !dbg !8070
  call void @llvm.dbg.declare(metadata i8* %fillchar, metadata !1429, metadata !2123), !dbg !8071
  store i8 32, i8* %fillchar, align 1, !dbg !8071, !tbaa !2233
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8072, !tbaa !2119
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.106, i32 0, i32 0), i64* %width, i8* %fillchar), !dbg !8074
  %tobool = icmp ne i32 %call, 0, !dbg !8074
  br i1 %tobool, label %if.end, label %if.then, !dbg !8075

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8076
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8076

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8077, !tbaa !2119
  %3 = bitcast %struct._object* %2 to %struct.PyVarObject*, !dbg !8079
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1, !dbg !8080
  %4 = load i64, i64* %ob_size, align 8, !dbg !8080, !tbaa !2239
  %5 = load i64, i64* %width, align 8, !dbg !8081, !tbaa !2129
  %cmp = icmp sge i64 %4, %5, !dbg !8082
  br i1 %cmp, label %land.lhs.true, label %if.end.7, !dbg !8083

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8084, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1, !dbg !8086
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8086, !tbaa !2203
  %cmp1 = icmp eq %struct._typeobject* %7, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyByteArray_Type to %struct._typeobject*), !dbg !8087
  br i1 %cmp1, label %if.then.2, label %if.end.7, !dbg !8088

if.then.2:                                        ; preds = %land.lhs.true
  %8 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8089, !tbaa !2119
  %9 = bitcast %struct._object* %8 to %struct.PyVarObject*, !dbg !8091
  %ob_size3 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %9, i32 0, i32 1, !dbg !8092
  %10 = load i64, i64* %ob_size3, align 8, !dbg !8092, !tbaa !2239
  %tobool4 = icmp ne i64 %10, 0, !dbg !8093
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !8093

cond.true:                                        ; preds = %if.then.2
  %11 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8094, !tbaa !2119
  %12 = bitcast %struct._object* %11 to %struct.PyByteArrayObject*, !dbg !8096
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %12, i32 0, i32 3, !dbg !8097
  %13 = load i8*, i8** %ob_start, align 8, !dbg !8097, !tbaa !2250
  br label %cond.end, !dbg !8093

cond.false:                                       ; preds = %if.then.2
  br label %cond.end, !dbg !8098

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %13, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !8093
  %14 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8100, !tbaa !2119
  %15 = bitcast %struct._object* %14 to %struct.PyVarObject*, !dbg !8103
  %ob_size5 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %15, i32 0, i32 1, !dbg !8104
  %16 = load i64, i64* %ob_size5, align 8, !dbg !8104, !tbaa !2239
  %call6 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %cond, i64 %16), !dbg !8105
  store %struct._object* %call6, %struct._object** %retval, !dbg !8106
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8106

if.end.7:                                         ; preds = %land.lhs.true, %if.end
  %17 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8107, !tbaa !2119
  %18 = load i64, i64* %width, align 8, !dbg !8108, !tbaa !2129
  %19 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8109, !tbaa !2119
  %20 = bitcast %struct._object* %19 to %struct.PyVarObject*, !dbg !8110
  %ob_size8 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %20, i32 0, i32 1, !dbg !8111
  %21 = load i64, i64* %ob_size8, align 8, !dbg !8111, !tbaa !2239
  %sub = sub i64 %18, %21, !dbg !8112
  %22 = load i8, i8* %fillchar, align 1, !dbg !8113, !tbaa !2233
  %call9 = call %struct._object* @pad(%struct._object* %17, i64 %sub, i64 0, i8 signext %22), !dbg !8114
  store %struct._object* %call9, %struct._object** %retval, !dbg !8115
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8115

cleanup:                                          ; preds = %if.end.7, %cond.end, %if.then
  call void @llvm.lifetime.end(i64 1, i8* %fillchar) #3, !dbg !8116
  %23 = bitcast i64* %width to i8*, !dbg !8116
  call void @llvm.lifetime.end(i64 8, i8* %23) #3, !dbg !8116
  %24 = load %struct._object*, %struct._object** %retval, !dbg !8116
  ret %struct._object* %24, !dbg !8116
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_rpartition(%struct.PyByteArrayObject* %self, %struct._object* %sep_obj) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %sep_obj.addr = alloca %struct._object*, align 8
  %bytesep = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1432, metadata !2123), !dbg !8117
  store %struct._object* %sep_obj, %struct._object** %sep_obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %sep_obj.addr, metadata !1433, metadata !2123), !dbg !8118
  %0 = bitcast %struct._object** %bytesep to i8*, !dbg !8119
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8119
  call void @llvm.dbg.declare(metadata %struct._object** %bytesep, metadata !1434, metadata !2123), !dbg !8120
  %1 = bitcast %struct._object** %result to i8*, !dbg !8119
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !8119
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !1435, metadata !2123), !dbg !8121
  %2 = load %struct._object*, %struct._object** %sep_obj.addr, align 8, !dbg !8122, !tbaa !2119
  %call = call %struct._object* @PyByteArray_FromObject(%struct._object* %2), !dbg !8123
  store %struct._object* %call, %struct._object** %bytesep, align 8, !dbg !8124, !tbaa !2119
  %3 = load %struct._object*, %struct._object** %bytesep, align 8, !dbg !8125, !tbaa !2119
  %tobool = icmp ne %struct._object* %3, null, !dbg !8125
  br i1 %tobool, label %if.end, label %if.then, !dbg !8127

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8128
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8128

if.end:                                           ; preds = %entry
  %4 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8129, !tbaa !2119
  %5 = bitcast %struct.PyByteArrayObject* %4 to %struct._object*, !dbg !8130
  %6 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8131, !tbaa !2119
  %7 = bitcast %struct.PyByteArrayObject* %6 to %struct.PyVarObject*, !dbg !8132
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %7, i32 0, i32 1, !dbg !8133
  %8 = load i64, i64* %ob_size, align 8, !dbg !8133, !tbaa !2239
  %tobool1 = icmp ne i64 %8, 0, !dbg !8134
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !8134

cond.true:                                        ; preds = %if.end
  %9 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8135, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %9, i32 0, i32 3, !dbg !8137
  %10 = load i8*, i8** %ob_start, align 8, !dbg !8137, !tbaa !2250
  br label %cond.end, !dbg !8134

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !8138

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !8134
  %11 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8140, !tbaa !2119
  %12 = bitcast %struct.PyByteArrayObject* %11 to %struct.PyVarObject*, !dbg !8143
  %ob_size2 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %12, i32 0, i32 1, !dbg !8144
  %13 = load i64, i64* %ob_size2, align 8, !dbg !8144, !tbaa !2239
  %14 = load %struct._object*, %struct._object** %bytesep, align 8, !dbg !8145, !tbaa !2119
  %15 = load %struct._object*, %struct._object** %bytesep, align 8, !dbg !8146, !tbaa !2119
  %16 = bitcast %struct._object* %15 to %struct.PyVarObject*, !dbg !8147
  %ob_size3 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %16, i32 0, i32 1, !dbg !8148
  %17 = load i64, i64* %ob_size3, align 8, !dbg !8148, !tbaa !2239
  %tobool4 = icmp ne i64 %17, 0, !dbg !8149
  br i1 %tobool4, label %cond.true.5, label %cond.false.7, !dbg !8149

cond.true.5:                                      ; preds = %cond.end
  %18 = load %struct._object*, %struct._object** %bytesep, align 8, !dbg !8150, !tbaa !2119
  %19 = bitcast %struct._object* %18 to %struct.PyByteArrayObject*, !dbg !8151
  %ob_start6 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %19, i32 0, i32 3, !dbg !8152
  %20 = load i8*, i8** %ob_start6, align 8, !dbg !8152, !tbaa !2250
  br label %cond.end.8, !dbg !8149

cond.false.7:                                     ; preds = %cond.end
  br label %cond.end.8, !dbg !8153

cond.end.8:                                       ; preds = %cond.false.7, %cond.true.5
  %cond9 = phi i8* [ %20, %cond.true.5 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.7 ], !dbg !8149
  %21 = load %struct._object*, %struct._object** %bytesep, align 8, !dbg !8154, !tbaa !2119
  %22 = bitcast %struct._object* %21 to %struct.PyVarObject*, !dbg !8155
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %22, i32 0, i32 1, !dbg !8156
  %23 = load i64, i64* %ob_size10, align 8, !dbg !8156, !tbaa !2239
  %call11 = call %struct._object* @stringlib_rpartition(%struct._object* %5, i8* %cond, i64 %13, %struct._object* %14, i8* %cond9, i64 %23), !dbg !8157
  store %struct._object* %call11, %struct._object** %result, align 8, !dbg !8158, !tbaa !2119
  br label %do.body, !dbg !8159

do.body:                                          ; preds = %cond.end.8
  %24 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8160
  call void @llvm.lifetime.start(i64 8, i8* %24) #3, !dbg !8160
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1436, metadata !2123), !dbg !8162
  %25 = load %struct._object*, %struct._object** %bytesep, align 8, !dbg !8163, !tbaa !2119
  store %struct._object* %25, %struct._object** %_py_decref_tmp, align 8, !dbg !8162, !tbaa !2119
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8164, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0, !dbg !8166
  %27 = load i64, i64* %ob_refcnt, align 8, !dbg !8167, !tbaa !2195
  %dec = add i64 %27, -1, !dbg !8167
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !8167, !tbaa !2195
  %cmp = icmp ne i64 %dec, 0, !dbg !8168
  br i1 %cmp, label %if.then.12, label %if.else, !dbg !8169

if.then.12:                                       ; preds = %do.body
  br label %if.end.13, !dbg !8170

if.else:                                          ; preds = %do.body
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8172, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1, !dbg !8174
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8174, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4, !dbg !8175
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !8175, !tbaa !2205
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8176, !tbaa !2119
  call void %30(%struct._object* %31), !dbg !8177
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.12
  %32 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8178
  call void @llvm.lifetime.end(i64 8, i8* %32) #3, !dbg !8178
  br label %do.cond, !dbg !8180

do.cond:                                          ; preds = %if.end.13
  br label %do.end, !dbg !8181

do.end:                                           ; preds = %do.cond
  %33 = load %struct._object*, %struct._object** %result, align 8, !dbg !8183, !tbaa !2119
  store %struct._object* %33, %struct._object** %retval, !dbg !8184
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8184

cleanup:                                          ; preds = %do.end, %if.then
  %34 = bitcast %struct._object** %result to i8*, !dbg !8185
  call void @llvm.lifetime.end(i64 8, i8* %34) #3, !dbg !8185
  %35 = bitcast %struct._object** %bytesep to i8*, !dbg !8185
  call void @llvm.lifetime.end(i64 8, i8* %35) #3, !dbg !8185
  %36 = load %struct._object*, %struct._object** %retval, !dbg !8185
  ret %struct._object* %36, !dbg !8185
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_rsplit(%struct.PyByteArrayObject* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %n = alloca i64, align 8
  %maxsplit = alloca i64, align 8
  %s = alloca i8*, align 8
  %sub = alloca i8*, align 8
  %list = alloca %struct._object*, align 8
  %subobj = alloca %struct._object*, align 8
  %vsub = alloca %struct.bufferinfo, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1462, metadata !2123), !dbg !8186
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1463, metadata !2123), !dbg !8187
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %kwds.addr, metadata !1464, metadata !2123), !dbg !8188
  %0 = bitcast i64* %len to i8*, !dbg !8189
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8189
  call void @llvm.dbg.declare(metadata i64* %len, metadata !1465, metadata !2123), !dbg !8190
  %1 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8191, !tbaa !2119
  %2 = bitcast %struct.PyByteArrayObject* %1 to %struct.PyVarObject*, !dbg !8192
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1, !dbg !8193
  %3 = load i64, i64* %ob_size, align 8, !dbg !8193, !tbaa !2239
  store i64 %3, i64* %len, align 8, !dbg !8190, !tbaa !2129
  %4 = bitcast i64* %n to i8*, !dbg !8189
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !8189
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1466, metadata !2123), !dbg !8194
  %5 = bitcast i64* %maxsplit to i8*, !dbg !8195
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !8195
  call void @llvm.dbg.declare(metadata i64* %maxsplit, metadata !1467, metadata !2123), !dbg !8196
  store i64 -1, i64* %maxsplit, align 8, !dbg !8196, !tbaa !2129
  %6 = bitcast i8** %s to i8*, !dbg !8197
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !8197
  call void @llvm.dbg.declare(metadata i8** %s, metadata !1468, metadata !2123), !dbg !8198
  %7 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8199, !tbaa !2119
  %8 = bitcast %struct.PyByteArrayObject* %7 to %struct.PyVarObject*, !dbg !8200
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !8201
  %9 = load i64, i64* %ob_size1, align 8, !dbg !8201, !tbaa !2239
  %tobool = icmp ne i64 %9, 0, !dbg !8202
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8202

cond.true:                                        ; preds = %entry
  %10 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8203, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %10, i32 0, i32 3, !dbg !8205
  %11 = load i8*, i8** %ob_start, align 8, !dbg !8205, !tbaa !2250
  br label %cond.end, !dbg !8202

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8206

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %11, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !8202
  store i8* %cond, i8** %s, align 8, !dbg !8208, !tbaa !2119
  %12 = bitcast i8** %sub to i8*, !dbg !8197
  call void @llvm.lifetime.start(i64 8, i8* %12) #3, !dbg !8197
  call void @llvm.dbg.declare(metadata i8** %sub, metadata !1469, metadata !2123), !dbg !8211
  %13 = bitcast %struct._object** %list to i8*, !dbg !8212
  call void @llvm.lifetime.start(i64 8, i8* %13) #3, !dbg !8212
  call void @llvm.dbg.declare(metadata %struct._object** %list, metadata !1470, metadata !2123), !dbg !8213
  %14 = bitcast %struct._object** %subobj to i8*, !dbg !8212
  call void @llvm.lifetime.start(i64 8, i8* %14) #3, !dbg !8212
  call void @llvm.dbg.declare(metadata %struct._object** %subobj, metadata !1471, metadata !2123), !dbg !8214
  store %struct._object* @_Py_NoneStruct, %struct._object** %subobj, align 8, !dbg !8214, !tbaa !2119
  %15 = bitcast %struct.bufferinfo* %vsub to i8*, !dbg !8215
  call void @llvm.lifetime.start(i64 80, i8* %15) #3, !dbg !8215
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %vsub, metadata !1472, metadata !2123), !dbg !8216
  %16 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8217, !tbaa !2119
  %17 = load %struct._object*, %struct._object** %kwds.addr, align 8, !dbg !8219, !tbaa !2119
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %16, %struct._object* %17, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.109, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @bytearray_rsplit.kwlist, i32 0, i32 0), %struct._object** %subobj, i64* %maxsplit), !dbg !8220
  %tobool2 = icmp ne i32 %call, 0, !dbg !8220
  br i1 %tobool2, label %if.end, label %if.then, !dbg !8221

if.then:                                          ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval, !dbg !8222
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8222

if.end:                                           ; preds = %cond.end
  %18 = load i64, i64* %maxsplit, align 8, !dbg !8223, !tbaa !2129
  %cmp = icmp slt i64 %18, 0, !dbg !8225
  br i1 %cmp, label %if.then.3, label %if.end.4, !dbg !8226

if.then.3:                                        ; preds = %if.end
  store i64 9223372036854775807, i64* %maxsplit, align 8, !dbg !8227, !tbaa !2129
  br label %if.end.4, !dbg !8228

if.end.4:                                         ; preds = %if.then.3, %if.end
  %19 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !8229, !tbaa !2119
  %cmp5 = icmp eq %struct._object* %19, @_Py_NoneStruct, !dbg !8231
  br i1 %cmp5, label %if.then.6, label %if.end.8, !dbg !8232

if.then.6:                                        ; preds = %if.end.4
  %20 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8233, !tbaa !2119
  %21 = bitcast %struct.PyByteArrayObject* %20 to %struct._object*, !dbg !8234
  %22 = load i8*, i8** %s, align 8, !dbg !8235, !tbaa !2119
  %23 = load i64, i64* %len, align 8, !dbg !8236, !tbaa !2129
  %24 = load i64, i64* %maxsplit, align 8, !dbg !8237, !tbaa !2129
  %call7 = call %struct._object* @stringlib_rsplit_whitespace(%struct._object* %21, i8* %22, i64 %23, i64 %24), !dbg !8238
  store %struct._object* %call7, %struct._object** %retval, !dbg !8239
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8239

if.end.8:                                         ; preds = %if.end.4
  %25 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !8240, !tbaa !2119
  %call9 = call i64 @_getbuffer(%struct._object* %25, %struct.bufferinfo* %vsub), !dbg !8242
  %cmp10 = icmp slt i64 %call9, 0, !dbg !8243
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !8244

if.then.11:                                       ; preds = %if.end.8
  store %struct._object* null, %struct._object** %retval, !dbg !8245
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8245

if.end.12:                                        ; preds = %if.end.8
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vsub, i32 0, i32 0, !dbg !8246
  %26 = load i8*, i8** %buf, align 8, !dbg !8246, !tbaa !2529
  store i8* %26, i8** %sub, align 8, !dbg !8247, !tbaa !2119
  %len13 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vsub, i32 0, i32 2, !dbg !8248
  %27 = load i64, i64* %len13, align 8, !dbg !8248, !tbaa !2482
  store i64 %27, i64* %n, align 8, !dbg !8249, !tbaa !2129
  %28 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8250, !tbaa !2119
  %29 = bitcast %struct.PyByteArrayObject* %28 to %struct._object*, !dbg !8251
  %30 = load i8*, i8** %s, align 8, !dbg !8252, !tbaa !2119
  %31 = load i64, i64* %len, align 8, !dbg !8253, !tbaa !2129
  %32 = load i8*, i8** %sub, align 8, !dbg !8254, !tbaa !2119
  %33 = load i64, i64* %n, align 8, !dbg !8255, !tbaa !2129
  %34 = load i64, i64* %maxsplit, align 8, !dbg !8256, !tbaa !2129
  %call14 = call %struct._object* @stringlib_rsplit(%struct._object* %29, i8* %30, i64 %31, i8* %32, i64 %33, i64 %34), !dbg !8257
  store %struct._object* %call14, %struct._object** %list, align 8, !dbg !8258, !tbaa !2119
  call void @PyBuffer_Release(%struct.bufferinfo* %vsub), !dbg !8259
  %35 = load %struct._object*, %struct._object** %list, align 8, !dbg !8260, !tbaa !2119
  store %struct._object* %35, %struct._object** %retval, !dbg !8261
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8261

cleanup:                                          ; preds = %if.end.12, %if.then.11, %if.then.6, %if.then
  %36 = bitcast %struct.bufferinfo* %vsub to i8*, !dbg !8262
  call void @llvm.lifetime.end(i64 80, i8* %36) #3, !dbg !8262
  %37 = bitcast %struct._object** %subobj to i8*, !dbg !8262
  call void @llvm.lifetime.end(i64 8, i8* %37) #3, !dbg !8262
  %38 = bitcast %struct._object** %list to i8*, !dbg !8262
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !8262
  %39 = bitcast i8** %sub to i8*, !dbg !8262
  call void @llvm.lifetime.end(i64 8, i8* %39) #3, !dbg !8262
  %40 = bitcast i8** %s to i8*, !dbg !8262
  call void @llvm.lifetime.end(i64 8, i8* %40) #3, !dbg !8262
  %41 = bitcast i64* %maxsplit to i8*, !dbg !8262
  call void @llvm.lifetime.end(i64 8, i8* %41) #3, !dbg !8262
  %42 = bitcast i64* %n to i8*, !dbg !8262
  call void @llvm.lifetime.end(i64 8, i8* %42) #3, !dbg !8262
  %43 = bitcast i64* %len to i8*, !dbg !8262
  call void @llvm.lifetime.end(i64 8, i8* %43) #3, !dbg !8262
  %44 = load %struct._object*, %struct._object** %retval, !dbg !8262
  ret %struct._object* %44, !dbg !8262
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_rstrip(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %right = alloca i64, align 8
  %mysize = alloca i64, align 8
  %argsize = alloca i64, align 8
  %myptr = alloca i8*, align 8
  %argptr = alloca i8*, align 8
  %arg = alloca %struct._object*, align 8
  %varg = alloca %struct.bufferinfo, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1592, metadata !2123), !dbg !8263
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1593, metadata !2123), !dbg !8264
  %0 = bitcast i64* %right to i8*, !dbg !8265
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8265
  call void @llvm.dbg.declare(metadata i64* %right, metadata !1594, metadata !2123), !dbg !8266
  %1 = bitcast i64* %mysize to i8*, !dbg !8265
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !8265
  call void @llvm.dbg.declare(metadata i64* %mysize, metadata !1595, metadata !2123), !dbg !8267
  %2 = bitcast i64* %argsize to i8*, !dbg !8265
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !8265
  call void @llvm.dbg.declare(metadata i64* %argsize, metadata !1596, metadata !2123), !dbg !8268
  %3 = bitcast i8** %myptr to i8*, !dbg !8269
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !8269
  call void @llvm.dbg.declare(metadata i8** %myptr, metadata !1597, metadata !2123), !dbg !8270
  %4 = bitcast i8** %argptr to i8*, !dbg !8269
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !8269
  call void @llvm.dbg.declare(metadata i8** %argptr, metadata !1598, metadata !2123), !dbg !8271
  %5 = bitcast %struct._object** %arg to i8*, !dbg !8272
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !8272
  call void @llvm.dbg.declare(metadata %struct._object** %arg, metadata !1599, metadata !2123), !dbg !8273
  store %struct._object* @_Py_NoneStruct, %struct._object** %arg, align 8, !dbg !8273, !tbaa !2119
  %6 = bitcast %struct.bufferinfo* %varg to i8*, !dbg !8274
  call void @llvm.lifetime.start(i64 80, i8* %6) #3, !dbg !8274
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %varg, metadata !1600, metadata !2123), !dbg !8275
  %7 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8276, !tbaa !2119
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.110, i32 0, i32 0), %struct._object** %arg), !dbg !8278
  %tobool = icmp ne i32 %call, 0, !dbg !8278
  br i1 %tobool, label %if.end, label %if.then, !dbg !8279

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8280
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8280

if.end:                                           ; preds = %entry
  %8 = load %struct._object*, %struct._object** %arg, align 8, !dbg !8281, !tbaa !2119
  %cmp = icmp eq %struct._object* %8, @_Py_NoneStruct, !dbg !8283
  br i1 %cmp, label %if.then.1, label %if.else, !dbg !8284

if.then.1:                                        ; preds = %if.end
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0), i8** %argptr, align 8, !dbg !8285, !tbaa !2119
  store i64 6, i64* %argsize, align 8, !dbg !8287, !tbaa !2129
  br label %if.end.6, !dbg !8288

if.else:                                          ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %arg, align 8, !dbg !8289, !tbaa !2119
  %call2 = call i64 @_getbuffer(%struct._object* %9, %struct.bufferinfo* %varg), !dbg !8292
  %cmp3 = icmp slt i64 %call2, 0, !dbg !8293
  br i1 %cmp3, label %if.then.4, label %if.end.5, !dbg !8294

if.then.4:                                        ; preds = %if.else
  store %struct._object* null, %struct._object** %retval, !dbg !8295
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8295

if.end.5:                                         ; preds = %if.else
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %varg, i32 0, i32 0, !dbg !8296
  %10 = load i8*, i8** %buf, align 8, !dbg !8296, !tbaa !2529
  store i8* %10, i8** %argptr, align 8, !dbg !8297, !tbaa !2119
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %varg, i32 0, i32 2, !dbg !8298
  %11 = load i64, i64* %len, align 8, !dbg !8298, !tbaa !2482
  store i64 %11, i64* %argsize, align 8, !dbg !8299, !tbaa !2129
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.then.1
  %12 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8300, !tbaa !2119
  %13 = bitcast %struct.PyByteArrayObject* %12 to %struct.PyVarObject*, !dbg !8301
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %13, i32 0, i32 1, !dbg !8302
  %14 = load i64, i64* %ob_size, align 8, !dbg !8302, !tbaa !2239
  %tobool7 = icmp ne i64 %14, 0, !dbg !8303
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !8303

cond.true:                                        ; preds = %if.end.6
  %15 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8304, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %15, i32 0, i32 3, !dbg !8306
  %16 = load i8*, i8** %ob_start, align 8, !dbg !8306, !tbaa !2250
  br label %cond.end, !dbg !8303

cond.false:                                       ; preds = %if.end.6
  br label %cond.end, !dbg !8307

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %16, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !8303
  store i8* %cond, i8** %myptr, align 8, !dbg !8309, !tbaa !2119
  %17 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8312, !tbaa !2119
  %18 = bitcast %struct.PyByteArrayObject* %17 to %struct.PyVarObject*, !dbg !8313
  %ob_size8 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1, !dbg !8314
  %19 = load i64, i64* %ob_size8, align 8, !dbg !8314, !tbaa !2239
  store i64 %19, i64* %mysize, align 8, !dbg !8315, !tbaa !2129
  %20 = load i8*, i8** %myptr, align 8, !dbg !8316, !tbaa !2119
  %21 = load i64, i64* %mysize, align 8, !dbg !8317, !tbaa !2129
  %22 = load i8*, i8** %argptr, align 8, !dbg !8318, !tbaa !2119
  %23 = load i64, i64* %argsize, align 8, !dbg !8319, !tbaa !2129
  %call9 = call i64 @rstrip_helper(i8* %20, i64 %21, i8* %22, i64 %23), !dbg !8320
  store i64 %call9, i64* %right, align 8, !dbg !8321, !tbaa !2129
  %24 = load %struct._object*, %struct._object** %arg, align 8, !dbg !8322, !tbaa !2119
  %cmp10 = icmp ne %struct._object* %24, @_Py_NoneStruct, !dbg !8324
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !8325

if.then.11:                                       ; preds = %cond.end
  call void @PyBuffer_Release(%struct.bufferinfo* %varg), !dbg !8326
  br label %if.end.12, !dbg !8326

if.end.12:                                        ; preds = %if.then.11, %cond.end
  %25 = load i8*, i8** %myptr, align 8, !dbg !8327, !tbaa !2119
  %26 = load i64, i64* %right, align 8, !dbg !8328, !tbaa !2129
  %call13 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %25, i64 %26), !dbg !8329
  store %struct._object* %call13, %struct._object** %retval, !dbg !8330
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8330

cleanup:                                          ; preds = %if.end.12, %if.then.4, %if.then
  %27 = bitcast %struct.bufferinfo* %varg to i8*, !dbg !8331
  call void @llvm.lifetime.end(i64 80, i8* %27) #3, !dbg !8331
  %28 = bitcast %struct._object** %arg to i8*, !dbg !8331
  call void @llvm.lifetime.end(i64 8, i8* %28) #3, !dbg !8331
  %29 = bitcast i8** %argptr to i8*, !dbg !8331
  call void @llvm.lifetime.end(i64 8, i8* %29) #3, !dbg !8331
  %30 = bitcast i8** %myptr to i8*, !dbg !8331
  call void @llvm.lifetime.end(i64 8, i8* %30) #3, !dbg !8331
  %31 = bitcast i64* %argsize to i8*, !dbg !8331
  call void @llvm.lifetime.end(i64 8, i8* %31) #3, !dbg !8331
  %32 = bitcast i64* %mysize to i8*, !dbg !8331
  call void @llvm.lifetime.end(i64 8, i8* %32) #3, !dbg !8331
  %33 = bitcast i64* %right to i8*, !dbg !8331
  call void @llvm.lifetime.end(i64 8, i8* %33) #3, !dbg !8331
  %34 = load %struct._object*, %struct._object** %retval, !dbg !8331
  ret %struct._object* %34, !dbg !8331
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_split(%struct.PyByteArrayObject* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %n = alloca i64, align 8
  %maxsplit = alloca i64, align 8
  %s = alloca i8*, align 8
  %sub = alloca i8*, align 8
  %list = alloca %struct._object*, align 8
  %subobj = alloca %struct._object*, align 8
  %vsub = alloca %struct.bufferinfo, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1610, metadata !2123), !dbg !8332
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1611, metadata !2123), !dbg !8333
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %kwds.addr, metadata !1612, metadata !2123), !dbg !8334
  %0 = bitcast i64* %len to i8*, !dbg !8335
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8335
  call void @llvm.dbg.declare(metadata i64* %len, metadata !1613, metadata !2123), !dbg !8336
  %1 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8337, !tbaa !2119
  %2 = bitcast %struct.PyByteArrayObject* %1 to %struct.PyVarObject*, !dbg !8338
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1, !dbg !8339
  %3 = load i64, i64* %ob_size, align 8, !dbg !8339, !tbaa !2239
  store i64 %3, i64* %len, align 8, !dbg !8336, !tbaa !2129
  %4 = bitcast i64* %n to i8*, !dbg !8335
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !8335
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1614, metadata !2123), !dbg !8340
  %5 = bitcast i64* %maxsplit to i8*, !dbg !8341
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !8341
  call void @llvm.dbg.declare(metadata i64* %maxsplit, metadata !1615, metadata !2123), !dbg !8342
  store i64 -1, i64* %maxsplit, align 8, !dbg !8342, !tbaa !2129
  %6 = bitcast i8** %s to i8*, !dbg !8343
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !8343
  call void @llvm.dbg.declare(metadata i8** %s, metadata !1616, metadata !2123), !dbg !8344
  %7 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8345, !tbaa !2119
  %8 = bitcast %struct.PyByteArrayObject* %7 to %struct.PyVarObject*, !dbg !8346
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !8347
  %9 = load i64, i64* %ob_size1, align 8, !dbg !8347, !tbaa !2239
  %tobool = icmp ne i64 %9, 0, !dbg !8348
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8348

cond.true:                                        ; preds = %entry
  %10 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8349, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %10, i32 0, i32 3, !dbg !8351
  %11 = load i8*, i8** %ob_start, align 8, !dbg !8351, !tbaa !2250
  br label %cond.end, !dbg !8348

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8352

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %11, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !8348
  store i8* %cond, i8** %s, align 8, !dbg !8354, !tbaa !2119
  %12 = bitcast i8** %sub to i8*, !dbg !8343
  call void @llvm.lifetime.start(i64 8, i8* %12) #3, !dbg !8343
  call void @llvm.dbg.declare(metadata i8** %sub, metadata !1617, metadata !2123), !dbg !8357
  %13 = bitcast %struct._object** %list to i8*, !dbg !8358
  call void @llvm.lifetime.start(i64 8, i8* %13) #3, !dbg !8358
  call void @llvm.dbg.declare(metadata %struct._object** %list, metadata !1618, metadata !2123), !dbg !8359
  %14 = bitcast %struct._object** %subobj to i8*, !dbg !8358
  call void @llvm.lifetime.start(i64 8, i8* %14) #3, !dbg !8358
  call void @llvm.dbg.declare(metadata %struct._object** %subobj, metadata !1619, metadata !2123), !dbg !8360
  store %struct._object* @_Py_NoneStruct, %struct._object** %subobj, align 8, !dbg !8360, !tbaa !2119
  %15 = bitcast %struct.bufferinfo* %vsub to i8*, !dbg !8361
  call void @llvm.lifetime.start(i64 80, i8* %15) #3, !dbg !8361
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %vsub, metadata !1620, metadata !2123), !dbg !8362
  %16 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8363, !tbaa !2119
  %17 = load %struct._object*, %struct._object** %kwds.addr, align 8, !dbg !8365, !tbaa !2119
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %16, %struct._object* %17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @bytearray_split.kwlist, i32 0, i32 0), %struct._object** %subobj, i64* %maxsplit), !dbg !8366
  %tobool2 = icmp ne i32 %call, 0, !dbg !8366
  br i1 %tobool2, label %if.end, label %if.then, !dbg !8367

if.then:                                          ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval, !dbg !8368
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8368

if.end:                                           ; preds = %cond.end
  %18 = load i64, i64* %maxsplit, align 8, !dbg !8369, !tbaa !2129
  %cmp = icmp slt i64 %18, 0, !dbg !8371
  br i1 %cmp, label %if.then.3, label %if.end.4, !dbg !8372

if.then.3:                                        ; preds = %if.end
  store i64 9223372036854775807, i64* %maxsplit, align 8, !dbg !8373, !tbaa !2129
  br label %if.end.4, !dbg !8374

if.end.4:                                         ; preds = %if.then.3, %if.end
  %19 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !8375, !tbaa !2119
  %cmp5 = icmp eq %struct._object* %19, @_Py_NoneStruct, !dbg !8377
  br i1 %cmp5, label %if.then.6, label %if.end.8, !dbg !8378

if.then.6:                                        ; preds = %if.end.4
  %20 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8379, !tbaa !2119
  %21 = bitcast %struct.PyByteArrayObject* %20 to %struct._object*, !dbg !8380
  %22 = load i8*, i8** %s, align 8, !dbg !8381, !tbaa !2119
  %23 = load i64, i64* %len, align 8, !dbg !8382, !tbaa !2129
  %24 = load i64, i64* %maxsplit, align 8, !dbg !8383, !tbaa !2129
  %call7 = call %struct._object* @stringlib_split_whitespace(%struct._object* %21, i8* %22, i64 %23, i64 %24), !dbg !8384
  store %struct._object* %call7, %struct._object** %retval, !dbg !8385
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8385

if.end.8:                                         ; preds = %if.end.4
  %25 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !8386, !tbaa !2119
  %call9 = call i64 @_getbuffer(%struct._object* %25, %struct.bufferinfo* %vsub), !dbg !8388
  %cmp10 = icmp slt i64 %call9, 0, !dbg !8389
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !8390

if.then.11:                                       ; preds = %if.end.8
  store %struct._object* null, %struct._object** %retval, !dbg !8391
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8391

if.end.12:                                        ; preds = %if.end.8
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vsub, i32 0, i32 0, !dbg !8392
  %26 = load i8*, i8** %buf, align 8, !dbg !8392, !tbaa !2529
  store i8* %26, i8** %sub, align 8, !dbg !8393, !tbaa !2119
  %len13 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vsub, i32 0, i32 2, !dbg !8394
  %27 = load i64, i64* %len13, align 8, !dbg !8394, !tbaa !2482
  store i64 %27, i64* %n, align 8, !dbg !8395, !tbaa !2129
  %28 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8396, !tbaa !2119
  %29 = bitcast %struct.PyByteArrayObject* %28 to %struct._object*, !dbg !8397
  %30 = load i8*, i8** %s, align 8, !dbg !8398, !tbaa !2119
  %31 = load i64, i64* %len, align 8, !dbg !8399, !tbaa !2129
  %32 = load i8*, i8** %sub, align 8, !dbg !8400, !tbaa !2119
  %33 = load i64, i64* %n, align 8, !dbg !8401, !tbaa !2129
  %34 = load i64, i64* %maxsplit, align 8, !dbg !8402, !tbaa !2129
  %call14 = call %struct._object* @stringlib_split(%struct._object* %29, i8* %30, i64 %31, i8* %32, i64 %33, i64 %34), !dbg !8403
  store %struct._object* %call14, %struct._object** %list, align 8, !dbg !8404, !tbaa !2119
  call void @PyBuffer_Release(%struct.bufferinfo* %vsub), !dbg !8405
  %35 = load %struct._object*, %struct._object** %list, align 8, !dbg !8406, !tbaa !2119
  store %struct._object* %35, %struct._object** %retval, !dbg !8407
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8407

cleanup:                                          ; preds = %if.end.12, %if.then.11, %if.then.6, %if.then
  %36 = bitcast %struct.bufferinfo* %vsub to i8*, !dbg !8408
  call void @llvm.lifetime.end(i64 80, i8* %36) #3, !dbg !8408
  %37 = bitcast %struct._object** %subobj to i8*, !dbg !8408
  call void @llvm.lifetime.end(i64 8, i8* %37) #3, !dbg !8408
  %38 = bitcast %struct._object** %list to i8*, !dbg !8408
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !8408
  %39 = bitcast i8** %sub to i8*, !dbg !8408
  call void @llvm.lifetime.end(i64 8, i8* %39) #3, !dbg !8408
  %40 = bitcast i8** %s to i8*, !dbg !8408
  call void @llvm.lifetime.end(i64 8, i8* %40) #3, !dbg !8408
  %41 = bitcast i64* %maxsplit to i8*, !dbg !8408
  call void @llvm.lifetime.end(i64 8, i8* %41) #3, !dbg !8408
  %42 = bitcast i64* %n to i8*, !dbg !8408
  call void @llvm.lifetime.end(i64 8, i8* %42) #3, !dbg !8408
  %43 = bitcast i64* %len to i8*, !dbg !8408
  call void @llvm.lifetime.end(i64 8, i8* %43) #3, !dbg !8408
  %44 = load %struct._object*, %struct._object** %retval, !dbg !8408
  ret %struct._object* %44, !dbg !8408
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_splitlines(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %keepends = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1734, metadata !2123), !dbg !8409
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1735, metadata !2123), !dbg !8410
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %kwds.addr, metadata !1736, metadata !2123), !dbg !8411
  %0 = bitcast i32* %keepends to i8*, !dbg !8412
  call void @llvm.lifetime.start(i64 4, i8* %0) #3, !dbg !8412
  call void @llvm.dbg.declare(metadata i32* %keepends, metadata !1737, metadata !2123), !dbg !8413
  store i32 0, i32* %keepends, align 4, !dbg !8413, !tbaa !2676
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8414, !tbaa !2119
  %2 = load %struct._object*, %struct._object** %kwds.addr, align 8, !dbg !8416, !tbaa !2119
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object* %1, %struct._object* %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.113, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @bytearray_splitlines.kwlist, i32 0, i32 0), i32* %keepends), !dbg !8417
  %tobool = icmp ne i32 %call, 0, !dbg !8417
  br i1 %tobool, label %if.end, label %if.then, !dbg !8418

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8419
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8419

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8420, !tbaa !2119
  %4 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8421, !tbaa !2119
  %5 = bitcast %struct._object* %4 to %struct.PyVarObject*, !dbg !8422
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %5, i32 0, i32 1, !dbg !8423
  %6 = load i64, i64* %ob_size, align 8, !dbg !8423, !tbaa !2239
  %tobool1 = icmp ne i64 %6, 0, !dbg !8424
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !8424

cond.true:                                        ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8425, !tbaa !2119
  %8 = bitcast %struct._object* %7 to %struct.PyByteArrayObject*, !dbg !8427
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %8, i32 0, i32 3, !dbg !8428
  %9 = load i8*, i8** %ob_start, align 8, !dbg !8428, !tbaa !2250
  br label %cond.end, !dbg !8424

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !8429

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %9, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !8424
  %10 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8431, !tbaa !2119
  %11 = bitcast %struct._object* %10 to %struct.PyVarObject*, !dbg !8432
  %ob_size2 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %11, i32 0, i32 1, !dbg !8433
  %12 = load i64, i64* %ob_size2, align 8, !dbg !8433, !tbaa !2239
  %13 = load i32, i32* %keepends, align 4, !dbg !8434, !tbaa !2676
  %call3 = call %struct._object* @stringlib_splitlines(%struct._object* %3, i8* %cond, i64 %12, i32 %13), !dbg !8435
  store %struct._object* %call3, %struct._object** %retval, !dbg !8436
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8436

cleanup:                                          ; preds = %cond.end, %if.then
  %14 = bitcast i32* %keepends to i8*, !dbg !8437
  call void @llvm.lifetime.end(i64 4, i8* %14) #3, !dbg !8437
  %15 = load %struct._object*, %struct._object** %retval, !dbg !8437
  ret %struct._object* %15, !dbg !8437
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_startswith(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %subobj = alloca %struct._object*, align 8
  %result = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %i = alloca i64, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1764, metadata !2123), !dbg !8438
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1765, metadata !2123), !dbg !8439
  %0 = bitcast i64* %start to i8*, !dbg !8440
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8440
  call void @llvm.dbg.declare(metadata i64* %start, metadata !1766, metadata !2123), !dbg !8441
  store i64 0, i64* %start, align 8, !dbg !8441, !tbaa !2129
  %1 = bitcast i64* %end to i8*, !dbg !8442
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !8442
  call void @llvm.dbg.declare(metadata i64* %end, metadata !1767, metadata !2123), !dbg !8443
  store i64 9223372036854775807, i64* %end, align 8, !dbg !8443, !tbaa !2129
  %2 = bitcast %struct._object** %subobj to i8*, !dbg !8444
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !8444
  call void @llvm.dbg.declare(metadata %struct._object** %subobj, metadata !1768, metadata !2123), !dbg !8445
  %3 = bitcast i32* %result to i8*, !dbg !8446
  call void @llvm.lifetime.start(i64 4, i8* %3) #3, !dbg !8446
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1769, metadata !2123), !dbg !8447
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8448, !tbaa !2119
  %call = call i32 @stringlib_parse_args_finds(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.64, i32 0, i32 0), %struct._object* %4, %struct._object** %subobj, i64* %start, i64* %end), !dbg !8450
  %tobool = icmp ne i32 %call, 0, !dbg !8450
  br i1 %tobool, label %if.end, label %if.then, !dbg !8451

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8452
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.24, !dbg !8452

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !8453, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !8454
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8454, !tbaa !2203
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 19, !dbg !8455
  %7 = load i64, i64* %tp_flags, align 8, !dbg !8455, !tbaa !3199
  %and = and i64 %7, 67108864, !dbg !8456
  %cmp = icmp ne i64 %and, 0, !dbg !8457
  br i1 %cmp, label %if.then.1, label %if.end.12, !dbg !8458

if.then.1:                                        ; preds = %if.end
  %8 = bitcast i64* %i to i8*, !dbg !8459
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !8459
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1770, metadata !2123), !dbg !8460
  store i64 0, i64* %i, align 8, !dbg !8461, !tbaa !2129
  br label %for.cond, !dbg !8463

for.cond:                                         ; preds = %for.inc, %if.then.1
  %9 = load i64, i64* %i, align 8, !dbg !8464, !tbaa !2129
  %10 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !8468, !tbaa !2119
  %11 = bitcast %struct._object* %10 to %struct.PyVarObject*, !dbg !8469
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %11, i32 0, i32 1, !dbg !8470
  %12 = load i64, i64* %ob_size, align 8, !dbg !8470, !tbaa !2239
  %cmp2 = icmp slt i64 %9, %12, !dbg !8471
  br i1 %cmp2, label %for.body, label %for.end, !dbg !8472

for.body:                                         ; preds = %for.cond
  %13 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8473, !tbaa !2119
  %14 = load i64, i64* %i, align 8, !dbg !8475, !tbaa !2129
  %15 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !8476, !tbaa !2119
  %16 = bitcast %struct._object* %15 to %struct.PyTupleObject*, !dbg !8477
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %16, i32 0, i32 1, !dbg !8478
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %14, !dbg !8479
  %17 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !8479, !tbaa !2119
  %18 = load i64, i64* %start, align 8, !dbg !8480, !tbaa !2129
  %19 = load i64, i64* %end, align 8, !dbg !8481, !tbaa !2129
  %call3 = call i32 @_bytearray_tailmatch(%struct.PyByteArrayObject* %13, %struct._object* %17, i64 %18, i64 %19, i32 -1), !dbg !8482
  store i32 %call3, i32* %result, align 4, !dbg !8483, !tbaa !2676
  %20 = load i32, i32* %result, align 4, !dbg !8484, !tbaa !2676
  %cmp4 = icmp eq i32 %20, -1, !dbg !8486
  br i1 %cmp4, label %if.then.5, label %if.else, !dbg !8487

if.then.5:                                        ; preds = %for.body
  store %struct._object* null, %struct._object** %retval, !dbg !8488
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8488

if.else:                                          ; preds = %for.body
  %21 = load i32, i32* %result, align 4, !dbg !8489, !tbaa !2676
  %tobool6 = icmp ne i32 %21, 0, !dbg !8489
  br i1 %tobool6, label %if.then.7, label %if.end.8, !dbg !8491

if.then.7:                                        ; preds = %if.else
  %22 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !8492, !tbaa !2195
  %inc = add i64 %22, 1, !dbg !8492
  store i64 %inc, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !8492, !tbaa !2195
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object** %retval, !dbg !8494
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8494

if.end.8:                                         ; preds = %if.else
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8
  br label %for.inc, !dbg !8495

for.inc:                                          ; preds = %if.end.9
  %23 = load i64, i64* %i, align 8, !dbg !8496, !tbaa !2129
  %inc10 = add i64 %23, 1, !dbg !8496
  store i64 %inc10, i64* %i, align 8, !dbg !8496, !tbaa !2129
  br label %for.cond, !dbg !8497

for.end:                                          ; preds = %for.cond
  %24 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !8498, !tbaa !2195
  %inc11 = add i64 %24, 1, !dbg !8498
  store i64 %inc11, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !8498, !tbaa !2195
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0), %struct._object** %retval, !dbg !8499
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8499

cleanup:                                          ; preds = %for.end, %if.then.7, %if.then.5
  %25 = bitcast i64* %i to i8*, !dbg !8500
  call void @llvm.lifetime.end(i64 8, i8* %25) #3, !dbg !8500
  br label %cleanup.24

if.end.12:                                        ; preds = %if.end
  %26 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8501, !tbaa !2119
  %27 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !8502, !tbaa !2119
  %28 = load i64, i64* %start, align 8, !dbg !8503, !tbaa !2129
  %29 = load i64, i64* %end, align 8, !dbg !8504, !tbaa !2129
  %call13 = call i32 @_bytearray_tailmatch(%struct.PyByteArrayObject* %26, %struct._object* %27, i64 %28, i64 %29, i32 -1), !dbg !8505
  store i32 %call13, i32* %result, align 4, !dbg !8506, !tbaa !2676
  %30 = load i32, i32* %result, align 4, !dbg !8507, !tbaa !2676
  %cmp14 = icmp eq i32 %30, -1, !dbg !8509
  br i1 %cmp14, label %if.then.15, label %if.else.22, !dbg !8510

if.then.15:                                       ; preds = %if.end.12
  %31 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !8511, !tbaa !2119
  %call16 = call i32 @PyErr_ExceptionMatches(%struct._object* %31), !dbg !8514
  %tobool17 = icmp ne i32 %call16, 0, !dbg !8514
  br i1 %tobool17, label %if.then.18, label %if.end.21, !dbg !8515

if.then.18:                                       ; preds = %if.then.15
  %32 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !8516, !tbaa !2119
  %33 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !8517, !tbaa !2119
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1, !dbg !8518
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8, !dbg !8518, !tbaa !2203
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 1, !dbg !8519
  %35 = load i8*, i8** %tp_name, align 8, !dbg !8519, !tbaa !2500
  %call20 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %32, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.114, i32 0, i32 0), i8* %35), !dbg !8520
  br label %if.end.21, !dbg !8520

if.end.21:                                        ; preds = %if.then.18, %if.then.15
  store %struct._object* null, %struct._object** %retval, !dbg !8521
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.24, !dbg !8521

if.else.22:                                       ; preds = %if.end.12
  %36 = load i32, i32* %result, align 4, !dbg !8522, !tbaa !2676
  %conv = sext i32 %36 to i64, !dbg !8522
  %call23 = call %struct._object* @PyBool_FromLong(i64 %conv), !dbg !8523
  store %struct._object* %call23, %struct._object** %retval, !dbg !8524
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.24, !dbg !8524

cleanup.24:                                       ; preds = %if.else.22, %if.end.21, %cleanup, %if.then
  %37 = bitcast i32* %result to i8*, !dbg !8525
  call void @llvm.lifetime.end(i64 4, i8* %37) #3, !dbg !8525
  %38 = bitcast %struct._object** %subobj to i8*, !dbg !8525
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !8525
  %39 = bitcast i64* %end to i8*, !dbg !8525
  call void @llvm.lifetime.end(i64 8, i8* %39) #3, !dbg !8525
  %40 = bitcast i64* %start to i8*, !dbg !8525
  call void @llvm.lifetime.end(i64 8, i8* %40) #3, !dbg !8525
  %41 = load %struct._object*, %struct._object** %retval, !dbg !8525
  ret %struct._object* %41, !dbg !8525
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_strip(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %left = alloca i64, align 8
  %right = alloca i64, align 8
  %mysize = alloca i64, align 8
  %argsize = alloca i64, align 8
  %myptr = alloca i8*, align 8
  %argptr = alloca i8*, align 8
  %arg = alloca %struct._object*, align 8
  %varg = alloca %struct.bufferinfo, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1775, metadata !2123), !dbg !8526
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1776, metadata !2123), !dbg !8527
  %0 = bitcast i64* %left to i8*, !dbg !8528
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8528
  call void @llvm.dbg.declare(metadata i64* %left, metadata !1777, metadata !2123), !dbg !8529
  %1 = bitcast i64* %right to i8*, !dbg !8528
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !8528
  call void @llvm.dbg.declare(metadata i64* %right, metadata !1778, metadata !2123), !dbg !8530
  %2 = bitcast i64* %mysize to i8*, !dbg !8528
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !8528
  call void @llvm.dbg.declare(metadata i64* %mysize, metadata !1779, metadata !2123), !dbg !8531
  %3 = bitcast i64* %argsize to i8*, !dbg !8528
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !8528
  call void @llvm.dbg.declare(metadata i64* %argsize, metadata !1780, metadata !2123), !dbg !8532
  %4 = bitcast i8** %myptr to i8*, !dbg !8533
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !8533
  call void @llvm.dbg.declare(metadata i8** %myptr, metadata !1781, metadata !2123), !dbg !8534
  %5 = bitcast i8** %argptr to i8*, !dbg !8533
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !8533
  call void @llvm.dbg.declare(metadata i8** %argptr, metadata !1782, metadata !2123), !dbg !8535
  %6 = bitcast %struct._object** %arg to i8*, !dbg !8536
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !8536
  call void @llvm.dbg.declare(metadata %struct._object** %arg, metadata !1783, metadata !2123), !dbg !8537
  store %struct._object* @_Py_NoneStruct, %struct._object** %arg, align 8, !dbg !8537, !tbaa !2119
  %7 = bitcast %struct.bufferinfo* %varg to i8*, !dbg !8538
  call void @llvm.lifetime.start(i64 80, i8* %7) #3, !dbg !8538
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %varg, metadata !1784, metadata !2123), !dbg !8539
  %8 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8540, !tbaa !2119
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.115, i32 0, i32 0), %struct._object** %arg), !dbg !8542
  %tobool = icmp ne i32 %call, 0, !dbg !8542
  br i1 %tobool, label %if.end, label %if.then, !dbg !8543

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8544
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8544

if.end:                                           ; preds = %entry
  %9 = load %struct._object*, %struct._object** %arg, align 8, !dbg !8545, !tbaa !2119
  %cmp = icmp eq %struct._object* %9, @_Py_NoneStruct, !dbg !8547
  br i1 %cmp, label %if.then.1, label %if.else, !dbg !8548

if.then.1:                                        ; preds = %if.end
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0), i8** %argptr, align 8, !dbg !8549, !tbaa !2119
  store i64 6, i64* %argsize, align 8, !dbg !8551, !tbaa !2129
  br label %if.end.6, !dbg !8552

if.else:                                          ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %arg, align 8, !dbg !8553, !tbaa !2119
  %call2 = call i64 @_getbuffer(%struct._object* %10, %struct.bufferinfo* %varg), !dbg !8556
  %cmp3 = icmp slt i64 %call2, 0, !dbg !8557
  br i1 %cmp3, label %if.then.4, label %if.end.5, !dbg !8558

if.then.4:                                        ; preds = %if.else
  store %struct._object* null, %struct._object** %retval, !dbg !8559
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8559

if.end.5:                                         ; preds = %if.else
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %varg, i32 0, i32 0, !dbg !8560
  %11 = load i8*, i8** %buf, align 8, !dbg !8560, !tbaa !2529
  store i8* %11, i8** %argptr, align 8, !dbg !8561, !tbaa !2119
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %varg, i32 0, i32 2, !dbg !8562
  %12 = load i64, i64* %len, align 8, !dbg !8562, !tbaa !2482
  store i64 %12, i64* %argsize, align 8, !dbg !8563, !tbaa !2129
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.then.1
  %13 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8564, !tbaa !2119
  %14 = bitcast %struct.PyByteArrayObject* %13 to %struct.PyVarObject*, !dbg !8565
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %14, i32 0, i32 1, !dbg !8566
  %15 = load i64, i64* %ob_size, align 8, !dbg !8566, !tbaa !2239
  %tobool7 = icmp ne i64 %15, 0, !dbg !8567
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !8567

cond.true:                                        ; preds = %if.end.6
  %16 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8568, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %16, i32 0, i32 3, !dbg !8570
  %17 = load i8*, i8** %ob_start, align 8, !dbg !8570, !tbaa !2250
  br label %cond.end, !dbg !8567

cond.false:                                       ; preds = %if.end.6
  br label %cond.end, !dbg !8571

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %17, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !8567
  store i8* %cond, i8** %myptr, align 8, !dbg !8573, !tbaa !2119
  %18 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8576, !tbaa !2119
  %19 = bitcast %struct.PyByteArrayObject* %18 to %struct.PyVarObject*, !dbg !8577
  %ob_size8 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %19, i32 0, i32 1, !dbg !8578
  %20 = load i64, i64* %ob_size8, align 8, !dbg !8578, !tbaa !2239
  store i64 %20, i64* %mysize, align 8, !dbg !8579, !tbaa !2129
  %21 = load i8*, i8** %myptr, align 8, !dbg !8580, !tbaa !2119
  %22 = load i64, i64* %mysize, align 8, !dbg !8581, !tbaa !2129
  %23 = load i8*, i8** %argptr, align 8, !dbg !8582, !tbaa !2119
  %24 = load i64, i64* %argsize, align 8, !dbg !8583, !tbaa !2129
  %call9 = call i64 @lstrip_helper(i8* %21, i64 %22, i8* %23, i64 %24), !dbg !8584
  store i64 %call9, i64* %left, align 8, !dbg !8585, !tbaa !2129
  %25 = load i64, i64* %left, align 8, !dbg !8586, !tbaa !2129
  %26 = load i64, i64* %mysize, align 8, !dbg !8588, !tbaa !2129
  %cmp10 = icmp eq i64 %25, %26, !dbg !8589
  br i1 %cmp10, label %if.then.11, label %if.else.12, !dbg !8590

if.then.11:                                       ; preds = %cond.end
  %27 = load i64, i64* %left, align 8, !dbg !8591, !tbaa !2129
  store i64 %27, i64* %right, align 8, !dbg !8592, !tbaa !2129
  br label %if.end.14, !dbg !8593

if.else.12:                                       ; preds = %cond.end
  %28 = load i8*, i8** %myptr, align 8, !dbg !8594, !tbaa !2119
  %29 = load i64, i64* %mysize, align 8, !dbg !8595, !tbaa !2129
  %30 = load i8*, i8** %argptr, align 8, !dbg !8596, !tbaa !2119
  %31 = load i64, i64* %argsize, align 8, !dbg !8597, !tbaa !2129
  %call13 = call i64 @rstrip_helper(i8* %28, i64 %29, i8* %30, i64 %31), !dbg !8598
  store i64 %call13, i64* %right, align 8, !dbg !8599, !tbaa !2129
  br label %if.end.14

if.end.14:                                        ; preds = %if.else.12, %if.then.11
  %32 = load %struct._object*, %struct._object** %arg, align 8, !dbg !8600, !tbaa !2119
  %cmp15 = icmp ne %struct._object* %32, @_Py_NoneStruct, !dbg !8602
  br i1 %cmp15, label %if.then.16, label %if.end.17, !dbg !8603

if.then.16:                                       ; preds = %if.end.14
  call void @PyBuffer_Release(%struct.bufferinfo* %varg), !dbg !8604
  br label %if.end.17, !dbg !8604

if.end.17:                                        ; preds = %if.then.16, %if.end.14
  %33 = load i8*, i8** %myptr, align 8, !dbg !8605, !tbaa !2119
  %34 = load i64, i64* %left, align 8, !dbg !8606, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %33, i64 %34, !dbg !8607
  %35 = load i64, i64* %right, align 8, !dbg !8608, !tbaa !2129
  %36 = load i64, i64* %left, align 8, !dbg !8609, !tbaa !2129
  %sub = sub i64 %35, %36, !dbg !8610
  %call18 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr, i64 %sub), !dbg !8611
  store %struct._object* %call18, %struct._object** %retval, !dbg !8612
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8612

cleanup:                                          ; preds = %if.end.17, %if.then.4, %if.then
  %37 = bitcast %struct.bufferinfo* %varg to i8*, !dbg !8613
  call void @llvm.lifetime.end(i64 80, i8* %37) #3, !dbg !8613
  %38 = bitcast %struct._object** %arg to i8*, !dbg !8613
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !8613
  %39 = bitcast i8** %argptr to i8*, !dbg !8613
  call void @llvm.lifetime.end(i64 8, i8* %39) #3, !dbg !8613
  %40 = bitcast i8** %myptr to i8*, !dbg !8613
  call void @llvm.lifetime.end(i64 8, i8* %40) #3, !dbg !8613
  %41 = bitcast i64* %argsize to i8*, !dbg !8613
  call void @llvm.lifetime.end(i64 8, i8* %41) #3, !dbg !8613
  %42 = bitcast i64* %mysize to i8*, !dbg !8613
  call void @llvm.lifetime.end(i64 8, i8* %42) #3, !dbg !8613
  %43 = bitcast i64* %right to i8*, !dbg !8613
  call void @llvm.lifetime.end(i64 8, i8* %43) #3, !dbg !8613
  %44 = bitcast i64* %left to i8*, !dbg !8613
  call void @llvm.lifetime.end(i64 8, i8* %44) #3, !dbg !8613
  %45 = load %struct._object*, %struct._object** %retval, !dbg !8613
  ret %struct._object* %45, !dbg !8613
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_swapcase(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %newobj = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1787, metadata !2123), !dbg !8614
  %0 = bitcast %struct._object** %newobj to i8*, !dbg !8615
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8615
  call void @llvm.dbg.declare(metadata %struct._object** %newobj, metadata !1788, metadata !2123), !dbg !8616
  %1 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8617, !tbaa !2119
  %2 = bitcast %struct._object* %1 to %struct.PyVarObject*, !dbg !8618
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1, !dbg !8619
  %3 = load i64, i64* %ob_size, align 8, !dbg !8619, !tbaa !2239
  %call = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %3), !dbg !8620
  store %struct._object* %call, %struct._object** %newobj, align 8, !dbg !8621, !tbaa !2119
  %4 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !8622, !tbaa !2119
  %tobool = icmp ne %struct._object* %4, null, !dbg !8622
  br i1 %tobool, label %if.end, label %if.then, !dbg !8624

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8625
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8625

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !8626, !tbaa !2119
  %6 = bitcast %struct._object* %5 to %struct.PyVarObject*, !dbg !8627
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1, !dbg !8628
  %7 = load i64, i64* %ob_size1, align 8, !dbg !8628, !tbaa !2239
  %tobool2 = icmp ne i64 %7, 0, !dbg !8629
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !8629

cond.true:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !8630, !tbaa !2119
  %9 = bitcast %struct._object* %8 to %struct.PyByteArrayObject*, !dbg !8632
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %9, i32 0, i32 3, !dbg !8633
  %10 = load i8*, i8** %ob_start, align 8, !dbg !8633, !tbaa !2250
  br label %cond.end, !dbg !8629

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !8634

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !8629
  %11 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8636, !tbaa !2119
  %12 = bitcast %struct._object* %11 to %struct.PyVarObject*, !dbg !8639
  %ob_size3 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %12, i32 0, i32 1, !dbg !8640
  %13 = load i64, i64* %ob_size3, align 8, !dbg !8640, !tbaa !2239
  %tobool4 = icmp ne i64 %13, 0, !dbg !8641
  br i1 %tobool4, label %cond.true.5, label %cond.false.7, !dbg !8641

cond.true.5:                                      ; preds = %cond.end
  %14 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8642, !tbaa !2119
  %15 = bitcast %struct._object* %14 to %struct.PyByteArrayObject*, !dbg !8644
  %ob_start6 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %15, i32 0, i32 3, !dbg !8645
  %16 = load i8*, i8** %ob_start6, align 8, !dbg !8645, !tbaa !2250
  br label %cond.end.8, !dbg !8641

cond.false.7:                                     ; preds = %cond.end
  br label %cond.end.8, !dbg !8646

cond.end.8:                                       ; preds = %cond.false.7, %cond.true.5
  %cond9 = phi i8* [ %16, %cond.true.5 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.7 ], !dbg !8641
  %17 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8648, !tbaa !2119
  %18 = bitcast %struct._object* %17 to %struct.PyVarObject*, !dbg !8649
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1, !dbg !8650
  %19 = load i64, i64* %ob_size10, align 8, !dbg !8650, !tbaa !2239
  call void @_Py_bytes_swapcase(i8* %cond, i8* %cond9, i64 %19), !dbg !8651
  %20 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !8652, !tbaa !2119
  store %struct._object* %20, %struct._object** %retval, !dbg !8653
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8653

cleanup:                                          ; preds = %cond.end.8, %if.then
  %21 = bitcast %struct._object** %newobj to i8*, !dbg !8654
  call void @llvm.lifetime.end(i64 8, i8* %21) #3, !dbg !8654
  %22 = load %struct._object*, %struct._object** %retval, !dbg !8654
  ret %struct._object* %22, !dbg !8654
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_title(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %newobj = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1791, metadata !2123), !dbg !8655
  %0 = bitcast %struct._object** %newobj to i8*, !dbg !8656
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8656
  call void @llvm.dbg.declare(metadata %struct._object** %newobj, metadata !1792, metadata !2123), !dbg !8657
  %1 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8658, !tbaa !2119
  %2 = bitcast %struct._object* %1 to %struct.PyVarObject*, !dbg !8659
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1, !dbg !8660
  %3 = load i64, i64* %ob_size, align 8, !dbg !8660, !tbaa !2239
  %call = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %3), !dbg !8661
  store %struct._object* %call, %struct._object** %newobj, align 8, !dbg !8662, !tbaa !2119
  %4 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !8663, !tbaa !2119
  %tobool = icmp ne %struct._object* %4, null, !dbg !8663
  br i1 %tobool, label %if.end, label %if.then, !dbg !8665

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8666
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8666

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !8667, !tbaa !2119
  %6 = bitcast %struct._object* %5 to %struct.PyVarObject*, !dbg !8668
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1, !dbg !8669
  %7 = load i64, i64* %ob_size1, align 8, !dbg !8669, !tbaa !2239
  %tobool2 = icmp ne i64 %7, 0, !dbg !8670
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !8670

cond.true:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !8671, !tbaa !2119
  %9 = bitcast %struct._object* %8 to %struct.PyByteArrayObject*, !dbg !8673
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %9, i32 0, i32 3, !dbg !8674
  %10 = load i8*, i8** %ob_start, align 8, !dbg !8674, !tbaa !2250
  br label %cond.end, !dbg !8670

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !8675

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !8670
  %11 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8677, !tbaa !2119
  %12 = bitcast %struct._object* %11 to %struct.PyVarObject*, !dbg !8680
  %ob_size3 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %12, i32 0, i32 1, !dbg !8681
  %13 = load i64, i64* %ob_size3, align 8, !dbg !8681, !tbaa !2239
  %tobool4 = icmp ne i64 %13, 0, !dbg !8682
  br i1 %tobool4, label %cond.true.5, label %cond.false.7, !dbg !8682

cond.true.5:                                      ; preds = %cond.end
  %14 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8683, !tbaa !2119
  %15 = bitcast %struct._object* %14 to %struct.PyByteArrayObject*, !dbg !8685
  %ob_start6 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %15, i32 0, i32 3, !dbg !8686
  %16 = load i8*, i8** %ob_start6, align 8, !dbg !8686, !tbaa !2250
  br label %cond.end.8, !dbg !8682

cond.false.7:                                     ; preds = %cond.end
  br label %cond.end.8, !dbg !8687

cond.end.8:                                       ; preds = %cond.false.7, %cond.true.5
  %cond9 = phi i8* [ %16, %cond.true.5 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.7 ], !dbg !8682
  %17 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !8689, !tbaa !2119
  %18 = bitcast %struct._object* %17 to %struct.PyVarObject*, !dbg !8690
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1, !dbg !8691
  %19 = load i64, i64* %ob_size10, align 8, !dbg !8691, !tbaa !2239
  call void @_Py_bytes_title(i8* %cond, i8* %cond9, i64 %19), !dbg !8692
  %20 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !8693, !tbaa !2119
  store %struct._object* %20, %struct._object** %retval, !dbg !8694
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8694

cleanup:                                          ; preds = %cond.end.8, %if.then
  %21 = bitcast %struct._object** %newobj to i8*, !dbg !8695
  call void @llvm.lifetime.end(i64 8, i8* %21) #3, !dbg !8695
  %22 = load %struct._object*, %struct._object** %retval, !dbg !8695
  ret %struct._object* %22, !dbg !8695
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearray_translate(%struct.PyByteArrayObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %input = alloca i8*, align 8
  %output = alloca i8*, align 8
  %table = alloca i8*, align 8
  %i = alloca i64, align 8
  %c = alloca i64, align 8
  %input_obj = alloca %struct._object*, align 8
  %output_start = alloca i8*, align 8
  %inlen = alloca i64, align 8
  %result = alloca %struct._object*, align 8
  %trans_table = alloca [256 x i32], align 16
  %tableobj = alloca %struct._object*, align 8
  %delobj = alloca %struct._object*, align 8
  %vtable = alloca %struct.bufferinfo, align 8
  %vdel = alloca %struct.bufferinfo, align 8
  %cleanup.dest.slot = alloca i32
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1795, metadata !2123), !dbg !8696
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1796, metadata !2123), !dbg !8697
  %0 = bitcast i8** %input to i8*, !dbg !8698
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !8698
  call void @llvm.dbg.declare(metadata i8** %input, metadata !1797, metadata !2123), !dbg !8699
  %1 = bitcast i8** %output to i8*, !dbg !8698
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !8698
  call void @llvm.dbg.declare(metadata i8** %output, metadata !1798, metadata !2123), !dbg !8700
  %2 = bitcast i8** %table to i8*, !dbg !8701
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !8701
  call void @llvm.dbg.declare(metadata i8** %table, metadata !1799, metadata !2123), !dbg !8702
  %3 = bitcast i64* %i to i8*, !dbg !8703
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !8703
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1800, metadata !2123), !dbg !8704
  %4 = bitcast i64* %c to i8*, !dbg !8703
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !8703
  call void @llvm.dbg.declare(metadata i64* %c, metadata !1801, metadata !2123), !dbg !8705
  %5 = bitcast %struct._object** %input_obj to i8*, !dbg !8706
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !8706
  call void @llvm.dbg.declare(metadata %struct._object** %input_obj, metadata !1802, metadata !2123), !dbg !8707
  %6 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !8708, !tbaa !2119
  %7 = bitcast %struct.PyByteArrayObject* %6 to %struct._object*, !dbg !8709
  store %struct._object* %7, %struct._object** %input_obj, align 8, !dbg !8707, !tbaa !2119
  %8 = bitcast i8** %output_start to i8*, !dbg !8710
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !8710
  call void @llvm.dbg.declare(metadata i8** %output_start, metadata !1803, metadata !2123), !dbg !8711
  %9 = bitcast i64* %inlen to i8*, !dbg !8712
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !8712
  call void @llvm.dbg.declare(metadata i64* %inlen, metadata !1804, metadata !2123), !dbg !8713
  %10 = bitcast %struct._object** %result to i8*, !dbg !8714
  call void @llvm.lifetime.start(i64 8, i8* %10) #3, !dbg !8714
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !1805, metadata !2123), !dbg !8715
  store %struct._object* null, %struct._object** %result, align 8, !dbg !8715, !tbaa !2119
  %11 = bitcast [256 x i32]* %trans_table to i8*, !dbg !8716
  call void @llvm.lifetime.start(i64 1024, i8* %11) #3, !dbg !8716
  call void @llvm.dbg.declare(metadata [256 x i32]* %trans_table, metadata !1806, metadata !2123), !dbg !8717
  %12 = bitcast %struct._object** %tableobj to i8*, !dbg !8718
  call void @llvm.lifetime.start(i64 8, i8* %12) #3, !dbg !8718
  call void @llvm.dbg.declare(metadata %struct._object** %tableobj, metadata !1810, metadata !2123), !dbg !8719
  store %struct._object* null, %struct._object** %tableobj, align 8, !dbg !8719, !tbaa !2119
  %13 = bitcast %struct._object** %delobj to i8*, !dbg !8718
  call void @llvm.lifetime.start(i64 8, i8* %13) #3, !dbg !8718
  call void @llvm.dbg.declare(metadata %struct._object** %delobj, metadata !1811, metadata !2123), !dbg !8720
  store %struct._object* null, %struct._object** %delobj, align 8, !dbg !8720, !tbaa !2119
  %14 = bitcast %struct.bufferinfo* %vtable to i8*, !dbg !8721
  call void @llvm.lifetime.start(i64 80, i8* %14) #3, !dbg !8721
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %vtable, metadata !1812, metadata !2123), !dbg !8722
  %15 = bitcast %struct.bufferinfo* %vdel to i8*, !dbg !8721
  call void @llvm.lifetime.start(i64 80, i8* %15) #3, !dbg !8721
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %vdel, metadata !1813, metadata !2123), !dbg !8723
  %16 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8724, !tbaa !2119
  %call = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %16, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.68, i32 0, i32 0), i64 1, i64 2, %struct._object** %tableobj, %struct._object** %delobj), !dbg !8726
  %tobool = icmp ne i32 %call, 0, !dbg !8726
  br i1 %tobool, label %if.end, label %if.then, !dbg !8727

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8728
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8728

if.end:                                           ; preds = %entry
  %17 = load %struct._object*, %struct._object** %tableobj, align 8, !dbg !8729, !tbaa !2119
  %cmp = icmp eq %struct._object* %17, @_Py_NoneStruct, !dbg !8731
  br i1 %cmp, label %if.then.1, label %if.else, !dbg !8732

if.then.1:                                        ; preds = %if.end
  store i8* null, i8** %table, align 8, !dbg !8733, !tbaa !2119
  store %struct._object* null, %struct._object** %tableobj, align 8, !dbg !8735, !tbaa !2119
  br label %if.end.10, !dbg !8736

if.else:                                          ; preds = %if.end
  %18 = load %struct._object*, %struct._object** %tableobj, align 8, !dbg !8737, !tbaa !2119
  %call2 = call i64 @_getbuffer(%struct._object* %18, %struct.bufferinfo* %vtable), !dbg !8739
  %cmp3 = icmp slt i64 %call2, 0, !dbg !8740
  br i1 %cmp3, label %if.then.4, label %if.else.5, !dbg !8741

if.then.4:                                        ; preds = %if.else
  store %struct._object* null, %struct._object** %retval, !dbg !8742
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8742

if.else.5:                                        ; preds = %if.else
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vtable, i32 0, i32 2, !dbg !8744
  %19 = load i64, i64* %len, align 8, !dbg !8744, !tbaa !2482
  %cmp6 = icmp ne i64 %19, 256, !dbg !8747
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !8748

if.then.7:                                        ; preds = %if.else.5
  %20 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !8749, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %20, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.116, i32 0, i32 0)), !dbg !8751
  call void @PyBuffer_Release(%struct.bufferinfo* %vtable), !dbg !8752
  store %struct._object* null, %struct._object** %retval, !dbg !8753
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8753

if.end.8:                                         ; preds = %if.else.5
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vtable, i32 0, i32 0, !dbg !8754
  %21 = load i8*, i8** %buf, align 8, !dbg !8754, !tbaa !2529
  store i8* %21, i8** %table, align 8, !dbg !8755, !tbaa !2119
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %if.then.1
  %22 = load %struct._object*, %struct._object** %delobj, align 8, !dbg !8756, !tbaa !2119
  %cmp11 = icmp ne %struct._object* %22, null, !dbg !8758
  br i1 %cmp11, label %if.then.12, label %if.else.20, !dbg !8759

if.then.12:                                       ; preds = %if.end.10
  %23 = load %struct._object*, %struct._object** %delobj, align 8, !dbg !8760, !tbaa !2119
  %call13 = call i64 @_getbuffer(%struct._object* %23, %struct.bufferinfo* %vdel), !dbg !8763
  %cmp14 = icmp slt i64 %call13, 0, !dbg !8764
  br i1 %cmp14, label %if.then.15, label %if.end.19, !dbg !8765

if.then.15:                                       ; preds = %if.then.12
  %24 = load %struct._object*, %struct._object** %tableobj, align 8, !dbg !8766, !tbaa !2119
  %cmp16 = icmp ne %struct._object* %24, null, !dbg !8769
  br i1 %cmp16, label %if.then.17, label %if.end.18, !dbg !8770

if.then.17:                                       ; preds = %if.then.15
  call void @PyBuffer_Release(%struct.bufferinfo* %vtable), !dbg !8771
  br label %if.end.18, !dbg !8771

if.end.18:                                        ; preds = %if.then.17, %if.then.15
  store %struct._object* null, %struct._object** %retval, !dbg !8772
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8772

if.end.19:                                        ; preds = %if.then.12
  br label %if.end.23, !dbg !8773

if.else.20:                                       ; preds = %if.end.10
  %buf21 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vdel, i32 0, i32 0, !dbg !8774
  store i8* null, i8** %buf21, align 8, !dbg !8776, !tbaa !2529
  %len22 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vdel, i32 0, i32 2, !dbg !8777
  store i64 0, i64* %len22, align 8, !dbg !8778, !tbaa !2482
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.end.19
  %25 = load %struct._object*, %struct._object** %input_obj, align 8, !dbg !8779, !tbaa !2119
  %26 = bitcast %struct._object* %25 to %struct.PyVarObject*, !dbg !8780
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %26, i32 0, i32 1, !dbg !8781
  %27 = load i64, i64* %ob_size, align 8, !dbg !8781, !tbaa !2239
  store i64 %27, i64* %inlen, align 8, !dbg !8782, !tbaa !2129
  %28 = load i64, i64* %inlen, align 8, !dbg !8783, !tbaa !2129
  %call24 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %28), !dbg !8784
  store %struct._object* %call24, %struct._object** %result, align 8, !dbg !8785, !tbaa !2119
  %29 = load %struct._object*, %struct._object** %result, align 8, !dbg !8786, !tbaa !2119
  %cmp25 = icmp eq %struct._object* %29, null, !dbg !8788
  br i1 %cmp25, label %if.then.26, label %if.end.27, !dbg !8789

if.then.26:                                       ; preds = %if.end.23
  br label %done, !dbg !8790

if.end.27:                                        ; preds = %if.end.23
  %30 = load %struct._object*, %struct._object** %result, align 8, !dbg !8791, !tbaa !2119
  %call28 = call i8* @PyByteArray_AsString(%struct._object* %30), !dbg !8792
  store i8* %call28, i8** %output, align 8, !dbg !8793, !tbaa !2119
  store i8* %call28, i8** %output_start, align 8, !dbg !8794, !tbaa !2119
  %31 = load %struct._object*, %struct._object** %input_obj, align 8, !dbg !8795, !tbaa !2119
  %32 = bitcast %struct._object* %31 to %struct.PyVarObject*, !dbg !8796
  %ob_size29 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %32, i32 0, i32 1, !dbg !8797
  %33 = load i64, i64* %ob_size29, align 8, !dbg !8797, !tbaa !2239
  %tobool30 = icmp ne i64 %33, 0, !dbg !8798
  br i1 %tobool30, label %cond.true, label %cond.false, !dbg !8798

cond.true:                                        ; preds = %if.end.27
  %34 = load %struct._object*, %struct._object** %input_obj, align 8, !dbg !8799, !tbaa !2119
  %35 = bitcast %struct._object* %34 to %struct.PyByteArrayObject*, !dbg !8801
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %35, i32 0, i32 3, !dbg !8802
  %36 = load i8*, i8** %ob_start, align 8, !dbg !8802, !tbaa !2250
  br label %cond.end, !dbg !8798

cond.false:                                       ; preds = %if.end.27
  br label %cond.end, !dbg !8803

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %36, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !8798
  store i8* %cond, i8** %input, align 8, !dbg !8805, !tbaa !2119
  %len31 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vdel, i32 0, i32 2, !dbg !8808
  %37 = load i64, i64* %len31, align 8, !dbg !8808, !tbaa !2482
  %cmp32 = icmp eq i64 %37, 0, !dbg !8810
  br i1 %cmp32, label %land.lhs.true, label %if.end.39, !dbg !8811

land.lhs.true:                                    ; preds = %cond.end
  %38 = load i8*, i8** %table, align 8, !dbg !8812, !tbaa !2119
  %cmp33 = icmp ne i8* %38, null, !dbg !8814
  br i1 %cmp33, label %if.then.34, label %if.end.39, !dbg !8815

if.then.34:                                       ; preds = %land.lhs.true
  %39 = load i64, i64* %inlen, align 8, !dbg !8816, !tbaa !2129
  store i64 %39, i64* %i, align 8, !dbg !8819, !tbaa !2129
  br label %for.cond, !dbg !8820

for.cond:                                         ; preds = %for.body, %if.then.34
  %40 = load i64, i64* %i, align 8, !dbg !8821, !tbaa !2129
  %dec = add i64 %40, -1, !dbg !8821
  store i64 %dec, i64* %i, align 8, !dbg !8821, !tbaa !2129
  %cmp35 = icmp sge i64 %dec, 0, !dbg !8825
  br i1 %cmp35, label %for.body, label %for.end, !dbg !8826

for.body:                                         ; preds = %for.cond
  %41 = load i8*, i8** %input, align 8, !dbg !8827, !tbaa !2119
  %incdec.ptr = getelementptr i8, i8* %41, i32 1, !dbg !8827
  store i8* %incdec.ptr, i8** %input, align 8, !dbg !8827, !tbaa !2119
  %42 = load i8, i8* %41, align 1, !dbg !8829, !tbaa !2233
  %conv = sext i8 %42 to i32, !dbg !8830
  %and = and i32 %conv, 255, !dbg !8831
  %conv36 = trunc i32 %and to i8, !dbg !8832
  %conv37 = zext i8 %conv36 to i64, !dbg !8833
  store i64 %conv37, i64* %c, align 8, !dbg !8834, !tbaa !2129
  %43 = load i64, i64* %c, align 8, !dbg !8835, !tbaa !2129
  %44 = load i8*, i8** %table, align 8, !dbg !8836, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %44, i64 %43, !dbg !8836
  %45 = load i8, i8* %arrayidx, align 1, !dbg !8836, !tbaa !2233
  %46 = load i8*, i8** %output, align 8, !dbg !8837, !tbaa !2119
  %incdec.ptr38 = getelementptr i8, i8* %46, i32 1, !dbg !8837
  store i8* %incdec.ptr38, i8** %output, align 8, !dbg !8837, !tbaa !2119
  store i8 %45, i8* %46, align 1, !dbg !8838, !tbaa !2233
  br label %for.cond, !dbg !8839

for.end:                                          ; preds = %for.cond
  br label %done, !dbg !8840

if.end.39:                                        ; preds = %land.lhs.true, %cond.end
  %47 = load i8*, i8** %table, align 8, !dbg !8841, !tbaa !2119
  %cmp40 = icmp eq i8* %47, null, !dbg !8843
  br i1 %cmp40, label %if.then.42, label %if.else.52, !dbg !8844

if.then.42:                                       ; preds = %if.end.39
  store i64 0, i64* %i, align 8, !dbg !8845, !tbaa !2129
  br label %for.cond.43, !dbg !8848

for.cond.43:                                      ; preds = %for.inc, %if.then.42
  %48 = load i64, i64* %i, align 8, !dbg !8849, !tbaa !2129
  %cmp44 = icmp slt i64 %48, 256, !dbg !8853
  br i1 %cmp44, label %for.body.46, label %for.end.51, !dbg !8854

for.body.46:                                      ; preds = %for.cond.43
  %49 = load i64, i64* %i, align 8, !dbg !8855, !tbaa !2129
  %and47 = and i64 %49, 255, !dbg !8856
  %conv48 = trunc i64 %and47 to i8, !dbg !8857
  %conv49 = zext i8 %conv48 to i32, !dbg !8858
  %50 = load i64, i64* %i, align 8, !dbg !8859, !tbaa !2129
  %arrayidx50 = getelementptr [256 x i32], [256 x i32]* %trans_table, i32 0, i64 %50, !dbg !8860
  store i32 %conv49, i32* %arrayidx50, align 4, !dbg !8861, !tbaa !2676
  br label %for.inc, !dbg !8860

for.inc:                                          ; preds = %for.body.46
  %51 = load i64, i64* %i, align 8, !dbg !8862, !tbaa !2129
  %inc = add i64 %51, 1, !dbg !8862
  store i64 %inc, i64* %i, align 8, !dbg !8862, !tbaa !2129
  br label %for.cond.43, !dbg !8863

for.end.51:                                       ; preds = %for.cond.43
  br label %if.end.66, !dbg !8864

if.else.52:                                       ; preds = %if.end.39
  store i64 0, i64* %i, align 8, !dbg !8865, !tbaa !2129
  br label %for.cond.53, !dbg !8868

for.cond.53:                                      ; preds = %for.inc.63, %if.else.52
  %52 = load i64, i64* %i, align 8, !dbg !8869, !tbaa !2129
  %cmp54 = icmp slt i64 %52, 256, !dbg !8873
  br i1 %cmp54, label %for.body.56, label %for.end.65, !dbg !8874

for.body.56:                                      ; preds = %for.cond.53
  %53 = load i64, i64* %i, align 8, !dbg !8875, !tbaa !2129
  %54 = load i8*, i8** %table, align 8, !dbg !8876, !tbaa !2119
  %arrayidx57 = getelementptr i8, i8* %54, i64 %53, !dbg !8876
  %55 = load i8, i8* %arrayidx57, align 1, !dbg !8876, !tbaa !2233
  %conv58 = sext i8 %55 to i32, !dbg !8877
  %and59 = and i32 %conv58, 255, !dbg !8878
  %conv60 = trunc i32 %and59 to i8, !dbg !8879
  %conv61 = zext i8 %conv60 to i32, !dbg !8880
  %56 = load i64, i64* %i, align 8, !dbg !8881, !tbaa !2129
  %arrayidx62 = getelementptr [256 x i32], [256 x i32]* %trans_table, i32 0, i64 %56, !dbg !8882
  store i32 %conv61, i32* %arrayidx62, align 4, !dbg !8883, !tbaa !2676
  br label %for.inc.63, !dbg !8882

for.inc.63:                                       ; preds = %for.body.56
  %57 = load i64, i64* %i, align 8, !dbg !8884, !tbaa !2129
  %inc64 = add i64 %57, 1, !dbg !8884
  store i64 %inc64, i64* %i, align 8, !dbg !8884, !tbaa !2129
  br label %for.cond.53, !dbg !8885

for.end.65:                                       ; preds = %for.cond.53
  br label %if.end.66

if.end.66:                                        ; preds = %for.end.65, %for.end.51
  store i64 0, i64* %i, align 8, !dbg !8886, !tbaa !2129
  br label %for.cond.67, !dbg !8888

for.cond.67:                                      ; preds = %for.inc.79, %if.end.66
  %58 = load i64, i64* %i, align 8, !dbg !8889, !tbaa !2129
  %len68 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vdel, i32 0, i32 2, !dbg !8893
  %59 = load i64, i64* %len68, align 8, !dbg !8893, !tbaa !2482
  %cmp69 = icmp slt i64 %58, %59, !dbg !8894
  br i1 %cmp69, label %for.body.71, label %for.end.81, !dbg !8895

for.body.71:                                      ; preds = %for.cond.67
  %60 = load i64, i64* %i, align 8, !dbg !8896, !tbaa !2129
  %buf72 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vdel, i32 0, i32 0, !dbg !8897
  %61 = load i8*, i8** %buf72, align 8, !dbg !8897, !tbaa !2529
  %arrayidx73 = getelementptr i8, i8* %61, i64 %60, !dbg !8898
  %62 = load i8, i8* %arrayidx73, align 1, !dbg !8898, !tbaa !2233
  %conv74 = zext i8 %62 to i32, !dbg !8899
  %and75 = and i32 %conv74, 255, !dbg !8900
  %conv76 = trunc i32 %and75 to i8, !dbg !8901
  %conv77 = zext i8 %conv76 to i32, !dbg !8902
  %idxprom = sext i32 %conv77 to i64, !dbg !8903
  %arrayidx78 = getelementptr [256 x i32], [256 x i32]* %trans_table, i32 0, i64 %idxprom, !dbg !8903
  store i32 -1, i32* %arrayidx78, align 4, !dbg !8904, !tbaa !2676
  br label %for.inc.79, !dbg !8903

for.inc.79:                                       ; preds = %for.body.71
  %63 = load i64, i64* %i, align 8, !dbg !8905, !tbaa !2129
  %inc80 = add i64 %63, 1, !dbg !8905
  store i64 %inc80, i64* %i, align 8, !dbg !8905, !tbaa !2129
  br label %for.cond.67, !dbg !8906

for.end.81:                                       ; preds = %for.cond.67
  %64 = load i64, i64* %inlen, align 8, !dbg !8907, !tbaa !2129
  store i64 %64, i64* %i, align 8, !dbg !8909, !tbaa !2129
  br label %for.cond.82, !dbg !8910

for.cond.82:                                      ; preds = %if.end.107, %if.then.105, %for.end.81
  %65 = load i64, i64* %i, align 8, !dbg !8911, !tbaa !2129
  %dec83 = add i64 %65, -1, !dbg !8911
  store i64 %dec83, i64* %i, align 8, !dbg !8911, !tbaa !2129
  %cmp84 = icmp sge i64 %dec83, 0, !dbg !8915
  br i1 %cmp84, label %for.body.86, label %for.end.108, !dbg !8916

for.body.86:                                      ; preds = %for.cond.82
  %66 = load i8*, i8** %input, align 8, !dbg !8917, !tbaa !2119
  %incdec.ptr87 = getelementptr i8, i8* %66, i32 1, !dbg !8917
  store i8* %incdec.ptr87, i8** %input, align 8, !dbg !8917, !tbaa !2119
  %67 = load i8, i8* %66, align 1, !dbg !8919, !tbaa !2233
  %conv88 = sext i8 %67 to i32, !dbg !8920
  %and89 = and i32 %conv88, 255, !dbg !8921
  %conv90 = trunc i32 %and89 to i8, !dbg !8922
  %conv91 = zext i8 %conv90 to i64, !dbg !8923
  store i64 %conv91, i64* %c, align 8, !dbg !8924, !tbaa !2129
  %68 = load i64, i64* %c, align 8, !dbg !8925, !tbaa !2129
  %arrayidx92 = getelementptr [256 x i32], [256 x i32]* %trans_table, i32 0, i64 %68, !dbg !8927
  %69 = load i32, i32* %arrayidx92, align 4, !dbg !8927, !tbaa !2676
  %cmp93 = icmp ne i32 %69, -1, !dbg !8928
  br i1 %cmp93, label %if.then.95, label %if.end.107, !dbg !8929

if.then.95:                                       ; preds = %for.body.86
  %70 = load i64, i64* %c, align 8, !dbg !8930, !tbaa !2129
  %arrayidx96 = getelementptr [256 x i32], [256 x i32]* %trans_table, i32 0, i64 %70, !dbg !8932
  %71 = load i32, i32* %arrayidx96, align 4, !dbg !8932, !tbaa !2676
  %conv97 = trunc i32 %71 to i8, !dbg !8933
  %72 = load i8*, i8** %output, align 8, !dbg !8934, !tbaa !2119
  %incdec.ptr98 = getelementptr i8, i8* %72, i32 1, !dbg !8934
  store i8* %incdec.ptr98, i8** %output, align 8, !dbg !8934, !tbaa !2119
  store i8 %conv97, i8* %72, align 1, !dbg !8935, !tbaa !2233
  %conv99 = sext i8 %conv97 to i32, !dbg !8936
  %and100 = and i32 %conv99, 255, !dbg !8937
  %conv101 = trunc i32 %and100 to i8, !dbg !8938
  %conv102 = zext i8 %conv101 to i64, !dbg !8939
  %73 = load i64, i64* %c, align 8, !dbg !8940, !tbaa !2129
  %cmp103 = icmp eq i64 %conv102, %73, !dbg !8941
  br i1 %cmp103, label %if.then.105, label %if.end.106, !dbg !8942

if.then.105:                                      ; preds = %if.then.95
  br label %for.cond.82, !dbg !8943

if.end.106:                                       ; preds = %if.then.95
  br label %if.end.107, !dbg !8944

if.end.107:                                       ; preds = %if.end.106, %for.body.86
  br label %for.cond.82, !dbg !8946

for.end.108:                                      ; preds = %for.cond.82
  %74 = load i64, i64* %inlen, align 8, !dbg !8947, !tbaa !2129
  %cmp109 = icmp sgt i64 %74, 0, !dbg !8948
  br i1 %cmp109, label %if.then.111, label %if.end.130, !dbg !8949

if.then.111:                                      ; preds = %for.end.108
  %75 = load %struct._object*, %struct._object** %result, align 8, !dbg !8950, !tbaa !2119
  %76 = load i8*, i8** %output, align 8, !dbg !8951, !tbaa !2119
  %77 = load i8*, i8** %output_start, align 8, !dbg !8952, !tbaa !2119
  %sub.ptr.lhs.cast = ptrtoint i8* %76 to i64, !dbg !8953
  %sub.ptr.rhs.cast = ptrtoint i8* %77 to i64, !dbg !8953
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !8953
  %call112 = call i32 @PyByteArray_Resize(%struct._object* %75, i64 %sub.ptr.sub), !dbg !8954
  %cmp113 = icmp slt i32 %call112, 0, !dbg !8955
  br i1 %cmp113, label %if.then.115, label %if.end.129, !dbg !8956

if.then.115:                                      ; preds = %if.then.111
  br label %do.body, !dbg !8957

do.body:                                          ; preds = %if.then.115
  %78 = bitcast %struct._object** %_py_tmp to i8*, !dbg !8958
  call void @llvm.lifetime.start(i64 8, i8* %78) #3, !dbg !8958
  call void @llvm.dbg.declare(metadata %struct._object** %_py_tmp, metadata !1814, metadata !2123), !dbg !8960
  %79 = load %struct._object*, %struct._object** %result, align 8, !dbg !8961, !tbaa !2119
  store %struct._object* %79, %struct._object** %_py_tmp, align 8, !dbg !8960, !tbaa !2119
  %80 = load %struct._object*, %struct._object** %_py_tmp, align 8, !dbg !8962, !tbaa !2119
  %cmp116 = icmp ne %struct._object* %80, null, !dbg !8963
  br i1 %cmp116, label %if.then.118, label %if.end.126, !dbg !8964

if.then.118:                                      ; preds = %do.body
  store %struct._object* null, %struct._object** %result, align 8, !dbg !8965, !tbaa !2119
  br label %do.body.119, !dbg !8967

do.body.119:                                      ; preds = %if.then.118
  %81 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8968
  call void @llvm.lifetime.start(i64 8, i8* %81) #3, !dbg !8968
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1819, metadata !2123), !dbg !8970
  %82 = load %struct._object*, %struct._object** %_py_tmp, align 8, !dbg !8971, !tbaa !2119
  store %struct._object* %82, %struct._object** %_py_decref_tmp, align 8, !dbg !8970, !tbaa !2119
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8972, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 0, !dbg !8974
  %84 = load i64, i64* %ob_refcnt, align 8, !dbg !8975, !tbaa !2195
  %dec120 = add i64 %84, -1, !dbg !8975
  store i64 %dec120, i64* %ob_refcnt, align 8, !dbg !8975, !tbaa !2195
  %cmp121 = icmp ne i64 %dec120, 0, !dbg !8976
  br i1 %cmp121, label %if.then.123, label %if.else.124, !dbg !8977

if.then.123:                                      ; preds = %do.body.119
  br label %if.end.125, !dbg !8978

if.else.124:                                      ; preds = %do.body.119
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8980, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 1, !dbg !8982
  %86 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8982, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %86, i32 0, i32 4, !dbg !8983
  %87 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !8983, !tbaa !2205
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8984, !tbaa !2119
  call void %87(%struct._object* %88), !dbg !8985
  br label %if.end.125

if.end.125:                                       ; preds = %if.else.124, %if.then.123
  %89 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8986
  call void @llvm.lifetime.end(i64 8, i8* %89) #3, !dbg !8986
  br label %do.cond, !dbg !8988

do.cond:                                          ; preds = %if.end.125
  br label %do.end, !dbg !8989

do.end:                                           ; preds = %do.cond
  br label %if.end.126, !dbg !8991

if.end.126:                                       ; preds = %do.end, %do.body
  %90 = bitcast %struct._object** %_py_tmp to i8*, !dbg !8993
  call void @llvm.lifetime.end(i64 8, i8* %90) #3, !dbg !8993
  br label %do.cond.127, !dbg !8996

do.cond.127:                                      ; preds = %if.end.126
  br label %do.end.128, !dbg !8997

do.end.128:                                       ; preds = %do.cond.127
  br label %done, !dbg !8999

if.end.129:                                       ; preds = %if.then.111
  br label %if.end.130, !dbg !9000

if.end.130:                                       ; preds = %if.end.129, %for.end.108
  br label %done, !dbg !9002

done:                                             ; preds = %if.end.130, %do.end.128, %for.end, %if.then.26
  %91 = load %struct._object*, %struct._object** %tableobj, align 8, !dbg !9004, !tbaa !2119
  %cmp131 = icmp ne %struct._object* %91, null, !dbg !9006
  br i1 %cmp131, label %if.then.133, label %if.end.134, !dbg !9007

if.then.133:                                      ; preds = %done
  call void @PyBuffer_Release(%struct.bufferinfo* %vtable), !dbg !9008
  br label %if.end.134, !dbg !9008

if.end.134:                                       ; preds = %if.then.133, %done
  %92 = load %struct._object*, %struct._object** %delobj, align 8, !dbg !9009, !tbaa !2119
  %cmp135 = icmp ne %struct._object* %92, null, !dbg !9011
  br i1 %cmp135, label %if.then.137, label %if.end.138, !dbg !9012

if.then.137:                                      ; preds = %if.end.134
  call void @PyBuffer_Release(%struct.bufferinfo* %vdel), !dbg !9013
  br label %if.end.138, !dbg !9013

if.end.138:                                       ; preds = %if.then.137, %if.end.134
  %93 = load %struct._object*, %struct._object** %result, align 8, !dbg !9014, !tbaa !2119
  store %struct._object* %93, %struct._object** %retval, !dbg !9015
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9015

cleanup:                                          ; preds = %if.end.138, %if.end.18, %if.then.7, %if.then.4, %if.then
  %94 = bitcast %struct.bufferinfo* %vdel to i8*, !dbg !9016
  call void @llvm.lifetime.end(i64 80, i8* %94) #3, !dbg !9016
  %95 = bitcast %struct.bufferinfo* %vtable to i8*, !dbg !9016
  call void @llvm.lifetime.end(i64 80, i8* %95) #3, !dbg !9016
  %96 = bitcast %struct._object** %delobj to i8*, !dbg !9016
  call void @llvm.lifetime.end(i64 8, i8* %96) #3, !dbg !9016
  %97 = bitcast %struct._object** %tableobj to i8*, !dbg !9016
  call void @llvm.lifetime.end(i64 8, i8* %97) #3, !dbg !9016
  %98 = bitcast [256 x i32]* %trans_table to i8*, !dbg !9016
  call void @llvm.lifetime.end(i64 1024, i8* %98) #3, !dbg !9016
  %99 = bitcast %struct._object** %result to i8*, !dbg !9016
  call void @llvm.lifetime.end(i64 8, i8* %99) #3, !dbg !9016
  %100 = bitcast i64* %inlen to i8*, !dbg !9016
  call void @llvm.lifetime.end(i64 8, i8* %100) #3, !dbg !9016
  %101 = bitcast i8** %output_start to i8*, !dbg !9016
  call void @llvm.lifetime.end(i64 8, i8* %101) #3, !dbg !9016
  %102 = bitcast %struct._object** %input_obj to i8*, !dbg !9016
  call void @llvm.lifetime.end(i64 8, i8* %102) #3, !dbg !9016
  %103 = bitcast i64* %c to i8*, !dbg !9016
  call void @llvm.lifetime.end(i64 8, i8* %103) #3, !dbg !9016
  %104 = bitcast i64* %i to i8*, !dbg !9016
  call void @llvm.lifetime.end(i64 8, i8* %104) #3, !dbg !9016
  %105 = bitcast i8** %table to i8*, !dbg !9016
  call void @llvm.lifetime.end(i64 8, i8* %105) #3, !dbg !9016
  %106 = bitcast i8** %output to i8*, !dbg !9016
  call void @llvm.lifetime.end(i64 8, i8* %106) #3, !dbg !9016
  %107 = bitcast i8** %input to i8*, !dbg !9016
  call void @llvm.lifetime.end(i64 8, i8* %107) #3, !dbg !9016
  %108 = load %struct._object*, %struct._object** %retval, !dbg !9016
  ret %struct._object* %108, !dbg !9016
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_upper(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %newobj = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1825, metadata !2123), !dbg !9017
  %0 = bitcast %struct._object** %newobj to i8*, !dbg !9018
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !9018
  call void @llvm.dbg.declare(metadata %struct._object** %newobj, metadata !1826, metadata !2123), !dbg !9019
  %1 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9020, !tbaa !2119
  %2 = bitcast %struct._object* %1 to %struct.PyVarObject*, !dbg !9021
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1, !dbg !9022
  %3 = load i64, i64* %ob_size, align 8, !dbg !9022, !tbaa !2239
  %call = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %3), !dbg !9023
  store %struct._object* %call, %struct._object** %newobj, align 8, !dbg !9024, !tbaa !2119
  %4 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !9025, !tbaa !2119
  %tobool = icmp ne %struct._object* %4, null, !dbg !9025
  br i1 %tobool, label %if.end, label %if.then, !dbg !9027

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9028
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9028

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !9029, !tbaa !2119
  %6 = bitcast %struct._object* %5 to %struct.PyVarObject*, !dbg !9030
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1, !dbg !9031
  %7 = load i64, i64* %ob_size1, align 8, !dbg !9031, !tbaa !2239
  %tobool2 = icmp ne i64 %7, 0, !dbg !9032
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !9032

cond.true:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !9033, !tbaa !2119
  %9 = bitcast %struct._object* %8 to %struct.PyByteArrayObject*, !dbg !9035
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %9, i32 0, i32 3, !dbg !9036
  %10 = load i8*, i8** %ob_start, align 8, !dbg !9036, !tbaa !2250
  br label %cond.end, !dbg !9032

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !9037

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !9032
  %11 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9039, !tbaa !2119
  %12 = bitcast %struct._object* %11 to %struct.PyVarObject*, !dbg !9042
  %ob_size3 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %12, i32 0, i32 1, !dbg !9043
  %13 = load i64, i64* %ob_size3, align 8, !dbg !9043, !tbaa !2239
  %tobool4 = icmp ne i64 %13, 0, !dbg !9044
  br i1 %tobool4, label %cond.true.5, label %cond.false.7, !dbg !9044

cond.true.5:                                      ; preds = %cond.end
  %14 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9045, !tbaa !2119
  %15 = bitcast %struct._object* %14 to %struct.PyByteArrayObject*, !dbg !9047
  %ob_start6 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %15, i32 0, i32 3, !dbg !9048
  %16 = load i8*, i8** %ob_start6, align 8, !dbg !9048, !tbaa !2250
  br label %cond.end.8, !dbg !9044

cond.false.7:                                     ; preds = %cond.end
  br label %cond.end.8, !dbg !9049

cond.end.8:                                       ; preds = %cond.false.7, %cond.true.5
  %cond9 = phi i8* [ %16, %cond.true.5 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.7 ], !dbg !9044
  %17 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9051, !tbaa !2119
  %18 = bitcast %struct._object* %17 to %struct.PyVarObject*, !dbg !9052
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1, !dbg !9053
  %19 = load i64, i64* %ob_size10, align 8, !dbg !9053, !tbaa !2239
  call void @_Py_bytes_upper(i8* %cond, i8* %cond9, i64 %19), !dbg !9054
  %20 = load %struct._object*, %struct._object** %newobj, align 8, !dbg !9055, !tbaa !2119
  store %struct._object* %20, %struct._object** %retval, !dbg !9056
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9056

cleanup:                                          ; preds = %cond.end.8, %if.then
  %21 = bitcast %struct._object** %newobj to i8*, !dbg !9057
  call void @llvm.lifetime.end(i64 8, i8* %21) #3, !dbg !9057
  %22 = load %struct._object*, %struct._object** %retval, !dbg !9057
  ret %struct._object* %22, !dbg !9057
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @stringlib_zfill(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %fill = alloca i64, align 8
  %s = alloca %struct._object*, align 8
  %p = alloca i8*, align 8
  %width = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1829, metadata !2123), !dbg !9058
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1830, metadata !2123), !dbg !9059
  %0 = bitcast i64* %fill to i8*, !dbg !9060
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !9060
  call void @llvm.dbg.declare(metadata i64* %fill, metadata !1831, metadata !2123), !dbg !9061
  %1 = bitcast %struct._object** %s to i8*, !dbg !9062
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !9062
  call void @llvm.dbg.declare(metadata %struct._object** %s, metadata !1832, metadata !2123), !dbg !9063
  %2 = bitcast i8** %p to i8*, !dbg !9064
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !9064
  call void @llvm.dbg.declare(metadata i8** %p, metadata !1833, metadata !2123), !dbg !9065
  %3 = bitcast i64* %width to i8*, !dbg !9066
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !9066
  call void @llvm.dbg.declare(metadata i64* %width, metadata !1834, metadata !2123), !dbg !9067
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9068, !tbaa !2119
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.117, i32 0, i32 0), i64* %width), !dbg !9070
  %tobool = icmp ne i32 %call, 0, !dbg !9070
  br i1 %tobool, label %if.end, label %if.then, !dbg !9071

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9072
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9072

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9073, !tbaa !2119
  %6 = bitcast %struct._object* %5 to %struct.PyVarObject*, !dbg !9075
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1, !dbg !9076
  %7 = load i64, i64* %ob_size, align 8, !dbg !9076, !tbaa !2239
  %8 = load i64, i64* %width, align 8, !dbg !9077, !tbaa !2129
  %cmp = icmp sge i64 %7, %8, !dbg !9078
  br i1 %cmp, label %if.then.1, label %if.end.17, !dbg !9079

if.then.1:                                        ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9080, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1, !dbg !9083
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9083, !tbaa !2203
  %cmp2 = icmp eq %struct._typeobject* %10, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyByteArray_Type to %struct._typeobject*), !dbg !9084
  br i1 %cmp2, label %if.then.3, label %if.else, !dbg !9085

if.then.3:                                        ; preds = %if.then.1
  %11 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9086, !tbaa !2119
  %12 = bitcast %struct._object* %11 to %struct.PyVarObject*, !dbg !9088
  %ob_size4 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %12, i32 0, i32 1, !dbg !9089
  %13 = load i64, i64* %ob_size4, align 8, !dbg !9089, !tbaa !2239
  %tobool5 = icmp ne i64 %13, 0, !dbg !9090
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !9090

cond.true:                                        ; preds = %if.then.3
  %14 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9091, !tbaa !2119
  %15 = bitcast %struct._object* %14 to %struct.PyByteArrayObject*, !dbg !9093
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %15, i32 0, i32 3, !dbg !9094
  %16 = load i8*, i8** %ob_start, align 8, !dbg !9094, !tbaa !2250
  br label %cond.end, !dbg !9090

cond.false:                                       ; preds = %if.then.3
  br label %cond.end, !dbg !9095

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %16, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !9090
  %17 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9097, !tbaa !2119
  %18 = bitcast %struct._object* %17 to %struct.PyVarObject*, !dbg !9100
  %ob_size6 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1, !dbg !9101
  %19 = load i64, i64* %ob_size6, align 8, !dbg !9101, !tbaa !2239
  %call7 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %cond, i64 %19), !dbg !9102
  store %struct._object* %call7, %struct._object** %retval, !dbg !9103
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9103

if.else:                                          ; preds = %if.then.1
  %20 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9104, !tbaa !2119
  %21 = bitcast %struct._object* %20 to %struct.PyVarObject*, !dbg !9105
  %ob_size8 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %21, i32 0, i32 1, !dbg !9106
  %22 = load i64, i64* %ob_size8, align 8, !dbg !9106, !tbaa !2239
  %tobool9 = icmp ne i64 %22, 0, !dbg !9107
  br i1 %tobool9, label %cond.true.10, label %cond.false.12, !dbg !9107

cond.true.10:                                     ; preds = %if.else
  %23 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9108, !tbaa !2119
  %24 = bitcast %struct._object* %23 to %struct.PyByteArrayObject*, !dbg !9110
  %ob_start11 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %24, i32 0, i32 3, !dbg !9111
  %25 = load i8*, i8** %ob_start11, align 8, !dbg !9111, !tbaa !2250
  br label %cond.end.13, !dbg !9107

cond.false.12:                                    ; preds = %if.else
  br label %cond.end.13, !dbg !9112

cond.end.13:                                      ; preds = %cond.false.12, %cond.true.10
  %cond14 = phi i8* [ %25, %cond.true.10 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.12 ], !dbg !9107
  %26 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9114, !tbaa !2119
  %27 = bitcast %struct._object* %26 to %struct.PyVarObject*, !dbg !9115
  %ob_size15 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %27, i32 0, i32 1, !dbg !9116
  %28 = load i64, i64* %ob_size15, align 8, !dbg !9116, !tbaa !2239
  %call16 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %cond14, i64 %28), !dbg !9117
  store %struct._object* %call16, %struct._object** %retval, !dbg !9118
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9118

if.end.17:                                        ; preds = %if.end
  %29 = load i64, i64* %width, align 8, !dbg !9119, !tbaa !2129
  %30 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9120, !tbaa !2119
  %31 = bitcast %struct._object* %30 to %struct.PyVarObject*, !dbg !9121
  %ob_size18 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %31, i32 0, i32 1, !dbg !9122
  %32 = load i64, i64* %ob_size18, align 8, !dbg !9122, !tbaa !2239
  %sub = sub i64 %29, %32, !dbg !9123
  store i64 %sub, i64* %fill, align 8, !dbg !9124, !tbaa !2129
  %33 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9125, !tbaa !2119
  %34 = load i64, i64* %fill, align 8, !dbg !9126, !tbaa !2129
  %call19 = call %struct._object* @pad(%struct._object* %33, i64 %34, i64 0, i8 signext 48), !dbg !9127
  store %struct._object* %call19, %struct._object** %s, align 8, !dbg !9128, !tbaa !2119
  %35 = load %struct._object*, %struct._object** %s, align 8, !dbg !9129, !tbaa !2119
  %cmp20 = icmp eq %struct._object* %35, null, !dbg !9131
  br i1 %cmp20, label %if.then.21, label %if.end.22, !dbg !9132

if.then.21:                                       ; preds = %if.end.17
  store %struct._object* null, %struct._object** %retval, !dbg !9133
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9133

if.end.22:                                        ; preds = %if.end.17
  %36 = load %struct._object*, %struct._object** %s, align 8, !dbg !9134, !tbaa !2119
  %37 = bitcast %struct._object* %36 to %struct.PyVarObject*, !dbg !9135
  %ob_size23 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %37, i32 0, i32 1, !dbg !9136
  %38 = load i64, i64* %ob_size23, align 8, !dbg !9136, !tbaa !2239
  %tobool24 = icmp ne i64 %38, 0, !dbg !9137
  br i1 %tobool24, label %cond.true.25, label %cond.false.27, !dbg !9137

cond.true.25:                                     ; preds = %if.end.22
  %39 = load %struct._object*, %struct._object** %s, align 8, !dbg !9138, !tbaa !2119
  %40 = bitcast %struct._object* %39 to %struct.PyByteArrayObject*, !dbg !9140
  %ob_start26 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %40, i32 0, i32 3, !dbg !9141
  %41 = load i8*, i8** %ob_start26, align 8, !dbg !9141, !tbaa !2250
  br label %cond.end.28, !dbg !9137

cond.false.27:                                    ; preds = %if.end.22
  br label %cond.end.28, !dbg !9142

cond.end.28:                                      ; preds = %cond.false.27, %cond.true.25
  %cond29 = phi i8* [ %41, %cond.true.25 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.27 ], !dbg !9137
  store i8* %cond29, i8** %p, align 8, !dbg !9144, !tbaa !2119
  %42 = load i64, i64* %fill, align 8, !dbg !9147, !tbaa !2129
  %43 = load i8*, i8** %p, align 8, !dbg !9149, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %43, i64 %42, !dbg !9149
  %44 = load i8, i8* %arrayidx, align 1, !dbg !9149, !tbaa !2233
  %conv = sext i8 %44 to i32, !dbg !9149
  %cmp30 = icmp eq i32 %conv, 43, !dbg !9150
  br i1 %cmp30, label %if.then.36, label %lor.lhs.false, !dbg !9151

lor.lhs.false:                                    ; preds = %cond.end.28
  %45 = load i64, i64* %fill, align 8, !dbg !9152, !tbaa !2129
  %46 = load i8*, i8** %p, align 8, !dbg !9154, !tbaa !2119
  %arrayidx32 = getelementptr i8, i8* %46, i64 %45, !dbg !9154
  %47 = load i8, i8* %arrayidx32, align 1, !dbg !9154, !tbaa !2233
  %conv33 = sext i8 %47 to i32, !dbg !9154
  %cmp34 = icmp eq i32 %conv33, 45, !dbg !9155
  br i1 %cmp34, label %if.then.36, label %if.end.40, !dbg !9156

if.then.36:                                       ; preds = %lor.lhs.false, %cond.end.28
  %48 = load i64, i64* %fill, align 8, !dbg !9157, !tbaa !2129
  %49 = load i8*, i8** %p, align 8, !dbg !9159, !tbaa !2119
  %arrayidx37 = getelementptr i8, i8* %49, i64 %48, !dbg !9159
  %50 = load i8, i8* %arrayidx37, align 1, !dbg !9159, !tbaa !2233
  %51 = load i8*, i8** %p, align 8, !dbg !9160, !tbaa !2119
  %arrayidx38 = getelementptr i8, i8* %51, i64 0, !dbg !9160
  store i8 %50, i8* %arrayidx38, align 1, !dbg !9161, !tbaa !2233
  %52 = load i64, i64* %fill, align 8, !dbg !9162, !tbaa !2129
  %53 = load i8*, i8** %p, align 8, !dbg !9163, !tbaa !2119
  %arrayidx39 = getelementptr i8, i8* %53, i64 %52, !dbg !9163
  store i8 48, i8* %arrayidx39, align 1, !dbg !9164, !tbaa !2233
  br label %if.end.40, !dbg !9165

if.end.40:                                        ; preds = %if.then.36, %lor.lhs.false
  %54 = load %struct._object*, %struct._object** %s, align 8, !dbg !9166, !tbaa !2119
  store %struct._object* %54, %struct._object** %retval, !dbg !9167
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9167

cleanup:                                          ; preds = %if.end.40, %if.then.21, %cond.end.13, %cond.end, %if.then
  %55 = bitcast i64* %width to i8*, !dbg !9168
  call void @llvm.lifetime.end(i64 8, i8* %55) #3, !dbg !9168
  %56 = bitcast i8** %p to i8*, !dbg !9168
  call void @llvm.lifetime.end(i64 8, i8* %56) #3, !dbg !9168
  %57 = bitcast %struct._object** %s to i8*, !dbg !9168
  call void @llvm.lifetime.end(i64 8, i8* %57) #3, !dbg !9168
  %58 = bitcast i64* %fill to i8*, !dbg !9168
  call void @llvm.lifetime.end(i64 8, i8* %58) #3, !dbg !9168
  %59 = load %struct._object*, %struct._object** %retval, !dbg !9168
  ret %struct._object* %59, !dbg !9168
}

declare %struct._object* @PyLong_FromSsize_t(i64) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @_common_reduce(%struct.PyByteArrayObject* %self, i32 %proto) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %proto.addr = alloca i32, align 4
  %dict = alloca %struct._object*, align 8
  %buf = alloca i8*, align 8
  %latin1 = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !811, metadata !2123), !dbg !9169
  store i32 %proto, i32* %proto.addr, align 4, !tbaa !2676
  call void @llvm.dbg.declare(metadata i32* %proto.addr, metadata !812, metadata !2123), !dbg !9170
  %0 = bitcast %struct._object** %dict to i8*, !dbg !9171
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !9171
  call void @llvm.dbg.declare(metadata %struct._object** %dict, metadata !813, metadata !2123), !dbg !9172
  %1 = bitcast i8** %buf to i8*, !dbg !9173
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !9173
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !814, metadata !2123), !dbg !9174
  %2 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9175, !tbaa !2119
  %3 = bitcast %struct.PyByteArrayObject* %2 to %struct._object*, !dbg !9176
  %call = call %struct._object* @_PyObject_GetAttrId(%struct._object* %3, %struct._Py_Identifier* @_common_reduce.PyId___dict__), !dbg !9177
  store %struct._object* %call, %struct._object** %dict, align 8, !dbg !9178, !tbaa !2119
  %4 = load %struct._object*, %struct._object** %dict, align 8, !dbg !9179, !tbaa !2119
  %cmp = icmp eq %struct._object* %4, null, !dbg !9181
  br i1 %cmp, label %if.then, label %if.end, !dbg !9182

if.then:                                          ; preds = %entry
  call void @PyErr_Clear(), !dbg !9183
  store %struct._object* @_Py_NoneStruct, %struct._object** %dict, align 8, !dbg !9185, !tbaa !2119
  %5 = load %struct._object*, %struct._object** %dict, align 8, !dbg !9186, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0, !dbg !9187
  %6 = load i64, i64* %ob_refcnt, align 8, !dbg !9188, !tbaa !2195
  %inc = add i64 %6, 1, !dbg !9188
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !9188, !tbaa !2195
  br label %if.end, !dbg !9189

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9190, !tbaa !2119
  %8 = bitcast %struct.PyByteArrayObject* %7 to %struct.PyVarObject*, !dbg !9191
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !9192
  %9 = load i64, i64* %ob_size, align 8, !dbg !9192, !tbaa !2239
  %tobool = icmp ne i64 %9, 0, !dbg !9193
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9193

cond.true:                                        ; preds = %if.end
  %10 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9194, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %10, i32 0, i32 3, !dbg !9196
  %11 = load i8*, i8** %ob_start, align 8, !dbg !9196, !tbaa !2250
  br label %cond.end, !dbg !9193

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !9197

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %11, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !9193
  store i8* %cond, i8** %buf, align 8, !dbg !9199, !tbaa !2119
  %12 = load i32, i32* %proto.addr, align 4, !dbg !9202, !tbaa !2676
  %cmp1 = icmp slt i32 %12, 3, !dbg !9203
  br i1 %cmp1, label %if.then.2, label %if.else.11, !dbg !9204

if.then.2:                                        ; preds = %cond.end
  %13 = bitcast %struct._object** %latin1 to i8*, !dbg !9205
  call void @llvm.lifetime.start(i64 8, i8* %13) #3, !dbg !9205
  call void @llvm.dbg.declare(metadata %struct._object** %latin1, metadata !815, metadata !2123), !dbg !9206
  %14 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9207, !tbaa !2119
  %15 = bitcast %struct.PyByteArrayObject* %14 to %struct.PyVarObject*, !dbg !9209
  %ob_size3 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %15, i32 0, i32 1, !dbg !9210
  %16 = load i64, i64* %ob_size3, align 8, !dbg !9210, !tbaa !2239
  %tobool4 = icmp ne i64 %16, 0, !dbg !9211
  br i1 %tobool4, label %if.then.5, label %if.else, !dbg !9212

if.then.5:                                        ; preds = %if.then.2
  %17 = load i8*, i8** %buf, align 8, !dbg !9213, !tbaa !2119
  %18 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9214, !tbaa !2119
  %19 = bitcast %struct.PyByteArrayObject* %18 to %struct.PyVarObject*, !dbg !9215
  %ob_size6 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %19, i32 0, i32 1, !dbg !9216
  %20 = load i64, i64* %ob_size6, align 8, !dbg !9216, !tbaa !2239
  %call7 = call %struct._object* @PyUnicode_DecodeLatin1(i8* %17, i64 %20, i8* null), !dbg !9217
  store %struct._object* %call7, %struct._object** %latin1, align 8, !dbg !9218, !tbaa !2119
  br label %if.end.9, !dbg !9219

if.else:                                          ; preds = %if.then.2
  %call8 = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i32 0, i32 0)), !dbg !9220
  store %struct._object* %call8, %struct._object** %latin1, align 8, !dbg !9221, !tbaa !2119
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.5
  %21 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9222, !tbaa !2119
  %22 = bitcast %struct.PyByteArrayObject* %21 to %struct._object*, !dbg !9223
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1, !dbg !9224
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9224, !tbaa !2203
  %24 = load %struct._object*, %struct._object** %latin1, align 8, !dbg !9225, !tbaa !2119
  %25 = load %struct._object*, %struct._object** %dict, align 8, !dbg !9226, !tbaa !2119
  %call10 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.72, i32 0, i32 0), %struct._typeobject* %23, %struct._object* %24, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.73, i32 0, i32 0), %struct._object* %25), !dbg !9227
  store %struct._object* %call10, %struct._object** %retval, !dbg !9228
  store i32 1, i32* %cleanup.dest.slot
  %26 = bitcast %struct._object** %latin1 to i8*, !dbg !9229
  call void @llvm.lifetime.end(i64 8, i8* %26) #3, !dbg !9229
  br label %cleanup

if.else.11:                                       ; preds = %cond.end
  %27 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9230, !tbaa !2119
  %28 = bitcast %struct.PyByteArrayObject* %27 to %struct.PyVarObject*, !dbg !9233
  %ob_size12 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %28, i32 0, i32 1, !dbg !9234
  %29 = load i64, i64* %ob_size12, align 8, !dbg !9234, !tbaa !2239
  %tobool13 = icmp ne i64 %29, 0, !dbg !9235
  br i1 %tobool13, label %if.then.14, label %if.else.18, !dbg !9236

if.then.14:                                       ; preds = %if.else.11
  %30 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9237, !tbaa !2119
  %31 = bitcast %struct.PyByteArrayObject* %30 to %struct._object*, !dbg !9239
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1, !dbg !9240
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8, !dbg !9240, !tbaa !2203
  %33 = load i8*, i8** %buf, align 8, !dbg !9241, !tbaa !2119
  %34 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9242, !tbaa !2119
  %35 = bitcast %struct.PyByteArrayObject* %34 to %struct.PyVarObject*, !dbg !9243
  %ob_size16 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %35, i32 0, i32 1, !dbg !9244
  %36 = load i64, i64* %ob_size16, align 8, !dbg !9244, !tbaa !2239
  %37 = load %struct._object*, %struct._object** %dict, align 8, !dbg !9245, !tbaa !2119
  %call17 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.74, i32 0, i32 0), %struct._typeobject* %32, i8* %33, i64 %36, %struct._object* %37), !dbg !9246
  store %struct._object* %call17, %struct._object** %retval, !dbg !9247
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9247

if.else.18:                                       ; preds = %if.else.11
  %38 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9248, !tbaa !2119
  %39 = bitcast %struct.PyByteArrayObject* %38 to %struct._object*, !dbg !9250
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1, !dbg !9251
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8, !dbg !9251, !tbaa !2203
  %41 = load %struct._object*, %struct._object** %dict, align 8, !dbg !9252, !tbaa !2119
  %call20 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.75, i32 0, i32 0), %struct._typeobject* %40, %struct._object* %41), !dbg !9253
  store %struct._object* %call20, %struct._object** %retval, !dbg !9254
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9254

cleanup:                                          ; preds = %if.else.18, %if.then.14, %if.end.9
  %42 = bitcast i8** %buf to i8*, !dbg !9255
  call void @llvm.lifetime.end(i64 8, i8* %42) #3, !dbg !9255
  %43 = bitcast %struct._object** %dict to i8*, !dbg !9255
  call void @llvm.lifetime.end(i64 8, i8* %43) #3, !dbg !9255
  %44 = load %struct._object*, %struct._object** %retval, !dbg !9255
  ret %struct._object* %44, !dbg !9255
}

declare %struct._object* @_PyObject_GetAttrId(%struct._object*, %struct._Py_Identifier*) #2

declare %struct._object* @PyUnicode_DecodeLatin1(i8*, i64, i8*) #2

declare %struct._object* @PyUnicode_FromString(i8*) #2

declare %struct._object* @_Py_BuildValue_SizeT(i8*, ...) #2

declare i32 @_PyArg_ParseTuple_SizeT(%struct._object*, i8*, ...) #2

declare void @_Py_bytes_capitalize(i8*, i8*, i64) #2

; Function Attrs: inlinehint nounwind uwtable
define internal %struct._object* @pad(%struct._object* %self, i64 %left, i64 %right, i8 signext %fill) #4 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %left.addr = alloca i64, align 8
  %right.addr = alloca i64, align 8
  %fill.addr = alloca i8, align 1
  %u = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !851, metadata !2123), !dbg !9256
  store i64 %left, i64* %left.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %left.addr, metadata !852, metadata !2123), !dbg !9257
  store i64 %right, i64* %right.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %right.addr, metadata !853, metadata !2123), !dbg !9258
  store i8 %fill, i8* %fill.addr, align 1, !tbaa !2233
  call void @llvm.dbg.declare(metadata i8* %fill.addr, metadata !854, metadata !2123), !dbg !9259
  %0 = bitcast %struct._object** %u to i8*, !dbg !9260
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !9260
  call void @llvm.dbg.declare(metadata %struct._object** %u, metadata !855, metadata !2123), !dbg !9261
  %1 = load i64, i64* %left.addr, align 8, !dbg !9262, !tbaa !2129
  %cmp = icmp slt i64 %1, 0, !dbg !9264
  br i1 %cmp, label %if.then, label %if.end, !dbg !9265

if.then:                                          ; preds = %entry
  store i64 0, i64* %left.addr, align 8, !dbg !9266, !tbaa !2129
  br label %if.end, !dbg !9267

if.end:                                           ; preds = %if.then, %entry
  %2 = load i64, i64* %right.addr, align 8, !dbg !9268, !tbaa !2129
  %cmp1 = icmp slt i64 %2, 0, !dbg !9270
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !9271

if.then.2:                                        ; preds = %if.end
  store i64 0, i64* %right.addr, align 8, !dbg !9272, !tbaa !2129
  br label %if.end.3, !dbg !9273

if.end.3:                                         ; preds = %if.then.2, %if.end
  %3 = load i64, i64* %left.addr, align 8, !dbg !9274, !tbaa !2129
  %cmp4 = icmp eq i64 %3, 0, !dbg !9276
  br i1 %cmp4, label %land.lhs.true, label %if.end.10, !dbg !9277

land.lhs.true:                                    ; preds = %if.end.3
  %4 = load i64, i64* %right.addr, align 8, !dbg !9278, !tbaa !2129
  %cmp5 = icmp eq i64 %4, 0, !dbg !9280
  br i1 %cmp5, label %land.lhs.true.6, label %if.end.10, !dbg !9281

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %5 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9282, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !9284
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9284, !tbaa !2203
  %cmp7 = icmp eq %struct._typeobject* %6, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyByteArray_Type to %struct._typeobject*), !dbg !9285
  br i1 %cmp7, label %if.then.8, label %if.end.10, !dbg !9286

if.then.8:                                        ; preds = %land.lhs.true.6
  %7 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9287, !tbaa !2119
  %8 = bitcast %struct._object* %7 to %struct.PyVarObject*, !dbg !9289
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !9290
  %9 = load i64, i64* %ob_size, align 8, !dbg !9290, !tbaa !2239
  %tobool = icmp ne i64 %9, 0, !dbg !9291
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9291

cond.true:                                        ; preds = %if.then.8
  %10 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9292, !tbaa !2119
  %11 = bitcast %struct._object* %10 to %struct.PyByteArrayObject*, !dbg !9294
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %11, i32 0, i32 3, !dbg !9295
  %12 = load i8*, i8** %ob_start, align 8, !dbg !9295, !tbaa !2250
  br label %cond.end, !dbg !9291

cond.false:                                       ; preds = %if.then.8
  br label %cond.end, !dbg !9296

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %12, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !9291
  %13 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9298, !tbaa !2119
  %14 = bitcast %struct._object* %13 to %struct.PyVarObject*, !dbg !9301
  %ob_size9 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %14, i32 0, i32 1, !dbg !9302
  %15 = load i64, i64* %ob_size9, align 8, !dbg !9302, !tbaa !2239
  %call = call %struct._object* @PyByteArray_FromStringAndSize(i8* %cond, i64 %15), !dbg !9303
  store %struct._object* %call, %struct._object** %retval, !dbg !9304
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9304

if.end.10:                                        ; preds = %land.lhs.true.6, %land.lhs.true, %if.end.3
  %16 = load i64, i64* %left.addr, align 8, !dbg !9305, !tbaa !2129
  %17 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9306, !tbaa !2119
  %18 = bitcast %struct._object* %17 to %struct.PyVarObject*, !dbg !9307
  %ob_size11 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1, !dbg !9308
  %19 = load i64, i64* %ob_size11, align 8, !dbg !9308, !tbaa !2239
  %add = add i64 %16, %19, !dbg !9309
  %20 = load i64, i64* %right.addr, align 8, !dbg !9310, !tbaa !2129
  %add12 = add i64 %add, %20, !dbg !9311
  %call13 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %add12), !dbg !9312
  store %struct._object* %call13, %struct._object** %u, align 8, !dbg !9313, !tbaa !2119
  %21 = load %struct._object*, %struct._object** %u, align 8, !dbg !9314, !tbaa !2119
  %tobool14 = icmp ne %struct._object* %21, null, !dbg !9314
  br i1 %tobool14, label %if.then.15, label %if.end.55, !dbg !9316

if.then.15:                                       ; preds = %if.end.10
  %22 = load i64, i64* %left.addr, align 8, !dbg !9317, !tbaa !2129
  %tobool16 = icmp ne i64 %22, 0, !dbg !9317
  br i1 %tobool16, label %if.then.17, label %if.end.25, !dbg !9320

if.then.17:                                       ; preds = %if.then.15
  %23 = load %struct._object*, %struct._object** %u, align 8, !dbg !9321, !tbaa !2119
  %24 = bitcast %struct._object* %23 to %struct.PyVarObject*, !dbg !9322
  %ob_size18 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %24, i32 0, i32 1, !dbg !9323
  %25 = load i64, i64* %ob_size18, align 8, !dbg !9323, !tbaa !2239
  %tobool19 = icmp ne i64 %25, 0, !dbg !9324
  br i1 %tobool19, label %cond.true.20, label %cond.false.22, !dbg !9324

cond.true.20:                                     ; preds = %if.then.17
  %26 = load %struct._object*, %struct._object** %u, align 8, !dbg !9325, !tbaa !2119
  %27 = bitcast %struct._object* %26 to %struct.PyByteArrayObject*, !dbg !9327
  %ob_start21 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %27, i32 0, i32 3, !dbg !9328
  %28 = load i8*, i8** %ob_start21, align 8, !dbg !9328, !tbaa !2250
  br label %cond.end.23, !dbg !9324

cond.false.22:                                    ; preds = %if.then.17
  br label %cond.end.23, !dbg !9329

cond.end.23:                                      ; preds = %cond.false.22, %cond.true.20
  %cond24 = phi i8* [ %28, %cond.true.20 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.22 ], !dbg !9324
  %29 = load i8, i8* %fill.addr, align 1, !dbg !9331, !tbaa !2233
  %conv = sext i8 %29 to i32, !dbg !9331
  %30 = trunc i32 %conv to i8, !dbg !9334
  %31 = load i64, i64* %left.addr, align 8, !dbg !9335, !tbaa !2129
  call void @llvm.memset.p0i8.i64(i8* %cond24, i8 %30, i64 %31, i32 1, i1 false), !dbg !9334
  br label %if.end.25, !dbg !9334

if.end.25:                                        ; preds = %cond.end.23, %if.then.15
  %32 = load %struct._object*, %struct._object** %u, align 8, !dbg !9336, !tbaa !2119
  %33 = bitcast %struct._object* %32 to %struct.PyVarObject*, !dbg !9337
  %ob_size26 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %33, i32 0, i32 1, !dbg !9338
  %34 = load i64, i64* %ob_size26, align 8, !dbg !9338, !tbaa !2239
  %tobool27 = icmp ne i64 %34, 0, !dbg !9339
  br i1 %tobool27, label %cond.true.28, label %cond.false.30, !dbg !9339

cond.true.28:                                     ; preds = %if.end.25
  %35 = load %struct._object*, %struct._object** %u, align 8, !dbg !9340, !tbaa !2119
  %36 = bitcast %struct._object* %35 to %struct.PyByteArrayObject*, !dbg !9342
  %ob_start29 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %36, i32 0, i32 3, !dbg !9343
  %37 = load i8*, i8** %ob_start29, align 8, !dbg !9343, !tbaa !2250
  br label %cond.end.31, !dbg !9339

cond.false.30:                                    ; preds = %if.end.25
  br label %cond.end.31, !dbg !9344

cond.end.31:                                      ; preds = %cond.false.30, %cond.true.28
  %cond32 = phi i8* [ %37, %cond.true.28 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.30 ], !dbg !9339
  %38 = load i64, i64* %left.addr, align 8, !dbg !9346, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %cond32, i64 %38, !dbg !9349
  %39 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9350, !tbaa !2119
  %40 = bitcast %struct._object* %39 to %struct.PyVarObject*, !dbg !9351
  %ob_size33 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %40, i32 0, i32 1, !dbg !9352
  %41 = load i64, i64* %ob_size33, align 8, !dbg !9352, !tbaa !2239
  %tobool34 = icmp ne i64 %41, 0, !dbg !9353
  br i1 %tobool34, label %cond.true.35, label %cond.false.37, !dbg !9353

cond.true.35:                                     ; preds = %cond.end.31
  %42 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9354, !tbaa !2119
  %43 = bitcast %struct._object* %42 to %struct.PyByteArrayObject*, !dbg !9355
  %ob_start36 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %43, i32 0, i32 3, !dbg !9356
  %44 = load i8*, i8** %ob_start36, align 8, !dbg !9356, !tbaa !2250
  br label %cond.end.38, !dbg !9353

cond.false.37:                                    ; preds = %cond.end.31
  br label %cond.end.38, !dbg !9357

cond.end.38:                                      ; preds = %cond.false.37, %cond.true.35
  %cond39 = phi i8* [ %44, %cond.true.35 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.37 ], !dbg !9353
  %45 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9358, !tbaa !2119
  %46 = bitcast %struct._object* %45 to %struct.PyVarObject*, !dbg !9359
  %ob_size40 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %46, i32 0, i32 1, !dbg !9360
  %47 = load i64, i64* %ob_size40, align 8, !dbg !9360, !tbaa !2239
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %cond39, i64 %47, i32 1, i1 false), !dbg !9361
  %48 = load i64, i64* %right.addr, align 8, !dbg !9362, !tbaa !2129
  %tobool41 = icmp ne i64 %48, 0, !dbg !9362
  br i1 %tobool41, label %if.then.42, label %if.end.54, !dbg !9364

if.then.42:                                       ; preds = %cond.end.38
  %49 = load %struct._object*, %struct._object** %u, align 8, !dbg !9365, !tbaa !2119
  %50 = bitcast %struct._object* %49 to %struct.PyVarObject*, !dbg !9366
  %ob_size43 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %50, i32 0, i32 1, !dbg !9367
  %51 = load i64, i64* %ob_size43, align 8, !dbg !9367, !tbaa !2239
  %tobool44 = icmp ne i64 %51, 0, !dbg !9368
  br i1 %tobool44, label %cond.true.45, label %cond.false.47, !dbg !9368

cond.true.45:                                     ; preds = %if.then.42
  %52 = load %struct._object*, %struct._object** %u, align 8, !dbg !9369, !tbaa !2119
  %53 = bitcast %struct._object* %52 to %struct.PyByteArrayObject*, !dbg !9371
  %ob_start46 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %53, i32 0, i32 3, !dbg !9372
  %54 = load i8*, i8** %ob_start46, align 8, !dbg !9372, !tbaa !2250
  br label %cond.end.48, !dbg !9368

cond.false.47:                                    ; preds = %if.then.42
  br label %cond.end.48, !dbg !9373

cond.end.48:                                      ; preds = %cond.false.47, %cond.true.45
  %cond49 = phi i8* [ %54, %cond.true.45 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.47 ], !dbg !9368
  %55 = load i64, i64* %left.addr, align 8, !dbg !9375, !tbaa !2129
  %add.ptr50 = getelementptr i8, i8* %cond49, i64 %55, !dbg !9378
  %56 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9379, !tbaa !2119
  %57 = bitcast %struct._object* %56 to %struct.PyVarObject*, !dbg !9380
  %ob_size51 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %57, i32 0, i32 1, !dbg !9381
  %58 = load i64, i64* %ob_size51, align 8, !dbg !9381, !tbaa !2239
  %add.ptr52 = getelementptr i8, i8* %add.ptr50, i64 %58, !dbg !9382
  %59 = load i8, i8* %fill.addr, align 1, !dbg !9383, !tbaa !2233
  %conv53 = sext i8 %59 to i32, !dbg !9383
  %60 = trunc i32 %conv53 to i8, !dbg !9384
  %61 = load i64, i64* %right.addr, align 8, !dbg !9385, !tbaa !2129
  call void @llvm.memset.p0i8.i64(i8* %add.ptr52, i8 %60, i64 %61, i32 1, i1 false), !dbg !9384
  br label %if.end.54, !dbg !9384

if.end.54:                                        ; preds = %cond.end.48, %cond.end.38
  br label %if.end.55, !dbg !9386

if.end.55:                                        ; preds = %if.end.54, %if.end.10
  %62 = load %struct._object*, %struct._object** %u, align 8, !dbg !9387, !tbaa !2119
  store %struct._object* %62, %struct._object** %retval, !dbg !9388
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9388

cleanup:                                          ; preds = %if.end.55, %cond.end
  %63 = bitcast %struct._object** %u to i8*, !dbg !9389
  call void @llvm.lifetime.end(i64 8, i8* %63) #3, !dbg !9389
  %64 = load %struct._object*, %struct._object** %retval, !dbg !9389
  ret %struct._object* %64, !dbg !9389
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @stringlib_parse_args_finds_byte(i8* %function_name, %struct._object* %args, %struct._object** %subobj, i8* %byte, i64* %start, i64* %end) #4 {
entry:
  %retval = alloca i32, align 4
  %function_name.addr = alloca i8*, align 8
  %args.addr = alloca %struct._object*, align 8
  %subobj.addr = alloca %struct._object**, align 8
  %byte.addr = alloca i8*, align 8
  %start.addr = alloca i64*, align 8
  %end.addr = alloca i64*, align 8
  %tmp_subobj = alloca %struct._object*, align 8
  %ival = alloca i64, align 8
  %err = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store i8* %function_name, i8** %function_name.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %function_name.addr, metadata !879, metadata !2123), !dbg !9390
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !880, metadata !2123), !dbg !9391
  store %struct._object** %subobj, %struct._object*** %subobj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object*** %subobj.addr, metadata !881, metadata !2123), !dbg !9392
  store i8* %byte, i8** %byte.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %byte.addr, metadata !882, metadata !2123), !dbg !9393
  store i64* %start, i64** %start.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i64** %start.addr, metadata !883, metadata !2123), !dbg !9394
  store i64* %end, i64** %end.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i64** %end.addr, metadata !884, metadata !2123), !dbg !9395
  %0 = bitcast %struct._object** %tmp_subobj to i8*, !dbg !9396
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !9396
  call void @llvm.dbg.declare(metadata %struct._object** %tmp_subobj, metadata !885, metadata !2123), !dbg !9397
  %1 = bitcast i64* %ival to i8*, !dbg !9398
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !9398
  call void @llvm.dbg.declare(metadata i64* %ival, metadata !886, metadata !2123), !dbg !9399
  %2 = bitcast %struct._object** %err to i8*, !dbg !9400
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !9400
  call void @llvm.dbg.declare(metadata %struct._object** %err, metadata !887, metadata !2123), !dbg !9401
  %3 = load i8*, i8** %function_name.addr, align 8, !dbg !9402, !tbaa !2119
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9404, !tbaa !2119
  %5 = load i64*, i64** %start.addr, align 8, !dbg !9405, !tbaa !2119
  %6 = load i64*, i64** %end.addr, align 8, !dbg !9406, !tbaa !2119
  %call = call i32 @stringlib_parse_args_finds(i8* %3, %struct._object* %4, %struct._object** %tmp_subobj, i64* %5, i64* %6), !dbg !9407
  %tobool = icmp ne i32 %call, 0, !dbg !9407
  br i1 %tobool, label %if.end, label %if.then, !dbg !9408

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !9409
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9409

if.end:                                           ; preds = %entry
  %7 = load %struct._object*, %struct._object** %tmp_subobj, align 8, !dbg !9410, !tbaa !2119
  %call1 = call i32 @PyNumber_Check(%struct._object* %7), !dbg !9412
  %tobool2 = icmp ne i32 %call1, 0, !dbg !9412
  br i1 %tobool2, label %if.end.4, label %if.then.3, !dbg !9413

if.then.3:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %tmp_subobj, align 8, !dbg !9414, !tbaa !2119
  %9 = load %struct._object**, %struct._object*** %subobj.addr, align 8, !dbg !9416, !tbaa !2119
  store %struct._object* %8, %struct._object** %9, align 8, !dbg !9417, !tbaa !2119
  store i32 1, i32* %retval, !dbg !9418
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9418

if.end.4:                                         ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %tmp_subobj, align 8, !dbg !9419, !tbaa !2119
  %11 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !9420, !tbaa !2119
  %call5 = call i64 @PyNumber_AsSsize_t(%struct._object* %10, %struct._object* %11), !dbg !9421
  store i64 %call5, i64* %ival, align 8, !dbg !9422, !tbaa !2129
  %12 = load i64, i64* %ival, align 8, !dbg !9423, !tbaa !2129
  %cmp = icmp eq i64 %12, -1, !dbg !9425
  br i1 %cmp, label %if.then.6, label %if.end.13, !dbg !9426

if.then.6:                                        ; preds = %if.end.4
  %call7 = call %struct._object* @PyErr_Occurred(), !dbg !9427
  store %struct._object* %call7, %struct._object** %err, align 8, !dbg !9429, !tbaa !2119
  %13 = load %struct._object*, %struct._object** %err, align 8, !dbg !9430, !tbaa !2119
  %tobool8 = icmp ne %struct._object* %13, null, !dbg !9430
  br i1 %tobool8, label %land.lhs.true, label %if.end.12, !dbg !9432

land.lhs.true:                                    ; preds = %if.then.6
  %14 = load %struct._object*, %struct._object** %err, align 8, !dbg !9433, !tbaa !2119
  %15 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !9435, !tbaa !2119
  %call9 = call i32 @PyErr_GivenExceptionMatches(%struct._object* %14, %struct._object* %15), !dbg !9436
  %tobool10 = icmp ne i32 %call9, 0, !dbg !9436
  br i1 %tobool10, label %if.end.12, label %if.then.11, !dbg !9437

if.then.11:                                       ; preds = %land.lhs.true
  call void @PyErr_Clear(), !dbg !9438
  %16 = load %struct._object*, %struct._object** %tmp_subobj, align 8, !dbg !9440, !tbaa !2119
  %17 = load %struct._object**, %struct._object*** %subobj.addr, align 8, !dbg !9441, !tbaa !2119
  store %struct._object* %16, %struct._object** %17, align 8, !dbg !9442, !tbaa !2119
  store i32 1, i32* %retval, !dbg !9443
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9443

if.end.12:                                        ; preds = %land.lhs.true, %if.then.6
  br label %if.end.13, !dbg !9444

if.end.13:                                        ; preds = %if.end.12, %if.end.4
  %18 = load i64, i64* %ival, align 8, !dbg !9445, !tbaa !2129
  %cmp14 = icmp slt i64 %18, 0, !dbg !9447
  br i1 %cmp14, label %if.then.16, label %lor.lhs.false, !dbg !9448

lor.lhs.false:                                    ; preds = %if.end.13
  %19 = load i64, i64* %ival, align 8, !dbg !9449, !tbaa !2129
  %cmp15 = icmp sgt i64 %19, 255, !dbg !9451
  br i1 %cmp15, label %if.then.16, label %if.end.17, !dbg !9452

if.then.16:                                       ; preds = %lor.lhs.false, %if.end.13
  %20 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !9453, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %20, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i32 0, i32 0)), !dbg !9455
  store i32 0, i32* %retval, !dbg !9456
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9456

if.end.17:                                        ; preds = %lor.lhs.false
  %21 = load %struct._object**, %struct._object*** %subobj.addr, align 8, !dbg !9457, !tbaa !2119
  store %struct._object* null, %struct._object** %21, align 8, !dbg !9458, !tbaa !2119
  %22 = load i64, i64* %ival, align 8, !dbg !9459, !tbaa !2129
  %conv = trunc i64 %22 to i8, !dbg !9460
  %23 = load i8*, i8** %byte.addr, align 8, !dbg !9461, !tbaa !2119
  store i8 %conv, i8* %23, align 1, !dbg !9462, !tbaa !2233
  store i32 1, i32* %retval, !dbg !9463
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9463

cleanup:                                          ; preds = %if.end.17, %if.then.16, %if.then.11, %if.then.3, %if.then
  %24 = bitcast %struct._object** %err to i8*, !dbg !9464
  call void @llvm.lifetime.end(i64 8, i8* %24) #3, !dbg !9464
  %25 = bitcast i64* %ival to i8*, !dbg !9464
  call void @llvm.lifetime.end(i64 8, i8* %25) #3, !dbg !9464
  %26 = bitcast %struct._object** %tmp_subobj to i8*, !dbg !9464
  call void @llvm.lifetime.end(i64 8, i8* %26) #3, !dbg !9464
  %27 = load i32, i32* %retval, !dbg !9464
  ret i32 %27, !dbg !9464
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @stringlib_count(i8* %str, i64 %str_len, i8* %sub, i64 %sub_len, i64 %maxcount) #4 {
entry:
  %retval = alloca i64, align 8
  %str.addr = alloca i8*, align 8
  %str_len.addr = alloca i64, align 8
  %sub.addr = alloca i8*, align 8
  %sub_len.addr = alloca i64, align 8
  %maxcount.addr = alloca i64, align 8
  %count = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i8* %str, i8** %str.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !910, metadata !2123), !dbg !9465
  store i64 %str_len, i64* %str_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %str_len.addr, metadata !911, metadata !2123), !dbg !9466
  store i8* %sub, i8** %sub.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %sub.addr, metadata !912, metadata !2123), !dbg !9467
  store i64 %sub_len, i64* %sub_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %sub_len.addr, metadata !913, metadata !2123), !dbg !9468
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !914, metadata !2123), !dbg !9469
  %0 = bitcast i64* %count to i8*, !dbg !9470
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !9470
  call void @llvm.dbg.declare(metadata i64* %count, metadata !915, metadata !2123), !dbg !9471
  %1 = load i64, i64* %str_len.addr, align 8, !dbg !9472, !tbaa !2129
  %cmp = icmp slt i64 %1, 0, !dbg !9474
  br i1 %cmp, label %if.then, label %if.end, !dbg !9475

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, !dbg !9476
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9476

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %sub_len.addr, align 8, !dbg !9477, !tbaa !2129
  %cmp1 = icmp eq i64 %2, 0, !dbg !9479
  br i1 %cmp1, label %if.then.2, label %if.end.4, !dbg !9480

if.then.2:                                        ; preds = %if.end
  %3 = load i64, i64* %str_len.addr, align 8, !dbg !9481, !tbaa !2129
  %4 = load i64, i64* %maxcount.addr, align 8, !dbg !9482, !tbaa !2129
  %cmp3 = icmp slt i64 %3, %4, !dbg !9483
  br i1 %cmp3, label %cond.true, label %cond.false, !dbg !9484

cond.true:                                        ; preds = %if.then.2
  %5 = load i64, i64* %str_len.addr, align 8, !dbg !9485, !tbaa !2129
  %add = add i64 %5, 1, !dbg !9487
  br label %cond.end, !dbg !9484

cond.false:                                       ; preds = %if.then.2
  %6 = load i64, i64* %maxcount.addr, align 8, !dbg !9488, !tbaa !2129
  br label %cond.end, !dbg !9484

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add, %cond.true ], [ %6, %cond.false ], !dbg !9484
  store i64 %cond, i64* %retval, !dbg !9490
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9493

if.end.4:                                         ; preds = %if.end
  %7 = load i8*, i8** %str.addr, align 8, !dbg !9494, !tbaa !2119
  %8 = load i64, i64* %str_len.addr, align 8, !dbg !9495, !tbaa !2129
  %9 = load i8*, i8** %sub.addr, align 8, !dbg !9496, !tbaa !2119
  %10 = load i64, i64* %sub_len.addr, align 8, !dbg !9497, !tbaa !2129
  %11 = load i64, i64* %maxcount.addr, align 8, !dbg !9498, !tbaa !2129
  %call = call i64 @fastsearch(i8* %7, i64 %8, i8* %9, i64 %10, i64 %11, i32 0), !dbg !9499
  store i64 %call, i64* %count, align 8, !dbg !9500, !tbaa !2129
  %12 = load i64, i64* %count, align 8, !dbg !9501, !tbaa !2129
  %cmp5 = icmp slt i64 %12, 0, !dbg !9503
  br i1 %cmp5, label %if.then.6, label %if.end.7, !dbg !9504

if.then.6:                                        ; preds = %if.end.4
  store i64 0, i64* %retval, !dbg !9505
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9505

if.end.7:                                         ; preds = %if.end.4
  %13 = load i64, i64* %count, align 8, !dbg !9506, !tbaa !2129
  store i64 %13, i64* %retval, !dbg !9507
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9507

cleanup:                                          ; preds = %if.end.7, %if.then.6, %cond.end, %if.then
  %14 = bitcast i64* %count to i8*, !dbg !9508
  call void @llvm.lifetime.end(i64 8, i8* %14) #3, !dbg !9508
  %15 = load i64, i64* %retval, !dbg !9508
  ret i64 %15, !dbg !9508
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @stringlib_parse_args_finds(i8* %function_name, %struct._object* %args, %struct._object** %subobj, i64* %start, i64* %end) #4 {
entry:
  %retval = alloca i32, align 4
  %function_name.addr = alloca i8*, align 8
  %args.addr = alloca %struct._object*, align 8
  %subobj.addr = alloca %struct._object**, align 8
  %start.addr = alloca i64*, align 8
  %end.addr = alloca i64*, align 8
  %tmp_subobj = alloca %struct._object*, align 8
  %tmp_start = alloca i64, align 8
  %tmp_end = alloca i64, align 8
  %obj_start = alloca %struct._object*, align 8
  %obj_end = alloca %struct._object*, align 8
  %format = alloca [50 x i8], align 16
  %len = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i8* %function_name, i8** %function_name.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %function_name.addr, metadata !892, metadata !2123), !dbg !9509
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !893, metadata !2123), !dbg !9510
  store %struct._object** %subobj, %struct._object*** %subobj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object*** %subobj.addr, metadata !894, metadata !2123), !dbg !9511
  store i64* %start, i64** %start.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i64** %start.addr, metadata !895, metadata !2123), !dbg !9512
  store i64* %end, i64** %end.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i64** %end.addr, metadata !896, metadata !2123), !dbg !9513
  %0 = bitcast %struct._object** %tmp_subobj to i8*, !dbg !9514
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !9514
  call void @llvm.dbg.declare(metadata %struct._object** %tmp_subobj, metadata !897, metadata !2123), !dbg !9515
  %1 = bitcast i64* %tmp_start to i8*, !dbg !9516
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !9516
  call void @llvm.dbg.declare(metadata i64* %tmp_start, metadata !898, metadata !2123), !dbg !9517
  store i64 0, i64* %tmp_start, align 8, !dbg !9517, !tbaa !2129
  %2 = bitcast i64* %tmp_end to i8*, !dbg !9518
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !9518
  call void @llvm.dbg.declare(metadata i64* %tmp_end, metadata !899, metadata !2123), !dbg !9519
  store i64 9223372036854775807, i64* %tmp_end, align 8, !dbg !9519, !tbaa !2129
  %3 = bitcast %struct._object** %obj_start to i8*, !dbg !9520
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !9520
  call void @llvm.dbg.declare(metadata %struct._object** %obj_start, metadata !900, metadata !2123), !dbg !9521
  store %struct._object* @_Py_NoneStruct, %struct._object** %obj_start, align 8, !dbg !9521, !tbaa !2119
  %4 = bitcast %struct._object** %obj_end to i8*, !dbg !9520
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !9520
  call void @llvm.dbg.declare(metadata %struct._object** %obj_end, metadata !901, metadata !2123), !dbg !9522
  store %struct._object* @_Py_NoneStruct, %struct._object** %obj_end, align 8, !dbg !9522, !tbaa !2119
  %5 = bitcast [50 x i8]* %format to i8*, !dbg !9523
  call void @llvm.lifetime.start(i64 50, i8* %5) #3, !dbg !9523
  call void @llvm.dbg.declare(metadata [50 x i8]* %format, metadata !902, metadata !2123), !dbg !9524
  %6 = bitcast [50 x i8]* %format to i8*, !dbg !9524
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 50, i32 16, i1 false), !dbg !9524
  %7 = bitcast i8* %6 to [50 x i8]*, !dbg !9524
  %8 = getelementptr [50 x i8], [50 x i8]* %7, i32 0, i32 0, !dbg !9524
  store i8 79, i8* %8, !dbg !9524
  %9 = getelementptr [50 x i8], [50 x i8]* %7, i32 0, i32 1, !dbg !9524
  store i8 124, i8* %9, !dbg !9524
  %10 = getelementptr [50 x i8], [50 x i8]* %7, i32 0, i32 2, !dbg !9524
  store i8 79, i8* %10, !dbg !9524
  %11 = getelementptr [50 x i8], [50 x i8]* %7, i32 0, i32 3, !dbg !9524
  store i8 79, i8* %11, !dbg !9524
  %12 = getelementptr [50 x i8], [50 x i8]* %7, i32 0, i32 4, !dbg !9524
  store i8 58, i8* %12, !dbg !9524
  %13 = bitcast i64* %len to i8*, !dbg !9525
  call void @llvm.lifetime.start(i64 8, i8* %13) #3, !dbg !9525
  call void @llvm.dbg.declare(metadata i64* %len, metadata !906, metadata !2123), !dbg !9526
  %arraydecay = getelementptr inbounds [50 x i8], [50 x i8]* %format, i32 0, i32 0, !dbg !9527
  %call = call i64 @strlen(i8* %arraydecay) #8, !dbg !9528
  store i64 %call, i64* %len, align 8, !dbg !9526, !tbaa !2129
  %arraydecay1 = getelementptr inbounds [50 x i8], [50 x i8]* %format, i32 0, i32 0, !dbg !9529
  %14 = load i64, i64* %len, align 8, !dbg !9530, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %arraydecay1, i64 %14, !dbg !9531
  %15 = load i8*, i8** %function_name.addr, align 8, !dbg !9532, !tbaa !2119
  %16 = load i64, i64* %len, align 8, !dbg !9533, !tbaa !2129
  %sub = sub i64 50, %16, !dbg !9534
  %sub2 = sub i64 %sub, 1, !dbg !9535
  %call3 = call i8* @strncpy(i8* %add.ptr, i8* %15, i64 %sub2) #3, !dbg !9536
  %arrayidx = getelementptr [50 x i8], [50 x i8]* %format, i32 0, i64 49, !dbg !9537
  store i8 0, i8* %arrayidx, align 1, !dbg !9538, !tbaa !2233
  %17 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9539, !tbaa !2119
  %arraydecay4 = getelementptr inbounds [50 x i8], [50 x i8]* %format, i32 0, i32 0, !dbg !9541
  %call5 = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %17, i8* %arraydecay4, %struct._object** %tmp_subobj, %struct._object** %obj_start, %struct._object** %obj_end), !dbg !9542
  %tobool = icmp ne i32 %call5, 0, !dbg !9542
  br i1 %tobool, label %if.end, label %if.then, !dbg !9543

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !9544
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9544

if.end:                                           ; preds = %entry
  %18 = load %struct._object*, %struct._object** %obj_start, align 8, !dbg !9545, !tbaa !2119
  %cmp = icmp ne %struct._object* %18, @_Py_NoneStruct, !dbg !9547
  br i1 %cmp, label %if.then.6, label %if.end.11, !dbg !9548

if.then.6:                                        ; preds = %if.end
  %19 = load %struct._object*, %struct._object** %obj_start, align 8, !dbg !9549, !tbaa !2119
  %call7 = call i32 @_PyEval_SliceIndex(%struct._object* %19, i64* %tmp_start), !dbg !9551
  %tobool8 = icmp ne i32 %call7, 0, !dbg !9551
  br i1 %tobool8, label %if.end.10, label %if.then.9, !dbg !9552

if.then.9:                                        ; preds = %if.then.6
  store i32 0, i32* %retval, !dbg !9553
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9553

if.end.10:                                        ; preds = %if.then.6
  br label %if.end.11, !dbg !9554

if.end.11:                                        ; preds = %if.end.10, %if.end
  %20 = load %struct._object*, %struct._object** %obj_end, align 8, !dbg !9556, !tbaa !2119
  %cmp12 = icmp ne %struct._object* %20, @_Py_NoneStruct, !dbg !9558
  br i1 %cmp12, label %if.then.13, label %if.end.18, !dbg !9559

if.then.13:                                       ; preds = %if.end.11
  %21 = load %struct._object*, %struct._object** %obj_end, align 8, !dbg !9560, !tbaa !2119
  %call14 = call i32 @_PyEval_SliceIndex(%struct._object* %21, i64* %tmp_end), !dbg !9562
  %tobool15 = icmp ne i32 %call14, 0, !dbg !9562
  br i1 %tobool15, label %if.end.17, label %if.then.16, !dbg !9563

if.then.16:                                       ; preds = %if.then.13
  store i32 0, i32* %retval, !dbg !9564
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9564

if.end.17:                                        ; preds = %if.then.13
  br label %if.end.18, !dbg !9565

if.end.18:                                        ; preds = %if.end.17, %if.end.11
  %22 = load i64, i64* %tmp_start, align 8, !dbg !9567, !tbaa !2129
  %23 = load i64*, i64** %start.addr, align 8, !dbg !9568, !tbaa !2119
  store i64 %22, i64* %23, align 8, !dbg !9569, !tbaa !2129
  %24 = load i64, i64* %tmp_end, align 8, !dbg !9570, !tbaa !2129
  %25 = load i64*, i64** %end.addr, align 8, !dbg !9571, !tbaa !2119
  store i64 %24, i64* %25, align 8, !dbg !9572, !tbaa !2129
  %26 = load %struct._object*, %struct._object** %tmp_subobj, align 8, !dbg !9573, !tbaa !2119
  %27 = load %struct._object**, %struct._object*** %subobj.addr, align 8, !dbg !9574, !tbaa !2119
  store %struct._object* %26, %struct._object** %27, align 8, !dbg !9575, !tbaa !2119
  store i32 1, i32* %retval, !dbg !9576
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9576

cleanup:                                          ; preds = %if.end.18, %if.then.16, %if.then.9, %if.then
  %28 = bitcast i64* %len to i8*, !dbg !9577
  call void @llvm.lifetime.end(i64 8, i8* %28) #3, !dbg !9577
  %29 = bitcast [50 x i8]* %format to i8*, !dbg !9577
  call void @llvm.lifetime.end(i64 50, i8* %29) #3, !dbg !9577
  %30 = bitcast %struct._object** %obj_end to i8*, !dbg !9577
  call void @llvm.lifetime.end(i64 8, i8* %30) #3, !dbg !9577
  %31 = bitcast %struct._object** %obj_start to i8*, !dbg !9577
  call void @llvm.lifetime.end(i64 8, i8* %31) #3, !dbg !9577
  %32 = bitcast i64* %tmp_end to i8*, !dbg !9577
  call void @llvm.lifetime.end(i64 8, i8* %32) #3, !dbg !9577
  %33 = bitcast i64* %tmp_start to i8*, !dbg !9577
  call void @llvm.lifetime.end(i64 8, i8* %33) #3, !dbg !9577
  %34 = bitcast %struct._object** %tmp_subobj to i8*, !dbg !9577
  call void @llvm.lifetime.end(i64 8, i8* %34) #3, !dbg !9577
  %35 = load i32, i32* %retval, !dbg !9577
  ret i32 %35, !dbg !9577
}

declare i32 @PyErr_GivenExceptionMatches(%struct._object*, %struct._object*) #2

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #5

; Function Attrs: nounwind
declare i8* @strncpy(i8*, i8*, i64) #6

declare i32 @_PyEval_SliceIndex(%struct._object*, i64*) #2

declare i32 @_PyArg_ParseTupleAndKeywords_SizeT(%struct._object*, %struct._object*, i8*, i8**, ...) #2

declare i8* @PyUnicode_GetDefaultEncoding() #2

declare %struct._object* @PyUnicode_FromEncodedObject(%struct._object*, i8*, i8*) #2

; Function Attrs: nounwind uwtable
define internal i32 @_bytearray_tailmatch(%struct.PyByteArrayObject* %self, %struct._object* %substr, i64 %start, i64 %end, i32 %direction) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %substr.addr = alloca %struct._object*, align 8
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  %direction.addr = alloca i32, align 4
  %len = alloca i64, align 8
  %str = alloca i8*, align 8
  %vsubstr = alloca %struct.bufferinfo, align 8
  %rv = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !938, metadata !2123), !dbg !9578
  store %struct._object* %substr, %struct._object** %substr.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %substr.addr, metadata !939, metadata !2123), !dbg !9579
  store i64 %start, i64* %start.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %start.addr, metadata !940, metadata !2123), !dbg !9580
  store i64 %end, i64* %end.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %end.addr, metadata !941, metadata !2123), !dbg !9581
  store i32 %direction, i32* %direction.addr, align 4, !tbaa !2676
  call void @llvm.dbg.declare(metadata i32* %direction.addr, metadata !942, metadata !2123), !dbg !9582
  %0 = bitcast i64* %len to i8*, !dbg !9583
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !9583
  call void @llvm.dbg.declare(metadata i64* %len, metadata !943, metadata !2123), !dbg !9584
  %1 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9585, !tbaa !2119
  %2 = bitcast %struct.PyByteArrayObject* %1 to %struct.PyVarObject*, !dbg !9586
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1, !dbg !9587
  %3 = load i64, i64* %ob_size, align 8, !dbg !9587, !tbaa !2239
  store i64 %3, i64* %len, align 8, !dbg !9584, !tbaa !2129
  %4 = bitcast i8** %str to i8*, !dbg !9588
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !9588
  call void @llvm.dbg.declare(metadata i8** %str, metadata !944, metadata !2123), !dbg !9589
  %5 = bitcast %struct.bufferinfo* %vsubstr to i8*, !dbg !9590
  call void @llvm.lifetime.start(i64 80, i8* %5) #3, !dbg !9590
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %vsubstr, metadata !945, metadata !2123), !dbg !9591
  %6 = bitcast i32* %rv to i8*, !dbg !9592
  call void @llvm.lifetime.start(i64 4, i8* %6) #3, !dbg !9592
  call void @llvm.dbg.declare(metadata i32* %rv, metadata !946, metadata !2123), !dbg !9593
  store i32 0, i32* %rv, align 4, !dbg !9593, !tbaa !2676
  %7 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9594, !tbaa !2119
  %8 = bitcast %struct.PyByteArrayObject* %7 to %struct.PyVarObject*, !dbg !9595
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !9596
  %9 = load i64, i64* %ob_size1, align 8, !dbg !9596, !tbaa !2239
  %tobool = icmp ne i64 %9, 0, !dbg !9597
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9597

cond.true:                                        ; preds = %entry
  %10 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9598, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %10, i32 0, i32 3, !dbg !9600
  %11 = load i8*, i8** %ob_start, align 8, !dbg !9600, !tbaa !2250
  br label %cond.end, !dbg !9597

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9601

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %11, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !9597
  store i8* %cond, i8** %str, align 8, !dbg !9603, !tbaa !2119
  %12 = load %struct._object*, %struct._object** %substr.addr, align 8, !dbg !9606, !tbaa !2119
  %call = call i64 @_getbuffer(%struct._object* %12, %struct.bufferinfo* %vsubstr), !dbg !9608
  %cmp = icmp slt i64 %call, 0, !dbg !9609
  br i1 %cmp, label %if.then, label %if.end, !dbg !9610

if.then:                                          ; preds = %cond.end
  store i32 -1, i32* %retval, !dbg !9611
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9611

if.end:                                           ; preds = %cond.end
  %13 = load i64, i64* %end.addr, align 8, !dbg !9612, !tbaa !2129
  %14 = load i64, i64* %len, align 8, !dbg !9614, !tbaa !2129
  %cmp2 = icmp sgt i64 %13, %14, !dbg !9615
  br i1 %cmp2, label %if.then.3, label %if.else, !dbg !9616

if.then.3:                                        ; preds = %if.end
  %15 = load i64, i64* %len, align 8, !dbg !9617, !tbaa !2129
  store i64 %15, i64* %end.addr, align 8, !dbg !9619, !tbaa !2129
  br label %if.end.10, !dbg !9620

if.else:                                          ; preds = %if.end
  %16 = load i64, i64* %end.addr, align 8, !dbg !9621, !tbaa !2129
  %cmp4 = icmp slt i64 %16, 0, !dbg !9624
  br i1 %cmp4, label %if.then.5, label %if.end.9, !dbg !9625

if.then.5:                                        ; preds = %if.else
  %17 = load i64, i64* %len, align 8, !dbg !9626, !tbaa !2129
  %18 = load i64, i64* %end.addr, align 8, !dbg !9629, !tbaa !2129
  %add = add i64 %18, %17, !dbg !9629
  store i64 %add, i64* %end.addr, align 8, !dbg !9629, !tbaa !2129
  %19 = load i64, i64* %end.addr, align 8, !dbg !9630, !tbaa !2129
  %cmp6 = icmp slt i64 %19, 0, !dbg !9632
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !9633

if.then.7:                                        ; preds = %if.then.5
  store i64 0, i64* %end.addr, align 8, !dbg !9634, !tbaa !2129
  br label %if.end.8, !dbg !9636

if.end.8:                                         ; preds = %if.then.7, %if.then.5
  br label %if.end.9, !dbg !9637

if.end.9:                                         ; preds = %if.end.8, %if.else
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %if.then.3
  %20 = load i64, i64* %start.addr, align 8, !dbg !9640, !tbaa !2129
  %cmp11 = icmp slt i64 %20, 0, !dbg !9643
  br i1 %cmp11, label %if.then.12, label %if.end.17, !dbg !9644

if.then.12:                                       ; preds = %if.end.10
  %21 = load i64, i64* %len, align 8, !dbg !9645, !tbaa !2129
  %22 = load i64, i64* %start.addr, align 8, !dbg !9648, !tbaa !2129
  %add13 = add i64 %22, %21, !dbg !9648
  store i64 %add13, i64* %start.addr, align 8, !dbg !9648, !tbaa !2129
  %23 = load i64, i64* %start.addr, align 8, !dbg !9649, !tbaa !2129
  %cmp14 = icmp slt i64 %23, 0, !dbg !9651
  br i1 %cmp14, label %if.then.15, label %if.end.16, !dbg !9652

if.then.15:                                       ; preds = %if.then.12
  store i64 0, i64* %start.addr, align 8, !dbg !9653, !tbaa !2129
  br label %if.end.16, !dbg !9655

if.end.16:                                        ; preds = %if.then.15, %if.then.12
  br label %if.end.17, !dbg !9656

if.end.17:                                        ; preds = %if.end.16, %if.end.10
  %24 = load i32, i32* %direction.addr, align 4, !dbg !9659, !tbaa !2676
  %cmp18 = icmp slt i32 %24, 0, !dbg !9661
  br i1 %cmp18, label %if.then.19, label %if.else.25, !dbg !9662

if.then.19:                                       ; preds = %if.end.17
  %25 = load i64, i64* %start.addr, align 8, !dbg !9663, !tbaa !2129
  %len20 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vsubstr, i32 0, i32 2, !dbg !9666
  %26 = load i64, i64* %len20, align 8, !dbg !9666, !tbaa !2482
  %add21 = add i64 %25, %26, !dbg !9667
  %27 = load i64, i64* %len, align 8, !dbg !9668, !tbaa !2129
  %cmp22 = icmp sgt i64 %add21, %27, !dbg !9669
  br i1 %cmp22, label %if.then.23, label %if.end.24, !dbg !9670

if.then.23:                                       ; preds = %if.then.19
  br label %done, !dbg !9671

if.end.24:                                        ; preds = %if.then.19
  br label %if.end.38, !dbg !9673

if.else.25:                                       ; preds = %if.end.17
  %28 = load i64, i64* %end.addr, align 8, !dbg !9674, !tbaa !2129
  %29 = load i64, i64* %start.addr, align 8, !dbg !9677, !tbaa !2129
  %sub = sub i64 %28, %29, !dbg !9678
  %len26 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vsubstr, i32 0, i32 2, !dbg !9679
  %30 = load i64, i64* %len26, align 8, !dbg !9679, !tbaa !2482
  %cmp27 = icmp slt i64 %sub, %30, !dbg !9680
  br i1 %cmp27, label %if.then.29, label %lor.lhs.false, !dbg !9681

lor.lhs.false:                                    ; preds = %if.else.25
  %31 = load i64, i64* %start.addr, align 8, !dbg !9682, !tbaa !2129
  %32 = load i64, i64* %len, align 8, !dbg !9684, !tbaa !2129
  %cmp28 = icmp sgt i64 %31, %32, !dbg !9685
  br i1 %cmp28, label %if.then.29, label %if.end.30, !dbg !9686

if.then.29:                                       ; preds = %lor.lhs.false, %if.else.25
  br label %done, !dbg !9687

if.end.30:                                        ; preds = %lor.lhs.false
  %33 = load i64, i64* %end.addr, align 8, !dbg !9689, !tbaa !2129
  %len31 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vsubstr, i32 0, i32 2, !dbg !9691
  %34 = load i64, i64* %len31, align 8, !dbg !9691, !tbaa !2482
  %sub32 = sub i64 %33, %34, !dbg !9692
  %35 = load i64, i64* %start.addr, align 8, !dbg !9693, !tbaa !2129
  %cmp33 = icmp sgt i64 %sub32, %35, !dbg !9694
  br i1 %cmp33, label %if.then.34, label %if.end.37, !dbg !9695

if.then.34:                                       ; preds = %if.end.30
  %36 = load i64, i64* %end.addr, align 8, !dbg !9696, !tbaa !2129
  %len35 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vsubstr, i32 0, i32 2, !dbg !9697
  %37 = load i64, i64* %len35, align 8, !dbg !9697, !tbaa !2482
  %sub36 = sub i64 %36, %37, !dbg !9698
  store i64 %sub36, i64* %start.addr, align 8, !dbg !9699, !tbaa !2129
  br label %if.end.37, !dbg !9700

if.end.37:                                        ; preds = %if.then.34, %if.end.30
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %if.end.24
  %38 = load i64, i64* %end.addr, align 8, !dbg !9701, !tbaa !2129
  %39 = load i64, i64* %start.addr, align 8, !dbg !9703, !tbaa !2129
  %sub39 = sub i64 %38, %39, !dbg !9704
  %len40 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vsubstr, i32 0, i32 2, !dbg !9705
  %40 = load i64, i64* %len40, align 8, !dbg !9705, !tbaa !2482
  %cmp41 = icmp sge i64 %sub39, %40, !dbg !9706
  br i1 %cmp41, label %if.then.42, label %if.end.46, !dbg !9707

if.then.42:                                       ; preds = %if.end.38
  %41 = load i8*, i8** %str, align 8, !dbg !9708, !tbaa !2119
  %42 = load i64, i64* %start.addr, align 8, !dbg !9709, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %41, i64 %42, !dbg !9710
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vsubstr, i32 0, i32 0, !dbg !9711
  %43 = load i8*, i8** %buf, align 8, !dbg !9711, !tbaa !2529
  %len43 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %vsubstr, i32 0, i32 2, !dbg !9712
  %44 = load i64, i64* %len43, align 8, !dbg !9712, !tbaa !2482
  %call44 = call i32 @memcmp(i8* %add.ptr, i8* %43, i64 %44) #8, !dbg !9713
  %tobool45 = icmp ne i32 %call44, 0, !dbg !9714
  %lnot = xor i1 %tobool45, true, !dbg !9714
  %lnot.ext = zext i1 %lnot to i32, !dbg !9714
  store i32 %lnot.ext, i32* %rv, align 4, !dbg !9715, !tbaa !2676
  br label %if.end.46, !dbg !9716

if.end.46:                                        ; preds = %if.then.42, %if.end.38
  br label %done, !dbg !9717

done:                                             ; preds = %if.end.46, %if.then.29, %if.then.23
  call void @PyBuffer_Release(%struct.bufferinfo* %vsubstr), !dbg !9719
  %45 = load i32, i32* %rv, align 4, !dbg !9720, !tbaa !2676
  store i32 %45, i32* %retval, !dbg !9721
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9721

cleanup:                                          ; preds = %done, %if.then
  %46 = bitcast i32* %rv to i8*, !dbg !9722
  call void @llvm.lifetime.end(i64 4, i8* %46) #3, !dbg !9722
  %47 = bitcast %struct.bufferinfo* %vsubstr to i8*, !dbg !9722
  call void @llvm.lifetime.end(i64 80, i8* %47) #3, !dbg !9722
  %48 = bitcast i8** %str to i8*, !dbg !9722
  call void @llvm.lifetime.end(i64 8, i8* %48) #3, !dbg !9722
  %49 = bitcast i64* %len to i8*, !dbg !9722
  call void @llvm.lifetime.end(i64 8, i8* %49) #3, !dbg !9722
  %50 = load i32, i32* %retval, !dbg !9722
  ret i32 %50, !dbg !9722
}

declare i32 @PyErr_ExceptionMatches(%struct._object*) #2

declare %struct._object* @PyBool_FromLong(i64) #2

declare %struct._object* @PyObject_GetIter(%struct._object*) #2

declare i64 @PyObject_LengthHint(%struct._object*, i64) #2

declare %struct._object* @PyIter_Next(%struct._object*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @bytearray_find_internal(%struct.PyByteArrayObject* %self, %struct._object* %args, i32 %dir) #4 {
entry:
  %retval = alloca i64, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %dir.addr = alloca i32, align 4
  %subobj = alloca %struct._object*, align 8
  %byte = alloca i8, align 1
  %subbuf = alloca %struct.bufferinfo, align 8
  %sub = alloca i8*, align 8
  %sub_len = alloca i64, align 8
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  %res = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1026, metadata !2123), !dbg !9723
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1027, metadata !2123), !dbg !9724
  store i32 %dir, i32* %dir.addr, align 4, !tbaa !2676
  call void @llvm.dbg.declare(metadata i32* %dir.addr, metadata !1028, metadata !2123), !dbg !9725
  %0 = bitcast %struct._object** %subobj to i8*, !dbg !9726
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !9726
  call void @llvm.dbg.declare(metadata %struct._object** %subobj, metadata !1029, metadata !2123), !dbg !9727
  call void @llvm.lifetime.start(i64 1, i8* %byte) #3, !dbg !9728
  call void @llvm.dbg.declare(metadata i8* %byte, metadata !1030, metadata !2123), !dbg !9729
  %1 = bitcast %struct.bufferinfo* %subbuf to i8*, !dbg !9730
  call void @llvm.lifetime.start(i64 80, i8* %1) #3, !dbg !9730
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %subbuf, metadata !1031, metadata !2123), !dbg !9731
  %2 = bitcast i8** %sub to i8*, !dbg !9732
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !9732
  call void @llvm.dbg.declare(metadata i8** %sub, metadata !1032, metadata !2123), !dbg !9733
  %3 = bitcast i64* %sub_len to i8*, !dbg !9734
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !9734
  call void @llvm.dbg.declare(metadata i64* %sub_len, metadata !1033, metadata !2123), !dbg !9735
  %4 = bitcast i64* %start to i8*, !dbg !9736
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !9736
  call void @llvm.dbg.declare(metadata i64* %start, metadata !1034, metadata !2123), !dbg !9737
  store i64 0, i64* %start, align 8, !dbg !9737, !tbaa !2129
  %5 = bitcast i64* %end to i8*, !dbg !9736
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !9736
  call void @llvm.dbg.declare(metadata i64* %end, metadata !1035, metadata !2123), !dbg !9738
  store i64 9223372036854775807, i64* %end, align 8, !dbg !9738, !tbaa !2129
  %6 = bitcast i64* %res to i8*, !dbg !9739
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !9739
  call void @llvm.dbg.declare(metadata i64* %res, metadata !1036, metadata !2123), !dbg !9740
  %7 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9741, !tbaa !2119
  %call = call i32 @stringlib_parse_args_finds_byte(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.86, i32 0, i32 0), %struct._object* %7, %struct._object** %subobj, i8* %byte, i64* %start, i64* %end), !dbg !9743
  %tobool = icmp ne i32 %call, 0, !dbg !9743
  br i1 %tobool, label %if.end, label %if.then, !dbg !9744

if.then:                                          ; preds = %entry
  store i64 -2, i64* %retval, !dbg !9745
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9745

if.end:                                           ; preds = %entry
  %8 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !9746, !tbaa !2119
  %tobool1 = icmp ne %struct._object* %8, null, !dbg !9746
  br i1 %tobool1, label %if.then.2, label %if.else, !dbg !9748

if.then.2:                                        ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !9749, !tbaa !2119
  %call3 = call i64 @_getbuffer(%struct._object* %9, %struct.bufferinfo* %subbuf), !dbg !9752
  %cmp = icmp slt i64 %call3, 0, !dbg !9753
  br i1 %cmp, label %if.then.4, label %if.end.5, !dbg !9754

if.then.4:                                        ; preds = %if.then.2
  store i64 -2, i64* %retval, !dbg !9755
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9755

if.end.5:                                         ; preds = %if.then.2
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %subbuf, i32 0, i32 0, !dbg !9756
  %10 = load i8*, i8** %buf, align 8, !dbg !9756, !tbaa !2529
  store i8* %10, i8** %sub, align 8, !dbg !9757, !tbaa !2119
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %subbuf, i32 0, i32 2, !dbg !9758
  %11 = load i64, i64* %len, align 8, !dbg !9758, !tbaa !2482
  store i64 %11, i64* %sub_len, align 8, !dbg !9759, !tbaa !2129
  br label %if.end.6, !dbg !9760

if.else:                                          ; preds = %if.end
  store i8* %byte, i8** %sub, align 8, !dbg !9761, !tbaa !2119
  store i64 1, i64* %sub_len, align 8, !dbg !9763, !tbaa !2129
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.end.5
  %12 = load i32, i32* %dir.addr, align 4, !dbg !9764, !tbaa !2676
  %cmp7 = icmp sgt i32 %12, 0, !dbg !9766
  br i1 %cmp7, label %if.then.8, label %if.else.12, !dbg !9767

if.then.8:                                        ; preds = %if.end.6
  %13 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9768, !tbaa !2119
  %14 = bitcast %struct.PyByteArrayObject* %13 to %struct.PyVarObject*, !dbg !9769
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %14, i32 0, i32 1, !dbg !9770
  %15 = load i64, i64* %ob_size, align 8, !dbg !9770, !tbaa !2239
  %tobool9 = icmp ne i64 %15, 0, !dbg !9771
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !9771

cond.true:                                        ; preds = %if.then.8
  %16 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9772, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %16, i32 0, i32 3, !dbg !9774
  %17 = load i8*, i8** %ob_start, align 8, !dbg !9774, !tbaa !2250
  br label %cond.end, !dbg !9771

cond.false:                                       ; preds = %if.then.8
  br label %cond.end, !dbg !9775

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %17, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !9771
  %18 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9777, !tbaa !2119
  %19 = bitcast %struct.PyByteArrayObject* %18 to %struct.PyVarObject*, !dbg !9780
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %19, i32 0, i32 1, !dbg !9781
  %20 = load i64, i64* %ob_size10, align 8, !dbg !9781, !tbaa !2239
  %21 = load i8*, i8** %sub, align 8, !dbg !9782, !tbaa !2119
  %22 = load i64, i64* %sub_len, align 8, !dbg !9783, !tbaa !2129
  %23 = load i64, i64* %start, align 8, !dbg !9784, !tbaa !2129
  %24 = load i64, i64* %end, align 8, !dbg !9785, !tbaa !2129
  %call11 = call i64 @stringlib_find_slice(i8* %cond, i64 %20, i8* %21, i64 %22, i64 %23, i64 %24), !dbg !9786
  store i64 %call11, i64* %res, align 8, !dbg !9787, !tbaa !2129
  br label %if.end.22, !dbg !9788

if.else.12:                                       ; preds = %if.end.6
  %25 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9789, !tbaa !2119
  %26 = bitcast %struct.PyByteArrayObject* %25 to %struct.PyVarObject*, !dbg !9790
  %ob_size13 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %26, i32 0, i32 1, !dbg !9791
  %27 = load i64, i64* %ob_size13, align 8, !dbg !9791, !tbaa !2239
  %tobool14 = icmp ne i64 %27, 0, !dbg !9792
  br i1 %tobool14, label %cond.true.15, label %cond.false.17, !dbg !9792

cond.true.15:                                     ; preds = %if.else.12
  %28 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9793, !tbaa !2119
  %ob_start16 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %28, i32 0, i32 3, !dbg !9794
  %29 = load i8*, i8** %ob_start16, align 8, !dbg !9794, !tbaa !2250
  br label %cond.end.18, !dbg !9792

cond.false.17:                                    ; preds = %if.else.12
  br label %cond.end.18, !dbg !9795

cond.end.18:                                      ; preds = %cond.false.17, %cond.true.15
  %cond19 = phi i8* [ %29, %cond.true.15 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.17 ], !dbg !9792
  %30 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !9796, !tbaa !2119
  %31 = bitcast %struct.PyByteArrayObject* %30 to %struct.PyVarObject*, !dbg !9797
  %ob_size20 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %31, i32 0, i32 1, !dbg !9798
  %32 = load i64, i64* %ob_size20, align 8, !dbg !9798, !tbaa !2239
  %33 = load i8*, i8** %sub, align 8, !dbg !9799, !tbaa !2119
  %34 = load i64, i64* %sub_len, align 8, !dbg !9800, !tbaa !2129
  %35 = load i64, i64* %start, align 8, !dbg !9801, !tbaa !2129
  %36 = load i64, i64* %end, align 8, !dbg !9802, !tbaa !2129
  %call21 = call i64 @stringlib_rfind_slice(i8* %cond19, i64 %32, i8* %33, i64 %34, i64 %35, i64 %36), !dbg !9803
  store i64 %call21, i64* %res, align 8, !dbg !9804, !tbaa !2129
  br label %if.end.22

if.end.22:                                        ; preds = %cond.end.18, %cond.end
  %37 = load %struct._object*, %struct._object** %subobj, align 8, !dbg !9805, !tbaa !2119
  %tobool23 = icmp ne %struct._object* %37, null, !dbg !9805
  br i1 %tobool23, label %if.then.24, label %if.end.25, !dbg !9807

if.then.24:                                       ; preds = %if.end.22
  call void @PyBuffer_Release(%struct.bufferinfo* %subbuf), !dbg !9808
  br label %if.end.25, !dbg !9808

if.end.25:                                        ; preds = %if.then.24, %if.end.22
  %38 = load i64, i64* %res, align 8, !dbg !9809, !tbaa !2129
  store i64 %38, i64* %retval, !dbg !9810
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9810

cleanup:                                          ; preds = %if.end.25, %if.then.4, %if.then
  %39 = bitcast i64* %res to i8*, !dbg !9811
  call void @llvm.lifetime.end(i64 8, i8* %39) #3, !dbg !9811
  %40 = bitcast i64* %end to i8*, !dbg !9811
  call void @llvm.lifetime.end(i64 8, i8* %40) #3, !dbg !9811
  %41 = bitcast i64* %start to i8*, !dbg !9811
  call void @llvm.lifetime.end(i64 8, i8* %41) #3, !dbg !9811
  %42 = bitcast i64* %sub_len to i8*, !dbg !9811
  call void @llvm.lifetime.end(i64 8, i8* %42) #3, !dbg !9811
  %43 = bitcast i8** %sub to i8*, !dbg !9811
  call void @llvm.lifetime.end(i64 8, i8* %43) #3, !dbg !9811
  %44 = bitcast %struct.bufferinfo* %subbuf to i8*, !dbg !9811
  call void @llvm.lifetime.end(i64 80, i8* %44) #3, !dbg !9811
  call void @llvm.lifetime.end(i64 1, i8* %byte) #3, !dbg !9811
  %45 = bitcast %struct._object** %subobj to i8*, !dbg !9811
  call void @llvm.lifetime.end(i64 8, i8* %45) #3, !dbg !9811
  %46 = load i64, i64* %retval, !dbg !9811
  ret i64 %46, !dbg !9811
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @stringlib_find_slice(i8* %str, i64 %str_len, i8* %sub, i64 %sub_len, i64 %start, i64 %end) #4 {
entry:
  %str.addr = alloca i8*, align 8
  %str_len.addr = alloca i64, align 8
  %sub.addr = alloca i8*, align 8
  %sub_len.addr = alloca i64, align 8
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  store i8* %str, i8** %str.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !1041, metadata !2123), !dbg !9812
  store i64 %str_len, i64* %str_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %str_len.addr, metadata !1042, metadata !2123), !dbg !9813
  store i8* %sub, i8** %sub.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %sub.addr, metadata !1043, metadata !2123), !dbg !9814
  store i64 %sub_len, i64* %sub_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %sub_len.addr, metadata !1044, metadata !2123), !dbg !9815
  store i64 %start, i64* %start.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %start.addr, metadata !1045, metadata !2123), !dbg !9816
  store i64 %end, i64* %end.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %end.addr, metadata !1046, metadata !2123), !dbg !9817
  %0 = load i64, i64* %end.addr, align 8, !dbg !9818, !tbaa !2129
  %1 = load i64, i64* %str_len.addr, align 8, !dbg !9820, !tbaa !2129
  %cmp = icmp sgt i64 %0, %1, !dbg !9821
  br i1 %cmp, label %if.then, label %if.else, !dbg !9822

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %str_len.addr, align 8, !dbg !9823, !tbaa !2129
  store i64 %2, i64* %end.addr, align 8, !dbg !9825, !tbaa !2129
  br label %if.end.6, !dbg !9826

if.else:                                          ; preds = %entry
  %3 = load i64, i64* %end.addr, align 8, !dbg !9827, !tbaa !2129
  %cmp1 = icmp slt i64 %3, 0, !dbg !9830
  br i1 %cmp1, label %if.then.2, label %if.end.5, !dbg !9831

if.then.2:                                        ; preds = %if.else
  %4 = load i64, i64* %str_len.addr, align 8, !dbg !9832, !tbaa !2129
  %5 = load i64, i64* %end.addr, align 8, !dbg !9835, !tbaa !2129
  %add = add i64 %5, %4, !dbg !9835
  store i64 %add, i64* %end.addr, align 8, !dbg !9835, !tbaa !2129
  %6 = load i64, i64* %end.addr, align 8, !dbg !9836, !tbaa !2129
  %cmp3 = icmp slt i64 %6, 0, !dbg !9838
  br i1 %cmp3, label %if.then.4, label %if.end, !dbg !9839

if.then.4:                                        ; preds = %if.then.2
  store i64 0, i64* %end.addr, align 8, !dbg !9840, !tbaa !2129
  br label %if.end, !dbg !9842

if.end:                                           ; preds = %if.then.4, %if.then.2
  br label %if.end.5, !dbg !9843

if.end.5:                                         ; preds = %if.end, %if.else
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.then
  %7 = load i64, i64* %start.addr, align 8, !dbg !9846, !tbaa !2129
  %cmp7 = icmp slt i64 %7, 0, !dbg !9849
  br i1 %cmp7, label %if.then.8, label %if.end.13, !dbg !9850

if.then.8:                                        ; preds = %if.end.6
  %8 = load i64, i64* %str_len.addr, align 8, !dbg !9851, !tbaa !2129
  %9 = load i64, i64* %start.addr, align 8, !dbg !9854, !tbaa !2129
  %add9 = add i64 %9, %8, !dbg !9854
  store i64 %add9, i64* %start.addr, align 8, !dbg !9854, !tbaa !2129
  %10 = load i64, i64* %start.addr, align 8, !dbg !9855, !tbaa !2129
  %cmp10 = icmp slt i64 %10, 0, !dbg !9857
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !9858

if.then.11:                                       ; preds = %if.then.8
  store i64 0, i64* %start.addr, align 8, !dbg !9859, !tbaa !2129
  br label %if.end.12, !dbg !9861

if.end.12:                                        ; preds = %if.then.11, %if.then.8
  br label %if.end.13, !dbg !9862

if.end.13:                                        ; preds = %if.end.12, %if.end.6
  %11 = load i8*, i8** %str.addr, align 8, !dbg !9865, !tbaa !2119
  %12 = load i64, i64* %start.addr, align 8, !dbg !9866, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %11, i64 %12, !dbg !9867
  %13 = load i64, i64* %end.addr, align 8, !dbg !9868, !tbaa !2129
  %14 = load i64, i64* %start.addr, align 8, !dbg !9869, !tbaa !2129
  %sub14 = sub i64 %13, %14, !dbg !9870
  %15 = load i8*, i8** %sub.addr, align 8, !dbg !9871, !tbaa !2119
  %16 = load i64, i64* %sub_len.addr, align 8, !dbg !9872, !tbaa !2129
  %17 = load i64, i64* %start.addr, align 8, !dbg !9873, !tbaa !2129
  %call = call i64 @stringlib_find(i8* %add.ptr, i64 %sub14, i8* %15, i64 %16, i64 %17), !dbg !9874
  ret i64 %call, !dbg !9875
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @stringlib_rfind_slice(i8* %str, i64 %str_len, i8* %sub, i64 %sub_len, i64 %start, i64 %end) #4 {
entry:
  %str.addr = alloca i8*, align 8
  %str_len.addr = alloca i64, align 8
  %sub.addr = alloca i8*, align 8
  %sub_len.addr = alloca i64, align 8
  %start.addr = alloca i64, align 8
  %end.addr = alloca i64, align 8
  store i8* %str, i8** %str.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !1049, metadata !2123), !dbg !9876
  store i64 %str_len, i64* %str_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %str_len.addr, metadata !1050, metadata !2123), !dbg !9877
  store i8* %sub, i8** %sub.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %sub.addr, metadata !1051, metadata !2123), !dbg !9878
  store i64 %sub_len, i64* %sub_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %sub_len.addr, metadata !1052, metadata !2123), !dbg !9879
  store i64 %start, i64* %start.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %start.addr, metadata !1053, metadata !2123), !dbg !9880
  store i64 %end, i64* %end.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %end.addr, metadata !1054, metadata !2123), !dbg !9881
  %0 = load i64, i64* %end.addr, align 8, !dbg !9882, !tbaa !2129
  %1 = load i64, i64* %str_len.addr, align 8, !dbg !9884, !tbaa !2129
  %cmp = icmp sgt i64 %0, %1, !dbg !9885
  br i1 %cmp, label %if.then, label %if.else, !dbg !9886

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %str_len.addr, align 8, !dbg !9887, !tbaa !2129
  store i64 %2, i64* %end.addr, align 8, !dbg !9889, !tbaa !2129
  br label %if.end.6, !dbg !9890

if.else:                                          ; preds = %entry
  %3 = load i64, i64* %end.addr, align 8, !dbg !9891, !tbaa !2129
  %cmp1 = icmp slt i64 %3, 0, !dbg !9894
  br i1 %cmp1, label %if.then.2, label %if.end.5, !dbg !9895

if.then.2:                                        ; preds = %if.else
  %4 = load i64, i64* %str_len.addr, align 8, !dbg !9896, !tbaa !2129
  %5 = load i64, i64* %end.addr, align 8, !dbg !9899, !tbaa !2129
  %add = add i64 %5, %4, !dbg !9899
  store i64 %add, i64* %end.addr, align 8, !dbg !9899, !tbaa !2129
  %6 = load i64, i64* %end.addr, align 8, !dbg !9900, !tbaa !2129
  %cmp3 = icmp slt i64 %6, 0, !dbg !9902
  br i1 %cmp3, label %if.then.4, label %if.end, !dbg !9903

if.then.4:                                        ; preds = %if.then.2
  store i64 0, i64* %end.addr, align 8, !dbg !9904, !tbaa !2129
  br label %if.end, !dbg !9906

if.end:                                           ; preds = %if.then.4, %if.then.2
  br label %if.end.5, !dbg !9907

if.end.5:                                         ; preds = %if.end, %if.else
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.then
  %7 = load i64, i64* %start.addr, align 8, !dbg !9910, !tbaa !2129
  %cmp7 = icmp slt i64 %7, 0, !dbg !9913
  br i1 %cmp7, label %if.then.8, label %if.end.13, !dbg !9914

if.then.8:                                        ; preds = %if.end.6
  %8 = load i64, i64* %str_len.addr, align 8, !dbg !9915, !tbaa !2129
  %9 = load i64, i64* %start.addr, align 8, !dbg !9918, !tbaa !2129
  %add9 = add i64 %9, %8, !dbg !9918
  store i64 %add9, i64* %start.addr, align 8, !dbg !9918, !tbaa !2129
  %10 = load i64, i64* %start.addr, align 8, !dbg !9919, !tbaa !2129
  %cmp10 = icmp slt i64 %10, 0, !dbg !9921
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !9922

if.then.11:                                       ; preds = %if.then.8
  store i64 0, i64* %start.addr, align 8, !dbg !9923, !tbaa !2129
  br label %if.end.12, !dbg !9925

if.end.12:                                        ; preds = %if.then.11, %if.then.8
  br label %if.end.13, !dbg !9926

if.end.13:                                        ; preds = %if.end.12, %if.end.6
  %11 = load i8*, i8** %str.addr, align 8, !dbg !9929, !tbaa !2119
  %12 = load i64, i64* %start.addr, align 8, !dbg !9930, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %11, i64 %12, !dbg !9931
  %13 = load i64, i64* %end.addr, align 8, !dbg !9932, !tbaa !2129
  %14 = load i64, i64* %start.addr, align 8, !dbg !9933, !tbaa !2129
  %sub14 = sub i64 %13, %14, !dbg !9934
  %15 = load i8*, i8** %sub.addr, align 8, !dbg !9935, !tbaa !2119
  %16 = load i64, i64* %sub_len.addr, align 8, !dbg !9936, !tbaa !2129
  %17 = load i64, i64* %start.addr, align 8, !dbg !9937, !tbaa !2129
  %call = call i64 @stringlib_rfind(i8* %add.ptr, i64 %sub14, i8* %15, i64 %16, i64 %17), !dbg !9938
  ret i64 %call, !dbg !9939
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @stringlib_rfind(i8* %str, i64 %str_len, i8* %sub, i64 %sub_len, i64 %offset) #4 {
entry:
  %retval = alloca i64, align 8
  %str.addr = alloca i8*, align 8
  %str_len.addr = alloca i64, align 8
  %sub.addr = alloca i8*, align 8
  %sub_len.addr = alloca i64, align 8
  %offset.addr = alloca i64, align 8
  %pos = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i8* %str, i8** %str.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !1057, metadata !2123), !dbg !9940
  store i64 %str_len, i64* %str_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %str_len.addr, metadata !1058, metadata !2123), !dbg !9941
  store i8* %sub, i8** %sub.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %sub.addr, metadata !1059, metadata !2123), !dbg !9942
  store i64 %sub_len, i64* %sub_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %sub_len.addr, metadata !1060, metadata !2123), !dbg !9943
  store i64 %offset, i64* %offset.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !1061, metadata !2123), !dbg !9944
  %0 = bitcast i64* %pos to i8*, !dbg !9945
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !9945
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !1062, metadata !2123), !dbg !9946
  %1 = load i64, i64* %str_len.addr, align 8, !dbg !9947, !tbaa !2129
  %cmp = icmp slt i64 %1, 0, !dbg !9949
  br i1 %cmp, label %if.then, label %if.end, !dbg !9950

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval, !dbg !9951
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9951

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %sub_len.addr, align 8, !dbg !9952, !tbaa !2129
  %cmp1 = icmp eq i64 %2, 0, !dbg !9954
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !9955

if.then.2:                                        ; preds = %if.end
  %3 = load i64, i64* %str_len.addr, align 8, !dbg !9956, !tbaa !2129
  %4 = load i64, i64* %offset.addr, align 8, !dbg !9957, !tbaa !2129
  %add = add i64 %3, %4, !dbg !9958
  store i64 %add, i64* %retval, !dbg !9959
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9959

if.end.3:                                         ; preds = %if.end
  %5 = load i8*, i8** %str.addr, align 8, !dbg !9960, !tbaa !2119
  %6 = load i64, i64* %str_len.addr, align 8, !dbg !9961, !tbaa !2129
  %7 = load i8*, i8** %sub.addr, align 8, !dbg !9962, !tbaa !2119
  %8 = load i64, i64* %sub_len.addr, align 8, !dbg !9963, !tbaa !2129
  %call = call i64 @fastsearch(i8* %5, i64 %6, i8* %7, i64 %8, i64 -1, i32 2), !dbg !9964
  store i64 %call, i64* %pos, align 8, !dbg !9965, !tbaa !2129
  %9 = load i64, i64* %pos, align 8, !dbg !9966, !tbaa !2129
  %cmp4 = icmp sge i64 %9, 0, !dbg !9968
  br i1 %cmp4, label %if.then.5, label %if.end.7, !dbg !9969

if.then.5:                                        ; preds = %if.end.3
  %10 = load i64, i64* %offset.addr, align 8, !dbg !9970, !tbaa !2129
  %11 = load i64, i64* %pos, align 8, !dbg !9971, !tbaa !2129
  %add6 = add i64 %11, %10, !dbg !9971
  store i64 %add6, i64* %pos, align 8, !dbg !9971, !tbaa !2129
  br label %if.end.7, !dbg !9972

if.end.7:                                         ; preds = %if.then.5, %if.end.3
  %12 = load i64, i64* %pos, align 8, !dbg !9973, !tbaa !2129
  store i64 %12, i64* %retval, !dbg !9974
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9974

cleanup:                                          ; preds = %if.end.7, %if.then.2, %if.then
  %13 = bitcast i64* %pos to i8*, !dbg !9975
  call void @llvm.lifetime.end(i64 8, i8* %13) #3, !dbg !9975
  %14 = load i64, i64* %retval, !dbg !9975
  ret i64 %14, !dbg !9975
}

declare i32 @_PyUnicode_Ready(%struct._object*) #2

; Function Attrs: nounwind uwtable
define internal i32 @hex_digit_to_int(i32 %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4, !tbaa !2676
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !1084, metadata !2123), !dbg !9976
  %0 = load i32, i32* %c.addr, align 4, !dbg !9977, !tbaa !2676
  %cmp = icmp uge i32 %0, 128, !dbg !9979
  br i1 %cmp, label %if.then, label %if.end, !dbg !9980

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, !dbg !9981
  br label %return, !dbg !9981

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !9982, !tbaa !2676
  %and = and i32 %1, 255, !dbg !9984
  %conv = trunc i32 %and to i8, !dbg !9985
  %idxprom = zext i8 %conv to i64, !dbg !9986
  %arrayidx = getelementptr [256 x i32], [256 x i32]* @_Py_ctype_table, i32 0, i64 %idxprom, !dbg !9986
  %2 = load i32, i32* %arrayidx, align 4, !dbg !9986, !tbaa !2676
  %and1 = and i32 %2, 4, !dbg !9987
  %tobool = icmp ne i32 %and1, 0, !dbg !9987
  br i1 %tobool, label %if.then.2, label %if.else, !dbg !9988

if.then.2:                                        ; preds = %if.end
  %3 = load i32, i32* %c.addr, align 4, !dbg !9989, !tbaa !2676
  %sub = sub i32 %3, 48, !dbg !9990
  store i32 %sub, i32* %retval, !dbg !9991
  br label %return, !dbg !9991

if.else:                                          ; preds = %if.end
  %4 = load i32, i32* %c.addr, align 4, !dbg !9992, !tbaa !2676
  %and3 = and i32 %4, 255, !dbg !9995
  %conv4 = trunc i32 %and3 to i8, !dbg !9996
  %idxprom5 = zext i8 %conv4 to i64, !dbg !9997
  %arrayidx6 = getelementptr [256 x i32], [256 x i32]* @_Py_ctype_table, i32 0, i64 %idxprom5, !dbg !9997
  %5 = load i32, i32* %arrayidx6, align 4, !dbg !9997, !tbaa !2676
  %and7 = and i32 %5, 2, !dbg !9998
  %tobool8 = icmp ne i32 %and7, 0, !dbg !9998
  br i1 %tobool8, label %if.then.9, label %if.end.15, !dbg !9999

if.then.9:                                        ; preds = %if.else
  %6 = load i32, i32* %c.addr, align 4, !dbg !10000, !tbaa !2676
  %and10 = and i32 %6, 255, !dbg !10001
  %conv11 = trunc i32 %and10 to i8, !dbg !10002
  %idxprom12 = zext i8 %conv11 to i64, !dbg !10003
  %arrayidx13 = getelementptr [256 x i8], [256 x i8]* @_Py_ctype_tolower, i32 0, i64 %idxprom12, !dbg !10003
  %7 = load i8, i8* %arrayidx13, align 1, !dbg !10003, !tbaa !2233
  %conv14 = zext i8 %7 to i32, !dbg !10004
  store i32 %conv14, i32* %c.addr, align 4, !dbg !10005, !tbaa !2676
  br label %if.end.15, !dbg !10006

if.end.15:                                        ; preds = %if.then.9, %if.else
  %8 = load i32, i32* %c.addr, align 4, !dbg !10007, !tbaa !2676
  %cmp16 = icmp uge i32 %8, 97, !dbg !10009
  br i1 %cmp16, label %land.lhs.true, label %if.end.22, !dbg !10010

land.lhs.true:                                    ; preds = %if.end.15
  %9 = load i32, i32* %c.addr, align 4, !dbg !10011, !tbaa !2676
  %cmp18 = icmp ule i32 %9, 102, !dbg !10013
  br i1 %cmp18, label %if.then.20, label %if.end.22, !dbg !10014

if.then.20:                                       ; preds = %land.lhs.true
  %10 = load i32, i32* %c.addr, align 4, !dbg !10015, !tbaa !2676
  %sub21 = sub i32 %10, 97, !dbg !10016
  %add = add i32 %sub21, 10, !dbg !10017
  store i32 %add, i32* %retval, !dbg !10018
  br label %return, !dbg !10018

if.end.22:                                        ; preds = %land.lhs.true, %if.end.15
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22
  store i32 -1, i32* %retval, !dbg !10019
  br label %return, !dbg !10019

return:                                           ; preds = %if.end.23, %if.then.20, %if.then.2, %if.then
  %11 = load i32, i32* %retval, !dbg !10020
  ret i32 %11, !dbg !10020
}

declare %struct._object* @_Py_bytes_isalnum(i8*, i64) #2

declare %struct._object* @_Py_bytes_isalpha(i8*, i64) #2

declare %struct._object* @_Py_bytes_isdigit(i8*, i64) #2

declare %struct._object* @_Py_bytes_islower(i8*, i64) #2

declare %struct._object* @_Py_bytes_isspace(i8*, i64) #2

declare %struct._object* @_Py_bytes_istitle(i8*, i64) #2

declare %struct._object* @_Py_bytes_isupper(i8*, i64) #2

; Function Attrs: inlinehint nounwind uwtable
define internal %struct._object* @stringlib_bytes_join(%struct._object* %sep, %struct._object* %iterable) #4 {
entry:
  %retval = alloca %struct._object*, align 8
  %sep.addr = alloca %struct._object*, align 8
  %iterable.addr = alloca %struct._object*, align 8
  %sepstr = alloca i8*, align 8
  %seplen = alloca i64, align 8
  %res = alloca %struct._object*, align 8
  %p = alloca i8*, align 8
  %seqlen = alloca i64, align 8
  %sz = alloca i64, align 8
  %i = alloca i64, align 8
  %nbufs = alloca i64, align 8
  %seq = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %buffers = alloca %struct.bufferinfo*, align 8
  %static_buffers = alloca [10 x %struct.bufferinfo], align 16
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp28 = alloca %struct._object*, align 8
  %itemlen = alloca i64, align 8
  %n = alloca i64, align 8
  %q = alloca i8*, align 8
  %n113 = alloca i64, align 8
  %q114 = alloca i8*, align 8
  %_py_decref_tmp128 = alloca %struct._object*, align 8
  store %struct._object* %sep, %struct._object** %sep.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %sep.addr, metadata !1127, metadata !2123), !dbg !10021
  store %struct._object* %iterable, %struct._object** %iterable.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %iterable.addr, metadata !1128, metadata !2123), !dbg !10022
  %0 = bitcast i8** %sepstr to i8*, !dbg !10023
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !10023
  call void @llvm.dbg.declare(metadata i8** %sepstr, metadata !1129, metadata !2123), !dbg !10024
  %1 = load %struct._object*, %struct._object** %sep.addr, align 8, !dbg !10025, !tbaa !2119
  %2 = bitcast %struct._object* %1 to %struct.PyVarObject*, !dbg !10026
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1, !dbg !10027
  %3 = load i64, i64* %ob_size, align 8, !dbg !10027, !tbaa !2239
  %tobool = icmp ne i64 %3, 0, !dbg !10028
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10028

cond.true:                                        ; preds = %entry
  %4 = load %struct._object*, %struct._object** %sep.addr, align 8, !dbg !10029, !tbaa !2119
  %5 = bitcast %struct._object* %4 to %struct.PyByteArrayObject*, !dbg !10031
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %5, i32 0, i32 3, !dbg !10032
  %6 = load i8*, i8** %ob_start, align 8, !dbg !10032, !tbaa !2250
  br label %cond.end, !dbg !10028

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10033

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %6, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !10028
  store i8* %cond, i8** %sepstr, align 8, !dbg !10035, !tbaa !2119
  %7 = bitcast i64* %seplen to i8*, !dbg !10038
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !10038
  call void @llvm.dbg.declare(metadata i64* %seplen, metadata !1130, metadata !2123), !dbg !10039
  %8 = load %struct._object*, %struct._object** %sep.addr, align 8, !dbg !10040, !tbaa !2119
  %9 = bitcast %struct._object* %8 to %struct.PyVarObject*, !dbg !10041
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %9, i32 0, i32 1, !dbg !10042
  %10 = load i64, i64* %ob_size1, align 8, !dbg !10042, !tbaa !2239
  store i64 %10, i64* %seplen, align 8, !dbg !10039, !tbaa !2129
  %11 = bitcast %struct._object** %res to i8*, !dbg !10043
  call void @llvm.lifetime.start(i64 8, i8* %11) #3, !dbg !10043
  call void @llvm.dbg.declare(metadata %struct._object** %res, metadata !1132, metadata !2123), !dbg !10044
  store %struct._object* null, %struct._object** %res, align 8, !dbg !10044, !tbaa !2119
  %12 = bitcast i8** %p to i8*, !dbg !10045
  call void @llvm.lifetime.start(i64 8, i8* %12) #3, !dbg !10045
  call void @llvm.dbg.declare(metadata i8** %p, metadata !1133, metadata !2123), !dbg !10046
  %13 = bitcast i64* %seqlen to i8*, !dbg !10047
  call void @llvm.lifetime.start(i64 8, i8* %13) #3, !dbg !10047
  call void @llvm.dbg.declare(metadata i64* %seqlen, metadata !1134, metadata !2123), !dbg !10048
  store i64 0, i64* %seqlen, align 8, !dbg !10048, !tbaa !2129
  %14 = bitcast i64* %sz to i8*, !dbg !10049
  call void @llvm.lifetime.start(i64 8, i8* %14) #3, !dbg !10049
  call void @llvm.dbg.declare(metadata i64* %sz, metadata !1135, metadata !2123), !dbg !10050
  store i64 0, i64* %sz, align 8, !dbg !10050, !tbaa !2129
  %15 = bitcast i64* %i to i8*, !dbg !10051
  call void @llvm.lifetime.start(i64 8, i8* %15) #3, !dbg !10051
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1136, metadata !2123), !dbg !10052
  %16 = bitcast i64* %nbufs to i8*, !dbg !10051
  call void @llvm.lifetime.start(i64 8, i8* %16) #3, !dbg !10051
  call void @llvm.dbg.declare(metadata i64* %nbufs, metadata !1137, metadata !2123), !dbg !10053
  %17 = bitcast %struct._object** %seq to i8*, !dbg !10054
  call void @llvm.lifetime.start(i64 8, i8* %17) #3, !dbg !10054
  call void @llvm.dbg.declare(metadata %struct._object** %seq, metadata !1138, metadata !2123), !dbg !10055
  %18 = bitcast %struct._object** %item to i8*, !dbg !10054
  call void @llvm.lifetime.start(i64 8, i8* %18) #3, !dbg !10054
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !1139, metadata !2123), !dbg !10056
  %19 = bitcast %struct.bufferinfo** %buffers to i8*, !dbg !10057
  call void @llvm.lifetime.start(i64 8, i8* %19) #3, !dbg !10057
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %buffers, metadata !1140, metadata !2123), !dbg !10058
  store %struct.bufferinfo* null, %struct.bufferinfo** %buffers, align 8, !dbg !10058, !tbaa !2119
  %20 = bitcast [10 x %struct.bufferinfo]* %static_buffers to i8*, !dbg !10059
  call void @llvm.lifetime.start(i64 800, i8* %20) #3, !dbg !10059
  call void @llvm.dbg.declare(metadata [10 x %struct.bufferinfo]* %static_buffers, metadata !1141, metadata !2123), !dbg !10060
  %21 = load %struct._object*, %struct._object** %iterable.addr, align 8, !dbg !10061, !tbaa !2119
  %call = call %struct._object* @PySequence_Fast(%struct._object* %21, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.91, i32 0, i32 0)), !dbg !10062
  store %struct._object* %call, %struct._object** %seq, align 8, !dbg !10063, !tbaa !2119
  %22 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10064, !tbaa !2119
  %cmp = icmp eq %struct._object* %22, null, !dbg !10066
  br i1 %cmp, label %if.then, label %if.end, !dbg !10067

if.then:                                          ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval, !dbg !10068
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.150, !dbg !10068

if.end:                                           ; preds = %cond.end
  %23 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10070, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1, !dbg !10071
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !10071, !tbaa !2203
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 19, !dbg !10072
  %25 = load i64, i64* %tp_flags, align 8, !dbg !10072, !tbaa !3199
  %and = and i64 %25, 33554432, !dbg !10073
  %cmp2 = icmp ne i64 %and, 0, !dbg !10074
  br i1 %cmp2, label %cond.true.3, label %cond.false.5, !dbg !10075

cond.true.3:                                      ; preds = %if.end
  %26 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10076, !tbaa !2119
  %27 = bitcast %struct._object* %26 to %struct.PyVarObject*, !dbg !10077
  %ob_size4 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %27, i32 0, i32 1, !dbg !10078
  %28 = load i64, i64* %ob_size4, align 8, !dbg !10078, !tbaa !2239
  br label %cond.end.7, !dbg !10075

cond.false.5:                                     ; preds = %if.end
  %29 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10079, !tbaa !2119
  %30 = bitcast %struct._object* %29 to %struct.PyVarObject*, !dbg !10080
  %ob_size6 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %30, i32 0, i32 1, !dbg !10081
  %31 = load i64, i64* %ob_size6, align 8, !dbg !10081, !tbaa !2239
  br label %cond.end.7, !dbg !10075

cond.end.7:                                       ; preds = %cond.false.5, %cond.true.3
  %cond8 = phi i64 [ %28, %cond.true.3 ], [ %31, %cond.false.5 ], !dbg !10075
  store i64 %cond8, i64* %seqlen, align 8, !dbg !10082, !tbaa !2129
  %32 = load i64, i64* %seqlen, align 8, !dbg !10083, !tbaa !2129
  %cmp9 = icmp eq i64 %32, 0, !dbg !10084
  br i1 %cmp9, label %if.then.10, label %if.end.16, !dbg !10085

if.then.10:                                       ; preds = %cond.end.7
  br label %do.body, !dbg !10086

do.body:                                          ; preds = %if.then.10
  %33 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10087
  call void @llvm.lifetime.start(i64 8, i8* %33) #3, !dbg !10087
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1145, metadata !2123), !dbg !10089
  %34 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10090, !tbaa !2119
  store %struct._object* %34, %struct._object** %_py_decref_tmp, align 8, !dbg !10089, !tbaa !2119
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10091, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0, !dbg !10093
  %36 = load i64, i64* %ob_refcnt, align 8, !dbg !10094, !tbaa !2195
  %dec = add i64 %36, -1, !dbg !10094
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !10094, !tbaa !2195
  %cmp11 = icmp ne i64 %dec, 0, !dbg !10095
  br i1 %cmp11, label %if.then.12, label %if.else, !dbg !10096

if.then.12:                                       ; preds = %do.body
  br label %if.end.14, !dbg !10097

if.else:                                          ; preds = %do.body
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10099, !tbaa !2119
  %ob_type13 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1, !dbg !10101
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type13, align 8, !dbg !10101, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4, !dbg !10102
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !10102, !tbaa !2205
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10103, !tbaa !2119
  call void %39(%struct._object* %40), !dbg !10104
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.12
  %41 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10105
  call void @llvm.lifetime.end(i64 8, i8* %41) #3, !dbg !10105
  br label %do.cond, !dbg !10107

do.cond:                                          ; preds = %if.end.14
  br label %do.end, !dbg !10108

do.end:                                           ; preds = %do.cond
  %call15 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 0), !dbg !10110
  store %struct._object* %call15, %struct._object** %retval, !dbg !10111
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.150, !dbg !10111

if.end.16:                                        ; preds = %cond.end.7
  %42 = load i64, i64* %seqlen, align 8, !dbg !10112, !tbaa !2129
  %cmp17 = icmp sgt i64 %42, 10, !dbg !10113
  br i1 %cmp17, label %if.then.18, label %if.else.41, !dbg !10114

if.then.18:                                       ; preds = %if.end.16
  %43 = load i64, i64* %seqlen, align 8, !dbg !10115, !tbaa !2129
  %cmp19 = icmp ugt i64 %43, 115292150460684697, !dbg !10116
  br i1 %cmp19, label %cond.true.20, label %cond.false.21, !dbg !10117

cond.true.20:                                     ; preds = %if.then.18
  br label %cond.end.23, !dbg !10118

cond.false.21:                                    ; preds = %if.then.18
  %44 = load i64, i64* %seqlen, align 8, !dbg !10120, !tbaa !2129
  %mul = mul i64 %44, 80, !dbg !10122
  %call22 = call i8* @PyMem_Malloc(i64 %mul), !dbg !10123
  %45 = bitcast i8* %call22 to %struct.bufferinfo*, !dbg !10124
  br label %cond.end.23, !dbg !10117

cond.end.23:                                      ; preds = %cond.false.21, %cond.true.20
  %cond24 = phi %struct.bufferinfo* [ null, %cond.true.20 ], [ %45, %cond.false.21 ], !dbg !10117
  store %struct.bufferinfo* %cond24, %struct.bufferinfo** %buffers, align 8, !dbg !10125, !tbaa !2119
  %46 = load %struct.bufferinfo*, %struct.bufferinfo** %buffers, align 8, !dbg !10128, !tbaa !2119
  %cmp25 = icmp eq %struct.bufferinfo* %46, null, !dbg !10129
  br i1 %cmp25, label %if.then.26, label %if.end.40, !dbg !10130

if.then.26:                                       ; preds = %cond.end.23
  br label %do.body.27, !dbg !10131

do.body.27:                                       ; preds = %if.then.26
  %47 = bitcast %struct._object** %_py_decref_tmp28 to i8*, !dbg !10132
  call void @llvm.lifetime.start(i64 8, i8* %47) #3, !dbg !10132
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp28, metadata !1149, metadata !2123), !dbg !10134
  %48 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10135, !tbaa !2119
  store %struct._object* %48, %struct._object** %_py_decref_tmp28, align 8, !dbg !10134, !tbaa !2119
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8, !dbg !10136, !tbaa !2119
  %ob_refcnt29 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0, !dbg !10138
  %50 = load i64, i64* %ob_refcnt29, align 8, !dbg !10139, !tbaa !2195
  %dec30 = add i64 %50, -1, !dbg !10139
  store i64 %dec30, i64* %ob_refcnt29, align 8, !dbg !10139, !tbaa !2195
  %cmp31 = icmp ne i64 %dec30, 0, !dbg !10140
  br i1 %cmp31, label %if.then.32, label %if.else.33, !dbg !10141

if.then.32:                                       ; preds = %do.body.27
  br label %if.end.36, !dbg !10142

if.else.33:                                       ; preds = %do.body.27
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8, !dbg !10144, !tbaa !2119
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1, !dbg !10146
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8, !dbg !10146, !tbaa !2203
  %tp_dealloc35 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4, !dbg !10147
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc35, align 8, !dbg !10147, !tbaa !2205
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8, !dbg !10148, !tbaa !2119
  call void %53(%struct._object* %54), !dbg !10149
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.33, %if.then.32
  %55 = bitcast %struct._object** %_py_decref_tmp28 to i8*, !dbg !10150
  call void @llvm.lifetime.end(i64 8, i8* %55) #3, !dbg !10150
  br label %do.cond.37, !dbg !10152

do.cond.37:                                       ; preds = %if.end.36
  br label %do.end.38, !dbg !10153

do.end.38:                                        ; preds = %do.cond.37
  %call39 = call %struct._object* @PyErr_NoMemory(), !dbg !10155
  store %struct._object* null, %struct._object** %retval, !dbg !10156
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.150, !dbg !10156

if.end.40:                                        ; preds = %cond.end.23
  br label %if.end.42, !dbg !10157

if.else.41:                                       ; preds = %if.end.16
  %arraydecay = getelementptr inbounds [10 x %struct.bufferinfo], [10 x %struct.bufferinfo]* %static_buffers, i32 0, i32 0, !dbg !10158
  store %struct.bufferinfo* %arraydecay, %struct.bufferinfo** %buffers, align 8, !dbg !10160, !tbaa !2119
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.41, %if.end.40
  store i64 0, i64* %i, align 8, !dbg !10161, !tbaa !2129
  store i64 0, i64* %nbufs, align 8, !dbg !10162, !tbaa !2129
  br label %for.cond, !dbg !10163

for.cond:                                         ; preds = %for.inc, %if.end.42
  %56 = load i64, i64* %i, align 8, !dbg !10164, !tbaa !2129
  %57 = load i64, i64* %seqlen, align 8, !dbg !10167, !tbaa !2129
  %cmp43 = icmp slt i64 %56, %57, !dbg !10168
  br i1 %cmp43, label %for.body, label %for.end, !dbg !10169

for.body:                                         ; preds = %for.cond
  %58 = bitcast i64* %itemlen to i8*, !dbg !10170
  call void @llvm.lifetime.start(i64 8, i8* %58) #3, !dbg !10170
  call void @llvm.dbg.declare(metadata i64* %itemlen, metadata !1155, metadata !2123), !dbg !10171
  %59 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10172, !tbaa !2119
  %ob_type44 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 1, !dbg !10173
  %60 = load %struct._typeobject*, %struct._typeobject** %ob_type44, align 8, !dbg !10173, !tbaa !2203
  %tp_flags45 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 19, !dbg !10174
  %61 = load i64, i64* %tp_flags45, align 8, !dbg !10174, !tbaa !3199
  %and46 = and i64 %61, 33554432, !dbg !10175
  %cmp47 = icmp ne i64 %and46, 0, !dbg !10176
  br i1 %cmp47, label %cond.true.48, label %cond.false.49, !dbg !10177

cond.true.48:                                     ; preds = %for.body
  %62 = load i64, i64* %i, align 8, !dbg !10178, !tbaa !2129
  %63 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10180, !tbaa !2119
  %64 = bitcast %struct._object* %63 to %struct.PyListObject*, !dbg !10181
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %64, i32 0, i32 1, !dbg !10182
  %65 = load %struct._object**, %struct._object*** %ob_item, align 8, !dbg !10182, !tbaa !10183
  %arrayidx = getelementptr %struct._object*, %struct._object** %65, i64 %62, !dbg !10185
  %66 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !10185, !tbaa !2119
  br label %cond.end.52, !dbg !10177

cond.false.49:                                    ; preds = %for.body
  %67 = load i64, i64* %i, align 8, !dbg !10186, !tbaa !2129
  %68 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10188, !tbaa !2119
  %69 = bitcast %struct._object* %68 to %struct.PyTupleObject*, !dbg !10189
  %ob_item50 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %69, i32 0, i32 1, !dbg !10190
  %arrayidx51 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item50, i32 0, i64 %67, !dbg !10191
  %70 = load %struct._object*, %struct._object** %arrayidx51, align 8, !dbg !10191, !tbaa !2119
  br label %cond.end.52, !dbg !10177

cond.end.52:                                      ; preds = %cond.false.49, %cond.true.48
  %cond53 = phi %struct._object* [ %66, %cond.true.48 ], [ %70, %cond.false.49 ], !dbg !10177
  store %struct._object* %cond53, %struct._object** %item, align 8, !dbg !10192, !tbaa !2119
  %71 = load %struct._object*, %struct._object** %item, align 8, !dbg !10195, !tbaa !2119
  %72 = load i64, i64* %i, align 8, !dbg !10197, !tbaa !2129
  %73 = load %struct.bufferinfo*, %struct.bufferinfo** %buffers, align 8, !dbg !10198, !tbaa !2119
  %arrayidx54 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %73, i64 %72, !dbg !10198
  %call55 = call i64 @_getbuffer(%struct._object* %71, %struct.bufferinfo* %arrayidx54), !dbg !10199
  %cmp56 = icmp slt i64 %call55, 0, !dbg !10200
  br i1 %cmp56, label %if.then.57, label %if.end.60, !dbg !10201

if.then.57:                                       ; preds = %cond.end.52
  %74 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !10202, !tbaa !2119
  %75 = load i64, i64* %i, align 8, !dbg !10204, !tbaa !2129
  %76 = load %struct._object*, %struct._object** %item, align 8, !dbg !10205, !tbaa !2119
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 1, !dbg !10206
  %77 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8, !dbg !10206, !tbaa !2203
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %77, i32 0, i32 1, !dbg !10207
  %78 = load i8*, i8** %tp_name, align 8, !dbg !10207, !tbaa !2500
  %call59 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %74, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.92, i32 0, i32 0), i64 %75, i8* %78), !dbg !10208
  store i32 9, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10209

if.end.60:                                        ; preds = %cond.end.52
  %79 = load i64, i64* %i, align 8, !dbg !10210, !tbaa !2129
  %add = add i64 %79, 1, !dbg !10211
  store i64 %add, i64* %nbufs, align 8, !dbg !10212, !tbaa !2129
  %80 = load i64, i64* %i, align 8, !dbg !10213, !tbaa !2129
  %81 = load %struct.bufferinfo*, %struct.bufferinfo** %buffers, align 8, !dbg !10214, !tbaa !2119
  %arrayidx61 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %81, i64 %80, !dbg !10214
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %arrayidx61, i32 0, i32 2, !dbg !10215
  %82 = load i64, i64* %len, align 8, !dbg !10215, !tbaa !2482
  store i64 %82, i64* %itemlen, align 8, !dbg !10216, !tbaa !2129
  %83 = load i64, i64* %itemlen, align 8, !dbg !10217, !tbaa !2129
  %84 = load i64, i64* %sz, align 8, !dbg !10219, !tbaa !2129
  %sub = sub i64 9223372036854775807, %84, !dbg !10220
  %cmp62 = icmp sgt i64 %83, %sub, !dbg !10221
  br i1 %cmp62, label %if.then.63, label %if.end.64, !dbg !10222

if.then.63:                                       ; preds = %if.end.60
  %85 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !10223, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %85, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.93, i32 0, i32 0)), !dbg !10225
  store i32 9, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10226

if.end.64:                                        ; preds = %if.end.60
  %86 = load i64, i64* %itemlen, align 8, !dbg !10227, !tbaa !2129
  %87 = load i64, i64* %sz, align 8, !dbg !10228, !tbaa !2129
  %add65 = add i64 %87, %86, !dbg !10228
  store i64 %add65, i64* %sz, align 8, !dbg !10228, !tbaa !2129
  %88 = load i64, i64* %i, align 8, !dbg !10229, !tbaa !2129
  %cmp66 = icmp ne i64 %88, 0, !dbg !10231
  br i1 %cmp66, label %if.then.67, label %if.end.73, !dbg !10232

if.then.67:                                       ; preds = %if.end.64
  %89 = load i64, i64* %seplen, align 8, !dbg !10233, !tbaa !2129
  %90 = load i64, i64* %sz, align 8, !dbg !10236, !tbaa !2129
  %sub68 = sub i64 9223372036854775807, %90, !dbg !10237
  %cmp69 = icmp sgt i64 %89, %sub68, !dbg !10238
  br i1 %cmp69, label %if.then.70, label %if.end.71, !dbg !10239

if.then.70:                                       ; preds = %if.then.67
  %91 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !10240, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %91, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.93, i32 0, i32 0)), !dbg !10242
  store i32 9, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10243

if.end.71:                                        ; preds = %if.then.67
  %92 = load i64, i64* %seplen, align 8, !dbg !10244, !tbaa !2129
  %93 = load i64, i64* %sz, align 8, !dbg !10245, !tbaa !2129
  %add72 = add i64 %93, %92, !dbg !10245
  store i64 %add72, i64* %sz, align 8, !dbg !10245, !tbaa !2129
  br label %if.end.73, !dbg !10246

if.end.73:                                        ; preds = %if.end.71, %if.end.64
  %94 = load i64, i64* %seqlen, align 8, !dbg !10247, !tbaa !2129
  %95 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10249, !tbaa !2119
  %ob_type74 = getelementptr inbounds %struct._object, %struct._object* %95, i32 0, i32 1, !dbg !10250
  %96 = load %struct._typeobject*, %struct._typeobject** %ob_type74, align 8, !dbg !10250, !tbaa !2203
  %tp_flags75 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %96, i32 0, i32 19, !dbg !10251
  %97 = load i64, i64* %tp_flags75, align 8, !dbg !10251, !tbaa !3199
  %and76 = and i64 %97, 33554432, !dbg !10252
  %cmp77 = icmp ne i64 %and76, 0, !dbg !10253
  br i1 %cmp77, label %cond.true.78, label %cond.false.80, !dbg !10254

cond.true.78:                                     ; preds = %if.end.73
  %98 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10255, !tbaa !2119
  %99 = bitcast %struct._object* %98 to %struct.PyVarObject*, !dbg !10257
  %ob_size79 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %99, i32 0, i32 1, !dbg !10258
  %100 = load i64, i64* %ob_size79, align 8, !dbg !10258, !tbaa !2239
  br label %cond.end.82, !dbg !10254

cond.false.80:                                    ; preds = %if.end.73
  %101 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10259, !tbaa !2119
  %102 = bitcast %struct._object* %101 to %struct.PyVarObject*, !dbg !10261
  %ob_size81 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %102, i32 0, i32 1, !dbg !10262
  %103 = load i64, i64* %ob_size81, align 8, !dbg !10262, !tbaa !2239
  br label %cond.end.82, !dbg !10254

cond.end.82:                                      ; preds = %cond.false.80, %cond.true.78
  %cond83 = phi i64 [ %100, %cond.true.78 ], [ %103, %cond.false.80 ], !dbg !10254
  %cmp84 = icmp ne i64 %94, %cond83, !dbg !10263
  br i1 %cmp84, label %if.then.85, label %if.end.86, !dbg !10266

if.then.85:                                       ; preds = %cond.end.82
  %104 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8, !dbg !10267, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %104, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.94, i32 0, i32 0)), !dbg !10269
  store i32 9, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10270

if.end.86:                                        ; preds = %cond.end.82
  store i32 0, i32* %cleanup.dest.slot, !dbg !10271
  br label %cleanup, !dbg !10271

cleanup:                                          ; preds = %if.end.86, %if.then.85, %if.then.70, %if.then.63, %if.then.57
  %105 = bitcast i64* %itemlen to i8*, !dbg !10272
  call void @llvm.lifetime.end(i64 8, i8* %105) #3, !dbg !10272
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock

NodeBlock:                                        ; preds = %cleanup
  %Pivot = icmp slt i32 %cleanup.dest, 9
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %cleanup.dest, 9
  br i1 %SwitchLeaf2, label %error, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %for.inc, !dbg !10273

for.inc:                                          ; preds = %cleanup.cont
  %106 = load i64, i64* %i, align 8, !dbg !10274, !tbaa !2129
  %inc = add i64 %106, 1, !dbg !10274
  store i64 %inc, i64* %i, align 8, !dbg !10274, !tbaa !2129
  br label %for.cond, !dbg !10275

for.end:                                          ; preds = %for.cond
  %107 = load i64, i64* %sz, align 8, !dbg !10276, !tbaa !2129
  %call87 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %107), !dbg !10277
  store %struct._object* %call87, %struct._object** %res, align 8, !dbg !10278, !tbaa !2119
  %108 = load %struct._object*, %struct._object** %res, align 8, !dbg !10279, !tbaa !2119
  %cmp88 = icmp eq %struct._object* %108, null, !dbg !10281
  br i1 %cmp88, label %if.then.89, label %if.end.90, !dbg !10282

if.then.89:                                       ; preds = %for.end
  br label %error, !dbg !10283

if.end.90:                                        ; preds = %for.end
  %109 = load %struct._object*, %struct._object** %res, align 8, !dbg !10284, !tbaa !2119
  %110 = bitcast %struct._object* %109 to %struct.PyVarObject*, !dbg !10285
  %ob_size91 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %110, i32 0, i32 1, !dbg !10286
  %111 = load i64, i64* %ob_size91, align 8, !dbg !10286, !tbaa !2239
  %tobool92 = icmp ne i64 %111, 0, !dbg !10287
  br i1 %tobool92, label %cond.true.93, label %cond.false.95, !dbg !10287

cond.true.93:                                     ; preds = %if.end.90
  %112 = load %struct._object*, %struct._object** %res, align 8, !dbg !10288, !tbaa !2119
  %113 = bitcast %struct._object* %112 to %struct.PyByteArrayObject*, !dbg !10289
  %ob_start94 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %113, i32 0, i32 3, !dbg !10290
  %114 = load i8*, i8** %ob_start94, align 8, !dbg !10290, !tbaa !2250
  br label %cond.end.96, !dbg !10287

cond.false.95:                                    ; preds = %if.end.90
  br label %cond.end.96, !dbg !10291

cond.end.96:                                      ; preds = %cond.false.95, %cond.true.93
  %cond97 = phi i8* [ %114, %cond.true.93 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.95 ], !dbg !10287
  store i8* %cond97, i8** %p, align 8, !dbg !10292, !tbaa !2119
  %115 = load i64, i64* %seplen, align 8, !dbg !10293, !tbaa !2129
  %tobool98 = icmp ne i64 %115, 0, !dbg !10293
  br i1 %tobool98, label %if.end.109, label %if.then.99, !dbg !10294

if.then.99:                                       ; preds = %cond.end.96
  store i64 0, i64* %i, align 8, !dbg !10295, !tbaa !2129
  br label %for.cond.100, !dbg !10296

for.cond.100:                                     ; preds = %for.inc.106, %if.then.99
  %116 = load i64, i64* %i, align 8, !dbg !10297, !tbaa !2129
  %117 = load i64, i64* %nbufs, align 8, !dbg !10300, !tbaa !2129
  %cmp101 = icmp slt i64 %116, %117, !dbg !10301
  br i1 %cmp101, label %for.body.102, label %for.end.108, !dbg !10302

for.body.102:                                     ; preds = %for.cond.100
  %118 = bitcast i64* %n to i8*, !dbg !10303
  call void @llvm.lifetime.start(i64 8, i8* %118) #3, !dbg !10303
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1159, metadata !2123), !dbg !10304
  %119 = load i64, i64* %i, align 8, !dbg !10305, !tbaa !2129
  %120 = load %struct.bufferinfo*, %struct.bufferinfo** %buffers, align 8, !dbg !10306, !tbaa !2119
  %arrayidx103 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %120, i64 %119, !dbg !10306
  %len104 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %arrayidx103, i32 0, i32 2, !dbg !10307
  %121 = load i64, i64* %len104, align 8, !dbg !10307, !tbaa !2482
  store i64 %121, i64* %n, align 8, !dbg !10304, !tbaa !2129
  %122 = bitcast i8** %q to i8*, !dbg !10308
  call void @llvm.lifetime.start(i64 8, i8* %122) #3, !dbg !10308
  call void @llvm.dbg.declare(metadata i8** %q, metadata !1165, metadata !2123), !dbg !10309
  %123 = load i64, i64* %i, align 8, !dbg !10310, !tbaa !2129
  %124 = load %struct.bufferinfo*, %struct.bufferinfo** %buffers, align 8, !dbg !10311, !tbaa !2119
  %arrayidx105 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %124, i64 %123, !dbg !10311
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %arrayidx105, i32 0, i32 0, !dbg !10312
  %125 = load i8*, i8** %buf, align 8, !dbg !10312, !tbaa !2529
  store i8* %125, i8** %q, align 8, !dbg !10309, !tbaa !2119
  %126 = load i8*, i8** %p, align 8, !dbg !10313, !tbaa !2119
  %127 = load i8*, i8** %q, align 8, !dbg !10314, !tbaa !2119
  %128 = load i64, i64* %n, align 8, !dbg !10315, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %126, i8* %127, i64 %128, i32 1, i1 false), !dbg !10316
  %129 = load i64, i64* %n, align 8, !dbg !10317, !tbaa !2129
  %130 = load i8*, i8** %p, align 8, !dbg !10318, !tbaa !2119
  %add.ptr = getelementptr i8, i8* %130, i64 %129, !dbg !10318
  store i8* %add.ptr, i8** %p, align 8, !dbg !10318, !tbaa !2119
  %131 = bitcast i8** %q to i8*, !dbg !10319
  call void @llvm.lifetime.end(i64 8, i8* %131) #3, !dbg !10319
  %132 = bitcast i64* %n to i8*, !dbg !10319
  call void @llvm.lifetime.end(i64 8, i8* %132) #3, !dbg !10319
  br label %for.inc.106, !dbg !10320

for.inc.106:                                      ; preds = %for.body.102
  %133 = load i64, i64* %i, align 8, !dbg !10321, !tbaa !2129
  %inc107 = add i64 %133, 1, !dbg !10321
  store i64 %inc107, i64* %i, align 8, !dbg !10321, !tbaa !2129
  br label %for.cond.100, !dbg !10322

for.end.108:                                      ; preds = %for.cond.100
  br label %done, !dbg !10323

if.end.109:                                       ; preds = %cond.end.96
  store i64 0, i64* %i, align 8, !dbg !10324, !tbaa !2129
  br label %for.cond.110, !dbg !10325

for.cond.110:                                     ; preds = %for.inc.124, %if.end.109
  %134 = load i64, i64* %i, align 8, !dbg !10326, !tbaa !2129
  %135 = load i64, i64* %nbufs, align 8, !dbg !10329, !tbaa !2129
  %cmp111 = icmp slt i64 %134, %135, !dbg !10330
  br i1 %cmp111, label %for.body.112, label %for.end.126, !dbg !10331

for.body.112:                                     ; preds = %for.cond.110
  %136 = bitcast i64* %n113 to i8*, !dbg !10332
  call void @llvm.lifetime.start(i64 8, i8* %136) #3, !dbg !10332
  call void @llvm.dbg.declare(metadata i64* %n113, metadata !1166, metadata !2123), !dbg !10333
  %137 = bitcast i8** %q114 to i8*, !dbg !10334
  call void @llvm.lifetime.start(i64 8, i8* %137) #3, !dbg !10334
  call void @llvm.dbg.declare(metadata i8** %q114, metadata !1170, metadata !2123), !dbg !10335
  %138 = load i64, i64* %i, align 8, !dbg !10336, !tbaa !2129
  %tobool115 = icmp ne i64 %138, 0, !dbg !10336
  br i1 %tobool115, label %if.then.116, label %if.end.118, !dbg !10338

if.then.116:                                      ; preds = %for.body.112
  %139 = load i8*, i8** %p, align 8, !dbg !10339, !tbaa !2119
  %140 = load i8*, i8** %sepstr, align 8, !dbg !10341, !tbaa !2119
  %141 = load i64, i64* %seplen, align 8, !dbg !10342, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %139, i8* %140, i64 %141, i32 1, i1 false), !dbg !10343
  %142 = load i64, i64* %seplen, align 8, !dbg !10344, !tbaa !2129
  %143 = load i8*, i8** %p, align 8, !dbg !10345, !tbaa !2119
  %add.ptr117 = getelementptr i8, i8* %143, i64 %142, !dbg !10345
  store i8* %add.ptr117, i8** %p, align 8, !dbg !10345, !tbaa !2119
  br label %if.end.118, !dbg !10346

if.end.118:                                       ; preds = %if.then.116, %for.body.112
  %144 = load i64, i64* %i, align 8, !dbg !10347, !tbaa !2129
  %145 = load %struct.bufferinfo*, %struct.bufferinfo** %buffers, align 8, !dbg !10348, !tbaa !2119
  %arrayidx119 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %145, i64 %144, !dbg !10348
  %len120 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %arrayidx119, i32 0, i32 2, !dbg !10349
  %146 = load i64, i64* %len120, align 8, !dbg !10349, !tbaa !2482
  store i64 %146, i64* %n113, align 8, !dbg !10350, !tbaa !2129
  %147 = load i64, i64* %i, align 8, !dbg !10351, !tbaa !2129
  %148 = load %struct.bufferinfo*, %struct.bufferinfo** %buffers, align 8, !dbg !10352, !tbaa !2119
  %arrayidx121 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %148, i64 %147, !dbg !10352
  %buf122 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %arrayidx121, i32 0, i32 0, !dbg !10353
  %149 = load i8*, i8** %buf122, align 8, !dbg !10353, !tbaa !2529
  store i8* %149, i8** %q114, align 8, !dbg !10354, !tbaa !2119
  %150 = load i8*, i8** %p, align 8, !dbg !10355, !tbaa !2119
  %151 = load i8*, i8** %q114, align 8, !dbg !10356, !tbaa !2119
  %152 = load i64, i64* %n113, align 8, !dbg !10357, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %150, i8* %151, i64 %152, i32 1, i1 false), !dbg !10358
  %153 = load i64, i64* %n113, align 8, !dbg !10359, !tbaa !2129
  %154 = load i8*, i8** %p, align 8, !dbg !10360, !tbaa !2119
  %add.ptr123 = getelementptr i8, i8* %154, i64 %153, !dbg !10360
  store i8* %add.ptr123, i8** %p, align 8, !dbg !10360, !tbaa !2119
  %155 = bitcast i8** %q114 to i8*, !dbg !10361
  call void @llvm.lifetime.end(i64 8, i8* %155) #3, !dbg !10361
  %156 = bitcast i64* %n113 to i8*, !dbg !10361
  call void @llvm.lifetime.end(i64 8, i8* %156) #3, !dbg !10361
  br label %for.inc.124, !dbg !10362

for.inc.124:                                      ; preds = %if.end.118
  %157 = load i64, i64* %i, align 8, !dbg !10363, !tbaa !2129
  %inc125 = add i64 %157, 1, !dbg !10363
  store i64 %inc125, i64* %i, align 8, !dbg !10363, !tbaa !2129
  br label %for.cond.110, !dbg !10364

for.end.126:                                      ; preds = %for.cond.110
  br label %done, !dbg !10365

error:                                            ; preds = %LeafBlock.1, %if.then.89
  store %struct._object* null, %struct._object** %res, align 8, !dbg !10366, !tbaa !2119
  br label %done, !dbg !10367

done:                                             ; preds = %error, %for.end.126, %for.end.108
  br label %do.body.127, !dbg !10368

do.body.127:                                      ; preds = %done
  %158 = bitcast %struct._object** %_py_decref_tmp128 to i8*, !dbg !10369
  call void @llvm.lifetime.start(i64 8, i8* %158) #3, !dbg !10369
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp128, metadata !1171, metadata !2123), !dbg !10371
  %159 = load %struct._object*, %struct._object** %seq, align 8, !dbg !10372, !tbaa !2119
  store %struct._object* %159, %struct._object** %_py_decref_tmp128, align 8, !dbg !10371, !tbaa !2119
  %160 = load %struct._object*, %struct._object** %_py_decref_tmp128, align 8, !dbg !10373, !tbaa !2119
  %ob_refcnt129 = getelementptr inbounds %struct._object, %struct._object* %160, i32 0, i32 0, !dbg !10375
  %161 = load i64, i64* %ob_refcnt129, align 8, !dbg !10376, !tbaa !2195
  %dec130 = add i64 %161, -1, !dbg !10376
  store i64 %dec130, i64* %ob_refcnt129, align 8, !dbg !10376, !tbaa !2195
  %cmp131 = icmp ne i64 %dec130, 0, !dbg !10377
  br i1 %cmp131, label %if.then.132, label %if.else.133, !dbg !10378

if.then.132:                                      ; preds = %do.body.127
  br label %if.end.136, !dbg !10379

if.else.133:                                      ; preds = %do.body.127
  %162 = load %struct._object*, %struct._object** %_py_decref_tmp128, align 8, !dbg !10381, !tbaa !2119
  %ob_type134 = getelementptr inbounds %struct._object, %struct._object* %162, i32 0, i32 1, !dbg !10383
  %163 = load %struct._typeobject*, %struct._typeobject** %ob_type134, align 8, !dbg !10383, !tbaa !2203
  %tp_dealloc135 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %163, i32 0, i32 4, !dbg !10384
  %164 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc135, align 8, !dbg !10384, !tbaa !2205
  %165 = load %struct._object*, %struct._object** %_py_decref_tmp128, align 8, !dbg !10385, !tbaa !2119
  call void %164(%struct._object* %165), !dbg !10386
  br label %if.end.136

if.end.136:                                       ; preds = %if.else.133, %if.then.132
  %166 = bitcast %struct._object** %_py_decref_tmp128 to i8*, !dbg !10387
  call void @llvm.lifetime.end(i64 8, i8* %166) #3, !dbg !10387
  br label %do.cond.137, !dbg !10389

do.cond.137:                                      ; preds = %if.end.136
  br label %do.end.138, !dbg !10390

do.end.138:                                       ; preds = %do.cond.137
  store i64 0, i64* %i, align 8, !dbg !10392, !tbaa !2129
  br label %for.cond.139, !dbg !10394

for.cond.139:                                     ; preds = %for.inc.143, %do.end.138
  %167 = load i64, i64* %i, align 8, !dbg !10395, !tbaa !2129
  %168 = load i64, i64* %nbufs, align 8, !dbg !10399, !tbaa !2129
  %cmp140 = icmp slt i64 %167, %168, !dbg !10400
  br i1 %cmp140, label %for.body.141, label %for.end.145, !dbg !10401

for.body.141:                                     ; preds = %for.cond.139
  %169 = load i64, i64* %i, align 8, !dbg !10402, !tbaa !2129
  %170 = load %struct.bufferinfo*, %struct.bufferinfo** %buffers, align 8, !dbg !10403, !tbaa !2119
  %arrayidx142 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %170, i64 %169, !dbg !10403
  call void @PyBuffer_Release(%struct.bufferinfo* %arrayidx142), !dbg !10404
  br label %for.inc.143, !dbg !10404

for.inc.143:                                      ; preds = %for.body.141
  %171 = load i64, i64* %i, align 8, !dbg !10405, !tbaa !2129
  %inc144 = add i64 %171, 1, !dbg !10405
  store i64 %inc144, i64* %i, align 8, !dbg !10405, !tbaa !2129
  br label %for.cond.139, !dbg !10406

for.end.145:                                      ; preds = %for.cond.139
  %172 = load %struct.bufferinfo*, %struct.bufferinfo** %buffers, align 8, !dbg !10407, !tbaa !2119
  %arraydecay146 = getelementptr inbounds [10 x %struct.bufferinfo], [10 x %struct.bufferinfo]* %static_buffers, i32 0, i32 0, !dbg !10409
  %cmp147 = icmp ne %struct.bufferinfo* %172, %arraydecay146, !dbg !10410
  br i1 %cmp147, label %if.then.148, label %if.end.149, !dbg !10411

if.then.148:                                      ; preds = %for.end.145
  %173 = load %struct.bufferinfo*, %struct.bufferinfo** %buffers, align 8, !dbg !10412, !tbaa !2119
  %174 = bitcast %struct.bufferinfo* %173 to i8*, !dbg !10412
  call void @PyMem_Free(i8* %174), !dbg !10413
  br label %if.end.149, !dbg !10413

if.end.149:                                       ; preds = %if.then.148, %for.end.145
  %175 = load %struct._object*, %struct._object** %res, align 8, !dbg !10414, !tbaa !2119
  store %struct._object* %175, %struct._object** %retval, !dbg !10415
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.150, !dbg !10415

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %cleanup.150

cleanup.150:                                      ; preds = %NewDefault, %if.end.149, %do.end.38, %do.end, %if.then
  %176 = bitcast [10 x %struct.bufferinfo]* %static_buffers to i8*, !dbg !10416
  call void @llvm.lifetime.end(i64 800, i8* %176) #3, !dbg !10416
  %177 = bitcast %struct.bufferinfo** %buffers to i8*, !dbg !10416
  call void @llvm.lifetime.end(i64 8, i8* %177) #3, !dbg !10416
  %178 = bitcast %struct._object** %item to i8*, !dbg !10416
  call void @llvm.lifetime.end(i64 8, i8* %178) #3, !dbg !10416
  %179 = bitcast %struct._object** %seq to i8*, !dbg !10416
  call void @llvm.lifetime.end(i64 8, i8* %179) #3, !dbg !10416
  %180 = bitcast i64* %nbufs to i8*, !dbg !10416
  call void @llvm.lifetime.end(i64 8, i8* %180) #3, !dbg !10416
  %181 = bitcast i64* %i to i8*, !dbg !10416
  call void @llvm.lifetime.end(i64 8, i8* %181) #3, !dbg !10416
  %182 = bitcast i64* %sz to i8*, !dbg !10416
  call void @llvm.lifetime.end(i64 8, i8* %182) #3, !dbg !10416
  %183 = bitcast i64* %seqlen to i8*, !dbg !10416
  call void @llvm.lifetime.end(i64 8, i8* %183) #3, !dbg !10416
  %184 = bitcast i8** %p to i8*, !dbg !10416
  call void @llvm.lifetime.end(i64 8, i8* %184) #3, !dbg !10416
  %185 = bitcast %struct._object** %res to i8*, !dbg !10416
  call void @llvm.lifetime.end(i64 8, i8* %185) #3, !dbg !10416
  %186 = bitcast i64* %seplen to i8*, !dbg !10416
  call void @llvm.lifetime.end(i64 8, i8* %186) #3, !dbg !10416
  %187 = bitcast i8** %sepstr to i8*, !dbg !10416
  call void @llvm.lifetime.end(i64 8, i8* %187) #3, !dbg !10416
  %188 = load %struct._object*, %struct._object** %retval, !dbg !10416
  ret %struct._object* %188, !dbg !10416
}

declare %struct._object* @PySequence_Fast(%struct._object*, i8*) #2

declare i8* @PyMem_Malloc(i64) #2

declare void @PyMem_Free(i8*) #2

declare void @_Py_bytes_lower(i8*, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal i64 @lstrip_helper(i8* %myptr, i64 %mysize, i8* %argptr, i64 %argsize) #0 {
entry:
  %myptr.addr = alloca i8*, align 8
  %mysize.addr = alloca i64, align 8
  %argptr.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i8* %myptr, i8** %myptr.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %myptr.addr, metadata !1199, metadata !2123), !dbg !10417
  store i64 %mysize, i64* %mysize.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %mysize.addr, metadata !1200, metadata !2123), !dbg !10418
  store i8* %argptr, i8** %argptr.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %argptr.addr, metadata !1201, metadata !2123), !dbg !10419
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !1202, metadata !2123), !dbg !10420
  %0 = bitcast i64* %i to i8*, !dbg !10421
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !10421
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1203, metadata !2123), !dbg !10422
  store i64 0, i64* %i, align 8, !dbg !10422, !tbaa !2129
  br label %while.cond, !dbg !10423

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i64, i64* %i, align 8, !dbg !10424, !tbaa !2129
  %2 = load i64, i64* %mysize.addr, align 8, !dbg !10427, !tbaa !2129
  %cmp = icmp slt i64 %1, %2, !dbg !10428
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !10429

land.rhs:                                         ; preds = %while.cond
  %3 = load i8*, i8** %argptr.addr, align 8, !dbg !10430, !tbaa !2119
  %4 = load i64, i64* %i, align 8, !dbg !10432, !tbaa !2129
  %5 = load i8*, i8** %myptr.addr, align 8, !dbg !10433, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %5, i64 %4, !dbg !10433
  %6 = load i8, i8* %arrayidx, align 1, !dbg !10433, !tbaa !2233
  %conv = zext i8 %6 to i32, !dbg !10434
  %7 = load i64, i64* %argsize.addr, align 8, !dbg !10435, !tbaa !2129
  %call = call i8* @memchr(i8* %3, i32 %conv, i64 %7) #8, !dbg !10436
  %tobool = icmp ne i8* %call, null, !dbg !10429
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %8, label %while.body, label %while.end, !dbg !10437

while.body:                                       ; preds = %land.end
  %9 = load i64, i64* %i, align 8, !dbg !10439, !tbaa !2129
  %inc = add i64 %9, 1, !dbg !10439
  store i64 %inc, i64* %i, align 8, !dbg !10439, !tbaa !2129
  br label %while.cond, !dbg !10423

while.end:                                        ; preds = %land.end
  %10 = load i64, i64* %i, align 8, !dbg !10440, !tbaa !2129
  %11 = bitcast i64* %i to i8*, !dbg !10441
  call void @llvm.lifetime.end(i64 8, i8* %11) #3, !dbg !10441
  ret i64 %10, !dbg !10442
}

declare %struct._object* @_Py_bytes_maketrans(%struct._object*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal %struct._object* @stringlib_partition(%struct._object* %str_obj, i8* %str, i64 %str_len, %struct._object* %sep_obj, i8* %sep, i64 %sep_len) #4 {
entry:
  %retval = alloca %struct._object*, align 8
  %str_obj.addr = alloca %struct._object*, align 8
  %str.addr = alloca i8*, align 8
  %str_len.addr = alloca i64, align 8
  %sep_obj.addr = alloca %struct._object*, align 8
  %sep.addr = alloca i8*, align 8
  %sep_len.addr = alloca i64, align 8
  %out = alloca %struct._object*, align 8
  %pos = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp34 = alloca %struct._object*, align 8
  store %struct._object* %str_obj, %struct._object** %str_obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %str_obj.addr, metadata !1221, metadata !2123), !dbg !10443
  store i8* %str, i8** %str.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !1222, metadata !2123), !dbg !10444
  store i64 %str_len, i64* %str_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %str_len.addr, metadata !1223, metadata !2123), !dbg !10445
  store %struct._object* %sep_obj, %struct._object** %sep_obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %sep_obj.addr, metadata !1224, metadata !2123), !dbg !10446
  store i8* %sep, i8** %sep.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %sep.addr, metadata !1225, metadata !2123), !dbg !10447
  store i64 %sep_len, i64* %sep_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %sep_len.addr, metadata !1226, metadata !2123), !dbg !10448
  %0 = bitcast %struct._object** %out to i8*, !dbg !10449
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !10449
  call void @llvm.dbg.declare(metadata %struct._object** %out, metadata !1227, metadata !2123), !dbg !10450
  %1 = bitcast i64* %pos to i8*, !dbg !10451
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !10451
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !1228, metadata !2123), !dbg !10452
  %2 = load i64, i64* %sep_len.addr, align 8, !dbg !10453, !tbaa !2129
  %cmp = icmp eq i64 %2, 0, !dbg !10455
  br i1 %cmp, label %if.then, label %if.end, !dbg !10456

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !10457, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.98, i32 0, i32 0)), !dbg !10459
  store %struct._object* null, %struct._object** %retval, !dbg !10460
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10460

if.end:                                           ; preds = %entry
  %call = call %struct._object* @PyTuple_New(i64 3), !dbg !10461
  store %struct._object* %call, %struct._object** %out, align 8, !dbg !10462, !tbaa !2119
  %4 = load %struct._object*, %struct._object** %out, align 8, !dbg !10463, !tbaa !2119
  %tobool = icmp ne %struct._object* %4, null, !dbg !10463
  br i1 %tobool, label %if.end.2, label %if.then.1, !dbg !10465

if.then.1:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !10466
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10466

if.end.2:                                         ; preds = %if.end
  %5 = load i8*, i8** %str.addr, align 8, !dbg !10467, !tbaa !2119
  %6 = load i64, i64* %str_len.addr, align 8, !dbg !10468, !tbaa !2129
  %7 = load i8*, i8** %sep.addr, align 8, !dbg !10469, !tbaa !2119
  %8 = load i64, i64* %sep_len.addr, align 8, !dbg !10470, !tbaa !2129
  %call3 = call i64 @fastsearch(i8* %5, i64 %6, i8* %7, i64 %8, i64 -1, i32 1), !dbg !10471
  store i64 %call3, i64* %pos, align 8, !dbg !10472, !tbaa !2129
  %9 = load i64, i64* %pos, align 8, !dbg !10473, !tbaa !2129
  %cmp4 = icmp slt i64 %9, 0, !dbg !10474
  br i1 %cmp4, label %if.then.5, label %if.end.20, !dbg !10475

if.then.5:                                        ; preds = %if.end.2
  %10 = load i8*, i8** %str.addr, align 8, !dbg !10476, !tbaa !2119
  %11 = load i64, i64* %str_len.addr, align 8, !dbg !10477, !tbaa !2129
  %call6 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %10, i64 %11), !dbg !10478
  %12 = load %struct._object*, %struct._object** %out, align 8, !dbg !10479, !tbaa !2119
  %13 = bitcast %struct._object* %12 to %struct.PyTupleObject*, !dbg !10480
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %13, i32 0, i32 1, !dbg !10481
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !10482
  store %struct._object* %call6, %struct._object** %arrayidx, align 8, !dbg !10483, !tbaa !2119
  %call7 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 0), !dbg !10484
  %14 = load %struct._object*, %struct._object** %out, align 8, !dbg !10485, !tbaa !2119
  %15 = bitcast %struct._object* %14 to %struct.PyTupleObject*, !dbg !10486
  %ob_item8 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %15, i32 0, i32 1, !dbg !10487
  %arrayidx9 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item8, i32 0, i64 1, !dbg !10488
  store %struct._object* %call7, %struct._object** %arrayidx9, align 8, !dbg !10489, !tbaa !2119
  %call10 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 0), !dbg !10490
  %16 = load %struct._object*, %struct._object** %out, align 8, !dbg !10491, !tbaa !2119
  %17 = bitcast %struct._object* %16 to %struct.PyTupleObject*, !dbg !10492
  %ob_item11 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %17, i32 0, i32 1, !dbg !10493
  %arrayidx12 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item11, i32 0, i64 2, !dbg !10494
  store %struct._object* %call10, %struct._object** %arrayidx12, align 8, !dbg !10495, !tbaa !2119
  %call13 = call %struct._object* @PyErr_Occurred(), !dbg !10496
  %tobool14 = icmp ne %struct._object* %call13, null, !dbg !10496
  br i1 %tobool14, label %if.then.15, label %if.end.19, !dbg !10497

if.then.15:                                       ; preds = %if.then.5
  br label %do.body, !dbg !10498

do.body:                                          ; preds = %if.then.15
  %18 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10499
  call void @llvm.lifetime.start(i64 8, i8* %18) #3, !dbg !10499
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1229, metadata !2123), !dbg !10501
  %19 = load %struct._object*, %struct._object** %out, align 8, !dbg !10502, !tbaa !2119
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8, !dbg !10501, !tbaa !2119
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10503, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0, !dbg !10505
  %21 = load i64, i64* %ob_refcnt, align 8, !dbg !10506, !tbaa !2195
  %dec = add i64 %21, -1, !dbg !10506
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !10506, !tbaa !2195
  %cmp16 = icmp ne i64 %dec, 0, !dbg !10507
  br i1 %cmp16, label %if.then.17, label %if.else, !dbg !10508

if.then.17:                                       ; preds = %do.body
  br label %if.end.18, !dbg !10509

if.else:                                          ; preds = %do.body
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10511, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1, !dbg !10513
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !10513, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4, !dbg !10514
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !10514, !tbaa !2205
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10515, !tbaa !2119
  call void %24(%struct._object* %25), !dbg !10516
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.17
  %26 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10517
  call void @llvm.lifetime.end(i64 8, i8* %26) #3, !dbg !10517
  br label %do.cond, !dbg !10519

do.cond:                                          ; preds = %if.end.18
  br label %do.end, !dbg !10520

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !10522
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10522

if.end.19:                                        ; preds = %if.then.5
  %27 = load %struct._object*, %struct._object** %out, align 8, !dbg !10523, !tbaa !2119
  store %struct._object* %27, %struct._object** %retval, !dbg !10524
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10524

if.end.20:                                        ; preds = %if.end.2
  %28 = load i8*, i8** %str.addr, align 8, !dbg !10525, !tbaa !2119
  %29 = load i64, i64* %pos, align 8, !dbg !10526, !tbaa !2129
  %call21 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %28, i64 %29), !dbg !10527
  %30 = load %struct._object*, %struct._object** %out, align 8, !dbg !10528, !tbaa !2119
  %31 = bitcast %struct._object* %30 to %struct.PyTupleObject*, !dbg !10529
  %ob_item22 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %31, i32 0, i32 1, !dbg !10530
  %arrayidx23 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item22, i32 0, i64 0, !dbg !10531
  store %struct._object* %call21, %struct._object** %arrayidx23, align 8, !dbg !10532, !tbaa !2119
  %32 = load %struct._object*, %struct._object** %sep_obj.addr, align 8, !dbg !10533, !tbaa !2119
  %ob_refcnt24 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0, !dbg !10534
  %33 = load i64, i64* %ob_refcnt24, align 8, !dbg !10535, !tbaa !2195
  %inc = add i64 %33, 1, !dbg !10535
  store i64 %inc, i64* %ob_refcnt24, align 8, !dbg !10535, !tbaa !2195
  %34 = load %struct._object*, %struct._object** %sep_obj.addr, align 8, !dbg !10536, !tbaa !2119
  %35 = load %struct._object*, %struct._object** %out, align 8, !dbg !10537, !tbaa !2119
  %36 = bitcast %struct._object* %35 to %struct.PyTupleObject*, !dbg !10538
  %ob_item25 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %36, i32 0, i32 1, !dbg !10539
  %arrayidx26 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item25, i32 0, i64 1, !dbg !10540
  store %struct._object* %34, %struct._object** %arrayidx26, align 8, !dbg !10541, !tbaa !2119
  %37 = load i64, i64* %sep_len.addr, align 8, !dbg !10542, !tbaa !2129
  %38 = load i64, i64* %pos, align 8, !dbg !10543, !tbaa !2129
  %add = add i64 %38, %37, !dbg !10543
  store i64 %add, i64* %pos, align 8, !dbg !10543, !tbaa !2129
  %39 = load i8*, i8** %str.addr, align 8, !dbg !10544, !tbaa !2119
  %40 = load i64, i64* %pos, align 8, !dbg !10545, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %39, i64 %40, !dbg !10546
  %41 = load i64, i64* %str_len.addr, align 8, !dbg !10547, !tbaa !2129
  %42 = load i64, i64* %pos, align 8, !dbg !10548, !tbaa !2129
  %sub = sub i64 %41, %42, !dbg !10549
  %call27 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr, i64 %sub), !dbg !10550
  %43 = load %struct._object*, %struct._object** %out, align 8, !dbg !10551, !tbaa !2119
  %44 = bitcast %struct._object* %43 to %struct.PyTupleObject*, !dbg !10552
  %ob_item28 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %44, i32 0, i32 1, !dbg !10553
  %arrayidx29 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item28, i32 0, i64 2, !dbg !10554
  store %struct._object* %call27, %struct._object** %arrayidx29, align 8, !dbg !10555, !tbaa !2119
  %call30 = call %struct._object* @PyErr_Occurred(), !dbg !10556
  %tobool31 = icmp ne %struct._object* %call30, null, !dbg !10556
  br i1 %tobool31, label %if.then.32, label %if.end.45, !dbg !10557

if.then.32:                                       ; preds = %if.end.20
  br label %do.body.33, !dbg !10558

do.body.33:                                       ; preds = %if.then.32
  %45 = bitcast %struct._object** %_py_decref_tmp34 to i8*, !dbg !10559
  call void @llvm.lifetime.start(i64 8, i8* %45) #3, !dbg !10559
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp34, metadata !1235, metadata !2123), !dbg !10561
  %46 = load %struct._object*, %struct._object** %out, align 8, !dbg !10562, !tbaa !2119
  store %struct._object* %46, %struct._object** %_py_decref_tmp34, align 8, !dbg !10561, !tbaa !2119
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8, !dbg !10563, !tbaa !2119
  %ob_refcnt35 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 0, !dbg !10565
  %48 = load i64, i64* %ob_refcnt35, align 8, !dbg !10566, !tbaa !2195
  %dec36 = add i64 %48, -1, !dbg !10566
  store i64 %dec36, i64* %ob_refcnt35, align 8, !dbg !10566, !tbaa !2195
  %cmp37 = icmp ne i64 %dec36, 0, !dbg !10567
  br i1 %cmp37, label %if.then.38, label %if.else.39, !dbg !10568

if.then.38:                                       ; preds = %do.body.33
  br label %if.end.42, !dbg !10569

if.else.39:                                       ; preds = %do.body.33
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8, !dbg !10571, !tbaa !2119
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1, !dbg !10573
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8, !dbg !10573, !tbaa !2203
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 4, !dbg !10574
  %51 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8, !dbg !10574, !tbaa !2205
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8, !dbg !10575, !tbaa !2119
  call void %51(%struct._object* %52), !dbg !10576
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  %53 = bitcast %struct._object** %_py_decref_tmp34 to i8*, !dbg !10577
  call void @llvm.lifetime.end(i64 8, i8* %53) #3, !dbg !10577
  br label %do.cond.43, !dbg !10579

do.cond.43:                                       ; preds = %if.end.42
  br label %do.end.44, !dbg !10580

do.end.44:                                        ; preds = %do.cond.43
  store %struct._object* null, %struct._object** %retval, !dbg !10582
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10582

if.end.45:                                        ; preds = %if.end.20
  %54 = load %struct._object*, %struct._object** %out, align 8, !dbg !10583, !tbaa !2119
  store %struct._object* %54, %struct._object** %retval, !dbg !10584
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10584

cleanup:                                          ; preds = %if.end.45, %do.end.44, %if.end.19, %do.end, %if.then.1, %if.then
  %55 = bitcast i64* %pos to i8*, !dbg !10585
  call void @llvm.lifetime.end(i64 8, i8* %55) #3, !dbg !10585
  %56 = bitcast %struct._object** %out to i8*, !dbg !10585
  call void @llvm.lifetime.end(i64 8, i8* %56) #3, !dbg !10585
  %57 = load %struct._object*, %struct._object** %retval, !dbg !10585
  ret %struct._object* %57, !dbg !10585
}

declare %struct._object* @PyTuple_New(i64) #2

; Function Attrs: nounwind uwtable
define internal %struct.PyByteArrayObject* @replace(%struct.PyByteArrayObject* %self, i8* %from_s, i64 %from_len, i8* %to_s, i64 %to_len, i64 %maxcount) #0 {
entry:
  %retval = alloca %struct.PyByteArrayObject*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %from_s.addr = alloca i8*, align 8
  %from_len.addr = alloca i64, align 8
  %to_s.addr = alloca i8*, align 8
  %to_len.addr = alloca i64, align 8
  %maxcount.addr = alloca i64, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1269, metadata !2123), !dbg !10586
  store i8* %from_s, i8** %from_s.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %from_s.addr, metadata !1270, metadata !2123), !dbg !10587
  store i64 %from_len, i64* %from_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %from_len.addr, metadata !1271, metadata !2123), !dbg !10588
  store i8* %to_s, i8** %to_s.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %to_s.addr, metadata !1272, metadata !2123), !dbg !10589
  store i64 %to_len, i64* %to_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %to_len.addr, metadata !1273, metadata !2123), !dbg !10590
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1274, metadata !2123), !dbg !10591
  %0 = load i64, i64* %maxcount.addr, align 8, !dbg !10592, !tbaa !2129
  %cmp = icmp slt i64 %0, 0, !dbg !10594
  br i1 %cmp, label %if.then, label %if.else, !dbg !10595

if.then:                                          ; preds = %entry
  store i64 9223372036854775807, i64* %maxcount.addr, align 8, !dbg !10596, !tbaa !2129
  br label %if.end.4, !dbg !10598

if.else:                                          ; preds = %entry
  %1 = load i64, i64* %maxcount.addr, align 8, !dbg !10599, !tbaa !2129
  %cmp1 = icmp eq i64 %1, 0, !dbg !10601
  br i1 %cmp1, label %if.then.3, label %lor.lhs.false, !dbg !10602

lor.lhs.false:                                    ; preds = %if.else
  %2 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10603, !tbaa !2119
  %3 = bitcast %struct.PyByteArrayObject* %2 to %struct.PyVarObject*, !dbg !10605
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1, !dbg !10606
  %4 = load i64, i64* %ob_size, align 8, !dbg !10606, !tbaa !2239
  %cmp2 = icmp eq i64 %4, 0, !dbg !10607
  br i1 %cmp2, label %if.then.3, label %if.end, !dbg !10608

if.then.3:                                        ; preds = %lor.lhs.false, %if.else
  %5 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10609, !tbaa !2119
  %call = call %struct.PyByteArrayObject* @return_self(%struct.PyByteArrayObject* %5), !dbg !10611
  store %struct.PyByteArrayObject* %call, %struct.PyByteArrayObject** %retval, !dbg !10612
  br label %return, !dbg !10612

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %if.then
  %6 = load i64, i64* %maxcount.addr, align 8, !dbg !10613, !tbaa !2129
  %cmp5 = icmp eq i64 %6, 0, !dbg !10615
  br i1 %cmp5, label %if.then.9, label %lor.lhs.false.6, !dbg !10616

lor.lhs.false.6:                                  ; preds = %if.end.4
  %7 = load i64, i64* %from_len.addr, align 8, !dbg !10617, !tbaa !2129
  %cmp7 = icmp eq i64 %7, 0, !dbg !10618
  br i1 %cmp7, label %land.lhs.true, label %if.end.11, !dbg !10619

land.lhs.true:                                    ; preds = %lor.lhs.false.6
  %8 = load i64, i64* %to_len.addr, align 8, !dbg !10620, !tbaa !2129
  %cmp8 = icmp eq i64 %8, 0, !dbg !10622
  br i1 %cmp8, label %if.then.9, label %if.end.11, !dbg !10623

if.then.9:                                        ; preds = %land.lhs.true, %if.end.4
  %9 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10624, !tbaa !2119
  %call10 = call %struct.PyByteArrayObject* @return_self(%struct.PyByteArrayObject* %9), !dbg !10626
  store %struct.PyByteArrayObject* %call10, %struct.PyByteArrayObject** %retval, !dbg !10627
  br label %return, !dbg !10627

if.end.11:                                        ; preds = %land.lhs.true, %lor.lhs.false.6
  %10 = load i64, i64* %from_len.addr, align 8, !dbg !10628, !tbaa !2129
  %cmp12 = icmp eq i64 %10, 0, !dbg !10630
  br i1 %cmp12, label %if.then.13, label %if.end.15, !dbg !10631

if.then.13:                                       ; preds = %if.end.11
  %11 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10632, !tbaa !2119
  %12 = load i8*, i8** %to_s.addr, align 8, !dbg !10634, !tbaa !2119
  %13 = load i64, i64* %to_len.addr, align 8, !dbg !10635, !tbaa !2129
  %14 = load i64, i64* %maxcount.addr, align 8, !dbg !10636, !tbaa !2129
  %call14 = call %struct.PyByteArrayObject* @replace_interleave(%struct.PyByteArrayObject* %11, i8* %12, i64 %13, i64 %14), !dbg !10637
  store %struct.PyByteArrayObject* %call14, %struct.PyByteArrayObject** %retval, !dbg !10638
  br label %return, !dbg !10638

if.end.15:                                        ; preds = %if.end.11
  %15 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10639, !tbaa !2119
  %16 = bitcast %struct.PyByteArrayObject* %15 to %struct.PyVarObject*, !dbg !10641
  %ob_size16 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %16, i32 0, i32 1, !dbg !10642
  %17 = load i64, i64* %ob_size16, align 8, !dbg !10642, !tbaa !2239
  %cmp17 = icmp eq i64 %17, 0, !dbg !10643
  br i1 %cmp17, label %if.then.18, label %if.end.20, !dbg !10644

if.then.18:                                       ; preds = %if.end.15
  %18 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10645, !tbaa !2119
  %call19 = call %struct.PyByteArrayObject* @return_self(%struct.PyByteArrayObject* %18), !dbg !10647
  store %struct.PyByteArrayObject* %call19, %struct.PyByteArrayObject** %retval, !dbg !10648
  br label %return, !dbg !10648

if.end.20:                                        ; preds = %if.end.15
  %19 = load i64, i64* %to_len.addr, align 8, !dbg !10649, !tbaa !2129
  %cmp21 = icmp eq i64 %19, 0, !dbg !10651
  br i1 %cmp21, label %if.then.22, label %if.end.28, !dbg !10652

if.then.22:                                       ; preds = %if.end.20
  %20 = load i64, i64* %from_len.addr, align 8, !dbg !10653, !tbaa !2129
  %cmp23 = icmp eq i64 %20, 1, !dbg !10656
  br i1 %cmp23, label %if.then.24, label %if.else.26, !dbg !10657

if.then.24:                                       ; preds = %if.then.22
  %21 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10658, !tbaa !2119
  %22 = load i8*, i8** %from_s.addr, align 8, !dbg !10660, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %22, i64 0, !dbg !10660
  %23 = load i8, i8* %arrayidx, align 1, !dbg !10660, !tbaa !2233
  %24 = load i64, i64* %maxcount.addr, align 8, !dbg !10661, !tbaa !2129
  %call25 = call %struct.PyByteArrayObject* @replace_delete_single_character(%struct.PyByteArrayObject* %21, i8 signext %23, i64 %24), !dbg !10662
  store %struct.PyByteArrayObject* %call25, %struct.PyByteArrayObject** %retval, !dbg !10663
  br label %return, !dbg !10663

if.else.26:                                       ; preds = %if.then.22
  %25 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10664, !tbaa !2119
  %26 = load i8*, i8** %from_s.addr, align 8, !dbg !10666, !tbaa !2119
  %27 = load i64, i64* %from_len.addr, align 8, !dbg !10667, !tbaa !2129
  %28 = load i64, i64* %maxcount.addr, align 8, !dbg !10668, !tbaa !2129
  %call27 = call %struct.PyByteArrayObject* @replace_delete_substring(%struct.PyByteArrayObject* %25, i8* %26, i64 %27, i64 %28), !dbg !10669
  store %struct.PyByteArrayObject* %call27, %struct.PyByteArrayObject** %retval, !dbg !10670
  br label %return, !dbg !10670

if.end.28:                                        ; preds = %if.end.20
  %29 = load i64, i64* %from_len.addr, align 8, !dbg !10671, !tbaa !2129
  %30 = load i64, i64* %to_len.addr, align 8, !dbg !10673, !tbaa !2129
  %cmp29 = icmp eq i64 %29, %30, !dbg !10674
  br i1 %cmp29, label %if.then.30, label %if.end.38, !dbg !10675

if.then.30:                                       ; preds = %if.end.28
  %31 = load i64, i64* %from_len.addr, align 8, !dbg !10676, !tbaa !2129
  %cmp31 = icmp eq i64 %31, 1, !dbg !10679
  br i1 %cmp31, label %if.then.32, label %if.else.36, !dbg !10680

if.then.32:                                       ; preds = %if.then.30
  %32 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10681, !tbaa !2119
  %33 = load i8*, i8** %from_s.addr, align 8, !dbg !10683, !tbaa !2119
  %arrayidx33 = getelementptr i8, i8* %33, i64 0, !dbg !10683
  %34 = load i8, i8* %arrayidx33, align 1, !dbg !10683, !tbaa !2233
  %35 = load i8*, i8** %to_s.addr, align 8, !dbg !10684, !tbaa !2119
  %arrayidx34 = getelementptr i8, i8* %35, i64 0, !dbg !10684
  %36 = load i8, i8* %arrayidx34, align 1, !dbg !10684, !tbaa !2233
  %37 = load i64, i64* %maxcount.addr, align 8, !dbg !10685, !tbaa !2129
  %call35 = call %struct.PyByteArrayObject* @replace_single_character_in_place(%struct.PyByteArrayObject* %32, i8 signext %34, i8 signext %36, i64 %37), !dbg !10686
  store %struct.PyByteArrayObject* %call35, %struct.PyByteArrayObject** %retval, !dbg !10687
  br label %return, !dbg !10687

if.else.36:                                       ; preds = %if.then.30
  %38 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10688, !tbaa !2119
  %39 = load i8*, i8** %from_s.addr, align 8, !dbg !10690, !tbaa !2119
  %40 = load i64, i64* %from_len.addr, align 8, !dbg !10691, !tbaa !2129
  %41 = load i8*, i8** %to_s.addr, align 8, !dbg !10692, !tbaa !2119
  %42 = load i64, i64* %to_len.addr, align 8, !dbg !10693, !tbaa !2129
  %43 = load i64, i64* %maxcount.addr, align 8, !dbg !10694, !tbaa !2129
  %call37 = call %struct.PyByteArrayObject* @replace_substring_in_place(%struct.PyByteArrayObject* %38, i8* %39, i64 %40, i8* %41, i64 %42, i64 %43), !dbg !10695
  store %struct.PyByteArrayObject* %call37, %struct.PyByteArrayObject** %retval, !dbg !10696
  br label %return, !dbg !10696

if.end.38:                                        ; preds = %if.end.28
  %44 = load i64, i64* %from_len.addr, align 8, !dbg !10697, !tbaa !2129
  %cmp39 = icmp eq i64 %44, 1, !dbg !10699
  br i1 %cmp39, label %if.then.40, label %if.else.43, !dbg !10700

if.then.40:                                       ; preds = %if.end.38
  %45 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10701, !tbaa !2119
  %46 = load i8*, i8** %from_s.addr, align 8, !dbg !10703, !tbaa !2119
  %arrayidx41 = getelementptr i8, i8* %46, i64 0, !dbg !10703
  %47 = load i8, i8* %arrayidx41, align 1, !dbg !10703, !tbaa !2233
  %48 = load i8*, i8** %to_s.addr, align 8, !dbg !10704, !tbaa !2119
  %49 = load i64, i64* %to_len.addr, align 8, !dbg !10705, !tbaa !2129
  %50 = load i64, i64* %maxcount.addr, align 8, !dbg !10706, !tbaa !2129
  %call42 = call %struct.PyByteArrayObject* @replace_single_character(%struct.PyByteArrayObject* %45, i8 signext %47, i8* %48, i64 %49, i64 %50), !dbg !10707
  store %struct.PyByteArrayObject* %call42, %struct.PyByteArrayObject** %retval, !dbg !10708
  br label %return, !dbg !10708

if.else.43:                                       ; preds = %if.end.38
  %51 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10709, !tbaa !2119
  %52 = load i8*, i8** %from_s.addr, align 8, !dbg !10711, !tbaa !2119
  %53 = load i64, i64* %from_len.addr, align 8, !dbg !10712, !tbaa !2129
  %54 = load i8*, i8** %to_s.addr, align 8, !dbg !10713, !tbaa !2119
  %55 = load i64, i64* %to_len.addr, align 8, !dbg !10714, !tbaa !2129
  %56 = load i64, i64* %maxcount.addr, align 8, !dbg !10715, !tbaa !2129
  %call44 = call %struct.PyByteArrayObject* @replace_substring(%struct.PyByteArrayObject* %51, i8* %52, i64 %53, i8* %54, i64 %55, i64 %56), !dbg !10716
  store %struct.PyByteArrayObject* %call44, %struct.PyByteArrayObject** %retval, !dbg !10717
  br label %return, !dbg !10717

return:                                           ; preds = %if.else.43, %if.then.40, %if.else.36, %if.then.32, %if.else.26, %if.then.24, %if.then.18, %if.then.13, %if.then.9, %if.then.3
  %57 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %retval, !dbg !10718
  ret %struct.PyByteArrayObject* %57, !dbg !10718
}

; Function Attrs: nounwind uwtable
define internal %struct.PyByteArrayObject* @return_self(%struct.PyByteArrayObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1279, metadata !2123), !dbg !10719
  %0 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10720, !tbaa !2119
  %1 = bitcast %struct.PyByteArrayObject* %0 to %struct.PyVarObject*, !dbg !10721
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1, !dbg !10722
  %2 = load i64, i64* %ob_size, align 8, !dbg !10722, !tbaa !2239
  %tobool = icmp ne i64 %2, 0, !dbg !10723
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10723

cond.true:                                        ; preds = %entry
  %3 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10724, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %3, i32 0, i32 3, !dbg !10726
  %4 = load i8*, i8** %ob_start, align 8, !dbg !10726, !tbaa !2250
  br label %cond.end, !dbg !10723

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10727

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !10723
  %5 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10729, !tbaa !2119
  %6 = bitcast %struct.PyByteArrayObject* %5 to %struct.PyVarObject*, !dbg !10730
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1, !dbg !10731
  %7 = load i64, i64* %ob_size1, align 8, !dbg !10731, !tbaa !2239
  %call = call %struct._object* @PyByteArray_FromStringAndSize(i8* %cond, i64 %7), !dbg !10732
  %8 = bitcast %struct._object* %call to %struct.PyByteArrayObject*, !dbg !10733
  ret %struct.PyByteArrayObject* %8, !dbg !10734
}

; Function Attrs: nounwind uwtable
define internal %struct.PyByteArrayObject* @replace_interleave(%struct.PyByteArrayObject* %self, i8* %to_s, i64 %to_len, i64 %maxcount) #0 {
entry:
  %retval = alloca %struct.PyByteArrayObject*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %to_s.addr = alloca i8*, align 8
  %to_len.addr = alloca i64, align 8
  %maxcount.addr = alloca i64, align 8
  %self_s = alloca i8*, align 8
  %result_s = alloca i8*, align 8
  %self_len = alloca i64, align 8
  %result_len = alloca i64, align 8
  %count = alloca i64, align 8
  %i = alloca i64, align 8
  %result = alloca %struct.PyByteArrayObject*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1284, metadata !2123), !dbg !10735
  store i8* %to_s, i8** %to_s.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %to_s.addr, metadata !1285, metadata !2123), !dbg !10736
  store i64 %to_len, i64* %to_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %to_len.addr, metadata !1286, metadata !2123), !dbg !10737
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1287, metadata !2123), !dbg !10738
  %0 = bitcast i8** %self_s to i8*, !dbg !10739
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !10739
  call void @llvm.dbg.declare(metadata i8** %self_s, metadata !1288, metadata !2123), !dbg !10740
  %1 = bitcast i8** %result_s to i8*, !dbg !10739
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !10739
  call void @llvm.dbg.declare(metadata i8** %result_s, metadata !1289, metadata !2123), !dbg !10741
  %2 = bitcast i64* %self_len to i8*, !dbg !10742
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !10742
  call void @llvm.dbg.declare(metadata i64* %self_len, metadata !1290, metadata !2123), !dbg !10743
  %3 = bitcast i64* %result_len to i8*, !dbg !10742
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !10742
  call void @llvm.dbg.declare(metadata i64* %result_len, metadata !1291, metadata !2123), !dbg !10744
  %4 = bitcast i64* %count to i8*, !dbg !10745
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !10745
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1292, metadata !2123), !dbg !10746
  %5 = bitcast i64* %i to i8*, !dbg !10745
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !10745
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1293, metadata !2123), !dbg !10747
  %6 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !10748
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !10748
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %result, metadata !1294, metadata !2123), !dbg !10749
  %7 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10750, !tbaa !2119
  %8 = bitcast %struct.PyByteArrayObject* %7 to %struct.PyVarObject*, !dbg !10751
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !10752
  %9 = load i64, i64* %ob_size, align 8, !dbg !10752, !tbaa !2239
  store i64 %9, i64* %self_len, align 8, !dbg !10753, !tbaa !2129
  %10 = load i64, i64* %maxcount.addr, align 8, !dbg !10754, !tbaa !2129
  %11 = load i64, i64* %self_len, align 8, !dbg !10756, !tbaa !2129
  %cmp = icmp sle i64 %10, %11, !dbg !10757
  br i1 %cmp, label %if.then, label %if.else, !dbg !10758

if.then:                                          ; preds = %entry
  %12 = load i64, i64* %maxcount.addr, align 8, !dbg !10759, !tbaa !2129
  store i64 %12, i64* %count, align 8, !dbg !10760, !tbaa !2129
  br label %if.end, !dbg !10761

if.else:                                          ; preds = %entry
  %13 = load i64, i64* %self_len, align 8, !dbg !10762, !tbaa !2129
  %add = add i64 %13, 1, !dbg !10763
  store i64 %add, i64* %count, align 8, !dbg !10764, !tbaa !2129
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load i64, i64* %to_len.addr, align 8, !dbg !10765, !tbaa !2129
  %15 = load i64, i64* %self_len, align 8, !dbg !10767, !tbaa !2129
  %sub = sub i64 9223372036854775807, %15, !dbg !10768
  %16 = load i64, i64* %count, align 8, !dbg !10769, !tbaa !2129
  %div = sdiv i64 %sub, %16, !dbg !10770
  %cmp1 = icmp sgt i64 %14, %div, !dbg !10771
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !10772

if.then.2:                                        ; preds = %if.end
  %17 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !10773, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %17, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.104, i32 0, i32 0)), !dbg !10775
  store %struct.PyByteArrayObject* null, %struct.PyByteArrayObject** %retval, !dbg !10776
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10776

if.end.3:                                         ; preds = %if.end
  %18 = load i64, i64* %count, align 8, !dbg !10777, !tbaa !2129
  %19 = load i64, i64* %to_len.addr, align 8, !dbg !10778, !tbaa !2129
  %mul = mul i64 %18, %19, !dbg !10779
  %20 = load i64, i64* %self_len, align 8, !dbg !10780, !tbaa !2129
  %add4 = add i64 %mul, %20, !dbg !10781
  store i64 %add4, i64* %result_len, align 8, !dbg !10782, !tbaa !2129
  %21 = load i64, i64* %result_len, align 8, !dbg !10783, !tbaa !2129
  %call = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %21), !dbg !10785
  %22 = bitcast %struct._object* %call to %struct.PyByteArrayObject*, !dbg !10786
  store %struct.PyByteArrayObject* %22, %struct.PyByteArrayObject** %result, align 8, !dbg !10787, !tbaa !2119
  %tobool = icmp ne %struct.PyByteArrayObject* %22, null, !dbg !10787
  br i1 %tobool, label %if.end.6, label %if.then.5, !dbg !10788

if.then.5:                                        ; preds = %if.end.3
  store %struct.PyByteArrayObject* null, %struct.PyByteArrayObject** %retval, !dbg !10789
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10789

if.end.6:                                         ; preds = %if.end.3
  %23 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10790, !tbaa !2119
  %24 = bitcast %struct.PyByteArrayObject* %23 to %struct.PyVarObject*, !dbg !10791
  %ob_size7 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %24, i32 0, i32 1, !dbg !10792
  %25 = load i64, i64* %ob_size7, align 8, !dbg !10792, !tbaa !2239
  %tobool8 = icmp ne i64 %25, 0, !dbg !10793
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !10793

cond.true:                                        ; preds = %if.end.6
  %26 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10794, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %26, i32 0, i32 3, !dbg !10796
  %27 = load i8*, i8** %ob_start, align 8, !dbg !10796, !tbaa !2250
  br label %cond.end, !dbg !10793

cond.false:                                       ; preds = %if.end.6
  br label %cond.end, !dbg !10797

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %27, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !10793
  store i8* %cond, i8** %self_s, align 8, !dbg !10799, !tbaa !2119
  %28 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !10802, !tbaa !2119
  %29 = bitcast %struct.PyByteArrayObject* %28 to %struct.PyVarObject*, !dbg !10803
  %ob_size9 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %29, i32 0, i32 1, !dbg !10804
  %30 = load i64, i64* %ob_size9, align 8, !dbg !10804, !tbaa !2239
  %tobool10 = icmp ne i64 %30, 0, !dbg !10805
  br i1 %tobool10, label %cond.true.11, label %cond.false.13, !dbg !10805

cond.true.11:                                     ; preds = %cond.end
  %31 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !10806, !tbaa !2119
  %ob_start12 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %31, i32 0, i32 3, !dbg !10807
  %32 = load i8*, i8** %ob_start12, align 8, !dbg !10807, !tbaa !2250
  br label %cond.end.14, !dbg !10805

cond.false.13:                                    ; preds = %cond.end
  br label %cond.end.14, !dbg !10808

cond.end.14:                                      ; preds = %cond.false.13, %cond.true.11
  %cond15 = phi i8* [ %32, %cond.true.11 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.13 ], !dbg !10805
  store i8* %cond15, i8** %result_s, align 8, !dbg !10809, !tbaa !2119
  %33 = load i8*, i8** %result_s, align 8, !dbg !10810, !tbaa !2119
  %34 = load i8*, i8** %to_s.addr, align 8, !dbg !10811, !tbaa !2119
  %35 = load i64, i64* %to_len.addr, align 8, !dbg !10812, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %34, i64 %35, i32 1, i1 false), !dbg !10813
  %36 = load i64, i64* %to_len.addr, align 8, !dbg !10814, !tbaa !2129
  %37 = load i8*, i8** %result_s, align 8, !dbg !10815, !tbaa !2119
  %add.ptr = getelementptr i8, i8* %37, i64 %36, !dbg !10815
  store i8* %add.ptr, i8** %result_s, align 8, !dbg !10815, !tbaa !2119
  %38 = load i64, i64* %count, align 8, !dbg !10816, !tbaa !2129
  %sub16 = sub i64 %38, 1, !dbg !10816
  store i64 %sub16, i64* %count, align 8, !dbg !10816, !tbaa !2129
  store i64 0, i64* %i, align 8, !dbg !10817, !tbaa !2129
  br label %for.cond, !dbg !10819

for.cond:                                         ; preds = %for.inc, %cond.end.14
  %39 = load i64, i64* %i, align 8, !dbg !10820, !tbaa !2129
  %40 = load i64, i64* %count, align 8, !dbg !10824, !tbaa !2129
  %cmp17 = icmp slt i64 %39, %40, !dbg !10825
  br i1 %cmp17, label %for.body, label %for.end, !dbg !10826

for.body:                                         ; preds = %for.cond
  %41 = load i8*, i8** %self_s, align 8, !dbg !10827, !tbaa !2119
  %incdec.ptr = getelementptr i8, i8* %41, i32 1, !dbg !10827
  store i8* %incdec.ptr, i8** %self_s, align 8, !dbg !10827, !tbaa !2119
  %42 = load i8, i8* %41, align 1, !dbg !10829, !tbaa !2233
  %43 = load i8*, i8** %result_s, align 8, !dbg !10830, !tbaa !2119
  %incdec.ptr18 = getelementptr i8, i8* %43, i32 1, !dbg !10830
  store i8* %incdec.ptr18, i8** %result_s, align 8, !dbg !10830, !tbaa !2119
  store i8 %42, i8* %43, align 1, !dbg !10831, !tbaa !2233
  %44 = load i8*, i8** %result_s, align 8, !dbg !10832, !tbaa !2119
  %45 = load i8*, i8** %to_s.addr, align 8, !dbg !10833, !tbaa !2119
  %46 = load i64, i64* %to_len.addr, align 8, !dbg !10834, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %44, i8* %45, i64 %46, i32 1, i1 false), !dbg !10835
  %47 = load i64, i64* %to_len.addr, align 8, !dbg !10836, !tbaa !2129
  %48 = load i8*, i8** %result_s, align 8, !dbg !10837, !tbaa !2119
  %add.ptr19 = getelementptr i8, i8* %48, i64 %47, !dbg !10837
  store i8* %add.ptr19, i8** %result_s, align 8, !dbg !10837, !tbaa !2119
  br label %for.inc, !dbg !10838

for.inc:                                          ; preds = %for.body
  %49 = load i64, i64* %i, align 8, !dbg !10839, !tbaa !2129
  %inc = add i64 %49, 1, !dbg !10839
  store i64 %inc, i64* %i, align 8, !dbg !10839, !tbaa !2129
  br label %for.cond, !dbg !10840

for.end:                                          ; preds = %for.cond
  %50 = load i8*, i8** %result_s, align 8, !dbg !10841, !tbaa !2119
  %51 = load i8*, i8** %self_s, align 8, !dbg !10842, !tbaa !2119
  %52 = load i64, i64* %self_len, align 8, !dbg !10843, !tbaa !2129
  %53 = load i64, i64* %i, align 8, !dbg !10844, !tbaa !2129
  %sub20 = sub i64 %52, %53, !dbg !10845
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %51, i64 %sub20, i32 1, i1 false), !dbg !10846
  %54 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !10847, !tbaa !2119
  store %struct.PyByteArrayObject* %54, %struct.PyByteArrayObject** %retval, !dbg !10848
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10848

cleanup:                                          ; preds = %for.end, %if.then.5, %if.then.2
  %55 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !10849
  call void @llvm.lifetime.end(i64 8, i8* %55) #3, !dbg !10849
  %56 = bitcast i64* %i to i8*, !dbg !10849
  call void @llvm.lifetime.end(i64 8, i8* %56) #3, !dbg !10849
  %57 = bitcast i64* %count to i8*, !dbg !10849
  call void @llvm.lifetime.end(i64 8, i8* %57) #3, !dbg !10849
  %58 = bitcast i64* %result_len to i8*, !dbg !10849
  call void @llvm.lifetime.end(i64 8, i8* %58) #3, !dbg !10849
  %59 = bitcast i64* %self_len to i8*, !dbg !10849
  call void @llvm.lifetime.end(i64 8, i8* %59) #3, !dbg !10849
  %60 = bitcast i8** %result_s to i8*, !dbg !10849
  call void @llvm.lifetime.end(i64 8, i8* %60) #3, !dbg !10849
  %61 = bitcast i8** %self_s to i8*, !dbg !10849
  call void @llvm.lifetime.end(i64 8, i8* %61) #3, !dbg !10849
  %62 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %retval, !dbg !10849
  ret %struct.PyByteArrayObject* %62, !dbg !10849
}

; Function Attrs: nounwind uwtable
define internal %struct.PyByteArrayObject* @replace_delete_single_character(%struct.PyByteArrayObject* %self, i8 signext %from_c, i64 %maxcount) #0 {
entry:
  %retval = alloca %struct.PyByteArrayObject*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %from_c.addr = alloca i8, align 1
  %maxcount.addr = alloca i64, align 8
  %self_s = alloca i8*, align 8
  %result_s = alloca i8*, align 8
  %start = alloca i8*, align 8
  %next = alloca i8*, align 8
  %end = alloca i8*, align 8
  %self_len = alloca i64, align 8
  %result_len = alloca i64, align 8
  %count = alloca i64, align 8
  %result = alloca %struct.PyByteArrayObject*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1299, metadata !2123), !dbg !10850
  store i8 %from_c, i8* %from_c.addr, align 1, !tbaa !2233
  call void @llvm.dbg.declare(metadata i8* %from_c.addr, metadata !1300, metadata !2123), !dbg !10851
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1301, metadata !2123), !dbg !10852
  %0 = bitcast i8** %self_s to i8*, !dbg !10853
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !10853
  call void @llvm.dbg.declare(metadata i8** %self_s, metadata !1302, metadata !2123), !dbg !10854
  %1 = bitcast i8** %result_s to i8*, !dbg !10853
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !10853
  call void @llvm.dbg.declare(metadata i8** %result_s, metadata !1303, metadata !2123), !dbg !10855
  %2 = bitcast i8** %start to i8*, !dbg !10856
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !10856
  call void @llvm.dbg.declare(metadata i8** %start, metadata !1304, metadata !2123), !dbg !10857
  %3 = bitcast i8** %next to i8*, !dbg !10856
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !10856
  call void @llvm.dbg.declare(metadata i8** %next, metadata !1305, metadata !2123), !dbg !10858
  %4 = bitcast i8** %end to i8*, !dbg !10856
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !10856
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1306, metadata !2123), !dbg !10859
  %5 = bitcast i64* %self_len to i8*, !dbg !10860
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !10860
  call void @llvm.dbg.declare(metadata i64* %self_len, metadata !1307, metadata !2123), !dbg !10861
  %6 = bitcast i64* %result_len to i8*, !dbg !10860
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !10860
  call void @llvm.dbg.declare(metadata i64* %result_len, metadata !1308, metadata !2123), !dbg !10862
  %7 = bitcast i64* %count to i8*, !dbg !10863
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !10863
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1309, metadata !2123), !dbg !10864
  %8 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !10865
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !10865
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %result, metadata !1310, metadata !2123), !dbg !10866
  %9 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10867, !tbaa !2119
  %10 = bitcast %struct.PyByteArrayObject* %9 to %struct.PyVarObject*, !dbg !10868
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %10, i32 0, i32 1, !dbg !10869
  %11 = load i64, i64* %ob_size, align 8, !dbg !10869, !tbaa !2239
  store i64 %11, i64* %self_len, align 8, !dbg !10870, !tbaa !2129
  %12 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10871, !tbaa !2119
  %13 = bitcast %struct.PyByteArrayObject* %12 to %struct.PyVarObject*, !dbg !10872
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %13, i32 0, i32 1, !dbg !10873
  %14 = load i64, i64* %ob_size1, align 8, !dbg !10873, !tbaa !2239
  %tobool = icmp ne i64 %14, 0, !dbg !10874
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10874

cond.true:                                        ; preds = %entry
  %15 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10875, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %15, i32 0, i32 3, !dbg !10877
  %16 = load i8*, i8** %ob_start, align 8, !dbg !10877, !tbaa !2250
  br label %cond.end, !dbg !10874

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10878

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %16, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !10874
  store i8* %cond, i8** %self_s, align 8, !dbg !10880, !tbaa !2119
  %17 = load i8*, i8** %self_s, align 8, !dbg !10883, !tbaa !2119
  %18 = load i64, i64* %self_len, align 8, !dbg !10884, !tbaa !2129
  %19 = load i8, i8* %from_c.addr, align 1, !dbg !10885, !tbaa !2233
  %20 = load i64, i64* %maxcount.addr, align 8, !dbg !10886, !tbaa !2129
  %call = call i64 @countchar(i8* %17, i64 %18, i8 signext %19, i64 %20), !dbg !10887
  store i64 %call, i64* %count, align 8, !dbg !10888, !tbaa !2129
  %21 = load i64, i64* %count, align 8, !dbg !10889, !tbaa !2129
  %cmp = icmp eq i64 %21, 0, !dbg !10891
  br i1 %cmp, label %if.then, label %if.end, !dbg !10892

if.then:                                          ; preds = %cond.end
  %22 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10893, !tbaa !2119
  %call2 = call %struct.PyByteArrayObject* @return_self(%struct.PyByteArrayObject* %22), !dbg !10895
  store %struct.PyByteArrayObject* %call2, %struct.PyByteArrayObject** %retval, !dbg !10896
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10896

if.end:                                           ; preds = %cond.end
  %23 = load i64, i64* %self_len, align 8, !dbg !10897, !tbaa !2129
  %24 = load i64, i64* %count, align 8, !dbg !10898, !tbaa !2129
  %sub = sub i64 %23, %24, !dbg !10899
  store i64 %sub, i64* %result_len, align 8, !dbg !10900, !tbaa !2129
  %25 = load i64, i64* %result_len, align 8, !dbg !10901, !tbaa !2129
  %call3 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %25), !dbg !10903
  %26 = bitcast %struct._object* %call3 to %struct.PyByteArrayObject*, !dbg !10904
  store %struct.PyByteArrayObject* %26, %struct.PyByteArrayObject** %result, align 8, !dbg !10905, !tbaa !2119
  %cmp4 = icmp eq %struct.PyByteArrayObject* %26, null, !dbg !10906
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !10907

if.then.5:                                        ; preds = %if.end
  store %struct.PyByteArrayObject* null, %struct.PyByteArrayObject** %retval, !dbg !10908
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10908

if.end.6:                                         ; preds = %if.end
  %27 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !10909, !tbaa !2119
  %28 = bitcast %struct.PyByteArrayObject* %27 to %struct.PyVarObject*, !dbg !10910
  %ob_size7 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %28, i32 0, i32 1, !dbg !10911
  %29 = load i64, i64* %ob_size7, align 8, !dbg !10911, !tbaa !2239
  %tobool8 = icmp ne i64 %29, 0, !dbg !10912
  br i1 %tobool8, label %cond.true.9, label %cond.false.11, !dbg !10912

cond.true.9:                                      ; preds = %if.end.6
  %30 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !10913, !tbaa !2119
  %ob_start10 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %30, i32 0, i32 3, !dbg !10914
  %31 = load i8*, i8** %ob_start10, align 8, !dbg !10914, !tbaa !2250
  br label %cond.end.12, !dbg !10912

cond.false.11:                                    ; preds = %if.end.6
  br label %cond.end.12, !dbg !10915

cond.end.12:                                      ; preds = %cond.false.11, %cond.true.9
  %cond13 = phi i8* [ %31, %cond.true.9 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.11 ], !dbg !10912
  store i8* %cond13, i8** %result_s, align 8, !dbg !10916, !tbaa !2119
  %32 = load i8*, i8** %self_s, align 8, !dbg !10917, !tbaa !2119
  store i8* %32, i8** %start, align 8, !dbg !10918, !tbaa !2119
  %33 = load i8*, i8** %self_s, align 8, !dbg !10919, !tbaa !2119
  %34 = load i64, i64* %self_len, align 8, !dbg !10920, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %33, i64 %34, !dbg !10921
  store i8* %add.ptr, i8** %end, align 8, !dbg !10922, !tbaa !2119
  br label %while.cond, !dbg !10923

while.cond:                                       ; preds = %if.end.19, %cond.end.12
  %35 = load i64, i64* %count, align 8, !dbg !10924, !tbaa !2129
  %dec = add i64 %35, -1, !dbg !10924
  store i64 %dec, i64* %count, align 8, !dbg !10924, !tbaa !2129
  %cmp14 = icmp sgt i64 %35, 0, !dbg !10926
  br i1 %cmp14, label %while.body, label %while.end, !dbg !10923

while.body:                                       ; preds = %while.cond
  %36 = load i8*, i8** %start, align 8, !dbg !10927, !tbaa !2119
  %37 = load i8, i8* %from_c.addr, align 1, !dbg !10929, !tbaa !2233
  %conv = sext i8 %37 to i32, !dbg !10929
  %38 = load i8*, i8** %end, align 8, !dbg !10930, !tbaa !2119
  %39 = load i8*, i8** %start, align 8, !dbg !10931, !tbaa !2119
  %sub.ptr.lhs.cast = ptrtoint i8* %38 to i64, !dbg !10932
  %sub.ptr.rhs.cast = ptrtoint i8* %39 to i64, !dbg !10932
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !10932
  %call15 = call i8* @memchr(i8* %36, i32 %conv, i64 %sub.ptr.sub) #8, !dbg !10933
  store i8* %call15, i8** %next, align 8, !dbg !10934, !tbaa !2119
  %40 = load i8*, i8** %next, align 8, !dbg !10935, !tbaa !2119
  %cmp16 = icmp eq i8* %40, null, !dbg !10937
  br i1 %cmp16, label %if.then.18, label %if.end.19, !dbg !10938

if.then.18:                                       ; preds = %while.body
  br label %while.end, !dbg !10939

if.end.19:                                        ; preds = %while.body
  %41 = load i8*, i8** %result_s, align 8, !dbg !10940, !tbaa !2119
  %42 = load i8*, i8** %start, align 8, !dbg !10941, !tbaa !2119
  %43 = load i8*, i8** %next, align 8, !dbg !10942, !tbaa !2119
  %44 = load i8*, i8** %start, align 8, !dbg !10943, !tbaa !2119
  %sub.ptr.lhs.cast20 = ptrtoint i8* %43 to i64, !dbg !10944
  %sub.ptr.rhs.cast21 = ptrtoint i8* %44 to i64, !dbg !10944
  %sub.ptr.sub22 = sub i64 %sub.ptr.lhs.cast20, %sub.ptr.rhs.cast21, !dbg !10944
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 %sub.ptr.sub22, i32 1, i1 false), !dbg !10945
  %45 = load i8*, i8** %next, align 8, !dbg !10946, !tbaa !2119
  %46 = load i8*, i8** %start, align 8, !dbg !10947, !tbaa !2119
  %sub.ptr.lhs.cast23 = ptrtoint i8* %45 to i64, !dbg !10948
  %sub.ptr.rhs.cast24 = ptrtoint i8* %46 to i64, !dbg !10948
  %sub.ptr.sub25 = sub i64 %sub.ptr.lhs.cast23, %sub.ptr.rhs.cast24, !dbg !10948
  %47 = load i8*, i8** %result_s, align 8, !dbg !10949, !tbaa !2119
  %add.ptr26 = getelementptr i8, i8* %47, i64 %sub.ptr.sub25, !dbg !10949
  store i8* %add.ptr26, i8** %result_s, align 8, !dbg !10949, !tbaa !2119
  %48 = load i8*, i8** %next, align 8, !dbg !10950, !tbaa !2119
  %add.ptr27 = getelementptr i8, i8* %48, i64 1, !dbg !10951
  store i8* %add.ptr27, i8** %start, align 8, !dbg !10952, !tbaa !2119
  br label %while.cond, !dbg !10923

while.end:                                        ; preds = %if.then.18, %while.cond
  %49 = load i8*, i8** %result_s, align 8, !dbg !10953, !tbaa !2119
  %50 = load i8*, i8** %start, align 8, !dbg !10954, !tbaa !2119
  %51 = load i8*, i8** %end, align 8, !dbg !10955, !tbaa !2119
  %52 = load i8*, i8** %start, align 8, !dbg !10956, !tbaa !2119
  %sub.ptr.lhs.cast28 = ptrtoint i8* %51 to i64, !dbg !10957
  %sub.ptr.rhs.cast29 = ptrtoint i8* %52 to i64, !dbg !10957
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast28, %sub.ptr.rhs.cast29, !dbg !10957
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %49, i8* %50, i64 %sub.ptr.sub30, i32 1, i1 false), !dbg !10958
  %53 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !10959, !tbaa !2119
  store %struct.PyByteArrayObject* %53, %struct.PyByteArrayObject** %retval, !dbg !10960
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10960

cleanup:                                          ; preds = %while.end, %if.then.5, %if.then
  %54 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !10961
  call void @llvm.lifetime.end(i64 8, i8* %54) #3, !dbg !10961
  %55 = bitcast i64* %count to i8*, !dbg !10961
  call void @llvm.lifetime.end(i64 8, i8* %55) #3, !dbg !10961
  %56 = bitcast i64* %result_len to i8*, !dbg !10961
  call void @llvm.lifetime.end(i64 8, i8* %56) #3, !dbg !10961
  %57 = bitcast i64* %self_len to i8*, !dbg !10961
  call void @llvm.lifetime.end(i64 8, i8* %57) #3, !dbg !10961
  %58 = bitcast i8** %end to i8*, !dbg !10961
  call void @llvm.lifetime.end(i64 8, i8* %58) #3, !dbg !10961
  %59 = bitcast i8** %next to i8*, !dbg !10961
  call void @llvm.lifetime.end(i64 8, i8* %59) #3, !dbg !10961
  %60 = bitcast i8** %start to i8*, !dbg !10961
  call void @llvm.lifetime.end(i64 8, i8* %60) #3, !dbg !10961
  %61 = bitcast i8** %result_s to i8*, !dbg !10961
  call void @llvm.lifetime.end(i64 8, i8* %61) #3, !dbg !10961
  %62 = bitcast i8** %self_s to i8*, !dbg !10961
  call void @llvm.lifetime.end(i64 8, i8* %62) #3, !dbg !10961
  %63 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %retval, !dbg !10961
  ret %struct.PyByteArrayObject* %63, !dbg !10961
}

; Function Attrs: nounwind uwtable
define internal %struct.PyByteArrayObject* @replace_delete_substring(%struct.PyByteArrayObject* %self, i8* %from_s, i64 %from_len, i64 %maxcount) #0 {
entry:
  %retval = alloca %struct.PyByteArrayObject*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %from_s.addr = alloca i8*, align 8
  %from_len.addr = alloca i64, align 8
  %maxcount.addr = alloca i64, align 8
  %self_s = alloca i8*, align 8
  %result_s = alloca i8*, align 8
  %start = alloca i8*, align 8
  %next = alloca i8*, align 8
  %end = alloca i8*, align 8
  %self_len = alloca i64, align 8
  %result_len = alloca i64, align 8
  %count = alloca i64, align 8
  %offset = alloca i64, align 8
  %result = alloca %struct.PyByteArrayObject*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1324, metadata !2123), !dbg !10962
  store i8* %from_s, i8** %from_s.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %from_s.addr, metadata !1325, metadata !2123), !dbg !10963
  store i64 %from_len, i64* %from_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %from_len.addr, metadata !1326, metadata !2123), !dbg !10964
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1327, metadata !2123), !dbg !10965
  %0 = bitcast i8** %self_s to i8*, !dbg !10966
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !10966
  call void @llvm.dbg.declare(metadata i8** %self_s, metadata !1328, metadata !2123), !dbg !10967
  %1 = bitcast i8** %result_s to i8*, !dbg !10966
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !10966
  call void @llvm.dbg.declare(metadata i8** %result_s, metadata !1329, metadata !2123), !dbg !10968
  %2 = bitcast i8** %start to i8*, !dbg !10969
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !10969
  call void @llvm.dbg.declare(metadata i8** %start, metadata !1330, metadata !2123), !dbg !10970
  %3 = bitcast i8** %next to i8*, !dbg !10969
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !10969
  call void @llvm.dbg.declare(metadata i8** %next, metadata !1331, metadata !2123), !dbg !10971
  %4 = bitcast i8** %end to i8*, !dbg !10969
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !10969
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1332, metadata !2123), !dbg !10972
  %5 = bitcast i64* %self_len to i8*, !dbg !10973
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !10973
  call void @llvm.dbg.declare(metadata i64* %self_len, metadata !1333, metadata !2123), !dbg !10974
  %6 = bitcast i64* %result_len to i8*, !dbg !10973
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !10973
  call void @llvm.dbg.declare(metadata i64* %result_len, metadata !1334, metadata !2123), !dbg !10975
  %7 = bitcast i64* %count to i8*, !dbg !10976
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !10976
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1335, metadata !2123), !dbg !10977
  %8 = bitcast i64* %offset to i8*, !dbg !10976
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !10976
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !1336, metadata !2123), !dbg !10978
  %9 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !10979
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !10979
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %result, metadata !1337, metadata !2123), !dbg !10980
  %10 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10981, !tbaa !2119
  %11 = bitcast %struct.PyByteArrayObject* %10 to %struct.PyVarObject*, !dbg !10982
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %11, i32 0, i32 1, !dbg !10983
  %12 = load i64, i64* %ob_size, align 8, !dbg !10983, !tbaa !2239
  store i64 %12, i64* %self_len, align 8, !dbg !10984, !tbaa !2129
  %13 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10985, !tbaa !2119
  %14 = bitcast %struct.PyByteArrayObject* %13 to %struct.PyVarObject*, !dbg !10986
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %14, i32 0, i32 1, !dbg !10987
  %15 = load i64, i64* %ob_size1, align 8, !dbg !10987, !tbaa !2239
  %tobool = icmp ne i64 %15, 0, !dbg !10988
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10988

cond.true:                                        ; preds = %entry
  %16 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !10989, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %16, i32 0, i32 3, !dbg !10991
  %17 = load i8*, i8** %ob_start, align 8, !dbg !10991, !tbaa !2250
  br label %cond.end, !dbg !10988

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10992

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %17, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !10988
  store i8* %cond, i8** %self_s, align 8, !dbg !10994, !tbaa !2119
  %18 = load i8*, i8** %self_s, align 8, !dbg !10997, !tbaa !2119
  %19 = load i64, i64* %self_len, align 8, !dbg !10998, !tbaa !2129
  %20 = load i8*, i8** %from_s.addr, align 8, !dbg !10999, !tbaa !2119
  %21 = load i64, i64* %from_len.addr, align 8, !dbg !11000, !tbaa !2129
  %22 = load i64, i64* %maxcount.addr, align 8, !dbg !11001, !tbaa !2129
  %call = call i64 @stringlib_count(i8* %18, i64 %19, i8* %20, i64 %21, i64 %22), !dbg !11002
  store i64 %call, i64* %count, align 8, !dbg !11003, !tbaa !2129
  %23 = load i64, i64* %count, align 8, !dbg !11004, !tbaa !2129
  %cmp = icmp eq i64 %23, 0, !dbg !11006
  br i1 %cmp, label %if.then, label %if.end, !dbg !11007

if.then:                                          ; preds = %cond.end
  %24 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11008, !tbaa !2119
  %call2 = call %struct.PyByteArrayObject* @return_self(%struct.PyByteArrayObject* %24), !dbg !11010
  store %struct.PyByteArrayObject* %call2, %struct.PyByteArrayObject** %retval, !dbg !11011
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11011

if.end:                                           ; preds = %cond.end
  %25 = load i64, i64* %self_len, align 8, !dbg !11012, !tbaa !2129
  %26 = load i64, i64* %count, align 8, !dbg !11013, !tbaa !2129
  %27 = load i64, i64* %from_len.addr, align 8, !dbg !11014, !tbaa !2129
  %mul = mul i64 %26, %27, !dbg !11015
  %sub = sub i64 %25, %mul, !dbg !11016
  store i64 %sub, i64* %result_len, align 8, !dbg !11017, !tbaa !2129
  %28 = load i64, i64* %result_len, align 8, !dbg !11018, !tbaa !2129
  %call3 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %28), !dbg !11020
  %29 = bitcast %struct._object* %call3 to %struct.PyByteArrayObject*, !dbg !11021
  store %struct.PyByteArrayObject* %29, %struct.PyByteArrayObject** %result, align 8, !dbg !11022, !tbaa !2119
  %cmp4 = icmp eq %struct.PyByteArrayObject* %29, null, !dbg !11023
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !11024

if.then.5:                                        ; preds = %if.end
  store %struct.PyByteArrayObject* null, %struct.PyByteArrayObject** %retval, !dbg !11025
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11025

if.end.6:                                         ; preds = %if.end
  %30 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11026, !tbaa !2119
  %31 = bitcast %struct.PyByteArrayObject* %30 to %struct.PyVarObject*, !dbg !11027
  %ob_size7 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %31, i32 0, i32 1, !dbg !11028
  %32 = load i64, i64* %ob_size7, align 8, !dbg !11028, !tbaa !2239
  %tobool8 = icmp ne i64 %32, 0, !dbg !11029
  br i1 %tobool8, label %cond.true.9, label %cond.false.11, !dbg !11029

cond.true.9:                                      ; preds = %if.end.6
  %33 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11030, !tbaa !2119
  %ob_start10 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %33, i32 0, i32 3, !dbg !11031
  %34 = load i8*, i8** %ob_start10, align 8, !dbg !11031, !tbaa !2250
  br label %cond.end.12, !dbg !11029

cond.false.11:                                    ; preds = %if.end.6
  br label %cond.end.12, !dbg !11032

cond.end.12:                                      ; preds = %cond.false.11, %cond.true.9
  %cond13 = phi i8* [ %34, %cond.true.9 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.11 ], !dbg !11029
  store i8* %cond13, i8** %result_s, align 8, !dbg !11033, !tbaa !2119
  %35 = load i8*, i8** %self_s, align 8, !dbg !11034, !tbaa !2119
  store i8* %35, i8** %start, align 8, !dbg !11035, !tbaa !2119
  %36 = load i8*, i8** %self_s, align 8, !dbg !11036, !tbaa !2119
  %37 = load i64, i64* %self_len, align 8, !dbg !11037, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %36, i64 %37, !dbg !11038
  store i8* %add.ptr, i8** %end, align 8, !dbg !11039, !tbaa !2119
  br label %while.cond, !dbg !11040

while.cond:                                       ; preds = %if.end.18, %cond.end.12
  %38 = load i64, i64* %count, align 8, !dbg !11041, !tbaa !2129
  %dec = add i64 %38, -1, !dbg !11041
  store i64 %dec, i64* %count, align 8, !dbg !11041, !tbaa !2129
  %cmp14 = icmp sgt i64 %38, 0, !dbg !11043
  br i1 %cmp14, label %while.body, label %while.end, !dbg !11040

while.body:                                       ; preds = %while.cond
  %39 = load i8*, i8** %start, align 8, !dbg !11044, !tbaa !2119
  %40 = load i8*, i8** %end, align 8, !dbg !11046, !tbaa !2119
  %41 = load i8*, i8** %start, align 8, !dbg !11047, !tbaa !2119
  %sub.ptr.lhs.cast = ptrtoint i8* %40 to i64, !dbg !11048
  %sub.ptr.rhs.cast = ptrtoint i8* %41 to i64, !dbg !11048
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !11048
  %42 = load i8*, i8** %from_s.addr, align 8, !dbg !11049, !tbaa !2119
  %43 = load i64, i64* %from_len.addr, align 8, !dbg !11050, !tbaa !2129
  %call15 = call i64 @stringlib_find(i8* %39, i64 %sub.ptr.sub, i8* %42, i64 %43, i64 0), !dbg !11051
  store i64 %call15, i64* %offset, align 8, !dbg !11052, !tbaa !2129
  %44 = load i64, i64* %offset, align 8, !dbg !11053, !tbaa !2129
  %cmp16 = icmp eq i64 %44, -1, !dbg !11055
  br i1 %cmp16, label %if.then.17, label %if.end.18, !dbg !11056

if.then.17:                                       ; preds = %while.body
  br label %while.end, !dbg !11057

if.end.18:                                        ; preds = %while.body
  %45 = load i8*, i8** %start, align 8, !dbg !11058, !tbaa !2119
  %46 = load i64, i64* %offset, align 8, !dbg !11059, !tbaa !2129
  %add.ptr19 = getelementptr i8, i8* %45, i64 %46, !dbg !11060
  store i8* %add.ptr19, i8** %next, align 8, !dbg !11061, !tbaa !2119
  %47 = load i8*, i8** %result_s, align 8, !dbg !11062, !tbaa !2119
  %48 = load i8*, i8** %start, align 8, !dbg !11063, !tbaa !2119
  %49 = load i8*, i8** %next, align 8, !dbg !11064, !tbaa !2119
  %50 = load i8*, i8** %start, align 8, !dbg !11065, !tbaa !2119
  %sub.ptr.lhs.cast20 = ptrtoint i8* %49 to i64, !dbg !11066
  %sub.ptr.rhs.cast21 = ptrtoint i8* %50 to i64, !dbg !11066
  %sub.ptr.sub22 = sub i64 %sub.ptr.lhs.cast20, %sub.ptr.rhs.cast21, !dbg !11066
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 %sub.ptr.sub22, i32 1, i1 false), !dbg !11067
  %51 = load i8*, i8** %next, align 8, !dbg !11068, !tbaa !2119
  %52 = load i8*, i8** %start, align 8, !dbg !11069, !tbaa !2119
  %sub.ptr.lhs.cast23 = ptrtoint i8* %51 to i64, !dbg !11070
  %sub.ptr.rhs.cast24 = ptrtoint i8* %52 to i64, !dbg !11070
  %sub.ptr.sub25 = sub i64 %sub.ptr.lhs.cast23, %sub.ptr.rhs.cast24, !dbg !11070
  %53 = load i8*, i8** %result_s, align 8, !dbg !11071, !tbaa !2119
  %add.ptr26 = getelementptr i8, i8* %53, i64 %sub.ptr.sub25, !dbg !11071
  store i8* %add.ptr26, i8** %result_s, align 8, !dbg !11071, !tbaa !2119
  %54 = load i8*, i8** %next, align 8, !dbg !11072, !tbaa !2119
  %55 = load i64, i64* %from_len.addr, align 8, !dbg !11073, !tbaa !2129
  %add.ptr27 = getelementptr i8, i8* %54, i64 %55, !dbg !11074
  store i8* %add.ptr27, i8** %start, align 8, !dbg !11075, !tbaa !2119
  br label %while.cond, !dbg !11040

while.end:                                        ; preds = %if.then.17, %while.cond
  %56 = load i8*, i8** %result_s, align 8, !dbg !11076, !tbaa !2119
  %57 = load i8*, i8** %start, align 8, !dbg !11077, !tbaa !2119
  %58 = load i8*, i8** %end, align 8, !dbg !11078, !tbaa !2119
  %59 = load i8*, i8** %start, align 8, !dbg !11079, !tbaa !2119
  %sub.ptr.lhs.cast28 = ptrtoint i8* %58 to i64, !dbg !11080
  %sub.ptr.rhs.cast29 = ptrtoint i8* %59 to i64, !dbg !11080
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast28, %sub.ptr.rhs.cast29, !dbg !11080
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %56, i8* %57, i64 %sub.ptr.sub30, i32 1, i1 false), !dbg !11081
  %60 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11082, !tbaa !2119
  store %struct.PyByteArrayObject* %60, %struct.PyByteArrayObject** %retval, !dbg !11083
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11083

cleanup:                                          ; preds = %while.end, %if.then.5, %if.then
  %61 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !11084
  call void @llvm.lifetime.end(i64 8, i8* %61) #3, !dbg !11084
  %62 = bitcast i64* %offset to i8*, !dbg !11084
  call void @llvm.lifetime.end(i64 8, i8* %62) #3, !dbg !11084
  %63 = bitcast i64* %count to i8*, !dbg !11084
  call void @llvm.lifetime.end(i64 8, i8* %63) #3, !dbg !11084
  %64 = bitcast i64* %result_len to i8*, !dbg !11084
  call void @llvm.lifetime.end(i64 8, i8* %64) #3, !dbg !11084
  %65 = bitcast i64* %self_len to i8*, !dbg !11084
  call void @llvm.lifetime.end(i64 8, i8* %65) #3, !dbg !11084
  %66 = bitcast i8** %end to i8*, !dbg !11084
  call void @llvm.lifetime.end(i64 8, i8* %66) #3, !dbg !11084
  %67 = bitcast i8** %next to i8*, !dbg !11084
  call void @llvm.lifetime.end(i64 8, i8* %67) #3, !dbg !11084
  %68 = bitcast i8** %start to i8*, !dbg !11084
  call void @llvm.lifetime.end(i64 8, i8* %68) #3, !dbg !11084
  %69 = bitcast i8** %result_s to i8*, !dbg !11084
  call void @llvm.lifetime.end(i64 8, i8* %69) #3, !dbg !11084
  %70 = bitcast i8** %self_s to i8*, !dbg !11084
  call void @llvm.lifetime.end(i64 8, i8* %70) #3, !dbg !11084
  %71 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %retval, !dbg !11084
  ret %struct.PyByteArrayObject* %71, !dbg !11084
}

; Function Attrs: nounwind uwtable
define internal %struct.PyByteArrayObject* @replace_single_character_in_place(%struct.PyByteArrayObject* %self, i8 signext %from_c, i8 signext %to_c, i64 %maxcount) #0 {
entry:
  %retval = alloca %struct.PyByteArrayObject*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %from_c.addr = alloca i8, align 1
  %to_c.addr = alloca i8, align 1
  %maxcount.addr = alloca i64, align 8
  %self_s = alloca i8*, align 8
  %result_s = alloca i8*, align 8
  %start = alloca i8*, align 8
  %end = alloca i8*, align 8
  %next = alloca i8*, align 8
  %self_len = alloca i64, align 8
  %result = alloca %struct.PyByteArrayObject*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1342, metadata !2123), !dbg !11085
  store i8 %from_c, i8* %from_c.addr, align 1, !tbaa !2233
  call void @llvm.dbg.declare(metadata i8* %from_c.addr, metadata !1343, metadata !2123), !dbg !11086
  store i8 %to_c, i8* %to_c.addr, align 1, !tbaa !2233
  call void @llvm.dbg.declare(metadata i8* %to_c.addr, metadata !1344, metadata !2123), !dbg !11087
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1345, metadata !2123), !dbg !11088
  %0 = bitcast i8** %self_s to i8*, !dbg !11089
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !11089
  call void @llvm.dbg.declare(metadata i8** %self_s, metadata !1346, metadata !2123), !dbg !11090
  %1 = bitcast i8** %result_s to i8*, !dbg !11089
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !11089
  call void @llvm.dbg.declare(metadata i8** %result_s, metadata !1347, metadata !2123), !dbg !11091
  %2 = bitcast i8** %start to i8*, !dbg !11089
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !11089
  call void @llvm.dbg.declare(metadata i8** %start, metadata !1348, metadata !2123), !dbg !11092
  %3 = bitcast i8** %end to i8*, !dbg !11089
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !11089
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1349, metadata !2123), !dbg !11093
  %4 = bitcast i8** %next to i8*, !dbg !11089
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !11089
  call void @llvm.dbg.declare(metadata i8** %next, metadata !1350, metadata !2123), !dbg !11094
  %5 = bitcast i64* %self_len to i8*, !dbg !11095
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !11095
  call void @llvm.dbg.declare(metadata i64* %self_len, metadata !1351, metadata !2123), !dbg !11096
  %6 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !11097
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !11097
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %result, metadata !1352, metadata !2123), !dbg !11098
  %7 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11099, !tbaa !2119
  %8 = bitcast %struct.PyByteArrayObject* %7 to %struct.PyVarObject*, !dbg !11100
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !11101
  %9 = load i64, i64* %ob_size, align 8, !dbg !11101, !tbaa !2239
  %tobool = icmp ne i64 %9, 0, !dbg !11102
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11102

cond.true:                                        ; preds = %entry
  %10 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11103, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %10, i32 0, i32 3, !dbg !11105
  %11 = load i8*, i8** %ob_start, align 8, !dbg !11105, !tbaa !2250
  br label %cond.end, !dbg !11102

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11106

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %11, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !11102
  store i8* %cond, i8** %self_s, align 8, !dbg !11108, !tbaa !2119
  %12 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11111, !tbaa !2119
  %13 = bitcast %struct.PyByteArrayObject* %12 to %struct.PyVarObject*, !dbg !11112
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %13, i32 0, i32 1, !dbg !11113
  %14 = load i64, i64* %ob_size1, align 8, !dbg !11113, !tbaa !2239
  store i64 %14, i64* %self_len, align 8, !dbg !11114, !tbaa !2129
  %15 = load i8*, i8** %self_s, align 8, !dbg !11115, !tbaa !2119
  %16 = load i8, i8* %from_c.addr, align 1, !dbg !11116, !tbaa !2233
  %conv = sext i8 %16 to i32, !dbg !11116
  %17 = load i64, i64* %self_len, align 8, !dbg !11117, !tbaa !2129
  %call = call i8* @memchr(i8* %15, i32 %conv, i64 %17) #8, !dbg !11118
  store i8* %call, i8** %next, align 8, !dbg !11119, !tbaa !2119
  %18 = load i8*, i8** %next, align 8, !dbg !11120, !tbaa !2119
  %cmp = icmp eq i8* %18, null, !dbg !11122
  br i1 %cmp, label %if.then, label %if.end, !dbg !11123

if.then:                                          ; preds = %cond.end
  %19 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11124, !tbaa !2119
  %call3 = call %struct.PyByteArrayObject* @return_self(%struct.PyByteArrayObject* %19), !dbg !11126
  store %struct.PyByteArrayObject* %call3, %struct.PyByteArrayObject** %retval, !dbg !11127
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11127

if.end:                                           ; preds = %cond.end
  %20 = load i64, i64* %self_len, align 8, !dbg !11128, !tbaa !2129
  %call4 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %20), !dbg !11129
  %21 = bitcast %struct._object* %call4 to %struct.PyByteArrayObject*, !dbg !11130
  store %struct.PyByteArrayObject* %21, %struct.PyByteArrayObject** %result, align 8, !dbg !11131, !tbaa !2119
  %22 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11132, !tbaa !2119
  %cmp5 = icmp eq %struct.PyByteArrayObject* %22, null, !dbg !11134
  br i1 %cmp5, label %if.then.7, label %if.end.8, !dbg !11135

if.then.7:                                        ; preds = %if.end
  store %struct.PyByteArrayObject* null, %struct.PyByteArrayObject** %retval, !dbg !11136
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11136

if.end.8:                                         ; preds = %if.end
  %23 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11137, !tbaa !2119
  %24 = bitcast %struct.PyByteArrayObject* %23 to %struct.PyVarObject*, !dbg !11138
  %ob_size9 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %24, i32 0, i32 1, !dbg !11139
  %25 = load i64, i64* %ob_size9, align 8, !dbg !11139, !tbaa !2239
  %tobool10 = icmp ne i64 %25, 0, !dbg !11140
  br i1 %tobool10, label %cond.true.11, label %cond.false.13, !dbg !11140

cond.true.11:                                     ; preds = %if.end.8
  %26 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11141, !tbaa !2119
  %ob_start12 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %26, i32 0, i32 3, !dbg !11142
  %27 = load i8*, i8** %ob_start12, align 8, !dbg !11142, !tbaa !2250
  br label %cond.end.14, !dbg !11140

cond.false.13:                                    ; preds = %if.end.8
  br label %cond.end.14, !dbg !11143

cond.end.14:                                      ; preds = %cond.false.13, %cond.true.11
  %cond15 = phi i8* [ %27, %cond.true.11 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.13 ], !dbg !11140
  store i8* %cond15, i8** %result_s, align 8, !dbg !11144, !tbaa !2119
  %28 = load i8*, i8** %result_s, align 8, !dbg !11145, !tbaa !2119
  %29 = load i8*, i8** %self_s, align 8, !dbg !11146, !tbaa !2119
  %30 = load i64, i64* %self_len, align 8, !dbg !11147, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 %30, i32 1, i1 false), !dbg !11148
  %31 = load i8*, i8** %result_s, align 8, !dbg !11149, !tbaa !2119
  %32 = load i8*, i8** %next, align 8, !dbg !11150, !tbaa !2119
  %33 = load i8*, i8** %self_s, align 8, !dbg !11151, !tbaa !2119
  %sub.ptr.lhs.cast = ptrtoint i8* %32 to i64, !dbg !11152
  %sub.ptr.rhs.cast = ptrtoint i8* %33 to i64, !dbg !11152
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !11152
  %add.ptr = getelementptr i8, i8* %31, i64 %sub.ptr.sub, !dbg !11153
  store i8* %add.ptr, i8** %start, align 8, !dbg !11154, !tbaa !2119
  %34 = load i8, i8* %to_c.addr, align 1, !dbg !11155, !tbaa !2233
  %35 = load i8*, i8** %start, align 8, !dbg !11156, !tbaa !2119
  store i8 %34, i8* %35, align 1, !dbg !11157, !tbaa !2233
  %36 = load i8*, i8** %start, align 8, !dbg !11158, !tbaa !2119
  %incdec.ptr = getelementptr i8, i8* %36, i32 1, !dbg !11158
  store i8* %incdec.ptr, i8** %start, align 8, !dbg !11158, !tbaa !2119
  %37 = load i8*, i8** %result_s, align 8, !dbg !11159, !tbaa !2119
  %38 = load i64, i64* %self_len, align 8, !dbg !11160, !tbaa !2129
  %add.ptr16 = getelementptr i8, i8* %37, i64 %38, !dbg !11161
  store i8* %add.ptr16, i8** %end, align 8, !dbg !11162, !tbaa !2119
  br label %while.cond, !dbg !11163

while.cond:                                       ; preds = %if.end.27, %cond.end.14
  %39 = load i64, i64* %maxcount.addr, align 8, !dbg !11164, !tbaa !2129
  %dec = add i64 %39, -1, !dbg !11164
  store i64 %dec, i64* %maxcount.addr, align 8, !dbg !11164, !tbaa !2129
  %cmp17 = icmp sgt i64 %dec, 0, !dbg !11166
  br i1 %cmp17, label %while.body, label %while.end, !dbg !11163

while.body:                                       ; preds = %while.cond
  %40 = load i8*, i8** %start, align 8, !dbg !11167, !tbaa !2119
  %41 = load i8, i8* %from_c.addr, align 1, !dbg !11169, !tbaa !2233
  %conv19 = sext i8 %41 to i32, !dbg !11169
  %42 = load i8*, i8** %end, align 8, !dbg !11170, !tbaa !2119
  %43 = load i8*, i8** %start, align 8, !dbg !11171, !tbaa !2119
  %sub.ptr.lhs.cast20 = ptrtoint i8* %42 to i64, !dbg !11172
  %sub.ptr.rhs.cast21 = ptrtoint i8* %43 to i64, !dbg !11172
  %sub.ptr.sub22 = sub i64 %sub.ptr.lhs.cast20, %sub.ptr.rhs.cast21, !dbg !11172
  %call23 = call i8* @memchr(i8* %40, i32 %conv19, i64 %sub.ptr.sub22) #8, !dbg !11173
  store i8* %call23, i8** %next, align 8, !dbg !11174, !tbaa !2119
  %44 = load i8*, i8** %next, align 8, !dbg !11175, !tbaa !2119
  %cmp24 = icmp eq i8* %44, null, !dbg !11177
  br i1 %cmp24, label %if.then.26, label %if.end.27, !dbg !11178

if.then.26:                                       ; preds = %while.body
  br label %while.end, !dbg !11179

if.end.27:                                        ; preds = %while.body
  %45 = load i8, i8* %to_c.addr, align 1, !dbg !11180, !tbaa !2233
  %46 = load i8*, i8** %next, align 8, !dbg !11181, !tbaa !2119
  store i8 %45, i8* %46, align 1, !dbg !11182, !tbaa !2233
  %47 = load i8*, i8** %next, align 8, !dbg !11183, !tbaa !2119
  %add.ptr28 = getelementptr i8, i8* %47, i64 1, !dbg !11184
  store i8* %add.ptr28, i8** %start, align 8, !dbg !11185, !tbaa !2119
  br label %while.cond, !dbg !11163

while.end:                                        ; preds = %if.then.26, %while.cond
  %48 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11186, !tbaa !2119
  store %struct.PyByteArrayObject* %48, %struct.PyByteArrayObject** %retval, !dbg !11187
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11187

cleanup:                                          ; preds = %while.end, %if.then.7, %if.then
  %49 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !11188
  call void @llvm.lifetime.end(i64 8, i8* %49) #3, !dbg !11188
  %50 = bitcast i64* %self_len to i8*, !dbg !11188
  call void @llvm.lifetime.end(i64 8, i8* %50) #3, !dbg !11188
  %51 = bitcast i8** %next to i8*, !dbg !11188
  call void @llvm.lifetime.end(i64 8, i8* %51) #3, !dbg !11188
  %52 = bitcast i8** %end to i8*, !dbg !11188
  call void @llvm.lifetime.end(i64 8, i8* %52) #3, !dbg !11188
  %53 = bitcast i8** %start to i8*, !dbg !11188
  call void @llvm.lifetime.end(i64 8, i8* %53) #3, !dbg !11188
  %54 = bitcast i8** %result_s to i8*, !dbg !11188
  call void @llvm.lifetime.end(i64 8, i8* %54) #3, !dbg !11188
  %55 = bitcast i8** %self_s to i8*, !dbg !11188
  call void @llvm.lifetime.end(i64 8, i8* %55) #3, !dbg !11188
  %56 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %retval, !dbg !11188
  ret %struct.PyByteArrayObject* %56, !dbg !11188
}

; Function Attrs: nounwind uwtable
define internal %struct.PyByteArrayObject* @replace_substring_in_place(%struct.PyByteArrayObject* %self, i8* %from_s, i64 %from_len, i8* %to_s, i64 %to_len, i64 %maxcount) #0 {
entry:
  %retval = alloca %struct.PyByteArrayObject*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %from_s.addr = alloca i8*, align 8
  %from_len.addr = alloca i64, align 8
  %to_s.addr = alloca i8*, align 8
  %to_len.addr = alloca i64, align 8
  %maxcount.addr = alloca i64, align 8
  %result_s = alloca i8*, align 8
  %start = alloca i8*, align 8
  %end = alloca i8*, align 8
  %self_s = alloca i8*, align 8
  %self_len = alloca i64, align 8
  %offset = alloca i64, align 8
  %result = alloca %struct.PyByteArrayObject*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1355, metadata !2123), !dbg !11189
  store i8* %from_s, i8** %from_s.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %from_s.addr, metadata !1356, metadata !2123), !dbg !11190
  store i64 %from_len, i64* %from_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %from_len.addr, metadata !1357, metadata !2123), !dbg !11191
  store i8* %to_s, i8** %to_s.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %to_s.addr, metadata !1358, metadata !2123), !dbg !11192
  store i64 %to_len, i64* %to_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %to_len.addr, metadata !1359, metadata !2123), !dbg !11193
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1360, metadata !2123), !dbg !11194
  %0 = bitcast i8** %result_s to i8*, !dbg !11195
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !11195
  call void @llvm.dbg.declare(metadata i8** %result_s, metadata !1361, metadata !2123), !dbg !11196
  %1 = bitcast i8** %start to i8*, !dbg !11195
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !11195
  call void @llvm.dbg.declare(metadata i8** %start, metadata !1362, metadata !2123), !dbg !11197
  %2 = bitcast i8** %end to i8*, !dbg !11195
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !11195
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1363, metadata !2123), !dbg !11198
  %3 = bitcast i8** %self_s to i8*, !dbg !11199
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !11199
  call void @llvm.dbg.declare(metadata i8** %self_s, metadata !1364, metadata !2123), !dbg !11200
  %4 = bitcast i64* %self_len to i8*, !dbg !11201
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !11201
  call void @llvm.dbg.declare(metadata i64* %self_len, metadata !1365, metadata !2123), !dbg !11202
  %5 = bitcast i64* %offset to i8*, !dbg !11201
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !11201
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !1366, metadata !2123), !dbg !11203
  %6 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !11204
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !11204
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %result, metadata !1367, metadata !2123), !dbg !11205
  %7 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11206, !tbaa !2119
  %8 = bitcast %struct.PyByteArrayObject* %7 to %struct.PyVarObject*, !dbg !11207
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1, !dbg !11208
  %9 = load i64, i64* %ob_size, align 8, !dbg !11208, !tbaa !2239
  %tobool = icmp ne i64 %9, 0, !dbg !11209
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11209

cond.true:                                        ; preds = %entry
  %10 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11210, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %10, i32 0, i32 3, !dbg !11212
  %11 = load i8*, i8** %ob_start, align 8, !dbg !11212, !tbaa !2250
  br label %cond.end, !dbg !11209

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11213

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %11, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !11209
  store i8* %cond, i8** %self_s, align 8, !dbg !11215, !tbaa !2119
  %12 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11218, !tbaa !2119
  %13 = bitcast %struct.PyByteArrayObject* %12 to %struct.PyVarObject*, !dbg !11219
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %13, i32 0, i32 1, !dbg !11220
  %14 = load i64, i64* %ob_size1, align 8, !dbg !11220, !tbaa !2239
  store i64 %14, i64* %self_len, align 8, !dbg !11221, !tbaa !2129
  %15 = load i8*, i8** %self_s, align 8, !dbg !11222, !tbaa !2119
  %16 = load i64, i64* %self_len, align 8, !dbg !11223, !tbaa !2129
  %17 = load i8*, i8** %from_s.addr, align 8, !dbg !11224, !tbaa !2119
  %18 = load i64, i64* %from_len.addr, align 8, !dbg !11225, !tbaa !2129
  %call = call i64 @stringlib_find(i8* %15, i64 %16, i8* %17, i64 %18, i64 0), !dbg !11226
  store i64 %call, i64* %offset, align 8, !dbg !11227, !tbaa !2129
  %19 = load i64, i64* %offset, align 8, !dbg !11228, !tbaa !2129
  %cmp = icmp eq i64 %19, -1, !dbg !11230
  br i1 %cmp, label %if.then, label %if.end, !dbg !11231

if.then:                                          ; preds = %cond.end
  %20 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11232, !tbaa !2119
  %call2 = call %struct.PyByteArrayObject* @return_self(%struct.PyByteArrayObject* %20), !dbg !11234
  store %struct.PyByteArrayObject* %call2, %struct.PyByteArrayObject** %retval, !dbg !11235
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11235

if.end:                                           ; preds = %cond.end
  %21 = load i64, i64* %self_len, align 8, !dbg !11236, !tbaa !2129
  %call3 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %21), !dbg !11237
  %22 = bitcast %struct._object* %call3 to %struct.PyByteArrayObject*, !dbg !11238
  store %struct.PyByteArrayObject* %22, %struct.PyByteArrayObject** %result, align 8, !dbg !11239, !tbaa !2119
  %23 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11240, !tbaa !2119
  %cmp4 = icmp eq %struct.PyByteArrayObject* %23, null, !dbg !11242
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !11243

if.then.5:                                        ; preds = %if.end
  store %struct.PyByteArrayObject* null, %struct.PyByteArrayObject** %retval, !dbg !11244
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11244

if.end.6:                                         ; preds = %if.end
  %24 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11245, !tbaa !2119
  %25 = bitcast %struct.PyByteArrayObject* %24 to %struct.PyVarObject*, !dbg !11246
  %ob_size7 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %25, i32 0, i32 1, !dbg !11247
  %26 = load i64, i64* %ob_size7, align 8, !dbg !11247, !tbaa !2239
  %tobool8 = icmp ne i64 %26, 0, !dbg !11248
  br i1 %tobool8, label %cond.true.9, label %cond.false.11, !dbg !11248

cond.true.9:                                      ; preds = %if.end.6
  %27 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11249, !tbaa !2119
  %ob_start10 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %27, i32 0, i32 3, !dbg !11250
  %28 = load i8*, i8** %ob_start10, align 8, !dbg !11250, !tbaa !2250
  br label %cond.end.12, !dbg !11248

cond.false.11:                                    ; preds = %if.end.6
  br label %cond.end.12, !dbg !11251

cond.end.12:                                      ; preds = %cond.false.11, %cond.true.9
  %cond13 = phi i8* [ %28, %cond.true.9 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.11 ], !dbg !11248
  store i8* %cond13, i8** %result_s, align 8, !dbg !11252, !tbaa !2119
  %29 = load i8*, i8** %result_s, align 8, !dbg !11253, !tbaa !2119
  %30 = load i8*, i8** %self_s, align 8, !dbg !11254, !tbaa !2119
  %31 = load i64, i64* %self_len, align 8, !dbg !11255, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 %31, i32 1, i1 false), !dbg !11256
  %32 = load i8*, i8** %result_s, align 8, !dbg !11257, !tbaa !2119
  %33 = load i64, i64* %offset, align 8, !dbg !11258, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %32, i64 %33, !dbg !11259
  store i8* %add.ptr, i8** %start, align 8, !dbg !11260, !tbaa !2119
  %34 = load i8*, i8** %start, align 8, !dbg !11261, !tbaa !2119
  %35 = load i8*, i8** %to_s.addr, align 8, !dbg !11262, !tbaa !2119
  %36 = load i64, i64* %from_len.addr, align 8, !dbg !11263, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %35, i64 %36, i32 1, i1 false), !dbg !11264
  %37 = load i64, i64* %from_len.addr, align 8, !dbg !11265, !tbaa !2129
  %38 = load i8*, i8** %start, align 8, !dbg !11266, !tbaa !2119
  %add.ptr14 = getelementptr i8, i8* %38, i64 %37, !dbg !11266
  store i8* %add.ptr14, i8** %start, align 8, !dbg !11266, !tbaa !2119
  %39 = load i8*, i8** %result_s, align 8, !dbg !11267, !tbaa !2119
  %40 = load i64, i64* %self_len, align 8, !dbg !11268, !tbaa !2129
  %add.ptr15 = getelementptr i8, i8* %39, i64 %40, !dbg !11269
  store i8* %add.ptr15, i8** %end, align 8, !dbg !11270, !tbaa !2119
  br label %while.cond, !dbg !11271

while.cond:                                       ; preds = %if.end.20, %cond.end.12
  %41 = load i64, i64* %maxcount.addr, align 8, !dbg !11272, !tbaa !2129
  %dec = add i64 %41, -1, !dbg !11272
  store i64 %dec, i64* %maxcount.addr, align 8, !dbg !11272, !tbaa !2129
  %cmp16 = icmp sgt i64 %dec, 0, !dbg !11274
  br i1 %cmp16, label %while.body, label %while.end, !dbg !11271

while.body:                                       ; preds = %while.cond
  %42 = load i8*, i8** %start, align 8, !dbg !11275, !tbaa !2119
  %43 = load i8*, i8** %end, align 8, !dbg !11277, !tbaa !2119
  %44 = load i8*, i8** %start, align 8, !dbg !11278, !tbaa !2119
  %sub.ptr.lhs.cast = ptrtoint i8* %43 to i64, !dbg !11279
  %sub.ptr.rhs.cast = ptrtoint i8* %44 to i64, !dbg !11279
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !11279
  %45 = load i8*, i8** %from_s.addr, align 8, !dbg !11280, !tbaa !2119
  %46 = load i64, i64* %from_len.addr, align 8, !dbg !11281, !tbaa !2129
  %call17 = call i64 @stringlib_find(i8* %42, i64 %sub.ptr.sub, i8* %45, i64 %46, i64 0), !dbg !11282
  store i64 %call17, i64* %offset, align 8, !dbg !11283, !tbaa !2129
  %47 = load i64, i64* %offset, align 8, !dbg !11284, !tbaa !2129
  %cmp18 = icmp eq i64 %47, -1, !dbg !11286
  br i1 %cmp18, label %if.then.19, label %if.end.20, !dbg !11287

if.then.19:                                       ; preds = %while.body
  br label %while.end, !dbg !11288

if.end.20:                                        ; preds = %while.body
  %48 = load i8*, i8** %start, align 8, !dbg !11289, !tbaa !2119
  %49 = load i64, i64* %offset, align 8, !dbg !11290, !tbaa !2129
  %add.ptr21 = getelementptr i8, i8* %48, i64 %49, !dbg !11291
  %50 = load i8*, i8** %to_s.addr, align 8, !dbg !11292, !tbaa !2119
  %51 = load i64, i64* %from_len.addr, align 8, !dbg !11293, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr21, i8* %50, i64 %51, i32 1, i1 false), !dbg !11294
  %52 = load i64, i64* %offset, align 8, !dbg !11295, !tbaa !2129
  %53 = load i64, i64* %from_len.addr, align 8, !dbg !11296, !tbaa !2129
  %add = add i64 %52, %53, !dbg !11297
  %54 = load i8*, i8** %start, align 8, !dbg !11298, !tbaa !2119
  %add.ptr22 = getelementptr i8, i8* %54, i64 %add, !dbg !11298
  store i8* %add.ptr22, i8** %start, align 8, !dbg !11298, !tbaa !2119
  br label %while.cond, !dbg !11271

while.end:                                        ; preds = %if.then.19, %while.cond
  %55 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11299, !tbaa !2119
  store %struct.PyByteArrayObject* %55, %struct.PyByteArrayObject** %retval, !dbg !11300
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11300

cleanup:                                          ; preds = %while.end, %if.then.5, %if.then
  %56 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !11301
  call void @llvm.lifetime.end(i64 8, i8* %56) #3, !dbg !11301
  %57 = bitcast i64* %offset to i8*, !dbg !11301
  call void @llvm.lifetime.end(i64 8, i8* %57) #3, !dbg !11301
  %58 = bitcast i64* %self_len to i8*, !dbg !11301
  call void @llvm.lifetime.end(i64 8, i8* %58) #3, !dbg !11301
  %59 = bitcast i8** %self_s to i8*, !dbg !11301
  call void @llvm.lifetime.end(i64 8, i8* %59) #3, !dbg !11301
  %60 = bitcast i8** %end to i8*, !dbg !11301
  call void @llvm.lifetime.end(i64 8, i8* %60) #3, !dbg !11301
  %61 = bitcast i8** %start to i8*, !dbg !11301
  call void @llvm.lifetime.end(i64 8, i8* %61) #3, !dbg !11301
  %62 = bitcast i8** %result_s to i8*, !dbg !11301
  call void @llvm.lifetime.end(i64 8, i8* %62) #3, !dbg !11301
  %63 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %retval, !dbg !11301
  ret %struct.PyByteArrayObject* %63, !dbg !11301
}

; Function Attrs: nounwind uwtable
define internal %struct.PyByteArrayObject* @replace_single_character(%struct.PyByteArrayObject* %self, i8 signext %from_c, i8* %to_s, i64 %to_len, i64 %maxcount) #0 {
entry:
  %retval = alloca %struct.PyByteArrayObject*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %from_c.addr = alloca i8, align 1
  %to_s.addr = alloca i8*, align 8
  %to_len.addr = alloca i64, align 8
  %maxcount.addr = alloca i64, align 8
  %self_s = alloca i8*, align 8
  %result_s = alloca i8*, align 8
  %start = alloca i8*, align 8
  %next = alloca i8*, align 8
  %end = alloca i8*, align 8
  %self_len = alloca i64, align 8
  %result_len = alloca i64, align 8
  %count = alloca i64, align 8
  %result = alloca %struct.PyByteArrayObject*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1372, metadata !2123), !dbg !11302
  store i8 %from_c, i8* %from_c.addr, align 1, !tbaa !2233
  call void @llvm.dbg.declare(metadata i8* %from_c.addr, metadata !1373, metadata !2123), !dbg !11303
  store i8* %to_s, i8** %to_s.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %to_s.addr, metadata !1374, metadata !2123), !dbg !11304
  store i64 %to_len, i64* %to_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %to_len.addr, metadata !1375, metadata !2123), !dbg !11305
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1376, metadata !2123), !dbg !11306
  %0 = bitcast i8** %self_s to i8*, !dbg !11307
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !11307
  call void @llvm.dbg.declare(metadata i8** %self_s, metadata !1377, metadata !2123), !dbg !11308
  %1 = bitcast i8** %result_s to i8*, !dbg !11307
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !11307
  call void @llvm.dbg.declare(metadata i8** %result_s, metadata !1378, metadata !2123), !dbg !11309
  %2 = bitcast i8** %start to i8*, !dbg !11310
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !11310
  call void @llvm.dbg.declare(metadata i8** %start, metadata !1379, metadata !2123), !dbg !11311
  %3 = bitcast i8** %next to i8*, !dbg !11310
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !11310
  call void @llvm.dbg.declare(metadata i8** %next, metadata !1380, metadata !2123), !dbg !11312
  %4 = bitcast i8** %end to i8*, !dbg !11310
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !11310
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1381, metadata !2123), !dbg !11313
  %5 = bitcast i64* %self_len to i8*, !dbg !11314
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !11314
  call void @llvm.dbg.declare(metadata i64* %self_len, metadata !1382, metadata !2123), !dbg !11315
  %6 = bitcast i64* %result_len to i8*, !dbg !11314
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !11314
  call void @llvm.dbg.declare(metadata i64* %result_len, metadata !1383, metadata !2123), !dbg !11316
  %7 = bitcast i64* %count to i8*, !dbg !11317
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !11317
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1384, metadata !2123), !dbg !11318
  %8 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !11319
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !11319
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %result, metadata !1385, metadata !2123), !dbg !11320
  %9 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11321, !tbaa !2119
  %10 = bitcast %struct.PyByteArrayObject* %9 to %struct.PyVarObject*, !dbg !11322
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %10, i32 0, i32 1, !dbg !11323
  %11 = load i64, i64* %ob_size, align 8, !dbg !11323, !tbaa !2239
  %tobool = icmp ne i64 %11, 0, !dbg !11324
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11324

cond.true:                                        ; preds = %entry
  %12 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11325, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %12, i32 0, i32 3, !dbg !11327
  %13 = load i8*, i8** %ob_start, align 8, !dbg !11327, !tbaa !2250
  br label %cond.end, !dbg !11324

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11328

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %13, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !11324
  store i8* %cond, i8** %self_s, align 8, !dbg !11330, !tbaa !2119
  %14 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11333, !tbaa !2119
  %15 = bitcast %struct.PyByteArrayObject* %14 to %struct.PyVarObject*, !dbg !11334
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %15, i32 0, i32 1, !dbg !11335
  %16 = load i64, i64* %ob_size1, align 8, !dbg !11335, !tbaa !2239
  store i64 %16, i64* %self_len, align 8, !dbg !11336, !tbaa !2129
  %17 = load i8*, i8** %self_s, align 8, !dbg !11337, !tbaa !2119
  %18 = load i64, i64* %self_len, align 8, !dbg !11338, !tbaa !2129
  %19 = load i8, i8* %from_c.addr, align 1, !dbg !11339, !tbaa !2233
  %20 = load i64, i64* %maxcount.addr, align 8, !dbg !11340, !tbaa !2129
  %call = call i64 @countchar(i8* %17, i64 %18, i8 signext %19, i64 %20), !dbg !11341
  store i64 %call, i64* %count, align 8, !dbg !11342, !tbaa !2129
  %21 = load i64, i64* %count, align 8, !dbg !11343, !tbaa !2129
  %cmp = icmp eq i64 %21, 0, !dbg !11345
  br i1 %cmp, label %if.then, label %if.end, !dbg !11346

if.then:                                          ; preds = %cond.end
  %22 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11347, !tbaa !2119
  %call2 = call %struct.PyByteArrayObject* @return_self(%struct.PyByteArrayObject* %22), !dbg !11349
  store %struct.PyByteArrayObject* %call2, %struct.PyByteArrayObject** %retval, !dbg !11350
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11350

if.end:                                           ; preds = %cond.end
  %23 = load i64, i64* %to_len.addr, align 8, !dbg !11351, !tbaa !2129
  %sub = sub i64 %23, 1, !dbg !11353
  %24 = load i64, i64* %self_len, align 8, !dbg !11354, !tbaa !2129
  %sub3 = sub i64 9223372036854775807, %24, !dbg !11355
  %25 = load i64, i64* %count, align 8, !dbg !11356, !tbaa !2129
  %div = sdiv i64 %sub3, %25, !dbg !11357
  %cmp4 = icmp sgt i64 %sub, %div, !dbg !11358
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !11359

if.then.5:                                        ; preds = %if.end
  %26 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !11360, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %26, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.105, i32 0, i32 0)), !dbg !11362
  store %struct.PyByteArrayObject* null, %struct.PyByteArrayObject** %retval, !dbg !11363
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11363

if.end.6:                                         ; preds = %if.end
  %27 = load i64, i64* %self_len, align 8, !dbg !11364, !tbaa !2129
  %28 = load i64, i64* %count, align 8, !dbg !11365, !tbaa !2129
  %29 = load i64, i64* %to_len.addr, align 8, !dbg !11366, !tbaa !2129
  %sub7 = sub i64 %29, 1, !dbg !11367
  %mul = mul i64 %28, %sub7, !dbg !11368
  %add = add i64 %27, %mul, !dbg !11369
  store i64 %add, i64* %result_len, align 8, !dbg !11370, !tbaa !2129
  %30 = load i64, i64* %result_len, align 8, !dbg !11371, !tbaa !2129
  %call8 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %30), !dbg !11373
  %31 = bitcast %struct._object* %call8 to %struct.PyByteArrayObject*, !dbg !11374
  store %struct.PyByteArrayObject* %31, %struct.PyByteArrayObject** %result, align 8, !dbg !11375, !tbaa !2119
  %cmp9 = icmp eq %struct.PyByteArrayObject* %31, null, !dbg !11376
  br i1 %cmp9, label %if.then.10, label %if.end.11, !dbg !11377

if.then.10:                                       ; preds = %if.end.6
  store %struct.PyByteArrayObject* null, %struct.PyByteArrayObject** %retval, !dbg !11378
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11378

if.end.11:                                        ; preds = %if.end.6
  %32 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11379, !tbaa !2119
  %33 = bitcast %struct.PyByteArrayObject* %32 to %struct.PyVarObject*, !dbg !11380
  %ob_size12 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %33, i32 0, i32 1, !dbg !11381
  %34 = load i64, i64* %ob_size12, align 8, !dbg !11381, !tbaa !2239
  %tobool13 = icmp ne i64 %34, 0, !dbg !11382
  br i1 %tobool13, label %cond.true.14, label %cond.false.16, !dbg !11382

cond.true.14:                                     ; preds = %if.end.11
  %35 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11383, !tbaa !2119
  %ob_start15 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %35, i32 0, i32 3, !dbg !11384
  %36 = load i8*, i8** %ob_start15, align 8, !dbg !11384, !tbaa !2250
  br label %cond.end.17, !dbg !11382

cond.false.16:                                    ; preds = %if.end.11
  br label %cond.end.17, !dbg !11385

cond.end.17:                                      ; preds = %cond.false.16, %cond.true.14
  %cond18 = phi i8* [ %36, %cond.true.14 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.16 ], !dbg !11382
  store i8* %cond18, i8** %result_s, align 8, !dbg !11386, !tbaa !2119
  %37 = load i8*, i8** %self_s, align 8, !dbg !11387, !tbaa !2119
  store i8* %37, i8** %start, align 8, !dbg !11388, !tbaa !2119
  %38 = load i8*, i8** %self_s, align 8, !dbg !11389, !tbaa !2119
  %39 = load i64, i64* %self_len, align 8, !dbg !11390, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %38, i64 %39, !dbg !11391
  store i8* %add.ptr, i8** %end, align 8, !dbg !11392, !tbaa !2119
  br label %while.cond, !dbg !11393

while.cond:                                       ; preds = %if.end.39, %cond.end.17
  %40 = load i64, i64* %count, align 8, !dbg !11394, !tbaa !2129
  %dec = add i64 %40, -1, !dbg !11394
  store i64 %dec, i64* %count, align 8, !dbg !11394, !tbaa !2129
  %cmp19 = icmp sgt i64 %40, 0, !dbg !11396
  br i1 %cmp19, label %while.body, label %while.end, !dbg !11393

while.body:                                       ; preds = %while.cond
  %41 = load i8*, i8** %start, align 8, !dbg !11397, !tbaa !2119
  %42 = load i8, i8* %from_c.addr, align 1, !dbg !11399, !tbaa !2233
  %conv = sext i8 %42 to i32, !dbg !11399
  %43 = load i8*, i8** %end, align 8, !dbg !11400, !tbaa !2119
  %44 = load i8*, i8** %start, align 8, !dbg !11401, !tbaa !2119
  %sub.ptr.lhs.cast = ptrtoint i8* %43 to i64, !dbg !11402
  %sub.ptr.rhs.cast = ptrtoint i8* %44 to i64, !dbg !11402
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !11402
  %call20 = call i8* @memchr(i8* %41, i32 %conv, i64 %sub.ptr.sub) #8, !dbg !11403
  store i8* %call20, i8** %next, align 8, !dbg !11404, !tbaa !2119
  %45 = load i8*, i8** %next, align 8, !dbg !11405, !tbaa !2119
  %cmp21 = icmp eq i8* %45, null, !dbg !11407
  br i1 %cmp21, label %if.then.23, label %if.end.24, !dbg !11408

if.then.23:                                       ; preds = %while.body
  br label %while.end, !dbg !11409

if.end.24:                                        ; preds = %while.body
  %46 = load i8*, i8** %next, align 8, !dbg !11410, !tbaa !2119
  %47 = load i8*, i8** %start, align 8, !dbg !11412, !tbaa !2119
  %cmp25 = icmp eq i8* %46, %47, !dbg !11413
  br i1 %cmp25, label %if.then.27, label %if.else, !dbg !11414

if.then.27:                                       ; preds = %if.end.24
  %48 = load i8*, i8** %result_s, align 8, !dbg !11415, !tbaa !2119
  %49 = load i8*, i8** %to_s.addr, align 8, !dbg !11417, !tbaa !2119
  %50 = load i64, i64* %to_len.addr, align 8, !dbg !11418, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 %50, i32 1, i1 false), !dbg !11419
  %51 = load i64, i64* %to_len.addr, align 8, !dbg !11420, !tbaa !2129
  %52 = load i8*, i8** %result_s, align 8, !dbg !11421, !tbaa !2119
  %add.ptr28 = getelementptr i8, i8* %52, i64 %51, !dbg !11421
  store i8* %add.ptr28, i8** %result_s, align 8, !dbg !11421, !tbaa !2119
  %53 = load i8*, i8** %start, align 8, !dbg !11422, !tbaa !2119
  %add.ptr29 = getelementptr i8, i8* %53, i64 1, !dbg !11422
  store i8* %add.ptr29, i8** %start, align 8, !dbg !11422, !tbaa !2119
  br label %if.end.39, !dbg !11423

if.else:                                          ; preds = %if.end.24
  %54 = load i8*, i8** %result_s, align 8, !dbg !11424, !tbaa !2119
  %55 = load i8*, i8** %start, align 8, !dbg !11426, !tbaa !2119
  %56 = load i8*, i8** %next, align 8, !dbg !11427, !tbaa !2119
  %57 = load i8*, i8** %start, align 8, !dbg !11428, !tbaa !2119
  %sub.ptr.lhs.cast30 = ptrtoint i8* %56 to i64, !dbg !11429
  %sub.ptr.rhs.cast31 = ptrtoint i8* %57 to i64, !dbg !11429
  %sub.ptr.sub32 = sub i64 %sub.ptr.lhs.cast30, %sub.ptr.rhs.cast31, !dbg !11429
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %54, i8* %55, i64 %sub.ptr.sub32, i32 1, i1 false), !dbg !11430
  %58 = load i8*, i8** %next, align 8, !dbg !11431, !tbaa !2119
  %59 = load i8*, i8** %start, align 8, !dbg !11432, !tbaa !2119
  %sub.ptr.lhs.cast33 = ptrtoint i8* %58 to i64, !dbg !11433
  %sub.ptr.rhs.cast34 = ptrtoint i8* %59 to i64, !dbg !11433
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast33, %sub.ptr.rhs.cast34, !dbg !11433
  %60 = load i8*, i8** %result_s, align 8, !dbg !11434, !tbaa !2119
  %add.ptr36 = getelementptr i8, i8* %60, i64 %sub.ptr.sub35, !dbg !11434
  store i8* %add.ptr36, i8** %result_s, align 8, !dbg !11434, !tbaa !2119
  %61 = load i8*, i8** %result_s, align 8, !dbg !11435, !tbaa !2119
  %62 = load i8*, i8** %to_s.addr, align 8, !dbg !11436, !tbaa !2119
  %63 = load i64, i64* %to_len.addr, align 8, !dbg !11437, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %61, i8* %62, i64 %63, i32 1, i1 false), !dbg !11438
  %64 = load i64, i64* %to_len.addr, align 8, !dbg !11439, !tbaa !2129
  %65 = load i8*, i8** %result_s, align 8, !dbg !11440, !tbaa !2119
  %add.ptr37 = getelementptr i8, i8* %65, i64 %64, !dbg !11440
  store i8* %add.ptr37, i8** %result_s, align 8, !dbg !11440, !tbaa !2119
  %66 = load i8*, i8** %next, align 8, !dbg !11441, !tbaa !2119
  %add.ptr38 = getelementptr i8, i8* %66, i64 1, !dbg !11442
  store i8* %add.ptr38, i8** %start, align 8, !dbg !11443, !tbaa !2119
  br label %if.end.39

if.end.39:                                        ; preds = %if.else, %if.then.27
  br label %while.cond, !dbg !11393

while.end:                                        ; preds = %if.then.23, %while.cond
  %67 = load i8*, i8** %result_s, align 8, !dbg !11444, !tbaa !2119
  %68 = load i8*, i8** %start, align 8, !dbg !11445, !tbaa !2119
  %69 = load i8*, i8** %end, align 8, !dbg !11446, !tbaa !2119
  %70 = load i8*, i8** %start, align 8, !dbg !11447, !tbaa !2119
  %sub.ptr.lhs.cast40 = ptrtoint i8* %69 to i64, !dbg !11448
  %sub.ptr.rhs.cast41 = ptrtoint i8* %70 to i64, !dbg !11448
  %sub.ptr.sub42 = sub i64 %sub.ptr.lhs.cast40, %sub.ptr.rhs.cast41, !dbg !11448
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %67, i8* %68, i64 %sub.ptr.sub42, i32 1, i1 false), !dbg !11449
  %71 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11450, !tbaa !2119
  store %struct.PyByteArrayObject* %71, %struct.PyByteArrayObject** %retval, !dbg !11451
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11451

cleanup:                                          ; preds = %while.end, %if.then.10, %if.then.5, %if.then
  %72 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !11452
  call void @llvm.lifetime.end(i64 8, i8* %72) #3, !dbg !11452
  %73 = bitcast i64* %count to i8*, !dbg !11452
  call void @llvm.lifetime.end(i64 8, i8* %73) #3, !dbg !11452
  %74 = bitcast i64* %result_len to i8*, !dbg !11452
  call void @llvm.lifetime.end(i64 8, i8* %74) #3, !dbg !11452
  %75 = bitcast i64* %self_len to i8*, !dbg !11452
  call void @llvm.lifetime.end(i64 8, i8* %75) #3, !dbg !11452
  %76 = bitcast i8** %end to i8*, !dbg !11452
  call void @llvm.lifetime.end(i64 8, i8* %76) #3, !dbg !11452
  %77 = bitcast i8** %next to i8*, !dbg !11452
  call void @llvm.lifetime.end(i64 8, i8* %77) #3, !dbg !11452
  %78 = bitcast i8** %start to i8*, !dbg !11452
  call void @llvm.lifetime.end(i64 8, i8* %78) #3, !dbg !11452
  %79 = bitcast i8** %result_s to i8*, !dbg !11452
  call void @llvm.lifetime.end(i64 8, i8* %79) #3, !dbg !11452
  %80 = bitcast i8** %self_s to i8*, !dbg !11452
  call void @llvm.lifetime.end(i64 8, i8* %80) #3, !dbg !11452
  %81 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %retval, !dbg !11452
  ret %struct.PyByteArrayObject* %81, !dbg !11452
}

; Function Attrs: nounwind uwtable
define internal %struct.PyByteArrayObject* @replace_substring(%struct.PyByteArrayObject* %self, i8* %from_s, i64 %from_len, i8* %to_s, i64 %to_len, i64 %maxcount) #0 {
entry:
  %retval = alloca %struct.PyByteArrayObject*, align 8
  %self.addr = alloca %struct.PyByteArrayObject*, align 8
  %from_s.addr = alloca i8*, align 8
  %from_len.addr = alloca i64, align 8
  %to_s.addr = alloca i8*, align 8
  %to_len.addr = alloca i64, align 8
  %maxcount.addr = alloca i64, align 8
  %self_s = alloca i8*, align 8
  %result_s = alloca i8*, align 8
  %start = alloca i8*, align 8
  %next = alloca i8*, align 8
  %end = alloca i8*, align 8
  %self_len = alloca i64, align 8
  %result_len = alloca i64, align 8
  %count = alloca i64, align 8
  %offset = alloca i64, align 8
  %result = alloca %struct.PyByteArrayObject*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PyByteArrayObject* %self, %struct.PyByteArrayObject** %self.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %self.addr, metadata !1388, metadata !2123), !dbg !11453
  store i8* %from_s, i8** %from_s.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %from_s.addr, metadata !1389, metadata !2123), !dbg !11454
  store i64 %from_len, i64* %from_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %from_len.addr, metadata !1390, metadata !2123), !dbg !11455
  store i8* %to_s, i8** %to_s.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %to_s.addr, metadata !1391, metadata !2123), !dbg !11456
  store i64 %to_len, i64* %to_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %to_len.addr, metadata !1392, metadata !2123), !dbg !11457
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1393, metadata !2123), !dbg !11458
  %0 = bitcast i8** %self_s to i8*, !dbg !11459
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !11459
  call void @llvm.dbg.declare(metadata i8** %self_s, metadata !1394, metadata !2123), !dbg !11460
  %1 = bitcast i8** %result_s to i8*, !dbg !11459
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !11459
  call void @llvm.dbg.declare(metadata i8** %result_s, metadata !1395, metadata !2123), !dbg !11461
  %2 = bitcast i8** %start to i8*, !dbg !11462
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !11462
  call void @llvm.dbg.declare(metadata i8** %start, metadata !1396, metadata !2123), !dbg !11463
  %3 = bitcast i8** %next to i8*, !dbg !11462
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !11462
  call void @llvm.dbg.declare(metadata i8** %next, metadata !1397, metadata !2123), !dbg !11464
  %4 = bitcast i8** %end to i8*, !dbg !11462
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !11462
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1398, metadata !2123), !dbg !11465
  %5 = bitcast i64* %self_len to i8*, !dbg !11466
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !11466
  call void @llvm.dbg.declare(metadata i64* %self_len, metadata !1399, metadata !2123), !dbg !11467
  %6 = bitcast i64* %result_len to i8*, !dbg !11466
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !11466
  call void @llvm.dbg.declare(metadata i64* %result_len, metadata !1400, metadata !2123), !dbg !11468
  %7 = bitcast i64* %count to i8*, !dbg !11469
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !11469
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1401, metadata !2123), !dbg !11470
  %8 = bitcast i64* %offset to i8*, !dbg !11469
  call void @llvm.lifetime.start(i64 8, i8* %8) #3, !dbg !11469
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !1402, metadata !2123), !dbg !11471
  %9 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !11472
  call void @llvm.lifetime.start(i64 8, i8* %9) #3, !dbg !11472
  call void @llvm.dbg.declare(metadata %struct.PyByteArrayObject** %result, metadata !1403, metadata !2123), !dbg !11473
  %10 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11474, !tbaa !2119
  %11 = bitcast %struct.PyByteArrayObject* %10 to %struct.PyVarObject*, !dbg !11475
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %11, i32 0, i32 1, !dbg !11476
  %12 = load i64, i64* %ob_size, align 8, !dbg !11476, !tbaa !2239
  %tobool = icmp ne i64 %12, 0, !dbg !11477
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11477

cond.true:                                        ; preds = %entry
  %13 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11478, !tbaa !2119
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %13, i32 0, i32 3, !dbg !11480
  %14 = load i8*, i8** %ob_start, align 8, !dbg !11480, !tbaa !2250
  br label %cond.end, !dbg !11477

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11481

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %14, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false ], !dbg !11477
  store i8* %cond, i8** %self_s, align 8, !dbg !11483, !tbaa !2119
  %15 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11486, !tbaa !2119
  %16 = bitcast %struct.PyByteArrayObject* %15 to %struct.PyVarObject*, !dbg !11487
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %16, i32 0, i32 1, !dbg !11488
  %17 = load i64, i64* %ob_size1, align 8, !dbg !11488, !tbaa !2239
  store i64 %17, i64* %self_len, align 8, !dbg !11489, !tbaa !2129
  %18 = load i8*, i8** %self_s, align 8, !dbg !11490, !tbaa !2119
  %19 = load i64, i64* %self_len, align 8, !dbg !11491, !tbaa !2129
  %20 = load i8*, i8** %from_s.addr, align 8, !dbg !11492, !tbaa !2119
  %21 = load i64, i64* %from_len.addr, align 8, !dbg !11493, !tbaa !2129
  %22 = load i64, i64* %maxcount.addr, align 8, !dbg !11494, !tbaa !2129
  %call = call i64 @stringlib_count(i8* %18, i64 %19, i8* %20, i64 %21, i64 %22), !dbg !11495
  store i64 %call, i64* %count, align 8, !dbg !11496, !tbaa !2129
  %23 = load i64, i64* %count, align 8, !dbg !11497, !tbaa !2129
  %cmp = icmp eq i64 %23, 0, !dbg !11499
  br i1 %cmp, label %if.then, label %if.end, !dbg !11500

if.then:                                          ; preds = %cond.end
  %24 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %self.addr, align 8, !dbg !11501, !tbaa !2119
  %call2 = call %struct.PyByteArrayObject* @return_self(%struct.PyByteArrayObject* %24), !dbg !11503
  store %struct.PyByteArrayObject* %call2, %struct.PyByteArrayObject** %retval, !dbg !11504
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11504

if.end:                                           ; preds = %cond.end
  %25 = load i64, i64* %to_len.addr, align 8, !dbg !11505, !tbaa !2129
  %26 = load i64, i64* %from_len.addr, align 8, !dbg !11507, !tbaa !2129
  %sub = sub i64 %25, %26, !dbg !11508
  %27 = load i64, i64* %self_len, align 8, !dbg !11509, !tbaa !2129
  %sub3 = sub i64 9223372036854775807, %27, !dbg !11510
  %28 = load i64, i64* %count, align 8, !dbg !11511, !tbaa !2129
  %div = sdiv i64 %sub3, %28, !dbg !11512
  %cmp4 = icmp sgt i64 %sub, %div, !dbg !11513
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !11514

if.then.5:                                        ; preds = %if.end
  %29 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !11515, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %29, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.105, i32 0, i32 0)), !dbg !11517
  store %struct.PyByteArrayObject* null, %struct.PyByteArrayObject** %retval, !dbg !11518
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11518

if.end.6:                                         ; preds = %if.end
  %30 = load i64, i64* %self_len, align 8, !dbg !11519, !tbaa !2129
  %31 = load i64, i64* %count, align 8, !dbg !11520, !tbaa !2129
  %32 = load i64, i64* %to_len.addr, align 8, !dbg !11521, !tbaa !2129
  %33 = load i64, i64* %from_len.addr, align 8, !dbg !11522, !tbaa !2129
  %sub7 = sub i64 %32, %33, !dbg !11523
  %mul = mul i64 %31, %sub7, !dbg !11524
  %add = add i64 %30, %mul, !dbg !11525
  store i64 %add, i64* %result_len, align 8, !dbg !11526, !tbaa !2129
  %34 = load i64, i64* %result_len, align 8, !dbg !11527, !tbaa !2129
  %call8 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %34), !dbg !11529
  %35 = bitcast %struct._object* %call8 to %struct.PyByteArrayObject*, !dbg !11530
  store %struct.PyByteArrayObject* %35, %struct.PyByteArrayObject** %result, align 8, !dbg !11531, !tbaa !2119
  %cmp9 = icmp eq %struct.PyByteArrayObject* %35, null, !dbg !11532
  br i1 %cmp9, label %if.then.10, label %if.end.11, !dbg !11533

if.then.10:                                       ; preds = %if.end.6
  store %struct.PyByteArrayObject* null, %struct.PyByteArrayObject** %retval, !dbg !11534
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11534

if.end.11:                                        ; preds = %if.end.6
  %36 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11535, !tbaa !2119
  %37 = bitcast %struct.PyByteArrayObject* %36 to %struct.PyVarObject*, !dbg !11536
  %ob_size12 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %37, i32 0, i32 1, !dbg !11537
  %38 = load i64, i64* %ob_size12, align 8, !dbg !11537, !tbaa !2239
  %tobool13 = icmp ne i64 %38, 0, !dbg !11538
  br i1 %tobool13, label %cond.true.14, label %cond.false.16, !dbg !11538

cond.true.14:                                     ; preds = %if.end.11
  %39 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11539, !tbaa !2119
  %ob_start15 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %39, i32 0, i32 3, !dbg !11540
  %40 = load i8*, i8** %ob_start15, align 8, !dbg !11540, !tbaa !2250
  br label %cond.end.17, !dbg !11538

cond.false.16:                                    ; preds = %if.end.11
  br label %cond.end.17, !dbg !11541

cond.end.17:                                      ; preds = %cond.false.16, %cond.true.14
  %cond18 = phi i8* [ %40, %cond.true.14 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.16 ], !dbg !11538
  store i8* %cond18, i8** %result_s, align 8, !dbg !11542, !tbaa !2119
  %41 = load i8*, i8** %self_s, align 8, !dbg !11543, !tbaa !2119
  store i8* %41, i8** %start, align 8, !dbg !11544, !tbaa !2119
  %42 = load i8*, i8** %self_s, align 8, !dbg !11545, !tbaa !2119
  %43 = load i64, i64* %self_len, align 8, !dbg !11546, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %42, i64 %43, !dbg !11547
  store i8* %add.ptr, i8** %end, align 8, !dbg !11548, !tbaa !2119
  br label %while.cond, !dbg !11549

while.cond:                                       ; preds = %if.end.38, %cond.end.17
  %44 = load i64, i64* %count, align 8, !dbg !11550, !tbaa !2129
  %dec = add i64 %44, -1, !dbg !11550
  store i64 %dec, i64* %count, align 8, !dbg !11550, !tbaa !2129
  %cmp19 = icmp sgt i64 %44, 0, !dbg !11552
  br i1 %cmp19, label %while.body, label %while.end, !dbg !11549

while.body:                                       ; preds = %while.cond
  %45 = load i8*, i8** %start, align 8, !dbg !11553, !tbaa !2119
  %46 = load i8*, i8** %end, align 8, !dbg !11555, !tbaa !2119
  %47 = load i8*, i8** %start, align 8, !dbg !11556, !tbaa !2119
  %sub.ptr.lhs.cast = ptrtoint i8* %46 to i64, !dbg !11557
  %sub.ptr.rhs.cast = ptrtoint i8* %47 to i64, !dbg !11557
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !11557
  %48 = load i8*, i8** %from_s.addr, align 8, !dbg !11558, !tbaa !2119
  %49 = load i64, i64* %from_len.addr, align 8, !dbg !11559, !tbaa !2129
  %call20 = call i64 @stringlib_find(i8* %45, i64 %sub.ptr.sub, i8* %48, i64 %49, i64 0), !dbg !11560
  store i64 %call20, i64* %offset, align 8, !dbg !11561, !tbaa !2129
  %50 = load i64, i64* %offset, align 8, !dbg !11562, !tbaa !2129
  %cmp21 = icmp eq i64 %50, -1, !dbg !11564
  br i1 %cmp21, label %if.then.22, label %if.end.23, !dbg !11565

if.then.22:                                       ; preds = %while.body
  br label %while.end, !dbg !11566

if.end.23:                                        ; preds = %while.body
  %51 = load i8*, i8** %start, align 8, !dbg !11567, !tbaa !2119
  %52 = load i64, i64* %offset, align 8, !dbg !11568, !tbaa !2129
  %add.ptr24 = getelementptr i8, i8* %51, i64 %52, !dbg !11569
  store i8* %add.ptr24, i8** %next, align 8, !dbg !11570, !tbaa !2119
  %53 = load i8*, i8** %next, align 8, !dbg !11571, !tbaa !2119
  %54 = load i8*, i8** %start, align 8, !dbg !11573, !tbaa !2119
  %cmp25 = icmp eq i8* %53, %54, !dbg !11574
  br i1 %cmp25, label %if.then.26, label %if.else, !dbg !11575

if.then.26:                                       ; preds = %if.end.23
  %55 = load i8*, i8** %result_s, align 8, !dbg !11576, !tbaa !2119
  %56 = load i8*, i8** %to_s.addr, align 8, !dbg !11578, !tbaa !2119
  %57 = load i64, i64* %to_len.addr, align 8, !dbg !11579, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %55, i8* %56, i64 %57, i32 1, i1 false), !dbg !11580
  %58 = load i64, i64* %to_len.addr, align 8, !dbg !11581, !tbaa !2129
  %59 = load i8*, i8** %result_s, align 8, !dbg !11582, !tbaa !2119
  %add.ptr27 = getelementptr i8, i8* %59, i64 %58, !dbg !11582
  store i8* %add.ptr27, i8** %result_s, align 8, !dbg !11582, !tbaa !2119
  %60 = load i64, i64* %from_len.addr, align 8, !dbg !11583, !tbaa !2129
  %61 = load i8*, i8** %start, align 8, !dbg !11584, !tbaa !2119
  %add.ptr28 = getelementptr i8, i8* %61, i64 %60, !dbg !11584
  store i8* %add.ptr28, i8** %start, align 8, !dbg !11584, !tbaa !2119
  br label %if.end.38, !dbg !11585

if.else:                                          ; preds = %if.end.23
  %62 = load i8*, i8** %result_s, align 8, !dbg !11586, !tbaa !2119
  %63 = load i8*, i8** %start, align 8, !dbg !11588, !tbaa !2119
  %64 = load i8*, i8** %next, align 8, !dbg !11589, !tbaa !2119
  %65 = load i8*, i8** %start, align 8, !dbg !11590, !tbaa !2119
  %sub.ptr.lhs.cast29 = ptrtoint i8* %64 to i64, !dbg !11591
  %sub.ptr.rhs.cast30 = ptrtoint i8* %65 to i64, !dbg !11591
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30, !dbg !11591
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %63, i64 %sub.ptr.sub31, i32 1, i1 false), !dbg !11592
  %66 = load i8*, i8** %next, align 8, !dbg !11593, !tbaa !2119
  %67 = load i8*, i8** %start, align 8, !dbg !11594, !tbaa !2119
  %sub.ptr.lhs.cast32 = ptrtoint i8* %66 to i64, !dbg !11595
  %sub.ptr.rhs.cast33 = ptrtoint i8* %67 to i64, !dbg !11595
  %sub.ptr.sub34 = sub i64 %sub.ptr.lhs.cast32, %sub.ptr.rhs.cast33, !dbg !11595
  %68 = load i8*, i8** %result_s, align 8, !dbg !11596, !tbaa !2119
  %add.ptr35 = getelementptr i8, i8* %68, i64 %sub.ptr.sub34, !dbg !11596
  store i8* %add.ptr35, i8** %result_s, align 8, !dbg !11596, !tbaa !2119
  %69 = load i8*, i8** %result_s, align 8, !dbg !11597, !tbaa !2119
  %70 = load i8*, i8** %to_s.addr, align 8, !dbg !11598, !tbaa !2119
  %71 = load i64, i64* %to_len.addr, align 8, !dbg !11599, !tbaa !2129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %69, i8* %70, i64 %71, i32 1, i1 false), !dbg !11600
  %72 = load i64, i64* %to_len.addr, align 8, !dbg !11601, !tbaa !2129
  %73 = load i8*, i8** %result_s, align 8, !dbg !11602, !tbaa !2119
  %add.ptr36 = getelementptr i8, i8* %73, i64 %72, !dbg !11602
  store i8* %add.ptr36, i8** %result_s, align 8, !dbg !11602, !tbaa !2119
  %74 = load i8*, i8** %next, align 8, !dbg !11603, !tbaa !2119
  %75 = load i64, i64* %from_len.addr, align 8, !dbg !11604, !tbaa !2129
  %add.ptr37 = getelementptr i8, i8* %74, i64 %75, !dbg !11605
  store i8* %add.ptr37, i8** %start, align 8, !dbg !11606, !tbaa !2119
  br label %if.end.38

if.end.38:                                        ; preds = %if.else, %if.then.26
  br label %while.cond, !dbg !11549

while.end:                                        ; preds = %if.then.22, %while.cond
  %76 = load i8*, i8** %result_s, align 8, !dbg !11607, !tbaa !2119
  %77 = load i8*, i8** %start, align 8, !dbg !11608, !tbaa !2119
  %78 = load i8*, i8** %end, align 8, !dbg !11609, !tbaa !2119
  %79 = load i8*, i8** %start, align 8, !dbg !11610, !tbaa !2119
  %sub.ptr.lhs.cast39 = ptrtoint i8* %78 to i64, !dbg !11611
  %sub.ptr.rhs.cast40 = ptrtoint i8* %79 to i64, !dbg !11611
  %sub.ptr.sub41 = sub i64 %sub.ptr.lhs.cast39, %sub.ptr.rhs.cast40, !dbg !11611
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %76, i8* %77, i64 %sub.ptr.sub41, i32 1, i1 false), !dbg !11612
  %80 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %result, align 8, !dbg !11613, !tbaa !2119
  store %struct.PyByteArrayObject* %80, %struct.PyByteArrayObject** %retval, !dbg !11614
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11614

cleanup:                                          ; preds = %while.end, %if.then.10, %if.then.5, %if.then
  %81 = bitcast %struct.PyByteArrayObject** %result to i8*, !dbg !11615
  call void @llvm.lifetime.end(i64 8, i8* %81) #3, !dbg !11615
  %82 = bitcast i64* %offset to i8*, !dbg !11615
  call void @llvm.lifetime.end(i64 8, i8* %82) #3, !dbg !11615
  %83 = bitcast i64* %count to i8*, !dbg !11615
  call void @llvm.lifetime.end(i64 8, i8* %83) #3, !dbg !11615
  %84 = bitcast i64* %result_len to i8*, !dbg !11615
  call void @llvm.lifetime.end(i64 8, i8* %84) #3, !dbg !11615
  %85 = bitcast i64* %self_len to i8*, !dbg !11615
  call void @llvm.lifetime.end(i64 8, i8* %85) #3, !dbg !11615
  %86 = bitcast i8** %end to i8*, !dbg !11615
  call void @llvm.lifetime.end(i64 8, i8* %86) #3, !dbg !11615
  %87 = bitcast i8** %next to i8*, !dbg !11615
  call void @llvm.lifetime.end(i64 8, i8* %87) #3, !dbg !11615
  %88 = bitcast i8** %start to i8*, !dbg !11615
  call void @llvm.lifetime.end(i64 8, i8* %88) #3, !dbg !11615
  %89 = bitcast i8** %result_s to i8*, !dbg !11615
  call void @llvm.lifetime.end(i64 8, i8* %89) #3, !dbg !11615
  %90 = bitcast i8** %self_s to i8*, !dbg !11615
  call void @llvm.lifetime.end(i64 8, i8* %90) #3, !dbg !11615
  %91 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %retval, !dbg !11615
  ret %struct.PyByteArrayObject* %91, !dbg !11615
}

; Function Attrs: inlinehint nounwind uwtable
define internal i64 @countchar(i8* %target, i64 %target_len, i8 signext %c, i64 %maxcount) #4 {
entry:
  %target.addr = alloca i8*, align 8
  %target_len.addr = alloca i64, align 8
  %c.addr = alloca i8, align 1
  %maxcount.addr = alloca i64, align 8
  %count = alloca i64, align 8
  %start = alloca i8*, align 8
  %end = alloca i8*, align 8
  store i8* %target, i8** %target.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %target.addr, metadata !1315, metadata !2123), !dbg !11616
  store i64 %target_len, i64* %target_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %target_len.addr, metadata !1316, metadata !2123), !dbg !11617
  store i8 %c, i8* %c.addr, align 1, !tbaa !2233
  call void @llvm.dbg.declare(metadata i8* %c.addr, metadata !1317, metadata !2123), !dbg !11618
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1318, metadata !2123), !dbg !11619
  %0 = bitcast i64* %count to i8*, !dbg !11620
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !11620
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1319, metadata !2123), !dbg !11621
  store i64 0, i64* %count, align 8, !dbg !11621, !tbaa !2129
  %1 = bitcast i8** %start to i8*, !dbg !11622
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !11622
  call void @llvm.dbg.declare(metadata i8** %start, metadata !1320, metadata !2123), !dbg !11623
  %2 = load i8*, i8** %target.addr, align 8, !dbg !11624, !tbaa !2119
  store i8* %2, i8** %start, align 8, !dbg !11623, !tbaa !2119
  %3 = bitcast i8** %end to i8*, !dbg !11625
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !11625
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1321, metadata !2123), !dbg !11626
  %4 = load i8*, i8** %target.addr, align 8, !dbg !11627, !tbaa !2119
  %5 = load i64, i64* %target_len.addr, align 8, !dbg !11628, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %4, i64 %5, !dbg !11629
  store i8* %add.ptr, i8** %end, align 8, !dbg !11626, !tbaa !2119
  br label %while.cond, !dbg !11630

while.cond:                                       ; preds = %if.end, %entry
  %6 = load i8*, i8** %start, align 8, !dbg !11631, !tbaa !2119
  %7 = load i8, i8* %c.addr, align 1, !dbg !11634, !tbaa !2233
  %conv = sext i8 %7 to i32, !dbg !11634
  %8 = load i8*, i8** %end, align 8, !dbg !11635, !tbaa !2119
  %9 = load i8*, i8** %start, align 8, !dbg !11636, !tbaa !2119
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64, !dbg !11637
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64, !dbg !11637
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !11637
  %call = call i8* @memchr(i8* %6, i32 %conv, i64 %sub.ptr.sub) #8, !dbg !11638
  store i8* %call, i8** %start, align 8, !dbg !11639, !tbaa !2119
  %cmp = icmp ne i8* %call, null, !dbg !11640
  br i1 %cmp, label %while.body, label %while.end, !dbg !11630

while.body:                                       ; preds = %while.cond
  %10 = load i64, i64* %count, align 8, !dbg !11641, !tbaa !2129
  %inc = add i64 %10, 1, !dbg !11641
  store i64 %inc, i64* %count, align 8, !dbg !11641, !tbaa !2129
  %11 = load i64, i64* %count, align 8, !dbg !11643, !tbaa !2129
  %12 = load i64, i64* %maxcount.addr, align 8, !dbg !11645, !tbaa !2129
  %cmp2 = icmp sge i64 %11, %12, !dbg !11646
  br i1 %cmp2, label %if.then, label %if.end, !dbg !11647

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !11648

if.end:                                           ; preds = %while.body
  %13 = load i8*, i8** %start, align 8, !dbg !11649, !tbaa !2119
  %add.ptr4 = getelementptr i8, i8* %13, i64 1, !dbg !11649
  store i8* %add.ptr4, i8** %start, align 8, !dbg !11649, !tbaa !2119
  br label %while.cond, !dbg !11630

while.end:                                        ; preds = %if.then, %while.cond
  %14 = load i64, i64* %count, align 8, !dbg !11650, !tbaa !2129
  %15 = bitcast i8** %end to i8*, !dbg !11651
  call void @llvm.lifetime.end(i64 8, i8* %15) #3, !dbg !11651
  %16 = bitcast i8** %start to i8*, !dbg !11651
  call void @llvm.lifetime.end(i64 8, i8* %16) #3, !dbg !11651
  %17 = bitcast i64* %count to i8*, !dbg !11651
  call void @llvm.lifetime.end(i64 8, i8* %17) #3, !dbg !11651
  ret i64 %14, !dbg !11652
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct._object* @stringlib_rpartition(%struct._object* %str_obj, i8* %str, i64 %str_len, %struct._object* %sep_obj, i8* %sep, i64 %sep_len) #4 {
entry:
  %retval = alloca %struct._object*, align 8
  %str_obj.addr = alloca %struct._object*, align 8
  %str.addr = alloca i8*, align 8
  %str_len.addr = alloca i64, align 8
  %sep_obj.addr = alloca %struct._object*, align 8
  %sep.addr = alloca i8*, align 8
  %sep_len.addr = alloca i64, align 8
  %out = alloca %struct._object*, align 8
  %pos = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp34 = alloca %struct._object*, align 8
  store %struct._object* %str_obj, %struct._object** %str_obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %str_obj.addr, metadata !1440, metadata !2123), !dbg !11653
  store i8* %str, i8** %str.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !1441, metadata !2123), !dbg !11654
  store i64 %str_len, i64* %str_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %str_len.addr, metadata !1442, metadata !2123), !dbg !11655
  store %struct._object* %sep_obj, %struct._object** %sep_obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %sep_obj.addr, metadata !1443, metadata !2123), !dbg !11656
  store i8* %sep, i8** %sep.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %sep.addr, metadata !1444, metadata !2123), !dbg !11657
  store i64 %sep_len, i64* %sep_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %sep_len.addr, metadata !1445, metadata !2123), !dbg !11658
  %0 = bitcast %struct._object** %out to i8*, !dbg !11659
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !11659
  call void @llvm.dbg.declare(metadata %struct._object** %out, metadata !1446, metadata !2123), !dbg !11660
  %1 = bitcast i64* %pos to i8*, !dbg !11661
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !11661
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !1447, metadata !2123), !dbg !11662
  %2 = load i64, i64* %sep_len.addr, align 8, !dbg !11663, !tbaa !2129
  %cmp = icmp eq i64 %2, 0, !dbg !11665
  br i1 %cmp, label %if.then, label %if.end, !dbg !11666

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !11667, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.98, i32 0, i32 0)), !dbg !11669
  store %struct._object* null, %struct._object** %retval, !dbg !11670
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11670

if.end:                                           ; preds = %entry
  %call = call %struct._object* @PyTuple_New(i64 3), !dbg !11671
  store %struct._object* %call, %struct._object** %out, align 8, !dbg !11672, !tbaa !2119
  %4 = load %struct._object*, %struct._object** %out, align 8, !dbg !11673, !tbaa !2119
  %tobool = icmp ne %struct._object* %4, null, !dbg !11673
  br i1 %tobool, label %if.end.2, label %if.then.1, !dbg !11675

if.then.1:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !11676
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11676

if.end.2:                                         ; preds = %if.end
  %5 = load i8*, i8** %str.addr, align 8, !dbg !11677, !tbaa !2119
  %6 = load i64, i64* %str_len.addr, align 8, !dbg !11678, !tbaa !2129
  %7 = load i8*, i8** %sep.addr, align 8, !dbg !11679, !tbaa !2119
  %8 = load i64, i64* %sep_len.addr, align 8, !dbg !11680, !tbaa !2129
  %call3 = call i64 @fastsearch(i8* %5, i64 %6, i8* %7, i64 %8, i64 -1, i32 2), !dbg !11681
  store i64 %call3, i64* %pos, align 8, !dbg !11682, !tbaa !2129
  %9 = load i64, i64* %pos, align 8, !dbg !11683, !tbaa !2129
  %cmp4 = icmp slt i64 %9, 0, !dbg !11684
  br i1 %cmp4, label %if.then.5, label %if.end.20, !dbg !11685

if.then.5:                                        ; preds = %if.end.2
  %call6 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 0), !dbg !11686
  %10 = load %struct._object*, %struct._object** %out, align 8, !dbg !11687, !tbaa !2119
  %11 = bitcast %struct._object* %10 to %struct.PyTupleObject*, !dbg !11688
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %11, i32 0, i32 1, !dbg !11689
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !11690
  store %struct._object* %call6, %struct._object** %arrayidx, align 8, !dbg !11691, !tbaa !2119
  %call7 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 0), !dbg !11692
  %12 = load %struct._object*, %struct._object** %out, align 8, !dbg !11693, !tbaa !2119
  %13 = bitcast %struct._object* %12 to %struct.PyTupleObject*, !dbg !11694
  %ob_item8 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %13, i32 0, i32 1, !dbg !11695
  %arrayidx9 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item8, i32 0, i64 1, !dbg !11696
  store %struct._object* %call7, %struct._object** %arrayidx9, align 8, !dbg !11697, !tbaa !2119
  %14 = load i8*, i8** %str.addr, align 8, !dbg !11698, !tbaa !2119
  %15 = load i64, i64* %str_len.addr, align 8, !dbg !11699, !tbaa !2129
  %call10 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %14, i64 %15), !dbg !11700
  %16 = load %struct._object*, %struct._object** %out, align 8, !dbg !11701, !tbaa !2119
  %17 = bitcast %struct._object* %16 to %struct.PyTupleObject*, !dbg !11702
  %ob_item11 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %17, i32 0, i32 1, !dbg !11703
  %arrayidx12 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item11, i32 0, i64 2, !dbg !11704
  store %struct._object* %call10, %struct._object** %arrayidx12, align 8, !dbg !11705, !tbaa !2119
  %call13 = call %struct._object* @PyErr_Occurred(), !dbg !11706
  %tobool14 = icmp ne %struct._object* %call13, null, !dbg !11706
  br i1 %tobool14, label %if.then.15, label %if.end.19, !dbg !11707

if.then.15:                                       ; preds = %if.then.5
  br label %do.body, !dbg !11708

do.body:                                          ; preds = %if.then.15
  %18 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !11709
  call void @llvm.lifetime.start(i64 8, i8* %18) #3, !dbg !11709
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1448, metadata !2123), !dbg !11711
  %19 = load %struct._object*, %struct._object** %out, align 8, !dbg !11712, !tbaa !2119
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8, !dbg !11711, !tbaa !2119
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11713, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0, !dbg !11715
  %21 = load i64, i64* %ob_refcnt, align 8, !dbg !11716, !tbaa !2195
  %dec = add i64 %21, -1, !dbg !11716
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !11716, !tbaa !2195
  %cmp16 = icmp ne i64 %dec, 0, !dbg !11717
  br i1 %cmp16, label %if.then.17, label %if.else, !dbg !11718

if.then.17:                                       ; preds = %do.body
  br label %if.end.18, !dbg !11719

if.else:                                          ; preds = %do.body
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11721, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1, !dbg !11723
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !11723, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4, !dbg !11724
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !11724, !tbaa !2205
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11725, !tbaa !2119
  call void %24(%struct._object* %25), !dbg !11726
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.17
  %26 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !11727
  call void @llvm.lifetime.end(i64 8, i8* %26) #3, !dbg !11727
  br label %do.cond, !dbg !11729

do.cond:                                          ; preds = %if.end.18
  br label %do.end, !dbg !11730

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !11732
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11732

if.end.19:                                        ; preds = %if.then.5
  %27 = load %struct._object*, %struct._object** %out, align 8, !dbg !11733, !tbaa !2119
  store %struct._object* %27, %struct._object** %retval, !dbg !11734
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11734

if.end.20:                                        ; preds = %if.end.2
  %28 = load i8*, i8** %str.addr, align 8, !dbg !11735, !tbaa !2119
  %29 = load i64, i64* %pos, align 8, !dbg !11736, !tbaa !2129
  %call21 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %28, i64 %29), !dbg !11737
  %30 = load %struct._object*, %struct._object** %out, align 8, !dbg !11738, !tbaa !2119
  %31 = bitcast %struct._object* %30 to %struct.PyTupleObject*, !dbg !11739
  %ob_item22 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %31, i32 0, i32 1, !dbg !11740
  %arrayidx23 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item22, i32 0, i64 0, !dbg !11741
  store %struct._object* %call21, %struct._object** %arrayidx23, align 8, !dbg !11742, !tbaa !2119
  %32 = load %struct._object*, %struct._object** %sep_obj.addr, align 8, !dbg !11743, !tbaa !2119
  %ob_refcnt24 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0, !dbg !11744
  %33 = load i64, i64* %ob_refcnt24, align 8, !dbg !11745, !tbaa !2195
  %inc = add i64 %33, 1, !dbg !11745
  store i64 %inc, i64* %ob_refcnt24, align 8, !dbg !11745, !tbaa !2195
  %34 = load %struct._object*, %struct._object** %sep_obj.addr, align 8, !dbg !11746, !tbaa !2119
  %35 = load %struct._object*, %struct._object** %out, align 8, !dbg !11747, !tbaa !2119
  %36 = bitcast %struct._object* %35 to %struct.PyTupleObject*, !dbg !11748
  %ob_item25 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %36, i32 0, i32 1, !dbg !11749
  %arrayidx26 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item25, i32 0, i64 1, !dbg !11750
  store %struct._object* %34, %struct._object** %arrayidx26, align 8, !dbg !11751, !tbaa !2119
  %37 = load i64, i64* %sep_len.addr, align 8, !dbg !11752, !tbaa !2129
  %38 = load i64, i64* %pos, align 8, !dbg !11753, !tbaa !2129
  %add = add i64 %38, %37, !dbg !11753
  store i64 %add, i64* %pos, align 8, !dbg !11753, !tbaa !2129
  %39 = load i8*, i8** %str.addr, align 8, !dbg !11754, !tbaa !2119
  %40 = load i64, i64* %pos, align 8, !dbg !11755, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %39, i64 %40, !dbg !11756
  %41 = load i64, i64* %str_len.addr, align 8, !dbg !11757, !tbaa !2129
  %42 = load i64, i64* %pos, align 8, !dbg !11758, !tbaa !2129
  %sub = sub i64 %41, %42, !dbg !11759
  %call27 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr, i64 %sub), !dbg !11760
  %43 = load %struct._object*, %struct._object** %out, align 8, !dbg !11761, !tbaa !2119
  %44 = bitcast %struct._object* %43 to %struct.PyTupleObject*, !dbg !11762
  %ob_item28 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %44, i32 0, i32 1, !dbg !11763
  %arrayidx29 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item28, i32 0, i64 2, !dbg !11764
  store %struct._object* %call27, %struct._object** %arrayidx29, align 8, !dbg !11765, !tbaa !2119
  %call30 = call %struct._object* @PyErr_Occurred(), !dbg !11766
  %tobool31 = icmp ne %struct._object* %call30, null, !dbg !11766
  br i1 %tobool31, label %if.then.32, label %if.end.45, !dbg !11767

if.then.32:                                       ; preds = %if.end.20
  br label %do.body.33, !dbg !11768

do.body.33:                                       ; preds = %if.then.32
  %45 = bitcast %struct._object** %_py_decref_tmp34 to i8*, !dbg !11769
  call void @llvm.lifetime.start(i64 8, i8* %45) #3, !dbg !11769
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp34, metadata !1454, metadata !2123), !dbg !11771
  %46 = load %struct._object*, %struct._object** %out, align 8, !dbg !11772, !tbaa !2119
  store %struct._object* %46, %struct._object** %_py_decref_tmp34, align 8, !dbg !11771, !tbaa !2119
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8, !dbg !11773, !tbaa !2119
  %ob_refcnt35 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 0, !dbg !11775
  %48 = load i64, i64* %ob_refcnt35, align 8, !dbg !11776, !tbaa !2195
  %dec36 = add i64 %48, -1, !dbg !11776
  store i64 %dec36, i64* %ob_refcnt35, align 8, !dbg !11776, !tbaa !2195
  %cmp37 = icmp ne i64 %dec36, 0, !dbg !11777
  br i1 %cmp37, label %if.then.38, label %if.else.39, !dbg !11778

if.then.38:                                       ; preds = %do.body.33
  br label %if.end.42, !dbg !11779

if.else.39:                                       ; preds = %do.body.33
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8, !dbg !11781, !tbaa !2119
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1, !dbg !11783
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8, !dbg !11783, !tbaa !2203
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 4, !dbg !11784
  %51 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8, !dbg !11784, !tbaa !2205
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8, !dbg !11785, !tbaa !2119
  call void %51(%struct._object* %52), !dbg !11786
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  %53 = bitcast %struct._object** %_py_decref_tmp34 to i8*, !dbg !11787
  call void @llvm.lifetime.end(i64 8, i8* %53) #3, !dbg !11787
  br label %do.cond.43, !dbg !11789

do.cond.43:                                       ; preds = %if.end.42
  br label %do.end.44, !dbg !11790

do.end.44:                                        ; preds = %do.cond.43
  store %struct._object* null, %struct._object** %retval, !dbg !11792
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11792

if.end.45:                                        ; preds = %if.end.20
  %54 = load %struct._object*, %struct._object** %out, align 8, !dbg !11793, !tbaa !2119
  store %struct._object* %54, %struct._object** %retval, !dbg !11794
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11794

cleanup:                                          ; preds = %if.end.45, %do.end.44, %if.end.19, %do.end, %if.then.1, %if.then
  %55 = bitcast i64* %pos to i8*, !dbg !11795
  call void @llvm.lifetime.end(i64 8, i8* %55) #3, !dbg !11795
  %56 = bitcast %struct._object** %out to i8*, !dbg !11795
  call void @llvm.lifetime.end(i64 8, i8* %56) #3, !dbg !11795
  %57 = load %struct._object*, %struct._object** %retval, !dbg !11795
  ret %struct._object* %57, !dbg !11795
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct._object* @stringlib_rsplit_whitespace(%struct._object* %str_obj, i8* %str, i64 %str_len, i64 %maxcount) #4 {
entry:
  %retval = alloca %struct._object*, align 8
  %str_obj.addr = alloca %struct._object*, align 8
  %str.addr = alloca i8*, align 8
  %str_len.addr = alloca i64, align 8
  %maxcount.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %count = alloca i64, align 8
  %list = alloca %struct._object*, align 8
  %sub = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp111 = alloca %struct._object*, align 8
  %_py_decref_tmp125 = alloca %struct._object*, align 8
  %_py_decref_tmp148 = alloca %struct._object*, align 8
  store %struct._object* %str_obj, %struct._object** %str_obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %str_obj.addr, metadata !1478, metadata !2123), !dbg !11796
  store i8* %str, i8** %str.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !1479, metadata !2123), !dbg !11797
  store i64 %str_len, i64* %str_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %str_len.addr, metadata !1480, metadata !2123), !dbg !11798
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1481, metadata !2123), !dbg !11799
  %0 = bitcast i64* %i to i8*, !dbg !11800
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !11800
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1482, metadata !2123), !dbg !11801
  %1 = bitcast i64* %j to i8*, !dbg !11800
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !11800
  call void @llvm.dbg.declare(metadata i64* %j, metadata !1483, metadata !2123), !dbg !11802
  %2 = bitcast i64* %count to i8*, !dbg !11800
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !11800
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1484, metadata !2123), !dbg !11803
  store i64 0, i64* %count, align 8, !dbg !11803, !tbaa !2129
  %3 = bitcast %struct._object** %list to i8*, !dbg !11804
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !11804
  call void @llvm.dbg.declare(metadata %struct._object** %list, metadata !1485, metadata !2123), !dbg !11805
  %4 = load i64, i64* %maxcount.addr, align 8, !dbg !11806, !tbaa !2129
  %cmp = icmp sge i64 %4, 12, !dbg !11807
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !11806

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !11808

cond.false:                                       ; preds = %entry
  %5 = load i64, i64* %maxcount.addr, align 8, !dbg !11810, !tbaa !2129
  %add = add i64 %5, 1, !dbg !11812
  br label %cond.end, !dbg !11806

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 12, %cond.true ], [ %add, %cond.false ], !dbg !11806
  %call = call %struct._object* @PyList_New(i64 %cond), !dbg !11813
  store %struct._object* %call, %struct._object** %list, align 8, !dbg !11805, !tbaa !2119
  %6 = bitcast %struct._object** %sub to i8*, !dbg !11816
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !11816
  call void @llvm.dbg.declare(metadata %struct._object** %sub, metadata !1486, metadata !2123), !dbg !11817
  %7 = load %struct._object*, %struct._object** %list, align 8, !dbg !11818, !tbaa !2119
  %cmp1 = icmp eq %struct._object* %7, null, !dbg !11820
  br i1 %cmp1, label %if.then, label %if.end, !dbg !11821

if.then:                                          ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval, !dbg !11822
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11822

if.end:                                           ; preds = %cond.end
  %8 = load i64, i64* %str_len.addr, align 8, !dbg !11823, !tbaa !2129
  %sub2 = sub i64 %8, 1, !dbg !11824
  store i64 %sub2, i64* %j, align 8, !dbg !11825, !tbaa !2129
  store i64 %sub2, i64* %i, align 8, !dbg !11826, !tbaa !2129
  br label %while.cond, !dbg !11827

while.cond:                                       ; preds = %if.end.69, %if.end
  %9 = load i64, i64* %maxcount.addr, align 8, !dbg !11828, !tbaa !2129
  %dec = add i64 %9, -1, !dbg !11828
  store i64 %dec, i64* %maxcount.addr, align 8, !dbg !11828, !tbaa !2129
  %cmp3 = icmp sgt i64 %9, 0, !dbg !11830
  br i1 %cmp3, label %while.body, label %while.end.70, !dbg !11827

while.body:                                       ; preds = %while.cond
  br label %while.cond.4, !dbg !11831

while.cond.4:                                     ; preds = %while.body.9, %while.body
  %10 = load i64, i64* %i, align 8, !dbg !11832, !tbaa !2129
  %cmp5 = icmp sge i64 %10, 0, !dbg !11835
  br i1 %cmp5, label %land.rhs, label %land.end, !dbg !11836

land.rhs:                                         ; preds = %while.cond.4
  %11 = load i64, i64* %i, align 8, !dbg !11837, !tbaa !2129
  %12 = load i8*, i8** %str.addr, align 8, !dbg !11839, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %12, i64 %11, !dbg !11839
  %13 = load i8, i8* %arrayidx, align 1, !dbg !11839, !tbaa !2233
  %conv = sext i8 %13 to i32, !dbg !11840
  %and = and i32 %conv, 255, !dbg !11841
  %conv6 = trunc i32 %and to i8, !dbg !11842
  %idxprom = zext i8 %conv6 to i64, !dbg !11843
  %arrayidx7 = getelementptr [256 x i32], [256 x i32]* @_Py_ctype_table, i32 0, i64 %idxprom, !dbg !11843
  %14 = load i32, i32* %arrayidx7, align 4, !dbg !11843, !tbaa !2676
  %and8 = and i32 %14, 8, !dbg !11844
  %tobool = icmp ne i32 %and8, 0, !dbg !11836
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.4
  %15 = phi i1 [ false, %while.cond.4 ], [ %tobool, %land.rhs ]
  br i1 %15, label %while.body.9, label %while.end, !dbg !11845

while.body.9:                                     ; preds = %land.end
  %16 = load i64, i64* %i, align 8, !dbg !11847, !tbaa !2129
  %dec10 = add i64 %16, -1, !dbg !11847
  store i64 %dec10, i64* %i, align 8, !dbg !11847, !tbaa !2129
  br label %while.cond.4, !dbg !11831

while.end:                                        ; preds = %land.end
  %17 = load i64, i64* %i, align 8, !dbg !11848, !tbaa !2129
  %cmp11 = icmp slt i64 %17, 0, !dbg !11850
  br i1 %cmp11, label %if.then.13, label %if.end.14, !dbg !11851

if.then.13:                                       ; preds = %while.end
  br label %while.end.70, !dbg !11852

if.end.14:                                        ; preds = %while.end
  %18 = load i64, i64* %i, align 8, !dbg !11854, !tbaa !2129
  store i64 %18, i64* %j, align 8, !dbg !11855, !tbaa !2129
  %19 = load i64, i64* %i, align 8, !dbg !11856, !tbaa !2129
  %dec15 = add i64 %19, -1, !dbg !11856
  store i64 %dec15, i64* %i, align 8, !dbg !11856, !tbaa !2129
  br label %while.cond.16, !dbg !11857

while.cond.16:                                    ; preds = %while.body.29, %if.end.14
  %20 = load i64, i64* %i, align 8, !dbg !11858, !tbaa !2129
  %cmp17 = icmp sge i64 %20, 0, !dbg !11859
  br i1 %cmp17, label %land.rhs.19, label %land.end.28, !dbg !11860

land.rhs.19:                                      ; preds = %while.cond.16
  %21 = load i64, i64* %i, align 8, !dbg !11861, !tbaa !2129
  %22 = load i8*, i8** %str.addr, align 8, !dbg !11862, !tbaa !2119
  %arrayidx20 = getelementptr i8, i8* %22, i64 %21, !dbg !11862
  %23 = load i8, i8* %arrayidx20, align 1, !dbg !11862, !tbaa !2233
  %conv21 = sext i8 %23 to i32, !dbg !11863
  %and22 = and i32 %conv21, 255, !dbg !11864
  %conv23 = trunc i32 %and22 to i8, !dbg !11865
  %idxprom24 = zext i8 %conv23 to i64, !dbg !11866
  %arrayidx25 = getelementptr [256 x i32], [256 x i32]* @_Py_ctype_table, i32 0, i64 %idxprom24, !dbg !11866
  %24 = load i32, i32* %arrayidx25, align 4, !dbg !11866, !tbaa !2676
  %and26 = and i32 %24, 8, !dbg !11867
  %tobool27 = icmp ne i32 %and26, 0, !dbg !11868
  %lnot = xor i1 %tobool27, true, !dbg !11868
  br label %land.end.28

land.end.28:                                      ; preds = %land.rhs.19, %while.cond.16
  %25 = phi i1 [ false, %while.cond.16 ], [ %lnot, %land.rhs.19 ]
  br i1 %25, label %while.body.29, label %while.end.31, !dbg !11869

while.body.29:                                    ; preds = %land.end.28
  %26 = load i64, i64* %i, align 8, !dbg !11870, !tbaa !2129
  %dec30 = add i64 %26, -1, !dbg !11870
  store i64 %dec30, i64* %i, align 8, !dbg !11870, !tbaa !2129
  br label %while.cond.16, !dbg !11857

while.end.31:                                     ; preds = %land.end.28
  %27 = load i8*, i8** %str.addr, align 8, !dbg !11871, !tbaa !2119
  %28 = load i64, i64* %i, align 8, !dbg !11872, !tbaa !2129
  %add32 = add i64 %28, 1, !dbg !11873
  %add.ptr = getelementptr i8, i8* %27, i64 %add32, !dbg !11874
  %29 = load i64, i64* %j, align 8, !dbg !11875, !tbaa !2129
  %add33 = add i64 %29, 1, !dbg !11876
  %30 = load i64, i64* %i, align 8, !dbg !11877, !tbaa !2129
  %add34 = add i64 %30, 1, !dbg !11878
  %sub35 = sub i64 %add33, %add34, !dbg !11879
  %call36 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr, i64 %sub35), !dbg !11880
  store %struct._object* %call36, %struct._object** %sub, align 8, !dbg !11881, !tbaa !2119
  %31 = load %struct._object*, %struct._object** %sub, align 8, !dbg !11882, !tbaa !2119
  %cmp37 = icmp eq %struct._object* %31, null, !dbg !11884
  br i1 %cmp37, label %if.then.39, label %if.end.40, !dbg !11885

if.then.39:                                       ; preds = %while.end.31
  br label %onError, !dbg !11886

if.end.40:                                        ; preds = %while.end.31
  %32 = load i64, i64* %count, align 8, !dbg !11888, !tbaa !2129
  %cmp41 = icmp slt i64 %32, 12, !dbg !11890
  br i1 %cmp41, label %if.then.43, label %if.else, !dbg !11891

if.then.43:                                       ; preds = %if.end.40
  %33 = load %struct._object*, %struct._object** %sub, align 8, !dbg !11892, !tbaa !2119
  %34 = load i64, i64* %count, align 8, !dbg !11895, !tbaa !2129
  %35 = load %struct._object*, %struct._object** %list, align 8, !dbg !11896, !tbaa !2119
  %36 = bitcast %struct._object* %35 to %struct.PyListObject*, !dbg !11897
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %36, i32 0, i32 1, !dbg !11898
  %37 = load %struct._object**, %struct._object*** %ob_item, align 8, !dbg !11898, !tbaa !10183
  %arrayidx44 = getelementptr %struct._object*, %struct._object** %37, i64 %34, !dbg !11899
  store %struct._object* %33, %struct._object** %arrayidx44, align 8, !dbg !11900, !tbaa !2119
  br label %if.end.69, !dbg !11901

if.else:                                          ; preds = %if.end.40
  %38 = load %struct._object*, %struct._object** %list, align 8, !dbg !11902, !tbaa !2119
  %39 = load %struct._object*, %struct._object** %sub, align 8, !dbg !11904, !tbaa !2119
  %call45 = call i32 @PyList_Append(%struct._object* %38, %struct._object* %39), !dbg !11905
  %tobool46 = icmp ne i32 %call45, 0, !dbg !11905
  br i1 %tobool46, label %if.then.47, label %if.else.54, !dbg !11906

if.then.47:                                       ; preds = %if.else
  br label %do.body, !dbg !11907

do.body:                                          ; preds = %if.then.47
  %40 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !11909
  call void @llvm.lifetime.start(i64 8, i8* %40) #3, !dbg !11909
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1487, metadata !2123), !dbg !11911
  %41 = load %struct._object*, %struct._object** %sub, align 8, !dbg !11912, !tbaa !2119
  store %struct._object* %41, %struct._object** %_py_decref_tmp, align 8, !dbg !11911, !tbaa !2119
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11913, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0, !dbg !11915
  %43 = load i64, i64* %ob_refcnt, align 8, !dbg !11916, !tbaa !2195
  %dec48 = add i64 %43, -1, !dbg !11916
  store i64 %dec48, i64* %ob_refcnt, align 8, !dbg !11916, !tbaa !2195
  %cmp49 = icmp ne i64 %dec48, 0, !dbg !11917
  br i1 %cmp49, label %if.then.51, label %if.else.52, !dbg !11918

if.then.51:                                       ; preds = %do.body
  br label %if.end.53, !dbg !11919

if.else.52:                                       ; preds = %do.body
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11921, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1, !dbg !11923
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !11923, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4, !dbg !11924
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !11924, !tbaa !2205
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11925, !tbaa !2119
  call void %46(%struct._object* %47), !dbg !11926
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.52, %if.then.51
  %48 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !11927
  call void @llvm.lifetime.end(i64 8, i8* %48) #3, !dbg !11927
  br label %do.cond, !dbg !11929

do.cond:                                          ; preds = %if.end.53
  br label %do.end, !dbg !11930

do.end:                                           ; preds = %do.cond
  br label %onError, !dbg !11932

if.else.54:                                       ; preds = %if.else
  br label %do.body.55, !dbg !11934

do.body.55:                                       ; preds = %if.else.54
  %49 = bitcast %struct._object** %_py_decref_tmp56 to i8*, !dbg !11936
  call void @llvm.lifetime.start(i64 8, i8* %49) #3, !dbg !11936
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp56, metadata !1495, metadata !2123), !dbg !11938
  %50 = load %struct._object*, %struct._object** %sub, align 8, !dbg !11939, !tbaa !2119
  store %struct._object* %50, %struct._object** %_py_decref_tmp56, align 8, !dbg !11938, !tbaa !2119
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8, !dbg !11940, !tbaa !2119
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0, !dbg !11942
  %52 = load i64, i64* %ob_refcnt57, align 8, !dbg !11943, !tbaa !2195
  %dec58 = add i64 %52, -1, !dbg !11943
  store i64 %dec58, i64* %ob_refcnt57, align 8, !dbg !11943, !tbaa !2195
  %cmp59 = icmp ne i64 %dec58, 0, !dbg !11944
  br i1 %cmp59, label %if.then.61, label %if.else.62, !dbg !11945

if.then.61:                                       ; preds = %do.body.55
  br label %if.end.65, !dbg !11946

if.else.62:                                       ; preds = %do.body.55
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8, !dbg !11948, !tbaa !2119
  %ob_type63 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1, !dbg !11950
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type63, align 8, !dbg !11950, !tbaa !2203
  %tp_dealloc64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4, !dbg !11951
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc64, align 8, !dbg !11951, !tbaa !2205
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8, !dbg !11952, !tbaa !2119
  call void %55(%struct._object* %56), !dbg !11953
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.62, %if.then.61
  %57 = bitcast %struct._object** %_py_decref_tmp56 to i8*, !dbg !11954
  call void @llvm.lifetime.end(i64 8, i8* %57) #3, !dbg !11954
  br label %do.cond.66, !dbg !11956

do.cond.66:                                       ; preds = %if.end.65
  br label %do.end.67, !dbg !11957

do.end.67:                                        ; preds = %do.cond.66
  br label %if.end.68

if.end.68:                                        ; preds = %do.end.67
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %if.then.43
  %58 = load i64, i64* %count, align 8, !dbg !11959, !tbaa !2129
  %inc = add i64 %58, 1, !dbg !11959
  store i64 %inc, i64* %count, align 8, !dbg !11959, !tbaa !2129
  br label %while.cond, !dbg !11827

while.end.70:                                     ; preds = %if.then.13, %while.cond
  %59 = load i64, i64* %i, align 8, !dbg !11961, !tbaa !2129
  %cmp71 = icmp sge i64 %59, 0, !dbg !11962
  br i1 %cmp71, label %if.then.73, label %if.end.141, !dbg !11963

if.then.73:                                       ; preds = %while.end.70
  br label %while.cond.74, !dbg !11964

while.cond.74:                                    ; preds = %while.body.87, %if.then.73
  %60 = load i64, i64* %i, align 8, !dbg !11965, !tbaa !2129
  %cmp75 = icmp sge i64 %60, 0, !dbg !11968
  br i1 %cmp75, label %land.rhs.77, label %land.end.86, !dbg !11969

land.rhs.77:                                      ; preds = %while.cond.74
  %61 = load i64, i64* %i, align 8, !dbg !11970, !tbaa !2129
  %62 = load i8*, i8** %str.addr, align 8, !dbg !11972, !tbaa !2119
  %arrayidx78 = getelementptr i8, i8* %62, i64 %61, !dbg !11972
  %63 = load i8, i8* %arrayidx78, align 1, !dbg !11972, !tbaa !2233
  %conv79 = sext i8 %63 to i32, !dbg !11973
  %and80 = and i32 %conv79, 255, !dbg !11974
  %conv81 = trunc i32 %and80 to i8, !dbg !11975
  %idxprom82 = zext i8 %conv81 to i64, !dbg !11976
  %arrayidx83 = getelementptr [256 x i32], [256 x i32]* @_Py_ctype_table, i32 0, i64 %idxprom82, !dbg !11976
  %64 = load i32, i32* %arrayidx83, align 4, !dbg !11976, !tbaa !2676
  %and84 = and i32 %64, 8, !dbg !11977
  %tobool85 = icmp ne i32 %and84, 0, !dbg !11969
  br label %land.end.86

land.end.86:                                      ; preds = %land.rhs.77, %while.cond.74
  %65 = phi i1 [ false, %while.cond.74 ], [ %tobool85, %land.rhs.77 ]
  br i1 %65, label %while.body.87, label %while.end.89, !dbg !11978

while.body.87:                                    ; preds = %land.end.86
  %66 = load i64, i64* %i, align 8, !dbg !11980, !tbaa !2129
  %dec88 = add i64 %66, -1, !dbg !11980
  store i64 %dec88, i64* %i, align 8, !dbg !11980, !tbaa !2129
  br label %while.cond.74, !dbg !11964

while.end.89:                                     ; preds = %land.end.86
  %67 = load i64, i64* %i, align 8, !dbg !11981, !tbaa !2129
  %cmp90 = icmp sge i64 %67, 0, !dbg !11982
  br i1 %cmp90, label %if.then.92, label %if.end.140, !dbg !11983

if.then.92:                                       ; preds = %while.end.89
  %68 = load i8*, i8** %str.addr, align 8, !dbg !11984, !tbaa !2119
  %add.ptr93 = getelementptr i8, i8* %68, i64 0, !dbg !11985
  %69 = load i64, i64* %i, align 8, !dbg !11986, !tbaa !2129
  %add94 = add i64 %69, 1, !dbg !11987
  %sub95 = sub i64 %add94, 0, !dbg !11988
  %call96 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr93, i64 %sub95), !dbg !11989
  store %struct._object* %call96, %struct._object** %sub, align 8, !dbg !11990, !tbaa !2119
  %70 = load %struct._object*, %struct._object** %sub, align 8, !dbg !11991, !tbaa !2119
  %cmp97 = icmp eq %struct._object* %70, null, !dbg !11993
  br i1 %cmp97, label %if.then.99, label %if.end.100, !dbg !11994

if.then.99:                                       ; preds = %if.then.92
  br label %onError, !dbg !11995

if.end.100:                                       ; preds = %if.then.92
  %71 = load i64, i64* %count, align 8, !dbg !11997, !tbaa !2129
  %cmp101 = icmp slt i64 %71, 12, !dbg !11999
  br i1 %cmp101, label %if.then.103, label %if.else.106, !dbg !12000

if.then.103:                                      ; preds = %if.end.100
  %72 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12001, !tbaa !2119
  %73 = load i64, i64* %count, align 8, !dbg !12004, !tbaa !2129
  %74 = load %struct._object*, %struct._object** %list, align 8, !dbg !12005, !tbaa !2119
  %75 = bitcast %struct._object* %74 to %struct.PyListObject*, !dbg !12006
  %ob_item104 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %75, i32 0, i32 1, !dbg !12007
  %76 = load %struct._object**, %struct._object*** %ob_item104, align 8, !dbg !12007, !tbaa !10183
  %arrayidx105 = getelementptr %struct._object*, %struct._object** %76, i64 %73, !dbg !12008
  store %struct._object* %72, %struct._object** %arrayidx105, align 8, !dbg !12009, !tbaa !2119
  br label %if.end.138, !dbg !12010

if.else.106:                                      ; preds = %if.end.100
  %77 = load %struct._object*, %struct._object** %list, align 8, !dbg !12011, !tbaa !2119
  %78 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12013, !tbaa !2119
  %call107 = call i32 @PyList_Append(%struct._object* %77, %struct._object* %78), !dbg !12014
  %tobool108 = icmp ne i32 %call107, 0, !dbg !12014
  br i1 %tobool108, label %if.then.109, label %if.else.123, !dbg !12015

if.then.109:                                      ; preds = %if.else.106
  br label %do.body.110, !dbg !12016

do.body.110:                                      ; preds = %if.then.109
  %79 = bitcast %struct._object** %_py_decref_tmp111 to i8*, !dbg !12018
  call void @llvm.lifetime.start(i64 8, i8* %79) #3, !dbg !12018
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp111, metadata !1497, metadata !2123), !dbg !12020
  %80 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12021, !tbaa !2119
  store %struct._object* %80, %struct._object** %_py_decref_tmp111, align 8, !dbg !12020, !tbaa !2119
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp111, align 8, !dbg !12022, !tbaa !2119
  %ob_refcnt112 = getelementptr inbounds %struct._object, %struct._object* %81, i32 0, i32 0, !dbg !12024
  %82 = load i64, i64* %ob_refcnt112, align 8, !dbg !12025, !tbaa !2195
  %dec113 = add i64 %82, -1, !dbg !12025
  store i64 %dec113, i64* %ob_refcnt112, align 8, !dbg !12025, !tbaa !2195
  %cmp114 = icmp ne i64 %dec113, 0, !dbg !12026
  br i1 %cmp114, label %if.then.116, label %if.else.117, !dbg !12027

if.then.116:                                      ; preds = %do.body.110
  br label %if.end.120, !dbg !12028

if.else.117:                                      ; preds = %do.body.110
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp111, align 8, !dbg !12030, !tbaa !2119
  %ob_type118 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 1, !dbg !12032
  %84 = load %struct._typeobject*, %struct._typeobject** %ob_type118, align 8, !dbg !12032, !tbaa !2203
  %tp_dealloc119 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %84, i32 0, i32 4, !dbg !12033
  %85 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc119, align 8, !dbg !12033, !tbaa !2205
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp111, align 8, !dbg !12034, !tbaa !2119
  call void %85(%struct._object* %86), !dbg !12035
  br label %if.end.120

if.end.120:                                       ; preds = %if.else.117, %if.then.116
  %87 = bitcast %struct._object** %_py_decref_tmp111 to i8*, !dbg !12036
  call void @llvm.lifetime.end(i64 8, i8* %87) #3, !dbg !12036
  br label %do.cond.121, !dbg !12038

do.cond.121:                                      ; preds = %if.end.120
  br label %do.end.122, !dbg !12039

do.end.122:                                       ; preds = %do.cond.121
  br label %onError, !dbg !12041

if.else.123:                                      ; preds = %if.else.106
  br label %do.body.124, !dbg !12043

do.body.124:                                      ; preds = %if.else.123
  %88 = bitcast %struct._object** %_py_decref_tmp125 to i8*, !dbg !12045
  call void @llvm.lifetime.start(i64 8, i8* %88) #3, !dbg !12045
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp125, metadata !1507, metadata !2123), !dbg !12047
  %89 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12048, !tbaa !2119
  store %struct._object* %89, %struct._object** %_py_decref_tmp125, align 8, !dbg !12047, !tbaa !2119
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8, !dbg !12049, !tbaa !2119
  %ob_refcnt126 = getelementptr inbounds %struct._object, %struct._object* %90, i32 0, i32 0, !dbg !12051
  %91 = load i64, i64* %ob_refcnt126, align 8, !dbg !12052, !tbaa !2195
  %dec127 = add i64 %91, -1, !dbg !12052
  store i64 %dec127, i64* %ob_refcnt126, align 8, !dbg !12052, !tbaa !2195
  %cmp128 = icmp ne i64 %dec127, 0, !dbg !12053
  br i1 %cmp128, label %if.then.130, label %if.else.131, !dbg !12054

if.then.130:                                      ; preds = %do.body.124
  br label %if.end.134, !dbg !12055

if.else.131:                                      ; preds = %do.body.124
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8, !dbg !12057, !tbaa !2119
  %ob_type132 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 1, !dbg !12059
  %93 = load %struct._typeobject*, %struct._typeobject** %ob_type132, align 8, !dbg !12059, !tbaa !2203
  %tp_dealloc133 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %93, i32 0, i32 4, !dbg !12060
  %94 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc133, align 8, !dbg !12060, !tbaa !2205
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8, !dbg !12061, !tbaa !2119
  call void %94(%struct._object* %95), !dbg !12062
  br label %if.end.134

if.end.134:                                       ; preds = %if.else.131, %if.then.130
  %96 = bitcast %struct._object** %_py_decref_tmp125 to i8*, !dbg !12063
  call void @llvm.lifetime.end(i64 8, i8* %96) #3, !dbg !12063
  br label %do.cond.135, !dbg !12065

do.cond.135:                                      ; preds = %if.end.134
  br label %do.end.136, !dbg !12066

do.end.136:                                       ; preds = %do.cond.135
  br label %if.end.137

if.end.137:                                       ; preds = %do.end.136
  br label %if.end.138

if.end.138:                                       ; preds = %if.end.137, %if.then.103
  %97 = load i64, i64* %count, align 8, !dbg !12068, !tbaa !2129
  %inc139 = add i64 %97, 1, !dbg !12068
  store i64 %inc139, i64* %count, align 8, !dbg !12068, !tbaa !2129
  br label %if.end.140, !dbg !12070

if.end.140:                                       ; preds = %if.end.138, %while.end.89
  br label %if.end.141, !dbg !12071

if.end.141:                                       ; preds = %if.end.140, %while.end.70
  %98 = load i64, i64* %count, align 8, !dbg !12072, !tbaa !2129
  %99 = load %struct._object*, %struct._object** %list, align 8, !dbg !12073, !tbaa !2119
  %100 = bitcast %struct._object* %99 to %struct.PyVarObject*, !dbg !12074
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %100, i32 0, i32 1, !dbg !12075
  store i64 %98, i64* %ob_size, align 8, !dbg !12076, !tbaa !2239
  %101 = load %struct._object*, %struct._object** %list, align 8, !dbg !12077, !tbaa !2119
  %call142 = call i32 @PyList_Reverse(%struct._object* %101), !dbg !12079
  %cmp143 = icmp slt i32 %call142, 0, !dbg !12080
  br i1 %cmp143, label %if.then.145, label %if.end.146, !dbg !12081

if.then.145:                                      ; preds = %if.end.141
  br label %onError, !dbg !12082

if.end.146:                                       ; preds = %if.end.141
  %102 = load %struct._object*, %struct._object** %list, align 8, !dbg !12083, !tbaa !2119
  store %struct._object* %102, %struct._object** %retval, !dbg !12084
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12084

onError:                                          ; preds = %if.then.145, %do.end.122, %if.then.99, %do.end, %if.then.39
  br label %do.body.147, !dbg !12085

do.body.147:                                      ; preds = %onError
  %103 = bitcast %struct._object** %_py_decref_tmp148 to i8*, !dbg !12086
  call void @llvm.lifetime.start(i64 8, i8* %103) #3, !dbg !12086
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp148, metadata !1509, metadata !2123), !dbg !12088
  %104 = load %struct._object*, %struct._object** %list, align 8, !dbg !12089, !tbaa !2119
  store %struct._object* %104, %struct._object** %_py_decref_tmp148, align 8, !dbg !12088, !tbaa !2119
  %105 = load %struct._object*, %struct._object** %_py_decref_tmp148, align 8, !dbg !12090, !tbaa !2119
  %ob_refcnt149 = getelementptr inbounds %struct._object, %struct._object* %105, i32 0, i32 0, !dbg !12092
  %106 = load i64, i64* %ob_refcnt149, align 8, !dbg !12093, !tbaa !2195
  %dec150 = add i64 %106, -1, !dbg !12093
  store i64 %dec150, i64* %ob_refcnt149, align 8, !dbg !12093, !tbaa !2195
  %cmp151 = icmp ne i64 %dec150, 0, !dbg !12094
  br i1 %cmp151, label %if.then.153, label %if.else.154, !dbg !12095

if.then.153:                                      ; preds = %do.body.147
  br label %if.end.157, !dbg !12096

if.else.154:                                      ; preds = %do.body.147
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp148, align 8, !dbg !12098, !tbaa !2119
  %ob_type155 = getelementptr inbounds %struct._object, %struct._object* %107, i32 0, i32 1, !dbg !12100
  %108 = load %struct._typeobject*, %struct._typeobject** %ob_type155, align 8, !dbg !12100, !tbaa !2203
  %tp_dealloc156 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %108, i32 0, i32 4, !dbg !12101
  %109 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc156, align 8, !dbg !12101, !tbaa !2205
  %110 = load %struct._object*, %struct._object** %_py_decref_tmp148, align 8, !dbg !12102, !tbaa !2119
  call void %109(%struct._object* %110), !dbg !12103
  br label %if.end.157

if.end.157:                                       ; preds = %if.else.154, %if.then.153
  %111 = bitcast %struct._object** %_py_decref_tmp148 to i8*, !dbg !12104
  call void @llvm.lifetime.end(i64 8, i8* %111) #3, !dbg !12104
  br label %do.cond.158, !dbg !12106

do.cond.158:                                      ; preds = %if.end.157
  br label %do.end.159, !dbg !12107

do.end.159:                                       ; preds = %do.cond.158
  store %struct._object* null, %struct._object** %retval, !dbg !12109
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12109

cleanup:                                          ; preds = %do.end.159, %if.end.146, %if.then
  %112 = bitcast %struct._object** %sub to i8*, !dbg !12110
  call void @llvm.lifetime.end(i64 8, i8* %112) #3, !dbg !12110
  %113 = bitcast %struct._object** %list to i8*, !dbg !12110
  call void @llvm.lifetime.end(i64 8, i8* %113) #3, !dbg !12110
  %114 = bitcast i64* %count to i8*, !dbg !12110
  call void @llvm.lifetime.end(i64 8, i8* %114) #3, !dbg !12110
  %115 = bitcast i64* %j to i8*, !dbg !12110
  call void @llvm.lifetime.end(i64 8, i8* %115) #3, !dbg !12110
  %116 = bitcast i64* %i to i8*, !dbg !12110
  call void @llvm.lifetime.end(i64 8, i8* %116) #3, !dbg !12110
  %117 = load %struct._object*, %struct._object** %retval, !dbg !12110
  ret %struct._object* %117, !dbg !12110
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct._object* @stringlib_rsplit(%struct._object* %str_obj, i8* %str, i64 %str_len, i8* %sep, i64 %sep_len, i64 %maxcount) #4 {
entry:
  %retval = alloca %struct._object*, align 8
  %str_obj.addr = alloca %struct._object*, align 8
  %str.addr = alloca i8*, align 8
  %str_len.addr = alloca i64, align 8
  %sep.addr = alloca i8*, align 8
  %sep_len.addr = alloca i64, align 8
  %maxcount.addr = alloca i64, align 8
  %j = alloca i64, align 8
  %pos = alloca i64, align 8
  %count = alloca i64, align 8
  %list = alloca %struct._object*, align 8
  %sub = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp34 = alloca %struct._object*, align 8
  %_py_decref_tmp62 = alloca %struct._object*, align 8
  %_py_decref_tmp75 = alloca %struct._object*, align 8
  %_py_decref_tmp94 = alloca %struct._object*, align 8
  store %struct._object* %str_obj, %struct._object** %str_obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %str_obj.addr, metadata !1515, metadata !2123), !dbg !12111
  store i8* %str, i8** %str.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !1516, metadata !2123), !dbg !12112
  store i64 %str_len, i64* %str_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %str_len.addr, metadata !1517, metadata !2123), !dbg !12113
  store i8* %sep, i8** %sep.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %sep.addr, metadata !1518, metadata !2123), !dbg !12114
  store i64 %sep_len, i64* %sep_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %sep_len.addr, metadata !1519, metadata !2123), !dbg !12115
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1520, metadata !2123), !dbg !12116
  %0 = bitcast i64* %j to i8*, !dbg !12117
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !12117
  call void @llvm.dbg.declare(metadata i64* %j, metadata !1521, metadata !2123), !dbg !12118
  %1 = bitcast i64* %pos to i8*, !dbg !12117
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !12117
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !1522, metadata !2123), !dbg !12119
  %2 = bitcast i64* %count to i8*, !dbg !12117
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !12117
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1523, metadata !2123), !dbg !12120
  store i64 0, i64* %count, align 8, !dbg !12120, !tbaa !2129
  %3 = bitcast %struct._object** %list to i8*, !dbg !12121
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !12121
  call void @llvm.dbg.declare(metadata %struct._object** %list, metadata !1524, metadata !2123), !dbg !12122
  %4 = bitcast %struct._object** %sub to i8*, !dbg !12121
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !12121
  call void @llvm.dbg.declare(metadata %struct._object** %sub, metadata !1525, metadata !2123), !dbg !12123
  %5 = load i64, i64* %sep_len.addr, align 8, !dbg !12124, !tbaa !2129
  %cmp = icmp eq i64 %5, 0, !dbg !12126
  br i1 %cmp, label %if.then, label %if.else, !dbg !12127

if.then:                                          ; preds = %entry
  %6 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !12128, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.98, i32 0, i32 0)), !dbg !12130
  store %struct._object* null, %struct._object** %retval, !dbg !12131
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12131

if.else:                                          ; preds = %entry
  %7 = load i64, i64* %sep_len.addr, align 8, !dbg !12132, !tbaa !2129
  %cmp1 = icmp eq i64 %7, 1, !dbg !12134
  br i1 %cmp1, label %if.then.2, label %if.end, !dbg !12135

if.then.2:                                        ; preds = %if.else
  %8 = load %struct._object*, %struct._object** %str_obj.addr, align 8, !dbg !12136, !tbaa !2119
  %9 = load i8*, i8** %str.addr, align 8, !dbg !12137, !tbaa !2119
  %10 = load i64, i64* %str_len.addr, align 8, !dbg !12138, !tbaa !2129
  %11 = load i8*, i8** %sep.addr, align 8, !dbg !12139, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %11, i64 0, !dbg !12139
  %12 = load i8, i8* %arrayidx, align 1, !dbg !12139, !tbaa !2233
  %13 = load i64, i64* %maxcount.addr, align 8, !dbg !12140, !tbaa !2129
  %call = call %struct._object* @stringlib_rsplit_char(%struct._object* %8, i8* %9, i64 %10, i8 signext %12, i64 %13), !dbg !12141
  store %struct._object* %call, %struct._object** %retval, !dbg !12142
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12142

if.end:                                           ; preds = %if.else
  br label %if.end.3

if.end.3:                                         ; preds = %if.end
  %14 = load i64, i64* %maxcount.addr, align 8, !dbg !12143, !tbaa !2129
  %cmp4 = icmp sge i64 %14, 12, !dbg !12144
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !12143

cond.true:                                        ; preds = %if.end.3
  br label %cond.end, !dbg !12145

cond.false:                                       ; preds = %if.end.3
  %15 = load i64, i64* %maxcount.addr, align 8, !dbg !12147, !tbaa !2129
  %add = add i64 %15, 1, !dbg !12149
  br label %cond.end, !dbg !12143

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 12, %cond.true ], [ %add, %cond.false ], !dbg !12143
  %call5 = call %struct._object* @PyList_New(i64 %cond), !dbg !12150
  store %struct._object* %call5, %struct._object** %list, align 8, !dbg !12153, !tbaa !2119
  %16 = load %struct._object*, %struct._object** %list, align 8, !dbg !12154, !tbaa !2119
  %cmp6 = icmp eq %struct._object* %16, null, !dbg !12156
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !12157

if.then.7:                                        ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval, !dbg !12158
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12158

if.end.8:                                         ; preds = %cond.end
  %17 = load i64, i64* %str_len.addr, align 8, !dbg !12159, !tbaa !2129
  store i64 %17, i64* %j, align 8, !dbg !12160, !tbaa !2129
  br label %while.cond, !dbg !12161

while.cond:                                       ; preds = %if.end.46, %if.end.8
  %18 = load i64, i64* %maxcount.addr, align 8, !dbg !12162, !tbaa !2129
  %dec = add i64 %18, -1, !dbg !12162
  store i64 %dec, i64* %maxcount.addr, align 8, !dbg !12162, !tbaa !2129
  %cmp9 = icmp sgt i64 %18, 0, !dbg !12164
  br i1 %cmp9, label %while.body, label %while.end, !dbg !12161

while.body:                                       ; preds = %while.cond
  %19 = load i8*, i8** %str.addr, align 8, !dbg !12165, !tbaa !2119
  %20 = load i64, i64* %j, align 8, !dbg !12166, !tbaa !2129
  %21 = load i8*, i8** %sep.addr, align 8, !dbg !12167, !tbaa !2119
  %22 = load i64, i64* %sep_len.addr, align 8, !dbg !12168, !tbaa !2129
  %call10 = call i64 @fastsearch(i8* %19, i64 %20, i8* %21, i64 %22, i64 -1, i32 2), !dbg !12169
  store i64 %call10, i64* %pos, align 8, !dbg !12170, !tbaa !2129
  %23 = load i64, i64* %pos, align 8, !dbg !12171, !tbaa !2129
  %cmp11 = icmp slt i64 %23, 0, !dbg !12173
  br i1 %cmp11, label %if.then.12, label %if.end.13, !dbg !12174

if.then.12:                                       ; preds = %while.body
  br label %while.end, !dbg !12175

if.end.13:                                        ; preds = %while.body
  %24 = load i8*, i8** %str.addr, align 8, !dbg !12176, !tbaa !2119
  %25 = load i64, i64* %pos, align 8, !dbg !12177, !tbaa !2129
  %26 = load i64, i64* %sep_len.addr, align 8, !dbg !12178, !tbaa !2129
  %add14 = add i64 %25, %26, !dbg !12179
  %add.ptr = getelementptr i8, i8* %24, i64 %add14, !dbg !12180
  %27 = load i64, i64* %j, align 8, !dbg !12181, !tbaa !2129
  %28 = load i64, i64* %pos, align 8, !dbg !12182, !tbaa !2129
  %29 = load i64, i64* %sep_len.addr, align 8, !dbg !12183, !tbaa !2129
  %add15 = add i64 %28, %29, !dbg !12184
  %sub16 = sub i64 %27, %add15, !dbg !12185
  %call17 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr, i64 %sub16), !dbg !12186
  store %struct._object* %call17, %struct._object** %sub, align 8, !dbg !12187, !tbaa !2119
  %30 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12188, !tbaa !2119
  %cmp18 = icmp eq %struct._object* %30, null, !dbg !12190
  br i1 %cmp18, label %if.then.19, label %if.end.20, !dbg !12191

if.then.19:                                       ; preds = %if.end.13
  br label %onError, !dbg !12192

if.end.20:                                        ; preds = %if.end.13
  %31 = load i64, i64* %count, align 8, !dbg !12194, !tbaa !2129
  %cmp21 = icmp slt i64 %31, 12, !dbg !12196
  br i1 %cmp21, label %if.then.22, label %if.else.24, !dbg !12197

if.then.22:                                       ; preds = %if.end.20
  %32 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12198, !tbaa !2119
  %33 = load i64, i64* %count, align 8, !dbg !12201, !tbaa !2129
  %34 = load %struct._object*, %struct._object** %list, align 8, !dbg !12202, !tbaa !2119
  %35 = bitcast %struct._object* %34 to %struct.PyListObject*, !dbg !12203
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %35, i32 0, i32 1, !dbg !12204
  %36 = load %struct._object**, %struct._object*** %ob_item, align 8, !dbg !12204, !tbaa !10183
  %arrayidx23 = getelementptr %struct._object*, %struct._object** %36, i64 %33, !dbg !12205
  store %struct._object* %32, %struct._object** %arrayidx23, align 8, !dbg !12206, !tbaa !2119
  br label %if.end.46, !dbg !12207

if.else.24:                                       ; preds = %if.end.20
  %37 = load %struct._object*, %struct._object** %list, align 8, !dbg !12208, !tbaa !2119
  %38 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12210, !tbaa !2119
  %call25 = call i32 @PyList_Append(%struct._object* %37, %struct._object* %38), !dbg !12211
  %tobool = icmp ne i32 %call25, 0, !dbg !12211
  br i1 %tobool, label %if.then.26, label %if.else.32, !dbg !12212

if.then.26:                                       ; preds = %if.else.24
  br label %do.body, !dbg !12213

do.body:                                          ; preds = %if.then.26
  %39 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12215
  call void @llvm.lifetime.start(i64 8, i8* %39) #3, !dbg !12215
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1526, metadata !2123), !dbg !12217
  %40 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12218, !tbaa !2119
  store %struct._object* %40, %struct._object** %_py_decref_tmp, align 8, !dbg !12217, !tbaa !2119
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12219, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0, !dbg !12221
  %42 = load i64, i64* %ob_refcnt, align 8, !dbg !12222, !tbaa !2195
  %dec27 = add i64 %42, -1, !dbg !12222
  store i64 %dec27, i64* %ob_refcnt, align 8, !dbg !12222, !tbaa !2195
  %cmp28 = icmp ne i64 %dec27, 0, !dbg !12223
  br i1 %cmp28, label %if.then.29, label %if.else.30, !dbg !12224

if.then.29:                                       ; preds = %do.body
  br label %if.end.31, !dbg !12225

if.else.30:                                       ; preds = %do.body
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12227, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1, !dbg !12229
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !12229, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4, !dbg !12230
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !12230, !tbaa !2205
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12231, !tbaa !2119
  call void %45(%struct._object* %46), !dbg !12232
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.30, %if.then.29
  %47 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12233
  call void @llvm.lifetime.end(i64 8, i8* %47) #3, !dbg !12233
  br label %do.cond, !dbg !12235

do.cond:                                          ; preds = %if.end.31
  br label %do.end, !dbg !12236

do.end:                                           ; preds = %do.cond
  br label %onError, !dbg !12238

if.else.32:                                       ; preds = %if.else.24
  br label %do.body.33, !dbg !12240

do.body.33:                                       ; preds = %if.else.32
  %48 = bitcast %struct._object** %_py_decref_tmp34 to i8*, !dbg !12242
  call void @llvm.lifetime.start(i64 8, i8* %48) #3, !dbg !12242
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp34, metadata !1534, metadata !2123), !dbg !12244
  %49 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12245, !tbaa !2119
  store %struct._object* %49, %struct._object** %_py_decref_tmp34, align 8, !dbg !12244, !tbaa !2119
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8, !dbg !12246, !tbaa !2119
  %ob_refcnt35 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0, !dbg !12248
  %51 = load i64, i64* %ob_refcnt35, align 8, !dbg !12249, !tbaa !2195
  %dec36 = add i64 %51, -1, !dbg !12249
  store i64 %dec36, i64* %ob_refcnt35, align 8, !dbg !12249, !tbaa !2195
  %cmp37 = icmp ne i64 %dec36, 0, !dbg !12250
  br i1 %cmp37, label %if.then.38, label %if.else.39, !dbg !12251

if.then.38:                                       ; preds = %do.body.33
  br label %if.end.42, !dbg !12252

if.else.39:                                       ; preds = %do.body.33
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8, !dbg !12254, !tbaa !2119
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1, !dbg !12256
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8, !dbg !12256, !tbaa !2203
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4, !dbg !12257
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8, !dbg !12257, !tbaa !2205
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8, !dbg !12258, !tbaa !2119
  call void %54(%struct._object* %55), !dbg !12259
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  %56 = bitcast %struct._object** %_py_decref_tmp34 to i8*, !dbg !12260
  call void @llvm.lifetime.end(i64 8, i8* %56) #3, !dbg !12260
  br label %do.cond.43, !dbg !12262

do.cond.43:                                       ; preds = %if.end.42
  br label %do.end.44, !dbg !12263

do.end.44:                                        ; preds = %do.cond.43
  br label %if.end.45

if.end.45:                                        ; preds = %do.end.44
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %if.then.22
  %57 = load i64, i64* %count, align 8, !dbg !12265, !tbaa !2129
  %inc = add i64 %57, 1, !dbg !12265
  store i64 %inc, i64* %count, align 8, !dbg !12265, !tbaa !2129
  %58 = load i64, i64* %pos, align 8, !dbg !12267, !tbaa !2129
  store i64 %58, i64* %j, align 8, !dbg !12268, !tbaa !2129
  br label %while.cond, !dbg !12161

while.end:                                        ; preds = %if.then.12, %while.cond
  %59 = load i8*, i8** %str.addr, align 8, !dbg !12269, !tbaa !2119
  %add.ptr47 = getelementptr i8, i8* %59, i64 0, !dbg !12270
  %60 = load i64, i64* %j, align 8, !dbg !12271, !tbaa !2129
  %sub48 = sub i64 %60, 0, !dbg !12272
  %call49 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr47, i64 %sub48), !dbg !12273
  store %struct._object* %call49, %struct._object** %sub, align 8, !dbg !12274, !tbaa !2119
  %61 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12275, !tbaa !2119
  %cmp50 = icmp eq %struct._object* %61, null, !dbg !12277
  br i1 %cmp50, label %if.then.51, label %if.end.52, !dbg !12278

if.then.51:                                       ; preds = %while.end
  br label %onError, !dbg !12279

if.end.52:                                        ; preds = %while.end
  %62 = load i64, i64* %count, align 8, !dbg !12281, !tbaa !2129
  %cmp53 = icmp slt i64 %62, 12, !dbg !12283
  br i1 %cmp53, label %if.then.54, label %if.else.57, !dbg !12284

if.then.54:                                       ; preds = %if.end.52
  %63 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12285, !tbaa !2119
  %64 = load i64, i64* %count, align 8, !dbg !12288, !tbaa !2129
  %65 = load %struct._object*, %struct._object** %list, align 8, !dbg !12289, !tbaa !2119
  %66 = bitcast %struct._object* %65 to %struct.PyListObject*, !dbg !12290
  %ob_item55 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %66, i32 0, i32 1, !dbg !12291
  %67 = load %struct._object**, %struct._object*** %ob_item55, align 8, !dbg !12291, !tbaa !10183
  %arrayidx56 = getelementptr %struct._object*, %struct._object** %67, i64 %64, !dbg !12292
  store %struct._object* %63, %struct._object** %arrayidx56, align 8, !dbg !12293, !tbaa !2119
  br label %if.end.87, !dbg !12294

if.else.57:                                       ; preds = %if.end.52
  %68 = load %struct._object*, %struct._object** %list, align 8, !dbg !12295, !tbaa !2119
  %69 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12297, !tbaa !2119
  %call58 = call i32 @PyList_Append(%struct._object* %68, %struct._object* %69), !dbg !12298
  %tobool59 = icmp ne i32 %call58, 0, !dbg !12298
  br i1 %tobool59, label %if.then.60, label %if.else.73, !dbg !12299

if.then.60:                                       ; preds = %if.else.57
  br label %do.body.61, !dbg !12300

do.body.61:                                       ; preds = %if.then.60
  %70 = bitcast %struct._object** %_py_decref_tmp62 to i8*, !dbg !12302
  call void @llvm.lifetime.start(i64 8, i8* %70) #3, !dbg !12302
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp62, metadata !1536, metadata !2123), !dbg !12304
  %71 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12305, !tbaa !2119
  store %struct._object* %71, %struct._object** %_py_decref_tmp62, align 8, !dbg !12304, !tbaa !2119
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8, !dbg !12306, !tbaa !2119
  %ob_refcnt63 = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 0, !dbg !12308
  %73 = load i64, i64* %ob_refcnt63, align 8, !dbg !12309, !tbaa !2195
  %dec64 = add i64 %73, -1, !dbg !12309
  store i64 %dec64, i64* %ob_refcnt63, align 8, !dbg !12309, !tbaa !2195
  %cmp65 = icmp ne i64 %dec64, 0, !dbg !12310
  br i1 %cmp65, label %if.then.66, label %if.else.67, !dbg !12311

if.then.66:                                       ; preds = %do.body.61
  br label %if.end.70, !dbg !12312

if.else.67:                                       ; preds = %do.body.61
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8, !dbg !12314, !tbaa !2119
  %ob_type68 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 1, !dbg !12316
  %75 = load %struct._typeobject*, %struct._typeobject** %ob_type68, align 8, !dbg !12316, !tbaa !2203
  %tp_dealloc69 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %75, i32 0, i32 4, !dbg !12317
  %76 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc69, align 8, !dbg !12317, !tbaa !2205
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8, !dbg !12318, !tbaa !2119
  call void %76(%struct._object* %77), !dbg !12319
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.67, %if.then.66
  %78 = bitcast %struct._object** %_py_decref_tmp62 to i8*, !dbg !12320
  call void @llvm.lifetime.end(i64 8, i8* %78) #3, !dbg !12320
  br label %do.cond.71, !dbg !12322

do.cond.71:                                       ; preds = %if.end.70
  br label %do.end.72, !dbg !12323

do.end.72:                                        ; preds = %do.cond.71
  br label %onError, !dbg !12325

if.else.73:                                       ; preds = %if.else.57
  br label %do.body.74, !dbg !12327

do.body.74:                                       ; preds = %if.else.73
  %79 = bitcast %struct._object** %_py_decref_tmp75 to i8*, !dbg !12329
  call void @llvm.lifetime.start(i64 8, i8* %79) #3, !dbg !12329
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp75, metadata !1544, metadata !2123), !dbg !12331
  %80 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12332, !tbaa !2119
  store %struct._object* %80, %struct._object** %_py_decref_tmp75, align 8, !dbg !12331, !tbaa !2119
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8, !dbg !12333, !tbaa !2119
  %ob_refcnt76 = getelementptr inbounds %struct._object, %struct._object* %81, i32 0, i32 0, !dbg !12335
  %82 = load i64, i64* %ob_refcnt76, align 8, !dbg !12336, !tbaa !2195
  %dec77 = add i64 %82, -1, !dbg !12336
  store i64 %dec77, i64* %ob_refcnt76, align 8, !dbg !12336, !tbaa !2195
  %cmp78 = icmp ne i64 %dec77, 0, !dbg !12337
  br i1 %cmp78, label %if.then.79, label %if.else.80, !dbg !12338

if.then.79:                                       ; preds = %do.body.74
  br label %if.end.83, !dbg !12339

if.else.80:                                       ; preds = %do.body.74
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8, !dbg !12341, !tbaa !2119
  %ob_type81 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 1, !dbg !12343
  %84 = load %struct._typeobject*, %struct._typeobject** %ob_type81, align 8, !dbg !12343, !tbaa !2203
  %tp_dealloc82 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %84, i32 0, i32 4, !dbg !12344
  %85 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc82, align 8, !dbg !12344, !tbaa !2205
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8, !dbg !12345, !tbaa !2119
  call void %85(%struct._object* %86), !dbg !12346
  br label %if.end.83

if.end.83:                                        ; preds = %if.else.80, %if.then.79
  %87 = bitcast %struct._object** %_py_decref_tmp75 to i8*, !dbg !12347
  call void @llvm.lifetime.end(i64 8, i8* %87) #3, !dbg !12347
  br label %do.cond.84, !dbg !12349

do.cond.84:                                       ; preds = %if.end.83
  br label %do.end.85, !dbg !12350

do.end.85:                                        ; preds = %do.cond.84
  br label %if.end.86

if.end.86:                                        ; preds = %do.end.85
  br label %if.end.87

if.end.87:                                        ; preds = %if.end.86, %if.then.54
  %88 = load i64, i64* %count, align 8, !dbg !12352, !tbaa !2129
  %inc88 = add i64 %88, 1, !dbg !12352
  store i64 %inc88, i64* %count, align 8, !dbg !12352, !tbaa !2129
  %89 = load i64, i64* %count, align 8, !dbg !12354, !tbaa !2129
  %90 = load %struct._object*, %struct._object** %list, align 8, !dbg !12355, !tbaa !2119
  %91 = bitcast %struct._object* %90 to %struct.PyVarObject*, !dbg !12356
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %91, i32 0, i32 1, !dbg !12357
  store i64 %89, i64* %ob_size, align 8, !dbg !12358, !tbaa !2239
  %92 = load %struct._object*, %struct._object** %list, align 8, !dbg !12359, !tbaa !2119
  %call89 = call i32 @PyList_Reverse(%struct._object* %92), !dbg !12361
  %cmp90 = icmp slt i32 %call89, 0, !dbg !12362
  br i1 %cmp90, label %if.then.91, label %if.end.92, !dbg !12363

if.then.91:                                       ; preds = %if.end.87
  br label %onError, !dbg !12364

if.end.92:                                        ; preds = %if.end.87
  %93 = load %struct._object*, %struct._object** %list, align 8, !dbg !12365, !tbaa !2119
  store %struct._object* %93, %struct._object** %retval, !dbg !12366
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12366

onError:                                          ; preds = %if.then.91, %do.end.72, %if.then.51, %do.end, %if.then.19
  br label %do.body.93, !dbg !12367

do.body.93:                                       ; preds = %onError
  %94 = bitcast %struct._object** %_py_decref_tmp94 to i8*, !dbg !12368
  call void @llvm.lifetime.start(i64 8, i8* %94) #3, !dbg !12368
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp94, metadata !1546, metadata !2123), !dbg !12370
  %95 = load %struct._object*, %struct._object** %list, align 8, !dbg !12371, !tbaa !2119
  store %struct._object* %95, %struct._object** %_py_decref_tmp94, align 8, !dbg !12370, !tbaa !2119
  %96 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8, !dbg !12372, !tbaa !2119
  %ob_refcnt95 = getelementptr inbounds %struct._object, %struct._object* %96, i32 0, i32 0, !dbg !12374
  %97 = load i64, i64* %ob_refcnt95, align 8, !dbg !12375, !tbaa !2195
  %dec96 = add i64 %97, -1, !dbg !12375
  store i64 %dec96, i64* %ob_refcnt95, align 8, !dbg !12375, !tbaa !2195
  %cmp97 = icmp ne i64 %dec96, 0, !dbg !12376
  br i1 %cmp97, label %if.then.98, label %if.else.99, !dbg !12377

if.then.98:                                       ; preds = %do.body.93
  br label %if.end.102, !dbg !12378

if.else.99:                                       ; preds = %do.body.93
  %98 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8, !dbg !12380, !tbaa !2119
  %ob_type100 = getelementptr inbounds %struct._object, %struct._object* %98, i32 0, i32 1, !dbg !12382
  %99 = load %struct._typeobject*, %struct._typeobject** %ob_type100, align 8, !dbg !12382, !tbaa !2203
  %tp_dealloc101 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %99, i32 0, i32 4, !dbg !12383
  %100 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc101, align 8, !dbg !12383, !tbaa !2205
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8, !dbg !12384, !tbaa !2119
  call void %100(%struct._object* %101), !dbg !12385
  br label %if.end.102

if.end.102:                                       ; preds = %if.else.99, %if.then.98
  %102 = bitcast %struct._object** %_py_decref_tmp94 to i8*, !dbg !12386
  call void @llvm.lifetime.end(i64 8, i8* %102) #3, !dbg !12386
  br label %do.cond.103, !dbg !12388

do.cond.103:                                      ; preds = %if.end.102
  br label %do.end.104, !dbg !12389

do.end.104:                                       ; preds = %do.cond.103
  store %struct._object* null, %struct._object** %retval, !dbg !12391
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12391

cleanup:                                          ; preds = %do.end.104, %if.end.92, %if.then.7, %if.then.2, %if.then
  %103 = bitcast %struct._object** %sub to i8*, !dbg !12392
  call void @llvm.lifetime.end(i64 8, i8* %103) #3, !dbg !12392
  %104 = bitcast %struct._object** %list to i8*, !dbg !12392
  call void @llvm.lifetime.end(i64 8, i8* %104) #3, !dbg !12392
  %105 = bitcast i64* %count to i8*, !dbg !12392
  call void @llvm.lifetime.end(i64 8, i8* %105) #3, !dbg !12392
  %106 = bitcast i64* %pos to i8*, !dbg !12392
  call void @llvm.lifetime.end(i64 8, i8* %106) #3, !dbg !12392
  %107 = bitcast i64* %j to i8*, !dbg !12392
  call void @llvm.lifetime.end(i64 8, i8* %107) #3, !dbg !12392
  %108 = load %struct._object*, %struct._object** %retval, !dbg !12392
  ret %struct._object* %108, !dbg !12392
}

declare %struct._object* @PyList_New(i64) #2

declare i32 @PyList_Append(%struct._object*, %struct._object*) #2

declare i32 @PyList_Reverse(%struct._object*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal %struct._object* @stringlib_rsplit_char(%struct._object* %str_obj, i8* %str, i64 %str_len, i8 signext %ch, i64 %maxcount) #4 {
entry:
  %retval = alloca %struct._object*, align 8
  %str_obj.addr = alloca %struct._object*, align 8
  %str.addr = alloca i8*, align 8
  %str_len.addr = alloca i64, align 8
  %ch.addr = alloca i8, align 1
  %maxcount.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %count = alloca i64, align 8
  %list = alloca %struct._object*, align 8
  %sub = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp33 = alloca %struct._object*, align 8
  %_py_decref_tmp71 = alloca %struct._object*, align 8
  %_py_decref_tmp85 = alloca %struct._object*, align 8
  %_py_decref_tmp107 = alloca %struct._object*, align 8
  store %struct._object* %str_obj, %struct._object** %str_obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %str_obj.addr, metadata !1552, metadata !2123), !dbg !12393
  store i8* %str, i8** %str.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !1553, metadata !2123), !dbg !12394
  store i64 %str_len, i64* %str_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %str_len.addr, metadata !1554, metadata !2123), !dbg !12395
  store i8 %ch, i8* %ch.addr, align 1, !tbaa !2233
  call void @llvm.dbg.declare(metadata i8* %ch.addr, metadata !1555, metadata !2123), !dbg !12396
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1556, metadata !2123), !dbg !12397
  %0 = bitcast i64* %i to i8*, !dbg !12398
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !12398
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1557, metadata !2123), !dbg !12399
  %1 = bitcast i64* %j to i8*, !dbg !12398
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !12398
  call void @llvm.dbg.declare(metadata i64* %j, metadata !1558, metadata !2123), !dbg !12400
  %2 = bitcast i64* %count to i8*, !dbg !12398
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !12398
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1559, metadata !2123), !dbg !12401
  store i64 0, i64* %count, align 8, !dbg !12401, !tbaa !2129
  %3 = bitcast %struct._object** %list to i8*, !dbg !12402
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !12402
  call void @llvm.dbg.declare(metadata %struct._object** %list, metadata !1560, metadata !2123), !dbg !12403
  %4 = load i64, i64* %maxcount.addr, align 8, !dbg !12404, !tbaa !2129
  %cmp = icmp sge i64 %4, 12, !dbg !12405
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !12404

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !12406

cond.false:                                       ; preds = %entry
  %5 = load i64, i64* %maxcount.addr, align 8, !dbg !12408, !tbaa !2129
  %add = add i64 %5, 1, !dbg !12410
  br label %cond.end, !dbg !12404

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 12, %cond.true ], [ %add, %cond.false ], !dbg !12404
  %call = call %struct._object* @PyList_New(i64 %cond), !dbg !12411
  store %struct._object* %call, %struct._object** %list, align 8, !dbg !12403, !tbaa !2119
  %6 = bitcast %struct._object** %sub to i8*, !dbg !12414
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !12414
  call void @llvm.dbg.declare(metadata %struct._object** %sub, metadata !1561, metadata !2123), !dbg !12415
  %7 = load %struct._object*, %struct._object** %list, align 8, !dbg !12416, !tbaa !2119
  %cmp1 = icmp eq %struct._object* %7, null, !dbg !12418
  br i1 %cmp1, label %if.then, label %if.end, !dbg !12419

if.then:                                          ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval, !dbg !12420
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12420

if.end:                                           ; preds = %cond.end
  %8 = load i64, i64* %str_len.addr, align 8, !dbg !12421, !tbaa !2129
  %sub2 = sub i64 %8, 1, !dbg !12422
  store i64 %sub2, i64* %j, align 8, !dbg !12423, !tbaa !2129
  store i64 %sub2, i64* %i, align 8, !dbg !12424, !tbaa !2129
  br label %while.cond, !dbg !12425

while.cond:                                       ; preds = %for.end, %if.end
  %9 = load i64, i64* %i, align 8, !dbg !12426, !tbaa !2129
  %cmp3 = icmp sge i64 %9, 0, !dbg !12428
  br i1 %cmp3, label %land.rhs, label %land.end, !dbg !12429

land.rhs:                                         ; preds = %while.cond
  %10 = load i64, i64* %maxcount.addr, align 8, !dbg !12430, !tbaa !2129
  %dec = add i64 %10, -1, !dbg !12430
  store i64 %dec, i64* %maxcount.addr, align 8, !dbg !12430, !tbaa !2129
  %cmp4 = icmp sgt i64 %10, 0, !dbg !12431
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %11 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
  br i1 %11, label %while.body, label %while.end, !dbg !12432

while.body:                                       ; preds = %land.end
  br label %for.cond, !dbg !12433

for.cond:                                         ; preds = %for.inc, %while.body
  %12 = load i64, i64* %i, align 8, !dbg !12434, !tbaa !2129
  %cmp5 = icmp sge i64 %12, 0, !dbg !12437
  br i1 %cmp5, label %for.body, label %for.end, !dbg !12438

for.body:                                         ; preds = %for.cond
  %13 = load i64, i64* %i, align 8, !dbg !12439, !tbaa !2129
  %14 = load i8*, i8** %str.addr, align 8, !dbg !12440, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %14, i64 %13, !dbg !12440
  %15 = load i8, i8* %arrayidx, align 1, !dbg !12440, !tbaa !2233
  %conv = sext i8 %15 to i32, !dbg !12440
  %16 = load i8, i8* %ch.addr, align 1, !dbg !12441, !tbaa !2233
  %conv6 = sext i8 %16 to i32, !dbg !12441
  %cmp7 = icmp eq i32 %conv, %conv6, !dbg !12442
  br i1 %cmp7, label %if.then.9, label %if.end.48, !dbg !12443

if.then.9:                                        ; preds = %for.body
  %17 = load i8*, i8** %str.addr, align 8, !dbg !12444, !tbaa !2119
  %18 = load i64, i64* %i, align 8, !dbg !12445, !tbaa !2129
  %add10 = add i64 %18, 1, !dbg !12446
  %add.ptr = getelementptr i8, i8* %17, i64 %add10, !dbg !12447
  %19 = load i64, i64* %j, align 8, !dbg !12448, !tbaa !2129
  %add11 = add i64 %19, 1, !dbg !12449
  %20 = load i64, i64* %i, align 8, !dbg !12450, !tbaa !2129
  %add12 = add i64 %20, 1, !dbg !12451
  %sub13 = sub i64 %add11, %add12, !dbg !12452
  %call14 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr, i64 %sub13), !dbg !12453
  store %struct._object* %call14, %struct._object** %sub, align 8, !dbg !12454, !tbaa !2119
  %21 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12455, !tbaa !2119
  %cmp15 = icmp eq %struct._object* %21, null, !dbg !12457
  br i1 %cmp15, label %if.then.17, label %if.end.18, !dbg !12458

if.then.17:                                       ; preds = %if.then.9
  br label %onError, !dbg !12459

if.end.18:                                        ; preds = %if.then.9
  %22 = load i64, i64* %count, align 8, !dbg !12461, !tbaa !2129
  %cmp19 = icmp slt i64 %22, 12, !dbg !12463
  br i1 %cmp19, label %if.then.21, label %if.else, !dbg !12464

if.then.21:                                       ; preds = %if.end.18
  %23 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12465, !tbaa !2119
  %24 = load i64, i64* %count, align 8, !dbg !12468, !tbaa !2129
  %25 = load %struct._object*, %struct._object** %list, align 8, !dbg !12469, !tbaa !2119
  %26 = bitcast %struct._object* %25 to %struct.PyListObject*, !dbg !12470
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %26, i32 0, i32 1, !dbg !12471
  %27 = load %struct._object**, %struct._object*** %ob_item, align 8, !dbg !12471, !tbaa !10183
  %arrayidx22 = getelementptr %struct._object*, %struct._object** %27, i64 %24, !dbg !12472
  store %struct._object* %23, %struct._object** %arrayidx22, align 8, !dbg !12473, !tbaa !2119
  br label %if.end.46, !dbg !12474

if.else:                                          ; preds = %if.end.18
  %28 = load %struct._object*, %struct._object** %list, align 8, !dbg !12475, !tbaa !2119
  %29 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12477, !tbaa !2119
  %call23 = call i32 @PyList_Append(%struct._object* %28, %struct._object* %29), !dbg !12478
  %tobool = icmp ne i32 %call23, 0, !dbg !12478
  br i1 %tobool, label %if.then.24, label %if.else.31, !dbg !12479

if.then.24:                                       ; preds = %if.else
  br label %do.body, !dbg !12480

do.body:                                          ; preds = %if.then.24
  %30 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12482
  call void @llvm.lifetime.start(i64 8, i8* %30) #3, !dbg !12482
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1562, metadata !2123), !dbg !12484
  %31 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12485, !tbaa !2119
  store %struct._object* %31, %struct._object** %_py_decref_tmp, align 8, !dbg !12484, !tbaa !2119
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12486, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0, !dbg !12488
  %33 = load i64, i64* %ob_refcnt, align 8, !dbg !12489, !tbaa !2195
  %dec25 = add i64 %33, -1, !dbg !12489
  store i64 %dec25, i64* %ob_refcnt, align 8, !dbg !12489, !tbaa !2195
  %cmp26 = icmp ne i64 %dec25, 0, !dbg !12490
  br i1 %cmp26, label %if.then.28, label %if.else.29, !dbg !12491

if.then.28:                                       ; preds = %do.body
  br label %if.end.30, !dbg !12492

if.else.29:                                       ; preds = %do.body
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12494, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1, !dbg !12496
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !12496, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4, !dbg !12497
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !12497, !tbaa !2205
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12498, !tbaa !2119
  call void %36(%struct._object* %37), !dbg !12499
  br label %if.end.30

if.end.30:                                        ; preds = %if.else.29, %if.then.28
  %38 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12500
  call void @llvm.lifetime.end(i64 8, i8* %38) #3, !dbg !12500
  br label %do.cond, !dbg !12502

do.cond:                                          ; preds = %if.end.30
  br label %do.end, !dbg !12503

do.end:                                           ; preds = %do.cond
  br label %onError, !dbg !12505

if.else.31:                                       ; preds = %if.else
  br label %do.body.32, !dbg !12507

do.body.32:                                       ; preds = %if.else.31
  %39 = bitcast %struct._object** %_py_decref_tmp33 to i8*, !dbg !12509
  call void @llvm.lifetime.start(i64 8, i8* %39) #3, !dbg !12509
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp33, metadata !1575, metadata !2123), !dbg !12511
  %40 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12512, !tbaa !2119
  store %struct._object* %40, %struct._object** %_py_decref_tmp33, align 8, !dbg !12511, !tbaa !2119
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8, !dbg !12513, !tbaa !2119
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0, !dbg !12515
  %42 = load i64, i64* %ob_refcnt34, align 8, !dbg !12516, !tbaa !2195
  %dec35 = add i64 %42, -1, !dbg !12516
  store i64 %dec35, i64* %ob_refcnt34, align 8, !dbg !12516, !tbaa !2195
  %cmp36 = icmp ne i64 %dec35, 0, !dbg !12517
  br i1 %cmp36, label %if.then.38, label %if.else.39, !dbg !12518

if.then.38:                                       ; preds = %do.body.32
  br label %if.end.42, !dbg !12519

if.else.39:                                       ; preds = %do.body.32
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8, !dbg !12521, !tbaa !2119
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1, !dbg !12523
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8, !dbg !12523, !tbaa !2203
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4, !dbg !12524
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8, !dbg !12524, !tbaa !2205
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8, !dbg !12525, !tbaa !2119
  call void %45(%struct._object* %46), !dbg !12526
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  %47 = bitcast %struct._object** %_py_decref_tmp33 to i8*, !dbg !12527
  call void @llvm.lifetime.end(i64 8, i8* %47) #3, !dbg !12527
  br label %do.cond.43, !dbg !12529

do.cond.43:                                       ; preds = %if.end.42
  br label %do.end.44, !dbg !12530

do.end.44:                                        ; preds = %do.cond.43
  br label %if.end.45

if.end.45:                                        ; preds = %do.end.44
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %if.then.21
  %48 = load i64, i64* %count, align 8, !dbg !12532, !tbaa !2129
  %inc = add i64 %48, 1, !dbg !12532
  store i64 %inc, i64* %count, align 8, !dbg !12532, !tbaa !2129
  %49 = load i64, i64* %i, align 8, !dbg !12534, !tbaa !2129
  %sub47 = sub i64 %49, 1, !dbg !12535
  store i64 %sub47, i64* %i, align 8, !dbg !12536, !tbaa !2129
  store i64 %sub47, i64* %j, align 8, !dbg !12537, !tbaa !2129
  br label %for.end, !dbg !12538

if.end.48:                                        ; preds = %for.body
  br label %for.inc, !dbg !12539

for.inc:                                          ; preds = %if.end.48
  %50 = load i64, i64* %i, align 8, !dbg !12540, !tbaa !2129
  %dec49 = add i64 %50, -1, !dbg !12540
  store i64 %dec49, i64* %i, align 8, !dbg !12540, !tbaa !2129
  br label %for.cond, !dbg !12541

for.end:                                          ; preds = %if.end.46, %for.cond
  br label %while.cond, !dbg !12425

while.end:                                        ; preds = %land.end
  %51 = load i64, i64* %j, align 8, !dbg !12542, !tbaa !2129
  %cmp50 = icmp sge i64 %51, -1, !dbg !12543
  br i1 %cmp50, label %if.then.52, label %if.end.100, !dbg !12544

if.then.52:                                       ; preds = %while.end
  %52 = load i8*, i8** %str.addr, align 8, !dbg !12545, !tbaa !2119
  %add.ptr53 = getelementptr i8, i8* %52, i64 0, !dbg !12546
  %53 = load i64, i64* %j, align 8, !dbg !12547, !tbaa !2129
  %add54 = add i64 %53, 1, !dbg !12548
  %sub55 = sub i64 %add54, 0, !dbg !12549
  %call56 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr53, i64 %sub55), !dbg !12550
  store %struct._object* %call56, %struct._object** %sub, align 8, !dbg !12551, !tbaa !2119
  %54 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12552, !tbaa !2119
  %cmp57 = icmp eq %struct._object* %54, null, !dbg !12554
  br i1 %cmp57, label %if.then.59, label %if.end.60, !dbg !12555

if.then.59:                                       ; preds = %if.then.52
  br label %onError, !dbg !12556

if.end.60:                                        ; preds = %if.then.52
  %55 = load i64, i64* %count, align 8, !dbg !12558, !tbaa !2129
  %cmp61 = icmp slt i64 %55, 12, !dbg !12560
  br i1 %cmp61, label %if.then.63, label %if.else.66, !dbg !12561

if.then.63:                                       ; preds = %if.end.60
  %56 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12562, !tbaa !2119
  %57 = load i64, i64* %count, align 8, !dbg !12565, !tbaa !2129
  %58 = load %struct._object*, %struct._object** %list, align 8, !dbg !12566, !tbaa !2119
  %59 = bitcast %struct._object* %58 to %struct.PyListObject*, !dbg !12567
  %ob_item64 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %59, i32 0, i32 1, !dbg !12568
  %60 = load %struct._object**, %struct._object*** %ob_item64, align 8, !dbg !12568, !tbaa !10183
  %arrayidx65 = getelementptr %struct._object*, %struct._object** %60, i64 %57, !dbg !12569
  store %struct._object* %56, %struct._object** %arrayidx65, align 8, !dbg !12570, !tbaa !2119
  br label %if.end.98, !dbg !12571

if.else.66:                                       ; preds = %if.end.60
  %61 = load %struct._object*, %struct._object** %list, align 8, !dbg !12572, !tbaa !2119
  %62 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12574, !tbaa !2119
  %call67 = call i32 @PyList_Append(%struct._object* %61, %struct._object* %62), !dbg !12575
  %tobool68 = icmp ne i32 %call67, 0, !dbg !12575
  br i1 %tobool68, label %if.then.69, label %if.else.83, !dbg !12576

if.then.69:                                       ; preds = %if.else.66
  br label %do.body.70, !dbg !12577

do.body.70:                                       ; preds = %if.then.69
  %63 = bitcast %struct._object** %_py_decref_tmp71 to i8*, !dbg !12579
  call void @llvm.lifetime.start(i64 8, i8* %63) #3, !dbg !12579
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp71, metadata !1577, metadata !2123), !dbg !12581
  %64 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12582, !tbaa !2119
  store %struct._object* %64, %struct._object** %_py_decref_tmp71, align 8, !dbg !12581, !tbaa !2119
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8, !dbg !12583, !tbaa !2119
  %ob_refcnt72 = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 0, !dbg !12585
  %66 = load i64, i64* %ob_refcnt72, align 8, !dbg !12586, !tbaa !2195
  %dec73 = add i64 %66, -1, !dbg !12586
  store i64 %dec73, i64* %ob_refcnt72, align 8, !dbg !12586, !tbaa !2195
  %cmp74 = icmp ne i64 %dec73, 0, !dbg !12587
  br i1 %cmp74, label %if.then.76, label %if.else.77, !dbg !12588

if.then.76:                                       ; preds = %do.body.70
  br label %if.end.80, !dbg !12589

if.else.77:                                       ; preds = %do.body.70
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8, !dbg !12591, !tbaa !2119
  %ob_type78 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 1, !dbg !12593
  %68 = load %struct._typeobject*, %struct._typeobject** %ob_type78, align 8, !dbg !12593, !tbaa !2203
  %tp_dealloc79 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %68, i32 0, i32 4, !dbg !12594
  %69 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc79, align 8, !dbg !12594, !tbaa !2205
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8, !dbg !12595, !tbaa !2119
  call void %69(%struct._object* %70), !dbg !12596
  br label %if.end.80

if.end.80:                                        ; preds = %if.else.77, %if.then.76
  %71 = bitcast %struct._object** %_py_decref_tmp71 to i8*, !dbg !12597
  call void @llvm.lifetime.end(i64 8, i8* %71) #3, !dbg !12597
  br label %do.cond.81, !dbg !12599

do.cond.81:                                       ; preds = %if.end.80
  br label %do.end.82, !dbg !12600

do.end.82:                                        ; preds = %do.cond.81
  br label %onError, !dbg !12602

if.else.83:                                       ; preds = %if.else.66
  br label %do.body.84, !dbg !12604

do.body.84:                                       ; preds = %if.else.83
  %72 = bitcast %struct._object** %_py_decref_tmp85 to i8*, !dbg !12606
  call void @llvm.lifetime.start(i64 8, i8* %72) #3, !dbg !12606
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp85, metadata !1586, metadata !2123), !dbg !12608
  %73 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12609, !tbaa !2119
  store %struct._object* %73, %struct._object** %_py_decref_tmp85, align 8, !dbg !12608, !tbaa !2119
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8, !dbg !12610, !tbaa !2119
  %ob_refcnt86 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 0, !dbg !12612
  %75 = load i64, i64* %ob_refcnt86, align 8, !dbg !12613, !tbaa !2195
  %dec87 = add i64 %75, -1, !dbg !12613
  store i64 %dec87, i64* %ob_refcnt86, align 8, !dbg !12613, !tbaa !2195
  %cmp88 = icmp ne i64 %dec87, 0, !dbg !12614
  br i1 %cmp88, label %if.then.90, label %if.else.91, !dbg !12615

if.then.90:                                       ; preds = %do.body.84
  br label %if.end.94, !dbg !12616

if.else.91:                                       ; preds = %do.body.84
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8, !dbg !12618, !tbaa !2119
  %ob_type92 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 1, !dbg !12620
  %77 = load %struct._typeobject*, %struct._typeobject** %ob_type92, align 8, !dbg !12620, !tbaa !2203
  %tp_dealloc93 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %77, i32 0, i32 4, !dbg !12621
  %78 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc93, align 8, !dbg !12621, !tbaa !2205
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8, !dbg !12622, !tbaa !2119
  call void %78(%struct._object* %79), !dbg !12623
  br label %if.end.94

if.end.94:                                        ; preds = %if.else.91, %if.then.90
  %80 = bitcast %struct._object** %_py_decref_tmp85 to i8*, !dbg !12624
  call void @llvm.lifetime.end(i64 8, i8* %80) #3, !dbg !12624
  br label %do.cond.95, !dbg !12626

do.cond.95:                                       ; preds = %if.end.94
  br label %do.end.96, !dbg !12627

do.end.96:                                        ; preds = %do.cond.95
  br label %if.end.97

if.end.97:                                        ; preds = %do.end.96
  br label %if.end.98

if.end.98:                                        ; preds = %if.end.97, %if.then.63
  %81 = load i64, i64* %count, align 8, !dbg !12629, !tbaa !2129
  %inc99 = add i64 %81, 1, !dbg !12629
  store i64 %inc99, i64* %count, align 8, !dbg !12629, !tbaa !2129
  br label %if.end.100, !dbg !12631

if.end.100:                                       ; preds = %if.end.98, %while.end
  %82 = load i64, i64* %count, align 8, !dbg !12632, !tbaa !2129
  %83 = load %struct._object*, %struct._object** %list, align 8, !dbg !12633, !tbaa !2119
  %84 = bitcast %struct._object* %83 to %struct.PyVarObject*, !dbg !12634
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %84, i32 0, i32 1, !dbg !12635
  store i64 %82, i64* %ob_size, align 8, !dbg !12636, !tbaa !2239
  %85 = load %struct._object*, %struct._object** %list, align 8, !dbg !12637, !tbaa !2119
  %call101 = call i32 @PyList_Reverse(%struct._object* %85), !dbg !12639
  %cmp102 = icmp slt i32 %call101, 0, !dbg !12640
  br i1 %cmp102, label %if.then.104, label %if.end.105, !dbg !12641

if.then.104:                                      ; preds = %if.end.100
  br label %onError, !dbg !12642

if.end.105:                                       ; preds = %if.end.100
  %86 = load %struct._object*, %struct._object** %list, align 8, !dbg !12643, !tbaa !2119
  store %struct._object* %86, %struct._object** %retval, !dbg !12644
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12644

onError:                                          ; preds = %if.then.104, %do.end.82, %if.then.59, %do.end, %if.then.17
  br label %do.body.106, !dbg !12645

do.body.106:                                      ; preds = %onError
  %87 = bitcast %struct._object** %_py_decref_tmp107 to i8*, !dbg !12646
  call void @llvm.lifetime.start(i64 8, i8* %87) #3, !dbg !12646
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp107, metadata !1588, metadata !2123), !dbg !12648
  %88 = load %struct._object*, %struct._object** %list, align 8, !dbg !12649, !tbaa !2119
  store %struct._object* %88, %struct._object** %_py_decref_tmp107, align 8, !dbg !12648, !tbaa !2119
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8, !dbg !12650, !tbaa !2119
  %ob_refcnt108 = getelementptr inbounds %struct._object, %struct._object* %89, i32 0, i32 0, !dbg !12652
  %90 = load i64, i64* %ob_refcnt108, align 8, !dbg !12653, !tbaa !2195
  %dec109 = add i64 %90, -1, !dbg !12653
  store i64 %dec109, i64* %ob_refcnt108, align 8, !dbg !12653, !tbaa !2195
  %cmp110 = icmp ne i64 %dec109, 0, !dbg !12654
  br i1 %cmp110, label %if.then.112, label %if.else.113, !dbg !12655

if.then.112:                                      ; preds = %do.body.106
  br label %if.end.116, !dbg !12656

if.else.113:                                      ; preds = %do.body.106
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8, !dbg !12658, !tbaa !2119
  %ob_type114 = getelementptr inbounds %struct._object, %struct._object* %91, i32 0, i32 1, !dbg !12660
  %92 = load %struct._typeobject*, %struct._typeobject** %ob_type114, align 8, !dbg !12660, !tbaa !2203
  %tp_dealloc115 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %92, i32 0, i32 4, !dbg !12661
  %93 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc115, align 8, !dbg !12661, !tbaa !2205
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8, !dbg !12662, !tbaa !2119
  call void %93(%struct._object* %94), !dbg !12663
  br label %if.end.116

if.end.116:                                       ; preds = %if.else.113, %if.then.112
  %95 = bitcast %struct._object** %_py_decref_tmp107 to i8*, !dbg !12664
  call void @llvm.lifetime.end(i64 8, i8* %95) #3, !dbg !12664
  br label %do.cond.117, !dbg !12666

do.cond.117:                                      ; preds = %if.end.116
  br label %do.end.118, !dbg !12667

do.end.118:                                       ; preds = %do.cond.117
  store %struct._object* null, %struct._object** %retval, !dbg !12669
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12669

cleanup:                                          ; preds = %do.end.118, %if.end.105, %if.then
  %96 = bitcast %struct._object** %sub to i8*, !dbg !12670
  call void @llvm.lifetime.end(i64 8, i8* %96) #3, !dbg !12670
  %97 = bitcast %struct._object** %list to i8*, !dbg !12670
  call void @llvm.lifetime.end(i64 8, i8* %97) #3, !dbg !12670
  %98 = bitcast i64* %count to i8*, !dbg !12670
  call void @llvm.lifetime.end(i64 8, i8* %98) #3, !dbg !12670
  %99 = bitcast i64* %j to i8*, !dbg !12670
  call void @llvm.lifetime.end(i64 8, i8* %99) #3, !dbg !12670
  %100 = bitcast i64* %i to i8*, !dbg !12670
  call void @llvm.lifetime.end(i64 8, i8* %100) #3, !dbg !12670
  %101 = load %struct._object*, %struct._object** %retval, !dbg !12670
  ret %struct._object* %101, !dbg !12670
}

; Function Attrs: nounwind uwtable
define internal i64 @rstrip_helper(i8* %myptr, i64 %mysize, i8* %argptr, i64 %argsize) #0 {
entry:
  %myptr.addr = alloca i8*, align 8
  %mysize.addr = alloca i64, align 8
  %argptr.addr = alloca i8*, align 8
  %argsize.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i8* %myptr, i8** %myptr.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %myptr.addr, metadata !1603, metadata !2123), !dbg !12671
  store i64 %mysize, i64* %mysize.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %mysize.addr, metadata !1604, metadata !2123), !dbg !12672
  store i8* %argptr, i8** %argptr.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %argptr.addr, metadata !1605, metadata !2123), !dbg !12673
  store i64 %argsize, i64* %argsize.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %argsize.addr, metadata !1606, metadata !2123), !dbg !12674
  %0 = bitcast i64* %i to i8*, !dbg !12675
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !12675
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1607, metadata !2123), !dbg !12676
  %1 = load i64, i64* %mysize.addr, align 8, !dbg !12677, !tbaa !2129
  %sub = sub i64 %1, 1, !dbg !12678
  store i64 %sub, i64* %i, align 8, !dbg !12676, !tbaa !2129
  br label %while.cond, !dbg !12679

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i64, i64* %i, align 8, !dbg !12680, !tbaa !2129
  %cmp = icmp sge i64 %2, 0, !dbg !12683
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !12684

land.rhs:                                         ; preds = %while.cond
  %3 = load i8*, i8** %argptr.addr, align 8, !dbg !12685, !tbaa !2119
  %4 = load i64, i64* %i, align 8, !dbg !12687, !tbaa !2129
  %5 = load i8*, i8** %myptr.addr, align 8, !dbg !12688, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %5, i64 %4, !dbg !12688
  %6 = load i8, i8* %arrayidx, align 1, !dbg !12688, !tbaa !2233
  %conv = zext i8 %6 to i32, !dbg !12689
  %7 = load i64, i64* %argsize.addr, align 8, !dbg !12690, !tbaa !2129
  %call = call i8* @memchr(i8* %3, i32 %conv, i64 %7) #8, !dbg !12691
  %tobool = icmp ne i8* %call, null, !dbg !12684
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %8, label %while.body, label %while.end, !dbg !12692

while.body:                                       ; preds = %land.end
  %9 = load i64, i64* %i, align 8, !dbg !12694, !tbaa !2129
  %dec = add i64 %9, -1, !dbg !12694
  store i64 %dec, i64* %i, align 8, !dbg !12694, !tbaa !2129
  br label %while.cond, !dbg !12679

while.end:                                        ; preds = %land.end
  %10 = load i64, i64* %i, align 8, !dbg !12695, !tbaa !2129
  %add = add i64 %10, 1, !dbg !12696
  %11 = bitcast i64* %i to i8*, !dbg !12697
  call void @llvm.lifetime.end(i64 8, i8* %11) #3, !dbg !12697
  ret i64 %add, !dbg !12698
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct._object* @stringlib_split_whitespace(%struct._object* %str_obj, i8* %str, i64 %str_len, i64 %maxcount) #4 {
entry:
  %retval = alloca %struct._object*, align 8
  %str_obj.addr = alloca %struct._object*, align 8
  %str.addr = alloca i8*, align 8
  %str_len.addr = alloca i64, align 8
  %maxcount.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %count = alloca i64, align 8
  %list = alloca %struct._object*, align 8
  %sub = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp51 = alloca %struct._object*, align 8
  %_py_decref_tmp106 = alloca %struct._object*, align 8
  %_py_decref_tmp120 = alloca %struct._object*, align 8
  %_py_decref_tmp138 = alloca %struct._object*, align 8
  store %struct._object* %str_obj, %struct._object** %str_obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %str_obj.addr, metadata !1623, metadata !2123), !dbg !12699
  store i8* %str, i8** %str.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !1624, metadata !2123), !dbg !12700
  store i64 %str_len, i64* %str_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %str_len.addr, metadata !1625, metadata !2123), !dbg !12701
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1626, metadata !2123), !dbg !12702
  %0 = bitcast i64* %i to i8*, !dbg !12703
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !12703
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1627, metadata !2123), !dbg !12704
  %1 = bitcast i64* %j to i8*, !dbg !12703
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !12703
  call void @llvm.dbg.declare(metadata i64* %j, metadata !1628, metadata !2123), !dbg !12705
  %2 = bitcast i64* %count to i8*, !dbg !12703
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !12703
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1629, metadata !2123), !dbg !12706
  store i64 0, i64* %count, align 8, !dbg !12706, !tbaa !2129
  %3 = bitcast %struct._object** %list to i8*, !dbg !12707
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !12707
  call void @llvm.dbg.declare(metadata %struct._object** %list, metadata !1630, metadata !2123), !dbg !12708
  %4 = load i64, i64* %maxcount.addr, align 8, !dbg !12709, !tbaa !2129
  %cmp = icmp sge i64 %4, 12, !dbg !12710
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !12709

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !12711

cond.false:                                       ; preds = %entry
  %5 = load i64, i64* %maxcount.addr, align 8, !dbg !12713, !tbaa !2129
  %add = add i64 %5, 1, !dbg !12715
  br label %cond.end, !dbg !12709

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 12, %cond.true ], [ %add, %cond.false ], !dbg !12709
  %call = call %struct._object* @PyList_New(i64 %cond), !dbg !12716
  store %struct._object* %call, %struct._object** %list, align 8, !dbg !12708, !tbaa !2119
  %6 = bitcast %struct._object** %sub to i8*, !dbg !12719
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !12719
  call void @llvm.dbg.declare(metadata %struct._object** %sub, metadata !1631, metadata !2123), !dbg !12720
  %7 = load %struct._object*, %struct._object** %list, align 8, !dbg !12721, !tbaa !2119
  %cmp1 = icmp eq %struct._object* %7, null, !dbg !12723
  br i1 %cmp1, label %if.then, label %if.end, !dbg !12724

if.then:                                          ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval, !dbg !12725
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12725

if.end:                                           ; preds = %cond.end
  store i64 0, i64* %j, align 8, !dbg !12726, !tbaa !2129
  store i64 0, i64* %i, align 8, !dbg !12727, !tbaa !2129
  br label %while.cond, !dbg !12728

while.cond:                                       ; preds = %if.end.64, %if.end
  %8 = load i64, i64* %maxcount.addr, align 8, !dbg !12729, !tbaa !2129
  %dec = add i64 %8, -1, !dbg !12729
  store i64 %dec, i64* %maxcount.addr, align 8, !dbg !12729, !tbaa !2129
  %cmp2 = icmp sgt i64 %8, 0, !dbg !12731
  br i1 %cmp2, label %while.body, label %while.end.66, !dbg !12728

while.body:                                       ; preds = %while.cond
  br label %while.cond.3, !dbg !12732

while.cond.3:                                     ; preds = %while.body.8, %while.body
  %9 = load i64, i64* %i, align 8, !dbg !12733, !tbaa !2129
  %10 = load i64, i64* %str_len.addr, align 8, !dbg !12736, !tbaa !2129
  %cmp4 = icmp slt i64 %9, %10, !dbg !12737
  br i1 %cmp4, label %land.rhs, label %land.end, !dbg !12738

land.rhs:                                         ; preds = %while.cond.3
  %11 = load i64, i64* %i, align 8, !dbg !12739, !tbaa !2129
  %12 = load i8*, i8** %str.addr, align 8, !dbg !12741, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %12, i64 %11, !dbg !12741
  %13 = load i8, i8* %arrayidx, align 1, !dbg !12741, !tbaa !2233
  %conv = sext i8 %13 to i32, !dbg !12742
  %and = and i32 %conv, 255, !dbg !12743
  %conv5 = trunc i32 %and to i8, !dbg !12744
  %idxprom = zext i8 %conv5 to i64, !dbg !12745
  %arrayidx6 = getelementptr [256 x i32], [256 x i32]* @_Py_ctype_table, i32 0, i64 %idxprom, !dbg !12745
  %14 = load i32, i32* %arrayidx6, align 4, !dbg !12745, !tbaa !2676
  %and7 = and i32 %14, 8, !dbg !12746
  %tobool = icmp ne i32 %and7, 0, !dbg !12738
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.3
  %15 = phi i1 [ false, %while.cond.3 ], [ %tobool, %land.rhs ]
  br i1 %15, label %while.body.8, label %while.end, !dbg !12747

while.body.8:                                     ; preds = %land.end
  %16 = load i64, i64* %i, align 8, !dbg !12749, !tbaa !2129
  %inc = add i64 %16, 1, !dbg !12749
  store i64 %inc, i64* %i, align 8, !dbg !12749, !tbaa !2129
  br label %while.cond.3, !dbg !12732

while.end:                                        ; preds = %land.end
  %17 = load i64, i64* %i, align 8, !dbg !12750, !tbaa !2129
  %18 = load i64, i64* %str_len.addr, align 8, !dbg !12752, !tbaa !2129
  %cmp9 = icmp eq i64 %17, %18, !dbg !12753
  br i1 %cmp9, label %if.then.11, label %if.end.12, !dbg !12754

if.then.11:                                       ; preds = %while.end
  br label %while.end.66, !dbg !12755

if.end.12:                                        ; preds = %while.end
  %19 = load i64, i64* %i, align 8, !dbg !12757, !tbaa !2129
  store i64 %19, i64* %j, align 8, !dbg !12758, !tbaa !2129
  %20 = load i64, i64* %i, align 8, !dbg !12759, !tbaa !2129
  %inc13 = add i64 %20, 1, !dbg !12759
  store i64 %inc13, i64* %i, align 8, !dbg !12759, !tbaa !2129
  br label %while.cond.14, !dbg !12760

while.cond.14:                                    ; preds = %while.body.27, %if.end.12
  %21 = load i64, i64* %i, align 8, !dbg !12761, !tbaa !2129
  %22 = load i64, i64* %str_len.addr, align 8, !dbg !12762, !tbaa !2129
  %cmp15 = icmp slt i64 %21, %22, !dbg !12763
  br i1 %cmp15, label %land.rhs.17, label %land.end.26, !dbg !12764

land.rhs.17:                                      ; preds = %while.cond.14
  %23 = load i64, i64* %i, align 8, !dbg !12765, !tbaa !2129
  %24 = load i8*, i8** %str.addr, align 8, !dbg !12766, !tbaa !2119
  %arrayidx18 = getelementptr i8, i8* %24, i64 %23, !dbg !12766
  %25 = load i8, i8* %arrayidx18, align 1, !dbg !12766, !tbaa !2233
  %conv19 = sext i8 %25 to i32, !dbg !12767
  %and20 = and i32 %conv19, 255, !dbg !12768
  %conv21 = trunc i32 %and20 to i8, !dbg !12769
  %idxprom22 = zext i8 %conv21 to i64, !dbg !12770
  %arrayidx23 = getelementptr [256 x i32], [256 x i32]* @_Py_ctype_table, i32 0, i64 %idxprom22, !dbg !12770
  %26 = load i32, i32* %arrayidx23, align 4, !dbg !12770, !tbaa !2676
  %and24 = and i32 %26, 8, !dbg !12771
  %tobool25 = icmp ne i32 %and24, 0, !dbg !12772
  %lnot = xor i1 %tobool25, true, !dbg !12772
  br label %land.end.26

land.end.26:                                      ; preds = %land.rhs.17, %while.cond.14
  %27 = phi i1 [ false, %while.cond.14 ], [ %lnot, %land.rhs.17 ]
  br i1 %27, label %while.body.27, label %while.end.29, !dbg !12773

while.body.27:                                    ; preds = %land.end.26
  %28 = load i64, i64* %i, align 8, !dbg !12774, !tbaa !2129
  %inc28 = add i64 %28, 1, !dbg !12774
  store i64 %inc28, i64* %i, align 8, !dbg !12774, !tbaa !2129
  br label %while.cond.14, !dbg !12760

while.end.29:                                     ; preds = %land.end.26
  %29 = load i8*, i8** %str.addr, align 8, !dbg !12775, !tbaa !2119
  %30 = load i64, i64* %j, align 8, !dbg !12776, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %29, i64 %30, !dbg !12777
  %31 = load i64, i64* %i, align 8, !dbg !12778, !tbaa !2129
  %32 = load i64, i64* %j, align 8, !dbg !12779, !tbaa !2129
  %sub30 = sub i64 %31, %32, !dbg !12780
  %call31 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr, i64 %sub30), !dbg !12781
  store %struct._object* %call31, %struct._object** %sub, align 8, !dbg !12782, !tbaa !2119
  %33 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12783, !tbaa !2119
  %cmp32 = icmp eq %struct._object* %33, null, !dbg !12785
  br i1 %cmp32, label %if.then.34, label %if.end.35, !dbg !12786

if.then.34:                                       ; preds = %while.end.29
  br label %onError, !dbg !12787

if.end.35:                                        ; preds = %while.end.29
  %34 = load i64, i64* %count, align 8, !dbg !12789, !tbaa !2129
  %cmp36 = icmp slt i64 %34, 12, !dbg !12791
  br i1 %cmp36, label %if.then.38, label %if.else, !dbg !12792

if.then.38:                                       ; preds = %if.end.35
  %35 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12793, !tbaa !2119
  %36 = load i64, i64* %count, align 8, !dbg !12796, !tbaa !2129
  %37 = load %struct._object*, %struct._object** %list, align 8, !dbg !12797, !tbaa !2119
  %38 = bitcast %struct._object* %37 to %struct.PyListObject*, !dbg !12798
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %38, i32 0, i32 1, !dbg !12799
  %39 = load %struct._object**, %struct._object*** %ob_item, align 8, !dbg !12799, !tbaa !10183
  %arrayidx39 = getelementptr %struct._object*, %struct._object** %39, i64 %36, !dbg !12800
  store %struct._object* %35, %struct._object** %arrayidx39, align 8, !dbg !12801, !tbaa !2119
  br label %if.end.64, !dbg !12802

if.else:                                          ; preds = %if.end.35
  %40 = load %struct._object*, %struct._object** %list, align 8, !dbg !12803, !tbaa !2119
  %41 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12805, !tbaa !2119
  %call40 = call i32 @PyList_Append(%struct._object* %40, %struct._object* %41), !dbg !12806
  %tobool41 = icmp ne i32 %call40, 0, !dbg !12806
  br i1 %tobool41, label %if.then.42, label %if.else.49, !dbg !12807

if.then.42:                                       ; preds = %if.else
  br label %do.body, !dbg !12808

do.body:                                          ; preds = %if.then.42
  %42 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12810
  call void @llvm.lifetime.start(i64 8, i8* %42) #3, !dbg !12810
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1632, metadata !2123), !dbg !12812
  %43 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12813, !tbaa !2119
  store %struct._object* %43, %struct._object** %_py_decref_tmp, align 8, !dbg !12812, !tbaa !2119
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12814, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0, !dbg !12816
  %45 = load i64, i64* %ob_refcnt, align 8, !dbg !12817, !tbaa !2195
  %dec43 = add i64 %45, -1, !dbg !12817
  store i64 %dec43, i64* %ob_refcnt, align 8, !dbg !12817, !tbaa !2195
  %cmp44 = icmp ne i64 %dec43, 0, !dbg !12818
  br i1 %cmp44, label %if.then.46, label %if.else.47, !dbg !12819

if.then.46:                                       ; preds = %do.body
  br label %if.end.48, !dbg !12820

if.else.47:                                       ; preds = %do.body
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12822, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1, !dbg !12824
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !12824, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4, !dbg !12825
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !12825, !tbaa !2205
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !12826, !tbaa !2119
  call void %48(%struct._object* %49), !dbg !12827
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.47, %if.then.46
  %50 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !12828
  call void @llvm.lifetime.end(i64 8, i8* %50) #3, !dbg !12828
  br label %do.cond, !dbg !12830

do.cond:                                          ; preds = %if.end.48
  br label %do.end, !dbg !12831

do.end:                                           ; preds = %do.cond
  br label %onError, !dbg !12833

if.else.49:                                       ; preds = %if.else
  br label %do.body.50, !dbg !12835

do.body.50:                                       ; preds = %if.else.49
  %51 = bitcast %struct._object** %_py_decref_tmp51 to i8*, !dbg !12837
  call void @llvm.lifetime.start(i64 8, i8* %51) #3, !dbg !12837
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp51, metadata !1640, metadata !2123), !dbg !12839
  %52 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12840, !tbaa !2119
  store %struct._object* %52, %struct._object** %_py_decref_tmp51, align 8, !dbg !12839, !tbaa !2119
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8, !dbg !12841, !tbaa !2119
  %ob_refcnt52 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0, !dbg !12843
  %54 = load i64, i64* %ob_refcnt52, align 8, !dbg !12844, !tbaa !2195
  %dec53 = add i64 %54, -1, !dbg !12844
  store i64 %dec53, i64* %ob_refcnt52, align 8, !dbg !12844, !tbaa !2195
  %cmp54 = icmp ne i64 %dec53, 0, !dbg !12845
  br i1 %cmp54, label %if.then.56, label %if.else.57, !dbg !12846

if.then.56:                                       ; preds = %do.body.50
  br label %if.end.60, !dbg !12847

if.else.57:                                       ; preds = %do.body.50
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8, !dbg !12849, !tbaa !2119
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1, !dbg !12851
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8, !dbg !12851, !tbaa !2203
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 4, !dbg !12852
  %57 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8, !dbg !12852, !tbaa !2205
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8, !dbg !12853, !tbaa !2119
  call void %57(%struct._object* %58), !dbg !12854
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  %59 = bitcast %struct._object** %_py_decref_tmp51 to i8*, !dbg !12855
  call void @llvm.lifetime.end(i64 8, i8* %59) #3, !dbg !12855
  br label %do.cond.61, !dbg !12857

do.cond.61:                                       ; preds = %if.end.60
  br label %do.end.62, !dbg !12858

do.end.62:                                        ; preds = %do.cond.61
  br label %if.end.63

if.end.63:                                        ; preds = %do.end.62
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %if.then.38
  %60 = load i64, i64* %count, align 8, !dbg !12860, !tbaa !2129
  %inc65 = add i64 %60, 1, !dbg !12860
  store i64 %inc65, i64* %count, align 8, !dbg !12860, !tbaa !2129
  br label %while.cond, !dbg !12728

while.end.66:                                     ; preds = %if.then.11, %while.cond
  %61 = load i64, i64* %i, align 8, !dbg !12862, !tbaa !2129
  %62 = load i64, i64* %str_len.addr, align 8, !dbg !12863, !tbaa !2129
  %cmp67 = icmp slt i64 %61, %62, !dbg !12864
  br i1 %cmp67, label %if.then.69, label %if.end.136, !dbg !12865

if.then.69:                                       ; preds = %while.end.66
  br label %while.cond.70, !dbg !12866

while.cond.70:                                    ; preds = %while.body.83, %if.then.69
  %63 = load i64, i64* %i, align 8, !dbg !12867, !tbaa !2129
  %64 = load i64, i64* %str_len.addr, align 8, !dbg !12870, !tbaa !2129
  %cmp71 = icmp slt i64 %63, %64, !dbg !12871
  br i1 %cmp71, label %land.rhs.73, label %land.end.82, !dbg !12872

land.rhs.73:                                      ; preds = %while.cond.70
  %65 = load i64, i64* %i, align 8, !dbg !12873, !tbaa !2129
  %66 = load i8*, i8** %str.addr, align 8, !dbg !12875, !tbaa !2119
  %arrayidx74 = getelementptr i8, i8* %66, i64 %65, !dbg !12875
  %67 = load i8, i8* %arrayidx74, align 1, !dbg !12875, !tbaa !2233
  %conv75 = sext i8 %67 to i32, !dbg !12876
  %and76 = and i32 %conv75, 255, !dbg !12877
  %conv77 = trunc i32 %and76 to i8, !dbg !12878
  %idxprom78 = zext i8 %conv77 to i64, !dbg !12879
  %arrayidx79 = getelementptr [256 x i32], [256 x i32]* @_Py_ctype_table, i32 0, i64 %idxprom78, !dbg !12879
  %68 = load i32, i32* %arrayidx79, align 4, !dbg !12879, !tbaa !2676
  %and80 = and i32 %68, 8, !dbg !12880
  %tobool81 = icmp ne i32 %and80, 0, !dbg !12872
  br label %land.end.82

land.end.82:                                      ; preds = %land.rhs.73, %while.cond.70
  %69 = phi i1 [ false, %while.cond.70 ], [ %tobool81, %land.rhs.73 ]
  br i1 %69, label %while.body.83, label %while.end.85, !dbg !12881

while.body.83:                                    ; preds = %land.end.82
  %70 = load i64, i64* %i, align 8, !dbg !12883, !tbaa !2129
  %inc84 = add i64 %70, 1, !dbg !12883
  store i64 %inc84, i64* %i, align 8, !dbg !12883, !tbaa !2129
  br label %while.cond.70, !dbg !12866

while.end.85:                                     ; preds = %land.end.82
  %71 = load i64, i64* %i, align 8, !dbg !12884, !tbaa !2129
  %72 = load i64, i64* %str_len.addr, align 8, !dbg !12885, !tbaa !2129
  %cmp86 = icmp ne i64 %71, %72, !dbg !12886
  br i1 %cmp86, label %if.then.88, label %if.end.135, !dbg !12887

if.then.88:                                       ; preds = %while.end.85
  %73 = load i8*, i8** %str.addr, align 8, !dbg !12888, !tbaa !2119
  %74 = load i64, i64* %i, align 8, !dbg !12889, !tbaa !2129
  %add.ptr89 = getelementptr i8, i8* %73, i64 %74, !dbg !12890
  %75 = load i64, i64* %str_len.addr, align 8, !dbg !12891, !tbaa !2129
  %76 = load i64, i64* %i, align 8, !dbg !12892, !tbaa !2129
  %sub90 = sub i64 %75, %76, !dbg !12893
  %call91 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr89, i64 %sub90), !dbg !12894
  store %struct._object* %call91, %struct._object** %sub, align 8, !dbg !12895, !tbaa !2119
  %77 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12896, !tbaa !2119
  %cmp92 = icmp eq %struct._object* %77, null, !dbg !12898
  br i1 %cmp92, label %if.then.94, label %if.end.95, !dbg !12899

if.then.94:                                       ; preds = %if.then.88
  br label %onError, !dbg !12900

if.end.95:                                        ; preds = %if.then.88
  %78 = load i64, i64* %count, align 8, !dbg !12902, !tbaa !2129
  %cmp96 = icmp slt i64 %78, 12, !dbg !12904
  br i1 %cmp96, label %if.then.98, label %if.else.101, !dbg !12905

if.then.98:                                       ; preds = %if.end.95
  %79 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12906, !tbaa !2119
  %80 = load i64, i64* %count, align 8, !dbg !12909, !tbaa !2129
  %81 = load %struct._object*, %struct._object** %list, align 8, !dbg !12910, !tbaa !2119
  %82 = bitcast %struct._object* %81 to %struct.PyListObject*, !dbg !12911
  %ob_item99 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %82, i32 0, i32 1, !dbg !12912
  %83 = load %struct._object**, %struct._object*** %ob_item99, align 8, !dbg !12912, !tbaa !10183
  %arrayidx100 = getelementptr %struct._object*, %struct._object** %83, i64 %80, !dbg !12913
  store %struct._object* %79, %struct._object** %arrayidx100, align 8, !dbg !12914, !tbaa !2119
  br label %if.end.133, !dbg !12915

if.else.101:                                      ; preds = %if.end.95
  %84 = load %struct._object*, %struct._object** %list, align 8, !dbg !12916, !tbaa !2119
  %85 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12918, !tbaa !2119
  %call102 = call i32 @PyList_Append(%struct._object* %84, %struct._object* %85), !dbg !12919
  %tobool103 = icmp ne i32 %call102, 0, !dbg !12919
  br i1 %tobool103, label %if.then.104, label %if.else.118, !dbg !12920

if.then.104:                                      ; preds = %if.else.101
  br label %do.body.105, !dbg !12921

do.body.105:                                      ; preds = %if.then.104
  %86 = bitcast %struct._object** %_py_decref_tmp106 to i8*, !dbg !12923
  call void @llvm.lifetime.start(i64 8, i8* %86) #3, !dbg !12923
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp106, metadata !1642, metadata !2123), !dbg !12925
  %87 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12926, !tbaa !2119
  store %struct._object* %87, %struct._object** %_py_decref_tmp106, align 8, !dbg !12925, !tbaa !2119
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp106, align 8, !dbg !12927, !tbaa !2119
  %ob_refcnt107 = getelementptr inbounds %struct._object, %struct._object* %88, i32 0, i32 0, !dbg !12929
  %89 = load i64, i64* %ob_refcnt107, align 8, !dbg !12930, !tbaa !2195
  %dec108 = add i64 %89, -1, !dbg !12930
  store i64 %dec108, i64* %ob_refcnt107, align 8, !dbg !12930, !tbaa !2195
  %cmp109 = icmp ne i64 %dec108, 0, !dbg !12931
  br i1 %cmp109, label %if.then.111, label %if.else.112, !dbg !12932

if.then.111:                                      ; preds = %do.body.105
  br label %if.end.115, !dbg !12933

if.else.112:                                      ; preds = %do.body.105
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp106, align 8, !dbg !12935, !tbaa !2119
  %ob_type113 = getelementptr inbounds %struct._object, %struct._object* %90, i32 0, i32 1, !dbg !12937
  %91 = load %struct._typeobject*, %struct._typeobject** %ob_type113, align 8, !dbg !12937, !tbaa !2203
  %tp_dealloc114 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %91, i32 0, i32 4, !dbg !12938
  %92 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc114, align 8, !dbg !12938, !tbaa !2205
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp106, align 8, !dbg !12939, !tbaa !2119
  call void %92(%struct._object* %93), !dbg !12940
  br label %if.end.115

if.end.115:                                       ; preds = %if.else.112, %if.then.111
  %94 = bitcast %struct._object** %_py_decref_tmp106 to i8*, !dbg !12941
  call void @llvm.lifetime.end(i64 8, i8* %94) #3, !dbg !12941
  br label %do.cond.116, !dbg !12943

do.cond.116:                                      ; preds = %if.end.115
  br label %do.end.117, !dbg !12944

do.end.117:                                       ; preds = %do.cond.116
  br label %onError, !dbg !12946

if.else.118:                                      ; preds = %if.else.101
  br label %do.body.119, !dbg !12948

do.body.119:                                      ; preds = %if.else.118
  %95 = bitcast %struct._object** %_py_decref_tmp120 to i8*, !dbg !12950
  call void @llvm.lifetime.start(i64 8, i8* %95) #3, !dbg !12950
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp120, metadata !1652, metadata !2123), !dbg !12952
  %96 = load %struct._object*, %struct._object** %sub, align 8, !dbg !12953, !tbaa !2119
  store %struct._object* %96, %struct._object** %_py_decref_tmp120, align 8, !dbg !12952, !tbaa !2119
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp120, align 8, !dbg !12954, !tbaa !2119
  %ob_refcnt121 = getelementptr inbounds %struct._object, %struct._object* %97, i32 0, i32 0, !dbg !12956
  %98 = load i64, i64* %ob_refcnt121, align 8, !dbg !12957, !tbaa !2195
  %dec122 = add i64 %98, -1, !dbg !12957
  store i64 %dec122, i64* %ob_refcnt121, align 8, !dbg !12957, !tbaa !2195
  %cmp123 = icmp ne i64 %dec122, 0, !dbg !12958
  br i1 %cmp123, label %if.then.125, label %if.else.126, !dbg !12959

if.then.125:                                      ; preds = %do.body.119
  br label %if.end.129, !dbg !12960

if.else.126:                                      ; preds = %do.body.119
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp120, align 8, !dbg !12962, !tbaa !2119
  %ob_type127 = getelementptr inbounds %struct._object, %struct._object* %99, i32 0, i32 1, !dbg !12964
  %100 = load %struct._typeobject*, %struct._typeobject** %ob_type127, align 8, !dbg !12964, !tbaa !2203
  %tp_dealloc128 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %100, i32 0, i32 4, !dbg !12965
  %101 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc128, align 8, !dbg !12965, !tbaa !2205
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp120, align 8, !dbg !12966, !tbaa !2119
  call void %101(%struct._object* %102), !dbg !12967
  br label %if.end.129

if.end.129:                                       ; preds = %if.else.126, %if.then.125
  %103 = bitcast %struct._object** %_py_decref_tmp120 to i8*, !dbg !12968
  call void @llvm.lifetime.end(i64 8, i8* %103) #3, !dbg !12968
  br label %do.cond.130, !dbg !12970

do.cond.130:                                      ; preds = %if.end.129
  br label %do.end.131, !dbg !12971

do.end.131:                                       ; preds = %do.cond.130
  br label %if.end.132

if.end.132:                                       ; preds = %do.end.131
  br label %if.end.133

if.end.133:                                       ; preds = %if.end.132, %if.then.98
  %104 = load i64, i64* %count, align 8, !dbg !12973, !tbaa !2129
  %inc134 = add i64 %104, 1, !dbg !12973
  store i64 %inc134, i64* %count, align 8, !dbg !12973, !tbaa !2129
  br label %if.end.135, !dbg !12975

if.end.135:                                       ; preds = %if.end.133, %while.end.85
  br label %if.end.136, !dbg !12976

if.end.136:                                       ; preds = %if.end.135, %while.end.66
  %105 = load i64, i64* %count, align 8, !dbg !12977, !tbaa !2129
  %106 = load %struct._object*, %struct._object** %list, align 8, !dbg !12978, !tbaa !2119
  %107 = bitcast %struct._object* %106 to %struct.PyVarObject*, !dbg !12979
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %107, i32 0, i32 1, !dbg !12980
  store i64 %105, i64* %ob_size, align 8, !dbg !12981, !tbaa !2239
  %108 = load %struct._object*, %struct._object** %list, align 8, !dbg !12982, !tbaa !2119
  store %struct._object* %108, %struct._object** %retval, !dbg !12983
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !12983

onError:                                          ; preds = %do.end.117, %if.then.94, %do.end, %if.then.34
  br label %do.body.137, !dbg !12984

do.body.137:                                      ; preds = %onError
  %109 = bitcast %struct._object** %_py_decref_tmp138 to i8*, !dbg !12985
  call void @llvm.lifetime.start(i64 8, i8* %109) #3, !dbg !12985
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp138, metadata !1654, metadata !2123), !dbg !12987
  %110 = load %struct._object*, %struct._object** %list, align 8, !dbg !12988, !tbaa !2119
  store %struct._object* %110, %struct._object** %_py_decref_tmp138, align 8, !dbg !12987, !tbaa !2119
  %111 = load %struct._object*, %struct._object** %_py_decref_tmp138, align 8, !dbg !12989, !tbaa !2119
  %ob_refcnt139 = getelementptr inbounds %struct._object, %struct._object* %111, i32 0, i32 0, !dbg !12991
  %112 = load i64, i64* %ob_refcnt139, align 8, !dbg !12992, !tbaa !2195
  %dec140 = add i64 %112, -1, !dbg !12992
  store i64 %dec140, i64* %ob_refcnt139, align 8, !dbg !12992, !tbaa !2195
  %cmp141 = icmp ne i64 %dec140, 0, !dbg !12993
  br i1 %cmp141, label %if.then.143, label %if.else.144, !dbg !12994

if.then.143:                                      ; preds = %do.body.137
  br label %if.end.147, !dbg !12995

if.else.144:                                      ; preds = %do.body.137
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp138, align 8, !dbg !12997, !tbaa !2119
  %ob_type145 = getelementptr inbounds %struct._object, %struct._object* %113, i32 0, i32 1, !dbg !12999
  %114 = load %struct._typeobject*, %struct._typeobject** %ob_type145, align 8, !dbg !12999, !tbaa !2203
  %tp_dealloc146 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %114, i32 0, i32 4, !dbg !13000
  %115 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc146, align 8, !dbg !13000, !tbaa !2205
  %116 = load %struct._object*, %struct._object** %_py_decref_tmp138, align 8, !dbg !13001, !tbaa !2119
  call void %115(%struct._object* %116), !dbg !13002
  br label %if.end.147

if.end.147:                                       ; preds = %if.else.144, %if.then.143
  %117 = bitcast %struct._object** %_py_decref_tmp138 to i8*, !dbg !13003
  call void @llvm.lifetime.end(i64 8, i8* %117) #3, !dbg !13003
  br label %do.cond.148, !dbg !13005

do.cond.148:                                      ; preds = %if.end.147
  br label %do.end.149, !dbg !13006

do.end.149:                                       ; preds = %do.cond.148
  store %struct._object* null, %struct._object** %retval, !dbg !13008
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13008

cleanup:                                          ; preds = %do.end.149, %if.end.136, %if.then
  %118 = bitcast %struct._object** %sub to i8*, !dbg !13009
  call void @llvm.lifetime.end(i64 8, i8* %118) #3, !dbg !13009
  %119 = bitcast %struct._object** %list to i8*, !dbg !13009
  call void @llvm.lifetime.end(i64 8, i8* %119) #3, !dbg !13009
  %120 = bitcast i64* %count to i8*, !dbg !13009
  call void @llvm.lifetime.end(i64 8, i8* %120) #3, !dbg !13009
  %121 = bitcast i64* %j to i8*, !dbg !13009
  call void @llvm.lifetime.end(i64 8, i8* %121) #3, !dbg !13009
  %122 = bitcast i64* %i to i8*, !dbg !13009
  call void @llvm.lifetime.end(i64 8, i8* %122) #3, !dbg !13009
  %123 = load %struct._object*, %struct._object** %retval, !dbg !13009
  ret %struct._object* %123, !dbg !13009
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct._object* @stringlib_split(%struct._object* %str_obj, i8* %str, i64 %str_len, i8* %sep, i64 %sep_len, i64 %maxcount) #4 {
entry:
  %retval = alloca %struct._object*, align 8
  %str_obj.addr = alloca %struct._object*, align 8
  %str.addr = alloca i8*, align 8
  %str_len.addr = alloca i64, align 8
  %sep.addr = alloca i8*, align 8
  %sep_len.addr = alloca i64, align 8
  %maxcount.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %pos = alloca i64, align 8
  %count = alloca i64, align 8
  %list = alloca %struct._object*, align 8
  %sub = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp35 = alloca %struct._object*, align 8
  %_py_decref_tmp64 = alloca %struct._object*, align 8
  %_py_decref_tmp77 = alloca %struct._object*, align 8
  %_py_decref_tmp92 = alloca %struct._object*, align 8
  store %struct._object* %str_obj, %struct._object** %str_obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %str_obj.addr, metadata !1658, metadata !2123), !dbg !13010
  store i8* %str, i8** %str.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !1659, metadata !2123), !dbg !13011
  store i64 %str_len, i64* %str_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %str_len.addr, metadata !1660, metadata !2123), !dbg !13012
  store i8* %sep, i8** %sep.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %sep.addr, metadata !1661, metadata !2123), !dbg !13013
  store i64 %sep_len, i64* %sep_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %sep_len.addr, metadata !1662, metadata !2123), !dbg !13014
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1663, metadata !2123), !dbg !13015
  %0 = bitcast i64* %i to i8*, !dbg !13016
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !13016
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1664, metadata !2123), !dbg !13017
  %1 = bitcast i64* %j to i8*, !dbg !13016
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !13016
  call void @llvm.dbg.declare(metadata i64* %j, metadata !1665, metadata !2123), !dbg !13018
  %2 = bitcast i64* %pos to i8*, !dbg !13016
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !13016
  call void @llvm.dbg.declare(metadata i64* %pos, metadata !1666, metadata !2123), !dbg !13019
  %3 = bitcast i64* %count to i8*, !dbg !13016
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !13016
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1667, metadata !2123), !dbg !13020
  store i64 0, i64* %count, align 8, !dbg !13020, !tbaa !2129
  %4 = bitcast %struct._object** %list to i8*, !dbg !13021
  call void @llvm.lifetime.start(i64 8, i8* %4) #3, !dbg !13021
  call void @llvm.dbg.declare(metadata %struct._object** %list, metadata !1668, metadata !2123), !dbg !13022
  %5 = bitcast %struct._object** %sub to i8*, !dbg !13021
  call void @llvm.lifetime.start(i64 8, i8* %5) #3, !dbg !13021
  call void @llvm.dbg.declare(metadata %struct._object** %sub, metadata !1669, metadata !2123), !dbg !13023
  %6 = load i64, i64* %sep_len.addr, align 8, !dbg !13024, !tbaa !2129
  %cmp = icmp eq i64 %6, 0, !dbg !13026
  br i1 %cmp, label %if.then, label %if.else, !dbg !13027

if.then:                                          ; preds = %entry
  %7 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !13028, !tbaa !2119
  call void @PyErr_SetString(%struct._object* %7, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.98, i32 0, i32 0)), !dbg !13030
  store %struct._object* null, %struct._object** %retval, !dbg !13031
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13031

if.else:                                          ; preds = %entry
  %8 = load i64, i64* %sep_len.addr, align 8, !dbg !13032, !tbaa !2129
  %cmp1 = icmp eq i64 %8, 1, !dbg !13034
  br i1 %cmp1, label %if.then.2, label %if.end, !dbg !13035

if.then.2:                                        ; preds = %if.else
  %9 = load %struct._object*, %struct._object** %str_obj.addr, align 8, !dbg !13036, !tbaa !2119
  %10 = load i8*, i8** %str.addr, align 8, !dbg !13037, !tbaa !2119
  %11 = load i64, i64* %str_len.addr, align 8, !dbg !13038, !tbaa !2129
  %12 = load i8*, i8** %sep.addr, align 8, !dbg !13039, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %12, i64 0, !dbg !13039
  %13 = load i8, i8* %arrayidx, align 1, !dbg !13039, !tbaa !2233
  %14 = load i64, i64* %maxcount.addr, align 8, !dbg !13040, !tbaa !2129
  %call = call %struct._object* @stringlib_split_char(%struct._object* %9, i8* %10, i64 %11, i8 signext %13, i64 %14), !dbg !13041
  store %struct._object* %call, %struct._object** %retval, !dbg !13042
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13042

if.end:                                           ; preds = %if.else
  br label %if.end.3

if.end.3:                                         ; preds = %if.end
  %15 = load i64, i64* %maxcount.addr, align 8, !dbg !13043, !tbaa !2129
  %cmp4 = icmp sge i64 %15, 12, !dbg !13044
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !13043

cond.true:                                        ; preds = %if.end.3
  br label %cond.end, !dbg !13045

cond.false:                                       ; preds = %if.end.3
  %16 = load i64, i64* %maxcount.addr, align 8, !dbg !13047, !tbaa !2129
  %add = add i64 %16, 1, !dbg !13049
  br label %cond.end, !dbg !13043

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 12, %cond.true ], [ %add, %cond.false ], !dbg !13043
  %call5 = call %struct._object* @PyList_New(i64 %cond), !dbg !13050
  store %struct._object* %call5, %struct._object** %list, align 8, !dbg !13053, !tbaa !2119
  %17 = load %struct._object*, %struct._object** %list, align 8, !dbg !13054, !tbaa !2119
  %cmp6 = icmp eq %struct._object* %17, null, !dbg !13056
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !13057

if.then.7:                                        ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval, !dbg !13058
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13058

if.end.8:                                         ; preds = %cond.end
  store i64 0, i64* %j, align 8, !dbg !13059, !tbaa !2129
  store i64 0, i64* %i, align 8, !dbg !13060, !tbaa !2129
  br label %while.cond, !dbg !13061

while.cond:                                       ; preds = %if.end.47, %if.end.8
  %18 = load i64, i64* %maxcount.addr, align 8, !dbg !13062, !tbaa !2129
  %dec = add i64 %18, -1, !dbg !13062
  store i64 %dec, i64* %maxcount.addr, align 8, !dbg !13062, !tbaa !2129
  %cmp9 = icmp sgt i64 %18, 0, !dbg !13064
  br i1 %cmp9, label %while.body, label %while.end, !dbg !13061

while.body:                                       ; preds = %while.cond
  %19 = load i8*, i8** %str.addr, align 8, !dbg !13065, !tbaa !2119
  %20 = load i64, i64* %i, align 8, !dbg !13066, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %19, i64 %20, !dbg !13067
  %21 = load i64, i64* %str_len.addr, align 8, !dbg !13068, !tbaa !2129
  %22 = load i64, i64* %i, align 8, !dbg !13069, !tbaa !2129
  %sub10 = sub i64 %21, %22, !dbg !13070
  %23 = load i8*, i8** %sep.addr, align 8, !dbg !13071, !tbaa !2119
  %24 = load i64, i64* %sep_len.addr, align 8, !dbg !13072, !tbaa !2129
  %call11 = call i64 @fastsearch(i8* %add.ptr, i64 %sub10, i8* %23, i64 %24, i64 -1, i32 1), !dbg !13073
  store i64 %call11, i64* %pos, align 8, !dbg !13074, !tbaa !2129
  %25 = load i64, i64* %pos, align 8, !dbg !13075, !tbaa !2129
  %cmp12 = icmp slt i64 %25, 0, !dbg !13077
  br i1 %cmp12, label %if.then.13, label %if.end.14, !dbg !13078

if.then.13:                                       ; preds = %while.body
  br label %while.end, !dbg !13079

if.end.14:                                        ; preds = %while.body
  %26 = load i64, i64* %i, align 8, !dbg !13080, !tbaa !2129
  %27 = load i64, i64* %pos, align 8, !dbg !13081, !tbaa !2129
  %add15 = add i64 %26, %27, !dbg !13082
  store i64 %add15, i64* %j, align 8, !dbg !13083, !tbaa !2129
  %28 = load i8*, i8** %str.addr, align 8, !dbg !13084, !tbaa !2119
  %29 = load i64, i64* %i, align 8, !dbg !13085, !tbaa !2129
  %add.ptr16 = getelementptr i8, i8* %28, i64 %29, !dbg !13086
  %30 = load i64, i64* %j, align 8, !dbg !13087, !tbaa !2129
  %31 = load i64, i64* %i, align 8, !dbg !13088, !tbaa !2129
  %sub17 = sub i64 %30, %31, !dbg !13089
  %call18 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr16, i64 %sub17), !dbg !13090
  store %struct._object* %call18, %struct._object** %sub, align 8, !dbg !13091, !tbaa !2119
  %32 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13092, !tbaa !2119
  %cmp19 = icmp eq %struct._object* %32, null, !dbg !13094
  br i1 %cmp19, label %if.then.20, label %if.end.21, !dbg !13095

if.then.20:                                       ; preds = %if.end.14
  br label %onError, !dbg !13096

if.end.21:                                        ; preds = %if.end.14
  %33 = load i64, i64* %count, align 8, !dbg !13098, !tbaa !2129
  %cmp22 = icmp slt i64 %33, 12, !dbg !13100
  br i1 %cmp22, label %if.then.23, label %if.else.25, !dbg !13101

if.then.23:                                       ; preds = %if.end.21
  %34 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13102, !tbaa !2119
  %35 = load i64, i64* %count, align 8, !dbg !13105, !tbaa !2129
  %36 = load %struct._object*, %struct._object** %list, align 8, !dbg !13106, !tbaa !2119
  %37 = bitcast %struct._object* %36 to %struct.PyListObject*, !dbg !13107
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %37, i32 0, i32 1, !dbg !13108
  %38 = load %struct._object**, %struct._object*** %ob_item, align 8, !dbg !13108, !tbaa !10183
  %arrayidx24 = getelementptr %struct._object*, %struct._object** %38, i64 %35, !dbg !13109
  store %struct._object* %34, %struct._object** %arrayidx24, align 8, !dbg !13110, !tbaa !2119
  br label %if.end.47, !dbg !13111

if.else.25:                                       ; preds = %if.end.21
  %39 = load %struct._object*, %struct._object** %list, align 8, !dbg !13112, !tbaa !2119
  %40 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13114, !tbaa !2119
  %call26 = call i32 @PyList_Append(%struct._object* %39, %struct._object* %40), !dbg !13115
  %tobool = icmp ne i32 %call26, 0, !dbg !13115
  br i1 %tobool, label %if.then.27, label %if.else.33, !dbg !13116

if.then.27:                                       ; preds = %if.else.25
  br label %do.body, !dbg !13117

do.body:                                          ; preds = %if.then.27
  %41 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !13119
  call void @llvm.lifetime.start(i64 8, i8* %41) #3, !dbg !13119
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1670, metadata !2123), !dbg !13121
  %42 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13122, !tbaa !2119
  store %struct._object* %42, %struct._object** %_py_decref_tmp, align 8, !dbg !13121, !tbaa !2119
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13123, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0, !dbg !13125
  %44 = load i64, i64* %ob_refcnt, align 8, !dbg !13126, !tbaa !2195
  %dec28 = add i64 %44, -1, !dbg !13126
  store i64 %dec28, i64* %ob_refcnt, align 8, !dbg !13126, !tbaa !2195
  %cmp29 = icmp ne i64 %dec28, 0, !dbg !13127
  br i1 %cmp29, label %if.then.30, label %if.else.31, !dbg !13128

if.then.30:                                       ; preds = %do.body
  br label %if.end.32, !dbg !13129

if.else.31:                                       ; preds = %do.body
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13131, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1, !dbg !13133
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !13133, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4, !dbg !13134
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !13134, !tbaa !2205
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13135, !tbaa !2119
  call void %47(%struct._object* %48), !dbg !13136
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.31, %if.then.30
  %49 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !13137
  call void @llvm.lifetime.end(i64 8, i8* %49) #3, !dbg !13137
  br label %do.cond, !dbg !13139

do.cond:                                          ; preds = %if.end.32
  br label %do.end, !dbg !13140

do.end:                                           ; preds = %do.cond
  br label %onError, !dbg !13142

if.else.33:                                       ; preds = %if.else.25
  br label %do.body.34, !dbg !13144

do.body.34:                                       ; preds = %if.else.33
  %50 = bitcast %struct._object** %_py_decref_tmp35 to i8*, !dbg !13146
  call void @llvm.lifetime.start(i64 8, i8* %50) #3, !dbg !13146
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp35, metadata !1678, metadata !2123), !dbg !13148
  %51 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13149, !tbaa !2119
  store %struct._object* %51, %struct._object** %_py_decref_tmp35, align 8, !dbg !13148, !tbaa !2119
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !13150, !tbaa !2119
  %ob_refcnt36 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 0, !dbg !13152
  %53 = load i64, i64* %ob_refcnt36, align 8, !dbg !13153, !tbaa !2195
  %dec37 = add i64 %53, -1, !dbg !13153
  store i64 %dec37, i64* %ob_refcnt36, align 8, !dbg !13153, !tbaa !2195
  %cmp38 = icmp ne i64 %dec37, 0, !dbg !13154
  br i1 %cmp38, label %if.then.39, label %if.else.40, !dbg !13155

if.then.39:                                       ; preds = %do.body.34
  br label %if.end.43, !dbg !13156

if.else.40:                                       ; preds = %do.body.34
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !13158, !tbaa !2119
  %ob_type41 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 1, !dbg !13160
  %55 = load %struct._typeobject*, %struct._typeobject** %ob_type41, align 8, !dbg !13160, !tbaa !2203
  %tp_dealloc42 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 4, !dbg !13161
  %56 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc42, align 8, !dbg !13161, !tbaa !2205
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !13162, !tbaa !2119
  call void %56(%struct._object* %57), !dbg !13163
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.40, %if.then.39
  %58 = bitcast %struct._object** %_py_decref_tmp35 to i8*, !dbg !13164
  call void @llvm.lifetime.end(i64 8, i8* %58) #3, !dbg !13164
  br label %do.cond.44, !dbg !13166

do.cond.44:                                       ; preds = %if.end.43
  br label %do.end.45, !dbg !13167

do.end.45:                                        ; preds = %do.cond.44
  br label %if.end.46

if.end.46:                                        ; preds = %do.end.45
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.then.23
  %59 = load i64, i64* %count, align 8, !dbg !13169, !tbaa !2129
  %inc = add i64 %59, 1, !dbg !13169
  store i64 %inc, i64* %count, align 8, !dbg !13169, !tbaa !2129
  %60 = load i64, i64* %j, align 8, !dbg !13171, !tbaa !2129
  %61 = load i64, i64* %sep_len.addr, align 8, !dbg !13172, !tbaa !2129
  %add48 = add i64 %60, %61, !dbg !13173
  store i64 %add48, i64* %i, align 8, !dbg !13174, !tbaa !2129
  br label %while.cond, !dbg !13061

while.end:                                        ; preds = %if.then.13, %while.cond
  %62 = load i8*, i8** %str.addr, align 8, !dbg !13175, !tbaa !2119
  %63 = load i64, i64* %i, align 8, !dbg !13176, !tbaa !2129
  %add.ptr49 = getelementptr i8, i8* %62, i64 %63, !dbg !13177
  %64 = load i64, i64* %str_len.addr, align 8, !dbg !13178, !tbaa !2129
  %65 = load i64, i64* %i, align 8, !dbg !13179, !tbaa !2129
  %sub50 = sub i64 %64, %65, !dbg !13180
  %call51 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr49, i64 %sub50), !dbg !13181
  store %struct._object* %call51, %struct._object** %sub, align 8, !dbg !13182, !tbaa !2119
  %66 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13183, !tbaa !2119
  %cmp52 = icmp eq %struct._object* %66, null, !dbg !13185
  br i1 %cmp52, label %if.then.53, label %if.end.54, !dbg !13186

if.then.53:                                       ; preds = %while.end
  br label %onError, !dbg !13187

if.end.54:                                        ; preds = %while.end
  %67 = load i64, i64* %count, align 8, !dbg !13189, !tbaa !2129
  %cmp55 = icmp slt i64 %67, 12, !dbg !13191
  br i1 %cmp55, label %if.then.56, label %if.else.59, !dbg !13192

if.then.56:                                       ; preds = %if.end.54
  %68 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13193, !tbaa !2119
  %69 = load i64, i64* %count, align 8, !dbg !13196, !tbaa !2129
  %70 = load %struct._object*, %struct._object** %list, align 8, !dbg !13197, !tbaa !2119
  %71 = bitcast %struct._object* %70 to %struct.PyListObject*, !dbg !13198
  %ob_item57 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %71, i32 0, i32 1, !dbg !13199
  %72 = load %struct._object**, %struct._object*** %ob_item57, align 8, !dbg !13199, !tbaa !10183
  %arrayidx58 = getelementptr %struct._object*, %struct._object** %72, i64 %69, !dbg !13200
  store %struct._object* %68, %struct._object** %arrayidx58, align 8, !dbg !13201, !tbaa !2119
  br label %if.end.89, !dbg !13202

if.else.59:                                       ; preds = %if.end.54
  %73 = load %struct._object*, %struct._object** %list, align 8, !dbg !13203, !tbaa !2119
  %74 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13205, !tbaa !2119
  %call60 = call i32 @PyList_Append(%struct._object* %73, %struct._object* %74), !dbg !13206
  %tobool61 = icmp ne i32 %call60, 0, !dbg !13206
  br i1 %tobool61, label %if.then.62, label %if.else.75, !dbg !13207

if.then.62:                                       ; preds = %if.else.59
  br label %do.body.63, !dbg !13208

do.body.63:                                       ; preds = %if.then.62
  %75 = bitcast %struct._object** %_py_decref_tmp64 to i8*, !dbg !13210
  call void @llvm.lifetime.start(i64 8, i8* %75) #3, !dbg !13210
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp64, metadata !1680, metadata !2123), !dbg !13212
  %76 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13213, !tbaa !2119
  store %struct._object* %76, %struct._object** %_py_decref_tmp64, align 8, !dbg !13212, !tbaa !2119
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp64, align 8, !dbg !13214, !tbaa !2119
  %ob_refcnt65 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 0, !dbg !13216
  %78 = load i64, i64* %ob_refcnt65, align 8, !dbg !13217, !tbaa !2195
  %dec66 = add i64 %78, -1, !dbg !13217
  store i64 %dec66, i64* %ob_refcnt65, align 8, !dbg !13217, !tbaa !2195
  %cmp67 = icmp ne i64 %dec66, 0, !dbg !13218
  br i1 %cmp67, label %if.then.68, label %if.else.69, !dbg !13219

if.then.68:                                       ; preds = %do.body.63
  br label %if.end.72, !dbg !13220

if.else.69:                                       ; preds = %do.body.63
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp64, align 8, !dbg !13222, !tbaa !2119
  %ob_type70 = getelementptr inbounds %struct._object, %struct._object* %79, i32 0, i32 1, !dbg !13224
  %80 = load %struct._typeobject*, %struct._typeobject** %ob_type70, align 8, !dbg !13224, !tbaa !2203
  %tp_dealloc71 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %80, i32 0, i32 4, !dbg !13225
  %81 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc71, align 8, !dbg !13225, !tbaa !2205
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp64, align 8, !dbg !13226, !tbaa !2119
  call void %81(%struct._object* %82), !dbg !13227
  br label %if.end.72

if.end.72:                                        ; preds = %if.else.69, %if.then.68
  %83 = bitcast %struct._object** %_py_decref_tmp64 to i8*, !dbg !13228
  call void @llvm.lifetime.end(i64 8, i8* %83) #3, !dbg !13228
  br label %do.cond.73, !dbg !13230

do.cond.73:                                       ; preds = %if.end.72
  br label %do.end.74, !dbg !13231

do.end.74:                                        ; preds = %do.cond.73
  br label %onError, !dbg !13233

if.else.75:                                       ; preds = %if.else.59
  br label %do.body.76, !dbg !13235

do.body.76:                                       ; preds = %if.else.75
  %84 = bitcast %struct._object** %_py_decref_tmp77 to i8*, !dbg !13237
  call void @llvm.lifetime.start(i64 8, i8* %84) #3, !dbg !13237
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp77, metadata !1688, metadata !2123), !dbg !13239
  %85 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13240, !tbaa !2119
  store %struct._object* %85, %struct._object** %_py_decref_tmp77, align 8, !dbg !13239, !tbaa !2119
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8, !dbg !13241, !tbaa !2119
  %ob_refcnt78 = getelementptr inbounds %struct._object, %struct._object* %86, i32 0, i32 0, !dbg !13243
  %87 = load i64, i64* %ob_refcnt78, align 8, !dbg !13244, !tbaa !2195
  %dec79 = add i64 %87, -1, !dbg !13244
  store i64 %dec79, i64* %ob_refcnt78, align 8, !dbg !13244, !tbaa !2195
  %cmp80 = icmp ne i64 %dec79, 0, !dbg !13245
  br i1 %cmp80, label %if.then.81, label %if.else.82, !dbg !13246

if.then.81:                                       ; preds = %do.body.76
  br label %if.end.85, !dbg !13247

if.else.82:                                       ; preds = %do.body.76
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8, !dbg !13249, !tbaa !2119
  %ob_type83 = getelementptr inbounds %struct._object, %struct._object* %88, i32 0, i32 1, !dbg !13251
  %89 = load %struct._typeobject*, %struct._typeobject** %ob_type83, align 8, !dbg !13251, !tbaa !2203
  %tp_dealloc84 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %89, i32 0, i32 4, !dbg !13252
  %90 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc84, align 8, !dbg !13252, !tbaa !2205
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8, !dbg !13253, !tbaa !2119
  call void %90(%struct._object* %91), !dbg !13254
  br label %if.end.85

if.end.85:                                        ; preds = %if.else.82, %if.then.81
  %92 = bitcast %struct._object** %_py_decref_tmp77 to i8*, !dbg !13255
  call void @llvm.lifetime.end(i64 8, i8* %92) #3, !dbg !13255
  br label %do.cond.86, !dbg !13257

do.cond.86:                                       ; preds = %if.end.85
  br label %do.end.87, !dbg !13258

do.end.87:                                        ; preds = %do.cond.86
  br label %if.end.88

if.end.88:                                        ; preds = %do.end.87
  br label %if.end.89

if.end.89:                                        ; preds = %if.end.88, %if.then.56
  %93 = load i64, i64* %count, align 8, !dbg !13260, !tbaa !2129
  %inc90 = add i64 %93, 1, !dbg !13260
  store i64 %inc90, i64* %count, align 8, !dbg !13260, !tbaa !2129
  %94 = load i64, i64* %count, align 8, !dbg !13262, !tbaa !2129
  %95 = load %struct._object*, %struct._object** %list, align 8, !dbg !13263, !tbaa !2119
  %96 = bitcast %struct._object* %95 to %struct.PyVarObject*, !dbg !13264
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %96, i32 0, i32 1, !dbg !13265
  store i64 %94, i64* %ob_size, align 8, !dbg !13266, !tbaa !2239
  %97 = load %struct._object*, %struct._object** %list, align 8, !dbg !13267, !tbaa !2119
  store %struct._object* %97, %struct._object** %retval, !dbg !13268
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13268

onError:                                          ; preds = %do.end.74, %if.then.53, %do.end, %if.then.20
  br label %do.body.91, !dbg !13269

do.body.91:                                       ; preds = %onError
  %98 = bitcast %struct._object** %_py_decref_tmp92 to i8*, !dbg !13270
  call void @llvm.lifetime.start(i64 8, i8* %98) #3, !dbg !13270
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp92, metadata !1690, metadata !2123), !dbg !13272
  %99 = load %struct._object*, %struct._object** %list, align 8, !dbg !13273, !tbaa !2119
  store %struct._object* %99, %struct._object** %_py_decref_tmp92, align 8, !dbg !13272, !tbaa !2119
  %100 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8, !dbg !13274, !tbaa !2119
  %ob_refcnt93 = getelementptr inbounds %struct._object, %struct._object* %100, i32 0, i32 0, !dbg !13276
  %101 = load i64, i64* %ob_refcnt93, align 8, !dbg !13277, !tbaa !2195
  %dec94 = add i64 %101, -1, !dbg !13277
  store i64 %dec94, i64* %ob_refcnt93, align 8, !dbg !13277, !tbaa !2195
  %cmp95 = icmp ne i64 %dec94, 0, !dbg !13278
  br i1 %cmp95, label %if.then.96, label %if.else.97, !dbg !13279

if.then.96:                                       ; preds = %do.body.91
  br label %if.end.100, !dbg !13280

if.else.97:                                       ; preds = %do.body.91
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8, !dbg !13282, !tbaa !2119
  %ob_type98 = getelementptr inbounds %struct._object, %struct._object* %102, i32 0, i32 1, !dbg !13284
  %103 = load %struct._typeobject*, %struct._typeobject** %ob_type98, align 8, !dbg !13284, !tbaa !2203
  %tp_dealloc99 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %103, i32 0, i32 4, !dbg !13285
  %104 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc99, align 8, !dbg !13285, !tbaa !2205
  %105 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8, !dbg !13286, !tbaa !2119
  call void %104(%struct._object* %105), !dbg !13287
  br label %if.end.100

if.end.100:                                       ; preds = %if.else.97, %if.then.96
  %106 = bitcast %struct._object** %_py_decref_tmp92 to i8*, !dbg !13288
  call void @llvm.lifetime.end(i64 8, i8* %106) #3, !dbg !13288
  br label %do.cond.101, !dbg !13290

do.cond.101:                                      ; preds = %if.end.100
  br label %do.end.102, !dbg !13291

do.end.102:                                       ; preds = %do.cond.101
  store %struct._object* null, %struct._object** %retval, !dbg !13293
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13293

cleanup:                                          ; preds = %do.end.102, %if.end.89, %if.then.7, %if.then.2, %if.then
  %107 = bitcast %struct._object** %sub to i8*, !dbg !13294
  call void @llvm.lifetime.end(i64 8, i8* %107) #3, !dbg !13294
  %108 = bitcast %struct._object** %list to i8*, !dbg !13294
  call void @llvm.lifetime.end(i64 8, i8* %108) #3, !dbg !13294
  %109 = bitcast i64* %count to i8*, !dbg !13294
  call void @llvm.lifetime.end(i64 8, i8* %109) #3, !dbg !13294
  %110 = bitcast i64* %pos to i8*, !dbg !13294
  call void @llvm.lifetime.end(i64 8, i8* %110) #3, !dbg !13294
  %111 = bitcast i64* %j to i8*, !dbg !13294
  call void @llvm.lifetime.end(i64 8, i8* %111) #3, !dbg !13294
  %112 = bitcast i64* %i to i8*, !dbg !13294
  call void @llvm.lifetime.end(i64 8, i8* %112) #3, !dbg !13294
  %113 = load %struct._object*, %struct._object** %retval, !dbg !13294
  ret %struct._object* %113, !dbg !13294
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct._object* @stringlib_split_char(%struct._object* %str_obj, i8* %str, i64 %str_len, i8 signext %ch, i64 %maxcount) #4 {
entry:
  %retval = alloca %struct._object*, align 8
  %str_obj.addr = alloca %struct._object*, align 8
  %str.addr = alloca i8*, align 8
  %str_len.addr = alloca i64, align 8
  %ch.addr = alloca i8, align 1
  %maxcount.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %count = alloca i64, align 8
  %list = alloca %struct._object*, align 8
  %sub = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp29 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  %_py_decref_tmp80 = alloca %struct._object*, align 8
  %_py_decref_tmp97 = alloca %struct._object*, align 8
  store %struct._object* %str_obj, %struct._object** %str_obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %str_obj.addr, metadata !1694, metadata !2123), !dbg !13295
  store i8* %str, i8** %str.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !1695, metadata !2123), !dbg !13296
  store i64 %str_len, i64* %str_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %str_len.addr, metadata !1696, metadata !2123), !dbg !13297
  store i8 %ch, i8* %ch.addr, align 1, !tbaa !2233
  call void @llvm.dbg.declare(metadata i8* %ch.addr, metadata !1697, metadata !2123), !dbg !13298
  store i64 %maxcount, i64* %maxcount.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %maxcount.addr, metadata !1698, metadata !2123), !dbg !13299
  %0 = bitcast i64* %i to i8*, !dbg !13300
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !13300
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1699, metadata !2123), !dbg !13301
  %1 = bitcast i64* %j to i8*, !dbg !13300
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !13300
  call void @llvm.dbg.declare(metadata i64* %j, metadata !1700, metadata !2123), !dbg !13302
  %2 = bitcast i64* %count to i8*, !dbg !13300
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !13300
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1701, metadata !2123), !dbg !13303
  store i64 0, i64* %count, align 8, !dbg !13303, !tbaa !2129
  %3 = bitcast %struct._object** %list to i8*, !dbg !13304
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !13304
  call void @llvm.dbg.declare(metadata %struct._object** %list, metadata !1702, metadata !2123), !dbg !13305
  %4 = load i64, i64* %maxcount.addr, align 8, !dbg !13306, !tbaa !2129
  %cmp = icmp sge i64 %4, 12, !dbg !13307
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !13306

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !13308

cond.false:                                       ; preds = %entry
  %5 = load i64, i64* %maxcount.addr, align 8, !dbg !13310, !tbaa !2129
  %add = add i64 %5, 1, !dbg !13312
  br label %cond.end, !dbg !13306

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 12, %cond.true ], [ %add, %cond.false ], !dbg !13306
  %call = call %struct._object* @PyList_New(i64 %cond), !dbg !13313
  store %struct._object* %call, %struct._object** %list, align 8, !dbg !13305, !tbaa !2119
  %6 = bitcast %struct._object** %sub to i8*, !dbg !13316
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !13316
  call void @llvm.dbg.declare(metadata %struct._object** %sub, metadata !1703, metadata !2123), !dbg !13317
  %7 = load %struct._object*, %struct._object** %list, align 8, !dbg !13318, !tbaa !2119
  %cmp1 = icmp eq %struct._object* %7, null, !dbg !13320
  br i1 %cmp1, label %if.then, label %if.end, !dbg !13321

if.then:                                          ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval, !dbg !13322
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13322

if.end:                                           ; preds = %cond.end
  store i64 0, i64* %j, align 8, !dbg !13323, !tbaa !2129
  store i64 0, i64* %i, align 8, !dbg !13324, !tbaa !2129
  br label %while.cond, !dbg !13325

while.cond:                                       ; preds = %for.end, %if.end
  %8 = load i64, i64* %j, align 8, !dbg !13326, !tbaa !2129
  %9 = load i64, i64* %str_len.addr, align 8, !dbg !13328, !tbaa !2129
  %cmp2 = icmp slt i64 %8, %9, !dbg !13329
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !13330

land.rhs:                                         ; preds = %while.cond
  %10 = load i64, i64* %maxcount.addr, align 8, !dbg !13331, !tbaa !2129
  %dec = add i64 %10, -1, !dbg !13331
  store i64 %dec, i64* %maxcount.addr, align 8, !dbg !13331, !tbaa !2129
  %cmp3 = icmp sgt i64 %10, 0, !dbg !13332
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %11 = phi i1 [ false, %while.cond ], [ %cmp3, %land.rhs ]
  br i1 %11, label %while.body, label %while.end, !dbg !13333

while.body:                                       ; preds = %land.end
  br label %for.cond, !dbg !13334

for.cond:                                         ; preds = %for.inc, %while.body
  %12 = load i64, i64* %j, align 8, !dbg !13335, !tbaa !2129
  %13 = load i64, i64* %str_len.addr, align 8, !dbg !13338, !tbaa !2129
  %cmp4 = icmp slt i64 %12, %13, !dbg !13339
  br i1 %cmp4, label %for.body, label %for.end, !dbg !13340

for.body:                                         ; preds = %for.cond
  %14 = load i64, i64* %j, align 8, !dbg !13341, !tbaa !2129
  %15 = load i8*, i8** %str.addr, align 8, !dbg !13342, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %15, i64 %14, !dbg !13342
  %16 = load i8, i8* %arrayidx, align 1, !dbg !13342, !tbaa !2233
  %conv = sext i8 %16 to i32, !dbg !13342
  %17 = load i8, i8* %ch.addr, align 1, !dbg !13343, !tbaa !2233
  %conv5 = sext i8 %17 to i32, !dbg !13343
  %cmp6 = icmp eq i32 %conv, %conv5, !dbg !13344
  br i1 %cmp6, label %if.then.8, label %if.end.44, !dbg !13345

if.then.8:                                        ; preds = %for.body
  %18 = load i8*, i8** %str.addr, align 8, !dbg !13346, !tbaa !2119
  %19 = load i64, i64* %i, align 8, !dbg !13347, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %18, i64 %19, !dbg !13348
  %20 = load i64, i64* %j, align 8, !dbg !13349, !tbaa !2129
  %21 = load i64, i64* %i, align 8, !dbg !13350, !tbaa !2129
  %sub9 = sub i64 %20, %21, !dbg !13351
  %call10 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr, i64 %sub9), !dbg !13352
  store %struct._object* %call10, %struct._object** %sub, align 8, !dbg !13353, !tbaa !2119
  %22 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13354, !tbaa !2119
  %cmp11 = icmp eq %struct._object* %22, null, !dbg !13356
  br i1 %cmp11, label %if.then.13, label %if.end.14, !dbg !13357

if.then.13:                                       ; preds = %if.then.8
  br label %onError, !dbg !13358

if.end.14:                                        ; preds = %if.then.8
  %23 = load i64, i64* %count, align 8, !dbg !13360, !tbaa !2129
  %cmp15 = icmp slt i64 %23, 12, !dbg !13362
  br i1 %cmp15, label %if.then.17, label %if.else, !dbg !13363

if.then.17:                                       ; preds = %if.end.14
  %24 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13364, !tbaa !2119
  %25 = load i64, i64* %count, align 8, !dbg !13367, !tbaa !2129
  %26 = load %struct._object*, %struct._object** %list, align 8, !dbg !13368, !tbaa !2119
  %27 = bitcast %struct._object* %26 to %struct.PyListObject*, !dbg !13369
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %27, i32 0, i32 1, !dbg !13370
  %28 = load %struct._object**, %struct._object*** %ob_item, align 8, !dbg !13370, !tbaa !10183
  %arrayidx18 = getelementptr %struct._object*, %struct._object** %28, i64 %25, !dbg !13371
  store %struct._object* %24, %struct._object** %arrayidx18, align 8, !dbg !13372, !tbaa !2119
  br label %if.end.42, !dbg !13373

if.else:                                          ; preds = %if.end.14
  %29 = load %struct._object*, %struct._object** %list, align 8, !dbg !13374, !tbaa !2119
  %30 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13376, !tbaa !2119
  %call19 = call i32 @PyList_Append(%struct._object* %29, %struct._object* %30), !dbg !13377
  %tobool = icmp ne i32 %call19, 0, !dbg !13377
  br i1 %tobool, label %if.then.20, label %if.else.27, !dbg !13378

if.then.20:                                       ; preds = %if.else
  br label %do.body, !dbg !13379

do.body:                                          ; preds = %if.then.20
  %31 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !13381
  call void @llvm.lifetime.start(i64 8, i8* %31) #3, !dbg !13381
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1704, metadata !2123), !dbg !13383
  %32 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13384, !tbaa !2119
  store %struct._object* %32, %struct._object** %_py_decref_tmp, align 8, !dbg !13383, !tbaa !2119
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13385, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0, !dbg !13387
  %34 = load i64, i64* %ob_refcnt, align 8, !dbg !13388, !tbaa !2195
  %dec21 = add i64 %34, -1, !dbg !13388
  store i64 %dec21, i64* %ob_refcnt, align 8, !dbg !13388, !tbaa !2195
  %cmp22 = icmp ne i64 %dec21, 0, !dbg !13389
  br i1 %cmp22, label %if.then.24, label %if.else.25, !dbg !13390

if.then.24:                                       ; preds = %do.body
  br label %if.end.26, !dbg !13391

if.else.25:                                       ; preds = %do.body
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13393, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1, !dbg !13395
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !13395, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4, !dbg !13396
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !13396, !tbaa !2205
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13397, !tbaa !2119
  call void %37(%struct._object* %38), !dbg !13398
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.25, %if.then.24
  %39 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !13399
  call void @llvm.lifetime.end(i64 8, i8* %39) #3, !dbg !13399
  br label %do.cond, !dbg !13401

do.cond:                                          ; preds = %if.end.26
  br label %do.end, !dbg !13402

do.end:                                           ; preds = %do.cond
  br label %onError, !dbg !13404

if.else.27:                                       ; preds = %if.else
  br label %do.body.28, !dbg !13406

do.body.28:                                       ; preds = %if.else.27
  %40 = bitcast %struct._object** %_py_decref_tmp29 to i8*, !dbg !13408
  call void @llvm.lifetime.start(i64 8, i8* %40) #3, !dbg !13408
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp29, metadata !1717, metadata !2123), !dbg !13410
  %41 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13411, !tbaa !2119
  store %struct._object* %41, %struct._object** %_py_decref_tmp29, align 8, !dbg !13410, !tbaa !2119
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8, !dbg !13412, !tbaa !2119
  %ob_refcnt30 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0, !dbg !13414
  %43 = load i64, i64* %ob_refcnt30, align 8, !dbg !13415, !tbaa !2195
  %dec31 = add i64 %43, -1, !dbg !13415
  store i64 %dec31, i64* %ob_refcnt30, align 8, !dbg !13415, !tbaa !2195
  %cmp32 = icmp ne i64 %dec31, 0, !dbg !13416
  br i1 %cmp32, label %if.then.34, label %if.else.35, !dbg !13417

if.then.34:                                       ; preds = %do.body.28
  br label %if.end.38, !dbg !13418

if.else.35:                                       ; preds = %do.body.28
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8, !dbg !13420, !tbaa !2119
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1, !dbg !13422
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8, !dbg !13422, !tbaa !2203
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4, !dbg !13423
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8, !dbg !13423, !tbaa !2205
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8, !dbg !13424, !tbaa !2119
  call void %46(%struct._object* %47), !dbg !13425
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  %48 = bitcast %struct._object** %_py_decref_tmp29 to i8*, !dbg !13426
  call void @llvm.lifetime.end(i64 8, i8* %48) #3, !dbg !13426
  br label %do.cond.39, !dbg !13428

do.cond.39:                                       ; preds = %if.end.38
  br label %do.end.40, !dbg !13429

do.end.40:                                        ; preds = %do.cond.39
  br label %if.end.41

if.end.41:                                        ; preds = %do.end.40
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %if.then.17
  %49 = load i64, i64* %count, align 8, !dbg !13431, !tbaa !2129
  %inc = add i64 %49, 1, !dbg !13431
  store i64 %inc, i64* %count, align 8, !dbg !13431, !tbaa !2129
  %50 = load i64, i64* %j, align 8, !dbg !13433, !tbaa !2129
  %add43 = add i64 %50, 1, !dbg !13434
  store i64 %add43, i64* %j, align 8, !dbg !13435, !tbaa !2129
  store i64 %add43, i64* %i, align 8, !dbg !13436, !tbaa !2129
  br label %for.end, !dbg !13437

if.end.44:                                        ; preds = %for.body
  br label %for.inc, !dbg !13438

for.inc:                                          ; preds = %if.end.44
  %51 = load i64, i64* %j, align 8, !dbg !13439, !tbaa !2129
  %inc45 = add i64 %51, 1, !dbg !13439
  store i64 %inc45, i64* %j, align 8, !dbg !13439, !tbaa !2129
  br label %for.cond, !dbg !13440

for.end:                                          ; preds = %if.end.42, %for.cond
  br label %while.cond, !dbg !13325

while.end:                                        ; preds = %land.end
  %52 = load i64, i64* %i, align 8, !dbg !13441, !tbaa !2129
  %53 = load i64, i64* %str_len.addr, align 8, !dbg !13442, !tbaa !2129
  %cmp46 = icmp sle i64 %52, %53, !dbg !13443
  br i1 %cmp46, label %if.then.48, label %if.end.95, !dbg !13444

if.then.48:                                       ; preds = %while.end
  %54 = load i8*, i8** %str.addr, align 8, !dbg !13445, !tbaa !2119
  %55 = load i64, i64* %i, align 8, !dbg !13446, !tbaa !2129
  %add.ptr49 = getelementptr i8, i8* %54, i64 %55, !dbg !13447
  %56 = load i64, i64* %str_len.addr, align 8, !dbg !13448, !tbaa !2129
  %57 = load i64, i64* %i, align 8, !dbg !13449, !tbaa !2129
  %sub50 = sub i64 %56, %57, !dbg !13450
  %call51 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr49, i64 %sub50), !dbg !13451
  store %struct._object* %call51, %struct._object** %sub, align 8, !dbg !13452, !tbaa !2119
  %58 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13453, !tbaa !2119
  %cmp52 = icmp eq %struct._object* %58, null, !dbg !13455
  br i1 %cmp52, label %if.then.54, label %if.end.55, !dbg !13456

if.then.54:                                       ; preds = %if.then.48
  br label %onError, !dbg !13457

if.end.55:                                        ; preds = %if.then.48
  %59 = load i64, i64* %count, align 8, !dbg !13459, !tbaa !2129
  %cmp56 = icmp slt i64 %59, 12, !dbg !13461
  br i1 %cmp56, label %if.then.58, label %if.else.61, !dbg !13462

if.then.58:                                       ; preds = %if.end.55
  %60 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13463, !tbaa !2119
  %61 = load i64, i64* %count, align 8, !dbg !13466, !tbaa !2129
  %62 = load %struct._object*, %struct._object** %list, align 8, !dbg !13467, !tbaa !2119
  %63 = bitcast %struct._object* %62 to %struct.PyListObject*, !dbg !13468
  %ob_item59 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %63, i32 0, i32 1, !dbg !13469
  %64 = load %struct._object**, %struct._object*** %ob_item59, align 8, !dbg !13469, !tbaa !10183
  %arrayidx60 = getelementptr %struct._object*, %struct._object** %64, i64 %61, !dbg !13470
  store %struct._object* %60, %struct._object** %arrayidx60, align 8, !dbg !13471, !tbaa !2119
  br label %if.end.93, !dbg !13472

if.else.61:                                       ; preds = %if.end.55
  %65 = load %struct._object*, %struct._object** %list, align 8, !dbg !13473, !tbaa !2119
  %66 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13475, !tbaa !2119
  %call62 = call i32 @PyList_Append(%struct._object* %65, %struct._object* %66), !dbg !13476
  %tobool63 = icmp ne i32 %call62, 0, !dbg !13476
  br i1 %tobool63, label %if.then.64, label %if.else.78, !dbg !13477

if.then.64:                                       ; preds = %if.else.61
  br label %do.body.65, !dbg !13478

do.body.65:                                       ; preds = %if.then.64
  %67 = bitcast %struct._object** %_py_decref_tmp66 to i8*, !dbg !13480
  call void @llvm.lifetime.start(i64 8, i8* %67) #3, !dbg !13480
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp66, metadata !1719, metadata !2123), !dbg !13482
  %68 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13483, !tbaa !2119
  store %struct._object* %68, %struct._object** %_py_decref_tmp66, align 8, !dbg !13482, !tbaa !2119
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8, !dbg !13484, !tbaa !2119
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 0, !dbg !13486
  %70 = load i64, i64* %ob_refcnt67, align 8, !dbg !13487, !tbaa !2195
  %dec68 = add i64 %70, -1, !dbg !13487
  store i64 %dec68, i64* %ob_refcnt67, align 8, !dbg !13487, !tbaa !2195
  %cmp69 = icmp ne i64 %dec68, 0, !dbg !13488
  br i1 %cmp69, label %if.then.71, label %if.else.72, !dbg !13489

if.then.71:                                       ; preds = %do.body.65
  br label %if.end.75, !dbg !13490

if.else.72:                                       ; preds = %do.body.65
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8, !dbg !13492, !tbaa !2119
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 1, !dbg !13494
  %72 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8, !dbg !13494, !tbaa !2203
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 4, !dbg !13495
  %73 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8, !dbg !13495, !tbaa !2205
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8, !dbg !13496, !tbaa !2119
  call void %73(%struct._object* %74), !dbg !13497
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  %75 = bitcast %struct._object** %_py_decref_tmp66 to i8*, !dbg !13498
  call void @llvm.lifetime.end(i64 8, i8* %75) #3, !dbg !13498
  br label %do.cond.76, !dbg !13500

do.cond.76:                                       ; preds = %if.end.75
  br label %do.end.77, !dbg !13501

do.end.77:                                        ; preds = %do.cond.76
  br label %onError, !dbg !13503

if.else.78:                                       ; preds = %if.else.61
  br label %do.body.79, !dbg !13505

do.body.79:                                       ; preds = %if.else.78
  %76 = bitcast %struct._object** %_py_decref_tmp80 to i8*, !dbg !13507
  call void @llvm.lifetime.start(i64 8, i8* %76) #3, !dbg !13507
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp80, metadata !1728, metadata !2123), !dbg !13509
  %77 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13510, !tbaa !2119
  store %struct._object* %77, %struct._object** %_py_decref_tmp80, align 8, !dbg !13509, !tbaa !2119
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp80, align 8, !dbg !13511, !tbaa !2119
  %ob_refcnt81 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 0, !dbg !13513
  %79 = load i64, i64* %ob_refcnt81, align 8, !dbg !13514, !tbaa !2195
  %dec82 = add i64 %79, -1, !dbg !13514
  store i64 %dec82, i64* %ob_refcnt81, align 8, !dbg !13514, !tbaa !2195
  %cmp83 = icmp ne i64 %dec82, 0, !dbg !13515
  br i1 %cmp83, label %if.then.85, label %if.else.86, !dbg !13516

if.then.85:                                       ; preds = %do.body.79
  br label %if.end.89, !dbg !13517

if.else.86:                                       ; preds = %do.body.79
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp80, align 8, !dbg !13519, !tbaa !2119
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 1, !dbg !13521
  %81 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8, !dbg !13521, !tbaa !2203
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %81, i32 0, i32 4, !dbg !13522
  %82 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8, !dbg !13522, !tbaa !2205
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp80, align 8, !dbg !13523, !tbaa !2119
  call void %82(%struct._object* %83), !dbg !13524
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  %84 = bitcast %struct._object** %_py_decref_tmp80 to i8*, !dbg !13525
  call void @llvm.lifetime.end(i64 8, i8* %84) #3, !dbg !13525
  br label %do.cond.90, !dbg !13527

do.cond.90:                                       ; preds = %if.end.89
  br label %do.end.91, !dbg !13528

do.end.91:                                        ; preds = %do.cond.90
  br label %if.end.92

if.end.92:                                        ; preds = %do.end.91
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.92, %if.then.58
  %85 = load i64, i64* %count, align 8, !dbg !13530, !tbaa !2129
  %inc94 = add i64 %85, 1, !dbg !13530
  store i64 %inc94, i64* %count, align 8, !dbg !13530, !tbaa !2129
  br label %if.end.95, !dbg !13532

if.end.95:                                        ; preds = %if.end.93, %while.end
  %86 = load i64, i64* %count, align 8, !dbg !13533, !tbaa !2129
  %87 = load %struct._object*, %struct._object** %list, align 8, !dbg !13534, !tbaa !2119
  %88 = bitcast %struct._object* %87 to %struct.PyVarObject*, !dbg !13535
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %88, i32 0, i32 1, !dbg !13536
  store i64 %86, i64* %ob_size, align 8, !dbg !13537, !tbaa !2239
  %89 = load %struct._object*, %struct._object** %list, align 8, !dbg !13538, !tbaa !2119
  store %struct._object* %89, %struct._object** %retval, !dbg !13539
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13539

onError:                                          ; preds = %do.end.77, %if.then.54, %do.end, %if.then.13
  br label %do.body.96, !dbg !13540

do.body.96:                                       ; preds = %onError
  %90 = bitcast %struct._object** %_py_decref_tmp97 to i8*, !dbg !13541
  call void @llvm.lifetime.start(i64 8, i8* %90) #3, !dbg !13541
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp97, metadata !1730, metadata !2123), !dbg !13543
  %91 = load %struct._object*, %struct._object** %list, align 8, !dbg !13544, !tbaa !2119
  store %struct._object* %91, %struct._object** %_py_decref_tmp97, align 8, !dbg !13543, !tbaa !2119
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8, !dbg !13545, !tbaa !2119
  %ob_refcnt98 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 0, !dbg !13547
  %93 = load i64, i64* %ob_refcnt98, align 8, !dbg !13548, !tbaa !2195
  %dec99 = add i64 %93, -1, !dbg !13548
  store i64 %dec99, i64* %ob_refcnt98, align 8, !dbg !13548, !tbaa !2195
  %cmp100 = icmp ne i64 %dec99, 0, !dbg !13549
  br i1 %cmp100, label %if.then.102, label %if.else.103, !dbg !13550

if.then.102:                                      ; preds = %do.body.96
  br label %if.end.106, !dbg !13551

if.else.103:                                      ; preds = %do.body.96
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8, !dbg !13553, !tbaa !2119
  %ob_type104 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1, !dbg !13555
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type104, align 8, !dbg !13555, !tbaa !2203
  %tp_dealloc105 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 4, !dbg !13556
  %96 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc105, align 8, !dbg !13556, !tbaa !2205
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8, !dbg !13557, !tbaa !2119
  call void %96(%struct._object* %97), !dbg !13558
  br label %if.end.106

if.end.106:                                       ; preds = %if.else.103, %if.then.102
  %98 = bitcast %struct._object** %_py_decref_tmp97 to i8*, !dbg !13559
  call void @llvm.lifetime.end(i64 8, i8* %98) #3, !dbg !13559
  br label %do.cond.107, !dbg !13561

do.cond.107:                                      ; preds = %if.end.106
  br label %do.end.108, !dbg !13562

do.end.108:                                       ; preds = %do.cond.107
  store %struct._object* null, %struct._object** %retval, !dbg !13564
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13564

cleanup:                                          ; preds = %do.end.108, %if.end.95, %if.then
  %99 = bitcast %struct._object** %sub to i8*, !dbg !13565
  call void @llvm.lifetime.end(i64 8, i8* %99) #3, !dbg !13565
  %100 = bitcast %struct._object** %list to i8*, !dbg !13565
  call void @llvm.lifetime.end(i64 8, i8* %100) #3, !dbg !13565
  %101 = bitcast i64* %count to i8*, !dbg !13565
  call void @llvm.lifetime.end(i64 8, i8* %101) #3, !dbg !13565
  %102 = bitcast i64* %j to i8*, !dbg !13565
  call void @llvm.lifetime.end(i64 8, i8* %102) #3, !dbg !13565
  %103 = bitcast i64* %i to i8*, !dbg !13565
  call void @llvm.lifetime.end(i64 8, i8* %103) #3, !dbg !13565
  %104 = load %struct._object*, %struct._object** %retval, !dbg !13565
  ret %struct._object* %104, !dbg !13565
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct._object* @stringlib_splitlines(%struct._object* %str_obj, i8* %str, i64 %str_len, i32 %keepends) #4 {
entry:
  %retval = alloca %struct._object*, align 8
  %str_obj.addr = alloca %struct._object*, align 8
  %str.addr = alloca i8*, align 8
  %str_len.addr = alloca i64, align 8
  %keepends.addr = alloca i32, align 4
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %list = alloca %struct._object*, align 8
  %sub = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %eol = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp47 = alloca %struct._object*, align 8
  %_py_decref_tmp61 = alloca %struct._object*, align 8
  store %struct._object* %str_obj, %struct._object** %str_obj.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %str_obj.addr, metadata !1742, metadata !2123), !dbg !13566
  store i8* %str, i8** %str.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !1743, metadata !2123), !dbg !13567
  store i64 %str_len, i64* %str_len.addr, align 8, !tbaa !2129
  call void @llvm.dbg.declare(metadata i64* %str_len.addr, metadata !1744, metadata !2123), !dbg !13568
  store i32 %keepends, i32* %keepends.addr, align 4, !tbaa !2676
  call void @llvm.dbg.declare(metadata i32* %keepends.addr, metadata !1745, metadata !2123), !dbg !13569
  %0 = bitcast i64* %i to i8*, !dbg !13570
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !13570
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1746, metadata !2123), !dbg !13571
  %1 = bitcast i64* %j to i8*, !dbg !13572
  call void @llvm.lifetime.start(i64 8, i8* %1) #3, !dbg !13572
  call void @llvm.dbg.declare(metadata i64* %j, metadata !1747, metadata !2123), !dbg !13573
  %2 = bitcast %struct._object** %list to i8*, !dbg !13574
  call void @llvm.lifetime.start(i64 8, i8* %2) #3, !dbg !13574
  call void @llvm.dbg.declare(metadata %struct._object** %list, metadata !1748, metadata !2123), !dbg !13575
  %call = call %struct._object* @PyList_New(i64 0), !dbg !13576
  store %struct._object* %call, %struct._object** %list, align 8, !dbg !13575, !tbaa !2119
  %3 = bitcast %struct._object** %sub to i8*, !dbg !13577
  call void @llvm.lifetime.start(i64 8, i8* %3) #3, !dbg !13577
  call void @llvm.dbg.declare(metadata %struct._object** %sub, metadata !1749, metadata !2123), !dbg !13578
  %4 = load %struct._object*, %struct._object** %list, align 8, !dbg !13579, !tbaa !2119
  %cmp = icmp eq %struct._object* %4, null, !dbg !13581
  br i1 %cmp, label %if.then, label %if.end, !dbg !13582

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !13583
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.73, !dbg !13583

if.end:                                           ; preds = %entry
  store i64 0, i64* %j, align 8, !dbg !13584, !tbaa !2129
  store i64 0, i64* %i, align 8, !dbg !13585, !tbaa !2129
  br label %for.cond, !dbg !13586

for.cond:                                         ; preds = %cleanup.cont, %if.end
  %5 = load i64, i64* %i, align 8, !dbg !13587, !tbaa !2129
  %6 = load i64, i64* %str_len.addr, align 8, !dbg !13590, !tbaa !2129
  %cmp1 = icmp slt i64 %5, %6, !dbg !13591
  br i1 %cmp1, label %for.body, label %for.end, !dbg !13592

for.body:                                         ; preds = %for.cond
  %7 = bitcast i64* %eol to i8*, !dbg !13593
  call void @llvm.lifetime.start(i64 8, i8* %7) #3, !dbg !13593
  call void @llvm.dbg.declare(metadata i64* %eol, metadata !1750, metadata !2123), !dbg !13594
  br label %while.cond, !dbg !13595

while.cond:                                       ; preds = %while.body, %for.body
  %8 = load i64, i64* %i, align 8, !dbg !13596, !tbaa !2129
  %9 = load i64, i64* %str_len.addr, align 8, !dbg !13599, !tbaa !2129
  %cmp2 = icmp slt i64 %8, %9, !dbg !13600
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !13601

land.rhs:                                         ; preds = %while.cond
  %10 = load i64, i64* %i, align 8, !dbg !13602, !tbaa !2129
  %11 = load i8*, i8** %str.addr, align 8, !dbg !13604, !tbaa !2119
  %arrayidx = getelementptr i8, i8* %11, i64 %10, !dbg !13604
  %12 = load i8, i8* %arrayidx, align 1, !dbg !13604, !tbaa !2233
  %conv = sext i8 %12 to i32, !dbg !13604
  %cmp3 = icmp eq i32 %conv, 10, !dbg !13605
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !13606

lor.rhs:                                          ; preds = %land.rhs
  %13 = load i64, i64* %i, align 8, !dbg !13607, !tbaa !2129
  %14 = load i8*, i8** %str.addr, align 8, !dbg !13609, !tbaa !2119
  %arrayidx5 = getelementptr i8, i8* %14, i64 %13, !dbg !13609
  %15 = load i8, i8* %arrayidx5, align 1, !dbg !13609, !tbaa !2233
  %conv6 = sext i8 %15 to i32, !dbg !13609
  %cmp7 = icmp eq i32 %conv6, 13, !dbg !13610
  br label %lor.end, !dbg !13606

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %16 = phi i1 [ true, %land.rhs ], [ %cmp7, %lor.rhs ]
  %lnot = xor i1 %16, true, !dbg !13611
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %17 = phi i1 [ false, %while.cond ], [ %lnot, %lor.end ]
  br i1 %17, label %while.body, label %while.end, !dbg !13614

while.body:                                       ; preds = %land.end
  %18 = load i64, i64* %i, align 8, !dbg !13616, !tbaa !2129
  %inc = add i64 %18, 1, !dbg !13616
  store i64 %inc, i64* %i, align 8, !dbg !13616, !tbaa !2129
  br label %while.cond, !dbg !13595

while.end:                                        ; preds = %land.end
  %19 = load i64, i64* %i, align 8, !dbg !13617, !tbaa !2129
  store i64 %19, i64* %eol, align 8, !dbg !13618, !tbaa !2129
  %20 = load i64, i64* %i, align 8, !dbg !13619, !tbaa !2129
  %21 = load i64, i64* %str_len.addr, align 8, !dbg !13621, !tbaa !2129
  %cmp9 = icmp slt i64 %20, %21, !dbg !13622
  br i1 %cmp9, label %if.then.11, label %if.end.30, !dbg !13623

if.then.11:                                       ; preds = %while.end
  %22 = load i64, i64* %i, align 8, !dbg !13624, !tbaa !2129
  %23 = load i8*, i8** %str.addr, align 8, !dbg !13627, !tbaa !2119
  %arrayidx12 = getelementptr i8, i8* %23, i64 %22, !dbg !13627
  %24 = load i8, i8* %arrayidx12, align 1, !dbg !13627, !tbaa !2233
  %conv13 = sext i8 %24 to i32, !dbg !13627
  %cmp14 = icmp eq i32 %conv13, 13, !dbg !13628
  br i1 %cmp14, label %land.lhs.true, label %if.else, !dbg !13629

land.lhs.true:                                    ; preds = %if.then.11
  %25 = load i64, i64* %i, align 8, !dbg !13630, !tbaa !2129
  %add = add i64 %25, 1, !dbg !13632
  %26 = load i64, i64* %str_len.addr, align 8, !dbg !13633, !tbaa !2129
  %cmp16 = icmp slt i64 %add, %26, !dbg !13634
  br i1 %cmp16, label %land.lhs.true.18, label %if.else, !dbg !13635

land.lhs.true.18:                                 ; preds = %land.lhs.true
  %27 = load i64, i64* %i, align 8, !dbg !13636, !tbaa !2129
  %add19 = add i64 %27, 1, !dbg !13638
  %28 = load i8*, i8** %str.addr, align 8, !dbg !13639, !tbaa !2119
  %arrayidx20 = getelementptr i8, i8* %28, i64 %add19, !dbg !13639
  %29 = load i8, i8* %arrayidx20, align 1, !dbg !13639, !tbaa !2233
  %conv21 = sext i8 %29 to i32, !dbg !13639
  %cmp22 = icmp eq i32 %conv21, 10, !dbg !13640
  br i1 %cmp22, label %if.then.24, label %if.else, !dbg !13641

if.then.24:                                       ; preds = %land.lhs.true.18
  %30 = load i64, i64* %i, align 8, !dbg !13642, !tbaa !2129
  %add25 = add i64 %30, 2, !dbg !13642
  store i64 %add25, i64* %i, align 8, !dbg !13642, !tbaa !2129
  br label %if.end.27, !dbg !13643

if.else:                                          ; preds = %land.lhs.true.18, %land.lhs.true, %if.then.11
  %31 = load i64, i64* %i, align 8, !dbg !13644, !tbaa !2129
  %inc26 = add i64 %31, 1, !dbg !13644
  store i64 %inc26, i64* %i, align 8, !dbg !13644, !tbaa !2129
  br label %if.end.27

if.end.27:                                        ; preds = %if.else, %if.then.24
  %32 = load i32, i32* %keepends.addr, align 4, !dbg !13645, !tbaa !2676
  %tobool = icmp ne i32 %32, 0, !dbg !13645
  br i1 %tobool, label %if.then.28, label %if.end.29, !dbg !13647

if.then.28:                                       ; preds = %if.end.27
  %33 = load i64, i64* %i, align 8, !dbg !13648, !tbaa !2129
  store i64 %33, i64* %eol, align 8, !dbg !13649, !tbaa !2129
  br label %if.end.29, !dbg !13650

if.end.29:                                        ; preds = %if.then.28, %if.end.27
  br label %if.end.30, !dbg !13651

if.end.30:                                        ; preds = %if.end.29, %while.end
  %34 = load i8*, i8** %str.addr, align 8, !dbg !13652, !tbaa !2119
  %35 = load i64, i64* %j, align 8, !dbg !13653, !tbaa !2129
  %add.ptr = getelementptr i8, i8* %34, i64 %35, !dbg !13654
  %36 = load i64, i64* %eol, align 8, !dbg !13655, !tbaa !2129
  %37 = load i64, i64* %j, align 8, !dbg !13656, !tbaa !2129
  %sub31 = sub i64 %36, %37, !dbg !13657
  %call32 = call %struct._object* @PyByteArray_FromStringAndSize(i8* %add.ptr, i64 %sub31), !dbg !13658
  store %struct._object* %call32, %struct._object** %sub, align 8, !dbg !13659, !tbaa !2119
  %38 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13660, !tbaa !2119
  %cmp33 = icmp eq %struct._object* %38, null, !dbg !13662
  br i1 %cmp33, label %if.then.35, label %if.end.36, !dbg !13663

if.then.35:                                       ; preds = %if.end.30
  store i32 6, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13664

if.end.36:                                        ; preds = %if.end.30
  %39 = load %struct._object*, %struct._object** %list, align 8, !dbg !13665, !tbaa !2119
  %40 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13667, !tbaa !2119
  %call37 = call i32 @PyList_Append(%struct._object* %39, %struct._object* %40), !dbg !13668
  %tobool38 = icmp ne i32 %call37, 0, !dbg !13668
  br i1 %tobool38, label %if.then.39, label %if.else.45, !dbg !13669

if.then.39:                                       ; preds = %if.end.36
  br label %do.body, !dbg !13670

do.body:                                          ; preds = %if.then.39
  %41 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !13672
  call void @llvm.lifetime.start(i64 8, i8* %41) #3, !dbg !13672
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1754, metadata !2123), !dbg !13674
  %42 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13675, !tbaa !2119
  store %struct._object* %42, %struct._object** %_py_decref_tmp, align 8, !dbg !13674, !tbaa !2119
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13676, !tbaa !2119
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0, !dbg !13678
  %44 = load i64, i64* %ob_refcnt, align 8, !dbg !13679, !tbaa !2195
  %dec = add i64 %44, -1, !dbg !13679
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !13679, !tbaa !2195
  %cmp40 = icmp ne i64 %dec, 0, !dbg !13680
  br i1 %cmp40, label %if.then.42, label %if.else.43, !dbg !13681

if.then.42:                                       ; preds = %do.body
  br label %if.end.44, !dbg !13682

if.else.43:                                       ; preds = %do.body
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13684, !tbaa !2119
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1, !dbg !13686
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !13686, !tbaa !2203
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4, !dbg !13687
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !13687, !tbaa !2205
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !13688, !tbaa !2119
  call void %47(%struct._object* %48), !dbg !13689
  br label %if.end.44

if.end.44:                                        ; preds = %if.else.43, %if.then.42
  %49 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !13690
  call void @llvm.lifetime.end(i64 8, i8* %49) #3, !dbg !13690
  br label %do.cond, !dbg !13692

do.cond:                                          ; preds = %if.end.44
  br label %do.end, !dbg !13693

do.end:                                           ; preds = %do.cond
  store i32 6, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13695

if.else.45:                                       ; preds = %if.end.36
  br label %do.body.46, !dbg !13696

do.body.46:                                       ; preds = %if.else.45
  %50 = bitcast %struct._object** %_py_decref_tmp47 to i8*, !dbg !13698
  call void @llvm.lifetime.start(i64 8, i8* %50) #3, !dbg !13698
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp47, metadata !1758, metadata !2123), !dbg !13700
  %51 = load %struct._object*, %struct._object** %sub, align 8, !dbg !13701, !tbaa !2119
  store %struct._object* %51, %struct._object** %_py_decref_tmp47, align 8, !dbg !13700, !tbaa !2119
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8, !dbg !13702, !tbaa !2119
  %ob_refcnt48 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 0, !dbg !13704
  %53 = load i64, i64* %ob_refcnt48, align 8, !dbg !13705, !tbaa !2195
  %dec49 = add i64 %53, -1, !dbg !13705
  store i64 %dec49, i64* %ob_refcnt48, align 8, !dbg !13705, !tbaa !2195
  %cmp50 = icmp ne i64 %dec49, 0, !dbg !13706
  br i1 %cmp50, label %if.then.52, label %if.else.53, !dbg !13707

if.then.52:                                       ; preds = %do.body.46
  br label %if.end.56, !dbg !13708

if.else.53:                                       ; preds = %do.body.46
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8, !dbg !13710, !tbaa !2119
  %ob_type54 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 1, !dbg !13712
  %55 = load %struct._typeobject*, %struct._typeobject** %ob_type54, align 8, !dbg !13712, !tbaa !2203
  %tp_dealloc55 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 4, !dbg !13713
  %56 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc55, align 8, !dbg !13713, !tbaa !2205
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8, !dbg !13714, !tbaa !2119
  call void %56(%struct._object* %57), !dbg !13715
  br label %if.end.56

if.end.56:                                        ; preds = %if.else.53, %if.then.52
  %58 = bitcast %struct._object** %_py_decref_tmp47 to i8*, !dbg !13716
  call void @llvm.lifetime.end(i64 8, i8* %58) #3, !dbg !13716
  br label %do.cond.57, !dbg !13718

do.cond.57:                                       ; preds = %if.end.56
  br label %do.end.58, !dbg !13719

do.end.58:                                        ; preds = %do.cond.57
  br label %if.end.59

if.end.59:                                        ; preds = %do.end.58
  %59 = load i64, i64* %i, align 8, !dbg !13721, !tbaa !2129
  store i64 %59, i64* %j, align 8, !dbg !13722, !tbaa !2129
  store i32 0, i32* %cleanup.dest.slot, !dbg !13723
  br label %cleanup, !dbg !13723

cleanup:                                          ; preds = %if.end.59, %do.end, %if.then.35
  %60 = bitcast i64* %eol to i8*, !dbg !13724
  call void @llvm.lifetime.end(i64 8, i8* %60) #3, !dbg !13724
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock

NodeBlock:                                        ; preds = %cleanup
  %Pivot = icmp slt i32 %cleanup.dest, 6
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %cleanup.dest, 6
  br i1 %SwitchLeaf2, label %onError, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %for.cond, !dbg !13725

for.end:                                          ; preds = %for.cond
  %61 = load %struct._object*, %struct._object** %list, align 8, !dbg !13726, !tbaa !2119
  store %struct._object* %61, %struct._object** %retval, !dbg !13727
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.73, !dbg !13727

onError:                                          ; preds = %LeafBlock.1
  br label %do.body.60, !dbg !13728

do.body.60:                                       ; preds = %onError
  %62 = bitcast %struct._object** %_py_decref_tmp61 to i8*, !dbg !13729
  call void @llvm.lifetime.start(i64 8, i8* %62) #3, !dbg !13729
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp61, metadata !1760, metadata !2123), !dbg !13731
  %63 = load %struct._object*, %struct._object** %list, align 8, !dbg !13732, !tbaa !2119
  store %struct._object* %63, %struct._object** %_py_decref_tmp61, align 8, !dbg !13731, !tbaa !2119
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp61, align 8, !dbg !13733, !tbaa !2119
  %ob_refcnt62 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 0, !dbg !13735
  %65 = load i64, i64* %ob_refcnt62, align 8, !dbg !13736, !tbaa !2195
  %dec63 = add i64 %65, -1, !dbg !13736
  store i64 %dec63, i64* %ob_refcnt62, align 8, !dbg !13736, !tbaa !2195
  %cmp64 = icmp ne i64 %dec63, 0, !dbg !13737
  br i1 %cmp64, label %if.then.66, label %if.else.67, !dbg !13738

if.then.66:                                       ; preds = %do.body.60
  br label %if.end.70, !dbg !13739

if.else.67:                                       ; preds = %do.body.60
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp61, align 8, !dbg !13741, !tbaa !2119
  %ob_type68 = getelementptr inbounds %struct._object, %struct._object* %66, i32 0, i32 1, !dbg !13743
  %67 = load %struct._typeobject*, %struct._typeobject** %ob_type68, align 8, !dbg !13743, !tbaa !2203
  %tp_dealloc69 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %67, i32 0, i32 4, !dbg !13744
  %68 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc69, align 8, !dbg !13744, !tbaa !2205
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp61, align 8, !dbg !13745, !tbaa !2119
  call void %68(%struct._object* %69), !dbg !13746
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.67, %if.then.66
  %70 = bitcast %struct._object** %_py_decref_tmp61 to i8*, !dbg !13747
  call void @llvm.lifetime.end(i64 8, i8* %70) #3, !dbg !13747
  br label %do.cond.71, !dbg !13749

do.cond.71:                                       ; preds = %if.end.70
  br label %do.end.72, !dbg !13750

do.end.72:                                        ; preds = %do.cond.71
  store %struct._object* null, %struct._object** %retval, !dbg !13752
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.73, !dbg !13752

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %cleanup.73

cleanup.73:                                       ; preds = %NewDefault, %do.end.72, %for.end, %if.then
  %71 = bitcast %struct._object** %sub to i8*, !dbg !13753
  call void @llvm.lifetime.end(i64 8, i8* %71) #3, !dbg !13753
  %72 = bitcast %struct._object** %list to i8*, !dbg !13753
  call void @llvm.lifetime.end(i64 8, i8* %72) #3, !dbg !13753
  %73 = bitcast i64* %j to i8*, !dbg !13753
  call void @llvm.lifetime.end(i64 8, i8* %73) #3, !dbg !13753
  %74 = bitcast i64* %i to i8*, !dbg !13753
  call void @llvm.lifetime.end(i64 8, i8* %74) #3, !dbg !13753
  %75 = load %struct._object*, %struct._object** %retval, !dbg !13753
  ret %struct._object* %75, !dbg !13753
}

declare void @_Py_bytes_swapcase(i8*, i8*, i64) #2

declare void @_Py_bytes_title(i8*, i8*, i64) #2

declare i32 @PyArg_UnpackTuple(%struct._object*, i8*, i64, i64, ...) #2

declare void @_Py_bytes_upper(i8*, i8*, i64) #2

declare %struct._object* @PyUnicode_AsEncodedString(%struct._object*, i8*, i8*) #2

declare i32 @PyObject_GetBuffer(%struct._object*, %struct.bufferinfo*, i32) #2

declare i32 @PyBuffer_ToContiguous(i8*, %struct.bufferinfo*, i64, i8 signext) #2

declare void @PyObject_GC_Del(i8*) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearrayiter_length_hint(%struct.bytesiterobject* %it) #0 {
entry:
  %it.addr = alloca %struct.bytesiterobject*, align 8
  %len = alloca i64, align 8
  store %struct.bytesiterobject* %it, %struct.bytesiterobject** %it.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.bytesiterobject** %it.addr, metadata !1904, metadata !2123), !dbg !13754
  %0 = bitcast i64* %len to i8*, !dbg !13755
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !13755
  call void @llvm.dbg.declare(metadata i64* %len, metadata !1905, metadata !2123), !dbg !13756
  store i64 0, i64* %len, align 8, !dbg !13756, !tbaa !2129
  %1 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !13757, !tbaa !2119
  %it_seq = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %1, i32 0, i32 2, !dbg !13759
  %2 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %it_seq, align 8, !dbg !13759, !tbaa !3072
  %tobool = icmp ne %struct.PyByteArrayObject* %2, null, !dbg !13757
  br i1 %tobool, label %if.then, label %if.end, !dbg !13760

if.then:                                          ; preds = %entry
  %3 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !13761, !tbaa !2119
  %it_seq1 = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %3, i32 0, i32 2, !dbg !13762
  %4 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %it_seq1, align 8, !dbg !13762, !tbaa !3072
  %5 = bitcast %struct.PyByteArrayObject* %4 to %struct.PyVarObject*, !dbg !13763
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %5, i32 0, i32 1, !dbg !13764
  %6 = load i64, i64* %ob_size, align 8, !dbg !13764, !tbaa !2239
  %7 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !13765, !tbaa !2119
  %it_index = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %7, i32 0, i32 1, !dbg !13766
  %8 = load i64, i64* %it_index, align 8, !dbg !13766, !tbaa !3062
  %sub = sub i64 %6, %8, !dbg !13767
  store i64 %sub, i64* %len, align 8, !dbg !13768, !tbaa !2129
  br label %if.end, !dbg !13769

if.end:                                           ; preds = %if.then, %entry
  %9 = load i64, i64* %len, align 8, !dbg !13770, !tbaa !2129
  %call = call %struct._object* @PyLong_FromSsize_t(i64 %9), !dbg !13771
  %10 = bitcast i64* %len to i8*, !dbg !13772
  call void @llvm.lifetime.end(i64 8, i8* %10) #3, !dbg !13772
  ret %struct._object* %call, !dbg !13773
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearrayiter_reduce(%struct.bytesiterobject* %it) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %it.addr = alloca %struct.bytesiterobject*, align 8
  %u = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.bytesiterobject* %it, %struct.bytesiterobject** %it.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.bytesiterobject** %it.addr, metadata !1908, metadata !2123), !dbg !13774
  %0 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !13775, !tbaa !2119
  %it_seq = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %0, i32 0, i32 2, !dbg !13776
  %1 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %it_seq, align 8, !dbg !13776, !tbaa !3072
  %cmp = icmp ne %struct.PyByteArrayObject* %1, null, !dbg !13777
  br i1 %cmp, label %if.then, label %if.else, !dbg !13778

if.then:                                          ; preds = %entry
  %call = call %struct._object* @_PyObject_GetBuiltin(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.127, i32 0, i32 0)), !dbg !13779
  %2 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !13781, !tbaa !2119
  %it_seq1 = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %2, i32 0, i32 2, !dbg !13782
  %3 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %it_seq1, align 8, !dbg !13782, !tbaa !3072
  %4 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !13783, !tbaa !2119
  %it_index = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %4, i32 0, i32 1, !dbg !13784
  %5 = load i64, i64* %it_index, align 8, !dbg !13784, !tbaa !3062
  %call2 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.126, i32 0, i32 0), %struct._object* %call, %struct.PyByteArrayObject* %3, i64 %5), !dbg !13785
  store %struct._object* %call2, %struct._object** %retval, !dbg !13786
  br label %return, !dbg !13786

if.else:                                          ; preds = %entry
  %6 = bitcast %struct._object** %u to i8*, !dbg !13787
  call void @llvm.lifetime.start(i64 8, i8* %6) #3, !dbg !13787
  call void @llvm.dbg.declare(metadata %struct._object** %u, metadata !1909, metadata !2123), !dbg !13788
  %call3 = call %struct._object* @PyUnicode_FromUnicode(i32* null, i64 0), !dbg !13789
  store %struct._object* %call3, %struct._object** %u, align 8, !dbg !13788, !tbaa !2119
  %7 = load %struct._object*, %struct._object** %u, align 8, !dbg !13790, !tbaa !2119
  %cmp4 = icmp eq %struct._object* %7, null, !dbg !13792
  br i1 %cmp4, label %if.then.5, label %if.end, !dbg !13793

if.then.5:                                        ; preds = %if.else
  store %struct._object* null, %struct._object** %retval, !dbg !13794
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13794

if.end:                                           ; preds = %if.else
  %call6 = call %struct._object* @_PyObject_GetBuiltin(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.127, i32 0, i32 0)), !dbg !13795
  %8 = load %struct._object*, %struct._object** %u, align 8, !dbg !13796, !tbaa !2119
  %call7 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.128, i32 0, i32 0), %struct._object* %call6, %struct._object* %8), !dbg !13797
  store %struct._object* %call7, %struct._object** %retval, !dbg !13798
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13798

cleanup:                                          ; preds = %if.end, %if.then.5
  %9 = bitcast %struct._object** %u to i8*, !dbg !13799
  call void @llvm.lifetime.end(i64 8, i8* %9) #3, !dbg !13799
  br label %return

return:                                           ; preds = %cleanup, %if.then
  %10 = load %struct._object*, %struct._object** %retval, !dbg !13800
  ret %struct._object* %10, !dbg !13800
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @bytearrayiter_setstate(%struct.bytesiterobject* %it, %struct._object* %state) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %it.addr = alloca %struct.bytesiterobject*, align 8
  %state.addr = alloca %struct._object*, align 8
  %index = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.bytesiterobject* %it, %struct.bytesiterobject** %it.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct.bytesiterobject** %it.addr, metadata !1916, metadata !2123), !dbg !13801
  store %struct._object* %state, %struct._object** %state.addr, align 8, !tbaa !2119
  call void @llvm.dbg.declare(metadata %struct._object** %state.addr, metadata !1917, metadata !2123), !dbg !13802
  %0 = bitcast i64* %index to i8*, !dbg !13803
  call void @llvm.lifetime.start(i64 8, i8* %0) #3, !dbg !13803
  call void @llvm.dbg.declare(metadata i64* %index, metadata !1918, metadata !2123), !dbg !13804
  %1 = load %struct._object*, %struct._object** %state.addr, align 8, !dbg !13805, !tbaa !2119
  %call = call i64 @PyLong_AsSsize_t(%struct._object* %1), !dbg !13806
  store i64 %call, i64* %index, align 8, !dbg !13804, !tbaa !2129
  %2 = load i64, i64* %index, align 8, !dbg !13807, !tbaa !2129
  %cmp = icmp eq i64 %2, -1, !dbg !13809
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !13810

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred(), !dbg !13811
  %tobool = icmp ne %struct._object* %call1, null, !dbg !13811
  br i1 %tobool, label %if.then, label %if.end, !dbg !13813

if.then:                                          ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval, !dbg !13814
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13814

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !13815, !tbaa !2119
  %it_seq = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %3, i32 0, i32 2, !dbg !13817
  %4 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %it_seq, align 8, !dbg !13817, !tbaa !3072
  %cmp2 = icmp ne %struct.PyByteArrayObject* %4, null, !dbg !13818
  br i1 %cmp2, label %if.then.3, label %if.end.13, !dbg !13819

if.then.3:                                        ; preds = %if.end
  %5 = load i64, i64* %index, align 8, !dbg !13820, !tbaa !2129
  %cmp4 = icmp slt i64 %5, 0, !dbg !13823
  br i1 %cmp4, label %if.then.5, label %if.else, !dbg !13824

if.then.5:                                        ; preds = %if.then.3
  store i64 0, i64* %index, align 8, !dbg !13825, !tbaa !2129
  br label %if.end.12, !dbg !13826

if.else:                                          ; preds = %if.then.3
  %6 = load i64, i64* %index, align 8, !dbg !13827, !tbaa !2129
  %7 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !13829, !tbaa !2119
  %it_seq6 = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %7, i32 0, i32 2, !dbg !13830
  %8 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %it_seq6, align 8, !dbg !13830, !tbaa !3072
  %9 = bitcast %struct.PyByteArrayObject* %8 to %struct.PyVarObject*, !dbg !13831
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %9, i32 0, i32 1, !dbg !13832
  %10 = load i64, i64* %ob_size, align 8, !dbg !13832, !tbaa !2239
  %cmp7 = icmp sgt i64 %6, %10, !dbg !13833
  br i1 %cmp7, label %if.then.8, label %if.end.11, !dbg !13834

if.then.8:                                        ; preds = %if.else
  %11 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !13835, !tbaa !2119
  %it_seq9 = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %11, i32 0, i32 2, !dbg !13836
  %12 = load %struct.PyByteArrayObject*, %struct.PyByteArrayObject** %it_seq9, align 8, !dbg !13836, !tbaa !3072
  %13 = bitcast %struct.PyByteArrayObject* %12 to %struct.PyVarObject*, !dbg !13837
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %13, i32 0, i32 1, !dbg !13838
  %14 = load i64, i64* %ob_size10, align 8, !dbg !13838, !tbaa !2239
  store i64 %14, i64* %index, align 8, !dbg !13839, !tbaa !2129
  br label %if.end.11, !dbg !13840

if.end.11:                                        ; preds = %if.then.8, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.then.5
  %15 = load i64, i64* %index, align 8, !dbg !13841, !tbaa !2129
  %16 = load %struct.bytesiterobject*, %struct.bytesiterobject** %it.addr, align 8, !dbg !13842, !tbaa !2119
  %it_index = getelementptr inbounds %struct.bytesiterobject, %struct.bytesiterobject* %16, i32 0, i32 1, !dbg !13843
  store i64 %15, i64* %it_index, align 8, !dbg !13844, !tbaa !3062
  br label %if.end.13, !dbg !13845

if.end.13:                                        ; preds = %if.end.12, %if.end
  %17 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !13846, !tbaa !2195
  %inc = add i64 %17, 1, !dbg !13846
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !13846, !tbaa !2195
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !13847
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !13847

cleanup:                                          ; preds = %if.end.13, %if.then
  %18 = bitcast i64* %index to i8*, !dbg !13848
  call void @llvm.lifetime.end(i64 8, i8* %18) #3, !dbg !13848
  %19 = load %struct._object*, %struct._object** %retval, !dbg !13848
  ret %struct._object* %19, !dbg !13848
}

declare %struct._object* @_PyObject_GetBuiltin(i8*) #2

declare %struct._object* @PyUnicode_FromUnicode(i32*, i64) #2

declare i64 @PyLong_AsSsize_t(%struct._object*) #2

declare void @_PyErr_BadInternalCall(i8*, i32) #2

declare %struct._object* @_PyObject_GC_New(%struct._typeobject*) #2

; Function Attrs: noreturn
declare void @Py_FatalError(i8*) #7

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly }
attributes #9 = { noreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2114, !2115}
!llvm.ident = !{!2116}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.1 (https://github.com/llvm-mirror/clang.git 0dbefa1b83eb90f7a06b5df5df254ce32be3db4b) (git@github.com:kim-yoonseung/llvm.git e8e68907a8135028089af4d924da468e2b7257fa)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !10, subprograms: !464, globals: !1925)
!1 = !DIFile(filename: "bytearrayobject.c", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "PyUnicode_Kind", file: !4, line: 451, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "Include/unicodeobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!5 = !{!6, !7, !8, !9}
!6 = !DIEnumerator(name: "PyUnicode_WCHAR_KIND", value: 0)
!7 = !DIEnumerator(name: "PyUnicode_1BYTE_KIND", value: 1)
!8 = !DIEnumerator(name: "PyUnicode_2BYTE_KIND", value: 2)
!9 = !DIEnumerator(name: "PyUnicode_4BYTE_KIND", value: 4)
!10 = !{!11, !96, !17, !101, !357, !367, !368, !50, !369, !35, !371, !37, !374, !382, !400, !408, !425, !426, !428, !430, !242, !432, !58, !441, !442, !456}
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!12 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyObject", file: !13, line: 109, baseType: !14)
!13 = !DIFile(filename: "Include/object.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!14 = !DICompositeType(tag: DW_TAG_structure_type, name: "_object", file: !13, line: 105, size: 128, align: 64, elements: !15)
!15 = !{!16, !24}
!16 = !DIDerivedType(tag: DW_TAG_member, name: "ob_refcnt", scope: !14, file: !13, line: 107, baseType: !17, size: 64, align: 64)
!17 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_ssize_t", file: !18, line: 177, baseType: !19)
!18 = !DIFile(filename: "Include/pyport.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!19 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !20, line: 102, baseType: !21)
!20 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!21 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !22, line: 181, baseType: !23)
!22 = !DIFile(filename: "/usr/include/bits/types.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!23 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!24 = !DIDerivedType(tag: DW_TAG_member, name: "ob_type", scope: !14, file: !13, line: 108, baseType: !25, size: 64, align: 64, offset: 64)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64, align: 64)
!26 = !DICompositeType(tag: DW_TAG_structure_type, name: "_typeobject", file: !13, line: 334, size: 3200, align: 64, elements: !27)
!27 = !{!28, !34, !38, !39, !40, !45, !109, !114, !119, !120, !125, !177, !208, !220, !226, !227, !228, !230, !232, !263, !264, !265, !274, !275, !280, !281, !283, !285, !295, !305, !323, !324, !325, !327, !329, !330, !332, !337, !342, !347, !348, !349, !350, !351, !352, !353, !354, !356}
!28 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !26, file: !13, line: 335, baseType: !29, size: 192, align: 64)
!29 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyVarObject", file: !13, line: 114, baseType: !30)
!30 = !DICompositeType(tag: DW_TAG_structure_type, file: !13, line: 111, size: 192, align: 64, elements: !31)
!31 = !{!32, !33}
!32 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !30, file: !13, line: 112, baseType: !12, size: 128, align: 64)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "ob_size", scope: !30, file: !13, line: 113, baseType: !17, size: 64, align: 64, offset: 128)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "tp_name", scope: !26, file: !13, line: 336, baseType: !35, size: 64, align: 64, offset: 192)
!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !36, size: 64, align: 64)
!36 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !37)
!37 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!38 = !DIDerivedType(tag: DW_TAG_member, name: "tp_basicsize", scope: !26, file: !13, line: 337, baseType: !17, size: 64, align: 64, offset: 256)
!39 = !DIDerivedType(tag: DW_TAG_member, name: "tp_itemsize", scope: !26, file: !13, line: 337, baseType: !17, size: 64, align: 64, offset: 320)
!40 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dealloc", scope: !26, file: !13, line: 341, baseType: !41, size: 64, align: 64, offset: 384)
!41 = !DIDerivedType(tag: DW_TAG_typedef, name: "destructor", file: !13, line: 308, baseType: !42)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !43, size: 64, align: 64)
!43 = !DISubroutineType(types: !44)
!44 = !{null, !11}
!45 = !DIDerivedType(tag: DW_TAG_member, name: "tp_print", scope: !26, file: !13, line: 342, baseType: !46, size: 64, align: 64, offset: 448)
!46 = !DIDerivedType(tag: DW_TAG_typedef, name: "printfunc", file: !13, line: 314, baseType: !47)
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64, align: 64)
!48 = !DISubroutineType(types: !49)
!49 = !{!50, !11, !51, !50}
!50 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64, align: 64)
!52 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !20, line: 48, baseType: !53)
!53 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !54, line: 246, size: 1728, align: 64, elements: !55)
!54 = !DIFile(filename: "/usr/include/libio.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!55 = !{!56, !57, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !77, !78, !79, !80, !82, !84, !86, !90, !93, !95, !97, !98, !99, !100, !104, !105}
!56 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !53, file: !54, line: 247, baseType: !50, size: 32, align: 32)
!57 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !53, file: !54, line: 252, baseType: !58, size: 64, align: 64, offset: 64)
!58 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64, align: 64)
!59 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !53, file: !54, line: 253, baseType: !58, size: 64, align: 64, offset: 128)
!60 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !53, file: !54, line: 254, baseType: !58, size: 64, align: 64, offset: 192)
!61 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !53, file: !54, line: 255, baseType: !58, size: 64, align: 64, offset: 256)
!62 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !53, file: !54, line: 256, baseType: !58, size: 64, align: 64, offset: 320)
!63 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !53, file: !54, line: 257, baseType: !58, size: 64, align: 64, offset: 384)
!64 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !53, file: !54, line: 258, baseType: !58, size: 64, align: 64, offset: 448)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !53, file: !54, line: 259, baseType: !58, size: 64, align: 64, offset: 512)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !53, file: !54, line: 261, baseType: !58, size: 64, align: 64, offset: 576)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !53, file: !54, line: 262, baseType: !58, size: 64, align: 64, offset: 640)
!68 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !53, file: !54, line: 263, baseType: !58, size: 64, align: 64, offset: 704)
!69 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !53, file: !54, line: 265, baseType: !70, size: 64, align: 64, offset: 768)
!70 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !71, size: 64, align: 64)
!71 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !54, line: 161, size: 192, align: 64, elements: !72)
!72 = !{!73, !74, !76}
!73 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !71, file: !54, line: 162, baseType: !70, size: 64, align: 64)
!74 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !71, file: !54, line: 163, baseType: !75, size: 64, align: 64, offset: 64)
!75 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !53, size: 64, align: 64)
!76 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !71, file: !54, line: 167, baseType: !50, size: 32, align: 32, offset: 128)
!77 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !53, file: !54, line: 267, baseType: !75, size: 64, align: 64, offset: 832)
!78 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !53, file: !54, line: 269, baseType: !50, size: 32, align: 32, offset: 896)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !53, file: !54, line: 273, baseType: !50, size: 32, align: 32, offset: 928)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !53, file: !54, line: 275, baseType: !81, size: 64, align: 64, offset: 960)
!81 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !22, line: 140, baseType: !23)
!82 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !53, file: !54, line: 279, baseType: !83, size: 16, align: 16, offset: 1024)
!83 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!84 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !53, file: !54, line: 280, baseType: !85, size: 8, align: 8, offset: 1040)
!85 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!86 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !53, file: !54, line: 281, baseType: !87, size: 8, align: 8, offset: 1048)
!87 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 8, align: 8, elements: !88)
!88 = !{!89}
!89 = !DISubrange(count: 1)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !53, file: !54, line: 285, baseType: !91, size: 64, align: 64, offset: 1088)
!91 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !92, size: 64, align: 64)
!92 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !54, line: 155, baseType: null)
!93 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !53, file: !54, line: 294, baseType: !94, size: 64, align: 64, offset: 1152)
!94 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !22, line: 141, baseType: !23)
!95 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !53, file: !54, line: 303, baseType: !96, size: 64, align: 64, offset: 1216)
!96 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !53, file: !54, line: 304, baseType: !96, size: 64, align: 64, offset: 1280)
!98 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !53, file: !54, line: 305, baseType: !96, size: 64, align: 64, offset: 1344)
!99 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !53, file: !54, line: 306, baseType: !96, size: 64, align: 64, offset: 1408)
!100 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !53, file: !54, line: 307, baseType: !101, size: 64, align: 64, offset: 1472)
!101 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !102, line: 62, baseType: !103)
!102 = !DIFile(filename: "/opt/devel/yoonseung.kim/llvm_work/build/bin/../lib/clang/3.7.1/include/stddef.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!103 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!104 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !53, file: !54, line: 309, baseType: !50, size: 32, align: 32, offset: 1536)
!105 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !53, file: !54, line: 311, baseType: !106, size: 160, align: 8, offset: 1568)
!106 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 160, align: 8, elements: !107)
!107 = !{!108}
!108 = !DISubrange(count: 20)
!109 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getattr", scope: !26, file: !13, line: 343, baseType: !110, size: 64, align: 64, offset: 512)
!110 = !DIDerivedType(tag: DW_TAG_typedef, name: "getattrfunc", file: !13, line: 316, baseType: !111)
!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !112, size: 64, align: 64)
!112 = !DISubroutineType(types: !113)
!113 = !{!11, !11, !58}
!114 = !DIDerivedType(tag: DW_TAG_member, name: "tp_setattr", scope: !26, file: !13, line: 344, baseType: !115, size: 64, align: 64, offset: 576)
!115 = !DIDerivedType(tag: DW_TAG_typedef, name: "setattrfunc", file: !13, line: 318, baseType: !116)
!116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !117, size: 64, align: 64)
!117 = !DISubroutineType(types: !118)
!118 = !{!50, !11, !58, !11}
!119 = !DIDerivedType(tag: DW_TAG_member, name: "tp_reserved", scope: !26, file: !13, line: 345, baseType: !96, size: 64, align: 64, offset: 640)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "tp_repr", scope: !26, file: !13, line: 346, baseType: !121, size: 64, align: 64, offset: 704)
!121 = !DIDerivedType(tag: DW_TAG_typedef, name: "reprfunc", file: !13, line: 320, baseType: !122)
!122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !123, size: 64, align: 64)
!123 = !DISubroutineType(types: !124)
!124 = !{!11, !11}
!125 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_number", scope: !26, file: !13, line: 350, baseType: !126, size: 64, align: 64, offset: 768)
!126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !127, size: 64, align: 64)
!127 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyNumberMethods", file: !13, line: 278, baseType: !128)
!128 = !DICompositeType(tag: DW_TAG_structure_type, file: !13, line: 236, size: 2176, align: 64, elements: !129)
!129 = !{!130, !135, !136, !137, !138, !139, !144, !146, !147, !148, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176}
!130 = !DIDerivedType(tag: DW_TAG_member, name: "nb_add", scope: !128, file: !13, line: 241, baseType: !131, size: 64, align: 64)
!131 = !DIDerivedType(tag: DW_TAG_typedef, name: "binaryfunc", file: !13, line: 166, baseType: !132)
!132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !133, size: 64, align: 64)
!133 = !DISubroutineType(types: !134)
!134 = !{!11, !11, !11}
!135 = !DIDerivedType(tag: DW_TAG_member, name: "nb_subtract", scope: !128, file: !13, line: 242, baseType: !131, size: 64, align: 64, offset: 64)
!136 = !DIDerivedType(tag: DW_TAG_member, name: "nb_multiply", scope: !128, file: !13, line: 243, baseType: !131, size: 64, align: 64, offset: 128)
!137 = !DIDerivedType(tag: DW_TAG_member, name: "nb_remainder", scope: !128, file: !13, line: 244, baseType: !131, size: 64, align: 64, offset: 192)
!138 = !DIDerivedType(tag: DW_TAG_member, name: "nb_divmod", scope: !128, file: !13, line: 245, baseType: !131, size: 64, align: 64, offset: 256)
!139 = !DIDerivedType(tag: DW_TAG_member, name: "nb_power", scope: !128, file: !13, line: 246, baseType: !140, size: 64, align: 64, offset: 320)
!140 = !DIDerivedType(tag: DW_TAG_typedef, name: "ternaryfunc", file: !13, line: 167, baseType: !141)
!141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !142, size: 64, align: 64)
!142 = !DISubroutineType(types: !143)
!143 = !{!11, !11, !11, !11}
!144 = !DIDerivedType(tag: DW_TAG_member, name: "nb_negative", scope: !128, file: !13, line: 247, baseType: !145, size: 64, align: 64, offset: 384)
!145 = !DIDerivedType(tag: DW_TAG_typedef, name: "unaryfunc", file: !13, line: 165, baseType: !122)
!146 = !DIDerivedType(tag: DW_TAG_member, name: "nb_positive", scope: !128, file: !13, line: 248, baseType: !145, size: 64, align: 64, offset: 448)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "nb_absolute", scope: !128, file: !13, line: 249, baseType: !145, size: 64, align: 64, offset: 512)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "nb_bool", scope: !128, file: !13, line: 250, baseType: !149, size: 64, align: 64, offset: 576)
!149 = !DIDerivedType(tag: DW_TAG_typedef, name: "inquiry", file: !13, line: 168, baseType: !150)
!150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !151, size: 64, align: 64)
!151 = !DISubroutineType(types: !152)
!152 = !{!50, !11}
!153 = !DIDerivedType(tag: DW_TAG_member, name: "nb_invert", scope: !128, file: !13, line: 251, baseType: !145, size: 64, align: 64, offset: 640)
!154 = !DIDerivedType(tag: DW_TAG_member, name: "nb_lshift", scope: !128, file: !13, line: 252, baseType: !131, size: 64, align: 64, offset: 704)
!155 = !DIDerivedType(tag: DW_TAG_member, name: "nb_rshift", scope: !128, file: !13, line: 253, baseType: !131, size: 64, align: 64, offset: 768)
!156 = !DIDerivedType(tag: DW_TAG_member, name: "nb_and", scope: !128, file: !13, line: 254, baseType: !131, size: 64, align: 64, offset: 832)
!157 = !DIDerivedType(tag: DW_TAG_member, name: "nb_xor", scope: !128, file: !13, line: 255, baseType: !131, size: 64, align: 64, offset: 896)
!158 = !DIDerivedType(tag: DW_TAG_member, name: "nb_or", scope: !128, file: !13, line: 256, baseType: !131, size: 64, align: 64, offset: 960)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "nb_int", scope: !128, file: !13, line: 257, baseType: !145, size: 64, align: 64, offset: 1024)
!160 = !DIDerivedType(tag: DW_TAG_member, name: "nb_reserved", scope: !128, file: !13, line: 258, baseType: !96, size: 64, align: 64, offset: 1088)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "nb_float", scope: !128, file: !13, line: 259, baseType: !145, size: 64, align: 64, offset: 1152)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_add", scope: !128, file: !13, line: 261, baseType: !131, size: 64, align: 64, offset: 1216)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_subtract", scope: !128, file: !13, line: 262, baseType: !131, size: 64, align: 64, offset: 1280)
!164 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_multiply", scope: !128, file: !13, line: 263, baseType: !131, size: 64, align: 64, offset: 1344)
!165 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_remainder", scope: !128, file: !13, line: 264, baseType: !131, size: 64, align: 64, offset: 1408)
!166 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_power", scope: !128, file: !13, line: 265, baseType: !140, size: 64, align: 64, offset: 1472)
!167 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_lshift", scope: !128, file: !13, line: 266, baseType: !131, size: 64, align: 64, offset: 1536)
!168 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_rshift", scope: !128, file: !13, line: 267, baseType: !131, size: 64, align: 64, offset: 1600)
!169 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_and", scope: !128, file: !13, line: 268, baseType: !131, size: 64, align: 64, offset: 1664)
!170 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_xor", scope: !128, file: !13, line: 269, baseType: !131, size: 64, align: 64, offset: 1728)
!171 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_or", scope: !128, file: !13, line: 270, baseType: !131, size: 64, align: 64, offset: 1792)
!172 = !DIDerivedType(tag: DW_TAG_member, name: "nb_floor_divide", scope: !128, file: !13, line: 272, baseType: !131, size: 64, align: 64, offset: 1856)
!173 = !DIDerivedType(tag: DW_TAG_member, name: "nb_true_divide", scope: !128, file: !13, line: 273, baseType: !131, size: 64, align: 64, offset: 1920)
!174 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_floor_divide", scope: !128, file: !13, line: 274, baseType: !131, size: 64, align: 64, offset: 1984)
!175 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_true_divide", scope: !128, file: !13, line: 275, baseType: !131, size: 64, align: 64, offset: 2048)
!176 = !DIDerivedType(tag: DW_TAG_member, name: "nb_index", scope: !128, file: !13, line: 277, baseType: !145, size: 64, align: 64, offset: 2112)
!177 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_sequence", scope: !26, file: !13, line: 351, baseType: !178, size: 64, align: 64, offset: 832)
!178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !179, size: 64, align: 64)
!179 = !DIDerivedType(tag: DW_TAG_typedef, name: "PySequenceMethods", file: !13, line: 292, baseType: !180)
!180 = !DICompositeType(tag: DW_TAG_structure_type, file: !13, line: 280, size: 640, align: 64, elements: !181)
!181 = !{!182, !187, !188, !193, !194, !195, !200, !201, !206, !207}
!182 = !DIDerivedType(tag: DW_TAG_member, name: "sq_length", scope: !180, file: !13, line: 281, baseType: !183, size: 64, align: 64)
!183 = !DIDerivedType(tag: DW_TAG_typedef, name: "lenfunc", file: !13, line: 169, baseType: !184)
!184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !185, size: 64, align: 64)
!185 = !DISubroutineType(types: !186)
!186 = !{!17, !11}
!187 = !DIDerivedType(tag: DW_TAG_member, name: "sq_concat", scope: !180, file: !13, line: 282, baseType: !131, size: 64, align: 64, offset: 64)
!188 = !DIDerivedType(tag: DW_TAG_member, name: "sq_repeat", scope: !180, file: !13, line: 283, baseType: !189, size: 64, align: 64, offset: 128)
!189 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssizeargfunc", file: !13, line: 170, baseType: !190)
!190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !191, size: 64, align: 64)
!191 = !DISubroutineType(types: !192)
!192 = !{!11, !11, !17}
!193 = !DIDerivedType(tag: DW_TAG_member, name: "sq_item", scope: !180, file: !13, line: 284, baseType: !189, size: 64, align: 64, offset: 192)
!194 = !DIDerivedType(tag: DW_TAG_member, name: "was_sq_slice", scope: !180, file: !13, line: 285, baseType: !96, size: 64, align: 64, offset: 256)
!195 = !DIDerivedType(tag: DW_TAG_member, name: "sq_ass_item", scope: !180, file: !13, line: 286, baseType: !196, size: 64, align: 64, offset: 320)
!196 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssizeobjargproc", file: !13, line: 172, baseType: !197)
!197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !198, size: 64, align: 64)
!198 = !DISubroutineType(types: !199)
!199 = !{!50, !11, !17, !11}
!200 = !DIDerivedType(tag: DW_TAG_member, name: "was_sq_ass_slice", scope: !180, file: !13, line: 287, baseType: !96, size: 64, align: 64, offset: 384)
!201 = !DIDerivedType(tag: DW_TAG_member, name: "sq_contains", scope: !180, file: !13, line: 288, baseType: !202, size: 64, align: 64, offset: 448)
!202 = !DIDerivedType(tag: DW_TAG_typedef, name: "objobjproc", file: !13, line: 231, baseType: !203)
!203 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !204, size: 64, align: 64)
!204 = !DISubroutineType(types: !205)
!205 = !{!50, !11, !11}
!206 = !DIDerivedType(tag: DW_TAG_member, name: "sq_inplace_concat", scope: !180, file: !13, line: 290, baseType: !131, size: 64, align: 64, offset: 512)
!207 = !DIDerivedType(tag: DW_TAG_member, name: "sq_inplace_repeat", scope: !180, file: !13, line: 291, baseType: !189, size: 64, align: 64, offset: 576)
!208 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_mapping", scope: !26, file: !13, line: 352, baseType: !209, size: 64, align: 64, offset: 896)
!209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !210, size: 64, align: 64)
!210 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyMappingMethods", file: !13, line: 298, baseType: !211)
!211 = !DICompositeType(tag: DW_TAG_structure_type, file: !13, line: 294, size: 192, align: 64, elements: !212)
!212 = !{!213, !214, !215}
!213 = !DIDerivedType(tag: DW_TAG_member, name: "mp_length", scope: !211, file: !13, line: 295, baseType: !183, size: 64, align: 64)
!214 = !DIDerivedType(tag: DW_TAG_member, name: "mp_subscript", scope: !211, file: !13, line: 296, baseType: !131, size: 64, align: 64, offset: 64)
!215 = !DIDerivedType(tag: DW_TAG_member, name: "mp_ass_subscript", scope: !211, file: !13, line: 297, baseType: !216, size: 64, align: 64, offset: 128)
!216 = !DIDerivedType(tag: DW_TAG_typedef, name: "objobjargproc", file: !13, line: 174, baseType: !217)
!217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !218, size: 64, align: 64)
!218 = !DISubroutineType(types: !219)
!219 = !{!50, !11, !11, !11}
!220 = !DIDerivedType(tag: DW_TAG_member, name: "tp_hash", scope: !26, file: !13, line: 356, baseType: !221, size: 64, align: 64, offset: 960)
!221 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashfunc", file: !13, line: 321, baseType: !222)
!222 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !223, size: 64, align: 64)
!223 = !DISubroutineType(types: !224)
!224 = !{!225, !11}
!225 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_hash_t", file: !18, line: 186, baseType: !17)
!226 = !DIDerivedType(tag: DW_TAG_member, name: "tp_call", scope: !26, file: !13, line: 357, baseType: !140, size: 64, align: 64, offset: 1024)
!227 = !DIDerivedType(tag: DW_TAG_member, name: "tp_str", scope: !26, file: !13, line: 358, baseType: !121, size: 64, align: 64, offset: 1088)
!228 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getattro", scope: !26, file: !13, line: 359, baseType: !229, size: 64, align: 64, offset: 1152)
!229 = !DIDerivedType(tag: DW_TAG_typedef, name: "getattrofunc", file: !13, line: 317, baseType: !132)
!230 = !DIDerivedType(tag: DW_TAG_member, name: "tp_setattro", scope: !26, file: !13, line: 360, baseType: !231, size: 64, align: 64, offset: 1216)
!231 = !DIDerivedType(tag: DW_TAG_typedef, name: "setattrofunc", file: !13, line: 319, baseType: !217)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_buffer", scope: !26, file: !13, line: 363, baseType: !233, size: 64, align: 64, offset: 1280)
!233 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !234, size: 64, align: 64)
!234 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyBufferProcs", file: !13, line: 304, baseType: !235)
!235 = !DICompositeType(tag: DW_TAG_structure_type, file: !13, line: 301, size: 128, align: 64, elements: !236)
!236 = !{!237, !258}
!237 = !DIDerivedType(tag: DW_TAG_member, name: "bf_getbuffer", scope: !235, file: !13, line: 302, baseType: !238, size: 64, align: 64)
!238 = !DIDerivedType(tag: DW_TAG_typedef, name: "getbufferproc", file: !13, line: 193, baseType: !239)
!239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !240, size: 64, align: 64)
!240 = !DISubroutineType(types: !241)
!241 = !{!50, !11, !242, !50}
!242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !243, size: 64, align: 64)
!243 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_buffer", file: !13, line: 191, baseType: !244)
!244 = !DICompositeType(tag: DW_TAG_structure_type, name: "bufferinfo", file: !13, line: 178, size: 640, align: 64, elements: !245)
!245 = !{!246, !247, !248, !249, !250, !251, !252, !253, !255, !256, !257}
!246 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !244, file: !13, line: 179, baseType: !96, size: 64, align: 64)
!247 = !DIDerivedType(tag: DW_TAG_member, name: "obj", scope: !244, file: !13, line: 180, baseType: !11, size: 64, align: 64, offset: 64)
!248 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !244, file: !13, line: 181, baseType: !17, size: 64, align: 64, offset: 128)
!249 = !DIDerivedType(tag: DW_TAG_member, name: "itemsize", scope: !244, file: !13, line: 182, baseType: !17, size: 64, align: 64, offset: 192)
!250 = !DIDerivedType(tag: DW_TAG_member, name: "readonly", scope: !244, file: !13, line: 184, baseType: !50, size: 32, align: 32, offset: 256)
!251 = !DIDerivedType(tag: DW_TAG_member, name: "ndim", scope: !244, file: !13, line: 185, baseType: !50, size: 32, align: 32, offset: 288)
!252 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !244, file: !13, line: 186, baseType: !58, size: 64, align: 64, offset: 320)
!253 = !DIDerivedType(tag: DW_TAG_member, name: "shape", scope: !244, file: !13, line: 187, baseType: !254, size: 64, align: 64, offset: 384)
!254 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, align: 64)
!255 = !DIDerivedType(tag: DW_TAG_member, name: "strides", scope: !244, file: !13, line: 188, baseType: !254, size: 64, align: 64, offset: 448)
!256 = !DIDerivedType(tag: DW_TAG_member, name: "suboffsets", scope: !244, file: !13, line: 189, baseType: !254, size: 64, align: 64, offset: 512)
!257 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !244, file: !13, line: 190, baseType: !96, size: 64, align: 64, offset: 576)
!258 = !DIDerivedType(tag: DW_TAG_member, name: "bf_releasebuffer", scope: !235, file: !13, line: 303, baseType: !259, size: 64, align: 64, offset: 64)
!259 = !DIDerivedType(tag: DW_TAG_typedef, name: "releasebufferproc", file: !13, line: 194, baseType: !260)
!260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !261, size: 64, align: 64)
!261 = !DISubroutineType(types: !262)
!262 = !{null, !11, !242}
!263 = !DIDerivedType(tag: DW_TAG_member, name: "tp_flags", scope: !26, file: !13, line: 366, baseType: !103, size: 64, align: 64, offset: 1344)
!264 = !DIDerivedType(tag: DW_TAG_member, name: "tp_doc", scope: !26, file: !13, line: 368, baseType: !35, size: 64, align: 64, offset: 1408)
!265 = !DIDerivedType(tag: DW_TAG_member, name: "tp_traverse", scope: !26, file: !13, line: 372, baseType: !266, size: 64, align: 64, offset: 1472)
!266 = !DIDerivedType(tag: DW_TAG_typedef, name: "traverseproc", file: !13, line: 233, baseType: !267)
!267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !268, size: 64, align: 64)
!268 = !DISubroutineType(types: !269)
!269 = !{!50, !11, !270, !96}
!270 = !DIDerivedType(tag: DW_TAG_typedef, name: "visitproc", file: !13, line: 232, baseType: !271)
!271 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !272, size: 64, align: 64)
!272 = !DISubroutineType(types: !273)
!273 = !{!50, !11, !96}
!274 = !DIDerivedType(tag: DW_TAG_member, name: "tp_clear", scope: !26, file: !13, line: 375, baseType: !149, size: 64, align: 64, offset: 1536)
!275 = !DIDerivedType(tag: DW_TAG_member, name: "tp_richcompare", scope: !26, file: !13, line: 379, baseType: !276, size: 64, align: 64, offset: 1600)
!276 = !DIDerivedType(tag: DW_TAG_typedef, name: "richcmpfunc", file: !13, line: 322, baseType: !277)
!277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !278, size: 64, align: 64)
!278 = !DISubroutineType(types: !279)
!279 = !{!11, !11, !11, !50}
!280 = !DIDerivedType(tag: DW_TAG_member, name: "tp_weaklistoffset", scope: !26, file: !13, line: 382, baseType: !17, size: 64, align: 64, offset: 1664)
!281 = !DIDerivedType(tag: DW_TAG_member, name: "tp_iter", scope: !26, file: !13, line: 385, baseType: !282, size: 64, align: 64, offset: 1728)
!282 = !DIDerivedType(tag: DW_TAG_typedef, name: "getiterfunc", file: !13, line: 323, baseType: !122)
!283 = !DIDerivedType(tag: DW_TAG_member, name: "tp_iternext", scope: !26, file: !13, line: 386, baseType: !284, size: 64, align: 64, offset: 1792)
!284 = !DIDerivedType(tag: DW_TAG_typedef, name: "iternextfunc", file: !13, line: 324, baseType: !122)
!285 = !DIDerivedType(tag: DW_TAG_member, name: "tp_methods", scope: !26, file: !13, line: 389, baseType: !286, size: 64, align: 64, offset: 1856)
!286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !287, size: 64, align: 64)
!287 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyMethodDef", file: !288, line: 40, size: 256, align: 64, elements: !289)
!288 = !DIFile(filename: "Include/methodobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!289 = !{!290, !291, !293, !294}
!290 = !DIDerivedType(tag: DW_TAG_member, name: "ml_name", scope: !287, file: !288, line: 41, baseType: !35, size: 64, align: 64)
!291 = !DIDerivedType(tag: DW_TAG_member, name: "ml_meth", scope: !287, file: !288, line: 42, baseType: !292, size: 64, align: 64, offset: 64)
!292 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyCFunction", file: !288, line: 18, baseType: !132)
!293 = !DIDerivedType(tag: DW_TAG_member, name: "ml_flags", scope: !287, file: !288, line: 43, baseType: !50, size: 32, align: 32, offset: 128)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "ml_doc", scope: !287, file: !288, line: 45, baseType: !35, size: 64, align: 64, offset: 192)
!295 = !DIDerivedType(tag: DW_TAG_member, name: "tp_members", scope: !26, file: !13, line: 390, baseType: !296, size: 64, align: 64, offset: 1920)
!296 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !297, size: 64, align: 64)
!297 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyMemberDef", file: !298, line: 18, size: 320, align: 64, elements: !299)
!298 = !DIFile(filename: "Include/structmember.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!299 = !{!300, !301, !302, !303, !304}
!300 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !297, file: !298, line: 19, baseType: !58, size: 64, align: 64)
!301 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !297, file: !298, line: 20, baseType: !50, size: 32, align: 32, offset: 64)
!302 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !297, file: !298, line: 21, baseType: !17, size: 64, align: 64, offset: 128)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !297, file: !298, line: 22, baseType: !50, size: 32, align: 32, offset: 192)
!304 = !DIDerivedType(tag: DW_TAG_member, name: "doc", scope: !297, file: !298, line: 23, baseType: !58, size: 64, align: 64, offset: 256)
!305 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getset", scope: !26, file: !13, line: 391, baseType: !306, size: 64, align: 64, offset: 1984)
!306 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !307, size: 64, align: 64)
!307 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyGetSetDef", file: !308, line: 11, size: 320, align: 64, elements: !309)
!308 = !DIFile(filename: "Include/descrobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!309 = !{!310, !311, !316, !321, !322}
!310 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !307, file: !308, line: 12, baseType: !58, size: 64, align: 64)
!311 = !DIDerivedType(tag: DW_TAG_member, name: "get", scope: !307, file: !308, line: 13, baseType: !312, size: 64, align: 64, offset: 64)
!312 = !DIDerivedType(tag: DW_TAG_typedef, name: "getter", file: !308, line: 8, baseType: !313)
!313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !314, size: 64, align: 64)
!314 = !DISubroutineType(types: !315)
!315 = !{!11, !11, !96}
!316 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !307, file: !308, line: 14, baseType: !317, size: 64, align: 64, offset: 128)
!317 = !DIDerivedType(tag: DW_TAG_typedef, name: "setter", file: !308, line: 9, baseType: !318)
!318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !319, size: 64, align: 64)
!319 = !DISubroutineType(types: !320)
!320 = !{!50, !11, !11, !96}
!321 = !DIDerivedType(tag: DW_TAG_member, name: "doc", scope: !307, file: !308, line: 15, baseType: !58, size: 64, align: 64, offset: 192)
!322 = !DIDerivedType(tag: DW_TAG_member, name: "closure", scope: !307, file: !308, line: 16, baseType: !96, size: 64, align: 64, offset: 256)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "tp_base", scope: !26, file: !13, line: 392, baseType: !25, size: 64, align: 64, offset: 2048)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dict", scope: !26, file: !13, line: 393, baseType: !11, size: 64, align: 64, offset: 2112)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "tp_descr_get", scope: !26, file: !13, line: 394, baseType: !326, size: 64, align: 64, offset: 2176)
!326 = !DIDerivedType(tag: DW_TAG_typedef, name: "descrgetfunc", file: !13, line: 325, baseType: !141)
!327 = !DIDerivedType(tag: DW_TAG_member, name: "tp_descr_set", scope: !26, file: !13, line: 395, baseType: !328, size: 64, align: 64, offset: 2240)
!328 = !DIDerivedType(tag: DW_TAG_typedef, name: "descrsetfunc", file: !13, line: 326, baseType: !217)
!329 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dictoffset", scope: !26, file: !13, line: 396, baseType: !17, size: 64, align: 64, offset: 2304)
!330 = !DIDerivedType(tag: DW_TAG_member, name: "tp_init", scope: !26, file: !13, line: 397, baseType: !331, size: 64, align: 64, offset: 2368)
!331 = !DIDerivedType(tag: DW_TAG_typedef, name: "initproc", file: !13, line: 327, baseType: !217)
!332 = !DIDerivedType(tag: DW_TAG_member, name: "tp_alloc", scope: !26, file: !13, line: 398, baseType: !333, size: 64, align: 64, offset: 2432)
!333 = !DIDerivedType(tag: DW_TAG_typedef, name: "allocfunc", file: !13, line: 329, baseType: !334)
!334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !335, size: 64, align: 64)
!335 = !DISubroutineType(types: !336)
!336 = !{!11, !25, !17}
!337 = !DIDerivedType(tag: DW_TAG_member, name: "tp_new", scope: !26, file: !13, line: 399, baseType: !338, size: 64, align: 64, offset: 2496)
!338 = !DIDerivedType(tag: DW_TAG_typedef, name: "newfunc", file: !13, line: 328, baseType: !339)
!339 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !340, size: 64, align: 64)
!340 = !DISubroutineType(types: !341)
!341 = !{!11, !25, !11, !11}
!342 = !DIDerivedType(tag: DW_TAG_member, name: "tp_free", scope: !26, file: !13, line: 400, baseType: !343, size: 64, align: 64, offset: 2560)
!343 = !DIDerivedType(tag: DW_TAG_typedef, name: "freefunc", file: !13, line: 307, baseType: !344)
!344 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !345, size: 64, align: 64)
!345 = !DISubroutineType(types: !346)
!346 = !{null, !96}
!347 = !DIDerivedType(tag: DW_TAG_member, name: "tp_is_gc", scope: !26, file: !13, line: 401, baseType: !149, size: 64, align: 64, offset: 2624)
!348 = !DIDerivedType(tag: DW_TAG_member, name: "tp_bases", scope: !26, file: !13, line: 402, baseType: !11, size: 64, align: 64, offset: 2688)
!349 = !DIDerivedType(tag: DW_TAG_member, name: "tp_mro", scope: !26, file: !13, line: 403, baseType: !11, size: 64, align: 64, offset: 2752)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "tp_cache", scope: !26, file: !13, line: 404, baseType: !11, size: 64, align: 64, offset: 2816)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "tp_subclasses", scope: !26, file: !13, line: 405, baseType: !11, size: 64, align: 64, offset: 2880)
!352 = !DIDerivedType(tag: DW_TAG_member, name: "tp_weaklist", scope: !26, file: !13, line: 406, baseType: !11, size: 64, align: 64, offset: 2944)
!353 = !DIDerivedType(tag: DW_TAG_member, name: "tp_del", scope: !26, file: !13, line: 407, baseType: !41, size: 64, align: 64, offset: 3008)
!354 = !DIDerivedType(tag: DW_TAG_member, name: "tp_version_tag", scope: !26, file: !13, line: 410, baseType: !355, size: 32, align: 32, offset: 3072)
!355 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!356 = !DIDerivedType(tag: DW_TAG_member, name: "tp_finalize", scope: !26, file: !13, line: 412, baseType: !41, size: 64, align: 64, offset: 3136)
!357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !358, size: 64, align: 64)
!358 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyByteArrayObject", file: !359, line: 30, baseType: !360)
!359 = !DIFile(filename: "Include/bytearrayobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!360 = !DICompositeType(tag: DW_TAG_structure_type, file: !359, line: 23, size: 448, align: 64, elements: !361)
!361 = !{!362, !363, !364, !365, !366}
!362 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !360, file: !359, line: 24, baseType: !29, size: 192, align: 64)
!363 = !DIDerivedType(tag: DW_TAG_member, name: "ob_alloc", scope: !360, file: !359, line: 25, baseType: !17, size: 64, align: 64, offset: 192)
!364 = !DIDerivedType(tag: DW_TAG_member, name: "ob_bytes", scope: !360, file: !359, line: 26, baseType: !58, size: 64, align: 64, offset: 256)
!365 = !DIDerivedType(tag: DW_TAG_member, name: "ob_start", scope: !360, file: !359, line: 27, baseType: !58, size: 64, align: 64, offset: 320)
!366 = !DIDerivedType(tag: DW_TAG_member, name: "ob_exports", scope: !360, file: !359, line: 29, baseType: !50, size: 32, align: 32, offset: 384)
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64, align: 64)
!368 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !370, size: 64, align: 64)
!370 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!371 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_uintptr_t", file: !18, line: 153, baseType: !372)
!372 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !373, line: 122, baseType: !103)
!373 = !DIFile(filename: "/usr/include/stdint.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !375, size: 64, align: 64)
!375 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyTupleObject", file: !376, line: 33, baseType: !377)
!376 = !DIFile(filename: "Include/tupleobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!377 = !DICompositeType(tag: DW_TAG_structure_type, file: !376, line: 25, size: 256, align: 64, elements: !378)
!378 = !{!379, !380}
!379 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !377, file: !376, line: 26, baseType: !29, size: 192, align: 64)
!380 = !DIDerivedType(tag: DW_TAG_member, name: "ob_item", scope: !377, file: !376, line: 27, baseType: !381, size: 64, align: 64, offset: 192)
!381 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 64, align: 64, elements: !88)
!382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !383, size: 64, align: 64)
!383 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyASCIIObject", file: !4, line: 351, baseType: !384)
!384 = !DICompositeType(tag: DW_TAG_structure_type, file: !4, line: 217, size: 384, align: 64, elements: !385)
!385 = !{!386, !387, !388, !389, !397}
!386 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !384, file: !4, line: 291, baseType: !12, size: 128, align: 64)
!387 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !384, file: !4, line: 292, baseType: !17, size: 64, align: 64, offset: 128)
!388 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !384, file: !4, line: 293, baseType: !225, size: 64, align: 64, offset: 192)
!389 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !384, file: !4, line: 349, baseType: !390, size: 32, align: 32, offset: 256)
!390 = !DICompositeType(tag: DW_TAG_structure_type, scope: !384, file: !4, line: 294, size: 32, align: 32, elements: !391)
!391 = !{!392, !393, !394, !395, !396}
!392 = !DIDerivedType(tag: DW_TAG_member, name: "interned", scope: !390, file: !4, line: 303, baseType: !355, size: 2, align: 32)
!393 = !DIDerivedType(tag: DW_TAG_member, name: "kind", scope: !390, file: !4, line: 331, baseType: !355, size: 3, align: 32, offset: 2)
!394 = !DIDerivedType(tag: DW_TAG_member, name: "compact", scope: !390, file: !4, line: 336, baseType: !355, size: 1, align: 32, offset: 5)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "ascii", scope: !390, file: !4, line: 340, baseType: !355, size: 1, align: 32, offset: 6)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "ready", scope: !390, file: !4, line: 345, baseType: !355, size: 1, align: 32, offset: 7)
!397 = !DIDerivedType(tag: DW_TAG_member, name: "wstr", scope: !384, file: !4, line: 350, baseType: !398, size: 64, align: 64, offset: 320)
!398 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !399, size: 64, align: 64)
!399 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !102, line: 90, baseType: !50)
!400 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !401, size: 64, align: 64)
!401 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyCompactUnicodeObject", file: !4, line: 363, baseType: !402)
!402 = !DICompositeType(tag: DW_TAG_structure_type, file: !4, line: 356, size: 576, align: 64, elements: !403)
!403 = !{!404, !405, !406, !407}
!404 = !DIDerivedType(tag: DW_TAG_member, name: "_base", scope: !402, file: !4, line: 357, baseType: !383, size: 384, align: 64)
!405 = !DIDerivedType(tag: DW_TAG_member, name: "utf8_length", scope: !402, file: !4, line: 358, baseType: !17, size: 64, align: 64, offset: 384)
!406 = !DIDerivedType(tag: DW_TAG_member, name: "utf8", scope: !402, file: !4, line: 360, baseType: !58, size: 64, align: 64, offset: 448)
!407 = !DIDerivedType(tag: DW_TAG_member, name: "wstr_length", scope: !402, file: !4, line: 361, baseType: !17, size: 64, align: 64, offset: 512)
!408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !409, size: 64, align: 64)
!409 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyUnicodeObject", file: !4, line: 376, baseType: !410)
!410 = !DICompositeType(tag: DW_TAG_structure_type, file: !4, line: 368, size: 640, align: 64, elements: !411)
!411 = !{!412, !413}
!412 = !DIDerivedType(tag: DW_TAG_member, name: "_base", scope: !410, file: !4, line: 369, baseType: !401, size: 576, align: 64)
!413 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !410, file: !4, line: 375, baseType: !414, size: 64, align: 64, offset: 576)
!414 = !DICompositeType(tag: DW_TAG_union_type, scope: !410, file: !4, line: 370, size: 64, align: 64, elements: !415)
!415 = !{!416, !417, !420, !423}
!416 = !DIDerivedType(tag: DW_TAG_member, name: "any", scope: !414, file: !4, line: 371, baseType: !96, size: 64, align: 64)
!417 = !DIDerivedType(tag: DW_TAG_member, name: "latin1", scope: !414, file: !4, line: 372, baseType: !418, size: 64, align: 64)
!418 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !419, size: 64, align: 64)
!419 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_UCS1", file: !4, line: 134, baseType: !368)
!420 = !DIDerivedType(tag: DW_TAG_member, name: "ucs2", scope: !414, file: !4, line: 373, baseType: !421, size: 64, align: 64)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !422, size: 64, align: 64)
!422 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_UCS2", file: !4, line: 129, baseType: !83)
!423 = !DIDerivedType(tag: DW_TAG_member, name: "ucs4", scope: !414, file: !4, line: 374, baseType: !424, size: 64, align: 64)
!424 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !425, size: 64, align: 64)
!425 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_UCS4", file: !4, line: 121, baseType: !355)
!426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !427, size: 64, align: 64)
!427 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !419)
!428 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !429, size: 64, align: 64)
!429 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !422)
!430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !431, size: 64, align: 64)
!431 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !425)
!432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !433, size: 64, align: 64)
!433 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyListObject", file: !434, line: 40, baseType: !435)
!434 = !DIFile(filename: "Include/listobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!435 = !DICompositeType(tag: DW_TAG_structure_type, file: !434, line: 23, size: 320, align: 64, elements: !436)
!436 = !{!437, !438, !440}
!437 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !435, file: !434, line: 24, baseType: !29, size: 192, align: 64)
!438 = !DIDerivedType(tag: DW_TAG_member, name: "ob_item", scope: !435, file: !434, line: 26, baseType: !439, size: 64, align: 64, offset: 192)
!439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!440 = !DIDerivedType(tag: DW_TAG_member, name: "allocated", scope: !435, file: !434, line: 39, baseType: !17, size: 64, align: 64, offset: 256)
!441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !368, size: 64, align: 64)
!442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !443, size: 64, align: 64)
!443 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyGC_Head", file: !444, line: 253, baseType: !445)
!444 = !DIFile(filename: "Include/objimpl.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!445 = !DICompositeType(tag: DW_TAG_union_type, name: "_gc_head", file: !444, line: 246, size: 192, align: 64, elements: !446)
!446 = !{!447, !454}
!447 = !DIDerivedType(tag: DW_TAG_member, name: "gc", scope: !445, file: !444, line: 251, baseType: !448, size: 192, align: 64)
!448 = !DICompositeType(tag: DW_TAG_structure_type, scope: !445, file: !444, line: 247, size: 192, align: 64, elements: !449)
!449 = !{!450, !452, !453}
!450 = !DIDerivedType(tag: DW_TAG_member, name: "gc_next", scope: !448, file: !444, line: 248, baseType: !451, size: 64, align: 64)
!451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64, align: 64)
!452 = !DIDerivedType(tag: DW_TAG_member, name: "gc_prev", scope: !448, file: !444, line: 249, baseType: !451, size: 64, align: 64, offset: 64)
!453 = !DIDerivedType(tag: DW_TAG_member, name: "gc_refs", scope: !448, file: !444, line: 250, baseType: !17, size: 64, align: 64, offset: 128)
!454 = !DIDerivedType(tag: DW_TAG_member, name: "dummy", scope: !445, file: !444, line: 252, baseType: !455, size: 64, align: 64)
!455 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !457, size: 64, align: 64)
!457 = !DIDerivedType(tag: DW_TAG_typedef, name: "bytesiterobject", file: !458, line: 2954, baseType: !459)
!458 = !DIFile(filename: "Objects/bytearrayobject.c", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!459 = !DICompositeType(tag: DW_TAG_structure_type, file: !458, line: 2950, size: 256, align: 64, elements: !460)
!460 = !{!461, !462, !463}
!461 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !459, file: !458, line: 2951, baseType: !12, size: 128, align: 64)
!462 = !DIDerivedType(tag: DW_TAG_member, name: "it_index", scope: !459, file: !458, line: 2952, baseType: !17, size: 64, align: 64, offset: 128)
!463 = !DIDerivedType(tag: DW_TAG_member, name: "it_seq", scope: !459, file: !458, line: 2953, baseType: !357, size: 64, align: 64, offset: 192)
!464 = !{!465, !469, !472, !475, !489, !492, !497, !507, !515, !520, !527, !532, !550, !555, !569, !573, !581, !598, !611, !624, !633, !644, !671, !692, !701, !711, !732, !771, !774, !783, !789, !801, !804, !807, !818, !823, !827, !833, !838, !847, !856, !859, !862, !875, !888, !907, !916, !923, !934, !947, !967, !1017, !1022, !1037, !1047, !1055, !1063, !1080, !1085, !1090, !1099, !1102, !1105, !1108, !1111, !1114, !1117, !1120, !1124, !1173, !1179, !1183, !1195, !1204, !1208, !1216, !1239, !1247, !1255, !1265, !1275, !1280, !1295, !1311, !1322, !1338, !1353, !1368, !1386, !1404, !1414, !1419, !1424, !1430, !1438, !1458, !1473, !1511, !1548, !1590, !1601, !1608, !1621, !1656, !1692, !1732, !1738, !1762, !1773, !1785, !1789, !1793, !1823, !1827, !1835, !1870, !1882, !1893, !1902, !1906, !1912, !1919}
!465 = !DISubprogram(name: "PyByteArray_Fini", scope: !458, file: !458, line: 11, type: !466, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: true, function: void ()* @PyByteArray_Fini, variables: !468)
!466 = !DISubroutineType(types: !467)
!467 = !{null}
!468 = !{}
!469 = !DISubprogram(name: "PyByteArray_Init", scope: !458, file: !458, line: 16, type: !470, isLocal: false, isDefinition: true, scopeLine: 17, flags: DIFlagPrototyped, isOptimized: true, function: i32 ()* @PyByteArray_Init, variables: !468)
!470 = !DISubroutineType(types: !471)
!471 = !{!50}
!472 = !DISubprogram(name: "PyByteArray_FromObject", scope: !458, file: !458, line: 109, type: !123, isLocal: false, isDefinition: true, scopeLine: 110, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PyByteArray_FromObject, variables: !473)
!473 = !{!474}
!474 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "input", arg: 1, scope: !472, file: !458, line: 109, type: !11)
!475 = !DISubprogram(name: "PyByteArray_FromStringAndSize", scope: !458, file: !458, line: 116, type: !476, isLocal: false, isDefinition: true, scopeLine: 117, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (i8*, i64)* @PyByteArray_FromStringAndSize, variables: !478)
!476 = !DISubroutineType(types: !477)
!477 = !{!11, !35, !17}
!478 = !{!479, !480, !481, !482, !483}
!479 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "bytes", arg: 1, scope: !475, file: !458, line: 116, type: !35)
!480 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "size", arg: 2, scope: !475, file: !458, line: 116, type: !17)
!481 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "new", scope: !475, file: !458, line: 118, type: !357)
!482 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "alloc", scope: !475, file: !458, line: 119, type: !17)
!483 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !484, file: !458, line: 144, type: !11)
!484 = distinct !DILexicalBlock(scope: !485, file: !458, line: 144, column: 16)
!485 = distinct !DILexicalBlock(scope: !486, file: !458, line: 143, column: 42)
!486 = distinct !DILexicalBlock(scope: !487, file: !458, line: 143, column: 13)
!487 = distinct !DILexicalBlock(scope: !488, file: !458, line: 140, column: 10)
!488 = distinct !DILexicalBlock(scope: !475, file: !458, line: 136, column: 9)
!489 = !DISubprogram(name: "PyByteArray_Size", scope: !458, file: !458, line: 160, type: !185, isLocal: false, isDefinition: true, scopeLine: 161, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct._object*)* @PyByteArray_Size, variables: !490)
!490 = !{!491}
!491 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !489, file: !458, line: 160, type: !11)
!492 = !DISubprogram(name: "PyByteArray_AsString", scope: !458, file: !458, line: 169, type: !493, isLocal: false, isDefinition: true, scopeLine: 170, flags: DIFlagPrototyped, isOptimized: true, function: i8* (%struct._object*)* @PyByteArray_AsString, variables: !495)
!493 = !DISubroutineType(types: !494)
!494 = !{!58, !11}
!495 = !{!496}
!496 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !492, file: !458, line: 169, type: !11)
!497 = !DISubprogram(name: "PyByteArray_Resize", scope: !458, file: !458, line: 178, type: !498, isLocal: false, isDefinition: true, scopeLine: 179, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i64)* @PyByteArray_Resize, variables: !500)
!498 = !DISubroutineType(types: !499)
!499 = !{!50, !11, !17}
!500 = !{!501, !502, !503, !504, !505, !506}
!501 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !497, file: !458, line: 178, type: !11)
!502 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "size", arg: 2, scope: !497, file: !458, line: 178, type: !17)
!503 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sval", scope: !497, file: !458, line: 180, type: !96)
!504 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "obj", scope: !497, file: !458, line: 181, type: !357)
!505 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "alloc", scope: !497, file: !458, line: 182, type: !17)
!506 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "logical_offset", scope: !497, file: !458, line: 183, type: !17)
!507 = !DISubprogram(name: "PyByteArray_Concat", scope: !458, file: !458, line: 250, type: !133, isLocal: false, isDefinition: true, scopeLine: 251, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyByteArray_Concat, variables: !508)
!508 = !{!509, !510, !511, !512, !513, !514}
!509 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 1, scope: !507, file: !458, line: 250, type: !11)
!510 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "b", arg: 2, scope: !507, file: !458, line: 250, type: !11)
!511 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !507, file: !458, line: 252, type: !17)
!512 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "va", scope: !507, file: !458, line: 253, type: !243)
!513 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vb", scope: !507, file: !458, line: 253, type: !243)
!514 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !507, file: !458, line: 254, type: !357)
!515 = !DISubprogram(name: "_canresize", scope: !458, file: !458, line: 96, type: !516, isLocal: true, isDefinition: true, scopeLine: 97, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.PyByteArrayObject*)* @_canresize, variables: !518)
!516 = !DISubroutineType(types: !517)
!517 = !{!50, !357}
!518 = !{!519}
!519 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !515, file: !458, line: 96, type: !357)
!520 = !DISubprogram(name: "_getbuffer", scope: !458, file: !458, line: 78, type: !521, isLocal: true, isDefinition: true, scopeLine: 79, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct._object*, %struct.bufferinfo*)* @_getbuffer, variables: !523)
!521 = !DISubroutineType(types: !522)
!522 = !{!17, !11, !242}
!523 = !{!524, !525, !526}
!524 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "obj", arg: 1, scope: !520, file: !458, line: 78, type: !11)
!525 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "view", arg: 2, scope: !520, file: !458, line: 78, type: !242)
!526 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffer", scope: !520, file: !458, line: 80, type: !233)
!527 = !DISubprogram(name: "bytearray_dealloc", scope: !458, file: !458, line: 1058, type: !528, isLocal: true, isDefinition: true, scopeLine: 1059, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct.PyByteArrayObject*)* @bytearray_dealloc, variables: !530)
!528 = !DISubroutineType(types: !529)
!529 = !{null, !357}
!530 = !{!531}
!531 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !527, file: !458, line: 1058, type: !357)
!532 = !DISubprogram(name: "bytearray_repr", scope: !458, file: !458, line: 892, type: !533, isLocal: true, isDefinition: true, scopeLine: 893, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*)* @bytearray_repr, variables: !535)
!533 = !DISubroutineType(types: !534)
!534 = !{!11, !357}
!535 = !{!536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549}
!536 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !532, file: !458, line: 892, type: !357)
!537 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "quote_prefix", scope: !532, file: !458, line: 894, type: !35)
!538 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "quote_postfix", scope: !532, file: !458, line: 895, type: !35)
!539 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "length", scope: !532, file: !458, line: 896, type: !17)
!540 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newsize", scope: !532, file: !458, line: 898, type: !101)
!541 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !532, file: !458, line: 899, type: !11)
!542 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !532, file: !458, line: 900, type: !17)
!543 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bytes", scope: !532, file: !458, line: 901, type: !58)
!544 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c", scope: !532, file: !458, line: 902, type: !37)
!545 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !532, file: !458, line: 903, type: !58)
!546 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "quote", scope: !532, file: !458, line: 904, type: !50)
!547 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "test", scope: !532, file: !458, line: 905, type: !58)
!548 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !532, file: !458, line: 905, type: !58)
!549 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffer", scope: !532, file: !458, line: 906, type: !58)
!550 = !DISubprogram(name: "bytearray_length", scope: !458, file: !458, line: 288, type: !551, isLocal: true, isDefinition: true, scopeLine: 289, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct.PyByteArrayObject*)* @bytearray_length, variables: !553)
!551 = !DISubroutineType(types: !552)
!552 = !{!17, !357}
!553 = !{!554}
!554 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !550, file: !458, line: 288, type: !357)
!555 = !DISubprogram(name: "bytearray_repeat", scope: !458, file: !458, line: 327, type: !556, isLocal: true, isDefinition: true, scopeLine: 328, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, i64)* @bytearray_repeat, variables: !558)
!556 = !DISubroutineType(types: !557)
!557 = !{!11, !357, !17}
!558 = !{!559, !560, !561, !562, !563, !564}
!559 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !555, file: !458, line: 327, type: !357)
!560 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "count", arg: 2, scope: !555, file: !458, line: 327, type: !17)
!561 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !555, file: !458, line: 329, type: !357)
!562 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mysize", scope: !555, file: !458, line: 330, type: !17)
!563 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !555, file: !458, line: 331, type: !17)
!564 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !565, file: !458, line: 344, type: !17)
!565 = distinct !DILexicalBlock(scope: !566, file: !458, line: 343, column: 14)
!566 = distinct !DILexicalBlock(scope: !567, file: !458, line: 341, column: 13)
!567 = distinct !DILexicalBlock(scope: !568, file: !458, line: 340, column: 44)
!568 = distinct !DILexicalBlock(scope: !555, file: !458, line: 340, column: 9)
!569 = !DISubprogram(name: "bytearray_getitem", scope: !458, file: !458, line: 382, type: !556, isLocal: true, isDefinition: true, scopeLine: 383, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, i64)* @bytearray_getitem, variables: !570)
!570 = !{!571, !572}
!571 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !569, file: !458, line: 382, type: !357)
!572 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i", arg: 2, scope: !569, file: !458, line: 382, type: !17)
!573 = !DISubprogram(name: "bytearray_setitem", scope: !458, file: !458, line: 582, type: !574, isLocal: true, isDefinition: true, scopeLine: 583, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.PyByteArrayObject*, i64, %struct._object*)* @bytearray_setitem, variables: !576)
!574 = !DISubroutineType(types: !575)
!575 = !{!50, !357, !17, !11}
!576 = !{!577, !578, !579, !580}
!577 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !573, file: !458, line: 582, type: !357)
!578 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i", arg: 2, scope: !573, file: !458, line: 582, type: !17)
!579 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "value", arg: 3, scope: !573, file: !458, line: 582, type: !11)
!580 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ival", scope: !573, file: !458, line: 584, type: !50)
!581 = !DISubprogram(name: "bytearray_setslice", scope: !458, file: !458, line: 533, type: !582, isLocal: true, isDefinition: true, scopeLine: 535, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.PyByteArrayObject*, i64, i64, %struct._object*)* @bytearray_setslice, variables: !584)
!582 = !DISubroutineType(types: !583)
!583 = !{!50, !357, !17, !17, !11}
!584 = !{!585, !586, !587, !588, !589, !590, !591, !592, !593, !596}
!585 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !581, file: !458, line: 533, type: !357)
!586 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "lo", arg: 2, scope: !581, file: !458, line: 533, type: !17)
!587 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "hi", arg: 3, scope: !581, file: !458, line: 533, type: !17)
!588 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "values", arg: 4, scope: !581, file: !458, line: 534, type: !11)
!589 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "needed", scope: !581, file: !458, line: 536, type: !17)
!590 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bytes", scope: !581, file: !458, line: 537, type: !96)
!591 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vbytes", scope: !581, file: !458, line: 538, type: !243)
!592 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !581, file: !458, line: 539, type: !50)
!593 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "err", scope: !594, file: !458, line: 544, type: !50)
!594 = distinct !DILexicalBlock(scope: !595, file: !458, line: 542, column: 37)
!595 = distinct !DILexicalBlock(scope: !581, file: !458, line: 542, column: 9)
!596 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !597, file: !458, line: 549, type: !11)
!597 = distinct !DILexicalBlock(scope: !594, file: !458, line: 549, column: 12)
!598 = !DISubprogram(name: "bytearray_setslice_linear", scope: !458, file: !458, line: 449, type: !599, isLocal: true, isDefinition: true, scopeLine: 452, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.PyByteArrayObject*, i64, i64, i8*, i64)* @bytearray_setslice_linear, variables: !601)
!599 = !DISubroutineType(types: !600)
!600 = !{!50, !357, !17, !17, !58, !17}
!601 = !{!602, !603, !604, !605, !606, !607, !608, !609, !610}
!602 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !598, file: !458, line: 449, type: !357)
!603 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "lo", arg: 2, scope: !598, file: !458, line: 450, type: !17)
!604 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "hi", arg: 3, scope: !598, file: !458, line: 450, type: !17)
!605 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "bytes", arg: 4, scope: !598, file: !458, line: 451, type: !58)
!606 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "bytes_len", arg: 5, scope: !598, file: !458, line: 451, type: !17)
!607 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "avail", scope: !598, file: !458, line: 453, type: !17)
!608 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !598, file: !458, line: 454, type: !58)
!609 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "growth", scope: !598, file: !458, line: 455, type: !17)
!610 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !598, file: !458, line: 456, type: !50)
!611 = !DISubprogram(name: "_getbytevalue", scope: !458, file: !458, line: 26, type: !612, isLocal: true, isDefinition: true, scopeLine: 27, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i32*)* @_getbytevalue, variables: !615)
!612 = !DISubroutineType(types: !613)
!613 = !{!50, !11, !614}
!614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64, align: 64)
!615 = !{!616, !617, !618, !619, !622}
!616 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 1, scope: !611, file: !458, line: 26, type: !11)
!617 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "value", arg: 2, scope: !611, file: !458, line: 26, type: !614)
!618 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "face_value", scope: !611, file: !458, line: 28, type: !23)
!619 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !620, file: !458, line: 33, type: !11)
!620 = distinct !DILexicalBlock(scope: !621, file: !458, line: 32, column: 12)
!621 = distinct !DILexicalBlock(scope: !611, file: !458, line: 30, column: 9)
!622 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !623, file: !458, line: 40, type: !11)
!623 = distinct !DILexicalBlock(scope: !620, file: !458, line: 40, column: 12)
!624 = !DISubprogram(name: "bytearray_contains", scope: !458, file: !458, line: 1307, type: !204, isLocal: true, isDefinition: true, scopeLine: 1308, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*)* @bytearray_contains, variables: !625)
!625 = !{!626, !627, !628, !629, !632}
!626 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !624, file: !458, line: 1307, type: !11)
!627 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !624, file: !458, line: 1307, type: !11)
!628 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ival", scope: !624, file: !458, line: 1309, type: !17)
!629 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "varg", scope: !630, file: !458, line: 1311, type: !243)
!630 = distinct !DILexicalBlock(scope: !631, file: !458, line: 1310, column: 41)
!631 = distinct !DILexicalBlock(scope: !624, file: !458, line: 1310, column: 9)
!632 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pos", scope: !630, file: !458, line: 1312, type: !17)
!633 = !DISubprogram(name: "stringlib_find", scope: !634, file: !634, line: 8, type: !635, isLocal: true, isDefinition: true, scopeLine: 11, flags: DIFlagPrototyped, isOptimized: true, function: i64 (i8*, i64, i8*, i64, i64)* @stringlib_find, variables: !637)
!634 = !DIFile(filename: "Objects/stringlib/find.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!635 = !DISubroutineType(types: !636)
!636 = !{!17, !35, !17, !35, !17, !17}
!637 = !{!638, !639, !640, !641, !642, !643}
!638 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str", arg: 1, scope: !633, file: !634, line: 8, type: !35)
!639 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_len", arg: 2, scope: !633, file: !634, line: 8, type: !17)
!640 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sub", arg: 3, scope: !633, file: !634, line: 9, type: !35)
!641 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sub_len", arg: 4, scope: !633, file: !634, line: 9, type: !17)
!642 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "offset", arg: 5, scope: !633, file: !634, line: 10, type: !17)
!643 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pos", scope: !633, file: !634, line: 12, type: !17)
!644 = !DISubprogram(name: "fastsearch", scope: !645, file: !645, line: 84, type: !646, isLocal: true, isDefinition: true, scopeLine: 87, flags: DIFlagPrototyped, isOptimized: true, function: i64 (i8*, i64, i8*, i64, i64, i32)* @fastsearch, variables: !648)
!645 = !DIFile(filename: "Objects/stringlib/fastsearch.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!646 = !DISubroutineType(types: !647)
!647 = !{!17, !35, !17, !35, !17, !17, !50}
!648 = !{!649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !667, !670}
!649 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !644, file: !645, line: 84, type: !35)
!650 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 2, scope: !644, file: !645, line: 84, type: !17)
!651 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "p", arg: 3, scope: !644, file: !645, line: 85, type: !35)
!652 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 4, scope: !644, file: !645, line: 85, type: !17)
!653 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 5, scope: !644, file: !645, line: 86, type: !17)
!654 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "mode", arg: 6, scope: !644, file: !645, line: 86, type: !50)
!655 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mask", scope: !644, file: !645, line: 88, type: !103)
!656 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "skip", scope: !644, file: !645, line: 89, type: !17)
!657 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !644, file: !645, line: 89, type: !17)
!658 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !644, file: !645, line: 90, type: !17)
!659 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !644, file: !645, line: 90, type: !17)
!660 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mlast", scope: !644, file: !645, line: 90, type: !17)
!661 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "w", scope: !644, file: !645, line: 90, type: !17)
!662 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "needle", scope: !663, file: !645, line: 109, type: !368)
!663 = distinct !DILexicalBlock(scope: !664, file: !645, line: 106, column: 24)
!664 = distinct !DILexicalBlock(scope: !665, file: !645, line: 102, column: 13)
!665 = distinct !DILexicalBlock(scope: !666, file: !645, line: 98, column: 17)
!666 = distinct !DILexicalBlock(scope: !644, file: !645, line: 98, column: 9)
!667 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ss", scope: !668, file: !645, line: 145, type: !35)
!668 = distinct !DILexicalBlock(scope: !669, file: !645, line: 144, column: 20)
!669 = distinct !DILexicalBlock(scope: !644, file: !645, line: 144, column: 9)
!670 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pp", scope: !668, file: !645, line: 146, type: !35)
!671 = !DISubprogram(name: "stringlib_fastsearch_memchr_1char", scope: !645, file: !645, line: 37, type: !672, isLocal: true, isDefinition: true, scopeLine: 40, flags: DIFlagPrototyped, isOptimized: true, function: i64 (i8*, i64, i8, i8, i64, i32)* @stringlib_fastsearch_memchr_1char, variables: !674)
!672 = !DISubroutineType(types: !673)
!673 = !{!17, !35, !17, !37, !368, !17, !50}
!674 = !{!675, !676, !677, !678, !679, !680, !681, !684, !685, !687, !691}
!675 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !671, file: !645, line: 37, type: !35)
!676 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 2, scope: !671, file: !645, line: 37, type: !17)
!677 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "ch", arg: 3, scope: !671, file: !645, line: 38, type: !37)
!678 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "needle", arg: 4, scope: !671, file: !645, line: 38, type: !368)
!679 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 5, scope: !671, file: !645, line: 39, type: !17)
!680 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "mode", arg: 6, scope: !671, file: !645, line: 39, type: !50)
!681 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ptr", scope: !682, file: !645, line: 42, type: !35)
!682 = distinct !DILexicalBlock(scope: !683, file: !645, line: 41, column: 20)
!683 = distinct !DILexicalBlock(scope: !671, file: !645, line: 41, column: 9)
!684 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "e", scope: !682, file: !645, line: 43, type: !35)
!685 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "candidate", scope: !686, file: !645, line: 45, type: !96)
!686 = distinct !DILexicalBlock(scope: !682, file: !645, line: 44, column: 25)
!687 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "found", scope: !688, file: !645, line: 62, type: !35)
!688 = distinct !DILexicalBlock(scope: !689, file: !645, line: 61, column: 23)
!689 = distinct !DILexicalBlock(scope: !690, file: !645, line: 60, column: 25)
!690 = distinct !DILexicalBlock(scope: !683, file: !645, line: 60, column: 14)
!691 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "candidate", scope: !688, file: !645, line: 63, type: !96)
!692 = !DISubprogram(name: "bytearray_iconcat", scope: !458, file: !458, line: 294, type: !693, isLocal: true, isDefinition: true, scopeLine: 295, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_iconcat, variables: !695)
!693 = !DISubroutineType(types: !694)
!694 = !{!11, !357, !11}
!695 = !{!696, !697, !698, !699, !700}
!696 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !692, file: !458, line: 294, type: !357)
!697 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "other", arg: 2, scope: !692, file: !458, line: 294, type: !11)
!698 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mysize", scope: !692, file: !458, line: 296, type: !17)
!699 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !692, file: !458, line: 297, type: !17)
!700 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vo", scope: !692, file: !458, line: 298, type: !243)
!701 = !DISubprogram(name: "bytearray_irepeat", scope: !458, file: !458, line: 353, type: !556, isLocal: true, isDefinition: true, scopeLine: 354, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, i64)* @bytearray_irepeat, variables: !702)
!702 = !{!703, !704, !705, !706, !707, !708}
!703 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !701, file: !458, line: 353, type: !357)
!704 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "count", arg: 2, scope: !701, file: !458, line: 353, type: !17)
!705 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mysize", scope: !701, file: !458, line: 355, type: !17)
!706 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !701, file: !458, line: 356, type: !17)
!707 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !701, file: !458, line: 357, type: !58)
!708 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !709, file: !458, line: 372, type: !17)
!709 = distinct !DILexicalBlock(scope: !710, file: !458, line: 371, column: 10)
!710 = distinct !DILexicalBlock(scope: !701, file: !458, line: 369, column: 9)
!711 = !DISubprogram(name: "bytearray_subscript", scope: !458, file: !458, line: 394, type: !693, isLocal: true, isDefinition: true, scopeLine: 395, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_subscript, variables: !712)
!712 = !{!713, !714, !715, !718, !721, !722, !723, !724, !725, !726, !730, !731}
!713 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !711, file: !458, line: 394, type: !357)
!714 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "index", arg: 2, scope: !711, file: !458, line: 394, type: !11)
!715 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !716, file: !458, line: 397, type: !17)
!716 = distinct !DILexicalBlock(scope: !717, file: !458, line: 396, column: 115)
!717 = distinct !DILexicalBlock(scope: !711, file: !458, line: 396, column: 9)
!718 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !719, file: !458, line: 412, type: !17)
!719 = distinct !DILexicalBlock(scope: !720, file: !458, line: 411, column: 66)
!720 = distinct !DILexicalBlock(scope: !717, file: !458, line: 411, column: 14)
!721 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "stop", scope: !719, file: !458, line: 412, type: !17)
!722 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "step", scope: !719, file: !458, line: 412, type: !17)
!723 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "slicelength", scope: !719, file: !458, line: 412, type: !17)
!724 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cur", scope: !719, file: !458, line: 412, type: !17)
!725 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !719, file: !458, line: 412, type: !17)
!726 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "source_buf", scope: !727, file: !458, line: 426, type: !58)
!727 = distinct !DILexicalBlock(scope: !728, file: !458, line: 425, column: 14)
!728 = distinct !DILexicalBlock(scope: !729, file: !458, line: 421, column: 18)
!729 = distinct !DILexicalBlock(scope: !719, file: !458, line: 419, column: 13)
!730 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result_buf", scope: !727, file: !458, line: 427, type: !58)
!731 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !727, file: !458, line: 428, type: !11)
!732 = !DISubprogram(name: "bytearray_ass_subscript", scope: !458, file: !458, line: 605, type: !733, isLocal: true, isDefinition: true, scopeLine: 606, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.PyByteArrayObject*, %struct._object*, %struct._object*)* @bytearray_ass_subscript, variables: !735)
!733 = !DISubroutineType(types: !734)
!734 = !{!50, !357, !11, !11}
!735 = !{!736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !749, !752, !756, !758, !763, !764, !768, !770}
!736 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !732, file: !458, line: 605, type: !357)
!737 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "index", arg: 2, scope: !732, file: !458, line: 605, type: !11)
!738 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "values", arg: 3, scope: !732, file: !458, line: 605, type: !11)
!739 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !732, file: !458, line: 607, type: !17)
!740 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "stop", scope: !732, file: !458, line: 607, type: !17)
!741 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "step", scope: !732, file: !458, line: 607, type: !17)
!742 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "slicelen", scope: !732, file: !458, line: 607, type: !17)
!743 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "needed", scope: !732, file: !458, line: 607, type: !17)
!744 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !732, file: !458, line: 608, type: !58)
!745 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bytes", scope: !732, file: !458, line: 608, type: !58)
!746 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !747, file: !458, line: 612, type: !17)
!747 = distinct !DILexicalBlock(scope: !748, file: !458, line: 611, column: 115)
!748 = distinct !DILexicalBlock(scope: !732, file: !458, line: 611, column: 9)
!749 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ival", scope: !750, file: !458, line: 633, type: !50)
!750 = distinct !DILexicalBlock(scope: !751, file: !458, line: 632, column: 14)
!751 = distinct !DILexicalBlock(scope: !747, file: !458, line: 625, column: 13)
!752 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "err", scope: !753, file: !458, line: 657, type: !50)
!753 = distinct !DILexicalBlock(scope: !754, file: !458, line: 656, column: 179)
!754 = distinct !DILexicalBlock(scope: !755, file: !458, line: 656, column: 14)
!755 = distinct !DILexicalBlock(scope: !732, file: !458, line: 652, column: 9)
!756 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !757, file: !458, line: 669, type: !11)
!757 = distinct !DILexicalBlock(scope: !753, file: !458, line: 669, column: 12)
!758 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cur", scope: !759, file: !458, line: 687, type: !101)
!759 = distinct !DILexicalBlock(scope: !760, file: !458, line: 685, column: 26)
!760 = distinct !DILexicalBlock(scope: !761, file: !458, line: 685, column: 13)
!761 = distinct !DILexicalBlock(scope: !762, file: !458, line: 684, column: 10)
!762 = distinct !DILexicalBlock(scope: !732, file: !458, line: 681, column: 9)
!763 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !759, file: !458, line: 688, type: !17)
!764 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "lim", scope: !765, file: !458, line: 704, type: !17)
!765 = distinct !DILexicalBlock(scope: !766, file: !458, line: 703, column: 50)
!766 = distinct !DILexicalBlock(scope: !767, file: !458, line: 702, column: 13)
!767 = distinct !DILexicalBlock(scope: !759, file: !458, line: 702, column: 13)
!768 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !769, file: !458, line: 727, type: !17)
!769 = distinct !DILexicalBlock(scope: !760, file: !458, line: 725, column: 14)
!770 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cur", scope: !769, file: !458, line: 728, type: !101)
!771 = !DISubprogram(name: "bytearray_str", scope: !458, file: !458, line: 975, type: !123, isLocal: true, isDefinition: true, scopeLine: 976, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @bytearray_str, variables: !772)
!772 = !{!773}
!773 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "op", arg: 1, scope: !771, file: !458, line: 975, type: !11)
!774 = !DISubprogram(name: "bytearray_getbuffer", scope: !458, file: !458, line: 55, type: !775, isLocal: true, isDefinition: true, scopeLine: 56, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.PyByteArrayObject*, %struct.bufferinfo*, i32)* @bytearray_getbuffer, variables: !777)
!775 = !DISubroutineType(types: !776)
!776 = !{!50, !357, !242, !50}
!777 = !{!778, !779, !780, !781, !782}
!778 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "obj", arg: 1, scope: !774, file: !458, line: 55, type: !357)
!779 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "view", arg: 2, scope: !774, file: !458, line: 55, type: !242)
!780 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "flags", arg: 3, scope: !774, file: !458, line: 55, type: !50)
!781 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !774, file: !458, line: 57, type: !50)
!782 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ptr", scope: !774, file: !458, line: 58, type: !96)
!783 = !DISubprogram(name: "bytearray_releasebuffer", scope: !458, file: !458, line: 72, type: !784, isLocal: true, isDefinition: true, scopeLine: 73, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct.PyByteArrayObject*, %struct.bufferinfo*)* @bytearray_releasebuffer, variables: !786)
!784 = !DISubroutineType(types: !785)
!785 = !{null, !357, !242}
!786 = !{!787, !788}
!787 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "obj", arg: 1, scope: !783, file: !458, line: 72, type: !357)
!788 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "view", arg: 2, scope: !783, file: !458, line: 72, type: !242)
!789 = !DISubprogram(name: "bytearray_richcompare", scope: !458, file: !458, line: 986, type: !278, isLocal: true, isDefinition: true, scopeLine: 987, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, i32)* @bytearray_richcompare, variables: !790)
!790 = !{!791, !792, !793, !794, !795, !796, !797, !798, !799, !800}
!791 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !789, file: !458, line: 986, type: !11)
!792 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "other", arg: 2, scope: !789, file: !458, line: 986, type: !11)
!793 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "op", arg: 3, scope: !789, file: !458, line: 986, type: !50)
!794 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_size", scope: !789, file: !458, line: 988, type: !17)
!795 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "other_size", scope: !789, file: !458, line: 988, type: !17)
!796 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_bytes", scope: !789, file: !458, line: 989, type: !243)
!797 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "other_bytes", scope: !789, file: !458, line: 989, type: !243)
!798 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !789, file: !458, line: 990, type: !11)
!799 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "minsize", scope: !789, file: !458, line: 991, type: !17)
!800 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmp", scope: !789, file: !458, line: 992, type: !50)
!801 = !DISubprogram(name: "bytearray_alloc", scope: !458, file: !458, line: 2613, type: !533, isLocal: true, isDefinition: true, scopeLine: 2614, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*)* @bytearray_alloc, variables: !802)
!802 = !{!803}
!803 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !801, file: !458, line: 2613, type: !357)
!804 = !DISubprogram(name: "bytearray_reduce", scope: !458, file: !458, line: 2764, type: !533, isLocal: true, isDefinition: true, scopeLine: 2765, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*)* @bytearray_reduce, variables: !805)
!805 = !{!806}
!806 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !804, file: !458, line: 2764, type: !357)
!807 = !DISubprogram(name: "_common_reduce", scope: !458, file: !458, line: 2727, type: !808, isLocal: true, isDefinition: true, scopeLine: 2728, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, i32)* @_common_reduce, variables: !810)
!808 = !DISubroutineType(types: !809)
!809 = !{!11, !357, !50}
!810 = !{!811, !812, !813, !814, !815}
!811 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !807, file: !458, line: 2727, type: !357)
!812 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "proto", arg: 2, scope: !807, file: !458, line: 2727, type: !50)
!813 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dict", scope: !807, file: !458, line: 2729, type: !11)
!814 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !807, file: !458, line: 2731, type: !58)
!815 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "latin1", scope: !816, file: !458, line: 2743, type: !11)
!816 = distinct !DILexicalBlock(scope: !817, file: !458, line: 2741, column: 20)
!817 = distinct !DILexicalBlock(scope: !807, file: !458, line: 2741, column: 9)
!818 = !DISubprogram(name: "bytearray_reduce_ex", scope: !458, file: !458, line: 2772, type: !693, isLocal: true, isDefinition: true, scopeLine: 2773, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_reduce_ex, variables: !819)
!819 = !{!820, !821, !822}
!820 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !818, file: !458, line: 2772, type: !357)
!821 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !818, file: !458, line: 2772, type: !11)
!822 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "proto", scope: !818, file: !458, line: 2774, type: !50)
!823 = !DISubprogram(name: "bytearray_sizeof", scope: !458, file: !458, line: 2787, type: !533, isLocal: true, isDefinition: true, scopeLine: 2788, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*)* @bytearray_sizeof, variables: !824)
!824 = !{!825, !826}
!825 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !823, file: !458, line: 2787, type: !357)
!826 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !823, file: !458, line: 2789, type: !17)
!827 = !DISubprogram(name: "bytearray_append", scope: !458, file: !458, line: 2289, type: !693, isLocal: true, isDefinition: true, scopeLine: 2290, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_append, variables: !828)
!828 = !{!829, !830, !831, !832}
!829 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !827, file: !458, line: 2289, type: !357)
!830 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !827, file: !458, line: 2289, type: !11)
!831 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "value", scope: !827, file: !458, line: 2291, type: !50)
!832 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !827, file: !458, line: 2292, type: !17)
!833 = !DISubprogram(name: "stringlib_capitalize", scope: !834, file: !834, line: 88, type: !123, isLocal: true, isDefinition: true, scopeLine: 89, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @stringlib_capitalize, variables: !835)
!834 = !DIFile(filename: "Objects/stringlib/ctype.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!835 = !{!836, !837}
!836 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !833, file: !834, line: 88, type: !11)
!837 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newobj", scope: !833, file: !834, line: 90, type: !11)
!838 = !DISubprogram(name: "stringlib_center", scope: !839, file: !839, line: 190, type: !133, isLocal: true, isDefinition: true, scopeLine: 191, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @stringlib_center, variables: !840)
!839 = !DIFile(filename: "Objects/stringlib/transmogrify.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!840 = !{!841, !842, !843, !844, !845, !846}
!841 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !838, file: !839, line: 190, type: !11)
!842 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !838, file: !839, line: 190, type: !11)
!843 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "marg", scope: !838, file: !839, line: 192, type: !17)
!844 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "left", scope: !838, file: !839, line: 192, type: !17)
!845 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "width", scope: !838, file: !839, line: 193, type: !17)
!846 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fillchar", scope: !838, file: !839, line: 194, type: !37)
!847 = !DISubprogram(name: "pad", scope: !839, file: !839, line: 87, type: !848, isLocal: true, isDefinition: true, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i64, i64, i8)* @pad, variables: !850)
!848 = !DISubroutineType(types: !849)
!849 = !{!11, !11, !17, !17, !37}
!850 = !{!851, !852, !853, !854, !855}
!851 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !847, file: !839, line: 87, type: !11)
!852 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "left", arg: 2, scope: !847, file: !839, line: 87, type: !17)
!853 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "right", arg: 3, scope: !847, file: !839, line: 87, type: !17)
!854 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fill", arg: 4, scope: !847, file: !839, line: 87, type: !37)
!855 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "u", scope: !847, file: !839, line: 89, type: !11)
!856 = !DISubprogram(name: "bytearray_clear", scope: !458, file: !458, line: 1228, type: !533, isLocal: true, isDefinition: true, scopeLine: 1229, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*)* @bytearray_clear, variables: !857)
!857 = !{!858}
!858 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !856, file: !458, line: 1228, type: !357)
!859 = !DISubprogram(name: "bytearray_copy", scope: !458, file: !458, line: 1241, type: !533, isLocal: true, isDefinition: true, scopeLine: 1242, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*)* @bytearray_copy, variables: !860)
!860 = !{!861}
!861 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !859, file: !458, line: 1241, type: !357)
!862 = !DISubprogram(name: "bytearray_count", scope: !458, file: !458, line: 1183, type: !693, isLocal: true, isDefinition: true, scopeLine: 1184, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_count, variables: !863)
!863 = !{!864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874}
!864 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !862, file: !458, line: 1183, type: !357)
!865 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !862, file: !458, line: 1183, type: !11)
!866 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sub_obj", scope: !862, file: !458, line: 1185, type: !11)
!867 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "str", scope: !862, file: !458, line: 1186, type: !35)
!868 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sub", scope: !862, file: !458, line: 1186, type: !35)
!869 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sub_len", scope: !862, file: !458, line: 1187, type: !17)
!870 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "byte", scope: !862, file: !458, line: 1188, type: !37)
!871 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !862, file: !458, line: 1189, type: !17)
!872 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "end", scope: !862, file: !458, line: 1189, type: !17)
!873 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vsub", scope: !862, file: !458, line: 1191, type: !243)
!874 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count_obj", scope: !862, file: !458, line: 1192, type: !11)
!875 = !DISubprogram(name: "stringlib_parse_args_finds_byte", scope: !634, file: !634, line: 183, type: !876, isLocal: true, isDefinition: true, scopeLine: 186, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i8*, %struct._object*, %struct._object**, i8*, i64*, i64*)* @stringlib_parse_args_finds_byte, variables: !878)
!876 = !DISubroutineType(types: !877)
!877 = !{!50, !35, !11, !439, !58, !254, !254}
!878 = !{!879, !880, !881, !882, !883, !884, !885, !886, !887}
!879 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "function_name", arg: 1, scope: !875, file: !634, line: 183, type: !35)
!880 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !875, file: !634, line: 183, type: !11)
!881 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "subobj", arg: 3, scope: !875, file: !634, line: 184, type: !439)
!882 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "byte", arg: 4, scope: !875, file: !634, line: 184, type: !58)
!883 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "start", arg: 5, scope: !875, file: !634, line: 185, type: !254)
!884 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "end", arg: 6, scope: !875, file: !634, line: 185, type: !254)
!885 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp_subobj", scope: !875, file: !634, line: 187, type: !11)
!886 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ival", scope: !875, file: !634, line: 188, type: !17)
!887 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "err", scope: !875, file: !634, line: 189, type: !11)
!888 = !DISubprogram(name: "stringlib_parse_args_finds", scope: !634, file: !634, line: 105, type: !889, isLocal: true, isDefinition: true, scopeLine: 108, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i8*, %struct._object*, %struct._object**, i64*, i64*)* @stringlib_parse_args_finds, variables: !891)
!889 = !DISubroutineType(types: !890)
!890 = !{!50, !35, !11, !439, !254, !254}
!891 = !{!892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !906}
!892 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "function_name", arg: 1, scope: !888, file: !634, line: 105, type: !35)
!893 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !888, file: !634, line: 105, type: !11)
!894 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "subobj", arg: 3, scope: !888, file: !634, line: 106, type: !439)
!895 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "start", arg: 4, scope: !888, file: !634, line: 107, type: !254)
!896 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "end", arg: 5, scope: !888, file: !634, line: 107, type: !254)
!897 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp_subobj", scope: !888, file: !634, line: 109, type: !11)
!898 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp_start", scope: !888, file: !634, line: 110, type: !17)
!899 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp_end", scope: !888, file: !634, line: 111, type: !17)
!900 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "obj_start", scope: !888, file: !634, line: 112, type: !11)
!901 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "obj_end", scope: !888, file: !634, line: 112, type: !11)
!902 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "format", scope: !888, file: !634, line: 113, type: !903)
!903 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 400, align: 8, elements: !904)
!904 = !{!905}
!905 = !DISubrange(count: 50)
!906 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !888, file: !634, line: 114, type: !101)
!907 = !DISubprogram(name: "stringlib_count", scope: !908, file: !908, line: 8, type: !635, isLocal: true, isDefinition: true, scopeLine: 11, flags: DIFlagPrototyped, isOptimized: true, function: i64 (i8*, i64, i8*, i64, i64)* @stringlib_count, variables: !909)
!908 = !DIFile(filename: "Objects/stringlib/count.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!909 = !{!910, !911, !912, !913, !914, !915}
!910 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str", arg: 1, scope: !907, file: !908, line: 8, type: !35)
!911 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_len", arg: 2, scope: !907, file: !908, line: 8, type: !17)
!912 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sub", arg: 3, scope: !907, file: !908, line: 9, type: !35)
!913 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sub_len", arg: 4, scope: !907, file: !908, line: 9, type: !17)
!914 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 5, scope: !907, file: !908, line: 10, type: !17)
!915 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !907, file: !908, line: 12, type: !17)
!916 = !DISubprogram(name: "bytearray_decode", scope: !458, file: !458, line: 2594, type: !142, isLocal: true, isDefinition: true, scopeLine: 2595, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @bytearray_decode, variables: !917)
!917 = !{!918, !919, !920, !921, !922}
!918 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !916, file: !458, line: 2594, type: !11)
!919 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !916, file: !458, line: 2594, type: !11)
!920 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !916, file: !458, line: 2594, type: !11)
!921 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "encoding", scope: !916, file: !458, line: 2596, type: !35)
!922 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "errors", scope: !916, file: !458, line: 2597, type: !35)
!923 = !DISubprogram(name: "bytearray_endswith", scope: !458, file: !458, line: 1425, type: !693, isLocal: true, isDefinition: true, scopeLine: 1426, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_endswith, variables: !924)
!924 = !{!925, !926, !927, !928, !929, !930, !931}
!925 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !923, file: !458, line: 1425, type: !357)
!926 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !923, file: !458, line: 1425, type: !11)
!927 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !923, file: !458, line: 1427, type: !17)
!928 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "end", scope: !923, file: !458, line: 1428, type: !17)
!929 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "subobj", scope: !923, file: !458, line: 1429, type: !11)
!930 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !923, file: !458, line: 1430, type: !50)
!931 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !932, file: !458, line: 1435, type: !17)
!932 = distinct !DILexicalBlock(scope: !933, file: !458, line: 1434, column: 80)
!933 = distinct !DILexicalBlock(scope: !923, file: !458, line: 1434, column: 9)
!934 = !DISubprogram(name: "_bytearray_tailmatch", scope: !458, file: !458, line: 1335, type: !935, isLocal: true, isDefinition: true, scopeLine: 1337, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.PyByteArrayObject*, %struct._object*, i64, i64, i32)* @_bytearray_tailmatch, variables: !937)
!935 = !DISubroutineType(types: !936)
!936 = !{!50, !357, !11, !17, !17, !50}
!937 = !{!938, !939, !940, !941, !942, !943, !944, !945, !946}
!938 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !934, file: !458, line: 1335, type: !357)
!939 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "substr", arg: 2, scope: !934, file: !458, line: 1335, type: !11)
!940 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "start", arg: 3, scope: !934, file: !458, line: 1335, type: !17)
!941 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "end", arg: 4, scope: !934, file: !458, line: 1336, type: !17)
!942 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "direction", arg: 5, scope: !934, file: !458, line: 1336, type: !50)
!943 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !934, file: !458, line: 1338, type: !17)
!944 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "str", scope: !934, file: !458, line: 1339, type: !35)
!945 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vsubstr", scope: !934, file: !458, line: 1340, type: !243)
!946 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rv", scope: !934, file: !458, line: 1341, type: !50)
!947 = !DISubprogram(name: "stringlib_expandtabs", scope: !839, file: !839, line: 14, type: !142, isLocal: true, isDefinition: true, scopeLine: 15, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @stringlib_expandtabs, variables: !948)
!948 = !{!949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959}
!949 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !947, file: !839, line: 14, type: !11)
!950 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !947, file: !839, line: 14, type: !11)
!951 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwds", arg: 3, scope: !947, file: !839, line: 14, type: !11)
!952 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "e", scope: !947, file: !839, line: 16, type: !35)
!953 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !947, file: !839, line: 16, type: !35)
!954 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "q", scope: !947, file: !839, line: 17, type: !58)
!955 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !947, file: !839, line: 18, type: !17)
!956 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !947, file: !839, line: 18, type: !17)
!957 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "u", scope: !947, file: !839, line: 19, type: !11)
!958 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tabsize", scope: !947, file: !839, line: 21, type: !50)
!959 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "incr", scope: !960, file: !839, line: 33, type: !17)
!960 = distinct !DILexicalBlock(scope: !961, file: !839, line: 32, column: 30)
!961 = distinct !DILexicalBlock(scope: !962, file: !839, line: 32, column: 17)
!962 = distinct !DILexicalBlock(scope: !963, file: !839, line: 31, column: 25)
!963 = distinct !DILexicalBlock(scope: !964, file: !839, line: 31, column: 13)
!964 = distinct !DILexicalBlock(scope: !965, file: !839, line: 30, column: 147)
!965 = distinct !DILexicalBlock(scope: !966, file: !839, line: 30, column: 5)
!966 = distinct !DILexicalBlock(scope: !947, file: !839, line: 30, column: 5)
!967 = !DISubprogram(name: "bytearray_extend", scope: !458, file: !458, line: 2315, type: !693, isLocal: true, isDefinition: true, scopeLine: 2316, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_extend, variables: !968)
!968 = !{!969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !982, !986, !991, !993, !995, !997, !1003, !1005, !1007, !1011, !1015}
!969 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !967, file: !458, line: 2315, type: !357)
!970 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !967, file: !458, line: 2315, type: !11)
!971 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it", scope: !967, file: !458, line: 2317, type: !11)
!972 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !967, file: !458, line: 2317, type: !11)
!973 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bytearray_obj", scope: !967, file: !458, line: 2317, type: !11)
!974 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf_size", scope: !967, file: !458, line: 2318, type: !17)
!975 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !967, file: !458, line: 2318, type: !17)
!976 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "value", scope: !967, file: !458, line: 2319, type: !50)
!977 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !967, file: !458, line: 2320, type: !58)
!978 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !979, file: !458, line: 2337, type: !11)
!979 = distinct !DILexicalBlock(scope: !980, file: !458, line: 2337, column: 12)
!980 = distinct !DILexicalBlock(scope: !981, file: !458, line: 2336, column: 25)
!981 = distinct !DILexicalBlock(scope: !967, file: !458, line: 2336, column: 9)
!982 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !983, file: !458, line: 2343, type: !11)
!983 = distinct !DILexicalBlock(scope: !984, file: !458, line: 2343, column: 12)
!984 = distinct !DILexicalBlock(scope: !985, file: !458, line: 2342, column: 38)
!985 = distinct !DILexicalBlock(scope: !967, file: !458, line: 2342, column: 9)
!986 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !987, file: !458, line: 2350, type: !11)
!987 = distinct !DILexicalBlock(scope: !988, file: !458, line: 2350, column: 16)
!988 = distinct !DILexicalBlock(scope: !989, file: !458, line: 2349, column: 44)
!989 = distinct !DILexicalBlock(scope: !990, file: !458, line: 2349, column: 13)
!990 = distinct !DILexicalBlock(scope: !967, file: !458, line: 2348, column: 52)
!991 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !992, file: !458, line: 2351, type: !11)
!992 = distinct !DILexicalBlock(scope: !988, file: !458, line: 2351, column: 16)
!993 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !994, file: !458, line: 2352, type: !11)
!994 = distinct !DILexicalBlock(scope: !988, file: !458, line: 2352, column: 16)
!995 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !996, file: !458, line: 2356, type: !11)
!996 = distinct !DILexicalBlock(scope: !990, file: !458, line: 2356, column: 12)
!997 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !998, file: !458, line: 2361, type: !11)
!998 = distinct !DILexicalBlock(scope: !999, file: !458, line: 2361, column: 20)
!999 = distinct !DILexicalBlock(scope: !1000, file: !458, line: 2360, column: 78)
!1000 = distinct !DILexicalBlock(scope: !1001, file: !458, line: 2360, column: 17)
!1001 = distinct !DILexicalBlock(scope: !1002, file: !458, line: 2358, column: 30)
!1002 = distinct !DILexicalBlock(scope: !990, file: !458, line: 2358, column: 13)
!1003 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1004, file: !458, line: 2362, type: !11)
!1004 = distinct !DILexicalBlock(scope: !999, file: !458, line: 2362, column: 20)
!1005 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1006, file: !458, line: 2370, type: !11)
!1006 = distinct !DILexicalBlock(scope: !967, file: !458, line: 2370, column: 8)
!1007 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1008, file: !458, line: 2374, type: !11)
!1008 = distinct !DILexicalBlock(scope: !1009, file: !458, line: 2374, column: 12)
!1009 = distinct !DILexicalBlock(scope: !1010, file: !458, line: 2373, column: 65)
!1010 = distinct !DILexicalBlock(scope: !967, file: !458, line: 2373, column: 9)
!1011 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1012, file: !458, line: 2379, type: !11)
!1012 = distinct !DILexicalBlock(scope: !1013, file: !458, line: 2379, column: 12)
!1013 = distinct !DILexicalBlock(scope: !1014, file: !458, line: 2378, column: 126)
!1014 = distinct !DILexicalBlock(scope: !967, file: !458, line: 2378, column: 9)
!1015 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1016, file: !458, line: 2382, type: !11)
!1016 = distinct !DILexicalBlock(scope: !967, file: !458, line: 2382, column: 8)
!1017 = !DISubprogram(name: "bytearray_find", scope: !458, file: !458, line: 1167, type: !693, isLocal: true, isDefinition: true, scopeLine: 1168, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_find, variables: !1018)
!1018 = !{!1019, !1020, !1021}
!1019 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1017, file: !458, line: 1167, type: !357)
!1020 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1017, file: !458, line: 1167, type: !11)
!1021 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1017, file: !458, line: 1169, type: !17)
!1022 = !DISubprogram(name: "bytearray_find_internal", scope: !458, file: !458, line: 1116, type: !1023, isLocal: true, isDefinition: true, scopeLine: 1117, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct.PyByteArrayObject*, %struct._object*, i32)* @bytearray_find_internal, variables: !1025)
!1023 = !DISubroutineType(types: !1024)
!1024 = !{!17, !357, !11, !50}
!1025 = !{!1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036}
!1026 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1022, file: !458, line: 1116, type: !357)
!1027 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1022, file: !458, line: 1116, type: !11)
!1028 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dir", arg: 3, scope: !1022, file: !458, line: 1116, type: !50)
!1029 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "subobj", scope: !1022, file: !458, line: 1118, type: !11)
!1030 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "byte", scope: !1022, file: !458, line: 1119, type: !37)
!1031 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "subbuf", scope: !1022, file: !458, line: 1120, type: !243)
!1032 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sub", scope: !1022, file: !458, line: 1121, type: !35)
!1033 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sub_len", scope: !1022, file: !458, line: 1122, type: !17)
!1034 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !1022, file: !458, line: 1123, type: !17)
!1035 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "end", scope: !1022, file: !458, line: 1123, type: !17)
!1036 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1022, file: !458, line: 1124, type: !17)
!1037 = !DISubprogram(name: "stringlib_find_slice", scope: !634, file: !634, line: 63, type: !1038, isLocal: true, isDefinition: true, scopeLine: 66, flags: DIFlagPrototyped, isOptimized: true, function: i64 (i8*, i64, i8*, i64, i64, i64)* @stringlib_find_slice, variables: !1040)
!1038 = !DISubroutineType(types: !1039)
!1039 = !{!17, !35, !17, !35, !17, !17, !17}
!1040 = !{!1041, !1042, !1043, !1044, !1045, !1046}
!1041 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str", arg: 1, scope: !1037, file: !634, line: 63, type: !35)
!1042 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_len", arg: 2, scope: !1037, file: !634, line: 63, type: !17)
!1043 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sub", arg: 3, scope: !1037, file: !634, line: 64, type: !35)
!1044 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sub_len", arg: 4, scope: !1037, file: !634, line: 64, type: !17)
!1045 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "start", arg: 5, scope: !1037, file: !634, line: 65, type: !17)
!1046 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "end", arg: 6, scope: !1037, file: !634, line: 65, type: !17)
!1047 = !DISubprogram(name: "stringlib_rfind_slice", scope: !634, file: !634, line: 72, type: !1038, isLocal: true, isDefinition: true, scopeLine: 75, flags: DIFlagPrototyped, isOptimized: true, function: i64 (i8*, i64, i8*, i64, i64, i64)* @stringlib_rfind_slice, variables: !1048)
!1048 = !{!1049, !1050, !1051, !1052, !1053, !1054}
!1049 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str", arg: 1, scope: !1047, file: !634, line: 72, type: !35)
!1050 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_len", arg: 2, scope: !1047, file: !634, line: 72, type: !17)
!1051 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sub", arg: 3, scope: !1047, file: !634, line: 73, type: !35)
!1052 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sub_len", arg: 4, scope: !1047, file: !634, line: 73, type: !17)
!1053 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "start", arg: 5, scope: !1047, file: !634, line: 74, type: !17)
!1054 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "end", arg: 6, scope: !1047, file: !634, line: 74, type: !17)
!1055 = !DISubprogram(name: "stringlib_rfind", scope: !634, file: !634, line: 28, type: !635, isLocal: true, isDefinition: true, scopeLine: 31, flags: DIFlagPrototyped, isOptimized: true, function: i64 (i8*, i64, i8*, i64, i64)* @stringlib_rfind, variables: !1056)
!1056 = !{!1057, !1058, !1059, !1060, !1061, !1062}
!1057 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str", arg: 1, scope: !1055, file: !634, line: 28, type: !35)
!1058 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_len", arg: 2, scope: !1055, file: !634, line: 28, type: !17)
!1059 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sub", arg: 3, scope: !1055, file: !634, line: 29, type: !35)
!1060 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sub_len", arg: 4, scope: !1055, file: !634, line: 29, type: !17)
!1061 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "offset", arg: 5, scope: !1055, file: !634, line: 30, type: !17)
!1062 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pos", scope: !1055, file: !634, line: 32, type: !17)
!1063 = !DISubprogram(name: "bytearray_fromhex", scope: !458, file: !458, line: 2677, type: !133, isLocal: true, isDefinition: true, scopeLine: 2678, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @bytearray_fromhex, variables: !1064)
!1064 = !{!1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078}
!1065 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cls", arg: 1, scope: !1063, file: !458, line: 2677, type: !11)
!1066 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1063, file: !458, line: 2677, type: !11)
!1067 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newbytes", scope: !1063, file: !458, line: 2679, type: !11)
!1068 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hexobj", scope: !1063, file: !458, line: 2679, type: !11)
!1069 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1063, file: !458, line: 2680, type: !58)
!1070 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hexlen", scope: !1063, file: !458, line: 2681, type: !17)
!1071 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "byteslen", scope: !1063, file: !458, line: 2681, type: !17)
!1072 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1063, file: !458, line: 2681, type: !17)
!1073 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !1063, file: !458, line: 2681, type: !17)
!1074 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "top", scope: !1063, file: !458, line: 2682, type: !50)
!1075 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bot", scope: !1063, file: !458, line: 2682, type: !50)
!1076 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "data", scope: !1063, file: !458, line: 2683, type: !96)
!1077 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "kind", scope: !1063, file: !458, line: 2684, type: !355)
!1078 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1079, file: !458, line: 2721, type: !11)
!1079 = distinct !DILexicalBlock(scope: !1063, file: !458, line: 2721, column: 8)
!1080 = !DISubprogram(name: "hex_digit_to_int", scope: !458, file: !458, line: 2661, type: !1081, isLocal: true, isDefinition: true, scopeLine: 2662, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i32)* @hex_digit_to_int, variables: !1083)
!1081 = !DISubroutineType(types: !1082)
!1082 = !{!50, !425}
!1083 = !{!1084}
!1084 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "c", arg: 1, scope: !1080, file: !458, line: 2661, type: !425)
!1085 = !DISubprogram(name: "bytearray_index", scope: !458, file: !458, line: 1253, type: !693, isLocal: true, isDefinition: true, scopeLine: 1254, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_index, variables: !1086)
!1086 = !{!1087, !1088, !1089}
!1087 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1085, file: !458, line: 1253, type: !357)
!1088 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1085, file: !458, line: 1253, type: !11)
!1089 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1085, file: !458, line: 1255, type: !17)
!1090 = !DISubprogram(name: "bytearray_insert", scope: !458, file: !458, line: 2250, type: !693, isLocal: true, isDefinition: true, scopeLine: 2251, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_insert, variables: !1091)
!1091 = !{!1092, !1093, !1094, !1095, !1096, !1097, !1098}
!1092 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1090, file: !458, line: 2250, type: !357)
!1093 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1090, file: !458, line: 2250, type: !11)
!1094 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "value", scope: !1090, file: !458, line: 2252, type: !11)
!1095 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ival", scope: !1090, file: !458, line: 2253, type: !50)
!1096 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "where", scope: !1090, file: !458, line: 2254, type: !17)
!1097 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1090, file: !458, line: 2254, type: !17)
!1098 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1090, file: !458, line: 2255, type: !58)
!1099 = !DISubprogram(name: "stringlib_isalnum", scope: !834, file: !834, line: 19, type: !123, isLocal: true, isDefinition: true, scopeLine: 20, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @stringlib_isalnum, variables: !1100)
!1100 = !{!1101}
!1101 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1099, file: !834, line: 19, type: !11)
!1102 = !DISubprogram(name: "stringlib_isalpha", scope: !834, file: !834, line: 13, type: !123, isLocal: true, isDefinition: true, scopeLine: 14, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @stringlib_isalpha, variables: !1103)
!1103 = !{!1104}
!1104 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1102, file: !834, line: 13, type: !11)
!1105 = !DISubprogram(name: "stringlib_isdigit", scope: !834, file: !834, line: 25, type: !123, isLocal: true, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @stringlib_isdigit, variables: !1106)
!1106 = !{!1107}
!1107 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1105, file: !834, line: 25, type: !11)
!1108 = !DISubprogram(name: "stringlib_islower", scope: !834, file: !834, line: 31, type: !123, isLocal: true, isDefinition: true, scopeLine: 32, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @stringlib_islower, variables: !1109)
!1109 = !{!1110}
!1110 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1108, file: !834, line: 31, type: !11)
!1111 = !DISubprogram(name: "stringlib_isspace", scope: !834, file: !834, line: 7, type: !123, isLocal: true, isDefinition: true, scopeLine: 8, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @stringlib_isspace, variables: !1112)
!1112 = !{!1113}
!1113 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1111, file: !834, line: 7, type: !11)
!1114 = !DISubprogram(name: "stringlib_istitle", scope: !834, file: !834, line: 43, type: !123, isLocal: true, isDefinition: true, scopeLine: 44, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @stringlib_istitle, variables: !1115)
!1115 = !{!1116}
!1116 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1114, file: !834, line: 43, type: !11)
!1117 = !DISubprogram(name: "stringlib_isupper", scope: !834, file: !834, line: 37, type: !123, isLocal: true, isDefinition: true, scopeLine: 38, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @stringlib_isupper, variables: !1118)
!1118 = !{!1119}
!1119 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1117, file: !834, line: 37, type: !11)
!1120 = !DISubprogram(name: "bytearray_join", scope: !458, file: !458, line: 2625, type: !133, isLocal: true, isDefinition: true, scopeLine: 2626, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @bytearray_join, variables: !1121)
!1121 = !{!1122, !1123}
!1122 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1120, file: !458, line: 2625, type: !11)
!1123 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "iterable", arg: 2, scope: !1120, file: !458, line: 2625, type: !11)
!1124 = !DISubprogram(name: "stringlib_bytes_join", scope: !1125, file: !1125, line: 8, type: !133, isLocal: true, isDefinition: true, scopeLine: 9, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @stringlib_bytes_join, variables: !1126)
!1125 = !DIFile(filename: "Objects/stringlib/join.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!1126 = !{!1127, !1128, !1129, !1130, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1145, !1149, !1155, !1159, !1165, !1166, !1170, !1171}
!1127 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sep", arg: 1, scope: !1124, file: !1125, line: 8, type: !11)
!1128 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "iterable", arg: 2, scope: !1124, file: !1125, line: 8, type: !11)
!1129 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sepstr", scope: !1124, file: !1125, line: 10, type: !58)
!1130 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "seplen", scope: !1124, file: !1125, line: 11, type: !1131)
!1131 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !17)
!1132 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1124, file: !1125, line: 12, type: !11)
!1133 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !1124, file: !1125, line: 13, type: !58)
!1134 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "seqlen", scope: !1124, file: !1125, line: 14, type: !17)
!1135 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sz", scope: !1124, file: !1125, line: 15, type: !17)
!1136 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1124, file: !1125, line: 16, type: !17)
!1137 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "nbufs", scope: !1124, file: !1125, line: 16, type: !17)
!1138 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "seq", scope: !1124, file: !1125, line: 17, type: !11)
!1139 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !1124, file: !1125, line: 17, type: !11)
!1140 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffers", scope: !1124, file: !1125, line: 18, type: !242)
!1141 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "static_buffers", scope: !1124, file: !1125, line: 20, type: !1142)
!1142 = !DICompositeType(tag: DW_TAG_array_type, baseType: !243, size: 6400, align: 64, elements: !1143)
!1143 = !{!1144}
!1144 = !DISubrange(count: 10)
!1145 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1146, file: !1125, line: 29, type: !11)
!1146 = distinct !DILexicalBlock(scope: !1147, file: !1125, line: 29, column: 12)
!1147 = distinct !DILexicalBlock(scope: !1148, file: !1125, line: 28, column: 22)
!1148 = distinct !DILexicalBlock(scope: !1124, file: !1125, line: 28, column: 9)
!1149 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1150, file: !1125, line: 45, type: !11)
!1150 = distinct !DILexicalBlock(scope: !1151, file: !1125, line: 45, column: 16)
!1151 = distinct !DILexicalBlock(scope: !1152, file: !1125, line: 44, column: 36)
!1152 = distinct !DILexicalBlock(scope: !1153, file: !1125, line: 44, column: 13)
!1153 = distinct !DILexicalBlock(scope: !1154, file: !1125, line: 42, column: 22)
!1154 = distinct !DILexicalBlock(scope: !1124, file: !1125, line: 42, column: 9)
!1155 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "itemlen", scope: !1156, file: !1125, line: 59, type: !17)
!1156 = distinct !DILexicalBlock(scope: !1157, file: !1125, line: 58, column: 45)
!1157 = distinct !DILexicalBlock(scope: !1158, file: !1125, line: 58, column: 5)
!1158 = distinct !DILexicalBlock(scope: !1124, file: !1125, line: 58, column: 5)
!1159 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1160, file: !1125, line: 101, type: !17)
!1160 = distinct !DILexicalBlock(scope: !1161, file: !1125, line: 100, column: 37)
!1161 = distinct !DILexicalBlock(scope: !1162, file: !1125, line: 100, column: 9)
!1162 = distinct !DILexicalBlock(scope: !1163, file: !1125, line: 100, column: 9)
!1163 = distinct !DILexicalBlock(scope: !1164, file: !1125, line: 98, column: 18)
!1164 = distinct !DILexicalBlock(scope: !1124, file: !1125, line: 98, column: 9)
!1165 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "q", scope: !1160, file: !1125, line: 102, type: !58)
!1166 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1167, file: !1125, line: 109, type: !17)
!1167 = distinct !DILexicalBlock(scope: !1168, file: !1125, line: 108, column: 33)
!1168 = distinct !DILexicalBlock(scope: !1169, file: !1125, line: 108, column: 5)
!1169 = distinct !DILexicalBlock(scope: !1124, file: !1125, line: 108, column: 5)
!1170 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "q", scope: !1167, file: !1125, line: 110, type: !58)
!1171 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1172, file: !1125, line: 125, type: !11)
!1172 = distinct !DILexicalBlock(scope: !1124, file: !1125, line: 125, column: 8)
!1173 = !DISubprogram(name: "stringlib_ljust", scope: !839, file: !839, line: 130, type: !133, isLocal: true, isDefinition: true, scopeLine: 131, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @stringlib_ljust, variables: !1174)
!1174 = !{!1175, !1176, !1177, !1178}
!1175 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1173, file: !839, line: 130, type: !11)
!1176 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1173, file: !839, line: 130, type: !11)
!1177 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "width", scope: !1173, file: !839, line: 132, type: !17)
!1178 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fillchar", scope: !1173, file: !839, line: 133, type: !37)
!1179 = !DISubprogram(name: "stringlib_lower", scope: !834, file: !834, line: 52, type: !123, isLocal: true, isDefinition: true, scopeLine: 53, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @stringlib_lower, variables: !1180)
!1180 = !{!1181, !1182}
!1181 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1179, file: !834, line: 52, type: !11)
!1182 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newobj", scope: !1179, file: !834, line: 54, type: !11)
!1183 = !DISubprogram(name: "bytearray_lstrip", scope: !458, file: !458, line: 2523, type: !693, isLocal: true, isDefinition: true, scopeLine: 2524, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_lstrip, variables: !1184)
!1184 = !{!1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194}
!1185 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1183, file: !458, line: 2523, type: !357)
!1186 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1183, file: !458, line: 2523, type: !11)
!1187 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "left", scope: !1183, file: !458, line: 2525, type: !17)
!1188 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "right", scope: !1183, file: !458, line: 2525, type: !17)
!1189 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mysize", scope: !1183, file: !458, line: 2525, type: !17)
!1190 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argsize", scope: !1183, file: !458, line: 2525, type: !17)
!1191 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "myptr", scope: !1183, file: !458, line: 2526, type: !58)
!1192 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argptr", scope: !1183, file: !458, line: 2526, type: !58)
!1193 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "arg", scope: !1183, file: !458, line: 2527, type: !11)
!1194 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "varg", scope: !1183, file: !458, line: 2528, type: !243)
!1195 = !DISubprogram(name: "lstrip_helper", scope: !458, file: !458, line: 2460, type: !1196, isLocal: true, isDefinition: true, scopeLine: 2462, flags: DIFlagPrototyped, isOptimized: true, function: i64 (i8*, i64, i8*, i64)* @lstrip_helper, variables: !1198)
!1196 = !DISubroutineType(types: !1197)
!1197 = !{!17, !58, !17, !96, !17}
!1198 = !{!1199, !1200, !1201, !1202, !1203}
!1199 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "myptr", arg: 1, scope: !1195, file: !458, line: 2460, type: !58)
!1200 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "mysize", arg: 2, scope: !1195, file: !458, line: 2460, type: !17)
!1201 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argptr", arg: 3, scope: !1195, file: !458, line: 2461, type: !96)
!1202 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argsize", arg: 4, scope: !1195, file: !458, line: 2461, type: !17)
!1203 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1195, file: !458, line: 2463, type: !17)
!1204 = !DISubprogram(name: "bytearray_maketrans", scope: !458, file: !458, line: 1563, type: !133, isLocal: true, isDefinition: true, scopeLine: 1564, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @bytearray_maketrans, variables: !1205)
!1205 = !{!1206, !1207}
!1206 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "null", arg: 1, scope: !1204, file: !458, line: 1563, type: !11)
!1207 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1204, file: !458, line: 1563, type: !11)
!1208 = !DISubprogram(name: "bytearray_partition", scope: !458, file: !458, line: 2136, type: !693, isLocal: true, isDefinition: true, scopeLine: 2137, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_partition, variables: !1209)
!1209 = !{!1210, !1211, !1212, !1213, !1214}
!1210 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1208, file: !458, line: 2136, type: !357)
!1211 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sep_obj", arg: 2, scope: !1208, file: !458, line: 2136, type: !11)
!1212 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bytesep", scope: !1208, file: !458, line: 2138, type: !11)
!1213 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1208, file: !458, line: 2138, type: !11)
!1214 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1215, file: !458, line: 2151, type: !11)
!1215 = distinct !DILexicalBlock(scope: !1208, file: !458, line: 2151, column: 8)
!1216 = !DISubprogram(name: "stringlib_partition", scope: !1217, file: !1217, line: 8, type: !1218, isLocal: true, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*, i64, %struct._object*, i8*, i64)* @stringlib_partition, variables: !1220)
!1217 = !DIFile(filename: "Objects/stringlib/partition.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!1218 = !DISubroutineType(types: !1219)
!1219 = !{!11, !11, !35, !17, !11, !35, !17}
!1220 = !{!1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1235}
!1221 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_obj", arg: 1, scope: !1216, file: !1217, line: 8, type: !11)
!1222 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str", arg: 2, scope: !1216, file: !1217, line: 9, type: !35)
!1223 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_len", arg: 3, scope: !1216, file: !1217, line: 9, type: !17)
!1224 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sep_obj", arg: 4, scope: !1216, file: !1217, line: 10, type: !11)
!1225 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sep", arg: 5, scope: !1216, file: !1217, line: 11, type: !35)
!1226 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sep_len", arg: 6, scope: !1216, file: !1217, line: 11, type: !17)
!1227 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "out", scope: !1216, file: !1217, line: 13, type: !11)
!1228 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pos", scope: !1216, file: !1217, line: 14, type: !17)
!1229 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1230, file: !1217, line: 34, type: !11)
!1230 = distinct !DILexicalBlock(scope: !1231, file: !1217, line: 34, column: 16)
!1231 = distinct !DILexicalBlock(scope: !1232, file: !1217, line: 33, column: 31)
!1232 = distinct !DILexicalBlock(scope: !1233, file: !1217, line: 33, column: 13)
!1233 = distinct !DILexicalBlock(scope: !1234, file: !1217, line: 27, column: 18)
!1234 = distinct !DILexicalBlock(scope: !1216, file: !1217, line: 27, column: 9)
!1235 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1236, file: !1217, line: 55, type: !11)
!1236 = distinct !DILexicalBlock(scope: !1237, file: !1217, line: 55, column: 12)
!1237 = distinct !DILexicalBlock(scope: !1238, file: !1217, line: 54, column: 27)
!1238 = distinct !DILexicalBlock(scope: !1216, file: !1217, line: 54, column: 9)
!1239 = !DISubprogram(name: "bytearray_pop", scope: !458, file: !458, line: 2393, type: !693, isLocal: true, isDefinition: true, scopeLine: 2394, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_pop, variables: !1240)
!1240 = !{!1241, !1242, !1243, !1244, !1245, !1246}
!1241 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1239, file: !458, line: 2393, type: !357)
!1242 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1239, file: !458, line: 2393, type: !11)
!1243 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "value", scope: !1239, file: !458, line: 2395, type: !50)
!1244 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "where", scope: !1239, file: !458, line: 2396, type: !17)
!1245 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1239, file: !458, line: 2396, type: !17)
!1246 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1239, file: !458, line: 2397, type: !58)
!1247 = !DISubprogram(name: "bytearray_remove", scope: !458, file: !458, line: 2430, type: !693, isLocal: true, isDefinition: true, scopeLine: 2431, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_remove, variables: !1248)
!1248 = !{!1249, !1250, !1251, !1252, !1253, !1254}
!1249 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1247, file: !458, line: 2430, type: !357)
!1250 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !1247, file: !458, line: 2430, type: !11)
!1251 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "value", scope: !1247, file: !458, line: 2432, type: !50)
!1252 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "where", scope: !1247, file: !458, line: 2433, type: !17)
!1253 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1247, file: !458, line: 2433, type: !17)
!1254 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1247, file: !458, line: 2434, type: !58)
!1255 = !DISubprogram(name: "bytearray_replace", scope: !458, file: !458, line: 2064, type: !693, isLocal: true, isDefinition: true, scopeLine: 2065, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_replace, variables: !1256)
!1256 = !{!1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264}
!1257 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1255, file: !458, line: 2064, type: !357)
!1258 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1255, file: !458, line: 2064, type: !11)
!1259 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1255, file: !458, line: 2066, type: !17)
!1260 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "from", scope: !1255, file: !458, line: 2067, type: !11)
!1261 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "to", scope: !1255, file: !458, line: 2067, type: !11)
!1262 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1255, file: !458, line: 2067, type: !11)
!1263 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vfrom", scope: !1255, file: !458, line: 2068, type: !243)
!1264 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vto", scope: !1255, file: !458, line: 2068, type: !243)
!1265 = !DISubprogram(name: "replace", scope: !458, file: !458, line: 1986, type: !1266, isLocal: true, isDefinition: true, scopeLine: 1990, flags: DIFlagPrototyped, isOptimized: true, function: %struct.PyByteArrayObject* (%struct.PyByteArrayObject*, i8*, i64, i8*, i64, i64)* @replace, variables: !1268)
!1266 = !DISubroutineType(types: !1267)
!1267 = !{!357, !357, !35, !17, !35, !17, !17}
!1268 = !{!1269, !1270, !1271, !1272, !1273, !1274}
!1269 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1265, file: !458, line: 1986, type: !357)
!1270 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "from_s", arg: 2, scope: !1265, file: !458, line: 1987, type: !35)
!1271 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "from_len", arg: 3, scope: !1265, file: !458, line: 1987, type: !17)
!1272 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "to_s", arg: 4, scope: !1265, file: !458, line: 1988, type: !35)
!1273 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "to_len", arg: 5, scope: !1265, file: !458, line: 1988, type: !17)
!1274 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 6, scope: !1265, file: !458, line: 1989, type: !17)
!1275 = !DISubprogram(name: "return_self", scope: !458, file: !458, line: 1577, type: !1276, isLocal: true, isDefinition: true, scopeLine: 1578, flags: DIFlagPrototyped, isOptimized: true, function: %struct.PyByteArrayObject* (%struct.PyByteArrayObject*)* @return_self, variables: !1278)
!1276 = !DISubroutineType(types: !1277)
!1277 = !{!357, !357}
!1278 = !{!1279}
!1279 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1275, file: !458, line: 1577, type: !357)
!1280 = !DISubprogram(name: "replace_interleave", scope: !458, file: !458, line: 1606, type: !1281, isLocal: true, isDefinition: true, scopeLine: 1609, flags: DIFlagPrototyped, isOptimized: true, function: %struct.PyByteArrayObject* (%struct.PyByteArrayObject*, i8*, i64, i64)* @replace_interleave, variables: !1283)
!1281 = !DISubroutineType(types: !1282)
!1282 = !{!357, !357, !35, !17, !17}
!1283 = !{!1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294}
!1284 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1280, file: !458, line: 1606, type: !357)
!1285 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "to_s", arg: 2, scope: !1280, file: !458, line: 1607, type: !35)
!1286 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "to_len", arg: 3, scope: !1280, file: !458, line: 1607, type: !17)
!1287 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 4, scope: !1280, file: !458, line: 1608, type: !17)
!1288 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_s", scope: !1280, file: !458, line: 1610, type: !58)
!1289 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result_s", scope: !1280, file: !458, line: 1610, type: !58)
!1290 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_len", scope: !1280, file: !458, line: 1611, type: !17)
!1291 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result_len", scope: !1280, file: !458, line: 1611, type: !17)
!1292 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1280, file: !458, line: 1612, type: !17)
!1293 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1280, file: !458, line: 1612, type: !17)
!1294 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1280, file: !458, line: 1613, type: !357)
!1295 = !DISubprogram(name: "replace_delete_single_character", scope: !458, file: !458, line: 1664, type: !1296, isLocal: true, isDefinition: true, scopeLine: 1666, flags: DIFlagPrototyped, isOptimized: true, function: %struct.PyByteArrayObject* (%struct.PyByteArrayObject*, i8, i64)* @replace_delete_single_character, variables: !1298)
!1296 = !DISubroutineType(types: !1297)
!1297 = !{!357, !357, !37, !17}
!1298 = !{!1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310}
!1299 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1295, file: !458, line: 1664, type: !357)
!1300 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "from_c", arg: 2, scope: !1295, file: !458, line: 1665, type: !37)
!1301 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 3, scope: !1295, file: !458, line: 1665, type: !17)
!1302 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_s", scope: !1295, file: !458, line: 1667, type: !58)
!1303 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result_s", scope: !1295, file: !458, line: 1667, type: !58)
!1304 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !1295, file: !458, line: 1668, type: !58)
!1305 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "next", scope: !1295, file: !458, line: 1668, type: !58)
!1306 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "end", scope: !1295, file: !458, line: 1668, type: !58)
!1307 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_len", scope: !1295, file: !458, line: 1669, type: !17)
!1308 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result_len", scope: !1295, file: !458, line: 1669, type: !17)
!1309 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1295, file: !458, line: 1670, type: !17)
!1310 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1295, file: !458, line: 1671, type: !357)
!1311 = !DISubprogram(name: "countchar", scope: !458, file: !458, line: 1586, type: !1312, isLocal: true, isDefinition: true, scopeLine: 1587, flags: DIFlagPrototyped, isOptimized: true, function: i64 (i8*, i64, i8, i64)* @countchar, variables: !1314)
!1312 = !DISubroutineType(types: !1313)
!1313 = !{!17, !35, !17, !37, !17}
!1314 = !{!1315, !1316, !1317, !1318, !1319, !1320, !1321}
!1315 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "target", arg: 1, scope: !1311, file: !458, line: 1586, type: !35)
!1316 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "target_len", arg: 2, scope: !1311, file: !458, line: 1586, type: !17)
!1317 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "c", arg: 3, scope: !1311, file: !458, line: 1586, type: !37)
!1318 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 4, scope: !1311, file: !458, line: 1586, type: !17)
!1319 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1311, file: !458, line: 1588, type: !17)
!1320 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !1311, file: !458, line: 1589, type: !35)
!1321 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "end", scope: !1311, file: !458, line: 1590, type: !35)
!1322 = !DISubprogram(name: "replace_delete_substring", scope: !458, file: !458, line: 1707, type: !1281, isLocal: true, isDefinition: true, scopeLine: 1710, flags: DIFlagPrototyped, isOptimized: true, function: %struct.PyByteArrayObject* (%struct.PyByteArrayObject*, i8*, i64, i64)* @replace_delete_substring, variables: !1323)
!1323 = !{!1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337}
!1324 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1322, file: !458, line: 1707, type: !357)
!1325 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "from_s", arg: 2, scope: !1322, file: !458, line: 1708, type: !35)
!1326 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "from_len", arg: 3, scope: !1322, file: !458, line: 1708, type: !17)
!1327 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 4, scope: !1322, file: !458, line: 1709, type: !17)
!1328 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_s", scope: !1322, file: !458, line: 1711, type: !58)
!1329 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result_s", scope: !1322, file: !458, line: 1711, type: !58)
!1330 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !1322, file: !458, line: 1712, type: !58)
!1331 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "next", scope: !1322, file: !458, line: 1712, type: !58)
!1332 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "end", scope: !1322, file: !458, line: 1712, type: !58)
!1333 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_len", scope: !1322, file: !458, line: 1713, type: !17)
!1334 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result_len", scope: !1322, file: !458, line: 1713, type: !17)
!1335 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1322, file: !458, line: 1714, type: !17)
!1336 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "offset", scope: !1322, file: !458, line: 1714, type: !17)
!1337 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1322, file: !458, line: 1715, type: !357)
!1338 = !DISubprogram(name: "replace_single_character_in_place", scope: !458, file: !458, line: 1759, type: !1339, isLocal: true, isDefinition: true, scopeLine: 1762, flags: DIFlagPrototyped, isOptimized: true, function: %struct.PyByteArrayObject* (%struct.PyByteArrayObject*, i8, i8, i64)* @replace_single_character_in_place, variables: !1341)
!1339 = !DISubroutineType(types: !1340)
!1340 = !{!357, !357, !37, !37, !17}
!1341 = !{!1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352}
!1342 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1338, file: !458, line: 1759, type: !357)
!1343 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "from_c", arg: 2, scope: !1338, file: !458, line: 1760, type: !37)
!1344 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "to_c", arg: 3, scope: !1338, file: !458, line: 1760, type: !37)
!1345 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 4, scope: !1338, file: !458, line: 1761, type: !17)
!1346 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_s", scope: !1338, file: !458, line: 1763, type: !58)
!1347 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result_s", scope: !1338, file: !458, line: 1763, type: !58)
!1348 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !1338, file: !458, line: 1763, type: !58)
!1349 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "end", scope: !1338, file: !458, line: 1763, type: !58)
!1350 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "next", scope: !1338, file: !458, line: 1763, type: !58)
!1351 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_len", scope: !1338, file: !458, line: 1764, type: !17)
!1352 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1338, file: !458, line: 1765, type: !357)
!1353 = !DISubprogram(name: "replace_substring_in_place", scope: !458, file: !458, line: 1804, type: !1266, isLocal: true, isDefinition: true, scopeLine: 1808, flags: DIFlagPrototyped, isOptimized: true, function: %struct.PyByteArrayObject* (%struct.PyByteArrayObject*, i8*, i64, i8*, i64, i64)* @replace_substring_in_place, variables: !1354)
!1354 = !{!1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367}
!1355 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1353, file: !458, line: 1804, type: !357)
!1356 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "from_s", arg: 2, scope: !1353, file: !458, line: 1805, type: !35)
!1357 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "from_len", arg: 3, scope: !1353, file: !458, line: 1805, type: !17)
!1358 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "to_s", arg: 4, scope: !1353, file: !458, line: 1806, type: !35)
!1359 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "to_len", arg: 5, scope: !1353, file: !458, line: 1806, type: !17)
!1360 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 6, scope: !1353, file: !458, line: 1807, type: !17)
!1361 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result_s", scope: !1353, file: !458, line: 1809, type: !58)
!1362 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !1353, file: !458, line: 1809, type: !58)
!1363 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "end", scope: !1353, file: !458, line: 1809, type: !58)
!1364 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_s", scope: !1353, file: !458, line: 1810, type: !58)
!1365 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_len", scope: !1353, file: !458, line: 1811, type: !17)
!1366 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "offset", scope: !1353, file: !458, line: 1811, type: !17)
!1367 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1353, file: !458, line: 1812, type: !357)
!1368 = !DISubprogram(name: "replace_single_character", scope: !458, file: !458, line: 1855, type: !1369, isLocal: true, isDefinition: true, scopeLine: 1859, flags: DIFlagPrototyped, isOptimized: true, function: %struct.PyByteArrayObject* (%struct.PyByteArrayObject*, i8, i8*, i64, i64)* @replace_single_character, variables: !1371)
!1369 = !DISubroutineType(types: !1370)
!1370 = !{!357, !357, !37, !35, !17, !17}
!1371 = !{!1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385}
!1372 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1368, file: !458, line: 1855, type: !357)
!1373 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "from_c", arg: 2, scope: !1368, file: !458, line: 1856, type: !37)
!1374 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "to_s", arg: 3, scope: !1368, file: !458, line: 1857, type: !35)
!1375 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "to_len", arg: 4, scope: !1368, file: !458, line: 1857, type: !17)
!1376 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 5, scope: !1368, file: !458, line: 1858, type: !17)
!1377 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_s", scope: !1368, file: !458, line: 1860, type: !58)
!1378 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result_s", scope: !1368, file: !458, line: 1860, type: !58)
!1379 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !1368, file: !458, line: 1861, type: !58)
!1380 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "next", scope: !1368, file: !458, line: 1861, type: !58)
!1381 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "end", scope: !1368, file: !458, line: 1861, type: !58)
!1382 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_len", scope: !1368, file: !458, line: 1862, type: !17)
!1383 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result_len", scope: !1368, file: !458, line: 1862, type: !17)
!1384 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1368, file: !458, line: 1863, type: !17)
!1385 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1368, file: !458, line: 1864, type: !357)
!1386 = !DISubprogram(name: "replace_substring", scope: !458, file: !458, line: 1918, type: !1266, isLocal: true, isDefinition: true, scopeLine: 1922, flags: DIFlagPrototyped, isOptimized: true, function: %struct.PyByteArrayObject* (%struct.PyByteArrayObject*, i8*, i64, i8*, i64, i64)* @replace_substring, variables: !1387)
!1387 = !{!1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403}
!1388 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1386, file: !458, line: 1918, type: !357)
!1389 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "from_s", arg: 2, scope: !1386, file: !458, line: 1919, type: !35)
!1390 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "from_len", arg: 3, scope: !1386, file: !458, line: 1919, type: !17)
!1391 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "to_s", arg: 4, scope: !1386, file: !458, line: 1920, type: !35)
!1392 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "to_len", arg: 5, scope: !1386, file: !458, line: 1920, type: !17)
!1393 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 6, scope: !1386, file: !458, line: 1921, type: !17)
!1394 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_s", scope: !1386, file: !458, line: 1923, type: !58)
!1395 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result_s", scope: !1386, file: !458, line: 1923, type: !58)
!1396 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !1386, file: !458, line: 1924, type: !58)
!1397 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "next", scope: !1386, file: !458, line: 1924, type: !58)
!1398 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "end", scope: !1386, file: !458, line: 1924, type: !58)
!1399 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "self_len", scope: !1386, file: !458, line: 1925, type: !17)
!1400 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result_len", scope: !1386, file: !458, line: 1925, type: !17)
!1401 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1386, file: !458, line: 1926, type: !17)
!1402 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "offset", scope: !1386, file: !458, line: 1926, type: !17)
!1403 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1386, file: !458, line: 1927, type: !357)
!1404 = !DISubprogram(name: "bytearray_reverse", scope: !458, file: !458, line: 2228, type: !693, isLocal: true, isDefinition: true, scopeLine: 2229, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_reverse, variables: !1405)
!1405 = !{!1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413}
!1406 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1404, file: !458, line: 2228, type: !357)
!1407 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "unused", arg: 2, scope: !1404, file: !458, line: 2228, type: !11)
!1408 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "swap", scope: !1404, file: !458, line: 2230, type: !37)
!1409 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "head", scope: !1404, file: !458, line: 2230, type: !58)
!1410 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tail", scope: !1404, file: !458, line: 2230, type: !58)
!1411 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1404, file: !458, line: 2231, type: !17)
!1412 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !1404, file: !458, line: 2231, type: !17)
!1413 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1404, file: !458, line: 2231, type: !17)
!1414 = !DISubprogram(name: "bytearray_rfind", scope: !458, file: !458, line: 1277, type: !693, isLocal: true, isDefinition: true, scopeLine: 1278, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_rfind, variables: !1415)
!1415 = !{!1416, !1417, !1418}
!1416 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1414, file: !458, line: 1277, type: !357)
!1417 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1414, file: !458, line: 1277, type: !11)
!1418 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1414, file: !458, line: 1279, type: !17)
!1419 = !DISubprogram(name: "bytearray_rindex", scope: !458, file: !458, line: 1292, type: !693, isLocal: true, isDefinition: true, scopeLine: 1293, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_rindex, variables: !1420)
!1420 = !{!1421, !1422, !1423}
!1421 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1419, file: !458, line: 1292, type: !357)
!1422 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1419, file: !458, line: 1292, type: !11)
!1423 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1419, file: !458, line: 1294, type: !17)
!1424 = !DISubprogram(name: "stringlib_rjust", scope: !839, file: !839, line: 160, type: !133, isLocal: true, isDefinition: true, scopeLine: 161, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @stringlib_rjust, variables: !1425)
!1425 = !{!1426, !1427, !1428, !1429}
!1426 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1424, file: !839, line: 160, type: !11)
!1427 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1424, file: !839, line: 160, type: !11)
!1428 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "width", scope: !1424, file: !839, line: 162, type: !17)
!1429 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fillchar", scope: !1424, file: !839, line: 163, type: !37)
!1430 = !DISubprogram(name: "bytearray_rpartition", scope: !458, file: !458, line: 2164, type: !693, isLocal: true, isDefinition: true, scopeLine: 2165, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_rpartition, variables: !1431)
!1431 = !{!1432, !1433, !1434, !1435, !1436}
!1432 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1430, file: !458, line: 2164, type: !357)
!1433 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sep_obj", arg: 2, scope: !1430, file: !458, line: 2164, type: !11)
!1434 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bytesep", scope: !1430, file: !458, line: 2166, type: !11)
!1435 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1430, file: !458, line: 2166, type: !11)
!1436 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1437, file: !458, line: 2179, type: !11)
!1437 = distinct !DILexicalBlock(scope: !1430, file: !458, line: 2179, column: 8)
!1438 = !DISubprogram(name: "stringlib_rpartition", scope: !1217, file: !1217, line: 63, type: !1218, isLocal: true, isDefinition: true, scopeLine: 67, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*, i64, %struct._object*, i8*, i64)* @stringlib_rpartition, variables: !1439)
!1439 = !{!1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1454}
!1440 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_obj", arg: 1, scope: !1438, file: !1217, line: 63, type: !11)
!1441 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str", arg: 2, scope: !1438, file: !1217, line: 64, type: !35)
!1442 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_len", arg: 3, scope: !1438, file: !1217, line: 64, type: !17)
!1443 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sep_obj", arg: 4, scope: !1438, file: !1217, line: 65, type: !11)
!1444 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sep", arg: 5, scope: !1438, file: !1217, line: 66, type: !35)
!1445 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sep_len", arg: 6, scope: !1438, file: !1217, line: 66, type: !17)
!1446 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "out", scope: !1438, file: !1217, line: 68, type: !11)
!1447 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pos", scope: !1438, file: !1217, line: 69, type: !17)
!1448 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1449, file: !1217, line: 89, type: !11)
!1449 = distinct !DILexicalBlock(scope: !1450, file: !1217, line: 89, column: 16)
!1450 = distinct !DILexicalBlock(scope: !1451, file: !1217, line: 88, column: 31)
!1451 = distinct !DILexicalBlock(scope: !1452, file: !1217, line: 88, column: 13)
!1452 = distinct !DILexicalBlock(scope: !1453, file: !1217, line: 82, column: 18)
!1453 = distinct !DILexicalBlock(scope: !1438, file: !1217, line: 82, column: 9)
!1454 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1455, file: !1217, line: 110, type: !11)
!1455 = distinct !DILexicalBlock(scope: !1456, file: !1217, line: 110, column: 12)
!1456 = distinct !DILexicalBlock(scope: !1457, file: !1217, line: 109, column: 27)
!1457 = distinct !DILexicalBlock(scope: !1438, file: !1217, line: 109, column: 9)
!1458 = !DISubprogram(name: "bytearray_rsplit", scope: !458, file: !458, line: 2193, type: !1459, isLocal: true, isDefinition: true, scopeLine: 2194, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*, %struct._object*)* @bytearray_rsplit, variables: !1461)
!1459 = !DISubroutineType(types: !1460)
!1460 = !{!11, !357, !11, !11}
!1461 = !{!1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472}
!1462 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1458, file: !458, line: 2193, type: !357)
!1463 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1458, file: !458, line: 2193, type: !11)
!1464 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwds", arg: 3, scope: !1458, file: !458, line: 2193, type: !11)
!1465 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !1458, file: !458, line: 2196, type: !17)
!1466 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1458, file: !458, line: 2196, type: !17)
!1467 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "maxsplit", scope: !1458, file: !458, line: 2197, type: !17)
!1468 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !1458, file: !458, line: 2198, type: !35)
!1469 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sub", scope: !1458, file: !458, line: 2198, type: !35)
!1470 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "list", scope: !1458, file: !458, line: 2199, type: !11)
!1471 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "subobj", scope: !1458, file: !458, line: 2199, type: !11)
!1472 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vsub", scope: !1458, file: !458, line: 2200, type: !243)
!1473 = !DISubprogram(name: "stringlib_rsplit_whitespace", scope: !1474, file: !1474, line: 193, type: !1475, isLocal: true, isDefinition: true, scopeLine: 196, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*, i64, i64)* @stringlib_rsplit_whitespace, variables: !1477)
!1474 = !DIFile(filename: "Objects/stringlib/split.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!1475 = !DISubroutineType(types: !1476)
!1476 = !{!11, !11, !35, !17, !17}
!1477 = !{!1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1495, !1497, !1507, !1509}
!1478 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_obj", arg: 1, scope: !1473, file: !1474, line: 193, type: !11)
!1479 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str", arg: 2, scope: !1473, file: !1474, line: 194, type: !35)
!1480 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_len", arg: 3, scope: !1473, file: !1474, line: 194, type: !17)
!1481 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 4, scope: !1473, file: !1474, line: 195, type: !17)
!1482 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1473, file: !1474, line: 197, type: !17)
!1483 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !1473, file: !1474, line: 197, type: !17)
!1484 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1473, file: !1474, line: 197, type: !17)
!1485 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "list", scope: !1473, file: !1474, line: 198, type: !11)
!1486 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sub", scope: !1473, file: !1474, line: 199, type: !11)
!1487 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1488, file: !1474, line: 221, type: !11)
!1488 = distinct !DILexicalBlock(scope: !1489, file: !1474, line: 221, column: 235)
!1489 = distinct !DILexicalBlock(scope: !1490, file: !1474, line: 221, column: 230)
!1490 = distinct !DILexicalBlock(scope: !1491, file: !1474, line: 221, column: 204)
!1491 = distinct !DILexicalBlock(scope: !1492, file: !1474, line: 221, column: 198)
!1492 = distinct !DILexicalBlock(scope: !1493, file: !1474, line: 221, column: 125)
!1493 = distinct !DILexicalBlock(scope: !1494, file: !1474, line: 221, column: 9)
!1494 = distinct !DILexicalBlock(scope: !1473, file: !1474, line: 205, column: 28)
!1495 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1496, file: !1474, line: 221, type: !11)
!1496 = distinct !DILexicalBlock(scope: !1490, file: !1474, line: 221, column: 458)
!1497 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1498, file: !1474, line: 230, type: !11)
!1498 = distinct !DILexicalBlock(scope: !1499, file: !1474, line: 230, column: 231)
!1499 = distinct !DILexicalBlock(scope: !1500, file: !1474, line: 230, column: 226)
!1500 = distinct !DILexicalBlock(scope: !1501, file: !1474, line: 230, column: 200)
!1501 = distinct !DILexicalBlock(scope: !1502, file: !1474, line: 230, column: 194)
!1502 = distinct !DILexicalBlock(scope: !1503, file: !1474, line: 230, column: 121)
!1503 = distinct !DILexicalBlock(scope: !1504, file: !1474, line: 230, column: 13)
!1504 = distinct !DILexicalBlock(scope: !1505, file: !1474, line: 229, column: 13)
!1505 = distinct !DILexicalBlock(scope: !1506, file: !1474, line: 224, column: 17)
!1506 = distinct !DILexicalBlock(scope: !1473, file: !1474, line: 224, column: 9)
!1507 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1508, file: !1474, line: 230, type: !11)
!1508 = distinct !DILexicalBlock(scope: !1500, file: !1474, line: 230, column: 454)
!1509 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1510, file: !1474, line: 238, type: !11)
!1510 = distinct !DILexicalBlock(scope: !1473, file: !1474, line: 238, column: 8)
!1511 = !DISubprogram(name: "stringlib_rsplit", scope: !1474, file: !1474, line: 287, type: !1512, isLocal: true, isDefinition: true, scopeLine: 291, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*, i64, i8*, i64, i64)* @stringlib_rsplit, variables: !1514)
!1512 = !DISubroutineType(types: !1513)
!1513 = !{!11, !11, !35, !17, !35, !17, !17}
!1514 = !{!1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1534, !1536, !1544, !1546}
!1515 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_obj", arg: 1, scope: !1511, file: !1474, line: 287, type: !11)
!1516 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str", arg: 2, scope: !1511, file: !1474, line: 288, type: !35)
!1517 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_len", arg: 3, scope: !1511, file: !1474, line: 288, type: !17)
!1518 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sep", arg: 4, scope: !1511, file: !1474, line: 289, type: !35)
!1519 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sep_len", arg: 5, scope: !1511, file: !1474, line: 289, type: !17)
!1520 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 6, scope: !1511, file: !1474, line: 290, type: !17)
!1521 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !1511, file: !1474, line: 292, type: !17)
!1522 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pos", scope: !1511, file: !1474, line: 292, type: !17)
!1523 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1511, file: !1474, line: 292, type: !17)
!1524 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "list", scope: !1511, file: !1474, line: 293, type: !11)
!1525 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sub", scope: !1511, file: !1474, line: 293, type: !11)
!1526 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1527, file: !1474, line: 311, type: !11)
!1527 = distinct !DILexicalBlock(scope: !1528, file: !1474, line: 311, column: 247)
!1528 = distinct !DILexicalBlock(scope: !1529, file: !1474, line: 311, column: 242)
!1529 = distinct !DILexicalBlock(scope: !1530, file: !1474, line: 311, column: 216)
!1530 = distinct !DILexicalBlock(scope: !1531, file: !1474, line: 311, column: 210)
!1531 = distinct !DILexicalBlock(scope: !1532, file: !1474, line: 311, column: 137)
!1532 = distinct !DILexicalBlock(scope: !1533, file: !1474, line: 311, column: 9)
!1533 = distinct !DILexicalBlock(scope: !1511, file: !1474, line: 307, column: 28)
!1534 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1535, file: !1474, line: 311, type: !11)
!1535 = distinct !DILexicalBlock(scope: !1529, file: !1474, line: 311, column: 470)
!1536 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1537, file: !1474, line: 323, type: !11)
!1537 = distinct !DILexicalBlock(scope: !1538, file: !1474, line: 323, column: 223)
!1538 = distinct !DILexicalBlock(scope: !1539, file: !1474, line: 323, column: 218)
!1539 = distinct !DILexicalBlock(scope: !1540, file: !1474, line: 323, column: 192)
!1540 = distinct !DILexicalBlock(scope: !1541, file: !1474, line: 323, column: 186)
!1541 = distinct !DILexicalBlock(scope: !1542, file: !1474, line: 323, column: 113)
!1542 = distinct !DILexicalBlock(scope: !1543, file: !1474, line: 323, column: 9)
!1543 = distinct !DILexicalBlock(scope: !1511, file: !1474, line: 322, column: 5)
!1544 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1545, file: !1474, line: 323, type: !11)
!1545 = distinct !DILexicalBlock(scope: !1539, file: !1474, line: 323, column: 446)
!1546 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1547, file: !1474, line: 331, type: !11)
!1547 = distinct !DILexicalBlock(scope: !1511, file: !1474, line: 331, column: 8)
!1548 = !DISubprogram(name: "stringlib_rsplit_char", scope: !1474, file: !1474, line: 243, type: !1549, isLocal: true, isDefinition: true, scopeLine: 247, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*, i64, i8, i64)* @stringlib_rsplit_char, variables: !1551)
!1549 = !DISubroutineType(types: !1550)
!1550 = !{!11, !11, !35, !17, !36, !17}
!1551 = !{!1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1575, !1577, !1586, !1588}
!1552 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_obj", arg: 1, scope: !1548, file: !1474, line: 243, type: !11)
!1553 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str", arg: 2, scope: !1548, file: !1474, line: 244, type: !35)
!1554 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_len", arg: 3, scope: !1548, file: !1474, line: 244, type: !17)
!1555 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "ch", arg: 4, scope: !1548, file: !1474, line: 245, type: !36)
!1556 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 5, scope: !1548, file: !1474, line: 246, type: !17)
!1557 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1548, file: !1474, line: 248, type: !17)
!1558 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !1548, file: !1474, line: 248, type: !17)
!1559 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1548, file: !1474, line: 248, type: !17)
!1560 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "list", scope: !1548, file: !1474, line: 249, type: !11)
!1561 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sub", scope: !1548, file: !1474, line: 250, type: !11)
!1562 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1563, file: !1474, line: 259, type: !11)
!1563 = distinct !DILexicalBlock(scope: !1564, file: !1474, line: 259, column: 243)
!1564 = distinct !DILexicalBlock(scope: !1565, file: !1474, line: 259, column: 238)
!1565 = distinct !DILexicalBlock(scope: !1566, file: !1474, line: 259, column: 212)
!1566 = distinct !DILexicalBlock(scope: !1567, file: !1474, line: 259, column: 206)
!1567 = distinct !DILexicalBlock(scope: !1568, file: !1474, line: 259, column: 133)
!1568 = distinct !DILexicalBlock(scope: !1569, file: !1474, line: 259, column: 17)
!1569 = distinct !DILexicalBlock(scope: !1570, file: !1474, line: 258, column: 31)
!1570 = distinct !DILexicalBlock(scope: !1571, file: !1474, line: 258, column: 17)
!1571 = distinct !DILexicalBlock(scope: !1572, file: !1474, line: 257, column: 28)
!1572 = distinct !DILexicalBlock(scope: !1573, file: !1474, line: 257, column: 9)
!1573 = distinct !DILexicalBlock(scope: !1574, file: !1474, line: 257, column: 9)
!1574 = distinct !DILexicalBlock(scope: !1548, file: !1474, line: 256, column: 42)
!1575 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1576, file: !1474, line: 259, type: !11)
!1576 = distinct !DILexicalBlock(scope: !1565, file: !1474, line: 259, column: 466)
!1577 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1578, file: !1474, line: 274, type: !11)
!1578 = distinct !DILexicalBlock(scope: !1579, file: !1474, line: 274, column: 227)
!1579 = distinct !DILexicalBlock(scope: !1580, file: !1474, line: 274, column: 222)
!1580 = distinct !DILexicalBlock(scope: !1581, file: !1474, line: 274, column: 196)
!1581 = distinct !DILexicalBlock(scope: !1582, file: !1474, line: 274, column: 190)
!1582 = distinct !DILexicalBlock(scope: !1583, file: !1474, line: 274, column: 117)
!1583 = distinct !DILexicalBlock(scope: !1584, file: !1474, line: 274, column: 9)
!1584 = distinct !DILexicalBlock(scope: !1585, file: !1474, line: 273, column: 18)
!1585 = distinct !DILexicalBlock(scope: !1548, file: !1474, line: 273, column: 9)
!1586 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1587, file: !1474, line: 274, type: !11)
!1587 = distinct !DILexicalBlock(scope: !1580, file: !1474, line: 274, column: 450)
!1588 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1589, file: !1474, line: 282, type: !11)
!1589 = distinct !DILexicalBlock(scope: !1548, file: !1474, line: 282, column: 8)
!1590 = !DISubprogram(name: "bytearray_rstrip", scope: !458, file: !458, line: 2557, type: !693, isLocal: true, isDefinition: true, scopeLine: 2558, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_rstrip, variables: !1591)
!1591 = !{!1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600}
!1592 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1590, file: !458, line: 2557, type: !357)
!1593 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1590, file: !458, line: 2557, type: !11)
!1594 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "right", scope: !1590, file: !458, line: 2559, type: !17)
!1595 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mysize", scope: !1590, file: !458, line: 2559, type: !17)
!1596 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argsize", scope: !1590, file: !458, line: 2559, type: !17)
!1597 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "myptr", scope: !1590, file: !458, line: 2560, type: !58)
!1598 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argptr", scope: !1590, file: !458, line: 2560, type: !58)
!1599 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "arg", scope: !1590, file: !458, line: 2561, type: !11)
!1600 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "varg", scope: !1590, file: !458, line: 2562, type: !243)
!1601 = !DISubprogram(name: "rstrip_helper", scope: !458, file: !458, line: 2470, type: !1196, isLocal: true, isDefinition: true, scopeLine: 2472, flags: DIFlagPrototyped, isOptimized: true, function: i64 (i8*, i64, i8*, i64)* @rstrip_helper, variables: !1602)
!1602 = !{!1603, !1604, !1605, !1606, !1607}
!1603 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "myptr", arg: 1, scope: !1601, file: !458, line: 2470, type: !58)
!1604 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "mysize", arg: 2, scope: !1601, file: !458, line: 2470, type: !17)
!1605 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argptr", arg: 3, scope: !1601, file: !458, line: 2471, type: !96)
!1606 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argsize", arg: 4, scope: !1601, file: !458, line: 2471, type: !17)
!1607 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1601, file: !458, line: 2473, type: !17)
!1608 = !DISubprogram(name: "bytearray_split", scope: !458, file: !458, line: 2098, type: !1459, isLocal: true, isDefinition: true, scopeLine: 2099, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*, %struct._object*)* @bytearray_split, variables: !1609)
!1609 = !{!1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620}
!1610 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1608, file: !458, line: 2098, type: !357)
!1611 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1608, file: !458, line: 2098, type: !11)
!1612 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwds", arg: 3, scope: !1608, file: !458, line: 2098, type: !11)
!1613 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !1608, file: !458, line: 2101, type: !17)
!1614 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1608, file: !458, line: 2101, type: !17)
!1615 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "maxsplit", scope: !1608, file: !458, line: 2102, type: !17)
!1616 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !1608, file: !458, line: 2103, type: !35)
!1617 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sub", scope: !1608, file: !458, line: 2103, type: !35)
!1618 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "list", scope: !1608, file: !458, line: 2104, type: !11)
!1619 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "subobj", scope: !1608, file: !458, line: 2104, type: !11)
!1620 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vsub", scope: !1608, file: !458, line: 2105, type: !243)
!1621 = !DISubprogram(name: "stringlib_split_whitespace", scope: !1474, file: !1474, line: 54, type: !1475, isLocal: true, isDefinition: true, scopeLine: 57, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*, i64, i64)* @stringlib_split_whitespace, variables: !1622)
!1622 = !{!1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1640, !1642, !1652, !1654}
!1623 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_obj", arg: 1, scope: !1621, file: !1474, line: 54, type: !11)
!1624 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str", arg: 2, scope: !1621, file: !1474, line: 55, type: !35)
!1625 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_len", arg: 3, scope: !1621, file: !1474, line: 55, type: !17)
!1626 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 4, scope: !1621, file: !1474, line: 56, type: !17)
!1627 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1621, file: !1474, line: 58, type: !17)
!1628 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !1621, file: !1474, line: 58, type: !17)
!1629 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1621, file: !1474, line: 58, type: !17)
!1630 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "list", scope: !1621, file: !1474, line: 59, type: !11)
!1631 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sub", scope: !1621, file: !1474, line: 60, type: !11)
!1632 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1633, file: !1474, line: 82, type: !11)
!1633 = distinct !DILexicalBlock(scope: !1634, file: !1474, line: 82, column: 223)
!1634 = distinct !DILexicalBlock(scope: !1635, file: !1474, line: 82, column: 218)
!1635 = distinct !DILexicalBlock(scope: !1636, file: !1474, line: 82, column: 192)
!1636 = distinct !DILexicalBlock(scope: !1637, file: !1474, line: 82, column: 186)
!1637 = distinct !DILexicalBlock(scope: !1638, file: !1474, line: 82, column: 113)
!1638 = distinct !DILexicalBlock(scope: !1639, file: !1474, line: 82, column: 9)
!1639 = distinct !DILexicalBlock(scope: !1621, file: !1474, line: 66, column: 28)
!1640 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1641, file: !1474, line: 82, type: !11)
!1641 = distinct !DILexicalBlock(scope: !1635, file: !1474, line: 82, column: 446)
!1642 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1643, file: !1474, line: 91, type: !11)
!1643 = distinct !DILexicalBlock(scope: !1644, file: !1474, line: 91, column: 233)
!1644 = distinct !DILexicalBlock(scope: !1645, file: !1474, line: 91, column: 228)
!1645 = distinct !DILexicalBlock(scope: !1646, file: !1474, line: 91, column: 202)
!1646 = distinct !DILexicalBlock(scope: !1647, file: !1474, line: 91, column: 196)
!1647 = distinct !DILexicalBlock(scope: !1648, file: !1474, line: 91, column: 123)
!1648 = distinct !DILexicalBlock(scope: !1649, file: !1474, line: 91, column: 13)
!1649 = distinct !DILexicalBlock(scope: !1650, file: !1474, line: 90, column: 13)
!1650 = distinct !DILexicalBlock(scope: !1651, file: !1474, line: 85, column: 22)
!1651 = distinct !DILexicalBlock(scope: !1621, file: !1474, line: 85, column: 9)
!1652 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1653, file: !1474, line: 91, type: !11)
!1653 = distinct !DILexicalBlock(scope: !1645, file: !1474, line: 91, column: 456)
!1654 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1655, file: !1474, line: 97, type: !11)
!1655 = distinct !DILexicalBlock(scope: !1621, file: !1474, line: 97, column: 8)
!1656 = !DISubprogram(name: "stringlib_split", scope: !1474, file: !1474, line: 145, type: !1512, isLocal: true, isDefinition: true, scopeLine: 149, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*, i64, i8*, i64, i64)* @stringlib_split, variables: !1657)
!1657 = !{!1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1678, !1680, !1688, !1690}
!1658 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_obj", arg: 1, scope: !1656, file: !1474, line: 145, type: !11)
!1659 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str", arg: 2, scope: !1656, file: !1474, line: 146, type: !35)
!1660 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_len", arg: 3, scope: !1656, file: !1474, line: 146, type: !17)
!1661 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sep", arg: 4, scope: !1656, file: !1474, line: 147, type: !35)
!1662 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sep_len", arg: 5, scope: !1656, file: !1474, line: 147, type: !17)
!1663 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 6, scope: !1656, file: !1474, line: 148, type: !17)
!1664 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1656, file: !1474, line: 150, type: !17)
!1665 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !1656, file: !1474, line: 150, type: !17)
!1666 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pos", scope: !1656, file: !1474, line: 150, type: !17)
!1667 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1656, file: !1474, line: 150, type: !17)
!1668 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "list", scope: !1656, file: !1474, line: 151, type: !11)
!1669 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sub", scope: !1656, file: !1474, line: 151, type: !11)
!1670 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1671, file: !1474, line: 170, type: !11)
!1671 = distinct !DILexicalBlock(scope: !1672, file: !1474, line: 170, column: 223)
!1672 = distinct !DILexicalBlock(scope: !1673, file: !1474, line: 170, column: 218)
!1673 = distinct !DILexicalBlock(scope: !1674, file: !1474, line: 170, column: 192)
!1674 = distinct !DILexicalBlock(scope: !1675, file: !1474, line: 170, column: 186)
!1675 = distinct !DILexicalBlock(scope: !1676, file: !1474, line: 170, column: 113)
!1676 = distinct !DILexicalBlock(scope: !1677, file: !1474, line: 170, column: 9)
!1677 = distinct !DILexicalBlock(scope: !1656, file: !1474, line: 165, column: 28)
!1678 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1679, file: !1474, line: 170, type: !11)
!1679 = distinct !DILexicalBlock(scope: !1673, file: !1474, line: 170, column: 446)
!1680 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1681, file: !1474, line: 182, type: !11)
!1681 = distinct !DILexicalBlock(scope: !1682, file: !1474, line: 182, column: 229)
!1682 = distinct !DILexicalBlock(scope: !1683, file: !1474, line: 182, column: 224)
!1683 = distinct !DILexicalBlock(scope: !1684, file: !1474, line: 182, column: 198)
!1684 = distinct !DILexicalBlock(scope: !1685, file: !1474, line: 182, column: 192)
!1685 = distinct !DILexicalBlock(scope: !1686, file: !1474, line: 182, column: 119)
!1686 = distinct !DILexicalBlock(scope: !1687, file: !1474, line: 182, column: 9)
!1687 = distinct !DILexicalBlock(scope: !1656, file: !1474, line: 181, column: 5)
!1688 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1689, file: !1474, line: 182, type: !11)
!1689 = distinct !DILexicalBlock(scope: !1683, file: !1474, line: 182, column: 452)
!1690 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1691, file: !1474, line: 188, type: !11)
!1691 = distinct !DILexicalBlock(scope: !1656, file: !1474, line: 188, column: 8)
!1692 = !DISubprogram(name: "stringlib_split_char", scope: !1474, file: !1474, line: 102, type: !1549, isLocal: true, isDefinition: true, scopeLine: 106, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*, i64, i8, i64)* @stringlib_split_char, variables: !1693)
!1693 = !{!1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1717, !1719, !1728, !1730}
!1694 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_obj", arg: 1, scope: !1692, file: !1474, line: 102, type: !11)
!1695 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str", arg: 2, scope: !1692, file: !1474, line: 103, type: !35)
!1696 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_len", arg: 3, scope: !1692, file: !1474, line: 103, type: !17)
!1697 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "ch", arg: 4, scope: !1692, file: !1474, line: 104, type: !36)
!1698 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "maxcount", arg: 5, scope: !1692, file: !1474, line: 105, type: !17)
!1699 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1692, file: !1474, line: 107, type: !17)
!1700 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !1692, file: !1474, line: 107, type: !17)
!1701 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1692, file: !1474, line: 107, type: !17)
!1702 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "list", scope: !1692, file: !1474, line: 108, type: !11)
!1703 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sub", scope: !1692, file: !1474, line: 109, type: !11)
!1704 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1705, file: !1474, line: 119, type: !11)
!1705 = distinct !DILexicalBlock(scope: !1706, file: !1474, line: 119, column: 231)
!1706 = distinct !DILexicalBlock(scope: !1707, file: !1474, line: 119, column: 226)
!1707 = distinct !DILexicalBlock(scope: !1708, file: !1474, line: 119, column: 200)
!1708 = distinct !DILexicalBlock(scope: !1709, file: !1474, line: 119, column: 194)
!1709 = distinct !DILexicalBlock(scope: !1710, file: !1474, line: 119, column: 121)
!1710 = distinct !DILexicalBlock(scope: !1711, file: !1474, line: 119, column: 17)
!1711 = distinct !DILexicalBlock(scope: !1712, file: !1474, line: 118, column: 31)
!1712 = distinct !DILexicalBlock(scope: !1713, file: !1474, line: 118, column: 17)
!1713 = distinct !DILexicalBlock(scope: !1714, file: !1474, line: 116, column: 33)
!1714 = distinct !DILexicalBlock(scope: !1715, file: !1474, line: 116, column: 9)
!1715 = distinct !DILexicalBlock(scope: !1716, file: !1474, line: 116, column: 9)
!1716 = distinct !DILexicalBlock(scope: !1692, file: !1474, line: 115, column: 47)
!1717 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1718, file: !1474, line: 119, type: !11)
!1718 = distinct !DILexicalBlock(scope: !1707, file: !1474, line: 119, column: 454)
!1719 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1720, file: !1474, line: 134, type: !11)
!1720 = distinct !DILexicalBlock(scope: !1721, file: !1474, line: 134, column: 229)
!1721 = distinct !DILexicalBlock(scope: !1722, file: !1474, line: 134, column: 224)
!1722 = distinct !DILexicalBlock(scope: !1723, file: !1474, line: 134, column: 198)
!1723 = distinct !DILexicalBlock(scope: !1724, file: !1474, line: 134, column: 192)
!1724 = distinct !DILexicalBlock(scope: !1725, file: !1474, line: 134, column: 119)
!1725 = distinct !DILexicalBlock(scope: !1726, file: !1474, line: 134, column: 9)
!1726 = distinct !DILexicalBlock(scope: !1727, file: !1474, line: 133, column: 23)
!1727 = distinct !DILexicalBlock(scope: !1692, file: !1474, line: 133, column: 9)
!1728 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1729, file: !1474, line: 134, type: !11)
!1729 = distinct !DILexicalBlock(scope: !1722, file: !1474, line: 134, column: 452)
!1730 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1731, file: !1474, line: 140, type: !11)
!1731 = distinct !DILexicalBlock(scope: !1692, file: !1474, line: 140, column: 8)
!1732 = !DISubprogram(name: "bytearray_splitlines", scope: !458, file: !458, line: 2638, type: !142, isLocal: true, isDefinition: true, scopeLine: 2639, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @bytearray_splitlines, variables: !1733)
!1733 = !{!1734, !1735, !1736, !1737}
!1734 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1732, file: !458, line: 2638, type: !11)
!1735 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1732, file: !458, line: 2638, type: !11)
!1736 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwds", arg: 3, scope: !1732, file: !458, line: 2638, type: !11)
!1737 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "keepends", scope: !1732, file: !458, line: 2641, type: !50)
!1738 = !DISubprogram(name: "stringlib_splitlines", scope: !1474, file: !1474, line: 336, type: !1739, isLocal: true, isDefinition: true, scopeLine: 339, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*, i64, i32)* @stringlib_splitlines, variables: !1741)
!1739 = !DISubroutineType(types: !1740)
!1740 = !{!11, !11, !35, !17, !50}
!1741 = !{!1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1754, !1758, !1760}
!1742 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_obj", arg: 1, scope: !1738, file: !1474, line: 336, type: !11)
!1743 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str", arg: 2, scope: !1738, file: !1474, line: 337, type: !35)
!1744 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "str_len", arg: 3, scope: !1738, file: !1474, line: 337, type: !17)
!1745 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "keepends", arg: 4, scope: !1738, file: !1474, line: 338, type: !50)
!1746 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1738, file: !1474, line: 348, type: !17)
!1747 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !1738, file: !1474, line: 349, type: !17)
!1748 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "list", scope: !1738, file: !1474, line: 350, type: !11)
!1749 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sub", scope: !1738, file: !1474, line: 351, type: !11)
!1750 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "eol", scope: !1751, file: !1474, line: 357, type: !17)
!1751 = distinct !DILexicalBlock(scope: !1752, file: !1474, line: 356, column: 36)
!1752 = distinct !DILexicalBlock(scope: !1753, file: !1474, line: 356, column: 5)
!1753 = distinct !DILexicalBlock(scope: !1738, file: !1474, line: 356, column: 5)
!1754 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1755, file: !1474, line: 381, type: !11)
!1755 = distinct !DILexicalBlock(scope: !1756, file: !1474, line: 381, column: 144)
!1756 = distinct !DILexicalBlock(scope: !1757, file: !1474, line: 381, column: 139)
!1757 = distinct !DILexicalBlock(scope: !1751, file: !1474, line: 381, column: 113)
!1758 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1759, file: !1474, line: 381, type: !11)
!1759 = distinct !DILexicalBlock(scope: !1757, file: !1474, line: 381, column: 367)
!1760 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1761, file: !1474, line: 387, type: !11)
!1761 = distinct !DILexicalBlock(scope: !1738, file: !1474, line: 387, column: 8)
!1762 = !DISubprogram(name: "bytearray_startswith", scope: !458, file: !458, line: 1382, type: !693, isLocal: true, isDefinition: true, scopeLine: 1383, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_startswith, variables: !1763)
!1763 = !{!1764, !1765, !1766, !1767, !1768, !1769, !1770}
!1764 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1762, file: !458, line: 1382, type: !357)
!1765 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1762, file: !458, line: 1382, type: !11)
!1766 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "start", scope: !1762, file: !458, line: 1384, type: !17)
!1767 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "end", scope: !1762, file: !458, line: 1385, type: !17)
!1768 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "subobj", scope: !1762, file: !458, line: 1386, type: !11)
!1769 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1762, file: !458, line: 1387, type: !50)
!1770 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1771, file: !458, line: 1392, type: !17)
!1771 = distinct !DILexicalBlock(scope: !1772, file: !458, line: 1391, column: 80)
!1772 = distinct !DILexicalBlock(scope: !1762, file: !458, line: 1391, column: 9)
!1773 = !DISubprogram(name: "bytearray_strip", scope: !458, file: !458, line: 2486, type: !693, isLocal: true, isDefinition: true, scopeLine: 2487, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_strip, variables: !1774)
!1774 = !{!1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784}
!1775 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1773, file: !458, line: 2486, type: !357)
!1776 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1773, file: !458, line: 2486, type: !11)
!1777 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "left", scope: !1773, file: !458, line: 2488, type: !17)
!1778 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "right", scope: !1773, file: !458, line: 2488, type: !17)
!1779 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mysize", scope: !1773, file: !458, line: 2488, type: !17)
!1780 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argsize", scope: !1773, file: !458, line: 2488, type: !17)
!1781 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "myptr", scope: !1773, file: !458, line: 2489, type: !58)
!1782 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argptr", scope: !1773, file: !458, line: 2489, type: !58)
!1783 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "arg", scope: !1773, file: !458, line: 2490, type: !11)
!1784 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "varg", scope: !1773, file: !458, line: 2491, type: !243)
!1785 = !DISubprogram(name: "stringlib_swapcase", scope: !834, file: !834, line: 100, type: !123, isLocal: true, isDefinition: true, scopeLine: 101, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @stringlib_swapcase, variables: !1786)
!1786 = !{!1787, !1788}
!1787 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1785, file: !834, line: 100, type: !11)
!1788 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newobj", scope: !1785, file: !834, line: 102, type: !11)
!1789 = !DISubprogram(name: "stringlib_title", scope: !834, file: !834, line: 76, type: !123, isLocal: true, isDefinition: true, scopeLine: 77, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @stringlib_title, variables: !1790)
!1790 = !{!1791, !1792}
!1791 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1789, file: !834, line: 76, type: !11)
!1792 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newobj", scope: !1789, file: !834, line: 78, type: !11)
!1793 = !DISubprogram(name: "bytearray_translate", scope: !458, file: !458, line: 1469, type: !693, isLocal: true, isDefinition: true, scopeLine: 1470, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PyByteArrayObject*, %struct._object*)* @bytearray_translate, variables: !1794)
!1794 = !{!1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1810, !1811, !1812, !1813, !1814, !1819}
!1795 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1793, file: !458, line: 1469, type: !357)
!1796 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1793, file: !458, line: 1469, type: !11)
!1797 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "input", scope: !1793, file: !458, line: 1471, type: !58)
!1798 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "output", scope: !1793, file: !458, line: 1471, type: !58)
!1799 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "table", scope: !1793, file: !458, line: 1472, type: !35)
!1800 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1793, file: !458, line: 1473, type: !17)
!1801 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c", scope: !1793, file: !458, line: 1473, type: !17)
!1802 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "input_obj", scope: !1793, file: !458, line: 1474, type: !11)
!1803 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "output_start", scope: !1793, file: !458, line: 1475, type: !35)
!1804 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "inlen", scope: !1793, file: !458, line: 1476, type: !17)
!1805 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1793, file: !458, line: 1477, type: !11)
!1806 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "trans_table", scope: !1793, file: !458, line: 1478, type: !1807)
!1807 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 8192, align: 32, elements: !1808)
!1808 = !{!1809}
!1809 = !DISubrange(count: 256)
!1810 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tableobj", scope: !1793, file: !458, line: 1479, type: !11)
!1811 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "delobj", scope: !1793, file: !458, line: 1479, type: !11)
!1812 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vtable", scope: !1793, file: !458, line: 1480, type: !243)
!1813 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vdel", scope: !1793, file: !458, line: 1480, type: !243)
!1814 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_tmp", scope: !1815, file: !458, line: 1549, type: !11)
!1815 = distinct !DILexicalBlock(scope: !1816, file: !458, line: 1549, column: 16)
!1816 = distinct !DILexicalBlock(scope: !1817, file: !458, line: 1548, column: 68)
!1817 = distinct !DILexicalBlock(scope: !1818, file: !458, line: 1548, column: 13)
!1818 = distinct !DILexicalBlock(scope: !1793, file: !458, line: 1547, column: 9)
!1819 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1820, file: !458, line: 1549, type: !11)
!1820 = distinct !DILexicalBlock(scope: !1821, file: !458, line: 1549, column: 115)
!1821 = distinct !DILexicalBlock(scope: !1822, file: !458, line: 1549, column: 87)
!1822 = distinct !DILexicalBlock(scope: !1815, file: !458, line: 1549, column: 64)
!1823 = !DISubprogram(name: "stringlib_upper", scope: !834, file: !834, line: 64, type: !123, isLocal: true, isDefinition: true, scopeLine: 65, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @stringlib_upper, variables: !1824)
!1824 = !{!1825, !1826}
!1825 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1823, file: !834, line: 64, type: !11)
!1826 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newobj", scope: !1823, file: !834, line: 66, type: !11)
!1827 = !DISubprogram(name: "stringlib_zfill", scope: !839, file: !839, line: 223, type: !133, isLocal: true, isDefinition: true, scopeLine: 224, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @stringlib_zfill, variables: !1828)
!1828 = !{!1829, !1830, !1831, !1832, !1833, !1834}
!1829 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1827, file: !839, line: 223, type: !11)
!1830 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1827, file: !839, line: 223, type: !11)
!1831 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fill", scope: !1827, file: !839, line: 225, type: !17)
!1832 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !1827, file: !839, line: 226, type: !11)
!1833 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !1827, file: !839, line: 227, type: !58)
!1834 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "width", scope: !1827, file: !839, line: 228, type: !17)
!1835 = !DISubprogram(name: "bytearray_init", scope: !458, file: !458, line: 745, type: !733, isLocal: true, isDefinition: true, scopeLine: 746, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.PyByteArrayObject*, %struct._object*, %struct._object*)* @bytearray_init, variables: !1836)
!1836 = !{!1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1849, !1850, !1852, !1854, !1857, !1858, !1862, !1863, !1864, !1866, !1868}
!1837 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1835, file: !458, line: 745, type: !357)
!1838 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1835, file: !458, line: 745, type: !11)
!1839 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwds", arg: 3, scope: !1835, file: !458, line: 745, type: !11)
!1840 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "arg", scope: !1835, file: !458, line: 748, type: !11)
!1841 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "encoding", scope: !1835, file: !458, line: 749, type: !35)
!1842 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "errors", scope: !1835, file: !458, line: 750, type: !35)
!1843 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1835, file: !458, line: 751, type: !17)
!1844 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it", scope: !1835, file: !458, line: 752, type: !11)
!1845 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "iternext", scope: !1835, file: !458, line: 753, type: !122)
!1846 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "encoded", scope: !1847, file: !458, line: 778, type: !11)
!1847 = distinct !DILexicalBlock(scope: !1848, file: !458, line: 776, column: 77)
!1848 = distinct !DILexicalBlock(scope: !1835, file: !458, line: 776, column: 9)
!1849 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "new", scope: !1847, file: !458, line: 778, type: !11)
!1850 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1851, file: !458, line: 789, type: !11)
!1851 = distinct !DILexicalBlock(scope: !1847, file: !458, line: 789, column: 12)
!1852 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1853, file: !458, line: 792, type: !11)
!1853 = distinct !DILexicalBlock(scope: !1847, file: !458, line: 792, column: 12)
!1854 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !1855, file: !458, line: 825, type: !17)
!1855 = distinct !DILexicalBlock(scope: !1856, file: !458, line: 824, column: 119)
!1856 = distinct !DILexicalBlock(scope: !1835, file: !458, line: 824, column: 9)
!1857 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "view", scope: !1855, file: !458, line: 826, type: !243)
!1858 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !1859, file: !458, line: 851, type: !11)
!1859 = distinct !DILexicalBlock(scope: !1860, file: !458, line: 850, column: 14)
!1860 = distinct !DILexicalBlock(scope: !1861, file: !458, line: 850, column: 5)
!1861 = distinct !DILexicalBlock(scope: !1835, file: !458, line: 850, column: 5)
!1862 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rc", scope: !1859, file: !458, line: 852, type: !50)
!1863 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "value", scope: !1859, file: !458, line: 852, type: !50)
!1864 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1865, file: !458, line: 867, type: !11)
!1865 = distinct !DILexicalBlock(scope: !1859, file: !458, line: 867, column: 12)
!1866 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1867, file: !458, line: 880, type: !11)
!1867 = distinct !DILexicalBlock(scope: !1835, file: !458, line: 880, column: 8)
!1868 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1869, file: !458, line: 885, type: !11)
!1869 = distinct !DILexicalBlock(scope: !1835, file: !458, line: 885, column: 8)
!1870 = !DISubprogram(name: "bytearrayiter_dealloc", scope: !458, file: !458, line: 2957, type: !1871, isLocal: true, isDefinition: true, scopeLine: 2958, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct.bytesiterobject*)* @bytearrayiter_dealloc, variables: !1873)
!1871 = !DISubroutineType(types: !1872)
!1872 = !{null, !456}
!1873 = !{!1874, !1875, !1877, !1879}
!1874 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "it", arg: 1, scope: !1870, file: !458, line: 2957, type: !456)
!1875 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "g", scope: !1876, file: !458, line: 2959, type: !442)
!1876 = distinct !DILexicalBlock(scope: !1870, file: !458, line: 2959, column: 8)
!1877 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1878, file: !458, line: 2960, type: !11)
!1878 = distinct !DILexicalBlock(scope: !1870, file: !458, line: 2960, column: 8)
!1879 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1880, file: !458, line: 2960, type: !11)
!1880 = distinct !DILexicalBlock(scope: !1881, file: !458, line: 2960, column: 102)
!1881 = distinct !DILexicalBlock(scope: !1878, file: !458, line: 2960, column: 68)
!1882 = !DISubprogram(name: "bytearrayiter_traverse", scope: !458, file: !458, line: 2965, type: !1883, isLocal: true, isDefinition: true, scopeLine: 2966, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.bytesiterobject*, i32 (%struct._object*, i8*)*, i8*)* @bytearrayiter_traverse, variables: !1885)
!1883 = !DISubroutineType(types: !1884)
!1884 = !{!50, !456, !270, !96}
!1885 = !{!1886, !1887, !1888, !1889}
!1886 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "it", arg: 1, scope: !1882, file: !458, line: 2965, type: !456)
!1887 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "visit", arg: 2, scope: !1882, file: !458, line: 2965, type: !270)
!1888 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 3, scope: !1882, file: !458, line: 2965, type: !96)
!1889 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vret", scope: !1890, file: !458, line: 2967, type: !50)
!1890 = distinct !DILexicalBlock(scope: !1891, file: !458, line: 2967, column: 26)
!1891 = distinct !DILexicalBlock(scope: !1892, file: !458, line: 2967, column: 14)
!1892 = distinct !DILexicalBlock(scope: !1882, file: !458, line: 2967, column: 8)
!1893 = !DISubprogram(name: "bytearrayiter_next", scope: !458, file: !458, line: 2972, type: !1894, isLocal: true, isDefinition: true, scopeLine: 2973, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.bytesiterobject*)* @bytearrayiter_next, variables: !1896)
!1894 = !DISubroutineType(types: !1895)
!1895 = !{!11, !456}
!1896 = !{!1897, !1898, !1899, !1900}
!1897 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "it", arg: 1, scope: !1893, file: !458, line: 2972, type: !456)
!1898 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "seq", scope: !1893, file: !458, line: 2974, type: !357)
!1899 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !1893, file: !458, line: 2975, type: !11)
!1900 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1901, file: !458, line: 2991, type: !11)
!1901 = distinct !DILexicalBlock(scope: !1893, file: !458, line: 2991, column: 8)
!1902 = !DISubprogram(name: "bytearrayiter_length_hint", scope: !458, file: !458, line: 2997, type: !1894, isLocal: true, isDefinition: true, scopeLine: 2998, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.bytesiterobject*)* @bytearrayiter_length_hint, variables: !1903)
!1903 = !{!1904, !1905}
!1904 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "it", arg: 1, scope: !1902, file: !458, line: 2997, type: !456)
!1905 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !1902, file: !458, line: 2999, type: !17)
!1906 = !DISubprogram(name: "bytearrayiter_reduce", scope: !458, file: !458, line: 3009, type: !1894, isLocal: true, isDefinition: true, scopeLine: 3010, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.bytesiterobject*)* @bytearrayiter_reduce, variables: !1907)
!1907 = !{!1908, !1909}
!1908 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "it", arg: 1, scope: !1906, file: !458, line: 3009, type: !456)
!1909 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "u", scope: !1910, file: !458, line: 3015, type: !11)
!1910 = distinct !DILexicalBlock(scope: !1911, file: !458, line: 3014, column: 12)
!1911 = distinct !DILexicalBlock(scope: !1906, file: !458, line: 3011, column: 9)
!1912 = !DISubprogram(name: "bytearrayiter_setstate", scope: !458, file: !458, line: 3023, type: !1913, isLocal: true, isDefinition: true, scopeLine: 3024, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.bytesiterobject*, %struct._object*)* @bytearrayiter_setstate, variables: !1915)
!1913 = !DISubroutineType(types: !1914)
!1914 = !{!11, !456, !11}
!1915 = !{!1916, !1917, !1918}
!1916 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "it", arg: 1, scope: !1912, file: !458, line: 3023, type: !456)
!1917 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "state", arg: 2, scope: !1912, file: !458, line: 3023, type: !11)
!1918 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !1912, file: !458, line: 3025, type: !17)
!1919 = !DISubprogram(name: "bytearray_iter", scope: !458, file: !458, line: 3084, type: !123, isLocal: true, isDefinition: true, scopeLine: 3085, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @bytearray_iter, variables: !1920)
!1920 = !{!1921, !1922, !1923}
!1921 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "seq", arg: 1, scope: !1919, file: !458, line: 3084, type: !11)
!1922 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it", scope: !1919, file: !458, line: 3086, type: !456)
!1923 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "g", scope: !1924, file: !458, line: 3098, type: !442)
!1924 = distinct !DILexicalBlock(scope: !1919, file: !458, line: 3098, column: 8)
!1925 = !{!1926, !1927, !1929, !1930, !1931, !1932, !1933, !1937, !1942, !1946, !1954, !1958, !1959, !1963, !1967, !1971, !1975, !1979, !1983, !1987, !1991, !1995, !1999, !2003, !2007, !2011, !2015, !2019, !2023, !2027, !2031, !2035, !2039, !2043, !2047, !2051, !2052, !2056, !2060, !2061, !2065, !2066, !2070, !2074, !2075, !2079, !2080, !2084, !2088, !2092, !2096, !2100, !2104, !2106, !2110}
!1926 = !DIGlobalVariable(name: "_PyByteArray_empty_string", scope: !0, file: !458, line: 8, type: !87, isLocal: false, isDefinition: true, variable: [1 x i8]* @_PyByteArray_empty_string)
!1927 = !DIGlobalVariable(name: "PyByteArray_Type", scope: !0, file: !458, line: 2906, type: !1928, isLocal: false, isDefinition: true, variable: { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyByteArray_Type)
!1928 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyTypeObject", file: !13, line: 422, baseType: !26)
!1929 = !DIGlobalVariable(name: "PyByteArrayIter_Type", scope: !0, file: !458, line: 3050, type: !1928, isLocal: false, isDefinition: true, variable: { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyByteArrayIter_Type)
!1930 = !DIGlobalVariable(name: "bytearray_as_sequence", scope: !0, file: !458, line: 2795, type: !179, isLocal: true, isDefinition: true, variable: %struct.PySequenceMethods* @bytearray_as_sequence)
!1931 = !DIGlobalVariable(name: "bytearray_as_mapping", scope: !0, file: !458, line: 2808, type: !210, isLocal: true, isDefinition: true, variable: %struct.PyMappingMethods* @bytearray_as_mapping)
!1932 = !DIGlobalVariable(name: "bytearray_as_buffer", scope: !0, file: !458, line: 2814, type: !234, isLocal: true, isDefinition: true, variable: %struct.PyBufferProcs* @bytearray_as_buffer)
!1933 = !DIGlobalVariable(name: "bytearray_doc", scope: !0, file: !458, line: 2889, type: !1934, isLocal: true, isDefinition: true, variable: [514 x i8]* @bytearray_doc)
!1934 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 4112, align: 8, elements: !1935)
!1935 = !{!1936}
!1936 = !DISubrange(count: 514)
!1937 = !DIGlobalVariable(name: "bytearray_methods", scope: !0, file: !458, line: 2820, type: !1938, isLocal: true, isDefinition: true, variable: [51 x %struct.PyMethodDef]* @bytearray_methods)
!1938 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1939, size: 13056, align: 64, elements: !1940)
!1939 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyMethodDef", file: !288, line: 47, baseType: !287)
!1940 = !{!1941}
!1941 = !DISubrange(count: 51)
!1942 = !DIGlobalVariable(name: "alloc_doc", scope: !0, file: !458, line: 2607, type: !1943, isLocal: true, isDefinition: true, variable: [69 x i8]* @alloc_doc)
!1943 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 552, align: 8, elements: !1944)
!1944 = !{!1945}
!1945 = !DISubrange(count: 69)
!1946 = !DIGlobalVariable(name: "PyId___dict__", scope: !807, file: !458, line: 2730, type: !1947, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @_common_reduce.PyId___dict__)
!1947 = !DIDerivedType(tag: DW_TAG_typedef, name: "_Py_Identifier", file: !13, line: 144, baseType: !1948)
!1948 = !DICompositeType(tag: DW_TAG_structure_type, name: "_Py_Identifier", file: !13, line: 140, size: 192, align: 64, elements: !1949)
!1949 = !{!1950, !1952, !1953}
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1948, file: !13, line: 141, baseType: !1951, size: 64, align: 64)
!1951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1948, size: 64, align: 64)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1948, file: !13, line: 142, baseType: !35, size: 64, align: 64, offset: 64)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "object", scope: !1948, file: !13, line: 143, baseType: !11, size: 64, align: 64, offset: 128)
!1954 = !DIGlobalVariable(name: "reduce_doc", scope: !0, file: !458, line: 2761, type: !1955, isLocal: true, isDefinition: true, variable: [39 x i8]* @reduce_doc)
!1955 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 312, align: 8, elements: !1956)
!1956 = !{!1957}
!1957 = !DISubrange(count: 39)
!1958 = !DIGlobalVariable(name: "reduce_ex_doc", scope: !0, file: !458, line: 2769, type: !1955, isLocal: true, isDefinition: true, variable: [39 x i8]* @reduce_ex_doc)
!1959 = !DIGlobalVariable(name: "sizeof_doc", scope: !0, file: !458, line: 2782, type: !1960, isLocal: true, isDefinition: true, variable: [66 x i8]* @sizeof_doc)
!1960 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 528, align: 8, elements: !1961)
!1961 = !{!1962}
!1962 = !DISubrange(count: 66)
!1963 = !DIGlobalVariable(name: "append__doc__", scope: !0, file: !458, line: 2284, type: !1964, isLocal: true, isDefinition: true, variable: [61 x i8]* @append__doc__)
!1964 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 488, align: 8, elements: !1965)
!1965 = !{!1966}
!1966 = !DISubrange(count: 61)
!1967 = !DIGlobalVariable(name: "center__doc__", scope: !0, file: !839, line: 183, type: !1968, isLocal: true, isDefinition: true, variable: [163 x i8]* @center__doc__)
!1968 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1304, align: 8, elements: !1969)
!1969 = !{!1970}
!1970 = !DISubrange(count: 163)
!1971 = !DIGlobalVariable(name: "clear__doc__", scope: !0, file: !458, line: 1222, type: !1972, isLocal: true, isDefinition: true, variable: [44 x i8]* @clear__doc__)
!1972 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 352, align: 8, elements: !1973)
!1973 = !{!1974}
!1974 = !DISubrange(count: 44)
!1975 = !DIGlobalVariable(name: "copy__doc__", scope: !0, file: !458, line: 1235, type: !1976, isLocal: true, isDefinition: true, variable: [43 x i8]* @copy__doc__)
!1976 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 344, align: 8, elements: !1977)
!1977 = !{!1978}
!1978 = !DISubrange(count: 43)
!1979 = !DIGlobalVariable(name: "count__doc__", scope: !0, file: !458, line: 1175, type: !1980, isLocal: true, isDefinition: true, variable: [199 x i8]* @count__doc__)
!1980 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1592, align: 8, elements: !1981)
!1981 = !{!1982}
!1982 = !DISubrange(count: 199)
!1983 = !DIGlobalVariable(name: "kwlist", scope: !916, file: !458, line: 2598, type: !1984, isLocal: true, isDefinition: true, variable: [3 x i8*]* @bytearray_decode.kwlist)
!1984 = !DICompositeType(tag: DW_TAG_array_type, baseType: !58, size: 192, align: 64, elements: !1985)
!1985 = !{!1986}
!1986 = !DISubrange(count: 3)
!1987 = !DIGlobalVariable(name: "decode_doc", scope: !0, file: !458, line: 2583, type: !1988, isLocal: true, isDefinition: true, variable: [429 x i8]* @decode_doc)
!1988 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 3432, align: 8, elements: !1989)
!1989 = !{!1990}
!1990 = !DISubrange(count: 429)
!1991 = !DIGlobalVariable(name: "endswith__doc__", scope: !0, file: !458, line: 1416, type: !1992, isLocal: true, isDefinition: true, variable: [264 x i8]* @endswith__doc__)
!1992 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 2112, align: 8, elements: !1993)
!1993 = !{!1994}
!1994 = !DISubrange(count: 264)
!1995 = !DIGlobalVariable(name: "kwlist", scope: !947, file: !839, line: 20, type: !1996, isLocal: true, isDefinition: true, variable: [2 x i8*]* @stringlib_expandtabs.kwlist)
!1996 = !DICompositeType(tag: DW_TAG_array_type, baseType: !58, size: 128, align: 64, elements: !1997)
!1997 = !{!1998}
!1998 = !DISubrange(count: 2)
!1999 = !DIGlobalVariable(name: "expandtabs__doc__", scope: !0, file: !839, line: 7, type: !2000, isLocal: true, isDefinition: true, variable: [173 x i8]* @expandtabs__doc__)
!2000 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1384, align: 8, elements: !2001)
!2001 = !{!2002}
!2002 = !DISubrange(count: 173)
!2003 = !DIGlobalVariable(name: "extend__doc__", scope: !0, file: !458, line: 2309, type: !2004, isLocal: true, isDefinition: true, variable: [107 x i8]* @extend__doc__)
!2004 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 856, align: 8, elements: !2005)
!2005 = !{!2006}
!2006 = !DISubrange(count: 107)
!2007 = !DIGlobalVariable(name: "find__doc__", scope: !0, file: !458, line: 1157, type: !2008, isLocal: true, isDefinition: true, variable: [239 x i8]* @find__doc__)
!2008 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1912, align: 8, elements: !2009)
!2009 = !{!2010}
!2010 = !DISubrange(count: 239)
!2011 = !DIGlobalVariable(name: "fromhex_doc", scope: !0, file: !458, line: 2653, type: !2012, isLocal: true, isDefinition: true, variable: [230 x i8]* @fromhex_doc)
!2012 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1840, align: 8, elements: !2013)
!2013 = !{!2014}
!2014 = !DISubrange(count: 230)
!2015 = !DIGlobalVariable(name: "index__doc__", scope: !0, file: !458, line: 1247, type: !2016, isLocal: true, isDefinition: true, variable: [106 x i8]* @index__doc__)
!2016 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 848, align: 8, elements: !2017)
!2017 = !{!2018}
!2018 = !DISubrange(count: 106)
!2019 = !DIGlobalVariable(name: "insert__doc__", scope: !0, file: !458, line: 2245, type: !2020, isLocal: true, isDefinition: true, variable: [94 x i8]* @insert__doc__)
!2020 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 752, align: 8, elements: !2021)
!2021 = !{!2022}
!2022 = !DISubrange(count: 94)
!2023 = !DIGlobalVariable(name: "join_doc", scope: !0, file: !458, line: 2618, type: !2024, isLocal: true, isDefinition: true, variable: [162 x i8]* @join_doc)
!2024 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1296, align: 8, elements: !2025)
!2025 = !{!2026}
!2026 = !DISubrange(count: 162)
!2027 = !DIGlobalVariable(name: "ljust__doc__", scope: !0, file: !839, line: 123, type: !2028, isLocal: true, isDefinition: true, variable: [167 x i8]* @ljust__doc__)
!2028 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1336, align: 8, elements: !2029)
!2029 = !{!2030}
!2030 = !DISubrange(count: 167)
!2031 = !DIGlobalVariable(name: "lstrip__doc__", scope: !0, file: !458, line: 2516, type: !2032, isLocal: true, isDefinition: true, variable: [180 x i8]* @lstrip__doc__)
!2032 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1440, align: 8, elements: !2033)
!2033 = !{!2034}
!2034 = !DISubrange(count: 180)
!2035 = !DIGlobalVariable(name: "partition__doc__", scope: !0, file: !458, line: 2128, type: !2036, isLocal: true, isDefinition: true, variable: [225 x i8]* @partition__doc__)
!2036 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1800, align: 8, elements: !2037)
!2037 = !{!2038}
!2038 = !DISubrange(count: 225)
!2039 = !DIGlobalVariable(name: "pop__doc__", scope: !0, file: !458, line: 2387, type: !2040, isLocal: true, isDefinition: true, variable: [119 x i8]* @pop__doc__)
!2040 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 952, align: 8, elements: !2041)
!2041 = !{!2042}
!2042 = !DISubrange(count: 119)
!2043 = !DIGlobalVariable(name: "remove__doc__", scope: !0, file: !458, line: 2425, type: !2044, isLocal: true, isDefinition: true, variable: [68 x i8]* @remove__doc__)
!2044 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 544, align: 8, elements: !2045)
!2045 = !{!2046}
!2046 = !DISubrange(count: 68)
!2047 = !DIGlobalVariable(name: "replace__doc__", scope: !0, file: !458, line: 2056, type: !2048, isLocal: true, isDefinition: true, variable: [207 x i8]* @replace__doc__)
!2048 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1656, align: 8, elements: !2049)
!2049 = !{!2050}
!2050 = !DISubrange(count: 207)
!2051 = !DIGlobalVariable(name: "reverse__doc__", scope: !0, file: !458, line: 2223, type: !2044, isLocal: true, isDefinition: true, variable: [68 x i8]* @reverse__doc__)
!2052 = !DIGlobalVariable(name: "rfind__doc__", scope: !0, file: !458, line: 1267, type: !2053, isLocal: true, isDefinition: true, variable: [241 x i8]* @rfind__doc__)
!2053 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1928, align: 8, elements: !2054)
!2054 = !{!2055}
!2055 = !DISubrange(count: 241)
!2056 = !DIGlobalVariable(name: "rindex__doc__", scope: !0, file: !458, line: 1286, type: !2057, isLocal: true, isDefinition: true, variable: [108 x i8]* @rindex__doc__)
!2057 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 864, align: 8, elements: !2058)
!2058 = !{!2059}
!2059 = !DISubrange(count: 108)
!2060 = !DIGlobalVariable(name: "rjust__doc__", scope: !0, file: !839, line: 153, type: !2028, isLocal: true, isDefinition: true, variable: [167 x i8]* @rjust__doc__)
!2061 = !DIGlobalVariable(name: "rpartition__doc__", scope: !0, file: !458, line: 2155, type: !2062, isLocal: true, isDefinition: true, variable: [252 x i8]* @rpartition__doc__)
!2062 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 2016, align: 8, elements: !2063)
!2063 = !{!2064}
!2064 = !DISubrange(count: 252)
!2065 = !DIGlobalVariable(name: "kwlist", scope: !1458, file: !458, line: 2195, type: !1984, isLocal: true, isDefinition: true, variable: [3 x i8*]* @bytearray_rsplit.kwlist)
!2066 = !DIGlobalVariable(name: "rsplit__doc__", scope: !0, file: !458, line: 2183, type: !2067, isLocal: true, isDefinition: true, variable: [344 x i8]* @rsplit__doc__)
!2067 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 2752, align: 8, elements: !2068)
!2068 = !{!2069}
!2069 = !DISubrange(count: 344)
!2070 = !DIGlobalVariable(name: "rstrip__doc__", scope: !0, file: !458, line: 2550, type: !2071, isLocal: true, isDefinition: true, variable: [182 x i8]* @rstrip__doc__)
!2071 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1456, align: 8, elements: !2072)
!2072 = !{!2073}
!2073 = !DISubrange(count: 182)
!2074 = !DIGlobalVariable(name: "kwlist", scope: !1608, file: !458, line: 2100, type: !1984, isLocal: true, isDefinition: true, variable: [3 x i8*]* @bytearray_split.kwlist)
!2075 = !DIGlobalVariable(name: "split__doc__", scope: !0, file: !458, line: 2089, type: !2076, isLocal: true, isDefinition: true, variable: [292 x i8]* @split__doc__)
!2076 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 2336, align: 8, elements: !2077)
!2077 = !{!2078}
!2078 = !DISubrange(count: 292)
!2079 = !DIGlobalVariable(name: "kwlist", scope: !1732, file: !458, line: 2640, type: !1996, isLocal: true, isDefinition: true, variable: [2 x i8*]* @bytearray_splitlines.kwlist)
!2080 = !DIGlobalVariable(name: "splitlines__doc__", scope: !0, file: !458, line: 2630, type: !2081, isLocal: true, isDefinition: true, variable: [191 x i8]* @splitlines__doc__)
!2081 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1528, align: 8, elements: !2082)
!2082 = !{!2083}
!2083 = !DISubrange(count: 191)
!2084 = !DIGlobalVariable(name: "startswith__doc__", scope: !0, file: !458, line: 1373, type: !2085, isLocal: true, isDefinition: true, variable: [268 x i8]* @startswith__doc__)
!2085 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 2144, align: 8, elements: !2086)
!2086 = !{!2087}
!2087 = !DISubrange(count: 268)
!2088 = !DIGlobalVariable(name: "strip__doc__", scope: !0, file: !458, line: 2479, type: !2089, isLocal: true, isDefinition: true, variable: [184 x i8]* @strip__doc__)
!2089 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1472, align: 8, elements: !2090)
!2090 = !{!2091}
!2091 = !DISubrange(count: 184)
!2092 = !DIGlobalVariable(name: "translate__doc__", scope: !0, file: !458, line: 1460, type: !2093, isLocal: true, isDefinition: true, variable: [276 x i8]* @translate__doc__)
!2093 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 2208, align: 8, elements: !2094)
!2094 = !{!2095}
!2095 = !DISubrange(count: 276)
!2096 = !DIGlobalVariable(name: "zfill__doc__", scope: !0, file: !839, line: 216, type: !2097, isLocal: true, isDefinition: true, variable: [139 x i8]* @zfill__doc__)
!2097 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 1112, align: 8, elements: !2098)
!2098 = !{!2099}
!2099 = !DISubrange(count: 139)
!2100 = !DIGlobalVariable(name: "kwlist", scope: !1835, file: !458, line: 747, type: !2101, isLocal: true, isDefinition: true, variable: [4 x i8*]* @bytearray_init.kwlist)
!2101 = !DICompositeType(tag: DW_TAG_array_type, baseType: !58, size: 256, align: 64, elements: !2102)
!2102 = !{!2103}
!2103 = !DISubrange(count: 4)
!2104 = !DIGlobalVariable(name: "bytearrayiter_methods", scope: !0, file: !458, line: 3040, type: !2105, isLocal: true, isDefinition: true, variable: [4 x %struct.PyMethodDef]* @bytearrayiter_methods)
!2105 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1939, size: 1024, align: 64, elements: !2102)
!2106 = !DIGlobalVariable(name: "length_hint_doc", scope: !0, file: !458, line: 3005, type: !2107, isLocal: true, isDefinition: true, variable: [55 x i8]* @length_hint_doc)
!2107 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 440, align: 8, elements: !2108)
!2108 = !{!2109}
!2109 = !DISubrange(count: 55)
!2110 = !DIGlobalVariable(name: "setstate_doc", scope: !0, file: !458, line: 3038, type: !2111, isLocal: true, isDefinition: true, variable: [38 x i8]* @setstate_doc)
!2111 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 304, align: 8, elements: !2112)
!2112 = !{!2113}
!2113 = !DISubrange(count: 38)
!2114 = !{i32 2, !"Dwarf Version", i32 4}
!2115 = !{i32 2, !"Debug Info Version", i32 3}
!2116 = !{!"clang version 3.7.1 (https://github.com/llvm-mirror/clang.git 0dbefa1b83eb90f7a06b5df5df254ce32be3db4b) (git@github.com:kim-yoonseung/llvm.git e8e68907a8135028089af4d924da468e2b7257fa)"}
!2117 = !DILocation(line: 13, column: 1, scope: !465)
!2118 = !DILocation(line: 18, column: 5, scope: !469)
!2119 = !{!2120, !2120, i64 0}
!2120 = !{!"any pointer", !2121, i64 0}
!2121 = !{!"omnipotent char", !2122, i64 0}
!2122 = !{!"Simple C/C++ TBAA"}
!2123 = !DIExpression()
!2124 = !DILocation(line: 109, column: 34, scope: !472)
!2125 = !DILocation(line: 112, column: 41, scope: !472)
!2126 = !DILocation(line: 111, column: 12, scope: !472)
!2127 = !DILocation(line: 111, column: 5, scope: !472)
!2128 = !DILocation(line: 116, column: 43, scope: !475)
!2129 = !{!2130, !2130, i64 0}
!2130 = !{!"long", !2121, i64 0}
!2131 = !DILocation(line: 116, column: 61, scope: !475)
!2132 = !DILocation(line: 118, column: 5, scope: !475)
!2133 = !DILocation(line: 118, column: 24, scope: !475)
!2134 = !DILocation(line: 119, column: 5, scope: !475)
!2135 = !DILocation(line: 119, column: 16, scope: !475)
!2136 = !DILocation(line: 121, column: 9, scope: !2137)
!2137 = distinct !DILexicalBlock(scope: !475, file: !458, line: 121, column: 9)
!2138 = !DILocation(line: 121, column: 14, scope: !2137)
!2139 = !DILocation(line: 121, column: 9, scope: !475)
!2140 = !DILocation(line: 122, column: 25, scope: !2141)
!2141 = distinct !DILexicalBlock(scope: !2137, file: !458, line: 121, column: 19)
!2142 = !DILocation(line: 122, column: 9, scope: !2141)
!2143 = !DILocation(line: 124, column: 9, scope: !2141)
!2144 = !DILocation(line: 128, column: 9, scope: !2145)
!2145 = distinct !DILexicalBlock(scope: !475, file: !458, line: 128, column: 9)
!2146 = !DILocation(line: 128, column: 14, scope: !2145)
!2147 = !DILocation(line: 128, column: 9, scope: !475)
!2148 = !DILocation(line: 129, column: 16, scope: !2149)
!2149 = distinct !DILexicalBlock(scope: !2145, file: !458, line: 128, column: 50)
!2150 = !DILocation(line: 129, column: 9, scope: !2149)
!2151 = !DILocation(line: 132, column: 35, scope: !475)
!2152 = !DILocation(line: 132, column: 13, scope: !475)
!2153 = !DILocation(line: 132, column: 9, scope: !475)
!2154 = !DILocation(line: 133, column: 9, scope: !2155)
!2155 = distinct !DILexicalBlock(scope: !475, file: !458, line: 133, column: 9)
!2156 = !DILocation(line: 133, column: 13, scope: !2155)
!2157 = !DILocation(line: 133, column: 9, scope: !475)
!2158 = !DILocation(line: 134, column: 9, scope: !2155)
!2159 = !DILocation(line: 136, column: 9, scope: !488)
!2160 = !DILocation(line: 136, column: 14, scope: !488)
!2161 = !DILocation(line: 136, column: 9, scope: !475)
!2162 = !DILocation(line: 137, column: 9, scope: !2163)
!2163 = distinct !DILexicalBlock(scope: !488, file: !458, line: 136, column: 20)
!2164 = !DILocation(line: 137, column: 14, scope: !2163)
!2165 = !DILocation(line: 137, column: 23, scope: !2163)
!2166 = !{!2167, !2120, i64 32}
!2167 = !{!"", !2168, i64 0, !2130, i64 24, !2120, i64 32, !2120, i64 40, !2170, i64 48}
!2168 = !{!"", !2169, i64 0, !2130, i64 16}
!2169 = !{!"_object", !2130, i64 0, !2120, i64 8}
!2170 = !{!"int", !2121, i64 0}
!2171 = !DILocation(line: 138, column: 15, scope: !2163)
!2172 = !DILocation(line: 139, column: 5, scope: !2163)
!2173 = !DILocation(line: 141, column: 17, scope: !487)
!2174 = !DILocation(line: 141, column: 22, scope: !487)
!2175 = !DILocation(line: 141, column: 15, scope: !487)
!2176 = !DILocation(line: 142, column: 41, scope: !487)
!2177 = !DILocation(line: 142, column: 25, scope: !487)
!2178 = !DILocation(line: 142, column: 9, scope: !487)
!2179 = !DILocation(line: 142, column: 14, scope: !487)
!2180 = !DILocation(line: 142, column: 23, scope: !487)
!2181 = !DILocation(line: 143, column: 13, scope: !486)
!2182 = !DILocation(line: 143, column: 18, scope: !486)
!2183 = !DILocation(line: 143, column: 27, scope: !486)
!2184 = !DILocation(line: 143, column: 13, scope: !487)
!2185 = !DILocation(line: 144, column: 13, scope: !485)
!2186 = !DILocation(line: 144, column: 18, scope: !2187)
!2187 = !DILexicalBlockFile(scope: !484, file: !458, discriminator: 1)
!2188 = !DILocation(line: 144, column: 28, scope: !484)
!2189 = !DILocation(line: 144, column: 58, scope: !484)
!2190 = !DILocation(line: 144, column: 45, scope: !484)
!2191 = !DILocation(line: 144, column: 72, scope: !2192)
!2192 = distinct !DILexicalBlock(scope: !484, file: !458, line: 144, column: 69)
!2193 = !DILocation(line: 144, column: 89, scope: !2192)
!2194 = !DILocation(line: 144, column: 69, scope: !2192)
!2195 = !{!2169, !2130, i64 0}
!2196 = !DILocation(line: 144, column: 99, scope: !2192)
!2197 = !DILocation(line: 144, column: 69, scope: !484)
!2198 = !DILocation(line: 144, column: 69, scope: !2199)
!2199 = !DILexicalBlockFile(scope: !484, file: !458, discriminator: 2)
!2200 = !DILocation(line: 144, column: 130, scope: !2201)
!2201 = !DILexicalBlockFile(scope: !2192, file: !458, discriminator: 3)
!2202 = !DILocation(line: 144, column: 148, scope: !2192)
!2203 = !{!2169, !2120, i64 8}
!2204 = !DILocation(line: 144, column: 158, scope: !2192)
!2205 = !{!2206, !2120, i64 48}
!2206 = !{!"_typeobject", !2168, i64 0, !2120, i64 24, !2130, i64 32, !2130, i64 40, !2120, i64 48, !2120, i64 56, !2120, i64 64, !2120, i64 72, !2120, i64 80, !2120, i64 88, !2120, i64 96, !2120, i64 104, !2120, i64 112, !2120, i64 120, !2120, i64 128, !2120, i64 136, !2120, i64 144, !2120, i64 152, !2120, i64 160, !2130, i64 168, !2120, i64 176, !2120, i64 184, !2120, i64 192, !2120, i64 200, !2130, i64 208, !2120, i64 216, !2120, i64 224, !2120, i64 232, !2120, i64 240, !2120, i64 248, !2120, i64 256, !2120, i64 264, !2120, i64 272, !2120, i64 280, !2130, i64 288, !2120, i64 296, !2120, i64 304, !2120, i64 312, !2120, i64 320, !2120, i64 328, !2120, i64 336, !2120, i64 344, !2120, i64 352, !2120, i64 360, !2120, i64 368, !2120, i64 376, !2170, i64 384, !2120, i64 392}
!2207 = !DILocation(line: 144, column: 183, scope: !2192)
!2208 = !DILocation(line: 144, column: 114, scope: !2192)
!2209 = !DILocation(line: 144, column: 202, scope: !2210)
!2210 = !DILexicalBlockFile(scope: !485, file: !458, discriminator: 4)
!2211 = !DILocation(line: 144, column: 202, scope: !484)
!2212 = !DILocation(line: 144, column: 202, scope: !2213)
!2213 = !DILexicalBlockFile(scope: !484, file: !458, discriminator: 5)
!2214 = !DILocation(line: 145, column: 20, scope: !485)
!2215 = !DILocation(line: 145, column: 13, scope: !485)
!2216 = !DILocation(line: 147, column: 13, scope: !2217)
!2217 = distinct !DILexicalBlock(scope: !487, file: !458, line: 147, column: 13)
!2218 = !DILocation(line: 147, column: 19, scope: !2217)
!2219 = !DILocation(line: 147, column: 33, scope: !2217)
!2220 = !DILocation(line: 147, column: 36, scope: !2221)
!2221 = !DILexicalBlockFile(scope: !2217, file: !458, discriminator: 1)
!2222 = !DILocation(line: 147, column: 41, scope: !2217)
!2223 = !DILocation(line: 147, column: 13, scope: !487)
!2224 = !DILocation(line: 148, column: 20, scope: !2217)
!2225 = !DILocation(line: 148, column: 25, scope: !2217)
!2226 = !DILocation(line: 148, column: 35, scope: !2217)
!2227 = !DILocation(line: 148, column: 42, scope: !2217)
!2228 = !DILocation(line: 148, column: 13, scope: !2217)
!2229 = !DILocation(line: 149, column: 23, scope: !487)
!2230 = !DILocation(line: 149, column: 9, scope: !487)
!2231 = !DILocation(line: 149, column: 14, scope: !487)
!2232 = !DILocation(line: 149, column: 29, scope: !487)
!2233 = !{!2121, !2121, i64 0}
!2234 = !DILocation(line: 151, column: 40, scope: !475)
!2235 = !DILocation(line: 151, column: 22, scope: !475)
!2236 = !DILocation(line: 151, column: 7, scope: !475)
!2237 = !DILocation(line: 151, column: 29, scope: !475)
!2238 = !DILocation(line: 151, column: 38, scope: !475)
!2239 = !{!2168, !2130, i64 16}
!2240 = !DILocation(line: 152, column: 21, scope: !475)
!2241 = !DILocation(line: 152, column: 5, scope: !475)
!2242 = !DILocation(line: 152, column: 10, scope: !475)
!2243 = !DILocation(line: 152, column: 19, scope: !475)
!2244 = !{!2167, !2130, i64 24}
!2245 = !DILocation(line: 153, column: 21, scope: !475)
!2246 = !DILocation(line: 153, column: 26, scope: !475)
!2247 = !DILocation(line: 153, column: 5, scope: !475)
!2248 = !DILocation(line: 153, column: 10, scope: !475)
!2249 = !DILocation(line: 153, column: 19, scope: !475)
!2250 = !{!2167, !2120, i64 40}
!2251 = !DILocation(line: 154, column: 5, scope: !475)
!2252 = !DILocation(line: 154, column: 10, scope: !475)
!2253 = !DILocation(line: 154, column: 21, scope: !475)
!2254 = !{!2167, !2170, i64 48}
!2255 = !DILocation(line: 156, column: 24, scope: !475)
!2256 = !DILocation(line: 156, column: 12, scope: !475)
!2257 = !DILocation(line: 156, column: 5, scope: !475)
!2258 = !DILocation(line: 157, column: 1, scope: !475)
!2259 = !DILocation(line: 160, column: 28, scope: !489)
!2260 = !DILocation(line: 165, column: 44, scope: !489)
!2261 = !DILocation(line: 165, column: 29, scope: !489)
!2262 = !DILocation(line: 165, column: 52, scope: !489)
!2263 = !DILocation(line: 165, column: 5, scope: !489)
!2264 = !DILocation(line: 169, column: 32, scope: !492)
!2265 = !DILocation(line: 174, column: 44, scope: !492)
!2266 = !DILocation(line: 174, column: 29, scope: !492)
!2267 = !DILocation(line: 174, column: 52, scope: !492)
!2268 = !DILocation(line: 174, column: 27, scope: !492)
!2269 = !DILocation(line: 174, column: 86, scope: !2270)
!2270 = !DILexicalBlockFile(scope: !492, file: !458, discriminator: 1)
!2271 = !DILocation(line: 174, column: 64, scope: !492)
!2272 = !DILocation(line: 174, column: 94, scope: !492)
!2273 = !DILocation(line: 174, column: 27, scope: !2274)
!2274 = !DILexicalBlockFile(scope: !492, file: !458, discriminator: 2)
!2275 = !DILocation(line: 174, column: 5, scope: !2276)
!2276 = !DILexicalBlockFile(scope: !2277, file: !458, discriminator: 4)
!2277 = !DILexicalBlockFile(scope: !492, file: !458, discriminator: 3)
!2278 = !DILocation(line: 178, column: 30, scope: !497)
!2279 = !DILocation(line: 178, column: 47, scope: !497)
!2280 = !DILocation(line: 180, column: 5, scope: !497)
!2281 = !DILocation(line: 180, column: 11, scope: !497)
!2282 = !DILocation(line: 181, column: 5, scope: !497)
!2283 = !DILocation(line: 181, column: 24, scope: !497)
!2284 = !DILocation(line: 181, column: 52, scope: !497)
!2285 = !DILocation(line: 181, column: 31, scope: !497)
!2286 = !DILocation(line: 182, column: 5, scope: !497)
!2287 = !DILocation(line: 182, column: 16, scope: !497)
!2288 = !DILocation(line: 182, column: 24, scope: !497)
!2289 = !DILocation(line: 182, column: 29, scope: !497)
!2290 = !DILocation(line: 183, column: 5, scope: !497)
!2291 = !DILocation(line: 183, column: 16, scope: !497)
!2292 = !DILocation(line: 183, column: 33, scope: !497)
!2293 = !DILocation(line: 183, column: 38, scope: !497)
!2294 = !DILocation(line: 183, column: 49, scope: !497)
!2295 = !DILocation(line: 183, column: 54, scope: !497)
!2296 = !DILocation(line: 183, column: 47, scope: !497)
!2297 = !DILocation(line: 191, column: 9, scope: !2298)
!2298 = distinct !DILexicalBlock(scope: !497, file: !458, line: 191, column: 9)
!2299 = !DILocation(line: 191, column: 34, scope: !2298)
!2300 = !DILocation(line: 191, column: 19, scope: !2298)
!2301 = !DILocation(line: 191, column: 42, scope: !2298)
!2302 = !DILocation(line: 191, column: 14, scope: !2298)
!2303 = !DILocation(line: 191, column: 9, scope: !497)
!2304 = !DILocation(line: 192, column: 9, scope: !2305)
!2305 = distinct !DILexicalBlock(scope: !2298, file: !458, line: 191, column: 52)
!2306 = !DILocation(line: 194, column: 21, scope: !2307)
!2307 = distinct !DILexicalBlock(scope: !497, file: !458, line: 194, column: 9)
!2308 = !DILocation(line: 194, column: 10, scope: !2307)
!2309 = !DILocation(line: 194, column: 9, scope: !497)
!2310 = !DILocation(line: 195, column: 9, scope: !2311)
!2311 = distinct !DILexicalBlock(scope: !2307, file: !458, line: 194, column: 27)
!2312 = !DILocation(line: 198, column: 9, scope: !2313)
!2313 = distinct !DILexicalBlock(scope: !497, file: !458, line: 198, column: 9)
!2314 = !DILocation(line: 198, column: 16, scope: !2313)
!2315 = !DILocation(line: 198, column: 14, scope: !2313)
!2316 = !DILocation(line: 198, column: 31, scope: !2313)
!2317 = !DILocation(line: 198, column: 37, scope: !2313)
!2318 = !DILocation(line: 198, column: 35, scope: !2313)
!2319 = !DILocation(line: 198, column: 9, scope: !497)
!2320 = !DILocation(line: 201, column: 13, scope: !2321)
!2321 = distinct !DILexicalBlock(scope: !2322, file: !458, line: 201, column: 13)
!2322 = distinct !DILexicalBlock(scope: !2313, file: !458, line: 198, column: 44)
!2323 = !DILocation(line: 201, column: 20, scope: !2321)
!2324 = !DILocation(line: 201, column: 26, scope: !2321)
!2325 = !DILocation(line: 201, column: 18, scope: !2321)
!2326 = !DILocation(line: 201, column: 13, scope: !2322)
!2327 = !DILocation(line: 203, column: 21, scope: !2328)
!2328 = distinct !DILexicalBlock(scope: !2321, file: !458, line: 201, column: 31)
!2329 = !DILocation(line: 203, column: 26, scope: !2328)
!2330 = !DILocation(line: 203, column: 19, scope: !2328)
!2331 = !DILocation(line: 204, column: 9, scope: !2328)
!2332 = !DILocation(line: 207, column: 49, scope: !2333)
!2333 = distinct !DILexicalBlock(scope: !2321, file: !458, line: 205, column: 14)
!2334 = !DILocation(line: 207, column: 30, scope: !2333)
!2335 = !DILocation(line: 207, column: 15, scope: !2333)
!2336 = !DILocation(line: 207, column: 38, scope: !2333)
!2337 = !DILocation(line: 207, column: 47, scope: !2333)
!2338 = !DILocation(line: 208, column: 133, scope: !2333)
!2339 = !DILocation(line: 208, column: 45, scope: !2333)
!2340 = !DILocation(line: 208, column: 30, scope: !2333)
!2341 = !DILocation(line: 208, column: 53, scope: !2333)
!2342 = !DILocation(line: 208, column: 28, scope: !2333)
!2343 = !DILocation(line: 208, column: 87, scope: !2344)
!2344 = !DILexicalBlockFile(scope: !2333, file: !458, discriminator: 1)
!2345 = !DILocation(line: 208, column: 65, scope: !2333)
!2346 = !DILocation(line: 208, column: 95, scope: !2333)
!2347 = !DILocation(line: 208, column: 28, scope: !2348)
!2348 = !DILexicalBlockFile(scope: !2333, file: !458, discriminator: 2)
!2349 = !DILocation(line: 208, column: 13, scope: !2350)
!2350 = !DILexicalBlockFile(scope: !2351, file: !458, discriminator: 4)
!2351 = !DILexicalBlockFile(scope: !2333, file: !458, discriminator: 3)
!2352 = !DILocation(line: 208, column: 139, scope: !2333)
!2353 = !DILocation(line: 209, column: 13, scope: !2333)
!2354 = !DILocation(line: 211, column: 5, scope: !2322)
!2355 = !DILocation(line: 214, column: 13, scope: !2356)
!2356 = distinct !DILexicalBlock(scope: !2357, file: !458, line: 214, column: 13)
!2357 = distinct !DILexicalBlock(scope: !2313, file: !458, line: 212, column: 10)
!2358 = !DILocation(line: 214, column: 21, scope: !2356)
!2359 = !DILocation(line: 214, column: 27, scope: !2356)
!2360 = !DILocation(line: 214, column: 18, scope: !2356)
!2361 = !DILocation(line: 214, column: 13, scope: !2357)
!2362 = !DILocation(line: 216, column: 21, scope: !2363)
!2363 = distinct !DILexicalBlock(scope: !2356, file: !458, line: 214, column: 36)
!2364 = !DILocation(line: 216, column: 29, scope: !2363)
!2365 = !DILocation(line: 216, column: 34, scope: !2363)
!2366 = !DILocation(line: 216, column: 26, scope: !2363)
!2367 = !DILocation(line: 216, column: 43, scope: !2363)
!2368 = !DILocation(line: 216, column: 48, scope: !2363)
!2369 = !DILocation(line: 216, column: 42, scope: !2363)
!2370 = !DILocation(line: 216, column: 40, scope: !2363)
!2371 = !DILocation(line: 216, column: 19, scope: !2363)
!2372 = !DILocation(line: 217, column: 9, scope: !2363)
!2373 = !DILocation(line: 220, column: 21, scope: !2374)
!2374 = distinct !DILexicalBlock(scope: !2356, file: !458, line: 218, column: 14)
!2375 = !DILocation(line: 220, column: 26, scope: !2374)
!2376 = !DILocation(line: 220, column: 19, scope: !2374)
!2377 = !DILocation(line: 224, column: 9, scope: !2378)
!2378 = distinct !DILexicalBlock(scope: !497, file: !458, line: 224, column: 9)
!2379 = !DILocation(line: 224, column: 24, scope: !2378)
!2380 = !DILocation(line: 224, column: 9, scope: !497)
!2381 = !DILocation(line: 225, column: 32, scope: !2382)
!2382 = distinct !DILexicalBlock(scope: !2378, file: !458, line: 224, column: 29)
!2383 = !DILocation(line: 225, column: 16, scope: !2382)
!2384 = !DILocation(line: 225, column: 14, scope: !2382)
!2385 = !DILocation(line: 226, column: 13, scope: !2386)
!2386 = distinct !DILexicalBlock(scope: !2382, file: !458, line: 226, column: 13)
!2387 = !DILocation(line: 226, column: 18, scope: !2386)
!2388 = !DILocation(line: 226, column: 13, scope: !2382)
!2389 = !DILocation(line: 227, column: 13, scope: !2390)
!2390 = distinct !DILexicalBlock(scope: !2386, file: !458, line: 226, column: 33)
!2391 = !DILocation(line: 228, column: 13, scope: !2390)
!2392 = !DILocation(line: 230, column: 16, scope: !2382)
!2393 = !DILocation(line: 230, column: 54, scope: !2382)
!2394 = !DILocation(line: 230, column: 39, scope: !2382)
!2395 = !DILocation(line: 230, column: 62, scope: !2382)
!2396 = !DILocation(line: 230, column: 37, scope: !2382)
!2397 = !DILocation(line: 230, column: 96, scope: !2398)
!2398 = !DILexicalBlockFile(scope: !2382, file: !458, discriminator: 1)
!2399 = !DILocation(line: 230, column: 74, scope: !2382)
!2400 = !DILocation(line: 230, column: 104, scope: !2382)
!2401 = !DILocation(line: 230, column: 37, scope: !2402)
!2402 = !DILexicalBlockFile(scope: !2382, file: !458, discriminator: 2)
!2403 = !DILocation(line: 230, column: 146, scope: !2404)
!2404 = !DILexicalBlockFile(scope: !2405, file: !458, discriminator: 4)
!2405 = !DILexicalBlockFile(scope: !2382, file: !458, discriminator: 3)
!2406 = !DILocation(line: 230, column: 172, scope: !2382)
!2407 = !DILocation(line: 230, column: 157, scope: !2382)
!2408 = !DILocation(line: 230, column: 180, scope: !2382)
!2409 = !DILocation(line: 230, column: 152, scope: !2382)
!2410 = !DILocation(line: 230, column: 144, scope: !2382)
!2411 = !DILocation(line: 230, column: 211, scope: !2412)
!2412 = !DILexicalBlockFile(scope: !2382, file: !458, discriminator: 5)
!2413 = !DILocation(line: 230, column: 196, scope: !2382)
!2414 = !DILocation(line: 230, column: 219, scope: !2382)
!2415 = !DILocation(line: 230, column: 232, scope: !2416)
!2416 = !DILexicalBlockFile(scope: !2382, file: !458, discriminator: 6)
!2417 = !DILocation(line: 230, column: 9, scope: !2418)
!2418 = !DILexicalBlockFile(scope: !2419, file: !458, discriminator: 8)
!2419 = !DILexicalBlockFile(scope: !2382, file: !458, discriminator: 7)
!2420 = !DILocation(line: 231, column: 23, scope: !2382)
!2421 = !DILocation(line: 231, column: 28, scope: !2382)
!2422 = !DILocation(line: 231, column: 9, scope: !2382)
!2423 = !DILocation(line: 232, column: 5, scope: !2382)
!2424 = !DILocation(line: 234, column: 33, scope: !2425)
!2425 = distinct !DILexicalBlock(scope: !2378, file: !458, line: 233, column: 10)
!2426 = !DILocation(line: 234, column: 38, scope: !2425)
!2427 = !DILocation(line: 234, column: 48, scope: !2425)
!2428 = !DILocation(line: 234, column: 16, scope: !2425)
!2429 = !DILocation(line: 234, column: 14, scope: !2425)
!2430 = !DILocation(line: 235, column: 13, scope: !2431)
!2431 = distinct !DILexicalBlock(scope: !2425, file: !458, line: 235, column: 13)
!2432 = !DILocation(line: 235, column: 18, scope: !2431)
!2433 = !DILocation(line: 235, column: 13, scope: !2425)
!2434 = !DILocation(line: 236, column: 13, scope: !2435)
!2435 = distinct !DILexicalBlock(scope: !2431, file: !458, line: 235, column: 33)
!2436 = !DILocation(line: 237, column: 13, scope: !2435)
!2437 = !DILocation(line: 241, column: 37, scope: !497)
!2438 = !DILocation(line: 241, column: 21, scope: !497)
!2439 = !DILocation(line: 241, column: 26, scope: !497)
!2440 = !DILocation(line: 241, column: 35, scope: !497)
!2441 = !DILocation(line: 241, column: 5, scope: !497)
!2442 = !DILocation(line: 241, column: 10, scope: !497)
!2443 = !DILocation(line: 241, column: 19, scope: !497)
!2444 = !DILocation(line: 242, column: 41, scope: !497)
!2445 = !DILocation(line: 242, column: 22, scope: !497)
!2446 = !DILocation(line: 242, column: 7, scope: !497)
!2447 = !DILocation(line: 242, column: 30, scope: !497)
!2448 = !DILocation(line: 242, column: 39, scope: !497)
!2449 = !DILocation(line: 243, column: 21, scope: !497)
!2450 = !DILocation(line: 243, column: 5, scope: !497)
!2451 = !DILocation(line: 243, column: 10, scope: !497)
!2452 = !DILocation(line: 243, column: 19, scope: !497)
!2453 = !DILocation(line: 244, column: 19, scope: !497)
!2454 = !DILocation(line: 244, column: 5, scope: !497)
!2455 = !DILocation(line: 244, column: 10, scope: !497)
!2456 = !DILocation(line: 244, column: 25, scope: !497)
!2457 = !DILocation(line: 246, column: 5, scope: !497)
!2458 = !DILocation(line: 247, column: 1, scope: !497)
!2459 = !DILocation(line: 96, column: 31, scope: !515)
!2460 = !DILocation(line: 98, column: 9, scope: !2461)
!2461 = distinct !DILexicalBlock(scope: !515, file: !458, line: 98, column: 9)
!2462 = !DILocation(line: 98, column: 15, scope: !2461)
!2463 = !DILocation(line: 98, column: 26, scope: !2461)
!2464 = !DILocation(line: 98, column: 9, scope: !515)
!2465 = !DILocation(line: 99, column: 25, scope: !2466)
!2466 = distinct !DILexicalBlock(scope: !2461, file: !458, line: 98, column: 31)
!2467 = !DILocation(line: 99, column: 9, scope: !2466)
!2468 = !DILocation(line: 101, column: 9, scope: !2466)
!2469 = !DILocation(line: 103, column: 5, scope: !515)
!2470 = !DILocation(line: 104, column: 1, scope: !515)
!2471 = !DILocation(line: 250, column: 30, scope: !507)
!2472 = !DILocation(line: 250, column: 43, scope: !507)
!2473 = !DILocation(line: 252, column: 5, scope: !507)
!2474 = !DILocation(line: 252, column: 16, scope: !507)
!2475 = !DILocation(line: 253, column: 5, scope: !507)
!2476 = !DILocation(line: 253, column: 15, scope: !507)
!2477 = !DILocation(line: 253, column: 19, scope: !507)
!2478 = !DILocation(line: 254, column: 5, scope: !507)
!2479 = !DILocation(line: 254, column: 24, scope: !507)
!2480 = !DILocation(line: 256, column: 8, scope: !507)
!2481 = !DILocation(line: 256, column: 12, scope: !507)
!2482 = !{!2483, !2130, i64 16}
!2483 = !{!"bufferinfo", !2120, i64 0, !2120, i64 8, !2130, i64 16, !2130, i64 24, !2170, i64 32, !2170, i64 36, !2120, i64 40, !2120, i64 48, !2120, i64 56, !2120, i64 64, !2120, i64 72}
!2484 = !DILocation(line: 257, column: 8, scope: !507)
!2485 = !DILocation(line: 257, column: 12, scope: !507)
!2486 = !DILocation(line: 258, column: 20, scope: !2487)
!2487 = distinct !DILexicalBlock(scope: !507, file: !458, line: 258, column: 9)
!2488 = !DILocation(line: 258, column: 9, scope: !2487)
!2489 = !DILocation(line: 258, column: 28, scope: !2487)
!2490 = !DILocation(line: 258, column: 32, scope: !2487)
!2491 = !DILocation(line: 259, column: 20, scope: !2487)
!2492 = !DILocation(line: 259, column: 9, scope: !2487)
!2493 = !DILocation(line: 259, column: 28, scope: !2487)
!2494 = !DILocation(line: 258, column: 9, scope: !507)
!2495 = !DILocation(line: 260, column: 26, scope: !2496)
!2496 = distinct !DILexicalBlock(scope: !2487, file: !458, line: 259, column: 33)
!2497 = !DILocation(line: 261, column: 40, scope: !2496)
!2498 = !DILocation(line: 261, column: 45, scope: !2496)
!2499 = !DILocation(line: 261, column: 55, scope: !2496)
!2500 = !{!2206, !2120, i64 24}
!2501 = !DILocation(line: 261, column: 78, scope: !2496)
!2502 = !DILocation(line: 261, column: 83, scope: !2496)
!2503 = !DILocation(line: 261, column: 93, scope: !2496)
!2504 = !DILocation(line: 260, column: 13, scope: !2496)
!2505 = !DILocation(line: 262, column: 13, scope: !2496)
!2506 = !DILocation(line: 265, column: 15, scope: !507)
!2507 = !DILocation(line: 265, column: 24, scope: !507)
!2508 = !DILocation(line: 265, column: 19, scope: !507)
!2509 = !DILocation(line: 265, column: 10, scope: !507)
!2510 = !DILocation(line: 266, column: 9, scope: !2511)
!2511 = distinct !DILexicalBlock(scope: !507, file: !458, line: 266, column: 9)
!2512 = !DILocation(line: 266, column: 14, scope: !2511)
!2513 = !DILocation(line: 266, column: 9, scope: !507)
!2514 = !DILocation(line: 267, column: 13, scope: !2515)
!2515 = distinct !DILexicalBlock(scope: !2511, file: !458, line: 266, column: 19)
!2516 = !DILocation(line: 268, column: 13, scope: !2515)
!2517 = !DILocation(line: 271, column: 78, scope: !507)
!2518 = !DILocation(line: 271, column: 36, scope: !507)
!2519 = !DILocation(line: 271, column: 14, scope: !507)
!2520 = !DILocation(line: 271, column: 12, scope: !507)
!2521 = !DILocation(line: 272, column: 9, scope: !2522)
!2522 = distinct !DILexicalBlock(scope: !507, file: !458, line: 272, column: 9)
!2523 = !DILocation(line: 272, column: 16, scope: !2522)
!2524 = !DILocation(line: 272, column: 9, scope: !507)
!2525 = !DILocation(line: 273, column: 16, scope: !2526)
!2526 = distinct !DILexicalBlock(scope: !2522, file: !458, line: 272, column: 31)
!2527 = !DILocation(line: 273, column: 24, scope: !2526)
!2528 = !DILocation(line: 273, column: 37, scope: !2526)
!2529 = !{!2483, !2120, i64 0}
!2530 = !DILocation(line: 273, column: 45, scope: !2526)
!2531 = !DILocation(line: 273, column: 9, scope: !2526)
!2532 = !DILocation(line: 274, column: 16, scope: !2526)
!2533 = !DILocation(line: 274, column: 24, scope: !2526)
!2534 = !DILocation(line: 274, column: 38, scope: !2526)
!2535 = !DILocation(line: 274, column: 33, scope: !2526)
!2536 = !DILocation(line: 274, column: 46, scope: !2526)
!2537 = !DILocation(line: 274, column: 54, scope: !2526)
!2538 = !DILocation(line: 274, column: 9, scope: !2526)
!2539 = !DILocation(line: 275, column: 5, scope: !2526)
!2540 = !DILocation(line: 272, column: 28, scope: !2541)
!2541 = !DILexicalBlockFile(scope: !2522, file: !458, discriminator: 1)
!2542 = !DILocation(line: 278, column: 12, scope: !2543)
!2543 = distinct !DILexicalBlock(scope: !507, file: !458, line: 278, column: 9)
!2544 = !DILocation(line: 278, column: 16, scope: !2543)
!2545 = !DILocation(line: 278, column: 9, scope: !507)
!2546 = !DILocation(line: 279, column: 9, scope: !2543)
!2547 = !DILocation(line: 280, column: 12, scope: !2548)
!2548 = distinct !DILexicalBlock(scope: !507, file: !458, line: 280, column: 9)
!2549 = !DILocation(line: 280, column: 16, scope: !2548)
!2550 = !DILocation(line: 280, column: 9, scope: !507)
!2551 = !DILocation(line: 281, column: 9, scope: !2548)
!2552 = !DILocation(line: 282, column: 24, scope: !507)
!2553 = !DILocation(line: 282, column: 12, scope: !507)
!2554 = !DILocation(line: 283, column: 1, scope: !507)
!2555 = !DILocation(line: 282, column: 5, scope: !507)
!2556 = !DILocation(line: 78, column: 22, scope: !520)
!2557 = !DILocation(line: 78, column: 38, scope: !520)
!2558 = !DILocation(line: 80, column: 5, scope: !520)
!2559 = !DILocation(line: 80, column: 20, scope: !520)
!2560 = !DILocation(line: 80, column: 43, scope: !520)
!2561 = !DILocation(line: 80, column: 50, scope: !520)
!2562 = !DILocation(line: 80, column: 60, scope: !520)
!2563 = !{!2206, !2120, i64 160}
!2564 = !DILocation(line: 82, column: 9, scope: !2565)
!2565 = distinct !DILexicalBlock(scope: !520, file: !458, line: 82, column: 9)
!2566 = !DILocation(line: 82, column: 16, scope: !2565)
!2567 = !DILocation(line: 82, column: 30, scope: !2565)
!2568 = !DILocation(line: 82, column: 33, scope: !2569)
!2569 = !DILexicalBlockFile(scope: !2565, file: !458, discriminator: 1)
!2570 = !DILocation(line: 82, column: 41, scope: !2565)
!2571 = !{!2572, !2120, i64 0}
!2572 = !{!"", !2120, i64 0, !2120, i64 8}
!2573 = !DILocation(line: 82, column: 54, scope: !2565)
!2574 = !DILocation(line: 82, column: 9, scope: !520)
!2575 = !DILocation(line: 84, column: 22, scope: !2576)
!2576 = distinct !DILexicalBlock(scope: !2565, file: !458, line: 83, column: 5)
!2577 = !DILocation(line: 86, column: 36, scope: !2576)
!2578 = !DILocation(line: 86, column: 43, scope: !2576)
!2579 = !DILocation(line: 86, column: 53, scope: !2576)
!2580 = !DILocation(line: 84, column: 9, scope: !2576)
!2581 = !DILocation(line: 87, column: 9, scope: !2576)
!2582 = !DILocation(line: 90, column: 9, scope: !2583)
!2583 = distinct !DILexicalBlock(scope: !520, file: !458, line: 90, column: 9)
!2584 = !DILocation(line: 90, column: 17, scope: !2583)
!2585 = !DILocation(line: 90, column: 30, scope: !2583)
!2586 = !DILocation(line: 90, column: 35, scope: !2583)
!2587 = !DILocation(line: 90, column: 44, scope: !2583)
!2588 = !DILocation(line: 90, column: 9, scope: !520)
!2589 = !DILocation(line: 91, column: 13, scope: !2583)
!2590 = !DILocation(line: 92, column: 12, scope: !520)
!2591 = !DILocation(line: 92, column: 18, scope: !520)
!2592 = !DILocation(line: 92, column: 5, scope: !520)
!2593 = !DILocation(line: 93, column: 1, scope: !520)
!2594 = !DILocation(line: 1058, column: 38, scope: !527)
!2595 = !DILocation(line: 1060, column: 9, scope: !2596)
!2596 = distinct !DILexicalBlock(scope: !527, file: !458, line: 1060, column: 9)
!2597 = !DILocation(line: 1060, column: 15, scope: !2596)
!2598 = !DILocation(line: 1060, column: 26, scope: !2596)
!2599 = !DILocation(line: 1060, column: 9, scope: !527)
!2600 = !DILocation(line: 1061, column: 25, scope: !2601)
!2601 = distinct !DILexicalBlock(scope: !2596, file: !458, line: 1060, column: 31)
!2602 = !DILocation(line: 1061, column: 9, scope: !2601)
!2603 = !DILocation(line: 1063, column: 9, scope: !2601)
!2604 = !DILocation(line: 1064, column: 5, scope: !2601)
!2605 = !DILocation(line: 1065, column: 9, scope: !2606)
!2606 = distinct !DILexicalBlock(scope: !527, file: !458, line: 1065, column: 9)
!2607 = !DILocation(line: 1065, column: 15, scope: !2606)
!2608 = !DILocation(line: 1065, column: 24, scope: !2606)
!2609 = !DILocation(line: 1065, column: 9, scope: !527)
!2610 = !DILocation(line: 1066, column: 23, scope: !2611)
!2611 = distinct !DILexicalBlock(scope: !2606, file: !458, line: 1065, column: 30)
!2612 = !DILocation(line: 1066, column: 29, scope: !2611)
!2613 = !DILocation(line: 1066, column: 9, scope: !2611)
!2614 = !DILocation(line: 1067, column: 5, scope: !2611)
!2615 = !DILocation(line: 1068, column: 19, scope: !527)
!2616 = !DILocation(line: 1068, column: 7, scope: !527)
!2617 = !DILocation(line: 1068, column: 27, scope: !527)
!2618 = !DILocation(line: 1068, column: 37, scope: !527)
!2619 = !{!2206, !2120, i64 320}
!2620 = !DILocation(line: 1068, column: 57, scope: !527)
!2621 = !DILocation(line: 1068, column: 45, scope: !527)
!2622 = !DILocation(line: 1068, column: 5, scope: !527)
!2623 = !DILocation(line: 1069, column: 1, scope: !527)
!2624 = !DILocation(line: 892, column: 35, scope: !532)
!2625 = !DILocation(line: 894, column: 5, scope: !532)
!2626 = !DILocation(line: 894, column: 17, scope: !532)
!2627 = !DILocation(line: 895, column: 5, scope: !532)
!2628 = !DILocation(line: 895, column: 17, scope: !532)
!2629 = !DILocation(line: 896, column: 5, scope: !532)
!2630 = !DILocation(line: 896, column: 16, scope: !532)
!2631 = !DILocation(line: 896, column: 42, scope: !532)
!2632 = !DILocation(line: 896, column: 27, scope: !532)
!2633 = !DILocation(line: 896, column: 50, scope: !532)
!2634 = !DILocation(line: 898, column: 5, scope: !532)
!2635 = !DILocation(line: 898, column: 12, scope: !532)
!2636 = !DILocation(line: 899, column: 5, scope: !532)
!2637 = !DILocation(line: 899, column: 15, scope: !532)
!2638 = !DILocation(line: 900, column: 5, scope: !532)
!2639 = !DILocation(line: 900, column: 16, scope: !532)
!2640 = !DILocation(line: 901, column: 5, scope: !532)
!2641 = !DILocation(line: 901, column: 11, scope: !532)
!2642 = !DILocation(line: 902, column: 5, scope: !532)
!2643 = !DILocation(line: 902, column: 10, scope: !532)
!2644 = !DILocation(line: 903, column: 5, scope: !532)
!2645 = !DILocation(line: 903, column: 11, scope: !532)
!2646 = !DILocation(line: 904, column: 5, scope: !532)
!2647 = !DILocation(line: 904, column: 9, scope: !532)
!2648 = !DILocation(line: 905, column: 5, scope: !532)
!2649 = !DILocation(line: 905, column: 11, scope: !532)
!2650 = !DILocation(line: 905, column: 18, scope: !532)
!2651 = !DILocation(line: 906, column: 5, scope: !532)
!2652 = !DILocation(line: 906, column: 11, scope: !532)
!2653 = !DILocation(line: 908, column: 9, scope: !2654)
!2654 = distinct !DILexicalBlock(scope: !532, file: !458, line: 908, column: 9)
!2655 = !DILocation(line: 908, column: 16, scope: !2654)
!2656 = !DILocation(line: 908, column: 9, scope: !532)
!2657 = !DILocation(line: 909, column: 25, scope: !2658)
!2658 = distinct !DILexicalBlock(scope: !2654, file: !458, line: 908, column: 62)
!2659 = !DILocation(line: 909, column: 9, scope: !2658)
!2660 = !DILocation(line: 911, column: 9, scope: !2658)
!2661 = !DILocation(line: 914, column: 20, scope: !532)
!2662 = !DILocation(line: 914, column: 27, scope: !532)
!2663 = !DILocation(line: 914, column: 18, scope: !532)
!2664 = !DILocation(line: 914, column: 13, scope: !532)
!2665 = !DILocation(line: 915, column: 30, scope: !532)
!2666 = !DILocation(line: 915, column: 14, scope: !532)
!2667 = !DILocation(line: 915, column: 12, scope: !532)
!2668 = !DILocation(line: 916, column: 9, scope: !2669)
!2669 = distinct !DILexicalBlock(scope: !532, file: !458, line: 916, column: 9)
!2670 = !DILocation(line: 916, column: 16, scope: !2669)
!2671 = !DILocation(line: 916, column: 9, scope: !532)
!2672 = !DILocation(line: 917, column: 9, scope: !2673)
!2673 = distinct !DILexicalBlock(scope: !2669, file: !458, line: 916, column: 31)
!2674 = !DILocation(line: 918, column: 9, scope: !2673)
!2675 = !DILocation(line: 922, column: 11, scope: !532)
!2676 = !{!2170, !2170, i64 0}
!2677 = !DILocation(line: 923, column: 45, scope: !532)
!2678 = !DILocation(line: 923, column: 30, scope: !532)
!2679 = !DILocation(line: 923, column: 53, scope: !532)
!2680 = !DILocation(line: 923, column: 28, scope: !532)
!2681 = !DILocation(line: 923, column: 87, scope: !2682)
!2682 = !DILexicalBlockFile(scope: !532, file: !458, discriminator: 1)
!2683 = !DILocation(line: 923, column: 95, scope: !532)
!2684 = !DILocation(line: 923, column: 28, scope: !2685)
!2685 = !DILexicalBlockFile(scope: !532, file: !458, discriminator: 2)
!2686 = !DILocation(line: 923, column: 11, scope: !2687)
!2687 = !DILexicalBlockFile(scope: !2688, file: !458, discriminator: 4)
!2688 = !DILexicalBlockFile(scope: !532, file: !458, discriminator: 3)
!2689 = !DILocation(line: 924, column: 17, scope: !2690)
!2690 = distinct !DILexicalBlock(scope: !532, file: !458, line: 924, column: 5)
!2691 = !DILocation(line: 924, column: 15, scope: !2690)
!2692 = !DILocation(line: 924, column: 10, scope: !2690)
!2693 = !DILocation(line: 924, column: 24, scope: !2694)
!2694 = !DILexicalBlockFile(scope: !2695, file: !458, discriminator: 2)
!2695 = !DILexicalBlockFile(scope: !2696, file: !458, discriminator: 1)
!2696 = distinct !DILexicalBlock(scope: !2690, file: !458, line: 924, column: 5)
!2697 = !DILocation(line: 924, column: 31, scope: !2696)
!2698 = !DILocation(line: 924, column: 37, scope: !2696)
!2699 = !DILocation(line: 924, column: 36, scope: !2696)
!2700 = !DILocation(line: 924, column: 29, scope: !2696)
!2701 = !DILocation(line: 924, column: 5, scope: !2690)
!2702 = !DILocation(line: 925, column: 14, scope: !2703)
!2703 = distinct !DILexicalBlock(scope: !2704, file: !458, line: 925, column: 13)
!2704 = distinct !DILexicalBlock(scope: !2696, file: !458, line: 924, column: 53)
!2705 = !DILocation(line: 925, column: 13, scope: !2703)
!2706 = !DILocation(line: 925, column: 19, scope: !2703)
!2707 = !DILocation(line: 925, column: 13, scope: !2704)
!2708 = !DILocation(line: 926, column: 19, scope: !2709)
!2709 = distinct !DILexicalBlock(scope: !2703, file: !458, line: 925, column: 27)
!2710 = !DILocation(line: 927, column: 13, scope: !2709)
!2711 = !DILocation(line: 929, column: 19, scope: !2712)
!2712 = distinct !DILexicalBlock(scope: !2703, file: !458, line: 929, column: 18)
!2713 = !DILocation(line: 929, column: 18, scope: !2712)
!2714 = !DILocation(line: 929, column: 24, scope: !2712)
!2715 = !DILocation(line: 929, column: 18, scope: !2703)
!2716 = !DILocation(line: 930, column: 19, scope: !2712)
!2717 = !DILocation(line: 930, column: 13, scope: !2712)
!2718 = !DILocation(line: 931, column: 5, scope: !2704)
!2719 = !DILocation(line: 924, column: 45, scope: !2696)
!2720 = !DILocation(line: 924, column: 5, scope: !2696)
!2721 = !DILocation(line: 933, column: 9, scope: !532)
!2722 = !DILocation(line: 933, column: 7, scope: !532)
!2723 = !DILocation(line: 934, column: 5, scope: !532)
!2724 = !DILocation(line: 934, column: 13, scope: !2725)
!2725 = !DILexicalBlockFile(scope: !2682, file: !458, discriminator: 2)
!2726 = !DILocation(line: 934, column: 12, scope: !532)
!2727 = !DILocation(line: 935, column: 29, scope: !532)
!2728 = !DILocation(line: 935, column: 16, scope: !532)
!2729 = !DILocation(line: 935, column: 11, scope: !532)
!2730 = !DILocation(line: 935, column: 14, scope: !532)
!2731 = !DILocation(line: 936, column: 12, scope: !532)
!2732 = !DILocation(line: 936, column: 7, scope: !532)
!2733 = !DILocation(line: 936, column: 10, scope: !532)
!2734 = !DILocation(line: 938, column: 45, scope: !532)
!2735 = !DILocation(line: 938, column: 30, scope: !532)
!2736 = !DILocation(line: 938, column: 53, scope: !532)
!2737 = !DILocation(line: 938, column: 28, scope: !532)
!2738 = !DILocation(line: 938, column: 87, scope: !2682)
!2739 = !DILocation(line: 938, column: 95, scope: !532)
!2740 = !DILocation(line: 938, column: 28, scope: !2685)
!2741 = !DILocation(line: 938, column: 11, scope: !2687)
!2742 = !DILocation(line: 939, column: 12, scope: !2743)
!2743 = distinct !DILexicalBlock(scope: !532, file: !458, line: 939, column: 5)
!2744 = !DILocation(line: 939, column: 10, scope: !2743)
!2745 = !DILocation(line: 939, column: 17, scope: !2746)
!2746 = !DILexicalBlockFile(scope: !2747, file: !458, discriminator: 2)
!2747 = !DILexicalBlockFile(scope: !2748, file: !458, discriminator: 1)
!2748 = distinct !DILexicalBlock(scope: !2743, file: !458, line: 939, column: 5)
!2749 = !DILocation(line: 939, column: 21, scope: !2748)
!2750 = !DILocation(line: 939, column: 19, scope: !2748)
!2751 = !DILocation(line: 939, column: 5, scope: !2743)
!2752 = !DILocation(line: 943, column: 19, scope: !2753)
!2753 = distinct !DILexicalBlock(scope: !2748, file: !458, line: 939, column: 34)
!2754 = !DILocation(line: 943, column: 13, scope: !2753)
!2755 = !DILocation(line: 943, column: 11, scope: !2753)
!2756 = !DILocation(line: 944, column: 13, scope: !2757)
!2757 = distinct !DILexicalBlock(scope: !2753, file: !458, line: 944, column: 13)
!2758 = !DILocation(line: 944, column: 15, scope: !2757)
!2759 = !DILocation(line: 944, column: 23, scope: !2757)
!2760 = !DILocation(line: 944, column: 26, scope: !2761)
!2761 = !DILexicalBlockFile(scope: !2757, file: !458, discriminator: 1)
!2762 = !DILocation(line: 944, column: 28, scope: !2757)
!2763 = !DILocation(line: 944, column: 13, scope: !2753)
!2764 = !DILocation(line: 945, column: 15, scope: !2757)
!2765 = !DILocation(line: 945, column: 18, scope: !2757)
!2766 = !DILocation(line: 945, column: 33, scope: !2757)
!2767 = !DILocation(line: 945, column: 28, scope: !2757)
!2768 = !DILocation(line: 945, column: 31, scope: !2757)
!2769 = !DILocation(line: 945, column: 13, scope: !2757)
!2770 = !DILocation(line: 946, column: 18, scope: !2771)
!2771 = distinct !DILexicalBlock(scope: !2757, file: !458, line: 946, column: 18)
!2772 = !DILocation(line: 946, column: 20, scope: !2771)
!2773 = !DILocation(line: 946, column: 18, scope: !2757)
!2774 = !DILocation(line: 947, column: 15, scope: !2771)
!2775 = !DILocation(line: 947, column: 18, scope: !2771)
!2776 = !DILocation(line: 947, column: 28, scope: !2771)
!2777 = !DILocation(line: 947, column: 31, scope: !2771)
!2778 = !DILocation(line: 947, column: 13, scope: !2771)
!2779 = !DILocation(line: 948, column: 18, scope: !2780)
!2780 = distinct !DILexicalBlock(scope: !2771, file: !458, line: 948, column: 18)
!2781 = !DILocation(line: 948, column: 20, scope: !2780)
!2782 = !DILocation(line: 948, column: 18, scope: !2771)
!2783 = !DILocation(line: 949, column: 15, scope: !2780)
!2784 = !DILocation(line: 949, column: 18, scope: !2780)
!2785 = !DILocation(line: 949, column: 28, scope: !2780)
!2786 = !DILocation(line: 949, column: 31, scope: !2780)
!2787 = !DILocation(line: 949, column: 13, scope: !2780)
!2788 = !DILocation(line: 950, column: 18, scope: !2789)
!2789 = distinct !DILexicalBlock(scope: !2780, file: !458, line: 950, column: 18)
!2790 = !DILocation(line: 950, column: 20, scope: !2789)
!2791 = !DILocation(line: 950, column: 18, scope: !2780)
!2792 = !DILocation(line: 951, column: 15, scope: !2789)
!2793 = !DILocation(line: 951, column: 18, scope: !2789)
!2794 = !DILocation(line: 951, column: 28, scope: !2789)
!2795 = !DILocation(line: 951, column: 31, scope: !2789)
!2796 = !DILocation(line: 951, column: 13, scope: !2789)
!2797 = !DILocation(line: 952, column: 18, scope: !2798)
!2798 = distinct !DILexicalBlock(scope: !2789, file: !458, line: 952, column: 18)
!2799 = !DILocation(line: 952, column: 20, scope: !2798)
!2800 = !DILocation(line: 952, column: 18, scope: !2789)
!2801 = !DILocation(line: 953, column: 15, scope: !2798)
!2802 = !DILocation(line: 953, column: 18, scope: !2798)
!2803 = !DILocation(line: 953, column: 28, scope: !2798)
!2804 = !DILocation(line: 953, column: 31, scope: !2798)
!2805 = !DILocation(line: 953, column: 40, scope: !2798)
!2806 = !DILocation(line: 953, column: 43, scope: !2798)
!2807 = !DILocation(line: 953, column: 52, scope: !2798)
!2808 = !DILocation(line: 953, column: 55, scope: !2798)
!2809 = !DILocation(line: 953, column: 13, scope: !2798)
!2810 = !DILocation(line: 954, column: 18, scope: !2811)
!2811 = distinct !DILexicalBlock(scope: !2798, file: !458, line: 954, column: 18)
!2812 = !DILocation(line: 954, column: 20, scope: !2811)
!2813 = !DILocation(line: 954, column: 26, scope: !2811)
!2814 = !DILocation(line: 954, column: 29, scope: !2815)
!2815 = !DILexicalBlockFile(scope: !2811, file: !458, discriminator: 1)
!2816 = !DILocation(line: 954, column: 31, scope: !2811)
!2817 = !DILocation(line: 954, column: 18, scope: !2798)
!2818 = !DILocation(line: 955, column: 15, scope: !2819)
!2819 = distinct !DILexicalBlock(scope: !2811, file: !458, line: 954, column: 40)
!2820 = !DILocation(line: 955, column: 18, scope: !2819)
!2821 = !DILocation(line: 956, column: 15, scope: !2819)
!2822 = !DILocation(line: 956, column: 18, scope: !2819)
!2823 = !DILocation(line: 957, column: 34, scope: !2819)
!2824 = !DILocation(line: 957, column: 36, scope: !2819)
!2825 = !DILocation(line: 957, column: 44, scope: !2819)
!2826 = !DILocation(line: 957, column: 20, scope: !2819)
!2827 = !DILocation(line: 957, column: 15, scope: !2819)
!2828 = !DILocation(line: 957, column: 18, scope: !2819)
!2829 = !DILocation(line: 958, column: 33, scope: !2819)
!2830 = !DILocation(line: 958, column: 35, scope: !2819)
!2831 = !DILocation(line: 958, column: 20, scope: !2819)
!2832 = !DILocation(line: 958, column: 15, scope: !2819)
!2833 = !DILocation(line: 958, column: 18, scope: !2819)
!2834 = !DILocation(line: 959, column: 9, scope: !2819)
!2835 = !DILocation(line: 961, column: 20, scope: !2811)
!2836 = !DILocation(line: 961, column: 15, scope: !2811)
!2837 = !DILocation(line: 961, column: 18, scope: !2811)
!2838 = !DILocation(line: 962, column: 5, scope: !2753)
!2839 = !DILocation(line: 939, column: 30, scope: !2748)
!2840 = !DILocation(line: 939, column: 5, scope: !2748)
!2841 = !DILocation(line: 964, column: 12, scope: !532)
!2842 = !DILocation(line: 964, column: 7, scope: !532)
!2843 = !DILocation(line: 964, column: 10, scope: !532)
!2844 = !DILocation(line: 965, column: 5, scope: !532)
!2845 = !DILocation(line: 965, column: 13, scope: !2725)
!2846 = !DILocation(line: 965, column: 12, scope: !532)
!2847 = !DILocation(line: 966, column: 29, scope: !2848)
!2848 = distinct !DILexicalBlock(scope: !532, file: !458, line: 965, column: 28)
!2849 = !DILocation(line: 966, column: 15, scope: !2848)
!2850 = !DILocation(line: 966, column: 10, scope: !2848)
!2851 = !DILocation(line: 966, column: 13, scope: !2848)
!2852 = !DILocation(line: 969, column: 31, scope: !532)
!2853 = !DILocation(line: 969, column: 39, scope: !532)
!2854 = !DILocation(line: 969, column: 43, scope: !532)
!2855 = !DILocation(line: 969, column: 41, scope: !532)
!2856 = !DILocation(line: 969, column: 9, scope: !532)
!2857 = !DILocation(line: 969, column: 7, scope: !532)
!2858 = !DILocation(line: 970, column: 19, scope: !532)
!2859 = !DILocation(line: 970, column: 5, scope: !532)
!2860 = !DILocation(line: 971, column: 12, scope: !532)
!2861 = !DILocation(line: 971, column: 5, scope: !532)
!2862 = !DILocation(line: 972, column: 1, scope: !532)
!2863 = !DILocation(line: 975, column: 25, scope: !771)
!2864 = !DILocation(line: 977, column: 13, scope: !2865)
!2865 = distinct !DILexicalBlock(scope: !771, file: !458, line: 977, column: 13)
!2866 = !DILocation(line: 977, column: 13, scope: !771)
!2867 = !DILocation(line: 978, column: 34, scope: !2868)
!2868 = distinct !DILexicalBlock(scope: !2869, file: !458, line: 978, column: 21)
!2869 = distinct !DILexicalBlock(scope: !2865, file: !458, line: 977, column: 34)
!2870 = !DILocation(line: 978, column: 21, scope: !2868)
!2871 = !DILocation(line: 978, column: 21, scope: !2869)
!2872 = !DILocation(line: 980, column: 25, scope: !2868)
!2873 = !DILocation(line: 981, column: 9, scope: !2869)
!2874 = !DILocation(line: 982, column: 51, scope: !771)
!2875 = !DILocation(line: 982, column: 31, scope: !771)
!2876 = !DILocation(line: 982, column: 16, scope: !771)
!2877 = !DILocation(line: 982, column: 9, scope: !771)
!2878 = !DILocation(line: 983, column: 1, scope: !771)
!2879 = !DILocation(line: 986, column: 33, scope: !789)
!2880 = !DILocation(line: 986, column: 49, scope: !789)
!2881 = !DILocation(line: 986, column: 60, scope: !789)
!2882 = !DILocation(line: 988, column: 5, scope: !789)
!2883 = !DILocation(line: 988, column: 16, scope: !789)
!2884 = !DILocation(line: 988, column: 27, scope: !789)
!2885 = !DILocation(line: 989, column: 5, scope: !789)
!2886 = !DILocation(line: 989, column: 15, scope: !789)
!2887 = !DILocation(line: 989, column: 27, scope: !789)
!2888 = !DILocation(line: 990, column: 5, scope: !789)
!2889 = !DILocation(line: 990, column: 15, scope: !789)
!2890 = !DILocation(line: 991, column: 5, scope: !789)
!2891 = !DILocation(line: 991, column: 16, scope: !789)
!2892 = !DILocation(line: 992, column: 5, scope: !789)
!2893 = !DILocation(line: 992, column: 9, scope: !789)
!2894 = !DILocation(line: 997, column: 29, scope: !2895)
!2895 = distinct !DILexicalBlock(scope: !789, file: !458, line: 997, column: 9)
!2896 = !DILocation(line: 997, column: 9, scope: !2895)
!2897 = !DILocation(line: 997, column: 63, scope: !2895)
!2898 = !DILocation(line: 998, column: 29, scope: !2895)
!2899 = !DILocation(line: 998, column: 9, scope: !2895)
!2900 = !DILocation(line: 997, column: 9, scope: !789)
!2901 = !DILocation(line: 999, column: 13, scope: !2902)
!2902 = distinct !DILexicalBlock(scope: !2903, file: !458, line: 999, column: 13)
!2903 = distinct !DILexicalBlock(scope: !2895, file: !458, line: 998, column: 65)
!2904 = !DILocation(line: 999, column: 33, scope: !2902)
!2905 = !DILocation(line: 999, column: 37, scope: !2906)
!2906 = !DILexicalBlockFile(scope: !2902, file: !458, discriminator: 1)
!2907 = !DILocation(line: 999, column: 40, scope: !2902)
!2908 = !DILocation(line: 999, column: 45, scope: !2902)
!2909 = !DILocation(line: 999, column: 48, scope: !2910)
!2910 = !DILexicalBlockFile(scope: !2902, file: !458, discriminator: 2)
!2911 = !DILocation(line: 999, column: 51, scope: !2902)
!2912 = !DILocation(line: 999, column: 13, scope: !2903)
!2913 = !DILocation(line: 1000, column: 30, scope: !2914)
!2914 = distinct !DILexicalBlock(scope: !2915, file: !458, line: 1000, column: 17)
!2915 = distinct !DILexicalBlock(scope: !2902, file: !458, line: 999, column: 58)
!2916 = !DILocation(line: 1000, column: 17, scope: !2914)
!2917 = !DILocation(line: 1000, column: 17, scope: !2915)
!2918 = !DILocation(line: 1002, column: 17, scope: !2914)
!2919 = !DILocation(line: 1003, column: 9, scope: !2915)
!2920 = !DILocation(line: 1005, column: 72, scope: !2903)
!2921 = !DILocation(line: 1005, column: 9, scope: !2903)
!2922 = !DILocation(line: 1008, column: 28, scope: !789)
!2923 = !DILocation(line: 1008, column: 17, scope: !789)
!2924 = !DILocation(line: 1008, column: 15, scope: !789)
!2925 = !DILocation(line: 1009, column: 9, scope: !2926)
!2926 = distinct !DILexicalBlock(scope: !789, file: !458, line: 1009, column: 9)
!2927 = !DILocation(line: 1009, column: 19, scope: !2926)
!2928 = !DILocation(line: 1009, column: 9, scope: !789)
!2929 = !DILocation(line: 1010, column: 9, scope: !2930)
!2930 = distinct !DILexicalBlock(scope: !2926, file: !458, line: 1009, column: 24)
!2931 = !DILocation(line: 1011, column: 72, scope: !2930)
!2932 = !DILocation(line: 1011, column: 9, scope: !2930)
!2933 = !DILocation(line: 1014, column: 29, scope: !789)
!2934 = !DILocation(line: 1014, column: 18, scope: !789)
!2935 = !DILocation(line: 1014, column: 16, scope: !789)
!2936 = !DILocation(line: 1015, column: 9, scope: !2937)
!2937 = distinct !DILexicalBlock(scope: !789, file: !458, line: 1015, column: 9)
!2938 = !DILocation(line: 1015, column: 20, scope: !2937)
!2939 = !DILocation(line: 1015, column: 9, scope: !789)
!2940 = !DILocation(line: 1016, column: 9, scope: !2941)
!2941 = distinct !DILexicalBlock(scope: !2937, file: !458, line: 1015, column: 25)
!2942 = !DILocation(line: 1017, column: 9, scope: !2941)
!2943 = !DILocation(line: 1018, column: 72, scope: !2941)
!2944 = !DILocation(line: 1018, column: 9, scope: !2941)
!2945 = !DILocation(line: 1021, column: 9, scope: !2946)
!2946 = distinct !DILexicalBlock(scope: !789, file: !458, line: 1021, column: 9)
!2947 = !DILocation(line: 1021, column: 22, scope: !2946)
!2948 = !DILocation(line: 1021, column: 19, scope: !2946)
!2949 = !DILocation(line: 1021, column: 33, scope: !2946)
!2950 = !DILocation(line: 1021, column: 37, scope: !2951)
!2951 = !DILexicalBlockFile(scope: !2946, file: !458, discriminator: 1)
!2952 = !DILocation(line: 1021, column: 40, scope: !2946)
!2953 = !DILocation(line: 1021, column: 45, scope: !2946)
!2954 = !DILocation(line: 1021, column: 48, scope: !2955)
!2955 = !DILexicalBlockFile(scope: !2946, file: !458, discriminator: 2)
!2956 = !DILocation(line: 1021, column: 51, scope: !2946)
!2957 = !DILocation(line: 1021, column: 9, scope: !789)
!2958 = !DILocation(line: 1023, column: 16, scope: !2959)
!2959 = distinct !DILexicalBlock(scope: !2946, file: !458, line: 1021, column: 58)
!2960 = !DILocation(line: 1023, column: 19, scope: !2959)
!2961 = !DILocation(line: 1023, column: 13, scope: !2959)
!2962 = !DILocation(line: 1024, column: 5, scope: !2959)
!2963 = !DILocation(line: 1026, column: 19, scope: !2964)
!2964 = distinct !DILexicalBlock(scope: !2946, file: !458, line: 1025, column: 10)
!2965 = !DILocation(line: 1026, column: 17, scope: !2964)
!2966 = !DILocation(line: 1027, column: 13, scope: !2967)
!2967 = distinct !DILexicalBlock(scope: !2964, file: !458, line: 1027, column: 13)
!2968 = !DILocation(line: 1027, column: 26, scope: !2967)
!2969 = !DILocation(line: 1027, column: 24, scope: !2967)
!2970 = !DILocation(line: 1027, column: 13, scope: !2964)
!2971 = !DILocation(line: 1028, column: 23, scope: !2967)
!2972 = !DILocation(line: 1028, column: 21, scope: !2967)
!2973 = !DILocation(line: 1028, column: 13, scope: !2967)
!2974 = !DILocation(line: 1030, column: 33, scope: !2964)
!2975 = !DILocation(line: 1030, column: 50, scope: !2964)
!2976 = !DILocation(line: 1030, column: 55, scope: !2964)
!2977 = !DILocation(line: 1030, column: 15, scope: !2964)
!2978 = !DILocation(line: 1030, column: 13, scope: !2964)
!2979 = !DILocation(line: 1033, column: 13, scope: !2980)
!2980 = distinct !DILexicalBlock(scope: !2964, file: !458, line: 1033, column: 13)
!2981 = !DILocation(line: 1033, column: 17, scope: !2980)
!2982 = !DILocation(line: 1033, column: 13, scope: !2964)
!2983 = !DILocation(line: 1034, column: 17, scope: !2984)
!2984 = distinct !DILexicalBlock(scope: !2985, file: !458, line: 1034, column: 17)
!2985 = distinct !DILexicalBlock(scope: !2980, file: !458, line: 1033, column: 23)
!2986 = !DILocation(line: 1034, column: 29, scope: !2984)
!2987 = !DILocation(line: 1034, column: 27, scope: !2984)
!2988 = !DILocation(line: 1034, column: 17, scope: !2985)
!2989 = !DILocation(line: 1035, column: 21, scope: !2984)
!2990 = !DILocation(line: 1035, column: 17, scope: !2984)
!2991 = !DILocation(line: 1036, column: 22, scope: !2992)
!2992 = distinct !DILexicalBlock(scope: !2984, file: !458, line: 1036, column: 22)
!2993 = !DILocation(line: 1036, column: 34, scope: !2992)
!2994 = !DILocation(line: 1036, column: 32, scope: !2992)
!2995 = !DILocation(line: 1036, column: 22, scope: !2984)
!2996 = !DILocation(line: 1037, column: 21, scope: !2992)
!2997 = !DILocation(line: 1037, column: 17, scope: !2992)
!2998 = !DILocation(line: 1038, column: 9, scope: !2985)
!2999 = !DILocation(line: 1040, column: 17, scope: !2964)
!3000 = !DILocation(line: 1041, column: 23, scope: !3001)
!3001 = distinct !DILexicalBlock(scope: !2964, file: !458, line: 1040, column: 21)
!3002 = !DILocation(line: 1041, column: 27, scope: !3001)
!3003 = !DILocation(line: 1041, column: 21, scope: !3001)
!3004 = !DILocation(line: 1041, column: 32, scope: !3001)
!3005 = !DILocation(line: 1042, column: 23, scope: !3001)
!3006 = !DILocation(line: 1042, column: 27, scope: !3001)
!3007 = !DILocation(line: 1042, column: 21, scope: !3001)
!3008 = !DILocation(line: 1042, column: 33, scope: !3001)
!3009 = !DILocation(line: 1043, column: 23, scope: !3001)
!3010 = !DILocation(line: 1043, column: 27, scope: !3001)
!3011 = !DILocation(line: 1043, column: 21, scope: !3001)
!3012 = !DILocation(line: 1043, column: 33, scope: !3001)
!3013 = !DILocation(line: 1044, column: 23, scope: !3001)
!3014 = !DILocation(line: 1044, column: 27, scope: !3001)
!3015 = !DILocation(line: 1044, column: 21, scope: !3001)
!3016 = !DILocation(line: 1044, column: 33, scope: !3001)
!3017 = !DILocation(line: 1045, column: 23, scope: !3001)
!3018 = !DILocation(line: 1045, column: 27, scope: !3001)
!3019 = !DILocation(line: 1045, column: 21, scope: !3001)
!3020 = !DILocation(line: 1045, column: 32, scope: !3001)
!3021 = !DILocation(line: 1046, column: 23, scope: !3001)
!3022 = !DILocation(line: 1046, column: 27, scope: !3001)
!3023 = !DILocation(line: 1046, column: 21, scope: !3001)
!3024 = !DILocation(line: 1046, column: 33, scope: !3001)
!3025 = !DILocation(line: 1050, column: 11, scope: !789)
!3026 = !DILocation(line: 1050, column: 9, scope: !789)
!3027 = !DILocation(line: 1051, column: 5, scope: !789)
!3028 = !DILocation(line: 1052, column: 5, scope: !789)
!3029 = !DILocation(line: 1053, column: 21, scope: !789)
!3030 = !DILocation(line: 1053, column: 28, scope: !789)
!3031 = !DILocation(line: 1053, column: 37, scope: !789)
!3032 = !DILocation(line: 1054, column: 12, scope: !789)
!3033 = !DILocation(line: 1054, column: 5, scope: !789)
!3034 = !DILocation(line: 1055, column: 1, scope: !789)
!3035 = !DILocation(line: 3084, column: 26, scope: !1919)
!3036 = !DILocation(line: 3086, column: 5, scope: !1919)
!3037 = !DILocation(line: 3086, column: 22, scope: !1919)
!3038 = !DILocation(line: 3088, column: 25, scope: !3039)
!3039 = distinct !DILexicalBlock(scope: !1919, file: !458, line: 3088, column: 9)
!3040 = !DILocation(line: 3088, column: 32, scope: !3039)
!3041 = !DILocation(line: 3088, column: 41, scope: !3039)
!3042 = !DILocation(line: 3088, column: 64, scope: !3039)
!3043 = !DILocation(line: 3088, column: 98, scope: !3044)
!3044 = !DILexicalBlockFile(scope: !3039, file: !458, discriminator: 1)
!3045 = !DILocation(line: 3088, column: 105, scope: !3039)
!3046 = !DILocation(line: 3088, column: 67, scope: !3039)
!3047 = !DILocation(line: 3088, column: 9, scope: !1919)
!3048 = !DILocation(line: 3089, column: 9, scope: !3049)
!3049 = distinct !DILexicalBlock(scope: !3039, file: !458, line: 3088, column: 138)
!3050 = !DILocation(line: 3090, column: 9, scope: !3049)
!3051 = !DILocation(line: 3092, column: 32, scope: !1919)
!3052 = !DILocation(line: 3092, column: 12, scope: !1919)
!3053 = !DILocation(line: 3092, column: 8, scope: !1919)
!3054 = !DILocation(line: 3093, column: 9, scope: !3055)
!3055 = distinct !DILexicalBlock(scope: !1919, file: !458, line: 3093, column: 9)
!3056 = !DILocation(line: 3093, column: 12, scope: !3055)
!3057 = !DILocation(line: 3093, column: 9, scope: !1919)
!3058 = !DILocation(line: 3094, column: 9, scope: !3055)
!3059 = !DILocation(line: 3095, column: 5, scope: !1919)
!3060 = !DILocation(line: 3095, column: 9, scope: !1919)
!3061 = !DILocation(line: 3095, column: 18, scope: !1919)
!3062 = !{!3063, !2130, i64 16}
!3063 = !{!"", !2169, i64 0, !2130, i64 16, !2120, i64 24}
!3064 = !DILocation(line: 3096, column: 21, scope: !1919)
!3065 = !DILocation(line: 3096, column: 28, scope: !1919)
!3066 = !DILocation(line: 3096, column: 37, scope: !1919)
!3067 = !DILocation(line: 3097, column: 39, scope: !1919)
!3068 = !DILocation(line: 3097, column: 18, scope: !1919)
!3069 = !DILocation(line: 3097, column: 5, scope: !1919)
!3070 = !DILocation(line: 3097, column: 9, scope: !1919)
!3071 = !DILocation(line: 3097, column: 16, scope: !1919)
!3072 = !{!3063, !2120, i64 24}
!3073 = !DILocation(line: 3098, column: 5, scope: !1919)
!3074 = !DILocation(line: 3098, column: 10, scope: !3075)
!3075 = !DILexicalBlockFile(scope: !1924, file: !458, discriminator: 1)
!3076 = !DILocation(line: 3098, column: 21, scope: !1924)
!3077 = !DILocation(line: 3098, column: 40, scope: !1924)
!3078 = !DILocation(line: 3098, column: 26, scope: !1924)
!3079 = !DILocation(line: 3098, column: 43, scope: !1924)
!3080 = !DILocation(line: 3098, column: 54, scope: !3081)
!3081 = distinct !DILexicalBlock(scope: !1924, file: !458, line: 3098, column: 52)
!3082 = !DILocation(line: 3098, column: 58, scope: !3081)
!3083 = !DILocation(line: 3098, column: 61, scope: !3081)
!3084 = !{!3085, !2130, i64 16}
!3085 = !{!"", !2120, i64 0, !2120, i64 8, !2130, i64 16}
!3086 = !DILocation(line: 3098, column: 69, scope: !3081)
!3087 = !DILocation(line: 3098, column: 77, scope: !3081)
!3088 = !DILocation(line: 3098, column: 52, scope: !1924)
!3089 = !DILocation(line: 3098, column: 86, scope: !3090)
!3090 = !DILexicalBlockFile(scope: !3081, file: !458, discriminator: 2)
!3091 = !DILocation(line: 3098, column: 130, scope: !3092)
!3092 = !DILexicalBlockFile(scope: !1924, file: !458, discriminator: 3)
!3093 = !DILocation(line: 3098, column: 155, scope: !3094)
!3094 = !DILexicalBlockFile(scope: !3095, file: !458, discriminator: 4)
!3095 = distinct !DILexicalBlock(scope: !1924, file: !458, line: 3098, column: 133)
!3096 = !DILocation(line: 3098, column: 159, scope: !3095)
!3097 = !DILocation(line: 3098, column: 162, scope: !3095)
!3098 = !DILocation(line: 3098, column: 170, scope: !3095)
!3099 = !DILocation(line: 3098, column: 197, scope: !3095)
!3100 = !DILocation(line: 3098, column: 136, scope: !3095)
!3101 = !DILocation(line: 3098, column: 140, scope: !3095)
!3102 = !DILocation(line: 3098, column: 143, scope: !3095)
!3103 = !DILocation(line: 3098, column: 151, scope: !3095)
!3104 = !DILocation(line: 3098, column: 226, scope: !3095)
!3105 = !DILocation(line: 3098, column: 226, scope: !3106)
!3106 = !DILexicalBlockFile(scope: !3095, file: !458, discriminator: 5)
!3107 = !DILocation(line: 3098, column: 255, scope: !3108)
!3108 = !DILexicalBlockFile(scope: !1924, file: !458, discriminator: 6)
!3109 = !DILocation(line: 3098, column: 239, scope: !1924)
!3110 = !DILocation(line: 3098, column: 242, scope: !1924)
!3111 = !DILocation(line: 3098, column: 245, scope: !1924)
!3112 = !DILocation(line: 3098, column: 253, scope: !1924)
!3113 = !{!3085, !2120, i64 0}
!3114 = !DILocation(line: 3098, column: 290, scope: !1924)
!3115 = !DILocation(line: 3098, column: 309, scope: !1924)
!3116 = !DILocation(line: 3098, column: 312, scope: !1924)
!3117 = !{!3085, !2120, i64 8}
!3118 = !DILocation(line: 3098, column: 274, scope: !1924)
!3119 = !DILocation(line: 3098, column: 277, scope: !1924)
!3120 = !DILocation(line: 3098, column: 280, scope: !1924)
!3121 = !DILocation(line: 3098, column: 288, scope: !1924)
!3122 = !DILocation(line: 3098, column: 349, scope: !1924)
!3123 = !DILocation(line: 3098, column: 321, scope: !1924)
!3124 = !DILocation(line: 3098, column: 324, scope: !1924)
!3125 = !DILocation(line: 3098, column: 327, scope: !1924)
!3126 = !DILocation(line: 3098, column: 336, scope: !1924)
!3127 = !DILocation(line: 3098, column: 339, scope: !1924)
!3128 = !DILocation(line: 3098, column: 347, scope: !1924)
!3129 = !DILocation(line: 3098, column: 384, scope: !1924)
!3130 = !DILocation(line: 3098, column: 352, scope: !1924)
!3131 = !DILocation(line: 3098, column: 371, scope: !1924)
!3132 = !DILocation(line: 3098, column: 374, scope: !1924)
!3133 = !DILocation(line: 3098, column: 382, scope: !1924)
!3134 = !DILocation(line: 3098, column: 387, scope: !1919)
!3135 = !DILocation(line: 3098, column: 387, scope: !1924)
!3136 = !DILocation(line: 3098, column: 387, scope: !3137)
!3137 = !DILexicalBlockFile(scope: !1924, file: !458, discriminator: 7)
!3138 = !DILocation(line: 3099, column: 24, scope: !1919)
!3139 = !DILocation(line: 3099, column: 12, scope: !1919)
!3140 = !DILocation(line: 3099, column: 5, scope: !1919)
!3141 = !DILocation(line: 3100, column: 1, scope: !1919)
!3142 = !DILocation(line: 745, column: 35, scope: !1835)
!3143 = !DILocation(line: 745, column: 51, scope: !1835)
!3144 = !DILocation(line: 745, column: 67, scope: !1835)
!3145 = !DILocation(line: 748, column: 5, scope: !1835)
!3146 = !DILocation(line: 748, column: 15, scope: !1835)
!3147 = !DILocation(line: 749, column: 5, scope: !1835)
!3148 = !DILocation(line: 749, column: 17, scope: !1835)
!3149 = !DILocation(line: 750, column: 5, scope: !1835)
!3150 = !DILocation(line: 750, column: 17, scope: !1835)
!3151 = !DILocation(line: 751, column: 5, scope: !1835)
!3152 = !DILocation(line: 751, column: 16, scope: !1835)
!3153 = !DILocation(line: 752, column: 5, scope: !1835)
!3154 = !DILocation(line: 752, column: 15, scope: !1835)
!3155 = !DILocation(line: 753, column: 5, scope: !1835)
!3156 = !DILocation(line: 753, column: 17, scope: !1835)
!3157 = !DILocation(line: 755, column: 26, scope: !3158)
!3158 = distinct !DILexicalBlock(scope: !1835, file: !458, line: 755, column: 9)
!3159 = !DILocation(line: 755, column: 11, scope: !3158)
!3160 = !DILocation(line: 755, column: 34, scope: !3158)
!3161 = !DILocation(line: 755, column: 43, scope: !3158)
!3162 = !DILocation(line: 755, column: 9, scope: !1835)
!3163 = !DILocation(line: 757, column: 44, scope: !3164)
!3164 = distinct !DILexicalBlock(scope: !3165, file: !458, line: 757, column: 13)
!3165 = distinct !DILexicalBlock(scope: !3158, file: !458, line: 755, column: 49)
!3166 = !DILocation(line: 757, column: 32, scope: !3164)
!3167 = !DILocation(line: 757, column: 13, scope: !3164)
!3168 = !DILocation(line: 757, column: 53, scope: !3164)
!3169 = !DILocation(line: 757, column: 13, scope: !3165)
!3170 = !DILocation(line: 758, column: 13, scope: !3164)
!3171 = !DILocation(line: 759, column: 5, scope: !3165)
!3172 = !DILocation(line: 762, column: 45, scope: !3173)
!3173 = distinct !DILexicalBlock(scope: !1835, file: !458, line: 762, column: 9)
!3174 = !DILocation(line: 762, column: 51, scope: !3173)
!3175 = !DILocation(line: 762, column: 10, scope: !3173)
!3176 = !DILocation(line: 762, column: 9, scope: !1835)
!3177 = !DILocation(line: 764, column: 9, scope: !3173)
!3178 = !DILocation(line: 767, column: 9, scope: !3179)
!3179 = distinct !DILexicalBlock(scope: !1835, file: !458, line: 767, column: 9)
!3180 = !DILocation(line: 767, column: 13, scope: !3179)
!3181 = !DILocation(line: 767, column: 9, scope: !1835)
!3182 = !DILocation(line: 768, column: 13, scope: !3183)
!3183 = distinct !DILexicalBlock(scope: !3184, file: !458, line: 768, column: 13)
!3184 = distinct !DILexicalBlock(scope: !3179, file: !458, line: 767, column: 28)
!3185 = !DILocation(line: 768, column: 22, scope: !3183)
!3186 = !DILocation(line: 768, column: 36, scope: !3183)
!3187 = !DILocation(line: 768, column: 39, scope: !3188)
!3188 = !DILexicalBlockFile(scope: !3183, file: !458, discriminator: 1)
!3189 = !DILocation(line: 768, column: 46, scope: !3183)
!3190 = !DILocation(line: 768, column: 13, scope: !3184)
!3191 = !DILocation(line: 769, column: 29, scope: !3192)
!3192 = distinct !DILexicalBlock(scope: !3183, file: !458, line: 768, column: 61)
!3193 = !DILocation(line: 769, column: 13, scope: !3192)
!3194 = !DILocation(line: 771, column: 13, scope: !3192)
!3195 = !DILocation(line: 773, column: 9, scope: !3184)
!3196 = !DILocation(line: 776, column: 26, scope: !1848)
!3197 = !DILocation(line: 776, column: 33, scope: !1848)
!3198 = !DILocation(line: 776, column: 44, scope: !1848)
!3199 = !{!2206, !2130, i64 168}
!3200 = !DILocation(line: 776, column: 53, scope: !1848)
!3201 = !DILocation(line: 776, column: 70, scope: !1848)
!3202 = !DILocation(line: 776, column: 9, scope: !1835)
!3203 = !DILocation(line: 778, column: 9, scope: !1847)
!3204 = !DILocation(line: 778, column: 19, scope: !1847)
!3205 = !DILocation(line: 778, column: 29, scope: !1847)
!3206 = !DILocation(line: 779, column: 13, scope: !3207)
!3207 = distinct !DILexicalBlock(scope: !1847, file: !458, line: 779, column: 13)
!3208 = !DILocation(line: 779, column: 22, scope: !3207)
!3209 = !DILocation(line: 779, column: 13, scope: !1847)
!3210 = !DILocation(line: 780, column: 29, scope: !3211)
!3211 = distinct !DILexicalBlock(scope: !3207, file: !458, line: 779, column: 37)
!3212 = !DILocation(line: 780, column: 13, scope: !3211)
!3213 = !DILocation(line: 782, column: 13, scope: !3211)
!3214 = !DILocation(line: 784, column: 45, scope: !1847)
!3215 = !DILocation(line: 784, column: 50, scope: !1847)
!3216 = !DILocation(line: 784, column: 60, scope: !1847)
!3217 = !DILocation(line: 784, column: 19, scope: !1847)
!3218 = !DILocation(line: 784, column: 17, scope: !1847)
!3219 = !DILocation(line: 785, column: 13, scope: !3220)
!3220 = distinct !DILexicalBlock(scope: !1847, file: !458, line: 785, column: 13)
!3221 = !DILocation(line: 785, column: 21, scope: !3220)
!3222 = !DILocation(line: 785, column: 13, scope: !1847)
!3223 = !DILocation(line: 786, column: 13, scope: !3220)
!3224 = !DILocation(line: 788, column: 33, scope: !1847)
!3225 = !DILocation(line: 788, column: 39, scope: !1847)
!3226 = !DILocation(line: 788, column: 15, scope: !1847)
!3227 = !DILocation(line: 788, column: 13, scope: !1847)
!3228 = !DILocation(line: 789, column: 9, scope: !1847)
!3229 = !DILocation(line: 789, column: 14, scope: !3230)
!3230 = !DILexicalBlockFile(scope: !1851, file: !458, discriminator: 1)
!3231 = !DILocation(line: 789, column: 24, scope: !1851)
!3232 = !DILocation(line: 789, column: 54, scope: !1851)
!3233 = !DILocation(line: 789, column: 72, scope: !3234)
!3234 = distinct !DILexicalBlock(scope: !1851, file: !458, line: 789, column: 69)
!3235 = !DILocation(line: 789, column: 89, scope: !3234)
!3236 = !DILocation(line: 789, column: 69, scope: !3234)
!3237 = !DILocation(line: 789, column: 99, scope: !3234)
!3238 = !DILocation(line: 789, column: 69, scope: !1851)
!3239 = !DILocation(line: 789, column: 69, scope: !3240)
!3240 = !DILexicalBlockFile(scope: !1851, file: !458, discriminator: 2)
!3241 = !DILocation(line: 789, column: 130, scope: !3242)
!3242 = !DILexicalBlockFile(scope: !3234, file: !458, discriminator: 3)
!3243 = !DILocation(line: 789, column: 148, scope: !3234)
!3244 = !DILocation(line: 789, column: 158, scope: !3234)
!3245 = !DILocation(line: 789, column: 183, scope: !3234)
!3246 = !DILocation(line: 789, column: 114, scope: !3234)
!3247 = !DILocation(line: 789, column: 202, scope: !3248)
!3248 = !DILexicalBlockFile(scope: !1847, file: !458, discriminator: 4)
!3249 = !DILocation(line: 789, column: 202, scope: !1851)
!3250 = !DILocation(line: 789, column: 202, scope: !3251)
!3251 = !DILexicalBlockFile(scope: !1851, file: !458, discriminator: 5)
!3252 = !DILocation(line: 790, column: 13, scope: !3253)
!3253 = distinct !DILexicalBlock(scope: !1847, file: !458, line: 790, column: 13)
!3254 = !DILocation(line: 790, column: 17, scope: !3253)
!3255 = !DILocation(line: 790, column: 13, scope: !1847)
!3256 = !DILocation(line: 791, column: 13, scope: !3253)
!3257 = !DILocation(line: 792, column: 9, scope: !1847)
!3258 = !DILocation(line: 792, column: 14, scope: !3259)
!3259 = !DILexicalBlockFile(scope: !1853, file: !458, discriminator: 1)
!3260 = !DILocation(line: 792, column: 24, scope: !1853)
!3261 = !DILocation(line: 792, column: 54, scope: !1853)
!3262 = !DILocation(line: 792, column: 68, scope: !3263)
!3263 = distinct !DILexicalBlock(scope: !1853, file: !458, line: 792, column: 65)
!3264 = !DILocation(line: 792, column: 85, scope: !3263)
!3265 = !DILocation(line: 792, column: 65, scope: !3263)
!3266 = !DILocation(line: 792, column: 95, scope: !3263)
!3267 = !DILocation(line: 792, column: 65, scope: !1853)
!3268 = !DILocation(line: 792, column: 65, scope: !3269)
!3269 = !DILexicalBlockFile(scope: !1853, file: !458, discriminator: 2)
!3270 = !DILocation(line: 792, column: 126, scope: !3271)
!3271 = !DILexicalBlockFile(scope: !3263, file: !458, discriminator: 3)
!3272 = !DILocation(line: 792, column: 144, scope: !3263)
!3273 = !DILocation(line: 792, column: 154, scope: !3263)
!3274 = !DILocation(line: 792, column: 179, scope: !3263)
!3275 = !DILocation(line: 792, column: 110, scope: !3263)
!3276 = !DILocation(line: 792, column: 198, scope: !3248)
!3277 = !DILocation(line: 792, column: 198, scope: !1853)
!3278 = !DILocation(line: 792, column: 198, scope: !3279)
!3279 = !DILexicalBlockFile(scope: !1853, file: !458, discriminator: 5)
!3280 = !DILocation(line: 793, column: 9, scope: !1847)
!3281 = !DILocation(line: 794, column: 5, scope: !1848)
!3282 = !DILocation(line: 797, column: 9, scope: !3283)
!3283 = distinct !DILexicalBlock(scope: !1835, file: !458, line: 797, column: 9)
!3284 = !DILocation(line: 797, column: 18, scope: !3283)
!3285 = !DILocation(line: 797, column: 32, scope: !3283)
!3286 = !DILocation(line: 797, column: 35, scope: !3287)
!3287 = !DILexicalBlockFile(scope: !3283, file: !458, discriminator: 1)
!3288 = !DILocation(line: 797, column: 42, scope: !3283)
!3289 = !DILocation(line: 797, column: 9, scope: !1835)
!3290 = !DILocation(line: 798, column: 25, scope: !3291)
!3291 = distinct !DILexicalBlock(scope: !3283, file: !458, line: 797, column: 57)
!3292 = !DILocation(line: 798, column: 9, scope: !3291)
!3293 = !DILocation(line: 800, column: 9, scope: !3291)
!3294 = !DILocation(line: 804, column: 32, scope: !1835)
!3295 = !DILocation(line: 804, column: 37, scope: !1835)
!3296 = !DILocation(line: 804, column: 13, scope: !1835)
!3297 = !DILocation(line: 804, column: 11, scope: !1835)
!3298 = !DILocation(line: 805, column: 9, scope: !3299)
!3299 = distinct !DILexicalBlock(scope: !1835, file: !458, line: 805, column: 9)
!3300 = !DILocation(line: 805, column: 15, scope: !3299)
!3301 = !DILocation(line: 805, column: 21, scope: !3299)
!3302 = !DILocation(line: 805, column: 24, scope: !3303)
!3303 = !DILexicalBlockFile(scope: !3299, file: !458, discriminator: 1)
!3304 = !DILocation(line: 805, column: 9, scope: !1835)
!3305 = !DILocation(line: 806, column: 36, scope: !3306)
!3306 = distinct !DILexicalBlock(scope: !3307, file: !458, line: 806, column: 13)
!3307 = distinct !DILexicalBlock(scope: !3299, file: !458, line: 805, column: 42)
!3308 = !DILocation(line: 806, column: 13, scope: !3306)
!3309 = !DILocation(line: 806, column: 13, scope: !3307)
!3310 = !DILocation(line: 807, column: 13, scope: !3306)
!3311 = !DILocation(line: 808, column: 9, scope: !3307)
!3312 = !DILocation(line: 809, column: 5, scope: !3307)
!3313 = !DILocation(line: 810, column: 14, scope: !3314)
!3314 = distinct !DILexicalBlock(scope: !3299, file: !458, line: 810, column: 14)
!3315 = !DILocation(line: 810, column: 20, scope: !3314)
!3316 = !DILocation(line: 810, column: 14, scope: !3299)
!3317 = !DILocation(line: 811, column: 25, scope: !3318)
!3318 = distinct !DILexicalBlock(scope: !3314, file: !458, line: 810, column: 25)
!3319 = !DILocation(line: 811, column: 9, scope: !3318)
!3320 = !DILocation(line: 812, column: 9, scope: !3318)
!3321 = !DILocation(line: 815, column: 13, scope: !3322)
!3322 = distinct !DILexicalBlock(scope: !3323, file: !458, line: 815, column: 13)
!3323 = distinct !DILexicalBlock(scope: !3314, file: !458, line: 814, column: 10)
!3324 = !DILocation(line: 815, column: 19, scope: !3322)
!3325 = !DILocation(line: 815, column: 13, scope: !3323)
!3326 = !DILocation(line: 816, column: 48, scope: !3327)
!3327 = distinct !DILexicalBlock(scope: !3328, file: !458, line: 816, column: 17)
!3328 = distinct !DILexicalBlock(scope: !3322, file: !458, line: 815, column: 24)
!3329 = !DILocation(line: 816, column: 36, scope: !3327)
!3330 = !DILocation(line: 816, column: 54, scope: !3327)
!3331 = !DILocation(line: 816, column: 17, scope: !3327)
!3332 = !DILocation(line: 816, column: 17, scope: !3328)
!3333 = !DILocation(line: 817, column: 17, scope: !3327)
!3334 = !DILocation(line: 818, column: 52, scope: !3328)
!3335 = !DILocation(line: 818, column: 37, scope: !3328)
!3336 = !DILocation(line: 818, column: 60, scope: !3328)
!3337 = !DILocation(line: 818, column: 35, scope: !3328)
!3338 = !DILocation(line: 818, column: 94, scope: !3339)
!3339 = !DILexicalBlockFile(scope: !3328, file: !458, discriminator: 1)
!3340 = !DILocation(line: 818, column: 102, scope: !3328)
!3341 = !DILocation(line: 818, column: 35, scope: !3342)
!3342 = !DILexicalBlockFile(scope: !3328, file: !458, discriminator: 2)
!3343 = !DILocation(line: 818, column: 144, scope: !3344)
!3344 = !DILexicalBlockFile(scope: !3345, file: !458, discriminator: 4)
!3345 = !DILexicalBlockFile(scope: !3328, file: !458, discriminator: 3)
!3346 = !DILocation(line: 818, column: 13, scope: !3328)
!3347 = !DILocation(line: 819, column: 9, scope: !3328)
!3348 = !DILocation(line: 820, column: 9, scope: !3323)
!3349 = !DILocation(line: 824, column: 12, scope: !1856)
!3350 = !DILocation(line: 824, column: 18, scope: !1856)
!3351 = !DILocation(line: 824, column: 27, scope: !1856)
!3352 = !DILocation(line: 824, column: 40, scope: !1856)
!3353 = !DILocation(line: 824, column: 55, scope: !1856)
!3354 = !DILocation(line: 824, column: 60, scope: !3355)
!3355 = !DILexicalBlockFile(scope: !1856, file: !458, discriminator: 1)
!3356 = !DILocation(line: 824, column: 66, scope: !1856)
!3357 = !DILocation(line: 824, column: 75, scope: !1856)
!3358 = !DILocation(line: 824, column: 89, scope: !1856)
!3359 = !DILocation(line: 824, column: 102, scope: !1856)
!3360 = !DILocation(line: 824, column: 9, scope: !1835)
!3361 = !DILocation(line: 825, column: 9, scope: !1855)
!3362 = !DILocation(line: 825, column: 20, scope: !1855)
!3363 = !DILocation(line: 826, column: 9, scope: !1855)
!3364 = !DILocation(line: 826, column: 19, scope: !1855)
!3365 = !DILocation(line: 827, column: 32, scope: !3366)
!3366 = distinct !DILexicalBlock(scope: !1855, file: !458, line: 827, column: 13)
!3367 = !DILocation(line: 827, column: 13, scope: !3366)
!3368 = !DILocation(line: 827, column: 85, scope: !3366)
!3369 = !DILocation(line: 827, column: 13, scope: !1855)
!3370 = !DILocation(line: 828, column: 13, scope: !3366)
!3371 = !DILocation(line: 829, column: 21, scope: !1855)
!3372 = !DILocation(line: 829, column: 14, scope: !1855)
!3373 = !DILocation(line: 830, column: 44, scope: !3374)
!3374 = distinct !DILexicalBlock(scope: !1855, file: !458, line: 830, column: 13)
!3375 = !DILocation(line: 830, column: 32, scope: !3374)
!3376 = !DILocation(line: 830, column: 50, scope: !3374)
!3377 = !DILocation(line: 830, column: 13, scope: !3374)
!3378 = !DILocation(line: 830, column: 56, scope: !3374)
!3379 = !DILocation(line: 830, column: 13, scope: !1855)
!3380 = !DILocation(line: 830, column: 61, scope: !3381)
!3381 = !DILexicalBlockFile(scope: !3374, file: !458, discriminator: 1)
!3382 = !DILocation(line: 831, column: 67, scope: !3383)
!3383 = distinct !DILexicalBlock(scope: !1855, file: !458, line: 831, column: 13)
!3384 = !DILocation(line: 831, column: 52, scope: !3383)
!3385 = !DILocation(line: 831, column: 75, scope: !3383)
!3386 = !DILocation(line: 831, column: 50, scope: !3383)
!3387 = !DILocation(line: 831, column: 109, scope: !3388)
!3388 = !DILexicalBlockFile(scope: !3383, file: !458, discriminator: 1)
!3389 = !DILocation(line: 831, column: 117, scope: !3383)
!3390 = !DILocation(line: 831, column: 50, scope: !3391)
!3391 = !DILexicalBlockFile(scope: !3383, file: !458, discriminator: 2)
!3392 = !DILocation(line: 832, column: 20, scope: !3383)
!3393 = !DILocation(line: 831, column: 13, scope: !3383)
!3394 = !DILocation(line: 832, column: 31, scope: !3383)
!3395 = !DILocation(line: 831, column: 13, scope: !1855)
!3396 = !DILocation(line: 833, column: 13, scope: !3383)
!3397 = !DILocation(line: 834, column: 9, scope: !1855)
!3398 = !DILocation(line: 835, column: 9, scope: !1855)
!3399 = !DILocation(line: 837, column: 9, scope: !1855)
!3400 = !DILocation(line: 838, column: 9, scope: !1855)
!3401 = !DILocation(line: 839, column: 5, scope: !1856)
!3402 = !DILocation(line: 844, column: 27, scope: !1835)
!3403 = !DILocation(line: 844, column: 10, scope: !1835)
!3404 = !DILocation(line: 844, column: 8, scope: !1835)
!3405 = !DILocation(line: 845, column: 9, scope: !3406)
!3406 = distinct !DILexicalBlock(scope: !1835, file: !458, line: 845, column: 9)
!3407 = !DILocation(line: 845, column: 12, scope: !3406)
!3408 = !DILocation(line: 845, column: 9, scope: !1835)
!3409 = !DILocation(line: 846, column: 9, scope: !3406)
!3410 = !DILocation(line: 847, column: 31, scope: !1835)
!3411 = !DILocation(line: 847, column: 37, scope: !1835)
!3412 = !DILocation(line: 847, column: 47, scope: !1835)
!3413 = !{!2206, !2120, i64 224}
!3414 = !DILocation(line: 847, column: 14, scope: !1835)
!3415 = !DILocation(line: 850, column: 5, scope: !1835)
!3416 = !DILocation(line: 851, column: 9, scope: !1859)
!3417 = !DILocation(line: 851, column: 19, scope: !1859)
!3418 = !DILocation(line: 852, column: 9, scope: !1859)
!3419 = !DILocation(line: 852, column: 13, scope: !1859)
!3420 = !DILocation(line: 852, column: 17, scope: !1859)
!3421 = !DILocation(line: 855, column: 16, scope: !1859)
!3422 = !DILocation(line: 855, column: 25, scope: !1859)
!3423 = !DILocation(line: 855, column: 14, scope: !1859)
!3424 = !DILocation(line: 856, column: 13, scope: !3425)
!3425 = distinct !DILexicalBlock(scope: !1859, file: !458, line: 856, column: 13)
!3426 = !DILocation(line: 856, column: 18, scope: !3425)
!3427 = !DILocation(line: 856, column: 13, scope: !1859)
!3428 = !DILocation(line: 857, column: 17, scope: !3429)
!3429 = distinct !DILexicalBlock(scope: !3430, file: !458, line: 857, column: 17)
!3430 = distinct !DILexicalBlock(scope: !3425, file: !458, line: 856, column: 33)
!3431 = !DILocation(line: 857, column: 17, scope: !3430)
!3432 = !DILocation(line: 858, column: 45, scope: !3433)
!3433 = distinct !DILexicalBlock(scope: !3434, file: !458, line: 858, column: 21)
!3434 = distinct !DILexicalBlock(scope: !3429, file: !458, line: 857, column: 35)
!3435 = !DILocation(line: 858, column: 22, scope: !3433)
!3436 = !DILocation(line: 858, column: 21, scope: !3434)
!3437 = !DILocation(line: 859, column: 21, scope: !3433)
!3438 = !DILocation(line: 860, column: 17, scope: !3434)
!3439 = !DILocation(line: 861, column: 13, scope: !3434)
!3440 = !DILocation(line: 862, column: 13, scope: !3430)
!3441 = !DILocation(line: 866, column: 28, scope: !1859)
!3442 = !DILocation(line: 866, column: 14, scope: !1859)
!3443 = !DILocation(line: 866, column: 12, scope: !1859)
!3444 = !DILocation(line: 867, column: 9, scope: !1859)
!3445 = !DILocation(line: 867, column: 14, scope: !3446)
!3446 = !DILexicalBlockFile(scope: !1865, file: !458, discriminator: 1)
!3447 = !DILocation(line: 867, column: 24, scope: !1865)
!3448 = !DILocation(line: 867, column: 54, scope: !1865)
!3449 = !DILocation(line: 867, column: 69, scope: !3450)
!3450 = distinct !DILexicalBlock(scope: !1865, file: !458, line: 867, column: 66)
!3451 = !DILocation(line: 867, column: 86, scope: !3450)
!3452 = !DILocation(line: 867, column: 66, scope: !3450)
!3453 = !DILocation(line: 867, column: 96, scope: !3450)
!3454 = !DILocation(line: 867, column: 66, scope: !1865)
!3455 = !DILocation(line: 867, column: 66, scope: !3456)
!3456 = !DILexicalBlockFile(scope: !1865, file: !458, discriminator: 2)
!3457 = !DILocation(line: 867, column: 127, scope: !3458)
!3458 = !DILexicalBlockFile(scope: !3450, file: !458, discriminator: 3)
!3459 = !DILocation(line: 867, column: 145, scope: !3450)
!3460 = !DILocation(line: 867, column: 155, scope: !3450)
!3461 = !DILocation(line: 867, column: 180, scope: !3450)
!3462 = !DILocation(line: 867, column: 111, scope: !3450)
!3463 = !DILocation(line: 867, column: 199, scope: !3464)
!3464 = !DILexicalBlockFile(scope: !1859, file: !458, discriminator: 4)
!3465 = !DILocation(line: 867, column: 199, scope: !1865)
!3466 = !DILocation(line: 867, column: 199, scope: !3467)
!3467 = !DILexicalBlockFile(scope: !1865, file: !458, discriminator: 5)
!3468 = !DILocation(line: 868, column: 14, scope: !3469)
!3469 = distinct !DILexicalBlock(scope: !1859, file: !458, line: 868, column: 13)
!3470 = !DILocation(line: 868, column: 13, scope: !1859)
!3471 = !DILocation(line: 869, column: 13, scope: !3469)
!3472 = !DILocation(line: 872, column: 30, scope: !3473)
!3473 = distinct !DILexicalBlock(scope: !1859, file: !458, line: 872, column: 13)
!3474 = !DILocation(line: 872, column: 15, scope: !3473)
!3475 = !DILocation(line: 872, column: 38, scope: !3473)
!3476 = !DILocation(line: 872, column: 49, scope: !3473)
!3477 = !DILocation(line: 872, column: 55, scope: !3473)
!3478 = !DILocation(line: 872, column: 47, scope: !3473)
!3479 = !DILocation(line: 872, column: 13, scope: !1859)
!3480 = !DILocation(line: 873, column: 30, scope: !3473)
!3481 = !DILocation(line: 873, column: 15, scope: !3473)
!3482 = !DILocation(line: 873, column: 38, scope: !3473)
!3483 = !DILocation(line: 873, column: 46, scope: !3473)
!3484 = !DILocation(line: 873, column: 13, scope: !3473)
!3485 = !DILocation(line: 874, column: 49, scope: !3486)
!3486 = distinct !DILexicalBlock(scope: !3473, file: !458, line: 874, column: 18)
!3487 = !DILocation(line: 874, column: 37, scope: !3486)
!3488 = !DILocation(line: 874, column: 72, scope: !3486)
!3489 = !DILocation(line: 874, column: 57, scope: !3486)
!3490 = !DILocation(line: 874, column: 80, scope: !3486)
!3491 = !DILocation(line: 874, column: 88, scope: !3486)
!3492 = !DILocation(line: 874, column: 18, scope: !3486)
!3493 = !DILocation(line: 874, column: 92, scope: !3486)
!3494 = !DILocation(line: 874, column: 18, scope: !3473)
!3495 = !DILocation(line: 875, column: 13, scope: !3486)
!3496 = !DILocation(line: 876, column: 168, scope: !1859)
!3497 = !DILocation(line: 876, column: 146, scope: !1859)
!3498 = !DILocation(line: 876, column: 131, scope: !1859)
!3499 = !DILocation(line: 876, column: 154, scope: !1859)
!3500 = !DILocation(line: 876, column: 162, scope: !1859)
!3501 = !DILocation(line: 876, column: 41, scope: !1859)
!3502 = !DILocation(line: 876, column: 26, scope: !1859)
!3503 = !DILocation(line: 876, column: 49, scope: !1859)
!3504 = !DILocation(line: 876, column: 24, scope: !1859)
!3505 = !DILocation(line: 876, column: 83, scope: !3506)
!3506 = !DILexicalBlockFile(scope: !1859, file: !458, discriminator: 1)
!3507 = !DILocation(line: 876, column: 91, scope: !1859)
!3508 = !DILocation(line: 876, column: 24, scope: !3509)
!3509 = !DILexicalBlockFile(scope: !1859, file: !458, discriminator: 2)
!3510 = !DILocation(line: 876, column: 9, scope: !3511)
!3511 = !DILexicalBlockFile(scope: !3512, file: !458, discriminator: 4)
!3512 = !DILexicalBlockFile(scope: !1859, file: !458, discriminator: 3)
!3513 = !DILocation(line: 876, column: 166, scope: !1859)
!3514 = !DILocation(line: 877, column: 5, scope: !1860)
!3515 = !DILocation(line: 877, column: 5, scope: !3516)
!3516 = !DILexicalBlockFile(scope: !1860, file: !458, discriminator: 1)
!3517 = !DILocation(line: 850, column: 5, scope: !1860)
!3518 = !DILocation(line: 880, column: 5, scope: !1835)
!3519 = !DILocation(line: 880, column: 10, scope: !3520)
!3520 = !DILexicalBlockFile(scope: !1867, file: !458, discriminator: 1)
!3521 = !DILocation(line: 880, column: 20, scope: !1867)
!3522 = !DILocation(line: 880, column: 50, scope: !1867)
!3523 = !DILocation(line: 880, column: 63, scope: !3524)
!3524 = distinct !DILexicalBlock(scope: !1867, file: !458, line: 880, column: 60)
!3525 = !DILocation(line: 880, column: 80, scope: !3524)
!3526 = !DILocation(line: 880, column: 60, scope: !3524)
!3527 = !DILocation(line: 880, column: 90, scope: !3524)
!3528 = !DILocation(line: 880, column: 60, scope: !1867)
!3529 = !DILocation(line: 880, column: 60, scope: !3530)
!3530 = !DILexicalBlockFile(scope: !1867, file: !458, discriminator: 2)
!3531 = !DILocation(line: 880, column: 121, scope: !3532)
!3532 = !DILexicalBlockFile(scope: !3524, file: !458, discriminator: 3)
!3533 = !DILocation(line: 880, column: 139, scope: !3524)
!3534 = !DILocation(line: 880, column: 149, scope: !3524)
!3535 = !DILocation(line: 880, column: 174, scope: !3524)
!3536 = !DILocation(line: 880, column: 105, scope: !3524)
!3537 = !DILocation(line: 880, column: 193, scope: !3538)
!3538 = !DILexicalBlockFile(scope: !1835, file: !458, discriminator: 4)
!3539 = !DILocation(line: 880, column: 193, scope: !1867)
!3540 = !DILocation(line: 880, column: 193, scope: !3541)
!3541 = !DILexicalBlockFile(scope: !1867, file: !458, discriminator: 5)
!3542 = !DILocation(line: 881, column: 5, scope: !1835)
!3543 = !DILocation(line: 885, column: 5, scope: !1835)
!3544 = !DILocation(line: 885, column: 10, scope: !3545)
!3545 = !DILexicalBlockFile(scope: !1869, file: !458, discriminator: 1)
!3546 = !DILocation(line: 885, column: 20, scope: !1869)
!3547 = !DILocation(line: 885, column: 50, scope: !1869)
!3548 = !DILocation(line: 885, column: 63, scope: !3549)
!3549 = distinct !DILexicalBlock(scope: !1869, file: !458, line: 885, column: 60)
!3550 = !DILocation(line: 885, column: 80, scope: !3549)
!3551 = !DILocation(line: 885, column: 60, scope: !3549)
!3552 = !DILocation(line: 885, column: 90, scope: !3549)
!3553 = !DILocation(line: 885, column: 60, scope: !1869)
!3554 = !DILocation(line: 885, column: 60, scope: !3555)
!3555 = !DILexicalBlockFile(scope: !1869, file: !458, discriminator: 2)
!3556 = !DILocation(line: 885, column: 121, scope: !3557)
!3557 = !DILexicalBlockFile(scope: !3549, file: !458, discriminator: 3)
!3558 = !DILocation(line: 885, column: 139, scope: !3549)
!3559 = !DILocation(line: 885, column: 149, scope: !3549)
!3560 = !DILocation(line: 885, column: 174, scope: !3549)
!3561 = !DILocation(line: 885, column: 105, scope: !3549)
!3562 = !DILocation(line: 885, column: 193, scope: !3538)
!3563 = !DILocation(line: 885, column: 193, scope: !1869)
!3564 = !DILocation(line: 885, column: 193, scope: !3565)
!3565 = !DILexicalBlockFile(scope: !1869, file: !458, discriminator: 5)
!3566 = !DILocation(line: 886, column: 5, scope: !1835)
!3567 = !DILocation(line: 887, column: 1, scope: !1835)
!3568 = !DILocation(line: 2957, column: 40, scope: !1870)
!3569 = !DILocation(line: 2959, column: 5, scope: !1870)
!3570 = !DILocation(line: 2959, column: 10, scope: !3571)
!3571 = !DILexicalBlockFile(scope: !1876, file: !458, discriminator: 1)
!3572 = !DILocation(line: 2959, column: 21, scope: !1876)
!3573 = !DILocation(line: 2959, column: 40, scope: !1876)
!3574 = !DILocation(line: 2959, column: 26, scope: !1876)
!3575 = !DILocation(line: 2959, column: 43, scope: !1876)
!3576 = !DILocation(line: 2959, column: 62, scope: !1876)
!3577 = !DILocation(line: 2959, column: 87, scope: !3578)
!3578 = !DILexicalBlockFile(scope: !3579, file: !458, discriminator: 2)
!3579 = distinct !DILexicalBlock(scope: !1876, file: !458, line: 2959, column: 65)
!3580 = !DILocation(line: 2959, column: 91, scope: !3579)
!3581 = !DILocation(line: 2959, column: 94, scope: !3579)
!3582 = !DILocation(line: 2959, column: 102, scope: !3579)
!3583 = !DILocation(line: 2959, column: 129, scope: !3579)
!3584 = !DILocation(line: 2959, column: 68, scope: !3579)
!3585 = !DILocation(line: 2959, column: 72, scope: !3579)
!3586 = !DILocation(line: 2959, column: 75, scope: !3579)
!3587 = !DILocation(line: 2959, column: 83, scope: !3579)
!3588 = !DILocation(line: 2959, column: 158, scope: !3579)
!3589 = !DILocation(line: 2959, column: 158, scope: !3590)
!3590 = !DILexicalBlockFile(scope: !3579, file: !458, discriminator: 3)
!3591 = !DILocation(line: 2959, column: 199, scope: !3592)
!3592 = !DILexicalBlockFile(scope: !1876, file: !458, discriminator: 4)
!3593 = !DILocation(line: 2959, column: 202, scope: !1876)
!3594 = !DILocation(line: 2959, column: 205, scope: !1876)
!3595 = !DILocation(line: 2959, column: 171, scope: !1876)
!3596 = !DILocation(line: 2959, column: 174, scope: !1876)
!3597 = !DILocation(line: 2959, column: 177, scope: !1876)
!3598 = !DILocation(line: 2959, column: 186, scope: !1876)
!3599 = !DILocation(line: 2959, column: 189, scope: !1876)
!3600 = !DILocation(line: 2959, column: 197, scope: !1876)
!3601 = !DILocation(line: 2959, column: 242, scope: !1876)
!3602 = !DILocation(line: 2959, column: 245, scope: !1876)
!3603 = !DILocation(line: 2959, column: 248, scope: !1876)
!3604 = !DILocation(line: 2959, column: 214, scope: !1876)
!3605 = !DILocation(line: 2959, column: 217, scope: !1876)
!3606 = !DILocation(line: 2959, column: 220, scope: !1876)
!3607 = !DILocation(line: 2959, column: 229, scope: !1876)
!3608 = !DILocation(line: 2959, column: 232, scope: !1876)
!3609 = !DILocation(line: 2959, column: 240, scope: !1876)
!3610 = !DILocation(line: 2959, column: 257, scope: !1876)
!3611 = !DILocation(line: 2959, column: 260, scope: !1876)
!3612 = !DILocation(line: 2959, column: 263, scope: !1876)
!3613 = !DILocation(line: 2959, column: 271, scope: !1876)
!3614 = !DILocation(line: 2959, column: 285, scope: !1870)
!3615 = !DILocation(line: 2959, column: 285, scope: !1876)
!3616 = !DILocation(line: 2960, column: 5, scope: !1870)
!3617 = !DILocation(line: 2960, column: 10, scope: !3618)
!3618 = !DILexicalBlockFile(scope: !1878, file: !458, discriminator: 1)
!3619 = !DILocation(line: 2960, column: 20, scope: !1878)
!3620 = !DILocation(line: 2960, column: 51, scope: !1878)
!3621 = !DILocation(line: 2960, column: 55, scope: !1878)
!3622 = !DILocation(line: 2960, column: 38, scope: !1878)
!3623 = !DILocation(line: 2960, column: 68, scope: !1881)
!3624 = !DILocation(line: 2960, column: 84, scope: !1881)
!3625 = !DILocation(line: 2960, column: 68, scope: !1878)
!3626 = !DILocation(line: 2960, column: 99, scope: !3627)
!3627 = !DILexicalBlockFile(scope: !1881, file: !458, discriminator: 2)
!3628 = !DILocation(line: 2960, column: 104, scope: !3629)
!3629 = !DILexicalBlockFile(scope: !1880, file: !458, discriminator: 4)
!3630 = !DILocation(line: 2960, column: 114, scope: !1880)
!3631 = !DILocation(line: 2960, column: 144, scope: !1880)
!3632 = !DILocation(line: 2960, column: 170, scope: !3633)
!3633 = distinct !DILexicalBlock(scope: !1880, file: !458, line: 2960, column: 167)
!3634 = !DILocation(line: 2960, column: 187, scope: !3633)
!3635 = !DILocation(line: 2960, column: 167, scope: !3633)
!3636 = !DILocation(line: 2960, column: 197, scope: !3633)
!3637 = !DILocation(line: 2960, column: 167, scope: !1880)
!3638 = !DILocation(line: 2960, column: 167, scope: !3639)
!3639 = !DILexicalBlockFile(scope: !1880, file: !458, discriminator: 5)
!3640 = !DILocation(line: 2960, column: 228, scope: !3641)
!3641 = !DILexicalBlockFile(scope: !3633, file: !458, discriminator: 6)
!3642 = !DILocation(line: 2960, column: 246, scope: !3633)
!3643 = !DILocation(line: 2960, column: 256, scope: !3633)
!3644 = !DILocation(line: 2960, column: 281, scope: !3633)
!3645 = !DILocation(line: 2960, column: 212, scope: !3633)
!3646 = !DILocation(line: 2960, column: 300, scope: !3647)
!3647 = !DILexicalBlockFile(scope: !1881, file: !458, discriminator: 7)
!3648 = !DILocation(line: 2960, column: 300, scope: !1880)
!3649 = !DILocation(line: 2960, column: 300, scope: !3650)
!3650 = !DILexicalBlockFile(scope: !1880, file: !458, discriminator: 8)
!3651 = !DILocation(line: 2960, column: 300, scope: !3652)
!3652 = !DILexicalBlockFile(scope: !1880, file: !458, discriminator: 9)
!3653 = !DILocation(line: 2960, column: 313, scope: !3654)
!3654 = !DILexicalBlockFile(scope: !3655, file: !458, discriminator: 10)
!3655 = !DILexicalBlockFile(scope: !1870, file: !458, discriminator: 3)
!3656 = !DILocation(line: 2960, column: 313, scope: !1878)
!3657 = !DILocation(line: 2961, column: 21, scope: !1870)
!3658 = !DILocation(line: 2961, column: 5, scope: !1870)
!3659 = !DILocation(line: 2962, column: 1, scope: !1870)
!3660 = !DILocation(line: 2965, column: 41, scope: !1882)
!3661 = !DILocation(line: 2965, column: 55, scope: !1882)
!3662 = !DILocation(line: 2965, column: 68, scope: !1882)
!3663 = !DILocation(line: 2967, column: 5, scope: !1882)
!3664 = !DILocation(line: 2967, column: 14, scope: !3665)
!3665 = !DILexicalBlockFile(scope: !1891, file: !458, discriminator: 1)
!3666 = !DILocation(line: 2967, column: 18, scope: !1891)
!3667 = !DILocation(line: 2967, column: 14, scope: !1891)
!3668 = !DILocation(line: 2967, column: 14, scope: !1892)
!3669 = !DILocation(line: 2967, column: 28, scope: !3670)
!3670 = !DILexicalBlockFile(scope: !1890, file: !458, discriminator: 2)
!3671 = !DILocation(line: 2967, column: 32, scope: !1890)
!3672 = !DILocation(line: 2967, column: 39, scope: !1890)
!3673 = !DILocation(line: 2967, column: 58, scope: !1890)
!3674 = !DILocation(line: 2967, column: 62, scope: !1890)
!3675 = !DILocation(line: 2967, column: 45, scope: !1890)
!3676 = !DILocation(line: 2967, column: 71, scope: !1890)
!3677 = !DILocation(line: 2967, column: 81, scope: !3678)
!3678 = distinct !DILexicalBlock(scope: !1890, file: !458, line: 2967, column: 81)
!3679 = !DILocation(line: 2967, column: 81, scope: !1890)
!3680 = !DILocation(line: 2967, column: 94, scope: !3681)
!3681 = !DILexicalBlockFile(scope: !3678, file: !458, discriminator: 4)
!3682 = !DILocation(line: 2967, column: 87, scope: !3678)
!3683 = !DILocation(line: 2967, column: 100, scope: !3684)
!3684 = !DILexicalBlockFile(scope: !1891, file: !458, discriminator: 5)
!3685 = !DILocation(line: 2967, column: 100, scope: !3686)
!3686 = !DILexicalBlockFile(scope: !3687, file: !458, discriminator: 7)
!3687 = !DILexicalBlockFile(scope: !1891, file: !458, discriminator: 6)
!3688 = !DILocation(line: 2967, column: 100, scope: !1890)
!3689 = !DILocation(line: 2967, column: 102, scope: !3690)
!3690 = !DILexicalBlockFile(scope: !3691, file: !458, discriminator: 8)
!3691 = !DILexicalBlockFile(scope: !1892, file: !458, discriminator: 3)
!3692 = !DILocation(line: 2968, column: 5, scope: !1882)
!3693 = !DILocation(line: 2969, column: 1, scope: !1882)
!3694 = !DILocation(line: 2972, column: 37, scope: !1893)
!3695 = !DILocation(line: 2974, column: 5, scope: !1893)
!3696 = !DILocation(line: 2974, column: 24, scope: !1893)
!3697 = !DILocation(line: 2975, column: 5, scope: !1893)
!3698 = !DILocation(line: 2975, column: 15, scope: !1893)
!3699 = !DILocation(line: 2978, column: 11, scope: !1893)
!3700 = !DILocation(line: 2978, column: 15, scope: !1893)
!3701 = !DILocation(line: 2978, column: 9, scope: !1893)
!3702 = !DILocation(line: 2979, column: 9, scope: !3703)
!3703 = distinct !DILexicalBlock(scope: !1893, file: !458, line: 2979, column: 9)
!3704 = !DILocation(line: 2979, column: 13, scope: !3703)
!3705 = !DILocation(line: 2979, column: 9, scope: !1893)
!3706 = !DILocation(line: 2980, column: 9, scope: !3703)
!3707 = !DILocation(line: 2983, column: 9, scope: !3708)
!3708 = distinct !DILexicalBlock(scope: !1893, file: !458, line: 2983, column: 9)
!3709 = !DILocation(line: 2983, column: 13, scope: !3708)
!3710 = !DILocation(line: 2983, column: 56, scope: !3708)
!3711 = !DILocation(line: 2983, column: 41, scope: !3708)
!3712 = !DILocation(line: 2983, column: 63, scope: !3708)
!3713 = !DILocation(line: 2983, column: 22, scope: !3708)
!3714 = !DILocation(line: 2983, column: 9, scope: !1893)
!3715 = !DILocation(line: 2985, column: 146, scope: !3716)
!3716 = distinct !DILexicalBlock(scope: !3708, file: !458, line: 2983, column: 74)
!3717 = !DILocation(line: 2985, column: 150, scope: !3716)
!3718 = !DILocation(line: 2985, column: 60, scope: !3716)
!3719 = !DILocation(line: 2985, column: 45, scope: !3716)
!3720 = !DILocation(line: 2985, column: 67, scope: !3716)
!3721 = !DILocation(line: 2985, column: 43, scope: !3716)
!3722 = !DILocation(line: 2985, column: 101, scope: !3723)
!3723 = !DILexicalBlockFile(scope: !3716, file: !458, discriminator: 1)
!3724 = !DILocation(line: 2985, column: 108, scope: !3716)
!3725 = !DILocation(line: 2985, column: 43, scope: !3726)
!3726 = !DILexicalBlockFile(scope: !3716, file: !458, discriminator: 2)
!3727 = !DILocation(line: 2985, column: 28, scope: !3728)
!3728 = !DILexicalBlockFile(scope: !3729, file: !458, discriminator: 4)
!3729 = !DILexicalBlockFile(scope: !3716, file: !458, discriminator: 3)
!3730 = !DILocation(line: 2985, column: 13, scope: !3716)
!3731 = !DILocation(line: 2984, column: 16, scope: !3716)
!3732 = !DILocation(line: 2984, column: 14, scope: !3716)
!3733 = !DILocation(line: 2986, column: 13, scope: !3734)
!3734 = distinct !DILexicalBlock(scope: !3716, file: !458, line: 2986, column: 13)
!3735 = !DILocation(line: 2986, column: 18, scope: !3734)
!3736 = !DILocation(line: 2986, column: 13, scope: !3716)
!3737 = !DILocation(line: 2987, column: 15, scope: !3734)
!3738 = !DILocation(line: 2987, column: 19, scope: !3734)
!3739 = !DILocation(line: 2987, column: 13, scope: !3734)
!3740 = !DILocation(line: 2988, column: 16, scope: !3716)
!3741 = !DILocation(line: 2988, column: 9, scope: !3716)
!3742 = !DILocation(line: 2991, column: 5, scope: !1893)
!3743 = !DILocation(line: 2991, column: 10, scope: !3744)
!3744 = !DILexicalBlockFile(scope: !1901, file: !458, discriminator: 1)
!3745 = !DILocation(line: 2991, column: 20, scope: !1901)
!3746 = !DILocation(line: 2991, column: 50, scope: !1901)
!3747 = !DILocation(line: 2991, column: 37, scope: !1901)
!3748 = !DILocation(line: 2991, column: 64, scope: !3749)
!3749 = distinct !DILexicalBlock(scope: !1901, file: !458, line: 2991, column: 61)
!3750 = !DILocation(line: 2991, column: 81, scope: !3749)
!3751 = !DILocation(line: 2991, column: 61, scope: !3749)
!3752 = !DILocation(line: 2991, column: 91, scope: !3749)
!3753 = !DILocation(line: 2991, column: 61, scope: !1901)
!3754 = !DILocation(line: 2991, column: 61, scope: !3755)
!3755 = !DILexicalBlockFile(scope: !1901, file: !458, discriminator: 2)
!3756 = !DILocation(line: 2991, column: 122, scope: !3757)
!3757 = !DILexicalBlockFile(scope: !3749, file: !458, discriminator: 3)
!3758 = !DILocation(line: 2991, column: 140, scope: !3749)
!3759 = !DILocation(line: 2991, column: 150, scope: !3749)
!3760 = !DILocation(line: 2991, column: 175, scope: !3749)
!3761 = !DILocation(line: 2991, column: 106, scope: !3749)
!3762 = !DILocation(line: 2991, column: 194, scope: !3763)
!3763 = !DILexicalBlockFile(scope: !1893, file: !458, discriminator: 4)
!3764 = !DILocation(line: 2991, column: 194, scope: !1901)
!3765 = !DILocation(line: 2991, column: 194, scope: !3766)
!3766 = !DILexicalBlockFile(scope: !1901, file: !458, discriminator: 5)
!3767 = !DILocation(line: 2992, column: 5, scope: !1893)
!3768 = !DILocation(line: 2992, column: 9, scope: !1893)
!3769 = !DILocation(line: 2992, column: 16, scope: !1893)
!3770 = !DILocation(line: 2993, column: 5, scope: !1893)
!3771 = !DILocation(line: 2994, column: 1, scope: !1893)
!3772 = !DILocation(line: 288, column: 37, scope: !550)
!3773 = !DILocation(line: 290, column: 29, scope: !550)
!3774 = !DILocation(line: 290, column: 14, scope: !550)
!3775 = !DILocation(line: 290, column: 37, scope: !550)
!3776 = !DILocation(line: 290, column: 5, scope: !550)
!3777 = !DILocation(line: 327, column: 37, scope: !555)
!3778 = !DILocation(line: 327, column: 54, scope: !555)
!3779 = !DILocation(line: 329, column: 5, scope: !555)
!3780 = !DILocation(line: 329, column: 24, scope: !555)
!3781 = !DILocation(line: 330, column: 5, scope: !555)
!3782 = !DILocation(line: 330, column: 16, scope: !555)
!3783 = !DILocation(line: 331, column: 5, scope: !555)
!3784 = !DILocation(line: 331, column: 16, scope: !555)
!3785 = !DILocation(line: 333, column: 9, scope: !3786)
!3786 = distinct !DILexicalBlock(scope: !555, file: !458, line: 333, column: 9)
!3787 = !DILocation(line: 333, column: 15, scope: !3786)
!3788 = !DILocation(line: 333, column: 9, scope: !555)
!3789 = !DILocation(line: 334, column: 15, scope: !3786)
!3790 = !DILocation(line: 334, column: 9, scope: !3786)
!3791 = !DILocation(line: 335, column: 31, scope: !555)
!3792 = !DILocation(line: 335, column: 16, scope: !555)
!3793 = !DILocation(line: 335, column: 39, scope: !555)
!3794 = !DILocation(line: 335, column: 12, scope: !555)
!3795 = !DILocation(line: 336, column: 9, scope: !3796)
!3796 = distinct !DILexicalBlock(scope: !555, file: !458, line: 336, column: 9)
!3797 = !DILocation(line: 336, column: 15, scope: !3796)
!3798 = !DILocation(line: 336, column: 19, scope: !3796)
!3799 = !DILocation(line: 336, column: 22, scope: !3800)
!3800 = !DILexicalBlockFile(scope: !3796, file: !458, discriminator: 1)
!3801 = !DILocation(line: 336, column: 65, scope: !3796)
!3802 = !DILocation(line: 336, column: 63, scope: !3796)
!3803 = !DILocation(line: 336, column: 29, scope: !3796)
!3804 = !DILocation(line: 336, column: 9, scope: !555)
!3805 = !DILocation(line: 337, column: 16, scope: !3796)
!3806 = !DILocation(line: 337, column: 9, scope: !3796)
!3807 = !DILocation(line: 338, column: 12, scope: !555)
!3808 = !DILocation(line: 338, column: 21, scope: !555)
!3809 = !DILocation(line: 338, column: 19, scope: !555)
!3810 = !DILocation(line: 338, column: 10, scope: !555)
!3811 = !DILocation(line: 339, column: 77, scope: !555)
!3812 = !DILocation(line: 339, column: 35, scope: !555)
!3813 = !DILocation(line: 339, column: 14, scope: !555)
!3814 = !DILocation(line: 339, column: 12, scope: !555)
!3815 = !DILocation(line: 340, column: 9, scope: !568)
!3816 = !DILocation(line: 340, column: 16, scope: !568)
!3817 = !DILocation(line: 340, column: 30, scope: !568)
!3818 = !DILocation(line: 340, column: 33, scope: !3819)
!3819 = !DILexicalBlockFile(scope: !568, file: !458, discriminator: 1)
!3820 = !DILocation(line: 340, column: 38, scope: !568)
!3821 = !DILocation(line: 340, column: 9, scope: !555)
!3822 = !DILocation(line: 341, column: 13, scope: !566)
!3823 = !DILocation(line: 341, column: 20, scope: !566)
!3824 = !DILocation(line: 341, column: 13, scope: !567)
!3825 = !DILocation(line: 342, column: 20, scope: !566)
!3826 = !DILocation(line: 342, column: 28, scope: !566)
!3827 = !DILocation(line: 342, column: 38, scope: !566)
!3828 = !DILocation(line: 342, column: 44, scope: !566)
!3829 = !DILocation(line: 342, column: 13, scope: !566)
!3830 = !DILocation(line: 342, column: 57, scope: !566)
!3831 = !DILocation(line: 344, column: 13, scope: !565)
!3832 = !DILocation(line: 344, column: 24, scope: !565)
!3833 = !DILocation(line: 345, column: 20, scope: !3834)
!3834 = distinct !DILexicalBlock(scope: !565, file: !458, line: 345, column: 13)
!3835 = !DILocation(line: 345, column: 18, scope: !3834)
!3836 = !DILocation(line: 345, column: 25, scope: !3837)
!3837 = !DILexicalBlockFile(scope: !3838, file: !458, discriminator: 2)
!3838 = !DILexicalBlockFile(scope: !3839, file: !458, discriminator: 1)
!3839 = distinct !DILexicalBlock(scope: !3834, file: !458, line: 345, column: 13)
!3840 = !DILocation(line: 345, column: 29, scope: !3839)
!3841 = !DILocation(line: 345, column: 27, scope: !3839)
!3842 = !DILocation(line: 345, column: 13, scope: !3834)
!3843 = !DILocation(line: 346, column: 24, scope: !3839)
!3844 = !DILocation(line: 346, column: 32, scope: !3839)
!3845 = !DILocation(line: 346, column: 43, scope: !3839)
!3846 = !DILocation(line: 346, column: 45, scope: !3839)
!3847 = !DILocation(line: 346, column: 44, scope: !3839)
!3848 = !DILocation(line: 346, column: 41, scope: !3839)
!3849 = !DILocation(line: 346, column: 53, scope: !3839)
!3850 = !DILocation(line: 346, column: 59, scope: !3839)
!3851 = !DILocation(line: 346, column: 69, scope: !3839)
!3852 = !DILocation(line: 346, column: 17, scope: !3839)
!3853 = !DILocation(line: 345, column: 37, scope: !3839)
!3854 = !DILocation(line: 345, column: 13, scope: !3839)
!3855 = !DILocation(line: 347, column: 9, scope: !566)
!3856 = !DILocation(line: 348, column: 5, scope: !567)
!3857 = !DILocation(line: 349, column: 24, scope: !555)
!3858 = !DILocation(line: 349, column: 12, scope: !555)
!3859 = !DILocation(line: 349, column: 5, scope: !555)
!3860 = !DILocation(line: 350, column: 1, scope: !555)
!3861 = !DILocation(line: 382, column: 38, scope: !569)
!3862 = !DILocation(line: 382, column: 55, scope: !569)
!3863 = !DILocation(line: 384, column: 9, scope: !3864)
!3864 = distinct !DILexicalBlock(scope: !569, file: !458, line: 384, column: 9)
!3865 = !DILocation(line: 384, column: 11, scope: !3864)
!3866 = !DILocation(line: 384, column: 9, scope: !569)
!3867 = !DILocation(line: 385, column: 31, scope: !3864)
!3868 = !DILocation(line: 385, column: 16, scope: !3864)
!3869 = !DILocation(line: 385, column: 39, scope: !3864)
!3870 = !DILocation(line: 385, column: 11, scope: !3864)
!3871 = !DILocation(line: 385, column: 9, scope: !3864)
!3872 = !DILocation(line: 386, column: 9, scope: !3873)
!3873 = distinct !DILexicalBlock(scope: !569, file: !458, line: 386, column: 9)
!3874 = !DILocation(line: 386, column: 11, scope: !3873)
!3875 = !DILocation(line: 386, column: 15, scope: !3873)
!3876 = !DILocation(line: 386, column: 18, scope: !3877)
!3877 = !DILexicalBlockFile(scope: !3873, file: !458, discriminator: 1)
!3878 = !DILocation(line: 386, column: 40, scope: !3873)
!3879 = !DILocation(line: 386, column: 25, scope: !3873)
!3880 = !DILocation(line: 386, column: 48, scope: !3873)
!3881 = !DILocation(line: 386, column: 20, scope: !3873)
!3882 = !DILocation(line: 386, column: 9, scope: !569)
!3883 = !DILocation(line: 387, column: 25, scope: !3884)
!3884 = distinct !DILexicalBlock(scope: !3873, file: !458, line: 386, column: 58)
!3885 = !DILocation(line: 387, column: 9, scope: !3884)
!3886 = !DILocation(line: 388, column: 9, scope: !3884)
!3887 = !DILocation(line: 390, column: 164, scope: !569)
!3888 = !DILocation(line: 390, column: 76, scope: !569)
!3889 = !DILocation(line: 390, column: 61, scope: !569)
!3890 = !DILocation(line: 390, column: 84, scope: !569)
!3891 = !DILocation(line: 390, column: 59, scope: !569)
!3892 = !DILocation(line: 390, column: 118, scope: !3893)
!3893 = !DILexicalBlockFile(scope: !569, file: !458, discriminator: 1)
!3894 = !DILocation(line: 390, column: 126, scope: !569)
!3895 = !DILocation(line: 390, column: 59, scope: !3896)
!3896 = !DILexicalBlockFile(scope: !569, file: !458, discriminator: 2)
!3897 = !DILocation(line: 390, column: 44, scope: !3898)
!3898 = !DILexicalBlockFile(scope: !3899, file: !458, discriminator: 4)
!3899 = !DILexicalBlockFile(scope: !569, file: !458, discriminator: 3)
!3900 = !DILocation(line: 390, column: 28, scope: !569)
!3901 = !DILocation(line: 390, column: 12, scope: !569)
!3902 = !DILocation(line: 390, column: 5, scope: !569)
!3903 = !DILocation(line: 391, column: 1, scope: !569)
!3904 = !DILocation(line: 582, column: 38, scope: !573)
!3905 = !DILocation(line: 582, column: 55, scope: !573)
!3906 = !DILocation(line: 582, column: 68, scope: !573)
!3907 = !DILocation(line: 584, column: 5, scope: !573)
!3908 = !DILocation(line: 584, column: 9, scope: !573)
!3909 = !DILocation(line: 586, column: 9, scope: !3910)
!3910 = distinct !DILexicalBlock(scope: !573, file: !458, line: 586, column: 9)
!3911 = !DILocation(line: 586, column: 11, scope: !3910)
!3912 = !DILocation(line: 586, column: 9, scope: !573)
!3913 = !DILocation(line: 587, column: 31, scope: !3910)
!3914 = !DILocation(line: 587, column: 16, scope: !3910)
!3915 = !DILocation(line: 587, column: 39, scope: !3910)
!3916 = !DILocation(line: 587, column: 11, scope: !3910)
!3917 = !DILocation(line: 587, column: 9, scope: !3910)
!3918 = !DILocation(line: 589, column: 9, scope: !3919)
!3919 = distinct !DILexicalBlock(scope: !573, file: !458, line: 589, column: 9)
!3920 = !DILocation(line: 589, column: 11, scope: !3919)
!3921 = !DILocation(line: 589, column: 15, scope: !3919)
!3922 = !DILocation(line: 589, column: 18, scope: !3923)
!3923 = !DILexicalBlockFile(scope: !3919, file: !458, discriminator: 1)
!3924 = !DILocation(line: 589, column: 40, scope: !3919)
!3925 = !DILocation(line: 589, column: 25, scope: !3919)
!3926 = !DILocation(line: 589, column: 48, scope: !3919)
!3927 = !DILocation(line: 589, column: 20, scope: !3919)
!3928 = !DILocation(line: 589, column: 9, scope: !573)
!3929 = !DILocation(line: 590, column: 25, scope: !3930)
!3930 = distinct !DILexicalBlock(scope: !3919, file: !458, line: 589, column: 58)
!3931 = !DILocation(line: 590, column: 9, scope: !3930)
!3932 = !DILocation(line: 591, column: 9, scope: !3930)
!3933 = !DILocation(line: 594, column: 9, scope: !3934)
!3934 = distinct !DILexicalBlock(scope: !573, file: !458, line: 594, column: 9)
!3935 = !DILocation(line: 594, column: 15, scope: !3934)
!3936 = !DILocation(line: 594, column: 9, scope: !573)
!3937 = !DILocation(line: 595, column: 35, scope: !3934)
!3938 = !DILocation(line: 595, column: 41, scope: !3934)
!3939 = !DILocation(line: 595, column: 44, scope: !3934)
!3940 = !DILocation(line: 595, column: 45, scope: !3934)
!3941 = !DILocation(line: 595, column: 16, scope: !3934)
!3942 = !DILocation(line: 595, column: 9, scope: !3934)
!3943 = !DILocation(line: 597, column: 24, scope: !3944)
!3944 = distinct !DILexicalBlock(scope: !573, file: !458, line: 597, column: 9)
!3945 = !DILocation(line: 597, column: 10, scope: !3944)
!3946 = !DILocation(line: 597, column: 9, scope: !573)
!3947 = !DILocation(line: 598, column: 9, scope: !3944)
!3948 = !DILocation(line: 600, column: 130, scope: !573)
!3949 = !DILocation(line: 600, column: 125, scope: !573)
!3950 = !DILocation(line: 600, column: 37, scope: !573)
!3951 = !DILocation(line: 600, column: 22, scope: !573)
!3952 = !DILocation(line: 600, column: 45, scope: !573)
!3953 = !DILocation(line: 600, column: 20, scope: !573)
!3954 = !DILocation(line: 600, column: 79, scope: !3955)
!3955 = !DILexicalBlockFile(scope: !573, file: !458, discriminator: 1)
!3956 = !DILocation(line: 600, column: 87, scope: !573)
!3957 = !DILocation(line: 600, column: 20, scope: !3958)
!3958 = !DILexicalBlockFile(scope: !573, file: !458, discriminator: 2)
!3959 = !DILocation(line: 600, column: 5, scope: !3960)
!3960 = !DILexicalBlockFile(scope: !3961, file: !458, discriminator: 4)
!3961 = !DILexicalBlockFile(scope: !573, file: !458, discriminator: 3)
!3962 = !DILocation(line: 600, column: 128, scope: !573)
!3963 = !DILocation(line: 601, column: 5, scope: !573)
!3964 = !DILocation(line: 602, column: 1, scope: !573)
!3965 = !DILocation(line: 1307, column: 30, scope: !624)
!3966 = !DILocation(line: 1307, column: 46, scope: !624)
!3967 = !DILocation(line: 1309, column: 5, scope: !624)
!3968 = !DILocation(line: 1309, column: 16, scope: !624)
!3969 = !DILocation(line: 1309, column: 42, scope: !624)
!3970 = !DILocation(line: 1309, column: 47, scope: !624)
!3971 = !DILocation(line: 1309, column: 23, scope: !624)
!3972 = !DILocation(line: 1310, column: 9, scope: !631)
!3973 = !DILocation(line: 1310, column: 14, scope: !631)
!3974 = !DILocation(line: 1310, column: 20, scope: !631)
!3975 = !DILocation(line: 1310, column: 23, scope: !3976)
!3976 = !DILexicalBlockFile(scope: !631, file: !458, discriminator: 1)
!3977 = !DILocation(line: 1310, column: 9, scope: !624)
!3978 = !DILocation(line: 1311, column: 9, scope: !630)
!3979 = !DILocation(line: 1311, column: 19, scope: !630)
!3980 = !DILocation(line: 1312, column: 9, scope: !630)
!3981 = !DILocation(line: 1312, column: 20, scope: !630)
!3982 = !DILocation(line: 1313, column: 9, scope: !630)
!3983 = !DILocation(line: 1314, column: 24, scope: !3984)
!3984 = distinct !DILexicalBlock(scope: !630, file: !458, line: 1314, column: 13)
!3985 = !DILocation(line: 1314, column: 13, scope: !3984)
!3986 = !DILocation(line: 1314, column: 36, scope: !3984)
!3987 = !DILocation(line: 1314, column: 13, scope: !630)
!3988 = !DILocation(line: 1315, column: 13, scope: !3984)
!3989 = !DILocation(line: 1316, column: 62, scope: !630)
!3990 = !DILocation(line: 1316, column: 47, scope: !630)
!3991 = !DILocation(line: 1316, column: 70, scope: !630)
!3992 = !DILocation(line: 1316, column: 45, scope: !630)
!3993 = !DILocation(line: 1316, column: 104, scope: !3994)
!3994 = !DILexicalBlockFile(scope: !630, file: !458, discriminator: 1)
!3995 = !DILocation(line: 1316, column: 82, scope: !630)
!3996 = !DILocation(line: 1316, column: 112, scope: !630)
!3997 = !DILocation(line: 1316, column: 45, scope: !3998)
!3998 = !DILexicalBlockFile(scope: !630, file: !458, discriminator: 2)
!3999 = !DILocation(line: 1316, column: 168, scope: !4000)
!4000 = !DILexicalBlockFile(scope: !4001, file: !458, discriminator: 4)
!4001 = !DILexicalBlockFile(scope: !630, file: !458, discriminator: 3)
!4002 = !DILocation(line: 1316, column: 153, scope: !630)
!4003 = !DILocation(line: 1316, column: 176, scope: !630)
!4004 = !DILocation(line: 1317, column: 35, scope: !630)
!4005 = !DILocation(line: 1317, column: 45, scope: !630)
!4006 = !DILocation(line: 1316, column: 15, scope: !630)
!4007 = !DILocation(line: 1316, column: 13, scope: !630)
!4008 = !DILocation(line: 1318, column: 9, scope: !630)
!4009 = !DILocation(line: 1319, column: 16, scope: !630)
!4010 = !DILocation(line: 1319, column: 20, scope: !630)
!4011 = !DILocation(line: 1319, column: 9, scope: !630)
!4012 = !DILocation(line: 1320, column: 5, scope: !631)
!4013 = !DILocation(line: 1321, column: 9, scope: !4014)
!4014 = distinct !DILexicalBlock(scope: !624, file: !458, line: 1321, column: 9)
!4015 = !DILocation(line: 1321, column: 14, scope: !4014)
!4016 = !DILocation(line: 1321, column: 18, scope: !4014)
!4017 = !DILocation(line: 1321, column: 21, scope: !4018)
!4018 = !DILexicalBlockFile(scope: !4014, file: !458, discriminator: 1)
!4019 = !DILocation(line: 1321, column: 26, scope: !4014)
!4020 = !DILocation(line: 1321, column: 9, scope: !624)
!4021 = !DILocation(line: 1322, column: 25, scope: !4022)
!4022 = distinct !DILexicalBlock(scope: !4014, file: !458, line: 1321, column: 34)
!4023 = !DILocation(line: 1322, column: 9, scope: !4022)
!4024 = !DILocation(line: 1323, column: 9, scope: !4022)
!4025 = !DILocation(line: 1326, column: 51, scope: !624)
!4026 = !DILocation(line: 1326, column: 36, scope: !624)
!4027 = !DILocation(line: 1326, column: 59, scope: !624)
!4028 = !DILocation(line: 1326, column: 34, scope: !624)
!4029 = !DILocation(line: 1326, column: 93, scope: !4030)
!4030 = !DILexicalBlockFile(scope: !624, file: !458, discriminator: 1)
!4031 = !DILocation(line: 1326, column: 71, scope: !624)
!4032 = !DILocation(line: 1326, column: 101, scope: !624)
!4033 = !DILocation(line: 1326, column: 34, scope: !4034)
!4034 = !DILexicalBlockFile(scope: !624, file: !458, discriminator: 2)
!4035 = !DILocation(line: 1326, column: 146, scope: !4036)
!4036 = !DILexicalBlockFile(scope: !4037, file: !458, discriminator: 4)
!4037 = !DILexicalBlockFile(scope: !624, file: !458, discriminator: 3)
!4038 = !DILocation(line: 1326, column: 140, scope: !624)
!4039 = !DILocation(line: 1326, column: 169, scope: !624)
!4040 = !DILocation(line: 1326, column: 154, scope: !624)
!4041 = !DILocation(line: 1326, column: 177, scope: !624)
!4042 = !DILocation(line: 1326, column: 12, scope: !624)
!4043 = !DILocation(line: 1326, column: 187, scope: !624)
!4044 = !DILocation(line: 1326, column: 5, scope: !624)
!4045 = !DILocation(line: 1327, column: 1, scope: !624)
!4046 = !DILocation(line: 294, column: 38, scope: !692)
!4047 = !DILocation(line: 294, column: 54, scope: !692)
!4048 = !DILocation(line: 296, column: 5, scope: !692)
!4049 = !DILocation(line: 296, column: 16, scope: !692)
!4050 = !DILocation(line: 297, column: 5, scope: !692)
!4051 = !DILocation(line: 297, column: 16, scope: !692)
!4052 = !DILocation(line: 298, column: 5, scope: !692)
!4053 = !DILocation(line: 298, column: 15, scope: !692)
!4054 = !DILocation(line: 300, column: 20, scope: !4055)
!4055 = distinct !DILexicalBlock(scope: !692, file: !458, line: 300, column: 9)
!4056 = !DILocation(line: 300, column: 9, scope: !4055)
!4057 = !DILocation(line: 300, column: 32, scope: !4055)
!4058 = !DILocation(line: 300, column: 9, scope: !692)
!4059 = !DILocation(line: 301, column: 22, scope: !4060)
!4060 = distinct !DILexicalBlock(scope: !4055, file: !458, line: 300, column: 37)
!4061 = !DILocation(line: 302, column: 36, scope: !4060)
!4062 = !DILocation(line: 302, column: 45, scope: !4060)
!4063 = !DILocation(line: 302, column: 55, scope: !4060)
!4064 = !DILocation(line: 302, column: 78, scope: !4060)
!4065 = !DILocation(line: 302, column: 66, scope: !4060)
!4066 = !DILocation(line: 302, column: 86, scope: !4060)
!4067 = !DILocation(line: 302, column: 96, scope: !4060)
!4068 = !DILocation(line: 301, column: 9, scope: !4060)
!4069 = !DILocation(line: 303, column: 9, scope: !4060)
!4070 = !DILocation(line: 306, column: 31, scope: !692)
!4071 = !DILocation(line: 306, column: 16, scope: !692)
!4072 = !DILocation(line: 306, column: 39, scope: !692)
!4073 = !DILocation(line: 306, column: 12, scope: !692)
!4074 = !DILocation(line: 307, column: 12, scope: !692)
!4075 = !DILocation(line: 307, column: 24, scope: !692)
!4076 = !DILocation(line: 307, column: 19, scope: !692)
!4077 = !DILocation(line: 307, column: 10, scope: !692)
!4078 = !DILocation(line: 308, column: 9, scope: !4079)
!4079 = distinct !DILexicalBlock(scope: !692, file: !458, line: 308, column: 9)
!4080 = !DILocation(line: 308, column: 14, scope: !4079)
!4081 = !DILocation(line: 308, column: 9, scope: !692)
!4082 = !DILocation(line: 309, column: 9, scope: !4083)
!4083 = distinct !DILexicalBlock(scope: !4079, file: !458, line: 308, column: 19)
!4084 = !DILocation(line: 310, column: 16, scope: !4083)
!4085 = !DILocation(line: 310, column: 9, scope: !4083)
!4086 = !DILocation(line: 312, column: 9, scope: !4087)
!4087 = distinct !DILexicalBlock(scope: !692, file: !458, line: 312, column: 9)
!4088 = !DILocation(line: 312, column: 16, scope: !4087)
!4089 = !DILocation(line: 312, column: 22, scope: !4087)
!4090 = !DILocation(line: 312, column: 14, scope: !4087)
!4091 = !DILocation(line: 312, column: 9, scope: !692)
!4092 = !DILocation(line: 313, column: 45, scope: !4093)
!4093 = distinct !DILexicalBlock(scope: !4087, file: !458, line: 312, column: 32)
!4094 = !DILocation(line: 313, column: 26, scope: !4093)
!4095 = !DILocation(line: 313, column: 11, scope: !4093)
!4096 = !DILocation(line: 313, column: 34, scope: !4093)
!4097 = !DILocation(line: 313, column: 43, scope: !4093)
!4098 = !DILocation(line: 314, column: 146, scope: !4093)
!4099 = !DILocation(line: 314, column: 131, scope: !4093)
!4100 = !DILocation(line: 314, column: 154, scope: !4093)
!4101 = !DILocation(line: 314, column: 41, scope: !4093)
!4102 = !DILocation(line: 314, column: 26, scope: !4093)
!4103 = !DILocation(line: 314, column: 49, scope: !4093)
!4104 = !DILocation(line: 314, column: 24, scope: !4093)
!4105 = !DILocation(line: 314, column: 83, scope: !4106)
!4106 = !DILexicalBlockFile(scope: !4093, file: !458, discriminator: 1)
!4107 = !DILocation(line: 314, column: 91, scope: !4093)
!4108 = !DILocation(line: 314, column: 24, scope: !4109)
!4109 = !DILexicalBlockFile(scope: !4093, file: !458, discriminator: 2)
!4110 = !DILocation(line: 314, column: 9, scope: !4111)
!4111 = !DILexicalBlockFile(scope: !4112, file: !458, discriminator: 4)
!4112 = !DILexicalBlockFile(scope: !4093, file: !458, discriminator: 3)
!4113 = !DILocation(line: 314, column: 164, scope: !4093)
!4114 = !DILocation(line: 315, column: 5, scope: !4093)
!4115 = !DILocation(line: 316, column: 45, scope: !4116)
!4116 = distinct !DILexicalBlock(scope: !4087, file: !458, line: 316, column: 14)
!4117 = !DILocation(line: 316, column: 33, scope: !4116)
!4118 = !DILocation(line: 316, column: 51, scope: !4116)
!4119 = !DILocation(line: 316, column: 14, scope: !4116)
!4120 = !DILocation(line: 316, column: 57, scope: !4116)
!4121 = !DILocation(line: 316, column: 14, scope: !4087)
!4122 = !DILocation(line: 317, column: 9, scope: !4123)
!4123 = distinct !DILexicalBlock(scope: !4116, file: !458, line: 316, column: 62)
!4124 = !DILocation(line: 318, column: 9, scope: !4123)
!4125 = !DILocation(line: 320, column: 44, scope: !692)
!4126 = !DILocation(line: 320, column: 29, scope: !692)
!4127 = !DILocation(line: 320, column: 52, scope: !692)
!4128 = !DILocation(line: 320, column: 27, scope: !692)
!4129 = !DILocation(line: 320, column: 86, scope: !4130)
!4130 = !DILexicalBlockFile(scope: !692, file: !458, discriminator: 1)
!4131 = !DILocation(line: 320, column: 94, scope: !692)
!4132 = !DILocation(line: 320, column: 27, scope: !4133)
!4133 = !DILexicalBlockFile(scope: !692, file: !458, discriminator: 2)
!4134 = !DILocation(line: 320, column: 134, scope: !4135)
!4135 = !DILexicalBlockFile(scope: !4136, file: !458, discriminator: 4)
!4136 = !DILexicalBlockFile(scope: !692, file: !458, discriminator: 3)
!4137 = !DILocation(line: 320, column: 132, scope: !692)
!4138 = !DILocation(line: 320, column: 145, scope: !692)
!4139 = !DILocation(line: 320, column: 153, scope: !692)
!4140 = !DILocation(line: 320, column: 5, scope: !692)
!4141 = !DILocation(line: 321, column: 5, scope: !692)
!4142 = !DILocation(line: 322, column: 21, scope: !692)
!4143 = !DILocation(line: 322, column: 8, scope: !692)
!4144 = !DILocation(line: 322, column: 29, scope: !692)
!4145 = !DILocation(line: 322, column: 38, scope: !692)
!4146 = !DILocation(line: 323, column: 24, scope: !692)
!4147 = !DILocation(line: 323, column: 12, scope: !692)
!4148 = !DILocation(line: 323, column: 5, scope: !692)
!4149 = !DILocation(line: 324, column: 1, scope: !692)
!4150 = !DILocation(line: 353, column: 38, scope: !701)
!4151 = !DILocation(line: 353, column: 55, scope: !701)
!4152 = !DILocation(line: 355, column: 5, scope: !701)
!4153 = !DILocation(line: 355, column: 16, scope: !701)
!4154 = !DILocation(line: 356, column: 5, scope: !701)
!4155 = !DILocation(line: 356, column: 16, scope: !701)
!4156 = !DILocation(line: 357, column: 5, scope: !701)
!4157 = !DILocation(line: 357, column: 11, scope: !701)
!4158 = !DILocation(line: 359, column: 9, scope: !4159)
!4159 = distinct !DILexicalBlock(scope: !701, file: !458, line: 359, column: 9)
!4160 = !DILocation(line: 359, column: 15, scope: !4159)
!4161 = !DILocation(line: 359, column: 9, scope: !701)
!4162 = !DILocation(line: 360, column: 15, scope: !4159)
!4163 = !DILocation(line: 360, column: 9, scope: !4159)
!4164 = !DILocation(line: 361, column: 31, scope: !701)
!4165 = !DILocation(line: 361, column: 16, scope: !701)
!4166 = !DILocation(line: 361, column: 39, scope: !701)
!4167 = !DILocation(line: 361, column: 12, scope: !701)
!4168 = !DILocation(line: 362, column: 9, scope: !4169)
!4169 = distinct !DILexicalBlock(scope: !701, file: !458, line: 362, column: 9)
!4170 = !DILocation(line: 362, column: 15, scope: !4169)
!4171 = !DILocation(line: 362, column: 19, scope: !4169)
!4172 = !DILocation(line: 362, column: 22, scope: !4173)
!4173 = !DILexicalBlockFile(scope: !4169, file: !458, discriminator: 1)
!4174 = !DILocation(line: 362, column: 65, scope: !4169)
!4175 = !DILocation(line: 362, column: 63, scope: !4169)
!4176 = !DILocation(line: 362, column: 29, scope: !4169)
!4177 = !DILocation(line: 362, column: 9, scope: !701)
!4178 = !DILocation(line: 363, column: 16, scope: !4169)
!4179 = !DILocation(line: 363, column: 9, scope: !4169)
!4180 = !DILocation(line: 364, column: 12, scope: !701)
!4181 = !DILocation(line: 364, column: 21, scope: !701)
!4182 = !DILocation(line: 364, column: 19, scope: !701)
!4183 = !DILocation(line: 364, column: 10, scope: !701)
!4184 = !DILocation(line: 365, column: 40, scope: !4185)
!4185 = distinct !DILexicalBlock(scope: !701, file: !458, line: 365, column: 9)
!4186 = !DILocation(line: 365, column: 28, scope: !4185)
!4187 = !DILocation(line: 365, column: 46, scope: !4185)
!4188 = !DILocation(line: 365, column: 9, scope: !4185)
!4189 = !DILocation(line: 365, column: 52, scope: !4185)
!4190 = !DILocation(line: 365, column: 9, scope: !701)
!4191 = !DILocation(line: 366, column: 9, scope: !4185)
!4192 = !DILocation(line: 368, column: 43, scope: !701)
!4193 = !DILocation(line: 368, column: 28, scope: !701)
!4194 = !DILocation(line: 368, column: 51, scope: !701)
!4195 = !DILocation(line: 368, column: 26, scope: !701)
!4196 = !DILocation(line: 368, column: 85, scope: !4197)
!4197 = !DILexicalBlockFile(scope: !701, file: !458, discriminator: 1)
!4198 = !DILocation(line: 368, column: 93, scope: !701)
!4199 = !DILocation(line: 368, column: 26, scope: !4200)
!4200 = !DILexicalBlockFile(scope: !701, file: !458, discriminator: 2)
!4201 = !DILocation(line: 368, column: 9, scope: !4202)
!4202 = !DILexicalBlockFile(scope: !4203, file: !458, discriminator: 4)
!4203 = !DILexicalBlockFile(scope: !701, file: !458, discriminator: 3)
!4204 = !DILocation(line: 369, column: 9, scope: !710)
!4205 = !DILocation(line: 369, column: 16, scope: !710)
!4206 = !DILocation(line: 369, column: 9, scope: !701)
!4207 = !DILocation(line: 370, column: 16, scope: !710)
!4208 = !DILocation(line: 370, column: 21, scope: !710)
!4209 = !DILocation(line: 370, column: 9, scope: !710)
!4210 = !DILocation(line: 370, column: 29, scope: !710)
!4211 = !DILocation(line: 372, column: 9, scope: !709)
!4212 = !DILocation(line: 372, column: 20, scope: !709)
!4213 = !DILocation(line: 373, column: 16, scope: !4214)
!4214 = distinct !DILexicalBlock(scope: !709, file: !458, line: 373, column: 9)
!4215 = !DILocation(line: 373, column: 14, scope: !4214)
!4216 = !DILocation(line: 373, column: 21, scope: !4217)
!4217 = !DILexicalBlockFile(scope: !4218, file: !458, discriminator: 2)
!4218 = !DILexicalBlockFile(scope: !4219, file: !458, discriminator: 1)
!4219 = distinct !DILexicalBlock(scope: !4214, file: !458, line: 373, column: 9)
!4220 = !DILocation(line: 373, column: 25, scope: !4219)
!4221 = !DILocation(line: 373, column: 23, scope: !4219)
!4222 = !DILocation(line: 373, column: 9, scope: !4214)
!4223 = !DILocation(line: 374, column: 20, scope: !4219)
!4224 = !DILocation(line: 374, column: 26, scope: !4219)
!4225 = !DILocation(line: 374, column: 28, scope: !4219)
!4226 = !DILocation(line: 374, column: 27, scope: !4219)
!4227 = !DILocation(line: 374, column: 24, scope: !4219)
!4228 = !DILocation(line: 374, column: 36, scope: !4219)
!4229 = !DILocation(line: 374, column: 41, scope: !4219)
!4230 = !DILocation(line: 374, column: 13, scope: !4219)
!4231 = !DILocation(line: 373, column: 33, scope: !4219)
!4232 = !DILocation(line: 373, column: 9, scope: !4219)
!4233 = !DILocation(line: 375, column: 5, scope: !710)
!4234 = !DILocation(line: 377, column: 21, scope: !701)
!4235 = !DILocation(line: 377, column: 8, scope: !701)
!4236 = !DILocation(line: 377, column: 29, scope: !701)
!4237 = !DILocation(line: 377, column: 38, scope: !701)
!4238 = !DILocation(line: 378, column: 24, scope: !701)
!4239 = !DILocation(line: 378, column: 12, scope: !701)
!4240 = !DILocation(line: 378, column: 5, scope: !701)
!4241 = !DILocation(line: 379, column: 1, scope: !701)
!4242 = !DILocation(line: 533, column: 39, scope: !581)
!4243 = !DILocation(line: 533, column: 56, scope: !581)
!4244 = !DILocation(line: 533, column: 71, scope: !581)
!4245 = !DILocation(line: 534, column: 26, scope: !581)
!4246 = !DILocation(line: 536, column: 5, scope: !581)
!4247 = !DILocation(line: 536, column: 16, scope: !581)
!4248 = !DILocation(line: 537, column: 5, scope: !581)
!4249 = !DILocation(line: 537, column: 11, scope: !581)
!4250 = !DILocation(line: 538, column: 5, scope: !581)
!4251 = !DILocation(line: 538, column: 15, scope: !581)
!4252 = !DILocation(line: 539, column: 5, scope: !581)
!4253 = !DILocation(line: 539, column: 9, scope: !581)
!4254 = !DILocation(line: 541, column: 12, scope: !581)
!4255 = !DILocation(line: 541, column: 16, scope: !581)
!4256 = !DILocation(line: 542, column: 9, scope: !595)
!4257 = !DILocation(line: 542, column: 31, scope: !595)
!4258 = !DILocation(line: 542, column: 19, scope: !595)
!4259 = !DILocation(line: 542, column: 16, scope: !595)
!4260 = !DILocation(line: 542, column: 9, scope: !581)
!4261 = !DILocation(line: 544, column: 9, scope: !594)
!4262 = !DILocation(line: 544, column: 13, scope: !594)
!4263 = !DILocation(line: 545, column: 41, scope: !594)
!4264 = !DILocation(line: 545, column: 18, scope: !594)
!4265 = !DILocation(line: 545, column: 16, scope: !594)
!4266 = !DILocation(line: 546, column: 13, scope: !4267)
!4267 = distinct !DILexicalBlock(scope: !594, file: !458, line: 546, column: 13)
!4268 = !DILocation(line: 546, column: 20, scope: !4267)
!4269 = !DILocation(line: 546, column: 13, scope: !594)
!4270 = !DILocation(line: 547, column: 13, scope: !4267)
!4271 = !DILocation(line: 548, column: 34, scope: !594)
!4272 = !DILocation(line: 548, column: 40, scope: !594)
!4273 = !DILocation(line: 548, column: 44, scope: !594)
!4274 = !DILocation(line: 548, column: 48, scope: !594)
!4275 = !DILocation(line: 548, column: 15, scope: !594)
!4276 = !DILocation(line: 548, column: 13, scope: !594)
!4277 = !DILocation(line: 549, column: 9, scope: !594)
!4278 = !DILocation(line: 549, column: 14, scope: !4279)
!4279 = !DILexicalBlockFile(scope: !597, file: !458, discriminator: 1)
!4280 = !DILocation(line: 549, column: 24, scope: !597)
!4281 = !DILocation(line: 549, column: 54, scope: !597)
!4282 = !DILocation(line: 549, column: 71, scope: !4283)
!4283 = distinct !DILexicalBlock(scope: !597, file: !458, line: 549, column: 68)
!4284 = !DILocation(line: 549, column: 88, scope: !4283)
!4285 = !DILocation(line: 549, column: 68, scope: !4283)
!4286 = !DILocation(line: 549, column: 98, scope: !4283)
!4287 = !DILocation(line: 549, column: 68, scope: !597)
!4288 = !DILocation(line: 549, column: 68, scope: !4289)
!4289 = !DILexicalBlockFile(scope: !597, file: !458, discriminator: 2)
!4290 = !DILocation(line: 549, column: 129, scope: !4291)
!4291 = !DILexicalBlockFile(scope: !4283, file: !458, discriminator: 3)
!4292 = !DILocation(line: 549, column: 147, scope: !4283)
!4293 = !DILocation(line: 549, column: 157, scope: !4283)
!4294 = !DILocation(line: 549, column: 182, scope: !4283)
!4295 = !DILocation(line: 549, column: 113, scope: !4283)
!4296 = !DILocation(line: 549, column: 201, scope: !4297)
!4297 = !DILexicalBlockFile(scope: !594, file: !458, discriminator: 4)
!4298 = !DILocation(line: 549, column: 201, scope: !597)
!4299 = !DILocation(line: 549, column: 201, scope: !4300)
!4300 = !DILexicalBlockFile(scope: !597, file: !458, discriminator: 5)
!4301 = !DILocation(line: 550, column: 16, scope: !594)
!4302 = !DILocation(line: 550, column: 9, scope: !594)
!4303 = !DILocation(line: 551, column: 5, scope: !595)
!4304 = !DILocation(line: 552, column: 9, scope: !4305)
!4305 = distinct !DILexicalBlock(scope: !581, file: !458, line: 552, column: 9)
!4306 = !DILocation(line: 552, column: 16, scope: !4305)
!4307 = !DILocation(line: 552, column: 9, scope: !581)
!4308 = !DILocation(line: 554, column: 15, scope: !4309)
!4309 = distinct !DILexicalBlock(scope: !4305, file: !458, line: 552, column: 31)
!4310 = !DILocation(line: 555, column: 16, scope: !4309)
!4311 = !DILocation(line: 556, column: 5, scope: !4309)
!4312 = !DILocation(line: 558, column: 28, scope: !4313)
!4313 = distinct !DILexicalBlock(scope: !4314, file: !458, line: 558, column: 17)
!4314 = distinct !DILexicalBlock(scope: !4305, file: !458, line: 557, column: 10)
!4315 = !DILocation(line: 558, column: 17, scope: !4313)
!4316 = !DILocation(line: 558, column: 45, scope: !4313)
!4317 = !DILocation(line: 558, column: 17, scope: !4314)
!4318 = !DILocation(line: 559, column: 34, scope: !4319)
!4319 = distinct !DILexicalBlock(scope: !4313, file: !458, line: 558, column: 50)
!4320 = !DILocation(line: 561, column: 48, scope: !4319)
!4321 = !DILocation(line: 561, column: 58, scope: !4319)
!4322 = !DILocation(line: 561, column: 68, scope: !4319)
!4323 = !DILocation(line: 559, column: 21, scope: !4319)
!4324 = !DILocation(line: 562, column: 21, scope: !4319)
!4325 = !DILocation(line: 564, column: 29, scope: !4314)
!4326 = !DILocation(line: 564, column: 20, scope: !4314)
!4327 = !DILocation(line: 565, column: 28, scope: !4314)
!4328 = !DILocation(line: 565, column: 19, scope: !4314)
!4329 = !DILocation(line: 568, column: 9, scope: !4330)
!4330 = distinct !DILexicalBlock(scope: !581, file: !458, line: 568, column: 9)
!4331 = !DILocation(line: 568, column: 12, scope: !4330)
!4332 = !DILocation(line: 568, column: 9, scope: !581)
!4333 = !DILocation(line: 569, column: 12, scope: !4330)
!4334 = !DILocation(line: 569, column: 9, scope: !4330)
!4335 = !DILocation(line: 570, column: 9, scope: !4336)
!4336 = distinct !DILexicalBlock(scope: !581, file: !458, line: 570, column: 9)
!4337 = !DILocation(line: 570, column: 14, scope: !4336)
!4338 = !DILocation(line: 570, column: 12, scope: !4336)
!4339 = !DILocation(line: 570, column: 9, scope: !581)
!4340 = !DILocation(line: 571, column: 14, scope: !4336)
!4341 = !DILocation(line: 571, column: 12, scope: !4336)
!4342 = !DILocation(line: 571, column: 9, scope: !4336)
!4343 = !DILocation(line: 572, column: 9, scope: !4344)
!4344 = distinct !DILexicalBlock(scope: !581, file: !458, line: 572, column: 9)
!4345 = !DILocation(line: 572, column: 31, scope: !4344)
!4346 = !DILocation(line: 572, column: 16, scope: !4344)
!4347 = !DILocation(line: 572, column: 39, scope: !4344)
!4348 = !DILocation(line: 572, column: 12, scope: !4344)
!4349 = !DILocation(line: 572, column: 9, scope: !581)
!4350 = !DILocation(line: 573, column: 31, scope: !4344)
!4351 = !DILocation(line: 573, column: 16, scope: !4344)
!4352 = !DILocation(line: 573, column: 39, scope: !4344)
!4353 = !DILocation(line: 573, column: 12, scope: !4344)
!4354 = !DILocation(line: 573, column: 9, scope: !4344)
!4355 = !DILocation(line: 575, column: 37, scope: !581)
!4356 = !DILocation(line: 575, column: 43, scope: !581)
!4357 = !DILocation(line: 575, column: 47, scope: !581)
!4358 = !DILocation(line: 575, column: 51, scope: !581)
!4359 = !DILocation(line: 575, column: 58, scope: !581)
!4360 = !DILocation(line: 575, column: 11, scope: !581)
!4361 = !DILocation(line: 575, column: 9, scope: !581)
!4362 = !DILocation(line: 576, column: 16, scope: !4363)
!4363 = distinct !DILexicalBlock(scope: !581, file: !458, line: 576, column: 9)
!4364 = !DILocation(line: 576, column: 20, scope: !4363)
!4365 = !DILocation(line: 576, column: 9, scope: !581)
!4366 = !DILocation(line: 577, column: 9, scope: !4363)
!4367 = !DILocation(line: 578, column: 12, scope: !581)
!4368 = !DILocation(line: 578, column: 5, scope: !581)
!4369 = !DILocation(line: 579, column: 1, scope: !581)
!4370 = !DILocation(line: 26, column: 25, scope: !611)
!4371 = !DILocation(line: 26, column: 35, scope: !611)
!4372 = !DILocation(line: 28, column: 5, scope: !611)
!4373 = !DILocation(line: 28, column: 10, scope: !611)
!4374 = !DILocation(line: 30, column: 26, scope: !621)
!4375 = !DILocation(line: 30, column: 33, scope: !621)
!4376 = !DILocation(line: 30, column: 44, scope: !621)
!4377 = !DILocation(line: 30, column: 53, scope: !621)
!4378 = !DILocation(line: 30, column: 70, scope: !621)
!4379 = !DILocation(line: 30, column: 9, scope: !611)
!4380 = !DILocation(line: 31, column: 36, scope: !4381)
!4381 = distinct !DILexicalBlock(scope: !621, file: !458, line: 30, column: 77)
!4382 = !DILocation(line: 31, column: 22, scope: !4381)
!4383 = !DILocation(line: 31, column: 20, scope: !4381)
!4384 = !DILocation(line: 32, column: 5, scope: !4381)
!4385 = !DILocation(line: 33, column: 9, scope: !620)
!4386 = !DILocation(line: 33, column: 19, scope: !620)
!4387 = !DILocation(line: 33, column: 42, scope: !620)
!4388 = !DILocation(line: 33, column: 27, scope: !620)
!4389 = !DILocation(line: 34, column: 13, scope: !4390)
!4390 = distinct !DILexicalBlock(scope: !620, file: !458, line: 34, column: 13)
!4391 = !DILocation(line: 34, column: 19, scope: !4390)
!4392 = !DILocation(line: 34, column: 13, scope: !620)
!4393 = !DILocation(line: 35, column: 26, scope: !4394)
!4394 = distinct !DILexicalBlock(scope: !4390, file: !458, line: 34, column: 34)
!4395 = !DILocation(line: 35, column: 13, scope: !4394)
!4396 = !DILocation(line: 36, column: 14, scope: !4394)
!4397 = !DILocation(line: 36, column: 20, scope: !4394)
!4398 = !DILocation(line: 37, column: 13, scope: !4394)
!4399 = !DILocation(line: 39, column: 36, scope: !620)
!4400 = !DILocation(line: 39, column: 22, scope: !620)
!4401 = !DILocation(line: 39, column: 20, scope: !620)
!4402 = !DILocation(line: 40, column: 9, scope: !620)
!4403 = !DILocation(line: 40, column: 14, scope: !4404)
!4404 = !DILexicalBlockFile(scope: !623, file: !458, discriminator: 1)
!4405 = !DILocation(line: 40, column: 24, scope: !623)
!4406 = !DILocation(line: 40, column: 54, scope: !623)
!4407 = !DILocation(line: 40, column: 70, scope: !4408)
!4408 = distinct !DILexicalBlock(scope: !623, file: !458, line: 40, column: 67)
!4409 = !DILocation(line: 40, column: 87, scope: !4408)
!4410 = !DILocation(line: 40, column: 67, scope: !4408)
!4411 = !DILocation(line: 40, column: 97, scope: !4408)
!4412 = !DILocation(line: 40, column: 67, scope: !623)
!4413 = !DILocation(line: 40, column: 67, scope: !4414)
!4414 = !DILexicalBlockFile(scope: !623, file: !458, discriminator: 2)
!4415 = !DILocation(line: 40, column: 128, scope: !4416)
!4416 = !DILexicalBlockFile(scope: !4408, file: !458, discriminator: 3)
!4417 = !DILocation(line: 40, column: 146, scope: !4408)
!4418 = !DILocation(line: 40, column: 156, scope: !4408)
!4419 = !DILocation(line: 40, column: 181, scope: !4408)
!4420 = !DILocation(line: 40, column: 112, scope: !4408)
!4421 = !DILocation(line: 40, column: 200, scope: !4422)
!4422 = !DILexicalBlockFile(scope: !620, file: !458, discriminator: 4)
!4423 = !DILocation(line: 40, column: 200, scope: !623)
!4424 = !DILocation(line: 40, column: 200, scope: !4425)
!4425 = !DILexicalBlockFile(scope: !623, file: !458, discriminator: 5)
!4426 = !DILocation(line: 41, column: 5, scope: !621)
!4427 = !DILocation(line: 41, column: 5, scope: !4428)
!4428 = !DILexicalBlockFile(scope: !621, file: !458, discriminator: 1)
!4429 = !DILocation(line: 43, column: 9, scope: !4430)
!4430 = distinct !DILexicalBlock(scope: !611, file: !458, line: 43, column: 9)
!4431 = !DILocation(line: 43, column: 20, scope: !4430)
!4432 = !DILocation(line: 43, column: 24, scope: !4430)
!4433 = !DILocation(line: 43, column: 27, scope: !4434)
!4434 = !DILexicalBlockFile(scope: !4430, file: !458, discriminator: 1)
!4435 = !DILocation(line: 43, column: 38, scope: !4430)
!4436 = !DILocation(line: 43, column: 9, scope: !611)
!4437 = !DILocation(line: 45, column: 25, scope: !4438)
!4438 = distinct !DILexicalBlock(scope: !4430, file: !458, line: 43, column: 46)
!4439 = !DILocation(line: 45, column: 9, scope: !4438)
!4440 = !DILocation(line: 46, column: 10, scope: !4438)
!4441 = !DILocation(line: 46, column: 16, scope: !4438)
!4442 = !DILocation(line: 47, column: 9, scope: !4438)
!4443 = !DILocation(line: 50, column: 14, scope: !611)
!4444 = !DILocation(line: 50, column: 6, scope: !611)
!4445 = !DILocation(line: 50, column: 12, scope: !611)
!4446 = !DILocation(line: 51, column: 5, scope: !611)
!4447 = !DILocation(line: 52, column: 1, scope: !611)
!4448 = !DILocation(line: 449, column: 46, scope: !598)
!4449 = !DILocation(line: 450, column: 38, scope: !598)
!4450 = !DILocation(line: 450, column: 53, scope: !598)
!4451 = !DILocation(line: 451, column: 33, scope: !598)
!4452 = !DILocation(line: 451, column: 51, scope: !598)
!4453 = !DILocation(line: 453, column: 5, scope: !598)
!4454 = !DILocation(line: 453, column: 16, scope: !598)
!4455 = !DILocation(line: 453, column: 24, scope: !598)
!4456 = !DILocation(line: 453, column: 29, scope: !598)
!4457 = !DILocation(line: 453, column: 27, scope: !598)
!4458 = !DILocation(line: 454, column: 5, scope: !598)
!4459 = !DILocation(line: 454, column: 11, scope: !598)
!4460 = !DILocation(line: 454, column: 49, scope: !598)
!4461 = !DILocation(line: 454, column: 34, scope: !598)
!4462 = !DILocation(line: 454, column: 57, scope: !598)
!4463 = !DILocation(line: 454, column: 32, scope: !598)
!4464 = !DILocation(line: 454, column: 91, scope: !4465)
!4465 = !DILexicalBlockFile(scope: !598, file: !458, discriminator: 1)
!4466 = !DILocation(line: 454, column: 99, scope: !598)
!4467 = !DILocation(line: 454, column: 32, scope: !4468)
!4468 = !DILexicalBlockFile(scope: !598, file: !458, discriminator: 2)
!4469 = !DILocation(line: 454, column: 11, scope: !4470)
!4470 = !DILexicalBlockFile(scope: !4471, file: !458, discriminator: 4)
!4471 = !DILexicalBlockFile(scope: !598, file: !458, discriminator: 3)
!4472 = !DILocation(line: 455, column: 5, scope: !598)
!4473 = !DILocation(line: 455, column: 16, scope: !598)
!4474 = !DILocation(line: 455, column: 25, scope: !598)
!4475 = !DILocation(line: 455, column: 37, scope: !598)
!4476 = !DILocation(line: 455, column: 35, scope: !598)
!4477 = !DILocation(line: 456, column: 5, scope: !598)
!4478 = !DILocation(line: 456, column: 9, scope: !598)
!4479 = !DILocation(line: 459, column: 9, scope: !4480)
!4480 = distinct !DILexicalBlock(scope: !598, file: !458, line: 459, column: 9)
!4481 = !DILocation(line: 459, column: 16, scope: !4480)
!4482 = !DILocation(line: 459, column: 9, scope: !598)
!4483 = !DILocation(line: 460, column: 25, scope: !4484)
!4484 = distinct !DILexicalBlock(scope: !4485, file: !458, line: 460, column: 13)
!4485 = distinct !DILexicalBlock(scope: !4480, file: !458, line: 459, column: 21)
!4486 = !DILocation(line: 460, column: 14, scope: !4484)
!4487 = !DILocation(line: 460, column: 13, scope: !4485)
!4488 = !DILocation(line: 461, column: 13, scope: !4484)
!4489 = !DILocation(line: 463, column: 13, scope: !4490)
!4490 = distinct !DILexicalBlock(scope: !4485, file: !458, line: 463, column: 13)
!4491 = !DILocation(line: 463, column: 16, scope: !4490)
!4492 = !DILocation(line: 463, column: 13, scope: !4485)
!4493 = !DILocation(line: 465, column: 31, scope: !4494)
!4494 = distinct !DILexicalBlock(scope: !4490, file: !458, line: 463, column: 22)
!4495 = !DILocation(line: 465, column: 13, scope: !4494)
!4496 = !DILocation(line: 465, column: 19, scope: !4494)
!4497 = !DILocation(line: 465, column: 28, scope: !4494)
!4498 = !DILocation(line: 472, column: 9, scope: !4494)
!4499 = !DILocation(line: 480, column: 21, scope: !4500)
!4500 = distinct !DILexicalBlock(scope: !4490, file: !458, line: 473, column: 14)
!4501 = !DILocation(line: 480, column: 27, scope: !4500)
!4502 = !DILocation(line: 480, column: 25, scope: !4500)
!4503 = !DILocation(line: 480, column: 32, scope: !4500)
!4504 = !DILocation(line: 480, column: 30, scope: !4500)
!4505 = !DILocation(line: 480, column: 43, scope: !4500)
!4506 = !DILocation(line: 480, column: 49, scope: !4500)
!4507 = !DILocation(line: 480, column: 47, scope: !4500)
!4508 = !DILocation(line: 481, column: 38, scope: !4500)
!4509 = !DILocation(line: 481, column: 23, scope: !4500)
!4510 = !DILocation(line: 481, column: 46, scope: !4500)
!4511 = !DILocation(line: 481, column: 57, scope: !4500)
!4512 = !DILocation(line: 481, column: 55, scope: !4500)
!4513 = !DILocation(line: 480, column: 13, scope: !4500)
!4514 = !DILocation(line: 483, column: 44, scope: !4515)
!4515 = distinct !DILexicalBlock(scope: !4485, file: !458, line: 483, column: 13)
!4516 = !DILocation(line: 483, column: 32, scope: !4515)
!4517 = !DILocation(line: 484, column: 49, scope: !4515)
!4518 = !DILocation(line: 484, column: 34, scope: !4515)
!4519 = !DILocation(line: 484, column: 57, scope: !4515)
!4520 = !DILocation(line: 484, column: 68, scope: !4515)
!4521 = !DILocation(line: 484, column: 66, scope: !4515)
!4522 = !DILocation(line: 483, column: 13, scope: !4515)
!4523 = !DILocation(line: 484, column: 76, scope: !4515)
!4524 = !DILocation(line: 483, column: 13, scope: !4485)
!4525 = !DILocation(line: 494, column: 17, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4527, file: !458, line: 494, column: 17)
!4527 = distinct !DILexicalBlock(scope: !4515, file: !458, line: 484, column: 81)
!4528 = !DILocation(line: 494, column: 20, scope: !4526)
!4529 = !DILocation(line: 494, column: 17, scope: !4527)
!4530 = !DILocation(line: 495, column: 35, scope: !4531)
!4531 = distinct !DILexicalBlock(scope: !4526, file: !458, line: 494, column: 26)
!4532 = !DILocation(line: 495, column: 17, scope: !4531)
!4533 = !DILocation(line: 495, column: 23, scope: !4531)
!4534 = !DILocation(line: 495, column: 32, scope: !4531)
!4535 = !DILocation(line: 496, column: 17, scope: !4531)
!4536 = !DILocation(line: 500, column: 50, scope: !4527)
!4537 = !DILocation(line: 500, column: 30, scope: !4527)
!4538 = !DILocation(line: 500, column: 15, scope: !4527)
!4539 = !DILocation(line: 500, column: 38, scope: !4527)
!4540 = !DILocation(line: 500, column: 47, scope: !4527)
!4541 = !DILocation(line: 501, column: 17, scope: !4527)
!4542 = !DILocation(line: 502, column: 9, scope: !4527)
!4543 = !DILocation(line: 503, column: 47, scope: !4485)
!4544 = !DILocation(line: 503, column: 32, scope: !4485)
!4545 = !DILocation(line: 503, column: 55, scope: !4485)
!4546 = !DILocation(line: 503, column: 30, scope: !4485)
!4547 = !DILocation(line: 503, column: 89, scope: !4548)
!4548 = !DILexicalBlockFile(scope: !4485, file: !458, discriminator: 1)
!4549 = !DILocation(line: 503, column: 97, scope: !4485)
!4550 = !DILocation(line: 503, column: 30, scope: !4551)
!4551 = !DILexicalBlockFile(scope: !4485, file: !458, discriminator: 2)
!4552 = !DILocation(line: 503, column: 13, scope: !4553)
!4553 = !DILexicalBlockFile(scope: !4554, file: !458, discriminator: 4)
!4554 = !DILexicalBlockFile(scope: !4485, file: !458, discriminator: 3)
!4555 = !DILocation(line: 504, column: 5, scope: !4485)
!4556 = !DILocation(line: 505, column: 14, scope: !4557)
!4557 = distinct !DILexicalBlock(scope: !4480, file: !458, line: 505, column: 14)
!4558 = !DILocation(line: 505, column: 21, scope: !4557)
!4559 = !DILocation(line: 505, column: 14, scope: !4480)
!4560 = !DILocation(line: 506, column: 30, scope: !4561)
!4561 = distinct !DILexicalBlock(scope: !4562, file: !458, line: 506, column: 13)
!4562 = distinct !DILexicalBlock(scope: !4557, file: !458, line: 505, column: 26)
!4563 = !DILocation(line: 506, column: 15, scope: !4561)
!4564 = !DILocation(line: 506, column: 38, scope: !4561)
!4565 = !DILocation(line: 506, column: 95, scope: !4561)
!4566 = !DILocation(line: 506, column: 93, scope: !4561)
!4567 = !DILocation(line: 506, column: 47, scope: !4561)
!4568 = !DILocation(line: 506, column: 13, scope: !4562)
!4569 = !DILocation(line: 507, column: 13, scope: !4570)
!4570 = distinct !DILexicalBlock(scope: !4561, file: !458, line: 506, column: 103)
!4571 = !DILocation(line: 508, column: 13, scope: !4570)
!4572 = !DILocation(line: 511, column: 44, scope: !4573)
!4573 = distinct !DILexicalBlock(scope: !4562, file: !458, line: 511, column: 13)
!4574 = !DILocation(line: 511, column: 32, scope: !4573)
!4575 = !DILocation(line: 512, column: 49, scope: !4573)
!4576 = !DILocation(line: 512, column: 34, scope: !4573)
!4577 = !DILocation(line: 512, column: 57, scope: !4573)
!4578 = !DILocation(line: 512, column: 68, scope: !4573)
!4579 = !DILocation(line: 512, column: 66, scope: !4573)
!4580 = !DILocation(line: 511, column: 13, scope: !4573)
!4581 = !DILocation(line: 512, column: 76, scope: !4573)
!4582 = !DILocation(line: 511, column: 13, scope: !4562)
!4583 = !DILocation(line: 513, column: 13, scope: !4584)
!4584 = distinct !DILexicalBlock(scope: !4573, file: !458, line: 512, column: 81)
!4585 = !DILocation(line: 515, column: 47, scope: !4562)
!4586 = !DILocation(line: 515, column: 32, scope: !4562)
!4587 = !DILocation(line: 515, column: 55, scope: !4562)
!4588 = !DILocation(line: 515, column: 30, scope: !4562)
!4589 = !DILocation(line: 515, column: 89, scope: !4590)
!4590 = !DILexicalBlockFile(scope: !4562, file: !458, discriminator: 1)
!4591 = !DILocation(line: 515, column: 97, scope: !4562)
!4592 = !DILocation(line: 515, column: 30, scope: !4593)
!4593 = !DILexicalBlockFile(scope: !4562, file: !458, discriminator: 2)
!4594 = !DILocation(line: 515, column: 13, scope: !4595)
!4595 = !DILexicalBlockFile(scope: !4596, file: !458, discriminator: 4)
!4596 = !DILexicalBlockFile(scope: !4562, file: !458, discriminator: 3)
!4597 = !DILocation(line: 523, column: 17, scope: !4562)
!4598 = !DILocation(line: 523, column: 23, scope: !4562)
!4599 = !DILocation(line: 523, column: 21, scope: !4562)
!4600 = !DILocation(line: 523, column: 28, scope: !4562)
!4601 = !DILocation(line: 523, column: 26, scope: !4562)
!4602 = !DILocation(line: 523, column: 39, scope: !4562)
!4603 = !DILocation(line: 523, column: 45, scope: !4562)
!4604 = !DILocation(line: 523, column: 43, scope: !4562)
!4605 = !DILocation(line: 524, column: 34, scope: !4562)
!4606 = !DILocation(line: 524, column: 19, scope: !4562)
!4607 = !DILocation(line: 524, column: 42, scope: !4562)
!4608 = !DILocation(line: 524, column: 53, scope: !4562)
!4609 = !DILocation(line: 524, column: 51, scope: !4562)
!4610 = !DILocation(line: 524, column: 58, scope: !4562)
!4611 = !DILocation(line: 524, column: 56, scope: !4562)
!4612 = !DILocation(line: 523, column: 9, scope: !4562)
!4613 = !DILocation(line: 525, column: 5, scope: !4562)
!4614 = !DILocation(line: 527, column: 9, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !598, file: !458, line: 527, column: 9)
!4616 = !DILocation(line: 527, column: 19, scope: !4615)
!4617 = !DILocation(line: 527, column: 9, scope: !598)
!4618 = !DILocation(line: 528, column: 16, scope: !4615)
!4619 = !DILocation(line: 528, column: 22, scope: !4615)
!4620 = !DILocation(line: 528, column: 20, scope: !4615)
!4621 = !DILocation(line: 528, column: 26, scope: !4615)
!4622 = !DILocation(line: 528, column: 33, scope: !4615)
!4623 = !DILocation(line: 528, column: 9, scope: !4615)
!4624 = !DILocation(line: 529, column: 12, scope: !598)
!4625 = !DILocation(line: 529, column: 5, scope: !598)
!4626 = !DILocation(line: 530, column: 1, scope: !598)
!4627 = !DILocation(line: 8, column: 28, scope: !633)
!4628 = !DILocation(line: 8, column: 44, scope: !633)
!4629 = !DILocation(line: 9, column: 28, scope: !633)
!4630 = !DILocation(line: 9, column: 44, scope: !633)
!4631 = !DILocation(line: 10, column: 27, scope: !633)
!4632 = !DILocation(line: 12, column: 5, scope: !633)
!4633 = !DILocation(line: 12, column: 16, scope: !633)
!4634 = !DILocation(line: 14, column: 9, scope: !4635)
!4635 = distinct !DILexicalBlock(scope: !633, file: !634, line: 14, column: 9)
!4636 = !DILocation(line: 14, column: 17, scope: !4635)
!4637 = !DILocation(line: 14, column: 9, scope: !633)
!4638 = !DILocation(line: 15, column: 9, scope: !4635)
!4639 = !DILocation(line: 16, column: 9, scope: !4640)
!4640 = distinct !DILexicalBlock(scope: !633, file: !634, line: 16, column: 9)
!4641 = !DILocation(line: 16, column: 17, scope: !4640)
!4642 = !DILocation(line: 16, column: 9, scope: !633)
!4643 = !DILocation(line: 17, column: 16, scope: !4640)
!4644 = !DILocation(line: 17, column: 9, scope: !4640)
!4645 = !DILocation(line: 19, column: 22, scope: !633)
!4646 = !DILocation(line: 19, column: 27, scope: !633)
!4647 = !DILocation(line: 19, column: 36, scope: !633)
!4648 = !DILocation(line: 19, column: 41, scope: !633)
!4649 = !DILocation(line: 19, column: 11, scope: !633)
!4650 = !DILocation(line: 19, column: 9, scope: !633)
!4651 = !DILocation(line: 21, column: 9, scope: !4652)
!4652 = distinct !DILexicalBlock(scope: !633, file: !634, line: 21, column: 9)
!4653 = !DILocation(line: 21, column: 13, scope: !4652)
!4654 = !DILocation(line: 21, column: 9, scope: !633)
!4655 = !DILocation(line: 22, column: 16, scope: !4652)
!4656 = !DILocation(line: 22, column: 13, scope: !4652)
!4657 = !DILocation(line: 22, column: 9, scope: !4652)
!4658 = !DILocation(line: 24, column: 12, scope: !633)
!4659 = !DILocation(line: 24, column: 5, scope: !633)
!4660 = !DILocation(line: 25, column: 1, scope: !633)
!4661 = !DILocation(line: 84, column: 24, scope: !644)
!4662 = !DILocation(line: 84, column: 38, scope: !644)
!4663 = !DILocation(line: 85, column: 24, scope: !644)
!4664 = !DILocation(line: 85, column: 38, scope: !644)
!4665 = !DILocation(line: 86, column: 23, scope: !644)
!4666 = !DILocation(line: 86, column: 37, scope: !644)
!4667 = !DILocation(line: 88, column: 5, scope: !644)
!4668 = !DILocation(line: 88, column: 19, scope: !644)
!4669 = !DILocation(line: 89, column: 5, scope: !644)
!4670 = !DILocation(line: 89, column: 16, scope: !644)
!4671 = !DILocation(line: 89, column: 22, scope: !644)
!4672 = !DILocation(line: 90, column: 5, scope: !644)
!4673 = !DILocation(line: 90, column: 16, scope: !644)
!4674 = !DILocation(line: 90, column: 19, scope: !644)
!4675 = !DILocation(line: 90, column: 22, scope: !644)
!4676 = !DILocation(line: 90, column: 29, scope: !644)
!4677 = !DILocation(line: 92, column: 9, scope: !644)
!4678 = !DILocation(line: 92, column: 13, scope: !644)
!4679 = !DILocation(line: 92, column: 11, scope: !644)
!4680 = !DILocation(line: 92, column: 7, scope: !644)
!4681 = !DILocation(line: 94, column: 9, scope: !4682)
!4682 = distinct !DILexicalBlock(scope: !644, file: !645, line: 94, column: 9)
!4683 = !DILocation(line: 94, column: 11, scope: !4682)
!4684 = !DILocation(line: 94, column: 15, scope: !4682)
!4685 = !DILocation(line: 94, column: 19, scope: !4686)
!4686 = !DILexicalBlockFile(scope: !4682, file: !645, discriminator: 1)
!4687 = !DILocation(line: 94, column: 24, scope: !4682)
!4688 = !DILocation(line: 94, column: 29, scope: !4682)
!4689 = !DILocation(line: 94, column: 32, scope: !4690)
!4690 = !DILexicalBlockFile(scope: !4682, file: !645, discriminator: 2)
!4691 = !DILocation(line: 94, column: 41, scope: !4682)
!4692 = !DILocation(line: 94, column: 9, scope: !644)
!4693 = !DILocation(line: 95, column: 9, scope: !4682)
!4694 = !DILocation(line: 98, column: 9, scope: !666)
!4695 = !DILocation(line: 98, column: 11, scope: !666)
!4696 = !DILocation(line: 98, column: 9, scope: !644)
!4697 = !DILocation(line: 99, column: 13, scope: !4698)
!4698 = distinct !DILexicalBlock(scope: !665, file: !645, line: 99, column: 13)
!4699 = !DILocation(line: 99, column: 15, scope: !4698)
!4700 = !DILocation(line: 99, column: 13, scope: !665)
!4701 = !DILocation(line: 100, column: 13, scope: !4698)
!4702 = !DILocation(line: 102, column: 13, scope: !664)
!4703 = !DILocation(line: 102, column: 15, scope: !664)
!4704 = !DILocation(line: 102, column: 20, scope: !664)
!4705 = !DILocation(line: 102, column: 24, scope: !4706)
!4706 = !DILexicalBlockFile(scope: !664, file: !645, discriminator: 1)
!4707 = !DILocation(line: 102, column: 29, scope: !664)
!4708 = !DILocation(line: 104, column: 21, scope: !664)
!4709 = !DILocation(line: 104, column: 24, scope: !4706)
!4710 = !DILocation(line: 104, column: 29, scope: !664)
!4711 = !DILocation(line: 102, column: 13, scope: !665)
!4712 = !DILocation(line: 109, column: 13, scope: !663)
!4713 = !DILocation(line: 109, column: 27, scope: !663)
!4714 = !DILocation(line: 110, column: 22, scope: !663)
!4715 = !DILocation(line: 110, column: 27, scope: !663)
!4716 = !DILocation(line: 110, column: 20, scope: !663)
!4717 = !DILocation(line: 118, column: 25, scope: !663)
!4718 = !DILocation(line: 118, column: 28, scope: !663)
!4719 = !DILocation(line: 118, column: 31, scope: !663)
!4720 = !DILocation(line: 118, column: 37, scope: !663)
!4721 = !DILocation(line: 118, column: 45, scope: !663)
!4722 = !DILocation(line: 118, column: 55, scope: !663)
!4723 = !DILocation(line: 117, column: 24, scope: !663)
!4724 = !DILocation(line: 117, column: 17, scope: !663)
!4725 = !DILocation(line: 119, column: 9, scope: !664)
!4726 = !DILocation(line: 120, column: 13, scope: !4727)
!4727 = distinct !DILexicalBlock(scope: !665, file: !645, line: 120, column: 13)
!4728 = !DILocation(line: 120, column: 18, scope: !4727)
!4729 = !DILocation(line: 120, column: 13, scope: !665)
!4730 = !DILocation(line: 121, column: 20, scope: !4731)
!4731 = distinct !DILexicalBlock(scope: !4732, file: !645, line: 121, column: 13)
!4732 = distinct !DILexicalBlock(scope: !4727, file: !645, line: 120, column: 24)
!4733 = !DILocation(line: 121, column: 18, scope: !4731)
!4734 = !DILocation(line: 121, column: 25, scope: !4735)
!4735 = !DILexicalBlockFile(scope: !4736, file: !645, discriminator: 2)
!4736 = !DILexicalBlockFile(scope: !4737, file: !645, discriminator: 1)
!4737 = distinct !DILexicalBlock(scope: !4731, file: !645, line: 121, column: 13)
!4738 = !DILocation(line: 121, column: 29, scope: !4737)
!4739 = !DILocation(line: 121, column: 27, scope: !4737)
!4740 = !DILocation(line: 121, column: 13, scope: !4731)
!4741 = !DILocation(line: 122, column: 23, scope: !4742)
!4742 = distinct !DILexicalBlock(scope: !4737, file: !645, line: 122, column: 21)
!4743 = !DILocation(line: 122, column: 21, scope: !4742)
!4744 = !DILocation(line: 122, column: 29, scope: !4742)
!4745 = !DILocation(line: 122, column: 26, scope: !4742)
!4746 = !DILocation(line: 122, column: 21, scope: !4737)
!4747 = !DILocation(line: 123, column: 26, scope: !4748)
!4748 = distinct !DILexicalBlock(scope: !4742, file: !645, line: 122, column: 35)
!4749 = !DILocation(line: 124, column: 25, scope: !4750)
!4750 = distinct !DILexicalBlock(scope: !4748, file: !645, line: 124, column: 25)
!4751 = !DILocation(line: 124, column: 34, scope: !4750)
!4752 = !DILocation(line: 124, column: 31, scope: !4750)
!4753 = !DILocation(line: 124, column: 25, scope: !4748)
!4754 = !DILocation(line: 125, column: 32, scope: !4750)
!4755 = !DILocation(line: 125, column: 25, scope: !4750)
!4756 = !DILocation(line: 126, column: 17, scope: !4748)
!4757 = !DILocation(line: 122, column: 32, scope: !4758)
!4758 = !DILexicalBlockFile(scope: !4742, file: !645, discriminator: 1)
!4759 = !DILocation(line: 121, column: 33, scope: !4737)
!4760 = !DILocation(line: 121, column: 13, scope: !4737)
!4761 = !DILocation(line: 127, column: 20, scope: !4732)
!4762 = !DILocation(line: 127, column: 13, scope: !4732)
!4763 = !DILocation(line: 128, column: 20, scope: !4764)
!4764 = distinct !DILexicalBlock(scope: !4727, file: !645, line: 128, column: 20)
!4765 = !DILocation(line: 128, column: 25, scope: !4764)
!4766 = !DILocation(line: 128, column: 20, scope: !4727)
!4767 = !DILocation(line: 129, column: 20, scope: !4768)
!4768 = distinct !DILexicalBlock(scope: !4769, file: !645, line: 129, column: 13)
!4769 = distinct !DILexicalBlock(scope: !4764, file: !645, line: 128, column: 31)
!4770 = !DILocation(line: 129, column: 18, scope: !4768)
!4771 = !DILocation(line: 129, column: 25, scope: !4772)
!4772 = !DILexicalBlockFile(scope: !4773, file: !645, discriminator: 2)
!4773 = !DILexicalBlockFile(scope: !4774, file: !645, discriminator: 1)
!4774 = distinct !DILexicalBlock(scope: !4768, file: !645, line: 129, column: 13)
!4775 = !DILocation(line: 129, column: 29, scope: !4774)
!4776 = !DILocation(line: 129, column: 27, scope: !4774)
!4777 = !DILocation(line: 129, column: 13, scope: !4768)
!4778 = !DILocation(line: 130, column: 23, scope: !4779)
!4779 = distinct !DILexicalBlock(scope: !4774, file: !645, line: 130, column: 21)
!4780 = !DILocation(line: 130, column: 21, scope: !4779)
!4781 = !DILocation(line: 130, column: 29, scope: !4779)
!4782 = !DILocation(line: 130, column: 26, scope: !4779)
!4783 = !DILocation(line: 130, column: 21, scope: !4774)
!4784 = !DILocation(line: 131, column: 28, scope: !4779)
!4785 = !DILocation(line: 131, column: 21, scope: !4779)
!4786 = !DILocation(line: 130, column: 32, scope: !4787)
!4787 = !DILexicalBlockFile(scope: !4779, file: !645, discriminator: 1)
!4788 = !DILocation(line: 129, column: 33, scope: !4774)
!4789 = !DILocation(line: 129, column: 13, scope: !4774)
!4790 = !DILocation(line: 132, column: 9, scope: !4769)
!4791 = !DILocation(line: 133, column: 22, scope: !4792)
!4792 = distinct !DILexicalBlock(scope: !4793, file: !645, line: 133, column: 13)
!4793 = distinct !DILexicalBlock(scope: !4764, file: !645, line: 132, column: 16)
!4794 = !DILocation(line: 133, column: 24, scope: !4792)
!4795 = !DILocation(line: 133, column: 20, scope: !4792)
!4796 = !DILocation(line: 133, column: 18, scope: !4792)
!4797 = !DILocation(line: 133, column: 29, scope: !4798)
!4798 = !DILexicalBlockFile(scope: !4799, file: !645, discriminator: 2)
!4799 = !DILexicalBlockFile(scope: !4800, file: !645, discriminator: 1)
!4800 = distinct !DILexicalBlock(scope: !4792, file: !645, line: 133, column: 13)
!4801 = !DILocation(line: 133, column: 31, scope: !4800)
!4802 = !DILocation(line: 133, column: 13, scope: !4792)
!4803 = !DILocation(line: 134, column: 23, scope: !4804)
!4804 = distinct !DILexicalBlock(scope: !4800, file: !645, line: 134, column: 21)
!4805 = !DILocation(line: 134, column: 21, scope: !4804)
!4806 = !DILocation(line: 134, column: 29, scope: !4804)
!4807 = !DILocation(line: 134, column: 26, scope: !4804)
!4808 = !DILocation(line: 134, column: 21, scope: !4800)
!4809 = !DILocation(line: 135, column: 28, scope: !4804)
!4810 = !DILocation(line: 135, column: 21, scope: !4804)
!4811 = !DILocation(line: 134, column: 32, scope: !4812)
!4812 = !DILexicalBlockFile(scope: !4804, file: !645, discriminator: 1)
!4813 = !DILocation(line: 133, column: 38, scope: !4800)
!4814 = !DILocation(line: 133, column: 13, scope: !4800)
!4815 = !DILocation(line: 137, column: 9, scope: !665)
!4816 = !DILocation(line: 140, column: 13, scope: !644)
!4817 = !DILocation(line: 140, column: 15, scope: !644)
!4818 = !DILocation(line: 140, column: 11, scope: !644)
!4819 = !DILocation(line: 141, column: 12, scope: !644)
!4820 = !DILocation(line: 141, column: 18, scope: !644)
!4821 = !DILocation(line: 141, column: 10, scope: !644)
!4822 = !DILocation(line: 142, column: 10, scope: !644)
!4823 = !DILocation(line: 144, column: 9, scope: !669)
!4824 = !DILocation(line: 144, column: 14, scope: !669)
!4825 = !DILocation(line: 144, column: 9, scope: !644)
!4826 = !DILocation(line: 145, column: 9, scope: !668)
!4827 = !DILocation(line: 145, column: 21, scope: !668)
!4828 = !DILocation(line: 145, column: 26, scope: !668)
!4829 = !DILocation(line: 145, column: 30, scope: !668)
!4830 = !DILocation(line: 145, column: 28, scope: !668)
!4831 = !DILocation(line: 145, column: 32, scope: !668)
!4832 = !DILocation(line: 146, column: 9, scope: !668)
!4833 = !DILocation(line: 146, column: 21, scope: !668)
!4834 = !DILocation(line: 146, column: 26, scope: !668)
!4835 = !DILocation(line: 146, column: 30, scope: !668)
!4836 = !DILocation(line: 146, column: 28, scope: !668)
!4837 = !DILocation(line: 146, column: 32, scope: !668)
!4838 = !DILocation(line: 151, column: 16, scope: !4839)
!4839 = distinct !DILexicalBlock(scope: !668, file: !645, line: 151, column: 9)
!4840 = !DILocation(line: 151, column: 14, scope: !4839)
!4841 = !DILocation(line: 151, column: 21, scope: !4842)
!4842 = !DILexicalBlockFile(scope: !4843, file: !645, discriminator: 2)
!4843 = !DILexicalBlockFile(scope: !4844, file: !645, discriminator: 1)
!4844 = distinct !DILexicalBlock(scope: !4839, file: !645, line: 151, column: 9)
!4845 = !DILocation(line: 151, column: 25, scope: !4844)
!4846 = !DILocation(line: 151, column: 23, scope: !4844)
!4847 = !DILocation(line: 151, column: 9, scope: !4839)
!4848 = !DILocation(line: 152, column: 35, scope: !4849)
!4849 = distinct !DILexicalBlock(scope: !4844, file: !645, line: 151, column: 37)
!4850 = !DILocation(line: 152, column: 33, scope: !4849)
!4851 = !DILocation(line: 152, column: 32, scope: !4849)
!4852 = !DILocation(line: 152, column: 39, scope: !4849)
!4853 = !DILocation(line: 152, column: 28, scope: !4849)
!4854 = !DILocation(line: 152, column: 20, scope: !4849)
!4855 = !DILocation(line: 153, column: 19, scope: !4856)
!4856 = distinct !DILexicalBlock(scope: !4849, file: !645, line: 153, column: 17)
!4857 = !DILocation(line: 153, column: 17, scope: !4856)
!4858 = !DILocation(line: 153, column: 27, scope: !4856)
!4859 = !DILocation(line: 153, column: 25, scope: !4856)
!4860 = !DILocation(line: 153, column: 22, scope: !4856)
!4861 = !DILocation(line: 153, column: 17, scope: !4849)
!4862 = !DILocation(line: 154, column: 24, scope: !4856)
!4863 = !DILocation(line: 154, column: 32, scope: !4856)
!4864 = !DILocation(line: 154, column: 30, scope: !4856)
!4865 = !DILocation(line: 154, column: 34, scope: !4856)
!4866 = !DILocation(line: 154, column: 22, scope: !4856)
!4867 = !DILocation(line: 154, column: 17, scope: !4856)
!4868 = !DILocation(line: 155, column: 9, scope: !4849)
!4869 = !DILocation(line: 151, column: 33, scope: !4844)
!4870 = !DILocation(line: 151, column: 9, scope: !4844)
!4871 = !DILocation(line: 157, column: 31, scope: !668)
!4872 = !DILocation(line: 157, column: 29, scope: !668)
!4873 = !DILocation(line: 157, column: 28, scope: !668)
!4874 = !DILocation(line: 157, column: 39, scope: !668)
!4875 = !DILocation(line: 157, column: 24, scope: !668)
!4876 = !DILocation(line: 157, column: 16, scope: !668)
!4877 = !DILocation(line: 159, column: 16, scope: !4878)
!4878 = distinct !DILexicalBlock(scope: !668, file: !645, line: 159, column: 9)
!4879 = !DILocation(line: 159, column: 14, scope: !4878)
!4880 = !DILocation(line: 159, column: 21, scope: !4881)
!4881 = !DILexicalBlockFile(scope: !4882, file: !645, discriminator: 2)
!4882 = !DILexicalBlockFile(scope: !4883, file: !645, discriminator: 1)
!4883 = distinct !DILexicalBlock(scope: !4878, file: !645, line: 159, column: 9)
!4884 = !DILocation(line: 159, column: 26, scope: !4883)
!4885 = !DILocation(line: 159, column: 23, scope: !4883)
!4886 = !DILocation(line: 159, column: 9, scope: !4878)
!4887 = !DILocation(line: 161, column: 20, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4889, file: !645, line: 161, column: 17)
!4889 = distinct !DILexicalBlock(scope: !4883, file: !645, line: 159, column: 34)
!4890 = !DILocation(line: 161, column: 17, scope: !4888)
!4891 = !DILocation(line: 161, column: 26, scope: !4888)
!4892 = !DILocation(line: 161, column: 23, scope: !4888)
!4893 = !DILocation(line: 161, column: 17, scope: !4889)
!4894 = !DILocation(line: 163, column: 24, scope: !4895)
!4895 = distinct !DILexicalBlock(scope: !4896, file: !645, line: 163, column: 17)
!4896 = distinct !DILexicalBlock(scope: !4888, file: !645, line: 161, column: 33)
!4897 = !DILocation(line: 163, column: 22, scope: !4895)
!4898 = !DILocation(line: 163, column: 29, scope: !4899)
!4899 = !DILexicalBlockFile(scope: !4900, file: !645, discriminator: 2)
!4900 = !DILexicalBlockFile(scope: !4901, file: !645, discriminator: 1)
!4901 = distinct !DILexicalBlock(scope: !4895, file: !645, line: 163, column: 17)
!4902 = !DILocation(line: 163, column: 33, scope: !4901)
!4903 = !DILocation(line: 163, column: 31, scope: !4901)
!4904 = !DILocation(line: 163, column: 17, scope: !4895)
!4905 = !DILocation(line: 164, column: 27, scope: !4906)
!4906 = distinct !DILexicalBlock(scope: !4901, file: !645, line: 164, column: 25)
!4907 = !DILocation(line: 164, column: 29, scope: !4906)
!4908 = !DILocation(line: 164, column: 28, scope: !4906)
!4909 = !DILocation(line: 164, column: 25, scope: !4906)
!4910 = !DILocation(line: 164, column: 37, scope: !4906)
!4911 = !DILocation(line: 164, column: 35, scope: !4906)
!4912 = !DILocation(line: 164, column: 32, scope: !4906)
!4913 = !DILocation(line: 164, column: 25, scope: !4901)
!4914 = !DILocation(line: 165, column: 25, scope: !4906)
!4915 = !DILocation(line: 164, column: 38, scope: !4916)
!4916 = !DILexicalBlockFile(scope: !4906, file: !645, discriminator: 1)
!4917 = !DILocation(line: 163, column: 41, scope: !4901)
!4918 = !DILocation(line: 163, column: 17, scope: !4901)
!4919 = !DILocation(line: 166, column: 21, scope: !4920)
!4920 = distinct !DILexicalBlock(scope: !4896, file: !645, line: 166, column: 21)
!4921 = !DILocation(line: 166, column: 26, scope: !4920)
!4922 = !DILocation(line: 166, column: 23, scope: !4920)
!4923 = !DILocation(line: 166, column: 21, scope: !4896)
!4924 = !DILocation(line: 168, column: 25, scope: !4925)
!4925 = distinct !DILexicalBlock(scope: !4926, file: !645, line: 168, column: 25)
!4926 = distinct !DILexicalBlock(scope: !4920, file: !645, line: 166, column: 33)
!4927 = !DILocation(line: 168, column: 30, scope: !4925)
!4928 = !DILocation(line: 168, column: 25, scope: !4926)
!4929 = !DILocation(line: 169, column: 32, scope: !4925)
!4930 = !DILocation(line: 169, column: 25, scope: !4925)
!4931 = !DILocation(line: 170, column: 26, scope: !4926)
!4932 = !DILocation(line: 171, column: 25, scope: !4933)
!4933 = distinct !DILexicalBlock(scope: !4926, file: !645, line: 171, column: 25)
!4934 = !DILocation(line: 171, column: 34, scope: !4933)
!4935 = !DILocation(line: 171, column: 31, scope: !4933)
!4936 = !DILocation(line: 171, column: 25, scope: !4926)
!4937 = !DILocation(line: 172, column: 32, scope: !4933)
!4938 = !DILocation(line: 172, column: 25, scope: !4933)
!4939 = !DILocation(line: 173, column: 25, scope: !4926)
!4940 = !DILocation(line: 173, column: 29, scope: !4926)
!4941 = !DILocation(line: 173, column: 27, scope: !4926)
!4942 = !DILocation(line: 173, column: 23, scope: !4926)
!4943 = !DILocation(line: 174, column: 21, scope: !4926)
!4944 = !DILocation(line: 177, column: 24, scope: !4945)
!4945 = distinct !DILexicalBlock(scope: !4896, file: !645, line: 177, column: 21)
!4946 = !DILocation(line: 177, column: 44, scope: !4945)
!4947 = !DILocation(line: 177, column: 45, scope: !4945)
!4948 = !DILocation(line: 177, column: 41, scope: !4945)
!4949 = !DILocation(line: 177, column: 40, scope: !4945)
!4950 = !DILocation(line: 177, column: 50, scope: !4945)
!4951 = !DILocation(line: 177, column: 36, scope: !4945)
!4952 = !DILocation(line: 177, column: 29, scope: !4945)
!4953 = !DILocation(line: 177, column: 21, scope: !4896)
!4954 = !DILocation(line: 178, column: 25, scope: !4945)
!4955 = !DILocation(line: 178, column: 29, scope: !4945)
!4956 = !DILocation(line: 178, column: 27, scope: !4945)
!4957 = !DILocation(line: 178, column: 23, scope: !4945)
!4958 = !DILocation(line: 178, column: 21, scope: !4945)
!4959 = !DILocation(line: 180, column: 25, scope: !4945)
!4960 = !DILocation(line: 180, column: 29, scope: !4945)
!4961 = !DILocation(line: 180, column: 27, scope: !4945)
!4962 = !DILocation(line: 180, column: 23, scope: !4945)
!4963 = !DILocation(line: 181, column: 13, scope: !4896)
!4964 = !DILocation(line: 183, column: 24, scope: !4965)
!4965 = distinct !DILexicalBlock(scope: !4966, file: !645, line: 183, column: 21)
!4966 = distinct !DILexicalBlock(scope: !4888, file: !645, line: 181, column: 20)
!4967 = !DILocation(line: 183, column: 44, scope: !4965)
!4968 = !DILocation(line: 183, column: 45, scope: !4965)
!4969 = !DILocation(line: 183, column: 41, scope: !4965)
!4970 = !DILocation(line: 183, column: 40, scope: !4965)
!4971 = !DILocation(line: 183, column: 50, scope: !4965)
!4972 = !DILocation(line: 183, column: 36, scope: !4965)
!4973 = !DILocation(line: 183, column: 29, scope: !4965)
!4974 = !DILocation(line: 183, column: 21, scope: !4966)
!4975 = !DILocation(line: 184, column: 25, scope: !4965)
!4976 = !DILocation(line: 184, column: 29, scope: !4965)
!4977 = !DILocation(line: 184, column: 27, scope: !4965)
!4978 = !DILocation(line: 184, column: 23, scope: !4965)
!4979 = !DILocation(line: 184, column: 21, scope: !4965)
!4980 = !DILocation(line: 186, column: 9, scope: !4889)
!4981 = !DILocation(line: 159, column: 30, scope: !4883)
!4982 = !DILocation(line: 159, column: 9, scope: !4883)
!4983 = !DILocation(line: 187, column: 5, scope: !669)
!4984 = !DILocation(line: 187, column: 5, scope: !4985)
!4985 = !DILexicalBlockFile(scope: !669, file: !645, discriminator: 1)
!4986 = !DILocation(line: 187, column: 5, scope: !668)
!4987 = !DILocation(line: 192, column: 29, scope: !4988)
!4988 = distinct !DILexicalBlock(scope: !669, file: !645, line: 187, column: 12)
!4989 = !DILocation(line: 192, column: 28, scope: !4988)
!4990 = !DILocation(line: 192, column: 35, scope: !4988)
!4991 = !DILocation(line: 192, column: 24, scope: !4988)
!4992 = !DILocation(line: 192, column: 16, scope: !4988)
!4993 = !DILocation(line: 194, column: 18, scope: !4994)
!4994 = distinct !DILexicalBlock(scope: !4988, file: !645, line: 194, column: 9)
!4995 = !DILocation(line: 194, column: 16, scope: !4994)
!4996 = !DILocation(line: 194, column: 14, scope: !4994)
!4997 = !DILocation(line: 194, column: 25, scope: !4998)
!4998 = !DILexicalBlockFile(scope: !4999, file: !645, discriminator: 2)
!4999 = !DILexicalBlockFile(scope: !5000, file: !645, discriminator: 1)
!5000 = distinct !DILexicalBlock(scope: !4994, file: !645, line: 194, column: 9)
!5001 = !DILocation(line: 194, column: 27, scope: !5000)
!5002 = !DILocation(line: 194, column: 9, scope: !4994)
!5003 = !DILocation(line: 195, column: 35, scope: !5004)
!5004 = distinct !DILexicalBlock(scope: !5000, file: !645, line: 194, column: 37)
!5005 = !DILocation(line: 195, column: 33, scope: !5004)
!5006 = !DILocation(line: 195, column: 32, scope: !5004)
!5007 = !DILocation(line: 195, column: 39, scope: !5004)
!5008 = !DILocation(line: 195, column: 28, scope: !5004)
!5009 = !DILocation(line: 195, column: 20, scope: !5004)
!5010 = !DILocation(line: 196, column: 19, scope: !5011)
!5011 = distinct !DILexicalBlock(scope: !5004, file: !645, line: 196, column: 17)
!5012 = !DILocation(line: 196, column: 17, scope: !5011)
!5013 = !DILocation(line: 196, column: 25, scope: !5011)
!5014 = !DILocation(line: 196, column: 22, scope: !5011)
!5015 = !DILocation(line: 196, column: 17, scope: !5004)
!5016 = !DILocation(line: 197, column: 24, scope: !5011)
!5017 = !DILocation(line: 197, column: 26, scope: !5011)
!5018 = !DILocation(line: 197, column: 22, scope: !5011)
!5019 = !DILocation(line: 197, column: 17, scope: !5011)
!5020 = !DILocation(line: 198, column: 9, scope: !5004)
!5021 = !DILocation(line: 194, column: 33, scope: !5000)
!5022 = !DILocation(line: 194, column: 9, scope: !5000)
!5023 = !DILocation(line: 200, column: 18, scope: !5024)
!5024 = distinct !DILexicalBlock(scope: !4988, file: !645, line: 200, column: 9)
!5025 = !DILocation(line: 200, column: 16, scope: !5024)
!5026 = !DILocation(line: 200, column: 14, scope: !5024)
!5027 = !DILocation(line: 200, column: 21, scope: !5028)
!5028 = !DILexicalBlockFile(scope: !5029, file: !645, discriminator: 2)
!5029 = !DILexicalBlockFile(scope: !5030, file: !645, discriminator: 1)
!5030 = distinct !DILexicalBlock(scope: !5024, file: !645, line: 200, column: 9)
!5031 = !DILocation(line: 200, column: 23, scope: !5030)
!5032 = !DILocation(line: 200, column: 9, scope: !5024)
!5033 = !DILocation(line: 201, column: 19, scope: !5034)
!5034 = distinct !DILexicalBlock(scope: !5035, file: !645, line: 201, column: 17)
!5035 = distinct !DILexicalBlock(scope: !5030, file: !645, line: 200, column: 34)
!5036 = !DILocation(line: 201, column: 17, scope: !5034)
!5037 = !DILocation(line: 201, column: 25, scope: !5034)
!5038 = !DILocation(line: 201, column: 22, scope: !5034)
!5039 = !DILocation(line: 201, column: 17, scope: !5035)
!5040 = !DILocation(line: 203, column: 26, scope: !5041)
!5041 = distinct !DILexicalBlock(scope: !5042, file: !645, line: 203, column: 17)
!5042 = distinct !DILexicalBlock(scope: !5034, file: !645, line: 201, column: 31)
!5043 = !DILocation(line: 203, column: 24, scope: !5041)
!5044 = !DILocation(line: 203, column: 22, scope: !5041)
!5045 = !DILocation(line: 203, column: 33, scope: !5046)
!5046 = !DILexicalBlockFile(scope: !5047, file: !645, discriminator: 2)
!5047 = !DILexicalBlockFile(scope: !5048, file: !645, discriminator: 1)
!5048 = distinct !DILexicalBlock(scope: !5041, file: !645, line: 203, column: 17)
!5049 = !DILocation(line: 203, column: 35, scope: !5048)
!5050 = !DILocation(line: 203, column: 17, scope: !5041)
!5051 = !DILocation(line: 204, column: 27, scope: !5052)
!5052 = distinct !DILexicalBlock(scope: !5048, file: !645, line: 204, column: 25)
!5053 = !DILocation(line: 204, column: 29, scope: !5052)
!5054 = !DILocation(line: 204, column: 28, scope: !5052)
!5055 = !DILocation(line: 204, column: 25, scope: !5052)
!5056 = !DILocation(line: 204, column: 37, scope: !5052)
!5057 = !DILocation(line: 204, column: 35, scope: !5052)
!5058 = !DILocation(line: 204, column: 32, scope: !5052)
!5059 = !DILocation(line: 204, column: 25, scope: !5048)
!5060 = !DILocation(line: 205, column: 25, scope: !5052)
!5061 = !DILocation(line: 204, column: 38, scope: !5062)
!5062 = !DILexicalBlockFile(scope: !5052, file: !645, discriminator: 1)
!5063 = !DILocation(line: 203, column: 41, scope: !5048)
!5064 = !DILocation(line: 203, column: 17, scope: !5048)
!5065 = !DILocation(line: 206, column: 21, scope: !5066)
!5066 = distinct !DILexicalBlock(scope: !5042, file: !645, line: 206, column: 21)
!5067 = !DILocation(line: 206, column: 23, scope: !5066)
!5068 = !DILocation(line: 206, column: 21, scope: !5042)
!5069 = !DILocation(line: 208, column: 28, scope: !5066)
!5070 = !DILocation(line: 208, column: 21, scope: !5066)
!5071 = !DILocation(line: 210, column: 21, scope: !5072)
!5072 = distinct !DILexicalBlock(scope: !5042, file: !645, line: 210, column: 21)
!5073 = !DILocation(line: 210, column: 23, scope: !5072)
!5074 = !DILocation(line: 210, column: 27, scope: !5072)
!5075 = !DILocation(line: 210, column: 33, scope: !5076)
!5076 = !DILexicalBlockFile(scope: !5072, file: !645, discriminator: 1)
!5077 = !DILocation(line: 210, column: 52, scope: !5072)
!5078 = !DILocation(line: 210, column: 53, scope: !5072)
!5079 = !DILocation(line: 210, column: 50, scope: !5072)
!5080 = !DILocation(line: 210, column: 49, scope: !5072)
!5081 = !DILocation(line: 210, column: 58, scope: !5072)
!5082 = !DILocation(line: 210, column: 45, scope: !5072)
!5083 = !DILocation(line: 210, column: 38, scope: !5072)
!5084 = !DILocation(line: 210, column: 21, scope: !5042)
!5085 = !DILocation(line: 211, column: 25, scope: !5072)
!5086 = !DILocation(line: 211, column: 29, scope: !5072)
!5087 = !DILocation(line: 211, column: 27, scope: !5072)
!5088 = !DILocation(line: 211, column: 23, scope: !5072)
!5089 = !DILocation(line: 211, column: 21, scope: !5072)
!5090 = !DILocation(line: 213, column: 25, scope: !5072)
!5091 = !DILocation(line: 213, column: 29, scope: !5072)
!5092 = !DILocation(line: 213, column: 27, scope: !5072)
!5093 = !DILocation(line: 213, column: 23, scope: !5072)
!5094 = !DILocation(line: 214, column: 13, scope: !5042)
!5095 = !DILocation(line: 216, column: 21, scope: !5096)
!5096 = distinct !DILexicalBlock(scope: !5097, file: !645, line: 216, column: 21)
!5097 = distinct !DILexicalBlock(scope: !5034, file: !645, line: 214, column: 20)
!5098 = !DILocation(line: 216, column: 23, scope: !5096)
!5099 = !DILocation(line: 216, column: 27, scope: !5096)
!5100 = !DILocation(line: 216, column: 33, scope: !5101)
!5101 = !DILexicalBlockFile(scope: !5096, file: !645, discriminator: 1)
!5102 = !DILocation(line: 216, column: 52, scope: !5096)
!5103 = !DILocation(line: 216, column: 53, scope: !5096)
!5104 = !DILocation(line: 216, column: 50, scope: !5096)
!5105 = !DILocation(line: 216, column: 49, scope: !5096)
!5106 = !DILocation(line: 216, column: 58, scope: !5096)
!5107 = !DILocation(line: 216, column: 45, scope: !5096)
!5108 = !DILocation(line: 216, column: 38, scope: !5096)
!5109 = !DILocation(line: 216, column: 21, scope: !5097)
!5110 = !DILocation(line: 217, column: 25, scope: !5096)
!5111 = !DILocation(line: 217, column: 29, scope: !5096)
!5112 = !DILocation(line: 217, column: 27, scope: !5096)
!5113 = !DILocation(line: 217, column: 23, scope: !5096)
!5114 = !DILocation(line: 217, column: 21, scope: !5096)
!5115 = !DILocation(line: 219, column: 9, scope: !5035)
!5116 = !DILocation(line: 200, column: 30, scope: !5030)
!5117 = !DILocation(line: 200, column: 9, scope: !5030)
!5118 = !DILocation(line: 222, column: 9, scope: !5119)
!5119 = distinct !DILexicalBlock(scope: !644, file: !645, line: 222, column: 9)
!5120 = !DILocation(line: 222, column: 14, scope: !5119)
!5121 = !DILocation(line: 222, column: 9, scope: !644)
!5122 = !DILocation(line: 223, column: 9, scope: !5119)
!5123 = !DILocation(line: 224, column: 12, scope: !644)
!5124 = !DILocation(line: 224, column: 5, scope: !644)
!5125 = !DILocation(line: 225, column: 1, scope: !644)
!5126 = !DILocation(line: 37, column: 47, scope: !671)
!5127 = !DILocation(line: 37, column: 61, scope: !671)
!5128 = !DILocation(line: 38, column: 41, scope: !671)
!5129 = !DILocation(line: 38, column: 59, scope: !671)
!5130 = !DILocation(line: 39, column: 47, scope: !671)
!5131 = !DILocation(line: 39, column: 61, scope: !671)
!5132 = !DILocation(line: 41, column: 9, scope: !683)
!5133 = !DILocation(line: 41, column: 14, scope: !683)
!5134 = !DILocation(line: 41, column: 9, scope: !671)
!5135 = !DILocation(line: 42, column: 9, scope: !682)
!5136 = !DILocation(line: 42, column: 21, scope: !682)
!5137 = !DILocation(line: 42, column: 27, scope: !682)
!5138 = !DILocation(line: 43, column: 9, scope: !682)
!5139 = !DILocation(line: 43, column: 21, scope: !682)
!5140 = !DILocation(line: 43, column: 25, scope: !682)
!5141 = !DILocation(line: 43, column: 29, scope: !682)
!5142 = !DILocation(line: 43, column: 27, scope: !682)
!5143 = !DILocation(line: 44, column: 9, scope: !682)
!5144 = !DILocation(line: 44, column: 16, scope: !5145)
!5145 = !DILexicalBlockFile(scope: !682, file: !645, discriminator: 1)
!5146 = !DILocation(line: 44, column: 22, scope: !682)
!5147 = !DILocation(line: 44, column: 20, scope: !682)
!5148 = !DILocation(line: 45, column: 13, scope: !686)
!5149 = !DILocation(line: 45, column: 19, scope: !686)
!5150 = !DILocation(line: 45, column: 53, scope: !686)
!5151 = !DILocation(line: 45, column: 58, scope: !686)
!5152 = !DILocation(line: 45, column: 67, scope: !686)
!5153 = !DILocation(line: 45, column: 71, scope: !686)
!5154 = !DILocation(line: 45, column: 69, scope: !686)
!5155 = !DILocation(line: 45, column: 76, scope: !686)
!5156 = !DILocation(line: 45, column: 31, scope: !686)
!5157 = !DILocation(line: 46, column: 17, scope: !5158)
!5158 = distinct !DILexicalBlock(scope: !686, file: !645, line: 46, column: 17)
!5159 = !DILocation(line: 46, column: 27, scope: !5158)
!5160 = !DILocation(line: 46, column: 17, scope: !686)
!5161 = !DILocation(line: 47, column: 17, scope: !5158)
!5162 = !DILocation(line: 48, column: 59, scope: !686)
!5163 = !DILocation(line: 48, column: 44, scope: !686)
!5164 = !DILocation(line: 48, column: 35, scope: !686)
!5165 = !DILocation(line: 48, column: 17, scope: !686)
!5166 = !DILocation(line: 50, column: 25, scope: !5167)
!5167 = distinct !DILexicalBlock(scope: !686, file: !645, line: 49, column: 17)
!5168 = !DILocation(line: 50, column: 31, scope: !5167)
!5169 = !DILocation(line: 50, column: 29, scope: !5167)
!5170 = !DILocation(line: 50, column: 17, scope: !5167)
!5171 = !DILocation(line: 53, column: 9, scope: !682)
!5172 = !DILocation(line: 54, column: 9, scope: !682)
!5173 = !DILocation(line: 55, column: 5, scope: !683)
!5174 = !DILocation(line: 60, column: 14, scope: !690)
!5175 = !DILocation(line: 60, column: 19, scope: !690)
!5176 = !DILocation(line: 60, column: 14, scope: !683)
!5177 = !DILocation(line: 61, column: 9, scope: !689)
!5178 = !DILocation(line: 61, column: 16, scope: !5179)
!5179 = !DILexicalBlockFile(scope: !689, file: !645, discriminator: 1)
!5180 = !DILocation(line: 61, column: 18, scope: !689)
!5181 = !DILocation(line: 62, column: 13, scope: !688)
!5182 = !DILocation(line: 62, column: 25, scope: !688)
!5183 = !DILocation(line: 63, column: 13, scope: !688)
!5184 = !DILocation(line: 63, column: 19, scope: !688)
!5185 = !DILocation(line: 63, column: 54, scope: !688)
!5186 = !DILocation(line: 63, column: 57, scope: !688)
!5187 = !DILocation(line: 63, column: 65, scope: !688)
!5188 = !DILocation(line: 63, column: 67, scope: !688)
!5189 = !DILocation(line: 63, column: 31, scope: !688)
!5190 = !DILocation(line: 64, column: 17, scope: !5191)
!5191 = distinct !DILexicalBlock(scope: !688, file: !645, line: 64, column: 17)
!5192 = !DILocation(line: 64, column: 27, scope: !5191)
!5193 = !DILocation(line: 64, column: 17, scope: !688)
!5194 = !DILocation(line: 65, column: 17, scope: !5191)
!5195 = !DILocation(line: 66, column: 61, scope: !688)
!5196 = !DILocation(line: 66, column: 46, scope: !688)
!5197 = !DILocation(line: 66, column: 37, scope: !688)
!5198 = !DILocation(line: 66, column: 19, scope: !688)
!5199 = !DILocation(line: 67, column: 17, scope: !688)
!5200 = !DILocation(line: 67, column: 25, scope: !688)
!5201 = !DILocation(line: 67, column: 23, scope: !688)
!5202 = !DILocation(line: 67, column: 15, scope: !688)
!5203 = !DILocation(line: 69, column: 24, scope: !5204)
!5204 = distinct !DILexicalBlock(scope: !688, file: !645, line: 68, column: 17)
!5205 = !DILocation(line: 69, column: 17, scope: !5204)
!5206 = !DILocation(line: 71, column: 9, scope: !689)
!5207 = !DILocation(line: 72, column: 9, scope: !689)
!5208 = !DILocation(line: 77, column: 9, scope: !5209)
!5209 = distinct !DILexicalBlock(scope: !690, file: !645, line: 75, column: 10)
!5210 = !DILocation(line: 81, column: 1, scope: !671)
!5211 = !DILocation(line: 394, column: 40, scope: !711)
!5212 = !DILocation(line: 394, column: 56, scope: !711)
!5213 = !DILocation(line: 396, column: 11, scope: !717)
!5214 = !DILocation(line: 396, column: 19, scope: !717)
!5215 = !DILocation(line: 396, column: 28, scope: !717)
!5216 = !{!2206, !2120, i64 96}
!5217 = !DILocation(line: 396, column: 41, scope: !717)
!5218 = !DILocation(line: 396, column: 55, scope: !717)
!5219 = !DILocation(line: 396, column: 59, scope: !5220)
!5220 = !DILexicalBlockFile(scope: !717, file: !458, discriminator: 1)
!5221 = !DILocation(line: 396, column: 67, scope: !717)
!5222 = !DILocation(line: 396, column: 76, scope: !717)
!5223 = !DILocation(line: 396, column: 90, scope: !717)
!5224 = !{!5225, !2120, i64 264}
!5225 = !{!"", !2120, i64 0, !2120, i64 8, !2120, i64 16, !2120, i64 24, !2120, i64 32, !2120, i64 40, !2120, i64 48, !2120, i64 56, !2120, i64 64, !2120, i64 72, !2120, i64 80, !2120, i64 88, !2120, i64 96, !2120, i64 104, !2120, i64 112, !2120, i64 120, !2120, i64 128, !2120, i64 136, !2120, i64 144, !2120, i64 152, !2120, i64 160, !2120, i64 168, !2120, i64 176, !2120, i64 184, !2120, i64 192, !2120, i64 200, !2120, i64 208, !2120, i64 216, !2120, i64 224, !2120, i64 232, !2120, i64 240, !2120, i64 248, !2120, i64 256, !2120, i64 264}
!5226 = !DILocation(line: 396, column: 99, scope: !717)
!5227 = !DILocation(line: 396, column: 9, scope: !711)
!5228 = !DILocation(line: 397, column: 9, scope: !716)
!5229 = !DILocation(line: 397, column: 20, scope: !716)
!5230 = !DILocation(line: 397, column: 43, scope: !716)
!5231 = !DILocation(line: 397, column: 50, scope: !716)
!5232 = !DILocation(line: 397, column: 24, scope: !716)
!5233 = !DILocation(line: 399, column: 13, scope: !5234)
!5234 = distinct !DILexicalBlock(scope: !716, file: !458, line: 399, column: 13)
!5235 = !DILocation(line: 399, column: 15, scope: !5234)
!5236 = !DILocation(line: 399, column: 21, scope: !5234)
!5237 = !DILocation(line: 399, column: 24, scope: !5238)
!5238 = !DILexicalBlockFile(scope: !5234, file: !458, discriminator: 1)
!5239 = !DILocation(line: 399, column: 13, scope: !716)
!5240 = !DILocation(line: 400, column: 13, scope: !5234)
!5241 = !DILocation(line: 402, column: 13, scope: !5242)
!5242 = distinct !DILexicalBlock(scope: !716, file: !458, line: 402, column: 13)
!5243 = !DILocation(line: 402, column: 15, scope: !5242)
!5244 = !DILocation(line: 402, column: 13, scope: !716)
!5245 = !DILocation(line: 403, column: 50, scope: !5242)
!5246 = !DILocation(line: 403, column: 35, scope: !5242)
!5247 = !DILocation(line: 403, column: 58, scope: !5242)
!5248 = !DILocation(line: 403, column: 15, scope: !5242)
!5249 = !DILocation(line: 403, column: 13, scope: !5242)
!5250 = !DILocation(line: 405, column: 13, scope: !5251)
!5251 = distinct !DILexicalBlock(scope: !716, file: !458, line: 405, column: 13)
!5252 = !DILocation(line: 405, column: 15, scope: !5251)
!5253 = !DILocation(line: 405, column: 19, scope: !5251)
!5254 = !DILocation(line: 405, column: 22, scope: !5255)
!5255 = !DILexicalBlockFile(scope: !5251, file: !458, discriminator: 1)
!5256 = !DILocation(line: 405, column: 44, scope: !5251)
!5257 = !DILocation(line: 405, column: 29, scope: !5251)
!5258 = !DILocation(line: 405, column: 52, scope: !5251)
!5259 = !DILocation(line: 405, column: 24, scope: !5251)
!5260 = !DILocation(line: 405, column: 13, scope: !716)
!5261 = !DILocation(line: 406, column: 29, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5251, file: !458, line: 405, column: 62)
!5263 = !DILocation(line: 406, column: 13, scope: !5262)
!5264 = !DILocation(line: 407, column: 13, scope: !5262)
!5265 = !DILocation(line: 409, column: 168, scope: !716)
!5266 = !DILocation(line: 409, column: 80, scope: !716)
!5267 = !DILocation(line: 409, column: 65, scope: !716)
!5268 = !DILocation(line: 409, column: 88, scope: !716)
!5269 = !DILocation(line: 409, column: 63, scope: !716)
!5270 = !DILocation(line: 409, column: 122, scope: !5271)
!5271 = !DILexicalBlockFile(scope: !716, file: !458, discriminator: 1)
!5272 = !DILocation(line: 409, column: 130, scope: !716)
!5273 = !DILocation(line: 409, column: 63, scope: !5274)
!5274 = !DILexicalBlockFile(scope: !716, file: !458, discriminator: 2)
!5275 = !DILocation(line: 409, column: 48, scope: !5276)
!5276 = !DILexicalBlockFile(scope: !5277, file: !458, discriminator: 4)
!5277 = !DILexicalBlockFile(scope: !716, file: !458, discriminator: 3)
!5278 = !DILocation(line: 409, column: 32, scope: !716)
!5279 = !DILocation(line: 409, column: 16, scope: !716)
!5280 = !DILocation(line: 409, column: 9, scope: !716)
!5281 = !DILocation(line: 410, column: 5, scope: !717)
!5282 = !DILocation(line: 411, column: 29, scope: !720)
!5283 = !DILocation(line: 411, column: 38, scope: !720)
!5284 = !DILocation(line: 411, column: 47, scope: !720)
!5285 = !DILocation(line: 411, column: 14, scope: !717)
!5286 = !DILocation(line: 412, column: 9, scope: !719)
!5287 = !DILocation(line: 412, column: 20, scope: !719)
!5288 = !DILocation(line: 412, column: 27, scope: !719)
!5289 = !DILocation(line: 412, column: 33, scope: !719)
!5290 = !DILocation(line: 412, column: 39, scope: !719)
!5291 = !DILocation(line: 412, column: 52, scope: !719)
!5292 = !DILocation(line: 412, column: 57, scope: !719)
!5293 = !DILocation(line: 413, column: 34, scope: !5294)
!5294 = distinct !DILexicalBlock(scope: !719, file: !458, line: 413, column: 13)
!5295 = !DILocation(line: 414, column: 66, scope: !5294)
!5296 = !DILocation(line: 414, column: 51, scope: !5294)
!5297 = !DILocation(line: 414, column: 74, scope: !5294)
!5298 = !DILocation(line: 413, column: 13, scope: !5294)
!5299 = !DILocation(line: 415, column: 70, scope: !5294)
!5300 = !DILocation(line: 413, column: 13, scope: !719)
!5301 = !DILocation(line: 416, column: 13, scope: !5302)
!5302 = distinct !DILexicalBlock(scope: !5294, file: !458, line: 415, column: 75)
!5303 = !DILocation(line: 419, column: 13, scope: !729)
!5304 = !DILocation(line: 419, column: 25, scope: !729)
!5305 = !DILocation(line: 419, column: 13, scope: !719)
!5306 = !DILocation(line: 420, column: 20, scope: !729)
!5307 = !DILocation(line: 420, column: 13, scope: !729)
!5308 = !DILocation(line: 421, column: 18, scope: !728)
!5309 = !DILocation(line: 421, column: 23, scope: !728)
!5310 = !DILocation(line: 421, column: 18, scope: !729)
!5311 = !DILocation(line: 423, column: 49, scope: !5312)
!5312 = distinct !DILexicalBlock(scope: !728, file: !458, line: 421, column: 29)
!5313 = !DILocation(line: 423, column: 34, scope: !5312)
!5314 = !DILocation(line: 423, column: 57, scope: !5312)
!5315 = !DILocation(line: 423, column: 32, scope: !5312)
!5316 = !DILocation(line: 423, column: 91, scope: !5317)
!5317 = !DILexicalBlockFile(scope: !5312, file: !458, discriminator: 1)
!5318 = !DILocation(line: 423, column: 99, scope: !5312)
!5319 = !DILocation(line: 423, column: 32, scope: !5320)
!5320 = !DILexicalBlockFile(scope: !5312, file: !458, discriminator: 2)
!5321 = !DILocation(line: 423, column: 139, scope: !5322)
!5322 = !DILexicalBlockFile(scope: !5323, file: !458, discriminator: 4)
!5323 = !DILexicalBlockFile(scope: !5312, file: !458, discriminator: 3)
!5324 = !DILocation(line: 423, column: 137, scope: !5312)
!5325 = !DILocation(line: 423, column: 146, scope: !5312)
!5326 = !DILocation(line: 422, column: 20, scope: !5312)
!5327 = !DILocation(line: 422, column: 13, scope: !5312)
!5328 = !DILocation(line: 426, column: 13, scope: !727)
!5329 = !DILocation(line: 426, column: 19, scope: !727)
!5330 = !DILocation(line: 426, column: 64, scope: !727)
!5331 = !DILocation(line: 426, column: 49, scope: !727)
!5332 = !DILocation(line: 426, column: 72, scope: !727)
!5333 = !DILocation(line: 426, column: 47, scope: !727)
!5334 = !DILocation(line: 426, column: 106, scope: !5335)
!5335 = !DILexicalBlockFile(scope: !727, file: !458, discriminator: 1)
!5336 = !DILocation(line: 426, column: 114, scope: !727)
!5337 = !DILocation(line: 426, column: 47, scope: !5338)
!5338 = !DILexicalBlockFile(scope: !727, file: !458, discriminator: 2)
!5339 = !DILocation(line: 426, column: 19, scope: !5340)
!5340 = !DILexicalBlockFile(scope: !5341, file: !458, discriminator: 4)
!5341 = !DILexicalBlockFile(scope: !727, file: !458, discriminator: 3)
!5342 = !DILocation(line: 427, column: 13, scope: !727)
!5343 = !DILocation(line: 427, column: 19, scope: !727)
!5344 = !DILocation(line: 428, column: 13, scope: !727)
!5345 = !DILocation(line: 428, column: 23, scope: !727)
!5346 = !DILocation(line: 430, column: 64, scope: !727)
!5347 = !DILocation(line: 430, column: 22, scope: !727)
!5348 = !DILocation(line: 430, column: 20, scope: !727)
!5349 = !DILocation(line: 431, column: 17, scope: !5350)
!5350 = distinct !DILexicalBlock(scope: !727, file: !458, line: 431, column: 17)
!5351 = !DILocation(line: 431, column: 24, scope: !5350)
!5352 = !DILocation(line: 431, column: 17, scope: !727)
!5353 = !DILocation(line: 432, column: 17, scope: !5350)
!5354 = !DILocation(line: 434, column: 58, scope: !727)
!5355 = !DILocation(line: 434, column: 43, scope: !727)
!5356 = !DILocation(line: 434, column: 68, scope: !727)
!5357 = !DILocation(line: 434, column: 41, scope: !727)
!5358 = !DILocation(line: 434, column: 102, scope: !5335)
!5359 = !DILocation(line: 434, column: 80, scope: !727)
!5360 = !DILocation(line: 434, column: 112, scope: !727)
!5361 = !DILocation(line: 434, column: 41, scope: !5338)
!5362 = !DILocation(line: 434, column: 24, scope: !5340)
!5363 = !DILocation(line: 435, column: 24, scope: !5364)
!5364 = distinct !DILexicalBlock(scope: !727, file: !458, line: 435, column: 13)
!5365 = !DILocation(line: 435, column: 22, scope: !5364)
!5366 = !DILocation(line: 435, column: 33, scope: !5364)
!5367 = !DILocation(line: 435, column: 18, scope: !5364)
!5368 = !DILocation(line: 435, column: 38, scope: !5369)
!5369 = !DILexicalBlockFile(scope: !5370, file: !458, discriminator: 2)
!5370 = !DILexicalBlockFile(scope: !5371, file: !458, discriminator: 1)
!5371 = distinct !DILexicalBlock(scope: !5364, file: !458, line: 435, column: 13)
!5372 = !DILocation(line: 435, column: 42, scope: !5371)
!5373 = !DILocation(line: 435, column: 40, scope: !5371)
!5374 = !DILocation(line: 435, column: 13, scope: !5364)
!5375 = !DILocation(line: 437, column: 49, scope: !5376)
!5376 = distinct !DILexicalBlock(scope: !5371, file: !458, line: 436, column: 36)
!5377 = !DILocation(line: 437, column: 38, scope: !5376)
!5378 = !DILocation(line: 437, column: 33, scope: !5376)
!5379 = !DILocation(line: 437, column: 22, scope: !5376)
!5380 = !DILocation(line: 437, column: 36, scope: !5376)
!5381 = !DILocation(line: 438, column: 13, scope: !5376)
!5382 = !DILocation(line: 436, column: 25, scope: !5371)
!5383 = !DILocation(line: 436, column: 22, scope: !5371)
!5384 = !DILocation(line: 436, column: 32, scope: !5371)
!5385 = !DILocation(line: 435, column: 13, scope: !5371)
!5386 = !DILocation(line: 439, column: 20, scope: !727)
!5387 = !DILocation(line: 439, column: 13, scope: !727)
!5388 = !DILocation(line: 440, column: 9, scope: !728)
!5389 = !DILocation(line: 441, column: 5, scope: !720)
!5390 = !DILocation(line: 443, column: 25, scope: !5391)
!5391 = distinct !DILexicalBlock(scope: !720, file: !458, line: 442, column: 10)
!5392 = !DILocation(line: 443, column: 9, scope: !5391)
!5393 = !DILocation(line: 444, column: 9, scope: !5391)
!5394 = !DILocation(line: 446, column: 1, scope: !711)
!5395 = !DILocation(line: 605, column: 44, scope: !732)
!5396 = !DILocation(line: 605, column: 60, scope: !732)
!5397 = !DILocation(line: 605, column: 77, scope: !732)
!5398 = !DILocation(line: 607, column: 5, scope: !732)
!5399 = !DILocation(line: 607, column: 16, scope: !732)
!5400 = !DILocation(line: 607, column: 23, scope: !732)
!5401 = !DILocation(line: 607, column: 29, scope: !732)
!5402 = !DILocation(line: 607, column: 35, scope: !732)
!5403 = !DILocation(line: 607, column: 45, scope: !732)
!5404 = !DILocation(line: 608, column: 5, scope: !732)
!5405 = !DILocation(line: 608, column: 11, scope: !732)
!5406 = !DILocation(line: 608, column: 17, scope: !732)
!5407 = !DILocation(line: 609, column: 43, scope: !732)
!5408 = !DILocation(line: 609, column: 28, scope: !732)
!5409 = !DILocation(line: 609, column: 51, scope: !732)
!5410 = !DILocation(line: 609, column: 26, scope: !732)
!5411 = !DILocation(line: 609, column: 85, scope: !5412)
!5412 = !DILexicalBlockFile(scope: !732, file: !458, discriminator: 1)
!5413 = !DILocation(line: 609, column: 93, scope: !732)
!5414 = !DILocation(line: 609, column: 26, scope: !5415)
!5415 = !DILexicalBlockFile(scope: !732, file: !458, discriminator: 2)
!5416 = !DILocation(line: 609, column: 9, scope: !5417)
!5417 = !DILexicalBlockFile(scope: !5418, file: !458, discriminator: 4)
!5418 = !DILexicalBlockFile(scope: !732, file: !458, discriminator: 3)
!5419 = !DILocation(line: 611, column: 11, scope: !748)
!5420 = !DILocation(line: 611, column: 19, scope: !748)
!5421 = !DILocation(line: 611, column: 28, scope: !748)
!5422 = !DILocation(line: 611, column: 41, scope: !748)
!5423 = !DILocation(line: 611, column: 55, scope: !748)
!5424 = !DILocation(line: 611, column: 59, scope: !5425)
!5425 = !DILexicalBlockFile(scope: !748, file: !458, discriminator: 1)
!5426 = !DILocation(line: 611, column: 67, scope: !748)
!5427 = !DILocation(line: 611, column: 76, scope: !748)
!5428 = !DILocation(line: 611, column: 90, scope: !748)
!5429 = !DILocation(line: 611, column: 99, scope: !748)
!5430 = !DILocation(line: 611, column: 9, scope: !732)
!5431 = !DILocation(line: 612, column: 9, scope: !747)
!5432 = !DILocation(line: 612, column: 20, scope: !747)
!5433 = !DILocation(line: 612, column: 43, scope: !747)
!5434 = !DILocation(line: 612, column: 50, scope: !747)
!5435 = !DILocation(line: 612, column: 24, scope: !747)
!5436 = !DILocation(line: 614, column: 13, scope: !5437)
!5437 = distinct !DILexicalBlock(scope: !747, file: !458, line: 614, column: 13)
!5438 = !DILocation(line: 614, column: 15, scope: !5437)
!5439 = !DILocation(line: 614, column: 21, scope: !5437)
!5440 = !DILocation(line: 614, column: 24, scope: !5441)
!5441 = !DILexicalBlockFile(scope: !5437, file: !458, discriminator: 1)
!5442 = !DILocation(line: 614, column: 13, scope: !747)
!5443 = !DILocation(line: 615, column: 13, scope: !5437)
!5444 = !DILocation(line: 617, column: 13, scope: !5445)
!5445 = distinct !DILexicalBlock(scope: !747, file: !458, line: 617, column: 13)
!5446 = !DILocation(line: 617, column: 15, scope: !5445)
!5447 = !DILocation(line: 617, column: 13, scope: !747)
!5448 = !DILocation(line: 618, column: 50, scope: !5445)
!5449 = !DILocation(line: 618, column: 35, scope: !5445)
!5450 = !DILocation(line: 618, column: 58, scope: !5445)
!5451 = !DILocation(line: 618, column: 15, scope: !5445)
!5452 = !DILocation(line: 618, column: 13, scope: !5445)
!5453 = !DILocation(line: 620, column: 13, scope: !5454)
!5454 = distinct !DILexicalBlock(scope: !747, file: !458, line: 620, column: 13)
!5455 = !DILocation(line: 620, column: 15, scope: !5454)
!5456 = !DILocation(line: 620, column: 19, scope: !5454)
!5457 = !DILocation(line: 620, column: 22, scope: !5458)
!5458 = !DILexicalBlockFile(scope: !5454, file: !458, discriminator: 1)
!5459 = !DILocation(line: 620, column: 44, scope: !5454)
!5460 = !DILocation(line: 620, column: 29, scope: !5454)
!5461 = !DILocation(line: 620, column: 52, scope: !5454)
!5462 = !DILocation(line: 620, column: 24, scope: !5454)
!5463 = !DILocation(line: 620, column: 13, scope: !747)
!5464 = !DILocation(line: 621, column: 29, scope: !5465)
!5465 = distinct !DILexicalBlock(scope: !5454, file: !458, line: 620, column: 62)
!5466 = !DILocation(line: 621, column: 13, scope: !5465)
!5467 = !DILocation(line: 622, column: 13, scope: !5465)
!5468 = !DILocation(line: 625, column: 13, scope: !751)
!5469 = !DILocation(line: 625, column: 20, scope: !751)
!5470 = !DILocation(line: 625, column: 13, scope: !747)
!5471 = !DILocation(line: 627, column: 21, scope: !5472)
!5472 = distinct !DILexicalBlock(scope: !751, file: !458, line: 625, column: 35)
!5473 = !DILocation(line: 627, column: 19, scope: !5472)
!5474 = !DILocation(line: 628, column: 20, scope: !5472)
!5475 = !DILocation(line: 628, column: 22, scope: !5472)
!5476 = !DILocation(line: 628, column: 18, scope: !5472)
!5477 = !DILocation(line: 629, column: 18, scope: !5472)
!5478 = !DILocation(line: 630, column: 22, scope: !5472)
!5479 = !DILocation(line: 631, column: 9, scope: !5472)
!5480 = !DILocation(line: 633, column: 13, scope: !750)
!5481 = !DILocation(line: 633, column: 17, scope: !750)
!5482 = !DILocation(line: 634, column: 32, scope: !5483)
!5483 = distinct !DILexicalBlock(scope: !750, file: !458, line: 634, column: 17)
!5484 = !DILocation(line: 634, column: 18, scope: !5483)
!5485 = !DILocation(line: 634, column: 17, scope: !750)
!5486 = !DILocation(line: 635, column: 17, scope: !5483)
!5487 = !DILocation(line: 636, column: 28, scope: !750)
!5488 = !DILocation(line: 636, column: 22, scope: !750)
!5489 = !DILocation(line: 636, column: 17, scope: !750)
!5490 = !DILocation(line: 636, column: 13, scope: !750)
!5491 = !DILocation(line: 636, column: 20, scope: !750)
!5492 = !DILocation(line: 637, column: 13, scope: !750)
!5493 = !DILocation(line: 638, column: 9, scope: !751)
!5494 = !DILocation(line: 639, column: 5, scope: !748)
!5495 = !DILocation(line: 639, column: 5, scope: !5425)
!5496 = !DILocation(line: 639, column: 5, scope: !747)
!5497 = !DILocation(line: 640, column: 29, scope: !5498)
!5498 = distinct !DILexicalBlock(scope: !748, file: !458, line: 640, column: 14)
!5499 = !DILocation(line: 640, column: 38, scope: !5498)
!5500 = !DILocation(line: 640, column: 47, scope: !5498)
!5501 = !DILocation(line: 640, column: 14, scope: !748)
!5502 = !DILocation(line: 641, column: 34, scope: !5503)
!5503 = distinct !DILexicalBlock(scope: !5504, file: !458, line: 641, column: 13)
!5504 = distinct !DILexicalBlock(scope: !5498, file: !458, line: 640, column: 66)
!5505 = !DILocation(line: 642, column: 66, scope: !5503)
!5506 = !DILocation(line: 642, column: 51, scope: !5503)
!5507 = !DILocation(line: 642, column: 74, scope: !5503)
!5508 = !DILocation(line: 641, column: 13, scope: !5503)
!5509 = !DILocation(line: 643, column: 67, scope: !5503)
!5510 = !DILocation(line: 641, column: 13, scope: !5504)
!5511 = !DILocation(line: 644, column: 13, scope: !5512)
!5512 = distinct !DILexicalBlock(scope: !5503, file: !458, line: 643, column: 72)
!5513 = !DILocation(line: 646, column: 5, scope: !5504)
!5514 = !DILocation(line: 648, column: 25, scope: !5515)
!5515 = distinct !DILexicalBlock(scope: !5498, file: !458, line: 647, column: 10)
!5516 = !DILocation(line: 648, column: 9, scope: !5515)
!5517 = !DILocation(line: 649, column: 9, scope: !5515)
!5518 = !DILocation(line: 652, column: 9, scope: !755)
!5519 = !DILocation(line: 652, column: 16, scope: !755)
!5520 = !DILocation(line: 652, column: 9, scope: !732)
!5521 = !DILocation(line: 653, column: 15, scope: !5522)
!5522 = distinct !DILexicalBlock(scope: !755, file: !458, line: 652, column: 31)
!5523 = !DILocation(line: 654, column: 16, scope: !5522)
!5524 = !DILocation(line: 655, column: 5, scope: !5522)
!5525 = !DILocation(line: 656, column: 14, scope: !754)
!5526 = !DILocation(line: 656, column: 36, scope: !754)
!5527 = !DILocation(line: 656, column: 24, scope: !754)
!5528 = !DILocation(line: 656, column: 21, scope: !754)
!5529 = !DILocation(line: 656, column: 41, scope: !754)
!5530 = !DILocation(line: 656, column: 60, scope: !5531)
!5531 = !DILexicalBlockFile(scope: !754, file: !458, discriminator: 1)
!5532 = !DILocation(line: 656, column: 70, scope: !754)
!5533 = !DILocation(line: 656, column: 79, scope: !754)
!5534 = !DILocation(line: 656, column: 102, scope: !754)
!5535 = !DILocation(line: 656, column: 136, scope: !5536)
!5536 = !DILexicalBlockFile(scope: !754, file: !458, discriminator: 2)
!5537 = !DILocation(line: 656, column: 146, scope: !754)
!5538 = !DILocation(line: 656, column: 105, scope: !754)
!5539 = !DILocation(line: 656, column: 14, scope: !755)
!5540 = !DILocation(line: 657, column: 9, scope: !753)
!5541 = !DILocation(line: 657, column: 13, scope: !753)
!5542 = !DILocation(line: 658, column: 28, scope: !5543)
!5543 = distinct !DILexicalBlock(scope: !753, file: !458, line: 658, column: 13)
!5544 = !DILocation(line: 658, column: 13, scope: !5543)
!5545 = !DILocation(line: 658, column: 36, scope: !5543)
!5546 = !DILocation(line: 658, column: 56, scope: !5547)
!5547 = !DILexicalBlockFile(scope: !5543, file: !458, discriminator: 1)
!5548 = !DILocation(line: 658, column: 66, scope: !5543)
!5549 = !DILocation(line: 658, column: 77, scope: !5543)
!5550 = !DILocation(line: 658, column: 86, scope: !5543)
!5551 = !DILocation(line: 658, column: 103, scope: !5543)
!5552 = !DILocation(line: 658, column: 13, scope: !753)
!5553 = !DILocation(line: 659, column: 29, scope: !5554)
!5554 = distinct !DILexicalBlock(scope: !5543, file: !458, line: 658, column: 110)
!5555 = !DILocation(line: 659, column: 13, scope: !5554)
!5556 = !DILocation(line: 662, column: 13, scope: !5554)
!5557 = !DILocation(line: 665, column: 41, scope: !753)
!5558 = !DILocation(line: 665, column: 18, scope: !753)
!5559 = !DILocation(line: 665, column: 16, scope: !753)
!5560 = !DILocation(line: 666, column: 13, scope: !5561)
!5561 = distinct !DILexicalBlock(scope: !753, file: !458, line: 666, column: 13)
!5562 = !DILocation(line: 666, column: 20, scope: !5561)
!5563 = !DILocation(line: 666, column: 13, scope: !753)
!5564 = !DILocation(line: 667, column: 13, scope: !5561)
!5565 = !DILocation(line: 668, column: 39, scope: !753)
!5566 = !DILocation(line: 668, column: 45, scope: !753)
!5567 = !DILocation(line: 668, column: 52, scope: !753)
!5568 = !DILocation(line: 668, column: 15, scope: !753)
!5569 = !DILocation(line: 668, column: 13, scope: !753)
!5570 = !DILocation(line: 669, column: 9, scope: !753)
!5571 = !DILocation(line: 669, column: 14, scope: !5572)
!5572 = !DILexicalBlockFile(scope: !757, file: !458, discriminator: 1)
!5573 = !DILocation(line: 669, column: 24, scope: !757)
!5574 = !DILocation(line: 669, column: 54, scope: !757)
!5575 = !DILocation(line: 669, column: 71, scope: !5576)
!5576 = distinct !DILexicalBlock(scope: !757, file: !458, line: 669, column: 68)
!5577 = !DILocation(line: 669, column: 88, scope: !5576)
!5578 = !DILocation(line: 669, column: 68, scope: !5576)
!5579 = !DILocation(line: 669, column: 98, scope: !5576)
!5580 = !DILocation(line: 669, column: 68, scope: !757)
!5581 = !DILocation(line: 669, column: 68, scope: !5582)
!5582 = !DILexicalBlockFile(scope: !757, file: !458, discriminator: 2)
!5583 = !DILocation(line: 669, column: 129, scope: !5584)
!5584 = !DILexicalBlockFile(scope: !5576, file: !458, discriminator: 3)
!5585 = !DILocation(line: 669, column: 147, scope: !5576)
!5586 = !DILocation(line: 669, column: 157, scope: !5576)
!5587 = !DILocation(line: 669, column: 182, scope: !5576)
!5588 = !DILocation(line: 669, column: 113, scope: !5576)
!5589 = !DILocation(line: 669, column: 201, scope: !5590)
!5590 = !DILexicalBlockFile(scope: !753, file: !458, discriminator: 4)
!5591 = !DILocation(line: 669, column: 201, scope: !757)
!5592 = !DILocation(line: 669, column: 201, scope: !5593)
!5593 = !DILexicalBlockFile(scope: !757, file: !458, discriminator: 5)
!5594 = !DILocation(line: 670, column: 16, scope: !753)
!5595 = !DILocation(line: 670, column: 9, scope: !753)
!5596 = !DILocation(line: 671, column: 5, scope: !754)
!5597 = !DILocation(line: 674, column: 49, scope: !5598)
!5598 = distinct !DILexicalBlock(scope: !754, file: !458, line: 672, column: 10)
!5599 = !DILocation(line: 674, column: 34, scope: !5598)
!5600 = !DILocation(line: 674, column: 59, scope: !5598)
!5601 = !DILocation(line: 674, column: 32, scope: !5598)
!5602 = !DILocation(line: 674, column: 93, scope: !5603)
!5603 = !DILexicalBlockFile(scope: !5598, file: !458, discriminator: 1)
!5604 = !DILocation(line: 674, column: 71, scope: !5598)
!5605 = !DILocation(line: 674, column: 103, scope: !5598)
!5606 = !DILocation(line: 674, column: 32, scope: !5607)
!5607 = !DILexicalBlockFile(scope: !5598, file: !458, discriminator: 2)
!5608 = !DILocation(line: 674, column: 15, scope: !5609)
!5609 = !DILexicalBlockFile(scope: !5610, file: !458, discriminator: 4)
!5610 = !DILexicalBlockFile(scope: !5598, file: !458, discriminator: 3)
!5611 = !DILocation(line: 675, column: 35, scope: !5598)
!5612 = !DILocation(line: 675, column: 20, scope: !5598)
!5613 = !DILocation(line: 675, column: 45, scope: !5598)
!5614 = !DILocation(line: 675, column: 16, scope: !5598)
!5615 = !DILocation(line: 678, column: 10, scope: !5616)
!5616 = distinct !DILexicalBlock(scope: !732, file: !458, line: 678, column: 9)
!5617 = !DILocation(line: 678, column: 15, scope: !5616)
!5618 = !DILocation(line: 678, column: 19, scope: !5616)
!5619 = !DILocation(line: 678, column: 22, scope: !5620)
!5620 = !DILexicalBlockFile(scope: !5616, file: !458, discriminator: 1)
!5621 = !DILocation(line: 678, column: 30, scope: !5616)
!5622 = !DILocation(line: 678, column: 28, scope: !5616)
!5623 = !DILocation(line: 678, column: 36, scope: !5616)
!5624 = !DILocation(line: 679, column: 10, scope: !5616)
!5625 = !DILocation(line: 679, column: 15, scope: !5616)
!5626 = !DILocation(line: 679, column: 19, scope: !5616)
!5627 = !DILocation(line: 679, column: 22, scope: !5620)
!5628 = !DILocation(line: 679, column: 30, scope: !5616)
!5629 = !DILocation(line: 679, column: 28, scope: !5616)
!5630 = !DILocation(line: 678, column: 9, scope: !732)
!5631 = !DILocation(line: 680, column: 16, scope: !5616)
!5632 = !DILocation(line: 680, column: 14, scope: !5616)
!5633 = !DILocation(line: 680, column: 9, scope: !5616)
!5634 = !DILocation(line: 681, column: 9, scope: !762)
!5635 = !DILocation(line: 681, column: 14, scope: !762)
!5636 = !DILocation(line: 681, column: 9, scope: !732)
!5637 = !DILocation(line: 682, column: 42, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !762, file: !458, line: 681, column: 20)
!5639 = !DILocation(line: 682, column: 48, scope: !5638)
!5640 = !DILocation(line: 682, column: 55, scope: !5638)
!5641 = !DILocation(line: 682, column: 61, scope: !5638)
!5642 = !DILocation(line: 682, column: 68, scope: !5638)
!5643 = !DILocation(line: 682, column: 16, scope: !5638)
!5644 = !DILocation(line: 682, column: 9, scope: !5638)
!5645 = !DILocation(line: 685, column: 13, scope: !760)
!5646 = !DILocation(line: 685, column: 20, scope: !760)
!5647 = !DILocation(line: 685, column: 13, scope: !761)
!5648 = !DILocation(line: 687, column: 13, scope: !759)
!5649 = !DILocation(line: 687, column: 20, scope: !759)
!5650 = !DILocation(line: 688, column: 13, scope: !759)
!5651 = !DILocation(line: 688, column: 24, scope: !759)
!5652 = !DILocation(line: 690, column: 29, scope: !5653)
!5653 = distinct !DILexicalBlock(scope: !759, file: !458, line: 690, column: 17)
!5654 = !DILocation(line: 690, column: 18, scope: !5653)
!5655 = !DILocation(line: 690, column: 17, scope: !759)
!5656 = !DILocation(line: 691, column: 17, scope: !5653)
!5657 = !DILocation(line: 693, column: 17, scope: !5658)
!5658 = distinct !DILexicalBlock(scope: !759, file: !458, line: 693, column: 17)
!5659 = !DILocation(line: 693, column: 26, scope: !5658)
!5660 = !DILocation(line: 693, column: 17, scope: !759)
!5661 = !DILocation(line: 695, column: 17, scope: !5658)
!5662 = !DILocation(line: 697, column: 17, scope: !5663)
!5663 = distinct !DILexicalBlock(scope: !759, file: !458, line: 697, column: 17)
!5664 = !DILocation(line: 697, column: 22, scope: !5663)
!5665 = !DILocation(line: 697, column: 17, scope: !759)
!5666 = !DILocation(line: 698, column: 24, scope: !5667)
!5667 = distinct !DILexicalBlock(scope: !5663, file: !458, line: 697, column: 27)
!5668 = !DILocation(line: 698, column: 30, scope: !5667)
!5669 = !DILocation(line: 698, column: 22, scope: !5667)
!5670 = !DILocation(line: 699, column: 25, scope: !5667)
!5671 = !DILocation(line: 699, column: 32, scope: !5667)
!5672 = !DILocation(line: 699, column: 40, scope: !5667)
!5673 = !DILocation(line: 699, column: 49, scope: !5667)
!5674 = !DILocation(line: 699, column: 37, scope: !5667)
!5675 = !DILocation(line: 699, column: 30, scope: !5667)
!5676 = !DILocation(line: 699, column: 54, scope: !5667)
!5677 = !DILocation(line: 699, column: 23, scope: !5667)
!5678 = !DILocation(line: 700, column: 25, scope: !5667)
!5679 = !DILocation(line: 700, column: 24, scope: !5667)
!5680 = !DILocation(line: 700, column: 22, scope: !5667)
!5681 = !DILocation(line: 701, column: 13, scope: !5667)
!5682 = !DILocation(line: 702, column: 24, scope: !767)
!5683 = !DILocation(line: 702, column: 22, scope: !767)
!5684 = !DILocation(line: 702, column: 33, scope: !767)
!5685 = !DILocation(line: 702, column: 18, scope: !767)
!5686 = !DILocation(line: 703, column: 18, scope: !766)
!5687 = !DILocation(line: 703, column: 22, scope: !766)
!5688 = !DILocation(line: 703, column: 20, scope: !766)
!5689 = !DILocation(line: 702, column: 13, scope: !767)
!5690 = !DILocation(line: 704, column: 17, scope: !765)
!5691 = !DILocation(line: 704, column: 28, scope: !765)
!5692 = !DILocation(line: 704, column: 34, scope: !765)
!5693 = !DILocation(line: 704, column: 39, scope: !765)
!5694 = !DILocation(line: 706, column: 21, scope: !5695)
!5695 = distinct !DILexicalBlock(scope: !765, file: !458, line: 706, column: 21)
!5696 = !DILocation(line: 706, column: 27, scope: !5695)
!5697 = !DILocation(line: 706, column: 25, scope: !5695)
!5698 = !DILocation(line: 706, column: 75, scope: !5695)
!5699 = !DILocation(line: 706, column: 60, scope: !5695)
!5700 = !DILocation(line: 706, column: 83, scope: !5695)
!5701 = !DILocation(line: 706, column: 32, scope: !5695)
!5702 = !DILocation(line: 706, column: 21, scope: !765)
!5703 = !DILocation(line: 707, column: 59, scope: !5695)
!5704 = !DILocation(line: 707, column: 44, scope: !5695)
!5705 = !DILocation(line: 707, column: 67, scope: !5695)
!5706 = !DILocation(line: 707, column: 79, scope: !5695)
!5707 = !DILocation(line: 707, column: 77, scope: !5695)
!5708 = !DILocation(line: 707, column: 83, scope: !5695)
!5709 = !DILocation(line: 707, column: 25, scope: !5695)
!5710 = !DILocation(line: 707, column: 21, scope: !5695)
!5711 = !DILocation(line: 709, column: 25, scope: !765)
!5712 = !DILocation(line: 709, column: 31, scope: !765)
!5713 = !DILocation(line: 709, column: 29, scope: !765)
!5714 = !DILocation(line: 709, column: 37, scope: !765)
!5715 = !DILocation(line: 709, column: 35, scope: !765)
!5716 = !DILocation(line: 710, column: 25, scope: !765)
!5717 = !DILocation(line: 710, column: 31, scope: !765)
!5718 = !DILocation(line: 710, column: 29, scope: !765)
!5719 = !DILocation(line: 710, column: 35, scope: !765)
!5720 = !DILocation(line: 710, column: 40, scope: !765)
!5721 = !DILocation(line: 709, column: 17, scope: !765)
!5722 = !DILocation(line: 711, column: 13, scope: !766)
!5723 = !DILocation(line: 711, column: 13, scope: !765)
!5724 = !DILocation(line: 703, column: 39, scope: !766)
!5725 = !DILocation(line: 703, column: 36, scope: !766)
!5726 = !DILocation(line: 703, column: 46, scope: !766)
!5727 = !DILocation(line: 702, column: 13, scope: !766)
!5728 = !DILocation(line: 713, column: 19, scope: !759)
!5729 = !DILocation(line: 713, column: 35, scope: !759)
!5730 = !DILocation(line: 713, column: 44, scope: !759)
!5731 = !DILocation(line: 713, column: 43, scope: !759)
!5732 = !DILocation(line: 713, column: 25, scope: !759)
!5733 = !DILocation(line: 713, column: 17, scope: !759)
!5734 = !DILocation(line: 714, column: 17, scope: !5735)
!5735 = distinct !DILexicalBlock(scope: !759, file: !458, line: 714, column: 17)
!5736 = !DILocation(line: 714, column: 63, scope: !5735)
!5737 = !DILocation(line: 714, column: 48, scope: !5735)
!5738 = !DILocation(line: 714, column: 71, scope: !5735)
!5739 = !DILocation(line: 714, column: 21, scope: !5735)
!5740 = !DILocation(line: 714, column: 17, scope: !759)
!5741 = !DILocation(line: 715, column: 25, scope: !5742)
!5742 = distinct !DILexicalBlock(scope: !5735, file: !458, line: 714, column: 82)
!5743 = !DILocation(line: 715, column: 31, scope: !5742)
!5744 = !DILocation(line: 715, column: 29, scope: !5742)
!5745 = !DILocation(line: 715, column: 37, scope: !5742)
!5746 = !DILocation(line: 715, column: 35, scope: !5742)
!5747 = !DILocation(line: 716, column: 25, scope: !5742)
!5748 = !DILocation(line: 716, column: 31, scope: !5742)
!5749 = !DILocation(line: 716, column: 29, scope: !5742)
!5750 = !DILocation(line: 717, column: 57, scope: !5742)
!5751 = !DILocation(line: 717, column: 42, scope: !5742)
!5752 = !DILocation(line: 717, column: 65, scope: !5742)
!5753 = !DILocation(line: 717, column: 77, scope: !5742)
!5754 = !DILocation(line: 717, column: 75, scope: !5742)
!5755 = !DILocation(line: 715, column: 17, scope: !5742)
!5756 = !DILocation(line: 718, column: 13, scope: !5742)
!5757 = !DILocation(line: 719, column: 48, scope: !5758)
!5758 = distinct !DILexicalBlock(scope: !759, file: !458, line: 719, column: 17)
!5759 = !DILocation(line: 719, column: 36, scope: !5758)
!5760 = !DILocation(line: 720, column: 64, scope: !5758)
!5761 = !DILocation(line: 720, column: 49, scope: !5758)
!5762 = !DILocation(line: 720, column: 72, scope: !5758)
!5763 = !DILocation(line: 720, column: 84, scope: !5758)
!5764 = !DILocation(line: 720, column: 82, scope: !5758)
!5765 = !DILocation(line: 719, column: 17, scope: !5758)
!5766 = !DILocation(line: 720, column: 94, scope: !5758)
!5767 = !DILocation(line: 719, column: 17, scope: !759)
!5768 = !DILocation(line: 721, column: 17, scope: !5758)
!5769 = !DILocation(line: 723, column: 13, scope: !759)
!5770 = !DILocation(line: 724, column: 9, scope: !760)
!5771 = !DILocation(line: 727, column: 13, scope: !769)
!5772 = !DILocation(line: 727, column: 24, scope: !769)
!5773 = !DILocation(line: 728, column: 13, scope: !769)
!5774 = !DILocation(line: 728, column: 20, scope: !769)
!5775 = !DILocation(line: 730, column: 17, scope: !5776)
!5776 = distinct !DILexicalBlock(scope: !769, file: !458, line: 730, column: 17)
!5777 = !DILocation(line: 730, column: 27, scope: !5776)
!5778 = !DILocation(line: 730, column: 24, scope: !5776)
!5779 = !DILocation(line: 730, column: 17, scope: !769)
!5780 = !DILocation(line: 731, column: 30, scope: !5781)
!5781 = distinct !DILexicalBlock(scope: !5776, file: !458, line: 730, column: 37)
!5782 = !DILocation(line: 734, column: 30, scope: !5781)
!5783 = !DILocation(line: 734, column: 38, scope: !5781)
!5784 = !DILocation(line: 731, column: 17, scope: !5781)
!5785 = !DILocation(line: 735, column: 17, scope: !5781)
!5786 = !DILocation(line: 737, column: 24, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !769, file: !458, line: 737, column: 13)
!5788 = !DILocation(line: 737, column: 22, scope: !5787)
!5789 = !DILocation(line: 737, column: 33, scope: !5787)
!5790 = !DILocation(line: 737, column: 18, scope: !5787)
!5791 = !DILocation(line: 737, column: 38, scope: !5792)
!5792 = !DILexicalBlockFile(scope: !5793, file: !458, discriminator: 2)
!5793 = !DILexicalBlockFile(scope: !5794, file: !458, discriminator: 1)
!5794 = distinct !DILexicalBlock(scope: !5787, file: !458, line: 737, column: 13)
!5795 = !DILocation(line: 737, column: 42, scope: !5794)
!5796 = !DILocation(line: 737, column: 40, scope: !5794)
!5797 = !DILocation(line: 737, column: 13, scope: !5787)
!5798 = !DILocation(line: 738, column: 34, scope: !5794)
!5799 = !DILocation(line: 738, column: 28, scope: !5794)
!5800 = !DILocation(line: 738, column: 21, scope: !5794)
!5801 = !DILocation(line: 738, column: 17, scope: !5794)
!5802 = !DILocation(line: 738, column: 26, scope: !5794)
!5803 = !DILocation(line: 737, column: 59, scope: !5794)
!5804 = !DILocation(line: 737, column: 56, scope: !5794)
!5805 = !DILocation(line: 737, column: 66, scope: !5794)
!5806 = !DILocation(line: 737, column: 13, scope: !5794)
!5807 = !DILocation(line: 739, column: 13, scope: !769)
!5808 = !DILocation(line: 740, column: 9, scope: !760)
!5809 = !DILocation(line: 742, column: 1, scope: !732)
!5810 = !DILocation(line: 55, column: 40, scope: !774)
!5811 = !DILocation(line: 55, column: 56, scope: !774)
!5812 = !DILocation(line: 55, column: 66, scope: !774)
!5813 = !DILocation(line: 57, column: 5, scope: !774)
!5814 = !DILocation(line: 57, column: 9, scope: !774)
!5815 = !DILocation(line: 58, column: 5, scope: !774)
!5816 = !DILocation(line: 58, column: 11, scope: !774)
!5817 = !DILocation(line: 59, column: 9, scope: !5818)
!5818 = distinct !DILexicalBlock(scope: !774, file: !458, line: 59, column: 9)
!5819 = !DILocation(line: 59, column: 14, scope: !5818)
!5820 = !DILocation(line: 59, column: 9, scope: !774)
!5821 = !DILocation(line: 60, column: 9, scope: !5822)
!5822 = distinct !DILexicalBlock(scope: !5818, file: !458, line: 59, column: 29)
!5823 = !DILocation(line: 60, column: 14, scope: !5822)
!5824 = !DILocation(line: 60, column: 24, scope: !5822)
!5825 = !DILocation(line: 61, column: 9, scope: !5822)
!5826 = !DILocation(line: 63, column: 52, scope: !774)
!5827 = !DILocation(line: 63, column: 37, scope: !774)
!5828 = !DILocation(line: 63, column: 59, scope: !774)
!5829 = !DILocation(line: 63, column: 35, scope: !774)
!5830 = !DILocation(line: 63, column: 93, scope: !5831)
!5831 = !DILexicalBlockFile(scope: !774, file: !458, discriminator: 1)
!5832 = !DILocation(line: 63, column: 100, scope: !774)
!5833 = !DILocation(line: 63, column: 35, scope: !5834)
!5834 = !DILexicalBlockFile(scope: !774, file: !458, discriminator: 2)
!5835 = !DILocation(line: 63, column: 9, scope: !5836)
!5836 = !DILexicalBlockFile(scope: !5837, file: !458, discriminator: 4)
!5837 = !DILexicalBlockFile(scope: !774, file: !458, discriminator: 3)
!5838 = !DILocation(line: 64, column: 29, scope: !774)
!5839 = !DILocation(line: 64, column: 46, scope: !774)
!5840 = !DILocation(line: 64, column: 35, scope: !774)
!5841 = !DILocation(line: 64, column: 51, scope: !774)
!5842 = !DILocation(line: 64, column: 73, scope: !774)
!5843 = !DILocation(line: 64, column: 58, scope: !774)
!5844 = !DILocation(line: 64, column: 80, scope: !774)
!5845 = !DILocation(line: 64, column: 93, scope: !774)
!5846 = !DILocation(line: 64, column: 11, scope: !774)
!5847 = !DILocation(line: 64, column: 9, scope: !774)
!5848 = !DILocation(line: 65, column: 9, scope: !5849)
!5849 = distinct !DILexicalBlock(scope: !774, file: !458, line: 65, column: 9)
!5850 = !DILocation(line: 65, column: 13, scope: !5849)
!5851 = !DILocation(line: 65, column: 9, scope: !774)
!5852 = !DILocation(line: 66, column: 9, scope: !5853)
!5853 = distinct !DILexicalBlock(scope: !5849, file: !458, line: 65, column: 19)
!5854 = !DILocation(line: 66, column: 14, scope: !5853)
!5855 = !DILocation(line: 66, column: 24, scope: !5853)
!5856 = !DILocation(line: 67, column: 5, scope: !5853)
!5857 = !DILocation(line: 68, column: 12, scope: !774)
!5858 = !DILocation(line: 68, column: 5, scope: !774)
!5859 = !DILocation(line: 69, column: 1, scope: !774)
!5860 = !DILocation(line: 72, column: 44, scope: !783)
!5861 = !DILocation(line: 72, column: 60, scope: !783)
!5862 = !DILocation(line: 74, column: 5, scope: !783)
!5863 = !DILocation(line: 74, column: 10, scope: !783)
!5864 = !DILocation(line: 74, column: 20, scope: !783)
!5865 = !DILocation(line: 75, column: 1, scope: !783)
!5866 = !DILocation(line: 2613, column: 36, scope: !801)
!5867 = !DILocation(line: 2615, column: 31, scope: !801)
!5868 = !DILocation(line: 2615, column: 37, scope: !801)
!5869 = !DILocation(line: 2615, column: 12, scope: !801)
!5870 = !DILocation(line: 2615, column: 5, scope: !801)
!5871 = !DILocation(line: 2764, column: 37, scope: !804)
!5872 = !DILocation(line: 2766, column: 27, scope: !804)
!5873 = !DILocation(line: 2766, column: 12, scope: !804)
!5874 = !DILocation(line: 2766, column: 5, scope: !804)
!5875 = !DILocation(line: 2772, column: 40, scope: !818)
!5876 = !DILocation(line: 2772, column: 56, scope: !818)
!5877 = !DILocation(line: 2774, column: 5, scope: !818)
!5878 = !DILocation(line: 2774, column: 9, scope: !818)
!5879 = !DILocation(line: 2776, column: 34, scope: !5880)
!5880 = distinct !DILexicalBlock(scope: !818, file: !458, line: 2776, column: 9)
!5881 = !DILocation(line: 2776, column: 10, scope: !5880)
!5882 = !DILocation(line: 2776, column: 9, scope: !818)
!5883 = !DILocation(line: 2777, column: 9, scope: !5880)
!5884 = !DILocation(line: 2779, column: 27, scope: !818)
!5885 = !DILocation(line: 2779, column: 33, scope: !818)
!5886 = !DILocation(line: 2779, column: 12, scope: !818)
!5887 = !DILocation(line: 2779, column: 5, scope: !818)
!5888 = !DILocation(line: 2780, column: 1, scope: !818)
!5889 = !DILocation(line: 2787, column: 37, scope: !823)
!5890 = !DILocation(line: 2789, column: 5, scope: !823)
!5891 = !DILocation(line: 2789, column: 16, scope: !823)
!5892 = !DILocation(line: 2791, column: 39, scope: !823)
!5893 = !DILocation(line: 2791, column: 45, scope: !823)
!5894 = !DILocation(line: 2791, column: 54, scope: !823)
!5895 = !DILocation(line: 2791, column: 37, scope: !823)
!5896 = !DILocation(line: 2791, column: 9, scope: !823)
!5897 = !DILocation(line: 2792, column: 31, scope: !823)
!5898 = !DILocation(line: 2792, column: 12, scope: !823)
!5899 = !DILocation(line: 2793, column: 1, scope: !823)
!5900 = !DILocation(line: 2792, column: 5, scope: !823)
!5901 = !DILocation(line: 2289, column: 37, scope: !827)
!5902 = !DILocation(line: 2289, column: 53, scope: !827)
!5903 = !DILocation(line: 2291, column: 5, scope: !827)
!5904 = !DILocation(line: 2291, column: 9, scope: !827)
!5905 = !DILocation(line: 2292, column: 5, scope: !827)
!5906 = !DILocation(line: 2292, column: 16, scope: !827)
!5907 = !DILocation(line: 2292, column: 37, scope: !827)
!5908 = !DILocation(line: 2292, column: 22, scope: !827)
!5909 = !DILocation(line: 2292, column: 45, scope: !827)
!5910 = !DILocation(line: 2294, column: 25, scope: !5911)
!5911 = distinct !DILexicalBlock(scope: !827, file: !458, line: 2294, column: 9)
!5912 = !DILocation(line: 2294, column: 11, scope: !5911)
!5913 = !DILocation(line: 2294, column: 9, scope: !827)
!5914 = !DILocation(line: 2295, column: 9, scope: !5911)
!5915 = !DILocation(line: 2296, column: 9, scope: !5916)
!5916 = distinct !DILexicalBlock(scope: !827, file: !458, line: 2296, column: 9)
!5917 = !DILocation(line: 2296, column: 11, scope: !5916)
!5918 = !DILocation(line: 2296, column: 9, scope: !827)
!5919 = !DILocation(line: 2297, column: 25, scope: !5920)
!5920 = distinct !DILexicalBlock(scope: !5916, file: !458, line: 2296, column: 47)
!5921 = !DILocation(line: 2297, column: 9, scope: !5920)
!5922 = !DILocation(line: 2299, column: 9, scope: !5920)
!5923 = !DILocation(line: 2301, column: 40, scope: !5924)
!5924 = distinct !DILexicalBlock(scope: !827, file: !458, line: 2301, column: 9)
!5925 = !DILocation(line: 2301, column: 28, scope: !5924)
!5926 = !DILocation(line: 2301, column: 46, scope: !5924)
!5927 = !DILocation(line: 2301, column: 48, scope: !5924)
!5928 = !DILocation(line: 2301, column: 9, scope: !5924)
!5929 = !DILocation(line: 2301, column: 53, scope: !5924)
!5930 = !DILocation(line: 2301, column: 9, scope: !827)
!5931 = !DILocation(line: 2302, column: 9, scope: !5924)
!5932 = !DILocation(line: 2304, column: 130, scope: !827)
!5933 = !DILocation(line: 2304, column: 125, scope: !827)
!5934 = !DILocation(line: 2304, column: 37, scope: !827)
!5935 = !DILocation(line: 2304, column: 22, scope: !827)
!5936 = !DILocation(line: 2304, column: 45, scope: !827)
!5937 = !DILocation(line: 2304, column: 20, scope: !827)
!5938 = !DILocation(line: 2304, column: 79, scope: !5939)
!5939 = !DILexicalBlockFile(scope: !827, file: !458, discriminator: 1)
!5940 = !DILocation(line: 2304, column: 87, scope: !827)
!5941 = !DILocation(line: 2304, column: 20, scope: !5942)
!5942 = !DILexicalBlockFile(scope: !827, file: !458, discriminator: 2)
!5943 = !DILocation(line: 2304, column: 5, scope: !5944)
!5944 = !DILexicalBlockFile(scope: !5945, file: !458, discriminator: 4)
!5945 = !DILexicalBlockFile(scope: !827, file: !458, discriminator: 3)
!5946 = !DILocation(line: 2304, column: 128, scope: !827)
!5947 = !DILocation(line: 2306, column: 58, scope: !827)
!5948 = !DILocation(line: 2306, column: 5, scope: !827)
!5949 = !DILocation(line: 2307, column: 1, scope: !827)
!5950 = !DILocation(line: 88, column: 32, scope: !833)
!5951 = !DILocation(line: 90, column: 5, scope: !833)
!5952 = !DILocation(line: 90, column: 15, scope: !833)
!5953 = !DILocation(line: 91, column: 88, scope: !833)
!5954 = !DILocation(line: 91, column: 73, scope: !833)
!5955 = !DILocation(line: 91, column: 96, scope: !833)
!5956 = !DILocation(line: 91, column: 14, scope: !833)
!5957 = !DILocation(line: 91, column: 12, scope: !833)
!5958 = !DILocation(line: 92, column: 10, scope: !5959)
!5959 = distinct !DILexicalBlock(scope: !833, file: !834, line: 92, column: 9)
!5960 = !DILocation(line: 92, column: 9, scope: !833)
!5961 = !DILocation(line: 93, column: 13, scope: !5959)
!5962 = !DILocation(line: 94, column: 58, scope: !833)
!5963 = !DILocation(line: 94, column: 43, scope: !833)
!5964 = !DILocation(line: 94, column: 68, scope: !833)
!5965 = !DILocation(line: 94, column: 41, scope: !833)
!5966 = !DILocation(line: 94, column: 102, scope: !5967)
!5967 = !DILexicalBlockFile(scope: !833, file: !834, discriminator: 1)
!5968 = !DILocation(line: 94, column: 80, scope: !833)
!5969 = !DILocation(line: 94, column: 112, scope: !833)
!5970 = !DILocation(line: 94, column: 41, scope: !5971)
!5971 = !DILexicalBlockFile(scope: !833, file: !834, discriminator: 2)
!5972 = !DILocation(line: 94, column: 183, scope: !5973)
!5973 = !DILexicalBlockFile(scope: !5974, file: !834, discriminator: 4)
!5974 = !DILexicalBlockFile(scope: !833, file: !834, discriminator: 3)
!5975 = !DILocation(line: 94, column: 168, scope: !833)
!5976 = !DILocation(line: 94, column: 191, scope: !833)
!5977 = !DILocation(line: 94, column: 166, scope: !833)
!5978 = !DILocation(line: 94, column: 225, scope: !5979)
!5979 = !DILexicalBlockFile(scope: !833, file: !834, discriminator: 5)
!5980 = !DILocation(line: 94, column: 203, scope: !833)
!5981 = !DILocation(line: 94, column: 233, scope: !833)
!5982 = !DILocation(line: 94, column: 166, scope: !5983)
!5983 = !DILexicalBlockFile(scope: !833, file: !834, discriminator: 6)
!5984 = !DILocation(line: 95, column: 55, scope: !833)
!5985 = !DILocation(line: 95, column: 40, scope: !833)
!5986 = !DILocation(line: 95, column: 63, scope: !833)
!5987 = !DILocation(line: 94, column: 5, scope: !833)
!5988 = !DILocation(line: 96, column: 12, scope: !833)
!5989 = !DILocation(line: 96, column: 5, scope: !833)
!5990 = !DILocation(line: 97, column: 1, scope: !833)
!5991 = !DILocation(line: 190, column: 28, scope: !838)
!5992 = !DILocation(line: 190, column: 44, scope: !838)
!5993 = !DILocation(line: 192, column: 5, scope: !838)
!5994 = !DILocation(line: 192, column: 16, scope: !838)
!5995 = !DILocation(line: 192, column: 22, scope: !838)
!5996 = !DILocation(line: 193, column: 5, scope: !838)
!5997 = !DILocation(line: 193, column: 16, scope: !838)
!5998 = !DILocation(line: 194, column: 5, scope: !838)
!5999 = !DILocation(line: 194, column: 10, scope: !838)
!6000 = !DILocation(line: 196, column: 34, scope: !6001)
!6001 = distinct !DILexicalBlock(scope: !838, file: !839, line: 196, column: 9)
!6002 = !DILocation(line: 196, column: 10, scope: !6001)
!6003 = !DILocation(line: 196, column: 9, scope: !838)
!6004 = !DILocation(line: 197, column: 9, scope: !6001)
!6005 = !DILocation(line: 199, column: 41, scope: !6006)
!6006 = distinct !DILexicalBlock(scope: !838, file: !839, line: 199, column: 9)
!6007 = !DILocation(line: 199, column: 26, scope: !6006)
!6008 = !DILocation(line: 199, column: 49, scope: !6006)
!6009 = !DILocation(line: 199, column: 62, scope: !6006)
!6010 = !DILocation(line: 199, column: 59, scope: !6006)
!6011 = !DILocation(line: 199, column: 68, scope: !6006)
!6012 = !DILocation(line: 199, column: 86, scope: !6013)
!6013 = !DILexicalBlockFile(scope: !6006, file: !839, discriminator: 1)
!6014 = !DILocation(line: 199, column: 94, scope: !6006)
!6015 = !DILocation(line: 199, column: 103, scope: !6006)
!6016 = !DILocation(line: 199, column: 9, scope: !838)
!6017 = !DILocation(line: 203, column: 78, scope: !6018)
!6018 = distinct !DILexicalBlock(scope: !6006, file: !839, line: 199, column: 126)
!6019 = !DILocation(line: 203, column: 63, scope: !6018)
!6020 = !DILocation(line: 203, column: 86, scope: !6018)
!6021 = !DILocation(line: 203, column: 61, scope: !6018)
!6022 = !DILocation(line: 203, column: 120, scope: !6023)
!6023 = !DILexicalBlockFile(scope: !6018, file: !839, discriminator: 1)
!6024 = !DILocation(line: 203, column: 98, scope: !6018)
!6025 = !DILocation(line: 203, column: 128, scope: !6018)
!6026 = !DILocation(line: 203, column: 61, scope: !6027)
!6027 = !DILexicalBlockFile(scope: !6018, file: !839, discriminator: 2)
!6028 = !DILocation(line: 203, column: 199, scope: !6029)
!6029 = !DILexicalBlockFile(scope: !6030, file: !839, discriminator: 4)
!6030 = !DILexicalBlockFile(scope: !6018, file: !839, discriminator: 3)
!6031 = !DILocation(line: 203, column: 184, scope: !6018)
!6032 = !DILocation(line: 203, column: 207, scope: !6018)
!6033 = !DILocation(line: 203, column: 16, scope: !6018)
!6034 = !DILocation(line: 203, column: 9, scope: !6018)
!6035 = !DILocation(line: 210, column: 12, scope: !838)
!6036 = !DILocation(line: 210, column: 52, scope: !838)
!6037 = !DILocation(line: 210, column: 37, scope: !838)
!6038 = !DILocation(line: 210, column: 60, scope: !838)
!6039 = !DILocation(line: 210, column: 18, scope: !838)
!6040 = !DILocation(line: 210, column: 10, scope: !838)
!6041 = !DILocation(line: 211, column: 12, scope: !838)
!6042 = !DILocation(line: 211, column: 17, scope: !838)
!6043 = !DILocation(line: 211, column: 24, scope: !838)
!6044 = !DILocation(line: 211, column: 31, scope: !838)
!6045 = !DILocation(line: 211, column: 29, scope: !838)
!6046 = !DILocation(line: 211, column: 37, scope: !838)
!6047 = !DILocation(line: 211, column: 21, scope: !838)
!6048 = !DILocation(line: 211, column: 10, scope: !838)
!6049 = !DILocation(line: 213, column: 16, scope: !838)
!6050 = !DILocation(line: 213, column: 22, scope: !838)
!6051 = !DILocation(line: 213, column: 28, scope: !838)
!6052 = !DILocation(line: 213, column: 35, scope: !838)
!6053 = !DILocation(line: 213, column: 33, scope: !838)
!6054 = !DILocation(line: 213, column: 41, scope: !838)
!6055 = !DILocation(line: 213, column: 12, scope: !838)
!6056 = !DILocation(line: 213, column: 5, scope: !838)
!6057 = !DILocation(line: 214, column: 1, scope: !838)
!6058 = !DILocation(line: 1228, column: 36, scope: !856)
!6059 = !DILocation(line: 1230, column: 40, scope: !6060)
!6060 = distinct !DILexicalBlock(scope: !856, file: !458, line: 1230, column: 9)
!6061 = !DILocation(line: 1230, column: 28, scope: !6060)
!6062 = !DILocation(line: 1230, column: 9, scope: !6060)
!6063 = !DILocation(line: 1230, column: 49, scope: !6060)
!6064 = !DILocation(line: 1230, column: 9, scope: !856)
!6065 = !DILocation(line: 1231, column: 9, scope: !6060)
!6066 = !DILocation(line: 1232, column: 58, scope: !856)
!6067 = !DILocation(line: 1232, column: 5, scope: !856)
!6068 = !DILocation(line: 1233, column: 1, scope: !856)
!6069 = !DILocation(line: 1241, column: 35, scope: !859)
!6070 = !DILocation(line: 1243, column: 86, scope: !859)
!6071 = !DILocation(line: 1243, column: 74, scope: !859)
!6072 = !DILocation(line: 1243, column: 59, scope: !859)
!6073 = !DILocation(line: 1243, column: 94, scope: !859)
!6074 = !DILocation(line: 1243, column: 57, scope: !859)
!6075 = !DILocation(line: 1243, column: 140, scope: !6076)
!6076 = !DILexicalBlockFile(scope: !859, file: !458, discriminator: 1)
!6077 = !DILocation(line: 1243, column: 128, scope: !859)
!6078 = !DILocation(line: 1243, column: 106, scope: !859)
!6079 = !DILocation(line: 1243, column: 148, scope: !859)
!6080 = !DILocation(line: 1243, column: 57, scope: !6081)
!6081 = !DILexicalBlockFile(scope: !859, file: !458, discriminator: 2)
!6082 = !DILocation(line: 1244, column: 74, scope: !859)
!6083 = !DILocation(line: 1244, column: 59, scope: !859)
!6084 = !DILocation(line: 1244, column: 82, scope: !859)
!6085 = !DILocation(line: 1243, column: 12, scope: !859)
!6086 = !DILocation(line: 1243, column: 5, scope: !859)
!6087 = !DILocation(line: 1183, column: 36, scope: !862)
!6088 = !DILocation(line: 1183, column: 52, scope: !862)
!6089 = !DILocation(line: 1185, column: 5, scope: !862)
!6090 = !DILocation(line: 1185, column: 15, scope: !862)
!6091 = !DILocation(line: 1186, column: 5, scope: !862)
!6092 = !DILocation(line: 1186, column: 17, scope: !862)
!6093 = !DILocation(line: 1186, column: 55, scope: !862)
!6094 = !DILocation(line: 1186, column: 40, scope: !862)
!6095 = !DILocation(line: 1186, column: 63, scope: !862)
!6096 = !DILocation(line: 1186, column: 38, scope: !862)
!6097 = !DILocation(line: 1186, column: 97, scope: !6098)
!6098 = !DILexicalBlockFile(scope: !862, file: !458, discriminator: 1)
!6099 = !DILocation(line: 1186, column: 105, scope: !862)
!6100 = !DILocation(line: 1186, column: 38, scope: !6101)
!6101 = !DILexicalBlockFile(scope: !862, file: !458, discriminator: 2)
!6102 = !DILocation(line: 1186, column: 17, scope: !6103)
!6103 = !DILexicalBlockFile(scope: !6104, file: !458, discriminator: 4)
!6104 = !DILexicalBlockFile(scope: !862, file: !458, discriminator: 3)
!6105 = !DILocation(line: 1186, column: 145, scope: !862)
!6106 = !DILocation(line: 1187, column: 5, scope: !862)
!6107 = !DILocation(line: 1187, column: 16, scope: !862)
!6108 = !DILocation(line: 1188, column: 5, scope: !862)
!6109 = !DILocation(line: 1188, column: 10, scope: !862)
!6110 = !DILocation(line: 1189, column: 5, scope: !862)
!6111 = !DILocation(line: 1189, column: 16, scope: !862)
!6112 = !DILocation(line: 1189, column: 27, scope: !862)
!6113 = !DILocation(line: 1191, column: 5, scope: !862)
!6114 = !DILocation(line: 1191, column: 15, scope: !862)
!6115 = !DILocation(line: 1192, column: 5, scope: !862)
!6116 = !DILocation(line: 1192, column: 15, scope: !862)
!6117 = !DILocation(line: 1194, column: 51, scope: !6118)
!6118 = distinct !DILexicalBlock(scope: !862, file: !458, line: 1194, column: 9)
!6119 = !DILocation(line: 1194, column: 10, scope: !6118)
!6120 = !DILocation(line: 1194, column: 9, scope: !862)
!6121 = !DILocation(line: 1196, column: 9, scope: !6118)
!6122 = !DILocation(line: 1198, column: 9, scope: !6123)
!6123 = distinct !DILexicalBlock(scope: !862, file: !458, line: 1198, column: 9)
!6124 = !DILocation(line: 1198, column: 9, scope: !862)
!6125 = !DILocation(line: 1199, column: 24, scope: !6126)
!6126 = distinct !DILexicalBlock(scope: !6127, file: !458, line: 1199, column: 13)
!6127 = distinct !DILexicalBlock(scope: !6123, file: !458, line: 1198, column: 18)
!6128 = !DILocation(line: 1199, column: 13, scope: !6126)
!6129 = !DILocation(line: 1199, column: 40, scope: !6126)
!6130 = !DILocation(line: 1199, column: 13, scope: !6127)
!6131 = !DILocation(line: 1200, column: 13, scope: !6126)
!6132 = !DILocation(line: 1202, column: 20, scope: !6127)
!6133 = !DILocation(line: 1202, column: 13, scope: !6127)
!6134 = !DILocation(line: 1203, column: 24, scope: !6127)
!6135 = !DILocation(line: 1203, column: 17, scope: !6127)
!6136 = !DILocation(line: 1204, column: 5, scope: !6127)
!6137 = !DILocation(line: 1206, column: 13, scope: !6138)
!6138 = distinct !DILexicalBlock(scope: !6123, file: !458, line: 1205, column: 10)
!6139 = !DILocation(line: 1207, column: 17, scope: !6138)
!6140 = !DILocation(line: 1210, column: 9, scope: !6141)
!6141 = distinct !DILexicalBlock(scope: !862, file: !458, line: 1210, column: 9)
!6142 = !DILocation(line: 1210, column: 47, scope: !6141)
!6143 = !DILocation(line: 1210, column: 32, scope: !6141)
!6144 = !DILocation(line: 1210, column: 55, scope: !6141)
!6145 = !DILocation(line: 1210, column: 13, scope: !6141)
!6146 = !DILocation(line: 1210, column: 9, scope: !862)
!6147 = !DILocation(line: 1210, column: 104, scope: !6148)
!6148 = !DILexicalBlockFile(scope: !6141, file: !458, discriminator: 1)
!6149 = !DILocation(line: 1210, column: 89, scope: !6141)
!6150 = !DILocation(line: 1210, column: 112, scope: !6141)
!6151 = !DILocation(line: 1210, column: 70, scope: !6141)
!6152 = !DILocation(line: 1210, column: 66, scope: !6141)
!6153 = !DILocation(line: 1210, column: 132, scope: !6154)
!6154 = !DILexicalBlockFile(scope: !6155, file: !458, discriminator: 2)
!6155 = distinct !DILexicalBlock(scope: !6141, file: !458, line: 1210, column: 132)
!6156 = !DILocation(line: 1210, column: 136, scope: !6155)
!6157 = !DILocation(line: 1210, column: 132, scope: !6141)
!6158 = !DILocation(line: 1210, column: 182, scope: !6159)
!6159 = !DILexicalBlockFile(scope: !6160, file: !458, discriminator: 4)
!6160 = distinct !DILexicalBlock(scope: !6155, file: !458, line: 1210, column: 141)
!6161 = !DILocation(line: 1210, column: 167, scope: !6160)
!6162 = !DILocation(line: 1210, column: 190, scope: !6160)
!6163 = !DILocation(line: 1210, column: 147, scope: !6160)
!6164 = !DILocation(line: 1210, column: 205, scope: !6165)
!6165 = distinct !DILexicalBlock(scope: !6160, file: !458, line: 1210, column: 205)
!6166 = !DILocation(line: 1210, column: 209, scope: !6165)
!6167 = !DILocation(line: 1210, column: 205, scope: !6160)
!6168 = !DILocation(line: 1210, column: 218, scope: !6169)
!6169 = !DILexicalBlockFile(scope: !6165, file: !458, discriminator: 5)
!6170 = !DILocation(line: 1210, column: 214, scope: !6165)
!6171 = !DILocation(line: 1210, column: 223, scope: !6172)
!6172 = !DILexicalBlockFile(scope: !6173, file: !458, discriminator: 7)
!6173 = !DILexicalBlockFile(scope: !6160, file: !458, discriminator: 6)
!6174 = !DILocation(line: 1210, column: 229, scope: !6175)
!6175 = !DILexicalBlockFile(scope: !6176, file: !458, discriminator: 3)
!6176 = distinct !DILexicalBlock(scope: !862, file: !458, line: 1210, column: 229)
!6177 = !DILocation(line: 1210, column: 235, scope: !6176)
!6178 = !DILocation(line: 1210, column: 229, scope: !862)
!6179 = !DILocation(line: 1210, column: 283, scope: !6180)
!6180 = !DILexicalBlockFile(scope: !6181, file: !458, discriminator: 8)
!6181 = distinct !DILexicalBlock(scope: !6176, file: !458, line: 1210, column: 240)
!6182 = !DILocation(line: 1210, column: 268, scope: !6181)
!6183 = !DILocation(line: 1210, column: 291, scope: !6181)
!6184 = !DILocation(line: 1210, column: 248, scope: !6181)
!6185 = !DILocation(line: 1210, column: 306, scope: !6186)
!6186 = distinct !DILexicalBlock(scope: !6181, file: !458, line: 1210, column: 306)
!6187 = !DILocation(line: 1210, column: 312, scope: !6186)
!6188 = !DILocation(line: 1210, column: 306, scope: !6181)
!6189 = !DILocation(line: 1210, column: 323, scope: !6190)
!6190 = !DILexicalBlockFile(scope: !6186, file: !458, discriminator: 9)
!6191 = !DILocation(line: 1210, column: 317, scope: !6186)
!6192 = !DILocation(line: 1210, column: 328, scope: !6193)
!6193 = !DILexicalBlockFile(scope: !6194, file: !458, discriminator: 11)
!6194 = !DILexicalBlockFile(scope: !6181, file: !458, discriminator: 10)
!6195 = !DILocation(line: 1213, column: 25, scope: !862)
!6196 = !DILocation(line: 1213, column: 31, scope: !862)
!6197 = !DILocation(line: 1213, column: 29, scope: !862)
!6198 = !DILocation(line: 1213, column: 38, scope: !862)
!6199 = !DILocation(line: 1213, column: 44, scope: !862)
!6200 = !DILocation(line: 1213, column: 42, scope: !862)
!6201 = !DILocation(line: 1213, column: 51, scope: !862)
!6202 = !DILocation(line: 1213, column: 56, scope: !862)
!6203 = !DILocation(line: 1213, column: 9, scope: !862)
!6204 = !DILocation(line: 1212, column: 17, scope: !862)
!6205 = !DILocation(line: 1212, column: 15, scope: !862)
!6206 = !DILocation(line: 1216, column: 9, scope: !6207)
!6207 = distinct !DILexicalBlock(scope: !862, file: !458, line: 1216, column: 9)
!6208 = !DILocation(line: 1216, column: 9, scope: !862)
!6209 = !DILocation(line: 1217, column: 9, scope: !6207)
!6210 = !DILocation(line: 1219, column: 12, scope: !862)
!6211 = !DILocation(line: 1219, column: 5, scope: !862)
!6212 = !DILocation(line: 1220, column: 1, scope: !862)
!6213 = !DILocation(line: 2594, column: 28, scope: !916)
!6214 = !DILocation(line: 2594, column: 44, scope: !916)
!6215 = !DILocation(line: 2594, column: 60, scope: !916)
!6216 = !DILocation(line: 2596, column: 5, scope: !916)
!6217 = !DILocation(line: 2596, column: 17, scope: !916)
!6218 = !DILocation(line: 2597, column: 5, scope: !916)
!6219 = !DILocation(line: 2597, column: 17, scope: !916)
!6220 = !DILocation(line: 2600, column: 45, scope: !6221)
!6221 = distinct !DILexicalBlock(scope: !916, file: !458, line: 2600, column: 9)
!6222 = !DILocation(line: 2600, column: 51, scope: !6221)
!6223 = !DILocation(line: 2600, column: 10, scope: !6221)
!6224 = !DILocation(line: 2600, column: 9, scope: !916)
!6225 = !DILocation(line: 2601, column: 9, scope: !6221)
!6226 = !DILocation(line: 2602, column: 9, scope: !6227)
!6227 = distinct !DILexicalBlock(scope: !916, file: !458, line: 2602, column: 9)
!6228 = !DILocation(line: 2602, column: 18, scope: !6227)
!6229 = !DILocation(line: 2602, column: 9, scope: !916)
!6230 = !DILocation(line: 2603, column: 20, scope: !6227)
!6231 = !DILocation(line: 2603, column: 18, scope: !6227)
!6232 = !DILocation(line: 2603, column: 9, scope: !6227)
!6233 = !DILocation(line: 2604, column: 40, scope: !916)
!6234 = !DILocation(line: 2604, column: 46, scope: !916)
!6235 = !DILocation(line: 2604, column: 56, scope: !916)
!6236 = !DILocation(line: 2604, column: 12, scope: !916)
!6237 = !DILocation(line: 2604, column: 5, scope: !916)
!6238 = !DILocation(line: 2605, column: 1, scope: !916)
!6239 = !DILocation(line: 1425, column: 39, scope: !923)
!6240 = !DILocation(line: 1425, column: 55, scope: !923)
!6241 = !DILocation(line: 1427, column: 5, scope: !923)
!6242 = !DILocation(line: 1427, column: 16, scope: !923)
!6243 = !DILocation(line: 1428, column: 5, scope: !923)
!6244 = !DILocation(line: 1428, column: 16, scope: !923)
!6245 = !DILocation(line: 1429, column: 5, scope: !923)
!6246 = !DILocation(line: 1429, column: 15, scope: !923)
!6247 = !DILocation(line: 1430, column: 5, scope: !923)
!6248 = !DILocation(line: 1430, column: 9, scope: !923)
!6249 = !DILocation(line: 1432, column: 49, scope: !6250)
!6250 = distinct !DILexicalBlock(scope: !923, file: !458, line: 1432, column: 9)
!6251 = !DILocation(line: 1432, column: 10, scope: !6250)
!6252 = !DILocation(line: 1432, column: 9, scope: !923)
!6253 = !DILocation(line: 1433, column: 9, scope: !6250)
!6254 = !DILocation(line: 1434, column: 26, scope: !933)
!6255 = !DILocation(line: 1434, column: 36, scope: !933)
!6256 = !DILocation(line: 1434, column: 47, scope: !933)
!6257 = !DILocation(line: 1434, column: 56, scope: !933)
!6258 = !DILocation(line: 1434, column: 73, scope: !933)
!6259 = !DILocation(line: 1434, column: 9, scope: !923)
!6260 = !DILocation(line: 1435, column: 9, scope: !932)
!6261 = !DILocation(line: 1435, column: 20, scope: !932)
!6262 = !DILocation(line: 1436, column: 16, scope: !6263)
!6263 = distinct !DILexicalBlock(scope: !932, file: !458, line: 1436, column: 9)
!6264 = !DILocation(line: 1436, column: 14, scope: !6263)
!6265 = !DILocation(line: 1436, column: 21, scope: !6266)
!6266 = !DILexicalBlockFile(scope: !6267, file: !458, discriminator: 2)
!6267 = !DILexicalBlockFile(scope: !6268, file: !458, discriminator: 1)
!6268 = distinct !DILexicalBlock(scope: !6263, file: !458, line: 1436, column: 9)
!6269 = !DILocation(line: 1436, column: 42, scope: !6268)
!6270 = !DILocation(line: 1436, column: 27, scope: !6268)
!6271 = !DILocation(line: 1436, column: 52, scope: !6268)
!6272 = !DILocation(line: 1436, column: 23, scope: !6268)
!6273 = !DILocation(line: 1436, column: 9, scope: !6263)
!6274 = !DILocation(line: 1437, column: 43, scope: !6275)
!6275 = distinct !DILexicalBlock(scope: !6268, file: !458, line: 1436, column: 67)
!6276 = !DILocation(line: 1438, column: 77, scope: !6275)
!6277 = !DILocation(line: 1438, column: 59, scope: !6275)
!6278 = !DILocation(line: 1438, column: 41, scope: !6275)
!6279 = !DILocation(line: 1438, column: 69, scope: !6275)
!6280 = !DILocation(line: 1438, column: 40, scope: !6275)
!6281 = !DILocation(line: 1439, column: 39, scope: !6275)
!6282 = !DILocation(line: 1439, column: 46, scope: !6275)
!6283 = !DILocation(line: 1437, column: 22, scope: !6275)
!6284 = !DILocation(line: 1437, column: 20, scope: !6275)
!6285 = !DILocation(line: 1440, column: 17, scope: !6286)
!6286 = distinct !DILexicalBlock(scope: !6275, file: !458, line: 1440, column: 17)
!6287 = !DILocation(line: 1440, column: 24, scope: !6286)
!6288 = !DILocation(line: 1440, column: 17, scope: !6275)
!6289 = !DILocation(line: 1441, column: 17, scope: !6286)
!6290 = !DILocation(line: 1442, column: 22, scope: !6291)
!6291 = distinct !DILexicalBlock(scope: !6286, file: !458, line: 1442, column: 22)
!6292 = !DILocation(line: 1442, column: 22, scope: !6286)
!6293 = !DILocation(line: 1443, column: 83, scope: !6294)
!6294 = distinct !DILexicalBlock(scope: !6291, file: !458, line: 1442, column: 30)
!6295 = !DILocation(line: 1443, column: 17, scope: !6294)
!6296 = !DILocation(line: 1445, column: 9, scope: !6275)
!6297 = !DILocation(line: 1436, column: 63, scope: !6268)
!6298 = !DILocation(line: 1436, column: 9, scope: !6268)
!6299 = !DILocation(line: 1446, column: 76, scope: !932)
!6300 = !DILocation(line: 1446, column: 9, scope: !932)
!6301 = !DILocation(line: 1447, column: 5, scope: !933)
!6302 = !DILocation(line: 1448, column: 35, scope: !923)
!6303 = !DILocation(line: 1448, column: 41, scope: !923)
!6304 = !DILocation(line: 1448, column: 49, scope: !923)
!6305 = !DILocation(line: 1448, column: 56, scope: !923)
!6306 = !DILocation(line: 1448, column: 14, scope: !923)
!6307 = !DILocation(line: 1448, column: 12, scope: !923)
!6308 = !DILocation(line: 1449, column: 9, scope: !6309)
!6309 = distinct !DILexicalBlock(scope: !923, file: !458, line: 1449, column: 9)
!6310 = !DILocation(line: 1449, column: 16, scope: !6309)
!6311 = !DILocation(line: 1449, column: 9, scope: !923)
!6312 = !DILocation(line: 1450, column: 36, scope: !6313)
!6313 = distinct !DILexicalBlock(scope: !6314, file: !458, line: 1450, column: 13)
!6314 = distinct !DILexicalBlock(scope: !6309, file: !458, line: 1449, column: 23)
!6315 = !DILocation(line: 1450, column: 13, scope: !6313)
!6316 = !DILocation(line: 1450, column: 13, scope: !6314)
!6317 = !DILocation(line: 1451, column: 26, scope: !6313)
!6318 = !DILocation(line: 1452, column: 68, scope: !6313)
!6319 = !DILocation(line: 1452, column: 78, scope: !6313)
!6320 = !DILocation(line: 1452, column: 88, scope: !6313)
!6321 = !DILocation(line: 1451, column: 13, scope: !6313)
!6322 = !DILocation(line: 1453, column: 9, scope: !6314)
!6323 = !DILocation(line: 1456, column: 32, scope: !6309)
!6324 = !DILocation(line: 1456, column: 16, scope: !6309)
!6325 = !DILocation(line: 1456, column: 9, scope: !6309)
!6326 = !DILocation(line: 1457, column: 1, scope: !923)
!6327 = !DILocation(line: 14, column: 32, scope: !947)
!6328 = !DILocation(line: 14, column: 48, scope: !947)
!6329 = !DILocation(line: 14, column: 64, scope: !947)
!6330 = !DILocation(line: 16, column: 5, scope: !947)
!6331 = !DILocation(line: 16, column: 17, scope: !947)
!6332 = !DILocation(line: 16, column: 21, scope: !947)
!6333 = !DILocation(line: 17, column: 5, scope: !947)
!6334 = !DILocation(line: 17, column: 11, scope: !947)
!6335 = !DILocation(line: 18, column: 5, scope: !947)
!6336 = !DILocation(line: 18, column: 16, scope: !947)
!6337 = !DILocation(line: 18, column: 19, scope: !947)
!6338 = !DILocation(line: 19, column: 5, scope: !947)
!6339 = !DILocation(line: 19, column: 15, scope: !947)
!6340 = !DILocation(line: 21, column: 5, scope: !947)
!6341 = !DILocation(line: 21, column: 9, scope: !947)
!6342 = !DILocation(line: 23, column: 45, scope: !6343)
!6343 = distinct !DILexicalBlock(scope: !947, file: !839, line: 23, column: 9)
!6344 = !DILocation(line: 23, column: 51, scope: !6343)
!6345 = !DILocation(line: 23, column: 10, scope: !6343)
!6346 = !DILocation(line: 23, column: 9, scope: !947)
!6347 = !DILocation(line: 25, column: 9, scope: !6343)
!6348 = !DILocation(line: 28, column: 11, scope: !947)
!6349 = !DILocation(line: 28, column: 7, scope: !947)
!6350 = !DILocation(line: 29, column: 41, scope: !947)
!6351 = !DILocation(line: 29, column: 26, scope: !947)
!6352 = !DILocation(line: 29, column: 49, scope: !947)
!6353 = !DILocation(line: 29, column: 24, scope: !947)
!6354 = !DILocation(line: 29, column: 83, scope: !6355)
!6355 = !DILexicalBlockFile(scope: !947, file: !839, discriminator: 1)
!6356 = !DILocation(line: 29, column: 61, scope: !947)
!6357 = !DILocation(line: 29, column: 91, scope: !947)
!6358 = !DILocation(line: 29, column: 24, scope: !6359)
!6359 = !DILexicalBlockFile(scope: !947, file: !839, discriminator: 2)
!6360 = !DILocation(line: 29, column: 163, scope: !6361)
!6361 = !DILexicalBlockFile(scope: !6362, file: !839, discriminator: 4)
!6362 = !DILexicalBlockFile(scope: !947, file: !839, discriminator: 3)
!6363 = !DILocation(line: 29, column: 148, scope: !947)
!6364 = !DILocation(line: 29, column: 171, scope: !947)
!6365 = !DILocation(line: 29, column: 129, scope: !947)
!6366 = !DILocation(line: 29, column: 7, scope: !947)
!6367 = !DILocation(line: 30, column: 46, scope: !966)
!6368 = !DILocation(line: 30, column: 31, scope: !966)
!6369 = !DILocation(line: 30, column: 54, scope: !966)
!6370 = !DILocation(line: 30, column: 29, scope: !966)
!6371 = !DILocation(line: 30, column: 88, scope: !6372)
!6372 = !DILexicalBlockFile(scope: !966, file: !839, discriminator: 1)
!6373 = !DILocation(line: 30, column: 66, scope: !966)
!6374 = !DILocation(line: 30, column: 96, scope: !966)
!6375 = !DILocation(line: 30, column: 29, scope: !6376)
!6376 = !DILexicalBlockFile(scope: !966, file: !839, discriminator: 2)
!6377 = !DILocation(line: 30, column: 12, scope: !6378)
!6378 = !DILexicalBlockFile(scope: !6379, file: !839, discriminator: 4)
!6379 = !DILexicalBlockFile(scope: !966, file: !839, discriminator: 3)
!6380 = !DILocation(line: 30, column: 10, scope: !966)
!6381 = !DILocation(line: 30, column: 135, scope: !6382)
!6382 = !DILexicalBlockFile(scope: !6383, file: !839, discriminator: 6)
!6383 = !DILexicalBlockFile(scope: !965, file: !839, discriminator: 5)
!6384 = !DILocation(line: 30, column: 139, scope: !965)
!6385 = !DILocation(line: 30, column: 137, scope: !965)
!6386 = !DILocation(line: 30, column: 5, scope: !966)
!6387 = !DILocation(line: 31, column: 14, scope: !963)
!6388 = !DILocation(line: 31, column: 13, scope: !963)
!6389 = !DILocation(line: 31, column: 16, scope: !963)
!6390 = !DILocation(line: 31, column: 13, scope: !964)
!6391 = !DILocation(line: 32, column: 17, scope: !961)
!6392 = !DILocation(line: 32, column: 25, scope: !961)
!6393 = !DILocation(line: 32, column: 17, scope: !962)
!6394 = !DILocation(line: 33, column: 17, scope: !960)
!6395 = !DILocation(line: 33, column: 28, scope: !960)
!6396 = !DILocation(line: 33, column: 35, scope: !960)
!6397 = !DILocation(line: 33, column: 46, scope: !960)
!6398 = !DILocation(line: 33, column: 50, scope: !960)
!6399 = !DILocation(line: 33, column: 48, scope: !960)
!6400 = !DILocation(line: 33, column: 43, scope: !960)
!6401 = !DILocation(line: 34, column: 21, scope: !6402)
!6402 = distinct !DILexicalBlock(scope: !960, file: !839, line: 34, column: 21)
!6403 = !DILocation(line: 34, column: 59, scope: !6402)
!6404 = !DILocation(line: 34, column: 57, scope: !6402)
!6405 = !DILocation(line: 34, column: 23, scope: !6402)
!6406 = !DILocation(line: 34, column: 21, scope: !960)
!6407 = !DILocation(line: 35, column: 21, scope: !6402)
!6408 = !DILocation(line: 36, column: 22, scope: !960)
!6409 = !DILocation(line: 36, column: 19, scope: !960)
!6410 = !DILocation(line: 37, column: 13, scope: !961)
!6411 = !DILocation(line: 37, column: 13, scope: !6412)
!6412 = !DILexicalBlockFile(scope: !961, file: !839, discriminator: 1)
!6413 = !DILocation(line: 37, column: 13, scope: !960)
!6414 = !DILocation(line: 38, column: 9, scope: !962)
!6415 = !DILocation(line: 40, column: 17, scope: !6416)
!6416 = distinct !DILexicalBlock(scope: !6417, file: !839, line: 40, column: 17)
!6417 = distinct !DILexicalBlock(scope: !963, file: !839, line: 39, column: 14)
!6418 = !DILocation(line: 40, column: 19, scope: !6416)
!6419 = !DILocation(line: 40, column: 17, scope: !6417)
!6420 = !DILocation(line: 41, column: 17, scope: !6416)
!6421 = !DILocation(line: 42, column: 14, scope: !6417)
!6422 = !DILocation(line: 43, column: 18, scope: !6423)
!6423 = distinct !DILexicalBlock(scope: !6417, file: !839, line: 43, column: 17)
!6424 = !DILocation(line: 43, column: 17, scope: !6423)
!6425 = !DILocation(line: 43, column: 20, scope: !6423)
!6426 = !DILocation(line: 43, column: 28, scope: !6423)
!6427 = !DILocation(line: 43, column: 32, scope: !6428)
!6428 = !DILexicalBlockFile(scope: !6423, file: !839, discriminator: 1)
!6429 = !DILocation(line: 43, column: 31, scope: !6423)
!6430 = !DILocation(line: 43, column: 34, scope: !6423)
!6431 = !DILocation(line: 43, column: 17, scope: !6417)
!6432 = !DILocation(line: 44, column: 21, scope: !6433)
!6433 = distinct !DILexicalBlock(scope: !6434, file: !839, line: 44, column: 21)
!6434 = distinct !DILexicalBlock(scope: !6423, file: !839, line: 43, column: 43)
!6435 = !DILocation(line: 44, column: 59, scope: !6433)
!6436 = !DILocation(line: 44, column: 57, scope: !6433)
!6437 = !DILocation(line: 44, column: 23, scope: !6433)
!6438 = !DILocation(line: 44, column: 21, scope: !6434)
!6439 = !DILocation(line: 45, column: 21, scope: !6433)
!6440 = !DILocation(line: 46, column: 22, scope: !6434)
!6441 = !DILocation(line: 46, column: 19, scope: !6434)
!6442 = !DILocation(line: 47, column: 19, scope: !6434)
!6443 = !DILocation(line: 48, column: 13, scope: !6434)
!6444 = !DILocation(line: 50, column: 5, scope: !964)
!6445 = !DILocation(line: 30, column: 143, scope: !965)
!6446 = !DILocation(line: 30, column: 5, scope: !965)
!6447 = !DILocation(line: 52, column: 9, scope: !6448)
!6448 = distinct !DILexicalBlock(scope: !947, file: !839, line: 52, column: 9)
!6449 = !DILocation(line: 52, column: 47, scope: !6448)
!6450 = !DILocation(line: 52, column: 45, scope: !6448)
!6451 = !DILocation(line: 52, column: 11, scope: !6448)
!6452 = !DILocation(line: 52, column: 9, scope: !947)
!6453 = !DILocation(line: 53, column: 9, scope: !6448)
!6454 = !DILocation(line: 56, column: 51, scope: !947)
!6455 = !DILocation(line: 56, column: 55, scope: !947)
!6456 = !DILocation(line: 56, column: 53, scope: !947)
!6457 = !DILocation(line: 56, column: 9, scope: !947)
!6458 = !DILocation(line: 56, column: 7, scope: !947)
!6459 = !DILocation(line: 57, column: 10, scope: !6460)
!6460 = distinct !DILexicalBlock(scope: !947, file: !839, line: 57, column: 9)
!6461 = !DILocation(line: 57, column: 9, scope: !947)
!6462 = !DILocation(line: 58, column: 9, scope: !6460)
!6463 = !DILocation(line: 60, column: 7, scope: !947)
!6464 = !DILocation(line: 61, column: 41, scope: !947)
!6465 = !DILocation(line: 61, column: 26, scope: !947)
!6466 = !DILocation(line: 61, column: 46, scope: !947)
!6467 = !DILocation(line: 61, column: 24, scope: !947)
!6468 = !DILocation(line: 61, column: 80, scope: !6355)
!6469 = !DILocation(line: 61, column: 58, scope: !947)
!6470 = !DILocation(line: 61, column: 85, scope: !947)
!6471 = !DILocation(line: 61, column: 24, scope: !6359)
!6472 = !DILocation(line: 61, column: 7, scope: !6361)
!6473 = !DILocation(line: 63, column: 46, scope: !6474)
!6474 = distinct !DILexicalBlock(scope: !947, file: !839, line: 63, column: 5)
!6475 = !DILocation(line: 63, column: 31, scope: !6474)
!6476 = !DILocation(line: 63, column: 54, scope: !6474)
!6477 = !DILocation(line: 63, column: 29, scope: !6474)
!6478 = !DILocation(line: 63, column: 88, scope: !6479)
!6479 = !DILexicalBlockFile(scope: !6474, file: !839, discriminator: 1)
!6480 = !DILocation(line: 63, column: 66, scope: !6474)
!6481 = !DILocation(line: 63, column: 96, scope: !6474)
!6482 = !DILocation(line: 63, column: 29, scope: !6483)
!6483 = !DILexicalBlockFile(scope: !6474, file: !839, discriminator: 2)
!6484 = !DILocation(line: 63, column: 12, scope: !6485)
!6485 = !DILexicalBlockFile(scope: !6486, file: !839, discriminator: 4)
!6486 = !DILexicalBlockFile(scope: !6474, file: !839, discriminator: 3)
!6487 = !DILocation(line: 63, column: 10, scope: !6474)
!6488 = !DILocation(line: 63, column: 135, scope: !6489)
!6489 = !DILexicalBlockFile(scope: !6490, file: !839, discriminator: 6)
!6490 = !DILexicalBlockFile(scope: !6491, file: !839, discriminator: 5)
!6491 = distinct !DILexicalBlock(scope: !6474, file: !839, line: 63, column: 5)
!6492 = !DILocation(line: 63, column: 139, scope: !6491)
!6493 = !DILocation(line: 63, column: 137, scope: !6491)
!6494 = !DILocation(line: 63, column: 5, scope: !6474)
!6495 = !DILocation(line: 64, column: 14, scope: !6496)
!6496 = distinct !DILexicalBlock(scope: !6497, file: !839, line: 64, column: 13)
!6497 = distinct !DILexicalBlock(scope: !6491, file: !839, line: 63, column: 147)
!6498 = !DILocation(line: 64, column: 13, scope: !6496)
!6499 = !DILocation(line: 64, column: 16, scope: !6496)
!6500 = !DILocation(line: 64, column: 13, scope: !6497)
!6501 = !DILocation(line: 65, column: 17, scope: !6502)
!6502 = distinct !DILexicalBlock(scope: !6503, file: !839, line: 65, column: 17)
!6503 = distinct !DILexicalBlock(scope: !6496, file: !839, line: 64, column: 25)
!6504 = !DILocation(line: 65, column: 25, scope: !6502)
!6505 = !DILocation(line: 65, column: 17, scope: !6503)
!6506 = !DILocation(line: 66, column: 21, scope: !6507)
!6507 = distinct !DILexicalBlock(scope: !6502, file: !839, line: 65, column: 30)
!6508 = !DILocation(line: 66, column: 32, scope: !6507)
!6509 = !DILocation(line: 66, column: 36, scope: !6507)
!6510 = !DILocation(line: 66, column: 34, scope: !6507)
!6511 = !DILocation(line: 66, column: 29, scope: !6507)
!6512 = !DILocation(line: 66, column: 19, scope: !6507)
!6513 = !DILocation(line: 67, column: 22, scope: !6507)
!6514 = !DILocation(line: 67, column: 19, scope: !6507)
!6515 = !DILocation(line: 68, column: 17, scope: !6507)
!6516 = !DILocation(line: 68, column: 25, scope: !6517)
!6517 = !DILexicalBlockFile(scope: !6518, file: !839, discriminator: 2)
!6518 = !DILexicalBlockFile(scope: !6507, file: !839, discriminator: 1)
!6519 = !DILocation(line: 69, column: 23, scope: !6507)
!6520 = !DILocation(line: 69, column: 26, scope: !6507)
!6521 = !DILocation(line: 70, column: 13, scope: !6507)
!6522 = !DILocation(line: 71, column: 9, scope: !6503)
!6523 = !DILocation(line: 73, column: 14, scope: !6524)
!6524 = distinct !DILexicalBlock(scope: !6496, file: !839, line: 72, column: 14)
!6525 = !DILocation(line: 74, column: 21, scope: !6524)
!6526 = !DILocation(line: 74, column: 20, scope: !6524)
!6527 = !DILocation(line: 74, column: 15, scope: !6524)
!6528 = !DILocation(line: 74, column: 18, scope: !6524)
!6529 = !DILocation(line: 75, column: 18, scope: !6530)
!6530 = distinct !DILexicalBlock(scope: !6524, file: !839, line: 75, column: 17)
!6531 = !DILocation(line: 75, column: 17, scope: !6530)
!6532 = !DILocation(line: 75, column: 20, scope: !6530)
!6533 = !DILocation(line: 75, column: 28, scope: !6530)
!6534 = !DILocation(line: 75, column: 32, scope: !6535)
!6535 = !DILexicalBlockFile(scope: !6530, file: !839, discriminator: 1)
!6536 = !DILocation(line: 75, column: 31, scope: !6530)
!6537 = !DILocation(line: 75, column: 34, scope: !6530)
!6538 = !DILocation(line: 75, column: 17, scope: !6524)
!6539 = !DILocation(line: 76, column: 19, scope: !6530)
!6540 = !DILocation(line: 76, column: 17, scope: !6530)
!6541 = !DILocation(line: 78, column: 5, scope: !6497)
!6542 = !DILocation(line: 63, column: 143, scope: !6491)
!6543 = !DILocation(line: 63, column: 5, scope: !6491)
!6544 = !DILocation(line: 80, column: 12, scope: !947)
!6545 = !DILocation(line: 80, column: 5, scope: !947)
!6546 = !DILocation(line: 82, column: 21, scope: !947)
!6547 = !DILocation(line: 82, column: 5, scope: !947)
!6548 = !DILocation(line: 83, column: 5, scope: !947)
!6549 = !DILocation(line: 84, column: 1, scope: !947)
!6550 = !DILocation(line: 2315, column: 37, scope: !967)
!6551 = !DILocation(line: 2315, column: 53, scope: !967)
!6552 = !DILocation(line: 2317, column: 5, scope: !967)
!6553 = !DILocation(line: 2317, column: 15, scope: !967)
!6554 = !DILocation(line: 2317, column: 20, scope: !967)
!6555 = !DILocation(line: 2317, column: 27, scope: !967)
!6556 = !DILocation(line: 2318, column: 5, scope: !967)
!6557 = !DILocation(line: 2318, column: 16, scope: !967)
!6558 = !DILocation(line: 2318, column: 30, scope: !967)
!6559 = !DILocation(line: 2319, column: 5, scope: !967)
!6560 = !DILocation(line: 2319, column: 9, scope: !967)
!6561 = !DILocation(line: 2320, column: 5, scope: !967)
!6562 = !DILocation(line: 2320, column: 11, scope: !967)
!6563 = !DILocation(line: 2323, column: 12, scope: !6564)
!6564 = distinct !DILexicalBlock(scope: !967, file: !458, line: 2323, column: 9)
!6565 = !DILocation(line: 2323, column: 18, scope: !6564)
!6566 = !DILocation(line: 2323, column: 27, scope: !6564)
!6567 = !DILocation(line: 2323, column: 40, scope: !6564)
!6568 = !DILocation(line: 2323, column: 55, scope: !6564)
!6569 = !DILocation(line: 2323, column: 60, scope: !6570)
!6570 = !DILexicalBlockFile(scope: !6564, file: !458, discriminator: 1)
!6571 = !DILocation(line: 2323, column: 66, scope: !6564)
!6572 = !DILocation(line: 2323, column: 75, scope: !6564)
!6573 = !DILocation(line: 2323, column: 89, scope: !6564)
!6574 = !DILocation(line: 2323, column: 102, scope: !6564)
!6575 = !DILocation(line: 2323, column: 9, scope: !967)
!6576 = !DILocation(line: 2324, column: 32, scope: !6577)
!6577 = distinct !DILexicalBlock(scope: !6578, file: !458, line: 2324, column: 13)
!6578 = distinct !DILexicalBlock(scope: !6564, file: !458, line: 2323, column: 119)
!6579 = !DILocation(line: 2324, column: 55, scope: !6577)
!6580 = !DILocation(line: 2324, column: 40, scope: !6577)
!6581 = !DILocation(line: 2324, column: 63, scope: !6577)
!6582 = !DILocation(line: 2324, column: 90, scope: !6577)
!6583 = !DILocation(line: 2324, column: 75, scope: !6577)
!6584 = !DILocation(line: 2324, column: 98, scope: !6577)
!6585 = !DILocation(line: 2324, column: 108, scope: !6577)
!6586 = !DILocation(line: 2324, column: 13, scope: !6577)
!6587 = !DILocation(line: 2324, column: 113, scope: !6577)
!6588 = !DILocation(line: 2324, column: 13, scope: !6578)
!6589 = !DILocation(line: 2325, column: 13, scope: !6577)
!6590 = !DILocation(line: 2327, column: 62, scope: !6578)
!6591 = !DILocation(line: 2327, column: 9, scope: !6578)
!6592 = !DILocation(line: 2330, column: 27, scope: !967)
!6593 = !DILocation(line: 2330, column: 10, scope: !967)
!6594 = !DILocation(line: 2330, column: 8, scope: !967)
!6595 = !DILocation(line: 2331, column: 9, scope: !6596)
!6596 = distinct !DILexicalBlock(scope: !967, file: !458, line: 2331, column: 9)
!6597 = !DILocation(line: 2331, column: 12, scope: !6596)
!6598 = !DILocation(line: 2331, column: 9, scope: !967)
!6599 = !DILocation(line: 2332, column: 9, scope: !6596)
!6600 = !DILocation(line: 2335, column: 36, scope: !967)
!6601 = !DILocation(line: 2335, column: 16, scope: !967)
!6602 = !DILocation(line: 2335, column: 14, scope: !967)
!6603 = !DILocation(line: 2336, column: 9, scope: !981)
!6604 = !DILocation(line: 2336, column: 18, scope: !981)
!6605 = !DILocation(line: 2336, column: 9, scope: !967)
!6606 = !DILocation(line: 2337, column: 9, scope: !980)
!6607 = !DILocation(line: 2337, column: 14, scope: !6608)
!6608 = !DILexicalBlockFile(scope: !979, file: !458, discriminator: 1)
!6609 = !DILocation(line: 2337, column: 24, scope: !979)
!6610 = !DILocation(line: 2337, column: 54, scope: !979)
!6611 = !DILocation(line: 2337, column: 67, scope: !6612)
!6612 = distinct !DILexicalBlock(scope: !979, file: !458, line: 2337, column: 64)
!6613 = !DILocation(line: 2337, column: 84, scope: !6612)
!6614 = !DILocation(line: 2337, column: 64, scope: !6612)
!6615 = !DILocation(line: 2337, column: 94, scope: !6612)
!6616 = !DILocation(line: 2337, column: 64, scope: !979)
!6617 = !DILocation(line: 2337, column: 64, scope: !6618)
!6618 = !DILexicalBlockFile(scope: !979, file: !458, discriminator: 2)
!6619 = !DILocation(line: 2337, column: 125, scope: !6620)
!6620 = !DILexicalBlockFile(scope: !6612, file: !458, discriminator: 3)
!6621 = !DILocation(line: 2337, column: 143, scope: !6612)
!6622 = !DILocation(line: 2337, column: 153, scope: !6612)
!6623 = !DILocation(line: 2337, column: 178, scope: !6612)
!6624 = !DILocation(line: 2337, column: 109, scope: !6612)
!6625 = !DILocation(line: 2337, column: 197, scope: !6626)
!6626 = !DILexicalBlockFile(scope: !980, file: !458, discriminator: 4)
!6627 = !DILocation(line: 2337, column: 197, scope: !979)
!6628 = !DILocation(line: 2337, column: 197, scope: !6629)
!6629 = !DILexicalBlockFile(scope: !979, file: !458, discriminator: 5)
!6630 = !DILocation(line: 2338, column: 9, scope: !980)
!6631 = !DILocation(line: 2341, column: 63, scope: !967)
!6632 = !DILocation(line: 2341, column: 21, scope: !967)
!6633 = !DILocation(line: 2341, column: 19, scope: !967)
!6634 = !DILocation(line: 2342, column: 9, scope: !985)
!6635 = !DILocation(line: 2342, column: 23, scope: !985)
!6636 = !DILocation(line: 2342, column: 9, scope: !967)
!6637 = !DILocation(line: 2343, column: 9, scope: !984)
!6638 = !DILocation(line: 2343, column: 14, scope: !6639)
!6639 = !DILexicalBlockFile(scope: !983, file: !458, discriminator: 1)
!6640 = !DILocation(line: 2343, column: 24, scope: !983)
!6641 = !DILocation(line: 2343, column: 54, scope: !983)
!6642 = !DILocation(line: 2343, column: 67, scope: !6643)
!6643 = distinct !DILexicalBlock(scope: !983, file: !458, line: 2343, column: 64)
!6644 = !DILocation(line: 2343, column: 84, scope: !6643)
!6645 = !DILocation(line: 2343, column: 64, scope: !6643)
!6646 = !DILocation(line: 2343, column: 94, scope: !6643)
!6647 = !DILocation(line: 2343, column: 64, scope: !983)
!6648 = !DILocation(line: 2343, column: 64, scope: !6649)
!6649 = !DILexicalBlockFile(scope: !983, file: !458, discriminator: 2)
!6650 = !DILocation(line: 2343, column: 125, scope: !6651)
!6651 = !DILexicalBlockFile(scope: !6643, file: !458, discriminator: 3)
!6652 = !DILocation(line: 2343, column: 143, scope: !6643)
!6653 = !DILocation(line: 2343, column: 153, scope: !6643)
!6654 = !DILocation(line: 2343, column: 178, scope: !6643)
!6655 = !DILocation(line: 2343, column: 109, scope: !6643)
!6656 = !DILocation(line: 2343, column: 197, scope: !6657)
!6657 = !DILexicalBlockFile(scope: !984, file: !458, discriminator: 4)
!6658 = !DILocation(line: 2343, column: 197, scope: !983)
!6659 = !DILocation(line: 2343, column: 197, scope: !6660)
!6660 = !DILexicalBlockFile(scope: !983, file: !458, discriminator: 5)
!6661 = !DILocation(line: 2344, column: 9, scope: !984)
!6662 = !DILocation(line: 2346, column: 43, scope: !967)
!6663 = !DILocation(line: 2346, column: 28, scope: !967)
!6664 = !DILocation(line: 2346, column: 60, scope: !967)
!6665 = !DILocation(line: 2346, column: 26, scope: !967)
!6666 = !DILocation(line: 2346, column: 94, scope: !6667)
!6667 = !DILexicalBlockFile(scope: !967, file: !458, discriminator: 1)
!6668 = !DILocation(line: 2346, column: 72, scope: !967)
!6669 = !DILocation(line: 2346, column: 111, scope: !967)
!6670 = !DILocation(line: 2346, column: 26, scope: !6671)
!6671 = !DILexicalBlockFile(scope: !967, file: !458, discriminator: 2)
!6672 = !DILocation(line: 2346, column: 9, scope: !6673)
!6673 = !DILexicalBlockFile(scope: !6674, file: !458, discriminator: 4)
!6674 = !DILexicalBlockFile(scope: !967, file: !458, discriminator: 3)
!6675 = !DILocation(line: 2348, column: 5, scope: !967)
!6676 = !DILocation(line: 2348, column: 32, scope: !6677)
!6677 = !DILexicalBlockFile(scope: !6667, file: !458, discriminator: 2)
!6678 = !DILocation(line: 2348, column: 20, scope: !967)
!6679 = !DILocation(line: 2348, column: 18, scope: !967)
!6680 = !DILocation(line: 2348, column: 37, scope: !967)
!6681 = !DILocation(line: 2349, column: 29, scope: !989)
!6682 = !DILocation(line: 2349, column: 15, scope: !989)
!6683 = !DILocation(line: 2349, column: 13, scope: !990)
!6684 = !DILocation(line: 2350, column: 13, scope: !988)
!6685 = !DILocation(line: 2350, column: 18, scope: !6686)
!6686 = !DILexicalBlockFile(scope: !987, file: !458, discriminator: 1)
!6687 = !DILocation(line: 2350, column: 28, scope: !987)
!6688 = !DILocation(line: 2350, column: 58, scope: !987)
!6689 = !DILocation(line: 2350, column: 73, scope: !6690)
!6690 = distinct !DILexicalBlock(scope: !987, file: !458, line: 2350, column: 70)
!6691 = !DILocation(line: 2350, column: 90, scope: !6690)
!6692 = !DILocation(line: 2350, column: 70, scope: !6690)
!6693 = !DILocation(line: 2350, column: 100, scope: !6690)
!6694 = !DILocation(line: 2350, column: 70, scope: !987)
!6695 = !DILocation(line: 2350, column: 70, scope: !6696)
!6696 = !DILexicalBlockFile(scope: !987, file: !458, discriminator: 2)
!6697 = !DILocation(line: 2350, column: 131, scope: !6698)
!6698 = !DILexicalBlockFile(scope: !6690, file: !458, discriminator: 3)
!6699 = !DILocation(line: 2350, column: 149, scope: !6690)
!6700 = !DILocation(line: 2350, column: 159, scope: !6690)
!6701 = !DILocation(line: 2350, column: 184, scope: !6690)
!6702 = !DILocation(line: 2350, column: 115, scope: !6690)
!6703 = !DILocation(line: 2350, column: 203, scope: !6704)
!6704 = !DILexicalBlockFile(scope: !988, file: !458, discriminator: 4)
!6705 = !DILocation(line: 2350, column: 203, scope: !987)
!6706 = !DILocation(line: 2350, column: 203, scope: !6707)
!6707 = !DILexicalBlockFile(scope: !987, file: !458, discriminator: 5)
!6708 = !DILocation(line: 2351, column: 13, scope: !988)
!6709 = !DILocation(line: 2351, column: 18, scope: !6710)
!6710 = !DILexicalBlockFile(scope: !992, file: !458, discriminator: 1)
!6711 = !DILocation(line: 2351, column: 28, scope: !992)
!6712 = !DILocation(line: 2351, column: 58, scope: !992)
!6713 = !DILocation(line: 2351, column: 71, scope: !6714)
!6714 = distinct !DILexicalBlock(scope: !992, file: !458, line: 2351, column: 68)
!6715 = !DILocation(line: 2351, column: 88, scope: !6714)
!6716 = !DILocation(line: 2351, column: 68, scope: !6714)
!6717 = !DILocation(line: 2351, column: 98, scope: !6714)
!6718 = !DILocation(line: 2351, column: 68, scope: !992)
!6719 = !DILocation(line: 2351, column: 68, scope: !6720)
!6720 = !DILexicalBlockFile(scope: !992, file: !458, discriminator: 2)
!6721 = !DILocation(line: 2351, column: 129, scope: !6722)
!6722 = !DILexicalBlockFile(scope: !6714, file: !458, discriminator: 3)
!6723 = !DILocation(line: 2351, column: 147, scope: !6714)
!6724 = !DILocation(line: 2351, column: 157, scope: !6714)
!6725 = !DILocation(line: 2351, column: 182, scope: !6714)
!6726 = !DILocation(line: 2351, column: 113, scope: !6714)
!6727 = !DILocation(line: 2351, column: 201, scope: !6704)
!6728 = !DILocation(line: 2351, column: 201, scope: !992)
!6729 = !DILocation(line: 2351, column: 201, scope: !6730)
!6730 = !DILexicalBlockFile(scope: !992, file: !458, discriminator: 5)
!6731 = !DILocation(line: 2352, column: 13, scope: !988)
!6732 = !DILocation(line: 2352, column: 18, scope: !6733)
!6733 = !DILexicalBlockFile(scope: !994, file: !458, discriminator: 1)
!6734 = !DILocation(line: 2352, column: 28, scope: !994)
!6735 = !DILocation(line: 2352, column: 58, scope: !994)
!6736 = !DILocation(line: 2352, column: 82, scope: !6737)
!6737 = distinct !DILexicalBlock(scope: !994, file: !458, line: 2352, column: 79)
!6738 = !DILocation(line: 2352, column: 99, scope: !6737)
!6739 = !DILocation(line: 2352, column: 79, scope: !6737)
!6740 = !DILocation(line: 2352, column: 109, scope: !6737)
!6741 = !DILocation(line: 2352, column: 79, scope: !994)
!6742 = !DILocation(line: 2352, column: 79, scope: !6743)
!6743 = !DILexicalBlockFile(scope: !994, file: !458, discriminator: 2)
!6744 = !DILocation(line: 2352, column: 140, scope: !6745)
!6745 = !DILexicalBlockFile(scope: !6737, file: !458, discriminator: 3)
!6746 = !DILocation(line: 2352, column: 158, scope: !6737)
!6747 = !DILocation(line: 2352, column: 168, scope: !6737)
!6748 = !DILocation(line: 2352, column: 193, scope: !6737)
!6749 = !DILocation(line: 2352, column: 124, scope: !6737)
!6750 = !DILocation(line: 2352, column: 212, scope: !6704)
!6751 = !DILocation(line: 2352, column: 212, scope: !994)
!6752 = !DILocation(line: 2352, column: 212, scope: !6753)
!6753 = !DILexicalBlockFile(scope: !994, file: !458, discriminator: 5)
!6754 = !DILocation(line: 2353, column: 13, scope: !988)
!6755 = !DILocation(line: 2355, column: 22, scope: !990)
!6756 = !DILocation(line: 2355, column: 16, scope: !990)
!6757 = !DILocation(line: 2355, column: 9, scope: !990)
!6758 = !DILocation(line: 2355, column: 20, scope: !990)
!6759 = !DILocation(line: 2356, column: 9, scope: !990)
!6760 = !DILocation(line: 2356, column: 14, scope: !6761)
!6761 = !DILexicalBlockFile(scope: !996, file: !458, discriminator: 1)
!6762 = !DILocation(line: 2356, column: 24, scope: !996)
!6763 = !DILocation(line: 2356, column: 54, scope: !996)
!6764 = !DILocation(line: 2356, column: 69, scope: !6765)
!6765 = distinct !DILexicalBlock(scope: !996, file: !458, line: 2356, column: 66)
!6766 = !DILocation(line: 2356, column: 86, scope: !6765)
!6767 = !DILocation(line: 2356, column: 66, scope: !6765)
!6768 = !DILocation(line: 2356, column: 96, scope: !6765)
!6769 = !DILocation(line: 2356, column: 66, scope: !996)
!6770 = !DILocation(line: 2356, column: 66, scope: !6771)
!6771 = !DILexicalBlockFile(scope: !996, file: !458, discriminator: 2)
!6772 = !DILocation(line: 2356, column: 127, scope: !6773)
!6773 = !DILexicalBlockFile(scope: !6765, file: !458, discriminator: 3)
!6774 = !DILocation(line: 2356, column: 145, scope: !6765)
!6775 = !DILocation(line: 2356, column: 155, scope: !6765)
!6776 = !DILocation(line: 2356, column: 180, scope: !6765)
!6777 = !DILocation(line: 2356, column: 111, scope: !6765)
!6778 = !DILocation(line: 2356, column: 199, scope: !6779)
!6779 = !DILexicalBlockFile(scope: !990, file: !458, discriminator: 4)
!6780 = !DILocation(line: 2356, column: 199, scope: !996)
!6781 = !DILocation(line: 2356, column: 199, scope: !6782)
!6782 = !DILexicalBlockFile(scope: !996, file: !458, discriminator: 5)
!6783 = !DILocation(line: 2358, column: 13, scope: !1002)
!6784 = !DILocation(line: 2358, column: 20, scope: !1002)
!6785 = !DILocation(line: 2358, column: 17, scope: !1002)
!6786 = !DILocation(line: 2358, column: 13, scope: !990)
!6787 = !DILocation(line: 2359, column: 24, scope: !1001)
!6788 = !DILocation(line: 2359, column: 31, scope: !1001)
!6789 = !DILocation(line: 2359, column: 35, scope: !1001)
!6790 = !DILocation(line: 2359, column: 28, scope: !1001)
!6791 = !DILocation(line: 2359, column: 41, scope: !1001)
!6792 = !DILocation(line: 2359, column: 22, scope: !1001)
!6793 = !DILocation(line: 2360, column: 48, scope: !1000)
!6794 = !DILocation(line: 2360, column: 63, scope: !1000)
!6795 = !DILocation(line: 2360, column: 17, scope: !1000)
!6796 = !DILocation(line: 2360, column: 73, scope: !1000)
!6797 = !DILocation(line: 2360, column: 17, scope: !1001)
!6798 = !DILocation(line: 2361, column: 17, scope: !999)
!6799 = !DILocation(line: 2361, column: 22, scope: !6800)
!6800 = !DILexicalBlockFile(scope: !998, file: !458, discriminator: 1)
!6801 = !DILocation(line: 2361, column: 32, scope: !998)
!6802 = !DILocation(line: 2361, column: 62, scope: !998)
!6803 = !DILocation(line: 2361, column: 75, scope: !6804)
!6804 = distinct !DILexicalBlock(scope: !998, file: !458, line: 2361, column: 72)
!6805 = !DILocation(line: 2361, column: 92, scope: !6804)
!6806 = !DILocation(line: 2361, column: 72, scope: !6804)
!6807 = !DILocation(line: 2361, column: 102, scope: !6804)
!6808 = !DILocation(line: 2361, column: 72, scope: !998)
!6809 = !DILocation(line: 2361, column: 72, scope: !6810)
!6810 = !DILexicalBlockFile(scope: !998, file: !458, discriminator: 2)
!6811 = !DILocation(line: 2361, column: 133, scope: !6812)
!6812 = !DILexicalBlockFile(scope: !6804, file: !458, discriminator: 3)
!6813 = !DILocation(line: 2361, column: 151, scope: !6804)
!6814 = !DILocation(line: 2361, column: 161, scope: !6804)
!6815 = !DILocation(line: 2361, column: 186, scope: !6804)
!6816 = !DILocation(line: 2361, column: 117, scope: !6804)
!6817 = !DILocation(line: 2361, column: 205, scope: !6818)
!6818 = !DILexicalBlockFile(scope: !999, file: !458, discriminator: 4)
!6819 = !DILocation(line: 2361, column: 205, scope: !998)
!6820 = !DILocation(line: 2361, column: 205, scope: !6821)
!6821 = !DILexicalBlockFile(scope: !998, file: !458, discriminator: 5)
!6822 = !DILocation(line: 2362, column: 17, scope: !999)
!6823 = !DILocation(line: 2362, column: 22, scope: !6824)
!6824 = !DILexicalBlockFile(scope: !1004, file: !458, discriminator: 1)
!6825 = !DILocation(line: 2362, column: 32, scope: !1004)
!6826 = !DILocation(line: 2362, column: 62, scope: !1004)
!6827 = !DILocation(line: 2362, column: 86, scope: !6828)
!6828 = distinct !DILexicalBlock(scope: !1004, file: !458, line: 2362, column: 83)
!6829 = !DILocation(line: 2362, column: 103, scope: !6828)
!6830 = !DILocation(line: 2362, column: 83, scope: !6828)
!6831 = !DILocation(line: 2362, column: 113, scope: !6828)
!6832 = !DILocation(line: 2362, column: 83, scope: !1004)
!6833 = !DILocation(line: 2362, column: 83, scope: !6834)
!6834 = !DILexicalBlockFile(scope: !1004, file: !458, discriminator: 2)
!6835 = !DILocation(line: 2362, column: 144, scope: !6836)
!6836 = !DILexicalBlockFile(scope: !6828, file: !458, discriminator: 3)
!6837 = !DILocation(line: 2362, column: 162, scope: !6828)
!6838 = !DILocation(line: 2362, column: 172, scope: !6828)
!6839 = !DILocation(line: 2362, column: 197, scope: !6828)
!6840 = !DILocation(line: 2362, column: 128, scope: !6828)
!6841 = !DILocation(line: 2362, column: 216, scope: !6818)
!6842 = !DILocation(line: 2362, column: 216, scope: !1004)
!6843 = !DILocation(line: 2362, column: 216, scope: !6844)
!6844 = !DILexicalBlockFile(scope: !1004, file: !458, discriminator: 5)
!6845 = !DILocation(line: 2363, column: 17, scope: !999)
!6846 = !DILocation(line: 2367, column: 51, scope: !1001)
!6847 = !DILocation(line: 2367, column: 36, scope: !1001)
!6848 = !DILocation(line: 2367, column: 68, scope: !1001)
!6849 = !DILocation(line: 2367, column: 34, scope: !1001)
!6850 = !DILocation(line: 2367, column: 102, scope: !6851)
!6851 = !DILexicalBlockFile(scope: !1001, file: !458, discriminator: 1)
!6852 = !DILocation(line: 2367, column: 80, scope: !1001)
!6853 = !DILocation(line: 2367, column: 119, scope: !1001)
!6854 = !DILocation(line: 2367, column: 34, scope: !6855)
!6855 = !DILexicalBlockFile(scope: !1001, file: !458, discriminator: 2)
!6856 = !DILocation(line: 2367, column: 17, scope: !6857)
!6857 = !DILexicalBlockFile(scope: !6858, file: !458, discriminator: 4)
!6858 = !DILexicalBlockFile(scope: !1001, file: !458, discriminator: 3)
!6859 = !DILocation(line: 2368, column: 9, scope: !1001)
!6860 = !DILocation(line: 2370, column: 5, scope: !967)
!6861 = !DILocation(line: 2370, column: 10, scope: !6862)
!6862 = !DILexicalBlockFile(scope: !1006, file: !458, discriminator: 1)
!6863 = !DILocation(line: 2370, column: 20, scope: !1006)
!6864 = !DILocation(line: 2370, column: 50, scope: !1006)
!6865 = !DILocation(line: 2370, column: 63, scope: !6866)
!6866 = distinct !DILexicalBlock(scope: !1006, file: !458, line: 2370, column: 60)
!6867 = !DILocation(line: 2370, column: 80, scope: !6866)
!6868 = !DILocation(line: 2370, column: 60, scope: !6866)
!6869 = !DILocation(line: 2370, column: 90, scope: !6866)
!6870 = !DILocation(line: 2370, column: 60, scope: !1006)
!6871 = !DILocation(line: 2370, column: 60, scope: !6872)
!6872 = !DILexicalBlockFile(scope: !1006, file: !458, discriminator: 2)
!6873 = !DILocation(line: 2370, column: 121, scope: !6874)
!6874 = !DILexicalBlockFile(scope: !6866, file: !458, discriminator: 3)
!6875 = !DILocation(line: 2370, column: 139, scope: !6866)
!6876 = !DILocation(line: 2370, column: 149, scope: !6866)
!6877 = !DILocation(line: 2370, column: 174, scope: !6866)
!6878 = !DILocation(line: 2370, column: 105, scope: !6866)
!6879 = !DILocation(line: 2370, column: 193, scope: !6880)
!6880 = !DILexicalBlockFile(scope: !967, file: !458, discriminator: 4)
!6881 = !DILocation(line: 2370, column: 193, scope: !1006)
!6882 = !DILocation(line: 2370, column: 193, scope: !6883)
!6883 = !DILexicalBlockFile(scope: !1006, file: !458, discriminator: 5)
!6884 = !DILocation(line: 2373, column: 40, scope: !1010)
!6885 = !DILocation(line: 2373, column: 55, scope: !1010)
!6886 = !DILocation(line: 2373, column: 9, scope: !1010)
!6887 = !DILocation(line: 2373, column: 60, scope: !1010)
!6888 = !DILocation(line: 2373, column: 9, scope: !967)
!6889 = !DILocation(line: 2374, column: 9, scope: !1009)
!6890 = !DILocation(line: 2374, column: 14, scope: !6891)
!6891 = !DILexicalBlockFile(scope: !1008, file: !458, discriminator: 1)
!6892 = !DILocation(line: 2374, column: 24, scope: !1008)
!6893 = !DILocation(line: 2374, column: 54, scope: !1008)
!6894 = !DILocation(line: 2374, column: 78, scope: !6895)
!6895 = distinct !DILexicalBlock(scope: !1008, file: !458, line: 2374, column: 75)
!6896 = !DILocation(line: 2374, column: 95, scope: !6895)
!6897 = !DILocation(line: 2374, column: 75, scope: !6895)
!6898 = !DILocation(line: 2374, column: 105, scope: !6895)
!6899 = !DILocation(line: 2374, column: 75, scope: !1008)
!6900 = !DILocation(line: 2374, column: 75, scope: !6901)
!6901 = !DILexicalBlockFile(scope: !1008, file: !458, discriminator: 2)
!6902 = !DILocation(line: 2374, column: 136, scope: !6903)
!6903 = !DILexicalBlockFile(scope: !6895, file: !458, discriminator: 3)
!6904 = !DILocation(line: 2374, column: 154, scope: !6895)
!6905 = !DILocation(line: 2374, column: 164, scope: !6895)
!6906 = !DILocation(line: 2374, column: 189, scope: !6895)
!6907 = !DILocation(line: 2374, column: 120, scope: !6895)
!6908 = !DILocation(line: 2374, column: 208, scope: !6909)
!6909 = !DILexicalBlockFile(scope: !1009, file: !458, discriminator: 4)
!6910 = !DILocation(line: 2374, column: 208, scope: !1008)
!6911 = !DILocation(line: 2374, column: 208, scope: !6912)
!6912 = !DILexicalBlockFile(scope: !1008, file: !458, discriminator: 5)
!6913 = !DILocation(line: 2375, column: 9, scope: !1009)
!6914 = !DILocation(line: 2378, column: 28, scope: !1014)
!6915 = !DILocation(line: 2378, column: 51, scope: !1014)
!6916 = !DILocation(line: 2378, column: 36, scope: !1014)
!6917 = !DILocation(line: 2378, column: 59, scope: !1014)
!6918 = !DILocation(line: 2378, column: 86, scope: !1014)
!6919 = !DILocation(line: 2378, column: 71, scope: !1014)
!6920 = !DILocation(line: 2378, column: 94, scope: !1014)
!6921 = !DILocation(line: 2378, column: 104, scope: !1014)
!6922 = !DILocation(line: 2378, column: 9, scope: !1014)
!6923 = !DILocation(line: 2378, column: 119, scope: !1014)
!6924 = !DILocation(line: 2378, column: 9, scope: !967)
!6925 = !DILocation(line: 2379, column: 9, scope: !1013)
!6926 = !DILocation(line: 2379, column: 14, scope: !6927)
!6927 = !DILexicalBlockFile(scope: !1012, file: !458, discriminator: 1)
!6928 = !DILocation(line: 2379, column: 24, scope: !1012)
!6929 = !DILocation(line: 2379, column: 54, scope: !1012)
!6930 = !DILocation(line: 2379, column: 78, scope: !6931)
!6931 = distinct !DILexicalBlock(scope: !1012, file: !458, line: 2379, column: 75)
!6932 = !DILocation(line: 2379, column: 95, scope: !6931)
!6933 = !DILocation(line: 2379, column: 75, scope: !6931)
!6934 = !DILocation(line: 2379, column: 105, scope: !6931)
!6935 = !DILocation(line: 2379, column: 75, scope: !1012)
!6936 = !DILocation(line: 2379, column: 75, scope: !6937)
!6937 = !DILexicalBlockFile(scope: !1012, file: !458, discriminator: 2)
!6938 = !DILocation(line: 2379, column: 136, scope: !6939)
!6939 = !DILexicalBlockFile(scope: !6931, file: !458, discriminator: 3)
!6940 = !DILocation(line: 2379, column: 154, scope: !6931)
!6941 = !DILocation(line: 2379, column: 164, scope: !6931)
!6942 = !DILocation(line: 2379, column: 189, scope: !6931)
!6943 = !DILocation(line: 2379, column: 120, scope: !6931)
!6944 = !DILocation(line: 2379, column: 208, scope: !6945)
!6945 = !DILexicalBlockFile(scope: !1013, file: !458, discriminator: 4)
!6946 = !DILocation(line: 2379, column: 208, scope: !1012)
!6947 = !DILocation(line: 2379, column: 208, scope: !6948)
!6948 = !DILexicalBlockFile(scope: !1012, file: !458, discriminator: 5)
!6949 = !DILocation(line: 2380, column: 9, scope: !1013)
!6950 = !DILocation(line: 2382, column: 5, scope: !967)
!6951 = !DILocation(line: 2382, column: 10, scope: !6952)
!6952 = !DILexicalBlockFile(scope: !1016, file: !458, discriminator: 1)
!6953 = !DILocation(line: 2382, column: 20, scope: !1016)
!6954 = !DILocation(line: 2382, column: 50, scope: !1016)
!6955 = !DILocation(line: 2382, column: 74, scope: !6956)
!6956 = distinct !DILexicalBlock(scope: !1016, file: !458, line: 2382, column: 71)
!6957 = !DILocation(line: 2382, column: 91, scope: !6956)
!6958 = !DILocation(line: 2382, column: 71, scope: !6956)
!6959 = !DILocation(line: 2382, column: 101, scope: !6956)
!6960 = !DILocation(line: 2382, column: 71, scope: !1016)
!6961 = !DILocation(line: 2382, column: 71, scope: !6962)
!6962 = !DILexicalBlockFile(scope: !1016, file: !458, discriminator: 2)
!6963 = !DILocation(line: 2382, column: 132, scope: !6964)
!6964 = !DILexicalBlockFile(scope: !6956, file: !458, discriminator: 3)
!6965 = !DILocation(line: 2382, column: 150, scope: !6956)
!6966 = !DILocation(line: 2382, column: 160, scope: !6956)
!6967 = !DILocation(line: 2382, column: 185, scope: !6956)
!6968 = !DILocation(line: 2382, column: 116, scope: !6956)
!6969 = !DILocation(line: 2382, column: 204, scope: !6880)
!6970 = !DILocation(line: 2382, column: 204, scope: !1016)
!6971 = !DILocation(line: 2382, column: 204, scope: !6972)
!6972 = !DILexicalBlockFile(scope: !1016, file: !458, discriminator: 5)
!6973 = !DILocation(line: 2384, column: 58, scope: !967)
!6974 = !DILocation(line: 2384, column: 5, scope: !967)
!6975 = !DILocation(line: 2385, column: 1, scope: !967)
!6976 = !DILocation(line: 1167, column: 35, scope: !1017)
!6977 = !DILocation(line: 1167, column: 51, scope: !1017)
!6978 = !DILocation(line: 1169, column: 5, scope: !1017)
!6979 = !DILocation(line: 1169, column: 16, scope: !1017)
!6980 = !DILocation(line: 1169, column: 49, scope: !1017)
!6981 = !DILocation(line: 1169, column: 55, scope: !1017)
!6982 = !DILocation(line: 1169, column: 25, scope: !1017)
!6983 = !DILocation(line: 1170, column: 9, scope: !6984)
!6984 = distinct !DILexicalBlock(scope: !1017, file: !458, line: 1170, column: 9)
!6985 = !DILocation(line: 1170, column: 16, scope: !6984)
!6986 = !DILocation(line: 1170, column: 9, scope: !1017)
!6987 = !DILocation(line: 1171, column: 9, scope: !6984)
!6988 = !DILocation(line: 1172, column: 31, scope: !1017)
!6989 = !DILocation(line: 1172, column: 12, scope: !1017)
!6990 = !DILocation(line: 1172, column: 5, scope: !1017)
!6991 = !DILocation(line: 1173, column: 1, scope: !1017)
!6992 = !DILocation(line: 2677, column: 29, scope: !1063)
!6993 = !DILocation(line: 2677, column: 44, scope: !1063)
!6994 = !DILocation(line: 2679, column: 5, scope: !1063)
!6995 = !DILocation(line: 2679, column: 15, scope: !1063)
!6996 = !DILocation(line: 2679, column: 26, scope: !1063)
!6997 = !DILocation(line: 2680, column: 5, scope: !1063)
!6998 = !DILocation(line: 2680, column: 11, scope: !1063)
!6999 = !DILocation(line: 2681, column: 5, scope: !1063)
!7000 = !DILocation(line: 2681, column: 16, scope: !1063)
!7001 = !DILocation(line: 2681, column: 24, scope: !1063)
!7002 = !DILocation(line: 2681, column: 34, scope: !1063)
!7003 = !DILocation(line: 2681, column: 37, scope: !1063)
!7004 = !DILocation(line: 2682, column: 5, scope: !1063)
!7005 = !DILocation(line: 2682, column: 9, scope: !1063)
!7006 = !DILocation(line: 2682, column: 14, scope: !1063)
!7007 = !DILocation(line: 2683, column: 5, scope: !1063)
!7008 = !DILocation(line: 2683, column: 11, scope: !1063)
!7009 = !DILocation(line: 2684, column: 5, scope: !1063)
!7010 = !DILocation(line: 2684, column: 18, scope: !1063)
!7011 = !DILocation(line: 2686, column: 34, scope: !7012)
!7012 = distinct !DILexicalBlock(scope: !1063, file: !458, line: 2686, column: 9)
!7013 = !DILocation(line: 2686, column: 10, scope: !7012)
!7014 = !DILocation(line: 2686, column: 9, scope: !1063)
!7015 = !DILocation(line: 2687, column: 9, scope: !7012)
!7016 = !DILocation(line: 2689, column: 43, scope: !7017)
!7017 = distinct !DILexicalBlock(scope: !1063, file: !458, line: 2689, column: 9)
!7018 = !DILocation(line: 2689, column: 27, scope: !7017)
!7019 = !DILocation(line: 2689, column: 52, scope: !7017)
!7020 = !DILocation(line: 2689, column: 58, scope: !7017)
!7021 = !DILocation(line: 2689, column: 25, scope: !7017)
!7022 = !DILocation(line: 2689, column: 25, scope: !7023)
!7023 = !DILexicalBlockFile(scope: !7017, file: !458, discriminator: 1)
!7024 = !DILocation(line: 2689, column: 101, scope: !7025)
!7025 = !DILexicalBlockFile(scope: !7017, file: !458, discriminator: 2)
!7026 = !DILocation(line: 2689, column: 71, scope: !7017)
!7027 = !DILocation(line: 2689, column: 22, scope: !7028)
!7028 = !DILexicalBlockFile(scope: !7029, file: !458, discriminator: 4)
!7029 = !DILexicalBlockFile(scope: !7017, file: !458, discriminator: 3)
!7030 = !DILocation(line: 2689, column: 9, scope: !1063)
!7031 = !DILocation(line: 2690, column: 9, scope: !7017)
!7032 = !DILocation(line: 2691, column: 60, scope: !1063)
!7033 = !DILocation(line: 2691, column: 42, scope: !1063)
!7034 = !DILocation(line: 2691, column: 70, scope: !1063)
!7035 = !DILocation(line: 2691, column: 76, scope: !1063)
!7036 = !DILocation(line: 2691, column: 10, scope: !1063)
!7037 = !DILocation(line: 2692, column: 46, scope: !1063)
!7038 = !DILocation(line: 2692, column: 29, scope: !1063)
!7039 = !DILocation(line: 2692, column: 56, scope: !1063)
!7040 = !DILocation(line: 2692, column: 62, scope: !1063)
!7041 = !DILocation(line: 2692, column: 27, scope: !1063)
!7042 = !DILocation(line: 2692, column: 120, scope: !7043)
!7043 = !DILexicalBlockFile(scope: !1063, file: !458, discriminator: 1)
!7044 = !DILocation(line: 2692, column: 104, scope: !1063)
!7045 = !DILocation(line: 2692, column: 129, scope: !1063)
!7046 = !DILocation(line: 2692, column: 135, scope: !1063)
!7047 = !DILocation(line: 2692, column: 74, scope: !1063)
!7048 = !DILocation(line: 2692, column: 170, scope: !7049)
!7049 = !DILexicalBlockFile(scope: !1063, file: !458, discriminator: 3)
!7050 = !DILocation(line: 2692, column: 153, scope: !1063)
!7051 = !DILocation(line: 2692, column: 178, scope: !1063)
!7052 = !DILocation(line: 2692, column: 145, scope: !1063)
!7053 = !DILocation(line: 2692, column: 221, scope: !7054)
!7054 = !DILexicalBlockFile(scope: !1063, file: !458, discriminator: 4)
!7055 = !DILocation(line: 2692, column: 195, scope: !1063)
!7056 = !DILocation(line: 2692, column: 229, scope: !1063)
!7057 = !DILocation(line: 2692, column: 187, scope: !1063)
!7058 = !DILocation(line: 2692, column: 27, scope: !7059)
!7059 = !DILexicalBlockFile(scope: !7060, file: !458, discriminator: 6)
!7060 = !DILexicalBlockFile(scope: !1063, file: !458, discriminator: 5)
!7061 = !DILocation(line: 2692, column: 276, scope: !7062)
!7062 = !DILexicalBlockFile(scope: !1063, file: !458, discriminator: 2)
!7063 = !DILocation(line: 2692, column: 256, scope: !1063)
!7064 = !DILocation(line: 2692, column: 286, scope: !1063)
!7065 = !DILocation(line: 2692, column: 291, scope: !1063)
!7066 = !DILocation(line: 2692, column: 10, scope: !7067)
!7067 = !DILexicalBlockFile(scope: !7068, file: !458, discriminator: 8)
!7068 = !DILexicalBlockFile(scope: !1063, file: !458, discriminator: 7)
!7069 = !DILocation(line: 2693, column: 62, scope: !1063)
!7070 = !DILocation(line: 2693, column: 44, scope: !1063)
!7071 = !DILocation(line: 2693, column: 72, scope: !1063)
!7072 = !{!7073, !2130, i64 16}
!7073 = !{!"", !2169, i64 0, !2130, i64 16, !2130, i64 24, !7074, i64 32, !2120, i64 40}
!7074 = !{!"", !2170, i64 0, !2170, i64 0, !2170, i64 0, !2170, i64 0, !2170, i64 0, !2170, i64 1}
!7075 = !DILocation(line: 2693, column: 12, scope: !1063)
!7076 = !DILocation(line: 2695, column: 16, scope: !1063)
!7077 = !DILocation(line: 2695, column: 22, scope: !1063)
!7078 = !DILocation(line: 2695, column: 14, scope: !1063)
!7079 = !DILocation(line: 2696, column: 58, scope: !1063)
!7080 = !DILocation(line: 2696, column: 16, scope: !1063)
!7081 = !DILocation(line: 2696, column: 14, scope: !1063)
!7082 = !DILocation(line: 2697, column: 10, scope: !7083)
!7083 = distinct !DILexicalBlock(scope: !1063, file: !458, line: 2697, column: 9)
!7084 = !DILocation(line: 2697, column: 9, scope: !1063)
!7085 = !DILocation(line: 2698, column: 9, scope: !7083)
!7086 = !DILocation(line: 2699, column: 43, scope: !1063)
!7087 = !DILocation(line: 2699, column: 28, scope: !1063)
!7088 = !DILocation(line: 2699, column: 55, scope: !1063)
!7089 = !DILocation(line: 2699, column: 26, scope: !1063)
!7090 = !DILocation(line: 2699, column: 89, scope: !7043)
!7091 = !DILocation(line: 2699, column: 67, scope: !1063)
!7092 = !DILocation(line: 2699, column: 101, scope: !1063)
!7093 = !DILocation(line: 2699, column: 26, scope: !7062)
!7094 = !DILocation(line: 2699, column: 9, scope: !7095)
!7095 = !DILexicalBlockFile(scope: !7049, file: !458, discriminator: 4)
!7096 = !DILocation(line: 2700, column: 16, scope: !7097)
!7097 = distinct !DILexicalBlock(scope: !1063, file: !458, line: 2700, column: 5)
!7098 = !DILocation(line: 2700, column: 12, scope: !7097)
!7099 = !DILocation(line: 2700, column: 10, scope: !7097)
!7100 = !DILocation(line: 2700, column: 21, scope: !7101)
!7101 = !DILexicalBlockFile(scope: !7102, file: !458, discriminator: 2)
!7102 = !DILexicalBlockFile(scope: !7103, file: !458, discriminator: 1)
!7103 = distinct !DILexicalBlock(scope: !7097, file: !458, line: 2700, column: 5)
!7104 = !DILocation(line: 2700, column: 25, scope: !7103)
!7105 = !DILocation(line: 2700, column: 23, scope: !7103)
!7106 = !DILocation(line: 2700, column: 5, scope: !7097)
!7107 = !DILocation(line: 2702, column: 9, scope: !7108)
!7108 = distinct !DILexicalBlock(scope: !7103, file: !458, line: 2700, column: 41)
!7109 = !DILocation(line: 2702, column: 29, scope: !7110)
!7110 = !DILexicalBlockFile(scope: !7111, file: !458, discriminator: 10)
!7111 = !DILexicalBlockFile(scope: !7108, file: !458, discriminator: 1)
!7112 = !DILocation(line: 2702, column: 35, scope: !7108)
!7113 = !DILocation(line: 2702, column: 28, scope: !7108)
!7114 = !DILocation(line: 2702, column: 88, scope: !7115)
!7115 = !DILexicalBlockFile(scope: !7108, file: !458, discriminator: 2)
!7116 = !DILocation(line: 2702, column: 80, scope: !7108)
!7117 = !DILocation(line: 2702, column: 61, scope: !7108)
!7118 = !DILocation(line: 2702, column: 96, scope: !7119)
!7119 = !DILexicalBlockFile(scope: !7108, file: !458, discriminator: 3)
!7120 = !DILocation(line: 2702, column: 102, scope: !7108)
!7121 = !DILocation(line: 2702, column: 95, scope: !7108)
!7122 = !DILocation(line: 2702, column: 155, scope: !7123)
!7123 = !DILexicalBlockFile(scope: !7108, file: !458, discriminator: 5)
!7124 = !DILocation(line: 2702, column: 147, scope: !7108)
!7125 = !DILocation(line: 2702, column: 129, scope: !7108)
!7126 = !DILocation(line: 2702, column: 128, scope: !7108)
!7127 = !{!7128, !7128, i64 0}
!7128 = !{!"short", !2121, i64 0}
!7129 = !DILocation(line: 2702, column: 188, scope: !7130)
!7130 = !DILexicalBlockFile(scope: !7108, file: !458, discriminator: 6)
!7131 = !DILocation(line: 2702, column: 180, scope: !7108)
!7132 = !DILocation(line: 2702, column: 162, scope: !7108)
!7133 = !DILocation(line: 2702, column: 161, scope: !7108)
!7134 = !DILocation(line: 2702, column: 28, scope: !7135)
!7135 = !DILexicalBlockFile(scope: !7136, file: !458, discriminator: 8)
!7136 = !DILexicalBlockFile(scope: !7108, file: !458, discriminator: 7)
!7137 = !DILocation(line: 2702, column: 197, scope: !7138)
!7138 = !DILexicalBlockFile(scope: !7139, file: !458, discriminator: 9)
!7139 = !DILexicalBlockFile(scope: !7108, file: !458, discriminator: 4)
!7140 = !DILocation(line: 2703, column: 14, scope: !7108)
!7141 = !DILocation(line: 2704, column: 13, scope: !7142)
!7142 = distinct !DILexicalBlock(scope: !7108, file: !458, line: 2704, column: 13)
!7143 = !DILocation(line: 2704, column: 18, scope: !7142)
!7144 = !DILocation(line: 2704, column: 15, scope: !7142)
!7145 = !DILocation(line: 2704, column: 13, scope: !7108)
!7146 = !DILocation(line: 2705, column: 13, scope: !7142)
!7147 = !DILocation(line: 2706, column: 45, scope: !7108)
!7148 = !DILocation(line: 2706, column: 51, scope: !7108)
!7149 = !DILocation(line: 2706, column: 44, scope: !7108)
!7150 = !DILocation(line: 2706, column: 104, scope: !7111)
!7151 = !DILocation(line: 2706, column: 96, scope: !7108)
!7152 = !DILocation(line: 2706, column: 77, scope: !7108)
!7153 = !DILocation(line: 2706, column: 112, scope: !7115)
!7154 = !DILocation(line: 2706, column: 118, scope: !7108)
!7155 = !DILocation(line: 2706, column: 111, scope: !7108)
!7156 = !DILocation(line: 2706, column: 171, scope: !7139)
!7157 = !DILocation(line: 2706, column: 163, scope: !7108)
!7158 = !DILocation(line: 2706, column: 145, scope: !7108)
!7159 = !DILocation(line: 2706, column: 144, scope: !7108)
!7160 = !DILocation(line: 2706, column: 204, scope: !7123)
!7161 = !DILocation(line: 2706, column: 196, scope: !7108)
!7162 = !DILocation(line: 2706, column: 178, scope: !7108)
!7163 = !DILocation(line: 2706, column: 177, scope: !7108)
!7164 = !DILocation(line: 2706, column: 44, scope: !7165)
!7165 = !DILexicalBlockFile(scope: !7130, file: !458, discriminator: 7)
!7166 = !DILocation(line: 2706, column: 15, scope: !7167)
!7167 = !DILexicalBlockFile(scope: !7119, file: !458, discriminator: 8)
!7168 = !DILocation(line: 2706, column: 13, scope: !7108)
!7169 = !DILocation(line: 2707, column: 45, scope: !7108)
!7170 = !DILocation(line: 2707, column: 51, scope: !7108)
!7171 = !DILocation(line: 2707, column: 44, scope: !7108)
!7172 = !DILocation(line: 2707, column: 104, scope: !7111)
!7173 = !DILocation(line: 2707, column: 105, scope: !7108)
!7174 = !DILocation(line: 2707, column: 96, scope: !7108)
!7175 = !DILocation(line: 2707, column: 77, scope: !7108)
!7176 = !DILocation(line: 2707, column: 114, scope: !7115)
!7177 = !DILocation(line: 2707, column: 120, scope: !7108)
!7178 = !DILocation(line: 2707, column: 113, scope: !7108)
!7179 = !DILocation(line: 2707, column: 173, scope: !7139)
!7180 = !DILocation(line: 2707, column: 174, scope: !7108)
!7181 = !DILocation(line: 2707, column: 165, scope: !7108)
!7182 = !DILocation(line: 2707, column: 147, scope: !7108)
!7183 = !DILocation(line: 2707, column: 146, scope: !7108)
!7184 = !DILocation(line: 2707, column: 208, scope: !7123)
!7185 = !DILocation(line: 2707, column: 209, scope: !7108)
!7186 = !DILocation(line: 2707, column: 200, scope: !7108)
!7187 = !DILocation(line: 2707, column: 182, scope: !7108)
!7188 = !DILocation(line: 2707, column: 181, scope: !7108)
!7189 = !DILocation(line: 2707, column: 44, scope: !7165)
!7190 = !DILocation(line: 2707, column: 15, scope: !7167)
!7191 = !DILocation(line: 2707, column: 13, scope: !7108)
!7192 = !DILocation(line: 2708, column: 13, scope: !7193)
!7193 = distinct !DILexicalBlock(scope: !7108, file: !458, line: 2708, column: 13)
!7194 = !DILocation(line: 2708, column: 17, scope: !7193)
!7195 = !DILocation(line: 2708, column: 23, scope: !7193)
!7196 = !DILocation(line: 2708, column: 26, scope: !7197)
!7197 = !DILexicalBlockFile(scope: !7193, file: !458, discriminator: 1)
!7198 = !DILocation(line: 2708, column: 30, scope: !7193)
!7199 = !DILocation(line: 2708, column: 13, scope: !7108)
!7200 = !DILocation(line: 2709, column: 26, scope: !7201)
!7201 = distinct !DILexicalBlock(scope: !7193, file: !458, line: 2708, column: 37)
!7202 = !DILocation(line: 2711, column: 59, scope: !7201)
!7203 = !DILocation(line: 2709, column: 13, scope: !7201)
!7204 = !DILocation(line: 2712, column: 13, scope: !7201)
!7205 = !DILocation(line: 2714, column: 21, scope: !7108)
!7206 = !DILocation(line: 2714, column: 25, scope: !7108)
!7207 = !DILocation(line: 2714, column: 33, scope: !7108)
!7208 = !DILocation(line: 2714, column: 31, scope: !7108)
!7209 = !DILocation(line: 2714, column: 20, scope: !7108)
!7210 = !DILocation(line: 2714, column: 14, scope: !7108)
!7211 = !DILocation(line: 2714, column: 9, scope: !7108)
!7212 = !DILocation(line: 2714, column: 18, scope: !7108)
!7213 = !DILocation(line: 2715, column: 5, scope: !7108)
!7214 = !DILocation(line: 2700, column: 35, scope: !7103)
!7215 = !DILocation(line: 2700, column: 5, scope: !7103)
!7216 = !DILocation(line: 2716, column: 28, scope: !7217)
!7217 = distinct !DILexicalBlock(scope: !1063, file: !458, line: 2716, column: 9)
!7218 = !DILocation(line: 2716, column: 38, scope: !7217)
!7219 = !DILocation(line: 2716, column: 9, scope: !7217)
!7220 = !DILocation(line: 2716, column: 41, scope: !7217)
!7221 = !DILocation(line: 2716, column: 9, scope: !1063)
!7222 = !DILocation(line: 2717, column: 9, scope: !7217)
!7223 = !DILocation(line: 2718, column: 12, scope: !1063)
!7224 = !DILocation(line: 2718, column: 5, scope: !1063)
!7225 = !DILocation(line: 2721, column: 5, scope: !1063)
!7226 = !DILocation(line: 2721, column: 10, scope: !7227)
!7227 = !DILexicalBlockFile(scope: !1079, file: !458, discriminator: 1)
!7228 = !DILocation(line: 2721, column: 20, scope: !1079)
!7229 = !DILocation(line: 2721, column: 50, scope: !1079)
!7230 = !DILocation(line: 2721, column: 69, scope: !7231)
!7231 = distinct !DILexicalBlock(scope: !1079, file: !458, line: 2721, column: 66)
!7232 = !DILocation(line: 2721, column: 86, scope: !7231)
!7233 = !DILocation(line: 2721, column: 66, scope: !7231)
!7234 = !DILocation(line: 2721, column: 96, scope: !7231)
!7235 = !DILocation(line: 2721, column: 66, scope: !1079)
!7236 = !DILocation(line: 2721, column: 66, scope: !7237)
!7237 = !DILexicalBlockFile(scope: !1079, file: !458, discriminator: 2)
!7238 = !DILocation(line: 2721, column: 127, scope: !7239)
!7239 = !DILexicalBlockFile(scope: !7231, file: !458, discriminator: 3)
!7240 = !DILocation(line: 2721, column: 145, scope: !7231)
!7241 = !DILocation(line: 2721, column: 155, scope: !7231)
!7242 = !DILocation(line: 2721, column: 180, scope: !7231)
!7243 = !DILocation(line: 2721, column: 111, scope: !7231)
!7244 = !DILocation(line: 2721, column: 199, scope: !7054)
!7245 = !DILocation(line: 2721, column: 199, scope: !1079)
!7246 = !DILocation(line: 2721, column: 199, scope: !7247)
!7247 = !DILexicalBlockFile(scope: !1079, file: !458, discriminator: 5)
!7248 = !DILocation(line: 2722, column: 5, scope: !1063)
!7249 = !DILocation(line: 2723, column: 1, scope: !1063)
!7250 = !DILocation(line: 1253, column: 36, scope: !1085)
!7251 = !DILocation(line: 1253, column: 52, scope: !1085)
!7252 = !DILocation(line: 1255, column: 5, scope: !1085)
!7253 = !DILocation(line: 1255, column: 16, scope: !1085)
!7254 = !DILocation(line: 1255, column: 49, scope: !1085)
!7255 = !DILocation(line: 1255, column: 55, scope: !1085)
!7256 = !DILocation(line: 1255, column: 25, scope: !1085)
!7257 = !DILocation(line: 1256, column: 9, scope: !7258)
!7258 = distinct !DILexicalBlock(scope: !1085, file: !458, line: 1256, column: 9)
!7259 = !DILocation(line: 1256, column: 16, scope: !7258)
!7260 = !DILocation(line: 1256, column: 9, scope: !1085)
!7261 = !DILocation(line: 1257, column: 9, scope: !7258)
!7262 = !DILocation(line: 1258, column: 9, scope: !7263)
!7263 = distinct !DILexicalBlock(scope: !1085, file: !458, line: 1258, column: 9)
!7264 = !DILocation(line: 1258, column: 16, scope: !7263)
!7265 = !DILocation(line: 1258, column: 9, scope: !1085)
!7266 = !DILocation(line: 1259, column: 25, scope: !7267)
!7267 = distinct !DILexicalBlock(scope: !7263, file: !458, line: 1258, column: 23)
!7268 = !DILocation(line: 1259, column: 9, scope: !7267)
!7269 = !DILocation(line: 1261, column: 9, scope: !7267)
!7270 = !DILocation(line: 1263, column: 31, scope: !1085)
!7271 = !DILocation(line: 1263, column: 12, scope: !1085)
!7272 = !DILocation(line: 1263, column: 5, scope: !1085)
!7273 = !DILocation(line: 1264, column: 1, scope: !1085)
!7274 = !DILocation(line: 2250, column: 37, scope: !1090)
!7275 = !DILocation(line: 2250, column: 53, scope: !1090)
!7276 = !DILocation(line: 2252, column: 5, scope: !1090)
!7277 = !DILocation(line: 2252, column: 15, scope: !1090)
!7278 = !DILocation(line: 2253, column: 5, scope: !1090)
!7279 = !DILocation(line: 2253, column: 9, scope: !1090)
!7280 = !DILocation(line: 2254, column: 5, scope: !1090)
!7281 = !DILocation(line: 2254, column: 16, scope: !1090)
!7282 = !DILocation(line: 2254, column: 23, scope: !1090)
!7283 = !DILocation(line: 2254, column: 44, scope: !1090)
!7284 = !DILocation(line: 2254, column: 29, scope: !1090)
!7285 = !DILocation(line: 2254, column: 52, scope: !1090)
!7286 = !DILocation(line: 2255, column: 5, scope: !1090)
!7287 = !DILocation(line: 2255, column: 11, scope: !1090)
!7288 = !DILocation(line: 2257, column: 34, scope: !7289)
!7289 = distinct !DILexicalBlock(scope: !1090, file: !458, line: 2257, column: 9)
!7290 = !DILocation(line: 2257, column: 10, scope: !7289)
!7291 = !DILocation(line: 2257, column: 9, scope: !1090)
!7292 = !DILocation(line: 2258, column: 9, scope: !7289)
!7293 = !DILocation(line: 2260, column: 9, scope: !7294)
!7294 = distinct !DILexicalBlock(scope: !1090, file: !458, line: 2260, column: 9)
!7295 = !DILocation(line: 2260, column: 11, scope: !7294)
!7296 = !DILocation(line: 2260, column: 9, scope: !1090)
!7297 = !DILocation(line: 2261, column: 25, scope: !7298)
!7298 = distinct !DILexicalBlock(scope: !7294, file: !458, line: 2260, column: 47)
!7299 = !DILocation(line: 2261, column: 9, scope: !7298)
!7300 = !DILocation(line: 2263, column: 9, scope: !7298)
!7301 = !DILocation(line: 2265, column: 24, scope: !7302)
!7302 = distinct !DILexicalBlock(scope: !1090, file: !458, line: 2265, column: 9)
!7303 = !DILocation(line: 2265, column: 10, scope: !7302)
!7304 = !DILocation(line: 2265, column: 9, scope: !1090)
!7305 = !DILocation(line: 2266, column: 9, scope: !7302)
!7306 = !DILocation(line: 2267, column: 40, scope: !7307)
!7307 = distinct !DILexicalBlock(scope: !1090, file: !458, line: 2267, column: 9)
!7308 = !DILocation(line: 2267, column: 28, scope: !7307)
!7309 = !DILocation(line: 2267, column: 46, scope: !7307)
!7310 = !DILocation(line: 2267, column: 48, scope: !7307)
!7311 = !DILocation(line: 2267, column: 9, scope: !7307)
!7312 = !DILocation(line: 2267, column: 53, scope: !7307)
!7313 = !DILocation(line: 2267, column: 9, scope: !1090)
!7314 = !DILocation(line: 2268, column: 9, scope: !7307)
!7315 = !DILocation(line: 2269, column: 43, scope: !1090)
!7316 = !DILocation(line: 2269, column: 28, scope: !1090)
!7317 = !DILocation(line: 2269, column: 51, scope: !1090)
!7318 = !DILocation(line: 2269, column: 26, scope: !1090)
!7319 = !DILocation(line: 2269, column: 85, scope: !7320)
!7320 = !DILexicalBlockFile(scope: !1090, file: !458, discriminator: 1)
!7321 = !DILocation(line: 2269, column: 93, scope: !1090)
!7322 = !DILocation(line: 2269, column: 26, scope: !7323)
!7323 = !DILexicalBlockFile(scope: !1090, file: !458, discriminator: 2)
!7324 = !DILocation(line: 2269, column: 9, scope: !7325)
!7325 = !DILexicalBlockFile(scope: !7326, file: !458, discriminator: 4)
!7326 = !DILexicalBlockFile(scope: !1090, file: !458, discriminator: 3)
!7327 = !DILocation(line: 2271, column: 9, scope: !7328)
!7328 = distinct !DILexicalBlock(scope: !1090, file: !458, line: 2271, column: 9)
!7329 = !DILocation(line: 2271, column: 15, scope: !7328)
!7330 = !DILocation(line: 2271, column: 9, scope: !1090)
!7331 = !DILocation(line: 2272, column: 18, scope: !7332)
!7332 = distinct !DILexicalBlock(scope: !7328, file: !458, line: 2271, column: 20)
!7333 = !DILocation(line: 2272, column: 15, scope: !7332)
!7334 = !DILocation(line: 2273, column: 13, scope: !7335)
!7335 = distinct !DILexicalBlock(scope: !7332, file: !458, line: 2273, column: 13)
!7336 = !DILocation(line: 2273, column: 19, scope: !7335)
!7337 = !DILocation(line: 2273, column: 13, scope: !7332)
!7338 = !DILocation(line: 2274, column: 19, scope: !7335)
!7339 = !DILocation(line: 2274, column: 13, scope: !7335)
!7340 = !DILocation(line: 2275, column: 5, scope: !7332)
!7341 = !DILocation(line: 2276, column: 9, scope: !7342)
!7342 = distinct !DILexicalBlock(scope: !1090, file: !458, line: 2276, column: 9)
!7343 = !DILocation(line: 2276, column: 17, scope: !7342)
!7344 = !DILocation(line: 2276, column: 15, scope: !7342)
!7345 = !DILocation(line: 2276, column: 9, scope: !1090)
!7346 = !DILocation(line: 2277, column: 17, scope: !7342)
!7347 = !DILocation(line: 2277, column: 15, scope: !7342)
!7348 = !DILocation(line: 2277, column: 9, scope: !7342)
!7349 = !DILocation(line: 2278, column: 13, scope: !1090)
!7350 = !DILocation(line: 2278, column: 19, scope: !1090)
!7351 = !DILocation(line: 2278, column: 17, scope: !1090)
!7352 = !DILocation(line: 2278, column: 25, scope: !1090)
!7353 = !DILocation(line: 2278, column: 30, scope: !1090)
!7354 = !DILocation(line: 2278, column: 36, scope: !1090)
!7355 = !DILocation(line: 2278, column: 34, scope: !1090)
!7356 = !DILocation(line: 2278, column: 43, scope: !1090)
!7357 = !DILocation(line: 2278, column: 47, scope: !1090)
!7358 = !DILocation(line: 2278, column: 45, scope: !1090)
!7359 = !DILocation(line: 2278, column: 5, scope: !1090)
!7360 = !DILocation(line: 2279, column: 18, scope: !1090)
!7361 = !DILocation(line: 2279, column: 9, scope: !1090)
!7362 = !DILocation(line: 2279, column: 5, scope: !1090)
!7363 = !DILocation(line: 2279, column: 16, scope: !1090)
!7364 = !DILocation(line: 2281, column: 58, scope: !1090)
!7365 = !DILocation(line: 2281, column: 5, scope: !1090)
!7366 = !DILocation(line: 2282, column: 1, scope: !1090)
!7367 = !DILocation(line: 19, column: 29, scope: !1099)
!7368 = !DILocation(line: 21, column: 62, scope: !1099)
!7369 = !DILocation(line: 21, column: 47, scope: !1099)
!7370 = !DILocation(line: 21, column: 70, scope: !1099)
!7371 = !DILocation(line: 21, column: 45, scope: !1099)
!7372 = !DILocation(line: 21, column: 104, scope: !7373)
!7373 = !DILexicalBlockFile(scope: !1099, file: !834, discriminator: 1)
!7374 = !DILocation(line: 21, column: 82, scope: !1099)
!7375 = !DILocation(line: 21, column: 112, scope: !1099)
!7376 = !DILocation(line: 21, column: 45, scope: !7377)
!7377 = !DILexicalBlockFile(scope: !1099, file: !834, discriminator: 2)
!7378 = !DILocation(line: 21, column: 183, scope: !7379)
!7379 = !DILexicalBlockFile(scope: !7380, file: !834, discriminator: 4)
!7380 = !DILexicalBlockFile(scope: !1099, file: !834, discriminator: 3)
!7381 = !DILocation(line: 21, column: 168, scope: !1099)
!7382 = !DILocation(line: 21, column: 191, scope: !1099)
!7383 = !DILocation(line: 21, column: 12, scope: !1099)
!7384 = !DILocation(line: 21, column: 5, scope: !1099)
!7385 = !DILocation(line: 13, column: 29, scope: !1102)
!7386 = !DILocation(line: 15, column: 62, scope: !1102)
!7387 = !DILocation(line: 15, column: 47, scope: !1102)
!7388 = !DILocation(line: 15, column: 70, scope: !1102)
!7389 = !DILocation(line: 15, column: 45, scope: !1102)
!7390 = !DILocation(line: 15, column: 104, scope: !7391)
!7391 = !DILexicalBlockFile(scope: !1102, file: !834, discriminator: 1)
!7392 = !DILocation(line: 15, column: 82, scope: !1102)
!7393 = !DILocation(line: 15, column: 112, scope: !1102)
!7394 = !DILocation(line: 15, column: 45, scope: !7395)
!7395 = !DILexicalBlockFile(scope: !1102, file: !834, discriminator: 2)
!7396 = !DILocation(line: 15, column: 183, scope: !7397)
!7397 = !DILexicalBlockFile(scope: !7398, file: !834, discriminator: 4)
!7398 = !DILexicalBlockFile(scope: !1102, file: !834, discriminator: 3)
!7399 = !DILocation(line: 15, column: 168, scope: !1102)
!7400 = !DILocation(line: 15, column: 191, scope: !1102)
!7401 = !DILocation(line: 15, column: 12, scope: !1102)
!7402 = !DILocation(line: 15, column: 5, scope: !1102)
!7403 = !DILocation(line: 25, column: 29, scope: !1105)
!7404 = !DILocation(line: 27, column: 62, scope: !1105)
!7405 = !DILocation(line: 27, column: 47, scope: !1105)
!7406 = !DILocation(line: 27, column: 70, scope: !1105)
!7407 = !DILocation(line: 27, column: 45, scope: !1105)
!7408 = !DILocation(line: 27, column: 104, scope: !7409)
!7409 = !DILexicalBlockFile(scope: !1105, file: !834, discriminator: 1)
!7410 = !DILocation(line: 27, column: 82, scope: !1105)
!7411 = !DILocation(line: 27, column: 112, scope: !1105)
!7412 = !DILocation(line: 27, column: 45, scope: !7413)
!7413 = !DILexicalBlockFile(scope: !1105, file: !834, discriminator: 2)
!7414 = !DILocation(line: 27, column: 183, scope: !7415)
!7415 = !DILexicalBlockFile(scope: !7416, file: !834, discriminator: 4)
!7416 = !DILexicalBlockFile(scope: !1105, file: !834, discriminator: 3)
!7417 = !DILocation(line: 27, column: 168, scope: !1105)
!7418 = !DILocation(line: 27, column: 191, scope: !1105)
!7419 = !DILocation(line: 27, column: 12, scope: !1105)
!7420 = !DILocation(line: 27, column: 5, scope: !1105)
!7421 = !DILocation(line: 31, column: 29, scope: !1108)
!7422 = !DILocation(line: 33, column: 62, scope: !1108)
!7423 = !DILocation(line: 33, column: 47, scope: !1108)
!7424 = !DILocation(line: 33, column: 70, scope: !1108)
!7425 = !DILocation(line: 33, column: 45, scope: !1108)
!7426 = !DILocation(line: 33, column: 104, scope: !7427)
!7427 = !DILexicalBlockFile(scope: !1108, file: !834, discriminator: 1)
!7428 = !DILocation(line: 33, column: 82, scope: !1108)
!7429 = !DILocation(line: 33, column: 112, scope: !1108)
!7430 = !DILocation(line: 33, column: 45, scope: !7431)
!7431 = !DILexicalBlockFile(scope: !1108, file: !834, discriminator: 2)
!7432 = !DILocation(line: 33, column: 183, scope: !7433)
!7433 = !DILexicalBlockFile(scope: !7434, file: !834, discriminator: 4)
!7434 = !DILexicalBlockFile(scope: !1108, file: !834, discriminator: 3)
!7435 = !DILocation(line: 33, column: 168, scope: !1108)
!7436 = !DILocation(line: 33, column: 191, scope: !1108)
!7437 = !DILocation(line: 33, column: 12, scope: !1108)
!7438 = !DILocation(line: 33, column: 5, scope: !1108)
!7439 = !DILocation(line: 7, column: 29, scope: !1111)
!7440 = !DILocation(line: 9, column: 62, scope: !1111)
!7441 = !DILocation(line: 9, column: 47, scope: !1111)
!7442 = !DILocation(line: 9, column: 70, scope: !1111)
!7443 = !DILocation(line: 9, column: 45, scope: !1111)
!7444 = !DILocation(line: 9, column: 104, scope: !7445)
!7445 = !DILexicalBlockFile(scope: !1111, file: !834, discriminator: 1)
!7446 = !DILocation(line: 9, column: 82, scope: !1111)
!7447 = !DILocation(line: 9, column: 112, scope: !1111)
!7448 = !DILocation(line: 9, column: 45, scope: !7449)
!7449 = !DILexicalBlockFile(scope: !1111, file: !834, discriminator: 2)
!7450 = !DILocation(line: 9, column: 183, scope: !7451)
!7451 = !DILexicalBlockFile(scope: !7452, file: !834, discriminator: 4)
!7452 = !DILexicalBlockFile(scope: !1111, file: !834, discriminator: 3)
!7453 = !DILocation(line: 9, column: 168, scope: !1111)
!7454 = !DILocation(line: 9, column: 191, scope: !1111)
!7455 = !DILocation(line: 9, column: 12, scope: !1111)
!7456 = !DILocation(line: 9, column: 5, scope: !1111)
!7457 = !DILocation(line: 43, column: 29, scope: !1114)
!7458 = !DILocation(line: 45, column: 62, scope: !1114)
!7459 = !DILocation(line: 45, column: 47, scope: !1114)
!7460 = !DILocation(line: 45, column: 70, scope: !1114)
!7461 = !DILocation(line: 45, column: 45, scope: !1114)
!7462 = !DILocation(line: 45, column: 104, scope: !7463)
!7463 = !DILexicalBlockFile(scope: !1114, file: !834, discriminator: 1)
!7464 = !DILocation(line: 45, column: 82, scope: !1114)
!7465 = !DILocation(line: 45, column: 112, scope: !1114)
!7466 = !DILocation(line: 45, column: 45, scope: !7467)
!7467 = !DILexicalBlockFile(scope: !1114, file: !834, discriminator: 2)
!7468 = !DILocation(line: 45, column: 183, scope: !7469)
!7469 = !DILexicalBlockFile(scope: !7470, file: !834, discriminator: 4)
!7470 = !DILexicalBlockFile(scope: !1114, file: !834, discriminator: 3)
!7471 = !DILocation(line: 45, column: 168, scope: !1114)
!7472 = !DILocation(line: 45, column: 191, scope: !1114)
!7473 = !DILocation(line: 45, column: 12, scope: !1114)
!7474 = !DILocation(line: 45, column: 5, scope: !1114)
!7475 = !DILocation(line: 37, column: 29, scope: !1117)
!7476 = !DILocation(line: 39, column: 62, scope: !1117)
!7477 = !DILocation(line: 39, column: 47, scope: !1117)
!7478 = !DILocation(line: 39, column: 70, scope: !1117)
!7479 = !DILocation(line: 39, column: 45, scope: !1117)
!7480 = !DILocation(line: 39, column: 104, scope: !7481)
!7481 = !DILexicalBlockFile(scope: !1117, file: !834, discriminator: 1)
!7482 = !DILocation(line: 39, column: 82, scope: !1117)
!7483 = !DILocation(line: 39, column: 112, scope: !1117)
!7484 = !DILocation(line: 39, column: 45, scope: !7485)
!7485 = !DILexicalBlockFile(scope: !1117, file: !834, discriminator: 2)
!7486 = !DILocation(line: 39, column: 183, scope: !7487)
!7487 = !DILexicalBlockFile(scope: !7488, file: !834, discriminator: 4)
!7488 = !DILexicalBlockFile(scope: !1117, file: !834, discriminator: 3)
!7489 = !DILocation(line: 39, column: 168, scope: !1117)
!7490 = !DILocation(line: 39, column: 191, scope: !1117)
!7491 = !DILocation(line: 39, column: 12, scope: !1117)
!7492 = !DILocation(line: 39, column: 5, scope: !1117)
!7493 = !DILocation(line: 2625, column: 26, scope: !1120)
!7494 = !DILocation(line: 2625, column: 42, scope: !1120)
!7495 = !DILocation(line: 2627, column: 33, scope: !1120)
!7496 = !DILocation(line: 2627, column: 39, scope: !1120)
!7497 = !DILocation(line: 2627, column: 12, scope: !1120)
!7498 = !DILocation(line: 2627, column: 5, scope: !1120)
!7499 = !DILocation(line: 130, column: 27, scope: !1173)
!7500 = !DILocation(line: 130, column: 43, scope: !1173)
!7501 = !DILocation(line: 132, column: 5, scope: !1173)
!7502 = !DILocation(line: 132, column: 16, scope: !1173)
!7503 = !DILocation(line: 133, column: 5, scope: !1173)
!7504 = !DILocation(line: 133, column: 10, scope: !1173)
!7505 = !DILocation(line: 135, column: 34, scope: !7506)
!7506 = distinct !DILexicalBlock(scope: !1173, file: !839, line: 135, column: 9)
!7507 = !DILocation(line: 135, column: 10, scope: !7506)
!7508 = !DILocation(line: 135, column: 9, scope: !1173)
!7509 = !DILocation(line: 136, column: 9, scope: !7506)
!7510 = !DILocation(line: 138, column: 41, scope: !7511)
!7511 = distinct !DILexicalBlock(scope: !1173, file: !839, line: 138, column: 9)
!7512 = !DILocation(line: 138, column: 26, scope: !7511)
!7513 = !DILocation(line: 138, column: 49, scope: !7511)
!7514 = !DILocation(line: 138, column: 62, scope: !7511)
!7515 = !DILocation(line: 138, column: 59, scope: !7511)
!7516 = !DILocation(line: 138, column: 68, scope: !7511)
!7517 = !DILocation(line: 138, column: 86, scope: !7518)
!7518 = !DILexicalBlockFile(scope: !7511, file: !839, discriminator: 1)
!7519 = !DILocation(line: 138, column: 94, scope: !7511)
!7520 = !DILocation(line: 138, column: 103, scope: !7511)
!7521 = !DILocation(line: 138, column: 9, scope: !1173)
!7522 = !DILocation(line: 142, column: 78, scope: !7523)
!7523 = distinct !DILexicalBlock(scope: !7511, file: !839, line: 138, column: 126)
!7524 = !DILocation(line: 142, column: 63, scope: !7523)
!7525 = !DILocation(line: 142, column: 86, scope: !7523)
!7526 = !DILocation(line: 142, column: 61, scope: !7523)
!7527 = !DILocation(line: 142, column: 120, scope: !7528)
!7528 = !DILexicalBlockFile(scope: !7523, file: !839, discriminator: 1)
!7529 = !DILocation(line: 142, column: 98, scope: !7523)
!7530 = !DILocation(line: 142, column: 128, scope: !7523)
!7531 = !DILocation(line: 142, column: 61, scope: !7532)
!7532 = !DILexicalBlockFile(scope: !7523, file: !839, discriminator: 2)
!7533 = !DILocation(line: 142, column: 199, scope: !7534)
!7534 = !DILexicalBlockFile(scope: !7535, file: !839, discriminator: 4)
!7535 = !DILexicalBlockFile(scope: !7523, file: !839, discriminator: 3)
!7536 = !DILocation(line: 142, column: 184, scope: !7523)
!7537 = !DILocation(line: 142, column: 207, scope: !7523)
!7538 = !DILocation(line: 142, column: 16, scope: !7523)
!7539 = !DILocation(line: 142, column: 9, scope: !7523)
!7540 = !DILocation(line: 149, column: 16, scope: !1173)
!7541 = !DILocation(line: 149, column: 25, scope: !1173)
!7542 = !DILocation(line: 149, column: 65, scope: !1173)
!7543 = !DILocation(line: 149, column: 50, scope: !1173)
!7544 = !DILocation(line: 149, column: 73, scope: !1173)
!7545 = !DILocation(line: 149, column: 31, scope: !1173)
!7546 = !DILocation(line: 149, column: 84, scope: !1173)
!7547 = !DILocation(line: 149, column: 12, scope: !1173)
!7548 = !DILocation(line: 149, column: 5, scope: !1173)
!7549 = !DILocation(line: 150, column: 1, scope: !1173)
!7550 = !DILocation(line: 52, column: 27, scope: !1179)
!7551 = !DILocation(line: 54, column: 5, scope: !1179)
!7552 = !DILocation(line: 54, column: 15, scope: !1179)
!7553 = !DILocation(line: 55, column: 88, scope: !1179)
!7554 = !DILocation(line: 55, column: 73, scope: !1179)
!7555 = !DILocation(line: 55, column: 96, scope: !1179)
!7556 = !DILocation(line: 55, column: 14, scope: !1179)
!7557 = !DILocation(line: 55, column: 12, scope: !1179)
!7558 = !DILocation(line: 56, column: 10, scope: !7559)
!7559 = distinct !DILexicalBlock(scope: !1179, file: !834, line: 56, column: 9)
!7560 = !DILocation(line: 56, column: 9, scope: !1179)
!7561 = !DILocation(line: 57, column: 13, scope: !7559)
!7562 = !DILocation(line: 58, column: 53, scope: !1179)
!7563 = !DILocation(line: 58, column: 38, scope: !1179)
!7564 = !DILocation(line: 58, column: 63, scope: !1179)
!7565 = !DILocation(line: 58, column: 36, scope: !1179)
!7566 = !DILocation(line: 58, column: 97, scope: !7567)
!7567 = !DILexicalBlockFile(scope: !1179, file: !834, discriminator: 1)
!7568 = !DILocation(line: 58, column: 75, scope: !1179)
!7569 = !DILocation(line: 58, column: 107, scope: !1179)
!7570 = !DILocation(line: 58, column: 36, scope: !7571)
!7571 = !DILexicalBlockFile(scope: !1179, file: !834, discriminator: 2)
!7572 = !DILocation(line: 58, column: 178, scope: !7573)
!7573 = !DILexicalBlockFile(scope: !7574, file: !834, discriminator: 4)
!7574 = !DILexicalBlockFile(scope: !1179, file: !834, discriminator: 3)
!7575 = !DILocation(line: 58, column: 163, scope: !1179)
!7576 = !DILocation(line: 58, column: 186, scope: !1179)
!7577 = !DILocation(line: 58, column: 161, scope: !1179)
!7578 = !DILocation(line: 58, column: 220, scope: !7579)
!7579 = !DILexicalBlockFile(scope: !1179, file: !834, discriminator: 5)
!7580 = !DILocation(line: 58, column: 198, scope: !1179)
!7581 = !DILocation(line: 58, column: 228, scope: !1179)
!7582 = !DILocation(line: 58, column: 161, scope: !7583)
!7583 = !DILexicalBlockFile(scope: !1179, file: !834, discriminator: 6)
!7584 = !DILocation(line: 59, column: 50, scope: !1179)
!7585 = !DILocation(line: 59, column: 35, scope: !1179)
!7586 = !DILocation(line: 59, column: 58, scope: !1179)
!7587 = !DILocation(line: 58, column: 5, scope: !1179)
!7588 = !DILocation(line: 60, column: 12, scope: !1179)
!7589 = !DILocation(line: 60, column: 5, scope: !1179)
!7590 = !DILocation(line: 61, column: 1, scope: !1179)
!7591 = !DILocation(line: 2523, column: 37, scope: !1183)
!7592 = !DILocation(line: 2523, column: 53, scope: !1183)
!7593 = !DILocation(line: 2525, column: 5, scope: !1183)
!7594 = !DILocation(line: 2525, column: 16, scope: !1183)
!7595 = !DILocation(line: 2525, column: 22, scope: !1183)
!7596 = !DILocation(line: 2525, column: 29, scope: !1183)
!7597 = !DILocation(line: 2525, column: 37, scope: !1183)
!7598 = !DILocation(line: 2526, column: 5, scope: !1183)
!7599 = !DILocation(line: 2526, column: 11, scope: !1183)
!7600 = !DILocation(line: 2526, column: 19, scope: !1183)
!7601 = !DILocation(line: 2527, column: 5, scope: !1183)
!7602 = !DILocation(line: 2527, column: 15, scope: !1183)
!7603 = !DILocation(line: 2528, column: 5, scope: !1183)
!7604 = !DILocation(line: 2528, column: 15, scope: !1183)
!7605 = !DILocation(line: 2529, column: 34, scope: !7606)
!7606 = distinct !DILexicalBlock(scope: !1183, file: !458, line: 2529, column: 9)
!7607 = !DILocation(line: 2529, column: 10, scope: !7606)
!7608 = !DILocation(line: 2529, column: 9, scope: !1183)
!7609 = !DILocation(line: 2530, column: 9, scope: !7606)
!7610 = !DILocation(line: 2531, column: 9, scope: !7611)
!7611 = distinct !DILexicalBlock(scope: !1183, file: !458, line: 2531, column: 9)
!7612 = !DILocation(line: 2531, column: 13, scope: !7611)
!7613 = !DILocation(line: 2531, column: 9, scope: !1183)
!7614 = !DILocation(line: 2532, column: 16, scope: !7615)
!7615 = distinct !DILexicalBlock(scope: !7611, file: !458, line: 2531, column: 35)
!7616 = !DILocation(line: 2533, column: 17, scope: !7615)
!7617 = !DILocation(line: 2534, column: 5, scope: !7615)
!7618 = !DILocation(line: 2536, column: 24, scope: !7619)
!7619 = distinct !DILexicalBlock(scope: !7620, file: !458, line: 2536, column: 13)
!7620 = distinct !DILexicalBlock(scope: !7611, file: !458, line: 2535, column: 10)
!7621 = !DILocation(line: 2536, column: 13, scope: !7619)
!7622 = !DILocation(line: 2536, column: 36, scope: !7619)
!7623 = !DILocation(line: 2536, column: 13, scope: !7620)
!7624 = !DILocation(line: 2537, column: 13, scope: !7619)
!7625 = !DILocation(line: 2538, column: 32, scope: !7620)
!7626 = !DILocation(line: 2538, column: 16, scope: !7620)
!7627 = !DILocation(line: 2539, column: 24, scope: !7620)
!7628 = !DILocation(line: 2539, column: 17, scope: !7620)
!7629 = !DILocation(line: 2541, column: 45, scope: !1183)
!7630 = !DILocation(line: 2541, column: 30, scope: !1183)
!7631 = !DILocation(line: 2541, column: 53, scope: !1183)
!7632 = !DILocation(line: 2541, column: 28, scope: !1183)
!7633 = !DILocation(line: 2541, column: 87, scope: !7634)
!7634 = !DILexicalBlockFile(scope: !1183, file: !458, discriminator: 1)
!7635 = !DILocation(line: 2541, column: 95, scope: !1183)
!7636 = !DILocation(line: 2541, column: 28, scope: !7637)
!7637 = !DILexicalBlockFile(scope: !1183, file: !458, discriminator: 2)
!7638 = !DILocation(line: 2541, column: 11, scope: !7639)
!7639 = !DILexicalBlockFile(scope: !7640, file: !458, discriminator: 4)
!7640 = !DILexicalBlockFile(scope: !1183, file: !458, discriminator: 3)
!7641 = !DILocation(line: 2542, column: 31, scope: !1183)
!7642 = !DILocation(line: 2542, column: 16, scope: !1183)
!7643 = !DILocation(line: 2542, column: 39, scope: !1183)
!7644 = !DILocation(line: 2542, column: 12, scope: !1183)
!7645 = !DILocation(line: 2543, column: 26, scope: !1183)
!7646 = !DILocation(line: 2543, column: 33, scope: !1183)
!7647 = !DILocation(line: 2543, column: 41, scope: !1183)
!7648 = !DILocation(line: 2543, column: 49, scope: !1183)
!7649 = !DILocation(line: 2543, column: 12, scope: !1183)
!7650 = !DILocation(line: 2543, column: 10, scope: !1183)
!7651 = !DILocation(line: 2544, column: 13, scope: !1183)
!7652 = !DILocation(line: 2544, column: 11, scope: !1183)
!7653 = !DILocation(line: 2545, column: 9, scope: !7654)
!7654 = distinct !DILexicalBlock(scope: !1183, file: !458, line: 2545, column: 9)
!7655 = !DILocation(line: 2545, column: 13, scope: !7654)
!7656 = !DILocation(line: 2545, column: 9, scope: !1183)
!7657 = !DILocation(line: 2546, column: 9, scope: !7654)
!7658 = !DILocation(line: 2547, column: 42, scope: !1183)
!7659 = !DILocation(line: 2547, column: 50, scope: !1183)
!7660 = !DILocation(line: 2547, column: 48, scope: !1183)
!7661 = !DILocation(line: 2547, column: 56, scope: !1183)
!7662 = !DILocation(line: 2547, column: 64, scope: !1183)
!7663 = !DILocation(line: 2547, column: 62, scope: !1183)
!7664 = !DILocation(line: 2547, column: 12, scope: !1183)
!7665 = !DILocation(line: 2547, column: 5, scope: !1183)
!7666 = !DILocation(line: 2548, column: 1, scope: !1183)
!7667 = !DILocation(line: 1563, column: 31, scope: !1204)
!7668 = !DILocation(line: 1563, column: 47, scope: !1204)
!7669 = !DILocation(line: 1565, column: 36, scope: !1204)
!7670 = !DILocation(line: 1565, column: 16, scope: !1204)
!7671 = !DILocation(line: 1565, column: 9, scope: !1204)
!7672 = !DILocation(line: 2136, column: 40, scope: !1208)
!7673 = !DILocation(line: 2136, column: 56, scope: !1208)
!7674 = !DILocation(line: 2138, column: 5, scope: !1208)
!7675 = !DILocation(line: 2138, column: 15, scope: !1208)
!7676 = !DILocation(line: 2138, column: 25, scope: !1208)
!7677 = !DILocation(line: 2140, column: 38, scope: !1208)
!7678 = !DILocation(line: 2140, column: 15, scope: !1208)
!7679 = !DILocation(line: 2140, column: 13, scope: !1208)
!7680 = !DILocation(line: 2141, column: 11, scope: !7681)
!7681 = distinct !DILexicalBlock(scope: !1208, file: !458, line: 2141, column: 9)
!7682 = !DILocation(line: 2141, column: 9, scope: !1208)
!7683 = !DILocation(line: 2142, column: 9, scope: !7681)
!7684 = !DILocation(line: 2145, column: 25, scope: !1208)
!7685 = !DILocation(line: 2145, column: 13, scope: !1208)
!7686 = !DILocation(line: 2146, column: 45, scope: !1208)
!7687 = !DILocation(line: 2146, column: 30, scope: !1208)
!7688 = !DILocation(line: 2146, column: 53, scope: !1208)
!7689 = !DILocation(line: 2146, column: 28, scope: !1208)
!7690 = !DILocation(line: 2146, column: 87, scope: !7691)
!7691 = !DILexicalBlockFile(scope: !1208, file: !458, discriminator: 1)
!7692 = !DILocation(line: 2146, column: 95, scope: !1208)
!7693 = !DILocation(line: 2146, column: 28, scope: !7694)
!7694 = !DILexicalBlockFile(scope: !1208, file: !458, discriminator: 2)
!7695 = !DILocation(line: 2146, column: 166, scope: !7696)
!7696 = !DILexicalBlockFile(scope: !7697, file: !458, discriminator: 4)
!7697 = !DILexicalBlockFile(scope: !1208, file: !458, discriminator: 3)
!7698 = !DILocation(line: 2146, column: 151, scope: !1208)
!7699 = !DILocation(line: 2146, column: 174, scope: !1208)
!7700 = !DILocation(line: 2147, column: 13, scope: !1208)
!7701 = !DILocation(line: 2148, column: 45, scope: !1208)
!7702 = !DILocation(line: 2148, column: 30, scope: !1208)
!7703 = !DILocation(line: 2148, column: 56, scope: !1208)
!7704 = !DILocation(line: 2148, column: 28, scope: !1208)
!7705 = !DILocation(line: 2148, column: 90, scope: !7691)
!7706 = !DILocation(line: 2148, column: 68, scope: !1208)
!7707 = !DILocation(line: 2148, column: 101, scope: !1208)
!7708 = !DILocation(line: 2148, column: 28, scope: !7694)
!7709 = !DILocation(line: 2148, column: 172, scope: !7696)
!7710 = !DILocation(line: 2148, column: 157, scope: !1208)
!7711 = !DILocation(line: 2148, column: 183, scope: !1208)
!7712 = !DILocation(line: 2144, column: 14, scope: !1208)
!7713 = !DILocation(line: 2144, column: 12, scope: !1208)
!7714 = !DILocation(line: 2151, column: 5, scope: !1208)
!7715 = !DILocation(line: 2151, column: 10, scope: !7716)
!7716 = !DILexicalBlockFile(scope: !1215, file: !458, discriminator: 1)
!7717 = !DILocation(line: 2151, column: 20, scope: !1215)
!7718 = !DILocation(line: 2151, column: 50, scope: !1215)
!7719 = !DILocation(line: 2151, column: 68, scope: !7720)
!7720 = distinct !DILexicalBlock(scope: !1215, file: !458, line: 2151, column: 65)
!7721 = !DILocation(line: 2151, column: 85, scope: !7720)
!7722 = !DILocation(line: 2151, column: 65, scope: !7720)
!7723 = !DILocation(line: 2151, column: 95, scope: !7720)
!7724 = !DILocation(line: 2151, column: 65, scope: !1215)
!7725 = !DILocation(line: 2151, column: 65, scope: !7726)
!7726 = !DILexicalBlockFile(scope: !1215, file: !458, discriminator: 2)
!7727 = !DILocation(line: 2151, column: 126, scope: !7728)
!7728 = !DILexicalBlockFile(scope: !7720, file: !458, discriminator: 3)
!7729 = !DILocation(line: 2151, column: 144, scope: !7720)
!7730 = !DILocation(line: 2151, column: 154, scope: !7720)
!7731 = !DILocation(line: 2151, column: 179, scope: !7720)
!7732 = !DILocation(line: 2151, column: 110, scope: !7720)
!7733 = !DILocation(line: 2151, column: 198, scope: !7734)
!7734 = !DILexicalBlockFile(scope: !1208, file: !458, discriminator: 4)
!7735 = !DILocation(line: 2151, column: 198, scope: !1215)
!7736 = !DILocation(line: 2151, column: 198, scope: !7737)
!7737 = !DILexicalBlockFile(scope: !1215, file: !458, discriminator: 5)
!7738 = !DILocation(line: 2152, column: 12, scope: !1208)
!7739 = !DILocation(line: 2152, column: 5, scope: !1208)
!7740 = !DILocation(line: 2153, column: 1, scope: !1208)
!7741 = !DILocation(line: 2393, column: 34, scope: !1239)
!7742 = !DILocation(line: 2393, column: 50, scope: !1239)
!7743 = !DILocation(line: 2395, column: 5, scope: !1239)
!7744 = !DILocation(line: 2395, column: 9, scope: !1239)
!7745 = !DILocation(line: 2396, column: 5, scope: !1239)
!7746 = !DILocation(line: 2396, column: 16, scope: !1239)
!7747 = !DILocation(line: 2396, column: 28, scope: !1239)
!7748 = !DILocation(line: 2396, column: 49, scope: !1239)
!7749 = !DILocation(line: 2396, column: 34, scope: !1239)
!7750 = !DILocation(line: 2396, column: 57, scope: !1239)
!7751 = !DILocation(line: 2397, column: 5, scope: !1239)
!7752 = !DILocation(line: 2397, column: 11, scope: !1239)
!7753 = !DILocation(line: 2399, column: 34, scope: !7754)
!7754 = distinct !DILexicalBlock(scope: !1239, file: !458, line: 2399, column: 9)
!7755 = !DILocation(line: 2399, column: 10, scope: !7754)
!7756 = !DILocation(line: 2399, column: 9, scope: !1239)
!7757 = !DILocation(line: 2400, column: 9, scope: !7754)
!7758 = !DILocation(line: 2402, column: 9, scope: !7759)
!7759 = distinct !DILexicalBlock(scope: !1239, file: !458, line: 2402, column: 9)
!7760 = !DILocation(line: 2402, column: 11, scope: !7759)
!7761 = !DILocation(line: 2402, column: 9, scope: !1239)
!7762 = !DILocation(line: 2403, column: 25, scope: !7763)
!7763 = distinct !DILexicalBlock(scope: !7759, file: !458, line: 2402, column: 17)
!7764 = !DILocation(line: 2403, column: 9, scope: !7763)
!7765 = !DILocation(line: 2405, column: 9, scope: !7763)
!7766 = !DILocation(line: 2407, column: 9, scope: !7767)
!7767 = distinct !DILexicalBlock(scope: !1239, file: !458, line: 2407, column: 9)
!7768 = !DILocation(line: 2407, column: 15, scope: !7767)
!7769 = !DILocation(line: 2407, column: 9, scope: !1239)
!7770 = !DILocation(line: 2408, column: 35, scope: !7767)
!7771 = !DILocation(line: 2408, column: 20, scope: !7767)
!7772 = !DILocation(line: 2408, column: 43, scope: !7767)
!7773 = !DILocation(line: 2408, column: 15, scope: !7767)
!7774 = !DILocation(line: 2408, column: 9, scope: !7767)
!7775 = !DILocation(line: 2409, column: 9, scope: !7776)
!7776 = distinct !DILexicalBlock(scope: !1239, file: !458, line: 2409, column: 9)
!7777 = !DILocation(line: 2409, column: 15, scope: !7776)
!7778 = !DILocation(line: 2409, column: 19, scope: !7776)
!7779 = !DILocation(line: 2409, column: 22, scope: !7780)
!7780 = !DILexicalBlockFile(scope: !7776, file: !458, discriminator: 1)
!7781 = !DILocation(line: 2409, column: 48, scope: !7776)
!7782 = !DILocation(line: 2409, column: 33, scope: !7776)
!7783 = !DILocation(line: 2409, column: 56, scope: !7776)
!7784 = !DILocation(line: 2409, column: 28, scope: !7776)
!7785 = !DILocation(line: 2409, column: 9, scope: !1239)
!7786 = !DILocation(line: 2410, column: 25, scope: !7787)
!7787 = distinct !DILexicalBlock(scope: !7776, file: !458, line: 2409, column: 66)
!7788 = !DILocation(line: 2410, column: 9, scope: !7787)
!7789 = !DILocation(line: 2411, column: 9, scope: !7787)
!7790 = !DILocation(line: 2413, column: 21, scope: !7791)
!7791 = distinct !DILexicalBlock(scope: !1239, file: !458, line: 2413, column: 9)
!7792 = !DILocation(line: 2413, column: 10, scope: !7791)
!7793 = !DILocation(line: 2413, column: 9, scope: !1239)
!7794 = !DILocation(line: 2414, column: 9, scope: !7791)
!7795 = !DILocation(line: 2416, column: 43, scope: !1239)
!7796 = !DILocation(line: 2416, column: 28, scope: !1239)
!7797 = !DILocation(line: 2416, column: 51, scope: !1239)
!7798 = !DILocation(line: 2416, column: 26, scope: !1239)
!7799 = !DILocation(line: 2416, column: 85, scope: !7800)
!7800 = !DILexicalBlockFile(scope: !1239, file: !458, discriminator: 1)
!7801 = !DILocation(line: 2416, column: 93, scope: !1239)
!7802 = !DILocation(line: 2416, column: 26, scope: !7803)
!7803 = !DILexicalBlockFile(scope: !1239, file: !458, discriminator: 2)
!7804 = !DILocation(line: 2416, column: 9, scope: !7805)
!7805 = !DILexicalBlockFile(scope: !7806, file: !458, discriminator: 4)
!7806 = !DILexicalBlockFile(scope: !1239, file: !458, discriminator: 3)
!7807 = !DILocation(line: 2417, column: 17, scope: !1239)
!7808 = !DILocation(line: 2417, column: 13, scope: !1239)
!7809 = !DILocation(line: 2417, column: 11, scope: !1239)
!7810 = !DILocation(line: 2418, column: 13, scope: !1239)
!7811 = !DILocation(line: 2418, column: 19, scope: !1239)
!7812 = !DILocation(line: 2418, column: 17, scope: !1239)
!7813 = !DILocation(line: 2418, column: 26, scope: !1239)
!7814 = !DILocation(line: 2418, column: 32, scope: !1239)
!7815 = !DILocation(line: 2418, column: 30, scope: !1239)
!7816 = !DILocation(line: 2418, column: 38, scope: !1239)
!7817 = !DILocation(line: 2418, column: 43, scope: !1239)
!7818 = !DILocation(line: 2418, column: 47, scope: !1239)
!7819 = !DILocation(line: 2418, column: 45, scope: !1239)
!7820 = !DILocation(line: 2418, column: 5, scope: !1239)
!7821 = !DILocation(line: 2419, column: 40, scope: !7822)
!7822 = distinct !DILexicalBlock(scope: !1239, file: !458, line: 2419, column: 9)
!7823 = !DILocation(line: 2419, column: 28, scope: !7822)
!7824 = !DILocation(line: 2419, column: 46, scope: !7822)
!7825 = !DILocation(line: 2419, column: 48, scope: !7822)
!7826 = !DILocation(line: 2419, column: 9, scope: !7822)
!7827 = !DILocation(line: 2419, column: 53, scope: !7822)
!7828 = !DILocation(line: 2419, column: 9, scope: !1239)
!7829 = !DILocation(line: 2420, column: 9, scope: !7822)
!7830 = !DILocation(line: 2422, column: 43, scope: !1239)
!7831 = !DILocation(line: 2422, column: 28, scope: !1239)
!7832 = !DILocation(line: 2422, column: 12, scope: !1239)
!7833 = !DILocation(line: 2422, column: 5, scope: !1239)
!7834 = !DILocation(line: 2423, column: 1, scope: !1239)
!7835 = !DILocation(line: 2430, column: 37, scope: !1247)
!7836 = !DILocation(line: 2430, column: 53, scope: !1247)
!7837 = !DILocation(line: 2432, column: 5, scope: !1247)
!7838 = !DILocation(line: 2432, column: 9, scope: !1247)
!7839 = !DILocation(line: 2433, column: 5, scope: !1247)
!7840 = !DILocation(line: 2433, column: 16, scope: !1247)
!7841 = !DILocation(line: 2433, column: 23, scope: !1247)
!7842 = !DILocation(line: 2433, column: 44, scope: !1247)
!7843 = !DILocation(line: 2433, column: 29, scope: !1247)
!7844 = !DILocation(line: 2433, column: 52, scope: !1247)
!7845 = !DILocation(line: 2434, column: 5, scope: !1247)
!7846 = !DILocation(line: 2434, column: 11, scope: !1247)
!7847 = !DILocation(line: 2434, column: 49, scope: !1247)
!7848 = !DILocation(line: 2434, column: 34, scope: !1247)
!7849 = !DILocation(line: 2434, column: 57, scope: !1247)
!7850 = !DILocation(line: 2434, column: 32, scope: !1247)
!7851 = !DILocation(line: 2434, column: 91, scope: !7852)
!7852 = !DILexicalBlockFile(scope: !1247, file: !458, discriminator: 1)
!7853 = !DILocation(line: 2434, column: 99, scope: !1247)
!7854 = !DILocation(line: 2434, column: 32, scope: !7855)
!7855 = !DILexicalBlockFile(scope: !1247, file: !458, discriminator: 2)
!7856 = !DILocation(line: 2434, column: 11, scope: !7857)
!7857 = !DILexicalBlockFile(scope: !7858, file: !458, discriminator: 4)
!7858 = !DILexicalBlockFile(scope: !1247, file: !458, discriminator: 3)
!7859 = !DILocation(line: 2436, column: 25, scope: !7860)
!7860 = distinct !DILexicalBlock(scope: !1247, file: !458, line: 2436, column: 9)
!7861 = !DILocation(line: 2436, column: 11, scope: !7860)
!7862 = !DILocation(line: 2436, column: 9, scope: !1247)
!7863 = !DILocation(line: 2437, column: 9, scope: !7860)
!7864 = !DILocation(line: 2439, column: 16, scope: !7865)
!7865 = distinct !DILexicalBlock(scope: !1247, file: !458, line: 2439, column: 5)
!7866 = !DILocation(line: 2439, column: 10, scope: !7865)
!7867 = !DILocation(line: 2439, column: 21, scope: !7868)
!7868 = !DILexicalBlockFile(scope: !7869, file: !458, discriminator: 2)
!7869 = !DILexicalBlockFile(scope: !7870, file: !458, discriminator: 1)
!7870 = distinct !DILexicalBlock(scope: !7865, file: !458, line: 2439, column: 5)
!7871 = !DILocation(line: 2439, column: 29, scope: !7870)
!7872 = !DILocation(line: 2439, column: 27, scope: !7870)
!7873 = !DILocation(line: 2439, column: 5, scope: !7865)
!7874 = !DILocation(line: 2440, column: 17, scope: !7875)
!7875 = distinct !DILexicalBlock(scope: !7876, file: !458, line: 2440, column: 13)
!7876 = distinct !DILexicalBlock(scope: !7870, file: !458, line: 2439, column: 41)
!7877 = !DILocation(line: 2440, column: 13, scope: !7875)
!7878 = !DILocation(line: 2440, column: 27, scope: !7875)
!7879 = !DILocation(line: 2440, column: 24, scope: !7875)
!7880 = !DILocation(line: 2440, column: 13, scope: !7876)
!7881 = !DILocation(line: 2441, column: 13, scope: !7875)
!7882 = !DILocation(line: 2442, column: 5, scope: !7876)
!7883 = !DILocation(line: 2439, column: 37, scope: !7870)
!7884 = !DILocation(line: 2439, column: 5, scope: !7870)
!7885 = !DILocation(line: 2443, column: 9, scope: !7886)
!7886 = distinct !DILexicalBlock(scope: !1247, file: !458, line: 2443, column: 9)
!7887 = !DILocation(line: 2443, column: 18, scope: !7886)
!7888 = !DILocation(line: 2443, column: 15, scope: !7886)
!7889 = !DILocation(line: 2443, column: 9, scope: !1247)
!7890 = !DILocation(line: 2444, column: 25, scope: !7891)
!7891 = distinct !DILexicalBlock(scope: !7886, file: !458, line: 2443, column: 21)
!7892 = !DILocation(line: 2444, column: 9, scope: !7891)
!7893 = !DILocation(line: 2445, column: 9, scope: !7891)
!7894 = !DILocation(line: 2447, column: 21, scope: !7895)
!7895 = distinct !DILexicalBlock(scope: !1247, file: !458, line: 2447, column: 9)
!7896 = !DILocation(line: 2447, column: 10, scope: !7895)
!7897 = !DILocation(line: 2447, column: 9, scope: !1247)
!7898 = !DILocation(line: 2448, column: 9, scope: !7895)
!7899 = !DILocation(line: 2450, column: 13, scope: !1247)
!7900 = !DILocation(line: 2450, column: 19, scope: !1247)
!7901 = !DILocation(line: 2450, column: 17, scope: !1247)
!7902 = !DILocation(line: 2450, column: 26, scope: !1247)
!7903 = !DILocation(line: 2450, column: 32, scope: !1247)
!7904 = !DILocation(line: 2450, column: 30, scope: !1247)
!7905 = !DILocation(line: 2450, column: 38, scope: !1247)
!7906 = !DILocation(line: 2450, column: 43, scope: !1247)
!7907 = !DILocation(line: 2450, column: 47, scope: !1247)
!7908 = !DILocation(line: 2450, column: 45, scope: !1247)
!7909 = !DILocation(line: 2450, column: 5, scope: !1247)
!7910 = !DILocation(line: 2451, column: 40, scope: !7911)
!7911 = distinct !DILexicalBlock(scope: !1247, file: !458, line: 2451, column: 9)
!7912 = !DILocation(line: 2451, column: 28, scope: !7911)
!7913 = !DILocation(line: 2451, column: 46, scope: !7911)
!7914 = !DILocation(line: 2451, column: 48, scope: !7911)
!7915 = !DILocation(line: 2451, column: 9, scope: !7911)
!7916 = !DILocation(line: 2451, column: 53, scope: !7911)
!7917 = !DILocation(line: 2451, column: 9, scope: !1247)
!7918 = !DILocation(line: 2452, column: 9, scope: !7911)
!7919 = !DILocation(line: 2454, column: 58, scope: !1247)
!7920 = !DILocation(line: 2454, column: 5, scope: !1247)
!7921 = !DILocation(line: 2455, column: 1, scope: !1247)
!7922 = !DILocation(line: 2064, column: 38, scope: !1255)
!7923 = !DILocation(line: 2064, column: 54, scope: !1255)
!7924 = !DILocation(line: 2066, column: 5, scope: !1255)
!7925 = !DILocation(line: 2066, column: 16, scope: !1255)
!7926 = !DILocation(line: 2067, column: 5, scope: !1255)
!7927 = !DILocation(line: 2067, column: 15, scope: !1255)
!7928 = !DILocation(line: 2067, column: 22, scope: !1255)
!7929 = !DILocation(line: 2067, column: 27, scope: !1255)
!7930 = !DILocation(line: 2068, column: 5, scope: !1255)
!7931 = !DILocation(line: 2068, column: 15, scope: !1255)
!7932 = !DILocation(line: 2068, column: 22, scope: !1255)
!7933 = !DILocation(line: 2070, column: 34, scope: !7934)
!7934 = distinct !DILexicalBlock(scope: !1255, file: !458, line: 2070, column: 9)
!7935 = !DILocation(line: 2070, column: 10, scope: !7934)
!7936 = !DILocation(line: 2070, column: 9, scope: !1255)
!7937 = !DILocation(line: 2071, column: 9, scope: !7934)
!7938 = !DILocation(line: 2073, column: 20, scope: !7939)
!7939 = distinct !DILexicalBlock(scope: !1255, file: !458, line: 2073, column: 9)
!7940 = !DILocation(line: 2073, column: 9, scope: !7939)
!7941 = !DILocation(line: 2073, column: 34, scope: !7939)
!7942 = !DILocation(line: 2073, column: 9, scope: !1255)
!7943 = !DILocation(line: 2074, column: 9, scope: !7939)
!7944 = !DILocation(line: 2075, column: 20, scope: !7945)
!7945 = distinct !DILexicalBlock(scope: !1255, file: !458, line: 2075, column: 9)
!7946 = !DILocation(line: 2075, column: 9, scope: !7945)
!7947 = !DILocation(line: 2075, column: 30, scope: !7945)
!7948 = !DILocation(line: 2075, column: 9, scope: !1255)
!7949 = !DILocation(line: 2076, column: 9, scope: !7950)
!7950 = distinct !DILexicalBlock(scope: !7945, file: !458, line: 2075, column: 35)
!7951 = !DILocation(line: 2077, column: 9, scope: !7950)
!7952 = !DILocation(line: 2080, column: 53, scope: !1255)
!7953 = !DILocation(line: 2081, column: 37, scope: !1255)
!7954 = !DILocation(line: 2081, column: 48, scope: !1255)
!7955 = !DILocation(line: 2082, column: 35, scope: !1255)
!7956 = !DILocation(line: 2082, column: 44, scope: !1255)
!7957 = !DILocation(line: 2082, column: 49, scope: !1255)
!7958 = !DILocation(line: 2080, column: 23, scope: !1255)
!7959 = !DILocation(line: 2080, column: 11, scope: !1255)
!7960 = !DILocation(line: 2080, column: 9, scope: !1255)
!7961 = !DILocation(line: 2084, column: 5, scope: !1255)
!7962 = !DILocation(line: 2085, column: 5, scope: !1255)
!7963 = !DILocation(line: 2086, column: 12, scope: !1255)
!7964 = !DILocation(line: 2086, column: 5, scope: !1255)
!7965 = !DILocation(line: 2087, column: 1, scope: !1255)
!7966 = !DILocation(line: 2228, column: 38, scope: !1404)
!7967 = !DILocation(line: 2228, column: 54, scope: !1404)
!7968 = !DILocation(line: 2230, column: 5, scope: !1404)
!7969 = !DILocation(line: 2230, column: 10, scope: !1404)
!7970 = !DILocation(line: 2230, column: 17, scope: !1404)
!7971 = !DILocation(line: 2230, column: 24, scope: !1404)
!7972 = !DILocation(line: 2231, column: 5, scope: !1404)
!7973 = !DILocation(line: 2231, column: 16, scope: !1404)
!7974 = !DILocation(line: 2231, column: 19, scope: !1404)
!7975 = !DILocation(line: 2231, column: 22, scope: !1404)
!7976 = !DILocation(line: 2231, column: 43, scope: !1404)
!7977 = !DILocation(line: 2231, column: 28, scope: !1404)
!7978 = !DILocation(line: 2231, column: 51, scope: !1404)
!7979 = !DILocation(line: 2233, column: 9, scope: !1404)
!7980 = !DILocation(line: 2233, column: 11, scope: !1404)
!7981 = !DILocation(line: 2233, column: 7, scope: !1404)
!7982 = !DILocation(line: 2234, column: 44, scope: !1404)
!7983 = !DILocation(line: 2234, column: 29, scope: !1404)
!7984 = !DILocation(line: 2234, column: 52, scope: !1404)
!7985 = !DILocation(line: 2234, column: 27, scope: !1404)
!7986 = !DILocation(line: 2234, column: 86, scope: !7987)
!7987 = !DILexicalBlockFile(scope: !1404, file: !458, discriminator: 1)
!7988 = !DILocation(line: 2234, column: 94, scope: !1404)
!7989 = !DILocation(line: 2234, column: 27, scope: !7990)
!7990 = !DILexicalBlockFile(scope: !1404, file: !458, discriminator: 2)
!7991 = !DILocation(line: 2234, column: 10, scope: !7992)
!7992 = !DILexicalBlockFile(scope: !7993, file: !458, discriminator: 4)
!7993 = !DILexicalBlockFile(scope: !1404, file: !458, discriminator: 3)
!7994 = !DILocation(line: 2235, column: 12, scope: !1404)
!7995 = !DILocation(line: 2235, column: 19, scope: !1404)
!7996 = !DILocation(line: 2235, column: 17, scope: !1404)
!7997 = !DILocation(line: 2235, column: 21, scope: !1404)
!7998 = !DILocation(line: 2235, column: 10, scope: !1404)
!7999 = !DILocation(line: 2236, column: 12, scope: !8000)
!8000 = distinct !DILexicalBlock(scope: !1404, file: !458, line: 2236, column: 5)
!8001 = !DILocation(line: 2236, column: 10, scope: !8000)
!8002 = !DILocation(line: 2236, column: 17, scope: !8003)
!8003 = !DILexicalBlockFile(scope: !8004, file: !458, discriminator: 2)
!8004 = !DILexicalBlockFile(scope: !8005, file: !458, discriminator: 1)
!8005 = distinct !DILexicalBlock(scope: !8000, file: !458, line: 2236, column: 5)
!8006 = !DILocation(line: 2236, column: 21, scope: !8005)
!8007 = !DILocation(line: 2236, column: 19, scope: !8005)
!8008 = !DILocation(line: 2236, column: 5, scope: !8000)
!8009 = !DILocation(line: 2237, column: 17, scope: !8010)
!8010 = distinct !DILexicalBlock(scope: !8005, file: !458, line: 2236, column: 29)
!8011 = !DILocation(line: 2237, column: 16, scope: !8010)
!8012 = !DILocation(line: 2237, column: 14, scope: !8010)
!8013 = !DILocation(line: 2238, column: 20, scope: !8010)
!8014 = !DILocation(line: 2238, column: 19, scope: !8010)
!8015 = !DILocation(line: 2238, column: 14, scope: !8010)
!8016 = !DILocation(line: 2238, column: 17, scope: !8010)
!8017 = !DILocation(line: 2239, column: 19, scope: !8010)
!8018 = !DILocation(line: 2239, column: 14, scope: !8010)
!8019 = !DILocation(line: 2239, column: 17, scope: !8010)
!8020 = !DILocation(line: 2240, column: 5, scope: !8010)
!8021 = !DILocation(line: 2236, column: 25, scope: !8005)
!8022 = !DILocation(line: 2236, column: 5, scope: !8005)
!8023 = !DILocation(line: 2242, column: 58, scope: !1404)
!8024 = !DILocation(line: 2243, column: 1, scope: !1404)
!8025 = !DILocation(line: 2242, column: 5, scope: !1404)
!8026 = !DILocation(line: 1277, column: 36, scope: !1414)
!8027 = !DILocation(line: 1277, column: 52, scope: !1414)
!8028 = !DILocation(line: 1279, column: 5, scope: !1414)
!8029 = !DILocation(line: 1279, column: 16, scope: !1414)
!8030 = !DILocation(line: 1279, column: 49, scope: !1414)
!8031 = !DILocation(line: 1279, column: 55, scope: !1414)
!8032 = !DILocation(line: 1279, column: 25, scope: !1414)
!8033 = !DILocation(line: 1280, column: 9, scope: !8034)
!8034 = distinct !DILexicalBlock(scope: !1414, file: !458, line: 1280, column: 9)
!8035 = !DILocation(line: 1280, column: 16, scope: !8034)
!8036 = !DILocation(line: 1280, column: 9, scope: !1414)
!8037 = !DILocation(line: 1281, column: 9, scope: !8034)
!8038 = !DILocation(line: 1282, column: 31, scope: !1414)
!8039 = !DILocation(line: 1282, column: 12, scope: !1414)
!8040 = !DILocation(line: 1282, column: 5, scope: !1414)
!8041 = !DILocation(line: 1283, column: 1, scope: !1414)
!8042 = !DILocation(line: 1292, column: 37, scope: !1419)
!8043 = !DILocation(line: 1292, column: 53, scope: !1419)
!8044 = !DILocation(line: 1294, column: 5, scope: !1419)
!8045 = !DILocation(line: 1294, column: 16, scope: !1419)
!8046 = !DILocation(line: 1294, column: 49, scope: !1419)
!8047 = !DILocation(line: 1294, column: 55, scope: !1419)
!8048 = !DILocation(line: 1294, column: 25, scope: !1419)
!8049 = !DILocation(line: 1295, column: 9, scope: !8050)
!8050 = distinct !DILexicalBlock(scope: !1419, file: !458, line: 1295, column: 9)
!8051 = !DILocation(line: 1295, column: 16, scope: !8050)
!8052 = !DILocation(line: 1295, column: 9, scope: !1419)
!8053 = !DILocation(line: 1296, column: 9, scope: !8050)
!8054 = !DILocation(line: 1297, column: 9, scope: !8055)
!8055 = distinct !DILexicalBlock(scope: !1419, file: !458, line: 1297, column: 9)
!8056 = !DILocation(line: 1297, column: 16, scope: !8055)
!8057 = !DILocation(line: 1297, column: 9, scope: !1419)
!8058 = !DILocation(line: 1298, column: 25, scope: !8059)
!8059 = distinct !DILexicalBlock(scope: !8055, file: !458, line: 1297, column: 23)
!8060 = !DILocation(line: 1298, column: 9, scope: !8059)
!8061 = !DILocation(line: 1300, column: 9, scope: !8059)
!8062 = !DILocation(line: 1302, column: 31, scope: !1419)
!8063 = !DILocation(line: 1302, column: 12, scope: !1419)
!8064 = !DILocation(line: 1302, column: 5, scope: !1419)
!8065 = !DILocation(line: 1303, column: 1, scope: !1419)
!8066 = !DILocation(line: 160, column: 27, scope: !1424)
!8067 = !DILocation(line: 160, column: 43, scope: !1424)
!8068 = !DILocation(line: 162, column: 5, scope: !1424)
!8069 = !DILocation(line: 162, column: 16, scope: !1424)
!8070 = !DILocation(line: 163, column: 5, scope: !1424)
!8071 = !DILocation(line: 163, column: 10, scope: !1424)
!8072 = !DILocation(line: 165, column: 34, scope: !8073)
!8073 = distinct !DILexicalBlock(scope: !1424, file: !839, line: 165, column: 9)
!8074 = !DILocation(line: 165, column: 10, scope: !8073)
!8075 = !DILocation(line: 165, column: 9, scope: !1424)
!8076 = !DILocation(line: 166, column: 9, scope: !8073)
!8077 = !DILocation(line: 168, column: 41, scope: !8078)
!8078 = distinct !DILexicalBlock(scope: !1424, file: !839, line: 168, column: 9)
!8079 = !DILocation(line: 168, column: 26, scope: !8078)
!8080 = !DILocation(line: 168, column: 49, scope: !8078)
!8081 = !DILocation(line: 168, column: 62, scope: !8078)
!8082 = !DILocation(line: 168, column: 59, scope: !8078)
!8083 = !DILocation(line: 168, column: 68, scope: !8078)
!8084 = !DILocation(line: 168, column: 86, scope: !8085)
!8085 = !DILexicalBlockFile(scope: !8078, file: !839, discriminator: 1)
!8086 = !DILocation(line: 168, column: 94, scope: !8078)
!8087 = !DILocation(line: 168, column: 103, scope: !8078)
!8088 = !DILocation(line: 168, column: 9, scope: !1424)
!8089 = !DILocation(line: 172, column: 78, scope: !8090)
!8090 = distinct !DILexicalBlock(scope: !8078, file: !839, line: 168, column: 126)
!8091 = !DILocation(line: 172, column: 63, scope: !8090)
!8092 = !DILocation(line: 172, column: 86, scope: !8090)
!8093 = !DILocation(line: 172, column: 61, scope: !8090)
!8094 = !DILocation(line: 172, column: 120, scope: !8095)
!8095 = !DILexicalBlockFile(scope: !8090, file: !839, discriminator: 1)
!8096 = !DILocation(line: 172, column: 98, scope: !8090)
!8097 = !DILocation(line: 172, column: 128, scope: !8090)
!8098 = !DILocation(line: 172, column: 61, scope: !8099)
!8099 = !DILexicalBlockFile(scope: !8090, file: !839, discriminator: 2)
!8100 = !DILocation(line: 172, column: 199, scope: !8101)
!8101 = !DILexicalBlockFile(scope: !8102, file: !839, discriminator: 4)
!8102 = !DILexicalBlockFile(scope: !8090, file: !839, discriminator: 3)
!8103 = !DILocation(line: 172, column: 184, scope: !8090)
!8104 = !DILocation(line: 172, column: 207, scope: !8090)
!8105 = !DILocation(line: 172, column: 16, scope: !8090)
!8106 = !DILocation(line: 172, column: 9, scope: !8090)
!8107 = !DILocation(line: 179, column: 16, scope: !1424)
!8108 = !DILocation(line: 179, column: 22, scope: !1424)
!8109 = !DILocation(line: 179, column: 62, scope: !1424)
!8110 = !DILocation(line: 179, column: 47, scope: !1424)
!8111 = !DILocation(line: 179, column: 70, scope: !1424)
!8112 = !DILocation(line: 179, column: 28, scope: !1424)
!8113 = !DILocation(line: 179, column: 84, scope: !1424)
!8114 = !DILocation(line: 179, column: 12, scope: !1424)
!8115 = !DILocation(line: 179, column: 5, scope: !1424)
!8116 = !DILocation(line: 180, column: 1, scope: !1424)
!8117 = !DILocation(line: 2164, column: 41, scope: !1430)
!8118 = !DILocation(line: 2164, column: 57, scope: !1430)
!8119 = !DILocation(line: 2166, column: 5, scope: !1430)
!8120 = !DILocation(line: 2166, column: 15, scope: !1430)
!8121 = !DILocation(line: 2166, column: 25, scope: !1430)
!8122 = !DILocation(line: 2168, column: 38, scope: !1430)
!8123 = !DILocation(line: 2168, column: 15, scope: !1430)
!8124 = !DILocation(line: 2168, column: 13, scope: !1430)
!8125 = !DILocation(line: 2169, column: 11, scope: !8126)
!8126 = distinct !DILexicalBlock(scope: !1430, file: !458, line: 2169, column: 9)
!8127 = !DILocation(line: 2169, column: 9, scope: !1430)
!8128 = !DILocation(line: 2170, column: 9, scope: !8126)
!8129 = !DILocation(line: 2173, column: 25, scope: !1430)
!8130 = !DILocation(line: 2173, column: 13, scope: !1430)
!8131 = !DILocation(line: 2174, column: 45, scope: !1430)
!8132 = !DILocation(line: 2174, column: 30, scope: !1430)
!8133 = !DILocation(line: 2174, column: 53, scope: !1430)
!8134 = !DILocation(line: 2174, column: 28, scope: !1430)
!8135 = !DILocation(line: 2174, column: 87, scope: !8136)
!8136 = !DILexicalBlockFile(scope: !1430, file: !458, discriminator: 1)
!8137 = !DILocation(line: 2174, column: 95, scope: !1430)
!8138 = !DILocation(line: 2174, column: 28, scope: !8139)
!8139 = !DILexicalBlockFile(scope: !1430, file: !458, discriminator: 2)
!8140 = !DILocation(line: 2174, column: 166, scope: !8141)
!8141 = !DILexicalBlockFile(scope: !8142, file: !458, discriminator: 4)
!8142 = !DILexicalBlockFile(scope: !1430, file: !458, discriminator: 3)
!8143 = !DILocation(line: 2174, column: 151, scope: !1430)
!8144 = !DILocation(line: 2174, column: 174, scope: !1430)
!8145 = !DILocation(line: 2175, column: 13, scope: !1430)
!8146 = !DILocation(line: 2176, column: 45, scope: !1430)
!8147 = !DILocation(line: 2176, column: 30, scope: !1430)
!8148 = !DILocation(line: 2176, column: 56, scope: !1430)
!8149 = !DILocation(line: 2176, column: 28, scope: !1430)
!8150 = !DILocation(line: 2176, column: 90, scope: !8136)
!8151 = !DILocation(line: 2176, column: 68, scope: !1430)
!8152 = !DILocation(line: 2176, column: 101, scope: !1430)
!8153 = !DILocation(line: 2176, column: 28, scope: !8139)
!8154 = !DILocation(line: 2176, column: 172, scope: !8141)
!8155 = !DILocation(line: 2176, column: 157, scope: !1430)
!8156 = !DILocation(line: 2176, column: 183, scope: !1430)
!8157 = !DILocation(line: 2172, column: 14, scope: !1430)
!8158 = !DILocation(line: 2172, column: 12, scope: !1430)
!8159 = !DILocation(line: 2179, column: 5, scope: !1430)
!8160 = !DILocation(line: 2179, column: 10, scope: !8161)
!8161 = !DILexicalBlockFile(scope: !1437, file: !458, discriminator: 1)
!8162 = !DILocation(line: 2179, column: 20, scope: !1437)
!8163 = !DILocation(line: 2179, column: 50, scope: !1437)
!8164 = !DILocation(line: 2179, column: 68, scope: !8165)
!8165 = distinct !DILexicalBlock(scope: !1437, file: !458, line: 2179, column: 65)
!8166 = !DILocation(line: 2179, column: 85, scope: !8165)
!8167 = !DILocation(line: 2179, column: 65, scope: !8165)
!8168 = !DILocation(line: 2179, column: 95, scope: !8165)
!8169 = !DILocation(line: 2179, column: 65, scope: !1437)
!8170 = !DILocation(line: 2179, column: 65, scope: !8171)
!8171 = !DILexicalBlockFile(scope: !1437, file: !458, discriminator: 2)
!8172 = !DILocation(line: 2179, column: 126, scope: !8173)
!8173 = !DILexicalBlockFile(scope: !8165, file: !458, discriminator: 3)
!8174 = !DILocation(line: 2179, column: 144, scope: !8165)
!8175 = !DILocation(line: 2179, column: 154, scope: !8165)
!8176 = !DILocation(line: 2179, column: 179, scope: !8165)
!8177 = !DILocation(line: 2179, column: 110, scope: !8165)
!8178 = !DILocation(line: 2179, column: 198, scope: !8179)
!8179 = !DILexicalBlockFile(scope: !1430, file: !458, discriminator: 4)
!8180 = !DILocation(line: 2179, column: 198, scope: !1437)
!8181 = !DILocation(line: 2179, column: 198, scope: !8182)
!8182 = !DILexicalBlockFile(scope: !1437, file: !458, discriminator: 5)
!8183 = !DILocation(line: 2180, column: 12, scope: !1430)
!8184 = !DILocation(line: 2180, column: 5, scope: !1430)
!8185 = !DILocation(line: 2181, column: 1, scope: !1430)
!8186 = !DILocation(line: 2193, column: 37, scope: !1458)
!8187 = !DILocation(line: 2193, column: 53, scope: !1458)
!8188 = !DILocation(line: 2193, column: 69, scope: !1458)
!8189 = !DILocation(line: 2196, column: 5, scope: !1458)
!8190 = !DILocation(line: 2196, column: 16, scope: !1458)
!8191 = !DILocation(line: 2196, column: 54, scope: !1458)
!8192 = !DILocation(line: 2196, column: 39, scope: !1458)
!8193 = !DILocation(line: 2196, column: 62, scope: !1458)
!8194 = !DILocation(line: 2196, column: 73, scope: !1458)
!8195 = !DILocation(line: 2197, column: 5, scope: !1458)
!8196 = !DILocation(line: 2197, column: 16, scope: !1458)
!8197 = !DILocation(line: 2198, column: 5, scope: !1458)
!8198 = !DILocation(line: 2198, column: 17, scope: !1458)
!8199 = !DILocation(line: 2198, column: 53, scope: !1458)
!8200 = !DILocation(line: 2198, column: 38, scope: !1458)
!8201 = !DILocation(line: 2198, column: 61, scope: !1458)
!8202 = !DILocation(line: 2198, column: 36, scope: !1458)
!8203 = !DILocation(line: 2198, column: 95, scope: !8204)
!8204 = !DILexicalBlockFile(scope: !1458, file: !458, discriminator: 1)
!8205 = !DILocation(line: 2198, column: 103, scope: !1458)
!8206 = !DILocation(line: 2198, column: 36, scope: !8207)
!8207 = !DILexicalBlockFile(scope: !1458, file: !458, discriminator: 2)
!8208 = !DILocation(line: 2198, column: 17, scope: !8209)
!8209 = !DILexicalBlockFile(scope: !8210, file: !458, discriminator: 4)
!8210 = !DILexicalBlockFile(scope: !1458, file: !458, discriminator: 3)
!8211 = !DILocation(line: 2198, column: 143, scope: !1458)
!8212 = !DILocation(line: 2199, column: 5, scope: !1458)
!8213 = !DILocation(line: 2199, column: 15, scope: !1458)
!8214 = !DILocation(line: 2199, column: 22, scope: !1458)
!8215 = !DILocation(line: 2200, column: 5, scope: !1458)
!8216 = !DILocation(line: 2200, column: 15, scope: !1458)
!8217 = !DILocation(line: 2202, column: 45, scope: !8218)
!8218 = distinct !DILexicalBlock(scope: !1458, file: !458, line: 2202, column: 9)
!8219 = !DILocation(line: 2202, column: 51, scope: !8218)
!8220 = !DILocation(line: 2202, column: 10, scope: !8218)
!8221 = !DILocation(line: 2202, column: 9, scope: !1458)
!8222 = !DILocation(line: 2204, column: 9, scope: !8218)
!8223 = !DILocation(line: 2205, column: 9, scope: !8224)
!8224 = distinct !DILexicalBlock(scope: !1458, file: !458, line: 2205, column: 9)
!8225 = !DILocation(line: 2205, column: 18, scope: !8224)
!8226 = !DILocation(line: 2205, column: 9, scope: !1458)
!8227 = !DILocation(line: 2206, column: 18, scope: !8224)
!8228 = !DILocation(line: 2206, column: 9, scope: !8224)
!8229 = !DILocation(line: 2208, column: 9, scope: !8230)
!8230 = distinct !DILexicalBlock(scope: !1458, file: !458, line: 2208, column: 9)
!8231 = !DILocation(line: 2208, column: 16, scope: !8230)
!8232 = !DILocation(line: 2208, column: 9, scope: !1458)
!8233 = !DILocation(line: 2209, column: 56, scope: !8230)
!8234 = !DILocation(line: 2209, column: 44, scope: !8230)
!8235 = !DILocation(line: 2209, column: 62, scope: !8230)
!8236 = !DILocation(line: 2209, column: 65, scope: !8230)
!8237 = !DILocation(line: 2209, column: 70, scope: !8230)
!8238 = !DILocation(line: 2209, column: 16, scope: !8230)
!8239 = !DILocation(line: 2209, column: 9, scope: !8230)
!8240 = !DILocation(line: 2211, column: 20, scope: !8241)
!8241 = distinct !DILexicalBlock(scope: !1458, file: !458, line: 2211, column: 9)
!8242 = !DILocation(line: 2211, column: 9, scope: !8241)
!8243 = !DILocation(line: 2211, column: 35, scope: !8241)
!8244 = !DILocation(line: 2211, column: 9, scope: !1458)
!8245 = !DILocation(line: 2212, column: 9, scope: !8241)
!8246 = !DILocation(line: 2213, column: 16, scope: !1458)
!8247 = !DILocation(line: 2213, column: 9, scope: !1458)
!8248 = !DILocation(line: 2214, column: 14, scope: !1458)
!8249 = !DILocation(line: 2214, column: 7, scope: !1458)
!8250 = !DILocation(line: 2217, column: 21, scope: !1458)
!8251 = !DILocation(line: 2217, column: 9, scope: !1458)
!8252 = !DILocation(line: 2217, column: 27, scope: !1458)
!8253 = !DILocation(line: 2217, column: 30, scope: !1458)
!8254 = !DILocation(line: 2217, column: 35, scope: !1458)
!8255 = !DILocation(line: 2217, column: 40, scope: !1458)
!8256 = !DILocation(line: 2217, column: 43, scope: !1458)
!8257 = !DILocation(line: 2216, column: 12, scope: !1458)
!8258 = !DILocation(line: 2216, column: 10, scope: !1458)
!8259 = !DILocation(line: 2219, column: 5, scope: !1458)
!8260 = !DILocation(line: 2220, column: 12, scope: !1458)
!8261 = !DILocation(line: 2220, column: 5, scope: !1458)
!8262 = !DILocation(line: 2221, column: 1, scope: !1458)
!8263 = !DILocation(line: 2557, column: 37, scope: !1590)
!8264 = !DILocation(line: 2557, column: 53, scope: !1590)
!8265 = !DILocation(line: 2559, column: 5, scope: !1590)
!8266 = !DILocation(line: 2559, column: 16, scope: !1590)
!8267 = !DILocation(line: 2559, column: 23, scope: !1590)
!8268 = !DILocation(line: 2559, column: 31, scope: !1590)
!8269 = !DILocation(line: 2560, column: 5, scope: !1590)
!8270 = !DILocation(line: 2560, column: 11, scope: !1590)
!8271 = !DILocation(line: 2560, column: 19, scope: !1590)
!8272 = !DILocation(line: 2561, column: 5, scope: !1590)
!8273 = !DILocation(line: 2561, column: 15, scope: !1590)
!8274 = !DILocation(line: 2562, column: 5, scope: !1590)
!8275 = !DILocation(line: 2562, column: 15, scope: !1590)
!8276 = !DILocation(line: 2563, column: 34, scope: !8277)
!8277 = distinct !DILexicalBlock(scope: !1590, file: !458, line: 2563, column: 9)
!8278 = !DILocation(line: 2563, column: 10, scope: !8277)
!8279 = !DILocation(line: 2563, column: 9, scope: !1590)
!8280 = !DILocation(line: 2564, column: 9, scope: !8277)
!8281 = !DILocation(line: 2565, column: 9, scope: !8282)
!8282 = distinct !DILexicalBlock(scope: !1590, file: !458, line: 2565, column: 9)
!8283 = !DILocation(line: 2565, column: 13, scope: !8282)
!8284 = !DILocation(line: 2565, column: 9, scope: !1590)
!8285 = !DILocation(line: 2566, column: 16, scope: !8286)
!8286 = distinct !DILexicalBlock(scope: !8282, file: !458, line: 2565, column: 35)
!8287 = !DILocation(line: 2567, column: 17, scope: !8286)
!8288 = !DILocation(line: 2568, column: 5, scope: !8286)
!8289 = !DILocation(line: 2570, column: 24, scope: !8290)
!8290 = distinct !DILexicalBlock(scope: !8291, file: !458, line: 2570, column: 13)
!8291 = distinct !DILexicalBlock(scope: !8282, file: !458, line: 2569, column: 10)
!8292 = !DILocation(line: 2570, column: 13, scope: !8290)
!8293 = !DILocation(line: 2570, column: 36, scope: !8290)
!8294 = !DILocation(line: 2570, column: 13, scope: !8291)
!8295 = !DILocation(line: 2571, column: 13, scope: !8290)
!8296 = !DILocation(line: 2572, column: 32, scope: !8291)
!8297 = !DILocation(line: 2572, column: 16, scope: !8291)
!8298 = !DILocation(line: 2573, column: 24, scope: !8291)
!8299 = !DILocation(line: 2573, column: 17, scope: !8291)
!8300 = !DILocation(line: 2575, column: 45, scope: !1590)
!8301 = !DILocation(line: 2575, column: 30, scope: !1590)
!8302 = !DILocation(line: 2575, column: 53, scope: !1590)
!8303 = !DILocation(line: 2575, column: 28, scope: !1590)
!8304 = !DILocation(line: 2575, column: 87, scope: !8305)
!8305 = !DILexicalBlockFile(scope: !1590, file: !458, discriminator: 1)
!8306 = !DILocation(line: 2575, column: 95, scope: !1590)
!8307 = !DILocation(line: 2575, column: 28, scope: !8308)
!8308 = !DILexicalBlockFile(scope: !1590, file: !458, discriminator: 2)
!8309 = !DILocation(line: 2575, column: 11, scope: !8310)
!8310 = !DILexicalBlockFile(scope: !8311, file: !458, discriminator: 4)
!8311 = !DILexicalBlockFile(scope: !1590, file: !458, discriminator: 3)
!8312 = !DILocation(line: 2576, column: 31, scope: !1590)
!8313 = !DILocation(line: 2576, column: 16, scope: !1590)
!8314 = !DILocation(line: 2576, column: 39, scope: !1590)
!8315 = !DILocation(line: 2576, column: 12, scope: !1590)
!8316 = !DILocation(line: 2577, column: 27, scope: !1590)
!8317 = !DILocation(line: 2577, column: 34, scope: !1590)
!8318 = !DILocation(line: 2577, column: 42, scope: !1590)
!8319 = !DILocation(line: 2577, column: 50, scope: !1590)
!8320 = !DILocation(line: 2577, column: 13, scope: !1590)
!8321 = !DILocation(line: 2577, column: 11, scope: !1590)
!8322 = !DILocation(line: 2578, column: 9, scope: !8323)
!8323 = distinct !DILexicalBlock(scope: !1590, file: !458, line: 2578, column: 9)
!8324 = !DILocation(line: 2578, column: 13, scope: !8323)
!8325 = !DILocation(line: 2578, column: 9, scope: !1590)
!8326 = !DILocation(line: 2579, column: 9, scope: !8323)
!8327 = !DILocation(line: 2580, column: 42, scope: !1590)
!8328 = !DILocation(line: 2580, column: 49, scope: !1590)
!8329 = !DILocation(line: 2580, column: 12, scope: !1590)
!8330 = !DILocation(line: 2580, column: 5, scope: !1590)
!8331 = !DILocation(line: 2581, column: 1, scope: !1590)
!8332 = !DILocation(line: 2098, column: 36, scope: !1608)
!8333 = !DILocation(line: 2098, column: 52, scope: !1608)
!8334 = !DILocation(line: 2098, column: 68, scope: !1608)
!8335 = !DILocation(line: 2101, column: 5, scope: !1608)
!8336 = !DILocation(line: 2101, column: 16, scope: !1608)
!8337 = !DILocation(line: 2101, column: 54, scope: !1608)
!8338 = !DILocation(line: 2101, column: 39, scope: !1608)
!8339 = !DILocation(line: 2101, column: 62, scope: !1608)
!8340 = !DILocation(line: 2101, column: 73, scope: !1608)
!8341 = !DILocation(line: 2102, column: 5, scope: !1608)
!8342 = !DILocation(line: 2102, column: 16, scope: !1608)
!8343 = !DILocation(line: 2103, column: 5, scope: !1608)
!8344 = !DILocation(line: 2103, column: 17, scope: !1608)
!8345 = !DILocation(line: 2103, column: 53, scope: !1608)
!8346 = !DILocation(line: 2103, column: 38, scope: !1608)
!8347 = !DILocation(line: 2103, column: 61, scope: !1608)
!8348 = !DILocation(line: 2103, column: 36, scope: !1608)
!8349 = !DILocation(line: 2103, column: 95, scope: !8350)
!8350 = !DILexicalBlockFile(scope: !1608, file: !458, discriminator: 1)
!8351 = !DILocation(line: 2103, column: 103, scope: !1608)
!8352 = !DILocation(line: 2103, column: 36, scope: !8353)
!8353 = !DILexicalBlockFile(scope: !1608, file: !458, discriminator: 2)
!8354 = !DILocation(line: 2103, column: 17, scope: !8355)
!8355 = !DILexicalBlockFile(scope: !8356, file: !458, discriminator: 4)
!8356 = !DILexicalBlockFile(scope: !1608, file: !458, discriminator: 3)
!8357 = !DILocation(line: 2103, column: 143, scope: !1608)
!8358 = !DILocation(line: 2104, column: 5, scope: !1608)
!8359 = !DILocation(line: 2104, column: 15, scope: !1608)
!8360 = !DILocation(line: 2104, column: 22, scope: !1608)
!8361 = !DILocation(line: 2105, column: 5, scope: !1608)
!8362 = !DILocation(line: 2105, column: 15, scope: !1608)
!8363 = !DILocation(line: 2107, column: 45, scope: !8364)
!8364 = distinct !DILexicalBlock(scope: !1608, file: !458, line: 2107, column: 9)
!8365 = !DILocation(line: 2107, column: 51, scope: !8364)
!8366 = !DILocation(line: 2107, column: 10, scope: !8364)
!8367 = !DILocation(line: 2107, column: 9, scope: !1608)
!8368 = !DILocation(line: 2109, column: 9, scope: !8364)
!8369 = !DILocation(line: 2110, column: 9, scope: !8370)
!8370 = distinct !DILexicalBlock(scope: !1608, file: !458, line: 2110, column: 9)
!8371 = !DILocation(line: 2110, column: 18, scope: !8370)
!8372 = !DILocation(line: 2110, column: 9, scope: !1608)
!8373 = !DILocation(line: 2111, column: 18, scope: !8370)
!8374 = !DILocation(line: 2111, column: 9, scope: !8370)
!8375 = !DILocation(line: 2113, column: 9, scope: !8376)
!8376 = distinct !DILexicalBlock(scope: !1608, file: !458, line: 2113, column: 9)
!8377 = !DILocation(line: 2113, column: 16, scope: !8376)
!8378 = !DILocation(line: 2113, column: 9, scope: !1608)
!8379 = !DILocation(line: 2114, column: 55, scope: !8376)
!8380 = !DILocation(line: 2114, column: 43, scope: !8376)
!8381 = !DILocation(line: 2114, column: 61, scope: !8376)
!8382 = !DILocation(line: 2114, column: 64, scope: !8376)
!8383 = !DILocation(line: 2114, column: 69, scope: !8376)
!8384 = !DILocation(line: 2114, column: 16, scope: !8376)
!8385 = !DILocation(line: 2114, column: 9, scope: !8376)
!8386 = !DILocation(line: 2116, column: 20, scope: !8387)
!8387 = distinct !DILexicalBlock(scope: !1608, file: !458, line: 2116, column: 9)
!8388 = !DILocation(line: 2116, column: 9, scope: !8387)
!8389 = !DILocation(line: 2116, column: 35, scope: !8387)
!8390 = !DILocation(line: 2116, column: 9, scope: !1608)
!8391 = !DILocation(line: 2117, column: 9, scope: !8387)
!8392 = !DILocation(line: 2118, column: 16, scope: !1608)
!8393 = !DILocation(line: 2118, column: 9, scope: !1608)
!8394 = !DILocation(line: 2119, column: 14, scope: !1608)
!8395 = !DILocation(line: 2119, column: 7, scope: !1608)
!8396 = !DILocation(line: 2122, column: 21, scope: !1608)
!8397 = !DILocation(line: 2122, column: 9, scope: !1608)
!8398 = !DILocation(line: 2122, column: 27, scope: !1608)
!8399 = !DILocation(line: 2122, column: 30, scope: !1608)
!8400 = !DILocation(line: 2122, column: 35, scope: !1608)
!8401 = !DILocation(line: 2122, column: 40, scope: !1608)
!8402 = !DILocation(line: 2122, column: 43, scope: !1608)
!8403 = !DILocation(line: 2121, column: 12, scope: !1608)
!8404 = !DILocation(line: 2121, column: 10, scope: !1608)
!8405 = !DILocation(line: 2124, column: 5, scope: !1608)
!8406 = !DILocation(line: 2125, column: 12, scope: !1608)
!8407 = !DILocation(line: 2125, column: 5, scope: !1608)
!8408 = !DILocation(line: 2126, column: 1, scope: !1608)
!8409 = !DILocation(line: 2638, column: 32, scope: !1732)
!8410 = !DILocation(line: 2638, column: 48, scope: !1732)
!8411 = !DILocation(line: 2638, column: 64, scope: !1732)
!8412 = !DILocation(line: 2641, column: 5, scope: !1732)
!8413 = !DILocation(line: 2641, column: 9, scope: !1732)
!8414 = !DILocation(line: 2643, column: 45, scope: !8415)
!8415 = distinct !DILexicalBlock(scope: !1732, file: !458, line: 2643, column: 9)
!8416 = !DILocation(line: 2643, column: 51, scope: !8415)
!8417 = !DILocation(line: 2643, column: 10, scope: !8415)
!8418 = !DILocation(line: 2643, column: 9, scope: !1732)
!8419 = !DILocation(line: 2645, column: 9, scope: !8415)
!8420 = !DILocation(line: 2648, column: 21, scope: !1732)
!8421 = !DILocation(line: 2648, column: 59, scope: !1732)
!8422 = !DILocation(line: 2648, column: 44, scope: !1732)
!8423 = !DILocation(line: 2648, column: 67, scope: !1732)
!8424 = !DILocation(line: 2648, column: 42, scope: !1732)
!8425 = !DILocation(line: 2648, column: 101, scope: !8426)
!8426 = !DILexicalBlockFile(scope: !1732, file: !458, discriminator: 1)
!8427 = !DILocation(line: 2648, column: 79, scope: !1732)
!8428 = !DILocation(line: 2648, column: 109, scope: !1732)
!8429 = !DILocation(line: 2648, column: 42, scope: !8430)
!8430 = !DILexicalBlockFile(scope: !1732, file: !458, discriminator: 2)
!8431 = !DILocation(line: 2649, column: 41, scope: !1732)
!8432 = !DILocation(line: 2649, column: 26, scope: !1732)
!8433 = !DILocation(line: 2649, column: 49, scope: !1732)
!8434 = !DILocation(line: 2649, column: 60, scope: !1732)
!8435 = !DILocation(line: 2647, column: 12, scope: !1732)
!8436 = !DILocation(line: 2647, column: 5, scope: !1732)
!8437 = !DILocation(line: 2651, column: 1, scope: !1732)
!8438 = !DILocation(line: 1382, column: 41, scope: !1762)
!8439 = !DILocation(line: 1382, column: 57, scope: !1762)
!8440 = !DILocation(line: 1384, column: 5, scope: !1762)
!8441 = !DILocation(line: 1384, column: 16, scope: !1762)
!8442 = !DILocation(line: 1385, column: 5, scope: !1762)
!8443 = !DILocation(line: 1385, column: 16, scope: !1762)
!8444 = !DILocation(line: 1386, column: 5, scope: !1762)
!8445 = !DILocation(line: 1386, column: 15, scope: !1762)
!8446 = !DILocation(line: 1387, column: 5, scope: !1762)
!8447 = !DILocation(line: 1387, column: 9, scope: !1762)
!8448 = !DILocation(line: 1389, column: 51, scope: !8449)
!8449 = distinct !DILexicalBlock(scope: !1762, file: !458, line: 1389, column: 9)
!8450 = !DILocation(line: 1389, column: 10, scope: !8449)
!8451 = !DILocation(line: 1389, column: 9, scope: !1762)
!8452 = !DILocation(line: 1390, column: 9, scope: !8449)
!8453 = !DILocation(line: 1391, column: 26, scope: !1772)
!8454 = !DILocation(line: 1391, column: 36, scope: !1772)
!8455 = !DILocation(line: 1391, column: 47, scope: !1772)
!8456 = !DILocation(line: 1391, column: 56, scope: !1772)
!8457 = !DILocation(line: 1391, column: 73, scope: !1772)
!8458 = !DILocation(line: 1391, column: 9, scope: !1762)
!8459 = !DILocation(line: 1392, column: 9, scope: !1771)
!8460 = !DILocation(line: 1392, column: 20, scope: !1771)
!8461 = !DILocation(line: 1393, column: 16, scope: !8462)
!8462 = distinct !DILexicalBlock(scope: !1771, file: !458, line: 1393, column: 9)
!8463 = !DILocation(line: 1393, column: 14, scope: !8462)
!8464 = !DILocation(line: 1393, column: 21, scope: !8465)
!8465 = !DILexicalBlockFile(scope: !8466, file: !458, discriminator: 2)
!8466 = !DILexicalBlockFile(scope: !8467, file: !458, discriminator: 1)
!8467 = distinct !DILexicalBlock(scope: !8462, file: !458, line: 1393, column: 9)
!8468 = !DILocation(line: 1393, column: 42, scope: !8467)
!8469 = !DILocation(line: 1393, column: 27, scope: !8467)
!8470 = !DILocation(line: 1393, column: 52, scope: !8467)
!8471 = !DILocation(line: 1393, column: 23, scope: !8467)
!8472 = !DILocation(line: 1393, column: 9, scope: !8462)
!8473 = !DILocation(line: 1394, column: 43, scope: !8474)
!8474 = distinct !DILexicalBlock(scope: !8467, file: !458, line: 1393, column: 67)
!8475 = !DILocation(line: 1395, column: 77, scope: !8474)
!8476 = !DILocation(line: 1395, column: 59, scope: !8474)
!8477 = !DILocation(line: 1395, column: 41, scope: !8474)
!8478 = !DILocation(line: 1395, column: 69, scope: !8474)
!8479 = !DILocation(line: 1395, column: 40, scope: !8474)
!8480 = !DILocation(line: 1396, column: 39, scope: !8474)
!8481 = !DILocation(line: 1396, column: 46, scope: !8474)
!8482 = !DILocation(line: 1394, column: 22, scope: !8474)
!8483 = !DILocation(line: 1394, column: 20, scope: !8474)
!8484 = !DILocation(line: 1397, column: 17, scope: !8485)
!8485 = distinct !DILexicalBlock(scope: !8474, file: !458, line: 1397, column: 17)
!8486 = !DILocation(line: 1397, column: 24, scope: !8485)
!8487 = !DILocation(line: 1397, column: 17, scope: !8474)
!8488 = !DILocation(line: 1398, column: 17, scope: !8485)
!8489 = !DILocation(line: 1399, column: 22, scope: !8490)
!8490 = distinct !DILexicalBlock(scope: !8485, file: !458, line: 1399, column: 22)
!8491 = !DILocation(line: 1399, column: 22, scope: !8485)
!8492 = !DILocation(line: 1400, column: 83, scope: !8493)
!8493 = distinct !DILexicalBlock(scope: !8490, file: !458, line: 1399, column: 30)
!8494 = !DILocation(line: 1400, column: 17, scope: !8493)
!8495 = !DILocation(line: 1402, column: 9, scope: !8474)
!8496 = !DILocation(line: 1393, column: 63, scope: !8467)
!8497 = !DILocation(line: 1393, column: 9, scope: !8467)
!8498 = !DILocation(line: 1403, column: 76, scope: !1771)
!8499 = !DILocation(line: 1403, column: 9, scope: !1771)
!8500 = !DILocation(line: 1404, column: 5, scope: !1772)
!8501 = !DILocation(line: 1405, column: 35, scope: !1762)
!8502 = !DILocation(line: 1405, column: 41, scope: !1762)
!8503 = !DILocation(line: 1405, column: 49, scope: !1762)
!8504 = !DILocation(line: 1405, column: 56, scope: !1762)
!8505 = !DILocation(line: 1405, column: 14, scope: !1762)
!8506 = !DILocation(line: 1405, column: 12, scope: !1762)
!8507 = !DILocation(line: 1406, column: 9, scope: !8508)
!8508 = distinct !DILexicalBlock(scope: !1762, file: !458, line: 1406, column: 9)
!8509 = !DILocation(line: 1406, column: 16, scope: !8508)
!8510 = !DILocation(line: 1406, column: 9, scope: !1762)
!8511 = !DILocation(line: 1407, column: 36, scope: !8512)
!8512 = distinct !DILexicalBlock(scope: !8513, file: !458, line: 1407, column: 13)
!8513 = distinct !DILexicalBlock(scope: !8508, file: !458, line: 1406, column: 23)
!8514 = !DILocation(line: 1407, column: 13, scope: !8512)
!8515 = !DILocation(line: 1407, column: 13, scope: !8513)
!8516 = !DILocation(line: 1408, column: 26, scope: !8512)
!8517 = !DILocation(line: 1409, column: 71, scope: !8512)
!8518 = !DILocation(line: 1409, column: 81, scope: !8512)
!8519 = !DILocation(line: 1409, column: 91, scope: !8512)
!8520 = !DILocation(line: 1408, column: 13, scope: !8512)
!8521 = !DILocation(line: 1410, column: 9, scope: !8513)
!8522 = !DILocation(line: 1413, column: 32, scope: !8508)
!8523 = !DILocation(line: 1413, column: 16, scope: !8508)
!8524 = !DILocation(line: 1413, column: 9, scope: !8508)
!8525 = !DILocation(line: 1414, column: 1, scope: !1762)
!8526 = !DILocation(line: 2486, column: 36, scope: !1773)
!8527 = !DILocation(line: 2486, column: 52, scope: !1773)
!8528 = !DILocation(line: 2488, column: 5, scope: !1773)
!8529 = !DILocation(line: 2488, column: 16, scope: !1773)
!8530 = !DILocation(line: 2488, column: 22, scope: !1773)
!8531 = !DILocation(line: 2488, column: 29, scope: !1773)
!8532 = !DILocation(line: 2488, column: 37, scope: !1773)
!8533 = !DILocation(line: 2489, column: 5, scope: !1773)
!8534 = !DILocation(line: 2489, column: 11, scope: !1773)
!8535 = !DILocation(line: 2489, column: 19, scope: !1773)
!8536 = !DILocation(line: 2490, column: 5, scope: !1773)
!8537 = !DILocation(line: 2490, column: 15, scope: !1773)
!8538 = !DILocation(line: 2491, column: 5, scope: !1773)
!8539 = !DILocation(line: 2491, column: 15, scope: !1773)
!8540 = !DILocation(line: 2492, column: 34, scope: !8541)
!8541 = distinct !DILexicalBlock(scope: !1773, file: !458, line: 2492, column: 9)
!8542 = !DILocation(line: 2492, column: 10, scope: !8541)
!8543 = !DILocation(line: 2492, column: 9, scope: !1773)
!8544 = !DILocation(line: 2493, column: 9, scope: !8541)
!8545 = !DILocation(line: 2494, column: 9, scope: !8546)
!8546 = distinct !DILexicalBlock(scope: !1773, file: !458, line: 2494, column: 9)
!8547 = !DILocation(line: 2494, column: 13, scope: !8546)
!8548 = !DILocation(line: 2494, column: 9, scope: !1773)
!8549 = !DILocation(line: 2495, column: 16, scope: !8550)
!8550 = distinct !DILexicalBlock(scope: !8546, file: !458, line: 2494, column: 35)
!8551 = !DILocation(line: 2496, column: 17, scope: !8550)
!8552 = !DILocation(line: 2497, column: 5, scope: !8550)
!8553 = !DILocation(line: 2499, column: 24, scope: !8554)
!8554 = distinct !DILexicalBlock(scope: !8555, file: !458, line: 2499, column: 13)
!8555 = distinct !DILexicalBlock(scope: !8546, file: !458, line: 2498, column: 10)
!8556 = !DILocation(line: 2499, column: 13, scope: !8554)
!8557 = !DILocation(line: 2499, column: 36, scope: !8554)
!8558 = !DILocation(line: 2499, column: 13, scope: !8555)
!8559 = !DILocation(line: 2500, column: 13, scope: !8554)
!8560 = !DILocation(line: 2501, column: 32, scope: !8555)
!8561 = !DILocation(line: 2501, column: 16, scope: !8555)
!8562 = !DILocation(line: 2502, column: 24, scope: !8555)
!8563 = !DILocation(line: 2502, column: 17, scope: !8555)
!8564 = !DILocation(line: 2504, column: 45, scope: !1773)
!8565 = !DILocation(line: 2504, column: 30, scope: !1773)
!8566 = !DILocation(line: 2504, column: 53, scope: !1773)
!8567 = !DILocation(line: 2504, column: 28, scope: !1773)
!8568 = !DILocation(line: 2504, column: 87, scope: !8569)
!8569 = !DILexicalBlockFile(scope: !1773, file: !458, discriminator: 1)
!8570 = !DILocation(line: 2504, column: 95, scope: !1773)
!8571 = !DILocation(line: 2504, column: 28, scope: !8572)
!8572 = !DILexicalBlockFile(scope: !1773, file: !458, discriminator: 2)
!8573 = !DILocation(line: 2504, column: 11, scope: !8574)
!8574 = !DILexicalBlockFile(scope: !8575, file: !458, discriminator: 4)
!8575 = !DILexicalBlockFile(scope: !1773, file: !458, discriminator: 3)
!8576 = !DILocation(line: 2505, column: 31, scope: !1773)
!8577 = !DILocation(line: 2505, column: 16, scope: !1773)
!8578 = !DILocation(line: 2505, column: 39, scope: !1773)
!8579 = !DILocation(line: 2505, column: 12, scope: !1773)
!8580 = !DILocation(line: 2506, column: 26, scope: !1773)
!8581 = !DILocation(line: 2506, column: 33, scope: !1773)
!8582 = !DILocation(line: 2506, column: 41, scope: !1773)
!8583 = !DILocation(line: 2506, column: 49, scope: !1773)
!8584 = !DILocation(line: 2506, column: 12, scope: !1773)
!8585 = !DILocation(line: 2506, column: 10, scope: !1773)
!8586 = !DILocation(line: 2507, column: 9, scope: !8587)
!8587 = distinct !DILexicalBlock(scope: !1773, file: !458, line: 2507, column: 9)
!8588 = !DILocation(line: 2507, column: 17, scope: !8587)
!8589 = !DILocation(line: 2507, column: 14, scope: !8587)
!8590 = !DILocation(line: 2507, column: 9, scope: !1773)
!8591 = !DILocation(line: 2508, column: 17, scope: !8587)
!8592 = !DILocation(line: 2508, column: 15, scope: !8587)
!8593 = !DILocation(line: 2508, column: 9, scope: !8587)
!8594 = !DILocation(line: 2510, column: 31, scope: !8587)
!8595 = !DILocation(line: 2510, column: 38, scope: !8587)
!8596 = !DILocation(line: 2510, column: 46, scope: !8587)
!8597 = !DILocation(line: 2510, column: 54, scope: !8587)
!8598 = !DILocation(line: 2510, column: 17, scope: !8587)
!8599 = !DILocation(line: 2510, column: 15, scope: !8587)
!8600 = !DILocation(line: 2511, column: 9, scope: !8601)
!8601 = distinct !DILexicalBlock(scope: !1773, file: !458, line: 2511, column: 9)
!8602 = !DILocation(line: 2511, column: 13, scope: !8601)
!8603 = !DILocation(line: 2511, column: 9, scope: !1773)
!8604 = !DILocation(line: 2512, column: 9, scope: !8601)
!8605 = !DILocation(line: 2513, column: 42, scope: !1773)
!8606 = !DILocation(line: 2513, column: 50, scope: !1773)
!8607 = !DILocation(line: 2513, column: 48, scope: !1773)
!8608 = !DILocation(line: 2513, column: 56, scope: !1773)
!8609 = !DILocation(line: 2513, column: 64, scope: !1773)
!8610 = !DILocation(line: 2513, column: 62, scope: !1773)
!8611 = !DILocation(line: 2513, column: 12, scope: !1773)
!8612 = !DILocation(line: 2513, column: 5, scope: !1773)
!8613 = !DILocation(line: 2514, column: 1, scope: !1773)
!8614 = !DILocation(line: 100, column: 30, scope: !1785)
!8615 = !DILocation(line: 102, column: 5, scope: !1785)
!8616 = !DILocation(line: 102, column: 15, scope: !1785)
!8617 = !DILocation(line: 103, column: 88, scope: !1785)
!8618 = !DILocation(line: 103, column: 73, scope: !1785)
!8619 = !DILocation(line: 103, column: 96, scope: !1785)
!8620 = !DILocation(line: 103, column: 14, scope: !1785)
!8621 = !DILocation(line: 103, column: 12, scope: !1785)
!8622 = !DILocation(line: 104, column: 10, scope: !8623)
!8623 = distinct !DILexicalBlock(scope: !1785, file: !834, line: 104, column: 9)
!8624 = !DILocation(line: 104, column: 9, scope: !1785)
!8625 = !DILocation(line: 105, column: 13, scope: !8623)
!8626 = !DILocation(line: 106, column: 56, scope: !1785)
!8627 = !DILocation(line: 106, column: 41, scope: !1785)
!8628 = !DILocation(line: 106, column: 66, scope: !1785)
!8629 = !DILocation(line: 106, column: 39, scope: !1785)
!8630 = !DILocation(line: 106, column: 100, scope: !8631)
!8631 = !DILexicalBlockFile(scope: !1785, file: !834, discriminator: 1)
!8632 = !DILocation(line: 106, column: 78, scope: !1785)
!8633 = !DILocation(line: 106, column: 110, scope: !1785)
!8634 = !DILocation(line: 106, column: 39, scope: !8635)
!8635 = !DILexicalBlockFile(scope: !1785, file: !834, discriminator: 2)
!8636 = !DILocation(line: 106, column: 181, scope: !8637)
!8637 = !DILexicalBlockFile(scope: !8638, file: !834, discriminator: 4)
!8638 = !DILexicalBlockFile(scope: !1785, file: !834, discriminator: 3)
!8639 = !DILocation(line: 106, column: 166, scope: !1785)
!8640 = !DILocation(line: 106, column: 189, scope: !1785)
!8641 = !DILocation(line: 106, column: 164, scope: !1785)
!8642 = !DILocation(line: 106, column: 223, scope: !8643)
!8643 = !DILexicalBlockFile(scope: !1785, file: !834, discriminator: 5)
!8644 = !DILocation(line: 106, column: 201, scope: !1785)
!8645 = !DILocation(line: 106, column: 231, scope: !1785)
!8646 = !DILocation(line: 106, column: 164, scope: !8647)
!8647 = !DILexicalBlockFile(scope: !1785, file: !834, discriminator: 6)
!8648 = !DILocation(line: 107, column: 53, scope: !1785)
!8649 = !DILocation(line: 107, column: 38, scope: !1785)
!8650 = !DILocation(line: 107, column: 61, scope: !1785)
!8651 = !DILocation(line: 106, column: 5, scope: !1785)
!8652 = !DILocation(line: 108, column: 12, scope: !1785)
!8653 = !DILocation(line: 108, column: 5, scope: !1785)
!8654 = !DILocation(line: 109, column: 1, scope: !1785)
!8655 = !DILocation(line: 76, column: 27, scope: !1789)
!8656 = !DILocation(line: 78, column: 5, scope: !1789)
!8657 = !DILocation(line: 78, column: 15, scope: !1789)
!8658 = !DILocation(line: 79, column: 88, scope: !1789)
!8659 = !DILocation(line: 79, column: 73, scope: !1789)
!8660 = !DILocation(line: 79, column: 96, scope: !1789)
!8661 = !DILocation(line: 79, column: 14, scope: !1789)
!8662 = !DILocation(line: 79, column: 12, scope: !1789)
!8663 = !DILocation(line: 80, column: 10, scope: !8664)
!8664 = distinct !DILexicalBlock(scope: !1789, file: !834, line: 80, column: 9)
!8665 = !DILocation(line: 80, column: 9, scope: !1789)
!8666 = !DILocation(line: 81, column: 13, scope: !8664)
!8667 = !DILocation(line: 82, column: 53, scope: !1789)
!8668 = !DILocation(line: 82, column: 38, scope: !1789)
!8669 = !DILocation(line: 82, column: 63, scope: !1789)
!8670 = !DILocation(line: 82, column: 36, scope: !1789)
!8671 = !DILocation(line: 82, column: 97, scope: !8672)
!8672 = !DILexicalBlockFile(scope: !1789, file: !834, discriminator: 1)
!8673 = !DILocation(line: 82, column: 75, scope: !1789)
!8674 = !DILocation(line: 82, column: 107, scope: !1789)
!8675 = !DILocation(line: 82, column: 36, scope: !8676)
!8676 = !DILexicalBlockFile(scope: !1789, file: !834, discriminator: 2)
!8677 = !DILocation(line: 82, column: 178, scope: !8678)
!8678 = !DILexicalBlockFile(scope: !8679, file: !834, discriminator: 4)
!8679 = !DILexicalBlockFile(scope: !1789, file: !834, discriminator: 3)
!8680 = !DILocation(line: 82, column: 163, scope: !1789)
!8681 = !DILocation(line: 82, column: 186, scope: !1789)
!8682 = !DILocation(line: 82, column: 161, scope: !1789)
!8683 = !DILocation(line: 82, column: 220, scope: !8684)
!8684 = !DILexicalBlockFile(scope: !1789, file: !834, discriminator: 5)
!8685 = !DILocation(line: 82, column: 198, scope: !1789)
!8686 = !DILocation(line: 82, column: 228, scope: !1789)
!8687 = !DILocation(line: 82, column: 161, scope: !8688)
!8688 = !DILexicalBlockFile(scope: !1789, file: !834, discriminator: 6)
!8689 = !DILocation(line: 83, column: 50, scope: !1789)
!8690 = !DILocation(line: 83, column: 35, scope: !1789)
!8691 = !DILocation(line: 83, column: 58, scope: !1789)
!8692 = !DILocation(line: 82, column: 5, scope: !1789)
!8693 = !DILocation(line: 84, column: 12, scope: !1789)
!8694 = !DILocation(line: 84, column: 5, scope: !1789)
!8695 = !DILocation(line: 85, column: 1, scope: !1789)
!8696 = !DILocation(line: 1469, column: 40, scope: !1793)
!8697 = !DILocation(line: 1469, column: 56, scope: !1793)
!8698 = !DILocation(line: 1471, column: 5, scope: !1793)
!8699 = !DILocation(line: 1471, column: 11, scope: !1793)
!8700 = !DILocation(line: 1471, column: 19, scope: !1793)
!8701 = !DILocation(line: 1472, column: 5, scope: !1793)
!8702 = !DILocation(line: 1472, column: 17, scope: !1793)
!8703 = !DILocation(line: 1473, column: 5, scope: !1793)
!8704 = !DILocation(line: 1473, column: 16, scope: !1793)
!8705 = !DILocation(line: 1473, column: 19, scope: !1793)
!8706 = !DILocation(line: 1474, column: 5, scope: !1793)
!8707 = !DILocation(line: 1474, column: 15, scope: !1793)
!8708 = !DILocation(line: 1474, column: 38, scope: !1793)
!8709 = !DILocation(line: 1474, column: 27, scope: !1793)
!8710 = !DILocation(line: 1475, column: 5, scope: !1793)
!8711 = !DILocation(line: 1475, column: 17, scope: !1793)
!8712 = !DILocation(line: 1476, column: 5, scope: !1793)
!8713 = !DILocation(line: 1476, column: 16, scope: !1793)
!8714 = !DILocation(line: 1477, column: 5, scope: !1793)
!8715 = !DILocation(line: 1477, column: 15, scope: !1793)
!8716 = !DILocation(line: 1478, column: 5, scope: !1793)
!8717 = !DILocation(line: 1478, column: 9, scope: !1793)
!8718 = !DILocation(line: 1479, column: 5, scope: !1793)
!8719 = !DILocation(line: 1479, column: 15, scope: !1793)
!8720 = !DILocation(line: 1479, column: 39, scope: !1793)
!8721 = !DILocation(line: 1480, column: 5, scope: !1793)
!8722 = !DILocation(line: 1480, column: 15, scope: !1793)
!8723 = !DILocation(line: 1480, column: 23, scope: !1793)
!8724 = !DILocation(line: 1482, column: 28, scope: !8725)
!8725 = distinct !DILexicalBlock(scope: !1793, file: !458, line: 1482, column: 9)
!8726 = !DILocation(line: 1482, column: 10, scope: !8725)
!8727 = !DILocation(line: 1482, column: 9, scope: !1793)
!8728 = !DILocation(line: 1484, column: 11, scope: !8725)
!8729 = !DILocation(line: 1486, column: 9, scope: !8730)
!8730 = distinct !DILexicalBlock(scope: !1793, file: !458, line: 1486, column: 9)
!8731 = !DILocation(line: 1486, column: 18, scope: !8730)
!8732 = !DILocation(line: 1486, column: 9, scope: !1793)
!8733 = !DILocation(line: 1487, column: 15, scope: !8734)
!8734 = distinct !DILexicalBlock(scope: !8730, file: !458, line: 1486, column: 40)
!8735 = !DILocation(line: 1488, column: 18, scope: !8734)
!8736 = !DILocation(line: 1489, column: 5, scope: !8734)
!8737 = !DILocation(line: 1489, column: 27, scope: !8738)
!8738 = distinct !DILexicalBlock(scope: !8730, file: !458, line: 1489, column: 16)
!8739 = !DILocation(line: 1489, column: 16, scope: !8738)
!8740 = !DILocation(line: 1489, column: 46, scope: !8738)
!8741 = !DILocation(line: 1489, column: 16, scope: !8730)
!8742 = !DILocation(line: 1490, column: 9, scope: !8743)
!8743 = distinct !DILexicalBlock(scope: !8738, file: !458, line: 1489, column: 51)
!8744 = !DILocation(line: 1492, column: 20, scope: !8745)
!8745 = distinct !DILexicalBlock(scope: !8746, file: !458, line: 1492, column: 13)
!8746 = distinct !DILexicalBlock(scope: !8738, file: !458, line: 1491, column: 12)
!8747 = !DILocation(line: 1492, column: 24, scope: !8745)
!8748 = !DILocation(line: 1492, column: 13, scope: !8746)
!8749 = !DILocation(line: 1493, column: 29, scope: !8750)
!8750 = distinct !DILexicalBlock(scope: !8745, file: !458, line: 1492, column: 32)
!8751 = !DILocation(line: 1493, column: 13, scope: !8750)
!8752 = !DILocation(line: 1495, column: 13, scope: !8750)
!8753 = !DILocation(line: 1496, column: 13, scope: !8750)
!8754 = !DILocation(line: 1498, column: 37, scope: !8746)
!8755 = !DILocation(line: 1498, column: 15, scope: !8746)
!8756 = !DILocation(line: 1501, column: 9, scope: !8757)
!8757 = distinct !DILexicalBlock(scope: !1793, file: !458, line: 1501, column: 9)
!8758 = !DILocation(line: 1501, column: 16, scope: !8757)
!8759 = !DILocation(line: 1501, column: 9, scope: !1793)
!8760 = !DILocation(line: 1502, column: 24, scope: !8761)
!8761 = distinct !DILexicalBlock(scope: !8762, file: !458, line: 1502, column: 13)
!8762 = distinct !DILexicalBlock(scope: !8757, file: !458, line: 1501, column: 31)
!8763 = !DILocation(line: 1502, column: 13, scope: !8761)
!8764 = !DILocation(line: 1502, column: 39, scope: !8761)
!8765 = !DILocation(line: 1502, column: 13, scope: !8762)
!8766 = !DILocation(line: 1503, column: 17, scope: !8767)
!8767 = distinct !DILexicalBlock(scope: !8768, file: !458, line: 1503, column: 17)
!8768 = distinct !DILexicalBlock(scope: !8761, file: !458, line: 1502, column: 44)
!8769 = !DILocation(line: 1503, column: 26, scope: !8767)
!8770 = !DILocation(line: 1503, column: 17, scope: !8768)
!8771 = !DILocation(line: 1504, column: 17, scope: !8767)
!8772 = !DILocation(line: 1505, column: 13, scope: !8768)
!8773 = !DILocation(line: 1507, column: 5, scope: !8762)
!8774 = !DILocation(line: 1509, column: 14, scope: !8775)
!8775 = distinct !DILexicalBlock(scope: !8757, file: !458, line: 1508, column: 10)
!8776 = !DILocation(line: 1509, column: 18, scope: !8775)
!8777 = !DILocation(line: 1510, column: 14, scope: !8775)
!8778 = !DILocation(line: 1510, column: 18, scope: !8775)
!8779 = !DILocation(line: 1513, column: 45, scope: !1793)
!8780 = !DILocation(line: 1513, column: 30, scope: !1793)
!8781 = !DILocation(line: 1513, column: 58, scope: !1793)
!8782 = !DILocation(line: 1513, column: 11, scope: !1793)
!8783 = !DILocation(line: 1514, column: 64, scope: !1793)
!8784 = !DILocation(line: 1514, column: 14, scope: !1793)
!8785 = !DILocation(line: 1514, column: 12, scope: !1793)
!8786 = !DILocation(line: 1515, column: 9, scope: !8787)
!8787 = distinct !DILexicalBlock(scope: !1793, file: !458, line: 1515, column: 9)
!8788 = !DILocation(line: 1515, column: 16, scope: !8787)
!8789 = !DILocation(line: 1515, column: 9, scope: !1793)
!8790 = !DILocation(line: 1516, column: 9, scope: !8787)
!8791 = !DILocation(line: 1517, column: 50, scope: !1793)
!8792 = !DILocation(line: 1517, column: 29, scope: !1793)
!8793 = !DILocation(line: 1517, column: 27, scope: !1793)
!8794 = !DILocation(line: 1517, column: 18, scope: !1793)
!8795 = !DILocation(line: 1518, column: 45, scope: !1793)
!8796 = !DILocation(line: 1518, column: 30, scope: !1793)
!8797 = !DILocation(line: 1518, column: 58, scope: !1793)
!8798 = !DILocation(line: 1518, column: 28, scope: !1793)
!8799 = !DILocation(line: 1518, column: 92, scope: !8800)
!8800 = !DILexicalBlockFile(scope: !1793, file: !458, discriminator: 1)
!8801 = !DILocation(line: 1518, column: 70, scope: !1793)
!8802 = !DILocation(line: 1518, column: 105, scope: !1793)
!8803 = !DILocation(line: 1518, column: 28, scope: !8804)
!8804 = !DILexicalBlockFile(scope: !1793, file: !458, discriminator: 2)
!8805 = !DILocation(line: 1518, column: 11, scope: !8806)
!8806 = !DILexicalBlockFile(scope: !8807, file: !458, discriminator: 4)
!8807 = !DILexicalBlockFile(scope: !1793, file: !458, discriminator: 3)
!8808 = !DILocation(line: 1520, column: 14, scope: !8809)
!8809 = distinct !DILexicalBlock(scope: !1793, file: !458, line: 1520, column: 9)
!8810 = !DILocation(line: 1520, column: 18, scope: !8809)
!8811 = !DILocation(line: 1520, column: 23, scope: !8809)
!8812 = !DILocation(line: 1520, column: 26, scope: !8813)
!8813 = !DILexicalBlockFile(scope: !8809, file: !458, discriminator: 1)
!8814 = !DILocation(line: 1520, column: 32, scope: !8809)
!8815 = !DILocation(line: 1520, column: 9, scope: !1793)
!8816 = !DILocation(line: 1522, column: 18, scope: !8817)
!8817 = distinct !DILexicalBlock(scope: !8818, file: !458, line: 1522, column: 9)
!8818 = distinct !DILexicalBlock(scope: !8809, file: !458, line: 1520, column: 47)
!8819 = !DILocation(line: 1522, column: 16, scope: !8817)
!8820 = !DILocation(line: 1522, column: 14, scope: !8817)
!8821 = !DILocation(line: 1522, column: 25, scope: !8822)
!8822 = !DILexicalBlockFile(scope: !8823, file: !458, discriminator: 2)
!8823 = !DILexicalBlockFile(scope: !8824, file: !458, discriminator: 1)
!8824 = distinct !DILexicalBlock(scope: !8817, file: !458, line: 1522, column: 9)
!8825 = !DILocation(line: 1522, column: 29, scope: !8824)
!8826 = !DILocation(line: 1522, column: 9, scope: !8817)
!8827 = !DILocation(line: 1523, column: 41, scope: !8828)
!8828 = distinct !DILexicalBlock(scope: !8824, file: !458, line: 1522, column: 37)
!8829 = !DILocation(line: 1523, column: 35, scope: !8828)
!8830 = !DILocation(line: 1523, column: 34, scope: !8828)
!8831 = !DILocation(line: 1523, column: 45, scope: !8828)
!8832 = !DILocation(line: 1523, column: 18, scope: !8828)
!8833 = !DILocation(line: 1523, column: 17, scope: !8828)
!8834 = !DILocation(line: 1523, column: 15, scope: !8828)
!8835 = !DILocation(line: 1524, column: 31, scope: !8828)
!8836 = !DILocation(line: 1524, column: 25, scope: !8828)
!8837 = !DILocation(line: 1524, column: 20, scope: !8828)
!8838 = !DILocation(line: 1524, column: 23, scope: !8828)
!8839 = !DILocation(line: 1522, column: 9, scope: !8824)
!8840 = !DILocation(line: 1526, column: 9, scope: !8818)
!8841 = !DILocation(line: 1529, column: 9, scope: !8842)
!8842 = distinct !DILexicalBlock(scope: !1793, file: !458, line: 1529, column: 9)
!8843 = !DILocation(line: 1529, column: 15, scope: !8842)
!8844 = !DILocation(line: 1529, column: 9, scope: !1793)
!8845 = !DILocation(line: 1530, column: 16, scope: !8846)
!8846 = distinct !DILexicalBlock(scope: !8847, file: !458, line: 1530, column: 9)
!8847 = distinct !DILexicalBlock(scope: !8842, file: !458, line: 1529, column: 30)
!8848 = !DILocation(line: 1530, column: 14, scope: !8846)
!8849 = !DILocation(line: 1530, column: 21, scope: !8850)
!8850 = !DILexicalBlockFile(scope: !8851, file: !458, discriminator: 2)
!8851 = !DILexicalBlockFile(scope: !8852, file: !458, discriminator: 1)
!8852 = distinct !DILexicalBlock(scope: !8846, file: !458, line: 1530, column: 9)
!8853 = !DILocation(line: 1530, column: 23, scope: !8852)
!8854 = !DILocation(line: 1530, column: 9, scope: !8846)
!8855 = !DILocation(line: 1531, column: 48, scope: !8852)
!8856 = !DILocation(line: 1531, column: 51, scope: !8852)
!8857 = !DILocation(line: 1531, column: 31, scope: !8852)
!8858 = !DILocation(line: 1531, column: 30, scope: !8852)
!8859 = !DILocation(line: 1531, column: 25, scope: !8852)
!8860 = !DILocation(line: 1531, column: 13, scope: !8852)
!8861 = !DILocation(line: 1531, column: 28, scope: !8852)
!8862 = !DILocation(line: 1530, column: 31, scope: !8852)
!8863 = !DILocation(line: 1530, column: 9, scope: !8852)
!8864 = !DILocation(line: 1532, column: 5, scope: !8847)
!8865 = !DILocation(line: 1533, column: 16, scope: !8866)
!8866 = distinct !DILexicalBlock(scope: !8867, file: !458, line: 1533, column: 9)
!8867 = distinct !DILexicalBlock(scope: !8842, file: !458, line: 1532, column: 12)
!8868 = !DILocation(line: 1533, column: 14, scope: !8866)
!8869 = !DILocation(line: 1533, column: 21, scope: !8870)
!8870 = !DILexicalBlockFile(scope: !8871, file: !458, discriminator: 2)
!8871 = !DILexicalBlockFile(scope: !8872, file: !458, discriminator: 1)
!8872 = distinct !DILexicalBlock(scope: !8866, file: !458, line: 1533, column: 9)
!8873 = !DILocation(line: 1533, column: 23, scope: !8872)
!8874 = !DILocation(line: 1533, column: 9, scope: !8866)
!8875 = !DILocation(line: 1534, column: 54, scope: !8872)
!8876 = !DILocation(line: 1534, column: 48, scope: !8872)
!8877 = !DILocation(line: 1534, column: 47, scope: !8872)
!8878 = !DILocation(line: 1534, column: 58, scope: !8872)
!8879 = !DILocation(line: 1534, column: 31, scope: !8872)
!8880 = !DILocation(line: 1534, column: 30, scope: !8872)
!8881 = !DILocation(line: 1534, column: 25, scope: !8872)
!8882 = !DILocation(line: 1534, column: 13, scope: !8872)
!8883 = !DILocation(line: 1534, column: 28, scope: !8872)
!8884 = !DILocation(line: 1533, column: 31, scope: !8872)
!8885 = !DILocation(line: 1533, column: 9, scope: !8872)
!8886 = !DILocation(line: 1537, column: 12, scope: !8887)
!8887 = distinct !DILexicalBlock(scope: !1793, file: !458, line: 1537, column: 5)
!8888 = !DILocation(line: 1537, column: 10, scope: !8887)
!8889 = !DILocation(line: 1537, column: 17, scope: !8890)
!8890 = !DILexicalBlockFile(scope: !8891, file: !458, discriminator: 2)
!8891 = !DILexicalBlockFile(scope: !8892, file: !458, discriminator: 1)
!8892 = distinct !DILexicalBlock(scope: !8887, file: !458, line: 1537, column: 5)
!8893 = !DILocation(line: 1537, column: 26, scope: !8892)
!8894 = !DILocation(line: 1537, column: 19, scope: !8892)
!8895 = !DILocation(line: 1537, column: 5, scope: !8887)
!8896 = !DILocation(line: 1538, column: 72, scope: !8892)
!8897 = !DILocation(line: 1538, column: 67, scope: !8892)
!8898 = !DILocation(line: 1538, column: 45, scope: !8892)
!8899 = !DILocation(line: 1538, column: 44, scope: !8892)
!8900 = !DILocation(line: 1538, column: 76, scope: !8892)
!8901 = !DILocation(line: 1538, column: 28, scope: !8892)
!8902 = !DILocation(line: 1538, column: 21, scope: !8892)
!8903 = !DILocation(line: 1538, column: 9, scope: !8892)
!8904 = !DILocation(line: 1538, column: 86, scope: !8892)
!8905 = !DILocation(line: 1537, column: 32, scope: !8892)
!8906 = !DILocation(line: 1537, column: 5, scope: !8892)
!8907 = !DILocation(line: 1540, column: 14, scope: !8908)
!8908 = distinct !DILexicalBlock(scope: !1793, file: !458, line: 1540, column: 5)
!8909 = !DILocation(line: 1540, column: 12, scope: !8908)
!8910 = !DILocation(line: 1540, column: 10, scope: !8908)
!8911 = !DILocation(line: 1540, column: 21, scope: !8912)
!8912 = !DILexicalBlockFile(scope: !8913, file: !458, discriminator: 2)
!8913 = !DILexicalBlockFile(scope: !8914, file: !458, discriminator: 1)
!8914 = distinct !DILexicalBlock(scope: !8908, file: !458, line: 1540, column: 5)
!8915 = !DILocation(line: 1540, column: 25, scope: !8914)
!8916 = !DILocation(line: 1540, column: 5, scope: !8908)
!8917 = !DILocation(line: 1541, column: 37, scope: !8918)
!8918 = distinct !DILexicalBlock(scope: !8914, file: !458, line: 1540, column: 33)
!8919 = !DILocation(line: 1541, column: 31, scope: !8918)
!8920 = !DILocation(line: 1541, column: 30, scope: !8918)
!8921 = !DILocation(line: 1541, column: 41, scope: !8918)
!8922 = !DILocation(line: 1541, column: 14, scope: !8918)
!8923 = !DILocation(line: 1541, column: 13, scope: !8918)
!8924 = !DILocation(line: 1541, column: 11, scope: !8918)
!8925 = !DILocation(line: 1542, column: 25, scope: !8926)
!8926 = distinct !DILexicalBlock(scope: !8918, file: !458, line: 1542, column: 13)
!8927 = !DILocation(line: 1542, column: 13, scope: !8926)
!8928 = !DILocation(line: 1542, column: 28, scope: !8926)
!8929 = !DILocation(line: 1542, column: 13, scope: !8918)
!8930 = !DILocation(line: 1543, column: 65, scope: !8931)
!8931 = distinct !DILexicalBlock(scope: !8926, file: !458, line: 1543, column: 17)
!8932 = !DILocation(line: 1543, column: 53, scope: !8931)
!8933 = !DILocation(line: 1543, column: 47, scope: !8931)
!8934 = !DILocation(line: 1543, column: 42, scope: !8931)
!8935 = !DILocation(line: 1543, column: 45, scope: !8931)
!8936 = !DILocation(line: 1543, column: 34, scope: !8931)
!8937 = !DILocation(line: 1543, column: 69, scope: !8931)
!8938 = !DILocation(line: 1543, column: 18, scope: !8931)
!8939 = !DILocation(line: 1543, column: 17, scope: !8931)
!8940 = !DILocation(line: 1543, column: 81, scope: !8931)
!8941 = !DILocation(line: 1543, column: 78, scope: !8931)
!8942 = !DILocation(line: 1543, column: 17, scope: !8926)
!8943 = !DILocation(line: 1544, column: 21, scope: !8931)
!8944 = !DILocation(line: 1543, column: 81, scope: !8945)
!8945 = !DILexicalBlockFile(scope: !8931, file: !458, discriminator: 1)
!8946 = !DILocation(line: 1540, column: 5, scope: !8914)
!8947 = !DILocation(line: 1547, column: 9, scope: !1818)
!8948 = !DILocation(line: 1547, column: 15, scope: !1818)
!8949 = !DILocation(line: 1547, column: 9, scope: !1793)
!8950 = !DILocation(line: 1548, column: 32, scope: !1817)
!8951 = !DILocation(line: 1548, column: 40, scope: !1817)
!8952 = !DILocation(line: 1548, column: 49, scope: !1817)
!8953 = !DILocation(line: 1548, column: 47, scope: !1817)
!8954 = !DILocation(line: 1548, column: 13, scope: !1817)
!8955 = !DILocation(line: 1548, column: 63, scope: !1817)
!8956 = !DILocation(line: 1548, column: 13, scope: !1818)
!8957 = !DILocation(line: 1549, column: 13, scope: !1816)
!8958 = !DILocation(line: 1549, column: 18, scope: !8959)
!8959 = !DILexicalBlockFile(scope: !1815, file: !458, discriminator: 1)
!8960 = !DILocation(line: 1549, column: 28, scope: !1815)
!8961 = !DILocation(line: 1549, column: 51, scope: !1815)
!8962 = !DILocation(line: 1549, column: 64, scope: !1822)
!8963 = !DILocation(line: 1549, column: 72, scope: !1822)
!8964 = !DILocation(line: 1549, column: 64, scope: !1815)
!8965 = !DILocation(line: 1549, column: 98, scope: !8966)
!8966 = !DILexicalBlockFile(scope: !1821, file: !458, discriminator: 2)
!8967 = !DILocation(line: 1549, column: 112, scope: !1821)
!8968 = !DILocation(line: 1549, column: 117, scope: !8969)
!8969 = !DILexicalBlockFile(scope: !1820, file: !458, discriminator: 4)
!8970 = !DILocation(line: 1549, column: 127, scope: !1820)
!8971 = !DILocation(line: 1549, column: 157, scope: !1820)
!8972 = !DILocation(line: 1549, column: 175, scope: !8973)
!8973 = distinct !DILexicalBlock(scope: !1820, file: !458, line: 1549, column: 172)
!8974 = !DILocation(line: 1549, column: 192, scope: !8973)
!8975 = !DILocation(line: 1549, column: 172, scope: !8973)
!8976 = !DILocation(line: 1549, column: 202, scope: !8973)
!8977 = !DILocation(line: 1549, column: 172, scope: !1820)
!8978 = !DILocation(line: 1549, column: 172, scope: !8979)
!8979 = !DILexicalBlockFile(scope: !1820, file: !458, discriminator: 5)
!8980 = !DILocation(line: 1549, column: 233, scope: !8981)
!8981 = !DILexicalBlockFile(scope: !8973, file: !458, discriminator: 6)
!8982 = !DILocation(line: 1549, column: 251, scope: !8973)
!8983 = !DILocation(line: 1549, column: 261, scope: !8973)
!8984 = !DILocation(line: 1549, column: 286, scope: !8973)
!8985 = !DILocation(line: 1549, column: 217, scope: !8973)
!8986 = !DILocation(line: 1549, column: 305, scope: !8987)
!8987 = !DILexicalBlockFile(scope: !1821, file: !458, discriminator: 7)
!8988 = !DILocation(line: 1549, column: 305, scope: !1820)
!8989 = !DILocation(line: 1549, column: 305, scope: !8990)
!8990 = !DILexicalBlockFile(scope: !1820, file: !458, discriminator: 8)
!8991 = !DILocation(line: 1549, column: 318, scope: !8992)
!8992 = !DILexicalBlockFile(scope: !1821, file: !458, discriminator: 9)
!8993 = !DILocation(line: 1549, column: 320, scope: !8994)
!8994 = !DILexicalBlockFile(scope: !8995, file: !458, discriminator: 10)
!8995 = !DILexicalBlockFile(scope: !1816, file: !458, discriminator: 3)
!8996 = !DILocation(line: 1549, column: 320, scope: !1815)
!8997 = !DILocation(line: 1549, column: 320, scope: !8998)
!8998 = !DILexicalBlockFile(scope: !1815, file: !458, discriminator: 11)
!8999 = !DILocation(line: 1550, column: 13, scope: !1816)
!9000 = !DILocation(line: 1548, column: 65, scope: !9001)
!9001 = !DILexicalBlockFile(scope: !1817, file: !458, discriminator: 1)
!9002 = !DILocation(line: 1547, column: 17, scope: !9003)
!9003 = !DILexicalBlockFile(scope: !1818, file: !458, discriminator: 1)
!9004 = !DILocation(line: 1554, column: 9, scope: !9005)
!9005 = distinct !DILexicalBlock(scope: !1793, file: !458, line: 1554, column: 9)
!9006 = !DILocation(line: 1554, column: 18, scope: !9005)
!9007 = !DILocation(line: 1554, column: 9, scope: !1793)
!9008 = !DILocation(line: 1555, column: 9, scope: !9005)
!9009 = !DILocation(line: 1556, column: 9, scope: !9010)
!9010 = distinct !DILexicalBlock(scope: !1793, file: !458, line: 1556, column: 9)
!9011 = !DILocation(line: 1556, column: 16, scope: !9010)
!9012 = !DILocation(line: 1556, column: 9, scope: !1793)
!9013 = !DILocation(line: 1557, column: 9, scope: !9010)
!9014 = !DILocation(line: 1558, column: 12, scope: !1793)
!9015 = !DILocation(line: 1558, column: 5, scope: !1793)
!9016 = !DILocation(line: 1559, column: 1, scope: !1793)
!9017 = !DILocation(line: 64, column: 27, scope: !1823)
!9018 = !DILocation(line: 66, column: 5, scope: !1823)
!9019 = !DILocation(line: 66, column: 15, scope: !1823)
!9020 = !DILocation(line: 67, column: 88, scope: !1823)
!9021 = !DILocation(line: 67, column: 73, scope: !1823)
!9022 = !DILocation(line: 67, column: 96, scope: !1823)
!9023 = !DILocation(line: 67, column: 14, scope: !1823)
!9024 = !DILocation(line: 67, column: 12, scope: !1823)
!9025 = !DILocation(line: 68, column: 10, scope: !9026)
!9026 = distinct !DILexicalBlock(scope: !1823, file: !834, line: 68, column: 9)
!9027 = !DILocation(line: 68, column: 9, scope: !1823)
!9028 = !DILocation(line: 69, column: 13, scope: !9026)
!9029 = !DILocation(line: 70, column: 53, scope: !1823)
!9030 = !DILocation(line: 70, column: 38, scope: !1823)
!9031 = !DILocation(line: 70, column: 63, scope: !1823)
!9032 = !DILocation(line: 70, column: 36, scope: !1823)
!9033 = !DILocation(line: 70, column: 97, scope: !9034)
!9034 = !DILexicalBlockFile(scope: !1823, file: !834, discriminator: 1)
!9035 = !DILocation(line: 70, column: 75, scope: !1823)
!9036 = !DILocation(line: 70, column: 107, scope: !1823)
!9037 = !DILocation(line: 70, column: 36, scope: !9038)
!9038 = !DILexicalBlockFile(scope: !1823, file: !834, discriminator: 2)
!9039 = !DILocation(line: 70, column: 178, scope: !9040)
!9040 = !DILexicalBlockFile(scope: !9041, file: !834, discriminator: 4)
!9041 = !DILexicalBlockFile(scope: !1823, file: !834, discriminator: 3)
!9042 = !DILocation(line: 70, column: 163, scope: !1823)
!9043 = !DILocation(line: 70, column: 186, scope: !1823)
!9044 = !DILocation(line: 70, column: 161, scope: !1823)
!9045 = !DILocation(line: 70, column: 220, scope: !9046)
!9046 = !DILexicalBlockFile(scope: !1823, file: !834, discriminator: 5)
!9047 = !DILocation(line: 70, column: 198, scope: !1823)
!9048 = !DILocation(line: 70, column: 228, scope: !1823)
!9049 = !DILocation(line: 70, column: 161, scope: !9050)
!9050 = !DILexicalBlockFile(scope: !1823, file: !834, discriminator: 6)
!9051 = !DILocation(line: 71, column: 50, scope: !1823)
!9052 = !DILocation(line: 71, column: 35, scope: !1823)
!9053 = !DILocation(line: 71, column: 58, scope: !1823)
!9054 = !DILocation(line: 70, column: 5, scope: !1823)
!9055 = !DILocation(line: 72, column: 12, scope: !1823)
!9056 = !DILocation(line: 72, column: 5, scope: !1823)
!9057 = !DILocation(line: 73, column: 1, scope: !1823)
!9058 = !DILocation(line: 223, column: 27, scope: !1827)
!9059 = !DILocation(line: 223, column: 43, scope: !1827)
!9060 = !DILocation(line: 225, column: 5, scope: !1827)
!9061 = !DILocation(line: 225, column: 16, scope: !1827)
!9062 = !DILocation(line: 226, column: 5, scope: !1827)
!9063 = !DILocation(line: 226, column: 15, scope: !1827)
!9064 = !DILocation(line: 227, column: 5, scope: !1827)
!9065 = !DILocation(line: 227, column: 11, scope: !1827)
!9066 = !DILocation(line: 228, column: 5, scope: !1827)
!9067 = !DILocation(line: 228, column: 16, scope: !1827)
!9068 = !DILocation(line: 230, column: 34, scope: !9069)
!9069 = distinct !DILexicalBlock(scope: !1827, file: !839, line: 230, column: 9)
!9070 = !DILocation(line: 230, column: 10, scope: !9069)
!9071 = !DILocation(line: 230, column: 9, scope: !1827)
!9072 = !DILocation(line: 231, column: 9, scope: !9069)
!9073 = !DILocation(line: 233, column: 41, scope: !9074)
!9074 = distinct !DILexicalBlock(scope: !1827, file: !839, line: 233, column: 9)
!9075 = !DILocation(line: 233, column: 26, scope: !9074)
!9076 = !DILocation(line: 233, column: 49, scope: !9074)
!9077 = !DILocation(line: 233, column: 62, scope: !9074)
!9078 = !DILocation(line: 233, column: 59, scope: !9074)
!9079 = !DILocation(line: 233, column: 9, scope: !1827)
!9080 = !DILocation(line: 234, column: 28, scope: !9081)
!9081 = distinct !DILexicalBlock(scope: !9082, file: !839, line: 234, column: 13)
!9082 = distinct !DILexicalBlock(scope: !9074, file: !839, line: 233, column: 69)
!9083 = !DILocation(line: 234, column: 36, scope: !9081)
!9084 = !DILocation(line: 234, column: 45, scope: !9081)
!9085 = !DILocation(line: 234, column: 13, scope: !9082)
!9086 = !DILocation(line: 238, column: 82, scope: !9087)
!9087 = distinct !DILexicalBlock(scope: !9081, file: !839, line: 234, column: 68)
!9088 = !DILocation(line: 238, column: 67, scope: !9087)
!9089 = !DILocation(line: 238, column: 90, scope: !9087)
!9090 = !DILocation(line: 238, column: 65, scope: !9087)
!9091 = !DILocation(line: 238, column: 124, scope: !9092)
!9092 = !DILexicalBlockFile(scope: !9087, file: !839, discriminator: 1)
!9093 = !DILocation(line: 238, column: 102, scope: !9087)
!9094 = !DILocation(line: 238, column: 132, scope: !9087)
!9095 = !DILocation(line: 238, column: 65, scope: !9096)
!9096 = !DILexicalBlockFile(scope: !9087, file: !839, discriminator: 2)
!9097 = !DILocation(line: 238, column: 203, scope: !9098)
!9098 = !DILexicalBlockFile(scope: !9099, file: !839, discriminator: 4)
!9099 = !DILexicalBlockFile(scope: !9087, file: !839, discriminator: 3)
!9100 = !DILocation(line: 238, column: 188, scope: !9087)
!9101 = !DILocation(line: 238, column: 211, scope: !9087)
!9102 = !DILocation(line: 238, column: 20, scope: !9087)
!9103 = !DILocation(line: 238, column: 13, scope: !9087)
!9104 = !DILocation(line: 246, column: 49, scope: !9081)
!9105 = !DILocation(line: 246, column: 34, scope: !9081)
!9106 = !DILocation(line: 246, column: 57, scope: !9081)
!9107 = !DILocation(line: 246, column: 32, scope: !9081)
!9108 = !DILocation(line: 246, column: 91, scope: !9109)
!9109 = !DILexicalBlockFile(scope: !9081, file: !839, discriminator: 1)
!9110 = !DILocation(line: 246, column: 69, scope: !9081)
!9111 = !DILocation(line: 246, column: 99, scope: !9081)
!9112 = !DILocation(line: 246, column: 32, scope: !9113)
!9113 = !DILexicalBlockFile(scope: !9081, file: !839, discriminator: 2)
!9114 = !DILocation(line: 247, column: 49, scope: !9081)
!9115 = !DILocation(line: 247, column: 34, scope: !9081)
!9116 = !DILocation(line: 247, column: 57, scope: !9081)
!9117 = !DILocation(line: 245, column: 20, scope: !9081)
!9118 = !DILocation(line: 245, column: 13, scope: !9081)
!9119 = !DILocation(line: 251, column: 12, scope: !1827)
!9120 = !DILocation(line: 251, column: 52, scope: !1827)
!9121 = !DILocation(line: 251, column: 37, scope: !1827)
!9122 = !DILocation(line: 251, column: 60, scope: !1827)
!9123 = !DILocation(line: 251, column: 18, scope: !1827)
!9124 = !DILocation(line: 251, column: 10, scope: !1827)
!9125 = !DILocation(line: 253, column: 13, scope: !1827)
!9126 = !DILocation(line: 253, column: 19, scope: !1827)
!9127 = !DILocation(line: 253, column: 9, scope: !1827)
!9128 = !DILocation(line: 253, column: 7, scope: !1827)
!9129 = !DILocation(line: 255, column: 9, scope: !9130)
!9130 = distinct !DILexicalBlock(scope: !1827, file: !839, line: 255, column: 9)
!9131 = !DILocation(line: 255, column: 11, scope: !9130)
!9132 = !DILocation(line: 255, column: 9, scope: !1827)
!9133 = !DILocation(line: 256, column: 9, scope: !9130)
!9134 = !DILocation(line: 258, column: 41, scope: !1827)
!9135 = !DILocation(line: 258, column: 26, scope: !1827)
!9136 = !DILocation(line: 258, column: 46, scope: !1827)
!9137 = !DILocation(line: 258, column: 24, scope: !1827)
!9138 = !DILocation(line: 258, column: 80, scope: !9139)
!9139 = !DILexicalBlockFile(scope: !1827, file: !839, discriminator: 1)
!9140 = !DILocation(line: 258, column: 58, scope: !1827)
!9141 = !DILocation(line: 258, column: 85, scope: !1827)
!9142 = !DILocation(line: 258, column: 24, scope: !9143)
!9143 = !DILexicalBlockFile(scope: !1827, file: !839, discriminator: 2)
!9144 = !DILocation(line: 258, column: 7, scope: !9145)
!9145 = !DILexicalBlockFile(scope: !9146, file: !839, discriminator: 4)
!9146 = !DILexicalBlockFile(scope: !1827, file: !839, discriminator: 3)
!9147 = !DILocation(line: 259, column: 11, scope: !9148)
!9148 = distinct !DILexicalBlock(scope: !1827, file: !839, line: 259, column: 9)
!9149 = !DILocation(line: 259, column: 9, scope: !9148)
!9150 = !DILocation(line: 259, column: 17, scope: !9148)
!9151 = !DILocation(line: 259, column: 24, scope: !9148)
!9152 = !DILocation(line: 259, column: 29, scope: !9153)
!9153 = !DILexicalBlockFile(scope: !9148, file: !839, discriminator: 1)
!9154 = !DILocation(line: 259, column: 27, scope: !9148)
!9155 = !DILocation(line: 259, column: 35, scope: !9148)
!9156 = !DILocation(line: 259, column: 9, scope: !1827)
!9157 = !DILocation(line: 261, column: 18, scope: !9158)
!9158 = distinct !DILexicalBlock(scope: !9148, file: !839, line: 259, column: 43)
!9159 = !DILocation(line: 261, column: 16, scope: !9158)
!9160 = !DILocation(line: 261, column: 9, scope: !9158)
!9161 = !DILocation(line: 261, column: 14, scope: !9158)
!9162 = !DILocation(line: 262, column: 11, scope: !9158)
!9163 = !DILocation(line: 262, column: 9, scope: !9158)
!9164 = !DILocation(line: 262, column: 17, scope: !9158)
!9165 = !DILocation(line: 263, column: 5, scope: !9158)
!9166 = !DILocation(line: 265, column: 24, scope: !1827)
!9167 = !DILocation(line: 265, column: 5, scope: !1827)
!9168 = !DILocation(line: 266, column: 1, scope: !1827)
!9169 = !DILocation(line: 2727, column: 35, scope: !807)
!9170 = !DILocation(line: 2727, column: 45, scope: !807)
!9171 = !DILocation(line: 2729, column: 5, scope: !807)
!9172 = !DILocation(line: 2729, column: 15, scope: !807)
!9173 = !DILocation(line: 2731, column: 5, scope: !807)
!9174 = !DILocation(line: 2731, column: 11, scope: !807)
!9175 = !DILocation(line: 2733, column: 44, scope: !807)
!9176 = !DILocation(line: 2733, column: 32, scope: !807)
!9177 = !DILocation(line: 2733, column: 12, scope: !807)
!9178 = !DILocation(line: 2733, column: 10, scope: !807)
!9179 = !DILocation(line: 2734, column: 9, scope: !9180)
!9180 = distinct !DILexicalBlock(scope: !807, file: !458, line: 2734, column: 9)
!9181 = !DILocation(line: 2734, column: 14, scope: !9180)
!9182 = !DILocation(line: 2734, column: 9, scope: !807)
!9183 = !DILocation(line: 2735, column: 9, scope: !9184)
!9184 = distinct !DILexicalBlock(scope: !9180, file: !458, line: 2734, column: 29)
!9185 = !DILocation(line: 2736, column: 14, scope: !9184)
!9186 = !DILocation(line: 2737, column: 25, scope: !9184)
!9187 = !DILocation(line: 2737, column: 33, scope: !9184)
!9188 = !DILocation(line: 2737, column: 42, scope: !9184)
!9189 = !DILocation(line: 2738, column: 5, scope: !9184)
!9190 = !DILocation(line: 2740, column: 43, scope: !807)
!9191 = !DILocation(line: 2740, column: 28, scope: !807)
!9192 = !DILocation(line: 2740, column: 51, scope: !807)
!9193 = !DILocation(line: 2740, column: 26, scope: !807)
!9194 = !DILocation(line: 2740, column: 85, scope: !9195)
!9195 = !DILexicalBlockFile(scope: !807, file: !458, discriminator: 1)
!9196 = !DILocation(line: 2740, column: 93, scope: !807)
!9197 = !DILocation(line: 2740, column: 26, scope: !9198)
!9198 = !DILexicalBlockFile(scope: !807, file: !458, discriminator: 2)
!9199 = !DILocation(line: 2740, column: 9, scope: !9200)
!9200 = !DILexicalBlockFile(scope: !9201, file: !458, discriminator: 4)
!9201 = !DILexicalBlockFile(scope: !807, file: !458, discriminator: 3)
!9202 = !DILocation(line: 2741, column: 9, scope: !817)
!9203 = !DILocation(line: 2741, column: 15, scope: !817)
!9204 = !DILocation(line: 2741, column: 9, scope: !807)
!9205 = !DILocation(line: 2743, column: 9, scope: !816)
!9206 = !DILocation(line: 2743, column: 19, scope: !816)
!9207 = !DILocation(line: 2744, column: 30, scope: !9208)
!9208 = distinct !DILexicalBlock(scope: !816, file: !458, line: 2744, column: 13)
!9209 = !DILocation(line: 2744, column: 15, scope: !9208)
!9210 = !DILocation(line: 2744, column: 38, scope: !9208)
!9211 = !DILocation(line: 2744, column: 13, scope: !9208)
!9212 = !DILocation(line: 2744, column: 13, scope: !816)
!9213 = !DILocation(line: 2745, column: 45, scope: !9208)
!9214 = !DILocation(line: 2745, column: 67, scope: !9208)
!9215 = !DILocation(line: 2745, column: 52, scope: !9208)
!9216 = !DILocation(line: 2745, column: 75, scope: !9208)
!9217 = !DILocation(line: 2745, column: 22, scope: !9208)
!9218 = !DILocation(line: 2745, column: 20, scope: !9208)
!9219 = !DILocation(line: 2745, column: 13, scope: !9208)
!9220 = !DILocation(line: 2747, column: 22, scope: !9208)
!9221 = !DILocation(line: 2747, column: 20, scope: !9208)
!9222 = !DILocation(line: 2748, column: 63, scope: !816)
!9223 = !DILocation(line: 2748, column: 51, scope: !816)
!9224 = !DILocation(line: 2748, column: 71, scope: !816)
!9225 = !DILocation(line: 2748, column: 81, scope: !816)
!9226 = !DILocation(line: 2748, column: 100, scope: !816)
!9227 = !DILocation(line: 2748, column: 16, scope: !816)
!9228 = !DILocation(line: 2748, column: 9, scope: !816)
!9229 = !DILocation(line: 2749, column: 5, scope: !817)
!9230 = !DILocation(line: 2752, column: 30, scope: !9231)
!9231 = distinct !DILexicalBlock(scope: !9232, file: !458, line: 2752, column: 13)
!9232 = distinct !DILexicalBlock(scope: !817, file: !458, line: 2750, column: 10)
!9233 = !DILocation(line: 2752, column: 15, scope: !9231)
!9234 = !DILocation(line: 2752, column: 38, scope: !9231)
!9235 = !DILocation(line: 2752, column: 13, scope: !9231)
!9236 = !DILocation(line: 2752, column: 13, scope: !9232)
!9237 = !DILocation(line: 2753, column: 67, scope: !9238)
!9238 = distinct !DILexicalBlock(scope: !9231, file: !458, line: 2752, column: 48)
!9239 = !DILocation(line: 2753, column: 55, scope: !9238)
!9240 = !DILocation(line: 2753, column: 75, scope: !9238)
!9241 = !DILocation(line: 2753, column: 85, scope: !9238)
!9242 = !DILocation(line: 2753, column: 107, scope: !9238)
!9243 = !DILocation(line: 2753, column: 92, scope: !9238)
!9244 = !DILocation(line: 2753, column: 115, scope: !9238)
!9245 = !DILocation(line: 2753, column: 125, scope: !9238)
!9246 = !DILocation(line: 2753, column: 20, scope: !9238)
!9247 = !DILocation(line: 2753, column: 13, scope: !9238)
!9248 = !DILocation(line: 2756, column: 65, scope: !9249)
!9249 = distinct !DILexicalBlock(scope: !9231, file: !458, line: 2755, column: 14)
!9250 = !DILocation(line: 2756, column: 53, scope: !9249)
!9251 = !DILocation(line: 2756, column: 73, scope: !9249)
!9252 = !DILocation(line: 2756, column: 83, scope: !9249)
!9253 = !DILocation(line: 2756, column: 20, scope: !9249)
!9254 = !DILocation(line: 2756, column: 13, scope: !9249)
!9255 = !DILocation(line: 2759, column: 1, scope: !807)
!9256 = !DILocation(line: 87, column: 15, scope: !847)
!9257 = !DILocation(line: 87, column: 32, scope: !847)
!9258 = !DILocation(line: 87, column: 49, scope: !847)
!9259 = !DILocation(line: 87, column: 61, scope: !847)
!9260 = !DILocation(line: 89, column: 5, scope: !847)
!9261 = !DILocation(line: 89, column: 15, scope: !847)
!9262 = !DILocation(line: 91, column: 9, scope: !9263)
!9263 = distinct !DILexicalBlock(scope: !847, file: !839, line: 91, column: 9)
!9264 = !DILocation(line: 91, column: 14, scope: !9263)
!9265 = !DILocation(line: 91, column: 9, scope: !847)
!9266 = !DILocation(line: 92, column: 14, scope: !9263)
!9267 = !DILocation(line: 92, column: 9, scope: !9263)
!9268 = !DILocation(line: 93, column: 9, scope: !9269)
!9269 = distinct !DILexicalBlock(scope: !847, file: !839, line: 93, column: 9)
!9270 = !DILocation(line: 93, column: 15, scope: !9269)
!9271 = !DILocation(line: 93, column: 9, scope: !847)
!9272 = !DILocation(line: 94, column: 15, scope: !9269)
!9273 = !DILocation(line: 94, column: 9, scope: !9269)
!9274 = !DILocation(line: 96, column: 9, scope: !9275)
!9275 = distinct !DILexicalBlock(scope: !847, file: !839, line: 96, column: 9)
!9276 = !DILocation(line: 96, column: 14, scope: !9275)
!9277 = !DILocation(line: 96, column: 19, scope: !9275)
!9278 = !DILocation(line: 96, column: 22, scope: !9279)
!9279 = !DILexicalBlockFile(scope: !9275, file: !839, discriminator: 1)
!9280 = !DILocation(line: 96, column: 28, scope: !9275)
!9281 = !DILocation(line: 96, column: 33, scope: !9275)
!9282 = !DILocation(line: 96, column: 51, scope: !9283)
!9283 = !DILexicalBlockFile(scope: !9275, file: !839, discriminator: 2)
!9284 = !DILocation(line: 96, column: 59, scope: !9275)
!9285 = !DILocation(line: 96, column: 68, scope: !9275)
!9286 = !DILocation(line: 96, column: 9, scope: !847)
!9287 = !DILocation(line: 100, column: 78, scope: !9288)
!9288 = distinct !DILexicalBlock(scope: !9275, file: !839, line: 96, column: 91)
!9289 = !DILocation(line: 100, column: 63, scope: !9288)
!9290 = !DILocation(line: 100, column: 86, scope: !9288)
!9291 = !DILocation(line: 100, column: 61, scope: !9288)
!9292 = !DILocation(line: 100, column: 120, scope: !9293)
!9293 = !DILexicalBlockFile(scope: !9288, file: !839, discriminator: 1)
!9294 = !DILocation(line: 100, column: 98, scope: !9288)
!9295 = !DILocation(line: 100, column: 128, scope: !9288)
!9296 = !DILocation(line: 100, column: 61, scope: !9297)
!9297 = !DILexicalBlockFile(scope: !9288, file: !839, discriminator: 2)
!9298 = !DILocation(line: 100, column: 199, scope: !9299)
!9299 = !DILexicalBlockFile(scope: !9300, file: !839, discriminator: 4)
!9300 = !DILexicalBlockFile(scope: !9288, file: !839, discriminator: 3)
!9301 = !DILocation(line: 100, column: 184, scope: !9288)
!9302 = !DILocation(line: 100, column: 207, scope: !9288)
!9303 = !DILocation(line: 100, column: 16, scope: !9288)
!9304 = !DILocation(line: 100, column: 9, scope: !9288)
!9305 = !DILocation(line: 108, column: 8, scope: !847)
!9306 = !DILocation(line: 108, column: 47, scope: !847)
!9307 = !DILocation(line: 108, column: 32, scope: !847)
!9308 = !DILocation(line: 108, column: 55, scope: !847)
!9309 = !DILocation(line: 108, column: 13, scope: !847)
!9310 = !DILocation(line: 108, column: 67, scope: !847)
!9311 = !DILocation(line: 108, column: 65, scope: !847)
!9312 = !DILocation(line: 107, column: 9, scope: !847)
!9313 = !DILocation(line: 107, column: 7, scope: !847)
!9314 = !DILocation(line: 109, column: 9, scope: !9315)
!9315 = distinct !DILexicalBlock(scope: !847, file: !839, line: 109, column: 9)
!9316 = !DILocation(line: 109, column: 9, scope: !847)
!9317 = !DILocation(line: 110, column: 13, scope: !9318)
!9318 = distinct !DILexicalBlock(scope: !9319, file: !839, line: 110, column: 13)
!9319 = distinct !DILexicalBlock(scope: !9315, file: !839, line: 109, column: 12)
!9320 = !DILocation(line: 110, column: 13, scope: !9319)
!9321 = !DILocation(line: 111, column: 52, scope: !9318)
!9322 = !DILocation(line: 111, column: 37, scope: !9318)
!9323 = !DILocation(line: 111, column: 57, scope: !9318)
!9324 = !DILocation(line: 111, column: 35, scope: !9318)
!9325 = !DILocation(line: 111, column: 91, scope: !9326)
!9326 = !DILexicalBlockFile(scope: !9318, file: !839, discriminator: 1)
!9327 = !DILocation(line: 111, column: 69, scope: !9318)
!9328 = !DILocation(line: 111, column: 96, scope: !9318)
!9329 = !DILocation(line: 111, column: 35, scope: !9330)
!9330 = !DILexicalBlockFile(scope: !9318, file: !839, discriminator: 2)
!9331 = !DILocation(line: 111, column: 135, scope: !9332)
!9332 = !DILexicalBlockFile(scope: !9333, file: !839, discriminator: 4)
!9333 = !DILexicalBlockFile(scope: !9318, file: !839, discriminator: 3)
!9334 = !DILocation(line: 111, column: 13, scope: !9318)
!9335 = !DILocation(line: 111, column: 141, scope: !9318)
!9336 = !DILocation(line: 112, column: 48, scope: !9319)
!9337 = !DILocation(line: 112, column: 33, scope: !9319)
!9338 = !DILocation(line: 112, column: 53, scope: !9319)
!9339 = !DILocation(line: 112, column: 31, scope: !9319)
!9340 = !DILocation(line: 112, column: 87, scope: !9341)
!9341 = !DILexicalBlockFile(scope: !9319, file: !839, discriminator: 1)
!9342 = !DILocation(line: 112, column: 65, scope: !9319)
!9343 = !DILocation(line: 112, column: 92, scope: !9319)
!9344 = !DILocation(line: 112, column: 31, scope: !9345)
!9345 = !DILexicalBlockFile(scope: !9319, file: !839, discriminator: 2)
!9346 = !DILocation(line: 112, column: 132, scope: !9347)
!9347 = !DILexicalBlockFile(scope: !9348, file: !839, discriminator: 4)
!9348 = !DILexicalBlockFile(scope: !9319, file: !839, discriminator: 3)
!9349 = !DILocation(line: 112, column: 130, scope: !9319)
!9350 = !DILocation(line: 113, column: 41, scope: !9319)
!9351 = !DILocation(line: 113, column: 26, scope: !9319)
!9352 = !DILocation(line: 113, column: 49, scope: !9319)
!9353 = !DILocation(line: 113, column: 24, scope: !9319)
!9354 = !DILocation(line: 113, column: 83, scope: !9341)
!9355 = !DILocation(line: 113, column: 61, scope: !9319)
!9356 = !DILocation(line: 113, column: 91, scope: !9319)
!9357 = !DILocation(line: 113, column: 24, scope: !9345)
!9358 = !DILocation(line: 114, column: 41, scope: !9319)
!9359 = !DILocation(line: 114, column: 26, scope: !9319)
!9360 = !DILocation(line: 114, column: 49, scope: !9319)
!9361 = !DILocation(line: 112, column: 9, scope: !9319)
!9362 = !DILocation(line: 115, column: 13, scope: !9363)
!9363 = distinct !DILexicalBlock(scope: !9319, file: !839, line: 115, column: 13)
!9364 = !DILocation(line: 115, column: 13, scope: !9319)
!9365 = !DILocation(line: 116, column: 52, scope: !9363)
!9366 = !DILocation(line: 116, column: 37, scope: !9363)
!9367 = !DILocation(line: 116, column: 57, scope: !9363)
!9368 = !DILocation(line: 116, column: 35, scope: !9363)
!9369 = !DILocation(line: 116, column: 91, scope: !9370)
!9370 = !DILexicalBlockFile(scope: !9363, file: !839, discriminator: 1)
!9371 = !DILocation(line: 116, column: 69, scope: !9363)
!9372 = !DILocation(line: 116, column: 96, scope: !9363)
!9373 = !DILocation(line: 116, column: 35, scope: !9374)
!9374 = !DILexicalBlockFile(scope: !9363, file: !839, discriminator: 2)
!9375 = !DILocation(line: 116, column: 136, scope: !9376)
!9376 = !DILexicalBlockFile(scope: !9377, file: !839, discriminator: 4)
!9377 = !DILexicalBlockFile(scope: !9363, file: !839, discriminator: 3)
!9378 = !DILocation(line: 116, column: 134, scope: !9363)
!9379 = !DILocation(line: 116, column: 175, scope: !9363)
!9380 = !DILocation(line: 116, column: 160, scope: !9363)
!9381 = !DILocation(line: 116, column: 183, scope: !9363)
!9382 = !DILocation(line: 116, column: 141, scope: !9363)
!9383 = !DILocation(line: 117, column: 6, scope: !9363)
!9384 = !DILocation(line: 116, column: 13, scope: !9363)
!9385 = !DILocation(line: 117, column: 12, scope: !9363)
!9386 = !DILocation(line: 118, column: 5, scope: !9319)
!9387 = !DILocation(line: 120, column: 12, scope: !847)
!9388 = !DILocation(line: 120, column: 5, scope: !847)
!9389 = !DILocation(line: 121, column: 1, scope: !847)
!9390 = !DILocation(line: 183, column: 45, scope: !875)
!9391 = !DILocation(line: 183, column: 70, scope: !875)
!9392 = !DILocation(line: 184, column: 45, scope: !875)
!9393 = !DILocation(line: 184, column: 59, scope: !875)
!9394 = !DILocation(line: 185, column: 46, scope: !875)
!9395 = !DILocation(line: 185, column: 65, scope: !875)
!9396 = !DILocation(line: 187, column: 5, scope: !875)
!9397 = !DILocation(line: 187, column: 15, scope: !875)
!9398 = !DILocation(line: 188, column: 5, scope: !875)
!9399 = !DILocation(line: 188, column: 16, scope: !875)
!9400 = !DILocation(line: 189, column: 5, scope: !875)
!9401 = !DILocation(line: 189, column: 15, scope: !875)
!9402 = !DILocation(line: 191, column: 36, scope: !9403)
!9403 = distinct !DILexicalBlock(scope: !875, file: !634, line: 191, column: 8)
!9404 = !DILocation(line: 191, column: 51, scope: !9403)
!9405 = !DILocation(line: 192, column: 37, scope: !9403)
!9406 = !DILocation(line: 192, column: 44, scope: !9403)
!9407 = !DILocation(line: 191, column: 9, scope: !9403)
!9408 = !DILocation(line: 191, column: 8, scope: !875)
!9409 = !DILocation(line: 193, column: 9, scope: !9403)
!9410 = !DILocation(line: 195, column: 25, scope: !9411)
!9411 = distinct !DILexicalBlock(scope: !875, file: !634, line: 195, column: 9)
!9412 = !DILocation(line: 195, column: 10, scope: !9411)
!9413 = !DILocation(line: 195, column: 9, scope: !875)
!9414 = !DILocation(line: 196, column: 19, scope: !9415)
!9415 = distinct !DILexicalBlock(scope: !9411, file: !634, line: 195, column: 38)
!9416 = !DILocation(line: 196, column: 10, scope: !9415)
!9417 = !DILocation(line: 196, column: 17, scope: !9415)
!9418 = !DILocation(line: 197, column: 9, scope: !9415)
!9419 = !DILocation(line: 200, column: 31, scope: !875)
!9420 = !DILocation(line: 200, column: 43, scope: !875)
!9421 = !DILocation(line: 200, column: 12, scope: !875)
!9422 = !DILocation(line: 200, column: 10, scope: !875)
!9423 = !DILocation(line: 201, column: 9, scope: !9424)
!9424 = distinct !DILexicalBlock(scope: !875, file: !634, line: 201, column: 9)
!9425 = !DILocation(line: 201, column: 14, scope: !9424)
!9426 = !DILocation(line: 201, column: 9, scope: !875)
!9427 = !DILocation(line: 202, column: 15, scope: !9428)
!9428 = distinct !DILexicalBlock(scope: !9424, file: !634, line: 201, column: 21)
!9429 = !DILocation(line: 202, column: 13, scope: !9428)
!9430 = !DILocation(line: 203, column: 13, scope: !9431)
!9431 = distinct !DILexicalBlock(scope: !9428, file: !634, line: 203, column: 13)
!9432 = !DILocation(line: 203, column: 17, scope: !9431)
!9433 = !DILocation(line: 203, column: 49, scope: !9434)
!9434 = !DILexicalBlockFile(scope: !9431, file: !634, discriminator: 1)
!9435 = !DILocation(line: 203, column: 54, scope: !9431)
!9436 = !DILocation(line: 203, column: 21, scope: !9431)
!9437 = !DILocation(line: 203, column: 13, scope: !9428)
!9438 = !DILocation(line: 204, column: 13, scope: !9439)
!9439 = distinct !DILexicalBlock(scope: !9431, file: !634, line: 203, column: 76)
!9440 = !DILocation(line: 205, column: 23, scope: !9439)
!9441 = !DILocation(line: 205, column: 14, scope: !9439)
!9442 = !DILocation(line: 205, column: 21, scope: !9439)
!9443 = !DILocation(line: 206, column: 13, scope: !9439)
!9444 = !DILocation(line: 208, column: 5, scope: !9428)
!9445 = !DILocation(line: 210, column: 9, scope: !9446)
!9446 = distinct !DILexicalBlock(scope: !875, file: !634, line: 210, column: 9)
!9447 = !DILocation(line: 210, column: 14, scope: !9446)
!9448 = !DILocation(line: 210, column: 18, scope: !9446)
!9449 = !DILocation(line: 210, column: 21, scope: !9450)
!9450 = !DILexicalBlockFile(scope: !9446, file: !634, discriminator: 1)
!9451 = !DILocation(line: 210, column: 26, scope: !9446)
!9452 = !DILocation(line: 210, column: 9, scope: !875)
!9453 = !DILocation(line: 211, column: 25, scope: !9454)
!9454 = distinct !DILexicalBlock(scope: !9446, file: !634, line: 210, column: 33)
!9455 = !DILocation(line: 211, column: 9, scope: !9454)
!9456 = !DILocation(line: 212, column: 9, scope: !9454)
!9457 = !DILocation(line: 215, column: 6, scope: !875)
!9458 = !DILocation(line: 215, column: 13, scope: !875)
!9459 = !DILocation(line: 216, column: 19, scope: !875)
!9460 = !DILocation(line: 216, column: 13, scope: !875)
!9461 = !DILocation(line: 216, column: 6, scope: !875)
!9462 = !DILocation(line: 216, column: 11, scope: !875)
!9463 = !DILocation(line: 217, column: 5, scope: !875)
!9464 = !DILocation(line: 218, column: 1, scope: !875)
!9465 = !DILocation(line: 8, column: 29, scope: !907)
!9466 = !DILocation(line: 8, column: 45, scope: !907)
!9467 = !DILocation(line: 9, column: 29, scope: !907)
!9468 = !DILocation(line: 9, column: 45, scope: !907)
!9469 = !DILocation(line: 10, column: 28, scope: !907)
!9470 = !DILocation(line: 12, column: 5, scope: !907)
!9471 = !DILocation(line: 12, column: 16, scope: !907)
!9472 = !DILocation(line: 14, column: 9, scope: !9473)
!9473 = distinct !DILexicalBlock(scope: !907, file: !908, line: 14, column: 9)
!9474 = !DILocation(line: 14, column: 17, scope: !9473)
!9475 = !DILocation(line: 14, column: 9, scope: !907)
!9476 = !DILocation(line: 15, column: 9, scope: !9473)
!9477 = !DILocation(line: 16, column: 9, scope: !9478)
!9478 = distinct !DILexicalBlock(scope: !907, file: !908, line: 16, column: 9)
!9479 = !DILocation(line: 16, column: 17, scope: !9478)
!9480 = !DILocation(line: 16, column: 9, scope: !907)
!9481 = !DILocation(line: 17, column: 17, scope: !9478)
!9482 = !DILocation(line: 17, column: 27, scope: !9478)
!9483 = !DILocation(line: 17, column: 25, scope: !9478)
!9484 = !DILocation(line: 17, column: 16, scope: !9478)
!9485 = !DILocation(line: 17, column: 39, scope: !9486)
!9486 = !DILexicalBlockFile(scope: !9478, file: !908, discriminator: 1)
!9487 = !DILocation(line: 17, column: 47, scope: !9478)
!9488 = !DILocation(line: 17, column: 53, scope: !9489)
!9489 = !DILexicalBlockFile(scope: !9478, file: !908, discriminator: 2)
!9490 = !DILocation(line: 17, column: 9, scope: !9491)
!9491 = !DILexicalBlockFile(scope: !9492, file: !908, discriminator: 4)
!9492 = !DILexicalBlockFile(scope: !9478, file: !908, discriminator: 3)
!9493 = !DILocation(line: 17, column: 9, scope: !9478)
!9494 = !DILocation(line: 19, column: 24, scope: !907)
!9495 = !DILocation(line: 19, column: 29, scope: !907)
!9496 = !DILocation(line: 19, column: 38, scope: !907)
!9497 = !DILocation(line: 19, column: 43, scope: !907)
!9498 = !DILocation(line: 19, column: 52, scope: !907)
!9499 = !DILocation(line: 19, column: 13, scope: !907)
!9500 = !DILocation(line: 19, column: 11, scope: !907)
!9501 = !DILocation(line: 21, column: 9, scope: !9502)
!9502 = distinct !DILexicalBlock(scope: !907, file: !908, line: 21, column: 9)
!9503 = !DILocation(line: 21, column: 15, scope: !9502)
!9504 = !DILocation(line: 21, column: 9, scope: !907)
!9505 = !DILocation(line: 22, column: 9, scope: !9502)
!9506 = !DILocation(line: 24, column: 12, scope: !907)
!9507 = !DILocation(line: 24, column: 5, scope: !907)
!9508 = !DILocation(line: 25, column: 1, scope: !907)
!9509 = !DILocation(line: 105, column: 41, scope: !888)
!9510 = !DILocation(line: 105, column: 66, scope: !888)
!9511 = !DILocation(line: 106, column: 39, scope: !888)
!9512 = !DILocation(line: 107, column: 40, scope: !888)
!9513 = !DILocation(line: 107, column: 59, scope: !888)
!9514 = !DILocation(line: 109, column: 5, scope: !888)
!9515 = !DILocation(line: 109, column: 15, scope: !888)
!9516 = !DILocation(line: 110, column: 5, scope: !888)
!9517 = !DILocation(line: 110, column: 16, scope: !888)
!9518 = !DILocation(line: 111, column: 5, scope: !888)
!9519 = !DILocation(line: 111, column: 16, scope: !888)
!9520 = !DILocation(line: 112, column: 5, scope: !888)
!9521 = !DILocation(line: 112, column: 15, scope: !888)
!9522 = !DILocation(line: 112, column: 45, scope: !888)
!9523 = !DILocation(line: 113, column: 5, scope: !888)
!9524 = !DILocation(line: 113, column: 10, scope: !888)
!9525 = !DILocation(line: 114, column: 5, scope: !888)
!9526 = !DILocation(line: 114, column: 12, scope: !888)
!9527 = !DILocation(line: 114, column: 25, scope: !888)
!9528 = !DILocation(line: 114, column: 18, scope: !888)
!9529 = !DILocation(line: 116, column: 24, scope: !888)
!9530 = !DILocation(line: 116, column: 33, scope: !888)
!9531 = !DILocation(line: 116, column: 31, scope: !888)
!9532 = !DILocation(line: 116, column: 38, scope: !888)
!9533 = !DILocation(line: 116, column: 58, scope: !888)
!9534 = !DILocation(line: 116, column: 56, scope: !888)
!9535 = !DILocation(line: 116, column: 62, scope: !888)
!9536 = !DILocation(line: 116, column: 5, scope: !888)
!9537 = !DILocation(line: 117, column: 5, scope: !888)
!9538 = !DILocation(line: 117, column: 20, scope: !888)
!9539 = !DILocation(line: 119, column: 34, scope: !9540)
!9540 = distinct !DILexicalBlock(scope: !888, file: !634, line: 119, column: 9)
!9541 = !DILocation(line: 119, column: 40, scope: !9540)
!9542 = !DILocation(line: 119, column: 10, scope: !9540)
!9543 = !DILocation(line: 119, column: 9, scope: !888)
!9544 = !DILocation(line: 120, column: 9, scope: !9540)
!9545 = !DILocation(line: 125, column: 9, scope: !9546)
!9546 = distinct !DILexicalBlock(scope: !888, file: !634, line: 125, column: 9)
!9547 = !DILocation(line: 125, column: 19, scope: !9546)
!9548 = !DILocation(line: 125, column: 9, scope: !888)
!9549 = !DILocation(line: 126, column: 33, scope: !9550)
!9550 = distinct !DILexicalBlock(scope: !9546, file: !634, line: 126, column: 13)
!9551 = !DILocation(line: 126, column: 14, scope: !9550)
!9552 = !DILocation(line: 126, column: 13, scope: !9546)
!9553 = !DILocation(line: 127, column: 13, scope: !9550)
!9554 = !DILocation(line: 126, column: 54, scope: !9555)
!9555 = !DILexicalBlockFile(scope: !9550, file: !634, discriminator: 1)
!9556 = !DILocation(line: 128, column: 9, scope: !9557)
!9557 = distinct !DILexicalBlock(scope: !888, file: !634, line: 128, column: 9)
!9558 = !DILocation(line: 128, column: 17, scope: !9557)
!9559 = !DILocation(line: 128, column: 9, scope: !888)
!9560 = !DILocation(line: 129, column: 33, scope: !9561)
!9561 = distinct !DILexicalBlock(scope: !9557, file: !634, line: 129, column: 13)
!9562 = !DILocation(line: 129, column: 14, scope: !9561)
!9563 = !DILocation(line: 129, column: 13, scope: !9557)
!9564 = !DILocation(line: 130, column: 13, scope: !9561)
!9565 = !DILocation(line: 129, column: 50, scope: !9566)
!9566 = !DILexicalBlockFile(scope: !9561, file: !634, discriminator: 1)
!9567 = !DILocation(line: 132, column: 14, scope: !888)
!9568 = !DILocation(line: 132, column: 6, scope: !888)
!9569 = !DILocation(line: 132, column: 12, scope: !888)
!9570 = !DILocation(line: 133, column: 12, scope: !888)
!9571 = !DILocation(line: 133, column: 6, scope: !888)
!9572 = !DILocation(line: 133, column: 10, scope: !888)
!9573 = !DILocation(line: 134, column: 15, scope: !888)
!9574 = !DILocation(line: 134, column: 6, scope: !888)
!9575 = !DILocation(line: 134, column: 13, scope: !888)
!9576 = !DILocation(line: 135, column: 5, scope: !888)
!9577 = !DILocation(line: 136, column: 1, scope: !888)
!9578 = !DILocation(line: 1335, column: 41, scope: !934)
!9579 = !DILocation(line: 1335, column: 57, scope: !934)
!9580 = !DILocation(line: 1335, column: 76, scope: !934)
!9581 = !DILocation(line: 1336, column: 29, scope: !934)
!9582 = !DILocation(line: 1336, column: 38, scope: !934)
!9583 = !DILocation(line: 1338, column: 5, scope: !934)
!9584 = !DILocation(line: 1338, column: 16, scope: !934)
!9585 = !DILocation(line: 1338, column: 54, scope: !934)
!9586 = !DILocation(line: 1338, column: 39, scope: !934)
!9587 = !DILocation(line: 1338, column: 62, scope: !934)
!9588 = !DILocation(line: 1339, column: 5, scope: !934)
!9589 = !DILocation(line: 1339, column: 17, scope: !934)
!9590 = !DILocation(line: 1340, column: 5, scope: !934)
!9591 = !DILocation(line: 1340, column: 15, scope: !934)
!9592 = !DILocation(line: 1341, column: 5, scope: !934)
!9593 = !DILocation(line: 1341, column: 9, scope: !934)
!9594 = !DILocation(line: 1343, column: 43, scope: !934)
!9595 = !DILocation(line: 1343, column: 28, scope: !934)
!9596 = !DILocation(line: 1343, column: 51, scope: !934)
!9597 = !DILocation(line: 1343, column: 26, scope: !934)
!9598 = !DILocation(line: 1343, column: 85, scope: !9599)
!9599 = !DILexicalBlockFile(scope: !934, file: !458, discriminator: 1)
!9600 = !DILocation(line: 1343, column: 93, scope: !934)
!9601 = !DILocation(line: 1343, column: 26, scope: !9602)
!9602 = !DILexicalBlockFile(scope: !934, file: !458, discriminator: 2)
!9603 = !DILocation(line: 1343, column: 9, scope: !9604)
!9604 = !DILexicalBlockFile(scope: !9605, file: !458, discriminator: 4)
!9605 = !DILexicalBlockFile(scope: !934, file: !458, discriminator: 3)
!9606 = !DILocation(line: 1345, column: 20, scope: !9607)
!9607 = distinct !DILexicalBlock(scope: !934, file: !458, line: 1345, column: 9)
!9608 = !DILocation(line: 1345, column: 9, scope: !9607)
!9609 = !DILocation(line: 1345, column: 38, scope: !9607)
!9610 = !DILocation(line: 1345, column: 9, scope: !934)
!9611 = !DILocation(line: 1346, column: 9, scope: !9607)
!9612 = !DILocation(line: 1348, column: 9, scope: !9613)
!9613 = distinct !DILexicalBlock(scope: !934, file: !458, line: 1348, column: 9)
!9614 = !DILocation(line: 1348, column: 15, scope: !9613)
!9615 = !DILocation(line: 1348, column: 13, scope: !9613)
!9616 = !DILocation(line: 1348, column: 9, scope: !934)
!9617 = !DILocation(line: 1348, column: 26, scope: !9618)
!9618 = !DILexicalBlockFile(scope: !9613, file: !458, discriminator: 1)
!9619 = !DILocation(line: 1348, column: 24, scope: !9613)
!9620 = !DILocation(line: 1348, column: 20, scope: !9613)
!9621 = !DILocation(line: 1348, column: 40, scope: !9622)
!9622 = !DILexicalBlockFile(scope: !9623, file: !458, discriminator: 2)
!9623 = distinct !DILexicalBlock(scope: !9613, file: !458, line: 1348, column: 40)
!9624 = !DILocation(line: 1348, column: 44, scope: !9623)
!9625 = !DILocation(line: 1348, column: 40, scope: !9613)
!9626 = !DILocation(line: 1348, column: 58, scope: !9627)
!9627 = !DILexicalBlockFile(scope: !9628, file: !458, discriminator: 4)
!9628 = distinct !DILexicalBlock(scope: !9623, file: !458, line: 1348, column: 49)
!9629 = !DILocation(line: 1348, column: 55, scope: !9628)
!9630 = !DILocation(line: 1348, column: 67, scope: !9631)
!9631 = distinct !DILexicalBlock(scope: !9628, file: !458, line: 1348, column: 67)
!9632 = !DILocation(line: 1348, column: 71, scope: !9631)
!9633 = !DILocation(line: 1348, column: 67, scope: !9628)
!9634 = !DILocation(line: 1348, column: 80, scope: !9635)
!9635 = !DILexicalBlockFile(scope: !9631, file: !458, discriminator: 5)
!9636 = !DILocation(line: 1348, column: 76, scope: !9631)
!9637 = !DILocation(line: 1348, column: 85, scope: !9638)
!9638 = !DILexicalBlockFile(scope: !9639, file: !458, discriminator: 7)
!9639 = !DILexicalBlockFile(scope: !9628, file: !458, discriminator: 6)
!9640 = !DILocation(line: 1348, column: 91, scope: !9641)
!9641 = !DILexicalBlockFile(scope: !9642, file: !458, discriminator: 3)
!9642 = distinct !DILexicalBlock(scope: !934, file: !458, line: 1348, column: 91)
!9643 = !DILocation(line: 1348, column: 97, scope: !9642)
!9644 = !DILocation(line: 1348, column: 91, scope: !934)
!9645 = !DILocation(line: 1348, column: 113, scope: !9646)
!9646 = !DILexicalBlockFile(scope: !9647, file: !458, discriminator: 8)
!9647 = distinct !DILexicalBlock(scope: !9642, file: !458, line: 1348, column: 102)
!9648 = !DILocation(line: 1348, column: 110, scope: !9647)
!9649 = !DILocation(line: 1348, column: 122, scope: !9650)
!9650 = distinct !DILexicalBlock(scope: !9647, file: !458, line: 1348, column: 122)
!9651 = !DILocation(line: 1348, column: 128, scope: !9650)
!9652 = !DILocation(line: 1348, column: 122, scope: !9647)
!9653 = !DILocation(line: 1348, column: 139, scope: !9654)
!9654 = !DILexicalBlockFile(scope: !9650, file: !458, discriminator: 9)
!9655 = !DILocation(line: 1348, column: 133, scope: !9650)
!9656 = !DILocation(line: 1348, column: 144, scope: !9657)
!9657 = !DILexicalBlockFile(scope: !9658, file: !458, discriminator: 11)
!9658 = !DILexicalBlockFile(scope: !9647, file: !458, discriminator: 10)
!9659 = !DILocation(line: 1350, column: 9, scope: !9660)
!9660 = distinct !DILexicalBlock(scope: !934, file: !458, line: 1350, column: 9)
!9661 = !DILocation(line: 1350, column: 19, scope: !9660)
!9662 = !DILocation(line: 1350, column: 9, scope: !934)
!9663 = !DILocation(line: 1352, column: 13, scope: !9664)
!9664 = distinct !DILexicalBlock(scope: !9665, file: !458, line: 1352, column: 13)
!9665 = distinct !DILexicalBlock(scope: !9660, file: !458, line: 1350, column: 24)
!9666 = !DILocation(line: 1352, column: 27, scope: !9664)
!9667 = !DILocation(line: 1352, column: 18, scope: !9664)
!9668 = !DILocation(line: 1352, column: 33, scope: !9664)
!9669 = !DILocation(line: 1352, column: 31, scope: !9664)
!9670 = !DILocation(line: 1352, column: 13, scope: !9665)
!9671 = !DILocation(line: 1353, column: 13, scope: !9672)
!9672 = distinct !DILexicalBlock(scope: !9664, file: !458, line: 1352, column: 38)
!9673 = !DILocation(line: 1355, column: 5, scope: !9665)
!9674 = !DILocation(line: 1357, column: 13, scope: !9675)
!9675 = distinct !DILexicalBlock(scope: !9676, file: !458, line: 1357, column: 13)
!9676 = distinct !DILexicalBlock(scope: !9660, file: !458, line: 1355, column: 12)
!9677 = !DILocation(line: 1357, column: 17, scope: !9675)
!9678 = !DILocation(line: 1357, column: 16, scope: !9675)
!9679 = !DILocation(line: 1357, column: 33, scope: !9675)
!9680 = !DILocation(line: 1357, column: 23, scope: !9675)
!9681 = !DILocation(line: 1357, column: 37, scope: !9675)
!9682 = !DILocation(line: 1357, column: 40, scope: !9683)
!9683 = !DILexicalBlockFile(scope: !9675, file: !458, discriminator: 1)
!9684 = !DILocation(line: 1357, column: 48, scope: !9675)
!9685 = !DILocation(line: 1357, column: 46, scope: !9675)
!9686 = !DILocation(line: 1357, column: 13, scope: !9676)
!9687 = !DILocation(line: 1358, column: 13, scope: !9688)
!9688 = distinct !DILexicalBlock(scope: !9675, file: !458, line: 1357, column: 53)
!9689 = !DILocation(line: 1361, column: 13, scope: !9690)
!9690 = distinct !DILexicalBlock(scope: !9676, file: !458, line: 1361, column: 13)
!9691 = !DILocation(line: 1361, column: 25, scope: !9690)
!9692 = !DILocation(line: 1361, column: 16, scope: !9690)
!9693 = !DILocation(line: 1361, column: 31, scope: !9690)
!9694 = !DILocation(line: 1361, column: 29, scope: !9690)
!9695 = !DILocation(line: 1361, column: 13, scope: !9676)
!9696 = !DILocation(line: 1362, column: 21, scope: !9690)
!9697 = !DILocation(line: 1362, column: 35, scope: !9690)
!9698 = !DILocation(line: 1362, column: 25, scope: !9690)
!9699 = !DILocation(line: 1362, column: 19, scope: !9690)
!9700 = !DILocation(line: 1362, column: 13, scope: !9690)
!9701 = !DILocation(line: 1364, column: 9, scope: !9702)
!9702 = distinct !DILexicalBlock(scope: !934, file: !458, line: 1364, column: 9)
!9703 = !DILocation(line: 1364, column: 13, scope: !9702)
!9704 = !DILocation(line: 1364, column: 12, scope: !9702)
!9705 = !DILocation(line: 1364, column: 30, scope: !9702)
!9706 = !DILocation(line: 1364, column: 19, scope: !9702)
!9707 = !DILocation(line: 1364, column: 9, scope: !934)
!9708 = !DILocation(line: 1365, column: 23, scope: !9702)
!9709 = !DILocation(line: 1365, column: 27, scope: !9702)
!9710 = !DILocation(line: 1365, column: 26, scope: !9702)
!9711 = !DILocation(line: 1365, column: 42, scope: !9702)
!9712 = !DILocation(line: 1365, column: 55, scope: !9702)
!9713 = !DILocation(line: 1365, column: 16, scope: !9702)
!9714 = !DILocation(line: 1365, column: 14, scope: !9702)
!9715 = !DILocation(line: 1365, column: 12, scope: !9702)
!9716 = !DILocation(line: 1365, column: 9, scope: !9702)
!9717 = !DILocation(line: 1364, column: 30, scope: !9718)
!9718 = !DILexicalBlockFile(scope: !9702, file: !458, discriminator: 1)
!9719 = !DILocation(line: 1368, column: 5, scope: !934)
!9720 = !DILocation(line: 1369, column: 12, scope: !934)
!9721 = !DILocation(line: 1369, column: 5, scope: !934)
!9722 = !DILocation(line: 1370, column: 1, scope: !934)
!9723 = !DILocation(line: 1116, column: 44, scope: !1022)
!9724 = !DILocation(line: 1116, column: 60, scope: !1022)
!9725 = !DILocation(line: 1116, column: 70, scope: !1022)
!9726 = !DILocation(line: 1118, column: 5, scope: !1022)
!9727 = !DILocation(line: 1118, column: 15, scope: !1022)
!9728 = !DILocation(line: 1119, column: 5, scope: !1022)
!9729 = !DILocation(line: 1119, column: 10, scope: !1022)
!9730 = !DILocation(line: 1120, column: 5, scope: !1022)
!9731 = !DILocation(line: 1120, column: 15, scope: !1022)
!9732 = !DILocation(line: 1121, column: 5, scope: !1022)
!9733 = !DILocation(line: 1121, column: 17, scope: !1022)
!9734 = !DILocation(line: 1122, column: 5, scope: !1022)
!9735 = !DILocation(line: 1122, column: 16, scope: !1022)
!9736 = !DILocation(line: 1123, column: 5, scope: !1022)
!9737 = !DILocation(line: 1123, column: 16, scope: !1022)
!9738 = !DILocation(line: 1123, column: 25, scope: !1022)
!9739 = !DILocation(line: 1124, column: 5, scope: !1022)
!9740 = !DILocation(line: 1124, column: 16, scope: !1022)
!9741 = !DILocation(line: 1127, column: 42, scope: !9742)
!9742 = distinct !DILexicalBlock(scope: !1022, file: !458, line: 1126, column: 9)
!9743 = !DILocation(line: 1126, column: 10, scope: !9742)
!9744 = !DILocation(line: 1126, column: 9, scope: !1022)
!9745 = !DILocation(line: 1128, column: 9, scope: !9742)
!9746 = !DILocation(line: 1130, column: 9, scope: !9747)
!9747 = distinct !DILexicalBlock(scope: !1022, file: !458, line: 1130, column: 9)
!9748 = !DILocation(line: 1130, column: 9, scope: !1022)
!9749 = !DILocation(line: 1131, column: 24, scope: !9750)
!9750 = distinct !DILexicalBlock(scope: !9751, file: !458, line: 1131, column: 13)
!9751 = distinct !DILexicalBlock(scope: !9747, file: !458, line: 1130, column: 17)
!9752 = !DILocation(line: 1131, column: 13, scope: !9750)
!9753 = !DILocation(line: 1131, column: 41, scope: !9750)
!9754 = !DILocation(line: 1131, column: 13, scope: !9751)
!9755 = !DILocation(line: 1132, column: 13, scope: !9750)
!9756 = !DILocation(line: 1134, column: 22, scope: !9751)
!9757 = !DILocation(line: 1134, column: 13, scope: !9751)
!9758 = !DILocation(line: 1135, column: 26, scope: !9751)
!9759 = !DILocation(line: 1135, column: 17, scope: !9751)
!9760 = !DILocation(line: 1136, column: 5, scope: !9751)
!9761 = !DILocation(line: 1138, column: 13, scope: !9762)
!9762 = distinct !DILexicalBlock(scope: !9747, file: !458, line: 1137, column: 10)
!9763 = !DILocation(line: 1139, column: 17, scope: !9762)
!9764 = !DILocation(line: 1142, column: 9, scope: !9765)
!9765 = distinct !DILexicalBlock(scope: !1022, file: !458, line: 1142, column: 9)
!9766 = !DILocation(line: 1142, column: 13, scope: !9765)
!9767 = !DILocation(line: 1142, column: 9, scope: !1022)
!9768 = !DILocation(line: 1144, column: 45, scope: !9765)
!9769 = !DILocation(line: 1144, column: 30, scope: !9765)
!9770 = !DILocation(line: 1144, column: 53, scope: !9765)
!9771 = !DILocation(line: 1144, column: 28, scope: !9765)
!9772 = !DILocation(line: 1144, column: 87, scope: !9773)
!9773 = !DILexicalBlockFile(scope: !9765, file: !458, discriminator: 1)
!9774 = !DILocation(line: 1144, column: 95, scope: !9765)
!9775 = !DILocation(line: 1144, column: 28, scope: !9776)
!9776 = !DILexicalBlockFile(scope: !9765, file: !458, discriminator: 2)
!9777 = !DILocation(line: 1144, column: 166, scope: !9778)
!9778 = !DILexicalBlockFile(scope: !9779, file: !458, discriminator: 4)
!9779 = !DILexicalBlockFile(scope: !9765, file: !458, discriminator: 3)
!9780 = !DILocation(line: 1144, column: 151, scope: !9765)
!9781 = !DILocation(line: 1144, column: 174, scope: !9765)
!9782 = !DILocation(line: 1145, column: 13, scope: !9765)
!9783 = !DILocation(line: 1145, column: 18, scope: !9765)
!9784 = !DILocation(line: 1145, column: 27, scope: !9765)
!9785 = !DILocation(line: 1145, column: 34, scope: !9765)
!9786 = !DILocation(line: 1143, column: 15, scope: !9765)
!9787 = !DILocation(line: 1143, column: 13, scope: !9765)
!9788 = !DILocation(line: 1143, column: 9, scope: !9765)
!9789 = !DILocation(line: 1148, column: 45, scope: !9765)
!9790 = !DILocation(line: 1148, column: 30, scope: !9765)
!9791 = !DILocation(line: 1148, column: 53, scope: !9765)
!9792 = !DILocation(line: 1148, column: 28, scope: !9765)
!9793 = !DILocation(line: 1148, column: 87, scope: !9773)
!9794 = !DILocation(line: 1148, column: 95, scope: !9765)
!9795 = !DILocation(line: 1148, column: 28, scope: !9776)
!9796 = !DILocation(line: 1148, column: 166, scope: !9778)
!9797 = !DILocation(line: 1148, column: 151, scope: !9765)
!9798 = !DILocation(line: 1148, column: 174, scope: !9765)
!9799 = !DILocation(line: 1149, column: 13, scope: !9765)
!9800 = !DILocation(line: 1149, column: 18, scope: !9765)
!9801 = !DILocation(line: 1149, column: 27, scope: !9765)
!9802 = !DILocation(line: 1149, column: 34, scope: !9765)
!9803 = !DILocation(line: 1147, column: 15, scope: !9765)
!9804 = !DILocation(line: 1147, column: 13, scope: !9765)
!9805 = !DILocation(line: 1151, column: 9, scope: !9806)
!9806 = distinct !DILexicalBlock(scope: !1022, file: !458, line: 1151, column: 9)
!9807 = !DILocation(line: 1151, column: 9, scope: !1022)
!9808 = !DILocation(line: 1152, column: 9, scope: !9806)
!9809 = !DILocation(line: 1154, column: 12, scope: !1022)
!9810 = !DILocation(line: 1154, column: 5, scope: !1022)
!9811 = !DILocation(line: 1155, column: 1, scope: !1022)
!9812 = !DILocation(line: 63, column: 34, scope: !1037)
!9813 = !DILocation(line: 63, column: 50, scope: !1037)
!9814 = !DILocation(line: 64, column: 34, scope: !1037)
!9815 = !DILocation(line: 64, column: 50, scope: !1037)
!9816 = !DILocation(line: 65, column: 33, scope: !1037)
!9817 = !DILocation(line: 65, column: 51, scope: !1037)
!9818 = !DILocation(line: 67, column: 9, scope: !9819)
!9819 = distinct !DILexicalBlock(scope: !1037, file: !634, line: 67, column: 9)
!9820 = !DILocation(line: 67, column: 15, scope: !9819)
!9821 = !DILocation(line: 67, column: 13, scope: !9819)
!9822 = !DILocation(line: 67, column: 9, scope: !1037)
!9823 = !DILocation(line: 67, column: 30, scope: !9824)
!9824 = !DILexicalBlockFile(scope: !9819, file: !634, discriminator: 1)
!9825 = !DILocation(line: 67, column: 28, scope: !9819)
!9826 = !DILocation(line: 67, column: 24, scope: !9819)
!9827 = !DILocation(line: 67, column: 48, scope: !9828)
!9828 = !DILexicalBlockFile(scope: !9829, file: !634, discriminator: 2)
!9829 = distinct !DILexicalBlock(scope: !9819, file: !634, line: 67, column: 48)
!9830 = !DILocation(line: 67, column: 52, scope: !9829)
!9831 = !DILocation(line: 67, column: 48, scope: !9819)
!9832 = !DILocation(line: 67, column: 66, scope: !9833)
!9833 = !DILexicalBlockFile(scope: !9834, file: !634, discriminator: 4)
!9834 = distinct !DILexicalBlock(scope: !9829, file: !634, line: 67, column: 57)
!9835 = !DILocation(line: 67, column: 63, scope: !9834)
!9836 = !DILocation(line: 67, column: 79, scope: !9837)
!9837 = distinct !DILexicalBlock(scope: !9834, file: !634, line: 67, column: 79)
!9838 = !DILocation(line: 67, column: 83, scope: !9837)
!9839 = !DILocation(line: 67, column: 79, scope: !9834)
!9840 = !DILocation(line: 67, column: 92, scope: !9841)
!9841 = !DILexicalBlockFile(scope: !9837, file: !634, discriminator: 5)
!9842 = !DILocation(line: 67, column: 88, scope: !9837)
!9843 = !DILocation(line: 67, column: 97, scope: !9844)
!9844 = !DILexicalBlockFile(scope: !9845, file: !634, discriminator: 7)
!9845 = !DILexicalBlockFile(scope: !9834, file: !634, discriminator: 6)
!9846 = !DILocation(line: 67, column: 103, scope: !9847)
!9847 = !DILexicalBlockFile(scope: !9848, file: !634, discriminator: 3)
!9848 = distinct !DILexicalBlock(scope: !1037, file: !634, line: 67, column: 103)
!9849 = !DILocation(line: 67, column: 109, scope: !9848)
!9850 = !DILocation(line: 67, column: 103, scope: !1037)
!9851 = !DILocation(line: 67, column: 125, scope: !9852)
!9852 = !DILexicalBlockFile(scope: !9853, file: !634, discriminator: 8)
!9853 = distinct !DILexicalBlock(scope: !9848, file: !634, line: 67, column: 114)
!9854 = !DILocation(line: 67, column: 122, scope: !9853)
!9855 = !DILocation(line: 67, column: 138, scope: !9856)
!9856 = distinct !DILexicalBlock(scope: !9853, file: !634, line: 67, column: 138)
!9857 = !DILocation(line: 67, column: 144, scope: !9856)
!9858 = !DILocation(line: 67, column: 138, scope: !9853)
!9859 = !DILocation(line: 67, column: 155, scope: !9860)
!9860 = !DILexicalBlockFile(scope: !9856, file: !634, discriminator: 9)
!9861 = !DILocation(line: 67, column: 149, scope: !9856)
!9862 = !DILocation(line: 67, column: 160, scope: !9863)
!9863 = !DILexicalBlockFile(scope: !9864, file: !634, discriminator: 11)
!9864 = !DILexicalBlockFile(scope: !9853, file: !634, discriminator: 10)
!9865 = !DILocation(line: 68, column: 27, scope: !1037)
!9866 = !DILocation(line: 68, column: 33, scope: !1037)
!9867 = !DILocation(line: 68, column: 31, scope: !1037)
!9868 = !DILocation(line: 68, column: 40, scope: !1037)
!9869 = !DILocation(line: 68, column: 46, scope: !1037)
!9870 = !DILocation(line: 68, column: 44, scope: !1037)
!9871 = !DILocation(line: 68, column: 53, scope: !1037)
!9872 = !DILocation(line: 68, column: 58, scope: !1037)
!9873 = !DILocation(line: 68, column: 67, scope: !1037)
!9874 = !DILocation(line: 68, column: 12, scope: !1037)
!9875 = !DILocation(line: 68, column: 5, scope: !1037)
!9876 = !DILocation(line: 72, column: 35, scope: !1047)
!9877 = !DILocation(line: 72, column: 51, scope: !1047)
!9878 = !DILocation(line: 73, column: 35, scope: !1047)
!9879 = !DILocation(line: 73, column: 51, scope: !1047)
!9880 = !DILocation(line: 74, column: 34, scope: !1047)
!9881 = !DILocation(line: 74, column: 52, scope: !1047)
!9882 = !DILocation(line: 76, column: 9, scope: !9883)
!9883 = distinct !DILexicalBlock(scope: !1047, file: !634, line: 76, column: 9)
!9884 = !DILocation(line: 76, column: 15, scope: !9883)
!9885 = !DILocation(line: 76, column: 13, scope: !9883)
!9886 = !DILocation(line: 76, column: 9, scope: !1047)
!9887 = !DILocation(line: 76, column: 30, scope: !9888)
!9888 = !DILexicalBlockFile(scope: !9883, file: !634, discriminator: 1)
!9889 = !DILocation(line: 76, column: 28, scope: !9883)
!9890 = !DILocation(line: 76, column: 24, scope: !9883)
!9891 = !DILocation(line: 76, column: 48, scope: !9892)
!9892 = !DILexicalBlockFile(scope: !9893, file: !634, discriminator: 2)
!9893 = distinct !DILexicalBlock(scope: !9883, file: !634, line: 76, column: 48)
!9894 = !DILocation(line: 76, column: 52, scope: !9893)
!9895 = !DILocation(line: 76, column: 48, scope: !9883)
!9896 = !DILocation(line: 76, column: 66, scope: !9897)
!9897 = !DILexicalBlockFile(scope: !9898, file: !634, discriminator: 4)
!9898 = distinct !DILexicalBlock(scope: !9893, file: !634, line: 76, column: 57)
!9899 = !DILocation(line: 76, column: 63, scope: !9898)
!9900 = !DILocation(line: 76, column: 79, scope: !9901)
!9901 = distinct !DILexicalBlock(scope: !9898, file: !634, line: 76, column: 79)
!9902 = !DILocation(line: 76, column: 83, scope: !9901)
!9903 = !DILocation(line: 76, column: 79, scope: !9898)
!9904 = !DILocation(line: 76, column: 92, scope: !9905)
!9905 = !DILexicalBlockFile(scope: !9901, file: !634, discriminator: 5)
!9906 = !DILocation(line: 76, column: 88, scope: !9901)
!9907 = !DILocation(line: 76, column: 97, scope: !9908)
!9908 = !DILexicalBlockFile(scope: !9909, file: !634, discriminator: 7)
!9909 = !DILexicalBlockFile(scope: !9898, file: !634, discriminator: 6)
!9910 = !DILocation(line: 76, column: 103, scope: !9911)
!9911 = !DILexicalBlockFile(scope: !9912, file: !634, discriminator: 3)
!9912 = distinct !DILexicalBlock(scope: !1047, file: !634, line: 76, column: 103)
!9913 = !DILocation(line: 76, column: 109, scope: !9912)
!9914 = !DILocation(line: 76, column: 103, scope: !1047)
!9915 = !DILocation(line: 76, column: 125, scope: !9916)
!9916 = !DILexicalBlockFile(scope: !9917, file: !634, discriminator: 8)
!9917 = distinct !DILexicalBlock(scope: !9912, file: !634, line: 76, column: 114)
!9918 = !DILocation(line: 76, column: 122, scope: !9917)
!9919 = !DILocation(line: 76, column: 138, scope: !9920)
!9920 = distinct !DILexicalBlock(scope: !9917, file: !634, line: 76, column: 138)
!9921 = !DILocation(line: 76, column: 144, scope: !9920)
!9922 = !DILocation(line: 76, column: 138, scope: !9917)
!9923 = !DILocation(line: 76, column: 155, scope: !9924)
!9924 = !DILexicalBlockFile(scope: !9920, file: !634, discriminator: 9)
!9925 = !DILocation(line: 76, column: 149, scope: !9920)
!9926 = !DILocation(line: 76, column: 160, scope: !9927)
!9927 = !DILexicalBlockFile(scope: !9928, file: !634, discriminator: 11)
!9928 = !DILexicalBlockFile(scope: !9917, file: !634, discriminator: 10)
!9929 = !DILocation(line: 77, column: 28, scope: !1047)
!9930 = !DILocation(line: 77, column: 34, scope: !1047)
!9931 = !DILocation(line: 77, column: 32, scope: !1047)
!9932 = !DILocation(line: 77, column: 41, scope: !1047)
!9933 = !DILocation(line: 77, column: 47, scope: !1047)
!9934 = !DILocation(line: 77, column: 45, scope: !1047)
!9935 = !DILocation(line: 77, column: 54, scope: !1047)
!9936 = !DILocation(line: 77, column: 59, scope: !1047)
!9937 = !DILocation(line: 77, column: 68, scope: !1047)
!9938 = !DILocation(line: 77, column: 12, scope: !1047)
!9939 = !DILocation(line: 77, column: 5, scope: !1047)
!9940 = !DILocation(line: 28, column: 29, scope: !1055)
!9941 = !DILocation(line: 28, column: 45, scope: !1055)
!9942 = !DILocation(line: 29, column: 29, scope: !1055)
!9943 = !DILocation(line: 29, column: 45, scope: !1055)
!9944 = !DILocation(line: 30, column: 28, scope: !1055)
!9945 = !DILocation(line: 32, column: 5, scope: !1055)
!9946 = !DILocation(line: 32, column: 16, scope: !1055)
!9947 = !DILocation(line: 34, column: 9, scope: !9948)
!9948 = distinct !DILexicalBlock(scope: !1055, file: !634, line: 34, column: 9)
!9949 = !DILocation(line: 34, column: 17, scope: !9948)
!9950 = !DILocation(line: 34, column: 9, scope: !1055)
!9951 = !DILocation(line: 35, column: 9, scope: !9948)
!9952 = !DILocation(line: 36, column: 9, scope: !9953)
!9953 = distinct !DILexicalBlock(scope: !1055, file: !634, line: 36, column: 9)
!9954 = !DILocation(line: 36, column: 17, scope: !9953)
!9955 = !DILocation(line: 36, column: 9, scope: !1055)
!9956 = !DILocation(line: 37, column: 16, scope: !9953)
!9957 = !DILocation(line: 37, column: 26, scope: !9953)
!9958 = !DILocation(line: 37, column: 24, scope: !9953)
!9959 = !DILocation(line: 37, column: 9, scope: !9953)
!9960 = !DILocation(line: 39, column: 22, scope: !1055)
!9961 = !DILocation(line: 39, column: 27, scope: !1055)
!9962 = !DILocation(line: 39, column: 36, scope: !1055)
!9963 = !DILocation(line: 39, column: 41, scope: !1055)
!9964 = !DILocation(line: 39, column: 11, scope: !1055)
!9965 = !DILocation(line: 39, column: 9, scope: !1055)
!9966 = !DILocation(line: 41, column: 9, scope: !9967)
!9967 = distinct !DILexicalBlock(scope: !1055, file: !634, line: 41, column: 9)
!9968 = !DILocation(line: 41, column: 13, scope: !9967)
!9969 = !DILocation(line: 41, column: 9, scope: !1055)
!9970 = !DILocation(line: 42, column: 16, scope: !9967)
!9971 = !DILocation(line: 42, column: 13, scope: !9967)
!9972 = !DILocation(line: 42, column: 9, scope: !9967)
!9973 = !DILocation(line: 44, column: 12, scope: !1055)
!9974 = !DILocation(line: 44, column: 5, scope: !1055)
!9975 = !DILocation(line: 45, column: 1, scope: !1055)
!9976 = !DILocation(line: 2661, column: 26, scope: !1080)
!9977 = !DILocation(line: 2663, column: 9, scope: !9978)
!9978 = distinct !DILexicalBlock(scope: !1080, file: !458, line: 2663, column: 9)
!9979 = !DILocation(line: 2663, column: 11, scope: !9978)
!9980 = !DILocation(line: 2663, column: 9, scope: !1080)
!9981 = !DILocation(line: 2664, column: 9, scope: !9978)
!9982 = !DILocation(line: 2665, column: 44, scope: !9983)
!9983 = distinct !DILexicalBlock(scope: !1080, file: !458, line: 2665, column: 9)
!9984 = !DILocation(line: 2665, column: 47, scope: !9983)
!9985 = !DILocation(line: 2665, column: 27, scope: !9983)
!9986 = !DILocation(line: 2665, column: 10, scope: !9983)
!9987 = !DILocation(line: 2665, column: 57, scope: !9983)
!9988 = !DILocation(line: 2665, column: 9, scope: !1080)
!9989 = !DILocation(line: 2666, column: 16, scope: !9983)
!9990 = !DILocation(line: 2666, column: 18, scope: !9983)
!9991 = !DILocation(line: 2666, column: 9, scope: !9983)
!9992 = !DILocation(line: 2668, column: 48, scope: !9993)
!9993 = distinct !DILexicalBlock(scope: !9994, file: !458, line: 2668, column: 13)
!9994 = distinct !DILexicalBlock(scope: !9983, file: !458, line: 2667, column: 10)
!9995 = !DILocation(line: 2668, column: 51, scope: !9993)
!9996 = !DILocation(line: 2668, column: 31, scope: !9993)
!9997 = !DILocation(line: 2668, column: 14, scope: !9993)
!9998 = !DILocation(line: 2668, column: 61, scope: !9993)
!9999 = !DILocation(line: 2668, column: 13, scope: !9994)
!10000 = !DILocation(line: 2669, column: 54, scope: !9993)
!10001 = !DILocation(line: 2669, column: 57, scope: !9993)
!10002 = !DILocation(line: 2669, column: 37, scope: !9993)
!10003 = !DILocation(line: 2669, column: 18, scope: !9993)
!10004 = !DILocation(line: 2669, column: 17, scope: !9993)
!10005 = !DILocation(line: 2669, column: 15, scope: !9993)
!10006 = !DILocation(line: 2669, column: 13, scope: !9993)
!10007 = !DILocation(line: 2670, column: 13, scope: !10008)
!10008 = distinct !DILexicalBlock(scope: !9994, file: !458, line: 2670, column: 13)
!10009 = !DILocation(line: 2670, column: 15, scope: !10008)
!10010 = !DILocation(line: 2670, column: 22, scope: !10008)
!10011 = !DILocation(line: 2670, column: 25, scope: !10012)
!10012 = !DILexicalBlockFile(scope: !10008, file: !458, discriminator: 1)
!10013 = !DILocation(line: 2670, column: 27, scope: !10008)
!10014 = !DILocation(line: 2670, column: 13, scope: !9994)
!10015 = !DILocation(line: 2671, column: 20, scope: !10008)
!10016 = !DILocation(line: 2671, column: 22, scope: !10008)
!10017 = !DILocation(line: 2671, column: 28, scope: !10008)
!10018 = !DILocation(line: 2671, column: 13, scope: !10008)
!10019 = !DILocation(line: 2673, column: 5, scope: !1080)
!10020 = !DILocation(line: 2674, column: 1, scope: !1080)
!10021 = !DILocation(line: 8, column: 32, scope: !1124)
!10022 = !DILocation(line: 8, column: 47, scope: !1124)
!10023 = !DILocation(line: 10, column: 5, scope: !1124)
!10024 = !DILocation(line: 10, column: 11, scope: !1124)
!10025 = !DILocation(line: 10, column: 52, scope: !1124)
!10026 = !DILocation(line: 10, column: 37, scope: !1124)
!10027 = !DILocation(line: 10, column: 59, scope: !1124)
!10028 = !DILocation(line: 10, column: 35, scope: !1124)
!10029 = !DILocation(line: 10, column: 93, scope: !10030)
!10030 = !DILexicalBlockFile(scope: !1124, file: !1125, discriminator: 1)
!10031 = !DILocation(line: 10, column: 71, scope: !1124)
!10032 = !DILocation(line: 10, column: 100, scope: !1124)
!10033 = !DILocation(line: 10, column: 35, scope: !10034)
!10034 = !DILexicalBlockFile(scope: !1124, file: !1125, discriminator: 2)
!10035 = !DILocation(line: 10, column: 11, scope: !10036)
!10036 = !DILexicalBlockFile(scope: !10037, file: !1125, discriminator: 4)
!10037 = !DILexicalBlockFile(scope: !1124, file: !1125, discriminator: 3)
!10038 = !DILocation(line: 11, column: 5, scope: !1124)
!10039 = !DILocation(line: 11, column: 22, scope: !1124)
!10040 = !DILocation(line: 11, column: 63, scope: !1124)
!10041 = !DILocation(line: 11, column: 48, scope: !1124)
!10042 = !DILocation(line: 11, column: 70, scope: !1124)
!10043 = !DILocation(line: 12, column: 5, scope: !1124)
!10044 = !DILocation(line: 12, column: 15, scope: !1124)
!10045 = !DILocation(line: 13, column: 5, scope: !1124)
!10046 = !DILocation(line: 13, column: 11, scope: !1124)
!10047 = !DILocation(line: 14, column: 5, scope: !1124)
!10048 = !DILocation(line: 14, column: 16, scope: !1124)
!10049 = !DILocation(line: 15, column: 5, scope: !1124)
!10050 = !DILocation(line: 15, column: 16, scope: !1124)
!10051 = !DILocation(line: 16, column: 5, scope: !1124)
!10052 = !DILocation(line: 16, column: 16, scope: !1124)
!10053 = !DILocation(line: 16, column: 19, scope: !1124)
!10054 = !DILocation(line: 17, column: 5, scope: !1124)
!10055 = !DILocation(line: 17, column: 15, scope: !1124)
!10056 = !DILocation(line: 17, column: 21, scope: !1124)
!10057 = !DILocation(line: 18, column: 5, scope: !1124)
!10058 = !DILocation(line: 18, column: 16, scope: !1124)
!10059 = !DILocation(line: 20, column: 5, scope: !1124)
!10060 = !DILocation(line: 20, column: 15, scope: !1124)
!10061 = !DILocation(line: 22, column: 27, scope: !1124)
!10062 = !DILocation(line: 22, column: 11, scope: !1124)
!10063 = !DILocation(line: 22, column: 9, scope: !1124)
!10064 = !DILocation(line: 23, column: 9, scope: !10065)
!10065 = distinct !DILexicalBlock(scope: !1124, file: !1125, line: 23, column: 9)
!10066 = !DILocation(line: 23, column: 13, scope: !10065)
!10067 = !DILocation(line: 23, column: 9, scope: !1124)
!10068 = !DILocation(line: 24, column: 9, scope: !10069)
!10069 = distinct !DILexicalBlock(scope: !10065, file: !1125, line: 23, column: 28)
!10070 = !DILocation(line: 27, column: 32, scope: !1124)
!10071 = !DILocation(line: 27, column: 39, scope: !1124)
!10072 = !DILocation(line: 27, column: 50, scope: !1124)
!10073 = !DILocation(line: 27, column: 59, scope: !1124)
!10074 = !DILocation(line: 27, column: 76, scope: !1124)
!10075 = !DILocation(line: 27, column: 15, scope: !1124)
!10076 = !DILocation(line: 27, column: 101, scope: !10030)
!10077 = !DILocation(line: 27, column: 86, scope: !1124)
!10078 = !DILocation(line: 27, column: 108, scope: !1124)
!10079 = !DILocation(line: 27, column: 136, scope: !10034)
!10080 = !DILocation(line: 27, column: 121, scope: !1124)
!10081 = !DILocation(line: 27, column: 143, scope: !1124)
!10082 = !DILocation(line: 27, column: 12, scope: !10036)
!10083 = !DILocation(line: 28, column: 9, scope: !1148)
!10084 = !DILocation(line: 28, column: 16, scope: !1148)
!10085 = !DILocation(line: 28, column: 9, scope: !1124)
!10086 = !DILocation(line: 29, column: 9, scope: !1147)
!10087 = !DILocation(line: 29, column: 14, scope: !10088)
!10088 = !DILexicalBlockFile(scope: !1146, file: !1125, discriminator: 1)
!10089 = !DILocation(line: 29, column: 24, scope: !1146)
!10090 = !DILocation(line: 29, column: 54, scope: !1146)
!10091 = !DILocation(line: 29, column: 68, scope: !10092)
!10092 = distinct !DILexicalBlock(scope: !1146, file: !1125, line: 29, column: 65)
!10093 = !DILocation(line: 29, column: 85, scope: !10092)
!10094 = !DILocation(line: 29, column: 65, scope: !10092)
!10095 = !DILocation(line: 29, column: 95, scope: !10092)
!10096 = !DILocation(line: 29, column: 65, scope: !1146)
!10097 = !DILocation(line: 29, column: 65, scope: !10098)
!10098 = !DILexicalBlockFile(scope: !1146, file: !1125, discriminator: 2)
!10099 = !DILocation(line: 29, column: 126, scope: !10100)
!10100 = !DILexicalBlockFile(scope: !10092, file: !1125, discriminator: 3)
!10101 = !DILocation(line: 29, column: 144, scope: !10092)
!10102 = !DILocation(line: 29, column: 154, scope: !10092)
!10103 = !DILocation(line: 29, column: 179, scope: !10092)
!10104 = !DILocation(line: 29, column: 110, scope: !10092)
!10105 = !DILocation(line: 29, column: 198, scope: !10106)
!10106 = !DILexicalBlockFile(scope: !1147, file: !1125, discriminator: 4)
!10107 = !DILocation(line: 29, column: 198, scope: !1146)
!10108 = !DILocation(line: 29, column: 198, scope: !10109)
!10109 = !DILexicalBlockFile(scope: !1146, file: !1125, discriminator: 5)
!10110 = !DILocation(line: 30, column: 16, scope: !1147)
!10111 = !DILocation(line: 30, column: 9, scope: !1147)
!10112 = !DILocation(line: 42, column: 9, scope: !1154)
!10113 = !DILocation(line: 42, column: 16, scope: !1154)
!10114 = !DILocation(line: 42, column: 9, scope: !1124)
!10115 = !DILocation(line: 43, column: 31, scope: !1153)
!10116 = !DILocation(line: 43, column: 39, scope: !1153)
!10117 = !DILocation(line: 43, column: 21, scope: !1153)
!10118 = !DILocation(line: 43, column: 21, scope: !10119)
!10119 = !DILexicalBlockFile(scope: !1153, file: !1125, discriminator: 1)
!10120 = !DILocation(line: 43, column: 139, scope: !10121)
!10121 = !DILexicalBlockFile(scope: !1153, file: !1125, discriminator: 2)
!10122 = !DILocation(line: 43, column: 147, scope: !1153)
!10123 = !DILocation(line: 43, column: 125, scope: !1153)
!10124 = !DILocation(line: 43, column: 111, scope: !1153)
!10125 = !DILocation(line: 43, column: 17, scope: !10126)
!10126 = !DILexicalBlockFile(scope: !10127, file: !1125, discriminator: 4)
!10127 = !DILexicalBlockFile(scope: !1153, file: !1125, discriminator: 3)
!10128 = !DILocation(line: 44, column: 13, scope: !1152)
!10129 = !DILocation(line: 44, column: 21, scope: !1152)
!10130 = !DILocation(line: 44, column: 13, scope: !1153)
!10131 = !DILocation(line: 45, column: 13, scope: !1151)
!10132 = !DILocation(line: 45, column: 18, scope: !10133)
!10133 = !DILexicalBlockFile(scope: !1150, file: !1125, discriminator: 1)
!10134 = !DILocation(line: 45, column: 28, scope: !1150)
!10135 = !DILocation(line: 45, column: 58, scope: !1150)
!10136 = !DILocation(line: 45, column: 72, scope: !10137)
!10137 = distinct !DILexicalBlock(scope: !1150, file: !1125, line: 45, column: 69)
!10138 = !DILocation(line: 45, column: 89, scope: !10137)
!10139 = !DILocation(line: 45, column: 69, scope: !10137)
!10140 = !DILocation(line: 45, column: 99, scope: !10137)
!10141 = !DILocation(line: 45, column: 69, scope: !1150)
!10142 = !DILocation(line: 45, column: 69, scope: !10143)
!10143 = !DILexicalBlockFile(scope: !1150, file: !1125, discriminator: 2)
!10144 = !DILocation(line: 45, column: 130, scope: !10145)
!10145 = !DILexicalBlockFile(scope: !10137, file: !1125, discriminator: 3)
!10146 = !DILocation(line: 45, column: 148, scope: !10137)
!10147 = !DILocation(line: 45, column: 158, scope: !10137)
!10148 = !DILocation(line: 45, column: 183, scope: !10137)
!10149 = !DILocation(line: 45, column: 114, scope: !10137)
!10150 = !DILocation(line: 45, column: 202, scope: !10151)
!10151 = !DILexicalBlockFile(scope: !1151, file: !1125, discriminator: 4)
!10152 = !DILocation(line: 45, column: 202, scope: !1150)
!10153 = !DILocation(line: 45, column: 202, scope: !10154)
!10154 = !DILexicalBlockFile(scope: !1150, file: !1125, discriminator: 5)
!10155 = !DILocation(line: 46, column: 13, scope: !1151)
!10156 = !DILocation(line: 47, column: 13, scope: !1151)
!10157 = !DILocation(line: 49, column: 5, scope: !1153)
!10158 = !DILocation(line: 51, column: 19, scope: !10159)
!10159 = distinct !DILexicalBlock(scope: !1154, file: !1125, line: 50, column: 10)
!10160 = !DILocation(line: 51, column: 17, scope: !10159)
!10161 = !DILocation(line: 58, column: 12, scope: !1158)
!10162 = !DILocation(line: 58, column: 23, scope: !1158)
!10163 = !DILocation(line: 58, column: 10, scope: !1158)
!10164 = !DILocation(line: 58, column: 28, scope: !10165)
!10165 = !DILexicalBlockFile(scope: !10166, file: !1125, discriminator: 2)
!10166 = !DILexicalBlockFile(scope: !1157, file: !1125, discriminator: 1)
!10167 = !DILocation(line: 58, column: 32, scope: !1157)
!10168 = !DILocation(line: 58, column: 30, scope: !1157)
!10169 = !DILocation(line: 58, column: 5, scope: !1158)
!10170 = !DILocation(line: 59, column: 9, scope: !1156)
!10171 = !DILocation(line: 59, column: 20, scope: !1156)
!10172 = !DILocation(line: 60, column: 34, scope: !1156)
!10173 = !DILocation(line: 60, column: 41, scope: !1156)
!10174 = !DILocation(line: 60, column: 52, scope: !1156)
!10175 = !DILocation(line: 60, column: 61, scope: !1156)
!10176 = !DILocation(line: 60, column: 78, scope: !1156)
!10177 = !DILocation(line: 60, column: 17, scope: !1156)
!10178 = !DILocation(line: 60, column: 120, scope: !10179)
!10179 = !DILexicalBlockFile(scope: !1156, file: !1125, discriminator: 1)
!10180 = !DILocation(line: 60, column: 105, scope: !1156)
!10181 = !DILocation(line: 60, column: 88, scope: !1156)
!10182 = !DILocation(line: 60, column: 112, scope: !1156)
!10183 = !{!10184, !2120, i64 24}
!10184 = !{!"", !2168, i64 0, !2120, i64 24, !2130, i64 32}
!10185 = !DILocation(line: 60, column: 87, scope: !1156)
!10186 = !DILocation(line: 60, column: 161, scope: !10187)
!10187 = !DILexicalBlockFile(scope: !1156, file: !1125, discriminator: 2)
!10188 = !DILocation(line: 60, column: 146, scope: !1156)
!10189 = !DILocation(line: 60, column: 128, scope: !1156)
!10190 = !DILocation(line: 60, column: 153, scope: !1156)
!10191 = !DILocation(line: 60, column: 127, scope: !1156)
!10192 = !DILocation(line: 60, column: 14, scope: !10193)
!10193 = !DILexicalBlockFile(scope: !10194, file: !1125, discriminator: 4)
!10194 = !DILexicalBlockFile(scope: !1156, file: !1125, discriminator: 3)
!10195 = !DILocation(line: 61, column: 24, scope: !10196)
!10196 = distinct !DILexicalBlock(scope: !1156, file: !1125, line: 61, column: 13)
!10197 = !DILocation(line: 61, column: 39, scope: !10196)
!10198 = !DILocation(line: 61, column: 31, scope: !10196)
!10199 = !DILocation(line: 61, column: 13, scope: !10196)
!10200 = !DILocation(line: 61, column: 43, scope: !10196)
!10201 = !DILocation(line: 61, column: 13, scope: !1156)
!10202 = !DILocation(line: 62, column: 26, scope: !10203)
!10203 = distinct !DILexicalBlock(scope: !10196, file: !1125, line: 61, column: 48)
!10204 = !DILocation(line: 65, column: 26, scope: !10203)
!10205 = !DILocation(line: 65, column: 43, scope: !10203)
!10206 = !DILocation(line: 65, column: 51, scope: !10203)
!10207 = !DILocation(line: 65, column: 61, scope: !10203)
!10208 = !DILocation(line: 62, column: 13, scope: !10203)
!10209 = !DILocation(line: 66, column: 13, scope: !10203)
!10210 = !DILocation(line: 68, column: 17, scope: !1156)
!10211 = !DILocation(line: 68, column: 19, scope: !1156)
!10212 = !DILocation(line: 68, column: 15, scope: !1156)
!10213 = !DILocation(line: 69, column: 27, scope: !1156)
!10214 = !DILocation(line: 69, column: 19, scope: !1156)
!10215 = !DILocation(line: 69, column: 30, scope: !1156)
!10216 = !DILocation(line: 69, column: 17, scope: !1156)
!10217 = !DILocation(line: 70, column: 13, scope: !10218)
!10218 = distinct !DILexicalBlock(scope: !1156, file: !1125, line: 70, column: 13)
!10219 = !DILocation(line: 70, column: 57, scope: !10218)
!10220 = !DILocation(line: 70, column: 55, scope: !10218)
!10221 = !DILocation(line: 70, column: 21, scope: !10218)
!10222 = !DILocation(line: 70, column: 13, scope: !1156)
!10223 = !DILocation(line: 71, column: 29, scope: !10224)
!10224 = distinct !DILexicalBlock(scope: !10218, file: !1125, line: 70, column: 61)
!10225 = !DILocation(line: 71, column: 13, scope: !10224)
!10226 = !DILocation(line: 73, column: 13, scope: !10224)
!10227 = !DILocation(line: 75, column: 15, scope: !1156)
!10228 = !DILocation(line: 75, column: 12, scope: !1156)
!10229 = !DILocation(line: 76, column: 13, scope: !10230)
!10230 = distinct !DILexicalBlock(scope: !1156, file: !1125, line: 76, column: 13)
!10231 = !DILocation(line: 76, column: 15, scope: !10230)
!10232 = !DILocation(line: 76, column: 13, scope: !1156)
!10233 = !DILocation(line: 77, column: 17, scope: !10234)
!10234 = distinct !DILexicalBlock(scope: !10235, file: !1125, line: 77, column: 17)
!10235 = distinct !DILexicalBlock(scope: !10230, file: !1125, line: 76, column: 21)
!10236 = !DILocation(line: 77, column: 60, scope: !10234)
!10237 = !DILocation(line: 77, column: 58, scope: !10234)
!10238 = !DILocation(line: 77, column: 24, scope: !10234)
!10239 = !DILocation(line: 77, column: 17, scope: !10235)
!10240 = !DILocation(line: 78, column: 33, scope: !10241)
!10241 = distinct !DILexicalBlock(scope: !10234, file: !1125, line: 77, column: 64)
!10242 = !DILocation(line: 78, column: 17, scope: !10241)
!10243 = !DILocation(line: 80, column: 17, scope: !10241)
!10244 = !DILocation(line: 82, column: 19, scope: !10235)
!10245 = !DILocation(line: 82, column: 16, scope: !10235)
!10246 = !DILocation(line: 83, column: 9, scope: !10235)
!10247 = !DILocation(line: 84, column: 13, scope: !10248)
!10248 = distinct !DILexicalBlock(scope: !1156, file: !1125, line: 84, column: 13)
!10249 = !DILocation(line: 84, column: 41, scope: !10248)
!10250 = !DILocation(line: 84, column: 48, scope: !10248)
!10251 = !DILocation(line: 84, column: 59, scope: !10248)
!10252 = !DILocation(line: 84, column: 68, scope: !10248)
!10253 = !DILocation(line: 84, column: 85, scope: !10248)
!10254 = !DILocation(line: 84, column: 24, scope: !10248)
!10255 = !DILocation(line: 84, column: 110, scope: !10256)
!10256 = !DILexicalBlockFile(scope: !10248, file: !1125, discriminator: 1)
!10257 = !DILocation(line: 84, column: 95, scope: !10248)
!10258 = !DILocation(line: 84, column: 117, scope: !10248)
!10259 = !DILocation(line: 84, column: 145, scope: !10260)
!10260 = !DILexicalBlockFile(scope: !10248, file: !1125, discriminator: 2)
!10261 = !DILocation(line: 84, column: 130, scope: !10248)
!10262 = !DILocation(line: 84, column: 152, scope: !10248)
!10263 = !DILocation(line: 84, column: 20, scope: !10264)
!10264 = !DILexicalBlockFile(scope: !10265, file: !1125, discriminator: 4)
!10265 = !DILexicalBlockFile(scope: !10248, file: !1125, discriminator: 3)
!10266 = !DILocation(line: 84, column: 13, scope: !1156)
!10267 = !DILocation(line: 85, column: 29, scope: !10268)
!10268 = distinct !DILexicalBlock(scope: !10248, file: !1125, line: 84, column: 163)
!10269 = !DILocation(line: 85, column: 13, scope: !10268)
!10270 = !DILocation(line: 87, column: 13, scope: !10268)
!10271 = !DILocation(line: 89, column: 5, scope: !1157)
!10272 = !DILocation(line: 89, column: 5, scope: !10166)
!10273 = !DILocation(line: 89, column: 5, scope: !1156)
!10274 = !DILocation(line: 58, column: 41, scope: !1157)
!10275 = !DILocation(line: 58, column: 5, scope: !1157)
!10276 = !DILocation(line: 92, column: 53, scope: !1124)
!10277 = !DILocation(line: 92, column: 11, scope: !1124)
!10278 = !DILocation(line: 92, column: 9, scope: !1124)
!10279 = !DILocation(line: 93, column: 9, scope: !10280)
!10280 = distinct !DILexicalBlock(scope: !1124, file: !1125, line: 93, column: 9)
!10281 = !DILocation(line: 93, column: 13, scope: !10280)
!10282 = !DILocation(line: 93, column: 9, scope: !1124)
!10283 = !DILocation(line: 94, column: 9, scope: !10280)
!10284 = !DILocation(line: 97, column: 41, scope: !1124)
!10285 = !DILocation(line: 97, column: 26, scope: !1124)
!10286 = !DILocation(line: 97, column: 48, scope: !1124)
!10287 = !DILocation(line: 97, column: 24, scope: !1124)
!10288 = !DILocation(line: 97, column: 82, scope: !10030)
!10289 = !DILocation(line: 97, column: 60, scope: !1124)
!10290 = !DILocation(line: 97, column: 89, scope: !1124)
!10291 = !DILocation(line: 97, column: 24, scope: !10034)
!10292 = !DILocation(line: 97, column: 7, scope: !10036)
!10293 = !DILocation(line: 98, column: 10, scope: !1164)
!10294 = !DILocation(line: 98, column: 9, scope: !1124)
!10295 = !DILocation(line: 100, column: 16, scope: !1162)
!10296 = !DILocation(line: 100, column: 14, scope: !1162)
!10297 = !DILocation(line: 100, column: 21, scope: !10298)
!10298 = !DILexicalBlockFile(scope: !10299, file: !1125, discriminator: 2)
!10299 = !DILexicalBlockFile(scope: !1161, file: !1125, discriminator: 1)
!10300 = !DILocation(line: 100, column: 25, scope: !1161)
!10301 = !DILocation(line: 100, column: 23, scope: !1161)
!10302 = !DILocation(line: 100, column: 9, scope: !1162)
!10303 = !DILocation(line: 101, column: 13, scope: !1160)
!10304 = !DILocation(line: 101, column: 24, scope: !1160)
!10305 = !DILocation(line: 101, column: 36, scope: !1160)
!10306 = !DILocation(line: 101, column: 28, scope: !1160)
!10307 = !DILocation(line: 101, column: 39, scope: !1160)
!10308 = !DILocation(line: 102, column: 13, scope: !1160)
!10309 = !DILocation(line: 102, column: 19, scope: !1160)
!10310 = !DILocation(line: 102, column: 31, scope: !1160)
!10311 = !DILocation(line: 102, column: 23, scope: !1160)
!10312 = !DILocation(line: 102, column: 34, scope: !1160)
!10313 = !DILocation(line: 103, column: 20, scope: !1160)
!10314 = !DILocation(line: 103, column: 23, scope: !1160)
!10315 = !DILocation(line: 103, column: 26, scope: !1160)
!10316 = !DILocation(line: 103, column: 13, scope: !1160)
!10317 = !DILocation(line: 104, column: 18, scope: !1160)
!10318 = !DILocation(line: 104, column: 15, scope: !1160)
!10319 = !DILocation(line: 105, column: 9, scope: !1161)
!10320 = !DILocation(line: 105, column: 9, scope: !1160)
!10321 = !DILocation(line: 100, column: 33, scope: !1161)
!10322 = !DILocation(line: 100, column: 9, scope: !1161)
!10323 = !DILocation(line: 106, column: 9, scope: !1163)
!10324 = !DILocation(line: 108, column: 12, scope: !1169)
!10325 = !DILocation(line: 108, column: 10, scope: !1169)
!10326 = !DILocation(line: 108, column: 17, scope: !10327)
!10327 = !DILexicalBlockFile(scope: !10328, file: !1125, discriminator: 2)
!10328 = !DILexicalBlockFile(scope: !1168, file: !1125, discriminator: 1)
!10329 = !DILocation(line: 108, column: 21, scope: !1168)
!10330 = !DILocation(line: 108, column: 19, scope: !1168)
!10331 = !DILocation(line: 108, column: 5, scope: !1169)
!10332 = !DILocation(line: 109, column: 9, scope: !1167)
!10333 = !DILocation(line: 109, column: 20, scope: !1167)
!10334 = !DILocation(line: 110, column: 9, scope: !1167)
!10335 = !DILocation(line: 110, column: 15, scope: !1167)
!10336 = !DILocation(line: 111, column: 13, scope: !10337)
!10337 = distinct !DILexicalBlock(scope: !1167, file: !1125, line: 111, column: 13)
!10338 = !DILocation(line: 111, column: 13, scope: !1167)
!10339 = !DILocation(line: 112, column: 20, scope: !10340)
!10340 = distinct !DILexicalBlock(scope: !10337, file: !1125, line: 111, column: 16)
!10341 = !DILocation(line: 112, column: 23, scope: !10340)
!10342 = !DILocation(line: 112, column: 31, scope: !10340)
!10343 = !DILocation(line: 112, column: 13, scope: !10340)
!10344 = !DILocation(line: 113, column: 18, scope: !10340)
!10345 = !DILocation(line: 113, column: 15, scope: !10340)
!10346 = !DILocation(line: 114, column: 9, scope: !10340)
!10347 = !DILocation(line: 115, column: 21, scope: !1167)
!10348 = !DILocation(line: 115, column: 13, scope: !1167)
!10349 = !DILocation(line: 115, column: 24, scope: !1167)
!10350 = !DILocation(line: 115, column: 11, scope: !1167)
!10351 = !DILocation(line: 116, column: 21, scope: !1167)
!10352 = !DILocation(line: 116, column: 13, scope: !1167)
!10353 = !DILocation(line: 116, column: 24, scope: !1167)
!10354 = !DILocation(line: 116, column: 11, scope: !1167)
!10355 = !DILocation(line: 117, column: 16, scope: !1167)
!10356 = !DILocation(line: 117, column: 19, scope: !1167)
!10357 = !DILocation(line: 117, column: 22, scope: !1167)
!10358 = !DILocation(line: 117, column: 9, scope: !1167)
!10359 = !DILocation(line: 118, column: 14, scope: !1167)
!10360 = !DILocation(line: 118, column: 11, scope: !1167)
!10361 = !DILocation(line: 119, column: 5, scope: !1168)
!10362 = !DILocation(line: 119, column: 5, scope: !1167)
!10363 = !DILocation(line: 108, column: 29, scope: !1168)
!10364 = !DILocation(line: 108, column: 5, scope: !1168)
!10365 = !DILocation(line: 120, column: 5, scope: !1124)
!10366 = !DILocation(line: 123, column: 9, scope: !1124)
!10367 = !DILocation(line: 123, column: 5, scope: !1124)
!10368 = !DILocation(line: 125, column: 5, scope: !1124)
!10369 = !DILocation(line: 125, column: 10, scope: !10370)
!10370 = !DILexicalBlockFile(scope: !1172, file: !1125, discriminator: 1)
!10371 = !DILocation(line: 125, column: 20, scope: !1172)
!10372 = !DILocation(line: 125, column: 50, scope: !1172)
!10373 = !DILocation(line: 125, column: 64, scope: !10374)
!10374 = distinct !DILexicalBlock(scope: !1172, file: !1125, line: 125, column: 61)
!10375 = !DILocation(line: 125, column: 81, scope: !10374)
!10376 = !DILocation(line: 125, column: 61, scope: !10374)
!10377 = !DILocation(line: 125, column: 91, scope: !10374)
!10378 = !DILocation(line: 125, column: 61, scope: !1172)
!10379 = !DILocation(line: 125, column: 61, scope: !10380)
!10380 = !DILexicalBlockFile(scope: !1172, file: !1125, discriminator: 2)
!10381 = !DILocation(line: 125, column: 122, scope: !10382)
!10382 = !DILexicalBlockFile(scope: !10374, file: !1125, discriminator: 3)
!10383 = !DILocation(line: 125, column: 140, scope: !10374)
!10384 = !DILocation(line: 125, column: 150, scope: !10374)
!10385 = !DILocation(line: 125, column: 175, scope: !10374)
!10386 = !DILocation(line: 125, column: 106, scope: !10374)
!10387 = !DILocation(line: 125, column: 194, scope: !10388)
!10388 = !DILexicalBlockFile(scope: !1124, file: !1125, discriminator: 4)
!10389 = !DILocation(line: 125, column: 194, scope: !1172)
!10390 = !DILocation(line: 125, column: 194, scope: !10391)
!10391 = !DILexicalBlockFile(scope: !1172, file: !1125, discriminator: 5)
!10392 = !DILocation(line: 126, column: 12, scope: !10393)
!10393 = distinct !DILexicalBlock(scope: !1124, file: !1125, line: 126, column: 5)
!10394 = !DILocation(line: 126, column: 10, scope: !10393)
!10395 = !DILocation(line: 126, column: 17, scope: !10396)
!10396 = !DILexicalBlockFile(scope: !10397, file: !1125, discriminator: 2)
!10397 = !DILexicalBlockFile(scope: !10398, file: !1125, discriminator: 1)
!10398 = distinct !DILexicalBlock(scope: !10393, file: !1125, line: 126, column: 5)
!10399 = !DILocation(line: 126, column: 21, scope: !10398)
!10400 = !DILocation(line: 126, column: 19, scope: !10398)
!10401 = !DILocation(line: 126, column: 5, scope: !10393)
!10402 = !DILocation(line: 127, column: 35, scope: !10398)
!10403 = !DILocation(line: 127, column: 27, scope: !10398)
!10404 = !DILocation(line: 127, column: 9, scope: !10398)
!10405 = !DILocation(line: 126, column: 29, scope: !10398)
!10406 = !DILocation(line: 126, column: 5, scope: !10398)
!10407 = !DILocation(line: 128, column: 9, scope: !10408)
!10408 = distinct !DILexicalBlock(scope: !1124, file: !1125, line: 128, column: 9)
!10409 = !DILocation(line: 128, column: 20, scope: !10408)
!10410 = !DILocation(line: 128, column: 17, scope: !10408)
!10411 = !DILocation(line: 128, column: 9, scope: !1124)
!10412 = !DILocation(line: 129, column: 20, scope: !10408)
!10413 = !DILocation(line: 129, column: 9, scope: !10408)
!10414 = !DILocation(line: 130, column: 12, scope: !1124)
!10415 = !DILocation(line: 130, column: 5, scope: !1124)
!10416 = !DILocation(line: 131, column: 1, scope: !1124)
!10417 = !DILocation(line: 2460, column: 21, scope: !1195)
!10418 = !DILocation(line: 2460, column: 39, scope: !1195)
!10419 = !DILocation(line: 2461, column: 21, scope: !1195)
!10420 = !DILocation(line: 2461, column: 40, scope: !1195)
!10421 = !DILocation(line: 2463, column: 5, scope: !1195)
!10422 = !DILocation(line: 2463, column: 16, scope: !1195)
!10423 = !DILocation(line: 2464, column: 5, scope: !1195)
!10424 = !DILocation(line: 2464, column: 12, scope: !10425)
!10425 = !DILexicalBlockFile(scope: !10426, file: !458, discriminator: 4)
!10426 = !DILexicalBlockFile(scope: !1195, file: !458, discriminator: 1)
!10427 = !DILocation(line: 2464, column: 16, scope: !1195)
!10428 = !DILocation(line: 2464, column: 14, scope: !1195)
!10429 = !DILocation(line: 2464, column: 23, scope: !1195)
!10430 = !DILocation(line: 2464, column: 33, scope: !10431)
!10431 = !DILexicalBlockFile(scope: !1195, file: !458, discriminator: 2)
!10432 = !DILocation(line: 2464, column: 63, scope: !1195)
!10433 = !DILocation(line: 2464, column: 57, scope: !1195)
!10434 = !DILocation(line: 2464, column: 41, scope: !1195)
!10435 = !DILocation(line: 2464, column: 67, scope: !1195)
!10436 = !DILocation(line: 2464, column: 26, scope: !1195)
!10437 = !DILocation(line: 2464, column: 5, scope: !10438)
!10438 = !DILexicalBlockFile(scope: !1195, file: !458, discriminator: 3)
!10439 = !DILocation(line: 2465, column: 10, scope: !1195)
!10440 = !DILocation(line: 2466, column: 12, scope: !1195)
!10441 = !DILocation(line: 2467, column: 1, scope: !1195)
!10442 = !DILocation(line: 2466, column: 5, scope: !1195)
!10443 = !DILocation(line: 8, column: 31, scope: !1216)
!10444 = !DILocation(line: 9, column: 33, scope: !1216)
!10445 = !DILocation(line: 9, column: 49, scope: !1216)
!10446 = !DILocation(line: 10, column: 31, scope: !1216)
!10447 = !DILocation(line: 11, column: 33, scope: !1216)
!10448 = !DILocation(line: 11, column: 49, scope: !1216)
!10449 = !DILocation(line: 13, column: 5, scope: !1216)
!10450 = !DILocation(line: 13, column: 15, scope: !1216)
!10451 = !DILocation(line: 14, column: 5, scope: !1216)
!10452 = !DILocation(line: 14, column: 16, scope: !1216)
!10453 = !DILocation(line: 16, column: 9, scope: !10454)
!10454 = distinct !DILexicalBlock(scope: !1216, file: !1217, line: 16, column: 9)
!10455 = !DILocation(line: 16, column: 17, scope: !10454)
!10456 = !DILocation(line: 16, column: 9, scope: !1216)
!10457 = !DILocation(line: 17, column: 25, scope: !10458)
!10458 = distinct !DILexicalBlock(scope: !10454, file: !1217, line: 16, column: 23)
!10459 = !DILocation(line: 17, column: 9, scope: !10458)
!10460 = !DILocation(line: 18, column: 9, scope: !10458)
!10461 = !DILocation(line: 21, column: 11, scope: !1216)
!10462 = !DILocation(line: 21, column: 9, scope: !1216)
!10463 = !DILocation(line: 22, column: 10, scope: !10464)
!10464 = distinct !DILexicalBlock(scope: !1216, file: !1217, line: 22, column: 9)
!10465 = !DILocation(line: 22, column: 9, scope: !1216)
!10466 = !DILocation(line: 23, column: 9, scope: !10464)
!10467 = !DILocation(line: 25, column: 22, scope: !1216)
!10468 = !DILocation(line: 25, column: 27, scope: !1216)
!10469 = !DILocation(line: 25, column: 36, scope: !1216)
!10470 = !DILocation(line: 25, column: 41, scope: !1216)
!10471 = !DILocation(line: 25, column: 11, scope: !1216)
!10472 = !DILocation(line: 25, column: 9, scope: !1216)
!10473 = !DILocation(line: 27, column: 9, scope: !1234)
!10474 = !DILocation(line: 27, column: 13, scope: !1234)
!10475 = !DILocation(line: 27, column: 9, scope: !1216)
!10476 = !DILocation(line: 29, column: 79, scope: !1233)
!10477 = !DILocation(line: 29, column: 84, scope: !1233)
!10478 = !DILocation(line: 29, column: 49, scope: !1233)
!10479 = !DILocation(line: 29, column: 29, scope: !1233)
!10480 = !DILocation(line: 29, column: 11, scope: !1233)
!10481 = !DILocation(line: 29, column: 36, scope: !1233)
!10482 = !DILocation(line: 29, column: 10, scope: !1233)
!10483 = !DILocation(line: 29, column: 47, scope: !1233)
!10484 = !DILocation(line: 30, column: 49, scope: !1233)
!10485 = !DILocation(line: 30, column: 29, scope: !1233)
!10486 = !DILocation(line: 30, column: 11, scope: !1233)
!10487 = !DILocation(line: 30, column: 36, scope: !1233)
!10488 = !DILocation(line: 30, column: 10, scope: !1233)
!10489 = !DILocation(line: 30, column: 47, scope: !1233)
!10490 = !DILocation(line: 31, column: 49, scope: !1233)
!10491 = !DILocation(line: 31, column: 29, scope: !1233)
!10492 = !DILocation(line: 31, column: 11, scope: !1233)
!10493 = !DILocation(line: 31, column: 36, scope: !1233)
!10494 = !DILocation(line: 31, column: 10, scope: !1233)
!10495 = !DILocation(line: 31, column: 47, scope: !1233)
!10496 = !DILocation(line: 33, column: 13, scope: !1232)
!10497 = !DILocation(line: 33, column: 13, scope: !1233)
!10498 = !DILocation(line: 34, column: 13, scope: !1231)
!10499 = !DILocation(line: 34, column: 18, scope: !10500)
!10500 = !DILexicalBlockFile(scope: !1230, file: !1217, discriminator: 1)
!10501 = !DILocation(line: 34, column: 28, scope: !1230)
!10502 = !DILocation(line: 34, column: 58, scope: !1230)
!10503 = !DILocation(line: 34, column: 72, scope: !10504)
!10504 = distinct !DILexicalBlock(scope: !1230, file: !1217, line: 34, column: 69)
!10505 = !DILocation(line: 34, column: 89, scope: !10504)
!10506 = !DILocation(line: 34, column: 69, scope: !10504)
!10507 = !DILocation(line: 34, column: 99, scope: !10504)
!10508 = !DILocation(line: 34, column: 69, scope: !1230)
!10509 = !DILocation(line: 34, column: 69, scope: !10510)
!10510 = !DILexicalBlockFile(scope: !1230, file: !1217, discriminator: 2)
!10511 = !DILocation(line: 34, column: 130, scope: !10512)
!10512 = !DILexicalBlockFile(scope: !10504, file: !1217, discriminator: 3)
!10513 = !DILocation(line: 34, column: 148, scope: !10504)
!10514 = !DILocation(line: 34, column: 158, scope: !10504)
!10515 = !DILocation(line: 34, column: 183, scope: !10504)
!10516 = !DILocation(line: 34, column: 114, scope: !10504)
!10517 = !DILocation(line: 34, column: 202, scope: !10518)
!10518 = !DILexicalBlockFile(scope: !1231, file: !1217, discriminator: 4)
!10519 = !DILocation(line: 34, column: 202, scope: !1230)
!10520 = !DILocation(line: 34, column: 202, scope: !10521)
!10521 = !DILexicalBlockFile(scope: !1230, file: !1217, discriminator: 5)
!10522 = !DILocation(line: 35, column: 13, scope: !1231)
!10523 = !DILocation(line: 45, column: 16, scope: !1233)
!10524 = !DILocation(line: 45, column: 9, scope: !1233)
!10525 = !DILocation(line: 48, column: 75, scope: !1216)
!10526 = !DILocation(line: 48, column: 80, scope: !1216)
!10527 = !DILocation(line: 48, column: 45, scope: !1216)
!10528 = !DILocation(line: 48, column: 25, scope: !1216)
!10529 = !DILocation(line: 48, column: 7, scope: !1216)
!10530 = !DILocation(line: 48, column: 32, scope: !1216)
!10531 = !DILocation(line: 48, column: 6, scope: !1216)
!10532 = !DILocation(line: 48, column: 43, scope: !1216)
!10533 = !DILocation(line: 49, column: 21, scope: !1216)
!10534 = !DILocation(line: 49, column: 32, scope: !1216)
!10535 = !DILocation(line: 49, column: 41, scope: !1216)
!10536 = !DILocation(line: 50, column: 45, scope: !1216)
!10537 = !DILocation(line: 50, column: 25, scope: !1216)
!10538 = !DILocation(line: 50, column: 7, scope: !1216)
!10539 = !DILocation(line: 50, column: 32, scope: !1216)
!10540 = !DILocation(line: 50, column: 6, scope: !1216)
!10541 = !DILocation(line: 50, column: 43, scope: !1216)
!10542 = !DILocation(line: 51, column: 12, scope: !1216)
!10543 = !DILocation(line: 51, column: 9, scope: !1216)
!10544 = !DILocation(line: 52, column: 75, scope: !1216)
!10545 = !DILocation(line: 52, column: 81, scope: !1216)
!10546 = !DILocation(line: 52, column: 79, scope: !1216)
!10547 = !DILocation(line: 52, column: 86, scope: !1216)
!10548 = !DILocation(line: 52, column: 96, scope: !1216)
!10549 = !DILocation(line: 52, column: 94, scope: !1216)
!10550 = !DILocation(line: 52, column: 45, scope: !1216)
!10551 = !DILocation(line: 52, column: 25, scope: !1216)
!10552 = !DILocation(line: 52, column: 7, scope: !1216)
!10553 = !DILocation(line: 52, column: 32, scope: !1216)
!10554 = !DILocation(line: 52, column: 6, scope: !1216)
!10555 = !DILocation(line: 52, column: 43, scope: !1216)
!10556 = !DILocation(line: 54, column: 9, scope: !1238)
!10557 = !DILocation(line: 54, column: 9, scope: !1216)
!10558 = !DILocation(line: 55, column: 9, scope: !1237)
!10559 = !DILocation(line: 55, column: 14, scope: !10560)
!10560 = !DILexicalBlockFile(scope: !1236, file: !1217, discriminator: 1)
!10561 = !DILocation(line: 55, column: 24, scope: !1236)
!10562 = !DILocation(line: 55, column: 54, scope: !1236)
!10563 = !DILocation(line: 55, column: 68, scope: !10564)
!10564 = distinct !DILexicalBlock(scope: !1236, file: !1217, line: 55, column: 65)
!10565 = !DILocation(line: 55, column: 85, scope: !10564)
!10566 = !DILocation(line: 55, column: 65, scope: !10564)
!10567 = !DILocation(line: 55, column: 95, scope: !10564)
!10568 = !DILocation(line: 55, column: 65, scope: !1236)
!10569 = !DILocation(line: 55, column: 65, scope: !10570)
!10570 = !DILexicalBlockFile(scope: !1236, file: !1217, discriminator: 2)
!10571 = !DILocation(line: 55, column: 126, scope: !10572)
!10572 = !DILexicalBlockFile(scope: !10564, file: !1217, discriminator: 3)
!10573 = !DILocation(line: 55, column: 144, scope: !10564)
!10574 = !DILocation(line: 55, column: 154, scope: !10564)
!10575 = !DILocation(line: 55, column: 179, scope: !10564)
!10576 = !DILocation(line: 55, column: 110, scope: !10564)
!10577 = !DILocation(line: 55, column: 198, scope: !10578)
!10578 = !DILexicalBlockFile(scope: !1237, file: !1217, discriminator: 4)
!10579 = !DILocation(line: 55, column: 198, scope: !1236)
!10580 = !DILocation(line: 55, column: 198, scope: !10581)
!10581 = !DILexicalBlockFile(scope: !1236, file: !1217, discriminator: 5)
!10582 = !DILocation(line: 56, column: 9, scope: !1237)
!10583 = !DILocation(line: 59, column: 12, scope: !1216)
!10584 = !DILocation(line: 59, column: 5, scope: !1216)
!10585 = !DILocation(line: 60, column: 1, scope: !1216)
!10586 = !DILocation(line: 1986, column: 28, scope: !1265)
!10587 = !DILocation(line: 1987, column: 21, scope: !1265)
!10588 = !DILocation(line: 1987, column: 40, scope: !1265)
!10589 = !DILocation(line: 1988, column: 21, scope: !1265)
!10590 = !DILocation(line: 1988, column: 38, scope: !1265)
!10591 = !DILocation(line: 1989, column: 20, scope: !1265)
!10592 = !DILocation(line: 1991, column: 9, scope: !10593)
!10593 = distinct !DILexicalBlock(scope: !1265, file: !458, line: 1991, column: 9)
!10594 = !DILocation(line: 1991, column: 18, scope: !10593)
!10595 = !DILocation(line: 1991, column: 9, scope: !1265)
!10596 = !DILocation(line: 1992, column: 18, scope: !10597)
!10597 = distinct !DILexicalBlock(scope: !10593, file: !458, line: 1991, column: 23)
!10598 = !DILocation(line: 1993, column: 5, scope: !10597)
!10599 = !DILocation(line: 1993, column: 16, scope: !10600)
!10600 = distinct !DILexicalBlock(scope: !10593, file: !458, line: 1993, column: 16)
!10601 = !DILocation(line: 1993, column: 25, scope: !10600)
!10602 = !DILocation(line: 1993, column: 30, scope: !10600)
!10603 = !DILocation(line: 1993, column: 65, scope: !10604)
!10604 = !DILexicalBlockFile(scope: !10600, file: !458, discriminator: 1)
!10605 = !DILocation(line: 1993, column: 50, scope: !10600)
!10606 = !DILocation(line: 1993, column: 73, scope: !10600)
!10607 = !DILocation(line: 1993, column: 83, scope: !10600)
!10608 = !DILocation(line: 1993, column: 16, scope: !10593)
!10609 = !DILocation(line: 1995, column: 28, scope: !10610)
!10610 = distinct !DILexicalBlock(scope: !10600, file: !458, line: 1993, column: 89)
!10611 = !DILocation(line: 1995, column: 16, scope: !10610)
!10612 = !DILocation(line: 1995, column: 9, scope: !10610)
!10613 = !DILocation(line: 1998, column: 9, scope: !10614)
!10614 = distinct !DILexicalBlock(scope: !1265, file: !458, line: 1998, column: 9)
!10615 = !DILocation(line: 1998, column: 18, scope: !10614)
!10616 = !DILocation(line: 1998, column: 23, scope: !10614)
!10617 = !DILocation(line: 1999, column: 10, scope: !10614)
!10618 = !DILocation(line: 1999, column: 19, scope: !10614)
!10619 = !DILocation(line: 1999, column: 24, scope: !10614)
!10620 = !DILocation(line: 1999, column: 27, scope: !10621)
!10621 = !DILexicalBlockFile(scope: !10614, file: !458, discriminator: 1)
!10622 = !DILocation(line: 1999, column: 34, scope: !10614)
!10623 = !DILocation(line: 1998, column: 9, scope: !1265)
!10624 = !DILocation(line: 2001, column: 28, scope: !10625)
!10625 = distinct !DILexicalBlock(scope: !10614, file: !458, line: 1999, column: 41)
!10626 = !DILocation(line: 2001, column: 16, scope: !10625)
!10627 = !DILocation(line: 2001, column: 9, scope: !10625)
!10628 = !DILocation(line: 2006, column: 9, scope: !10629)
!10629 = distinct !DILexicalBlock(scope: !1265, file: !458, line: 2006, column: 9)
!10630 = !DILocation(line: 2006, column: 18, scope: !10629)
!10631 = !DILocation(line: 2006, column: 9, scope: !1265)
!10632 = !DILocation(line: 2010, column: 35, scope: !10633)
!10633 = distinct !DILexicalBlock(scope: !10629, file: !458, line: 2006, column: 24)
!10634 = !DILocation(line: 2010, column: 41, scope: !10633)
!10635 = !DILocation(line: 2010, column: 47, scope: !10633)
!10636 = !DILocation(line: 2010, column: 55, scope: !10633)
!10637 = !DILocation(line: 2010, column: 16, scope: !10633)
!10638 = !DILocation(line: 2010, column: 9, scope: !10633)
!10639 = !DILocation(line: 2016, column: 41, scope: !10640)
!10640 = distinct !DILexicalBlock(scope: !1265, file: !458, line: 2016, column: 9)
!10641 = !DILocation(line: 2016, column: 26, scope: !10640)
!10642 = !DILocation(line: 2016, column: 49, scope: !10640)
!10643 = !DILocation(line: 2016, column: 59, scope: !10640)
!10644 = !DILocation(line: 2016, column: 9, scope: !1265)
!10645 = !DILocation(line: 2017, column: 28, scope: !10646)
!10646 = distinct !DILexicalBlock(scope: !10640, file: !458, line: 2016, column: 65)
!10647 = !DILocation(line: 2017, column: 16, scope: !10646)
!10648 = !DILocation(line: 2017, column: 9, scope: !10646)
!10649 = !DILocation(line: 2020, column: 9, scope: !10650)
!10650 = distinct !DILexicalBlock(scope: !1265, file: !458, line: 2020, column: 9)
!10651 = !DILocation(line: 2020, column: 16, scope: !10650)
!10652 = !DILocation(line: 2020, column: 9, scope: !1265)
!10653 = !DILocation(line: 2022, column: 13, scope: !10654)
!10654 = distinct !DILexicalBlock(scope: !10655, file: !458, line: 2022, column: 13)
!10655 = distinct !DILexicalBlock(scope: !10650, file: !458, line: 2020, column: 22)
!10656 = !DILocation(line: 2022, column: 22, scope: !10654)
!10657 = !DILocation(line: 2022, column: 13, scope: !10655)
!10658 = !DILocation(line: 2024, column: 21, scope: !10659)
!10659 = distinct !DILexicalBlock(scope: !10654, file: !458, line: 2022, column: 28)
!10660 = !DILocation(line: 2024, column: 27, scope: !10659)
!10661 = !DILocation(line: 2024, column: 38, scope: !10659)
!10662 = !DILocation(line: 2023, column: 20, scope: !10659)
!10663 = !DILocation(line: 2023, column: 13, scope: !10659)
!10664 = !DILocation(line: 2026, column: 45, scope: !10665)
!10665 = distinct !DILexicalBlock(scope: !10654, file: !458, line: 2025, column: 16)
!10666 = !DILocation(line: 2026, column: 51, scope: !10665)
!10667 = !DILocation(line: 2026, column: 59, scope: !10665)
!10668 = !DILocation(line: 2026, column: 69, scope: !10665)
!10669 = !DILocation(line: 2026, column: 20, scope: !10665)
!10670 = !DILocation(line: 2026, column: 13, scope: !10665)
!10671 = !DILocation(line: 2032, column: 9, scope: !10672)
!10672 = distinct !DILexicalBlock(scope: !1265, file: !458, line: 2032, column: 9)
!10673 = !DILocation(line: 2032, column: 21, scope: !10672)
!10674 = !DILocation(line: 2032, column: 18, scope: !10672)
!10675 = !DILocation(line: 2032, column: 9, scope: !1265)
!10676 = !DILocation(line: 2033, column: 13, scope: !10677)
!10677 = distinct !DILexicalBlock(scope: !10678, file: !458, line: 2033, column: 13)
!10678 = distinct !DILexicalBlock(scope: !10672, file: !458, line: 2032, column: 29)
!10679 = !DILocation(line: 2033, column: 22, scope: !10677)
!10680 = !DILocation(line: 2033, column: 13, scope: !10678)
!10681 = !DILocation(line: 2035, column: 21, scope: !10682)
!10682 = distinct !DILexicalBlock(scope: !10677, file: !458, line: 2033, column: 28)
!10683 = !DILocation(line: 2036, column: 21, scope: !10682)
!10684 = !DILocation(line: 2037, column: 21, scope: !10682)
!10685 = !DILocation(line: 2038, column: 21, scope: !10682)
!10686 = !DILocation(line: 2034, column: 20, scope: !10682)
!10687 = !DILocation(line: 2034, column: 13, scope: !10682)
!10688 = !DILocation(line: 2041, column: 17, scope: !10689)
!10689 = distinct !DILexicalBlock(scope: !10677, file: !458, line: 2039, column: 16)
!10690 = !DILocation(line: 2041, column: 23, scope: !10689)
!10691 = !DILocation(line: 2041, column: 31, scope: !10689)
!10692 = !DILocation(line: 2041, column: 41, scope: !10689)
!10693 = !DILocation(line: 2041, column: 47, scope: !10689)
!10694 = !DILocation(line: 2041, column: 55, scope: !10689)
!10695 = !DILocation(line: 2040, column: 20, scope: !10689)
!10696 = !DILocation(line: 2040, column: 13, scope: !10689)
!10697 = !DILocation(line: 2046, column: 9, scope: !10698)
!10698 = distinct !DILexicalBlock(scope: !1265, file: !458, line: 2046, column: 9)
!10699 = !DILocation(line: 2046, column: 18, scope: !10698)
!10700 = !DILocation(line: 2046, column: 9, scope: !1265)
!10701 = !DILocation(line: 2047, column: 41, scope: !10702)
!10702 = distinct !DILexicalBlock(scope: !10698, file: !458, line: 2046, column: 24)
!10703 = !DILocation(line: 2047, column: 47, scope: !10702)
!10704 = !DILocation(line: 2048, column: 41, scope: !10702)
!10705 = !DILocation(line: 2048, column: 47, scope: !10702)
!10706 = !DILocation(line: 2048, column: 55, scope: !10702)
!10707 = !DILocation(line: 2047, column: 16, scope: !10702)
!10708 = !DILocation(line: 2047, column: 9, scope: !10702)
!10709 = !DILocation(line: 2051, column: 34, scope: !10710)
!10710 = distinct !DILexicalBlock(scope: !10698, file: !458, line: 2049, column: 12)
!10711 = !DILocation(line: 2051, column: 40, scope: !10710)
!10712 = !DILocation(line: 2051, column: 48, scope: !10710)
!10713 = !DILocation(line: 2051, column: 58, scope: !10710)
!10714 = !DILocation(line: 2051, column: 64, scope: !10710)
!10715 = !DILocation(line: 2051, column: 72, scope: !10710)
!10716 = !DILocation(line: 2051, column: 16, scope: !10710)
!10717 = !DILocation(line: 2051, column: 9, scope: !10710)
!10718 = !DILocation(line: 2053, column: 1, scope: !1265)
!10719 = !DILocation(line: 1577, column: 32, scope: !1275)
!10720 = !DILocation(line: 1581, column: 45, scope: !1275)
!10721 = !DILocation(line: 1581, column: 30, scope: !1275)
!10722 = !DILocation(line: 1581, column: 53, scope: !1275)
!10723 = !DILocation(line: 1581, column: 28, scope: !1275)
!10724 = !DILocation(line: 1581, column: 87, scope: !10725)
!10725 = !DILexicalBlockFile(scope: !1275, file: !458, discriminator: 1)
!10726 = !DILocation(line: 1581, column: 95, scope: !1275)
!10727 = !DILocation(line: 1581, column: 28, scope: !10728)
!10728 = !DILexicalBlockFile(scope: !1275, file: !458, discriminator: 2)
!10729 = !DILocation(line: 1582, column: 45, scope: !1275)
!10730 = !DILocation(line: 1582, column: 30, scope: !1275)
!10731 = !DILocation(line: 1582, column: 53, scope: !1275)
!10732 = !DILocation(line: 1580, column: 33, scope: !1275)
!10733 = !DILocation(line: 1580, column: 12, scope: !1275)
!10734 = !DILocation(line: 1580, column: 5, scope: !1275)
!10735 = !DILocation(line: 1606, column: 39, scope: !1280)
!10736 = !DILocation(line: 1607, column: 32, scope: !1280)
!10737 = !DILocation(line: 1607, column: 49, scope: !1280)
!10738 = !DILocation(line: 1608, column: 31, scope: !1280)
!10739 = !DILocation(line: 1610, column: 5, scope: !1280)
!10740 = !DILocation(line: 1610, column: 11, scope: !1280)
!10741 = !DILocation(line: 1610, column: 20, scope: !1280)
!10742 = !DILocation(line: 1611, column: 5, scope: !1280)
!10743 = !DILocation(line: 1611, column: 16, scope: !1280)
!10744 = !DILocation(line: 1611, column: 26, scope: !1280)
!10745 = !DILocation(line: 1612, column: 5, scope: !1280)
!10746 = !DILocation(line: 1612, column: 16, scope: !1280)
!10747 = !DILocation(line: 1612, column: 23, scope: !1280)
!10748 = !DILocation(line: 1613, column: 5, scope: !1280)
!10749 = !DILocation(line: 1613, column: 24, scope: !1280)
!10750 = !DILocation(line: 1615, column: 48, scope: !1280)
!10751 = !DILocation(line: 1615, column: 33, scope: !1280)
!10752 = !DILocation(line: 1615, column: 56, scope: !1280)
!10753 = !DILocation(line: 1615, column: 14, scope: !1280)
!10754 = !DILocation(line: 1619, column: 9, scope: !10755)
!10755 = distinct !DILexicalBlock(scope: !1280, file: !458, line: 1619, column: 9)
!10756 = !DILocation(line: 1619, column: 21, scope: !10755)
!10757 = !DILocation(line: 1619, column: 18, scope: !10755)
!10758 = !DILocation(line: 1619, column: 9, scope: !1280)
!10759 = !DILocation(line: 1620, column: 17, scope: !10755)
!10760 = !DILocation(line: 1620, column: 15, scope: !10755)
!10761 = !DILocation(line: 1620, column: 9, scope: !10755)
!10762 = !DILocation(line: 1623, column: 17, scope: !10755)
!10763 = !DILocation(line: 1623, column: 26, scope: !10755)
!10764 = !DILocation(line: 1623, column: 15, scope: !10755)
!10765 = !DILocation(line: 1628, column: 9, scope: !10766)
!10766 = distinct !DILexicalBlock(scope: !1280, file: !458, line: 1628, column: 9)
!10767 = !DILocation(line: 1628, column: 53, scope: !10766)
!10768 = !DILocation(line: 1628, column: 51, scope: !10766)
!10769 = !DILocation(line: 1628, column: 65, scope: !10766)
!10770 = !DILocation(line: 1628, column: 63, scope: !10766)
!10771 = !DILocation(line: 1628, column: 16, scope: !10766)
!10772 = !DILocation(line: 1628, column: 9, scope: !1280)
!10773 = !DILocation(line: 1629, column: 25, scope: !10774)
!10774 = distinct !DILexicalBlock(scope: !10766, file: !458, line: 1628, column: 72)
!10775 = !DILocation(line: 1629, column: 9, scope: !10774)
!10776 = !DILocation(line: 1631, column: 9, scope: !10774)
!10777 = !DILocation(line: 1633, column: 18, scope: !1280)
!10778 = !DILocation(line: 1633, column: 26, scope: !1280)
!10779 = !DILocation(line: 1633, column: 24, scope: !1280)
!10780 = !DILocation(line: 1633, column: 35, scope: !1280)
!10781 = !DILocation(line: 1633, column: 33, scope: !1280)
!10782 = !DILocation(line: 1633, column: 16, scope: !1280)
!10783 = !DILocation(line: 1636, column: 64, scope: !10784)
!10784 = distinct !DILexicalBlock(scope: !1280, file: !458, line: 1635, column: 9)
!10785 = !DILocation(line: 1636, column: 22, scope: !10784)
!10786 = !DILocation(line: 1635, column: 21, scope: !10784)
!10787 = !DILocation(line: 1635, column: 19, scope: !10784)
!10788 = !DILocation(line: 1635, column: 9, scope: !1280)
!10789 = !DILocation(line: 1637, column: 9, scope: !10784)
!10790 = !DILocation(line: 1639, column: 46, scope: !1280)
!10791 = !DILocation(line: 1639, column: 31, scope: !1280)
!10792 = !DILocation(line: 1639, column: 54, scope: !1280)
!10793 = !DILocation(line: 1639, column: 29, scope: !1280)
!10794 = !DILocation(line: 1639, column: 88, scope: !10795)
!10795 = !DILexicalBlockFile(scope: !1280, file: !458, discriminator: 1)
!10796 = !DILocation(line: 1639, column: 96, scope: !1280)
!10797 = !DILocation(line: 1639, column: 29, scope: !10798)
!10798 = !DILexicalBlockFile(scope: !1280, file: !458, discriminator: 2)
!10799 = !DILocation(line: 1639, column: 12, scope: !10800)
!10800 = !DILexicalBlockFile(scope: !10801, file: !458, discriminator: 4)
!10801 = !DILexicalBlockFile(scope: !1280, file: !458, discriminator: 3)
!10802 = !DILocation(line: 1640, column: 48, scope: !1280)
!10803 = !DILocation(line: 1640, column: 33, scope: !1280)
!10804 = !DILocation(line: 1640, column: 58, scope: !1280)
!10805 = !DILocation(line: 1640, column: 31, scope: !1280)
!10806 = !DILocation(line: 1640, column: 92, scope: !10795)
!10807 = !DILocation(line: 1640, column: 102, scope: !1280)
!10808 = !DILocation(line: 1640, column: 31, scope: !10798)
!10809 = !DILocation(line: 1640, column: 14, scope: !10800)
!10810 = !DILocation(line: 1645, column: 12, scope: !1280)
!10811 = !DILocation(line: 1645, column: 22, scope: !1280)
!10812 = !DILocation(line: 1645, column: 28, scope: !1280)
!10813 = !DILocation(line: 1645, column: 5, scope: !1280)
!10814 = !DILocation(line: 1646, column: 17, scope: !1280)
!10815 = !DILocation(line: 1646, column: 14, scope: !1280)
!10816 = !DILocation(line: 1647, column: 11, scope: !1280)
!10817 = !DILocation(line: 1649, column: 11, scope: !10818)
!10818 = distinct !DILexicalBlock(scope: !1280, file: !458, line: 1649, column: 5)
!10819 = !DILocation(line: 1649, column: 10, scope: !10818)
!10820 = !DILocation(line: 1649, column: 15, scope: !10821)
!10821 = !DILexicalBlockFile(scope: !10822, file: !458, discriminator: 2)
!10822 = !DILexicalBlockFile(scope: !10823, file: !458, discriminator: 1)
!10823 = distinct !DILexicalBlock(scope: !10818, file: !458, line: 1649, column: 5)
!10824 = !DILocation(line: 1649, column: 17, scope: !10823)
!10825 = !DILocation(line: 1649, column: 16, scope: !10823)
!10826 = !DILocation(line: 1649, column: 5, scope: !10818)
!10827 = !DILocation(line: 1650, column: 30, scope: !10828)
!10828 = distinct !DILexicalBlock(scope: !10823, file: !458, line: 1649, column: 29)
!10829 = !DILocation(line: 1650, column: 23, scope: !10828)
!10830 = !DILocation(line: 1650, column: 18, scope: !10828)
!10831 = !DILocation(line: 1650, column: 21, scope: !10828)
!10832 = !DILocation(line: 1651, column: 16, scope: !10828)
!10833 = !DILocation(line: 1651, column: 26, scope: !10828)
!10834 = !DILocation(line: 1651, column: 32, scope: !10828)
!10835 = !DILocation(line: 1651, column: 9, scope: !10828)
!10836 = !DILocation(line: 1652, column: 21, scope: !10828)
!10837 = !DILocation(line: 1652, column: 18, scope: !10828)
!10838 = !DILocation(line: 1653, column: 5, scope: !10828)
!10839 = !DILocation(line: 1649, column: 25, scope: !10823)
!10840 = !DILocation(line: 1649, column: 5, scope: !10823)
!10841 = !DILocation(line: 1656, column: 12, scope: !1280)
!10842 = !DILocation(line: 1656, column: 22, scope: !1280)
!10843 = !DILocation(line: 1656, column: 30, scope: !1280)
!10844 = !DILocation(line: 1656, column: 39, scope: !1280)
!10845 = !DILocation(line: 1656, column: 38, scope: !1280)
!10846 = !DILocation(line: 1656, column: 5, scope: !1280)
!10847 = !DILocation(line: 1658, column: 12, scope: !1280)
!10848 = !DILocation(line: 1658, column: 5, scope: !1280)
!10849 = !DILocation(line: 1659, column: 1, scope: !1280)
!10850 = !DILocation(line: 1664, column: 52, scope: !1295)
!10851 = !DILocation(line: 1665, column: 38, scope: !1295)
!10852 = !DILocation(line: 1665, column: 57, scope: !1295)
!10853 = !DILocation(line: 1667, column: 5, scope: !1295)
!10854 = !DILocation(line: 1667, column: 11, scope: !1295)
!10855 = !DILocation(line: 1667, column: 20, scope: !1295)
!10856 = !DILocation(line: 1668, column: 5, scope: !1295)
!10857 = !DILocation(line: 1668, column: 11, scope: !1295)
!10858 = !DILocation(line: 1668, column: 19, scope: !1295)
!10859 = !DILocation(line: 1668, column: 26, scope: !1295)
!10860 = !DILocation(line: 1669, column: 5, scope: !1295)
!10861 = !DILocation(line: 1669, column: 16, scope: !1295)
!10862 = !DILocation(line: 1669, column: 26, scope: !1295)
!10863 = !DILocation(line: 1670, column: 5, scope: !1295)
!10864 = !DILocation(line: 1670, column: 16, scope: !1295)
!10865 = !DILocation(line: 1671, column: 5, scope: !1295)
!10866 = !DILocation(line: 1671, column: 24, scope: !1295)
!10867 = !DILocation(line: 1673, column: 48, scope: !1295)
!10868 = !DILocation(line: 1673, column: 33, scope: !1295)
!10869 = !DILocation(line: 1673, column: 56, scope: !1295)
!10870 = !DILocation(line: 1673, column: 14, scope: !1295)
!10871 = !DILocation(line: 1674, column: 46, scope: !1295)
!10872 = !DILocation(line: 1674, column: 31, scope: !1295)
!10873 = !DILocation(line: 1674, column: 54, scope: !1295)
!10874 = !DILocation(line: 1674, column: 29, scope: !1295)
!10875 = !DILocation(line: 1674, column: 88, scope: !10876)
!10876 = !DILexicalBlockFile(scope: !1295, file: !458, discriminator: 1)
!10877 = !DILocation(line: 1674, column: 96, scope: !1295)
!10878 = !DILocation(line: 1674, column: 29, scope: !10879)
!10879 = !DILexicalBlockFile(scope: !1295, file: !458, discriminator: 2)
!10880 = !DILocation(line: 1674, column: 12, scope: !10881)
!10881 = !DILexicalBlockFile(scope: !10882, file: !458, discriminator: 4)
!10882 = !DILexicalBlockFile(scope: !1295, file: !458, discriminator: 3)
!10883 = !DILocation(line: 1676, column: 23, scope: !1295)
!10884 = !DILocation(line: 1676, column: 31, scope: !1295)
!10885 = !DILocation(line: 1676, column: 41, scope: !1295)
!10886 = !DILocation(line: 1676, column: 49, scope: !1295)
!10887 = !DILocation(line: 1676, column: 13, scope: !1295)
!10888 = !DILocation(line: 1676, column: 11, scope: !1295)
!10889 = !DILocation(line: 1677, column: 9, scope: !10890)
!10890 = distinct !DILexicalBlock(scope: !1295, file: !458, line: 1677, column: 9)
!10891 = !DILocation(line: 1677, column: 15, scope: !10890)
!10892 = !DILocation(line: 1677, column: 9, scope: !1295)
!10893 = !DILocation(line: 1678, column: 28, scope: !10894)
!10894 = distinct !DILexicalBlock(scope: !10890, file: !458, line: 1677, column: 21)
!10895 = !DILocation(line: 1678, column: 16, scope: !10894)
!10896 = !DILocation(line: 1678, column: 9, scope: !10894)
!10897 = !DILocation(line: 1681, column: 18, scope: !1295)
!10898 = !DILocation(line: 1681, column: 29, scope: !1295)
!10899 = !DILocation(line: 1681, column: 27, scope: !1295)
!10900 = !DILocation(line: 1681, column: 16, scope: !1295)
!10901 = !DILocation(line: 1685, column: 63, scope: !10902)
!10902 = distinct !DILexicalBlock(scope: !1295, file: !458, line: 1684, column: 10)
!10903 = !DILocation(line: 1685, column: 21, scope: !10902)
!10904 = !DILocation(line: 1684, column: 20, scope: !10902)
!10905 = !DILocation(line: 1684, column: 18, scope: !10902)
!10906 = !DILocation(line: 1685, column: 76, scope: !10902)
!10907 = !DILocation(line: 1684, column: 10, scope: !1295)
!10908 = !DILocation(line: 1686, column: 9, scope: !10902)
!10909 = !DILocation(line: 1687, column: 48, scope: !1295)
!10910 = !DILocation(line: 1687, column: 33, scope: !1295)
!10911 = !DILocation(line: 1687, column: 58, scope: !1295)
!10912 = !DILocation(line: 1687, column: 31, scope: !1295)
!10913 = !DILocation(line: 1687, column: 92, scope: !10876)
!10914 = !DILocation(line: 1687, column: 102, scope: !1295)
!10915 = !DILocation(line: 1687, column: 31, scope: !10879)
!10916 = !DILocation(line: 1687, column: 14, scope: !10881)
!10917 = !DILocation(line: 1689, column: 13, scope: !1295)
!10918 = !DILocation(line: 1689, column: 11, scope: !1295)
!10919 = !DILocation(line: 1690, column: 11, scope: !1295)
!10920 = !DILocation(line: 1690, column: 20, scope: !1295)
!10921 = !DILocation(line: 1690, column: 18, scope: !1295)
!10922 = !DILocation(line: 1690, column: 9, scope: !1295)
!10923 = !DILocation(line: 1691, column: 5, scope: !1295)
!10924 = !DILocation(line: 1691, column: 17, scope: !10925)
!10925 = !DILexicalBlockFile(scope: !10876, file: !458, discriminator: 2)
!10926 = !DILocation(line: 1691, column: 20, scope: !1295)
!10927 = !DILocation(line: 1692, column: 47, scope: !10928)
!10928 = distinct !DILexicalBlock(scope: !1295, file: !458, line: 1691, column: 25)
!10929 = !DILocation(line: 1692, column: 55, scope: !10928)
!10930 = !DILocation(line: 1692, column: 63, scope: !10928)
!10931 = !DILocation(line: 1692, column: 67, scope: !10928)
!10932 = !DILocation(line: 1692, column: 66, scope: !10928)
!10933 = !DILocation(line: 1692, column: 25, scope: !10928)
!10934 = !DILocation(line: 1692, column: 14, scope: !10928)
!10935 = !DILocation(line: 1693, column: 13, scope: !10936)
!10936 = distinct !DILexicalBlock(scope: !10928, file: !458, line: 1693, column: 13)
!10937 = !DILocation(line: 1693, column: 18, scope: !10936)
!10938 = !DILocation(line: 1693, column: 13, scope: !10928)
!10939 = !DILocation(line: 1694, column: 13, scope: !10936)
!10940 = !DILocation(line: 1695, column: 16, scope: !10928)
!10941 = !DILocation(line: 1695, column: 26, scope: !10928)
!10942 = !DILocation(line: 1695, column: 33, scope: !10928)
!10943 = !DILocation(line: 1695, column: 38, scope: !10928)
!10944 = !DILocation(line: 1695, column: 37, scope: !10928)
!10945 = !DILocation(line: 1695, column: 9, scope: !10928)
!10946 = !DILocation(line: 1696, column: 22, scope: !10928)
!10947 = !DILocation(line: 1696, column: 27, scope: !10928)
!10948 = !DILocation(line: 1696, column: 26, scope: !10928)
!10949 = !DILocation(line: 1696, column: 18, scope: !10928)
!10950 = !DILocation(line: 1697, column: 17, scope: !10928)
!10951 = !DILocation(line: 1697, column: 21, scope: !10928)
!10952 = !DILocation(line: 1697, column: 15, scope: !10928)
!10953 = !DILocation(line: 1699, column: 12, scope: !1295)
!10954 = !DILocation(line: 1699, column: 22, scope: !1295)
!10955 = !DILocation(line: 1699, column: 29, scope: !1295)
!10956 = !DILocation(line: 1699, column: 33, scope: !1295)
!10957 = !DILocation(line: 1699, column: 32, scope: !1295)
!10958 = !DILocation(line: 1699, column: 5, scope: !1295)
!10959 = !DILocation(line: 1701, column: 12, scope: !1295)
!10960 = !DILocation(line: 1701, column: 5, scope: !1295)
!10961 = !DILocation(line: 1702, column: 1, scope: !1295)
!10962 = !DILocation(line: 1707, column: 45, scope: !1322)
!10963 = !DILocation(line: 1708, column: 38, scope: !1322)
!10964 = !DILocation(line: 1708, column: 57, scope: !1322)
!10965 = !DILocation(line: 1709, column: 37, scope: !1322)
!10966 = !DILocation(line: 1711, column: 5, scope: !1322)
!10967 = !DILocation(line: 1711, column: 11, scope: !1322)
!10968 = !DILocation(line: 1711, column: 20, scope: !1322)
!10969 = !DILocation(line: 1712, column: 5, scope: !1322)
!10970 = !DILocation(line: 1712, column: 11, scope: !1322)
!10971 = !DILocation(line: 1712, column: 19, scope: !1322)
!10972 = !DILocation(line: 1712, column: 26, scope: !1322)
!10973 = !DILocation(line: 1713, column: 5, scope: !1322)
!10974 = !DILocation(line: 1713, column: 16, scope: !1322)
!10975 = !DILocation(line: 1713, column: 26, scope: !1322)
!10976 = !DILocation(line: 1714, column: 5, scope: !1322)
!10977 = !DILocation(line: 1714, column: 16, scope: !1322)
!10978 = !DILocation(line: 1714, column: 23, scope: !1322)
!10979 = !DILocation(line: 1715, column: 5, scope: !1322)
!10980 = !DILocation(line: 1715, column: 24, scope: !1322)
!10981 = !DILocation(line: 1717, column: 48, scope: !1322)
!10982 = !DILocation(line: 1717, column: 33, scope: !1322)
!10983 = !DILocation(line: 1717, column: 56, scope: !1322)
!10984 = !DILocation(line: 1717, column: 14, scope: !1322)
!10985 = !DILocation(line: 1718, column: 46, scope: !1322)
!10986 = !DILocation(line: 1718, column: 31, scope: !1322)
!10987 = !DILocation(line: 1718, column: 54, scope: !1322)
!10988 = !DILocation(line: 1718, column: 29, scope: !1322)
!10989 = !DILocation(line: 1718, column: 88, scope: !10990)
!10990 = !DILexicalBlockFile(scope: !1322, file: !458, discriminator: 1)
!10991 = !DILocation(line: 1718, column: 96, scope: !1322)
!10992 = !DILocation(line: 1718, column: 29, scope: !10993)
!10993 = !DILexicalBlockFile(scope: !1322, file: !458, discriminator: 2)
!10994 = !DILocation(line: 1718, column: 12, scope: !10995)
!10995 = !DILexicalBlockFile(scope: !10996, file: !458, discriminator: 4)
!10996 = !DILexicalBlockFile(scope: !1322, file: !458, discriminator: 3)
!10997 = !DILocation(line: 1720, column: 29, scope: !1322)
!10998 = !DILocation(line: 1720, column: 37, scope: !1322)
!10999 = !DILocation(line: 1721, column: 29, scope: !1322)
!11000 = !DILocation(line: 1721, column: 37, scope: !1322)
!11001 = !DILocation(line: 1722, column: 29, scope: !1322)
!11002 = !DILocation(line: 1720, column: 13, scope: !1322)
!11003 = !DILocation(line: 1720, column: 11, scope: !1322)
!11004 = !DILocation(line: 1724, column: 9, scope: !11005)
!11005 = distinct !DILexicalBlock(scope: !1322, file: !458, line: 1724, column: 9)
!11006 = !DILocation(line: 1724, column: 15, scope: !11005)
!11007 = !DILocation(line: 1724, column: 9, scope: !1322)
!11008 = !DILocation(line: 1726, column: 28, scope: !11009)
!11009 = distinct !DILexicalBlock(scope: !11005, file: !458, line: 1724, column: 21)
!11010 = !DILocation(line: 1726, column: 16, scope: !11009)
!11011 = !DILocation(line: 1726, column: 9, scope: !11009)
!11012 = !DILocation(line: 1729, column: 18, scope: !1322)
!11013 = !DILocation(line: 1729, column: 30, scope: !1322)
!11014 = !DILocation(line: 1729, column: 38, scope: !1322)
!11015 = !DILocation(line: 1729, column: 36, scope: !1322)
!11016 = !DILocation(line: 1729, column: 27, scope: !1322)
!11017 = !DILocation(line: 1729, column: 16, scope: !1322)
!11018 = !DILocation(line: 1733, column: 51, scope: !11019)
!11019 = distinct !DILexicalBlock(scope: !1322, file: !458, line: 1732, column: 10)
!11020 = !DILocation(line: 1733, column: 9, scope: !11019)
!11021 = !DILocation(line: 1732, column: 20, scope: !11019)
!11022 = !DILocation(line: 1732, column: 18, scope: !11019)
!11023 = !DILocation(line: 1733, column: 64, scope: !11019)
!11024 = !DILocation(line: 1732, column: 10, scope: !1322)
!11025 = !DILocation(line: 1734, column: 13, scope: !11019)
!11026 = !DILocation(line: 1736, column: 48, scope: !1322)
!11027 = !DILocation(line: 1736, column: 33, scope: !1322)
!11028 = !DILocation(line: 1736, column: 58, scope: !1322)
!11029 = !DILocation(line: 1736, column: 31, scope: !1322)
!11030 = !DILocation(line: 1736, column: 92, scope: !10990)
!11031 = !DILocation(line: 1736, column: 102, scope: !1322)
!11032 = !DILocation(line: 1736, column: 31, scope: !10993)
!11033 = !DILocation(line: 1736, column: 14, scope: !10995)
!11034 = !DILocation(line: 1738, column: 13, scope: !1322)
!11035 = !DILocation(line: 1738, column: 11, scope: !1322)
!11036 = !DILocation(line: 1739, column: 11, scope: !1322)
!11037 = !DILocation(line: 1739, column: 20, scope: !1322)
!11038 = !DILocation(line: 1739, column: 18, scope: !1322)
!11039 = !DILocation(line: 1739, column: 9, scope: !1322)
!11040 = !DILocation(line: 1740, column: 5, scope: !1322)
!11041 = !DILocation(line: 1740, column: 17, scope: !11042)
!11042 = !DILexicalBlockFile(scope: !10990, file: !458, discriminator: 2)
!11043 = !DILocation(line: 1740, column: 20, scope: !1322)
!11044 = !DILocation(line: 1741, column: 33, scope: !11045)
!11045 = distinct !DILexicalBlock(scope: !1322, file: !458, line: 1740, column: 25)
!11046 = !DILocation(line: 1741, column: 40, scope: !11045)
!11047 = !DILocation(line: 1741, column: 44, scope: !11045)
!11048 = !DILocation(line: 1741, column: 43, scope: !11045)
!11049 = !DILocation(line: 1742, column: 33, scope: !11045)
!11050 = !DILocation(line: 1742, column: 41, scope: !11045)
!11051 = !DILocation(line: 1741, column: 18, scope: !11045)
!11052 = !DILocation(line: 1741, column: 16, scope: !11045)
!11053 = !DILocation(line: 1744, column: 13, scope: !11054)
!11054 = distinct !DILexicalBlock(scope: !11045, file: !458, line: 1744, column: 13)
!11055 = !DILocation(line: 1744, column: 20, scope: !11054)
!11056 = !DILocation(line: 1744, column: 13, scope: !11045)
!11057 = !DILocation(line: 1745, column: 13, scope: !11054)
!11058 = !DILocation(line: 1746, column: 16, scope: !11045)
!11059 = !DILocation(line: 1746, column: 24, scope: !11045)
!11060 = !DILocation(line: 1746, column: 22, scope: !11045)
!11061 = !DILocation(line: 1746, column: 14, scope: !11045)
!11062 = !DILocation(line: 1748, column: 16, scope: !11045)
!11063 = !DILocation(line: 1748, column: 26, scope: !11045)
!11064 = !DILocation(line: 1748, column: 33, scope: !11045)
!11065 = !DILocation(line: 1748, column: 38, scope: !11045)
!11066 = !DILocation(line: 1748, column: 37, scope: !11045)
!11067 = !DILocation(line: 1748, column: 9, scope: !11045)
!11068 = !DILocation(line: 1750, column: 22, scope: !11045)
!11069 = !DILocation(line: 1750, column: 27, scope: !11045)
!11070 = !DILocation(line: 1750, column: 26, scope: !11045)
!11071 = !DILocation(line: 1750, column: 18, scope: !11045)
!11072 = !DILocation(line: 1751, column: 17, scope: !11045)
!11073 = !DILocation(line: 1751, column: 22, scope: !11045)
!11074 = !DILocation(line: 1751, column: 21, scope: !11045)
!11075 = !DILocation(line: 1751, column: 15, scope: !11045)
!11076 = !DILocation(line: 1753, column: 12, scope: !1322)
!11077 = !DILocation(line: 1753, column: 22, scope: !1322)
!11078 = !DILocation(line: 1753, column: 29, scope: !1322)
!11079 = !DILocation(line: 1753, column: 33, scope: !1322)
!11080 = !DILocation(line: 1753, column: 32, scope: !1322)
!11081 = !DILocation(line: 1753, column: 5, scope: !1322)
!11082 = !DILocation(line: 1754, column: 12, scope: !1322)
!11083 = !DILocation(line: 1754, column: 5, scope: !1322)
!11084 = !DILocation(line: 1755, column: 1, scope: !1322)
!11085 = !DILocation(line: 1759, column: 54, scope: !1338)
!11086 = !DILocation(line: 1760, column: 40, scope: !1338)
!11087 = !DILocation(line: 1760, column: 53, scope: !1338)
!11088 = !DILocation(line: 1761, column: 46, scope: !1338)
!11089 = !DILocation(line: 1763, column: 5, scope: !1338)
!11090 = !DILocation(line: 1763, column: 11, scope: !1338)
!11091 = !DILocation(line: 1763, column: 20, scope: !1338)
!11092 = !DILocation(line: 1763, column: 31, scope: !1338)
!11093 = !DILocation(line: 1763, column: 39, scope: !1338)
!11094 = !DILocation(line: 1763, column: 45, scope: !1338)
!11095 = !DILocation(line: 1764, column: 5, scope: !1338)
!11096 = !DILocation(line: 1764, column: 16, scope: !1338)
!11097 = !DILocation(line: 1765, column: 5, scope: !1338)
!11098 = !DILocation(line: 1765, column: 24, scope: !1338)
!11099 = !DILocation(line: 1768, column: 46, scope: !1338)
!11100 = !DILocation(line: 1768, column: 31, scope: !1338)
!11101 = !DILocation(line: 1768, column: 54, scope: !1338)
!11102 = !DILocation(line: 1768, column: 29, scope: !1338)
!11103 = !DILocation(line: 1768, column: 88, scope: !11104)
!11104 = !DILexicalBlockFile(scope: !1338, file: !458, discriminator: 1)
!11105 = !DILocation(line: 1768, column: 96, scope: !1338)
!11106 = !DILocation(line: 1768, column: 29, scope: !11107)
!11107 = !DILexicalBlockFile(scope: !1338, file: !458, discriminator: 2)
!11108 = !DILocation(line: 1768, column: 12, scope: !11109)
!11109 = !DILexicalBlockFile(scope: !11110, file: !458, discriminator: 4)
!11110 = !DILexicalBlockFile(scope: !1338, file: !458, discriminator: 3)
!11111 = !DILocation(line: 1769, column: 48, scope: !1338)
!11112 = !DILocation(line: 1769, column: 33, scope: !1338)
!11113 = !DILocation(line: 1769, column: 56, scope: !1338)
!11114 = !DILocation(line: 1769, column: 14, scope: !1338)
!11115 = !DILocation(line: 1771, column: 43, scope: !1338)
!11116 = !DILocation(line: 1771, column: 52, scope: !1338)
!11117 = !DILocation(line: 1771, column: 60, scope: !1338)
!11118 = !DILocation(line: 1771, column: 21, scope: !1338)
!11119 = !DILocation(line: 1771, column: 10, scope: !1338)
!11120 = !DILocation(line: 1773, column: 9, scope: !11121)
!11121 = distinct !DILexicalBlock(scope: !1338, file: !458, line: 1773, column: 9)
!11122 = !DILocation(line: 1773, column: 14, scope: !11121)
!11123 = !DILocation(line: 1773, column: 9, scope: !1338)
!11124 = !DILocation(line: 1775, column: 28, scope: !11125)
!11125 = distinct !DILexicalBlock(scope: !11121, file: !458, line: 1773, column: 29)
!11126 = !DILocation(line: 1775, column: 16, scope: !11125)
!11127 = !DILocation(line: 1775, column: 9, scope: !11125)
!11128 = !DILocation(line: 1779, column: 78, scope: !1338)
!11129 = !DILocation(line: 1779, column: 36, scope: !1338)
!11130 = !DILocation(line: 1779, column: 14, scope: !1338)
!11131 = !DILocation(line: 1779, column: 12, scope: !1338)
!11132 = !DILocation(line: 1780, column: 9, scope: !11133)
!11133 = distinct !DILexicalBlock(scope: !1338, file: !458, line: 1780, column: 9)
!11134 = !DILocation(line: 1780, column: 16, scope: !11133)
!11135 = !DILocation(line: 1780, column: 9, scope: !1338)
!11136 = !DILocation(line: 1781, column: 9, scope: !11133)
!11137 = !DILocation(line: 1782, column: 48, scope: !1338)
!11138 = !DILocation(line: 1782, column: 33, scope: !1338)
!11139 = !DILocation(line: 1782, column: 58, scope: !1338)
!11140 = !DILocation(line: 1782, column: 31, scope: !1338)
!11141 = !DILocation(line: 1782, column: 92, scope: !11104)
!11142 = !DILocation(line: 1782, column: 102, scope: !1338)
!11143 = !DILocation(line: 1782, column: 31, scope: !11107)
!11144 = !DILocation(line: 1782, column: 14, scope: !11109)
!11145 = !DILocation(line: 1783, column: 12, scope: !1338)
!11146 = !DILocation(line: 1783, column: 22, scope: !1338)
!11147 = !DILocation(line: 1783, column: 30, scope: !1338)
!11148 = !DILocation(line: 1783, column: 5, scope: !1338)
!11149 = !DILocation(line: 1786, column: 13, scope: !1338)
!11150 = !DILocation(line: 1786, column: 25, scope: !1338)
!11151 = !DILocation(line: 1786, column: 30, scope: !1338)
!11152 = !DILocation(line: 1786, column: 29, scope: !1338)
!11153 = !DILocation(line: 1786, column: 22, scope: !1338)
!11154 = !DILocation(line: 1786, column: 11, scope: !1338)
!11155 = !DILocation(line: 1787, column: 14, scope: !1338)
!11156 = !DILocation(line: 1787, column: 6, scope: !1338)
!11157 = !DILocation(line: 1787, column: 12, scope: !1338)
!11158 = !DILocation(line: 1788, column: 10, scope: !1338)
!11159 = !DILocation(line: 1789, column: 11, scope: !1338)
!11160 = !DILocation(line: 1789, column: 22, scope: !1338)
!11161 = !DILocation(line: 1789, column: 20, scope: !1338)
!11162 = !DILocation(line: 1789, column: 9, scope: !1338)
!11163 = !DILocation(line: 1791, column: 5, scope: !1338)
!11164 = !DILocation(line: 1791, column: 12, scope: !11165)
!11165 = !DILexicalBlockFile(scope: !11104, file: !458, discriminator: 2)
!11166 = !DILocation(line: 1791, column: 23, scope: !1338)
!11167 = !DILocation(line: 1792, column: 47, scope: !11168)
!11168 = distinct !DILexicalBlock(scope: !1338, file: !458, line: 1791, column: 28)
!11169 = !DILocation(line: 1792, column: 55, scope: !11168)
!11170 = !DILocation(line: 1792, column: 63, scope: !11168)
!11171 = !DILocation(line: 1792, column: 67, scope: !11168)
!11172 = !DILocation(line: 1792, column: 66, scope: !11168)
!11173 = !DILocation(line: 1792, column: 25, scope: !11168)
!11174 = !DILocation(line: 1792, column: 14, scope: !11168)
!11175 = !DILocation(line: 1793, column: 13, scope: !11176)
!11176 = distinct !DILexicalBlock(scope: !11168, file: !458, line: 1793, column: 13)
!11177 = !DILocation(line: 1793, column: 18, scope: !11176)
!11178 = !DILocation(line: 1793, column: 13, scope: !11168)
!11179 = !DILocation(line: 1794, column: 13, scope: !11176)
!11180 = !DILocation(line: 1795, column: 17, scope: !11168)
!11181 = !DILocation(line: 1795, column: 10, scope: !11168)
!11182 = !DILocation(line: 1795, column: 15, scope: !11168)
!11183 = !DILocation(line: 1796, column: 17, scope: !11168)
!11184 = !DILocation(line: 1796, column: 21, scope: !11168)
!11185 = !DILocation(line: 1796, column: 15, scope: !11168)
!11186 = !DILocation(line: 1799, column: 12, scope: !1338)
!11187 = !DILocation(line: 1799, column: 5, scope: !1338)
!11188 = !DILocation(line: 1800, column: 1, scope: !1338)
!11189 = !DILocation(line: 1804, column: 47, scope: !1353)
!11190 = !DILocation(line: 1805, column: 40, scope: !1353)
!11191 = !DILocation(line: 1805, column: 59, scope: !1353)
!11192 = !DILocation(line: 1806, column: 40, scope: !1353)
!11193 = !DILocation(line: 1806, column: 57, scope: !1353)
!11194 = !DILocation(line: 1807, column: 39, scope: !1353)
!11195 = !DILocation(line: 1809, column: 5, scope: !1353)
!11196 = !DILocation(line: 1809, column: 11, scope: !1353)
!11197 = !DILocation(line: 1809, column: 22, scope: !1353)
!11198 = !DILocation(line: 1809, column: 30, scope: !1353)
!11199 = !DILocation(line: 1810, column: 5, scope: !1353)
!11200 = !DILocation(line: 1810, column: 11, scope: !1353)
!11201 = !DILocation(line: 1811, column: 5, scope: !1353)
!11202 = !DILocation(line: 1811, column: 16, scope: !1353)
!11203 = !DILocation(line: 1811, column: 26, scope: !1353)
!11204 = !DILocation(line: 1812, column: 5, scope: !1353)
!11205 = !DILocation(line: 1812, column: 24, scope: !1353)
!11206 = !DILocation(line: 1816, column: 46, scope: !1353)
!11207 = !DILocation(line: 1816, column: 31, scope: !1353)
!11208 = !DILocation(line: 1816, column: 54, scope: !1353)
!11209 = !DILocation(line: 1816, column: 29, scope: !1353)
!11210 = !DILocation(line: 1816, column: 88, scope: !11211)
!11211 = !DILexicalBlockFile(scope: !1353, file: !458, discriminator: 1)
!11212 = !DILocation(line: 1816, column: 96, scope: !1353)
!11213 = !DILocation(line: 1816, column: 29, scope: !11214)
!11214 = !DILexicalBlockFile(scope: !1353, file: !458, discriminator: 2)
!11215 = !DILocation(line: 1816, column: 12, scope: !11216)
!11216 = !DILexicalBlockFile(scope: !11217, file: !458, discriminator: 4)
!11217 = !DILexicalBlockFile(scope: !1353, file: !458, discriminator: 3)
!11218 = !DILocation(line: 1817, column: 48, scope: !1353)
!11219 = !DILocation(line: 1817, column: 33, scope: !1353)
!11220 = !DILocation(line: 1817, column: 56, scope: !1353)
!11221 = !DILocation(line: 1817, column: 14, scope: !1353)
!11222 = !DILocation(line: 1819, column: 29, scope: !1353)
!11223 = !DILocation(line: 1819, column: 37, scope: !1353)
!11224 = !DILocation(line: 1820, column: 29, scope: !1353)
!11225 = !DILocation(line: 1820, column: 37, scope: !1353)
!11226 = !DILocation(line: 1819, column: 14, scope: !1353)
!11227 = !DILocation(line: 1819, column: 12, scope: !1353)
!11228 = !DILocation(line: 1822, column: 9, scope: !11229)
!11229 = distinct !DILexicalBlock(scope: !1353, file: !458, line: 1822, column: 9)
!11230 = !DILocation(line: 1822, column: 16, scope: !11229)
!11231 = !DILocation(line: 1822, column: 9, scope: !1353)
!11232 = !DILocation(line: 1824, column: 28, scope: !11233)
!11233 = distinct !DILexicalBlock(scope: !11229, file: !458, line: 1822, column: 23)
!11234 = !DILocation(line: 1824, column: 16, scope: !11233)
!11235 = !DILocation(line: 1824, column: 9, scope: !11233)
!11236 = !DILocation(line: 1828, column: 78, scope: !1353)
!11237 = !DILocation(line: 1828, column: 36, scope: !1353)
!11238 = !DILocation(line: 1828, column: 14, scope: !1353)
!11239 = !DILocation(line: 1828, column: 12, scope: !1353)
!11240 = !DILocation(line: 1829, column: 9, scope: !11241)
!11241 = distinct !DILexicalBlock(scope: !1353, file: !458, line: 1829, column: 9)
!11242 = !DILocation(line: 1829, column: 16, scope: !11241)
!11243 = !DILocation(line: 1829, column: 9, scope: !1353)
!11244 = !DILocation(line: 1830, column: 9, scope: !11241)
!11245 = !DILocation(line: 1831, column: 48, scope: !1353)
!11246 = !DILocation(line: 1831, column: 33, scope: !1353)
!11247 = !DILocation(line: 1831, column: 58, scope: !1353)
!11248 = !DILocation(line: 1831, column: 31, scope: !1353)
!11249 = !DILocation(line: 1831, column: 92, scope: !11211)
!11250 = !DILocation(line: 1831, column: 102, scope: !1353)
!11251 = !DILocation(line: 1831, column: 31, scope: !11214)
!11252 = !DILocation(line: 1831, column: 14, scope: !11216)
!11253 = !DILocation(line: 1832, column: 12, scope: !1353)
!11254 = !DILocation(line: 1832, column: 22, scope: !1353)
!11255 = !DILocation(line: 1832, column: 30, scope: !1353)
!11256 = !DILocation(line: 1832, column: 5, scope: !1353)
!11257 = !DILocation(line: 1835, column: 13, scope: !1353)
!11258 = !DILocation(line: 1835, column: 24, scope: !1353)
!11259 = !DILocation(line: 1835, column: 22, scope: !1353)
!11260 = !DILocation(line: 1835, column: 11, scope: !1353)
!11261 = !DILocation(line: 1836, column: 12, scope: !1353)
!11262 = !DILocation(line: 1836, column: 19, scope: !1353)
!11263 = !DILocation(line: 1836, column: 25, scope: !1353)
!11264 = !DILocation(line: 1836, column: 5, scope: !1353)
!11265 = !DILocation(line: 1837, column: 14, scope: !1353)
!11266 = !DILocation(line: 1837, column: 11, scope: !1353)
!11267 = !DILocation(line: 1838, column: 11, scope: !1353)
!11268 = !DILocation(line: 1838, column: 22, scope: !1353)
!11269 = !DILocation(line: 1838, column: 20, scope: !1353)
!11270 = !DILocation(line: 1838, column: 9, scope: !1353)
!11271 = !DILocation(line: 1840, column: 5, scope: !1353)
!11272 = !DILocation(line: 1840, column: 13, scope: !11273)
!11273 = !DILexicalBlockFile(scope: !11211, file: !458, discriminator: 2)
!11274 = !DILocation(line: 1840, column: 24, scope: !1353)
!11275 = !DILocation(line: 1841, column: 33, scope: !11276)
!11276 = distinct !DILexicalBlock(scope: !1353, file: !458, line: 1840, column: 29)
!11277 = !DILocation(line: 1841, column: 40, scope: !11276)
!11278 = !DILocation(line: 1841, column: 44, scope: !11276)
!11279 = !DILocation(line: 1841, column: 43, scope: !11276)
!11280 = !DILocation(line: 1842, column: 33, scope: !11276)
!11281 = !DILocation(line: 1842, column: 41, scope: !11276)
!11282 = !DILocation(line: 1841, column: 18, scope: !11276)
!11283 = !DILocation(line: 1841, column: 16, scope: !11276)
!11284 = !DILocation(line: 1844, column: 13, scope: !11285)
!11285 = distinct !DILexicalBlock(scope: !11276, file: !458, line: 1844, column: 13)
!11286 = !DILocation(line: 1844, column: 19, scope: !11285)
!11287 = !DILocation(line: 1844, column: 13, scope: !11276)
!11288 = !DILocation(line: 1845, column: 13, scope: !11285)
!11289 = !DILocation(line: 1846, column: 16, scope: !11276)
!11290 = !DILocation(line: 1846, column: 22, scope: !11276)
!11291 = !DILocation(line: 1846, column: 21, scope: !11276)
!11292 = !DILocation(line: 1846, column: 30, scope: !11276)
!11293 = !DILocation(line: 1846, column: 36, scope: !11276)
!11294 = !DILocation(line: 1846, column: 9, scope: !11276)
!11295 = !DILocation(line: 1847, column: 18, scope: !11276)
!11296 = !DILocation(line: 1847, column: 25, scope: !11276)
!11297 = !DILocation(line: 1847, column: 24, scope: !11276)
!11298 = !DILocation(line: 1847, column: 15, scope: !11276)
!11299 = !DILocation(line: 1850, column: 12, scope: !1353)
!11300 = !DILocation(line: 1850, column: 5, scope: !1353)
!11301 = !DILocation(line: 1851, column: 1, scope: !1353)
!11302 = !DILocation(line: 1855, column: 45, scope: !1368)
!11303 = !DILocation(line: 1856, column: 31, scope: !1368)
!11304 = !DILocation(line: 1857, column: 38, scope: !1368)
!11305 = !DILocation(line: 1857, column: 55, scope: !1368)
!11306 = !DILocation(line: 1858, column: 37, scope: !1368)
!11307 = !DILocation(line: 1860, column: 5, scope: !1368)
!11308 = !DILocation(line: 1860, column: 11, scope: !1368)
!11309 = !DILocation(line: 1860, column: 20, scope: !1368)
!11310 = !DILocation(line: 1861, column: 5, scope: !1368)
!11311 = !DILocation(line: 1861, column: 11, scope: !1368)
!11312 = !DILocation(line: 1861, column: 19, scope: !1368)
!11313 = !DILocation(line: 1861, column: 26, scope: !1368)
!11314 = !DILocation(line: 1862, column: 5, scope: !1368)
!11315 = !DILocation(line: 1862, column: 16, scope: !1368)
!11316 = !DILocation(line: 1862, column: 26, scope: !1368)
!11317 = !DILocation(line: 1863, column: 5, scope: !1368)
!11318 = !DILocation(line: 1863, column: 16, scope: !1368)
!11319 = !DILocation(line: 1864, column: 5, scope: !1368)
!11320 = !DILocation(line: 1864, column: 24, scope: !1368)
!11321 = !DILocation(line: 1866, column: 46, scope: !1368)
!11322 = !DILocation(line: 1866, column: 31, scope: !1368)
!11323 = !DILocation(line: 1866, column: 54, scope: !1368)
!11324 = !DILocation(line: 1866, column: 29, scope: !1368)
!11325 = !DILocation(line: 1866, column: 88, scope: !11326)
!11326 = !DILexicalBlockFile(scope: !1368, file: !458, discriminator: 1)
!11327 = !DILocation(line: 1866, column: 96, scope: !1368)
!11328 = !DILocation(line: 1866, column: 29, scope: !11329)
!11329 = !DILexicalBlockFile(scope: !1368, file: !458, discriminator: 2)
!11330 = !DILocation(line: 1866, column: 12, scope: !11331)
!11331 = !DILexicalBlockFile(scope: !11332, file: !458, discriminator: 4)
!11332 = !DILexicalBlockFile(scope: !1368, file: !458, discriminator: 3)
!11333 = !DILocation(line: 1867, column: 48, scope: !1368)
!11334 = !DILocation(line: 1867, column: 33, scope: !1368)
!11335 = !DILocation(line: 1867, column: 56, scope: !1368)
!11336 = !DILocation(line: 1867, column: 14, scope: !1368)
!11337 = !DILocation(line: 1869, column: 23, scope: !1368)
!11338 = !DILocation(line: 1869, column: 31, scope: !1368)
!11339 = !DILocation(line: 1869, column: 41, scope: !1368)
!11340 = !DILocation(line: 1869, column: 49, scope: !1368)
!11341 = !DILocation(line: 1869, column: 13, scope: !1368)
!11342 = !DILocation(line: 1869, column: 11, scope: !1368)
!11343 = !DILocation(line: 1870, column: 9, scope: !11344)
!11344 = distinct !DILexicalBlock(scope: !1368, file: !458, line: 1870, column: 9)
!11345 = !DILocation(line: 1870, column: 15, scope: !11344)
!11346 = !DILocation(line: 1870, column: 9, scope: !1368)
!11347 = !DILocation(line: 1872, column: 28, scope: !11348)
!11348 = distinct !DILexicalBlock(scope: !11344, file: !458, line: 1870, column: 21)
!11349 = !DILocation(line: 1872, column: 16, scope: !11348)
!11350 = !DILocation(line: 1872, column: 9, scope: !11348)
!11351 = !DILocation(line: 1878, column: 9, scope: !11352)
!11352 = distinct !DILexicalBlock(scope: !1368, file: !458, line: 1878, column: 9)
!11353 = !DILocation(line: 1878, column: 16, scope: !11352)
!11354 = !DILocation(line: 1878, column: 57, scope: !11352)
!11355 = !DILocation(line: 1878, column: 55, scope: !11352)
!11356 = !DILocation(line: 1878, column: 69, scope: !11352)
!11357 = !DILocation(line: 1878, column: 67, scope: !11352)
!11358 = !DILocation(line: 1878, column: 20, scope: !11352)
!11359 = !DILocation(line: 1878, column: 9, scope: !1368)
!11360 = !DILocation(line: 1879, column: 25, scope: !11361)
!11361 = distinct !DILexicalBlock(scope: !11352, file: !458, line: 1878, column: 76)
!11362 = !DILocation(line: 1879, column: 9, scope: !11361)
!11363 = !DILocation(line: 1880, column: 9, scope: !11361)
!11364 = !DILocation(line: 1882, column: 18, scope: !1368)
!11365 = !DILocation(line: 1882, column: 29, scope: !1368)
!11366 = !DILocation(line: 1882, column: 38, scope: !1368)
!11367 = !DILocation(line: 1882, column: 45, scope: !1368)
!11368 = !DILocation(line: 1882, column: 35, scope: !1368)
!11369 = !DILocation(line: 1882, column: 27, scope: !1368)
!11370 = !DILocation(line: 1882, column: 16, scope: !1368)
!11371 = !DILocation(line: 1885, column: 53, scope: !11372)
!11372 = distinct !DILexicalBlock(scope: !1368, file: !458, line: 1884, column: 10)
!11373 = !DILocation(line: 1885, column: 11, scope: !11372)
!11374 = !DILocation(line: 1884, column: 20, scope: !11372)
!11375 = !DILocation(line: 1884, column: 18, scope: !11372)
!11376 = !DILocation(line: 1885, column: 66, scope: !11372)
!11377 = !DILocation(line: 1884, column: 10, scope: !1368)
!11378 = !DILocation(line: 1886, column: 13, scope: !11372)
!11379 = !DILocation(line: 1887, column: 48, scope: !1368)
!11380 = !DILocation(line: 1887, column: 33, scope: !1368)
!11381 = !DILocation(line: 1887, column: 58, scope: !1368)
!11382 = !DILocation(line: 1887, column: 31, scope: !1368)
!11383 = !DILocation(line: 1887, column: 92, scope: !11326)
!11384 = !DILocation(line: 1887, column: 102, scope: !1368)
!11385 = !DILocation(line: 1887, column: 31, scope: !11329)
!11386 = !DILocation(line: 1887, column: 14, scope: !11331)
!11387 = !DILocation(line: 1889, column: 13, scope: !1368)
!11388 = !DILocation(line: 1889, column: 11, scope: !1368)
!11389 = !DILocation(line: 1890, column: 11, scope: !1368)
!11390 = !DILocation(line: 1890, column: 20, scope: !1368)
!11391 = !DILocation(line: 1890, column: 18, scope: !1368)
!11392 = !DILocation(line: 1890, column: 9, scope: !1368)
!11393 = !DILocation(line: 1891, column: 5, scope: !1368)
!11394 = !DILocation(line: 1891, column: 17, scope: !11395)
!11395 = !DILexicalBlockFile(scope: !11326, file: !458, discriminator: 2)
!11396 = !DILocation(line: 1891, column: 20, scope: !1368)
!11397 = !DILocation(line: 1892, column: 47, scope: !11398)
!11398 = distinct !DILexicalBlock(scope: !1368, file: !458, line: 1891, column: 25)
!11399 = !DILocation(line: 1892, column: 55, scope: !11398)
!11400 = !DILocation(line: 1892, column: 63, scope: !11398)
!11401 = !DILocation(line: 1892, column: 67, scope: !11398)
!11402 = !DILocation(line: 1892, column: 66, scope: !11398)
!11403 = !DILocation(line: 1892, column: 25, scope: !11398)
!11404 = !DILocation(line: 1892, column: 14, scope: !11398)
!11405 = !DILocation(line: 1893, column: 13, scope: !11406)
!11406 = distinct !DILexicalBlock(scope: !11398, file: !458, line: 1893, column: 13)
!11407 = !DILocation(line: 1893, column: 18, scope: !11406)
!11408 = !DILocation(line: 1893, column: 13, scope: !11398)
!11409 = !DILocation(line: 1894, column: 13, scope: !11406)
!11410 = !DILocation(line: 1896, column: 13, scope: !11411)
!11411 = distinct !DILexicalBlock(scope: !11398, file: !458, line: 1896, column: 13)
!11412 = !DILocation(line: 1896, column: 21, scope: !11411)
!11413 = !DILocation(line: 1896, column: 18, scope: !11411)
!11414 = !DILocation(line: 1896, column: 13, scope: !11398)
!11415 = !DILocation(line: 1898, column: 20, scope: !11416)
!11416 = distinct !DILexicalBlock(scope: !11411, file: !458, line: 1896, column: 28)
!11417 = !DILocation(line: 1898, column: 30, scope: !11416)
!11418 = !DILocation(line: 1898, column: 36, scope: !11416)
!11419 = !DILocation(line: 1898, column: 13, scope: !11416)
!11420 = !DILocation(line: 1899, column: 25, scope: !11416)
!11421 = !DILocation(line: 1899, column: 22, scope: !11416)
!11422 = !DILocation(line: 1900, column: 19, scope: !11416)
!11423 = !DILocation(line: 1901, column: 9, scope: !11416)
!11424 = !DILocation(line: 1903, column: 20, scope: !11425)
!11425 = distinct !DILexicalBlock(scope: !11411, file: !458, line: 1901, column: 16)
!11426 = !DILocation(line: 1903, column: 30, scope: !11425)
!11427 = !DILocation(line: 1903, column: 37, scope: !11425)
!11428 = !DILocation(line: 1903, column: 42, scope: !11425)
!11429 = !DILocation(line: 1903, column: 41, scope: !11425)
!11430 = !DILocation(line: 1903, column: 13, scope: !11425)
!11431 = !DILocation(line: 1904, column: 26, scope: !11425)
!11432 = !DILocation(line: 1904, column: 31, scope: !11425)
!11433 = !DILocation(line: 1904, column: 30, scope: !11425)
!11434 = !DILocation(line: 1904, column: 22, scope: !11425)
!11435 = !DILocation(line: 1905, column: 20, scope: !11425)
!11436 = !DILocation(line: 1905, column: 30, scope: !11425)
!11437 = !DILocation(line: 1905, column: 36, scope: !11425)
!11438 = !DILocation(line: 1905, column: 13, scope: !11425)
!11439 = !DILocation(line: 1906, column: 25, scope: !11425)
!11440 = !DILocation(line: 1906, column: 22, scope: !11425)
!11441 = !DILocation(line: 1907, column: 21, scope: !11425)
!11442 = !DILocation(line: 1907, column: 25, scope: !11425)
!11443 = !DILocation(line: 1907, column: 19, scope: !11425)
!11444 = !DILocation(line: 1911, column: 12, scope: !1368)
!11445 = !DILocation(line: 1911, column: 22, scope: !1368)
!11446 = !DILocation(line: 1911, column: 29, scope: !1368)
!11447 = !DILocation(line: 1911, column: 33, scope: !1368)
!11448 = !DILocation(line: 1911, column: 32, scope: !1368)
!11449 = !DILocation(line: 1911, column: 5, scope: !1368)
!11450 = !DILocation(line: 1913, column: 12, scope: !1368)
!11451 = !DILocation(line: 1913, column: 5, scope: !1368)
!11452 = !DILocation(line: 1914, column: 1, scope: !1368)
!11453 = !DILocation(line: 1918, column: 38, scope: !1386)
!11454 = !DILocation(line: 1919, column: 31, scope: !1386)
!11455 = !DILocation(line: 1919, column: 50, scope: !1386)
!11456 = !DILocation(line: 1920, column: 31, scope: !1386)
!11457 = !DILocation(line: 1920, column: 48, scope: !1386)
!11458 = !DILocation(line: 1921, column: 30, scope: !1386)
!11459 = !DILocation(line: 1923, column: 5, scope: !1386)
!11460 = !DILocation(line: 1923, column: 11, scope: !1386)
!11461 = !DILocation(line: 1923, column: 20, scope: !1386)
!11462 = !DILocation(line: 1924, column: 5, scope: !1386)
!11463 = !DILocation(line: 1924, column: 11, scope: !1386)
!11464 = !DILocation(line: 1924, column: 19, scope: !1386)
!11465 = !DILocation(line: 1924, column: 26, scope: !1386)
!11466 = !DILocation(line: 1925, column: 5, scope: !1386)
!11467 = !DILocation(line: 1925, column: 16, scope: !1386)
!11468 = !DILocation(line: 1925, column: 26, scope: !1386)
!11469 = !DILocation(line: 1926, column: 5, scope: !1386)
!11470 = !DILocation(line: 1926, column: 16, scope: !1386)
!11471 = !DILocation(line: 1926, column: 23, scope: !1386)
!11472 = !DILocation(line: 1927, column: 5, scope: !1386)
!11473 = !DILocation(line: 1927, column: 24, scope: !1386)
!11474 = !DILocation(line: 1929, column: 46, scope: !1386)
!11475 = !DILocation(line: 1929, column: 31, scope: !1386)
!11476 = !DILocation(line: 1929, column: 54, scope: !1386)
!11477 = !DILocation(line: 1929, column: 29, scope: !1386)
!11478 = !DILocation(line: 1929, column: 88, scope: !11479)
!11479 = !DILexicalBlockFile(scope: !1386, file: !458, discriminator: 1)
!11480 = !DILocation(line: 1929, column: 96, scope: !1386)
!11481 = !DILocation(line: 1929, column: 29, scope: !11482)
!11482 = !DILexicalBlockFile(scope: !1386, file: !458, discriminator: 2)
!11483 = !DILocation(line: 1929, column: 12, scope: !11484)
!11484 = !DILexicalBlockFile(scope: !11485, file: !458, discriminator: 4)
!11485 = !DILexicalBlockFile(scope: !1386, file: !458, discriminator: 3)
!11486 = !DILocation(line: 1930, column: 48, scope: !1386)
!11487 = !DILocation(line: 1930, column: 33, scope: !1386)
!11488 = !DILocation(line: 1930, column: 56, scope: !1386)
!11489 = !DILocation(line: 1930, column: 14, scope: !1386)
!11490 = !DILocation(line: 1932, column: 29, scope: !1386)
!11491 = !DILocation(line: 1932, column: 37, scope: !1386)
!11492 = !DILocation(line: 1933, column: 29, scope: !1386)
!11493 = !DILocation(line: 1933, column: 37, scope: !1386)
!11494 = !DILocation(line: 1934, column: 29, scope: !1386)
!11495 = !DILocation(line: 1932, column: 13, scope: !1386)
!11496 = !DILocation(line: 1932, column: 11, scope: !1386)
!11497 = !DILocation(line: 1936, column: 9, scope: !11498)
!11498 = distinct !DILexicalBlock(scope: !1386, file: !458, line: 1936, column: 9)
!11499 = !DILocation(line: 1936, column: 15, scope: !11498)
!11500 = !DILocation(line: 1936, column: 9, scope: !1386)
!11501 = !DILocation(line: 1938, column: 28, scope: !11502)
!11502 = distinct !DILexicalBlock(scope: !11498, file: !458, line: 1936, column: 21)
!11503 = !DILocation(line: 1938, column: 16, scope: !11502)
!11504 = !DILocation(line: 1938, column: 9, scope: !11502)
!11505 = !DILocation(line: 1944, column: 9, scope: !11506)
!11506 = distinct !DILexicalBlock(scope: !1386, file: !458, line: 1944, column: 9)
!11507 = !DILocation(line: 1944, column: 18, scope: !11506)
!11508 = !DILocation(line: 1944, column: 16, scope: !11506)
!11509 = !DILocation(line: 1944, column: 64, scope: !11506)
!11510 = !DILocation(line: 1944, column: 62, scope: !11506)
!11511 = !DILocation(line: 1944, column: 76, scope: !11506)
!11512 = !DILocation(line: 1944, column: 74, scope: !11506)
!11513 = !DILocation(line: 1944, column: 27, scope: !11506)
!11514 = !DILocation(line: 1944, column: 9, scope: !1386)
!11515 = !DILocation(line: 1945, column: 25, scope: !11516)
!11516 = distinct !DILexicalBlock(scope: !11506, file: !458, line: 1944, column: 83)
!11517 = !DILocation(line: 1945, column: 9, scope: !11516)
!11518 = !DILocation(line: 1946, column: 9, scope: !11516)
!11519 = !DILocation(line: 1948, column: 18, scope: !1386)
!11520 = !DILocation(line: 1948, column: 29, scope: !1386)
!11521 = !DILocation(line: 1948, column: 38, scope: !1386)
!11522 = !DILocation(line: 1948, column: 47, scope: !1386)
!11523 = !DILocation(line: 1948, column: 45, scope: !1386)
!11524 = !DILocation(line: 1948, column: 35, scope: !1386)
!11525 = !DILocation(line: 1948, column: 27, scope: !1386)
!11526 = !DILocation(line: 1948, column: 16, scope: !1386)
!11527 = !DILocation(line: 1951, column: 53, scope: !11528)
!11528 = distinct !DILexicalBlock(scope: !1386, file: !458, line: 1950, column: 10)
!11529 = !DILocation(line: 1951, column: 11, scope: !11528)
!11530 = !DILocation(line: 1950, column: 20, scope: !11528)
!11531 = !DILocation(line: 1950, column: 18, scope: !11528)
!11532 = !DILocation(line: 1951, column: 66, scope: !11528)
!11533 = !DILocation(line: 1950, column: 10, scope: !1386)
!11534 = !DILocation(line: 1952, column: 9, scope: !11528)
!11535 = !DILocation(line: 1953, column: 48, scope: !1386)
!11536 = !DILocation(line: 1953, column: 33, scope: !1386)
!11537 = !DILocation(line: 1953, column: 58, scope: !1386)
!11538 = !DILocation(line: 1953, column: 31, scope: !1386)
!11539 = !DILocation(line: 1953, column: 92, scope: !11479)
!11540 = !DILocation(line: 1953, column: 102, scope: !1386)
!11541 = !DILocation(line: 1953, column: 31, scope: !11482)
!11542 = !DILocation(line: 1953, column: 14, scope: !11484)
!11543 = !DILocation(line: 1955, column: 13, scope: !1386)
!11544 = !DILocation(line: 1955, column: 11, scope: !1386)
!11545 = !DILocation(line: 1956, column: 11, scope: !1386)
!11546 = !DILocation(line: 1956, column: 20, scope: !1386)
!11547 = !DILocation(line: 1956, column: 18, scope: !1386)
!11548 = !DILocation(line: 1956, column: 9, scope: !1386)
!11549 = !DILocation(line: 1957, column: 5, scope: !1386)
!11550 = !DILocation(line: 1957, column: 17, scope: !11551)
!11551 = !DILexicalBlockFile(scope: !11479, file: !458, discriminator: 2)
!11552 = !DILocation(line: 1957, column: 20, scope: !1386)
!11553 = !DILocation(line: 1958, column: 33, scope: !11554)
!11554 = distinct !DILexicalBlock(scope: !1386, file: !458, line: 1957, column: 25)
!11555 = !DILocation(line: 1958, column: 40, scope: !11554)
!11556 = !DILocation(line: 1958, column: 44, scope: !11554)
!11557 = !DILocation(line: 1958, column: 43, scope: !11554)
!11558 = !DILocation(line: 1959, column: 33, scope: !11554)
!11559 = !DILocation(line: 1959, column: 41, scope: !11554)
!11560 = !DILocation(line: 1958, column: 18, scope: !11554)
!11561 = !DILocation(line: 1958, column: 16, scope: !11554)
!11562 = !DILocation(line: 1961, column: 13, scope: !11563)
!11563 = distinct !DILexicalBlock(scope: !11554, file: !458, line: 1961, column: 13)
!11564 = !DILocation(line: 1961, column: 20, scope: !11563)
!11565 = !DILocation(line: 1961, column: 13, scope: !11554)
!11566 = !DILocation(line: 1962, column: 13, scope: !11563)
!11567 = !DILocation(line: 1963, column: 16, scope: !11554)
!11568 = !DILocation(line: 1963, column: 22, scope: !11554)
!11569 = !DILocation(line: 1963, column: 21, scope: !11554)
!11570 = !DILocation(line: 1963, column: 14, scope: !11554)
!11571 = !DILocation(line: 1964, column: 13, scope: !11572)
!11572 = distinct !DILexicalBlock(scope: !11554, file: !458, line: 1964, column: 13)
!11573 = !DILocation(line: 1964, column: 21, scope: !11572)
!11574 = !DILocation(line: 1964, column: 18, scope: !11572)
!11575 = !DILocation(line: 1964, column: 13, scope: !11554)
!11576 = !DILocation(line: 1966, column: 20, scope: !11577)
!11577 = distinct !DILexicalBlock(scope: !11572, file: !458, line: 1964, column: 28)
!11578 = !DILocation(line: 1966, column: 30, scope: !11577)
!11579 = !DILocation(line: 1966, column: 36, scope: !11577)
!11580 = !DILocation(line: 1966, column: 13, scope: !11577)
!11581 = !DILocation(line: 1967, column: 25, scope: !11577)
!11582 = !DILocation(line: 1967, column: 22, scope: !11577)
!11583 = !DILocation(line: 1968, column: 22, scope: !11577)
!11584 = !DILocation(line: 1968, column: 19, scope: !11577)
!11585 = !DILocation(line: 1969, column: 9, scope: !11577)
!11586 = !DILocation(line: 1971, column: 20, scope: !11587)
!11587 = distinct !DILexicalBlock(scope: !11572, file: !458, line: 1969, column: 16)
!11588 = !DILocation(line: 1971, column: 30, scope: !11587)
!11589 = !DILocation(line: 1971, column: 37, scope: !11587)
!11590 = !DILocation(line: 1971, column: 42, scope: !11587)
!11591 = !DILocation(line: 1971, column: 41, scope: !11587)
!11592 = !DILocation(line: 1971, column: 13, scope: !11587)
!11593 = !DILocation(line: 1972, column: 26, scope: !11587)
!11594 = !DILocation(line: 1972, column: 31, scope: !11587)
!11595 = !DILocation(line: 1972, column: 30, scope: !11587)
!11596 = !DILocation(line: 1972, column: 22, scope: !11587)
!11597 = !DILocation(line: 1973, column: 20, scope: !11587)
!11598 = !DILocation(line: 1973, column: 30, scope: !11587)
!11599 = !DILocation(line: 1973, column: 36, scope: !11587)
!11600 = !DILocation(line: 1973, column: 13, scope: !11587)
!11601 = !DILocation(line: 1974, column: 25, scope: !11587)
!11602 = !DILocation(line: 1974, column: 22, scope: !11587)
!11603 = !DILocation(line: 1975, column: 21, scope: !11587)
!11604 = !DILocation(line: 1975, column: 26, scope: !11587)
!11605 = !DILocation(line: 1975, column: 25, scope: !11587)
!11606 = !DILocation(line: 1975, column: 19, scope: !11587)
!11607 = !DILocation(line: 1979, column: 12, scope: !1386)
!11608 = !DILocation(line: 1979, column: 22, scope: !1386)
!11609 = !DILocation(line: 1979, column: 29, scope: !1386)
!11610 = !DILocation(line: 1979, column: 33, scope: !1386)
!11611 = !DILocation(line: 1979, column: 32, scope: !1386)
!11612 = !DILocation(line: 1979, column: 5, scope: !1386)
!11613 = !DILocation(line: 1981, column: 12, scope: !1386)
!11614 = !DILocation(line: 1981, column: 5, scope: !1386)
!11615 = !DILocation(line: 1982, column: 1, scope: !1386)
!11616 = !DILocation(line: 1586, column: 23, scope: !1311)
!11617 = !DILocation(line: 1586, column: 42, scope: !1311)
!11618 = !DILocation(line: 1586, column: 59, scope: !1311)
!11619 = !DILocation(line: 1586, column: 73, scope: !1311)
!11620 = !DILocation(line: 1588, column: 5, scope: !1311)
!11621 = !DILocation(line: 1588, column: 16, scope: !1311)
!11622 = !DILocation(line: 1589, column: 5, scope: !1311)
!11623 = !DILocation(line: 1589, column: 17, scope: !1311)
!11624 = !DILocation(line: 1589, column: 23, scope: !1311)
!11625 = !DILocation(line: 1590, column: 5, scope: !1311)
!11626 = !DILocation(line: 1590, column: 17, scope: !1311)
!11627 = !DILocation(line: 1590, column: 21, scope: !1311)
!11628 = !DILocation(line: 1590, column: 28, scope: !1311)
!11629 = !DILocation(line: 1590, column: 27, scope: !1311)
!11630 = !DILocation(line: 1592, column: 5, scope: !1311)
!11631 = !DILocation(line: 1592, column: 51, scope: !11632)
!11632 = !DILexicalBlockFile(scope: !11633, file: !458, discriminator: 2)
!11633 = !DILexicalBlockFile(scope: !1311, file: !458, discriminator: 1)
!11634 = !DILocation(line: 1592, column: 59, scope: !1311)
!11635 = !DILocation(line: 1592, column: 62, scope: !1311)
!11636 = !DILocation(line: 1592, column: 66, scope: !1311)
!11637 = !DILocation(line: 1592, column: 65, scope: !1311)
!11638 = !DILocation(line: 1592, column: 29, scope: !1311)
!11639 = !DILocation(line: 1592, column: 19, scope: !1311)
!11640 = !DILocation(line: 1592, column: 75, scope: !1311)
!11641 = !DILocation(line: 1593, column: 14, scope: !11642)
!11642 = distinct !DILexicalBlock(scope: !1311, file: !458, line: 1592, column: 91)
!11643 = !DILocation(line: 1594, column: 13, scope: !11644)
!11644 = distinct !DILexicalBlock(scope: !11642, file: !458, line: 1594, column: 13)
!11645 = !DILocation(line: 1594, column: 22, scope: !11644)
!11646 = !DILocation(line: 1594, column: 19, scope: !11644)
!11647 = !DILocation(line: 1594, column: 13, scope: !11642)
!11648 = !DILocation(line: 1595, column: 13, scope: !11644)
!11649 = !DILocation(line: 1596, column: 15, scope: !11642)
!11650 = !DILocation(line: 1598, column: 12, scope: !1311)
!11651 = !DILocation(line: 1599, column: 1, scope: !1311)
!11652 = !DILocation(line: 1598, column: 5, scope: !1311)
!11653 = !DILocation(line: 63, column: 32, scope: !1438)
!11654 = !DILocation(line: 64, column: 34, scope: !1438)
!11655 = !DILocation(line: 64, column: 50, scope: !1438)
!11656 = !DILocation(line: 65, column: 32, scope: !1438)
!11657 = !DILocation(line: 66, column: 34, scope: !1438)
!11658 = !DILocation(line: 66, column: 50, scope: !1438)
!11659 = !DILocation(line: 68, column: 5, scope: !1438)
!11660 = !DILocation(line: 68, column: 15, scope: !1438)
!11661 = !DILocation(line: 69, column: 5, scope: !1438)
!11662 = !DILocation(line: 69, column: 16, scope: !1438)
!11663 = !DILocation(line: 71, column: 9, scope: !11664)
!11664 = distinct !DILexicalBlock(scope: !1438, file: !1217, line: 71, column: 9)
!11665 = !DILocation(line: 71, column: 17, scope: !11664)
!11666 = !DILocation(line: 71, column: 9, scope: !1438)
!11667 = !DILocation(line: 72, column: 25, scope: !11668)
!11668 = distinct !DILexicalBlock(scope: !11664, file: !1217, line: 71, column: 23)
!11669 = !DILocation(line: 72, column: 9, scope: !11668)
!11670 = !DILocation(line: 73, column: 9, scope: !11668)
!11671 = !DILocation(line: 76, column: 11, scope: !1438)
!11672 = !DILocation(line: 76, column: 9, scope: !1438)
!11673 = !DILocation(line: 77, column: 10, scope: !11674)
!11674 = distinct !DILexicalBlock(scope: !1438, file: !1217, line: 77, column: 9)
!11675 = !DILocation(line: 77, column: 9, scope: !1438)
!11676 = !DILocation(line: 78, column: 9, scope: !11674)
!11677 = !DILocation(line: 80, column: 22, scope: !1438)
!11678 = !DILocation(line: 80, column: 27, scope: !1438)
!11679 = !DILocation(line: 80, column: 36, scope: !1438)
!11680 = !DILocation(line: 80, column: 41, scope: !1438)
!11681 = !DILocation(line: 80, column: 11, scope: !1438)
!11682 = !DILocation(line: 80, column: 9, scope: !1438)
!11683 = !DILocation(line: 82, column: 9, scope: !1453)
!11684 = !DILocation(line: 82, column: 13, scope: !1453)
!11685 = !DILocation(line: 82, column: 9, scope: !1438)
!11686 = !DILocation(line: 84, column: 49, scope: !1452)
!11687 = !DILocation(line: 84, column: 29, scope: !1452)
!11688 = !DILocation(line: 84, column: 11, scope: !1452)
!11689 = !DILocation(line: 84, column: 36, scope: !1452)
!11690 = !DILocation(line: 84, column: 10, scope: !1452)
!11691 = !DILocation(line: 84, column: 47, scope: !1452)
!11692 = !DILocation(line: 85, column: 49, scope: !1452)
!11693 = !DILocation(line: 85, column: 29, scope: !1452)
!11694 = !DILocation(line: 85, column: 11, scope: !1452)
!11695 = !DILocation(line: 85, column: 36, scope: !1452)
!11696 = !DILocation(line: 85, column: 10, scope: !1452)
!11697 = !DILocation(line: 85, column: 47, scope: !1452)
!11698 = !DILocation(line: 86, column: 79, scope: !1452)
!11699 = !DILocation(line: 86, column: 84, scope: !1452)
!11700 = !DILocation(line: 86, column: 49, scope: !1452)
!11701 = !DILocation(line: 86, column: 29, scope: !1452)
!11702 = !DILocation(line: 86, column: 11, scope: !1452)
!11703 = !DILocation(line: 86, column: 36, scope: !1452)
!11704 = !DILocation(line: 86, column: 10, scope: !1452)
!11705 = !DILocation(line: 86, column: 47, scope: !1452)
!11706 = !DILocation(line: 88, column: 13, scope: !1451)
!11707 = !DILocation(line: 88, column: 13, scope: !1452)
!11708 = !DILocation(line: 89, column: 13, scope: !1450)
!11709 = !DILocation(line: 89, column: 18, scope: !11710)
!11710 = !DILexicalBlockFile(scope: !1449, file: !1217, discriminator: 1)
!11711 = !DILocation(line: 89, column: 28, scope: !1449)
!11712 = !DILocation(line: 89, column: 58, scope: !1449)
!11713 = !DILocation(line: 89, column: 72, scope: !11714)
!11714 = distinct !DILexicalBlock(scope: !1449, file: !1217, line: 89, column: 69)
!11715 = !DILocation(line: 89, column: 89, scope: !11714)
!11716 = !DILocation(line: 89, column: 69, scope: !11714)
!11717 = !DILocation(line: 89, column: 99, scope: !11714)
!11718 = !DILocation(line: 89, column: 69, scope: !1449)
!11719 = !DILocation(line: 89, column: 69, scope: !11720)
!11720 = !DILexicalBlockFile(scope: !1449, file: !1217, discriminator: 2)
!11721 = !DILocation(line: 89, column: 130, scope: !11722)
!11722 = !DILexicalBlockFile(scope: !11714, file: !1217, discriminator: 3)
!11723 = !DILocation(line: 89, column: 148, scope: !11714)
!11724 = !DILocation(line: 89, column: 158, scope: !11714)
!11725 = !DILocation(line: 89, column: 183, scope: !11714)
!11726 = !DILocation(line: 89, column: 114, scope: !11714)
!11727 = !DILocation(line: 89, column: 202, scope: !11728)
!11728 = !DILexicalBlockFile(scope: !1450, file: !1217, discriminator: 4)
!11729 = !DILocation(line: 89, column: 202, scope: !1449)
!11730 = !DILocation(line: 89, column: 202, scope: !11731)
!11731 = !DILexicalBlockFile(scope: !1449, file: !1217, discriminator: 5)
!11732 = !DILocation(line: 90, column: 13, scope: !1450)
!11733 = !DILocation(line: 100, column: 16, scope: !1452)
!11734 = !DILocation(line: 100, column: 9, scope: !1452)
!11735 = !DILocation(line: 103, column: 75, scope: !1438)
!11736 = !DILocation(line: 103, column: 80, scope: !1438)
!11737 = !DILocation(line: 103, column: 45, scope: !1438)
!11738 = !DILocation(line: 103, column: 25, scope: !1438)
!11739 = !DILocation(line: 103, column: 7, scope: !1438)
!11740 = !DILocation(line: 103, column: 32, scope: !1438)
!11741 = !DILocation(line: 103, column: 6, scope: !1438)
!11742 = !DILocation(line: 103, column: 43, scope: !1438)
!11743 = !DILocation(line: 104, column: 21, scope: !1438)
!11744 = !DILocation(line: 104, column: 32, scope: !1438)
!11745 = !DILocation(line: 104, column: 41, scope: !1438)
!11746 = !DILocation(line: 105, column: 45, scope: !1438)
!11747 = !DILocation(line: 105, column: 25, scope: !1438)
!11748 = !DILocation(line: 105, column: 7, scope: !1438)
!11749 = !DILocation(line: 105, column: 32, scope: !1438)
!11750 = !DILocation(line: 105, column: 6, scope: !1438)
!11751 = !DILocation(line: 105, column: 43, scope: !1438)
!11752 = !DILocation(line: 106, column: 12, scope: !1438)
!11753 = !DILocation(line: 106, column: 9, scope: !1438)
!11754 = !DILocation(line: 107, column: 75, scope: !1438)
!11755 = !DILocation(line: 107, column: 81, scope: !1438)
!11756 = !DILocation(line: 107, column: 79, scope: !1438)
!11757 = !DILocation(line: 107, column: 86, scope: !1438)
!11758 = !DILocation(line: 107, column: 96, scope: !1438)
!11759 = !DILocation(line: 107, column: 94, scope: !1438)
!11760 = !DILocation(line: 107, column: 45, scope: !1438)
!11761 = !DILocation(line: 107, column: 25, scope: !1438)
!11762 = !DILocation(line: 107, column: 7, scope: !1438)
!11763 = !DILocation(line: 107, column: 32, scope: !1438)
!11764 = !DILocation(line: 107, column: 6, scope: !1438)
!11765 = !DILocation(line: 107, column: 43, scope: !1438)
!11766 = !DILocation(line: 109, column: 9, scope: !1457)
!11767 = !DILocation(line: 109, column: 9, scope: !1438)
!11768 = !DILocation(line: 110, column: 9, scope: !1456)
!11769 = !DILocation(line: 110, column: 14, scope: !11770)
!11770 = !DILexicalBlockFile(scope: !1455, file: !1217, discriminator: 1)
!11771 = !DILocation(line: 110, column: 24, scope: !1455)
!11772 = !DILocation(line: 110, column: 54, scope: !1455)
!11773 = !DILocation(line: 110, column: 68, scope: !11774)
!11774 = distinct !DILexicalBlock(scope: !1455, file: !1217, line: 110, column: 65)
!11775 = !DILocation(line: 110, column: 85, scope: !11774)
!11776 = !DILocation(line: 110, column: 65, scope: !11774)
!11777 = !DILocation(line: 110, column: 95, scope: !11774)
!11778 = !DILocation(line: 110, column: 65, scope: !1455)
!11779 = !DILocation(line: 110, column: 65, scope: !11780)
!11780 = !DILexicalBlockFile(scope: !1455, file: !1217, discriminator: 2)
!11781 = !DILocation(line: 110, column: 126, scope: !11782)
!11782 = !DILexicalBlockFile(scope: !11774, file: !1217, discriminator: 3)
!11783 = !DILocation(line: 110, column: 144, scope: !11774)
!11784 = !DILocation(line: 110, column: 154, scope: !11774)
!11785 = !DILocation(line: 110, column: 179, scope: !11774)
!11786 = !DILocation(line: 110, column: 110, scope: !11774)
!11787 = !DILocation(line: 110, column: 198, scope: !11788)
!11788 = !DILexicalBlockFile(scope: !1456, file: !1217, discriminator: 4)
!11789 = !DILocation(line: 110, column: 198, scope: !1455)
!11790 = !DILocation(line: 110, column: 198, scope: !11791)
!11791 = !DILexicalBlockFile(scope: !1455, file: !1217, discriminator: 5)
!11792 = !DILocation(line: 111, column: 9, scope: !1456)
!11793 = !DILocation(line: 114, column: 12, scope: !1438)
!11794 = !DILocation(line: 114, column: 5, scope: !1438)
!11795 = !DILocation(line: 115, column: 1, scope: !1438)
!11796 = !DILocation(line: 193, column: 39, scope: !1473)
!11797 = !DILocation(line: 194, column: 41, scope: !1473)
!11798 = !DILocation(line: 194, column: 57, scope: !1473)
!11799 = !DILocation(line: 195, column: 40, scope: !1473)
!11800 = !DILocation(line: 197, column: 5, scope: !1473)
!11801 = !DILocation(line: 197, column: 16, scope: !1473)
!11802 = !DILocation(line: 197, column: 19, scope: !1473)
!11803 = !DILocation(line: 197, column: 22, scope: !1473)
!11804 = !DILocation(line: 198, column: 5, scope: !1473)
!11805 = !DILocation(line: 198, column: 15, scope: !1473)
!11806 = !DILocation(line: 198, column: 34, scope: !1473)
!11807 = !DILocation(line: 198, column: 43, scope: !1473)
!11808 = !DILocation(line: 198, column: 34, scope: !11809)
!11809 = !DILexicalBlockFile(scope: !1473, file: !1474, discriminator: 1)
!11810 = !DILocation(line: 198, column: 56, scope: !11811)
!11811 = !DILexicalBlockFile(scope: !1473, file: !1474, discriminator: 2)
!11812 = !DILocation(line: 198, column: 64, scope: !1473)
!11813 = !DILocation(line: 198, column: 22, scope: !11814)
!11814 = !DILexicalBlockFile(scope: !11815, file: !1474, discriminator: 4)
!11815 = !DILexicalBlockFile(scope: !1473, file: !1474, discriminator: 3)
!11816 = !DILocation(line: 199, column: 5, scope: !1473)
!11817 = !DILocation(line: 199, column: 15, scope: !1473)
!11818 = !DILocation(line: 201, column: 9, scope: !11819)
!11819 = distinct !DILexicalBlock(scope: !1473, file: !1474, line: 201, column: 9)
!11820 = !DILocation(line: 201, column: 14, scope: !11819)
!11821 = !DILocation(line: 201, column: 9, scope: !1473)
!11822 = !DILocation(line: 202, column: 9, scope: !11819)
!11823 = !DILocation(line: 204, column: 13, scope: !1473)
!11824 = !DILocation(line: 204, column: 21, scope: !1473)
!11825 = !DILocation(line: 204, column: 11, scope: !1473)
!11826 = !DILocation(line: 204, column: 7, scope: !1473)
!11827 = !DILocation(line: 205, column: 5, scope: !1473)
!11828 = !DILocation(line: 205, column: 20, scope: !11829)
!11829 = !DILexicalBlockFile(scope: !11809, file: !1474, discriminator: 2)
!11830 = !DILocation(line: 205, column: 23, scope: !1473)
!11831 = !DILocation(line: 206, column: 9, scope: !1494)
!11832 = !DILocation(line: 206, column: 16, scope: !11833)
!11833 = !DILexicalBlockFile(scope: !11834, file: !1474, discriminator: 4)
!11834 = !DILexicalBlockFile(scope: !1494, file: !1474, discriminator: 1)
!11835 = !DILocation(line: 206, column: 18, scope: !1494)
!11836 = !DILocation(line: 206, column: 23, scope: !1494)
!11837 = !DILocation(line: 206, column: 65, scope: !11838)
!11838 = !DILexicalBlockFile(scope: !1494, file: !1474, discriminator: 2)
!11839 = !DILocation(line: 206, column: 61, scope: !1494)
!11840 = !DILocation(line: 206, column: 60, scope: !1494)
!11841 = !DILocation(line: 206, column: 69, scope: !1494)
!11842 = !DILocation(line: 206, column: 44, scope: !1494)
!11843 = !DILocation(line: 206, column: 27, scope: !1494)
!11844 = !DILocation(line: 206, column: 79, scope: !1494)
!11845 = !DILocation(line: 206, column: 9, scope: !11846)
!11846 = !DILexicalBlockFile(scope: !1494, file: !1474, discriminator: 3)
!11847 = !DILocation(line: 207, column: 14, scope: !1494)
!11848 = !DILocation(line: 208, column: 13, scope: !11849)
!11849 = distinct !DILexicalBlock(scope: !1494, file: !1474, line: 208, column: 13)
!11850 = !DILocation(line: 208, column: 15, scope: !11849)
!11851 = !DILocation(line: 208, column: 13, scope: !1494)
!11852 = !DILocation(line: 208, column: 20, scope: !11853)
!11853 = !DILexicalBlockFile(scope: !11849, file: !1474, discriminator: 1)
!11854 = !DILocation(line: 209, column: 13, scope: !1494)
!11855 = !DILocation(line: 209, column: 11, scope: !1494)
!11856 = !DILocation(line: 209, column: 17, scope: !1494)
!11857 = !DILocation(line: 210, column: 9, scope: !1494)
!11858 = !DILocation(line: 210, column: 16, scope: !11833)
!11859 = !DILocation(line: 210, column: 18, scope: !1494)
!11860 = !DILocation(line: 210, column: 23, scope: !1494)
!11861 = !DILocation(line: 210, column: 66, scope: !11838)
!11862 = !DILocation(line: 210, column: 62, scope: !1494)
!11863 = !DILocation(line: 210, column: 61, scope: !1494)
!11864 = !DILocation(line: 210, column: 70, scope: !1494)
!11865 = !DILocation(line: 210, column: 45, scope: !1494)
!11866 = !DILocation(line: 210, column: 28, scope: !1494)
!11867 = !DILocation(line: 210, column: 80, scope: !1494)
!11868 = !DILocation(line: 210, column: 26, scope: !1494)
!11869 = !DILocation(line: 210, column: 9, scope: !11846)
!11870 = !DILocation(line: 211, column: 14, scope: !1494)
!11871 = !DILocation(line: 221, column: 48, scope: !1493)
!11872 = !DILocation(line: 221, column: 56, scope: !1493)
!11873 = !DILocation(line: 221, column: 58, scope: !1493)
!11874 = !DILocation(line: 221, column: 53, scope: !1493)
!11875 = !DILocation(line: 221, column: 65, scope: !1493)
!11876 = !DILocation(line: 221, column: 67, scope: !1493)
!11877 = !DILocation(line: 221, column: 75, scope: !1493)
!11878 = !DILocation(line: 221, column: 77, scope: !1493)
!11879 = !DILocation(line: 221, column: 72, scope: !1493)
!11880 = !DILocation(line: 221, column: 17, scope: !1493)
!11881 = !DILocation(line: 221, column: 15, scope: !1493)
!11882 = !DILocation(line: 221, column: 88, scope: !11883)
!11883 = distinct !DILexicalBlock(scope: !1493, file: !1474, line: 221, column: 88)
!11884 = !DILocation(line: 221, column: 92, scope: !11883)
!11885 = !DILocation(line: 221, column: 88, scope: !1493)
!11886 = !DILocation(line: 221, column: 107, scope: !11887)
!11887 = !DILexicalBlockFile(scope: !11883, file: !1474, discriminator: 1)
!11888 = !DILocation(line: 221, column: 125, scope: !11889)
!11889 = !DILexicalBlockFile(scope: !1492, file: !1474, discriminator: 2)
!11890 = !DILocation(line: 221, column: 131, scope: !1492)
!11891 = !DILocation(line: 221, column: 125, scope: !1493)
!11892 = !DILocation(line: 221, column: 184, scope: !11893)
!11893 = !DILexicalBlockFile(scope: !11894, file: !1474, discriminator: 3)
!11894 = distinct !DILexicalBlock(scope: !1492, file: !1474, line: 221, column: 137)
!11895 = !DILocation(line: 221, column: 174, scope: !11894)
!11896 = !DILocation(line: 221, column: 158, scope: !11894)
!11897 = !DILocation(line: 221, column: 141, scope: !11894)
!11898 = !DILocation(line: 221, column: 166, scope: !11894)
!11899 = !DILocation(line: 221, column: 140, scope: !11894)
!11900 = !DILocation(line: 221, column: 181, scope: !11894)
!11901 = !DILocation(line: 221, column: 191, scope: !11894)
!11902 = !DILocation(line: 221, column: 218, scope: !11903)
!11903 = !DILexicalBlockFile(scope: !1490, file: !1474, discriminator: 4)
!11904 = !DILocation(line: 221, column: 224, scope: !1490)
!11905 = !DILocation(line: 221, column: 204, scope: !1490)
!11906 = !DILocation(line: 221, column: 204, scope: !1491)
!11907 = !DILocation(line: 221, column: 232, scope: !11908)
!11908 = !DILexicalBlockFile(scope: !1489, file: !1474, discriminator: 6)
!11909 = !DILocation(line: 221, column: 237, scope: !11910)
!11910 = !DILexicalBlockFile(scope: !1488, file: !1474, discriminator: 8)
!11911 = !DILocation(line: 221, column: 247, scope: !1488)
!11912 = !DILocation(line: 221, column: 277, scope: !1488)
!11913 = !DILocation(line: 221, column: 291, scope: !11914)
!11914 = distinct !DILexicalBlock(scope: !1488, file: !1474, line: 221, column: 288)
!11915 = !DILocation(line: 221, column: 308, scope: !11914)
!11916 = !DILocation(line: 221, column: 288, scope: !11914)
!11917 = !DILocation(line: 221, column: 318, scope: !11914)
!11918 = !DILocation(line: 221, column: 288, scope: !1488)
!11919 = !DILocation(line: 221, column: 288, scope: !11920)
!11920 = !DILexicalBlockFile(scope: !1488, file: !1474, discriminator: 9)
!11921 = !DILocation(line: 221, column: 349, scope: !11922)
!11922 = !DILexicalBlockFile(scope: !11914, file: !1474, discriminator: 10)
!11923 = !DILocation(line: 221, column: 367, scope: !11914)
!11924 = !DILocation(line: 221, column: 377, scope: !11914)
!11925 = !DILocation(line: 221, column: 402, scope: !11914)
!11926 = !DILocation(line: 221, column: 333, scope: !11914)
!11927 = !DILocation(line: 221, column: 421, scope: !11928)
!11928 = !DILexicalBlockFile(scope: !1489, file: !1474, discriminator: 11)
!11929 = !DILocation(line: 221, column: 421, scope: !1488)
!11930 = !DILocation(line: 221, column: 421, scope: !11931)
!11931 = !DILexicalBlockFile(scope: !1488, file: !1474, discriminator: 12)
!11932 = !DILocation(line: 221, column: 434, scope: !11933)
!11933 = !DILexicalBlockFile(scope: !1489, file: !1474, discriminator: 13)
!11934 = !DILocation(line: 221, column: 455, scope: !11935)
!11935 = !DILexicalBlockFile(scope: !1490, file: !1474, discriminator: 7)
!11936 = !DILocation(line: 221, column: 460, scope: !11937)
!11937 = !DILexicalBlockFile(scope: !1496, file: !1474, discriminator: 14)
!11938 = !DILocation(line: 221, column: 470, scope: !1496)
!11939 = !DILocation(line: 221, column: 500, scope: !1496)
!11940 = !DILocation(line: 221, column: 514, scope: !11941)
!11941 = distinct !DILexicalBlock(scope: !1496, file: !1474, line: 221, column: 511)
!11942 = !DILocation(line: 221, column: 531, scope: !11941)
!11943 = !DILocation(line: 221, column: 511, scope: !11941)
!11944 = !DILocation(line: 221, column: 541, scope: !11941)
!11945 = !DILocation(line: 221, column: 511, scope: !1496)
!11946 = !DILocation(line: 221, column: 511, scope: !11947)
!11947 = !DILexicalBlockFile(scope: !1496, file: !1474, discriminator: 15)
!11948 = !DILocation(line: 221, column: 572, scope: !11949)
!11949 = !DILexicalBlockFile(scope: !11941, file: !1474, discriminator: 16)
!11950 = !DILocation(line: 221, column: 590, scope: !11941)
!11951 = !DILocation(line: 221, column: 600, scope: !11941)
!11952 = !DILocation(line: 221, column: 625, scope: !11941)
!11953 = !DILocation(line: 221, column: 556, scope: !11941)
!11954 = !DILocation(line: 221, column: 644, scope: !11955)
!11955 = !DILexicalBlockFile(scope: !1490, file: !1474, discriminator: 17)
!11956 = !DILocation(line: 221, column: 644, scope: !1496)
!11957 = !DILocation(line: 221, column: 644, scope: !11958)
!11958 = !DILexicalBlockFile(scope: !1496, file: !1474, discriminator: 18)
!11959 = !DILocation(line: 221, column: 664, scope: !11960)
!11960 = !DILexicalBlockFile(scope: !1493, file: !1474, discriminator: 5)
!11961 = !DILocation(line: 224, column: 9, scope: !1506)
!11962 = !DILocation(line: 224, column: 11, scope: !1506)
!11963 = !DILocation(line: 224, column: 9, scope: !1473)
!11964 = !DILocation(line: 227, column: 9, scope: !1505)
!11965 = !DILocation(line: 227, column: 16, scope: !11966)
!11966 = !DILexicalBlockFile(scope: !11967, file: !1474, discriminator: 4)
!11967 = !DILexicalBlockFile(scope: !1505, file: !1474, discriminator: 1)
!11968 = !DILocation(line: 227, column: 18, scope: !1505)
!11969 = !DILocation(line: 227, column: 23, scope: !1505)
!11970 = !DILocation(line: 227, column: 65, scope: !11971)
!11971 = !DILexicalBlockFile(scope: !1505, file: !1474, discriminator: 2)
!11972 = !DILocation(line: 227, column: 61, scope: !1505)
!11973 = !DILocation(line: 227, column: 60, scope: !1505)
!11974 = !DILocation(line: 227, column: 69, scope: !1505)
!11975 = !DILocation(line: 227, column: 44, scope: !1505)
!11976 = !DILocation(line: 227, column: 27, scope: !1505)
!11977 = !DILocation(line: 227, column: 79, scope: !1505)
!11978 = !DILocation(line: 227, column: 9, scope: !11979)
!11979 = !DILexicalBlockFile(scope: !1505, file: !1474, discriminator: 3)
!11980 = !DILocation(line: 228, column: 14, scope: !1505)
!11981 = !DILocation(line: 229, column: 13, scope: !1504)
!11982 = !DILocation(line: 229, column: 15, scope: !1504)
!11983 = !DILocation(line: 229, column: 13, scope: !1505)
!11984 = !DILocation(line: 230, column: 52, scope: !1503)
!11985 = !DILocation(line: 230, column: 57, scope: !1503)
!11986 = !DILocation(line: 230, column: 65, scope: !1503)
!11987 = !DILocation(line: 230, column: 67, scope: !1503)
!11988 = !DILocation(line: 230, column: 72, scope: !1503)
!11989 = !DILocation(line: 230, column: 21, scope: !1503)
!11990 = !DILocation(line: 230, column: 19, scope: !1503)
!11991 = !DILocation(line: 230, column: 84, scope: !11992)
!11992 = distinct !DILexicalBlock(scope: !1503, file: !1474, line: 230, column: 84)
!11993 = !DILocation(line: 230, column: 88, scope: !11992)
!11994 = !DILocation(line: 230, column: 84, scope: !1503)
!11995 = !DILocation(line: 230, column: 103, scope: !11996)
!11996 = !DILexicalBlockFile(scope: !11992, file: !1474, discriminator: 1)
!11997 = !DILocation(line: 230, column: 121, scope: !11998)
!11998 = !DILexicalBlockFile(scope: !1502, file: !1474, discriminator: 2)
!11999 = !DILocation(line: 230, column: 127, scope: !1502)
!12000 = !DILocation(line: 230, column: 121, scope: !1503)
!12001 = !DILocation(line: 230, column: 180, scope: !12002)
!12002 = !DILexicalBlockFile(scope: !12003, file: !1474, discriminator: 3)
!12003 = distinct !DILexicalBlock(scope: !1502, file: !1474, line: 230, column: 133)
!12004 = !DILocation(line: 230, column: 170, scope: !12003)
!12005 = !DILocation(line: 230, column: 154, scope: !12003)
!12006 = !DILocation(line: 230, column: 137, scope: !12003)
!12007 = !DILocation(line: 230, column: 162, scope: !12003)
!12008 = !DILocation(line: 230, column: 136, scope: !12003)
!12009 = !DILocation(line: 230, column: 177, scope: !12003)
!12010 = !DILocation(line: 230, column: 187, scope: !12003)
!12011 = !DILocation(line: 230, column: 214, scope: !12012)
!12012 = !DILexicalBlockFile(scope: !1500, file: !1474, discriminator: 4)
!12013 = !DILocation(line: 230, column: 220, scope: !1500)
!12014 = !DILocation(line: 230, column: 200, scope: !1500)
!12015 = !DILocation(line: 230, column: 200, scope: !1501)
!12016 = !DILocation(line: 230, column: 228, scope: !12017)
!12017 = !DILexicalBlockFile(scope: !1499, file: !1474, discriminator: 6)
!12018 = !DILocation(line: 230, column: 233, scope: !12019)
!12019 = !DILexicalBlockFile(scope: !1498, file: !1474, discriminator: 8)
!12020 = !DILocation(line: 230, column: 243, scope: !1498)
!12021 = !DILocation(line: 230, column: 273, scope: !1498)
!12022 = !DILocation(line: 230, column: 287, scope: !12023)
!12023 = distinct !DILexicalBlock(scope: !1498, file: !1474, line: 230, column: 284)
!12024 = !DILocation(line: 230, column: 304, scope: !12023)
!12025 = !DILocation(line: 230, column: 284, scope: !12023)
!12026 = !DILocation(line: 230, column: 314, scope: !12023)
!12027 = !DILocation(line: 230, column: 284, scope: !1498)
!12028 = !DILocation(line: 230, column: 284, scope: !12029)
!12029 = !DILexicalBlockFile(scope: !1498, file: !1474, discriminator: 9)
!12030 = !DILocation(line: 230, column: 345, scope: !12031)
!12031 = !DILexicalBlockFile(scope: !12023, file: !1474, discriminator: 10)
!12032 = !DILocation(line: 230, column: 363, scope: !12023)
!12033 = !DILocation(line: 230, column: 373, scope: !12023)
!12034 = !DILocation(line: 230, column: 398, scope: !12023)
!12035 = !DILocation(line: 230, column: 329, scope: !12023)
!12036 = !DILocation(line: 230, column: 417, scope: !12037)
!12037 = !DILexicalBlockFile(scope: !1499, file: !1474, discriminator: 11)
!12038 = !DILocation(line: 230, column: 417, scope: !1498)
!12039 = !DILocation(line: 230, column: 417, scope: !12040)
!12040 = !DILexicalBlockFile(scope: !1498, file: !1474, discriminator: 12)
!12041 = !DILocation(line: 230, column: 430, scope: !12042)
!12042 = !DILexicalBlockFile(scope: !1499, file: !1474, discriminator: 13)
!12043 = !DILocation(line: 230, column: 451, scope: !12044)
!12044 = !DILexicalBlockFile(scope: !1500, file: !1474, discriminator: 7)
!12045 = !DILocation(line: 230, column: 456, scope: !12046)
!12046 = !DILexicalBlockFile(scope: !1508, file: !1474, discriminator: 14)
!12047 = !DILocation(line: 230, column: 466, scope: !1508)
!12048 = !DILocation(line: 230, column: 496, scope: !1508)
!12049 = !DILocation(line: 230, column: 510, scope: !12050)
!12050 = distinct !DILexicalBlock(scope: !1508, file: !1474, line: 230, column: 507)
!12051 = !DILocation(line: 230, column: 527, scope: !12050)
!12052 = !DILocation(line: 230, column: 507, scope: !12050)
!12053 = !DILocation(line: 230, column: 537, scope: !12050)
!12054 = !DILocation(line: 230, column: 507, scope: !1508)
!12055 = !DILocation(line: 230, column: 507, scope: !12056)
!12056 = !DILexicalBlockFile(scope: !1508, file: !1474, discriminator: 15)
!12057 = !DILocation(line: 230, column: 568, scope: !12058)
!12058 = !DILexicalBlockFile(scope: !12050, file: !1474, discriminator: 16)
!12059 = !DILocation(line: 230, column: 586, scope: !12050)
!12060 = !DILocation(line: 230, column: 596, scope: !12050)
!12061 = !DILocation(line: 230, column: 621, scope: !12050)
!12062 = !DILocation(line: 230, column: 552, scope: !12050)
!12063 = !DILocation(line: 230, column: 640, scope: !12064)
!12064 = !DILexicalBlockFile(scope: !1500, file: !1474, discriminator: 17)
!12065 = !DILocation(line: 230, column: 640, scope: !1508)
!12066 = !DILocation(line: 230, column: 640, scope: !12067)
!12067 = !DILexicalBlockFile(scope: !1508, file: !1474, discriminator: 18)
!12068 = !DILocation(line: 230, column: 660, scope: !12069)
!12069 = !DILexicalBlockFile(scope: !1503, file: !1474, discriminator: 5)
!12070 = !DILocation(line: 230, column: 664, scope: !1503)
!12071 = !DILocation(line: 231, column: 5, scope: !1505)
!12072 = !DILocation(line: 232, column: 41, scope: !1473)
!12073 = !DILocation(line: 232, column: 22, scope: !1473)
!12074 = !DILocation(line: 232, column: 7, scope: !1473)
!12075 = !DILocation(line: 232, column: 30, scope: !1473)
!12076 = !DILocation(line: 232, column: 39, scope: !1473)
!12077 = !DILocation(line: 233, column: 24, scope: !12078)
!12078 = distinct !DILexicalBlock(scope: !1473, file: !1474, line: 233, column: 9)
!12079 = !DILocation(line: 233, column: 9, scope: !12078)
!12080 = !DILocation(line: 233, column: 30, scope: !12078)
!12081 = !DILocation(line: 233, column: 9, scope: !1473)
!12082 = !DILocation(line: 234, column: 9, scope: !12078)
!12083 = !DILocation(line: 235, column: 12, scope: !1473)
!12084 = !DILocation(line: 235, column: 5, scope: !1473)
!12085 = !DILocation(line: 238, column: 5, scope: !1473)
!12086 = !DILocation(line: 238, column: 10, scope: !12087)
!12087 = !DILexicalBlockFile(scope: !1510, file: !1474, discriminator: 1)
!12088 = !DILocation(line: 238, column: 20, scope: !1510)
!12089 = !DILocation(line: 238, column: 50, scope: !1510)
!12090 = !DILocation(line: 238, column: 65, scope: !12091)
!12091 = distinct !DILexicalBlock(scope: !1510, file: !1474, line: 238, column: 62)
!12092 = !DILocation(line: 238, column: 82, scope: !12091)
!12093 = !DILocation(line: 238, column: 62, scope: !12091)
!12094 = !DILocation(line: 238, column: 92, scope: !12091)
!12095 = !DILocation(line: 238, column: 62, scope: !1510)
!12096 = !DILocation(line: 238, column: 62, scope: !12097)
!12097 = !DILexicalBlockFile(scope: !1510, file: !1474, discriminator: 2)
!12098 = !DILocation(line: 238, column: 123, scope: !12099)
!12099 = !DILexicalBlockFile(scope: !12091, file: !1474, discriminator: 3)
!12100 = !DILocation(line: 238, column: 141, scope: !12091)
!12101 = !DILocation(line: 238, column: 151, scope: !12091)
!12102 = !DILocation(line: 238, column: 176, scope: !12091)
!12103 = !DILocation(line: 238, column: 107, scope: !12091)
!12104 = !DILocation(line: 238, column: 195, scope: !12105)
!12105 = !DILexicalBlockFile(scope: !1473, file: !1474, discriminator: 4)
!12106 = !DILocation(line: 238, column: 195, scope: !1510)
!12107 = !DILocation(line: 238, column: 195, scope: !12108)
!12108 = !DILexicalBlockFile(scope: !1510, file: !1474, discriminator: 5)
!12109 = !DILocation(line: 239, column: 5, scope: !1473)
!12110 = !DILocation(line: 240, column: 1, scope: !1473)
!12111 = !DILocation(line: 287, column: 28, scope: !1511)
!12112 = !DILocation(line: 288, column: 30, scope: !1511)
!12113 = !DILocation(line: 288, column: 46, scope: !1511)
!12114 = !DILocation(line: 289, column: 30, scope: !1511)
!12115 = !DILocation(line: 289, column: 46, scope: !1511)
!12116 = !DILocation(line: 290, column: 29, scope: !1511)
!12117 = !DILocation(line: 292, column: 5, scope: !1511)
!12118 = !DILocation(line: 292, column: 16, scope: !1511)
!12119 = !DILocation(line: 292, column: 19, scope: !1511)
!12120 = !DILocation(line: 292, column: 24, scope: !1511)
!12121 = !DILocation(line: 293, column: 5, scope: !1511)
!12122 = !DILocation(line: 293, column: 15, scope: !1511)
!12123 = !DILocation(line: 293, column: 22, scope: !1511)
!12124 = !DILocation(line: 295, column: 9, scope: !12125)
!12125 = distinct !DILexicalBlock(scope: !1511, file: !1474, line: 295, column: 9)
!12126 = !DILocation(line: 295, column: 17, scope: !12125)
!12127 = !DILocation(line: 295, column: 9, scope: !1511)
!12128 = !DILocation(line: 296, column: 25, scope: !12129)
!12129 = distinct !DILexicalBlock(scope: !12125, file: !1474, line: 295, column: 23)
!12130 = !DILocation(line: 296, column: 9, scope: !12129)
!12131 = !DILocation(line: 297, column: 9, scope: !12129)
!12132 = !DILocation(line: 299, column: 14, scope: !12133)
!12133 = distinct !DILexicalBlock(scope: !12125, file: !1474, line: 299, column: 14)
!12134 = !DILocation(line: 299, column: 22, scope: !12133)
!12135 = !DILocation(line: 299, column: 14, scope: !12125)
!12136 = !DILocation(line: 300, column: 38, scope: !12133)
!12137 = !DILocation(line: 300, column: 47, scope: !12133)
!12138 = !DILocation(line: 300, column: 52, scope: !12133)
!12139 = !DILocation(line: 300, column: 61, scope: !12133)
!12140 = !DILocation(line: 300, column: 69, scope: !12133)
!12141 = !DILocation(line: 300, column: 16, scope: !12133)
!12142 = !DILocation(line: 300, column: 9, scope: !12133)
!12143 = !DILocation(line: 302, column: 24, scope: !1511)
!12144 = !DILocation(line: 302, column: 33, scope: !1511)
!12145 = !DILocation(line: 302, column: 24, scope: !12146)
!12146 = !DILexicalBlockFile(scope: !1511, file: !1474, discriminator: 1)
!12147 = !DILocation(line: 302, column: 46, scope: !12148)
!12148 = !DILexicalBlockFile(scope: !1511, file: !1474, discriminator: 2)
!12149 = !DILocation(line: 302, column: 54, scope: !1511)
!12150 = !DILocation(line: 302, column: 12, scope: !12151)
!12151 = !DILexicalBlockFile(scope: !12152, file: !1474, discriminator: 4)
!12152 = !DILexicalBlockFile(scope: !1511, file: !1474, discriminator: 3)
!12153 = !DILocation(line: 302, column: 10, scope: !1511)
!12154 = !DILocation(line: 303, column: 9, scope: !12155)
!12155 = distinct !DILexicalBlock(scope: !1511, file: !1474, line: 303, column: 9)
!12156 = !DILocation(line: 303, column: 14, scope: !12155)
!12157 = !DILocation(line: 303, column: 9, scope: !1511)
!12158 = !DILocation(line: 304, column: 9, scope: !12155)
!12159 = !DILocation(line: 306, column: 9, scope: !1511)
!12160 = !DILocation(line: 306, column: 7, scope: !1511)
!12161 = !DILocation(line: 307, column: 5, scope: !1511)
!12162 = !DILocation(line: 307, column: 20, scope: !12163)
!12163 = !DILexicalBlockFile(scope: !12146, file: !1474, discriminator: 2)
!12164 = !DILocation(line: 307, column: 23, scope: !1511)
!12165 = !DILocation(line: 308, column: 26, scope: !1533)
!12166 = !DILocation(line: 308, column: 31, scope: !1533)
!12167 = !DILocation(line: 308, column: 34, scope: !1533)
!12168 = !DILocation(line: 308, column: 39, scope: !1533)
!12169 = !DILocation(line: 308, column: 15, scope: !1533)
!12170 = !DILocation(line: 308, column: 13, scope: !1533)
!12171 = !DILocation(line: 309, column: 13, scope: !12172)
!12172 = distinct !DILexicalBlock(scope: !1533, file: !1474, line: 309, column: 13)
!12173 = !DILocation(line: 309, column: 17, scope: !12172)
!12174 = !DILocation(line: 309, column: 13, scope: !1533)
!12175 = !DILocation(line: 310, column: 13, scope: !12172)
!12176 = !DILocation(line: 311, column: 48, scope: !1532)
!12177 = !DILocation(line: 311, column: 56, scope: !1532)
!12178 = !DILocation(line: 311, column: 62, scope: !1532)
!12179 = !DILocation(line: 311, column: 60, scope: !1532)
!12180 = !DILocation(line: 311, column: 53, scope: !1532)
!12181 = !DILocation(line: 311, column: 73, scope: !1532)
!12182 = !DILocation(line: 311, column: 79, scope: !1532)
!12183 = !DILocation(line: 311, column: 85, scope: !1532)
!12184 = !DILocation(line: 311, column: 83, scope: !1532)
!12185 = !DILocation(line: 311, column: 76, scope: !1532)
!12186 = !DILocation(line: 311, column: 17, scope: !1532)
!12187 = !DILocation(line: 311, column: 15, scope: !1532)
!12188 = !DILocation(line: 311, column: 100, scope: !12189)
!12189 = distinct !DILexicalBlock(scope: !1532, file: !1474, line: 311, column: 100)
!12190 = !DILocation(line: 311, column: 104, scope: !12189)
!12191 = !DILocation(line: 311, column: 100, scope: !1532)
!12192 = !DILocation(line: 311, column: 119, scope: !12193)
!12193 = !DILexicalBlockFile(scope: !12189, file: !1474, discriminator: 1)
!12194 = !DILocation(line: 311, column: 137, scope: !12195)
!12195 = !DILexicalBlockFile(scope: !1531, file: !1474, discriminator: 2)
!12196 = !DILocation(line: 311, column: 143, scope: !1531)
!12197 = !DILocation(line: 311, column: 137, scope: !1532)
!12198 = !DILocation(line: 311, column: 196, scope: !12199)
!12199 = !DILexicalBlockFile(scope: !12200, file: !1474, discriminator: 3)
!12200 = distinct !DILexicalBlock(scope: !1531, file: !1474, line: 311, column: 149)
!12201 = !DILocation(line: 311, column: 186, scope: !12200)
!12202 = !DILocation(line: 311, column: 170, scope: !12200)
!12203 = !DILocation(line: 311, column: 153, scope: !12200)
!12204 = !DILocation(line: 311, column: 178, scope: !12200)
!12205 = !DILocation(line: 311, column: 152, scope: !12200)
!12206 = !DILocation(line: 311, column: 193, scope: !12200)
!12207 = !DILocation(line: 311, column: 203, scope: !12200)
!12208 = !DILocation(line: 311, column: 230, scope: !12209)
!12209 = !DILexicalBlockFile(scope: !1529, file: !1474, discriminator: 4)
!12210 = !DILocation(line: 311, column: 236, scope: !1529)
!12211 = !DILocation(line: 311, column: 216, scope: !1529)
!12212 = !DILocation(line: 311, column: 216, scope: !1530)
!12213 = !DILocation(line: 311, column: 244, scope: !12214)
!12214 = !DILexicalBlockFile(scope: !1528, file: !1474, discriminator: 6)
!12215 = !DILocation(line: 311, column: 249, scope: !12216)
!12216 = !DILexicalBlockFile(scope: !1527, file: !1474, discriminator: 8)
!12217 = !DILocation(line: 311, column: 259, scope: !1527)
!12218 = !DILocation(line: 311, column: 289, scope: !1527)
!12219 = !DILocation(line: 311, column: 303, scope: !12220)
!12220 = distinct !DILexicalBlock(scope: !1527, file: !1474, line: 311, column: 300)
!12221 = !DILocation(line: 311, column: 320, scope: !12220)
!12222 = !DILocation(line: 311, column: 300, scope: !12220)
!12223 = !DILocation(line: 311, column: 330, scope: !12220)
!12224 = !DILocation(line: 311, column: 300, scope: !1527)
!12225 = !DILocation(line: 311, column: 300, scope: !12226)
!12226 = !DILexicalBlockFile(scope: !1527, file: !1474, discriminator: 9)
!12227 = !DILocation(line: 311, column: 361, scope: !12228)
!12228 = !DILexicalBlockFile(scope: !12220, file: !1474, discriminator: 10)
!12229 = !DILocation(line: 311, column: 379, scope: !12220)
!12230 = !DILocation(line: 311, column: 389, scope: !12220)
!12231 = !DILocation(line: 311, column: 414, scope: !12220)
!12232 = !DILocation(line: 311, column: 345, scope: !12220)
!12233 = !DILocation(line: 311, column: 433, scope: !12234)
!12234 = !DILexicalBlockFile(scope: !1528, file: !1474, discriminator: 11)
!12235 = !DILocation(line: 311, column: 433, scope: !1527)
!12236 = !DILocation(line: 311, column: 433, scope: !12237)
!12237 = !DILexicalBlockFile(scope: !1527, file: !1474, discriminator: 12)
!12238 = !DILocation(line: 311, column: 446, scope: !12239)
!12239 = !DILexicalBlockFile(scope: !1528, file: !1474, discriminator: 13)
!12240 = !DILocation(line: 311, column: 467, scope: !12241)
!12241 = !DILexicalBlockFile(scope: !1529, file: !1474, discriminator: 7)
!12242 = !DILocation(line: 311, column: 472, scope: !12243)
!12243 = !DILexicalBlockFile(scope: !1535, file: !1474, discriminator: 14)
!12244 = !DILocation(line: 311, column: 482, scope: !1535)
!12245 = !DILocation(line: 311, column: 512, scope: !1535)
!12246 = !DILocation(line: 311, column: 526, scope: !12247)
!12247 = distinct !DILexicalBlock(scope: !1535, file: !1474, line: 311, column: 523)
!12248 = !DILocation(line: 311, column: 543, scope: !12247)
!12249 = !DILocation(line: 311, column: 523, scope: !12247)
!12250 = !DILocation(line: 311, column: 553, scope: !12247)
!12251 = !DILocation(line: 311, column: 523, scope: !1535)
!12252 = !DILocation(line: 311, column: 523, scope: !12253)
!12253 = !DILexicalBlockFile(scope: !1535, file: !1474, discriminator: 15)
!12254 = !DILocation(line: 311, column: 584, scope: !12255)
!12255 = !DILexicalBlockFile(scope: !12247, file: !1474, discriminator: 16)
!12256 = !DILocation(line: 311, column: 602, scope: !12247)
!12257 = !DILocation(line: 311, column: 612, scope: !12247)
!12258 = !DILocation(line: 311, column: 637, scope: !12247)
!12259 = !DILocation(line: 311, column: 568, scope: !12247)
!12260 = !DILocation(line: 311, column: 656, scope: !12261)
!12261 = !DILexicalBlockFile(scope: !1529, file: !1474, discriminator: 17)
!12262 = !DILocation(line: 311, column: 656, scope: !1535)
!12263 = !DILocation(line: 311, column: 656, scope: !12264)
!12264 = !DILexicalBlockFile(scope: !1535, file: !1474, discriminator: 18)
!12265 = !DILocation(line: 311, column: 676, scope: !12266)
!12266 = !DILexicalBlockFile(scope: !1532, file: !1474, discriminator: 5)
!12267 = !DILocation(line: 312, column: 13, scope: !1533)
!12268 = !DILocation(line: 312, column: 11, scope: !1533)
!12269 = !DILocation(line: 323, column: 48, scope: !1542)
!12270 = !DILocation(line: 323, column: 53, scope: !1542)
!12271 = !DILocation(line: 323, column: 61, scope: !1542)
!12272 = !DILocation(line: 323, column: 64, scope: !1542)
!12273 = !DILocation(line: 323, column: 17, scope: !1542)
!12274 = !DILocation(line: 323, column: 15, scope: !1542)
!12275 = !DILocation(line: 323, column: 76, scope: !12276)
!12276 = distinct !DILexicalBlock(scope: !1542, file: !1474, line: 323, column: 76)
!12277 = !DILocation(line: 323, column: 80, scope: !12276)
!12278 = !DILocation(line: 323, column: 76, scope: !1542)
!12279 = !DILocation(line: 323, column: 95, scope: !12280)
!12280 = !DILexicalBlockFile(scope: !12276, file: !1474, discriminator: 1)
!12281 = !DILocation(line: 323, column: 113, scope: !12282)
!12282 = !DILexicalBlockFile(scope: !1541, file: !1474, discriminator: 2)
!12283 = !DILocation(line: 323, column: 119, scope: !1541)
!12284 = !DILocation(line: 323, column: 113, scope: !1542)
!12285 = !DILocation(line: 323, column: 172, scope: !12286)
!12286 = !DILexicalBlockFile(scope: !12287, file: !1474, discriminator: 3)
!12287 = distinct !DILexicalBlock(scope: !1541, file: !1474, line: 323, column: 125)
!12288 = !DILocation(line: 323, column: 162, scope: !12287)
!12289 = !DILocation(line: 323, column: 146, scope: !12287)
!12290 = !DILocation(line: 323, column: 129, scope: !12287)
!12291 = !DILocation(line: 323, column: 154, scope: !12287)
!12292 = !DILocation(line: 323, column: 128, scope: !12287)
!12293 = !DILocation(line: 323, column: 169, scope: !12287)
!12294 = !DILocation(line: 323, column: 179, scope: !12287)
!12295 = !DILocation(line: 323, column: 206, scope: !12296)
!12296 = !DILexicalBlockFile(scope: !1539, file: !1474, discriminator: 4)
!12297 = !DILocation(line: 323, column: 212, scope: !1539)
!12298 = !DILocation(line: 323, column: 192, scope: !1539)
!12299 = !DILocation(line: 323, column: 192, scope: !1540)
!12300 = !DILocation(line: 323, column: 220, scope: !12301)
!12301 = !DILexicalBlockFile(scope: !1538, file: !1474, discriminator: 6)
!12302 = !DILocation(line: 323, column: 225, scope: !12303)
!12303 = !DILexicalBlockFile(scope: !1537, file: !1474, discriminator: 8)
!12304 = !DILocation(line: 323, column: 235, scope: !1537)
!12305 = !DILocation(line: 323, column: 265, scope: !1537)
!12306 = !DILocation(line: 323, column: 279, scope: !12307)
!12307 = distinct !DILexicalBlock(scope: !1537, file: !1474, line: 323, column: 276)
!12308 = !DILocation(line: 323, column: 296, scope: !12307)
!12309 = !DILocation(line: 323, column: 276, scope: !12307)
!12310 = !DILocation(line: 323, column: 306, scope: !12307)
!12311 = !DILocation(line: 323, column: 276, scope: !1537)
!12312 = !DILocation(line: 323, column: 276, scope: !12313)
!12313 = !DILexicalBlockFile(scope: !1537, file: !1474, discriminator: 9)
!12314 = !DILocation(line: 323, column: 337, scope: !12315)
!12315 = !DILexicalBlockFile(scope: !12307, file: !1474, discriminator: 10)
!12316 = !DILocation(line: 323, column: 355, scope: !12307)
!12317 = !DILocation(line: 323, column: 365, scope: !12307)
!12318 = !DILocation(line: 323, column: 390, scope: !12307)
!12319 = !DILocation(line: 323, column: 321, scope: !12307)
!12320 = !DILocation(line: 323, column: 409, scope: !12321)
!12321 = !DILexicalBlockFile(scope: !1538, file: !1474, discriminator: 11)
!12322 = !DILocation(line: 323, column: 409, scope: !1537)
!12323 = !DILocation(line: 323, column: 409, scope: !12324)
!12324 = !DILexicalBlockFile(scope: !1537, file: !1474, discriminator: 12)
!12325 = !DILocation(line: 323, column: 422, scope: !12326)
!12326 = !DILexicalBlockFile(scope: !1538, file: !1474, discriminator: 13)
!12327 = !DILocation(line: 323, column: 443, scope: !12328)
!12328 = !DILexicalBlockFile(scope: !1539, file: !1474, discriminator: 7)
!12329 = !DILocation(line: 323, column: 448, scope: !12330)
!12330 = !DILexicalBlockFile(scope: !1545, file: !1474, discriminator: 14)
!12331 = !DILocation(line: 323, column: 458, scope: !1545)
!12332 = !DILocation(line: 323, column: 488, scope: !1545)
!12333 = !DILocation(line: 323, column: 502, scope: !12334)
!12334 = distinct !DILexicalBlock(scope: !1545, file: !1474, line: 323, column: 499)
!12335 = !DILocation(line: 323, column: 519, scope: !12334)
!12336 = !DILocation(line: 323, column: 499, scope: !12334)
!12337 = !DILocation(line: 323, column: 529, scope: !12334)
!12338 = !DILocation(line: 323, column: 499, scope: !1545)
!12339 = !DILocation(line: 323, column: 499, scope: !12340)
!12340 = !DILexicalBlockFile(scope: !1545, file: !1474, discriminator: 15)
!12341 = !DILocation(line: 323, column: 560, scope: !12342)
!12342 = !DILexicalBlockFile(scope: !12334, file: !1474, discriminator: 16)
!12343 = !DILocation(line: 323, column: 578, scope: !12334)
!12344 = !DILocation(line: 323, column: 588, scope: !12334)
!12345 = !DILocation(line: 323, column: 613, scope: !12334)
!12346 = !DILocation(line: 323, column: 544, scope: !12334)
!12347 = !DILocation(line: 323, column: 632, scope: !12348)
!12348 = !DILexicalBlockFile(scope: !1539, file: !1474, discriminator: 17)
!12349 = !DILocation(line: 323, column: 632, scope: !1545)
!12350 = !DILocation(line: 323, column: 632, scope: !12351)
!12351 = !DILexicalBlockFile(scope: !1545, file: !1474, discriminator: 18)
!12352 = !DILocation(line: 323, column: 652, scope: !12353)
!12353 = !DILexicalBlockFile(scope: !1542, file: !1474, discriminator: 5)
!12354 = !DILocation(line: 325, column: 41, scope: !1511)
!12355 = !DILocation(line: 325, column: 22, scope: !1511)
!12356 = !DILocation(line: 325, column: 7, scope: !1511)
!12357 = !DILocation(line: 325, column: 30, scope: !1511)
!12358 = !DILocation(line: 325, column: 39, scope: !1511)
!12359 = !DILocation(line: 326, column: 24, scope: !12360)
!12360 = distinct !DILexicalBlock(scope: !1511, file: !1474, line: 326, column: 9)
!12361 = !DILocation(line: 326, column: 9, scope: !12360)
!12362 = !DILocation(line: 326, column: 30, scope: !12360)
!12363 = !DILocation(line: 326, column: 9, scope: !1511)
!12364 = !DILocation(line: 327, column: 9, scope: !12360)
!12365 = !DILocation(line: 328, column: 12, scope: !1511)
!12366 = !DILocation(line: 328, column: 5, scope: !1511)
!12367 = !DILocation(line: 331, column: 5, scope: !1511)
!12368 = !DILocation(line: 331, column: 10, scope: !12369)
!12369 = !DILexicalBlockFile(scope: !1547, file: !1474, discriminator: 1)
!12370 = !DILocation(line: 331, column: 20, scope: !1547)
!12371 = !DILocation(line: 331, column: 50, scope: !1547)
!12372 = !DILocation(line: 331, column: 65, scope: !12373)
!12373 = distinct !DILexicalBlock(scope: !1547, file: !1474, line: 331, column: 62)
!12374 = !DILocation(line: 331, column: 82, scope: !12373)
!12375 = !DILocation(line: 331, column: 62, scope: !12373)
!12376 = !DILocation(line: 331, column: 92, scope: !12373)
!12377 = !DILocation(line: 331, column: 62, scope: !1547)
!12378 = !DILocation(line: 331, column: 62, scope: !12379)
!12379 = !DILexicalBlockFile(scope: !1547, file: !1474, discriminator: 2)
!12380 = !DILocation(line: 331, column: 123, scope: !12381)
!12381 = !DILexicalBlockFile(scope: !12373, file: !1474, discriminator: 3)
!12382 = !DILocation(line: 331, column: 141, scope: !12373)
!12383 = !DILocation(line: 331, column: 151, scope: !12373)
!12384 = !DILocation(line: 331, column: 176, scope: !12373)
!12385 = !DILocation(line: 331, column: 107, scope: !12373)
!12386 = !DILocation(line: 331, column: 195, scope: !12387)
!12387 = !DILexicalBlockFile(scope: !1511, file: !1474, discriminator: 4)
!12388 = !DILocation(line: 331, column: 195, scope: !1547)
!12389 = !DILocation(line: 331, column: 195, scope: !12390)
!12390 = !DILexicalBlockFile(scope: !1547, file: !1474, discriminator: 5)
!12391 = !DILocation(line: 332, column: 5, scope: !1511)
!12392 = !DILocation(line: 333, column: 1, scope: !1511)
!12393 = !DILocation(line: 243, column: 33, scope: !1548)
!12394 = !DILocation(line: 244, column: 35, scope: !1548)
!12395 = !DILocation(line: 244, column: 51, scope: !1548)
!12396 = !DILocation(line: 245, column: 34, scope: !1548)
!12397 = !DILocation(line: 246, column: 34, scope: !1548)
!12398 = !DILocation(line: 248, column: 5, scope: !1548)
!12399 = !DILocation(line: 248, column: 16, scope: !1548)
!12400 = !DILocation(line: 248, column: 19, scope: !1548)
!12401 = !DILocation(line: 248, column: 22, scope: !1548)
!12402 = !DILocation(line: 249, column: 5, scope: !1548)
!12403 = !DILocation(line: 249, column: 15, scope: !1548)
!12404 = !DILocation(line: 249, column: 34, scope: !1548)
!12405 = !DILocation(line: 249, column: 43, scope: !1548)
!12406 = !DILocation(line: 249, column: 34, scope: !12407)
!12407 = !DILexicalBlockFile(scope: !1548, file: !1474, discriminator: 1)
!12408 = !DILocation(line: 249, column: 56, scope: !12409)
!12409 = !DILexicalBlockFile(scope: !1548, file: !1474, discriminator: 2)
!12410 = !DILocation(line: 249, column: 64, scope: !1548)
!12411 = !DILocation(line: 249, column: 22, scope: !12412)
!12412 = !DILexicalBlockFile(scope: !12413, file: !1474, discriminator: 4)
!12413 = !DILexicalBlockFile(scope: !1548, file: !1474, discriminator: 3)
!12414 = !DILocation(line: 250, column: 5, scope: !1548)
!12415 = !DILocation(line: 250, column: 15, scope: !1548)
!12416 = !DILocation(line: 252, column: 9, scope: !12417)
!12417 = distinct !DILexicalBlock(scope: !1548, file: !1474, line: 252, column: 9)
!12418 = !DILocation(line: 252, column: 14, scope: !12417)
!12419 = !DILocation(line: 252, column: 9, scope: !1548)
!12420 = !DILocation(line: 253, column: 9, scope: !12417)
!12421 = !DILocation(line: 255, column: 13, scope: !1548)
!12422 = !DILocation(line: 255, column: 21, scope: !1548)
!12423 = !DILocation(line: 255, column: 11, scope: !1548)
!12424 = !DILocation(line: 255, column: 7, scope: !1548)
!12425 = !DILocation(line: 256, column: 5, scope: !1548)
!12426 = !DILocation(line: 256, column: 13, scope: !12427)
!12427 = !DILexicalBlockFile(scope: !12407, file: !1474, discriminator: 4)
!12428 = !DILocation(line: 256, column: 15, scope: !1548)
!12429 = !DILocation(line: 256, column: 21, scope: !1548)
!12430 = !DILocation(line: 256, column: 33, scope: !12409)
!12431 = !DILocation(line: 256, column: 36, scope: !1548)
!12432 = !DILocation(line: 256, column: 5, scope: !12413)
!12433 = !DILocation(line: 257, column: 9, scope: !1574)
!12434 = !DILocation(line: 257, column: 15, scope: !12435)
!12435 = !DILexicalBlockFile(scope: !12436, file: !1474, discriminator: 2)
!12436 = !DILexicalBlockFile(scope: !1572, file: !1474, discriminator: 1)
!12437 = !DILocation(line: 257, column: 17, scope: !1572)
!12438 = !DILocation(line: 257, column: 9, scope: !1573)
!12439 = !DILocation(line: 258, column: 21, scope: !1570)
!12440 = !DILocation(line: 258, column: 17, scope: !1570)
!12441 = !DILocation(line: 258, column: 27, scope: !1570)
!12442 = !DILocation(line: 258, column: 24, scope: !1570)
!12443 = !DILocation(line: 258, column: 17, scope: !1571)
!12444 = !DILocation(line: 259, column: 56, scope: !1568)
!12445 = !DILocation(line: 259, column: 64, scope: !1568)
!12446 = !DILocation(line: 259, column: 66, scope: !1568)
!12447 = !DILocation(line: 259, column: 61, scope: !1568)
!12448 = !DILocation(line: 259, column: 73, scope: !1568)
!12449 = !DILocation(line: 259, column: 75, scope: !1568)
!12450 = !DILocation(line: 259, column: 83, scope: !1568)
!12451 = !DILocation(line: 259, column: 85, scope: !1568)
!12452 = !DILocation(line: 259, column: 80, scope: !1568)
!12453 = !DILocation(line: 259, column: 25, scope: !1568)
!12454 = !DILocation(line: 259, column: 23, scope: !1568)
!12455 = !DILocation(line: 259, column: 96, scope: !12456)
!12456 = distinct !DILexicalBlock(scope: !1568, file: !1474, line: 259, column: 96)
!12457 = !DILocation(line: 259, column: 100, scope: !12456)
!12458 = !DILocation(line: 259, column: 96, scope: !1568)
!12459 = !DILocation(line: 259, column: 115, scope: !12460)
!12460 = !DILexicalBlockFile(scope: !12456, file: !1474, discriminator: 1)
!12461 = !DILocation(line: 259, column: 133, scope: !12462)
!12462 = !DILexicalBlockFile(scope: !1567, file: !1474, discriminator: 2)
!12463 = !DILocation(line: 259, column: 139, scope: !1567)
!12464 = !DILocation(line: 259, column: 133, scope: !1568)
!12465 = !DILocation(line: 259, column: 192, scope: !12466)
!12466 = !DILexicalBlockFile(scope: !12467, file: !1474, discriminator: 3)
!12467 = distinct !DILexicalBlock(scope: !1567, file: !1474, line: 259, column: 145)
!12468 = !DILocation(line: 259, column: 182, scope: !12467)
!12469 = !DILocation(line: 259, column: 166, scope: !12467)
!12470 = !DILocation(line: 259, column: 149, scope: !12467)
!12471 = !DILocation(line: 259, column: 174, scope: !12467)
!12472 = !DILocation(line: 259, column: 148, scope: !12467)
!12473 = !DILocation(line: 259, column: 189, scope: !12467)
!12474 = !DILocation(line: 259, column: 199, scope: !12467)
!12475 = !DILocation(line: 259, column: 226, scope: !12476)
!12476 = !DILexicalBlockFile(scope: !1565, file: !1474, discriminator: 4)
!12477 = !DILocation(line: 259, column: 232, scope: !1565)
!12478 = !DILocation(line: 259, column: 212, scope: !1565)
!12479 = !DILocation(line: 259, column: 212, scope: !1566)
!12480 = !DILocation(line: 259, column: 240, scope: !12481)
!12481 = !DILexicalBlockFile(scope: !1564, file: !1474, discriminator: 6)
!12482 = !DILocation(line: 259, column: 245, scope: !12483)
!12483 = !DILexicalBlockFile(scope: !1563, file: !1474, discriminator: 8)
!12484 = !DILocation(line: 259, column: 255, scope: !1563)
!12485 = !DILocation(line: 259, column: 285, scope: !1563)
!12486 = !DILocation(line: 259, column: 299, scope: !12487)
!12487 = distinct !DILexicalBlock(scope: !1563, file: !1474, line: 259, column: 296)
!12488 = !DILocation(line: 259, column: 316, scope: !12487)
!12489 = !DILocation(line: 259, column: 296, scope: !12487)
!12490 = !DILocation(line: 259, column: 326, scope: !12487)
!12491 = !DILocation(line: 259, column: 296, scope: !1563)
!12492 = !DILocation(line: 259, column: 296, scope: !12493)
!12493 = !DILexicalBlockFile(scope: !1563, file: !1474, discriminator: 9)
!12494 = !DILocation(line: 259, column: 357, scope: !12495)
!12495 = !DILexicalBlockFile(scope: !12487, file: !1474, discriminator: 10)
!12496 = !DILocation(line: 259, column: 375, scope: !12487)
!12497 = !DILocation(line: 259, column: 385, scope: !12487)
!12498 = !DILocation(line: 259, column: 410, scope: !12487)
!12499 = !DILocation(line: 259, column: 341, scope: !12487)
!12500 = !DILocation(line: 259, column: 429, scope: !12501)
!12501 = !DILexicalBlockFile(scope: !1564, file: !1474, discriminator: 11)
!12502 = !DILocation(line: 259, column: 429, scope: !1563)
!12503 = !DILocation(line: 259, column: 429, scope: !12504)
!12504 = !DILexicalBlockFile(scope: !1563, file: !1474, discriminator: 12)
!12505 = !DILocation(line: 259, column: 442, scope: !12506)
!12506 = !DILexicalBlockFile(scope: !1564, file: !1474, discriminator: 13)
!12507 = !DILocation(line: 259, column: 463, scope: !12508)
!12508 = !DILexicalBlockFile(scope: !1565, file: !1474, discriminator: 7)
!12509 = !DILocation(line: 259, column: 468, scope: !12510)
!12510 = !DILexicalBlockFile(scope: !1576, file: !1474, discriminator: 14)
!12511 = !DILocation(line: 259, column: 478, scope: !1576)
!12512 = !DILocation(line: 259, column: 508, scope: !1576)
!12513 = !DILocation(line: 259, column: 522, scope: !12514)
!12514 = distinct !DILexicalBlock(scope: !1576, file: !1474, line: 259, column: 519)
!12515 = !DILocation(line: 259, column: 539, scope: !12514)
!12516 = !DILocation(line: 259, column: 519, scope: !12514)
!12517 = !DILocation(line: 259, column: 549, scope: !12514)
!12518 = !DILocation(line: 259, column: 519, scope: !1576)
!12519 = !DILocation(line: 259, column: 519, scope: !12520)
!12520 = !DILexicalBlockFile(scope: !1576, file: !1474, discriminator: 15)
!12521 = !DILocation(line: 259, column: 580, scope: !12522)
!12522 = !DILexicalBlockFile(scope: !12514, file: !1474, discriminator: 16)
!12523 = !DILocation(line: 259, column: 598, scope: !12514)
!12524 = !DILocation(line: 259, column: 608, scope: !12514)
!12525 = !DILocation(line: 259, column: 633, scope: !12514)
!12526 = !DILocation(line: 259, column: 564, scope: !12514)
!12527 = !DILocation(line: 259, column: 652, scope: !12528)
!12528 = !DILexicalBlockFile(scope: !1565, file: !1474, discriminator: 17)
!12529 = !DILocation(line: 259, column: 652, scope: !1576)
!12530 = !DILocation(line: 259, column: 652, scope: !12531)
!12531 = !DILexicalBlockFile(scope: !1576, file: !1474, discriminator: 18)
!12532 = !DILocation(line: 259, column: 672, scope: !12533)
!12533 = !DILexicalBlockFile(scope: !1568, file: !1474, discriminator: 5)
!12534 = !DILocation(line: 260, column: 25, scope: !1569)
!12535 = !DILocation(line: 260, column: 27, scope: !1569)
!12536 = !DILocation(line: 260, column: 23, scope: !1569)
!12537 = !DILocation(line: 260, column: 19, scope: !1569)
!12538 = !DILocation(line: 261, column: 17, scope: !1569)
!12539 = !DILocation(line: 263, column: 9, scope: !1571)
!12540 = !DILocation(line: 257, column: 24, scope: !1572)
!12541 = !DILocation(line: 257, column: 9, scope: !1572)
!12542 = !DILocation(line: 273, column: 9, scope: !1585)
!12543 = !DILocation(line: 273, column: 11, scope: !1585)
!12544 = !DILocation(line: 273, column: 9, scope: !1548)
!12545 = !DILocation(line: 274, column: 48, scope: !1583)
!12546 = !DILocation(line: 274, column: 53, scope: !1583)
!12547 = !DILocation(line: 274, column: 61, scope: !1583)
!12548 = !DILocation(line: 274, column: 63, scope: !1583)
!12549 = !DILocation(line: 274, column: 68, scope: !1583)
!12550 = !DILocation(line: 274, column: 17, scope: !1583)
!12551 = !DILocation(line: 274, column: 15, scope: !1583)
!12552 = !DILocation(line: 274, column: 80, scope: !12553)
!12553 = distinct !DILexicalBlock(scope: !1583, file: !1474, line: 274, column: 80)
!12554 = !DILocation(line: 274, column: 84, scope: !12553)
!12555 = !DILocation(line: 274, column: 80, scope: !1583)
!12556 = !DILocation(line: 274, column: 99, scope: !12557)
!12557 = !DILexicalBlockFile(scope: !12553, file: !1474, discriminator: 1)
!12558 = !DILocation(line: 274, column: 117, scope: !12559)
!12559 = !DILexicalBlockFile(scope: !1582, file: !1474, discriminator: 2)
!12560 = !DILocation(line: 274, column: 123, scope: !1582)
!12561 = !DILocation(line: 274, column: 117, scope: !1583)
!12562 = !DILocation(line: 274, column: 176, scope: !12563)
!12563 = !DILexicalBlockFile(scope: !12564, file: !1474, discriminator: 3)
!12564 = distinct !DILexicalBlock(scope: !1582, file: !1474, line: 274, column: 129)
!12565 = !DILocation(line: 274, column: 166, scope: !12564)
!12566 = !DILocation(line: 274, column: 150, scope: !12564)
!12567 = !DILocation(line: 274, column: 133, scope: !12564)
!12568 = !DILocation(line: 274, column: 158, scope: !12564)
!12569 = !DILocation(line: 274, column: 132, scope: !12564)
!12570 = !DILocation(line: 274, column: 173, scope: !12564)
!12571 = !DILocation(line: 274, column: 183, scope: !12564)
!12572 = !DILocation(line: 274, column: 210, scope: !12573)
!12573 = !DILexicalBlockFile(scope: !1580, file: !1474, discriminator: 4)
!12574 = !DILocation(line: 274, column: 216, scope: !1580)
!12575 = !DILocation(line: 274, column: 196, scope: !1580)
!12576 = !DILocation(line: 274, column: 196, scope: !1581)
!12577 = !DILocation(line: 274, column: 224, scope: !12578)
!12578 = !DILexicalBlockFile(scope: !1579, file: !1474, discriminator: 6)
!12579 = !DILocation(line: 274, column: 229, scope: !12580)
!12580 = !DILexicalBlockFile(scope: !1578, file: !1474, discriminator: 8)
!12581 = !DILocation(line: 274, column: 239, scope: !1578)
!12582 = !DILocation(line: 274, column: 269, scope: !1578)
!12583 = !DILocation(line: 274, column: 283, scope: !12584)
!12584 = distinct !DILexicalBlock(scope: !1578, file: !1474, line: 274, column: 280)
!12585 = !DILocation(line: 274, column: 300, scope: !12584)
!12586 = !DILocation(line: 274, column: 280, scope: !12584)
!12587 = !DILocation(line: 274, column: 310, scope: !12584)
!12588 = !DILocation(line: 274, column: 280, scope: !1578)
!12589 = !DILocation(line: 274, column: 280, scope: !12590)
!12590 = !DILexicalBlockFile(scope: !1578, file: !1474, discriminator: 9)
!12591 = !DILocation(line: 274, column: 341, scope: !12592)
!12592 = !DILexicalBlockFile(scope: !12584, file: !1474, discriminator: 10)
!12593 = !DILocation(line: 274, column: 359, scope: !12584)
!12594 = !DILocation(line: 274, column: 369, scope: !12584)
!12595 = !DILocation(line: 274, column: 394, scope: !12584)
!12596 = !DILocation(line: 274, column: 325, scope: !12584)
!12597 = !DILocation(line: 274, column: 413, scope: !12598)
!12598 = !DILexicalBlockFile(scope: !1579, file: !1474, discriminator: 11)
!12599 = !DILocation(line: 274, column: 413, scope: !1578)
!12600 = !DILocation(line: 274, column: 413, scope: !12601)
!12601 = !DILexicalBlockFile(scope: !1578, file: !1474, discriminator: 12)
!12602 = !DILocation(line: 274, column: 426, scope: !12603)
!12603 = !DILexicalBlockFile(scope: !1579, file: !1474, discriminator: 13)
!12604 = !DILocation(line: 274, column: 447, scope: !12605)
!12605 = !DILexicalBlockFile(scope: !1580, file: !1474, discriminator: 7)
!12606 = !DILocation(line: 274, column: 452, scope: !12607)
!12607 = !DILexicalBlockFile(scope: !1587, file: !1474, discriminator: 14)
!12608 = !DILocation(line: 274, column: 462, scope: !1587)
!12609 = !DILocation(line: 274, column: 492, scope: !1587)
!12610 = !DILocation(line: 274, column: 506, scope: !12611)
!12611 = distinct !DILexicalBlock(scope: !1587, file: !1474, line: 274, column: 503)
!12612 = !DILocation(line: 274, column: 523, scope: !12611)
!12613 = !DILocation(line: 274, column: 503, scope: !12611)
!12614 = !DILocation(line: 274, column: 533, scope: !12611)
!12615 = !DILocation(line: 274, column: 503, scope: !1587)
!12616 = !DILocation(line: 274, column: 503, scope: !12617)
!12617 = !DILexicalBlockFile(scope: !1587, file: !1474, discriminator: 15)
!12618 = !DILocation(line: 274, column: 564, scope: !12619)
!12619 = !DILexicalBlockFile(scope: !12611, file: !1474, discriminator: 16)
!12620 = !DILocation(line: 274, column: 582, scope: !12611)
!12621 = !DILocation(line: 274, column: 592, scope: !12611)
!12622 = !DILocation(line: 274, column: 617, scope: !12611)
!12623 = !DILocation(line: 274, column: 548, scope: !12611)
!12624 = !DILocation(line: 274, column: 636, scope: !12625)
!12625 = !DILexicalBlockFile(scope: !1580, file: !1474, discriminator: 17)
!12626 = !DILocation(line: 274, column: 636, scope: !1587)
!12627 = !DILocation(line: 274, column: 636, scope: !12628)
!12628 = !DILexicalBlockFile(scope: !1587, file: !1474, discriminator: 18)
!12629 = !DILocation(line: 274, column: 656, scope: !12630)
!12630 = !DILexicalBlockFile(scope: !1583, file: !1474, discriminator: 5)
!12631 = !DILocation(line: 275, column: 5, scope: !1584)
!12632 = !DILocation(line: 276, column: 41, scope: !1548)
!12633 = !DILocation(line: 276, column: 22, scope: !1548)
!12634 = !DILocation(line: 276, column: 7, scope: !1548)
!12635 = !DILocation(line: 276, column: 30, scope: !1548)
!12636 = !DILocation(line: 276, column: 39, scope: !1548)
!12637 = !DILocation(line: 277, column: 24, scope: !12638)
!12638 = distinct !DILexicalBlock(scope: !1548, file: !1474, line: 277, column: 9)
!12639 = !DILocation(line: 277, column: 9, scope: !12638)
!12640 = !DILocation(line: 277, column: 30, scope: !12638)
!12641 = !DILocation(line: 277, column: 9, scope: !1548)
!12642 = !DILocation(line: 278, column: 9, scope: !12638)
!12643 = !DILocation(line: 279, column: 12, scope: !1548)
!12644 = !DILocation(line: 279, column: 5, scope: !1548)
!12645 = !DILocation(line: 282, column: 5, scope: !1548)
!12646 = !DILocation(line: 282, column: 10, scope: !12647)
!12647 = !DILexicalBlockFile(scope: !1589, file: !1474, discriminator: 1)
!12648 = !DILocation(line: 282, column: 20, scope: !1589)
!12649 = !DILocation(line: 282, column: 50, scope: !1589)
!12650 = !DILocation(line: 282, column: 65, scope: !12651)
!12651 = distinct !DILexicalBlock(scope: !1589, file: !1474, line: 282, column: 62)
!12652 = !DILocation(line: 282, column: 82, scope: !12651)
!12653 = !DILocation(line: 282, column: 62, scope: !12651)
!12654 = !DILocation(line: 282, column: 92, scope: !12651)
!12655 = !DILocation(line: 282, column: 62, scope: !1589)
!12656 = !DILocation(line: 282, column: 62, scope: !12657)
!12657 = !DILexicalBlockFile(scope: !1589, file: !1474, discriminator: 2)
!12658 = !DILocation(line: 282, column: 123, scope: !12659)
!12659 = !DILexicalBlockFile(scope: !12651, file: !1474, discriminator: 3)
!12660 = !DILocation(line: 282, column: 141, scope: !12651)
!12661 = !DILocation(line: 282, column: 151, scope: !12651)
!12662 = !DILocation(line: 282, column: 176, scope: !12651)
!12663 = !DILocation(line: 282, column: 107, scope: !12651)
!12664 = !DILocation(line: 282, column: 195, scope: !12665)
!12665 = !DILexicalBlockFile(scope: !1548, file: !1474, discriminator: 4)
!12666 = !DILocation(line: 282, column: 195, scope: !1589)
!12667 = !DILocation(line: 282, column: 195, scope: !12668)
!12668 = !DILexicalBlockFile(scope: !1589, file: !1474, discriminator: 5)
!12669 = !DILocation(line: 283, column: 5, scope: !1548)
!12670 = !DILocation(line: 284, column: 1, scope: !1548)
!12671 = !DILocation(line: 2470, column: 21, scope: !1601)
!12672 = !DILocation(line: 2470, column: 39, scope: !1601)
!12673 = !DILocation(line: 2471, column: 21, scope: !1601)
!12674 = !DILocation(line: 2471, column: 40, scope: !1601)
!12675 = !DILocation(line: 2473, column: 5, scope: !1601)
!12676 = !DILocation(line: 2473, column: 16, scope: !1601)
!12677 = !DILocation(line: 2473, column: 20, scope: !1601)
!12678 = !DILocation(line: 2473, column: 27, scope: !1601)
!12679 = !DILocation(line: 2474, column: 5, scope: !1601)
!12680 = !DILocation(line: 2474, column: 12, scope: !12681)
!12681 = !DILexicalBlockFile(scope: !12682, file: !458, discriminator: 4)
!12682 = !DILexicalBlockFile(scope: !1601, file: !458, discriminator: 1)
!12683 = !DILocation(line: 2474, column: 14, scope: !1601)
!12684 = !DILocation(line: 2474, column: 19, scope: !1601)
!12685 = !DILocation(line: 2474, column: 29, scope: !12686)
!12686 = !DILexicalBlockFile(scope: !1601, file: !458, discriminator: 2)
!12687 = !DILocation(line: 2474, column: 59, scope: !1601)
!12688 = !DILocation(line: 2474, column: 53, scope: !1601)
!12689 = !DILocation(line: 2474, column: 37, scope: !1601)
!12690 = !DILocation(line: 2474, column: 63, scope: !1601)
!12691 = !DILocation(line: 2474, column: 22, scope: !1601)
!12692 = !DILocation(line: 2474, column: 5, scope: !12693)
!12693 = !DILexicalBlockFile(scope: !1601, file: !458, discriminator: 3)
!12694 = !DILocation(line: 2475, column: 10, scope: !1601)
!12695 = !DILocation(line: 2476, column: 12, scope: !1601)
!12696 = !DILocation(line: 2476, column: 14, scope: !1601)
!12697 = !DILocation(line: 2477, column: 1, scope: !1601)
!12698 = !DILocation(line: 2476, column: 5, scope: !1601)
!12699 = !DILocation(line: 54, column: 38, scope: !1621)
!12700 = !DILocation(line: 55, column: 40, scope: !1621)
!12701 = !DILocation(line: 55, column: 56, scope: !1621)
!12702 = !DILocation(line: 56, column: 39, scope: !1621)
!12703 = !DILocation(line: 58, column: 5, scope: !1621)
!12704 = !DILocation(line: 58, column: 16, scope: !1621)
!12705 = !DILocation(line: 58, column: 19, scope: !1621)
!12706 = !DILocation(line: 58, column: 22, scope: !1621)
!12707 = !DILocation(line: 59, column: 5, scope: !1621)
!12708 = !DILocation(line: 59, column: 15, scope: !1621)
!12709 = !DILocation(line: 59, column: 34, scope: !1621)
!12710 = !DILocation(line: 59, column: 43, scope: !1621)
!12711 = !DILocation(line: 59, column: 34, scope: !12712)
!12712 = !DILexicalBlockFile(scope: !1621, file: !1474, discriminator: 1)
!12713 = !DILocation(line: 59, column: 56, scope: !12714)
!12714 = !DILexicalBlockFile(scope: !1621, file: !1474, discriminator: 2)
!12715 = !DILocation(line: 59, column: 64, scope: !1621)
!12716 = !DILocation(line: 59, column: 22, scope: !12717)
!12717 = !DILexicalBlockFile(scope: !12718, file: !1474, discriminator: 4)
!12718 = !DILexicalBlockFile(scope: !1621, file: !1474, discriminator: 3)
!12719 = !DILocation(line: 60, column: 5, scope: !1621)
!12720 = !DILocation(line: 60, column: 15, scope: !1621)
!12721 = !DILocation(line: 62, column: 9, scope: !12722)
!12722 = distinct !DILexicalBlock(scope: !1621, file: !1474, line: 62, column: 9)
!12723 = !DILocation(line: 62, column: 14, scope: !12722)
!12724 = !DILocation(line: 62, column: 9, scope: !1621)
!12725 = !DILocation(line: 63, column: 9, scope: !12722)
!12726 = !DILocation(line: 65, column: 11, scope: !1621)
!12727 = !DILocation(line: 65, column: 7, scope: !1621)
!12728 = !DILocation(line: 66, column: 5, scope: !1621)
!12729 = !DILocation(line: 66, column: 20, scope: !12730)
!12730 = !DILexicalBlockFile(scope: !12712, file: !1474, discriminator: 2)
!12731 = !DILocation(line: 66, column: 23, scope: !1621)
!12732 = !DILocation(line: 67, column: 9, scope: !1639)
!12733 = !DILocation(line: 67, column: 16, scope: !12734)
!12734 = !DILexicalBlockFile(scope: !12735, file: !1474, discriminator: 4)
!12735 = !DILexicalBlockFile(scope: !1639, file: !1474, discriminator: 1)
!12736 = !DILocation(line: 67, column: 20, scope: !1639)
!12737 = !DILocation(line: 67, column: 18, scope: !1639)
!12738 = !DILocation(line: 67, column: 28, scope: !1639)
!12739 = !DILocation(line: 67, column: 70, scope: !12740)
!12740 = !DILexicalBlockFile(scope: !1639, file: !1474, discriminator: 2)
!12741 = !DILocation(line: 67, column: 66, scope: !1639)
!12742 = !DILocation(line: 67, column: 65, scope: !1639)
!12743 = !DILocation(line: 67, column: 74, scope: !1639)
!12744 = !DILocation(line: 67, column: 49, scope: !1639)
!12745 = !DILocation(line: 67, column: 32, scope: !1639)
!12746 = !DILocation(line: 67, column: 84, scope: !1639)
!12747 = !DILocation(line: 67, column: 9, scope: !12748)
!12748 = !DILexicalBlockFile(scope: !1639, file: !1474, discriminator: 3)
!12749 = !DILocation(line: 68, column: 14, scope: !1639)
!12750 = !DILocation(line: 69, column: 13, scope: !12751)
!12751 = distinct !DILexicalBlock(scope: !1639, file: !1474, line: 69, column: 13)
!12752 = !DILocation(line: 69, column: 18, scope: !12751)
!12753 = !DILocation(line: 69, column: 15, scope: !12751)
!12754 = !DILocation(line: 69, column: 13, scope: !1639)
!12755 = !DILocation(line: 69, column: 27, scope: !12756)
!12756 = !DILexicalBlockFile(scope: !12751, file: !1474, discriminator: 1)
!12757 = !DILocation(line: 70, column: 13, scope: !1639)
!12758 = !DILocation(line: 70, column: 11, scope: !1639)
!12759 = !DILocation(line: 70, column: 17, scope: !1639)
!12760 = !DILocation(line: 71, column: 9, scope: !1639)
!12761 = !DILocation(line: 71, column: 16, scope: !12734)
!12762 = !DILocation(line: 71, column: 20, scope: !1639)
!12763 = !DILocation(line: 71, column: 18, scope: !1639)
!12764 = !DILocation(line: 71, column: 28, scope: !1639)
!12765 = !DILocation(line: 71, column: 71, scope: !12740)
!12766 = !DILocation(line: 71, column: 67, scope: !1639)
!12767 = !DILocation(line: 71, column: 66, scope: !1639)
!12768 = !DILocation(line: 71, column: 75, scope: !1639)
!12769 = !DILocation(line: 71, column: 50, scope: !1639)
!12770 = !DILocation(line: 71, column: 33, scope: !1639)
!12771 = !DILocation(line: 71, column: 85, scope: !1639)
!12772 = !DILocation(line: 71, column: 31, scope: !1639)
!12773 = !DILocation(line: 71, column: 9, scope: !12748)
!12774 = !DILocation(line: 72, column: 14, scope: !1639)
!12775 = !DILocation(line: 82, column: 48, scope: !1638)
!12776 = !DILocation(line: 82, column: 56, scope: !1638)
!12777 = !DILocation(line: 82, column: 53, scope: !1638)
!12778 = !DILocation(line: 82, column: 61, scope: !1638)
!12779 = !DILocation(line: 82, column: 67, scope: !1638)
!12780 = !DILocation(line: 82, column: 64, scope: !1638)
!12781 = !DILocation(line: 82, column: 17, scope: !1638)
!12782 = !DILocation(line: 82, column: 15, scope: !1638)
!12783 = !DILocation(line: 82, column: 76, scope: !12784)
!12784 = distinct !DILexicalBlock(scope: !1638, file: !1474, line: 82, column: 76)
!12785 = !DILocation(line: 82, column: 80, scope: !12784)
!12786 = !DILocation(line: 82, column: 76, scope: !1638)
!12787 = !DILocation(line: 82, column: 95, scope: !12788)
!12788 = !DILexicalBlockFile(scope: !12784, file: !1474, discriminator: 1)
!12789 = !DILocation(line: 82, column: 113, scope: !12790)
!12790 = !DILexicalBlockFile(scope: !1637, file: !1474, discriminator: 2)
!12791 = !DILocation(line: 82, column: 119, scope: !1637)
!12792 = !DILocation(line: 82, column: 113, scope: !1638)
!12793 = !DILocation(line: 82, column: 172, scope: !12794)
!12794 = !DILexicalBlockFile(scope: !12795, file: !1474, discriminator: 3)
!12795 = distinct !DILexicalBlock(scope: !1637, file: !1474, line: 82, column: 125)
!12796 = !DILocation(line: 82, column: 162, scope: !12795)
!12797 = !DILocation(line: 82, column: 146, scope: !12795)
!12798 = !DILocation(line: 82, column: 129, scope: !12795)
!12799 = !DILocation(line: 82, column: 154, scope: !12795)
!12800 = !DILocation(line: 82, column: 128, scope: !12795)
!12801 = !DILocation(line: 82, column: 169, scope: !12795)
!12802 = !DILocation(line: 82, column: 179, scope: !12795)
!12803 = !DILocation(line: 82, column: 206, scope: !12804)
!12804 = !DILexicalBlockFile(scope: !1635, file: !1474, discriminator: 4)
!12805 = !DILocation(line: 82, column: 212, scope: !1635)
!12806 = !DILocation(line: 82, column: 192, scope: !1635)
!12807 = !DILocation(line: 82, column: 192, scope: !1636)
!12808 = !DILocation(line: 82, column: 220, scope: !12809)
!12809 = !DILexicalBlockFile(scope: !1634, file: !1474, discriminator: 6)
!12810 = !DILocation(line: 82, column: 225, scope: !12811)
!12811 = !DILexicalBlockFile(scope: !1633, file: !1474, discriminator: 8)
!12812 = !DILocation(line: 82, column: 235, scope: !1633)
!12813 = !DILocation(line: 82, column: 265, scope: !1633)
!12814 = !DILocation(line: 82, column: 279, scope: !12815)
!12815 = distinct !DILexicalBlock(scope: !1633, file: !1474, line: 82, column: 276)
!12816 = !DILocation(line: 82, column: 296, scope: !12815)
!12817 = !DILocation(line: 82, column: 276, scope: !12815)
!12818 = !DILocation(line: 82, column: 306, scope: !12815)
!12819 = !DILocation(line: 82, column: 276, scope: !1633)
!12820 = !DILocation(line: 82, column: 276, scope: !12821)
!12821 = !DILexicalBlockFile(scope: !1633, file: !1474, discriminator: 9)
!12822 = !DILocation(line: 82, column: 337, scope: !12823)
!12823 = !DILexicalBlockFile(scope: !12815, file: !1474, discriminator: 10)
!12824 = !DILocation(line: 82, column: 355, scope: !12815)
!12825 = !DILocation(line: 82, column: 365, scope: !12815)
!12826 = !DILocation(line: 82, column: 390, scope: !12815)
!12827 = !DILocation(line: 82, column: 321, scope: !12815)
!12828 = !DILocation(line: 82, column: 409, scope: !12829)
!12829 = !DILexicalBlockFile(scope: !1634, file: !1474, discriminator: 11)
!12830 = !DILocation(line: 82, column: 409, scope: !1633)
!12831 = !DILocation(line: 82, column: 409, scope: !12832)
!12832 = !DILexicalBlockFile(scope: !1633, file: !1474, discriminator: 12)
!12833 = !DILocation(line: 82, column: 422, scope: !12834)
!12834 = !DILexicalBlockFile(scope: !1634, file: !1474, discriminator: 13)
!12835 = !DILocation(line: 82, column: 443, scope: !12836)
!12836 = !DILexicalBlockFile(scope: !1635, file: !1474, discriminator: 7)
!12837 = !DILocation(line: 82, column: 448, scope: !12838)
!12838 = !DILexicalBlockFile(scope: !1641, file: !1474, discriminator: 14)
!12839 = !DILocation(line: 82, column: 458, scope: !1641)
!12840 = !DILocation(line: 82, column: 488, scope: !1641)
!12841 = !DILocation(line: 82, column: 502, scope: !12842)
!12842 = distinct !DILexicalBlock(scope: !1641, file: !1474, line: 82, column: 499)
!12843 = !DILocation(line: 82, column: 519, scope: !12842)
!12844 = !DILocation(line: 82, column: 499, scope: !12842)
!12845 = !DILocation(line: 82, column: 529, scope: !12842)
!12846 = !DILocation(line: 82, column: 499, scope: !1641)
!12847 = !DILocation(line: 82, column: 499, scope: !12848)
!12848 = !DILexicalBlockFile(scope: !1641, file: !1474, discriminator: 15)
!12849 = !DILocation(line: 82, column: 560, scope: !12850)
!12850 = !DILexicalBlockFile(scope: !12842, file: !1474, discriminator: 16)
!12851 = !DILocation(line: 82, column: 578, scope: !12842)
!12852 = !DILocation(line: 82, column: 588, scope: !12842)
!12853 = !DILocation(line: 82, column: 613, scope: !12842)
!12854 = !DILocation(line: 82, column: 544, scope: !12842)
!12855 = !DILocation(line: 82, column: 632, scope: !12856)
!12856 = !DILexicalBlockFile(scope: !1635, file: !1474, discriminator: 17)
!12857 = !DILocation(line: 82, column: 632, scope: !1641)
!12858 = !DILocation(line: 82, column: 632, scope: !12859)
!12859 = !DILexicalBlockFile(scope: !1641, file: !1474, discriminator: 18)
!12860 = !DILocation(line: 82, column: 652, scope: !12861)
!12861 = !DILexicalBlockFile(scope: !1638, file: !1474, discriminator: 5)
!12862 = !DILocation(line: 85, column: 9, scope: !1651)
!12863 = !DILocation(line: 85, column: 13, scope: !1651)
!12864 = !DILocation(line: 85, column: 11, scope: !1651)
!12865 = !DILocation(line: 85, column: 9, scope: !1621)
!12866 = !DILocation(line: 88, column: 9, scope: !1650)
!12867 = !DILocation(line: 88, column: 16, scope: !12868)
!12868 = !DILexicalBlockFile(scope: !12869, file: !1474, discriminator: 4)
!12869 = !DILexicalBlockFile(scope: !1650, file: !1474, discriminator: 1)
!12870 = !DILocation(line: 88, column: 20, scope: !1650)
!12871 = !DILocation(line: 88, column: 18, scope: !1650)
!12872 = !DILocation(line: 88, column: 28, scope: !1650)
!12873 = !DILocation(line: 88, column: 70, scope: !12874)
!12874 = !DILexicalBlockFile(scope: !1650, file: !1474, discriminator: 2)
!12875 = !DILocation(line: 88, column: 66, scope: !1650)
!12876 = !DILocation(line: 88, column: 65, scope: !1650)
!12877 = !DILocation(line: 88, column: 74, scope: !1650)
!12878 = !DILocation(line: 88, column: 49, scope: !1650)
!12879 = !DILocation(line: 88, column: 32, scope: !1650)
!12880 = !DILocation(line: 88, column: 84, scope: !1650)
!12881 = !DILocation(line: 88, column: 9, scope: !12882)
!12882 = !DILexicalBlockFile(scope: !1650, file: !1474, discriminator: 3)
!12883 = !DILocation(line: 89, column: 14, scope: !1650)
!12884 = !DILocation(line: 90, column: 13, scope: !1649)
!12885 = !DILocation(line: 90, column: 18, scope: !1649)
!12886 = !DILocation(line: 90, column: 15, scope: !1649)
!12887 = !DILocation(line: 90, column: 13, scope: !1650)
!12888 = !DILocation(line: 91, column: 52, scope: !1648)
!12889 = !DILocation(line: 91, column: 60, scope: !1648)
!12890 = !DILocation(line: 91, column: 57, scope: !1648)
!12891 = !DILocation(line: 91, column: 65, scope: !1648)
!12892 = !DILocation(line: 91, column: 77, scope: !1648)
!12893 = !DILocation(line: 91, column: 74, scope: !1648)
!12894 = !DILocation(line: 91, column: 21, scope: !1648)
!12895 = !DILocation(line: 91, column: 19, scope: !1648)
!12896 = !DILocation(line: 91, column: 86, scope: !12897)
!12897 = distinct !DILexicalBlock(scope: !1648, file: !1474, line: 91, column: 86)
!12898 = !DILocation(line: 91, column: 90, scope: !12897)
!12899 = !DILocation(line: 91, column: 86, scope: !1648)
!12900 = !DILocation(line: 91, column: 105, scope: !12901)
!12901 = !DILexicalBlockFile(scope: !12897, file: !1474, discriminator: 1)
!12902 = !DILocation(line: 91, column: 123, scope: !12903)
!12903 = !DILexicalBlockFile(scope: !1647, file: !1474, discriminator: 2)
!12904 = !DILocation(line: 91, column: 129, scope: !1647)
!12905 = !DILocation(line: 91, column: 123, scope: !1648)
!12906 = !DILocation(line: 91, column: 182, scope: !12907)
!12907 = !DILexicalBlockFile(scope: !12908, file: !1474, discriminator: 3)
!12908 = distinct !DILexicalBlock(scope: !1647, file: !1474, line: 91, column: 135)
!12909 = !DILocation(line: 91, column: 172, scope: !12908)
!12910 = !DILocation(line: 91, column: 156, scope: !12908)
!12911 = !DILocation(line: 91, column: 139, scope: !12908)
!12912 = !DILocation(line: 91, column: 164, scope: !12908)
!12913 = !DILocation(line: 91, column: 138, scope: !12908)
!12914 = !DILocation(line: 91, column: 179, scope: !12908)
!12915 = !DILocation(line: 91, column: 189, scope: !12908)
!12916 = !DILocation(line: 91, column: 216, scope: !12917)
!12917 = !DILexicalBlockFile(scope: !1645, file: !1474, discriminator: 4)
!12918 = !DILocation(line: 91, column: 222, scope: !1645)
!12919 = !DILocation(line: 91, column: 202, scope: !1645)
!12920 = !DILocation(line: 91, column: 202, scope: !1646)
!12921 = !DILocation(line: 91, column: 230, scope: !12922)
!12922 = !DILexicalBlockFile(scope: !1644, file: !1474, discriminator: 6)
!12923 = !DILocation(line: 91, column: 235, scope: !12924)
!12924 = !DILexicalBlockFile(scope: !1643, file: !1474, discriminator: 8)
!12925 = !DILocation(line: 91, column: 245, scope: !1643)
!12926 = !DILocation(line: 91, column: 275, scope: !1643)
!12927 = !DILocation(line: 91, column: 289, scope: !12928)
!12928 = distinct !DILexicalBlock(scope: !1643, file: !1474, line: 91, column: 286)
!12929 = !DILocation(line: 91, column: 306, scope: !12928)
!12930 = !DILocation(line: 91, column: 286, scope: !12928)
!12931 = !DILocation(line: 91, column: 316, scope: !12928)
!12932 = !DILocation(line: 91, column: 286, scope: !1643)
!12933 = !DILocation(line: 91, column: 286, scope: !12934)
!12934 = !DILexicalBlockFile(scope: !1643, file: !1474, discriminator: 9)
!12935 = !DILocation(line: 91, column: 347, scope: !12936)
!12936 = !DILexicalBlockFile(scope: !12928, file: !1474, discriminator: 10)
!12937 = !DILocation(line: 91, column: 365, scope: !12928)
!12938 = !DILocation(line: 91, column: 375, scope: !12928)
!12939 = !DILocation(line: 91, column: 400, scope: !12928)
!12940 = !DILocation(line: 91, column: 331, scope: !12928)
!12941 = !DILocation(line: 91, column: 419, scope: !12942)
!12942 = !DILexicalBlockFile(scope: !1644, file: !1474, discriminator: 11)
!12943 = !DILocation(line: 91, column: 419, scope: !1643)
!12944 = !DILocation(line: 91, column: 419, scope: !12945)
!12945 = !DILexicalBlockFile(scope: !1643, file: !1474, discriminator: 12)
!12946 = !DILocation(line: 91, column: 432, scope: !12947)
!12947 = !DILexicalBlockFile(scope: !1644, file: !1474, discriminator: 13)
!12948 = !DILocation(line: 91, column: 453, scope: !12949)
!12949 = !DILexicalBlockFile(scope: !1645, file: !1474, discriminator: 7)
!12950 = !DILocation(line: 91, column: 458, scope: !12951)
!12951 = !DILexicalBlockFile(scope: !1653, file: !1474, discriminator: 14)
!12952 = !DILocation(line: 91, column: 468, scope: !1653)
!12953 = !DILocation(line: 91, column: 498, scope: !1653)
!12954 = !DILocation(line: 91, column: 512, scope: !12955)
!12955 = distinct !DILexicalBlock(scope: !1653, file: !1474, line: 91, column: 509)
!12956 = !DILocation(line: 91, column: 529, scope: !12955)
!12957 = !DILocation(line: 91, column: 509, scope: !12955)
!12958 = !DILocation(line: 91, column: 539, scope: !12955)
!12959 = !DILocation(line: 91, column: 509, scope: !1653)
!12960 = !DILocation(line: 91, column: 509, scope: !12961)
!12961 = !DILexicalBlockFile(scope: !1653, file: !1474, discriminator: 15)
!12962 = !DILocation(line: 91, column: 570, scope: !12963)
!12963 = !DILexicalBlockFile(scope: !12955, file: !1474, discriminator: 16)
!12964 = !DILocation(line: 91, column: 588, scope: !12955)
!12965 = !DILocation(line: 91, column: 598, scope: !12955)
!12966 = !DILocation(line: 91, column: 623, scope: !12955)
!12967 = !DILocation(line: 91, column: 554, scope: !12955)
!12968 = !DILocation(line: 91, column: 642, scope: !12969)
!12969 = !DILexicalBlockFile(scope: !1645, file: !1474, discriminator: 17)
!12970 = !DILocation(line: 91, column: 642, scope: !1653)
!12971 = !DILocation(line: 91, column: 642, scope: !12972)
!12972 = !DILexicalBlockFile(scope: !1653, file: !1474, discriminator: 18)
!12973 = !DILocation(line: 91, column: 662, scope: !12974)
!12974 = !DILexicalBlockFile(scope: !1648, file: !1474, discriminator: 5)
!12975 = !DILocation(line: 91, column: 666, scope: !1648)
!12976 = !DILocation(line: 92, column: 5, scope: !1650)
!12977 = !DILocation(line: 93, column: 41, scope: !1621)
!12978 = !DILocation(line: 93, column: 22, scope: !1621)
!12979 = !DILocation(line: 93, column: 7, scope: !1621)
!12980 = !DILocation(line: 93, column: 30, scope: !1621)
!12981 = !DILocation(line: 93, column: 39, scope: !1621)
!12982 = !DILocation(line: 94, column: 12, scope: !1621)
!12983 = !DILocation(line: 94, column: 5, scope: !1621)
!12984 = !DILocation(line: 97, column: 5, scope: !1621)
!12985 = !DILocation(line: 97, column: 10, scope: !12986)
!12986 = !DILexicalBlockFile(scope: !1655, file: !1474, discriminator: 1)
!12987 = !DILocation(line: 97, column: 20, scope: !1655)
!12988 = !DILocation(line: 97, column: 50, scope: !1655)
!12989 = !DILocation(line: 97, column: 65, scope: !12990)
!12990 = distinct !DILexicalBlock(scope: !1655, file: !1474, line: 97, column: 62)
!12991 = !DILocation(line: 97, column: 82, scope: !12990)
!12992 = !DILocation(line: 97, column: 62, scope: !12990)
!12993 = !DILocation(line: 97, column: 92, scope: !12990)
!12994 = !DILocation(line: 97, column: 62, scope: !1655)
!12995 = !DILocation(line: 97, column: 62, scope: !12996)
!12996 = !DILexicalBlockFile(scope: !1655, file: !1474, discriminator: 2)
!12997 = !DILocation(line: 97, column: 123, scope: !12998)
!12998 = !DILexicalBlockFile(scope: !12990, file: !1474, discriminator: 3)
!12999 = !DILocation(line: 97, column: 141, scope: !12990)
!13000 = !DILocation(line: 97, column: 151, scope: !12990)
!13001 = !DILocation(line: 97, column: 176, scope: !12990)
!13002 = !DILocation(line: 97, column: 107, scope: !12990)
!13003 = !DILocation(line: 97, column: 195, scope: !13004)
!13004 = !DILexicalBlockFile(scope: !1621, file: !1474, discriminator: 4)
!13005 = !DILocation(line: 97, column: 195, scope: !1655)
!13006 = !DILocation(line: 97, column: 195, scope: !13007)
!13007 = !DILexicalBlockFile(scope: !1655, file: !1474, discriminator: 5)
!13008 = !DILocation(line: 98, column: 5, scope: !1621)
!13009 = !DILocation(line: 99, column: 1, scope: !1621)
!13010 = !DILocation(line: 145, column: 27, scope: !1656)
!13011 = !DILocation(line: 146, column: 29, scope: !1656)
!13012 = !DILocation(line: 146, column: 45, scope: !1656)
!13013 = !DILocation(line: 147, column: 29, scope: !1656)
!13014 = !DILocation(line: 147, column: 45, scope: !1656)
!13015 = !DILocation(line: 148, column: 28, scope: !1656)
!13016 = !DILocation(line: 150, column: 5, scope: !1656)
!13017 = !DILocation(line: 150, column: 16, scope: !1656)
!13018 = !DILocation(line: 150, column: 19, scope: !1656)
!13019 = !DILocation(line: 150, column: 22, scope: !1656)
!13020 = !DILocation(line: 150, column: 27, scope: !1656)
!13021 = !DILocation(line: 151, column: 5, scope: !1656)
!13022 = !DILocation(line: 151, column: 15, scope: !1656)
!13023 = !DILocation(line: 151, column: 22, scope: !1656)
!13024 = !DILocation(line: 153, column: 9, scope: !13025)
!13025 = distinct !DILexicalBlock(scope: !1656, file: !1474, line: 153, column: 9)
!13026 = !DILocation(line: 153, column: 17, scope: !13025)
!13027 = !DILocation(line: 153, column: 9, scope: !1656)
!13028 = !DILocation(line: 154, column: 25, scope: !13029)
!13029 = distinct !DILexicalBlock(scope: !13025, file: !1474, line: 153, column: 23)
!13030 = !DILocation(line: 154, column: 9, scope: !13029)
!13031 = !DILocation(line: 155, column: 9, scope: !13029)
!13032 = !DILocation(line: 157, column: 14, scope: !13033)
!13033 = distinct !DILexicalBlock(scope: !13025, file: !1474, line: 157, column: 14)
!13034 = !DILocation(line: 157, column: 22, scope: !13033)
!13035 = !DILocation(line: 157, column: 14, scope: !13025)
!13036 = !DILocation(line: 158, column: 37, scope: !13033)
!13037 = !DILocation(line: 158, column: 46, scope: !13033)
!13038 = !DILocation(line: 158, column: 51, scope: !13033)
!13039 = !DILocation(line: 158, column: 60, scope: !13033)
!13040 = !DILocation(line: 158, column: 68, scope: !13033)
!13041 = !DILocation(line: 158, column: 16, scope: !13033)
!13042 = !DILocation(line: 158, column: 9, scope: !13033)
!13043 = !DILocation(line: 160, column: 24, scope: !1656)
!13044 = !DILocation(line: 160, column: 33, scope: !1656)
!13045 = !DILocation(line: 160, column: 24, scope: !13046)
!13046 = !DILexicalBlockFile(scope: !1656, file: !1474, discriminator: 1)
!13047 = !DILocation(line: 160, column: 46, scope: !13048)
!13048 = !DILexicalBlockFile(scope: !1656, file: !1474, discriminator: 2)
!13049 = !DILocation(line: 160, column: 54, scope: !1656)
!13050 = !DILocation(line: 160, column: 12, scope: !13051)
!13051 = !DILexicalBlockFile(scope: !13052, file: !1474, discriminator: 4)
!13052 = !DILexicalBlockFile(scope: !1656, file: !1474, discriminator: 3)
!13053 = !DILocation(line: 160, column: 10, scope: !1656)
!13054 = !DILocation(line: 161, column: 9, scope: !13055)
!13055 = distinct !DILexicalBlock(scope: !1656, file: !1474, line: 161, column: 9)
!13056 = !DILocation(line: 161, column: 14, scope: !13055)
!13057 = !DILocation(line: 161, column: 9, scope: !1656)
!13058 = !DILocation(line: 162, column: 9, scope: !13055)
!13059 = !DILocation(line: 164, column: 11, scope: !1656)
!13060 = !DILocation(line: 164, column: 7, scope: !1656)
!13061 = !DILocation(line: 165, column: 5, scope: !1656)
!13062 = !DILocation(line: 165, column: 20, scope: !13063)
!13063 = !DILexicalBlockFile(scope: !13046, file: !1474, discriminator: 2)
!13064 = !DILocation(line: 165, column: 23, scope: !1656)
!13065 = !DILocation(line: 166, column: 26, scope: !1677)
!13066 = !DILocation(line: 166, column: 30, scope: !1677)
!13067 = !DILocation(line: 166, column: 29, scope: !1677)
!13068 = !DILocation(line: 166, column: 33, scope: !1677)
!13069 = !DILocation(line: 166, column: 41, scope: !1677)
!13070 = !DILocation(line: 166, column: 40, scope: !1677)
!13071 = !DILocation(line: 166, column: 44, scope: !1677)
!13072 = !DILocation(line: 166, column: 49, scope: !1677)
!13073 = !DILocation(line: 166, column: 15, scope: !1677)
!13074 = !DILocation(line: 166, column: 13, scope: !1677)
!13075 = !DILocation(line: 167, column: 13, scope: !13076)
!13076 = distinct !DILexicalBlock(scope: !1677, file: !1474, line: 167, column: 13)
!13077 = !DILocation(line: 167, column: 17, scope: !13076)
!13078 = !DILocation(line: 167, column: 13, scope: !1677)
!13079 = !DILocation(line: 168, column: 13, scope: !13076)
!13080 = !DILocation(line: 169, column: 13, scope: !1677)
!13081 = !DILocation(line: 169, column: 17, scope: !1677)
!13082 = !DILocation(line: 169, column: 15, scope: !1677)
!13083 = !DILocation(line: 169, column: 11, scope: !1677)
!13084 = !DILocation(line: 170, column: 48, scope: !1676)
!13085 = !DILocation(line: 170, column: 56, scope: !1676)
!13086 = !DILocation(line: 170, column: 53, scope: !1676)
!13087 = !DILocation(line: 170, column: 61, scope: !1676)
!13088 = !DILocation(line: 170, column: 67, scope: !1676)
!13089 = !DILocation(line: 170, column: 64, scope: !1676)
!13090 = !DILocation(line: 170, column: 17, scope: !1676)
!13091 = !DILocation(line: 170, column: 15, scope: !1676)
!13092 = !DILocation(line: 170, column: 76, scope: !13093)
!13093 = distinct !DILexicalBlock(scope: !1676, file: !1474, line: 170, column: 76)
!13094 = !DILocation(line: 170, column: 80, scope: !13093)
!13095 = !DILocation(line: 170, column: 76, scope: !1676)
!13096 = !DILocation(line: 170, column: 95, scope: !13097)
!13097 = !DILexicalBlockFile(scope: !13093, file: !1474, discriminator: 1)
!13098 = !DILocation(line: 170, column: 113, scope: !13099)
!13099 = !DILexicalBlockFile(scope: !1675, file: !1474, discriminator: 2)
!13100 = !DILocation(line: 170, column: 119, scope: !1675)
!13101 = !DILocation(line: 170, column: 113, scope: !1676)
!13102 = !DILocation(line: 170, column: 172, scope: !13103)
!13103 = !DILexicalBlockFile(scope: !13104, file: !1474, discriminator: 3)
!13104 = distinct !DILexicalBlock(scope: !1675, file: !1474, line: 170, column: 125)
!13105 = !DILocation(line: 170, column: 162, scope: !13104)
!13106 = !DILocation(line: 170, column: 146, scope: !13104)
!13107 = !DILocation(line: 170, column: 129, scope: !13104)
!13108 = !DILocation(line: 170, column: 154, scope: !13104)
!13109 = !DILocation(line: 170, column: 128, scope: !13104)
!13110 = !DILocation(line: 170, column: 169, scope: !13104)
!13111 = !DILocation(line: 170, column: 179, scope: !13104)
!13112 = !DILocation(line: 170, column: 206, scope: !13113)
!13113 = !DILexicalBlockFile(scope: !1673, file: !1474, discriminator: 4)
!13114 = !DILocation(line: 170, column: 212, scope: !1673)
!13115 = !DILocation(line: 170, column: 192, scope: !1673)
!13116 = !DILocation(line: 170, column: 192, scope: !1674)
!13117 = !DILocation(line: 170, column: 220, scope: !13118)
!13118 = !DILexicalBlockFile(scope: !1672, file: !1474, discriminator: 6)
!13119 = !DILocation(line: 170, column: 225, scope: !13120)
!13120 = !DILexicalBlockFile(scope: !1671, file: !1474, discriminator: 8)
!13121 = !DILocation(line: 170, column: 235, scope: !1671)
!13122 = !DILocation(line: 170, column: 265, scope: !1671)
!13123 = !DILocation(line: 170, column: 279, scope: !13124)
!13124 = distinct !DILexicalBlock(scope: !1671, file: !1474, line: 170, column: 276)
!13125 = !DILocation(line: 170, column: 296, scope: !13124)
!13126 = !DILocation(line: 170, column: 276, scope: !13124)
!13127 = !DILocation(line: 170, column: 306, scope: !13124)
!13128 = !DILocation(line: 170, column: 276, scope: !1671)
!13129 = !DILocation(line: 170, column: 276, scope: !13130)
!13130 = !DILexicalBlockFile(scope: !1671, file: !1474, discriminator: 9)
!13131 = !DILocation(line: 170, column: 337, scope: !13132)
!13132 = !DILexicalBlockFile(scope: !13124, file: !1474, discriminator: 10)
!13133 = !DILocation(line: 170, column: 355, scope: !13124)
!13134 = !DILocation(line: 170, column: 365, scope: !13124)
!13135 = !DILocation(line: 170, column: 390, scope: !13124)
!13136 = !DILocation(line: 170, column: 321, scope: !13124)
!13137 = !DILocation(line: 170, column: 409, scope: !13138)
!13138 = !DILexicalBlockFile(scope: !1672, file: !1474, discriminator: 11)
!13139 = !DILocation(line: 170, column: 409, scope: !1671)
!13140 = !DILocation(line: 170, column: 409, scope: !13141)
!13141 = !DILexicalBlockFile(scope: !1671, file: !1474, discriminator: 12)
!13142 = !DILocation(line: 170, column: 422, scope: !13143)
!13143 = !DILexicalBlockFile(scope: !1672, file: !1474, discriminator: 13)
!13144 = !DILocation(line: 170, column: 443, scope: !13145)
!13145 = !DILexicalBlockFile(scope: !1673, file: !1474, discriminator: 7)
!13146 = !DILocation(line: 170, column: 448, scope: !13147)
!13147 = !DILexicalBlockFile(scope: !1679, file: !1474, discriminator: 14)
!13148 = !DILocation(line: 170, column: 458, scope: !1679)
!13149 = !DILocation(line: 170, column: 488, scope: !1679)
!13150 = !DILocation(line: 170, column: 502, scope: !13151)
!13151 = distinct !DILexicalBlock(scope: !1679, file: !1474, line: 170, column: 499)
!13152 = !DILocation(line: 170, column: 519, scope: !13151)
!13153 = !DILocation(line: 170, column: 499, scope: !13151)
!13154 = !DILocation(line: 170, column: 529, scope: !13151)
!13155 = !DILocation(line: 170, column: 499, scope: !1679)
!13156 = !DILocation(line: 170, column: 499, scope: !13157)
!13157 = !DILexicalBlockFile(scope: !1679, file: !1474, discriminator: 15)
!13158 = !DILocation(line: 170, column: 560, scope: !13159)
!13159 = !DILexicalBlockFile(scope: !13151, file: !1474, discriminator: 16)
!13160 = !DILocation(line: 170, column: 578, scope: !13151)
!13161 = !DILocation(line: 170, column: 588, scope: !13151)
!13162 = !DILocation(line: 170, column: 613, scope: !13151)
!13163 = !DILocation(line: 170, column: 544, scope: !13151)
!13164 = !DILocation(line: 170, column: 632, scope: !13165)
!13165 = !DILexicalBlockFile(scope: !1673, file: !1474, discriminator: 17)
!13166 = !DILocation(line: 170, column: 632, scope: !1679)
!13167 = !DILocation(line: 170, column: 632, scope: !13168)
!13168 = !DILexicalBlockFile(scope: !1679, file: !1474, discriminator: 18)
!13169 = !DILocation(line: 170, column: 652, scope: !13170)
!13170 = !DILexicalBlockFile(scope: !1676, file: !1474, discriminator: 5)
!13171 = !DILocation(line: 171, column: 13, scope: !1677)
!13172 = !DILocation(line: 171, column: 17, scope: !1677)
!13173 = !DILocation(line: 171, column: 15, scope: !1677)
!13174 = !DILocation(line: 171, column: 11, scope: !1677)
!13175 = !DILocation(line: 182, column: 48, scope: !1686)
!13176 = !DILocation(line: 182, column: 56, scope: !1686)
!13177 = !DILocation(line: 182, column: 53, scope: !1686)
!13178 = !DILocation(line: 182, column: 61, scope: !1686)
!13179 = !DILocation(line: 182, column: 73, scope: !1686)
!13180 = !DILocation(line: 182, column: 70, scope: !1686)
!13181 = !DILocation(line: 182, column: 17, scope: !1686)
!13182 = !DILocation(line: 182, column: 15, scope: !1686)
!13183 = !DILocation(line: 182, column: 82, scope: !13184)
!13184 = distinct !DILexicalBlock(scope: !1686, file: !1474, line: 182, column: 82)
!13185 = !DILocation(line: 182, column: 86, scope: !13184)
!13186 = !DILocation(line: 182, column: 82, scope: !1686)
!13187 = !DILocation(line: 182, column: 101, scope: !13188)
!13188 = !DILexicalBlockFile(scope: !13184, file: !1474, discriminator: 1)
!13189 = !DILocation(line: 182, column: 119, scope: !13190)
!13190 = !DILexicalBlockFile(scope: !1685, file: !1474, discriminator: 2)
!13191 = !DILocation(line: 182, column: 125, scope: !1685)
!13192 = !DILocation(line: 182, column: 119, scope: !1686)
!13193 = !DILocation(line: 182, column: 178, scope: !13194)
!13194 = !DILexicalBlockFile(scope: !13195, file: !1474, discriminator: 3)
!13195 = distinct !DILexicalBlock(scope: !1685, file: !1474, line: 182, column: 131)
!13196 = !DILocation(line: 182, column: 168, scope: !13195)
!13197 = !DILocation(line: 182, column: 152, scope: !13195)
!13198 = !DILocation(line: 182, column: 135, scope: !13195)
!13199 = !DILocation(line: 182, column: 160, scope: !13195)
!13200 = !DILocation(line: 182, column: 134, scope: !13195)
!13201 = !DILocation(line: 182, column: 175, scope: !13195)
!13202 = !DILocation(line: 182, column: 185, scope: !13195)
!13203 = !DILocation(line: 182, column: 212, scope: !13204)
!13204 = !DILexicalBlockFile(scope: !1683, file: !1474, discriminator: 4)
!13205 = !DILocation(line: 182, column: 218, scope: !1683)
!13206 = !DILocation(line: 182, column: 198, scope: !1683)
!13207 = !DILocation(line: 182, column: 198, scope: !1684)
!13208 = !DILocation(line: 182, column: 226, scope: !13209)
!13209 = !DILexicalBlockFile(scope: !1682, file: !1474, discriminator: 6)
!13210 = !DILocation(line: 182, column: 231, scope: !13211)
!13211 = !DILexicalBlockFile(scope: !1681, file: !1474, discriminator: 8)
!13212 = !DILocation(line: 182, column: 241, scope: !1681)
!13213 = !DILocation(line: 182, column: 271, scope: !1681)
!13214 = !DILocation(line: 182, column: 285, scope: !13215)
!13215 = distinct !DILexicalBlock(scope: !1681, file: !1474, line: 182, column: 282)
!13216 = !DILocation(line: 182, column: 302, scope: !13215)
!13217 = !DILocation(line: 182, column: 282, scope: !13215)
!13218 = !DILocation(line: 182, column: 312, scope: !13215)
!13219 = !DILocation(line: 182, column: 282, scope: !1681)
!13220 = !DILocation(line: 182, column: 282, scope: !13221)
!13221 = !DILexicalBlockFile(scope: !1681, file: !1474, discriminator: 9)
!13222 = !DILocation(line: 182, column: 343, scope: !13223)
!13223 = !DILexicalBlockFile(scope: !13215, file: !1474, discriminator: 10)
!13224 = !DILocation(line: 182, column: 361, scope: !13215)
!13225 = !DILocation(line: 182, column: 371, scope: !13215)
!13226 = !DILocation(line: 182, column: 396, scope: !13215)
!13227 = !DILocation(line: 182, column: 327, scope: !13215)
!13228 = !DILocation(line: 182, column: 415, scope: !13229)
!13229 = !DILexicalBlockFile(scope: !1682, file: !1474, discriminator: 11)
!13230 = !DILocation(line: 182, column: 415, scope: !1681)
!13231 = !DILocation(line: 182, column: 415, scope: !13232)
!13232 = !DILexicalBlockFile(scope: !1681, file: !1474, discriminator: 12)
!13233 = !DILocation(line: 182, column: 428, scope: !13234)
!13234 = !DILexicalBlockFile(scope: !1682, file: !1474, discriminator: 13)
!13235 = !DILocation(line: 182, column: 449, scope: !13236)
!13236 = !DILexicalBlockFile(scope: !1683, file: !1474, discriminator: 7)
!13237 = !DILocation(line: 182, column: 454, scope: !13238)
!13238 = !DILexicalBlockFile(scope: !1689, file: !1474, discriminator: 14)
!13239 = !DILocation(line: 182, column: 464, scope: !1689)
!13240 = !DILocation(line: 182, column: 494, scope: !1689)
!13241 = !DILocation(line: 182, column: 508, scope: !13242)
!13242 = distinct !DILexicalBlock(scope: !1689, file: !1474, line: 182, column: 505)
!13243 = !DILocation(line: 182, column: 525, scope: !13242)
!13244 = !DILocation(line: 182, column: 505, scope: !13242)
!13245 = !DILocation(line: 182, column: 535, scope: !13242)
!13246 = !DILocation(line: 182, column: 505, scope: !1689)
!13247 = !DILocation(line: 182, column: 505, scope: !13248)
!13248 = !DILexicalBlockFile(scope: !1689, file: !1474, discriminator: 15)
!13249 = !DILocation(line: 182, column: 566, scope: !13250)
!13250 = !DILexicalBlockFile(scope: !13242, file: !1474, discriminator: 16)
!13251 = !DILocation(line: 182, column: 584, scope: !13242)
!13252 = !DILocation(line: 182, column: 594, scope: !13242)
!13253 = !DILocation(line: 182, column: 619, scope: !13242)
!13254 = !DILocation(line: 182, column: 550, scope: !13242)
!13255 = !DILocation(line: 182, column: 638, scope: !13256)
!13256 = !DILexicalBlockFile(scope: !1683, file: !1474, discriminator: 17)
!13257 = !DILocation(line: 182, column: 638, scope: !1689)
!13258 = !DILocation(line: 182, column: 638, scope: !13259)
!13259 = !DILexicalBlockFile(scope: !1689, file: !1474, discriminator: 18)
!13260 = !DILocation(line: 182, column: 658, scope: !13261)
!13261 = !DILexicalBlockFile(scope: !1686, file: !1474, discriminator: 5)
!13262 = !DILocation(line: 184, column: 41, scope: !1656)
!13263 = !DILocation(line: 184, column: 22, scope: !1656)
!13264 = !DILocation(line: 184, column: 7, scope: !1656)
!13265 = !DILocation(line: 184, column: 30, scope: !1656)
!13266 = !DILocation(line: 184, column: 39, scope: !1656)
!13267 = !DILocation(line: 185, column: 12, scope: !1656)
!13268 = !DILocation(line: 185, column: 5, scope: !1656)
!13269 = !DILocation(line: 188, column: 5, scope: !1656)
!13270 = !DILocation(line: 188, column: 10, scope: !13271)
!13271 = !DILexicalBlockFile(scope: !1691, file: !1474, discriminator: 1)
!13272 = !DILocation(line: 188, column: 20, scope: !1691)
!13273 = !DILocation(line: 188, column: 50, scope: !1691)
!13274 = !DILocation(line: 188, column: 65, scope: !13275)
!13275 = distinct !DILexicalBlock(scope: !1691, file: !1474, line: 188, column: 62)
!13276 = !DILocation(line: 188, column: 82, scope: !13275)
!13277 = !DILocation(line: 188, column: 62, scope: !13275)
!13278 = !DILocation(line: 188, column: 92, scope: !13275)
!13279 = !DILocation(line: 188, column: 62, scope: !1691)
!13280 = !DILocation(line: 188, column: 62, scope: !13281)
!13281 = !DILexicalBlockFile(scope: !1691, file: !1474, discriminator: 2)
!13282 = !DILocation(line: 188, column: 123, scope: !13283)
!13283 = !DILexicalBlockFile(scope: !13275, file: !1474, discriminator: 3)
!13284 = !DILocation(line: 188, column: 141, scope: !13275)
!13285 = !DILocation(line: 188, column: 151, scope: !13275)
!13286 = !DILocation(line: 188, column: 176, scope: !13275)
!13287 = !DILocation(line: 188, column: 107, scope: !13275)
!13288 = !DILocation(line: 188, column: 195, scope: !13289)
!13289 = !DILexicalBlockFile(scope: !1656, file: !1474, discriminator: 4)
!13290 = !DILocation(line: 188, column: 195, scope: !1691)
!13291 = !DILocation(line: 188, column: 195, scope: !13292)
!13292 = !DILexicalBlockFile(scope: !1691, file: !1474, discriminator: 5)
!13293 = !DILocation(line: 189, column: 5, scope: !1656)
!13294 = !DILocation(line: 190, column: 1, scope: !1656)
!13295 = !DILocation(line: 102, column: 32, scope: !1692)
!13296 = !DILocation(line: 103, column: 34, scope: !1692)
!13297 = !DILocation(line: 103, column: 50, scope: !1692)
!13298 = !DILocation(line: 104, column: 33, scope: !1692)
!13299 = !DILocation(line: 105, column: 33, scope: !1692)
!13300 = !DILocation(line: 107, column: 5, scope: !1692)
!13301 = !DILocation(line: 107, column: 16, scope: !1692)
!13302 = !DILocation(line: 107, column: 19, scope: !1692)
!13303 = !DILocation(line: 107, column: 22, scope: !1692)
!13304 = !DILocation(line: 108, column: 5, scope: !1692)
!13305 = !DILocation(line: 108, column: 15, scope: !1692)
!13306 = !DILocation(line: 108, column: 34, scope: !1692)
!13307 = !DILocation(line: 108, column: 43, scope: !1692)
!13308 = !DILocation(line: 108, column: 34, scope: !13309)
!13309 = !DILexicalBlockFile(scope: !1692, file: !1474, discriminator: 1)
!13310 = !DILocation(line: 108, column: 56, scope: !13311)
!13311 = !DILexicalBlockFile(scope: !1692, file: !1474, discriminator: 2)
!13312 = !DILocation(line: 108, column: 64, scope: !1692)
!13313 = !DILocation(line: 108, column: 22, scope: !13314)
!13314 = !DILexicalBlockFile(scope: !13315, file: !1474, discriminator: 4)
!13315 = !DILexicalBlockFile(scope: !1692, file: !1474, discriminator: 3)
!13316 = !DILocation(line: 109, column: 5, scope: !1692)
!13317 = !DILocation(line: 109, column: 15, scope: !1692)
!13318 = !DILocation(line: 111, column: 9, scope: !13319)
!13319 = distinct !DILexicalBlock(scope: !1692, file: !1474, line: 111, column: 9)
!13320 = !DILocation(line: 111, column: 14, scope: !13319)
!13321 = !DILocation(line: 111, column: 9, scope: !1692)
!13322 = !DILocation(line: 112, column: 9, scope: !13319)
!13323 = !DILocation(line: 114, column: 11, scope: !1692)
!13324 = !DILocation(line: 114, column: 7, scope: !1692)
!13325 = !DILocation(line: 115, column: 5, scope: !1692)
!13326 = !DILocation(line: 115, column: 13, scope: !13327)
!13327 = !DILexicalBlockFile(scope: !13309, file: !1474, discriminator: 4)
!13328 = !DILocation(line: 115, column: 17, scope: !1692)
!13329 = !DILocation(line: 115, column: 15, scope: !1692)
!13330 = !DILocation(line: 115, column: 26, scope: !1692)
!13331 = !DILocation(line: 115, column: 38, scope: !13311)
!13332 = !DILocation(line: 115, column: 41, scope: !1692)
!13333 = !DILocation(line: 115, column: 5, scope: !13315)
!13334 = !DILocation(line: 116, column: 9, scope: !1716)
!13335 = !DILocation(line: 116, column: 15, scope: !13336)
!13336 = !DILexicalBlockFile(scope: !13337, file: !1474, discriminator: 2)
!13337 = !DILexicalBlockFile(scope: !1714, file: !1474, discriminator: 1)
!13338 = !DILocation(line: 116, column: 19, scope: !1714)
!13339 = !DILocation(line: 116, column: 17, scope: !1714)
!13340 = !DILocation(line: 116, column: 9, scope: !1715)
!13341 = !DILocation(line: 118, column: 21, scope: !1712)
!13342 = !DILocation(line: 118, column: 17, scope: !1712)
!13343 = !DILocation(line: 118, column: 27, scope: !1712)
!13344 = !DILocation(line: 118, column: 24, scope: !1712)
!13345 = !DILocation(line: 118, column: 17, scope: !1713)
!13346 = !DILocation(line: 119, column: 56, scope: !1710)
!13347 = !DILocation(line: 119, column: 64, scope: !1710)
!13348 = !DILocation(line: 119, column: 61, scope: !1710)
!13349 = !DILocation(line: 119, column: 69, scope: !1710)
!13350 = !DILocation(line: 119, column: 75, scope: !1710)
!13351 = !DILocation(line: 119, column: 72, scope: !1710)
!13352 = !DILocation(line: 119, column: 25, scope: !1710)
!13353 = !DILocation(line: 119, column: 23, scope: !1710)
!13354 = !DILocation(line: 119, column: 84, scope: !13355)
!13355 = distinct !DILexicalBlock(scope: !1710, file: !1474, line: 119, column: 84)
!13356 = !DILocation(line: 119, column: 88, scope: !13355)
!13357 = !DILocation(line: 119, column: 84, scope: !1710)
!13358 = !DILocation(line: 119, column: 103, scope: !13359)
!13359 = !DILexicalBlockFile(scope: !13355, file: !1474, discriminator: 1)
!13360 = !DILocation(line: 119, column: 121, scope: !13361)
!13361 = !DILexicalBlockFile(scope: !1709, file: !1474, discriminator: 2)
!13362 = !DILocation(line: 119, column: 127, scope: !1709)
!13363 = !DILocation(line: 119, column: 121, scope: !1710)
!13364 = !DILocation(line: 119, column: 180, scope: !13365)
!13365 = !DILexicalBlockFile(scope: !13366, file: !1474, discriminator: 3)
!13366 = distinct !DILexicalBlock(scope: !1709, file: !1474, line: 119, column: 133)
!13367 = !DILocation(line: 119, column: 170, scope: !13366)
!13368 = !DILocation(line: 119, column: 154, scope: !13366)
!13369 = !DILocation(line: 119, column: 137, scope: !13366)
!13370 = !DILocation(line: 119, column: 162, scope: !13366)
!13371 = !DILocation(line: 119, column: 136, scope: !13366)
!13372 = !DILocation(line: 119, column: 177, scope: !13366)
!13373 = !DILocation(line: 119, column: 187, scope: !13366)
!13374 = !DILocation(line: 119, column: 214, scope: !13375)
!13375 = !DILexicalBlockFile(scope: !1707, file: !1474, discriminator: 4)
!13376 = !DILocation(line: 119, column: 220, scope: !1707)
!13377 = !DILocation(line: 119, column: 200, scope: !1707)
!13378 = !DILocation(line: 119, column: 200, scope: !1708)
!13379 = !DILocation(line: 119, column: 228, scope: !13380)
!13380 = !DILexicalBlockFile(scope: !1706, file: !1474, discriminator: 6)
!13381 = !DILocation(line: 119, column: 233, scope: !13382)
!13382 = !DILexicalBlockFile(scope: !1705, file: !1474, discriminator: 8)
!13383 = !DILocation(line: 119, column: 243, scope: !1705)
!13384 = !DILocation(line: 119, column: 273, scope: !1705)
!13385 = !DILocation(line: 119, column: 287, scope: !13386)
!13386 = distinct !DILexicalBlock(scope: !1705, file: !1474, line: 119, column: 284)
!13387 = !DILocation(line: 119, column: 304, scope: !13386)
!13388 = !DILocation(line: 119, column: 284, scope: !13386)
!13389 = !DILocation(line: 119, column: 314, scope: !13386)
!13390 = !DILocation(line: 119, column: 284, scope: !1705)
!13391 = !DILocation(line: 119, column: 284, scope: !13392)
!13392 = !DILexicalBlockFile(scope: !1705, file: !1474, discriminator: 9)
!13393 = !DILocation(line: 119, column: 345, scope: !13394)
!13394 = !DILexicalBlockFile(scope: !13386, file: !1474, discriminator: 10)
!13395 = !DILocation(line: 119, column: 363, scope: !13386)
!13396 = !DILocation(line: 119, column: 373, scope: !13386)
!13397 = !DILocation(line: 119, column: 398, scope: !13386)
!13398 = !DILocation(line: 119, column: 329, scope: !13386)
!13399 = !DILocation(line: 119, column: 417, scope: !13400)
!13400 = !DILexicalBlockFile(scope: !1706, file: !1474, discriminator: 11)
!13401 = !DILocation(line: 119, column: 417, scope: !1705)
!13402 = !DILocation(line: 119, column: 417, scope: !13403)
!13403 = !DILexicalBlockFile(scope: !1705, file: !1474, discriminator: 12)
!13404 = !DILocation(line: 119, column: 430, scope: !13405)
!13405 = !DILexicalBlockFile(scope: !1706, file: !1474, discriminator: 13)
!13406 = !DILocation(line: 119, column: 451, scope: !13407)
!13407 = !DILexicalBlockFile(scope: !1707, file: !1474, discriminator: 7)
!13408 = !DILocation(line: 119, column: 456, scope: !13409)
!13409 = !DILexicalBlockFile(scope: !1718, file: !1474, discriminator: 14)
!13410 = !DILocation(line: 119, column: 466, scope: !1718)
!13411 = !DILocation(line: 119, column: 496, scope: !1718)
!13412 = !DILocation(line: 119, column: 510, scope: !13413)
!13413 = distinct !DILexicalBlock(scope: !1718, file: !1474, line: 119, column: 507)
!13414 = !DILocation(line: 119, column: 527, scope: !13413)
!13415 = !DILocation(line: 119, column: 507, scope: !13413)
!13416 = !DILocation(line: 119, column: 537, scope: !13413)
!13417 = !DILocation(line: 119, column: 507, scope: !1718)
!13418 = !DILocation(line: 119, column: 507, scope: !13419)
!13419 = !DILexicalBlockFile(scope: !1718, file: !1474, discriminator: 15)
!13420 = !DILocation(line: 119, column: 568, scope: !13421)
!13421 = !DILexicalBlockFile(scope: !13413, file: !1474, discriminator: 16)
!13422 = !DILocation(line: 119, column: 586, scope: !13413)
!13423 = !DILocation(line: 119, column: 596, scope: !13413)
!13424 = !DILocation(line: 119, column: 621, scope: !13413)
!13425 = !DILocation(line: 119, column: 552, scope: !13413)
!13426 = !DILocation(line: 119, column: 640, scope: !13427)
!13427 = !DILexicalBlockFile(scope: !1707, file: !1474, discriminator: 17)
!13428 = !DILocation(line: 119, column: 640, scope: !1718)
!13429 = !DILocation(line: 119, column: 640, scope: !13430)
!13430 = !DILexicalBlockFile(scope: !1718, file: !1474, discriminator: 18)
!13431 = !DILocation(line: 119, column: 660, scope: !13432)
!13432 = !DILexicalBlockFile(scope: !1710, file: !1474, discriminator: 5)
!13433 = !DILocation(line: 120, column: 25, scope: !1711)
!13434 = !DILocation(line: 120, column: 27, scope: !1711)
!13435 = !DILocation(line: 120, column: 23, scope: !1711)
!13436 = !DILocation(line: 120, column: 19, scope: !1711)
!13437 = !DILocation(line: 121, column: 17, scope: !1711)
!13438 = !DILocation(line: 123, column: 9, scope: !1713)
!13439 = !DILocation(line: 116, column: 29, scope: !1714)
!13440 = !DILocation(line: 116, column: 9, scope: !1714)
!13441 = !DILocation(line: 133, column: 9, scope: !1727)
!13442 = !DILocation(line: 133, column: 14, scope: !1727)
!13443 = !DILocation(line: 133, column: 11, scope: !1727)
!13444 = !DILocation(line: 133, column: 9, scope: !1692)
!13445 = !DILocation(line: 134, column: 48, scope: !1725)
!13446 = !DILocation(line: 134, column: 56, scope: !1725)
!13447 = !DILocation(line: 134, column: 53, scope: !1725)
!13448 = !DILocation(line: 134, column: 61, scope: !1725)
!13449 = !DILocation(line: 134, column: 73, scope: !1725)
!13450 = !DILocation(line: 134, column: 70, scope: !1725)
!13451 = !DILocation(line: 134, column: 17, scope: !1725)
!13452 = !DILocation(line: 134, column: 15, scope: !1725)
!13453 = !DILocation(line: 134, column: 82, scope: !13454)
!13454 = distinct !DILexicalBlock(scope: !1725, file: !1474, line: 134, column: 82)
!13455 = !DILocation(line: 134, column: 86, scope: !13454)
!13456 = !DILocation(line: 134, column: 82, scope: !1725)
!13457 = !DILocation(line: 134, column: 101, scope: !13458)
!13458 = !DILexicalBlockFile(scope: !13454, file: !1474, discriminator: 1)
!13459 = !DILocation(line: 134, column: 119, scope: !13460)
!13460 = !DILexicalBlockFile(scope: !1724, file: !1474, discriminator: 2)
!13461 = !DILocation(line: 134, column: 125, scope: !1724)
!13462 = !DILocation(line: 134, column: 119, scope: !1725)
!13463 = !DILocation(line: 134, column: 178, scope: !13464)
!13464 = !DILexicalBlockFile(scope: !13465, file: !1474, discriminator: 3)
!13465 = distinct !DILexicalBlock(scope: !1724, file: !1474, line: 134, column: 131)
!13466 = !DILocation(line: 134, column: 168, scope: !13465)
!13467 = !DILocation(line: 134, column: 152, scope: !13465)
!13468 = !DILocation(line: 134, column: 135, scope: !13465)
!13469 = !DILocation(line: 134, column: 160, scope: !13465)
!13470 = !DILocation(line: 134, column: 134, scope: !13465)
!13471 = !DILocation(line: 134, column: 175, scope: !13465)
!13472 = !DILocation(line: 134, column: 185, scope: !13465)
!13473 = !DILocation(line: 134, column: 212, scope: !13474)
!13474 = !DILexicalBlockFile(scope: !1722, file: !1474, discriminator: 4)
!13475 = !DILocation(line: 134, column: 218, scope: !1722)
!13476 = !DILocation(line: 134, column: 198, scope: !1722)
!13477 = !DILocation(line: 134, column: 198, scope: !1723)
!13478 = !DILocation(line: 134, column: 226, scope: !13479)
!13479 = !DILexicalBlockFile(scope: !1721, file: !1474, discriminator: 6)
!13480 = !DILocation(line: 134, column: 231, scope: !13481)
!13481 = !DILexicalBlockFile(scope: !1720, file: !1474, discriminator: 8)
!13482 = !DILocation(line: 134, column: 241, scope: !1720)
!13483 = !DILocation(line: 134, column: 271, scope: !1720)
!13484 = !DILocation(line: 134, column: 285, scope: !13485)
!13485 = distinct !DILexicalBlock(scope: !1720, file: !1474, line: 134, column: 282)
!13486 = !DILocation(line: 134, column: 302, scope: !13485)
!13487 = !DILocation(line: 134, column: 282, scope: !13485)
!13488 = !DILocation(line: 134, column: 312, scope: !13485)
!13489 = !DILocation(line: 134, column: 282, scope: !1720)
!13490 = !DILocation(line: 134, column: 282, scope: !13491)
!13491 = !DILexicalBlockFile(scope: !1720, file: !1474, discriminator: 9)
!13492 = !DILocation(line: 134, column: 343, scope: !13493)
!13493 = !DILexicalBlockFile(scope: !13485, file: !1474, discriminator: 10)
!13494 = !DILocation(line: 134, column: 361, scope: !13485)
!13495 = !DILocation(line: 134, column: 371, scope: !13485)
!13496 = !DILocation(line: 134, column: 396, scope: !13485)
!13497 = !DILocation(line: 134, column: 327, scope: !13485)
!13498 = !DILocation(line: 134, column: 415, scope: !13499)
!13499 = !DILexicalBlockFile(scope: !1721, file: !1474, discriminator: 11)
!13500 = !DILocation(line: 134, column: 415, scope: !1720)
!13501 = !DILocation(line: 134, column: 415, scope: !13502)
!13502 = !DILexicalBlockFile(scope: !1720, file: !1474, discriminator: 12)
!13503 = !DILocation(line: 134, column: 428, scope: !13504)
!13504 = !DILexicalBlockFile(scope: !1721, file: !1474, discriminator: 13)
!13505 = !DILocation(line: 134, column: 449, scope: !13506)
!13506 = !DILexicalBlockFile(scope: !1722, file: !1474, discriminator: 7)
!13507 = !DILocation(line: 134, column: 454, scope: !13508)
!13508 = !DILexicalBlockFile(scope: !1729, file: !1474, discriminator: 14)
!13509 = !DILocation(line: 134, column: 464, scope: !1729)
!13510 = !DILocation(line: 134, column: 494, scope: !1729)
!13511 = !DILocation(line: 134, column: 508, scope: !13512)
!13512 = distinct !DILexicalBlock(scope: !1729, file: !1474, line: 134, column: 505)
!13513 = !DILocation(line: 134, column: 525, scope: !13512)
!13514 = !DILocation(line: 134, column: 505, scope: !13512)
!13515 = !DILocation(line: 134, column: 535, scope: !13512)
!13516 = !DILocation(line: 134, column: 505, scope: !1729)
!13517 = !DILocation(line: 134, column: 505, scope: !13518)
!13518 = !DILexicalBlockFile(scope: !1729, file: !1474, discriminator: 15)
!13519 = !DILocation(line: 134, column: 566, scope: !13520)
!13520 = !DILexicalBlockFile(scope: !13512, file: !1474, discriminator: 16)
!13521 = !DILocation(line: 134, column: 584, scope: !13512)
!13522 = !DILocation(line: 134, column: 594, scope: !13512)
!13523 = !DILocation(line: 134, column: 619, scope: !13512)
!13524 = !DILocation(line: 134, column: 550, scope: !13512)
!13525 = !DILocation(line: 134, column: 638, scope: !13526)
!13526 = !DILexicalBlockFile(scope: !1722, file: !1474, discriminator: 17)
!13527 = !DILocation(line: 134, column: 638, scope: !1729)
!13528 = !DILocation(line: 134, column: 638, scope: !13529)
!13529 = !DILexicalBlockFile(scope: !1729, file: !1474, discriminator: 18)
!13530 = !DILocation(line: 134, column: 658, scope: !13531)
!13531 = !DILexicalBlockFile(scope: !1725, file: !1474, discriminator: 5)
!13532 = !DILocation(line: 135, column: 5, scope: !1726)
!13533 = !DILocation(line: 136, column: 41, scope: !1692)
!13534 = !DILocation(line: 136, column: 22, scope: !1692)
!13535 = !DILocation(line: 136, column: 7, scope: !1692)
!13536 = !DILocation(line: 136, column: 30, scope: !1692)
!13537 = !DILocation(line: 136, column: 39, scope: !1692)
!13538 = !DILocation(line: 137, column: 12, scope: !1692)
!13539 = !DILocation(line: 137, column: 5, scope: !1692)
!13540 = !DILocation(line: 140, column: 5, scope: !1692)
!13541 = !DILocation(line: 140, column: 10, scope: !13542)
!13542 = !DILexicalBlockFile(scope: !1731, file: !1474, discriminator: 1)
!13543 = !DILocation(line: 140, column: 20, scope: !1731)
!13544 = !DILocation(line: 140, column: 50, scope: !1731)
!13545 = !DILocation(line: 140, column: 65, scope: !13546)
!13546 = distinct !DILexicalBlock(scope: !1731, file: !1474, line: 140, column: 62)
!13547 = !DILocation(line: 140, column: 82, scope: !13546)
!13548 = !DILocation(line: 140, column: 62, scope: !13546)
!13549 = !DILocation(line: 140, column: 92, scope: !13546)
!13550 = !DILocation(line: 140, column: 62, scope: !1731)
!13551 = !DILocation(line: 140, column: 62, scope: !13552)
!13552 = !DILexicalBlockFile(scope: !1731, file: !1474, discriminator: 2)
!13553 = !DILocation(line: 140, column: 123, scope: !13554)
!13554 = !DILexicalBlockFile(scope: !13546, file: !1474, discriminator: 3)
!13555 = !DILocation(line: 140, column: 141, scope: !13546)
!13556 = !DILocation(line: 140, column: 151, scope: !13546)
!13557 = !DILocation(line: 140, column: 176, scope: !13546)
!13558 = !DILocation(line: 140, column: 107, scope: !13546)
!13559 = !DILocation(line: 140, column: 195, scope: !13560)
!13560 = !DILexicalBlockFile(scope: !1692, file: !1474, discriminator: 4)
!13561 = !DILocation(line: 140, column: 195, scope: !1731)
!13562 = !DILocation(line: 140, column: 195, scope: !13563)
!13563 = !DILexicalBlockFile(scope: !1731, file: !1474, discriminator: 5)
!13564 = !DILocation(line: 141, column: 5, scope: !1692)
!13565 = !DILocation(line: 142, column: 1, scope: !1692)
!13566 = !DILocation(line: 336, column: 32, scope: !1738)
!13567 = !DILocation(line: 337, column: 34, scope: !1738)
!13568 = !DILocation(line: 337, column: 50, scope: !1738)
!13569 = !DILocation(line: 338, column: 26, scope: !1738)
!13570 = !DILocation(line: 348, column: 5, scope: !1738)
!13571 = !DILocation(line: 348, column: 16, scope: !1738)
!13572 = !DILocation(line: 349, column: 5, scope: !1738)
!13573 = !DILocation(line: 349, column: 16, scope: !1738)
!13574 = !DILocation(line: 350, column: 5, scope: !1738)
!13575 = !DILocation(line: 350, column: 15, scope: !1738)
!13576 = !DILocation(line: 350, column: 22, scope: !1738)
!13577 = !DILocation(line: 351, column: 5, scope: !1738)
!13578 = !DILocation(line: 351, column: 15, scope: !1738)
!13579 = !DILocation(line: 353, column: 9, scope: !13580)
!13580 = distinct !DILexicalBlock(scope: !1738, file: !1474, line: 353, column: 9)
!13581 = !DILocation(line: 353, column: 14, scope: !13580)
!13582 = !DILocation(line: 353, column: 9, scope: !1738)
!13583 = !DILocation(line: 354, column: 9, scope: !13580)
!13584 = !DILocation(line: 356, column: 16, scope: !1753)
!13585 = !DILocation(line: 356, column: 12, scope: !1753)
!13586 = !DILocation(line: 356, column: 10, scope: !1753)
!13587 = !DILocation(line: 356, column: 21, scope: !13588)
!13588 = !DILexicalBlockFile(scope: !13589, file: !1474, discriminator: 2)
!13589 = !DILexicalBlockFile(scope: !1752, file: !1474, discriminator: 1)
!13590 = !DILocation(line: 356, column: 25, scope: !1752)
!13591 = !DILocation(line: 356, column: 23, scope: !1752)
!13592 = !DILocation(line: 356, column: 5, scope: !1753)
!13593 = !DILocation(line: 357, column: 9, scope: !1751)
!13594 = !DILocation(line: 357, column: 20, scope: !1751)
!13595 = !DILocation(line: 360, column: 9, scope: !1751)
!13596 = !DILocation(line: 360, column: 16, scope: !13597)
!13597 = !DILexicalBlockFile(scope: !13598, file: !1474, discriminator: 7)
!13598 = !DILexicalBlockFile(scope: !1751, file: !1474, discriminator: 1)
!13599 = !DILocation(line: 360, column: 20, scope: !1751)
!13600 = !DILocation(line: 360, column: 18, scope: !1751)
!13601 = !DILocation(line: 360, column: 28, scope: !1751)
!13602 = !DILocation(line: 360, column: 38, scope: !13603)
!13603 = !DILexicalBlockFile(scope: !1751, file: !1474, discriminator: 2)
!13604 = !DILocation(line: 360, column: 34, scope: !1751)
!13605 = !DILocation(line: 360, column: 41, scope: !1751)
!13606 = !DILocation(line: 360, column: 50, scope: !1751)
!13607 = !DILocation(line: 360, column: 58, scope: !13608)
!13608 = !DILexicalBlockFile(scope: !1751, file: !1474, discriminator: 5)
!13609 = !DILocation(line: 360, column: 54, scope: !1751)
!13610 = !DILocation(line: 360, column: 61, scope: !1751)
!13611 = !DILocation(line: 360, column: 31, scope: !13612)
!13612 = !DILexicalBlockFile(scope: !13613, file: !1474, discriminator: 6)
!13613 = !DILexicalBlockFile(scope: !1751, file: !1474, discriminator: 4)
!13614 = !DILocation(line: 360, column: 9, scope: !13615)
!13615 = !DILexicalBlockFile(scope: !1751, file: !1474, discriminator: 3)
!13616 = !DILocation(line: 361, column: 14, scope: !1751)
!13617 = !DILocation(line: 364, column: 15, scope: !1751)
!13618 = !DILocation(line: 364, column: 13, scope: !1751)
!13619 = !DILocation(line: 365, column: 13, scope: !13620)
!13620 = distinct !DILexicalBlock(scope: !1751, file: !1474, line: 365, column: 13)
!13621 = !DILocation(line: 365, column: 17, scope: !13620)
!13622 = !DILocation(line: 365, column: 15, scope: !13620)
!13623 = !DILocation(line: 365, column: 13, scope: !1751)
!13624 = !DILocation(line: 366, column: 21, scope: !13625)
!13625 = distinct !DILexicalBlock(scope: !13626, file: !1474, line: 366, column: 17)
!13626 = distinct !DILexicalBlock(scope: !13620, file: !1474, line: 365, column: 26)
!13627 = !DILocation(line: 366, column: 17, scope: !13625)
!13628 = !DILocation(line: 366, column: 24, scope: !13625)
!13629 = !DILocation(line: 366, column: 32, scope: !13625)
!13630 = !DILocation(line: 366, column: 35, scope: !13631)
!13631 = !DILexicalBlockFile(scope: !13625, file: !1474, discriminator: 1)
!13632 = !DILocation(line: 366, column: 37, scope: !13625)
!13633 = !DILocation(line: 366, column: 43, scope: !13625)
!13634 = !DILocation(line: 366, column: 41, scope: !13625)
!13635 = !DILocation(line: 366, column: 51, scope: !13625)
!13636 = !DILocation(line: 366, column: 58, scope: !13637)
!13637 = !DILexicalBlockFile(scope: !13625, file: !1474, discriminator: 2)
!13638 = !DILocation(line: 366, column: 59, scope: !13625)
!13639 = !DILocation(line: 366, column: 54, scope: !13625)
!13640 = !DILocation(line: 366, column: 63, scope: !13625)
!13641 = !DILocation(line: 366, column: 17, scope: !13626)
!13642 = !DILocation(line: 367, column: 19, scope: !13625)
!13643 = !DILocation(line: 367, column: 17, scope: !13625)
!13644 = !DILocation(line: 369, column: 18, scope: !13625)
!13645 = !DILocation(line: 370, column: 17, scope: !13646)
!13646 = distinct !DILexicalBlock(scope: !13626, file: !1474, line: 370, column: 17)
!13647 = !DILocation(line: 370, column: 17, scope: !13626)
!13648 = !DILocation(line: 371, column: 23, scope: !13646)
!13649 = !DILocation(line: 371, column: 21, scope: !13646)
!13650 = !DILocation(line: 371, column: 17, scope: !13646)
!13651 = !DILocation(line: 372, column: 9, scope: !13626)
!13652 = !DILocation(line: 381, column: 46, scope: !1751)
!13653 = !DILocation(line: 381, column: 54, scope: !1751)
!13654 = !DILocation(line: 381, column: 51, scope: !1751)
!13655 = !DILocation(line: 381, column: 59, scope: !1751)
!13656 = !DILocation(line: 381, column: 67, scope: !1751)
!13657 = !DILocation(line: 381, column: 64, scope: !1751)
!13658 = !DILocation(line: 381, column: 15, scope: !1751)
!13659 = !DILocation(line: 381, column: 13, scope: !1751)
!13660 = !DILocation(line: 381, column: 76, scope: !13661)
!13661 = distinct !DILexicalBlock(scope: !1751, file: !1474, line: 381, column: 76)
!13662 = !DILocation(line: 381, column: 80, scope: !13661)
!13663 = !DILocation(line: 381, column: 76, scope: !1751)
!13664 = !DILocation(line: 381, column: 95, scope: !13661)
!13665 = !DILocation(line: 381, column: 127, scope: !13666)
!13666 = !DILexicalBlockFile(scope: !1757, file: !1474, discriminator: 1)
!13667 = !DILocation(line: 381, column: 133, scope: !1757)
!13668 = !DILocation(line: 381, column: 113, scope: !1757)
!13669 = !DILocation(line: 381, column: 113, scope: !1751)
!13670 = !DILocation(line: 381, column: 141, scope: !13671)
!13671 = !DILexicalBlockFile(scope: !1756, file: !1474, discriminator: 2)
!13672 = !DILocation(line: 381, column: 146, scope: !13673)
!13673 = !DILexicalBlockFile(scope: !1755, file: !1474, discriminator: 4)
!13674 = !DILocation(line: 381, column: 156, scope: !1755)
!13675 = !DILocation(line: 381, column: 186, scope: !1755)
!13676 = !DILocation(line: 381, column: 200, scope: !13677)
!13677 = distinct !DILexicalBlock(scope: !1755, file: !1474, line: 381, column: 197)
!13678 = !DILocation(line: 381, column: 217, scope: !13677)
!13679 = !DILocation(line: 381, column: 197, scope: !13677)
!13680 = !DILocation(line: 381, column: 227, scope: !13677)
!13681 = !DILocation(line: 381, column: 197, scope: !1755)
!13682 = !DILocation(line: 381, column: 197, scope: !13683)
!13683 = !DILexicalBlockFile(scope: !1755, file: !1474, discriminator: 5)
!13684 = !DILocation(line: 381, column: 258, scope: !13685)
!13685 = !DILexicalBlockFile(scope: !13677, file: !1474, discriminator: 6)
!13686 = !DILocation(line: 381, column: 276, scope: !13677)
!13687 = !DILocation(line: 381, column: 286, scope: !13677)
!13688 = !DILocation(line: 381, column: 311, scope: !13677)
!13689 = !DILocation(line: 381, column: 242, scope: !13677)
!13690 = !DILocation(line: 381, column: 330, scope: !13691)
!13691 = !DILexicalBlockFile(scope: !1756, file: !1474, discriminator: 7)
!13692 = !DILocation(line: 381, column: 330, scope: !1755)
!13693 = !DILocation(line: 381, column: 330, scope: !13694)
!13694 = !DILexicalBlockFile(scope: !1755, file: !1474, discriminator: 8)
!13695 = !DILocation(line: 381, column: 343, scope: !1756)
!13696 = !DILocation(line: 381, column: 364, scope: !13697)
!13697 = !DILexicalBlockFile(scope: !1757, file: !1474, discriminator: 3)
!13698 = !DILocation(line: 381, column: 369, scope: !13699)
!13699 = !DILexicalBlockFile(scope: !1759, file: !1474, discriminator: 9)
!13700 = !DILocation(line: 381, column: 379, scope: !1759)
!13701 = !DILocation(line: 381, column: 409, scope: !1759)
!13702 = !DILocation(line: 381, column: 423, scope: !13703)
!13703 = distinct !DILexicalBlock(scope: !1759, file: !1474, line: 381, column: 420)
!13704 = !DILocation(line: 381, column: 440, scope: !13703)
!13705 = !DILocation(line: 381, column: 420, scope: !13703)
!13706 = !DILocation(line: 381, column: 450, scope: !13703)
!13707 = !DILocation(line: 381, column: 420, scope: !1759)
!13708 = !DILocation(line: 381, column: 420, scope: !13709)
!13709 = !DILexicalBlockFile(scope: !1759, file: !1474, discriminator: 10)
!13710 = !DILocation(line: 381, column: 481, scope: !13711)
!13711 = !DILexicalBlockFile(scope: !13703, file: !1474, discriminator: 11)
!13712 = !DILocation(line: 381, column: 499, scope: !13703)
!13713 = !DILocation(line: 381, column: 509, scope: !13703)
!13714 = !DILocation(line: 381, column: 534, scope: !13703)
!13715 = !DILocation(line: 381, column: 465, scope: !13703)
!13716 = !DILocation(line: 381, column: 553, scope: !13717)
!13717 = !DILexicalBlockFile(scope: !1757, file: !1474, discriminator: 12)
!13718 = !DILocation(line: 381, column: 553, scope: !1759)
!13719 = !DILocation(line: 381, column: 553, scope: !13720)
!13720 = !DILexicalBlockFile(scope: !1759, file: !1474, discriminator: 13)
!13721 = !DILocation(line: 382, column: 13, scope: !1751)
!13722 = !DILocation(line: 382, column: 11, scope: !1751)
!13723 = !DILocation(line: 383, column: 5, scope: !1752)
!13724 = !DILocation(line: 383, column: 5, scope: !13589)
!13725 = !DILocation(line: 356, column: 5, scope: !1752)
!13726 = !DILocation(line: 384, column: 12, scope: !1738)
!13727 = !DILocation(line: 384, column: 5, scope: !1738)
!13728 = !DILocation(line: 387, column: 5, scope: !1738)
!13729 = !DILocation(line: 387, column: 10, scope: !13730)
!13730 = !DILexicalBlockFile(scope: !1761, file: !1474, discriminator: 1)
!13731 = !DILocation(line: 387, column: 20, scope: !1761)
!13732 = !DILocation(line: 387, column: 50, scope: !1761)
!13733 = !DILocation(line: 387, column: 65, scope: !13734)
!13734 = distinct !DILexicalBlock(scope: !1761, file: !1474, line: 387, column: 62)
!13735 = !DILocation(line: 387, column: 82, scope: !13734)
!13736 = !DILocation(line: 387, column: 62, scope: !13734)
!13737 = !DILocation(line: 387, column: 92, scope: !13734)
!13738 = !DILocation(line: 387, column: 62, scope: !1761)
!13739 = !DILocation(line: 387, column: 62, scope: !13740)
!13740 = !DILexicalBlockFile(scope: !1761, file: !1474, discriminator: 2)
!13741 = !DILocation(line: 387, column: 123, scope: !13742)
!13742 = !DILexicalBlockFile(scope: !13734, file: !1474, discriminator: 3)
!13743 = !DILocation(line: 387, column: 141, scope: !13734)
!13744 = !DILocation(line: 387, column: 151, scope: !13734)
!13745 = !DILocation(line: 387, column: 176, scope: !13734)
!13746 = !DILocation(line: 387, column: 107, scope: !13734)
!13747 = !DILocation(line: 387, column: 195, scope: !13748)
!13748 = !DILexicalBlockFile(scope: !1738, file: !1474, discriminator: 4)
!13749 = !DILocation(line: 387, column: 195, scope: !1761)
!13750 = !DILocation(line: 387, column: 195, scope: !13751)
!13751 = !DILexicalBlockFile(scope: !1761, file: !1474, discriminator: 5)
!13752 = !DILocation(line: 388, column: 5, scope: !1738)
!13753 = !DILocation(line: 389, column: 1, scope: !1738)
!13754 = !DILocation(line: 2997, column: 44, scope: !1902)
!13755 = !DILocation(line: 2999, column: 5, scope: !1902)
!13756 = !DILocation(line: 2999, column: 16, scope: !1902)
!13757 = !DILocation(line: 3000, column: 9, scope: !13758)
!13758 = distinct !DILexicalBlock(scope: !1902, file: !458, line: 3000, column: 9)
!13759 = !DILocation(line: 3000, column: 13, scope: !13758)
!13760 = !DILocation(line: 3000, column: 9, scope: !1902)
!13761 = !DILocation(line: 3001, column: 47, scope: !13758)
!13762 = !DILocation(line: 3001, column: 51, scope: !13758)
!13763 = !DILocation(line: 3001, column: 32, scope: !13758)
!13764 = !DILocation(line: 3001, column: 61, scope: !13758)
!13765 = !DILocation(line: 3001, column: 73, scope: !13758)
!13766 = !DILocation(line: 3001, column: 77, scope: !13758)
!13767 = !DILocation(line: 3001, column: 71, scope: !13758)
!13768 = !DILocation(line: 3001, column: 13, scope: !13758)
!13769 = !DILocation(line: 3001, column: 9, scope: !13758)
!13770 = !DILocation(line: 3002, column: 31, scope: !1902)
!13771 = !DILocation(line: 3002, column: 12, scope: !1902)
!13772 = !DILocation(line: 3003, column: 1, scope: !1902)
!13773 = !DILocation(line: 3002, column: 5, scope: !1902)
!13774 = !DILocation(line: 3009, column: 39, scope: !1906)
!13775 = !DILocation(line: 3011, column: 9, scope: !1911)
!13776 = !DILocation(line: 3011, column: 13, scope: !1911)
!13777 = !DILocation(line: 3011, column: 20, scope: !1911)
!13778 = !DILocation(line: 3011, column: 9, scope: !1906)
!13779 = !DILocation(line: 3012, column: 46, scope: !13780)
!13780 = distinct !DILexicalBlock(scope: !1911, file: !458, line: 3011, column: 35)
!13781 = !DILocation(line: 3013, column: 30, scope: !13780)
!13782 = !DILocation(line: 3013, column: 34, scope: !13780)
!13783 = !DILocation(line: 3013, column: 42, scope: !13780)
!13784 = !DILocation(line: 3013, column: 46, scope: !13780)
!13785 = !DILocation(line: 3012, column: 16, scope: !13780)
!13786 = !DILocation(line: 3012, column: 9, scope: !13780)
!13787 = !DILocation(line: 3015, column: 9, scope: !1910)
!13788 = !DILocation(line: 3015, column: 19, scope: !1910)
!13789 = !DILocation(line: 3015, column: 23, scope: !1910)
!13790 = !DILocation(line: 3016, column: 13, scope: !13791)
!13791 = distinct !DILexicalBlock(scope: !1910, file: !458, line: 3016, column: 13)
!13792 = !DILocation(line: 3016, column: 15, scope: !13791)
!13793 = !DILocation(line: 3016, column: 13, scope: !1910)
!13794 = !DILocation(line: 3017, column: 13, scope: !13791)
!13795 = !DILocation(line: 3018, column: 45, scope: !1910)
!13796 = !DILocation(line: 3018, column: 75, scope: !1910)
!13797 = !DILocation(line: 3018, column: 16, scope: !1910)
!13798 = !DILocation(line: 3018, column: 9, scope: !1910)
!13799 = !DILocation(line: 3019, column: 5, scope: !1911)
!13800 = !DILocation(line: 3020, column: 1, scope: !1906)
!13801 = !DILocation(line: 3023, column: 41, scope: !1912)
!13802 = !DILocation(line: 3023, column: 55, scope: !1912)
!13803 = !DILocation(line: 3025, column: 5, scope: !1912)
!13804 = !DILocation(line: 3025, column: 16, scope: !1912)
!13805 = !DILocation(line: 3025, column: 41, scope: !1912)
!13806 = !DILocation(line: 3025, column: 24, scope: !1912)
!13807 = !DILocation(line: 3026, column: 9, scope: !13808)
!13808 = distinct !DILexicalBlock(scope: !1912, file: !458, line: 3026, column: 9)
!13809 = !DILocation(line: 3026, column: 15, scope: !13808)
!13810 = !DILocation(line: 3026, column: 21, scope: !13808)
!13811 = !DILocation(line: 3026, column: 24, scope: !13812)
!13812 = !DILexicalBlockFile(scope: !13808, file: !458, discriminator: 1)
!13813 = !DILocation(line: 3026, column: 9, scope: !1912)
!13814 = !DILocation(line: 3027, column: 9, scope: !13808)
!13815 = !DILocation(line: 3028, column: 9, scope: !13816)
!13816 = distinct !DILexicalBlock(scope: !1912, file: !458, line: 3028, column: 9)
!13817 = !DILocation(line: 3028, column: 13, scope: !13816)
!13818 = !DILocation(line: 3028, column: 20, scope: !13816)
!13819 = !DILocation(line: 3028, column: 9, scope: !1912)
!13820 = !DILocation(line: 3029, column: 13, scope: !13821)
!13821 = distinct !DILexicalBlock(scope: !13822, file: !458, line: 3029, column: 13)
!13822 = distinct !DILexicalBlock(scope: !13816, file: !458, line: 3028, column: 35)
!13823 = !DILocation(line: 3029, column: 19, scope: !13821)
!13824 = !DILocation(line: 3029, column: 13, scope: !13822)
!13825 = !DILocation(line: 3030, column: 19, scope: !13821)
!13826 = !DILocation(line: 3030, column: 13, scope: !13821)
!13827 = !DILocation(line: 3031, column: 18, scope: !13828)
!13828 = distinct !DILexicalBlock(scope: !13821, file: !458, line: 3031, column: 18)
!13829 = !DILocation(line: 3031, column: 58, scope: !13828)
!13830 = !DILocation(line: 3031, column: 62, scope: !13828)
!13831 = !DILocation(line: 3031, column: 43, scope: !13828)
!13832 = !DILocation(line: 3031, column: 72, scope: !13828)
!13833 = !DILocation(line: 3031, column: 24, scope: !13828)
!13834 = !DILocation(line: 3031, column: 18, scope: !13821)
!13835 = !DILocation(line: 3032, column: 53, scope: !13828)
!13836 = !DILocation(line: 3032, column: 57, scope: !13828)
!13837 = !DILocation(line: 3032, column: 38, scope: !13828)
!13838 = !DILocation(line: 3032, column: 67, scope: !13828)
!13839 = !DILocation(line: 3032, column: 19, scope: !13828)
!13840 = !DILocation(line: 3032, column: 13, scope: !13828)
!13841 = !DILocation(line: 3033, column: 24, scope: !13822)
!13842 = !DILocation(line: 3033, column: 9, scope: !13822)
!13843 = !DILocation(line: 3033, column: 13, scope: !13822)
!13844 = !DILocation(line: 3033, column: 22, scope: !13822)
!13845 = !DILocation(line: 3034, column: 5, scope: !13822)
!13846 = !DILocation(line: 3035, column: 58, scope: !1912)
!13847 = !DILocation(line: 3035, column: 5, scope: !1912)
!13848 = !DILocation(line: 3036, column: 1, scope: !1912)
