; ModuleID = 'programs_new/Python-new/abstract.bc.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._Py_Identifier = type { %struct._Py_Identifier*, i8*, %struct._object* }
%struct._object = type { i64, %struct._typeobject* }
%struct._typeobject = type { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, {}*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, {}*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, {}*, {}*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }
%struct.PyVarObject = type { %struct._object, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.PyNumberMethods = type { %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, {}*, {}*, {}*, i32 (%struct._object*)*, {}*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, {}*, i8*, {}*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, {}* }
%struct.PySequenceMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)*, i8*, i32 (%struct._object*, i64, %struct._object*)*, i8*, i32 (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)* }
%struct.PyMappingMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)* }
%struct.PyBufferProcs = type { i32 (%struct._object*, %struct.bufferinfo*, i32)*, void (%struct._object*, %struct.bufferinfo*)* }
%struct.bufferinfo = type { i8*, %struct._object*, i64, i64, i32, i32, i8*, i64*, i64*, i64*, i8* }
%struct.PyMethodDef = type { i8*, %struct._object* (%struct._object*, %struct._object*)*, i32, i8* }
%struct.PyMemberDef = type { i8*, i32, i64, i32, i8* }
%struct.PyGetSetDef = type { i8*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, %struct._object*, i8*)*, i8*, i8* }
%struct._Py_atomic_address = type { i8* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct._longobject = type { %struct.PyVarObject, [1 x i32] }
%struct.PyBytesObject = type { %struct.PyVarObject, i64, [1 x i8] }
%struct.PyFloatObject = type { %struct._object, double }
%struct.PyTupleObject = type { %struct.PyVarObject, [1 x %struct._object*] }
%struct.PyListObject = type { %struct.PyVarObject, %struct._object**, i64 }
%struct._ts = type { %struct._ts*, %struct._ts*, %struct._is*, %struct._frame*, i32, i8, i8, i32, i32, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, %struct._object*, i64, i32, %struct._object*, void (i8*)*, i8* }
%struct._is = type { %struct._is*, %struct._ts*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, i32, i32, %struct._object* }
%struct._frame = type opaque

@PyObject_LengthHint.PyId___length_hint__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), %struct._object* null }, align 8
@.str = private unnamed_addr constant [16 x i8] c"__length_hint__\00", align 1
@PyExc_TypeError = external global %struct._object*, align 8
@_Py_NotImplementedStruct = external global %struct._object, align 8
@.str.1 = private unnamed_addr constant [47 x i8] c"__length_hint__ must be an integer, not %.100s\00", align 1
@PyExc_ValueError = external global %struct._object*, align 8
@.str.2 = private unnamed_addr constant [37 x i8] c"__length_hint__() should return >= 0\00", align 1
@PyExc_IndexError = external global %struct._object*, align 8
@.str.3 = private unnamed_addr constant [45 x i8] c"sequence index must be integer, not '%.200s'\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"'%.200s' object is not subscriptable\00", align 1
@.str.5 = private unnamed_addr constant [49 x i8] c"'%.200s' object does not support item assignment\00", align 1
@.str.6 = private unnamed_addr constant [47 x i8] c"'%.200s' object does not support item deletion\00", align 1
@.str.7 = private unnamed_addr constant [54 x i8] c"expected bytes, bytearray or buffer compatible object\00", align 1
@.str.8 = private unnamed_addr constant [43 x i8] c"expected an object with a buffer interface\00", align 1
@.str.9 = private unnamed_addr constant [52 x i8] c"expected an object with a writable buffer interface\00", align 1
@.str.10 = private unnamed_addr constant [47 x i8] c"'%.100s' does not support the buffer interface\00", align 1
@.str.11 = private unnamed_addr constant [59 x i8] c"both destination and source must have the buffer interface\00", align 1
@PyExc_BufferError = external global %struct._object*, align 8
@.str.12 = private unnamed_addr constant [53 x i8] c"destination is too small to receive data from source\00", align 1
@.str.13 = private unnamed_addr constant [24 x i8] c"Object is not writable.\00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"B\00", align 1
@PyObject_Format.PyId___format__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i32 0, i32 0), %struct._object* null }, align 8
@.str.15 = private unnamed_addr constant [11 x i8] c"__format__\00", align 1
@.str.16 = private unnamed_addr constant [38 x i8] c"Type %.100s doesn't define __format__\00", align 1
@.str.17 = private unnamed_addr constant [40 x i8] c"__format__ method did not return string\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"|\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"^\00", align 1
@.str.20 = private unnamed_addr constant [2 x i8] c"&\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"<<\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c">>\00", align 1
@.str.23 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.24 = private unnamed_addr constant [9 x i8] c"divmod()\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.26 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"//\00", align 1
@.str.28 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.29 = private unnamed_addr constant [2 x i8] c"%\00", align 1
@.str.30 = private unnamed_addr constant [12 x i8] c"** or pow()\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"|=\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"^=\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"&=\00", align 1
@.str.34 = private unnamed_addr constant [4 x i8] c"<<=\00", align 1
@.str.35 = private unnamed_addr constant [4 x i8] c">>=\00", align 1
@.str.36 = private unnamed_addr constant [3 x i8] c"-=\00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c"//=\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"/=\00", align 1
@.str.39 = private unnamed_addr constant [3 x i8] c"+=\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"*=\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c"%=\00", align 1
@.str.42 = private unnamed_addr constant [4 x i8] c"**=\00", align 1
@.str.43 = private unnamed_addr constant [39 x i8] c"bad operand type for unary -: '%.200s'\00", align 1
@.str.44 = private unnamed_addr constant [39 x i8] c"bad operand type for unary +: '%.200s'\00", align 1
@.str.45 = private unnamed_addr constant [39 x i8] c"bad operand type for unary ~: '%.200s'\00", align 1
@.str.46 = private unnamed_addr constant [37 x i8] c"bad operand type for abs(): '%.200s'\00", align 1
@.str.47 = private unnamed_addr constant [52 x i8] c"'%.200s' object cannot be interpreted as an integer\00", align 1
@PyLong_Type = external global %struct._typeobject, align 8
@.str.48 = private unnamed_addr constant [41 x i8] c"__index__ returned non-int (type %.200s)\00", align 1
@PyExc_DeprecationWarning = external global %struct._object*, align 8
@.str.49 = private unnamed_addr constant [170 x i8] c"__index__ returned non-int (type %.200s).  The ability to return an instance of a strict subclass of int is deprecated, and may be removed in a future version of Python.\00", align 1
@PyExc_OverflowError = external global %struct._object*, align 8
@.str.50 = private unnamed_addr constant [48 x i8] c"cannot fit '%.200s' into an index-sized integer\00", align 1
@PyNumber_Long.PyId___trunc__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.51, i32 0, i32 0), %struct._object* null }, align 8
@.str.51 = private unnamed_addr constant [10 x i8] c"__trunc__\00", align 1
@.str.52 = private unnamed_addr constant [46 x i8] c"__trunc__ returned non-Integral (type %.200s)\00", align 1
@.str.53 = private unnamed_addr constant [58 x i8] c"int() argument must be a string or a number, not '%.200s'\00", align 1
@PyFloat_Type = external global %struct._typeobject, align 8
@.str.54 = private unnamed_addr constant [43 x i8] c"__float__ returned non-float (type %.200s)\00", align 1
@.str.55 = private unnamed_addr constant [31 x i8] c"PyNumber_ToBase: index not int\00", align 1
@.str.56 = private unnamed_addr constant [37 x i8] c"object of type '%.200s' has no len()\00", align 1
@.str.57 = private unnamed_addr constant [38 x i8] c"'%.200s' object can't be concatenated\00", align 1
@.str.58 = private unnamed_addr constant [34 x i8] c"'%.200s' object can't be repeated\00", align 1
@.str.59 = private unnamed_addr constant [42 x i8] c"'%.200s' object does not support indexing\00", align 1
@.str.60 = private unnamed_addr constant [31 x i8] c"'%.200s' object is unsliceable\00", align 1
@.str.61 = private unnamed_addr constant [46 x i8] c"'%.200s' object doesn't support item deletion\00", align 1
@.str.62 = private unnamed_addr constant [49 x i8] c"'%.200s' object doesn't support slice assignment\00", align 1
@.str.63 = private unnamed_addr constant [47 x i8] c"'%.200s' object doesn't support slice deletion\00", align 1
@PyTuple_Type = external global %struct._typeobject, align 8
@PyList_Type = external global %struct._typeobject, align 8
@.str.64 = private unnamed_addr constant [42 x i8] c"argument of type '%.200s' is not iterable\00", align 1
@.str.65 = private unnamed_addr constant [29 x i8] c"count exceeds C integer size\00", align 1
@.str.66 = private unnamed_addr constant [29 x i8] c"index exceeds C integer size\00", align 1
@.str.67 = private unnamed_addr constant [37 x i8] c"sequence.index(x): x not in sequence\00", align 1
@PyMapping_Keys.PyId_keys = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i32 0, i32 0), %struct._object* null }, align 8
@.str.68 = private unnamed_addr constant [5 x i8] c"keys\00", align 1
@PyDict_Type = external global %struct._typeobject, align 8
@.str.69 = private unnamed_addr constant [26 x i8] c"o.keys() are not iterable\00", align 1
@PyMapping_Items.PyId_items = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.70, i32 0, i32 0), %struct._object* null }, align 8
@.str.70 = private unnamed_addr constant [6 x i8] c"items\00", align 1
@.str.71 = private unnamed_addr constant [27 x i8] c"o.items() are not iterable\00", align 1
@PyMapping_Values.PyId_values = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.72, i32 0, i32 0), %struct._object* null }, align 8
@.str.72 = private unnamed_addr constant [7 x i8] c"values\00", align 1
@.str.73 = private unnamed_addr constant [28 x i8] c"o.values() are not iterable\00", align 1
@_PyThreadState_Current = external global %struct._Py_atomic_address, align 8
@_Py_CheckRecursionLimit = external global i32, align 4
@.str.74 = private unnamed_addr constant [31 x i8] c" while calling a Python object\00", align 1
@PyExc_SystemError = external global %struct._object*, align 8
@.str.75 = private unnamed_addr constant [43 x i8] c"NULL result without error in PyObject_Call\00", align 1
@.str.76 = private unnamed_addr constant [32 x i8] c"'%.200s' object is not callable\00", align 1
@PyObject_IsInstance.PyId___instancecheck__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.77, i32 0, i32 0), %struct._object* null }, align 8
@.str.77 = private unnamed_addr constant [18 x i8] c"__instancecheck__\00", align 1
@.str.78 = private unnamed_addr constant [22 x i8] c" in __instancecheck__\00", align 1
@PyObject_IsSubclass.PyId___subclasscheck__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.79, i32 0, i32 0), %struct._object* null }, align 8
@.str.79 = private unnamed_addr constant [18 x i8] c"__subclasscheck__\00", align 1
@.str.80 = private unnamed_addr constant [22 x i8] c" in __subclasscheck__\00", align 1
@.str.81 = private unnamed_addr constant [32 x i8] c"'%.200s' object is not iterable\00", align 1
@.str.82 = private unnamed_addr constant [46 x i8] c"iter() returned non-iterator of type '%.100s'\00", align 1
@PyExc_StopIteration = external global %struct._object*, align 8
@.str.83 = private unnamed_addr constant [34 x i8] c"null argument to internal routine\00", align 1
@.str.84 = private unnamed_addr constant [62 x i8] c"unsupported operand type(s) for %.100s: '%.100s' and '%.100s'\00", align 1
@.str.85 = private unnamed_addr constant [52 x i8] c"can't multiply sequence by non-int of type '%.200s'\00", align 1
@_Py_NoneStruct = external global %struct._object, align 8
@.str.86 = private unnamed_addr constant [67 x i8] c"unsupported operand type(s) for ** or pow(): '%.100s' and '%.100s'\00", align 1
@.str.87 = private unnamed_addr constant [68 x i8] c"unsupported operand type(s) for pow(): '%.100s', '%.100s', '%.100s'\00", align 1
@.str.88 = private unnamed_addr constant [43 x i8] c"attribute of type '%.200s' is not callable\00", align 1
@recursive_isinstance.PyId___class__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.89, i32 0, i32 0), %struct._object* null }, align 8
@.str.89 = private unnamed_addr constant [10 x i8] c"__class__\00", align 1
@PyExc_AttributeError = external global %struct._object*, align 8
@.str.90 = private unnamed_addr constant [52 x i8] c"isinstance() arg 2 must be a type or tuple of types\00", align 1
@abstract_get_bases.PyId___bases__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.91, i32 0, i32 0), %struct._object* null }, align 8
@.str.91 = private unnamed_addr constant [10 x i8] c"__bases__\00", align 1
@.str.92 = private unnamed_addr constant [35 x i8] c"issubclass() arg 1 must be a class\00", align 1
@.str.93 = private unnamed_addr constant [55 x i8] c"issubclass() arg 2 must be a class or tuple of classes\00", align 1

; Function Attrs: nounwind uwtable
define %struct._object* @PyObject_Type(%struct._object* %o) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !459, metadata !1833), !dbg !1834
  %0 = bitcast %struct._object** %v to i8*, !dbg !1835
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !1835
  call void @llvm.dbg.declare(metadata %struct._object** %v, metadata !460, metadata !1833), !dbg !1836
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1837, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !1839
  br i1 %cmp, label %if.then, label %if.end, !dbg !1840

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !1841
  store %struct._object* %call, %struct._object** %retval, !dbg !1842
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1842

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1843, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !1844
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !1844, !tbaa !1845
  %4 = bitcast %struct._typeobject* %3 to %struct._object*, !dbg !1848
  store %struct._object* %4, %struct._object** %v, align 8, !dbg !1849, !tbaa !1829
  %5 = load %struct._object*, %struct._object** %v, align 8, !dbg !1850, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0, !dbg !1851
  %6 = load i64, i64* %ob_refcnt, align 8, !dbg !1852, !tbaa !1853
  %inc = add i64 %6, 1, !dbg !1852
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !1852, !tbaa !1853
  %7 = load %struct._object*, %struct._object** %v, align 8, !dbg !1854, !tbaa !1829
  store %struct._object* %7, %struct._object** %retval, !dbg !1855
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1855

cleanup:                                          ; preds = %if.end, %if.then
  %8 = bitcast %struct._object** %v to i8*, !dbg !1856
  call void @llvm.lifetime.end(i64 8, i8* %8) #2, !dbg !1856
  %9 = load %struct._object*, %struct._object** %retval, !dbg !1856
  ret %struct._object* %9, !dbg !1856
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @null_error() #0 {
entry:
  %call = call %struct._object* @PyErr_Occurred(), !dbg !1857
  %tobool = icmp ne %struct._object* %call, null, !dbg !1857
  br i1 %tobool, label %if.end, label %if.then, !dbg !1859

if.then:                                          ; preds = %entry
  %0 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8, !dbg !1860, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %0, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.83, i32 0, i32 0)), !dbg !1861
  br label %if.end, !dbg !1861

if.end:                                           ; preds = %if.then, %entry
  ret %struct._object* null, !dbg !1862
}

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define i64 @PyObject_Size(%struct._object* %o) #0 {
entry:
  %retval = alloca i64, align 8
  %o.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PySequenceMethods*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !463, metadata !1833), !dbg !1863
  %0 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !1864
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !1864
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %m, metadata !464, metadata !1833), !dbg !1865
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1866, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !1868
  br i1 %cmp, label %if.then, label %if.end, !dbg !1869

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !1870
  store i64 -1, i64* %retval, !dbg !1872
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1872

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1873, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !1874
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !1874, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 11, !dbg !1875
  %4 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !1875, !tbaa !1876
  store %struct.PySequenceMethods* %4, %struct.PySequenceMethods** %m, align 8, !dbg !1880, !tbaa !1829
  %5 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !1881, !tbaa !1829
  %tobool = icmp ne %struct.PySequenceMethods* %5, null, !dbg !1881
  br i1 %tobool, label %land.lhs.true, label %if.end.5, !dbg !1883

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !1884, !tbaa !1829
  %sq_length = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %6, i32 0, i32 0, !dbg !1886
  %7 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length, align 8, !dbg !1886, !tbaa !1887
  %tobool1 = icmp ne i64 (%struct._object*)* %7, null, !dbg !1889
  br i1 %tobool1, label %if.then.2, label %if.end.5, !dbg !1890

if.then.2:                                        ; preds = %land.lhs.true
  %8 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !1891, !tbaa !1829
  %sq_length3 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %8, i32 0, i32 0, !dbg !1892
  %9 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length3, align 8, !dbg !1892, !tbaa !1887
  %10 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1893, !tbaa !1829
  %call4 = call i64 %9(%struct._object* %10), !dbg !1891
  store i64 %call4, i64* %retval, !dbg !1894
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1894

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %11 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1895, !tbaa !1829
  %call6 = call i64 @PyMapping_Size(%struct._object* %11), !dbg !1896
  store i64 %call6, i64* %retval, !dbg !1897
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1897

cleanup:                                          ; preds = %if.end.5, %if.then.2, %if.then
  %12 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !1898
  call void @llvm.lifetime.end(i64 8, i8* %12) #2, !dbg !1898
  %13 = load i64, i64* %retval, !dbg !1898
  ret i64 %13, !dbg !1898
}

; Function Attrs: nounwind uwtable
define i64 @PyMapping_Size(%struct._object* %o) #0 {
entry:
  %retval = alloca i64, align 8
  %o.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PyMappingMethods*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1147, metadata !1833), !dbg !1899
  %0 = bitcast %struct.PyMappingMethods** %m to i8*, !dbg !1900
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !1900
  call void @llvm.dbg.declare(metadata %struct.PyMappingMethods** %m, metadata !1148, metadata !1833), !dbg !1901
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1902, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !1904
  br i1 %cmp, label %if.then, label %if.end, !dbg !1905

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !1906
  store i64 -1, i64* %retval, !dbg !1908
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1908

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1909, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !1910
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !1910, !tbaa !1845
  %tp_as_mapping = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 12, !dbg !1911
  %4 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping, align 8, !dbg !1911, !tbaa !1912
  store %struct.PyMappingMethods* %4, %struct.PyMappingMethods** %m, align 8, !dbg !1913, !tbaa !1829
  %5 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %m, align 8, !dbg !1914, !tbaa !1829
  %tobool = icmp ne %struct.PyMappingMethods* %5, null, !dbg !1914
  br i1 %tobool, label %land.lhs.true, label %if.end.5, !dbg !1916

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %m, align 8, !dbg !1917, !tbaa !1829
  %mp_length = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %6, i32 0, i32 0, !dbg !1919
  %7 = load i64 (%struct._object*)*, i64 (%struct._object*)** %mp_length, align 8, !dbg !1919, !tbaa !1920
  %tobool1 = icmp ne i64 (%struct._object*)* %7, null, !dbg !1922
  br i1 %tobool1, label %if.then.2, label %if.end.5, !dbg !1923

if.then.2:                                        ; preds = %land.lhs.true
  %8 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %m, align 8, !dbg !1924, !tbaa !1829
  %mp_length3 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %8, i32 0, i32 0, !dbg !1925
  %9 = load i64 (%struct._object*)*, i64 (%struct._object*)** %mp_length3, align 8, !dbg !1925, !tbaa !1920
  %10 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1926, !tbaa !1829
  %call4 = call i64 %9(%struct._object* %10), !dbg !1924
  store i64 %call4, i64* %retval, !dbg !1927
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1927

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %11 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1928, !tbaa !1829
  %call6 = call %struct._object* @type_error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.56, i32 0, i32 0), %struct._object* %11), !dbg !1929
  store i64 -1, i64* %retval, !dbg !1930
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1930

cleanup:                                          ; preds = %if.end.5, %if.then.2, %if.then
  %12 = bitcast %struct.PyMappingMethods** %m to i8*, !dbg !1931
  call void @llvm.lifetime.end(i64 8, i8* %12) #2, !dbg !1931
  %13 = load i64, i64* %retval, !dbg !1931
  ret i64 %13, !dbg !1931
}

; Function Attrs: nounwind uwtable
define i64 @PyObject_Length(%struct._object* %o) #0 {
entry:
  %o.addr = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !467, metadata !1833), !dbg !1932
  %0 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1933, !tbaa !1829
  %call = call i64 @PyObject_Size(%struct._object* %0), !dbg !1934
  ret i64 %call, !dbg !1935
}

; Function Attrs: nounwind uwtable
define i32 @_PyObject_HasLen(%struct._object* %o) #0 {
entry:
  %o.addr = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !470, metadata !1833), !dbg !1936
  %0 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1937, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1, !dbg !1938
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !1938, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 11, !dbg !1939
  %2 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !1939, !tbaa !1876
  %tobool = icmp ne %struct.PySequenceMethods* %2, null, !dbg !1940
  br i1 %tobool, label %land.lhs.true, label %lor.rhs, !dbg !1941

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1942, !tbaa !1829
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1, !dbg !1944
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !1944, !tbaa !1845
  %tp_as_sequence2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 11, !dbg !1945
  %5 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence2, align 8, !dbg !1945, !tbaa !1876
  %sq_length = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %5, i32 0, i32 0, !dbg !1946
  %6 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length, align 8, !dbg !1946, !tbaa !1887
  %tobool3 = icmp ne i64 (%struct._object*)* %6, null, !dbg !1947
  br i1 %tobool3, label %lor.end, label %lor.rhs, !dbg !1948

lor.rhs:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1949, !tbaa !1829
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1, !dbg !1950
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8, !dbg !1950, !tbaa !1845
  %tp_as_mapping = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 12, !dbg !1951
  %9 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping, align 8, !dbg !1951, !tbaa !1912
  %tobool5 = icmp ne %struct.PyMappingMethods* %9, null, !dbg !1952
  br i1 %tobool5, label %land.rhs, label %land.end, !dbg !1953

land.rhs:                                         ; preds = %lor.rhs
  %10 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1954, !tbaa !1829
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !1955
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8, !dbg !1955, !tbaa !1845
  %tp_as_mapping7 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 12, !dbg !1956
  %12 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping7, align 8, !dbg !1956, !tbaa !1912
  %mp_length = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %12, i32 0, i32 0, !dbg !1957
  %13 = load i64 (%struct._object*)*, i64 (%struct._object*)** %mp_length, align 8, !dbg !1957, !tbaa !1920
  %tobool8 = icmp ne i64 (%struct._object*)* %13, null, !dbg !1953
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %14 = phi i1 [ false, %lor.rhs ], [ %tobool8, %land.rhs ]
  br label %lor.end, !dbg !1948

lor.end:                                          ; preds = %land.end, %land.lhs.true
  %15 = phi i1 [ true, %land.lhs.true ], [ %14, %land.end ]
  %lor.ext = zext i1 %15 to i32, !dbg !1958
  ret i32 %lor.ext, !dbg !1961
}

; Function Attrs: nounwind uwtable
define i64 @PyObject_LengthHint(%struct._object* %o, i64 %defaultvalue) #0 {
entry:
  %retval = alloca i64, align 8
  %o.addr = alloca %struct._object*, align 8
  %defaultvalue.addr = alloca i64, align 8
  %hint = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %res = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp33 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !475, metadata !1833), !dbg !1962
  store i64 %defaultvalue, i64* %defaultvalue.addr, align 8, !tbaa !1963
  call void @llvm.dbg.declare(metadata i64* %defaultvalue.addr, metadata !476, metadata !1833), !dbg !1964
  %0 = bitcast %struct._object** %hint to i8*, !dbg !1965
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !1965
  call void @llvm.dbg.declare(metadata %struct._object** %hint, metadata !477, metadata !1833), !dbg !1966
  %1 = bitcast %struct._object** %result to i8*, !dbg !1965
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !1965
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !478, metadata !1833), !dbg !1967
  %2 = bitcast i64* %res to i8*, !dbg !1968
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !1968
  call void @llvm.dbg.declare(metadata i64* %res, metadata !479, metadata !1833), !dbg !1969
  %3 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1970, !tbaa !1829
  %call = call i32 @_PyObject_HasLen(%struct._object* %3), !dbg !1972
  %tobool = icmp ne i32 %call, 0, !dbg !1972
  br i1 %tobool, label %if.then, label %if.end.9, !dbg !1973

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1974, !tbaa !1829
  %call1 = call i64 @PyObject_Size(%struct._object* %4), !dbg !1976
  store i64 %call1, i64* %res, align 8, !dbg !1977, !tbaa !1963
  %5 = load i64, i64* %res, align 8, !dbg !1978, !tbaa !1963
  %cmp = icmp slt i64 %5, 0, !dbg !1980
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !1981

land.lhs.true:                                    ; preds = %if.then
  %call2 = call %struct._object* @PyErr_Occurred(), !dbg !1982
  %tobool3 = icmp ne %struct._object* %call2, null, !dbg !1982
  br i1 %tobool3, label %if.then.4, label %if.else, !dbg !1984

if.then.4:                                        ; preds = %land.lhs.true
  %6 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !1985, !tbaa !1829
  %call5 = call i32 @PyErr_ExceptionMatches(%struct._object* %6), !dbg !1988
  %tobool6 = icmp ne i32 %call5, 0, !dbg !1988
  br i1 %tobool6, label %if.end, label %if.then.7, !dbg !1989

if.then.7:                                        ; preds = %if.then.4
  store i64 -1, i64* %retval, !dbg !1990
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1990

if.end:                                           ; preds = %if.then.4
  call void @PyErr_Clear(), !dbg !1992
  br label %if.end.8, !dbg !1993

if.else:                                          ; preds = %land.lhs.true, %if.then
  %7 = load i64, i64* %res, align 8, !dbg !1994, !tbaa !1963
  store i64 %7, i64* %retval, !dbg !1996
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !1996

if.end.8:                                         ; preds = %if.end
  br label %if.end.9, !dbg !1997

if.end.9:                                         ; preds = %if.end.8, %entry
  %8 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !1998, !tbaa !1829
  %call10 = call %struct._object* @_PyObject_LookupSpecial(%struct._object* %8, %struct._Py_Identifier* @PyObject_LengthHint.PyId___length_hint__), !dbg !1999
  store %struct._object* %call10, %struct._object** %hint, align 8, !dbg !2000, !tbaa !1829
  %9 = load %struct._object*, %struct._object** %hint, align 8, !dbg !2001, !tbaa !1829
  %cmp11 = icmp eq %struct._object* %9, null, !dbg !2003
  br i1 %cmp11, label %if.then.12, label %if.end.17, !dbg !2004

if.then.12:                                       ; preds = %if.end.9
  %call13 = call %struct._object* @PyErr_Occurred(), !dbg !2005
  %tobool14 = icmp ne %struct._object* %call13, null, !dbg !2005
  br i1 %tobool14, label %if.then.15, label %if.end.16, !dbg !2008

if.then.15:                                       ; preds = %if.then.12
  store i64 -1, i64* %retval, !dbg !2009
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2009

if.end.16:                                        ; preds = %if.then.12
  %10 = load i64, i64* %defaultvalue.addr, align 8, !dbg !2011, !tbaa !1963
  store i64 %10, i64* %retval, !dbg !2012
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2012

if.end.17:                                        ; preds = %if.end.9
  %11 = load %struct._object*, %struct._object** %hint, align 8, !dbg !2013, !tbaa !1829
  %call18 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %11, i8* null), !dbg !2014
  store %struct._object* %call18, %struct._object** %result, align 8, !dbg !2015, !tbaa !1829
  br label %do.body, !dbg !2016

do.body:                                          ; preds = %if.end.17
  %12 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2017
  call void @llvm.lifetime.start(i64 8, i8* %12) #2, !dbg !2017
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !480, metadata !1833), !dbg !2019
  %13 = load %struct._object*, %struct._object** %hint, align 8, !dbg !2020, !tbaa !1829
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8, !dbg !2019, !tbaa !1829
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2021, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0, !dbg !2023
  %15 = load i64, i64* %ob_refcnt, align 8, !dbg !2024, !tbaa !1853
  %dec = add i64 %15, -1, !dbg !2024
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !2024, !tbaa !1853
  %cmp19 = icmp ne i64 %dec, 0, !dbg !2025
  br i1 %cmp19, label %if.then.20, label %if.else.21, !dbg !2026

if.then.20:                                       ; preds = %do.body
  br label %if.end.22, !dbg !2027

if.else.21:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2029, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1, !dbg !2031
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2031, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4, !dbg !2032
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !2032, !tbaa !2033
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2034, !tbaa !1829
  call void %18(%struct._object* %19), !dbg !2035
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.21, %if.then.20
  %20 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2036
  call void @llvm.lifetime.end(i64 8, i8* %20) #2, !dbg !2036
  br label %do.cond, !dbg !2038

do.cond:                                          ; preds = %if.end.22
  br label %do.end, !dbg !2039

do.end:                                           ; preds = %do.cond
  %21 = load %struct._object*, %struct._object** %result, align 8, !dbg !2041, !tbaa !1829
  %cmp23 = icmp eq %struct._object* %21, null, !dbg !2042
  br i1 %cmp23, label %if.then.24, label %if.else.29, !dbg !2043

if.then.24:                                       ; preds = %do.end
  %22 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !2044, !tbaa !1829
  %call25 = call i32 @PyErr_ExceptionMatches(%struct._object* %22), !dbg !2047
  %tobool26 = icmp ne i32 %call25, 0, !dbg !2047
  br i1 %tobool26, label %if.then.27, label %if.end.28, !dbg !2048

if.then.27:                                       ; preds = %if.then.24
  call void @PyErr_Clear(), !dbg !2049
  %23 = load i64, i64* %defaultvalue.addr, align 8, !dbg !2051, !tbaa !1963
  store i64 %23, i64* %retval, !dbg !2052
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2052

if.end.28:                                        ; preds = %if.then.24
  store i64 -1, i64* %retval, !dbg !2053
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2053

if.else.29:                                       ; preds = %do.end
  %24 = load %struct._object*, %struct._object** %result, align 8, !dbg !2054, !tbaa !1829
  %cmp30 = icmp eq %struct._object* %24, @_Py_NotImplementedStruct, !dbg !2055
  br i1 %cmp30, label %if.then.31, label %if.end.44, !dbg !2056

if.then.31:                                       ; preds = %if.else.29
  br label %do.body.32, !dbg !2057

do.body.32:                                       ; preds = %if.then.31
  %25 = bitcast %struct._object** %_py_decref_tmp33 to i8*, !dbg !2058
  call void @llvm.lifetime.start(i64 8, i8* %25) #2, !dbg !2058
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp33, metadata !482, metadata !1833), !dbg !2060
  %26 = load %struct._object*, %struct._object** %result, align 8, !dbg !2061, !tbaa !1829
  store %struct._object* %26, %struct._object** %_py_decref_tmp33, align 8, !dbg !2060, !tbaa !1829
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8, !dbg !2062, !tbaa !1829
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0, !dbg !2064
  %28 = load i64, i64* %ob_refcnt34, align 8, !dbg !2065, !tbaa !1853
  %dec35 = add i64 %28, -1, !dbg !2065
  store i64 %dec35, i64* %ob_refcnt34, align 8, !dbg !2065, !tbaa !1853
  %cmp36 = icmp ne i64 %dec35, 0, !dbg !2066
  br i1 %cmp36, label %if.then.37, label %if.else.38, !dbg !2067

if.then.37:                                       ; preds = %do.body.32
  br label %if.end.41, !dbg !2068

if.else.38:                                       ; preds = %do.body.32
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8, !dbg !2070, !tbaa !1829
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1, !dbg !2072
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8, !dbg !2072, !tbaa !1845
  %tp_dealloc40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4, !dbg !2073
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc40, align 8, !dbg !2073, !tbaa !2033
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8, !dbg !2074, !tbaa !1829
  call void %31(%struct._object* %32), !dbg !2075
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.38, %if.then.37
  %33 = bitcast %struct._object** %_py_decref_tmp33 to i8*, !dbg !2076
  call void @llvm.lifetime.end(i64 8, i8* %33) #2, !dbg !2076
  br label %do.cond.42, !dbg !2078

do.cond.42:                                       ; preds = %if.end.41
  br label %do.end.43, !dbg !2079

do.end.43:                                        ; preds = %do.cond.42
  %34 = load i64, i64* %defaultvalue.addr, align 8, !dbg !2081, !tbaa !1963
  store i64 %34, i64* %retval, !dbg !2082
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2082

if.end.44:                                        ; preds = %if.else.29
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44
  %35 = load %struct._object*, %struct._object** %result, align 8, !dbg !2083, !tbaa !1829
  %ob_type46 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1, !dbg !2084
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type46, align 8, !dbg !2084, !tbaa !1845
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 19, !dbg !2085
  %37 = load i64, i64* %tp_flags, align 8, !dbg !2085, !tbaa !2086
  %and = and i64 %37, 16777216, !dbg !2087
  %cmp47 = icmp ne i64 %and, 0, !dbg !2088
  br i1 %cmp47, label %if.end.63, label %if.then.48, !dbg !2089

if.then.48:                                       ; preds = %if.end.45
  %38 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !2090, !tbaa !1829
  %39 = load %struct._object*, %struct._object** %result, align 8, !dbg !2091, !tbaa !1829
  %ob_type49 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1, !dbg !2092
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type49, align 8, !dbg !2092, !tbaa !1845
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 1, !dbg !2093
  %41 = load i8*, i8** %tp_name, align 8, !dbg !2093, !tbaa !2094
  %call50 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %38, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i32 0, i32 0), i8* %41), !dbg !2095
  br label %do.body.51, !dbg !2096

do.body.51:                                       ; preds = %if.then.48
  %42 = bitcast %struct._object** %_py_decref_tmp52 to i8*, !dbg !2097
  call void @llvm.lifetime.start(i64 8, i8* %42) #2, !dbg !2097
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp52, metadata !487, metadata !1833), !dbg !2099
  %43 = load %struct._object*, %struct._object** %result, align 8, !dbg !2100, !tbaa !1829
  store %struct._object* %43, %struct._object** %_py_decref_tmp52, align 8, !dbg !2099, !tbaa !1829
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !2101, !tbaa !1829
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0, !dbg !2103
  %45 = load i64, i64* %ob_refcnt53, align 8, !dbg !2104, !tbaa !1853
  %dec54 = add i64 %45, -1, !dbg !2104
  store i64 %dec54, i64* %ob_refcnt53, align 8, !dbg !2104, !tbaa !1853
  %cmp55 = icmp ne i64 %dec54, 0, !dbg !2105
  br i1 %cmp55, label %if.then.56, label %if.else.57, !dbg !2106

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60, !dbg !2107

if.else.57:                                       ; preds = %do.body.51
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !2109, !tbaa !1829
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1, !dbg !2111
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8, !dbg !2111, !tbaa !1845
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4, !dbg !2112
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8, !dbg !2112, !tbaa !2033
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !2113, !tbaa !1829
  call void %48(%struct._object* %49), !dbg !2114
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  %50 = bitcast %struct._object** %_py_decref_tmp52 to i8*, !dbg !2115
  call void @llvm.lifetime.end(i64 8, i8* %50) #2, !dbg !2115
  br label %do.cond.61, !dbg !2117

do.cond.61:                                       ; preds = %if.end.60
  br label %do.end.62, !dbg !2118

do.end.62:                                        ; preds = %do.cond.61
  store i64 -1, i64* %retval, !dbg !2120
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2120

if.end.63:                                        ; preds = %if.end.45
  %51 = load %struct._object*, %struct._object** %result, align 8, !dbg !2121, !tbaa !1829
  %call64 = call i64 @PyLong_AsSsize_t(%struct._object* %51), !dbg !2122
  store i64 %call64, i64* %res, align 8, !dbg !2123, !tbaa !1963
  br label %do.body.65, !dbg !2124

do.body.65:                                       ; preds = %if.end.63
  %52 = bitcast %struct._object** %_py_decref_tmp66 to i8*, !dbg !2125
  call void @llvm.lifetime.start(i64 8, i8* %52) #2, !dbg !2125
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp66, metadata !491, metadata !1833), !dbg !2127
  %53 = load %struct._object*, %struct._object** %result, align 8, !dbg !2128, !tbaa !1829
  store %struct._object* %53, %struct._object** %_py_decref_tmp66, align 8, !dbg !2127, !tbaa !1829
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8, !dbg !2129, !tbaa !1829
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 0, !dbg !2131
  %55 = load i64, i64* %ob_refcnt67, align 8, !dbg !2132, !tbaa !1853
  %dec68 = add i64 %55, -1, !dbg !2132
  store i64 %dec68, i64* %ob_refcnt67, align 8, !dbg !2132, !tbaa !1853
  %cmp69 = icmp ne i64 %dec68, 0, !dbg !2133
  br i1 %cmp69, label %if.then.70, label %if.else.71, !dbg !2134

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74, !dbg !2135

if.else.71:                                       ; preds = %do.body.65
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8, !dbg !2137, !tbaa !1829
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 1, !dbg !2139
  %57 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8, !dbg !2139, !tbaa !1845
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 4, !dbg !2140
  %58 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8, !dbg !2140, !tbaa !2033
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8, !dbg !2141, !tbaa !1829
  call void %58(%struct._object* %59), !dbg !2142
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  %60 = bitcast %struct._object** %_py_decref_tmp66 to i8*, !dbg !2143
  call void @llvm.lifetime.end(i64 8, i8* %60) #2, !dbg !2143
  br label %do.cond.75, !dbg !2144

do.cond.75:                                       ; preds = %if.end.74
  br label %do.end.76, !dbg !2145

do.end.76:                                        ; preds = %do.cond.75
  %61 = load i64, i64* %res, align 8, !dbg !2147, !tbaa !1963
  %cmp77 = icmp slt i64 %61, 0, !dbg !2149
  br i1 %cmp77, label %land.lhs.true.78, label %if.end.82, !dbg !2150

land.lhs.true.78:                                 ; preds = %do.end.76
  %call79 = call %struct._object* @PyErr_Occurred(), !dbg !2151
  %tobool80 = icmp ne %struct._object* %call79, null, !dbg !2151
  br i1 %tobool80, label %if.then.81, label %if.end.82, !dbg !2153

if.then.81:                                       ; preds = %land.lhs.true.78
  store i64 -1, i64* %retval, !dbg !2154
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2154

if.end.82:                                        ; preds = %land.lhs.true.78, %do.end.76
  %62 = load i64, i64* %res, align 8, !dbg !2156, !tbaa !1963
  %cmp83 = icmp slt i64 %62, 0, !dbg !2158
  br i1 %cmp83, label %if.then.84, label %if.end.86, !dbg !2159

if.then.84:                                       ; preds = %if.end.82
  %63 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !2160, !tbaa !1829
  %call85 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %63, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i32 0, i32 0)), !dbg !2162
  store i64 -1, i64* %retval, !dbg !2163
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2163

if.end.86:                                        ; preds = %if.end.82
  %64 = load i64, i64* %res, align 8, !dbg !2164, !tbaa !1963
  store i64 %64, i64* %retval, !dbg !2165
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2165

cleanup:                                          ; preds = %if.end.86, %if.then.84, %if.then.81, %do.end.62, %do.end.43, %if.end.28, %if.then.27, %if.end.16, %if.then.15, %if.else, %if.then.7
  %65 = bitcast i64* %res to i8*, !dbg !2166
  call void @llvm.lifetime.end(i64 8, i8* %65) #2, !dbg !2166
  %66 = bitcast %struct._object** %result to i8*, !dbg !2166
  call void @llvm.lifetime.end(i64 8, i8* %66) #2, !dbg !2166
  %67 = bitcast %struct._object** %hint to i8*, !dbg !2166
  call void @llvm.lifetime.end(i64 8, i8* %67) #2, !dbg !2166
  %68 = load i64, i64* %retval, !dbg !2166
  ret i64 %68, !dbg !2166
}

declare %struct._object* @PyErr_Occurred() #3

declare i32 @PyErr_ExceptionMatches(%struct._object*) #3

declare void @PyErr_Clear() #3

declare %struct._object* @_PyObject_LookupSpecial(%struct._object*, %struct._Py_Identifier*) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PyObject_CallFunctionObjArgs(%struct._object* %callable, ...) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %callable.addr = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %vargs = alloca [1 x %struct.__va_list_tag], align 16
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %callable, %struct._object** %callable.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %callable.addr, metadata !1357, metadata !1833), !dbg !2167
  %0 = bitcast %struct._object** %args to i8*, !dbg !2168
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !2168
  call void @llvm.dbg.declare(metadata %struct._object** %args, metadata !1358, metadata !1833), !dbg !2169
  %1 = bitcast %struct._object** %tmp to i8*, !dbg !2168
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !2168
  call void @llvm.dbg.declare(metadata %struct._object** %tmp, metadata !1359, metadata !1833), !dbg !2170
  %2 = bitcast [1 x %struct.__va_list_tag]* %vargs to i8*, !dbg !2171
  call void @llvm.lifetime.start(i64 24, i8* %2) #2, !dbg !2171
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %vargs, metadata !1360, metadata !1833), !dbg !2172
  %3 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !2173, !tbaa !1829
  %cmp = icmp eq %struct._object* %3, null, !dbg !2175
  br i1 %cmp, label %if.then, label %if.end, !dbg !2176

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !2177
  store %struct._object* %call, %struct._object** %retval, !dbg !2178
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2178

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %vargs, i32 0, i32 0, !dbg !2179
  %arraydecay2 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !2180
  call void @llvm.va_start(i8* %arraydecay2), !dbg !2180
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %vargs, i32 0, i32 0, !dbg !2181
  %call4 = call %struct._object* @objargs_mktuple(%struct.__va_list_tag* %arraydecay3), !dbg !2182
  store %struct._object* %call4, %struct._object** %args, align 8, !dbg !2183, !tbaa !1829
  %arraydecay5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %vargs, i32 0, i32 0, !dbg !2184
  %arraydecay56 = bitcast %struct.__va_list_tag* %arraydecay5 to i8*, !dbg !2185
  call void @llvm.va_end(i8* %arraydecay56), !dbg !2185
  %4 = load %struct._object*, %struct._object** %args, align 8, !dbg !2186, !tbaa !1829
  %cmp7 = icmp eq %struct._object* %4, null, !dbg !2188
  br i1 %cmp7, label %if.then.8, label %if.end.9, !dbg !2189

if.then.8:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !2190
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2190

if.end.9:                                         ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !2191, !tbaa !1829
  %6 = load %struct._object*, %struct._object** %args, align 8, !dbg !2192, !tbaa !1829
  %call10 = call %struct._object* @PyObject_Call(%struct._object* %5, %struct._object* %6, %struct._object* null), !dbg !2193
  store %struct._object* %call10, %struct._object** %tmp, align 8, !dbg !2194, !tbaa !1829
  br label %do.body, !dbg !2195

do.body:                                          ; preds = %if.end.9
  %7 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2196
  call void @llvm.lifetime.start(i64 8, i8* %7) #2, !dbg !2196
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1361, metadata !1833), !dbg !2198
  %8 = load %struct._object*, %struct._object** %args, align 8, !dbg !2199, !tbaa !1829
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8, !dbg !2198, !tbaa !1829
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2200, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0, !dbg !2202
  %10 = load i64, i64* %ob_refcnt, align 8, !dbg !2203, !tbaa !1853
  %dec = add i64 %10, -1, !dbg !2203
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !2203, !tbaa !1853
  %cmp12 = icmp ne i64 %dec, 0, !dbg !2204
  br i1 %cmp12, label %if.then.13, label %if.else, !dbg !2205

if.then.13:                                       ; preds = %do.body
  br label %if.end.14, !dbg !2206

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2208, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1, !dbg !2210
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2210, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4, !dbg !2211
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !2211, !tbaa !2033
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2212, !tbaa !1829
  call void %13(%struct._object* %14), !dbg !2213
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.13
  %15 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2214
  call void @llvm.lifetime.end(i64 8, i8* %15) #2, !dbg !2214
  br label %do.cond, !dbg !2216

do.cond:                                          ; preds = %if.end.14
  br label %do.end, !dbg !2217

do.end:                                           ; preds = %do.cond
  %16 = load %struct._object*, %struct._object** %tmp, align 8, !dbg !2219, !tbaa !1829
  store %struct._object* %16, %struct._object** %retval, !dbg !2220
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2220

cleanup:                                          ; preds = %do.end, %if.then.8, %if.then
  %17 = bitcast [1 x %struct.__va_list_tag]* %vargs to i8*, !dbg !2221
  call void @llvm.lifetime.end(i64 24, i8* %17) #2, !dbg !2221
  %18 = bitcast %struct._object** %tmp to i8*, !dbg !2221
  call void @llvm.lifetime.end(i64 8, i8* %18) #2, !dbg !2221
  %19 = bitcast %struct._object** %args to i8*, !dbg !2221
  call void @llvm.lifetime.end(i64 8, i8* %19) #2, !dbg !2221
  %20 = load %struct._object*, %struct._object** %retval, !dbg !2221
  ret %struct._object* %20, !dbg !2221
}

declare %struct._object* @PyErr_Format(%struct._object*, i8*, ...) #3

declare i64 @PyLong_AsSsize_t(%struct._object*) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PyObject_GetItem(%struct._object* %o, %struct._object* %key) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %key.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PyMappingMethods*, align 8
  %cleanup.dest.slot = alloca i32
  %key_value = alloca i64, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !495, metadata !1833), !dbg !2222
  store %struct._object* %key, %struct._object** %key.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %key.addr, metadata !496, metadata !1833), !dbg !2223
  %0 = bitcast %struct.PyMappingMethods** %m to i8*, !dbg !2224
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !2224
  call void @llvm.dbg.declare(metadata %struct.PyMappingMethods** %m, metadata !497, metadata !1833), !dbg !2225
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2226, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !2228
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2229

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2230, !tbaa !1829
  %cmp1 = icmp eq %struct._object* %2, null, !dbg !2232
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2233

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !2234
  store %struct._object* %call, %struct._object** %retval, !dbg !2235
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.35, !dbg !2235

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2236, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1, !dbg !2237
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2237, !tbaa !1845
  %tp_as_mapping = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 12, !dbg !2238
  %5 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping, align 8, !dbg !2238, !tbaa !1912
  store %struct.PyMappingMethods* %5, %struct.PyMappingMethods** %m, align 8, !dbg !2239, !tbaa !1829
  %6 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %m, align 8, !dbg !2240, !tbaa !1829
  %tobool = icmp ne %struct.PyMappingMethods* %6, null, !dbg !2240
  br i1 %tobool, label %land.lhs.true, label %if.end.6, !dbg !2242

land.lhs.true:                                    ; preds = %if.end
  %7 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %m, align 8, !dbg !2243, !tbaa !1829
  %mp_subscript = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %7, i32 0, i32 1, !dbg !2245
  %8 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %mp_subscript, align 8, !dbg !2245, !tbaa !2246
  %tobool2 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %8, null, !dbg !2247
  br i1 %tobool2, label %if.then.3, label %if.end.6, !dbg !2248

if.then.3:                                        ; preds = %land.lhs.true
  %9 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %m, align 8, !dbg !2249, !tbaa !1829
  %mp_subscript4 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %9, i32 0, i32 1, !dbg !2250
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %mp_subscript4, align 8, !dbg !2250, !tbaa !2246
  %11 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2251, !tbaa !1829
  %12 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2252, !tbaa !1829
  %call5 = call %struct._object* %10(%struct._object* %11, %struct._object* %12), !dbg !2249
  store %struct._object* %call5, %struct._object** %retval, !dbg !2253
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.35, !dbg !2253

if.end.6:                                         ; preds = %land.lhs.true, %if.end
  %13 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2254, !tbaa !1829
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1, !dbg !2255
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8, !dbg !2255, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 11, !dbg !2256
  %15 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !2256, !tbaa !1876
  %tobool8 = icmp ne %struct.PySequenceMethods* %15, null, !dbg !2254
  br i1 %tobool8, label %if.then.9, label %if.end.33, !dbg !2257

if.then.9:                                        ; preds = %if.end.6
  %16 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2258, !tbaa !1829
  %ob_type10 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1, !dbg !2259
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type10, align 8, !dbg !2259, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 10, !dbg !2260
  %18 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !2260, !tbaa !2261
  %cmp11 = icmp ne %struct.PyNumberMethods* %18, null, !dbg !2262
  br i1 %cmp11, label %land.lhs.true.12, label %if.else, !dbg !2263

land.lhs.true.12:                                 ; preds = %if.then.9
  %19 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2264, !tbaa !1829
  %ob_type13 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1, !dbg !2266
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type13, align 8, !dbg !2266, !tbaa !1845
  %tp_as_number14 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 10, !dbg !2267
  %21 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number14, align 8, !dbg !2267, !tbaa !2261
  %nb_index = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %21, i32 0, i32 33, !dbg !2268
  %nb_index15 = bitcast {}** %nb_index to %struct._object* (%struct._object*)**, !dbg !2268
  %22 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index15, align 8, !dbg !2268, !tbaa !2269
  %cmp16 = icmp ne %struct._object* (%struct._object*)* %22, null, !dbg !2271
  br i1 %cmp16, label %if.then.17, label %if.else, !dbg !2272

if.then.17:                                       ; preds = %land.lhs.true.12
  %23 = bitcast i64* %key_value to i8*, !dbg !2273
  call void @llvm.lifetime.start(i64 8, i8* %23) #2, !dbg !2273
  call void @llvm.dbg.declare(metadata i64* %key_value, metadata !498, metadata !1833), !dbg !2274
  %24 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2275, !tbaa !1829
  %25 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !2276, !tbaa !1829
  %call18 = call i64 @PyNumber_AsSsize_t(%struct._object* %24, %struct._object* %25), !dbg !2277
  store i64 %call18, i64* %key_value, align 8, !dbg !2278, !tbaa !1963
  %26 = load i64, i64* %key_value, align 8, !dbg !2279, !tbaa !1963
  %cmp19 = icmp eq i64 %26, -1, !dbg !2281
  br i1 %cmp19, label %land.lhs.true.20, label %if.end.24, !dbg !2282

land.lhs.true.20:                                 ; preds = %if.then.17
  %call21 = call %struct._object* @PyErr_Occurred(), !dbg !2283
  %tobool22 = icmp ne %struct._object* %call21, null, !dbg !2283
  br i1 %tobool22, label %if.then.23, label %if.end.24, !dbg !2285

if.then.23:                                       ; preds = %land.lhs.true.20
  store %struct._object* null, %struct._object** %retval, !dbg !2286
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2286

if.end.24:                                        ; preds = %land.lhs.true.20, %if.then.17
  %27 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2287, !tbaa !1829
  %28 = load i64, i64* %key_value, align 8, !dbg !2288, !tbaa !1963
  %call25 = call %struct._object* @PySequence_GetItem(%struct._object* %27, i64 %28), !dbg !2289
  store %struct._object* %call25, %struct._object** %retval, !dbg !2290
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2290

cleanup:                                          ; preds = %if.end.24, %if.then.23
  %29 = bitcast i64* %key_value to i8*, !dbg !2291
  call void @llvm.lifetime.end(i64 8, i8* %29) #2, !dbg !2291
  br label %cleanup.35

if.else:                                          ; preds = %land.lhs.true.12, %if.then.9
  %30 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2292, !tbaa !1829
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !2294
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8, !dbg !2294, !tbaa !1845
  %tp_as_sequence27 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 11, !dbg !2295
  %32 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence27, align 8, !dbg !2295, !tbaa !1876
  %sq_item = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %32, i32 0, i32 3, !dbg !2296
  %33 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_item, align 8, !dbg !2296, !tbaa !2297
  %tobool28 = icmp ne %struct._object* (%struct._object*, i64)* %33, null, !dbg !2292
  br i1 %tobool28, label %if.then.29, label %if.end.31, !dbg !2298

if.then.29:                                       ; preds = %if.else
  %34 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2299, !tbaa !1829
  %call30 = call %struct._object* @type_error(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i32 0, i32 0), %struct._object* %34), !dbg !2300
  store %struct._object* %call30, %struct._object** %retval, !dbg !2301
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.35, !dbg !2301

if.end.31:                                        ; preds = %if.else
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31
  br label %if.end.33, !dbg !2302

if.end.33:                                        ; preds = %if.end.32, %if.end.6
  %35 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2303, !tbaa !1829
  %call34 = call %struct._object* @type_error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i32 0, i32 0), %struct._object* %35), !dbg !2304
  store %struct._object* %call34, %struct._object** %retval, !dbg !2305
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.35, !dbg !2305

cleanup.35:                                       ; preds = %if.end.33, %if.then.29, %cleanup, %if.then.3, %if.then
  %36 = bitcast %struct.PyMappingMethods** %m to i8*, !dbg !2306
  call void @llvm.lifetime.end(i64 8, i8* %36) #2, !dbg !2306
  %37 = load %struct._object*, %struct._object** %retval, !dbg !2306
  ret %struct._object* %37, !dbg !2306
}

; Function Attrs: nounwind uwtable
define i64 @PyNumber_AsSsize_t(%struct._object* %item, %struct._object* %err) #0 {
entry:
  %retval = alloca i64, align 8
  %item.addr = alloca %struct._object*, align 8
  %err.addr = alloca %struct._object*, align 8
  %result = alloca i64, align 8
  %runerr = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %item, %struct._object** %item.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %item.addr, metadata !866, metadata !1833), !dbg !2307
  store %struct._object* %err, %struct._object** %err.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %err.addr, metadata !867, metadata !1833), !dbg !2308
  %0 = bitcast i64* %result to i8*, !dbg !2309
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !2309
  call void @llvm.dbg.declare(metadata i64* %result, metadata !868, metadata !1833), !dbg !2310
  %1 = bitcast %struct._object** %runerr to i8*, !dbg !2311
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !2311
  call void @llvm.dbg.declare(metadata %struct._object** %runerr, metadata !869, metadata !1833), !dbg !2312
  %2 = bitcast %struct._object** %value to i8*, !dbg !2313
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !2313
  call void @llvm.dbg.declare(metadata %struct._object** %value, metadata !870, metadata !1833), !dbg !2314
  %3 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !2315, !tbaa !1829
  %call = call %struct._object* @PyNumber_Index(%struct._object* %3), !dbg !2316
  store %struct._object* %call, %struct._object** %value, align 8, !dbg !2314, !tbaa !1829
  %4 = load %struct._object*, %struct._object** %value, align 8, !dbg !2317, !tbaa !1829
  %cmp = icmp eq %struct._object* %4, null, !dbg !2319
  br i1 %cmp, label %if.then, label %if.end, !dbg !2320

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval, !dbg !2321
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2321

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %value, align 8, !dbg !2322, !tbaa !1829
  %call1 = call i64 @PyLong_AsSsize_t(%struct._object* %5), !dbg !2323
  store i64 %call1, i64* %result, align 8, !dbg !2324, !tbaa !1963
  %6 = load i64, i64* %result, align 8, !dbg !2325, !tbaa !1963
  %cmp2 = icmp ne i64 %6, -1, !dbg !2327
  br i1 %cmp2, label %if.then.4, label %lor.lhs.false, !dbg !2328

lor.lhs.false:                                    ; preds = %if.end
  %call3 = call %struct._object* @PyErr_Occurred(), !dbg !2329
  store %struct._object* %call3, %struct._object** %runerr, align 8, !dbg !2331, !tbaa !1829
  %tobool = icmp ne %struct._object* %call3, null, !dbg !2331
  br i1 %tobool, label %if.end.5, label %if.then.4, !dbg !2332

if.then.4:                                        ; preds = %lor.lhs.false, %if.end
  br label %finish, !dbg !2333

if.end.5:                                         ; preds = %lor.lhs.false
  %7 = load %struct._object*, %struct._object** %runerr, align 8, !dbg !2334, !tbaa !1829
  %8 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !2336, !tbaa !1829
  %call6 = call i32 @PyErr_GivenExceptionMatches(%struct._object* %7, %struct._object* %8), !dbg !2337
  %tobool7 = icmp ne i32 %call6, 0, !dbg !2337
  br i1 %tobool7, label %if.end.9, label %if.then.8, !dbg !2338

if.then.8:                                        ; preds = %if.end.5
  br label %finish, !dbg !2339

if.end.9:                                         ; preds = %if.end.5
  call void @PyErr_Clear(), !dbg !2340
  %9 = load %struct._object*, %struct._object** %err.addr, align 8, !dbg !2341, !tbaa !1829
  %tobool10 = icmp ne %struct._object* %9, null, !dbg !2341
  br i1 %tobool10, label %if.else.16, label %if.then.11, !dbg !2343

if.then.11:                                       ; preds = %if.end.9
  %10 = load %struct._object*, %struct._object** %value, align 8, !dbg !2344, !tbaa !1829
  %call12 = call i32 @_PyLong_Sign(%struct._object* %10), !dbg !2347
  %cmp13 = icmp slt i32 %call12, 0, !dbg !2348
  br i1 %cmp13, label %if.then.14, label %if.else, !dbg !2349

if.then.14:                                       ; preds = %if.then.11
  store i64 -9223372036854775808, i64* %result, align 8, !dbg !2350, !tbaa !1963
  br label %if.end.15, !dbg !2351

if.else:                                          ; preds = %if.then.11
  store i64 9223372036854775807, i64* %result, align 8, !dbg !2352, !tbaa !1963
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.14
  br label %if.end.18, !dbg !2353

if.else.16:                                       ; preds = %if.end.9
  %11 = load %struct._object*, %struct._object** %err.addr, align 8, !dbg !2354, !tbaa !1829
  %12 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !2356, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1, !dbg !2357
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2357, !tbaa !1845
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 1, !dbg !2358
  %14 = load i8*, i8** %tp_name, align 8, !dbg !2358, !tbaa !2094
  %call17 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %11, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.50, i32 0, i32 0), i8* %14), !dbg !2359
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.16, %if.end.15
  br label %finish, !dbg !2341

finish:                                           ; preds = %if.end.18, %if.then.8, %if.then.4
  br label %do.body, !dbg !2360

do.body:                                          ; preds = %finish
  %15 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2361
  call void @llvm.lifetime.start(i64 8, i8* %15) #2, !dbg !2361
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !871, metadata !1833), !dbg !2363
  %16 = load %struct._object*, %struct._object** %value, align 8, !dbg !2364, !tbaa !1829
  store %struct._object* %16, %struct._object** %_py_decref_tmp, align 8, !dbg !2363, !tbaa !1829
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2365, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0, !dbg !2367
  %18 = load i64, i64* %ob_refcnt, align 8, !dbg !2368, !tbaa !1853
  %dec = add i64 %18, -1, !dbg !2368
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !2368, !tbaa !1853
  %cmp19 = icmp ne i64 %dec, 0, !dbg !2369
  br i1 %cmp19, label %if.then.20, label %if.else.21, !dbg !2370

if.then.20:                                       ; preds = %do.body
  br label %if.end.23, !dbg !2371

if.else.21:                                       ; preds = %do.body
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2373, !tbaa !1829
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1, !dbg !2375
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8, !dbg !2375, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4, !dbg !2376
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !2376, !tbaa !2033
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2377, !tbaa !1829
  call void %21(%struct._object* %22), !dbg !2378
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.21, %if.then.20
  %23 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2379
  call void @llvm.lifetime.end(i64 8, i8* %23) #2, !dbg !2379
  br label %do.cond, !dbg !2381

do.cond:                                          ; preds = %if.end.23
  br label %do.end, !dbg !2382

do.end:                                           ; preds = %do.cond
  %24 = load i64, i64* %result, align 8, !dbg !2384, !tbaa !1963
  store i64 %24, i64* %retval, !dbg !2385
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2385

cleanup:                                          ; preds = %do.end, %if.then
  %25 = bitcast %struct._object** %value to i8*, !dbg !2386
  call void @llvm.lifetime.end(i64 8, i8* %25) #2, !dbg !2386
  %26 = bitcast %struct._object** %runerr to i8*, !dbg !2386
  call void @llvm.lifetime.end(i64 8, i8* %26) #2, !dbg !2386
  %27 = bitcast i64* %result to i8*, !dbg !2386
  call void @llvm.lifetime.end(i64 8, i8* %27) #2, !dbg !2386
  %28 = load i64, i64* %retval, !dbg !2386
  ret i64 %28, !dbg !2386
}

; Function Attrs: nounwind uwtable
define %struct._object* @PySequence_GetItem(%struct._object* %s, i64 %i) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct._object*, align 8
  %i.addr = alloca i64, align 8
  %m = alloca %struct.PySequenceMethods*, align 8
  %cleanup.dest.slot = alloca i32
  %l = alloca i64, align 8
  store %struct._object* %s, %struct._object** %s.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %s.addr, metadata !974, metadata !1833), !dbg !2387
  store i64 %i, i64* %i.addr, align 8, !tbaa !1963
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !975, metadata !1833), !dbg !2388
  %0 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !2389
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !2389
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %m, metadata !976, metadata !1833), !dbg !2390
  %1 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2391, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !2393
  br i1 %cmp, label %if.then, label %if.end, !dbg !2394

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !2395
  store %struct._object* %call, %struct._object** %retval, !dbg !2396
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.18, !dbg !2396

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2397, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !2398
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2398, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 11, !dbg !2399
  %4 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !2399, !tbaa !1876
  store %struct.PySequenceMethods* %4, %struct.PySequenceMethods** %m, align 8, !dbg !2400, !tbaa !1829
  %5 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2401, !tbaa !1829
  %tobool = icmp ne %struct.PySequenceMethods* %5, null, !dbg !2401
  br i1 %tobool, label %land.lhs.true, label %if.end.16, !dbg !2402

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2403, !tbaa !1829
  %sq_item = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %6, i32 0, i32 3, !dbg !2405
  %7 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_item, align 8, !dbg !2405, !tbaa !2297
  %tobool1 = icmp ne %struct._object* (%struct._object*, i64)* %7, null, !dbg !2406
  br i1 %tobool1, label %if.then.2, label %if.end.16, !dbg !2407

if.then.2:                                        ; preds = %land.lhs.true
  %8 = load i64, i64* %i.addr, align 8, !dbg !2408, !tbaa !1963
  %cmp3 = icmp slt i64 %8, 0, !dbg !2409
  br i1 %cmp3, label %if.then.4, label %if.end.13, !dbg !2410

if.then.4:                                        ; preds = %if.then.2
  %9 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2411, !tbaa !1829
  %sq_length = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %9, i32 0, i32 0, !dbg !2412
  %10 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length, align 8, !dbg !2412, !tbaa !1887
  %tobool5 = icmp ne i64 (%struct._object*)* %10, null, !dbg !2411
  br i1 %tobool5, label %if.then.6, label %if.end.12, !dbg !2413

if.then.6:                                        ; preds = %if.then.4
  %11 = bitcast i64* %l to i8*, !dbg !2414
  call void @llvm.lifetime.start(i64 8, i8* %11) #2, !dbg !2414
  call void @llvm.dbg.declare(metadata i64* %l, metadata !977, metadata !1833), !dbg !2415
  %12 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2416, !tbaa !1829
  %sq_length7 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %12, i32 0, i32 0, !dbg !2417
  %13 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length7, align 8, !dbg !2417, !tbaa !1887
  %14 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2418, !tbaa !1829
  %call8 = call i64 %13(%struct._object* %14), !dbg !2419
  store i64 %call8, i64* %l, align 8, !dbg !2415, !tbaa !1963
  %15 = load i64, i64* %l, align 8, !dbg !2420, !tbaa !1963
  %cmp9 = icmp slt i64 %15, 0, !dbg !2422
  br i1 %cmp9, label %if.then.10, label %if.end.11, !dbg !2423

if.then.10:                                       ; preds = %if.then.6
  store %struct._object* null, %struct._object** %retval, !dbg !2424
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2424

if.end.11:                                        ; preds = %if.then.6
  %16 = load i64, i64* %l, align 8, !dbg !2425, !tbaa !1963
  %17 = load i64, i64* %i.addr, align 8, !dbg !2426, !tbaa !1963
  %add = add i64 %17, %16, !dbg !2426
  store i64 %add, i64* %i.addr, align 8, !dbg !2426, !tbaa !1963
  store i32 0, i32* %cleanup.dest.slot, !dbg !2427
  br label %cleanup, !dbg !2427

cleanup:                                          ; preds = %if.end.11, %if.then.10
  %18 = bitcast i64* %l to i8*, !dbg !2428
  call void @llvm.lifetime.end(i64 8, i8* %18) #2, !dbg !2428
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.12, !dbg !2430

if.end.12:                                        ; preds = %cleanup.cont, %if.then.4
  br label %if.end.13, !dbg !2431

if.end.13:                                        ; preds = %if.end.12, %if.then.2
  %19 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2432, !tbaa !1829
  %sq_item14 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %19, i32 0, i32 3, !dbg !2433
  %20 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_item14, align 8, !dbg !2433, !tbaa !2297
  %21 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2434, !tbaa !1829
  %22 = load i64, i64* %i.addr, align 8, !dbg !2435, !tbaa !1963
  %call15 = call %struct._object* %20(%struct._object* %21, i64 %22), !dbg !2432
  store %struct._object* %call15, %struct._object** %retval, !dbg !2436
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.18, !dbg !2436

if.end.16:                                        ; preds = %land.lhs.true, %if.end
  %23 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2437, !tbaa !1829
  %call17 = call %struct._object* @type_error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.59, i32 0, i32 0), %struct._object* %23), !dbg !2438
  store %struct._object* %call17, %struct._object** %retval, !dbg !2439
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.18, !dbg !2439

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.18

cleanup.18:                                       ; preds = %NewDefault, %if.end.16, %if.end.13, %if.then
  %24 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !2440
  call void @llvm.lifetime.end(i64 8, i8* %24) #2, !dbg !2440
  %25 = load %struct._object*, %struct._object** %retval, !dbg !2440
  ret %struct._object* %25, !dbg !2440
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_error(i8* %msg, %struct._object* %obj) #0 {
entry:
  %msg.addr = alloca i8*, align 8
  %obj.addr = alloca %struct._object*, align 8
  store i8* %msg, i8** %msg.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %msg.addr, metadata !1550, metadata !1833), !dbg !2441
  store %struct._object* %obj, %struct._object** %obj.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %obj.addr, metadata !1551, metadata !1833), !dbg !2442
  %0 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !2443, !tbaa !1829
  %1 = load i8*, i8** %msg.addr, align 8, !dbg !2444, !tbaa !1829
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !2445, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !2446
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2446, !tbaa !1845
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 1, !dbg !2447
  %4 = load i8*, i8** %tp_name, align 8, !dbg !2447, !tbaa !2094
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %0, i8* %1, i8* %4), !dbg !2448
  ret %struct._object* null, !dbg !2449
}

; Function Attrs: nounwind uwtable
define i32 @PyObject_SetItem(%struct._object* %o, %struct._object* %key, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %o.addr = alloca %struct._object*, align 8
  %key.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PyMappingMethods*, align 8
  %cleanup.dest.slot = alloca i32
  %key_value = alloca i64, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !505, metadata !1833), !dbg !2450
  store %struct._object* %key, %struct._object** %key.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %key.addr, metadata !506, metadata !1833), !dbg !2451
  store %struct._object* %value, %struct._object** %value.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %value.addr, metadata !507, metadata !1833), !dbg !2452
  %0 = bitcast %struct.PyMappingMethods** %m to i8*, !dbg !2453
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !2453
  call void @llvm.dbg.declare(metadata %struct.PyMappingMethods** %m, metadata !508, metadata !1833), !dbg !2454
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2455, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !2457
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2458

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2459, !tbaa !1829
  %cmp1 = icmp eq %struct._object* %2, null, !dbg !2461
  br i1 %cmp1, label %if.then, label %lor.lhs.false.2, !dbg !2462

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %3 = load %struct._object*, %struct._object** %value.addr, align 8, !dbg !2463, !tbaa !1829
  %cmp3 = icmp eq %struct._object* %3, null, !dbg !2465
  br i1 %cmp3, label %if.then, label %if.end, !dbg !2466

if.then:                                          ; preds = %lor.lhs.false.2, %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !2467
  store i32 -1, i32* %retval, !dbg !2469
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.37, !dbg !2469

if.end:                                           ; preds = %lor.lhs.false.2
  %4 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2470, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1, !dbg !2471
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2471, !tbaa !1845
  %tp_as_mapping = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 12, !dbg !2472
  %6 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping, align 8, !dbg !2472, !tbaa !1912
  store %struct.PyMappingMethods* %6, %struct.PyMappingMethods** %m, align 8, !dbg !2473, !tbaa !1829
  %7 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %m, align 8, !dbg !2474, !tbaa !1829
  %tobool = icmp ne %struct.PyMappingMethods* %7, null, !dbg !2474
  br i1 %tobool, label %land.lhs.true, label %if.end.8, !dbg !2476

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %m, align 8, !dbg !2477, !tbaa !1829
  %mp_ass_subscript = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %8, i32 0, i32 2, !dbg !2479
  %9 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %mp_ass_subscript, align 8, !dbg !2479, !tbaa !2480
  %tobool4 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %9, null, !dbg !2481
  br i1 %tobool4, label %if.then.5, label %if.end.8, !dbg !2482

if.then.5:                                        ; preds = %land.lhs.true
  %10 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %m, align 8, !dbg !2483, !tbaa !1829
  %mp_ass_subscript6 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %10, i32 0, i32 2, !dbg !2484
  %11 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %mp_ass_subscript6, align 8, !dbg !2484, !tbaa !2480
  %12 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2485, !tbaa !1829
  %13 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2486, !tbaa !1829
  %14 = load %struct._object*, %struct._object** %value.addr, align 8, !dbg !2487, !tbaa !1829
  %call7 = call i32 %11(%struct._object* %12, %struct._object* %13, %struct._object* %14), !dbg !2483
  store i32 %call7, i32* %retval, !dbg !2488
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.37, !dbg !2488

if.end.8:                                         ; preds = %land.lhs.true, %if.end
  %15 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2489, !tbaa !1829
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1, !dbg !2490
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8, !dbg !2490, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 11, !dbg !2491
  %17 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !2491, !tbaa !1876
  %tobool10 = icmp ne %struct.PySequenceMethods* %17, null, !dbg !2489
  br i1 %tobool10, label %if.then.11, label %if.end.35, !dbg !2492

if.then.11:                                       ; preds = %if.end.8
  %18 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2493, !tbaa !1829
  %ob_type12 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1, !dbg !2494
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type12, align 8, !dbg !2494, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 10, !dbg !2495
  %20 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !2495, !tbaa !2261
  %cmp13 = icmp ne %struct.PyNumberMethods* %20, null, !dbg !2496
  br i1 %cmp13, label %land.lhs.true.14, label %if.else, !dbg !2497

land.lhs.true.14:                                 ; preds = %if.then.11
  %21 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2498, !tbaa !1829
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1, !dbg !2500
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8, !dbg !2500, !tbaa !1845
  %tp_as_number16 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 10, !dbg !2501
  %23 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number16, align 8, !dbg !2501, !tbaa !2261
  %nb_index = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %23, i32 0, i32 33, !dbg !2502
  %nb_index17 = bitcast {}** %nb_index to %struct._object* (%struct._object*)**, !dbg !2502
  %24 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index17, align 8, !dbg !2502, !tbaa !2269
  %cmp18 = icmp ne %struct._object* (%struct._object*)* %24, null, !dbg !2503
  br i1 %cmp18, label %if.then.19, label %if.else, !dbg !2504

if.then.19:                                       ; preds = %land.lhs.true.14
  %25 = bitcast i64* %key_value to i8*, !dbg !2505
  call void @llvm.lifetime.start(i64 8, i8* %25) #2, !dbg !2505
  call void @llvm.dbg.declare(metadata i64* %key_value, metadata !509, metadata !1833), !dbg !2506
  %26 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2507, !tbaa !1829
  %27 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !2508, !tbaa !1829
  %call20 = call i64 @PyNumber_AsSsize_t(%struct._object* %26, %struct._object* %27), !dbg !2509
  store i64 %call20, i64* %key_value, align 8, !dbg !2510, !tbaa !1963
  %28 = load i64, i64* %key_value, align 8, !dbg !2511, !tbaa !1963
  %cmp21 = icmp eq i64 %28, -1, !dbg !2513
  br i1 %cmp21, label %land.lhs.true.22, label %if.end.26, !dbg !2514

land.lhs.true.22:                                 ; preds = %if.then.19
  %call23 = call %struct._object* @PyErr_Occurred(), !dbg !2515
  %tobool24 = icmp ne %struct._object* %call23, null, !dbg !2515
  br i1 %tobool24, label %if.then.25, label %if.end.26, !dbg !2517

if.then.25:                                       ; preds = %land.lhs.true.22
  store i32 -1, i32* %retval, !dbg !2518
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2518

if.end.26:                                        ; preds = %land.lhs.true.22, %if.then.19
  %29 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2519, !tbaa !1829
  %30 = load i64, i64* %key_value, align 8, !dbg !2520, !tbaa !1963
  %31 = load %struct._object*, %struct._object** %value.addr, align 8, !dbg !2521, !tbaa !1829
  %call27 = call i32 @PySequence_SetItem(%struct._object* %29, i64 %30, %struct._object* %31), !dbg !2522
  store i32 %call27, i32* %retval, !dbg !2523
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2523

cleanup:                                          ; preds = %if.end.26, %if.then.25
  %32 = bitcast i64* %key_value to i8*, !dbg !2524
  call void @llvm.lifetime.end(i64 8, i8* %32) #2, !dbg !2524
  br label %cleanup.37

if.else:                                          ; preds = %land.lhs.true.14, %if.then.11
  %33 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2525, !tbaa !1829
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1, !dbg !2527
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8, !dbg !2527, !tbaa !1845
  %tp_as_sequence29 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 11, !dbg !2528
  %35 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence29, align 8, !dbg !2528, !tbaa !1876
  %sq_ass_item = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %35, i32 0, i32 5, !dbg !2529
  %36 = load i32 (%struct._object*, i64, %struct._object*)*, i32 (%struct._object*, i64, %struct._object*)** %sq_ass_item, align 8, !dbg !2529, !tbaa !2530
  %tobool30 = icmp ne i32 (%struct._object*, i64, %struct._object*)* %36, null, !dbg !2525
  br i1 %tobool30, label %if.then.31, label %if.end.33, !dbg !2531

if.then.31:                                       ; preds = %if.else
  %37 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2532, !tbaa !1829
  %call32 = call %struct._object* @type_error(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i32 0, i32 0), %struct._object* %37), !dbg !2534
  store i32 -1, i32* %retval, !dbg !2535
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.37, !dbg !2535

if.end.33:                                        ; preds = %if.else
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33
  br label %if.end.35, !dbg !2536

if.end.35:                                        ; preds = %if.end.34, %if.end.8
  %38 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2537, !tbaa !1829
  %call36 = call %struct._object* @type_error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.5, i32 0, i32 0), %struct._object* %38), !dbg !2538
  store i32 -1, i32* %retval, !dbg !2539
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.37, !dbg !2539

cleanup.37:                                       ; preds = %if.end.35, %if.then.31, %cleanup, %if.then.5, %if.then
  %39 = bitcast %struct.PyMappingMethods** %m to i8*, !dbg !2540
  call void @llvm.lifetime.end(i64 8, i8* %39) #2, !dbg !2540
  %40 = load i32, i32* %retval, !dbg !2540
  ret i32 %40, !dbg !2540
}

; Function Attrs: nounwind uwtable
define i32 @PySequence_SetItem(%struct._object* %s, i64 %i, %struct._object* %o) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct._object*, align 8
  %i.addr = alloca i64, align 8
  %o.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PySequenceMethods*, align 8
  %cleanup.dest.slot = alloca i32
  %l = alloca i64, align 8
  store %struct._object* %s, %struct._object** %s.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %s.addr, metadata !1000, metadata !1833), !dbg !2541
  store i64 %i, i64* %i.addr, align 8, !tbaa !1963
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !1001, metadata !1833), !dbg !2542
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1002, metadata !1833), !dbg !2543
  %0 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !2544
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !2544
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %m, metadata !1003, metadata !1833), !dbg !2545
  %1 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2546, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !2548
  br i1 %cmp, label %if.then, label %if.end, !dbg !2549

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !2550
  store i32 -1, i32* %retval, !dbg !2552
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.18, !dbg !2552

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2553, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !2554
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2554, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 11, !dbg !2555
  %4 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !2555, !tbaa !1876
  store %struct.PySequenceMethods* %4, %struct.PySequenceMethods** %m, align 8, !dbg !2556, !tbaa !1829
  %5 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2557, !tbaa !1829
  %tobool = icmp ne %struct.PySequenceMethods* %5, null, !dbg !2557
  br i1 %tobool, label %land.lhs.true, label %if.end.16, !dbg !2558

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2559, !tbaa !1829
  %sq_ass_item = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %6, i32 0, i32 5, !dbg !2561
  %7 = load i32 (%struct._object*, i64, %struct._object*)*, i32 (%struct._object*, i64, %struct._object*)** %sq_ass_item, align 8, !dbg !2561, !tbaa !2530
  %tobool1 = icmp ne i32 (%struct._object*, i64, %struct._object*)* %7, null, !dbg !2562
  br i1 %tobool1, label %if.then.2, label %if.end.16, !dbg !2563

if.then.2:                                        ; preds = %land.lhs.true
  %8 = load i64, i64* %i.addr, align 8, !dbg !2564, !tbaa !1963
  %cmp3 = icmp slt i64 %8, 0, !dbg !2565
  br i1 %cmp3, label %if.then.4, label %if.end.13, !dbg !2566

if.then.4:                                        ; preds = %if.then.2
  %9 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2567, !tbaa !1829
  %sq_length = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %9, i32 0, i32 0, !dbg !2568
  %10 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length, align 8, !dbg !2568, !tbaa !1887
  %tobool5 = icmp ne i64 (%struct._object*)* %10, null, !dbg !2567
  br i1 %tobool5, label %if.then.6, label %if.end.12, !dbg !2569

if.then.6:                                        ; preds = %if.then.4
  %11 = bitcast i64* %l to i8*, !dbg !2570
  call void @llvm.lifetime.start(i64 8, i8* %11) #2, !dbg !2570
  call void @llvm.dbg.declare(metadata i64* %l, metadata !1004, metadata !1833), !dbg !2571
  %12 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2572, !tbaa !1829
  %sq_length7 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %12, i32 0, i32 0, !dbg !2573
  %13 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length7, align 8, !dbg !2573, !tbaa !1887
  %14 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2574, !tbaa !1829
  %call8 = call i64 %13(%struct._object* %14), !dbg !2575
  store i64 %call8, i64* %l, align 8, !dbg !2571, !tbaa !1963
  %15 = load i64, i64* %l, align 8, !dbg !2576, !tbaa !1963
  %cmp9 = icmp slt i64 %15, 0, !dbg !2578
  br i1 %cmp9, label %if.then.10, label %if.end.11, !dbg !2579

if.then.10:                                       ; preds = %if.then.6
  store i32 -1, i32* %retval, !dbg !2580
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2580

if.end.11:                                        ; preds = %if.then.6
  %16 = load i64, i64* %l, align 8, !dbg !2581, !tbaa !1963
  %17 = load i64, i64* %i.addr, align 8, !dbg !2582, !tbaa !1963
  %add = add i64 %17, %16, !dbg !2582
  store i64 %add, i64* %i.addr, align 8, !dbg !2582, !tbaa !1963
  store i32 0, i32* %cleanup.dest.slot, !dbg !2583
  br label %cleanup, !dbg !2583

cleanup:                                          ; preds = %if.end.11, %if.then.10
  %18 = bitcast i64* %l to i8*, !dbg !2584
  call void @llvm.lifetime.end(i64 8, i8* %18) #2, !dbg !2584
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.12, !dbg !2586

if.end.12:                                        ; preds = %cleanup.cont, %if.then.4
  br label %if.end.13, !dbg !2587

if.end.13:                                        ; preds = %if.end.12, %if.then.2
  %19 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2588, !tbaa !1829
  %sq_ass_item14 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %19, i32 0, i32 5, !dbg !2589
  %20 = load i32 (%struct._object*, i64, %struct._object*)*, i32 (%struct._object*, i64, %struct._object*)** %sq_ass_item14, align 8, !dbg !2589, !tbaa !2530
  %21 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2590, !tbaa !1829
  %22 = load i64, i64* %i.addr, align 8, !dbg !2591, !tbaa !1963
  %23 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2592, !tbaa !1829
  %call15 = call i32 %20(%struct._object* %21, i64 %22, %struct._object* %23), !dbg !2588
  store i32 %call15, i32* %retval, !dbg !2593
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.18, !dbg !2593

if.end.16:                                        ; preds = %land.lhs.true, %if.end
  %24 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2594, !tbaa !1829
  %call17 = call %struct._object* @type_error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.5, i32 0, i32 0), %struct._object* %24), !dbg !2595
  store i32 -1, i32* %retval, !dbg !2596
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.18, !dbg !2596

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.18

cleanup.18:                                       ; preds = %NewDefault, %if.end.16, %if.end.13, %if.then
  %25 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !2597
  call void @llvm.lifetime.end(i64 8, i8* %25) #2, !dbg !2597
  %26 = load i32, i32* %retval, !dbg !2597
  ret i32 %26, !dbg !2597
}

; Function Attrs: nounwind uwtable
define i32 @PyObject_DelItem(%struct._object* %o, %struct._object* %key) #0 {
entry:
  %retval = alloca i32, align 4
  %o.addr = alloca %struct._object*, align 8
  %key.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PyMappingMethods*, align 8
  %cleanup.dest.slot = alloca i32
  %key_value = alloca i64, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !516, metadata !1833), !dbg !2598
  store %struct._object* %key, %struct._object** %key.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %key.addr, metadata !517, metadata !1833), !dbg !2599
  %0 = bitcast %struct.PyMappingMethods** %m to i8*, !dbg !2600
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !2600
  call void @llvm.dbg.declare(metadata %struct.PyMappingMethods** %m, metadata !518, metadata !1833), !dbg !2601
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2602, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !2604
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2605

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2606, !tbaa !1829
  %cmp1 = icmp eq %struct._object* %2, null, !dbg !2608
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2609

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !2610
  store i32 -1, i32* %retval, !dbg !2612
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.35, !dbg !2612

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2613, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1, !dbg !2614
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2614, !tbaa !1845
  %tp_as_mapping = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 12, !dbg !2615
  %5 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping, align 8, !dbg !2615, !tbaa !1912
  store %struct.PyMappingMethods* %5, %struct.PyMappingMethods** %m, align 8, !dbg !2616, !tbaa !1829
  %6 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %m, align 8, !dbg !2617, !tbaa !1829
  %tobool = icmp ne %struct.PyMappingMethods* %6, null, !dbg !2617
  br i1 %tobool, label %land.lhs.true, label %if.end.6, !dbg !2619

land.lhs.true:                                    ; preds = %if.end
  %7 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %m, align 8, !dbg !2620, !tbaa !1829
  %mp_ass_subscript = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %7, i32 0, i32 2, !dbg !2622
  %8 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %mp_ass_subscript, align 8, !dbg !2622, !tbaa !2480
  %tobool2 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %8, null, !dbg !2623
  br i1 %tobool2, label %if.then.3, label %if.end.6, !dbg !2624

if.then.3:                                        ; preds = %land.lhs.true
  %9 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %m, align 8, !dbg !2625, !tbaa !1829
  %mp_ass_subscript4 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %9, i32 0, i32 2, !dbg !2626
  %10 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %mp_ass_subscript4, align 8, !dbg !2626, !tbaa !2480
  %11 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2627, !tbaa !1829
  %12 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2628, !tbaa !1829
  %call5 = call i32 %10(%struct._object* %11, %struct._object* %12, %struct._object* null), !dbg !2625
  store i32 %call5, i32* %retval, !dbg !2629
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.35, !dbg !2629

if.end.6:                                         ; preds = %land.lhs.true, %if.end
  %13 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2630, !tbaa !1829
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1, !dbg !2631
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8, !dbg !2631, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 11, !dbg !2632
  %15 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !2632, !tbaa !1876
  %tobool8 = icmp ne %struct.PySequenceMethods* %15, null, !dbg !2630
  br i1 %tobool8, label %if.then.9, label %if.end.33, !dbg !2633

if.then.9:                                        ; preds = %if.end.6
  %16 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2634, !tbaa !1829
  %ob_type10 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1, !dbg !2635
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type10, align 8, !dbg !2635, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 10, !dbg !2636
  %18 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !2636, !tbaa !2261
  %cmp11 = icmp ne %struct.PyNumberMethods* %18, null, !dbg !2637
  br i1 %cmp11, label %land.lhs.true.12, label %if.else, !dbg !2638

land.lhs.true.12:                                 ; preds = %if.then.9
  %19 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2639, !tbaa !1829
  %ob_type13 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1, !dbg !2641
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type13, align 8, !dbg !2641, !tbaa !1845
  %tp_as_number14 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 10, !dbg !2642
  %21 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number14, align 8, !dbg !2642, !tbaa !2261
  %nb_index = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %21, i32 0, i32 33, !dbg !2643
  %nb_index15 = bitcast {}** %nb_index to %struct._object* (%struct._object*)**, !dbg !2643
  %22 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index15, align 8, !dbg !2643, !tbaa !2269
  %cmp16 = icmp ne %struct._object* (%struct._object*)* %22, null, !dbg !2644
  br i1 %cmp16, label %if.then.17, label %if.else, !dbg !2645

if.then.17:                                       ; preds = %land.lhs.true.12
  %23 = bitcast i64* %key_value to i8*, !dbg !2646
  call void @llvm.lifetime.start(i64 8, i8* %23) #2, !dbg !2646
  call void @llvm.dbg.declare(metadata i64* %key_value, metadata !519, metadata !1833), !dbg !2647
  %24 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2648, !tbaa !1829
  %25 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8, !dbg !2649, !tbaa !1829
  %call18 = call i64 @PyNumber_AsSsize_t(%struct._object* %24, %struct._object* %25), !dbg !2650
  store i64 %call18, i64* %key_value, align 8, !dbg !2651, !tbaa !1963
  %26 = load i64, i64* %key_value, align 8, !dbg !2652, !tbaa !1963
  %cmp19 = icmp eq i64 %26, -1, !dbg !2654
  br i1 %cmp19, label %land.lhs.true.20, label %if.end.24, !dbg !2655

land.lhs.true.20:                                 ; preds = %if.then.17
  %call21 = call %struct._object* @PyErr_Occurred(), !dbg !2656
  %tobool22 = icmp ne %struct._object* %call21, null, !dbg !2656
  br i1 %tobool22, label %if.then.23, label %if.end.24, !dbg !2658

if.then.23:                                       ; preds = %land.lhs.true.20
  store i32 -1, i32* %retval, !dbg !2659
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2659

if.end.24:                                        ; preds = %land.lhs.true.20, %if.then.17
  %27 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2660, !tbaa !1829
  %28 = load i64, i64* %key_value, align 8, !dbg !2661, !tbaa !1963
  %call25 = call i32 @PySequence_DelItem(%struct._object* %27, i64 %28), !dbg !2662
  store i32 %call25, i32* %retval, !dbg !2663
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2663

cleanup:                                          ; preds = %if.end.24, %if.then.23
  %29 = bitcast i64* %key_value to i8*, !dbg !2664
  call void @llvm.lifetime.end(i64 8, i8* %29) #2, !dbg !2664
  br label %cleanup.35

if.else:                                          ; preds = %land.lhs.true.12, %if.then.9
  %30 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2665, !tbaa !1829
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !2667
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8, !dbg !2667, !tbaa !1845
  %tp_as_sequence27 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 11, !dbg !2668
  %32 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence27, align 8, !dbg !2668, !tbaa !1876
  %sq_ass_item = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %32, i32 0, i32 5, !dbg !2669
  %33 = load i32 (%struct._object*, i64, %struct._object*)*, i32 (%struct._object*, i64, %struct._object*)** %sq_ass_item, align 8, !dbg !2669, !tbaa !2530
  %tobool28 = icmp ne i32 (%struct._object*, i64, %struct._object*)* %33, null, !dbg !2665
  br i1 %tobool28, label %if.then.29, label %if.end.31, !dbg !2670

if.then.29:                                       ; preds = %if.else
  %34 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !2671, !tbaa !1829
  %call30 = call %struct._object* @type_error(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i32 0, i32 0), %struct._object* %34), !dbg !2673
  store i32 -1, i32* %retval, !dbg !2674
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.35, !dbg !2674

if.end.31:                                        ; preds = %if.else
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31
  br label %if.end.33, !dbg !2675

if.end.33:                                        ; preds = %if.end.32, %if.end.6
  %35 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2676, !tbaa !1829
  %call34 = call %struct._object* @type_error(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.6, i32 0, i32 0), %struct._object* %35), !dbg !2677
  store i32 -1, i32* %retval, !dbg !2678
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.35, !dbg !2678

cleanup.35:                                       ; preds = %if.end.33, %if.then.29, %cleanup, %if.then.3, %if.then
  %36 = bitcast %struct.PyMappingMethods** %m to i8*, !dbg !2679
  call void @llvm.lifetime.end(i64 8, i8* %36) #2, !dbg !2679
  %37 = load i32, i32* %retval, !dbg !2679
  ret i32 %37, !dbg !2679
}

; Function Attrs: nounwind uwtable
define i32 @PySequence_DelItem(%struct._object* %s, i64 %i) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct._object*, align 8
  %i.addr = alloca i64, align 8
  %m = alloca %struct.PySequenceMethods*, align 8
  %cleanup.dest.slot = alloca i32
  %l = alloca i64, align 8
  store %struct._object* %s, %struct._object** %s.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %s.addr, metadata !1015, metadata !1833), !dbg !2680
  store i64 %i, i64* %i.addr, align 8, !tbaa !1963
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !1016, metadata !1833), !dbg !2681
  %0 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !2682
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !2682
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %m, metadata !1017, metadata !1833), !dbg !2683
  %1 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2684, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !2686
  br i1 %cmp, label %if.then, label %if.end, !dbg !2687

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !2688
  store i32 -1, i32* %retval, !dbg !2690
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.18, !dbg !2690

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2691, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !2692
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2692, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 11, !dbg !2693
  %4 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !2693, !tbaa !1876
  store %struct.PySequenceMethods* %4, %struct.PySequenceMethods** %m, align 8, !dbg !2694, !tbaa !1829
  %5 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2695, !tbaa !1829
  %tobool = icmp ne %struct.PySequenceMethods* %5, null, !dbg !2695
  br i1 %tobool, label %land.lhs.true, label %if.end.16, !dbg !2696

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2697, !tbaa !1829
  %sq_ass_item = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %6, i32 0, i32 5, !dbg !2699
  %7 = load i32 (%struct._object*, i64, %struct._object*)*, i32 (%struct._object*, i64, %struct._object*)** %sq_ass_item, align 8, !dbg !2699, !tbaa !2530
  %tobool1 = icmp ne i32 (%struct._object*, i64, %struct._object*)* %7, null, !dbg !2700
  br i1 %tobool1, label %if.then.2, label %if.end.16, !dbg !2701

if.then.2:                                        ; preds = %land.lhs.true
  %8 = load i64, i64* %i.addr, align 8, !dbg !2702, !tbaa !1963
  %cmp3 = icmp slt i64 %8, 0, !dbg !2703
  br i1 %cmp3, label %if.then.4, label %if.end.13, !dbg !2704

if.then.4:                                        ; preds = %if.then.2
  %9 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2705, !tbaa !1829
  %sq_length = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %9, i32 0, i32 0, !dbg !2706
  %10 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length, align 8, !dbg !2706, !tbaa !1887
  %tobool5 = icmp ne i64 (%struct._object*)* %10, null, !dbg !2705
  br i1 %tobool5, label %if.then.6, label %if.end.12, !dbg !2707

if.then.6:                                        ; preds = %if.then.4
  %11 = bitcast i64* %l to i8*, !dbg !2708
  call void @llvm.lifetime.start(i64 8, i8* %11) #2, !dbg !2708
  call void @llvm.dbg.declare(metadata i64* %l, metadata !1018, metadata !1833), !dbg !2709
  %12 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2710, !tbaa !1829
  %sq_length7 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %12, i32 0, i32 0, !dbg !2711
  %13 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length7, align 8, !dbg !2711, !tbaa !1887
  %14 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2712, !tbaa !1829
  %call8 = call i64 %13(%struct._object* %14), !dbg !2713
  store i64 %call8, i64* %l, align 8, !dbg !2709, !tbaa !1963
  %15 = load i64, i64* %l, align 8, !dbg !2714, !tbaa !1963
  %cmp9 = icmp slt i64 %15, 0, !dbg !2716
  br i1 %cmp9, label %if.then.10, label %if.end.11, !dbg !2717

if.then.10:                                       ; preds = %if.then.6
  store i32 -1, i32* %retval, !dbg !2718
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2718

if.end.11:                                        ; preds = %if.then.6
  %16 = load i64, i64* %l, align 8, !dbg !2719, !tbaa !1963
  %17 = load i64, i64* %i.addr, align 8, !dbg !2720, !tbaa !1963
  %add = add i64 %17, %16, !dbg !2720
  store i64 %add, i64* %i.addr, align 8, !dbg !2720, !tbaa !1963
  store i32 0, i32* %cleanup.dest.slot, !dbg !2721
  br label %cleanup, !dbg !2721

cleanup:                                          ; preds = %if.end.11, %if.then.10
  %18 = bitcast i64* %l to i8*, !dbg !2722
  call void @llvm.lifetime.end(i64 8, i8* %18) #2, !dbg !2722
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.12, !dbg !2724

if.end.12:                                        ; preds = %cleanup.cont, %if.then.4
  br label %if.end.13, !dbg !2725

if.end.13:                                        ; preds = %if.end.12, %if.then.2
  %19 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !2726, !tbaa !1829
  %sq_ass_item14 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %19, i32 0, i32 5, !dbg !2727
  %20 = load i32 (%struct._object*, i64, %struct._object*)*, i32 (%struct._object*, i64, %struct._object*)** %sq_ass_item14, align 8, !dbg !2727, !tbaa !2530
  %21 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2728, !tbaa !1829
  %22 = load i64, i64* %i.addr, align 8, !dbg !2729, !tbaa !1963
  %call15 = call i32 %20(%struct._object* %21, i64 %22, %struct._object* null), !dbg !2726
  store i32 %call15, i32* %retval, !dbg !2730
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.18, !dbg !2730

if.end.16:                                        ; preds = %land.lhs.true, %if.end
  %23 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !2731, !tbaa !1829
  %call17 = call %struct._object* @type_error(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.61, i32 0, i32 0), %struct._object* %23), !dbg !2732
  store i32 -1, i32* %retval, !dbg !2733
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.18, !dbg !2733

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.18

cleanup.18:                                       ; preds = %NewDefault, %if.end.16, %if.end.13, %if.then
  %24 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !2734
  call void @llvm.lifetime.end(i64 8, i8* %24) #2, !dbg !2734
  %25 = load i32, i32* %retval, !dbg !2734
  ret i32 %25, !dbg !2734
}

; Function Attrs: nounwind uwtable
define i32 @PyObject_DelItemString(%struct._object* %o, i8* %key) #0 {
entry:
  %retval = alloca i32, align 4
  %o.addr = alloca %struct._object*, align 8
  %key.addr = alloca i8*, align 8
  %okey = alloca %struct._object*, align 8
  %ret = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !528, metadata !1833), !dbg !2735
  store i8* %key, i8** %key.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %key.addr, metadata !529, metadata !1833), !dbg !2736
  %0 = bitcast %struct._object** %okey to i8*, !dbg !2737
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !2737
  call void @llvm.dbg.declare(metadata %struct._object** %okey, metadata !530, metadata !1833), !dbg !2738
  %1 = bitcast i32* %ret to i8*, !dbg !2739
  call void @llvm.lifetime.start(i64 4, i8* %1) #2, !dbg !2739
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !531, metadata !1833), !dbg !2740
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2741, !tbaa !1829
  %cmp = icmp eq %struct._object* %2, null, !dbg !2743
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2744

lor.lhs.false:                                    ; preds = %entry
  %3 = load i8*, i8** %key.addr, align 8, !dbg !2745, !tbaa !1829
  %cmp1 = icmp eq i8* %3, null, !dbg !2747
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2748

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !2749
  store i32 -1, i32* %retval, !dbg !2751
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2751

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i8*, i8** %key.addr, align 8, !dbg !2752, !tbaa !1829
  %call2 = call %struct._object* @PyUnicode_FromString(i8* %4), !dbg !2753
  store %struct._object* %call2, %struct._object** %okey, align 8, !dbg !2754, !tbaa !1829
  %5 = load %struct._object*, %struct._object** %okey, align 8, !dbg !2755, !tbaa !1829
  %cmp3 = icmp eq %struct._object* %5, null, !dbg !2757
  br i1 %cmp3, label %if.then.4, label %if.end.5, !dbg !2758

if.then.4:                                        ; preds = %if.end
  store i32 -1, i32* %retval, !dbg !2759
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2759

if.end.5:                                         ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !2760, !tbaa !1829
  %7 = load %struct._object*, %struct._object** %okey, align 8, !dbg !2761, !tbaa !1829
  %call6 = call i32 @PyObject_DelItem(%struct._object* %6, %struct._object* %7), !dbg !2762
  store i32 %call6, i32* %ret, align 4, !dbg !2763, !tbaa !2764
  br label %do.body, !dbg !2765

do.body:                                          ; preds = %if.end.5
  %8 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2766
  call void @llvm.lifetime.start(i64 8, i8* %8) #2, !dbg !2766
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !532, metadata !1833), !dbg !2768
  %9 = load %struct._object*, %struct._object** %okey, align 8, !dbg !2769, !tbaa !1829
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8, !dbg !2768, !tbaa !1829
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2770, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0, !dbg !2772
  %11 = load i64, i64* %ob_refcnt, align 8, !dbg !2773, !tbaa !1853
  %dec = add i64 %11, -1, !dbg !2773
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !2773, !tbaa !1853
  %cmp7 = icmp ne i64 %dec, 0, !dbg !2774
  br i1 %cmp7, label %if.then.8, label %if.else, !dbg !2775

if.then.8:                                        ; preds = %do.body
  br label %if.end.9, !dbg !2776

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2778, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1, !dbg !2780
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2780, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4, !dbg !2781
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !2781, !tbaa !2033
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2782, !tbaa !1829
  call void %14(%struct._object* %15), !dbg !2783
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  %16 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2784
  call void @llvm.lifetime.end(i64 8, i8* %16) #2, !dbg !2784
  br label %do.cond, !dbg !2786

do.cond:                                          ; preds = %if.end.9
  br label %do.end, !dbg !2787

do.end:                                           ; preds = %do.cond
  %17 = load i32, i32* %ret, align 4, !dbg !2789, !tbaa !2764
  store i32 %17, i32* %retval, !dbg !2790
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2790

cleanup:                                          ; preds = %do.end, %if.then.4, %if.then
  %18 = bitcast i32* %ret to i8*, !dbg !2791
  call void @llvm.lifetime.end(i64 4, i8* %18) #2, !dbg !2791
  %19 = bitcast %struct._object** %okey to i8*, !dbg !2791
  call void @llvm.lifetime.end(i64 8, i8* %19) #2, !dbg !2791
  %20 = load i32, i32* %retval, !dbg !2791
  ret i32 %20, !dbg !2791
}

declare %struct._object* @PyUnicode_FromString(i8*) #3

; Function Attrs: nounwind uwtable
define i32 @PyObject_AsCharBuffer(%struct._object* %obj, i8** %buffer, i64* %buffer_len) #0 {
entry:
  %retval = alloca i32, align 4
  %obj.addr = alloca %struct._object*, align 8
  %buffer.addr = alloca i8**, align 8
  %buffer_len.addr = alloca i64*, align 8
  %pb = alloca %struct.PyBufferProcs*, align 8
  %view = alloca %struct.bufferinfo, align 8
  %cleanup.dest.slot = alloca i32
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %obj.addr, metadata !539, metadata !1833), !dbg !2792
  store i8** %buffer, i8*** %buffer.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8*** %buffer.addr, metadata !540, metadata !1833), !dbg !2793
  store i64* %buffer_len, i64** %buffer_len.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i64** %buffer_len.addr, metadata !541, metadata !1833), !dbg !2794
  %0 = bitcast %struct.PyBufferProcs** %pb to i8*, !dbg !2795
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !2795
  call void @llvm.dbg.declare(metadata %struct.PyBufferProcs** %pb, metadata !542, metadata !1833), !dbg !2796
  %1 = bitcast %struct.bufferinfo* %view to i8*, !dbg !2797
  call void @llvm.lifetime.start(i64 80, i8* %1) #2, !dbg !2797
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %view, metadata !543, metadata !1833), !dbg !2798
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !2799, !tbaa !1829
  %cmp = icmp eq %struct._object* %2, null, !dbg !2801
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2802

lor.lhs.false:                                    ; preds = %entry
  %3 = load i8**, i8*** %buffer.addr, align 8, !dbg !2803, !tbaa !1829
  %cmp1 = icmp eq i8** %3, null, !dbg !2805
  br i1 %cmp1, label %if.then, label %lor.lhs.false.2, !dbg !2806

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %4 = load i64*, i64** %buffer_len.addr, align 8, !dbg !2807, !tbaa !1829
  %cmp3 = icmp eq i64* %4, null, !dbg !2809
  br i1 %cmp3, label %if.then, label %if.end, !dbg !2810

if.then:                                          ; preds = %lor.lhs.false.2, %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !2811
  store i32 -1, i32* %retval, !dbg !2813
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2813

if.end:                                           ; preds = %lor.lhs.false.2
  %5 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !2814, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !2815
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2815, !tbaa !1845
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 18, !dbg !2816
  %7 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer, align 8, !dbg !2816, !tbaa !2817
  store %struct.PyBufferProcs* %7, %struct.PyBufferProcs** %pb, align 8, !dbg !2818, !tbaa !1829
  %8 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !2819, !tbaa !1829
  %cmp4 = icmp eq %struct.PyBufferProcs* %8, null, !dbg !2821
  br i1 %cmp4, label %if.then.7, label %lor.lhs.false.5, !dbg !2822

lor.lhs.false.5:                                  ; preds = %if.end
  %9 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !2823, !tbaa !1829
  %bf_getbuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %9, i32 0, i32 0, !dbg !2825
  %10 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer, align 8, !dbg !2825, !tbaa !2826
  %cmp6 = icmp eq i32 (%struct._object*, %struct.bufferinfo*, i32)* %10, null, !dbg !2828
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !2829

if.then.7:                                        ; preds = %lor.lhs.false.5, %if.end
  %11 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !2830, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %11, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.7, i32 0, i32 0)), !dbg !2832
  store i32 -1, i32* %retval, !dbg !2833
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2833

if.end.8:                                         ; preds = %lor.lhs.false.5
  %12 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !2834, !tbaa !1829
  %bf_getbuffer9 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %12, i32 0, i32 0, !dbg !2836
  %13 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer9, align 8, !dbg !2836, !tbaa !2826
  %14 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !2837, !tbaa !1829
  %call10 = call i32 %13(%struct._object* %14, %struct.bufferinfo* %view, i32 0), !dbg !2838
  %tobool = icmp ne i32 %call10, 0, !dbg !2838
  br i1 %tobool, label %if.then.11, label %if.end.12, !dbg !2839

if.then.11:                                       ; preds = %if.end.8
  store i32 -1, i32* %retval, !dbg !2840
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2842

if.end.12:                                        ; preds = %if.end.8
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view, i32 0, i32 0, !dbg !2843
  %15 = load i8*, i8** %buf, align 8, !dbg !2843, !tbaa !2844
  %16 = load i8**, i8*** %buffer.addr, align 8, !dbg !2846, !tbaa !1829
  store i8* %15, i8** %16, align 8, !dbg !2847, !tbaa !1829
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view, i32 0, i32 2, !dbg !2848
  %17 = load i64, i64* %len, align 8, !dbg !2848, !tbaa !2849
  %18 = load i64*, i64** %buffer_len.addr, align 8, !dbg !2850, !tbaa !1829
  store i64 %17, i64* %18, align 8, !dbg !2851, !tbaa !1963
  %19 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !2852, !tbaa !1829
  %bf_releasebuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %19, i32 0, i32 1, !dbg !2854
  %20 = load void (%struct._object*, %struct.bufferinfo*)*, void (%struct._object*, %struct.bufferinfo*)** %bf_releasebuffer, align 8, !dbg !2854, !tbaa !2855
  %cmp13 = icmp ne void (%struct._object*, %struct.bufferinfo*)* %20, null, !dbg !2856
  br i1 %cmp13, label %if.then.14, label %if.end.16, !dbg !2857

if.then.14:                                       ; preds = %if.end.12
  %21 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !2858, !tbaa !1829
  %bf_releasebuffer15 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %21, i32 0, i32 1, !dbg !2859
  %22 = load void (%struct._object*, %struct.bufferinfo*)*, void (%struct._object*, %struct.bufferinfo*)** %bf_releasebuffer15, align 8, !dbg !2859, !tbaa !2855
  %23 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !2860, !tbaa !1829
  call void %22(%struct._object* %23, %struct.bufferinfo* %view), !dbg !2861
  br label %if.end.16, !dbg !2861

if.end.16:                                        ; preds = %if.then.14, %if.end.12
  br label %do.body, !dbg !2862

do.body:                                          ; preds = %if.end.16
  %24 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !2863
  call void @llvm.lifetime.start(i64 8, i8* %24) #2, !dbg !2863
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !544, metadata !1833), !dbg !2865
  %obj17 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view, i32 0, i32 1, !dbg !2866
  %25 = load %struct._object*, %struct._object** %obj17, align 8, !dbg !2866, !tbaa !2867
  store %struct._object* %25, %struct._object** %_py_xdecref_tmp, align 8, !dbg !2865, !tbaa !1829
  %26 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !2868, !tbaa !1829
  %cmp18 = icmp ne %struct._object* %26, null, !dbg !2869
  br i1 %cmp18, label %if.then.19, label %if.end.25, !dbg !2870

if.then.19:                                       ; preds = %do.body
  br label %do.body.20, !dbg !2871

do.body.20:                                       ; preds = %if.then.19
  %27 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2873
  call void @llvm.lifetime.start(i64 8, i8* %27) #2, !dbg !2873
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !546, metadata !1833), !dbg !2875
  %28 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !2876, !tbaa !1829
  store %struct._object* %28, %struct._object** %_py_decref_tmp, align 8, !dbg !2875, !tbaa !1829
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2877, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0, !dbg !2879
  %30 = load i64, i64* %ob_refcnt, align 8, !dbg !2880, !tbaa !1853
  %dec = add i64 %30, -1, !dbg !2880
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !2880, !tbaa !1853
  %cmp21 = icmp ne i64 %dec, 0, !dbg !2881
  br i1 %cmp21, label %if.then.22, label %if.else, !dbg !2882

if.then.22:                                       ; preds = %do.body.20
  br label %if.end.24, !dbg !2883

if.else:                                          ; preds = %do.body.20
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2885, !tbaa !1829
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1, !dbg !2887
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8, !dbg !2887, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4, !dbg !2888
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !2888, !tbaa !2033
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2889, !tbaa !1829
  call void %33(%struct._object* %34), !dbg !2890
  br label %if.end.24

if.end.24:                                        ; preds = %if.else, %if.then.22
  %35 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2891
  call void @llvm.lifetime.end(i64 8, i8* %35) #2, !dbg !2891
  br label %do.cond, !dbg !2893

do.cond:                                          ; preds = %if.end.24
  br label %do.end, !dbg !2894

do.end:                                           ; preds = %do.cond
  br label %if.end.25, !dbg !2896

if.end.25:                                        ; preds = %do.end, %do.body
  %36 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !2898
  call void @llvm.lifetime.end(i64 8, i8* %36) #2, !dbg !2898
  br label %do.cond.26, !dbg !2901

do.cond.26:                                       ; preds = %if.end.25
  br label %do.end.27, !dbg !2902

do.end.27:                                        ; preds = %do.cond.26
  store i32 0, i32* %retval, !dbg !2904
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2904

cleanup:                                          ; preds = %do.end.27, %if.then.11, %if.then.7, %if.then
  %37 = bitcast %struct.bufferinfo* %view to i8*, !dbg !2905
  call void @llvm.lifetime.end(i64 80, i8* %37) #2, !dbg !2905
  %38 = bitcast %struct.PyBufferProcs** %pb to i8*, !dbg !2905
  call void @llvm.lifetime.end(i64 8, i8* %38) #2, !dbg !2905
  %39 = load i32, i32* %retval, !dbg !2905
  ret i32 %39, !dbg !2905
}

declare void @PyErr_SetString(%struct._object*, i8*) #3

; Function Attrs: nounwind uwtable
define i32 @PyObject_CheckReadBuffer(%struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %obj.addr = alloca %struct._object*, align 8
  %pb = alloca %struct.PyBufferProcs*, align 8
  %view = alloca %struct.bufferinfo, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %obj, %struct._object** %obj.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %obj.addr, metadata !551, metadata !1833), !dbg !2906
  %0 = bitcast %struct.PyBufferProcs** %pb to i8*, !dbg !2907
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !2907
  call void @llvm.dbg.declare(metadata %struct.PyBufferProcs** %pb, metadata !552, metadata !1833), !dbg !2908
  %1 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !2909, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !2910
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2910, !tbaa !1845
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 18, !dbg !2911
  %3 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer, align 8, !dbg !2911, !tbaa !2817
  store %struct.PyBufferProcs* %3, %struct.PyBufferProcs** %pb, align 8, !dbg !2908, !tbaa !1829
  %4 = bitcast %struct.bufferinfo* %view to i8*, !dbg !2912
  call void @llvm.lifetime.start(i64 80, i8* %4) #2, !dbg !2912
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %view, metadata !553, metadata !1833), !dbg !2913
  %5 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !2914, !tbaa !1829
  %cmp = icmp eq %struct.PyBufferProcs* %5, null, !dbg !2916
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2917

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !2918, !tbaa !1829
  %bf_getbuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %6, i32 0, i32 0, !dbg !2919
  %7 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer, align 8, !dbg !2919, !tbaa !2826
  %cmp1 = icmp eq i32 (%struct._object*, %struct.bufferinfo*, i32)* %7, null, !dbg !2920
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2921

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, !dbg !2922
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2922

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !2923, !tbaa !1829
  %bf_getbuffer2 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %8, i32 0, i32 0, !dbg !2925
  %9 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer2, align 8, !dbg !2925, !tbaa !2826
  %10 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !2926, !tbaa !1829
  %call = call i32 %9(%struct._object* %10, %struct.bufferinfo* %view, i32 0), !dbg !2927
  %cmp3 = icmp eq i32 %call, -1, !dbg !2928
  br i1 %cmp3, label %if.then.4, label %if.end.5, !dbg !2929

if.then.4:                                        ; preds = %if.end
  call void @PyErr_Clear(), !dbg !2930
  store i32 0, i32* %retval, !dbg !2932
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2932

if.end.5:                                         ; preds = %if.end
  call void @PyBuffer_Release(%struct.bufferinfo* %view), !dbg !2933
  store i32 1, i32* %retval, !dbg !2934
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2934

cleanup:                                          ; preds = %if.end.5, %if.then.4, %if.then
  %11 = bitcast %struct.bufferinfo* %view to i8*, !dbg !2935
  call void @llvm.lifetime.end(i64 80, i8* %11) #2, !dbg !2935
  %12 = bitcast %struct.PyBufferProcs** %pb to i8*, !dbg !2935
  call void @llvm.lifetime.end(i64 8, i8* %12) #2, !dbg !2935
  %13 = load i32, i32* %retval, !dbg !2935
  ret i32 %13, !dbg !2935
}

; Function Attrs: nounwind uwtable
define void @PyBuffer_Release(%struct.bufferinfo* %view) #0 {
entry:
  %view.addr = alloca %struct.bufferinfo*, align 8
  %obj = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.bufferinfo* %view, %struct.bufferinfo** %view.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %view.addr, metadata !674, metadata !1833), !dbg !2936
  %0 = bitcast %struct._object** %obj to i8*, !dbg !2937
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !2937
  call void @llvm.dbg.declare(metadata %struct._object** %obj, metadata !675, metadata !1833), !dbg !2938
  %1 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !2939, !tbaa !1829
  %obj1 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %1, i32 0, i32 1, !dbg !2940
  %2 = load %struct._object*, %struct._object** %obj1, align 8, !dbg !2940, !tbaa !2867
  store %struct._object* %2, %struct._object** %obj, align 8, !dbg !2938, !tbaa !1829
  %3 = load %struct._object*, %struct._object** %obj, align 8, !dbg !2941, !tbaa !1829
  %tobool = icmp ne %struct._object* %3, null, !dbg !2941
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !2943

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %obj, align 8, !dbg !2944, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1, !dbg !2946
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2946, !tbaa !1845
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 18, !dbg !2947
  %6 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer, align 8, !dbg !2947, !tbaa !2817
  %tobool2 = icmp ne %struct.PyBufferProcs* %6, null, !dbg !2948
  br i1 %tobool2, label %land.lhs.true.3, label %if.end, !dbg !2949

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %obj, align 8, !dbg !2950, !tbaa !1829
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1, !dbg !2952
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8, !dbg !2952, !tbaa !1845
  %tp_as_buffer5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 18, !dbg !2953
  %9 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer5, align 8, !dbg !2953, !tbaa !2817
  %bf_releasebuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %9, i32 0, i32 1, !dbg !2954
  %10 = load void (%struct._object*, %struct.bufferinfo*)*, void (%struct._object*, %struct.bufferinfo*)** %bf_releasebuffer, align 8, !dbg !2954, !tbaa !2855
  %tobool6 = icmp ne void (%struct._object*, %struct.bufferinfo*)* %10, null, !dbg !2955
  br i1 %tobool6, label %if.then, label %if.end, !dbg !2956

if.then:                                          ; preds = %land.lhs.true.3
  %11 = load %struct._object*, %struct._object** %obj, align 8, !dbg !2957, !tbaa !1829
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1, !dbg !2958
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8, !dbg !2958, !tbaa !1845
  %tp_as_buffer8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 18, !dbg !2959
  %13 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer8, align 8, !dbg !2959, !tbaa !2817
  %bf_releasebuffer9 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %13, i32 0, i32 1, !dbg !2960
  %14 = load void (%struct._object*, %struct.bufferinfo*)*, void (%struct._object*, %struct.bufferinfo*)** %bf_releasebuffer9, align 8, !dbg !2960, !tbaa !2855
  %15 = load %struct._object*, %struct._object** %obj, align 8, !dbg !2961, !tbaa !1829
  %16 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !2962, !tbaa !1829
  call void %14(%struct._object* %15, %struct.bufferinfo* %16), !dbg !2963
  br label %if.end, !dbg !2963

if.end:                                           ; preds = %if.then, %land.lhs.true.3, %land.lhs.true, %entry
  br label %do.body, !dbg !2964

do.body:                                          ; preds = %if.end
  %17 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !2965
  call void @llvm.lifetime.start(i64 8, i8* %17) #2, !dbg !2965
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !676, metadata !1833), !dbg !2967
  %18 = load %struct._object*, %struct._object** %obj, align 8, !dbg !2968, !tbaa !1829
  store %struct._object* %18, %struct._object** %_py_xdecref_tmp, align 8, !dbg !2967, !tbaa !1829
  %19 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !2969, !tbaa !1829
  %cmp = icmp ne %struct._object* %19, null, !dbg !2970
  br i1 %cmp, label %if.then.10, label %if.end.16, !dbg !2971

if.then.10:                                       ; preds = %do.body
  br label %do.body.11, !dbg !2972

do.body.11:                                       ; preds = %if.then.10
  %20 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2974
  call void @llvm.lifetime.start(i64 8, i8* %20) #2, !dbg !2974
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !678, metadata !1833), !dbg !2976
  %21 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !2977, !tbaa !1829
  store %struct._object* %21, %struct._object** %_py_decref_tmp, align 8, !dbg !2976, !tbaa !1829
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2978, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0, !dbg !2980
  %23 = load i64, i64* %ob_refcnt, align 8, !dbg !2981, !tbaa !1853
  %dec = add i64 %23, -1, !dbg !2981
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !2981, !tbaa !1853
  %cmp12 = icmp ne i64 %dec, 0, !dbg !2982
  br i1 %cmp12, label %if.then.13, label %if.else, !dbg !2983

if.then.13:                                       ; preds = %do.body.11
  br label %if.end.15, !dbg !2984

if.else:                                          ; preds = %do.body.11
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2986, !tbaa !1829
  %ob_type14 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1, !dbg !2988
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type14, align 8, !dbg !2988, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4, !dbg !2989
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !2989, !tbaa !2033
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !2990, !tbaa !1829
  call void %26(%struct._object* %27), !dbg !2991
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.13
  %28 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !2992
  call void @llvm.lifetime.end(i64 8, i8* %28) #2, !dbg !2992
  br label %do.cond, !dbg !2994

do.cond:                                          ; preds = %if.end.15
  br label %do.end, !dbg !2995

do.end:                                           ; preds = %do.cond
  br label %if.end.16, !dbg !2997

if.end.16:                                        ; preds = %do.end, %do.body
  %29 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !2999
  call void @llvm.lifetime.end(i64 8, i8* %29) #2, !dbg !2999
  br label %do.cond.17, !dbg !3002

do.cond.17:                                       ; preds = %if.end.16
  br label %do.end.18, !dbg !3003

do.end.18:                                        ; preds = %do.cond.17
  %30 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3005, !tbaa !1829
  %obj19 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %30, i32 0, i32 1, !dbg !3006
  store %struct._object* null, %struct._object** %obj19, align 8, !dbg !3007, !tbaa !2867
  %31 = bitcast %struct._object** %obj to i8*, !dbg !3008
  call void @llvm.lifetime.end(i64 8, i8* %31) #2, !dbg !3008
  ret void, !dbg !3008
}

; Function Attrs: nounwind uwtable
define i32 @PyObject_AsReadBuffer(%struct._object* %obj, i8** %buffer, i64* %buffer_len) #0 {
entry:
  %retval = alloca i32, align 4
  %obj.addr = alloca %struct._object*, align 8
  %buffer.addr = alloca i8**, align 8
  %buffer_len.addr = alloca i64*, align 8
  %pb = alloca %struct.PyBufferProcs*, align 8
  %view = alloca %struct.bufferinfo, align 8
  %cleanup.dest.slot = alloca i32
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %obj.addr, metadata !561, metadata !1833), !dbg !3009
  store i8** %buffer, i8*** %buffer.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8*** %buffer.addr, metadata !562, metadata !1833), !dbg !3010
  store i64* %buffer_len, i64** %buffer_len.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i64** %buffer_len.addr, metadata !563, metadata !1833), !dbg !3011
  %0 = bitcast %struct.PyBufferProcs** %pb to i8*, !dbg !3012
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !3012
  call void @llvm.dbg.declare(metadata %struct.PyBufferProcs** %pb, metadata !564, metadata !1833), !dbg !3013
  %1 = bitcast %struct.bufferinfo* %view to i8*, !dbg !3014
  call void @llvm.lifetime.start(i64 80, i8* %1) #2, !dbg !3014
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %view, metadata !565, metadata !1833), !dbg !3015
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3016, !tbaa !1829
  %cmp = icmp eq %struct._object* %2, null, !dbg !3018
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3019

lor.lhs.false:                                    ; preds = %entry
  %3 = load i8**, i8*** %buffer.addr, align 8, !dbg !3020, !tbaa !1829
  %cmp1 = icmp eq i8** %3, null, !dbg !3022
  br i1 %cmp1, label %if.then, label %lor.lhs.false.2, !dbg !3023

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %4 = load i64*, i64** %buffer_len.addr, align 8, !dbg !3024, !tbaa !1829
  %cmp3 = icmp eq i64* %4, null, !dbg !3026
  br i1 %cmp3, label %if.then, label %if.end, !dbg !3027

if.then:                                          ; preds = %lor.lhs.false.2, %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !3028
  store i32 -1, i32* %retval, !dbg !3030
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3030

if.end:                                           ; preds = %lor.lhs.false.2
  %5 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3031, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !3032
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3032, !tbaa !1845
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 18, !dbg !3033
  %7 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer, align 8, !dbg !3033, !tbaa !2817
  store %struct.PyBufferProcs* %7, %struct.PyBufferProcs** %pb, align 8, !dbg !3034, !tbaa !1829
  %8 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !3035, !tbaa !1829
  %cmp4 = icmp eq %struct.PyBufferProcs* %8, null, !dbg !3037
  br i1 %cmp4, label %if.then.7, label %lor.lhs.false.5, !dbg !3038

lor.lhs.false.5:                                  ; preds = %if.end
  %9 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !3039, !tbaa !1829
  %bf_getbuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %9, i32 0, i32 0, !dbg !3040
  %10 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer, align 8, !dbg !3040, !tbaa !2826
  %cmp6 = icmp eq i32 (%struct._object*, %struct.bufferinfo*, i32)* %10, null, !dbg !3041
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !3042

if.then.7:                                        ; preds = %lor.lhs.false.5, %if.end
  %11 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !3043, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %11, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.8, i32 0, i32 0)), !dbg !3045
  store i32 -1, i32* %retval, !dbg !3046
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3046

if.end.8:                                         ; preds = %lor.lhs.false.5
  %12 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !3047, !tbaa !1829
  %bf_getbuffer9 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %12, i32 0, i32 0, !dbg !3049
  %13 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer9, align 8, !dbg !3049, !tbaa !2826
  %14 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3050, !tbaa !1829
  %call10 = call i32 %13(%struct._object* %14, %struct.bufferinfo* %view, i32 0), !dbg !3051
  %tobool = icmp ne i32 %call10, 0, !dbg !3051
  br i1 %tobool, label %if.then.11, label %if.end.12, !dbg !3052

if.then.11:                                       ; preds = %if.end.8
  store i32 -1, i32* %retval, !dbg !3053
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3055

if.end.12:                                        ; preds = %if.end.8
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view, i32 0, i32 0, !dbg !3056
  %15 = load i8*, i8** %buf, align 8, !dbg !3056, !tbaa !2844
  %16 = load i8**, i8*** %buffer.addr, align 8, !dbg !3057, !tbaa !1829
  store i8* %15, i8** %16, align 8, !dbg !3058, !tbaa !1829
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view, i32 0, i32 2, !dbg !3059
  %17 = load i64, i64* %len, align 8, !dbg !3059, !tbaa !2849
  %18 = load i64*, i64** %buffer_len.addr, align 8, !dbg !3060, !tbaa !1829
  store i64 %17, i64* %18, align 8, !dbg !3061, !tbaa !1963
  %19 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !3062, !tbaa !1829
  %bf_releasebuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %19, i32 0, i32 1, !dbg !3064
  %20 = load void (%struct._object*, %struct.bufferinfo*)*, void (%struct._object*, %struct.bufferinfo*)** %bf_releasebuffer, align 8, !dbg !3064, !tbaa !2855
  %cmp13 = icmp ne void (%struct._object*, %struct.bufferinfo*)* %20, null, !dbg !3065
  br i1 %cmp13, label %if.then.14, label %if.end.16, !dbg !3066

if.then.14:                                       ; preds = %if.end.12
  %21 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !3067, !tbaa !1829
  %bf_releasebuffer15 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %21, i32 0, i32 1, !dbg !3068
  %22 = load void (%struct._object*, %struct.bufferinfo*)*, void (%struct._object*, %struct.bufferinfo*)** %bf_releasebuffer15, align 8, !dbg !3068, !tbaa !2855
  %23 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3069, !tbaa !1829
  call void %22(%struct._object* %23, %struct.bufferinfo* %view), !dbg !3070
  br label %if.end.16, !dbg !3070

if.end.16:                                        ; preds = %if.then.14, %if.end.12
  br label %do.body, !dbg !3071

do.body:                                          ; preds = %if.end.16
  %24 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !3072
  call void @llvm.lifetime.start(i64 8, i8* %24) #2, !dbg !3072
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !566, metadata !1833), !dbg !3074
  %obj17 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view, i32 0, i32 1, !dbg !3075
  %25 = load %struct._object*, %struct._object** %obj17, align 8, !dbg !3075, !tbaa !2867
  store %struct._object* %25, %struct._object** %_py_xdecref_tmp, align 8, !dbg !3074, !tbaa !1829
  %26 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !3076, !tbaa !1829
  %cmp18 = icmp ne %struct._object* %26, null, !dbg !3077
  br i1 %cmp18, label %if.then.19, label %if.end.25, !dbg !3078

if.then.19:                                       ; preds = %do.body
  br label %do.body.20, !dbg !3079

do.body.20:                                       ; preds = %if.then.19
  %27 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3081
  call void @llvm.lifetime.start(i64 8, i8* %27) #2, !dbg !3081
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !568, metadata !1833), !dbg !3083
  %28 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !3084, !tbaa !1829
  store %struct._object* %28, %struct._object** %_py_decref_tmp, align 8, !dbg !3083, !tbaa !1829
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3085, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0, !dbg !3087
  %30 = load i64, i64* %ob_refcnt, align 8, !dbg !3088, !tbaa !1853
  %dec = add i64 %30, -1, !dbg !3088
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !3088, !tbaa !1853
  %cmp21 = icmp ne i64 %dec, 0, !dbg !3089
  br i1 %cmp21, label %if.then.22, label %if.else, !dbg !3090

if.then.22:                                       ; preds = %do.body.20
  br label %if.end.24, !dbg !3091

if.else:                                          ; preds = %do.body.20
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3093, !tbaa !1829
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1, !dbg !3095
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8, !dbg !3095, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4, !dbg !3096
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !3096, !tbaa !2033
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3097, !tbaa !1829
  call void %33(%struct._object* %34), !dbg !3098
  br label %if.end.24

if.end.24:                                        ; preds = %if.else, %if.then.22
  %35 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3099
  call void @llvm.lifetime.end(i64 8, i8* %35) #2, !dbg !3099
  br label %do.cond, !dbg !3101

do.cond:                                          ; preds = %if.end.24
  br label %do.end, !dbg !3102

do.end:                                           ; preds = %do.cond
  br label %if.end.25, !dbg !3104

if.end.25:                                        ; preds = %do.end, %do.body
  %36 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !3106
  call void @llvm.lifetime.end(i64 8, i8* %36) #2, !dbg !3106
  br label %do.cond.26, !dbg !3109

do.cond.26:                                       ; preds = %if.end.25
  br label %do.end.27, !dbg !3110

do.end.27:                                        ; preds = %do.cond.26
  store i32 0, i32* %retval, !dbg !3112
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3112

cleanup:                                          ; preds = %do.end.27, %if.then.11, %if.then.7, %if.then
  %37 = bitcast %struct.bufferinfo* %view to i8*, !dbg !3113
  call void @llvm.lifetime.end(i64 80, i8* %37) #2, !dbg !3113
  %38 = bitcast %struct.PyBufferProcs** %pb to i8*, !dbg !3113
  call void @llvm.lifetime.end(i64 8, i8* %38) #2, !dbg !3113
  %39 = load i32, i32* %retval, !dbg !3113
  ret i32 %39, !dbg !3113
}

; Function Attrs: nounwind uwtable
define i32 @PyObject_AsWriteBuffer(%struct._object* %obj, i8** %buffer, i64* %buffer_len) #0 {
entry:
  %retval = alloca i32, align 4
  %obj.addr = alloca %struct._object*, align 8
  %buffer.addr = alloca i8**, align 8
  %buffer_len.addr = alloca i64*, align 8
  %pb = alloca %struct.PyBufferProcs*, align 8
  %view = alloca %struct.bufferinfo, align 8
  %cleanup.dest.slot = alloca i32
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %obj.addr, metadata !576, metadata !1833), !dbg !3114
  store i8** %buffer, i8*** %buffer.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8*** %buffer.addr, metadata !577, metadata !1833), !dbg !3115
  store i64* %buffer_len, i64** %buffer_len.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i64** %buffer_len.addr, metadata !578, metadata !1833), !dbg !3116
  %0 = bitcast %struct.PyBufferProcs** %pb to i8*, !dbg !3117
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !3117
  call void @llvm.dbg.declare(metadata %struct.PyBufferProcs** %pb, metadata !579, metadata !1833), !dbg !3118
  %1 = bitcast %struct.bufferinfo* %view to i8*, !dbg !3119
  call void @llvm.lifetime.start(i64 80, i8* %1) #2, !dbg !3119
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %view, metadata !580, metadata !1833), !dbg !3120
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3121, !tbaa !1829
  %cmp = icmp eq %struct._object* %2, null, !dbg !3123
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3124

lor.lhs.false:                                    ; preds = %entry
  %3 = load i8**, i8*** %buffer.addr, align 8, !dbg !3125, !tbaa !1829
  %cmp1 = icmp eq i8** %3, null, !dbg !3127
  br i1 %cmp1, label %if.then, label %lor.lhs.false.2, !dbg !3128

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %4 = load i64*, i64** %buffer_len.addr, align 8, !dbg !3129, !tbaa !1829
  %cmp3 = icmp eq i64* %4, null, !dbg !3131
  br i1 %cmp3, label %if.then, label %if.end, !dbg !3132

if.then:                                          ; preds = %lor.lhs.false.2, %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !3133
  store i32 -1, i32* %retval, !dbg !3135
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3135

if.end:                                           ; preds = %lor.lhs.false.2
  %5 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3136, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !3137
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3137, !tbaa !1845
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 18, !dbg !3138
  %7 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer, align 8, !dbg !3138, !tbaa !2817
  store %struct.PyBufferProcs* %7, %struct.PyBufferProcs** %pb, align 8, !dbg !3139, !tbaa !1829
  %8 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !3140, !tbaa !1829
  %cmp4 = icmp eq %struct.PyBufferProcs* %8, null, !dbg !3142
  br i1 %cmp4, label %if.then.11, label %lor.lhs.false.5, !dbg !3143

lor.lhs.false.5:                                  ; preds = %if.end
  %9 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !3144, !tbaa !1829
  %bf_getbuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %9, i32 0, i32 0, !dbg !3145
  %10 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer, align 8, !dbg !3145, !tbaa !2826
  %cmp6 = icmp eq i32 (%struct._object*, %struct.bufferinfo*, i32)* %10, null, !dbg !3146
  br i1 %cmp6, label %if.then.11, label %lor.lhs.false.7, !dbg !3147

lor.lhs.false.7:                                  ; preds = %lor.lhs.false.5
  %11 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !3148, !tbaa !1829
  %bf_getbuffer8 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %11, i32 0, i32 0, !dbg !3149
  %12 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer8, align 8, !dbg !3149, !tbaa !2826
  %13 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3150, !tbaa !1829
  %call9 = call i32 %12(%struct._object* %13, %struct.bufferinfo* %view, i32 1), !dbg !3151
  %cmp10 = icmp ne i32 %call9, 0, !dbg !3152
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !3153

if.then.11:                                       ; preds = %lor.lhs.false.7, %lor.lhs.false.5, %if.end
  %14 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !3154, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %14, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.9, i32 0, i32 0)), !dbg !3156
  store i32 -1, i32* %retval, !dbg !3157
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3157

if.end.12:                                        ; preds = %lor.lhs.false.7
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view, i32 0, i32 0, !dbg !3158
  %15 = load i8*, i8** %buf, align 8, !dbg !3158, !tbaa !2844
  %16 = load i8**, i8*** %buffer.addr, align 8, !dbg !3159, !tbaa !1829
  store i8* %15, i8** %16, align 8, !dbg !3160, !tbaa !1829
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view, i32 0, i32 2, !dbg !3161
  %17 = load i64, i64* %len, align 8, !dbg !3161, !tbaa !2849
  %18 = load i64*, i64** %buffer_len.addr, align 8, !dbg !3162, !tbaa !1829
  store i64 %17, i64* %18, align 8, !dbg !3163, !tbaa !1963
  %19 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !3164, !tbaa !1829
  %bf_releasebuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %19, i32 0, i32 1, !dbg !3166
  %20 = load void (%struct._object*, %struct.bufferinfo*)*, void (%struct._object*, %struct.bufferinfo*)** %bf_releasebuffer, align 8, !dbg !3166, !tbaa !2855
  %cmp13 = icmp ne void (%struct._object*, %struct.bufferinfo*)* %20, null, !dbg !3167
  br i1 %cmp13, label %if.then.14, label %if.end.16, !dbg !3168

if.then.14:                                       ; preds = %if.end.12
  %21 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %pb, align 8, !dbg !3169, !tbaa !1829
  %bf_releasebuffer15 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %21, i32 0, i32 1, !dbg !3170
  %22 = load void (%struct._object*, %struct.bufferinfo*)*, void (%struct._object*, %struct.bufferinfo*)** %bf_releasebuffer15, align 8, !dbg !3170, !tbaa !2855
  %23 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3171, !tbaa !1829
  call void %22(%struct._object* %23, %struct.bufferinfo* %view), !dbg !3172
  br label %if.end.16, !dbg !3172

if.end.16:                                        ; preds = %if.then.14, %if.end.12
  br label %do.body, !dbg !3173

do.body:                                          ; preds = %if.end.16
  %24 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !3174
  call void @llvm.lifetime.start(i64 8, i8* %24) #2, !dbg !3174
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !581, metadata !1833), !dbg !3176
  %obj17 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view, i32 0, i32 1, !dbg !3177
  %25 = load %struct._object*, %struct._object** %obj17, align 8, !dbg !3177, !tbaa !2867
  store %struct._object* %25, %struct._object** %_py_xdecref_tmp, align 8, !dbg !3176, !tbaa !1829
  %26 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !3178, !tbaa !1829
  %cmp18 = icmp ne %struct._object* %26, null, !dbg !3179
  br i1 %cmp18, label %if.then.19, label %if.end.25, !dbg !3180

if.then.19:                                       ; preds = %do.body
  br label %do.body.20, !dbg !3181

do.body.20:                                       ; preds = %if.then.19
  %27 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3183
  call void @llvm.lifetime.start(i64 8, i8* %27) #2, !dbg !3183
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !583, metadata !1833), !dbg !3185
  %28 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !3186, !tbaa !1829
  store %struct._object* %28, %struct._object** %_py_decref_tmp, align 8, !dbg !3185, !tbaa !1829
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3187, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0, !dbg !3189
  %30 = load i64, i64* %ob_refcnt, align 8, !dbg !3190, !tbaa !1853
  %dec = add i64 %30, -1, !dbg !3190
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !3190, !tbaa !1853
  %cmp21 = icmp ne i64 %dec, 0, !dbg !3191
  br i1 %cmp21, label %if.then.22, label %if.else, !dbg !3192

if.then.22:                                       ; preds = %do.body.20
  br label %if.end.24, !dbg !3193

if.else:                                          ; preds = %do.body.20
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3195, !tbaa !1829
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1, !dbg !3197
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8, !dbg !3197, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4, !dbg !3198
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !3198, !tbaa !2033
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3199, !tbaa !1829
  call void %33(%struct._object* %34), !dbg !3200
  br label %if.end.24

if.end.24:                                        ; preds = %if.else, %if.then.22
  %35 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3201
  call void @llvm.lifetime.end(i64 8, i8* %35) #2, !dbg !3201
  br label %do.cond, !dbg !3203

do.cond:                                          ; preds = %if.end.24
  br label %do.end, !dbg !3204

do.end:                                           ; preds = %do.cond
  br label %if.end.25, !dbg !3206

if.end.25:                                        ; preds = %do.end, %do.body
  %36 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !3208
  call void @llvm.lifetime.end(i64 8, i8* %36) #2, !dbg !3208
  br label %do.cond.26, !dbg !3211

do.cond.26:                                       ; preds = %if.end.25
  br label %do.end.27, !dbg !3212

do.end.27:                                        ; preds = %do.cond.26
  store i32 0, i32* %retval, !dbg !3214
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3214

cleanup:                                          ; preds = %do.end.27, %if.then.11, %if.then
  %37 = bitcast %struct.bufferinfo* %view to i8*, !dbg !3215
  call void @llvm.lifetime.end(i64 80, i8* %37) #2, !dbg !3215
  %38 = bitcast %struct.PyBufferProcs** %pb to i8*, !dbg !3215
  call void @llvm.lifetime.end(i64 8, i8* %38) #2, !dbg !3215
  %39 = load i32, i32* %retval, !dbg !3215
  ret i32 %39, !dbg !3215
}

; Function Attrs: nounwind uwtable
define i32 @PyObject_GetBuffer(%struct._object* %obj, %struct.bufferinfo* %view, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %obj.addr = alloca %struct._object*, align 8
  %view.addr = alloca %struct.bufferinfo*, align 8
  %flags.addr = alloca i32, align 4
  store %struct._object* %obj, %struct._object** %obj.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %obj.addr, metadata !588, metadata !1833), !dbg !3216
  store %struct.bufferinfo* %view, %struct.bufferinfo** %view.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %view.addr, metadata !589, metadata !1833), !dbg !3217
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !590, metadata !1833), !dbg !3218
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3219, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1, !dbg !3221
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3221, !tbaa !1845
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 18, !dbg !3222
  %2 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer, align 8, !dbg !3222, !tbaa !2817
  %cmp = icmp ne %struct.PyBufferProcs* %2, null, !dbg !3223
  br i1 %cmp, label %land.lhs.true, label %if.then, !dbg !3224

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3225, !tbaa !1829
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1, !dbg !3227
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !3227, !tbaa !1845
  %tp_as_buffer2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 18, !dbg !3228
  %5 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer2, align 8, !dbg !3228, !tbaa !2817
  %bf_getbuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %5, i32 0, i32 0, !dbg !3229
  %6 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer, align 8, !dbg !3229, !tbaa !2826
  %cmp3 = icmp ne i32 (%struct._object*, %struct.bufferinfo*, i32)* %6, null, !dbg !3230
  br i1 %cmp3, label %if.end, label %if.then, !dbg !3231

if.then:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !3232, !tbaa !1829
  %8 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3234, !tbaa !1829
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1, !dbg !3235
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8, !dbg !3235, !tbaa !1845
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 1, !dbg !3236
  %10 = load i8*, i8** %tp_name, align 8, !dbg !3236, !tbaa !2094
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %7, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.10, i32 0, i32 0), i8* %10), !dbg !3237
  store i32 -1, i32* %retval, !dbg !3238
  br label %return, !dbg !3238

if.end:                                           ; preds = %land.lhs.true
  %11 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3239, !tbaa !1829
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1, !dbg !3240
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8, !dbg !3240, !tbaa !1845
  %tp_as_buffer6 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 18, !dbg !3241
  %13 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer6, align 8, !dbg !3241, !tbaa !2817
  %bf_getbuffer7 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %13, i32 0, i32 0, !dbg !3242
  %14 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer7, align 8, !dbg !3242, !tbaa !2826
  %15 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3243, !tbaa !1829
  %16 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3244, !tbaa !1829
  %17 = load i32, i32* %flags.addr, align 4, !dbg !3245, !tbaa !2764
  %call8 = call i32 %14(%struct._object* %15, %struct.bufferinfo* %16, i32 %17), !dbg !3246
  store i32 %call8, i32* %retval, !dbg !3247
  br label %return, !dbg !3247

return:                                           ; preds = %if.end, %if.then
  %18 = load i32, i32* %retval, !dbg !3248
  ret i32 %18, !dbg !3248
}

; Function Attrs: nounwind uwtable
define i32 @PyBuffer_IsContiguous(%struct.bufferinfo* %view, i8 signext %order) #0 {
entry:
  %retval = alloca i32, align 4
  %view.addr = alloca %struct.bufferinfo*, align 8
  %order.addr = alloca i8, align 1
  store %struct.bufferinfo* %view, %struct.bufferinfo** %view.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %view.addr, metadata !597, metadata !1833), !dbg !3249
  store i8 %order, i8* %order.addr, align 1, !tbaa !3250
  call void @llvm.dbg.declare(metadata i8* %order.addr, metadata !598, metadata !1833), !dbg !3251
  %0 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3252, !tbaa !1829
  %suboffsets = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %0, i32 0, i32 9, !dbg !3254
  %1 = load i64*, i64** %suboffsets, align 8, !dbg !3254, !tbaa !3255
  %cmp = icmp ne i64* %1, null, !dbg !3256
  br i1 %cmp, label %if.then, label %if.end, !dbg !3257

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !3258
  br label %return, !dbg !3258

if.end:                                           ; preds = %entry
  %2 = load i8, i8* %order.addr, align 1, !dbg !3260, !tbaa !3250
  %conv = sext i8 %2 to i32, !dbg !3260
  %cmp1 = icmp eq i32 %conv, 67, !dbg !3262
  br i1 %cmp1, label %if.then.3, label %if.else, !dbg !3263

if.then.3:                                        ; preds = %if.end
  %3 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3264, !tbaa !1829
  %call = call i32 @_IsCContiguous(%struct.bufferinfo* %3), !dbg !3265
  store i32 %call, i32* %retval, !dbg !3266
  br label %return, !dbg !3266

if.else:                                          ; preds = %if.end
  %4 = load i8, i8* %order.addr, align 1, !dbg !3267, !tbaa !3250
  %conv4 = sext i8 %4 to i32, !dbg !3267
  %cmp5 = icmp eq i32 %conv4, 70, !dbg !3269
  br i1 %cmp5, label %if.then.7, label %if.else.9, !dbg !3270

if.then.7:                                        ; preds = %if.else
  %5 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3271, !tbaa !1829
  %call8 = call i32 @_IsFortranContiguous(%struct.bufferinfo* %5), !dbg !3272
  store i32 %call8, i32* %retval, !dbg !3273
  br label %return, !dbg !3273

if.else.9:                                        ; preds = %if.else
  %6 = load i8, i8* %order.addr, align 1, !dbg !3274, !tbaa !3250
  %conv10 = sext i8 %6 to i32, !dbg !3274
  %cmp11 = icmp eq i32 %conv10, 65, !dbg !3276
  br i1 %cmp11, label %if.then.13, label %if.end.17, !dbg !3277

if.then.13:                                       ; preds = %if.else.9
  %7 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3278, !tbaa !1829
  %call14 = call i32 @_IsCContiguous(%struct.bufferinfo* %7), !dbg !3279
  %tobool = icmp ne i32 %call14, 0, !dbg !3279
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !3280

lor.rhs:                                          ; preds = %if.then.13
  %8 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3281, !tbaa !1829
  %call15 = call i32 @_IsFortranContiguous(%struct.bufferinfo* %8), !dbg !3283
  %tobool16 = icmp ne i32 %call15, 0, !dbg !3280
  br label %lor.end, !dbg !3280

lor.end:                                          ; preds = %lor.rhs, %if.then.13
  %9 = phi i1 [ true, %if.then.13 ], [ %tobool16, %lor.rhs ]
  %lor.ext = zext i1 %9 to i32, !dbg !3284
  store i32 %lor.ext, i32* %retval, !dbg !3287
  br label %return, !dbg !3287

if.end.17:                                        ; preds = %if.else.9
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18
  store i32 0, i32* %retval, !dbg !3288
  br label %return, !dbg !3288

return:                                           ; preds = %if.end.19, %lor.end, %if.then.7, %if.then.3, %if.then
  %10 = load i32, i32* %retval, !dbg !3289
  ret i32 %10, !dbg !3289
}

; Function Attrs: nounwind uwtable
define internal i32 @_IsCContiguous(%struct.bufferinfo* %view) #0 {
entry:
  %retval = alloca i32, align 4
  %view.addr = alloca %struct.bufferinfo*, align 8
  %sd = alloca i64, align 8
  %dim = alloca i64, align 8
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.bufferinfo* %view, %struct.bufferinfo** %view.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %view.addr, metadata !1556, metadata !1833), !dbg !3290
  %0 = bitcast i64* %sd to i8*, !dbg !3291
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !3291
  call void @llvm.dbg.declare(metadata i64* %sd, metadata !1557, metadata !1833), !dbg !3292
  %1 = bitcast i64* %dim to i8*, !dbg !3291
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !3291
  call void @llvm.dbg.declare(metadata i64* %dim, metadata !1558, metadata !1833), !dbg !3293
  %2 = bitcast i32* %i to i8*, !dbg !3294
  call void @llvm.lifetime.start(i64 4, i8* %2) #2, !dbg !3294
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1559, metadata !1833), !dbg !3295
  %3 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3296, !tbaa !1829
  %ndim = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %3, i32 0, i32 5, !dbg !3298
  %4 = load i32, i32* %ndim, align 4, !dbg !3298, !tbaa !3299
  %cmp = icmp eq i32 %4, 0, !dbg !3300
  br i1 %cmp, label %if.then, label %if.end, !dbg !3301

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, !dbg !3302
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3304

if.end:                                           ; preds = %entry
  %5 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3305, !tbaa !1829
  %strides = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %5, i32 0, i32 8, !dbg !3307
  %6 = load i64*, i64** %strides, align 8, !dbg !3307, !tbaa !3308
  %cmp1 = icmp eq i64* %6, null, !dbg !3309
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !3310

if.then.2:                                        ; preds = %if.end
  store i32 1, i32* %retval, !dbg !3311
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3313

if.end.3:                                         ; preds = %if.end
  %7 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3314, !tbaa !1829
  %itemsize = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %7, i32 0, i32 3, !dbg !3315
  %8 = load i64, i64* %itemsize, align 8, !dbg !3315, !tbaa !3316
  store i64 %8, i64* %sd, align 8, !dbg !3317, !tbaa !1963
  %9 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3318, !tbaa !1829
  %ndim4 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %9, i32 0, i32 5, !dbg !3320
  %10 = load i32, i32* %ndim4, align 4, !dbg !3320, !tbaa !3299
  %cmp5 = icmp eq i32 %10, 1, !dbg !3321
  br i1 %cmp5, label %if.then.6, label %if.end.11, !dbg !3322

if.then.6:                                        ; preds = %if.end.3
  %11 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3323, !tbaa !1829
  %shape = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %11, i32 0, i32 7, !dbg !3325
  %12 = load i64*, i64** %shape, align 8, !dbg !3325, !tbaa !3326
  %arrayidx = getelementptr i64, i64* %12, i64 0, !dbg !3327
  %13 = load i64, i64* %arrayidx, align 8, !dbg !3327, !tbaa !1963
  %cmp7 = icmp eq i64 %13, 1, !dbg !3328
  br i1 %cmp7, label %lor.end, label %lor.rhs, !dbg !3329

lor.rhs:                                          ; preds = %if.then.6
  %14 = load i64, i64* %sd, align 8, !dbg !3330, !tbaa !1963
  %15 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3331, !tbaa !1829
  %strides8 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %15, i32 0, i32 8, !dbg !3332
  %16 = load i64*, i64** %strides8, align 8, !dbg !3332, !tbaa !3308
  %arrayidx9 = getelementptr i64, i64* %16, i64 0, !dbg !3331
  %17 = load i64, i64* %arrayidx9, align 8, !dbg !3331, !tbaa !1963
  %cmp10 = icmp eq i64 %14, %17, !dbg !3333
  br label %lor.end, !dbg !3329

lor.end:                                          ; preds = %lor.rhs, %if.then.6
  %18 = phi i1 [ true, %if.then.6 ], [ %cmp10, %lor.rhs ]
  %lor.ext = zext i1 %18 to i32, !dbg !3334
  store i32 %lor.ext, i32* %retval, !dbg !3337
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3337

if.end.11:                                        ; preds = %if.end.3
  %19 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3338, !tbaa !1829
  %ndim12 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %19, i32 0, i32 5, !dbg !3340
  %20 = load i32, i32* %ndim12, align 4, !dbg !3340, !tbaa !3299
  %sub = sub i32 %20, 1, !dbg !3341
  store i32 %sub, i32* %i, align 4, !dbg !3342, !tbaa !2764
  br label %for.cond, !dbg !3343

for.cond:                                         ; preds = %for.inc, %if.end.11
  %21 = load i32, i32* %i, align 4, !dbg !3344, !tbaa !2764
  %cmp13 = icmp sge i32 %21, 0, !dbg !3348
  br i1 %cmp13, label %for.body, label %for.end, !dbg !3349

for.body:                                         ; preds = %for.cond
  %22 = load i32, i32* %i, align 4, !dbg !3350, !tbaa !2764
  %idxprom = sext i32 %22 to i64, !dbg !3352
  %23 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3352, !tbaa !1829
  %shape14 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %23, i32 0, i32 7, !dbg !3353
  %24 = load i64*, i64** %shape14, align 8, !dbg !3353, !tbaa !3326
  %arrayidx15 = getelementptr i64, i64* %24, i64 %idxprom, !dbg !3352
  %25 = load i64, i64* %arrayidx15, align 8, !dbg !3352, !tbaa !1963
  store i64 %25, i64* %dim, align 8, !dbg !3354, !tbaa !1963
  %26 = load i64, i64* %dim, align 8, !dbg !3355, !tbaa !1963
  %cmp16 = icmp eq i64 %26, 0, !dbg !3357
  br i1 %cmp16, label %if.then.17, label %if.end.18, !dbg !3358

if.then.17:                                       ; preds = %for.body
  store i32 1, i32* %retval, !dbg !3359
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3361

if.end.18:                                        ; preds = %for.body
  %27 = load i32, i32* %i, align 4, !dbg !3362, !tbaa !2764
  %idxprom19 = sext i32 %27 to i64, !dbg !3364
  %28 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3364, !tbaa !1829
  %strides20 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %28, i32 0, i32 8, !dbg !3365
  %29 = load i64*, i64** %strides20, align 8, !dbg !3365, !tbaa !3308
  %arrayidx21 = getelementptr i64, i64* %29, i64 %idxprom19, !dbg !3364
  %30 = load i64, i64* %arrayidx21, align 8, !dbg !3364, !tbaa !1963
  %31 = load i64, i64* %sd, align 8, !dbg !3366, !tbaa !1963
  %cmp22 = icmp ne i64 %30, %31, !dbg !3367
  br i1 %cmp22, label %if.then.23, label %if.end.24, !dbg !3368

if.then.23:                                       ; preds = %if.end.18
  store i32 0, i32* %retval, !dbg !3369
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3371

if.end.24:                                        ; preds = %if.end.18
  %32 = load i64, i64* %dim, align 8, !dbg !3372, !tbaa !1963
  %33 = load i64, i64* %sd, align 8, !dbg !3373, !tbaa !1963
  %mul = mul i64 %33, %32, !dbg !3373
  store i64 %mul, i64* %sd, align 8, !dbg !3373, !tbaa !1963
  br label %for.inc, !dbg !3374

for.inc:                                          ; preds = %if.end.24
  %34 = load i32, i32* %i, align 4, !dbg !3375, !tbaa !2764
  %dec = add i32 %34, -1, !dbg !3375
  store i32 %dec, i32* %i, align 4, !dbg !3375, !tbaa !2764
  br label %for.cond, !dbg !3376

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, !dbg !3377
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3377

cleanup:                                          ; preds = %for.end, %if.then.23, %if.then.17, %lor.end, %if.then.2, %if.then
  %35 = bitcast i32* %i to i8*, !dbg !3378
  call void @llvm.lifetime.end(i64 4, i8* %35) #2, !dbg !3378
  %36 = bitcast i64* %dim to i8*, !dbg !3378
  call void @llvm.lifetime.end(i64 8, i8* %36) #2, !dbg !3378
  %37 = bitcast i64* %sd to i8*, !dbg !3378
  call void @llvm.lifetime.end(i64 8, i8* %37) #2, !dbg !3378
  %38 = load i32, i32* %retval, !dbg !3378
  ret i32 %38, !dbg !3378
}

; Function Attrs: nounwind uwtable
define internal i32 @_IsFortranContiguous(%struct.bufferinfo* %view) #0 {
entry:
  %retval = alloca i32, align 4
  %view.addr = alloca %struct.bufferinfo*, align 8
  %sd = alloca i64, align 8
  %dim = alloca i64, align 8
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.bufferinfo* %view, %struct.bufferinfo** %view.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %view.addr, metadata !1562, metadata !1833), !dbg !3379
  %0 = bitcast i64* %sd to i8*, !dbg !3380
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !3380
  call void @llvm.dbg.declare(metadata i64* %sd, metadata !1563, metadata !1833), !dbg !3381
  %1 = bitcast i64* %dim to i8*, !dbg !3380
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !3380
  call void @llvm.dbg.declare(metadata i64* %dim, metadata !1564, metadata !1833), !dbg !3382
  %2 = bitcast i32* %i to i8*, !dbg !3383
  call void @llvm.lifetime.start(i64 4, i8* %2) #2, !dbg !3383
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1565, metadata !1833), !dbg !3384
  %3 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3385, !tbaa !1829
  %ndim = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %3, i32 0, i32 5, !dbg !3387
  %4 = load i32, i32* %ndim, align 4, !dbg !3387, !tbaa !3299
  %cmp = icmp eq i32 %4, 0, !dbg !3388
  br i1 %cmp, label %if.then, label %if.end, !dbg !3389

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, !dbg !3390
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3392

if.end:                                           ; preds = %entry
  %5 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3393, !tbaa !1829
  %strides = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %5, i32 0, i32 8, !dbg !3395
  %6 = load i64*, i64** %strides, align 8, !dbg !3395, !tbaa !3308
  %cmp1 = icmp eq i64* %6, null, !dbg !3396
  br i1 %cmp1, label %if.then.2, label %if.end.5, !dbg !3397

if.then.2:                                        ; preds = %if.end
  %7 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3398, !tbaa !1829
  %ndim3 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %7, i32 0, i32 5, !dbg !3400
  %8 = load i32, i32* %ndim3, align 4, !dbg !3400, !tbaa !3299
  %cmp4 = icmp eq i32 %8, 1, !dbg !3401
  %conv = zext i1 %cmp4 to i32, !dbg !3401
  store i32 %conv, i32* %retval, !dbg !3402
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3402

if.end.5:                                         ; preds = %if.end
  %9 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3403, !tbaa !1829
  %itemsize = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %9, i32 0, i32 3, !dbg !3404
  %10 = load i64, i64* %itemsize, align 8, !dbg !3404, !tbaa !3316
  store i64 %10, i64* %sd, align 8, !dbg !3405, !tbaa !1963
  %11 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3406, !tbaa !1829
  %ndim6 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %11, i32 0, i32 5, !dbg !3408
  %12 = load i32, i32* %ndim6, align 4, !dbg !3408, !tbaa !3299
  %cmp7 = icmp eq i32 %12, 1, !dbg !3409
  br i1 %cmp7, label %if.then.9, label %if.end.16, !dbg !3410

if.then.9:                                        ; preds = %if.end.5
  %13 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3411, !tbaa !1829
  %shape = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %13, i32 0, i32 7, !dbg !3413
  %14 = load i64*, i64** %shape, align 8, !dbg !3413, !tbaa !3326
  %arrayidx = getelementptr i64, i64* %14, i64 0, !dbg !3414
  %15 = load i64, i64* %arrayidx, align 8, !dbg !3414, !tbaa !1963
  %cmp10 = icmp eq i64 %15, 1, !dbg !3415
  br i1 %cmp10, label %lor.end, label %lor.rhs, !dbg !3416

lor.rhs:                                          ; preds = %if.then.9
  %16 = load i64, i64* %sd, align 8, !dbg !3417, !tbaa !1963
  %17 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3418, !tbaa !1829
  %strides12 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %17, i32 0, i32 8, !dbg !3419
  %18 = load i64*, i64** %strides12, align 8, !dbg !3419, !tbaa !3308
  %arrayidx13 = getelementptr i64, i64* %18, i64 0, !dbg !3418
  %19 = load i64, i64* %arrayidx13, align 8, !dbg !3418, !tbaa !1963
  %cmp14 = icmp eq i64 %16, %19, !dbg !3420
  br label %lor.end, !dbg !3416

lor.end:                                          ; preds = %lor.rhs, %if.then.9
  %20 = phi i1 [ true, %if.then.9 ], [ %cmp14, %lor.rhs ]
  %lor.ext = zext i1 %20 to i32, !dbg !3421
  store i32 %lor.ext, i32* %retval, !dbg !3424
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3424

if.end.16:                                        ; preds = %if.end.5
  store i32 0, i32* %i, align 4, !dbg !3425, !tbaa !2764
  br label %for.cond, !dbg !3427

for.cond:                                         ; preds = %for.inc, %if.end.16
  %21 = load i32, i32* %i, align 4, !dbg !3428, !tbaa !2764
  %22 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3432, !tbaa !1829
  %ndim17 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %22, i32 0, i32 5, !dbg !3433
  %23 = load i32, i32* %ndim17, align 4, !dbg !3433, !tbaa !3299
  %cmp18 = icmp slt i32 %21, %23, !dbg !3434
  br i1 %cmp18, label %for.body, label %for.end, !dbg !3435

for.body:                                         ; preds = %for.cond
  %24 = load i32, i32* %i, align 4, !dbg !3436, !tbaa !2764
  %idxprom = sext i32 %24 to i64, !dbg !3438
  %25 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3438, !tbaa !1829
  %shape20 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %25, i32 0, i32 7, !dbg !3439
  %26 = load i64*, i64** %shape20, align 8, !dbg !3439, !tbaa !3326
  %arrayidx21 = getelementptr i64, i64* %26, i64 %idxprom, !dbg !3438
  %27 = load i64, i64* %arrayidx21, align 8, !dbg !3438, !tbaa !1963
  store i64 %27, i64* %dim, align 8, !dbg !3440, !tbaa !1963
  %28 = load i64, i64* %dim, align 8, !dbg !3441, !tbaa !1963
  %cmp22 = icmp eq i64 %28, 0, !dbg !3443
  br i1 %cmp22, label %if.then.24, label %if.end.25, !dbg !3444

if.then.24:                                       ; preds = %for.body
  store i32 1, i32* %retval, !dbg !3445
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3447

if.end.25:                                        ; preds = %for.body
  %29 = load i32, i32* %i, align 4, !dbg !3448, !tbaa !2764
  %idxprom26 = sext i32 %29 to i64, !dbg !3450
  %30 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3450, !tbaa !1829
  %strides27 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %30, i32 0, i32 8, !dbg !3451
  %31 = load i64*, i64** %strides27, align 8, !dbg !3451, !tbaa !3308
  %arrayidx28 = getelementptr i64, i64* %31, i64 %idxprom26, !dbg !3450
  %32 = load i64, i64* %arrayidx28, align 8, !dbg !3450, !tbaa !1963
  %33 = load i64, i64* %sd, align 8, !dbg !3452, !tbaa !1963
  %cmp29 = icmp ne i64 %32, %33, !dbg !3453
  br i1 %cmp29, label %if.then.31, label %if.end.32, !dbg !3454

if.then.31:                                       ; preds = %if.end.25
  store i32 0, i32* %retval, !dbg !3455
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3457

if.end.32:                                        ; preds = %if.end.25
  %34 = load i64, i64* %dim, align 8, !dbg !3458, !tbaa !1963
  %35 = load i64, i64* %sd, align 8, !dbg !3459, !tbaa !1963
  %mul = mul i64 %35, %34, !dbg !3459
  store i64 %mul, i64* %sd, align 8, !dbg !3459, !tbaa !1963
  br label %for.inc, !dbg !3460

for.inc:                                          ; preds = %if.end.32
  %36 = load i32, i32* %i, align 4, !dbg !3461, !tbaa !2764
  %inc = add i32 %36, 1, !dbg !3461
  store i32 %inc, i32* %i, align 4, !dbg !3461, !tbaa !2764
  br label %for.cond, !dbg !3462

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, !dbg !3463
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3463

cleanup:                                          ; preds = %for.end, %if.then.31, %if.then.24, %lor.end, %if.then.2, %if.then
  %37 = bitcast i32* %i to i8*, !dbg !3464
  call void @llvm.lifetime.end(i64 4, i8* %37) #2, !dbg !3464
  %38 = bitcast i64* %dim to i8*, !dbg !3464
  call void @llvm.lifetime.end(i64 8, i8* %38) #2, !dbg !3464
  %39 = bitcast i64* %sd to i8*, !dbg !3464
  call void @llvm.lifetime.end(i64 8, i8* %39) #2, !dbg !3464
  %40 = load i32, i32* %retval, !dbg !3464
  ret i32 %40, !dbg !3464
}

; Function Attrs: nounwind uwtable
define i8* @PyBuffer_GetPointer(%struct.bufferinfo* %view, i64* %indices) #0 {
entry:
  %view.addr = alloca %struct.bufferinfo*, align 8
  %indices.addr = alloca i64*, align 8
  %pointer = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.bufferinfo* %view, %struct.bufferinfo** %view.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %view.addr, metadata !603, metadata !1833), !dbg !3465
  store i64* %indices, i64** %indices.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i64** %indices.addr, metadata !604, metadata !1833), !dbg !3466
  %0 = bitcast i8** %pointer to i8*, !dbg !3467
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !3467
  call void @llvm.dbg.declare(metadata i8** %pointer, metadata !605, metadata !1833), !dbg !3468
  %1 = bitcast i32* %i to i8*, !dbg !3469
  call void @llvm.lifetime.start(i64 4, i8* %1) #2, !dbg !3469
  call void @llvm.dbg.declare(metadata i32* %i, metadata !606, metadata !1833), !dbg !3470
  %2 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3471, !tbaa !1829
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %2, i32 0, i32 0, !dbg !3472
  %3 = load i8*, i8** %buf, align 8, !dbg !3472, !tbaa !2844
  store i8* %3, i8** %pointer, align 8, !dbg !3473, !tbaa !1829
  store i32 0, i32* %i, align 4, !dbg !3474, !tbaa !2764
  br label %for.cond, !dbg !3476

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4, !dbg !3477, !tbaa !2764
  %5 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3481, !tbaa !1829
  %ndim = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %5, i32 0, i32 5, !dbg !3482
  %6 = load i32, i32* %ndim, align 4, !dbg !3482, !tbaa !3299
  %cmp = icmp slt i32 %4, %6, !dbg !3483
  br i1 %cmp, label %for.body, label %for.end, !dbg !3484

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4, !dbg !3485, !tbaa !2764
  %idxprom = sext i32 %7 to i64, !dbg !3487
  %8 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3487, !tbaa !1829
  %strides = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %8, i32 0, i32 8, !dbg !3488
  %9 = load i64*, i64** %strides, align 8, !dbg !3488, !tbaa !3308
  %arrayidx = getelementptr i64, i64* %9, i64 %idxprom, !dbg !3487
  %10 = load i64, i64* %arrayidx, align 8, !dbg !3487, !tbaa !1963
  %11 = load i32, i32* %i, align 4, !dbg !3489, !tbaa !2764
  %idxprom1 = sext i32 %11 to i64, !dbg !3490
  %12 = load i64*, i64** %indices.addr, align 8, !dbg !3490, !tbaa !1829
  %arrayidx2 = getelementptr i64, i64* %12, i64 %idxprom1, !dbg !3490
  %13 = load i64, i64* %arrayidx2, align 8, !dbg !3490, !tbaa !1963
  %mul = mul i64 %10, %13, !dbg !3491
  %14 = load i8*, i8** %pointer, align 8, !dbg !3492, !tbaa !1829
  %add.ptr = getelementptr i8, i8* %14, i64 %mul, !dbg !3492
  store i8* %add.ptr, i8** %pointer, align 8, !dbg !3492, !tbaa !1829
  %15 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3493, !tbaa !1829
  %suboffsets = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %15, i32 0, i32 9, !dbg !3495
  %16 = load i64*, i64** %suboffsets, align 8, !dbg !3495, !tbaa !3255
  %cmp3 = icmp ne i64* %16, null, !dbg !3496
  br i1 %cmp3, label %land.lhs.true, label %if.end, !dbg !3497

land.lhs.true:                                    ; preds = %for.body
  %17 = load i32, i32* %i, align 4, !dbg !3498, !tbaa !2764
  %idxprom4 = sext i32 %17 to i64, !dbg !3500
  %18 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3500, !tbaa !1829
  %suboffsets5 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %18, i32 0, i32 9, !dbg !3501
  %19 = load i64*, i64** %suboffsets5, align 8, !dbg !3501, !tbaa !3255
  %arrayidx6 = getelementptr i64, i64* %19, i64 %idxprom4, !dbg !3500
  %20 = load i64, i64* %arrayidx6, align 8, !dbg !3500, !tbaa !1963
  %cmp7 = icmp sge i64 %20, 0, !dbg !3502
  br i1 %cmp7, label %if.then, label %if.end, !dbg !3503

if.then:                                          ; preds = %land.lhs.true
  %21 = load i8*, i8** %pointer, align 8, !dbg !3504, !tbaa !1829
  %22 = bitcast i8* %21 to i8**, !dbg !3506
  %23 = load i8*, i8** %22, align 8, !dbg !3507, !tbaa !1829
  %24 = load i32, i32* %i, align 4, !dbg !3508, !tbaa !2764
  %idxprom8 = sext i32 %24 to i64, !dbg !3509
  %25 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3509, !tbaa !1829
  %suboffsets9 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %25, i32 0, i32 9, !dbg !3510
  %26 = load i64*, i64** %suboffsets9, align 8, !dbg !3510, !tbaa !3255
  %arrayidx10 = getelementptr i64, i64* %26, i64 %idxprom8, !dbg !3509
  %27 = load i64, i64* %arrayidx10, align 8, !dbg !3509, !tbaa !1963
  %add.ptr11 = getelementptr i8, i8* %23, i64 %27, !dbg !3511
  store i8* %add.ptr11, i8** %pointer, align 8, !dbg !3512, !tbaa !1829
  br label %if.end, !dbg !3513

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc, !dbg !3514

for.inc:                                          ; preds = %if.end
  %28 = load i32, i32* %i, align 4, !dbg !3515, !tbaa !2764
  %inc = add i32 %28, 1, !dbg !3515
  store i32 %inc, i32* %i, align 4, !dbg !3515, !tbaa !2764
  br label %for.cond, !dbg !3516

for.end:                                          ; preds = %for.cond
  %29 = load i8*, i8** %pointer, align 8, !dbg !3517, !tbaa !1829
  %30 = bitcast i32* %i to i8*, !dbg !3518
  call void @llvm.lifetime.end(i64 4, i8* %30) #2, !dbg !3518
  %31 = bitcast i8** %pointer to i8*, !dbg !3518
  call void @llvm.lifetime.end(i64 8, i8* %31) #2, !dbg !3518
  ret i8* %29, !dbg !3519
}

; Function Attrs: nounwind uwtable
define void @_Py_add_one_to_index_F(i32 %nd, i64* %index, i64* %shape) #0 {
entry:
  %nd.addr = alloca i32, align 4
  %index.addr = alloca i64*, align 8
  %shape.addr = alloca i64*, align 8
  %k = alloca i32, align 4
  store i32 %nd, i32* %nd.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %nd.addr, metadata !613, metadata !1833), !dbg !3520
  store i64* %index, i64** %index.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i64** %index.addr, metadata !614, metadata !1833), !dbg !3521
  store i64* %shape, i64** %shape.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i64** %shape.addr, metadata !615, metadata !1833), !dbg !3522
  %0 = bitcast i32* %k to i8*, !dbg !3523
  call void @llvm.lifetime.start(i64 4, i8* %0) #2, !dbg !3523
  call void @llvm.dbg.declare(metadata i32* %k, metadata !616, metadata !1833), !dbg !3524
  store i32 0, i32* %k, align 4, !dbg !3525, !tbaa !2764
  br label %for.cond, !dbg !3527

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %k, align 4, !dbg !3528, !tbaa !2764
  %2 = load i32, i32* %nd.addr, align 4, !dbg !3532, !tbaa !2764
  %cmp = icmp slt i32 %1, %2, !dbg !3533
  br i1 %cmp, label %for.body, label %for.end, !dbg !3534

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %k, align 4, !dbg !3535, !tbaa !2764
  %idxprom = sext i32 %3 to i64, !dbg !3538
  %4 = load i64*, i64** %index.addr, align 8, !dbg !3538, !tbaa !1829
  %arrayidx = getelementptr i64, i64* %4, i64 %idxprom, !dbg !3538
  %5 = load i64, i64* %arrayidx, align 8, !dbg !3538, !tbaa !1963
  %6 = load i32, i32* %k, align 4, !dbg !3539, !tbaa !2764
  %idxprom1 = sext i32 %6 to i64, !dbg !3540
  %7 = load i64*, i64** %shape.addr, align 8, !dbg !3540, !tbaa !1829
  %arrayidx2 = getelementptr i64, i64* %7, i64 %idxprom1, !dbg !3540
  %8 = load i64, i64* %arrayidx2, align 8, !dbg !3540, !tbaa !1963
  %sub = sub i64 %8, 1, !dbg !3541
  %cmp3 = icmp slt i64 %5, %sub, !dbg !3542
  br i1 %cmp3, label %if.then, label %if.else, !dbg !3543

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %k, align 4, !dbg !3544, !tbaa !2764
  %idxprom4 = sext i32 %9 to i64, !dbg !3546
  %10 = load i64*, i64** %index.addr, align 8, !dbg !3546, !tbaa !1829
  %arrayidx5 = getelementptr i64, i64* %10, i64 %idxprom4, !dbg !3546
  %11 = load i64, i64* %arrayidx5, align 8, !dbg !3547, !tbaa !1963
  %inc = add i64 %11, 1, !dbg !3547
  store i64 %inc, i64* %arrayidx5, align 8, !dbg !3547, !tbaa !1963
  br label %for.end, !dbg !3548

if.else:                                          ; preds = %for.body
  %12 = load i32, i32* %k, align 4, !dbg !3549, !tbaa !2764
  %idxprom6 = sext i32 %12 to i64, !dbg !3551
  %13 = load i64*, i64** %index.addr, align 8, !dbg !3551, !tbaa !1829
  %arrayidx7 = getelementptr i64, i64* %13, i64 %idxprom6, !dbg !3551
  store i64 0, i64* %arrayidx7, align 8, !dbg !3552, !tbaa !1963
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %for.inc, !dbg !3553

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %k, align 4, !dbg !3554, !tbaa !2764
  %inc8 = add i32 %14, 1, !dbg !3554
  store i32 %inc8, i32* %k, align 4, !dbg !3554, !tbaa !2764
  br label %for.cond, !dbg !3555

for.end:                                          ; preds = %if.then, %for.cond
  %15 = bitcast i32* %k to i8*, !dbg !3556
  call void @llvm.lifetime.end(i64 4, i8* %15) #2, !dbg !3556
  ret void, !dbg !3556
}

; Function Attrs: nounwind uwtable
define void @_Py_add_one_to_index_C(i32 %nd, i64* %index, i64* %shape) #0 {
entry:
  %nd.addr = alloca i32, align 4
  %index.addr = alloca i64*, align 8
  %shape.addr = alloca i64*, align 8
  %k = alloca i32, align 4
  store i32 %nd, i32* %nd.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %nd.addr, metadata !619, metadata !1833), !dbg !3557
  store i64* %index, i64** %index.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i64** %index.addr, metadata !620, metadata !1833), !dbg !3558
  store i64* %shape, i64** %shape.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i64** %shape.addr, metadata !621, metadata !1833), !dbg !3559
  %0 = bitcast i32* %k to i8*, !dbg !3560
  call void @llvm.lifetime.start(i64 4, i8* %0) #2, !dbg !3560
  call void @llvm.dbg.declare(metadata i32* %k, metadata !622, metadata !1833), !dbg !3561
  %1 = load i32, i32* %nd.addr, align 4, !dbg !3562, !tbaa !2764
  %sub = sub i32 %1, 1, !dbg !3564
  store i32 %sub, i32* %k, align 4, !dbg !3565, !tbaa !2764
  br label %for.cond, !dbg !3566

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %k, align 4, !dbg !3567, !tbaa !2764
  %cmp = icmp sge i32 %2, 0, !dbg !3571
  br i1 %cmp, label %for.body, label %for.end, !dbg !3572

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %k, align 4, !dbg !3573, !tbaa !2764
  %idxprom = sext i32 %3 to i64, !dbg !3576
  %4 = load i64*, i64** %index.addr, align 8, !dbg !3576, !tbaa !1829
  %arrayidx = getelementptr i64, i64* %4, i64 %idxprom, !dbg !3576
  %5 = load i64, i64* %arrayidx, align 8, !dbg !3576, !tbaa !1963
  %6 = load i32, i32* %k, align 4, !dbg !3577, !tbaa !2764
  %idxprom1 = sext i32 %6 to i64, !dbg !3578
  %7 = load i64*, i64** %shape.addr, align 8, !dbg !3578, !tbaa !1829
  %arrayidx2 = getelementptr i64, i64* %7, i64 %idxprom1, !dbg !3578
  %8 = load i64, i64* %arrayidx2, align 8, !dbg !3578, !tbaa !1963
  %sub3 = sub i64 %8, 1, !dbg !3579
  %cmp4 = icmp slt i64 %5, %sub3, !dbg !3580
  br i1 %cmp4, label %if.then, label %if.else, !dbg !3581

if.then:                                          ; preds = %for.body
  %9 = load i32, i32* %k, align 4, !dbg !3582, !tbaa !2764
  %idxprom5 = sext i32 %9 to i64, !dbg !3584
  %10 = load i64*, i64** %index.addr, align 8, !dbg !3584, !tbaa !1829
  %arrayidx6 = getelementptr i64, i64* %10, i64 %idxprom5, !dbg !3584
  %11 = load i64, i64* %arrayidx6, align 8, !dbg !3585, !tbaa !1963
  %inc = add i64 %11, 1, !dbg !3585
  store i64 %inc, i64* %arrayidx6, align 8, !dbg !3585, !tbaa !1963
  br label %for.end, !dbg !3586

if.else:                                          ; preds = %for.body
  %12 = load i32, i32* %k, align 4, !dbg !3587, !tbaa !2764
  %idxprom7 = sext i32 %12 to i64, !dbg !3589
  %13 = load i64*, i64** %index.addr, align 8, !dbg !3589, !tbaa !1829
  %arrayidx8 = getelementptr i64, i64* %13, i64 %idxprom7, !dbg !3589
  store i64 0, i64* %arrayidx8, align 8, !dbg !3590, !tbaa !1963
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %for.inc, !dbg !3591

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %k, align 4, !dbg !3592, !tbaa !2764
  %dec = add i32 %14, -1, !dbg !3592
  store i32 %dec, i32* %k, align 4, !dbg !3592, !tbaa !2764
  br label %for.cond, !dbg !3593

for.end:                                          ; preds = %if.then, %for.cond
  %15 = bitcast i32* %k to i8*, !dbg !3594
  call void @llvm.lifetime.end(i64 4, i8* %15) #2, !dbg !3594
  ret void, !dbg !3594
}

; Function Attrs: nounwind uwtable
define i32 @PyBuffer_FromContiguous(%struct.bufferinfo* %view, i8* %buf, i64 %len, i8 signext %fort) #0 {
entry:
  %retval = alloca i32, align 4
  %view.addr = alloca %struct.bufferinfo*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %fort.addr = alloca i8, align 1
  %k = alloca i32, align 4
  %addone = alloca void (i32, i64*, i64*)*, align 8
  %indices = alloca i64*, align 8
  %elements = alloca i64, align 8
  %src = alloca i8*, align 8
  %ptr = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.bufferinfo* %view, %struct.bufferinfo** %view.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %view.addr, metadata !627, metadata !1833), !dbg !3595
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !628, metadata !1833), !dbg !3596
  store i64 %len, i64* %len.addr, align 8, !tbaa !1963
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !629, metadata !1833), !dbg !3597
  store i8 %fort, i8* %fort.addr, align 1, !tbaa !3250
  call void @llvm.dbg.declare(metadata i8* %fort.addr, metadata !630, metadata !1833), !dbg !3598
  %0 = bitcast i32* %k to i8*, !dbg !3599
  call void @llvm.lifetime.start(i64 4, i8* %0) #2, !dbg !3599
  call void @llvm.dbg.declare(metadata i32* %k, metadata !631, metadata !1833), !dbg !3600
  %1 = bitcast void (i32, i64*, i64*)** %addone to i8*, !dbg !3601
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !3601
  call void @llvm.dbg.declare(metadata void (i32, i64*, i64*)** %addone, metadata !632, metadata !1833), !dbg !3602
  %2 = bitcast i64** %indices to i8*, !dbg !3603
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !3603
  call void @llvm.dbg.declare(metadata i64** %indices, metadata !634, metadata !1833), !dbg !3604
  %3 = bitcast i64* %elements to i8*, !dbg !3603
  call void @llvm.lifetime.start(i64 8, i8* %3) #2, !dbg !3603
  call void @llvm.dbg.declare(metadata i64* %elements, metadata !635, metadata !1833), !dbg !3605
  %4 = bitcast i8** %src to i8*, !dbg !3606
  call void @llvm.lifetime.start(i64 8, i8* %4) #2, !dbg !3606
  call void @llvm.dbg.declare(metadata i8** %src, metadata !636, metadata !1833), !dbg !3607
  %5 = bitcast i8** %ptr to i8*, !dbg !3606
  call void @llvm.lifetime.start(i64 8, i8* %5) #2, !dbg !3606
  call void @llvm.dbg.declare(metadata i8** %ptr, metadata !637, metadata !1833), !dbg !3608
  %6 = load i64, i64* %len.addr, align 8, !dbg !3609, !tbaa !1963
  %7 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3611, !tbaa !1829
  %len1 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %7, i32 0, i32 2, !dbg !3612
  %8 = load i64, i64* %len1, align 8, !dbg !3612, !tbaa !2849
  %cmp = icmp sgt i64 %6, %8, !dbg !3613
  br i1 %cmp, label %if.then, label %if.end, !dbg !3614

if.then:                                          ; preds = %entry
  %9 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3615, !tbaa !1829
  %len2 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %9, i32 0, i32 2, !dbg !3617
  %10 = load i64, i64* %len2, align 8, !dbg !3617, !tbaa !2849
  store i64 %10, i64* %len.addr, align 8, !dbg !3618, !tbaa !1963
  br label %if.end, !dbg !3619

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3620, !tbaa !1829
  %12 = load i8, i8* %fort.addr, align 1, !dbg !3622, !tbaa !3250
  %call = call i32 @PyBuffer_IsContiguous(%struct.bufferinfo* %11, i8 signext %12), !dbg !3623
  %tobool = icmp ne i32 %call, 0, !dbg !3623
  br i1 %tobool, label %if.then.3, label %if.end.5, !dbg !3624

if.then.3:                                        ; preds = %if.end
  %13 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3625, !tbaa !1829
  %buf4 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %13, i32 0, i32 0, !dbg !3627
  %14 = load i8*, i8** %buf4, align 8, !dbg !3627, !tbaa !2844
  %15 = load i8*, i8** %buf.addr, align 8, !dbg !3628, !tbaa !1829
  %16 = load i64, i64* %len.addr, align 8, !dbg !3629, !tbaa !1963
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 %16, i32 1, i1 false), !dbg !3630
  store i32 0, i32* %retval, !dbg !3631
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3631

if.end.5:                                         ; preds = %if.end
  %17 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3632, !tbaa !1829
  %ndim = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %17, i32 0, i32 5, !dbg !3633
  %18 = load i32, i32* %ndim, align 4, !dbg !3633, !tbaa !3299
  %conv = sext i32 %18 to i64, !dbg !3634
  %mul = mul i64 8, %conv, !dbg !3635
  %call6 = call i8* @PyMem_Malloc(i64 %mul), !dbg !3636
  %19 = bitcast i8* %call6 to i64*, !dbg !3637
  store i64* %19, i64** %indices, align 8, !dbg !3638, !tbaa !1829
  %20 = load i64*, i64** %indices, align 8, !dbg !3639, !tbaa !1829
  %cmp7 = icmp eq i64* %20, null, !dbg !3641
  br i1 %cmp7, label %if.then.9, label %if.end.11, !dbg !3642

if.then.9:                                        ; preds = %if.end.5
  %call10 = call %struct._object* @PyErr_NoMemory(), !dbg !3643
  store i32 -1, i32* %retval, !dbg !3645
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3645

if.end.11:                                        ; preds = %if.end.5
  store i32 0, i32* %k, align 4, !dbg !3646, !tbaa !2764
  br label %for.cond, !dbg !3648

for.cond:                                         ; preds = %for.inc, %if.end.11
  %21 = load i32, i32* %k, align 4, !dbg !3649, !tbaa !2764
  %22 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3653, !tbaa !1829
  %ndim12 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %22, i32 0, i32 5, !dbg !3654
  %23 = load i32, i32* %ndim12, align 4, !dbg !3654, !tbaa !3299
  %cmp13 = icmp slt i32 %21, %23, !dbg !3655
  br i1 %cmp13, label %for.body, label %for.end, !dbg !3656

for.body:                                         ; preds = %for.cond
  %24 = load i32, i32* %k, align 4, !dbg !3657, !tbaa !2764
  %idxprom = sext i32 %24 to i64, !dbg !3659
  %25 = load i64*, i64** %indices, align 8, !dbg !3659, !tbaa !1829
  %arrayidx = getelementptr i64, i64* %25, i64 %idxprom, !dbg !3659
  store i64 0, i64* %arrayidx, align 8, !dbg !3660, !tbaa !1963
  br label %for.inc, !dbg !3661

for.inc:                                          ; preds = %for.body
  %26 = load i32, i32* %k, align 4, !dbg !3662, !tbaa !2764
  %inc = add i32 %26, 1, !dbg !3662
  store i32 %inc, i32* %k, align 4, !dbg !3662, !tbaa !2764
  br label %for.cond, !dbg !3663

for.end:                                          ; preds = %for.cond
  %27 = load i8, i8* %fort.addr, align 1, !dbg !3664, !tbaa !3250
  %conv15 = sext i8 %27 to i32, !dbg !3664
  %cmp16 = icmp eq i32 %conv15, 70, !dbg !3666
  br i1 %cmp16, label %if.then.18, label %if.else, !dbg !3667

if.then.18:                                       ; preds = %for.end
  store void (i32, i64*, i64*)* @_Py_add_one_to_index_F, void (i32, i64*, i64*)** %addone, align 8, !dbg !3668, !tbaa !1829
  br label %if.end.19, !dbg !3670

if.else:                                          ; preds = %for.end
  store void (i32, i64*, i64*)* @_Py_add_one_to_index_C, void (i32, i64*, i64*)** %addone, align 8, !dbg !3671, !tbaa !1829
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.18
  %28 = load i8*, i8** %buf.addr, align 8, !dbg !3673, !tbaa !1829
  store i8* %28, i8** %src, align 8, !dbg !3674, !tbaa !1829
  %29 = load i64, i64* %len.addr, align 8, !dbg !3675, !tbaa !1963
  %30 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3676, !tbaa !1829
  %itemsize = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %30, i32 0, i32 3, !dbg !3677
  %31 = load i64, i64* %itemsize, align 8, !dbg !3677, !tbaa !3316
  %div = sdiv i64 %29, %31, !dbg !3678
  store i64 %div, i64* %elements, align 8, !dbg !3679, !tbaa !1963
  br label %while.cond, !dbg !3680

while.cond:                                       ; preds = %while.body, %if.end.19
  %32 = load i64, i64* %elements, align 8, !dbg !3681, !tbaa !1963
  %dec = add i64 %32, -1, !dbg !3681
  store i64 %dec, i64* %elements, align 8, !dbg !3681, !tbaa !1963
  %tobool20 = icmp ne i64 %32, 0, !dbg !3680
  br i1 %tobool20, label %while.body, label %while.end, !dbg !3680

while.body:                                       ; preds = %while.cond
  %33 = load void (i32, i64*, i64*)*, void (i32, i64*, i64*)** %addone, align 8, !dbg !3684, !tbaa !1829
  %34 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3686, !tbaa !1829
  %ndim21 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %34, i32 0, i32 5, !dbg !3687
  %35 = load i32, i32* %ndim21, align 4, !dbg !3687, !tbaa !3299
  %36 = load i64*, i64** %indices, align 8, !dbg !3688, !tbaa !1829
  %37 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3689, !tbaa !1829
  %shape = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %37, i32 0, i32 7, !dbg !3690
  %38 = load i64*, i64** %shape, align 8, !dbg !3690, !tbaa !3326
  call void %33(i32 %35, i64* %36, i64* %38), !dbg !3684
  %39 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3691, !tbaa !1829
  %40 = load i64*, i64** %indices, align 8, !dbg !3692, !tbaa !1829
  %call22 = call i8* @PyBuffer_GetPointer(%struct.bufferinfo* %39, i64* %40), !dbg !3693
  store i8* %call22, i8** %ptr, align 8, !dbg !3694, !tbaa !1829
  %41 = load i8*, i8** %ptr, align 8, !dbg !3695, !tbaa !1829
  %42 = load i8*, i8** %src, align 8, !dbg !3696, !tbaa !1829
  %43 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3697, !tbaa !1829
  %itemsize23 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %43, i32 0, i32 3, !dbg !3698
  %44 = load i64, i64* %itemsize23, align 8, !dbg !3698, !tbaa !3316
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 %44, i32 1, i1 false), !dbg !3699
  %45 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3700, !tbaa !1829
  %itemsize24 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %45, i32 0, i32 3, !dbg !3701
  %46 = load i64, i64* %itemsize24, align 8, !dbg !3701, !tbaa !3316
  %47 = load i8*, i8** %src, align 8, !dbg !3702, !tbaa !1829
  %add.ptr = getelementptr i8, i8* %47, i64 %46, !dbg !3702
  store i8* %add.ptr, i8** %src, align 8, !dbg !3702, !tbaa !1829
  br label %while.cond, !dbg !3680

while.end:                                        ; preds = %while.cond
  %48 = load i64*, i64** %indices, align 8, !dbg !3703, !tbaa !1829
  %49 = bitcast i64* %48 to i8*, !dbg !3703
  call void @PyMem_Free(i8* %49), !dbg !3704
  store i32 0, i32* %retval, !dbg !3705
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3705

cleanup:                                          ; preds = %while.end, %if.then.9, %if.then.3
  %50 = bitcast i8** %ptr to i8*, !dbg !3706
  call void @llvm.lifetime.end(i64 8, i8* %50) #2, !dbg !3706
  %51 = bitcast i8** %src to i8*, !dbg !3706
  call void @llvm.lifetime.end(i64 8, i8* %51) #2, !dbg !3706
  %52 = bitcast i64* %elements to i8*, !dbg !3706
  call void @llvm.lifetime.end(i64 8, i8* %52) #2, !dbg !3706
  %53 = bitcast i64** %indices to i8*, !dbg !3706
  call void @llvm.lifetime.end(i64 8, i8* %53) #2, !dbg !3706
  %54 = bitcast void (i32, i64*, i64*)** %addone to i8*, !dbg !3706
  call void @llvm.lifetime.end(i64 8, i8* %54) #2, !dbg !3706
  %55 = bitcast i32* %k to i8*, !dbg !3706
  call void @llvm.lifetime.end(i64 4, i8* %55) #2, !dbg !3706
  %56 = load i32, i32* %retval, !dbg !3706
  ret i32 %56, !dbg !3706
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

declare i8* @PyMem_Malloc(i64) #3

declare %struct._object* @PyErr_NoMemory() #3

declare void @PyMem_Free(i8*) #3

; Function Attrs: nounwind uwtable
define i32 @PyObject_CopyData(%struct._object* %dest, %struct._object* %src) #0 {
entry:
  %retval = alloca i32, align 4
  %dest.addr = alloca %struct._object*, align 8
  %src.addr = alloca %struct._object*, align 8
  %view_dest = alloca %struct.bufferinfo, align 8
  %view_src = alloca %struct.bufferinfo, align 8
  %k = alloca i32, align 4
  %indices = alloca i64*, align 8
  %elements = alloca i64, align 8
  %dptr = alloca i8*, align 8
  %sptr = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %dest, %struct._object** %dest.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %dest.addr, metadata !640, metadata !1833), !dbg !3707
  store %struct._object* %src, %struct._object** %src.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %src.addr, metadata !641, metadata !1833), !dbg !3708
  %0 = bitcast %struct.bufferinfo* %view_dest to i8*, !dbg !3709
  call void @llvm.lifetime.start(i64 80, i8* %0) #2, !dbg !3709
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %view_dest, metadata !642, metadata !1833), !dbg !3710
  %1 = bitcast %struct.bufferinfo* %view_src to i8*, !dbg !3709
  call void @llvm.lifetime.start(i64 80, i8* %1) #2, !dbg !3709
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %view_src, metadata !643, metadata !1833), !dbg !3711
  %2 = bitcast i32* %k to i8*, !dbg !3712
  call void @llvm.lifetime.start(i64 4, i8* %2) #2, !dbg !3712
  call void @llvm.dbg.declare(metadata i32* %k, metadata !644, metadata !1833), !dbg !3713
  %3 = bitcast i64** %indices to i8*, !dbg !3714
  call void @llvm.lifetime.start(i64 8, i8* %3) #2, !dbg !3714
  call void @llvm.dbg.declare(metadata i64** %indices, metadata !645, metadata !1833), !dbg !3715
  %4 = bitcast i64* %elements to i8*, !dbg !3714
  call void @llvm.lifetime.start(i64 8, i8* %4) #2, !dbg !3714
  call void @llvm.dbg.declare(metadata i64* %elements, metadata !646, metadata !1833), !dbg !3716
  %5 = bitcast i8** %dptr to i8*, !dbg !3717
  call void @llvm.lifetime.start(i64 8, i8* %5) #2, !dbg !3717
  call void @llvm.dbg.declare(metadata i8** %dptr, metadata !647, metadata !1833), !dbg !3718
  %6 = bitcast i8** %sptr to i8*, !dbg !3717
  call void @llvm.lifetime.start(i64 8, i8* %6) #2, !dbg !3717
  call void @llvm.dbg.declare(metadata i8** %sptr, metadata !648, metadata !1833), !dbg !3719
  %7 = load %struct._object*, %struct._object** %dest.addr, align 8, !dbg !3720, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1, !dbg !3722
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3722, !tbaa !1845
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 18, !dbg !3723
  %9 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer, align 8, !dbg !3723, !tbaa !2817
  %cmp = icmp ne %struct.PyBufferProcs* %9, null, !dbg !3724
  br i1 %cmp, label %land.lhs.true, label %if.then, !dbg !3725

land.lhs.true:                                    ; preds = %entry
  %10 = load %struct._object*, %struct._object** %dest.addr, align 8, !dbg !3726, !tbaa !1829
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !3728
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !3728, !tbaa !1845
  %tp_as_buffer2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 18, !dbg !3729
  %12 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer2, align 8, !dbg !3729, !tbaa !2817
  %bf_getbuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %12, i32 0, i32 0, !dbg !3730
  %13 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer, align 8, !dbg !3730, !tbaa !2826
  %cmp3 = icmp ne i32 (%struct._object*, %struct.bufferinfo*, i32)* %13, null, !dbg !3731
  br i1 %cmp3, label %lor.lhs.false, label %if.then, !dbg !3732

lor.lhs.false:                                    ; preds = %land.lhs.true
  %14 = load %struct._object*, %struct._object** %src.addr, align 8, !dbg !3733, !tbaa !1829
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1, !dbg !3734
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8, !dbg !3734, !tbaa !1845
  %tp_as_buffer5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 18, !dbg !3735
  %16 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer5, align 8, !dbg !3735, !tbaa !2817
  %cmp6 = icmp ne %struct.PyBufferProcs* %16, null, !dbg !3736
  br i1 %cmp6, label %land.lhs.true.7, label %if.then, !dbg !3737

land.lhs.true.7:                                  ; preds = %lor.lhs.false
  %17 = load %struct._object*, %struct._object** %src.addr, align 8, !dbg !3738, !tbaa !1829
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1, !dbg !3739
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8, !dbg !3739, !tbaa !1845
  %tp_as_buffer9 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 18, !dbg !3740
  %19 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer9, align 8, !dbg !3740, !tbaa !2817
  %bf_getbuffer10 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %19, i32 0, i32 0, !dbg !3741
  %20 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer10, align 8, !dbg !3741, !tbaa !2826
  %cmp11 = icmp ne i32 (%struct._object*, %struct.bufferinfo*, i32)* %20, null, !dbg !3742
  br i1 %cmp11, label %if.end, label %if.then, !dbg !3743

if.then:                                          ; preds = %land.lhs.true.7, %lor.lhs.false, %land.lhs.true, %entry
  %21 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !3744, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %21, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.11, i32 0, i32 0)), !dbg !3746
  store i32 -1, i32* %retval, !dbg !3747
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3747

if.end:                                           ; preds = %land.lhs.true.7
  %22 = load %struct._object*, %struct._object** %dest.addr, align 8, !dbg !3748, !tbaa !1829
  %call = call i32 @PyObject_GetBuffer(%struct._object* %22, %struct.bufferinfo* %view_dest, i32 285), !dbg !3750
  %cmp12 = icmp ne i32 %call, 0, !dbg !3751
  br i1 %cmp12, label %if.then.13, label %if.end.14, !dbg !3752

if.then.13:                                       ; preds = %if.end
  store i32 -1, i32* %retval, !dbg !3753
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3755

if.end.14:                                        ; preds = %if.end
  %23 = load %struct._object*, %struct._object** %src.addr, align 8, !dbg !3756, !tbaa !1829
  %call15 = call i32 @PyObject_GetBuffer(%struct._object* %23, %struct.bufferinfo* %view_src, i32 284), !dbg !3758
  %cmp16 = icmp ne i32 %call15, 0, !dbg !3759
  br i1 %cmp16, label %if.then.17, label %if.end.18, !dbg !3760

if.then.17:                                       ; preds = %if.end.14
  call void @PyBuffer_Release(%struct.bufferinfo* %view_dest), !dbg !3761
  store i32 -1, i32* %retval, !dbg !3763
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3763

if.end.18:                                        ; preds = %if.end.14
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view_dest, i32 0, i32 2, !dbg !3764
  %24 = load i64, i64* %len, align 8, !dbg !3764, !tbaa !2849
  %len19 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view_src, i32 0, i32 2, !dbg !3766
  %25 = load i64, i64* %len19, align 8, !dbg !3766, !tbaa !2849
  %cmp20 = icmp slt i64 %24, %25, !dbg !3767
  br i1 %cmp20, label %if.then.21, label %if.end.22, !dbg !3768

if.then.21:                                       ; preds = %if.end.18
  %26 = load %struct._object*, %struct._object** @PyExc_BufferError, align 8, !dbg !3769, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %26, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.12, i32 0, i32 0)), !dbg !3771
  call void @PyBuffer_Release(%struct.bufferinfo* %view_dest), !dbg !3772
  call void @PyBuffer_Release(%struct.bufferinfo* %view_src), !dbg !3773
  store i32 -1, i32* %retval, !dbg !3774
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3774

if.end.22:                                        ; preds = %if.end.18
  %call23 = call i32 @PyBuffer_IsContiguous(%struct.bufferinfo* %view_dest, i8 signext 67), !dbg !3775
  %tobool = icmp ne i32 %call23, 0, !dbg !3775
  br i1 %tobool, label %land.lhs.true.24, label %lor.lhs.false.27, !dbg !3777

land.lhs.true.24:                                 ; preds = %if.end.22
  %call25 = call i32 @PyBuffer_IsContiguous(%struct.bufferinfo* %view_src, i8 signext 67), !dbg !3778
  %tobool26 = icmp ne i32 %call25, 0, !dbg !3778
  br i1 %tobool26, label %if.then.33, label %lor.lhs.false.27, !dbg !3779

lor.lhs.false.27:                                 ; preds = %land.lhs.true.24, %if.end.22
  %call28 = call i32 @PyBuffer_IsContiguous(%struct.bufferinfo* %view_dest, i8 signext 70), !dbg !3780
  %tobool29 = icmp ne i32 %call28, 0, !dbg !3780
  br i1 %tobool29, label %land.lhs.true.30, label %if.end.36, !dbg !3781

land.lhs.true.30:                                 ; preds = %lor.lhs.false.27
  %call31 = call i32 @PyBuffer_IsContiguous(%struct.bufferinfo* %view_src, i8 signext 70), !dbg !3782
  %tobool32 = icmp ne i32 %call31, 0, !dbg !3782
  br i1 %tobool32, label %if.then.33, label %if.end.36, !dbg !3783

if.then.33:                                       ; preds = %land.lhs.true.30, %land.lhs.true.24
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view_dest, i32 0, i32 0, !dbg !3784
  %27 = load i8*, i8** %buf, align 8, !dbg !3784, !tbaa !2844
  %buf34 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view_src, i32 0, i32 0, !dbg !3786
  %28 = load i8*, i8** %buf34, align 8, !dbg !3786, !tbaa !2844
  %len35 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view_src, i32 0, i32 2, !dbg !3787
  %29 = load i64, i64* %len35, align 8, !dbg !3787, !tbaa !2849
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 %29, i32 1, i1 false), !dbg !3788
  call void @PyBuffer_Release(%struct.bufferinfo* %view_dest), !dbg !3789
  call void @PyBuffer_Release(%struct.bufferinfo* %view_src), !dbg !3790
  store i32 0, i32* %retval, !dbg !3791
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3791

if.end.36:                                        ; preds = %land.lhs.true.30, %lor.lhs.false.27
  %ndim = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view_src, i32 0, i32 5, !dbg !3792
  %30 = load i32, i32* %ndim, align 4, !dbg !3792, !tbaa !3299
  %conv = sext i32 %30 to i64, !dbg !3793
  %mul = mul i64 8, %conv, !dbg !3794
  %call37 = call i8* @PyMem_Malloc(i64 %mul), !dbg !3795
  %31 = bitcast i8* %call37 to i64*, !dbg !3796
  store i64* %31, i64** %indices, align 8, !dbg !3797, !tbaa !1829
  %32 = load i64*, i64** %indices, align 8, !dbg !3798, !tbaa !1829
  %cmp38 = icmp eq i64* %32, null, !dbg !3800
  br i1 %cmp38, label %if.then.40, label %if.end.42, !dbg !3801

if.then.40:                                       ; preds = %if.end.36
  %call41 = call %struct._object* @PyErr_NoMemory(), !dbg !3802
  call void @PyBuffer_Release(%struct.bufferinfo* %view_dest), !dbg !3804
  call void @PyBuffer_Release(%struct.bufferinfo* %view_src), !dbg !3805
  store i32 -1, i32* %retval, !dbg !3806
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3806

if.end.42:                                        ; preds = %if.end.36
  store i32 0, i32* %k, align 4, !dbg !3807, !tbaa !2764
  br label %for.cond, !dbg !3809

for.cond:                                         ; preds = %for.inc, %if.end.42
  %33 = load i32, i32* %k, align 4, !dbg !3810, !tbaa !2764
  %ndim43 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view_src, i32 0, i32 5, !dbg !3814
  %34 = load i32, i32* %ndim43, align 4, !dbg !3814, !tbaa !3299
  %cmp44 = icmp slt i32 %33, %34, !dbg !3815
  br i1 %cmp44, label %for.body, label %for.end, !dbg !3816

for.body:                                         ; preds = %for.cond
  %35 = load i32, i32* %k, align 4, !dbg !3817, !tbaa !2764
  %idxprom = sext i32 %35 to i64, !dbg !3819
  %36 = load i64*, i64** %indices, align 8, !dbg !3819, !tbaa !1829
  %arrayidx = getelementptr i64, i64* %36, i64 %idxprom, !dbg !3819
  store i64 0, i64* %arrayidx, align 8, !dbg !3820, !tbaa !1963
  br label %for.inc, !dbg !3821

for.inc:                                          ; preds = %for.body
  %37 = load i32, i32* %k, align 4, !dbg !3822, !tbaa !2764
  %inc = add i32 %37, 1, !dbg !3822
  store i32 %inc, i32* %k, align 4, !dbg !3822, !tbaa !2764
  br label %for.cond, !dbg !3823

for.end:                                          ; preds = %for.cond
  store i64 1, i64* %elements, align 8, !dbg !3824, !tbaa !1963
  store i32 0, i32* %k, align 4, !dbg !3825, !tbaa !2764
  br label %for.cond.46, !dbg !3827

for.cond.46:                                      ; preds = %for.inc.54, %for.end
  %38 = load i32, i32* %k, align 4, !dbg !3828, !tbaa !2764
  %ndim47 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view_src, i32 0, i32 5, !dbg !3832
  %39 = load i32, i32* %ndim47, align 4, !dbg !3832, !tbaa !3299
  %cmp48 = icmp slt i32 %38, %39, !dbg !3833
  br i1 %cmp48, label %for.body.50, label %for.end.56, !dbg !3834

for.body.50:                                      ; preds = %for.cond.46
  %40 = load i32, i32* %k, align 4, !dbg !3835, !tbaa !2764
  %idxprom51 = sext i32 %40 to i64, !dbg !3837
  %shape = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view_src, i32 0, i32 7, !dbg !3838
  %41 = load i64*, i64** %shape, align 8, !dbg !3838, !tbaa !3326
  %arrayidx52 = getelementptr i64, i64* %41, i64 %idxprom51, !dbg !3837
  %42 = load i64, i64* %arrayidx52, align 8, !dbg !3837, !tbaa !1963
  %43 = load i64, i64* %elements, align 8, !dbg !3839, !tbaa !1963
  %mul53 = mul i64 %43, %42, !dbg !3839
  store i64 %mul53, i64* %elements, align 8, !dbg !3839, !tbaa !1963
  br label %for.inc.54, !dbg !3840

for.inc.54:                                       ; preds = %for.body.50
  %44 = load i32, i32* %k, align 4, !dbg !3841, !tbaa !2764
  %inc55 = add i32 %44, 1, !dbg !3841
  store i32 %inc55, i32* %k, align 4, !dbg !3841, !tbaa !2764
  br label %for.cond.46, !dbg !3842

for.end.56:                                       ; preds = %for.cond.46
  br label %while.cond, !dbg !3843

while.cond:                                       ; preds = %while.body, %for.end.56
  %45 = load i64, i64* %elements, align 8, !dbg !3844, !tbaa !1963
  %dec = add i64 %45, -1, !dbg !3844
  store i64 %dec, i64* %elements, align 8, !dbg !3844, !tbaa !1963
  %tobool57 = icmp ne i64 %45, 0, !dbg !3843
  br i1 %tobool57, label %while.body, label %while.end, !dbg !3843

while.body:                                       ; preds = %while.cond
  %ndim58 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view_src, i32 0, i32 5, !dbg !3847
  %46 = load i32, i32* %ndim58, align 4, !dbg !3847, !tbaa !3299
  %47 = load i64*, i64** %indices, align 8, !dbg !3849, !tbaa !1829
  %shape59 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view_src, i32 0, i32 7, !dbg !3850
  %48 = load i64*, i64** %shape59, align 8, !dbg !3850, !tbaa !3326
  call void @_Py_add_one_to_index_C(i32 %46, i64* %47, i64* %48), !dbg !3851
  %49 = load i64*, i64** %indices, align 8, !dbg !3852, !tbaa !1829
  %call60 = call i8* @PyBuffer_GetPointer(%struct.bufferinfo* %view_dest, i64* %49), !dbg !3853
  store i8* %call60, i8** %dptr, align 8, !dbg !3854, !tbaa !1829
  %50 = load i64*, i64** %indices, align 8, !dbg !3855, !tbaa !1829
  %call61 = call i8* @PyBuffer_GetPointer(%struct.bufferinfo* %view_src, i64* %50), !dbg !3856
  store i8* %call61, i8** %sptr, align 8, !dbg !3857, !tbaa !1829
  %51 = load i8*, i8** %dptr, align 8, !dbg !3858, !tbaa !1829
  %52 = load i8*, i8** %sptr, align 8, !dbg !3859, !tbaa !1829
  %itemsize = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view_src, i32 0, i32 3, !dbg !3860
  %53 = load i64, i64* %itemsize, align 8, !dbg !3860, !tbaa !3316
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %51, i8* %52, i64 %53, i32 1, i1 false), !dbg !3861
  br label %while.cond, !dbg !3843

while.end:                                        ; preds = %while.cond
  %54 = load i64*, i64** %indices, align 8, !dbg !3862, !tbaa !1829
  %55 = bitcast i64* %54 to i8*, !dbg !3862
  call void @PyMem_Free(i8* %55), !dbg !3863
  call void @PyBuffer_Release(%struct.bufferinfo* %view_dest), !dbg !3864
  call void @PyBuffer_Release(%struct.bufferinfo* %view_src), !dbg !3865
  store i32 0, i32* %retval, !dbg !3866
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3866

cleanup:                                          ; preds = %while.end, %if.then.40, %if.then.33, %if.then.21, %if.then.17, %if.then.13, %if.then
  %56 = bitcast i8** %sptr to i8*, !dbg !3867
  call void @llvm.lifetime.end(i64 8, i8* %56) #2, !dbg !3867
  %57 = bitcast i8** %dptr to i8*, !dbg !3867
  call void @llvm.lifetime.end(i64 8, i8* %57) #2, !dbg !3867
  %58 = bitcast i64* %elements to i8*, !dbg !3867
  call void @llvm.lifetime.end(i64 8, i8* %58) #2, !dbg !3867
  %59 = bitcast i64** %indices to i8*, !dbg !3867
  call void @llvm.lifetime.end(i64 8, i8* %59) #2, !dbg !3867
  %60 = bitcast i32* %k to i8*, !dbg !3867
  call void @llvm.lifetime.end(i64 4, i8* %60) #2, !dbg !3867
  %61 = bitcast %struct.bufferinfo* %view_src to i8*, !dbg !3867
  call void @llvm.lifetime.end(i64 80, i8* %61) #2, !dbg !3867
  %62 = bitcast %struct.bufferinfo* %view_dest to i8*, !dbg !3867
  call void @llvm.lifetime.end(i64 80, i8* %62) #2, !dbg !3867
  %63 = load i32, i32* %retval, !dbg !3867
  ret i32 %63, !dbg !3867
}

; Function Attrs: nounwind uwtable
define void @PyBuffer_FillContiguousStrides(i32 %nd, i64* %shape, i64* %strides, i32 %itemsize, i8 signext %fort) #0 {
entry:
  %nd.addr = alloca i32, align 4
  %shape.addr = alloca i64*, align 8
  %strides.addr = alloca i64*, align 8
  %itemsize.addr = alloca i32, align 4
  %fort.addr = alloca i8, align 1
  %k = alloca i32, align 4
  %sd = alloca i64, align 8
  store i32 %nd, i32* %nd.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %nd.addr, metadata !653, metadata !1833), !dbg !3868
  store i64* %shape, i64** %shape.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i64** %shape.addr, metadata !654, metadata !1833), !dbg !3869
  store i64* %strides, i64** %strides.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i64** %strides.addr, metadata !655, metadata !1833), !dbg !3870
  store i32 %itemsize, i32* %itemsize.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %itemsize.addr, metadata !656, metadata !1833), !dbg !3871
  store i8 %fort, i8* %fort.addr, align 1, !tbaa !3250
  call void @llvm.dbg.declare(metadata i8* %fort.addr, metadata !657, metadata !1833), !dbg !3872
  %0 = bitcast i32* %k to i8*, !dbg !3873
  call void @llvm.lifetime.start(i64 4, i8* %0) #2, !dbg !3873
  call void @llvm.dbg.declare(metadata i32* %k, metadata !658, metadata !1833), !dbg !3874
  %1 = bitcast i64* %sd to i8*, !dbg !3875
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !3875
  call void @llvm.dbg.declare(metadata i64* %sd, metadata !659, metadata !1833), !dbg !3876
  %2 = load i32, i32* %itemsize.addr, align 4, !dbg !3877, !tbaa !2764
  %conv = sext i32 %2 to i64, !dbg !3877
  store i64 %conv, i64* %sd, align 8, !dbg !3878, !tbaa !1963
  %3 = load i8, i8* %fort.addr, align 1, !dbg !3879, !tbaa !3250
  %conv1 = sext i8 %3 to i32, !dbg !3879
  %cmp = icmp eq i32 %conv1, 70, !dbg !3881
  br i1 %cmp, label %if.then, label %if.else, !dbg !3882

if.then:                                          ; preds = %entry
  store i32 0, i32* %k, align 4, !dbg !3883, !tbaa !2764
  br label %for.cond, !dbg !3886

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load i32, i32* %k, align 4, !dbg !3887, !tbaa !2764
  %5 = load i32, i32* %nd.addr, align 4, !dbg !3891, !tbaa !2764
  %cmp3 = icmp slt i32 %4, %5, !dbg !3892
  br i1 %cmp3, label %for.body, label %for.end, !dbg !3893

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %sd, align 8, !dbg !3894, !tbaa !1963
  %7 = load i32, i32* %k, align 4, !dbg !3896, !tbaa !2764
  %idxprom = sext i32 %7 to i64, !dbg !3897
  %8 = load i64*, i64** %strides.addr, align 8, !dbg !3897, !tbaa !1829
  %arrayidx = getelementptr i64, i64* %8, i64 %idxprom, !dbg !3897
  store i64 %6, i64* %arrayidx, align 8, !dbg !3898, !tbaa !1963
  %9 = load i32, i32* %k, align 4, !dbg !3899, !tbaa !2764
  %idxprom5 = sext i32 %9 to i64, !dbg !3900
  %10 = load i64*, i64** %shape.addr, align 8, !dbg !3900, !tbaa !1829
  %arrayidx6 = getelementptr i64, i64* %10, i64 %idxprom5, !dbg !3900
  %11 = load i64, i64* %arrayidx6, align 8, !dbg !3900, !tbaa !1963
  %12 = load i64, i64* %sd, align 8, !dbg !3901, !tbaa !1963
  %mul = mul i64 %12, %11, !dbg !3901
  store i64 %mul, i64* %sd, align 8, !dbg !3901, !tbaa !1963
  br label %for.inc, !dbg !3902

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %k, align 4, !dbg !3903, !tbaa !2764
  %inc = add i32 %13, 1, !dbg !3903
  store i32 %inc, i32* %k, align 4, !dbg !3903, !tbaa !2764
  br label %for.cond, !dbg !3904

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !3905

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %nd.addr, align 4, !dbg !3906, !tbaa !2764
  %sub = sub i32 %14, 1, !dbg !3909
  store i32 %sub, i32* %k, align 4, !dbg !3910, !tbaa !2764
  br label %for.cond.7, !dbg !3911

for.cond.7:                                       ; preds = %for.inc.16, %if.else
  %15 = load i32, i32* %k, align 4, !dbg !3912, !tbaa !2764
  %cmp8 = icmp sge i32 %15, 0, !dbg !3916
  br i1 %cmp8, label %for.body.10, label %for.end.17, !dbg !3917

for.body.10:                                      ; preds = %for.cond.7
  %16 = load i64, i64* %sd, align 8, !dbg !3918, !tbaa !1963
  %17 = load i32, i32* %k, align 4, !dbg !3920, !tbaa !2764
  %idxprom11 = sext i32 %17 to i64, !dbg !3921
  %18 = load i64*, i64** %strides.addr, align 8, !dbg !3921, !tbaa !1829
  %arrayidx12 = getelementptr i64, i64* %18, i64 %idxprom11, !dbg !3921
  store i64 %16, i64* %arrayidx12, align 8, !dbg !3922, !tbaa !1963
  %19 = load i32, i32* %k, align 4, !dbg !3923, !tbaa !2764
  %idxprom13 = sext i32 %19 to i64, !dbg !3924
  %20 = load i64*, i64** %shape.addr, align 8, !dbg !3924, !tbaa !1829
  %arrayidx14 = getelementptr i64, i64* %20, i64 %idxprom13, !dbg !3924
  %21 = load i64, i64* %arrayidx14, align 8, !dbg !3924, !tbaa !1963
  %22 = load i64, i64* %sd, align 8, !dbg !3925, !tbaa !1963
  %mul15 = mul i64 %22, %21, !dbg !3925
  store i64 %mul15, i64* %sd, align 8, !dbg !3925, !tbaa !1963
  br label %for.inc.16, !dbg !3926

for.inc.16:                                       ; preds = %for.body.10
  %23 = load i32, i32* %k, align 4, !dbg !3927, !tbaa !2764
  %dec = add i32 %23, -1, !dbg !3927
  store i32 %dec, i32* %k, align 4, !dbg !3927, !tbaa !2764
  br label %for.cond.7, !dbg !3928

for.end.17:                                       ; preds = %for.cond.7
  br label %if.end

if.end:                                           ; preds = %for.end.17, %for.end
  %24 = bitcast i64* %sd to i8*, !dbg !3929
  call void @llvm.lifetime.end(i64 8, i8* %24) #2, !dbg !3929
  %25 = bitcast i32* %k to i8*, !dbg !3929
  call void @llvm.lifetime.end(i64 4, i8* %25) #2, !dbg !3929
  ret void, !dbg !3929
}

; Function Attrs: nounwind uwtable
define i32 @PyBuffer_FillInfo(%struct.bufferinfo* %view, %struct._object* %obj, i8* %buf, i64 %len, i32 %readonly, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %view.addr = alloca %struct.bufferinfo*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %readonly.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store %struct.bufferinfo* %view, %struct.bufferinfo** %view.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %view.addr, metadata !664, metadata !1833), !dbg !3930
  store %struct._object* %obj, %struct._object** %obj.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %obj.addr, metadata !665, metadata !1833), !dbg !3931
  store i8* %buf, i8** %buf.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !666, metadata !1833), !dbg !3932
  store i64 %len, i64* %len.addr, align 8, !tbaa !1963
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !667, metadata !1833), !dbg !3933
  store i32 %readonly, i32* %readonly.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %readonly.addr, metadata !668, metadata !1833), !dbg !3934
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !669, metadata !1833), !dbg !3935
  %0 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3936, !tbaa !1829
  %cmp = icmp eq %struct.bufferinfo* %0, null, !dbg !3938
  br i1 %cmp, label %if.then, label %if.end, !dbg !3939

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !3940
  br label %return, !dbg !3940

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !3942, !tbaa !2764
  %and = and i32 %1, 1, !dbg !3944
  %cmp1 = icmp eq i32 %and, 1, !dbg !3945
  br i1 %cmp1, label %land.lhs.true, label %if.end.4, !dbg !3946

land.lhs.true:                                    ; preds = %if.end
  %2 = load i32, i32* %readonly.addr, align 4, !dbg !3947, !tbaa !2764
  %cmp2 = icmp eq i32 %2, 1, !dbg !3948
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !3949

if.then.3:                                        ; preds = %land.lhs.true
  %3 = load %struct._object*, %struct._object** @PyExc_BufferError, align 8, !dbg !3950, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i32 0, i32 0)), !dbg !3952
  store i32 -1, i32* %retval, !dbg !3953
  br label %return, !dbg !3953

if.end.4:                                         ; preds = %land.lhs.true, %if.end
  %4 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3954, !tbaa !1829
  %5 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3955, !tbaa !1829
  %obj5 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %5, i32 0, i32 1, !dbg !3956
  store %struct._object* %4, %struct._object** %obj5, align 8, !dbg !3957, !tbaa !2867
  %6 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3958, !tbaa !1829
  %tobool = icmp ne %struct._object* %6, null, !dbg !3958
  br i1 %tobool, label %if.then.6, label %if.end.7, !dbg !3960

if.then.6:                                        ; preds = %if.end.4
  %7 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !3961, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0, !dbg !3962
  %8 = load i64, i64* %ob_refcnt, align 8, !dbg !3963, !tbaa !1853
  %inc = add i64 %8, 1, !dbg !3963
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !3963, !tbaa !1853
  br label %if.end.7, !dbg !3964

if.end.7:                                         ; preds = %if.then.6, %if.end.4
  %9 = load i8*, i8** %buf.addr, align 8, !dbg !3965, !tbaa !1829
  %10 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3966, !tbaa !1829
  %buf8 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %10, i32 0, i32 0, !dbg !3967
  store i8* %9, i8** %buf8, align 8, !dbg !3968, !tbaa !2844
  %11 = load i64, i64* %len.addr, align 8, !dbg !3969, !tbaa !1963
  %12 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3970, !tbaa !1829
  %len9 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %12, i32 0, i32 2, !dbg !3971
  store i64 %11, i64* %len9, align 8, !dbg !3972, !tbaa !2849
  %13 = load i32, i32* %readonly.addr, align 4, !dbg !3973, !tbaa !2764
  %14 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3974, !tbaa !1829
  %readonly10 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %14, i32 0, i32 4, !dbg !3975
  store i32 %13, i32* %readonly10, align 4, !dbg !3976, !tbaa !3977
  %15 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3978, !tbaa !1829
  %itemsize = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %15, i32 0, i32 3, !dbg !3979
  store i64 1, i64* %itemsize, align 8, !dbg !3980, !tbaa !3316
  %16 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3981, !tbaa !1829
  %format = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %16, i32 0, i32 6, !dbg !3982
  store i8* null, i8** %format, align 8, !dbg !3983, !tbaa !3984
  %17 = load i32, i32* %flags.addr, align 4, !dbg !3985, !tbaa !2764
  %and11 = and i32 %17, 4, !dbg !3987
  %cmp12 = icmp eq i32 %and11, 4, !dbg !3988
  br i1 %cmp12, label %if.then.13, label %if.end.15, !dbg !3989

if.then.13:                                       ; preds = %if.end.7
  %18 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3990, !tbaa !1829
  %format14 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %18, i32 0, i32 6, !dbg !3991
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0), i8** %format14, align 8, !dbg !3992, !tbaa !3984
  br label %if.end.15, !dbg !3990

if.end.15:                                        ; preds = %if.then.13, %if.end.7
  %19 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3993, !tbaa !1829
  %ndim = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %19, i32 0, i32 5, !dbg !3994
  store i32 1, i32* %ndim, align 4, !dbg !3995, !tbaa !3299
  %20 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !3996, !tbaa !1829
  %shape = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %20, i32 0, i32 7, !dbg !3997
  store i64* null, i64** %shape, align 8, !dbg !3998, !tbaa !3326
  %21 = load i32, i32* %flags.addr, align 4, !dbg !3999, !tbaa !2764
  %and16 = and i32 %21, 8, !dbg !4001
  %cmp17 = icmp eq i32 %and16, 8, !dbg !4002
  br i1 %cmp17, label %if.then.18, label %if.end.21, !dbg !4003

if.then.18:                                       ; preds = %if.end.15
  %22 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !4004, !tbaa !1829
  %len19 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %22, i32 0, i32 2, !dbg !4005
  %23 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !4006, !tbaa !1829
  %shape20 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %23, i32 0, i32 7, !dbg !4007
  store i64* %len19, i64** %shape20, align 8, !dbg !4008, !tbaa !3326
  br label %if.end.21, !dbg !4006

if.end.21:                                        ; preds = %if.then.18, %if.end.15
  %24 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !4009, !tbaa !1829
  %strides = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %24, i32 0, i32 8, !dbg !4010
  store i64* null, i64** %strides, align 8, !dbg !4011, !tbaa !3308
  %25 = load i32, i32* %flags.addr, align 4, !dbg !4012, !tbaa !2764
  %and22 = and i32 %25, 24, !dbg !4014
  %cmp23 = icmp eq i32 %and22, 24, !dbg !4015
  br i1 %cmp23, label %if.then.24, label %if.end.27, !dbg !4016

if.then.24:                                       ; preds = %if.end.21
  %26 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !4017, !tbaa !1829
  %itemsize25 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %26, i32 0, i32 3, !dbg !4018
  %27 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !4019, !tbaa !1829
  %strides26 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %27, i32 0, i32 8, !dbg !4020
  store i64* %itemsize25, i64** %strides26, align 8, !dbg !4021, !tbaa !3308
  br label %if.end.27, !dbg !4019

if.end.27:                                        ; preds = %if.then.24, %if.end.21
  %28 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !4022, !tbaa !1829
  %suboffsets = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %28, i32 0, i32 9, !dbg !4023
  store i64* null, i64** %suboffsets, align 8, !dbg !4024, !tbaa !3255
  %29 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8, !dbg !4025, !tbaa !1829
  %internal = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %29, i32 0, i32 10, !dbg !4026
  store i8* null, i8** %internal, align 8, !dbg !4027, !tbaa !4028
  store i32 0, i32* %retval, !dbg !4029
  br label %return, !dbg !4029

return:                                           ; preds = %if.end.27, %if.then.3, %if.then
  %30 = load i32, i32* %retval, !dbg !4030
  ret i32 %30, !dbg !4030
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyObject_Format(%struct._object* %obj, %struct._object* %format_spec) #0 {
entry:
  %obj.addr = alloca %struct._object*, align 8
  %format_spec.addr = alloca %struct._object*, align 8
  %meth = alloca %struct._object*, align 8
  %empty = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp19 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp35 = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %obj.addr, metadata !683, metadata !1833), !dbg !4031
  store %struct._object* %format_spec, %struct._object** %format_spec.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %format_spec.addr, metadata !684, metadata !1833), !dbg !4032
  %0 = bitcast %struct._object** %meth to i8*, !dbg !4033
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !4033
  call void @llvm.dbg.declare(metadata %struct._object** %meth, metadata !685, metadata !1833), !dbg !4034
  %1 = bitcast %struct._object** %empty to i8*, !dbg !4035
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !4035
  call void @llvm.dbg.declare(metadata %struct._object** %empty, metadata !686, metadata !1833), !dbg !4036
  store %struct._object* null, %struct._object** %empty, align 8, !dbg !4036, !tbaa !1829
  %2 = bitcast %struct._object** %result to i8*, !dbg !4037
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !4037
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !687, metadata !1833), !dbg !4038
  store %struct._object* null, %struct._object** %result, align 8, !dbg !4038, !tbaa !1829
  %3 = load %struct._object*, %struct._object** %format_spec.addr, align 8, !dbg !4039, !tbaa !1829
  %cmp = icmp eq %struct._object* %3, null, !dbg !4041
  br i1 %cmp, label %if.then, label %if.end, !dbg !4042

if.then:                                          ; preds = %entry
  %call = call %struct._object* @PyUnicode_New(i64 0, i32 0), !dbg !4043
  store %struct._object* %call, %struct._object** %empty, align 8, !dbg !4045, !tbaa !1829
  %4 = load %struct._object*, %struct._object** %empty, align 8, !dbg !4046, !tbaa !1829
  store %struct._object* %4, %struct._object** %format_spec.addr, align 8, !dbg !4047, !tbaa !1829
  br label %if.end, !dbg !4048

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !4049, !tbaa !1829
  %call1 = call %struct._object* @_PyObject_LookupSpecial(%struct._object* %5, %struct._Py_Identifier* @PyObject_Format.PyId___format__), !dbg !4050
  store %struct._object* %call1, %struct._object** %meth, align 8, !dbg !4051, !tbaa !1829
  %6 = load %struct._object*, %struct._object** %meth, align 8, !dbg !4052, !tbaa !1829
  %cmp2 = icmp eq %struct._object* %6, null, !dbg !4054
  br i1 %cmp2, label %if.then.3, label %if.end.8, !dbg !4055

if.then.3:                                        ; preds = %if.end
  %call4 = call %struct._object* @PyErr_Occurred(), !dbg !4056
  %tobool = icmp ne %struct._object* %call4, null, !dbg !4056
  br i1 %tobool, label %if.end.7, label %if.then.5, !dbg !4059

if.then.5:                                        ; preds = %if.then.3
  %7 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !4060, !tbaa !1829
  %8 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !4061, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1, !dbg !4062
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4062, !tbaa !1845
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 1, !dbg !4063
  %10 = load i8*, i8** %tp_name, align 8, !dbg !4063, !tbaa !2094
  %call6 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %7, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.16, i32 0, i32 0), i8* %10), !dbg !4064
  br label %if.end.7, !dbg !4064

if.end.7:                                         ; preds = %if.then.5, %if.then.3
  br label %done, !dbg !4065

if.end.8:                                         ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %meth, align 8, !dbg !4066, !tbaa !1829
  %12 = load %struct._object*, %struct._object** %format_spec.addr, align 8, !dbg !4067, !tbaa !1829
  %call9 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %11, %struct._object* %12, i8* null), !dbg !4068
  store %struct._object* %call9, %struct._object** %result, align 8, !dbg !4069, !tbaa !1829
  br label %do.body, !dbg !4070

do.body:                                          ; preds = %if.end.8
  %13 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4071
  call void @llvm.lifetime.start(i64 8, i8* %13) #2, !dbg !4071
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !688, metadata !1833), !dbg !4073
  %14 = load %struct._object*, %struct._object** %meth, align 8, !dbg !4074, !tbaa !1829
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8, !dbg !4073, !tbaa !1829
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4075, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0, !dbg !4077
  %16 = load i64, i64* %ob_refcnt, align 8, !dbg !4078, !tbaa !1853
  %dec = add i64 %16, -1, !dbg !4078
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4078, !tbaa !1853
  %cmp10 = icmp ne i64 %dec, 0, !dbg !4079
  br i1 %cmp10, label %if.then.11, label %if.else, !dbg !4080

if.then.11:                                       ; preds = %do.body
  br label %if.end.13, !dbg !4081

if.else:                                          ; preds = %do.body
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4083, !tbaa !1829
  %ob_type12 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1, !dbg !4085
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type12, align 8, !dbg !4085, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4, !dbg !4086
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4086, !tbaa !2033
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4087, !tbaa !1829
  call void %19(%struct._object* %20), !dbg !4088
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.11
  %21 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4089
  call void @llvm.lifetime.end(i64 8, i8* %21) #2, !dbg !4089
  br label %do.cond, !dbg !4091

do.cond:                                          ; preds = %if.end.13
  br label %do.end, !dbg !4092

do.end:                                           ; preds = %do.cond
  %22 = load %struct._object*, %struct._object** %result, align 8, !dbg !4094, !tbaa !1829
  %tobool14 = icmp ne %struct._object* %22, null, !dbg !4094
  br i1 %tobool14, label %land.lhs.true, label %if.end.30, !dbg !4095

land.lhs.true:                                    ; preds = %do.end
  %23 = load %struct._object*, %struct._object** %result, align 8, !dbg !4096, !tbaa !1829
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1, !dbg !4098
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8, !dbg !4098, !tbaa !1845
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 19, !dbg !4099
  %25 = load i64, i64* %tp_flags, align 8, !dbg !4099, !tbaa !2086
  %and = and i64 %25, 268435456, !dbg !4100
  %cmp16 = icmp ne i64 %and, 0, !dbg !4101
  br i1 %cmp16, label %if.end.30, label %if.then.17, !dbg !4102

if.then.17:                                       ; preds = %land.lhs.true
  %26 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !4103, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %26, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.17, i32 0, i32 0)), !dbg !4104
  br label %do.body.18, !dbg !4105

do.body.18:                                       ; preds = %if.then.17
  %27 = bitcast %struct._object** %_py_decref_tmp19 to i8*, !dbg !4106
  call void @llvm.lifetime.start(i64 8, i8* %27) #2, !dbg !4106
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp19, metadata !690, metadata !1833), !dbg !4108
  %28 = load %struct._object*, %struct._object** %result, align 8, !dbg !4109, !tbaa !1829
  store %struct._object* %28, %struct._object** %_py_decref_tmp19, align 8, !dbg !4108, !tbaa !1829
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8, !dbg !4110, !tbaa !1829
  %ob_refcnt20 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0, !dbg !4112
  %30 = load i64, i64* %ob_refcnt20, align 8, !dbg !4113, !tbaa !1853
  %dec21 = add i64 %30, -1, !dbg !4113
  store i64 %dec21, i64* %ob_refcnt20, align 8, !dbg !4113, !tbaa !1853
  %cmp22 = icmp ne i64 %dec21, 0, !dbg !4114
  br i1 %cmp22, label %if.then.23, label %if.else.24, !dbg !4115

if.then.23:                                       ; preds = %do.body.18
  br label %if.end.27, !dbg !4116

if.else.24:                                       ; preds = %do.body.18
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8, !dbg !4118, !tbaa !1829
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1, !dbg !4120
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8, !dbg !4120, !tbaa !1845
  %tp_dealloc26 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4, !dbg !4121
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc26, align 8, !dbg !4121, !tbaa !2033
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8, !dbg !4122, !tbaa !1829
  call void %33(%struct._object* %34), !dbg !4123
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.24, %if.then.23
  %35 = bitcast %struct._object** %_py_decref_tmp19 to i8*, !dbg !4124
  call void @llvm.lifetime.end(i64 8, i8* %35) #2, !dbg !4124
  br label %do.cond.28, !dbg !4126

do.cond.28:                                       ; preds = %if.end.27
  br label %do.end.29, !dbg !4127

do.end.29:                                        ; preds = %do.cond.28
  store %struct._object* null, %struct._object** %result, align 8, !dbg !4129, !tbaa !1829
  br label %done, !dbg !4130

if.end.30:                                        ; preds = %land.lhs.true, %do.end
  br label %done, !dbg !4131

done:                                             ; preds = %if.end.30, %do.end.29, %if.end.7
  br label %do.body.31, !dbg !4134

do.body.31:                                       ; preds = %done
  %36 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !4135
  call void @llvm.lifetime.start(i64 8, i8* %36) #2, !dbg !4135
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !694, metadata !1833), !dbg !4137
  %37 = load %struct._object*, %struct._object** %empty, align 8, !dbg !4138, !tbaa !1829
  store %struct._object* %37, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4137, !tbaa !1829
  %38 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4139, !tbaa !1829
  %cmp32 = icmp ne %struct._object* %38, null, !dbg !4140
  br i1 %cmp32, label %if.then.33, label %if.end.46, !dbg !4141

if.then.33:                                       ; preds = %do.body.31
  br label %do.body.34, !dbg !4142

do.body.34:                                       ; preds = %if.then.33
  %39 = bitcast %struct._object** %_py_decref_tmp35 to i8*, !dbg !4144
  call void @llvm.lifetime.start(i64 8, i8* %39) #2, !dbg !4144
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp35, metadata !696, metadata !1833), !dbg !4146
  %40 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4147, !tbaa !1829
  store %struct._object* %40, %struct._object** %_py_decref_tmp35, align 8, !dbg !4146, !tbaa !1829
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !4148, !tbaa !1829
  %ob_refcnt36 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0, !dbg !4150
  %42 = load i64, i64* %ob_refcnt36, align 8, !dbg !4151, !tbaa !1853
  %dec37 = add i64 %42, -1, !dbg !4151
  store i64 %dec37, i64* %ob_refcnt36, align 8, !dbg !4151, !tbaa !1853
  %cmp38 = icmp ne i64 %dec37, 0, !dbg !4152
  br i1 %cmp38, label %if.then.39, label %if.else.40, !dbg !4153

if.then.39:                                       ; preds = %do.body.34
  br label %if.end.43, !dbg !4154

if.else.40:                                       ; preds = %do.body.34
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !4156, !tbaa !1829
  %ob_type41 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1, !dbg !4158
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type41, align 8, !dbg !4158, !tbaa !1845
  %tp_dealloc42 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4, !dbg !4159
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc42, align 8, !dbg !4159, !tbaa !2033
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !4160, !tbaa !1829
  call void %45(%struct._object* %46), !dbg !4161
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.40, %if.then.39
  %47 = bitcast %struct._object** %_py_decref_tmp35 to i8*, !dbg !4162
  call void @llvm.lifetime.end(i64 8, i8* %47) #2, !dbg !4162
  br label %do.cond.44, !dbg !4164

do.cond.44:                                       ; preds = %if.end.43
  br label %do.end.45, !dbg !4165

do.end.45:                                        ; preds = %do.cond.44
  br label %if.end.46, !dbg !4167

if.end.46:                                        ; preds = %do.end.45, %do.body.31
  %48 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !4169
  call void @llvm.lifetime.end(i64 8, i8* %48) #2, !dbg !4169
  br label %do.cond.47, !dbg !4172

do.cond.47:                                       ; preds = %if.end.46
  br label %do.end.48, !dbg !4173

do.end.48:                                        ; preds = %do.cond.47
  %49 = load %struct._object*, %struct._object** %result, align 8, !dbg !4175, !tbaa !1829
  %50 = bitcast %struct._object** %result to i8*, !dbg !4176
  call void @llvm.lifetime.end(i64 8, i8* %50) #2, !dbg !4176
  %51 = bitcast %struct._object** %empty to i8*, !dbg !4176
  call void @llvm.lifetime.end(i64 8, i8* %51) #2, !dbg !4176
  %52 = bitcast %struct._object** %meth to i8*, !dbg !4176
  call void @llvm.lifetime.end(i64 8, i8* %52) #2, !dbg !4176
  ret %struct._object* %49, !dbg !4177
}

declare %struct._object* @PyUnicode_New(i64, i32) #3

; Function Attrs: nounwind uwtable
define i32 @PyNumber_Check(%struct._object* %o) #0 {
entry:
  %o.addr = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !701, metadata !1833), !dbg !4178
  %0 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !4179, !tbaa !1829
  %tobool = icmp ne %struct._object* %0, null, !dbg !4179
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !4180

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !4181, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !4183
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4183, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 10, !dbg !4184
  %3 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !4184, !tbaa !2261
  %tobool1 = icmp ne %struct.PyNumberMethods* %3, null, !dbg !4185
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !4186

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !4187, !tbaa !1829
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1, !dbg !4188
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8, !dbg !4188, !tbaa !1845
  %tp_as_number3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10, !dbg !4189
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number3, align 8, !dbg !4189, !tbaa !2261
  %nb_int = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %6, i32 0, i32 16, !dbg !4190
  %nb_int4 = bitcast {}** %nb_int to %struct._object* (%struct._object*)**, !dbg !4190
  %7 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_int4, align 8, !dbg !4190, !tbaa !4191
  %tobool5 = icmp ne %struct._object* (%struct._object*)* %7, null, !dbg !4187
  br i1 %tobool5, label %lor.end, label %lor.rhs, !dbg !4192

lor.rhs:                                          ; preds = %land.rhs
  %8 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !4193, !tbaa !1829
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1, !dbg !4194
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8, !dbg !4194, !tbaa !1845
  %tp_as_number7 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 10, !dbg !4195
  %10 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number7, align 8, !dbg !4195, !tbaa !2261
  %nb_float = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %10, i32 0, i32 18, !dbg !4196
  %nb_float8 = bitcast {}** %nb_float to %struct._object* (%struct._object*)**, !dbg !4196
  %11 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_float8, align 8, !dbg !4196, !tbaa !4197
  %tobool9 = icmp ne %struct._object* (%struct._object*)* %11, null, !dbg !4192
  br label %lor.end, !dbg !4192

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %12 = phi i1 [ true, %land.rhs ], [ %tobool9, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true, %entry
  %13 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %12, %lor.end ]
  %land.ext = zext i1 %13 to i32, !dbg !4198
  ret i32 %land.ext, !dbg !4201
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Or(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !704, metadata !1833), !dbg !4202
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !705, metadata !1833), !dbg !4203
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4204, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4205, !tbaa !1829
  %call = call %struct._object* @binary_op(%struct._object* %0, %struct._object* %1, i32 120, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i32 0, i32 0)), !dbg !4206
  ret %struct._object* %call, !dbg !4207
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @binary_op(%struct._object* %v, %struct._object* %w, i32 %op_slot, i8* %op_name) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %op_slot.addr = alloca i32, align 4
  %op_name.addr = alloca i8*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !1571, metadata !1833), !dbg !4208
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !1572, metadata !1833), !dbg !4209
  store i32 %op_slot, i32* %op_slot.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %op_slot.addr, metadata !1573, metadata !1833), !dbg !4210
  store i8* %op_name, i8** %op_name.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %op_name.addr, metadata !1574, metadata !1833), !dbg !4211
  %0 = bitcast %struct._object** %result to i8*, !dbg !4212
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !4212
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !1575, metadata !1833), !dbg !4213
  %1 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4214, !tbaa !1829
  %2 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4215, !tbaa !1829
  %3 = load i32, i32* %op_slot.addr, align 4, !dbg !4216, !tbaa !2764
  %call = call %struct._object* @binary_op1(%struct._object* %1, %struct._object* %2, i32 %3), !dbg !4217
  store %struct._object* %call, %struct._object** %result, align 8, !dbg !4213, !tbaa !1829
  %4 = load %struct._object*, %struct._object** %result, align 8, !dbg !4218, !tbaa !1829
  %cmp = icmp eq %struct._object* %4, @_Py_NotImplementedStruct, !dbg !4219
  br i1 %cmp, label %if.then, label %if.end.4, !dbg !4220

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !4221

do.body:                                          ; preds = %if.then
  %5 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4222
  call void @llvm.lifetime.start(i64 8, i8* %5) #2, !dbg !4222
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1576, metadata !1833), !dbg !4224
  %6 = load %struct._object*, %struct._object** %result, align 8, !dbg !4225, !tbaa !1829
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8, !dbg !4224, !tbaa !1829
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4226, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0, !dbg !4228
  %8 = load i64, i64* %ob_refcnt, align 8, !dbg !4229, !tbaa !1853
  %dec = add i64 %8, -1, !dbg !4229
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4229, !tbaa !1853
  %cmp1 = icmp ne i64 %dec, 0, !dbg !4230
  br i1 %cmp1, label %if.then.2, label %if.else, !dbg !4231

if.then.2:                                        ; preds = %do.body
  br label %if.end, !dbg !4232

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4234, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1, !dbg !4236
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4236, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4, !dbg !4237
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4237, !tbaa !2033
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4238, !tbaa !1829
  call void %11(%struct._object* %12), !dbg !4239
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  %13 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4240
  call void @llvm.lifetime.end(i64 8, i8* %13) #2, !dbg !4240
  br label %do.cond, !dbg !4242

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !4243

do.end:                                           ; preds = %do.cond
  %14 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4245, !tbaa !1829
  %15 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4246, !tbaa !1829
  %16 = load i8*, i8** %op_name.addr, align 8, !dbg !4247, !tbaa !1829
  %call3 = call %struct._object* @binop_type_error(%struct._object* %14, %struct._object* %15, i8* %16), !dbg !4248
  store %struct._object* %call3, %struct._object** %retval, !dbg !4249
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4249

if.end.4:                                         ; preds = %entry
  %17 = load %struct._object*, %struct._object** %result, align 8, !dbg !4250, !tbaa !1829
  store %struct._object* %17, %struct._object** %retval, !dbg !4251
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4251

cleanup:                                          ; preds = %if.end.4, %do.end
  %18 = bitcast %struct._object** %result to i8*, !dbg !4252
  call void @llvm.lifetime.end(i64 8, i8* %18) #2, !dbg !4252
  %19 = load %struct._object*, %struct._object** %retval, !dbg !4252
  ret %struct._object* %19, !dbg !4252
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Xor(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !708, metadata !1833), !dbg !4253
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !709, metadata !1833), !dbg !4254
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4255, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4256, !tbaa !1829
  %call = call %struct._object* @binary_op(%struct._object* %0, %struct._object* %1, i32 112, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i32 0, i32 0)), !dbg !4257
  ret %struct._object* %call, !dbg !4258
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_And(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !712, metadata !1833), !dbg !4259
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !713, metadata !1833), !dbg !4260
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4261, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4262, !tbaa !1829
  %call = call %struct._object* @binary_op(%struct._object* %0, %struct._object* %1, i32 104, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20, i32 0, i32 0)), !dbg !4263
  ret %struct._object* %call, !dbg !4264
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Lshift(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !716, metadata !1833), !dbg !4265
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !717, metadata !1833), !dbg !4266
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4267, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4268, !tbaa !1829
  %call = call %struct._object* @binary_op(%struct._object* %0, %struct._object* %1, i32 88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0)), !dbg !4269
  ret %struct._object* %call, !dbg !4270
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Rshift(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !720, metadata !1833), !dbg !4271
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !721, metadata !1833), !dbg !4272
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4273, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4274, !tbaa !1829
  %call = call %struct._object* @binary_op(%struct._object* %0, %struct._object* %1, i32 96, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i32 0, i32 0)), !dbg !4275
  ret %struct._object* %call, !dbg !4276
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Subtract(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !724, metadata !1833), !dbg !4277
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !725, metadata !1833), !dbg !4278
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4279, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4280, !tbaa !1829
  %call = call %struct._object* @binary_op(%struct._object* %0, %struct._object* %1, i32 8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i32 0, i32 0)), !dbg !4281
  ret %struct._object* %call, !dbg !4282
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Divmod(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !728, metadata !1833), !dbg !4283
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !729, metadata !1833), !dbg !4284
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4285, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4286, !tbaa !1829
  %call = call %struct._object* @binary_op(%struct._object* %0, %struct._object* %1, i32 32, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.24, i32 0, i32 0)), !dbg !4287
  ret %struct._object* %call, !dbg !4288
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Add(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %m = alloca %struct.PySequenceMethods*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !732, metadata !1833), !dbg !4289
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !733, metadata !1833), !dbg !4290
  %0 = bitcast %struct._object** %result to i8*, !dbg !4291
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !4291
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !734, metadata !1833), !dbg !4292
  %1 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4293, !tbaa !1829
  %2 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4294, !tbaa !1829
  %call = call %struct._object* @binary_op1(%struct._object* %1, %struct._object* %2, i32 0), !dbg !4295
  store %struct._object* %call, %struct._object** %result, align 8, !dbg !4292, !tbaa !1829
  %3 = load %struct._object*, %struct._object** %result, align 8, !dbg !4296, !tbaa !1829
  %cmp = icmp eq %struct._object* %3, @_Py_NotImplementedStruct, !dbg !4297
  br i1 %cmp, label %if.then, label %if.end.10, !dbg !4298

if.then:                                          ; preds = %entry
  %4 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !4299
  call void @llvm.lifetime.start(i64 8, i8* %4) #2, !dbg !4299
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %m, metadata !735, metadata !1833), !dbg !4300
  %5 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4301, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !4302
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4302, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 11, !dbg !4303
  %7 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !4303, !tbaa !1876
  store %struct.PySequenceMethods* %7, %struct.PySequenceMethods** %m, align 8, !dbg !4300, !tbaa !1829
  br label %do.body, !dbg !4304

do.body:                                          ; preds = %if.then
  %8 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4305
  call void @llvm.lifetime.start(i64 8, i8* %8) #2, !dbg !4305
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !738, metadata !1833), !dbg !4307
  %9 = load %struct._object*, %struct._object** %result, align 8, !dbg !4308, !tbaa !1829
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8, !dbg !4307, !tbaa !1829
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4309, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0, !dbg !4311
  %11 = load i64, i64* %ob_refcnt, align 8, !dbg !4312, !tbaa !1853
  %dec = add i64 %11, -1, !dbg !4312
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4312, !tbaa !1853
  %cmp1 = icmp ne i64 %dec, 0, !dbg !4313
  br i1 %cmp1, label %if.then.2, label %if.else, !dbg !4314

if.then.2:                                        ; preds = %do.body
  br label %if.end, !dbg !4315

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4317, !tbaa !1829
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1, !dbg !4319
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8, !dbg !4319, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4, !dbg !4320
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4320, !tbaa !2033
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4321, !tbaa !1829
  call void %14(%struct._object* %15), !dbg !4322
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  %16 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4323
  call void @llvm.lifetime.end(i64 8, i8* %16) #2, !dbg !4323
  br label %do.cond, !dbg !4325

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !4326

do.end:                                           ; preds = %do.cond
  %17 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !4328, !tbaa !1829
  %tobool = icmp ne %struct.PySequenceMethods* %17, null, !dbg !4328
  br i1 %tobool, label %land.lhs.true, label %if.end.8, !dbg !4330

land.lhs.true:                                    ; preds = %do.end
  %18 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !4331, !tbaa !1829
  %sq_concat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %18, i32 0, i32 1, !dbg !4333
  %19 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_concat, align 8, !dbg !4333, !tbaa !4334
  %tobool4 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %19, null, !dbg !4335
  br i1 %tobool4, label %if.then.5, label %if.end.8, !dbg !4336

if.then.5:                                        ; preds = %land.lhs.true
  %20 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !4337, !tbaa !1829
  %sq_concat6 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %20, i32 0, i32 1, !dbg !4339
  %21 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_concat6, align 8, !dbg !4339, !tbaa !4334
  %22 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4340, !tbaa !1829
  %23 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4341, !tbaa !1829
  %call7 = call %struct._object* %21(%struct._object* %22, %struct._object* %23), !dbg !4342
  store %struct._object* %call7, %struct._object** %retval, !dbg !4343
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4343

if.end.8:                                         ; preds = %land.lhs.true, %do.end
  %24 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4344, !tbaa !1829
  %25 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4345, !tbaa !1829
  %call9 = call %struct._object* @binop_type_error(%struct._object* %24, %struct._object* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i32 0, i32 0)), !dbg !4346
  store %struct._object* %call9, %struct._object** %result, align 8, !dbg !4347, !tbaa !1829
  store i32 0, i32* %cleanup.dest.slot, !dbg !4348
  br label %cleanup, !dbg !4348

cleanup:                                          ; preds = %if.end.8, %if.then.5
  %26 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !4349
  call void @llvm.lifetime.end(i64 8, i8* %26) #2, !dbg !4349
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.10, !dbg !4351

if.end.10:                                        ; preds = %cleanup.cont, %entry
  %27 = load %struct._object*, %struct._object** %result, align 8, !dbg !4352, !tbaa !1829
  store %struct._object* %27, %struct._object** %retval, !dbg !4353
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.11, !dbg !4353

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.11

cleanup.11:                                       ; preds = %NewDefault, %if.end.10
  %28 = bitcast %struct._object** %result to i8*, !dbg !4354
  call void @llvm.lifetime.end(i64 8, i8* %28) #2, !dbg !4354
  %29 = load %struct._object*, %struct._object** %retval, !dbg !4354
  ret %struct._object* %29, !dbg !4354
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @binary_op1(%struct._object* %v, %struct._object* %w, i32 %op_slot) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %op_slot.addr = alloca i32, align 4
  %x = alloca %struct._object*, align 8
  %slotv = alloca %struct._object* (%struct._object*, %struct._object*)*, align 8
  %slotw = alloca %struct._object* (%struct._object*, %struct._object*)*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  %_py_decref_tmp58 = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !1584, metadata !1833), !dbg !4355
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !1585, metadata !1833), !dbg !4356
  store i32 %op_slot, i32* %op_slot.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %op_slot.addr, metadata !1586, metadata !1833), !dbg !4357
  %0 = bitcast %struct._object** %x to i8*, !dbg !4358
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !4358
  call void @llvm.dbg.declare(metadata %struct._object** %x, metadata !1587, metadata !1833), !dbg !4359
  %1 = bitcast %struct._object* (%struct._object*, %struct._object*)** %slotv to i8*, !dbg !4360
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !4360
  call void @llvm.dbg.declare(metadata %struct._object* (%struct._object*, %struct._object*)** %slotv, metadata !1588, metadata !1833), !dbg !4361
  store %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)** %slotv, align 8, !dbg !4361, !tbaa !1829
  %2 = bitcast %struct._object* (%struct._object*, %struct._object*)** %slotw to i8*, !dbg !4362
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !4362
  call void @llvm.dbg.declare(metadata %struct._object* (%struct._object*, %struct._object*)** %slotw, metadata !1589, metadata !1833), !dbg !4363
  store %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)** %slotw, align 8, !dbg !4363, !tbaa !1829
  %3 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4364, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1, !dbg !4366
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4366, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 10, !dbg !4367
  %5 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !4367, !tbaa !2261
  %cmp = icmp ne %struct.PyNumberMethods* %5, null, !dbg !4368
  br i1 %cmp, label %if.then, label %if.end, !dbg !4369

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %op_slot.addr, align 4, !dbg !4370, !tbaa !2764
  %idxprom = sext i32 %6 to i64, !dbg !4371
  %7 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4372, !tbaa !1829
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1, !dbg !4373
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !4373, !tbaa !1845
  %tp_as_number2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10, !dbg !4374
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number2, align 8, !dbg !4374, !tbaa !2261
  %10 = bitcast %struct.PyNumberMethods* %9 to i8*, !dbg !4375
  %arrayidx = getelementptr i8, i8* %10, i64 %idxprom, !dbg !4371
  %11 = bitcast i8* %arrayidx to %struct._object* (%struct._object*, %struct._object*)**, !dbg !4376
  %12 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %11, align 8, !dbg !4377, !tbaa !1829
  store %struct._object* (%struct._object*, %struct._object*)* %12, %struct._object* (%struct._object*, %struct._object*)** %slotv, align 8, !dbg !4378, !tbaa !1829
  br label %if.end, !dbg !4379

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4380, !tbaa !1829
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1, !dbg !4382
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8, !dbg !4382, !tbaa !1845
  %15 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4383, !tbaa !1829
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1, !dbg !4384
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8, !dbg !4384, !tbaa !1845
  %cmp5 = icmp ne %struct._typeobject* %14, %16, !dbg !4385
  br i1 %cmp5, label %land.lhs.true, label %if.end.17, !dbg !4386

land.lhs.true:                                    ; preds = %if.end
  %17 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4387, !tbaa !1829
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1, !dbg !4388
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8, !dbg !4388, !tbaa !1845
  %tp_as_number7 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 10, !dbg !4389
  %19 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number7, align 8, !dbg !4389, !tbaa !2261
  %cmp8 = icmp ne %struct.PyNumberMethods* %19, null, !dbg !4390
  br i1 %cmp8, label %if.then.9, label %if.end.17, !dbg !4391

if.then.9:                                        ; preds = %land.lhs.true
  %20 = load i32, i32* %op_slot.addr, align 4, !dbg !4392, !tbaa !2764
  %idxprom10 = sext i32 %20 to i64, !dbg !4394
  %21 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4395, !tbaa !1829
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1, !dbg !4396
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8, !dbg !4396, !tbaa !1845
  %tp_as_number12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 10, !dbg !4397
  %23 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number12, align 8, !dbg !4397, !tbaa !2261
  %24 = bitcast %struct.PyNumberMethods* %23 to i8*, !dbg !4398
  %arrayidx13 = getelementptr i8, i8* %24, i64 %idxprom10, !dbg !4394
  %25 = bitcast i8* %arrayidx13 to %struct._object* (%struct._object*, %struct._object*)**, !dbg !4399
  %26 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %25, align 8, !dbg !4400, !tbaa !1829
  store %struct._object* (%struct._object*, %struct._object*)* %26, %struct._object* (%struct._object*, %struct._object*)** %slotw, align 8, !dbg !4401, !tbaa !1829
  %27 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %slotw, align 8, !dbg !4402, !tbaa !1829
  %28 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %slotv, align 8, !dbg !4404, !tbaa !1829
  %cmp14 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %27, %28, !dbg !4405
  br i1 %cmp14, label %if.then.15, label %if.end.16, !dbg !4406

if.then.15:                                       ; preds = %if.then.9
  store %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)** %slotw, align 8, !dbg !4407, !tbaa !1829
  br label %if.end.16, !dbg !4408

if.end.16:                                        ; preds = %if.then.15, %if.then.9
  br label %if.end.17, !dbg !4409

if.end.17:                                        ; preds = %if.end.16, %land.lhs.true, %if.end
  %29 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %slotv, align 8, !dbg !4410, !tbaa !1829
  %tobool = icmp ne %struct._object* (%struct._object*, %struct._object*)* %29, null, !dbg !4410
  br i1 %tobool, label %if.then.18, label %if.end.50, !dbg !4411

if.then.18:                                       ; preds = %if.end.17
  %30 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %slotw, align 8, !dbg !4412, !tbaa !1829
  %tobool19 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %30, null, !dbg !4412
  br i1 %tobool19, label %land.lhs.true.20, label %if.end.33, !dbg !4413

land.lhs.true.20:                                 ; preds = %if.then.18
  %31 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4414, !tbaa !1829
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1, !dbg !4416
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8, !dbg !4416, !tbaa !1845
  %33 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4417, !tbaa !1829
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1, !dbg !4418
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8, !dbg !4418, !tbaa !1845
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %32, %struct._typeobject* %34), !dbg !4419
  %tobool23 = icmp ne i32 %call, 0, !dbg !4419
  br i1 %tobool23, label %if.then.24, label %if.end.33, !dbg !4420

if.then.24:                                       ; preds = %land.lhs.true.20
  %35 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %slotw, align 8, !dbg !4421, !tbaa !1829
  %36 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4422, !tbaa !1829
  %37 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4423, !tbaa !1829
  %call25 = call %struct._object* %35(%struct._object* %36, %struct._object* %37), !dbg !4421
  store %struct._object* %call25, %struct._object** %x, align 8, !dbg !4424, !tbaa !1829
  %38 = load %struct._object*, %struct._object** %x, align 8, !dbg !4425, !tbaa !1829
  %cmp26 = icmp ne %struct._object* %38, @_Py_NotImplementedStruct, !dbg !4427
  br i1 %cmp26, label %if.then.27, label %if.end.28, !dbg !4428

if.then.27:                                       ; preds = %if.then.24
  %39 = load %struct._object*, %struct._object** %x, align 8, !dbg !4429, !tbaa !1829
  store %struct._object* %39, %struct._object** %retval, !dbg !4430
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4430

if.end.28:                                        ; preds = %if.then.24
  br label %do.body, !dbg !4431

do.body:                                          ; preds = %if.end.28
  %40 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4432
  call void @llvm.lifetime.start(i64 8, i8* %40) #2, !dbg !4432
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1590, metadata !1833), !dbg !4434
  %41 = load %struct._object*, %struct._object** %x, align 8, !dbg !4435, !tbaa !1829
  store %struct._object* %41, %struct._object** %_py_decref_tmp, align 8, !dbg !4434, !tbaa !1829
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4436, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0, !dbg !4438
  %43 = load i64, i64* %ob_refcnt, align 8, !dbg !4439, !tbaa !1853
  %dec = add i64 %43, -1, !dbg !4439
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4439, !tbaa !1853
  %cmp29 = icmp ne i64 %dec, 0, !dbg !4440
  br i1 %cmp29, label %if.then.30, label %if.else, !dbg !4441

if.then.30:                                       ; preds = %do.body
  br label %if.end.32, !dbg !4442

if.else:                                          ; preds = %do.body
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4444, !tbaa !1829
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1, !dbg !4446
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8, !dbg !4446, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4, !dbg !4447
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4447, !tbaa !2033
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4448, !tbaa !1829
  call void %46(%struct._object* %47), !dbg !4449
  br label %if.end.32

if.end.32:                                        ; preds = %if.else, %if.then.30
  %48 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4450
  call void @llvm.lifetime.end(i64 8, i8* %48) #2, !dbg !4450
  br label %do.cond, !dbg !4452

do.cond:                                          ; preds = %if.end.32
  br label %do.end, !dbg !4453

do.end:                                           ; preds = %do.cond
  store %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)** %slotw, align 8, !dbg !4455, !tbaa !1829
  br label %if.end.33, !dbg !4456

if.end.33:                                        ; preds = %do.end, %land.lhs.true.20, %if.then.18
  %49 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %slotv, align 8, !dbg !4457, !tbaa !1829
  %50 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4458, !tbaa !1829
  %51 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4459, !tbaa !1829
  %call34 = call %struct._object* %49(%struct._object* %50, %struct._object* %51), !dbg !4457
  store %struct._object* %call34, %struct._object** %x, align 8, !dbg !4460, !tbaa !1829
  %52 = load %struct._object*, %struct._object** %x, align 8, !dbg !4461, !tbaa !1829
  %cmp35 = icmp ne %struct._object* %52, @_Py_NotImplementedStruct, !dbg !4463
  br i1 %cmp35, label %if.then.36, label %if.end.37, !dbg !4464

if.then.36:                                       ; preds = %if.end.33
  %53 = load %struct._object*, %struct._object** %x, align 8, !dbg !4465, !tbaa !1829
  store %struct._object* %53, %struct._object** %retval, !dbg !4466
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4466

if.end.37:                                        ; preds = %if.end.33
  br label %do.body.38, !dbg !4467

do.body.38:                                       ; preds = %if.end.37
  %54 = bitcast %struct._object** %_py_decref_tmp39 to i8*, !dbg !4468
  call void @llvm.lifetime.start(i64 8, i8* %54) #2, !dbg !4468
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp39, metadata !1596, metadata !1833), !dbg !4470
  %55 = load %struct._object*, %struct._object** %x, align 8, !dbg !4471, !tbaa !1829
  store %struct._object* %55, %struct._object** %_py_decref_tmp39, align 8, !dbg !4470, !tbaa !1829
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8, !dbg !4472, !tbaa !1829
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 0, !dbg !4474
  %57 = load i64, i64* %ob_refcnt40, align 8, !dbg !4475, !tbaa !1853
  %dec41 = add i64 %57, -1, !dbg !4475
  store i64 %dec41, i64* %ob_refcnt40, align 8, !dbg !4475, !tbaa !1853
  %cmp42 = icmp ne i64 %dec41, 0, !dbg !4476
  br i1 %cmp42, label %if.then.43, label %if.else.44, !dbg !4477

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47, !dbg !4478

if.else.44:                                       ; preds = %do.body.38
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8, !dbg !4480, !tbaa !1829
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 1, !dbg !4482
  %59 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8, !dbg !4482, !tbaa !1845
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 4, !dbg !4483
  %60 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8, !dbg !4483, !tbaa !2033
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8, !dbg !4484, !tbaa !1829
  call void %60(%struct._object* %61), !dbg !4485
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  %62 = bitcast %struct._object** %_py_decref_tmp39 to i8*, !dbg !4486
  call void @llvm.lifetime.end(i64 8, i8* %62) #2, !dbg !4486
  br label %do.cond.48, !dbg !4488

do.cond.48:                                       ; preds = %if.end.47
  br label %do.end.49, !dbg !4489

do.end.49:                                        ; preds = %do.cond.48
  br label %if.end.50, !dbg !4491

if.end.50:                                        ; preds = %do.end.49, %if.end.17
  %63 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %slotw, align 8, !dbg !4492, !tbaa !1829
  %tobool51 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %63, null, !dbg !4492
  br i1 %tobool51, label %if.then.52, label %if.end.69, !dbg !4493

if.then.52:                                       ; preds = %if.end.50
  %64 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %slotw, align 8, !dbg !4494, !tbaa !1829
  %65 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4495, !tbaa !1829
  %66 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4496, !tbaa !1829
  %call53 = call %struct._object* %64(%struct._object* %65, %struct._object* %66), !dbg !4494
  store %struct._object* %call53, %struct._object** %x, align 8, !dbg !4497, !tbaa !1829
  %67 = load %struct._object*, %struct._object** %x, align 8, !dbg !4498, !tbaa !1829
  %cmp54 = icmp ne %struct._object* %67, @_Py_NotImplementedStruct, !dbg !4500
  br i1 %cmp54, label %if.then.55, label %if.end.56, !dbg !4501

if.then.55:                                       ; preds = %if.then.52
  %68 = load %struct._object*, %struct._object** %x, align 8, !dbg !4502, !tbaa !1829
  store %struct._object* %68, %struct._object** %retval, !dbg !4503
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4503

if.end.56:                                        ; preds = %if.then.52
  br label %do.body.57, !dbg !4504

do.body.57:                                       ; preds = %if.end.56
  %69 = bitcast %struct._object** %_py_decref_tmp58 to i8*, !dbg !4505
  call void @llvm.lifetime.start(i64 8, i8* %69) #2, !dbg !4505
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp58, metadata !1598, metadata !1833), !dbg !4507
  %70 = load %struct._object*, %struct._object** %x, align 8, !dbg !4508, !tbaa !1829
  store %struct._object* %70, %struct._object** %_py_decref_tmp58, align 8, !dbg !4507, !tbaa !1829
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8, !dbg !4509, !tbaa !1829
  %ob_refcnt59 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 0, !dbg !4511
  %72 = load i64, i64* %ob_refcnt59, align 8, !dbg !4512, !tbaa !1853
  %dec60 = add i64 %72, -1, !dbg !4512
  store i64 %dec60, i64* %ob_refcnt59, align 8, !dbg !4512, !tbaa !1853
  %cmp61 = icmp ne i64 %dec60, 0, !dbg !4513
  br i1 %cmp61, label %if.then.62, label %if.else.63, !dbg !4514

if.then.62:                                       ; preds = %do.body.57
  br label %if.end.66, !dbg !4515

if.else.63:                                       ; preds = %do.body.57
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8, !dbg !4517, !tbaa !1829
  %ob_type64 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 1, !dbg !4519
  %74 = load %struct._typeobject*, %struct._typeobject** %ob_type64, align 8, !dbg !4519, !tbaa !1845
  %tp_dealloc65 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %74, i32 0, i32 4, !dbg !4520
  %75 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc65, align 8, !dbg !4520, !tbaa !2033
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8, !dbg !4521, !tbaa !1829
  call void %75(%struct._object* %76), !dbg !4522
  br label %if.end.66

if.end.66:                                        ; preds = %if.else.63, %if.then.62
  %77 = bitcast %struct._object** %_py_decref_tmp58 to i8*, !dbg !4523
  call void @llvm.lifetime.end(i64 8, i8* %77) #2, !dbg !4523
  br label %do.cond.67, !dbg !4525

do.cond.67:                                       ; preds = %if.end.66
  br label %do.end.68, !dbg !4526

do.end.68:                                        ; preds = %do.cond.67
  br label %if.end.69, !dbg !4528

if.end.69:                                        ; preds = %do.end.68, %if.end.50
  %78 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8, !dbg !4529, !tbaa !1853
  %inc = add i64 %78, 1, !dbg !4529
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8, !dbg !4529, !tbaa !1853
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval, !dbg !4530
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4530

cleanup:                                          ; preds = %if.end.69, %if.then.55, %if.then.36, %if.then.27
  %79 = bitcast %struct._object* (%struct._object*, %struct._object*)** %slotw to i8*, !dbg !4531
  call void @llvm.lifetime.end(i64 8, i8* %79) #2, !dbg !4531
  %80 = bitcast %struct._object* (%struct._object*, %struct._object*)** %slotv to i8*, !dbg !4531
  call void @llvm.lifetime.end(i64 8, i8* %80) #2, !dbg !4531
  %81 = bitcast %struct._object** %x to i8*, !dbg !4531
  call void @llvm.lifetime.end(i64 8, i8* %81) #2, !dbg !4531
  %82 = load %struct._object*, %struct._object** %retval, !dbg !4531
  ret %struct._object* %82, !dbg !4531
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @binop_type_error(%struct._object* %v, %struct._object* %w, i8* %op_name) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %op_name.addr = alloca i8*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !1606, metadata !1833), !dbg !4532
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !1607, metadata !1833), !dbg !4533
  store i8* %op_name, i8** %op_name.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %op_name.addr, metadata !1608, metadata !1833), !dbg !4534
  %0 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !4535, !tbaa !1829
  %1 = load i8*, i8** %op_name.addr, align 8, !dbg !4536, !tbaa !1829
  %2 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4537, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !4538
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4538, !tbaa !1845
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 1, !dbg !4539
  %4 = load i8*, i8** %tp_name, align 8, !dbg !4539, !tbaa !2094
  %5 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4540, !tbaa !1829
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !4541
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !4541, !tbaa !1845
  %tp_name2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 1, !dbg !4542
  %7 = load i8*, i8** %tp_name2, align 8, !dbg !4542, !tbaa !2094
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %0, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.84, i32 0, i32 0), i8* %1, i8* %4, i8* %7), !dbg !4543
  ret %struct._object* null, !dbg !4544
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Multiply(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %mv = alloca %struct.PySequenceMethods*, align 8
  %mw = alloca %struct.PySequenceMethods*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !742, metadata !1833), !dbg !4545
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !743, metadata !1833), !dbg !4546
  %0 = bitcast %struct._object** %result to i8*, !dbg !4547
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !4547
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !744, metadata !1833), !dbg !4548
  %1 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4549, !tbaa !1829
  %2 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4550, !tbaa !1829
  %call = call %struct._object* @binary_op1(%struct._object* %1, %struct._object* %2, i32 16), !dbg !4551
  store %struct._object* %call, %struct._object** %result, align 8, !dbg !4548, !tbaa !1829
  %3 = load %struct._object*, %struct._object** %result, align 8, !dbg !4552, !tbaa !1829
  %cmp = icmp eq %struct._object* %3, @_Py_NotImplementedStruct, !dbg !4553
  br i1 %cmp, label %if.then, label %if.end.22, !dbg !4554

if.then:                                          ; preds = %entry
  %4 = bitcast %struct.PySequenceMethods** %mv to i8*, !dbg !4555
  call void @llvm.lifetime.start(i64 8, i8* %4) #2, !dbg !4555
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %mv, metadata !745, metadata !1833), !dbg !4556
  %5 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4557, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !4558
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4558, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 11, !dbg !4559
  %7 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !4559, !tbaa !1876
  store %struct.PySequenceMethods* %7, %struct.PySequenceMethods** %mv, align 8, !dbg !4556, !tbaa !1829
  %8 = bitcast %struct.PySequenceMethods** %mw to i8*, !dbg !4560
  call void @llvm.lifetime.start(i64 8, i8* %8) #2, !dbg !4560
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %mw, metadata !748, metadata !1833), !dbg !4561
  %9 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4562, !tbaa !1829
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1, !dbg !4563
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !4563, !tbaa !1845
  %tp_as_sequence2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 11, !dbg !4564
  %11 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence2, align 8, !dbg !4564, !tbaa !1876
  store %struct.PySequenceMethods* %11, %struct.PySequenceMethods** %mw, align 8, !dbg !4561, !tbaa !1829
  br label %do.body, !dbg !4565

do.body:                                          ; preds = %if.then
  %12 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4566
  call void @llvm.lifetime.start(i64 8, i8* %12) #2, !dbg !4566
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !749, metadata !1833), !dbg !4568
  %13 = load %struct._object*, %struct._object** %result, align 8, !dbg !4569, !tbaa !1829
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8, !dbg !4568, !tbaa !1829
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4570, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0, !dbg !4572
  %15 = load i64, i64* %ob_refcnt, align 8, !dbg !4573, !tbaa !1853
  %dec = add i64 %15, -1, !dbg !4573
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4573, !tbaa !1853
  %cmp3 = icmp ne i64 %dec, 0, !dbg !4574
  br i1 %cmp3, label %if.then.4, label %if.else, !dbg !4575

if.then.4:                                        ; preds = %do.body
  br label %if.end, !dbg !4576

if.else:                                          ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4578, !tbaa !1829
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1, !dbg !4580
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8, !dbg !4580, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4, !dbg !4581
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4581, !tbaa !2033
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4582, !tbaa !1829
  call void %18(%struct._object* %19), !dbg !4583
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  %20 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4584
  call void @llvm.lifetime.end(i64 8, i8* %20) #2, !dbg !4584
  br label %do.cond, !dbg !4586

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !4587

do.end:                                           ; preds = %do.cond
  %21 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %mv, align 8, !dbg !4589, !tbaa !1829
  %tobool = icmp ne %struct.PySequenceMethods* %21, null, !dbg !4589
  br i1 %tobool, label %land.lhs.true, label %if.else.10, !dbg !4591

land.lhs.true:                                    ; preds = %do.end
  %22 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %mv, align 8, !dbg !4592, !tbaa !1829
  %sq_repeat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %22, i32 0, i32 2, !dbg !4594
  %23 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat, align 8, !dbg !4594, !tbaa !4595
  %tobool6 = icmp ne %struct._object* (%struct._object*, i64)* %23, null, !dbg !4596
  br i1 %tobool6, label %if.then.7, label %if.else.10, !dbg !4597

if.then.7:                                        ; preds = %land.lhs.true
  %24 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %mv, align 8, !dbg !4598, !tbaa !1829
  %sq_repeat8 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %24, i32 0, i32 2, !dbg !4600
  %25 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat8, align 8, !dbg !4600, !tbaa !4595
  %26 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4601, !tbaa !1829
  %27 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4602, !tbaa !1829
  %call9 = call %struct._object* @sequence_repeat(%struct._object* (%struct._object*, i64)* %25, %struct._object* %26, %struct._object* %27), !dbg !4603
  store %struct._object* %call9, %struct._object** %retval, !dbg !4604
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4604

if.else.10:                                       ; preds = %land.lhs.true, %do.end
  %28 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %mw, align 8, !dbg !4605, !tbaa !1829
  %tobool11 = icmp ne %struct.PySequenceMethods* %28, null, !dbg !4605
  br i1 %tobool11, label %land.lhs.true.12, label %if.end.18, !dbg !4607

land.lhs.true.12:                                 ; preds = %if.else.10
  %29 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %mw, align 8, !dbg !4608, !tbaa !1829
  %sq_repeat13 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %29, i32 0, i32 2, !dbg !4610
  %30 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat13, align 8, !dbg !4610, !tbaa !4595
  %tobool14 = icmp ne %struct._object* (%struct._object*, i64)* %30, null, !dbg !4611
  br i1 %tobool14, label %if.then.15, label %if.end.18, !dbg !4612

if.then.15:                                       ; preds = %land.lhs.true.12
  %31 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %mw, align 8, !dbg !4613, !tbaa !1829
  %sq_repeat16 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %31, i32 0, i32 2, !dbg !4615
  %32 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat16, align 8, !dbg !4615, !tbaa !4595
  %33 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4616, !tbaa !1829
  %34 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4617, !tbaa !1829
  %call17 = call %struct._object* @sequence_repeat(%struct._object* (%struct._object*, i64)* %32, %struct._object* %33, %struct._object* %34), !dbg !4618
  store %struct._object* %call17, %struct._object** %retval, !dbg !4619
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4619

if.end.18:                                        ; preds = %land.lhs.true.12, %if.else.10
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18
  %35 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4620, !tbaa !1829
  %36 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4621, !tbaa !1829
  %call20 = call %struct._object* @binop_type_error(%struct._object* %35, %struct._object* %36, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.26, i32 0, i32 0)), !dbg !4622
  store %struct._object* %call20, %struct._object** %result, align 8, !dbg !4623, !tbaa !1829
  store i32 0, i32* %cleanup.dest.slot, !dbg !4624
  br label %cleanup, !dbg !4624

cleanup:                                          ; preds = %if.end.19, %if.then.15, %if.then.7
  %37 = bitcast %struct.PySequenceMethods** %mw to i8*, !dbg !4625
  call void @llvm.lifetime.end(i64 8, i8* %37) #2, !dbg !4625
  %38 = bitcast %struct.PySequenceMethods** %mv to i8*, !dbg !4625
  call void @llvm.lifetime.end(i64 8, i8* %38) #2, !dbg !4625
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.22, !dbg !4627

if.end.22:                                        ; preds = %cleanup.cont, %entry
  %39 = load %struct._object*, %struct._object** %result, align 8, !dbg !4628, !tbaa !1829
  store %struct._object* %39, %struct._object** %retval, !dbg !4629
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.23, !dbg !4629

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.23

cleanup.23:                                       ; preds = %NewDefault, %if.end.22
  %40 = bitcast %struct._object** %result to i8*, !dbg !4630
  call void @llvm.lifetime.end(i64 8, i8* %40) #2, !dbg !4630
  %41 = load %struct._object*, %struct._object** %retval, !dbg !4630
  ret %struct._object* %41, !dbg !4630
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sequence_repeat(%struct._object* (%struct._object*, i64)* %repeatfunc, %struct._object* %seq, %struct._object* %n) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %repeatfunc.addr = alloca %struct._object* (%struct._object*, i64)*, align 8
  %seq.addr = alloca %struct._object*, align 8
  %n.addr = alloca %struct._object*, align 8
  %count = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* (%struct._object*, i64)* %repeatfunc, %struct._object* (%struct._object*, i64)** %repeatfunc.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object* (%struct._object*, i64)** %repeatfunc.addr, metadata !1613, metadata !1833), !dbg !4631
  store %struct._object* %seq, %struct._object** %seq.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %seq.addr, metadata !1614, metadata !1833), !dbg !4632
  store %struct._object* %n, %struct._object** %n.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %n.addr, metadata !1615, metadata !1833), !dbg !4633
  %0 = bitcast i64* %count to i8*, !dbg !4634
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !4634
  call void @llvm.dbg.declare(metadata i64* %count, metadata !1616, metadata !1833), !dbg !4635
  %1 = load %struct._object*, %struct._object** %n.addr, align 8, !dbg !4636, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !4638
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4638, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 10, !dbg !4639
  %3 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !4639, !tbaa !2261
  %cmp = icmp ne %struct.PyNumberMethods* %3, null, !dbg !4640
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !4641

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %n.addr, align 8, !dbg !4642, !tbaa !1829
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1, !dbg !4644
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !4644, !tbaa !1845
  %tp_as_number2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10, !dbg !4645
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number2, align 8, !dbg !4645, !tbaa !2261
  %nb_index = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %6, i32 0, i32 33, !dbg !4646
  %nb_index3 = bitcast {}** %nb_index to %struct._object* (%struct._object*)**, !dbg !4646
  %7 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index3, align 8, !dbg !4646, !tbaa !2269
  %cmp4 = icmp ne %struct._object* (%struct._object*)* %7, null, !dbg !4647
  br i1 %cmp4, label %if.then, label %if.else, !dbg !4648

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct._object*, %struct._object** %n.addr, align 8, !dbg !4649, !tbaa !1829
  %9 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !4651, !tbaa !1829
  %call = call i64 @PyNumber_AsSsize_t(%struct._object* %8, %struct._object* %9), !dbg !4652
  store i64 %call, i64* %count, align 8, !dbg !4653, !tbaa !1963
  %10 = load i64, i64* %count, align 8, !dbg !4654, !tbaa !1963
  %cmp5 = icmp eq i64 %10, -1, !dbg !4656
  br i1 %cmp5, label %land.lhs.true.6, label %if.end, !dbg !4657

land.lhs.true.6:                                  ; preds = %if.then
  %call7 = call %struct._object* @PyErr_Occurred(), !dbg !4658
  %tobool = icmp ne %struct._object* %call7, null, !dbg !4658
  br i1 %tobool, label %if.then.8, label %if.end, !dbg !4660

if.then.8:                                        ; preds = %land.lhs.true.6
  store %struct._object* null, %struct._object** %retval, !dbg !4661
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4661

if.end:                                           ; preds = %land.lhs.true.6, %if.then
  br label %if.end.10, !dbg !4662

if.else:                                          ; preds = %land.lhs.true, %entry
  %11 = load %struct._object*, %struct._object** %n.addr, align 8, !dbg !4663, !tbaa !1829
  %call9 = call %struct._object* @type_error(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.85, i32 0, i32 0), %struct._object* %11), !dbg !4665
  store %struct._object* %call9, %struct._object** %retval, !dbg !4666
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4666

if.end.10:                                        ; preds = %if.end
  %12 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %repeatfunc.addr, align 8, !dbg !4667, !tbaa !1829
  %13 = load %struct._object*, %struct._object** %seq.addr, align 8, !dbg !4668, !tbaa !1829
  %14 = load i64, i64* %count, align 8, !dbg !4669, !tbaa !1963
  %call11 = call %struct._object* %12(%struct._object* %13, i64 %14), !dbg !4670
  store %struct._object* %call11, %struct._object** %retval, !dbg !4671
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4671

cleanup:                                          ; preds = %if.end.10, %if.else, %if.then.8
  %15 = bitcast i64* %count to i8*, !dbg !4672
  call void @llvm.lifetime.end(i64 8, i8* %15) #2, !dbg !4672
  %16 = load %struct._object*, %struct._object** %retval, !dbg !4672
  ret %struct._object* %16, !dbg !4672
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_FloorDivide(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !753, metadata !1833), !dbg !4673
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !754, metadata !1833), !dbg !4674
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4675, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4676, !tbaa !1829
  %call = call %struct._object* @binary_op(%struct._object* %0, %struct._object* %1, i32 232, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i32 0, i32 0)), !dbg !4677
  ret %struct._object* %call, !dbg !4678
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_TrueDivide(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !757, metadata !1833), !dbg !4679
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !758, metadata !1833), !dbg !4680
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4681, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4682, !tbaa !1829
  %call = call %struct._object* @binary_op(%struct._object* %0, %struct._object* %1, i32 240, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i32 0, i32 0)), !dbg !4683
  ret %struct._object* %call, !dbg !4684
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Remainder(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !761, metadata !1833), !dbg !4685
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !762, metadata !1833), !dbg !4686
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4687, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4688, !tbaa !1829
  %call = call %struct._object* @binary_op(%struct._object* %0, %struct._object* %1, i32 24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.29, i32 0, i32 0)), !dbg !4689
  ret %struct._object* %call, !dbg !4690
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Power(%struct._object* %v, %struct._object* %w, %struct._object* %z) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %z.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !765, metadata !1833), !dbg !4691
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !766, metadata !1833), !dbg !4692
  store %struct._object* %z, %struct._object** %z.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %z.addr, metadata !767, metadata !1833), !dbg !4693
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4694, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4695, !tbaa !1829
  %2 = load %struct._object*, %struct._object** %z.addr, align 8, !dbg !4696, !tbaa !1829
  %call = call %struct._object* @ternary_op(%struct._object* %0, %struct._object* %1, %struct._object* %2, i32 40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.30, i32 0, i32 0)), !dbg !4697
  ret %struct._object* %call, !dbg !4698
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ternary_op(%struct._object* %v, %struct._object* %w, %struct._object* %z, i32 %op_slot, i8* %op_name) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %z.addr = alloca %struct._object*, align 8
  %op_slot.addr = alloca i32, align 4
  %op_name.addr = alloca i8*, align 8
  %mv = alloca %struct.PyNumberMethods*, align 8
  %mw = alloca %struct.PyNumberMethods*, align 8
  %mz = alloca %struct.PyNumberMethods*, align 8
  %x = alloca %struct._object*, align 8
  %slotv = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %slotw = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %slotz = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp35 = alloca %struct._object*, align 8
  %_py_decref_tmp54 = alloca %struct._object*, align 8
  %_py_decref_tmp83 = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !1621, metadata !1833), !dbg !4699
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !1622, metadata !1833), !dbg !4700
  store %struct._object* %z, %struct._object** %z.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %z.addr, metadata !1623, metadata !1833), !dbg !4701
  store i32 %op_slot, i32* %op_slot.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %op_slot.addr, metadata !1624, metadata !1833), !dbg !4702
  store i8* %op_name, i8** %op_name.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %op_name.addr, metadata !1625, metadata !1833), !dbg !4703
  %0 = bitcast %struct.PyNumberMethods** %mv to i8*, !dbg !4704
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !4704
  call void @llvm.dbg.declare(metadata %struct.PyNumberMethods** %mv, metadata !1626, metadata !1833), !dbg !4705
  %1 = bitcast %struct.PyNumberMethods** %mw to i8*, !dbg !4704
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !4704
  call void @llvm.dbg.declare(metadata %struct.PyNumberMethods** %mw, metadata !1627, metadata !1833), !dbg !4706
  %2 = bitcast %struct.PyNumberMethods** %mz to i8*, !dbg !4704
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !4704
  call void @llvm.dbg.declare(metadata %struct.PyNumberMethods** %mz, metadata !1628, metadata !1833), !dbg !4707
  %3 = bitcast %struct._object** %x to i8*, !dbg !4708
  call void @llvm.lifetime.start(i64 8, i8* %3) #2, !dbg !4708
  call void @llvm.dbg.declare(metadata %struct._object** %x, metadata !1629, metadata !1833), !dbg !4709
  store %struct._object* null, %struct._object** %x, align 8, !dbg !4709, !tbaa !1829
  %4 = bitcast %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotv to i8*, !dbg !4710
  call void @llvm.lifetime.start(i64 8, i8* %4) #2, !dbg !4710
  call void @llvm.dbg.declare(metadata %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotv, metadata !1630, metadata !1833), !dbg !4711
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotv, align 8, !dbg !4711, !tbaa !1829
  %5 = bitcast %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotw to i8*, !dbg !4712
  call void @llvm.lifetime.start(i64 8, i8* %5) #2, !dbg !4712
  call void @llvm.dbg.declare(metadata %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotw, metadata !1631, metadata !1833), !dbg !4713
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotw, align 8, !dbg !4713, !tbaa !1829
  %6 = bitcast %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotz to i8*, !dbg !4714
  call void @llvm.lifetime.start(i64 8, i8* %6) #2, !dbg !4714
  call void @llvm.dbg.declare(metadata %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotz, metadata !1632, metadata !1833), !dbg !4715
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotz, align 8, !dbg !4715, !tbaa !1829
  %7 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4716, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1, !dbg !4717
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4717, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10, !dbg !4718
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !4718, !tbaa !2261
  store %struct.PyNumberMethods* %9, %struct.PyNumberMethods** %mv, align 8, !dbg !4719, !tbaa !1829
  %10 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4720, !tbaa !1829
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !4721
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !4721, !tbaa !1845
  %tp_as_number2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 10, !dbg !4722
  %12 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number2, align 8, !dbg !4722, !tbaa !2261
  store %struct.PyNumberMethods* %12, %struct.PyNumberMethods** %mw, align 8, !dbg !4723, !tbaa !1829
  %13 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %mv, align 8, !dbg !4724, !tbaa !1829
  %cmp = icmp ne %struct.PyNumberMethods* %13, null, !dbg !4726
  br i1 %cmp, label %if.then, label %if.end, !dbg !4727

if.then:                                          ; preds = %entry
  %14 = load i32, i32* %op_slot.addr, align 4, !dbg !4728, !tbaa !2764
  %idxprom = sext i32 %14 to i64, !dbg !4729
  %15 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %mv, align 8, !dbg !4730, !tbaa !1829
  %16 = bitcast %struct.PyNumberMethods* %15 to i8*, !dbg !4731
  %arrayidx = getelementptr i8, i8* %16, i64 %idxprom, !dbg !4729
  %17 = bitcast i8* %arrayidx to %struct._object* (%struct._object*, %struct._object*, %struct._object*)**, !dbg !4732
  %18 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %17, align 8, !dbg !4733, !tbaa !1829
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %18, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotv, align 8, !dbg !4734, !tbaa !1829
  br label %if.end, !dbg !4735

if.end:                                           ; preds = %if.then, %entry
  %19 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4736, !tbaa !1829
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1, !dbg !4738
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8, !dbg !4738, !tbaa !1845
  %21 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4739, !tbaa !1829
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1, !dbg !4740
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8, !dbg !4740, !tbaa !1845
  %cmp5 = icmp ne %struct._typeobject* %20, %22, !dbg !4741
  br i1 %cmp5, label %land.lhs.true, label %if.end.13, !dbg !4742

land.lhs.true:                                    ; preds = %if.end
  %23 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %mw, align 8, !dbg !4743, !tbaa !1829
  %cmp6 = icmp ne %struct.PyNumberMethods* %23, null, !dbg !4744
  br i1 %cmp6, label %if.then.7, label %if.end.13, !dbg !4745

if.then.7:                                        ; preds = %land.lhs.true
  %24 = load i32, i32* %op_slot.addr, align 4, !dbg !4746, !tbaa !2764
  %idxprom8 = sext i32 %24 to i64, !dbg !4748
  %25 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %mw, align 8, !dbg !4749, !tbaa !1829
  %26 = bitcast %struct.PyNumberMethods* %25 to i8*, !dbg !4750
  %arrayidx9 = getelementptr i8, i8* %26, i64 %idxprom8, !dbg !4748
  %27 = bitcast i8* %arrayidx9 to %struct._object* (%struct._object*, %struct._object*, %struct._object*)**, !dbg !4751
  %28 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %27, align 8, !dbg !4752, !tbaa !1829
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %28, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotw, align 8, !dbg !4753, !tbaa !1829
  %29 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotw, align 8, !dbg !4754, !tbaa !1829
  %30 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotv, align 8, !dbg !4756, !tbaa !1829
  %cmp10 = icmp eq %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %29, %30, !dbg !4757
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !4758

if.then.11:                                       ; preds = %if.then.7
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotw, align 8, !dbg !4759, !tbaa !1829
  br label %if.end.12, !dbg !4760

if.end.12:                                        ; preds = %if.then.11, %if.then.7
  br label %if.end.13, !dbg !4761

if.end.13:                                        ; preds = %if.end.12, %land.lhs.true, %if.end
  %31 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotv, align 8, !dbg !4762, !tbaa !1829
  %tobool = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %31, null, !dbg !4762
  br i1 %tobool, label %if.then.14, label %if.end.46, !dbg !4763

if.then.14:                                       ; preds = %if.end.13
  %32 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotw, align 8, !dbg !4764, !tbaa !1829
  %tobool15 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %32, null, !dbg !4764
  br i1 %tobool15, label %land.lhs.true.16, label %if.end.29, !dbg !4765

land.lhs.true.16:                                 ; preds = %if.then.14
  %33 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4766, !tbaa !1829
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1, !dbg !4768
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8, !dbg !4768, !tbaa !1845
  %35 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4769, !tbaa !1829
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1, !dbg !4770
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8, !dbg !4770, !tbaa !1845
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %34, %struct._typeobject* %36), !dbg !4771
  %tobool19 = icmp ne i32 %call, 0, !dbg !4771
  br i1 %tobool19, label %if.then.20, label %if.end.29, !dbg !4772

if.then.20:                                       ; preds = %land.lhs.true.16
  %37 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotw, align 8, !dbg !4773, !tbaa !1829
  %38 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4774, !tbaa !1829
  %39 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4775, !tbaa !1829
  %40 = load %struct._object*, %struct._object** %z.addr, align 8, !dbg !4776, !tbaa !1829
  %call21 = call %struct._object* %37(%struct._object* %38, %struct._object* %39, %struct._object* %40), !dbg !4773
  store %struct._object* %call21, %struct._object** %x, align 8, !dbg !4777, !tbaa !1829
  %41 = load %struct._object*, %struct._object** %x, align 8, !dbg !4778, !tbaa !1829
  %cmp22 = icmp ne %struct._object* %41, @_Py_NotImplementedStruct, !dbg !4780
  br i1 %cmp22, label %if.then.23, label %if.end.24, !dbg !4781

if.then.23:                                       ; preds = %if.then.20
  %42 = load %struct._object*, %struct._object** %x, align 8, !dbg !4782, !tbaa !1829
  store %struct._object* %42, %struct._object** %retval, !dbg !4783
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4783

if.end.24:                                        ; preds = %if.then.20
  br label %do.body, !dbg !4784

do.body:                                          ; preds = %if.end.24
  %43 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4785
  call void @llvm.lifetime.start(i64 8, i8* %43) #2, !dbg !4785
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1633, metadata !1833), !dbg !4787
  %44 = load %struct._object*, %struct._object** %x, align 8, !dbg !4788, !tbaa !1829
  store %struct._object* %44, %struct._object** %_py_decref_tmp, align 8, !dbg !4787, !tbaa !1829
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4789, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 0, !dbg !4791
  %46 = load i64, i64* %ob_refcnt, align 8, !dbg !4792, !tbaa !1853
  %dec = add i64 %46, -1, !dbg !4792
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4792, !tbaa !1853
  %cmp25 = icmp ne i64 %dec, 0, !dbg !4793
  br i1 %cmp25, label %if.then.26, label %if.else, !dbg !4794

if.then.26:                                       ; preds = %do.body
  br label %if.end.28, !dbg !4795

if.else:                                          ; preds = %do.body
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4797, !tbaa !1829
  %ob_type27 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 1, !dbg !4799
  %48 = load %struct._typeobject*, %struct._typeobject** %ob_type27, align 8, !dbg !4799, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %48, i32 0, i32 4, !dbg !4800
  %49 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4800, !tbaa !2033
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4801, !tbaa !1829
  call void %49(%struct._object* %50), !dbg !4802
  br label %if.end.28

if.end.28:                                        ; preds = %if.else, %if.then.26
  %51 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4803
  call void @llvm.lifetime.end(i64 8, i8* %51) #2, !dbg !4803
  br label %do.cond, !dbg !4805

do.cond:                                          ; preds = %if.end.28
  br label %do.end, !dbg !4806

do.end:                                           ; preds = %do.cond
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotw, align 8, !dbg !4808, !tbaa !1829
  br label %if.end.29, !dbg !4809

if.end.29:                                        ; preds = %do.end, %land.lhs.true.16, %if.then.14
  %52 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotv, align 8, !dbg !4810, !tbaa !1829
  %53 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4811, !tbaa !1829
  %54 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4812, !tbaa !1829
  %55 = load %struct._object*, %struct._object** %z.addr, align 8, !dbg !4813, !tbaa !1829
  %call30 = call %struct._object* %52(%struct._object* %53, %struct._object* %54, %struct._object* %55), !dbg !4810
  store %struct._object* %call30, %struct._object** %x, align 8, !dbg !4814, !tbaa !1829
  %56 = load %struct._object*, %struct._object** %x, align 8, !dbg !4815, !tbaa !1829
  %cmp31 = icmp ne %struct._object* %56, @_Py_NotImplementedStruct, !dbg !4817
  br i1 %cmp31, label %if.then.32, label %if.end.33, !dbg !4818

if.then.32:                                       ; preds = %if.end.29
  %57 = load %struct._object*, %struct._object** %x, align 8, !dbg !4819, !tbaa !1829
  store %struct._object* %57, %struct._object** %retval, !dbg !4820
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4820

if.end.33:                                        ; preds = %if.end.29
  br label %do.body.34, !dbg !4821

do.body.34:                                       ; preds = %if.end.33
  %58 = bitcast %struct._object** %_py_decref_tmp35 to i8*, !dbg !4822
  call void @llvm.lifetime.start(i64 8, i8* %58) #2, !dbg !4822
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp35, metadata !1639, metadata !1833), !dbg !4824
  %59 = load %struct._object*, %struct._object** %x, align 8, !dbg !4825, !tbaa !1829
  store %struct._object* %59, %struct._object** %_py_decref_tmp35, align 8, !dbg !4824, !tbaa !1829
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !4826, !tbaa !1829
  %ob_refcnt36 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0, !dbg !4828
  %61 = load i64, i64* %ob_refcnt36, align 8, !dbg !4829, !tbaa !1853
  %dec37 = add i64 %61, -1, !dbg !4829
  store i64 %dec37, i64* %ob_refcnt36, align 8, !dbg !4829, !tbaa !1853
  %cmp38 = icmp ne i64 %dec37, 0, !dbg !4830
  br i1 %cmp38, label %if.then.39, label %if.else.40, !dbg !4831

if.then.39:                                       ; preds = %do.body.34
  br label %if.end.43, !dbg !4832

if.else.40:                                       ; preds = %do.body.34
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !4834, !tbaa !1829
  %ob_type41 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1, !dbg !4836
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type41, align 8, !dbg !4836, !tbaa !1845
  %tp_dealloc42 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4, !dbg !4837
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc42, align 8, !dbg !4837, !tbaa !2033
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !4838, !tbaa !1829
  call void %64(%struct._object* %65), !dbg !4839
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.40, %if.then.39
  %66 = bitcast %struct._object** %_py_decref_tmp35 to i8*, !dbg !4840
  call void @llvm.lifetime.end(i64 8, i8* %66) #2, !dbg !4840
  br label %do.cond.44, !dbg !4842

do.cond.44:                                       ; preds = %if.end.43
  br label %do.end.45, !dbg !4843

do.end.45:                                        ; preds = %do.cond.44
  br label %if.end.46, !dbg !4845

if.end.46:                                        ; preds = %do.end.45, %if.end.13
  %67 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotw, align 8, !dbg !4846, !tbaa !1829
  %tobool47 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %67, null, !dbg !4846
  br i1 %tobool47, label %if.then.48, label %if.end.65, !dbg !4847

if.then.48:                                       ; preds = %if.end.46
  %68 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotw, align 8, !dbg !4848, !tbaa !1829
  %69 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4849, !tbaa !1829
  %70 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4850, !tbaa !1829
  %71 = load %struct._object*, %struct._object** %z.addr, align 8, !dbg !4851, !tbaa !1829
  %call49 = call %struct._object* %68(%struct._object* %69, %struct._object* %70, %struct._object* %71), !dbg !4848
  store %struct._object* %call49, %struct._object** %x, align 8, !dbg !4852, !tbaa !1829
  %72 = load %struct._object*, %struct._object** %x, align 8, !dbg !4853, !tbaa !1829
  %cmp50 = icmp ne %struct._object* %72, @_Py_NotImplementedStruct, !dbg !4855
  br i1 %cmp50, label %if.then.51, label %if.end.52, !dbg !4856

if.then.51:                                       ; preds = %if.then.48
  %73 = load %struct._object*, %struct._object** %x, align 8, !dbg !4857, !tbaa !1829
  store %struct._object* %73, %struct._object** %retval, !dbg !4858
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4858

if.end.52:                                        ; preds = %if.then.48
  br label %do.body.53, !dbg !4859

do.body.53:                                       ; preds = %if.end.52
  %74 = bitcast %struct._object** %_py_decref_tmp54 to i8*, !dbg !4860
  call void @llvm.lifetime.start(i64 8, i8* %74) #2, !dbg !4860
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp54, metadata !1641, metadata !1833), !dbg !4862
  %75 = load %struct._object*, %struct._object** %x, align 8, !dbg !4863, !tbaa !1829
  store %struct._object* %75, %struct._object** %_py_decref_tmp54, align 8, !dbg !4862, !tbaa !1829
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8, !dbg !4864, !tbaa !1829
  %ob_refcnt55 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 0, !dbg !4866
  %77 = load i64, i64* %ob_refcnt55, align 8, !dbg !4867, !tbaa !1853
  %dec56 = add i64 %77, -1, !dbg !4867
  store i64 %dec56, i64* %ob_refcnt55, align 8, !dbg !4867, !tbaa !1853
  %cmp57 = icmp ne i64 %dec56, 0, !dbg !4868
  br i1 %cmp57, label %if.then.58, label %if.else.59, !dbg !4869

if.then.58:                                       ; preds = %do.body.53
  br label %if.end.62, !dbg !4870

if.else.59:                                       ; preds = %do.body.53
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8, !dbg !4872, !tbaa !1829
  %ob_type60 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 1, !dbg !4874
  %79 = load %struct._typeobject*, %struct._typeobject** %ob_type60, align 8, !dbg !4874, !tbaa !1845
  %tp_dealloc61 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %79, i32 0, i32 4, !dbg !4875
  %80 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc61, align 8, !dbg !4875, !tbaa !2033
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8, !dbg !4876, !tbaa !1829
  call void %80(%struct._object* %81), !dbg !4877
  br label %if.end.62

if.end.62:                                        ; preds = %if.else.59, %if.then.58
  %82 = bitcast %struct._object** %_py_decref_tmp54 to i8*, !dbg !4878
  call void @llvm.lifetime.end(i64 8, i8* %82) #2, !dbg !4878
  br label %do.cond.63, !dbg !4880

do.cond.63:                                       ; preds = %if.end.62
  br label %do.end.64, !dbg !4881

do.end.64:                                        ; preds = %do.cond.63
  br label %if.end.65, !dbg !4883

if.end.65:                                        ; preds = %do.end.64, %if.end.46
  %83 = load %struct._object*, %struct._object** %z.addr, align 8, !dbg !4884, !tbaa !1829
  %ob_type66 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 1, !dbg !4885
  %84 = load %struct._typeobject*, %struct._typeobject** %ob_type66, align 8, !dbg !4885, !tbaa !1845
  %tp_as_number67 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %84, i32 0, i32 10, !dbg !4886
  %85 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number67, align 8, !dbg !4886, !tbaa !2261
  store %struct.PyNumberMethods* %85, %struct.PyNumberMethods** %mz, align 8, !dbg !4887, !tbaa !1829
  %86 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %mz, align 8, !dbg !4888, !tbaa !1829
  %cmp68 = icmp ne %struct.PyNumberMethods* %86, null, !dbg !4889
  br i1 %cmp68, label %if.then.69, label %if.end.95, !dbg !4890

if.then.69:                                       ; preds = %if.end.65
  %87 = load i32, i32* %op_slot.addr, align 4, !dbg !4891, !tbaa !2764
  %idxprom70 = sext i32 %87 to i64, !dbg !4892
  %88 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %mz, align 8, !dbg !4893, !tbaa !1829
  %89 = bitcast %struct.PyNumberMethods* %88 to i8*, !dbg !4894
  %arrayidx71 = getelementptr i8, i8* %89, i64 %idxprom70, !dbg !4892
  %90 = bitcast i8* %arrayidx71 to %struct._object* (%struct._object*, %struct._object*, %struct._object*)**, !dbg !4895
  %91 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %90, align 8, !dbg !4896, !tbaa !1829
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %91, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotz, align 8, !dbg !4897, !tbaa !1829
  %92 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotz, align 8, !dbg !4898, !tbaa !1829
  %93 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotv, align 8, !dbg !4900, !tbaa !1829
  %cmp72 = icmp eq %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %92, %93, !dbg !4901
  br i1 %cmp72, label %if.then.74, label %lor.lhs.false, !dbg !4902

lor.lhs.false:                                    ; preds = %if.then.69
  %94 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotz, align 8, !dbg !4903, !tbaa !1829
  %95 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotw, align 8, !dbg !4905, !tbaa !1829
  %cmp73 = icmp eq %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %94, %95, !dbg !4906
  br i1 %cmp73, label %if.then.74, label %if.end.75, !dbg !4907

if.then.74:                                       ; preds = %lor.lhs.false, %if.then.69
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotz, align 8, !dbg !4908, !tbaa !1829
  br label %if.end.75, !dbg !4909

if.end.75:                                        ; preds = %if.then.74, %lor.lhs.false
  %96 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotz, align 8, !dbg !4910, !tbaa !1829
  %tobool76 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %96, null, !dbg !4910
  br i1 %tobool76, label %if.then.77, label %if.end.94, !dbg !4911

if.then.77:                                       ; preds = %if.end.75
  %97 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotz, align 8, !dbg !4912, !tbaa !1829
  %98 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4913, !tbaa !1829
  %99 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4914, !tbaa !1829
  %100 = load %struct._object*, %struct._object** %z.addr, align 8, !dbg !4915, !tbaa !1829
  %call78 = call %struct._object* %97(%struct._object* %98, %struct._object* %99, %struct._object* %100), !dbg !4912
  store %struct._object* %call78, %struct._object** %x, align 8, !dbg !4916, !tbaa !1829
  %101 = load %struct._object*, %struct._object** %x, align 8, !dbg !4917, !tbaa !1829
  %cmp79 = icmp ne %struct._object* %101, @_Py_NotImplementedStruct, !dbg !4919
  br i1 %cmp79, label %if.then.80, label %if.end.81, !dbg !4920

if.then.80:                                       ; preds = %if.then.77
  %102 = load %struct._object*, %struct._object** %x, align 8, !dbg !4921, !tbaa !1829
  store %struct._object* %102, %struct._object** %retval, !dbg !4922
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4922

if.end.81:                                        ; preds = %if.then.77
  br label %do.body.82, !dbg !4923

do.body.82:                                       ; preds = %if.end.81
  %103 = bitcast %struct._object** %_py_decref_tmp83 to i8*, !dbg !4924
  call void @llvm.lifetime.start(i64 8, i8* %103) #2, !dbg !4924
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp83, metadata !1645, metadata !1833), !dbg !4926
  %104 = load %struct._object*, %struct._object** %x, align 8, !dbg !4927, !tbaa !1829
  store %struct._object* %104, %struct._object** %_py_decref_tmp83, align 8, !dbg !4926, !tbaa !1829
  %105 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8, !dbg !4928, !tbaa !1829
  %ob_refcnt84 = getelementptr inbounds %struct._object, %struct._object* %105, i32 0, i32 0, !dbg !4930
  %106 = load i64, i64* %ob_refcnt84, align 8, !dbg !4931, !tbaa !1853
  %dec85 = add i64 %106, -1, !dbg !4931
  store i64 %dec85, i64* %ob_refcnt84, align 8, !dbg !4931, !tbaa !1853
  %cmp86 = icmp ne i64 %dec85, 0, !dbg !4932
  br i1 %cmp86, label %if.then.87, label %if.else.88, !dbg !4933

if.then.87:                                       ; preds = %do.body.82
  br label %if.end.91, !dbg !4934

if.else.88:                                       ; preds = %do.body.82
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8, !dbg !4936, !tbaa !1829
  %ob_type89 = getelementptr inbounds %struct._object, %struct._object* %107, i32 0, i32 1, !dbg !4938
  %108 = load %struct._typeobject*, %struct._typeobject** %ob_type89, align 8, !dbg !4938, !tbaa !1845
  %tp_dealloc90 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %108, i32 0, i32 4, !dbg !4939
  %109 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc90, align 8, !dbg !4939, !tbaa !2033
  %110 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8, !dbg !4940, !tbaa !1829
  call void %109(%struct._object* %110), !dbg !4941
  br label %if.end.91

if.end.91:                                        ; preds = %if.else.88, %if.then.87
  %111 = bitcast %struct._object** %_py_decref_tmp83 to i8*, !dbg !4942
  call void @llvm.lifetime.end(i64 8, i8* %111) #2, !dbg !4942
  br label %do.cond.92, !dbg !4944

do.cond.92:                                       ; preds = %if.end.91
  br label %do.end.93, !dbg !4945

do.end.93:                                        ; preds = %do.cond.92
  br label %if.end.94, !dbg !4947

if.end.94:                                        ; preds = %do.end.93, %if.end.75
  br label %if.end.95, !dbg !4948

if.end.95:                                        ; preds = %if.end.94, %if.end.65
  %112 = load %struct._object*, %struct._object** %z.addr, align 8, !dbg !4949, !tbaa !1829
  %cmp96 = icmp eq %struct._object* %112, @_Py_NoneStruct, !dbg !4951
  br i1 %cmp96, label %if.then.97, label %if.else.102, !dbg !4952

if.then.97:                                       ; preds = %if.end.95
  %113 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !4953, !tbaa !1829
  %114 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4954, !tbaa !1829
  %ob_type98 = getelementptr inbounds %struct._object, %struct._object* %114, i32 0, i32 1, !dbg !4955
  %115 = load %struct._typeobject*, %struct._typeobject** %ob_type98, align 8, !dbg !4955, !tbaa !1845
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %115, i32 0, i32 1, !dbg !4956
  %116 = load i8*, i8** %tp_name, align 8, !dbg !4956, !tbaa !2094
  %117 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4957, !tbaa !1829
  %ob_type99 = getelementptr inbounds %struct._object, %struct._object* %117, i32 0, i32 1, !dbg !4958
  %118 = load %struct._typeobject*, %struct._typeobject** %ob_type99, align 8, !dbg !4958, !tbaa !1845
  %tp_name100 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %118, i32 0, i32 1, !dbg !4959
  %119 = load i8*, i8** %tp_name100, align 8, !dbg !4959, !tbaa !2094
  %call101 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %113, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.86, i32 0, i32 0), i8* %116, i8* %119), !dbg !4960
  br label %if.end.110, !dbg !4960

if.else.102:                                      ; preds = %if.end.95
  %120 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !4961, !tbaa !1829
  %121 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4962, !tbaa !1829
  %ob_type103 = getelementptr inbounds %struct._object, %struct._object* %121, i32 0, i32 1, !dbg !4963
  %122 = load %struct._typeobject*, %struct._typeobject** %ob_type103, align 8, !dbg !4963, !tbaa !1845
  %tp_name104 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %122, i32 0, i32 1, !dbg !4964
  %123 = load i8*, i8** %tp_name104, align 8, !dbg !4964, !tbaa !2094
  %124 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4965, !tbaa !1829
  %ob_type105 = getelementptr inbounds %struct._object, %struct._object* %124, i32 0, i32 1, !dbg !4966
  %125 = load %struct._typeobject*, %struct._typeobject** %ob_type105, align 8, !dbg !4966, !tbaa !1845
  %tp_name106 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %125, i32 0, i32 1, !dbg !4967
  %126 = load i8*, i8** %tp_name106, align 8, !dbg !4967, !tbaa !2094
  %127 = load %struct._object*, %struct._object** %z.addr, align 8, !dbg !4968, !tbaa !1829
  %ob_type107 = getelementptr inbounds %struct._object, %struct._object* %127, i32 0, i32 1, !dbg !4969
  %128 = load %struct._typeobject*, %struct._typeobject** %ob_type107, align 8, !dbg !4969, !tbaa !1845
  %tp_name108 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %128, i32 0, i32 1, !dbg !4970
  %129 = load i8*, i8** %tp_name108, align 8, !dbg !4970, !tbaa !2094
  %call109 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %120, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.87, i32 0, i32 0), i8* %123, i8* %126, i8* %129), !dbg !4971
  br label %if.end.110

if.end.110:                                       ; preds = %if.else.102, %if.then.97
  store %struct._object* null, %struct._object** %retval, !dbg !4972
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4972

cleanup:                                          ; preds = %if.end.110, %if.then.80, %if.then.51, %if.then.32, %if.then.23
  %130 = bitcast %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotz to i8*, !dbg !4973
  call void @llvm.lifetime.end(i64 8, i8* %130) #2, !dbg !4973
  %131 = bitcast %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotw to i8*, !dbg !4973
  call void @llvm.lifetime.end(i64 8, i8* %131) #2, !dbg !4973
  %132 = bitcast %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %slotv to i8*, !dbg !4973
  call void @llvm.lifetime.end(i64 8, i8* %132) #2, !dbg !4973
  %133 = bitcast %struct._object** %x to i8*, !dbg !4973
  call void @llvm.lifetime.end(i64 8, i8* %133) #2, !dbg !4973
  %134 = bitcast %struct.PyNumberMethods** %mz to i8*, !dbg !4973
  call void @llvm.lifetime.end(i64 8, i8* %134) #2, !dbg !4973
  %135 = bitcast %struct.PyNumberMethods** %mw to i8*, !dbg !4973
  call void @llvm.lifetime.end(i64 8, i8* %135) #2, !dbg !4973
  %136 = bitcast %struct.PyNumberMethods** %mv to i8*, !dbg !4973
  call void @llvm.lifetime.end(i64 8, i8* %136) #2, !dbg !4973
  %137 = load %struct._object*, %struct._object** %retval, !dbg !4973
  ret %struct._object* %137, !dbg !4973
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_InPlaceOr(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !770, metadata !1833), !dbg !4974
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !771, metadata !1833), !dbg !4975
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4976, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4977, !tbaa !1829
  %call = call %struct._object* @binary_iop(%struct._object* %0, %struct._object* %1, i32 224, i32 120, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0)), !dbg !4978
  ret %struct._object* %call, !dbg !4979
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @binary_iop(%struct._object* %v, %struct._object* %w, i32 %iop_slot, i32 %op_slot, i8* %op_name) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %iop_slot.addr = alloca i32, align 4
  %op_slot.addr = alloca i32, align 4
  %op_name.addr = alloca i8*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !1655, metadata !1833), !dbg !4980
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !1656, metadata !1833), !dbg !4981
  store i32 %iop_slot, i32* %iop_slot.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %iop_slot.addr, metadata !1657, metadata !1833), !dbg !4982
  store i32 %op_slot, i32* %op_slot.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %op_slot.addr, metadata !1658, metadata !1833), !dbg !4983
  store i8* %op_name, i8** %op_name.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %op_name.addr, metadata !1659, metadata !1833), !dbg !4984
  %0 = bitcast %struct._object** %result to i8*, !dbg !4985
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !4985
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !1660, metadata !1833), !dbg !4986
  %1 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !4987, !tbaa !1829
  %2 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !4988, !tbaa !1829
  %3 = load i32, i32* %iop_slot.addr, align 4, !dbg !4989, !tbaa !2764
  %4 = load i32, i32* %op_slot.addr, align 4, !dbg !4990, !tbaa !2764
  %call = call %struct._object* @binary_iop1(%struct._object* %1, %struct._object* %2, i32 %3, i32 %4), !dbg !4991
  store %struct._object* %call, %struct._object** %result, align 8, !dbg !4986, !tbaa !1829
  %5 = load %struct._object*, %struct._object** %result, align 8, !dbg !4992, !tbaa !1829
  %cmp = icmp eq %struct._object* %5, @_Py_NotImplementedStruct, !dbg !4993
  br i1 %cmp, label %if.then, label %if.end.4, !dbg !4994

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !4995

do.body:                                          ; preds = %if.then
  %6 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4996
  call void @llvm.lifetime.start(i64 8, i8* %6) #2, !dbg !4996
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1661, metadata !1833), !dbg !4998
  %7 = load %struct._object*, %struct._object** %result, align 8, !dbg !4999, !tbaa !1829
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8, !dbg !4998, !tbaa !1829
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5000, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0, !dbg !5002
  %9 = load i64, i64* %ob_refcnt, align 8, !dbg !5003, !tbaa !1853
  %dec = add i64 %9, -1, !dbg !5003
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5003, !tbaa !1853
  %cmp1 = icmp ne i64 %dec, 0, !dbg !5004
  br i1 %cmp1, label %if.then.2, label %if.else, !dbg !5005

if.then.2:                                        ; preds = %do.body
  br label %if.end, !dbg !5006

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5008, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !5010
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5010, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4, !dbg !5011
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5011, !tbaa !2033
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5012, !tbaa !1829
  call void %12(%struct._object* %13), !dbg !5013
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  %14 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5014
  call void @llvm.lifetime.end(i64 8, i8* %14) #2, !dbg !5014
  br label %do.cond, !dbg !5016

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !5017

do.end:                                           ; preds = %do.cond
  %15 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5019, !tbaa !1829
  %16 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5020, !tbaa !1829
  %17 = load i8*, i8** %op_name.addr, align 8, !dbg !5021, !tbaa !1829
  %call3 = call %struct._object* @binop_type_error(%struct._object* %15, %struct._object* %16, i8* %17), !dbg !5022
  store %struct._object* %call3, %struct._object** %retval, !dbg !5023
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5023

if.end.4:                                         ; preds = %entry
  %18 = load %struct._object*, %struct._object** %result, align 8, !dbg !5024, !tbaa !1829
  store %struct._object* %18, %struct._object** %retval, !dbg !5025
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5025

cleanup:                                          ; preds = %if.end.4, %do.end
  %19 = bitcast %struct._object** %result to i8*, !dbg !5026
  call void @llvm.lifetime.end(i64 8, i8* %19) #2, !dbg !5026
  %20 = load %struct._object*, %struct._object** %retval, !dbg !5026
  ret %struct._object* %20, !dbg !5026
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_InPlaceXor(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !774, metadata !1833), !dbg !5027
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !775, metadata !1833), !dbg !5028
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5029, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5030, !tbaa !1829
  %call = call %struct._object* @binary_iop(%struct._object* %0, %struct._object* %1, i32 216, i32 112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0)), !dbg !5031
  ret %struct._object* %call, !dbg !5032
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_InPlaceAnd(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !778, metadata !1833), !dbg !5033
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !779, metadata !1833), !dbg !5034
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5035, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5036, !tbaa !1829
  %call = call %struct._object* @binary_iop(%struct._object* %0, %struct._object* %1, i32 208, i32 104, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0)), !dbg !5037
  ret %struct._object* %call, !dbg !5038
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_InPlaceLshift(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !782, metadata !1833), !dbg !5039
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !783, metadata !1833), !dbg !5040
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5041, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5042, !tbaa !1829
  %call = call %struct._object* @binary_iop(%struct._object* %0, %struct._object* %1, i32 192, i32 88, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34, i32 0, i32 0)), !dbg !5043
  ret %struct._object* %call, !dbg !5044
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_InPlaceRshift(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !786, metadata !1833), !dbg !5045
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !787, metadata !1833), !dbg !5046
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5047, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5048, !tbaa !1829
  %call = call %struct._object* @binary_iop(%struct._object* %0, %struct._object* %1, i32 200, i32 96, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.35, i32 0, i32 0)), !dbg !5049
  ret %struct._object* %call, !dbg !5050
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_InPlaceSubtract(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !790, metadata !1833), !dbg !5051
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !791, metadata !1833), !dbg !5052
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5053, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5054, !tbaa !1829
  %call = call %struct._object* @binary_iop(%struct._object* %0, %struct._object* %1, i32 160, i32 8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.36, i32 0, i32 0)), !dbg !5055
  ret %struct._object* %call, !dbg !5056
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_InPlaceFloorDivide(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !794, metadata !1833), !dbg !5057
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !795, metadata !1833), !dbg !5058
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5059, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5060, !tbaa !1829
  %call = call %struct._object* @binary_iop(%struct._object* %0, %struct._object* %1, i32 248, i32 232, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i32 0, i32 0)), !dbg !5061
  ret %struct._object* %call, !dbg !5062
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_InPlaceTrueDivide(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !798, metadata !1833), !dbg !5063
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !799, metadata !1833), !dbg !5064
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5065, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5066, !tbaa !1829
  %call = call %struct._object* @binary_iop(%struct._object* %0, %struct._object* %1, i32 256, i32 240, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i32 0, i32 0)), !dbg !5067
  ret %struct._object* %call, !dbg !5068
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_InPlaceAdd(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %m = alloca %struct.PySequenceMethods*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %f = alloca %struct._object* (%struct._object*, %struct._object*)*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !802, metadata !1833), !dbg !5069
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !803, metadata !1833), !dbg !5070
  %0 = bitcast %struct._object** %result to i8*, !dbg !5071
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !5071
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !804, metadata !1833), !dbg !5072
  %1 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5073, !tbaa !1829
  %2 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5074, !tbaa !1829
  %call = call %struct._object* @binary_iop1(%struct._object* %1, %struct._object* %2, i32 152, i32 0), !dbg !5075
  store %struct._object* %call, %struct._object** %result, align 8, !dbg !5072, !tbaa !1829
  %3 = load %struct._object*, %struct._object** %result, align 8, !dbg !5076, !tbaa !1829
  %cmp = icmp eq %struct._object* %3, @_Py_NotImplementedStruct, !dbg !5077
  br i1 %cmp, label %if.then, label %if.end.18, !dbg !5078

if.then:                                          ; preds = %entry
  %4 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !5079
  call void @llvm.lifetime.start(i64 8, i8* %4) #2, !dbg !5079
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %m, metadata !805, metadata !1833), !dbg !5080
  %5 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5081, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !5082
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5082, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 11, !dbg !5083
  %7 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !5083, !tbaa !1876
  store %struct.PySequenceMethods* %7, %struct.PySequenceMethods** %m, align 8, !dbg !5080, !tbaa !1829
  br label %do.body, !dbg !5084

do.body:                                          ; preds = %if.then
  %8 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5085
  call void @llvm.lifetime.start(i64 8, i8* %8) #2, !dbg !5085
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !808, metadata !1833), !dbg !5087
  %9 = load %struct._object*, %struct._object** %result, align 8, !dbg !5088, !tbaa !1829
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8, !dbg !5087, !tbaa !1829
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5089, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0, !dbg !5091
  %11 = load i64, i64* %ob_refcnt, align 8, !dbg !5092, !tbaa !1853
  %dec = add i64 %11, -1, !dbg !5092
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5092, !tbaa !1853
  %cmp1 = icmp ne i64 %dec, 0, !dbg !5093
  br i1 %cmp1, label %if.then.2, label %if.else, !dbg !5094

if.then.2:                                        ; preds = %do.body
  br label %if.end, !dbg !5095

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5097, !tbaa !1829
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1, !dbg !5099
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8, !dbg !5099, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4, !dbg !5100
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5100, !tbaa !2033
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5101, !tbaa !1829
  call void %14(%struct._object* %15), !dbg !5102
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  %16 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5103
  call void @llvm.lifetime.end(i64 8, i8* %16) #2, !dbg !5103
  br label %do.cond, !dbg !5105

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !5106

do.end:                                           ; preds = %do.cond
  %17 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !5108, !tbaa !1829
  %cmp4 = icmp ne %struct.PySequenceMethods* %17, null, !dbg !5109
  br i1 %cmp4, label %if.then.5, label %if.end.13, !dbg !5110

if.then.5:                                        ; preds = %do.end
  %18 = bitcast %struct._object* (%struct._object*, %struct._object*)** %f to i8*, !dbg !5111
  call void @llvm.lifetime.start(i64 8, i8* %18) #2, !dbg !5111
  call void @llvm.dbg.declare(metadata %struct._object* (%struct._object*, %struct._object*)** %f, metadata !810, metadata !1833), !dbg !5112
  store %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)** %f, align 8, !dbg !5112, !tbaa !1829
  %19 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !5113, !tbaa !1829
  %sq_inplace_concat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %19, i32 0, i32 8, !dbg !5114
  %20 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_inplace_concat, align 8, !dbg !5114, !tbaa !5115
  store %struct._object* (%struct._object*, %struct._object*)* %20, %struct._object* (%struct._object*, %struct._object*)** %f, align 8, !dbg !5116, !tbaa !1829
  %21 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %f, align 8, !dbg !5117, !tbaa !1829
  %cmp6 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %21, null, !dbg !5119
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !5120

if.then.7:                                        ; preds = %if.then.5
  %22 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !5121, !tbaa !1829
  %sq_concat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %22, i32 0, i32 1, !dbg !5122
  %23 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_concat, align 8, !dbg !5122, !tbaa !4334
  store %struct._object* (%struct._object*, %struct._object*)* %23, %struct._object* (%struct._object*, %struct._object*)** %f, align 8, !dbg !5123, !tbaa !1829
  br label %if.end.8, !dbg !5124

if.end.8:                                         ; preds = %if.then.7, %if.then.5
  %24 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %f, align 8, !dbg !5125, !tbaa !1829
  %cmp9 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %24, null, !dbg !5127
  br i1 %cmp9, label %if.then.10, label %if.end.12, !dbg !5128

if.then.10:                                       ; preds = %if.end.8
  %25 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %f, align 8, !dbg !5129, !tbaa !1829
  %26 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5130, !tbaa !1829
  %27 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5131, !tbaa !1829
  %call11 = call %struct._object* %25(%struct._object* %26, %struct._object* %27), !dbg !5132
  store %struct._object* %call11, %struct._object** %retval, !dbg !5133
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5133

if.end.12:                                        ; preds = %if.end.8
  store i32 0, i32* %cleanup.dest.slot, !dbg !5134
  br label %cleanup, !dbg !5134

cleanup:                                          ; preds = %if.end.12, %if.then.10
  %28 = bitcast %struct._object* (%struct._object*, %struct._object*)** %f to i8*, !dbg !5135
  call void @llvm.lifetime.end(i64 8, i8* %28) #2, !dbg !5135
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.13, !dbg !5137

if.end.13:                                        ; preds = %cleanup.cont, %do.end
  %29 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5138, !tbaa !1829
  %30 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5139, !tbaa !1829
  %call14 = call %struct._object* @binop_type_error(%struct._object* %29, %struct._object* %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.39, i32 0, i32 0)), !dbg !5140
  store %struct._object* %call14, %struct._object** %result, align 8, !dbg !5141, !tbaa !1829
  store i32 0, i32* %cleanup.dest.slot, !dbg !5142
  br label %cleanup.15, !dbg !5142

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.15

cleanup.15:                                       ; preds = %NewDefault, %if.end.13
  %31 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !5143
  call void @llvm.lifetime.end(i64 8, i8* %31) #2, !dbg !5143
  %cleanup.dest.16 = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.2

LeafBlock.2:                                      ; preds = %cleanup.15
  %SwitchLeaf3 = icmp eq i32 %cleanup.dest.16, 0
  br i1 %SwitchLeaf3, label %cleanup.cont.17, label %NewDefault.1

cleanup.cont.17:                                  ; preds = %LeafBlock.2
  br label %if.end.18, !dbg !5145

if.end.18:                                        ; preds = %cleanup.cont.17, %entry
  %32 = load %struct._object*, %struct._object** %result, align 8, !dbg !5146, !tbaa !1829
  store %struct._object* %32, %struct._object** %retval, !dbg !5147
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.19, !dbg !5147

NewDefault.1:                                     ; preds = %LeafBlock.2
  br label %cleanup.19

cleanup.19:                                       ; preds = %NewDefault.1, %if.end.18
  %33 = bitcast %struct._object** %result to i8*, !dbg !5148
  call void @llvm.lifetime.end(i64 8, i8* %33) #2, !dbg !5148
  %34 = load %struct._object*, %struct._object** %retval, !dbg !5148
  ret %struct._object* %34, !dbg !5148
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @binary_iop1(%struct._object* %v, %struct._object* %w, i32 %iop_slot, i32 %op_slot) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %iop_slot.addr = alloca i32, align 4
  %op_slot.addr = alloca i32, align 4
  %mv = alloca %struct.PyNumberMethods*, align 8
  %slot = alloca %struct._object* (%struct._object*, %struct._object*)*, align 8
  %x = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !1669, metadata !1833), !dbg !5149
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !1670, metadata !1833), !dbg !5150
  store i32 %iop_slot, i32* %iop_slot.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %iop_slot.addr, metadata !1671, metadata !1833), !dbg !5151
  store i32 %op_slot, i32* %op_slot.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %op_slot.addr, metadata !1672, metadata !1833), !dbg !5152
  %0 = bitcast %struct.PyNumberMethods** %mv to i8*, !dbg !5153
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !5153
  call void @llvm.dbg.declare(metadata %struct.PyNumberMethods** %mv, metadata !1673, metadata !1833), !dbg !5154
  %1 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5155, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !5156
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5156, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 10, !dbg !5157
  %3 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !5157, !tbaa !2261
  store %struct.PyNumberMethods* %3, %struct.PyNumberMethods** %mv, align 8, !dbg !5154, !tbaa !1829
  %4 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %mv, align 8, !dbg !5158, !tbaa !1829
  %cmp = icmp ne %struct.PyNumberMethods* %4, null, !dbg !5159
  br i1 %cmp, label %if.then, label %if.end.12, !dbg !5160

if.then:                                          ; preds = %entry
  %5 = bitcast %struct._object* (%struct._object*, %struct._object*)** %slot to i8*, !dbg !5161
  call void @llvm.lifetime.start(i64 8, i8* %5) #2, !dbg !5161
  call void @llvm.dbg.declare(metadata %struct._object* (%struct._object*, %struct._object*)** %slot, metadata !1674, metadata !1833), !dbg !5162
  %6 = load i32, i32* %iop_slot.addr, align 4, !dbg !5163, !tbaa !2764
  %idxprom = sext i32 %6 to i64, !dbg !5164
  %7 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %mv, align 8, !dbg !5165, !tbaa !1829
  %8 = bitcast %struct.PyNumberMethods* %7 to i8*, !dbg !5166
  %arrayidx = getelementptr i8, i8* %8, i64 %idxprom, !dbg !5164
  %9 = bitcast i8* %arrayidx to %struct._object* (%struct._object*, %struct._object*)**, !dbg !5167
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %9, align 8, !dbg !5168, !tbaa !1829
  store %struct._object* (%struct._object*, %struct._object*)* %10, %struct._object* (%struct._object*, %struct._object*)** %slot, align 8, !dbg !5162, !tbaa !1829
  %11 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %slot, align 8, !dbg !5169, !tbaa !1829
  %tobool = icmp ne %struct._object* (%struct._object*, %struct._object*)* %11, null, !dbg !5169
  br i1 %tobool, label %if.then.1, label %if.end.8, !dbg !5170

if.then.1:                                        ; preds = %if.then
  %12 = bitcast %struct._object** %x to i8*, !dbg !5171
  call void @llvm.lifetime.start(i64 8, i8* %12) #2, !dbg !5171
  call void @llvm.dbg.declare(metadata %struct._object** %x, metadata !1677, metadata !1833), !dbg !5172
  %13 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %slot, align 8, !dbg !5173, !tbaa !1829
  %14 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5174, !tbaa !1829
  %15 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5175, !tbaa !1829
  %call = call %struct._object* %13(%struct._object* %14, %struct._object* %15), !dbg !5176
  store %struct._object* %call, %struct._object** %x, align 8, !dbg !5172, !tbaa !1829
  %16 = load %struct._object*, %struct._object** %x, align 8, !dbg !5177, !tbaa !1829
  %cmp2 = icmp ne %struct._object* %16, @_Py_NotImplementedStruct, !dbg !5179
  br i1 %cmp2, label %if.then.3, label %if.end, !dbg !5180

if.then.3:                                        ; preds = %if.then.1
  %17 = load %struct._object*, %struct._object** %x, align 8, !dbg !5181, !tbaa !1829
  store %struct._object* %17, %struct._object** %retval, !dbg !5183
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5183

if.end:                                           ; preds = %if.then.1
  br label %do.body, !dbg !5184

do.body:                                          ; preds = %if.end
  %18 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5185
  call void @llvm.lifetime.start(i64 8, i8* %18) #2, !dbg !5185
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1680, metadata !1833), !dbg !5187
  %19 = load %struct._object*, %struct._object** %x, align 8, !dbg !5188, !tbaa !1829
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8, !dbg !5187, !tbaa !1829
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5189, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0, !dbg !5191
  %21 = load i64, i64* %ob_refcnt, align 8, !dbg !5192, !tbaa !1853
  %dec = add i64 %21, -1, !dbg !5192
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5192, !tbaa !1853
  %cmp4 = icmp ne i64 %dec, 0, !dbg !5193
  br i1 %cmp4, label %if.then.5, label %if.else, !dbg !5194

if.then.5:                                        ; preds = %do.body
  br label %if.end.7, !dbg !5195

if.else:                                          ; preds = %do.body
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5197, !tbaa !1829
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1, !dbg !5199
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8, !dbg !5199, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4, !dbg !5200
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5200, !tbaa !2033
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5201, !tbaa !1829
  call void %24(%struct._object* %25), !dbg !5202
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.5
  %26 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5203
  call void @llvm.lifetime.end(i64 8, i8* %26) #2, !dbg !5203
  br label %do.cond, !dbg !5205

do.cond:                                          ; preds = %if.end.7
  br label %do.end, !dbg !5206

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %cleanup.dest.slot, !dbg !5208
  br label %cleanup, !dbg !5208

cleanup:                                          ; preds = %do.end, %if.then.3
  %27 = bitcast %struct._object** %x to i8*, !dbg !5209
  call void @llvm.lifetime.end(i64 8, i8* %27) #2, !dbg !5209
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.8, !dbg !5211

if.end.8:                                         ; preds = %cleanup.cont, %if.then
  store i32 0, i32* %cleanup.dest.slot, !dbg !5212
  br label %cleanup.9, !dbg !5212

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.9

cleanup.9:                                        ; preds = %NewDefault, %if.end.8
  %28 = bitcast %struct._object* (%struct._object*, %struct._object*)** %slot to i8*, !dbg !5213
  call void @llvm.lifetime.end(i64 8, i8* %28) #2, !dbg !5213
  %cleanup.dest.10 = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.2

LeafBlock.2:                                      ; preds = %cleanup.9
  %SwitchLeaf3 = icmp eq i32 %cleanup.dest.10, 0
  br i1 %SwitchLeaf3, label %cleanup.cont.11, label %NewDefault.1

cleanup.cont.11:                                  ; preds = %LeafBlock.2
  br label %if.end.12, !dbg !5215

if.end.12:                                        ; preds = %cleanup.cont.11, %entry
  %29 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5216, !tbaa !1829
  %30 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5217, !tbaa !1829
  %31 = load i32, i32* %op_slot.addr, align 4, !dbg !5218, !tbaa !2764
  %call13 = call %struct._object* @binary_op1(%struct._object* %29, %struct._object* %30, i32 %31), !dbg !5219
  store %struct._object* %call13, %struct._object** %retval, !dbg !5220
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.14, !dbg !5220

NewDefault.1:                                     ; preds = %LeafBlock.2
  br label %cleanup.14

cleanup.14:                                       ; preds = %NewDefault.1, %if.end.12
  %32 = bitcast %struct.PyNumberMethods** %mv to i8*, !dbg !5221
  call void @llvm.lifetime.end(i64 8, i8* %32) #2, !dbg !5221
  %33 = load %struct._object*, %struct._object** %retval, !dbg !5221
  ret %struct._object* %33, !dbg !5221
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_InPlaceMultiply(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %f = alloca %struct._object* (%struct._object*, i64)*, align 8
  %mv = alloca %struct.PySequenceMethods*, align 8
  %mw = alloca %struct.PySequenceMethods*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !815, metadata !1833), !dbg !5222
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !816, metadata !1833), !dbg !5223
  %0 = bitcast %struct._object** %result to i8*, !dbg !5224
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !5224
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !817, metadata !1833), !dbg !5225
  %1 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5226, !tbaa !1829
  %2 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5227, !tbaa !1829
  %call = call %struct._object* @binary_iop1(%struct._object* %1, %struct._object* %2, i32 168, i32 16), !dbg !5228
  store %struct._object* %call, %struct._object** %result, align 8, !dbg !5225, !tbaa !1829
  %3 = load %struct._object*, %struct._object** %result, align 8, !dbg !5229, !tbaa !1829
  %cmp = icmp eq %struct._object* %3, @_Py_NotImplementedStruct, !dbg !5230
  br i1 %cmp, label %if.then, label %if.end.28, !dbg !5231

if.then:                                          ; preds = %entry
  %4 = bitcast %struct._object* (%struct._object*, i64)** %f to i8*, !dbg !5232
  call void @llvm.lifetime.start(i64 8, i8* %4) #2, !dbg !5232
  call void @llvm.dbg.declare(metadata %struct._object* (%struct._object*, i64)** %f, metadata !818, metadata !1833), !dbg !5233
  store %struct._object* (%struct._object*, i64)* null, %struct._object* (%struct._object*, i64)** %f, align 8, !dbg !5233, !tbaa !1829
  %5 = bitcast %struct.PySequenceMethods** %mv to i8*, !dbg !5234
  call void @llvm.lifetime.start(i64 8, i8* %5) #2, !dbg !5234
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %mv, metadata !821, metadata !1833), !dbg !5235
  %6 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5236, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1, !dbg !5237
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5237, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 11, !dbg !5238
  %8 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !5238, !tbaa !1876
  store %struct.PySequenceMethods* %8, %struct.PySequenceMethods** %mv, align 8, !dbg !5235, !tbaa !1829
  %9 = bitcast %struct.PySequenceMethods** %mw to i8*, !dbg !5239
  call void @llvm.lifetime.start(i64 8, i8* %9) #2, !dbg !5239
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %mw, metadata !822, metadata !1833), !dbg !5240
  %10 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5241, !tbaa !1829
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !5242
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !5242, !tbaa !1845
  %tp_as_sequence2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 11, !dbg !5243
  %12 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence2, align 8, !dbg !5243, !tbaa !1876
  store %struct.PySequenceMethods* %12, %struct.PySequenceMethods** %mw, align 8, !dbg !5240, !tbaa !1829
  br label %do.body, !dbg !5244

do.body:                                          ; preds = %if.then
  %13 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5245
  call void @llvm.lifetime.start(i64 8, i8* %13) #2, !dbg !5245
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !823, metadata !1833), !dbg !5247
  %14 = load %struct._object*, %struct._object** %result, align 8, !dbg !5248, !tbaa !1829
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8, !dbg !5247, !tbaa !1829
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5249, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0, !dbg !5251
  %16 = load i64, i64* %ob_refcnt, align 8, !dbg !5252, !tbaa !1853
  %dec = add i64 %16, -1, !dbg !5252
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5252, !tbaa !1853
  %cmp3 = icmp ne i64 %dec, 0, !dbg !5253
  br i1 %cmp3, label %if.then.4, label %if.else, !dbg !5254

if.then.4:                                        ; preds = %do.body
  br label %if.end, !dbg !5255

if.else:                                          ; preds = %do.body
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5257, !tbaa !1829
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1, !dbg !5259
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8, !dbg !5259, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4, !dbg !5260
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5260, !tbaa !2033
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5261, !tbaa !1829
  call void %19(%struct._object* %20), !dbg !5262
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  %21 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5263
  call void @llvm.lifetime.end(i64 8, i8* %21) #2, !dbg !5263
  br label %do.cond, !dbg !5265

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !5266

do.end:                                           ; preds = %do.cond
  %22 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %mv, align 8, !dbg !5268, !tbaa !1829
  %cmp6 = icmp ne %struct.PySequenceMethods* %22, null, !dbg !5270
  br i1 %cmp6, label %if.then.7, label %if.else.15, !dbg !5271

if.then.7:                                        ; preds = %do.end
  %23 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %mv, align 8, !dbg !5272, !tbaa !1829
  %sq_inplace_repeat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %23, i32 0, i32 9, !dbg !5274
  %24 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_inplace_repeat, align 8, !dbg !5274, !tbaa !5275
  store %struct._object* (%struct._object*, i64)* %24, %struct._object* (%struct._object*, i64)** %f, align 8, !dbg !5276, !tbaa !1829
  %25 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %f, align 8, !dbg !5277, !tbaa !1829
  %cmp8 = icmp eq %struct._object* (%struct._object*, i64)* %25, null, !dbg !5279
  br i1 %cmp8, label %if.then.9, label %if.end.10, !dbg !5280

if.then.9:                                        ; preds = %if.then.7
  %26 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %mv, align 8, !dbg !5281, !tbaa !1829
  %sq_repeat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %26, i32 0, i32 2, !dbg !5282
  %27 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat, align 8, !dbg !5282, !tbaa !4595
  store %struct._object* (%struct._object*, i64)* %27, %struct._object* (%struct._object*, i64)** %f, align 8, !dbg !5283, !tbaa !1829
  br label %if.end.10, !dbg !5284

if.end.10:                                        ; preds = %if.then.9, %if.then.7
  %28 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %f, align 8, !dbg !5285, !tbaa !1829
  %cmp11 = icmp ne %struct._object* (%struct._object*, i64)* %28, null, !dbg !5287
  br i1 %cmp11, label %if.then.12, label %if.end.14, !dbg !5288

if.then.12:                                       ; preds = %if.end.10
  %29 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %f, align 8, !dbg !5289, !tbaa !1829
  %30 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5290, !tbaa !1829
  %31 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5291, !tbaa !1829
  %call13 = call %struct._object* @sequence_repeat(%struct._object* (%struct._object*, i64)* %29, %struct._object* %30, %struct._object* %31), !dbg !5292
  store %struct._object* %call13, %struct._object** %retval, !dbg !5293
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5293

if.end.14:                                        ; preds = %if.end.10
  br label %if.end.24, !dbg !5294

if.else.15:                                       ; preds = %do.end
  %32 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %mw, align 8, !dbg !5295, !tbaa !1829
  %cmp16 = icmp ne %struct.PySequenceMethods* %32, null, !dbg !5297
  br i1 %cmp16, label %if.then.17, label %if.end.23, !dbg !5298

if.then.17:                                       ; preds = %if.else.15
  %33 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %mw, align 8, !dbg !5299, !tbaa !1829
  %sq_repeat18 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %33, i32 0, i32 2, !dbg !5302
  %34 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat18, align 8, !dbg !5302, !tbaa !4595
  %tobool = icmp ne %struct._object* (%struct._object*, i64)* %34, null, !dbg !5299
  br i1 %tobool, label %if.then.19, label %if.end.22, !dbg !5303

if.then.19:                                       ; preds = %if.then.17
  %35 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %mw, align 8, !dbg !5304, !tbaa !1829
  %sq_repeat20 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %35, i32 0, i32 2, !dbg !5305
  %36 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat20, align 8, !dbg !5305, !tbaa !4595
  %37 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5306, !tbaa !1829
  %38 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5307, !tbaa !1829
  %call21 = call %struct._object* @sequence_repeat(%struct._object* (%struct._object*, i64)* %36, %struct._object* %37, %struct._object* %38), !dbg !5308
  store %struct._object* %call21, %struct._object** %retval, !dbg !5309
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5309

if.end.22:                                        ; preds = %if.then.17
  br label %if.end.23, !dbg !5310

if.end.23:                                        ; preds = %if.end.22, %if.else.15
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.end.14
  %39 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5311, !tbaa !1829
  %40 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5312, !tbaa !1829
  %call25 = call %struct._object* @binop_type_error(%struct._object* %39, %struct._object* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0)), !dbg !5313
  store %struct._object* %call25, %struct._object** %result, align 8, !dbg !5314, !tbaa !1829
  store i32 0, i32* %cleanup.dest.slot, !dbg !5315
  br label %cleanup, !dbg !5315

cleanup:                                          ; preds = %if.end.24, %if.then.19, %if.then.12
  %41 = bitcast %struct.PySequenceMethods** %mw to i8*, !dbg !5316
  call void @llvm.lifetime.end(i64 8, i8* %41) #2, !dbg !5316
  %42 = bitcast %struct.PySequenceMethods** %mv to i8*, !dbg !5316
  call void @llvm.lifetime.end(i64 8, i8* %42) #2, !dbg !5316
  %43 = bitcast %struct._object* (%struct._object*, i64)** %f to i8*, !dbg !5316
  call void @llvm.lifetime.end(i64 8, i8* %43) #2, !dbg !5316
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.28, !dbg !5318

if.end.28:                                        ; preds = %cleanup.cont, %entry
  %44 = load %struct._object*, %struct._object** %result, align 8, !dbg !5319, !tbaa !1829
  store %struct._object* %44, %struct._object** %retval, !dbg !5320
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.29, !dbg !5320

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.29

cleanup.29:                                       ; preds = %NewDefault, %if.end.28
  %45 = bitcast %struct._object** %result to i8*, !dbg !5321
  call void @llvm.lifetime.end(i64 8, i8* %45) #2, !dbg !5321
  %46 = load %struct._object*, %struct._object** %retval, !dbg !5321
  ret %struct._object* %46, !dbg !5321
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_InPlaceRemainder(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !827, metadata !1833), !dbg !5322
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !828, metadata !1833), !dbg !5323
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5324, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5325, !tbaa !1829
  %call = call %struct._object* @binary_iop(%struct._object* %0, %struct._object* %1, i32 176, i32 24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i32 0, i32 0)), !dbg !5326
  ret %struct._object* %call, !dbg !5327
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_InPlacePower(%struct._object* %v, %struct._object* %w, %struct._object* %z) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %z.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !831, metadata !1833), !dbg !5328
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !832, metadata !1833), !dbg !5329
  store %struct._object* %z, %struct._object** %z.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %z.addr, metadata !833, metadata !1833), !dbg !5330
  %0 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5331, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1, !dbg !5333
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5333, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 10, !dbg !5334
  %2 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !5334, !tbaa !2261
  %tobool = icmp ne %struct.PyNumberMethods* %2, null, !dbg !5331
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5335

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5336, !tbaa !1829
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1, !dbg !5337
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !5337, !tbaa !1845
  %tp_as_number2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 10, !dbg !5338
  %5 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number2, align 8, !dbg !5338, !tbaa !2261
  %nb_inplace_power = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %5, i32 0, i32 23, !dbg !5339
  %6 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_inplace_power, align 8, !dbg !5339, !tbaa !5340
  %cmp = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %6, null, !dbg !5341
  br i1 %cmp, label %if.then, label %if.else, !dbg !5342

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5343, !tbaa !1829
  %8 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5345, !tbaa !1829
  %9 = load %struct._object*, %struct._object** %z.addr, align 8, !dbg !5346, !tbaa !1829
  %call = call %struct._object* @ternary_op(%struct._object* %7, %struct._object* %8, %struct._object* %9, i32 184, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.42, i32 0, i32 0)), !dbg !5347
  store %struct._object* %call, %struct._object** %retval, !dbg !5348
  br label %return, !dbg !5348

if.else:                                          ; preds = %land.lhs.true, %entry
  %10 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !5349, !tbaa !1829
  %11 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !5351, !tbaa !1829
  %12 = load %struct._object*, %struct._object** %z.addr, align 8, !dbg !5352, !tbaa !1829
  %call3 = call %struct._object* @ternary_op(%struct._object* %10, %struct._object* %11, %struct._object* %12, i32 40, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.42, i32 0, i32 0)), !dbg !5353
  store %struct._object* %call3, %struct._object** %retval, !dbg !5354
  br label %return, !dbg !5354

return:                                           ; preds = %if.else, %if.then
  %13 = load %struct._object*, %struct._object** %retval, !dbg !5355
  ret %struct._object* %13, !dbg !5355
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Negative(%struct._object* %o) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PyNumberMethods*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !836, metadata !1833), !dbg !5356
  %0 = bitcast %struct.PyNumberMethods** %m to i8*, !dbg !5357
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !5357
  call void @llvm.dbg.declare(metadata %struct.PyNumberMethods** %m, metadata !837, metadata !1833), !dbg !5358
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5359, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !5361
  br i1 %cmp, label %if.then, label %if.end, !dbg !5362

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !5363
  store %struct._object* %call, %struct._object** %retval, !dbg !5364
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5364

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5365, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !5366
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5366, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 10, !dbg !5367
  %4 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !5367, !tbaa !2261
  store %struct.PyNumberMethods* %4, %struct.PyNumberMethods** %m, align 8, !dbg !5368, !tbaa !1829
  %5 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5369, !tbaa !1829
  %tobool = icmp ne %struct.PyNumberMethods* %5, null, !dbg !5369
  br i1 %tobool, label %land.lhs.true, label %if.end.7, !dbg !5371

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5372, !tbaa !1829
  %nb_negative = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %6, i32 0, i32 6, !dbg !5374
  %nb_negative1 = bitcast {}** %nb_negative to %struct._object* (%struct._object*)**, !dbg !5374
  %7 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_negative1, align 8, !dbg !5374, !tbaa !5375
  %tobool2 = icmp ne %struct._object* (%struct._object*)* %7, null, !dbg !5376
  br i1 %tobool2, label %if.then.3, label %if.end.7, !dbg !5377

if.then.3:                                        ; preds = %land.lhs.true
  %8 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5378, !tbaa !1829
  %nb_negative4 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %8, i32 0, i32 6, !dbg !5379
  %nb_negative5 = bitcast {}** %nb_negative4 to %struct._object* (%struct._object*)**, !dbg !5379
  %9 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_negative5, align 8, !dbg !5379, !tbaa !5375
  %10 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5380, !tbaa !1829
  %call6 = call %struct._object* %9(%struct._object* %10), !dbg !5381
  store %struct._object* %call6, %struct._object** %retval, !dbg !5382
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5382

if.end.7:                                         ; preds = %land.lhs.true, %if.end
  %11 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5383, !tbaa !1829
  %call8 = call %struct._object* @type_error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.43, i32 0, i32 0), %struct._object* %11), !dbg !5384
  store %struct._object* %call8, %struct._object** %retval, !dbg !5385
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5385

cleanup:                                          ; preds = %if.end.7, %if.then.3, %if.then
  %12 = bitcast %struct.PyNumberMethods** %m to i8*, !dbg !5386
  call void @llvm.lifetime.end(i64 8, i8* %12) #2, !dbg !5386
  %13 = load %struct._object*, %struct._object** %retval, !dbg !5386
  ret %struct._object* %13, !dbg !5386
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Positive(%struct._object* %o) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PyNumberMethods*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !840, metadata !1833), !dbg !5387
  %0 = bitcast %struct.PyNumberMethods** %m to i8*, !dbg !5388
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !5388
  call void @llvm.dbg.declare(metadata %struct.PyNumberMethods** %m, metadata !841, metadata !1833), !dbg !5389
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5390, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !5392
  br i1 %cmp, label %if.then, label %if.end, !dbg !5393

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !5394
  store %struct._object* %call, %struct._object** %retval, !dbg !5395
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5395

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5396, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !5397
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5397, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 10, !dbg !5398
  %4 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !5398, !tbaa !2261
  store %struct.PyNumberMethods* %4, %struct.PyNumberMethods** %m, align 8, !dbg !5399, !tbaa !1829
  %5 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5400, !tbaa !1829
  %tobool = icmp ne %struct.PyNumberMethods* %5, null, !dbg !5400
  br i1 %tobool, label %land.lhs.true, label %if.end.7, !dbg !5402

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5403, !tbaa !1829
  %nb_positive = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %6, i32 0, i32 7, !dbg !5405
  %nb_positive1 = bitcast {}** %nb_positive to %struct._object* (%struct._object*)**, !dbg !5405
  %7 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_positive1, align 8, !dbg !5405, !tbaa !5406
  %tobool2 = icmp ne %struct._object* (%struct._object*)* %7, null, !dbg !5407
  br i1 %tobool2, label %if.then.3, label %if.end.7, !dbg !5408

if.then.3:                                        ; preds = %land.lhs.true
  %8 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5409, !tbaa !1829
  %nb_positive4 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %8, i32 0, i32 7, !dbg !5410
  %nb_positive5 = bitcast {}** %nb_positive4 to %struct._object* (%struct._object*)**, !dbg !5410
  %9 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_positive5, align 8, !dbg !5410, !tbaa !5406
  %10 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5411, !tbaa !1829
  %call6 = call %struct._object* %9(%struct._object* %10), !dbg !5412
  store %struct._object* %call6, %struct._object** %retval, !dbg !5413
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5413

if.end.7:                                         ; preds = %land.lhs.true, %if.end
  %11 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5414, !tbaa !1829
  %call8 = call %struct._object* @type_error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.44, i32 0, i32 0), %struct._object* %11), !dbg !5415
  store %struct._object* %call8, %struct._object** %retval, !dbg !5416
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5416

cleanup:                                          ; preds = %if.end.7, %if.then.3, %if.then
  %12 = bitcast %struct.PyNumberMethods** %m to i8*, !dbg !5417
  call void @llvm.lifetime.end(i64 8, i8* %12) #2, !dbg !5417
  %13 = load %struct._object*, %struct._object** %retval, !dbg !5417
  ret %struct._object* %13, !dbg !5417
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Invert(%struct._object* %o) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PyNumberMethods*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !844, metadata !1833), !dbg !5418
  %0 = bitcast %struct.PyNumberMethods** %m to i8*, !dbg !5419
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !5419
  call void @llvm.dbg.declare(metadata %struct.PyNumberMethods** %m, metadata !845, metadata !1833), !dbg !5420
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5421, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !5423
  br i1 %cmp, label %if.then, label %if.end, !dbg !5424

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !5425
  store %struct._object* %call, %struct._object** %retval, !dbg !5426
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5426

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5427, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !5428
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5428, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 10, !dbg !5429
  %4 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !5429, !tbaa !2261
  store %struct.PyNumberMethods* %4, %struct.PyNumberMethods** %m, align 8, !dbg !5430, !tbaa !1829
  %5 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5431, !tbaa !1829
  %tobool = icmp ne %struct.PyNumberMethods* %5, null, !dbg !5431
  br i1 %tobool, label %land.lhs.true, label %if.end.7, !dbg !5433

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5434, !tbaa !1829
  %nb_invert = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %6, i32 0, i32 10, !dbg !5436
  %nb_invert1 = bitcast {}** %nb_invert to %struct._object* (%struct._object*)**, !dbg !5436
  %7 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_invert1, align 8, !dbg !5436, !tbaa !5437
  %tobool2 = icmp ne %struct._object* (%struct._object*)* %7, null, !dbg !5438
  br i1 %tobool2, label %if.then.3, label %if.end.7, !dbg !5439

if.then.3:                                        ; preds = %land.lhs.true
  %8 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5440, !tbaa !1829
  %nb_invert4 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %8, i32 0, i32 10, !dbg !5441
  %nb_invert5 = bitcast {}** %nb_invert4 to %struct._object* (%struct._object*)**, !dbg !5441
  %9 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_invert5, align 8, !dbg !5441, !tbaa !5437
  %10 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5442, !tbaa !1829
  %call6 = call %struct._object* %9(%struct._object* %10), !dbg !5443
  store %struct._object* %call6, %struct._object** %retval, !dbg !5444
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5444

if.end.7:                                         ; preds = %land.lhs.true, %if.end
  %11 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5445, !tbaa !1829
  %call8 = call %struct._object* @type_error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.45, i32 0, i32 0), %struct._object* %11), !dbg !5446
  store %struct._object* %call8, %struct._object** %retval, !dbg !5447
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5447

cleanup:                                          ; preds = %if.end.7, %if.then.3, %if.then
  %12 = bitcast %struct.PyNumberMethods** %m to i8*, !dbg !5448
  call void @llvm.lifetime.end(i64 8, i8* %12) #2, !dbg !5448
  %13 = load %struct._object*, %struct._object** %retval, !dbg !5448
  ret %struct._object* %13, !dbg !5448
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Absolute(%struct._object* %o) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PyNumberMethods*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !848, metadata !1833), !dbg !5449
  %0 = bitcast %struct.PyNumberMethods** %m to i8*, !dbg !5450
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !5450
  call void @llvm.dbg.declare(metadata %struct.PyNumberMethods** %m, metadata !849, metadata !1833), !dbg !5451
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5452, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !5454
  br i1 %cmp, label %if.then, label %if.end, !dbg !5455

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !5456
  store %struct._object* %call, %struct._object** %retval, !dbg !5457
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5457

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5458, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !5459
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5459, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 10, !dbg !5460
  %4 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !5460, !tbaa !2261
  store %struct.PyNumberMethods* %4, %struct.PyNumberMethods** %m, align 8, !dbg !5461, !tbaa !1829
  %5 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5462, !tbaa !1829
  %tobool = icmp ne %struct.PyNumberMethods* %5, null, !dbg !5462
  br i1 %tobool, label %land.lhs.true, label %if.end.7, !dbg !5464

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5465, !tbaa !1829
  %nb_absolute = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %6, i32 0, i32 8, !dbg !5467
  %nb_absolute1 = bitcast {}** %nb_absolute to %struct._object* (%struct._object*)**, !dbg !5467
  %7 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_absolute1, align 8, !dbg !5467, !tbaa !5468
  %tobool2 = icmp ne %struct._object* (%struct._object*)* %7, null, !dbg !5469
  br i1 %tobool2, label %if.then.3, label %if.end.7, !dbg !5470

if.then.3:                                        ; preds = %land.lhs.true
  %8 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5471, !tbaa !1829
  %nb_absolute4 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %8, i32 0, i32 8, !dbg !5472
  %nb_absolute5 = bitcast {}** %nb_absolute4 to %struct._object* (%struct._object*)**, !dbg !5472
  %9 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_absolute5, align 8, !dbg !5472, !tbaa !5468
  %10 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5473, !tbaa !1829
  %call6 = call %struct._object* %9(%struct._object* %10), !dbg !5471
  store %struct._object* %call6, %struct._object** %retval, !dbg !5474
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5474

if.end.7:                                         ; preds = %land.lhs.true, %if.end
  %11 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5475, !tbaa !1829
  %call8 = call %struct._object* @type_error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.46, i32 0, i32 0), %struct._object* %11), !dbg !5476
  store %struct._object* %call8, %struct._object** %retval, !dbg !5477
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5477

cleanup:                                          ; preds = %if.end.7, %if.then.3, %if.then
  %12 = bitcast %struct.PyNumberMethods** %m to i8*, !dbg !5478
  call void @llvm.lifetime.end(i64 8, i8* %12) #2, !dbg !5478
  %13 = load %struct._object*, %struct._object** %retval, !dbg !5478
  ret %struct._object* %13, !dbg !5478
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Index(%struct._object* %item) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %item.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp43 = alloca %struct._object*, align 8
  store %struct._object* %item, %struct._object** %item.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %item.addr, metadata !852, metadata !1833), !dbg !5479
  %0 = bitcast %struct._object** %result to i8*, !dbg !5480
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !5480
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !853, metadata !1833), !dbg !5481
  store %struct._object* null, %struct._object** %result, align 8, !dbg !5481, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !5482, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !5484
  br i1 %cmp, label %if.then, label %if.end, !dbg !5485

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !5486
  store %struct._object* %call, %struct._object** %retval, !dbg !5487
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5487

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !5488, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !5490
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5490, !tbaa !1845
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19, !dbg !5491
  %4 = load i64, i64* %tp_flags, align 8, !dbg !5491, !tbaa !2086
  %and = and i64 %4, 16777216, !dbg !5492
  %cmp1 = icmp ne i64 %and, 0, !dbg !5493
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !5494

if.then.2:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !5495, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0, !dbg !5497
  %6 = load i64, i64* %ob_refcnt, align 8, !dbg !5498, !tbaa !1853
  %inc = add i64 %6, 1, !dbg !5498
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !5498, !tbaa !1853
  %7 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !5499, !tbaa !1829
  store %struct._object* %7, %struct._object** %retval, !dbg !5500
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5500

if.end.3:                                         ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !5501, !tbaa !1829
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1, !dbg !5503
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8, !dbg !5503, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 10, !dbg !5504
  %10 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !5504, !tbaa !2261
  %cmp5 = icmp ne %struct.PyNumberMethods* %10, null, !dbg !5505
  br i1 %cmp5, label %land.lhs.true, label %if.then.10, !dbg !5506

land.lhs.true:                                    ; preds = %if.end.3
  %11 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !5507, !tbaa !1829
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1, !dbg !5509
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8, !dbg !5509, !tbaa !1845
  %tp_as_number7 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 10, !dbg !5510
  %13 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number7, align 8, !dbg !5510, !tbaa !2261
  %nb_index = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %13, i32 0, i32 33, !dbg !5511
  %nb_index8 = bitcast {}** %nb_index to %struct._object* (%struct._object*)**, !dbg !5511
  %14 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index8, align 8, !dbg !5511, !tbaa !2269
  %cmp9 = icmp ne %struct._object* (%struct._object*)* %14, null, !dbg !5512
  br i1 %cmp9, label %if.end.13, label %if.then.10, !dbg !5513

if.then.10:                                       ; preds = %land.lhs.true, %if.end.3
  %15 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !5514, !tbaa !1829
  %16 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !5516, !tbaa !1829
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1, !dbg !5517
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8, !dbg !5517, !tbaa !1845
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 1, !dbg !5518
  %18 = load i8*, i8** %tp_name, align 8, !dbg !5518, !tbaa !2094
  %call12 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %15, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.47, i32 0, i32 0), i8* %18), !dbg !5519
  store %struct._object* null, %struct._object** %retval, !dbg !5520
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5520

if.end.13:                                        ; preds = %land.lhs.true
  %19 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !5521, !tbaa !1829
  %ob_type14 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1, !dbg !5522
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type14, align 8, !dbg !5522, !tbaa !1845
  %tp_as_number15 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 10, !dbg !5523
  %21 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number15, align 8, !dbg !5523, !tbaa !2261
  %nb_index16 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %21, i32 0, i32 33, !dbg !5524
  %nb_index17 = bitcast {}** %nb_index16 to %struct._object* (%struct._object*)**, !dbg !5524
  %22 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index17, align 8, !dbg !5524, !tbaa !2269
  %23 = load %struct._object*, %struct._object** %item.addr, align 8, !dbg !5525, !tbaa !1829
  %call18 = call %struct._object* %22(%struct._object* %23), !dbg !5521
  store %struct._object* %call18, %struct._object** %result, align 8, !dbg !5526, !tbaa !1829
  %24 = load %struct._object*, %struct._object** %result, align 8, !dbg !5527, !tbaa !1829
  %tobool = icmp ne %struct._object* %24, null, !dbg !5527
  br i1 %tobool, label %lor.lhs.false, label %if.then.21, !dbg !5529

lor.lhs.false:                                    ; preds = %if.end.13
  %25 = load %struct._object*, %struct._object** %result, align 8, !dbg !5530, !tbaa !1829
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1, !dbg !5532
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8, !dbg !5532, !tbaa !1845
  %cmp20 = icmp eq %struct._typeobject* %26, @PyLong_Type, !dbg !5533
  br i1 %cmp20, label %if.then.21, label %if.end.22, !dbg !5534

if.then.21:                                       ; preds = %lor.lhs.false, %if.end.13
  %27 = load %struct._object*, %struct._object** %result, align 8, !dbg !5535, !tbaa !1829
  store %struct._object* %27, %struct._object** %retval, !dbg !5536
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5536

if.end.22:                                        ; preds = %lor.lhs.false
  %28 = load %struct._object*, %struct._object** %result, align 8, !dbg !5537, !tbaa !1829
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1, !dbg !5538
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8, !dbg !5538, !tbaa !1845
  %tp_flags24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 19, !dbg !5539
  %30 = load i64, i64* %tp_flags24, align 8, !dbg !5539, !tbaa !2086
  %and25 = and i64 %30, 16777216, !dbg !5540
  %cmp26 = icmp ne i64 %and25, 0, !dbg !5541
  br i1 %cmp26, label %if.end.36, label %if.then.27, !dbg !5542

if.then.27:                                       ; preds = %if.end.22
  %31 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !5543, !tbaa !1829
  %32 = load %struct._object*, %struct._object** %result, align 8, !dbg !5544, !tbaa !1829
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1, !dbg !5545
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8, !dbg !5545, !tbaa !1845
  %tp_name29 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 1, !dbg !5546
  %34 = load i8*, i8** %tp_name29, align 8, !dbg !5546, !tbaa !2094
  %call30 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %31, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.48, i32 0, i32 0), i8* %34), !dbg !5547
  br label %do.body, !dbg !5548

do.body:                                          ; preds = %if.then.27
  %35 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5549
  call void @llvm.lifetime.start(i64 8, i8* %35) #2, !dbg !5549
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !854, metadata !1833), !dbg !5551
  %36 = load %struct._object*, %struct._object** %result, align 8, !dbg !5552, !tbaa !1829
  store %struct._object* %36, %struct._object** %_py_decref_tmp, align 8, !dbg !5551, !tbaa !1829
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5553, !tbaa !1829
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0, !dbg !5555
  %38 = load i64, i64* %ob_refcnt31, align 8, !dbg !5556, !tbaa !1853
  %dec = add i64 %38, -1, !dbg !5556
  store i64 %dec, i64* %ob_refcnt31, align 8, !dbg !5556, !tbaa !1853
  %cmp32 = icmp ne i64 %dec, 0, !dbg !5557
  br i1 %cmp32, label %if.then.33, label %if.else, !dbg !5558

if.then.33:                                       ; preds = %do.body
  br label %if.end.35, !dbg !5559

if.else:                                          ; preds = %do.body
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5561, !tbaa !1829
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1, !dbg !5563
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8, !dbg !5563, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4, !dbg !5564
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5564, !tbaa !2033
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5565, !tbaa !1829
  call void %41(%struct._object* %42), !dbg !5566
  br label %if.end.35

if.end.35:                                        ; preds = %if.else, %if.then.33
  %43 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5567
  call void @llvm.lifetime.end(i64 8, i8* %43) #2, !dbg !5567
  br label %do.cond, !dbg !5569

do.cond:                                          ; preds = %if.end.35
  br label %do.end, !dbg !5570

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !5572
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5572

if.end.36:                                        ; preds = %if.end.22
  %44 = load %struct._object*, %struct._object** @PyExc_DeprecationWarning, align 8, !dbg !5573, !tbaa !1829
  %45 = load %struct._object*, %struct._object** %result, align 8, !dbg !5574, !tbaa !1829
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1, !dbg !5575
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8, !dbg !5575, !tbaa !1845
  %tp_name38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 1, !dbg !5576
  %47 = load i8*, i8** %tp_name38, align 8, !dbg !5576, !tbaa !2094
  %call39 = call i32 (%struct._object*, i64, i8*, ...) @PyErr_WarnFormat(%struct._object* %44, i64 1, i8* getelementptr inbounds ([170 x i8], [170 x i8]* @.str.49, i32 0, i32 0), i8* %47), !dbg !5577
  %tobool40 = icmp ne i32 %call39, 0, !dbg !5577
  br i1 %tobool40, label %if.then.41, label %if.end.54, !dbg !5578

if.then.41:                                       ; preds = %if.end.36
  br label %do.body.42, !dbg !5579

do.body.42:                                       ; preds = %if.then.41
  %48 = bitcast %struct._object** %_py_decref_tmp43 to i8*, !dbg !5580
  call void @llvm.lifetime.start(i64 8, i8* %48) #2, !dbg !5580
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp43, metadata !858, metadata !1833), !dbg !5582
  %49 = load %struct._object*, %struct._object** %result, align 8, !dbg !5583, !tbaa !1829
  store %struct._object* %49, %struct._object** %_py_decref_tmp43, align 8, !dbg !5582, !tbaa !1829
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp43, align 8, !dbg !5584, !tbaa !1829
  %ob_refcnt44 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0, !dbg !5586
  %51 = load i64, i64* %ob_refcnt44, align 8, !dbg !5587, !tbaa !1853
  %dec45 = add i64 %51, -1, !dbg !5587
  store i64 %dec45, i64* %ob_refcnt44, align 8, !dbg !5587, !tbaa !1853
  %cmp46 = icmp ne i64 %dec45, 0, !dbg !5588
  br i1 %cmp46, label %if.then.47, label %if.else.48, !dbg !5589

if.then.47:                                       ; preds = %do.body.42
  br label %if.end.51, !dbg !5590

if.else.48:                                       ; preds = %do.body.42
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp43, align 8, !dbg !5592, !tbaa !1829
  %ob_type49 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1, !dbg !5594
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type49, align 8, !dbg !5594, !tbaa !1845
  %tp_dealloc50 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4, !dbg !5595
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc50, align 8, !dbg !5595, !tbaa !2033
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp43, align 8, !dbg !5596, !tbaa !1829
  call void %54(%struct._object* %55), !dbg !5597
  br label %if.end.51

if.end.51:                                        ; preds = %if.else.48, %if.then.47
  %56 = bitcast %struct._object** %_py_decref_tmp43 to i8*, !dbg !5598
  call void @llvm.lifetime.end(i64 8, i8* %56) #2, !dbg !5598
  br label %do.cond.52, !dbg !5600

do.cond.52:                                       ; preds = %if.end.51
  br label %do.end.53, !dbg !5601

do.end.53:                                        ; preds = %do.cond.52
  store %struct._object* null, %struct._object** %retval, !dbg !5603
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5603

if.end.54:                                        ; preds = %if.end.36
  %57 = load %struct._object*, %struct._object** %result, align 8, !dbg !5604, !tbaa !1829
  store %struct._object* %57, %struct._object** %retval, !dbg !5605
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5605

cleanup:                                          ; preds = %if.end.54, %do.end.53, %do.end, %if.then.21, %if.then.10, %if.then.2, %if.then
  %58 = bitcast %struct._object** %result to i8*, !dbg !5606
  call void @llvm.lifetime.end(i64 8, i8* %58) #2, !dbg !5606
  %59 = load %struct._object*, %struct._object** %retval, !dbg !5606
  ret %struct._object* %59, !dbg !5606
}

declare i32 @PyErr_WarnFormat(%struct._object*, i64, i8*, ...) #3

declare i32 @PyErr_GivenExceptionMatches(%struct._object*, %struct._object*) #3

declare i32 @_PyLong_Sign(%struct._object*) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Long(%struct._object* %o) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PyNumberMethods*, align 8
  %trunc_func = alloca %struct._object*, align 8
  %buffer = alloca i8*, align 8
  %buffer_len = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %truncated = alloca %struct._object*, align 8
  %int_instance = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp35 = alloca %struct._object*, align 8
  %_py_decref_tmp49 = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !875, metadata !1833), !dbg !5607
  %0 = bitcast %struct.PyNumberMethods** %m to i8*, !dbg !5608
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !5608
  call void @llvm.dbg.declare(metadata %struct.PyNumberMethods** %m, metadata !876, metadata !1833), !dbg !5609
  %1 = bitcast %struct._object** %trunc_func to i8*, !dbg !5610
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !5610
  call void @llvm.dbg.declare(metadata %struct._object** %trunc_func, metadata !877, metadata !1833), !dbg !5611
  %2 = bitcast i8** %buffer to i8*, !dbg !5612
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !5612
  call void @llvm.dbg.declare(metadata i8** %buffer, metadata !878, metadata !1833), !dbg !5613
  %3 = bitcast i64* %buffer_len to i8*, !dbg !5614
  call void @llvm.lifetime.start(i64 8, i8* %3) #2, !dbg !5614
  call void @llvm.dbg.declare(metadata i64* %buffer_len, metadata !879, metadata !1833), !dbg !5615
  %4 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5616, !tbaa !1829
  %cmp = icmp eq %struct._object* %4, null, !dbg !5618
  br i1 %cmp, label %if.then, label %if.end, !dbg !5619

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !5620
  store %struct._object* %call, %struct._object** %retval, !dbg !5621
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.86, !dbg !5621

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5622, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !5624
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5624, !tbaa !1845
  %cmp1 = icmp eq %struct._typeobject* %6, @PyLong_Type, !dbg !5625
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !5626

if.then.2:                                        ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5627, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0, !dbg !5629
  %8 = load i64, i64* %ob_refcnt, align 8, !dbg !5630, !tbaa !1853
  %inc = add i64 %8, 1, !dbg !5630
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !5630, !tbaa !1853
  %9 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5631, !tbaa !1829
  store %struct._object* %9, %struct._object** %retval, !dbg !5632
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.86, !dbg !5632

if.end.3:                                         ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5633, !tbaa !1829
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !5634
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8, !dbg !5634, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 10, !dbg !5635
  %12 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !5635, !tbaa !2261
  store %struct.PyNumberMethods* %12, %struct.PyNumberMethods** %m, align 8, !dbg !5636, !tbaa !1829
  %13 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5637, !tbaa !1829
  %tobool = icmp ne %struct.PyNumberMethods* %13, null, !dbg !5637
  br i1 %tobool, label %land.lhs.true, label %if.end.9, !dbg !5639

land.lhs.true:                                    ; preds = %if.end.3
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5640, !tbaa !1829
  %nb_int = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %14, i32 0, i32 16, !dbg !5642
  %nb_int5 = bitcast {}** %nb_int to %struct._object* (%struct._object*)**, !dbg !5642
  %15 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_int5, align 8, !dbg !5642, !tbaa !4191
  %tobool6 = icmp ne %struct._object* (%struct._object*)* %15, null, !dbg !5643
  br i1 %tobool6, label %if.then.7, label %if.end.9, !dbg !5644

if.then.7:                                        ; preds = %land.lhs.true
  %16 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5645, !tbaa !1829
  %call8 = call %struct._longobject* @_PyLong_FromNbInt(%struct._object* %16), !dbg !5647
  %17 = bitcast %struct._longobject* %call8 to %struct._object*, !dbg !5648
  store %struct._object* %17, %struct._object** %retval, !dbg !5649
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.86, !dbg !5649

if.end.9:                                         ; preds = %land.lhs.true, %if.end.3
  %18 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5650, !tbaa !1829
  %call10 = call %struct._object* @_PyObject_LookupSpecial(%struct._object* %18, %struct._Py_Identifier* @PyNumber_Long.PyId___trunc__), !dbg !5651
  store %struct._object* %call10, %struct._object** %trunc_func, align 8, !dbg !5652, !tbaa !1829
  %19 = load %struct._object*, %struct._object** %trunc_func, align 8, !dbg !5653, !tbaa !1829
  %tobool11 = icmp ne %struct._object* %19, null, !dbg !5653
  br i1 %tobool11, label %if.then.12, label %if.end.61, !dbg !5654

if.then.12:                                       ; preds = %if.end.9
  %20 = bitcast %struct._object** %truncated to i8*, !dbg !5655
  call void @llvm.lifetime.start(i64 8, i8* %20) #2, !dbg !5655
  call void @llvm.dbg.declare(metadata %struct._object** %truncated, metadata !880, metadata !1833), !dbg !5656
  %21 = load %struct._object*, %struct._object** %trunc_func, align 8, !dbg !5657, !tbaa !1829
  %call13 = call %struct._object* @PyEval_CallObjectWithKeywords(%struct._object* %21, %struct._object* null, %struct._object* null), !dbg !5658
  store %struct._object* %call13, %struct._object** %truncated, align 8, !dbg !5656, !tbaa !1829
  %22 = bitcast %struct._object** %int_instance to i8*, !dbg !5659
  call void @llvm.lifetime.start(i64 8, i8* %22) #2, !dbg !5659
  call void @llvm.dbg.declare(metadata %struct._object** %int_instance, metadata !883, metadata !1833), !dbg !5660
  br label %do.body, !dbg !5661

do.body:                                          ; preds = %if.then.12
  %23 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5662
  call void @llvm.lifetime.start(i64 8, i8* %23) #2, !dbg !5662
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !884, metadata !1833), !dbg !5664
  %24 = load %struct._object*, %struct._object** %trunc_func, align 8, !dbg !5665, !tbaa !1829
  store %struct._object* %24, %struct._object** %_py_decref_tmp, align 8, !dbg !5664, !tbaa !1829
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5666, !tbaa !1829
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0, !dbg !5668
  %26 = load i64, i64* %ob_refcnt14, align 8, !dbg !5669, !tbaa !1853
  %dec = add i64 %26, -1, !dbg !5669
  store i64 %dec, i64* %ob_refcnt14, align 8, !dbg !5669, !tbaa !1853
  %cmp15 = icmp ne i64 %dec, 0, !dbg !5670
  br i1 %cmp15, label %if.then.16, label %if.else, !dbg !5671

if.then.16:                                       ; preds = %do.body
  br label %if.end.18, !dbg !5672

if.else:                                          ; preds = %do.body
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5674, !tbaa !1829
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1, !dbg !5676
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8, !dbg !5676, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4, !dbg !5677
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5677, !tbaa !2033
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5678, !tbaa !1829
  call void %29(%struct._object* %30), !dbg !5679
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.16
  %31 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5680
  call void @llvm.lifetime.end(i64 8, i8* %31) #2, !dbg !5680
  br label %do.cond, !dbg !5682

do.cond:                                          ; preds = %if.end.18
  br label %do.end, !dbg !5683

do.end:                                           ; preds = %do.cond
  %32 = load %struct._object*, %struct._object** %truncated, align 8, !dbg !5685, !tbaa !1829
  %cmp19 = icmp eq %struct._object* %32, null, !dbg !5687
  br i1 %cmp19, label %if.then.22, label %lor.lhs.false, !dbg !5688

lor.lhs.false:                                    ; preds = %do.end
  %33 = load %struct._object*, %struct._object** %truncated, align 8, !dbg !5689, !tbaa !1829
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1, !dbg !5691
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8, !dbg !5691, !tbaa !1845
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 19, !dbg !5692
  %35 = load i64, i64* %tp_flags, align 8, !dbg !5692, !tbaa !2086
  %and = and i64 %35, 16777216, !dbg !5693
  %cmp21 = icmp ne i64 %and, 0, !dbg !5694
  br i1 %cmp21, label %if.then.22, label %if.end.23, !dbg !5695

if.then.22:                                       ; preds = %lor.lhs.false, %do.end
  %36 = load %struct._object*, %struct._object** %truncated, align 8, !dbg !5696, !tbaa !1829
  store %struct._object* %36, %struct._object** %retval, !dbg !5697
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5697

if.end.23:                                        ; preds = %lor.lhs.false
  %37 = load %struct._object*, %struct._object** %truncated, align 8, !dbg !5698, !tbaa !1829
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1, !dbg !5699
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8, !dbg !5699, !tbaa !1845
  %tp_as_number25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 10, !dbg !5700
  %39 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number25, align 8, !dbg !5700, !tbaa !2261
  store %struct.PyNumberMethods* %39, %struct.PyNumberMethods** %m, align 8, !dbg !5701, !tbaa !1829
  %40 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5702, !tbaa !1829
  %cmp26 = icmp eq %struct.PyNumberMethods* %40, null, !dbg !5703
  br i1 %cmp26, label %if.then.31, label %lor.lhs.false.27, !dbg !5704

lor.lhs.false.27:                                 ; preds = %if.end.23
  %41 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5705, !tbaa !1829
  %nb_int28 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %41, i32 0, i32 16, !dbg !5707
  %nb_int29 = bitcast {}** %nb_int28 to %struct._object* (%struct._object*)**, !dbg !5707
  %42 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_int29, align 8, !dbg !5707, !tbaa !4191
  %cmp30 = icmp eq %struct._object* (%struct._object*)* %42, null, !dbg !5708
  br i1 %cmp30, label %if.then.31, label %if.end.46, !dbg !5709

if.then.31:                                       ; preds = %lor.lhs.false.27, %if.end.23
  %43 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !5710, !tbaa !1829
  %44 = load %struct._object*, %struct._object** %truncated, align 8, !dbg !5711, !tbaa !1829
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1, !dbg !5712
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8, !dbg !5712, !tbaa !1845
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 1, !dbg !5713
  %46 = load i8*, i8** %tp_name, align 8, !dbg !5713, !tbaa !2094
  %call33 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %43, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.52, i32 0, i32 0), i8* %46), !dbg !5714
  br label %do.body.34, !dbg !5715

do.body.34:                                       ; preds = %if.then.31
  %47 = bitcast %struct._object** %_py_decref_tmp35 to i8*, !dbg !5716
  call void @llvm.lifetime.start(i64 8, i8* %47) #2, !dbg !5716
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp35, metadata !886, metadata !1833), !dbg !5718
  %48 = load %struct._object*, %struct._object** %truncated, align 8, !dbg !5719, !tbaa !1829
  store %struct._object* %48, %struct._object** %_py_decref_tmp35, align 8, !dbg !5718, !tbaa !1829
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !5720, !tbaa !1829
  %ob_refcnt36 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0, !dbg !5722
  %50 = load i64, i64* %ob_refcnt36, align 8, !dbg !5723, !tbaa !1853
  %dec37 = add i64 %50, -1, !dbg !5723
  store i64 %dec37, i64* %ob_refcnt36, align 8, !dbg !5723, !tbaa !1853
  %cmp38 = icmp ne i64 %dec37, 0, !dbg !5724
  br i1 %cmp38, label %if.then.39, label %if.else.40, !dbg !5725

if.then.39:                                       ; preds = %do.body.34
  br label %if.end.43, !dbg !5726

if.else.40:                                       ; preds = %do.body.34
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !5728, !tbaa !1829
  %ob_type41 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1, !dbg !5730
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type41, align 8, !dbg !5730, !tbaa !1845
  %tp_dealloc42 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4, !dbg !5731
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc42, align 8, !dbg !5731, !tbaa !2033
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !5732, !tbaa !1829
  call void %53(%struct._object* %54), !dbg !5733
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.40, %if.then.39
  %55 = bitcast %struct._object** %_py_decref_tmp35 to i8*, !dbg !5734
  call void @llvm.lifetime.end(i64 8, i8* %55) #2, !dbg !5734
  br label %do.cond.44, !dbg !5736

do.cond.44:                                       ; preds = %if.end.43
  br label %do.end.45, !dbg !5737

do.end.45:                                        ; preds = %do.cond.44
  store %struct._object* null, %struct._object** %retval, !dbg !5739
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5739

if.end.46:                                        ; preds = %lor.lhs.false.27
  %56 = load %struct._object*, %struct._object** %truncated, align 8, !dbg !5740, !tbaa !1829
  %call47 = call %struct._longobject* @_PyLong_FromNbInt(%struct._object* %56), !dbg !5741
  %57 = bitcast %struct._longobject* %call47 to %struct._object*, !dbg !5742
  store %struct._object* %57, %struct._object** %int_instance, align 8, !dbg !5743, !tbaa !1829
  br label %do.body.48, !dbg !5744

do.body.48:                                       ; preds = %if.end.46
  %58 = bitcast %struct._object** %_py_decref_tmp49 to i8*, !dbg !5745
  call void @llvm.lifetime.start(i64 8, i8* %58) #2, !dbg !5745
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp49, metadata !890, metadata !1833), !dbg !5747
  %59 = load %struct._object*, %struct._object** %truncated, align 8, !dbg !5748, !tbaa !1829
  store %struct._object* %59, %struct._object** %_py_decref_tmp49, align 8, !dbg !5747, !tbaa !1829
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8, !dbg !5749, !tbaa !1829
  %ob_refcnt50 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0, !dbg !5751
  %61 = load i64, i64* %ob_refcnt50, align 8, !dbg !5752, !tbaa !1853
  %dec51 = add i64 %61, -1, !dbg !5752
  store i64 %dec51, i64* %ob_refcnt50, align 8, !dbg !5752, !tbaa !1853
  %cmp52 = icmp ne i64 %dec51, 0, !dbg !5753
  br i1 %cmp52, label %if.then.53, label %if.else.54, !dbg !5754

if.then.53:                                       ; preds = %do.body.48
  br label %if.end.57, !dbg !5755

if.else.54:                                       ; preds = %do.body.48
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8, !dbg !5757, !tbaa !1829
  %ob_type55 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1, !dbg !5759
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type55, align 8, !dbg !5759, !tbaa !1845
  %tp_dealloc56 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4, !dbg !5760
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc56, align 8, !dbg !5760, !tbaa !2033
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8, !dbg !5761, !tbaa !1829
  call void %64(%struct._object* %65), !dbg !5762
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.54, %if.then.53
  %66 = bitcast %struct._object** %_py_decref_tmp49 to i8*, !dbg !5763
  call void @llvm.lifetime.end(i64 8, i8* %66) #2, !dbg !5763
  br label %do.cond.58, !dbg !5764

do.cond.58:                                       ; preds = %if.end.57
  br label %do.end.59, !dbg !5765

do.end.59:                                        ; preds = %do.cond.58
  %67 = load %struct._object*, %struct._object** %int_instance, align 8, !dbg !5767, !tbaa !1829
  store %struct._object* %67, %struct._object** %retval, !dbg !5768
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5768

cleanup:                                          ; preds = %do.end.59, %do.end.45, %if.then.22
  %68 = bitcast %struct._object** %int_instance to i8*, !dbg !5769
  call void @llvm.lifetime.end(i64 8, i8* %68) #2, !dbg !5769
  %69 = bitcast %struct._object** %truncated to i8*, !dbg !5769
  call void @llvm.lifetime.end(i64 8, i8* %69) #2, !dbg !5769
  br label %cleanup.86

if.end.61:                                        ; preds = %if.end.9
  %call62 = call %struct._object* @PyErr_Occurred(), !dbg !5770
  %tobool63 = icmp ne %struct._object* %call62, null, !dbg !5770
  br i1 %tobool63, label %if.then.64, label %if.end.65, !dbg !5772

if.then.64:                                       ; preds = %if.end.61
  store %struct._object* null, %struct._object** %retval, !dbg !5773
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.86, !dbg !5773

if.end.65:                                        ; preds = %if.end.61
  %70 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5774, !tbaa !1829
  %ob_type66 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1, !dbg !5776
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type66, align 8, !dbg !5776, !tbaa !1845
  %tp_flags67 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 19, !dbg !5777
  %72 = load i64, i64* %tp_flags67, align 8, !dbg !5777, !tbaa !2086
  %and68 = and i64 %72, 134217728, !dbg !5778
  %cmp69 = icmp ne i64 %and68, 0, !dbg !5779
  br i1 %cmp69, label %if.then.70, label %if.end.72, !dbg !5780

if.then.70:                                       ; preds = %if.end.65
  %73 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5781, !tbaa !1829
  %74 = bitcast %struct._object* %73 to %struct.PyBytesObject*, !dbg !5782
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %74, i32 0, i32 2, !dbg !5783
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !5784
  %75 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5785, !tbaa !1829
  %76 = bitcast %struct._object* %75 to %struct.PyVarObject*, !dbg !5786
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %76, i32 0, i32 1, !dbg !5787
  %77 = load i64, i64* %ob_size, align 8, !dbg !5787, !tbaa !5788
  %call71 = call %struct._object* @_PyLong_FromBytes(i8* %arraydecay, i64 %77, i32 10), !dbg !5789
  store %struct._object* %call71, %struct._object** %retval, !dbg !5790
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.86, !dbg !5790

if.end.72:                                        ; preds = %if.end.65
  %78 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5791, !tbaa !1829
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 1, !dbg !5793
  %79 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8, !dbg !5793, !tbaa !1845
  %tp_flags74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %79, i32 0, i32 19, !dbg !5794
  %80 = load i64, i64* %tp_flags74, align 8, !dbg !5794, !tbaa !2086
  %and75 = and i64 %80, 268435456, !dbg !5795
  %cmp76 = icmp ne i64 %and75, 0, !dbg !5796
  br i1 %cmp76, label %if.then.77, label %if.end.79, !dbg !5797

if.then.77:                                       ; preds = %if.end.72
  %81 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5798, !tbaa !1829
  %call78 = call %struct._object* @PyLong_FromUnicodeObject(%struct._object* %81, i32 10), !dbg !5799
  store %struct._object* %call78, %struct._object** %retval, !dbg !5800
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.86, !dbg !5800

if.end.79:                                        ; preds = %if.end.72
  %82 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5801, !tbaa !1829
  %call80 = call i32 @PyObject_AsCharBuffer(%struct._object* %82, i8** %buffer, i64* %buffer_len), !dbg !5803
  %tobool81 = icmp ne i32 %call80, 0, !dbg !5803
  br i1 %tobool81, label %if.end.84, label %if.then.82, !dbg !5804

if.then.82:                                       ; preds = %if.end.79
  %83 = load i8*, i8** %buffer, align 8, !dbg !5805, !tbaa !1829
  %84 = load i64, i64* %buffer_len, align 8, !dbg !5806, !tbaa !1963
  %call83 = call %struct._object* @_PyLong_FromBytes(i8* %83, i64 %84, i32 10), !dbg !5807
  store %struct._object* %call83, %struct._object** %retval, !dbg !5808
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.86, !dbg !5808

if.end.84:                                        ; preds = %if.end.79
  %85 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5809, !tbaa !1829
  %call85 = call %struct._object* @type_error(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.53, i32 0, i32 0), %struct._object* %85), !dbg !5810
  store %struct._object* %call85, %struct._object** %retval, !dbg !5811
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.86, !dbg !5811

cleanup.86:                                       ; preds = %if.end.84, %if.then.82, %if.then.77, %if.then.70, %if.then.64, %cleanup, %if.then.7, %if.then.2, %if.then
  %86 = bitcast i64* %buffer_len to i8*, !dbg !5812
  call void @llvm.lifetime.end(i64 8, i8* %86) #2, !dbg !5812
  %87 = bitcast i8** %buffer to i8*, !dbg !5812
  call void @llvm.lifetime.end(i64 8, i8* %87) #2, !dbg !5812
  %88 = bitcast %struct._object** %trunc_func to i8*, !dbg !5812
  call void @llvm.lifetime.end(i64 8, i8* %88) #2, !dbg !5812
  %89 = bitcast %struct.PyNumberMethods** %m to i8*, !dbg !5812
  call void @llvm.lifetime.end(i64 8, i8* %89) #2, !dbg !5812
  %90 = load %struct._object*, %struct._object** %retval, !dbg !5812
  ret %struct._object* %90, !dbg !5812
}

declare %struct._longobject* @_PyLong_FromNbInt(%struct._object*) #3

declare %struct._object* @PyEval_CallObjectWithKeywords(%struct._object*, %struct._object*, %struct._object*) #3

declare %struct._object* @_PyLong_FromBytes(i8*, i64, i32) #3

declare %struct._object* @PyLong_FromUnicodeObject(%struct._object*, i32) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_Float(%struct._object* %o) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PyNumberMethods*, align 8
  %cleanup.dest.slot = alloca i32
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %po = alloca %struct.PyFloatObject*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !894, metadata !1833), !dbg !5813
  %0 = bitcast %struct.PyNumberMethods** %m to i8*, !dbg !5814
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !5814
  call void @llvm.dbg.declare(metadata %struct.PyNumberMethods** %m, metadata !895, metadata !1833), !dbg !5815
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5816, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !5818
  br i1 %cmp, label %if.then, label %if.end, !dbg !5819

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !5820
  store %struct._object* %call, %struct._object** %retval, !dbg !5821
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.34, !dbg !5821

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5822, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !5823
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5823, !tbaa !1845
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 10, !dbg !5824
  %4 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8, !dbg !5824, !tbaa !2261
  store %struct.PyNumberMethods* %4, %struct.PyNumberMethods** %m, align 8, !dbg !5825, !tbaa !1829
  %5 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5826, !tbaa !1829
  %tobool = icmp ne %struct.PyNumberMethods* %5, null, !dbg !5826
  br i1 %tobool, label %land.lhs.true, label %if.end.22, !dbg !5827

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5828, !tbaa !1829
  %nb_float = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %6, i32 0, i32 18, !dbg !5830
  %nb_float1 = bitcast {}** %nb_float to %struct._object* (%struct._object*)**, !dbg !5830
  %7 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_float1, align 8, !dbg !5830, !tbaa !4197
  %tobool2 = icmp ne %struct._object* (%struct._object*)* %7, null, !dbg !5831
  br i1 %tobool2, label %if.then.3, label %if.end.22, !dbg !5832

if.then.3:                                        ; preds = %land.lhs.true
  %8 = bitcast %struct._object** %res to i8*, !dbg !5833
  call void @llvm.lifetime.start(i64 8, i8* %8) #2, !dbg !5833
  call void @llvm.dbg.declare(metadata %struct._object** %res, metadata !896, metadata !1833), !dbg !5834
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %m, align 8, !dbg !5835, !tbaa !1829
  %nb_float4 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 18, !dbg !5836
  %nb_float5 = bitcast {}** %nb_float4 to %struct._object* (%struct._object*)**, !dbg !5836
  %10 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_float5, align 8, !dbg !5836, !tbaa !4197
  %11 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5837, !tbaa !1829
  %call6 = call %struct._object* %10(%struct._object* %11), !dbg !5835
  store %struct._object* %call6, %struct._object** %res, align 8, !dbg !5834, !tbaa !1829
  %12 = load %struct._object*, %struct._object** %res, align 8, !dbg !5838, !tbaa !1829
  %tobool7 = icmp ne %struct._object* %12, null, !dbg !5838
  br i1 %tobool7, label %land.lhs.true.8, label %if.end.21, !dbg !5839

land.lhs.true.8:                                  ; preds = %if.then.3
  %13 = load %struct._object*, %struct._object** %res, align 8, !dbg !5840, !tbaa !1829
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1, !dbg !5842
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8, !dbg !5842, !tbaa !1845
  %cmp10 = icmp eq %struct._typeobject* %14, @PyFloat_Type, !dbg !5843
  br i1 %cmp10, label %if.end.21, label %lor.lhs.false, !dbg !5844

lor.lhs.false:                                    ; preds = %land.lhs.true.8
  %15 = load %struct._object*, %struct._object** %res, align 8, !dbg !5845, !tbaa !1829
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1, !dbg !5847
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8, !dbg !5847, !tbaa !1845
  %call12 = call i32 @PyType_IsSubtype(%struct._typeobject* %16, %struct._typeobject* @PyFloat_Type), !dbg !5848
  %tobool13 = icmp ne i32 %call12, 0, !dbg !5848
  br i1 %tobool13, label %if.end.21, label %if.then.14, !dbg !5849

if.then.14:                                       ; preds = %lor.lhs.false
  %17 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !5850, !tbaa !1829
  %18 = load %struct._object*, %struct._object** %res, align 8, !dbg !5851, !tbaa !1829
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1, !dbg !5852
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8, !dbg !5852, !tbaa !1845
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 1, !dbg !5853
  %20 = load i8*, i8** %tp_name, align 8, !dbg !5853, !tbaa !2094
  %call16 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %17, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.54, i32 0, i32 0), i8* %20), !dbg !5854
  br label %do.body, !dbg !5855

do.body:                                          ; preds = %if.then.14
  %21 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5856
  call void @llvm.lifetime.start(i64 8, i8* %21) #2, !dbg !5856
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !899, metadata !1833), !dbg !5858
  %22 = load %struct._object*, %struct._object** %res, align 8, !dbg !5859, !tbaa !1829
  store %struct._object* %22, %struct._object** %_py_decref_tmp, align 8, !dbg !5858, !tbaa !1829
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5860, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0, !dbg !5862
  %24 = load i64, i64* %ob_refcnt, align 8, !dbg !5863, !tbaa !1853
  %dec = add i64 %24, -1, !dbg !5863
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5863, !tbaa !1853
  %cmp17 = icmp ne i64 %dec, 0, !dbg !5864
  br i1 %cmp17, label %if.then.18, label %if.else, !dbg !5865

if.then.18:                                       ; preds = %do.body
  br label %if.end.20, !dbg !5866

if.else:                                          ; preds = %do.body
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5868, !tbaa !1829
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1, !dbg !5870
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8, !dbg !5870, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4, !dbg !5871
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5871, !tbaa !2033
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5872, !tbaa !1829
  call void %27(%struct._object* %28), !dbg !5873
  br label %if.end.20

if.end.20:                                        ; preds = %if.else, %if.then.18
  %29 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5874
  call void @llvm.lifetime.end(i64 8, i8* %29) #2, !dbg !5874
  br label %do.cond, !dbg !5876

do.cond:                                          ; preds = %if.end.20
  br label %do.end, !dbg !5877

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !5879
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5879

if.end.21:                                        ; preds = %lor.lhs.false, %land.lhs.true.8, %if.then.3
  %30 = load %struct._object*, %struct._object** %res, align 8, !dbg !5880, !tbaa !1829
  store %struct._object* %30, %struct._object** %retval, !dbg !5881
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5881

cleanup:                                          ; preds = %if.end.21, %do.end
  %31 = bitcast %struct._object** %res to i8*, !dbg !5882
  call void @llvm.lifetime.end(i64 8, i8* %31) #2, !dbg !5882
  br label %cleanup.34

if.end.22:                                        ; preds = %land.lhs.true, %if.end
  %32 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5883, !tbaa !1829
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1, !dbg !5884
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8, !dbg !5884, !tbaa !1845
  %cmp24 = icmp eq %struct._typeobject* %33, @PyFloat_Type, !dbg !5885
  br i1 %cmp24, label %if.then.29, label %lor.lhs.false.25, !dbg !5886

lor.lhs.false.25:                                 ; preds = %if.end.22
  %34 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5887, !tbaa !1829
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1, !dbg !5889
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8, !dbg !5889, !tbaa !1845
  %call27 = call i32 @PyType_IsSubtype(%struct._typeobject* %35, %struct._typeobject* @PyFloat_Type), !dbg !5890
  %tobool28 = icmp ne i32 %call27, 0, !dbg !5890
  br i1 %tobool28, label %if.then.29, label %if.end.32, !dbg !5891

if.then.29:                                       ; preds = %lor.lhs.false.25, %if.end.22
  %36 = bitcast %struct.PyFloatObject** %po to i8*, !dbg !5892
  call void @llvm.lifetime.start(i64 8, i8* %36) #2, !dbg !5892
  call void @llvm.dbg.declare(metadata %struct.PyFloatObject** %po, metadata !903, metadata !1833), !dbg !5893
  %37 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5894, !tbaa !1829
  %38 = bitcast %struct._object* %37 to %struct.PyFloatObject*, !dbg !5895
  store %struct.PyFloatObject* %38, %struct.PyFloatObject** %po, align 8, !dbg !5893, !tbaa !1829
  %39 = load %struct.PyFloatObject*, %struct.PyFloatObject** %po, align 8, !dbg !5896, !tbaa !1829
  %ob_fval = getelementptr inbounds %struct.PyFloatObject, %struct.PyFloatObject* %39, i32 0, i32 1, !dbg !5897
  %40 = load double, double* %ob_fval, align 8, !dbg !5897, !tbaa !5898
  %call30 = call %struct._object* @PyFloat_FromDouble(double %40), !dbg !5901
  store %struct._object* %call30, %struct._object** %retval, !dbg !5902
  store i32 1, i32* %cleanup.dest.slot
  %41 = bitcast %struct.PyFloatObject** %po to i8*, !dbg !5903
  call void @llvm.lifetime.end(i64 8, i8* %41) #2, !dbg !5903
  br label %cleanup.34

if.end.32:                                        ; preds = %lor.lhs.false.25
  %42 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !5904, !tbaa !1829
  %call33 = call %struct._object* @PyFloat_FromString(%struct._object* %42), !dbg !5905
  store %struct._object* %call33, %struct._object** %retval, !dbg !5906
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.34, !dbg !5906

cleanup.34:                                       ; preds = %if.end.32, %if.then.29, %cleanup, %if.then
  %43 = bitcast %struct.PyNumberMethods** %m to i8*, !dbg !5907
  call void @llvm.lifetime.end(i64 8, i8* %43) #2, !dbg !5907
  %44 = load %struct._object*, %struct._object** %retval, !dbg !5907
  ret %struct._object* %44, !dbg !5907
}

declare i32 @PyType_IsSubtype(%struct._typeobject*, %struct._typeobject*) #3

declare %struct._object* @PyFloat_FromDouble(double) #3

declare %struct._object* @PyFloat_FromString(%struct._object*) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PyNumber_ToBase(%struct._object* %n, i32 %base) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %n.addr = alloca %struct._object*, align 8
  %base.addr = alloca i32, align 4
  %res = alloca %struct._object*, align 8
  %index = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %n, %struct._object** %n.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %n.addr, metadata !910, metadata !1833), !dbg !5908
  store i32 %base, i32* %base.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %base.addr, metadata !911, metadata !1833), !dbg !5909
  %0 = bitcast %struct._object** %res to i8*, !dbg !5910
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !5910
  call void @llvm.dbg.declare(metadata %struct._object** %res, metadata !912, metadata !1833), !dbg !5911
  store %struct._object* null, %struct._object** %res, align 8, !dbg !5911, !tbaa !1829
  %1 = bitcast %struct._object** %index to i8*, !dbg !5912
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !5912
  call void @llvm.dbg.declare(metadata %struct._object** %index, metadata !913, metadata !1833), !dbg !5913
  %2 = load %struct._object*, %struct._object** %n.addr, align 8, !dbg !5914, !tbaa !1829
  %call = call %struct._object* @PyNumber_Index(%struct._object* %2), !dbg !5915
  store %struct._object* %call, %struct._object** %index, align 8, !dbg !5913, !tbaa !1829
  %3 = load %struct._object*, %struct._object** %index, align 8, !dbg !5916, !tbaa !1829
  %tobool = icmp ne %struct._object* %3, null, !dbg !5916
  br i1 %tobool, label %if.end, label %if.then, !dbg !5918

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5919
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5919

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %index, align 8, !dbg !5920, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1, !dbg !5922
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5922, !tbaa !1845
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 19, !dbg !5923
  %6 = load i64, i64* %tp_flags, align 8, !dbg !5923, !tbaa !2086
  %and = and i64 %6, 16777216, !dbg !5924
  %cmp = icmp ne i64 %and, 0, !dbg !5925
  br i1 %cmp, label %if.then.1, label %if.else, !dbg !5926

if.then.1:                                        ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %index, align 8, !dbg !5927, !tbaa !1829
  %8 = load i32, i32* %base.addr, align 4, !dbg !5928, !tbaa !2764
  %call2 = call %struct._object* @_PyLong_Format(%struct._object* %7, i32 %8), !dbg !5929
  store %struct._object* %call2, %struct._object** %res, align 8, !dbg !5930, !tbaa !1829
  br label %if.end.3, !dbg !5931

if.else:                                          ; preds = %if.end
  %9 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !5932, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %9, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.55, i32 0, i32 0)), !dbg !5933
  br label %if.end.3

if.end.3:                                         ; preds = %if.else, %if.then.1
  br label %do.body, !dbg !5934

do.body:                                          ; preds = %if.end.3
  %10 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5935
  call void @llvm.lifetime.start(i64 8, i8* %10) #2, !dbg !5935
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !914, metadata !1833), !dbg !5937
  %11 = load %struct._object*, %struct._object** %index, align 8, !dbg !5938, !tbaa !1829
  store %struct._object* %11, %struct._object** %_py_decref_tmp, align 8, !dbg !5937, !tbaa !1829
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5939, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0, !dbg !5941
  %13 = load i64, i64* %ob_refcnt, align 8, !dbg !5942, !tbaa !1853
  %dec = add i64 %13, -1, !dbg !5942
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5942, !tbaa !1853
  %cmp4 = icmp ne i64 %dec, 0, !dbg !5943
  br i1 %cmp4, label %if.then.5, label %if.else.6, !dbg !5944

if.then.5:                                        ; preds = %do.body
  br label %if.end.8, !dbg !5945

if.else.6:                                        ; preds = %do.body
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5947, !tbaa !1829
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1, !dbg !5949
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8, !dbg !5949, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 4, !dbg !5950
  %16 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5950, !tbaa !2033
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5951, !tbaa !1829
  call void %16(%struct._object* %17), !dbg !5952
  br label %if.end.8

if.end.8:                                         ; preds = %if.else.6, %if.then.5
  %18 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5953
  call void @llvm.lifetime.end(i64 8, i8* %18) #2, !dbg !5953
  br label %do.cond, !dbg !5955

do.cond:                                          ; preds = %if.end.8
  br label %do.end, !dbg !5956

do.end:                                           ; preds = %do.cond
  %19 = load %struct._object*, %struct._object** %res, align 8, !dbg !5958, !tbaa !1829
  store %struct._object* %19, %struct._object** %retval, !dbg !5959
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5959

cleanup:                                          ; preds = %do.end, %if.then
  %20 = bitcast %struct._object** %index to i8*, !dbg !5960
  call void @llvm.lifetime.end(i64 8, i8* %20) #2, !dbg !5960
  %21 = bitcast %struct._object** %res to i8*, !dbg !5960
  call void @llvm.lifetime.end(i64 8, i8* %21) #2, !dbg !5960
  %22 = load %struct._object*, %struct._object** %retval, !dbg !5960
  ret %struct._object* %22, !dbg !5960
}

declare %struct._object* @_PyLong_Format(%struct._object*, i32) #3

; Function Attrs: nounwind uwtable
define i32 @PySequence_Check(%struct._object* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct._object*, align 8
  store %struct._object* %s, %struct._object** %s.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %s.addr, metadata !918, metadata !1833), !dbg !5961
  %0 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !5962, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1, !dbg !5964
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5964, !tbaa !1845
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19, !dbg !5965
  %2 = load i64, i64* %tp_flags, align 8, !dbg !5965, !tbaa !2086
  %and = and i64 %2, 536870912, !dbg !5966
  %cmp = icmp ne i64 %and, 0, !dbg !5967
  br i1 %cmp, label %if.then, label %if.end, !dbg !5968

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !5969
  br label %return, !dbg !5969

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !5970, !tbaa !1829
  %cmp1 = icmp ne %struct._object* %3, null, !dbg !5971
  br i1 %cmp1, label %land.lhs.true, label %land.end, !dbg !5972

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !5973, !tbaa !1829
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1, !dbg !5975
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8, !dbg !5975, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 11, !dbg !5976
  %6 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !5976, !tbaa !1876
  %tobool = icmp ne %struct.PySequenceMethods* %6, null, !dbg !5977
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5978

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !5979, !tbaa !1829
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1, !dbg !5980
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8, !dbg !5980, !tbaa !1845
  %tp_as_sequence4 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 11, !dbg !5981
  %9 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence4, align 8, !dbg !5981, !tbaa !1876
  %sq_item = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %9, i32 0, i32 3, !dbg !5982
  %10 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_item, align 8, !dbg !5982, !tbaa !2297
  %cmp5 = icmp ne %struct._object* (%struct._object*, i64)* %10, null, !dbg !5983
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %if.end
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %if.end ], [ %cmp5, %land.rhs ]
  %land.ext = zext i1 %11 to i32, !dbg !5984
  store i32 %land.ext, i32* %retval, !dbg !5987
  br label %return, !dbg !5987

return:                                           ; preds = %land.end, %if.then
  %12 = load i32, i32* %retval, !dbg !5988
  ret i32 %12, !dbg !5988
}

; Function Attrs: nounwind uwtable
define i64 @PySequence_Size(%struct._object* %s) #0 {
entry:
  %retval = alloca i64, align 8
  %s.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PySequenceMethods*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %s, %struct._object** %s.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %s.addr, metadata !921, metadata !1833), !dbg !5989
  %0 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !5990
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !5990
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %m, metadata !922, metadata !1833), !dbg !5991
  %1 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !5992, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !5994
  br i1 %cmp, label %if.then, label %if.end, !dbg !5995

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !5996
  store i64 -1, i64* %retval, !dbg !5998
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5998

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !5999, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !6000
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6000, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 11, !dbg !6001
  %4 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !6001, !tbaa !1876
  store %struct.PySequenceMethods* %4, %struct.PySequenceMethods** %m, align 8, !dbg !6002, !tbaa !1829
  %5 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6003, !tbaa !1829
  %tobool = icmp ne %struct.PySequenceMethods* %5, null, !dbg !6003
  br i1 %tobool, label %land.lhs.true, label %if.end.5, !dbg !6005

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6006, !tbaa !1829
  %sq_length = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %6, i32 0, i32 0, !dbg !6008
  %7 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length, align 8, !dbg !6008, !tbaa !1887
  %tobool1 = icmp ne i64 (%struct._object*)* %7, null, !dbg !6009
  br i1 %tobool1, label %if.then.2, label %if.end.5, !dbg !6010

if.then.2:                                        ; preds = %land.lhs.true
  %8 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6011, !tbaa !1829
  %sq_length3 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %8, i32 0, i32 0, !dbg !6012
  %9 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length3, align 8, !dbg !6012, !tbaa !1887
  %10 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6013, !tbaa !1829
  %call4 = call i64 %9(%struct._object* %10), !dbg !6011
  store i64 %call4, i64* %retval, !dbg !6014
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6014

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %11 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6015, !tbaa !1829
  %call6 = call %struct._object* @type_error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.56, i32 0, i32 0), %struct._object* %11), !dbg !6016
  store i64 -1, i64* %retval, !dbg !6017
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6017

cleanup:                                          ; preds = %if.end.5, %if.then.2, %if.then
  %12 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !6018
  call void @llvm.lifetime.end(i64 8, i8* %12) #2, !dbg !6018
  %13 = load i64, i64* %retval, !dbg !6018
  ret i64 %13, !dbg !6018
}

; Function Attrs: nounwind uwtable
define i64 @PySequence_Length(%struct._object* %s) #0 {
entry:
  %s.addr = alloca %struct._object*, align 8
  store %struct._object* %s, %struct._object** %s.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %s.addr, metadata !925, metadata !1833), !dbg !6019
  %0 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6020, !tbaa !1829
  %call = call i64 @PySequence_Size(%struct._object* %0), !dbg !6021
  ret i64 %call, !dbg !6022
}

; Function Attrs: nounwind uwtable
define %struct._object* @PySequence_Concat(%struct._object* %s, %struct._object* %o) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PySequenceMethods*, align 8
  %cleanup.dest.slot = alloca i32
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %s, %struct._object** %s.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %s.addr, metadata !928, metadata !1833), !dbg !6023
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !929, metadata !1833), !dbg !6024
  %0 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !6025
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !6025
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %m, metadata !930, metadata !1833), !dbg !6026
  %1 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6027, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !6029
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6030

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6031, !tbaa !1829
  %cmp1 = icmp eq %struct._object* %2, null, !dbg !6033
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6034

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !6035
  store %struct._object* %call, %struct._object** %retval, !dbg !6036
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.23, !dbg !6036

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6037, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1, !dbg !6038
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6038, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 11, !dbg !6039
  %5 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !6039, !tbaa !1876
  store %struct.PySequenceMethods* %5, %struct.PySequenceMethods** %m, align 8, !dbg !6040, !tbaa !1829
  %6 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6041, !tbaa !1829
  %tobool = icmp ne %struct.PySequenceMethods* %6, null, !dbg !6041
  br i1 %tobool, label %land.lhs.true, label %if.end.6, !dbg !6043

land.lhs.true:                                    ; preds = %if.end
  %7 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6044, !tbaa !1829
  %sq_concat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %7, i32 0, i32 1, !dbg !6046
  %8 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_concat, align 8, !dbg !6046, !tbaa !4334
  %tobool2 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %8, null, !dbg !6047
  br i1 %tobool2, label %if.then.3, label %if.end.6, !dbg !6048

if.then.3:                                        ; preds = %land.lhs.true
  %9 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6049, !tbaa !1829
  %sq_concat4 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %9, i32 0, i32 1, !dbg !6050
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_concat4, align 8, !dbg !6050, !tbaa !4334
  %11 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6051, !tbaa !1829
  %12 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6052, !tbaa !1829
  %call5 = call %struct._object* %10(%struct._object* %11, %struct._object* %12), !dbg !6049
  store %struct._object* %call5, %struct._object** %retval, !dbg !6053
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.23, !dbg !6053

if.end.6:                                         ; preds = %land.lhs.true, %if.end
  %13 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6054, !tbaa !1829
  %call7 = call i32 @PySequence_Check(%struct._object* %13), !dbg !6055
  %tobool8 = icmp ne i32 %call7, 0, !dbg !6055
  br i1 %tobool8, label %land.lhs.true.9, label %if.end.21, !dbg !6056

land.lhs.true.9:                                  ; preds = %if.end.6
  %14 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6057, !tbaa !1829
  %call10 = call i32 @PySequence_Check(%struct._object* %14), !dbg !6059
  %tobool11 = icmp ne i32 %call10, 0, !dbg !6059
  br i1 %tobool11, label %if.then.12, label %if.end.21, !dbg !6060

if.then.12:                                       ; preds = %land.lhs.true.9
  %15 = bitcast %struct._object** %result to i8*, !dbg !6061
  call void @llvm.lifetime.start(i64 8, i8* %15) #2, !dbg !6061
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !931, metadata !1833), !dbg !6062
  %16 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6063, !tbaa !1829
  %17 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6064, !tbaa !1829
  %call13 = call %struct._object* @binary_op1(%struct._object* %16, %struct._object* %17, i32 0), !dbg !6065
  store %struct._object* %call13, %struct._object** %result, align 8, !dbg !6062, !tbaa !1829
  %18 = load %struct._object*, %struct._object** %result, align 8, !dbg !6066, !tbaa !1829
  %cmp14 = icmp ne %struct._object* %18, @_Py_NotImplementedStruct, !dbg !6068
  br i1 %cmp14, label %if.then.15, label %if.end.16, !dbg !6069

if.then.15:                                       ; preds = %if.then.12
  %19 = load %struct._object*, %struct._object** %result, align 8, !dbg !6070, !tbaa !1829
  store %struct._object* %19, %struct._object** %retval, !dbg !6071
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6071

if.end.16:                                        ; preds = %if.then.12
  br label %do.body, !dbg !6072

do.body:                                          ; preds = %if.end.16
  %20 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6073
  call void @llvm.lifetime.start(i64 8, i8* %20) #2, !dbg !6073
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !934, metadata !1833), !dbg !6075
  %21 = load %struct._object*, %struct._object** %result, align 8, !dbg !6076, !tbaa !1829
  store %struct._object* %21, %struct._object** %_py_decref_tmp, align 8, !dbg !6075, !tbaa !1829
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6077, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0, !dbg !6079
  %23 = load i64, i64* %ob_refcnt, align 8, !dbg !6080, !tbaa !1853
  %dec = add i64 %23, -1, !dbg !6080
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !6080, !tbaa !1853
  %cmp17 = icmp ne i64 %dec, 0, !dbg !6081
  br i1 %cmp17, label %if.then.18, label %if.else, !dbg !6082

if.then.18:                                       ; preds = %do.body
  br label %if.end.20, !dbg !6083

if.else:                                          ; preds = %do.body
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6085, !tbaa !1829
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1, !dbg !6087
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8, !dbg !6087, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4, !dbg !6088
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6088, !tbaa !2033
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6089, !tbaa !1829
  call void %26(%struct._object* %27), !dbg !6090
  br label %if.end.20

if.end.20:                                        ; preds = %if.else, %if.then.18
  %28 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6091
  call void @llvm.lifetime.end(i64 8, i8* %28) #2, !dbg !6091
  br label %do.cond, !dbg !6093

do.cond:                                          ; preds = %if.end.20
  br label %do.end, !dbg !6094

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %cleanup.dest.slot, !dbg !6096
  br label %cleanup, !dbg !6096

cleanup:                                          ; preds = %do.end, %if.then.15
  %29 = bitcast %struct._object** %result to i8*, !dbg !6097
  call void @llvm.lifetime.end(i64 8, i8* %29) #2, !dbg !6097
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.21, !dbg !6098

if.end.21:                                        ; preds = %cleanup.cont, %land.lhs.true.9, %if.end.6
  %30 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6099, !tbaa !1829
  %call22 = call %struct._object* @type_error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.57, i32 0, i32 0), %struct._object* %30), !dbg !6100
  store %struct._object* %call22, %struct._object** %retval, !dbg !6101
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.23, !dbg !6101

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.23

cleanup.23:                                       ; preds = %NewDefault, %if.end.21, %if.then.3, %if.then
  %31 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !6102
  call void @llvm.lifetime.end(i64 8, i8* %31) #2, !dbg !6102
  %32 = load %struct._object*, %struct._object** %retval, !dbg !6102
  ret %struct._object* %32, !dbg !6102
}

; Function Attrs: nounwind uwtable
define %struct._object* @PySequence_Repeat(%struct._object* %o, i64 %count) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %count.addr = alloca i64, align 8
  %m = alloca %struct.PySequenceMethods*, align 8
  %cleanup.dest.slot = alloca i32
  %n = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp22 = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !938, metadata !1833), !dbg !6103
  store i64 %count, i64* %count.addr, align 8, !tbaa !1963
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !939, metadata !1833), !dbg !6104
  %0 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !6105
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !6105
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %m, metadata !940, metadata !1833), !dbg !6106
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6107, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !6109
  br i1 %cmp, label %if.then, label %if.end, !dbg !6110

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !6111
  store %struct._object* %call, %struct._object** %retval, !dbg !6112
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.36, !dbg !6112

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6113, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !6114
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6114, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 11, !dbg !6115
  %4 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !6115, !tbaa !1876
  store %struct.PySequenceMethods* %4, %struct.PySequenceMethods** %m, align 8, !dbg !6116, !tbaa !1829
  %5 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6117, !tbaa !1829
  %tobool = icmp ne %struct.PySequenceMethods* %5, null, !dbg !6117
  br i1 %tobool, label %land.lhs.true, label %if.end.5, !dbg !6119

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6120, !tbaa !1829
  %sq_repeat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %6, i32 0, i32 2, !dbg !6122
  %7 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat, align 8, !dbg !6122, !tbaa !4595
  %tobool1 = icmp ne %struct._object* (%struct._object*, i64)* %7, null, !dbg !6123
  br i1 %tobool1, label %if.then.2, label %if.end.5, !dbg !6124

if.then.2:                                        ; preds = %land.lhs.true
  %8 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6125, !tbaa !1829
  %sq_repeat3 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %8, i32 0, i32 2, !dbg !6126
  %9 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat3, align 8, !dbg !6126, !tbaa !4595
  %10 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6127, !tbaa !1829
  %11 = load i64, i64* %count.addr, align 8, !dbg !6128, !tbaa !1963
  %call4 = call %struct._object* %9(%struct._object* %10, i64 %11), !dbg !6125
  store %struct._object* %call4, %struct._object** %retval, !dbg !6129
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.36, !dbg !6129

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %12 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6130, !tbaa !1829
  %call6 = call i32 @PySequence_Check(%struct._object* %12), !dbg !6131
  %tobool7 = icmp ne i32 %call6, 0, !dbg !6131
  br i1 %tobool7, label %if.then.8, label %if.end.34, !dbg !6132

if.then.8:                                        ; preds = %if.end.5
  %13 = bitcast %struct._object** %n to i8*, !dbg !6133
  call void @llvm.lifetime.start(i64 8, i8* %13) #2, !dbg !6133
  call void @llvm.dbg.declare(metadata %struct._object** %n, metadata !941, metadata !1833), !dbg !6134
  %14 = bitcast %struct._object** %result to i8*, !dbg !6133
  call void @llvm.lifetime.start(i64 8, i8* %14) #2, !dbg !6133
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !944, metadata !1833), !dbg !6135
  %15 = load i64, i64* %count.addr, align 8, !dbg !6136, !tbaa !1963
  %call9 = call %struct._object* @PyLong_FromSsize_t(i64 %15), !dbg !6137
  store %struct._object* %call9, %struct._object** %n, align 8, !dbg !6138, !tbaa !1829
  %16 = load %struct._object*, %struct._object** %n, align 8, !dbg !6139, !tbaa !1829
  %cmp10 = icmp eq %struct._object* %16, null, !dbg !6141
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !6142

if.then.11:                                       ; preds = %if.then.8
  store %struct._object* null, %struct._object** %retval, !dbg !6143
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6143

if.end.12:                                        ; preds = %if.then.8
  %17 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6144, !tbaa !1829
  %18 = load %struct._object*, %struct._object** %n, align 8, !dbg !6145, !tbaa !1829
  %call13 = call %struct._object* @binary_op1(%struct._object* %17, %struct._object* %18, i32 16), !dbg !6146
  store %struct._object* %call13, %struct._object** %result, align 8, !dbg !6147, !tbaa !1829
  br label %do.body, !dbg !6148

do.body:                                          ; preds = %if.end.12
  %19 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6149
  call void @llvm.lifetime.start(i64 8, i8* %19) #2, !dbg !6149
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !945, metadata !1833), !dbg !6151
  %20 = load %struct._object*, %struct._object** %n, align 8, !dbg !6152, !tbaa !1829
  store %struct._object* %20, %struct._object** %_py_decref_tmp, align 8, !dbg !6151, !tbaa !1829
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6153, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0, !dbg !6155
  %22 = load i64, i64* %ob_refcnt, align 8, !dbg !6156, !tbaa !1853
  %dec = add i64 %22, -1, !dbg !6156
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !6156, !tbaa !1853
  %cmp14 = icmp ne i64 %dec, 0, !dbg !6157
  br i1 %cmp14, label %if.then.15, label %if.else, !dbg !6158

if.then.15:                                       ; preds = %do.body
  br label %if.end.17, !dbg !6159

if.else:                                          ; preds = %do.body
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6161, !tbaa !1829
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1, !dbg !6163
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8, !dbg !6163, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4, !dbg !6164
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6164, !tbaa !2033
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6165, !tbaa !1829
  call void %25(%struct._object* %26), !dbg !6166
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.then.15
  %27 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6167
  call void @llvm.lifetime.end(i64 8, i8* %27) #2, !dbg !6167
  br label %do.cond, !dbg !6169

do.cond:                                          ; preds = %if.end.17
  br label %do.end, !dbg !6170

do.end:                                           ; preds = %do.cond
  %28 = load %struct._object*, %struct._object** %result, align 8, !dbg !6172, !tbaa !1829
  %cmp18 = icmp ne %struct._object* %28, @_Py_NotImplementedStruct, !dbg !6174
  br i1 %cmp18, label %if.then.19, label %if.end.20, !dbg !6175

if.then.19:                                       ; preds = %do.end
  %29 = load %struct._object*, %struct._object** %result, align 8, !dbg !6176, !tbaa !1829
  store %struct._object* %29, %struct._object** %retval, !dbg !6177
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6177

if.end.20:                                        ; preds = %do.end
  br label %do.body.21, !dbg !6178

do.body.21:                                       ; preds = %if.end.20
  %30 = bitcast %struct._object** %_py_decref_tmp22 to i8*, !dbg !6179
  call void @llvm.lifetime.start(i64 8, i8* %30) #2, !dbg !6179
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp22, metadata !947, metadata !1833), !dbg !6181
  %31 = load %struct._object*, %struct._object** %result, align 8, !dbg !6182, !tbaa !1829
  store %struct._object* %31, %struct._object** %_py_decref_tmp22, align 8, !dbg !6181, !tbaa !1829
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8, !dbg !6183, !tbaa !1829
  %ob_refcnt23 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0, !dbg !6185
  %33 = load i64, i64* %ob_refcnt23, align 8, !dbg !6186, !tbaa !1853
  %dec24 = add i64 %33, -1, !dbg !6186
  store i64 %dec24, i64* %ob_refcnt23, align 8, !dbg !6186, !tbaa !1853
  %cmp25 = icmp ne i64 %dec24, 0, !dbg !6187
  br i1 %cmp25, label %if.then.26, label %if.else.27, !dbg !6188

if.then.26:                                       ; preds = %do.body.21
  br label %if.end.30, !dbg !6189

if.else.27:                                       ; preds = %do.body.21
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8, !dbg !6191, !tbaa !1829
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1, !dbg !6193
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8, !dbg !6193, !tbaa !1845
  %tp_dealloc29 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4, !dbg !6194
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc29, align 8, !dbg !6194, !tbaa !2033
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8, !dbg !6195, !tbaa !1829
  call void %36(%struct._object* %37), !dbg !6196
  br label %if.end.30

if.end.30:                                        ; preds = %if.else.27, %if.then.26
  %38 = bitcast %struct._object** %_py_decref_tmp22 to i8*, !dbg !6197
  call void @llvm.lifetime.end(i64 8, i8* %38) #2, !dbg !6197
  br label %do.cond.31, !dbg !6198

do.cond.31:                                       ; preds = %if.end.30
  br label %do.end.32, !dbg !6199

do.end.32:                                        ; preds = %do.cond.31
  store i32 0, i32* %cleanup.dest.slot, !dbg !6201
  br label %cleanup, !dbg !6201

cleanup:                                          ; preds = %do.end.32, %if.then.19, %if.then.11
  %39 = bitcast %struct._object** %result to i8*, !dbg !6202
  call void @llvm.lifetime.end(i64 8, i8* %39) #2, !dbg !6202
  %40 = bitcast %struct._object** %n to i8*, !dbg !6202
  call void @llvm.lifetime.end(i64 8, i8* %40) #2, !dbg !6202
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.34, !dbg !6204

if.end.34:                                        ; preds = %cleanup.cont, %if.end.5
  %41 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6205, !tbaa !1829
  %call35 = call %struct._object* @type_error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.58, i32 0, i32 0), %struct._object* %41), !dbg !6206
  store %struct._object* %call35, %struct._object** %retval, !dbg !6207
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.36, !dbg !6207

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.36

cleanup.36:                                       ; preds = %NewDefault, %if.end.34, %if.then.2, %if.then
  %42 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !6208
  call void @llvm.lifetime.end(i64 8, i8* %42) #2, !dbg !6208
  %43 = load %struct._object*, %struct._object** %retval, !dbg !6208
  ret %struct._object* %43, !dbg !6208
}

declare %struct._object* @PyLong_FromSsize_t(i64) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PySequence_InPlaceConcat(%struct._object* %s, %struct._object* %o) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %m = alloca %struct.PySequenceMethods*, align 8
  %cleanup.dest.slot = alloca i32
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %s, %struct._object** %s.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %s.addr, metadata !951, metadata !1833), !dbg !6209
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !952, metadata !1833), !dbg !6210
  %0 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !6211
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !6211
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %m, metadata !953, metadata !1833), !dbg !6212
  %1 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6213, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !6215
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6216

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6217, !tbaa !1829
  %cmp1 = icmp eq %struct._object* %2, null, !dbg !6219
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6220

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !6221
  store %struct._object* %call, %struct._object** %retval, !dbg !6222
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.30, !dbg !6222

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6223, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1, !dbg !6224
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6224, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 11, !dbg !6225
  %5 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !6225, !tbaa !1876
  store %struct.PySequenceMethods* %5, %struct.PySequenceMethods** %m, align 8, !dbg !6226, !tbaa !1829
  %6 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6227, !tbaa !1829
  %tobool = icmp ne %struct.PySequenceMethods* %6, null, !dbg !6227
  br i1 %tobool, label %land.lhs.true, label %if.end.6, !dbg !6229

land.lhs.true:                                    ; preds = %if.end
  %7 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6230, !tbaa !1829
  %sq_inplace_concat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %7, i32 0, i32 8, !dbg !6232
  %8 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_inplace_concat, align 8, !dbg !6232, !tbaa !5115
  %tobool2 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %8, null, !dbg !6233
  br i1 %tobool2, label %if.then.3, label %if.end.6, !dbg !6234

if.then.3:                                        ; preds = %land.lhs.true
  %9 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6235, !tbaa !1829
  %sq_inplace_concat4 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %9, i32 0, i32 8, !dbg !6236
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_inplace_concat4, align 8, !dbg !6236, !tbaa !5115
  %11 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6237, !tbaa !1829
  %12 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6238, !tbaa !1829
  %call5 = call %struct._object* %10(%struct._object* %11, %struct._object* %12), !dbg !6235
  store %struct._object* %call5, %struct._object** %retval, !dbg !6239
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.30, !dbg !6239

if.end.6:                                         ; preds = %land.lhs.true, %if.end
  %13 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6240, !tbaa !1829
  %tobool7 = icmp ne %struct.PySequenceMethods* %13, null, !dbg !6240
  br i1 %tobool7, label %land.lhs.true.8, label %if.end.13, !dbg !6242

land.lhs.true.8:                                  ; preds = %if.end.6
  %14 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6243, !tbaa !1829
  %sq_concat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %14, i32 0, i32 1, !dbg !6245
  %15 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_concat, align 8, !dbg !6245, !tbaa !4334
  %tobool9 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %15, null, !dbg !6246
  br i1 %tobool9, label %if.then.10, label %if.end.13, !dbg !6247

if.then.10:                                       ; preds = %land.lhs.true.8
  %16 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6248, !tbaa !1829
  %sq_concat11 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %16, i32 0, i32 1, !dbg !6249
  %17 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_concat11, align 8, !dbg !6249, !tbaa !4334
  %18 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6250, !tbaa !1829
  %19 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6251, !tbaa !1829
  %call12 = call %struct._object* %17(%struct._object* %18, %struct._object* %19), !dbg !6248
  store %struct._object* %call12, %struct._object** %retval, !dbg !6252
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.30, !dbg !6252

if.end.13:                                        ; preds = %land.lhs.true.8, %if.end.6
  %20 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6253, !tbaa !1829
  %call14 = call i32 @PySequence_Check(%struct._object* %20), !dbg !6254
  %tobool15 = icmp ne i32 %call14, 0, !dbg !6254
  br i1 %tobool15, label %land.lhs.true.16, label %if.end.28, !dbg !6255

land.lhs.true.16:                                 ; preds = %if.end.13
  %21 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6256, !tbaa !1829
  %call17 = call i32 @PySequence_Check(%struct._object* %21), !dbg !6258
  %tobool18 = icmp ne i32 %call17, 0, !dbg !6258
  br i1 %tobool18, label %if.then.19, label %if.end.28, !dbg !6259

if.then.19:                                       ; preds = %land.lhs.true.16
  %22 = bitcast %struct._object** %result to i8*, !dbg !6260
  call void @llvm.lifetime.start(i64 8, i8* %22) #2, !dbg !6260
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !954, metadata !1833), !dbg !6261
  %23 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6262, !tbaa !1829
  %24 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6263, !tbaa !1829
  %call20 = call %struct._object* @binary_iop1(%struct._object* %23, %struct._object* %24, i32 152, i32 0), !dbg !6264
  store %struct._object* %call20, %struct._object** %result, align 8, !dbg !6261, !tbaa !1829
  %25 = load %struct._object*, %struct._object** %result, align 8, !dbg !6265, !tbaa !1829
  %cmp21 = icmp ne %struct._object* %25, @_Py_NotImplementedStruct, !dbg !6267
  br i1 %cmp21, label %if.then.22, label %if.end.23, !dbg !6268

if.then.22:                                       ; preds = %if.then.19
  %26 = load %struct._object*, %struct._object** %result, align 8, !dbg !6269, !tbaa !1829
  store %struct._object* %26, %struct._object** %retval, !dbg !6270
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6270

if.end.23:                                        ; preds = %if.then.19
  br label %do.body, !dbg !6271

do.body:                                          ; preds = %if.end.23
  %27 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6272
  call void @llvm.lifetime.start(i64 8, i8* %27) #2, !dbg !6272
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !957, metadata !1833), !dbg !6274
  %28 = load %struct._object*, %struct._object** %result, align 8, !dbg !6275, !tbaa !1829
  store %struct._object* %28, %struct._object** %_py_decref_tmp, align 8, !dbg !6274, !tbaa !1829
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6276, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0, !dbg !6278
  %30 = load i64, i64* %ob_refcnt, align 8, !dbg !6279, !tbaa !1853
  %dec = add i64 %30, -1, !dbg !6279
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !6279, !tbaa !1853
  %cmp24 = icmp ne i64 %dec, 0, !dbg !6280
  br i1 %cmp24, label %if.then.25, label %if.else, !dbg !6281

if.then.25:                                       ; preds = %do.body
  br label %if.end.27, !dbg !6282

if.else:                                          ; preds = %do.body
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6284, !tbaa !1829
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1, !dbg !6286
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8, !dbg !6286, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4, !dbg !6287
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6287, !tbaa !2033
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6288, !tbaa !1829
  call void %33(%struct._object* %34), !dbg !6289
  br label %if.end.27

if.end.27:                                        ; preds = %if.else, %if.then.25
  %35 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6290
  call void @llvm.lifetime.end(i64 8, i8* %35) #2, !dbg !6290
  br label %do.cond, !dbg !6292

do.cond:                                          ; preds = %if.end.27
  br label %do.end, !dbg !6293

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %cleanup.dest.slot, !dbg !6295
  br label %cleanup, !dbg !6295

cleanup:                                          ; preds = %do.end, %if.then.22
  %36 = bitcast %struct._object** %result to i8*, !dbg !6296
  call void @llvm.lifetime.end(i64 8, i8* %36) #2, !dbg !6296
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.28, !dbg !6297

if.end.28:                                        ; preds = %cleanup.cont, %land.lhs.true.16, %if.end.13
  %37 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6298, !tbaa !1829
  %call29 = call %struct._object* @type_error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.57, i32 0, i32 0), %struct._object* %37), !dbg !6299
  store %struct._object* %call29, %struct._object** %retval, !dbg !6300
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.30, !dbg !6300

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.30

cleanup.30:                                       ; preds = %NewDefault, %if.end.28, %if.then.10, %if.then.3, %if.then
  %38 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !6301
  call void @llvm.lifetime.end(i64 8, i8* %38) #2, !dbg !6301
  %39 = load %struct._object*, %struct._object** %retval, !dbg !6301
  ret %struct._object* %39, !dbg !6301
}

; Function Attrs: nounwind uwtable
define %struct._object* @PySequence_InPlaceRepeat(%struct._object* %o, i64 %count) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %count.addr = alloca i64, align 8
  %m = alloca %struct.PySequenceMethods*, align 8
  %cleanup.dest.slot = alloca i32
  %n = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp29 = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !961, metadata !1833), !dbg !6302
  store i64 %count, i64* %count.addr, align 8, !tbaa !1963
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !962, metadata !1833), !dbg !6303
  %0 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !6304
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !6304
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %m, metadata !963, metadata !1833), !dbg !6305
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6306, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !6308
  br i1 %cmp, label %if.then, label %if.end, !dbg !6309

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !6310
  store %struct._object* %call, %struct._object** %retval, !dbg !6311
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.43, !dbg !6311

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6312, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !6313
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6313, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 11, !dbg !6314
  %4 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !6314, !tbaa !1876
  store %struct.PySequenceMethods* %4, %struct.PySequenceMethods** %m, align 8, !dbg !6315, !tbaa !1829
  %5 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6316, !tbaa !1829
  %tobool = icmp ne %struct.PySequenceMethods* %5, null, !dbg !6316
  br i1 %tobool, label %land.lhs.true, label %if.end.5, !dbg !6318

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6319, !tbaa !1829
  %sq_inplace_repeat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %6, i32 0, i32 9, !dbg !6321
  %7 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_inplace_repeat, align 8, !dbg !6321, !tbaa !5275
  %tobool1 = icmp ne %struct._object* (%struct._object*, i64)* %7, null, !dbg !6322
  br i1 %tobool1, label %if.then.2, label %if.end.5, !dbg !6323

if.then.2:                                        ; preds = %land.lhs.true
  %8 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6324, !tbaa !1829
  %sq_inplace_repeat3 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %8, i32 0, i32 9, !dbg !6325
  %9 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_inplace_repeat3, align 8, !dbg !6325, !tbaa !5275
  %10 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6326, !tbaa !1829
  %11 = load i64, i64* %count.addr, align 8, !dbg !6327, !tbaa !1963
  %call4 = call %struct._object* %9(%struct._object* %10, i64 %11), !dbg !6324
  store %struct._object* %call4, %struct._object** %retval, !dbg !6328
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.43, !dbg !6328

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %12 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6329, !tbaa !1829
  %tobool6 = icmp ne %struct.PySequenceMethods* %12, null, !dbg !6329
  br i1 %tobool6, label %land.lhs.true.7, label %if.end.12, !dbg !6331

land.lhs.true.7:                                  ; preds = %if.end.5
  %13 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6332, !tbaa !1829
  %sq_repeat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %13, i32 0, i32 2, !dbg !6334
  %14 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat, align 8, !dbg !6334, !tbaa !4595
  %tobool8 = icmp ne %struct._object* (%struct._object*, i64)* %14, null, !dbg !6335
  br i1 %tobool8, label %if.then.9, label %if.end.12, !dbg !6336

if.then.9:                                        ; preds = %land.lhs.true.7
  %15 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %m, align 8, !dbg !6337, !tbaa !1829
  %sq_repeat10 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %15, i32 0, i32 2, !dbg !6338
  %16 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat10, align 8, !dbg !6338, !tbaa !4595
  %17 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6339, !tbaa !1829
  %18 = load i64, i64* %count.addr, align 8, !dbg !6340, !tbaa !1963
  %call11 = call %struct._object* %16(%struct._object* %17, i64 %18), !dbg !6337
  store %struct._object* %call11, %struct._object** %retval, !dbg !6341
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.43, !dbg !6341

if.end.12:                                        ; preds = %land.lhs.true.7, %if.end.5
  %19 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6342, !tbaa !1829
  %call13 = call i32 @PySequence_Check(%struct._object* %19), !dbg !6343
  %tobool14 = icmp ne i32 %call13, 0, !dbg !6343
  br i1 %tobool14, label %if.then.15, label %if.end.41, !dbg !6344

if.then.15:                                       ; preds = %if.end.12
  %20 = bitcast %struct._object** %n to i8*, !dbg !6345
  call void @llvm.lifetime.start(i64 8, i8* %20) #2, !dbg !6345
  call void @llvm.dbg.declare(metadata %struct._object** %n, metadata !964, metadata !1833), !dbg !6346
  %21 = bitcast %struct._object** %result to i8*, !dbg !6345
  call void @llvm.lifetime.start(i64 8, i8* %21) #2, !dbg !6345
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !967, metadata !1833), !dbg !6347
  %22 = load i64, i64* %count.addr, align 8, !dbg !6348, !tbaa !1963
  %call16 = call %struct._object* @PyLong_FromSsize_t(i64 %22), !dbg !6349
  store %struct._object* %call16, %struct._object** %n, align 8, !dbg !6350, !tbaa !1829
  %23 = load %struct._object*, %struct._object** %n, align 8, !dbg !6351, !tbaa !1829
  %cmp17 = icmp eq %struct._object* %23, null, !dbg !6353
  br i1 %cmp17, label %if.then.18, label %if.end.19, !dbg !6354

if.then.18:                                       ; preds = %if.then.15
  store %struct._object* null, %struct._object** %retval, !dbg !6355
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6355

if.end.19:                                        ; preds = %if.then.15
  %24 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6356, !tbaa !1829
  %25 = load %struct._object*, %struct._object** %n, align 8, !dbg !6357, !tbaa !1829
  %call20 = call %struct._object* @binary_iop1(%struct._object* %24, %struct._object* %25, i32 168, i32 16), !dbg !6358
  store %struct._object* %call20, %struct._object** %result, align 8, !dbg !6359, !tbaa !1829
  br label %do.body, !dbg !6360

do.body:                                          ; preds = %if.end.19
  %26 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6361
  call void @llvm.lifetime.start(i64 8, i8* %26) #2, !dbg !6361
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !968, metadata !1833), !dbg !6363
  %27 = load %struct._object*, %struct._object** %n, align 8, !dbg !6364, !tbaa !1829
  store %struct._object* %27, %struct._object** %_py_decref_tmp, align 8, !dbg !6363, !tbaa !1829
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6365, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0, !dbg !6367
  %29 = load i64, i64* %ob_refcnt, align 8, !dbg !6368, !tbaa !1853
  %dec = add i64 %29, -1, !dbg !6368
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !6368, !tbaa !1853
  %cmp21 = icmp ne i64 %dec, 0, !dbg !6369
  br i1 %cmp21, label %if.then.22, label %if.else, !dbg !6370

if.then.22:                                       ; preds = %do.body
  br label %if.end.24, !dbg !6371

if.else:                                          ; preds = %do.body
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6373, !tbaa !1829
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !6375
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8, !dbg !6375, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4, !dbg !6376
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6376, !tbaa !2033
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6377, !tbaa !1829
  call void %32(%struct._object* %33), !dbg !6378
  br label %if.end.24

if.end.24:                                        ; preds = %if.else, %if.then.22
  %34 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6379
  call void @llvm.lifetime.end(i64 8, i8* %34) #2, !dbg !6379
  br label %do.cond, !dbg !6381

do.cond:                                          ; preds = %if.end.24
  br label %do.end, !dbg !6382

do.end:                                           ; preds = %do.cond
  %35 = load %struct._object*, %struct._object** %result, align 8, !dbg !6384, !tbaa !1829
  %cmp25 = icmp ne %struct._object* %35, @_Py_NotImplementedStruct, !dbg !6386
  br i1 %cmp25, label %if.then.26, label %if.end.27, !dbg !6387

if.then.26:                                       ; preds = %do.end
  %36 = load %struct._object*, %struct._object** %result, align 8, !dbg !6388, !tbaa !1829
  store %struct._object* %36, %struct._object** %retval, !dbg !6389
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6389

if.end.27:                                        ; preds = %do.end
  br label %do.body.28, !dbg !6390

do.body.28:                                       ; preds = %if.end.27
  %37 = bitcast %struct._object** %_py_decref_tmp29 to i8*, !dbg !6391
  call void @llvm.lifetime.start(i64 8, i8* %37) #2, !dbg !6391
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp29, metadata !970, metadata !1833), !dbg !6393
  %38 = load %struct._object*, %struct._object** %result, align 8, !dbg !6394, !tbaa !1829
  store %struct._object* %38, %struct._object** %_py_decref_tmp29, align 8, !dbg !6393, !tbaa !1829
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8, !dbg !6395, !tbaa !1829
  %ob_refcnt30 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0, !dbg !6397
  %40 = load i64, i64* %ob_refcnt30, align 8, !dbg !6398, !tbaa !1853
  %dec31 = add i64 %40, -1, !dbg !6398
  store i64 %dec31, i64* %ob_refcnt30, align 8, !dbg !6398, !tbaa !1853
  %cmp32 = icmp ne i64 %dec31, 0, !dbg !6399
  br i1 %cmp32, label %if.then.33, label %if.else.34, !dbg !6400

if.then.33:                                       ; preds = %do.body.28
  br label %if.end.37, !dbg !6401

if.else.34:                                       ; preds = %do.body.28
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8, !dbg !6403, !tbaa !1829
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1, !dbg !6405
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8, !dbg !6405, !tbaa !1845
  %tp_dealloc36 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4, !dbg !6406
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc36, align 8, !dbg !6406, !tbaa !2033
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8, !dbg !6407, !tbaa !1829
  call void %43(%struct._object* %44), !dbg !6408
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.34, %if.then.33
  %45 = bitcast %struct._object** %_py_decref_tmp29 to i8*, !dbg !6409
  call void @llvm.lifetime.end(i64 8, i8* %45) #2, !dbg !6409
  br label %do.cond.38, !dbg !6410

do.cond.38:                                       ; preds = %if.end.37
  br label %do.end.39, !dbg !6411

do.end.39:                                        ; preds = %do.cond.38
  store i32 0, i32* %cleanup.dest.slot, !dbg !6413
  br label %cleanup, !dbg !6413

cleanup:                                          ; preds = %do.end.39, %if.then.26, %if.then.18
  %46 = bitcast %struct._object** %result to i8*, !dbg !6414
  call void @llvm.lifetime.end(i64 8, i8* %46) #2, !dbg !6414
  %47 = bitcast %struct._object** %n to i8*, !dbg !6414
  call void @llvm.lifetime.end(i64 8, i8* %47) #2, !dbg !6414
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.41, !dbg !6416

if.end.41:                                        ; preds = %cleanup.cont, %if.end.12
  %48 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6417, !tbaa !1829
  %call42 = call %struct._object* @type_error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.58, i32 0, i32 0), %struct._object* %48), !dbg !6418
  store %struct._object* %call42, %struct._object** %retval, !dbg !6419
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.43, !dbg !6419

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.43

cleanup.43:                                       ; preds = %NewDefault, %if.end.41, %if.then.9, %if.then.2, %if.then
  %49 = bitcast %struct.PySequenceMethods** %m to i8*, !dbg !6420
  call void @llvm.lifetime.end(i64 8, i8* %49) #2, !dbg !6420
  %50 = load %struct._object*, %struct._object** %retval, !dbg !6420
  ret %struct._object* %50, !dbg !6420
}

; Function Attrs: nounwind uwtable
define %struct._object* @PySequence_GetSlice(%struct._object* %s, i64 %i1, i64 %i2) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct._object*, align 8
  %i1.addr = alloca i64, align 8
  %i2.addr = alloca i64, align 8
  %mp = alloca %struct.PyMappingMethods*, align 8
  %cleanup.dest.slot = alloca i32
  %res = alloca %struct._object*, align 8
  %slice = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %s, %struct._object** %s.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %s.addr, metadata !988, metadata !1833), !dbg !6421
  store i64 %i1, i64* %i1.addr, align 8, !tbaa !1963
  call void @llvm.dbg.declare(metadata i64* %i1.addr, metadata !989, metadata !1833), !dbg !6422
  store i64 %i2, i64* %i2.addr, align 8, !tbaa !1963
  call void @llvm.dbg.declare(metadata i64* %i2.addr, metadata !990, metadata !1833), !dbg !6423
  %0 = bitcast %struct.PyMappingMethods** %mp to i8*, !dbg !6424
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !6424
  call void @llvm.dbg.declare(metadata %struct.PyMappingMethods** %mp, metadata !991, metadata !1833), !dbg !6425
  %1 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6426, !tbaa !1829
  %tobool = icmp ne %struct._object* %1, null, !dbg !6426
  br i1 %tobool, label %if.end, label %if.then, !dbg !6428

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !6429
  store %struct._object* %call, %struct._object** %retval, !dbg !6431
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.16, !dbg !6431

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6432, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !6433
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6433, !tbaa !1845
  %tp_as_mapping = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 12, !dbg !6434
  %4 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping, align 8, !dbg !6434, !tbaa !1912
  store %struct.PyMappingMethods* %4, %struct.PyMappingMethods** %mp, align 8, !dbg !6435, !tbaa !1829
  %5 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %mp, align 8, !dbg !6436, !tbaa !1829
  %tobool1 = icmp ne %struct.PyMappingMethods* %5, null, !dbg !6436
  br i1 %tobool1, label %land.lhs.true, label %if.end.14, !dbg !6437

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %mp, align 8, !dbg !6438, !tbaa !1829
  %mp_subscript = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %6, i32 0, i32 1, !dbg !6440
  %7 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %mp_subscript, align 8, !dbg !6440, !tbaa !2246
  %tobool2 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %7, null, !dbg !6441
  br i1 %tobool2, label %if.then.3, label %if.end.14, !dbg !6442

if.then.3:                                        ; preds = %land.lhs.true
  %8 = bitcast %struct._object** %res to i8*, !dbg !6443
  call void @llvm.lifetime.start(i64 8, i8* %8) #2, !dbg !6443
  call void @llvm.dbg.declare(metadata %struct._object** %res, metadata !992, metadata !1833), !dbg !6444
  %9 = bitcast %struct._object** %slice to i8*, !dbg !6445
  call void @llvm.lifetime.start(i64 8, i8* %9) #2, !dbg !6445
  call void @llvm.dbg.declare(metadata %struct._object** %slice, metadata !995, metadata !1833), !dbg !6446
  %10 = load i64, i64* %i1.addr, align 8, !dbg !6447, !tbaa !1963
  %11 = load i64, i64* %i2.addr, align 8, !dbg !6448, !tbaa !1963
  %call4 = call %struct._object* @_PySlice_FromIndices(i64 %10, i64 %11), !dbg !6449
  store %struct._object* %call4, %struct._object** %slice, align 8, !dbg !6446, !tbaa !1829
  %12 = load %struct._object*, %struct._object** %slice, align 8, !dbg !6450, !tbaa !1829
  %tobool5 = icmp ne %struct._object* %12, null, !dbg !6450
  br i1 %tobool5, label %if.end.7, label %if.then.6, !dbg !6452

if.then.6:                                        ; preds = %if.then.3
  store %struct._object* null, %struct._object** %retval, !dbg !6453
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6453

if.end.7:                                         ; preds = %if.then.3
  %13 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %mp, align 8, !dbg !6454, !tbaa !1829
  %mp_subscript8 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %13, i32 0, i32 1, !dbg !6455
  %14 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %mp_subscript8, align 8, !dbg !6455, !tbaa !2246
  %15 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6456, !tbaa !1829
  %16 = load %struct._object*, %struct._object** %slice, align 8, !dbg !6457, !tbaa !1829
  %call9 = call %struct._object* %14(%struct._object* %15, %struct._object* %16), !dbg !6454
  store %struct._object* %call9, %struct._object** %res, align 8, !dbg !6458, !tbaa !1829
  br label %do.body, !dbg !6459

do.body:                                          ; preds = %if.end.7
  %17 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6460
  call void @llvm.lifetime.start(i64 8, i8* %17) #2, !dbg !6460
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !996, metadata !1833), !dbg !6462
  %18 = load %struct._object*, %struct._object** %slice, align 8, !dbg !6463, !tbaa !1829
  store %struct._object* %18, %struct._object** %_py_decref_tmp, align 8, !dbg !6462, !tbaa !1829
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6464, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0, !dbg !6466
  %20 = load i64, i64* %ob_refcnt, align 8, !dbg !6467, !tbaa !1853
  %dec = add i64 %20, -1, !dbg !6467
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !6467, !tbaa !1853
  %cmp = icmp ne i64 %dec, 0, !dbg !6468
  br i1 %cmp, label %if.then.10, label %if.else, !dbg !6469

if.then.10:                                       ; preds = %do.body
  br label %if.end.12, !dbg !6470

if.else:                                          ; preds = %do.body
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6472, !tbaa !1829
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1, !dbg !6474
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8, !dbg !6474, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4, !dbg !6475
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6475, !tbaa !2033
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6476, !tbaa !1829
  call void %23(%struct._object* %24), !dbg !6477
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.10
  %25 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6478
  call void @llvm.lifetime.end(i64 8, i8* %25) #2, !dbg !6478
  br label %do.cond, !dbg !6480

do.cond:                                          ; preds = %if.end.12
  br label %do.end, !dbg !6481

do.end:                                           ; preds = %do.cond
  %26 = load %struct._object*, %struct._object** %res, align 8, !dbg !6483, !tbaa !1829
  store %struct._object* %26, %struct._object** %retval, !dbg !6484
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6484

cleanup:                                          ; preds = %do.end, %if.then.6
  %27 = bitcast %struct._object** %slice to i8*, !dbg !6485
  call void @llvm.lifetime.end(i64 8, i8* %27) #2, !dbg !6485
  %28 = bitcast %struct._object** %res to i8*, !dbg !6485
  call void @llvm.lifetime.end(i64 8, i8* %28) #2, !dbg !6485
  br label %cleanup.16

if.end.14:                                        ; preds = %land.lhs.true, %if.end
  %29 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6486, !tbaa !1829
  %call15 = call %struct._object* @type_error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.60, i32 0, i32 0), %struct._object* %29), !dbg !6487
  store %struct._object* %call15, %struct._object** %retval, !dbg !6488
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.16, !dbg !6488

cleanup.16:                                       ; preds = %if.end.14, %cleanup, %if.then
  %30 = bitcast %struct.PyMappingMethods** %mp to i8*, !dbg !6489
  call void @llvm.lifetime.end(i64 8, i8* %30) #2, !dbg !6489
  %31 = load %struct._object*, %struct._object** %retval, !dbg !6489
  ret %struct._object* %31, !dbg !6489
}

declare %struct._object* @_PySlice_FromIndices(i64, i64) #3

; Function Attrs: nounwind uwtable
define i32 @PySequence_SetSlice(%struct._object* %s, i64 %i1, i64 %i2, %struct._object* %o) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct._object*, align 8
  %i1.addr = alloca i64, align 8
  %i2.addr = alloca i64, align 8
  %o.addr = alloca %struct._object*, align 8
  %mp = alloca %struct.PyMappingMethods*, align 8
  %cleanup.dest.slot = alloca i32
  %res = alloca i32, align 4
  %slice = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %s, %struct._object** %s.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %s.addr, metadata !1029, metadata !1833), !dbg !6490
  store i64 %i1, i64* %i1.addr, align 8, !tbaa !1963
  call void @llvm.dbg.declare(metadata i64* %i1.addr, metadata !1030, metadata !1833), !dbg !6491
  store i64 %i2, i64* %i2.addr, align 8, !tbaa !1963
  call void @llvm.dbg.declare(metadata i64* %i2.addr, metadata !1031, metadata !1833), !dbg !6492
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1032, metadata !1833), !dbg !6493
  %0 = bitcast %struct.PyMappingMethods** %mp to i8*, !dbg !6494
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !6494
  call void @llvm.dbg.declare(metadata %struct.PyMappingMethods** %mp, metadata !1033, metadata !1833), !dbg !6495
  %1 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6496, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !6498
  br i1 %cmp, label %if.then, label %if.end, !dbg !6499

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !6500
  store i32 -1, i32* %retval, !dbg !6502
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.16, !dbg !6502

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6503, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !6504
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6504, !tbaa !1845
  %tp_as_mapping = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 12, !dbg !6505
  %4 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping, align 8, !dbg !6505, !tbaa !1912
  store %struct.PyMappingMethods* %4, %struct.PyMappingMethods** %mp, align 8, !dbg !6506, !tbaa !1829
  %5 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %mp, align 8, !dbg !6507, !tbaa !1829
  %tobool = icmp ne %struct.PyMappingMethods* %5, null, !dbg !6507
  br i1 %tobool, label %land.lhs.true, label %if.end.14, !dbg !6508

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %mp, align 8, !dbg !6509, !tbaa !1829
  %mp_ass_subscript = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %6, i32 0, i32 2, !dbg !6511
  %7 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %mp_ass_subscript, align 8, !dbg !6511, !tbaa !2480
  %tobool1 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %7, null, !dbg !6512
  br i1 %tobool1, label %if.then.2, label %if.end.14, !dbg !6513

if.then.2:                                        ; preds = %land.lhs.true
  %8 = bitcast i32* %res to i8*, !dbg !6514
  call void @llvm.lifetime.start(i64 4, i8* %8) #2, !dbg !6514
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1034, metadata !1833), !dbg !6515
  %9 = bitcast %struct._object** %slice to i8*, !dbg !6516
  call void @llvm.lifetime.start(i64 8, i8* %9) #2, !dbg !6516
  call void @llvm.dbg.declare(metadata %struct._object** %slice, metadata !1037, metadata !1833), !dbg !6517
  %10 = load i64, i64* %i1.addr, align 8, !dbg !6518, !tbaa !1963
  %11 = load i64, i64* %i2.addr, align 8, !dbg !6519, !tbaa !1963
  %call3 = call %struct._object* @_PySlice_FromIndices(i64 %10, i64 %11), !dbg !6520
  store %struct._object* %call3, %struct._object** %slice, align 8, !dbg !6517, !tbaa !1829
  %12 = load %struct._object*, %struct._object** %slice, align 8, !dbg !6521, !tbaa !1829
  %tobool4 = icmp ne %struct._object* %12, null, !dbg !6521
  br i1 %tobool4, label %if.end.6, label %if.then.5, !dbg !6523

if.then.5:                                        ; preds = %if.then.2
  store i32 -1, i32* %retval, !dbg !6524
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6524

if.end.6:                                         ; preds = %if.then.2
  %13 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %mp, align 8, !dbg !6525, !tbaa !1829
  %mp_ass_subscript7 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %13, i32 0, i32 2, !dbg !6526
  %14 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %mp_ass_subscript7, align 8, !dbg !6526, !tbaa !2480
  %15 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6527, !tbaa !1829
  %16 = load %struct._object*, %struct._object** %slice, align 8, !dbg !6528, !tbaa !1829
  %17 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6529, !tbaa !1829
  %call8 = call i32 %14(%struct._object* %15, %struct._object* %16, %struct._object* %17), !dbg !6525
  store i32 %call8, i32* %res, align 4, !dbg !6530, !tbaa !2764
  br label %do.body, !dbg !6531

do.body:                                          ; preds = %if.end.6
  %18 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6532
  call void @llvm.lifetime.start(i64 8, i8* %18) #2, !dbg !6532
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1038, metadata !1833), !dbg !6534
  %19 = load %struct._object*, %struct._object** %slice, align 8, !dbg !6535, !tbaa !1829
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8, !dbg !6534, !tbaa !1829
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6536, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0, !dbg !6538
  %21 = load i64, i64* %ob_refcnt, align 8, !dbg !6539, !tbaa !1853
  %dec = add i64 %21, -1, !dbg !6539
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !6539, !tbaa !1853
  %cmp9 = icmp ne i64 %dec, 0, !dbg !6540
  br i1 %cmp9, label %if.then.10, label %if.else, !dbg !6541

if.then.10:                                       ; preds = %do.body
  br label %if.end.12, !dbg !6542

if.else:                                          ; preds = %do.body
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6544, !tbaa !1829
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1, !dbg !6546
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8, !dbg !6546, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4, !dbg !6547
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6547, !tbaa !2033
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6548, !tbaa !1829
  call void %24(%struct._object* %25), !dbg !6549
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.10
  %26 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6550
  call void @llvm.lifetime.end(i64 8, i8* %26) #2, !dbg !6550
  br label %do.cond, !dbg !6552

do.cond:                                          ; preds = %if.end.12
  br label %do.end, !dbg !6553

do.end:                                           ; preds = %do.cond
  %27 = load i32, i32* %res, align 4, !dbg !6555, !tbaa !2764
  store i32 %27, i32* %retval, !dbg !6556
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6556

cleanup:                                          ; preds = %do.end, %if.then.5
  %28 = bitcast %struct._object** %slice to i8*, !dbg !6557
  call void @llvm.lifetime.end(i64 8, i8* %28) #2, !dbg !6557
  %29 = bitcast i32* %res to i8*, !dbg !6557
  call void @llvm.lifetime.end(i64 4, i8* %29) #2, !dbg !6557
  br label %cleanup.16

if.end.14:                                        ; preds = %land.lhs.true, %if.end
  %30 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6558, !tbaa !1829
  %call15 = call %struct._object* @type_error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.62, i32 0, i32 0), %struct._object* %30), !dbg !6559
  store i32 -1, i32* %retval, !dbg !6560
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.16, !dbg !6560

cleanup.16:                                       ; preds = %if.end.14, %cleanup, %if.then
  %31 = bitcast %struct.PyMappingMethods** %mp to i8*, !dbg !6561
  call void @llvm.lifetime.end(i64 8, i8* %31) #2, !dbg !6561
  %32 = load i32, i32* %retval, !dbg !6561
  ret i32 %32, !dbg !6561
}

; Function Attrs: nounwind uwtable
define i32 @PySequence_DelSlice(%struct._object* %s, i64 %i1, i64 %i2) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct._object*, align 8
  %i1.addr = alloca i64, align 8
  %i2.addr = alloca i64, align 8
  %mp = alloca %struct.PyMappingMethods*, align 8
  %cleanup.dest.slot = alloca i32
  %res = alloca i32, align 4
  %slice = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %s, %struct._object** %s.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %s.addr, metadata !1044, metadata !1833), !dbg !6562
  store i64 %i1, i64* %i1.addr, align 8, !tbaa !1963
  call void @llvm.dbg.declare(metadata i64* %i1.addr, metadata !1045, metadata !1833), !dbg !6563
  store i64 %i2, i64* %i2.addr, align 8, !tbaa !1963
  call void @llvm.dbg.declare(metadata i64* %i2.addr, metadata !1046, metadata !1833), !dbg !6564
  %0 = bitcast %struct.PyMappingMethods** %mp to i8*, !dbg !6565
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !6565
  call void @llvm.dbg.declare(metadata %struct.PyMappingMethods** %mp, metadata !1047, metadata !1833), !dbg !6566
  %1 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6567, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !6569
  br i1 %cmp, label %if.then, label %if.end, !dbg !6570

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !6571
  store i32 -1, i32* %retval, !dbg !6573
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.16, !dbg !6573

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6574, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !6575
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6575, !tbaa !1845
  %tp_as_mapping = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 12, !dbg !6576
  %4 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping, align 8, !dbg !6576, !tbaa !1912
  store %struct.PyMappingMethods* %4, %struct.PyMappingMethods** %mp, align 8, !dbg !6577, !tbaa !1829
  %5 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %mp, align 8, !dbg !6578, !tbaa !1829
  %tobool = icmp ne %struct.PyMappingMethods* %5, null, !dbg !6578
  br i1 %tobool, label %land.lhs.true, label %if.end.14, !dbg !6579

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %mp, align 8, !dbg !6580, !tbaa !1829
  %mp_ass_subscript = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %6, i32 0, i32 2, !dbg !6582
  %7 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %mp_ass_subscript, align 8, !dbg !6582, !tbaa !2480
  %tobool1 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %7, null, !dbg !6583
  br i1 %tobool1, label %if.then.2, label %if.end.14, !dbg !6584

if.then.2:                                        ; preds = %land.lhs.true
  %8 = bitcast i32* %res to i8*, !dbg !6585
  call void @llvm.lifetime.start(i64 4, i8* %8) #2, !dbg !6585
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1048, metadata !1833), !dbg !6586
  %9 = bitcast %struct._object** %slice to i8*, !dbg !6587
  call void @llvm.lifetime.start(i64 8, i8* %9) #2, !dbg !6587
  call void @llvm.dbg.declare(metadata %struct._object** %slice, metadata !1051, metadata !1833), !dbg !6588
  %10 = load i64, i64* %i1.addr, align 8, !dbg !6589, !tbaa !1963
  %11 = load i64, i64* %i2.addr, align 8, !dbg !6590, !tbaa !1963
  %call3 = call %struct._object* @_PySlice_FromIndices(i64 %10, i64 %11), !dbg !6591
  store %struct._object* %call3, %struct._object** %slice, align 8, !dbg !6588, !tbaa !1829
  %12 = load %struct._object*, %struct._object** %slice, align 8, !dbg !6592, !tbaa !1829
  %tobool4 = icmp ne %struct._object* %12, null, !dbg !6592
  br i1 %tobool4, label %if.end.6, label %if.then.5, !dbg !6594

if.then.5:                                        ; preds = %if.then.2
  store i32 -1, i32* %retval, !dbg !6595
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6595

if.end.6:                                         ; preds = %if.then.2
  %13 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %mp, align 8, !dbg !6596, !tbaa !1829
  %mp_ass_subscript7 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %13, i32 0, i32 2, !dbg !6597
  %14 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %mp_ass_subscript7, align 8, !dbg !6597, !tbaa !2480
  %15 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6598, !tbaa !1829
  %16 = load %struct._object*, %struct._object** %slice, align 8, !dbg !6599, !tbaa !1829
  %call8 = call i32 %14(%struct._object* %15, %struct._object* %16, %struct._object* null), !dbg !6596
  store i32 %call8, i32* %res, align 4, !dbg !6600, !tbaa !2764
  br label %do.body, !dbg !6601

do.body:                                          ; preds = %if.end.6
  %17 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6602
  call void @llvm.lifetime.start(i64 8, i8* %17) #2, !dbg !6602
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1052, metadata !1833), !dbg !6604
  %18 = load %struct._object*, %struct._object** %slice, align 8, !dbg !6605, !tbaa !1829
  store %struct._object* %18, %struct._object** %_py_decref_tmp, align 8, !dbg !6604, !tbaa !1829
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6606, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0, !dbg !6608
  %20 = load i64, i64* %ob_refcnt, align 8, !dbg !6609, !tbaa !1853
  %dec = add i64 %20, -1, !dbg !6609
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !6609, !tbaa !1853
  %cmp9 = icmp ne i64 %dec, 0, !dbg !6610
  br i1 %cmp9, label %if.then.10, label %if.else, !dbg !6611

if.then.10:                                       ; preds = %do.body
  br label %if.end.12, !dbg !6612

if.else:                                          ; preds = %do.body
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6614, !tbaa !1829
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1, !dbg !6616
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8, !dbg !6616, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4, !dbg !6617
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6617, !tbaa !2033
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6618, !tbaa !1829
  call void %23(%struct._object* %24), !dbg !6619
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.10
  %25 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6620
  call void @llvm.lifetime.end(i64 8, i8* %25) #2, !dbg !6620
  br label %do.cond, !dbg !6622

do.cond:                                          ; preds = %if.end.12
  br label %do.end, !dbg !6623

do.end:                                           ; preds = %do.cond
  %26 = load i32, i32* %res, align 4, !dbg !6625, !tbaa !2764
  store i32 %26, i32* %retval, !dbg !6626
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6626

cleanup:                                          ; preds = %do.end, %if.then.5
  %27 = bitcast %struct._object** %slice to i8*, !dbg !6627
  call void @llvm.lifetime.end(i64 8, i8* %27) #2, !dbg !6627
  %28 = bitcast i32* %res to i8*, !dbg !6627
  call void @llvm.lifetime.end(i64 4, i8* %28) #2, !dbg !6627
  br label %cleanup.16

if.end.14:                                        ; preds = %land.lhs.true, %if.end
  %29 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !6628, !tbaa !1829
  %call15 = call %struct._object* @type_error(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.63, i32 0, i32 0), %struct._object* %29), !dbg !6629
  store i32 -1, i32* %retval, !dbg !6630
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.16, !dbg !6630

cleanup.16:                                       ; preds = %if.end.14, %cleanup, %if.then
  %30 = bitcast %struct.PyMappingMethods** %mp to i8*, !dbg !6631
  call void @llvm.lifetime.end(i64 8, i8* %30) #2, !dbg !6631
  %31 = load i32, i32* %retval, !dbg !6631
  ret i32 %31, !dbg !6631
}

; Function Attrs: nounwind uwtable
define %struct._object* @PySequence_Tuple(%struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %it = alloca %struct._object*, align 8
  %n = alloca i64, align 8
  %result = alloca %struct._object*, align 8
  %j = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %item = alloca %struct._object*, align 8
  %oldn = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp44 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp82 = alloca %struct._object*, align 8
  %_py_decref_tmp97 = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !1056, metadata !1833), !dbg !6632
  %0 = bitcast %struct._object** %it to i8*, !dbg !6633
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !6633
  call void @llvm.dbg.declare(metadata %struct._object** %it, metadata !1057, metadata !1833), !dbg !6634
  %1 = bitcast i64* %n to i8*, !dbg !6635
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !6635
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1058, metadata !1833), !dbg !6636
  %2 = bitcast %struct._object** %result to i8*, !dbg !6637
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !6637
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !1059, metadata !1833), !dbg !6638
  store %struct._object* null, %struct._object** %result, align 8, !dbg !6638, !tbaa !1829
  %3 = bitcast i64* %j to i8*, !dbg !6639
  call void @llvm.lifetime.start(i64 8, i8* %3) #2, !dbg !6639
  call void @llvm.dbg.declare(metadata i64* %j, metadata !1060, metadata !1833), !dbg !6640
  %4 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !6641, !tbaa !1829
  %cmp = icmp eq %struct._object* %4, null, !dbg !6643
  br i1 %cmp, label %if.then, label %if.end, !dbg !6644

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !6645
  store %struct._object* %call, %struct._object** %retval, !dbg !6646
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.108, !dbg !6646

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !6647, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !6649
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6649, !tbaa !1845
  %cmp1 = icmp eq %struct._typeobject* %6, @PyTuple_Type, !dbg !6650
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !6651

if.then.2:                                        ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !6652, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0, !dbg !6654
  %8 = load i64, i64* %ob_refcnt, align 8, !dbg !6655, !tbaa !1853
  %inc = add i64 %8, 1, !dbg !6655
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !6655, !tbaa !1853
  %9 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !6656, !tbaa !1829
  store %struct._object* %9, %struct._object** %retval, !dbg !6657
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.108, !dbg !6657

if.end.3:                                         ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !6658, !tbaa !1829
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !6660
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8, !dbg !6660, !tbaa !1845
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 19, !dbg !6661
  %12 = load i64, i64* %tp_flags, align 8, !dbg !6661, !tbaa !2086
  %and = and i64 %12, 33554432, !dbg !6662
  %cmp5 = icmp ne i64 %and, 0, !dbg !6663
  br i1 %cmp5, label %if.then.6, label %if.end.8, !dbg !6664

if.then.6:                                        ; preds = %if.end.3
  %13 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !6665, !tbaa !1829
  %call7 = call %struct._object* @PyList_AsTuple(%struct._object* %13), !dbg !6666
  store %struct._object* %call7, %struct._object** %retval, !dbg !6667
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.108, !dbg !6667

if.end.8:                                         ; preds = %if.end.3
  %14 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !6668, !tbaa !1829
  %call9 = call %struct._object* @PyObject_GetIter(%struct._object* %14), !dbg !6669
  store %struct._object* %call9, %struct._object** %it, align 8, !dbg !6670, !tbaa !1829
  %15 = load %struct._object*, %struct._object** %it, align 8, !dbg !6671, !tbaa !1829
  %cmp10 = icmp eq %struct._object* %15, null, !dbg !6673
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !6674

if.then.11:                                       ; preds = %if.end.8
  store %struct._object* null, %struct._object** %retval, !dbg !6675
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.108, !dbg !6675

if.end.12:                                        ; preds = %if.end.8
  %16 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !6676, !tbaa !1829
  %call13 = call i64 @PyObject_LengthHint(%struct._object* %16, i64 10), !dbg !6677
  store i64 %call13, i64* %n, align 8, !dbg !6678, !tbaa !1963
  %17 = load i64, i64* %n, align 8, !dbg !6679, !tbaa !1963
  %cmp14 = icmp eq i64 %17, -1, !dbg !6681
  br i1 %cmp14, label %if.then.15, label %if.end.16, !dbg !6682

if.then.15:                                       ; preds = %if.end.12
  br label %Fail, !dbg !6683

if.end.16:                                        ; preds = %if.end.12
  %18 = load i64, i64* %n, align 8, !dbg !6684, !tbaa !1963
  %call17 = call %struct._object* @PyTuple_New(i64 %18), !dbg !6685
  store %struct._object* %call17, %struct._object** %result, align 8, !dbg !6686, !tbaa !1829
  %19 = load %struct._object*, %struct._object** %result, align 8, !dbg !6687, !tbaa !1829
  %cmp18 = icmp eq %struct._object* %19, null, !dbg !6689
  br i1 %cmp18, label %if.then.19, label %if.end.20, !dbg !6690

if.then.19:                                       ; preds = %if.end.16
  br label %Fail, !dbg !6691

if.end.20:                                        ; preds = %if.end.16
  store i64 0, i64* %j, align 8, !dbg !6692, !tbaa !1963
  br label %for.cond, !dbg !6693

for.cond:                                         ; preds = %for.inc, %if.end.20
  %20 = bitcast %struct._object** %item to i8*, !dbg !6694
  call void @llvm.lifetime.start(i64 8, i8* %20) #2, !dbg !6694
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !1061, metadata !1833), !dbg !6695
  %21 = load %struct._object*, %struct._object** %it, align 8, !dbg !6696, !tbaa !1829
  %call21 = call %struct._object* @PyIter_Next(%struct._object* %21), !dbg !6697
  store %struct._object* %call21, %struct._object** %item, align 8, !dbg !6695, !tbaa !1829
  %22 = load %struct._object*, %struct._object** %item, align 8, !dbg !6698, !tbaa !1829
  %cmp22 = icmp eq %struct._object* %22, null, !dbg !6700
  br i1 %cmp22, label %if.then.23, label %if.end.27, !dbg !6701

if.then.23:                                       ; preds = %for.cond
  %call24 = call %struct._object* @PyErr_Occurred(), !dbg !6702
  %tobool = icmp ne %struct._object* %call24, null, !dbg !6702
  br i1 %tobool, label %if.then.25, label %if.end.26, !dbg !6705

if.then.25:                                       ; preds = %if.then.23
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.57, !dbg !6706

if.end.26:                                        ; preds = %if.then.23
  store i32 3, i32* %cleanup.dest.slot
  br label %cleanup.57, !dbg !6707

if.end.27:                                        ; preds = %for.cond
  %23 = load i64, i64* %j, align 8, !dbg !6708, !tbaa !1963
  %24 = load i64, i64* %n, align 8, !dbg !6709, !tbaa !1963
  %cmp28 = icmp sge i64 %23, %24, !dbg !6710
  br i1 %cmp28, label %if.then.29, label %if.end.56, !dbg !6711

if.then.29:                                       ; preds = %if.end.27
  %25 = bitcast i64* %oldn to i8*, !dbg !6712
  call void @llvm.lifetime.start(i64 8, i8* %25) #2, !dbg !6712
  call void @llvm.dbg.declare(metadata i64* %oldn, metadata !1065, metadata !1833), !dbg !6713
  %26 = load i64, i64* %n, align 8, !dbg !6714, !tbaa !1963
  store i64 %26, i64* %oldn, align 8, !dbg !6713, !tbaa !1963
  %27 = load i64, i64* %n, align 8, !dbg !6715, !tbaa !1963
  %add = add i64 %27, 10, !dbg !6715
  store i64 %add, i64* %n, align 8, !dbg !6715, !tbaa !1963
  %28 = load i64, i64* %n, align 8, !dbg !6716, !tbaa !1963
  %shr = ashr i64 %28, 2, !dbg !6717
  %29 = load i64, i64* %n, align 8, !dbg !6718, !tbaa !1963
  %add30 = add i64 %29, %shr, !dbg !6718
  store i64 %add30, i64* %n, align 8, !dbg !6718, !tbaa !1963
  %30 = load i64, i64* %n, align 8, !dbg !6719, !tbaa !1963
  %31 = load i64, i64* %oldn, align 8, !dbg !6720, !tbaa !1963
  %cmp31 = icmp slt i64 %30, %31, !dbg !6721
  br i1 %cmp31, label %if.then.32, label %if.end.39, !dbg !6722

if.then.32:                                       ; preds = %if.then.29
  %call33 = call %struct._object* @PyErr_NoMemory(), !dbg !6723
  br label %do.body, !dbg !6724

do.body:                                          ; preds = %if.then.32
  %32 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6725
  call void @llvm.lifetime.start(i64 8, i8* %32) #2, !dbg !6725
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1068, metadata !1833), !dbg !6727
  %33 = load %struct._object*, %struct._object** %item, align 8, !dbg !6728, !tbaa !1829
  store %struct._object* %33, %struct._object** %_py_decref_tmp, align 8, !dbg !6727, !tbaa !1829
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6729, !tbaa !1829
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 0, !dbg !6731
  %35 = load i64, i64* %ob_refcnt34, align 8, !dbg !6732, !tbaa !1853
  %dec = add i64 %35, -1, !dbg !6732
  store i64 %dec, i64* %ob_refcnt34, align 8, !dbg !6732, !tbaa !1853
  %cmp35 = icmp ne i64 %dec, 0, !dbg !6733
  br i1 %cmp35, label %if.then.36, label %if.else, !dbg !6734

if.then.36:                                       ; preds = %do.body
  br label %if.end.38, !dbg !6735

if.else:                                          ; preds = %do.body
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6737, !tbaa !1829
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1, !dbg !6739
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8, !dbg !6739, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 4, !dbg !6740
  %38 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6740, !tbaa !2033
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6741, !tbaa !1829
  call void %38(%struct._object* %39), !dbg !6742
  br label %if.end.38

if.end.38:                                        ; preds = %if.else, %if.then.36
  %40 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6743
  call void @llvm.lifetime.end(i64 8, i8* %40) #2, !dbg !6743
  br label %do.cond, !dbg !6745

do.cond:                                          ; preds = %if.end.38
  br label %do.end, !dbg !6746

do.end:                                           ; preds = %do.cond
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6748

if.end.39:                                        ; preds = %if.then.29
  %41 = load i64, i64* %n, align 8, !dbg !6749, !tbaa !1963
  %call40 = call i32 @_PyTuple_Resize(%struct._object** %result, i64 %41), !dbg !6750
  %cmp41 = icmp ne i32 %call40, 0, !dbg !6751
  br i1 %cmp41, label %if.then.42, label %if.end.55, !dbg !6752

if.then.42:                                       ; preds = %if.end.39
  br label %do.body.43, !dbg !6753

do.body.43:                                       ; preds = %if.then.42
  %42 = bitcast %struct._object** %_py_decref_tmp44 to i8*, !dbg !6754
  call void @llvm.lifetime.start(i64 8, i8* %42) #2, !dbg !6754
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp44, metadata !1072, metadata !1833), !dbg !6756
  %43 = load %struct._object*, %struct._object** %item, align 8, !dbg !6757, !tbaa !1829
  store %struct._object* %43, %struct._object** %_py_decref_tmp44, align 8, !dbg !6756, !tbaa !1829
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8, !dbg !6758, !tbaa !1829
  %ob_refcnt45 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0, !dbg !6760
  %45 = load i64, i64* %ob_refcnt45, align 8, !dbg !6761, !tbaa !1853
  %dec46 = add i64 %45, -1, !dbg !6761
  store i64 %dec46, i64* %ob_refcnt45, align 8, !dbg !6761, !tbaa !1853
  %cmp47 = icmp ne i64 %dec46, 0, !dbg !6762
  br i1 %cmp47, label %if.then.48, label %if.else.49, !dbg !6763

if.then.48:                                       ; preds = %do.body.43
  br label %if.end.52, !dbg !6764

if.else.49:                                       ; preds = %do.body.43
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8, !dbg !6766, !tbaa !1829
  %ob_type50 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1, !dbg !6768
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type50, align 8, !dbg !6768, !tbaa !1845
  %tp_dealloc51 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4, !dbg !6769
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc51, align 8, !dbg !6769, !tbaa !2033
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8, !dbg !6770, !tbaa !1829
  call void %48(%struct._object* %49), !dbg !6771
  br label %if.end.52

if.end.52:                                        ; preds = %if.else.49, %if.then.48
  %50 = bitcast %struct._object** %_py_decref_tmp44 to i8*, !dbg !6772
  call void @llvm.lifetime.end(i64 8, i8* %50) #2, !dbg !6772
  br label %do.cond.53, !dbg !6774

do.cond.53:                                       ; preds = %if.end.52
  br label %do.end.54, !dbg !6775

do.end.54:                                        ; preds = %do.cond.53
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6777

if.end.55:                                        ; preds = %if.end.39
  store i32 0, i32* %cleanup.dest.slot, !dbg !6778
  br label %cleanup, !dbg !6778

cleanup:                                          ; preds = %if.end.55, %do.end.54, %do.end
  %51 = bitcast i64* %oldn to i8*, !dbg !6779
  call void @llvm.lifetime.end(i64 8, i8* %51) #2, !dbg !6779
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.56, !dbg !6781

if.end.56:                                        ; preds = %cleanup.cont, %if.end.27
  %52 = load %struct._object*, %struct._object** %item, align 8, !dbg !6782, !tbaa !1829
  %53 = load i64, i64* %j, align 8, !dbg !6783, !tbaa !1963
  %54 = load %struct._object*, %struct._object** %result, align 8, !dbg !6784, !tbaa !1829
  %55 = bitcast %struct._object* %54 to %struct.PyTupleObject*, !dbg !6785
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %55, i32 0, i32 1, !dbg !6786
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %53, !dbg !6787
  store %struct._object* %52, %struct._object** %arrayidx, align 8, !dbg !6788, !tbaa !1829
  store i32 0, i32* %cleanup.dest.slot, !dbg !6789
  br label %cleanup.57, !dbg !6789

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.57

cleanup.57:                                       ; preds = %NewDefault, %if.end.56, %if.end.26, %if.then.25
  %56 = bitcast %struct._object** %item to i8*, !dbg !6790
  call void @llvm.lifetime.end(i64 8, i8* %56) #2, !dbg !6790
  %cleanup.dest.58 = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock.6

NodeBlock.6:                                      ; preds = %cleanup.57
  %Pivot.7 = icmp slt i32 %cleanup.dest.58, 2
  br i1 %Pivot.7, label %LeafBlock.2, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock.6
  %Pivot = icmp slt i32 %cleanup.dest.58, 3
  br i1 %Pivot, label %Fail, label %LeafBlock.4

LeafBlock.4:                                      ; preds = %NodeBlock
  %SwitchLeaf5 = icmp eq i32 %cleanup.dest.58, 3
  br i1 %SwitchLeaf5, label %for.end, label %NewDefault.1

LeafBlock.2:                                      ; preds = %NodeBlock.6
  %SwitchLeaf3 = icmp eq i32 %cleanup.dest.58, 0
  br i1 %SwitchLeaf3, label %cleanup.cont.59, label %NewDefault.1

cleanup.cont.59:                                  ; preds = %LeafBlock.2
  br label %for.inc, !dbg !6792

for.inc:                                          ; preds = %cleanup.cont.59
  %57 = load i64, i64* %j, align 8, !dbg !6793, !tbaa !1963
  %inc60 = add i64 %57, 1, !dbg !6793
  store i64 %inc60, i64* %j, align 8, !dbg !6793, !tbaa !1963
  br label %for.cond, !dbg !6794

for.end:                                          ; preds = %LeafBlock.4
  %58 = load i64, i64* %j, align 8, !dbg !6795, !tbaa !1963
  %59 = load i64, i64* %n, align 8, !dbg !6797, !tbaa !1963
  %cmp61 = icmp slt i64 %58, %59, !dbg !6798
  br i1 %cmp61, label %land.lhs.true, label %if.end.65, !dbg !6799

land.lhs.true:                                    ; preds = %for.end
  %60 = load i64, i64* %j, align 8, !dbg !6800, !tbaa !1963
  %call62 = call i32 @_PyTuple_Resize(%struct._object** %result, i64 %60), !dbg !6801
  %cmp63 = icmp ne i32 %call62, 0, !dbg !6802
  br i1 %cmp63, label %if.then.64, label %if.end.65, !dbg !6803

if.then.64:                                       ; preds = %land.lhs.true
  br label %Fail, !dbg !6804

if.end.65:                                        ; preds = %land.lhs.true, %for.end
  br label %do.body.66, !dbg !6805

do.body.66:                                       ; preds = %if.end.65
  %61 = bitcast %struct._object** %_py_decref_tmp67 to i8*, !dbg !6806
  call void @llvm.lifetime.start(i64 8, i8* %61) #2, !dbg !6806
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp67, metadata !1076, metadata !1833), !dbg !6808
  %62 = load %struct._object*, %struct._object** %it, align 8, !dbg !6809, !tbaa !1829
  store %struct._object* %62, %struct._object** %_py_decref_tmp67, align 8, !dbg !6808, !tbaa !1829
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8, !dbg !6810, !tbaa !1829
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 0, !dbg !6812
  %64 = load i64, i64* %ob_refcnt68, align 8, !dbg !6813, !tbaa !1853
  %dec69 = add i64 %64, -1, !dbg !6813
  store i64 %dec69, i64* %ob_refcnt68, align 8, !dbg !6813, !tbaa !1853
  %cmp70 = icmp ne i64 %dec69, 0, !dbg !6814
  br i1 %cmp70, label %if.then.71, label %if.else.72, !dbg !6815

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75, !dbg !6816

if.else.72:                                       ; preds = %do.body.66
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8, !dbg !6818, !tbaa !1829
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 1, !dbg !6820
  %66 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8, !dbg !6820, !tbaa !1845
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %66, i32 0, i32 4, !dbg !6821
  %67 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8, !dbg !6821, !tbaa !2033
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8, !dbg !6822, !tbaa !1829
  call void %67(%struct._object* %68), !dbg !6823
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  %69 = bitcast %struct._object** %_py_decref_tmp67 to i8*, !dbg !6824
  call void @llvm.lifetime.end(i64 8, i8* %69) #2, !dbg !6824
  br label %do.cond.76, !dbg !6826

do.cond.76:                                       ; preds = %if.end.75
  br label %do.end.77, !dbg !6827

do.end.77:                                        ; preds = %do.cond.76
  %70 = load %struct._object*, %struct._object** %result, align 8, !dbg !6829, !tbaa !1829
  store %struct._object* %70, %struct._object** %retval, !dbg !6830
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.108, !dbg !6830

Fail:                                             ; preds = %NodeBlock, %if.then.64, %if.then.19, %if.then.15
  br label %do.body.78, !dbg !6831

do.body.78:                                       ; preds = %Fail
  %71 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !6832
  call void @llvm.lifetime.start(i64 8, i8* %71) #2, !dbg !6832
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1078, metadata !1833), !dbg !6834
  %72 = load %struct._object*, %struct._object** %result, align 8, !dbg !6835, !tbaa !1829
  store %struct._object* %72, %struct._object** %_py_xdecref_tmp, align 8, !dbg !6834, !tbaa !1829
  %73 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !6836, !tbaa !1829
  %cmp79 = icmp ne %struct._object* %73, null, !dbg !6837
  br i1 %cmp79, label %if.then.80, label %if.end.93, !dbg !6838

if.then.80:                                       ; preds = %do.body.78
  br label %do.body.81, !dbg !6839

do.body.81:                                       ; preds = %if.then.80
  %74 = bitcast %struct._object** %_py_decref_tmp82 to i8*, !dbg !6841
  call void @llvm.lifetime.start(i64 8, i8* %74) #2, !dbg !6841
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp82, metadata !1080, metadata !1833), !dbg !6843
  %75 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !6844, !tbaa !1829
  store %struct._object* %75, %struct._object** %_py_decref_tmp82, align 8, !dbg !6843, !tbaa !1829
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8, !dbg !6845, !tbaa !1829
  %ob_refcnt83 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 0, !dbg !6847
  %77 = load i64, i64* %ob_refcnt83, align 8, !dbg !6848, !tbaa !1853
  %dec84 = add i64 %77, -1, !dbg !6848
  store i64 %dec84, i64* %ob_refcnt83, align 8, !dbg !6848, !tbaa !1853
  %cmp85 = icmp ne i64 %dec84, 0, !dbg !6849
  br i1 %cmp85, label %if.then.86, label %if.else.87, !dbg !6850

if.then.86:                                       ; preds = %do.body.81
  br label %if.end.90, !dbg !6851

if.else.87:                                       ; preds = %do.body.81
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8, !dbg !6853, !tbaa !1829
  %ob_type88 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 1, !dbg !6855
  %79 = load %struct._typeobject*, %struct._typeobject** %ob_type88, align 8, !dbg !6855, !tbaa !1845
  %tp_dealloc89 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %79, i32 0, i32 4, !dbg !6856
  %80 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc89, align 8, !dbg !6856, !tbaa !2033
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8, !dbg !6857, !tbaa !1829
  call void %80(%struct._object* %81), !dbg !6858
  br label %if.end.90

if.end.90:                                        ; preds = %if.else.87, %if.then.86
  %82 = bitcast %struct._object** %_py_decref_tmp82 to i8*, !dbg !6859
  call void @llvm.lifetime.end(i64 8, i8* %82) #2, !dbg !6859
  br label %do.cond.91, !dbg !6861

do.cond.91:                                       ; preds = %if.end.90
  br label %do.end.92, !dbg !6862

do.end.92:                                        ; preds = %do.cond.91
  br label %if.end.93, !dbg !6864

if.end.93:                                        ; preds = %do.end.92, %do.body.78
  %83 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !6866
  call void @llvm.lifetime.end(i64 8, i8* %83) #2, !dbg !6866
  br label %do.cond.94, !dbg !6869

do.cond.94:                                       ; preds = %if.end.93
  br label %do.end.95, !dbg !6870

do.end.95:                                        ; preds = %do.cond.94
  br label %do.body.96, !dbg !6872

do.body.96:                                       ; preds = %do.end.95
  %84 = bitcast %struct._object** %_py_decref_tmp97 to i8*, !dbg !6873
  call void @llvm.lifetime.start(i64 8, i8* %84) #2, !dbg !6873
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp97, metadata !1083, metadata !1833), !dbg !6875
  %85 = load %struct._object*, %struct._object** %it, align 8, !dbg !6876, !tbaa !1829
  store %struct._object* %85, %struct._object** %_py_decref_tmp97, align 8, !dbg !6875, !tbaa !1829
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8, !dbg !6877, !tbaa !1829
  %ob_refcnt98 = getelementptr inbounds %struct._object, %struct._object* %86, i32 0, i32 0, !dbg !6879
  %87 = load i64, i64* %ob_refcnt98, align 8, !dbg !6880, !tbaa !1853
  %dec99 = add i64 %87, -1, !dbg !6880
  store i64 %dec99, i64* %ob_refcnt98, align 8, !dbg !6880, !tbaa !1853
  %cmp100 = icmp ne i64 %dec99, 0, !dbg !6881
  br i1 %cmp100, label %if.then.101, label %if.else.102, !dbg !6882

if.then.101:                                      ; preds = %do.body.96
  br label %if.end.105, !dbg !6883

if.else.102:                                      ; preds = %do.body.96
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8, !dbg !6885, !tbaa !1829
  %ob_type103 = getelementptr inbounds %struct._object, %struct._object* %88, i32 0, i32 1, !dbg !6887
  %89 = load %struct._typeobject*, %struct._typeobject** %ob_type103, align 8, !dbg !6887, !tbaa !1845
  %tp_dealloc104 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %89, i32 0, i32 4, !dbg !6888
  %90 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc104, align 8, !dbg !6888, !tbaa !2033
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8, !dbg !6889, !tbaa !1829
  call void %90(%struct._object* %91), !dbg !6890
  br label %if.end.105

if.end.105:                                       ; preds = %if.else.102, %if.then.101
  %92 = bitcast %struct._object** %_py_decref_tmp97 to i8*, !dbg !6891
  call void @llvm.lifetime.end(i64 8, i8* %92) #2, !dbg !6891
  br label %do.cond.106, !dbg !6892

do.cond.106:                                      ; preds = %if.end.105
  br label %do.end.107, !dbg !6893

do.end.107:                                       ; preds = %do.cond.106
  store %struct._object* null, %struct._object** %retval, !dbg !6895
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.108, !dbg !6895

NewDefault.1:                                     ; preds = %LeafBlock.4, %LeafBlock.2
  br label %cleanup.108

cleanup.108:                                      ; preds = %NewDefault.1, %do.end.107, %do.end.77, %if.then.11, %if.then.6, %if.then.2, %if.then
  %93 = bitcast i64* %j to i8*, !dbg !6896
  call void @llvm.lifetime.end(i64 8, i8* %93) #2, !dbg !6896
  %94 = bitcast %struct._object** %result to i8*, !dbg !6896
  call void @llvm.lifetime.end(i64 8, i8* %94) #2, !dbg !6896
  %95 = bitcast i64* %n to i8*, !dbg !6896
  call void @llvm.lifetime.end(i64 8, i8* %95) #2, !dbg !6896
  %96 = bitcast %struct._object** %it to i8*, !dbg !6896
  call void @llvm.lifetime.end(i64 8, i8* %96) #2, !dbg !6896
  %97 = load %struct._object*, %struct._object** %retval, !dbg !6896
  ret %struct._object* %97, !dbg !6896
}

declare %struct._object* @PyList_AsTuple(%struct._object*) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PyObject_GetIter(%struct._object* %o) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %t = alloca %struct._typeobject*, align 8
  %f = alloca %struct._object* (%struct._object*)*, align 8
  %cleanup.dest.slot = alloca i32
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1499, metadata !1833), !dbg !6897
  %0 = bitcast %struct._typeobject** %t to i8*, !dbg !6898
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !6898
  call void @llvm.dbg.declare(metadata %struct._typeobject** %t, metadata !1500, metadata !1833), !dbg !6899
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6900, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !6901
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6901, !tbaa !1845
  store %struct._typeobject* %2, %struct._typeobject** %t, align 8, !dbg !6899, !tbaa !1829
  %3 = bitcast %struct._object* (%struct._object*)** %f to i8*, !dbg !6902
  call void @llvm.lifetime.start(i64 8, i8* %3) #2, !dbg !6902
  call void @llvm.dbg.declare(metadata %struct._object* (%struct._object*)** %f, metadata !1501, metadata !1833), !dbg !6903
  store %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)** %f, align 8, !dbg !6903, !tbaa !1829
  %4 = load %struct._typeobject*, %struct._typeobject** %t, align 8, !dbg !6904, !tbaa !1829
  %tp_iter = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 25, !dbg !6905
  %tp_iter1 = bitcast {}** %tp_iter to %struct._object* (%struct._object*)**, !dbg !6905
  %5 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iter1, align 8, !dbg !6905, !tbaa !6906
  store %struct._object* (%struct._object*)* %5, %struct._object* (%struct._object*)** %f, align 8, !dbg !6907, !tbaa !1829
  %6 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %f, align 8, !dbg !6908, !tbaa !1829
  %cmp = icmp eq %struct._object* (%struct._object*)* %6, null, !dbg !6909
  br i1 %cmp, label %if.then, label %if.else, !dbg !6910

if.then:                                          ; preds = %entry
  %7 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6911, !tbaa !1829
  %call = call i32 @PySequence_Check(%struct._object* %7), !dbg !6914
  %tobool = icmp ne i32 %call, 0, !dbg !6914
  br i1 %tobool, label %if.then.2, label %if.end, !dbg !6915

if.then.2:                                        ; preds = %if.then
  %8 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6916, !tbaa !1829
  %call3 = call %struct._object* @PySeqIter_New(%struct._object* %8), !dbg !6917
  store %struct._object* %call3, %struct._object** %retval, !dbg !6918
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6918

if.end:                                           ; preds = %if.then
  %9 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6919, !tbaa !1829
  %call4 = call %struct._object* @type_error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.81, i32 0, i32 0), %struct._object* %9), !dbg !6920
  store %struct._object* %call4, %struct._object** %retval, !dbg !6921
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6921

if.else:                                          ; preds = %entry
  %10 = bitcast %struct._object** %res to i8*, !dbg !6922
  call void @llvm.lifetime.start(i64 8, i8* %10) #2, !dbg !6922
  call void @llvm.dbg.declare(metadata %struct._object** %res, metadata !1502, metadata !1833), !dbg !6923
  %11 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %f, align 8, !dbg !6924, !tbaa !1829
  %12 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !6925, !tbaa !1829
  %call5 = call %struct._object* %11(%struct._object* %12), !dbg !6926
  store %struct._object* %call5, %struct._object** %res, align 8, !dbg !6923, !tbaa !1829
  %13 = load %struct._object*, %struct._object** %res, align 8, !dbg !6927, !tbaa !1829
  %cmp6 = icmp ne %struct._object* %13, null, !dbg !6928
  br i1 %cmp6, label %land.lhs.true, label %if.end.23, !dbg !6929

land.lhs.true:                                    ; preds = %if.else
  %14 = load %struct._object*, %struct._object** %res, align 8, !dbg !6930, !tbaa !1829
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1, !dbg !6932
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8, !dbg !6932, !tbaa !1845
  %tp_iternext = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 26, !dbg !6933
  %tp_iternext8 = bitcast {}** %tp_iternext to %struct._object* (%struct._object*)**, !dbg !6933
  %16 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext8, align 8, !dbg !6933, !tbaa !6934
  %cmp9 = icmp ne %struct._object* (%struct._object*)* %16, null, !dbg !6935
  br i1 %cmp9, label %land.lhs.true.10, label %if.then.15, !dbg !6936

land.lhs.true.10:                                 ; preds = %land.lhs.true
  %17 = load %struct._object*, %struct._object** %res, align 8, !dbg !6937, !tbaa !1829
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1, !dbg !6939
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8, !dbg !6939, !tbaa !1845
  %tp_iternext12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 26, !dbg !6940
  %tp_iternext13 = bitcast {}** %tp_iternext12 to %struct._object* (%struct._object*)**, !dbg !6940
  %19 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext13, align 8, !dbg !6940, !tbaa !6934
  %cmp14 = icmp ne %struct._object* (%struct._object*)* %19, @_PyObject_NextNotImplemented, !dbg !6941
  br i1 %cmp14, label %if.end.23, label %if.then.15, !dbg !6942

if.then.15:                                       ; preds = %land.lhs.true.10, %land.lhs.true
  %20 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !6943, !tbaa !1829
  %21 = load %struct._object*, %struct._object** %res, align 8, !dbg !6944, !tbaa !1829
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1, !dbg !6945
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8, !dbg !6945, !tbaa !1845
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 1, !dbg !6946
  %23 = load i8*, i8** %tp_name, align 8, !dbg !6946, !tbaa !2094
  %call17 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %20, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.82, i32 0, i32 0), i8* %23), !dbg !6947
  br label %do.body, !dbg !6948

do.body:                                          ; preds = %if.then.15
  %24 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6949
  call void @llvm.lifetime.start(i64 8, i8* %24) #2, !dbg !6949
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1505, metadata !1833), !dbg !6951
  %25 = load %struct._object*, %struct._object** %res, align 8, !dbg !6952, !tbaa !1829
  store %struct._object* %25, %struct._object** %_py_decref_tmp, align 8, !dbg !6951, !tbaa !1829
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6953, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0, !dbg !6955
  %27 = load i64, i64* %ob_refcnt, align 8, !dbg !6956, !tbaa !1853
  %dec = add i64 %27, -1, !dbg !6956
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !6956, !tbaa !1853
  %cmp18 = icmp ne i64 %dec, 0, !dbg !6957
  br i1 %cmp18, label %if.then.19, label %if.else.20, !dbg !6958

if.then.19:                                       ; preds = %do.body
  br label %if.end.22, !dbg !6959

if.else.20:                                       ; preds = %do.body
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6961, !tbaa !1829
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1, !dbg !6963
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8, !dbg !6963, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4, !dbg !6964
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6964, !tbaa !2033
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6965, !tbaa !1829
  call void %30(%struct._object* %31), !dbg !6966
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.20, %if.then.19
  %32 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6967
  call void @llvm.lifetime.end(i64 8, i8* %32) #2, !dbg !6967
  br label %do.cond, !dbg !6969

do.cond:                                          ; preds = %if.end.22
  br label %do.end, !dbg !6970

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %res, align 8, !dbg !6972, !tbaa !1829
  br label %if.end.23, !dbg !6973

if.end.23:                                        ; preds = %do.end, %land.lhs.true.10, %if.else
  %33 = load %struct._object*, %struct._object** %res, align 8, !dbg !6974, !tbaa !1829
  store %struct._object* %33, %struct._object** %retval, !dbg !6975
  store i32 1, i32* %cleanup.dest.slot
  %34 = bitcast %struct._object** %res to i8*, !dbg !6976
  call void @llvm.lifetime.end(i64 8, i8* %34) #2, !dbg !6976
  br label %cleanup

cleanup:                                          ; preds = %if.end.23, %if.end, %if.then.2
  %35 = bitcast %struct._object* (%struct._object*)** %f to i8*, !dbg !6977
  call void @llvm.lifetime.end(i64 8, i8* %35) #2, !dbg !6977
  %36 = bitcast %struct._typeobject** %t to i8*, !dbg !6977
  call void @llvm.lifetime.end(i64 8, i8* %36) #2, !dbg !6977
  %37 = load %struct._object*, %struct._object** %retval, !dbg !6977
  ret %struct._object* %37, !dbg !6977
}

declare %struct._object* @PyTuple_New(i64) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PyIter_Next(%struct._object* %iter) #0 {
entry:
  %iter.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  store %struct._object* %iter, %struct._object** %iter.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %iter.addr, metadata !1511, metadata !1833), !dbg !6978
  %0 = bitcast %struct._object** %result to i8*, !dbg !6979
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !6979
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !1512, metadata !1833), !dbg !6980
  %1 = load %struct._object*, %struct._object** %iter.addr, align 8, !dbg !6981, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !6982
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6982, !tbaa !1845
  %tp_iternext = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 26, !dbg !6983
  %tp_iternext1 = bitcast {}** %tp_iternext to %struct._object* (%struct._object*)**, !dbg !6983
  %3 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext1, align 8, !dbg !6983, !tbaa !6934
  %4 = load %struct._object*, %struct._object** %iter.addr, align 8, !dbg !6984, !tbaa !1829
  %call = call %struct._object* %3(%struct._object* %4), !dbg !6985
  store %struct._object* %call, %struct._object** %result, align 8, !dbg !6986, !tbaa !1829
  %5 = load %struct._object*, %struct._object** %result, align 8, !dbg !6987, !tbaa !1829
  %cmp = icmp eq %struct._object* %5, null, !dbg !6989
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6990

land.lhs.true:                                    ; preds = %entry
  %call2 = call %struct._object* @PyErr_Occurred(), !dbg !6991
  %tobool = icmp ne %struct._object* %call2, null, !dbg !6991
  br i1 %tobool, label %land.lhs.true.3, label %if.end, !dbg !6992

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %6 = load %struct._object*, %struct._object** @PyExc_StopIteration, align 8, !dbg !6993, !tbaa !1829
  %call4 = call i32 @PyErr_ExceptionMatches(%struct._object* %6), !dbg !6994
  %tobool5 = icmp ne i32 %call4, 0, !dbg !6994
  br i1 %tobool5, label %if.then, label %if.end, !dbg !6995

if.then:                                          ; preds = %land.lhs.true.3
  call void @PyErr_Clear(), !dbg !6996
  br label %if.end, !dbg !6996

if.end:                                           ; preds = %if.then, %land.lhs.true.3, %land.lhs.true, %entry
  %7 = load %struct._object*, %struct._object** %result, align 8, !dbg !6997, !tbaa !1829
  %8 = bitcast %struct._object** %result to i8*, !dbg !6998
  call void @llvm.lifetime.end(i64 8, i8* %8) #2, !dbg !6998
  ret %struct._object* %7, !dbg !6999
}

declare i32 @_PyTuple_Resize(%struct._object**, i64) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PySequence_List(%struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %rv = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp13 = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !1087, metadata !1833), !dbg !7000
  %0 = bitcast %struct._object** %result to i8*, !dbg !7001
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !7001
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !1088, metadata !1833), !dbg !7002
  %1 = bitcast %struct._object** %rv to i8*, !dbg !7003
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !7003
  call void @llvm.dbg.declare(metadata %struct._object** %rv, metadata !1089, metadata !1833), !dbg !7004
  %2 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !7005, !tbaa !1829
  %cmp = icmp eq %struct._object* %2, null, !dbg !7007
  br i1 %cmp, label %if.then, label %if.end, !dbg !7008

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !7009
  store %struct._object* %call, %struct._object** %retval, !dbg !7010
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7010

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyList_New(i64 0), !dbg !7011
  store %struct._object* %call1, %struct._object** %result, align 8, !dbg !7012, !tbaa !1829
  %3 = load %struct._object*, %struct._object** %result, align 8, !dbg !7013, !tbaa !1829
  %cmp2 = icmp eq %struct._object* %3, null, !dbg !7015
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !7016

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !7017
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7017

if.end.4:                                         ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %result, align 8, !dbg !7018, !tbaa !1829
  %5 = bitcast %struct._object* %4 to %struct.PyListObject*, !dbg !7019
  %6 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !7020, !tbaa !1829
  %call5 = call %struct._object* @_PyList_Extend(%struct.PyListObject* %5, %struct._object* %6), !dbg !7021
  store %struct._object* %call5, %struct._object** %rv, align 8, !dbg !7022, !tbaa !1829
  %7 = load %struct._object*, %struct._object** %rv, align 8, !dbg !7023, !tbaa !1829
  %cmp6 = icmp eq %struct._object* %7, null, !dbg !7024
  br i1 %cmp6, label %if.then.7, label %if.end.11, !dbg !7025

if.then.7:                                        ; preds = %if.end.4
  br label %do.body, !dbg !7026

do.body:                                          ; preds = %if.then.7
  %8 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7027
  call void @llvm.lifetime.start(i64 8, i8* %8) #2, !dbg !7027
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1090, metadata !1833), !dbg !7029
  %9 = load %struct._object*, %struct._object** %result, align 8, !dbg !7030, !tbaa !1829
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8, !dbg !7029, !tbaa !1829
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7031, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0, !dbg !7033
  %11 = load i64, i64* %ob_refcnt, align 8, !dbg !7034, !tbaa !1853
  %dec = add i64 %11, -1, !dbg !7034
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !7034, !tbaa !1853
  %cmp8 = icmp ne i64 %dec, 0, !dbg !7035
  br i1 %cmp8, label %if.then.9, label %if.else, !dbg !7036

if.then.9:                                        ; preds = %do.body
  br label %if.end.10, !dbg !7037

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7039, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1, !dbg !7041
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7041, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4, !dbg !7042
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7042, !tbaa !2033
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7043, !tbaa !1829
  call void %14(%struct._object* %15), !dbg !7044
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  %16 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7045
  call void @llvm.lifetime.end(i64 8, i8* %16) #2, !dbg !7045
  br label %do.cond, !dbg !7047

do.cond:                                          ; preds = %if.end.10
  br label %do.end, !dbg !7048

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !7050
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7050

if.end.11:                                        ; preds = %if.end.4
  br label %do.body.12, !dbg !7051

do.body.12:                                       ; preds = %if.end.11
  %17 = bitcast %struct._object** %_py_decref_tmp13 to i8*, !dbg !7052
  call void @llvm.lifetime.start(i64 8, i8* %17) #2, !dbg !7052
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp13, metadata !1094, metadata !1833), !dbg !7054
  %18 = load %struct._object*, %struct._object** %rv, align 8, !dbg !7055, !tbaa !1829
  store %struct._object* %18, %struct._object** %_py_decref_tmp13, align 8, !dbg !7054, !tbaa !1829
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8, !dbg !7056, !tbaa !1829
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0, !dbg !7058
  %20 = load i64, i64* %ob_refcnt14, align 8, !dbg !7059, !tbaa !1853
  %dec15 = add i64 %20, -1, !dbg !7059
  store i64 %dec15, i64* %ob_refcnt14, align 8, !dbg !7059, !tbaa !1853
  %cmp16 = icmp ne i64 %dec15, 0, !dbg !7060
  br i1 %cmp16, label %if.then.17, label %if.else.18, !dbg !7061

if.then.17:                                       ; preds = %do.body.12
  br label %if.end.21, !dbg !7062

if.else.18:                                       ; preds = %do.body.12
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8, !dbg !7064, !tbaa !1829
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1, !dbg !7066
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8, !dbg !7066, !tbaa !1845
  %tp_dealloc20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4, !dbg !7067
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc20, align 8, !dbg !7067, !tbaa !2033
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8, !dbg !7068, !tbaa !1829
  call void %23(%struct._object* %24), !dbg !7069
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.18, %if.then.17
  %25 = bitcast %struct._object** %_py_decref_tmp13 to i8*, !dbg !7070
  call void @llvm.lifetime.end(i64 8, i8* %25) #2, !dbg !7070
  br label %do.cond.22, !dbg !7072

do.cond.22:                                       ; preds = %if.end.21
  br label %do.end.23, !dbg !7073

do.end.23:                                        ; preds = %do.cond.22
  %26 = load %struct._object*, %struct._object** %result, align 8, !dbg !7075, !tbaa !1829
  store %struct._object* %26, %struct._object** %retval, !dbg !7076
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7076

cleanup:                                          ; preds = %do.end.23, %do.end, %if.then.3, %if.then
  %27 = bitcast %struct._object** %rv to i8*, !dbg !7077
  call void @llvm.lifetime.end(i64 8, i8* %27) #2, !dbg !7077
  %28 = bitcast %struct._object** %result to i8*, !dbg !7077
  call void @llvm.lifetime.end(i64 8, i8* %28) #2, !dbg !7077
  %29 = load %struct._object*, %struct._object** %retval, !dbg !7077
  ret %struct._object* %29, !dbg !7077
}

declare %struct._object* @PyList_New(i64) #3

declare %struct._object* @_PyList_Extend(%struct.PyListObject*, %struct._object*) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PySequence_Fast(%struct._object* %v, i8* %m) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %m.addr = alloca i8*, align 8
  %it = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !1100, metadata !1833), !dbg !7078
  store i8* %m, i8** %m.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %m.addr, metadata !1101, metadata !1833), !dbg !7079
  %0 = bitcast %struct._object** %it to i8*, !dbg !7080
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !7080
  call void @llvm.dbg.declare(metadata %struct._object** %it, metadata !1102, metadata !1833), !dbg !7081
  %1 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !7082, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !7084
  br i1 %cmp, label %if.then, label %if.end, !dbg !7085

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !7086
  store %struct._object* %call, %struct._object** %retval, !dbg !7087
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7087

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !7088, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !7090
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7090, !tbaa !1845
  %cmp1 = icmp eq %struct._typeobject* %3, @PyList_Type, !dbg !7091
  br i1 %cmp1, label %if.then.4, label %lor.lhs.false, !dbg !7092

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !7093, !tbaa !1829
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1, !dbg !7095
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8, !dbg !7095, !tbaa !1845
  %cmp3 = icmp eq %struct._typeobject* %5, @PyTuple_Type, !dbg !7096
  br i1 %cmp3, label %if.then.4, label %if.end.5, !dbg !7097

if.then.4:                                        ; preds = %lor.lhs.false, %if.end
  %6 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !7098, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0, !dbg !7100
  %7 = load i64, i64* %ob_refcnt, align 8, !dbg !7101, !tbaa !1853
  %inc = add i64 %7, 1, !dbg !7101
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !7101, !tbaa !1853
  %8 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !7102, !tbaa !1829
  store %struct._object* %8, %struct._object** %retval, !dbg !7103
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7103

if.end.5:                                         ; preds = %lor.lhs.false
  %9 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !7104, !tbaa !1829
  %call6 = call %struct._object* @PyObject_GetIter(%struct._object* %9), !dbg !7105
  store %struct._object* %call6, %struct._object** %it, align 8, !dbg !7106, !tbaa !1829
  %10 = load %struct._object*, %struct._object** %it, align 8, !dbg !7107, !tbaa !1829
  %cmp7 = icmp eq %struct._object* %10, null, !dbg !7109
  br i1 %cmp7, label %if.then.8, label %if.end.12, !dbg !7110

if.then.8:                                        ; preds = %if.end.5
  %11 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !7111, !tbaa !1829
  %call9 = call i32 @PyErr_ExceptionMatches(%struct._object* %11), !dbg !7114
  %tobool = icmp ne i32 %call9, 0, !dbg !7114
  br i1 %tobool, label %if.then.10, label %if.end.11, !dbg !7115

if.then.10:                                       ; preds = %if.then.8
  %12 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !7116, !tbaa !1829
  %13 = load i8*, i8** %m.addr, align 8, !dbg !7117, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %12, i8* %13), !dbg !7118
  br label %if.end.11, !dbg !7118

if.end.11:                                        ; preds = %if.then.10, %if.then.8
  store %struct._object* null, %struct._object** %retval, !dbg !7119
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7119

if.end.12:                                        ; preds = %if.end.5
  %14 = load %struct._object*, %struct._object** %it, align 8, !dbg !7120, !tbaa !1829
  %call13 = call %struct._object* @PySequence_List(%struct._object* %14), !dbg !7121
  store %struct._object* %call13, %struct._object** %v.addr, align 8, !dbg !7122, !tbaa !1829
  br label %do.body, !dbg !7123

do.body:                                          ; preds = %if.end.12
  %15 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7124
  call void @llvm.lifetime.start(i64 8, i8* %15) #2, !dbg !7124
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1103, metadata !1833), !dbg !7126
  %16 = load %struct._object*, %struct._object** %it, align 8, !dbg !7127, !tbaa !1829
  store %struct._object* %16, %struct._object** %_py_decref_tmp, align 8, !dbg !7126, !tbaa !1829
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7128, !tbaa !1829
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0, !dbg !7130
  %18 = load i64, i64* %ob_refcnt14, align 8, !dbg !7131, !tbaa !1853
  %dec = add i64 %18, -1, !dbg !7131
  store i64 %dec, i64* %ob_refcnt14, align 8, !dbg !7131, !tbaa !1853
  %cmp15 = icmp ne i64 %dec, 0, !dbg !7132
  br i1 %cmp15, label %if.then.16, label %if.else, !dbg !7133

if.then.16:                                       ; preds = %do.body
  br label %if.end.18, !dbg !7134

if.else:                                          ; preds = %do.body
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7136, !tbaa !1829
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1, !dbg !7138
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8, !dbg !7138, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4, !dbg !7139
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7139, !tbaa !2033
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7140, !tbaa !1829
  call void %21(%struct._object* %22), !dbg !7141
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.16
  %23 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7142
  call void @llvm.lifetime.end(i64 8, i8* %23) #2, !dbg !7142
  br label %do.cond, !dbg !7144

do.cond:                                          ; preds = %if.end.18
  br label %do.end, !dbg !7145

do.end:                                           ; preds = %do.cond
  %24 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !7147, !tbaa !1829
  store %struct._object* %24, %struct._object** %retval, !dbg !7148
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7148

cleanup:                                          ; preds = %do.end, %if.end.11, %if.then.4, %if.then
  %25 = bitcast %struct._object** %it to i8*, !dbg !7149
  call void @llvm.lifetime.end(i64 8, i8* %25) #2, !dbg !7149
  %26 = load %struct._object*, %struct._object** %retval, !dbg !7149
  ret %struct._object* %26, !dbg !7149
}

; Function Attrs: nounwind uwtable
define i64 @_PySequence_IterSearch(%struct._object* %seq, %struct._object* %obj, i32 %operation) #0 {
entry:
  %retval = alloca i64, align 8
  %seq.addr = alloca %struct._object*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %operation.addr = alloca i32, align 4
  %n = alloca i64, align 8
  %wrapped = alloca i32, align 4
  %it = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %cmp7 = alloca i32, align 4
  %item = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp45 = alloca %struct._object*, align 8
  store %struct._object* %seq, %struct._object** %seq.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %seq.addr, metadata !1109, metadata !1833), !dbg !7150
  store %struct._object* %obj, %struct._object** %obj.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %obj.addr, metadata !1110, metadata !1833), !dbg !7151
  store i32 %operation, i32* %operation.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %operation.addr, metadata !1111, metadata !1833), !dbg !7152
  %0 = bitcast i64* %n to i8*, !dbg !7153
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !7153
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1112, metadata !1833), !dbg !7154
  %1 = bitcast i32* %wrapped to i8*, !dbg !7155
  call void @llvm.lifetime.start(i64 4, i8* %1) #2, !dbg !7155
  call void @llvm.dbg.declare(metadata i32* %wrapped, metadata !1113, metadata !1833), !dbg !7156
  %2 = bitcast %struct._object** %it to i8*, !dbg !7157
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !7157
  call void @llvm.dbg.declare(metadata %struct._object** %it, metadata !1114, metadata !1833), !dbg !7158
  %3 = load %struct._object*, %struct._object** %seq.addr, align 8, !dbg !7159, !tbaa !1829
  %cmp = icmp eq %struct._object* %3, null, !dbg !7161
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7162

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !7163, !tbaa !1829
  %cmp1 = icmp eq %struct._object* %4, null, !dbg !7165
  br i1 %cmp1, label %if.then, label %if.end, !dbg !7166

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !7167
  store i64 -1, i64* %retval, !dbg !7169
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56, !dbg !7169

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct._object*, %struct._object** %seq.addr, align 8, !dbg !7170, !tbaa !1829
  %call2 = call %struct._object* @PyObject_GetIter(%struct._object* %5), !dbg !7171
  store %struct._object* %call2, %struct._object** %it, align 8, !dbg !7172, !tbaa !1829
  %6 = load %struct._object*, %struct._object** %it, align 8, !dbg !7173, !tbaa !1829
  %cmp3 = icmp eq %struct._object* %6, null, !dbg !7175
  br i1 %cmp3, label %if.then.4, label %if.end.6, !dbg !7176

if.then.4:                                        ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %seq.addr, align 8, !dbg !7177, !tbaa !1829
  %call5 = call %struct._object* @type_error(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.64, i32 0, i32 0), %struct._object* %7), !dbg !7179
  store i64 -1, i64* %retval, !dbg !7180
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56, !dbg !7180

if.end.6:                                         ; preds = %if.end
  store i32 0, i32* %wrapped, align 4, !dbg !7181, !tbaa !2764
  store i64 0, i64* %n, align 8, !dbg !7182, !tbaa !1963
  br label %for.cond, !dbg !7183

for.cond:                                         ; preds = %cleanup.cont, %if.end.6
  %8 = bitcast i32* %cmp7 to i8*, !dbg !7184
  call void @llvm.lifetime.start(i64 4, i8* %8) #2, !dbg !7184
  call void @llvm.dbg.declare(metadata i32* %cmp7, metadata !1115, metadata !1833), !dbg !7185
  %9 = bitcast %struct._object** %item to i8*, !dbg !7186
  call void @llvm.lifetime.start(i64 8, i8* %9) #2, !dbg !7186
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !1119, metadata !1833), !dbg !7187
  %10 = load %struct._object*, %struct._object** %it, align 8, !dbg !7188, !tbaa !1829
  %call8 = call %struct._object* @PyIter_Next(%struct._object* %10), !dbg !7189
  store %struct._object* %call8, %struct._object** %item, align 8, !dbg !7187, !tbaa !1829
  %11 = load %struct._object*, %struct._object** %item, align 8, !dbg !7190, !tbaa !1829
  %cmp9 = icmp eq %struct._object* %11, null, !dbg !7192
  br i1 %cmp9, label %if.then.10, label %if.end.14, !dbg !7193

if.then.10:                                       ; preds = %for.cond
  %call11 = call %struct._object* @PyErr_Occurred(), !dbg !7194
  %tobool = icmp ne %struct._object* %call11, null, !dbg !7194
  br i1 %tobool, label %if.then.12, label %if.end.13, !dbg !7197

if.then.12:                                       ; preds = %if.then.10
  store i32 4, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7198

if.end.13:                                        ; preds = %if.then.10
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7199

if.end.14:                                        ; preds = %for.cond
  %12 = load %struct._object*, %struct._object** %obj.addr, align 8, !dbg !7200, !tbaa !1829
  %13 = load %struct._object*, %struct._object** %item, align 8, !dbg !7201, !tbaa !1829
  %call15 = call i32 @PyObject_RichCompareBool(%struct._object* %12, %struct._object* %13, i32 2), !dbg !7202
  store i32 %call15, i32* %cmp7, align 4, !dbg !7203, !tbaa !2764
  br label %do.body, !dbg !7204

do.body:                                          ; preds = %if.end.14
  %14 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7205
  call void @llvm.lifetime.start(i64 8, i8* %14) #2, !dbg !7205
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1120, metadata !1833), !dbg !7207
  %15 = load %struct._object*, %struct._object** %item, align 8, !dbg !7208, !tbaa !1829
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8, !dbg !7207, !tbaa !1829
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7209, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0, !dbg !7211
  %17 = load i64, i64* %ob_refcnt, align 8, !dbg !7212, !tbaa !1853
  %dec = add i64 %17, -1, !dbg !7212
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !7212, !tbaa !1853
  %cmp16 = icmp ne i64 %dec, 0, !dbg !7213
  br i1 %cmp16, label %if.then.17, label %if.else, !dbg !7214

if.then.17:                                       ; preds = %do.body
  br label %if.end.18, !dbg !7215

if.else:                                          ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7217, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1, !dbg !7219
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7219, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4, !dbg !7220
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7220, !tbaa !2033
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7221, !tbaa !1829
  call void %20(%struct._object* %21), !dbg !7222
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.17
  %22 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7223
  call void @llvm.lifetime.end(i64 8, i8* %22) #2, !dbg !7223
  br label %do.cond, !dbg !7225

do.cond:                                          ; preds = %if.end.18
  br label %do.end, !dbg !7226

do.end:                                           ; preds = %do.cond
  %23 = load i32, i32* %cmp7, align 4, !dbg !7228, !tbaa !2764
  %cmp19 = icmp slt i32 %23, 0, !dbg !7230
  br i1 %cmp19, label %if.then.20, label %if.end.21, !dbg !7231

if.then.20:                                       ; preds = %do.end
  store i32 4, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7232

if.end.21:                                        ; preds = %do.end
  %24 = load i32, i32* %cmp7, align 4, !dbg !7233, !tbaa !2764
  %cmp22 = icmp sgt i32 %24, 0, !dbg !7235
  br i1 %cmp22, label %if.then.23, label %if.end.32, !dbg !7236

if.then.23:                                       ; preds = %if.end.21
  %25 = load i32, i32* %operation.addr, align 4, !dbg !7237, !tbaa !2764
  br label %NodeBlock.3

NodeBlock.3:                                      ; preds = %if.then.23
  %Pivot.4 = icmp slt i32 %25, 2
  br i1 %Pivot.4, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock.3
  %Pivot = icmp slt i32 %25, 3
  br i1 %Pivot, label %sw.bb.27, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %25, 3
  br i1 %SwitchLeaf2, label %sw.bb.31, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock.3
  %SwitchLeaf = icmp eq i32 %25, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %26 = load i64, i64* %n, align 8, !dbg !7239, !tbaa !1963
  %cmp24 = icmp eq i64 %26, 9223372036854775807, !dbg !7242
  br i1 %cmp24, label %if.then.25, label %if.end.26, !dbg !7243

if.then.25:                                       ; preds = %sw.bb
  %27 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !7244, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %27, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.65, i32 0, i32 0)), !dbg !7246
  store i32 4, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7247

if.end.26:                                        ; preds = %sw.bb
  %28 = load i64, i64* %n, align 8, !dbg !7248, !tbaa !1963
  %inc = add i64 %28, 1, !dbg !7248
  store i64 %inc, i64* %n, align 8, !dbg !7248, !tbaa !1963
  br label %sw.epilog, !dbg !7249

sw.bb.27:                                         ; preds = %NodeBlock
  %29 = load i32, i32* %wrapped, align 4, !dbg !7250, !tbaa !2764
  %tobool28 = icmp ne i32 %29, 0, !dbg !7250
  br i1 %tobool28, label %if.then.29, label %if.end.30, !dbg !7252

if.then.29:                                       ; preds = %sw.bb.27
  %30 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !7253, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %30, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.66, i32 0, i32 0)), !dbg !7255
  store i32 4, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7256

if.end.30:                                        ; preds = %sw.bb.27
  store i32 8, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7257

sw.bb.31:                                         ; preds = %LeafBlock.1
  store i64 1, i64* %n, align 8, !dbg !7258, !tbaa !1963
  store i32 8, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7259

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  br label %sw.epilog, !dbg !7260

sw.epilog:                                        ; preds = %sw.default, %if.end.26
  br label %if.end.32, !dbg !7261

if.end.32:                                        ; preds = %sw.epilog, %if.end.21
  %31 = load i32, i32* %operation.addr, align 4, !dbg !7262, !tbaa !2764
  %cmp33 = icmp eq i32 %31, 2, !dbg !7264
  br i1 %cmp33, label %if.then.34, label %if.end.39, !dbg !7265

if.then.34:                                       ; preds = %if.end.32
  %32 = load i64, i64* %n, align 8, !dbg !7266, !tbaa !1963
  %cmp35 = icmp eq i64 %32, 9223372036854775807, !dbg !7269
  br i1 %cmp35, label %if.then.36, label %if.end.37, !dbg !7270

if.then.36:                                       ; preds = %if.then.34
  store i32 1, i32* %wrapped, align 4, !dbg !7271, !tbaa !2764
  br label %if.end.37, !dbg !7272

if.end.37:                                        ; preds = %if.then.36, %if.then.34
  %33 = load i64, i64* %n, align 8, !dbg !7273, !tbaa !1963
  %inc38 = add i64 %33, 1, !dbg !7273
  store i64 %inc38, i64* %n, align 8, !dbg !7273, !tbaa !1963
  br label %if.end.39, !dbg !7274

if.end.39:                                        ; preds = %if.end.37, %if.end.32
  store i32 0, i32* %cleanup.dest.slot, !dbg !7275
  br label %cleanup, !dbg !7275

cleanup:                                          ; preds = %if.end.39, %sw.bb.31, %if.end.30, %if.then.29, %if.then.25, %if.then.20, %if.end.13, %if.then.12
  %34 = bitcast %struct._object** %item to i8*, !dbg !7276
  call void @llvm.lifetime.end(i64 8, i8* %34) #2, !dbg !7276
  %35 = bitcast i32* %cmp7 to i8*, !dbg !7276
  call void @llvm.lifetime.end(i64 4, i8* %35) #2, !dbg !7276
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock.18

NodeBlock.18:                                     ; preds = %cleanup
  %Pivot.19 = icmp slt i32 %cleanup.dest, 4
  br i1 %Pivot.19, label %NodeBlock.10, label %NodeBlock.16

NodeBlock.16:                                     ; preds = %NodeBlock.18
  %Pivot.17 = icmp slt i32 %cleanup.dest, 8
  br i1 %Pivot.17, label %LeafBlock.12, label %LeafBlock.14

LeafBlock.14:                                     ; preds = %NodeBlock.16
  %SwitchLeaf15 = icmp eq i32 %cleanup.dest, 8
  br i1 %SwitchLeaf15, label %Done, label %NewDefault.5

LeafBlock.12:                                     ; preds = %NodeBlock.16
  %SwitchLeaf13 = icmp eq i32 %cleanup.dest, 4
  br i1 %SwitchLeaf13, label %Fail, label %NewDefault.5

NodeBlock.10:                                     ; preds = %NodeBlock.18
  %Pivot.11 = icmp slt i32 %cleanup.dest, 2
  br i1 %Pivot.11, label %LeafBlock.6, label %LeafBlock.8

LeafBlock.8:                                      ; preds = %NodeBlock.10
  %SwitchLeaf9 = icmp eq i32 %cleanup.dest, 2
  br i1 %SwitchLeaf9, label %for.end, label %NewDefault.5

LeafBlock.6:                                      ; preds = %NodeBlock.10
  %SwitchLeaf7 = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf7, label %cleanup.cont, label %NewDefault.5

cleanup.cont:                                     ; preds = %LeafBlock.6
  br label %for.cond, !dbg !7278

for.end:                                          ; preds = %LeafBlock.8
  %36 = load i32, i32* %operation.addr, align 4, !dbg !7279, !tbaa !2764
  %cmp41 = icmp ne i32 %36, 2, !dbg !7281
  br i1 %cmp41, label %if.then.42, label %if.end.43, !dbg !7282

if.then.42:                                       ; preds = %for.end
  br label %Done, !dbg !7283

if.end.43:                                        ; preds = %for.end
  %37 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !7284, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %37, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.67, i32 0, i32 0)), !dbg !7285
  br label %Fail, !dbg !7285

Fail:                                             ; preds = %LeafBlock.12, %if.end.43
  store i64 -1, i64* %n, align 8, !dbg !7286, !tbaa !1963
  br label %Done, !dbg !7287

Done:                                             ; preds = %LeafBlock.14, %Fail, %if.then.42
  br label %do.body.44, !dbg !7288

do.body.44:                                       ; preds = %Done
  %38 = bitcast %struct._object** %_py_decref_tmp45 to i8*, !dbg !7289
  call void @llvm.lifetime.start(i64 8, i8* %38) #2, !dbg !7289
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp45, metadata !1122, metadata !1833), !dbg !7291
  %39 = load %struct._object*, %struct._object** %it, align 8, !dbg !7292, !tbaa !1829
  store %struct._object* %39, %struct._object** %_py_decref_tmp45, align 8, !dbg !7291, !tbaa !1829
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8, !dbg !7293, !tbaa !1829
  %ob_refcnt46 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 0, !dbg !7295
  %41 = load i64, i64* %ob_refcnt46, align 8, !dbg !7296, !tbaa !1853
  %dec47 = add i64 %41, -1, !dbg !7296
  store i64 %dec47, i64* %ob_refcnt46, align 8, !dbg !7296, !tbaa !1853
  %cmp48 = icmp ne i64 %dec47, 0, !dbg !7297
  br i1 %cmp48, label %if.then.49, label %if.else.50, !dbg !7298

if.then.49:                                       ; preds = %do.body.44
  br label %if.end.53, !dbg !7299

if.else.50:                                       ; preds = %do.body.44
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8, !dbg !7301, !tbaa !1829
  %ob_type51 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1, !dbg !7303
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type51, align 8, !dbg !7303, !tbaa !1845
  %tp_dealloc52 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 4, !dbg !7304
  %44 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc52, align 8, !dbg !7304, !tbaa !2033
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8, !dbg !7305, !tbaa !1829
  call void %44(%struct._object* %45), !dbg !7306
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.50, %if.then.49
  %46 = bitcast %struct._object** %_py_decref_tmp45 to i8*, !dbg !7307
  call void @llvm.lifetime.end(i64 8, i8* %46) #2, !dbg !7307
  br label %do.cond.54, !dbg !7309

do.cond.54:                                       ; preds = %if.end.53
  br label %do.end.55, !dbg !7310

do.end.55:                                        ; preds = %do.cond.54
  %47 = load i64, i64* %n, align 8, !dbg !7312, !tbaa !1963
  store i64 %47, i64* %retval, !dbg !7313
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56, !dbg !7313

NewDefault.5:                                     ; preds = %LeafBlock.14, %LeafBlock.12, %LeafBlock.8, %LeafBlock.6
  br label %cleanup.56

cleanup.56:                                       ; preds = %NewDefault.5, %do.end.55, %if.then.4, %if.then
  %48 = bitcast %struct._object** %it to i8*, !dbg !7314
  call void @llvm.lifetime.end(i64 8, i8* %48) #2, !dbg !7314
  %49 = bitcast i32* %wrapped to i8*, !dbg !7314
  call void @llvm.lifetime.end(i64 4, i8* %49) #2, !dbg !7314
  %50 = bitcast i64* %n to i8*, !dbg !7314
  call void @llvm.lifetime.end(i64 8, i8* %50) #2, !dbg !7314
  %51 = load i64, i64* %retval, !dbg !7314
  ret i64 %51, !dbg !7314
}

declare i32 @PyObject_RichCompareBool(%struct._object*, %struct._object*, i32) #3

; Function Attrs: nounwind uwtable
define i64 @PySequence_Count(%struct._object* %s, %struct._object* %o) #0 {
entry:
  %s.addr = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  store %struct._object* %s, %struct._object** %s.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %s.addr, metadata !1126, metadata !1833), !dbg !7315
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1127, metadata !1833), !dbg !7316
  %0 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !7317, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7318, !tbaa !1829
  %call = call i64 @_PySequence_IterSearch(%struct._object* %0, %struct._object* %1, i32 1), !dbg !7319
  ret i64 %call, !dbg !7320
}

; Function Attrs: nounwind uwtable
define i32 @PySequence_Contains(%struct._object* %seq, %struct._object* %ob) #0 {
entry:
  %retval = alloca i32, align 4
  %seq.addr = alloca %struct._object*, align 8
  %ob.addr = alloca %struct._object*, align 8
  %result = alloca i64, align 8
  %sqm = alloca %struct.PySequenceMethods*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %seq, %struct._object** %seq.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %seq.addr, metadata !1130, metadata !1833), !dbg !7321
  store %struct._object* %ob, %struct._object** %ob.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %ob.addr, metadata !1131, metadata !1833), !dbg !7322
  %0 = bitcast i64* %result to i8*, !dbg !7323
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !7323
  call void @llvm.dbg.declare(metadata i64* %result, metadata !1132, metadata !1833), !dbg !7324
  %1 = bitcast %struct.PySequenceMethods** %sqm to i8*, !dbg !7325
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !7325
  call void @llvm.dbg.declare(metadata %struct.PySequenceMethods** %sqm, metadata !1133, metadata !1833), !dbg !7326
  %2 = load %struct._object*, %struct._object** %seq.addr, align 8, !dbg !7327, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !7328
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7328, !tbaa !1845
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 11, !dbg !7329
  %4 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8, !dbg !7329, !tbaa !1876
  store %struct.PySequenceMethods* %4, %struct.PySequenceMethods** %sqm, align 8, !dbg !7326, !tbaa !1829
  %5 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %sqm, align 8, !dbg !7330, !tbaa !1829
  %cmp = icmp ne %struct.PySequenceMethods* %5, null, !dbg !7332
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7333

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %sqm, align 8, !dbg !7334, !tbaa !1829
  %sq_contains = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %6, i32 0, i32 7, !dbg !7336
  %7 = load i32 (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*)** %sq_contains, align 8, !dbg !7336, !tbaa !7337
  %cmp1 = icmp ne i32 (%struct._object*, %struct._object*)* %7, null, !dbg !7338
  br i1 %cmp1, label %if.then, label %if.end, !dbg !7339

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %sqm, align 8, !dbg !7340, !tbaa !1829
  %sq_contains2 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %8, i32 0, i32 7, !dbg !7341
  %9 = load i32 (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*)** %sq_contains2, align 8, !dbg !7341, !tbaa !7337
  %10 = load %struct._object*, %struct._object** %seq.addr, align 8, !dbg !7342, !tbaa !1829
  %11 = load %struct._object*, %struct._object** %ob.addr, align 8, !dbg !7343, !tbaa !1829
  %call = call i32 %9(%struct._object* %10, %struct._object* %11), !dbg !7344
  store i32 %call, i32* %retval, !dbg !7345
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7345

if.end:                                           ; preds = %land.lhs.true, %entry
  %12 = load %struct._object*, %struct._object** %seq.addr, align 8, !dbg !7346, !tbaa !1829
  %13 = load %struct._object*, %struct._object** %ob.addr, align 8, !dbg !7347, !tbaa !1829
  %call3 = call i64 @_PySequence_IterSearch(%struct._object* %12, %struct._object* %13, i32 3), !dbg !7348
  store i64 %call3, i64* %result, align 8, !dbg !7349, !tbaa !1963
  %14 = load i64, i64* %result, align 8, !dbg !7350, !tbaa !1963
  %conv = trunc i64 %14 to i32, !dbg !7351
  store i32 %conv, i32* %retval, !dbg !7352
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7352

cleanup:                                          ; preds = %if.end, %if.then
  %15 = bitcast %struct.PySequenceMethods** %sqm to i8*, !dbg !7353
  call void @llvm.lifetime.end(i64 8, i8* %15) #2, !dbg !7353
  %16 = bitcast i64* %result to i8*, !dbg !7353
  call void @llvm.lifetime.end(i64 8, i8* %16) #2, !dbg !7353
  %17 = load i32, i32* %retval, !dbg !7353
  ret i32 %17, !dbg !7353
}

; Function Attrs: nounwind uwtable
define i32 @PySequence_In(%struct._object* %w, %struct._object* %v) #0 {
entry:
  %w.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  store %struct._object* %w, %struct._object** %w.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %w.addr, metadata !1136, metadata !1833), !dbg !7354
  store %struct._object* %v, %struct._object** %v.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %v.addr, metadata !1137, metadata !1833), !dbg !7355
  %0 = load %struct._object*, %struct._object** %w.addr, align 8, !dbg !7356, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %v.addr, align 8, !dbg !7357, !tbaa !1829
  %call = call i32 @PySequence_Contains(%struct._object* %0, %struct._object* %1), !dbg !7358
  ret i32 %call, !dbg !7359
}

; Function Attrs: nounwind uwtable
define i64 @PySequence_Index(%struct._object* %s, %struct._object* %o) #0 {
entry:
  %s.addr = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  store %struct._object* %s, %struct._object** %s.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %s.addr, metadata !1140, metadata !1833), !dbg !7360
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1141, metadata !1833), !dbg !7361
  %0 = load %struct._object*, %struct._object** %s.addr, align 8, !dbg !7362, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7363, !tbaa !1829
  %call = call i64 @_PySequence_IterSearch(%struct._object* %0, %struct._object* %1, i32 2), !dbg !7364
  ret i64 %call, !dbg !7365
}

; Function Attrs: nounwind uwtable
define i32 @PyMapping_Check(%struct._object* %o) #0 {
entry:
  %o.addr = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1144, metadata !1833), !dbg !7366
  %0 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7367, !tbaa !1829
  %tobool = icmp ne %struct._object* %0, null, !dbg !7367
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !7368

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7369, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !7371
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7371, !tbaa !1845
  %tp_as_mapping = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 12, !dbg !7372
  %3 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping, align 8, !dbg !7372, !tbaa !1912
  %tobool1 = icmp ne %struct.PyMappingMethods* %3, null, !dbg !7373
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !7374

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7375, !tbaa !1829
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1, !dbg !7376
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8, !dbg !7376, !tbaa !1845
  %tp_as_mapping3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 12, !dbg !7377
  %6 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping3, align 8, !dbg !7377, !tbaa !1912
  %mp_subscript = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %6, i32 0, i32 1, !dbg !7378
  %7 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %mp_subscript, align 8, !dbg !7378, !tbaa !2246
  %tobool4 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %7, null, !dbg !7374
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %8 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool4, %land.rhs ]
  %land.ext = zext i1 %8 to i32, !dbg !7379
  ret i32 %land.ext, !dbg !7382
}

; Function Attrs: nounwind uwtable
define i64 @PyMapping_Length(%struct._object* %o) #0 {
entry:
  %o.addr = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1151, metadata !1833), !dbg !7383
  %0 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7384, !tbaa !1829
  %call = call i64 @PyMapping_Size(%struct._object* %0), !dbg !7385
  ret i64 %call, !dbg !7386
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyMapping_GetItemString(%struct._object* %o, i8* %key) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %key.addr = alloca i8*, align 8
  %okey = alloca %struct._object*, align 8
  %r = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1154, metadata !1833), !dbg !7387
  store i8* %key, i8** %key.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %key.addr, metadata !1155, metadata !1833), !dbg !7388
  %0 = bitcast %struct._object** %okey to i8*, !dbg !7389
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !7389
  call void @llvm.dbg.declare(metadata %struct._object** %okey, metadata !1156, metadata !1833), !dbg !7390
  %1 = bitcast %struct._object** %r to i8*, !dbg !7389
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !7389
  call void @llvm.dbg.declare(metadata %struct._object** %r, metadata !1157, metadata !1833), !dbg !7391
  %2 = load i8*, i8** %key.addr, align 8, !dbg !7392, !tbaa !1829
  %cmp = icmp eq i8* %2, null, !dbg !7394
  br i1 %cmp, label %if.then, label %if.end, !dbg !7395

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !7396
  store %struct._object* %call, %struct._object** %retval, !dbg !7397
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7397

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %key.addr, align 8, !dbg !7398, !tbaa !1829
  %call1 = call %struct._object* @PyUnicode_FromString(i8* %3), !dbg !7399
  store %struct._object* %call1, %struct._object** %okey, align 8, !dbg !7400, !tbaa !1829
  %4 = load %struct._object*, %struct._object** %okey, align 8, !dbg !7401, !tbaa !1829
  %cmp2 = icmp eq %struct._object* %4, null, !dbg !7403
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !7404

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !7405
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7405

if.end.4:                                         ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7406, !tbaa !1829
  %6 = load %struct._object*, %struct._object** %okey, align 8, !dbg !7407, !tbaa !1829
  %call5 = call %struct._object* @PyObject_GetItem(%struct._object* %5, %struct._object* %6), !dbg !7408
  store %struct._object* %call5, %struct._object** %r, align 8, !dbg !7409, !tbaa !1829
  br label %do.body, !dbg !7410

do.body:                                          ; preds = %if.end.4
  %7 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7411
  call void @llvm.lifetime.start(i64 8, i8* %7) #2, !dbg !7411
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1158, metadata !1833), !dbg !7413
  %8 = load %struct._object*, %struct._object** %okey, align 8, !dbg !7414, !tbaa !1829
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8, !dbg !7413, !tbaa !1829
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7415, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0, !dbg !7417
  %10 = load i64, i64* %ob_refcnt, align 8, !dbg !7418, !tbaa !1853
  %dec = add i64 %10, -1, !dbg !7418
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !7418, !tbaa !1853
  %cmp6 = icmp ne i64 %dec, 0, !dbg !7419
  br i1 %cmp6, label %if.then.7, label %if.else, !dbg !7420

if.then.7:                                        ; preds = %do.body
  br label %if.end.8, !dbg !7421

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7423, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1, !dbg !7425
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7425, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4, !dbg !7426
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7426, !tbaa !2033
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7427, !tbaa !1829
  call void %13(%struct._object* %14), !dbg !7428
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  %15 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7429
  call void @llvm.lifetime.end(i64 8, i8* %15) #2, !dbg !7429
  br label %do.cond, !dbg !7431

do.cond:                                          ; preds = %if.end.8
  br label %do.end, !dbg !7432

do.end:                                           ; preds = %do.cond
  %16 = load %struct._object*, %struct._object** %r, align 8, !dbg !7434, !tbaa !1829
  store %struct._object* %16, %struct._object** %retval, !dbg !7435
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7435

cleanup:                                          ; preds = %do.end, %if.then.3, %if.then
  %17 = bitcast %struct._object** %r to i8*, !dbg !7436
  call void @llvm.lifetime.end(i64 8, i8* %17) #2, !dbg !7436
  %18 = bitcast %struct._object** %okey to i8*, !dbg !7436
  call void @llvm.lifetime.end(i64 8, i8* %18) #2, !dbg !7436
  %19 = load %struct._object*, %struct._object** %retval, !dbg !7436
  ret %struct._object* %19, !dbg !7436
}

; Function Attrs: nounwind uwtable
define i32 @PyMapping_SetItemString(%struct._object* %o, i8* %key, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %o.addr = alloca %struct._object*, align 8
  %key.addr = alloca i8*, align 8
  %value.addr = alloca %struct._object*, align 8
  %okey = alloca %struct._object*, align 8
  %r = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1164, metadata !1833), !dbg !7437
  store i8* %key, i8** %key.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %key.addr, metadata !1165, metadata !1833), !dbg !7438
  store %struct._object* %value, %struct._object** %value.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %value.addr, metadata !1166, metadata !1833), !dbg !7439
  %0 = bitcast %struct._object** %okey to i8*, !dbg !7440
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !7440
  call void @llvm.dbg.declare(metadata %struct._object** %okey, metadata !1167, metadata !1833), !dbg !7441
  %1 = bitcast i32* %r to i8*, !dbg !7442
  call void @llvm.lifetime.start(i64 4, i8* %1) #2, !dbg !7442
  call void @llvm.dbg.declare(metadata i32* %r, metadata !1168, metadata !1833), !dbg !7443
  %2 = load i8*, i8** %key.addr, align 8, !dbg !7444, !tbaa !1829
  %cmp = icmp eq i8* %2, null, !dbg !7446
  br i1 %cmp, label %if.then, label %if.end, !dbg !7447

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !7448
  store i32 -1, i32* %retval, !dbg !7450
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7450

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %key.addr, align 8, !dbg !7451, !tbaa !1829
  %call1 = call %struct._object* @PyUnicode_FromString(i8* %3), !dbg !7452
  store %struct._object* %call1, %struct._object** %okey, align 8, !dbg !7453, !tbaa !1829
  %4 = load %struct._object*, %struct._object** %okey, align 8, !dbg !7454, !tbaa !1829
  %cmp2 = icmp eq %struct._object* %4, null, !dbg !7456
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !7457

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval, !dbg !7458
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7458

if.end.4:                                         ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7459, !tbaa !1829
  %6 = load %struct._object*, %struct._object** %okey, align 8, !dbg !7460, !tbaa !1829
  %7 = load %struct._object*, %struct._object** %value.addr, align 8, !dbg !7461, !tbaa !1829
  %call5 = call i32 @PyObject_SetItem(%struct._object* %5, %struct._object* %6, %struct._object* %7), !dbg !7462
  store i32 %call5, i32* %r, align 4, !dbg !7463, !tbaa !2764
  br label %do.body, !dbg !7464

do.body:                                          ; preds = %if.end.4
  %8 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7465
  call void @llvm.lifetime.start(i64 8, i8* %8) #2, !dbg !7465
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1169, metadata !1833), !dbg !7467
  %9 = load %struct._object*, %struct._object** %okey, align 8, !dbg !7468, !tbaa !1829
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8, !dbg !7467, !tbaa !1829
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7469, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0, !dbg !7471
  %11 = load i64, i64* %ob_refcnt, align 8, !dbg !7472, !tbaa !1853
  %dec = add i64 %11, -1, !dbg !7472
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !7472, !tbaa !1853
  %cmp6 = icmp ne i64 %dec, 0, !dbg !7473
  br i1 %cmp6, label %if.then.7, label %if.else, !dbg !7474

if.then.7:                                        ; preds = %do.body
  br label %if.end.8, !dbg !7475

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7477, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1, !dbg !7479
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7479, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4, !dbg !7480
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7480, !tbaa !2033
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7481, !tbaa !1829
  call void %14(%struct._object* %15), !dbg !7482
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  %16 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7483
  call void @llvm.lifetime.end(i64 8, i8* %16) #2, !dbg !7483
  br label %do.cond, !dbg !7485

do.cond:                                          ; preds = %if.end.8
  br label %do.end, !dbg !7486

do.end:                                           ; preds = %do.cond
  %17 = load i32, i32* %r, align 4, !dbg !7488, !tbaa !2764
  store i32 %17, i32* %retval, !dbg !7489
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7489

cleanup:                                          ; preds = %do.end, %if.then.3, %if.then
  %18 = bitcast i32* %r to i8*, !dbg !7490
  call void @llvm.lifetime.end(i64 4, i8* %18) #2, !dbg !7490
  %19 = bitcast %struct._object** %okey to i8*, !dbg !7490
  call void @llvm.lifetime.end(i64 8, i8* %19) #2, !dbg !7490
  %20 = load i32, i32* %retval, !dbg !7490
  ret i32 %20, !dbg !7490
}

; Function Attrs: nounwind uwtable
define i32 @PyMapping_HasKeyString(%struct._object* %o, i8* %key) #0 {
entry:
  %retval = alloca i32, align 4
  %o.addr = alloca %struct._object*, align 8
  %key.addr = alloca i8*, align 8
  %v = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1173, metadata !1833), !dbg !7491
  store i8* %key, i8** %key.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %key.addr, metadata !1174, metadata !1833), !dbg !7492
  %0 = bitcast %struct._object** %v to i8*, !dbg !7493
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !7493
  call void @llvm.dbg.declare(metadata %struct._object** %v, metadata !1175, metadata !1833), !dbg !7494
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7495, !tbaa !1829
  %2 = load i8*, i8** %key.addr, align 8, !dbg !7496, !tbaa !1829
  %call = call %struct._object* @PyMapping_GetItemString(%struct._object* %1, i8* %2), !dbg !7497
  store %struct._object* %call, %struct._object** %v, align 8, !dbg !7498, !tbaa !1829
  %3 = load %struct._object*, %struct._object** %v, align 8, !dbg !7499, !tbaa !1829
  %tobool = icmp ne %struct._object* %3, null, !dbg !7499
  br i1 %tobool, label %if.then, label %if.end.2, !dbg !7500

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !7501

do.body:                                          ; preds = %if.then
  %4 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7502
  call void @llvm.lifetime.start(i64 8, i8* %4) #2, !dbg !7502
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1176, metadata !1833), !dbg !7504
  %5 = load %struct._object*, %struct._object** %v, align 8, !dbg !7505, !tbaa !1829
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8, !dbg !7504, !tbaa !1829
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7506, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0, !dbg !7508
  %7 = load i64, i64* %ob_refcnt, align 8, !dbg !7509, !tbaa !1853
  %dec = add i64 %7, -1, !dbg !7509
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !7509, !tbaa !1853
  %cmp = icmp ne i64 %dec, 0, !dbg !7510
  br i1 %cmp, label %if.then.1, label %if.else, !dbg !7511

if.then.1:                                        ; preds = %do.body
  br label %if.end, !dbg !7512

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7514, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1, !dbg !7516
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7516, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4, !dbg !7517
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7517, !tbaa !2033
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7518, !tbaa !1829
  call void %10(%struct._object* %11), !dbg !7519
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.1
  %12 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7520
  call void @llvm.lifetime.end(i64 8, i8* %12) #2, !dbg !7520
  br label %do.cond, !dbg !7522

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !7523

do.end:                                           ; preds = %do.cond
  store i32 1, i32* %retval, !dbg !7525
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7525

if.end.2:                                         ; preds = %entry
  call void @PyErr_Clear(), !dbg !7526
  store i32 0, i32* %retval, !dbg !7527
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7527

cleanup:                                          ; preds = %if.end.2, %do.end
  %13 = bitcast %struct._object** %v to i8*, !dbg !7528
  call void @llvm.lifetime.end(i64 8, i8* %13) #2, !dbg !7528
  %14 = load i32, i32* %retval, !dbg !7528
  ret i32 %14, !dbg !7528
}

; Function Attrs: nounwind uwtable
define i32 @PyMapping_HasKey(%struct._object* %o, %struct._object* %key) #0 {
entry:
  %retval = alloca i32, align 4
  %o.addr = alloca %struct._object*, align 8
  %key.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1182, metadata !1833), !dbg !7529
  store %struct._object* %key, %struct._object** %key.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %key.addr, metadata !1183, metadata !1833), !dbg !7530
  %0 = bitcast %struct._object** %v to i8*, !dbg !7531
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !7531
  call void @llvm.dbg.declare(metadata %struct._object** %v, metadata !1184, metadata !1833), !dbg !7532
  %1 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7533, !tbaa !1829
  %2 = load %struct._object*, %struct._object** %key.addr, align 8, !dbg !7534, !tbaa !1829
  %call = call %struct._object* @PyObject_GetItem(%struct._object* %1, %struct._object* %2), !dbg !7535
  store %struct._object* %call, %struct._object** %v, align 8, !dbg !7536, !tbaa !1829
  %3 = load %struct._object*, %struct._object** %v, align 8, !dbg !7537, !tbaa !1829
  %tobool = icmp ne %struct._object* %3, null, !dbg !7537
  br i1 %tobool, label %if.then, label %if.end.2, !dbg !7538

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !7539

do.body:                                          ; preds = %if.then
  %4 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7540
  call void @llvm.lifetime.start(i64 8, i8* %4) #2, !dbg !7540
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1185, metadata !1833), !dbg !7542
  %5 = load %struct._object*, %struct._object** %v, align 8, !dbg !7543, !tbaa !1829
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8, !dbg !7542, !tbaa !1829
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7544, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0, !dbg !7546
  %7 = load i64, i64* %ob_refcnt, align 8, !dbg !7547, !tbaa !1853
  %dec = add i64 %7, -1, !dbg !7547
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !7547, !tbaa !1853
  %cmp = icmp ne i64 %dec, 0, !dbg !7548
  br i1 %cmp, label %if.then.1, label %if.else, !dbg !7549

if.then.1:                                        ; preds = %do.body
  br label %if.end, !dbg !7550

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7552, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1, !dbg !7554
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7554, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4, !dbg !7555
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7555, !tbaa !2033
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7556, !tbaa !1829
  call void %10(%struct._object* %11), !dbg !7557
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.1
  %12 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7558
  call void @llvm.lifetime.end(i64 8, i8* %12) #2, !dbg !7558
  br label %do.cond, !dbg !7560

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !7561

do.end:                                           ; preds = %do.cond
  store i32 1, i32* %retval, !dbg !7563
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7563

if.end.2:                                         ; preds = %entry
  call void @PyErr_Clear(), !dbg !7564
  store i32 0, i32* %retval, !dbg !7565
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7565

cleanup:                                          ; preds = %if.end.2, %do.end
  %13 = bitcast %struct._object** %v to i8*, !dbg !7566
  call void @llvm.lifetime.end(i64 8, i8* %13) #2, !dbg !7566
  %14 = load i32, i32* %retval, !dbg !7566
  ret i32 %14, !dbg !7566
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyMapping_Keys(%struct._object* %o) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %keys = alloca %struct._object*, align 8
  %fast = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1191, metadata !1833), !dbg !7567
  %0 = bitcast %struct._object** %keys to i8*, !dbg !7568
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !7568
  call void @llvm.dbg.declare(metadata %struct._object** %keys, metadata !1192, metadata !1833), !dbg !7569
  %1 = bitcast %struct._object** %fast to i8*, !dbg !7570
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !7570
  call void @llvm.dbg.declare(metadata %struct._object** %fast, metadata !1193, metadata !1833), !dbg !7571
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7572, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !7574
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7574, !tbaa !1845
  %cmp = icmp eq %struct._typeobject* %3, @PyDict_Type, !dbg !7575
  br i1 %cmp, label %if.then, label %if.end, !dbg !7576

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7577, !tbaa !1829
  %call = call %struct._object* @PyDict_Keys(%struct._object* %4), !dbg !7578
  store %struct._object* %call, %struct._object** %retval, !dbg !7579
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7579

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7580, !tbaa !1829
  %call1 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %5, %struct._Py_Identifier* @PyMapping_Keys.PyId_keys, i8* null), !dbg !7581
  store %struct._object* %call1, %struct._object** %keys, align 8, !dbg !7582, !tbaa !1829
  %6 = load %struct._object*, %struct._object** %keys, align 8, !dbg !7583, !tbaa !1829
  %cmp2 = icmp eq %struct._object* %6, null, !dbg !7585
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !7586

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !7587
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7587

if.end.4:                                         ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %keys, align 8, !dbg !7588, !tbaa !1829
  %call5 = call %struct._object* @PySequence_Fast(%struct._object* %7, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.69, i32 0, i32 0)), !dbg !7589
  store %struct._object* %call5, %struct._object** %fast, align 8, !dbg !7590, !tbaa !1829
  br label %do.body, !dbg !7591

do.body:                                          ; preds = %if.end.4
  %8 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7592
  call void @llvm.lifetime.start(i64 8, i8* %8) #2, !dbg !7592
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1194, metadata !1833), !dbg !7594
  %9 = load %struct._object*, %struct._object** %keys, align 8, !dbg !7595, !tbaa !1829
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8, !dbg !7594, !tbaa !1829
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7596, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0, !dbg !7598
  %11 = load i64, i64* %ob_refcnt, align 8, !dbg !7599, !tbaa !1853
  %dec = add i64 %11, -1, !dbg !7599
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !7599, !tbaa !1853
  %cmp6 = icmp ne i64 %dec, 0, !dbg !7600
  br i1 %cmp6, label %if.then.7, label %if.else, !dbg !7601

if.then.7:                                        ; preds = %do.body
  br label %if.end.9, !dbg !7602

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7604, !tbaa !1829
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1, !dbg !7606
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8, !dbg !7606, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4, !dbg !7607
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7607, !tbaa !2033
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7608, !tbaa !1829
  call void %14(%struct._object* %15), !dbg !7609
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.7
  %16 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7610
  call void @llvm.lifetime.end(i64 8, i8* %16) #2, !dbg !7610
  br label %do.cond, !dbg !7612

do.cond:                                          ; preds = %if.end.9
  br label %do.end, !dbg !7613

do.end:                                           ; preds = %do.cond
  %17 = load %struct._object*, %struct._object** %fast, align 8, !dbg !7615, !tbaa !1829
  store %struct._object* %17, %struct._object** %retval, !dbg !7616
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7616

cleanup:                                          ; preds = %do.end, %if.then.3, %if.then
  %18 = bitcast %struct._object** %fast to i8*, !dbg !7617
  call void @llvm.lifetime.end(i64 8, i8* %18) #2, !dbg !7617
  %19 = bitcast %struct._object** %keys to i8*, !dbg !7617
  call void @llvm.lifetime.end(i64 8, i8* %19) #2, !dbg !7617
  %20 = load %struct._object*, %struct._object** %retval, !dbg !7617
  ret %struct._object* %20, !dbg !7617
}

declare %struct._object* @PyDict_Keys(%struct._object*) #3

; Function Attrs: nounwind uwtable
define %struct._object* @_PyObject_CallMethodId(%struct._object* %o, %struct._Py_Identifier* %name, i8* %format, ...) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._Py_Identifier*, align 8
  %format.addr = alloca i8*, align 8
  %va = alloca [1 x %struct.__va_list_tag], align 16
  %func = alloca %struct._object*, align 8
  %retval1 = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1297, metadata !1833), !dbg !7618
  store %struct._Py_Identifier* %name, %struct._Py_Identifier** %name.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._Py_Identifier** %name.addr, metadata !1298, metadata !1833), !dbg !7619
  store i8* %format, i8** %format.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !1299, metadata !1833), !dbg !7620
  %0 = bitcast [1 x %struct.__va_list_tag]* %va to i8*, !dbg !7621
  call void @llvm.lifetime.start(i64 24, i8* %0) #2, !dbg !7621
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %va, metadata !1300, metadata !1833), !dbg !7622
  %1 = bitcast %struct._object** %func to i8*, !dbg !7623
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !7623
  call void @llvm.dbg.declare(metadata %struct._object** %func, metadata !1301, metadata !1833), !dbg !7624
  store %struct._object* null, %struct._object** %func, align 8, !dbg !7624, !tbaa !1829
  %2 = bitcast %struct._object** %retval1 to i8*, !dbg !7625
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !7625
  call void @llvm.dbg.declare(metadata %struct._object** %retval1, metadata !1302, metadata !1833), !dbg !7626
  store %struct._object* null, %struct._object** %retval1, align 8, !dbg !7626, !tbaa !1829
  %3 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7627, !tbaa !1829
  %cmp = icmp eq %struct._object* %3, null, !dbg !7629
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7630

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct._Py_Identifier*, %struct._Py_Identifier** %name.addr, align 8, !dbg !7631, !tbaa !1829
  %cmp2 = icmp eq %struct._Py_Identifier* %4, null, !dbg !7633
  br i1 %cmp2, label %if.then, label %if.end, !dbg !7634

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !7635
  store %struct._object* %call, %struct._object** %retval, !dbg !7636
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7636

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7637, !tbaa !1829
  %6 = load %struct._Py_Identifier*, %struct._Py_Identifier** %name.addr, align 8, !dbg !7638, !tbaa !1829
  %call3 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %5, %struct._Py_Identifier* %6), !dbg !7639
  store %struct._object* %call3, %struct._object** %func, align 8, !dbg !7640, !tbaa !1829
  %7 = load %struct._object*, %struct._object** %func, align 8, !dbg !7641, !tbaa !1829
  %cmp4 = icmp eq %struct._object* %7, null, !dbg !7643
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !7644

if.then.5:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !7645
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7645

if.end.6:                                         ; preds = %if.end
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !7647
  %arraydecay7 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !7648
  call void @llvm.va_start(i8* %arraydecay7), !dbg !7648
  %8 = load %struct._object*, %struct._object** %func, align 8, !dbg !7649, !tbaa !1829
  %9 = load i8*, i8** %format.addr, align 8, !dbg !7650, !tbaa !1829
  %arraydecay8 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !7651
  %call9 = call %struct._object* @callmethod(%struct._object* %8, i8* %9, %struct.__va_list_tag* %arraydecay8, i32 0), !dbg !7652
  store %struct._object* %call9, %struct._object** %retval1, align 8, !dbg !7653, !tbaa !1829
  %arraydecay10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !7654
  %arraydecay1011 = bitcast %struct.__va_list_tag* %arraydecay10 to i8*, !dbg !7655
  call void @llvm.va_end(i8* %arraydecay1011), !dbg !7655
  %10 = load %struct._object*, %struct._object** %retval1, align 8, !dbg !7656, !tbaa !1829
  store %struct._object* %10, %struct._object** %retval, !dbg !7657
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7657

cleanup:                                          ; preds = %if.end.6, %if.then.5, %if.then
  %11 = bitcast %struct._object** %retval1 to i8*, !dbg !7658
  call void @llvm.lifetime.end(i64 8, i8* %11) #2, !dbg !7658
  %12 = bitcast %struct._object** %func to i8*, !dbg !7658
  call void @llvm.lifetime.end(i64 8, i8* %12) #2, !dbg !7658
  %13 = bitcast [1 x %struct.__va_list_tag]* %va to i8*, !dbg !7658
  call void @llvm.lifetime.end(i64 24, i8* %13) #2, !dbg !7658
  %14 = load %struct._object*, %struct._object** %retval, !dbg !7658
  ret %struct._object* %14, !dbg !7658
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyMapping_Items(%struct._object* %o) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %items = alloca %struct._object*, align 8
  %fast = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1198, metadata !1833), !dbg !7659
  %0 = bitcast %struct._object** %items to i8*, !dbg !7660
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !7660
  call void @llvm.dbg.declare(metadata %struct._object** %items, metadata !1199, metadata !1833), !dbg !7661
  %1 = bitcast %struct._object** %fast to i8*, !dbg !7662
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !7662
  call void @llvm.dbg.declare(metadata %struct._object** %fast, metadata !1200, metadata !1833), !dbg !7663
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7664, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !7666
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7666, !tbaa !1845
  %cmp = icmp eq %struct._typeobject* %3, @PyDict_Type, !dbg !7667
  br i1 %cmp, label %if.then, label %if.end, !dbg !7668

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7669, !tbaa !1829
  %call = call %struct._object* @PyDict_Items(%struct._object* %4), !dbg !7670
  store %struct._object* %call, %struct._object** %retval, !dbg !7671
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7671

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7672, !tbaa !1829
  %call1 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %5, %struct._Py_Identifier* @PyMapping_Items.PyId_items, i8* null), !dbg !7673
  store %struct._object* %call1, %struct._object** %items, align 8, !dbg !7674, !tbaa !1829
  %6 = load %struct._object*, %struct._object** %items, align 8, !dbg !7675, !tbaa !1829
  %cmp2 = icmp eq %struct._object* %6, null, !dbg !7677
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !7678

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !7679
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7679

if.end.4:                                         ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %items, align 8, !dbg !7680, !tbaa !1829
  %call5 = call %struct._object* @PySequence_Fast(%struct._object* %7, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.71, i32 0, i32 0)), !dbg !7681
  store %struct._object* %call5, %struct._object** %fast, align 8, !dbg !7682, !tbaa !1829
  br label %do.body, !dbg !7683

do.body:                                          ; preds = %if.end.4
  %8 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7684
  call void @llvm.lifetime.start(i64 8, i8* %8) #2, !dbg !7684
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1201, metadata !1833), !dbg !7686
  %9 = load %struct._object*, %struct._object** %items, align 8, !dbg !7687, !tbaa !1829
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8, !dbg !7686, !tbaa !1829
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7688, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0, !dbg !7690
  %11 = load i64, i64* %ob_refcnt, align 8, !dbg !7691, !tbaa !1853
  %dec = add i64 %11, -1, !dbg !7691
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !7691, !tbaa !1853
  %cmp6 = icmp ne i64 %dec, 0, !dbg !7692
  br i1 %cmp6, label %if.then.7, label %if.else, !dbg !7693

if.then.7:                                        ; preds = %do.body
  br label %if.end.9, !dbg !7694

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7696, !tbaa !1829
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1, !dbg !7698
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8, !dbg !7698, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4, !dbg !7699
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7699, !tbaa !2033
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7700, !tbaa !1829
  call void %14(%struct._object* %15), !dbg !7701
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.7
  %16 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7702
  call void @llvm.lifetime.end(i64 8, i8* %16) #2, !dbg !7702
  br label %do.cond, !dbg !7704

do.cond:                                          ; preds = %if.end.9
  br label %do.end, !dbg !7705

do.end:                                           ; preds = %do.cond
  %17 = load %struct._object*, %struct._object** %fast, align 8, !dbg !7707, !tbaa !1829
  store %struct._object* %17, %struct._object** %retval, !dbg !7708
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7708

cleanup:                                          ; preds = %do.end, %if.then.3, %if.then
  %18 = bitcast %struct._object** %fast to i8*, !dbg !7709
  call void @llvm.lifetime.end(i64 8, i8* %18) #2, !dbg !7709
  %19 = bitcast %struct._object** %items to i8*, !dbg !7709
  call void @llvm.lifetime.end(i64 8, i8* %19) #2, !dbg !7709
  %20 = load %struct._object*, %struct._object** %retval, !dbg !7709
  ret %struct._object* %20, !dbg !7709
}

declare %struct._object* @PyDict_Items(%struct._object*) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PyMapping_Values(%struct._object* %o) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %values = alloca %struct._object*, align 8
  %fast = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1205, metadata !1833), !dbg !7710
  %0 = bitcast %struct._object** %values to i8*, !dbg !7711
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !7711
  call void @llvm.dbg.declare(metadata %struct._object** %values, metadata !1206, metadata !1833), !dbg !7712
  %1 = bitcast %struct._object** %fast to i8*, !dbg !7713
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !7713
  call void @llvm.dbg.declare(metadata %struct._object** %fast, metadata !1207, metadata !1833), !dbg !7714
  %2 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7715, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !7717
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7717, !tbaa !1845
  %cmp = icmp eq %struct._typeobject* %3, @PyDict_Type, !dbg !7718
  br i1 %cmp, label %if.then, label %if.end, !dbg !7719

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7720, !tbaa !1829
  %call = call %struct._object* @PyDict_Values(%struct._object* %4), !dbg !7721
  store %struct._object* %call, %struct._object** %retval, !dbg !7722
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7722

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7723, !tbaa !1829
  %call1 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %5, %struct._Py_Identifier* @PyMapping_Values.PyId_values, i8* null), !dbg !7724
  store %struct._object* %call1, %struct._object** %values, align 8, !dbg !7725, !tbaa !1829
  %6 = load %struct._object*, %struct._object** %values, align 8, !dbg !7726, !tbaa !1829
  %cmp2 = icmp eq %struct._object* %6, null, !dbg !7728
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !7729

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !7730
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7730

if.end.4:                                         ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %values, align 8, !dbg !7731, !tbaa !1829
  %call5 = call %struct._object* @PySequence_Fast(%struct._object* %7, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.73, i32 0, i32 0)), !dbg !7732
  store %struct._object* %call5, %struct._object** %fast, align 8, !dbg !7733, !tbaa !1829
  br label %do.body, !dbg !7734

do.body:                                          ; preds = %if.end.4
  %8 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7735
  call void @llvm.lifetime.start(i64 8, i8* %8) #2, !dbg !7735
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1208, metadata !1833), !dbg !7737
  %9 = load %struct._object*, %struct._object** %values, align 8, !dbg !7738, !tbaa !1829
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8, !dbg !7737, !tbaa !1829
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7739, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0, !dbg !7741
  %11 = load i64, i64* %ob_refcnt, align 8, !dbg !7742, !tbaa !1853
  %dec = add i64 %11, -1, !dbg !7742
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !7742, !tbaa !1853
  %cmp6 = icmp ne i64 %dec, 0, !dbg !7743
  br i1 %cmp6, label %if.then.7, label %if.else, !dbg !7744

if.then.7:                                        ; preds = %do.body
  br label %if.end.9, !dbg !7745

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7747, !tbaa !1829
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1, !dbg !7749
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8, !dbg !7749, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4, !dbg !7750
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !7750, !tbaa !2033
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !7751, !tbaa !1829
  call void %14(%struct._object* %15), !dbg !7752
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.7
  %16 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !7753
  call void @llvm.lifetime.end(i64 8, i8* %16) #2, !dbg !7753
  br label %do.cond, !dbg !7755

do.cond:                                          ; preds = %if.end.9
  br label %do.end, !dbg !7756

do.end:                                           ; preds = %do.cond
  %17 = load %struct._object*, %struct._object** %fast, align 8, !dbg !7758, !tbaa !1829
  store %struct._object* %17, %struct._object** %retval, !dbg !7759
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7759

cleanup:                                          ; preds = %do.end, %if.then.3, %if.then
  %18 = bitcast %struct._object** %fast to i8*, !dbg !7760
  call void @llvm.lifetime.end(i64 8, i8* %18) #2, !dbg !7760
  %19 = bitcast %struct._object** %values to i8*, !dbg !7760
  call void @llvm.lifetime.end(i64 8, i8* %19) #2, !dbg !7760
  %20 = load %struct._object*, %struct._object** %retval, !dbg !7760
  ret %struct._object* %20, !dbg !7760
}

declare %struct._object* @PyDict_Values(%struct._object*) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PyObject_CallObject(%struct._object* %o, %struct._object* %a) #0 {
entry:
  %o.addr = alloca %struct._object*, align 8
  %a.addr = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1212, metadata !1833), !dbg !7761
  store %struct._object* %a, %struct._object** %a.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %a.addr, metadata !1213, metadata !1833), !dbg !7762
  %0 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !7763, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %a.addr, align 8, !dbg !7764, !tbaa !1829
  %call = call %struct._object* @PyEval_CallObjectWithKeywords(%struct._object* %0, %struct._object* %1, %struct._object* null), !dbg !7765
  ret %struct._object* %call, !dbg !7766
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyObject_Call(%struct._object* %func, %struct._object* %arg, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %func.addr = alloca %struct._object*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %call = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %result = alloca %struct._object*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result1 = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %atomic_val10 = alloca %struct._Py_atomic_address*, align 8
  %result12 = alloca i8*, align 8
  %volatile_data14 = alloca i8**, align 8
  %order17 = alloca i32, align 4
  %tmp24 = alloca i8*, align 8
  %atomic_val30 = alloca %struct._Py_atomic_address*, align 8
  %result32 = alloca i8*, align 8
  %volatile_data34 = alloca i8**, align 8
  %order37 = alloca i32, align 4
  %tmp44 = alloca i8*, align 8
  store %struct._object* %func, %struct._object** %func.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %func.addr, metadata !1216, metadata !1833), !dbg !7767
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !1217, metadata !1833), !dbg !7768
  store %struct._object* %kw, %struct._object** %kw.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %kw.addr, metadata !1218, metadata !1833), !dbg !7769
  %0 = bitcast %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %call to i8*, !dbg !7770
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !7770
  call void @llvm.dbg.declare(metadata %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %call, metadata !1219, metadata !1833), !dbg !7771
  %1 = load %struct._object*, %struct._object** %func.addr, align 8, !dbg !7772, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !7773
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !7773, !tbaa !1845
  %tp_call = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 14, !dbg !7774
  %3 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_call, align 8, !dbg !7774, !tbaa !7775
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %3, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %call, align 8, !dbg !7776, !tbaa !1829
  %cmp = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %3, null, !dbg !7777
  br i1 %cmp, label %if.then, label %if.end.52, !dbg !7778

if.then:                                          ; preds = %entry
  %4 = bitcast %struct._object** %result to i8*, !dbg !7779
  call void @llvm.lifetime.start(i64 8, i8* %4) #2, !dbg !7779
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !1220, metadata !1833), !dbg !7780
  %5 = bitcast %struct._Py_atomic_address** %atomic_val to i8*, !dbg !7781
  call void @llvm.lifetime.start(i64 8, i8* %5) #2, !dbg !7781
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val, metadata !1223, metadata !1833), !dbg !7782
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8, !dbg !7782, !tbaa !1829
  %6 = bitcast i8** %result1 to i8*, !dbg !7783
  call void @llvm.lifetime.start(i64 8, i8* %6) #2, !dbg !7783
  call void @llvm.dbg.declare(metadata i8** %result1, metadata !1231, metadata !1833), !dbg !7784
  %7 = bitcast i8*** %volatile_data to i8*, !dbg !7785
  call void @llvm.lifetime.start(i64 8, i8* %7) #2, !dbg !7785
  call void @llvm.dbg.declare(metadata i8*** %volatile_data, metadata !1232, metadata !1833), !dbg !7786
  %8 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8, !dbg !7787, !tbaa !1829
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %8, i32 0, i32 0, !dbg !7788
  store i8** %_value, i8*** %volatile_data, align 8, !dbg !7786, !tbaa !1829
  %9 = bitcast i32* %order to i8*, !dbg !7789
  call void @llvm.lifetime.start(i64 4, i8* %9) #2, !dbg !7789
  call void @llvm.dbg.declare(metadata i32* %order, metadata !1235, metadata !1833), !dbg !7790
  store i32 0, i32* %order, align 4, !dbg !7790, !tbaa !3250
  %10 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8, !dbg !7791, !tbaa !1829
  %11 = bitcast %struct._Py_atomic_address* %10 to i8*, !dbg !7791
  %12 = load i32, i32* %order, align 4, !dbg !7792, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %11, i32 %12), !dbg !7793
  %13 = load i32, i32* %order, align 4, !dbg !7794, !tbaa !3250
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.then
  %.off = add i32 %13, -2
  %SwitchLeaf = icmp ule i32 %.off, 2
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  call void @_Py_atomic_thread_fence(i32 2), !dbg !7795
  br label %sw.epilog, !dbg !7800

NewDefault:                                       ; preds = %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  br label %sw.epilog, !dbg !7801

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %14 = load i8**, i8*** %volatile_data, align 8, !dbg !7803, !tbaa !1829
  %15 = load volatile i8*, i8** %14, align 8, !dbg !7806, !tbaa !1829
  store i8* %15, i8** %result1, align 8, !dbg !7807, !tbaa !1829
  %16 = load i32, i32* %order, align 4, !dbg !7808, !tbaa !3250
  br label %NodeBlock

NodeBlock:                                        ; preds = %sw.epilog
  %Pivot = icmp slt i32 %16, 3
  br i1 %Pivot, label %LeafBlock.2, label %LeafBlock.4

LeafBlock.4:                                      ; preds = %NodeBlock
  %.off.5 = add i32 %16, -3
  %SwitchLeaf6 = icmp ule i32 %.off.5, 1
  br i1 %SwitchLeaf6, label %sw.bb.2, label %NewDefault.1

LeafBlock.2:                                      ; preds = %NodeBlock
  %SwitchLeaf3 = icmp eq i32 %16, 1
  br i1 %SwitchLeaf3, label %sw.bb.2, label %NewDefault.1

sw.bb.2:                                          ; preds = %LeafBlock.4, %LeafBlock.2
  call void @_Py_atomic_signal_fence(i32 1), !dbg !7809
  br label %sw.epilog.4, !dbg !7814

NewDefault.1:                                     ; preds = %LeafBlock.4, %LeafBlock.2
  br label %sw.default.3

sw.default.3:                                     ; preds = %NewDefault.1
  br label %sw.epilog.4, !dbg !7815

sw.epilog.4:                                      ; preds = %sw.default.3, %sw.bb.2
  %17 = load i8*, i8** %result1, align 8, !dbg !7817, !tbaa !1829
  store i8* %17, i8** %tmp, !dbg !7820, !tbaa !1829
  %18 = bitcast i32* %order to i8*, !dbg !7821
  call void @llvm.lifetime.end(i64 4, i8* %18) #2, !dbg !7821
  %19 = bitcast i8*** %volatile_data to i8*, !dbg !7821
  call void @llvm.lifetime.end(i64 8, i8* %19) #2, !dbg !7821
  %20 = bitcast i8** %result1 to i8*, !dbg !7821
  call void @llvm.lifetime.end(i64 8, i8* %20) #2, !dbg !7821
  %21 = bitcast %struct._Py_atomic_address** %atomic_val to i8*, !dbg !7821
  call void @llvm.lifetime.end(i64 8, i8* %21) #2, !dbg !7821
  %22 = load i8*, i8** %tmp, !dbg !7822, !tbaa !1829
  %23 = bitcast i8* %22 to %struct._ts*, !dbg !7823
  %recursion_depth = getelementptr inbounds %struct._ts, %struct._ts* %23, i32 0, i32 4, !dbg !7824
  %24 = load i32, i32* %recursion_depth, align 4, !dbg !7825, !tbaa !7826
  %inc = add i32 %24, 1, !dbg !7825
  store i32 %inc, i32* %recursion_depth, align 4, !dbg !7825, !tbaa !7826
  %25 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !7828, !tbaa !2764
  %cmp5 = icmp sgt i32 %inc, %25, !dbg !7829
  br i1 %cmp5, label %land.lhs.true, label %if.end, !dbg !7830

land.lhs.true:                                    ; preds = %sw.epilog.4
  %call6 = call i32 @_Py_CheckRecursiveCall(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.74, i32 0, i32 0)), !dbg !7831
  %tobool = icmp ne i32 %call6, 0, !dbg !7831
  br i1 %tobool, label %if.then.7, label %if.end, !dbg !7833

if.then.7:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval, !dbg !7834
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7834

if.end:                                           ; preds = %land.lhs.true, %sw.epilog.4
  %26 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %call, align 8, !dbg !7835, !tbaa !1829
  %27 = load %struct._object*, %struct._object** %func.addr, align 8, !dbg !7836, !tbaa !1829
  %28 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !7837, !tbaa !1829
  %29 = load %struct._object*, %struct._object** %kw.addr, align 8, !dbg !7838, !tbaa !1829
  %call8 = call %struct._object* %26(%struct._object* %27, %struct._object* %28, %struct._object* %29), !dbg !7839
  store %struct._object* %call8, %struct._object** %result, align 8, !dbg !7840, !tbaa !1829
  br label %do.body, !dbg !7841

do.body:                                          ; preds = %if.end
  %30 = bitcast %struct._Py_atomic_address** %atomic_val10 to i8*, !dbg !7842
  call void @llvm.lifetime.start(i64 8, i8* %30) #2, !dbg !7842
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val10, metadata !1237, metadata !1833), !dbg !7844
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val10, align 8, !dbg !7844, !tbaa !1829
  %31 = bitcast i8** %result12 to i8*, !dbg !7845
  call void @llvm.lifetime.start(i64 8, i8* %31) #2, !dbg !7845
  call void @llvm.dbg.declare(metadata i8** %result12, metadata !1241, metadata !1833), !dbg !7846
  %32 = bitcast i8*** %volatile_data14 to i8*, !dbg !7847
  call void @llvm.lifetime.start(i64 8, i8* %32) #2, !dbg !7847
  call void @llvm.dbg.declare(metadata i8*** %volatile_data14, metadata !1242, metadata !1833), !dbg !7848
  %33 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val10, align 8, !dbg !7849, !tbaa !1829
  %_value15 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %33, i32 0, i32 0, !dbg !7850
  store i8** %_value15, i8*** %volatile_data14, align 8, !dbg !7848, !tbaa !1829
  %34 = bitcast i32* %order17 to i8*, !dbg !7851
  call void @llvm.lifetime.start(i64 4, i8* %34) #2, !dbg !7851
  call void @llvm.dbg.declare(metadata i32* %order17, metadata !1243, metadata !1833), !dbg !7852
  store i32 0, i32* %order17, align 4, !dbg !7852, !tbaa !3250
  %35 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val10, align 8, !dbg !7853, !tbaa !1829
  %36 = bitcast %struct._Py_atomic_address* %35 to i8*, !dbg !7853
  %37 = load i32, i32* %order17, align 4, !dbg !7854, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %36, i32 %37), !dbg !7855
  %38 = load i32, i32* %order17, align 4, !dbg !7856, !tbaa !3250
  br label %LeafBlock.8

LeafBlock.8:                                      ; preds = %do.body
  %.off.9 = add i32 %38, -2
  %SwitchLeaf10 = icmp ule i32 %.off.9, 2
  br i1 %SwitchLeaf10, label %sw.bb.18, label %NewDefault.7

sw.bb.18:                                         ; preds = %LeafBlock.8
  call void @_Py_atomic_thread_fence(i32 2), !dbg !7857
  br label %sw.epilog.20, !dbg !7862

NewDefault.7:                                     ; preds = %LeafBlock.8
  br label %sw.default.19

sw.default.19:                                    ; preds = %NewDefault.7
  br label %sw.epilog.20, !dbg !7863

sw.epilog.20:                                     ; preds = %sw.default.19, %sw.bb.18
  %39 = load i8**, i8*** %volatile_data14, align 8, !dbg !7865, !tbaa !1829
  %40 = load volatile i8*, i8** %39, align 8, !dbg !7868, !tbaa !1829
  store i8* %40, i8** %result12, align 8, !dbg !7869, !tbaa !1829
  %41 = load i32, i32* %order17, align 4, !dbg !7870, !tbaa !3250
  br label %NodeBlock.17

NodeBlock.17:                                     ; preds = %sw.epilog.20
  %Pivot.18 = icmp slt i32 %41, 3
  br i1 %Pivot.18, label %LeafBlock.12, label %LeafBlock.14

LeafBlock.14:                                     ; preds = %NodeBlock.17
  %.off.15 = add i32 %41, -3
  %SwitchLeaf16 = icmp ule i32 %.off.15, 1
  br i1 %SwitchLeaf16, label %sw.bb.21, label %NewDefault.11

LeafBlock.12:                                     ; preds = %NodeBlock.17
  %SwitchLeaf13 = icmp eq i32 %41, 1
  br i1 %SwitchLeaf13, label %sw.bb.21, label %NewDefault.11

sw.bb.21:                                         ; preds = %LeafBlock.14, %LeafBlock.12
  call void @_Py_atomic_signal_fence(i32 1), !dbg !7871
  br label %sw.epilog.23, !dbg !7876

NewDefault.11:                                    ; preds = %LeafBlock.14, %LeafBlock.12
  br label %sw.default.22

sw.default.22:                                    ; preds = %NewDefault.11
  br label %sw.epilog.23, !dbg !7877

sw.epilog.23:                                     ; preds = %sw.default.22, %sw.bb.21
  %42 = load i8*, i8** %result12, align 8, !dbg !7879, !tbaa !1829
  store i8* %42, i8** %tmp24, !dbg !7882, !tbaa !1829
  %43 = bitcast i32* %order17 to i8*, !dbg !7883
  call void @llvm.lifetime.end(i64 4, i8* %43) #2, !dbg !7883
  %44 = bitcast i8*** %volatile_data14 to i8*, !dbg !7883
  call void @llvm.lifetime.end(i64 8, i8* %44) #2, !dbg !7883
  %45 = bitcast i8** %result12 to i8*, !dbg !7883
  call void @llvm.lifetime.end(i64 8, i8* %45) #2, !dbg !7883
  %46 = bitcast %struct._Py_atomic_address** %atomic_val10 to i8*, !dbg !7883
  call void @llvm.lifetime.end(i64 8, i8* %46) #2, !dbg !7883
  %47 = load i8*, i8** %tmp24, !dbg !7884, !tbaa !1829
  %48 = bitcast i8* %47 to %struct._ts*, !dbg !7885
  %recursion_depth25 = getelementptr inbounds %struct._ts, %struct._ts* %48, i32 0, i32 4, !dbg !7886
  %49 = load i32, i32* %recursion_depth25, align 4, !dbg !7887, !tbaa !7826
  %dec = add i32 %49, -1, !dbg !7887
  store i32 %dec, i32* %recursion_depth25, align 4, !dbg !7887, !tbaa !7826
  %50 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !7888, !tbaa !2764
  %cmp26 = icmp sgt i32 %50, 100, !dbg !7889
  br i1 %cmp26, label %cond.true, label %cond.false, !dbg !7890

cond.true:                                        ; preds = %sw.epilog.23
  %51 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !7891, !tbaa !2764
  %sub = sub i32 %51, 50, !dbg !7893
  br label %cond.end, !dbg !7890

cond.false:                                       ; preds = %sw.epilog.23
  %52 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !7894, !tbaa !2764
  %shr = ashr i32 %52, 2, !dbg !7896
  %mul = mul i32 3, %shr, !dbg !7897
  br label %cond.end, !dbg !7890

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %mul, %cond.false ], !dbg !7890
  %cmp27 = icmp slt i32 %dec, %cond, !dbg !7898
  br i1 %cmp27, label %if.then.28, label %if.end.45, !dbg !7901

if.then.28:                                       ; preds = %cond.end
  %53 = bitcast %struct._Py_atomic_address** %atomic_val30 to i8*, !dbg !7902
  call void @llvm.lifetime.start(i64 8, i8* %53) #2, !dbg !7902
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val30, metadata !1244, metadata !1833), !dbg !7904
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val30, align 8, !dbg !7904, !tbaa !1829
  %54 = bitcast i8** %result32 to i8*, !dbg !7905
  call void @llvm.lifetime.start(i64 8, i8* %54) #2, !dbg !7905
  call void @llvm.dbg.declare(metadata i8** %result32, metadata !1246, metadata !1833), !dbg !7906
  %55 = bitcast i8*** %volatile_data34 to i8*, !dbg !7907
  call void @llvm.lifetime.start(i64 8, i8* %55) #2, !dbg !7907
  call void @llvm.dbg.declare(metadata i8*** %volatile_data34, metadata !1247, metadata !1833), !dbg !7908
  %56 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val30, align 8, !dbg !7909, !tbaa !1829
  %_value35 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %56, i32 0, i32 0, !dbg !7910
  store i8** %_value35, i8*** %volatile_data34, align 8, !dbg !7908, !tbaa !1829
  %57 = bitcast i32* %order37 to i8*, !dbg !7911
  call void @llvm.lifetime.start(i64 4, i8* %57) #2, !dbg !7911
  call void @llvm.dbg.declare(metadata i32* %order37, metadata !1248, metadata !1833), !dbg !7912
  store i32 0, i32* %order37, align 4, !dbg !7912, !tbaa !3250
  %58 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val30, align 8, !dbg !7913, !tbaa !1829
  %59 = bitcast %struct._Py_atomic_address* %58 to i8*, !dbg !7913
  %60 = load i32, i32* %order37, align 4, !dbg !7914, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %59, i32 %60), !dbg !7915
  %61 = load i32, i32* %order37, align 4, !dbg !7916, !tbaa !3250
  br label %LeafBlock.20

LeafBlock.20:                                     ; preds = %if.then.28
  %.off.21 = add i32 %61, -2
  %SwitchLeaf22 = icmp ule i32 %.off.21, 2
  br i1 %SwitchLeaf22, label %sw.bb.38, label %NewDefault.19

sw.bb.38:                                         ; preds = %LeafBlock.20
  call void @_Py_atomic_thread_fence(i32 2), !dbg !7917
  br label %sw.epilog.40, !dbg !7922

NewDefault.19:                                    ; preds = %LeafBlock.20
  br label %sw.default.39

sw.default.39:                                    ; preds = %NewDefault.19
  br label %sw.epilog.40, !dbg !7923

sw.epilog.40:                                     ; preds = %sw.default.39, %sw.bb.38
  %62 = load i8**, i8*** %volatile_data34, align 8, !dbg !7925, !tbaa !1829
  %63 = load volatile i8*, i8** %62, align 8, !dbg !7928, !tbaa !1829
  store i8* %63, i8** %result32, align 8, !dbg !7929, !tbaa !1829
  %64 = load i32, i32* %order37, align 4, !dbg !7930, !tbaa !3250
  br label %NodeBlock.29

NodeBlock.29:                                     ; preds = %sw.epilog.40
  %Pivot.30 = icmp slt i32 %64, 3
  br i1 %Pivot.30, label %LeafBlock.24, label %LeafBlock.26

LeafBlock.26:                                     ; preds = %NodeBlock.29
  %.off.27 = add i32 %64, -3
  %SwitchLeaf28 = icmp ule i32 %.off.27, 1
  br i1 %SwitchLeaf28, label %sw.bb.41, label %NewDefault.23

LeafBlock.24:                                     ; preds = %NodeBlock.29
  %SwitchLeaf25 = icmp eq i32 %64, 1
  br i1 %SwitchLeaf25, label %sw.bb.41, label %NewDefault.23

sw.bb.41:                                         ; preds = %LeafBlock.26, %LeafBlock.24
  call void @_Py_atomic_signal_fence(i32 1), !dbg !7931
  br label %sw.epilog.43, !dbg !7936

NewDefault.23:                                    ; preds = %LeafBlock.26, %LeafBlock.24
  br label %sw.default.42

sw.default.42:                                    ; preds = %NewDefault.23
  br label %sw.epilog.43, !dbg !7937

sw.epilog.43:                                     ; preds = %sw.default.42, %sw.bb.41
  %65 = load i8*, i8** %result32, align 8, !dbg !7939, !tbaa !1829
  store i8* %65, i8** %tmp44, !dbg !7942, !tbaa !1829
  %66 = bitcast i32* %order37 to i8*, !dbg !7943
  call void @llvm.lifetime.end(i64 4, i8* %66) #2, !dbg !7943
  %67 = bitcast i8*** %volatile_data34 to i8*, !dbg !7943
  call void @llvm.lifetime.end(i64 8, i8* %67) #2, !dbg !7943
  %68 = bitcast i8** %result32 to i8*, !dbg !7943
  call void @llvm.lifetime.end(i64 8, i8* %68) #2, !dbg !7943
  %69 = bitcast %struct._Py_atomic_address** %atomic_val30 to i8*, !dbg !7943
  call void @llvm.lifetime.end(i64 8, i8* %69) #2, !dbg !7943
  %70 = load i8*, i8** %tmp44, !dbg !7944, !tbaa !1829
  %71 = bitcast i8* %70 to %struct._ts*, !dbg !7945
  %overflowed = getelementptr inbounds %struct._ts, %struct._ts* %71, i32 0, i32 5, !dbg !7946
  store i8 0, i8* %overflowed, align 1, !dbg !7947, !tbaa !7948
  br label %if.end.45, !dbg !7949

if.end.45:                                        ; preds = %sw.epilog.43, %cond.end
  br label %do.cond, !dbg !7950

do.cond:                                          ; preds = %if.end.45
  br label %do.end, !dbg !7953

do.end:                                           ; preds = %do.cond
  %72 = load %struct._object*, %struct._object** %result, align 8, !dbg !7955, !tbaa !1829
  %cmp46 = icmp eq %struct._object* %72, null, !dbg !7957
  br i1 %cmp46, label %land.lhs.true.47, label %if.end.51, !dbg !7958

land.lhs.true.47:                                 ; preds = %do.end
  %call48 = call %struct._object* @PyErr_Occurred(), !dbg !7959
  %tobool49 = icmp ne %struct._object* %call48, null, !dbg !7959
  br i1 %tobool49, label %if.end.51, label %if.then.50, !dbg !7961

if.then.50:                                       ; preds = %land.lhs.true.47
  %73 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8, !dbg !7962, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %73, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.75, i32 0, i32 0)), !dbg !7964
  br label %if.end.51, !dbg !7965

if.end.51:                                        ; preds = %if.then.50, %land.lhs.true.47, %do.end
  %74 = load %struct._object*, %struct._object** %result, align 8, !dbg !7966, !tbaa !1829
  store %struct._object* %74, %struct._object** %retval, !dbg !7967
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7967

cleanup:                                          ; preds = %if.end.51, %if.then.7
  %75 = bitcast %struct._object** %result to i8*, !dbg !7968
  call void @llvm.lifetime.end(i64 8, i8* %75) #2, !dbg !7968
  br label %cleanup.55

if.end.52:                                        ; preds = %entry
  %76 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !7969, !tbaa !1829
  %77 = load %struct._object*, %struct._object** %func.addr, align 8, !dbg !7970, !tbaa !1829
  %ob_type53 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 1, !dbg !7971
  %78 = load %struct._typeobject*, %struct._typeobject** %ob_type53, align 8, !dbg !7971, !tbaa !1845
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %78, i32 0, i32 1, !dbg !7972
  %79 = load i8*, i8** %tp_name, align 8, !dbg !7972, !tbaa !2094
  %call54 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %76, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.76, i32 0, i32 0), i8* %79), !dbg !7973
  store %struct._object* null, %struct._object** %retval, !dbg !7974
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.55, !dbg !7974

cleanup.55:                                       ; preds = %if.end.52, %cleanup
  %80 = bitcast %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %call to i8*, !dbg !7975
  call void @llvm.lifetime.end(i64 8, i8* %80) #2, !dbg !7975
  %81 = load %struct._object*, %struct._object** %retval, !dbg !7975
  ret %struct._object* %81, !dbg !7975
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_ANNOTATE_MEMORY_ORDER(i8* %address, i32 %order) #4 {
entry:
  %address.addr = alloca i8*, align 8
  %order.addr = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %address.addr, metadata !1689, metadata !1833), !dbg !7976
  store i32 %order, i32* %order.addr, align 4, !tbaa !3250
  call void @llvm.dbg.declare(metadata i32* %order.addr, metadata !1690, metadata !1833), !dbg !7977
  %0 = load i8*, i8** %address.addr, align 8, !dbg !7978, !tbaa !1829
  %1 = load i32, i32* %order.addr, align 4, !dbg !7979, !tbaa !3250
  br label %NodeBlock

NodeBlock:                                        ; preds = %entry
  %Pivot = icmp slt i32 %1, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %.off = add i32 %1, -2
  %SwitchLeaf2 = icmp ule i32 %.off, 2
  br i1 %SwitchLeaf2, label %sw.bb, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp ule i32 %1, 1
  br i1 %SwitchLeaf, label %sw.bb.1, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock.1
  br label %sw.epilog, !dbg !7980

sw.bb.1:                                          ; preds = %LeafBlock
  br label %sw.epilog, !dbg !7982

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %sw.bb.1, %sw.bb
  %2 = load i32, i32* %order.addr, align 4, !dbg !7983, !tbaa !3250
  br label %NodeBlock.13

NodeBlock.13:                                     ; preds = %sw.epilog
  %Pivot.14 = icmp slt i32 %2, 2
  br i1 %Pivot.14, label %NodeBlock.6, label %NodeBlock.11

NodeBlock.11:                                     ; preds = %NodeBlock.13
  %Pivot.12 = icmp slt i32 %2, 3
  br i1 %Pivot.12, label %sw.bb.3, label %LeafBlock.8

LeafBlock.8:                                      ; preds = %NodeBlock.11
  %.off.9 = add i32 %2, -3
  %SwitchLeaf10 = icmp ule i32 %.off.9, 1
  br i1 %SwitchLeaf10, label %sw.bb.2, label %NewDefault.3

NodeBlock.6:                                      ; preds = %NodeBlock.13
  %Pivot.7 = icmp slt i32 %2, 1
  br i1 %Pivot.7, label %LeafBlock.4, label %sw.bb.2

LeafBlock.4:                                      ; preds = %NodeBlock.6
  %SwitchLeaf5 = icmp eq i32 %2, 0
  br i1 %SwitchLeaf5, label %sw.bb.3, label %NewDefault.3

sw.bb.2:                                          ; preds = %LeafBlock.8, %NodeBlock.6
  br label %sw.epilog.4, !dbg !7984

sw.bb.3:                                          ; preds = %NodeBlock.11, %LeafBlock.4
  br label %sw.epilog.4, !dbg !7986

NewDefault.3:                                     ; preds = %LeafBlock.8, %LeafBlock.4
  br label %sw.epilog.4

sw.epilog.4:                                      ; preds = %NewDefault.3, %sw.bb.3, %sw.bb.2
  ret void, !dbg !7987
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_atomic_thread_fence(i32 %order) #4 {
entry:
  %order.addr = alloca i32, align 4
  store i32 %order, i32* %order.addr, align 4, !tbaa !3250
  call void @llvm.dbg.declare(metadata i32* %order.addr, metadata !1695, metadata !1833), !dbg !7988
  %0 = load i32, i32* %order.addr, align 4, !dbg !7989, !tbaa !3250
  %cmp = icmp ne i32 %0, 0, !dbg !7991
  br i1 %cmp, label %if.then, label %if.end, !dbg !7992

if.then:                                          ; preds = %entry
  call void asm sideeffect "mfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #2, !dbg !7993, !srcloc !7994
  br label %if.end, !dbg !7993

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !7995
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_atomic_signal_fence(i32 %order) #4 {
entry:
  %order.addr = alloca i32, align 4
  store i32 %order, i32* %order.addr, align 4, !tbaa !3250
  call void @llvm.dbg.declare(metadata i32* %order.addr, metadata !1698, metadata !1833), !dbg !7996
  %0 = load i32, i32* %order.addr, align 4, !dbg !7997, !tbaa !3250
  %cmp = icmp ne i32 %0, 0, !dbg !7999
  br i1 %cmp, label %if.then, label %if.end, !dbg !8000

if.then:                                          ; preds = %entry
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #2, !dbg !8001, !srcloc !8002
  br label %if.end, !dbg !8001

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8003
}

declare i32 @_Py_CheckRecursiveCall(i8*) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PyObject_CallFunction(%struct._object* %callable, i8* %format, ...) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %callable.addr = alloca %struct._object*, align 8
  %format.addr = alloca i8*, align 8
  %va = alloca [1 x %struct.__va_list_tag], align 16
  %args = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %callable, %struct._object** %callable.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %callable.addr, metadata !1253, metadata !1833), !dbg !8004
  store i8* %format, i8** %format.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !1254, metadata !1833), !dbg !8005
  %0 = bitcast [1 x %struct.__va_list_tag]* %va to i8*, !dbg !8006
  call void @llvm.lifetime.start(i64 24, i8* %0) #2, !dbg !8006
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %va, metadata !1255, metadata !1833), !dbg !8007
  %1 = bitcast %struct._object** %args to i8*, !dbg !8008
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !8008
  call void @llvm.dbg.declare(metadata %struct._object** %args, metadata !1268, metadata !1833), !dbg !8009
  %2 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8010, !tbaa !1829
  %cmp = icmp eq %struct._object* %2, null, !dbg !8012
  br i1 %cmp, label %if.then, label %if.end, !dbg !8013

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !8014
  store %struct._object* %call, %struct._object** %retval, !dbg !8015
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8015

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %format.addr, align 8, !dbg !8016, !tbaa !1829
  %tobool = icmp ne i8* %3, null, !dbg !8016
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8018

land.lhs.true:                                    ; preds = %if.end
  %4 = load i8*, i8** %format.addr, align 8, !dbg !8019, !tbaa !1829
  %5 = load i8, i8* %4, align 1, !dbg !8021, !tbaa !3250
  %conv = sext i8 %5 to i32, !dbg !8021
  %tobool1 = icmp ne i32 %conv, 0, !dbg !8021
  br i1 %tobool1, label %if.then.2, label %if.else, !dbg !8022

if.then.2:                                        ; preds = %land.lhs.true
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8023
  %arraydecay3 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !8025
  call void @llvm.va_start(i8* %arraydecay3), !dbg !8025
  %6 = load i8*, i8** %format.addr, align 8, !dbg !8026, !tbaa !1829
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8027
  %call5 = call %struct._object* @Py_VaBuildValue(i8* %6, %struct.__va_list_tag* %arraydecay4), !dbg !8028
  store %struct._object* %call5, %struct._object** %args, align 8, !dbg !8029, !tbaa !1829
  %arraydecay6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8030
  %arraydecay67 = bitcast %struct.__va_list_tag* %arraydecay6 to i8*, !dbg !8031
  call void @llvm.va_end(i8* %arraydecay67), !dbg !8031
  br label %if.end.9, !dbg !8032

if.else:                                          ; preds = %land.lhs.true, %if.end
  %call8 = call %struct._object* @PyTuple_New(i64 0), !dbg !8033
  store %struct._object* %call8, %struct._object** %args, align 8, !dbg !8034, !tbaa !1829
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.2
  %7 = load %struct._object*, %struct._object** %args, align 8, !dbg !8035, !tbaa !1829
  %cmp10 = icmp eq %struct._object* %7, null, !dbg !8037
  br i1 %cmp10, label %if.then.12, label %if.end.13, !dbg !8038

if.then.12:                                       ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval, !dbg !8039
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8039

if.end.13:                                        ; preds = %if.end.9
  %8 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8040, !tbaa !1829
  %9 = load %struct._object*, %struct._object** %args, align 8, !dbg !8041, !tbaa !1829
  %call14 = call %struct._object* @call_function_tail(%struct._object* %8, %struct._object* %9), !dbg !8042
  store %struct._object* %call14, %struct._object** %retval, !dbg !8043
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8043

cleanup:                                          ; preds = %if.end.13, %if.then.12, %if.then
  %10 = bitcast %struct._object** %args to i8*, !dbg !8044
  call void @llvm.lifetime.end(i64 8, i8* %10) #2, !dbg !8044
  %11 = bitcast [1 x %struct.__va_list_tag]* %va to i8*, !dbg !8044
  call void @llvm.lifetime.end(i64 24, i8* %11) #2, !dbg !8044
  %12 = load %struct._object*, %struct._object** %retval, !dbg !8044
  ret %struct._object* %12, !dbg !8044
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #2

declare %struct._object* @Py_VaBuildValue(i8*, %struct.__va_list_tag*) #3

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @call_function_tail(%struct._object* %callable, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %callable.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %retval1 = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %a = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp14 = alloca %struct._object*, align 8
  store %struct._object* %callable, %struct._object** %callable.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %callable.addr, metadata !1701, metadata !1833), !dbg !8045
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1702, metadata !1833), !dbg !8046
  %0 = bitcast %struct._object** %retval1 to i8*, !dbg !8047
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !8047
  call void @llvm.dbg.declare(metadata %struct._object** %retval1, metadata !1703, metadata !1833), !dbg !8048
  %1 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8049, !tbaa !1829
  %cmp = icmp eq %struct._object* %1, null, !dbg !8051
  br i1 %cmp, label %if.then, label %if.end, !dbg !8052

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8053
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.25, !dbg !8053

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8054, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !8055
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8055, !tbaa !1845
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19, !dbg !8056
  %4 = load i64, i64* %tp_flags, align 8, !dbg !8056, !tbaa !2086
  %and = and i64 %4, 67108864, !dbg !8057
  %cmp2 = icmp ne i64 %and, 0, !dbg !8058
  br i1 %cmp2, label %if.end.11, label %if.then.3, !dbg !8059

if.then.3:                                        ; preds = %if.end
  %5 = bitcast %struct._object** %a to i8*, !dbg !8060
  call void @llvm.lifetime.start(i64 8, i8* %5) #2, !dbg !8060
  call void @llvm.dbg.declare(metadata %struct._object** %a, metadata !1704, metadata !1833), !dbg !8061
  %call = call %struct._object* @PyTuple_New(i64 1), !dbg !8062
  store %struct._object* %call, %struct._object** %a, align 8, !dbg !8063, !tbaa !1829
  %6 = load %struct._object*, %struct._object** %a, align 8, !dbg !8064, !tbaa !1829
  %cmp4 = icmp eq %struct._object* %6, null, !dbg !8065
  br i1 %cmp4, label %if.then.5, label %if.end.10, !dbg !8066

if.then.5:                                        ; preds = %if.then.3
  br label %do.body, !dbg !8067

do.body:                                          ; preds = %if.then.5
  %7 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8068
  call void @llvm.lifetime.start(i64 8, i8* %7) #2, !dbg !8068
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1707, metadata !1833), !dbg !8070
  %8 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8071, !tbaa !1829
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8, !dbg !8070, !tbaa !1829
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8072, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0, !dbg !8074
  %10 = load i64, i64* %ob_refcnt, align 8, !dbg !8075, !tbaa !1853
  %dec = add i64 %10, -1, !dbg !8075
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !8075, !tbaa !1853
  %cmp6 = icmp ne i64 %dec, 0, !dbg !8076
  br i1 %cmp6, label %if.then.7, label %if.else, !dbg !8077

if.then.7:                                        ; preds = %do.body
  br label %if.end.9, !dbg !8078

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8080, !tbaa !1829
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1, !dbg !8082
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8, !dbg !8082, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4, !dbg !8083
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !8083, !tbaa !2033
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8084, !tbaa !1829
  call void %13(%struct._object* %14), !dbg !8085
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.7
  %15 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8086
  call void @llvm.lifetime.end(i64 8, i8* %15) #2, !dbg !8086
  br label %do.cond, !dbg !8088

do.cond:                                          ; preds = %if.end.9
  br label %do.end, !dbg !8089

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !8091
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8091

if.end.10:                                        ; preds = %if.then.3
  %16 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8092, !tbaa !1829
  %17 = load %struct._object*, %struct._object** %a, align 8, !dbg !8093, !tbaa !1829
  %18 = bitcast %struct._object* %17 to %struct.PyTupleObject*, !dbg !8094
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %18, i32 0, i32 1, !dbg !8095
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !8096
  store %struct._object* %16, %struct._object** %arrayidx, align 8, !dbg !8097, !tbaa !1829
  %19 = load %struct._object*, %struct._object** %a, align 8, !dbg !8098, !tbaa !1829
  store %struct._object* %19, %struct._object** %args.addr, align 8, !dbg !8099, !tbaa !1829
  store i32 0, i32* %cleanup.dest.slot, !dbg !8100
  br label %cleanup, !dbg !8100

cleanup:                                          ; preds = %if.end.10, %do.end
  %20 = bitcast %struct._object** %a to i8*, !dbg !8101
  call void @llvm.lifetime.end(i64 8, i8* %20) #2, !dbg !8101
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.11, !dbg !8103

if.end.11:                                        ; preds = %cleanup.cont, %if.end
  %21 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8104, !tbaa !1829
  %22 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8105, !tbaa !1829
  %call12 = call %struct._object* @PyObject_Call(%struct._object* %21, %struct._object* %22, %struct._object* null), !dbg !8106
  store %struct._object* %call12, %struct._object** %retval1, align 8, !dbg !8107, !tbaa !1829
  br label %do.body.13, !dbg !8108

do.body.13:                                       ; preds = %if.end.11
  %23 = bitcast %struct._object** %_py_decref_tmp14 to i8*, !dbg !8109
  call void @llvm.lifetime.start(i64 8, i8* %23) #2, !dbg !8109
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp14, metadata !1711, metadata !1833), !dbg !8111
  %24 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8112, !tbaa !1829
  store %struct._object* %24, %struct._object** %_py_decref_tmp14, align 8, !dbg !8111, !tbaa !1829
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8, !dbg !8113, !tbaa !1829
  %ob_refcnt15 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0, !dbg !8115
  %26 = load i64, i64* %ob_refcnt15, align 8, !dbg !8116, !tbaa !1853
  %dec16 = add i64 %26, -1, !dbg !8116
  store i64 %dec16, i64* %ob_refcnt15, align 8, !dbg !8116, !tbaa !1853
  %cmp17 = icmp ne i64 %dec16, 0, !dbg !8117
  br i1 %cmp17, label %if.then.18, label %if.else.19, !dbg !8118

if.then.18:                                       ; preds = %do.body.13
  br label %if.end.22, !dbg !8119

if.else.19:                                       ; preds = %do.body.13
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8, !dbg !8121, !tbaa !1829
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1, !dbg !8123
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8, !dbg !8123, !tbaa !1845
  %tp_dealloc21 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4, !dbg !8124
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc21, align 8, !dbg !8124, !tbaa !2033
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8, !dbg !8125, !tbaa !1829
  call void %29(%struct._object* %30), !dbg !8126
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.19, %if.then.18
  %31 = bitcast %struct._object** %_py_decref_tmp14 to i8*, !dbg !8127
  call void @llvm.lifetime.end(i64 8, i8* %31) #2, !dbg !8127
  br label %do.cond.23, !dbg !8129

do.cond.23:                                       ; preds = %if.end.22
  br label %do.end.24, !dbg !8130

do.end.24:                                        ; preds = %do.cond.23
  %32 = load %struct._object*, %struct._object** %retval1, align 8, !dbg !8132, !tbaa !1829
  store %struct._object* %32, %struct._object** %retval, !dbg !8133
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.25, !dbg !8133

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.25

cleanup.25:                                       ; preds = %NewDefault, %do.end.24, %if.then
  %33 = bitcast %struct._object** %retval1 to i8*, !dbg !8134
  call void @llvm.lifetime.end(i64 8, i8* %33) #2, !dbg !8134
  %34 = load %struct._object*, %struct._object** %retval, !dbg !8134
  ret %struct._object* %34, !dbg !8134
}

; Function Attrs: nounwind uwtable
define %struct._object* @_PyObject_CallFunction_SizeT(%struct._object* %callable, i8* %format, ...) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %callable.addr = alloca %struct._object*, align 8
  %format.addr = alloca i8*, align 8
  %va = alloca [1 x %struct.__va_list_tag], align 16
  %args = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %callable, %struct._object** %callable.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %callable.addr, metadata !1271, metadata !1833), !dbg !8135
  store i8* %format, i8** %format.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !1272, metadata !1833), !dbg !8136
  %0 = bitcast [1 x %struct.__va_list_tag]* %va to i8*, !dbg !8137
  call void @llvm.lifetime.start(i64 24, i8* %0) #2, !dbg !8137
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %va, metadata !1273, metadata !1833), !dbg !8138
  %1 = bitcast %struct._object** %args to i8*, !dbg !8139
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !8139
  call void @llvm.dbg.declare(metadata %struct._object** %args, metadata !1274, metadata !1833), !dbg !8140
  %2 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8141, !tbaa !1829
  %cmp = icmp eq %struct._object* %2, null, !dbg !8143
  br i1 %cmp, label %if.then, label %if.end, !dbg !8144

if.then:                                          ; preds = %entry
  %call = call %struct._object* @null_error(), !dbg !8145
  store %struct._object* %call, %struct._object** %retval, !dbg !8146
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8146

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %format.addr, align 8, !dbg !8147, !tbaa !1829
  %tobool = icmp ne i8* %3, null, !dbg !8147
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8149

land.lhs.true:                                    ; preds = %if.end
  %4 = load i8*, i8** %format.addr, align 8, !dbg !8150, !tbaa !1829
  %5 = load i8, i8* %4, align 1, !dbg !8152, !tbaa !3250
  %conv = sext i8 %5 to i32, !dbg !8152
  %tobool1 = icmp ne i32 %conv, 0, !dbg !8152
  br i1 %tobool1, label %if.then.2, label %if.else, !dbg !8153

if.then.2:                                        ; preds = %land.lhs.true
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8154
  %arraydecay3 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !8156
  call void @llvm.va_start(i8* %arraydecay3), !dbg !8156
  %6 = load i8*, i8** %format.addr, align 8, !dbg !8157, !tbaa !1829
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8158
  %call5 = call %struct._object* @_Py_VaBuildValue_SizeT(i8* %6, %struct.__va_list_tag* %arraydecay4), !dbg !8159
  store %struct._object* %call5, %struct._object** %args, align 8, !dbg !8160, !tbaa !1829
  %arraydecay6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8161
  %arraydecay67 = bitcast %struct.__va_list_tag* %arraydecay6 to i8*, !dbg !8162
  call void @llvm.va_end(i8* %arraydecay67), !dbg !8162
  br label %if.end.9, !dbg !8163

if.else:                                          ; preds = %land.lhs.true, %if.end
  %call8 = call %struct._object* @PyTuple_New(i64 0), !dbg !8164
  store %struct._object* %call8, %struct._object** %args, align 8, !dbg !8165, !tbaa !1829
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.2
  %7 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8166, !tbaa !1829
  %8 = load %struct._object*, %struct._object** %args, align 8, !dbg !8167, !tbaa !1829
  %call10 = call %struct._object* @call_function_tail(%struct._object* %7, %struct._object* %8), !dbg !8168
  store %struct._object* %call10, %struct._object** %retval, !dbg !8169
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8169

cleanup:                                          ; preds = %if.end.9, %if.then
  %9 = bitcast %struct._object** %args to i8*, !dbg !8170
  call void @llvm.lifetime.end(i64 8, i8* %9) #2, !dbg !8170
  %10 = bitcast [1 x %struct.__va_list_tag]* %va to i8*, !dbg !8170
  call void @llvm.lifetime.end(i64 24, i8* %10) #2, !dbg !8170
  %11 = load %struct._object*, %struct._object** %retval, !dbg !8170
  ret %struct._object* %11, !dbg !8170
}

declare %struct._object* @_Py_VaBuildValue_SizeT(i8*, %struct.__va_list_tag*) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PyObject_CallMethod(%struct._object* %o, i8* %name, i8* %format, ...) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %name.addr = alloca i8*, align 8
  %format.addr = alloca i8*, align 8
  %va = alloca [1 x %struct.__va_list_tag], align 16
  %func = alloca %struct._object*, align 8
  %retval1 = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1279, metadata !1833), !dbg !8171
  store i8* %name, i8** %name.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1280, metadata !1833), !dbg !8172
  store i8* %format, i8** %format.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !1281, metadata !1833), !dbg !8173
  %0 = bitcast [1 x %struct.__va_list_tag]* %va to i8*, !dbg !8174
  call void @llvm.lifetime.start(i64 24, i8* %0) #2, !dbg !8174
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %va, metadata !1282, metadata !1833), !dbg !8175
  %1 = bitcast %struct._object** %func to i8*, !dbg !8176
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !8176
  call void @llvm.dbg.declare(metadata %struct._object** %func, metadata !1283, metadata !1833), !dbg !8177
  store %struct._object* null, %struct._object** %func, align 8, !dbg !8177, !tbaa !1829
  %2 = bitcast %struct._object** %retval1 to i8*, !dbg !8178
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !8178
  call void @llvm.dbg.declare(metadata %struct._object** %retval1, metadata !1284, metadata !1833), !dbg !8179
  store %struct._object* null, %struct._object** %retval1, align 8, !dbg !8179, !tbaa !1829
  %3 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !8180, !tbaa !1829
  %cmp = icmp eq %struct._object* %3, null, !dbg !8182
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8183

lor.lhs.false:                                    ; preds = %entry
  %4 = load i8*, i8** %name.addr, align 8, !dbg !8184, !tbaa !1829
  %cmp2 = icmp eq i8* %4, null, !dbg !8186
  br i1 %cmp2, label %if.then, label %if.end, !dbg !8187

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !8188
  store %struct._object* %call, %struct._object** %retval, !dbg !8189
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8189

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !8190, !tbaa !1829
  %6 = load i8*, i8** %name.addr, align 8, !dbg !8191, !tbaa !1829
  %call3 = call %struct._object* @PyObject_GetAttrString(%struct._object* %5, i8* %6), !dbg !8192
  store %struct._object* %call3, %struct._object** %func, align 8, !dbg !8193, !tbaa !1829
  %7 = load %struct._object*, %struct._object** %func, align 8, !dbg !8194, !tbaa !1829
  %cmp4 = icmp eq %struct._object* %7, null, !dbg !8196
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !8197

if.then.5:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !8198
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8198

if.end.6:                                         ; preds = %if.end
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8200
  %arraydecay7 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !8201
  call void @llvm.va_start(i8* %arraydecay7), !dbg !8201
  %8 = load %struct._object*, %struct._object** %func, align 8, !dbg !8202, !tbaa !1829
  %9 = load i8*, i8** %format.addr, align 8, !dbg !8203, !tbaa !1829
  %arraydecay8 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8204
  %call9 = call %struct._object* @callmethod(%struct._object* %8, i8* %9, %struct.__va_list_tag* %arraydecay8, i32 0), !dbg !8205
  store %struct._object* %call9, %struct._object** %retval1, align 8, !dbg !8206, !tbaa !1829
  %arraydecay10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8207
  %arraydecay1011 = bitcast %struct.__va_list_tag* %arraydecay10 to i8*, !dbg !8208
  call void @llvm.va_end(i8* %arraydecay1011), !dbg !8208
  %10 = load %struct._object*, %struct._object** %retval1, align 8, !dbg !8209, !tbaa !1829
  store %struct._object* %10, %struct._object** %retval, !dbg !8210
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8210

cleanup:                                          ; preds = %if.end.6, %if.then.5, %if.then
  %11 = bitcast %struct._object** %retval1 to i8*, !dbg !8211
  call void @llvm.lifetime.end(i64 8, i8* %11) #2, !dbg !8211
  %12 = bitcast %struct._object** %func to i8*, !dbg !8211
  call void @llvm.lifetime.end(i64 8, i8* %12) #2, !dbg !8211
  %13 = bitcast [1 x %struct.__va_list_tag]* %va to i8*, !dbg !8211
  call void @llvm.lifetime.end(i64 24, i8* %13) #2, !dbg !8211
  %14 = load %struct._object*, %struct._object** %retval, !dbg !8211
  ret %struct._object* %14, !dbg !8211
}

declare %struct._object* @PyObject_GetAttrString(%struct._object*, i8*) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @callmethod(%struct._object* %func, i8* %format, %struct.__va_list_tag* %va, i32 %is_size_t) #0 {
entry:
  %func.addr = alloca %struct._object*, align 8
  %format.addr = alloca i8*, align 8
  %va.addr = alloca %struct.__va_list_tag*, align 8
  %is_size_t.addr = alloca i32, align 4
  %retval1 = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %func, %struct._object** %func.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %func.addr, metadata !1718, metadata !1833), !dbg !8212
  store i8* %format, i8** %format.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !1719, metadata !1833), !dbg !8213
  store %struct.__va_list_tag* %va, %struct.__va_list_tag** %va.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %va.addr, metadata !1720, metadata !1833), !dbg !8214
  store i32 %is_size_t, i32* %is_size_t.addr, align 4, !tbaa !2764
  call void @llvm.dbg.declare(metadata i32* %is_size_t.addr, metadata !1721, metadata !1833), !dbg !8215
  %0 = bitcast %struct._object** %retval1 to i8*, !dbg !8216
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !8216
  call void @llvm.dbg.declare(metadata %struct._object** %retval1, metadata !1722, metadata !1833), !dbg !8217
  store %struct._object* null, %struct._object** %retval1, align 8, !dbg !8217, !tbaa !1829
  %1 = bitcast %struct._object** %args to i8*, !dbg !8218
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !8218
  call void @llvm.dbg.declare(metadata %struct._object** %args, metadata !1723, metadata !1833), !dbg !8219
  %2 = load %struct._object*, %struct._object** %func.addr, align 8, !dbg !8220, !tbaa !1829
  %call = call i32 @PyCallable_Check(%struct._object* %2), !dbg !8222
  %tobool = icmp ne i32 %call, 0, !dbg !8222
  br i1 %tobool, label %if.end, label %if.then, !dbg !8223

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %func.addr, align 8, !dbg !8224, !tbaa !1829
  %call2 = call %struct._object* @type_error(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.88, i32 0, i32 0), %struct._object* %3), !dbg !8226
  br label %exit, !dbg !8227

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %format.addr, align 8, !dbg !8228, !tbaa !1829
  %tobool3 = icmp ne i8* %4, null, !dbg !8228
  br i1 %tobool3, label %land.lhs.true, label %if.else.11, !dbg !8230

land.lhs.true:                                    ; preds = %if.end
  %5 = load i8*, i8** %format.addr, align 8, !dbg !8231, !tbaa !1829
  %6 = load i8, i8* %5, align 1, !dbg !8233, !tbaa !3250
  %conv = sext i8 %6 to i32, !dbg !8233
  %tobool4 = icmp ne i32 %conv, 0, !dbg !8233
  br i1 %tobool4, label %if.then.5, label %if.else.11, !dbg !8234

if.then.5:                                        ; preds = %land.lhs.true
  %7 = load i32, i32* %is_size_t.addr, align 4, !dbg !8235, !tbaa !2764
  %tobool6 = icmp ne i32 %7, 0, !dbg !8235
  br i1 %tobool6, label %if.then.7, label %if.else, !dbg !8238

if.then.7:                                        ; preds = %if.then.5
  %8 = load i8*, i8** %format.addr, align 8, !dbg !8239, !tbaa !1829
  %9 = load %struct.__va_list_tag*, %struct.__va_list_tag** %va.addr, align 8, !dbg !8240, !tbaa !1829
  %call8 = call %struct._object* @_Py_VaBuildValue_SizeT(i8* %8, %struct.__va_list_tag* %9), !dbg !8241
  store %struct._object* %call8, %struct._object** %args, align 8, !dbg !8242, !tbaa !1829
  br label %if.end.10, !dbg !8243

if.else:                                          ; preds = %if.then.5
  %10 = load i8*, i8** %format.addr, align 8, !dbg !8244, !tbaa !1829
  %11 = load %struct.__va_list_tag*, %struct.__va_list_tag** %va.addr, align 8, !dbg !8245, !tbaa !1829
  %call9 = call %struct._object* @Py_VaBuildValue(i8* %10, %struct.__va_list_tag* %11), !dbg !8246
  store %struct._object* %call9, %struct._object** %args, align 8, !dbg !8247, !tbaa !1829
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.7
  br label %if.end.13, !dbg !8248

if.else.11:                                       ; preds = %land.lhs.true, %if.end
  %call12 = call %struct._object* @PyTuple_New(i64 0), !dbg !8249
  store %struct._object* %call12, %struct._object** %args, align 8, !dbg !8250, !tbaa !1829
  br label %if.end.13

if.end.13:                                        ; preds = %if.else.11, %if.end.10
  %12 = load %struct._object*, %struct._object** %func.addr, align 8, !dbg !8251, !tbaa !1829
  %13 = load %struct._object*, %struct._object** %args, align 8, !dbg !8252, !tbaa !1829
  %call14 = call %struct._object* @call_function_tail(%struct._object* %12, %struct._object* %13), !dbg !8253
  store %struct._object* %call14, %struct._object** %retval1, align 8, !dbg !8254, !tbaa !1829
  br label %exit, !dbg !8255

exit:                                             ; preds = %if.end.13, %if.then
  br label %do.body, !dbg !8256

do.body:                                          ; preds = %exit
  %14 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !8257
  call void @llvm.lifetime.start(i64 8, i8* %14) #2, !dbg !8257
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1724, metadata !1833), !dbg !8259
  %15 = load %struct._object*, %struct._object** %func.addr, align 8, !dbg !8260, !tbaa !1829
  store %struct._object* %15, %struct._object** %_py_xdecref_tmp, align 8, !dbg !8259, !tbaa !1829
  %16 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !8261, !tbaa !1829
  %cmp = icmp ne %struct._object* %16, null, !dbg !8262
  br i1 %cmp, label %if.then.16, label %if.end.23, !dbg !8263

if.then.16:                                       ; preds = %do.body
  br label %do.body.17, !dbg !8264

do.body.17:                                       ; preds = %if.then.16
  %17 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8266
  call void @llvm.lifetime.start(i64 8, i8* %17) #2, !dbg !8266
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1726, metadata !1833), !dbg !8268
  %18 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !8269, !tbaa !1829
  store %struct._object* %18, %struct._object** %_py_decref_tmp, align 8, !dbg !8268, !tbaa !1829
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8270, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0, !dbg !8272
  %20 = load i64, i64* %ob_refcnt, align 8, !dbg !8273, !tbaa !1853
  %dec = add i64 %20, -1, !dbg !8273
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !8273, !tbaa !1853
  %cmp18 = icmp ne i64 %dec, 0, !dbg !8274
  br i1 %cmp18, label %if.then.20, label %if.else.21, !dbg !8275

if.then.20:                                       ; preds = %do.body.17
  br label %if.end.22, !dbg !8276

if.else.21:                                       ; preds = %do.body.17
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8278, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1, !dbg !8280
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8280, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4, !dbg !8281
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !8281, !tbaa !2033
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8282, !tbaa !1829
  call void %23(%struct._object* %24), !dbg !8283
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.21, %if.then.20
  %25 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8284
  call void @llvm.lifetime.end(i64 8, i8* %25) #2, !dbg !8284
  br label %do.cond, !dbg !8286

do.cond:                                          ; preds = %if.end.22
  br label %do.end, !dbg !8287

do.end:                                           ; preds = %do.cond
  br label %if.end.23, !dbg !8289

if.end.23:                                        ; preds = %do.end, %do.body
  %26 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !8291
  call void @llvm.lifetime.end(i64 8, i8* %26) #2, !dbg !8291
  br label %do.cond.24, !dbg !8294

do.cond.24:                                       ; preds = %if.end.23
  br label %do.end.25, !dbg !8295

do.end.25:                                        ; preds = %do.cond.24
  %27 = load %struct._object*, %struct._object** %retval1, align 8, !dbg !8297, !tbaa !1829
  %28 = bitcast %struct._object** %args to i8*, !dbg !8298
  call void @llvm.lifetime.end(i64 8, i8* %28) #2, !dbg !8298
  %29 = bitcast %struct._object** %retval1 to i8*, !dbg !8298
  call void @llvm.lifetime.end(i64 8, i8* %29) #2, !dbg !8298
  ret %struct._object* %27, !dbg !8299
}

declare %struct._object* @_PyObject_GetAttrId(%struct._object*, %struct._Py_Identifier*) #3

; Function Attrs: nounwind uwtable
define %struct._object* @_PyObject_CallMethod_SizeT(%struct._object* %o, i8* %name, i8* %format, ...) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %name.addr = alloca i8*, align 8
  %format.addr = alloca i8*, align 8
  %va = alloca [1 x %struct.__va_list_tag], align 16
  %func = alloca %struct._object*, align 8
  %retval1 = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1305, metadata !1833), !dbg !8300
  store i8* %name, i8** %name.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1306, metadata !1833), !dbg !8301
  store i8* %format, i8** %format.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !1307, metadata !1833), !dbg !8302
  %0 = bitcast [1 x %struct.__va_list_tag]* %va to i8*, !dbg !8303
  call void @llvm.lifetime.start(i64 24, i8* %0) #2, !dbg !8303
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %va, metadata !1308, metadata !1833), !dbg !8304
  %1 = bitcast %struct._object** %func to i8*, !dbg !8305
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !8305
  call void @llvm.dbg.declare(metadata %struct._object** %func, metadata !1309, metadata !1833), !dbg !8306
  store %struct._object* null, %struct._object** %func, align 8, !dbg !8306, !tbaa !1829
  %2 = bitcast %struct._object** %retval1 to i8*, !dbg !8307
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !8307
  call void @llvm.dbg.declare(metadata %struct._object** %retval1, metadata !1310, metadata !1833), !dbg !8308
  %3 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !8309, !tbaa !1829
  %cmp = icmp eq %struct._object* %3, null, !dbg !8311
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8312

lor.lhs.false:                                    ; preds = %entry
  %4 = load i8*, i8** %name.addr, align 8, !dbg !8313, !tbaa !1829
  %cmp2 = icmp eq i8* %4, null, !dbg !8315
  br i1 %cmp2, label %if.then, label %if.end, !dbg !8316

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !8317
  store %struct._object* %call, %struct._object** %retval, !dbg !8318
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8318

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !8319, !tbaa !1829
  %6 = load i8*, i8** %name.addr, align 8, !dbg !8320, !tbaa !1829
  %call3 = call %struct._object* @PyObject_GetAttrString(%struct._object* %5, i8* %6), !dbg !8321
  store %struct._object* %call3, %struct._object** %func, align 8, !dbg !8322, !tbaa !1829
  %7 = load %struct._object*, %struct._object** %func, align 8, !dbg !8323, !tbaa !1829
  %cmp4 = icmp eq %struct._object* %7, null, !dbg !8325
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !8326

if.then.5:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !8327
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8327

if.end.6:                                         ; preds = %if.end
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8329
  %arraydecay7 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !8330
  call void @llvm.va_start(i8* %arraydecay7), !dbg !8330
  %8 = load %struct._object*, %struct._object** %func, align 8, !dbg !8331, !tbaa !1829
  %9 = load i8*, i8** %format.addr, align 8, !dbg !8332, !tbaa !1829
  %arraydecay8 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8333
  %call9 = call %struct._object* @callmethod(%struct._object* %8, i8* %9, %struct.__va_list_tag* %arraydecay8, i32 1), !dbg !8334
  store %struct._object* %call9, %struct._object** %retval1, align 8, !dbg !8335, !tbaa !1829
  %arraydecay10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8336
  %arraydecay1011 = bitcast %struct.__va_list_tag* %arraydecay10 to i8*, !dbg !8337
  call void @llvm.va_end(i8* %arraydecay1011), !dbg !8337
  %10 = load %struct._object*, %struct._object** %retval1, align 8, !dbg !8338, !tbaa !1829
  store %struct._object* %10, %struct._object** %retval, !dbg !8339
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8339

cleanup:                                          ; preds = %if.end.6, %if.then.5, %if.then
  %11 = bitcast %struct._object** %retval1 to i8*, !dbg !8340
  call void @llvm.lifetime.end(i64 8, i8* %11) #2, !dbg !8340
  %12 = bitcast %struct._object** %func to i8*, !dbg !8340
  call void @llvm.lifetime.end(i64 8, i8* %12) #2, !dbg !8340
  %13 = bitcast [1 x %struct.__va_list_tag]* %va to i8*, !dbg !8340
  call void @llvm.lifetime.end(i64 24, i8* %13) #2, !dbg !8340
  %14 = load %struct._object*, %struct._object** %retval, !dbg !8340
  ret %struct._object* %14, !dbg !8340
}

; Function Attrs: nounwind uwtable
define %struct._object* @_PyObject_CallMethodId_SizeT(%struct._object* %o, %struct._Py_Identifier* %name, i8* %format, ...) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._Py_Identifier*, align 8
  %format.addr = alloca i8*, align 8
  %va = alloca [1 x %struct.__va_list_tag], align 16
  %func = alloca %struct._object*, align 8
  %retval1 = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %o, %struct._object** %o.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %o.addr, metadata !1313, metadata !1833), !dbg !8341
  store %struct._Py_Identifier* %name, %struct._Py_Identifier** %name.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._Py_Identifier** %name.addr, metadata !1314, metadata !1833), !dbg !8342
  store i8* %format, i8** %format.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %format.addr, metadata !1315, metadata !1833), !dbg !8343
  %0 = bitcast [1 x %struct.__va_list_tag]* %va to i8*, !dbg !8344
  call void @llvm.lifetime.start(i64 24, i8* %0) #2, !dbg !8344
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %va, metadata !1316, metadata !1833), !dbg !8345
  %1 = bitcast %struct._object** %func to i8*, !dbg !8346
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !8346
  call void @llvm.dbg.declare(metadata %struct._object** %func, metadata !1317, metadata !1833), !dbg !8347
  store %struct._object* null, %struct._object** %func, align 8, !dbg !8347, !tbaa !1829
  %2 = bitcast %struct._object** %retval1 to i8*, !dbg !8348
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !8348
  call void @llvm.dbg.declare(metadata %struct._object** %retval1, metadata !1318, metadata !1833), !dbg !8349
  %3 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !8350, !tbaa !1829
  %cmp = icmp eq %struct._object* %3, null, !dbg !8352
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8353

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct._Py_Identifier*, %struct._Py_Identifier** %name.addr, align 8, !dbg !8354, !tbaa !1829
  %cmp2 = icmp eq %struct._Py_Identifier* %4, null, !dbg !8356
  br i1 %cmp2, label %if.then, label %if.end, !dbg !8357

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !8358
  store %struct._object* %call, %struct._object** %retval, !dbg !8359
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8359

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct._object*, %struct._object** %o.addr, align 8, !dbg !8360, !tbaa !1829
  %6 = load %struct._Py_Identifier*, %struct._Py_Identifier** %name.addr, align 8, !dbg !8361, !tbaa !1829
  %call3 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %5, %struct._Py_Identifier* %6), !dbg !8362
  store %struct._object* %call3, %struct._object** %func, align 8, !dbg !8363, !tbaa !1829
  %7 = load %struct._object*, %struct._object** %func, align 8, !dbg !8364, !tbaa !1829
  %cmp4 = icmp eq %struct._object* %7, null, !dbg !8366
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !8367

if.then.5:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !8368
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8368

if.end.6:                                         ; preds = %if.end
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8370
  %arraydecay7 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !8371
  call void @llvm.va_start(i8* %arraydecay7), !dbg !8371
  %8 = load %struct._object*, %struct._object** %func, align 8, !dbg !8372, !tbaa !1829
  %9 = load i8*, i8** %format.addr, align 8, !dbg !8373, !tbaa !1829
  %arraydecay8 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8374
  %call9 = call %struct._object* @callmethod(%struct._object* %8, i8* %9, %struct.__va_list_tag* %arraydecay8, i32 1), !dbg !8375
  store %struct._object* %call9, %struct._object** %retval1, align 8, !dbg !8376, !tbaa !1829
  %arraydecay10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0, !dbg !8377
  %arraydecay1011 = bitcast %struct.__va_list_tag* %arraydecay10 to i8*, !dbg !8378
  call void @llvm.va_end(i8* %arraydecay1011), !dbg !8378
  %10 = load %struct._object*, %struct._object** %retval1, align 8, !dbg !8379, !tbaa !1829
  store %struct._object* %10, %struct._object** %retval, !dbg !8380
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8380

cleanup:                                          ; preds = %if.end.6, %if.then.5, %if.then
  %11 = bitcast %struct._object** %retval1 to i8*, !dbg !8381
  call void @llvm.lifetime.end(i64 8, i8* %11) #2, !dbg !8381
  %12 = bitcast %struct._object** %func to i8*, !dbg !8381
  call void @llvm.lifetime.end(i64 8, i8* %12) #2, !dbg !8381
  %13 = bitcast [1 x %struct.__va_list_tag]* %va to i8*, !dbg !8381
  call void @llvm.lifetime.end(i64 24, i8* %13) #2, !dbg !8381
  %14 = load %struct._object*, %struct._object** %retval, !dbg !8381
  ret %struct._object* %14, !dbg !8381
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyObject_CallMethodObjArgs(%struct._object* %callable, %struct._object* %name, ...) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %callable.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %vargs = alloca [1 x %struct.__va_list_tag], align 16
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp22 = alloca %struct._object*, align 8
  %_py_decref_tmp35 = alloca %struct._object*, align 8
  store %struct._object* %callable, %struct._object** %callable.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %callable.addr, metadata !1323, metadata !1833), !dbg !8382
  store %struct._object* %name, %struct._object** %name.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %name.addr, metadata !1324, metadata !1833), !dbg !8383
  %0 = bitcast %struct._object** %args to i8*, !dbg !8384
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !8384
  call void @llvm.dbg.declare(metadata %struct._object** %args, metadata !1325, metadata !1833), !dbg !8385
  %1 = bitcast %struct._object** %tmp to i8*, !dbg !8384
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !8384
  call void @llvm.dbg.declare(metadata %struct._object** %tmp, metadata !1326, metadata !1833), !dbg !8386
  %2 = bitcast [1 x %struct.__va_list_tag]* %vargs to i8*, !dbg !8387
  call void @llvm.lifetime.start(i64 24, i8* %2) #2, !dbg !8387
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %vargs, metadata !1327, metadata !1833), !dbg !8388
  %3 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8389, !tbaa !1829
  %cmp = icmp eq %struct._object* %3, null, !dbg !8391
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8392

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %name.addr, align 8, !dbg !8393, !tbaa !1829
  %cmp2 = icmp eq %struct._object* %4, null, !dbg !8395
  br i1 %cmp2, label %if.then, label %if.end, !dbg !8396

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !8397
  store %struct._object* %call, %struct._object** %retval, !dbg !8398
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8398

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8399, !tbaa !1829
  %6 = load %struct._object*, %struct._object** %name.addr, align 8, !dbg !8400, !tbaa !1829
  %call3 = call %struct._object* @PyObject_GetAttr(%struct._object* %5, %struct._object* %6), !dbg !8401
  store %struct._object* %call3, %struct._object** %callable.addr, align 8, !dbg !8402, !tbaa !1829
  %7 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8403, !tbaa !1829
  %cmp4 = icmp eq %struct._object* %7, null, !dbg !8405
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !8406

if.then.5:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !8407
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8407

if.end.6:                                         ; preds = %if.end
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %vargs, i32 0, i32 0, !dbg !8408
  %arraydecay7 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !8409
  call void @llvm.va_start(i8* %arraydecay7), !dbg !8409
  %arraydecay8 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %vargs, i32 0, i32 0, !dbg !8410
  %call9 = call %struct._object* @objargs_mktuple(%struct.__va_list_tag* %arraydecay8), !dbg !8411
  store %struct._object* %call9, %struct._object** %args, align 8, !dbg !8412, !tbaa !1829
  %arraydecay10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %vargs, i32 0, i32 0, !dbg !8413
  %arraydecay1011 = bitcast %struct.__va_list_tag* %arraydecay10 to i8*, !dbg !8414
  call void @llvm.va_end(i8* %arraydecay1011), !dbg !8414
  %8 = load %struct._object*, %struct._object** %args, align 8, !dbg !8415, !tbaa !1829
  %cmp12 = icmp eq %struct._object* %8, null, !dbg !8416
  br i1 %cmp12, label %if.then.13, label %if.end.18, !dbg !8417

if.then.13:                                       ; preds = %if.end.6
  br label %do.body, !dbg !8418

do.body:                                          ; preds = %if.then.13
  %9 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8419
  call void @llvm.lifetime.start(i64 8, i8* %9) #2, !dbg !8419
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1328, metadata !1833), !dbg !8421
  %10 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8422, !tbaa !1829
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8, !dbg !8421, !tbaa !1829
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8423, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0, !dbg !8425
  %12 = load i64, i64* %ob_refcnt, align 8, !dbg !8426, !tbaa !1853
  %dec = add i64 %12, -1, !dbg !8426
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !8426, !tbaa !1853
  %cmp15 = icmp ne i64 %dec, 0, !dbg !8427
  br i1 %cmp15, label %if.then.16, label %if.else, !dbg !8428

if.then.16:                                       ; preds = %do.body
  br label %if.end.17, !dbg !8429

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8431, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1, !dbg !8433
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8433, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4, !dbg !8434
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !8434, !tbaa !2033
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8435, !tbaa !1829
  call void %15(%struct._object* %16), !dbg !8436
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.then.16
  %17 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8437
  call void @llvm.lifetime.end(i64 8, i8* %17) #2, !dbg !8437
  br label %do.cond, !dbg !8439

do.cond:                                          ; preds = %if.end.17
  br label %do.end, !dbg !8440

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !8442
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8442

if.end.18:                                        ; preds = %if.end.6
  %18 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8443, !tbaa !1829
  %19 = load %struct._object*, %struct._object** %args, align 8, !dbg !8444, !tbaa !1829
  %call19 = call %struct._object* @PyObject_Call(%struct._object* %18, %struct._object* %19, %struct._object* null), !dbg !8445
  store %struct._object* %call19, %struct._object** %tmp, align 8, !dbg !8446, !tbaa !1829
  br label %do.body.20, !dbg !8447

do.body.20:                                       ; preds = %if.end.18
  %20 = bitcast %struct._object** %_py_decref_tmp22 to i8*, !dbg !8448
  call void @llvm.lifetime.start(i64 8, i8* %20) #2, !dbg !8448
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp22, metadata !1332, metadata !1833), !dbg !8450
  %21 = load %struct._object*, %struct._object** %args, align 8, !dbg !8451, !tbaa !1829
  store %struct._object* %21, %struct._object** %_py_decref_tmp22, align 8, !dbg !8450, !tbaa !1829
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8, !dbg !8452, !tbaa !1829
  %ob_refcnt23 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0, !dbg !8454
  %23 = load i64, i64* %ob_refcnt23, align 8, !dbg !8455, !tbaa !1853
  %dec24 = add i64 %23, -1, !dbg !8455
  store i64 %dec24, i64* %ob_refcnt23, align 8, !dbg !8455, !tbaa !1853
  %cmp25 = icmp ne i64 %dec24, 0, !dbg !8456
  br i1 %cmp25, label %if.then.26, label %if.else.27, !dbg !8457

if.then.26:                                       ; preds = %do.body.20
  br label %if.end.30, !dbg !8458

if.else.27:                                       ; preds = %do.body.20
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8, !dbg !8460, !tbaa !1829
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1, !dbg !8462
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8, !dbg !8462, !tbaa !1845
  %tp_dealloc29 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4, !dbg !8463
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc29, align 8, !dbg !8463, !tbaa !2033
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8, !dbg !8464, !tbaa !1829
  call void %26(%struct._object* %27), !dbg !8465
  br label %if.end.30

if.end.30:                                        ; preds = %if.else.27, %if.then.26
  %28 = bitcast %struct._object** %_py_decref_tmp22 to i8*, !dbg !8466
  call void @llvm.lifetime.end(i64 8, i8* %28) #2, !dbg !8466
  br label %do.cond.31, !dbg !8468

do.cond.31:                                       ; preds = %if.end.30
  br label %do.end.32, !dbg !8469

do.end.32:                                        ; preds = %do.cond.31
  br label %do.body.33, !dbg !8471

do.body.33:                                       ; preds = %do.end.32
  %29 = bitcast %struct._object** %_py_decref_tmp35 to i8*, !dbg !8472
  call void @llvm.lifetime.start(i64 8, i8* %29) #2, !dbg !8472
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp35, metadata !1334, metadata !1833), !dbg !8474
  %30 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8475, !tbaa !1829
  store %struct._object* %30, %struct._object** %_py_decref_tmp35, align 8, !dbg !8474, !tbaa !1829
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !8476, !tbaa !1829
  %ob_refcnt36 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0, !dbg !8478
  %32 = load i64, i64* %ob_refcnt36, align 8, !dbg !8479, !tbaa !1853
  %dec37 = add i64 %32, -1, !dbg !8479
  store i64 %dec37, i64* %ob_refcnt36, align 8, !dbg !8479, !tbaa !1853
  %cmp38 = icmp ne i64 %dec37, 0, !dbg !8480
  br i1 %cmp38, label %if.then.39, label %if.else.40, !dbg !8481

if.then.39:                                       ; preds = %do.body.33
  br label %if.end.43, !dbg !8482

if.else.40:                                       ; preds = %do.body.33
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !8484, !tbaa !1829
  %ob_type41 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1, !dbg !8486
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type41, align 8, !dbg !8486, !tbaa !1845
  %tp_dealloc42 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4, !dbg !8487
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc42, align 8, !dbg !8487, !tbaa !2033
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !8488, !tbaa !1829
  call void %35(%struct._object* %36), !dbg !8489
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.40, %if.then.39
  %37 = bitcast %struct._object** %_py_decref_tmp35 to i8*, !dbg !8490
  call void @llvm.lifetime.end(i64 8, i8* %37) #2, !dbg !8490
  br label %do.cond.44, !dbg !8491

do.cond.44:                                       ; preds = %if.end.43
  br label %do.end.45, !dbg !8492

do.end.45:                                        ; preds = %do.cond.44
  %38 = load %struct._object*, %struct._object** %tmp, align 8, !dbg !8494, !tbaa !1829
  store %struct._object* %38, %struct._object** %retval, !dbg !8495
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8495

cleanup:                                          ; preds = %do.end.45, %do.end, %if.then.5, %if.then
  %39 = bitcast [1 x %struct.__va_list_tag]* %vargs to i8*, !dbg !8496
  call void @llvm.lifetime.end(i64 24, i8* %39) #2, !dbg !8496
  %40 = bitcast %struct._object** %tmp to i8*, !dbg !8496
  call void @llvm.lifetime.end(i64 8, i8* %40) #2, !dbg !8496
  %41 = bitcast %struct._object** %args to i8*, !dbg !8496
  call void @llvm.lifetime.end(i64 8, i8* %41) #2, !dbg !8496
  %42 = load %struct._object*, %struct._object** %retval, !dbg !8496
  ret %struct._object* %42, !dbg !8496
}

declare %struct._object* @PyObject_GetAttr(%struct._object*, %struct._object*) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @objargs_mktuple(%struct.__va_list_tag* %va) #0 {
entry:
  %va.addr = alloca %struct.__va_list_tag*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %countva = alloca [1 x %struct.__va_list_tag], align 16
  %result = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  store %struct.__va_list_tag* %va, %struct.__va_list_tag** %va.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %va.addr, metadata !1733, metadata !1833), !dbg !8497
  %0 = bitcast i32* %i to i8*, !dbg !8498
  call void @llvm.lifetime.start(i64 4, i8* %0) #2, !dbg !8498
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1734, metadata !1833), !dbg !8499
  %1 = bitcast i32* %n to i8*, !dbg !8498
  call void @llvm.lifetime.start(i64 4, i8* %1) #2, !dbg !8498
  call void @llvm.dbg.declare(metadata i32* %n, metadata !1735, metadata !1833), !dbg !8500
  store i32 0, i32* %n, align 4, !dbg !8500, !tbaa !2764
  %2 = bitcast [1 x %struct.__va_list_tag]* %countva to i8*, !dbg !8501
  call void @llvm.lifetime.start(i64 24, i8* %2) #2, !dbg !8501
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %countva, metadata !1736, metadata !1833), !dbg !8502
  %3 = bitcast %struct._object** %result to i8*, !dbg !8503
  call void @llvm.lifetime.start(i64 8, i8* %3) #2, !dbg !8503
  call void @llvm.dbg.declare(metadata %struct._object** %result, metadata !1737, metadata !1833), !dbg !8504
  %4 = bitcast %struct._object** %tmp to i8*, !dbg !8503
  call void @llvm.lifetime.start(i64 8, i8* %4) #2, !dbg !8503
  call void @llvm.dbg.declare(metadata %struct._object** %tmp, metadata !1738, metadata !1833), !dbg !8505
  %5 = bitcast [1 x %struct.__va_list_tag]* %countva to i8*, !dbg !8506
  %6 = load %struct.__va_list_tag*, %struct.__va_list_tag** %va.addr, align 8, !dbg !8507, !tbaa !1829
  %7 = bitcast %struct.__va_list_tag* %6 to i8*, !dbg !8506
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %7, i64 24, i32 8, i1 false), !dbg !8506
  br label %while.cond, !dbg !8508

while.cond:                                       ; preds = %while.body, %entry
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %countva, i32 0, i32 0, !dbg !8509
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay, i32 0, i32 0, !dbg !8512
  %gp_offset = load i32, i32* %gp_offset_p, !dbg !8512
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !8512
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !8512

vaarg.in_reg:                                     ; preds = %while.cond
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay, i32 0, i32 3, !dbg !8513
  %reg_save_area = load i8*, i8** %8, !dbg !8513
  %9 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !8513
  %10 = bitcast i8* %9 to %struct._object**, !dbg !8513
  %11 = add i32 %gp_offset, 8, !dbg !8513
  store i32 %11, i32* %gp_offset_p, !dbg !8513
  br label %vaarg.end, !dbg !8513

vaarg.in_mem:                                     ; preds = %while.cond
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay, i32 0, i32 2, !dbg !8515
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, !dbg !8515
  %12 = bitcast i8* %overflow_arg_area to %struct._object**, !dbg !8515
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !8515
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, !dbg !8515
  br label %vaarg.end, !dbg !8515

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi %struct._object** [ %10, %vaarg.in_reg ], [ %12, %vaarg.in_mem ], !dbg !8512
  %13 = load %struct._object*, %struct._object** %vaarg.addr, !dbg !8517
  %cmp = icmp ne %struct._object* %13, null, !dbg !8520
  br i1 %cmp, label %while.body, label %while.end, !dbg !8508

while.body:                                       ; preds = %vaarg.end
  %14 = load i32, i32* %n, align 4, !dbg !8521, !tbaa !2764
  %inc = add i32 %14, 1, !dbg !8521
  store i32 %inc, i32* %n, align 4, !dbg !8521, !tbaa !2764
  br label %while.cond, !dbg !8508

while.end:                                        ; preds = %vaarg.end
  %15 = load i32, i32* %n, align 4, !dbg !8522, !tbaa !2764
  %conv = sext i32 %15 to i64, !dbg !8522
  %call = call %struct._object* @PyTuple_New(i64 %conv), !dbg !8523
  store %struct._object* %call, %struct._object** %result, align 8, !dbg !8524, !tbaa !1829
  %16 = load %struct._object*, %struct._object** %result, align 8, !dbg !8525, !tbaa !1829
  %cmp1 = icmp ne %struct._object* %16, null, !dbg !8527
  br i1 %cmp1, label %land.lhs.true, label %if.end, !dbg !8528

land.lhs.true:                                    ; preds = %while.end
  %17 = load i32, i32* %n, align 4, !dbg !8529, !tbaa !2764
  %cmp3 = icmp sgt i32 %17, 0, !dbg !8531
  br i1 %cmp3, label %if.then, label %if.end, !dbg !8532

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %i, align 4, !dbg !8533, !tbaa !2764
  br label %for.cond, !dbg !8536

for.cond:                                         ; preds = %for.inc, %if.then
  %18 = load i32, i32* %i, align 4, !dbg !8537, !tbaa !2764
  %19 = load i32, i32* %n, align 4, !dbg !8541, !tbaa !2764
  %cmp5 = icmp slt i32 %18, %19, !dbg !8542
  br i1 %cmp5, label %for.body, label %for.end, !dbg !8543

for.body:                                         ; preds = %for.cond
  %20 = load %struct.__va_list_tag*, %struct.__va_list_tag** %va.addr, align 8, !dbg !8544, !tbaa !1829
  %gp_offset_p7 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %20, i32 0, i32 0, !dbg !8546
  %gp_offset8 = load i32, i32* %gp_offset_p7, !dbg !8546
  %fits_in_gp9 = icmp ule i32 %gp_offset8, 40, !dbg !8546
  br i1 %fits_in_gp9, label %vaarg.in_reg.10, label %vaarg.in_mem.12, !dbg !8546

vaarg.in_reg.10:                                  ; preds = %for.body
  %21 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %20, i32 0, i32 3, !dbg !8547
  %reg_save_area11 = load i8*, i8** %21, !dbg !8547
  %22 = getelementptr i8, i8* %reg_save_area11, i32 %gp_offset8, !dbg !8547
  %23 = bitcast i8* %22 to %struct._object**, !dbg !8547
  %24 = add i32 %gp_offset8, 8, !dbg !8547
  store i32 %24, i32* %gp_offset_p7, !dbg !8547
  br label %vaarg.end.16, !dbg !8547

vaarg.in_mem.12:                                  ; preds = %for.body
  %overflow_arg_area_p13 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %20, i32 0, i32 2, !dbg !8549
  %overflow_arg_area14 = load i8*, i8** %overflow_arg_area_p13, !dbg !8549
  %25 = bitcast i8* %overflow_arg_area14 to %struct._object**, !dbg !8549
  %overflow_arg_area.next15 = getelementptr i8, i8* %overflow_arg_area14, i32 8, !dbg !8549
  store i8* %overflow_arg_area.next15, i8** %overflow_arg_area_p13, !dbg !8549
  br label %vaarg.end.16, !dbg !8549

vaarg.end.16:                                     ; preds = %vaarg.in_mem.12, %vaarg.in_reg.10
  %vaarg.addr17 = phi %struct._object** [ %23, %vaarg.in_reg.10 ], [ %25, %vaarg.in_mem.12 ], !dbg !8546
  %26 = load %struct._object*, %struct._object** %vaarg.addr17, !dbg !8551
  store %struct._object* %26, %struct._object** %tmp, align 8, !dbg !8554, !tbaa !1829
  %27 = load %struct._object*, %struct._object** %tmp, align 8, !dbg !8555, !tbaa !1829
  %28 = load i32, i32* %i, align 4, !dbg !8556, !tbaa !2764
  %idxprom = sext i32 %28 to i64, !dbg !8557
  %29 = load %struct._object*, %struct._object** %result, align 8, !dbg !8558, !tbaa !1829
  %30 = bitcast %struct._object* %29 to %struct.PyTupleObject*, !dbg !8559
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %30, i32 0, i32 1, !dbg !8560
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %idxprom, !dbg !8557
  store %struct._object* %27, %struct._object** %arrayidx, align 8, !dbg !8561, !tbaa !1829
  %31 = load %struct._object*, %struct._object** %tmp, align 8, !dbg !8562, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0, !dbg !8563
  %32 = load i64, i64* %ob_refcnt, align 8, !dbg !8564, !tbaa !1853
  %inc18 = add i64 %32, 1, !dbg !8564
  store i64 %inc18, i64* %ob_refcnt, align 8, !dbg !8564, !tbaa !1853
  br label %for.inc, !dbg !8565

for.inc:                                          ; preds = %vaarg.end.16
  %33 = load i32, i32* %i, align 4, !dbg !8566, !tbaa !2764
  %inc19 = add i32 %33, 1, !dbg !8566
  store i32 %inc19, i32* %i, align 4, !dbg !8566, !tbaa !2764
  br label %for.cond, !dbg !8567

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !8568

if.end:                                           ; preds = %for.end, %land.lhs.true, %while.end
  %34 = load %struct._object*, %struct._object** %result, align 8, !dbg !8569, !tbaa !1829
  %35 = bitcast %struct._object** %tmp to i8*, !dbg !8570
  call void @llvm.lifetime.end(i64 8, i8* %35) #2, !dbg !8570
  %36 = bitcast %struct._object** %result to i8*, !dbg !8570
  call void @llvm.lifetime.end(i64 8, i8* %36) #2, !dbg !8570
  %37 = bitcast [1 x %struct.__va_list_tag]* %countva to i8*, !dbg !8570
  call void @llvm.lifetime.end(i64 24, i8* %37) #2, !dbg !8570
  %38 = bitcast i32* %n to i8*, !dbg !8570
  call void @llvm.lifetime.end(i64 4, i8* %38) #2, !dbg !8570
  %39 = bitcast i32* %i to i8*, !dbg !8570
  call void @llvm.lifetime.end(i64 4, i8* %39) #2, !dbg !8570
  ret %struct._object* %34, !dbg !8571
}

; Function Attrs: nounwind uwtable
define %struct._object* @_PyObject_CallMethodIdObjArgs(%struct._object* %callable, %struct._Py_Identifier* %name, ...) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %callable.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._Py_Identifier*, align 8
  %args = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %vargs = alloca [1 x %struct.__va_list_tag], align 16
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp22 = alloca %struct._object*, align 8
  %_py_decref_tmp35 = alloca %struct._object*, align 8
  store %struct._object* %callable, %struct._object** %callable.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %callable.addr, metadata !1340, metadata !1833), !dbg !8572
  store %struct._Py_Identifier* %name, %struct._Py_Identifier** %name.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._Py_Identifier** %name.addr, metadata !1341, metadata !1833), !dbg !8573
  %0 = bitcast %struct._object** %args to i8*, !dbg !8574
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !8574
  call void @llvm.dbg.declare(metadata %struct._object** %args, metadata !1342, metadata !1833), !dbg !8575
  %1 = bitcast %struct._object** %tmp to i8*, !dbg !8574
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !8574
  call void @llvm.dbg.declare(metadata %struct._object** %tmp, metadata !1343, metadata !1833), !dbg !8576
  %2 = bitcast [1 x %struct.__va_list_tag]* %vargs to i8*, !dbg !8577
  call void @llvm.lifetime.start(i64 24, i8* %2) #2, !dbg !8577
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %vargs, metadata !1344, metadata !1833), !dbg !8578
  %3 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8579, !tbaa !1829
  %cmp = icmp eq %struct._object* %3, null, !dbg !8581
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8582

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct._Py_Identifier*, %struct._Py_Identifier** %name.addr, align 8, !dbg !8583, !tbaa !1829
  %cmp2 = icmp eq %struct._Py_Identifier* %4, null, !dbg !8585
  br i1 %cmp2, label %if.then, label %if.end, !dbg !8586

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call %struct._object* @null_error(), !dbg !8587
  store %struct._object* %call, %struct._object** %retval, !dbg !8588
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8588

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8589, !tbaa !1829
  %6 = load %struct._Py_Identifier*, %struct._Py_Identifier** %name.addr, align 8, !dbg !8590, !tbaa !1829
  %call3 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %5, %struct._Py_Identifier* %6), !dbg !8591
  store %struct._object* %call3, %struct._object** %callable.addr, align 8, !dbg !8592, !tbaa !1829
  %7 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8593, !tbaa !1829
  %cmp4 = icmp eq %struct._object* %7, null, !dbg !8595
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !8596

if.then.5:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !8597
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8597

if.end.6:                                         ; preds = %if.end
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %vargs, i32 0, i32 0, !dbg !8598
  %arraydecay7 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !8599
  call void @llvm.va_start(i8* %arraydecay7), !dbg !8599
  %arraydecay8 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %vargs, i32 0, i32 0, !dbg !8600
  %call9 = call %struct._object* @objargs_mktuple(%struct.__va_list_tag* %arraydecay8), !dbg !8601
  store %struct._object* %call9, %struct._object** %args, align 8, !dbg !8602, !tbaa !1829
  %arraydecay10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %vargs, i32 0, i32 0, !dbg !8603
  %arraydecay1011 = bitcast %struct.__va_list_tag* %arraydecay10 to i8*, !dbg !8604
  call void @llvm.va_end(i8* %arraydecay1011), !dbg !8604
  %8 = load %struct._object*, %struct._object** %args, align 8, !dbg !8605, !tbaa !1829
  %cmp12 = icmp eq %struct._object* %8, null, !dbg !8606
  br i1 %cmp12, label %if.then.13, label %if.end.18, !dbg !8607

if.then.13:                                       ; preds = %if.end.6
  br label %do.body, !dbg !8608

do.body:                                          ; preds = %if.then.13
  %9 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8609
  call void @llvm.lifetime.start(i64 8, i8* %9) #2, !dbg !8609
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1345, metadata !1833), !dbg !8611
  %10 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8612, !tbaa !1829
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8, !dbg !8611, !tbaa !1829
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8613, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0, !dbg !8615
  %12 = load i64, i64* %ob_refcnt, align 8, !dbg !8616, !tbaa !1853
  %dec = add i64 %12, -1, !dbg !8616
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !8616, !tbaa !1853
  %cmp15 = icmp ne i64 %dec, 0, !dbg !8617
  br i1 %cmp15, label %if.then.16, label %if.else, !dbg !8618

if.then.16:                                       ; preds = %do.body
  br label %if.end.17, !dbg !8619

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8621, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1, !dbg !8623
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8623, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4, !dbg !8624
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !8624, !tbaa !2033
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8625, !tbaa !1829
  call void %15(%struct._object* %16), !dbg !8626
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.then.16
  %17 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8627
  call void @llvm.lifetime.end(i64 8, i8* %17) #2, !dbg !8627
  br label %do.cond, !dbg !8629

do.cond:                                          ; preds = %if.end.17
  br label %do.end, !dbg !8630

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !8632
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8632

if.end.18:                                        ; preds = %if.end.6
  %18 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8633, !tbaa !1829
  %19 = load %struct._object*, %struct._object** %args, align 8, !dbg !8634, !tbaa !1829
  %call19 = call %struct._object* @PyObject_Call(%struct._object* %18, %struct._object* %19, %struct._object* null), !dbg !8635
  store %struct._object* %call19, %struct._object** %tmp, align 8, !dbg !8636, !tbaa !1829
  br label %do.body.20, !dbg !8637

do.body.20:                                       ; preds = %if.end.18
  %20 = bitcast %struct._object** %_py_decref_tmp22 to i8*, !dbg !8638
  call void @llvm.lifetime.start(i64 8, i8* %20) #2, !dbg !8638
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp22, metadata !1349, metadata !1833), !dbg !8640
  %21 = load %struct._object*, %struct._object** %args, align 8, !dbg !8641, !tbaa !1829
  store %struct._object* %21, %struct._object** %_py_decref_tmp22, align 8, !dbg !8640, !tbaa !1829
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8, !dbg !8642, !tbaa !1829
  %ob_refcnt23 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0, !dbg !8644
  %23 = load i64, i64* %ob_refcnt23, align 8, !dbg !8645, !tbaa !1853
  %dec24 = add i64 %23, -1, !dbg !8645
  store i64 %dec24, i64* %ob_refcnt23, align 8, !dbg !8645, !tbaa !1853
  %cmp25 = icmp ne i64 %dec24, 0, !dbg !8646
  br i1 %cmp25, label %if.then.26, label %if.else.27, !dbg !8647

if.then.26:                                       ; preds = %do.body.20
  br label %if.end.30, !dbg !8648

if.else.27:                                       ; preds = %do.body.20
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8, !dbg !8650, !tbaa !1829
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1, !dbg !8652
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8, !dbg !8652, !tbaa !1845
  %tp_dealloc29 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4, !dbg !8653
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc29, align 8, !dbg !8653, !tbaa !2033
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8, !dbg !8654, !tbaa !1829
  call void %26(%struct._object* %27), !dbg !8655
  br label %if.end.30

if.end.30:                                        ; preds = %if.else.27, %if.then.26
  %28 = bitcast %struct._object** %_py_decref_tmp22 to i8*, !dbg !8656
  call void @llvm.lifetime.end(i64 8, i8* %28) #2, !dbg !8656
  br label %do.cond.31, !dbg !8658

do.cond.31:                                       ; preds = %if.end.30
  br label %do.end.32, !dbg !8659

do.end.32:                                        ; preds = %do.cond.31
  br label %do.body.33, !dbg !8661

do.body.33:                                       ; preds = %do.end.32
  %29 = bitcast %struct._object** %_py_decref_tmp35 to i8*, !dbg !8662
  call void @llvm.lifetime.start(i64 8, i8* %29) #2, !dbg !8662
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp35, metadata !1351, metadata !1833), !dbg !8664
  %30 = load %struct._object*, %struct._object** %callable.addr, align 8, !dbg !8665, !tbaa !1829
  store %struct._object* %30, %struct._object** %_py_decref_tmp35, align 8, !dbg !8664, !tbaa !1829
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !8666, !tbaa !1829
  %ob_refcnt36 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0, !dbg !8668
  %32 = load i64, i64* %ob_refcnt36, align 8, !dbg !8669, !tbaa !1853
  %dec37 = add i64 %32, -1, !dbg !8669
  store i64 %dec37, i64* %ob_refcnt36, align 8, !dbg !8669, !tbaa !1853
  %cmp38 = icmp ne i64 %dec37, 0, !dbg !8670
  br i1 %cmp38, label %if.then.39, label %if.else.40, !dbg !8671

if.then.39:                                       ; preds = %do.body.33
  br label %if.end.43, !dbg !8672

if.else.40:                                       ; preds = %do.body.33
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !8674, !tbaa !1829
  %ob_type41 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1, !dbg !8676
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type41, align 8, !dbg !8676, !tbaa !1845
  %tp_dealloc42 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4, !dbg !8677
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc42, align 8, !dbg !8677, !tbaa !2033
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8, !dbg !8678, !tbaa !1829
  call void %35(%struct._object* %36), !dbg !8679
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.40, %if.then.39
  %37 = bitcast %struct._object** %_py_decref_tmp35 to i8*, !dbg !8680
  call void @llvm.lifetime.end(i64 8, i8* %37) #2, !dbg !8680
  br label %do.cond.44, !dbg !8681

do.cond.44:                                       ; preds = %if.end.43
  br label %do.end.45, !dbg !8682

do.end.45:                                        ; preds = %do.cond.44
  %38 = load %struct._object*, %struct._object** %tmp, align 8, !dbg !8684, !tbaa !1829
  store %struct._object* %38, %struct._object** %retval, !dbg !8685
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8685

cleanup:                                          ; preds = %do.end.45, %do.end, %if.then.5, %if.then
  %39 = bitcast [1 x %struct.__va_list_tag]* %vargs to i8*, !dbg !8686
  call void @llvm.lifetime.end(i64 24, i8* %39) #2, !dbg !8686
  %40 = bitcast %struct._object** %tmp to i8*, !dbg !8686
  call void @llvm.lifetime.end(i64 8, i8* %40) #2, !dbg !8686
  %41 = bitcast %struct._object** %args to i8*, !dbg !8686
  call void @llvm.lifetime.end(i64 8, i8* %41) #2, !dbg !8686
  %42 = load %struct._object*, %struct._object** %retval, !dbg !8686
  ret %struct._object* %42, !dbg !8686
}

; Function Attrs: nounwind uwtable
define i32 @PyObject_IsInstance(%struct._object* %inst, %struct._object* %cls) #0 {
entry:
  %retval = alloca i32, align 4
  %inst.addr = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  %checker = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %r = alloca i32, align 4
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %item = alloca %struct._object*, align 8
  %atomic_val18 = alloca %struct._Py_atomic_address*, align 8
  %result20 = alloca i8*, align 8
  %volatile_data22 = alloca i8**, align 8
  %order25 = alloca i32, align 4
  %tmp32 = alloca i8*, align 8
  %atomic_val38 = alloca %struct._Py_atomic_address*, align 8
  %result40 = alloca i8*, align 8
  %volatile_data42 = alloca i8**, align 8
  %order45 = alloca i32, align 4
  %tmp52 = alloca i8*, align 8
  %res = alloca %struct._object*, align 8
  %ok = alloca i32, align 4
  %atomic_val64 = alloca %struct._Py_atomic_address*, align 8
  %result66 = alloca i8*, align 8
  %volatile_data68 = alloca i8**, align 8
  %order71 = alloca i32, align 4
  %tmp78 = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %atomic_val99 = alloca %struct._Py_atomic_address*, align 8
  %result101 = alloca i8*, align 8
  %volatile_data103 = alloca i8**, align 8
  %order106 = alloca i32, align 4
  %tmp113 = alloca i8*, align 8
  %atomic_val127 = alloca %struct._Py_atomic_address*, align 8
  %result129 = alloca i8*, align 8
  %volatile_data131 = alloca i8**, align 8
  %order134 = alloca i32, align 4
  %tmp141 = alloca i8*, align 8
  %_py_decref_tmp148 = alloca %struct._object*, align 8
  %_py_decref_tmp164 = alloca %struct._object*, align 8
  store %struct._object* %inst, %struct._object** %inst.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %inst.addr, metadata !1365, metadata !1833), !dbg !8687
  store %struct._object* %cls, %struct._object** %cls.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %cls.addr, metadata !1366, metadata !1833), !dbg !8688
  %0 = bitcast %struct._object** %checker to i8*, !dbg !8689
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !8689
  call void @llvm.dbg.declare(metadata %struct._object** %checker, metadata !1367, metadata !1833), !dbg !8690
  %1 = load %struct._object*, %struct._object** %inst.addr, align 8, !dbg !8691, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !8693
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8693, !tbaa !1845
  %3 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !8694, !tbaa !1829
  %4 = bitcast %struct._object* %3 to %struct._typeobject*, !dbg !8695
  %cmp = icmp eq %struct._typeobject* %2, %4, !dbg !8696
  br i1 %cmp, label %if.then, label %if.end, !dbg !8697

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, !dbg !8698
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.185, !dbg !8698

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !8699, !tbaa !1829
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !8700
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !8700, !tbaa !1845
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 19, !dbg !8701
  %7 = load i64, i64* %tp_flags, align 8, !dbg !8701, !tbaa !2086
  %and = and i64 %7, 67108864, !dbg !8702
  %cmp2 = icmp ne i64 %and, 0, !dbg !8703
  br i1 %cmp2, label %if.then.3, label %if.end.57, !dbg !8704

if.then.3:                                        ; preds = %if.end
  %8 = bitcast i64* %i to i8*, !dbg !8705
  call void @llvm.lifetime.start(i64 8, i8* %8) #2, !dbg !8705
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1368, metadata !1833), !dbg !8706
  %9 = bitcast i64* %n to i8*, !dbg !8707
  call void @llvm.lifetime.start(i64 8, i8* %9) #2, !dbg !8707
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1371, metadata !1833), !dbg !8708
  %10 = bitcast i32* %r to i8*, !dbg !8709
  call void @llvm.lifetime.start(i64 4, i8* %10) #2, !dbg !8709
  call void @llvm.dbg.declare(metadata i32* %r, metadata !1372, metadata !1833), !dbg !8710
  store i32 0, i32* %r, align 4, !dbg !8710, !tbaa !2764
  %11 = bitcast %struct._Py_atomic_address** %atomic_val to i8*, !dbg !8711
  call void @llvm.lifetime.start(i64 8, i8* %11) #2, !dbg !8711
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val, metadata !1373, metadata !1833), !dbg !8712
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8, !dbg !8712, !tbaa !1829
  %12 = bitcast i8** %result to i8*, !dbg !8713
  call void @llvm.lifetime.start(i64 8, i8* %12) #2, !dbg !8713
  call void @llvm.dbg.declare(metadata i8** %result, metadata !1376, metadata !1833), !dbg !8714
  %13 = bitcast i8*** %volatile_data to i8*, !dbg !8715
  call void @llvm.lifetime.start(i64 8, i8* %13) #2, !dbg !8715
  call void @llvm.dbg.declare(metadata i8*** %volatile_data, metadata !1377, metadata !1833), !dbg !8716
  %14 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8, !dbg !8717, !tbaa !1829
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %14, i32 0, i32 0, !dbg !8718
  store i8** %_value, i8*** %volatile_data, align 8, !dbg !8716, !tbaa !1829
  %15 = bitcast i32* %order to i8*, !dbg !8719
  call void @llvm.lifetime.start(i64 4, i8* %15) #2, !dbg !8719
  call void @llvm.dbg.declare(metadata i32* %order, metadata !1378, metadata !1833), !dbg !8720
  store i32 0, i32* %order, align 4, !dbg !8720, !tbaa !3250
  %16 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8, !dbg !8721, !tbaa !1829
  %17 = bitcast %struct._Py_atomic_address* %16 to i8*, !dbg !8721
  %18 = load i32, i32* %order, align 4, !dbg !8722, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %17, i32 %18), !dbg !8723
  %19 = load i32, i32* %order, align 4, !dbg !8724, !tbaa !3250
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.then.3
  %.off = add i32 %19, -2
  %SwitchLeaf = icmp ule i32 %.off, 2
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  call void @_Py_atomic_thread_fence(i32 2), !dbg !8725
  br label %sw.epilog, !dbg !8730

NewDefault:                                       ; preds = %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  br label %sw.epilog, !dbg !8731

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %20 = load i8**, i8*** %volatile_data, align 8, !dbg !8733, !tbaa !1829
  %21 = load volatile i8*, i8** %20, align 8, !dbg !8736, !tbaa !1829
  store i8* %21, i8** %result, align 8, !dbg !8737, !tbaa !1829
  %22 = load i32, i32* %order, align 4, !dbg !8738, !tbaa !3250
  br label %NodeBlock

NodeBlock:                                        ; preds = %sw.epilog
  %Pivot = icmp slt i32 %22, 3
  br i1 %Pivot, label %LeafBlock.2, label %LeafBlock.4

LeafBlock.4:                                      ; preds = %NodeBlock
  %.off.5 = add i32 %22, -3
  %SwitchLeaf6 = icmp ule i32 %.off.5, 1
  br i1 %SwitchLeaf6, label %sw.bb.4, label %NewDefault.1

LeafBlock.2:                                      ; preds = %NodeBlock
  %SwitchLeaf3 = icmp eq i32 %22, 1
  br i1 %SwitchLeaf3, label %sw.bb.4, label %NewDefault.1

sw.bb.4:                                          ; preds = %LeafBlock.4, %LeafBlock.2
  call void @_Py_atomic_signal_fence(i32 1), !dbg !8739
  br label %sw.epilog.6, !dbg !8744

NewDefault.1:                                     ; preds = %LeafBlock.4, %LeafBlock.2
  br label %sw.default.5

sw.default.5:                                     ; preds = %NewDefault.1
  br label %sw.epilog.6, !dbg !8745

sw.epilog.6:                                      ; preds = %sw.default.5, %sw.bb.4
  %23 = load i8*, i8** %result, align 8, !dbg !8747, !tbaa !1829
  store i8* %23, i8** %tmp, !dbg !8750, !tbaa !1829
  %24 = bitcast i32* %order to i8*, !dbg !8751
  call void @llvm.lifetime.end(i64 4, i8* %24) #2, !dbg !8751
  %25 = bitcast i8*** %volatile_data to i8*, !dbg !8751
  call void @llvm.lifetime.end(i64 8, i8* %25) #2, !dbg !8751
  %26 = bitcast i8** %result to i8*, !dbg !8751
  call void @llvm.lifetime.end(i64 8, i8* %26) #2, !dbg !8751
  %27 = bitcast %struct._Py_atomic_address** %atomic_val to i8*, !dbg !8751
  call void @llvm.lifetime.end(i64 8, i8* %27) #2, !dbg !8751
  %28 = load i8*, i8** %tmp, !dbg !8752, !tbaa !1829
  %29 = bitcast i8* %28 to %struct._ts*, !dbg !8753
  %recursion_depth = getelementptr inbounds %struct._ts, %struct._ts* %29, i32 0, i32 4, !dbg !8754
  %30 = load i32, i32* %recursion_depth, align 4, !dbg !8755, !tbaa !7826
  %inc = add i32 %30, 1, !dbg !8755
  store i32 %inc, i32* %recursion_depth, align 4, !dbg !8755, !tbaa !7826
  %31 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !8756, !tbaa !2764
  %cmp7 = icmp sgt i32 %inc, %31, !dbg !8757
  br i1 %cmp7, label %land.lhs.true, label %if.end.9, !dbg !8758

land.lhs.true:                                    ; preds = %sw.epilog.6
  %call = call i32 @_Py_CheckRecursiveCall(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.78, i32 0, i32 0)), !dbg !8759
  %tobool = icmp ne i32 %call, 0, !dbg !8759
  br i1 %tobool, label %if.then.8, label %if.end.9, !dbg !8761

if.then.8:                                        ; preds = %land.lhs.true
  store i32 -1, i32* %retval, !dbg !8762
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.54, !dbg !8762

if.end.9:                                         ; preds = %land.lhs.true, %sw.epilog.6
  %32 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !8763, !tbaa !1829
  %33 = bitcast %struct._object* %32 to %struct.PyVarObject*, !dbg !8764
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %33, i32 0, i32 1, !dbg !8765
  %34 = load i64, i64* %ob_size, align 8, !dbg !8765, !tbaa !5788
  store i64 %34, i64* %n, align 8, !dbg !8766, !tbaa !1963
  store i64 0, i64* %i, align 8, !dbg !8767, !tbaa !1963
  br label %for.cond, !dbg !8768

for.cond:                                         ; preds = %for.inc, %if.end.9
  %35 = load i64, i64* %i, align 8, !dbg !8769, !tbaa !1963
  %36 = load i64, i64* %n, align 8, !dbg !8772, !tbaa !1963
  %cmp10 = icmp slt i64 %35, %36, !dbg !8773
  br i1 %cmp10, label %for.body, label %for.end, !dbg !8774

for.body:                                         ; preds = %for.cond
  %37 = bitcast %struct._object** %item to i8*, !dbg !8775
  call void @llvm.lifetime.start(i64 8, i8* %37) #2, !dbg !8775
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !1379, metadata !1833), !dbg !8776
  %38 = load i64, i64* %i, align 8, !dbg !8777, !tbaa !1963
  %39 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !8778, !tbaa !1829
  %40 = bitcast %struct._object* %39 to %struct.PyTupleObject*, !dbg !8779
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %40, i32 0, i32 1, !dbg !8780
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %38, !dbg !8781
  %41 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !8781, !tbaa !1829
  store %struct._object* %41, %struct._object** %item, align 8, !dbg !8776, !tbaa !1829
  %42 = load %struct._object*, %struct._object** %inst.addr, align 8, !dbg !8782, !tbaa !1829
  %43 = load %struct._object*, %struct._object** %item, align 8, !dbg !8783, !tbaa !1829
  %call12 = call i32 @PyObject_IsInstance(%struct._object* %42, %struct._object* %43), !dbg !8784
  store i32 %call12, i32* %r, align 4, !dbg !8785, !tbaa !2764
  %44 = load i32, i32* %r, align 4, !dbg !8786, !tbaa !2764
  %cmp13 = icmp ne i32 %44, 0, !dbg !8788
  br i1 %cmp13, label %if.then.14, label %if.end.15, !dbg !8789

if.then.14:                                       ; preds = %for.body
  store i32 4, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8790

if.end.15:                                        ; preds = %for.body
  store i32 0, i32* %cleanup.dest.slot, !dbg !8791
  br label %cleanup, !dbg !8791

cleanup:                                          ; preds = %if.end.15, %if.then.14
  %45 = bitcast %struct._object** %item to i8*, !dbg !8792
  call void @llvm.lifetime.end(i64 8, i8* %45) #2, !dbg !8792
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.8

LeafBlock.8:                                      ; preds = %cleanup
  %SwitchLeaf9 = icmp eq i32 %cleanup.dest, 4
  br i1 %SwitchLeaf9, label %for.end, label %NewDefault.7

NewDefault.7:                                     ; preds = %LeafBlock.8
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %NewDefault.7
  br label %for.inc, !dbg !8793

for.inc:                                          ; preds = %cleanup.cont
  %46 = load i64, i64* %i, align 8, !dbg !8794, !tbaa !1963
  %inc16 = add i64 %46, 1, !dbg !8794
  store i64 %inc16, i64* %i, align 8, !dbg !8794, !tbaa !1963
  br label %for.cond, !dbg !8795

for.end:                                          ; preds = %LeafBlock.8, %for.cond
  br label %do.body, !dbg !8796

do.body:                                          ; preds = %for.end
  %47 = bitcast %struct._Py_atomic_address** %atomic_val18 to i8*, !dbg !8797
  call void @llvm.lifetime.start(i64 8, i8* %47) #2, !dbg !8797
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val18, metadata !1383, metadata !1833), !dbg !8799
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val18, align 8, !dbg !8799, !tbaa !1829
  %48 = bitcast i8** %result20 to i8*, !dbg !8800
  call void @llvm.lifetime.start(i64 8, i8* %48) #2, !dbg !8800
  call void @llvm.dbg.declare(metadata i8** %result20, metadata !1387, metadata !1833), !dbg !8801
  %49 = bitcast i8*** %volatile_data22 to i8*, !dbg !8802
  call void @llvm.lifetime.start(i64 8, i8* %49) #2, !dbg !8802
  call void @llvm.dbg.declare(metadata i8*** %volatile_data22, metadata !1388, metadata !1833), !dbg !8803
  %50 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val18, align 8, !dbg !8804, !tbaa !1829
  %_value23 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %50, i32 0, i32 0, !dbg !8805
  store i8** %_value23, i8*** %volatile_data22, align 8, !dbg !8803, !tbaa !1829
  %51 = bitcast i32* %order25 to i8*, !dbg !8806
  call void @llvm.lifetime.start(i64 4, i8* %51) #2, !dbg !8806
  call void @llvm.dbg.declare(metadata i32* %order25, metadata !1389, metadata !1833), !dbg !8807
  store i32 0, i32* %order25, align 4, !dbg !8807, !tbaa !3250
  %52 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val18, align 8, !dbg !8808, !tbaa !1829
  %53 = bitcast %struct._Py_atomic_address* %52 to i8*, !dbg !8808
  %54 = load i32, i32* %order25, align 4, !dbg !8809, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %53, i32 %54), !dbg !8810
  %55 = load i32, i32* %order25, align 4, !dbg !8811, !tbaa !3250
  br label %LeafBlock.11

LeafBlock.11:                                     ; preds = %do.body
  %.off.12 = add i32 %55, -2
  %SwitchLeaf13 = icmp ule i32 %.off.12, 2
  br i1 %SwitchLeaf13, label %sw.bb.26, label %NewDefault.10

sw.bb.26:                                         ; preds = %LeafBlock.11
  call void @_Py_atomic_thread_fence(i32 2), !dbg !8812
  br label %sw.epilog.28, !dbg !8817

NewDefault.10:                                    ; preds = %LeafBlock.11
  br label %sw.default.27

sw.default.27:                                    ; preds = %NewDefault.10
  br label %sw.epilog.28, !dbg !8818

sw.epilog.28:                                     ; preds = %sw.default.27, %sw.bb.26
  %56 = load i8**, i8*** %volatile_data22, align 8, !dbg !8820, !tbaa !1829
  %57 = load volatile i8*, i8** %56, align 8, !dbg !8823, !tbaa !1829
  store i8* %57, i8** %result20, align 8, !dbg !8824, !tbaa !1829
  %58 = load i32, i32* %order25, align 4, !dbg !8825, !tbaa !3250
  br label %NodeBlock.20

NodeBlock.20:                                     ; preds = %sw.epilog.28
  %Pivot.21 = icmp slt i32 %58, 3
  br i1 %Pivot.21, label %LeafBlock.15, label %LeafBlock.17

LeafBlock.17:                                     ; preds = %NodeBlock.20
  %.off.18 = add i32 %58, -3
  %SwitchLeaf19 = icmp ule i32 %.off.18, 1
  br i1 %SwitchLeaf19, label %sw.bb.29, label %NewDefault.14

LeafBlock.15:                                     ; preds = %NodeBlock.20
  %SwitchLeaf16 = icmp eq i32 %58, 1
  br i1 %SwitchLeaf16, label %sw.bb.29, label %NewDefault.14

sw.bb.29:                                         ; preds = %LeafBlock.17, %LeafBlock.15
  call void @_Py_atomic_signal_fence(i32 1), !dbg !8826
  br label %sw.epilog.31, !dbg !8831

NewDefault.14:                                    ; preds = %LeafBlock.17, %LeafBlock.15
  br label %sw.default.30

sw.default.30:                                    ; preds = %NewDefault.14
  br label %sw.epilog.31, !dbg !8832

sw.epilog.31:                                     ; preds = %sw.default.30, %sw.bb.29
  %59 = load i8*, i8** %result20, align 8, !dbg !8834, !tbaa !1829
  store i8* %59, i8** %tmp32, !dbg !8837, !tbaa !1829
  %60 = bitcast i32* %order25 to i8*, !dbg !8838
  call void @llvm.lifetime.end(i64 4, i8* %60) #2, !dbg !8838
  %61 = bitcast i8*** %volatile_data22 to i8*, !dbg !8838
  call void @llvm.lifetime.end(i64 8, i8* %61) #2, !dbg !8838
  %62 = bitcast i8** %result20 to i8*, !dbg !8838
  call void @llvm.lifetime.end(i64 8, i8* %62) #2, !dbg !8838
  %63 = bitcast %struct._Py_atomic_address** %atomic_val18 to i8*, !dbg !8838
  call void @llvm.lifetime.end(i64 8, i8* %63) #2, !dbg !8838
  %64 = load i8*, i8** %tmp32, !dbg !8839, !tbaa !1829
  %65 = bitcast i8* %64 to %struct._ts*, !dbg !8840
  %recursion_depth33 = getelementptr inbounds %struct._ts, %struct._ts* %65, i32 0, i32 4, !dbg !8841
  %66 = load i32, i32* %recursion_depth33, align 4, !dbg !8842, !tbaa !7826
  %dec = add i32 %66, -1, !dbg !8842
  store i32 %dec, i32* %recursion_depth33, align 4, !dbg !8842, !tbaa !7826
  %67 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !8843, !tbaa !2764
  %cmp34 = icmp sgt i32 %67, 100, !dbg !8844
  br i1 %cmp34, label %cond.true, label %cond.false, !dbg !8845

cond.true:                                        ; preds = %sw.epilog.31
  %68 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !8846, !tbaa !2764
  %sub = sub i32 %68, 50, !dbg !8848
  br label %cond.end, !dbg !8845

cond.false:                                       ; preds = %sw.epilog.31
  %69 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !8849, !tbaa !2764
  %shr = ashr i32 %69, 2, !dbg !8851
  %mul = mul i32 3, %shr, !dbg !8852
  br label %cond.end, !dbg !8845

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %mul, %cond.false ], !dbg !8845
  %cmp35 = icmp slt i32 %dec, %cond, !dbg !8853
  br i1 %cmp35, label %if.then.36, label %if.end.53, !dbg !8856

if.then.36:                                       ; preds = %cond.end
  %70 = bitcast %struct._Py_atomic_address** %atomic_val38 to i8*, !dbg !8857
  call void @llvm.lifetime.start(i64 8, i8* %70) #2, !dbg !8857
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val38, metadata !1390, metadata !1833), !dbg !8859
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val38, align 8, !dbg !8859, !tbaa !1829
  %71 = bitcast i8** %result40 to i8*, !dbg !8860
  call void @llvm.lifetime.start(i64 8, i8* %71) #2, !dbg !8860
  call void @llvm.dbg.declare(metadata i8** %result40, metadata !1392, metadata !1833), !dbg !8861
  %72 = bitcast i8*** %volatile_data42 to i8*, !dbg !8862
  call void @llvm.lifetime.start(i64 8, i8* %72) #2, !dbg !8862
  call void @llvm.dbg.declare(metadata i8*** %volatile_data42, metadata !1393, metadata !1833), !dbg !8863
  %73 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val38, align 8, !dbg !8864, !tbaa !1829
  %_value43 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %73, i32 0, i32 0, !dbg !8865
  store i8** %_value43, i8*** %volatile_data42, align 8, !dbg !8863, !tbaa !1829
  %74 = bitcast i32* %order45 to i8*, !dbg !8866
  call void @llvm.lifetime.start(i64 4, i8* %74) #2, !dbg !8866
  call void @llvm.dbg.declare(metadata i32* %order45, metadata !1394, metadata !1833), !dbg !8867
  store i32 0, i32* %order45, align 4, !dbg !8867, !tbaa !3250
  %75 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val38, align 8, !dbg !8868, !tbaa !1829
  %76 = bitcast %struct._Py_atomic_address* %75 to i8*, !dbg !8868
  %77 = load i32, i32* %order45, align 4, !dbg !8869, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %76, i32 %77), !dbg !8870
  %78 = load i32, i32* %order45, align 4, !dbg !8871, !tbaa !3250
  br label %LeafBlock.23

LeafBlock.23:                                     ; preds = %if.then.36
  %.off.24 = add i32 %78, -2
  %SwitchLeaf25 = icmp ule i32 %.off.24, 2
  br i1 %SwitchLeaf25, label %sw.bb.46, label %NewDefault.22

sw.bb.46:                                         ; preds = %LeafBlock.23
  call void @_Py_atomic_thread_fence(i32 2), !dbg !8872
  br label %sw.epilog.48, !dbg !8877

NewDefault.22:                                    ; preds = %LeafBlock.23
  br label %sw.default.47

sw.default.47:                                    ; preds = %NewDefault.22
  br label %sw.epilog.48, !dbg !8878

sw.epilog.48:                                     ; preds = %sw.default.47, %sw.bb.46
  %79 = load i8**, i8*** %volatile_data42, align 8, !dbg !8880, !tbaa !1829
  %80 = load volatile i8*, i8** %79, align 8, !dbg !8883, !tbaa !1829
  store i8* %80, i8** %result40, align 8, !dbg !8884, !tbaa !1829
  %81 = load i32, i32* %order45, align 4, !dbg !8885, !tbaa !3250
  br label %NodeBlock.32

NodeBlock.32:                                     ; preds = %sw.epilog.48
  %Pivot.33 = icmp slt i32 %81, 3
  br i1 %Pivot.33, label %LeafBlock.27, label %LeafBlock.29

LeafBlock.29:                                     ; preds = %NodeBlock.32
  %.off.30 = add i32 %81, -3
  %SwitchLeaf31 = icmp ule i32 %.off.30, 1
  br i1 %SwitchLeaf31, label %sw.bb.49, label %NewDefault.26

LeafBlock.27:                                     ; preds = %NodeBlock.32
  %SwitchLeaf28 = icmp eq i32 %81, 1
  br i1 %SwitchLeaf28, label %sw.bb.49, label %NewDefault.26

sw.bb.49:                                         ; preds = %LeafBlock.29, %LeafBlock.27
  call void @_Py_atomic_signal_fence(i32 1), !dbg !8886
  br label %sw.epilog.51, !dbg !8891

NewDefault.26:                                    ; preds = %LeafBlock.29, %LeafBlock.27
  br label %sw.default.50

sw.default.50:                                    ; preds = %NewDefault.26
  br label %sw.epilog.51, !dbg !8892

sw.epilog.51:                                     ; preds = %sw.default.50, %sw.bb.49
  %82 = load i8*, i8** %result40, align 8, !dbg !8894, !tbaa !1829
  store i8* %82, i8** %tmp52, !dbg !8897, !tbaa !1829
  %83 = bitcast i32* %order45 to i8*, !dbg !8898
  call void @llvm.lifetime.end(i64 4, i8* %83) #2, !dbg !8898
  %84 = bitcast i8*** %volatile_data42 to i8*, !dbg !8898
  call void @llvm.lifetime.end(i64 8, i8* %84) #2, !dbg !8898
  %85 = bitcast i8** %result40 to i8*, !dbg !8898
  call void @llvm.lifetime.end(i64 8, i8* %85) #2, !dbg !8898
  %86 = bitcast %struct._Py_atomic_address** %atomic_val38 to i8*, !dbg !8898
  call void @llvm.lifetime.end(i64 8, i8* %86) #2, !dbg !8898
  %87 = load i8*, i8** %tmp52, !dbg !8899, !tbaa !1829
  %88 = bitcast i8* %87 to %struct._ts*, !dbg !8900
  %overflowed = getelementptr inbounds %struct._ts, %struct._ts* %88, i32 0, i32 5, !dbg !8901
  store i8 0, i8* %overflowed, align 1, !dbg !8902, !tbaa !7948
  br label %if.end.53, !dbg !8903

if.end.53:                                        ; preds = %sw.epilog.51, %cond.end
  br label %do.cond, !dbg !8904

do.cond:                                          ; preds = %if.end.53
  br label %do.end, !dbg !8907

do.end:                                           ; preds = %do.cond
  %89 = load i32, i32* %r, align 4, !dbg !8909, !tbaa !2764
  store i32 %89, i32* %retval, !dbg !8910
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.54, !dbg !8910

cleanup.54:                                       ; preds = %do.end, %if.then.8
  %90 = bitcast i32* %r to i8*, !dbg !8911
  call void @llvm.lifetime.end(i64 4, i8* %90) #2, !dbg !8911
  %91 = bitcast i64* %n to i8*, !dbg !8911
  call void @llvm.lifetime.end(i64 8, i8* %91) #2, !dbg !8911
  %92 = bitcast i64* %i to i8*, !dbg !8911
  call void @llvm.lifetime.end(i64 8, i8* %92) #2, !dbg !8911
  br label %cleanup.185

if.end.57:                                        ; preds = %if.end
  %93 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !8912, !tbaa !1829
  %call58 = call %struct._object* @_PyObject_LookupSpecial(%struct._object* %93, %struct._Py_Identifier* @PyObject_IsInstance.PyId___instancecheck__), !dbg !8913
  store %struct._object* %call58, %struct._object** %checker, align 8, !dbg !8914, !tbaa !1829
  %94 = load %struct._object*, %struct._object** %checker, align 8, !dbg !8915, !tbaa !1829
  %cmp59 = icmp ne %struct._object* %94, null, !dbg !8916
  br i1 %cmp59, label %if.then.60, label %if.else.178, !dbg !8917

if.then.60:                                       ; preds = %if.end.57
  %95 = bitcast %struct._object** %res to i8*, !dbg !8918
  call void @llvm.lifetime.start(i64 8, i8* %95) #2, !dbg !8918
  call void @llvm.dbg.declare(metadata %struct._object** %res, metadata !1395, metadata !1833), !dbg !8919
  %96 = bitcast i32* %ok to i8*, !dbg !8920
  call void @llvm.lifetime.start(i64 4, i8* %96) #2, !dbg !8920
  call void @llvm.dbg.declare(metadata i32* %ok, metadata !1398, metadata !1833), !dbg !8921
  store i32 -1, i32* %ok, align 4, !dbg !8921, !tbaa !2764
  %97 = bitcast %struct._Py_atomic_address** %atomic_val64 to i8*, !dbg !8922
  call void @llvm.lifetime.start(i64 8, i8* %97) #2, !dbg !8922
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val64, metadata !1399, metadata !1833), !dbg !8923
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val64, align 8, !dbg !8923, !tbaa !1829
  %98 = bitcast i8** %result66 to i8*, !dbg !8924
  call void @llvm.lifetime.start(i64 8, i8* %98) #2, !dbg !8924
  call void @llvm.dbg.declare(metadata i8** %result66, metadata !1402, metadata !1833), !dbg !8925
  %99 = bitcast i8*** %volatile_data68 to i8*, !dbg !8926
  call void @llvm.lifetime.start(i64 8, i8* %99) #2, !dbg !8926
  call void @llvm.dbg.declare(metadata i8*** %volatile_data68, metadata !1403, metadata !1833), !dbg !8927
  %100 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val64, align 8, !dbg !8928, !tbaa !1829
  %_value69 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %100, i32 0, i32 0, !dbg !8929
  store i8** %_value69, i8*** %volatile_data68, align 8, !dbg !8927, !tbaa !1829
  %101 = bitcast i32* %order71 to i8*, !dbg !8930
  call void @llvm.lifetime.start(i64 4, i8* %101) #2, !dbg !8930
  call void @llvm.dbg.declare(metadata i32* %order71, metadata !1404, metadata !1833), !dbg !8931
  store i32 0, i32* %order71, align 4, !dbg !8931, !tbaa !3250
  %102 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val64, align 8, !dbg !8932, !tbaa !1829
  %103 = bitcast %struct._Py_atomic_address* %102 to i8*, !dbg !8932
  %104 = load i32, i32* %order71, align 4, !dbg !8933, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %103, i32 %104), !dbg !8934
  %105 = load i32, i32* %order71, align 4, !dbg !8935, !tbaa !3250
  br label %LeafBlock.35

LeafBlock.35:                                     ; preds = %if.then.60
  %.off.36 = add i32 %105, -2
  %SwitchLeaf37 = icmp ule i32 %.off.36, 2
  br i1 %SwitchLeaf37, label %sw.bb.72, label %NewDefault.34

sw.bb.72:                                         ; preds = %LeafBlock.35
  call void @_Py_atomic_thread_fence(i32 2), !dbg !8936
  br label %sw.epilog.74, !dbg !8941

NewDefault.34:                                    ; preds = %LeafBlock.35
  br label %sw.default.73

sw.default.73:                                    ; preds = %NewDefault.34
  br label %sw.epilog.74, !dbg !8942

sw.epilog.74:                                     ; preds = %sw.default.73, %sw.bb.72
  %106 = load i8**, i8*** %volatile_data68, align 8, !dbg !8944, !tbaa !1829
  %107 = load volatile i8*, i8** %106, align 8, !dbg !8947, !tbaa !1829
  store i8* %107, i8** %result66, align 8, !dbg !8948, !tbaa !1829
  %108 = load i32, i32* %order71, align 4, !dbg !8949, !tbaa !3250
  br label %NodeBlock.44

NodeBlock.44:                                     ; preds = %sw.epilog.74
  %Pivot.45 = icmp slt i32 %108, 3
  br i1 %Pivot.45, label %LeafBlock.39, label %LeafBlock.41

LeafBlock.41:                                     ; preds = %NodeBlock.44
  %.off.42 = add i32 %108, -3
  %SwitchLeaf43 = icmp ule i32 %.off.42, 1
  br i1 %SwitchLeaf43, label %sw.bb.75, label %NewDefault.38

LeafBlock.39:                                     ; preds = %NodeBlock.44
  %SwitchLeaf40 = icmp eq i32 %108, 1
  br i1 %SwitchLeaf40, label %sw.bb.75, label %NewDefault.38

sw.bb.75:                                         ; preds = %LeafBlock.41, %LeafBlock.39
  call void @_Py_atomic_signal_fence(i32 1), !dbg !8950
  br label %sw.epilog.77, !dbg !8955

NewDefault.38:                                    ; preds = %LeafBlock.41, %LeafBlock.39
  br label %sw.default.76

sw.default.76:                                    ; preds = %NewDefault.38
  br label %sw.epilog.77, !dbg !8956

sw.epilog.77:                                     ; preds = %sw.default.76, %sw.bb.75
  %109 = load i8*, i8** %result66, align 8, !dbg !8958, !tbaa !1829
  store i8* %109, i8** %tmp78, !dbg !8961, !tbaa !1829
  %110 = bitcast i32* %order71 to i8*, !dbg !8962
  call void @llvm.lifetime.end(i64 4, i8* %110) #2, !dbg !8962
  %111 = bitcast i8*** %volatile_data68 to i8*, !dbg !8962
  call void @llvm.lifetime.end(i64 8, i8* %111) #2, !dbg !8962
  %112 = bitcast i8** %result66 to i8*, !dbg !8962
  call void @llvm.lifetime.end(i64 8, i8* %112) #2, !dbg !8962
  %113 = bitcast %struct._Py_atomic_address** %atomic_val64 to i8*, !dbg !8962
  call void @llvm.lifetime.end(i64 8, i8* %113) #2, !dbg !8962
  %114 = load i8*, i8** %tmp78, !dbg !8963, !tbaa !1829
  %115 = bitcast i8* %114 to %struct._ts*, !dbg !8964
  %recursion_depth79 = getelementptr inbounds %struct._ts, %struct._ts* %115, i32 0, i32 4, !dbg !8965
  %116 = load i32, i32* %recursion_depth79, align 4, !dbg !8966, !tbaa !7826
  %inc80 = add i32 %116, 1, !dbg !8966
  store i32 %inc80, i32* %recursion_depth79, align 4, !dbg !8966, !tbaa !7826
  %117 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !8967, !tbaa !2764
  %cmp81 = icmp sgt i32 %inc80, %117, !dbg !8968
  br i1 %cmp81, label %land.lhs.true.82, label %if.end.95, !dbg !8969

land.lhs.true.82:                                 ; preds = %sw.epilog.77
  %call83 = call i32 @_Py_CheckRecursiveCall(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.78, i32 0, i32 0)), !dbg !8970
  %tobool84 = icmp ne i32 %call83, 0, !dbg !8970
  br i1 %tobool84, label %if.then.85, label %if.end.95, !dbg !8972

if.then.85:                                       ; preds = %land.lhs.true.82
  br label %do.body.86, !dbg !8973

do.body.86:                                       ; preds = %if.then.85
  %118 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8974
  call void @llvm.lifetime.start(i64 8, i8* %118) #2, !dbg !8974
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1405, metadata !1833), !dbg !8976
  %119 = load %struct._object*, %struct._object** %checker, align 8, !dbg !8977, !tbaa !1829
  store %struct._object* %119, %struct._object** %_py_decref_tmp, align 8, !dbg !8976, !tbaa !1829
  %120 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8978, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %120, i32 0, i32 0, !dbg !8980
  %121 = load i64, i64* %ob_refcnt, align 8, !dbg !8981, !tbaa !1853
  %dec88 = add i64 %121, -1, !dbg !8981
  store i64 %dec88, i64* %ob_refcnt, align 8, !dbg !8981, !tbaa !1853
  %cmp89 = icmp ne i64 %dec88, 0, !dbg !8982
  br i1 %cmp89, label %if.then.90, label %if.else, !dbg !8983

if.then.90:                                       ; preds = %do.body.86
  br label %if.end.92, !dbg !8984

if.else:                                          ; preds = %do.body.86
  %122 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8986, !tbaa !1829
  %ob_type91 = getelementptr inbounds %struct._object, %struct._object* %122, i32 0, i32 1, !dbg !8988
  %123 = load %struct._typeobject*, %struct._typeobject** %ob_type91, align 8, !dbg !8988, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %123, i32 0, i32 4, !dbg !8989
  %124 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !8989, !tbaa !2033
  %125 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8990, !tbaa !1829
  call void %124(%struct._object* %125), !dbg !8991
  br label %if.end.92

if.end.92:                                        ; preds = %if.else, %if.then.90
  %126 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8992
  call void @llvm.lifetime.end(i64 8, i8* %126) #2, !dbg !8992
  br label %do.cond.93, !dbg !8994

do.cond.93:                                       ; preds = %if.end.92
  br label %do.end.94, !dbg !8995

do.end.94:                                        ; preds = %do.cond.93
  %127 = load i32, i32* %ok, align 4, !dbg !8997, !tbaa !2764
  store i32 %127, i32* %retval, !dbg !8998
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.176, !dbg !8998

if.end.95:                                        ; preds = %land.lhs.true.82, %sw.epilog.77
  %128 = load %struct._object*, %struct._object** %checker, align 8, !dbg !8999, !tbaa !1829
  %129 = load %struct._object*, %struct._object** %inst.addr, align 8, !dbg !9000, !tbaa !1829
  %call96 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %128, %struct._object* %129, i8* null), !dbg !9001
  store %struct._object* %call96, %struct._object** %res, align 8, !dbg !9002, !tbaa !1829
  br label %do.body.97, !dbg !9003

do.body.97:                                       ; preds = %if.end.95
  %130 = bitcast %struct._Py_atomic_address** %atomic_val99 to i8*, !dbg !9004
  call void @llvm.lifetime.start(i64 8, i8* %130) #2, !dbg !9004
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val99, metadata !1408, metadata !1833), !dbg !9006
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val99, align 8, !dbg !9006, !tbaa !1829
  %131 = bitcast i8** %result101 to i8*, !dbg !9007
  call void @llvm.lifetime.start(i64 8, i8* %131) #2, !dbg !9007
  call void @llvm.dbg.declare(metadata i8** %result101, metadata !1412, metadata !1833), !dbg !9008
  %132 = bitcast i8*** %volatile_data103 to i8*, !dbg !9009
  call void @llvm.lifetime.start(i64 8, i8* %132) #2, !dbg !9009
  call void @llvm.dbg.declare(metadata i8*** %volatile_data103, metadata !1413, metadata !1833), !dbg !9010
  %133 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val99, align 8, !dbg !9011, !tbaa !1829
  %_value104 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %133, i32 0, i32 0, !dbg !9012
  store i8** %_value104, i8*** %volatile_data103, align 8, !dbg !9010, !tbaa !1829
  %134 = bitcast i32* %order106 to i8*, !dbg !9013
  call void @llvm.lifetime.start(i64 4, i8* %134) #2, !dbg !9013
  call void @llvm.dbg.declare(metadata i32* %order106, metadata !1414, metadata !1833), !dbg !9014
  store i32 0, i32* %order106, align 4, !dbg !9014, !tbaa !3250
  %135 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val99, align 8, !dbg !9015, !tbaa !1829
  %136 = bitcast %struct._Py_atomic_address* %135 to i8*, !dbg !9015
  %137 = load i32, i32* %order106, align 4, !dbg !9016, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %136, i32 %137), !dbg !9017
  %138 = load i32, i32* %order106, align 4, !dbg !9018, !tbaa !3250
  br label %LeafBlock.47

LeafBlock.47:                                     ; preds = %do.body.97
  %.off.48 = add i32 %138, -2
  %SwitchLeaf49 = icmp ule i32 %.off.48, 2
  br i1 %SwitchLeaf49, label %sw.bb.107, label %NewDefault.46

sw.bb.107:                                        ; preds = %LeafBlock.47
  call void @_Py_atomic_thread_fence(i32 2), !dbg !9019
  br label %sw.epilog.109, !dbg !9024

NewDefault.46:                                    ; preds = %LeafBlock.47
  br label %sw.default.108

sw.default.108:                                   ; preds = %NewDefault.46
  br label %sw.epilog.109, !dbg !9025

sw.epilog.109:                                    ; preds = %sw.default.108, %sw.bb.107
  %139 = load i8**, i8*** %volatile_data103, align 8, !dbg !9027, !tbaa !1829
  %140 = load volatile i8*, i8** %139, align 8, !dbg !9030, !tbaa !1829
  store i8* %140, i8** %result101, align 8, !dbg !9031, !tbaa !1829
  %141 = load i32, i32* %order106, align 4, !dbg !9032, !tbaa !3250
  br label %NodeBlock.56

NodeBlock.56:                                     ; preds = %sw.epilog.109
  %Pivot.57 = icmp slt i32 %141, 3
  br i1 %Pivot.57, label %LeafBlock.51, label %LeafBlock.53

LeafBlock.53:                                     ; preds = %NodeBlock.56
  %.off.54 = add i32 %141, -3
  %SwitchLeaf55 = icmp ule i32 %.off.54, 1
  br i1 %SwitchLeaf55, label %sw.bb.110, label %NewDefault.50

LeafBlock.51:                                     ; preds = %NodeBlock.56
  %SwitchLeaf52 = icmp eq i32 %141, 1
  br i1 %SwitchLeaf52, label %sw.bb.110, label %NewDefault.50

sw.bb.110:                                        ; preds = %LeafBlock.53, %LeafBlock.51
  call void @_Py_atomic_signal_fence(i32 1), !dbg !9033
  br label %sw.epilog.112, !dbg !9038

NewDefault.50:                                    ; preds = %LeafBlock.53, %LeafBlock.51
  br label %sw.default.111

sw.default.111:                                   ; preds = %NewDefault.50
  br label %sw.epilog.112, !dbg !9039

sw.epilog.112:                                    ; preds = %sw.default.111, %sw.bb.110
  %142 = load i8*, i8** %result101, align 8, !dbg !9041, !tbaa !1829
  store i8* %142, i8** %tmp113, !dbg !9044, !tbaa !1829
  %143 = bitcast i32* %order106 to i8*, !dbg !9045
  call void @llvm.lifetime.end(i64 4, i8* %143) #2, !dbg !9045
  %144 = bitcast i8*** %volatile_data103 to i8*, !dbg !9045
  call void @llvm.lifetime.end(i64 8, i8* %144) #2, !dbg !9045
  %145 = bitcast i8** %result101 to i8*, !dbg !9045
  call void @llvm.lifetime.end(i64 8, i8* %145) #2, !dbg !9045
  %146 = bitcast %struct._Py_atomic_address** %atomic_val99 to i8*, !dbg !9045
  call void @llvm.lifetime.end(i64 8, i8* %146) #2, !dbg !9045
  %147 = load i8*, i8** %tmp113, !dbg !9046, !tbaa !1829
  %148 = bitcast i8* %147 to %struct._ts*, !dbg !9047
  %recursion_depth114 = getelementptr inbounds %struct._ts, %struct._ts* %148, i32 0, i32 4, !dbg !9048
  %149 = load i32, i32* %recursion_depth114, align 4, !dbg !9049, !tbaa !7826
  %dec115 = add i32 %149, -1, !dbg !9049
  store i32 %dec115, i32* %recursion_depth114, align 4, !dbg !9049, !tbaa !7826
  %150 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !9050, !tbaa !2764
  %cmp116 = icmp sgt i32 %150, 100, !dbg !9051
  br i1 %cmp116, label %cond.true.117, label %cond.false.119, !dbg !9052

cond.true.117:                                    ; preds = %sw.epilog.112
  %151 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !9053, !tbaa !2764
  %sub118 = sub i32 %151, 50, !dbg !9055
  br label %cond.end.122, !dbg !9052

cond.false.119:                                   ; preds = %sw.epilog.112
  %152 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !9056, !tbaa !2764
  %shr120 = ashr i32 %152, 2, !dbg !9058
  %mul121 = mul i32 3, %shr120, !dbg !9059
  br label %cond.end.122, !dbg !9052

cond.end.122:                                     ; preds = %cond.false.119, %cond.true.117
  %cond123 = phi i32 [ %sub118, %cond.true.117 ], [ %mul121, %cond.false.119 ], !dbg !9052
  %cmp124 = icmp slt i32 %dec115, %cond123, !dbg !9060
  br i1 %cmp124, label %if.then.125, label %if.end.143, !dbg !9063

if.then.125:                                      ; preds = %cond.end.122
  %153 = bitcast %struct._Py_atomic_address** %atomic_val127 to i8*, !dbg !9064
  call void @llvm.lifetime.start(i64 8, i8* %153) #2, !dbg !9064
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val127, metadata !1415, metadata !1833), !dbg !9066
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val127, align 8, !dbg !9066, !tbaa !1829
  %154 = bitcast i8** %result129 to i8*, !dbg !9067
  call void @llvm.lifetime.start(i64 8, i8* %154) #2, !dbg !9067
  call void @llvm.dbg.declare(metadata i8** %result129, metadata !1417, metadata !1833), !dbg !9068
  %155 = bitcast i8*** %volatile_data131 to i8*, !dbg !9069
  call void @llvm.lifetime.start(i64 8, i8* %155) #2, !dbg !9069
  call void @llvm.dbg.declare(metadata i8*** %volatile_data131, metadata !1418, metadata !1833), !dbg !9070
  %156 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val127, align 8, !dbg !9071, !tbaa !1829
  %_value132 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %156, i32 0, i32 0, !dbg !9072
  store i8** %_value132, i8*** %volatile_data131, align 8, !dbg !9070, !tbaa !1829
  %157 = bitcast i32* %order134 to i8*, !dbg !9073
  call void @llvm.lifetime.start(i64 4, i8* %157) #2, !dbg !9073
  call void @llvm.dbg.declare(metadata i32* %order134, metadata !1419, metadata !1833), !dbg !9074
  store i32 0, i32* %order134, align 4, !dbg !9074, !tbaa !3250
  %158 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val127, align 8, !dbg !9075, !tbaa !1829
  %159 = bitcast %struct._Py_atomic_address* %158 to i8*, !dbg !9075
  %160 = load i32, i32* %order134, align 4, !dbg !9076, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %159, i32 %160), !dbg !9077
  %161 = load i32, i32* %order134, align 4, !dbg !9078, !tbaa !3250
  br label %LeafBlock.59

LeafBlock.59:                                     ; preds = %if.then.125
  %.off.60 = add i32 %161, -2
  %SwitchLeaf61 = icmp ule i32 %.off.60, 2
  br i1 %SwitchLeaf61, label %sw.bb.135, label %NewDefault.58

sw.bb.135:                                        ; preds = %LeafBlock.59
  call void @_Py_atomic_thread_fence(i32 2), !dbg !9079
  br label %sw.epilog.137, !dbg !9084

NewDefault.58:                                    ; preds = %LeafBlock.59
  br label %sw.default.136

sw.default.136:                                   ; preds = %NewDefault.58
  br label %sw.epilog.137, !dbg !9085

sw.epilog.137:                                    ; preds = %sw.default.136, %sw.bb.135
  %162 = load i8**, i8*** %volatile_data131, align 8, !dbg !9087, !tbaa !1829
  %163 = load volatile i8*, i8** %162, align 8, !dbg !9090, !tbaa !1829
  store i8* %163, i8** %result129, align 8, !dbg !9091, !tbaa !1829
  %164 = load i32, i32* %order134, align 4, !dbg !9092, !tbaa !3250
  br label %NodeBlock.68

NodeBlock.68:                                     ; preds = %sw.epilog.137
  %Pivot.69 = icmp slt i32 %164, 3
  br i1 %Pivot.69, label %LeafBlock.63, label %LeafBlock.65

LeafBlock.65:                                     ; preds = %NodeBlock.68
  %.off.66 = add i32 %164, -3
  %SwitchLeaf67 = icmp ule i32 %.off.66, 1
  br i1 %SwitchLeaf67, label %sw.bb.138, label %NewDefault.62

LeafBlock.63:                                     ; preds = %NodeBlock.68
  %SwitchLeaf64 = icmp eq i32 %164, 1
  br i1 %SwitchLeaf64, label %sw.bb.138, label %NewDefault.62

sw.bb.138:                                        ; preds = %LeafBlock.65, %LeafBlock.63
  call void @_Py_atomic_signal_fence(i32 1), !dbg !9093
  br label %sw.epilog.140, !dbg !9098

NewDefault.62:                                    ; preds = %LeafBlock.65, %LeafBlock.63
  br label %sw.default.139

sw.default.139:                                   ; preds = %NewDefault.62
  br label %sw.epilog.140, !dbg !9099

sw.epilog.140:                                    ; preds = %sw.default.139, %sw.bb.138
  %165 = load i8*, i8** %result129, align 8, !dbg !9101, !tbaa !1829
  store i8* %165, i8** %tmp141, !dbg !9104, !tbaa !1829
  %166 = bitcast i32* %order134 to i8*, !dbg !9105
  call void @llvm.lifetime.end(i64 4, i8* %166) #2, !dbg !9105
  %167 = bitcast i8*** %volatile_data131 to i8*, !dbg !9105
  call void @llvm.lifetime.end(i64 8, i8* %167) #2, !dbg !9105
  %168 = bitcast i8** %result129 to i8*, !dbg !9105
  call void @llvm.lifetime.end(i64 8, i8* %168) #2, !dbg !9105
  %169 = bitcast %struct._Py_atomic_address** %atomic_val127 to i8*, !dbg !9105
  call void @llvm.lifetime.end(i64 8, i8* %169) #2, !dbg !9105
  %170 = load i8*, i8** %tmp141, !dbg !9106, !tbaa !1829
  %171 = bitcast i8* %170 to %struct._ts*, !dbg !9107
  %overflowed142 = getelementptr inbounds %struct._ts, %struct._ts* %171, i32 0, i32 5, !dbg !9108
  store i8 0, i8* %overflowed142, align 1, !dbg !9109, !tbaa !7948
  br label %if.end.143, !dbg !9110

if.end.143:                                       ; preds = %sw.epilog.140, %cond.end.122
  br label %do.cond.144, !dbg !9111

do.cond.144:                                      ; preds = %if.end.143
  br label %do.end.145, !dbg !9114

do.end.145:                                       ; preds = %do.cond.144
  br label %do.body.146, !dbg !9116

do.body.146:                                      ; preds = %do.end.145
  %172 = bitcast %struct._object** %_py_decref_tmp148 to i8*, !dbg !9117
  call void @llvm.lifetime.start(i64 8, i8* %172) #2, !dbg !9117
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp148, metadata !1420, metadata !1833), !dbg !9119
  %173 = load %struct._object*, %struct._object** %checker, align 8, !dbg !9120, !tbaa !1829
  store %struct._object* %173, %struct._object** %_py_decref_tmp148, align 8, !dbg !9119, !tbaa !1829
  %174 = load %struct._object*, %struct._object** %_py_decref_tmp148, align 8, !dbg !9121, !tbaa !1829
  %ob_refcnt149 = getelementptr inbounds %struct._object, %struct._object* %174, i32 0, i32 0, !dbg !9123
  %175 = load i64, i64* %ob_refcnt149, align 8, !dbg !9124, !tbaa !1853
  %dec150 = add i64 %175, -1, !dbg !9124
  store i64 %dec150, i64* %ob_refcnt149, align 8, !dbg !9124, !tbaa !1853
  %cmp151 = icmp ne i64 %dec150, 0, !dbg !9125
  br i1 %cmp151, label %if.then.152, label %if.else.153, !dbg !9126

if.then.152:                                      ; preds = %do.body.146
  br label %if.end.156, !dbg !9127

if.else.153:                                      ; preds = %do.body.146
  %176 = load %struct._object*, %struct._object** %_py_decref_tmp148, align 8, !dbg !9129, !tbaa !1829
  %ob_type154 = getelementptr inbounds %struct._object, %struct._object* %176, i32 0, i32 1, !dbg !9131
  %177 = load %struct._typeobject*, %struct._typeobject** %ob_type154, align 8, !dbg !9131, !tbaa !1845
  %tp_dealloc155 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %177, i32 0, i32 4, !dbg !9132
  %178 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc155, align 8, !dbg !9132, !tbaa !2033
  %179 = load %struct._object*, %struct._object** %_py_decref_tmp148, align 8, !dbg !9133, !tbaa !1829
  call void %178(%struct._object* %179), !dbg !9134
  br label %if.end.156

if.end.156:                                       ; preds = %if.else.153, %if.then.152
  %180 = bitcast %struct._object** %_py_decref_tmp148 to i8*, !dbg !9135
  call void @llvm.lifetime.end(i64 8, i8* %180) #2, !dbg !9135
  br label %do.cond.157, !dbg !9137

do.cond.157:                                      ; preds = %if.end.156
  br label %do.end.158, !dbg !9138

do.end.158:                                       ; preds = %do.cond.157
  %181 = load %struct._object*, %struct._object** %res, align 8, !dbg !9140, !tbaa !1829
  %cmp159 = icmp ne %struct._object* %181, null, !dbg !9141
  br i1 %cmp159, label %if.then.160, label %if.end.175, !dbg !9142

if.then.160:                                      ; preds = %do.end.158
  %182 = load %struct._object*, %struct._object** %res, align 8, !dbg !9143, !tbaa !1829
  %call161 = call i32 @PyObject_IsTrue(%struct._object* %182), !dbg !9144
  store i32 %call161, i32* %ok, align 4, !dbg !9145, !tbaa !2764
  br label %do.body.162, !dbg !9146

do.body.162:                                      ; preds = %if.then.160
  %183 = bitcast %struct._object** %_py_decref_tmp164 to i8*, !dbg !9147
  call void @llvm.lifetime.start(i64 8, i8* %183) #2, !dbg !9147
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp164, metadata !1422, metadata !1833), !dbg !9149
  %184 = load %struct._object*, %struct._object** %res, align 8, !dbg !9150, !tbaa !1829
  store %struct._object* %184, %struct._object** %_py_decref_tmp164, align 8, !dbg !9149, !tbaa !1829
  %185 = load %struct._object*, %struct._object** %_py_decref_tmp164, align 8, !dbg !9151, !tbaa !1829
  %ob_refcnt165 = getelementptr inbounds %struct._object, %struct._object* %185, i32 0, i32 0, !dbg !9153
  %186 = load i64, i64* %ob_refcnt165, align 8, !dbg !9154, !tbaa !1853
  %dec166 = add i64 %186, -1, !dbg !9154
  store i64 %dec166, i64* %ob_refcnt165, align 8, !dbg !9154, !tbaa !1853
  %cmp167 = icmp ne i64 %dec166, 0, !dbg !9155
  br i1 %cmp167, label %if.then.168, label %if.else.169, !dbg !9156

if.then.168:                                      ; preds = %do.body.162
  br label %if.end.172, !dbg !9157

if.else.169:                                      ; preds = %do.body.162
  %187 = load %struct._object*, %struct._object** %_py_decref_tmp164, align 8, !dbg !9159, !tbaa !1829
  %ob_type170 = getelementptr inbounds %struct._object, %struct._object* %187, i32 0, i32 1, !dbg !9161
  %188 = load %struct._typeobject*, %struct._typeobject** %ob_type170, align 8, !dbg !9161, !tbaa !1845
  %tp_dealloc171 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %188, i32 0, i32 4, !dbg !9162
  %189 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc171, align 8, !dbg !9162, !tbaa !2033
  %190 = load %struct._object*, %struct._object** %_py_decref_tmp164, align 8, !dbg !9163, !tbaa !1829
  call void %189(%struct._object* %190), !dbg !9164
  br label %if.end.172

if.end.172:                                       ; preds = %if.else.169, %if.then.168
  %191 = bitcast %struct._object** %_py_decref_tmp164 to i8*, !dbg !9165
  call void @llvm.lifetime.end(i64 8, i8* %191) #2, !dbg !9165
  br label %do.cond.173, !dbg !9167

do.cond.173:                                      ; preds = %if.end.172
  br label %do.end.174, !dbg !9168

do.end.174:                                       ; preds = %do.cond.173
  br label %if.end.175, !dbg !9170

if.end.175:                                       ; preds = %do.end.174, %do.end.158
  %192 = load i32, i32* %ok, align 4, !dbg !9171, !tbaa !2764
  store i32 %192, i32* %retval, !dbg !9172
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.176, !dbg !9172

cleanup.176:                                      ; preds = %if.end.175, %do.end.94
  %193 = bitcast i32* %ok to i8*, !dbg !9173
  call void @llvm.lifetime.end(i64 4, i8* %193) #2, !dbg !9173
  %194 = bitcast %struct._object** %res to i8*, !dbg !9173
  call void @llvm.lifetime.end(i64 8, i8* %194) #2, !dbg !9173
  br label %cleanup.185

if.else.178:                                      ; preds = %if.end.57
  %call179 = call %struct._object* @PyErr_Occurred(), !dbg !9174
  %tobool180 = icmp ne %struct._object* %call179, null, !dbg !9174
  br i1 %tobool180, label %if.then.181, label %if.end.182, !dbg !9176

if.then.181:                                      ; preds = %if.else.178
  store i32 -1, i32* %retval, !dbg !9177
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.185, !dbg !9177

if.end.182:                                       ; preds = %if.else.178
  br label %if.end.183

if.end.183:                                       ; preds = %if.end.182
  %195 = load %struct._object*, %struct._object** %inst.addr, align 8, !dbg !9178, !tbaa !1829
  %196 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9179, !tbaa !1829
  %call184 = call i32 @recursive_isinstance(%struct._object* %195, %struct._object* %196), !dbg !9180
  store i32 %call184, i32* %retval, !dbg !9181
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.185, !dbg !9181

cleanup.185:                                      ; preds = %if.end.183, %if.then.181, %cleanup.176, %cleanup.54, %if.then
  %197 = bitcast %struct._object** %checker to i8*, !dbg !9182
  call void @llvm.lifetime.end(i64 8, i8* %197) #2, !dbg !9182
  %198 = load i32, i32* %retval, !dbg !9182
  ret i32 %198, !dbg !9182
}

declare i32 @PyObject_IsTrue(%struct._object*) #3

; Function Attrs: nounwind uwtable
define internal i32 @recursive_isinstance(%struct._object* %inst, %struct._object* %cls) #0 {
entry:
  %retval = alloca i32, align 4
  %inst.addr = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  %icls = alloca %struct._object*, align 8
  %retval1 = alloca i32, align 4
  %c = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp46 = alloca %struct._object*, align 8
  store %struct._object* %inst, %struct._object** %inst.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %inst.addr, metadata !1741, metadata !1833), !dbg !9183
  store %struct._object* %cls, %struct._object** %cls.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %cls.addr, metadata !1742, metadata !1833), !dbg !9184
  %0 = bitcast %struct._object** %icls to i8*, !dbg !9185
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !9185
  call void @llvm.dbg.declare(metadata %struct._object** %icls, metadata !1743, metadata !1833), !dbg !9186
  %1 = bitcast i32* %retval1 to i8*, !dbg !9187
  call void @llvm.lifetime.start(i64 4, i8* %1) #2, !dbg !9187
  call void @llvm.dbg.declare(metadata i32* %retval1, metadata !1744, metadata !1833), !dbg !9188
  store i32 0, i32* %retval1, align 4, !dbg !9188, !tbaa !2764
  %2 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9189, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1, !dbg !9190
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9190, !tbaa !1845
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19, !dbg !9191
  %4 = load i64, i64* %tp_flags, align 8, !dbg !9191, !tbaa !2086
  %and = and i64 %4, 2147483648, !dbg !9192
  %cmp = icmp ne i64 %and, 0, !dbg !9193
  br i1 %cmp, label %if.then, label %if.else.30, !dbg !9194

if.then:                                          ; preds = %entry
  %5 = load %struct._object*, %struct._object** %inst.addr, align 8, !dbg !9195, !tbaa !1829
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1, !dbg !9196
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8, !dbg !9196, !tbaa !1845
  %7 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9197, !tbaa !1829
  %8 = bitcast %struct._object* %7 to %struct._typeobject*, !dbg !9198
  %cmp3 = icmp eq %struct._typeobject* %6, %8, !dbg !9199
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !9200

lor.rhs:                                          ; preds = %if.then
  %9 = load %struct._object*, %struct._object** %inst.addr, align 8, !dbg !9201, !tbaa !1829
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1, !dbg !9203
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8, !dbg !9203, !tbaa !1845
  %11 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9204, !tbaa !1829
  %12 = bitcast %struct._object* %11 to %struct._typeobject*, !dbg !9205
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %10, %struct._typeobject* %12), !dbg !9206
  %tobool = icmp ne i32 %call, 0, !dbg !9200
  br label %lor.end, !dbg !9200

lor.end:                                          ; preds = %lor.rhs, %if.then
  %13 = phi i1 [ true, %if.then ], [ %tobool, %lor.rhs ]
  %lor.ext = zext i1 %13 to i32, !dbg !9207
  store i32 %lor.ext, i32* %retval1, align 4, !dbg !9210, !tbaa !2764
  %14 = load i32, i32* %retval1, align 4, !dbg !9211, !tbaa !2764
  %cmp5 = icmp eq i32 %14, 0, !dbg !9212
  br i1 %cmp5, label %if.then.6, label %if.end.29, !dbg !9213

if.then.6:                                        ; preds = %lor.end
  %15 = bitcast %struct._object** %c to i8*, !dbg !9214
  call void @llvm.lifetime.start(i64 8, i8* %15) #2, !dbg !9214
  call void @llvm.dbg.declare(metadata %struct._object** %c, metadata !1745, metadata !1833), !dbg !9215
  %16 = load %struct._object*, %struct._object** %inst.addr, align 8, !dbg !9216, !tbaa !1829
  %call7 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %16, %struct._Py_Identifier* @recursive_isinstance.PyId___class__), !dbg !9217
  store %struct._object* %call7, %struct._object** %c, align 8, !dbg !9215, !tbaa !1829
  %17 = load %struct._object*, %struct._object** %c, align 8, !dbg !9218, !tbaa !1829
  %cmp8 = icmp eq %struct._object* %17, null, !dbg !9219
  br i1 %cmp8, label %if.then.9, label %if.else.13, !dbg !9220

if.then.9:                                        ; preds = %if.then.6
  %18 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8, !dbg !9221, !tbaa !1829
  %call10 = call i32 @PyErr_ExceptionMatches(%struct._object* %18), !dbg !9224
  %tobool11 = icmp ne i32 %call10, 0, !dbg !9224
  br i1 %tobool11, label %if.then.12, label %if.else, !dbg !9225

if.then.12:                                       ; preds = %if.then.9
  call void @PyErr_Clear(), !dbg !9226
  br label %if.end, !dbg !9226

if.else:                                          ; preds = %if.then.9
  store i32 -1, i32* %retval1, align 4, !dbg !9227, !tbaa !2764
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.12
  br label %if.end.28, !dbg !9228

if.else.13:                                       ; preds = %if.then.6
  %19 = load %struct._object*, %struct._object** %c, align 8, !dbg !9229, !tbaa !1829
  %20 = load %struct._object*, %struct._object** %inst.addr, align 8, !dbg !9231, !tbaa !1829
  %ob_type14 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1, !dbg !9232
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type14, align 8, !dbg !9232, !tbaa !1845
  %22 = bitcast %struct._typeobject* %21 to %struct._object*, !dbg !9233
  %cmp15 = icmp ne %struct._object* %19, %22, !dbg !9234
  br i1 %cmp15, label %land.lhs.true, label %if.end.22, !dbg !9235

land.lhs.true:                                    ; preds = %if.else.13
  %23 = load %struct._object*, %struct._object** %c, align 8, !dbg !9236, !tbaa !1829
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1, !dbg !9237
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8, !dbg !9237, !tbaa !1845
  %tp_flags17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 19, !dbg !9238
  %25 = load i64, i64* %tp_flags17, align 8, !dbg !9238, !tbaa !2086
  %and18 = and i64 %25, 2147483648, !dbg !9239
  %cmp19 = icmp ne i64 %and18, 0, !dbg !9240
  br i1 %cmp19, label %if.then.20, label %if.end.22, !dbg !9241

if.then.20:                                       ; preds = %land.lhs.true
  %26 = load %struct._object*, %struct._object** %c, align 8, !dbg !9242, !tbaa !1829
  %27 = bitcast %struct._object* %26 to %struct._typeobject*, !dbg !9243
  %28 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9244, !tbaa !1829
  %29 = bitcast %struct._object* %28 to %struct._typeobject*, !dbg !9245
  %call21 = call i32 @PyType_IsSubtype(%struct._typeobject* %27, %struct._typeobject* %29), !dbg !9246
  store i32 %call21, i32* %retval1, align 4, !dbg !9247, !tbaa !2764
  br label %if.end.22, !dbg !9248

if.end.22:                                        ; preds = %if.then.20, %land.lhs.true, %if.else.13
  br label %do.body, !dbg !9249

do.body:                                          ; preds = %if.end.22
  %30 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9250
  call void @llvm.lifetime.start(i64 8, i8* %30) #2, !dbg !9250
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1750, metadata !1833), !dbg !9252
  %31 = load %struct._object*, %struct._object** %c, align 8, !dbg !9253, !tbaa !1829
  store %struct._object* %31, %struct._object** %_py_decref_tmp, align 8, !dbg !9252, !tbaa !1829
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9254, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0, !dbg !9256
  %33 = load i64, i64* %ob_refcnt, align 8, !dbg !9257, !tbaa !1853
  %dec = add i64 %33, -1, !dbg !9257
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !9257, !tbaa !1853
  %cmp23 = icmp ne i64 %dec, 0, !dbg !9258
  br i1 %cmp23, label %if.then.24, label %if.else.25, !dbg !9259

if.then.24:                                       ; preds = %do.body
  br label %if.end.27, !dbg !9260

if.else.25:                                       ; preds = %do.body
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9262, !tbaa !1829
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1, !dbg !9264
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8, !dbg !9264, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4, !dbg !9265
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !9265, !tbaa !2033
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9266, !tbaa !1829
  call void %36(%struct._object* %37), !dbg !9267
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.25, %if.then.24
  %38 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9268
  call void @llvm.lifetime.end(i64 8, i8* %38) #2, !dbg !9268
  br label %do.cond, !dbg !9270

do.cond:                                          ; preds = %if.end.27
  br label %do.end, !dbg !9271

do.end:                                           ; preds = %do.cond
  br label %if.end.28

if.end.28:                                        ; preds = %do.end, %if.end
  %39 = bitcast %struct._object** %c to i8*, !dbg !9273
  call void @llvm.lifetime.end(i64 8, i8* %39) #2, !dbg !9273
  br label %if.end.29, !dbg !9274

if.end.29:                                        ; preds = %if.end.28, %lor.end
  br label %if.end.58, !dbg !9275

if.else.30:                                       ; preds = %entry
  %40 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9276, !tbaa !1829
  %call31 = call i32 @check_class(%struct._object* %40, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.90, i32 0, i32 0)), !dbg !9278
  %tobool32 = icmp ne i32 %call31, 0, !dbg !9278
  br i1 %tobool32, label %if.end.34, label %if.then.33, !dbg !9279

if.then.33:                                       ; preds = %if.else.30
  store i32 -1, i32* %retval, !dbg !9280
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9280

if.end.34:                                        ; preds = %if.else.30
  %41 = load %struct._object*, %struct._object** %inst.addr, align 8, !dbg !9281, !tbaa !1829
  %call35 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %41, %struct._Py_Identifier* @recursive_isinstance.PyId___class__), !dbg !9282
  store %struct._object* %call35, %struct._object** %icls, align 8, !dbg !9283, !tbaa !1829
  %42 = load %struct._object*, %struct._object** %icls, align 8, !dbg !9284, !tbaa !1829
  %cmp36 = icmp eq %struct._object* %42, null, !dbg !9285
  br i1 %cmp36, label %if.then.37, label %if.else.43, !dbg !9286

if.then.37:                                       ; preds = %if.end.34
  %43 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8, !dbg !9287, !tbaa !1829
  %call38 = call i32 @PyErr_ExceptionMatches(%struct._object* %43), !dbg !9290
  %tobool39 = icmp ne i32 %call38, 0, !dbg !9290
  br i1 %tobool39, label %if.then.40, label %if.else.41, !dbg !9291

if.then.40:                                       ; preds = %if.then.37
  call void @PyErr_Clear(), !dbg !9292
  br label %if.end.42, !dbg !9292

if.else.41:                                       ; preds = %if.then.37
  store i32 -1, i32* %retval1, align 4, !dbg !9293, !tbaa !2764
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.41, %if.then.40
  br label %if.end.57, !dbg !9294

if.else.43:                                       ; preds = %if.end.34
  %44 = load %struct._object*, %struct._object** %icls, align 8, !dbg !9295, !tbaa !1829
  %45 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9296, !tbaa !1829
  %call44 = call i32 @abstract_issubclass(%struct._object* %44, %struct._object* %45), !dbg !9297
  store i32 %call44, i32* %retval1, align 4, !dbg !9298, !tbaa !2764
  br label %do.body.45, !dbg !9299

do.body.45:                                       ; preds = %if.else.43
  %46 = bitcast %struct._object** %_py_decref_tmp46 to i8*, !dbg !9300
  call void @llvm.lifetime.start(i64 8, i8* %46) #2, !dbg !9300
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp46, metadata !1754, metadata !1833), !dbg !9302
  %47 = load %struct._object*, %struct._object** %icls, align 8, !dbg !9303, !tbaa !1829
  store %struct._object* %47, %struct._object** %_py_decref_tmp46, align 8, !dbg !9302, !tbaa !1829
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8, !dbg !9304, !tbaa !1829
  %ob_refcnt47 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0, !dbg !9306
  %49 = load i64, i64* %ob_refcnt47, align 8, !dbg !9307, !tbaa !1853
  %dec48 = add i64 %49, -1, !dbg !9307
  store i64 %dec48, i64* %ob_refcnt47, align 8, !dbg !9307, !tbaa !1853
  %cmp49 = icmp ne i64 %dec48, 0, !dbg !9308
  br i1 %cmp49, label %if.then.50, label %if.else.51, !dbg !9309

if.then.50:                                       ; preds = %do.body.45
  br label %if.end.54, !dbg !9310

if.else.51:                                       ; preds = %do.body.45
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8, !dbg !9312, !tbaa !1829
  %ob_type52 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1, !dbg !9314
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type52, align 8, !dbg !9314, !tbaa !1845
  %tp_dealloc53 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4, !dbg !9315
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc53, align 8, !dbg !9315, !tbaa !2033
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8, !dbg !9316, !tbaa !1829
  call void %52(%struct._object* %53), !dbg !9317
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.51, %if.then.50
  %54 = bitcast %struct._object** %_py_decref_tmp46 to i8*, !dbg !9318
  call void @llvm.lifetime.end(i64 8, i8* %54) #2, !dbg !9318
  br label %do.cond.55, !dbg !9320

do.cond.55:                                       ; preds = %if.end.54
  br label %do.end.56, !dbg !9321

do.end.56:                                        ; preds = %do.cond.55
  br label %if.end.57

if.end.57:                                        ; preds = %do.end.56, %if.end.42
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %if.end.29
  %55 = load i32, i32* %retval1, align 4, !dbg !9323, !tbaa !2764
  store i32 %55, i32* %retval, !dbg !9324
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9324

cleanup:                                          ; preds = %if.end.58, %if.then.33
  %56 = bitcast i32* %retval1 to i8*, !dbg !9325
  call void @llvm.lifetime.end(i64 4, i8* %56) #2, !dbg !9325
  %57 = bitcast %struct._object** %icls to i8*, !dbg !9325
  call void @llvm.lifetime.end(i64 8, i8* %57) #2, !dbg !9325
  %58 = load i32, i32* %retval, !dbg !9325
  ret i32 %58, !dbg !9325
}

; Function Attrs: nounwind uwtable
define i32 @PyObject_IsSubclass(%struct._object* %derived, %struct._object* %cls) #0 {
entry:
  %retval = alloca i32, align 4
  %derived.addr = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  %checker = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %r = alloca i32, align 4
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %item = alloca %struct._object*, align 8
  %atomic_val14 = alloca %struct._Py_atomic_address*, align 8
  %result16 = alloca i8*, align 8
  %volatile_data18 = alloca i8**, align 8
  %order21 = alloca i32, align 4
  %tmp28 = alloca i8*, align 8
  %atomic_val34 = alloca %struct._Py_atomic_address*, align 8
  %result36 = alloca i8*, align 8
  %volatile_data38 = alloca i8**, align 8
  %order41 = alloca i32, align 4
  %tmp48 = alloca i8*, align 8
  %res = alloca %struct._object*, align 8
  %ok = alloca i32, align 4
  %atomic_val60 = alloca %struct._Py_atomic_address*, align 8
  %result62 = alloca i8*, align 8
  %volatile_data64 = alloca i8**, align 8
  %order67 = alloca i32, align 4
  %tmp74 = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %atomic_val95 = alloca %struct._Py_atomic_address*, align 8
  %result97 = alloca i8*, align 8
  %volatile_data99 = alloca i8**, align 8
  %order102 = alloca i32, align 4
  %tmp109 = alloca i8*, align 8
  %atomic_val123 = alloca %struct._Py_atomic_address*, align 8
  %result125 = alloca i8*, align 8
  %volatile_data127 = alloca i8**, align 8
  %order130 = alloca i32, align 4
  %tmp137 = alloca i8*, align 8
  %_py_decref_tmp144 = alloca %struct._object*, align 8
  %_py_decref_tmp160 = alloca %struct._object*, align 8
  store %struct._object* %derived, %struct._object** %derived.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %derived.addr, metadata !1428, metadata !1833), !dbg !9326
  store %struct._object* %cls, %struct._object** %cls.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %cls.addr, metadata !1429, metadata !1833), !dbg !9327
  %0 = bitcast %struct._object** %checker to i8*, !dbg !9328
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !9328
  call void @llvm.dbg.declare(metadata %struct._object** %checker, metadata !1430, metadata !1833), !dbg !9329
  %1 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9330, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !9331
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9331, !tbaa !1845
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 19, !dbg !9332
  %3 = load i64, i64* %tp_flags, align 8, !dbg !9332, !tbaa !2086
  %and = and i64 %3, 67108864, !dbg !9333
  %cmp = icmp ne i64 %and, 0, !dbg !9334
  br i1 %cmp, label %if.then, label %if.end.53, !dbg !9335

if.then:                                          ; preds = %entry
  %4 = bitcast i64* %i to i8*, !dbg !9336
  call void @llvm.lifetime.start(i64 8, i8* %4) #2, !dbg !9336
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1431, metadata !1833), !dbg !9337
  %5 = bitcast i64* %n to i8*, !dbg !9338
  call void @llvm.lifetime.start(i64 8, i8* %5) #2, !dbg !9338
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1434, metadata !1833), !dbg !9339
  %6 = bitcast i32* %r to i8*, !dbg !9340
  call void @llvm.lifetime.start(i64 4, i8* %6) #2, !dbg !9340
  call void @llvm.dbg.declare(metadata i32* %r, metadata !1435, metadata !1833), !dbg !9341
  store i32 0, i32* %r, align 4, !dbg !9341, !tbaa !2764
  %7 = bitcast %struct._Py_atomic_address** %atomic_val to i8*, !dbg !9342
  call void @llvm.lifetime.start(i64 8, i8* %7) #2, !dbg !9342
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val, metadata !1436, metadata !1833), !dbg !9343
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8, !dbg !9343, !tbaa !1829
  %8 = bitcast i8** %result to i8*, !dbg !9344
  call void @llvm.lifetime.start(i64 8, i8* %8) #2, !dbg !9344
  call void @llvm.dbg.declare(metadata i8** %result, metadata !1439, metadata !1833), !dbg !9345
  %9 = bitcast i8*** %volatile_data to i8*, !dbg !9346
  call void @llvm.lifetime.start(i64 8, i8* %9) #2, !dbg !9346
  call void @llvm.dbg.declare(metadata i8*** %volatile_data, metadata !1440, metadata !1833), !dbg !9347
  %10 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8, !dbg !9348, !tbaa !1829
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %10, i32 0, i32 0, !dbg !9349
  store i8** %_value, i8*** %volatile_data, align 8, !dbg !9347, !tbaa !1829
  %11 = bitcast i32* %order to i8*, !dbg !9350
  call void @llvm.lifetime.start(i64 4, i8* %11) #2, !dbg !9350
  call void @llvm.dbg.declare(metadata i32* %order, metadata !1441, metadata !1833), !dbg !9351
  store i32 0, i32* %order, align 4, !dbg !9351, !tbaa !3250
  %12 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8, !dbg !9352, !tbaa !1829
  %13 = bitcast %struct._Py_atomic_address* %12 to i8*, !dbg !9352
  %14 = load i32, i32* %order, align 4, !dbg !9353, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %13, i32 %14), !dbg !9354
  %15 = load i32, i32* %order, align 4, !dbg !9355, !tbaa !3250
  br label %LeafBlock

LeafBlock:                                        ; preds = %if.then
  %.off = add i32 %15, -2
  %SwitchLeaf = icmp ule i32 %.off, 2
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  call void @_Py_atomic_thread_fence(i32 2), !dbg !9356
  br label %sw.epilog, !dbg !9361

NewDefault:                                       ; preds = %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  br label %sw.epilog, !dbg !9362

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %16 = load i8**, i8*** %volatile_data, align 8, !dbg !9364, !tbaa !1829
  %17 = load volatile i8*, i8** %16, align 8, !dbg !9367, !tbaa !1829
  store i8* %17, i8** %result, align 8, !dbg !9368, !tbaa !1829
  %18 = load i32, i32* %order, align 4, !dbg !9369, !tbaa !3250
  br label %NodeBlock

NodeBlock:                                        ; preds = %sw.epilog
  %Pivot = icmp slt i32 %18, 3
  br i1 %Pivot, label %LeafBlock.2, label %LeafBlock.4

LeafBlock.4:                                      ; preds = %NodeBlock
  %.off.5 = add i32 %18, -3
  %SwitchLeaf6 = icmp ule i32 %.off.5, 1
  br i1 %SwitchLeaf6, label %sw.bb.1, label %NewDefault.1

LeafBlock.2:                                      ; preds = %NodeBlock
  %SwitchLeaf3 = icmp eq i32 %18, 1
  br i1 %SwitchLeaf3, label %sw.bb.1, label %NewDefault.1

sw.bb.1:                                          ; preds = %LeafBlock.4, %LeafBlock.2
  call void @_Py_atomic_signal_fence(i32 1), !dbg !9370
  br label %sw.epilog.3, !dbg !9375

NewDefault.1:                                     ; preds = %LeafBlock.4, %LeafBlock.2
  br label %sw.default.2

sw.default.2:                                     ; preds = %NewDefault.1
  br label %sw.epilog.3, !dbg !9376

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %19 = load i8*, i8** %result, align 8, !dbg !9378, !tbaa !1829
  store i8* %19, i8** %tmp, !dbg !9381, !tbaa !1829
  %20 = bitcast i32* %order to i8*, !dbg !9382
  call void @llvm.lifetime.end(i64 4, i8* %20) #2, !dbg !9382
  %21 = bitcast i8*** %volatile_data to i8*, !dbg !9382
  call void @llvm.lifetime.end(i64 8, i8* %21) #2, !dbg !9382
  %22 = bitcast i8** %result to i8*, !dbg !9382
  call void @llvm.lifetime.end(i64 8, i8* %22) #2, !dbg !9382
  %23 = bitcast %struct._Py_atomic_address** %atomic_val to i8*, !dbg !9382
  call void @llvm.lifetime.end(i64 8, i8* %23) #2, !dbg !9382
  %24 = load i8*, i8** %tmp, !dbg !9383, !tbaa !1829
  %25 = bitcast i8* %24 to %struct._ts*, !dbg !9384
  %recursion_depth = getelementptr inbounds %struct._ts, %struct._ts* %25, i32 0, i32 4, !dbg !9385
  %26 = load i32, i32* %recursion_depth, align 4, !dbg !9386, !tbaa !7826
  %inc = add i32 %26, 1, !dbg !9386
  store i32 %inc, i32* %recursion_depth, align 4, !dbg !9386, !tbaa !7826
  %27 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !9387, !tbaa !2764
  %cmp4 = icmp sgt i32 %inc, %27, !dbg !9388
  br i1 %cmp4, label %land.lhs.true, label %if.end, !dbg !9389

land.lhs.true:                                    ; preds = %sw.epilog.3
  %call = call i32 @_Py_CheckRecursiveCall(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.80, i32 0, i32 0)), !dbg !9390
  %tobool = icmp ne i32 %call, 0, !dbg !9390
  br i1 %tobool, label %if.then.5, label %if.end, !dbg !9392

if.then.5:                                        ; preds = %land.lhs.true
  store i32 -1, i32* %retval, !dbg !9393
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.50, !dbg !9393

if.end:                                           ; preds = %land.lhs.true, %sw.epilog.3
  %28 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9394, !tbaa !1829
  %29 = bitcast %struct._object* %28 to %struct.PyVarObject*, !dbg !9395
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %29, i32 0, i32 1, !dbg !9396
  %30 = load i64, i64* %ob_size, align 8, !dbg !9396, !tbaa !5788
  store i64 %30, i64* %n, align 8, !dbg !9397, !tbaa !1963
  store i64 0, i64* %i, align 8, !dbg !9398, !tbaa !1963
  br label %for.cond, !dbg !9399

for.cond:                                         ; preds = %for.inc, %if.end
  %31 = load i64, i64* %i, align 8, !dbg !9400, !tbaa !1963
  %32 = load i64, i64* %n, align 8, !dbg !9403, !tbaa !1963
  %cmp6 = icmp slt i64 %31, %32, !dbg !9404
  br i1 %cmp6, label %for.body, label %for.end, !dbg !9405

for.body:                                         ; preds = %for.cond
  %33 = bitcast %struct._object** %item to i8*, !dbg !9406
  call void @llvm.lifetime.start(i64 8, i8* %33) #2, !dbg !9406
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !1442, metadata !1833), !dbg !9407
  %34 = load i64, i64* %i, align 8, !dbg !9408, !tbaa !1963
  %35 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9409, !tbaa !1829
  %36 = bitcast %struct._object* %35 to %struct.PyTupleObject*, !dbg !9410
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %36, i32 0, i32 1, !dbg !9411
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %34, !dbg !9412
  %37 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !9412, !tbaa !1829
  store %struct._object* %37, %struct._object** %item, align 8, !dbg !9407, !tbaa !1829
  %38 = load %struct._object*, %struct._object** %derived.addr, align 8, !dbg !9413, !tbaa !1829
  %39 = load %struct._object*, %struct._object** %item, align 8, !dbg !9414, !tbaa !1829
  %call8 = call i32 @PyObject_IsSubclass(%struct._object* %38, %struct._object* %39), !dbg !9415
  store i32 %call8, i32* %r, align 4, !dbg !9416, !tbaa !2764
  %40 = load i32, i32* %r, align 4, !dbg !9417, !tbaa !2764
  %cmp9 = icmp ne i32 %40, 0, !dbg !9419
  br i1 %cmp9, label %if.then.10, label %if.end.11, !dbg !9420

if.then.10:                                       ; preds = %for.body
  store i32 4, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9421

if.end.11:                                        ; preds = %for.body
  store i32 0, i32* %cleanup.dest.slot, !dbg !9422
  br label %cleanup, !dbg !9422

cleanup:                                          ; preds = %if.end.11, %if.then.10
  %41 = bitcast %struct._object** %item to i8*, !dbg !9423
  call void @llvm.lifetime.end(i64 8, i8* %41) #2, !dbg !9423
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.8

LeafBlock.8:                                      ; preds = %cleanup
  %SwitchLeaf9 = icmp eq i32 %cleanup.dest, 4
  br i1 %SwitchLeaf9, label %for.end, label %NewDefault.7

NewDefault.7:                                     ; preds = %LeafBlock.8
  br label %cleanup.cont

cleanup.cont:                                     ; preds = %NewDefault.7
  br label %for.inc, !dbg !9424

for.inc:                                          ; preds = %cleanup.cont
  %42 = load i64, i64* %i, align 8, !dbg !9425, !tbaa !1963
  %inc12 = add i64 %42, 1, !dbg !9425
  store i64 %inc12, i64* %i, align 8, !dbg !9425, !tbaa !1963
  br label %for.cond, !dbg !9426

for.end:                                          ; preds = %LeafBlock.8, %for.cond
  br label %do.body, !dbg !9427

do.body:                                          ; preds = %for.end
  %43 = bitcast %struct._Py_atomic_address** %atomic_val14 to i8*, !dbg !9428
  call void @llvm.lifetime.start(i64 8, i8* %43) #2, !dbg !9428
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val14, metadata !1446, metadata !1833), !dbg !9430
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val14, align 8, !dbg !9430, !tbaa !1829
  %44 = bitcast i8** %result16 to i8*, !dbg !9431
  call void @llvm.lifetime.start(i64 8, i8* %44) #2, !dbg !9431
  call void @llvm.dbg.declare(metadata i8** %result16, metadata !1450, metadata !1833), !dbg !9432
  %45 = bitcast i8*** %volatile_data18 to i8*, !dbg !9433
  call void @llvm.lifetime.start(i64 8, i8* %45) #2, !dbg !9433
  call void @llvm.dbg.declare(metadata i8*** %volatile_data18, metadata !1451, metadata !1833), !dbg !9434
  %46 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val14, align 8, !dbg !9435, !tbaa !1829
  %_value19 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %46, i32 0, i32 0, !dbg !9436
  store i8** %_value19, i8*** %volatile_data18, align 8, !dbg !9434, !tbaa !1829
  %47 = bitcast i32* %order21 to i8*, !dbg !9437
  call void @llvm.lifetime.start(i64 4, i8* %47) #2, !dbg !9437
  call void @llvm.dbg.declare(metadata i32* %order21, metadata !1452, metadata !1833), !dbg !9438
  store i32 0, i32* %order21, align 4, !dbg !9438, !tbaa !3250
  %48 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val14, align 8, !dbg !9439, !tbaa !1829
  %49 = bitcast %struct._Py_atomic_address* %48 to i8*, !dbg !9439
  %50 = load i32, i32* %order21, align 4, !dbg !9440, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %49, i32 %50), !dbg !9441
  %51 = load i32, i32* %order21, align 4, !dbg !9442, !tbaa !3250
  br label %LeafBlock.11

LeafBlock.11:                                     ; preds = %do.body
  %.off.12 = add i32 %51, -2
  %SwitchLeaf13 = icmp ule i32 %.off.12, 2
  br i1 %SwitchLeaf13, label %sw.bb.22, label %NewDefault.10

sw.bb.22:                                         ; preds = %LeafBlock.11
  call void @_Py_atomic_thread_fence(i32 2), !dbg !9443
  br label %sw.epilog.24, !dbg !9448

NewDefault.10:                                    ; preds = %LeafBlock.11
  br label %sw.default.23

sw.default.23:                                    ; preds = %NewDefault.10
  br label %sw.epilog.24, !dbg !9449

sw.epilog.24:                                     ; preds = %sw.default.23, %sw.bb.22
  %52 = load i8**, i8*** %volatile_data18, align 8, !dbg !9451, !tbaa !1829
  %53 = load volatile i8*, i8** %52, align 8, !dbg !9454, !tbaa !1829
  store i8* %53, i8** %result16, align 8, !dbg !9455, !tbaa !1829
  %54 = load i32, i32* %order21, align 4, !dbg !9456, !tbaa !3250
  br label %NodeBlock.20

NodeBlock.20:                                     ; preds = %sw.epilog.24
  %Pivot.21 = icmp slt i32 %54, 3
  br i1 %Pivot.21, label %LeafBlock.15, label %LeafBlock.17

LeafBlock.17:                                     ; preds = %NodeBlock.20
  %.off.18 = add i32 %54, -3
  %SwitchLeaf19 = icmp ule i32 %.off.18, 1
  br i1 %SwitchLeaf19, label %sw.bb.25, label %NewDefault.14

LeafBlock.15:                                     ; preds = %NodeBlock.20
  %SwitchLeaf16 = icmp eq i32 %54, 1
  br i1 %SwitchLeaf16, label %sw.bb.25, label %NewDefault.14

sw.bb.25:                                         ; preds = %LeafBlock.17, %LeafBlock.15
  call void @_Py_atomic_signal_fence(i32 1), !dbg !9457
  br label %sw.epilog.27, !dbg !9462

NewDefault.14:                                    ; preds = %LeafBlock.17, %LeafBlock.15
  br label %sw.default.26

sw.default.26:                                    ; preds = %NewDefault.14
  br label %sw.epilog.27, !dbg !9463

sw.epilog.27:                                     ; preds = %sw.default.26, %sw.bb.25
  %55 = load i8*, i8** %result16, align 8, !dbg !9465, !tbaa !1829
  store i8* %55, i8** %tmp28, !dbg !9468, !tbaa !1829
  %56 = bitcast i32* %order21 to i8*, !dbg !9469
  call void @llvm.lifetime.end(i64 4, i8* %56) #2, !dbg !9469
  %57 = bitcast i8*** %volatile_data18 to i8*, !dbg !9469
  call void @llvm.lifetime.end(i64 8, i8* %57) #2, !dbg !9469
  %58 = bitcast i8** %result16 to i8*, !dbg !9469
  call void @llvm.lifetime.end(i64 8, i8* %58) #2, !dbg !9469
  %59 = bitcast %struct._Py_atomic_address** %atomic_val14 to i8*, !dbg !9469
  call void @llvm.lifetime.end(i64 8, i8* %59) #2, !dbg !9469
  %60 = load i8*, i8** %tmp28, !dbg !9470, !tbaa !1829
  %61 = bitcast i8* %60 to %struct._ts*, !dbg !9471
  %recursion_depth29 = getelementptr inbounds %struct._ts, %struct._ts* %61, i32 0, i32 4, !dbg !9472
  %62 = load i32, i32* %recursion_depth29, align 4, !dbg !9473, !tbaa !7826
  %dec = add i32 %62, -1, !dbg !9473
  store i32 %dec, i32* %recursion_depth29, align 4, !dbg !9473, !tbaa !7826
  %63 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !9474, !tbaa !2764
  %cmp30 = icmp sgt i32 %63, 100, !dbg !9475
  br i1 %cmp30, label %cond.true, label %cond.false, !dbg !9476

cond.true:                                        ; preds = %sw.epilog.27
  %64 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !9477, !tbaa !2764
  %sub = sub i32 %64, 50, !dbg !9479
  br label %cond.end, !dbg !9476

cond.false:                                       ; preds = %sw.epilog.27
  %65 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !9480, !tbaa !2764
  %shr = ashr i32 %65, 2, !dbg !9482
  %mul = mul i32 3, %shr, !dbg !9483
  br label %cond.end, !dbg !9476

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %mul, %cond.false ], !dbg !9476
  %cmp31 = icmp slt i32 %dec, %cond, !dbg !9484
  br i1 %cmp31, label %if.then.32, label %if.end.49, !dbg !9487

if.then.32:                                       ; preds = %cond.end
  %66 = bitcast %struct._Py_atomic_address** %atomic_val34 to i8*, !dbg !9488
  call void @llvm.lifetime.start(i64 8, i8* %66) #2, !dbg !9488
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val34, metadata !1453, metadata !1833), !dbg !9490
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val34, align 8, !dbg !9490, !tbaa !1829
  %67 = bitcast i8** %result36 to i8*, !dbg !9491
  call void @llvm.lifetime.start(i64 8, i8* %67) #2, !dbg !9491
  call void @llvm.dbg.declare(metadata i8** %result36, metadata !1455, metadata !1833), !dbg !9492
  %68 = bitcast i8*** %volatile_data38 to i8*, !dbg !9493
  call void @llvm.lifetime.start(i64 8, i8* %68) #2, !dbg !9493
  call void @llvm.dbg.declare(metadata i8*** %volatile_data38, metadata !1456, metadata !1833), !dbg !9494
  %69 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val34, align 8, !dbg !9495, !tbaa !1829
  %_value39 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %69, i32 0, i32 0, !dbg !9496
  store i8** %_value39, i8*** %volatile_data38, align 8, !dbg !9494, !tbaa !1829
  %70 = bitcast i32* %order41 to i8*, !dbg !9497
  call void @llvm.lifetime.start(i64 4, i8* %70) #2, !dbg !9497
  call void @llvm.dbg.declare(metadata i32* %order41, metadata !1457, metadata !1833), !dbg !9498
  store i32 0, i32* %order41, align 4, !dbg !9498, !tbaa !3250
  %71 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val34, align 8, !dbg !9499, !tbaa !1829
  %72 = bitcast %struct._Py_atomic_address* %71 to i8*, !dbg !9499
  %73 = load i32, i32* %order41, align 4, !dbg !9500, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %72, i32 %73), !dbg !9501
  %74 = load i32, i32* %order41, align 4, !dbg !9502, !tbaa !3250
  br label %LeafBlock.23

LeafBlock.23:                                     ; preds = %if.then.32
  %.off.24 = add i32 %74, -2
  %SwitchLeaf25 = icmp ule i32 %.off.24, 2
  br i1 %SwitchLeaf25, label %sw.bb.42, label %NewDefault.22

sw.bb.42:                                         ; preds = %LeafBlock.23
  call void @_Py_atomic_thread_fence(i32 2), !dbg !9503
  br label %sw.epilog.44, !dbg !9508

NewDefault.22:                                    ; preds = %LeafBlock.23
  br label %sw.default.43

sw.default.43:                                    ; preds = %NewDefault.22
  br label %sw.epilog.44, !dbg !9509

sw.epilog.44:                                     ; preds = %sw.default.43, %sw.bb.42
  %75 = load i8**, i8*** %volatile_data38, align 8, !dbg !9511, !tbaa !1829
  %76 = load volatile i8*, i8** %75, align 8, !dbg !9514, !tbaa !1829
  store i8* %76, i8** %result36, align 8, !dbg !9515, !tbaa !1829
  %77 = load i32, i32* %order41, align 4, !dbg !9516, !tbaa !3250
  br label %NodeBlock.32

NodeBlock.32:                                     ; preds = %sw.epilog.44
  %Pivot.33 = icmp slt i32 %77, 3
  br i1 %Pivot.33, label %LeafBlock.27, label %LeafBlock.29

LeafBlock.29:                                     ; preds = %NodeBlock.32
  %.off.30 = add i32 %77, -3
  %SwitchLeaf31 = icmp ule i32 %.off.30, 1
  br i1 %SwitchLeaf31, label %sw.bb.45, label %NewDefault.26

LeafBlock.27:                                     ; preds = %NodeBlock.32
  %SwitchLeaf28 = icmp eq i32 %77, 1
  br i1 %SwitchLeaf28, label %sw.bb.45, label %NewDefault.26

sw.bb.45:                                         ; preds = %LeafBlock.29, %LeafBlock.27
  call void @_Py_atomic_signal_fence(i32 1), !dbg !9517
  br label %sw.epilog.47, !dbg !9522

NewDefault.26:                                    ; preds = %LeafBlock.29, %LeafBlock.27
  br label %sw.default.46

sw.default.46:                                    ; preds = %NewDefault.26
  br label %sw.epilog.47, !dbg !9523

sw.epilog.47:                                     ; preds = %sw.default.46, %sw.bb.45
  %78 = load i8*, i8** %result36, align 8, !dbg !9525, !tbaa !1829
  store i8* %78, i8** %tmp48, !dbg !9528, !tbaa !1829
  %79 = bitcast i32* %order41 to i8*, !dbg !9529
  call void @llvm.lifetime.end(i64 4, i8* %79) #2, !dbg !9529
  %80 = bitcast i8*** %volatile_data38 to i8*, !dbg !9529
  call void @llvm.lifetime.end(i64 8, i8* %80) #2, !dbg !9529
  %81 = bitcast i8** %result36 to i8*, !dbg !9529
  call void @llvm.lifetime.end(i64 8, i8* %81) #2, !dbg !9529
  %82 = bitcast %struct._Py_atomic_address** %atomic_val34 to i8*, !dbg !9529
  call void @llvm.lifetime.end(i64 8, i8* %82) #2, !dbg !9529
  %83 = load i8*, i8** %tmp48, !dbg !9530, !tbaa !1829
  %84 = bitcast i8* %83 to %struct._ts*, !dbg !9531
  %overflowed = getelementptr inbounds %struct._ts, %struct._ts* %84, i32 0, i32 5, !dbg !9532
  store i8 0, i8* %overflowed, align 1, !dbg !9533, !tbaa !7948
  br label %if.end.49, !dbg !9534

if.end.49:                                        ; preds = %sw.epilog.47, %cond.end
  br label %do.cond, !dbg !9535

do.cond:                                          ; preds = %if.end.49
  br label %do.end, !dbg !9538

do.end:                                           ; preds = %do.cond
  %85 = load i32, i32* %r, align 4, !dbg !9540, !tbaa !2764
  store i32 %85, i32* %retval, !dbg !9541
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.50, !dbg !9541

cleanup.50:                                       ; preds = %do.end, %if.then.5
  %86 = bitcast i32* %r to i8*, !dbg !9542
  call void @llvm.lifetime.end(i64 4, i8* %86) #2, !dbg !9542
  %87 = bitcast i64* %n to i8*, !dbg !9542
  call void @llvm.lifetime.end(i64 8, i8* %87) #2, !dbg !9542
  %88 = bitcast i64* %i to i8*, !dbg !9542
  call void @llvm.lifetime.end(i64 8, i8* %88) #2, !dbg !9542
  br label %cleanup.181

if.end.53:                                        ; preds = %entry
  %89 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9543, !tbaa !1829
  %call54 = call %struct._object* @_PyObject_LookupSpecial(%struct._object* %89, %struct._Py_Identifier* @PyObject_IsSubclass.PyId___subclasscheck__), !dbg !9544
  store %struct._object* %call54, %struct._object** %checker, align 8, !dbg !9545, !tbaa !1829
  %90 = load %struct._object*, %struct._object** %checker, align 8, !dbg !9546, !tbaa !1829
  %cmp55 = icmp ne %struct._object* %90, null, !dbg !9547
  br i1 %cmp55, label %if.then.56, label %if.else.174, !dbg !9548

if.then.56:                                       ; preds = %if.end.53
  %91 = bitcast %struct._object** %res to i8*, !dbg !9549
  call void @llvm.lifetime.start(i64 8, i8* %91) #2, !dbg !9549
  call void @llvm.dbg.declare(metadata %struct._object** %res, metadata !1458, metadata !1833), !dbg !9550
  %92 = bitcast i32* %ok to i8*, !dbg !9551
  call void @llvm.lifetime.start(i64 4, i8* %92) #2, !dbg !9551
  call void @llvm.dbg.declare(metadata i32* %ok, metadata !1461, metadata !1833), !dbg !9552
  store i32 -1, i32* %ok, align 4, !dbg !9552, !tbaa !2764
  %93 = bitcast %struct._Py_atomic_address** %atomic_val60 to i8*, !dbg !9553
  call void @llvm.lifetime.start(i64 8, i8* %93) #2, !dbg !9553
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val60, metadata !1462, metadata !1833), !dbg !9554
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val60, align 8, !dbg !9554, !tbaa !1829
  %94 = bitcast i8** %result62 to i8*, !dbg !9555
  call void @llvm.lifetime.start(i64 8, i8* %94) #2, !dbg !9555
  call void @llvm.dbg.declare(metadata i8** %result62, metadata !1465, metadata !1833), !dbg !9556
  %95 = bitcast i8*** %volatile_data64 to i8*, !dbg !9557
  call void @llvm.lifetime.start(i64 8, i8* %95) #2, !dbg !9557
  call void @llvm.dbg.declare(metadata i8*** %volatile_data64, metadata !1466, metadata !1833), !dbg !9558
  %96 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val60, align 8, !dbg !9559, !tbaa !1829
  %_value65 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %96, i32 0, i32 0, !dbg !9560
  store i8** %_value65, i8*** %volatile_data64, align 8, !dbg !9558, !tbaa !1829
  %97 = bitcast i32* %order67 to i8*, !dbg !9561
  call void @llvm.lifetime.start(i64 4, i8* %97) #2, !dbg !9561
  call void @llvm.dbg.declare(metadata i32* %order67, metadata !1467, metadata !1833), !dbg !9562
  store i32 0, i32* %order67, align 4, !dbg !9562, !tbaa !3250
  %98 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val60, align 8, !dbg !9563, !tbaa !1829
  %99 = bitcast %struct._Py_atomic_address* %98 to i8*, !dbg !9563
  %100 = load i32, i32* %order67, align 4, !dbg !9564, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %99, i32 %100), !dbg !9565
  %101 = load i32, i32* %order67, align 4, !dbg !9566, !tbaa !3250
  br label %LeafBlock.35

LeafBlock.35:                                     ; preds = %if.then.56
  %.off.36 = add i32 %101, -2
  %SwitchLeaf37 = icmp ule i32 %.off.36, 2
  br i1 %SwitchLeaf37, label %sw.bb.68, label %NewDefault.34

sw.bb.68:                                         ; preds = %LeafBlock.35
  call void @_Py_atomic_thread_fence(i32 2), !dbg !9567
  br label %sw.epilog.70, !dbg !9572

NewDefault.34:                                    ; preds = %LeafBlock.35
  br label %sw.default.69

sw.default.69:                                    ; preds = %NewDefault.34
  br label %sw.epilog.70, !dbg !9573

sw.epilog.70:                                     ; preds = %sw.default.69, %sw.bb.68
  %102 = load i8**, i8*** %volatile_data64, align 8, !dbg !9575, !tbaa !1829
  %103 = load volatile i8*, i8** %102, align 8, !dbg !9578, !tbaa !1829
  store i8* %103, i8** %result62, align 8, !dbg !9579, !tbaa !1829
  %104 = load i32, i32* %order67, align 4, !dbg !9580, !tbaa !3250
  br label %NodeBlock.44

NodeBlock.44:                                     ; preds = %sw.epilog.70
  %Pivot.45 = icmp slt i32 %104, 3
  br i1 %Pivot.45, label %LeafBlock.39, label %LeafBlock.41

LeafBlock.41:                                     ; preds = %NodeBlock.44
  %.off.42 = add i32 %104, -3
  %SwitchLeaf43 = icmp ule i32 %.off.42, 1
  br i1 %SwitchLeaf43, label %sw.bb.71, label %NewDefault.38

LeafBlock.39:                                     ; preds = %NodeBlock.44
  %SwitchLeaf40 = icmp eq i32 %104, 1
  br i1 %SwitchLeaf40, label %sw.bb.71, label %NewDefault.38

sw.bb.71:                                         ; preds = %LeafBlock.41, %LeafBlock.39
  call void @_Py_atomic_signal_fence(i32 1), !dbg !9581
  br label %sw.epilog.73, !dbg !9586

NewDefault.38:                                    ; preds = %LeafBlock.41, %LeafBlock.39
  br label %sw.default.72

sw.default.72:                                    ; preds = %NewDefault.38
  br label %sw.epilog.73, !dbg !9587

sw.epilog.73:                                     ; preds = %sw.default.72, %sw.bb.71
  %105 = load i8*, i8** %result62, align 8, !dbg !9589, !tbaa !1829
  store i8* %105, i8** %tmp74, !dbg !9592, !tbaa !1829
  %106 = bitcast i32* %order67 to i8*, !dbg !9593
  call void @llvm.lifetime.end(i64 4, i8* %106) #2, !dbg !9593
  %107 = bitcast i8*** %volatile_data64 to i8*, !dbg !9593
  call void @llvm.lifetime.end(i64 8, i8* %107) #2, !dbg !9593
  %108 = bitcast i8** %result62 to i8*, !dbg !9593
  call void @llvm.lifetime.end(i64 8, i8* %108) #2, !dbg !9593
  %109 = bitcast %struct._Py_atomic_address** %atomic_val60 to i8*, !dbg !9593
  call void @llvm.lifetime.end(i64 8, i8* %109) #2, !dbg !9593
  %110 = load i8*, i8** %tmp74, !dbg !9594, !tbaa !1829
  %111 = bitcast i8* %110 to %struct._ts*, !dbg !9595
  %recursion_depth75 = getelementptr inbounds %struct._ts, %struct._ts* %111, i32 0, i32 4, !dbg !9596
  %112 = load i32, i32* %recursion_depth75, align 4, !dbg !9597, !tbaa !7826
  %inc76 = add i32 %112, 1, !dbg !9597
  store i32 %inc76, i32* %recursion_depth75, align 4, !dbg !9597, !tbaa !7826
  %113 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !9598, !tbaa !2764
  %cmp77 = icmp sgt i32 %inc76, %113, !dbg !9599
  br i1 %cmp77, label %land.lhs.true.78, label %if.end.91, !dbg !9600

land.lhs.true.78:                                 ; preds = %sw.epilog.73
  %call79 = call i32 @_Py_CheckRecursiveCall(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.80, i32 0, i32 0)), !dbg !9601
  %tobool80 = icmp ne i32 %call79, 0, !dbg !9601
  br i1 %tobool80, label %if.then.81, label %if.end.91, !dbg !9603

if.then.81:                                       ; preds = %land.lhs.true.78
  br label %do.body.82, !dbg !9604

do.body.82:                                       ; preds = %if.then.81
  %114 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9605
  call void @llvm.lifetime.start(i64 8, i8* %114) #2, !dbg !9605
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1468, metadata !1833), !dbg !9607
  %115 = load %struct._object*, %struct._object** %checker, align 8, !dbg !9608, !tbaa !1829
  store %struct._object* %115, %struct._object** %_py_decref_tmp, align 8, !dbg !9607, !tbaa !1829
  %116 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9609, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %116, i32 0, i32 0, !dbg !9611
  %117 = load i64, i64* %ob_refcnt, align 8, !dbg !9612, !tbaa !1853
  %dec84 = add i64 %117, -1, !dbg !9612
  store i64 %dec84, i64* %ob_refcnt, align 8, !dbg !9612, !tbaa !1853
  %cmp85 = icmp ne i64 %dec84, 0, !dbg !9613
  br i1 %cmp85, label %if.then.86, label %if.else, !dbg !9614

if.then.86:                                       ; preds = %do.body.82
  br label %if.end.88, !dbg !9615

if.else:                                          ; preds = %do.body.82
  %118 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9617, !tbaa !1829
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %118, i32 0, i32 1, !dbg !9619
  %119 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8, !dbg !9619, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %119, i32 0, i32 4, !dbg !9620
  %120 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !9620, !tbaa !2033
  %121 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9621, !tbaa !1829
  call void %120(%struct._object* %121), !dbg !9622
  br label %if.end.88

if.end.88:                                        ; preds = %if.else, %if.then.86
  %122 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9623
  call void @llvm.lifetime.end(i64 8, i8* %122) #2, !dbg !9623
  br label %do.cond.89, !dbg !9625

do.cond.89:                                       ; preds = %if.end.88
  br label %do.end.90, !dbg !9626

do.end.90:                                        ; preds = %do.cond.89
  %123 = load i32, i32* %ok, align 4, !dbg !9628, !tbaa !2764
  store i32 %123, i32* %retval, !dbg !9629
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.172, !dbg !9629

if.end.91:                                        ; preds = %land.lhs.true.78, %sw.epilog.73
  %124 = load %struct._object*, %struct._object** %checker, align 8, !dbg !9630, !tbaa !1829
  %125 = load %struct._object*, %struct._object** %derived.addr, align 8, !dbg !9631, !tbaa !1829
  %call92 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %124, %struct._object* %125, i8* null), !dbg !9632
  store %struct._object* %call92, %struct._object** %res, align 8, !dbg !9633, !tbaa !1829
  br label %do.body.93, !dbg !9634

do.body.93:                                       ; preds = %if.end.91
  %126 = bitcast %struct._Py_atomic_address** %atomic_val95 to i8*, !dbg !9635
  call void @llvm.lifetime.start(i64 8, i8* %126) #2, !dbg !9635
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val95, metadata !1471, metadata !1833), !dbg !9637
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val95, align 8, !dbg !9637, !tbaa !1829
  %127 = bitcast i8** %result97 to i8*, !dbg !9638
  call void @llvm.lifetime.start(i64 8, i8* %127) #2, !dbg !9638
  call void @llvm.dbg.declare(metadata i8** %result97, metadata !1475, metadata !1833), !dbg !9639
  %128 = bitcast i8*** %volatile_data99 to i8*, !dbg !9640
  call void @llvm.lifetime.start(i64 8, i8* %128) #2, !dbg !9640
  call void @llvm.dbg.declare(metadata i8*** %volatile_data99, metadata !1476, metadata !1833), !dbg !9641
  %129 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val95, align 8, !dbg !9642, !tbaa !1829
  %_value100 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %129, i32 0, i32 0, !dbg !9643
  store i8** %_value100, i8*** %volatile_data99, align 8, !dbg !9641, !tbaa !1829
  %130 = bitcast i32* %order102 to i8*, !dbg !9644
  call void @llvm.lifetime.start(i64 4, i8* %130) #2, !dbg !9644
  call void @llvm.dbg.declare(metadata i32* %order102, metadata !1477, metadata !1833), !dbg !9645
  store i32 0, i32* %order102, align 4, !dbg !9645, !tbaa !3250
  %131 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val95, align 8, !dbg !9646, !tbaa !1829
  %132 = bitcast %struct._Py_atomic_address* %131 to i8*, !dbg !9646
  %133 = load i32, i32* %order102, align 4, !dbg !9647, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %132, i32 %133), !dbg !9648
  %134 = load i32, i32* %order102, align 4, !dbg !9649, !tbaa !3250
  br label %LeafBlock.47

LeafBlock.47:                                     ; preds = %do.body.93
  %.off.48 = add i32 %134, -2
  %SwitchLeaf49 = icmp ule i32 %.off.48, 2
  br i1 %SwitchLeaf49, label %sw.bb.103, label %NewDefault.46

sw.bb.103:                                        ; preds = %LeafBlock.47
  call void @_Py_atomic_thread_fence(i32 2), !dbg !9650
  br label %sw.epilog.105, !dbg !9655

NewDefault.46:                                    ; preds = %LeafBlock.47
  br label %sw.default.104

sw.default.104:                                   ; preds = %NewDefault.46
  br label %sw.epilog.105, !dbg !9656

sw.epilog.105:                                    ; preds = %sw.default.104, %sw.bb.103
  %135 = load i8**, i8*** %volatile_data99, align 8, !dbg !9658, !tbaa !1829
  %136 = load volatile i8*, i8** %135, align 8, !dbg !9661, !tbaa !1829
  store i8* %136, i8** %result97, align 8, !dbg !9662, !tbaa !1829
  %137 = load i32, i32* %order102, align 4, !dbg !9663, !tbaa !3250
  br label %NodeBlock.56

NodeBlock.56:                                     ; preds = %sw.epilog.105
  %Pivot.57 = icmp slt i32 %137, 3
  br i1 %Pivot.57, label %LeafBlock.51, label %LeafBlock.53

LeafBlock.53:                                     ; preds = %NodeBlock.56
  %.off.54 = add i32 %137, -3
  %SwitchLeaf55 = icmp ule i32 %.off.54, 1
  br i1 %SwitchLeaf55, label %sw.bb.106, label %NewDefault.50

LeafBlock.51:                                     ; preds = %NodeBlock.56
  %SwitchLeaf52 = icmp eq i32 %137, 1
  br i1 %SwitchLeaf52, label %sw.bb.106, label %NewDefault.50

sw.bb.106:                                        ; preds = %LeafBlock.53, %LeafBlock.51
  call void @_Py_atomic_signal_fence(i32 1), !dbg !9664
  br label %sw.epilog.108, !dbg !9669

NewDefault.50:                                    ; preds = %LeafBlock.53, %LeafBlock.51
  br label %sw.default.107

sw.default.107:                                   ; preds = %NewDefault.50
  br label %sw.epilog.108, !dbg !9670

sw.epilog.108:                                    ; preds = %sw.default.107, %sw.bb.106
  %138 = load i8*, i8** %result97, align 8, !dbg !9672, !tbaa !1829
  store i8* %138, i8** %tmp109, !dbg !9675, !tbaa !1829
  %139 = bitcast i32* %order102 to i8*, !dbg !9676
  call void @llvm.lifetime.end(i64 4, i8* %139) #2, !dbg !9676
  %140 = bitcast i8*** %volatile_data99 to i8*, !dbg !9676
  call void @llvm.lifetime.end(i64 8, i8* %140) #2, !dbg !9676
  %141 = bitcast i8** %result97 to i8*, !dbg !9676
  call void @llvm.lifetime.end(i64 8, i8* %141) #2, !dbg !9676
  %142 = bitcast %struct._Py_atomic_address** %atomic_val95 to i8*, !dbg !9676
  call void @llvm.lifetime.end(i64 8, i8* %142) #2, !dbg !9676
  %143 = load i8*, i8** %tmp109, !dbg !9677, !tbaa !1829
  %144 = bitcast i8* %143 to %struct._ts*, !dbg !9678
  %recursion_depth110 = getelementptr inbounds %struct._ts, %struct._ts* %144, i32 0, i32 4, !dbg !9679
  %145 = load i32, i32* %recursion_depth110, align 4, !dbg !9680, !tbaa !7826
  %dec111 = add i32 %145, -1, !dbg !9680
  store i32 %dec111, i32* %recursion_depth110, align 4, !dbg !9680, !tbaa !7826
  %146 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !9681, !tbaa !2764
  %cmp112 = icmp sgt i32 %146, 100, !dbg !9682
  br i1 %cmp112, label %cond.true.113, label %cond.false.115, !dbg !9683

cond.true.113:                                    ; preds = %sw.epilog.108
  %147 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !9684, !tbaa !2764
  %sub114 = sub i32 %147, 50, !dbg !9686
  br label %cond.end.118, !dbg !9683

cond.false.115:                                   ; preds = %sw.epilog.108
  %148 = load i32, i32* @_Py_CheckRecursionLimit, align 4, !dbg !9687, !tbaa !2764
  %shr116 = ashr i32 %148, 2, !dbg !9689
  %mul117 = mul i32 3, %shr116, !dbg !9690
  br label %cond.end.118, !dbg !9683

cond.end.118:                                     ; preds = %cond.false.115, %cond.true.113
  %cond119 = phi i32 [ %sub114, %cond.true.113 ], [ %mul117, %cond.false.115 ], !dbg !9683
  %cmp120 = icmp slt i32 %dec111, %cond119, !dbg !9691
  br i1 %cmp120, label %if.then.121, label %if.end.139, !dbg !9694

if.then.121:                                      ; preds = %cond.end.118
  %149 = bitcast %struct._Py_atomic_address** %atomic_val123 to i8*, !dbg !9695
  call void @llvm.lifetime.start(i64 8, i8* %149) #2, !dbg !9695
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val123, metadata !1478, metadata !1833), !dbg !9697
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val123, align 8, !dbg !9697, !tbaa !1829
  %150 = bitcast i8** %result125 to i8*, !dbg !9698
  call void @llvm.lifetime.start(i64 8, i8* %150) #2, !dbg !9698
  call void @llvm.dbg.declare(metadata i8** %result125, metadata !1480, metadata !1833), !dbg !9699
  %151 = bitcast i8*** %volatile_data127 to i8*, !dbg !9700
  call void @llvm.lifetime.start(i64 8, i8* %151) #2, !dbg !9700
  call void @llvm.dbg.declare(metadata i8*** %volatile_data127, metadata !1481, metadata !1833), !dbg !9701
  %152 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val123, align 8, !dbg !9702, !tbaa !1829
  %_value128 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %152, i32 0, i32 0, !dbg !9703
  store i8** %_value128, i8*** %volatile_data127, align 8, !dbg !9701, !tbaa !1829
  %153 = bitcast i32* %order130 to i8*, !dbg !9704
  call void @llvm.lifetime.start(i64 4, i8* %153) #2, !dbg !9704
  call void @llvm.dbg.declare(metadata i32* %order130, metadata !1482, metadata !1833), !dbg !9705
  store i32 0, i32* %order130, align 4, !dbg !9705, !tbaa !3250
  %154 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val123, align 8, !dbg !9706, !tbaa !1829
  %155 = bitcast %struct._Py_atomic_address* %154 to i8*, !dbg !9706
  %156 = load i32, i32* %order130, align 4, !dbg !9707, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %155, i32 %156), !dbg !9708
  %157 = load i32, i32* %order130, align 4, !dbg !9709, !tbaa !3250
  br label %LeafBlock.59

LeafBlock.59:                                     ; preds = %if.then.121
  %.off.60 = add i32 %157, -2
  %SwitchLeaf61 = icmp ule i32 %.off.60, 2
  br i1 %SwitchLeaf61, label %sw.bb.131, label %NewDefault.58

sw.bb.131:                                        ; preds = %LeafBlock.59
  call void @_Py_atomic_thread_fence(i32 2), !dbg !9710
  br label %sw.epilog.133, !dbg !9715

NewDefault.58:                                    ; preds = %LeafBlock.59
  br label %sw.default.132

sw.default.132:                                   ; preds = %NewDefault.58
  br label %sw.epilog.133, !dbg !9716

sw.epilog.133:                                    ; preds = %sw.default.132, %sw.bb.131
  %158 = load i8**, i8*** %volatile_data127, align 8, !dbg !9718, !tbaa !1829
  %159 = load volatile i8*, i8** %158, align 8, !dbg !9721, !tbaa !1829
  store i8* %159, i8** %result125, align 8, !dbg !9722, !tbaa !1829
  %160 = load i32, i32* %order130, align 4, !dbg !9723, !tbaa !3250
  br label %NodeBlock.68

NodeBlock.68:                                     ; preds = %sw.epilog.133
  %Pivot.69 = icmp slt i32 %160, 3
  br i1 %Pivot.69, label %LeafBlock.63, label %LeafBlock.65

LeafBlock.65:                                     ; preds = %NodeBlock.68
  %.off.66 = add i32 %160, -3
  %SwitchLeaf67 = icmp ule i32 %.off.66, 1
  br i1 %SwitchLeaf67, label %sw.bb.134, label %NewDefault.62

LeafBlock.63:                                     ; preds = %NodeBlock.68
  %SwitchLeaf64 = icmp eq i32 %160, 1
  br i1 %SwitchLeaf64, label %sw.bb.134, label %NewDefault.62

sw.bb.134:                                        ; preds = %LeafBlock.65, %LeafBlock.63
  call void @_Py_atomic_signal_fence(i32 1), !dbg !9724
  br label %sw.epilog.136, !dbg !9729

NewDefault.62:                                    ; preds = %LeafBlock.65, %LeafBlock.63
  br label %sw.default.135

sw.default.135:                                   ; preds = %NewDefault.62
  br label %sw.epilog.136, !dbg !9730

sw.epilog.136:                                    ; preds = %sw.default.135, %sw.bb.134
  %161 = load i8*, i8** %result125, align 8, !dbg !9732, !tbaa !1829
  store i8* %161, i8** %tmp137, !dbg !9735, !tbaa !1829
  %162 = bitcast i32* %order130 to i8*, !dbg !9736
  call void @llvm.lifetime.end(i64 4, i8* %162) #2, !dbg !9736
  %163 = bitcast i8*** %volatile_data127 to i8*, !dbg !9736
  call void @llvm.lifetime.end(i64 8, i8* %163) #2, !dbg !9736
  %164 = bitcast i8** %result125 to i8*, !dbg !9736
  call void @llvm.lifetime.end(i64 8, i8* %164) #2, !dbg !9736
  %165 = bitcast %struct._Py_atomic_address** %atomic_val123 to i8*, !dbg !9736
  call void @llvm.lifetime.end(i64 8, i8* %165) #2, !dbg !9736
  %166 = load i8*, i8** %tmp137, !dbg !9737, !tbaa !1829
  %167 = bitcast i8* %166 to %struct._ts*, !dbg !9738
  %overflowed138 = getelementptr inbounds %struct._ts, %struct._ts* %167, i32 0, i32 5, !dbg !9739
  store i8 0, i8* %overflowed138, align 1, !dbg !9740, !tbaa !7948
  br label %if.end.139, !dbg !9741

if.end.139:                                       ; preds = %sw.epilog.136, %cond.end.118
  br label %do.cond.140, !dbg !9742

do.cond.140:                                      ; preds = %if.end.139
  br label %do.end.141, !dbg !9745

do.end.141:                                       ; preds = %do.cond.140
  br label %do.body.142, !dbg !9747

do.body.142:                                      ; preds = %do.end.141
  %168 = bitcast %struct._object** %_py_decref_tmp144 to i8*, !dbg !9748
  call void @llvm.lifetime.start(i64 8, i8* %168) #2, !dbg !9748
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp144, metadata !1483, metadata !1833), !dbg !9750
  %169 = load %struct._object*, %struct._object** %checker, align 8, !dbg !9751, !tbaa !1829
  store %struct._object* %169, %struct._object** %_py_decref_tmp144, align 8, !dbg !9750, !tbaa !1829
  %170 = load %struct._object*, %struct._object** %_py_decref_tmp144, align 8, !dbg !9752, !tbaa !1829
  %ob_refcnt145 = getelementptr inbounds %struct._object, %struct._object* %170, i32 0, i32 0, !dbg !9754
  %171 = load i64, i64* %ob_refcnt145, align 8, !dbg !9755, !tbaa !1853
  %dec146 = add i64 %171, -1, !dbg !9755
  store i64 %dec146, i64* %ob_refcnt145, align 8, !dbg !9755, !tbaa !1853
  %cmp147 = icmp ne i64 %dec146, 0, !dbg !9756
  br i1 %cmp147, label %if.then.148, label %if.else.149, !dbg !9757

if.then.148:                                      ; preds = %do.body.142
  br label %if.end.152, !dbg !9758

if.else.149:                                      ; preds = %do.body.142
  %172 = load %struct._object*, %struct._object** %_py_decref_tmp144, align 8, !dbg !9760, !tbaa !1829
  %ob_type150 = getelementptr inbounds %struct._object, %struct._object* %172, i32 0, i32 1, !dbg !9762
  %173 = load %struct._typeobject*, %struct._typeobject** %ob_type150, align 8, !dbg !9762, !tbaa !1845
  %tp_dealloc151 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %173, i32 0, i32 4, !dbg !9763
  %174 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc151, align 8, !dbg !9763, !tbaa !2033
  %175 = load %struct._object*, %struct._object** %_py_decref_tmp144, align 8, !dbg !9764, !tbaa !1829
  call void %174(%struct._object* %175), !dbg !9765
  br label %if.end.152

if.end.152:                                       ; preds = %if.else.149, %if.then.148
  %176 = bitcast %struct._object** %_py_decref_tmp144 to i8*, !dbg !9766
  call void @llvm.lifetime.end(i64 8, i8* %176) #2, !dbg !9766
  br label %do.cond.153, !dbg !9768

do.cond.153:                                      ; preds = %if.end.152
  br label %do.end.154, !dbg !9769

do.end.154:                                       ; preds = %do.cond.153
  %177 = load %struct._object*, %struct._object** %res, align 8, !dbg !9771, !tbaa !1829
  %cmp155 = icmp ne %struct._object* %177, null, !dbg !9772
  br i1 %cmp155, label %if.then.156, label %if.end.171, !dbg !9773

if.then.156:                                      ; preds = %do.end.154
  %178 = load %struct._object*, %struct._object** %res, align 8, !dbg !9774, !tbaa !1829
  %call157 = call i32 @PyObject_IsTrue(%struct._object* %178), !dbg !9775
  store i32 %call157, i32* %ok, align 4, !dbg !9776, !tbaa !2764
  br label %do.body.158, !dbg !9777

do.body.158:                                      ; preds = %if.then.156
  %179 = bitcast %struct._object** %_py_decref_tmp160 to i8*, !dbg !9778
  call void @llvm.lifetime.start(i64 8, i8* %179) #2, !dbg !9778
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp160, metadata !1485, metadata !1833), !dbg !9780
  %180 = load %struct._object*, %struct._object** %res, align 8, !dbg !9781, !tbaa !1829
  store %struct._object* %180, %struct._object** %_py_decref_tmp160, align 8, !dbg !9780, !tbaa !1829
  %181 = load %struct._object*, %struct._object** %_py_decref_tmp160, align 8, !dbg !9782, !tbaa !1829
  %ob_refcnt161 = getelementptr inbounds %struct._object, %struct._object* %181, i32 0, i32 0, !dbg !9784
  %182 = load i64, i64* %ob_refcnt161, align 8, !dbg !9785, !tbaa !1853
  %dec162 = add i64 %182, -1, !dbg !9785
  store i64 %dec162, i64* %ob_refcnt161, align 8, !dbg !9785, !tbaa !1853
  %cmp163 = icmp ne i64 %dec162, 0, !dbg !9786
  br i1 %cmp163, label %if.then.164, label %if.else.165, !dbg !9787

if.then.164:                                      ; preds = %do.body.158
  br label %if.end.168, !dbg !9788

if.else.165:                                      ; preds = %do.body.158
  %183 = load %struct._object*, %struct._object** %_py_decref_tmp160, align 8, !dbg !9790, !tbaa !1829
  %ob_type166 = getelementptr inbounds %struct._object, %struct._object* %183, i32 0, i32 1, !dbg !9792
  %184 = load %struct._typeobject*, %struct._typeobject** %ob_type166, align 8, !dbg !9792, !tbaa !1845
  %tp_dealloc167 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %184, i32 0, i32 4, !dbg !9793
  %185 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc167, align 8, !dbg !9793, !tbaa !2033
  %186 = load %struct._object*, %struct._object** %_py_decref_tmp160, align 8, !dbg !9794, !tbaa !1829
  call void %185(%struct._object* %186), !dbg !9795
  br label %if.end.168

if.end.168:                                       ; preds = %if.else.165, %if.then.164
  %187 = bitcast %struct._object** %_py_decref_tmp160 to i8*, !dbg !9796
  call void @llvm.lifetime.end(i64 8, i8* %187) #2, !dbg !9796
  br label %do.cond.169, !dbg !9798

do.cond.169:                                      ; preds = %if.end.168
  br label %do.end.170, !dbg !9799

do.end.170:                                       ; preds = %do.cond.169
  br label %if.end.171, !dbg !9801

if.end.171:                                       ; preds = %do.end.170, %do.end.154
  %188 = load i32, i32* %ok, align 4, !dbg !9802, !tbaa !2764
  store i32 %188, i32* %retval, !dbg !9803
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.172, !dbg !9803

cleanup.172:                                      ; preds = %if.end.171, %do.end.90
  %189 = bitcast i32* %ok to i8*, !dbg !9804
  call void @llvm.lifetime.end(i64 4, i8* %189) #2, !dbg !9804
  %190 = bitcast %struct._object** %res to i8*, !dbg !9804
  call void @llvm.lifetime.end(i64 8, i8* %190) #2, !dbg !9804
  br label %cleanup.181

if.else.174:                                      ; preds = %if.end.53
  %call175 = call %struct._object* @PyErr_Occurred(), !dbg !9805
  %tobool176 = icmp ne %struct._object* %call175, null, !dbg !9805
  br i1 %tobool176, label %if.then.177, label %if.end.178, !dbg !9807

if.then.177:                                      ; preds = %if.else.174
  store i32 -1, i32* %retval, !dbg !9808
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.181, !dbg !9808

if.end.178:                                       ; preds = %if.else.174
  br label %if.end.179

if.end.179:                                       ; preds = %if.end.178
  %191 = load %struct._object*, %struct._object** %derived.addr, align 8, !dbg !9809, !tbaa !1829
  %192 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9810, !tbaa !1829
  %call180 = call i32 @recursive_issubclass(%struct._object* %191, %struct._object* %192), !dbg !9811
  store i32 %call180, i32* %retval, !dbg !9812
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.181, !dbg !9812

cleanup.181:                                      ; preds = %if.end.179, %if.then.177, %cleanup.172, %cleanup.50
  %193 = bitcast %struct._object** %checker to i8*, !dbg !9813
  call void @llvm.lifetime.end(i64 8, i8* %193) #2, !dbg !9813
  %194 = load i32, i32* %retval, !dbg !9813
  ret i32 %194, !dbg !9813
}

; Function Attrs: nounwind uwtable
define internal i32 @recursive_issubclass(%struct._object* %derived, %struct._object* %cls) #0 {
entry:
  %retval = alloca i32, align 4
  %derived.addr = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  store %struct._object* %derived, %struct._object** %derived.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %derived.addr, metadata !1813, metadata !1833), !dbg !9814
  store %struct._object* %cls, %struct._object** %cls.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %cls.addr, metadata !1814, metadata !1833), !dbg !9815
  %0 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9816, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1, !dbg !9818
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9818, !tbaa !1845
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19, !dbg !9819
  %2 = load i64, i64* %tp_flags, align 8, !dbg !9819, !tbaa !2086
  %and = and i64 %2, 2147483648, !dbg !9820
  %cmp = icmp ne i64 %and, 0, !dbg !9821
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9822

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** %derived.addr, align 8, !dbg !9823, !tbaa !1829
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1, !dbg !9825
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8, !dbg !9825, !tbaa !1845
  %tp_flags2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 19, !dbg !9826
  %5 = load i64, i64* %tp_flags2, align 8, !dbg !9826, !tbaa !2086
  %and3 = and i64 %5, 2147483648, !dbg !9827
  %cmp4 = icmp ne i64 %and3, 0, !dbg !9828
  br i1 %cmp4, label %if.then, label %if.end, !dbg !9829

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct._object*, %struct._object** %derived.addr, align 8, !dbg !9830, !tbaa !1829
  %7 = bitcast %struct._object* %6 to %struct._typeobject*, !dbg !9832
  %8 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9833, !tbaa !1829
  %9 = bitcast %struct._object* %8 to %struct._typeobject*, !dbg !9834
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* %9), !dbg !9835
  store i32 %call, i32* %retval, !dbg !9836
  br label %return, !dbg !9836

if.end:                                           ; preds = %land.lhs.true, %entry
  %10 = load %struct._object*, %struct._object** %derived.addr, align 8, !dbg !9837, !tbaa !1829
  %call5 = call i32 @check_class(%struct._object* %10, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.92, i32 0, i32 0)), !dbg !9839
  %tobool = icmp ne i32 %call5, 0, !dbg !9839
  br i1 %tobool, label %if.end.7, label %if.then.6, !dbg !9840

if.then.6:                                        ; preds = %if.end
  store i32 -1, i32* %retval, !dbg !9841
  br label %return, !dbg !9841

if.end.7:                                         ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9842, !tbaa !1829
  %call8 = call i32 @check_class(%struct._object* %11, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.93, i32 0, i32 0)), !dbg !9844
  %tobool9 = icmp ne i32 %call8, 0, !dbg !9844
  br i1 %tobool9, label %if.end.11, label %if.then.10, !dbg !9845

if.then.10:                                       ; preds = %if.end.7
  store i32 -1, i32* %retval, !dbg !9846
  br label %return, !dbg !9846

if.end.11:                                        ; preds = %if.end.7
  %12 = load %struct._object*, %struct._object** %derived.addr, align 8, !dbg !9847, !tbaa !1829
  %13 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9848, !tbaa !1829
  %call12 = call i32 @abstract_issubclass(%struct._object* %12, %struct._object* %13), !dbg !9849
  store i32 %call12, i32* %retval, !dbg !9850
  br label %return, !dbg !9850

return:                                           ; preds = %if.end.11, %if.then.10, %if.then.6, %if.then
  %14 = load i32, i32* %retval, !dbg !9851
  ret i32 %14, !dbg !9851
}

; Function Attrs: nounwind uwtable
define i32 @_PyObject_RealIsInstance(%struct._object* %inst, %struct._object* %cls) #0 {
entry:
  %inst.addr = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  store %struct._object* %inst, %struct._object** %inst.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %inst.addr, metadata !1491, metadata !1833), !dbg !9852
  store %struct._object* %cls, %struct._object** %cls.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %cls.addr, metadata !1492, metadata !1833), !dbg !9853
  %0 = load %struct._object*, %struct._object** %inst.addr, align 8, !dbg !9854, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9855, !tbaa !1829
  %call = call i32 @recursive_isinstance(%struct._object* %0, %struct._object* %1), !dbg !9856
  ret i32 %call, !dbg !9857
}

; Function Attrs: nounwind uwtable
define i32 @_PyObject_RealIsSubclass(%struct._object* %derived, %struct._object* %cls) #0 {
entry:
  %derived.addr = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  store %struct._object* %derived, %struct._object** %derived.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %derived.addr, metadata !1495, metadata !1833), !dbg !9858
  store %struct._object* %cls, %struct._object** %cls.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %cls.addr, metadata !1496, metadata !1833), !dbg !9859
  %0 = load %struct._object*, %struct._object** %derived.addr, align 8, !dbg !9860, !tbaa !1829
  %1 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !9861, !tbaa !1829
  %call = call i32 @recursive_issubclass(%struct._object* %0, %struct._object* %1), !dbg !9862
  ret i32 %call, !dbg !9863
}

declare %struct._object* @PySeqIter_New(%struct._object*) #3

declare %struct._object* @_PyObject_NextNotImplemented(%struct._object*) #3

; Function Attrs: nounwind uwtable
define i8** @_PySequence_BytesToCharpArray(%struct._object* %self) #0 {
entry:
  %retval = alloca i8**, align 8
  %self.addr = alloca %struct._object*, align 8
  %array = alloca i8**, align 8
  %i = alloca i64, align 8
  %argc = alloca i64, align 8
  %item = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %data = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp36 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1519, metadata !1833), !dbg !9864
  %0 = bitcast i8*** %array to i8*, !dbg !9865
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !9865
  call void @llvm.dbg.declare(metadata i8*** %array, metadata !1520, metadata !1833), !dbg !9866
  %1 = bitcast i64* %i to i8*, !dbg !9867
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !9867
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1521, metadata !1833), !dbg !9868
  %2 = bitcast i64* %argc to i8*, !dbg !9867
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !9867
  call void @llvm.dbg.declare(metadata i64* %argc, metadata !1522, metadata !1833), !dbg !9869
  %3 = bitcast %struct._object** %item to i8*, !dbg !9870
  call void @llvm.lifetime.start(i64 8, i8* %3) #2, !dbg !9870
  call void @llvm.dbg.declare(metadata %struct._object** %item, metadata !1523, metadata !1833), !dbg !9871
  store %struct._object* null, %struct._object** %item, align 8, !dbg !9871, !tbaa !1829
  %4 = bitcast i64* %size to i8*, !dbg !9872
  call void @llvm.lifetime.start(i64 8, i8* %4) #2, !dbg !9872
  call void @llvm.dbg.declare(metadata i64* %size, metadata !1524, metadata !1833), !dbg !9873
  %5 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9874, !tbaa !1829
  %call = call i64 @PySequence_Size(%struct._object* %5), !dbg !9875
  store i64 %call, i64* %argc, align 8, !dbg !9876, !tbaa !1963
  %6 = load i64, i64* %argc, align 8, !dbg !9877, !tbaa !1963
  %cmp = icmp eq i64 %6, -1, !dbg !9879
  br i1 %cmp, label %if.then, label %if.end, !dbg !9880

if.then:                                          ; preds = %entry
  store i8** null, i8*** %retval, !dbg !9881
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.50, !dbg !9881

if.end:                                           ; preds = %entry
  %7 = load i64, i64* %argc, align 8, !dbg !9882, !tbaa !1963
  %cmp1 = icmp ugt i64 %7, 1152921504606846974, !dbg !9884
  br i1 %cmp1, label %if.then.2, label %if.end.4, !dbg !9885

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @PyErr_NoMemory(), !dbg !9886
  store i8** null, i8*** %retval, !dbg !9888
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.50, !dbg !9888

if.end.4:                                         ; preds = %if.end
  %8 = load i64, i64* %argc, align 8, !dbg !9889, !tbaa !1963
  %add = add i64 %8, 1, !dbg !9890
  %mul = mul i64 %add, 8, !dbg !9891
  %call5 = call i8* @PyMem_Malloc(i64 %mul), !dbg !9892
  %9 = bitcast i8* %call5 to i8**, !dbg !9892
  store i8** %9, i8*** %array, align 8, !dbg !9893, !tbaa !1829
  %10 = load i8**, i8*** %array, align 8, !dbg !9894, !tbaa !1829
  %cmp6 = icmp eq i8** %10, null, !dbg !9896
  br i1 %cmp6, label %if.then.7, label %if.end.9, !dbg !9897

if.then.7:                                        ; preds = %if.end.4
  %call8 = call %struct._object* @PyErr_NoMemory(), !dbg !9898
  store i8** null, i8*** %retval, !dbg !9900
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.50, !dbg !9900

if.end.9:                                         ; preds = %if.end.4
  store i64 0, i64* %i, align 8, !dbg !9901, !tbaa !1963
  br label %for.cond, !dbg !9902

for.cond:                                         ; preds = %for.inc, %if.end.9
  %11 = load i64, i64* %i, align 8, !dbg !9903, !tbaa !1963
  %12 = load i64, i64* %argc, align 8, !dbg !9906, !tbaa !1963
  %cmp10 = icmp slt i64 %11, %12, !dbg !9907
  br i1 %cmp10, label %for.body, label %for.end, !dbg !9908

for.body:                                         ; preds = %for.cond
  %13 = bitcast i8** %data to i8*, !dbg !9909
  call void @llvm.lifetime.start(i64 8, i8* %13) #2, !dbg !9909
  call void @llvm.dbg.declare(metadata i8** %data, metadata !1525, metadata !1833), !dbg !9910
  %14 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !9911, !tbaa !1829
  %15 = load i64, i64* %i, align 8, !dbg !9912, !tbaa !1963
  %call11 = call %struct._object* @PySequence_GetItem(%struct._object* %14, i64 %15), !dbg !9913
  store %struct._object* %call11, %struct._object** %item, align 8, !dbg !9914, !tbaa !1829
  %16 = load %struct._object*, %struct._object** %item, align 8, !dbg !9915, !tbaa !1829
  %cmp12 = icmp eq %struct._object* %16, null, !dbg !9917
  br i1 %cmp12, label %if.then.13, label %if.end.14, !dbg !9918

if.then.13:                                       ; preds = %for.body
  %17 = load i64, i64* %i, align 8, !dbg !9919, !tbaa !1963
  %18 = load i8**, i8*** %array, align 8, !dbg !9921, !tbaa !1829
  %arrayidx = getelementptr i8*, i8** %18, i64 %17, !dbg !9921
  store i8* null, i8** %arrayidx, align 8, !dbg !9922, !tbaa !1829
  store i32 5, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9923

if.end.14:                                        ; preds = %for.body
  %19 = load %struct._object*, %struct._object** %item, align 8, !dbg !9924, !tbaa !1829
  %call15 = call i8* @PyBytes_AsString(%struct._object* %19), !dbg !9925
  store i8* %call15, i8** %data, align 8, !dbg !9926, !tbaa !1829
  %20 = load i8*, i8** %data, align 8, !dbg !9927, !tbaa !1829
  %cmp16 = icmp eq i8* %20, null, !dbg !9929
  br i1 %cmp16, label %if.then.17, label %if.end.19, !dbg !9930

if.then.17:                                       ; preds = %if.end.14
  %21 = load i64, i64* %i, align 8, !dbg !9931, !tbaa !1963
  %22 = load i8**, i8*** %array, align 8, !dbg !9933, !tbaa !1829
  %arrayidx18 = getelementptr i8*, i8** %22, i64 %21, !dbg !9933
  store i8* null, i8** %arrayidx18, align 8, !dbg !9934, !tbaa !1829
  store i32 5, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9935

if.end.19:                                        ; preds = %if.end.14
  %23 = load %struct._object*, %struct._object** %item, align 8, !dbg !9936, !tbaa !1829
  %24 = bitcast %struct._object* %23 to %struct.PyVarObject*, !dbg !9937
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %24, i32 0, i32 1, !dbg !9938
  %25 = load i64, i64* %ob_size, align 8, !dbg !9938, !tbaa !5788
  %add20 = add i64 %25, 1, !dbg !9939
  store i64 %add20, i64* %size, align 8, !dbg !9940, !tbaa !1963
  %26 = load i64, i64* %size, align 8, !dbg !9941, !tbaa !1963
  %call21 = call i8* @PyMem_Malloc(i64 %26), !dbg !9942
  %27 = load i64, i64* %i, align 8, !dbg !9943, !tbaa !1963
  %28 = load i8**, i8*** %array, align 8, !dbg !9944, !tbaa !1829
  %arrayidx22 = getelementptr i8*, i8** %28, i64 %27, !dbg !9944
  store i8* %call21, i8** %arrayidx22, align 8, !dbg !9945, !tbaa !1829
  %29 = load i64, i64* %i, align 8, !dbg !9946, !tbaa !1963
  %30 = load i8**, i8*** %array, align 8, !dbg !9948, !tbaa !1829
  %arrayidx23 = getelementptr i8*, i8** %30, i64 %29, !dbg !9948
  %31 = load i8*, i8** %arrayidx23, align 8, !dbg !9948, !tbaa !1829
  %tobool = icmp ne i8* %31, null, !dbg !9948
  br i1 %tobool, label %if.end.26, label %if.then.24, !dbg !9949

if.then.24:                                       ; preds = %if.end.19
  %call25 = call %struct._object* @PyErr_NoMemory(), !dbg !9950
  store i32 5, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9952

if.end.26:                                        ; preds = %if.end.19
  %32 = load i64, i64* %i, align 8, !dbg !9953, !tbaa !1963
  %33 = load i8**, i8*** %array, align 8, !dbg !9954, !tbaa !1829
  %arrayidx27 = getelementptr i8*, i8** %33, i64 %32, !dbg !9954
  %34 = load i8*, i8** %arrayidx27, align 8, !dbg !9954, !tbaa !1829
  %35 = load i8*, i8** %data, align 8, !dbg !9955, !tbaa !1829
  %36 = load i64, i64* %size, align 8, !dbg !9956, !tbaa !1963
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %35, i64 %36, i32 1, i1 false), !dbg !9957
  br label %do.body, !dbg !9958

do.body:                                          ; preds = %if.end.26
  %37 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9959
  call void @llvm.lifetime.start(i64 8, i8* %37) #2, !dbg !9959
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1529, metadata !1833), !dbg !9961
  %38 = load %struct._object*, %struct._object** %item, align 8, !dbg !9962, !tbaa !1829
  store %struct._object* %38, %struct._object** %_py_decref_tmp, align 8, !dbg !9961, !tbaa !1829
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9963, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0, !dbg !9965
  %40 = load i64, i64* %ob_refcnt, align 8, !dbg !9966, !tbaa !1853
  %dec = add i64 %40, -1, !dbg !9966
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !9966, !tbaa !1853
  %cmp28 = icmp ne i64 %dec, 0, !dbg !9967
  br i1 %cmp28, label %if.then.29, label %if.else, !dbg !9968

if.then.29:                                       ; preds = %do.body
  br label %if.end.30, !dbg !9969

if.else:                                          ; preds = %do.body
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9971, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1, !dbg !9973
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9973, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4, !dbg !9974
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !9974, !tbaa !2033
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9975, !tbaa !1829
  call void %43(%struct._object* %44), !dbg !9976
  br label %if.end.30

if.end.30:                                        ; preds = %if.else, %if.then.29
  %45 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9977
  call void @llvm.lifetime.end(i64 8, i8* %45) #2, !dbg !9977
  br label %do.cond, !dbg !9979

do.cond:                                          ; preds = %if.end.30
  br label %do.end, !dbg !9980

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %cleanup.dest.slot, !dbg !9982
  br label %cleanup, !dbg !9982

cleanup:                                          ; preds = %do.end, %if.then.24, %if.then.17, %if.then.13
  %46 = bitcast i8** %data to i8*, !dbg !9983
  call void @llvm.lifetime.end(i64 8, i8* %46) #2, !dbg !9983
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock

NodeBlock:                                        ; preds = %cleanup
  %Pivot = icmp slt i32 %cleanup.dest, 5
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %cleanup.dest, 5
  br i1 %SwitchLeaf2, label %fail, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %for.inc, !dbg !9984

for.inc:                                          ; preds = %cleanup.cont
  %47 = load i64, i64* %i, align 8, !dbg !9985, !tbaa !1963
  %inc = add i64 %47, 1, !dbg !9985
  store i64 %inc, i64* %i, align 8, !dbg !9985, !tbaa !1963
  br label %for.cond, !dbg !9986

for.end:                                          ; preds = %for.cond
  %48 = load i64, i64* %argc, align 8, !dbg !9987, !tbaa !1963
  %49 = load i8**, i8*** %array, align 8, !dbg !9988, !tbaa !1829
  %arrayidx31 = getelementptr i8*, i8** %49, i64 %48, !dbg !9988
  store i8* null, i8** %arrayidx31, align 8, !dbg !9989, !tbaa !1829
  %50 = load i8**, i8*** %array, align 8, !dbg !9990, !tbaa !1829
  store i8** %50, i8*** %retval, !dbg !9991
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.50, !dbg !9991

fail:                                             ; preds = %LeafBlock.1
  br label %do.body.32, !dbg !9992

do.body.32:                                       ; preds = %fail
  %51 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !9993
  call void @llvm.lifetime.start(i64 8, i8* %51) #2, !dbg !9993
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1531, metadata !1833), !dbg !9995
  %52 = load %struct._object*, %struct._object** %item, align 8, !dbg !9996, !tbaa !1829
  store %struct._object* %52, %struct._object** %_py_xdecref_tmp, align 8, !dbg !9995, !tbaa !1829
  %53 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !9997, !tbaa !1829
  %cmp33 = icmp ne %struct._object* %53, null, !dbg !9998
  br i1 %cmp33, label %if.then.34, label %if.end.47, !dbg !9999

if.then.34:                                       ; preds = %do.body.32
  br label %do.body.35, !dbg !10000

do.body.35:                                       ; preds = %if.then.34
  %54 = bitcast %struct._object** %_py_decref_tmp36 to i8*, !dbg !10002
  call void @llvm.lifetime.start(i64 8, i8* %54) #2, !dbg !10002
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp36, metadata !1533, metadata !1833), !dbg !10004
  %55 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !10005, !tbaa !1829
  store %struct._object* %55, %struct._object** %_py_decref_tmp36, align 8, !dbg !10004, !tbaa !1829
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8, !dbg !10006, !tbaa !1829
  %ob_refcnt37 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 0, !dbg !10008
  %57 = load i64, i64* %ob_refcnt37, align 8, !dbg !10009, !tbaa !1853
  %dec38 = add i64 %57, -1, !dbg !10009
  store i64 %dec38, i64* %ob_refcnt37, align 8, !dbg !10009, !tbaa !1853
  %cmp39 = icmp ne i64 %dec38, 0, !dbg !10010
  br i1 %cmp39, label %if.then.40, label %if.else.41, !dbg !10011

if.then.40:                                       ; preds = %do.body.35
  br label %if.end.44, !dbg !10012

if.else.41:                                       ; preds = %do.body.35
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8, !dbg !10014, !tbaa !1829
  %ob_type42 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 1, !dbg !10016
  %59 = load %struct._typeobject*, %struct._typeobject** %ob_type42, align 8, !dbg !10016, !tbaa !1845
  %tp_dealloc43 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 4, !dbg !10017
  %60 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc43, align 8, !dbg !10017, !tbaa !2033
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8, !dbg !10018, !tbaa !1829
  call void %60(%struct._object* %61), !dbg !10019
  br label %if.end.44

if.end.44:                                        ; preds = %if.else.41, %if.then.40
  %62 = bitcast %struct._object** %_py_decref_tmp36 to i8*, !dbg !10020
  call void @llvm.lifetime.end(i64 8, i8* %62) #2, !dbg !10020
  br label %do.cond.45, !dbg !10022

do.cond.45:                                       ; preds = %if.end.44
  br label %do.end.46, !dbg !10023

do.end.46:                                        ; preds = %do.cond.45
  br label %if.end.47, !dbg !10025

if.end.47:                                        ; preds = %do.end.46, %do.body.32
  %63 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !10027
  call void @llvm.lifetime.end(i64 8, i8* %63) #2, !dbg !10027
  br label %do.cond.48, !dbg !10030

do.cond.48:                                       ; preds = %if.end.47
  br label %do.end.49, !dbg !10031

do.end.49:                                        ; preds = %do.cond.48
  %64 = load i8**, i8*** %array, align 8, !dbg !10033, !tbaa !1829
  call void @_Py_FreeCharPArray(i8** %64), !dbg !10034
  store i8** null, i8*** %retval, !dbg !10035
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.50, !dbg !10035

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %cleanup.50

cleanup.50:                                       ; preds = %NewDefault, %do.end.49, %for.end, %if.then.7, %if.then.2, %if.then
  %65 = bitcast i64* %size to i8*, !dbg !10036
  call void @llvm.lifetime.end(i64 8, i8* %65) #2, !dbg !10036
  %66 = bitcast %struct._object** %item to i8*, !dbg !10036
  call void @llvm.lifetime.end(i64 8, i8* %66) #2, !dbg !10036
  %67 = bitcast i64* %argc to i8*, !dbg !10036
  call void @llvm.lifetime.end(i64 8, i8* %67) #2, !dbg !10036
  %68 = bitcast i64* %i to i8*, !dbg !10036
  call void @llvm.lifetime.end(i64 8, i8* %68) #2, !dbg !10036
  %69 = bitcast i8*** %array to i8*, !dbg !10036
  call void @llvm.lifetime.end(i64 8, i8* %69) #2, !dbg !10036
  %70 = load i8**, i8*** %retval, !dbg !10036
  ret i8** %70, !dbg !10036
}

declare i8* @PyBytes_AsString(%struct._object*) #3

; Function Attrs: nounwind uwtable
define void @_Py_FreeCharPArray(i8** %array) #0 {
entry:
  %array.addr = alloca i8**, align 8
  %i = alloca i64, align 8
  store i8** %array, i8*** %array.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8*** %array.addr, metadata !1540, metadata !1833), !dbg !10037
  %0 = bitcast i64* %i to i8*, !dbg !10038
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !10038
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1541, metadata !1833), !dbg !10039
  store i64 0, i64* %i, align 8, !dbg !10040, !tbaa !1963
  br label %for.cond, !dbg !10042

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !dbg !10043, !tbaa !1963
  %2 = load i8**, i8*** %array.addr, align 8, !dbg !10047, !tbaa !1829
  %arrayidx = getelementptr i8*, i8** %2, i64 %1, !dbg !10047
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !10047, !tbaa !1829
  %cmp = icmp ne i8* %3, null, !dbg !10048
  br i1 %cmp, label %for.body, label %for.end, !dbg !10049

for.body:                                         ; preds = %for.cond
  %4 = load i64, i64* %i, align 8, !dbg !10050, !tbaa !1963
  %5 = load i8**, i8*** %array.addr, align 8, !dbg !10052, !tbaa !1829
  %arrayidx1 = getelementptr i8*, i8** %5, i64 %4, !dbg !10052
  %6 = load i8*, i8** %arrayidx1, align 8, !dbg !10052, !tbaa !1829
  call void @PyMem_Free(i8* %6), !dbg !10053
  br label %for.inc, !dbg !10054

for.inc:                                          ; preds = %for.body
  %7 = load i64, i64* %i, align 8, !dbg !10055, !tbaa !1963
  %inc = add i64 %7, 1, !dbg !10055
  store i64 %inc, i64* %i, align 8, !dbg !10055, !tbaa !1963
  br label %for.cond, !dbg !10056

for.end:                                          ; preds = %for.cond
  %8 = load i8**, i8*** %array.addr, align 8, !dbg !10057, !tbaa !1829
  %9 = bitcast i8** %8 to i8*, !dbg !10058
  call void @PyMem_Free(i8* %9), !dbg !10059
  %10 = bitcast i64* %i to i8*, !dbg !10060
  call void @llvm.lifetime.end(i64 8, i8* %10) #2, !dbg !10060
  ret void, !dbg !10060
}

declare i32 @PyCallable_Check(%struct._object*) #3

; Function Attrs: nounwind uwtable
define internal i32 @check_class(%struct._object* %cls, i8* %error) #0 {
entry:
  %retval = alloca i32, align 4
  %cls.addr = alloca %struct._object*, align 8
  %error.addr = alloca i8*, align 8
  %bases = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %cls.addr, metadata !1761, metadata !1833), !dbg !10061
  store i8* %error, i8** %error.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata i8** %error.addr, metadata !1762, metadata !1833), !dbg !10062
  %0 = bitcast %struct._object** %bases to i8*, !dbg !10063
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !10063
  call void @llvm.dbg.declare(metadata %struct._object** %bases, metadata !1763, metadata !1833), !dbg !10064
  %1 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !10065, !tbaa !1829
  %call = call %struct._object* @abstract_get_bases(%struct._object* %1), !dbg !10066
  store %struct._object* %call, %struct._object** %bases, align 8, !dbg !10064, !tbaa !1829
  %2 = load %struct._object*, %struct._object** %bases, align 8, !dbg !10067, !tbaa !1829
  %cmp = icmp eq %struct._object* %2, null, !dbg !10069
  br i1 %cmp, label %if.then, label %if.end.3, !dbg !10070

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred(), !dbg !10071
  %tobool = icmp ne %struct._object* %call1, null, !dbg !10071
  br i1 %tobool, label %if.end, label %if.then.2, !dbg !10074

if.then.2:                                        ; preds = %if.then
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !10075, !tbaa !1829
  %4 = load i8*, i8** %error.addr, align 8, !dbg !10076, !tbaa !1829
  call void @PyErr_SetString(%struct._object* %3, i8* %4), !dbg !10077
  br label %if.end, !dbg !10077

if.end:                                           ; preds = %if.then.2, %if.then
  store i32 0, i32* %retval, !dbg !10078
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10078

if.end.3:                                         ; preds = %entry
  br label %do.body, !dbg !10079

do.body:                                          ; preds = %if.end.3
  %5 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10080
  call void @llvm.lifetime.start(i64 8, i8* %5) #2, !dbg !10080
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1764, metadata !1833), !dbg !10082
  %6 = load %struct._object*, %struct._object** %bases, align 8, !dbg !10083, !tbaa !1829
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8, !dbg !10082, !tbaa !1829
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10084, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0, !dbg !10086
  %8 = load i64, i64* %ob_refcnt, align 8, !dbg !10087, !tbaa !1853
  %dec = add i64 %8, -1, !dbg !10087
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !10087, !tbaa !1853
  %cmp4 = icmp ne i64 %dec, 0, !dbg !10088
  br i1 %cmp4, label %if.then.5, label %if.else, !dbg !10089

if.then.5:                                        ; preds = %do.body
  br label %if.end.6, !dbg !10090

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10092, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1, !dbg !10094
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !10094, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4, !dbg !10095
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !10095, !tbaa !2033
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10096, !tbaa !1829
  call void %11(%struct._object* %12), !dbg !10097
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  %13 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10098
  call void @llvm.lifetime.end(i64 8, i8* %13) #2, !dbg !10098
  br label %do.cond, !dbg !10100

do.cond:                                          ; preds = %if.end.6
  br label %do.end, !dbg !10101

do.end:                                           ; preds = %do.cond
  store i32 -1, i32* %retval, !dbg !10103
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10103

cleanup:                                          ; preds = %do.end, %if.end
  %14 = bitcast %struct._object** %bases to i8*, !dbg !10104
  call void @llvm.lifetime.end(i64 8, i8* %14) #2, !dbg !10104
  %15 = load i32, i32* %retval, !dbg !10104
  ret i32 %15, !dbg !10104
}

; Function Attrs: nounwind uwtable
define internal i32 @abstract_issubclass(%struct._object* %derived, %struct._object* %cls) #0 {
entry:
  %retval = alloca i32, align 4
  %derived.addr = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  %bases = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %r = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp16 = alloca %struct._object*, align 8
  %_py_decref_tmp36 = alloca %struct._object*, align 8
  store %struct._object* %derived, %struct._object** %derived.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %derived.addr, metadata !1794, metadata !1833), !dbg !10105
  store %struct._object* %cls, %struct._object** %cls.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %cls.addr, metadata !1795, metadata !1833), !dbg !10106
  %0 = bitcast %struct._object** %bases to i8*, !dbg !10107
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !10107
  call void @llvm.dbg.declare(metadata %struct._object** %bases, metadata !1796, metadata !1833), !dbg !10108
  store %struct._object* null, %struct._object** %bases, align 8, !dbg !10108, !tbaa !1829
  %1 = bitcast i64* %i to i8*, !dbg !10109
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !10109
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1797, metadata !1833), !dbg !10110
  %2 = bitcast i64* %n to i8*, !dbg !10109
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !10109
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1798, metadata !1833), !dbg !10111
  %3 = bitcast i32* %r to i8*, !dbg !10112
  call void @llvm.lifetime.start(i64 4, i8* %3) #2, !dbg !10112
  call void @llvm.dbg.declare(metadata i32* %r, metadata !1799, metadata !1833), !dbg !10113
  store i32 0, i32* %r, align 4, !dbg !10113, !tbaa !2764
  br label %while.cond, !dbg !10114

while.cond:                                       ; preds = %do.end.26, %entry
  br label %while.body, !dbg !10115

while.body:                                       ; preds = %while.cond
  %4 = load %struct._object*, %struct._object** %derived.addr, align 8, !dbg !10117, !tbaa !1829
  %5 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !10119, !tbaa !1829
  %cmp = icmp eq %struct._object* %4, %5, !dbg !10120
  br i1 %cmp, label %if.then, label %if.end, !dbg !10121

if.then:                                          ; preds = %while.body
  store i32 1, i32* %retval, !dbg !10122
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10122

if.end:                                           ; preds = %while.body
  %6 = load %struct._object*, %struct._object** %derived.addr, align 8, !dbg !10123, !tbaa !1829
  %call = call %struct._object* @abstract_get_bases(%struct._object* %6), !dbg !10124
  store %struct._object* %call, %struct._object** %bases, align 8, !dbg !10125, !tbaa !1829
  %7 = load %struct._object*, %struct._object** %bases, align 8, !dbg !10126, !tbaa !1829
  %cmp1 = icmp eq %struct._object* %7, null, !dbg !10128
  br i1 %cmp1, label %if.then.2, label %if.end.6, !dbg !10129

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @PyErr_Occurred(), !dbg !10130
  %tobool = icmp ne %struct._object* %call3, null, !dbg !10130
  br i1 %tobool, label %if.then.4, label %if.end.5, !dbg !10133

if.then.4:                                        ; preds = %if.then.2
  store i32 -1, i32* %retval, !dbg !10134
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10134

if.end.5:                                         ; preds = %if.then.2
  store i32 0, i32* %retval, !dbg !10135
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10135

if.end.6:                                         ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %bases, align 8, !dbg !10136, !tbaa !1829
  %9 = bitcast %struct._object* %8 to %struct.PyVarObject*, !dbg !10137
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %9, i32 0, i32 1, !dbg !10138
  %10 = load i64, i64* %ob_size, align 8, !dbg !10138, !tbaa !5788
  store i64 %10, i64* %n, align 8, !dbg !10139, !tbaa !1963
  %11 = load i64, i64* %n, align 8, !dbg !10140, !tbaa !1963
  %cmp7 = icmp eq i64 %11, 0, !dbg !10141
  br i1 %cmp7, label %if.then.8, label %if.end.12, !dbg !10142

if.then.8:                                        ; preds = %if.end.6
  br label %do.body, !dbg !10143

do.body:                                          ; preds = %if.then.8
  %12 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10144
  call void @llvm.lifetime.start(i64 8, i8* %12) #2, !dbg !10144
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1800, metadata !1833), !dbg !10146
  %13 = load %struct._object*, %struct._object** %bases, align 8, !dbg !10147, !tbaa !1829
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8, !dbg !10146, !tbaa !1829
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10148, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0, !dbg !10150
  %15 = load i64, i64* %ob_refcnt, align 8, !dbg !10151, !tbaa !1853
  %dec = add i64 %15, -1, !dbg !10151
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !10151, !tbaa !1853
  %cmp9 = icmp ne i64 %dec, 0, !dbg !10152
  br i1 %cmp9, label %if.then.10, label %if.else, !dbg !10153

if.then.10:                                       ; preds = %do.body
  br label %if.end.11, !dbg !10154

if.else:                                          ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10156, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1, !dbg !10158
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !10158, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4, !dbg !10159
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !10159, !tbaa !2033
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10160, !tbaa !1829
  call void %18(%struct._object* %19), !dbg !10161
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.10
  %20 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10162
  call void @llvm.lifetime.end(i64 8, i8* %20) #2, !dbg !10162
  br label %do.cond, !dbg !10164

do.cond:                                          ; preds = %if.end.11
  br label %do.end, !dbg !10165

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %retval, !dbg !10167
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10167

if.end.12:                                        ; preds = %if.end.6
  %21 = load i64, i64* %n, align 8, !dbg !10168, !tbaa !1963
  %cmp13 = icmp eq i64 %21, 1, !dbg !10169
  br i1 %cmp13, label %if.then.14, label %if.end.27, !dbg !10170

if.then.14:                                       ; preds = %if.end.12
  %22 = load %struct._object*, %struct._object** %bases, align 8, !dbg !10171, !tbaa !1829
  %23 = bitcast %struct._object* %22 to %struct.PyTupleObject*, !dbg !10172
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %23, i32 0, i32 1, !dbg !10173
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0, !dbg !10174
  %24 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !10174, !tbaa !1829
  store %struct._object* %24, %struct._object** %derived.addr, align 8, !dbg !10175, !tbaa !1829
  br label %do.body.15, !dbg !10176

do.body.15:                                       ; preds = %if.then.14
  %25 = bitcast %struct._object** %_py_decref_tmp16 to i8*, !dbg !10177
  call void @llvm.lifetime.start(i64 8, i8* %25) #2, !dbg !10177
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp16, metadata !1805, metadata !1833), !dbg !10179
  %26 = load %struct._object*, %struct._object** %bases, align 8, !dbg !10180, !tbaa !1829
  store %struct._object* %26, %struct._object** %_py_decref_tmp16, align 8, !dbg !10179, !tbaa !1829
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8, !dbg !10181, !tbaa !1829
  %ob_refcnt17 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0, !dbg !10183
  %28 = load i64, i64* %ob_refcnt17, align 8, !dbg !10184, !tbaa !1853
  %dec18 = add i64 %28, -1, !dbg !10184
  store i64 %dec18, i64* %ob_refcnt17, align 8, !dbg !10184, !tbaa !1853
  %cmp19 = icmp ne i64 %dec18, 0, !dbg !10185
  br i1 %cmp19, label %if.then.20, label %if.else.21, !dbg !10186

if.then.20:                                       ; preds = %do.body.15
  br label %if.end.24, !dbg !10187

if.else.21:                                       ; preds = %do.body.15
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8, !dbg !10189, !tbaa !1829
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1, !dbg !10191
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8, !dbg !10191, !tbaa !1845
  %tp_dealloc23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4, !dbg !10192
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc23, align 8, !dbg !10192, !tbaa !2033
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8, !dbg !10193, !tbaa !1829
  call void %31(%struct._object* %32), !dbg !10194
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.21, %if.then.20
  %33 = bitcast %struct._object** %_py_decref_tmp16 to i8*, !dbg !10195
  call void @llvm.lifetime.end(i64 8, i8* %33) #2, !dbg !10195
  br label %do.cond.25, !dbg !10197

do.cond.25:                                       ; preds = %if.end.24
  br label %do.end.26, !dbg !10198

do.end.26:                                        ; preds = %do.cond.25
  br label %while.cond, !dbg !10200

if.end.27:                                        ; preds = %if.end.12
  store i64 0, i64* %i, align 8, !dbg !10201, !tbaa !1963
  br label %for.cond, !dbg !10203

for.cond:                                         ; preds = %for.inc, %if.end.27
  %34 = load i64, i64* %i, align 8, !dbg !10204, !tbaa !1963
  %35 = load i64, i64* %n, align 8, !dbg !10208, !tbaa !1963
  %cmp28 = icmp slt i64 %34, %35, !dbg !10209
  br i1 %cmp28, label %for.body, label %for.end, !dbg !10210

for.body:                                         ; preds = %for.cond
  %36 = load i64, i64* %i, align 8, !dbg !10211, !tbaa !1963
  %37 = load %struct._object*, %struct._object** %bases, align 8, !dbg !10213, !tbaa !1829
  %38 = bitcast %struct._object* %37 to %struct.PyTupleObject*, !dbg !10214
  %ob_item29 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %38, i32 0, i32 1, !dbg !10215
  %arrayidx30 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item29, i32 0, i64 %36, !dbg !10216
  %39 = load %struct._object*, %struct._object** %arrayidx30, align 8, !dbg !10216, !tbaa !1829
  %40 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !10217, !tbaa !1829
  %call31 = call i32 @abstract_issubclass(%struct._object* %39, %struct._object* %40), !dbg !10218
  store i32 %call31, i32* %r, align 4, !dbg !10219, !tbaa !2764
  %41 = load i32, i32* %r, align 4, !dbg !10220, !tbaa !2764
  %cmp32 = icmp ne i32 %41, 0, !dbg !10222
  br i1 %cmp32, label %if.then.33, label %if.end.34, !dbg !10223

if.then.33:                                       ; preds = %for.body
  br label %for.end, !dbg !10224

if.end.34:                                        ; preds = %for.body
  br label %for.inc, !dbg !10225

for.inc:                                          ; preds = %if.end.34
  %42 = load i64, i64* %i, align 8, !dbg !10226, !tbaa !1963
  %inc = add i64 %42, 1, !dbg !10226
  store i64 %inc, i64* %i, align 8, !dbg !10226, !tbaa !1963
  br label %for.cond, !dbg !10227

for.end:                                          ; preds = %if.then.33, %for.cond
  br label %do.body.35, !dbg !10228

do.body.35:                                       ; preds = %for.end
  %43 = bitcast %struct._object** %_py_decref_tmp36 to i8*, !dbg !10229
  call void @llvm.lifetime.start(i64 8, i8* %43) #2, !dbg !10229
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp36, metadata !1809, metadata !1833), !dbg !10231
  %44 = load %struct._object*, %struct._object** %bases, align 8, !dbg !10232, !tbaa !1829
  store %struct._object* %44, %struct._object** %_py_decref_tmp36, align 8, !dbg !10231, !tbaa !1829
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8, !dbg !10233, !tbaa !1829
  %ob_refcnt37 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 0, !dbg !10235
  %46 = load i64, i64* %ob_refcnt37, align 8, !dbg !10236, !tbaa !1853
  %dec38 = add i64 %46, -1, !dbg !10236
  store i64 %dec38, i64* %ob_refcnt37, align 8, !dbg !10236, !tbaa !1853
  %cmp39 = icmp ne i64 %dec38, 0, !dbg !10237
  br i1 %cmp39, label %if.then.40, label %if.else.41, !dbg !10238

if.then.40:                                       ; preds = %do.body.35
  br label %if.end.44, !dbg !10239

if.else.41:                                       ; preds = %do.body.35
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8, !dbg !10241, !tbaa !1829
  %ob_type42 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 1, !dbg !10243
  %48 = load %struct._typeobject*, %struct._typeobject** %ob_type42, align 8, !dbg !10243, !tbaa !1845
  %tp_dealloc43 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %48, i32 0, i32 4, !dbg !10244
  %49 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc43, align 8, !dbg !10244, !tbaa !2033
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8, !dbg !10245, !tbaa !1829
  call void %49(%struct._object* %50), !dbg !10246
  br label %if.end.44

if.end.44:                                        ; preds = %if.else.41, %if.then.40
  %51 = bitcast %struct._object** %_py_decref_tmp36 to i8*, !dbg !10247
  call void @llvm.lifetime.end(i64 8, i8* %51) #2, !dbg !10247
  br label %do.cond.45, !dbg !10249

do.cond.45:                                       ; preds = %if.end.44
  br label %do.end.46, !dbg !10250

do.end.46:                                        ; preds = %do.cond.45
  %52 = load i32, i32* %r, align 4, !dbg !10252, !tbaa !2764
  store i32 %52, i32* %retval, !dbg !10253
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10253

cleanup:                                          ; preds = %do.end.46, %do.end, %if.end.5, %if.then.4, %if.then
  %53 = bitcast i32* %r to i8*, !dbg !10254
  call void @llvm.lifetime.end(i64 4, i8* %53) #2, !dbg !10254
  %54 = bitcast i64* %n to i8*, !dbg !10254
  call void @llvm.lifetime.end(i64 8, i8* %54) #2, !dbg !10254
  %55 = bitcast i64* %i to i8*, !dbg !10254
  call void @llvm.lifetime.end(i64 8, i8* %55) #2, !dbg !10254
  %56 = bitcast %struct._object** %bases to i8*, !dbg !10254
  call void @llvm.lifetime.end(i64 8, i8* %56) #2, !dbg !10254
  %57 = load i32, i32* %retval, !dbg !10254
  ret i32 %57, !dbg !10254
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @abstract_get_bases(%struct._object* %cls) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  %bases = alloca %struct._object*, align 8
  %_old = alloca i8, align 1
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %atomic_val5 = alloca %struct._Py_atomic_address*, align 8
  %result7 = alloca i8*, align 8
  %volatile_data9 = alloca i8**, align 8
  %order12 = alloca i32, align 4
  %tmp19 = alloca i8*, align 8
  %atomic_val22 = alloca %struct._Py_atomic_address*, align 8
  %result24 = alloca i8*, align 8
  %volatile_data26 = alloca i8**, align 8
  %order29 = alloca i32, align 4
  %tmp36 = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8, !tbaa !1829
  call void @llvm.dbg.declare(metadata %struct._object** %cls.addr, metadata !1768, metadata !1833), !dbg !10255
  %0 = bitcast %struct._object** %bases to i8*, !dbg !10256
  call void @llvm.lifetime.start(i64 8, i8* %0) #2, !dbg !10256
  call void @llvm.dbg.declare(metadata %struct._object** %bases, metadata !1769, metadata !1833), !dbg !10257
  br label %do.body, !dbg !10258

do.body:                                          ; preds = %entry
  call void @llvm.lifetime.start(i64 1, i8* %_old) #2, !dbg !10259
  call void @llvm.dbg.declare(metadata i8* %_old, metadata !1770, metadata !1833), !dbg !10260
  %1 = bitcast %struct._Py_atomic_address** %atomic_val to i8*, !dbg !10261
  call void @llvm.lifetime.start(i64 8, i8* %1) #2, !dbg !10261
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val, metadata !1773, metadata !1833), !dbg !10263
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8, !dbg !10263, !tbaa !1829
  %2 = bitcast i8** %result to i8*, !dbg !10264
  call void @llvm.lifetime.start(i64 8, i8* %2) #2, !dbg !10264
  call void @llvm.dbg.declare(metadata i8** %result, metadata !1775, metadata !1833), !dbg !10265
  %3 = bitcast i8*** %volatile_data to i8*, !dbg !10266
  call void @llvm.lifetime.start(i64 8, i8* %3) #2, !dbg !10266
  call void @llvm.dbg.declare(metadata i8*** %volatile_data, metadata !1776, metadata !1833), !dbg !10267
  %4 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8, !dbg !10268, !tbaa !1829
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %4, i32 0, i32 0, !dbg !10269
  store i8** %_value, i8*** %volatile_data, align 8, !dbg !10267, !tbaa !1829
  %5 = bitcast i32* %order to i8*, !dbg !10270
  call void @llvm.lifetime.start(i64 4, i8* %5) #2, !dbg !10270
  call void @llvm.dbg.declare(metadata i32* %order, metadata !1777, metadata !1833), !dbg !10271
  store i32 0, i32* %order, align 4, !dbg !10271, !tbaa !3250
  %6 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8, !dbg !10272, !tbaa !1829
  %7 = bitcast %struct._Py_atomic_address* %6 to i8*, !dbg !10272
  %8 = load i32, i32* %order, align 4, !dbg !10273, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %7, i32 %8), !dbg !10274
  %9 = load i32, i32* %order, align 4, !dbg !10275, !tbaa !3250
  br label %LeafBlock

LeafBlock:                                        ; preds = %do.body
  %.off = add i32 %9, -2
  %SwitchLeaf = icmp ule i32 %.off, 2
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  call void @_Py_atomic_thread_fence(i32 2), !dbg !10276
  br label %sw.epilog, !dbg !10281

NewDefault:                                       ; preds = %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  br label %sw.epilog, !dbg !10282

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %10 = load i8**, i8*** %volatile_data, align 8, !dbg !10284, !tbaa !1829
  %11 = load volatile i8*, i8** %10, align 8, !dbg !10287, !tbaa !1829
  store i8* %11, i8** %result, align 8, !dbg !10288, !tbaa !1829
  %12 = load i32, i32* %order, align 4, !dbg !10289, !tbaa !3250
  br label %NodeBlock

NodeBlock:                                        ; preds = %sw.epilog
  %Pivot = icmp slt i32 %12, 3
  br i1 %Pivot, label %LeafBlock.2, label %LeafBlock.4

LeafBlock.4:                                      ; preds = %NodeBlock
  %.off.5 = add i32 %12, -3
  %SwitchLeaf6 = icmp ule i32 %.off.5, 1
  br i1 %SwitchLeaf6, label %sw.bb.1, label %NewDefault.1

LeafBlock.2:                                      ; preds = %NodeBlock
  %SwitchLeaf3 = icmp eq i32 %12, 1
  br i1 %SwitchLeaf3, label %sw.bb.1, label %NewDefault.1

sw.bb.1:                                          ; preds = %LeafBlock.4, %LeafBlock.2
  call void @_Py_atomic_signal_fence(i32 1), !dbg !10290
  br label %sw.epilog.3, !dbg !10295

NewDefault.1:                                     ; preds = %LeafBlock.4, %LeafBlock.2
  br label %sw.default.2

sw.default.2:                                     ; preds = %NewDefault.1
  br label %sw.epilog.3, !dbg !10296

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %13 = load i8*, i8** %result, align 8, !dbg !10298, !tbaa !1829
  store i8* %13, i8** %tmp, !dbg !10301, !tbaa !1829
  %14 = bitcast i32* %order to i8*, !dbg !10302
  call void @llvm.lifetime.end(i64 4, i8* %14) #2, !dbg !10302
  %15 = bitcast i8*** %volatile_data to i8*, !dbg !10302
  call void @llvm.lifetime.end(i64 8, i8* %15) #2, !dbg !10302
  %16 = bitcast i8** %result to i8*, !dbg !10302
  call void @llvm.lifetime.end(i64 8, i8* %16) #2, !dbg !10302
  %17 = bitcast %struct._Py_atomic_address** %atomic_val to i8*, !dbg !10302
  call void @llvm.lifetime.end(i64 8, i8* %17) #2, !dbg !10302
  %18 = load i8*, i8** %tmp, !dbg !10303, !tbaa !1829
  %19 = bitcast i8* %18 to %struct._ts*, !dbg !10304
  %recursion_critical = getelementptr inbounds %struct._ts, %struct._ts* %19, i32 0, i32 6, !dbg !10305
  %20 = load i8, i8* %recursion_critical, align 1, !dbg !10305, !tbaa !10306
  store i8 %20, i8* %_old, align 1, !dbg !10260, !tbaa !3250
  %21 = bitcast %struct._Py_atomic_address** %atomic_val5 to i8*, !dbg !10307
  call void @llvm.lifetime.start(i64 8, i8* %21) #2, !dbg !10307
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val5, metadata !1778, metadata !1833), !dbg !10308
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val5, align 8, !dbg !10308, !tbaa !1829
  %22 = bitcast i8** %result7 to i8*, !dbg !10309
  call void @llvm.lifetime.start(i64 8, i8* %22) #2, !dbg !10309
  call void @llvm.dbg.declare(metadata i8** %result7, metadata !1780, metadata !1833), !dbg !10310
  %23 = bitcast i8*** %volatile_data9 to i8*, !dbg !10311
  call void @llvm.lifetime.start(i64 8, i8* %23) #2, !dbg !10311
  call void @llvm.dbg.declare(metadata i8*** %volatile_data9, metadata !1781, metadata !1833), !dbg !10312
  %24 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val5, align 8, !dbg !10313, !tbaa !1829
  %_value10 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %24, i32 0, i32 0, !dbg !10314
  store i8** %_value10, i8*** %volatile_data9, align 8, !dbg !10312, !tbaa !1829
  %25 = bitcast i32* %order12 to i8*, !dbg !10315
  call void @llvm.lifetime.start(i64 4, i8* %25) #2, !dbg !10315
  call void @llvm.dbg.declare(metadata i32* %order12, metadata !1782, metadata !1833), !dbg !10316
  store i32 0, i32* %order12, align 4, !dbg !10316, !tbaa !3250
  %26 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val5, align 8, !dbg !10317, !tbaa !1829
  %27 = bitcast %struct._Py_atomic_address* %26 to i8*, !dbg !10317
  %28 = load i32, i32* %order12, align 4, !dbg !10318, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %27, i32 %28), !dbg !10319
  %29 = load i32, i32* %order12, align 4, !dbg !10320, !tbaa !3250
  br label %LeafBlock.8

LeafBlock.8:                                      ; preds = %sw.epilog.3
  %.off.9 = add i32 %29, -2
  %SwitchLeaf10 = icmp ule i32 %.off.9, 2
  br i1 %SwitchLeaf10, label %sw.bb.13, label %NewDefault.7

sw.bb.13:                                         ; preds = %LeafBlock.8
  call void @_Py_atomic_thread_fence(i32 2), !dbg !10321
  br label %sw.epilog.15, !dbg !10326

NewDefault.7:                                     ; preds = %LeafBlock.8
  br label %sw.default.14

sw.default.14:                                    ; preds = %NewDefault.7
  br label %sw.epilog.15, !dbg !10327

sw.epilog.15:                                     ; preds = %sw.default.14, %sw.bb.13
  %30 = load i8**, i8*** %volatile_data9, align 8, !dbg !10329, !tbaa !1829
  %31 = load volatile i8*, i8** %30, align 8, !dbg !10332, !tbaa !1829
  store i8* %31, i8** %result7, align 8, !dbg !10333, !tbaa !1829
  %32 = load i32, i32* %order12, align 4, !dbg !10334, !tbaa !3250
  br label %NodeBlock.17

NodeBlock.17:                                     ; preds = %sw.epilog.15
  %Pivot.18 = icmp slt i32 %32, 3
  br i1 %Pivot.18, label %LeafBlock.12, label %LeafBlock.14

LeafBlock.14:                                     ; preds = %NodeBlock.17
  %.off.15 = add i32 %32, -3
  %SwitchLeaf16 = icmp ule i32 %.off.15, 1
  br i1 %SwitchLeaf16, label %sw.bb.16, label %NewDefault.11

LeafBlock.12:                                     ; preds = %NodeBlock.17
  %SwitchLeaf13 = icmp eq i32 %32, 1
  br i1 %SwitchLeaf13, label %sw.bb.16, label %NewDefault.11

sw.bb.16:                                         ; preds = %LeafBlock.14, %LeafBlock.12
  call void @_Py_atomic_signal_fence(i32 1), !dbg !10335
  br label %sw.epilog.18, !dbg !10340

NewDefault.11:                                    ; preds = %LeafBlock.14, %LeafBlock.12
  br label %sw.default.17

sw.default.17:                                    ; preds = %NewDefault.11
  br label %sw.epilog.18, !dbg !10341

sw.epilog.18:                                     ; preds = %sw.default.17, %sw.bb.16
  %33 = load i8*, i8** %result7, align 8, !dbg !10343, !tbaa !1829
  store i8* %33, i8** %tmp19, !dbg !10346, !tbaa !1829
  %34 = bitcast i32* %order12 to i8*, !dbg !10347
  call void @llvm.lifetime.end(i64 4, i8* %34) #2, !dbg !10347
  %35 = bitcast i8*** %volatile_data9 to i8*, !dbg !10347
  call void @llvm.lifetime.end(i64 8, i8* %35) #2, !dbg !10347
  %36 = bitcast i8** %result7 to i8*, !dbg !10347
  call void @llvm.lifetime.end(i64 8, i8* %36) #2, !dbg !10347
  %37 = bitcast %struct._Py_atomic_address** %atomic_val5 to i8*, !dbg !10347
  call void @llvm.lifetime.end(i64 8, i8* %37) #2, !dbg !10347
  %38 = load i8*, i8** %tmp19, !dbg !10348, !tbaa !1829
  %39 = bitcast i8* %38 to %struct._ts*, !dbg !10349
  %recursion_critical20 = getelementptr inbounds %struct._ts, %struct._ts* %39, i32 0, i32 6, !dbg !10350
  store i8 1, i8* %recursion_critical20, align 1, !dbg !10351, !tbaa !10306
  %40 = load %struct._object*, %struct._object** %cls.addr, align 8, !dbg !10352, !tbaa !1829
  %call = call %struct._object* @_PyObject_GetAttrId(%struct._object* %40, %struct._Py_Identifier* @abstract_get_bases.PyId___bases__), !dbg !10353
  store %struct._object* %call, %struct._object** %bases, align 8, !dbg !10354, !tbaa !1829
  %41 = load i8, i8* %_old, align 1, !dbg !10355, !tbaa !3250
  %42 = bitcast %struct._Py_atomic_address** %atomic_val22 to i8*, !dbg !10356
  call void @llvm.lifetime.start(i64 8, i8* %42) #2, !dbg !10356
  call void @llvm.dbg.declare(metadata %struct._Py_atomic_address** %atomic_val22, metadata !1783, metadata !1833), !dbg !10357
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val22, align 8, !dbg !10357, !tbaa !1829
  %43 = bitcast i8** %result24 to i8*, !dbg !10358
  call void @llvm.lifetime.start(i64 8, i8* %43) #2, !dbg !10358
  call void @llvm.dbg.declare(metadata i8** %result24, metadata !1785, metadata !1833), !dbg !10359
  %44 = bitcast i8*** %volatile_data26 to i8*, !dbg !10360
  call void @llvm.lifetime.start(i64 8, i8* %44) #2, !dbg !10360
  call void @llvm.dbg.declare(metadata i8*** %volatile_data26, metadata !1786, metadata !1833), !dbg !10361
  %45 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val22, align 8, !dbg !10362, !tbaa !1829
  %_value27 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %45, i32 0, i32 0, !dbg !10363
  store i8** %_value27, i8*** %volatile_data26, align 8, !dbg !10361, !tbaa !1829
  %46 = bitcast i32* %order29 to i8*, !dbg !10364
  call void @llvm.lifetime.start(i64 4, i8* %46) #2, !dbg !10364
  call void @llvm.dbg.declare(metadata i32* %order29, metadata !1787, metadata !1833), !dbg !10365
  store i32 0, i32* %order29, align 4, !dbg !10365, !tbaa !3250
  %47 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val22, align 8, !dbg !10366, !tbaa !1829
  %48 = bitcast %struct._Py_atomic_address* %47 to i8*, !dbg !10366
  %49 = load i32, i32* %order29, align 4, !dbg !10367, !tbaa !3250
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %48, i32 %49), !dbg !10368
  %50 = load i32, i32* %order29, align 4, !dbg !10369, !tbaa !3250
  br label %LeafBlock.20

LeafBlock.20:                                     ; preds = %sw.epilog.18
  %.off.21 = add i32 %50, -2
  %SwitchLeaf22 = icmp ule i32 %.off.21, 2
  br i1 %SwitchLeaf22, label %sw.bb.30, label %NewDefault.19

sw.bb.30:                                         ; preds = %LeafBlock.20
  call void @_Py_atomic_thread_fence(i32 2), !dbg !10370
  br label %sw.epilog.32, !dbg !10375

NewDefault.19:                                    ; preds = %LeafBlock.20
  br label %sw.default.31

sw.default.31:                                    ; preds = %NewDefault.19
  br label %sw.epilog.32, !dbg !10376

sw.epilog.32:                                     ; preds = %sw.default.31, %sw.bb.30
  %51 = load i8**, i8*** %volatile_data26, align 8, !dbg !10378, !tbaa !1829
  %52 = load volatile i8*, i8** %51, align 8, !dbg !10381, !tbaa !1829
  store i8* %52, i8** %result24, align 8, !dbg !10382, !tbaa !1829
  %53 = load i32, i32* %order29, align 4, !dbg !10383, !tbaa !3250
  br label %NodeBlock.29

NodeBlock.29:                                     ; preds = %sw.epilog.32
  %Pivot.30 = icmp slt i32 %53, 3
  br i1 %Pivot.30, label %LeafBlock.24, label %LeafBlock.26

LeafBlock.26:                                     ; preds = %NodeBlock.29
  %.off.27 = add i32 %53, -3
  %SwitchLeaf28 = icmp ule i32 %.off.27, 1
  br i1 %SwitchLeaf28, label %sw.bb.33, label %NewDefault.23

LeafBlock.24:                                     ; preds = %NodeBlock.29
  %SwitchLeaf25 = icmp eq i32 %53, 1
  br i1 %SwitchLeaf25, label %sw.bb.33, label %NewDefault.23

sw.bb.33:                                         ; preds = %LeafBlock.26, %LeafBlock.24
  call void @_Py_atomic_signal_fence(i32 1), !dbg !10384
  br label %sw.epilog.35, !dbg !10389

NewDefault.23:                                    ; preds = %LeafBlock.26, %LeafBlock.24
  br label %sw.default.34

sw.default.34:                                    ; preds = %NewDefault.23
  br label %sw.epilog.35, !dbg !10390

sw.epilog.35:                                     ; preds = %sw.default.34, %sw.bb.33
  %54 = load i8*, i8** %result24, align 8, !dbg !10392, !tbaa !1829
  store i8* %54, i8** %tmp36, !dbg !10395, !tbaa !1829
  %55 = bitcast i32* %order29 to i8*, !dbg !10396
  call void @llvm.lifetime.end(i64 4, i8* %55) #2, !dbg !10396
  %56 = bitcast i8*** %volatile_data26 to i8*, !dbg !10396
  call void @llvm.lifetime.end(i64 8, i8* %56) #2, !dbg !10396
  %57 = bitcast i8** %result24 to i8*, !dbg !10396
  call void @llvm.lifetime.end(i64 8, i8* %57) #2, !dbg !10396
  %58 = bitcast %struct._Py_atomic_address** %atomic_val22 to i8*, !dbg !10396
  call void @llvm.lifetime.end(i64 8, i8* %58) #2, !dbg !10396
  %59 = load i8*, i8** %tmp36, !dbg !10397, !tbaa !1829
  %60 = bitcast i8* %59 to %struct._ts*, !dbg !10398
  %recursion_critical37 = getelementptr inbounds %struct._ts, %struct._ts* %60, i32 0, i32 6, !dbg !10399
  store i8 %41, i8* %recursion_critical37, align 1, !dbg !10400, !tbaa !10306
  call void @llvm.lifetime.end(i64 1, i8* %_old) #2, !dbg !10401
  br label %do.cond, !dbg !10402

do.cond:                                          ; preds = %sw.epilog.35
  br label %do.end, !dbg !10403

do.end:                                           ; preds = %do.cond
  %61 = load %struct._object*, %struct._object** %bases, align 8, !dbg !10405, !tbaa !1829
  %cmp = icmp eq %struct._object* %61, null, !dbg !10407
  br i1 %cmp, label %if.then, label %if.end.40, !dbg !10408

if.then:                                          ; preds = %do.end
  %62 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8, !dbg !10409, !tbaa !1829
  %call38 = call i32 @PyErr_ExceptionMatches(%struct._object* %62), !dbg !10412
  %tobool = icmp ne i32 %call38, 0, !dbg !10412
  br i1 %tobool, label %if.then.39, label %if.end, !dbg !10413

if.then.39:                                       ; preds = %if.then
  call void @PyErr_Clear(), !dbg !10414
  br label %if.end, !dbg !10414

if.end:                                           ; preds = %if.then.39, %if.then
  store %struct._object* null, %struct._object** %retval, !dbg !10415
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10415

if.end.40:                                        ; preds = %do.end
  %63 = load %struct._object*, %struct._object** %bases, align 8, !dbg !10416, !tbaa !1829
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 1, !dbg !10417
  %64 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !10417, !tbaa !1845
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %64, i32 0, i32 19, !dbg !10418
  %65 = load i64, i64* %tp_flags, align 8, !dbg !10418, !tbaa !2086
  %and = and i64 %65, 67108864, !dbg !10419
  %cmp41 = icmp ne i64 %and, 0, !dbg !10420
  br i1 %cmp41, label %if.end.51, label %if.then.42, !dbg !10421

if.then.42:                                       ; preds = %if.end.40
  br label %do.body.43, !dbg !10422

do.body.43:                                       ; preds = %if.then.42
  %66 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10423
  call void @llvm.lifetime.start(i64 8, i8* %66) #2, !dbg !10423
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1788, metadata !1833), !dbg !10425
  %67 = load %struct._object*, %struct._object** %bases, align 8, !dbg !10426, !tbaa !1829
  store %struct._object* %67, %struct._object** %_py_decref_tmp, align 8, !dbg !10425, !tbaa !1829
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10427, !tbaa !1829
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 0, !dbg !10429
  %69 = load i64, i64* %ob_refcnt, align 8, !dbg !10430, !tbaa !1853
  %dec = add i64 %69, -1, !dbg !10430
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !10430, !tbaa !1853
  %cmp45 = icmp ne i64 %dec, 0, !dbg !10431
  br i1 %cmp45, label %if.then.46, label %if.else, !dbg !10432

if.then.46:                                       ; preds = %do.body.43
  br label %if.end.48, !dbg !10433

if.else:                                          ; preds = %do.body.43
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10435, !tbaa !1829
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1, !dbg !10437
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8, !dbg !10437, !tbaa !1845
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 4, !dbg !10438
  %72 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !10438, !tbaa !2033
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10439, !tbaa !1829
  call void %72(%struct._object* %73), !dbg !10440
  br label %if.end.48

if.end.48:                                        ; preds = %if.else, %if.then.46
  %74 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10441
  call void @llvm.lifetime.end(i64 8, i8* %74) #2, !dbg !10441
  br label %do.cond.49, !dbg !10443

do.cond.49:                                       ; preds = %if.end.48
  br label %do.end.50, !dbg !10444

do.end.50:                                        ; preds = %do.cond.49
  store %struct._object* null, %struct._object** %retval, !dbg !10446
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10446

if.end.51:                                        ; preds = %if.end.40
  %75 = load %struct._object*, %struct._object** %bases, align 8, !dbg !10447, !tbaa !1829
  store %struct._object* %75, %struct._object** %retval, !dbg !10448
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10448

cleanup:                                          ; preds = %if.end.51, %do.end.50, %if.end
  %76 = bitcast %struct._object** %bases to i8*, !dbg !10449
  call void @llvm.lifetime.end(i64 8, i8* %76) #2, !dbg !10449
  %77 = load %struct._object*, %struct._object** %retval, !dbg !10449
  ret %struct._object* %77, !dbg !10449
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!1826, !1827}
!llvm.ident = !{!1828}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.1 (https://github.com/llvm-mirror/clang.git 0dbefa1b83eb90f7a06b5df5df254ce32be3db4b) (git@github.com:kim-yoonseung/llvm.git e8e68907a8135028089af4d924da468e2b7257fa)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !11, subprograms: !455, globals: !1815)
!1 = !DIFile(filename: "abstract.c", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "_Py_memory_order", file: !4, line: 23, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "Include/pyatomic.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!5 = !{!6, !7, !8, !9, !10}
!6 = !DIEnumerator(name: "_Py_memory_order_relaxed", value: 0)
!7 = !DIEnumerator(name: "_Py_memory_order_acquire", value: 1)
!8 = !DIEnumerator(name: "_Py_memory_order_release", value: 2)
!9 = !DIEnumerator(name: "_Py_memory_order_acq_rel", value: 3)
!10 = !DIEnumerator(name: "_Py_memory_order_seq_cst", value: 4)
!11 = !{!12, !13, !60, !358, !255, !19, !102, !359, !367, !368, !376, !384, !52, !393, !451, !453, !454}
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, align: 64)
!14 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyObject", file: !15, line: 109, baseType: !16)
!15 = !DIFile(filename: "Include/object.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!16 = !DICompositeType(tag: DW_TAG_structure_type, name: "_object", file: !15, line: 105, size: 128, align: 64, elements: !17)
!17 = !{!18, !26}
!18 = !DIDerivedType(tag: DW_TAG_member, name: "ob_refcnt", scope: !16, file: !15, line: 107, baseType: !19, size: 64, align: 64)
!19 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_ssize_t", file: !20, line: 177, baseType: !21)
!20 = !DIFile(filename: "Include/pyport.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!21 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !22, line: 102, baseType: !23)
!22 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!23 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !24, line: 181, baseType: !25)
!24 = !DIFile(filename: "/usr/include/bits/types.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!25 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "ob_type", scope: !16, file: !15, line: 108, baseType: !27, size: 64, align: 64, offset: 64)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64, align: 64)
!28 = !DICompositeType(tag: DW_TAG_structure_type, name: "_typeobject", file: !15, line: 334, size: 3200, align: 64, elements: !29)
!29 = !{!30, !36, !40, !41, !42, !47, !110, !115, !120, !121, !126, !178, !209, !221, !227, !228, !229, !231, !233, !264, !265, !266, !275, !276, !281, !282, !284, !286, !296, !306, !324, !325, !326, !328, !330, !331, !333, !338, !343, !348, !349, !350, !351, !352, !353, !354, !355, !357}
!30 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !28, file: !15, line: 335, baseType: !31, size: 192, align: 64)
!31 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyVarObject", file: !15, line: 114, baseType: !32)
!32 = !DICompositeType(tag: DW_TAG_structure_type, file: !15, line: 111, size: 192, align: 64, elements: !33)
!33 = !{!34, !35}
!34 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !32, file: !15, line: 112, baseType: !14, size: 128, align: 64)
!35 = !DIDerivedType(tag: DW_TAG_member, name: "ob_size", scope: !32, file: !15, line: 113, baseType: !19, size: 64, align: 64, offset: 128)
!36 = !DIDerivedType(tag: DW_TAG_member, name: "tp_name", scope: !28, file: !15, line: 336, baseType: !37, size: 64, align: 64, offset: 192)
!37 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !38, size: 64, align: 64)
!38 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !39)
!39 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!40 = !DIDerivedType(tag: DW_TAG_member, name: "tp_basicsize", scope: !28, file: !15, line: 337, baseType: !19, size: 64, align: 64, offset: 256)
!41 = !DIDerivedType(tag: DW_TAG_member, name: "tp_itemsize", scope: !28, file: !15, line: 337, baseType: !19, size: 64, align: 64, offset: 320)
!42 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dealloc", scope: !28, file: !15, line: 341, baseType: !43, size: 64, align: 64, offset: 384)
!43 = !DIDerivedType(tag: DW_TAG_typedef, name: "destructor", file: !15, line: 308, baseType: !44)
!44 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !45, size: 64, align: 64)
!45 = !DISubroutineType(types: !46)
!46 = !{null, !13}
!47 = !DIDerivedType(tag: DW_TAG_member, name: "tp_print", scope: !28, file: !15, line: 342, baseType: !48, size: 64, align: 64, offset: 448)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "printfunc", file: !15, line: 314, baseType: !49)
!49 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64, align: 64)
!50 = !DISubroutineType(types: !51)
!51 = !{!52, !13, !53, !52}
!52 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!53 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !54, size: 64, align: 64)
!54 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !22, line: 48, baseType: !55)
!55 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !56, line: 246, size: 1728, align: 64, elements: !57)
!56 = !DIFile(filename: "/usr/include/libio.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!57 = !{!58, !59, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !79, !80, !81, !82, !84, !86, !88, !92, !95, !97, !98, !99, !100, !101, !105, !106}
!58 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !55, file: !56, line: 247, baseType: !52, size: 32, align: 32)
!59 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !55, file: !56, line: 252, baseType: !60, size: 64, align: 64, offset: 64)
!60 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !39, size: 64, align: 64)
!61 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !55, file: !56, line: 253, baseType: !60, size: 64, align: 64, offset: 128)
!62 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !55, file: !56, line: 254, baseType: !60, size: 64, align: 64, offset: 192)
!63 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !55, file: !56, line: 255, baseType: !60, size: 64, align: 64, offset: 256)
!64 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !55, file: !56, line: 256, baseType: !60, size: 64, align: 64, offset: 320)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !55, file: !56, line: 257, baseType: !60, size: 64, align: 64, offset: 384)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !55, file: !56, line: 258, baseType: !60, size: 64, align: 64, offset: 448)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !55, file: !56, line: 259, baseType: !60, size: 64, align: 64, offset: 512)
!68 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !55, file: !56, line: 261, baseType: !60, size: 64, align: 64, offset: 576)
!69 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !55, file: !56, line: 262, baseType: !60, size: 64, align: 64, offset: 640)
!70 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !55, file: !56, line: 263, baseType: !60, size: 64, align: 64, offset: 704)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !55, file: !56, line: 265, baseType: !72, size: 64, align: 64, offset: 768)
!72 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !73, size: 64, align: 64)
!73 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !56, line: 161, size: 192, align: 64, elements: !74)
!74 = !{!75, !76, !78}
!75 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !73, file: !56, line: 162, baseType: !72, size: 64, align: 64)
!76 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !73, file: !56, line: 163, baseType: !77, size: 64, align: 64, offset: 64)
!77 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !55, size: 64, align: 64)
!78 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !73, file: !56, line: 167, baseType: !52, size: 32, align: 32, offset: 128)
!79 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !55, file: !56, line: 267, baseType: !77, size: 64, align: 64, offset: 832)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !55, file: !56, line: 269, baseType: !52, size: 32, align: 32, offset: 896)
!81 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !55, file: !56, line: 273, baseType: !52, size: 32, align: 32, offset: 928)
!82 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !55, file: !56, line: 275, baseType: !83, size: 64, align: 64, offset: 960)
!83 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !24, line: 140, baseType: !25)
!84 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !55, file: !56, line: 279, baseType: !85, size: 16, align: 16, offset: 1024)
!85 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!86 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !55, file: !56, line: 280, baseType: !87, size: 8, align: 8, offset: 1040)
!87 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !55, file: !56, line: 281, baseType: !89, size: 8, align: 8, offset: 1048)
!89 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 8, align: 8, elements: !90)
!90 = !{!91}
!91 = !DISubrange(count: 1)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !55, file: !56, line: 285, baseType: !93, size: 64, align: 64, offset: 1088)
!93 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !94, size: 64, align: 64)
!94 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !56, line: 155, baseType: null)
!95 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !55, file: !56, line: 294, baseType: !96, size: 64, align: 64, offset: 1152)
!96 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !24, line: 141, baseType: !25)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !55, file: !56, line: 303, baseType: !12, size: 64, align: 64, offset: 1216)
!98 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !55, file: !56, line: 304, baseType: !12, size: 64, align: 64, offset: 1280)
!99 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !55, file: !56, line: 305, baseType: !12, size: 64, align: 64, offset: 1344)
!100 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !55, file: !56, line: 306, baseType: !12, size: 64, align: 64, offset: 1408)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !55, file: !56, line: 307, baseType: !102, size: 64, align: 64, offset: 1472)
!102 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !103, line: 62, baseType: !104)
!103 = !DIFile(filename: "/opt/devel/yoonseung.kim/llvm_work/build/bin/../lib/clang/3.7.1/include/stddef.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!104 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!105 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !55, file: !56, line: 309, baseType: !52, size: 32, align: 32, offset: 1536)
!106 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !55, file: !56, line: 311, baseType: !107, size: 160, align: 8, offset: 1568)
!107 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 160, align: 8, elements: !108)
!108 = !{!109}
!109 = !DISubrange(count: 20)
!110 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getattr", scope: !28, file: !15, line: 343, baseType: !111, size: 64, align: 64, offset: 512)
!111 = !DIDerivedType(tag: DW_TAG_typedef, name: "getattrfunc", file: !15, line: 316, baseType: !112)
!112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !113, size: 64, align: 64)
!113 = !DISubroutineType(types: !114)
!114 = !{!13, !13, !60}
!115 = !DIDerivedType(tag: DW_TAG_member, name: "tp_setattr", scope: !28, file: !15, line: 344, baseType: !116, size: 64, align: 64, offset: 576)
!116 = !DIDerivedType(tag: DW_TAG_typedef, name: "setattrfunc", file: !15, line: 318, baseType: !117)
!117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !118, size: 64, align: 64)
!118 = !DISubroutineType(types: !119)
!119 = !{!52, !13, !60, !13}
!120 = !DIDerivedType(tag: DW_TAG_member, name: "tp_reserved", scope: !28, file: !15, line: 345, baseType: !12, size: 64, align: 64, offset: 640)
!121 = !DIDerivedType(tag: DW_TAG_member, name: "tp_repr", scope: !28, file: !15, line: 346, baseType: !122, size: 64, align: 64, offset: 704)
!122 = !DIDerivedType(tag: DW_TAG_typedef, name: "reprfunc", file: !15, line: 320, baseType: !123)
!123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !124, size: 64, align: 64)
!124 = !DISubroutineType(types: !125)
!125 = !{!13, !13}
!126 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_number", scope: !28, file: !15, line: 350, baseType: !127, size: 64, align: 64, offset: 768)
!127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !128, size: 64, align: 64)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyNumberMethods", file: !15, line: 278, baseType: !129)
!129 = !DICompositeType(tag: DW_TAG_structure_type, file: !15, line: 236, size: 2176, align: 64, elements: !130)
!130 = !{!131, !136, !137, !138, !139, !140, !145, !147, !148, !149, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177}
!131 = !DIDerivedType(tag: DW_TAG_member, name: "nb_add", scope: !129, file: !15, line: 241, baseType: !132, size: 64, align: 64)
!132 = !DIDerivedType(tag: DW_TAG_typedef, name: "binaryfunc", file: !15, line: 166, baseType: !133)
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64, align: 64)
!134 = !DISubroutineType(types: !135)
!135 = !{!13, !13, !13}
!136 = !DIDerivedType(tag: DW_TAG_member, name: "nb_subtract", scope: !129, file: !15, line: 242, baseType: !132, size: 64, align: 64, offset: 64)
!137 = !DIDerivedType(tag: DW_TAG_member, name: "nb_multiply", scope: !129, file: !15, line: 243, baseType: !132, size: 64, align: 64, offset: 128)
!138 = !DIDerivedType(tag: DW_TAG_member, name: "nb_remainder", scope: !129, file: !15, line: 244, baseType: !132, size: 64, align: 64, offset: 192)
!139 = !DIDerivedType(tag: DW_TAG_member, name: "nb_divmod", scope: !129, file: !15, line: 245, baseType: !132, size: 64, align: 64, offset: 256)
!140 = !DIDerivedType(tag: DW_TAG_member, name: "nb_power", scope: !129, file: !15, line: 246, baseType: !141, size: 64, align: 64, offset: 320)
!141 = !DIDerivedType(tag: DW_TAG_typedef, name: "ternaryfunc", file: !15, line: 167, baseType: !142)
!142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !143, size: 64, align: 64)
!143 = !DISubroutineType(types: !144)
!144 = !{!13, !13, !13, !13}
!145 = !DIDerivedType(tag: DW_TAG_member, name: "nb_negative", scope: !129, file: !15, line: 247, baseType: !146, size: 64, align: 64, offset: 384)
!146 = !DIDerivedType(tag: DW_TAG_typedef, name: "unaryfunc", file: !15, line: 165, baseType: !123)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "nb_positive", scope: !129, file: !15, line: 248, baseType: !146, size: 64, align: 64, offset: 448)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "nb_absolute", scope: !129, file: !15, line: 249, baseType: !146, size: 64, align: 64, offset: 512)
!149 = !DIDerivedType(tag: DW_TAG_member, name: "nb_bool", scope: !129, file: !15, line: 250, baseType: !150, size: 64, align: 64, offset: 576)
!150 = !DIDerivedType(tag: DW_TAG_typedef, name: "inquiry", file: !15, line: 168, baseType: !151)
!151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64, align: 64)
!152 = !DISubroutineType(types: !153)
!153 = !{!52, !13}
!154 = !DIDerivedType(tag: DW_TAG_member, name: "nb_invert", scope: !129, file: !15, line: 251, baseType: !146, size: 64, align: 64, offset: 640)
!155 = !DIDerivedType(tag: DW_TAG_member, name: "nb_lshift", scope: !129, file: !15, line: 252, baseType: !132, size: 64, align: 64, offset: 704)
!156 = !DIDerivedType(tag: DW_TAG_member, name: "nb_rshift", scope: !129, file: !15, line: 253, baseType: !132, size: 64, align: 64, offset: 768)
!157 = !DIDerivedType(tag: DW_TAG_member, name: "nb_and", scope: !129, file: !15, line: 254, baseType: !132, size: 64, align: 64, offset: 832)
!158 = !DIDerivedType(tag: DW_TAG_member, name: "nb_xor", scope: !129, file: !15, line: 255, baseType: !132, size: 64, align: 64, offset: 896)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "nb_or", scope: !129, file: !15, line: 256, baseType: !132, size: 64, align: 64, offset: 960)
!160 = !DIDerivedType(tag: DW_TAG_member, name: "nb_int", scope: !129, file: !15, line: 257, baseType: !146, size: 64, align: 64, offset: 1024)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "nb_reserved", scope: !129, file: !15, line: 258, baseType: !12, size: 64, align: 64, offset: 1088)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "nb_float", scope: !129, file: !15, line: 259, baseType: !146, size: 64, align: 64, offset: 1152)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_add", scope: !129, file: !15, line: 261, baseType: !132, size: 64, align: 64, offset: 1216)
!164 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_subtract", scope: !129, file: !15, line: 262, baseType: !132, size: 64, align: 64, offset: 1280)
!165 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_multiply", scope: !129, file: !15, line: 263, baseType: !132, size: 64, align: 64, offset: 1344)
!166 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_remainder", scope: !129, file: !15, line: 264, baseType: !132, size: 64, align: 64, offset: 1408)
!167 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_power", scope: !129, file: !15, line: 265, baseType: !141, size: 64, align: 64, offset: 1472)
!168 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_lshift", scope: !129, file: !15, line: 266, baseType: !132, size: 64, align: 64, offset: 1536)
!169 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_rshift", scope: !129, file: !15, line: 267, baseType: !132, size: 64, align: 64, offset: 1600)
!170 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_and", scope: !129, file: !15, line: 268, baseType: !132, size: 64, align: 64, offset: 1664)
!171 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_xor", scope: !129, file: !15, line: 269, baseType: !132, size: 64, align: 64, offset: 1728)
!172 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_or", scope: !129, file: !15, line: 270, baseType: !132, size: 64, align: 64, offset: 1792)
!173 = !DIDerivedType(tag: DW_TAG_member, name: "nb_floor_divide", scope: !129, file: !15, line: 272, baseType: !132, size: 64, align: 64, offset: 1856)
!174 = !DIDerivedType(tag: DW_TAG_member, name: "nb_true_divide", scope: !129, file: !15, line: 273, baseType: !132, size: 64, align: 64, offset: 1920)
!175 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_floor_divide", scope: !129, file: !15, line: 274, baseType: !132, size: 64, align: 64, offset: 1984)
!176 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_true_divide", scope: !129, file: !15, line: 275, baseType: !132, size: 64, align: 64, offset: 2048)
!177 = !DIDerivedType(tag: DW_TAG_member, name: "nb_index", scope: !129, file: !15, line: 277, baseType: !146, size: 64, align: 64, offset: 2112)
!178 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_sequence", scope: !28, file: !15, line: 351, baseType: !179, size: 64, align: 64, offset: 832)
!179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !180, size: 64, align: 64)
!180 = !DIDerivedType(tag: DW_TAG_typedef, name: "PySequenceMethods", file: !15, line: 292, baseType: !181)
!181 = !DICompositeType(tag: DW_TAG_structure_type, file: !15, line: 280, size: 640, align: 64, elements: !182)
!182 = !{!183, !188, !189, !194, !195, !196, !201, !202, !207, !208}
!183 = !DIDerivedType(tag: DW_TAG_member, name: "sq_length", scope: !181, file: !15, line: 281, baseType: !184, size: 64, align: 64)
!184 = !DIDerivedType(tag: DW_TAG_typedef, name: "lenfunc", file: !15, line: 169, baseType: !185)
!185 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !186, size: 64, align: 64)
!186 = !DISubroutineType(types: !187)
!187 = !{!19, !13}
!188 = !DIDerivedType(tag: DW_TAG_member, name: "sq_concat", scope: !181, file: !15, line: 282, baseType: !132, size: 64, align: 64, offset: 64)
!189 = !DIDerivedType(tag: DW_TAG_member, name: "sq_repeat", scope: !181, file: !15, line: 283, baseType: !190, size: 64, align: 64, offset: 128)
!190 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssizeargfunc", file: !15, line: 170, baseType: !191)
!191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !192, size: 64, align: 64)
!192 = !DISubroutineType(types: !193)
!193 = !{!13, !13, !19}
!194 = !DIDerivedType(tag: DW_TAG_member, name: "sq_item", scope: !181, file: !15, line: 284, baseType: !190, size: 64, align: 64, offset: 192)
!195 = !DIDerivedType(tag: DW_TAG_member, name: "was_sq_slice", scope: !181, file: !15, line: 285, baseType: !12, size: 64, align: 64, offset: 256)
!196 = !DIDerivedType(tag: DW_TAG_member, name: "sq_ass_item", scope: !181, file: !15, line: 286, baseType: !197, size: 64, align: 64, offset: 320)
!197 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssizeobjargproc", file: !15, line: 172, baseType: !198)
!198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !199, size: 64, align: 64)
!199 = !DISubroutineType(types: !200)
!200 = !{!52, !13, !19, !13}
!201 = !DIDerivedType(tag: DW_TAG_member, name: "was_sq_ass_slice", scope: !181, file: !15, line: 287, baseType: !12, size: 64, align: 64, offset: 384)
!202 = !DIDerivedType(tag: DW_TAG_member, name: "sq_contains", scope: !181, file: !15, line: 288, baseType: !203, size: 64, align: 64, offset: 448)
!203 = !DIDerivedType(tag: DW_TAG_typedef, name: "objobjproc", file: !15, line: 231, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !205, size: 64, align: 64)
!205 = !DISubroutineType(types: !206)
!206 = !{!52, !13, !13}
!207 = !DIDerivedType(tag: DW_TAG_member, name: "sq_inplace_concat", scope: !181, file: !15, line: 290, baseType: !132, size: 64, align: 64, offset: 512)
!208 = !DIDerivedType(tag: DW_TAG_member, name: "sq_inplace_repeat", scope: !181, file: !15, line: 291, baseType: !190, size: 64, align: 64, offset: 576)
!209 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_mapping", scope: !28, file: !15, line: 352, baseType: !210, size: 64, align: 64, offset: 896)
!210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !211, size: 64, align: 64)
!211 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyMappingMethods", file: !15, line: 298, baseType: !212)
!212 = !DICompositeType(tag: DW_TAG_structure_type, file: !15, line: 294, size: 192, align: 64, elements: !213)
!213 = !{!214, !215, !216}
!214 = !DIDerivedType(tag: DW_TAG_member, name: "mp_length", scope: !212, file: !15, line: 295, baseType: !184, size: 64, align: 64)
!215 = !DIDerivedType(tag: DW_TAG_member, name: "mp_subscript", scope: !212, file: !15, line: 296, baseType: !132, size: 64, align: 64, offset: 64)
!216 = !DIDerivedType(tag: DW_TAG_member, name: "mp_ass_subscript", scope: !212, file: !15, line: 297, baseType: !217, size: 64, align: 64, offset: 128)
!217 = !DIDerivedType(tag: DW_TAG_typedef, name: "objobjargproc", file: !15, line: 174, baseType: !218)
!218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !219, size: 64, align: 64)
!219 = !DISubroutineType(types: !220)
!220 = !{!52, !13, !13, !13}
!221 = !DIDerivedType(tag: DW_TAG_member, name: "tp_hash", scope: !28, file: !15, line: 356, baseType: !222, size: 64, align: 64, offset: 960)
!222 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashfunc", file: !15, line: 321, baseType: !223)
!223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !224, size: 64, align: 64)
!224 = !DISubroutineType(types: !225)
!225 = !{!226, !13}
!226 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_hash_t", file: !20, line: 186, baseType: !19)
!227 = !DIDerivedType(tag: DW_TAG_member, name: "tp_call", scope: !28, file: !15, line: 357, baseType: !141, size: 64, align: 64, offset: 1024)
!228 = !DIDerivedType(tag: DW_TAG_member, name: "tp_str", scope: !28, file: !15, line: 358, baseType: !122, size: 64, align: 64, offset: 1088)
!229 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getattro", scope: !28, file: !15, line: 359, baseType: !230, size: 64, align: 64, offset: 1152)
!230 = !DIDerivedType(tag: DW_TAG_typedef, name: "getattrofunc", file: !15, line: 317, baseType: !133)
!231 = !DIDerivedType(tag: DW_TAG_member, name: "tp_setattro", scope: !28, file: !15, line: 360, baseType: !232, size: 64, align: 64, offset: 1216)
!232 = !DIDerivedType(tag: DW_TAG_typedef, name: "setattrofunc", file: !15, line: 319, baseType: !218)
!233 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_buffer", scope: !28, file: !15, line: 363, baseType: !234, size: 64, align: 64, offset: 1280)
!234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !235, size: 64, align: 64)
!235 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyBufferProcs", file: !15, line: 304, baseType: !236)
!236 = !DICompositeType(tag: DW_TAG_structure_type, file: !15, line: 301, size: 128, align: 64, elements: !237)
!237 = !{!238, !259}
!238 = !DIDerivedType(tag: DW_TAG_member, name: "bf_getbuffer", scope: !236, file: !15, line: 302, baseType: !239, size: 64, align: 64)
!239 = !DIDerivedType(tag: DW_TAG_typedef, name: "getbufferproc", file: !15, line: 193, baseType: !240)
!240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !241, size: 64, align: 64)
!241 = !DISubroutineType(types: !242)
!242 = !{!52, !13, !243, !52}
!243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !244, size: 64, align: 64)
!244 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_buffer", file: !15, line: 191, baseType: !245)
!245 = !DICompositeType(tag: DW_TAG_structure_type, name: "bufferinfo", file: !15, line: 178, size: 640, align: 64, elements: !246)
!246 = !{!247, !248, !249, !250, !251, !252, !253, !254, !256, !257, !258}
!247 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !245, file: !15, line: 179, baseType: !12, size: 64, align: 64)
!248 = !DIDerivedType(tag: DW_TAG_member, name: "obj", scope: !245, file: !15, line: 180, baseType: !13, size: 64, align: 64, offset: 64)
!249 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !245, file: !15, line: 181, baseType: !19, size: 64, align: 64, offset: 128)
!250 = !DIDerivedType(tag: DW_TAG_member, name: "itemsize", scope: !245, file: !15, line: 182, baseType: !19, size: 64, align: 64, offset: 192)
!251 = !DIDerivedType(tag: DW_TAG_member, name: "readonly", scope: !245, file: !15, line: 184, baseType: !52, size: 32, align: 32, offset: 256)
!252 = !DIDerivedType(tag: DW_TAG_member, name: "ndim", scope: !245, file: !15, line: 185, baseType: !52, size: 32, align: 32, offset: 288)
!253 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !245, file: !15, line: 186, baseType: !60, size: 64, align: 64, offset: 320)
!254 = !DIDerivedType(tag: DW_TAG_member, name: "shape", scope: !245, file: !15, line: 187, baseType: !255, size: 64, align: 64, offset: 384)
!255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64, align: 64)
!256 = !DIDerivedType(tag: DW_TAG_member, name: "strides", scope: !245, file: !15, line: 188, baseType: !255, size: 64, align: 64, offset: 448)
!257 = !DIDerivedType(tag: DW_TAG_member, name: "suboffsets", scope: !245, file: !15, line: 189, baseType: !255, size: 64, align: 64, offset: 512)
!258 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !245, file: !15, line: 190, baseType: !12, size: 64, align: 64, offset: 576)
!259 = !DIDerivedType(tag: DW_TAG_member, name: "bf_releasebuffer", scope: !236, file: !15, line: 303, baseType: !260, size: 64, align: 64, offset: 64)
!260 = !DIDerivedType(tag: DW_TAG_typedef, name: "releasebufferproc", file: !15, line: 194, baseType: !261)
!261 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !262, size: 64, align: 64)
!262 = !DISubroutineType(types: !263)
!263 = !{null, !13, !243}
!264 = !DIDerivedType(tag: DW_TAG_member, name: "tp_flags", scope: !28, file: !15, line: 366, baseType: !104, size: 64, align: 64, offset: 1344)
!265 = !DIDerivedType(tag: DW_TAG_member, name: "tp_doc", scope: !28, file: !15, line: 368, baseType: !37, size: 64, align: 64, offset: 1408)
!266 = !DIDerivedType(tag: DW_TAG_member, name: "tp_traverse", scope: !28, file: !15, line: 372, baseType: !267, size: 64, align: 64, offset: 1472)
!267 = !DIDerivedType(tag: DW_TAG_typedef, name: "traverseproc", file: !15, line: 233, baseType: !268)
!268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !269, size: 64, align: 64)
!269 = !DISubroutineType(types: !270)
!270 = !{!52, !13, !271, !12}
!271 = !DIDerivedType(tag: DW_TAG_typedef, name: "visitproc", file: !15, line: 232, baseType: !272)
!272 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !273, size: 64, align: 64)
!273 = !DISubroutineType(types: !274)
!274 = !{!52, !13, !12}
!275 = !DIDerivedType(tag: DW_TAG_member, name: "tp_clear", scope: !28, file: !15, line: 375, baseType: !150, size: 64, align: 64, offset: 1536)
!276 = !DIDerivedType(tag: DW_TAG_member, name: "tp_richcompare", scope: !28, file: !15, line: 379, baseType: !277, size: 64, align: 64, offset: 1600)
!277 = !DIDerivedType(tag: DW_TAG_typedef, name: "richcmpfunc", file: !15, line: 322, baseType: !278)
!278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !279, size: 64, align: 64)
!279 = !DISubroutineType(types: !280)
!280 = !{!13, !13, !13, !52}
!281 = !DIDerivedType(tag: DW_TAG_member, name: "tp_weaklistoffset", scope: !28, file: !15, line: 382, baseType: !19, size: 64, align: 64, offset: 1664)
!282 = !DIDerivedType(tag: DW_TAG_member, name: "tp_iter", scope: !28, file: !15, line: 385, baseType: !283, size: 64, align: 64, offset: 1728)
!283 = !DIDerivedType(tag: DW_TAG_typedef, name: "getiterfunc", file: !15, line: 323, baseType: !123)
!284 = !DIDerivedType(tag: DW_TAG_member, name: "tp_iternext", scope: !28, file: !15, line: 386, baseType: !285, size: 64, align: 64, offset: 1792)
!285 = !DIDerivedType(tag: DW_TAG_typedef, name: "iternextfunc", file: !15, line: 324, baseType: !123)
!286 = !DIDerivedType(tag: DW_TAG_member, name: "tp_methods", scope: !28, file: !15, line: 389, baseType: !287, size: 64, align: 64, offset: 1856)
!287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !288, size: 64, align: 64)
!288 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyMethodDef", file: !289, line: 40, size: 256, align: 64, elements: !290)
!289 = !DIFile(filename: "Include/methodobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!290 = !{!291, !292, !294, !295}
!291 = !DIDerivedType(tag: DW_TAG_member, name: "ml_name", scope: !288, file: !289, line: 41, baseType: !37, size: 64, align: 64)
!292 = !DIDerivedType(tag: DW_TAG_member, name: "ml_meth", scope: !288, file: !289, line: 42, baseType: !293, size: 64, align: 64, offset: 64)
!293 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyCFunction", file: !289, line: 18, baseType: !133)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "ml_flags", scope: !288, file: !289, line: 43, baseType: !52, size: 32, align: 32, offset: 128)
!295 = !DIDerivedType(tag: DW_TAG_member, name: "ml_doc", scope: !288, file: !289, line: 45, baseType: !37, size: 64, align: 64, offset: 192)
!296 = !DIDerivedType(tag: DW_TAG_member, name: "tp_members", scope: !28, file: !15, line: 390, baseType: !297, size: 64, align: 64, offset: 1920)
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64, align: 64)
!298 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyMemberDef", file: !299, line: 18, size: 320, align: 64, elements: !300)
!299 = !DIFile(filename: "Include/structmember.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!300 = !{!301, !302, !303, !304, !305}
!301 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !298, file: !299, line: 19, baseType: !60, size: 64, align: 64)
!302 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !298, file: !299, line: 20, baseType: !52, size: 32, align: 32, offset: 64)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !298, file: !299, line: 21, baseType: !19, size: 64, align: 64, offset: 128)
!304 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !298, file: !299, line: 22, baseType: !52, size: 32, align: 32, offset: 192)
!305 = !DIDerivedType(tag: DW_TAG_member, name: "doc", scope: !298, file: !299, line: 23, baseType: !60, size: 64, align: 64, offset: 256)
!306 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getset", scope: !28, file: !15, line: 391, baseType: !307, size: 64, align: 64, offset: 1984)
!307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !308, size: 64, align: 64)
!308 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyGetSetDef", file: !309, line: 11, size: 320, align: 64, elements: !310)
!309 = !DIFile(filename: "Include/descrobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!310 = !{!311, !312, !317, !322, !323}
!311 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !308, file: !309, line: 12, baseType: !60, size: 64, align: 64)
!312 = !DIDerivedType(tag: DW_TAG_member, name: "get", scope: !308, file: !309, line: 13, baseType: !313, size: 64, align: 64, offset: 64)
!313 = !DIDerivedType(tag: DW_TAG_typedef, name: "getter", file: !309, line: 8, baseType: !314)
!314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !315, size: 64, align: 64)
!315 = !DISubroutineType(types: !316)
!316 = !{!13, !13, !12}
!317 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !308, file: !309, line: 14, baseType: !318, size: 64, align: 64, offset: 128)
!318 = !DIDerivedType(tag: DW_TAG_typedef, name: "setter", file: !309, line: 9, baseType: !319)
!319 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !320, size: 64, align: 64)
!320 = !DISubroutineType(types: !321)
!321 = !{!52, !13, !13, !12}
!322 = !DIDerivedType(tag: DW_TAG_member, name: "doc", scope: !308, file: !309, line: 15, baseType: !60, size: 64, align: 64, offset: 192)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "closure", scope: !308, file: !309, line: 16, baseType: !12, size: 64, align: 64, offset: 256)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "tp_base", scope: !28, file: !15, line: 392, baseType: !27, size: 64, align: 64, offset: 2048)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dict", scope: !28, file: !15, line: 393, baseType: !13, size: 64, align: 64, offset: 2112)
!326 = !DIDerivedType(tag: DW_TAG_member, name: "tp_descr_get", scope: !28, file: !15, line: 394, baseType: !327, size: 64, align: 64, offset: 2176)
!327 = !DIDerivedType(tag: DW_TAG_typedef, name: "descrgetfunc", file: !15, line: 325, baseType: !142)
!328 = !DIDerivedType(tag: DW_TAG_member, name: "tp_descr_set", scope: !28, file: !15, line: 395, baseType: !329, size: 64, align: 64, offset: 2240)
!329 = !DIDerivedType(tag: DW_TAG_typedef, name: "descrsetfunc", file: !15, line: 326, baseType: !218)
!330 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dictoffset", scope: !28, file: !15, line: 396, baseType: !19, size: 64, align: 64, offset: 2304)
!331 = !DIDerivedType(tag: DW_TAG_member, name: "tp_init", scope: !28, file: !15, line: 397, baseType: !332, size: 64, align: 64, offset: 2368)
!332 = !DIDerivedType(tag: DW_TAG_typedef, name: "initproc", file: !15, line: 327, baseType: !218)
!333 = !DIDerivedType(tag: DW_TAG_member, name: "tp_alloc", scope: !28, file: !15, line: 398, baseType: !334, size: 64, align: 64, offset: 2432)
!334 = !DIDerivedType(tag: DW_TAG_typedef, name: "allocfunc", file: !15, line: 329, baseType: !335)
!335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !336, size: 64, align: 64)
!336 = !DISubroutineType(types: !337)
!337 = !{!13, !27, !19}
!338 = !DIDerivedType(tag: DW_TAG_member, name: "tp_new", scope: !28, file: !15, line: 399, baseType: !339, size: 64, align: 64, offset: 2496)
!339 = !DIDerivedType(tag: DW_TAG_typedef, name: "newfunc", file: !15, line: 328, baseType: !340)
!340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !341, size: 64, align: 64)
!341 = !DISubroutineType(types: !342)
!342 = !{!13, !27, !13, !13}
!343 = !DIDerivedType(tag: DW_TAG_member, name: "tp_free", scope: !28, file: !15, line: 400, baseType: !344, size: 64, align: 64, offset: 2560)
!344 = !DIDerivedType(tag: DW_TAG_typedef, name: "freefunc", file: !15, line: 307, baseType: !345)
!345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !346, size: 64, align: 64)
!346 = !DISubroutineType(types: !347)
!347 = !{null, !12}
!348 = !DIDerivedType(tag: DW_TAG_member, name: "tp_is_gc", scope: !28, file: !15, line: 401, baseType: !150, size: 64, align: 64, offset: 2624)
!349 = !DIDerivedType(tag: DW_TAG_member, name: "tp_bases", scope: !28, file: !15, line: 402, baseType: !13, size: 64, align: 64, offset: 2688)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "tp_mro", scope: !28, file: !15, line: 403, baseType: !13, size: 64, align: 64, offset: 2752)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "tp_cache", scope: !28, file: !15, line: 404, baseType: !13, size: 64, align: 64, offset: 2816)
!352 = !DIDerivedType(tag: DW_TAG_member, name: "tp_subclasses", scope: !28, file: !15, line: 405, baseType: !13, size: 64, align: 64, offset: 2880)
!353 = !DIDerivedType(tag: DW_TAG_member, name: "tp_weaklist", scope: !28, file: !15, line: 406, baseType: !13, size: 64, align: 64, offset: 2944)
!354 = !DIDerivedType(tag: DW_TAG_member, name: "tp_del", scope: !28, file: !15, line: 407, baseType: !43, size: 64, align: 64, offset: 3008)
!355 = !DIDerivedType(tag: DW_TAG_member, name: "tp_version_tag", scope: !28, file: !15, line: 410, baseType: !356, size: 32, align: 32, offset: 3072)
!356 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!357 = !DIDerivedType(tag: DW_TAG_member, name: "tp_finalize", scope: !28, file: !15, line: 412, baseType: !43, size: 64, align: 64, offset: 3136)
!358 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !60, size: 64, align: 64)
!359 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !360, size: 64, align: 64)
!360 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyBytesObject", file: !361, line: 41, baseType: !362)
!361 = !DIFile(filename: "Include/bytesobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!362 = !DICompositeType(tag: DW_TAG_structure_type, file: !361, line: 31, size: 320, align: 64, elements: !363)
!363 = !{!364, !365, !366}
!364 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !362, file: !361, line: 32, baseType: !31, size: 192, align: 64)
!365 = !DIDerivedType(tag: DW_TAG_member, name: "ob_shash", scope: !362, file: !361, line: 33, baseType: !226, size: 64, align: 64, offset: 192)
!366 = !DIDerivedType(tag: DW_TAG_member, name: "ob_sval", scope: !362, file: !361, line: 34, baseType: !89, size: 8, align: 8, offset: 256)
!367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64, align: 64)
!368 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !369, size: 64, align: 64)
!369 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyFloatObject", file: !370, line: 18, baseType: !371)
!370 = !DIFile(filename: "Include/floatobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!371 = !DICompositeType(tag: DW_TAG_structure_type, file: !370, line: 15, size: 192, align: 64, elements: !372)
!372 = !{!373, !374}
!373 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !371, file: !370, line: 16, baseType: !14, size: 128, align: 64)
!374 = !DIDerivedType(tag: DW_TAG_member, name: "ob_fval", scope: !371, file: !370, line: 17, baseType: !375, size: 64, align: 64, offset: 128)
!375 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!376 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !377, size: 64, align: 64)
!377 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyTupleObject", file: !378, line: 33, baseType: !379)
!378 = !DIFile(filename: "Include/tupleobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!379 = !DICompositeType(tag: DW_TAG_structure_type, file: !378, line: 25, size: 256, align: 64, elements: !380)
!380 = !{!381, !382}
!381 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !379, file: !378, line: 26, baseType: !31, size: 192, align: 64)
!382 = !DIDerivedType(tag: DW_TAG_member, name: "ob_item", scope: !379, file: !378, line: 27, baseType: !383, size: 64, align: 64, offset: 192)
!383 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 64, align: 64, elements: !90)
!384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !385, size: 64, align: 64)
!385 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyListObject", file: !386, line: 40, baseType: !387)
!386 = !DIFile(filename: "Include/listobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!387 = !DICompositeType(tag: DW_TAG_structure_type, file: !386, line: 23, size: 320, align: 64, elements: !388)
!388 = !{!389, !390, !392}
!389 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !387, file: !386, line: 24, baseType: !31, size: 192, align: 64)
!390 = !DIDerivedType(tag: DW_TAG_member, name: "ob_item", scope: !387, file: !386, line: 26, baseType: !391, size: 64, align: 64, offset: 192)
!391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64, align: 64)
!392 = !DIDerivedType(tag: DW_TAG_member, name: "allocated", scope: !387, file: !386, line: 39, baseType: !19, size: 64, align: 64, offset: 256)
!393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !394, size: 64, align: 64)
!394 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyThreadState", file: !395, line: 139, baseType: !396)
!395 = !DIFile(filename: "Include/pystate.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!396 = !DICompositeType(tag: DW_TAG_structure_type, name: "_ts", file: !395, line: 69, size: 1536, align: 64, elements: !397)
!397 = !{!398, !400, !401, !421, !424, !425, !426, !427, !428, !429, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450}
!398 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !396, file: !395, line: 72, baseType: !399, size: 64, align: 64)
!399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !396, size: 64, align: 64)
!400 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !396, file: !395, line: 73, baseType: !399, size: 64, align: 64, offset: 64)
!401 = !DIDerivedType(tag: DW_TAG_member, name: "interp", scope: !396, file: !395, line: 74, baseType: !402, size: 64, align: 64, offset: 128)
!402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !403, size: 64, align: 64)
!403 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyInterpreterState", file: !395, line: 44, baseType: !404)
!404 = !DICompositeType(tag: DW_TAG_structure_type, name: "_is", file: !395, line: 19, size: 832, align: 64, elements: !405)
!405 = !{!406, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420}
!406 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !404, file: !395, line: 21, baseType: !407, size: 64, align: 64)
!407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !404, size: 64, align: 64)
!408 = !DIDerivedType(tag: DW_TAG_member, name: "tstate_head", scope: !404, file: !395, line: 22, baseType: !399, size: 64, align: 64, offset: 64)
!409 = !DIDerivedType(tag: DW_TAG_member, name: "modules", scope: !404, file: !395, line: 24, baseType: !13, size: 64, align: 64, offset: 128)
!410 = !DIDerivedType(tag: DW_TAG_member, name: "modules_by_index", scope: !404, file: !395, line: 25, baseType: !13, size: 64, align: 64, offset: 192)
!411 = !DIDerivedType(tag: DW_TAG_member, name: "sysdict", scope: !404, file: !395, line: 26, baseType: !13, size: 64, align: 64, offset: 256)
!412 = !DIDerivedType(tag: DW_TAG_member, name: "builtins", scope: !404, file: !395, line: 27, baseType: !13, size: 64, align: 64, offset: 320)
!413 = !DIDerivedType(tag: DW_TAG_member, name: "importlib", scope: !404, file: !395, line: 28, baseType: !13, size: 64, align: 64, offset: 384)
!414 = !DIDerivedType(tag: DW_TAG_member, name: "codec_search_path", scope: !404, file: !395, line: 30, baseType: !13, size: 64, align: 64, offset: 448)
!415 = !DIDerivedType(tag: DW_TAG_member, name: "codec_search_cache", scope: !404, file: !395, line: 31, baseType: !13, size: 64, align: 64, offset: 512)
!416 = !DIDerivedType(tag: DW_TAG_member, name: "codec_error_registry", scope: !404, file: !395, line: 32, baseType: !13, size: 64, align: 64, offset: 576)
!417 = !DIDerivedType(tag: DW_TAG_member, name: "codecs_initialized", scope: !404, file: !395, line: 33, baseType: !52, size: 32, align: 32, offset: 640)
!418 = !DIDerivedType(tag: DW_TAG_member, name: "fscodec_initialized", scope: !404, file: !395, line: 34, baseType: !52, size: 32, align: 32, offset: 672)
!419 = !DIDerivedType(tag: DW_TAG_member, name: "dlopenflags", scope: !404, file: !395, line: 37, baseType: !52, size: 32, align: 32, offset: 704)
!420 = !DIDerivedType(tag: DW_TAG_member, name: "builtins_copy", scope: !404, file: !395, line: 43, baseType: !13, size: 64, align: 64, offset: 768)
!421 = !DIDerivedType(tag: DW_TAG_member, name: "frame", scope: !396, file: !395, line: 76, baseType: !422, size: 64, align: 64, offset: 192)
!422 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !423, size: 64, align: 64)
!423 = !DICompositeType(tag: DW_TAG_structure_type, name: "_frame", file: !395, line: 50, flags: DIFlagFwdDecl)
!424 = !DIDerivedType(tag: DW_TAG_member, name: "recursion_depth", scope: !396, file: !395, line: 77, baseType: !52, size: 32, align: 32, offset: 256)
!425 = !DIDerivedType(tag: DW_TAG_member, name: "overflowed", scope: !396, file: !395, line: 78, baseType: !39, size: 8, align: 8, offset: 288)
!426 = !DIDerivedType(tag: DW_TAG_member, name: "recursion_critical", scope: !396, file: !395, line: 80, baseType: !39, size: 8, align: 8, offset: 296)
!427 = !DIDerivedType(tag: DW_TAG_member, name: "tracing", scope: !396, file: !395, line: 85, baseType: !52, size: 32, align: 32, offset: 320)
!428 = !DIDerivedType(tag: DW_TAG_member, name: "use_tracing", scope: !396, file: !395, line: 86, baseType: !52, size: 32, align: 32, offset: 352)
!429 = !DIDerivedType(tag: DW_TAG_member, name: "c_profilefunc", scope: !396, file: !395, line: 88, baseType: !430, size: 64, align: 64, offset: 384)
!430 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_tracefunc", file: !395, line: 54, baseType: !431)
!431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !432, size: 64, align: 64)
!432 = !DISubroutineType(types: !433)
!433 = !{!52, !13, !422, !52, !13}
!434 = !DIDerivedType(tag: DW_TAG_member, name: "c_tracefunc", scope: !396, file: !395, line: 89, baseType: !430, size: 64, align: 64, offset: 448)
!435 = !DIDerivedType(tag: DW_TAG_member, name: "c_profileobj", scope: !396, file: !395, line: 90, baseType: !13, size: 64, align: 64, offset: 512)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "c_traceobj", scope: !396, file: !395, line: 91, baseType: !13, size: 64, align: 64, offset: 576)
!437 = !DIDerivedType(tag: DW_TAG_member, name: "curexc_type", scope: !396, file: !395, line: 93, baseType: !13, size: 64, align: 64, offset: 640)
!438 = !DIDerivedType(tag: DW_TAG_member, name: "curexc_value", scope: !396, file: !395, line: 94, baseType: !13, size: 64, align: 64, offset: 704)
!439 = !DIDerivedType(tag: DW_TAG_member, name: "curexc_traceback", scope: !396, file: !395, line: 95, baseType: !13, size: 64, align: 64, offset: 768)
!440 = !DIDerivedType(tag: DW_TAG_member, name: "exc_type", scope: !396, file: !395, line: 97, baseType: !13, size: 64, align: 64, offset: 832)
!441 = !DIDerivedType(tag: DW_TAG_member, name: "exc_value", scope: !396, file: !395, line: 98, baseType: !13, size: 64, align: 64, offset: 896)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "exc_traceback", scope: !396, file: !395, line: 99, baseType: !13, size: 64, align: 64, offset: 960)
!443 = !DIDerivedType(tag: DW_TAG_member, name: "dict", scope: !396, file: !395, line: 101, baseType: !13, size: 64, align: 64, offset: 1024)
!444 = !DIDerivedType(tag: DW_TAG_member, name: "gilstate_counter", scope: !396, file: !395, line: 103, baseType: !52, size: 32, align: 32, offset: 1088)
!445 = !DIDerivedType(tag: DW_TAG_member, name: "async_exc", scope: !396, file: !395, line: 105, baseType: !13, size: 64, align: 64, offset: 1152)
!446 = !DIDerivedType(tag: DW_TAG_member, name: "thread_id", scope: !396, file: !395, line: 106, baseType: !25, size: 64, align: 64, offset: 1216)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "trash_delete_nesting", scope: !396, file: !395, line: 108, baseType: !52, size: 32, align: 32, offset: 1280)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "trash_delete_later", scope: !396, file: !395, line: 109, baseType: !13, size: 64, align: 64, offset: 1344)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "on_delete", scope: !396, file: !395, line: 134, baseType: !345, size: 64, align: 64, offset: 1408)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "on_delete_data", scope: !396, file: !395, line: 135, baseType: !12, size: 64, align: 64, offset: 1472)
!451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !452, size: 64, align: 64)
!452 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyTypeObject", file: !15, line: 422, baseType: !28)
!453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !132, size: 64, align: 64)
!454 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64, align: 64)
!455 = !{!456, !461, !465, !468, !471, !493, !503, !514, !524, !534, !549, !554, !571, !586, !591, !599, !607, !617, !623, !638, !649, !660, !670, !681, !699, !702, !706, !710, !714, !718, !722, !726, !730, !740, !751, !755, !759, !763, !768, !772, !776, !780, !784, !788, !792, !796, !800, !813, !825, !829, !834, !838, !842, !846, !850, !862, !873, !892, !906, !916, !919, !923, !926, !936, !949, !959, !972, !984, !998, !1011, !1025, !1040, !1054, !1085, !1096, !1105, !1124, !1128, !1134, !1138, !1142, !1145, !1149, !1152, !1160, !1171, !1180, !1189, !1196, !1203, !1210, !1214, !1249, !1269, !1275, !1285, !1303, !1311, !1319, !1336, !1353, !1363, !1426, !1489, !1493, !1497, !1509, !1513, !1536, !1542, !1546, !1552, !1560, !1566, !1580, !1602, !1609, !1617, !1651, !1665, !1682, !1691, !1696, !1699, !1713, !1729, !1739, !1759, !1766, !1792, !1811}
!456 = !DISubprogram(name: "PyObject_Type", scope: !457, file: !457, line: 31, type: !124, isLocal: false, isDefinition: true, scopeLine: 32, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PyObject_Type, variables: !458)
!457 = !DIFile(filename: "Objects/abstract.c", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!458 = !{!459, !460}
!459 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !456, file: !457, line: 31, type: !13)
!460 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !456, file: !457, line: 33, type: !13)
!461 = !DISubprogram(name: "PyObject_Size", scope: !457, file: !457, line: 43, type: !186, isLocal: false, isDefinition: true, scopeLine: 44, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct._object*)* @PyObject_Size, variables: !462)
!462 = !{!463, !464}
!463 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !461, file: !457, line: 43, type: !13)
!464 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !461, file: !457, line: 45, type: !179)
!465 = !DISubprogram(name: "PyObject_Length", scope: !457, file: !457, line: 61, type: !186, isLocal: false, isDefinition: true, scopeLine: 62, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct._object*)* @PyObject_Length, variables: !466)
!466 = !{!467}
!467 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !465, file: !457, line: 61, type: !13)
!468 = !DISubprogram(name: "_PyObject_HasLen", scope: !457, file: !457, line: 68, type: !152, isLocal: false, isDefinition: true, scopeLine: 68, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*)* @_PyObject_HasLen, variables: !469)
!469 = !{!470}
!470 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !468, file: !457, line: 68, type: !13)
!471 = !DISubprogram(name: "PyObject_LengthHint", scope: !457, file: !457, line: 80, type: !472, isLocal: false, isDefinition: true, scopeLine: 81, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct._object*, i64)* @PyObject_LengthHint, variables: !474)
!472 = !DISubroutineType(types: !473)
!473 = !{!19, !13, !19}
!474 = !{!475, !476, !477, !478, !479, !480, !482, !487, !491}
!475 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !471, file: !457, line: 80, type: !13)
!476 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "defaultvalue", arg: 2, scope: !471, file: !457, line: 80, type: !19)
!477 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hint", scope: !471, file: !457, line: 82, type: !13)
!478 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !471, file: !457, line: 82, type: !13)
!479 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !471, file: !457, line: 83, type: !19)
!480 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !481, file: !457, line: 105, type: !13)
!481 = distinct !DILexicalBlock(scope: !471, file: !457, line: 105, column: 8)
!482 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !483, file: !457, line: 114, type: !13)
!483 = distinct !DILexicalBlock(scope: !484, file: !457, line: 114, column: 12)
!484 = distinct !DILexicalBlock(scope: !485, file: !457, line: 113, column: 53)
!485 = distinct !DILexicalBlock(scope: !486, file: !457, line: 113, column: 14)
!486 = distinct !DILexicalBlock(scope: !471, file: !457, line: 106, column: 9)
!487 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !488, file: !457, line: 120, type: !13)
!488 = distinct !DILexicalBlock(scope: !489, file: !457, line: 120, column: 12)
!489 = distinct !DILexicalBlock(scope: !490, file: !457, line: 117, column: 81)
!490 = distinct !DILexicalBlock(scope: !471, file: !457, line: 117, column: 9)
!491 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !492, file: !457, line: 124, type: !13)
!492 = distinct !DILexicalBlock(scope: !471, file: !457, line: 124, column: 8)
!493 = !DISubprogram(name: "PyObject_GetItem", scope: !457, file: !457, line: 136, type: !134, isLocal: false, isDefinition: true, scopeLine: 137, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyObject_GetItem, variables: !494)
!494 = !{!495, !496, !497, !498}
!495 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !493, file: !457, line: 136, type: !13)
!496 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "key", arg: 2, scope: !493, file: !457, line: 136, type: !13)
!497 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !493, file: !457, line: 138, type: !210)
!498 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "key_value", scope: !499, file: !457, line: 149, type: !19)
!499 = distinct !DILexicalBlock(scope: !500, file: !457, line: 148, column: 115)
!500 = distinct !DILexicalBlock(scope: !501, file: !457, line: 148, column: 13)
!501 = distinct !DILexicalBlock(scope: !502, file: !457, line: 147, column: 37)
!502 = distinct !DILexicalBlock(scope: !493, file: !457, line: 147, column: 9)
!503 = !DISubprogram(name: "PyObject_SetItem", scope: !457, file: !457, line: 164, type: !219, isLocal: false, isDefinition: true, scopeLine: 165, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*, %struct._object*)* @PyObject_SetItem, variables: !504)
!504 = !{!505, !506, !507, !508, !509}
!505 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !503, file: !457, line: 164, type: !13)
!506 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "key", arg: 2, scope: !503, file: !457, line: 164, type: !13)
!507 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "value", arg: 3, scope: !503, file: !457, line: 164, type: !13)
!508 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !503, file: !457, line: 166, type: !210)
!509 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "key_value", scope: !510, file: !457, line: 178, type: !19)
!510 = distinct !DILexicalBlock(scope: !511, file: !457, line: 177, column: 115)
!511 = distinct !DILexicalBlock(scope: !512, file: !457, line: 177, column: 13)
!512 = distinct !DILexicalBlock(scope: !513, file: !457, line: 176, column: 37)
!513 = distinct !DILexicalBlock(scope: !503, file: !457, line: 176, column: 9)
!514 = !DISubprogram(name: "PyObject_DelItem", scope: !457, file: !457, line: 196, type: !205, isLocal: false, isDefinition: true, scopeLine: 197, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*)* @PyObject_DelItem, variables: !515)
!515 = !{!516, !517, !518, !519}
!516 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !514, file: !457, line: 196, type: !13)
!517 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "key", arg: 2, scope: !514, file: !457, line: 196, type: !13)
!518 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !514, file: !457, line: 198, type: !210)
!519 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "key_value", scope: !520, file: !457, line: 210, type: !19)
!520 = distinct !DILexicalBlock(scope: !521, file: !457, line: 209, column: 115)
!521 = distinct !DILexicalBlock(scope: !522, file: !457, line: 209, column: 13)
!522 = distinct !DILexicalBlock(scope: !523, file: !457, line: 208, column: 37)
!523 = distinct !DILexicalBlock(scope: !514, file: !457, line: 208, column: 9)
!524 = !DISubprogram(name: "PyObject_DelItemString", scope: !457, file: !457, line: 228, type: !525, isLocal: false, isDefinition: true, scopeLine: 229, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i8*)* @PyObject_DelItemString, variables: !527)
!525 = !DISubroutineType(types: !526)
!526 = !{!52, !13, !37}
!527 = !{!528, !529, !530, !531, !532}
!528 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !524, file: !457, line: 228, type: !13)
!529 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "key", arg: 2, scope: !524, file: !457, line: 228, type: !37)
!530 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "okey", scope: !524, file: !457, line: 230, type: !13)
!531 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !524, file: !457, line: 231, type: !52)
!532 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !533, file: !457, line: 241, type: !13)
!533 = distinct !DILexicalBlock(scope: !524, file: !457, line: 241, column: 8)
!534 = !DISubprogram(name: "PyObject_AsCharBuffer", scope: !457, file: !457, line: 249, type: !535, isLocal: false, isDefinition: true, scopeLine: 252, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i8**, i64*)* @PyObject_AsCharBuffer, variables: !538)
!535 = !DISubroutineType(types: !536)
!536 = !{!52, !13, !537, !255}
!537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64, align: 64)
!538 = !{!539, !540, !541, !542, !543, !544, !546}
!539 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "obj", arg: 1, scope: !534, file: !457, line: 249, type: !13)
!540 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "buffer", arg: 2, scope: !534, file: !457, line: 250, type: !537)
!541 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "buffer_len", arg: 3, scope: !534, file: !457, line: 251, type: !255)
!542 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pb", scope: !534, file: !457, line: 253, type: !234)
!543 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "view", scope: !534, file: !457, line: 254, type: !244)
!544 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !545, file: !457, line: 273, type: !13)
!545 = distinct !DILexicalBlock(scope: !534, file: !457, line: 273, column: 8)
!546 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !547, file: !457, line: 273, type: !13)
!547 = distinct !DILexicalBlock(scope: !548, file: !457, line: 273, column: 100)
!548 = distinct !DILexicalBlock(scope: !545, file: !457, line: 273, column: 66)
!549 = !DISubprogram(name: "PyObject_CheckReadBuffer", scope: !457, file: !457, line: 278, type: !152, isLocal: false, isDefinition: true, scopeLine: 279, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*)* @PyObject_CheckReadBuffer, variables: !550)
!550 = !{!551, !552, !553}
!551 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "obj", arg: 1, scope: !549, file: !457, line: 278, type: !13)
!552 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pb", scope: !549, file: !457, line: 280, type: !234)
!553 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "view", scope: !549, file: !457, line: 281, type: !244)
!554 = !DISubprogram(name: "PyObject_AsReadBuffer", scope: !457, file: !457, line: 294, type: !555, isLocal: false, isDefinition: true, scopeLine: 297, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i8**, i64*)* @PyObject_AsReadBuffer, variables: !560)
!555 = !DISubroutineType(types: !556)
!556 = !{!52, !13, !557, !255}
!557 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !558, size: 64, align: 64)
!558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !559, size: 64, align: 64)
!559 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!560 = !{!561, !562, !563, !564, !565, !566, !568}
!561 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "obj", arg: 1, scope: !554, file: !457, line: 294, type: !13)
!562 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "buffer", arg: 2, scope: !554, file: !457, line: 295, type: !557)
!563 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "buffer_len", arg: 3, scope: !554, file: !457, line: 296, type: !255)
!564 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pb", scope: !554, file: !457, line: 298, type: !234)
!565 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "view", scope: !554, file: !457, line: 299, type: !244)
!566 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !567, file: !457, line: 319, type: !13)
!567 = distinct !DILexicalBlock(scope: !554, file: !457, line: 319, column: 8)
!568 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !569, file: !457, line: 319, type: !13)
!569 = distinct !DILexicalBlock(scope: !570, file: !457, line: 319, column: 100)
!570 = distinct !DILexicalBlock(scope: !567, file: !457, line: 319, column: 66)
!571 = !DISubprogram(name: "PyObject_AsWriteBuffer", scope: !457, file: !457, line: 323, type: !572, isLocal: false, isDefinition: true, scopeLine: 326, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i8**, i64*)* @PyObject_AsWriteBuffer, variables: !575)
!572 = !DISubroutineType(types: !573)
!573 = !{!52, !13, !574, !255}
!574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!575 = !{!576, !577, !578, !579, !580, !581, !583}
!576 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "obj", arg: 1, scope: !571, file: !457, line: 323, type: !13)
!577 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "buffer", arg: 2, scope: !571, file: !457, line: 324, type: !574)
!578 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "buffer_len", arg: 3, scope: !571, file: !457, line: 325, type: !255)
!579 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pb", scope: !571, file: !457, line: 327, type: !234)
!580 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "view", scope: !571, file: !457, line: 328, type: !244)
!581 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !582, file: !457, line: 347, type: !13)
!582 = distinct !DILexicalBlock(scope: !571, file: !457, line: 347, column: 8)
!583 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !584, file: !457, line: 347, type: !13)
!584 = distinct !DILexicalBlock(scope: !585, file: !457, line: 347, column: 100)
!585 = distinct !DILexicalBlock(scope: !582, file: !457, line: 347, column: 66)
!586 = !DISubprogram(name: "PyObject_GetBuffer", scope: !457, file: !457, line: 354, type: !241, isLocal: false, isDefinition: true, scopeLine: 355, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct.bufferinfo*, i32)* @PyObject_GetBuffer, variables: !587)
!587 = !{!588, !589, !590}
!588 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "obj", arg: 1, scope: !586, file: !457, line: 354, type: !13)
!589 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "view", arg: 2, scope: !586, file: !457, line: 354, type: !243)
!590 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "flags", arg: 3, scope: !586, file: !457, line: 354, type: !52)
!591 = !DISubprogram(name: "PyBuffer_IsContiguous", scope: !457, file: !457, line: 408, type: !592, isLocal: false, isDefinition: true, scopeLine: 409, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.bufferinfo*, i8)* @PyBuffer_IsContiguous, variables: !596)
!592 = !DISubroutineType(types: !593)
!593 = !{!52, !594, !39}
!594 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !595, size: 64, align: 64)
!595 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !244)
!596 = !{!597, !598}
!597 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "view", arg: 1, scope: !591, file: !457, line: 408, type: !594)
!598 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "order", arg: 2, scope: !591, file: !457, line: 408, type: !39)
!599 = !DISubprogram(name: "PyBuffer_GetPointer", scope: !457, file: !457, line: 424, type: !600, isLocal: false, isDefinition: true, scopeLine: 425, flags: DIFlagPrototyped, isOptimized: true, function: i8* (%struct.bufferinfo*, i64*)* @PyBuffer_GetPointer, variables: !602)
!600 = !DISubroutineType(types: !601)
!601 = !{!12, !243, !255}
!602 = !{!603, !604, !605, !606}
!603 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "view", arg: 1, scope: !599, file: !457, line: 424, type: !243)
!604 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "indices", arg: 2, scope: !599, file: !457, line: 424, type: !255)
!605 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pointer", scope: !599, file: !457, line: 426, type: !60)
!606 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !599, file: !457, line: 427, type: !52)
!607 = !DISubprogram(name: "_Py_add_one_to_index_F", scope: !457, file: !457, line: 440, type: !608, isLocal: false, isDefinition: true, scopeLine: 441, flags: DIFlagPrototyped, isOptimized: true, function: void (i32, i64*, i64*)* @_Py_add_one_to_index_F, variables: !612)
!608 = !DISubroutineType(types: !609)
!609 = !{null, !52, !255, !610}
!610 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !611, size: 64, align: 64)
!611 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !19)
!612 = !{!613, !614, !615, !616}
!613 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "nd", arg: 1, scope: !607, file: !457, line: 440, type: !52)
!614 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "index", arg: 2, scope: !607, file: !457, line: 440, type: !255)
!615 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "shape", arg: 3, scope: !607, file: !457, line: 440, type: !610)
!616 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !607, file: !457, line: 442, type: !52)
!617 = !DISubprogram(name: "_Py_add_one_to_index_C", scope: !457, file: !457, line: 456, type: !608, isLocal: false, isDefinition: true, scopeLine: 457, flags: DIFlagPrototyped, isOptimized: true, function: void (i32, i64*, i64*)* @_Py_add_one_to_index_C, variables: !618)
!618 = !{!619, !620, !621, !622}
!619 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "nd", arg: 1, scope: !617, file: !457, line: 456, type: !52)
!620 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "index", arg: 2, scope: !617, file: !457, line: 456, type: !255)
!621 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "shape", arg: 3, scope: !617, file: !457, line: 456, type: !610)
!622 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !617, file: !457, line: 458, type: !52)
!623 = !DISubprogram(name: "PyBuffer_FromContiguous", scope: !457, file: !457, line: 472, type: !624, isLocal: false, isDefinition: true, scopeLine: 473, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.bufferinfo*, i8*, i64, i8)* @PyBuffer_FromContiguous, variables: !626)
!624 = !DISubroutineType(types: !625)
!625 = !{!52, !243, !12, !19, !39}
!626 = !{!627, !628, !629, !630, !631, !632, !634, !635, !636, !637}
!627 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "view", arg: 1, scope: !623, file: !457, line: 472, type: !243)
!628 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "buf", arg: 2, scope: !623, file: !457, line: 472, type: !12)
!629 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "len", arg: 3, scope: !623, file: !457, line: 472, type: !19)
!630 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fort", arg: 4, scope: !623, file: !457, line: 472, type: !39)
!631 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !623, file: !457, line: 474, type: !52)
!632 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addone", scope: !623, file: !457, line: 475, type: !633)
!633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !608, size: 64, align: 64)
!634 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "indices", scope: !623, file: !457, line: 476, type: !255)
!635 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "elements", scope: !623, file: !457, line: 476, type: !19)
!636 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "src", scope: !623, file: !457, line: 477, type: !60)
!637 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ptr", scope: !623, file: !457, line: 477, type: !60)
!638 = !DISubprogram(name: "PyObject_CopyData", scope: !457, file: !457, line: 523, type: !205, isLocal: false, isDefinition: true, scopeLine: 524, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*)* @PyObject_CopyData, variables: !639)
!639 = !{!640, !641, !642, !643, !644, !645, !646, !647, !648}
!640 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "dest", arg: 1, scope: !638, file: !457, line: 523, type: !13)
!641 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "src", arg: 2, scope: !638, file: !457, line: 523, type: !13)
!642 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "view_dest", scope: !638, file: !457, line: 525, type: !244)
!643 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "view_src", scope: !638, file: !457, line: 525, type: !244)
!644 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !638, file: !457, line: 526, type: !52)
!645 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "indices", scope: !638, file: !457, line: 527, type: !255)
!646 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "elements", scope: !638, file: !457, line: 527, type: !19)
!647 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dptr", scope: !638, file: !457, line: 528, type: !60)
!648 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sptr", scope: !638, file: !457, line: 528, type: !60)
!649 = !DISubprogram(name: "PyBuffer_FillContiguousStrides", scope: !457, file: !457, line: 594, type: !650, isLocal: false, isDefinition: true, scopeLine: 597, flags: DIFlagPrototyped, isOptimized: true, function: void (i32, i64*, i64*, i32, i8)* @PyBuffer_FillContiguousStrides, variables: !652)
!650 = !DISubroutineType(types: !651)
!651 = !{null, !52, !255, !255, !52, !39}
!652 = !{!653, !654, !655, !656, !657, !658, !659}
!653 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "nd", arg: 1, scope: !649, file: !457, line: 594, type: !52)
!654 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "shape", arg: 2, scope: !649, file: !457, line: 594, type: !255)
!655 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "strides", arg: 3, scope: !649, file: !457, line: 595, type: !255)
!656 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "itemsize", arg: 4, scope: !649, file: !457, line: 595, type: !52)
!657 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fort", arg: 5, scope: !649, file: !457, line: 596, type: !39)
!658 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "k", scope: !649, file: !457, line: 598, type: !52)
!659 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sd", scope: !649, file: !457, line: 599, type: !19)
!660 = !DISubprogram(name: "PyBuffer_FillInfo", scope: !457, file: !457, line: 618, type: !661, isLocal: false, isDefinition: true, scopeLine: 620, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.bufferinfo*, %struct._object*, i8*, i64, i32, i32)* @PyBuffer_FillInfo, variables: !663)
!661 = !DISubroutineType(types: !662)
!662 = !{!52, !243, !13, !12, !19, !52, !52}
!663 = !{!664, !665, !666, !667, !668, !669}
!664 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "view", arg: 1, scope: !660, file: !457, line: 618, type: !243)
!665 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "obj", arg: 2, scope: !660, file: !457, line: 618, type: !13)
!666 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "buf", arg: 3, scope: !660, file: !457, line: 618, type: !12)
!667 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "len", arg: 4, scope: !660, file: !457, line: 618, type: !19)
!668 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "readonly", arg: 5, scope: !660, file: !457, line: 619, type: !52)
!669 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "flags", arg: 6, scope: !660, file: !457, line: 619, type: !52)
!670 = !DISubprogram(name: "PyBuffer_Release", scope: !457, file: !457, line: 652, type: !671, isLocal: false, isDefinition: true, scopeLine: 653, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct.bufferinfo*)* @PyBuffer_Release, variables: !673)
!671 = !DISubroutineType(types: !672)
!672 = !{null, !243}
!673 = !{!674, !675, !676, !678}
!674 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "view", arg: 1, scope: !670, file: !457, line: 652, type: !243)
!675 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "obj", scope: !670, file: !457, line: 654, type: !13)
!676 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !677, file: !457, line: 657, type: !13)
!677 = distinct !DILexicalBlock(scope: !670, file: !457, line: 657, column: 8)
!678 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !679, file: !457, line: 657, type: !13)
!679 = distinct !DILexicalBlock(scope: !680, file: !457, line: 657, column: 95)
!680 = distinct !DILexicalBlock(scope: !677, file: !457, line: 657, column: 61)
!681 = !DISubprogram(name: "PyObject_Format", scope: !457, file: !457, line: 662, type: !134, isLocal: false, isDefinition: true, scopeLine: 663, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyObject_Format, variables: !682)
!682 = !{!683, !684, !685, !686, !687, !688, !690, !694, !696}
!683 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "obj", arg: 1, scope: !681, file: !457, line: 662, type: !13)
!684 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "format_spec", arg: 2, scope: !681, file: !457, line: 662, type: !13)
!685 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "meth", scope: !681, file: !457, line: 664, type: !13)
!686 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "empty", scope: !681, file: !457, line: 665, type: !13)
!687 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !681, file: !457, line: 666, type: !13)
!688 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !689, file: !457, line: 687, type: !13)
!689 = distinct !DILexicalBlock(scope: !681, file: !457, line: 687, column: 8)
!690 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !691, file: !457, line: 692, type: !13)
!691 = distinct !DILexicalBlock(scope: !692, file: !457, line: 692, column: 12)
!692 = distinct !DILexicalBlock(scope: !693, file: !457, line: 689, column: 91)
!693 = distinct !DILexicalBlock(scope: !681, file: !457, line: 689, column: 9)
!694 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !695, file: !457, line: 698, type: !13)
!695 = distinct !DILexicalBlock(scope: !681, file: !457, line: 698, column: 8)
!696 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !697, file: !457, line: 698, type: !13)
!697 = distinct !DILexicalBlock(scope: !698, file: !457, line: 698, column: 97)
!698 = distinct !DILexicalBlock(scope: !695, file: !457, line: 698, column: 63)
!699 = !DISubprogram(name: "PyNumber_Check", scope: !457, file: !457, line: 704, type: !152, isLocal: false, isDefinition: true, scopeLine: 705, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*)* @PyNumber_Check, variables: !700)
!700 = !{!701}
!701 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !699, file: !457, line: 704, type: !13)
!702 = !DISubprogram(name: "PyNumber_Or", scope: !457, file: !457, line: 876, type: !134, isLocal: false, isDefinition: true, scopeLine: 876, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_Or, variables: !703)
!703 = !{!704, !705}
!704 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !702, file: !457, line: 876, type: !13)
!705 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !702, file: !457, line: 876, type: !13)
!706 = !DISubprogram(name: "PyNumber_Xor", scope: !457, file: !457, line: 877, type: !134, isLocal: false, isDefinition: true, scopeLine: 877, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_Xor, variables: !707)
!707 = !{!708, !709}
!708 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !706, file: !457, line: 877, type: !13)
!709 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !706, file: !457, line: 877, type: !13)
!710 = !DISubprogram(name: "PyNumber_And", scope: !457, file: !457, line: 878, type: !134, isLocal: false, isDefinition: true, scopeLine: 878, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_And, variables: !711)
!711 = !{!712, !713}
!712 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !710, file: !457, line: 878, type: !13)
!713 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !710, file: !457, line: 878, type: !13)
!714 = !DISubprogram(name: "PyNumber_Lshift", scope: !457, file: !457, line: 879, type: !134, isLocal: false, isDefinition: true, scopeLine: 879, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_Lshift, variables: !715)
!715 = !{!716, !717}
!716 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !714, file: !457, line: 879, type: !13)
!717 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !714, file: !457, line: 879, type: !13)
!718 = !DISubprogram(name: "PyNumber_Rshift", scope: !457, file: !457, line: 880, type: !134, isLocal: false, isDefinition: true, scopeLine: 880, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_Rshift, variables: !719)
!719 = !{!720, !721}
!720 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !718, file: !457, line: 880, type: !13)
!721 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !718, file: !457, line: 880, type: !13)
!722 = !DISubprogram(name: "PyNumber_Subtract", scope: !457, file: !457, line: 881, type: !134, isLocal: false, isDefinition: true, scopeLine: 881, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_Subtract, variables: !723)
!723 = !{!724, !725}
!724 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !722, file: !457, line: 881, type: !13)
!725 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !722, file: !457, line: 881, type: !13)
!726 = !DISubprogram(name: "PyNumber_Divmod", scope: !457, file: !457, line: 882, type: !134, isLocal: false, isDefinition: true, scopeLine: 882, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_Divmod, variables: !727)
!727 = !{!728, !729}
!728 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !726, file: !457, line: 882, type: !13)
!729 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !726, file: !457, line: 882, type: !13)
!730 = !DISubprogram(name: "PyNumber_Add", scope: !457, file: !457, line: 885, type: !134, isLocal: false, isDefinition: true, scopeLine: 886, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_Add, variables: !731)
!731 = !{!732, !733, !734, !735, !738}
!732 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !730, file: !457, line: 885, type: !13)
!733 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !730, file: !457, line: 885, type: !13)
!734 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !730, file: !457, line: 887, type: !13)
!735 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !736, file: !457, line: 889, type: !179)
!736 = distinct !DILexicalBlock(scope: !737, file: !457, line: 888, column: 48)
!737 = distinct !DILexicalBlock(scope: !730, file: !457, line: 888, column: 9)
!738 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !739, file: !457, line: 890, type: !13)
!739 = distinct !DILexicalBlock(scope: !736, file: !457, line: 890, column: 12)
!740 = !DISubprogram(name: "PyNumber_Multiply", scope: !457, file: !457, line: 916, type: !134, isLocal: false, isDefinition: true, scopeLine: 917, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_Multiply, variables: !741)
!741 = !{!742, !743, !744, !745, !748, !749}
!742 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !740, file: !457, line: 916, type: !13)
!743 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !740, file: !457, line: 916, type: !13)
!744 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !740, file: !457, line: 918, type: !13)
!745 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mv", scope: !746, file: !457, line: 920, type: !179)
!746 = distinct !DILexicalBlock(scope: !747, file: !457, line: 919, column: 48)
!747 = distinct !DILexicalBlock(scope: !740, file: !457, line: 919, column: 9)
!748 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mw", scope: !746, file: !457, line: 921, type: !179)
!749 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !750, file: !457, line: 922, type: !13)
!750 = distinct !DILexicalBlock(scope: !746, file: !457, line: 922, column: 12)
!751 = !DISubprogram(name: "PyNumber_FloorDivide", scope: !457, file: !457, line: 935, type: !134, isLocal: false, isDefinition: true, scopeLine: 936, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_FloorDivide, variables: !752)
!752 = !{!753, !754}
!753 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !751, file: !457, line: 935, type: !13)
!754 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !751, file: !457, line: 935, type: !13)
!755 = !DISubprogram(name: "PyNumber_TrueDivide", scope: !457, file: !457, line: 941, type: !134, isLocal: false, isDefinition: true, scopeLine: 942, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_TrueDivide, variables: !756)
!756 = !{!757, !758}
!757 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !755, file: !457, line: 941, type: !13)
!758 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !755, file: !457, line: 941, type: !13)
!759 = !DISubprogram(name: "PyNumber_Remainder", scope: !457, file: !457, line: 947, type: !134, isLocal: false, isDefinition: true, scopeLine: 948, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_Remainder, variables: !760)
!760 = !{!761, !762}
!761 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !759, file: !457, line: 947, type: !13)
!762 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !759, file: !457, line: 947, type: !13)
!763 = !DISubprogram(name: "PyNumber_Power", scope: !457, file: !457, line: 953, type: !143, isLocal: false, isDefinition: true, scopeLine: 954, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @PyNumber_Power, variables: !764)
!764 = !{!765, !766, !767}
!765 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !763, file: !457, line: 953, type: !13)
!766 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !763, file: !457, line: 953, type: !13)
!767 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "z", arg: 3, scope: !763, file: !457, line: 953, type: !13)
!768 = !DISubprogram(name: "PyNumber_InPlaceOr", scope: !457, file: !457, line: 1009, type: !134, isLocal: false, isDefinition: true, scopeLine: 1009, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_InPlaceOr, variables: !769)
!769 = !{!770, !771}
!770 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !768, file: !457, line: 1009, type: !13)
!771 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !768, file: !457, line: 1009, type: !13)
!772 = !DISubprogram(name: "PyNumber_InPlaceXor", scope: !457, file: !457, line: 1010, type: !134, isLocal: false, isDefinition: true, scopeLine: 1010, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_InPlaceXor, variables: !773)
!773 = !{!774, !775}
!774 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !772, file: !457, line: 1010, type: !13)
!775 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !772, file: !457, line: 1010, type: !13)
!776 = !DISubprogram(name: "PyNumber_InPlaceAnd", scope: !457, file: !457, line: 1011, type: !134, isLocal: false, isDefinition: true, scopeLine: 1011, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_InPlaceAnd, variables: !777)
!777 = !{!778, !779}
!778 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !776, file: !457, line: 1011, type: !13)
!779 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !776, file: !457, line: 1011, type: !13)
!780 = !DISubprogram(name: "PyNumber_InPlaceLshift", scope: !457, file: !457, line: 1012, type: !134, isLocal: false, isDefinition: true, scopeLine: 1012, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_InPlaceLshift, variables: !781)
!781 = !{!782, !783}
!782 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !780, file: !457, line: 1012, type: !13)
!783 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !780, file: !457, line: 1012, type: !13)
!784 = !DISubprogram(name: "PyNumber_InPlaceRshift", scope: !457, file: !457, line: 1013, type: !134, isLocal: false, isDefinition: true, scopeLine: 1013, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_InPlaceRshift, variables: !785)
!785 = !{!786, !787}
!786 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !784, file: !457, line: 1013, type: !13)
!787 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !784, file: !457, line: 1013, type: !13)
!788 = !DISubprogram(name: "PyNumber_InPlaceSubtract", scope: !457, file: !457, line: 1014, type: !134, isLocal: false, isDefinition: true, scopeLine: 1014, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_InPlaceSubtract, variables: !789)
!789 = !{!790, !791}
!790 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !788, file: !457, line: 1014, type: !13)
!791 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !788, file: !457, line: 1014, type: !13)
!792 = !DISubprogram(name: "PyNumber_InPlaceFloorDivide", scope: !457, file: !457, line: 1017, type: !134, isLocal: false, isDefinition: true, scopeLine: 1018, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_InPlaceFloorDivide, variables: !793)
!793 = !{!794, !795}
!794 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !792, file: !457, line: 1017, type: !13)
!795 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !792, file: !457, line: 1017, type: !13)
!796 = !DISubprogram(name: "PyNumber_InPlaceTrueDivide", scope: !457, file: !457, line: 1024, type: !134, isLocal: false, isDefinition: true, scopeLine: 1025, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_InPlaceTrueDivide, variables: !797)
!797 = !{!798, !799}
!798 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !796, file: !457, line: 1024, type: !13)
!799 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !796, file: !457, line: 1024, type: !13)
!800 = !DISubprogram(name: "PyNumber_InPlaceAdd", scope: !457, file: !457, line: 1031, type: !134, isLocal: false, isDefinition: true, scopeLine: 1032, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_InPlaceAdd, variables: !801)
!801 = !{!802, !803, !804, !805, !808, !810}
!802 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !800, file: !457, line: 1031, type: !13)
!803 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !800, file: !457, line: 1031, type: !13)
!804 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !800, file: !457, line: 1033, type: !13)
!805 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !806, file: !457, line: 1036, type: !179)
!806 = distinct !DILexicalBlock(scope: !807, file: !457, line: 1035, column: 48)
!807 = distinct !DILexicalBlock(scope: !800, file: !457, line: 1035, column: 9)
!808 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !809, file: !457, line: 1037, type: !13)
!809 = distinct !DILexicalBlock(scope: !806, file: !457, line: 1037, column: 12)
!810 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "f", scope: !811, file: !457, line: 1039, type: !132)
!811 = distinct !DILexicalBlock(scope: !812, file: !457, line: 1038, column: 30)
!812 = distinct !DILexicalBlock(scope: !806, file: !457, line: 1038, column: 13)
!813 = !DISubprogram(name: "PyNumber_InPlaceMultiply", scope: !457, file: !457, line: 1052, type: !134, isLocal: false, isDefinition: true, scopeLine: 1053, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_InPlaceMultiply, variables: !814)
!814 = !{!815, !816, !817, !818, !821, !822, !823}
!815 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !813, file: !457, line: 1052, type: !13)
!816 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !813, file: !457, line: 1052, type: !13)
!817 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !813, file: !457, line: 1054, type: !13)
!818 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "f", scope: !819, file: !457, line: 1057, type: !190)
!819 = distinct !DILexicalBlock(scope: !820, file: !457, line: 1056, column: 48)
!820 = distinct !DILexicalBlock(scope: !813, file: !457, line: 1056, column: 9)
!821 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mv", scope: !819, file: !457, line: 1058, type: !179)
!822 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mw", scope: !819, file: !457, line: 1059, type: !179)
!823 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !824, file: !457, line: 1060, type: !13)
!824 = distinct !DILexicalBlock(scope: !819, file: !457, line: 1060, column: 12)
!825 = !DISubprogram(name: "PyNumber_InPlaceRemainder", scope: !457, file: !457, line: 1081, type: !134, isLocal: false, isDefinition: true, scopeLine: 1082, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyNumber_InPlaceRemainder, variables: !826)
!826 = !{!827, !828}
!827 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !825, file: !457, line: 1081, type: !13)
!828 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !825, file: !457, line: 1081, type: !13)
!829 = !DISubprogram(name: "PyNumber_InPlacePower", scope: !457, file: !457, line: 1088, type: !143, isLocal: false, isDefinition: true, scopeLine: 1089, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @PyNumber_InPlacePower, variables: !830)
!830 = !{!831, !832, !833}
!831 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !829, file: !457, line: 1088, type: !13)
!832 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !829, file: !457, line: 1088, type: !13)
!833 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "z", arg: 3, scope: !829, file: !457, line: 1088, type: !13)
!834 = !DISubprogram(name: "PyNumber_Negative", scope: !457, file: !457, line: 1103, type: !124, isLocal: false, isDefinition: true, scopeLine: 1104, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PyNumber_Negative, variables: !835)
!835 = !{!836, !837}
!836 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !834, file: !457, line: 1103, type: !13)
!837 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !834, file: !457, line: 1105, type: !127)
!838 = !DISubprogram(name: "PyNumber_Positive", scope: !457, file: !457, line: 1117, type: !124, isLocal: false, isDefinition: true, scopeLine: 1118, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PyNumber_Positive, variables: !839)
!839 = !{!840, !841}
!840 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !838, file: !457, line: 1117, type: !13)
!841 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !838, file: !457, line: 1119, type: !127)
!842 = !DISubprogram(name: "PyNumber_Invert", scope: !457, file: !457, line: 1131, type: !124, isLocal: false, isDefinition: true, scopeLine: 1132, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PyNumber_Invert, variables: !843)
!843 = !{!844, !845}
!844 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !842, file: !457, line: 1131, type: !13)
!845 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !842, file: !457, line: 1133, type: !127)
!846 = !DISubprogram(name: "PyNumber_Absolute", scope: !457, file: !457, line: 1145, type: !124, isLocal: false, isDefinition: true, scopeLine: 1146, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PyNumber_Absolute, variables: !847)
!847 = !{!848, !849}
!848 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !846, file: !457, line: 1145, type: !13)
!849 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !846, file: !457, line: 1147, type: !127)
!850 = !DISubprogram(name: "PyNumber_Index", scope: !457, file: !457, line: 1163, type: !124, isLocal: false, isDefinition: true, scopeLine: 1164, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PyNumber_Index, variables: !851)
!851 = !{!852, !853, !854, !858}
!852 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "item", arg: 1, scope: !850, file: !457, line: 1163, type: !13)
!853 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !850, file: !457, line: 1165, type: !13)
!854 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !855, file: !457, line: 1185, type: !13)
!855 = distinct !DILexicalBlock(scope: !856, file: !457, line: 1185, column: 12)
!856 = distinct !DILexicalBlock(scope: !857, file: !457, line: 1181, column: 81)
!857 = distinct !DILexicalBlock(scope: !850, file: !457, line: 1181, column: 9)
!858 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !859, file: !457, line: 1194, type: !13)
!859 = distinct !DILexicalBlock(scope: !860, file: !457, line: 1194, column: 12)
!860 = distinct !DILexicalBlock(scope: !861, file: !457, line: 1193, column: 40)
!861 = distinct !DILexicalBlock(scope: !850, file: !457, line: 1189, column: 9)
!862 = !DISubprogram(name: "PyNumber_AsSsize_t", scope: !457, file: !457, line: 1203, type: !863, isLocal: false, isDefinition: true, scopeLine: 1204, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct._object*, %struct._object*)* @PyNumber_AsSsize_t, variables: !865)
!863 = !DISubroutineType(types: !864)
!864 = !{!19, !13, !13}
!865 = !{!866, !867, !868, !869, !870, !871}
!866 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "item", arg: 1, scope: !862, file: !457, line: 1203, type: !13)
!867 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "err", arg: 2, scope: !862, file: !457, line: 1203, type: !13)
!868 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !862, file: !457, line: 1205, type: !19)
!869 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "runerr", scope: !862, file: !457, line: 1206, type: !13)
!870 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "value", scope: !862, file: !457, line: 1207, type: !13)
!871 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !872, file: !457, line: 1242, type: !13)
!872 = distinct !DILexicalBlock(scope: !862, file: !457, line: 1242, column: 8)
!873 = !DISubprogram(name: "PyNumber_Long", scope: !457, file: !457, line: 1248, type: !124, isLocal: false, isDefinition: true, scopeLine: 1249, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PyNumber_Long, variables: !874)
!874 = !{!875, !876, !877, !878, !879, !880, !883, !884, !886, !890}
!875 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !873, file: !457, line: 1248, type: !13)
!876 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !873, file: !457, line: 1250, type: !127)
!877 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "trunc_func", scope: !873, file: !457, line: 1251, type: !13)
!878 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffer", scope: !873, file: !457, line: 1252, type: !37)
!879 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffer_len", scope: !873, file: !457, line: 1253, type: !19)
!880 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "truncated", scope: !881, file: !457, line: 1268, type: !13)
!881 = distinct !DILexicalBlock(scope: !882, file: !457, line: 1267, column: 21)
!882 = distinct !DILexicalBlock(scope: !873, file: !457, line: 1267, column: 9)
!883 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "int_instance", scope: !881, file: !457, line: 1269, type: !13)
!884 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !885, file: !457, line: 1270, type: !13)
!885 = distinct !DILexicalBlock(scope: !881, file: !457, line: 1270, column: 12)
!886 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !887, file: !457, line: 1281, type: !13)
!887 = distinct !DILexicalBlock(scope: !888, file: !457, line: 1281, column: 16)
!888 = distinct !DILexicalBlock(scope: !889, file: !457, line: 1276, column: 57)
!889 = distinct !DILexicalBlock(scope: !881, file: !457, line: 1276, column: 13)
!890 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !891, file: !457, line: 1285, type: !13)
!891 = distinct !DILexicalBlock(scope: !881, file: !457, line: 1285, column: 12)
!892 = !DISubprogram(name: "PyNumber_Float", scope: !457, file: !457, line: 1309, type: !124, isLocal: false, isDefinition: true, scopeLine: 1310, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PyNumber_Float, variables: !893)
!893 = !{!894, !895, !896, !899, !903}
!894 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !892, file: !457, line: 1309, type: !13)
!895 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !892, file: !457, line: 1311, type: !127)
!896 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !897, file: !457, line: 1317, type: !13)
!897 = distinct !DILexicalBlock(scope: !898, file: !457, line: 1316, column: 27)
!898 = distinct !DILexicalBlock(scope: !892, file: !457, line: 1316, column: 9)
!899 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !900, file: !457, line: 1322, type: !13)
!900 = distinct !DILexicalBlock(scope: !901, file: !457, line: 1322, column: 16)
!901 = distinct !DILexicalBlock(scope: !902, file: !457, line: 1318, column: 141)
!902 = distinct !DILexicalBlock(scope: !897, file: !457, line: 1318, column: 13)
!903 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "po", scope: !904, file: !457, line: 1328, type: !368)
!904 = distinct !DILexicalBlock(scope: !905, file: !457, line: 1327, column: 125)
!905 = distinct !DILexicalBlock(scope: !892, file: !457, line: 1327, column: 9)
!906 = !DISubprogram(name: "PyNumber_ToBase", scope: !457, file: !457, line: 1336, type: !907, isLocal: false, isDefinition: true, scopeLine: 1337, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i32)* @PyNumber_ToBase, variables: !909)
!907 = !DISubroutineType(types: !908)
!908 = !{!13, !13, !52}
!909 = !{!910, !911, !912, !913, !914}
!910 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 1, scope: !906, file: !457, line: 1336, type: !13)
!911 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "base", arg: 2, scope: !906, file: !457, line: 1336, type: !52)
!912 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !906, file: !457, line: 1338, type: !13)
!913 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !906, file: !457, line: 1339, type: !13)
!914 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !915, file: !457, line: 1350, type: !13)
!915 = distinct !DILexicalBlock(scope: !906, file: !457, line: 1350, column: 8)
!916 = !DISubprogram(name: "PySequence_Check", scope: !457, file: !457, line: 1358, type: !152, isLocal: false, isDefinition: true, scopeLine: 1359, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*)* @PySequence_Check, variables: !917)
!917 = !{!918}
!918 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !916, file: !457, line: 1358, type: !13)
!919 = !DISubprogram(name: "PySequence_Size", scope: !457, file: !457, line: 1367, type: !186, isLocal: false, isDefinition: true, scopeLine: 1368, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct._object*)* @PySequence_Size, variables: !920)
!920 = !{!921, !922}
!921 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !919, file: !457, line: 1367, type: !13)
!922 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !919, file: !457, line: 1369, type: !179)
!923 = !DISubprogram(name: "PySequence_Length", scope: !457, file: !457, line: 1386, type: !186, isLocal: false, isDefinition: true, scopeLine: 1387, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct._object*)* @PySequence_Length, variables: !924)
!924 = !{!925}
!925 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !923, file: !457, line: 1386, type: !13)
!926 = !DISubprogram(name: "PySequence_Concat", scope: !457, file: !457, line: 1393, type: !134, isLocal: false, isDefinition: true, scopeLine: 1394, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PySequence_Concat, variables: !927)
!927 = !{!928, !929, !930, !931, !934}
!928 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !926, file: !457, line: 1393, type: !13)
!929 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 2, scope: !926, file: !457, line: 1393, type: !13)
!930 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !926, file: !457, line: 1395, type: !179)
!931 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !932, file: !457, line: 1408, type: !13)
!932 = distinct !DILexicalBlock(scope: !933, file: !457, line: 1407, column: 53)
!933 = distinct !DILexicalBlock(scope: !926, file: !457, line: 1407, column: 9)
!934 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !935, file: !457, line: 1411, type: !13)
!935 = distinct !DILexicalBlock(scope: !932, file: !457, line: 1411, column: 12)
!936 = !DISubprogram(name: "PySequence_Repeat", scope: !457, file: !457, line: 1417, type: !192, isLocal: false, isDefinition: true, scopeLine: 1418, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i64)* @PySequence_Repeat, variables: !937)
!937 = !{!938, !939, !940, !941, !944, !945, !947}
!938 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !936, file: !457, line: 1417, type: !13)
!939 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "count", arg: 2, scope: !936, file: !457, line: 1417, type: !19)
!940 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !936, file: !457, line: 1419, type: !179)
!941 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !942, file: !457, line: 1432, type: !13)
!942 = distinct !DILexicalBlock(scope: !943, file: !457, line: 1431, column: 30)
!943 = distinct !DILexicalBlock(scope: !936, file: !457, line: 1431, column: 9)
!944 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !942, file: !457, line: 1432, type: !13)
!945 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !946, file: !457, line: 1437, type: !13)
!946 = distinct !DILexicalBlock(scope: !942, file: !457, line: 1437, column: 12)
!947 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !948, file: !457, line: 1440, type: !13)
!948 = distinct !DILexicalBlock(scope: !942, file: !457, line: 1440, column: 12)
!949 = !DISubprogram(name: "PySequence_InPlaceConcat", scope: !457, file: !457, line: 1446, type: !134, isLocal: false, isDefinition: true, scopeLine: 1447, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PySequence_InPlaceConcat, variables: !950)
!950 = !{!951, !952, !953, !954, !957}
!951 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !949, file: !457, line: 1446, type: !13)
!952 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 2, scope: !949, file: !457, line: 1446, type: !13)
!953 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !949, file: !457, line: 1448, type: !179)
!954 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !955, file: !457, line: 1460, type: !13)
!955 = distinct !DILexicalBlock(scope: !956, file: !457, line: 1459, column: 53)
!956 = distinct !DILexicalBlock(scope: !949, file: !457, line: 1459, column: 9)
!957 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !958, file: !457, line: 1464, type: !13)
!958 = distinct !DILexicalBlock(scope: !955, file: !457, line: 1464, column: 12)
!959 = !DISubprogram(name: "PySequence_InPlaceRepeat", scope: !457, file: !457, line: 1470, type: !192, isLocal: false, isDefinition: true, scopeLine: 1471, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i64)* @PySequence_InPlaceRepeat, variables: !960)
!960 = !{!961, !962, !963, !964, !967, !968, !970}
!961 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !959, file: !457, line: 1470, type: !13)
!962 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "count", arg: 2, scope: !959, file: !457, line: 1470, type: !19)
!963 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !959, file: !457, line: 1472, type: !179)
!964 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !965, file: !457, line: 1484, type: !13)
!965 = distinct !DILexicalBlock(scope: !966, file: !457, line: 1483, column: 30)
!966 = distinct !DILexicalBlock(scope: !959, file: !457, line: 1483, column: 9)
!967 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !965, file: !457, line: 1484, type: !13)
!968 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !969, file: !457, line: 1490, type: !13)
!969 = distinct !DILexicalBlock(scope: !965, file: !457, line: 1490, column: 12)
!970 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !971, file: !457, line: 1493, type: !13)
!971 = distinct !DILexicalBlock(scope: !965, file: !457, line: 1493, column: 12)
!972 = !DISubprogram(name: "PySequence_GetItem", scope: !457, file: !457, line: 1499, type: !192, isLocal: false, isDefinition: true, scopeLine: 1500, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i64)* @PySequence_GetItem, variables: !973)
!973 = !{!974, !975, !976, !977}
!974 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !972, file: !457, line: 1499, type: !13)
!975 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i", arg: 2, scope: !972, file: !457, line: 1499, type: !19)
!976 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !972, file: !457, line: 1501, type: !179)
!977 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "l", scope: !978, file: !457, line: 1510, type: !19)
!978 = distinct !DILexicalBlock(scope: !979, file: !457, line: 1509, column: 31)
!979 = distinct !DILexicalBlock(scope: !980, file: !457, line: 1509, column: 17)
!980 = distinct !DILexicalBlock(scope: !981, file: !457, line: 1508, column: 20)
!981 = distinct !DILexicalBlock(scope: !982, file: !457, line: 1508, column: 13)
!982 = distinct !DILexicalBlock(scope: !983, file: !457, line: 1507, column: 26)
!983 = distinct !DILexicalBlock(scope: !972, file: !457, line: 1507, column: 9)
!984 = !DISubprogram(name: "PySequence_GetSlice", scope: !457, file: !457, line: 1523, type: !985, isLocal: false, isDefinition: true, scopeLine: 1524, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i64, i64)* @PySequence_GetSlice, variables: !987)
!985 = !DISubroutineType(types: !986)
!986 = !{!13, !13, !19, !19}
!987 = !{!988, !989, !990, !991, !992, !995, !996}
!988 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !984, file: !457, line: 1523, type: !13)
!989 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i1", arg: 2, scope: !984, file: !457, line: 1523, type: !19)
!990 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i2", arg: 3, scope: !984, file: !457, line: 1523, type: !19)
!991 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mp", scope: !984, file: !457, line: 1525, type: !210)
!992 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !993, file: !457, line: 1531, type: !13)
!993 = distinct !DILexicalBlock(scope: !994, file: !457, line: 1530, column: 33)
!994 = distinct !DILexicalBlock(scope: !984, file: !457, line: 1530, column: 9)
!995 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "slice", scope: !993, file: !457, line: 1532, type: !13)
!996 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !997, file: !457, line: 1536, type: !13)
!997 = distinct !DILexicalBlock(scope: !993, file: !457, line: 1536, column: 12)
!998 = !DISubprogram(name: "PySequence_SetItem", scope: !457, file: !457, line: 1544, type: !199, isLocal: false, isDefinition: true, scopeLine: 1545, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i64, %struct._object*)* @PySequence_SetItem, variables: !999)
!999 = !{!1000, !1001, !1002, !1003, !1004}
!1000 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !998, file: !457, line: 1544, type: !13)
!1001 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i", arg: 2, scope: !998, file: !457, line: 1544, type: !19)
!1002 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 3, scope: !998, file: !457, line: 1544, type: !13)
!1003 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !998, file: !457, line: 1546, type: !179)
!1004 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "l", scope: !1005, file: !457, line: 1557, type: !19)
!1005 = distinct !DILexicalBlock(scope: !1006, file: !457, line: 1556, column: 31)
!1006 = distinct !DILexicalBlock(scope: !1007, file: !457, line: 1556, column: 17)
!1007 = distinct !DILexicalBlock(scope: !1008, file: !457, line: 1555, column: 20)
!1008 = distinct !DILexicalBlock(scope: !1009, file: !457, line: 1555, column: 13)
!1009 = distinct !DILexicalBlock(scope: !1010, file: !457, line: 1554, column: 30)
!1010 = distinct !DILexicalBlock(scope: !998, file: !457, line: 1554, column: 9)
!1011 = !DISubprogram(name: "PySequence_DelItem", scope: !457, file: !457, line: 1571, type: !1012, isLocal: false, isDefinition: true, scopeLine: 1572, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i64)* @PySequence_DelItem, variables: !1014)
!1012 = !DISubroutineType(types: !1013)
!1013 = !{!52, !13, !19}
!1014 = !{!1015, !1016, !1017, !1018}
!1015 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1011, file: !457, line: 1571, type: !13)
!1016 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i", arg: 2, scope: !1011, file: !457, line: 1571, type: !19)
!1017 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !1011, file: !457, line: 1573, type: !179)
!1018 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "l", scope: !1019, file: !457, line: 1584, type: !19)
!1019 = distinct !DILexicalBlock(scope: !1020, file: !457, line: 1583, column: 31)
!1020 = distinct !DILexicalBlock(scope: !1021, file: !457, line: 1583, column: 17)
!1021 = distinct !DILexicalBlock(scope: !1022, file: !457, line: 1582, column: 20)
!1022 = distinct !DILexicalBlock(scope: !1023, file: !457, line: 1582, column: 13)
!1023 = distinct !DILexicalBlock(scope: !1024, file: !457, line: 1581, column: 30)
!1024 = distinct !DILexicalBlock(scope: !1011, file: !457, line: 1581, column: 9)
!1025 = !DISubprogram(name: "PySequence_SetSlice", scope: !457, file: !457, line: 1598, type: !1026, isLocal: false, isDefinition: true, scopeLine: 1599, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i64, i64, %struct._object*)* @PySequence_SetSlice, variables: !1028)
!1026 = !DISubroutineType(types: !1027)
!1027 = !{!52, !13, !19, !19, !13}
!1028 = !{!1029, !1030, !1031, !1032, !1033, !1034, !1037, !1038}
!1029 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1025, file: !457, line: 1598, type: !13)
!1030 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i1", arg: 2, scope: !1025, file: !457, line: 1598, type: !19)
!1031 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i2", arg: 3, scope: !1025, file: !457, line: 1598, type: !19)
!1032 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 4, scope: !1025, file: !457, line: 1598, type: !13)
!1033 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mp", scope: !1025, file: !457, line: 1600, type: !210)
!1034 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1035, file: !457, line: 1609, type: !52)
!1035 = distinct !DILexicalBlock(scope: !1036, file: !457, line: 1608, column: 37)
!1036 = distinct !DILexicalBlock(scope: !1025, file: !457, line: 1608, column: 9)
!1037 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "slice", scope: !1035, file: !457, line: 1610, type: !13)
!1038 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1039, file: !457, line: 1614, type: !13)
!1039 = distinct !DILexicalBlock(scope: !1035, file: !457, line: 1614, column: 12)
!1040 = !DISubprogram(name: "PySequence_DelSlice", scope: !457, file: !457, line: 1623, type: !1041, isLocal: false, isDefinition: true, scopeLine: 1624, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i64, i64)* @PySequence_DelSlice, variables: !1043)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!52, !13, !19, !19}
!1043 = !{!1044, !1045, !1046, !1047, !1048, !1051, !1052}
!1044 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1040, file: !457, line: 1623, type: !13)
!1045 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i1", arg: 2, scope: !1040, file: !457, line: 1623, type: !19)
!1046 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "i2", arg: 3, scope: !1040, file: !457, line: 1623, type: !19)
!1047 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mp", scope: !1040, file: !457, line: 1625, type: !210)
!1048 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1049, file: !457, line: 1634, type: !52)
!1049 = distinct !DILexicalBlock(scope: !1050, file: !457, line: 1633, column: 37)
!1050 = distinct !DILexicalBlock(scope: !1040, file: !457, line: 1633, column: 9)
!1051 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "slice", scope: !1049, file: !457, line: 1635, type: !13)
!1052 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1053, file: !457, line: 1639, type: !13)
!1053 = distinct !DILexicalBlock(scope: !1049, file: !457, line: 1639, column: 12)
!1054 = !DISubprogram(name: "PySequence_Tuple", scope: !457, file: !457, line: 1647, type: !124, isLocal: false, isDefinition: true, scopeLine: 1648, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PySequence_Tuple, variables: !1055)
!1055 = !{!1056, !1057, !1058, !1059, !1060, !1061, !1065, !1068, !1072, !1076, !1078, !1080, !1083}
!1056 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !1054, file: !457, line: 1647, type: !13)
!1057 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it", scope: !1054, file: !457, line: 1649, type: !13)
!1058 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1054, file: !457, line: 1650, type: !19)
!1059 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1054, file: !457, line: 1651, type: !13)
!1060 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "j", scope: !1054, file: !457, line: 1652, type: !19)
!1061 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !1062, file: !457, line: 1684, type: !13)
!1062 = distinct !DILexicalBlock(scope: !1063, file: !457, line: 1683, column: 24)
!1063 = distinct !DILexicalBlock(scope: !1064, file: !457, line: 1683, column: 5)
!1064 = distinct !DILexicalBlock(scope: !1054, file: !457, line: 1683, column: 5)
!1065 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "oldn", scope: !1066, file: !457, line: 1691, type: !19)
!1066 = distinct !DILexicalBlock(scope: !1067, file: !457, line: 1690, column: 21)
!1067 = distinct !DILexicalBlock(scope: !1062, file: !457, line: 1690, column: 13)
!1068 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1069, file: !457, line: 1703, type: !13)
!1069 = distinct !DILexicalBlock(scope: !1070, file: !457, line: 1703, column: 20)
!1070 = distinct !DILexicalBlock(scope: !1071, file: !457, line: 1700, column: 27)
!1071 = distinct !DILexicalBlock(scope: !1066, file: !457, line: 1700, column: 17)
!1072 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1073, file: !457, line: 1707, type: !13)
!1073 = distinct !DILexicalBlock(scope: !1074, file: !457, line: 1707, column: 20)
!1074 = distinct !DILexicalBlock(scope: !1075, file: !457, line: 1706, column: 51)
!1075 = distinct !DILexicalBlock(scope: !1066, file: !457, line: 1706, column: 17)
!1076 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1077, file: !457, line: 1719, type: !13)
!1077 = distinct !DILexicalBlock(scope: !1054, file: !457, line: 1719, column: 8)
!1078 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1079, file: !457, line: 1723, type: !13)
!1079 = distinct !DILexicalBlock(scope: !1054, file: !457, line: 1723, column: 8)
!1080 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1081, file: !457, line: 1723, type: !13)
!1081 = distinct !DILexicalBlock(scope: !1082, file: !457, line: 1723, column: 98)
!1082 = distinct !DILexicalBlock(scope: !1079, file: !457, line: 1723, column: 64)
!1083 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1084, file: !457, line: 1724, type: !13)
!1084 = distinct !DILexicalBlock(scope: !1054, file: !457, line: 1724, column: 8)
!1085 = !DISubprogram(name: "PySequence_List", scope: !457, file: !457, line: 1729, type: !124, isLocal: false, isDefinition: true, scopeLine: 1730, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PySequence_List, variables: !1086)
!1086 = !{!1087, !1088, !1089, !1090, !1094}
!1087 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !1085, file: !457, line: 1729, type: !13)
!1088 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1085, file: !457, line: 1731, type: !13)
!1089 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rv", scope: !1085, file: !457, line: 1732, type: !13)
!1090 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1091, file: !457, line: 1743, type: !13)
!1091 = distinct !DILexicalBlock(scope: !1092, file: !457, line: 1743, column: 12)
!1092 = distinct !DILexicalBlock(scope: !1093, file: !457, line: 1742, column: 27)
!1093 = distinct !DILexicalBlock(scope: !1085, file: !457, line: 1742, column: 9)
!1094 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1095, file: !457, line: 1746, type: !13)
!1095 = distinct !DILexicalBlock(scope: !1085, file: !457, line: 1746, column: 8)
!1096 = !DISubprogram(name: "PySequence_Fast", scope: !457, file: !457, line: 1751, type: !1097, isLocal: false, isDefinition: true, scopeLine: 1752, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*)* @PySequence_Fast, variables: !1099)
!1097 = !DISubroutineType(types: !1098)
!1098 = !{!13, !13, !37}
!1099 = !{!1100, !1101, !1102, !1103}
!1100 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !1096, file: !457, line: 1751, type: !13)
!1101 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "m", arg: 2, scope: !1096, file: !457, line: 1751, type: !37)
!1102 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it", scope: !1096, file: !457, line: 1753, type: !13)
!1103 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1104, file: !457, line: 1771, type: !13)
!1104 = distinct !DILexicalBlock(scope: !1096, file: !457, line: 1771, column: 8)
!1105 = !DISubprogram(name: "_PySequence_IterSearch", scope: !457, file: !457, line: 1783, type: !1106, isLocal: false, isDefinition: true, scopeLine: 1784, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct._object*, %struct._object*, i32)* @_PySequence_IterSearch, variables: !1108)
!1106 = !DISubroutineType(types: !1107)
!1107 = !{!19, !13, !13, !52}
!1108 = !{!1109, !1110, !1111, !1112, !1113, !1114, !1115, !1119, !1120, !1122}
!1109 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "seq", arg: 1, scope: !1105, file: !457, line: 1783, type: !13)
!1110 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "obj", arg: 2, scope: !1105, file: !457, line: 1783, type: !13)
!1111 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "operation", arg: 3, scope: !1105, file: !457, line: 1783, type: !52)
!1112 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1105, file: !457, line: 1785, type: !19)
!1113 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "wrapped", scope: !1105, file: !457, line: 1786, type: !52)
!1114 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "it", scope: !1105, file: !457, line: 1787, type: !13)
!1115 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmp", scope: !1116, file: !457, line: 1802, type: !52)
!1116 = distinct !DILexicalBlock(scope: !1117, file: !457, line: 1801, column: 14)
!1117 = distinct !DILexicalBlock(scope: !1118, file: !457, line: 1801, column: 5)
!1118 = distinct !DILexicalBlock(scope: !1105, file: !457, line: 1801, column: 5)
!1119 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !1116, file: !457, line: 1803, type: !13)
!1120 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1121, file: !457, line: 1811, type: !13)
!1121 = distinct !DILexicalBlock(scope: !1116, file: !457, line: 1811, column: 12)
!1122 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1123, file: !457, line: 1859, type: !13)
!1123 = distinct !DILexicalBlock(scope: !1105, file: !457, line: 1859, column: 8)
!1124 = !DISubprogram(name: "PySequence_Count", scope: !457, file: !457, line: 1866, type: !863, isLocal: false, isDefinition: true, scopeLine: 1867, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct._object*, %struct._object*)* @PySequence_Count, variables: !1125)
!1125 = !{!1126, !1127}
!1126 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1124, file: !457, line: 1866, type: !13)
!1127 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 2, scope: !1124, file: !457, line: 1866, type: !13)
!1128 = !DISubprogram(name: "PySequence_Contains", scope: !457, file: !457, line: 1875, type: !205, isLocal: false, isDefinition: true, scopeLine: 1876, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*)* @PySequence_Contains, variables: !1129)
!1129 = !{!1130, !1131, !1132, !1133}
!1130 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "seq", arg: 1, scope: !1128, file: !457, line: 1875, type: !13)
!1131 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "ob", arg: 2, scope: !1128, file: !457, line: 1875, type: !13)
!1132 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1128, file: !457, line: 1877, type: !19)
!1133 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sqm", scope: !1128, file: !457, line: 1878, type: !179)
!1134 = !DISubprogram(name: "PySequence_In", scope: !457, file: !457, line: 1888, type: !205, isLocal: false, isDefinition: true, scopeLine: 1889, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*)* @PySequence_In, variables: !1135)
!1135 = !{!1136, !1137}
!1136 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 1, scope: !1134, file: !457, line: 1888, type: !13)
!1137 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 2, scope: !1134, file: !457, line: 1888, type: !13)
!1138 = !DISubprogram(name: "PySequence_Index", scope: !457, file: !457, line: 1894, type: !863, isLocal: false, isDefinition: true, scopeLine: 1895, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct._object*, %struct._object*)* @PySequence_Index, variables: !1139)
!1139 = !{!1140, !1141}
!1140 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1138, file: !457, line: 1894, type: !13)
!1141 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 2, scope: !1138, file: !457, line: 1894, type: !13)
!1142 = !DISubprogram(name: "PyMapping_Check", scope: !457, file: !457, line: 1902, type: !152, isLocal: false, isDefinition: true, scopeLine: 1903, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*)* @PyMapping_Check, variables: !1143)
!1143 = !{!1144}
!1144 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1142, file: !457, line: 1902, type: !13)
!1145 = !DISubprogram(name: "PyMapping_Size", scope: !457, file: !457, line: 1909, type: !186, isLocal: false, isDefinition: true, scopeLine: 1910, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct._object*)* @PyMapping_Size, variables: !1146)
!1146 = !{!1147, !1148}
!1147 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1145, file: !457, line: 1909, type: !13)
!1148 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !1145, file: !457, line: 1911, type: !210)
!1149 = !DISubprogram(name: "PyMapping_Length", scope: !457, file: !457, line: 1928, type: !186, isLocal: false, isDefinition: true, scopeLine: 1929, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct._object*)* @PyMapping_Length, variables: !1150)
!1150 = !{!1151}
!1151 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1149, file: !457, line: 1928, type: !13)
!1152 = !DISubprogram(name: "PyMapping_GetItemString", scope: !457, file: !457, line: 1935, type: !1097, isLocal: false, isDefinition: true, scopeLine: 1936, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*)* @PyMapping_GetItemString, variables: !1153)
!1153 = !{!1154, !1155, !1156, !1157, !1158}
!1154 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1152, file: !457, line: 1935, type: !13)
!1155 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "key", arg: 2, scope: !1152, file: !457, line: 1935, type: !37)
!1156 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "okey", scope: !1152, file: !457, line: 1937, type: !13)
!1157 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "r", scope: !1152, file: !457, line: 1937, type: !13)
!1158 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1159, file: !457, line: 1946, type: !13)
!1159 = distinct !DILexicalBlock(scope: !1152, file: !457, line: 1946, column: 8)
!1160 = !DISubprogram(name: "PyMapping_SetItemString", scope: !457, file: !457, line: 1951, type: !1161, isLocal: false, isDefinition: true, scopeLine: 1952, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i8*, %struct._object*)* @PyMapping_SetItemString, variables: !1163)
!1161 = !DISubroutineType(types: !1162)
!1162 = !{!52, !13, !37, !13}
!1163 = !{!1164, !1165, !1166, !1167, !1168, !1169}
!1164 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1160, file: !457, line: 1951, type: !13)
!1165 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "key", arg: 2, scope: !1160, file: !457, line: 1951, type: !37)
!1166 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "value", arg: 3, scope: !1160, file: !457, line: 1951, type: !13)
!1167 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "okey", scope: !1160, file: !457, line: 1953, type: !13)
!1168 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "r", scope: !1160, file: !457, line: 1954, type: !52)
!1169 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1170, file: !457, line: 1965, type: !13)
!1170 = distinct !DILexicalBlock(scope: !1160, file: !457, line: 1965, column: 8)
!1171 = !DISubprogram(name: "PyMapping_HasKeyString", scope: !457, file: !457, line: 1970, type: !525, isLocal: false, isDefinition: true, scopeLine: 1971, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i8*)* @PyMapping_HasKeyString, variables: !1172)
!1172 = !{!1173, !1174, !1175, !1176}
!1173 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1171, file: !457, line: 1970, type: !13)
!1174 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "key", arg: 2, scope: !1171, file: !457, line: 1970, type: !37)
!1175 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !1171, file: !457, line: 1972, type: !13)
!1176 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1177, file: !457, line: 1976, type: !13)
!1177 = distinct !DILexicalBlock(scope: !1178, file: !457, line: 1976, column: 12)
!1178 = distinct !DILexicalBlock(scope: !1179, file: !457, line: 1975, column: 12)
!1179 = distinct !DILexicalBlock(scope: !1171, file: !457, line: 1975, column: 9)
!1180 = !DISubprogram(name: "PyMapping_HasKey", scope: !457, file: !457, line: 1984, type: !205, isLocal: false, isDefinition: true, scopeLine: 1985, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*)* @PyMapping_HasKey, variables: !1181)
!1181 = !{!1182, !1183, !1184, !1185}
!1182 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1180, file: !457, line: 1984, type: !13)
!1183 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "key", arg: 2, scope: !1180, file: !457, line: 1984, type: !13)
!1184 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !1180, file: !457, line: 1986, type: !13)
!1185 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1186, file: !457, line: 1990, type: !13)
!1186 = distinct !DILexicalBlock(scope: !1187, file: !457, line: 1990, column: 12)
!1187 = distinct !DILexicalBlock(scope: !1188, file: !457, line: 1989, column: 12)
!1188 = distinct !DILexicalBlock(scope: !1180, file: !457, line: 1989, column: 9)
!1189 = !DISubprogram(name: "PyMapping_Keys", scope: !457, file: !457, line: 1998, type: !124, isLocal: false, isDefinition: true, scopeLine: 1999, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PyMapping_Keys, variables: !1190)
!1190 = !{!1191, !1192, !1193, !1194}
!1191 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1189, file: !457, line: 1998, type: !13)
!1192 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "keys", scope: !1189, file: !457, line: 2000, type: !13)
!1193 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fast", scope: !1189, file: !457, line: 2001, type: !13)
!1194 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1195, file: !457, line: 2010, type: !13)
!1195 = distinct !DILexicalBlock(scope: !1189, file: !457, line: 2010, column: 8)
!1196 = !DISubprogram(name: "PyMapping_Items", scope: !457, file: !457, line: 2015, type: !124, isLocal: false, isDefinition: true, scopeLine: 2016, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PyMapping_Items, variables: !1197)
!1197 = !{!1198, !1199, !1200, !1201}
!1198 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1196, file: !457, line: 2015, type: !13)
!1199 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "items", scope: !1196, file: !457, line: 2017, type: !13)
!1200 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fast", scope: !1196, file: !457, line: 2018, type: !13)
!1201 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1202, file: !457, line: 2027, type: !13)
!1202 = distinct !DILexicalBlock(scope: !1196, file: !457, line: 2027, column: 8)
!1203 = !DISubprogram(name: "PyMapping_Values", scope: !457, file: !457, line: 2032, type: !124, isLocal: false, isDefinition: true, scopeLine: 2033, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PyMapping_Values, variables: !1204)
!1204 = !{!1205, !1206, !1207, !1208}
!1205 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1203, file: !457, line: 2032, type: !13)
!1206 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "values", scope: !1203, file: !457, line: 2034, type: !13)
!1207 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fast", scope: !1203, file: !457, line: 2035, type: !13)
!1208 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1209, file: !457, line: 2044, type: !13)
!1209 = distinct !DILexicalBlock(scope: !1203, file: !457, line: 2044, column: 8)
!1210 = !DISubprogram(name: "PyObject_CallObject", scope: !457, file: !457, line: 2053, type: !134, isLocal: false, isDefinition: true, scopeLine: 2054, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @PyObject_CallObject, variables: !1211)
!1211 = !{!1212, !1213}
!1212 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1210, file: !457, line: 2053, type: !13)
!1213 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "a", arg: 2, scope: !1210, file: !457, line: 2053, type: !13)
!1214 = !DISubprogram(name: "PyObject_Call", scope: !457, file: !457, line: 2059, type: !143, isLocal: false, isDefinition: true, scopeLine: 2060, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @PyObject_Call, variables: !1215)
!1215 = !{!1216, !1217, !1218, !1219, !1220, !1223, !1231, !1232, !1235, !1237, !1241, !1242, !1243, !1244, !1246, !1247, !1248}
!1216 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "func", arg: 1, scope: !1214, file: !457, line: 2059, type: !13)
!1217 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !1214, file: !457, line: 2059, type: !13)
!1218 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kw", arg: 3, scope: !1214, file: !457, line: 2059, type: !13)
!1219 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "call", scope: !1214, file: !457, line: 2061, type: !141)
!1220 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1221, file: !457, line: 2064, type: !13)
!1221 = distinct !DILexicalBlock(scope: !1222, file: !457, line: 2063, column: 56)
!1222 = distinct !DILexicalBlock(scope: !1214, file: !457, line: 2063, column: 9)
!1223 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1224, file: !457, line: 2065, type: !1226)
!1224 = distinct !DILexicalBlock(scope: !1225, file: !457, line: 2065, column: 50)
!1225 = distinct !DILexicalBlock(scope: !1221, file: !457, line: 2065, column: 13)
!1226 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1227, size: 64, align: 64)
!1227 = !DIDerivedType(tag: DW_TAG_typedef, name: "_Py_atomic_address", file: !4, line: 33, baseType: !1228)
!1228 = !DICompositeType(tag: DW_TAG_structure_type, name: "_Py_atomic_address", file: !4, line: 31, size: 64, align: 64, elements: !1229)
!1229 = !{!1230}
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "_value", scope: !1228, file: !4, line: 32, baseType: !12, size: 64, align: 64)
!1231 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1224, file: !457, line: 2065, type: !12)
!1232 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1224, file: !457, line: 2065, type: !1233)
!1233 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1234, size: 64, align: 64)
!1234 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !12)
!1235 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1224, file: !457, line: 2065, type: !1236)
!1236 = !DIDerivedType(tag: DW_TAG_typedef, name: "_Py_memory_order", file: !4, line: 29, baseType: !3)
!1237 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1238, file: !457, line: 2068, type: !1226)
!1238 = distinct !DILexicalBlock(scope: !1239, file: !457, line: 2068, column: 52)
!1239 = distinct !DILexicalBlock(scope: !1240, file: !457, line: 2068, column: 16)
!1240 = distinct !DILexicalBlock(scope: !1221, file: !457, line: 2068, column: 11)
!1241 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1238, file: !457, line: 2068, type: !12)
!1242 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1238, file: !457, line: 2068, type: !1233)
!1243 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1238, file: !457, line: 2068, type: !1236)
!1244 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1245, file: !457, line: 2068, type: !1226)
!1245 = distinct !DILexicalBlock(scope: !1239, file: !457, line: 2068, column: 901)
!1246 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1245, file: !457, line: 2068, type: !12)
!1247 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1245, file: !457, line: 2068, type: !1233)
!1248 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1245, file: !457, line: 2068, type: !1236)
!1249 = !DISubprogram(name: "PyObject_CallFunction", scope: !457, file: !457, line: 2113, type: !1250, isLocal: false, isDefinition: true, scopeLine: 2114, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*, ...)* @PyObject_CallFunction, variables: !1252)
!1250 = !DISubroutineType(types: !1251)
!1251 = !{!13, !13, !37, null}
!1252 = !{!1253, !1254, !1255, !1268}
!1253 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "callable", arg: 1, scope: !1249, file: !457, line: 2113, type: !13)
!1254 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "format", arg: 2, scope: !1249, file: !457, line: 2113, type: !37)
!1255 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "va", scope: !1249, file: !457, line: 2115, type: !1256)
!1256 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !22, line: 79, baseType: !1257)
!1257 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !1258, line: 50, baseType: !1259)
!1258 = !DIFile(filename: "/opt/devel/yoonseung.kim/llvm_work/build/bin/../lib/clang/3.7.1/include/stdarg.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!1259 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !1, line: 2115, baseType: !1260)
!1260 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1261, size: 192, align: 64, elements: !90)
!1261 = !DIDerivedType(tag: DW_TAG_typedef, name: "__va_list_tag", file: !1, line: 2115, baseType: !1262)
!1262 = !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !1, line: 2115, size: 192, align: 64, elements: !1263)
!1263 = !{!1264, !1265, !1266, !1267}
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !1262, file: !1, line: 2115, baseType: !356, size: 32, align: 32)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !1262, file: !1, line: 2115, baseType: !356, size: 32, align: 32, offset: 32)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !1262, file: !1, line: 2115, baseType: !12, size: 64, align: 64, offset: 64)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !1262, file: !1, line: 2115, baseType: !12, size: 64, align: 64, offset: 128)
!1268 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "args", scope: !1249, file: !457, line: 2116, type: !13)
!1269 = !DISubprogram(name: "_PyObject_CallFunction_SizeT", scope: !457, file: !457, line: 2135, type: !1250, isLocal: false, isDefinition: true, scopeLine: 2136, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*, ...)* @_PyObject_CallFunction_SizeT, variables: !1270)
!1270 = !{!1271, !1272, !1273, !1274}
!1271 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "callable", arg: 1, scope: !1269, file: !457, line: 2135, type: !13)
!1272 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "format", arg: 2, scope: !1269, file: !457, line: 2135, type: !37)
!1273 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "va", scope: !1269, file: !457, line: 2137, type: !1256)
!1274 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "args", scope: !1269, file: !457, line: 2138, type: !13)
!1275 = !DISubprogram(name: "PyObject_CallMethod", scope: !457, file: !457, line: 2184, type: !1276, isLocal: false, isDefinition: true, scopeLine: 2185, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*, i8*, ...)* @PyObject_CallMethod, variables: !1278)
!1276 = !DISubroutineType(types: !1277)
!1277 = !{!13, !13, !37, !37, null}
!1278 = !{!1279, !1280, !1281, !1282, !1283, !1284}
!1279 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1275, file: !457, line: 2184, type: !13)
!1280 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "name", arg: 2, scope: !1275, file: !457, line: 2184, type: !37)
!1281 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "format", arg: 3, scope: !1275, file: !457, line: 2184, type: !37)
!1282 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "va", scope: !1275, file: !457, line: 2186, type: !1256)
!1283 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "func", scope: !1275, file: !457, line: 2187, type: !13)
!1284 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1275, file: !457, line: 2188, type: !13)
!1285 = !DISubprogram(name: "_PyObject_CallMethodId", scope: !457, file: !457, line: 2205, type: !1286, isLocal: false, isDefinition: true, scopeLine: 2207, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...)* @_PyObject_CallMethodId, variables: !1296)
!1286 = !DISubroutineType(types: !1287)
!1287 = !{!13, !13, !1288, !37, null}
!1288 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1289, size: 64, align: 64)
!1289 = !DIDerivedType(tag: DW_TAG_typedef, name: "_Py_Identifier", file: !15, line: 144, baseType: !1290)
!1290 = !DICompositeType(tag: DW_TAG_structure_type, name: "_Py_Identifier", file: !15, line: 140, size: 192, align: 64, elements: !1291)
!1291 = !{!1292, !1294, !1295}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1290, file: !15, line: 141, baseType: !1293, size: 64, align: 64)
!1293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1290, size: 64, align: 64)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1290, file: !15, line: 142, baseType: !37, size: 64, align: 64, offset: 64)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "object", scope: !1290, file: !15, line: 143, baseType: !13, size: 64, align: 64, offset: 128)
!1296 = !{!1297, !1298, !1299, !1300, !1301, !1302}
!1297 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1285, file: !457, line: 2205, type: !13)
!1298 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "name", arg: 2, scope: !1285, file: !457, line: 2205, type: !1288)
!1299 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "format", arg: 3, scope: !1285, file: !457, line: 2206, type: !37)
!1300 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "va", scope: !1285, file: !457, line: 2208, type: !1256)
!1301 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "func", scope: !1285, file: !457, line: 2209, type: !13)
!1302 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1285, file: !457, line: 2210, type: !13)
!1303 = !DISubprogram(name: "_PyObject_CallMethod_SizeT", scope: !457, file: !457, line: 2227, type: !1276, isLocal: false, isDefinition: true, scopeLine: 2229, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*, i8*, ...)* @_PyObject_CallMethod_SizeT, variables: !1304)
!1304 = !{!1305, !1306, !1307, !1308, !1309, !1310}
!1305 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1303, file: !457, line: 2227, type: !13)
!1306 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "name", arg: 2, scope: !1303, file: !457, line: 2227, type: !37)
!1307 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "format", arg: 3, scope: !1303, file: !457, line: 2228, type: !37)
!1308 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "va", scope: !1303, file: !457, line: 2230, type: !1256)
!1309 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "func", scope: !1303, file: !457, line: 2231, type: !13)
!1310 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1303, file: !457, line: 2232, type: !13)
!1311 = !DISubprogram(name: "_PyObject_CallMethodId_SizeT", scope: !457, file: !457, line: 2248, type: !1286, isLocal: false, isDefinition: true, scopeLine: 2250, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...)* @_PyObject_CallMethodId_SizeT, variables: !1312)
!1312 = !{!1313, !1314, !1315, !1316, !1317, !1318}
!1313 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1311, file: !457, line: 2248, type: !13)
!1314 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "name", arg: 2, scope: !1311, file: !457, line: 2248, type: !1288)
!1315 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "format", arg: 3, scope: !1311, file: !457, line: 2249, type: !37)
!1316 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "va", scope: !1311, file: !457, line: 2251, type: !1256)
!1317 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "func", scope: !1311, file: !457, line: 2252, type: !13)
!1318 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1311, file: !457, line: 2253, type: !13)
!1319 = !DISubprogram(name: "PyObject_CallMethodObjArgs", scope: !457, file: !457, line: 2291, type: !1320, isLocal: false, isDefinition: true, scopeLine: 2292, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, ...)* @PyObject_CallMethodObjArgs, variables: !1322)
!1320 = !DISubroutineType(types: !1321)
!1321 = !{!13, !13, !13, null}
!1322 = !{!1323, !1324, !1325, !1326, !1327, !1328, !1332, !1334}
!1323 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "callable", arg: 1, scope: !1319, file: !457, line: 2291, type: !13)
!1324 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "name", arg: 2, scope: !1319, file: !457, line: 2291, type: !13)
!1325 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "args", scope: !1319, file: !457, line: 2293, type: !13)
!1326 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !1319, file: !457, line: 2293, type: !13)
!1327 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vargs", scope: !1319, file: !457, line: 2294, type: !1256)
!1328 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1329, file: !457, line: 2308, type: !13)
!1329 = distinct !DILexicalBlock(scope: !1330, file: !457, line: 2308, column: 12)
!1330 = distinct !DILexicalBlock(scope: !1331, file: !457, line: 2307, column: 29)
!1331 = distinct !DILexicalBlock(scope: !1319, file: !457, line: 2307, column: 9)
!1332 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1333, file: !457, line: 2312, type: !13)
!1333 = distinct !DILexicalBlock(scope: !1319, file: !457, line: 2312, column: 8)
!1334 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1335, file: !457, line: 2313, type: !13)
!1335 = distinct !DILexicalBlock(scope: !1319, file: !457, line: 2313, column: 8)
!1336 = !DISubprogram(name: "_PyObject_CallMethodIdObjArgs", scope: !457, file: !457, line: 2319, type: !1337, isLocal: false, isDefinition: true, scopeLine: 2321, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._Py_Identifier*, ...)* @_PyObject_CallMethodIdObjArgs, variables: !1339)
!1337 = !DISubroutineType(types: !1338)
!1338 = !{!13, !13, !1293, null}
!1339 = !{!1340, !1341, !1342, !1343, !1344, !1345, !1349, !1351}
!1340 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "callable", arg: 1, scope: !1336, file: !457, line: 2319, type: !13)
!1341 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "name", arg: 2, scope: !1336, file: !457, line: 2320, type: !1293)
!1342 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "args", scope: !1336, file: !457, line: 2322, type: !13)
!1343 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !1336, file: !457, line: 2322, type: !13)
!1344 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vargs", scope: !1336, file: !457, line: 2323, type: !1256)
!1345 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1346, file: !457, line: 2337, type: !13)
!1346 = distinct !DILexicalBlock(scope: !1347, file: !457, line: 2337, column: 12)
!1347 = distinct !DILexicalBlock(scope: !1348, file: !457, line: 2336, column: 29)
!1348 = distinct !DILexicalBlock(scope: !1336, file: !457, line: 2336, column: 9)
!1349 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1350, file: !457, line: 2341, type: !13)
!1350 = distinct !DILexicalBlock(scope: !1336, file: !457, line: 2341, column: 8)
!1351 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1352, file: !457, line: 2342, type: !13)
!1352 = distinct !DILexicalBlock(scope: !1336, file: !457, line: 2342, column: 8)
!1353 = !DISubprogram(name: "PyObject_CallFunctionObjArgs", scope: !457, file: !457, line: 2348, type: !1354, isLocal: false, isDefinition: true, scopeLine: 2349, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, ...)* @PyObject_CallFunctionObjArgs, variables: !1356)
!1354 = !DISubroutineType(types: !1355)
!1355 = !{!13, !13, null}
!1356 = !{!1357, !1358, !1359, !1360, !1361}
!1357 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "callable", arg: 1, scope: !1353, file: !457, line: 2348, type: !13)
!1358 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "args", scope: !1353, file: !457, line: 2350, type: !13)
!1359 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !1353, file: !457, line: 2350, type: !13)
!1360 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "vargs", scope: !1353, file: !457, line: 2351, type: !1256)
!1361 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1362, file: !457, line: 2363, type: !13)
!1362 = distinct !DILexicalBlock(scope: !1353, file: !457, line: 2363, column: 8)
!1363 = !DISubprogram(name: "PyObject_IsInstance", scope: !457, file: !457, line: 2516, type: !205, isLocal: false, isDefinition: true, scopeLine: 2517, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*)* @PyObject_IsInstance, variables: !1364)
!1364 = !{!1365, !1366, !1367, !1368, !1371, !1372, !1373, !1376, !1377, !1378, !1379, !1383, !1387, !1388, !1389, !1390, !1392, !1393, !1394, !1395, !1398, !1399, !1402, !1403, !1404, !1405, !1408, !1412, !1413, !1414, !1415, !1417, !1418, !1419, !1420, !1422}
!1365 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "inst", arg: 1, scope: !1363, file: !457, line: 2516, type: !13)
!1366 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cls", arg: 2, scope: !1363, file: !457, line: 2516, type: !13)
!1367 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "checker", scope: !1363, file: !457, line: 2519, type: !13)
!1368 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1369, file: !457, line: 2526, type: !19)
!1369 = distinct !DILexicalBlock(scope: !1370, file: !457, line: 2525, column: 77)
!1370 = distinct !DILexicalBlock(scope: !1363, file: !457, line: 2525, column: 9)
!1371 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1369, file: !457, line: 2527, type: !19)
!1372 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "r", scope: !1369, file: !457, line: 2528, type: !52)
!1373 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1374, file: !457, line: 2530, type: !1226)
!1374 = distinct !DILexicalBlock(scope: !1375, file: !457, line: 2530, column: 50)
!1375 = distinct !DILexicalBlock(scope: !1369, file: !457, line: 2530, column: 13)
!1376 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1374, file: !457, line: 2530, type: !12)
!1377 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1374, file: !457, line: 2530, type: !1233)
!1378 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1374, file: !457, line: 2530, type: !1236)
!1379 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !1380, file: !457, line: 2534, type: !13)
!1380 = distinct !DILexicalBlock(scope: !1381, file: !457, line: 2533, column: 33)
!1381 = distinct !DILexicalBlock(scope: !1382, file: !457, line: 2533, column: 9)
!1382 = distinct !DILexicalBlock(scope: !1369, file: !457, line: 2533, column: 9)
!1383 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1384, file: !457, line: 2540, type: !1226)
!1384 = distinct !DILexicalBlock(scope: !1385, file: !457, line: 2540, column: 52)
!1385 = distinct !DILexicalBlock(scope: !1386, file: !457, line: 2540, column: 16)
!1386 = distinct !DILexicalBlock(scope: !1369, file: !457, line: 2540, column: 11)
!1387 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1384, file: !457, line: 2540, type: !12)
!1388 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1384, file: !457, line: 2540, type: !1233)
!1389 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1384, file: !457, line: 2540, type: !1236)
!1390 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1391, file: !457, line: 2540, type: !1226)
!1391 = distinct !DILexicalBlock(scope: !1385, file: !457, line: 2540, column: 901)
!1392 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1391, file: !457, line: 2540, type: !12)
!1393 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1391, file: !457, line: 2540, type: !1233)
!1394 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1391, file: !457, line: 2540, type: !1236)
!1395 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1396, file: !457, line: 2546, type: !13)
!1396 = distinct !DILexicalBlock(scope: !1397, file: !457, line: 2545, column: 32)
!1397 = distinct !DILexicalBlock(scope: !1363, file: !457, line: 2545, column: 9)
!1398 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ok", scope: !1396, file: !457, line: 2547, type: !52)
!1399 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1400, file: !457, line: 2548, type: !1226)
!1400 = distinct !DILexicalBlock(scope: !1401, file: !457, line: 2548, column: 50)
!1401 = distinct !DILexicalBlock(scope: !1396, file: !457, line: 2548, column: 13)
!1402 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1400, file: !457, line: 2548, type: !12)
!1403 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1400, file: !457, line: 2548, type: !1233)
!1404 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1400, file: !457, line: 2548, type: !1236)
!1405 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1406, file: !457, line: 2549, type: !13)
!1406 = distinct !DILexicalBlock(scope: !1407, file: !457, line: 2549, column: 16)
!1407 = distinct !DILexicalBlock(scope: !1401, file: !457, line: 2548, column: 837)
!1408 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1409, file: !457, line: 2553, type: !1226)
!1409 = distinct !DILexicalBlock(scope: !1410, file: !457, line: 2553, column: 52)
!1410 = distinct !DILexicalBlock(scope: !1411, file: !457, line: 2553, column: 16)
!1411 = distinct !DILexicalBlock(scope: !1396, file: !457, line: 2553, column: 11)
!1412 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1409, file: !457, line: 2553, type: !12)
!1413 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1409, file: !457, line: 2553, type: !1233)
!1414 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1409, file: !457, line: 2553, type: !1236)
!1415 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1416, file: !457, line: 2553, type: !1226)
!1416 = distinct !DILexicalBlock(scope: !1410, file: !457, line: 2553, column: 901)
!1417 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1416, file: !457, line: 2553, type: !12)
!1418 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1416, file: !457, line: 2553, type: !1233)
!1419 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1416, file: !457, line: 2553, type: !1236)
!1420 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1421, file: !457, line: 2554, type: !13)
!1421 = distinct !DILexicalBlock(scope: !1396, file: !457, line: 2554, column: 12)
!1422 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1423, file: !457, line: 2557, type: !13)
!1423 = distinct !DILexicalBlock(scope: !1424, file: !457, line: 2557, column: 16)
!1424 = distinct !DILexicalBlock(scope: !1425, file: !457, line: 2555, column: 32)
!1425 = distinct !DILexicalBlock(scope: !1396, file: !457, line: 2555, column: 13)
!1426 = !DISubprogram(name: "PyObject_IsSubclass", scope: !457, file: !457, line: 2585, type: !205, isLocal: false, isDefinition: true, scopeLine: 2586, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*)* @PyObject_IsSubclass, variables: !1427)
!1427 = !{!1428, !1429, !1430, !1431, !1434, !1435, !1436, !1439, !1440, !1441, !1442, !1446, !1450, !1451, !1452, !1453, !1455, !1456, !1457, !1458, !1461, !1462, !1465, !1466, !1467, !1468, !1471, !1475, !1476, !1477, !1478, !1480, !1481, !1482, !1483, !1485}
!1428 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "derived", arg: 1, scope: !1426, file: !457, line: 2585, type: !13)
!1429 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cls", arg: 2, scope: !1426, file: !457, line: 2585, type: !13)
!1430 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "checker", scope: !1426, file: !457, line: 2588, type: !13)
!1431 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1432, file: !457, line: 2591, type: !19)
!1432 = distinct !DILexicalBlock(scope: !1433, file: !457, line: 2590, column: 77)
!1433 = distinct !DILexicalBlock(scope: !1426, file: !457, line: 2590, column: 9)
!1434 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1432, file: !457, line: 2592, type: !19)
!1435 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "r", scope: !1432, file: !457, line: 2593, type: !52)
!1436 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1437, file: !457, line: 2595, type: !1226)
!1437 = distinct !DILexicalBlock(scope: !1438, file: !457, line: 2595, column: 50)
!1438 = distinct !DILexicalBlock(scope: !1432, file: !457, line: 2595, column: 13)
!1439 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1437, file: !457, line: 2595, type: !12)
!1440 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1437, file: !457, line: 2595, type: !1233)
!1441 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1437, file: !457, line: 2595, type: !1236)
!1442 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !1443, file: !457, line: 2599, type: !13)
!1443 = distinct !DILexicalBlock(scope: !1444, file: !457, line: 2598, column: 33)
!1444 = distinct !DILexicalBlock(scope: !1445, file: !457, line: 2598, column: 9)
!1445 = distinct !DILexicalBlock(scope: !1432, file: !457, line: 2598, column: 9)
!1446 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1447, file: !457, line: 2605, type: !1226)
!1447 = distinct !DILexicalBlock(scope: !1448, file: !457, line: 2605, column: 52)
!1448 = distinct !DILexicalBlock(scope: !1449, file: !457, line: 2605, column: 16)
!1449 = distinct !DILexicalBlock(scope: !1432, file: !457, line: 2605, column: 11)
!1450 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1447, file: !457, line: 2605, type: !12)
!1451 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1447, file: !457, line: 2605, type: !1233)
!1452 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1447, file: !457, line: 2605, type: !1236)
!1453 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1454, file: !457, line: 2605, type: !1226)
!1454 = distinct !DILexicalBlock(scope: !1448, file: !457, line: 2605, column: 901)
!1455 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1454, file: !457, line: 2605, type: !12)
!1456 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1454, file: !457, line: 2605, type: !1233)
!1457 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1454, file: !457, line: 2605, type: !1236)
!1458 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1459, file: !457, line: 2611, type: !13)
!1459 = distinct !DILexicalBlock(scope: !1460, file: !457, line: 2610, column: 32)
!1460 = distinct !DILexicalBlock(scope: !1426, file: !457, line: 2610, column: 9)
!1461 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ok", scope: !1459, file: !457, line: 2612, type: !52)
!1462 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1463, file: !457, line: 2613, type: !1226)
!1463 = distinct !DILexicalBlock(scope: !1464, file: !457, line: 2613, column: 50)
!1464 = distinct !DILexicalBlock(scope: !1459, file: !457, line: 2613, column: 13)
!1465 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1463, file: !457, line: 2613, type: !12)
!1466 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1463, file: !457, line: 2613, type: !1233)
!1467 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1463, file: !457, line: 2613, type: !1236)
!1468 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1469, file: !457, line: 2614, type: !13)
!1469 = distinct !DILexicalBlock(scope: !1470, file: !457, line: 2614, column: 16)
!1470 = distinct !DILexicalBlock(scope: !1464, file: !457, line: 2613, column: 837)
!1471 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1472, file: !457, line: 2618, type: !1226)
!1472 = distinct !DILexicalBlock(scope: !1473, file: !457, line: 2618, column: 52)
!1473 = distinct !DILexicalBlock(scope: !1474, file: !457, line: 2618, column: 16)
!1474 = distinct !DILexicalBlock(scope: !1459, file: !457, line: 2618, column: 11)
!1475 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1472, file: !457, line: 2618, type: !12)
!1476 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1472, file: !457, line: 2618, type: !1233)
!1477 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1472, file: !457, line: 2618, type: !1236)
!1478 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1479, file: !457, line: 2618, type: !1226)
!1479 = distinct !DILexicalBlock(scope: !1473, file: !457, line: 2618, column: 901)
!1480 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1479, file: !457, line: 2618, type: !12)
!1481 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1479, file: !457, line: 2618, type: !1233)
!1482 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1479, file: !457, line: 2618, type: !1236)
!1483 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1484, file: !457, line: 2619, type: !13)
!1484 = distinct !DILexicalBlock(scope: !1459, file: !457, line: 2619, column: 12)
!1485 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1486, file: !457, line: 2622, type: !13)
!1486 = distinct !DILexicalBlock(scope: !1487, file: !457, line: 2622, column: 16)
!1487 = distinct !DILexicalBlock(scope: !1488, file: !457, line: 2620, column: 32)
!1488 = distinct !DILexicalBlock(scope: !1459, file: !457, line: 2620, column: 13)
!1489 = !DISubprogram(name: "_PyObject_RealIsInstance", scope: !457, file: !457, line: 2632, type: !205, isLocal: false, isDefinition: true, scopeLine: 2633, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*)* @_PyObject_RealIsInstance, variables: !1490)
!1490 = !{!1491, !1492}
!1491 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "inst", arg: 1, scope: !1489, file: !457, line: 2632, type: !13)
!1492 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cls", arg: 2, scope: !1489, file: !457, line: 2632, type: !13)
!1493 = !DISubprogram(name: "_PyObject_RealIsSubclass", scope: !457, file: !457, line: 2638, type: !205, isLocal: false, isDefinition: true, scopeLine: 2639, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*)* @_PyObject_RealIsSubclass, variables: !1494)
!1494 = !{!1495, !1496}
!1495 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "derived", arg: 1, scope: !1493, file: !457, line: 2638, type: !13)
!1496 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cls", arg: 2, scope: !1493, file: !457, line: 2638, type: !13)
!1497 = !DISubprogram(name: "PyObject_GetIter", scope: !457, file: !457, line: 2645, type: !124, isLocal: false, isDefinition: true, scopeLine: 2646, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PyObject_GetIter, variables: !1498)
!1498 = !{!1499, !1500, !1501, !1502, !1505}
!1499 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "o", arg: 1, scope: !1497, file: !457, line: 2645, type: !13)
!1500 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t", scope: !1497, file: !457, line: 2647, type: !451)
!1501 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "f", scope: !1497, file: !457, line: 2648, type: !283)
!1502 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1503, file: !457, line: 2656, type: !13)
!1503 = distinct !DILexicalBlock(scope: !1504, file: !457, line: 2655, column: 10)
!1504 = distinct !DILexicalBlock(scope: !1497, file: !457, line: 2650, column: 9)
!1505 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1506, file: !457, line: 2662, type: !13)
!1506 = distinct !DILexicalBlock(scope: !1507, file: !457, line: 2662, column: 16)
!1507 = distinct !DILexicalBlock(scope: !1508, file: !457, line: 2657, column: 144)
!1508 = distinct !DILexicalBlock(scope: !1503, file: !457, line: 2657, column: 13)
!1509 = !DISubprogram(name: "PyIter_Next", scope: !457, file: !457, line: 2677, type: !124, isLocal: false, isDefinition: true, scopeLine: 2678, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @PyIter_Next, variables: !1510)
!1510 = !{!1511, !1512}
!1511 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "iter", arg: 1, scope: !1509, file: !457, line: 2677, type: !13)
!1512 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1509, file: !457, line: 2679, type: !13)
!1513 = !DISubprogram(name: "_PySequence_BytesToCharpArray", scope: !457, file: !457, line: 2698, type: !1514, isLocal: false, isDefinition: true, scopeLine: 2699, flags: DIFlagPrototyped, isOptimized: true, function: i8** (%struct._object*)* @_PySequence_BytesToCharpArray, variables: !1518)
!1514 = !DISubroutineType(types: !1515)
!1515 = !{!1516, !13}
!1516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1517, size: 64, align: 64)
!1517 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !60)
!1518 = !{!1519, !1520, !1521, !1522, !1523, !1524, !1525, !1529, !1531, !1533}
!1519 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1513, file: !457, line: 2698, type: !13)
!1520 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "array", scope: !1513, file: !457, line: 2700, type: !358)
!1521 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1513, file: !457, line: 2701, type: !19)
!1522 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "argc", scope: !1513, file: !457, line: 2701, type: !19)
!1523 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "item", scope: !1513, file: !457, line: 2702, type: !13)
!1524 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "size", scope: !1513, file: !457, line: 2703, type: !19)
!1525 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "data", scope: !1526, file: !457, line: 2722, type: !60)
!1526 = distinct !DILexicalBlock(scope: !1527, file: !457, line: 2721, column: 32)
!1527 = distinct !DILexicalBlock(scope: !1528, file: !457, line: 2721, column: 5)
!1528 = distinct !DILexicalBlock(scope: !1513, file: !457, line: 2721, column: 5)
!1529 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1530, file: !457, line: 2742, type: !13)
!1530 = distinct !DILexicalBlock(scope: !1526, file: !457, line: 2742, column: 12)
!1531 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1532, file: !457, line: 2749, type: !13)
!1532 = distinct !DILexicalBlock(scope: !1513, file: !457, line: 2749, column: 8)
!1533 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1534, file: !457, line: 2749, type: !13)
!1534 = distinct !DILexicalBlock(scope: !1535, file: !457, line: 2749, column: 96)
!1535 = distinct !DILexicalBlock(scope: !1532, file: !457, line: 2749, column: 62)
!1536 = !DISubprogram(name: "_Py_FreeCharPArray", scope: !457, file: !457, line: 2757, type: !1537, isLocal: false, isDefinition: true, scopeLine: 2758, flags: DIFlagPrototyped, isOptimized: true, function: void (i8**)* @_Py_FreeCharPArray, variables: !1539)
!1537 = !DISubroutineType(types: !1538)
!1538 = !{null, !1516}
!1539 = !{!1540, !1541}
!1540 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "array", arg: 1, scope: !1536, file: !457, line: 2757, type: !1516)
!1541 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1536, file: !457, line: 2759, type: !19)
!1542 = !DISubprogram(name: "null_error", scope: !457, file: !457, line: 20, type: !1543, isLocal: true, isDefinition: true, scopeLine: 21, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* ()* @null_error, variables: !1545)
!1543 = !DISubroutineType(types: !1544)
!1544 = !{!13}
!1545 = !{}
!1546 = !DISubprogram(name: "type_error", scope: !457, file: !457, line: 13, type: !1547, isLocal: true, isDefinition: true, scopeLine: 14, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (i8*, %struct._object*)* @type_error, variables: !1549)
!1547 = !DISubroutineType(types: !1548)
!1548 = !{!13, !37, !13}
!1549 = !{!1550, !1551}
!1550 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "msg", arg: 1, scope: !1546, file: !457, line: 13, type: !37)
!1551 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "obj", arg: 2, scope: !1546, file: !457, line: 13, type: !13)
!1552 = !DISubprogram(name: "_IsCContiguous", scope: !457, file: !457, line: 387, type: !1553, isLocal: true, isDefinition: true, scopeLine: 388, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.bufferinfo*)* @_IsCContiguous, variables: !1555)
!1553 = !DISubroutineType(types: !1554)
!1554 = !{!52, !594}
!1555 = !{!1556, !1557, !1558, !1559}
!1556 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "view", arg: 1, scope: !1552, file: !457, line: 387, type: !594)
!1557 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sd", scope: !1552, file: !457, line: 389, type: !19)
!1558 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dim", scope: !1552, file: !457, line: 389, type: !19)
!1559 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1552, file: !457, line: 390, type: !52)
!1560 = !DISubprogram(name: "_IsFortranContiguous", scope: !457, file: !457, line: 366, type: !1553, isLocal: true, isDefinition: true, scopeLine: 367, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.bufferinfo*)* @_IsFortranContiguous, variables: !1561)
!1561 = !{!1562, !1563, !1564, !1565}
!1562 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "view", arg: 1, scope: !1560, file: !457, line: 366, type: !594)
!1563 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sd", scope: !1560, file: !457, line: 368, type: !19)
!1564 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "dim", scope: !1560, file: !457, line: 368, type: !19)
!1565 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1560, file: !457, line: 369, type: !52)
!1566 = !DISubprogram(name: "binary_op", scope: !457, file: !457, line: 779, type: !1567, isLocal: true, isDefinition: true, scopeLine: 780, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, i32, i8*)* @binary_op, variables: !1570)
!1567 = !DISubroutineType(types: !1568)
!1568 = !{!13, !13, !13, !1569, !37}
!1569 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !52)
!1570 = !{!1571, !1572, !1573, !1574, !1575, !1576}
!1571 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !1566, file: !457, line: 779, type: !13)
!1572 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !1566, file: !457, line: 779, type: !13)
!1573 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "op_slot", arg: 3, scope: !1566, file: !457, line: 779, type: !1569)
!1574 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "op_name", arg: 4, scope: !1566, file: !457, line: 779, type: !37)
!1575 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1566, file: !457, line: 781, type: !13)
!1576 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1577, file: !457, line: 783, type: !13)
!1577 = distinct !DILexicalBlock(scope: !1578, file: !457, line: 783, column: 12)
!1578 = distinct !DILexicalBlock(scope: !1579, file: !457, line: 782, column: 48)
!1579 = distinct !DILexicalBlock(scope: !1566, file: !457, line: 782, column: 9)
!1580 = !DISubprogram(name: "binary_op1", scope: !457, file: !457, line: 730, type: !1581, isLocal: true, isDefinition: true, scopeLine: 731, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, i32)* @binary_op1, variables: !1583)
!1581 = !DISubroutineType(types: !1582)
!1582 = !{!13, !13, !13, !1569}
!1583 = !{!1584, !1585, !1586, !1587, !1588, !1589, !1590, !1596, !1598}
!1584 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !1580, file: !457, line: 730, type: !13)
!1585 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !1580, file: !457, line: 730, type: !13)
!1586 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "op_slot", arg: 3, scope: !1580, file: !457, line: 730, type: !1569)
!1587 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !1580, file: !457, line: 732, type: !13)
!1588 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "slotv", scope: !1580, file: !457, line: 733, type: !132)
!1589 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "slotw", scope: !1580, file: !457, line: 734, type: !132)
!1590 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1591, file: !457, line: 749, type: !13)
!1591 = distinct !DILexicalBlock(scope: !1592, file: !457, line: 749, column: 16)
!1592 = distinct !DILexicalBlock(scope: !1593, file: !457, line: 745, column: 64)
!1593 = distinct !DILexicalBlock(scope: !1594, file: !457, line: 745, column: 13)
!1594 = distinct !DILexicalBlock(scope: !1595, file: !457, line: 744, column: 16)
!1595 = distinct !DILexicalBlock(scope: !1580, file: !457, line: 744, column: 9)
!1596 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1597, file: !457, line: 755, type: !13)
!1597 = distinct !DILexicalBlock(scope: !1594, file: !457, line: 755, column: 12)
!1598 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1599, file: !457, line: 761, type: !13)
!1599 = distinct !DILexicalBlock(scope: !1600, file: !457, line: 761, column: 12)
!1600 = distinct !DILexicalBlock(scope: !1601, file: !457, line: 757, column: 16)
!1601 = distinct !DILexicalBlock(scope: !1580, file: !457, line: 757, column: 9)
!1602 = !DISubprogram(name: "binop_type_error", scope: !457, file: !457, line: 767, type: !1603, isLocal: true, isDefinition: true, scopeLine: 768, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, i8*)* @binop_type_error, variables: !1605)
!1603 = !DISubroutineType(types: !1604)
!1604 = !{!13, !13, !13, !37}
!1605 = !{!1606, !1607, !1608}
!1606 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !1602, file: !457, line: 767, type: !13)
!1607 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !1602, file: !457, line: 767, type: !13)
!1608 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "op_name", arg: 3, scope: !1602, file: !457, line: 767, type: !37)
!1609 = !DISubprogram(name: "sequence_repeat", scope: !457, file: !457, line: 900, type: !1610, isLocal: true, isDefinition: true, scopeLine: 901, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object* (%struct._object*, i64)*, %struct._object*, %struct._object*)* @sequence_repeat, variables: !1612)
!1610 = !DISubroutineType(types: !1611)
!1611 = !{!13, !190, !13, !13}
!1612 = !{!1613, !1614, !1615, !1616}
!1613 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "repeatfunc", arg: 1, scope: !1609, file: !457, line: 900, type: !190)
!1614 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "seq", arg: 2, scope: !1609, file: !457, line: 900, type: !13)
!1615 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "n", arg: 3, scope: !1609, file: !457, line: 900, type: !13)
!1616 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "count", scope: !1609, file: !457, line: 902, type: !19)
!1617 = !DISubprogram(name: "ternary_op", scope: !457, file: !457, line: 798, type: !1618, isLocal: true, isDefinition: true, scopeLine: 803, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*, i32, i8*)* @ternary_op, variables: !1620)
!1618 = !DISubroutineType(types: !1619)
!1619 = !{!13, !13, !13, !13, !1569, !37}
!1620 = !{!1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1639, !1641, !1645}
!1621 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !1617, file: !457, line: 798, type: !13)
!1622 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !1617, file: !457, line: 799, type: !13)
!1623 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "z", arg: 3, scope: !1617, file: !457, line: 800, type: !13)
!1624 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "op_slot", arg: 4, scope: !1617, file: !457, line: 801, type: !1569)
!1625 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "op_name", arg: 5, scope: !1617, file: !457, line: 802, type: !37)
!1626 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mv", scope: !1617, file: !457, line: 804, type: !127)
!1627 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mw", scope: !1617, file: !457, line: 804, type: !127)
!1628 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mz", scope: !1617, file: !457, line: 804, type: !127)
!1629 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !1617, file: !457, line: 805, type: !13)
!1630 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "slotv", scope: !1617, file: !457, line: 806, type: !141)
!1631 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "slotw", scope: !1617, file: !457, line: 807, type: !141)
!1632 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "slotz", scope: !1617, file: !457, line: 808, type: !141)
!1633 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1634, file: !457, line: 825, type: !13)
!1634 = distinct !DILexicalBlock(scope: !1635, file: !457, line: 825, column: 16)
!1635 = distinct !DILexicalBlock(scope: !1636, file: !457, line: 821, column: 64)
!1636 = distinct !DILexicalBlock(scope: !1637, file: !457, line: 821, column: 13)
!1637 = distinct !DILexicalBlock(scope: !1638, file: !457, line: 820, column: 16)
!1638 = distinct !DILexicalBlock(scope: !1617, file: !457, line: 820, column: 9)
!1639 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1640, file: !457, line: 831, type: !13)
!1640 = distinct !DILexicalBlock(scope: !1637, file: !457, line: 831, column: 12)
!1641 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1642, file: !457, line: 837, type: !13)
!1642 = distinct !DILexicalBlock(scope: !1643, file: !457, line: 837, column: 12)
!1643 = distinct !DILexicalBlock(scope: !1644, file: !457, line: 833, column: 16)
!1644 = distinct !DILexicalBlock(scope: !1617, file: !457, line: 833, column: 9)
!1645 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1646, file: !457, line: 848, type: !13)
!1646 = distinct !DILexicalBlock(scope: !1647, file: !457, line: 848, column: 16)
!1647 = distinct !DILexicalBlock(scope: !1648, file: !457, line: 844, column: 20)
!1648 = distinct !DILexicalBlock(scope: !1649, file: !457, line: 844, column: 13)
!1649 = distinct !DILexicalBlock(scope: !1650, file: !457, line: 840, column: 27)
!1650 = distinct !DILexicalBlock(scope: !1617, file: !457, line: 840, column: 9)
!1651 = !DISubprogram(name: "binary_iop", scope: !457, file: !457, line: 992, type: !1652, isLocal: true, isDefinition: true, scopeLine: 994, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, i32, i32, i8*)* @binary_iop, variables: !1654)
!1652 = !DISubroutineType(types: !1653)
!1653 = !{!13, !13, !13, !1569, !1569, !37}
!1654 = !{!1655, !1656, !1657, !1658, !1659, !1660, !1661}
!1655 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !1651, file: !457, line: 992, type: !13)
!1656 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !1651, file: !457, line: 992, type: !13)
!1657 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "iop_slot", arg: 3, scope: !1651, file: !457, line: 992, type: !1569)
!1658 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "op_slot", arg: 4, scope: !1651, file: !457, line: 992, type: !1569)
!1659 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "op_name", arg: 5, scope: !1651, file: !457, line: 993, type: !37)
!1660 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1651, file: !457, line: 995, type: !13)
!1661 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1662, file: !457, line: 997, type: !13)
!1662 = distinct !DILexicalBlock(scope: !1663, file: !457, line: 997, column: 12)
!1663 = distinct !DILexicalBlock(scope: !1664, file: !457, line: 996, column: 48)
!1664 = distinct !DILexicalBlock(scope: !1651, file: !457, line: 996, column: 9)
!1665 = !DISubprogram(name: "binary_iop1", scope: !457, file: !457, line: 975, type: !1666, isLocal: true, isDefinition: true, scopeLine: 976, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, i32, i32)* @binary_iop1, variables: !1668)
!1666 = !DISubroutineType(types: !1667)
!1667 = !{!13, !13, !13, !1569, !1569}
!1668 = !{!1669, !1670, !1671, !1672, !1673, !1674, !1677, !1680}
!1669 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "v", arg: 1, scope: !1665, file: !457, line: 975, type: !13)
!1670 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "w", arg: 2, scope: !1665, file: !457, line: 975, type: !13)
!1671 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "iop_slot", arg: 3, scope: !1665, file: !457, line: 975, type: !1569)
!1672 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "op_slot", arg: 4, scope: !1665, file: !457, line: 975, type: !1569)
!1673 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "mv", scope: !1665, file: !457, line: 977, type: !127)
!1674 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "slot", scope: !1675, file: !457, line: 979, type: !132)
!1675 = distinct !DILexicalBlock(scope: !1676, file: !457, line: 978, column: 27)
!1676 = distinct !DILexicalBlock(scope: !1665, file: !457, line: 978, column: 9)
!1677 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !1678, file: !457, line: 981, type: !13)
!1678 = distinct !DILexicalBlock(scope: !1679, file: !457, line: 980, column: 19)
!1679 = distinct !DILexicalBlock(scope: !1675, file: !457, line: 980, column: 13)
!1680 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1681, file: !457, line: 985, type: !13)
!1681 = distinct !DILexicalBlock(scope: !1678, file: !457, line: 985, column: 16)
!1682 = !DISubprogram(name: "_Py_ANNOTATE_MEMORY_ORDER", scope: !4, file: !4, line: 59, type: !1683, isLocal: true, isDefinition: true, scopeLine: 60, flags: DIFlagPrototyped, isOptimized: true, function: void (i8*, i32)* @_Py_ANNOTATE_MEMORY_ORDER, variables: !1688)
!1683 = !DISubroutineType(types: !1684)
!1684 = !{null, !1685, !1236}
!1685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1686, size: 64, align: 64)
!1686 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1687)
!1687 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: null)
!1688 = !{!1689, !1690}
!1689 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "address", arg: 1, scope: !1682, file: !4, line: 59, type: !1685)
!1690 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "order", arg: 2, scope: !1682, file: !4, line: 59, type: !1236)
!1691 = !DISubprogram(name: "_Py_atomic_thread_fence", scope: !4, file: !4, line: 51, type: !1692, isLocal: true, isDefinition: true, scopeLine: 52, flags: DIFlagPrototyped, isOptimized: true, function: void (i32)* @_Py_atomic_thread_fence, variables: !1694)
!1692 = !DISubroutineType(types: !1693)
!1693 = !{null, !1236}
!1694 = !{!1695}
!1695 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "order", arg: 1, scope: !1691, file: !4, line: 51, type: !1236)
!1696 = !DISubprogram(name: "_Py_atomic_signal_fence", scope: !4, file: !4, line: 44, type: !1692, isLocal: true, isDefinition: true, scopeLine: 45, flags: DIFlagPrototyped, isOptimized: true, function: void (i32)* @_Py_atomic_signal_fence, variables: !1697)
!1697 = !{!1698}
!1698 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "order", arg: 1, scope: !1696, file: !4, line: 44, type: !1236)
!1699 = !DISubprogram(name: "call_function_tail", scope: !457, file: !457, line: 2087, type: !134, isLocal: true, isDefinition: true, scopeLine: 2088, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @call_function_tail, variables: !1700)
!1700 = !{!1701, !1702, !1703, !1704, !1707, !1711}
!1701 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "callable", arg: 1, scope: !1699, file: !457, line: 2087, type: !13)
!1702 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1699, file: !457, line: 2087, type: !13)
!1703 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1699, file: !457, line: 2089, type: !13)
!1704 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a", scope: !1705, file: !457, line: 2095, type: !13)
!1705 = distinct !DILexicalBlock(scope: !1706, file: !457, line: 2094, column: 79)
!1706 = distinct !DILexicalBlock(scope: !1699, file: !457, line: 2094, column: 9)
!1707 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1708, file: !457, line: 2099, type: !13)
!1708 = distinct !DILexicalBlock(scope: !1709, file: !457, line: 2099, column: 16)
!1709 = distinct !DILexicalBlock(scope: !1710, file: !457, line: 2098, column: 30)
!1710 = distinct !DILexicalBlock(scope: !1705, file: !457, line: 2098, column: 13)
!1711 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1712, file: !457, line: 2107, type: !13)
!1712 = distinct !DILexicalBlock(scope: !1699, file: !457, line: 2107, column: 8)
!1713 = !DISubprogram(name: "callmethod", scope: !457, file: !457, line: 2155, type: !1714, isLocal: true, isDefinition: true, scopeLine: 2156, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, i8*, %struct.__va_list_tag*, i32)* @callmethod, variables: !1717)
!1714 = !DISubroutineType(types: !1715)
!1715 = !{!13, !13, !37, !1716, !52}
!1716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1261, size: 64, align: 64)
!1717 = !{!1718, !1719, !1720, !1721, !1722, !1723, !1724, !1726}
!1718 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "func", arg: 1, scope: !1713, file: !457, line: 2155, type: !13)
!1719 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "format", arg: 2, scope: !1713, file: !457, line: 2155, type: !37)
!1720 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "va", arg: 3, scope: !1713, file: !457, line: 2155, type: !1716)
!1721 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "is_size_t", arg: 4, scope: !1713, file: !457, line: 2155, type: !52)
!1722 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1713, file: !457, line: 2157, type: !13)
!1723 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "args", scope: !1713, file: !457, line: 2158, type: !13)
!1724 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1725, file: !457, line: 2178, type: !13)
!1725 = distinct !DILexicalBlock(scope: !1713, file: !457, line: 2178, column: 8)
!1726 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1727, file: !457, line: 2178, type: !13)
!1727 = distinct !DILexicalBlock(scope: !1728, file: !457, line: 2178, column: 96)
!1728 = distinct !DILexicalBlock(scope: !1725, file: !457, line: 2178, column: 62)
!1729 = !DISubprogram(name: "objargs_mktuple", scope: !457, file: !457, line: 2269, type: !1730, isLocal: true, isDefinition: true, scopeLine: 2270, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.__va_list_tag*)* @objargs_mktuple, variables: !1732)
!1730 = !DISubroutineType(types: !1731)
!1731 = !{!13, !1716}
!1732 = !{!1733, !1734, !1735, !1736, !1737, !1738}
!1733 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "va", arg: 1, scope: !1729, file: !457, line: 2269, type: !1716)
!1734 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1729, file: !457, line: 2271, type: !52)
!1735 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1729, file: !457, line: 2271, type: !52)
!1736 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "countva", scope: !1729, file: !457, line: 2272, type: !1256)
!1737 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1729, file: !457, line: 2273, type: !13)
!1738 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !1729, file: !457, line: 2273, type: !13)
!1739 = !DISubprogram(name: "recursive_isinstance", scope: !457, file: !457, line: 2469, type: !205, isLocal: true, isDefinition: true, scopeLine: 2470, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*)* @recursive_isinstance, variables: !1740)
!1740 = !{!1741, !1742, !1743, !1744, !1745, !1750, !1754}
!1741 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "inst", arg: 1, scope: !1739, file: !457, line: 2469, type: !13)
!1742 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cls", arg: 2, scope: !1739, file: !457, line: 2469, type: !13)
!1743 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "icls", scope: !1739, file: !457, line: 2471, type: !13)
!1744 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1739, file: !457, line: 2472, type: !52)
!1745 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c", scope: !1746, file: !457, line: 2478, type: !13)
!1746 = distinct !DILexicalBlock(scope: !1747, file: !457, line: 2477, column: 26)
!1747 = distinct !DILexicalBlock(scope: !1748, file: !457, line: 2477, column: 13)
!1748 = distinct !DILexicalBlock(scope: !1749, file: !457, line: 2475, column: 77)
!1749 = distinct !DILexicalBlock(scope: !1739, file: !457, line: 2475, column: 9)
!1750 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1751, file: !457, line: 2491, type: !13)
!1751 = distinct !DILexicalBlock(scope: !1752, file: !457, line: 2491, column: 20)
!1752 = distinct !DILexicalBlock(scope: !1753, file: !457, line: 2485, column: 18)
!1753 = distinct !DILexicalBlock(scope: !1746, file: !457, line: 2479, column: 17)
!1754 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1755, file: !457, line: 2508, type: !13)
!1755 = distinct !DILexicalBlock(scope: !1756, file: !457, line: 2508, column: 16)
!1756 = distinct !DILexicalBlock(scope: !1757, file: !457, line: 2506, column: 14)
!1757 = distinct !DILexicalBlock(scope: !1758, file: !457, line: 2500, column: 13)
!1758 = distinct !DILexicalBlock(scope: !1749, file: !457, line: 2495, column: 10)
!1759 = !DISubprogram(name: "check_class", scope: !457, file: !457, line: 2455, type: !525, isLocal: true, isDefinition: true, scopeLine: 2456, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, i8*)* @check_class, variables: !1760)
!1760 = !{!1761, !1762, !1763, !1764}
!1761 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cls", arg: 1, scope: !1759, file: !457, line: 2455, type: !13)
!1762 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "error", arg: 2, scope: !1759, file: !457, line: 2455, type: !37)
!1763 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bases", scope: !1759, file: !457, line: 2457, type: !13)
!1764 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1765, file: !457, line: 2464, type: !13)
!1765 = distinct !DILexicalBlock(scope: !1759, file: !457, line: 2464, column: 8)
!1766 = !DISubprogram(name: "abstract_get_bases", scope: !457, file: !457, line: 2396, type: !124, isLocal: true, isDefinition: true, scopeLine: 2397, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @abstract_get_bases, variables: !1767)
!1767 = !{!1768, !1769, !1770, !1773, !1775, !1776, !1777, !1778, !1780, !1781, !1782, !1783, !1785, !1786, !1787, !1788}
!1768 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cls", arg: 1, scope: !1766, file: !457, line: 2396, type: !13)
!1769 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bases", scope: !1766, file: !457, line: 2399, type: !13)
!1770 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_old", scope: !1771, file: !457, line: 2401, type: !1772)
!1771 = distinct !DILexicalBlock(scope: !1766, file: !457, line: 2401, column: 8)
!1772 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!1773 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1774, file: !457, line: 2401, type: !1226)
!1774 = distinct !DILexicalBlock(scope: !1771, file: !457, line: 2401, column: 63)
!1775 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1774, file: !457, line: 2401, type: !12)
!1776 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1774, file: !457, line: 2401, type: !1233)
!1777 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1774, file: !457, line: 2401, type: !1236)
!1778 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1779, file: !457, line: 2401, type: !1226)
!1779 = distinct !DILexicalBlock(scope: !1771, file: !457, line: 2401, column: 805)
!1780 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1779, file: !457, line: 2401, type: !12)
!1781 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1779, file: !457, line: 2401, type: !1233)
!1782 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1779, file: !457, line: 2401, type: !1236)
!1783 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_val", scope: !1784, file: !457, line: 2403, type: !1226)
!1784 = distinct !DILexicalBlock(scope: !1771, file: !457, line: 2403, column: 37)
!1785 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1784, file: !457, line: 2403, type: !12)
!1786 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "volatile_data", scope: !1784, file: !457, line: 2403, type: !1233)
!1787 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "order", scope: !1784, file: !457, line: 2403, type: !1236)
!1788 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1789, file: !457, line: 2410, type: !13)
!1789 = distinct !DILexicalBlock(scope: !1790, file: !457, line: 2410, column: 12)
!1790 = distinct !DILexicalBlock(scope: !1791, file: !457, line: 2409, column: 80)
!1791 = distinct !DILexicalBlock(scope: !1766, file: !457, line: 2409, column: 9)
!1792 = !DISubprogram(name: "abstract_issubclass", scope: !457, file: !457, line: 2418, type: !205, isLocal: true, isDefinition: true, scopeLine: 2419, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*)* @abstract_issubclass, variables: !1793)
!1793 = !{!1794, !1795, !1796, !1797, !1798, !1799, !1800, !1805, !1809}
!1794 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "derived", arg: 1, scope: !1792, file: !457, line: 2418, type: !13)
!1795 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cls", arg: 2, scope: !1792, file: !457, line: 2418, type: !13)
!1796 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bases", scope: !1792, file: !457, line: 2420, type: !13)
!1797 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1792, file: !457, line: 2421, type: !19)
!1798 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1792, file: !457, line: 2421, type: !19)
!1799 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "r", scope: !1792, file: !457, line: 2422, type: !52)
!1800 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1801, file: !457, line: 2435, type: !13)
!1801 = distinct !DILexicalBlock(scope: !1802, file: !457, line: 2435, column: 16)
!1802 = distinct !DILexicalBlock(scope: !1803, file: !457, line: 2434, column: 21)
!1803 = distinct !DILexicalBlock(scope: !1804, file: !457, line: 2434, column: 13)
!1804 = distinct !DILexicalBlock(scope: !1792, file: !457, line: 2424, column: 15)
!1805 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1806, file: !457, line: 2441, type: !13)
!1806 = distinct !DILexicalBlock(scope: !1807, file: !457, line: 2441, column: 16)
!1807 = distinct !DILexicalBlock(scope: !1808, file: !457, line: 2439, column: 21)
!1808 = distinct !DILexicalBlock(scope: !1804, file: !457, line: 2439, column: 13)
!1809 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1810, file: !457, line: 2449, type: !13)
!1810 = distinct !DILexicalBlock(scope: !1804, file: !457, line: 2449, column: 12)
!1811 = !DISubprogram(name: "recursive_issubclass", scope: !457, file: !457, line: 2567, type: !205, isLocal: true, isDefinition: true, scopeLine: 2568, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*)* @recursive_issubclass, variables: !1812)
!1812 = !{!1813, !1814}
!1813 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "derived", arg: 1, scope: !1811, file: !457, line: 2567, type: !13)
!1814 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cls", arg: 2, scope: !1811, file: !457, line: 2567, type: !13)
!1815 = !{!1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825}
!1816 = !DIGlobalVariable(name: "PyId___length_hint__", scope: !471, file: !457, line: 84, type: !1289, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @PyObject_LengthHint.PyId___length_hint__)
!1817 = !DIGlobalVariable(name: "PyId___format__", scope: !681, file: !457, line: 667, type: !1289, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @PyObject_Format.PyId___format__)
!1818 = !DIGlobalVariable(name: "PyId___trunc__", scope: !873, file: !457, line: 1254, type: !1289, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @PyNumber_Long.PyId___trunc__)
!1819 = !DIGlobalVariable(name: "PyId_keys", scope: !1189, file: !457, line: 2002, type: !1289, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @PyMapping_Keys.PyId_keys)
!1820 = !DIGlobalVariable(name: "PyId_items", scope: !1196, file: !457, line: 2019, type: !1289, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @PyMapping_Items.PyId_items)
!1821 = !DIGlobalVariable(name: "PyId_values", scope: !1203, file: !457, line: 2036, type: !1289, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @PyMapping_Values.PyId_values)
!1822 = !DIGlobalVariable(name: "PyId___instancecheck__", scope: !1363, file: !457, line: 2518, type: !1289, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @PyObject_IsInstance.PyId___instancecheck__)
!1823 = !DIGlobalVariable(name: "PyId___subclasscheck__", scope: !1426, file: !457, line: 2587, type: !1289, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @PyObject_IsSubclass.PyId___subclasscheck__)
!1824 = !DIGlobalVariable(name: "PyId___class__", scope: !1739, file: !457, line: 2473, type: !1289, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @recursive_isinstance.PyId___class__)
!1825 = !DIGlobalVariable(name: "PyId___bases__", scope: !1766, file: !457, line: 2398, type: !1289, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @abstract_get_bases.PyId___bases__)
!1826 = !{i32 2, !"Dwarf Version", i32 4}
!1827 = !{i32 2, !"Debug Info Version", i32 3}
!1828 = !{!"clang version 3.7.1 (https://github.com/llvm-mirror/clang.git 0dbefa1b83eb90f7a06b5df5df254ce32be3db4b) (git@github.com:kim-yoonseung/llvm.git e8e68907a8135028089af4d924da468e2b7257fa)"}
!1829 = !{!1830, !1830, i64 0}
!1830 = !{!"any pointer", !1831, i64 0}
!1831 = !{!"omnipotent char", !1832, i64 0}
!1832 = !{!"Simple C/C++ TBAA"}
!1833 = !DIExpression()
!1834 = !DILocation(line: 31, column: 25, scope: !456)
!1835 = !DILocation(line: 33, column: 5, scope: !456)
!1836 = !DILocation(line: 33, column: 15, scope: !456)
!1837 = !DILocation(line: 35, column: 9, scope: !1838)
!1838 = distinct !DILexicalBlock(scope: !456, file: !457, line: 35, column: 9)
!1839 = !DILocation(line: 35, column: 11, scope: !1838)
!1840 = !DILocation(line: 35, column: 9, scope: !456)
!1841 = !DILocation(line: 36, column: 16, scope: !1838)
!1842 = !DILocation(line: 36, column: 9, scope: !1838)
!1843 = !DILocation(line: 37, column: 21, scope: !456)
!1844 = !DILocation(line: 37, column: 24, scope: !456)
!1845 = !{!1846, !1830, i64 8}
!1846 = !{!"_object", !1847, i64 0, !1830, i64 8}
!1847 = !{!"long", !1831, i64 0}
!1848 = !DILocation(line: 37, column: 9, scope: !456)
!1849 = !DILocation(line: 37, column: 7, scope: !456)
!1850 = !DILocation(line: 38, column: 21, scope: !456)
!1851 = !DILocation(line: 38, column: 26, scope: !456)
!1852 = !DILocation(line: 38, column: 35, scope: !456)
!1853 = !{!1846, !1847, i64 0}
!1854 = !DILocation(line: 39, column: 12, scope: !456)
!1855 = !DILocation(line: 39, column: 5, scope: !456)
!1856 = !DILocation(line: 40, column: 1, scope: !456)
!1857 = !DILocation(line: 22, column: 10, scope: !1858)
!1858 = distinct !DILexicalBlock(scope: !1542, file: !457, line: 22, column: 9)
!1859 = !DILocation(line: 22, column: 9, scope: !1542)
!1860 = !DILocation(line: 23, column: 25, scope: !1858)
!1861 = !DILocation(line: 23, column: 9, scope: !1858)
!1862 = !DILocation(line: 25, column: 5, scope: !1542)
!1863 = !DILocation(line: 43, column: 25, scope: !461)
!1864 = !DILocation(line: 45, column: 5, scope: !461)
!1865 = !DILocation(line: 45, column: 24, scope: !461)
!1866 = !DILocation(line: 47, column: 9, scope: !1867)
!1867 = distinct !DILexicalBlock(scope: !461, file: !457, line: 47, column: 9)
!1868 = !DILocation(line: 47, column: 11, scope: !1867)
!1869 = !DILocation(line: 47, column: 9, scope: !461)
!1870 = !DILocation(line: 48, column: 9, scope: !1871)
!1871 = distinct !DILexicalBlock(scope: !1867, file: !457, line: 47, column: 26)
!1872 = !DILocation(line: 49, column: 9, scope: !1871)
!1873 = !DILocation(line: 52, column: 9, scope: !461)
!1874 = !DILocation(line: 52, column: 12, scope: !461)
!1875 = !DILocation(line: 52, column: 21, scope: !461)
!1876 = !{!1877, !1830, i64 104}
!1877 = !{!"_typeobject", !1878, i64 0, !1830, i64 24, !1847, i64 32, !1847, i64 40, !1830, i64 48, !1830, i64 56, !1830, i64 64, !1830, i64 72, !1830, i64 80, !1830, i64 88, !1830, i64 96, !1830, i64 104, !1830, i64 112, !1830, i64 120, !1830, i64 128, !1830, i64 136, !1830, i64 144, !1830, i64 152, !1830, i64 160, !1847, i64 168, !1830, i64 176, !1830, i64 184, !1830, i64 192, !1830, i64 200, !1847, i64 208, !1830, i64 216, !1830, i64 224, !1830, i64 232, !1830, i64 240, !1830, i64 248, !1830, i64 256, !1830, i64 264, !1830, i64 272, !1830, i64 280, !1847, i64 288, !1830, i64 296, !1830, i64 304, !1830, i64 312, !1830, i64 320, !1830, i64 328, !1830, i64 336, !1830, i64 344, !1830, i64 352, !1830, i64 360, !1830, i64 368, !1830, i64 376, !1879, i64 384, !1830, i64 392}
!1878 = !{!"", !1846, i64 0, !1847, i64 16}
!1879 = !{!"int", !1831, i64 0}
!1880 = !DILocation(line: 52, column: 7, scope: !461)
!1881 = !DILocation(line: 53, column: 9, scope: !1882)
!1882 = distinct !DILexicalBlock(scope: !461, file: !457, line: 53, column: 9)
!1883 = !DILocation(line: 53, column: 11, scope: !1882)
!1884 = !DILocation(line: 53, column: 14, scope: !1885)
!1885 = !DILexicalBlockFile(scope: !1882, file: !457, discriminator: 1)
!1886 = !DILocation(line: 53, column: 17, scope: !1882)
!1887 = !{!1888, !1830, i64 0}
!1888 = !{!"", !1830, i64 0, !1830, i64 8, !1830, i64 16, !1830, i64 24, !1830, i64 32, !1830, i64 40, !1830, i64 48, !1830, i64 56, !1830, i64 64, !1830, i64 72}
!1889 = !DILocation(line: 53, column: 14, scope: !1882)
!1890 = !DILocation(line: 53, column: 9, scope: !461)
!1891 = !DILocation(line: 54, column: 16, scope: !1882)
!1892 = !DILocation(line: 54, column: 19, scope: !1882)
!1893 = !DILocation(line: 54, column: 29, scope: !1882)
!1894 = !DILocation(line: 54, column: 9, scope: !1882)
!1895 = !DILocation(line: 56, column: 27, scope: !461)
!1896 = !DILocation(line: 56, column: 12, scope: !461)
!1897 = !DILocation(line: 56, column: 5, scope: !461)
!1898 = !DILocation(line: 57, column: 1, scope: !461)
!1899 = !DILocation(line: 1909, column: 26, scope: !1145)
!1900 = !DILocation(line: 1911, column: 5, scope: !1145)
!1901 = !DILocation(line: 1911, column: 23, scope: !1145)
!1902 = !DILocation(line: 1913, column: 9, scope: !1903)
!1903 = distinct !DILexicalBlock(scope: !1145, file: !457, line: 1913, column: 9)
!1904 = !DILocation(line: 1913, column: 11, scope: !1903)
!1905 = !DILocation(line: 1913, column: 9, scope: !1145)
!1906 = !DILocation(line: 1914, column: 9, scope: !1907)
!1907 = distinct !DILexicalBlock(scope: !1903, file: !457, line: 1913, column: 26)
!1908 = !DILocation(line: 1915, column: 9, scope: !1907)
!1909 = !DILocation(line: 1918, column: 9, scope: !1145)
!1910 = !DILocation(line: 1918, column: 12, scope: !1145)
!1911 = !DILocation(line: 1918, column: 21, scope: !1145)
!1912 = !{!1877, !1830, i64 112}
!1913 = !DILocation(line: 1918, column: 7, scope: !1145)
!1914 = !DILocation(line: 1919, column: 9, scope: !1915)
!1915 = distinct !DILexicalBlock(scope: !1145, file: !457, line: 1919, column: 9)
!1916 = !DILocation(line: 1919, column: 11, scope: !1915)
!1917 = !DILocation(line: 1919, column: 14, scope: !1918)
!1918 = !DILexicalBlockFile(scope: !1915, file: !457, discriminator: 1)
!1919 = !DILocation(line: 1919, column: 17, scope: !1915)
!1920 = !{!1921, !1830, i64 0}
!1921 = !{!"", !1830, i64 0, !1830, i64 8, !1830, i64 16}
!1922 = !DILocation(line: 1919, column: 14, scope: !1915)
!1923 = !DILocation(line: 1919, column: 9, scope: !1145)
!1924 = !DILocation(line: 1920, column: 16, scope: !1915)
!1925 = !DILocation(line: 1920, column: 19, scope: !1915)
!1926 = !DILocation(line: 1920, column: 29, scope: !1915)
!1927 = !DILocation(line: 1920, column: 9, scope: !1915)
!1928 = !DILocation(line: 1922, column: 56, scope: !1145)
!1929 = !DILocation(line: 1922, column: 5, scope: !1145)
!1930 = !DILocation(line: 1923, column: 5, scope: !1145)
!1931 = !DILocation(line: 1924, column: 1, scope: !1145)
!1932 = !DILocation(line: 61, column: 27, scope: !465)
!1933 = !DILocation(line: 63, column: 26, scope: !465)
!1934 = !DILocation(line: 63, column: 12, scope: !465)
!1935 = !DILocation(line: 63, column: 5, scope: !465)
!1936 = !DILocation(line: 68, column: 28, scope: !468)
!1937 = !DILocation(line: 69, column: 27, scope: !468)
!1938 = !DILocation(line: 69, column: 32, scope: !468)
!1939 = !DILocation(line: 69, column: 42, scope: !468)
!1940 = !DILocation(line: 69, column: 13, scope: !468)
!1941 = !DILocation(line: 69, column: 57, scope: !468)
!1942 = !DILocation(line: 69, column: 74, scope: !1943)
!1943 = !DILexicalBlockFile(scope: !468, file: !457, discriminator: 1)
!1944 = !DILocation(line: 69, column: 79, scope: !468)
!1945 = !DILocation(line: 69, column: 89, scope: !468)
!1946 = !DILocation(line: 69, column: 105, scope: !468)
!1947 = !DILocation(line: 69, column: 60, scope: !468)
!1948 = !DILocation(line: 69, column: 116, scope: !468)
!1949 = !DILocation(line: 70, column: 24, scope: !468)
!1950 = !DILocation(line: 70, column: 29, scope: !468)
!1951 = !DILocation(line: 70, column: 39, scope: !468)
!1952 = !DILocation(line: 70, column: 10, scope: !468)
!1953 = !DILocation(line: 70, column: 53, scope: !468)
!1954 = !DILocation(line: 70, column: 70, scope: !1943)
!1955 = !DILocation(line: 70, column: 75, scope: !468)
!1956 = !DILocation(line: 70, column: 85, scope: !468)
!1957 = !DILocation(line: 70, column: 100, scope: !468)
!1958 = !DILocation(line: 69, column: 116, scope: !1959)
!1959 = !DILexicalBlockFile(scope: !1960, file: !457, discriminator: 3)
!1960 = !DILexicalBlockFile(scope: !468, file: !457, discriminator: 2)
!1961 = !DILocation(line: 69, column: 5, scope: !468)
!1962 = !DILocation(line: 80, column: 31, scope: !471)
!1963 = !{!1847, !1847, i64 0}
!1964 = !DILocation(line: 80, column: 45, scope: !471)
!1965 = !DILocation(line: 82, column: 5, scope: !471)
!1966 = !DILocation(line: 82, column: 15, scope: !471)
!1967 = !DILocation(line: 82, column: 22, scope: !471)
!1968 = !DILocation(line: 83, column: 5, scope: !471)
!1969 = !DILocation(line: 83, column: 16, scope: !471)
!1970 = !DILocation(line: 85, column: 26, scope: !1971)
!1971 = distinct !DILexicalBlock(scope: !471, file: !457, line: 85, column: 9)
!1972 = !DILocation(line: 85, column: 9, scope: !1971)
!1973 = !DILocation(line: 85, column: 9, scope: !471)
!1974 = !DILocation(line: 86, column: 29, scope: !1975)
!1975 = distinct !DILexicalBlock(scope: !1971, file: !457, line: 85, column: 30)
!1976 = !DILocation(line: 86, column: 15, scope: !1975)
!1977 = !DILocation(line: 86, column: 13, scope: !1975)
!1978 = !DILocation(line: 87, column: 13, scope: !1979)
!1979 = distinct !DILexicalBlock(scope: !1975, file: !457, line: 87, column: 13)
!1980 = !DILocation(line: 87, column: 17, scope: !1979)
!1981 = !DILocation(line: 87, column: 21, scope: !1979)
!1982 = !DILocation(line: 87, column: 24, scope: !1983)
!1983 = !DILexicalBlockFile(scope: !1979, file: !457, discriminator: 1)
!1984 = !DILocation(line: 87, column: 13, scope: !1975)
!1985 = !DILocation(line: 88, column: 41, scope: !1986)
!1986 = distinct !DILexicalBlock(scope: !1987, file: !457, line: 88, column: 17)
!1987 = distinct !DILexicalBlock(scope: !1979, file: !457, line: 87, column: 42)
!1988 = !DILocation(line: 88, column: 18, scope: !1986)
!1989 = !DILocation(line: 88, column: 17, scope: !1987)
!1990 = !DILocation(line: 89, column: 17, scope: !1991)
!1991 = distinct !DILexicalBlock(scope: !1986, file: !457, line: 88, column: 59)
!1992 = !DILocation(line: 91, column: 13, scope: !1987)
!1993 = !DILocation(line: 92, column: 9, scope: !1987)
!1994 = !DILocation(line: 94, column: 20, scope: !1995)
!1995 = distinct !DILexicalBlock(scope: !1979, file: !457, line: 93, column: 14)
!1996 = !DILocation(line: 94, column: 13, scope: !1995)
!1997 = !DILocation(line: 96, column: 5, scope: !1975)
!1998 = !DILocation(line: 97, column: 36, scope: !471)
!1999 = !DILocation(line: 97, column: 12, scope: !471)
!2000 = !DILocation(line: 97, column: 10, scope: !471)
!2001 = !DILocation(line: 98, column: 9, scope: !2002)
!2002 = distinct !DILexicalBlock(scope: !471, file: !457, line: 98, column: 9)
!2003 = !DILocation(line: 98, column: 14, scope: !2002)
!2004 = !DILocation(line: 98, column: 9, scope: !471)
!2005 = !DILocation(line: 99, column: 13, scope: !2006)
!2006 = distinct !DILexicalBlock(scope: !2007, file: !457, line: 99, column: 13)
!2007 = distinct !DILexicalBlock(scope: !2002, file: !457, line: 98, column: 29)
!2008 = !DILocation(line: 99, column: 13, scope: !2007)
!2009 = !DILocation(line: 100, column: 13, scope: !2010)
!2010 = distinct !DILexicalBlock(scope: !2006, file: !457, line: 99, column: 31)
!2011 = !DILocation(line: 102, column: 16, scope: !2007)
!2012 = !DILocation(line: 102, column: 9, scope: !2007)
!2013 = !DILocation(line: 104, column: 43, scope: !471)
!2014 = !DILocation(line: 104, column: 14, scope: !471)
!2015 = !DILocation(line: 104, column: 12, scope: !471)
!2016 = !DILocation(line: 105, column: 5, scope: !471)
!2017 = !DILocation(line: 105, column: 10, scope: !2018)
!2018 = !DILexicalBlockFile(scope: !481, file: !457, discriminator: 1)
!2019 = !DILocation(line: 105, column: 20, scope: !481)
!2020 = !DILocation(line: 105, column: 50, scope: !481)
!2021 = !DILocation(line: 105, column: 65, scope: !2022)
!2022 = distinct !DILexicalBlock(scope: !481, file: !457, line: 105, column: 62)
!2023 = !DILocation(line: 105, column: 82, scope: !2022)
!2024 = !DILocation(line: 105, column: 62, scope: !2022)
!2025 = !DILocation(line: 105, column: 92, scope: !2022)
!2026 = !DILocation(line: 105, column: 62, scope: !481)
!2027 = !DILocation(line: 105, column: 62, scope: !2028)
!2028 = !DILexicalBlockFile(scope: !481, file: !457, discriminator: 2)
!2029 = !DILocation(line: 105, column: 123, scope: !2030)
!2030 = !DILexicalBlockFile(scope: !2022, file: !457, discriminator: 3)
!2031 = !DILocation(line: 105, column: 141, scope: !2022)
!2032 = !DILocation(line: 105, column: 151, scope: !2022)
!2033 = !{!1877, !1830, i64 48}
!2034 = !DILocation(line: 105, column: 176, scope: !2022)
!2035 = !DILocation(line: 105, column: 107, scope: !2022)
!2036 = !DILocation(line: 105, column: 195, scope: !2037)
!2037 = !DILexicalBlockFile(scope: !471, file: !457, discriminator: 4)
!2038 = !DILocation(line: 105, column: 195, scope: !481)
!2039 = !DILocation(line: 105, column: 195, scope: !2040)
!2040 = !DILexicalBlockFile(scope: !481, file: !457, discriminator: 5)
!2041 = !DILocation(line: 106, column: 9, scope: !486)
!2042 = !DILocation(line: 106, column: 16, scope: !486)
!2043 = !DILocation(line: 106, column: 9, scope: !471)
!2044 = !DILocation(line: 107, column: 36, scope: !2045)
!2045 = distinct !DILexicalBlock(scope: !2046, file: !457, line: 107, column: 13)
!2046 = distinct !DILexicalBlock(scope: !486, file: !457, line: 106, column: 31)
!2047 = !DILocation(line: 107, column: 13, scope: !2045)
!2048 = !DILocation(line: 107, column: 13, scope: !2046)
!2049 = !DILocation(line: 108, column: 13, scope: !2050)
!2050 = distinct !DILexicalBlock(scope: !2045, file: !457, line: 107, column: 54)
!2051 = !DILocation(line: 109, column: 20, scope: !2050)
!2052 = !DILocation(line: 109, column: 13, scope: !2050)
!2053 = !DILocation(line: 111, column: 9, scope: !2046)
!2054 = !DILocation(line: 113, column: 14, scope: !485)
!2055 = !DILocation(line: 113, column: 21, scope: !485)
!2056 = !DILocation(line: 113, column: 14, scope: !486)
!2057 = !DILocation(line: 114, column: 9, scope: !484)
!2058 = !DILocation(line: 114, column: 14, scope: !2059)
!2059 = !DILexicalBlockFile(scope: !483, file: !457, discriminator: 1)
!2060 = !DILocation(line: 114, column: 24, scope: !483)
!2061 = !DILocation(line: 114, column: 54, scope: !483)
!2062 = !DILocation(line: 114, column: 71, scope: !2063)
!2063 = distinct !DILexicalBlock(scope: !483, file: !457, line: 114, column: 68)
!2064 = !DILocation(line: 114, column: 88, scope: !2063)
!2065 = !DILocation(line: 114, column: 68, scope: !2063)
!2066 = !DILocation(line: 114, column: 98, scope: !2063)
!2067 = !DILocation(line: 114, column: 68, scope: !483)
!2068 = !DILocation(line: 114, column: 68, scope: !2069)
!2069 = !DILexicalBlockFile(scope: !483, file: !457, discriminator: 2)
!2070 = !DILocation(line: 114, column: 129, scope: !2071)
!2071 = !DILexicalBlockFile(scope: !2063, file: !457, discriminator: 3)
!2072 = !DILocation(line: 114, column: 147, scope: !2063)
!2073 = !DILocation(line: 114, column: 157, scope: !2063)
!2074 = !DILocation(line: 114, column: 182, scope: !2063)
!2075 = !DILocation(line: 114, column: 113, scope: !2063)
!2076 = !DILocation(line: 114, column: 201, scope: !2077)
!2077 = !DILexicalBlockFile(scope: !484, file: !457, discriminator: 4)
!2078 = !DILocation(line: 114, column: 201, scope: !483)
!2079 = !DILocation(line: 114, column: 201, scope: !2080)
!2080 = !DILexicalBlockFile(scope: !483, file: !457, discriminator: 5)
!2081 = !DILocation(line: 115, column: 16, scope: !484)
!2082 = !DILocation(line: 115, column: 9, scope: !484)
!2083 = !DILocation(line: 117, column: 27, scope: !490)
!2084 = !DILocation(line: 117, column: 37, scope: !490)
!2085 = !DILocation(line: 117, column: 48, scope: !490)
!2086 = !{!1877, !1847, i64 168}
!2087 = !DILocation(line: 117, column: 57, scope: !490)
!2088 = !DILocation(line: 117, column: 74, scope: !490)
!2089 = !DILocation(line: 117, column: 9, scope: !471)
!2090 = !DILocation(line: 118, column: 22, scope: !489)
!2091 = !DILocation(line: 119, column: 27, scope: !489)
!2092 = !DILocation(line: 119, column: 37, scope: !489)
!2093 = !DILocation(line: 119, column: 47, scope: !489)
!2094 = !{!1877, !1830, i64 24}
!2095 = !DILocation(line: 118, column: 9, scope: !489)
!2096 = !DILocation(line: 120, column: 9, scope: !489)
!2097 = !DILocation(line: 120, column: 14, scope: !2098)
!2098 = !DILexicalBlockFile(scope: !488, file: !457, discriminator: 1)
!2099 = !DILocation(line: 120, column: 24, scope: !488)
!2100 = !DILocation(line: 120, column: 54, scope: !488)
!2101 = !DILocation(line: 120, column: 71, scope: !2102)
!2102 = distinct !DILexicalBlock(scope: !488, file: !457, line: 120, column: 68)
!2103 = !DILocation(line: 120, column: 88, scope: !2102)
!2104 = !DILocation(line: 120, column: 68, scope: !2102)
!2105 = !DILocation(line: 120, column: 98, scope: !2102)
!2106 = !DILocation(line: 120, column: 68, scope: !488)
!2107 = !DILocation(line: 120, column: 68, scope: !2108)
!2108 = !DILexicalBlockFile(scope: !488, file: !457, discriminator: 2)
!2109 = !DILocation(line: 120, column: 129, scope: !2110)
!2110 = !DILexicalBlockFile(scope: !2102, file: !457, discriminator: 3)
!2111 = !DILocation(line: 120, column: 147, scope: !2102)
!2112 = !DILocation(line: 120, column: 157, scope: !2102)
!2113 = !DILocation(line: 120, column: 182, scope: !2102)
!2114 = !DILocation(line: 120, column: 113, scope: !2102)
!2115 = !DILocation(line: 120, column: 201, scope: !2116)
!2116 = !DILexicalBlockFile(scope: !489, file: !457, discriminator: 4)
!2117 = !DILocation(line: 120, column: 201, scope: !488)
!2118 = !DILocation(line: 120, column: 201, scope: !2119)
!2119 = !DILexicalBlockFile(scope: !488, file: !457, discriminator: 5)
!2120 = !DILocation(line: 121, column: 9, scope: !489)
!2121 = !DILocation(line: 123, column: 28, scope: !471)
!2122 = !DILocation(line: 123, column: 11, scope: !471)
!2123 = !DILocation(line: 123, column: 9, scope: !471)
!2124 = !DILocation(line: 124, column: 5, scope: !471)
!2125 = !DILocation(line: 124, column: 10, scope: !2126)
!2126 = !DILexicalBlockFile(scope: !492, file: !457, discriminator: 1)
!2127 = !DILocation(line: 124, column: 20, scope: !492)
!2128 = !DILocation(line: 124, column: 50, scope: !492)
!2129 = !DILocation(line: 124, column: 67, scope: !2130)
!2130 = distinct !DILexicalBlock(scope: !492, file: !457, line: 124, column: 64)
!2131 = !DILocation(line: 124, column: 84, scope: !2130)
!2132 = !DILocation(line: 124, column: 64, scope: !2130)
!2133 = !DILocation(line: 124, column: 94, scope: !2130)
!2134 = !DILocation(line: 124, column: 64, scope: !492)
!2135 = !DILocation(line: 124, column: 64, scope: !2136)
!2136 = !DILexicalBlockFile(scope: !492, file: !457, discriminator: 2)
!2137 = !DILocation(line: 124, column: 125, scope: !2138)
!2138 = !DILexicalBlockFile(scope: !2130, file: !457, discriminator: 3)
!2139 = !DILocation(line: 124, column: 143, scope: !2130)
!2140 = !DILocation(line: 124, column: 153, scope: !2130)
!2141 = !DILocation(line: 124, column: 178, scope: !2130)
!2142 = !DILocation(line: 124, column: 109, scope: !2130)
!2143 = !DILocation(line: 124, column: 197, scope: !2037)
!2144 = !DILocation(line: 124, column: 197, scope: !492)
!2145 = !DILocation(line: 124, column: 197, scope: !2146)
!2146 = !DILexicalBlockFile(scope: !492, file: !457, discriminator: 5)
!2147 = !DILocation(line: 125, column: 9, scope: !2148)
!2148 = distinct !DILexicalBlock(scope: !471, file: !457, line: 125, column: 9)
!2149 = !DILocation(line: 125, column: 13, scope: !2148)
!2150 = !DILocation(line: 125, column: 17, scope: !2148)
!2151 = !DILocation(line: 125, column: 20, scope: !2152)
!2152 = !DILexicalBlockFile(scope: !2148, file: !457, discriminator: 1)
!2153 = !DILocation(line: 125, column: 9, scope: !471)
!2154 = !DILocation(line: 126, column: 9, scope: !2155)
!2155 = distinct !DILexicalBlock(scope: !2148, file: !457, line: 125, column: 38)
!2156 = !DILocation(line: 128, column: 9, scope: !2157)
!2157 = distinct !DILexicalBlock(scope: !471, file: !457, line: 128, column: 9)
!2158 = !DILocation(line: 128, column: 13, scope: !2157)
!2159 = !DILocation(line: 128, column: 9, scope: !471)
!2160 = !DILocation(line: 129, column: 22, scope: !2161)
!2161 = distinct !DILexicalBlock(scope: !2157, file: !457, line: 128, column: 18)
!2162 = !DILocation(line: 129, column: 9, scope: !2161)
!2163 = !DILocation(line: 130, column: 9, scope: !2161)
!2164 = !DILocation(line: 132, column: 12, scope: !471)
!2165 = !DILocation(line: 132, column: 5, scope: !471)
!2166 = !DILocation(line: 133, column: 1, scope: !471)
!2167 = !DILocation(line: 2348, column: 40, scope: !1353)
!2168 = !DILocation(line: 2350, column: 5, scope: !1353)
!2169 = !DILocation(line: 2350, column: 15, scope: !1353)
!2170 = !DILocation(line: 2350, column: 22, scope: !1353)
!2171 = !DILocation(line: 2351, column: 5, scope: !1353)
!2172 = !DILocation(line: 2351, column: 13, scope: !1353)
!2173 = !DILocation(line: 2353, column: 9, scope: !2174)
!2174 = distinct !DILexicalBlock(scope: !1353, file: !457, line: 2353, column: 9)
!2175 = !DILocation(line: 2353, column: 18, scope: !2174)
!2176 = !DILocation(line: 2353, column: 9, scope: !1353)
!2177 = !DILocation(line: 2354, column: 16, scope: !2174)
!2178 = !DILocation(line: 2354, column: 9, scope: !2174)
!2179 = !DILocation(line: 2357, column: 24, scope: !1353)
!2180 = !DILocation(line: 2357, column: 5, scope: !1353)
!2181 = !DILocation(line: 2358, column: 28, scope: !1353)
!2182 = !DILocation(line: 2358, column: 12, scope: !1353)
!2183 = !DILocation(line: 2358, column: 10, scope: !1353)
!2184 = !DILocation(line: 2359, column: 22, scope: !1353)
!2185 = !DILocation(line: 2359, column: 5, scope: !1353)
!2186 = !DILocation(line: 2360, column: 9, scope: !2187)
!2187 = distinct !DILexicalBlock(scope: !1353, file: !457, line: 2360, column: 9)
!2188 = !DILocation(line: 2360, column: 14, scope: !2187)
!2189 = !DILocation(line: 2360, column: 9, scope: !1353)
!2190 = !DILocation(line: 2361, column: 9, scope: !2187)
!2191 = !DILocation(line: 2362, column: 25, scope: !1353)
!2192 = !DILocation(line: 2362, column: 35, scope: !1353)
!2193 = !DILocation(line: 2362, column: 11, scope: !1353)
!2194 = !DILocation(line: 2362, column: 9, scope: !1353)
!2195 = !DILocation(line: 2363, column: 5, scope: !1353)
!2196 = !DILocation(line: 2363, column: 10, scope: !2197)
!2197 = !DILexicalBlockFile(scope: !1362, file: !457, discriminator: 1)
!2198 = !DILocation(line: 2363, column: 20, scope: !1362)
!2199 = !DILocation(line: 2363, column: 50, scope: !1362)
!2200 = !DILocation(line: 2363, column: 65, scope: !2201)
!2201 = distinct !DILexicalBlock(scope: !1362, file: !457, line: 2363, column: 62)
!2202 = !DILocation(line: 2363, column: 82, scope: !2201)
!2203 = !DILocation(line: 2363, column: 62, scope: !2201)
!2204 = !DILocation(line: 2363, column: 92, scope: !2201)
!2205 = !DILocation(line: 2363, column: 62, scope: !1362)
!2206 = !DILocation(line: 2363, column: 62, scope: !2207)
!2207 = !DILexicalBlockFile(scope: !1362, file: !457, discriminator: 2)
!2208 = !DILocation(line: 2363, column: 123, scope: !2209)
!2209 = !DILexicalBlockFile(scope: !2201, file: !457, discriminator: 3)
!2210 = !DILocation(line: 2363, column: 141, scope: !2201)
!2211 = !DILocation(line: 2363, column: 151, scope: !2201)
!2212 = !DILocation(line: 2363, column: 176, scope: !2201)
!2213 = !DILocation(line: 2363, column: 107, scope: !2201)
!2214 = !DILocation(line: 2363, column: 195, scope: !2215)
!2215 = !DILexicalBlockFile(scope: !1353, file: !457, discriminator: 4)
!2216 = !DILocation(line: 2363, column: 195, scope: !1362)
!2217 = !DILocation(line: 2363, column: 195, scope: !2218)
!2218 = !DILexicalBlockFile(scope: !1362, file: !457, discriminator: 5)
!2219 = !DILocation(line: 2365, column: 12, scope: !1353)
!2220 = !DILocation(line: 2365, column: 5, scope: !1353)
!2221 = !DILocation(line: 2366, column: 1, scope: !1353)
!2222 = !DILocation(line: 136, column: 28, scope: !493)
!2223 = !DILocation(line: 136, column: 41, scope: !493)
!2224 = !DILocation(line: 138, column: 5, scope: !493)
!2225 = !DILocation(line: 138, column: 23, scope: !493)
!2226 = !DILocation(line: 140, column: 9, scope: !2227)
!2227 = distinct !DILexicalBlock(scope: !493, file: !457, line: 140, column: 9)
!2228 = !DILocation(line: 140, column: 11, scope: !2227)
!2229 = !DILocation(line: 140, column: 25, scope: !2227)
!2230 = !DILocation(line: 140, column: 28, scope: !2231)
!2231 = !DILexicalBlockFile(scope: !2227, file: !457, discriminator: 1)
!2232 = !DILocation(line: 140, column: 32, scope: !2227)
!2233 = !DILocation(line: 140, column: 9, scope: !493)
!2234 = !DILocation(line: 141, column: 16, scope: !2227)
!2235 = !DILocation(line: 141, column: 9, scope: !2227)
!2236 = !DILocation(line: 143, column: 9, scope: !493)
!2237 = !DILocation(line: 143, column: 12, scope: !493)
!2238 = !DILocation(line: 143, column: 21, scope: !493)
!2239 = !DILocation(line: 143, column: 7, scope: !493)
!2240 = !DILocation(line: 144, column: 9, scope: !2241)
!2241 = distinct !DILexicalBlock(scope: !493, file: !457, line: 144, column: 9)
!2242 = !DILocation(line: 144, column: 11, scope: !2241)
!2243 = !DILocation(line: 144, column: 14, scope: !2244)
!2244 = !DILexicalBlockFile(scope: !2241, file: !457, discriminator: 1)
!2245 = !DILocation(line: 144, column: 17, scope: !2241)
!2246 = !{!1921, !1830, i64 8}
!2247 = !DILocation(line: 144, column: 14, scope: !2241)
!2248 = !DILocation(line: 144, column: 9, scope: !493)
!2249 = !DILocation(line: 145, column: 16, scope: !2241)
!2250 = !DILocation(line: 145, column: 19, scope: !2241)
!2251 = !DILocation(line: 145, column: 32, scope: !2241)
!2252 = !DILocation(line: 145, column: 35, scope: !2241)
!2253 = !DILocation(line: 145, column: 9, scope: !2241)
!2254 = !DILocation(line: 147, column: 9, scope: !502)
!2255 = !DILocation(line: 147, column: 12, scope: !502)
!2256 = !DILocation(line: 147, column: 21, scope: !502)
!2257 = !DILocation(line: 147, column: 9, scope: !493)
!2258 = !DILocation(line: 148, column: 15, scope: !500)
!2259 = !DILocation(line: 148, column: 21, scope: !500)
!2260 = !DILocation(line: 148, column: 30, scope: !500)
!2261 = !{!1877, !1830, i64 96}
!2262 = !DILocation(line: 148, column: 43, scope: !500)
!2263 = !DILocation(line: 148, column: 57, scope: !500)
!2264 = !DILocation(line: 148, column: 61, scope: !2265)
!2265 = !DILexicalBlockFile(scope: !500, file: !457, discriminator: 1)
!2266 = !DILocation(line: 148, column: 67, scope: !500)
!2267 = !DILocation(line: 148, column: 76, scope: !500)
!2268 = !DILocation(line: 148, column: 90, scope: !500)
!2269 = !{!2270, !1830, i64 264}
!2270 = !{!"", !1830, i64 0, !1830, i64 8, !1830, i64 16, !1830, i64 24, !1830, i64 32, !1830, i64 40, !1830, i64 48, !1830, i64 56, !1830, i64 64, !1830, i64 72, !1830, i64 80, !1830, i64 88, !1830, i64 96, !1830, i64 104, !1830, i64 112, !1830, i64 120, !1830, i64 128, !1830, i64 136, !1830, i64 144, !1830, i64 152, !1830, i64 160, !1830, i64 168, !1830, i64 176, !1830, i64 184, !1830, i64 192, !1830, i64 200, !1830, i64 208, !1830, i64 216, !1830, i64 224, !1830, i64 232, !1830, i64 240, !1830, i64 248, !1830, i64 256, !1830, i64 264}
!2271 = !DILocation(line: 148, column: 99, scope: !500)
!2272 = !DILocation(line: 148, column: 13, scope: !501)
!2273 = !DILocation(line: 149, column: 13, scope: !499)
!2274 = !DILocation(line: 149, column: 24, scope: !499)
!2275 = !DILocation(line: 150, column: 44, scope: !499)
!2276 = !DILocation(line: 150, column: 49, scope: !499)
!2277 = !DILocation(line: 150, column: 25, scope: !499)
!2278 = !DILocation(line: 150, column: 23, scope: !499)
!2279 = !DILocation(line: 151, column: 17, scope: !2280)
!2280 = distinct !DILexicalBlock(scope: !499, file: !457, line: 151, column: 17)
!2281 = !DILocation(line: 151, column: 27, scope: !2280)
!2282 = !DILocation(line: 151, column: 33, scope: !2280)
!2283 = !DILocation(line: 151, column: 36, scope: !2284)
!2284 = !DILexicalBlockFile(scope: !2280, file: !457, discriminator: 1)
!2285 = !DILocation(line: 151, column: 17, scope: !499)
!2286 = !DILocation(line: 152, column: 17, scope: !2280)
!2287 = !DILocation(line: 153, column: 39, scope: !499)
!2288 = !DILocation(line: 153, column: 42, scope: !499)
!2289 = !DILocation(line: 153, column: 20, scope: !499)
!2290 = !DILocation(line: 153, column: 13, scope: !499)
!2291 = !DILocation(line: 154, column: 9, scope: !500)
!2292 = !DILocation(line: 155, column: 18, scope: !2293)
!2293 = distinct !DILexicalBlock(scope: !500, file: !457, line: 155, column: 18)
!2294 = !DILocation(line: 155, column: 21, scope: !2293)
!2295 = !DILocation(line: 155, column: 30, scope: !2293)
!2296 = !DILocation(line: 155, column: 46, scope: !2293)
!2297 = !{!1888, !1830, i64 24}
!2298 = !DILocation(line: 155, column: 18, scope: !500)
!2299 = !DILocation(line: 157, column: 59, scope: !2293)
!2300 = !DILocation(line: 156, column: 20, scope: !2293)
!2301 = !DILocation(line: 156, column: 13, scope: !2293)
!2302 = !DILocation(line: 158, column: 5, scope: !501)
!2303 = !DILocation(line: 160, column: 63, scope: !493)
!2304 = !DILocation(line: 160, column: 12, scope: !493)
!2305 = !DILocation(line: 160, column: 5, scope: !493)
!2306 = !DILocation(line: 161, column: 1, scope: !493)
!2307 = !DILocation(line: 1203, column: 30, scope: !862)
!2308 = !DILocation(line: 1203, column: 46, scope: !862)
!2309 = !DILocation(line: 1205, column: 5, scope: !862)
!2310 = !DILocation(line: 1205, column: 16, scope: !862)
!2311 = !DILocation(line: 1206, column: 5, scope: !862)
!2312 = !DILocation(line: 1206, column: 15, scope: !862)
!2313 = !DILocation(line: 1207, column: 5, scope: !862)
!2314 = !DILocation(line: 1207, column: 15, scope: !862)
!2315 = !DILocation(line: 1207, column: 38, scope: !862)
!2316 = !DILocation(line: 1207, column: 23, scope: !862)
!2317 = !DILocation(line: 1208, column: 9, scope: !2318)
!2318 = distinct !DILexicalBlock(scope: !862, file: !457, line: 1208, column: 9)
!2319 = !DILocation(line: 1208, column: 15, scope: !2318)
!2320 = !DILocation(line: 1208, column: 9, scope: !862)
!2321 = !DILocation(line: 1209, column: 9, scope: !2318)
!2322 = !DILocation(line: 1212, column: 31, scope: !862)
!2323 = !DILocation(line: 1212, column: 14, scope: !862)
!2324 = !DILocation(line: 1212, column: 12, scope: !862)
!2325 = !DILocation(line: 1213, column: 9, scope: !2326)
!2326 = distinct !DILexicalBlock(scope: !862, file: !457, line: 1213, column: 9)
!2327 = !DILocation(line: 1213, column: 16, scope: !2326)
!2328 = !DILocation(line: 1213, column: 22, scope: !2326)
!2329 = !DILocation(line: 1213, column: 36, scope: !2330)
!2330 = !DILexicalBlockFile(scope: !2326, file: !457, discriminator: 1)
!2331 = !DILocation(line: 1213, column: 34, scope: !2326)
!2332 = !DILocation(line: 1213, column: 9, scope: !862)
!2333 = !DILocation(line: 1214, column: 9, scope: !2326)
!2334 = !DILocation(line: 1217, column: 38, scope: !2335)
!2335 = distinct !DILexicalBlock(scope: !862, file: !457, line: 1217, column: 9)
!2336 = !DILocation(line: 1217, column: 46, scope: !2335)
!2337 = !DILocation(line: 1217, column: 10, scope: !2335)
!2338 = !DILocation(line: 1217, column: 9, scope: !862)
!2339 = !DILocation(line: 1218, column: 9, scope: !2335)
!2340 = !DILocation(line: 1220, column: 5, scope: !862)
!2341 = !DILocation(line: 1224, column: 10, scope: !2342)
!2342 = distinct !DILexicalBlock(scope: !862, file: !457, line: 1224, column: 9)
!2343 = !DILocation(line: 1224, column: 9, scope: !862)
!2344 = !DILocation(line: 1229, column: 26, scope: !2345)
!2345 = distinct !DILexicalBlock(scope: !2346, file: !457, line: 1229, column: 13)
!2346 = distinct !DILexicalBlock(scope: !2342, file: !457, line: 1224, column: 15)
!2347 = !DILocation(line: 1229, column: 13, scope: !2345)
!2348 = !DILocation(line: 1229, column: 33, scope: !2345)
!2349 = !DILocation(line: 1229, column: 13, scope: !2346)
!2350 = !DILocation(line: 1230, column: 20, scope: !2345)
!2351 = !DILocation(line: 1230, column: 13, scope: !2345)
!2352 = !DILocation(line: 1232, column: 20, scope: !2345)
!2353 = !DILocation(line: 1233, column: 5, scope: !2346)
!2354 = !DILocation(line: 1236, column: 22, scope: !2355)
!2355 = distinct !DILexicalBlock(scope: !2342, file: !457, line: 1234, column: 10)
!2356 = !DILocation(line: 1238, column: 22, scope: !2355)
!2357 = !DILocation(line: 1238, column: 28, scope: !2355)
!2358 = !DILocation(line: 1238, column: 37, scope: !2355)
!2359 = !DILocation(line: 1236, column: 9, scope: !2355)
!2360 = !DILocation(line: 1242, column: 5, scope: !862)
!2361 = !DILocation(line: 1242, column: 10, scope: !2362)
!2362 = !DILexicalBlockFile(scope: !872, file: !457, discriminator: 1)
!2363 = !DILocation(line: 1242, column: 20, scope: !872)
!2364 = !DILocation(line: 1242, column: 50, scope: !872)
!2365 = !DILocation(line: 1242, column: 66, scope: !2366)
!2366 = distinct !DILexicalBlock(scope: !872, file: !457, line: 1242, column: 63)
!2367 = !DILocation(line: 1242, column: 83, scope: !2366)
!2368 = !DILocation(line: 1242, column: 63, scope: !2366)
!2369 = !DILocation(line: 1242, column: 93, scope: !2366)
!2370 = !DILocation(line: 1242, column: 63, scope: !872)
!2371 = !DILocation(line: 1242, column: 63, scope: !2372)
!2372 = !DILexicalBlockFile(scope: !872, file: !457, discriminator: 2)
!2373 = !DILocation(line: 1242, column: 124, scope: !2374)
!2374 = !DILexicalBlockFile(scope: !2366, file: !457, discriminator: 3)
!2375 = !DILocation(line: 1242, column: 142, scope: !2366)
!2376 = !DILocation(line: 1242, column: 152, scope: !2366)
!2377 = !DILocation(line: 1242, column: 177, scope: !2366)
!2378 = !DILocation(line: 1242, column: 108, scope: !2366)
!2379 = !DILocation(line: 1242, column: 196, scope: !2380)
!2380 = !DILexicalBlockFile(scope: !862, file: !457, discriminator: 4)
!2381 = !DILocation(line: 1242, column: 196, scope: !872)
!2382 = !DILocation(line: 1242, column: 196, scope: !2383)
!2383 = !DILexicalBlockFile(scope: !872, file: !457, discriminator: 5)
!2384 = !DILocation(line: 1243, column: 12, scope: !862)
!2385 = !DILocation(line: 1243, column: 5, scope: !862)
!2386 = !DILocation(line: 1244, column: 1, scope: !862)
!2387 = !DILocation(line: 1499, column: 30, scope: !972)
!2388 = !DILocation(line: 1499, column: 44, scope: !972)
!2389 = !DILocation(line: 1501, column: 5, scope: !972)
!2390 = !DILocation(line: 1501, column: 24, scope: !972)
!2391 = !DILocation(line: 1503, column: 9, scope: !2392)
!2392 = distinct !DILexicalBlock(scope: !972, file: !457, line: 1503, column: 9)
!2393 = !DILocation(line: 1503, column: 11, scope: !2392)
!2394 = !DILocation(line: 1503, column: 9, scope: !972)
!2395 = !DILocation(line: 1504, column: 16, scope: !2392)
!2396 = !DILocation(line: 1504, column: 9, scope: !2392)
!2397 = !DILocation(line: 1506, column: 9, scope: !972)
!2398 = !DILocation(line: 1506, column: 12, scope: !972)
!2399 = !DILocation(line: 1506, column: 21, scope: !972)
!2400 = !DILocation(line: 1506, column: 7, scope: !972)
!2401 = !DILocation(line: 1507, column: 9, scope: !983)
!2402 = !DILocation(line: 1507, column: 11, scope: !983)
!2403 = !DILocation(line: 1507, column: 14, scope: !2404)
!2404 = !DILexicalBlockFile(scope: !983, file: !457, discriminator: 1)
!2405 = !DILocation(line: 1507, column: 17, scope: !983)
!2406 = !DILocation(line: 1507, column: 14, scope: !983)
!2407 = !DILocation(line: 1507, column: 9, scope: !972)
!2408 = !DILocation(line: 1508, column: 13, scope: !981)
!2409 = !DILocation(line: 1508, column: 15, scope: !981)
!2410 = !DILocation(line: 1508, column: 13, scope: !982)
!2411 = !DILocation(line: 1509, column: 17, scope: !979)
!2412 = !DILocation(line: 1509, column: 20, scope: !979)
!2413 = !DILocation(line: 1509, column: 17, scope: !980)
!2414 = !DILocation(line: 1510, column: 17, scope: !978)
!2415 = !DILocation(line: 1510, column: 28, scope: !978)
!2416 = !DILocation(line: 1510, column: 34, scope: !978)
!2417 = !DILocation(line: 1510, column: 37, scope: !978)
!2418 = !DILocation(line: 1510, column: 48, scope: !978)
!2419 = !DILocation(line: 1510, column: 32, scope: !978)
!2420 = !DILocation(line: 1511, column: 21, scope: !2421)
!2421 = distinct !DILexicalBlock(scope: !978, file: !457, line: 1511, column: 21)
!2422 = !DILocation(line: 1511, column: 23, scope: !2421)
!2423 = !DILocation(line: 1511, column: 21, scope: !978)
!2424 = !DILocation(line: 1512, column: 21, scope: !2421)
!2425 = !DILocation(line: 1513, column: 22, scope: !978)
!2426 = !DILocation(line: 1513, column: 19, scope: !978)
!2427 = !DILocation(line: 1514, column: 13, scope: !979)
!2428 = !DILocation(line: 1514, column: 13, scope: !2429)
!2429 = !DILexicalBlockFile(scope: !979, file: !457, discriminator: 1)
!2430 = !DILocation(line: 1514, column: 13, scope: !978)
!2431 = !DILocation(line: 1515, column: 9, scope: !980)
!2432 = !DILocation(line: 1516, column: 16, scope: !982)
!2433 = !DILocation(line: 1516, column: 19, scope: !982)
!2434 = !DILocation(line: 1516, column: 27, scope: !982)
!2435 = !DILocation(line: 1516, column: 30, scope: !982)
!2436 = !DILocation(line: 1516, column: 9, scope: !982)
!2437 = !DILocation(line: 1519, column: 68, scope: !972)
!2438 = !DILocation(line: 1519, column: 12, scope: !972)
!2439 = !DILocation(line: 1519, column: 5, scope: !972)
!2440 = !DILocation(line: 1520, column: 1, scope: !972)
!2441 = !DILocation(line: 13, column: 24, scope: !1546)
!2442 = !DILocation(line: 13, column: 39, scope: !1546)
!2443 = !DILocation(line: 15, column: 18, scope: !1546)
!2444 = !DILocation(line: 15, column: 35, scope: !1546)
!2445 = !DILocation(line: 15, column: 40, scope: !1546)
!2446 = !DILocation(line: 15, column: 45, scope: !1546)
!2447 = !DILocation(line: 15, column: 54, scope: !1546)
!2448 = !DILocation(line: 15, column: 5, scope: !1546)
!2449 = !DILocation(line: 16, column: 5, scope: !1546)
!2450 = !DILocation(line: 164, column: 28, scope: !503)
!2451 = !DILocation(line: 164, column: 41, scope: !503)
!2452 = !DILocation(line: 164, column: 56, scope: !503)
!2453 = !DILocation(line: 166, column: 5, scope: !503)
!2454 = !DILocation(line: 166, column: 23, scope: !503)
!2455 = !DILocation(line: 168, column: 9, scope: !2456)
!2456 = distinct !DILexicalBlock(scope: !503, file: !457, line: 168, column: 9)
!2457 = !DILocation(line: 168, column: 11, scope: !2456)
!2458 = !DILocation(line: 168, column: 25, scope: !2456)
!2459 = !DILocation(line: 168, column: 28, scope: !2460)
!2460 = !DILexicalBlockFile(scope: !2456, file: !457, discriminator: 1)
!2461 = !DILocation(line: 168, column: 32, scope: !2456)
!2462 = !DILocation(line: 168, column: 46, scope: !2456)
!2463 = !DILocation(line: 168, column: 49, scope: !2464)
!2464 = !DILexicalBlockFile(scope: !2456, file: !457, discriminator: 2)
!2465 = !DILocation(line: 168, column: 55, scope: !2456)
!2466 = !DILocation(line: 168, column: 9, scope: !503)
!2467 = !DILocation(line: 169, column: 9, scope: !2468)
!2468 = distinct !DILexicalBlock(scope: !2456, file: !457, line: 168, column: 70)
!2469 = !DILocation(line: 170, column: 9, scope: !2468)
!2470 = !DILocation(line: 172, column: 9, scope: !503)
!2471 = !DILocation(line: 172, column: 12, scope: !503)
!2472 = !DILocation(line: 172, column: 21, scope: !503)
!2473 = !DILocation(line: 172, column: 7, scope: !503)
!2474 = !DILocation(line: 173, column: 9, scope: !2475)
!2475 = distinct !DILexicalBlock(scope: !503, file: !457, line: 173, column: 9)
!2476 = !DILocation(line: 173, column: 11, scope: !2475)
!2477 = !DILocation(line: 173, column: 14, scope: !2478)
!2478 = !DILexicalBlockFile(scope: !2475, file: !457, discriminator: 1)
!2479 = !DILocation(line: 173, column: 17, scope: !2475)
!2480 = !{!1921, !1830, i64 16}
!2481 = !DILocation(line: 173, column: 14, scope: !2475)
!2482 = !DILocation(line: 173, column: 9, scope: !503)
!2483 = !DILocation(line: 174, column: 16, scope: !2475)
!2484 = !DILocation(line: 174, column: 19, scope: !2475)
!2485 = !DILocation(line: 174, column: 36, scope: !2475)
!2486 = !DILocation(line: 174, column: 39, scope: !2475)
!2487 = !DILocation(line: 174, column: 44, scope: !2475)
!2488 = !DILocation(line: 174, column: 9, scope: !2475)
!2489 = !DILocation(line: 176, column: 9, scope: !513)
!2490 = !DILocation(line: 176, column: 12, scope: !513)
!2491 = !DILocation(line: 176, column: 21, scope: !513)
!2492 = !DILocation(line: 176, column: 9, scope: !503)
!2493 = !DILocation(line: 177, column: 15, scope: !511)
!2494 = !DILocation(line: 177, column: 21, scope: !511)
!2495 = !DILocation(line: 177, column: 30, scope: !511)
!2496 = !DILocation(line: 177, column: 43, scope: !511)
!2497 = !DILocation(line: 177, column: 57, scope: !511)
!2498 = !DILocation(line: 177, column: 61, scope: !2499)
!2499 = !DILexicalBlockFile(scope: !511, file: !457, discriminator: 1)
!2500 = !DILocation(line: 177, column: 67, scope: !511)
!2501 = !DILocation(line: 177, column: 76, scope: !511)
!2502 = !DILocation(line: 177, column: 90, scope: !511)
!2503 = !DILocation(line: 177, column: 99, scope: !511)
!2504 = !DILocation(line: 177, column: 13, scope: !512)
!2505 = !DILocation(line: 178, column: 13, scope: !510)
!2506 = !DILocation(line: 178, column: 24, scope: !510)
!2507 = !DILocation(line: 179, column: 44, scope: !510)
!2508 = !DILocation(line: 179, column: 49, scope: !510)
!2509 = !DILocation(line: 179, column: 25, scope: !510)
!2510 = !DILocation(line: 179, column: 23, scope: !510)
!2511 = !DILocation(line: 180, column: 17, scope: !2512)
!2512 = distinct !DILexicalBlock(scope: !510, file: !457, line: 180, column: 17)
!2513 = !DILocation(line: 180, column: 27, scope: !2512)
!2514 = !DILocation(line: 180, column: 33, scope: !2512)
!2515 = !DILocation(line: 180, column: 36, scope: !2516)
!2516 = !DILexicalBlockFile(scope: !2512, file: !457, discriminator: 1)
!2517 = !DILocation(line: 180, column: 17, scope: !510)
!2518 = !DILocation(line: 181, column: 17, scope: !2512)
!2519 = !DILocation(line: 182, column: 39, scope: !510)
!2520 = !DILocation(line: 182, column: 42, scope: !510)
!2521 = !DILocation(line: 182, column: 53, scope: !510)
!2522 = !DILocation(line: 182, column: 20, scope: !510)
!2523 = !DILocation(line: 182, column: 13, scope: !510)
!2524 = !DILocation(line: 183, column: 9, scope: !511)
!2525 = !DILocation(line: 184, column: 18, scope: !2526)
!2526 = distinct !DILexicalBlock(scope: !511, file: !457, line: 184, column: 18)
!2527 = !DILocation(line: 184, column: 21, scope: !2526)
!2528 = !DILocation(line: 184, column: 30, scope: !2526)
!2529 = !DILocation(line: 184, column: 46, scope: !2526)
!2530 = !{!1888, !1830, i64 40}
!2531 = !DILocation(line: 184, column: 18, scope: !511)
!2532 = !DILocation(line: 186, column: 49, scope: !2533)
!2533 = distinct !DILexicalBlock(scope: !2526, file: !457, line: 184, column: 59)
!2534 = !DILocation(line: 185, column: 13, scope: !2533)
!2535 = !DILocation(line: 187, column: 13, scope: !2533)
!2536 = !DILocation(line: 189, column: 5, scope: !512)
!2537 = !DILocation(line: 191, column: 68, scope: !503)
!2538 = !DILocation(line: 191, column: 5, scope: !503)
!2539 = !DILocation(line: 192, column: 5, scope: !503)
!2540 = !DILocation(line: 193, column: 1, scope: !503)
!2541 = !DILocation(line: 1544, column: 30, scope: !998)
!2542 = !DILocation(line: 1544, column: 44, scope: !998)
!2543 = !DILocation(line: 1544, column: 57, scope: !998)
!2544 = !DILocation(line: 1546, column: 5, scope: !998)
!2545 = !DILocation(line: 1546, column: 24, scope: !998)
!2546 = !DILocation(line: 1548, column: 9, scope: !2547)
!2547 = distinct !DILexicalBlock(scope: !998, file: !457, line: 1548, column: 9)
!2548 = !DILocation(line: 1548, column: 11, scope: !2547)
!2549 = !DILocation(line: 1548, column: 9, scope: !998)
!2550 = !DILocation(line: 1549, column: 9, scope: !2551)
!2551 = distinct !DILexicalBlock(scope: !2547, file: !457, line: 1548, column: 26)
!2552 = !DILocation(line: 1550, column: 9, scope: !2551)
!2553 = !DILocation(line: 1553, column: 9, scope: !998)
!2554 = !DILocation(line: 1553, column: 12, scope: !998)
!2555 = !DILocation(line: 1553, column: 21, scope: !998)
!2556 = !DILocation(line: 1553, column: 7, scope: !998)
!2557 = !DILocation(line: 1554, column: 9, scope: !1010)
!2558 = !DILocation(line: 1554, column: 11, scope: !1010)
!2559 = !DILocation(line: 1554, column: 14, scope: !2560)
!2560 = !DILexicalBlockFile(scope: !1010, file: !457, discriminator: 1)
!2561 = !DILocation(line: 1554, column: 17, scope: !1010)
!2562 = !DILocation(line: 1554, column: 14, scope: !1010)
!2563 = !DILocation(line: 1554, column: 9, scope: !998)
!2564 = !DILocation(line: 1555, column: 13, scope: !1008)
!2565 = !DILocation(line: 1555, column: 15, scope: !1008)
!2566 = !DILocation(line: 1555, column: 13, scope: !1009)
!2567 = !DILocation(line: 1556, column: 17, scope: !1006)
!2568 = !DILocation(line: 1556, column: 20, scope: !1006)
!2569 = !DILocation(line: 1556, column: 17, scope: !1007)
!2570 = !DILocation(line: 1557, column: 17, scope: !1005)
!2571 = !DILocation(line: 1557, column: 28, scope: !1005)
!2572 = !DILocation(line: 1557, column: 34, scope: !1005)
!2573 = !DILocation(line: 1557, column: 37, scope: !1005)
!2574 = !DILocation(line: 1557, column: 48, scope: !1005)
!2575 = !DILocation(line: 1557, column: 32, scope: !1005)
!2576 = !DILocation(line: 1558, column: 21, scope: !2577)
!2577 = distinct !DILexicalBlock(scope: !1005, file: !457, line: 1558, column: 21)
!2578 = !DILocation(line: 1558, column: 23, scope: !2577)
!2579 = !DILocation(line: 1558, column: 21, scope: !1005)
!2580 = !DILocation(line: 1559, column: 21, scope: !2577)
!2581 = !DILocation(line: 1560, column: 22, scope: !1005)
!2582 = !DILocation(line: 1560, column: 19, scope: !1005)
!2583 = !DILocation(line: 1561, column: 13, scope: !1006)
!2584 = !DILocation(line: 1561, column: 13, scope: !2585)
!2585 = !DILexicalBlockFile(scope: !1006, file: !457, discriminator: 1)
!2586 = !DILocation(line: 1561, column: 13, scope: !1005)
!2587 = !DILocation(line: 1562, column: 9, scope: !1007)
!2588 = !DILocation(line: 1563, column: 16, scope: !1009)
!2589 = !DILocation(line: 1563, column: 19, scope: !1009)
!2590 = !DILocation(line: 1563, column: 31, scope: !1009)
!2591 = !DILocation(line: 1563, column: 34, scope: !1009)
!2592 = !DILocation(line: 1563, column: 37, scope: !1009)
!2593 = !DILocation(line: 1563, column: 9, scope: !1009)
!2594 = !DILocation(line: 1566, column: 68, scope: !998)
!2595 = !DILocation(line: 1566, column: 5, scope: !998)
!2596 = !DILocation(line: 1567, column: 5, scope: !998)
!2597 = !DILocation(line: 1568, column: 1, scope: !998)
!2598 = !DILocation(line: 196, column: 28, scope: !514)
!2599 = !DILocation(line: 196, column: 41, scope: !514)
!2600 = !DILocation(line: 198, column: 5, scope: !514)
!2601 = !DILocation(line: 198, column: 23, scope: !514)
!2602 = !DILocation(line: 200, column: 9, scope: !2603)
!2603 = distinct !DILexicalBlock(scope: !514, file: !457, line: 200, column: 9)
!2604 = !DILocation(line: 200, column: 11, scope: !2603)
!2605 = !DILocation(line: 200, column: 25, scope: !2603)
!2606 = !DILocation(line: 200, column: 28, scope: !2607)
!2607 = !DILexicalBlockFile(scope: !2603, file: !457, discriminator: 1)
!2608 = !DILocation(line: 200, column: 32, scope: !2603)
!2609 = !DILocation(line: 200, column: 9, scope: !514)
!2610 = !DILocation(line: 201, column: 9, scope: !2611)
!2611 = distinct !DILexicalBlock(scope: !2603, file: !457, line: 200, column: 47)
!2612 = !DILocation(line: 202, column: 9, scope: !2611)
!2613 = !DILocation(line: 204, column: 9, scope: !514)
!2614 = !DILocation(line: 204, column: 12, scope: !514)
!2615 = !DILocation(line: 204, column: 21, scope: !514)
!2616 = !DILocation(line: 204, column: 7, scope: !514)
!2617 = !DILocation(line: 205, column: 9, scope: !2618)
!2618 = distinct !DILexicalBlock(scope: !514, file: !457, line: 205, column: 9)
!2619 = !DILocation(line: 205, column: 11, scope: !2618)
!2620 = !DILocation(line: 205, column: 14, scope: !2621)
!2621 = !DILexicalBlockFile(scope: !2618, file: !457, discriminator: 1)
!2622 = !DILocation(line: 205, column: 17, scope: !2618)
!2623 = !DILocation(line: 205, column: 14, scope: !2618)
!2624 = !DILocation(line: 205, column: 9, scope: !514)
!2625 = !DILocation(line: 206, column: 16, scope: !2618)
!2626 = !DILocation(line: 206, column: 19, scope: !2618)
!2627 = !DILocation(line: 206, column: 36, scope: !2618)
!2628 = !DILocation(line: 206, column: 39, scope: !2618)
!2629 = !DILocation(line: 206, column: 9, scope: !2618)
!2630 = !DILocation(line: 208, column: 9, scope: !523)
!2631 = !DILocation(line: 208, column: 12, scope: !523)
!2632 = !DILocation(line: 208, column: 21, scope: !523)
!2633 = !DILocation(line: 208, column: 9, scope: !514)
!2634 = !DILocation(line: 209, column: 15, scope: !521)
!2635 = !DILocation(line: 209, column: 21, scope: !521)
!2636 = !DILocation(line: 209, column: 30, scope: !521)
!2637 = !DILocation(line: 209, column: 43, scope: !521)
!2638 = !DILocation(line: 209, column: 57, scope: !521)
!2639 = !DILocation(line: 209, column: 61, scope: !2640)
!2640 = !DILexicalBlockFile(scope: !521, file: !457, discriminator: 1)
!2641 = !DILocation(line: 209, column: 67, scope: !521)
!2642 = !DILocation(line: 209, column: 76, scope: !521)
!2643 = !DILocation(line: 209, column: 90, scope: !521)
!2644 = !DILocation(line: 209, column: 99, scope: !521)
!2645 = !DILocation(line: 209, column: 13, scope: !522)
!2646 = !DILocation(line: 210, column: 13, scope: !520)
!2647 = !DILocation(line: 210, column: 24, scope: !520)
!2648 = !DILocation(line: 211, column: 44, scope: !520)
!2649 = !DILocation(line: 211, column: 49, scope: !520)
!2650 = !DILocation(line: 211, column: 25, scope: !520)
!2651 = !DILocation(line: 211, column: 23, scope: !520)
!2652 = !DILocation(line: 212, column: 17, scope: !2653)
!2653 = distinct !DILexicalBlock(scope: !520, file: !457, line: 212, column: 17)
!2654 = !DILocation(line: 212, column: 27, scope: !2653)
!2655 = !DILocation(line: 212, column: 33, scope: !2653)
!2656 = !DILocation(line: 212, column: 36, scope: !2657)
!2657 = !DILexicalBlockFile(scope: !2653, file: !457, discriminator: 1)
!2658 = !DILocation(line: 212, column: 17, scope: !520)
!2659 = !DILocation(line: 213, column: 17, scope: !2653)
!2660 = !DILocation(line: 214, column: 39, scope: !520)
!2661 = !DILocation(line: 214, column: 42, scope: !520)
!2662 = !DILocation(line: 214, column: 20, scope: !520)
!2663 = !DILocation(line: 214, column: 13, scope: !520)
!2664 = !DILocation(line: 215, column: 9, scope: !521)
!2665 = !DILocation(line: 216, column: 18, scope: !2666)
!2666 = distinct !DILexicalBlock(scope: !521, file: !457, line: 216, column: 18)
!2667 = !DILocation(line: 216, column: 21, scope: !2666)
!2668 = !DILocation(line: 216, column: 30, scope: !2666)
!2669 = !DILocation(line: 216, column: 46, scope: !2666)
!2670 = !DILocation(line: 216, column: 18, scope: !521)
!2671 = !DILocation(line: 218, column: 49, scope: !2672)
!2672 = distinct !DILexicalBlock(scope: !2666, file: !457, line: 216, column: 59)
!2673 = !DILocation(line: 217, column: 13, scope: !2672)
!2674 = !DILocation(line: 219, column: 13, scope: !2672)
!2675 = !DILocation(line: 221, column: 5, scope: !522)
!2676 = !DILocation(line: 223, column: 66, scope: !514)
!2677 = !DILocation(line: 223, column: 5, scope: !514)
!2678 = !DILocation(line: 224, column: 5, scope: !514)
!2679 = !DILocation(line: 225, column: 1, scope: !514)
!2680 = !DILocation(line: 1571, column: 30, scope: !1011)
!2681 = !DILocation(line: 1571, column: 44, scope: !1011)
!2682 = !DILocation(line: 1573, column: 5, scope: !1011)
!2683 = !DILocation(line: 1573, column: 24, scope: !1011)
!2684 = !DILocation(line: 1575, column: 9, scope: !2685)
!2685 = distinct !DILexicalBlock(scope: !1011, file: !457, line: 1575, column: 9)
!2686 = !DILocation(line: 1575, column: 11, scope: !2685)
!2687 = !DILocation(line: 1575, column: 9, scope: !1011)
!2688 = !DILocation(line: 1576, column: 9, scope: !2689)
!2689 = distinct !DILexicalBlock(scope: !2685, file: !457, line: 1575, column: 26)
!2690 = !DILocation(line: 1577, column: 9, scope: !2689)
!2691 = !DILocation(line: 1580, column: 9, scope: !1011)
!2692 = !DILocation(line: 1580, column: 12, scope: !1011)
!2693 = !DILocation(line: 1580, column: 21, scope: !1011)
!2694 = !DILocation(line: 1580, column: 7, scope: !1011)
!2695 = !DILocation(line: 1581, column: 9, scope: !1024)
!2696 = !DILocation(line: 1581, column: 11, scope: !1024)
!2697 = !DILocation(line: 1581, column: 14, scope: !2698)
!2698 = !DILexicalBlockFile(scope: !1024, file: !457, discriminator: 1)
!2699 = !DILocation(line: 1581, column: 17, scope: !1024)
!2700 = !DILocation(line: 1581, column: 14, scope: !1024)
!2701 = !DILocation(line: 1581, column: 9, scope: !1011)
!2702 = !DILocation(line: 1582, column: 13, scope: !1022)
!2703 = !DILocation(line: 1582, column: 15, scope: !1022)
!2704 = !DILocation(line: 1582, column: 13, scope: !1023)
!2705 = !DILocation(line: 1583, column: 17, scope: !1020)
!2706 = !DILocation(line: 1583, column: 20, scope: !1020)
!2707 = !DILocation(line: 1583, column: 17, scope: !1021)
!2708 = !DILocation(line: 1584, column: 17, scope: !1019)
!2709 = !DILocation(line: 1584, column: 28, scope: !1019)
!2710 = !DILocation(line: 1584, column: 34, scope: !1019)
!2711 = !DILocation(line: 1584, column: 37, scope: !1019)
!2712 = !DILocation(line: 1584, column: 48, scope: !1019)
!2713 = !DILocation(line: 1584, column: 32, scope: !1019)
!2714 = !DILocation(line: 1585, column: 21, scope: !2715)
!2715 = distinct !DILexicalBlock(scope: !1019, file: !457, line: 1585, column: 21)
!2716 = !DILocation(line: 1585, column: 23, scope: !2715)
!2717 = !DILocation(line: 1585, column: 21, scope: !1019)
!2718 = !DILocation(line: 1586, column: 21, scope: !2715)
!2719 = !DILocation(line: 1587, column: 22, scope: !1019)
!2720 = !DILocation(line: 1587, column: 19, scope: !1019)
!2721 = !DILocation(line: 1588, column: 13, scope: !1020)
!2722 = !DILocation(line: 1588, column: 13, scope: !2723)
!2723 = !DILexicalBlockFile(scope: !1020, file: !457, discriminator: 1)
!2724 = !DILocation(line: 1588, column: 13, scope: !1019)
!2725 = !DILocation(line: 1589, column: 9, scope: !1021)
!2726 = !DILocation(line: 1590, column: 16, scope: !1023)
!2727 = !DILocation(line: 1590, column: 19, scope: !1023)
!2728 = !DILocation(line: 1590, column: 31, scope: !1023)
!2729 = !DILocation(line: 1590, column: 34, scope: !1023)
!2730 = !DILocation(line: 1590, column: 9, scope: !1023)
!2731 = !DILocation(line: 1593, column: 65, scope: !1011)
!2732 = !DILocation(line: 1593, column: 5, scope: !1011)
!2733 = !DILocation(line: 1594, column: 5, scope: !1011)
!2734 = !DILocation(line: 1595, column: 1, scope: !1011)
!2735 = !DILocation(line: 228, column: 34, scope: !524)
!2736 = !DILocation(line: 228, column: 49, scope: !524)
!2737 = !DILocation(line: 230, column: 5, scope: !524)
!2738 = !DILocation(line: 230, column: 15, scope: !524)
!2739 = !DILocation(line: 231, column: 5, scope: !524)
!2740 = !DILocation(line: 231, column: 9, scope: !524)
!2741 = !DILocation(line: 233, column: 9, scope: !2742)
!2742 = distinct !DILexicalBlock(scope: !524, file: !457, line: 233, column: 9)
!2743 = !DILocation(line: 233, column: 11, scope: !2742)
!2744 = !DILocation(line: 233, column: 25, scope: !2742)
!2745 = !DILocation(line: 233, column: 28, scope: !2746)
!2746 = !DILexicalBlockFile(scope: !2742, file: !457, discriminator: 1)
!2747 = !DILocation(line: 233, column: 32, scope: !2742)
!2748 = !DILocation(line: 233, column: 9, scope: !524)
!2749 = !DILocation(line: 234, column: 9, scope: !2750)
!2750 = distinct !DILexicalBlock(scope: !2742, file: !457, line: 233, column: 47)
!2751 = !DILocation(line: 235, column: 9, scope: !2750)
!2752 = !DILocation(line: 237, column: 33, scope: !524)
!2753 = !DILocation(line: 237, column: 12, scope: !524)
!2754 = !DILocation(line: 237, column: 10, scope: !524)
!2755 = !DILocation(line: 238, column: 9, scope: !2756)
!2756 = distinct !DILexicalBlock(scope: !524, file: !457, line: 238, column: 9)
!2757 = !DILocation(line: 238, column: 14, scope: !2756)
!2758 = !DILocation(line: 238, column: 9, scope: !524)
!2759 = !DILocation(line: 239, column: 9, scope: !2756)
!2760 = !DILocation(line: 240, column: 28, scope: !524)
!2761 = !DILocation(line: 240, column: 31, scope: !524)
!2762 = !DILocation(line: 240, column: 11, scope: !524)
!2763 = !DILocation(line: 240, column: 9, scope: !524)
!2764 = !{!1879, !1879, i64 0}
!2765 = !DILocation(line: 241, column: 5, scope: !524)
!2766 = !DILocation(line: 241, column: 10, scope: !2767)
!2767 = !DILexicalBlockFile(scope: !533, file: !457, discriminator: 1)
!2768 = !DILocation(line: 241, column: 20, scope: !533)
!2769 = !DILocation(line: 241, column: 50, scope: !533)
!2770 = !DILocation(line: 241, column: 65, scope: !2771)
!2771 = distinct !DILexicalBlock(scope: !533, file: !457, line: 241, column: 62)
!2772 = !DILocation(line: 241, column: 82, scope: !2771)
!2773 = !DILocation(line: 241, column: 62, scope: !2771)
!2774 = !DILocation(line: 241, column: 92, scope: !2771)
!2775 = !DILocation(line: 241, column: 62, scope: !533)
!2776 = !DILocation(line: 241, column: 62, scope: !2777)
!2777 = !DILexicalBlockFile(scope: !533, file: !457, discriminator: 2)
!2778 = !DILocation(line: 241, column: 123, scope: !2779)
!2779 = !DILexicalBlockFile(scope: !2771, file: !457, discriminator: 3)
!2780 = !DILocation(line: 241, column: 141, scope: !2771)
!2781 = !DILocation(line: 241, column: 151, scope: !2771)
!2782 = !DILocation(line: 241, column: 176, scope: !2771)
!2783 = !DILocation(line: 241, column: 107, scope: !2771)
!2784 = !DILocation(line: 241, column: 195, scope: !2785)
!2785 = !DILexicalBlockFile(scope: !524, file: !457, discriminator: 4)
!2786 = !DILocation(line: 241, column: 195, scope: !533)
!2787 = !DILocation(line: 241, column: 195, scope: !2788)
!2788 = !DILexicalBlockFile(scope: !533, file: !457, discriminator: 5)
!2789 = !DILocation(line: 242, column: 12, scope: !524)
!2790 = !DILocation(line: 242, column: 5, scope: !524)
!2791 = !DILocation(line: 243, column: 1, scope: !524)
!2792 = !DILocation(line: 249, column: 33, scope: !534)
!2793 = !DILocation(line: 250, column: 36, scope: !534)
!2794 = !DILocation(line: 251, column: 35, scope: !534)
!2795 = !DILocation(line: 253, column: 5, scope: !534)
!2796 = !DILocation(line: 253, column: 20, scope: !534)
!2797 = !DILocation(line: 254, column: 5, scope: !534)
!2798 = !DILocation(line: 254, column: 15, scope: !534)
!2799 = !DILocation(line: 256, column: 9, scope: !2800)
!2800 = distinct !DILexicalBlock(scope: !534, file: !457, line: 256, column: 9)
!2801 = !DILocation(line: 256, column: 13, scope: !2800)
!2802 = !DILocation(line: 256, column: 27, scope: !2800)
!2803 = !DILocation(line: 256, column: 30, scope: !2804)
!2804 = !DILexicalBlockFile(scope: !2800, file: !457, discriminator: 1)
!2805 = !DILocation(line: 256, column: 37, scope: !2800)
!2806 = !DILocation(line: 256, column: 51, scope: !2800)
!2807 = !DILocation(line: 256, column: 54, scope: !2808)
!2808 = !DILexicalBlockFile(scope: !2800, file: !457, discriminator: 2)
!2809 = !DILocation(line: 256, column: 65, scope: !2800)
!2810 = !DILocation(line: 256, column: 9, scope: !534)
!2811 = !DILocation(line: 257, column: 9, scope: !2812)
!2812 = distinct !DILexicalBlock(scope: !2800, file: !457, line: 256, column: 80)
!2813 = !DILocation(line: 258, column: 9, scope: !2812)
!2814 = !DILocation(line: 260, column: 10, scope: !534)
!2815 = !DILocation(line: 260, column: 15, scope: !534)
!2816 = !DILocation(line: 260, column: 24, scope: !534)
!2817 = !{!1877, !1830, i64 160}
!2818 = !DILocation(line: 260, column: 8, scope: !534)
!2819 = !DILocation(line: 261, column: 9, scope: !2820)
!2820 = distinct !DILexicalBlock(scope: !534, file: !457, line: 261, column: 9)
!2821 = !DILocation(line: 261, column: 12, scope: !2820)
!2822 = !DILocation(line: 261, column: 26, scope: !2820)
!2823 = !DILocation(line: 261, column: 29, scope: !2824)
!2824 = !DILexicalBlockFile(scope: !2820, file: !457, discriminator: 1)
!2825 = !DILocation(line: 261, column: 33, scope: !2820)
!2826 = !{!2827, !1830, i64 0}
!2827 = !{!"", !1830, i64 0, !1830, i64 8}
!2828 = !DILocation(line: 261, column: 46, scope: !2820)
!2829 = !DILocation(line: 261, column: 9, scope: !534)
!2830 = !DILocation(line: 262, column: 25, scope: !2831)
!2831 = distinct !DILexicalBlock(scope: !2820, file: !457, line: 261, column: 61)
!2832 = !DILocation(line: 262, column: 9, scope: !2831)
!2833 = !DILocation(line: 265, column: 9, scope: !2831)
!2834 = !DILocation(line: 267, column: 11, scope: !2835)
!2835 = distinct !DILexicalBlock(scope: !534, file: !457, line: 267, column: 9)
!2836 = !DILocation(line: 267, column: 15, scope: !2835)
!2837 = !DILocation(line: 267, column: 29, scope: !2835)
!2838 = !DILocation(line: 267, column: 9, scope: !2835)
!2839 = !DILocation(line: 267, column: 9, scope: !534)
!2840 = !DILocation(line: 267, column: 45, scope: !2841)
!2841 = !DILexicalBlockFile(scope: !2835, file: !457, discriminator: 1)
!2842 = !DILocation(line: 267, column: 45, scope: !2835)
!2843 = !DILocation(line: 269, column: 20, scope: !534)
!2844 = !{!2845, !1830, i64 0}
!2845 = !{!"bufferinfo", !1830, i64 0, !1830, i64 8, !1847, i64 16, !1847, i64 24, !1879, i64 32, !1879, i64 36, !1830, i64 40, !1830, i64 48, !1830, i64 56, !1830, i64 64, !1830, i64 72}
!2846 = !DILocation(line: 269, column: 6, scope: !534)
!2847 = !DILocation(line: 269, column: 13, scope: !534)
!2848 = !DILocation(line: 270, column: 24, scope: !534)
!2849 = !{!2845, !1847, i64 16}
!2850 = !DILocation(line: 270, column: 6, scope: !534)
!2851 = !DILocation(line: 270, column: 17, scope: !534)
!2852 = !DILocation(line: 271, column: 9, scope: !2853)
!2853 = distinct !DILexicalBlock(scope: !534, file: !457, line: 271, column: 9)
!2854 = !DILocation(line: 271, column: 13, scope: !2853)
!2855 = !{!2827, !1830, i64 8}
!2856 = !DILocation(line: 271, column: 30, scope: !2853)
!2857 = !DILocation(line: 271, column: 9, scope: !534)
!2858 = !DILocation(line: 272, column: 11, scope: !2853)
!2859 = !DILocation(line: 272, column: 15, scope: !2853)
!2860 = !DILocation(line: 272, column: 33, scope: !2853)
!2861 = !DILocation(line: 272, column: 9, scope: !2853)
!2862 = !DILocation(line: 273, column: 5, scope: !534)
!2863 = !DILocation(line: 273, column: 10, scope: !2864)
!2864 = !DILexicalBlockFile(scope: !545, file: !457, discriminator: 1)
!2865 = !DILocation(line: 273, column: 20, scope: !545)
!2866 = !DILocation(line: 273, column: 56, scope: !545)
!2867 = !{!2845, !1830, i64 8}
!2868 = !DILocation(line: 273, column: 66, scope: !548)
!2869 = !DILocation(line: 273, column: 82, scope: !548)
!2870 = !DILocation(line: 273, column: 66, scope: !545)
!2871 = !DILocation(line: 273, column: 97, scope: !2872)
!2872 = !DILexicalBlockFile(scope: !548, file: !457, discriminator: 2)
!2873 = !DILocation(line: 273, column: 102, scope: !2874)
!2874 = !DILexicalBlockFile(scope: !547, file: !457, discriminator: 4)
!2875 = !DILocation(line: 273, column: 112, scope: !547)
!2876 = !DILocation(line: 273, column: 142, scope: !547)
!2877 = !DILocation(line: 273, column: 168, scope: !2878)
!2878 = distinct !DILexicalBlock(scope: !547, file: !457, line: 273, column: 165)
!2879 = !DILocation(line: 273, column: 185, scope: !2878)
!2880 = !DILocation(line: 273, column: 165, scope: !2878)
!2881 = !DILocation(line: 273, column: 195, scope: !2878)
!2882 = !DILocation(line: 273, column: 165, scope: !547)
!2883 = !DILocation(line: 273, column: 165, scope: !2884)
!2884 = !DILexicalBlockFile(scope: !547, file: !457, discriminator: 5)
!2885 = !DILocation(line: 273, column: 226, scope: !2886)
!2886 = !DILexicalBlockFile(scope: !2878, file: !457, discriminator: 6)
!2887 = !DILocation(line: 273, column: 244, scope: !2878)
!2888 = !DILocation(line: 273, column: 254, scope: !2878)
!2889 = !DILocation(line: 273, column: 279, scope: !2878)
!2890 = !DILocation(line: 273, column: 210, scope: !2878)
!2891 = !DILocation(line: 273, column: 298, scope: !2892)
!2892 = !DILexicalBlockFile(scope: !548, file: !457, discriminator: 7)
!2893 = !DILocation(line: 273, column: 298, scope: !547)
!2894 = !DILocation(line: 273, column: 298, scope: !2895)
!2895 = !DILexicalBlockFile(scope: !547, file: !457, discriminator: 8)
!2896 = !DILocation(line: 273, column: 298, scope: !2897)
!2897 = !DILexicalBlockFile(scope: !547, file: !457, discriminator: 9)
!2898 = !DILocation(line: 273, column: 311, scope: !2899)
!2899 = !DILexicalBlockFile(scope: !2900, file: !457, discriminator: 10)
!2900 = !DILexicalBlockFile(scope: !534, file: !457, discriminator: 3)
!2901 = !DILocation(line: 273, column: 311, scope: !545)
!2902 = !DILocation(line: 273, column: 311, scope: !2903)
!2903 = !DILexicalBlockFile(scope: !545, file: !457, discriminator: 11)
!2904 = !DILocation(line: 274, column: 5, scope: !534)
!2905 = !DILocation(line: 275, column: 1, scope: !534)
!2906 = !DILocation(line: 278, column: 36, scope: !549)
!2907 = !DILocation(line: 280, column: 5, scope: !549)
!2908 = !DILocation(line: 280, column: 20, scope: !549)
!2909 = !DILocation(line: 280, column: 25, scope: !549)
!2910 = !DILocation(line: 280, column: 30, scope: !549)
!2911 = !DILocation(line: 280, column: 39, scope: !549)
!2912 = !DILocation(line: 281, column: 5, scope: !549)
!2913 = !DILocation(line: 281, column: 15, scope: !549)
!2914 = !DILocation(line: 283, column: 9, scope: !2915)
!2915 = distinct !DILexicalBlock(scope: !549, file: !457, line: 283, column: 9)
!2916 = !DILocation(line: 283, column: 12, scope: !2915)
!2917 = !DILocation(line: 283, column: 26, scope: !2915)
!2918 = !DILocation(line: 284, column: 9, scope: !2915)
!2919 = !DILocation(line: 284, column: 13, scope: !2915)
!2920 = !DILocation(line: 284, column: 26, scope: !2915)
!2921 = !DILocation(line: 283, column: 9, scope: !549)
!2922 = !DILocation(line: 285, column: 9, scope: !2915)
!2923 = !DILocation(line: 286, column: 11, scope: !2924)
!2924 = distinct !DILexicalBlock(scope: !549, file: !457, line: 286, column: 9)
!2925 = !DILocation(line: 286, column: 15, scope: !2924)
!2926 = !DILocation(line: 286, column: 29, scope: !2924)
!2927 = !DILocation(line: 286, column: 9, scope: !2924)
!2928 = !DILocation(line: 286, column: 44, scope: !2924)
!2929 = !DILocation(line: 286, column: 9, scope: !549)
!2930 = !DILocation(line: 287, column: 9, scope: !2931)
!2931 = distinct !DILexicalBlock(scope: !2924, file: !457, line: 286, column: 51)
!2932 = !DILocation(line: 288, column: 9, scope: !2931)
!2933 = !DILocation(line: 290, column: 5, scope: !549)
!2934 = !DILocation(line: 291, column: 5, scope: !549)
!2935 = !DILocation(line: 292, column: 1, scope: !549)
!2936 = !DILocation(line: 652, column: 29, scope: !670)
!2937 = !DILocation(line: 654, column: 5, scope: !670)
!2938 = !DILocation(line: 654, column: 15, scope: !670)
!2939 = !DILocation(line: 654, column: 21, scope: !670)
!2940 = !DILocation(line: 654, column: 27, scope: !670)
!2941 = !DILocation(line: 655, column: 9, scope: !2942)
!2942 = distinct !DILexicalBlock(scope: !670, file: !457, line: 655, column: 9)
!2943 = !DILocation(line: 655, column: 13, scope: !2942)
!2944 = !DILocation(line: 655, column: 30, scope: !2945)
!2945 = !DILexicalBlockFile(scope: !2942, file: !457, discriminator: 1)
!2946 = !DILocation(line: 655, column: 37, scope: !2942)
!2947 = !DILocation(line: 655, column: 47, scope: !2942)
!2948 = !DILocation(line: 655, column: 16, scope: !2942)
!2949 = !DILocation(line: 655, column: 60, scope: !2942)
!2950 = !DILocation(line: 655, column: 77, scope: !2951)
!2951 = !DILexicalBlockFile(scope: !2942, file: !457, discriminator: 2)
!2952 = !DILocation(line: 655, column: 84, scope: !2942)
!2953 = !DILocation(line: 655, column: 94, scope: !2942)
!2954 = !DILocation(line: 655, column: 108, scope: !2942)
!2955 = !DILocation(line: 655, column: 63, scope: !2942)
!2956 = !DILocation(line: 655, column: 9, scope: !670)
!2957 = !DILocation(line: 656, column: 23, scope: !2942)
!2958 = !DILocation(line: 656, column: 30, scope: !2942)
!2959 = !DILocation(line: 656, column: 40, scope: !2942)
!2960 = !DILocation(line: 656, column: 54, scope: !2942)
!2961 = !DILocation(line: 656, column: 71, scope: !2942)
!2962 = !DILocation(line: 656, column: 76, scope: !2942)
!2963 = !DILocation(line: 656, column: 9, scope: !2942)
!2964 = !DILocation(line: 657, column: 5, scope: !670)
!2965 = !DILocation(line: 657, column: 10, scope: !2966)
!2966 = !DILexicalBlockFile(scope: !677, file: !457, discriminator: 1)
!2967 = !DILocation(line: 657, column: 20, scope: !677)
!2968 = !DILocation(line: 657, column: 51, scope: !677)
!2969 = !DILocation(line: 657, column: 61, scope: !680)
!2970 = !DILocation(line: 657, column: 77, scope: !680)
!2971 = !DILocation(line: 657, column: 61, scope: !677)
!2972 = !DILocation(line: 657, column: 92, scope: !2973)
!2973 = !DILexicalBlockFile(scope: !680, file: !457, discriminator: 2)
!2974 = !DILocation(line: 657, column: 97, scope: !2975)
!2975 = !DILexicalBlockFile(scope: !679, file: !457, discriminator: 4)
!2976 = !DILocation(line: 657, column: 107, scope: !679)
!2977 = !DILocation(line: 657, column: 137, scope: !679)
!2978 = !DILocation(line: 657, column: 163, scope: !2979)
!2979 = distinct !DILexicalBlock(scope: !679, file: !457, line: 657, column: 160)
!2980 = !DILocation(line: 657, column: 180, scope: !2979)
!2981 = !DILocation(line: 657, column: 160, scope: !2979)
!2982 = !DILocation(line: 657, column: 190, scope: !2979)
!2983 = !DILocation(line: 657, column: 160, scope: !679)
!2984 = !DILocation(line: 657, column: 160, scope: !2985)
!2985 = !DILexicalBlockFile(scope: !679, file: !457, discriminator: 5)
!2986 = !DILocation(line: 657, column: 221, scope: !2987)
!2987 = !DILexicalBlockFile(scope: !2979, file: !457, discriminator: 6)
!2988 = !DILocation(line: 657, column: 239, scope: !2979)
!2989 = !DILocation(line: 657, column: 249, scope: !2979)
!2990 = !DILocation(line: 657, column: 274, scope: !2979)
!2991 = !DILocation(line: 657, column: 205, scope: !2979)
!2992 = !DILocation(line: 657, column: 293, scope: !2993)
!2993 = !DILexicalBlockFile(scope: !680, file: !457, discriminator: 7)
!2994 = !DILocation(line: 657, column: 293, scope: !679)
!2995 = !DILocation(line: 657, column: 293, scope: !2996)
!2996 = !DILexicalBlockFile(scope: !679, file: !457, discriminator: 8)
!2997 = !DILocation(line: 657, column: 293, scope: !2998)
!2998 = !DILexicalBlockFile(scope: !679, file: !457, discriminator: 9)
!2999 = !DILocation(line: 657, column: 306, scope: !3000)
!3000 = !DILexicalBlockFile(scope: !3001, file: !457, discriminator: 10)
!3001 = !DILexicalBlockFile(scope: !670, file: !457, discriminator: 3)
!3002 = !DILocation(line: 657, column: 306, scope: !677)
!3003 = !DILocation(line: 657, column: 306, scope: !3004)
!3004 = !DILexicalBlockFile(scope: !677, file: !457, discriminator: 11)
!3005 = !DILocation(line: 658, column: 5, scope: !670)
!3006 = !DILocation(line: 658, column: 11, scope: !670)
!3007 = !DILocation(line: 658, column: 15, scope: !670)
!3008 = !DILocation(line: 659, column: 1, scope: !670)
!3009 = !DILocation(line: 294, column: 37, scope: !554)
!3010 = !DILocation(line: 295, column: 40, scope: !554)
!3011 = !DILocation(line: 296, column: 39, scope: !554)
!3012 = !DILocation(line: 298, column: 5, scope: !554)
!3013 = !DILocation(line: 298, column: 20, scope: !554)
!3014 = !DILocation(line: 299, column: 5, scope: !554)
!3015 = !DILocation(line: 299, column: 15, scope: !554)
!3016 = !DILocation(line: 301, column: 9, scope: !3017)
!3017 = distinct !DILexicalBlock(scope: !554, file: !457, line: 301, column: 9)
!3018 = !DILocation(line: 301, column: 13, scope: !3017)
!3019 = !DILocation(line: 301, column: 27, scope: !3017)
!3020 = !DILocation(line: 301, column: 30, scope: !3021)
!3021 = !DILexicalBlockFile(scope: !3017, file: !457, discriminator: 1)
!3022 = !DILocation(line: 301, column: 37, scope: !3017)
!3023 = !DILocation(line: 301, column: 51, scope: !3017)
!3024 = !DILocation(line: 301, column: 54, scope: !3025)
!3025 = !DILexicalBlockFile(scope: !3017, file: !457, discriminator: 2)
!3026 = !DILocation(line: 301, column: 65, scope: !3017)
!3027 = !DILocation(line: 301, column: 9, scope: !554)
!3028 = !DILocation(line: 302, column: 9, scope: !3029)
!3029 = distinct !DILexicalBlock(scope: !3017, file: !457, line: 301, column: 80)
!3030 = !DILocation(line: 303, column: 9, scope: !3029)
!3031 = !DILocation(line: 305, column: 10, scope: !554)
!3032 = !DILocation(line: 305, column: 15, scope: !554)
!3033 = !DILocation(line: 305, column: 24, scope: !554)
!3034 = !DILocation(line: 305, column: 8, scope: !554)
!3035 = !DILocation(line: 306, column: 9, scope: !3036)
!3036 = distinct !DILexicalBlock(scope: !554, file: !457, line: 306, column: 9)
!3037 = !DILocation(line: 306, column: 12, scope: !3036)
!3038 = !DILocation(line: 306, column: 26, scope: !3036)
!3039 = !DILocation(line: 307, column: 9, scope: !3036)
!3040 = !DILocation(line: 307, column: 13, scope: !3036)
!3041 = !DILocation(line: 307, column: 26, scope: !3036)
!3042 = !DILocation(line: 306, column: 9, scope: !554)
!3043 = !DILocation(line: 308, column: 25, scope: !3044)
!3044 = distinct !DILexicalBlock(scope: !3036, file: !457, line: 307, column: 41)
!3045 = !DILocation(line: 308, column: 9, scope: !3044)
!3046 = !DILocation(line: 310, column: 9, scope: !3044)
!3047 = !DILocation(line: 313, column: 11, scope: !3048)
!3048 = distinct !DILexicalBlock(scope: !554, file: !457, line: 313, column: 9)
!3049 = !DILocation(line: 313, column: 15, scope: !3048)
!3050 = !DILocation(line: 313, column: 29, scope: !3048)
!3051 = !DILocation(line: 313, column: 9, scope: !3048)
!3052 = !DILocation(line: 313, column: 9, scope: !554)
!3053 = !DILocation(line: 313, column: 45, scope: !3054)
!3054 = !DILexicalBlockFile(scope: !3048, file: !457, discriminator: 1)
!3055 = !DILocation(line: 313, column: 45, scope: !3048)
!3056 = !DILocation(line: 315, column: 20, scope: !554)
!3057 = !DILocation(line: 315, column: 6, scope: !554)
!3058 = !DILocation(line: 315, column: 13, scope: !554)
!3059 = !DILocation(line: 316, column: 24, scope: !554)
!3060 = !DILocation(line: 316, column: 6, scope: !554)
!3061 = !DILocation(line: 316, column: 17, scope: !554)
!3062 = !DILocation(line: 317, column: 9, scope: !3063)
!3063 = distinct !DILexicalBlock(scope: !554, file: !457, line: 317, column: 9)
!3064 = !DILocation(line: 317, column: 13, scope: !3063)
!3065 = !DILocation(line: 317, column: 30, scope: !3063)
!3066 = !DILocation(line: 317, column: 9, scope: !554)
!3067 = !DILocation(line: 318, column: 11, scope: !3063)
!3068 = !DILocation(line: 318, column: 15, scope: !3063)
!3069 = !DILocation(line: 318, column: 33, scope: !3063)
!3070 = !DILocation(line: 318, column: 9, scope: !3063)
!3071 = !DILocation(line: 319, column: 5, scope: !554)
!3072 = !DILocation(line: 319, column: 10, scope: !3073)
!3073 = !DILexicalBlockFile(scope: !567, file: !457, discriminator: 1)
!3074 = !DILocation(line: 319, column: 20, scope: !567)
!3075 = !DILocation(line: 319, column: 56, scope: !567)
!3076 = !DILocation(line: 319, column: 66, scope: !570)
!3077 = !DILocation(line: 319, column: 82, scope: !570)
!3078 = !DILocation(line: 319, column: 66, scope: !567)
!3079 = !DILocation(line: 319, column: 97, scope: !3080)
!3080 = !DILexicalBlockFile(scope: !570, file: !457, discriminator: 2)
!3081 = !DILocation(line: 319, column: 102, scope: !3082)
!3082 = !DILexicalBlockFile(scope: !569, file: !457, discriminator: 4)
!3083 = !DILocation(line: 319, column: 112, scope: !569)
!3084 = !DILocation(line: 319, column: 142, scope: !569)
!3085 = !DILocation(line: 319, column: 168, scope: !3086)
!3086 = distinct !DILexicalBlock(scope: !569, file: !457, line: 319, column: 165)
!3087 = !DILocation(line: 319, column: 185, scope: !3086)
!3088 = !DILocation(line: 319, column: 165, scope: !3086)
!3089 = !DILocation(line: 319, column: 195, scope: !3086)
!3090 = !DILocation(line: 319, column: 165, scope: !569)
!3091 = !DILocation(line: 319, column: 165, scope: !3092)
!3092 = !DILexicalBlockFile(scope: !569, file: !457, discriminator: 5)
!3093 = !DILocation(line: 319, column: 226, scope: !3094)
!3094 = !DILexicalBlockFile(scope: !3086, file: !457, discriminator: 6)
!3095 = !DILocation(line: 319, column: 244, scope: !3086)
!3096 = !DILocation(line: 319, column: 254, scope: !3086)
!3097 = !DILocation(line: 319, column: 279, scope: !3086)
!3098 = !DILocation(line: 319, column: 210, scope: !3086)
!3099 = !DILocation(line: 319, column: 298, scope: !3100)
!3100 = !DILexicalBlockFile(scope: !570, file: !457, discriminator: 7)
!3101 = !DILocation(line: 319, column: 298, scope: !569)
!3102 = !DILocation(line: 319, column: 298, scope: !3103)
!3103 = !DILexicalBlockFile(scope: !569, file: !457, discriminator: 8)
!3104 = !DILocation(line: 319, column: 298, scope: !3105)
!3105 = !DILexicalBlockFile(scope: !569, file: !457, discriminator: 9)
!3106 = !DILocation(line: 319, column: 311, scope: !3107)
!3107 = !DILexicalBlockFile(scope: !3108, file: !457, discriminator: 10)
!3108 = !DILexicalBlockFile(scope: !554, file: !457, discriminator: 3)
!3109 = !DILocation(line: 319, column: 311, scope: !567)
!3110 = !DILocation(line: 319, column: 311, scope: !3111)
!3111 = !DILexicalBlockFile(scope: !567, file: !457, discriminator: 11)
!3112 = !DILocation(line: 320, column: 5, scope: !554)
!3113 = !DILocation(line: 321, column: 1, scope: !554)
!3114 = !DILocation(line: 323, column: 38, scope: !571)
!3115 = !DILocation(line: 324, column: 35, scope: !571)
!3116 = !DILocation(line: 325, column: 40, scope: !571)
!3117 = !DILocation(line: 327, column: 5, scope: !571)
!3118 = !DILocation(line: 327, column: 20, scope: !571)
!3119 = !DILocation(line: 328, column: 5, scope: !571)
!3120 = !DILocation(line: 328, column: 15, scope: !571)
!3121 = !DILocation(line: 330, column: 9, scope: !3122)
!3122 = distinct !DILexicalBlock(scope: !571, file: !457, line: 330, column: 9)
!3123 = !DILocation(line: 330, column: 13, scope: !3122)
!3124 = !DILocation(line: 330, column: 27, scope: !3122)
!3125 = !DILocation(line: 330, column: 30, scope: !3126)
!3126 = !DILexicalBlockFile(scope: !3122, file: !457, discriminator: 1)
!3127 = !DILocation(line: 330, column: 37, scope: !3122)
!3128 = !DILocation(line: 330, column: 51, scope: !3122)
!3129 = !DILocation(line: 330, column: 54, scope: !3130)
!3130 = !DILexicalBlockFile(scope: !3122, file: !457, discriminator: 2)
!3131 = !DILocation(line: 330, column: 65, scope: !3122)
!3132 = !DILocation(line: 330, column: 9, scope: !571)
!3133 = !DILocation(line: 331, column: 9, scope: !3134)
!3134 = distinct !DILexicalBlock(scope: !3122, file: !457, line: 330, column: 80)
!3135 = !DILocation(line: 332, column: 9, scope: !3134)
!3136 = !DILocation(line: 334, column: 10, scope: !571)
!3137 = !DILocation(line: 334, column: 15, scope: !571)
!3138 = !DILocation(line: 334, column: 24, scope: !571)
!3139 = !DILocation(line: 334, column: 8, scope: !571)
!3140 = !DILocation(line: 335, column: 9, scope: !3141)
!3141 = distinct !DILexicalBlock(scope: !571, file: !457, line: 335, column: 9)
!3142 = !DILocation(line: 335, column: 12, scope: !3141)
!3143 = !DILocation(line: 335, column: 26, scope: !3141)
!3144 = !DILocation(line: 336, column: 9, scope: !3141)
!3145 = !DILocation(line: 336, column: 13, scope: !3141)
!3146 = !DILocation(line: 336, column: 26, scope: !3141)
!3147 = !DILocation(line: 336, column: 40, scope: !3141)
!3148 = !DILocation(line: 337, column: 12, scope: !3141)
!3149 = !DILocation(line: 337, column: 16, scope: !3141)
!3150 = !DILocation(line: 337, column: 30, scope: !3141)
!3151 = !DILocation(line: 337, column: 10, scope: !3141)
!3152 = !DILocation(line: 337, column: 50, scope: !3141)
!3153 = !DILocation(line: 335, column: 9, scope: !571)
!3154 = !DILocation(line: 338, column: 25, scope: !3155)
!3155 = distinct !DILexicalBlock(scope: !3141, file: !457, line: 337, column: 57)
!3156 = !DILocation(line: 338, column: 9, scope: !3155)
!3157 = !DILocation(line: 340, column: 9, scope: !3155)
!3158 = !DILocation(line: 343, column: 20, scope: !571)
!3159 = !DILocation(line: 343, column: 6, scope: !571)
!3160 = !DILocation(line: 343, column: 13, scope: !571)
!3161 = !DILocation(line: 344, column: 24, scope: !571)
!3162 = !DILocation(line: 344, column: 6, scope: !571)
!3163 = !DILocation(line: 344, column: 17, scope: !571)
!3164 = !DILocation(line: 345, column: 9, scope: !3165)
!3165 = distinct !DILexicalBlock(scope: !571, file: !457, line: 345, column: 9)
!3166 = !DILocation(line: 345, column: 13, scope: !3165)
!3167 = !DILocation(line: 345, column: 30, scope: !3165)
!3168 = !DILocation(line: 345, column: 9, scope: !571)
!3169 = !DILocation(line: 346, column: 11, scope: !3165)
!3170 = !DILocation(line: 346, column: 15, scope: !3165)
!3171 = !DILocation(line: 346, column: 33, scope: !3165)
!3172 = !DILocation(line: 346, column: 9, scope: !3165)
!3173 = !DILocation(line: 347, column: 5, scope: !571)
!3174 = !DILocation(line: 347, column: 10, scope: !3175)
!3175 = !DILexicalBlockFile(scope: !582, file: !457, discriminator: 1)
!3176 = !DILocation(line: 347, column: 20, scope: !582)
!3177 = !DILocation(line: 347, column: 56, scope: !582)
!3178 = !DILocation(line: 347, column: 66, scope: !585)
!3179 = !DILocation(line: 347, column: 82, scope: !585)
!3180 = !DILocation(line: 347, column: 66, scope: !582)
!3181 = !DILocation(line: 347, column: 97, scope: !3182)
!3182 = !DILexicalBlockFile(scope: !585, file: !457, discriminator: 2)
!3183 = !DILocation(line: 347, column: 102, scope: !3184)
!3184 = !DILexicalBlockFile(scope: !584, file: !457, discriminator: 4)
!3185 = !DILocation(line: 347, column: 112, scope: !584)
!3186 = !DILocation(line: 347, column: 142, scope: !584)
!3187 = !DILocation(line: 347, column: 168, scope: !3188)
!3188 = distinct !DILexicalBlock(scope: !584, file: !457, line: 347, column: 165)
!3189 = !DILocation(line: 347, column: 185, scope: !3188)
!3190 = !DILocation(line: 347, column: 165, scope: !3188)
!3191 = !DILocation(line: 347, column: 195, scope: !3188)
!3192 = !DILocation(line: 347, column: 165, scope: !584)
!3193 = !DILocation(line: 347, column: 165, scope: !3194)
!3194 = !DILexicalBlockFile(scope: !584, file: !457, discriminator: 5)
!3195 = !DILocation(line: 347, column: 226, scope: !3196)
!3196 = !DILexicalBlockFile(scope: !3188, file: !457, discriminator: 6)
!3197 = !DILocation(line: 347, column: 244, scope: !3188)
!3198 = !DILocation(line: 347, column: 254, scope: !3188)
!3199 = !DILocation(line: 347, column: 279, scope: !3188)
!3200 = !DILocation(line: 347, column: 210, scope: !3188)
!3201 = !DILocation(line: 347, column: 298, scope: !3202)
!3202 = !DILexicalBlockFile(scope: !585, file: !457, discriminator: 7)
!3203 = !DILocation(line: 347, column: 298, scope: !584)
!3204 = !DILocation(line: 347, column: 298, scope: !3205)
!3205 = !DILexicalBlockFile(scope: !584, file: !457, discriminator: 8)
!3206 = !DILocation(line: 347, column: 298, scope: !3207)
!3207 = !DILexicalBlockFile(scope: !584, file: !457, discriminator: 9)
!3208 = !DILocation(line: 347, column: 311, scope: !3209)
!3209 = !DILexicalBlockFile(scope: !3210, file: !457, discriminator: 10)
!3210 = !DILexicalBlockFile(scope: !571, file: !457, discriminator: 3)
!3211 = !DILocation(line: 347, column: 311, scope: !582)
!3212 = !DILocation(line: 347, column: 311, scope: !3213)
!3213 = !DILexicalBlockFile(scope: !582, file: !457, discriminator: 11)
!3214 = !DILocation(line: 348, column: 5, scope: !571)
!3215 = !DILocation(line: 349, column: 1, scope: !571)
!3216 = !DILocation(line: 354, column: 30, scope: !586)
!3217 = !DILocation(line: 354, column: 46, scope: !586)
!3218 = !DILocation(line: 354, column: 56, scope: !586)
!3219 = !DILocation(line: 356, column: 13, scope: !3220)
!3220 = distinct !DILexicalBlock(scope: !586, file: !457, line: 356, column: 9)
!3221 = !DILocation(line: 356, column: 19, scope: !3220)
!3222 = !DILocation(line: 356, column: 28, scope: !3220)
!3223 = !DILocation(line: 356, column: 41, scope: !3220)
!3224 = !DILocation(line: 356, column: 56, scope: !3220)
!3225 = !DILocation(line: 356, column: 61, scope: !3226)
!3226 = !DILexicalBlockFile(scope: !3220, file: !457, discriminator: 1)
!3227 = !DILocation(line: 356, column: 67, scope: !3220)
!3228 = !DILocation(line: 356, column: 76, scope: !3220)
!3229 = !DILocation(line: 356, column: 90, scope: !3220)
!3230 = !DILocation(line: 356, column: 103, scope: !3220)
!3231 = !DILocation(line: 356, column: 9, scope: !586)
!3232 = !DILocation(line: 357, column: 22, scope: !3233)
!3233 = distinct !DILexicalBlock(scope: !3220, file: !457, line: 356, column: 120)
!3234 = !DILocation(line: 359, column: 36, scope: !3233)
!3235 = !DILocation(line: 359, column: 43, scope: !3233)
!3236 = !DILocation(line: 359, column: 53, scope: !3233)
!3237 = !DILocation(line: 357, column: 9, scope: !3233)
!3238 = !DILocation(line: 360, column: 9, scope: !3233)
!3239 = !DILocation(line: 362, column: 15, scope: !586)
!3240 = !DILocation(line: 362, column: 20, scope: !586)
!3241 = !DILocation(line: 362, column: 29, scope: !586)
!3242 = !DILocation(line: 362, column: 43, scope: !586)
!3243 = !DILocation(line: 362, column: 58, scope: !586)
!3244 = !DILocation(line: 362, column: 63, scope: !586)
!3245 = !DILocation(line: 362, column: 69, scope: !586)
!3246 = !DILocation(line: 362, column: 12, scope: !586)
!3247 = !DILocation(line: 362, column: 5, scope: !586)
!3248 = !DILocation(line: 363, column: 1, scope: !586)
!3249 = !DILocation(line: 408, column: 40, scope: !591)
!3250 = !{!1831, !1831, i64 0}
!3251 = !DILocation(line: 408, column: 51, scope: !591)
!3252 = !DILocation(line: 411, column: 9, scope: !3253)
!3253 = distinct !DILexicalBlock(scope: !591, file: !457, line: 411, column: 9)
!3254 = !DILocation(line: 411, column: 15, scope: !3253)
!3255 = !{!2845, !1830, i64 64}
!3256 = !DILocation(line: 411, column: 26, scope: !3253)
!3257 = !DILocation(line: 411, column: 9, scope: !591)
!3258 = !DILocation(line: 411, column: 41, scope: !3259)
!3259 = !DILexicalBlockFile(scope: !3253, file: !457, discriminator: 1)
!3260 = !DILocation(line: 413, column: 9, scope: !3261)
!3261 = distinct !DILexicalBlock(scope: !591, file: !457, line: 413, column: 9)
!3262 = !DILocation(line: 413, column: 15, scope: !3261)
!3263 = !DILocation(line: 413, column: 9, scope: !591)
!3264 = !DILocation(line: 414, column: 31, scope: !3261)
!3265 = !DILocation(line: 414, column: 16, scope: !3261)
!3266 = !DILocation(line: 414, column: 9, scope: !3261)
!3267 = !DILocation(line: 415, column: 14, scope: !3268)
!3268 = distinct !DILexicalBlock(scope: !3261, file: !457, line: 415, column: 14)
!3269 = !DILocation(line: 415, column: 20, scope: !3268)
!3270 = !DILocation(line: 415, column: 14, scope: !3261)
!3271 = !DILocation(line: 416, column: 37, scope: !3268)
!3272 = !DILocation(line: 416, column: 16, scope: !3268)
!3273 = !DILocation(line: 416, column: 9, scope: !3268)
!3274 = !DILocation(line: 417, column: 14, scope: !3275)
!3275 = distinct !DILexicalBlock(scope: !3268, file: !457, line: 417, column: 14)
!3276 = !DILocation(line: 417, column: 20, scope: !3275)
!3277 = !DILocation(line: 417, column: 14, scope: !3268)
!3278 = !DILocation(line: 418, column: 32, scope: !3275)
!3279 = !DILocation(line: 418, column: 17, scope: !3275)
!3280 = !DILocation(line: 418, column: 38, scope: !3275)
!3281 = !DILocation(line: 418, column: 62, scope: !3282)
!3282 = !DILexicalBlockFile(scope: !3275, file: !457, discriminator: 2)
!3283 = !DILocation(line: 418, column: 41, scope: !3275)
!3284 = !DILocation(line: 418, column: 38, scope: !3285)
!3285 = !DILexicalBlockFile(scope: !3286, file: !457, discriminator: 3)
!3286 = !DILexicalBlockFile(scope: !3275, file: !457, discriminator: 1)
!3287 = !DILocation(line: 418, column: 9, scope: !3275)
!3288 = !DILocation(line: 419, column: 5, scope: !591)
!3289 = !DILocation(line: 420, column: 1, scope: !591)
!3290 = !DILocation(line: 387, column: 33, scope: !1552)
!3291 = !DILocation(line: 389, column: 5, scope: !1552)
!3292 = !DILocation(line: 389, column: 16, scope: !1552)
!3293 = !DILocation(line: 389, column: 20, scope: !1552)
!3294 = !DILocation(line: 390, column: 5, scope: !1552)
!3295 = !DILocation(line: 390, column: 9, scope: !1552)
!3296 = !DILocation(line: 392, column: 9, scope: !3297)
!3297 = distinct !DILexicalBlock(scope: !1552, file: !457, line: 392, column: 9)
!3298 = !DILocation(line: 392, column: 15, scope: !3297)
!3299 = !{!2845, !1879, i64 36}
!3300 = !DILocation(line: 392, column: 20, scope: !3297)
!3301 = !DILocation(line: 392, column: 9, scope: !1552)
!3302 = !DILocation(line: 392, column: 26, scope: !3303)
!3303 = !DILexicalBlockFile(scope: !3297, file: !457, discriminator: 1)
!3304 = !DILocation(line: 392, column: 26, scope: !3297)
!3305 = !DILocation(line: 393, column: 9, scope: !3306)
!3306 = distinct !DILexicalBlock(scope: !1552, file: !457, line: 393, column: 9)
!3307 = !DILocation(line: 393, column: 15, scope: !3306)
!3308 = !{!2845, !1830, i64 56}
!3309 = !DILocation(line: 393, column: 23, scope: !3306)
!3310 = !DILocation(line: 393, column: 9, scope: !1552)
!3311 = !DILocation(line: 393, column: 38, scope: !3312)
!3312 = !DILexicalBlockFile(scope: !3306, file: !457, discriminator: 1)
!3313 = !DILocation(line: 393, column: 38, scope: !3306)
!3314 = !DILocation(line: 395, column: 10, scope: !1552)
!3315 = !DILocation(line: 395, column: 16, scope: !1552)
!3316 = !{!2845, !1847, i64 24}
!3317 = !DILocation(line: 395, column: 8, scope: !1552)
!3318 = !DILocation(line: 396, column: 9, scope: !3319)
!3319 = distinct !DILexicalBlock(scope: !1552, file: !457, line: 396, column: 9)
!3320 = !DILocation(line: 396, column: 15, scope: !3319)
!3321 = !DILocation(line: 396, column: 20, scope: !3319)
!3322 = !DILocation(line: 396, column: 9, scope: !1552)
!3323 = !DILocation(line: 396, column: 34, scope: !3324)
!3324 = !DILexicalBlockFile(scope: !3319, file: !457, discriminator: 1)
!3325 = !DILocation(line: 396, column: 40, scope: !3319)
!3326 = !{!2845, !1830, i64 48}
!3327 = !DILocation(line: 396, column: 34, scope: !3319)
!3328 = !DILocation(line: 396, column: 49, scope: !3319)
!3329 = !DILocation(line: 396, column: 54, scope: !3319)
!3330 = !DILocation(line: 397, column: 32, scope: !3319)
!3331 = !DILocation(line: 397, column: 38, scope: !3319)
!3332 = !DILocation(line: 397, column: 44, scope: !3319)
!3333 = !DILocation(line: 397, column: 35, scope: !3319)
!3334 = !DILocation(line: 396, column: 54, scope: !3335)
!3335 = !DILexicalBlockFile(scope: !3336, file: !457, discriminator: 3)
!3336 = !DILexicalBlockFile(scope: !3319, file: !457, discriminator: 2)
!3337 = !DILocation(line: 396, column: 26, scope: !3319)
!3338 = !DILocation(line: 398, column: 12, scope: !3339)
!3339 = distinct !DILexicalBlock(scope: !1552, file: !457, line: 398, column: 5)
!3340 = !DILocation(line: 398, column: 18, scope: !3339)
!3341 = !DILocation(line: 398, column: 22, scope: !3339)
!3342 = !DILocation(line: 398, column: 11, scope: !3339)
!3343 = !DILocation(line: 398, column: 10, scope: !3339)
!3344 = !DILocation(line: 398, column: 26, scope: !3345)
!3345 = !DILexicalBlockFile(scope: !3346, file: !457, discriminator: 2)
!3346 = !DILexicalBlockFile(scope: !3347, file: !457, discriminator: 1)
!3347 = distinct !DILexicalBlock(scope: !3339, file: !457, line: 398, column: 5)
!3348 = !DILocation(line: 398, column: 27, scope: !3347)
!3349 = !DILocation(line: 398, column: 5, scope: !3339)
!3350 = !DILocation(line: 399, column: 27, scope: !3351)
!3351 = distinct !DILexicalBlock(scope: !3347, file: !457, line: 398, column: 37)
!3352 = !DILocation(line: 399, column: 15, scope: !3351)
!3353 = !DILocation(line: 399, column: 21, scope: !3351)
!3354 = !DILocation(line: 399, column: 13, scope: !3351)
!3355 = !DILocation(line: 400, column: 13, scope: !3356)
!3356 = distinct !DILexicalBlock(scope: !3351, file: !457, line: 400, column: 13)
!3357 = !DILocation(line: 400, column: 17, scope: !3356)
!3358 = !DILocation(line: 400, column: 13, scope: !3351)
!3359 = !DILocation(line: 400, column: 23, scope: !3360)
!3360 = !DILexicalBlockFile(scope: !3356, file: !457, discriminator: 1)
!3361 = !DILocation(line: 400, column: 23, scope: !3356)
!3362 = !DILocation(line: 401, column: 27, scope: !3363)
!3363 = distinct !DILexicalBlock(scope: !3351, file: !457, line: 401, column: 13)
!3364 = !DILocation(line: 401, column: 13, scope: !3363)
!3365 = !DILocation(line: 401, column: 19, scope: !3363)
!3366 = !DILocation(line: 401, column: 33, scope: !3363)
!3367 = !DILocation(line: 401, column: 30, scope: !3363)
!3368 = !DILocation(line: 401, column: 13, scope: !3351)
!3369 = !DILocation(line: 401, column: 37, scope: !3370)
!3370 = !DILexicalBlockFile(scope: !3363, file: !457, discriminator: 1)
!3371 = !DILocation(line: 401, column: 37, scope: !3363)
!3372 = !DILocation(line: 402, column: 15, scope: !3351)
!3373 = !DILocation(line: 402, column: 12, scope: !3351)
!3374 = !DILocation(line: 403, column: 5, scope: !3351)
!3375 = !DILocation(line: 398, column: 33, scope: !3347)
!3376 = !DILocation(line: 398, column: 5, scope: !3347)
!3377 = !DILocation(line: 404, column: 5, scope: !1552)
!3378 = !DILocation(line: 405, column: 1, scope: !1552)
!3379 = !DILocation(line: 366, column: 39, scope: !1560)
!3380 = !DILocation(line: 368, column: 5, scope: !1560)
!3381 = !DILocation(line: 368, column: 16, scope: !1560)
!3382 = !DILocation(line: 368, column: 20, scope: !1560)
!3383 = !DILocation(line: 369, column: 5, scope: !1560)
!3384 = !DILocation(line: 369, column: 9, scope: !1560)
!3385 = !DILocation(line: 371, column: 9, scope: !3386)
!3386 = distinct !DILexicalBlock(scope: !1560, file: !457, line: 371, column: 9)
!3387 = !DILocation(line: 371, column: 15, scope: !3386)
!3388 = !DILocation(line: 371, column: 20, scope: !3386)
!3389 = !DILocation(line: 371, column: 9, scope: !1560)
!3390 = !DILocation(line: 371, column: 26, scope: !3391)
!3391 = !DILexicalBlockFile(scope: !3386, file: !457, discriminator: 1)
!3392 = !DILocation(line: 371, column: 26, scope: !3386)
!3393 = !DILocation(line: 372, column: 9, scope: !3394)
!3394 = distinct !DILexicalBlock(scope: !1560, file: !457, line: 372, column: 9)
!3395 = !DILocation(line: 372, column: 15, scope: !3394)
!3396 = !DILocation(line: 372, column: 23, scope: !3394)
!3397 = !DILocation(line: 372, column: 9, scope: !1560)
!3398 = !DILocation(line: 372, column: 46, scope: !3399)
!3399 = !DILexicalBlockFile(scope: !3394, file: !457, discriminator: 1)
!3400 = !DILocation(line: 372, column: 52, scope: !3394)
!3401 = !DILocation(line: 372, column: 57, scope: !3394)
!3402 = !DILocation(line: 372, column: 38, scope: !3394)
!3403 = !DILocation(line: 374, column: 10, scope: !1560)
!3404 = !DILocation(line: 374, column: 16, scope: !1560)
!3405 = !DILocation(line: 374, column: 8, scope: !1560)
!3406 = !DILocation(line: 375, column: 9, scope: !3407)
!3407 = distinct !DILexicalBlock(scope: !1560, file: !457, line: 375, column: 9)
!3408 = !DILocation(line: 375, column: 15, scope: !3407)
!3409 = !DILocation(line: 375, column: 20, scope: !3407)
!3410 = !DILocation(line: 375, column: 9, scope: !1560)
!3411 = !DILocation(line: 375, column: 34, scope: !3412)
!3412 = !DILexicalBlockFile(scope: !3407, file: !457, discriminator: 1)
!3413 = !DILocation(line: 375, column: 40, scope: !3407)
!3414 = !DILocation(line: 375, column: 34, scope: !3407)
!3415 = !DILocation(line: 375, column: 49, scope: !3407)
!3416 = !DILocation(line: 375, column: 54, scope: !3407)
!3417 = !DILocation(line: 376, column: 32, scope: !3407)
!3418 = !DILocation(line: 376, column: 38, scope: !3407)
!3419 = !DILocation(line: 376, column: 44, scope: !3407)
!3420 = !DILocation(line: 376, column: 35, scope: !3407)
!3421 = !DILocation(line: 375, column: 54, scope: !3422)
!3422 = !DILexicalBlockFile(scope: !3423, file: !457, discriminator: 3)
!3423 = !DILexicalBlockFile(scope: !3407, file: !457, discriminator: 2)
!3424 = !DILocation(line: 375, column: 26, scope: !3407)
!3425 = !DILocation(line: 377, column: 11, scope: !3426)
!3426 = distinct !DILexicalBlock(scope: !1560, file: !457, line: 377, column: 5)
!3427 = !DILocation(line: 377, column: 10, scope: !3426)
!3428 = !DILocation(line: 377, column: 15, scope: !3429)
!3429 = !DILexicalBlockFile(scope: !3430, file: !457, discriminator: 2)
!3430 = !DILexicalBlockFile(scope: !3431, file: !457, discriminator: 1)
!3431 = distinct !DILexicalBlock(scope: !3426, file: !457, line: 377, column: 5)
!3432 = !DILocation(line: 377, column: 17, scope: !3431)
!3433 = !DILocation(line: 377, column: 23, scope: !3431)
!3434 = !DILocation(line: 377, column: 16, scope: !3431)
!3435 = !DILocation(line: 377, column: 5, scope: !3426)
!3436 = !DILocation(line: 378, column: 27, scope: !3437)
!3437 = distinct !DILexicalBlock(scope: !3431, file: !457, line: 377, column: 34)
!3438 = !DILocation(line: 378, column: 15, scope: !3437)
!3439 = !DILocation(line: 378, column: 21, scope: !3437)
!3440 = !DILocation(line: 378, column: 13, scope: !3437)
!3441 = !DILocation(line: 379, column: 13, scope: !3442)
!3442 = distinct !DILexicalBlock(scope: !3437, file: !457, line: 379, column: 13)
!3443 = !DILocation(line: 379, column: 17, scope: !3442)
!3444 = !DILocation(line: 379, column: 13, scope: !3437)
!3445 = !DILocation(line: 379, column: 23, scope: !3446)
!3446 = !DILexicalBlockFile(scope: !3442, file: !457, discriminator: 1)
!3447 = !DILocation(line: 379, column: 23, scope: !3442)
!3448 = !DILocation(line: 380, column: 27, scope: !3449)
!3449 = distinct !DILexicalBlock(scope: !3437, file: !457, line: 380, column: 13)
!3450 = !DILocation(line: 380, column: 13, scope: !3449)
!3451 = !DILocation(line: 380, column: 19, scope: !3449)
!3452 = !DILocation(line: 380, column: 33, scope: !3449)
!3453 = !DILocation(line: 380, column: 30, scope: !3449)
!3454 = !DILocation(line: 380, column: 13, scope: !3437)
!3455 = !DILocation(line: 380, column: 37, scope: !3456)
!3456 = !DILexicalBlockFile(scope: !3449, file: !457, discriminator: 1)
!3457 = !DILocation(line: 380, column: 37, scope: !3449)
!3458 = !DILocation(line: 381, column: 15, scope: !3437)
!3459 = !DILocation(line: 381, column: 12, scope: !3437)
!3460 = !DILocation(line: 382, column: 5, scope: !3437)
!3461 = !DILocation(line: 377, column: 30, scope: !3431)
!3462 = !DILocation(line: 377, column: 5, scope: !3431)
!3463 = !DILocation(line: 383, column: 5, scope: !1560)
!3464 = !DILocation(line: 384, column: 1, scope: !1560)
!3465 = !DILocation(line: 424, column: 32, scope: !599)
!3466 = !DILocation(line: 424, column: 50, scope: !599)
!3467 = !DILocation(line: 426, column: 5, scope: !599)
!3468 = !DILocation(line: 426, column: 11, scope: !599)
!3469 = !DILocation(line: 427, column: 5, scope: !599)
!3470 = !DILocation(line: 427, column: 9, scope: !599)
!3471 = !DILocation(line: 428, column: 23, scope: !599)
!3472 = !DILocation(line: 428, column: 29, scope: !599)
!3473 = !DILocation(line: 428, column: 13, scope: !599)
!3474 = !DILocation(line: 429, column: 12, scope: !3475)
!3475 = distinct !DILexicalBlock(scope: !599, file: !457, line: 429, column: 5)
!3476 = !DILocation(line: 429, column: 10, scope: !3475)
!3477 = !DILocation(line: 429, column: 17, scope: !3478)
!3478 = !DILexicalBlockFile(scope: !3479, file: !457, discriminator: 2)
!3479 = !DILexicalBlockFile(scope: !3480, file: !457, discriminator: 1)
!3480 = distinct !DILexicalBlock(scope: !3475, file: !457, line: 429, column: 5)
!3481 = !DILocation(line: 429, column: 21, scope: !3480)
!3482 = !DILocation(line: 429, column: 27, scope: !3480)
!3483 = !DILocation(line: 429, column: 19, scope: !3480)
!3484 = !DILocation(line: 429, column: 5, scope: !3475)
!3485 = !DILocation(line: 430, column: 34, scope: !3486)
!3486 = distinct !DILexicalBlock(scope: !3480, file: !457, line: 429, column: 38)
!3487 = !DILocation(line: 430, column: 20, scope: !3486)
!3488 = !DILocation(line: 430, column: 26, scope: !3486)
!3489 = !DILocation(line: 430, column: 45, scope: !3486)
!3490 = !DILocation(line: 430, column: 37, scope: !3486)
!3491 = !DILocation(line: 430, column: 36, scope: !3486)
!3492 = !DILocation(line: 430, column: 17, scope: !3486)
!3493 = !DILocation(line: 431, column: 14, scope: !3494)
!3494 = distinct !DILexicalBlock(scope: !3486, file: !457, line: 431, column: 13)
!3495 = !DILocation(line: 431, column: 20, scope: !3494)
!3496 = !DILocation(line: 431, column: 31, scope: !3494)
!3497 = !DILocation(line: 431, column: 46, scope: !3494)
!3498 = !DILocation(line: 431, column: 67, scope: !3499)
!3499 = !DILexicalBlockFile(scope: !3494, file: !457, discriminator: 1)
!3500 = !DILocation(line: 431, column: 50, scope: !3494)
!3501 = !DILocation(line: 431, column: 56, scope: !3494)
!3502 = !DILocation(line: 431, column: 70, scope: !3494)
!3503 = !DILocation(line: 431, column: 13, scope: !3486)
!3504 = !DILocation(line: 432, column: 33, scope: !3505)
!3505 = distinct !DILexicalBlock(scope: !3494, file: !457, line: 431, column: 77)
!3506 = !DILocation(line: 432, column: 25, scope: !3505)
!3507 = !DILocation(line: 432, column: 23, scope: !3505)
!3508 = !DILocation(line: 432, column: 61, scope: !3505)
!3509 = !DILocation(line: 432, column: 44, scope: !3505)
!3510 = !DILocation(line: 432, column: 50, scope: !3505)
!3511 = !DILocation(line: 432, column: 42, scope: !3505)
!3512 = !DILocation(line: 432, column: 21, scope: !3505)
!3513 = !DILocation(line: 433, column: 9, scope: !3505)
!3514 = !DILocation(line: 434, column: 5, scope: !3486)
!3515 = !DILocation(line: 429, column: 34, scope: !3480)
!3516 = !DILocation(line: 429, column: 5, scope: !3480)
!3517 = !DILocation(line: 435, column: 19, scope: !599)
!3518 = !DILocation(line: 436, column: 1, scope: !599)
!3519 = !DILocation(line: 435, column: 5, scope: !599)
!3520 = !DILocation(line: 440, column: 28, scope: !607)
!3521 = !DILocation(line: 440, column: 44, scope: !607)
!3522 = !DILocation(line: 440, column: 69, scope: !607)
!3523 = !DILocation(line: 442, column: 5, scope: !607)
!3524 = !DILocation(line: 442, column: 9, scope: !607)
!3525 = !DILocation(line: 444, column: 11, scope: !3526)
!3526 = distinct !DILexicalBlock(scope: !607, file: !457, line: 444, column: 5)
!3527 = !DILocation(line: 444, column: 10, scope: !3526)
!3528 = !DILocation(line: 444, column: 15, scope: !3529)
!3529 = !DILexicalBlockFile(scope: !3530, file: !457, discriminator: 2)
!3530 = !DILexicalBlockFile(scope: !3531, file: !457, discriminator: 1)
!3531 = distinct !DILexicalBlock(scope: !3526, file: !457, line: 444, column: 5)
!3532 = !DILocation(line: 444, column: 17, scope: !3531)
!3533 = !DILocation(line: 444, column: 16, scope: !3531)
!3534 = !DILocation(line: 444, column: 5, scope: !3526)
!3535 = !DILocation(line: 445, column: 19, scope: !3536)
!3536 = distinct !DILexicalBlock(scope: !3537, file: !457, line: 445, column: 13)
!3537 = distinct !DILexicalBlock(scope: !3531, file: !457, line: 444, column: 26)
!3538 = !DILocation(line: 445, column: 13, scope: !3536)
!3539 = !DILocation(line: 445, column: 30, scope: !3536)
!3540 = !DILocation(line: 445, column: 24, scope: !3536)
!3541 = !DILocation(line: 445, column: 32, scope: !3536)
!3542 = !DILocation(line: 445, column: 22, scope: !3536)
!3543 = !DILocation(line: 445, column: 13, scope: !3537)
!3544 = !DILocation(line: 446, column: 19, scope: !3545)
!3545 = distinct !DILexicalBlock(scope: !3536, file: !457, line: 445, column: 36)
!3546 = !DILocation(line: 446, column: 13, scope: !3545)
!3547 = !DILocation(line: 446, column: 21, scope: !3545)
!3548 = !DILocation(line: 447, column: 13, scope: !3545)
!3549 = !DILocation(line: 450, column: 19, scope: !3550)
!3550 = distinct !DILexicalBlock(scope: !3536, file: !457, line: 449, column: 14)
!3551 = !DILocation(line: 450, column: 13, scope: !3550)
!3552 = !DILocation(line: 450, column: 22, scope: !3550)
!3553 = !DILocation(line: 452, column: 5, scope: !3537)
!3554 = !DILocation(line: 444, column: 22, scope: !3531)
!3555 = !DILocation(line: 444, column: 5, scope: !3531)
!3556 = !DILocation(line: 453, column: 1, scope: !607)
!3557 = !DILocation(line: 456, column: 28, scope: !617)
!3558 = !DILocation(line: 456, column: 44, scope: !617)
!3559 = !DILocation(line: 456, column: 69, scope: !617)
!3560 = !DILocation(line: 458, column: 5, scope: !617)
!3561 = !DILocation(line: 458, column: 9, scope: !617)
!3562 = !DILocation(line: 460, column: 12, scope: !3563)
!3563 = distinct !DILexicalBlock(scope: !617, file: !457, line: 460, column: 5)
!3564 = !DILocation(line: 460, column: 14, scope: !3563)
!3565 = !DILocation(line: 460, column: 11, scope: !3563)
!3566 = !DILocation(line: 460, column: 10, scope: !3563)
!3567 = !DILocation(line: 460, column: 18, scope: !3568)
!3568 = !DILexicalBlockFile(scope: !3569, file: !457, discriminator: 2)
!3569 = !DILexicalBlockFile(scope: !3570, file: !457, discriminator: 1)
!3570 = distinct !DILexicalBlock(scope: !3563, file: !457, line: 460, column: 5)
!3571 = !DILocation(line: 460, column: 19, scope: !3570)
!3572 = !DILocation(line: 460, column: 5, scope: !3563)
!3573 = !DILocation(line: 461, column: 19, scope: !3574)
!3574 = distinct !DILexicalBlock(scope: !3575, file: !457, line: 461, column: 13)
!3575 = distinct !DILexicalBlock(scope: !3570, file: !457, line: 460, column: 29)
!3576 = !DILocation(line: 461, column: 13, scope: !3574)
!3577 = !DILocation(line: 461, column: 30, scope: !3574)
!3578 = !DILocation(line: 461, column: 24, scope: !3574)
!3579 = !DILocation(line: 461, column: 32, scope: !3574)
!3580 = !DILocation(line: 461, column: 22, scope: !3574)
!3581 = !DILocation(line: 461, column: 13, scope: !3575)
!3582 = !DILocation(line: 462, column: 19, scope: !3583)
!3583 = distinct !DILexicalBlock(scope: !3574, file: !457, line: 461, column: 36)
!3584 = !DILocation(line: 462, column: 13, scope: !3583)
!3585 = !DILocation(line: 462, column: 21, scope: !3583)
!3586 = !DILocation(line: 463, column: 13, scope: !3583)
!3587 = !DILocation(line: 466, column: 19, scope: !3588)
!3588 = distinct !DILexicalBlock(scope: !3574, file: !457, line: 465, column: 14)
!3589 = !DILocation(line: 466, column: 13, scope: !3588)
!3590 = !DILocation(line: 466, column: 22, scope: !3588)
!3591 = !DILocation(line: 468, column: 5, scope: !3575)
!3592 = !DILocation(line: 460, column: 25, scope: !3570)
!3593 = !DILocation(line: 460, column: 5, scope: !3570)
!3594 = !DILocation(line: 469, column: 1, scope: !617)
!3595 = !DILocation(line: 472, column: 36, scope: !623)
!3596 = !DILocation(line: 472, column: 48, scope: !623)
!3597 = !DILocation(line: 472, column: 64, scope: !623)
!3598 = !DILocation(line: 472, column: 74, scope: !623)
!3599 = !DILocation(line: 474, column: 5, scope: !623)
!3600 = !DILocation(line: 474, column: 9, scope: !623)
!3601 = !DILocation(line: 475, column: 5, scope: !623)
!3602 = !DILocation(line: 475, column: 12, scope: !623)
!3603 = !DILocation(line: 476, column: 5, scope: !623)
!3604 = !DILocation(line: 476, column: 17, scope: !623)
!3605 = !DILocation(line: 476, column: 26, scope: !623)
!3606 = !DILocation(line: 477, column: 5, scope: !623)
!3607 = !DILocation(line: 477, column: 11, scope: !623)
!3608 = !DILocation(line: 477, column: 17, scope: !623)
!3609 = !DILocation(line: 479, column: 9, scope: !3610)
!3610 = distinct !DILexicalBlock(scope: !623, file: !457, line: 479, column: 9)
!3611 = !DILocation(line: 479, column: 15, scope: !3610)
!3612 = !DILocation(line: 479, column: 21, scope: !3610)
!3613 = !DILocation(line: 479, column: 13, scope: !3610)
!3614 = !DILocation(line: 479, column: 9, scope: !623)
!3615 = !DILocation(line: 480, column: 15, scope: !3616)
!3616 = distinct !DILexicalBlock(scope: !3610, file: !457, line: 479, column: 26)
!3617 = !DILocation(line: 480, column: 21, scope: !3616)
!3618 = !DILocation(line: 480, column: 13, scope: !3616)
!3619 = !DILocation(line: 481, column: 5, scope: !3616)
!3620 = !DILocation(line: 483, column: 31, scope: !3621)
!3621 = distinct !DILexicalBlock(scope: !623, file: !457, line: 483, column: 9)
!3622 = !DILocation(line: 483, column: 37, scope: !3621)
!3623 = !DILocation(line: 483, column: 9, scope: !3621)
!3624 = !DILocation(line: 483, column: 9, scope: !623)
!3625 = !DILocation(line: 485, column: 16, scope: !3626)
!3626 = distinct !DILexicalBlock(scope: !3621, file: !457, line: 483, column: 44)
!3627 = !DILocation(line: 485, column: 22, scope: !3626)
!3628 = !DILocation(line: 485, column: 27, scope: !3626)
!3629 = !DILocation(line: 485, column: 32, scope: !3626)
!3630 = !DILocation(line: 485, column: 9, scope: !3626)
!3631 = !DILocation(line: 486, column: 9, scope: !3626)
!3632 = !DILocation(line: 492, column: 62, scope: !623)
!3633 = !DILocation(line: 492, column: 68, scope: !623)
!3634 = !DILocation(line: 492, column: 61, scope: !623)
!3635 = !DILocation(line: 492, column: 60, scope: !623)
!3636 = !DILocation(line: 492, column: 29, scope: !623)
!3637 = !DILocation(line: 492, column: 15, scope: !623)
!3638 = !DILocation(line: 492, column: 13, scope: !623)
!3639 = !DILocation(line: 493, column: 9, scope: !3640)
!3640 = distinct !DILexicalBlock(scope: !623, file: !457, line: 493, column: 9)
!3641 = !DILocation(line: 493, column: 17, scope: !3640)
!3642 = !DILocation(line: 493, column: 9, scope: !623)
!3643 = !DILocation(line: 494, column: 9, scope: !3644)
!3644 = distinct !DILexicalBlock(scope: !3640, file: !457, line: 493, column: 32)
!3645 = !DILocation(line: 495, column: 9, scope: !3644)
!3646 = !DILocation(line: 497, column: 11, scope: !3647)
!3647 = distinct !DILexicalBlock(scope: !623, file: !457, line: 497, column: 5)
!3648 = !DILocation(line: 497, column: 10, scope: !3647)
!3649 = !DILocation(line: 497, column: 15, scope: !3650)
!3650 = !DILexicalBlockFile(scope: !3651, file: !457, discriminator: 2)
!3651 = !DILexicalBlockFile(scope: !3652, file: !457, discriminator: 1)
!3652 = distinct !DILexicalBlock(scope: !3647, file: !457, line: 497, column: 5)
!3653 = !DILocation(line: 497, column: 17, scope: !3652)
!3654 = !DILocation(line: 497, column: 23, scope: !3652)
!3655 = !DILocation(line: 497, column: 16, scope: !3652)
!3656 = !DILocation(line: 497, column: 5, scope: !3647)
!3657 = !DILocation(line: 498, column: 17, scope: !3658)
!3658 = distinct !DILexicalBlock(scope: !3652, file: !457, line: 497, column: 33)
!3659 = !DILocation(line: 498, column: 9, scope: !3658)
!3660 = !DILocation(line: 498, column: 20, scope: !3658)
!3661 = !DILocation(line: 499, column: 5, scope: !3658)
!3662 = !DILocation(line: 497, column: 29, scope: !3652)
!3663 = !DILocation(line: 497, column: 5, scope: !3652)
!3664 = !DILocation(line: 501, column: 9, scope: !3665)
!3665 = distinct !DILexicalBlock(scope: !623, file: !457, line: 501, column: 9)
!3666 = !DILocation(line: 501, column: 14, scope: !3665)
!3667 = !DILocation(line: 501, column: 9, scope: !623)
!3668 = !DILocation(line: 502, column: 16, scope: !3669)
!3669 = distinct !DILexicalBlock(scope: !3665, file: !457, line: 501, column: 22)
!3670 = !DILocation(line: 503, column: 5, scope: !3669)
!3671 = !DILocation(line: 505, column: 16, scope: !3672)
!3672 = distinct !DILexicalBlock(scope: !3665, file: !457, line: 504, column: 10)
!3673 = !DILocation(line: 507, column: 11, scope: !623)
!3674 = !DILocation(line: 507, column: 9, scope: !623)
!3675 = !DILocation(line: 511, column: 16, scope: !623)
!3676 = !DILocation(line: 511, column: 22, scope: !623)
!3677 = !DILocation(line: 511, column: 28, scope: !623)
!3678 = !DILocation(line: 511, column: 20, scope: !623)
!3679 = !DILocation(line: 511, column: 14, scope: !623)
!3680 = !DILocation(line: 512, column: 5, scope: !623)
!3681 = !DILocation(line: 512, column: 20, scope: !3682)
!3682 = !DILexicalBlockFile(scope: !3683, file: !457, discriminator: 2)
!3683 = !DILexicalBlockFile(scope: !623, file: !457, discriminator: 1)
!3684 = !DILocation(line: 513, column: 9, scope: !3685)
!3685 = distinct !DILexicalBlock(scope: !623, file: !457, line: 512, column: 24)
!3686 = !DILocation(line: 513, column: 16, scope: !3685)
!3687 = !DILocation(line: 513, column: 22, scope: !3685)
!3688 = !DILocation(line: 513, column: 28, scope: !3685)
!3689 = !DILocation(line: 513, column: 37, scope: !3685)
!3690 = !DILocation(line: 513, column: 43, scope: !3685)
!3691 = !DILocation(line: 514, column: 35, scope: !3685)
!3692 = !DILocation(line: 514, column: 41, scope: !3685)
!3693 = !DILocation(line: 514, column: 15, scope: !3685)
!3694 = !DILocation(line: 514, column: 13, scope: !3685)
!3695 = !DILocation(line: 515, column: 16, scope: !3685)
!3696 = !DILocation(line: 515, column: 21, scope: !3685)
!3697 = !DILocation(line: 515, column: 26, scope: !3685)
!3698 = !DILocation(line: 515, column: 32, scope: !3685)
!3699 = !DILocation(line: 515, column: 9, scope: !3685)
!3700 = !DILocation(line: 516, column: 16, scope: !3685)
!3701 = !DILocation(line: 516, column: 22, scope: !3685)
!3702 = !DILocation(line: 516, column: 13, scope: !3685)
!3703 = !DILocation(line: 519, column: 16, scope: !623)
!3704 = !DILocation(line: 519, column: 5, scope: !623)
!3705 = !DILocation(line: 520, column: 5, scope: !623)
!3706 = !DILocation(line: 521, column: 1, scope: !623)
!3707 = !DILocation(line: 523, column: 33, scope: !638)
!3708 = !DILocation(line: 523, column: 49, scope: !638)
!3709 = !DILocation(line: 525, column: 5, scope: !638)
!3710 = !DILocation(line: 525, column: 15, scope: !638)
!3711 = !DILocation(line: 525, column: 26, scope: !638)
!3712 = !DILocation(line: 526, column: 5, scope: !638)
!3713 = !DILocation(line: 526, column: 9, scope: !638)
!3714 = !DILocation(line: 527, column: 5, scope: !638)
!3715 = !DILocation(line: 527, column: 17, scope: !638)
!3716 = !DILocation(line: 527, column: 26, scope: !638)
!3717 = !DILocation(line: 528, column: 5, scope: !638)
!3718 = !DILocation(line: 528, column: 11, scope: !638)
!3719 = !DILocation(line: 528, column: 18, scope: !638)
!3720 = !DILocation(line: 530, column: 13, scope: !3721)
!3721 = distinct !DILexicalBlock(scope: !638, file: !457, line: 530, column: 9)
!3722 = !DILocation(line: 530, column: 20, scope: !3721)
!3723 = !DILocation(line: 530, column: 29, scope: !3721)
!3724 = !DILocation(line: 530, column: 42, scope: !3721)
!3725 = !DILocation(line: 530, column: 57, scope: !3721)
!3726 = !DILocation(line: 530, column: 62, scope: !3727)
!3727 = !DILexicalBlockFile(scope: !3721, file: !457, discriminator: 1)
!3728 = !DILocation(line: 530, column: 69, scope: !3721)
!3729 = !DILocation(line: 530, column: 78, scope: !3721)
!3730 = !DILocation(line: 530, column: 92, scope: !3721)
!3731 = !DILocation(line: 530, column: 105, scope: !3721)
!3732 = !DILocation(line: 530, column: 121, scope: !3721)
!3733 = !DILocation(line: 531, column: 13, scope: !3721)
!3734 = !DILocation(line: 531, column: 19, scope: !3721)
!3735 = !DILocation(line: 531, column: 28, scope: !3721)
!3736 = !DILocation(line: 531, column: 41, scope: !3721)
!3737 = !DILocation(line: 531, column: 56, scope: !3721)
!3738 = !DILocation(line: 531, column: 61, scope: !3727)
!3739 = !DILocation(line: 531, column: 67, scope: !3721)
!3740 = !DILocation(line: 531, column: 76, scope: !3721)
!3741 = !DILocation(line: 531, column: 90, scope: !3721)
!3742 = !DILocation(line: 531, column: 103, scope: !3721)
!3743 = !DILocation(line: 530, column: 9, scope: !638)
!3744 = !DILocation(line: 532, column: 25, scope: !3745)
!3745 = distinct !DILexicalBlock(scope: !3721, file: !457, line: 531, column: 120)
!3746 = !DILocation(line: 532, column: 9, scope: !3745)
!3747 = !DILocation(line: 535, column: 9, scope: !3745)
!3748 = !DILocation(line: 538, column: 28, scope: !3749)
!3749 = distinct !DILexicalBlock(scope: !638, file: !457, line: 538, column: 9)
!3750 = !DILocation(line: 538, column: 9, scope: !3749)
!3751 = !DILocation(line: 538, column: 96, scope: !3749)
!3752 = !DILocation(line: 538, column: 9, scope: !638)
!3753 = !DILocation(line: 538, column: 102, scope: !3754)
!3754 = !DILexicalBlockFile(scope: !3749, file: !457, discriminator: 1)
!3755 = !DILocation(line: 538, column: 102, scope: !3749)
!3756 = !DILocation(line: 539, column: 28, scope: !3757)
!3757 = distinct !DILexicalBlock(scope: !638, file: !457, line: 539, column: 9)
!3758 = !DILocation(line: 539, column: 9, scope: !3757)
!3759 = !DILocation(line: 539, column: 85, scope: !3757)
!3760 = !DILocation(line: 539, column: 9, scope: !638)
!3761 = !DILocation(line: 540, column: 9, scope: !3762)
!3762 = distinct !DILexicalBlock(scope: !3757, file: !457, line: 539, column: 91)
!3763 = !DILocation(line: 541, column: 9, scope: !3762)
!3764 = !DILocation(line: 544, column: 19, scope: !3765)
!3765 = distinct !DILexicalBlock(scope: !638, file: !457, line: 544, column: 9)
!3766 = !DILocation(line: 544, column: 34, scope: !3765)
!3767 = !DILocation(line: 544, column: 23, scope: !3765)
!3768 = !DILocation(line: 544, column: 9, scope: !638)
!3769 = !DILocation(line: 545, column: 25, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3765, file: !457, line: 544, column: 39)
!3771 = !DILocation(line: 545, column: 9, scope: !3770)
!3772 = !DILocation(line: 547, column: 9, scope: !3770)
!3773 = !DILocation(line: 548, column: 9, scope: !3770)
!3774 = !DILocation(line: 549, column: 9, scope: !3770)
!3775 = !DILocation(line: 552, column: 10, scope: !3776)
!3776 = distinct !DILexicalBlock(scope: !638, file: !457, line: 552, column: 9)
!3777 = !DILocation(line: 552, column: 49, scope: !3776)
!3778 = !DILocation(line: 553, column: 10, scope: !3776)
!3779 = !DILocation(line: 553, column: 49, scope: !3776)
!3780 = !DILocation(line: 554, column: 10, scope: !3776)
!3781 = !DILocation(line: 554, column: 49, scope: !3776)
!3782 = !DILocation(line: 555, column: 10, scope: !3776)
!3783 = !DILocation(line: 552, column: 9, scope: !638)
!3784 = !DILocation(line: 557, column: 26, scope: !3785)
!3785 = distinct !DILexicalBlock(scope: !3776, file: !457, line: 555, column: 50)
!3786 = !DILocation(line: 557, column: 40, scope: !3785)
!3787 = !DILocation(line: 557, column: 54, scope: !3785)
!3788 = !DILocation(line: 557, column: 9, scope: !3785)
!3789 = !DILocation(line: 558, column: 9, scope: !3785)
!3790 = !DILocation(line: 559, column: 9, scope: !3785)
!3791 = !DILocation(line: 560, column: 9, scope: !3785)
!3792 = !DILocation(line: 566, column: 70, scope: !638)
!3793 = !DILocation(line: 566, column: 61, scope: !638)
!3794 = !DILocation(line: 566, column: 60, scope: !638)
!3795 = !DILocation(line: 566, column: 29, scope: !638)
!3796 = !DILocation(line: 566, column: 15, scope: !638)
!3797 = !DILocation(line: 566, column: 13, scope: !638)
!3798 = !DILocation(line: 567, column: 9, scope: !3799)
!3799 = distinct !DILexicalBlock(scope: !638, file: !457, line: 567, column: 9)
!3800 = !DILocation(line: 567, column: 17, scope: !3799)
!3801 = !DILocation(line: 567, column: 9, scope: !638)
!3802 = !DILocation(line: 568, column: 9, scope: !3803)
!3803 = distinct !DILexicalBlock(scope: !3799, file: !457, line: 567, column: 32)
!3804 = !DILocation(line: 569, column: 9, scope: !3803)
!3805 = !DILocation(line: 570, column: 9, scope: !3803)
!3806 = !DILocation(line: 571, column: 9, scope: !3803)
!3807 = !DILocation(line: 573, column: 11, scope: !3808)
!3808 = distinct !DILexicalBlock(scope: !638, file: !457, line: 573, column: 5)
!3809 = !DILocation(line: 573, column: 10, scope: !3808)
!3810 = !DILocation(line: 573, column: 15, scope: !3811)
!3811 = !DILexicalBlockFile(scope: !3812, file: !457, discriminator: 2)
!3812 = !DILexicalBlockFile(scope: !3813, file: !457, discriminator: 1)
!3813 = distinct !DILexicalBlock(scope: !3808, file: !457, line: 573, column: 5)
!3814 = !DILocation(line: 573, column: 26, scope: !3813)
!3815 = !DILocation(line: 573, column: 16, scope: !3813)
!3816 = !DILocation(line: 573, column: 5, scope: !3808)
!3817 = !DILocation(line: 574, column: 17, scope: !3818)
!3818 = distinct !DILexicalBlock(scope: !3813, file: !457, line: 573, column: 36)
!3819 = !DILocation(line: 574, column: 9, scope: !3818)
!3820 = !DILocation(line: 574, column: 20, scope: !3818)
!3821 = !DILocation(line: 575, column: 5, scope: !3818)
!3822 = !DILocation(line: 573, column: 32, scope: !3813)
!3823 = !DILocation(line: 573, column: 5, scope: !3813)
!3824 = !DILocation(line: 576, column: 14, scope: !638)
!3825 = !DILocation(line: 577, column: 11, scope: !3826)
!3826 = distinct !DILexicalBlock(scope: !638, file: !457, line: 577, column: 5)
!3827 = !DILocation(line: 577, column: 10, scope: !3826)
!3828 = !DILocation(line: 577, column: 15, scope: !3829)
!3829 = !DILexicalBlockFile(scope: !3830, file: !457, discriminator: 2)
!3830 = !DILexicalBlockFile(scope: !3831, file: !457, discriminator: 1)
!3831 = distinct !DILexicalBlock(scope: !3826, file: !457, line: 577, column: 5)
!3832 = !DILocation(line: 577, column: 26, scope: !3831)
!3833 = !DILocation(line: 577, column: 16, scope: !3831)
!3834 = !DILocation(line: 577, column: 5, scope: !3826)
!3835 = !DILocation(line: 579, column: 36, scope: !3836)
!3836 = distinct !DILexicalBlock(scope: !3831, file: !457, line: 577, column: 37)
!3837 = !DILocation(line: 579, column: 21, scope: !3836)
!3838 = !DILocation(line: 579, column: 30, scope: !3836)
!3839 = !DILocation(line: 579, column: 18, scope: !3836)
!3840 = !DILocation(line: 580, column: 5, scope: !3836)
!3841 = !DILocation(line: 577, column: 33, scope: !3831)
!3842 = !DILocation(line: 577, column: 5, scope: !3831)
!3843 = !DILocation(line: 581, column: 5, scope: !638)
!3844 = !DILocation(line: 581, column: 20, scope: !3845)
!3845 = !DILexicalBlockFile(scope: !3846, file: !457, discriminator: 2)
!3846 = !DILexicalBlockFile(scope: !638, file: !457, discriminator: 1)
!3847 = !DILocation(line: 582, column: 41, scope: !3848)
!3848 = distinct !DILexicalBlock(scope: !638, file: !457, line: 581, column: 24)
!3849 = !DILocation(line: 582, column: 47, scope: !3848)
!3850 = !DILocation(line: 582, column: 65, scope: !3848)
!3851 = !DILocation(line: 582, column: 9, scope: !3848)
!3852 = !DILocation(line: 583, column: 48, scope: !3848)
!3853 = !DILocation(line: 583, column: 16, scope: !3848)
!3854 = !DILocation(line: 583, column: 14, scope: !3848)
!3855 = !DILocation(line: 584, column: 47, scope: !3848)
!3856 = !DILocation(line: 584, column: 16, scope: !3848)
!3857 = !DILocation(line: 584, column: 14, scope: !3848)
!3858 = !DILocation(line: 585, column: 16, scope: !3848)
!3859 = !DILocation(line: 585, column: 22, scope: !3848)
!3860 = !DILocation(line: 585, column: 37, scope: !3848)
!3861 = !DILocation(line: 585, column: 9, scope: !3848)
!3862 = !DILocation(line: 587, column: 16, scope: !638)
!3863 = !DILocation(line: 587, column: 5, scope: !638)
!3864 = !DILocation(line: 588, column: 5, scope: !638)
!3865 = !DILocation(line: 589, column: 5, scope: !638)
!3866 = !DILocation(line: 590, column: 5, scope: !638)
!3867 = !DILocation(line: 591, column: 1, scope: !638)
!3868 = !DILocation(line: 594, column: 36, scope: !649)
!3869 = !DILocation(line: 594, column: 52, scope: !649)
!3870 = !DILocation(line: 595, column: 44, scope: !649)
!3871 = !DILocation(line: 595, column: 57, scope: !649)
!3872 = !DILocation(line: 596, column: 37, scope: !649)
!3873 = !DILocation(line: 598, column: 5, scope: !649)
!3874 = !DILocation(line: 598, column: 9, scope: !649)
!3875 = !DILocation(line: 599, column: 5, scope: !649)
!3876 = !DILocation(line: 599, column: 16, scope: !649)
!3877 = !DILocation(line: 601, column: 10, scope: !649)
!3878 = !DILocation(line: 601, column: 8, scope: !649)
!3879 = !DILocation(line: 602, column: 9, scope: !3880)
!3880 = distinct !DILexicalBlock(scope: !649, file: !457, line: 602, column: 9)
!3881 = !DILocation(line: 602, column: 14, scope: !3880)
!3882 = !DILocation(line: 602, column: 9, scope: !649)
!3883 = !DILocation(line: 603, column: 15, scope: !3884)
!3884 = distinct !DILexicalBlock(scope: !3885, file: !457, line: 603, column: 9)
!3885 = distinct !DILexicalBlock(scope: !3880, file: !457, line: 602, column: 22)
!3886 = !DILocation(line: 603, column: 14, scope: !3884)
!3887 = !DILocation(line: 603, column: 19, scope: !3888)
!3888 = !DILexicalBlockFile(scope: !3889, file: !457, discriminator: 2)
!3889 = !DILexicalBlockFile(scope: !3890, file: !457, discriminator: 1)
!3890 = distinct !DILexicalBlock(scope: !3884, file: !457, line: 603, column: 9)
!3891 = !DILocation(line: 603, column: 21, scope: !3890)
!3892 = !DILocation(line: 603, column: 20, scope: !3890)
!3893 = !DILocation(line: 603, column: 9, scope: !3884)
!3894 = !DILocation(line: 604, column: 26, scope: !3895)
!3895 = distinct !DILexicalBlock(scope: !3890, file: !457, line: 603, column: 30)
!3896 = !DILocation(line: 604, column: 21, scope: !3895)
!3897 = !DILocation(line: 604, column: 13, scope: !3895)
!3898 = !DILocation(line: 604, column: 24, scope: !3895)
!3899 = !DILocation(line: 605, column: 25, scope: !3895)
!3900 = !DILocation(line: 605, column: 19, scope: !3895)
!3901 = !DILocation(line: 605, column: 16, scope: !3895)
!3902 = !DILocation(line: 606, column: 9, scope: !3895)
!3903 = !DILocation(line: 603, column: 26, scope: !3890)
!3904 = !DILocation(line: 603, column: 9, scope: !3890)
!3905 = !DILocation(line: 607, column: 5, scope: !3885)
!3906 = !DILocation(line: 609, column: 16, scope: !3907)
!3907 = distinct !DILexicalBlock(scope: !3908, file: !457, line: 609, column: 9)
!3908 = distinct !DILexicalBlock(scope: !3880, file: !457, line: 608, column: 10)
!3909 = !DILocation(line: 609, column: 18, scope: !3907)
!3910 = !DILocation(line: 609, column: 15, scope: !3907)
!3911 = !DILocation(line: 609, column: 14, scope: !3907)
!3912 = !DILocation(line: 609, column: 22, scope: !3913)
!3913 = !DILexicalBlockFile(scope: !3914, file: !457, discriminator: 2)
!3914 = !DILexicalBlockFile(scope: !3915, file: !457, discriminator: 1)
!3915 = distinct !DILexicalBlock(scope: !3907, file: !457, line: 609, column: 9)
!3916 = !DILocation(line: 609, column: 23, scope: !3915)
!3917 = !DILocation(line: 609, column: 9, scope: !3907)
!3918 = !DILocation(line: 610, column: 26, scope: !3919)
!3919 = distinct !DILexicalBlock(scope: !3915, file: !457, line: 609, column: 33)
!3920 = !DILocation(line: 610, column: 21, scope: !3919)
!3921 = !DILocation(line: 610, column: 13, scope: !3919)
!3922 = !DILocation(line: 610, column: 24, scope: !3919)
!3923 = !DILocation(line: 611, column: 25, scope: !3919)
!3924 = !DILocation(line: 611, column: 19, scope: !3919)
!3925 = !DILocation(line: 611, column: 16, scope: !3919)
!3926 = !DILocation(line: 612, column: 9, scope: !3919)
!3927 = !DILocation(line: 609, column: 29, scope: !3915)
!3928 = !DILocation(line: 609, column: 9, scope: !3915)
!3929 = !DILocation(line: 615, column: 1, scope: !649)
!3930 = !DILocation(line: 618, column: 30, scope: !660)
!3931 = !DILocation(line: 618, column: 46, scope: !660)
!3932 = !DILocation(line: 618, column: 57, scope: !660)
!3933 = !DILocation(line: 618, column: 73, scope: !660)
!3934 = !DILocation(line: 619, column: 23, scope: !660)
!3935 = !DILocation(line: 619, column: 37, scope: !660)
!3936 = !DILocation(line: 621, column: 9, scope: !3937)
!3937 = distinct !DILexicalBlock(scope: !660, file: !457, line: 621, column: 9)
!3938 = !DILocation(line: 621, column: 14, scope: !3937)
!3939 = !DILocation(line: 621, column: 9, scope: !660)
!3940 = !DILocation(line: 621, column: 29, scope: !3941)
!3941 = !DILexicalBlockFile(scope: !3937, file: !457, discriminator: 1)
!3942 = !DILocation(line: 622, column: 11, scope: !3943)
!3943 = distinct !DILexicalBlock(scope: !660, file: !457, line: 622, column: 9)
!3944 = !DILocation(line: 622, column: 17, scope: !3943)
!3945 = !DILocation(line: 622, column: 27, scope: !3943)
!3946 = !DILocation(line: 622, column: 38, scope: !3943)
!3947 = !DILocation(line: 623, column: 10, scope: !3943)
!3948 = !DILocation(line: 623, column: 19, scope: !3943)
!3949 = !DILocation(line: 622, column: 9, scope: !660)
!3950 = !DILocation(line: 624, column: 25, scope: !3951)
!3951 = distinct !DILexicalBlock(scope: !3943, file: !457, line: 623, column: 26)
!3952 = !DILocation(line: 624, column: 9, scope: !3951)
!3953 = !DILocation(line: 626, column: 9, scope: !3951)
!3954 = !DILocation(line: 629, column: 17, scope: !660)
!3955 = !DILocation(line: 629, column: 5, scope: !660)
!3956 = !DILocation(line: 629, column: 11, scope: !660)
!3957 = !DILocation(line: 629, column: 15, scope: !660)
!3958 = !DILocation(line: 630, column: 9, scope: !3959)
!3959 = distinct !DILexicalBlock(scope: !660, file: !457, line: 630, column: 9)
!3960 = !DILocation(line: 630, column: 9, scope: !660)
!3961 = !DILocation(line: 631, column: 25, scope: !3959)
!3962 = !DILocation(line: 631, column: 32, scope: !3959)
!3963 = !DILocation(line: 631, column: 41, scope: !3959)
!3964 = !DILocation(line: 631, column: 9, scope: !3959)
!3965 = !DILocation(line: 632, column: 17, scope: !660)
!3966 = !DILocation(line: 632, column: 5, scope: !660)
!3967 = !DILocation(line: 632, column: 11, scope: !660)
!3968 = !DILocation(line: 632, column: 15, scope: !660)
!3969 = !DILocation(line: 633, column: 17, scope: !660)
!3970 = !DILocation(line: 633, column: 5, scope: !660)
!3971 = !DILocation(line: 633, column: 11, scope: !660)
!3972 = !DILocation(line: 633, column: 15, scope: !660)
!3973 = !DILocation(line: 634, column: 22, scope: !660)
!3974 = !DILocation(line: 634, column: 5, scope: !660)
!3975 = !DILocation(line: 634, column: 11, scope: !660)
!3976 = !DILocation(line: 634, column: 20, scope: !660)
!3977 = !{!2845, !1879, i64 32}
!3978 = !DILocation(line: 635, column: 5, scope: !660)
!3979 = !DILocation(line: 635, column: 11, scope: !660)
!3980 = !DILocation(line: 635, column: 20, scope: !660)
!3981 = !DILocation(line: 636, column: 5, scope: !660)
!3982 = !DILocation(line: 636, column: 11, scope: !660)
!3983 = !DILocation(line: 636, column: 18, scope: !660)
!3984 = !{!2845, !1830, i64 40}
!3985 = !DILocation(line: 637, column: 10, scope: !3986)
!3986 = distinct !DILexicalBlock(scope: !660, file: !457, line: 637, column: 9)
!3987 = !DILocation(line: 637, column: 16, scope: !3986)
!3988 = !DILocation(line: 637, column: 26, scope: !3986)
!3989 = !DILocation(line: 637, column: 9, scope: !660)
!3990 = !DILocation(line: 638, column: 9, scope: !3986)
!3991 = !DILocation(line: 638, column: 15, scope: !3986)
!3992 = !DILocation(line: 638, column: 22, scope: !3986)
!3993 = !DILocation(line: 639, column: 5, scope: !660)
!3994 = !DILocation(line: 639, column: 11, scope: !660)
!3995 = !DILocation(line: 639, column: 16, scope: !660)
!3996 = !DILocation(line: 640, column: 5, scope: !660)
!3997 = !DILocation(line: 640, column: 11, scope: !660)
!3998 = !DILocation(line: 640, column: 17, scope: !660)
!3999 = !DILocation(line: 641, column: 10, scope: !4000)
!4000 = distinct !DILexicalBlock(scope: !660, file: !457, line: 641, column: 9)
!4001 = !DILocation(line: 641, column: 16, scope: !4000)
!4002 = !DILocation(line: 641, column: 26, scope: !4000)
!4003 = !DILocation(line: 641, column: 9, scope: !660)
!4004 = !DILocation(line: 642, column: 25, scope: !4000)
!4005 = !DILocation(line: 642, column: 31, scope: !4000)
!4006 = !DILocation(line: 642, column: 9, scope: !4000)
!4007 = !DILocation(line: 642, column: 15, scope: !4000)
!4008 = !DILocation(line: 642, column: 21, scope: !4000)
!4009 = !DILocation(line: 643, column: 5, scope: !660)
!4010 = !DILocation(line: 643, column: 11, scope: !660)
!4011 = !DILocation(line: 643, column: 19, scope: !660)
!4012 = !DILocation(line: 644, column: 10, scope: !4013)
!4013 = distinct !DILexicalBlock(scope: !660, file: !457, line: 644, column: 9)
!4014 = !DILocation(line: 644, column: 16, scope: !4013)
!4015 = !DILocation(line: 644, column: 37, scope: !4013)
!4016 = !DILocation(line: 644, column: 9, scope: !660)
!4017 = !DILocation(line: 645, column: 27, scope: !4013)
!4018 = !DILocation(line: 645, column: 33, scope: !4013)
!4019 = !DILocation(line: 645, column: 9, scope: !4013)
!4020 = !DILocation(line: 645, column: 15, scope: !4013)
!4021 = !DILocation(line: 645, column: 23, scope: !4013)
!4022 = !DILocation(line: 646, column: 5, scope: !660)
!4023 = !DILocation(line: 646, column: 11, scope: !660)
!4024 = !DILocation(line: 646, column: 22, scope: !660)
!4025 = !DILocation(line: 647, column: 5, scope: !660)
!4026 = !DILocation(line: 647, column: 11, scope: !660)
!4027 = !DILocation(line: 647, column: 20, scope: !660)
!4028 = !{!2845, !1830, i64 72}
!4029 = !DILocation(line: 648, column: 5, scope: !660)
!4030 = !DILocation(line: 649, column: 1, scope: !660)
!4031 = !DILocation(line: 662, column: 27, scope: !681)
!4032 = !DILocation(line: 662, column: 42, scope: !681)
!4033 = !DILocation(line: 664, column: 5, scope: !681)
!4034 = !DILocation(line: 664, column: 15, scope: !681)
!4035 = !DILocation(line: 665, column: 5, scope: !681)
!4036 = !DILocation(line: 665, column: 15, scope: !681)
!4037 = !DILocation(line: 666, column: 5, scope: !681)
!4038 = !DILocation(line: 666, column: 15, scope: !681)
!4039 = !DILocation(line: 670, column: 9, scope: !4040)
!4040 = distinct !DILexicalBlock(scope: !681, file: !457, line: 670, column: 9)
!4041 = !DILocation(line: 670, column: 21, scope: !4040)
!4042 = !DILocation(line: 670, column: 9, scope: !681)
!4043 = !DILocation(line: 671, column: 17, scope: !4044)
!4044 = distinct !DILexicalBlock(scope: !4040, file: !457, line: 670, column: 36)
!4045 = !DILocation(line: 671, column: 15, scope: !4044)
!4046 = !DILocation(line: 672, column: 23, scope: !4044)
!4047 = !DILocation(line: 672, column: 21, scope: !4044)
!4048 = !DILocation(line: 673, column: 5, scope: !4044)
!4049 = !DILocation(line: 676, column: 36, scope: !681)
!4050 = !DILocation(line: 676, column: 12, scope: !681)
!4051 = !DILocation(line: 676, column: 10, scope: !681)
!4052 = !DILocation(line: 677, column: 9, scope: !4053)
!4053 = distinct !DILexicalBlock(scope: !681, file: !457, line: 677, column: 9)
!4054 = !DILocation(line: 677, column: 14, scope: !4053)
!4055 = !DILocation(line: 677, column: 9, scope: !681)
!4056 = !DILocation(line: 678, column: 14, scope: !4057)
!4057 = distinct !DILexicalBlock(scope: !4058, file: !457, line: 678, column: 13)
!4058 = distinct !DILexicalBlock(scope: !4053, file: !457, line: 677, column: 29)
!4059 = !DILocation(line: 678, column: 13, scope: !4058)
!4060 = !DILocation(line: 679, column: 26, scope: !4057)
!4061 = !DILocation(line: 681, column: 40, scope: !4057)
!4062 = !DILocation(line: 681, column: 47, scope: !4057)
!4063 = !DILocation(line: 681, column: 57, scope: !4057)
!4064 = !DILocation(line: 679, column: 13, scope: !4057)
!4065 = !DILocation(line: 682, column: 9, scope: !4058)
!4066 = !DILocation(line: 686, column: 43, scope: !681)
!4067 = !DILocation(line: 686, column: 49, scope: !681)
!4068 = !DILocation(line: 686, column: 14, scope: !681)
!4069 = !DILocation(line: 686, column: 12, scope: !681)
!4070 = !DILocation(line: 687, column: 5, scope: !681)
!4071 = !DILocation(line: 687, column: 10, scope: !4072)
!4072 = !DILexicalBlockFile(scope: !689, file: !457, discriminator: 1)
!4073 = !DILocation(line: 687, column: 20, scope: !689)
!4074 = !DILocation(line: 687, column: 50, scope: !689)
!4075 = !DILocation(line: 687, column: 65, scope: !4076)
!4076 = distinct !DILexicalBlock(scope: !689, file: !457, line: 687, column: 62)
!4077 = !DILocation(line: 687, column: 82, scope: !4076)
!4078 = !DILocation(line: 687, column: 62, scope: !4076)
!4079 = !DILocation(line: 687, column: 92, scope: !4076)
!4080 = !DILocation(line: 687, column: 62, scope: !689)
!4081 = !DILocation(line: 687, column: 62, scope: !4082)
!4082 = !DILexicalBlockFile(scope: !689, file: !457, discriminator: 2)
!4083 = !DILocation(line: 687, column: 123, scope: !4084)
!4084 = !DILexicalBlockFile(scope: !4076, file: !457, discriminator: 3)
!4085 = !DILocation(line: 687, column: 141, scope: !4076)
!4086 = !DILocation(line: 687, column: 151, scope: !4076)
!4087 = !DILocation(line: 687, column: 176, scope: !4076)
!4088 = !DILocation(line: 687, column: 107, scope: !4076)
!4089 = !DILocation(line: 687, column: 195, scope: !4090)
!4090 = !DILexicalBlockFile(scope: !681, file: !457, discriminator: 4)
!4091 = !DILocation(line: 687, column: 195, scope: !689)
!4092 = !DILocation(line: 687, column: 195, scope: !4093)
!4093 = !DILexicalBlockFile(scope: !689, file: !457, discriminator: 5)
!4094 = !DILocation(line: 689, column: 9, scope: !693)
!4095 = !DILocation(line: 689, column: 16, scope: !693)
!4096 = !DILocation(line: 689, column: 37, scope: !4097)
!4097 = !DILexicalBlockFile(scope: !693, file: !457, discriminator: 1)
!4098 = !DILocation(line: 689, column: 47, scope: !693)
!4099 = !DILocation(line: 689, column: 58, scope: !693)
!4100 = !DILocation(line: 689, column: 67, scope: !693)
!4101 = !DILocation(line: 689, column: 84, scope: !693)
!4102 = !DILocation(line: 689, column: 9, scope: !681)
!4103 = !DILocation(line: 690, column: 25, scope: !692)
!4104 = !DILocation(line: 690, column: 9, scope: !692)
!4105 = !DILocation(line: 692, column: 9, scope: !692)
!4106 = !DILocation(line: 692, column: 14, scope: !4107)
!4107 = !DILexicalBlockFile(scope: !691, file: !457, discriminator: 1)
!4108 = !DILocation(line: 692, column: 24, scope: !691)
!4109 = !DILocation(line: 692, column: 54, scope: !691)
!4110 = !DILocation(line: 692, column: 71, scope: !4111)
!4111 = distinct !DILexicalBlock(scope: !691, file: !457, line: 692, column: 68)
!4112 = !DILocation(line: 692, column: 88, scope: !4111)
!4113 = !DILocation(line: 692, column: 68, scope: !4111)
!4114 = !DILocation(line: 692, column: 98, scope: !4111)
!4115 = !DILocation(line: 692, column: 68, scope: !691)
!4116 = !DILocation(line: 692, column: 68, scope: !4117)
!4117 = !DILexicalBlockFile(scope: !691, file: !457, discriminator: 2)
!4118 = !DILocation(line: 692, column: 129, scope: !4119)
!4119 = !DILexicalBlockFile(scope: !4111, file: !457, discriminator: 3)
!4120 = !DILocation(line: 692, column: 147, scope: !4111)
!4121 = !DILocation(line: 692, column: 157, scope: !4111)
!4122 = !DILocation(line: 692, column: 182, scope: !4111)
!4123 = !DILocation(line: 692, column: 113, scope: !4111)
!4124 = !DILocation(line: 692, column: 201, scope: !4125)
!4125 = !DILexicalBlockFile(scope: !692, file: !457, discriminator: 4)
!4126 = !DILocation(line: 692, column: 201, scope: !691)
!4127 = !DILocation(line: 692, column: 201, scope: !4128)
!4128 = !DILexicalBlockFile(scope: !691, file: !457, discriminator: 5)
!4129 = !DILocation(line: 693, column: 16, scope: !692)
!4130 = !DILocation(line: 694, column: 9, scope: !692)
!4131 = !DILocation(line: 689, column: 88, scope: !4132)
!4132 = !DILexicalBlockFile(scope: !4133, file: !457, discriminator: 3)
!4133 = !DILexicalBlockFile(scope: !693, file: !457, discriminator: 2)
!4134 = !DILocation(line: 698, column: 5, scope: !681)
!4135 = !DILocation(line: 698, column: 10, scope: !4136)
!4136 = !DILexicalBlockFile(scope: !695, file: !457, discriminator: 1)
!4137 = !DILocation(line: 698, column: 20, scope: !695)
!4138 = !DILocation(line: 698, column: 51, scope: !695)
!4139 = !DILocation(line: 698, column: 63, scope: !698)
!4140 = !DILocation(line: 698, column: 79, scope: !698)
!4141 = !DILocation(line: 698, column: 63, scope: !695)
!4142 = !DILocation(line: 698, column: 94, scope: !4143)
!4143 = !DILexicalBlockFile(scope: !698, file: !457, discriminator: 2)
!4144 = !DILocation(line: 698, column: 99, scope: !4145)
!4145 = !DILexicalBlockFile(scope: !697, file: !457, discriminator: 4)
!4146 = !DILocation(line: 698, column: 109, scope: !697)
!4147 = !DILocation(line: 698, column: 139, scope: !697)
!4148 = !DILocation(line: 698, column: 165, scope: !4149)
!4149 = distinct !DILexicalBlock(scope: !697, file: !457, line: 698, column: 162)
!4150 = !DILocation(line: 698, column: 182, scope: !4149)
!4151 = !DILocation(line: 698, column: 162, scope: !4149)
!4152 = !DILocation(line: 698, column: 192, scope: !4149)
!4153 = !DILocation(line: 698, column: 162, scope: !697)
!4154 = !DILocation(line: 698, column: 162, scope: !4155)
!4155 = !DILexicalBlockFile(scope: !697, file: !457, discriminator: 5)
!4156 = !DILocation(line: 698, column: 223, scope: !4157)
!4157 = !DILexicalBlockFile(scope: !4149, file: !457, discriminator: 6)
!4158 = !DILocation(line: 698, column: 241, scope: !4149)
!4159 = !DILocation(line: 698, column: 251, scope: !4149)
!4160 = !DILocation(line: 698, column: 276, scope: !4149)
!4161 = !DILocation(line: 698, column: 207, scope: !4149)
!4162 = !DILocation(line: 698, column: 295, scope: !4163)
!4163 = !DILexicalBlockFile(scope: !698, file: !457, discriminator: 7)
!4164 = !DILocation(line: 698, column: 295, scope: !697)
!4165 = !DILocation(line: 698, column: 295, scope: !4166)
!4166 = !DILexicalBlockFile(scope: !697, file: !457, discriminator: 8)
!4167 = !DILocation(line: 698, column: 295, scope: !4168)
!4168 = !DILexicalBlockFile(scope: !697, file: !457, discriminator: 9)
!4169 = !DILocation(line: 698, column: 308, scope: !4170)
!4170 = !DILexicalBlockFile(scope: !4171, file: !457, discriminator: 10)
!4171 = !DILexicalBlockFile(scope: !681, file: !457, discriminator: 3)
!4172 = !DILocation(line: 698, column: 308, scope: !695)
!4173 = !DILocation(line: 698, column: 308, scope: !4174)
!4174 = !DILexicalBlockFile(scope: !695, file: !457, discriminator: 11)
!4175 = !DILocation(line: 699, column: 12, scope: !681)
!4176 = !DILocation(line: 700, column: 1, scope: !681)
!4177 = !DILocation(line: 699, column: 5, scope: !681)
!4178 = !DILocation(line: 704, column: 26, scope: !699)
!4179 = !DILocation(line: 706, column: 12, scope: !699)
!4180 = !DILocation(line: 706, column: 14, scope: !699)
!4181 = !DILocation(line: 706, column: 17, scope: !4182)
!4182 = !DILexicalBlockFile(scope: !699, file: !457, discriminator: 1)
!4183 = !DILocation(line: 706, column: 20, scope: !699)
!4184 = !DILocation(line: 706, column: 29, scope: !699)
!4185 = !DILocation(line: 706, column: 17, scope: !699)
!4186 = !DILocation(line: 706, column: 42, scope: !699)
!4187 = !DILocation(line: 707, column: 13, scope: !699)
!4188 = !DILocation(line: 707, column: 16, scope: !699)
!4189 = !DILocation(line: 707, column: 25, scope: !699)
!4190 = !DILocation(line: 707, column: 39, scope: !699)
!4191 = !{!2270, !1830, i64 128}
!4192 = !DILocation(line: 707, column: 46, scope: !699)
!4193 = !DILocation(line: 708, column: 9, scope: !699)
!4194 = !DILocation(line: 708, column: 12, scope: !699)
!4195 = !DILocation(line: 708, column: 21, scope: !699)
!4196 = !DILocation(line: 708, column: 35, scope: !699)
!4197 = !{!2270, !1830, i64 144}
!4198 = !DILocation(line: 706, column: 42, scope: !4199)
!4199 = !DILexicalBlockFile(scope: !4200, file: !457, discriminator: 3)
!4200 = !DILexicalBlockFile(scope: !699, file: !457, discriminator: 2)
!4201 = !DILocation(line: 706, column: 5, scope: !699)
!4202 = !DILocation(line: 876, column: 34, scope: !702)
!4203 = !DILocation(line: 876, column: 47, scope: !702)
!4204 = !DILocation(line: 876, column: 69, scope: !702)
!4205 = !DILocation(line: 876, column: 72, scope: !702)
!4206 = !DILocation(line: 876, column: 59, scope: !702)
!4207 = !DILocation(line: 876, column: 52, scope: !702)
!4208 = !DILocation(line: 779, column: 21, scope: !1566)
!4209 = !DILocation(line: 779, column: 34, scope: !1566)
!4210 = !DILocation(line: 779, column: 47, scope: !1566)
!4211 = !DILocation(line: 779, column: 68, scope: !1566)
!4212 = !DILocation(line: 781, column: 5, scope: !1566)
!4213 = !DILocation(line: 781, column: 15, scope: !1566)
!4214 = !DILocation(line: 781, column: 35, scope: !1566)
!4215 = !DILocation(line: 781, column: 38, scope: !1566)
!4216 = !DILocation(line: 781, column: 41, scope: !1566)
!4217 = !DILocation(line: 781, column: 24, scope: !1566)
!4218 = !DILocation(line: 782, column: 9, scope: !1579)
!4219 = !DILocation(line: 782, column: 16, scope: !1579)
!4220 = !DILocation(line: 782, column: 9, scope: !1566)
!4221 = !DILocation(line: 783, column: 9, scope: !1578)
!4222 = !DILocation(line: 783, column: 14, scope: !4223)
!4223 = !DILexicalBlockFile(scope: !1577, file: !457, discriminator: 1)
!4224 = !DILocation(line: 783, column: 24, scope: !1577)
!4225 = !DILocation(line: 783, column: 54, scope: !1577)
!4226 = !DILocation(line: 783, column: 71, scope: !4227)
!4227 = distinct !DILexicalBlock(scope: !1577, file: !457, line: 783, column: 68)
!4228 = !DILocation(line: 783, column: 88, scope: !4227)
!4229 = !DILocation(line: 783, column: 68, scope: !4227)
!4230 = !DILocation(line: 783, column: 98, scope: !4227)
!4231 = !DILocation(line: 783, column: 68, scope: !1577)
!4232 = !DILocation(line: 783, column: 68, scope: !4233)
!4233 = !DILexicalBlockFile(scope: !1577, file: !457, discriminator: 2)
!4234 = !DILocation(line: 783, column: 129, scope: !4235)
!4235 = !DILexicalBlockFile(scope: !4227, file: !457, discriminator: 3)
!4236 = !DILocation(line: 783, column: 147, scope: !4227)
!4237 = !DILocation(line: 783, column: 157, scope: !4227)
!4238 = !DILocation(line: 783, column: 182, scope: !4227)
!4239 = !DILocation(line: 783, column: 113, scope: !4227)
!4240 = !DILocation(line: 783, column: 201, scope: !4241)
!4241 = !DILexicalBlockFile(scope: !1578, file: !457, discriminator: 4)
!4242 = !DILocation(line: 783, column: 201, scope: !1577)
!4243 = !DILocation(line: 783, column: 201, scope: !4244)
!4244 = !DILexicalBlockFile(scope: !1577, file: !457, discriminator: 5)
!4245 = !DILocation(line: 784, column: 33, scope: !1578)
!4246 = !DILocation(line: 784, column: 36, scope: !1578)
!4247 = !DILocation(line: 784, column: 39, scope: !1578)
!4248 = !DILocation(line: 784, column: 16, scope: !1578)
!4249 = !DILocation(line: 784, column: 9, scope: !1578)
!4250 = !DILocation(line: 786, column: 12, scope: !1566)
!4251 = !DILocation(line: 786, column: 5, scope: !1566)
!4252 = !DILocation(line: 787, column: 1, scope: !1566)
!4253 = !DILocation(line: 877, column: 35, scope: !706)
!4254 = !DILocation(line: 877, column: 48, scope: !706)
!4255 = !DILocation(line: 877, column: 70, scope: !706)
!4256 = !DILocation(line: 877, column: 73, scope: !706)
!4257 = !DILocation(line: 877, column: 60, scope: !706)
!4258 = !DILocation(line: 877, column: 53, scope: !706)
!4259 = !DILocation(line: 878, column: 35, scope: !710)
!4260 = !DILocation(line: 878, column: 48, scope: !710)
!4261 = !DILocation(line: 878, column: 70, scope: !710)
!4262 = !DILocation(line: 878, column: 73, scope: !710)
!4263 = !DILocation(line: 878, column: 60, scope: !710)
!4264 = !DILocation(line: 878, column: 53, scope: !710)
!4265 = !DILocation(line: 879, column: 38, scope: !714)
!4266 = !DILocation(line: 879, column: 51, scope: !714)
!4267 = !DILocation(line: 879, column: 73, scope: !714)
!4268 = !DILocation(line: 879, column: 76, scope: !714)
!4269 = !DILocation(line: 879, column: 63, scope: !714)
!4270 = !DILocation(line: 879, column: 56, scope: !714)
!4271 = !DILocation(line: 880, column: 38, scope: !718)
!4272 = !DILocation(line: 880, column: 51, scope: !718)
!4273 = !DILocation(line: 880, column: 73, scope: !718)
!4274 = !DILocation(line: 880, column: 76, scope: !718)
!4275 = !DILocation(line: 880, column: 63, scope: !718)
!4276 = !DILocation(line: 880, column: 56, scope: !718)
!4277 = !DILocation(line: 881, column: 40, scope: !722)
!4278 = !DILocation(line: 881, column: 53, scope: !722)
!4279 = !DILocation(line: 881, column: 75, scope: !722)
!4280 = !DILocation(line: 881, column: 78, scope: !722)
!4281 = !DILocation(line: 881, column: 65, scope: !722)
!4282 = !DILocation(line: 881, column: 58, scope: !722)
!4283 = !DILocation(line: 882, column: 38, scope: !726)
!4284 = !DILocation(line: 882, column: 51, scope: !726)
!4285 = !DILocation(line: 882, column: 73, scope: !726)
!4286 = !DILocation(line: 882, column: 76, scope: !726)
!4287 = !DILocation(line: 882, column: 63, scope: !726)
!4288 = !DILocation(line: 882, column: 56, scope: !726)
!4289 = !DILocation(line: 885, column: 24, scope: !730)
!4290 = !DILocation(line: 885, column: 37, scope: !730)
!4291 = !DILocation(line: 887, column: 5, scope: !730)
!4292 = !DILocation(line: 887, column: 15, scope: !730)
!4293 = !DILocation(line: 887, column: 35, scope: !730)
!4294 = !DILocation(line: 887, column: 38, scope: !730)
!4295 = !DILocation(line: 887, column: 24, scope: !730)
!4296 = !DILocation(line: 888, column: 9, scope: !737)
!4297 = !DILocation(line: 888, column: 16, scope: !737)
!4298 = !DILocation(line: 888, column: 9, scope: !730)
!4299 = !DILocation(line: 889, column: 9, scope: !736)
!4300 = !DILocation(line: 889, column: 28, scope: !736)
!4301 = !DILocation(line: 889, column: 32, scope: !736)
!4302 = !DILocation(line: 889, column: 35, scope: !736)
!4303 = !DILocation(line: 889, column: 44, scope: !736)
!4304 = !DILocation(line: 890, column: 9, scope: !736)
!4305 = !DILocation(line: 890, column: 14, scope: !4306)
!4306 = !DILexicalBlockFile(scope: !739, file: !457, discriminator: 1)
!4307 = !DILocation(line: 890, column: 24, scope: !739)
!4308 = !DILocation(line: 890, column: 54, scope: !739)
!4309 = !DILocation(line: 890, column: 71, scope: !4310)
!4310 = distinct !DILexicalBlock(scope: !739, file: !457, line: 890, column: 68)
!4311 = !DILocation(line: 890, column: 88, scope: !4310)
!4312 = !DILocation(line: 890, column: 68, scope: !4310)
!4313 = !DILocation(line: 890, column: 98, scope: !4310)
!4314 = !DILocation(line: 890, column: 68, scope: !739)
!4315 = !DILocation(line: 890, column: 68, scope: !4316)
!4316 = !DILexicalBlockFile(scope: !739, file: !457, discriminator: 2)
!4317 = !DILocation(line: 890, column: 129, scope: !4318)
!4318 = !DILexicalBlockFile(scope: !4310, file: !457, discriminator: 3)
!4319 = !DILocation(line: 890, column: 147, scope: !4310)
!4320 = !DILocation(line: 890, column: 157, scope: !4310)
!4321 = !DILocation(line: 890, column: 182, scope: !4310)
!4322 = !DILocation(line: 890, column: 113, scope: !4310)
!4323 = !DILocation(line: 890, column: 201, scope: !4324)
!4324 = !DILexicalBlockFile(scope: !736, file: !457, discriminator: 4)
!4325 = !DILocation(line: 890, column: 201, scope: !739)
!4326 = !DILocation(line: 890, column: 201, scope: !4327)
!4327 = !DILexicalBlockFile(scope: !739, file: !457, discriminator: 5)
!4328 = !DILocation(line: 891, column: 13, scope: !4329)
!4329 = distinct !DILexicalBlock(scope: !736, file: !457, line: 891, column: 13)
!4330 = !DILocation(line: 891, column: 15, scope: !4329)
!4331 = !DILocation(line: 891, column: 18, scope: !4332)
!4332 = !DILexicalBlockFile(scope: !4329, file: !457, discriminator: 1)
!4333 = !DILocation(line: 891, column: 21, scope: !4329)
!4334 = !{!1888, !1830, i64 8}
!4335 = !DILocation(line: 891, column: 18, scope: !4329)
!4336 = !DILocation(line: 891, column: 13, scope: !736)
!4337 = !DILocation(line: 892, column: 22, scope: !4338)
!4338 = distinct !DILexicalBlock(scope: !4329, file: !457, line: 891, column: 32)
!4339 = !DILocation(line: 892, column: 25, scope: !4338)
!4340 = !DILocation(line: 892, column: 36, scope: !4338)
!4341 = !DILocation(line: 892, column: 39, scope: !4338)
!4342 = !DILocation(line: 892, column: 20, scope: !4338)
!4343 = !DILocation(line: 892, column: 13, scope: !4338)
!4344 = !DILocation(line: 894, column: 35, scope: !736)
!4345 = !DILocation(line: 894, column: 38, scope: !736)
!4346 = !DILocation(line: 894, column: 18, scope: !736)
!4347 = !DILocation(line: 894, column: 16, scope: !736)
!4348 = !DILocation(line: 895, column: 5, scope: !737)
!4349 = !DILocation(line: 895, column: 5, scope: !4350)
!4350 = !DILexicalBlockFile(scope: !737, file: !457, discriminator: 1)
!4351 = !DILocation(line: 895, column: 5, scope: !736)
!4352 = !DILocation(line: 896, column: 12, scope: !730)
!4353 = !DILocation(line: 896, column: 5, scope: !730)
!4354 = !DILocation(line: 897, column: 1, scope: !730)
!4355 = !DILocation(line: 730, column: 22, scope: !1580)
!4356 = !DILocation(line: 730, column: 35, scope: !1580)
!4357 = !DILocation(line: 730, column: 48, scope: !1580)
!4358 = !DILocation(line: 732, column: 5, scope: !1580)
!4359 = !DILocation(line: 732, column: 15, scope: !1580)
!4360 = !DILocation(line: 733, column: 5, scope: !1580)
!4361 = !DILocation(line: 733, column: 16, scope: !1580)
!4362 = !DILocation(line: 734, column: 5, scope: !1580)
!4363 = !DILocation(line: 734, column: 16, scope: !1580)
!4364 = !DILocation(line: 736, column: 9, scope: !4365)
!4365 = distinct !DILexicalBlock(scope: !1580, file: !457, line: 736, column: 9)
!4366 = !DILocation(line: 736, column: 12, scope: !4365)
!4367 = !DILocation(line: 736, column: 21, scope: !4365)
!4368 = !DILocation(line: 736, column: 34, scope: !4365)
!4369 = !DILocation(line: 736, column: 9, scope: !1580)
!4370 = !DILocation(line: 737, column: 69, scope: !4365)
!4371 = !DILocation(line: 737, column: 35, scope: !4365)
!4372 = !DILocation(line: 737, column: 43, scope: !4365)
!4373 = !DILocation(line: 737, column: 46, scope: !4365)
!4374 = !DILocation(line: 737, column: 55, scope: !4365)
!4375 = !DILocation(line: 737, column: 36, scope: !4365)
!4376 = !DILocation(line: 737, column: 19, scope: !4365)
!4377 = !DILocation(line: 737, column: 18, scope: !4365)
!4378 = !DILocation(line: 737, column: 15, scope: !4365)
!4379 = !DILocation(line: 737, column: 9, scope: !4365)
!4380 = !DILocation(line: 738, column: 9, scope: !4381)
!4381 = distinct !DILexicalBlock(scope: !1580, file: !457, line: 738, column: 9)
!4382 = !DILocation(line: 738, column: 12, scope: !4381)
!4383 = !DILocation(line: 738, column: 23, scope: !4381)
!4384 = !DILocation(line: 738, column: 26, scope: !4381)
!4385 = !DILocation(line: 738, column: 20, scope: !4381)
!4386 = !DILocation(line: 738, column: 34, scope: !4381)
!4387 = !DILocation(line: 739, column: 9, scope: !4381)
!4388 = !DILocation(line: 739, column: 12, scope: !4381)
!4389 = !DILocation(line: 739, column: 21, scope: !4381)
!4390 = !DILocation(line: 739, column: 34, scope: !4381)
!4391 = !DILocation(line: 738, column: 9, scope: !1580)
!4392 = !DILocation(line: 740, column: 69, scope: !4393)
!4393 = distinct !DILexicalBlock(scope: !4381, file: !457, line: 739, column: 49)
!4394 = !DILocation(line: 740, column: 35, scope: !4393)
!4395 = !DILocation(line: 740, column: 43, scope: !4393)
!4396 = !DILocation(line: 740, column: 46, scope: !4393)
!4397 = !DILocation(line: 740, column: 55, scope: !4393)
!4398 = !DILocation(line: 740, column: 36, scope: !4393)
!4399 = !DILocation(line: 740, column: 19, scope: !4393)
!4400 = !DILocation(line: 740, column: 18, scope: !4393)
!4401 = !DILocation(line: 740, column: 15, scope: !4393)
!4402 = !DILocation(line: 741, column: 13, scope: !4403)
!4403 = distinct !DILexicalBlock(scope: !4393, file: !457, line: 741, column: 13)
!4404 = !DILocation(line: 741, column: 22, scope: !4403)
!4405 = !DILocation(line: 741, column: 19, scope: !4403)
!4406 = !DILocation(line: 741, column: 13, scope: !4393)
!4407 = !DILocation(line: 742, column: 19, scope: !4403)
!4408 = !DILocation(line: 742, column: 13, scope: !4403)
!4409 = !DILocation(line: 743, column: 5, scope: !4393)
!4410 = !DILocation(line: 744, column: 9, scope: !1595)
!4411 = !DILocation(line: 744, column: 9, scope: !1580)
!4412 = !DILocation(line: 745, column: 13, scope: !1593)
!4413 = !DILocation(line: 745, column: 19, scope: !1593)
!4414 = !DILocation(line: 745, column: 39, scope: !4415)
!4415 = !DILexicalBlockFile(scope: !1593, file: !457, discriminator: 1)
!4416 = !DILocation(line: 745, column: 42, scope: !1593)
!4417 = !DILocation(line: 745, column: 51, scope: !1593)
!4418 = !DILocation(line: 745, column: 54, scope: !1593)
!4419 = !DILocation(line: 745, column: 22, scope: !1593)
!4420 = !DILocation(line: 745, column: 13, scope: !1594)
!4421 = !DILocation(line: 746, column: 17, scope: !1592)
!4422 = !DILocation(line: 746, column: 23, scope: !1592)
!4423 = !DILocation(line: 746, column: 26, scope: !1592)
!4424 = !DILocation(line: 746, column: 15, scope: !1592)
!4425 = !DILocation(line: 747, column: 17, scope: !4426)
!4426 = distinct !DILexicalBlock(scope: !1592, file: !457, line: 747, column: 17)
!4427 = !DILocation(line: 747, column: 19, scope: !4426)
!4428 = !DILocation(line: 747, column: 17, scope: !1592)
!4429 = !DILocation(line: 748, column: 24, scope: !4426)
!4430 = !DILocation(line: 748, column: 17, scope: !4426)
!4431 = !DILocation(line: 749, column: 13, scope: !1592)
!4432 = !DILocation(line: 749, column: 18, scope: !4433)
!4433 = !DILexicalBlockFile(scope: !1591, file: !457, discriminator: 1)
!4434 = !DILocation(line: 749, column: 28, scope: !1591)
!4435 = !DILocation(line: 749, column: 58, scope: !1591)
!4436 = !DILocation(line: 749, column: 70, scope: !4437)
!4437 = distinct !DILexicalBlock(scope: !1591, file: !457, line: 749, column: 67)
!4438 = !DILocation(line: 749, column: 87, scope: !4437)
!4439 = !DILocation(line: 749, column: 67, scope: !4437)
!4440 = !DILocation(line: 749, column: 97, scope: !4437)
!4441 = !DILocation(line: 749, column: 67, scope: !1591)
!4442 = !DILocation(line: 749, column: 67, scope: !4443)
!4443 = !DILexicalBlockFile(scope: !1591, file: !457, discriminator: 2)
!4444 = !DILocation(line: 749, column: 128, scope: !4445)
!4445 = !DILexicalBlockFile(scope: !4437, file: !457, discriminator: 3)
!4446 = !DILocation(line: 749, column: 146, scope: !4437)
!4447 = !DILocation(line: 749, column: 156, scope: !4437)
!4448 = !DILocation(line: 749, column: 181, scope: !4437)
!4449 = !DILocation(line: 749, column: 112, scope: !4437)
!4450 = !DILocation(line: 749, column: 200, scope: !4451)
!4451 = !DILexicalBlockFile(scope: !1592, file: !457, discriminator: 4)
!4452 = !DILocation(line: 749, column: 200, scope: !1591)
!4453 = !DILocation(line: 749, column: 200, scope: !4454)
!4454 = !DILexicalBlockFile(scope: !1591, file: !457, discriminator: 5)
!4455 = !DILocation(line: 750, column: 19, scope: !1592)
!4456 = !DILocation(line: 751, column: 9, scope: !1592)
!4457 = !DILocation(line: 752, column: 13, scope: !1594)
!4458 = !DILocation(line: 752, column: 19, scope: !1594)
!4459 = !DILocation(line: 752, column: 22, scope: !1594)
!4460 = !DILocation(line: 752, column: 11, scope: !1594)
!4461 = !DILocation(line: 753, column: 13, scope: !4462)
!4462 = distinct !DILexicalBlock(scope: !1594, file: !457, line: 753, column: 13)
!4463 = !DILocation(line: 753, column: 15, scope: !4462)
!4464 = !DILocation(line: 753, column: 13, scope: !1594)
!4465 = !DILocation(line: 754, column: 20, scope: !4462)
!4466 = !DILocation(line: 754, column: 13, scope: !4462)
!4467 = !DILocation(line: 755, column: 9, scope: !1594)
!4468 = !DILocation(line: 755, column: 14, scope: !4469)
!4469 = !DILexicalBlockFile(scope: !1597, file: !457, discriminator: 1)
!4470 = !DILocation(line: 755, column: 24, scope: !1597)
!4471 = !DILocation(line: 755, column: 54, scope: !1597)
!4472 = !DILocation(line: 755, column: 66, scope: !4473)
!4473 = distinct !DILexicalBlock(scope: !1597, file: !457, line: 755, column: 63)
!4474 = !DILocation(line: 755, column: 83, scope: !4473)
!4475 = !DILocation(line: 755, column: 63, scope: !4473)
!4476 = !DILocation(line: 755, column: 93, scope: !4473)
!4477 = !DILocation(line: 755, column: 63, scope: !1597)
!4478 = !DILocation(line: 755, column: 63, scope: !4479)
!4479 = !DILexicalBlockFile(scope: !1597, file: !457, discriminator: 2)
!4480 = !DILocation(line: 755, column: 124, scope: !4481)
!4481 = !DILexicalBlockFile(scope: !4473, file: !457, discriminator: 3)
!4482 = !DILocation(line: 755, column: 142, scope: !4473)
!4483 = !DILocation(line: 755, column: 152, scope: !4473)
!4484 = !DILocation(line: 755, column: 177, scope: !4473)
!4485 = !DILocation(line: 755, column: 108, scope: !4473)
!4486 = !DILocation(line: 755, column: 196, scope: !4487)
!4487 = !DILexicalBlockFile(scope: !1594, file: !457, discriminator: 4)
!4488 = !DILocation(line: 755, column: 196, scope: !1597)
!4489 = !DILocation(line: 755, column: 196, scope: !4490)
!4490 = !DILexicalBlockFile(scope: !1597, file: !457, discriminator: 5)
!4491 = !DILocation(line: 756, column: 5, scope: !1594)
!4492 = !DILocation(line: 757, column: 9, scope: !1601)
!4493 = !DILocation(line: 757, column: 9, scope: !1580)
!4494 = !DILocation(line: 758, column: 13, scope: !1600)
!4495 = !DILocation(line: 758, column: 19, scope: !1600)
!4496 = !DILocation(line: 758, column: 22, scope: !1600)
!4497 = !DILocation(line: 758, column: 11, scope: !1600)
!4498 = !DILocation(line: 759, column: 13, scope: !4499)
!4499 = distinct !DILexicalBlock(scope: !1600, file: !457, line: 759, column: 13)
!4500 = !DILocation(line: 759, column: 15, scope: !4499)
!4501 = !DILocation(line: 759, column: 13, scope: !1600)
!4502 = !DILocation(line: 760, column: 20, scope: !4499)
!4503 = !DILocation(line: 760, column: 13, scope: !4499)
!4504 = !DILocation(line: 761, column: 9, scope: !1600)
!4505 = !DILocation(line: 761, column: 14, scope: !4506)
!4506 = !DILexicalBlockFile(scope: !1599, file: !457, discriminator: 1)
!4507 = !DILocation(line: 761, column: 24, scope: !1599)
!4508 = !DILocation(line: 761, column: 54, scope: !1599)
!4509 = !DILocation(line: 761, column: 66, scope: !4510)
!4510 = distinct !DILexicalBlock(scope: !1599, file: !457, line: 761, column: 63)
!4511 = !DILocation(line: 761, column: 83, scope: !4510)
!4512 = !DILocation(line: 761, column: 63, scope: !4510)
!4513 = !DILocation(line: 761, column: 93, scope: !4510)
!4514 = !DILocation(line: 761, column: 63, scope: !1599)
!4515 = !DILocation(line: 761, column: 63, scope: !4516)
!4516 = !DILexicalBlockFile(scope: !1599, file: !457, discriminator: 2)
!4517 = !DILocation(line: 761, column: 124, scope: !4518)
!4518 = !DILexicalBlockFile(scope: !4510, file: !457, discriminator: 3)
!4519 = !DILocation(line: 761, column: 142, scope: !4510)
!4520 = !DILocation(line: 761, column: 152, scope: !4510)
!4521 = !DILocation(line: 761, column: 177, scope: !4510)
!4522 = !DILocation(line: 761, column: 108, scope: !4510)
!4523 = !DILocation(line: 761, column: 196, scope: !4524)
!4524 = !DILexicalBlockFile(scope: !1600, file: !457, discriminator: 4)
!4525 = !DILocation(line: 761, column: 196, scope: !1599)
!4526 = !DILocation(line: 761, column: 196, scope: !4527)
!4527 = !DILexicalBlockFile(scope: !1599, file: !457, discriminator: 5)
!4528 = !DILocation(line: 762, column: 5, scope: !1600)
!4529 = !DILocation(line: 763, column: 68, scope: !1580)
!4530 = !DILocation(line: 763, column: 5, scope: !1580)
!4531 = !DILocation(line: 764, column: 1, scope: !1580)
!4532 = !DILocation(line: 767, column: 28, scope: !1602)
!4533 = !DILocation(line: 767, column: 41, scope: !1602)
!4534 = !DILocation(line: 767, column: 56, scope: !1602)
!4535 = !DILocation(line: 769, column: 18, scope: !1602)
!4536 = !DILocation(line: 772, column: 18, scope: !1602)
!4537 = !DILocation(line: 773, column: 18, scope: !1602)
!4538 = !DILocation(line: 773, column: 21, scope: !1602)
!4539 = !DILocation(line: 773, column: 30, scope: !1602)
!4540 = !DILocation(line: 774, column: 18, scope: !1602)
!4541 = !DILocation(line: 774, column: 21, scope: !1602)
!4542 = !DILocation(line: 774, column: 30, scope: !1602)
!4543 = !DILocation(line: 769, column: 5, scope: !1602)
!4544 = !DILocation(line: 775, column: 5, scope: !1602)
!4545 = !DILocation(line: 916, column: 29, scope: !740)
!4546 = !DILocation(line: 916, column: 42, scope: !740)
!4547 = !DILocation(line: 918, column: 5, scope: !740)
!4548 = !DILocation(line: 918, column: 15, scope: !740)
!4549 = !DILocation(line: 918, column: 35, scope: !740)
!4550 = !DILocation(line: 918, column: 38, scope: !740)
!4551 = !DILocation(line: 918, column: 24, scope: !740)
!4552 = !DILocation(line: 919, column: 9, scope: !747)
!4553 = !DILocation(line: 919, column: 16, scope: !747)
!4554 = !DILocation(line: 919, column: 9, scope: !740)
!4555 = !DILocation(line: 920, column: 9, scope: !746)
!4556 = !DILocation(line: 920, column: 28, scope: !746)
!4557 = !DILocation(line: 920, column: 33, scope: !746)
!4558 = !DILocation(line: 920, column: 36, scope: !746)
!4559 = !DILocation(line: 920, column: 45, scope: !746)
!4560 = !DILocation(line: 921, column: 9, scope: !746)
!4561 = !DILocation(line: 921, column: 28, scope: !746)
!4562 = !DILocation(line: 921, column: 33, scope: !746)
!4563 = !DILocation(line: 921, column: 36, scope: !746)
!4564 = !DILocation(line: 921, column: 45, scope: !746)
!4565 = !DILocation(line: 922, column: 9, scope: !746)
!4566 = !DILocation(line: 922, column: 14, scope: !4567)
!4567 = !DILexicalBlockFile(scope: !750, file: !457, discriminator: 1)
!4568 = !DILocation(line: 922, column: 24, scope: !750)
!4569 = !DILocation(line: 922, column: 54, scope: !750)
!4570 = !DILocation(line: 922, column: 71, scope: !4571)
!4571 = distinct !DILexicalBlock(scope: !750, file: !457, line: 922, column: 68)
!4572 = !DILocation(line: 922, column: 88, scope: !4571)
!4573 = !DILocation(line: 922, column: 68, scope: !4571)
!4574 = !DILocation(line: 922, column: 98, scope: !4571)
!4575 = !DILocation(line: 922, column: 68, scope: !750)
!4576 = !DILocation(line: 922, column: 68, scope: !4577)
!4577 = !DILexicalBlockFile(scope: !750, file: !457, discriminator: 2)
!4578 = !DILocation(line: 922, column: 129, scope: !4579)
!4579 = !DILexicalBlockFile(scope: !4571, file: !457, discriminator: 3)
!4580 = !DILocation(line: 922, column: 147, scope: !4571)
!4581 = !DILocation(line: 922, column: 157, scope: !4571)
!4582 = !DILocation(line: 922, column: 182, scope: !4571)
!4583 = !DILocation(line: 922, column: 113, scope: !4571)
!4584 = !DILocation(line: 922, column: 201, scope: !4585)
!4585 = !DILexicalBlockFile(scope: !746, file: !457, discriminator: 4)
!4586 = !DILocation(line: 922, column: 201, scope: !750)
!4587 = !DILocation(line: 922, column: 201, scope: !4588)
!4588 = !DILexicalBlockFile(scope: !750, file: !457, discriminator: 5)
!4589 = !DILocation(line: 923, column: 13, scope: !4590)
!4590 = distinct !DILexicalBlock(scope: !746, file: !457, line: 923, column: 13)
!4591 = !DILocation(line: 923, column: 16, scope: !4590)
!4592 = !DILocation(line: 923, column: 19, scope: !4593)
!4593 = !DILexicalBlockFile(scope: !4590, file: !457, discriminator: 1)
!4594 = !DILocation(line: 923, column: 23, scope: !4590)
!4595 = !{!1888, !1830, i64 16}
!4596 = !DILocation(line: 923, column: 19, scope: !4590)
!4597 = !DILocation(line: 923, column: 13, scope: !746)
!4598 = !DILocation(line: 924, column: 36, scope: !4599)
!4599 = distinct !DILexicalBlock(scope: !4590, file: !457, line: 923, column: 34)
!4600 = !DILocation(line: 924, column: 40, scope: !4599)
!4601 = !DILocation(line: 924, column: 51, scope: !4599)
!4602 = !DILocation(line: 924, column: 54, scope: !4599)
!4603 = !DILocation(line: 924, column: 20, scope: !4599)
!4604 = !DILocation(line: 924, column: 13, scope: !4599)
!4605 = !DILocation(line: 926, column: 18, scope: !4606)
!4606 = distinct !DILexicalBlock(scope: !4590, file: !457, line: 926, column: 18)
!4607 = !DILocation(line: 926, column: 21, scope: !4606)
!4608 = !DILocation(line: 926, column: 24, scope: !4609)
!4609 = !DILexicalBlockFile(scope: !4606, file: !457, discriminator: 1)
!4610 = !DILocation(line: 926, column: 28, scope: !4606)
!4611 = !DILocation(line: 926, column: 24, scope: !4606)
!4612 = !DILocation(line: 926, column: 18, scope: !4590)
!4613 = !DILocation(line: 927, column: 36, scope: !4614)
!4614 = distinct !DILexicalBlock(scope: !4606, file: !457, line: 926, column: 39)
!4615 = !DILocation(line: 927, column: 40, scope: !4614)
!4616 = !DILocation(line: 927, column: 51, scope: !4614)
!4617 = !DILocation(line: 927, column: 54, scope: !4614)
!4618 = !DILocation(line: 927, column: 20, scope: !4614)
!4619 = !DILocation(line: 927, column: 13, scope: !4614)
!4620 = !DILocation(line: 929, column: 35, scope: !746)
!4621 = !DILocation(line: 929, column: 38, scope: !746)
!4622 = !DILocation(line: 929, column: 18, scope: !746)
!4623 = !DILocation(line: 929, column: 16, scope: !746)
!4624 = !DILocation(line: 930, column: 5, scope: !747)
!4625 = !DILocation(line: 930, column: 5, scope: !4626)
!4626 = !DILexicalBlockFile(scope: !747, file: !457, discriminator: 1)
!4627 = !DILocation(line: 930, column: 5, scope: !746)
!4628 = !DILocation(line: 931, column: 12, scope: !740)
!4629 = !DILocation(line: 931, column: 5, scope: !740)
!4630 = !DILocation(line: 932, column: 1, scope: !740)
!4631 = !DILocation(line: 900, column: 30, scope: !1609)
!4632 = !DILocation(line: 900, column: 52, scope: !1609)
!4633 = !DILocation(line: 900, column: 67, scope: !1609)
!4634 = !DILocation(line: 902, column: 5, scope: !1609)
!4635 = !DILocation(line: 902, column: 16, scope: !1609)
!4636 = !DILocation(line: 903, column: 11, scope: !4637)
!4637 = distinct !DILexicalBlock(scope: !1609, file: !457, line: 903, column: 9)
!4638 = !DILocation(line: 903, column: 15, scope: !4637)
!4639 = !DILocation(line: 903, column: 24, scope: !4637)
!4640 = !DILocation(line: 903, column: 37, scope: !4637)
!4641 = !DILocation(line: 903, column: 51, scope: !4637)
!4642 = !DILocation(line: 903, column: 55, scope: !4643)
!4643 = !DILexicalBlockFile(scope: !4637, file: !457, discriminator: 1)
!4644 = !DILocation(line: 903, column: 59, scope: !4637)
!4645 = !DILocation(line: 903, column: 68, scope: !4637)
!4646 = !DILocation(line: 903, column: 82, scope: !4637)
!4647 = !DILocation(line: 903, column: 91, scope: !4637)
!4648 = !DILocation(line: 903, column: 9, scope: !1609)
!4649 = !DILocation(line: 904, column: 36, scope: !4650)
!4650 = distinct !DILexicalBlock(scope: !4637, file: !457, line: 903, column: 107)
!4651 = !DILocation(line: 904, column: 39, scope: !4650)
!4652 = !DILocation(line: 904, column: 17, scope: !4650)
!4653 = !DILocation(line: 904, column: 15, scope: !4650)
!4654 = !DILocation(line: 905, column: 13, scope: !4655)
!4655 = distinct !DILexicalBlock(scope: !4650, file: !457, line: 905, column: 13)
!4656 = !DILocation(line: 905, column: 19, scope: !4655)
!4657 = !DILocation(line: 905, column: 25, scope: !4655)
!4658 = !DILocation(line: 905, column: 28, scope: !4659)
!4659 = !DILexicalBlockFile(scope: !4655, file: !457, discriminator: 1)
!4660 = !DILocation(line: 905, column: 13, scope: !4650)
!4661 = !DILocation(line: 906, column: 13, scope: !4655)
!4662 = !DILocation(line: 907, column: 5, scope: !4650)
!4663 = !DILocation(line: 910, column: 55, scope: !4664)
!4664 = distinct !DILexicalBlock(scope: !4637, file: !457, line: 908, column: 10)
!4665 = !DILocation(line: 909, column: 16, scope: !4664)
!4666 = !DILocation(line: 909, column: 9, scope: !4664)
!4667 = !DILocation(line: 912, column: 14, scope: !1609)
!4668 = !DILocation(line: 912, column: 26, scope: !1609)
!4669 = !DILocation(line: 912, column: 31, scope: !1609)
!4670 = !DILocation(line: 912, column: 12, scope: !1609)
!4671 = !DILocation(line: 912, column: 5, scope: !1609)
!4672 = !DILocation(line: 913, column: 1, scope: !1609)
!4673 = !DILocation(line: 935, column: 32, scope: !751)
!4674 = !DILocation(line: 935, column: 45, scope: !751)
!4675 = !DILocation(line: 937, column: 22, scope: !751)
!4676 = !DILocation(line: 937, column: 25, scope: !751)
!4677 = !DILocation(line: 937, column: 12, scope: !751)
!4678 = !DILocation(line: 937, column: 5, scope: !751)
!4679 = !DILocation(line: 941, column: 31, scope: !755)
!4680 = !DILocation(line: 941, column: 44, scope: !755)
!4681 = !DILocation(line: 943, column: 22, scope: !755)
!4682 = !DILocation(line: 943, column: 25, scope: !755)
!4683 = !DILocation(line: 943, column: 12, scope: !755)
!4684 = !DILocation(line: 943, column: 5, scope: !755)
!4685 = !DILocation(line: 947, column: 30, scope: !759)
!4686 = !DILocation(line: 947, column: 43, scope: !759)
!4687 = !DILocation(line: 949, column: 22, scope: !759)
!4688 = !DILocation(line: 949, column: 25, scope: !759)
!4689 = !DILocation(line: 949, column: 12, scope: !759)
!4690 = !DILocation(line: 949, column: 5, scope: !759)
!4691 = !DILocation(line: 953, column: 26, scope: !763)
!4692 = !DILocation(line: 953, column: 39, scope: !763)
!4693 = !DILocation(line: 953, column: 52, scope: !763)
!4694 = !DILocation(line: 955, column: 23, scope: !763)
!4695 = !DILocation(line: 955, column: 26, scope: !763)
!4696 = !DILocation(line: 955, column: 29, scope: !763)
!4697 = !DILocation(line: 955, column: 12, scope: !763)
!4698 = !DILocation(line: 955, column: 5, scope: !763)
!4699 = !DILocation(line: 798, column: 22, scope: !1617)
!4700 = !DILocation(line: 799, column: 22, scope: !1617)
!4701 = !DILocation(line: 800, column: 22, scope: !1617)
!4702 = !DILocation(line: 801, column: 22, scope: !1617)
!4703 = !DILocation(line: 802, column: 24, scope: !1617)
!4704 = !DILocation(line: 804, column: 5, scope: !1617)
!4705 = !DILocation(line: 804, column: 22, scope: !1617)
!4706 = !DILocation(line: 804, column: 27, scope: !1617)
!4707 = !DILocation(line: 804, column: 32, scope: !1617)
!4708 = !DILocation(line: 805, column: 5, scope: !1617)
!4709 = !DILocation(line: 805, column: 15, scope: !1617)
!4710 = !DILocation(line: 806, column: 5, scope: !1617)
!4711 = !DILocation(line: 806, column: 17, scope: !1617)
!4712 = !DILocation(line: 807, column: 5, scope: !1617)
!4713 = !DILocation(line: 807, column: 17, scope: !1617)
!4714 = !DILocation(line: 808, column: 5, scope: !1617)
!4715 = !DILocation(line: 808, column: 17, scope: !1617)
!4716 = !DILocation(line: 810, column: 10, scope: !1617)
!4717 = !DILocation(line: 810, column: 13, scope: !1617)
!4718 = !DILocation(line: 810, column: 22, scope: !1617)
!4719 = !DILocation(line: 810, column: 8, scope: !1617)
!4720 = !DILocation(line: 811, column: 10, scope: !1617)
!4721 = !DILocation(line: 811, column: 13, scope: !1617)
!4722 = !DILocation(line: 811, column: 22, scope: !1617)
!4723 = !DILocation(line: 811, column: 8, scope: !1617)
!4724 = !DILocation(line: 812, column: 9, scope: !4725)
!4725 = distinct !DILexicalBlock(scope: !1617, file: !457, line: 812, column: 9)
!4726 = !DILocation(line: 812, column: 12, scope: !4725)
!4727 = !DILocation(line: 812, column: 9, scope: !1617)
!4728 = !DILocation(line: 813, column: 48, scope: !4725)
!4729 = !DILocation(line: 813, column: 36, scope: !4725)
!4730 = !DILocation(line: 813, column: 44, scope: !4725)
!4731 = !DILocation(line: 813, column: 37, scope: !4725)
!4732 = !DILocation(line: 813, column: 19, scope: !4725)
!4733 = !DILocation(line: 813, column: 18, scope: !4725)
!4734 = !DILocation(line: 813, column: 15, scope: !4725)
!4735 = !DILocation(line: 813, column: 9, scope: !4725)
!4736 = !DILocation(line: 814, column: 9, scope: !4737)
!4737 = distinct !DILexicalBlock(scope: !1617, file: !457, line: 814, column: 9)
!4738 = !DILocation(line: 814, column: 12, scope: !4737)
!4739 = !DILocation(line: 814, column: 23, scope: !4737)
!4740 = !DILocation(line: 814, column: 26, scope: !4737)
!4741 = !DILocation(line: 814, column: 20, scope: !4737)
!4742 = !DILocation(line: 814, column: 34, scope: !4737)
!4743 = !DILocation(line: 815, column: 9, scope: !4737)
!4744 = !DILocation(line: 815, column: 12, scope: !4737)
!4745 = !DILocation(line: 814, column: 9, scope: !1617)
!4746 = !DILocation(line: 816, column: 48, scope: !4747)
!4747 = distinct !DILexicalBlock(scope: !4737, file: !457, line: 815, column: 27)
!4748 = !DILocation(line: 816, column: 36, scope: !4747)
!4749 = !DILocation(line: 816, column: 44, scope: !4747)
!4750 = !DILocation(line: 816, column: 37, scope: !4747)
!4751 = !DILocation(line: 816, column: 19, scope: !4747)
!4752 = !DILocation(line: 816, column: 18, scope: !4747)
!4753 = !DILocation(line: 816, column: 15, scope: !4747)
!4754 = !DILocation(line: 817, column: 13, scope: !4755)
!4755 = distinct !DILexicalBlock(scope: !4747, file: !457, line: 817, column: 13)
!4756 = !DILocation(line: 817, column: 22, scope: !4755)
!4757 = !DILocation(line: 817, column: 19, scope: !4755)
!4758 = !DILocation(line: 817, column: 13, scope: !4747)
!4759 = !DILocation(line: 818, column: 19, scope: !4755)
!4760 = !DILocation(line: 818, column: 13, scope: !4755)
!4761 = !DILocation(line: 819, column: 5, scope: !4747)
!4762 = !DILocation(line: 820, column: 9, scope: !1638)
!4763 = !DILocation(line: 820, column: 9, scope: !1617)
!4764 = !DILocation(line: 821, column: 13, scope: !1636)
!4765 = !DILocation(line: 821, column: 19, scope: !1636)
!4766 = !DILocation(line: 821, column: 39, scope: !4767)
!4767 = !DILexicalBlockFile(scope: !1636, file: !457, discriminator: 1)
!4768 = !DILocation(line: 821, column: 42, scope: !1636)
!4769 = !DILocation(line: 821, column: 51, scope: !1636)
!4770 = !DILocation(line: 821, column: 54, scope: !1636)
!4771 = !DILocation(line: 821, column: 22, scope: !1636)
!4772 = !DILocation(line: 821, column: 13, scope: !1637)
!4773 = !DILocation(line: 822, column: 17, scope: !1635)
!4774 = !DILocation(line: 822, column: 23, scope: !1635)
!4775 = !DILocation(line: 822, column: 26, scope: !1635)
!4776 = !DILocation(line: 822, column: 29, scope: !1635)
!4777 = !DILocation(line: 822, column: 15, scope: !1635)
!4778 = !DILocation(line: 823, column: 17, scope: !4779)
!4779 = distinct !DILexicalBlock(scope: !1635, file: !457, line: 823, column: 17)
!4780 = !DILocation(line: 823, column: 19, scope: !4779)
!4781 = !DILocation(line: 823, column: 17, scope: !1635)
!4782 = !DILocation(line: 824, column: 24, scope: !4779)
!4783 = !DILocation(line: 824, column: 17, scope: !4779)
!4784 = !DILocation(line: 825, column: 13, scope: !1635)
!4785 = !DILocation(line: 825, column: 18, scope: !4786)
!4786 = !DILexicalBlockFile(scope: !1634, file: !457, discriminator: 1)
!4787 = !DILocation(line: 825, column: 28, scope: !1634)
!4788 = !DILocation(line: 825, column: 58, scope: !1634)
!4789 = !DILocation(line: 825, column: 70, scope: !4790)
!4790 = distinct !DILexicalBlock(scope: !1634, file: !457, line: 825, column: 67)
!4791 = !DILocation(line: 825, column: 87, scope: !4790)
!4792 = !DILocation(line: 825, column: 67, scope: !4790)
!4793 = !DILocation(line: 825, column: 97, scope: !4790)
!4794 = !DILocation(line: 825, column: 67, scope: !1634)
!4795 = !DILocation(line: 825, column: 67, scope: !4796)
!4796 = !DILexicalBlockFile(scope: !1634, file: !457, discriminator: 2)
!4797 = !DILocation(line: 825, column: 128, scope: !4798)
!4798 = !DILexicalBlockFile(scope: !4790, file: !457, discriminator: 3)
!4799 = !DILocation(line: 825, column: 146, scope: !4790)
!4800 = !DILocation(line: 825, column: 156, scope: !4790)
!4801 = !DILocation(line: 825, column: 181, scope: !4790)
!4802 = !DILocation(line: 825, column: 112, scope: !4790)
!4803 = !DILocation(line: 825, column: 200, scope: !4804)
!4804 = !DILexicalBlockFile(scope: !1635, file: !457, discriminator: 4)
!4805 = !DILocation(line: 825, column: 200, scope: !1634)
!4806 = !DILocation(line: 825, column: 200, scope: !4807)
!4807 = !DILexicalBlockFile(scope: !1634, file: !457, discriminator: 5)
!4808 = !DILocation(line: 826, column: 19, scope: !1635)
!4809 = !DILocation(line: 827, column: 9, scope: !1635)
!4810 = !DILocation(line: 828, column: 13, scope: !1637)
!4811 = !DILocation(line: 828, column: 19, scope: !1637)
!4812 = !DILocation(line: 828, column: 22, scope: !1637)
!4813 = !DILocation(line: 828, column: 25, scope: !1637)
!4814 = !DILocation(line: 828, column: 11, scope: !1637)
!4815 = !DILocation(line: 829, column: 13, scope: !4816)
!4816 = distinct !DILexicalBlock(scope: !1637, file: !457, line: 829, column: 13)
!4817 = !DILocation(line: 829, column: 15, scope: !4816)
!4818 = !DILocation(line: 829, column: 13, scope: !1637)
!4819 = !DILocation(line: 830, column: 20, scope: !4816)
!4820 = !DILocation(line: 830, column: 13, scope: !4816)
!4821 = !DILocation(line: 831, column: 9, scope: !1637)
!4822 = !DILocation(line: 831, column: 14, scope: !4823)
!4823 = !DILexicalBlockFile(scope: !1640, file: !457, discriminator: 1)
!4824 = !DILocation(line: 831, column: 24, scope: !1640)
!4825 = !DILocation(line: 831, column: 54, scope: !1640)
!4826 = !DILocation(line: 831, column: 66, scope: !4827)
!4827 = distinct !DILexicalBlock(scope: !1640, file: !457, line: 831, column: 63)
!4828 = !DILocation(line: 831, column: 83, scope: !4827)
!4829 = !DILocation(line: 831, column: 63, scope: !4827)
!4830 = !DILocation(line: 831, column: 93, scope: !4827)
!4831 = !DILocation(line: 831, column: 63, scope: !1640)
!4832 = !DILocation(line: 831, column: 63, scope: !4833)
!4833 = !DILexicalBlockFile(scope: !1640, file: !457, discriminator: 2)
!4834 = !DILocation(line: 831, column: 124, scope: !4835)
!4835 = !DILexicalBlockFile(scope: !4827, file: !457, discriminator: 3)
!4836 = !DILocation(line: 831, column: 142, scope: !4827)
!4837 = !DILocation(line: 831, column: 152, scope: !4827)
!4838 = !DILocation(line: 831, column: 177, scope: !4827)
!4839 = !DILocation(line: 831, column: 108, scope: !4827)
!4840 = !DILocation(line: 831, column: 196, scope: !4841)
!4841 = !DILexicalBlockFile(scope: !1637, file: !457, discriminator: 4)
!4842 = !DILocation(line: 831, column: 196, scope: !1640)
!4843 = !DILocation(line: 831, column: 196, scope: !4844)
!4844 = !DILexicalBlockFile(scope: !1640, file: !457, discriminator: 5)
!4845 = !DILocation(line: 832, column: 5, scope: !1637)
!4846 = !DILocation(line: 833, column: 9, scope: !1644)
!4847 = !DILocation(line: 833, column: 9, scope: !1617)
!4848 = !DILocation(line: 834, column: 13, scope: !1643)
!4849 = !DILocation(line: 834, column: 19, scope: !1643)
!4850 = !DILocation(line: 834, column: 22, scope: !1643)
!4851 = !DILocation(line: 834, column: 25, scope: !1643)
!4852 = !DILocation(line: 834, column: 11, scope: !1643)
!4853 = !DILocation(line: 835, column: 13, scope: !4854)
!4854 = distinct !DILexicalBlock(scope: !1643, file: !457, line: 835, column: 13)
!4855 = !DILocation(line: 835, column: 15, scope: !4854)
!4856 = !DILocation(line: 835, column: 13, scope: !1643)
!4857 = !DILocation(line: 836, column: 20, scope: !4854)
!4858 = !DILocation(line: 836, column: 13, scope: !4854)
!4859 = !DILocation(line: 837, column: 9, scope: !1643)
!4860 = !DILocation(line: 837, column: 14, scope: !4861)
!4861 = !DILexicalBlockFile(scope: !1642, file: !457, discriminator: 1)
!4862 = !DILocation(line: 837, column: 24, scope: !1642)
!4863 = !DILocation(line: 837, column: 54, scope: !1642)
!4864 = !DILocation(line: 837, column: 66, scope: !4865)
!4865 = distinct !DILexicalBlock(scope: !1642, file: !457, line: 837, column: 63)
!4866 = !DILocation(line: 837, column: 83, scope: !4865)
!4867 = !DILocation(line: 837, column: 63, scope: !4865)
!4868 = !DILocation(line: 837, column: 93, scope: !4865)
!4869 = !DILocation(line: 837, column: 63, scope: !1642)
!4870 = !DILocation(line: 837, column: 63, scope: !4871)
!4871 = !DILexicalBlockFile(scope: !1642, file: !457, discriminator: 2)
!4872 = !DILocation(line: 837, column: 124, scope: !4873)
!4873 = !DILexicalBlockFile(scope: !4865, file: !457, discriminator: 3)
!4874 = !DILocation(line: 837, column: 142, scope: !4865)
!4875 = !DILocation(line: 837, column: 152, scope: !4865)
!4876 = !DILocation(line: 837, column: 177, scope: !4865)
!4877 = !DILocation(line: 837, column: 108, scope: !4865)
!4878 = !DILocation(line: 837, column: 196, scope: !4879)
!4879 = !DILexicalBlockFile(scope: !1643, file: !457, discriminator: 4)
!4880 = !DILocation(line: 837, column: 196, scope: !1642)
!4881 = !DILocation(line: 837, column: 196, scope: !4882)
!4882 = !DILexicalBlockFile(scope: !1642, file: !457, discriminator: 5)
!4883 = !DILocation(line: 838, column: 5, scope: !1643)
!4884 = !DILocation(line: 839, column: 10, scope: !1617)
!4885 = !DILocation(line: 839, column: 13, scope: !1617)
!4886 = !DILocation(line: 839, column: 22, scope: !1617)
!4887 = !DILocation(line: 839, column: 8, scope: !1617)
!4888 = !DILocation(line: 840, column: 9, scope: !1650)
!4889 = !DILocation(line: 840, column: 12, scope: !1650)
!4890 = !DILocation(line: 840, column: 9, scope: !1617)
!4891 = !DILocation(line: 841, column: 48, scope: !1649)
!4892 = !DILocation(line: 841, column: 36, scope: !1649)
!4893 = !DILocation(line: 841, column: 44, scope: !1649)
!4894 = !DILocation(line: 841, column: 37, scope: !1649)
!4895 = !DILocation(line: 841, column: 19, scope: !1649)
!4896 = !DILocation(line: 841, column: 18, scope: !1649)
!4897 = !DILocation(line: 841, column: 15, scope: !1649)
!4898 = !DILocation(line: 842, column: 13, scope: !4899)
!4899 = distinct !DILexicalBlock(scope: !1649, file: !457, line: 842, column: 13)
!4900 = !DILocation(line: 842, column: 22, scope: !4899)
!4901 = !DILocation(line: 842, column: 19, scope: !4899)
!4902 = !DILocation(line: 842, column: 28, scope: !4899)
!4903 = !DILocation(line: 842, column: 31, scope: !4904)
!4904 = !DILexicalBlockFile(scope: !4899, file: !457, discriminator: 1)
!4905 = !DILocation(line: 842, column: 40, scope: !4899)
!4906 = !DILocation(line: 842, column: 37, scope: !4899)
!4907 = !DILocation(line: 842, column: 13, scope: !1649)
!4908 = !DILocation(line: 843, column: 19, scope: !4899)
!4909 = !DILocation(line: 843, column: 13, scope: !4899)
!4910 = !DILocation(line: 844, column: 13, scope: !1648)
!4911 = !DILocation(line: 844, column: 13, scope: !1649)
!4912 = !DILocation(line: 845, column: 17, scope: !1647)
!4913 = !DILocation(line: 845, column: 23, scope: !1647)
!4914 = !DILocation(line: 845, column: 26, scope: !1647)
!4915 = !DILocation(line: 845, column: 29, scope: !1647)
!4916 = !DILocation(line: 845, column: 15, scope: !1647)
!4917 = !DILocation(line: 846, column: 17, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !1647, file: !457, line: 846, column: 17)
!4919 = !DILocation(line: 846, column: 19, scope: !4918)
!4920 = !DILocation(line: 846, column: 17, scope: !1647)
!4921 = !DILocation(line: 847, column: 24, scope: !4918)
!4922 = !DILocation(line: 847, column: 17, scope: !4918)
!4923 = !DILocation(line: 848, column: 13, scope: !1647)
!4924 = !DILocation(line: 848, column: 18, scope: !4925)
!4925 = !DILexicalBlockFile(scope: !1646, file: !457, discriminator: 1)
!4926 = !DILocation(line: 848, column: 28, scope: !1646)
!4927 = !DILocation(line: 848, column: 58, scope: !1646)
!4928 = !DILocation(line: 848, column: 70, scope: !4929)
!4929 = distinct !DILexicalBlock(scope: !1646, file: !457, line: 848, column: 67)
!4930 = !DILocation(line: 848, column: 87, scope: !4929)
!4931 = !DILocation(line: 848, column: 67, scope: !4929)
!4932 = !DILocation(line: 848, column: 97, scope: !4929)
!4933 = !DILocation(line: 848, column: 67, scope: !1646)
!4934 = !DILocation(line: 848, column: 67, scope: !4935)
!4935 = !DILexicalBlockFile(scope: !1646, file: !457, discriminator: 2)
!4936 = !DILocation(line: 848, column: 128, scope: !4937)
!4937 = !DILexicalBlockFile(scope: !4929, file: !457, discriminator: 3)
!4938 = !DILocation(line: 848, column: 146, scope: !4929)
!4939 = !DILocation(line: 848, column: 156, scope: !4929)
!4940 = !DILocation(line: 848, column: 181, scope: !4929)
!4941 = !DILocation(line: 848, column: 112, scope: !4929)
!4942 = !DILocation(line: 848, column: 200, scope: !4943)
!4943 = !DILexicalBlockFile(scope: !1647, file: !457, discriminator: 4)
!4944 = !DILocation(line: 848, column: 200, scope: !1646)
!4945 = !DILocation(line: 848, column: 200, scope: !4946)
!4946 = !DILexicalBlockFile(scope: !1646, file: !457, discriminator: 5)
!4947 = !DILocation(line: 849, column: 9, scope: !1647)
!4948 = !DILocation(line: 850, column: 5, scope: !1649)
!4949 = !DILocation(line: 852, column: 9, scope: !4950)
!4950 = distinct !DILexicalBlock(scope: !1617, file: !457, line: 852, column: 9)
!4951 = !DILocation(line: 852, column: 11, scope: !4950)
!4952 = !DILocation(line: 852, column: 9, scope: !1617)
!4953 = !DILocation(line: 854, column: 13, scope: !4950)
!4954 = !DILocation(line: 857, column: 13, scope: !4950)
!4955 = !DILocation(line: 857, column: 16, scope: !4950)
!4956 = !DILocation(line: 857, column: 25, scope: !4950)
!4957 = !DILocation(line: 858, column: 13, scope: !4950)
!4958 = !DILocation(line: 858, column: 16, scope: !4950)
!4959 = !DILocation(line: 858, column: 25, scope: !4950)
!4960 = !DILocation(line: 853, column: 9, scope: !4950)
!4961 = !DILocation(line: 861, column: 13, scope: !4950)
!4962 = !DILocation(line: 864, column: 13, scope: !4950)
!4963 = !DILocation(line: 864, column: 16, scope: !4950)
!4964 = !DILocation(line: 864, column: 25, scope: !4950)
!4965 = !DILocation(line: 865, column: 13, scope: !4950)
!4966 = !DILocation(line: 865, column: 16, scope: !4950)
!4967 = !DILocation(line: 865, column: 25, scope: !4950)
!4968 = !DILocation(line: 866, column: 13, scope: !4950)
!4969 = !DILocation(line: 866, column: 16, scope: !4950)
!4970 = !DILocation(line: 866, column: 25, scope: !4950)
!4971 = !DILocation(line: 860, column: 9, scope: !4950)
!4972 = !DILocation(line: 867, column: 5, scope: !1617)
!4973 = !DILocation(line: 868, column: 1, scope: !1617)
!4974 = !DILocation(line: 1009, column: 41, scope: !768)
!4975 = !DILocation(line: 1009, column: 54, scope: !768)
!4976 = !DILocation(line: 1009, column: 77, scope: !768)
!4977 = !DILocation(line: 1009, column: 80, scope: !768)
!4978 = !DILocation(line: 1009, column: 66, scope: !768)
!4979 = !DILocation(line: 1009, column: 59, scope: !768)
!4980 = !DILocation(line: 992, column: 22, scope: !1651)
!4981 = !DILocation(line: 992, column: 35, scope: !1651)
!4982 = !DILocation(line: 992, column: 48, scope: !1651)
!4983 = !DILocation(line: 992, column: 68, scope: !1651)
!4984 = !DILocation(line: 993, column: 29, scope: !1651)
!4985 = !DILocation(line: 995, column: 5, scope: !1651)
!4986 = !DILocation(line: 995, column: 15, scope: !1651)
!4987 = !DILocation(line: 995, column: 36, scope: !1651)
!4988 = !DILocation(line: 995, column: 39, scope: !1651)
!4989 = !DILocation(line: 995, column: 42, scope: !1651)
!4990 = !DILocation(line: 995, column: 52, scope: !1651)
!4991 = !DILocation(line: 995, column: 24, scope: !1651)
!4992 = !DILocation(line: 996, column: 9, scope: !1664)
!4993 = !DILocation(line: 996, column: 16, scope: !1664)
!4994 = !DILocation(line: 996, column: 9, scope: !1651)
!4995 = !DILocation(line: 997, column: 9, scope: !1663)
!4996 = !DILocation(line: 997, column: 14, scope: !4997)
!4997 = !DILexicalBlockFile(scope: !1662, file: !457, discriminator: 1)
!4998 = !DILocation(line: 997, column: 24, scope: !1662)
!4999 = !DILocation(line: 997, column: 54, scope: !1662)
!5000 = !DILocation(line: 997, column: 71, scope: !5001)
!5001 = distinct !DILexicalBlock(scope: !1662, file: !457, line: 997, column: 68)
!5002 = !DILocation(line: 997, column: 88, scope: !5001)
!5003 = !DILocation(line: 997, column: 68, scope: !5001)
!5004 = !DILocation(line: 997, column: 98, scope: !5001)
!5005 = !DILocation(line: 997, column: 68, scope: !1662)
!5006 = !DILocation(line: 997, column: 68, scope: !5007)
!5007 = !DILexicalBlockFile(scope: !1662, file: !457, discriminator: 2)
!5008 = !DILocation(line: 997, column: 129, scope: !5009)
!5009 = !DILexicalBlockFile(scope: !5001, file: !457, discriminator: 3)
!5010 = !DILocation(line: 997, column: 147, scope: !5001)
!5011 = !DILocation(line: 997, column: 157, scope: !5001)
!5012 = !DILocation(line: 997, column: 182, scope: !5001)
!5013 = !DILocation(line: 997, column: 113, scope: !5001)
!5014 = !DILocation(line: 997, column: 201, scope: !5015)
!5015 = !DILexicalBlockFile(scope: !1663, file: !457, discriminator: 4)
!5016 = !DILocation(line: 997, column: 201, scope: !1662)
!5017 = !DILocation(line: 997, column: 201, scope: !5018)
!5018 = !DILexicalBlockFile(scope: !1662, file: !457, discriminator: 5)
!5019 = !DILocation(line: 998, column: 33, scope: !1663)
!5020 = !DILocation(line: 998, column: 36, scope: !1663)
!5021 = !DILocation(line: 998, column: 39, scope: !1663)
!5022 = !DILocation(line: 998, column: 16, scope: !1663)
!5023 = !DILocation(line: 998, column: 9, scope: !1663)
!5024 = !DILocation(line: 1000, column: 12, scope: !1651)
!5025 = !DILocation(line: 1000, column: 5, scope: !1651)
!5026 = !DILocation(line: 1001, column: 1, scope: !1651)
!5027 = !DILocation(line: 1010, column: 42, scope: !772)
!5028 = !DILocation(line: 1010, column: 55, scope: !772)
!5029 = !DILocation(line: 1010, column: 78, scope: !772)
!5030 = !DILocation(line: 1010, column: 81, scope: !772)
!5031 = !DILocation(line: 1010, column: 67, scope: !772)
!5032 = !DILocation(line: 1010, column: 60, scope: !772)
!5033 = !DILocation(line: 1011, column: 42, scope: !776)
!5034 = !DILocation(line: 1011, column: 55, scope: !776)
!5035 = !DILocation(line: 1011, column: 78, scope: !776)
!5036 = !DILocation(line: 1011, column: 81, scope: !776)
!5037 = !DILocation(line: 1011, column: 67, scope: !776)
!5038 = !DILocation(line: 1011, column: 60, scope: !776)
!5039 = !DILocation(line: 1012, column: 45, scope: !780)
!5040 = !DILocation(line: 1012, column: 58, scope: !780)
!5041 = !DILocation(line: 1012, column: 81, scope: !780)
!5042 = !DILocation(line: 1012, column: 84, scope: !780)
!5043 = !DILocation(line: 1012, column: 70, scope: !780)
!5044 = !DILocation(line: 1012, column: 63, scope: !780)
!5045 = !DILocation(line: 1013, column: 45, scope: !784)
!5046 = !DILocation(line: 1013, column: 58, scope: !784)
!5047 = !DILocation(line: 1013, column: 81, scope: !784)
!5048 = !DILocation(line: 1013, column: 84, scope: !784)
!5049 = !DILocation(line: 1013, column: 70, scope: !784)
!5050 = !DILocation(line: 1013, column: 63, scope: !784)
!5051 = !DILocation(line: 1014, column: 47, scope: !788)
!5052 = !DILocation(line: 1014, column: 60, scope: !788)
!5053 = !DILocation(line: 1014, column: 83, scope: !788)
!5054 = !DILocation(line: 1014, column: 86, scope: !788)
!5055 = !DILocation(line: 1014, column: 72, scope: !788)
!5056 = !DILocation(line: 1014, column: 65, scope: !788)
!5057 = !DILocation(line: 1017, column: 39, scope: !792)
!5058 = !DILocation(line: 1017, column: 52, scope: !792)
!5059 = !DILocation(line: 1019, column: 23, scope: !792)
!5060 = !DILocation(line: 1019, column: 26, scope: !792)
!5061 = !DILocation(line: 1019, column: 12, scope: !792)
!5062 = !DILocation(line: 1019, column: 5, scope: !792)
!5063 = !DILocation(line: 1024, column: 38, scope: !796)
!5064 = !DILocation(line: 1024, column: 51, scope: !796)
!5065 = !DILocation(line: 1026, column: 23, scope: !796)
!5066 = !DILocation(line: 1026, column: 26, scope: !796)
!5067 = !DILocation(line: 1026, column: 12, scope: !796)
!5068 = !DILocation(line: 1026, column: 5, scope: !796)
!5069 = !DILocation(line: 1031, column: 31, scope: !800)
!5070 = !DILocation(line: 1031, column: 44, scope: !800)
!5071 = !DILocation(line: 1033, column: 5, scope: !800)
!5072 = !DILocation(line: 1033, column: 15, scope: !800)
!5073 = !DILocation(line: 1033, column: 36, scope: !800)
!5074 = !DILocation(line: 1033, column: 39, scope: !800)
!5075 = !DILocation(line: 1033, column: 24, scope: !800)
!5076 = !DILocation(line: 1035, column: 9, scope: !807)
!5077 = !DILocation(line: 1035, column: 16, scope: !807)
!5078 = !DILocation(line: 1035, column: 9, scope: !800)
!5079 = !DILocation(line: 1036, column: 9, scope: !806)
!5080 = !DILocation(line: 1036, column: 28, scope: !806)
!5081 = !DILocation(line: 1036, column: 32, scope: !806)
!5082 = !DILocation(line: 1036, column: 35, scope: !806)
!5083 = !DILocation(line: 1036, column: 44, scope: !806)
!5084 = !DILocation(line: 1037, column: 9, scope: !806)
!5085 = !DILocation(line: 1037, column: 14, scope: !5086)
!5086 = !DILexicalBlockFile(scope: !809, file: !457, discriminator: 1)
!5087 = !DILocation(line: 1037, column: 24, scope: !809)
!5088 = !DILocation(line: 1037, column: 54, scope: !809)
!5089 = !DILocation(line: 1037, column: 71, scope: !5090)
!5090 = distinct !DILexicalBlock(scope: !809, file: !457, line: 1037, column: 68)
!5091 = !DILocation(line: 1037, column: 88, scope: !5090)
!5092 = !DILocation(line: 1037, column: 68, scope: !5090)
!5093 = !DILocation(line: 1037, column: 98, scope: !5090)
!5094 = !DILocation(line: 1037, column: 68, scope: !809)
!5095 = !DILocation(line: 1037, column: 68, scope: !5096)
!5096 = !DILexicalBlockFile(scope: !809, file: !457, discriminator: 2)
!5097 = !DILocation(line: 1037, column: 129, scope: !5098)
!5098 = !DILexicalBlockFile(scope: !5090, file: !457, discriminator: 3)
!5099 = !DILocation(line: 1037, column: 147, scope: !5090)
!5100 = !DILocation(line: 1037, column: 157, scope: !5090)
!5101 = !DILocation(line: 1037, column: 182, scope: !5090)
!5102 = !DILocation(line: 1037, column: 113, scope: !5090)
!5103 = !DILocation(line: 1037, column: 201, scope: !5104)
!5104 = !DILexicalBlockFile(scope: !806, file: !457, discriminator: 4)
!5105 = !DILocation(line: 1037, column: 201, scope: !809)
!5106 = !DILocation(line: 1037, column: 201, scope: !5107)
!5107 = !DILexicalBlockFile(scope: !809, file: !457, discriminator: 5)
!5108 = !DILocation(line: 1038, column: 13, scope: !812)
!5109 = !DILocation(line: 1038, column: 15, scope: !812)
!5110 = !DILocation(line: 1038, column: 13, scope: !806)
!5111 = !DILocation(line: 1039, column: 13, scope: !811)
!5112 = !DILocation(line: 1039, column: 24, scope: !811)
!5113 = !DILocation(line: 1040, column: 17, scope: !811)
!5114 = !DILocation(line: 1040, column: 20, scope: !811)
!5115 = !{!1888, !1830, i64 64}
!5116 = !DILocation(line: 1040, column: 15, scope: !811)
!5117 = !DILocation(line: 1041, column: 17, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !811, file: !457, line: 1041, column: 17)
!5119 = !DILocation(line: 1041, column: 19, scope: !5118)
!5120 = !DILocation(line: 1041, column: 17, scope: !811)
!5121 = !DILocation(line: 1042, column: 21, scope: !5118)
!5122 = !DILocation(line: 1042, column: 24, scope: !5118)
!5123 = !DILocation(line: 1042, column: 19, scope: !5118)
!5124 = !DILocation(line: 1042, column: 17, scope: !5118)
!5125 = !DILocation(line: 1043, column: 17, scope: !5126)
!5126 = distinct !DILexicalBlock(scope: !811, file: !457, line: 1043, column: 17)
!5127 = !DILocation(line: 1043, column: 19, scope: !5126)
!5128 = !DILocation(line: 1043, column: 17, scope: !811)
!5129 = !DILocation(line: 1044, column: 26, scope: !5126)
!5130 = !DILocation(line: 1044, column: 29, scope: !5126)
!5131 = !DILocation(line: 1044, column: 32, scope: !5126)
!5132 = !DILocation(line: 1044, column: 24, scope: !5126)
!5133 = !DILocation(line: 1044, column: 17, scope: !5126)
!5134 = !DILocation(line: 1045, column: 9, scope: !812)
!5135 = !DILocation(line: 1045, column: 9, scope: !5136)
!5136 = !DILexicalBlockFile(scope: !812, file: !457, discriminator: 1)
!5137 = !DILocation(line: 1045, column: 9, scope: !811)
!5138 = !DILocation(line: 1046, column: 35, scope: !806)
!5139 = !DILocation(line: 1046, column: 38, scope: !806)
!5140 = !DILocation(line: 1046, column: 18, scope: !806)
!5141 = !DILocation(line: 1046, column: 16, scope: !806)
!5142 = !DILocation(line: 1047, column: 5, scope: !807)
!5143 = !DILocation(line: 1047, column: 5, scope: !5144)
!5144 = !DILexicalBlockFile(scope: !807, file: !457, discriminator: 1)
!5145 = !DILocation(line: 1047, column: 5, scope: !806)
!5146 = !DILocation(line: 1048, column: 12, scope: !800)
!5147 = !DILocation(line: 1048, column: 5, scope: !800)
!5148 = !DILocation(line: 1049, column: 1, scope: !800)
!5149 = !DILocation(line: 975, column: 23, scope: !1665)
!5150 = !DILocation(line: 975, column: 36, scope: !1665)
!5151 = !DILocation(line: 975, column: 49, scope: !1665)
!5152 = !DILocation(line: 975, column: 69, scope: !1665)
!5153 = !DILocation(line: 977, column: 5, scope: !1665)
!5154 = !DILocation(line: 977, column: 22, scope: !1665)
!5155 = !DILocation(line: 977, column: 27, scope: !1665)
!5156 = !DILocation(line: 977, column: 30, scope: !1665)
!5157 = !DILocation(line: 977, column: 39, scope: !1665)
!5158 = !DILocation(line: 978, column: 9, scope: !1676)
!5159 = !DILocation(line: 978, column: 12, scope: !1676)
!5160 = !DILocation(line: 978, column: 9, scope: !1665)
!5161 = !DILocation(line: 979, column: 9, scope: !1675)
!5162 = !DILocation(line: 979, column: 20, scope: !1675)
!5163 = !DILocation(line: 979, column: 57, scope: !1675)
!5164 = !DILocation(line: 979, column: 45, scope: !1675)
!5165 = !DILocation(line: 979, column: 53, scope: !1675)
!5166 = !DILocation(line: 979, column: 46, scope: !1675)
!5167 = !DILocation(line: 979, column: 29, scope: !1675)
!5168 = !DILocation(line: 979, column: 28, scope: !1675)
!5169 = !DILocation(line: 980, column: 13, scope: !1679)
!5170 = !DILocation(line: 980, column: 13, scope: !1675)
!5171 = !DILocation(line: 981, column: 13, scope: !1678)
!5172 = !DILocation(line: 981, column: 23, scope: !1678)
!5173 = !DILocation(line: 981, column: 28, scope: !1678)
!5174 = !DILocation(line: 981, column: 34, scope: !1678)
!5175 = !DILocation(line: 981, column: 37, scope: !1678)
!5176 = !DILocation(line: 981, column: 27, scope: !1678)
!5177 = !DILocation(line: 982, column: 17, scope: !5178)
!5178 = distinct !DILexicalBlock(scope: !1678, file: !457, line: 982, column: 17)
!5179 = !DILocation(line: 982, column: 19, scope: !5178)
!5180 = !DILocation(line: 982, column: 17, scope: !1678)
!5181 = !DILocation(line: 983, column: 24, scope: !5182)
!5182 = distinct !DILexicalBlock(scope: !5178, file: !457, line: 982, column: 51)
!5183 = !DILocation(line: 983, column: 17, scope: !5182)
!5184 = !DILocation(line: 985, column: 13, scope: !1678)
!5185 = !DILocation(line: 985, column: 18, scope: !5186)
!5186 = !DILexicalBlockFile(scope: !1681, file: !457, discriminator: 1)
!5187 = !DILocation(line: 985, column: 28, scope: !1681)
!5188 = !DILocation(line: 985, column: 58, scope: !1681)
!5189 = !DILocation(line: 985, column: 70, scope: !5190)
!5190 = distinct !DILexicalBlock(scope: !1681, file: !457, line: 985, column: 67)
!5191 = !DILocation(line: 985, column: 87, scope: !5190)
!5192 = !DILocation(line: 985, column: 67, scope: !5190)
!5193 = !DILocation(line: 985, column: 97, scope: !5190)
!5194 = !DILocation(line: 985, column: 67, scope: !1681)
!5195 = !DILocation(line: 985, column: 67, scope: !5196)
!5196 = !DILexicalBlockFile(scope: !1681, file: !457, discriminator: 2)
!5197 = !DILocation(line: 985, column: 128, scope: !5198)
!5198 = !DILexicalBlockFile(scope: !5190, file: !457, discriminator: 3)
!5199 = !DILocation(line: 985, column: 146, scope: !5190)
!5200 = !DILocation(line: 985, column: 156, scope: !5190)
!5201 = !DILocation(line: 985, column: 181, scope: !5190)
!5202 = !DILocation(line: 985, column: 112, scope: !5190)
!5203 = !DILocation(line: 985, column: 200, scope: !5204)
!5204 = !DILexicalBlockFile(scope: !1678, file: !457, discriminator: 4)
!5205 = !DILocation(line: 985, column: 200, scope: !1681)
!5206 = !DILocation(line: 985, column: 200, scope: !5207)
!5207 = !DILexicalBlockFile(scope: !1681, file: !457, discriminator: 5)
!5208 = !DILocation(line: 986, column: 9, scope: !1679)
!5209 = !DILocation(line: 986, column: 9, scope: !5210)
!5210 = !DILexicalBlockFile(scope: !1679, file: !457, discriminator: 1)
!5211 = !DILocation(line: 986, column: 9, scope: !1678)
!5212 = !DILocation(line: 987, column: 5, scope: !1676)
!5213 = !DILocation(line: 987, column: 5, scope: !5214)
!5214 = !DILexicalBlockFile(scope: !1676, file: !457, discriminator: 1)
!5215 = !DILocation(line: 987, column: 5, scope: !1675)
!5216 = !DILocation(line: 988, column: 23, scope: !1665)
!5217 = !DILocation(line: 988, column: 26, scope: !1665)
!5218 = !DILocation(line: 988, column: 29, scope: !1665)
!5219 = !DILocation(line: 988, column: 12, scope: !1665)
!5220 = !DILocation(line: 988, column: 5, scope: !1665)
!5221 = !DILocation(line: 989, column: 1, scope: !1665)
!5222 = !DILocation(line: 1052, column: 36, scope: !813)
!5223 = !DILocation(line: 1052, column: 49, scope: !813)
!5224 = !DILocation(line: 1054, column: 5, scope: !813)
!5225 = !DILocation(line: 1054, column: 15, scope: !813)
!5226 = !DILocation(line: 1054, column: 36, scope: !813)
!5227 = !DILocation(line: 1054, column: 39, scope: !813)
!5228 = !DILocation(line: 1054, column: 24, scope: !813)
!5229 = !DILocation(line: 1056, column: 9, scope: !820)
!5230 = !DILocation(line: 1056, column: 16, scope: !820)
!5231 = !DILocation(line: 1056, column: 9, scope: !813)
!5232 = !DILocation(line: 1057, column: 9, scope: !819)
!5233 = !DILocation(line: 1057, column: 22, scope: !819)
!5234 = !DILocation(line: 1058, column: 9, scope: !819)
!5235 = !DILocation(line: 1058, column: 28, scope: !819)
!5236 = !DILocation(line: 1058, column: 33, scope: !819)
!5237 = !DILocation(line: 1058, column: 36, scope: !819)
!5238 = !DILocation(line: 1058, column: 45, scope: !819)
!5239 = !DILocation(line: 1059, column: 9, scope: !819)
!5240 = !DILocation(line: 1059, column: 28, scope: !819)
!5241 = !DILocation(line: 1059, column: 33, scope: !819)
!5242 = !DILocation(line: 1059, column: 36, scope: !819)
!5243 = !DILocation(line: 1059, column: 45, scope: !819)
!5244 = !DILocation(line: 1060, column: 9, scope: !819)
!5245 = !DILocation(line: 1060, column: 14, scope: !5246)
!5246 = !DILexicalBlockFile(scope: !824, file: !457, discriminator: 1)
!5247 = !DILocation(line: 1060, column: 24, scope: !824)
!5248 = !DILocation(line: 1060, column: 54, scope: !824)
!5249 = !DILocation(line: 1060, column: 71, scope: !5250)
!5250 = distinct !DILexicalBlock(scope: !824, file: !457, line: 1060, column: 68)
!5251 = !DILocation(line: 1060, column: 88, scope: !5250)
!5252 = !DILocation(line: 1060, column: 68, scope: !5250)
!5253 = !DILocation(line: 1060, column: 98, scope: !5250)
!5254 = !DILocation(line: 1060, column: 68, scope: !824)
!5255 = !DILocation(line: 1060, column: 68, scope: !5256)
!5256 = !DILexicalBlockFile(scope: !824, file: !457, discriminator: 2)
!5257 = !DILocation(line: 1060, column: 129, scope: !5258)
!5258 = !DILexicalBlockFile(scope: !5250, file: !457, discriminator: 3)
!5259 = !DILocation(line: 1060, column: 147, scope: !5250)
!5260 = !DILocation(line: 1060, column: 157, scope: !5250)
!5261 = !DILocation(line: 1060, column: 182, scope: !5250)
!5262 = !DILocation(line: 1060, column: 113, scope: !5250)
!5263 = !DILocation(line: 1060, column: 201, scope: !5264)
!5264 = !DILexicalBlockFile(scope: !819, file: !457, discriminator: 4)
!5265 = !DILocation(line: 1060, column: 201, scope: !824)
!5266 = !DILocation(line: 1060, column: 201, scope: !5267)
!5267 = !DILexicalBlockFile(scope: !824, file: !457, discriminator: 5)
!5268 = !DILocation(line: 1061, column: 13, scope: !5269)
!5269 = distinct !DILexicalBlock(scope: !819, file: !457, line: 1061, column: 13)
!5270 = !DILocation(line: 1061, column: 16, scope: !5269)
!5271 = !DILocation(line: 1061, column: 13, scope: !819)
!5272 = !DILocation(line: 1062, column: 17, scope: !5273)
!5273 = distinct !DILexicalBlock(scope: !5269, file: !457, line: 1061, column: 31)
!5274 = !DILocation(line: 1062, column: 21, scope: !5273)
!5275 = !{!1888, !1830, i64 72}
!5276 = !DILocation(line: 1062, column: 15, scope: !5273)
!5277 = !DILocation(line: 1063, column: 17, scope: !5278)
!5278 = distinct !DILexicalBlock(scope: !5273, file: !457, line: 1063, column: 17)
!5279 = !DILocation(line: 1063, column: 19, scope: !5278)
!5280 = !DILocation(line: 1063, column: 17, scope: !5273)
!5281 = !DILocation(line: 1064, column: 21, scope: !5278)
!5282 = !DILocation(line: 1064, column: 25, scope: !5278)
!5283 = !DILocation(line: 1064, column: 19, scope: !5278)
!5284 = !DILocation(line: 1064, column: 17, scope: !5278)
!5285 = !DILocation(line: 1065, column: 17, scope: !5286)
!5286 = distinct !DILexicalBlock(scope: !5273, file: !457, line: 1065, column: 17)
!5287 = !DILocation(line: 1065, column: 19, scope: !5286)
!5288 = !DILocation(line: 1065, column: 17, scope: !5273)
!5289 = !DILocation(line: 1066, column: 40, scope: !5286)
!5290 = !DILocation(line: 1066, column: 43, scope: !5286)
!5291 = !DILocation(line: 1066, column: 46, scope: !5286)
!5292 = !DILocation(line: 1066, column: 24, scope: !5286)
!5293 = !DILocation(line: 1066, column: 17, scope: !5286)
!5294 = !DILocation(line: 1067, column: 9, scope: !5273)
!5295 = !DILocation(line: 1068, column: 18, scope: !5296)
!5296 = distinct !DILexicalBlock(scope: !5269, file: !457, line: 1068, column: 18)
!5297 = !DILocation(line: 1068, column: 21, scope: !5296)
!5298 = !DILocation(line: 1068, column: 18, scope: !5269)
!5299 = !DILocation(line: 1072, column: 17, scope: !5300)
!5300 = distinct !DILexicalBlock(scope: !5301, file: !457, line: 1072, column: 17)
!5301 = distinct !DILexicalBlock(scope: !5296, file: !457, line: 1068, column: 36)
!5302 = !DILocation(line: 1072, column: 21, scope: !5300)
!5303 = !DILocation(line: 1072, column: 17, scope: !5301)
!5304 = !DILocation(line: 1073, column: 40, scope: !5300)
!5305 = !DILocation(line: 1073, column: 44, scope: !5300)
!5306 = !DILocation(line: 1073, column: 55, scope: !5300)
!5307 = !DILocation(line: 1073, column: 58, scope: !5300)
!5308 = !DILocation(line: 1073, column: 24, scope: !5300)
!5309 = !DILocation(line: 1073, column: 17, scope: !5300)
!5310 = !DILocation(line: 1074, column: 9, scope: !5301)
!5311 = !DILocation(line: 1075, column: 35, scope: !819)
!5312 = !DILocation(line: 1075, column: 38, scope: !819)
!5313 = !DILocation(line: 1075, column: 18, scope: !819)
!5314 = !DILocation(line: 1075, column: 16, scope: !819)
!5315 = !DILocation(line: 1076, column: 5, scope: !820)
!5316 = !DILocation(line: 1076, column: 5, scope: !5317)
!5317 = !DILexicalBlockFile(scope: !820, file: !457, discriminator: 1)
!5318 = !DILocation(line: 1076, column: 5, scope: !819)
!5319 = !DILocation(line: 1077, column: 12, scope: !813)
!5320 = !DILocation(line: 1077, column: 5, scope: !813)
!5321 = !DILocation(line: 1078, column: 1, scope: !813)
!5322 = !DILocation(line: 1081, column: 37, scope: !825)
!5323 = !DILocation(line: 1081, column: 50, scope: !825)
!5324 = !DILocation(line: 1083, column: 23, scope: !825)
!5325 = !DILocation(line: 1083, column: 26, scope: !825)
!5326 = !DILocation(line: 1083, column: 12, scope: !825)
!5327 = !DILocation(line: 1083, column: 5, scope: !825)
!5328 = !DILocation(line: 1088, column: 33, scope: !829)
!5329 = !DILocation(line: 1088, column: 46, scope: !829)
!5330 = !DILocation(line: 1088, column: 59, scope: !829)
!5331 = !DILocation(line: 1090, column: 9, scope: !5332)
!5332 = distinct !DILexicalBlock(scope: !829, file: !457, line: 1090, column: 9)
!5333 = !DILocation(line: 1090, column: 12, scope: !5332)
!5334 = !DILocation(line: 1090, column: 21, scope: !5332)
!5335 = !DILocation(line: 1090, column: 34, scope: !5332)
!5336 = !DILocation(line: 1091, column: 9, scope: !5332)
!5337 = !DILocation(line: 1091, column: 12, scope: !5332)
!5338 = !DILocation(line: 1091, column: 21, scope: !5332)
!5339 = !DILocation(line: 1091, column: 35, scope: !5332)
!5340 = !{!2270, !1830, i64 184}
!5341 = !DILocation(line: 1091, column: 52, scope: !5332)
!5342 = !DILocation(line: 1090, column: 9, scope: !829)
!5343 = !DILocation(line: 1092, column: 27, scope: !5344)
!5344 = distinct !DILexicalBlock(scope: !5332, file: !457, line: 1091, column: 67)
!5345 = !DILocation(line: 1092, column: 30, scope: !5344)
!5346 = !DILocation(line: 1092, column: 33, scope: !5344)
!5347 = !DILocation(line: 1092, column: 16, scope: !5344)
!5348 = !DILocation(line: 1092, column: 9, scope: !5344)
!5349 = !DILocation(line: 1095, column: 27, scope: !5350)
!5350 = distinct !DILexicalBlock(scope: !5332, file: !457, line: 1094, column: 10)
!5351 = !DILocation(line: 1095, column: 30, scope: !5350)
!5352 = !DILocation(line: 1095, column: 33, scope: !5350)
!5353 = !DILocation(line: 1095, column: 16, scope: !5350)
!5354 = !DILocation(line: 1095, column: 9, scope: !5350)
!5355 = !DILocation(line: 1097, column: 1, scope: !829)
!5356 = !DILocation(line: 1103, column: 29, scope: !834)
!5357 = !DILocation(line: 1105, column: 5, scope: !834)
!5358 = !DILocation(line: 1105, column: 22, scope: !834)
!5359 = !DILocation(line: 1107, column: 9, scope: !5360)
!5360 = distinct !DILexicalBlock(scope: !834, file: !457, line: 1107, column: 9)
!5361 = !DILocation(line: 1107, column: 11, scope: !5360)
!5362 = !DILocation(line: 1107, column: 9, scope: !834)
!5363 = !DILocation(line: 1108, column: 16, scope: !5360)
!5364 = !DILocation(line: 1108, column: 9, scope: !5360)
!5365 = !DILocation(line: 1109, column: 9, scope: !834)
!5366 = !DILocation(line: 1109, column: 12, scope: !834)
!5367 = !DILocation(line: 1109, column: 21, scope: !834)
!5368 = !DILocation(line: 1109, column: 7, scope: !834)
!5369 = !DILocation(line: 1110, column: 9, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !834, file: !457, line: 1110, column: 9)
!5371 = !DILocation(line: 1110, column: 11, scope: !5370)
!5372 = !DILocation(line: 1110, column: 14, scope: !5373)
!5373 = !DILexicalBlockFile(scope: !5370, file: !457, discriminator: 1)
!5374 = !DILocation(line: 1110, column: 17, scope: !5370)
!5375 = !{!2270, !1830, i64 48}
!5376 = !DILocation(line: 1110, column: 14, scope: !5370)
!5377 = !DILocation(line: 1110, column: 9, scope: !834)
!5378 = !DILocation(line: 1111, column: 18, scope: !5370)
!5379 = !DILocation(line: 1111, column: 21, scope: !5370)
!5380 = !DILocation(line: 1111, column: 34, scope: !5370)
!5381 = !DILocation(line: 1111, column: 16, scope: !5370)
!5382 = !DILocation(line: 1111, column: 9, scope: !5370)
!5383 = !DILocation(line: 1113, column: 65, scope: !834)
!5384 = !DILocation(line: 1113, column: 12, scope: !834)
!5385 = !DILocation(line: 1113, column: 5, scope: !834)
!5386 = !DILocation(line: 1114, column: 1, scope: !834)
!5387 = !DILocation(line: 1117, column: 29, scope: !838)
!5388 = !DILocation(line: 1119, column: 5, scope: !838)
!5389 = !DILocation(line: 1119, column: 22, scope: !838)
!5390 = !DILocation(line: 1121, column: 9, scope: !5391)
!5391 = distinct !DILexicalBlock(scope: !838, file: !457, line: 1121, column: 9)
!5392 = !DILocation(line: 1121, column: 11, scope: !5391)
!5393 = !DILocation(line: 1121, column: 9, scope: !838)
!5394 = !DILocation(line: 1122, column: 16, scope: !5391)
!5395 = !DILocation(line: 1122, column: 9, scope: !5391)
!5396 = !DILocation(line: 1123, column: 9, scope: !838)
!5397 = !DILocation(line: 1123, column: 12, scope: !838)
!5398 = !DILocation(line: 1123, column: 21, scope: !838)
!5399 = !DILocation(line: 1123, column: 7, scope: !838)
!5400 = !DILocation(line: 1124, column: 9, scope: !5401)
!5401 = distinct !DILexicalBlock(scope: !838, file: !457, line: 1124, column: 9)
!5402 = !DILocation(line: 1124, column: 11, scope: !5401)
!5403 = !DILocation(line: 1124, column: 14, scope: !5404)
!5404 = !DILexicalBlockFile(scope: !5401, file: !457, discriminator: 1)
!5405 = !DILocation(line: 1124, column: 17, scope: !5401)
!5406 = !{!2270, !1830, i64 56}
!5407 = !DILocation(line: 1124, column: 14, scope: !5401)
!5408 = !DILocation(line: 1124, column: 9, scope: !838)
!5409 = !DILocation(line: 1125, column: 18, scope: !5401)
!5410 = !DILocation(line: 1125, column: 21, scope: !5401)
!5411 = !DILocation(line: 1125, column: 34, scope: !5401)
!5412 = !DILocation(line: 1125, column: 16, scope: !5401)
!5413 = !DILocation(line: 1125, column: 9, scope: !5401)
!5414 = !DILocation(line: 1127, column: 65, scope: !838)
!5415 = !DILocation(line: 1127, column: 12, scope: !838)
!5416 = !DILocation(line: 1127, column: 5, scope: !838)
!5417 = !DILocation(line: 1128, column: 1, scope: !838)
!5418 = !DILocation(line: 1131, column: 27, scope: !842)
!5419 = !DILocation(line: 1133, column: 5, scope: !842)
!5420 = !DILocation(line: 1133, column: 22, scope: !842)
!5421 = !DILocation(line: 1135, column: 9, scope: !5422)
!5422 = distinct !DILexicalBlock(scope: !842, file: !457, line: 1135, column: 9)
!5423 = !DILocation(line: 1135, column: 11, scope: !5422)
!5424 = !DILocation(line: 1135, column: 9, scope: !842)
!5425 = !DILocation(line: 1136, column: 16, scope: !5422)
!5426 = !DILocation(line: 1136, column: 9, scope: !5422)
!5427 = !DILocation(line: 1137, column: 9, scope: !842)
!5428 = !DILocation(line: 1137, column: 12, scope: !842)
!5429 = !DILocation(line: 1137, column: 21, scope: !842)
!5430 = !DILocation(line: 1137, column: 7, scope: !842)
!5431 = !DILocation(line: 1138, column: 9, scope: !5432)
!5432 = distinct !DILexicalBlock(scope: !842, file: !457, line: 1138, column: 9)
!5433 = !DILocation(line: 1138, column: 11, scope: !5432)
!5434 = !DILocation(line: 1138, column: 14, scope: !5435)
!5435 = !DILexicalBlockFile(scope: !5432, file: !457, discriminator: 1)
!5436 = !DILocation(line: 1138, column: 17, scope: !5432)
!5437 = !{!2270, !1830, i64 80}
!5438 = !DILocation(line: 1138, column: 14, scope: !5432)
!5439 = !DILocation(line: 1138, column: 9, scope: !842)
!5440 = !DILocation(line: 1139, column: 18, scope: !5432)
!5441 = !DILocation(line: 1139, column: 21, scope: !5432)
!5442 = !DILocation(line: 1139, column: 32, scope: !5432)
!5443 = !DILocation(line: 1139, column: 16, scope: !5432)
!5444 = !DILocation(line: 1139, column: 9, scope: !5432)
!5445 = !DILocation(line: 1141, column: 65, scope: !842)
!5446 = !DILocation(line: 1141, column: 12, scope: !842)
!5447 = !DILocation(line: 1141, column: 5, scope: !842)
!5448 = !DILocation(line: 1142, column: 1, scope: !842)
!5449 = !DILocation(line: 1145, column: 29, scope: !846)
!5450 = !DILocation(line: 1147, column: 5, scope: !846)
!5451 = !DILocation(line: 1147, column: 22, scope: !846)
!5452 = !DILocation(line: 1149, column: 9, scope: !5453)
!5453 = distinct !DILexicalBlock(scope: !846, file: !457, line: 1149, column: 9)
!5454 = !DILocation(line: 1149, column: 11, scope: !5453)
!5455 = !DILocation(line: 1149, column: 9, scope: !846)
!5456 = !DILocation(line: 1150, column: 16, scope: !5453)
!5457 = !DILocation(line: 1150, column: 9, scope: !5453)
!5458 = !DILocation(line: 1151, column: 9, scope: !846)
!5459 = !DILocation(line: 1151, column: 12, scope: !846)
!5460 = !DILocation(line: 1151, column: 21, scope: !846)
!5461 = !DILocation(line: 1151, column: 7, scope: !846)
!5462 = !DILocation(line: 1152, column: 9, scope: !5463)
!5463 = distinct !DILexicalBlock(scope: !846, file: !457, line: 1152, column: 9)
!5464 = !DILocation(line: 1152, column: 11, scope: !5463)
!5465 = !DILocation(line: 1152, column: 14, scope: !5466)
!5466 = !DILexicalBlockFile(scope: !5463, file: !457, discriminator: 1)
!5467 = !DILocation(line: 1152, column: 17, scope: !5463)
!5468 = !{!2270, !1830, i64 64}
!5469 = !DILocation(line: 1152, column: 14, scope: !5463)
!5470 = !DILocation(line: 1152, column: 9, scope: !846)
!5471 = !DILocation(line: 1153, column: 16, scope: !5463)
!5472 = !DILocation(line: 1153, column: 19, scope: !5463)
!5473 = !DILocation(line: 1153, column: 31, scope: !5463)
!5474 = !DILocation(line: 1153, column: 9, scope: !5463)
!5475 = !DILocation(line: 1155, column: 63, scope: !846)
!5476 = !DILocation(line: 1155, column: 12, scope: !846)
!5477 = !DILocation(line: 1155, column: 5, scope: !846)
!5478 = !DILocation(line: 1156, column: 1, scope: !846)
!5479 = !DILocation(line: 1163, column: 26, scope: !850)
!5480 = !DILocation(line: 1165, column: 5, scope: !850)
!5481 = !DILocation(line: 1165, column: 15, scope: !850)
!5482 = !DILocation(line: 1166, column: 9, scope: !5483)
!5483 = distinct !DILexicalBlock(scope: !850, file: !457, line: 1166, column: 9)
!5484 = !DILocation(line: 1166, column: 14, scope: !5483)
!5485 = !DILocation(line: 1166, column: 9, scope: !850)
!5486 = !DILocation(line: 1167, column: 16, scope: !5483)
!5487 = !DILocation(line: 1167, column: 9, scope: !5483)
!5488 = !DILocation(line: 1168, column: 26, scope: !5489)
!5489 = distinct !DILexicalBlock(scope: !850, file: !457, line: 1168, column: 9)
!5490 = !DILocation(line: 1168, column: 34, scope: !5489)
!5491 = !DILocation(line: 1168, column: 45, scope: !5489)
!5492 = !DILocation(line: 1168, column: 54, scope: !5489)
!5493 = !DILocation(line: 1168, column: 71, scope: !5489)
!5494 = !DILocation(line: 1168, column: 9, scope: !850)
!5495 = !DILocation(line: 1169, column: 25, scope: !5496)
!5496 = distinct !DILexicalBlock(scope: !5489, file: !457, line: 1168, column: 78)
!5497 = !DILocation(line: 1169, column: 33, scope: !5496)
!5498 = !DILocation(line: 1169, column: 42, scope: !5496)
!5499 = !DILocation(line: 1170, column: 16, scope: !5496)
!5500 = !DILocation(line: 1170, column: 9, scope: !5496)
!5501 = !DILocation(line: 1172, column: 12, scope: !5502)
!5502 = distinct !DILexicalBlock(scope: !850, file: !457, line: 1172, column: 9)
!5503 = !DILocation(line: 1172, column: 19, scope: !5502)
!5504 = !DILocation(line: 1172, column: 28, scope: !5502)
!5505 = !DILocation(line: 1172, column: 41, scope: !5502)
!5506 = !DILocation(line: 1172, column: 55, scope: !5502)
!5507 = !DILocation(line: 1172, column: 59, scope: !5508)
!5508 = !DILexicalBlockFile(scope: !5502, file: !457, discriminator: 1)
!5509 = !DILocation(line: 1172, column: 66, scope: !5502)
!5510 = !DILocation(line: 1172, column: 75, scope: !5502)
!5511 = !DILocation(line: 1172, column: 89, scope: !5502)
!5512 = !DILocation(line: 1172, column: 98, scope: !5502)
!5513 = !DILocation(line: 1172, column: 9, scope: !850)
!5514 = !DILocation(line: 1173, column: 22, scope: !5515)
!5515 = distinct !DILexicalBlock(scope: !5502, file: !457, line: 1172, column: 114)
!5516 = !DILocation(line: 1175, column: 39, scope: !5515)
!5517 = !DILocation(line: 1175, column: 45, scope: !5515)
!5518 = !DILocation(line: 1175, column: 54, scope: !5515)
!5519 = !DILocation(line: 1173, column: 9, scope: !5515)
!5520 = !DILocation(line: 1176, column: 9, scope: !5515)
!5521 = !DILocation(line: 1178, column: 14, scope: !850)
!5522 = !DILocation(line: 1178, column: 20, scope: !850)
!5523 = !DILocation(line: 1178, column: 29, scope: !850)
!5524 = !DILocation(line: 1178, column: 43, scope: !850)
!5525 = !DILocation(line: 1178, column: 52, scope: !850)
!5526 = !DILocation(line: 1178, column: 12, scope: !850)
!5527 = !DILocation(line: 1179, column: 10, scope: !5528)
!5528 = distinct !DILexicalBlock(scope: !850, file: !457, line: 1179, column: 9)
!5529 = !DILocation(line: 1179, column: 17, scope: !5528)
!5530 = !DILocation(line: 1179, column: 35, scope: !5531)
!5531 = !DILexicalBlockFile(scope: !5528, file: !457, discriminator: 1)
!5532 = !DILocation(line: 1179, column: 45, scope: !5528)
!5533 = !DILocation(line: 1179, column: 54, scope: !5528)
!5534 = !DILocation(line: 1179, column: 9, scope: !850)
!5535 = !DILocation(line: 1180, column: 16, scope: !5528)
!5536 = !DILocation(line: 1180, column: 9, scope: !5528)
!5537 = !DILocation(line: 1181, column: 27, scope: !857)
!5538 = !DILocation(line: 1181, column: 37, scope: !857)
!5539 = !DILocation(line: 1181, column: 48, scope: !857)
!5540 = !DILocation(line: 1181, column: 57, scope: !857)
!5541 = !DILocation(line: 1181, column: 74, scope: !857)
!5542 = !DILocation(line: 1181, column: 9, scope: !850)
!5543 = !DILocation(line: 1182, column: 22, scope: !856)
!5544 = !DILocation(line: 1184, column: 22, scope: !856)
!5545 = !DILocation(line: 1184, column: 30, scope: !856)
!5546 = !DILocation(line: 1184, column: 39, scope: !856)
!5547 = !DILocation(line: 1182, column: 9, scope: !856)
!5548 = !DILocation(line: 1185, column: 9, scope: !856)
!5549 = !DILocation(line: 1185, column: 14, scope: !5550)
!5550 = !DILexicalBlockFile(scope: !855, file: !457, discriminator: 1)
!5551 = !DILocation(line: 1185, column: 24, scope: !855)
!5552 = !DILocation(line: 1185, column: 54, scope: !855)
!5553 = !DILocation(line: 1185, column: 71, scope: !5554)
!5554 = distinct !DILexicalBlock(scope: !855, file: !457, line: 1185, column: 68)
!5555 = !DILocation(line: 1185, column: 88, scope: !5554)
!5556 = !DILocation(line: 1185, column: 68, scope: !5554)
!5557 = !DILocation(line: 1185, column: 98, scope: !5554)
!5558 = !DILocation(line: 1185, column: 68, scope: !855)
!5559 = !DILocation(line: 1185, column: 68, scope: !5560)
!5560 = !DILexicalBlockFile(scope: !855, file: !457, discriminator: 2)
!5561 = !DILocation(line: 1185, column: 129, scope: !5562)
!5562 = !DILexicalBlockFile(scope: !5554, file: !457, discriminator: 3)
!5563 = !DILocation(line: 1185, column: 147, scope: !5554)
!5564 = !DILocation(line: 1185, column: 157, scope: !5554)
!5565 = !DILocation(line: 1185, column: 182, scope: !5554)
!5566 = !DILocation(line: 1185, column: 113, scope: !5554)
!5567 = !DILocation(line: 1185, column: 201, scope: !5568)
!5568 = !DILexicalBlockFile(scope: !856, file: !457, discriminator: 4)
!5569 = !DILocation(line: 1185, column: 201, scope: !855)
!5570 = !DILocation(line: 1185, column: 201, scope: !5571)
!5571 = !DILexicalBlockFile(scope: !855, file: !457, discriminator: 5)
!5572 = !DILocation(line: 1186, column: 9, scope: !856)
!5573 = !DILocation(line: 1189, column: 26, scope: !861)
!5574 = !DILocation(line: 1193, column: 13, scope: !861)
!5575 = !DILocation(line: 1193, column: 21, scope: !861)
!5576 = !DILocation(line: 1193, column: 30, scope: !861)
!5577 = !DILocation(line: 1189, column: 9, scope: !861)
!5578 = !DILocation(line: 1189, column: 9, scope: !850)
!5579 = !DILocation(line: 1194, column: 9, scope: !860)
!5580 = !DILocation(line: 1194, column: 14, scope: !5581)
!5581 = !DILexicalBlockFile(scope: !859, file: !457, discriminator: 1)
!5582 = !DILocation(line: 1194, column: 24, scope: !859)
!5583 = !DILocation(line: 1194, column: 54, scope: !859)
!5584 = !DILocation(line: 1194, column: 71, scope: !5585)
!5585 = distinct !DILexicalBlock(scope: !859, file: !457, line: 1194, column: 68)
!5586 = !DILocation(line: 1194, column: 88, scope: !5585)
!5587 = !DILocation(line: 1194, column: 68, scope: !5585)
!5588 = !DILocation(line: 1194, column: 98, scope: !5585)
!5589 = !DILocation(line: 1194, column: 68, scope: !859)
!5590 = !DILocation(line: 1194, column: 68, scope: !5591)
!5591 = !DILexicalBlockFile(scope: !859, file: !457, discriminator: 2)
!5592 = !DILocation(line: 1194, column: 129, scope: !5593)
!5593 = !DILexicalBlockFile(scope: !5585, file: !457, discriminator: 3)
!5594 = !DILocation(line: 1194, column: 147, scope: !5585)
!5595 = !DILocation(line: 1194, column: 157, scope: !5585)
!5596 = !DILocation(line: 1194, column: 182, scope: !5585)
!5597 = !DILocation(line: 1194, column: 113, scope: !5585)
!5598 = !DILocation(line: 1194, column: 201, scope: !5599)
!5599 = !DILexicalBlockFile(scope: !860, file: !457, discriminator: 4)
!5600 = !DILocation(line: 1194, column: 201, scope: !859)
!5601 = !DILocation(line: 1194, column: 201, scope: !5602)
!5602 = !DILexicalBlockFile(scope: !859, file: !457, discriminator: 5)
!5603 = !DILocation(line: 1195, column: 9, scope: !860)
!5604 = !DILocation(line: 1197, column: 12, scope: !850)
!5605 = !DILocation(line: 1197, column: 5, scope: !850)
!5606 = !DILocation(line: 1198, column: 1, scope: !850)
!5607 = !DILocation(line: 1248, column: 25, scope: !873)
!5608 = !DILocation(line: 1250, column: 5, scope: !873)
!5609 = !DILocation(line: 1250, column: 22, scope: !873)
!5610 = !DILocation(line: 1251, column: 5, scope: !873)
!5611 = !DILocation(line: 1251, column: 15, scope: !873)
!5612 = !DILocation(line: 1252, column: 5, scope: !873)
!5613 = !DILocation(line: 1252, column: 17, scope: !873)
!5614 = !DILocation(line: 1253, column: 5, scope: !873)
!5615 = !DILocation(line: 1253, column: 16, scope: !873)
!5616 = !DILocation(line: 1256, column: 9, scope: !5617)
!5617 = distinct !DILexicalBlock(scope: !873, file: !457, line: 1256, column: 9)
!5618 = !DILocation(line: 1256, column: 11, scope: !5617)
!5619 = !DILocation(line: 1256, column: 9, scope: !873)
!5620 = !DILocation(line: 1257, column: 16, scope: !5617)
!5621 = !DILocation(line: 1257, column: 9, scope: !5617)
!5622 = !DILocation(line: 1258, column: 24, scope: !5623)
!5623 = distinct !DILexicalBlock(scope: !873, file: !457, line: 1258, column: 9)
!5624 = !DILocation(line: 1258, column: 29, scope: !5623)
!5625 = !DILocation(line: 1258, column: 38, scope: !5623)
!5626 = !DILocation(line: 1258, column: 9, scope: !873)
!5627 = !DILocation(line: 1259, column: 25, scope: !5628)
!5628 = distinct !DILexicalBlock(scope: !5623, file: !457, line: 1258, column: 56)
!5629 = !DILocation(line: 1259, column: 30, scope: !5628)
!5630 = !DILocation(line: 1259, column: 39, scope: !5628)
!5631 = !DILocation(line: 1260, column: 16, scope: !5628)
!5632 = !DILocation(line: 1260, column: 9, scope: !5628)
!5633 = !DILocation(line: 1262, column: 9, scope: !873)
!5634 = !DILocation(line: 1262, column: 12, scope: !873)
!5635 = !DILocation(line: 1262, column: 21, scope: !873)
!5636 = !DILocation(line: 1262, column: 7, scope: !873)
!5637 = !DILocation(line: 1263, column: 9, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !873, file: !457, line: 1263, column: 9)
!5639 = !DILocation(line: 1263, column: 11, scope: !5638)
!5640 = !DILocation(line: 1263, column: 14, scope: !5641)
!5641 = !DILexicalBlockFile(scope: !5638, file: !457, discriminator: 1)
!5642 = !DILocation(line: 1263, column: 17, scope: !5638)
!5643 = !DILocation(line: 1263, column: 14, scope: !5638)
!5644 = !DILocation(line: 1263, column: 9, scope: !873)
!5645 = !DILocation(line: 1264, column: 46, scope: !5646)
!5646 = distinct !DILexicalBlock(scope: !5638, file: !457, line: 1263, column: 25)
!5647 = !DILocation(line: 1264, column: 28, scope: !5646)
!5648 = !DILocation(line: 1264, column: 16, scope: !5646)
!5649 = !DILocation(line: 1264, column: 9, scope: !5646)
!5650 = !DILocation(line: 1266, column: 42, scope: !873)
!5651 = !DILocation(line: 1266, column: 18, scope: !873)
!5652 = !DILocation(line: 1266, column: 16, scope: !873)
!5653 = !DILocation(line: 1267, column: 9, scope: !882)
!5654 = !DILocation(line: 1267, column: 9, scope: !873)
!5655 = !DILocation(line: 1268, column: 9, scope: !881)
!5656 = !DILocation(line: 1268, column: 19, scope: !881)
!5657 = !DILocation(line: 1268, column: 61, scope: !881)
!5658 = !DILocation(line: 1268, column: 31, scope: !881)
!5659 = !DILocation(line: 1269, column: 9, scope: !881)
!5660 = !DILocation(line: 1269, column: 19, scope: !881)
!5661 = !DILocation(line: 1270, column: 9, scope: !881)
!5662 = !DILocation(line: 1270, column: 14, scope: !5663)
!5663 = !DILexicalBlockFile(scope: !885, file: !457, discriminator: 1)
!5664 = !DILocation(line: 1270, column: 24, scope: !885)
!5665 = !DILocation(line: 1270, column: 54, scope: !885)
!5666 = !DILocation(line: 1270, column: 75, scope: !5667)
!5667 = distinct !DILexicalBlock(scope: !885, file: !457, line: 1270, column: 72)
!5668 = !DILocation(line: 1270, column: 92, scope: !5667)
!5669 = !DILocation(line: 1270, column: 72, scope: !5667)
!5670 = !DILocation(line: 1270, column: 102, scope: !5667)
!5671 = !DILocation(line: 1270, column: 72, scope: !885)
!5672 = !DILocation(line: 1270, column: 72, scope: !5673)
!5673 = !DILexicalBlockFile(scope: !885, file: !457, discriminator: 2)
!5674 = !DILocation(line: 1270, column: 133, scope: !5675)
!5675 = !DILexicalBlockFile(scope: !5667, file: !457, discriminator: 3)
!5676 = !DILocation(line: 1270, column: 151, scope: !5667)
!5677 = !DILocation(line: 1270, column: 161, scope: !5667)
!5678 = !DILocation(line: 1270, column: 186, scope: !5667)
!5679 = !DILocation(line: 1270, column: 117, scope: !5667)
!5680 = !DILocation(line: 1270, column: 205, scope: !5681)
!5681 = !DILexicalBlockFile(scope: !881, file: !457, discriminator: 4)
!5682 = !DILocation(line: 1270, column: 205, scope: !885)
!5683 = !DILocation(line: 1270, column: 205, scope: !5684)
!5684 = !DILexicalBlockFile(scope: !885, file: !457, discriminator: 5)
!5685 = !DILocation(line: 1271, column: 13, scope: !5686)
!5686 = distinct !DILexicalBlock(scope: !881, file: !457, line: 1271, column: 13)
!5687 = !DILocation(line: 1271, column: 23, scope: !5686)
!5688 = !DILocation(line: 1271, column: 37, scope: !5686)
!5689 = !DILocation(line: 1271, column: 57, scope: !5690)
!5690 = !DILexicalBlockFile(scope: !5686, file: !457, discriminator: 1)
!5691 = !DILocation(line: 1271, column: 70, scope: !5686)
!5692 = !DILocation(line: 1271, column: 81, scope: !5686)
!5693 = !DILocation(line: 1271, column: 90, scope: !5686)
!5694 = !DILocation(line: 1271, column: 107, scope: !5686)
!5695 = !DILocation(line: 1271, column: 13, scope: !881)
!5696 = !DILocation(line: 1272, column: 20, scope: !5686)
!5697 = !DILocation(line: 1272, column: 13, scope: !5686)
!5698 = !DILocation(line: 1275, column: 13, scope: !881)
!5699 = !DILocation(line: 1275, column: 24, scope: !881)
!5700 = !DILocation(line: 1275, column: 33, scope: !881)
!5701 = !DILocation(line: 1275, column: 11, scope: !881)
!5702 = !DILocation(line: 1276, column: 13, scope: !889)
!5703 = !DILocation(line: 1276, column: 15, scope: !889)
!5704 = !DILocation(line: 1276, column: 29, scope: !889)
!5705 = !DILocation(line: 1276, column: 32, scope: !5706)
!5706 = !DILexicalBlockFile(scope: !889, file: !457, discriminator: 1)
!5707 = !DILocation(line: 1276, column: 35, scope: !889)
!5708 = !DILocation(line: 1276, column: 42, scope: !889)
!5709 = !DILocation(line: 1276, column: 13, scope: !881)
!5710 = !DILocation(line: 1278, column: 17, scope: !888)
!5711 = !DILocation(line: 1280, column: 17, scope: !888)
!5712 = !DILocation(line: 1280, column: 28, scope: !888)
!5713 = !DILocation(line: 1280, column: 37, scope: !888)
!5714 = !DILocation(line: 1277, column: 13, scope: !888)
!5715 = !DILocation(line: 1281, column: 13, scope: !888)
!5716 = !DILocation(line: 1281, column: 18, scope: !5717)
!5717 = !DILexicalBlockFile(scope: !887, file: !457, discriminator: 1)
!5718 = !DILocation(line: 1281, column: 28, scope: !887)
!5719 = !DILocation(line: 1281, column: 58, scope: !887)
!5720 = !DILocation(line: 1281, column: 78, scope: !5721)
!5721 = distinct !DILexicalBlock(scope: !887, file: !457, line: 1281, column: 75)
!5722 = !DILocation(line: 1281, column: 95, scope: !5721)
!5723 = !DILocation(line: 1281, column: 75, scope: !5721)
!5724 = !DILocation(line: 1281, column: 105, scope: !5721)
!5725 = !DILocation(line: 1281, column: 75, scope: !887)
!5726 = !DILocation(line: 1281, column: 75, scope: !5727)
!5727 = !DILexicalBlockFile(scope: !887, file: !457, discriminator: 2)
!5728 = !DILocation(line: 1281, column: 136, scope: !5729)
!5729 = !DILexicalBlockFile(scope: !5721, file: !457, discriminator: 3)
!5730 = !DILocation(line: 1281, column: 154, scope: !5721)
!5731 = !DILocation(line: 1281, column: 164, scope: !5721)
!5732 = !DILocation(line: 1281, column: 189, scope: !5721)
!5733 = !DILocation(line: 1281, column: 120, scope: !5721)
!5734 = !DILocation(line: 1281, column: 208, scope: !5735)
!5735 = !DILexicalBlockFile(scope: !888, file: !457, discriminator: 4)
!5736 = !DILocation(line: 1281, column: 208, scope: !887)
!5737 = !DILocation(line: 1281, column: 208, scope: !5738)
!5738 = !DILexicalBlockFile(scope: !887, file: !457, discriminator: 5)
!5739 = !DILocation(line: 1282, column: 13, scope: !888)
!5740 = !DILocation(line: 1284, column: 54, scope: !881)
!5741 = !DILocation(line: 1284, column: 36, scope: !881)
!5742 = !DILocation(line: 1284, column: 24, scope: !881)
!5743 = !DILocation(line: 1284, column: 22, scope: !881)
!5744 = !DILocation(line: 1285, column: 9, scope: !881)
!5745 = !DILocation(line: 1285, column: 14, scope: !5746)
!5746 = !DILexicalBlockFile(scope: !891, file: !457, discriminator: 1)
!5747 = !DILocation(line: 1285, column: 24, scope: !891)
!5748 = !DILocation(line: 1285, column: 54, scope: !891)
!5749 = !DILocation(line: 1285, column: 74, scope: !5750)
!5750 = distinct !DILexicalBlock(scope: !891, file: !457, line: 1285, column: 71)
!5751 = !DILocation(line: 1285, column: 91, scope: !5750)
!5752 = !DILocation(line: 1285, column: 71, scope: !5750)
!5753 = !DILocation(line: 1285, column: 101, scope: !5750)
!5754 = !DILocation(line: 1285, column: 71, scope: !891)
!5755 = !DILocation(line: 1285, column: 71, scope: !5756)
!5756 = !DILexicalBlockFile(scope: !891, file: !457, discriminator: 2)
!5757 = !DILocation(line: 1285, column: 132, scope: !5758)
!5758 = !DILexicalBlockFile(scope: !5750, file: !457, discriminator: 3)
!5759 = !DILocation(line: 1285, column: 150, scope: !5750)
!5760 = !DILocation(line: 1285, column: 160, scope: !5750)
!5761 = !DILocation(line: 1285, column: 185, scope: !5750)
!5762 = !DILocation(line: 1285, column: 116, scope: !5750)
!5763 = !DILocation(line: 1285, column: 204, scope: !5681)
!5764 = !DILocation(line: 1285, column: 204, scope: !891)
!5765 = !DILocation(line: 1285, column: 204, scope: !5766)
!5766 = !DILexicalBlockFile(scope: !891, file: !457, discriminator: 5)
!5767 = !DILocation(line: 1286, column: 16, scope: !881)
!5768 = !DILocation(line: 1286, column: 9, scope: !881)
!5769 = !DILocation(line: 1287, column: 5, scope: !882)
!5770 = !DILocation(line: 1288, column: 9, scope: !5771)
!5771 = distinct !DILexicalBlock(scope: !873, file: !457, line: 1288, column: 9)
!5772 = !DILocation(line: 1288, column: 9, scope: !873)
!5773 = !DILocation(line: 1289, column: 9, scope: !5771)
!5774 = !DILocation(line: 1291, column: 26, scope: !5775)
!5775 = distinct !DILexicalBlock(scope: !873, file: !457, line: 1291, column: 9)
!5776 = !DILocation(line: 1291, column: 31, scope: !5775)
!5777 = !DILocation(line: 1291, column: 42, scope: !5775)
!5778 = !DILocation(line: 1291, column: 51, scope: !5775)
!5779 = !DILocation(line: 1291, column: 68, scope: !5775)
!5780 = !DILocation(line: 1291, column: 9, scope: !873)
!5781 = !DILocation(line: 1296, column: 69, scope: !5775)
!5782 = !DILocation(line: 1296, column: 51, scope: !5775)
!5783 = !DILocation(line: 1296, column: 74, scope: !5775)
!5784 = !DILocation(line: 1296, column: 49, scope: !5775)
!5785 = !DILocation(line: 1297, column: 65, scope: !5775)
!5786 = !DILocation(line: 1297, column: 50, scope: !5775)
!5787 = !DILocation(line: 1297, column: 70, scope: !5775)
!5788 = !{!1878, !1847, i64 16}
!5789 = !DILocation(line: 1296, column: 16, scope: !5775)
!5790 = !DILocation(line: 1296, column: 9, scope: !5775)
!5791 = !DILocation(line: 1298, column: 26, scope: !5792)
!5792 = distinct !DILexicalBlock(scope: !873, file: !457, line: 1298, column: 9)
!5793 = !DILocation(line: 1298, column: 31, scope: !5792)
!5794 = !DILocation(line: 1298, column: 42, scope: !5792)
!5795 = !DILocation(line: 1298, column: 51, scope: !5792)
!5796 = !DILocation(line: 1298, column: 68, scope: !5792)
!5797 = !DILocation(line: 1298, column: 9, scope: !873)
!5798 = !DILocation(line: 1300, column: 41, scope: !5792)
!5799 = !DILocation(line: 1300, column: 16, scope: !5792)
!5800 = !DILocation(line: 1300, column: 9, scope: !5792)
!5801 = !DILocation(line: 1301, column: 32, scope: !5802)
!5802 = distinct !DILexicalBlock(scope: !873, file: !457, line: 1301, column: 9)
!5803 = !DILocation(line: 1301, column: 10, scope: !5802)
!5804 = !DILocation(line: 1301, column: 9, scope: !873)
!5805 = !DILocation(line: 1302, column: 34, scope: !5802)
!5806 = !DILocation(line: 1302, column: 42, scope: !5802)
!5807 = !DILocation(line: 1302, column: 16, scope: !5802)
!5808 = !DILocation(line: 1302, column: 9, scope: !5802)
!5809 = !DILocation(line: 1305, column: 47, scope: !873)
!5810 = !DILocation(line: 1304, column: 12, scope: !873)
!5811 = !DILocation(line: 1304, column: 5, scope: !873)
!5812 = !DILocation(line: 1306, column: 1, scope: !873)
!5813 = !DILocation(line: 1309, column: 26, scope: !892)
!5814 = !DILocation(line: 1311, column: 5, scope: !892)
!5815 = !DILocation(line: 1311, column: 22, scope: !892)
!5816 = !DILocation(line: 1313, column: 9, scope: !5817)
!5817 = distinct !DILexicalBlock(scope: !892, file: !457, line: 1313, column: 9)
!5818 = !DILocation(line: 1313, column: 11, scope: !5817)
!5819 = !DILocation(line: 1313, column: 9, scope: !892)
!5820 = !DILocation(line: 1314, column: 16, scope: !5817)
!5821 = !DILocation(line: 1314, column: 9, scope: !5817)
!5822 = !DILocation(line: 1315, column: 9, scope: !892)
!5823 = !DILocation(line: 1315, column: 12, scope: !892)
!5824 = !DILocation(line: 1315, column: 21, scope: !892)
!5825 = !DILocation(line: 1315, column: 7, scope: !892)
!5826 = !DILocation(line: 1316, column: 9, scope: !898)
!5827 = !DILocation(line: 1316, column: 11, scope: !898)
!5828 = !DILocation(line: 1316, column: 14, scope: !5829)
!5829 = !DILexicalBlockFile(scope: !898, file: !457, discriminator: 1)
!5830 = !DILocation(line: 1316, column: 17, scope: !898)
!5831 = !DILocation(line: 1316, column: 14, scope: !898)
!5832 = !DILocation(line: 1316, column: 9, scope: !892)
!5833 = !DILocation(line: 1317, column: 9, scope: !897)
!5834 = !DILocation(line: 1317, column: 19, scope: !897)
!5835 = !DILocation(line: 1317, column: 25, scope: !897)
!5836 = !DILocation(line: 1317, column: 28, scope: !897)
!5837 = !DILocation(line: 1317, column: 37, scope: !897)
!5838 = !DILocation(line: 1318, column: 13, scope: !902)
!5839 = !DILocation(line: 1318, column: 17, scope: !902)
!5840 = !DILocation(line: 1318, column: 36, scope: !5841)
!5841 = !DILexicalBlockFile(scope: !902, file: !457, discriminator: 1)
!5842 = !DILocation(line: 1318, column: 43, scope: !902)
!5843 = !DILocation(line: 1318, column: 52, scope: !902)
!5844 = !DILocation(line: 1318, column: 71, scope: !902)
!5845 = !DILocation(line: 1318, column: 105, scope: !5846)
!5846 = !DILexicalBlockFile(scope: !902, file: !457, discriminator: 2)
!5847 = !DILocation(line: 1318, column: 112, scope: !902)
!5848 = !DILocation(line: 1318, column: 74, scope: !902)
!5849 = !DILocation(line: 1318, column: 13, scope: !897)
!5850 = !DILocation(line: 1319, column: 26, scope: !901)
!5851 = !DILocation(line: 1321, column: 15, scope: !901)
!5852 = !DILocation(line: 1321, column: 20, scope: !901)
!5853 = !DILocation(line: 1321, column: 29, scope: !901)
!5854 = !DILocation(line: 1319, column: 13, scope: !901)
!5855 = !DILocation(line: 1322, column: 13, scope: !901)
!5856 = !DILocation(line: 1322, column: 18, scope: !5857)
!5857 = !DILexicalBlockFile(scope: !900, file: !457, discriminator: 1)
!5858 = !DILocation(line: 1322, column: 28, scope: !900)
!5859 = !DILocation(line: 1322, column: 58, scope: !900)
!5860 = !DILocation(line: 1322, column: 72, scope: !5861)
!5861 = distinct !DILexicalBlock(scope: !900, file: !457, line: 1322, column: 69)
!5862 = !DILocation(line: 1322, column: 89, scope: !5861)
!5863 = !DILocation(line: 1322, column: 69, scope: !5861)
!5864 = !DILocation(line: 1322, column: 99, scope: !5861)
!5865 = !DILocation(line: 1322, column: 69, scope: !900)
!5866 = !DILocation(line: 1322, column: 69, scope: !5867)
!5867 = !DILexicalBlockFile(scope: !900, file: !457, discriminator: 2)
!5868 = !DILocation(line: 1322, column: 130, scope: !5869)
!5869 = !DILexicalBlockFile(scope: !5861, file: !457, discriminator: 3)
!5870 = !DILocation(line: 1322, column: 148, scope: !5861)
!5871 = !DILocation(line: 1322, column: 158, scope: !5861)
!5872 = !DILocation(line: 1322, column: 183, scope: !5861)
!5873 = !DILocation(line: 1322, column: 114, scope: !5861)
!5874 = !DILocation(line: 1322, column: 202, scope: !5875)
!5875 = !DILexicalBlockFile(scope: !901, file: !457, discriminator: 4)
!5876 = !DILocation(line: 1322, column: 202, scope: !900)
!5877 = !DILocation(line: 1322, column: 202, scope: !5878)
!5878 = !DILexicalBlockFile(scope: !900, file: !457, discriminator: 5)
!5879 = !DILocation(line: 1323, column: 13, scope: !901)
!5880 = !DILocation(line: 1325, column: 16, scope: !897)
!5881 = !DILocation(line: 1325, column: 9, scope: !897)
!5882 = !DILocation(line: 1326, column: 5, scope: !898)
!5883 = !DILocation(line: 1327, column: 24, scope: !905)
!5884 = !DILocation(line: 1327, column: 29, scope: !905)
!5885 = !DILocation(line: 1327, column: 38, scope: !905)
!5886 = !DILocation(line: 1327, column: 57, scope: !905)
!5887 = !DILocation(line: 1327, column: 91, scope: !5888)
!5888 = !DILexicalBlockFile(scope: !905, file: !457, discriminator: 1)
!5889 = !DILocation(line: 1327, column: 96, scope: !905)
!5890 = !DILocation(line: 1327, column: 60, scope: !905)
!5891 = !DILocation(line: 1327, column: 9, scope: !892)
!5892 = !DILocation(line: 1328, column: 9, scope: !904)
!5893 = !DILocation(line: 1328, column: 24, scope: !904)
!5894 = !DILocation(line: 1328, column: 46, scope: !904)
!5895 = !DILocation(line: 1328, column: 29, scope: !904)
!5896 = !DILocation(line: 1329, column: 35, scope: !904)
!5897 = !DILocation(line: 1329, column: 39, scope: !904)
!5898 = !{!5899, !5900, i64 16}
!5899 = !{!"", !1846, i64 0, !5900, i64 16}
!5900 = !{!"double", !1831, i64 0}
!5901 = !DILocation(line: 1329, column: 16, scope: !904)
!5902 = !DILocation(line: 1329, column: 9, scope: !904)
!5903 = !DILocation(line: 1330, column: 5, scope: !905)
!5904 = !DILocation(line: 1331, column: 31, scope: !892)
!5905 = !DILocation(line: 1331, column: 12, scope: !892)
!5906 = !DILocation(line: 1331, column: 5, scope: !892)
!5907 = !DILocation(line: 1332, column: 1, scope: !892)
!5908 = !DILocation(line: 1336, column: 27, scope: !906)
!5909 = !DILocation(line: 1336, column: 34, scope: !906)
!5910 = !DILocation(line: 1338, column: 5, scope: !906)
!5911 = !DILocation(line: 1338, column: 15, scope: !906)
!5912 = !DILocation(line: 1339, column: 5, scope: !906)
!5913 = !DILocation(line: 1339, column: 15, scope: !906)
!5914 = !DILocation(line: 1339, column: 38, scope: !906)
!5915 = !DILocation(line: 1339, column: 23, scope: !906)
!5916 = !DILocation(line: 1341, column: 10, scope: !5917)
!5917 = distinct !DILexicalBlock(scope: !906, file: !457, line: 1341, column: 9)
!5918 = !DILocation(line: 1341, column: 9, scope: !906)
!5919 = !DILocation(line: 1342, column: 9, scope: !5917)
!5920 = !DILocation(line: 1343, column: 26, scope: !5921)
!5921 = distinct !DILexicalBlock(scope: !906, file: !457, line: 1343, column: 9)
!5922 = !DILocation(line: 1343, column: 35, scope: !5921)
!5923 = !DILocation(line: 1343, column: 46, scope: !5921)
!5924 = !DILocation(line: 1343, column: 55, scope: !5921)
!5925 = !DILocation(line: 1343, column: 72, scope: !5921)
!5926 = !DILocation(line: 1343, column: 9, scope: !906)
!5927 = !DILocation(line: 1344, column: 30, scope: !5921)
!5928 = !DILocation(line: 1344, column: 37, scope: !5921)
!5929 = !DILocation(line: 1344, column: 15, scope: !5921)
!5930 = !DILocation(line: 1344, column: 13, scope: !5921)
!5931 = !DILocation(line: 1344, column: 9, scope: !5921)
!5932 = !DILocation(line: 1349, column: 25, scope: !5921)
!5933 = !DILocation(line: 1349, column: 9, scope: !5921)
!5934 = !DILocation(line: 1350, column: 5, scope: !906)
!5935 = !DILocation(line: 1350, column: 10, scope: !5936)
!5936 = !DILexicalBlockFile(scope: !915, file: !457, discriminator: 1)
!5937 = !DILocation(line: 1350, column: 20, scope: !915)
!5938 = !DILocation(line: 1350, column: 50, scope: !915)
!5939 = !DILocation(line: 1350, column: 66, scope: !5940)
!5940 = distinct !DILexicalBlock(scope: !915, file: !457, line: 1350, column: 63)
!5941 = !DILocation(line: 1350, column: 83, scope: !5940)
!5942 = !DILocation(line: 1350, column: 63, scope: !5940)
!5943 = !DILocation(line: 1350, column: 93, scope: !5940)
!5944 = !DILocation(line: 1350, column: 63, scope: !915)
!5945 = !DILocation(line: 1350, column: 63, scope: !5946)
!5946 = !DILexicalBlockFile(scope: !915, file: !457, discriminator: 2)
!5947 = !DILocation(line: 1350, column: 124, scope: !5948)
!5948 = !DILexicalBlockFile(scope: !5940, file: !457, discriminator: 3)
!5949 = !DILocation(line: 1350, column: 142, scope: !5940)
!5950 = !DILocation(line: 1350, column: 152, scope: !5940)
!5951 = !DILocation(line: 1350, column: 177, scope: !5940)
!5952 = !DILocation(line: 1350, column: 108, scope: !5940)
!5953 = !DILocation(line: 1350, column: 196, scope: !5954)
!5954 = !DILexicalBlockFile(scope: !906, file: !457, discriminator: 4)
!5955 = !DILocation(line: 1350, column: 196, scope: !915)
!5956 = !DILocation(line: 1350, column: 196, scope: !5957)
!5957 = !DILexicalBlockFile(scope: !915, file: !457, discriminator: 5)
!5958 = !DILocation(line: 1351, column: 12, scope: !906)
!5959 = !DILocation(line: 1351, column: 5, scope: !906)
!5960 = !DILocation(line: 1352, column: 1, scope: !906)
!5961 = !DILocation(line: 1358, column: 28, scope: !916)
!5962 = !DILocation(line: 1360, column: 26, scope: !5963)
!5963 = distinct !DILexicalBlock(scope: !916, file: !457, line: 1360, column: 9)
!5964 = !DILocation(line: 1360, column: 31, scope: !5963)
!5965 = !DILocation(line: 1360, column: 42, scope: !5963)
!5966 = !DILocation(line: 1360, column: 51, scope: !5963)
!5967 = !DILocation(line: 1360, column: 68, scope: !5963)
!5968 = !DILocation(line: 1360, column: 9, scope: !916)
!5969 = !DILocation(line: 1361, column: 9, scope: !5963)
!5970 = !DILocation(line: 1362, column: 12, scope: !916)
!5971 = !DILocation(line: 1362, column: 14, scope: !916)
!5972 = !DILocation(line: 1362, column: 28, scope: !916)
!5973 = !DILocation(line: 1362, column: 31, scope: !5974)
!5974 = !DILexicalBlockFile(scope: !916, file: !457, discriminator: 1)
!5975 = !DILocation(line: 1362, column: 34, scope: !916)
!5976 = !DILocation(line: 1362, column: 43, scope: !916)
!5977 = !DILocation(line: 1362, column: 31, scope: !916)
!5978 = !DILocation(line: 1362, column: 58, scope: !916)
!5979 = !DILocation(line: 1363, column: 9, scope: !916)
!5980 = !DILocation(line: 1363, column: 12, scope: !916)
!5981 = !DILocation(line: 1363, column: 21, scope: !916)
!5982 = !DILocation(line: 1363, column: 37, scope: !916)
!5983 = !DILocation(line: 1363, column: 45, scope: !916)
!5984 = !DILocation(line: 1362, column: 58, scope: !5985)
!5985 = !DILexicalBlockFile(scope: !5986, file: !457, discriminator: 3)
!5986 = !DILexicalBlockFile(scope: !916, file: !457, discriminator: 2)
!5987 = !DILocation(line: 1362, column: 5, scope: !916)
!5988 = !DILocation(line: 1364, column: 1, scope: !916)
!5989 = !DILocation(line: 1367, column: 27, scope: !919)
!5990 = !DILocation(line: 1369, column: 5, scope: !919)
!5991 = !DILocation(line: 1369, column: 24, scope: !919)
!5992 = !DILocation(line: 1371, column: 9, scope: !5993)
!5993 = distinct !DILexicalBlock(scope: !919, file: !457, line: 1371, column: 9)
!5994 = !DILocation(line: 1371, column: 11, scope: !5993)
!5995 = !DILocation(line: 1371, column: 9, scope: !919)
!5996 = !DILocation(line: 1372, column: 9, scope: !5997)
!5997 = distinct !DILexicalBlock(scope: !5993, file: !457, line: 1371, column: 26)
!5998 = !DILocation(line: 1373, column: 9, scope: !5997)
!5999 = !DILocation(line: 1376, column: 9, scope: !919)
!6000 = !DILocation(line: 1376, column: 12, scope: !919)
!6001 = !DILocation(line: 1376, column: 21, scope: !919)
!6002 = !DILocation(line: 1376, column: 7, scope: !919)
!6003 = !DILocation(line: 1377, column: 9, scope: !6004)
!6004 = distinct !DILexicalBlock(scope: !919, file: !457, line: 1377, column: 9)
!6005 = !DILocation(line: 1377, column: 11, scope: !6004)
!6006 = !DILocation(line: 1377, column: 14, scope: !6007)
!6007 = !DILexicalBlockFile(scope: !6004, file: !457, discriminator: 1)
!6008 = !DILocation(line: 1377, column: 17, scope: !6004)
!6009 = !DILocation(line: 1377, column: 14, scope: !6004)
!6010 = !DILocation(line: 1377, column: 9, scope: !919)
!6011 = !DILocation(line: 1378, column: 16, scope: !6004)
!6012 = !DILocation(line: 1378, column: 19, scope: !6004)
!6013 = !DILocation(line: 1378, column: 29, scope: !6004)
!6014 = !DILocation(line: 1378, column: 9, scope: !6004)
!6015 = !DILocation(line: 1380, column: 56, scope: !919)
!6016 = !DILocation(line: 1380, column: 5, scope: !919)
!6017 = !DILocation(line: 1381, column: 5, scope: !919)
!6018 = !DILocation(line: 1382, column: 1, scope: !919)
!6019 = !DILocation(line: 1386, column: 29, scope: !923)
!6020 = !DILocation(line: 1388, column: 28, scope: !923)
!6021 = !DILocation(line: 1388, column: 12, scope: !923)
!6022 = !DILocation(line: 1388, column: 5, scope: !923)
!6023 = !DILocation(line: 1393, column: 29, scope: !926)
!6024 = !DILocation(line: 1393, column: 42, scope: !926)
!6025 = !DILocation(line: 1395, column: 5, scope: !926)
!6026 = !DILocation(line: 1395, column: 24, scope: !926)
!6027 = !DILocation(line: 1397, column: 9, scope: !6028)
!6028 = distinct !DILexicalBlock(scope: !926, file: !457, line: 1397, column: 9)
!6029 = !DILocation(line: 1397, column: 11, scope: !6028)
!6030 = !DILocation(line: 1397, column: 25, scope: !6028)
!6031 = !DILocation(line: 1397, column: 28, scope: !6032)
!6032 = !DILexicalBlockFile(scope: !6028, file: !457, discriminator: 1)
!6033 = !DILocation(line: 1397, column: 30, scope: !6028)
!6034 = !DILocation(line: 1397, column: 9, scope: !926)
!6035 = !DILocation(line: 1398, column: 16, scope: !6028)
!6036 = !DILocation(line: 1398, column: 9, scope: !6028)
!6037 = !DILocation(line: 1400, column: 9, scope: !926)
!6038 = !DILocation(line: 1400, column: 12, scope: !926)
!6039 = !DILocation(line: 1400, column: 21, scope: !926)
!6040 = !DILocation(line: 1400, column: 7, scope: !926)
!6041 = !DILocation(line: 1401, column: 9, scope: !6042)
!6042 = distinct !DILexicalBlock(scope: !926, file: !457, line: 1401, column: 9)
!6043 = !DILocation(line: 1401, column: 11, scope: !6042)
!6044 = !DILocation(line: 1401, column: 14, scope: !6045)
!6045 = !DILexicalBlockFile(scope: !6042, file: !457, discriminator: 1)
!6046 = !DILocation(line: 1401, column: 17, scope: !6042)
!6047 = !DILocation(line: 1401, column: 14, scope: !6042)
!6048 = !DILocation(line: 1401, column: 9, scope: !926)
!6049 = !DILocation(line: 1402, column: 16, scope: !6042)
!6050 = !DILocation(line: 1402, column: 19, scope: !6042)
!6051 = !DILocation(line: 1402, column: 29, scope: !6042)
!6052 = !DILocation(line: 1402, column: 32, scope: !6042)
!6053 = !DILocation(line: 1402, column: 9, scope: !6042)
!6054 = !DILocation(line: 1407, column: 26, scope: !933)
!6055 = !DILocation(line: 1407, column: 9, scope: !933)
!6056 = !DILocation(line: 1407, column: 29, scope: !933)
!6057 = !DILocation(line: 1407, column: 49, scope: !6058)
!6058 = !DILexicalBlockFile(scope: !933, file: !457, discriminator: 1)
!6059 = !DILocation(line: 1407, column: 32, scope: !933)
!6060 = !DILocation(line: 1407, column: 9, scope: !926)
!6061 = !DILocation(line: 1408, column: 9, scope: !932)
!6062 = !DILocation(line: 1408, column: 19, scope: !932)
!6063 = !DILocation(line: 1408, column: 39, scope: !932)
!6064 = !DILocation(line: 1408, column: 42, scope: !932)
!6065 = !DILocation(line: 1408, column: 28, scope: !932)
!6066 = !DILocation(line: 1409, column: 13, scope: !6067)
!6067 = distinct !DILexicalBlock(scope: !932, file: !457, line: 1409, column: 13)
!6068 = !DILocation(line: 1409, column: 20, scope: !6067)
!6069 = !DILocation(line: 1409, column: 13, scope: !932)
!6070 = !DILocation(line: 1410, column: 20, scope: !6067)
!6071 = !DILocation(line: 1410, column: 13, scope: !6067)
!6072 = !DILocation(line: 1411, column: 9, scope: !932)
!6073 = !DILocation(line: 1411, column: 14, scope: !6074)
!6074 = !DILexicalBlockFile(scope: !935, file: !457, discriminator: 1)
!6075 = !DILocation(line: 1411, column: 24, scope: !935)
!6076 = !DILocation(line: 1411, column: 54, scope: !935)
!6077 = !DILocation(line: 1411, column: 71, scope: !6078)
!6078 = distinct !DILexicalBlock(scope: !935, file: !457, line: 1411, column: 68)
!6079 = !DILocation(line: 1411, column: 88, scope: !6078)
!6080 = !DILocation(line: 1411, column: 68, scope: !6078)
!6081 = !DILocation(line: 1411, column: 98, scope: !6078)
!6082 = !DILocation(line: 1411, column: 68, scope: !935)
!6083 = !DILocation(line: 1411, column: 68, scope: !6084)
!6084 = !DILexicalBlockFile(scope: !935, file: !457, discriminator: 2)
!6085 = !DILocation(line: 1411, column: 129, scope: !6086)
!6086 = !DILexicalBlockFile(scope: !6078, file: !457, discriminator: 3)
!6087 = !DILocation(line: 1411, column: 147, scope: !6078)
!6088 = !DILocation(line: 1411, column: 157, scope: !6078)
!6089 = !DILocation(line: 1411, column: 182, scope: !6078)
!6090 = !DILocation(line: 1411, column: 113, scope: !6078)
!6091 = !DILocation(line: 1411, column: 201, scope: !6092)
!6092 = !DILexicalBlockFile(scope: !932, file: !457, discriminator: 4)
!6093 = !DILocation(line: 1411, column: 201, scope: !935)
!6094 = !DILocation(line: 1411, column: 201, scope: !6095)
!6095 = !DILexicalBlockFile(scope: !935, file: !457, discriminator: 5)
!6096 = !DILocation(line: 1412, column: 5, scope: !933)
!6097 = !DILocation(line: 1412, column: 5, scope: !6058)
!6098 = !DILocation(line: 1412, column: 5, scope: !932)
!6099 = !DILocation(line: 1413, column: 64, scope: !926)
!6100 = !DILocation(line: 1413, column: 12, scope: !926)
!6101 = !DILocation(line: 1413, column: 5, scope: !926)
!6102 = !DILocation(line: 1414, column: 1, scope: !926)
!6103 = !DILocation(line: 1417, column: 29, scope: !936)
!6104 = !DILocation(line: 1417, column: 43, scope: !936)
!6105 = !DILocation(line: 1419, column: 5, scope: !936)
!6106 = !DILocation(line: 1419, column: 24, scope: !936)
!6107 = !DILocation(line: 1421, column: 9, scope: !6108)
!6108 = distinct !DILexicalBlock(scope: !936, file: !457, line: 1421, column: 9)
!6109 = !DILocation(line: 1421, column: 11, scope: !6108)
!6110 = !DILocation(line: 1421, column: 9, scope: !936)
!6111 = !DILocation(line: 1422, column: 16, scope: !6108)
!6112 = !DILocation(line: 1422, column: 9, scope: !6108)
!6113 = !DILocation(line: 1424, column: 9, scope: !936)
!6114 = !DILocation(line: 1424, column: 12, scope: !936)
!6115 = !DILocation(line: 1424, column: 21, scope: !936)
!6116 = !DILocation(line: 1424, column: 7, scope: !936)
!6117 = !DILocation(line: 1425, column: 9, scope: !6118)
!6118 = distinct !DILexicalBlock(scope: !936, file: !457, line: 1425, column: 9)
!6119 = !DILocation(line: 1425, column: 11, scope: !6118)
!6120 = !DILocation(line: 1425, column: 14, scope: !6121)
!6121 = !DILexicalBlockFile(scope: !6118, file: !457, discriminator: 1)
!6122 = !DILocation(line: 1425, column: 17, scope: !6118)
!6123 = !DILocation(line: 1425, column: 14, scope: !6118)
!6124 = !DILocation(line: 1425, column: 9, scope: !936)
!6125 = !DILocation(line: 1426, column: 16, scope: !6118)
!6126 = !DILocation(line: 1426, column: 19, scope: !6118)
!6127 = !DILocation(line: 1426, column: 29, scope: !6118)
!6128 = !DILocation(line: 1426, column: 32, scope: !6118)
!6129 = !DILocation(line: 1426, column: 9, scope: !6118)
!6130 = !DILocation(line: 1431, column: 26, scope: !943)
!6131 = !DILocation(line: 1431, column: 9, scope: !943)
!6132 = !DILocation(line: 1431, column: 9, scope: !936)
!6133 = !DILocation(line: 1432, column: 9, scope: !942)
!6134 = !DILocation(line: 1432, column: 19, scope: !942)
!6135 = !DILocation(line: 1432, column: 23, scope: !942)
!6136 = !DILocation(line: 1433, column: 32, scope: !942)
!6137 = !DILocation(line: 1433, column: 13, scope: !942)
!6138 = !DILocation(line: 1433, column: 11, scope: !942)
!6139 = !DILocation(line: 1434, column: 13, scope: !6140)
!6140 = distinct !DILexicalBlock(scope: !942, file: !457, line: 1434, column: 13)
!6141 = !DILocation(line: 1434, column: 15, scope: !6140)
!6142 = !DILocation(line: 1434, column: 13, scope: !942)
!6143 = !DILocation(line: 1435, column: 13, scope: !6140)
!6144 = !DILocation(line: 1436, column: 29, scope: !942)
!6145 = !DILocation(line: 1436, column: 32, scope: !942)
!6146 = !DILocation(line: 1436, column: 18, scope: !942)
!6147 = !DILocation(line: 1436, column: 16, scope: !942)
!6148 = !DILocation(line: 1437, column: 9, scope: !942)
!6149 = !DILocation(line: 1437, column: 14, scope: !6150)
!6150 = !DILexicalBlockFile(scope: !946, file: !457, discriminator: 1)
!6151 = !DILocation(line: 1437, column: 24, scope: !946)
!6152 = !DILocation(line: 1437, column: 54, scope: !946)
!6153 = !DILocation(line: 1437, column: 66, scope: !6154)
!6154 = distinct !DILexicalBlock(scope: !946, file: !457, line: 1437, column: 63)
!6155 = !DILocation(line: 1437, column: 83, scope: !6154)
!6156 = !DILocation(line: 1437, column: 63, scope: !6154)
!6157 = !DILocation(line: 1437, column: 93, scope: !6154)
!6158 = !DILocation(line: 1437, column: 63, scope: !946)
!6159 = !DILocation(line: 1437, column: 63, scope: !6160)
!6160 = !DILexicalBlockFile(scope: !946, file: !457, discriminator: 2)
!6161 = !DILocation(line: 1437, column: 124, scope: !6162)
!6162 = !DILexicalBlockFile(scope: !6154, file: !457, discriminator: 3)
!6163 = !DILocation(line: 1437, column: 142, scope: !6154)
!6164 = !DILocation(line: 1437, column: 152, scope: !6154)
!6165 = !DILocation(line: 1437, column: 177, scope: !6154)
!6166 = !DILocation(line: 1437, column: 108, scope: !6154)
!6167 = !DILocation(line: 1437, column: 196, scope: !6168)
!6168 = !DILexicalBlockFile(scope: !942, file: !457, discriminator: 4)
!6169 = !DILocation(line: 1437, column: 196, scope: !946)
!6170 = !DILocation(line: 1437, column: 196, scope: !6171)
!6171 = !DILexicalBlockFile(scope: !946, file: !457, discriminator: 5)
!6172 = !DILocation(line: 1438, column: 13, scope: !6173)
!6173 = distinct !DILexicalBlock(scope: !942, file: !457, line: 1438, column: 13)
!6174 = !DILocation(line: 1438, column: 20, scope: !6173)
!6175 = !DILocation(line: 1438, column: 13, scope: !942)
!6176 = !DILocation(line: 1439, column: 20, scope: !6173)
!6177 = !DILocation(line: 1439, column: 13, scope: !6173)
!6178 = !DILocation(line: 1440, column: 9, scope: !942)
!6179 = !DILocation(line: 1440, column: 14, scope: !6180)
!6180 = !DILexicalBlockFile(scope: !948, file: !457, discriminator: 1)
!6181 = !DILocation(line: 1440, column: 24, scope: !948)
!6182 = !DILocation(line: 1440, column: 54, scope: !948)
!6183 = !DILocation(line: 1440, column: 71, scope: !6184)
!6184 = distinct !DILexicalBlock(scope: !948, file: !457, line: 1440, column: 68)
!6185 = !DILocation(line: 1440, column: 88, scope: !6184)
!6186 = !DILocation(line: 1440, column: 68, scope: !6184)
!6187 = !DILocation(line: 1440, column: 98, scope: !6184)
!6188 = !DILocation(line: 1440, column: 68, scope: !948)
!6189 = !DILocation(line: 1440, column: 68, scope: !6190)
!6190 = !DILexicalBlockFile(scope: !948, file: !457, discriminator: 2)
!6191 = !DILocation(line: 1440, column: 129, scope: !6192)
!6192 = !DILexicalBlockFile(scope: !6184, file: !457, discriminator: 3)
!6193 = !DILocation(line: 1440, column: 147, scope: !6184)
!6194 = !DILocation(line: 1440, column: 157, scope: !6184)
!6195 = !DILocation(line: 1440, column: 182, scope: !6184)
!6196 = !DILocation(line: 1440, column: 113, scope: !6184)
!6197 = !DILocation(line: 1440, column: 201, scope: !6168)
!6198 = !DILocation(line: 1440, column: 201, scope: !948)
!6199 = !DILocation(line: 1440, column: 201, scope: !6200)
!6200 = !DILexicalBlockFile(scope: !948, file: !457, discriminator: 5)
!6201 = !DILocation(line: 1441, column: 5, scope: !943)
!6202 = !DILocation(line: 1441, column: 5, scope: !6203)
!6203 = !DILexicalBlockFile(scope: !943, file: !457, discriminator: 1)
!6204 = !DILocation(line: 1441, column: 5, scope: !942)
!6205 = !DILocation(line: 1442, column: 60, scope: !936)
!6206 = !DILocation(line: 1442, column: 12, scope: !936)
!6207 = !DILocation(line: 1442, column: 5, scope: !936)
!6208 = !DILocation(line: 1443, column: 1, scope: !936)
!6209 = !DILocation(line: 1446, column: 36, scope: !949)
!6210 = !DILocation(line: 1446, column: 49, scope: !949)
!6211 = !DILocation(line: 1448, column: 5, scope: !949)
!6212 = !DILocation(line: 1448, column: 24, scope: !949)
!6213 = !DILocation(line: 1450, column: 9, scope: !6214)
!6214 = distinct !DILexicalBlock(scope: !949, file: !457, line: 1450, column: 9)
!6215 = !DILocation(line: 1450, column: 11, scope: !6214)
!6216 = !DILocation(line: 1450, column: 25, scope: !6214)
!6217 = !DILocation(line: 1450, column: 28, scope: !6218)
!6218 = !DILexicalBlockFile(scope: !6214, file: !457, discriminator: 1)
!6219 = !DILocation(line: 1450, column: 30, scope: !6214)
!6220 = !DILocation(line: 1450, column: 9, scope: !949)
!6221 = !DILocation(line: 1451, column: 16, scope: !6214)
!6222 = !DILocation(line: 1451, column: 9, scope: !6214)
!6223 = !DILocation(line: 1453, column: 9, scope: !949)
!6224 = !DILocation(line: 1453, column: 12, scope: !949)
!6225 = !DILocation(line: 1453, column: 21, scope: !949)
!6226 = !DILocation(line: 1453, column: 7, scope: !949)
!6227 = !DILocation(line: 1454, column: 9, scope: !6228)
!6228 = distinct !DILexicalBlock(scope: !949, file: !457, line: 1454, column: 9)
!6229 = !DILocation(line: 1454, column: 11, scope: !6228)
!6230 = !DILocation(line: 1454, column: 14, scope: !6231)
!6231 = !DILexicalBlockFile(scope: !6228, file: !457, discriminator: 1)
!6232 = !DILocation(line: 1454, column: 17, scope: !6228)
!6233 = !DILocation(line: 1454, column: 14, scope: !6228)
!6234 = !DILocation(line: 1454, column: 9, scope: !949)
!6235 = !DILocation(line: 1455, column: 16, scope: !6228)
!6236 = !DILocation(line: 1455, column: 19, scope: !6228)
!6237 = !DILocation(line: 1455, column: 37, scope: !6228)
!6238 = !DILocation(line: 1455, column: 40, scope: !6228)
!6239 = !DILocation(line: 1455, column: 9, scope: !6228)
!6240 = !DILocation(line: 1456, column: 9, scope: !6241)
!6241 = distinct !DILexicalBlock(scope: !949, file: !457, line: 1456, column: 9)
!6242 = !DILocation(line: 1456, column: 11, scope: !6241)
!6243 = !DILocation(line: 1456, column: 14, scope: !6244)
!6244 = !DILexicalBlockFile(scope: !6241, file: !457, discriminator: 1)
!6245 = !DILocation(line: 1456, column: 17, scope: !6241)
!6246 = !DILocation(line: 1456, column: 14, scope: !6241)
!6247 = !DILocation(line: 1456, column: 9, scope: !949)
!6248 = !DILocation(line: 1457, column: 16, scope: !6241)
!6249 = !DILocation(line: 1457, column: 19, scope: !6241)
!6250 = !DILocation(line: 1457, column: 29, scope: !6241)
!6251 = !DILocation(line: 1457, column: 32, scope: !6241)
!6252 = !DILocation(line: 1457, column: 9, scope: !6241)
!6253 = !DILocation(line: 1459, column: 26, scope: !956)
!6254 = !DILocation(line: 1459, column: 9, scope: !956)
!6255 = !DILocation(line: 1459, column: 29, scope: !956)
!6256 = !DILocation(line: 1459, column: 49, scope: !6257)
!6257 = !DILexicalBlockFile(scope: !956, file: !457, discriminator: 1)
!6258 = !DILocation(line: 1459, column: 32, scope: !956)
!6259 = !DILocation(line: 1459, column: 9, scope: !949)
!6260 = !DILocation(line: 1460, column: 9, scope: !955)
!6261 = !DILocation(line: 1460, column: 19, scope: !955)
!6262 = !DILocation(line: 1460, column: 40, scope: !955)
!6263 = !DILocation(line: 1460, column: 43, scope: !955)
!6264 = !DILocation(line: 1460, column: 28, scope: !955)
!6265 = !DILocation(line: 1462, column: 13, scope: !6266)
!6266 = distinct !DILexicalBlock(scope: !955, file: !457, line: 1462, column: 13)
!6267 = !DILocation(line: 1462, column: 20, scope: !6266)
!6268 = !DILocation(line: 1462, column: 13, scope: !955)
!6269 = !DILocation(line: 1463, column: 20, scope: !6266)
!6270 = !DILocation(line: 1463, column: 13, scope: !6266)
!6271 = !DILocation(line: 1464, column: 9, scope: !955)
!6272 = !DILocation(line: 1464, column: 14, scope: !6273)
!6273 = !DILexicalBlockFile(scope: !958, file: !457, discriminator: 1)
!6274 = !DILocation(line: 1464, column: 24, scope: !958)
!6275 = !DILocation(line: 1464, column: 54, scope: !958)
!6276 = !DILocation(line: 1464, column: 71, scope: !6277)
!6277 = distinct !DILexicalBlock(scope: !958, file: !457, line: 1464, column: 68)
!6278 = !DILocation(line: 1464, column: 88, scope: !6277)
!6279 = !DILocation(line: 1464, column: 68, scope: !6277)
!6280 = !DILocation(line: 1464, column: 98, scope: !6277)
!6281 = !DILocation(line: 1464, column: 68, scope: !958)
!6282 = !DILocation(line: 1464, column: 68, scope: !6283)
!6283 = !DILexicalBlockFile(scope: !958, file: !457, discriminator: 2)
!6284 = !DILocation(line: 1464, column: 129, scope: !6285)
!6285 = !DILexicalBlockFile(scope: !6277, file: !457, discriminator: 3)
!6286 = !DILocation(line: 1464, column: 147, scope: !6277)
!6287 = !DILocation(line: 1464, column: 157, scope: !6277)
!6288 = !DILocation(line: 1464, column: 182, scope: !6277)
!6289 = !DILocation(line: 1464, column: 113, scope: !6277)
!6290 = !DILocation(line: 1464, column: 201, scope: !6291)
!6291 = !DILexicalBlockFile(scope: !955, file: !457, discriminator: 4)
!6292 = !DILocation(line: 1464, column: 201, scope: !958)
!6293 = !DILocation(line: 1464, column: 201, scope: !6294)
!6294 = !DILexicalBlockFile(scope: !958, file: !457, discriminator: 5)
!6295 = !DILocation(line: 1465, column: 5, scope: !956)
!6296 = !DILocation(line: 1465, column: 5, scope: !6257)
!6297 = !DILocation(line: 1465, column: 5, scope: !955)
!6298 = !DILocation(line: 1466, column: 64, scope: !949)
!6299 = !DILocation(line: 1466, column: 12, scope: !949)
!6300 = !DILocation(line: 1466, column: 5, scope: !949)
!6301 = !DILocation(line: 1467, column: 1, scope: !949)
!6302 = !DILocation(line: 1470, column: 36, scope: !959)
!6303 = !DILocation(line: 1470, column: 50, scope: !959)
!6304 = !DILocation(line: 1472, column: 5, scope: !959)
!6305 = !DILocation(line: 1472, column: 24, scope: !959)
!6306 = !DILocation(line: 1474, column: 9, scope: !6307)
!6307 = distinct !DILexicalBlock(scope: !959, file: !457, line: 1474, column: 9)
!6308 = !DILocation(line: 1474, column: 11, scope: !6307)
!6309 = !DILocation(line: 1474, column: 9, scope: !959)
!6310 = !DILocation(line: 1475, column: 16, scope: !6307)
!6311 = !DILocation(line: 1475, column: 9, scope: !6307)
!6312 = !DILocation(line: 1477, column: 9, scope: !959)
!6313 = !DILocation(line: 1477, column: 12, scope: !959)
!6314 = !DILocation(line: 1477, column: 21, scope: !959)
!6315 = !DILocation(line: 1477, column: 7, scope: !959)
!6316 = !DILocation(line: 1478, column: 9, scope: !6317)
!6317 = distinct !DILexicalBlock(scope: !959, file: !457, line: 1478, column: 9)
!6318 = !DILocation(line: 1478, column: 11, scope: !6317)
!6319 = !DILocation(line: 1478, column: 14, scope: !6320)
!6320 = !DILexicalBlockFile(scope: !6317, file: !457, discriminator: 1)
!6321 = !DILocation(line: 1478, column: 17, scope: !6317)
!6322 = !DILocation(line: 1478, column: 14, scope: !6317)
!6323 = !DILocation(line: 1478, column: 9, scope: !959)
!6324 = !DILocation(line: 1479, column: 16, scope: !6317)
!6325 = !DILocation(line: 1479, column: 19, scope: !6317)
!6326 = !DILocation(line: 1479, column: 37, scope: !6317)
!6327 = !DILocation(line: 1479, column: 40, scope: !6317)
!6328 = !DILocation(line: 1479, column: 9, scope: !6317)
!6329 = !DILocation(line: 1480, column: 9, scope: !6330)
!6330 = distinct !DILexicalBlock(scope: !959, file: !457, line: 1480, column: 9)
!6331 = !DILocation(line: 1480, column: 11, scope: !6330)
!6332 = !DILocation(line: 1480, column: 14, scope: !6333)
!6333 = !DILexicalBlockFile(scope: !6330, file: !457, discriminator: 1)
!6334 = !DILocation(line: 1480, column: 17, scope: !6330)
!6335 = !DILocation(line: 1480, column: 14, scope: !6330)
!6336 = !DILocation(line: 1480, column: 9, scope: !959)
!6337 = !DILocation(line: 1481, column: 16, scope: !6330)
!6338 = !DILocation(line: 1481, column: 19, scope: !6330)
!6339 = !DILocation(line: 1481, column: 29, scope: !6330)
!6340 = !DILocation(line: 1481, column: 32, scope: !6330)
!6341 = !DILocation(line: 1481, column: 9, scope: !6330)
!6342 = !DILocation(line: 1483, column: 26, scope: !966)
!6343 = !DILocation(line: 1483, column: 9, scope: !966)
!6344 = !DILocation(line: 1483, column: 9, scope: !959)
!6345 = !DILocation(line: 1484, column: 9, scope: !965)
!6346 = !DILocation(line: 1484, column: 19, scope: !965)
!6347 = !DILocation(line: 1484, column: 23, scope: !965)
!6348 = !DILocation(line: 1485, column: 32, scope: !965)
!6349 = !DILocation(line: 1485, column: 13, scope: !965)
!6350 = !DILocation(line: 1485, column: 11, scope: !965)
!6351 = !DILocation(line: 1486, column: 13, scope: !6352)
!6352 = distinct !DILexicalBlock(scope: !965, file: !457, line: 1486, column: 13)
!6353 = !DILocation(line: 1486, column: 15, scope: !6352)
!6354 = !DILocation(line: 1486, column: 13, scope: !965)
!6355 = !DILocation(line: 1487, column: 13, scope: !6352)
!6356 = !DILocation(line: 1488, column: 30, scope: !965)
!6357 = !DILocation(line: 1488, column: 33, scope: !965)
!6358 = !DILocation(line: 1488, column: 18, scope: !965)
!6359 = !DILocation(line: 1488, column: 16, scope: !965)
!6360 = !DILocation(line: 1490, column: 9, scope: !965)
!6361 = !DILocation(line: 1490, column: 14, scope: !6362)
!6362 = !DILexicalBlockFile(scope: !969, file: !457, discriminator: 1)
!6363 = !DILocation(line: 1490, column: 24, scope: !969)
!6364 = !DILocation(line: 1490, column: 54, scope: !969)
!6365 = !DILocation(line: 1490, column: 66, scope: !6366)
!6366 = distinct !DILexicalBlock(scope: !969, file: !457, line: 1490, column: 63)
!6367 = !DILocation(line: 1490, column: 83, scope: !6366)
!6368 = !DILocation(line: 1490, column: 63, scope: !6366)
!6369 = !DILocation(line: 1490, column: 93, scope: !6366)
!6370 = !DILocation(line: 1490, column: 63, scope: !969)
!6371 = !DILocation(line: 1490, column: 63, scope: !6372)
!6372 = !DILexicalBlockFile(scope: !969, file: !457, discriminator: 2)
!6373 = !DILocation(line: 1490, column: 124, scope: !6374)
!6374 = !DILexicalBlockFile(scope: !6366, file: !457, discriminator: 3)
!6375 = !DILocation(line: 1490, column: 142, scope: !6366)
!6376 = !DILocation(line: 1490, column: 152, scope: !6366)
!6377 = !DILocation(line: 1490, column: 177, scope: !6366)
!6378 = !DILocation(line: 1490, column: 108, scope: !6366)
!6379 = !DILocation(line: 1490, column: 196, scope: !6380)
!6380 = !DILexicalBlockFile(scope: !965, file: !457, discriminator: 4)
!6381 = !DILocation(line: 1490, column: 196, scope: !969)
!6382 = !DILocation(line: 1490, column: 196, scope: !6383)
!6383 = !DILexicalBlockFile(scope: !969, file: !457, discriminator: 5)
!6384 = !DILocation(line: 1491, column: 13, scope: !6385)
!6385 = distinct !DILexicalBlock(scope: !965, file: !457, line: 1491, column: 13)
!6386 = !DILocation(line: 1491, column: 20, scope: !6385)
!6387 = !DILocation(line: 1491, column: 13, scope: !965)
!6388 = !DILocation(line: 1492, column: 20, scope: !6385)
!6389 = !DILocation(line: 1492, column: 13, scope: !6385)
!6390 = !DILocation(line: 1493, column: 9, scope: !965)
!6391 = !DILocation(line: 1493, column: 14, scope: !6392)
!6392 = !DILexicalBlockFile(scope: !971, file: !457, discriminator: 1)
!6393 = !DILocation(line: 1493, column: 24, scope: !971)
!6394 = !DILocation(line: 1493, column: 54, scope: !971)
!6395 = !DILocation(line: 1493, column: 71, scope: !6396)
!6396 = distinct !DILexicalBlock(scope: !971, file: !457, line: 1493, column: 68)
!6397 = !DILocation(line: 1493, column: 88, scope: !6396)
!6398 = !DILocation(line: 1493, column: 68, scope: !6396)
!6399 = !DILocation(line: 1493, column: 98, scope: !6396)
!6400 = !DILocation(line: 1493, column: 68, scope: !971)
!6401 = !DILocation(line: 1493, column: 68, scope: !6402)
!6402 = !DILexicalBlockFile(scope: !971, file: !457, discriminator: 2)
!6403 = !DILocation(line: 1493, column: 129, scope: !6404)
!6404 = !DILexicalBlockFile(scope: !6396, file: !457, discriminator: 3)
!6405 = !DILocation(line: 1493, column: 147, scope: !6396)
!6406 = !DILocation(line: 1493, column: 157, scope: !6396)
!6407 = !DILocation(line: 1493, column: 182, scope: !6396)
!6408 = !DILocation(line: 1493, column: 113, scope: !6396)
!6409 = !DILocation(line: 1493, column: 201, scope: !6380)
!6410 = !DILocation(line: 1493, column: 201, scope: !971)
!6411 = !DILocation(line: 1493, column: 201, scope: !6412)
!6412 = !DILexicalBlockFile(scope: !971, file: !457, discriminator: 5)
!6413 = !DILocation(line: 1494, column: 5, scope: !966)
!6414 = !DILocation(line: 1494, column: 5, scope: !6415)
!6415 = !DILexicalBlockFile(scope: !966, file: !457, discriminator: 1)
!6416 = !DILocation(line: 1494, column: 5, scope: !965)
!6417 = !DILocation(line: 1495, column: 60, scope: !959)
!6418 = !DILocation(line: 1495, column: 12, scope: !959)
!6419 = !DILocation(line: 1495, column: 5, scope: !959)
!6420 = !DILocation(line: 1496, column: 1, scope: !959)
!6421 = !DILocation(line: 1523, column: 31, scope: !984)
!6422 = !DILocation(line: 1523, column: 45, scope: !984)
!6423 = !DILocation(line: 1523, column: 60, scope: !984)
!6424 = !DILocation(line: 1525, column: 5, scope: !984)
!6425 = !DILocation(line: 1525, column: 23, scope: !984)
!6426 = !DILocation(line: 1527, column: 10, scope: !6427)
!6427 = distinct !DILexicalBlock(scope: !984, file: !457, line: 1527, column: 9)
!6428 = !DILocation(line: 1527, column: 9, scope: !984)
!6429 = !DILocation(line: 1527, column: 20, scope: !6430)
!6430 = !DILexicalBlockFile(scope: !6427, file: !457, discriminator: 1)
!6431 = !DILocation(line: 1527, column: 13, scope: !6427)
!6432 = !DILocation(line: 1529, column: 10, scope: !984)
!6433 = !DILocation(line: 1529, column: 13, scope: !984)
!6434 = !DILocation(line: 1529, column: 22, scope: !984)
!6435 = !DILocation(line: 1529, column: 8, scope: !984)
!6436 = !DILocation(line: 1530, column: 9, scope: !994)
!6437 = !DILocation(line: 1530, column: 12, scope: !994)
!6438 = !DILocation(line: 1530, column: 15, scope: !6439)
!6439 = !DILexicalBlockFile(scope: !994, file: !457, discriminator: 1)
!6440 = !DILocation(line: 1530, column: 19, scope: !994)
!6441 = !DILocation(line: 1530, column: 15, scope: !994)
!6442 = !DILocation(line: 1530, column: 9, scope: !984)
!6443 = !DILocation(line: 1531, column: 9, scope: !993)
!6444 = !DILocation(line: 1531, column: 19, scope: !993)
!6445 = !DILocation(line: 1532, column: 9, scope: !993)
!6446 = !DILocation(line: 1532, column: 19, scope: !993)
!6447 = !DILocation(line: 1532, column: 48, scope: !993)
!6448 = !DILocation(line: 1532, column: 52, scope: !993)
!6449 = !DILocation(line: 1532, column: 27, scope: !993)
!6450 = !DILocation(line: 1533, column: 14, scope: !6451)
!6451 = distinct !DILexicalBlock(scope: !993, file: !457, line: 1533, column: 13)
!6452 = !DILocation(line: 1533, column: 13, scope: !993)
!6453 = !DILocation(line: 1534, column: 13, scope: !6451)
!6454 = !DILocation(line: 1535, column: 15, scope: !993)
!6455 = !DILocation(line: 1535, column: 19, scope: !993)
!6456 = !DILocation(line: 1535, column: 32, scope: !993)
!6457 = !DILocation(line: 1535, column: 35, scope: !993)
!6458 = !DILocation(line: 1535, column: 13, scope: !993)
!6459 = !DILocation(line: 1536, column: 9, scope: !993)
!6460 = !DILocation(line: 1536, column: 14, scope: !6461)
!6461 = !DILexicalBlockFile(scope: !997, file: !457, discriminator: 1)
!6462 = !DILocation(line: 1536, column: 24, scope: !997)
!6463 = !DILocation(line: 1536, column: 54, scope: !997)
!6464 = !DILocation(line: 1536, column: 70, scope: !6465)
!6465 = distinct !DILexicalBlock(scope: !997, file: !457, line: 1536, column: 67)
!6466 = !DILocation(line: 1536, column: 87, scope: !6465)
!6467 = !DILocation(line: 1536, column: 67, scope: !6465)
!6468 = !DILocation(line: 1536, column: 97, scope: !6465)
!6469 = !DILocation(line: 1536, column: 67, scope: !997)
!6470 = !DILocation(line: 1536, column: 67, scope: !6471)
!6471 = !DILexicalBlockFile(scope: !997, file: !457, discriminator: 2)
!6472 = !DILocation(line: 1536, column: 128, scope: !6473)
!6473 = !DILexicalBlockFile(scope: !6465, file: !457, discriminator: 3)
!6474 = !DILocation(line: 1536, column: 146, scope: !6465)
!6475 = !DILocation(line: 1536, column: 156, scope: !6465)
!6476 = !DILocation(line: 1536, column: 181, scope: !6465)
!6477 = !DILocation(line: 1536, column: 112, scope: !6465)
!6478 = !DILocation(line: 1536, column: 200, scope: !6479)
!6479 = !DILexicalBlockFile(scope: !993, file: !457, discriminator: 4)
!6480 = !DILocation(line: 1536, column: 200, scope: !997)
!6481 = !DILocation(line: 1536, column: 200, scope: !6482)
!6482 = !DILexicalBlockFile(scope: !997, file: !457, discriminator: 5)
!6483 = !DILocation(line: 1537, column: 16, scope: !993)
!6484 = !DILocation(line: 1537, column: 9, scope: !993)
!6485 = !DILocation(line: 1538, column: 5, scope: !994)
!6486 = !DILocation(line: 1540, column: 57, scope: !984)
!6487 = !DILocation(line: 1540, column: 12, scope: !984)
!6488 = !DILocation(line: 1540, column: 5, scope: !984)
!6489 = !DILocation(line: 1541, column: 1, scope: !984)
!6490 = !DILocation(line: 1598, column: 31, scope: !1025)
!6491 = !DILocation(line: 1598, column: 45, scope: !1025)
!6492 = !DILocation(line: 1598, column: 60, scope: !1025)
!6493 = !DILocation(line: 1598, column: 74, scope: !1025)
!6494 = !DILocation(line: 1600, column: 5, scope: !1025)
!6495 = !DILocation(line: 1600, column: 23, scope: !1025)
!6496 = !DILocation(line: 1602, column: 9, scope: !6497)
!6497 = distinct !DILexicalBlock(scope: !1025, file: !457, line: 1602, column: 9)
!6498 = !DILocation(line: 1602, column: 11, scope: !6497)
!6499 = !DILocation(line: 1602, column: 9, scope: !1025)
!6500 = !DILocation(line: 1603, column: 9, scope: !6501)
!6501 = distinct !DILexicalBlock(scope: !6497, file: !457, line: 1602, column: 26)
!6502 = !DILocation(line: 1604, column: 9, scope: !6501)
!6503 = !DILocation(line: 1607, column: 10, scope: !1025)
!6504 = !DILocation(line: 1607, column: 13, scope: !1025)
!6505 = !DILocation(line: 1607, column: 22, scope: !1025)
!6506 = !DILocation(line: 1607, column: 8, scope: !1025)
!6507 = !DILocation(line: 1608, column: 9, scope: !1036)
!6508 = !DILocation(line: 1608, column: 12, scope: !1036)
!6509 = !DILocation(line: 1608, column: 15, scope: !6510)
!6510 = !DILexicalBlockFile(scope: !1036, file: !457, discriminator: 1)
!6511 = !DILocation(line: 1608, column: 19, scope: !1036)
!6512 = !DILocation(line: 1608, column: 15, scope: !1036)
!6513 = !DILocation(line: 1608, column: 9, scope: !1025)
!6514 = !DILocation(line: 1609, column: 9, scope: !1035)
!6515 = !DILocation(line: 1609, column: 13, scope: !1035)
!6516 = !DILocation(line: 1610, column: 9, scope: !1035)
!6517 = !DILocation(line: 1610, column: 19, scope: !1035)
!6518 = !DILocation(line: 1610, column: 48, scope: !1035)
!6519 = !DILocation(line: 1610, column: 52, scope: !1035)
!6520 = !DILocation(line: 1610, column: 27, scope: !1035)
!6521 = !DILocation(line: 1611, column: 14, scope: !6522)
!6522 = distinct !DILexicalBlock(scope: !1035, file: !457, line: 1611, column: 13)
!6523 = !DILocation(line: 1611, column: 13, scope: !1035)
!6524 = !DILocation(line: 1612, column: 13, scope: !6522)
!6525 = !DILocation(line: 1613, column: 15, scope: !1035)
!6526 = !DILocation(line: 1613, column: 19, scope: !1035)
!6527 = !DILocation(line: 1613, column: 36, scope: !1035)
!6528 = !DILocation(line: 1613, column: 39, scope: !1035)
!6529 = !DILocation(line: 1613, column: 46, scope: !1035)
!6530 = !DILocation(line: 1613, column: 13, scope: !1035)
!6531 = !DILocation(line: 1614, column: 9, scope: !1035)
!6532 = !DILocation(line: 1614, column: 14, scope: !6533)
!6533 = !DILexicalBlockFile(scope: !1039, file: !457, discriminator: 1)
!6534 = !DILocation(line: 1614, column: 24, scope: !1039)
!6535 = !DILocation(line: 1614, column: 54, scope: !1039)
!6536 = !DILocation(line: 1614, column: 70, scope: !6537)
!6537 = distinct !DILexicalBlock(scope: !1039, file: !457, line: 1614, column: 67)
!6538 = !DILocation(line: 1614, column: 87, scope: !6537)
!6539 = !DILocation(line: 1614, column: 67, scope: !6537)
!6540 = !DILocation(line: 1614, column: 97, scope: !6537)
!6541 = !DILocation(line: 1614, column: 67, scope: !1039)
!6542 = !DILocation(line: 1614, column: 67, scope: !6543)
!6543 = !DILexicalBlockFile(scope: !1039, file: !457, discriminator: 2)
!6544 = !DILocation(line: 1614, column: 128, scope: !6545)
!6545 = !DILexicalBlockFile(scope: !6537, file: !457, discriminator: 3)
!6546 = !DILocation(line: 1614, column: 146, scope: !6537)
!6547 = !DILocation(line: 1614, column: 156, scope: !6537)
!6548 = !DILocation(line: 1614, column: 181, scope: !6537)
!6549 = !DILocation(line: 1614, column: 112, scope: !6537)
!6550 = !DILocation(line: 1614, column: 200, scope: !6551)
!6551 = !DILexicalBlockFile(scope: !1035, file: !457, discriminator: 4)
!6552 = !DILocation(line: 1614, column: 200, scope: !1039)
!6553 = !DILocation(line: 1614, column: 200, scope: !6554)
!6554 = !DILexicalBlockFile(scope: !1039, file: !457, discriminator: 5)
!6555 = !DILocation(line: 1615, column: 16, scope: !1035)
!6556 = !DILocation(line: 1615, column: 9, scope: !1035)
!6557 = !DILocation(line: 1616, column: 5, scope: !1036)
!6558 = !DILocation(line: 1618, column: 68, scope: !1025)
!6559 = !DILocation(line: 1618, column: 5, scope: !1025)
!6560 = !DILocation(line: 1619, column: 5, scope: !1025)
!6561 = !DILocation(line: 1620, column: 1, scope: !1025)
!6562 = !DILocation(line: 1623, column: 31, scope: !1040)
!6563 = !DILocation(line: 1623, column: 45, scope: !1040)
!6564 = !DILocation(line: 1623, column: 60, scope: !1040)
!6565 = !DILocation(line: 1625, column: 5, scope: !1040)
!6566 = !DILocation(line: 1625, column: 23, scope: !1040)
!6567 = !DILocation(line: 1627, column: 9, scope: !6568)
!6568 = distinct !DILexicalBlock(scope: !1040, file: !457, line: 1627, column: 9)
!6569 = !DILocation(line: 1627, column: 11, scope: !6568)
!6570 = !DILocation(line: 1627, column: 9, scope: !1040)
!6571 = !DILocation(line: 1628, column: 9, scope: !6572)
!6572 = distinct !DILexicalBlock(scope: !6568, file: !457, line: 1627, column: 26)
!6573 = !DILocation(line: 1629, column: 9, scope: !6572)
!6574 = !DILocation(line: 1632, column: 10, scope: !1040)
!6575 = !DILocation(line: 1632, column: 13, scope: !1040)
!6576 = !DILocation(line: 1632, column: 22, scope: !1040)
!6577 = !DILocation(line: 1632, column: 8, scope: !1040)
!6578 = !DILocation(line: 1633, column: 9, scope: !1050)
!6579 = !DILocation(line: 1633, column: 12, scope: !1050)
!6580 = !DILocation(line: 1633, column: 15, scope: !6581)
!6581 = !DILexicalBlockFile(scope: !1050, file: !457, discriminator: 1)
!6582 = !DILocation(line: 1633, column: 19, scope: !1050)
!6583 = !DILocation(line: 1633, column: 15, scope: !1050)
!6584 = !DILocation(line: 1633, column: 9, scope: !1040)
!6585 = !DILocation(line: 1634, column: 9, scope: !1049)
!6586 = !DILocation(line: 1634, column: 13, scope: !1049)
!6587 = !DILocation(line: 1635, column: 9, scope: !1049)
!6588 = !DILocation(line: 1635, column: 19, scope: !1049)
!6589 = !DILocation(line: 1635, column: 48, scope: !1049)
!6590 = !DILocation(line: 1635, column: 52, scope: !1049)
!6591 = !DILocation(line: 1635, column: 27, scope: !1049)
!6592 = !DILocation(line: 1636, column: 14, scope: !6593)
!6593 = distinct !DILexicalBlock(scope: !1049, file: !457, line: 1636, column: 13)
!6594 = !DILocation(line: 1636, column: 13, scope: !1049)
!6595 = !DILocation(line: 1637, column: 13, scope: !6593)
!6596 = !DILocation(line: 1638, column: 15, scope: !1049)
!6597 = !DILocation(line: 1638, column: 19, scope: !1049)
!6598 = !DILocation(line: 1638, column: 36, scope: !1049)
!6599 = !DILocation(line: 1638, column: 39, scope: !1049)
!6600 = !DILocation(line: 1638, column: 13, scope: !1049)
!6601 = !DILocation(line: 1639, column: 9, scope: !1049)
!6602 = !DILocation(line: 1639, column: 14, scope: !6603)
!6603 = !DILexicalBlockFile(scope: !1053, file: !457, discriminator: 1)
!6604 = !DILocation(line: 1639, column: 24, scope: !1053)
!6605 = !DILocation(line: 1639, column: 54, scope: !1053)
!6606 = !DILocation(line: 1639, column: 70, scope: !6607)
!6607 = distinct !DILexicalBlock(scope: !1053, file: !457, line: 1639, column: 67)
!6608 = !DILocation(line: 1639, column: 87, scope: !6607)
!6609 = !DILocation(line: 1639, column: 67, scope: !6607)
!6610 = !DILocation(line: 1639, column: 97, scope: !6607)
!6611 = !DILocation(line: 1639, column: 67, scope: !1053)
!6612 = !DILocation(line: 1639, column: 67, scope: !6613)
!6613 = !DILexicalBlockFile(scope: !1053, file: !457, discriminator: 2)
!6614 = !DILocation(line: 1639, column: 128, scope: !6615)
!6615 = !DILexicalBlockFile(scope: !6607, file: !457, discriminator: 3)
!6616 = !DILocation(line: 1639, column: 146, scope: !6607)
!6617 = !DILocation(line: 1639, column: 156, scope: !6607)
!6618 = !DILocation(line: 1639, column: 181, scope: !6607)
!6619 = !DILocation(line: 1639, column: 112, scope: !6607)
!6620 = !DILocation(line: 1639, column: 200, scope: !6621)
!6621 = !DILexicalBlockFile(scope: !1049, file: !457, discriminator: 4)
!6622 = !DILocation(line: 1639, column: 200, scope: !1053)
!6623 = !DILocation(line: 1639, column: 200, scope: !6624)
!6624 = !DILexicalBlockFile(scope: !1053, file: !457, discriminator: 5)
!6625 = !DILocation(line: 1640, column: 16, scope: !1049)
!6626 = !DILocation(line: 1640, column: 9, scope: !1049)
!6627 = !DILocation(line: 1641, column: 5, scope: !1050)
!6628 = !DILocation(line: 1642, column: 66, scope: !1040)
!6629 = !DILocation(line: 1642, column: 5, scope: !1040)
!6630 = !DILocation(line: 1643, column: 5, scope: !1040)
!6631 = !DILocation(line: 1644, column: 1, scope: !1040)
!6632 = !DILocation(line: 1647, column: 28, scope: !1054)
!6633 = !DILocation(line: 1649, column: 5, scope: !1054)
!6634 = !DILocation(line: 1649, column: 15, scope: !1054)
!6635 = !DILocation(line: 1650, column: 5, scope: !1054)
!6636 = !DILocation(line: 1650, column: 16, scope: !1054)
!6637 = !DILocation(line: 1651, column: 5, scope: !1054)
!6638 = !DILocation(line: 1651, column: 15, scope: !1054)
!6639 = !DILocation(line: 1652, column: 5, scope: !1054)
!6640 = !DILocation(line: 1652, column: 16, scope: !1054)
!6641 = !DILocation(line: 1654, column: 9, scope: !6642)
!6642 = distinct !DILexicalBlock(scope: !1054, file: !457, line: 1654, column: 9)
!6643 = !DILocation(line: 1654, column: 11, scope: !6642)
!6644 = !DILocation(line: 1654, column: 9, scope: !1054)
!6645 = !DILocation(line: 1655, column: 16, scope: !6642)
!6646 = !DILocation(line: 1655, column: 9, scope: !6642)
!6647 = !DILocation(line: 1658, column: 24, scope: !6648)
!6648 = distinct !DILexicalBlock(scope: !1054, file: !457, line: 1658, column: 9)
!6649 = !DILocation(line: 1658, column: 29, scope: !6648)
!6650 = !DILocation(line: 1658, column: 38, scope: !6648)
!6651 = !DILocation(line: 1658, column: 9, scope: !1054)
!6652 = !DILocation(line: 1663, column: 25, scope: !6653)
!6653 = distinct !DILexicalBlock(scope: !6648, file: !457, line: 1658, column: 57)
!6654 = !DILocation(line: 1663, column: 30, scope: !6653)
!6655 = !DILocation(line: 1663, column: 39, scope: !6653)
!6656 = !DILocation(line: 1664, column: 16, scope: !6653)
!6657 = !DILocation(line: 1664, column: 9, scope: !6653)
!6658 = !DILocation(line: 1666, column: 26, scope: !6659)
!6659 = distinct !DILexicalBlock(scope: !1054, file: !457, line: 1666, column: 9)
!6660 = !DILocation(line: 1666, column: 31, scope: !6659)
!6661 = !DILocation(line: 1666, column: 42, scope: !6659)
!6662 = !DILocation(line: 1666, column: 51, scope: !6659)
!6663 = !DILocation(line: 1666, column: 68, scope: !6659)
!6664 = !DILocation(line: 1666, column: 9, scope: !1054)
!6665 = !DILocation(line: 1667, column: 31, scope: !6659)
!6666 = !DILocation(line: 1667, column: 16, scope: !6659)
!6667 = !DILocation(line: 1667, column: 9, scope: !6659)
!6668 = !DILocation(line: 1670, column: 27, scope: !1054)
!6669 = !DILocation(line: 1670, column: 10, scope: !1054)
!6670 = !DILocation(line: 1670, column: 8, scope: !1054)
!6671 = !DILocation(line: 1671, column: 9, scope: !6672)
!6672 = distinct !DILexicalBlock(scope: !1054, file: !457, line: 1671, column: 9)
!6673 = !DILocation(line: 1671, column: 12, scope: !6672)
!6674 = !DILocation(line: 1671, column: 9, scope: !1054)
!6675 = !DILocation(line: 1672, column: 9, scope: !6672)
!6676 = !DILocation(line: 1675, column: 29, scope: !1054)
!6677 = !DILocation(line: 1675, column: 9, scope: !1054)
!6678 = !DILocation(line: 1675, column: 7, scope: !1054)
!6679 = !DILocation(line: 1676, column: 9, scope: !6680)
!6680 = distinct !DILexicalBlock(scope: !1054, file: !457, line: 1676, column: 9)
!6681 = !DILocation(line: 1676, column: 11, scope: !6680)
!6682 = !DILocation(line: 1676, column: 9, scope: !1054)
!6683 = !DILocation(line: 1677, column: 9, scope: !6680)
!6684 = !DILocation(line: 1678, column: 26, scope: !1054)
!6685 = !DILocation(line: 1678, column: 14, scope: !1054)
!6686 = !DILocation(line: 1678, column: 12, scope: !1054)
!6687 = !DILocation(line: 1679, column: 9, scope: !6688)
!6688 = distinct !DILexicalBlock(scope: !1054, file: !457, line: 1679, column: 9)
!6689 = !DILocation(line: 1679, column: 16, scope: !6688)
!6690 = !DILocation(line: 1679, column: 9, scope: !1054)
!6691 = !DILocation(line: 1680, column: 9, scope: !6688)
!6692 = !DILocation(line: 1683, column: 12, scope: !1064)
!6693 = !DILocation(line: 1683, column: 10, scope: !1064)
!6694 = !DILocation(line: 1684, column: 9, scope: !1062)
!6695 = !DILocation(line: 1684, column: 19, scope: !1062)
!6696 = !DILocation(line: 1684, column: 38, scope: !1062)
!6697 = !DILocation(line: 1684, column: 26, scope: !1062)
!6698 = !DILocation(line: 1685, column: 13, scope: !6699)
!6699 = distinct !DILexicalBlock(scope: !1062, file: !457, line: 1685, column: 13)
!6700 = !DILocation(line: 1685, column: 18, scope: !6699)
!6701 = !DILocation(line: 1685, column: 13, scope: !1062)
!6702 = !DILocation(line: 1686, column: 17, scope: !6703)
!6703 = distinct !DILexicalBlock(scope: !6704, file: !457, line: 1686, column: 17)
!6704 = distinct !DILexicalBlock(scope: !6699, file: !457, line: 1685, column: 33)
!6705 = !DILocation(line: 1686, column: 17, scope: !6704)
!6706 = !DILocation(line: 1687, column: 17, scope: !6703)
!6707 = !DILocation(line: 1688, column: 13, scope: !6704)
!6708 = !DILocation(line: 1690, column: 13, scope: !1067)
!6709 = !DILocation(line: 1690, column: 18, scope: !1067)
!6710 = !DILocation(line: 1690, column: 15, scope: !1067)
!6711 = !DILocation(line: 1690, column: 13, scope: !1062)
!6712 = !DILocation(line: 1691, column: 13, scope: !1066)
!6713 = !DILocation(line: 1691, column: 24, scope: !1066)
!6714 = !DILocation(line: 1691, column: 31, scope: !1066)
!6715 = !DILocation(line: 1698, column: 15, scope: !1066)
!6716 = !DILocation(line: 1699, column: 18, scope: !1066)
!6717 = !DILocation(line: 1699, column: 20, scope: !1066)
!6718 = !DILocation(line: 1699, column: 15, scope: !1066)
!6719 = !DILocation(line: 1700, column: 17, scope: !1071)
!6720 = !DILocation(line: 1700, column: 21, scope: !1071)
!6721 = !DILocation(line: 1700, column: 19, scope: !1071)
!6722 = !DILocation(line: 1700, column: 17, scope: !1066)
!6723 = !DILocation(line: 1702, column: 17, scope: !1070)
!6724 = !DILocation(line: 1703, column: 17, scope: !1070)
!6725 = !DILocation(line: 1703, column: 22, scope: !6726)
!6726 = !DILexicalBlockFile(scope: !1069, file: !457, discriminator: 1)
!6727 = !DILocation(line: 1703, column: 32, scope: !1069)
!6728 = !DILocation(line: 1703, column: 62, scope: !1069)
!6729 = !DILocation(line: 1703, column: 77, scope: !6730)
!6730 = distinct !DILexicalBlock(scope: !1069, file: !457, line: 1703, column: 74)
!6731 = !DILocation(line: 1703, column: 94, scope: !6730)
!6732 = !DILocation(line: 1703, column: 74, scope: !6730)
!6733 = !DILocation(line: 1703, column: 104, scope: !6730)
!6734 = !DILocation(line: 1703, column: 74, scope: !1069)
!6735 = !DILocation(line: 1703, column: 74, scope: !6736)
!6736 = !DILexicalBlockFile(scope: !1069, file: !457, discriminator: 2)
!6737 = !DILocation(line: 1703, column: 135, scope: !6738)
!6738 = !DILexicalBlockFile(scope: !6730, file: !457, discriminator: 3)
!6739 = !DILocation(line: 1703, column: 153, scope: !6730)
!6740 = !DILocation(line: 1703, column: 163, scope: !6730)
!6741 = !DILocation(line: 1703, column: 188, scope: !6730)
!6742 = !DILocation(line: 1703, column: 119, scope: !6730)
!6743 = !DILocation(line: 1703, column: 207, scope: !6744)
!6744 = !DILexicalBlockFile(scope: !1070, file: !457, discriminator: 4)
!6745 = !DILocation(line: 1703, column: 207, scope: !1069)
!6746 = !DILocation(line: 1703, column: 207, scope: !6747)
!6747 = !DILexicalBlockFile(scope: !1069, file: !457, discriminator: 5)
!6748 = !DILocation(line: 1704, column: 17, scope: !1070)
!6749 = !DILocation(line: 1706, column: 42, scope: !1075)
!6750 = !DILocation(line: 1706, column: 17, scope: !1075)
!6751 = !DILocation(line: 1706, column: 45, scope: !1075)
!6752 = !DILocation(line: 1706, column: 17, scope: !1066)
!6753 = !DILocation(line: 1707, column: 17, scope: !1074)
!6754 = !DILocation(line: 1707, column: 22, scope: !6755)
!6755 = !DILexicalBlockFile(scope: !1073, file: !457, discriminator: 1)
!6756 = !DILocation(line: 1707, column: 32, scope: !1073)
!6757 = !DILocation(line: 1707, column: 62, scope: !1073)
!6758 = !DILocation(line: 1707, column: 77, scope: !6759)
!6759 = distinct !DILexicalBlock(scope: !1073, file: !457, line: 1707, column: 74)
!6760 = !DILocation(line: 1707, column: 94, scope: !6759)
!6761 = !DILocation(line: 1707, column: 74, scope: !6759)
!6762 = !DILocation(line: 1707, column: 104, scope: !6759)
!6763 = !DILocation(line: 1707, column: 74, scope: !1073)
!6764 = !DILocation(line: 1707, column: 74, scope: !6765)
!6765 = !DILexicalBlockFile(scope: !1073, file: !457, discriminator: 2)
!6766 = !DILocation(line: 1707, column: 135, scope: !6767)
!6767 = !DILexicalBlockFile(scope: !6759, file: !457, discriminator: 3)
!6768 = !DILocation(line: 1707, column: 153, scope: !6759)
!6769 = !DILocation(line: 1707, column: 163, scope: !6759)
!6770 = !DILocation(line: 1707, column: 188, scope: !6759)
!6771 = !DILocation(line: 1707, column: 119, scope: !6759)
!6772 = !DILocation(line: 1707, column: 207, scope: !6773)
!6773 = !DILexicalBlockFile(scope: !1074, file: !457, discriminator: 4)
!6774 = !DILocation(line: 1707, column: 207, scope: !1073)
!6775 = !DILocation(line: 1707, column: 207, scope: !6776)
!6776 = !DILexicalBlockFile(scope: !1073, file: !457, discriminator: 5)
!6777 = !DILocation(line: 1708, column: 17, scope: !1074)
!6778 = !DILocation(line: 1710, column: 9, scope: !1067)
!6779 = !DILocation(line: 1710, column: 9, scope: !6780)
!6780 = !DILexicalBlockFile(scope: !1067, file: !457, discriminator: 1)
!6781 = !DILocation(line: 1710, column: 9, scope: !1066)
!6782 = !DILocation(line: 1711, column: 52, scope: !1062)
!6783 = !DILocation(line: 1711, column: 47, scope: !1062)
!6784 = !DILocation(line: 1711, column: 29, scope: !1062)
!6785 = !DILocation(line: 1711, column: 11, scope: !1062)
!6786 = !DILocation(line: 1711, column: 39, scope: !1062)
!6787 = !DILocation(line: 1711, column: 10, scope: !1062)
!6788 = !DILocation(line: 1711, column: 50, scope: !1062)
!6789 = !DILocation(line: 1712, column: 5, scope: !1063)
!6790 = !DILocation(line: 1712, column: 5, scope: !6791)
!6791 = !DILexicalBlockFile(scope: !1063, file: !457, discriminator: 1)
!6792 = !DILocation(line: 1712, column: 5, scope: !1062)
!6793 = !DILocation(line: 1683, column: 19, scope: !1063)
!6794 = !DILocation(line: 1683, column: 5, scope: !1063)
!6795 = !DILocation(line: 1715, column: 9, scope: !6796)
!6796 = distinct !DILexicalBlock(scope: !1054, file: !457, line: 1715, column: 9)
!6797 = !DILocation(line: 1715, column: 13, scope: !6796)
!6798 = !DILocation(line: 1715, column: 11, scope: !6796)
!6799 = !DILocation(line: 1715, column: 15, scope: !6796)
!6800 = !DILocation(line: 1716, column: 34, scope: !6796)
!6801 = !DILocation(line: 1716, column: 9, scope: !6796)
!6802 = !DILocation(line: 1716, column: 37, scope: !6796)
!6803 = !DILocation(line: 1715, column: 9, scope: !1054)
!6804 = !DILocation(line: 1717, column: 9, scope: !6796)
!6805 = !DILocation(line: 1719, column: 5, scope: !1054)
!6806 = !DILocation(line: 1719, column: 10, scope: !6807)
!6807 = !DILexicalBlockFile(scope: !1077, file: !457, discriminator: 1)
!6808 = !DILocation(line: 1719, column: 20, scope: !1077)
!6809 = !DILocation(line: 1719, column: 50, scope: !1077)
!6810 = !DILocation(line: 1719, column: 63, scope: !6811)
!6811 = distinct !DILexicalBlock(scope: !1077, file: !457, line: 1719, column: 60)
!6812 = !DILocation(line: 1719, column: 80, scope: !6811)
!6813 = !DILocation(line: 1719, column: 60, scope: !6811)
!6814 = !DILocation(line: 1719, column: 90, scope: !6811)
!6815 = !DILocation(line: 1719, column: 60, scope: !1077)
!6816 = !DILocation(line: 1719, column: 60, scope: !6817)
!6817 = !DILexicalBlockFile(scope: !1077, file: !457, discriminator: 2)
!6818 = !DILocation(line: 1719, column: 121, scope: !6819)
!6819 = !DILexicalBlockFile(scope: !6811, file: !457, discriminator: 3)
!6820 = !DILocation(line: 1719, column: 139, scope: !6811)
!6821 = !DILocation(line: 1719, column: 149, scope: !6811)
!6822 = !DILocation(line: 1719, column: 174, scope: !6811)
!6823 = !DILocation(line: 1719, column: 105, scope: !6811)
!6824 = !DILocation(line: 1719, column: 193, scope: !6825)
!6825 = !DILexicalBlockFile(scope: !1054, file: !457, discriminator: 4)
!6826 = !DILocation(line: 1719, column: 193, scope: !1077)
!6827 = !DILocation(line: 1719, column: 193, scope: !6828)
!6828 = !DILexicalBlockFile(scope: !1077, file: !457, discriminator: 5)
!6829 = !DILocation(line: 1720, column: 12, scope: !1054)
!6830 = !DILocation(line: 1720, column: 5, scope: !1054)
!6831 = !DILocation(line: 1723, column: 5, scope: !1054)
!6832 = !DILocation(line: 1723, column: 10, scope: !6833)
!6833 = !DILexicalBlockFile(scope: !1079, file: !457, discriminator: 1)
!6834 = !DILocation(line: 1723, column: 20, scope: !1079)
!6835 = !DILocation(line: 1723, column: 51, scope: !1079)
!6836 = !DILocation(line: 1723, column: 64, scope: !1082)
!6837 = !DILocation(line: 1723, column: 80, scope: !1082)
!6838 = !DILocation(line: 1723, column: 64, scope: !1079)
!6839 = !DILocation(line: 1723, column: 95, scope: !6840)
!6840 = !DILexicalBlockFile(scope: !1082, file: !457, discriminator: 2)
!6841 = !DILocation(line: 1723, column: 100, scope: !6842)
!6842 = !DILexicalBlockFile(scope: !1081, file: !457, discriminator: 4)
!6843 = !DILocation(line: 1723, column: 110, scope: !1081)
!6844 = !DILocation(line: 1723, column: 140, scope: !1081)
!6845 = !DILocation(line: 1723, column: 166, scope: !6846)
!6846 = distinct !DILexicalBlock(scope: !1081, file: !457, line: 1723, column: 163)
!6847 = !DILocation(line: 1723, column: 183, scope: !6846)
!6848 = !DILocation(line: 1723, column: 163, scope: !6846)
!6849 = !DILocation(line: 1723, column: 193, scope: !6846)
!6850 = !DILocation(line: 1723, column: 163, scope: !1081)
!6851 = !DILocation(line: 1723, column: 163, scope: !6852)
!6852 = !DILexicalBlockFile(scope: !1081, file: !457, discriminator: 5)
!6853 = !DILocation(line: 1723, column: 224, scope: !6854)
!6854 = !DILexicalBlockFile(scope: !6846, file: !457, discriminator: 6)
!6855 = !DILocation(line: 1723, column: 242, scope: !6846)
!6856 = !DILocation(line: 1723, column: 252, scope: !6846)
!6857 = !DILocation(line: 1723, column: 277, scope: !6846)
!6858 = !DILocation(line: 1723, column: 208, scope: !6846)
!6859 = !DILocation(line: 1723, column: 296, scope: !6860)
!6860 = !DILexicalBlockFile(scope: !1082, file: !457, discriminator: 7)
!6861 = !DILocation(line: 1723, column: 296, scope: !1081)
!6862 = !DILocation(line: 1723, column: 296, scope: !6863)
!6863 = !DILexicalBlockFile(scope: !1081, file: !457, discriminator: 8)
!6864 = !DILocation(line: 1723, column: 296, scope: !6865)
!6865 = !DILexicalBlockFile(scope: !1081, file: !457, discriminator: 9)
!6866 = !DILocation(line: 1723, column: 309, scope: !6867)
!6867 = !DILexicalBlockFile(scope: !6868, file: !457, discriminator: 10)
!6868 = !DILexicalBlockFile(scope: !1054, file: !457, discriminator: 3)
!6869 = !DILocation(line: 1723, column: 309, scope: !1079)
!6870 = !DILocation(line: 1723, column: 309, scope: !6871)
!6871 = !DILexicalBlockFile(scope: !1079, file: !457, discriminator: 11)
!6872 = !DILocation(line: 1724, column: 5, scope: !1054)
!6873 = !DILocation(line: 1724, column: 10, scope: !6874)
!6874 = !DILexicalBlockFile(scope: !1084, file: !457, discriminator: 1)
!6875 = !DILocation(line: 1724, column: 20, scope: !1084)
!6876 = !DILocation(line: 1724, column: 50, scope: !1084)
!6877 = !DILocation(line: 1724, column: 63, scope: !6878)
!6878 = distinct !DILexicalBlock(scope: !1084, file: !457, line: 1724, column: 60)
!6879 = !DILocation(line: 1724, column: 80, scope: !6878)
!6880 = !DILocation(line: 1724, column: 60, scope: !6878)
!6881 = !DILocation(line: 1724, column: 90, scope: !6878)
!6882 = !DILocation(line: 1724, column: 60, scope: !1084)
!6883 = !DILocation(line: 1724, column: 60, scope: !6884)
!6884 = !DILexicalBlockFile(scope: !1084, file: !457, discriminator: 2)
!6885 = !DILocation(line: 1724, column: 121, scope: !6886)
!6886 = !DILexicalBlockFile(scope: !6878, file: !457, discriminator: 3)
!6887 = !DILocation(line: 1724, column: 139, scope: !6878)
!6888 = !DILocation(line: 1724, column: 149, scope: !6878)
!6889 = !DILocation(line: 1724, column: 174, scope: !6878)
!6890 = !DILocation(line: 1724, column: 105, scope: !6878)
!6891 = !DILocation(line: 1724, column: 193, scope: !6825)
!6892 = !DILocation(line: 1724, column: 193, scope: !1084)
!6893 = !DILocation(line: 1724, column: 193, scope: !6894)
!6894 = !DILexicalBlockFile(scope: !1084, file: !457, discriminator: 5)
!6895 = !DILocation(line: 1725, column: 5, scope: !1054)
!6896 = !DILocation(line: 1726, column: 1, scope: !1054)
!6897 = !DILocation(line: 2645, column: 28, scope: !1497)
!6898 = !DILocation(line: 2647, column: 5, scope: !1497)
!6899 = !DILocation(line: 2647, column: 19, scope: !1497)
!6900 = !DILocation(line: 2647, column: 23, scope: !1497)
!6901 = !DILocation(line: 2647, column: 26, scope: !1497)
!6902 = !DILocation(line: 2648, column: 5, scope: !1497)
!6903 = !DILocation(line: 2648, column: 17, scope: !1497)
!6904 = !DILocation(line: 2649, column: 9, scope: !1497)
!6905 = !DILocation(line: 2649, column: 12, scope: !1497)
!6906 = !{!1877, !1830, i64 216}
!6907 = !DILocation(line: 2649, column: 7, scope: !1497)
!6908 = !DILocation(line: 2650, column: 9, scope: !1504)
!6909 = !DILocation(line: 2650, column: 11, scope: !1504)
!6910 = !DILocation(line: 2650, column: 9, scope: !1497)
!6911 = !DILocation(line: 2651, column: 30, scope: !6912)
!6912 = distinct !DILexicalBlock(scope: !6913, file: !457, line: 2651, column: 13)
!6913 = distinct !DILexicalBlock(scope: !1504, file: !457, line: 2650, column: 26)
!6914 = !DILocation(line: 2651, column: 13, scope: !6912)
!6915 = !DILocation(line: 2651, column: 13, scope: !6913)
!6916 = !DILocation(line: 2652, column: 34, scope: !6912)
!6917 = !DILocation(line: 2652, column: 20, scope: !6912)
!6918 = !DILocation(line: 2652, column: 13, scope: !6912)
!6919 = !DILocation(line: 2653, column: 62, scope: !6913)
!6920 = !DILocation(line: 2653, column: 16, scope: !6913)
!6921 = !DILocation(line: 2653, column: 9, scope: !6913)
!6922 = !DILocation(line: 2656, column: 9, scope: !1503)
!6923 = !DILocation(line: 2656, column: 19, scope: !1503)
!6924 = !DILocation(line: 2656, column: 27, scope: !1503)
!6925 = !DILocation(line: 2656, column: 30, scope: !1503)
!6926 = !DILocation(line: 2656, column: 25, scope: !1503)
!6927 = !DILocation(line: 2657, column: 13, scope: !1508)
!6928 = !DILocation(line: 2657, column: 17, scope: !1508)
!6929 = !DILocation(line: 2657, column: 31, scope: !1508)
!6930 = !DILocation(line: 2657, column: 37, scope: !6931)
!6931 = !DILexicalBlockFile(scope: !1508, file: !457, discriminator: 1)
!6932 = !DILocation(line: 2657, column: 43, scope: !1508)
!6933 = !DILocation(line: 2657, column: 52, scope: !1508)
!6934 = !{!1877, !1830, i64 224}
!6935 = !DILocation(line: 2657, column: 64, scope: !1508)
!6936 = !DILocation(line: 2657, column: 78, scope: !1508)
!6937 = !DILocation(line: 2657, column: 82, scope: !6938)
!6938 = !DILexicalBlockFile(scope: !1508, file: !457, discriminator: 2)
!6939 = !DILocation(line: 2657, column: 88, scope: !1508)
!6940 = !DILocation(line: 2657, column: 97, scope: !1508)
!6941 = !DILocation(line: 2657, column: 109, scope: !1508)
!6942 = !DILocation(line: 2657, column: 13, scope: !1503)
!6943 = !DILocation(line: 2658, column: 26, scope: !1507)
!6944 = !DILocation(line: 2661, column: 26, scope: !1507)
!6945 = !DILocation(line: 2661, column: 31, scope: !1507)
!6946 = !DILocation(line: 2661, column: 40, scope: !1507)
!6947 = !DILocation(line: 2658, column: 13, scope: !1507)
!6948 = !DILocation(line: 2662, column: 13, scope: !1507)
!6949 = !DILocation(line: 2662, column: 18, scope: !6950)
!6950 = !DILexicalBlockFile(scope: !1506, file: !457, discriminator: 1)
!6951 = !DILocation(line: 2662, column: 28, scope: !1506)
!6952 = !DILocation(line: 2662, column: 58, scope: !1506)
!6953 = !DILocation(line: 2662, column: 72, scope: !6954)
!6954 = distinct !DILexicalBlock(scope: !1506, file: !457, line: 2662, column: 69)
!6955 = !DILocation(line: 2662, column: 89, scope: !6954)
!6956 = !DILocation(line: 2662, column: 69, scope: !6954)
!6957 = !DILocation(line: 2662, column: 99, scope: !6954)
!6958 = !DILocation(line: 2662, column: 69, scope: !1506)
!6959 = !DILocation(line: 2662, column: 69, scope: !6960)
!6960 = !DILexicalBlockFile(scope: !1506, file: !457, discriminator: 2)
!6961 = !DILocation(line: 2662, column: 130, scope: !6962)
!6962 = !DILexicalBlockFile(scope: !6954, file: !457, discriminator: 3)
!6963 = !DILocation(line: 2662, column: 148, scope: !6954)
!6964 = !DILocation(line: 2662, column: 158, scope: !6954)
!6965 = !DILocation(line: 2662, column: 183, scope: !6954)
!6966 = !DILocation(line: 2662, column: 114, scope: !6954)
!6967 = !DILocation(line: 2662, column: 202, scope: !6968)
!6968 = !DILexicalBlockFile(scope: !1507, file: !457, discriminator: 4)
!6969 = !DILocation(line: 2662, column: 202, scope: !1506)
!6970 = !DILocation(line: 2662, column: 202, scope: !6971)
!6971 = !DILexicalBlockFile(scope: !1506, file: !457, discriminator: 5)
!6972 = !DILocation(line: 2663, column: 17, scope: !1507)
!6973 = !DILocation(line: 2664, column: 9, scope: !1507)
!6974 = !DILocation(line: 2665, column: 16, scope: !1503)
!6975 = !DILocation(line: 2665, column: 9, scope: !1503)
!6976 = !DILocation(line: 2666, column: 5, scope: !1504)
!6977 = !DILocation(line: 2667, column: 1, scope: !1497)
!6978 = !DILocation(line: 2677, column: 23, scope: !1509)
!6979 = !DILocation(line: 2679, column: 5, scope: !1509)
!6980 = !DILocation(line: 2679, column: 15, scope: !1509)
!6981 = !DILocation(line: 2680, column: 16, scope: !1509)
!6982 = !DILocation(line: 2680, column: 22, scope: !1509)
!6983 = !DILocation(line: 2680, column: 31, scope: !1509)
!6984 = !DILocation(line: 2680, column: 44, scope: !1509)
!6985 = !DILocation(line: 2680, column: 14, scope: !1509)
!6986 = !DILocation(line: 2680, column: 12, scope: !1509)
!6987 = !DILocation(line: 2681, column: 9, scope: !6988)
!6988 = distinct !DILexicalBlock(scope: !1509, file: !457, line: 2681, column: 9)
!6989 = !DILocation(line: 2681, column: 16, scope: !6988)
!6990 = !DILocation(line: 2681, column: 30, scope: !6988)
!6991 = !DILocation(line: 2682, column: 9, scope: !6988)
!6992 = !DILocation(line: 2682, column: 26, scope: !6988)
!6993 = !DILocation(line: 2683, column: 32, scope: !6988)
!6994 = !DILocation(line: 2683, column: 9, scope: !6988)
!6995 = !DILocation(line: 2681, column: 9, scope: !1509)
!6996 = !DILocation(line: 2684, column: 9, scope: !6988)
!6997 = !DILocation(line: 2685, column: 12, scope: !1509)
!6998 = !DILocation(line: 2686, column: 1, scope: !1509)
!6999 = !DILocation(line: 2685, column: 5, scope: !1509)
!7000 = !DILocation(line: 1729, column: 27, scope: !1085)
!7001 = !DILocation(line: 1731, column: 5, scope: !1085)
!7002 = !DILocation(line: 1731, column: 15, scope: !1085)
!7003 = !DILocation(line: 1732, column: 5, scope: !1085)
!7004 = !DILocation(line: 1732, column: 15, scope: !1085)
!7005 = !DILocation(line: 1734, column: 9, scope: !7006)
!7006 = distinct !DILexicalBlock(scope: !1085, file: !457, line: 1734, column: 9)
!7007 = !DILocation(line: 1734, column: 11, scope: !7006)
!7008 = !DILocation(line: 1734, column: 9, scope: !1085)
!7009 = !DILocation(line: 1735, column: 16, scope: !7006)
!7010 = !DILocation(line: 1735, column: 9, scope: !7006)
!7011 = !DILocation(line: 1737, column: 14, scope: !1085)
!7012 = !DILocation(line: 1737, column: 12, scope: !1085)
!7013 = !DILocation(line: 1738, column: 9, scope: !7014)
!7014 = distinct !DILexicalBlock(scope: !1085, file: !457, line: 1738, column: 9)
!7015 = !DILocation(line: 1738, column: 16, scope: !7014)
!7016 = !DILocation(line: 1738, column: 9, scope: !1085)
!7017 = !DILocation(line: 1739, column: 9, scope: !7014)
!7018 = !DILocation(line: 1741, column: 41, scope: !1085)
!7019 = !DILocation(line: 1741, column: 25, scope: !1085)
!7020 = !DILocation(line: 1741, column: 49, scope: !1085)
!7021 = !DILocation(line: 1741, column: 10, scope: !1085)
!7022 = !DILocation(line: 1741, column: 8, scope: !1085)
!7023 = !DILocation(line: 1742, column: 9, scope: !1093)
!7024 = !DILocation(line: 1742, column: 12, scope: !1093)
!7025 = !DILocation(line: 1742, column: 9, scope: !1085)
!7026 = !DILocation(line: 1743, column: 9, scope: !1092)
!7027 = !DILocation(line: 1743, column: 14, scope: !7028)
!7028 = !DILexicalBlockFile(scope: !1091, file: !457, discriminator: 1)
!7029 = !DILocation(line: 1743, column: 24, scope: !1091)
!7030 = !DILocation(line: 1743, column: 54, scope: !1091)
!7031 = !DILocation(line: 1743, column: 71, scope: !7032)
!7032 = distinct !DILexicalBlock(scope: !1091, file: !457, line: 1743, column: 68)
!7033 = !DILocation(line: 1743, column: 88, scope: !7032)
!7034 = !DILocation(line: 1743, column: 68, scope: !7032)
!7035 = !DILocation(line: 1743, column: 98, scope: !7032)
!7036 = !DILocation(line: 1743, column: 68, scope: !1091)
!7037 = !DILocation(line: 1743, column: 68, scope: !7038)
!7038 = !DILexicalBlockFile(scope: !1091, file: !457, discriminator: 2)
!7039 = !DILocation(line: 1743, column: 129, scope: !7040)
!7040 = !DILexicalBlockFile(scope: !7032, file: !457, discriminator: 3)
!7041 = !DILocation(line: 1743, column: 147, scope: !7032)
!7042 = !DILocation(line: 1743, column: 157, scope: !7032)
!7043 = !DILocation(line: 1743, column: 182, scope: !7032)
!7044 = !DILocation(line: 1743, column: 113, scope: !7032)
!7045 = !DILocation(line: 1743, column: 201, scope: !7046)
!7046 = !DILexicalBlockFile(scope: !1092, file: !457, discriminator: 4)
!7047 = !DILocation(line: 1743, column: 201, scope: !1091)
!7048 = !DILocation(line: 1743, column: 201, scope: !7049)
!7049 = !DILexicalBlockFile(scope: !1091, file: !457, discriminator: 5)
!7050 = !DILocation(line: 1744, column: 9, scope: !1092)
!7051 = !DILocation(line: 1746, column: 5, scope: !1085)
!7052 = !DILocation(line: 1746, column: 10, scope: !7053)
!7053 = !DILexicalBlockFile(scope: !1095, file: !457, discriminator: 1)
!7054 = !DILocation(line: 1746, column: 20, scope: !1095)
!7055 = !DILocation(line: 1746, column: 50, scope: !1095)
!7056 = !DILocation(line: 1746, column: 63, scope: !7057)
!7057 = distinct !DILexicalBlock(scope: !1095, file: !457, line: 1746, column: 60)
!7058 = !DILocation(line: 1746, column: 80, scope: !7057)
!7059 = !DILocation(line: 1746, column: 60, scope: !7057)
!7060 = !DILocation(line: 1746, column: 90, scope: !7057)
!7061 = !DILocation(line: 1746, column: 60, scope: !1095)
!7062 = !DILocation(line: 1746, column: 60, scope: !7063)
!7063 = !DILexicalBlockFile(scope: !1095, file: !457, discriminator: 2)
!7064 = !DILocation(line: 1746, column: 121, scope: !7065)
!7065 = !DILexicalBlockFile(scope: !7057, file: !457, discriminator: 3)
!7066 = !DILocation(line: 1746, column: 139, scope: !7057)
!7067 = !DILocation(line: 1746, column: 149, scope: !7057)
!7068 = !DILocation(line: 1746, column: 174, scope: !7057)
!7069 = !DILocation(line: 1746, column: 105, scope: !7057)
!7070 = !DILocation(line: 1746, column: 193, scope: !7071)
!7071 = !DILexicalBlockFile(scope: !1085, file: !457, discriminator: 4)
!7072 = !DILocation(line: 1746, column: 193, scope: !1095)
!7073 = !DILocation(line: 1746, column: 193, scope: !7074)
!7074 = !DILexicalBlockFile(scope: !1095, file: !457, discriminator: 5)
!7075 = !DILocation(line: 1747, column: 12, scope: !1085)
!7076 = !DILocation(line: 1747, column: 5, scope: !1085)
!7077 = !DILocation(line: 1748, column: 1, scope: !1085)
!7078 = !DILocation(line: 1751, column: 27, scope: !1096)
!7079 = !DILocation(line: 1751, column: 42, scope: !1096)
!7080 = !DILocation(line: 1753, column: 5, scope: !1096)
!7081 = !DILocation(line: 1753, column: 15, scope: !1096)
!7082 = !DILocation(line: 1755, column: 9, scope: !7083)
!7083 = distinct !DILexicalBlock(scope: !1096, file: !457, line: 1755, column: 9)
!7084 = !DILocation(line: 1755, column: 11, scope: !7083)
!7085 = !DILocation(line: 1755, column: 9, scope: !1096)
!7086 = !DILocation(line: 1756, column: 16, scope: !7083)
!7087 = !DILocation(line: 1756, column: 9, scope: !7083)
!7088 = !DILocation(line: 1758, column: 24, scope: !7089)
!7089 = distinct !DILexicalBlock(scope: !1096, file: !457, line: 1758, column: 9)
!7090 = !DILocation(line: 1758, column: 29, scope: !7089)
!7091 = !DILocation(line: 1758, column: 38, scope: !7089)
!7092 = !DILocation(line: 1758, column: 55, scope: !7089)
!7093 = !DILocation(line: 1758, column: 73, scope: !7094)
!7094 = !DILexicalBlockFile(scope: !7089, file: !457, discriminator: 1)
!7095 = !DILocation(line: 1758, column: 78, scope: !7089)
!7096 = !DILocation(line: 1758, column: 87, scope: !7089)
!7097 = !DILocation(line: 1758, column: 9, scope: !1096)
!7098 = !DILocation(line: 1759, column: 25, scope: !7099)
!7099 = distinct !DILexicalBlock(scope: !7089, file: !457, line: 1758, column: 106)
!7100 = !DILocation(line: 1759, column: 30, scope: !7099)
!7101 = !DILocation(line: 1759, column: 39, scope: !7099)
!7102 = !DILocation(line: 1760, column: 16, scope: !7099)
!7103 = !DILocation(line: 1760, column: 9, scope: !7099)
!7104 = !DILocation(line: 1763, column: 27, scope: !1096)
!7105 = !DILocation(line: 1763, column: 10, scope: !1096)
!7106 = !DILocation(line: 1763, column: 8, scope: !1096)
!7107 = !DILocation(line: 1764, column: 9, scope: !7108)
!7108 = distinct !DILexicalBlock(scope: !1096, file: !457, line: 1764, column: 9)
!7109 = !DILocation(line: 1764, column: 12, scope: !7108)
!7110 = !DILocation(line: 1764, column: 9, scope: !1096)
!7111 = !DILocation(line: 1765, column: 36, scope: !7112)
!7112 = distinct !DILexicalBlock(scope: !7113, file: !457, line: 1765, column: 13)
!7113 = distinct !DILexicalBlock(scope: !7108, file: !457, line: 1764, column: 27)
!7114 = !DILocation(line: 1765, column: 13, scope: !7112)
!7115 = !DILocation(line: 1765, column: 13, scope: !7113)
!7116 = !DILocation(line: 1766, column: 29, scope: !7112)
!7117 = !DILocation(line: 1766, column: 46, scope: !7112)
!7118 = !DILocation(line: 1766, column: 13, scope: !7112)
!7119 = !DILocation(line: 1767, column: 9, scope: !7113)
!7120 = !DILocation(line: 1770, column: 25, scope: !1096)
!7121 = !DILocation(line: 1770, column: 9, scope: !1096)
!7122 = !DILocation(line: 1770, column: 7, scope: !1096)
!7123 = !DILocation(line: 1771, column: 5, scope: !1096)
!7124 = !DILocation(line: 1771, column: 10, scope: !7125)
!7125 = !DILexicalBlockFile(scope: !1104, file: !457, discriminator: 1)
!7126 = !DILocation(line: 1771, column: 20, scope: !1104)
!7127 = !DILocation(line: 1771, column: 50, scope: !1104)
!7128 = !DILocation(line: 1771, column: 63, scope: !7129)
!7129 = distinct !DILexicalBlock(scope: !1104, file: !457, line: 1771, column: 60)
!7130 = !DILocation(line: 1771, column: 80, scope: !7129)
!7131 = !DILocation(line: 1771, column: 60, scope: !7129)
!7132 = !DILocation(line: 1771, column: 90, scope: !7129)
!7133 = !DILocation(line: 1771, column: 60, scope: !1104)
!7134 = !DILocation(line: 1771, column: 60, scope: !7135)
!7135 = !DILexicalBlockFile(scope: !1104, file: !457, discriminator: 2)
!7136 = !DILocation(line: 1771, column: 121, scope: !7137)
!7137 = !DILexicalBlockFile(scope: !7129, file: !457, discriminator: 3)
!7138 = !DILocation(line: 1771, column: 139, scope: !7129)
!7139 = !DILocation(line: 1771, column: 149, scope: !7129)
!7140 = !DILocation(line: 1771, column: 174, scope: !7129)
!7141 = !DILocation(line: 1771, column: 105, scope: !7129)
!7142 = !DILocation(line: 1771, column: 193, scope: !7143)
!7143 = !DILexicalBlockFile(scope: !1096, file: !457, discriminator: 4)
!7144 = !DILocation(line: 1771, column: 193, scope: !1104)
!7145 = !DILocation(line: 1771, column: 193, scope: !7146)
!7146 = !DILexicalBlockFile(scope: !1104, file: !457, discriminator: 5)
!7147 = !DILocation(line: 1773, column: 12, scope: !1096)
!7148 = !DILocation(line: 1773, column: 5, scope: !1096)
!7149 = !DILocation(line: 1774, column: 1, scope: !1096)
!7150 = !DILocation(line: 1783, column: 34, scope: !1105)
!7151 = !DILocation(line: 1783, column: 49, scope: !1105)
!7152 = !DILocation(line: 1783, column: 58, scope: !1105)
!7153 = !DILocation(line: 1785, column: 5, scope: !1105)
!7154 = !DILocation(line: 1785, column: 16, scope: !1105)
!7155 = !DILocation(line: 1786, column: 5, scope: !1105)
!7156 = !DILocation(line: 1786, column: 9, scope: !1105)
!7157 = !DILocation(line: 1787, column: 5, scope: !1105)
!7158 = !DILocation(line: 1787, column: 15, scope: !1105)
!7159 = !DILocation(line: 1789, column: 9, scope: !7160)
!7160 = distinct !DILexicalBlock(scope: !1105, file: !457, line: 1789, column: 9)
!7161 = !DILocation(line: 1789, column: 13, scope: !7160)
!7162 = !DILocation(line: 1789, column: 27, scope: !7160)
!7163 = !DILocation(line: 1789, column: 30, scope: !7164)
!7164 = !DILexicalBlockFile(scope: !7160, file: !457, discriminator: 1)
!7165 = !DILocation(line: 1789, column: 34, scope: !7160)
!7166 = !DILocation(line: 1789, column: 9, scope: !1105)
!7167 = !DILocation(line: 1790, column: 9, scope: !7168)
!7168 = distinct !DILexicalBlock(scope: !7160, file: !457, line: 1789, column: 49)
!7169 = !DILocation(line: 1791, column: 9, scope: !7168)
!7170 = !DILocation(line: 1794, column: 27, scope: !1105)
!7171 = !DILocation(line: 1794, column: 10, scope: !1105)
!7172 = !DILocation(line: 1794, column: 8, scope: !1105)
!7173 = !DILocation(line: 1795, column: 9, scope: !7174)
!7174 = distinct !DILexicalBlock(scope: !1105, file: !457, line: 1795, column: 9)
!7175 = !DILocation(line: 1795, column: 12, scope: !7174)
!7176 = !DILocation(line: 1795, column: 9, scope: !1105)
!7177 = !DILocation(line: 1796, column: 65, scope: !7178)
!7178 = distinct !DILexicalBlock(scope: !7174, file: !457, line: 1795, column: 27)
!7179 = !DILocation(line: 1796, column: 9, scope: !7178)
!7180 = !DILocation(line: 1797, column: 9, scope: !7178)
!7181 = !DILocation(line: 1800, column: 17, scope: !1105)
!7182 = !DILocation(line: 1800, column: 7, scope: !1105)
!7183 = !DILocation(line: 1801, column: 5, scope: !1105)
!7184 = !DILocation(line: 1802, column: 9, scope: !1116)
!7185 = !DILocation(line: 1802, column: 13, scope: !1116)
!7186 = !DILocation(line: 1803, column: 9, scope: !1116)
!7187 = !DILocation(line: 1803, column: 19, scope: !1116)
!7188 = !DILocation(line: 1803, column: 38, scope: !1116)
!7189 = !DILocation(line: 1803, column: 26, scope: !1116)
!7190 = !DILocation(line: 1804, column: 13, scope: !7191)
!7191 = distinct !DILexicalBlock(scope: !1116, file: !457, line: 1804, column: 13)
!7192 = !DILocation(line: 1804, column: 18, scope: !7191)
!7193 = !DILocation(line: 1804, column: 13, scope: !1116)
!7194 = !DILocation(line: 1805, column: 17, scope: !7195)
!7195 = distinct !DILexicalBlock(scope: !7196, file: !457, line: 1805, column: 17)
!7196 = distinct !DILexicalBlock(scope: !7191, file: !457, line: 1804, column: 33)
!7197 = !DILocation(line: 1805, column: 17, scope: !7196)
!7198 = !DILocation(line: 1806, column: 17, scope: !7195)
!7199 = !DILocation(line: 1807, column: 13, scope: !7196)
!7200 = !DILocation(line: 1810, column: 40, scope: !1116)
!7201 = !DILocation(line: 1810, column: 45, scope: !1116)
!7202 = !DILocation(line: 1810, column: 15, scope: !1116)
!7203 = !DILocation(line: 1810, column: 13, scope: !1116)
!7204 = !DILocation(line: 1811, column: 9, scope: !1116)
!7205 = !DILocation(line: 1811, column: 14, scope: !7206)
!7206 = !DILexicalBlockFile(scope: !1121, file: !457, discriminator: 1)
!7207 = !DILocation(line: 1811, column: 24, scope: !1121)
!7208 = !DILocation(line: 1811, column: 54, scope: !1121)
!7209 = !DILocation(line: 1811, column: 69, scope: !7210)
!7210 = distinct !DILexicalBlock(scope: !1121, file: !457, line: 1811, column: 66)
!7211 = !DILocation(line: 1811, column: 86, scope: !7210)
!7212 = !DILocation(line: 1811, column: 66, scope: !7210)
!7213 = !DILocation(line: 1811, column: 96, scope: !7210)
!7214 = !DILocation(line: 1811, column: 66, scope: !1121)
!7215 = !DILocation(line: 1811, column: 66, scope: !7216)
!7216 = !DILexicalBlockFile(scope: !1121, file: !457, discriminator: 2)
!7217 = !DILocation(line: 1811, column: 127, scope: !7218)
!7218 = !DILexicalBlockFile(scope: !7210, file: !457, discriminator: 3)
!7219 = !DILocation(line: 1811, column: 145, scope: !7210)
!7220 = !DILocation(line: 1811, column: 155, scope: !7210)
!7221 = !DILocation(line: 1811, column: 180, scope: !7210)
!7222 = !DILocation(line: 1811, column: 111, scope: !7210)
!7223 = !DILocation(line: 1811, column: 199, scope: !7224)
!7224 = !DILexicalBlockFile(scope: !1116, file: !457, discriminator: 4)
!7225 = !DILocation(line: 1811, column: 199, scope: !1121)
!7226 = !DILocation(line: 1811, column: 199, scope: !7227)
!7227 = !DILexicalBlockFile(scope: !1121, file: !457, discriminator: 5)
!7228 = !DILocation(line: 1812, column: 13, scope: !7229)
!7229 = distinct !DILexicalBlock(scope: !1116, file: !457, line: 1812, column: 13)
!7230 = !DILocation(line: 1812, column: 17, scope: !7229)
!7231 = !DILocation(line: 1812, column: 13, scope: !1116)
!7232 = !DILocation(line: 1813, column: 13, scope: !7229)
!7233 = !DILocation(line: 1814, column: 13, scope: !7234)
!7234 = distinct !DILexicalBlock(scope: !1116, file: !457, line: 1814, column: 13)
!7235 = !DILocation(line: 1814, column: 17, scope: !7234)
!7236 = !DILocation(line: 1814, column: 13, scope: !1116)
!7237 = !DILocation(line: 1815, column: 21, scope: !7238)
!7238 = distinct !DILexicalBlock(scope: !7234, file: !457, line: 1814, column: 22)
!7239 = !DILocation(line: 1817, column: 21, scope: !7240)
!7240 = distinct !DILexicalBlock(scope: !7241, file: !457, line: 1817, column: 21)
!7241 = distinct !DILexicalBlock(scope: !7238, file: !457, line: 1815, column: 32)
!7242 = !DILocation(line: 1817, column: 23, scope: !7240)
!7243 = !DILocation(line: 1817, column: 21, scope: !7241)
!7244 = !DILocation(line: 1818, column: 37, scope: !7245)
!7245 = distinct !DILexicalBlock(scope: !7240, file: !457, line: 1817, column: 59)
!7246 = !DILocation(line: 1818, column: 21, scope: !7245)
!7247 = !DILocation(line: 1820, column: 21, scope: !7245)
!7248 = !DILocation(line: 1822, column: 17, scope: !7241)
!7249 = !DILocation(line: 1823, column: 17, scope: !7241)
!7250 = !DILocation(line: 1826, column: 21, scope: !7251)
!7251 = distinct !DILexicalBlock(scope: !7241, file: !457, line: 1826, column: 21)
!7252 = !DILocation(line: 1826, column: 21, scope: !7241)
!7253 = !DILocation(line: 1827, column: 37, scope: !7254)
!7254 = distinct !DILexicalBlock(scope: !7251, file: !457, line: 1826, column: 30)
!7255 = !DILocation(line: 1827, column: 21, scope: !7254)
!7256 = !DILocation(line: 1829, column: 21, scope: !7254)
!7257 = !DILocation(line: 1831, column: 17, scope: !7241)
!7258 = !DILocation(line: 1834, column: 19, scope: !7241)
!7259 = !DILocation(line: 1835, column: 17, scope: !7241)
!7260 = !DILocation(line: 1839, column: 13, scope: !7241)
!7261 = !DILocation(line: 1840, column: 9, scope: !7238)
!7262 = !DILocation(line: 1842, column: 13, scope: !7263)
!7263 = distinct !DILexicalBlock(scope: !1116, file: !457, line: 1842, column: 13)
!7264 = !DILocation(line: 1842, column: 23, scope: !7263)
!7265 = !DILocation(line: 1842, column: 13, scope: !1116)
!7266 = !DILocation(line: 1843, column: 17, scope: !7267)
!7267 = distinct !DILexicalBlock(scope: !7268, file: !457, line: 1843, column: 17)
!7268 = distinct !DILexicalBlock(scope: !7263, file: !457, line: 1842, column: 29)
!7269 = !DILocation(line: 1843, column: 19, scope: !7267)
!7270 = !DILocation(line: 1843, column: 17, scope: !7268)
!7271 = !DILocation(line: 1844, column: 25, scope: !7267)
!7272 = !DILocation(line: 1844, column: 17, scope: !7267)
!7273 = !DILocation(line: 1845, column: 13, scope: !7268)
!7274 = !DILocation(line: 1846, column: 9, scope: !7268)
!7275 = !DILocation(line: 1847, column: 5, scope: !1117)
!7276 = !DILocation(line: 1847, column: 5, scope: !7277)
!7277 = !DILexicalBlockFile(scope: !1117, file: !457, discriminator: 1)
!7278 = !DILocation(line: 1801, column: 5, scope: !1117)
!7279 = !DILocation(line: 1849, column: 9, scope: !7280)
!7280 = distinct !DILexicalBlock(scope: !1105, file: !457, line: 1849, column: 9)
!7281 = !DILocation(line: 1849, column: 19, scope: !7280)
!7282 = !DILocation(line: 1849, column: 9, scope: !1105)
!7283 = !DILocation(line: 1850, column: 9, scope: !7280)
!7284 = !DILocation(line: 1852, column: 21, scope: !1105)
!7285 = !DILocation(line: 1852, column: 5, scope: !1105)
!7286 = !DILocation(line: 1856, column: 7, scope: !1105)
!7287 = !DILocation(line: 1856, column: 5, scope: !1105)
!7288 = !DILocation(line: 1859, column: 5, scope: !1105)
!7289 = !DILocation(line: 1859, column: 10, scope: !7290)
!7290 = !DILexicalBlockFile(scope: !1123, file: !457, discriminator: 1)
!7291 = !DILocation(line: 1859, column: 20, scope: !1123)
!7292 = !DILocation(line: 1859, column: 50, scope: !1123)
!7293 = !DILocation(line: 1859, column: 63, scope: !7294)
!7294 = distinct !DILexicalBlock(scope: !1123, file: !457, line: 1859, column: 60)
!7295 = !DILocation(line: 1859, column: 80, scope: !7294)
!7296 = !DILocation(line: 1859, column: 60, scope: !7294)
!7297 = !DILocation(line: 1859, column: 90, scope: !7294)
!7298 = !DILocation(line: 1859, column: 60, scope: !1123)
!7299 = !DILocation(line: 1859, column: 60, scope: !7300)
!7300 = !DILexicalBlockFile(scope: !1123, file: !457, discriminator: 2)
!7301 = !DILocation(line: 1859, column: 121, scope: !7302)
!7302 = !DILexicalBlockFile(scope: !7294, file: !457, discriminator: 3)
!7303 = !DILocation(line: 1859, column: 139, scope: !7294)
!7304 = !DILocation(line: 1859, column: 149, scope: !7294)
!7305 = !DILocation(line: 1859, column: 174, scope: !7294)
!7306 = !DILocation(line: 1859, column: 105, scope: !7294)
!7307 = !DILocation(line: 1859, column: 193, scope: !7308)
!7308 = !DILexicalBlockFile(scope: !1105, file: !457, discriminator: 4)
!7309 = !DILocation(line: 1859, column: 193, scope: !1123)
!7310 = !DILocation(line: 1859, column: 193, scope: !7311)
!7311 = !DILexicalBlockFile(scope: !1123, file: !457, discriminator: 5)
!7312 = !DILocation(line: 1860, column: 12, scope: !1105)
!7313 = !DILocation(line: 1860, column: 5, scope: !1105)
!7314 = !DILocation(line: 1862, column: 1, scope: !1105)
!7315 = !DILocation(line: 1866, column: 28, scope: !1124)
!7316 = !DILocation(line: 1866, column: 41, scope: !1124)
!7317 = !DILocation(line: 1868, column: 35, scope: !1124)
!7318 = !DILocation(line: 1868, column: 38, scope: !1124)
!7319 = !DILocation(line: 1868, column: 12, scope: !1124)
!7320 = !DILocation(line: 1868, column: 5, scope: !1124)
!7321 = !DILocation(line: 1875, column: 31, scope: !1128)
!7322 = !DILocation(line: 1875, column: 46, scope: !1128)
!7323 = !DILocation(line: 1877, column: 5, scope: !1128)
!7324 = !DILocation(line: 1877, column: 16, scope: !1128)
!7325 = !DILocation(line: 1878, column: 5, scope: !1128)
!7326 = !DILocation(line: 1878, column: 24, scope: !1128)
!7327 = !DILocation(line: 1878, column: 30, scope: !1128)
!7328 = !DILocation(line: 1878, column: 35, scope: !1128)
!7329 = !DILocation(line: 1878, column: 44, scope: !1128)
!7330 = !DILocation(line: 1879, column: 9, scope: !7331)
!7331 = distinct !DILexicalBlock(scope: !1128, file: !457, line: 1879, column: 9)
!7332 = !DILocation(line: 1879, column: 13, scope: !7331)
!7333 = !DILocation(line: 1879, column: 27, scope: !7331)
!7334 = !DILocation(line: 1879, column: 30, scope: !7335)
!7335 = !DILexicalBlockFile(scope: !7331, file: !457, discriminator: 1)
!7336 = !DILocation(line: 1879, column: 35, scope: !7331)
!7337 = !{!1888, !1830, i64 56}
!7338 = !DILocation(line: 1879, column: 47, scope: !7331)
!7339 = !DILocation(line: 1879, column: 9, scope: !1128)
!7340 = !DILocation(line: 1880, column: 18, scope: !7331)
!7341 = !DILocation(line: 1880, column: 23, scope: !7331)
!7342 = !DILocation(line: 1880, column: 36, scope: !7331)
!7343 = !DILocation(line: 1880, column: 41, scope: !7331)
!7344 = !DILocation(line: 1880, column: 16, scope: !7331)
!7345 = !DILocation(line: 1880, column: 9, scope: !7331)
!7346 = !DILocation(line: 1881, column: 37, scope: !1128)
!7347 = !DILocation(line: 1881, column: 42, scope: !1128)
!7348 = !DILocation(line: 1881, column: 14, scope: !1128)
!7349 = !DILocation(line: 1881, column: 12, scope: !1128)
!7350 = !DILocation(line: 1882, column: 18, scope: !1128)
!7351 = !DILocation(line: 1882, column: 12, scope: !1128)
!7352 = !DILocation(line: 1882, column: 5, scope: !1128)
!7353 = !DILocation(line: 1883, column: 1, scope: !1128)
!7354 = !DILocation(line: 1888, column: 25, scope: !1134)
!7355 = !DILocation(line: 1888, column: 38, scope: !1134)
!7356 = !DILocation(line: 1890, column: 32, scope: !1134)
!7357 = !DILocation(line: 1890, column: 35, scope: !1134)
!7358 = !DILocation(line: 1890, column: 12, scope: !1134)
!7359 = !DILocation(line: 1890, column: 5, scope: !1134)
!7360 = !DILocation(line: 1894, column: 28, scope: !1138)
!7361 = !DILocation(line: 1894, column: 41, scope: !1138)
!7362 = !DILocation(line: 1896, column: 35, scope: !1138)
!7363 = !DILocation(line: 1896, column: 38, scope: !1138)
!7364 = !DILocation(line: 1896, column: 12, scope: !1138)
!7365 = !DILocation(line: 1896, column: 5, scope: !1138)
!7366 = !DILocation(line: 1902, column: 27, scope: !1142)
!7367 = !DILocation(line: 1904, column: 12, scope: !1142)
!7368 = !DILocation(line: 1904, column: 14, scope: !1142)
!7369 = !DILocation(line: 1904, column: 17, scope: !7370)
!7370 = !DILexicalBlockFile(scope: !1142, file: !457, discriminator: 1)
!7371 = !DILocation(line: 1904, column: 20, scope: !1142)
!7372 = !DILocation(line: 1904, column: 29, scope: !1142)
!7373 = !DILocation(line: 1904, column: 17, scope: !1142)
!7374 = !DILocation(line: 1904, column: 43, scope: !1142)
!7375 = !DILocation(line: 1905, column: 9, scope: !1142)
!7376 = !DILocation(line: 1905, column: 12, scope: !1142)
!7377 = !DILocation(line: 1905, column: 21, scope: !1142)
!7378 = !DILocation(line: 1905, column: 36, scope: !1142)
!7379 = !DILocation(line: 1904, column: 43, scope: !7380)
!7380 = !DILexicalBlockFile(scope: !7381, file: !457, discriminator: 3)
!7381 = !DILexicalBlockFile(scope: !1142, file: !457, discriminator: 2)
!7382 = !DILocation(line: 1904, column: 5, scope: !1142)
!7383 = !DILocation(line: 1928, column: 28, scope: !1149)
!7384 = !DILocation(line: 1930, column: 27, scope: !1149)
!7385 = !DILocation(line: 1930, column: 12, scope: !1149)
!7386 = !DILocation(line: 1930, column: 5, scope: !1149)
!7387 = !DILocation(line: 1935, column: 35, scope: !1152)
!7388 = !DILocation(line: 1935, column: 50, scope: !1152)
!7389 = !DILocation(line: 1937, column: 5, scope: !1152)
!7390 = !DILocation(line: 1937, column: 15, scope: !1152)
!7391 = !DILocation(line: 1937, column: 22, scope: !1152)
!7392 = !DILocation(line: 1939, column: 9, scope: !7393)
!7393 = distinct !DILexicalBlock(scope: !1152, file: !457, line: 1939, column: 9)
!7394 = !DILocation(line: 1939, column: 13, scope: !7393)
!7395 = !DILocation(line: 1939, column: 9, scope: !1152)
!7396 = !DILocation(line: 1940, column: 16, scope: !7393)
!7397 = !DILocation(line: 1940, column: 9, scope: !7393)
!7398 = !DILocation(line: 1942, column: 33, scope: !1152)
!7399 = !DILocation(line: 1942, column: 12, scope: !1152)
!7400 = !DILocation(line: 1942, column: 10, scope: !1152)
!7401 = !DILocation(line: 1943, column: 9, scope: !7402)
!7402 = distinct !DILexicalBlock(scope: !1152, file: !457, line: 1943, column: 9)
!7403 = !DILocation(line: 1943, column: 14, scope: !7402)
!7404 = !DILocation(line: 1943, column: 9, scope: !1152)
!7405 = !DILocation(line: 1944, column: 9, scope: !7402)
!7406 = !DILocation(line: 1945, column: 26, scope: !1152)
!7407 = !DILocation(line: 1945, column: 29, scope: !1152)
!7408 = !DILocation(line: 1945, column: 9, scope: !1152)
!7409 = !DILocation(line: 1945, column: 7, scope: !1152)
!7410 = !DILocation(line: 1946, column: 5, scope: !1152)
!7411 = !DILocation(line: 1946, column: 10, scope: !7412)
!7412 = !DILexicalBlockFile(scope: !1159, file: !457, discriminator: 1)
!7413 = !DILocation(line: 1946, column: 20, scope: !1159)
!7414 = !DILocation(line: 1946, column: 50, scope: !1159)
!7415 = !DILocation(line: 1946, column: 65, scope: !7416)
!7416 = distinct !DILexicalBlock(scope: !1159, file: !457, line: 1946, column: 62)
!7417 = !DILocation(line: 1946, column: 82, scope: !7416)
!7418 = !DILocation(line: 1946, column: 62, scope: !7416)
!7419 = !DILocation(line: 1946, column: 92, scope: !7416)
!7420 = !DILocation(line: 1946, column: 62, scope: !1159)
!7421 = !DILocation(line: 1946, column: 62, scope: !7422)
!7422 = !DILexicalBlockFile(scope: !1159, file: !457, discriminator: 2)
!7423 = !DILocation(line: 1946, column: 123, scope: !7424)
!7424 = !DILexicalBlockFile(scope: !7416, file: !457, discriminator: 3)
!7425 = !DILocation(line: 1946, column: 141, scope: !7416)
!7426 = !DILocation(line: 1946, column: 151, scope: !7416)
!7427 = !DILocation(line: 1946, column: 176, scope: !7416)
!7428 = !DILocation(line: 1946, column: 107, scope: !7416)
!7429 = !DILocation(line: 1946, column: 195, scope: !7430)
!7430 = !DILexicalBlockFile(scope: !1152, file: !457, discriminator: 4)
!7431 = !DILocation(line: 1946, column: 195, scope: !1159)
!7432 = !DILocation(line: 1946, column: 195, scope: !7433)
!7433 = !DILexicalBlockFile(scope: !1159, file: !457, discriminator: 5)
!7434 = !DILocation(line: 1947, column: 12, scope: !1152)
!7435 = !DILocation(line: 1947, column: 5, scope: !1152)
!7436 = !DILocation(line: 1948, column: 1, scope: !1152)
!7437 = !DILocation(line: 1951, column: 35, scope: !1160)
!7438 = !DILocation(line: 1951, column: 50, scope: !1160)
!7439 = !DILocation(line: 1951, column: 65, scope: !1160)
!7440 = !DILocation(line: 1953, column: 5, scope: !1160)
!7441 = !DILocation(line: 1953, column: 15, scope: !1160)
!7442 = !DILocation(line: 1954, column: 5, scope: !1160)
!7443 = !DILocation(line: 1954, column: 9, scope: !1160)
!7444 = !DILocation(line: 1956, column: 9, scope: !7445)
!7445 = distinct !DILexicalBlock(scope: !1160, file: !457, line: 1956, column: 9)
!7446 = !DILocation(line: 1956, column: 13, scope: !7445)
!7447 = !DILocation(line: 1956, column: 9, scope: !1160)
!7448 = !DILocation(line: 1957, column: 9, scope: !7449)
!7449 = distinct !DILexicalBlock(scope: !7445, file: !457, line: 1956, column: 28)
!7450 = !DILocation(line: 1958, column: 9, scope: !7449)
!7451 = !DILocation(line: 1961, column: 33, scope: !1160)
!7452 = !DILocation(line: 1961, column: 12, scope: !1160)
!7453 = !DILocation(line: 1961, column: 10, scope: !1160)
!7454 = !DILocation(line: 1962, column: 9, scope: !7455)
!7455 = distinct !DILexicalBlock(scope: !1160, file: !457, line: 1962, column: 9)
!7456 = !DILocation(line: 1962, column: 14, scope: !7455)
!7457 = !DILocation(line: 1962, column: 9, scope: !1160)
!7458 = !DILocation(line: 1963, column: 9, scope: !7455)
!7459 = !DILocation(line: 1964, column: 26, scope: !1160)
!7460 = !DILocation(line: 1964, column: 29, scope: !1160)
!7461 = !DILocation(line: 1964, column: 35, scope: !1160)
!7462 = !DILocation(line: 1964, column: 9, scope: !1160)
!7463 = !DILocation(line: 1964, column: 7, scope: !1160)
!7464 = !DILocation(line: 1965, column: 5, scope: !1160)
!7465 = !DILocation(line: 1965, column: 10, scope: !7466)
!7466 = !DILexicalBlockFile(scope: !1170, file: !457, discriminator: 1)
!7467 = !DILocation(line: 1965, column: 20, scope: !1170)
!7468 = !DILocation(line: 1965, column: 50, scope: !1170)
!7469 = !DILocation(line: 1965, column: 65, scope: !7470)
!7470 = distinct !DILexicalBlock(scope: !1170, file: !457, line: 1965, column: 62)
!7471 = !DILocation(line: 1965, column: 82, scope: !7470)
!7472 = !DILocation(line: 1965, column: 62, scope: !7470)
!7473 = !DILocation(line: 1965, column: 92, scope: !7470)
!7474 = !DILocation(line: 1965, column: 62, scope: !1170)
!7475 = !DILocation(line: 1965, column: 62, scope: !7476)
!7476 = !DILexicalBlockFile(scope: !1170, file: !457, discriminator: 2)
!7477 = !DILocation(line: 1965, column: 123, scope: !7478)
!7478 = !DILexicalBlockFile(scope: !7470, file: !457, discriminator: 3)
!7479 = !DILocation(line: 1965, column: 141, scope: !7470)
!7480 = !DILocation(line: 1965, column: 151, scope: !7470)
!7481 = !DILocation(line: 1965, column: 176, scope: !7470)
!7482 = !DILocation(line: 1965, column: 107, scope: !7470)
!7483 = !DILocation(line: 1965, column: 195, scope: !7484)
!7484 = !DILexicalBlockFile(scope: !1160, file: !457, discriminator: 4)
!7485 = !DILocation(line: 1965, column: 195, scope: !1170)
!7486 = !DILocation(line: 1965, column: 195, scope: !7487)
!7487 = !DILexicalBlockFile(scope: !1170, file: !457, discriminator: 5)
!7488 = !DILocation(line: 1966, column: 12, scope: !1160)
!7489 = !DILocation(line: 1966, column: 5, scope: !1160)
!7490 = !DILocation(line: 1967, column: 1, scope: !1160)
!7491 = !DILocation(line: 1970, column: 34, scope: !1171)
!7492 = !DILocation(line: 1970, column: 49, scope: !1171)
!7493 = !DILocation(line: 1972, column: 5, scope: !1171)
!7494 = !DILocation(line: 1972, column: 15, scope: !1171)
!7495 = !DILocation(line: 1974, column: 33, scope: !1171)
!7496 = !DILocation(line: 1974, column: 36, scope: !1171)
!7497 = !DILocation(line: 1974, column: 9, scope: !1171)
!7498 = !DILocation(line: 1974, column: 7, scope: !1171)
!7499 = !DILocation(line: 1975, column: 9, scope: !1179)
!7500 = !DILocation(line: 1975, column: 9, scope: !1171)
!7501 = !DILocation(line: 1976, column: 9, scope: !1178)
!7502 = !DILocation(line: 1976, column: 14, scope: !7503)
!7503 = !DILexicalBlockFile(scope: !1177, file: !457, discriminator: 1)
!7504 = !DILocation(line: 1976, column: 24, scope: !1177)
!7505 = !DILocation(line: 1976, column: 54, scope: !1177)
!7506 = !DILocation(line: 1976, column: 66, scope: !7507)
!7507 = distinct !DILexicalBlock(scope: !1177, file: !457, line: 1976, column: 63)
!7508 = !DILocation(line: 1976, column: 83, scope: !7507)
!7509 = !DILocation(line: 1976, column: 63, scope: !7507)
!7510 = !DILocation(line: 1976, column: 93, scope: !7507)
!7511 = !DILocation(line: 1976, column: 63, scope: !1177)
!7512 = !DILocation(line: 1976, column: 63, scope: !7513)
!7513 = !DILexicalBlockFile(scope: !1177, file: !457, discriminator: 2)
!7514 = !DILocation(line: 1976, column: 124, scope: !7515)
!7515 = !DILexicalBlockFile(scope: !7507, file: !457, discriminator: 3)
!7516 = !DILocation(line: 1976, column: 142, scope: !7507)
!7517 = !DILocation(line: 1976, column: 152, scope: !7507)
!7518 = !DILocation(line: 1976, column: 177, scope: !7507)
!7519 = !DILocation(line: 1976, column: 108, scope: !7507)
!7520 = !DILocation(line: 1976, column: 196, scope: !7521)
!7521 = !DILexicalBlockFile(scope: !1178, file: !457, discriminator: 4)
!7522 = !DILocation(line: 1976, column: 196, scope: !1177)
!7523 = !DILocation(line: 1976, column: 196, scope: !7524)
!7524 = !DILexicalBlockFile(scope: !1177, file: !457, discriminator: 5)
!7525 = !DILocation(line: 1977, column: 9, scope: !1178)
!7526 = !DILocation(line: 1979, column: 5, scope: !1171)
!7527 = !DILocation(line: 1980, column: 5, scope: !1171)
!7528 = !DILocation(line: 1981, column: 1, scope: !1171)
!7529 = !DILocation(line: 1984, column: 28, scope: !1180)
!7530 = !DILocation(line: 1984, column: 41, scope: !1180)
!7531 = !DILocation(line: 1986, column: 5, scope: !1180)
!7532 = !DILocation(line: 1986, column: 15, scope: !1180)
!7533 = !DILocation(line: 1988, column: 26, scope: !1180)
!7534 = !DILocation(line: 1988, column: 29, scope: !1180)
!7535 = !DILocation(line: 1988, column: 9, scope: !1180)
!7536 = !DILocation(line: 1988, column: 7, scope: !1180)
!7537 = !DILocation(line: 1989, column: 9, scope: !1188)
!7538 = !DILocation(line: 1989, column: 9, scope: !1180)
!7539 = !DILocation(line: 1990, column: 9, scope: !1187)
!7540 = !DILocation(line: 1990, column: 14, scope: !7541)
!7541 = !DILexicalBlockFile(scope: !1186, file: !457, discriminator: 1)
!7542 = !DILocation(line: 1990, column: 24, scope: !1186)
!7543 = !DILocation(line: 1990, column: 54, scope: !1186)
!7544 = !DILocation(line: 1990, column: 66, scope: !7545)
!7545 = distinct !DILexicalBlock(scope: !1186, file: !457, line: 1990, column: 63)
!7546 = !DILocation(line: 1990, column: 83, scope: !7545)
!7547 = !DILocation(line: 1990, column: 63, scope: !7545)
!7548 = !DILocation(line: 1990, column: 93, scope: !7545)
!7549 = !DILocation(line: 1990, column: 63, scope: !1186)
!7550 = !DILocation(line: 1990, column: 63, scope: !7551)
!7551 = !DILexicalBlockFile(scope: !1186, file: !457, discriminator: 2)
!7552 = !DILocation(line: 1990, column: 124, scope: !7553)
!7553 = !DILexicalBlockFile(scope: !7545, file: !457, discriminator: 3)
!7554 = !DILocation(line: 1990, column: 142, scope: !7545)
!7555 = !DILocation(line: 1990, column: 152, scope: !7545)
!7556 = !DILocation(line: 1990, column: 177, scope: !7545)
!7557 = !DILocation(line: 1990, column: 108, scope: !7545)
!7558 = !DILocation(line: 1990, column: 196, scope: !7559)
!7559 = !DILexicalBlockFile(scope: !1187, file: !457, discriminator: 4)
!7560 = !DILocation(line: 1990, column: 196, scope: !1186)
!7561 = !DILocation(line: 1990, column: 196, scope: !7562)
!7562 = !DILexicalBlockFile(scope: !1186, file: !457, discriminator: 5)
!7563 = !DILocation(line: 1991, column: 9, scope: !1187)
!7564 = !DILocation(line: 1993, column: 5, scope: !1180)
!7565 = !DILocation(line: 1994, column: 5, scope: !1180)
!7566 = !DILocation(line: 1995, column: 1, scope: !1180)
!7567 = !DILocation(line: 1998, column: 26, scope: !1189)
!7568 = !DILocation(line: 2000, column: 5, scope: !1189)
!7569 = !DILocation(line: 2000, column: 15, scope: !1189)
!7570 = !DILocation(line: 2001, column: 5, scope: !1189)
!7571 = !DILocation(line: 2001, column: 15, scope: !1189)
!7572 = !DILocation(line: 2004, column: 24, scope: !7573)
!7573 = distinct !DILexicalBlock(scope: !1189, file: !457, line: 2004, column: 9)
!7574 = !DILocation(line: 2004, column: 29, scope: !7573)
!7575 = !DILocation(line: 2004, column: 38, scope: !7573)
!7576 = !DILocation(line: 2004, column: 9, scope: !1189)
!7577 = !DILocation(line: 2005, column: 28, scope: !7573)
!7578 = !DILocation(line: 2005, column: 16, scope: !7573)
!7579 = !DILocation(line: 2005, column: 9, scope: !7573)
!7580 = !DILocation(line: 2006, column: 35, scope: !1189)
!7581 = !DILocation(line: 2006, column: 12, scope: !1189)
!7582 = !DILocation(line: 2006, column: 10, scope: !1189)
!7583 = !DILocation(line: 2007, column: 9, scope: !7584)
!7584 = distinct !DILexicalBlock(scope: !1189, file: !457, line: 2007, column: 9)
!7585 = !DILocation(line: 2007, column: 14, scope: !7584)
!7586 = !DILocation(line: 2007, column: 9, scope: !1189)
!7587 = !DILocation(line: 2008, column: 9, scope: !7584)
!7588 = !DILocation(line: 2009, column: 28, scope: !1189)
!7589 = !DILocation(line: 2009, column: 12, scope: !1189)
!7590 = !DILocation(line: 2009, column: 10, scope: !1189)
!7591 = !DILocation(line: 2010, column: 5, scope: !1189)
!7592 = !DILocation(line: 2010, column: 10, scope: !7593)
!7593 = !DILexicalBlockFile(scope: !1195, file: !457, discriminator: 1)
!7594 = !DILocation(line: 2010, column: 20, scope: !1195)
!7595 = !DILocation(line: 2010, column: 50, scope: !1195)
!7596 = !DILocation(line: 2010, column: 65, scope: !7597)
!7597 = distinct !DILexicalBlock(scope: !1195, file: !457, line: 2010, column: 62)
!7598 = !DILocation(line: 2010, column: 82, scope: !7597)
!7599 = !DILocation(line: 2010, column: 62, scope: !7597)
!7600 = !DILocation(line: 2010, column: 92, scope: !7597)
!7601 = !DILocation(line: 2010, column: 62, scope: !1195)
!7602 = !DILocation(line: 2010, column: 62, scope: !7603)
!7603 = !DILexicalBlockFile(scope: !1195, file: !457, discriminator: 2)
!7604 = !DILocation(line: 2010, column: 123, scope: !7605)
!7605 = !DILexicalBlockFile(scope: !7597, file: !457, discriminator: 3)
!7606 = !DILocation(line: 2010, column: 141, scope: !7597)
!7607 = !DILocation(line: 2010, column: 151, scope: !7597)
!7608 = !DILocation(line: 2010, column: 176, scope: !7597)
!7609 = !DILocation(line: 2010, column: 107, scope: !7597)
!7610 = !DILocation(line: 2010, column: 195, scope: !7611)
!7611 = !DILexicalBlockFile(scope: !1189, file: !457, discriminator: 4)
!7612 = !DILocation(line: 2010, column: 195, scope: !1195)
!7613 = !DILocation(line: 2010, column: 195, scope: !7614)
!7614 = !DILexicalBlockFile(scope: !1195, file: !457, discriminator: 5)
!7615 = !DILocation(line: 2011, column: 12, scope: !1189)
!7616 = !DILocation(line: 2011, column: 5, scope: !1189)
!7617 = !DILocation(line: 2012, column: 1, scope: !1189)
!7618 = !DILocation(line: 2205, column: 34, scope: !1285)
!7619 = !DILocation(line: 2205, column: 53, scope: !1285)
!7620 = !DILocation(line: 2206, column: 36, scope: !1285)
!7621 = !DILocation(line: 2208, column: 5, scope: !1285)
!7622 = !DILocation(line: 2208, column: 13, scope: !1285)
!7623 = !DILocation(line: 2209, column: 5, scope: !1285)
!7624 = !DILocation(line: 2209, column: 15, scope: !1285)
!7625 = !DILocation(line: 2210, column: 5, scope: !1285)
!7626 = !DILocation(line: 2210, column: 15, scope: !1285)
!7627 = !DILocation(line: 2212, column: 9, scope: !7628)
!7628 = distinct !DILexicalBlock(scope: !1285, file: !457, line: 2212, column: 9)
!7629 = !DILocation(line: 2212, column: 11, scope: !7628)
!7630 = !DILocation(line: 2212, column: 25, scope: !7628)
!7631 = !DILocation(line: 2212, column: 28, scope: !7632)
!7632 = !DILexicalBlockFile(scope: !7628, file: !457, discriminator: 1)
!7633 = !DILocation(line: 2212, column: 33, scope: !7628)
!7634 = !DILocation(line: 2212, column: 9, scope: !1285)
!7635 = !DILocation(line: 2213, column: 16, scope: !7628)
!7636 = !DILocation(line: 2213, column: 9, scope: !7628)
!7637 = !DILocation(line: 2215, column: 32, scope: !1285)
!7638 = !DILocation(line: 2215, column: 35, scope: !1285)
!7639 = !DILocation(line: 2215, column: 12, scope: !1285)
!7640 = !DILocation(line: 2215, column: 10, scope: !1285)
!7641 = !DILocation(line: 2216, column: 9, scope: !7642)
!7642 = distinct !DILexicalBlock(scope: !1285, file: !457, line: 2216, column: 9)
!7643 = !DILocation(line: 2216, column: 14, scope: !7642)
!7644 = !DILocation(line: 2216, column: 9, scope: !1285)
!7645 = !DILocation(line: 2217, column: 9, scope: !7646)
!7646 = distinct !DILexicalBlock(scope: !7642, file: !457, line: 2216, column: 29)
!7647 = !DILocation(line: 2220, column: 24, scope: !1285)
!7648 = !DILocation(line: 2220, column: 5, scope: !1285)
!7649 = !DILocation(line: 2221, column: 25, scope: !1285)
!7650 = !DILocation(line: 2221, column: 31, scope: !1285)
!7651 = !DILocation(line: 2221, column: 39, scope: !1285)
!7652 = !DILocation(line: 2221, column: 14, scope: !1285)
!7653 = !DILocation(line: 2221, column: 12, scope: !1285)
!7654 = !DILocation(line: 2222, column: 22, scope: !1285)
!7655 = !DILocation(line: 2222, column: 5, scope: !1285)
!7656 = !DILocation(line: 2223, column: 12, scope: !1285)
!7657 = !DILocation(line: 2223, column: 5, scope: !1285)
!7658 = !DILocation(line: 2224, column: 1, scope: !1285)
!7659 = !DILocation(line: 2015, column: 27, scope: !1196)
!7660 = !DILocation(line: 2017, column: 5, scope: !1196)
!7661 = !DILocation(line: 2017, column: 15, scope: !1196)
!7662 = !DILocation(line: 2018, column: 5, scope: !1196)
!7663 = !DILocation(line: 2018, column: 15, scope: !1196)
!7664 = !DILocation(line: 2021, column: 24, scope: !7665)
!7665 = distinct !DILexicalBlock(scope: !1196, file: !457, line: 2021, column: 9)
!7666 = !DILocation(line: 2021, column: 29, scope: !7665)
!7667 = !DILocation(line: 2021, column: 38, scope: !7665)
!7668 = !DILocation(line: 2021, column: 9, scope: !1196)
!7669 = !DILocation(line: 2022, column: 29, scope: !7665)
!7670 = !DILocation(line: 2022, column: 16, scope: !7665)
!7671 = !DILocation(line: 2022, column: 9, scope: !7665)
!7672 = !DILocation(line: 2023, column: 36, scope: !1196)
!7673 = !DILocation(line: 2023, column: 13, scope: !1196)
!7674 = !DILocation(line: 2023, column: 11, scope: !1196)
!7675 = !DILocation(line: 2024, column: 9, scope: !7676)
!7676 = distinct !DILexicalBlock(scope: !1196, file: !457, line: 2024, column: 9)
!7677 = !DILocation(line: 2024, column: 15, scope: !7676)
!7678 = !DILocation(line: 2024, column: 9, scope: !1196)
!7679 = !DILocation(line: 2025, column: 9, scope: !7676)
!7680 = !DILocation(line: 2026, column: 28, scope: !1196)
!7681 = !DILocation(line: 2026, column: 12, scope: !1196)
!7682 = !DILocation(line: 2026, column: 10, scope: !1196)
!7683 = !DILocation(line: 2027, column: 5, scope: !1196)
!7684 = !DILocation(line: 2027, column: 10, scope: !7685)
!7685 = !DILexicalBlockFile(scope: !1202, file: !457, discriminator: 1)
!7686 = !DILocation(line: 2027, column: 20, scope: !1202)
!7687 = !DILocation(line: 2027, column: 50, scope: !1202)
!7688 = !DILocation(line: 2027, column: 66, scope: !7689)
!7689 = distinct !DILexicalBlock(scope: !1202, file: !457, line: 2027, column: 63)
!7690 = !DILocation(line: 2027, column: 83, scope: !7689)
!7691 = !DILocation(line: 2027, column: 63, scope: !7689)
!7692 = !DILocation(line: 2027, column: 93, scope: !7689)
!7693 = !DILocation(line: 2027, column: 63, scope: !1202)
!7694 = !DILocation(line: 2027, column: 63, scope: !7695)
!7695 = !DILexicalBlockFile(scope: !1202, file: !457, discriminator: 2)
!7696 = !DILocation(line: 2027, column: 124, scope: !7697)
!7697 = !DILexicalBlockFile(scope: !7689, file: !457, discriminator: 3)
!7698 = !DILocation(line: 2027, column: 142, scope: !7689)
!7699 = !DILocation(line: 2027, column: 152, scope: !7689)
!7700 = !DILocation(line: 2027, column: 177, scope: !7689)
!7701 = !DILocation(line: 2027, column: 108, scope: !7689)
!7702 = !DILocation(line: 2027, column: 196, scope: !7703)
!7703 = !DILexicalBlockFile(scope: !1196, file: !457, discriminator: 4)
!7704 = !DILocation(line: 2027, column: 196, scope: !1202)
!7705 = !DILocation(line: 2027, column: 196, scope: !7706)
!7706 = !DILexicalBlockFile(scope: !1202, file: !457, discriminator: 5)
!7707 = !DILocation(line: 2028, column: 12, scope: !1196)
!7708 = !DILocation(line: 2028, column: 5, scope: !1196)
!7709 = !DILocation(line: 2029, column: 1, scope: !1196)
!7710 = !DILocation(line: 2032, column: 28, scope: !1203)
!7711 = !DILocation(line: 2034, column: 5, scope: !1203)
!7712 = !DILocation(line: 2034, column: 15, scope: !1203)
!7713 = !DILocation(line: 2035, column: 5, scope: !1203)
!7714 = !DILocation(line: 2035, column: 15, scope: !1203)
!7715 = !DILocation(line: 2038, column: 24, scope: !7716)
!7716 = distinct !DILexicalBlock(scope: !1203, file: !457, line: 2038, column: 9)
!7717 = !DILocation(line: 2038, column: 29, scope: !7716)
!7718 = !DILocation(line: 2038, column: 38, scope: !7716)
!7719 = !DILocation(line: 2038, column: 9, scope: !1203)
!7720 = !DILocation(line: 2039, column: 30, scope: !7716)
!7721 = !DILocation(line: 2039, column: 16, scope: !7716)
!7722 = !DILocation(line: 2039, column: 9, scope: !7716)
!7723 = !DILocation(line: 2040, column: 37, scope: !1203)
!7724 = !DILocation(line: 2040, column: 14, scope: !1203)
!7725 = !DILocation(line: 2040, column: 12, scope: !1203)
!7726 = !DILocation(line: 2041, column: 9, scope: !7727)
!7727 = distinct !DILexicalBlock(scope: !1203, file: !457, line: 2041, column: 9)
!7728 = !DILocation(line: 2041, column: 16, scope: !7727)
!7729 = !DILocation(line: 2041, column: 9, scope: !1203)
!7730 = !DILocation(line: 2042, column: 9, scope: !7727)
!7731 = !DILocation(line: 2043, column: 28, scope: !1203)
!7732 = !DILocation(line: 2043, column: 12, scope: !1203)
!7733 = !DILocation(line: 2043, column: 10, scope: !1203)
!7734 = !DILocation(line: 2044, column: 5, scope: !1203)
!7735 = !DILocation(line: 2044, column: 10, scope: !7736)
!7736 = !DILexicalBlockFile(scope: !1209, file: !457, discriminator: 1)
!7737 = !DILocation(line: 2044, column: 20, scope: !1209)
!7738 = !DILocation(line: 2044, column: 50, scope: !1209)
!7739 = !DILocation(line: 2044, column: 67, scope: !7740)
!7740 = distinct !DILexicalBlock(scope: !1209, file: !457, line: 2044, column: 64)
!7741 = !DILocation(line: 2044, column: 84, scope: !7740)
!7742 = !DILocation(line: 2044, column: 64, scope: !7740)
!7743 = !DILocation(line: 2044, column: 94, scope: !7740)
!7744 = !DILocation(line: 2044, column: 64, scope: !1209)
!7745 = !DILocation(line: 2044, column: 64, scope: !7746)
!7746 = !DILexicalBlockFile(scope: !1209, file: !457, discriminator: 2)
!7747 = !DILocation(line: 2044, column: 125, scope: !7748)
!7748 = !DILexicalBlockFile(scope: !7740, file: !457, discriminator: 3)
!7749 = !DILocation(line: 2044, column: 143, scope: !7740)
!7750 = !DILocation(line: 2044, column: 153, scope: !7740)
!7751 = !DILocation(line: 2044, column: 178, scope: !7740)
!7752 = !DILocation(line: 2044, column: 109, scope: !7740)
!7753 = !DILocation(line: 2044, column: 197, scope: !7754)
!7754 = !DILexicalBlockFile(scope: !1203, file: !457, discriminator: 4)
!7755 = !DILocation(line: 2044, column: 197, scope: !1209)
!7756 = !DILocation(line: 2044, column: 197, scope: !7757)
!7757 = !DILexicalBlockFile(scope: !1209, file: !457, discriminator: 5)
!7758 = !DILocation(line: 2045, column: 12, scope: !1203)
!7759 = !DILocation(line: 2045, column: 5, scope: !1203)
!7760 = !DILocation(line: 2046, column: 1, scope: !1203)
!7761 = !DILocation(line: 2053, column: 31, scope: !1210)
!7762 = !DILocation(line: 2053, column: 44, scope: !1210)
!7763 = !DILocation(line: 2055, column: 42, scope: !1210)
!7764 = !DILocation(line: 2055, column: 45, scope: !1210)
!7765 = !DILocation(line: 2055, column: 12, scope: !1210)
!7766 = !DILocation(line: 2055, column: 5, scope: !1210)
!7767 = !DILocation(line: 2059, column: 25, scope: !1214)
!7768 = !DILocation(line: 2059, column: 41, scope: !1214)
!7769 = !DILocation(line: 2059, column: 56, scope: !1214)
!7770 = !DILocation(line: 2061, column: 5, scope: !1214)
!7771 = !DILocation(line: 2061, column: 17, scope: !1214)
!7772 = !DILocation(line: 2063, column: 17, scope: !1222)
!7773 = !DILocation(line: 2063, column: 23, scope: !1222)
!7774 = !DILocation(line: 2063, column: 32, scope: !1222)
!7775 = !{!1877, !1830, i64 128}
!7776 = !DILocation(line: 2063, column: 15, scope: !1222)
!7777 = !DILocation(line: 2063, column: 41, scope: !1222)
!7778 = !DILocation(line: 2063, column: 9, scope: !1214)
!7779 = !DILocation(line: 2064, column: 9, scope: !1221)
!7780 = !DILocation(line: 2064, column: 19, scope: !1221)
!7781 = !DILocation(line: 2065, column: 52, scope: !1224)
!7782 = !DILocation(line: 2065, column: 88, scope: !1224)
!7783 = !DILocation(line: 2065, column: 126, scope: !1224)
!7784 = !DILocation(line: 2065, column: 157, scope: !1224)
!7785 = !DILocation(line: 2065, column: 165, scope: !1224)
!7786 = !DILocation(line: 2065, column: 194, scope: !1224)
!7787 = !DILocation(line: 2065, column: 211, scope: !1224)
!7788 = !DILocation(line: 2065, column: 223, scope: !1224)
!7789 = !DILocation(line: 2065, column: 231, scope: !1224)
!7790 = !DILocation(line: 2065, column: 248, scope: !1224)
!7791 = !DILocation(line: 2065, column: 308, scope: !1224)
!7792 = !DILocation(line: 2065, column: 320, scope: !1224)
!7793 = !DILocation(line: 2065, column: 282, scope: !1224)
!7794 = !DILocation(line: 2065, column: 337, scope: !1224)
!7795 = !DILocation(line: 2065, column: 439, scope: !7796)
!7796 = !DILexicalBlockFile(scope: !7797, file: !457, discriminator: 4)
!7797 = !DILexicalBlockFile(scope: !7798, file: !457, discriminator: 3)
!7798 = !DILexicalBlockFile(scope: !7799, file: !457, discriminator: 2)
!7799 = distinct !DILexicalBlock(scope: !1224, file: !457, line: 2065, column: 344)
!7800 = !DILocation(line: 2065, column: 490, scope: !7799)
!7801 = !DILocation(line: 2065, column: 506, scope: !7802)
!7802 = !DILexicalBlockFile(scope: !7799, file: !457, discriminator: 1)
!7803 = !DILocation(line: 2065, column: 525, scope: !7804)
!7804 = !DILexicalBlockFile(scope: !7805, file: !457, discriminator: 6)
!7805 = !DILexicalBlockFile(scope: !1224, file: !457, discriminator: 5)
!7806 = !DILocation(line: 2065, column: 524, scope: !1224)
!7807 = !DILocation(line: 2065, column: 522, scope: !1224)
!7808 = !DILocation(line: 2065, column: 547, scope: !1224)
!7809 = !DILocation(line: 2065, column: 649, scope: !7810)
!7810 = !DILexicalBlockFile(scope: !7811, file: !457, discriminator: 10)
!7811 = !DILexicalBlockFile(scope: !7812, file: !457, discriminator: 9)
!7812 = !DILexicalBlockFile(scope: !7813, file: !457, discriminator: 8)
!7813 = distinct !DILexicalBlock(scope: !1224, file: !457, line: 2065, column: 554)
!7814 = !DILocation(line: 2065, column: 700, scope: !7813)
!7815 = !DILocation(line: 2065, column: 716, scope: !7816)
!7816 = !DILexicalBlockFile(scope: !7813, file: !457, discriminator: 7)
!7817 = !DILocation(line: 2065, column: 727, scope: !7818)
!7818 = !DILexicalBlockFile(scope: !7819, file: !457, discriminator: 12)
!7819 = !DILexicalBlockFile(scope: !1224, file: !457, discriminator: 11)
!7820 = !DILocation(line: 2065, column: 723, scope: !7813)
!7821 = !DILocation(line: 2065, column: 735, scope: !1225)
!7822 = !DILocation(line: 2065, column: 735, scope: !1224)
!7823 = !DILocation(line: 2065, column: 19, scope: !1225)
!7824 = !DILocation(line: 2065, column: 740, scope: !1225)
!7825 = !DILocation(line: 2065, column: 15, scope: !1225)
!7826 = !{!7827, !1879, i64 32}
!7827 = !{!"_ts", !1830, i64 0, !1830, i64 8, !1830, i64 16, !1830, i64 24, !1879, i64 32, !1831, i64 36, !1831, i64 37, !1879, i64 40, !1879, i64 44, !1830, i64 48, !1830, i64 56, !1830, i64 64, !1830, i64 72, !1830, i64 80, !1830, i64 88, !1830, i64 96, !1830, i64 104, !1830, i64 112, !1830, i64 120, !1830, i64 128, !1879, i64 136, !1830, i64 144, !1847, i64 152, !1879, i64 160, !1830, i64 168, !1830, i64 176, !1830, i64 184}
!7828 = !DILocation(line: 2065, column: 759, scope: !1225)
!7829 = !DILocation(line: 2065, column: 757, scope: !1225)
!7830 = !DILocation(line: 2065, column: 784, scope: !1225)
!7831 = !DILocation(line: 2065, column: 787, scope: !7832)
!7832 = !DILexicalBlockFile(scope: !1225, file: !457, discriminator: 13)
!7833 = !DILocation(line: 2065, column: 13, scope: !1221)
!7834 = !DILocation(line: 2066, column: 13, scope: !1225)
!7835 = !DILocation(line: 2067, column: 20, scope: !1221)
!7836 = !DILocation(line: 2067, column: 26, scope: !1221)
!7837 = !DILocation(line: 2067, column: 32, scope: !1221)
!7838 = !DILocation(line: 2067, column: 37, scope: !1221)
!7839 = !DILocation(line: 2067, column: 18, scope: !1221)
!7840 = !DILocation(line: 2067, column: 16, scope: !1221)
!7841 = !DILocation(line: 2068, column: 9, scope: !1221)
!7842 = !DILocation(line: 2068, column: 54, scope: !7843)
!7843 = !DILexicalBlockFile(scope: !1238, file: !457, discriminator: 1)
!7844 = !DILocation(line: 2068, column: 90, scope: !1238)
!7845 = !DILocation(line: 2068, column: 128, scope: !1238)
!7846 = !DILocation(line: 2068, column: 159, scope: !1238)
!7847 = !DILocation(line: 2068, column: 167, scope: !1238)
!7848 = !DILocation(line: 2068, column: 196, scope: !1238)
!7849 = !DILocation(line: 2068, column: 213, scope: !1238)
!7850 = !DILocation(line: 2068, column: 225, scope: !1238)
!7851 = !DILocation(line: 2068, column: 233, scope: !1238)
!7852 = !DILocation(line: 2068, column: 250, scope: !1238)
!7853 = !DILocation(line: 2068, column: 310, scope: !1238)
!7854 = !DILocation(line: 2068, column: 322, scope: !1238)
!7855 = !DILocation(line: 2068, column: 284, scope: !1238)
!7856 = !DILocation(line: 2068, column: 339, scope: !1238)
!7857 = !DILocation(line: 2068, column: 441, scope: !7858)
!7858 = !DILexicalBlockFile(scope: !7859, file: !457, discriminator: 5)
!7859 = !DILexicalBlockFile(scope: !7860, file: !457, discriminator: 4)
!7860 = !DILexicalBlockFile(scope: !7861, file: !457, discriminator: 3)
!7861 = distinct !DILexicalBlock(scope: !1238, file: !457, line: 2068, column: 346)
!7862 = !DILocation(line: 2068, column: 492, scope: !7861)
!7863 = !DILocation(line: 2068, column: 508, scope: !7864)
!7864 = !DILexicalBlockFile(scope: !7861, file: !457, discriminator: 2)
!7865 = !DILocation(line: 2068, column: 527, scope: !7866)
!7866 = !DILexicalBlockFile(scope: !7867, file: !457, discriminator: 7)
!7867 = !DILexicalBlockFile(scope: !1238, file: !457, discriminator: 6)
!7868 = !DILocation(line: 2068, column: 526, scope: !1238)
!7869 = !DILocation(line: 2068, column: 524, scope: !1238)
!7870 = !DILocation(line: 2068, column: 549, scope: !1238)
!7871 = !DILocation(line: 2068, column: 651, scope: !7872)
!7872 = !DILexicalBlockFile(scope: !7873, file: !457, discriminator: 11)
!7873 = !DILexicalBlockFile(scope: !7874, file: !457, discriminator: 10)
!7874 = !DILexicalBlockFile(scope: !7875, file: !457, discriminator: 9)
!7875 = distinct !DILexicalBlock(scope: !1238, file: !457, line: 2068, column: 556)
!7876 = !DILocation(line: 2068, column: 702, scope: !7875)
!7877 = !DILocation(line: 2068, column: 718, scope: !7878)
!7878 = !DILexicalBlockFile(scope: !7875, file: !457, discriminator: 8)
!7879 = !DILocation(line: 2068, column: 729, scope: !7880)
!7880 = !DILexicalBlockFile(scope: !7881, file: !457, discriminator: 13)
!7881 = !DILexicalBlockFile(scope: !1238, file: !457, discriminator: 12)
!7882 = !DILocation(line: 2068, column: 725, scope: !7875)
!7883 = !DILocation(line: 2068, column: 737, scope: !1239)
!7884 = !DILocation(line: 2068, column: 737, scope: !1238)
!7885 = !DILocation(line: 2068, column: 21, scope: !1239)
!7886 = !DILocation(line: 2068, column: 742, scope: !1239)
!7887 = !DILocation(line: 2068, column: 17, scope: !1239)
!7888 = !DILocation(line: 2068, column: 763, scope: !1239)
!7889 = !DILocation(line: 2068, column: 787, scope: !1239)
!7890 = !DILocation(line: 2068, column: 762, scope: !1239)
!7891 = !DILocation(line: 2068, column: 797, scope: !7892)
!7892 = !DILexicalBlockFile(scope: !1239, file: !457, discriminator: 14)
!7893 = !DILocation(line: 2068, column: 821, scope: !1239)
!7894 = !DILocation(line: 2068, column: 835, scope: !7895)
!7895 = !DILexicalBlockFile(scope: !1239, file: !457, discriminator: 15)
!7896 = !DILocation(line: 2068, column: 859, scope: !1239)
!7897 = !DILocation(line: 2068, column: 832, scope: !1239)
!7898 = !DILocation(line: 2068, column: 759, scope: !7899)
!7899 = !DILexicalBlockFile(scope: !7900, file: !457, discriminator: 17)
!7900 = !DILexicalBlockFile(scope: !1239, file: !457, discriminator: 16)
!7901 = !DILocation(line: 2068, column: 16, scope: !1240)
!7902 = !DILocation(line: 2068, column: 903, scope: !7903)
!7903 = !DILexicalBlockFile(scope: !1245, file: !457, discriminator: 18)
!7904 = !DILocation(line: 2068, column: 939, scope: !1245)
!7905 = !DILocation(line: 2068, column: 977, scope: !1245)
!7906 = !DILocation(line: 2068, column: 1008, scope: !1245)
!7907 = !DILocation(line: 2068, column: 1016, scope: !1245)
!7908 = !DILocation(line: 2068, column: 1045, scope: !1245)
!7909 = !DILocation(line: 2068, column: 1062, scope: !1245)
!7910 = !DILocation(line: 2068, column: 1074, scope: !1245)
!7911 = !DILocation(line: 2068, column: 1082, scope: !1245)
!7912 = !DILocation(line: 2068, column: 1099, scope: !1245)
!7913 = !DILocation(line: 2068, column: 1159, scope: !1245)
!7914 = !DILocation(line: 2068, column: 1171, scope: !1245)
!7915 = !DILocation(line: 2068, column: 1133, scope: !1245)
!7916 = !DILocation(line: 2068, column: 1188, scope: !1245)
!7917 = !DILocation(line: 2068, column: 1290, scope: !7918)
!7918 = !DILexicalBlockFile(scope: !7919, file: !457, discriminator: 23)
!7919 = !DILexicalBlockFile(scope: !7920, file: !457, discriminator: 22)
!7920 = !DILexicalBlockFile(scope: !7921, file: !457, discriminator: 21)
!7921 = distinct !DILexicalBlock(scope: !1245, file: !457, line: 2068, column: 1195)
!7922 = !DILocation(line: 2068, column: 1341, scope: !7921)
!7923 = !DILocation(line: 2068, column: 1357, scope: !7924)
!7924 = !DILexicalBlockFile(scope: !7921, file: !457, discriminator: 20)
!7925 = !DILocation(line: 2068, column: 1376, scope: !7926)
!7926 = !DILexicalBlockFile(scope: !7927, file: !457, discriminator: 25)
!7927 = !DILexicalBlockFile(scope: !1245, file: !457, discriminator: 24)
!7928 = !DILocation(line: 2068, column: 1375, scope: !1245)
!7929 = !DILocation(line: 2068, column: 1373, scope: !1245)
!7930 = !DILocation(line: 2068, column: 1398, scope: !1245)
!7931 = !DILocation(line: 2068, column: 1500, scope: !7932)
!7932 = !DILexicalBlockFile(scope: !7933, file: !457, discriminator: 29)
!7933 = !DILexicalBlockFile(scope: !7934, file: !457, discriminator: 28)
!7934 = !DILexicalBlockFile(scope: !7935, file: !457, discriminator: 27)
!7935 = distinct !DILexicalBlock(scope: !1245, file: !457, line: 2068, column: 1405)
!7936 = !DILocation(line: 2068, column: 1551, scope: !7935)
!7937 = !DILocation(line: 2068, column: 1567, scope: !7938)
!7938 = !DILexicalBlockFile(scope: !7935, file: !457, discriminator: 26)
!7939 = !DILocation(line: 2068, column: 1578, scope: !7940)
!7940 = !DILexicalBlockFile(scope: !7941, file: !457, discriminator: 31)
!7941 = !DILexicalBlockFile(scope: !1245, file: !457, discriminator: 30)
!7942 = !DILocation(line: 2068, column: 1574, scope: !7935)
!7943 = !DILocation(line: 2068, column: 1586, scope: !1239)
!7944 = !DILocation(line: 2068, column: 1586, scope: !1245)
!7945 = !DILocation(line: 2068, column: 870, scope: !1239)
!7946 = !DILocation(line: 2068, column: 1591, scope: !1239)
!7947 = !DILocation(line: 2068, column: 1602, scope: !1239)
!7948 = !{!7827, !1831, i64 36}
!7949 = !DILocation(line: 2068, column: 869, scope: !1239)
!7950 = !DILocation(line: 2068, column: 1607, scope: !7951)
!7951 = !DILexicalBlockFile(scope: !7952, file: !457, discriminator: 32)
!7952 = !DILexicalBlockFile(scope: !1240, file: !457, discriminator: 19)
!7953 = !DILocation(line: 2068, column: 1607, scope: !7954)
!7954 = !DILexicalBlockFile(scope: !1240, file: !457, discriminator: 33)
!7955 = !DILocation(line: 2070, column: 13, scope: !7956)
!7956 = distinct !DILexicalBlock(scope: !1221, file: !457, line: 2070, column: 13)
!7957 = !DILocation(line: 2070, column: 20, scope: !7956)
!7958 = !DILocation(line: 2070, column: 34, scope: !7956)
!7959 = !DILocation(line: 2070, column: 38, scope: !7960)
!7960 = !DILexicalBlockFile(scope: !7956, file: !457, discriminator: 1)
!7961 = !DILocation(line: 2070, column: 13, scope: !1221)
!7962 = !DILocation(line: 2072, column: 17, scope: !7963)
!7963 = distinct !DILexicalBlock(scope: !7956, file: !457, line: 2070, column: 56)
!7964 = !DILocation(line: 2071, column: 13, scope: !7963)
!7965 = !DILocation(line: 2074, column: 9, scope: !7963)
!7966 = !DILocation(line: 2079, column: 16, scope: !1221)
!7967 = !DILocation(line: 2079, column: 9, scope: !1221)
!7968 = !DILocation(line: 2080, column: 5, scope: !1222)
!7969 = !DILocation(line: 2081, column: 18, scope: !1214)
!7970 = !DILocation(line: 2082, column: 18, scope: !1214)
!7971 = !DILocation(line: 2082, column: 24, scope: !1214)
!7972 = !DILocation(line: 2082, column: 33, scope: !1214)
!7973 = !DILocation(line: 2081, column: 5, scope: !1214)
!7974 = !DILocation(line: 2083, column: 5, scope: !1214)
!7975 = !DILocation(line: 2084, column: 1, scope: !1214)
!7976 = !DILocation(line: 59, column: 48, scope: !1682)
!7977 = !DILocation(line: 59, column: 74, scope: !1682)
!7978 = !DILocation(line: 61, column: 11, scope: !1682)
!7979 = !DILocation(line: 62, column: 12, scope: !1682)
!7980 = !DILocation(line: 67, column: 9, scope: !7981)
!7981 = distinct !DILexicalBlock(scope: !1682, file: !4, line: 62, column: 19)
!7982 = !DILocation(line: 70, column: 9, scope: !7981)
!7983 = !DILocation(line: 72, column: 12, scope: !1682)
!7984 = !DILocation(line: 77, column: 9, scope: !7985)
!7985 = distinct !DILexicalBlock(scope: !1682, file: !4, line: 72, column: 19)
!7986 = !DILocation(line: 80, column: 9, scope: !7985)
!7987 = !DILocation(line: 82, column: 1, scope: !1682)
!7988 = !DILocation(line: 51, column: 42, scope: !1691)
!7989 = !DILocation(line: 53, column: 9, scope: !7990)
!7990 = distinct !DILexicalBlock(scope: !1691, file: !4, line: 53, column: 9)
!7991 = !DILocation(line: 53, column: 15, scope: !7990)
!7992 = !DILocation(line: 53, column: 9, scope: !1691)
!7993 = !DILocation(line: 54, column: 9, scope: !7990)
!7994 = !{i32 154969}
!7995 = !DILocation(line: 55, column: 1, scope: !1691)
!7996 = !DILocation(line: 44, column: 42, scope: !1696)
!7997 = !DILocation(line: 46, column: 9, scope: !7998)
!7998 = distinct !DILexicalBlock(scope: !1696, file: !4, line: 46, column: 9)
!7999 = !DILocation(line: 46, column: 15, scope: !7998)
!8000 = !DILocation(line: 46, column: 9, scope: !1696)
!8001 = !DILocation(line: 47, column: 9, scope: !7998)
!8002 = !{i32 154809}
!8003 = !DILocation(line: 48, column: 1, scope: !1696)
!8004 = !DILocation(line: 2113, column: 33, scope: !1249)
!8005 = !DILocation(line: 2113, column: 55, scope: !1249)
!8006 = !DILocation(line: 2115, column: 5, scope: !1249)
!8007 = !DILocation(line: 2115, column: 13, scope: !1249)
!8008 = !DILocation(line: 2116, column: 5, scope: !1249)
!8009 = !DILocation(line: 2116, column: 15, scope: !1249)
!8010 = !DILocation(line: 2118, column: 9, scope: !8011)
!8011 = distinct !DILexicalBlock(scope: !1249, file: !457, line: 2118, column: 9)
!8012 = !DILocation(line: 2118, column: 18, scope: !8011)
!8013 = !DILocation(line: 2118, column: 9, scope: !1249)
!8014 = !DILocation(line: 2119, column: 16, scope: !8011)
!8015 = !DILocation(line: 2119, column: 9, scope: !8011)
!8016 = !DILocation(line: 2121, column: 9, scope: !8017)
!8017 = distinct !DILexicalBlock(scope: !1249, file: !457, line: 2121, column: 9)
!8018 = !DILocation(line: 2121, column: 16, scope: !8017)
!8019 = !DILocation(line: 2121, column: 20, scope: !8020)
!8020 = !DILexicalBlockFile(scope: !8017, file: !457, discriminator: 1)
!8021 = !DILocation(line: 2121, column: 19, scope: !8017)
!8022 = !DILocation(line: 2121, column: 9, scope: !1249)
!8023 = !DILocation(line: 2122, column: 28, scope: !8024)
!8024 = distinct !DILexicalBlock(scope: !8017, file: !457, line: 2121, column: 28)
!8025 = !DILocation(line: 2122, column: 9, scope: !8024)
!8026 = !DILocation(line: 2123, column: 32, scope: !8024)
!8027 = !DILocation(line: 2123, column: 40, scope: !8024)
!8028 = !DILocation(line: 2123, column: 16, scope: !8024)
!8029 = !DILocation(line: 2123, column: 14, scope: !8024)
!8030 = !DILocation(line: 2124, column: 26, scope: !8024)
!8031 = !DILocation(line: 2124, column: 9, scope: !8024)
!8032 = !DILocation(line: 2125, column: 5, scope: !8024)
!8033 = !DILocation(line: 2127, column: 16, scope: !8017)
!8034 = !DILocation(line: 2127, column: 14, scope: !8017)
!8035 = !DILocation(line: 2128, column: 9, scope: !8036)
!8036 = distinct !DILexicalBlock(scope: !1249, file: !457, line: 2128, column: 9)
!8037 = !DILocation(line: 2128, column: 14, scope: !8036)
!8038 = !DILocation(line: 2128, column: 9, scope: !1249)
!8039 = !DILocation(line: 2129, column: 9, scope: !8036)
!8040 = !DILocation(line: 2131, column: 31, scope: !1249)
!8041 = !DILocation(line: 2131, column: 41, scope: !1249)
!8042 = !DILocation(line: 2131, column: 12, scope: !1249)
!8043 = !DILocation(line: 2131, column: 5, scope: !1249)
!8044 = !DILocation(line: 2132, column: 1, scope: !1249)
!8045 = !DILocation(line: 2087, column: 30, scope: !1699)
!8046 = !DILocation(line: 2087, column: 50, scope: !1699)
!8047 = !DILocation(line: 2089, column: 5, scope: !1699)
!8048 = !DILocation(line: 2089, column: 15, scope: !1699)
!8049 = !DILocation(line: 2091, column: 9, scope: !8050)
!8050 = distinct !DILexicalBlock(scope: !1699, file: !457, line: 2091, column: 9)
!8051 = !DILocation(line: 2091, column: 14, scope: !8050)
!8052 = !DILocation(line: 2091, column: 9, scope: !1699)
!8053 = !DILocation(line: 2092, column: 9, scope: !8050)
!8054 = !DILocation(line: 2094, column: 27, scope: !1706)
!8055 = !DILocation(line: 2094, column: 35, scope: !1706)
!8056 = !DILocation(line: 2094, column: 46, scope: !1706)
!8057 = !DILocation(line: 2094, column: 55, scope: !1706)
!8058 = !DILocation(line: 2094, column: 72, scope: !1706)
!8059 = !DILocation(line: 2094, column: 9, scope: !1699)
!8060 = !DILocation(line: 2095, column: 9, scope: !1705)
!8061 = !DILocation(line: 2095, column: 19, scope: !1705)
!8062 = !DILocation(line: 2097, column: 13, scope: !1705)
!8063 = !DILocation(line: 2097, column: 11, scope: !1705)
!8064 = !DILocation(line: 2098, column: 13, scope: !1710)
!8065 = !DILocation(line: 2098, column: 15, scope: !1710)
!8066 = !DILocation(line: 2098, column: 13, scope: !1705)
!8067 = !DILocation(line: 2099, column: 13, scope: !1709)
!8068 = !DILocation(line: 2099, column: 18, scope: !8069)
!8069 = !DILexicalBlockFile(scope: !1708, file: !457, discriminator: 1)
!8070 = !DILocation(line: 2099, column: 28, scope: !1708)
!8071 = !DILocation(line: 2099, column: 58, scope: !1708)
!8072 = !DILocation(line: 2099, column: 73, scope: !8073)
!8073 = distinct !DILexicalBlock(scope: !1708, file: !457, line: 2099, column: 70)
!8074 = !DILocation(line: 2099, column: 90, scope: !8073)
!8075 = !DILocation(line: 2099, column: 70, scope: !8073)
!8076 = !DILocation(line: 2099, column: 100, scope: !8073)
!8077 = !DILocation(line: 2099, column: 70, scope: !1708)
!8078 = !DILocation(line: 2099, column: 70, scope: !8079)
!8079 = !DILexicalBlockFile(scope: !1708, file: !457, discriminator: 2)
!8080 = !DILocation(line: 2099, column: 131, scope: !8081)
!8081 = !DILexicalBlockFile(scope: !8073, file: !457, discriminator: 3)
!8082 = !DILocation(line: 2099, column: 149, scope: !8073)
!8083 = !DILocation(line: 2099, column: 159, scope: !8073)
!8084 = !DILocation(line: 2099, column: 184, scope: !8073)
!8085 = !DILocation(line: 2099, column: 115, scope: !8073)
!8086 = !DILocation(line: 2099, column: 203, scope: !8087)
!8087 = !DILexicalBlockFile(scope: !1709, file: !457, discriminator: 4)
!8088 = !DILocation(line: 2099, column: 203, scope: !1708)
!8089 = !DILocation(line: 2099, column: 203, scope: !8090)
!8090 = !DILexicalBlockFile(scope: !1708, file: !457, discriminator: 5)
!8091 = !DILocation(line: 2100, column: 13, scope: !1709)
!8092 = !DILocation(line: 2102, column: 47, scope: !1705)
!8093 = !DILocation(line: 2102, column: 29, scope: !1705)
!8094 = !DILocation(line: 2102, column: 11, scope: !1705)
!8095 = !DILocation(line: 2102, column: 34, scope: !1705)
!8096 = !DILocation(line: 2102, column: 10, scope: !1705)
!8097 = !DILocation(line: 2102, column: 45, scope: !1705)
!8098 = !DILocation(line: 2103, column: 16, scope: !1705)
!8099 = !DILocation(line: 2103, column: 14, scope: !1705)
!8100 = !DILocation(line: 2104, column: 5, scope: !1706)
!8101 = !DILocation(line: 2104, column: 5, scope: !8102)
!8102 = !DILexicalBlockFile(scope: !1706, file: !457, discriminator: 1)
!8103 = !DILocation(line: 2104, column: 5, scope: !1705)
!8104 = !DILocation(line: 2105, column: 28, scope: !1699)
!8105 = !DILocation(line: 2105, column: 38, scope: !1699)
!8106 = !DILocation(line: 2105, column: 14, scope: !1699)
!8107 = !DILocation(line: 2105, column: 12, scope: !1699)
!8108 = !DILocation(line: 2107, column: 5, scope: !1699)
!8109 = !DILocation(line: 2107, column: 10, scope: !8110)
!8110 = !DILexicalBlockFile(scope: !1712, file: !457, discriminator: 1)
!8111 = !DILocation(line: 2107, column: 20, scope: !1712)
!8112 = !DILocation(line: 2107, column: 50, scope: !1712)
!8113 = !DILocation(line: 2107, column: 65, scope: !8114)
!8114 = distinct !DILexicalBlock(scope: !1712, file: !457, line: 2107, column: 62)
!8115 = !DILocation(line: 2107, column: 82, scope: !8114)
!8116 = !DILocation(line: 2107, column: 62, scope: !8114)
!8117 = !DILocation(line: 2107, column: 92, scope: !8114)
!8118 = !DILocation(line: 2107, column: 62, scope: !1712)
!8119 = !DILocation(line: 2107, column: 62, scope: !8120)
!8120 = !DILexicalBlockFile(scope: !1712, file: !457, discriminator: 2)
!8121 = !DILocation(line: 2107, column: 123, scope: !8122)
!8122 = !DILexicalBlockFile(scope: !8114, file: !457, discriminator: 3)
!8123 = !DILocation(line: 2107, column: 141, scope: !8114)
!8124 = !DILocation(line: 2107, column: 151, scope: !8114)
!8125 = !DILocation(line: 2107, column: 176, scope: !8114)
!8126 = !DILocation(line: 2107, column: 107, scope: !8114)
!8127 = !DILocation(line: 2107, column: 195, scope: !8128)
!8128 = !DILexicalBlockFile(scope: !1699, file: !457, discriminator: 4)
!8129 = !DILocation(line: 2107, column: 195, scope: !1712)
!8130 = !DILocation(line: 2107, column: 195, scope: !8131)
!8131 = !DILexicalBlockFile(scope: !1712, file: !457, discriminator: 5)
!8132 = !DILocation(line: 2109, column: 12, scope: !1699)
!8133 = !DILocation(line: 2109, column: 5, scope: !1699)
!8134 = !DILocation(line: 2110, column: 1, scope: !1699)
!8135 = !DILocation(line: 2135, column: 40, scope: !1269)
!8136 = !DILocation(line: 2135, column: 62, scope: !1269)
!8137 = !DILocation(line: 2137, column: 5, scope: !1269)
!8138 = !DILocation(line: 2137, column: 13, scope: !1269)
!8139 = !DILocation(line: 2138, column: 5, scope: !1269)
!8140 = !DILocation(line: 2138, column: 15, scope: !1269)
!8141 = !DILocation(line: 2140, column: 9, scope: !8142)
!8142 = distinct !DILexicalBlock(scope: !1269, file: !457, line: 2140, column: 9)
!8143 = !DILocation(line: 2140, column: 18, scope: !8142)
!8144 = !DILocation(line: 2140, column: 9, scope: !1269)
!8145 = !DILocation(line: 2141, column: 16, scope: !8142)
!8146 = !DILocation(line: 2141, column: 9, scope: !8142)
!8147 = !DILocation(line: 2143, column: 9, scope: !8148)
!8148 = distinct !DILexicalBlock(scope: !1269, file: !457, line: 2143, column: 9)
!8149 = !DILocation(line: 2143, column: 16, scope: !8148)
!8150 = !DILocation(line: 2143, column: 20, scope: !8151)
!8151 = !DILexicalBlockFile(scope: !8148, file: !457, discriminator: 1)
!8152 = !DILocation(line: 2143, column: 19, scope: !8148)
!8153 = !DILocation(line: 2143, column: 9, scope: !1269)
!8154 = !DILocation(line: 2144, column: 28, scope: !8155)
!8155 = distinct !DILexicalBlock(scope: !8148, file: !457, line: 2143, column: 28)
!8156 = !DILocation(line: 2144, column: 9, scope: !8155)
!8157 = !DILocation(line: 2145, column: 39, scope: !8155)
!8158 = !DILocation(line: 2145, column: 47, scope: !8155)
!8159 = !DILocation(line: 2145, column: 16, scope: !8155)
!8160 = !DILocation(line: 2145, column: 14, scope: !8155)
!8161 = !DILocation(line: 2146, column: 26, scope: !8155)
!8162 = !DILocation(line: 2146, column: 9, scope: !8155)
!8163 = !DILocation(line: 2147, column: 5, scope: !8155)
!8164 = !DILocation(line: 2149, column: 16, scope: !8148)
!8165 = !DILocation(line: 2149, column: 14, scope: !8148)
!8166 = !DILocation(line: 2151, column: 31, scope: !1269)
!8167 = !DILocation(line: 2151, column: 41, scope: !1269)
!8168 = !DILocation(line: 2151, column: 12, scope: !1269)
!8169 = !DILocation(line: 2151, column: 5, scope: !1269)
!8170 = !DILocation(line: 2152, column: 1, scope: !1269)
!8171 = !DILocation(line: 2184, column: 31, scope: !1275)
!8172 = !DILocation(line: 2184, column: 46, scope: !1275)
!8173 = !DILocation(line: 2184, column: 64, scope: !1275)
!8174 = !DILocation(line: 2186, column: 5, scope: !1275)
!8175 = !DILocation(line: 2186, column: 13, scope: !1275)
!8176 = !DILocation(line: 2187, column: 5, scope: !1275)
!8177 = !DILocation(line: 2187, column: 15, scope: !1275)
!8178 = !DILocation(line: 2188, column: 5, scope: !1275)
!8179 = !DILocation(line: 2188, column: 15, scope: !1275)
!8180 = !DILocation(line: 2190, column: 9, scope: !8181)
!8181 = distinct !DILexicalBlock(scope: !1275, file: !457, line: 2190, column: 9)
!8182 = !DILocation(line: 2190, column: 11, scope: !8181)
!8183 = !DILocation(line: 2190, column: 25, scope: !8181)
!8184 = !DILocation(line: 2190, column: 28, scope: !8185)
!8185 = !DILexicalBlockFile(scope: !8181, file: !457, discriminator: 1)
!8186 = !DILocation(line: 2190, column: 33, scope: !8181)
!8187 = !DILocation(line: 2190, column: 9, scope: !1275)
!8188 = !DILocation(line: 2191, column: 16, scope: !8181)
!8189 = !DILocation(line: 2191, column: 9, scope: !8181)
!8190 = !DILocation(line: 2193, column: 35, scope: !1275)
!8191 = !DILocation(line: 2193, column: 38, scope: !1275)
!8192 = !DILocation(line: 2193, column: 12, scope: !1275)
!8193 = !DILocation(line: 2193, column: 10, scope: !1275)
!8194 = !DILocation(line: 2194, column: 9, scope: !8195)
!8195 = distinct !DILexicalBlock(scope: !1275, file: !457, line: 2194, column: 9)
!8196 = !DILocation(line: 2194, column: 14, scope: !8195)
!8197 = !DILocation(line: 2194, column: 9, scope: !1275)
!8198 = !DILocation(line: 2195, column: 9, scope: !8199)
!8199 = distinct !DILexicalBlock(scope: !8195, file: !457, line: 2194, column: 29)
!8200 = !DILocation(line: 2198, column: 24, scope: !1275)
!8201 = !DILocation(line: 2198, column: 5, scope: !1275)
!8202 = !DILocation(line: 2199, column: 25, scope: !1275)
!8203 = !DILocation(line: 2199, column: 31, scope: !1275)
!8204 = !DILocation(line: 2199, column: 39, scope: !1275)
!8205 = !DILocation(line: 2199, column: 14, scope: !1275)
!8206 = !DILocation(line: 2199, column: 12, scope: !1275)
!8207 = !DILocation(line: 2200, column: 22, scope: !1275)
!8208 = !DILocation(line: 2200, column: 5, scope: !1275)
!8209 = !DILocation(line: 2201, column: 12, scope: !1275)
!8210 = !DILocation(line: 2201, column: 5, scope: !1275)
!8211 = !DILocation(line: 2202, column: 1, scope: !1275)
!8212 = !DILocation(line: 2155, column: 22, scope: !1713)
!8213 = !DILocation(line: 2155, column: 40, scope: !1713)
!8214 = !DILocation(line: 2155, column: 56, scope: !1713)
!8215 = !DILocation(line: 2155, column: 64, scope: !1713)
!8216 = !DILocation(line: 2157, column: 5, scope: !1713)
!8217 = !DILocation(line: 2157, column: 15, scope: !1713)
!8218 = !DILocation(line: 2158, column: 5, scope: !1713)
!8219 = !DILocation(line: 2158, column: 15, scope: !1713)
!8220 = !DILocation(line: 2160, column: 27, scope: !8221)
!8221 = distinct !DILexicalBlock(scope: !1713, file: !457, line: 2160, column: 9)
!8222 = !DILocation(line: 2160, column: 10, scope: !8221)
!8223 = !DILocation(line: 2160, column: 9, scope: !1713)
!8224 = !DILocation(line: 2161, column: 66, scope: !8225)
!8225 = distinct !DILexicalBlock(scope: !8221, file: !457, line: 2160, column: 34)
!8226 = !DILocation(line: 2161, column: 9, scope: !8225)
!8227 = !DILocation(line: 2162, column: 9, scope: !8225)
!8228 = !DILocation(line: 2165, column: 9, scope: !8229)
!8229 = distinct !DILexicalBlock(scope: !1713, file: !457, line: 2165, column: 9)
!8230 = !DILocation(line: 2165, column: 16, scope: !8229)
!8231 = !DILocation(line: 2165, column: 20, scope: !8232)
!8232 = !DILexicalBlockFile(scope: !8229, file: !457, discriminator: 1)
!8233 = !DILocation(line: 2165, column: 19, scope: !8229)
!8234 = !DILocation(line: 2165, column: 9, scope: !1713)
!8235 = !DILocation(line: 2166, column: 13, scope: !8236)
!8236 = distinct !DILexicalBlock(scope: !8237, file: !457, line: 2166, column: 13)
!8237 = distinct !DILexicalBlock(scope: !8229, file: !457, line: 2165, column: 28)
!8238 = !DILocation(line: 2166, column: 13, scope: !8237)
!8239 = !DILocation(line: 2167, column: 43, scope: !8236)
!8240 = !DILocation(line: 2167, column: 51, scope: !8236)
!8241 = !DILocation(line: 2167, column: 20, scope: !8236)
!8242 = !DILocation(line: 2167, column: 18, scope: !8236)
!8243 = !DILocation(line: 2167, column: 13, scope: !8236)
!8244 = !DILocation(line: 2169, column: 36, scope: !8236)
!8245 = !DILocation(line: 2169, column: 44, scope: !8236)
!8246 = !DILocation(line: 2169, column: 20, scope: !8236)
!8247 = !DILocation(line: 2169, column: 18, scope: !8236)
!8248 = !DILocation(line: 2170, column: 5, scope: !8237)
!8249 = !DILocation(line: 2172, column: 16, scope: !8229)
!8250 = !DILocation(line: 2172, column: 14, scope: !8229)
!8251 = !DILocation(line: 2174, column: 33, scope: !1713)
!8252 = !DILocation(line: 2174, column: 39, scope: !1713)
!8253 = !DILocation(line: 2174, column: 14, scope: !1713)
!8254 = !DILocation(line: 2174, column: 12, scope: !1713)
!8255 = !DILocation(line: 2174, column: 5, scope: !1713)
!8256 = !DILocation(line: 2178, column: 5, scope: !1713)
!8257 = !DILocation(line: 2178, column: 10, scope: !8258)
!8258 = !DILexicalBlockFile(scope: !1725, file: !457, discriminator: 1)
!8259 = !DILocation(line: 2178, column: 20, scope: !1725)
!8260 = !DILocation(line: 2178, column: 51, scope: !1725)
!8261 = !DILocation(line: 2178, column: 62, scope: !1728)
!8262 = !DILocation(line: 2178, column: 78, scope: !1728)
!8263 = !DILocation(line: 2178, column: 62, scope: !1725)
!8264 = !DILocation(line: 2178, column: 93, scope: !8265)
!8265 = !DILexicalBlockFile(scope: !1728, file: !457, discriminator: 2)
!8266 = !DILocation(line: 2178, column: 98, scope: !8267)
!8267 = !DILexicalBlockFile(scope: !1727, file: !457, discriminator: 4)
!8268 = !DILocation(line: 2178, column: 108, scope: !1727)
!8269 = !DILocation(line: 2178, column: 138, scope: !1727)
!8270 = !DILocation(line: 2178, column: 164, scope: !8271)
!8271 = distinct !DILexicalBlock(scope: !1727, file: !457, line: 2178, column: 161)
!8272 = !DILocation(line: 2178, column: 181, scope: !8271)
!8273 = !DILocation(line: 2178, column: 161, scope: !8271)
!8274 = !DILocation(line: 2178, column: 191, scope: !8271)
!8275 = !DILocation(line: 2178, column: 161, scope: !1727)
!8276 = !DILocation(line: 2178, column: 161, scope: !8277)
!8277 = !DILexicalBlockFile(scope: !1727, file: !457, discriminator: 5)
!8278 = !DILocation(line: 2178, column: 222, scope: !8279)
!8279 = !DILexicalBlockFile(scope: !8271, file: !457, discriminator: 6)
!8280 = !DILocation(line: 2178, column: 240, scope: !8271)
!8281 = !DILocation(line: 2178, column: 250, scope: !8271)
!8282 = !DILocation(line: 2178, column: 275, scope: !8271)
!8283 = !DILocation(line: 2178, column: 206, scope: !8271)
!8284 = !DILocation(line: 2178, column: 294, scope: !8285)
!8285 = !DILexicalBlockFile(scope: !1728, file: !457, discriminator: 7)
!8286 = !DILocation(line: 2178, column: 294, scope: !1727)
!8287 = !DILocation(line: 2178, column: 294, scope: !8288)
!8288 = !DILexicalBlockFile(scope: !1727, file: !457, discriminator: 8)
!8289 = !DILocation(line: 2178, column: 294, scope: !8290)
!8290 = !DILexicalBlockFile(scope: !1727, file: !457, discriminator: 9)
!8291 = !DILocation(line: 2178, column: 307, scope: !8292)
!8292 = !DILexicalBlockFile(scope: !8293, file: !457, discriminator: 10)
!8293 = !DILexicalBlockFile(scope: !1713, file: !457, discriminator: 3)
!8294 = !DILocation(line: 2178, column: 307, scope: !1725)
!8295 = !DILocation(line: 2178, column: 307, scope: !8296)
!8296 = !DILexicalBlockFile(scope: !1725, file: !457, discriminator: 11)
!8297 = !DILocation(line: 2180, column: 12, scope: !1713)
!8298 = !DILocation(line: 2181, column: 1, scope: !1713)
!8299 = !DILocation(line: 2180, column: 5, scope: !1713)
!8300 = !DILocation(line: 2227, column: 38, scope: !1303)
!8301 = !DILocation(line: 2227, column: 53, scope: !1303)
!8302 = !DILocation(line: 2228, column: 40, scope: !1303)
!8303 = !DILocation(line: 2230, column: 5, scope: !1303)
!8304 = !DILocation(line: 2230, column: 13, scope: !1303)
!8305 = !DILocation(line: 2231, column: 5, scope: !1303)
!8306 = !DILocation(line: 2231, column: 15, scope: !1303)
!8307 = !DILocation(line: 2232, column: 5, scope: !1303)
!8308 = !DILocation(line: 2232, column: 15, scope: !1303)
!8309 = !DILocation(line: 2234, column: 9, scope: !8310)
!8310 = distinct !DILexicalBlock(scope: !1303, file: !457, line: 2234, column: 9)
!8311 = !DILocation(line: 2234, column: 11, scope: !8310)
!8312 = !DILocation(line: 2234, column: 25, scope: !8310)
!8313 = !DILocation(line: 2234, column: 28, scope: !8314)
!8314 = !DILexicalBlockFile(scope: !8310, file: !457, discriminator: 1)
!8315 = !DILocation(line: 2234, column: 33, scope: !8310)
!8316 = !DILocation(line: 2234, column: 9, scope: !1303)
!8317 = !DILocation(line: 2235, column: 16, scope: !8310)
!8318 = !DILocation(line: 2235, column: 9, scope: !8310)
!8319 = !DILocation(line: 2237, column: 35, scope: !1303)
!8320 = !DILocation(line: 2237, column: 38, scope: !1303)
!8321 = !DILocation(line: 2237, column: 12, scope: !1303)
!8322 = !DILocation(line: 2237, column: 10, scope: !1303)
!8323 = !DILocation(line: 2238, column: 9, scope: !8324)
!8324 = distinct !DILexicalBlock(scope: !1303, file: !457, line: 2238, column: 9)
!8325 = !DILocation(line: 2238, column: 14, scope: !8324)
!8326 = !DILocation(line: 2238, column: 9, scope: !1303)
!8327 = !DILocation(line: 2239, column: 9, scope: !8328)
!8328 = distinct !DILexicalBlock(scope: !8324, file: !457, line: 2238, column: 29)
!8329 = !DILocation(line: 2241, column: 24, scope: !1303)
!8330 = !DILocation(line: 2241, column: 5, scope: !1303)
!8331 = !DILocation(line: 2242, column: 25, scope: !1303)
!8332 = !DILocation(line: 2242, column: 31, scope: !1303)
!8333 = !DILocation(line: 2242, column: 39, scope: !1303)
!8334 = !DILocation(line: 2242, column: 14, scope: !1303)
!8335 = !DILocation(line: 2242, column: 12, scope: !1303)
!8336 = !DILocation(line: 2243, column: 22, scope: !1303)
!8337 = !DILocation(line: 2243, column: 5, scope: !1303)
!8338 = !DILocation(line: 2244, column: 12, scope: !1303)
!8339 = !DILocation(line: 2244, column: 5, scope: !1303)
!8340 = !DILocation(line: 2245, column: 1, scope: !1303)
!8341 = !DILocation(line: 2248, column: 40, scope: !1311)
!8342 = !DILocation(line: 2248, column: 59, scope: !1311)
!8343 = !DILocation(line: 2249, column: 42, scope: !1311)
!8344 = !DILocation(line: 2251, column: 5, scope: !1311)
!8345 = !DILocation(line: 2251, column: 13, scope: !1311)
!8346 = !DILocation(line: 2252, column: 5, scope: !1311)
!8347 = !DILocation(line: 2252, column: 15, scope: !1311)
!8348 = !DILocation(line: 2253, column: 5, scope: !1311)
!8349 = !DILocation(line: 2253, column: 15, scope: !1311)
!8350 = !DILocation(line: 2255, column: 9, scope: !8351)
!8351 = distinct !DILexicalBlock(scope: !1311, file: !457, line: 2255, column: 9)
!8352 = !DILocation(line: 2255, column: 11, scope: !8351)
!8353 = !DILocation(line: 2255, column: 25, scope: !8351)
!8354 = !DILocation(line: 2255, column: 28, scope: !8355)
!8355 = !DILexicalBlockFile(scope: !8351, file: !457, discriminator: 1)
!8356 = !DILocation(line: 2255, column: 33, scope: !8351)
!8357 = !DILocation(line: 2255, column: 9, scope: !1311)
!8358 = !DILocation(line: 2256, column: 16, scope: !8351)
!8359 = !DILocation(line: 2256, column: 9, scope: !8351)
!8360 = !DILocation(line: 2258, column: 32, scope: !1311)
!8361 = !DILocation(line: 2258, column: 35, scope: !1311)
!8362 = !DILocation(line: 2258, column: 12, scope: !1311)
!8363 = !DILocation(line: 2258, column: 10, scope: !1311)
!8364 = !DILocation(line: 2259, column: 9, scope: !8365)
!8365 = distinct !DILexicalBlock(scope: !1311, file: !457, line: 2259, column: 9)
!8366 = !DILocation(line: 2259, column: 14, scope: !8365)
!8367 = !DILocation(line: 2259, column: 9, scope: !1311)
!8368 = !DILocation(line: 2260, column: 9, scope: !8369)
!8369 = distinct !DILexicalBlock(scope: !8365, file: !457, line: 2259, column: 29)
!8370 = !DILocation(line: 2262, column: 24, scope: !1311)
!8371 = !DILocation(line: 2262, column: 5, scope: !1311)
!8372 = !DILocation(line: 2263, column: 25, scope: !1311)
!8373 = !DILocation(line: 2263, column: 31, scope: !1311)
!8374 = !DILocation(line: 2263, column: 39, scope: !1311)
!8375 = !DILocation(line: 2263, column: 14, scope: !1311)
!8376 = !DILocation(line: 2263, column: 12, scope: !1311)
!8377 = !DILocation(line: 2264, column: 22, scope: !1311)
!8378 = !DILocation(line: 2264, column: 5, scope: !1311)
!8379 = !DILocation(line: 2265, column: 12, scope: !1311)
!8380 = !DILocation(line: 2265, column: 5, scope: !1311)
!8381 = !DILocation(line: 2266, column: 1, scope: !1311)
!8382 = !DILocation(line: 2291, column: 38, scope: !1319)
!8383 = !DILocation(line: 2291, column: 58, scope: !1319)
!8384 = !DILocation(line: 2293, column: 5, scope: !1319)
!8385 = !DILocation(line: 2293, column: 15, scope: !1319)
!8386 = !DILocation(line: 2293, column: 22, scope: !1319)
!8387 = !DILocation(line: 2294, column: 5, scope: !1319)
!8388 = !DILocation(line: 2294, column: 13, scope: !1319)
!8389 = !DILocation(line: 2296, column: 9, scope: !8390)
!8390 = distinct !DILexicalBlock(scope: !1319, file: !457, line: 2296, column: 9)
!8391 = !DILocation(line: 2296, column: 18, scope: !8390)
!8392 = !DILocation(line: 2296, column: 32, scope: !8390)
!8393 = !DILocation(line: 2296, column: 35, scope: !8394)
!8394 = !DILexicalBlockFile(scope: !8390, file: !457, discriminator: 1)
!8395 = !DILocation(line: 2296, column: 40, scope: !8390)
!8396 = !DILocation(line: 2296, column: 9, scope: !1319)
!8397 = !DILocation(line: 2297, column: 16, scope: !8390)
!8398 = !DILocation(line: 2297, column: 9, scope: !8390)
!8399 = !DILocation(line: 2299, column: 33, scope: !1319)
!8400 = !DILocation(line: 2299, column: 43, scope: !1319)
!8401 = !DILocation(line: 2299, column: 16, scope: !1319)
!8402 = !DILocation(line: 2299, column: 14, scope: !1319)
!8403 = !DILocation(line: 2300, column: 9, scope: !8404)
!8404 = distinct !DILexicalBlock(scope: !1319, file: !457, line: 2300, column: 9)
!8405 = !DILocation(line: 2300, column: 18, scope: !8404)
!8406 = !DILocation(line: 2300, column: 9, scope: !1319)
!8407 = !DILocation(line: 2301, column: 9, scope: !8404)
!8408 = !DILocation(line: 2304, column: 24, scope: !1319)
!8409 = !DILocation(line: 2304, column: 5, scope: !1319)
!8410 = !DILocation(line: 2305, column: 28, scope: !1319)
!8411 = !DILocation(line: 2305, column: 12, scope: !1319)
!8412 = !DILocation(line: 2305, column: 10, scope: !1319)
!8413 = !DILocation(line: 2306, column: 22, scope: !1319)
!8414 = !DILocation(line: 2306, column: 5, scope: !1319)
!8415 = !DILocation(line: 2307, column: 9, scope: !1331)
!8416 = !DILocation(line: 2307, column: 14, scope: !1331)
!8417 = !DILocation(line: 2307, column: 9, scope: !1319)
!8418 = !DILocation(line: 2308, column: 9, scope: !1330)
!8419 = !DILocation(line: 2308, column: 14, scope: !8420)
!8420 = !DILexicalBlockFile(scope: !1329, file: !457, discriminator: 1)
!8421 = !DILocation(line: 2308, column: 24, scope: !1329)
!8422 = !DILocation(line: 2308, column: 54, scope: !1329)
!8423 = !DILocation(line: 2308, column: 73, scope: !8424)
!8424 = distinct !DILexicalBlock(scope: !1329, file: !457, line: 2308, column: 70)
!8425 = !DILocation(line: 2308, column: 90, scope: !8424)
!8426 = !DILocation(line: 2308, column: 70, scope: !8424)
!8427 = !DILocation(line: 2308, column: 100, scope: !8424)
!8428 = !DILocation(line: 2308, column: 70, scope: !1329)
!8429 = !DILocation(line: 2308, column: 70, scope: !8430)
!8430 = !DILexicalBlockFile(scope: !1329, file: !457, discriminator: 2)
!8431 = !DILocation(line: 2308, column: 131, scope: !8432)
!8432 = !DILexicalBlockFile(scope: !8424, file: !457, discriminator: 3)
!8433 = !DILocation(line: 2308, column: 149, scope: !8424)
!8434 = !DILocation(line: 2308, column: 159, scope: !8424)
!8435 = !DILocation(line: 2308, column: 184, scope: !8424)
!8436 = !DILocation(line: 2308, column: 115, scope: !8424)
!8437 = !DILocation(line: 2308, column: 203, scope: !8438)
!8438 = !DILexicalBlockFile(scope: !1330, file: !457, discriminator: 4)
!8439 = !DILocation(line: 2308, column: 203, scope: !1329)
!8440 = !DILocation(line: 2308, column: 203, scope: !8441)
!8441 = !DILexicalBlockFile(scope: !1329, file: !457, discriminator: 5)
!8442 = !DILocation(line: 2309, column: 9, scope: !1330)
!8443 = !DILocation(line: 2311, column: 25, scope: !1319)
!8444 = !DILocation(line: 2311, column: 35, scope: !1319)
!8445 = !DILocation(line: 2311, column: 11, scope: !1319)
!8446 = !DILocation(line: 2311, column: 9, scope: !1319)
!8447 = !DILocation(line: 2312, column: 5, scope: !1319)
!8448 = !DILocation(line: 2312, column: 10, scope: !8449)
!8449 = !DILexicalBlockFile(scope: !1333, file: !457, discriminator: 1)
!8450 = !DILocation(line: 2312, column: 20, scope: !1333)
!8451 = !DILocation(line: 2312, column: 50, scope: !1333)
!8452 = !DILocation(line: 2312, column: 65, scope: !8453)
!8453 = distinct !DILexicalBlock(scope: !1333, file: !457, line: 2312, column: 62)
!8454 = !DILocation(line: 2312, column: 82, scope: !8453)
!8455 = !DILocation(line: 2312, column: 62, scope: !8453)
!8456 = !DILocation(line: 2312, column: 92, scope: !8453)
!8457 = !DILocation(line: 2312, column: 62, scope: !1333)
!8458 = !DILocation(line: 2312, column: 62, scope: !8459)
!8459 = !DILexicalBlockFile(scope: !1333, file: !457, discriminator: 2)
!8460 = !DILocation(line: 2312, column: 123, scope: !8461)
!8461 = !DILexicalBlockFile(scope: !8453, file: !457, discriminator: 3)
!8462 = !DILocation(line: 2312, column: 141, scope: !8453)
!8463 = !DILocation(line: 2312, column: 151, scope: !8453)
!8464 = !DILocation(line: 2312, column: 176, scope: !8453)
!8465 = !DILocation(line: 2312, column: 107, scope: !8453)
!8466 = !DILocation(line: 2312, column: 195, scope: !8467)
!8467 = !DILexicalBlockFile(scope: !1319, file: !457, discriminator: 4)
!8468 = !DILocation(line: 2312, column: 195, scope: !1333)
!8469 = !DILocation(line: 2312, column: 195, scope: !8470)
!8470 = !DILexicalBlockFile(scope: !1333, file: !457, discriminator: 5)
!8471 = !DILocation(line: 2313, column: 5, scope: !1319)
!8472 = !DILocation(line: 2313, column: 10, scope: !8473)
!8473 = !DILexicalBlockFile(scope: !1335, file: !457, discriminator: 1)
!8474 = !DILocation(line: 2313, column: 20, scope: !1335)
!8475 = !DILocation(line: 2313, column: 50, scope: !1335)
!8476 = !DILocation(line: 2313, column: 69, scope: !8477)
!8477 = distinct !DILexicalBlock(scope: !1335, file: !457, line: 2313, column: 66)
!8478 = !DILocation(line: 2313, column: 86, scope: !8477)
!8479 = !DILocation(line: 2313, column: 66, scope: !8477)
!8480 = !DILocation(line: 2313, column: 96, scope: !8477)
!8481 = !DILocation(line: 2313, column: 66, scope: !1335)
!8482 = !DILocation(line: 2313, column: 66, scope: !8483)
!8483 = !DILexicalBlockFile(scope: !1335, file: !457, discriminator: 2)
!8484 = !DILocation(line: 2313, column: 127, scope: !8485)
!8485 = !DILexicalBlockFile(scope: !8477, file: !457, discriminator: 3)
!8486 = !DILocation(line: 2313, column: 145, scope: !8477)
!8487 = !DILocation(line: 2313, column: 155, scope: !8477)
!8488 = !DILocation(line: 2313, column: 180, scope: !8477)
!8489 = !DILocation(line: 2313, column: 111, scope: !8477)
!8490 = !DILocation(line: 2313, column: 199, scope: !8467)
!8491 = !DILocation(line: 2313, column: 199, scope: !1335)
!8492 = !DILocation(line: 2313, column: 199, scope: !8493)
!8493 = !DILexicalBlockFile(scope: !1335, file: !457, discriminator: 5)
!8494 = !DILocation(line: 2315, column: 12, scope: !1319)
!8495 = !DILocation(line: 2315, column: 5, scope: !1319)
!8496 = !DILocation(line: 2316, column: 1, scope: !1319)
!8497 = !DILocation(line: 2269, column: 25, scope: !1729)
!8498 = !DILocation(line: 2271, column: 5, scope: !1729)
!8499 = !DILocation(line: 2271, column: 9, scope: !1729)
!8500 = !DILocation(line: 2271, column: 12, scope: !1729)
!8501 = !DILocation(line: 2272, column: 5, scope: !1729)
!8502 = !DILocation(line: 2272, column: 13, scope: !1729)
!8503 = !DILocation(line: 2273, column: 5, scope: !1729)
!8504 = !DILocation(line: 2273, column: 15, scope: !1729)
!8505 = !DILocation(line: 2273, column: 24, scope: !1729)
!8506 = !DILocation(line: 2275, column: 9, scope: !1729)
!8507 = !DILocation(line: 2275, column: 28, scope: !1729)
!8508 = !DILocation(line: 2277, column: 5, scope: !1729)
!8509 = !DILocation(line: 2277, column: 42, scope: !8510)
!8510 = !DILexicalBlockFile(scope: !8511, file: !457, discriminator: 6)
!8511 = !DILexicalBlockFile(scope: !1729, file: !457, discriminator: 1)
!8512 = !DILocation(line: 2277, column: 25, scope: !1729)
!8513 = !DILocation(line: 2277, column: 25, scope: !8514)
!8514 = !DILexicalBlockFile(scope: !1729, file: !457, discriminator: 2)
!8515 = !DILocation(line: 2277, column: 25, scope: !8516)
!8516 = !DILexicalBlockFile(scope: !1729, file: !457, discriminator: 3)
!8517 = !DILocation(line: 2277, column: 25, scope: !8518)
!8518 = !DILexicalBlockFile(scope: !8519, file: !457, discriminator: 5)
!8519 = !DILexicalBlockFile(scope: !1729, file: !457, discriminator: 4)
!8520 = !DILocation(line: 2277, column: 64, scope: !1729)
!8521 = !DILocation(line: 2278, column: 9, scope: !1729)
!8522 = !DILocation(line: 2279, column: 26, scope: !1729)
!8523 = !DILocation(line: 2279, column: 14, scope: !1729)
!8524 = !DILocation(line: 2279, column: 12, scope: !1729)
!8525 = !DILocation(line: 2280, column: 9, scope: !8526)
!8526 = distinct !DILexicalBlock(scope: !1729, file: !457, line: 2280, column: 9)
!8527 = !DILocation(line: 2280, column: 16, scope: !8526)
!8528 = !DILocation(line: 2280, column: 30, scope: !8526)
!8529 = !DILocation(line: 2280, column: 33, scope: !8530)
!8530 = !DILexicalBlockFile(scope: !8526, file: !457, discriminator: 1)
!8531 = !DILocation(line: 2280, column: 35, scope: !8526)
!8532 = !DILocation(line: 2280, column: 9, scope: !1729)
!8533 = !DILocation(line: 2281, column: 16, scope: !8534)
!8534 = distinct !DILexicalBlock(scope: !8535, file: !457, line: 2281, column: 9)
!8535 = distinct !DILexicalBlock(scope: !8526, file: !457, line: 2280, column: 40)
!8536 = !DILocation(line: 2281, column: 14, scope: !8534)
!8537 = !DILocation(line: 2281, column: 21, scope: !8538)
!8538 = !DILexicalBlockFile(scope: !8539, file: !457, discriminator: 2)
!8539 = !DILexicalBlockFile(scope: !8540, file: !457, discriminator: 1)
!8540 = distinct !DILexicalBlock(scope: !8534, file: !457, line: 2281, column: 9)
!8541 = !DILocation(line: 2281, column: 25, scope: !8540)
!8542 = !DILocation(line: 2281, column: 23, scope: !8540)
!8543 = !DILocation(line: 2281, column: 9, scope: !8534)
!8544 = !DILocation(line: 2282, column: 48, scope: !8545)
!8545 = distinct !DILexicalBlock(scope: !8540, file: !457, line: 2281, column: 33)
!8546 = !DILocation(line: 2282, column: 31, scope: !8545)
!8547 = !DILocation(line: 2282, column: 31, scope: !8548)
!8548 = !DILexicalBlockFile(scope: !8545, file: !457, discriminator: 1)
!8549 = !DILocation(line: 2282, column: 31, scope: !8550)
!8550 = !DILexicalBlockFile(scope: !8545, file: !457, discriminator: 2)
!8551 = !DILocation(line: 2282, column: 31, scope: !8552)
!8552 = !DILexicalBlockFile(scope: !8553, file: !457, discriminator: 4)
!8553 = !DILexicalBlockFile(scope: !8545, file: !457, discriminator: 3)
!8554 = !DILocation(line: 2282, column: 17, scope: !8545)
!8555 = !DILocation(line: 2283, column: 56, scope: !8545)
!8556 = !DILocation(line: 2283, column: 51, scope: !8545)
!8557 = !DILocation(line: 2283, column: 14, scope: !8545)
!8558 = !DILocation(line: 2283, column: 33, scope: !8545)
!8559 = !DILocation(line: 2283, column: 15, scope: !8545)
!8560 = !DILocation(line: 2283, column: 43, scope: !8545)
!8561 = !DILocation(line: 2283, column: 54, scope: !8545)
!8562 = !DILocation(line: 2284, column: 29, scope: !8545)
!8563 = !DILocation(line: 2284, column: 36, scope: !8545)
!8564 = !DILocation(line: 2284, column: 45, scope: !8545)
!8565 = !DILocation(line: 2285, column: 9, scope: !8545)
!8566 = !DILocation(line: 2281, column: 28, scope: !8540)
!8567 = !DILocation(line: 2281, column: 9, scope: !8540)
!8568 = !DILocation(line: 2286, column: 5, scope: !8535)
!8569 = !DILocation(line: 2287, column: 12, scope: !1729)
!8570 = !DILocation(line: 2288, column: 1, scope: !1729)
!8571 = !DILocation(line: 2287, column: 5, scope: !1729)
!8572 = !DILocation(line: 2319, column: 41, scope: !1336)
!8573 = !DILocation(line: 2320, column: 32, scope: !1336)
!8574 = !DILocation(line: 2322, column: 5, scope: !1336)
!8575 = !DILocation(line: 2322, column: 15, scope: !1336)
!8576 = !DILocation(line: 2322, column: 22, scope: !1336)
!8577 = !DILocation(line: 2323, column: 5, scope: !1336)
!8578 = !DILocation(line: 2323, column: 13, scope: !1336)
!8579 = !DILocation(line: 2325, column: 9, scope: !8580)
!8580 = distinct !DILexicalBlock(scope: !1336, file: !457, line: 2325, column: 9)
!8581 = !DILocation(line: 2325, column: 18, scope: !8580)
!8582 = !DILocation(line: 2325, column: 32, scope: !8580)
!8583 = !DILocation(line: 2325, column: 35, scope: !8584)
!8584 = !DILexicalBlockFile(scope: !8580, file: !457, discriminator: 1)
!8585 = !DILocation(line: 2325, column: 40, scope: !8580)
!8586 = !DILocation(line: 2325, column: 9, scope: !1336)
!8587 = !DILocation(line: 2326, column: 16, scope: !8580)
!8588 = !DILocation(line: 2326, column: 9, scope: !8580)
!8589 = !DILocation(line: 2328, column: 36, scope: !1336)
!8590 = !DILocation(line: 2328, column: 46, scope: !1336)
!8591 = !DILocation(line: 2328, column: 16, scope: !1336)
!8592 = !DILocation(line: 2328, column: 14, scope: !1336)
!8593 = !DILocation(line: 2329, column: 9, scope: !8594)
!8594 = distinct !DILexicalBlock(scope: !1336, file: !457, line: 2329, column: 9)
!8595 = !DILocation(line: 2329, column: 18, scope: !8594)
!8596 = !DILocation(line: 2329, column: 9, scope: !1336)
!8597 = !DILocation(line: 2330, column: 9, scope: !8594)
!8598 = !DILocation(line: 2333, column: 24, scope: !1336)
!8599 = !DILocation(line: 2333, column: 5, scope: !1336)
!8600 = !DILocation(line: 2334, column: 28, scope: !1336)
!8601 = !DILocation(line: 2334, column: 12, scope: !1336)
!8602 = !DILocation(line: 2334, column: 10, scope: !1336)
!8603 = !DILocation(line: 2335, column: 22, scope: !1336)
!8604 = !DILocation(line: 2335, column: 5, scope: !1336)
!8605 = !DILocation(line: 2336, column: 9, scope: !1348)
!8606 = !DILocation(line: 2336, column: 14, scope: !1348)
!8607 = !DILocation(line: 2336, column: 9, scope: !1336)
!8608 = !DILocation(line: 2337, column: 9, scope: !1347)
!8609 = !DILocation(line: 2337, column: 14, scope: !8610)
!8610 = !DILexicalBlockFile(scope: !1346, file: !457, discriminator: 1)
!8611 = !DILocation(line: 2337, column: 24, scope: !1346)
!8612 = !DILocation(line: 2337, column: 54, scope: !1346)
!8613 = !DILocation(line: 2337, column: 73, scope: !8614)
!8614 = distinct !DILexicalBlock(scope: !1346, file: !457, line: 2337, column: 70)
!8615 = !DILocation(line: 2337, column: 90, scope: !8614)
!8616 = !DILocation(line: 2337, column: 70, scope: !8614)
!8617 = !DILocation(line: 2337, column: 100, scope: !8614)
!8618 = !DILocation(line: 2337, column: 70, scope: !1346)
!8619 = !DILocation(line: 2337, column: 70, scope: !8620)
!8620 = !DILexicalBlockFile(scope: !1346, file: !457, discriminator: 2)
!8621 = !DILocation(line: 2337, column: 131, scope: !8622)
!8622 = !DILexicalBlockFile(scope: !8614, file: !457, discriminator: 3)
!8623 = !DILocation(line: 2337, column: 149, scope: !8614)
!8624 = !DILocation(line: 2337, column: 159, scope: !8614)
!8625 = !DILocation(line: 2337, column: 184, scope: !8614)
!8626 = !DILocation(line: 2337, column: 115, scope: !8614)
!8627 = !DILocation(line: 2337, column: 203, scope: !8628)
!8628 = !DILexicalBlockFile(scope: !1347, file: !457, discriminator: 4)
!8629 = !DILocation(line: 2337, column: 203, scope: !1346)
!8630 = !DILocation(line: 2337, column: 203, scope: !8631)
!8631 = !DILexicalBlockFile(scope: !1346, file: !457, discriminator: 5)
!8632 = !DILocation(line: 2338, column: 9, scope: !1347)
!8633 = !DILocation(line: 2340, column: 25, scope: !1336)
!8634 = !DILocation(line: 2340, column: 35, scope: !1336)
!8635 = !DILocation(line: 2340, column: 11, scope: !1336)
!8636 = !DILocation(line: 2340, column: 9, scope: !1336)
!8637 = !DILocation(line: 2341, column: 5, scope: !1336)
!8638 = !DILocation(line: 2341, column: 10, scope: !8639)
!8639 = !DILexicalBlockFile(scope: !1350, file: !457, discriminator: 1)
!8640 = !DILocation(line: 2341, column: 20, scope: !1350)
!8641 = !DILocation(line: 2341, column: 50, scope: !1350)
!8642 = !DILocation(line: 2341, column: 65, scope: !8643)
!8643 = distinct !DILexicalBlock(scope: !1350, file: !457, line: 2341, column: 62)
!8644 = !DILocation(line: 2341, column: 82, scope: !8643)
!8645 = !DILocation(line: 2341, column: 62, scope: !8643)
!8646 = !DILocation(line: 2341, column: 92, scope: !8643)
!8647 = !DILocation(line: 2341, column: 62, scope: !1350)
!8648 = !DILocation(line: 2341, column: 62, scope: !8649)
!8649 = !DILexicalBlockFile(scope: !1350, file: !457, discriminator: 2)
!8650 = !DILocation(line: 2341, column: 123, scope: !8651)
!8651 = !DILexicalBlockFile(scope: !8643, file: !457, discriminator: 3)
!8652 = !DILocation(line: 2341, column: 141, scope: !8643)
!8653 = !DILocation(line: 2341, column: 151, scope: !8643)
!8654 = !DILocation(line: 2341, column: 176, scope: !8643)
!8655 = !DILocation(line: 2341, column: 107, scope: !8643)
!8656 = !DILocation(line: 2341, column: 195, scope: !8657)
!8657 = !DILexicalBlockFile(scope: !1336, file: !457, discriminator: 4)
!8658 = !DILocation(line: 2341, column: 195, scope: !1350)
!8659 = !DILocation(line: 2341, column: 195, scope: !8660)
!8660 = !DILexicalBlockFile(scope: !1350, file: !457, discriminator: 5)
!8661 = !DILocation(line: 2342, column: 5, scope: !1336)
!8662 = !DILocation(line: 2342, column: 10, scope: !8663)
!8663 = !DILexicalBlockFile(scope: !1352, file: !457, discriminator: 1)
!8664 = !DILocation(line: 2342, column: 20, scope: !1352)
!8665 = !DILocation(line: 2342, column: 50, scope: !1352)
!8666 = !DILocation(line: 2342, column: 69, scope: !8667)
!8667 = distinct !DILexicalBlock(scope: !1352, file: !457, line: 2342, column: 66)
!8668 = !DILocation(line: 2342, column: 86, scope: !8667)
!8669 = !DILocation(line: 2342, column: 66, scope: !8667)
!8670 = !DILocation(line: 2342, column: 96, scope: !8667)
!8671 = !DILocation(line: 2342, column: 66, scope: !1352)
!8672 = !DILocation(line: 2342, column: 66, scope: !8673)
!8673 = !DILexicalBlockFile(scope: !1352, file: !457, discriminator: 2)
!8674 = !DILocation(line: 2342, column: 127, scope: !8675)
!8675 = !DILexicalBlockFile(scope: !8667, file: !457, discriminator: 3)
!8676 = !DILocation(line: 2342, column: 145, scope: !8667)
!8677 = !DILocation(line: 2342, column: 155, scope: !8667)
!8678 = !DILocation(line: 2342, column: 180, scope: !8667)
!8679 = !DILocation(line: 2342, column: 111, scope: !8667)
!8680 = !DILocation(line: 2342, column: 199, scope: !8657)
!8681 = !DILocation(line: 2342, column: 199, scope: !1352)
!8682 = !DILocation(line: 2342, column: 199, scope: !8683)
!8683 = !DILexicalBlockFile(scope: !1352, file: !457, discriminator: 5)
!8684 = !DILocation(line: 2344, column: 12, scope: !1336)
!8685 = !DILocation(line: 2344, column: 5, scope: !1336)
!8686 = !DILocation(line: 2345, column: 1, scope: !1336)
!8687 = !DILocation(line: 2516, column: 31, scope: !1363)
!8688 = !DILocation(line: 2516, column: 47, scope: !1363)
!8689 = !DILocation(line: 2519, column: 5, scope: !1363)
!8690 = !DILocation(line: 2519, column: 15, scope: !1363)
!8691 = !DILocation(line: 2522, column: 23, scope: !8692)
!8692 = distinct !DILexicalBlock(scope: !1363, file: !457, line: 2522, column: 9)
!8693 = !DILocation(line: 2522, column: 31, scope: !8692)
!8694 = !DILocation(line: 2522, column: 59, scope: !8692)
!8695 = !DILocation(line: 2522, column: 43, scope: !8692)
!8696 = !DILocation(line: 2522, column: 40, scope: !8692)
!8697 = !DILocation(line: 2522, column: 9, scope: !1363)
!8698 = !DILocation(line: 2523, column: 9, scope: !8692)
!8699 = !DILocation(line: 2525, column: 26, scope: !1370)
!8700 = !DILocation(line: 2525, column: 33, scope: !1370)
!8701 = !DILocation(line: 2525, column: 44, scope: !1370)
!8702 = !DILocation(line: 2525, column: 53, scope: !1370)
!8703 = !DILocation(line: 2525, column: 70, scope: !1370)
!8704 = !DILocation(line: 2525, column: 9, scope: !1363)
!8705 = !DILocation(line: 2526, column: 9, scope: !1369)
!8706 = !DILocation(line: 2526, column: 20, scope: !1369)
!8707 = !DILocation(line: 2527, column: 9, scope: !1369)
!8708 = !DILocation(line: 2527, column: 20, scope: !1369)
!8709 = !DILocation(line: 2528, column: 9, scope: !1369)
!8710 = !DILocation(line: 2528, column: 13, scope: !1369)
!8711 = !DILocation(line: 2530, column: 52, scope: !1374)
!8712 = !DILocation(line: 2530, column: 88, scope: !1374)
!8713 = !DILocation(line: 2530, column: 126, scope: !1374)
!8714 = !DILocation(line: 2530, column: 157, scope: !1374)
!8715 = !DILocation(line: 2530, column: 165, scope: !1374)
!8716 = !DILocation(line: 2530, column: 194, scope: !1374)
!8717 = !DILocation(line: 2530, column: 211, scope: !1374)
!8718 = !DILocation(line: 2530, column: 223, scope: !1374)
!8719 = !DILocation(line: 2530, column: 231, scope: !1374)
!8720 = !DILocation(line: 2530, column: 248, scope: !1374)
!8721 = !DILocation(line: 2530, column: 308, scope: !1374)
!8722 = !DILocation(line: 2530, column: 320, scope: !1374)
!8723 = !DILocation(line: 2530, column: 282, scope: !1374)
!8724 = !DILocation(line: 2530, column: 337, scope: !1374)
!8725 = !DILocation(line: 2530, column: 439, scope: !8726)
!8726 = !DILexicalBlockFile(scope: !8727, file: !457, discriminator: 4)
!8727 = !DILexicalBlockFile(scope: !8728, file: !457, discriminator: 3)
!8728 = !DILexicalBlockFile(scope: !8729, file: !457, discriminator: 2)
!8729 = distinct !DILexicalBlock(scope: !1374, file: !457, line: 2530, column: 344)
!8730 = !DILocation(line: 2530, column: 490, scope: !8729)
!8731 = !DILocation(line: 2530, column: 506, scope: !8732)
!8732 = !DILexicalBlockFile(scope: !8729, file: !457, discriminator: 1)
!8733 = !DILocation(line: 2530, column: 525, scope: !8734)
!8734 = !DILexicalBlockFile(scope: !8735, file: !457, discriminator: 6)
!8735 = !DILexicalBlockFile(scope: !1374, file: !457, discriminator: 5)
!8736 = !DILocation(line: 2530, column: 524, scope: !1374)
!8737 = !DILocation(line: 2530, column: 522, scope: !1374)
!8738 = !DILocation(line: 2530, column: 547, scope: !1374)
!8739 = !DILocation(line: 2530, column: 649, scope: !8740)
!8740 = !DILexicalBlockFile(scope: !8741, file: !457, discriminator: 10)
!8741 = !DILexicalBlockFile(scope: !8742, file: !457, discriminator: 9)
!8742 = !DILexicalBlockFile(scope: !8743, file: !457, discriminator: 8)
!8743 = distinct !DILexicalBlock(scope: !1374, file: !457, line: 2530, column: 554)
!8744 = !DILocation(line: 2530, column: 700, scope: !8743)
!8745 = !DILocation(line: 2530, column: 716, scope: !8746)
!8746 = !DILexicalBlockFile(scope: !8743, file: !457, discriminator: 7)
!8747 = !DILocation(line: 2530, column: 727, scope: !8748)
!8748 = !DILexicalBlockFile(scope: !8749, file: !457, discriminator: 12)
!8749 = !DILexicalBlockFile(scope: !1374, file: !457, discriminator: 11)
!8750 = !DILocation(line: 2530, column: 723, scope: !8743)
!8751 = !DILocation(line: 2530, column: 735, scope: !1375)
!8752 = !DILocation(line: 2530, column: 735, scope: !1374)
!8753 = !DILocation(line: 2530, column: 19, scope: !1375)
!8754 = !DILocation(line: 2530, column: 740, scope: !1375)
!8755 = !DILocation(line: 2530, column: 15, scope: !1375)
!8756 = !DILocation(line: 2530, column: 759, scope: !1375)
!8757 = !DILocation(line: 2530, column: 757, scope: !1375)
!8758 = !DILocation(line: 2530, column: 784, scope: !1375)
!8759 = !DILocation(line: 2530, column: 787, scope: !8760)
!8760 = !DILexicalBlockFile(scope: !1375, file: !457, discriminator: 13)
!8761 = !DILocation(line: 2530, column: 13, scope: !1369)
!8762 = !DILocation(line: 2531, column: 13, scope: !1375)
!8763 = !DILocation(line: 2532, column: 30, scope: !1369)
!8764 = !DILocation(line: 2532, column: 15, scope: !1369)
!8765 = !DILocation(line: 2532, column: 37, scope: !1369)
!8766 = !DILocation(line: 2532, column: 11, scope: !1369)
!8767 = !DILocation(line: 2533, column: 16, scope: !1382)
!8768 = !DILocation(line: 2533, column: 14, scope: !1382)
!8769 = !DILocation(line: 2533, column: 21, scope: !8770)
!8770 = !DILexicalBlockFile(scope: !8771, file: !457, discriminator: 2)
!8771 = !DILexicalBlockFile(scope: !1381, file: !457, discriminator: 1)
!8772 = !DILocation(line: 2533, column: 25, scope: !1381)
!8773 = !DILocation(line: 2533, column: 23, scope: !1381)
!8774 = !DILocation(line: 2533, column: 9, scope: !1382)
!8775 = !DILocation(line: 2534, column: 13, scope: !1380)
!8776 = !DILocation(line: 2534, column: 23, scope: !1380)
!8777 = !DILocation(line: 2534, column: 65, scope: !1380)
!8778 = !DILocation(line: 2534, column: 50, scope: !1380)
!8779 = !DILocation(line: 2534, column: 32, scope: !1380)
!8780 = !DILocation(line: 2534, column: 57, scope: !1380)
!8781 = !DILocation(line: 2534, column: 31, scope: !1380)
!8782 = !DILocation(line: 2535, column: 37, scope: !1380)
!8783 = !DILocation(line: 2535, column: 43, scope: !1380)
!8784 = !DILocation(line: 2535, column: 17, scope: !1380)
!8785 = !DILocation(line: 2535, column: 15, scope: !1380)
!8786 = !DILocation(line: 2536, column: 17, scope: !8787)
!8787 = distinct !DILexicalBlock(scope: !1380, file: !457, line: 2536, column: 17)
!8788 = !DILocation(line: 2536, column: 19, scope: !8787)
!8789 = !DILocation(line: 2536, column: 17, scope: !1380)
!8790 = !DILocation(line: 2538, column: 17, scope: !8787)
!8791 = !DILocation(line: 2539, column: 9, scope: !1381)
!8792 = !DILocation(line: 2539, column: 9, scope: !8771)
!8793 = !DILocation(line: 2539, column: 9, scope: !1380)
!8794 = !DILocation(line: 2533, column: 28, scope: !1381)
!8795 = !DILocation(line: 2533, column: 9, scope: !1381)
!8796 = !DILocation(line: 2540, column: 9, scope: !1369)
!8797 = !DILocation(line: 2540, column: 54, scope: !8798)
!8798 = !DILexicalBlockFile(scope: !1384, file: !457, discriminator: 1)
!8799 = !DILocation(line: 2540, column: 90, scope: !1384)
!8800 = !DILocation(line: 2540, column: 128, scope: !1384)
!8801 = !DILocation(line: 2540, column: 159, scope: !1384)
!8802 = !DILocation(line: 2540, column: 167, scope: !1384)
!8803 = !DILocation(line: 2540, column: 196, scope: !1384)
!8804 = !DILocation(line: 2540, column: 213, scope: !1384)
!8805 = !DILocation(line: 2540, column: 225, scope: !1384)
!8806 = !DILocation(line: 2540, column: 233, scope: !1384)
!8807 = !DILocation(line: 2540, column: 250, scope: !1384)
!8808 = !DILocation(line: 2540, column: 310, scope: !1384)
!8809 = !DILocation(line: 2540, column: 322, scope: !1384)
!8810 = !DILocation(line: 2540, column: 284, scope: !1384)
!8811 = !DILocation(line: 2540, column: 339, scope: !1384)
!8812 = !DILocation(line: 2540, column: 441, scope: !8813)
!8813 = !DILexicalBlockFile(scope: !8814, file: !457, discriminator: 5)
!8814 = !DILexicalBlockFile(scope: !8815, file: !457, discriminator: 4)
!8815 = !DILexicalBlockFile(scope: !8816, file: !457, discriminator: 3)
!8816 = distinct !DILexicalBlock(scope: !1384, file: !457, line: 2540, column: 346)
!8817 = !DILocation(line: 2540, column: 492, scope: !8816)
!8818 = !DILocation(line: 2540, column: 508, scope: !8819)
!8819 = !DILexicalBlockFile(scope: !8816, file: !457, discriminator: 2)
!8820 = !DILocation(line: 2540, column: 527, scope: !8821)
!8821 = !DILexicalBlockFile(scope: !8822, file: !457, discriminator: 7)
!8822 = !DILexicalBlockFile(scope: !1384, file: !457, discriminator: 6)
!8823 = !DILocation(line: 2540, column: 526, scope: !1384)
!8824 = !DILocation(line: 2540, column: 524, scope: !1384)
!8825 = !DILocation(line: 2540, column: 549, scope: !1384)
!8826 = !DILocation(line: 2540, column: 651, scope: !8827)
!8827 = !DILexicalBlockFile(scope: !8828, file: !457, discriminator: 11)
!8828 = !DILexicalBlockFile(scope: !8829, file: !457, discriminator: 10)
!8829 = !DILexicalBlockFile(scope: !8830, file: !457, discriminator: 9)
!8830 = distinct !DILexicalBlock(scope: !1384, file: !457, line: 2540, column: 556)
!8831 = !DILocation(line: 2540, column: 702, scope: !8830)
!8832 = !DILocation(line: 2540, column: 718, scope: !8833)
!8833 = !DILexicalBlockFile(scope: !8830, file: !457, discriminator: 8)
!8834 = !DILocation(line: 2540, column: 729, scope: !8835)
!8835 = !DILexicalBlockFile(scope: !8836, file: !457, discriminator: 13)
!8836 = !DILexicalBlockFile(scope: !1384, file: !457, discriminator: 12)
!8837 = !DILocation(line: 2540, column: 725, scope: !8830)
!8838 = !DILocation(line: 2540, column: 737, scope: !1385)
!8839 = !DILocation(line: 2540, column: 737, scope: !1384)
!8840 = !DILocation(line: 2540, column: 21, scope: !1385)
!8841 = !DILocation(line: 2540, column: 742, scope: !1385)
!8842 = !DILocation(line: 2540, column: 17, scope: !1385)
!8843 = !DILocation(line: 2540, column: 763, scope: !1385)
!8844 = !DILocation(line: 2540, column: 787, scope: !1385)
!8845 = !DILocation(line: 2540, column: 762, scope: !1385)
!8846 = !DILocation(line: 2540, column: 797, scope: !8847)
!8847 = !DILexicalBlockFile(scope: !1385, file: !457, discriminator: 14)
!8848 = !DILocation(line: 2540, column: 821, scope: !1385)
!8849 = !DILocation(line: 2540, column: 835, scope: !8850)
!8850 = !DILexicalBlockFile(scope: !1385, file: !457, discriminator: 15)
!8851 = !DILocation(line: 2540, column: 859, scope: !1385)
!8852 = !DILocation(line: 2540, column: 832, scope: !1385)
!8853 = !DILocation(line: 2540, column: 759, scope: !8854)
!8854 = !DILexicalBlockFile(scope: !8855, file: !457, discriminator: 17)
!8855 = !DILexicalBlockFile(scope: !1385, file: !457, discriminator: 16)
!8856 = !DILocation(line: 2540, column: 16, scope: !1386)
!8857 = !DILocation(line: 2540, column: 903, scope: !8858)
!8858 = !DILexicalBlockFile(scope: !1391, file: !457, discriminator: 18)
!8859 = !DILocation(line: 2540, column: 939, scope: !1391)
!8860 = !DILocation(line: 2540, column: 977, scope: !1391)
!8861 = !DILocation(line: 2540, column: 1008, scope: !1391)
!8862 = !DILocation(line: 2540, column: 1016, scope: !1391)
!8863 = !DILocation(line: 2540, column: 1045, scope: !1391)
!8864 = !DILocation(line: 2540, column: 1062, scope: !1391)
!8865 = !DILocation(line: 2540, column: 1074, scope: !1391)
!8866 = !DILocation(line: 2540, column: 1082, scope: !1391)
!8867 = !DILocation(line: 2540, column: 1099, scope: !1391)
!8868 = !DILocation(line: 2540, column: 1159, scope: !1391)
!8869 = !DILocation(line: 2540, column: 1171, scope: !1391)
!8870 = !DILocation(line: 2540, column: 1133, scope: !1391)
!8871 = !DILocation(line: 2540, column: 1188, scope: !1391)
!8872 = !DILocation(line: 2540, column: 1290, scope: !8873)
!8873 = !DILexicalBlockFile(scope: !8874, file: !457, discriminator: 23)
!8874 = !DILexicalBlockFile(scope: !8875, file: !457, discriminator: 22)
!8875 = !DILexicalBlockFile(scope: !8876, file: !457, discriminator: 21)
!8876 = distinct !DILexicalBlock(scope: !1391, file: !457, line: 2540, column: 1195)
!8877 = !DILocation(line: 2540, column: 1341, scope: !8876)
!8878 = !DILocation(line: 2540, column: 1357, scope: !8879)
!8879 = !DILexicalBlockFile(scope: !8876, file: !457, discriminator: 20)
!8880 = !DILocation(line: 2540, column: 1376, scope: !8881)
!8881 = !DILexicalBlockFile(scope: !8882, file: !457, discriminator: 25)
!8882 = !DILexicalBlockFile(scope: !1391, file: !457, discriminator: 24)
!8883 = !DILocation(line: 2540, column: 1375, scope: !1391)
!8884 = !DILocation(line: 2540, column: 1373, scope: !1391)
!8885 = !DILocation(line: 2540, column: 1398, scope: !1391)
!8886 = !DILocation(line: 2540, column: 1500, scope: !8887)
!8887 = !DILexicalBlockFile(scope: !8888, file: !457, discriminator: 29)
!8888 = !DILexicalBlockFile(scope: !8889, file: !457, discriminator: 28)
!8889 = !DILexicalBlockFile(scope: !8890, file: !457, discriminator: 27)
!8890 = distinct !DILexicalBlock(scope: !1391, file: !457, line: 2540, column: 1405)
!8891 = !DILocation(line: 2540, column: 1551, scope: !8890)
!8892 = !DILocation(line: 2540, column: 1567, scope: !8893)
!8893 = !DILexicalBlockFile(scope: !8890, file: !457, discriminator: 26)
!8894 = !DILocation(line: 2540, column: 1578, scope: !8895)
!8895 = !DILexicalBlockFile(scope: !8896, file: !457, discriminator: 31)
!8896 = !DILexicalBlockFile(scope: !1391, file: !457, discriminator: 30)
!8897 = !DILocation(line: 2540, column: 1574, scope: !8890)
!8898 = !DILocation(line: 2540, column: 1586, scope: !1385)
!8899 = !DILocation(line: 2540, column: 1586, scope: !1391)
!8900 = !DILocation(line: 2540, column: 870, scope: !1385)
!8901 = !DILocation(line: 2540, column: 1591, scope: !1385)
!8902 = !DILocation(line: 2540, column: 1602, scope: !1385)
!8903 = !DILocation(line: 2540, column: 869, scope: !1385)
!8904 = !DILocation(line: 2540, column: 1607, scope: !8905)
!8905 = !DILexicalBlockFile(scope: !8906, file: !457, discriminator: 32)
!8906 = !DILexicalBlockFile(scope: !1386, file: !457, discriminator: 19)
!8907 = !DILocation(line: 2540, column: 1607, scope: !8908)
!8908 = !DILexicalBlockFile(scope: !1386, file: !457, discriminator: 33)
!8909 = !DILocation(line: 2541, column: 16, scope: !1369)
!8910 = !DILocation(line: 2541, column: 9, scope: !1369)
!8911 = !DILocation(line: 2542, column: 5, scope: !1370)
!8912 = !DILocation(line: 2544, column: 39, scope: !1363)
!8913 = !DILocation(line: 2544, column: 15, scope: !1363)
!8914 = !DILocation(line: 2544, column: 13, scope: !1363)
!8915 = !DILocation(line: 2545, column: 9, scope: !1397)
!8916 = !DILocation(line: 2545, column: 17, scope: !1397)
!8917 = !DILocation(line: 2545, column: 9, scope: !1363)
!8918 = !DILocation(line: 2546, column: 9, scope: !1396)
!8919 = !DILocation(line: 2546, column: 19, scope: !1396)
!8920 = !DILocation(line: 2547, column: 9, scope: !1396)
!8921 = !DILocation(line: 2547, column: 13, scope: !1396)
!8922 = !DILocation(line: 2548, column: 52, scope: !1400)
!8923 = !DILocation(line: 2548, column: 88, scope: !1400)
!8924 = !DILocation(line: 2548, column: 126, scope: !1400)
!8925 = !DILocation(line: 2548, column: 157, scope: !1400)
!8926 = !DILocation(line: 2548, column: 165, scope: !1400)
!8927 = !DILocation(line: 2548, column: 194, scope: !1400)
!8928 = !DILocation(line: 2548, column: 211, scope: !1400)
!8929 = !DILocation(line: 2548, column: 223, scope: !1400)
!8930 = !DILocation(line: 2548, column: 231, scope: !1400)
!8931 = !DILocation(line: 2548, column: 248, scope: !1400)
!8932 = !DILocation(line: 2548, column: 308, scope: !1400)
!8933 = !DILocation(line: 2548, column: 320, scope: !1400)
!8934 = !DILocation(line: 2548, column: 282, scope: !1400)
!8935 = !DILocation(line: 2548, column: 337, scope: !1400)
!8936 = !DILocation(line: 2548, column: 439, scope: !8937)
!8937 = !DILexicalBlockFile(scope: !8938, file: !457, discriminator: 4)
!8938 = !DILexicalBlockFile(scope: !8939, file: !457, discriminator: 3)
!8939 = !DILexicalBlockFile(scope: !8940, file: !457, discriminator: 2)
!8940 = distinct !DILexicalBlock(scope: !1400, file: !457, line: 2548, column: 344)
!8941 = !DILocation(line: 2548, column: 490, scope: !8940)
!8942 = !DILocation(line: 2548, column: 506, scope: !8943)
!8943 = !DILexicalBlockFile(scope: !8940, file: !457, discriminator: 1)
!8944 = !DILocation(line: 2548, column: 525, scope: !8945)
!8945 = !DILexicalBlockFile(scope: !8946, file: !457, discriminator: 6)
!8946 = !DILexicalBlockFile(scope: !1400, file: !457, discriminator: 5)
!8947 = !DILocation(line: 2548, column: 524, scope: !1400)
!8948 = !DILocation(line: 2548, column: 522, scope: !1400)
!8949 = !DILocation(line: 2548, column: 547, scope: !1400)
!8950 = !DILocation(line: 2548, column: 649, scope: !8951)
!8951 = !DILexicalBlockFile(scope: !8952, file: !457, discriminator: 10)
!8952 = !DILexicalBlockFile(scope: !8953, file: !457, discriminator: 9)
!8953 = !DILexicalBlockFile(scope: !8954, file: !457, discriminator: 8)
!8954 = distinct !DILexicalBlock(scope: !1400, file: !457, line: 2548, column: 554)
!8955 = !DILocation(line: 2548, column: 700, scope: !8954)
!8956 = !DILocation(line: 2548, column: 716, scope: !8957)
!8957 = !DILexicalBlockFile(scope: !8954, file: !457, discriminator: 7)
!8958 = !DILocation(line: 2548, column: 727, scope: !8959)
!8959 = !DILexicalBlockFile(scope: !8960, file: !457, discriminator: 12)
!8960 = !DILexicalBlockFile(scope: !1400, file: !457, discriminator: 11)
!8961 = !DILocation(line: 2548, column: 723, scope: !8954)
!8962 = !DILocation(line: 2548, column: 735, scope: !1401)
!8963 = !DILocation(line: 2548, column: 735, scope: !1400)
!8964 = !DILocation(line: 2548, column: 19, scope: !1401)
!8965 = !DILocation(line: 2548, column: 740, scope: !1401)
!8966 = !DILocation(line: 2548, column: 15, scope: !1401)
!8967 = !DILocation(line: 2548, column: 759, scope: !1401)
!8968 = !DILocation(line: 2548, column: 757, scope: !1401)
!8969 = !DILocation(line: 2548, column: 784, scope: !1401)
!8970 = !DILocation(line: 2548, column: 787, scope: !8971)
!8971 = !DILexicalBlockFile(scope: !1401, file: !457, discriminator: 13)
!8972 = !DILocation(line: 2548, column: 13, scope: !1396)
!8973 = !DILocation(line: 2549, column: 13, scope: !1407)
!8974 = !DILocation(line: 2549, column: 18, scope: !8975)
!8975 = !DILexicalBlockFile(scope: !1406, file: !457, discriminator: 1)
!8976 = !DILocation(line: 2549, column: 28, scope: !1406)
!8977 = !DILocation(line: 2549, column: 58, scope: !1406)
!8978 = !DILocation(line: 2549, column: 76, scope: !8979)
!8979 = distinct !DILexicalBlock(scope: !1406, file: !457, line: 2549, column: 73)
!8980 = !DILocation(line: 2549, column: 93, scope: !8979)
!8981 = !DILocation(line: 2549, column: 73, scope: !8979)
!8982 = !DILocation(line: 2549, column: 103, scope: !8979)
!8983 = !DILocation(line: 2549, column: 73, scope: !1406)
!8984 = !DILocation(line: 2549, column: 73, scope: !8985)
!8985 = !DILexicalBlockFile(scope: !1406, file: !457, discriminator: 2)
!8986 = !DILocation(line: 2549, column: 134, scope: !8987)
!8987 = !DILexicalBlockFile(scope: !8979, file: !457, discriminator: 3)
!8988 = !DILocation(line: 2549, column: 152, scope: !8979)
!8989 = !DILocation(line: 2549, column: 162, scope: !8979)
!8990 = !DILocation(line: 2549, column: 187, scope: !8979)
!8991 = !DILocation(line: 2549, column: 118, scope: !8979)
!8992 = !DILocation(line: 2549, column: 206, scope: !8993)
!8993 = !DILexicalBlockFile(scope: !1407, file: !457, discriminator: 4)
!8994 = !DILocation(line: 2549, column: 206, scope: !1406)
!8995 = !DILocation(line: 2549, column: 206, scope: !8996)
!8996 = !DILexicalBlockFile(scope: !1406, file: !457, discriminator: 5)
!8997 = !DILocation(line: 2550, column: 20, scope: !1407)
!8998 = !DILocation(line: 2550, column: 13, scope: !1407)
!8999 = !DILocation(line: 2552, column: 44, scope: !1396)
!9000 = !DILocation(line: 2552, column: 53, scope: !1396)
!9001 = !DILocation(line: 2552, column: 15, scope: !1396)
!9002 = !DILocation(line: 2552, column: 13, scope: !1396)
!9003 = !DILocation(line: 2553, column: 9, scope: !1396)
!9004 = !DILocation(line: 2553, column: 54, scope: !9005)
!9005 = !DILexicalBlockFile(scope: !1409, file: !457, discriminator: 1)
!9006 = !DILocation(line: 2553, column: 90, scope: !1409)
!9007 = !DILocation(line: 2553, column: 128, scope: !1409)
!9008 = !DILocation(line: 2553, column: 159, scope: !1409)
!9009 = !DILocation(line: 2553, column: 167, scope: !1409)
!9010 = !DILocation(line: 2553, column: 196, scope: !1409)
!9011 = !DILocation(line: 2553, column: 213, scope: !1409)
!9012 = !DILocation(line: 2553, column: 225, scope: !1409)
!9013 = !DILocation(line: 2553, column: 233, scope: !1409)
!9014 = !DILocation(line: 2553, column: 250, scope: !1409)
!9015 = !DILocation(line: 2553, column: 310, scope: !1409)
!9016 = !DILocation(line: 2553, column: 322, scope: !1409)
!9017 = !DILocation(line: 2553, column: 284, scope: !1409)
!9018 = !DILocation(line: 2553, column: 339, scope: !1409)
!9019 = !DILocation(line: 2553, column: 441, scope: !9020)
!9020 = !DILexicalBlockFile(scope: !9021, file: !457, discriminator: 5)
!9021 = !DILexicalBlockFile(scope: !9022, file: !457, discriminator: 4)
!9022 = !DILexicalBlockFile(scope: !9023, file: !457, discriminator: 3)
!9023 = distinct !DILexicalBlock(scope: !1409, file: !457, line: 2553, column: 346)
!9024 = !DILocation(line: 2553, column: 492, scope: !9023)
!9025 = !DILocation(line: 2553, column: 508, scope: !9026)
!9026 = !DILexicalBlockFile(scope: !9023, file: !457, discriminator: 2)
!9027 = !DILocation(line: 2553, column: 527, scope: !9028)
!9028 = !DILexicalBlockFile(scope: !9029, file: !457, discriminator: 7)
!9029 = !DILexicalBlockFile(scope: !1409, file: !457, discriminator: 6)
!9030 = !DILocation(line: 2553, column: 526, scope: !1409)
!9031 = !DILocation(line: 2553, column: 524, scope: !1409)
!9032 = !DILocation(line: 2553, column: 549, scope: !1409)
!9033 = !DILocation(line: 2553, column: 651, scope: !9034)
!9034 = !DILexicalBlockFile(scope: !9035, file: !457, discriminator: 11)
!9035 = !DILexicalBlockFile(scope: !9036, file: !457, discriminator: 10)
!9036 = !DILexicalBlockFile(scope: !9037, file: !457, discriminator: 9)
!9037 = distinct !DILexicalBlock(scope: !1409, file: !457, line: 2553, column: 556)
!9038 = !DILocation(line: 2553, column: 702, scope: !9037)
!9039 = !DILocation(line: 2553, column: 718, scope: !9040)
!9040 = !DILexicalBlockFile(scope: !9037, file: !457, discriminator: 8)
!9041 = !DILocation(line: 2553, column: 729, scope: !9042)
!9042 = !DILexicalBlockFile(scope: !9043, file: !457, discriminator: 13)
!9043 = !DILexicalBlockFile(scope: !1409, file: !457, discriminator: 12)
!9044 = !DILocation(line: 2553, column: 725, scope: !9037)
!9045 = !DILocation(line: 2553, column: 737, scope: !1410)
!9046 = !DILocation(line: 2553, column: 737, scope: !1409)
!9047 = !DILocation(line: 2553, column: 21, scope: !1410)
!9048 = !DILocation(line: 2553, column: 742, scope: !1410)
!9049 = !DILocation(line: 2553, column: 17, scope: !1410)
!9050 = !DILocation(line: 2553, column: 763, scope: !1410)
!9051 = !DILocation(line: 2553, column: 787, scope: !1410)
!9052 = !DILocation(line: 2553, column: 762, scope: !1410)
!9053 = !DILocation(line: 2553, column: 797, scope: !9054)
!9054 = !DILexicalBlockFile(scope: !1410, file: !457, discriminator: 14)
!9055 = !DILocation(line: 2553, column: 821, scope: !1410)
!9056 = !DILocation(line: 2553, column: 835, scope: !9057)
!9057 = !DILexicalBlockFile(scope: !1410, file: !457, discriminator: 15)
!9058 = !DILocation(line: 2553, column: 859, scope: !1410)
!9059 = !DILocation(line: 2553, column: 832, scope: !1410)
!9060 = !DILocation(line: 2553, column: 759, scope: !9061)
!9061 = !DILexicalBlockFile(scope: !9062, file: !457, discriminator: 17)
!9062 = !DILexicalBlockFile(scope: !1410, file: !457, discriminator: 16)
!9063 = !DILocation(line: 2553, column: 16, scope: !1411)
!9064 = !DILocation(line: 2553, column: 903, scope: !9065)
!9065 = !DILexicalBlockFile(scope: !1416, file: !457, discriminator: 18)
!9066 = !DILocation(line: 2553, column: 939, scope: !1416)
!9067 = !DILocation(line: 2553, column: 977, scope: !1416)
!9068 = !DILocation(line: 2553, column: 1008, scope: !1416)
!9069 = !DILocation(line: 2553, column: 1016, scope: !1416)
!9070 = !DILocation(line: 2553, column: 1045, scope: !1416)
!9071 = !DILocation(line: 2553, column: 1062, scope: !1416)
!9072 = !DILocation(line: 2553, column: 1074, scope: !1416)
!9073 = !DILocation(line: 2553, column: 1082, scope: !1416)
!9074 = !DILocation(line: 2553, column: 1099, scope: !1416)
!9075 = !DILocation(line: 2553, column: 1159, scope: !1416)
!9076 = !DILocation(line: 2553, column: 1171, scope: !1416)
!9077 = !DILocation(line: 2553, column: 1133, scope: !1416)
!9078 = !DILocation(line: 2553, column: 1188, scope: !1416)
!9079 = !DILocation(line: 2553, column: 1290, scope: !9080)
!9080 = !DILexicalBlockFile(scope: !9081, file: !457, discriminator: 23)
!9081 = !DILexicalBlockFile(scope: !9082, file: !457, discriminator: 22)
!9082 = !DILexicalBlockFile(scope: !9083, file: !457, discriminator: 21)
!9083 = distinct !DILexicalBlock(scope: !1416, file: !457, line: 2553, column: 1195)
!9084 = !DILocation(line: 2553, column: 1341, scope: !9083)
!9085 = !DILocation(line: 2553, column: 1357, scope: !9086)
!9086 = !DILexicalBlockFile(scope: !9083, file: !457, discriminator: 20)
!9087 = !DILocation(line: 2553, column: 1376, scope: !9088)
!9088 = !DILexicalBlockFile(scope: !9089, file: !457, discriminator: 25)
!9089 = !DILexicalBlockFile(scope: !1416, file: !457, discriminator: 24)
!9090 = !DILocation(line: 2553, column: 1375, scope: !1416)
!9091 = !DILocation(line: 2553, column: 1373, scope: !1416)
!9092 = !DILocation(line: 2553, column: 1398, scope: !1416)
!9093 = !DILocation(line: 2553, column: 1500, scope: !9094)
!9094 = !DILexicalBlockFile(scope: !9095, file: !457, discriminator: 29)
!9095 = !DILexicalBlockFile(scope: !9096, file: !457, discriminator: 28)
!9096 = !DILexicalBlockFile(scope: !9097, file: !457, discriminator: 27)
!9097 = distinct !DILexicalBlock(scope: !1416, file: !457, line: 2553, column: 1405)
!9098 = !DILocation(line: 2553, column: 1551, scope: !9097)
!9099 = !DILocation(line: 2553, column: 1567, scope: !9100)
!9100 = !DILexicalBlockFile(scope: !9097, file: !457, discriminator: 26)
!9101 = !DILocation(line: 2553, column: 1578, scope: !9102)
!9102 = !DILexicalBlockFile(scope: !9103, file: !457, discriminator: 31)
!9103 = !DILexicalBlockFile(scope: !1416, file: !457, discriminator: 30)
!9104 = !DILocation(line: 2553, column: 1574, scope: !9097)
!9105 = !DILocation(line: 2553, column: 1586, scope: !1410)
!9106 = !DILocation(line: 2553, column: 1586, scope: !1416)
!9107 = !DILocation(line: 2553, column: 870, scope: !1410)
!9108 = !DILocation(line: 2553, column: 1591, scope: !1410)
!9109 = !DILocation(line: 2553, column: 1602, scope: !1410)
!9110 = !DILocation(line: 2553, column: 869, scope: !1410)
!9111 = !DILocation(line: 2553, column: 1607, scope: !9112)
!9112 = !DILexicalBlockFile(scope: !9113, file: !457, discriminator: 32)
!9113 = !DILexicalBlockFile(scope: !1411, file: !457, discriminator: 19)
!9114 = !DILocation(line: 2553, column: 1607, scope: !9115)
!9115 = !DILexicalBlockFile(scope: !1411, file: !457, discriminator: 33)
!9116 = !DILocation(line: 2554, column: 9, scope: !1396)
!9117 = !DILocation(line: 2554, column: 14, scope: !9118)
!9118 = !DILexicalBlockFile(scope: !1421, file: !457, discriminator: 1)
!9119 = !DILocation(line: 2554, column: 24, scope: !1421)
!9120 = !DILocation(line: 2554, column: 54, scope: !1421)
!9121 = !DILocation(line: 2554, column: 72, scope: !9122)
!9122 = distinct !DILexicalBlock(scope: !1421, file: !457, line: 2554, column: 69)
!9123 = !DILocation(line: 2554, column: 89, scope: !9122)
!9124 = !DILocation(line: 2554, column: 69, scope: !9122)
!9125 = !DILocation(line: 2554, column: 99, scope: !9122)
!9126 = !DILocation(line: 2554, column: 69, scope: !1421)
!9127 = !DILocation(line: 2554, column: 69, scope: !9128)
!9128 = !DILexicalBlockFile(scope: !1421, file: !457, discriminator: 2)
!9129 = !DILocation(line: 2554, column: 130, scope: !9130)
!9130 = !DILexicalBlockFile(scope: !9122, file: !457, discriminator: 3)
!9131 = !DILocation(line: 2554, column: 148, scope: !9122)
!9132 = !DILocation(line: 2554, column: 158, scope: !9122)
!9133 = !DILocation(line: 2554, column: 183, scope: !9122)
!9134 = !DILocation(line: 2554, column: 114, scope: !9122)
!9135 = !DILocation(line: 2554, column: 202, scope: !9136)
!9136 = !DILexicalBlockFile(scope: !1396, file: !457, discriminator: 4)
!9137 = !DILocation(line: 2554, column: 202, scope: !1421)
!9138 = !DILocation(line: 2554, column: 202, scope: !9139)
!9139 = !DILexicalBlockFile(scope: !1421, file: !457, discriminator: 5)
!9140 = !DILocation(line: 2555, column: 13, scope: !1425)
!9141 = !DILocation(line: 2555, column: 17, scope: !1425)
!9142 = !DILocation(line: 2555, column: 13, scope: !1396)
!9143 = !DILocation(line: 2556, column: 34, scope: !1424)
!9144 = !DILocation(line: 2556, column: 18, scope: !1424)
!9145 = !DILocation(line: 2556, column: 16, scope: !1424)
!9146 = !DILocation(line: 2557, column: 13, scope: !1424)
!9147 = !DILocation(line: 2557, column: 18, scope: !9148)
!9148 = !DILexicalBlockFile(scope: !1423, file: !457, discriminator: 1)
!9149 = !DILocation(line: 2557, column: 28, scope: !1423)
!9150 = !DILocation(line: 2557, column: 58, scope: !1423)
!9151 = !DILocation(line: 2557, column: 72, scope: !9152)
!9152 = distinct !DILexicalBlock(scope: !1423, file: !457, line: 2557, column: 69)
!9153 = !DILocation(line: 2557, column: 89, scope: !9152)
!9154 = !DILocation(line: 2557, column: 69, scope: !9152)
!9155 = !DILocation(line: 2557, column: 99, scope: !9152)
!9156 = !DILocation(line: 2557, column: 69, scope: !1423)
!9157 = !DILocation(line: 2557, column: 69, scope: !9158)
!9158 = !DILexicalBlockFile(scope: !1423, file: !457, discriminator: 2)
!9159 = !DILocation(line: 2557, column: 130, scope: !9160)
!9160 = !DILexicalBlockFile(scope: !9152, file: !457, discriminator: 3)
!9161 = !DILocation(line: 2557, column: 148, scope: !9152)
!9162 = !DILocation(line: 2557, column: 158, scope: !9152)
!9163 = !DILocation(line: 2557, column: 183, scope: !9152)
!9164 = !DILocation(line: 2557, column: 114, scope: !9152)
!9165 = !DILocation(line: 2557, column: 202, scope: !9166)
!9166 = !DILexicalBlockFile(scope: !1424, file: !457, discriminator: 4)
!9167 = !DILocation(line: 2557, column: 202, scope: !1423)
!9168 = !DILocation(line: 2557, column: 202, scope: !9169)
!9169 = !DILexicalBlockFile(scope: !1423, file: !457, discriminator: 5)
!9170 = !DILocation(line: 2558, column: 9, scope: !1424)
!9171 = !DILocation(line: 2559, column: 16, scope: !1396)
!9172 = !DILocation(line: 2559, column: 9, scope: !1396)
!9173 = !DILocation(line: 2560, column: 5, scope: !1397)
!9174 = !DILocation(line: 2561, column: 14, scope: !9175)
!9175 = distinct !DILexicalBlock(scope: !1397, file: !457, line: 2561, column: 14)
!9176 = !DILocation(line: 2561, column: 14, scope: !1397)
!9177 = !DILocation(line: 2562, column: 9, scope: !9175)
!9178 = !DILocation(line: 2563, column: 33, scope: !1363)
!9179 = !DILocation(line: 2563, column: 39, scope: !1363)
!9180 = !DILocation(line: 2563, column: 12, scope: !1363)
!9181 = !DILocation(line: 2563, column: 5, scope: !1363)
!9182 = !DILocation(line: 2564, column: 1, scope: !1363)
!9183 = !DILocation(line: 2469, column: 32, scope: !1739)
!9184 = !DILocation(line: 2469, column: 48, scope: !1739)
!9185 = !DILocation(line: 2471, column: 5, scope: !1739)
!9186 = !DILocation(line: 2471, column: 15, scope: !1739)
!9187 = !DILocation(line: 2472, column: 5, scope: !1739)
!9188 = !DILocation(line: 2472, column: 9, scope: !1739)
!9189 = !DILocation(line: 2475, column: 26, scope: !1749)
!9190 = !DILocation(line: 2475, column: 33, scope: !1749)
!9191 = !DILocation(line: 2475, column: 44, scope: !1749)
!9192 = !DILocation(line: 2475, column: 53, scope: !1749)
!9193 = !DILocation(line: 2475, column: 70, scope: !1749)
!9194 = !DILocation(line: 2475, column: 9, scope: !1739)
!9195 = !DILocation(line: 2476, column: 33, scope: !1748)
!9196 = !DILocation(line: 2476, column: 41, scope: !1748)
!9197 = !DILocation(line: 2476, column: 70, scope: !1748)
!9198 = !DILocation(line: 2476, column: 54, scope: !1748)
!9199 = !DILocation(line: 2476, column: 50, scope: !1748)
!9200 = !DILocation(line: 2476, column: 75, scope: !1748)
!9201 = !DILocation(line: 2476, column: 109, scope: !9202)
!9202 = !DILexicalBlockFile(scope: !1748, file: !457, discriminator: 2)
!9203 = !DILocation(line: 2476, column: 117, scope: !1748)
!9204 = !DILocation(line: 2476, column: 144, scope: !1748)
!9205 = !DILocation(line: 2476, column: 128, scope: !1748)
!9206 = !DILocation(line: 2476, column: 78, scope: !1748)
!9207 = !DILocation(line: 2476, column: 75, scope: !9208)
!9208 = !DILexicalBlockFile(scope: !9209, file: !457, discriminator: 3)
!9209 = !DILexicalBlockFile(scope: !1748, file: !457, discriminator: 1)
!9210 = !DILocation(line: 2476, column: 16, scope: !1748)
!9211 = !DILocation(line: 2477, column: 13, scope: !1747)
!9212 = !DILocation(line: 2477, column: 20, scope: !1747)
!9213 = !DILocation(line: 2477, column: 13, scope: !1748)
!9214 = !DILocation(line: 2478, column: 13, scope: !1746)
!9215 = !DILocation(line: 2478, column: 23, scope: !1746)
!9216 = !DILocation(line: 2478, column: 47, scope: !1746)
!9217 = !DILocation(line: 2478, column: 27, scope: !1746)
!9218 = !DILocation(line: 2479, column: 17, scope: !1753)
!9219 = !DILocation(line: 2479, column: 19, scope: !1753)
!9220 = !DILocation(line: 2479, column: 17, scope: !1746)
!9221 = !DILocation(line: 2480, column: 44, scope: !9222)
!9222 = distinct !DILexicalBlock(scope: !9223, file: !457, line: 2480, column: 21)
!9223 = distinct !DILexicalBlock(scope: !1753, file: !457, line: 2479, column: 34)
!9224 = !DILocation(line: 2480, column: 21, scope: !9222)
!9225 = !DILocation(line: 2480, column: 21, scope: !9223)
!9226 = !DILocation(line: 2481, column: 21, scope: !9222)
!9227 = !DILocation(line: 2483, column: 28, scope: !9222)
!9228 = !DILocation(line: 2484, column: 13, scope: !9223)
!9229 = !DILocation(line: 2486, column: 21, scope: !9230)
!9230 = distinct !DILexicalBlock(scope: !1752, file: !457, line: 2486, column: 21)
!9231 = !DILocation(line: 2486, column: 39, scope: !9230)
!9232 = !DILocation(line: 2486, column: 45, scope: !9230)
!9233 = !DILocation(line: 2486, column: 26, scope: !9230)
!9234 = !DILocation(line: 2486, column: 23, scope: !9230)
!9235 = !DILocation(line: 2486, column: 54, scope: !9230)
!9236 = !DILocation(line: 2487, column: 38, scope: !9230)
!9237 = !DILocation(line: 2487, column: 43, scope: !9230)
!9238 = !DILocation(line: 2487, column: 54, scope: !9230)
!9239 = !DILocation(line: 2487, column: 63, scope: !9230)
!9240 = !DILocation(line: 2487, column: 80, scope: !9230)
!9241 = !DILocation(line: 2486, column: 21, scope: !1752)
!9242 = !DILocation(line: 2489, column: 41, scope: !9230)
!9243 = !DILocation(line: 2489, column: 25, scope: !9230)
!9244 = !DILocation(line: 2490, column: 41, scope: !9230)
!9245 = !DILocation(line: 2490, column: 25, scope: !9230)
!9246 = !DILocation(line: 2488, column: 30, scope: !9230)
!9247 = !DILocation(line: 2488, column: 28, scope: !9230)
!9248 = !DILocation(line: 2488, column: 21, scope: !9230)
!9249 = !DILocation(line: 2491, column: 17, scope: !1752)
!9250 = !DILocation(line: 2491, column: 22, scope: !9251)
!9251 = !DILexicalBlockFile(scope: !1751, file: !457, discriminator: 1)
!9252 = !DILocation(line: 2491, column: 32, scope: !1751)
!9253 = !DILocation(line: 2491, column: 62, scope: !1751)
!9254 = !DILocation(line: 2491, column: 74, scope: !9255)
!9255 = distinct !DILexicalBlock(scope: !1751, file: !457, line: 2491, column: 71)
!9256 = !DILocation(line: 2491, column: 91, scope: !9255)
!9257 = !DILocation(line: 2491, column: 71, scope: !9255)
!9258 = !DILocation(line: 2491, column: 101, scope: !9255)
!9259 = !DILocation(line: 2491, column: 71, scope: !1751)
!9260 = !DILocation(line: 2491, column: 71, scope: !9261)
!9261 = !DILexicalBlockFile(scope: !1751, file: !457, discriminator: 2)
!9262 = !DILocation(line: 2491, column: 132, scope: !9263)
!9263 = !DILexicalBlockFile(scope: !9255, file: !457, discriminator: 3)
!9264 = !DILocation(line: 2491, column: 150, scope: !9255)
!9265 = !DILocation(line: 2491, column: 160, scope: !9255)
!9266 = !DILocation(line: 2491, column: 185, scope: !9255)
!9267 = !DILocation(line: 2491, column: 116, scope: !9255)
!9268 = !DILocation(line: 2491, column: 204, scope: !9269)
!9269 = !DILexicalBlockFile(scope: !1752, file: !457, discriminator: 4)
!9270 = !DILocation(line: 2491, column: 204, scope: !1751)
!9271 = !DILocation(line: 2491, column: 204, scope: !9272)
!9272 = !DILexicalBlockFile(scope: !1751, file: !457, discriminator: 5)
!9273 = !DILocation(line: 2493, column: 9, scope: !1747)
!9274 = !DILocation(line: 2493, column: 9, scope: !1746)
!9275 = !DILocation(line: 2494, column: 5, scope: !1748)
!9276 = !DILocation(line: 2496, column: 26, scope: !9277)
!9277 = distinct !DILexicalBlock(scope: !1758, file: !457, line: 2496, column: 13)
!9278 = !DILocation(line: 2496, column: 14, scope: !9277)
!9279 = !DILocation(line: 2496, column: 13, scope: !1758)
!9280 = !DILocation(line: 2498, column: 13, scope: !9277)
!9281 = !DILocation(line: 2499, column: 36, scope: !1758)
!9282 = !DILocation(line: 2499, column: 16, scope: !1758)
!9283 = !DILocation(line: 2499, column: 14, scope: !1758)
!9284 = !DILocation(line: 2500, column: 13, scope: !1757)
!9285 = !DILocation(line: 2500, column: 18, scope: !1757)
!9286 = !DILocation(line: 2500, column: 13, scope: !1758)
!9287 = !DILocation(line: 2501, column: 40, scope: !9288)
!9288 = distinct !DILexicalBlock(scope: !9289, file: !457, line: 2501, column: 17)
!9289 = distinct !DILexicalBlock(scope: !1757, file: !457, line: 2500, column: 33)
!9290 = !DILocation(line: 2501, column: 17, scope: !9288)
!9291 = !DILocation(line: 2501, column: 17, scope: !9289)
!9292 = !DILocation(line: 2502, column: 17, scope: !9288)
!9293 = !DILocation(line: 2504, column: 24, scope: !9288)
!9294 = !DILocation(line: 2505, column: 9, scope: !9289)
!9295 = !DILocation(line: 2507, column: 42, scope: !1756)
!9296 = !DILocation(line: 2507, column: 48, scope: !1756)
!9297 = !DILocation(line: 2507, column: 22, scope: !1756)
!9298 = !DILocation(line: 2507, column: 20, scope: !1756)
!9299 = !DILocation(line: 2508, column: 13, scope: !1756)
!9300 = !DILocation(line: 2508, column: 18, scope: !9301)
!9301 = !DILexicalBlockFile(scope: !1755, file: !457, discriminator: 1)
!9302 = !DILocation(line: 2508, column: 28, scope: !1755)
!9303 = !DILocation(line: 2508, column: 58, scope: !1755)
!9304 = !DILocation(line: 2508, column: 73, scope: !9305)
!9305 = distinct !DILexicalBlock(scope: !1755, file: !457, line: 2508, column: 70)
!9306 = !DILocation(line: 2508, column: 90, scope: !9305)
!9307 = !DILocation(line: 2508, column: 70, scope: !9305)
!9308 = !DILocation(line: 2508, column: 100, scope: !9305)
!9309 = !DILocation(line: 2508, column: 70, scope: !1755)
!9310 = !DILocation(line: 2508, column: 70, scope: !9311)
!9311 = !DILexicalBlockFile(scope: !1755, file: !457, discriminator: 2)
!9312 = !DILocation(line: 2508, column: 131, scope: !9313)
!9313 = !DILexicalBlockFile(scope: !9305, file: !457, discriminator: 3)
!9314 = !DILocation(line: 2508, column: 149, scope: !9305)
!9315 = !DILocation(line: 2508, column: 159, scope: !9305)
!9316 = !DILocation(line: 2508, column: 184, scope: !9305)
!9317 = !DILocation(line: 2508, column: 115, scope: !9305)
!9318 = !DILocation(line: 2508, column: 203, scope: !9319)
!9319 = !DILexicalBlockFile(scope: !1756, file: !457, discriminator: 4)
!9320 = !DILocation(line: 2508, column: 203, scope: !1755)
!9321 = !DILocation(line: 2508, column: 203, scope: !9322)
!9322 = !DILexicalBlockFile(scope: !1755, file: !457, discriminator: 5)
!9323 = !DILocation(line: 2512, column: 12, scope: !1739)
!9324 = !DILocation(line: 2512, column: 5, scope: !1739)
!9325 = !DILocation(line: 2513, column: 1, scope: !1739)
!9326 = !DILocation(line: 2585, column: 31, scope: !1426)
!9327 = !DILocation(line: 2585, column: 50, scope: !1426)
!9328 = !DILocation(line: 2588, column: 5, scope: !1426)
!9329 = !DILocation(line: 2588, column: 15, scope: !1426)
!9330 = !DILocation(line: 2590, column: 26, scope: !1433)
!9331 = !DILocation(line: 2590, column: 33, scope: !1433)
!9332 = !DILocation(line: 2590, column: 44, scope: !1433)
!9333 = !DILocation(line: 2590, column: 53, scope: !1433)
!9334 = !DILocation(line: 2590, column: 70, scope: !1433)
!9335 = !DILocation(line: 2590, column: 9, scope: !1426)
!9336 = !DILocation(line: 2591, column: 9, scope: !1432)
!9337 = !DILocation(line: 2591, column: 20, scope: !1432)
!9338 = !DILocation(line: 2592, column: 9, scope: !1432)
!9339 = !DILocation(line: 2592, column: 20, scope: !1432)
!9340 = !DILocation(line: 2593, column: 9, scope: !1432)
!9341 = !DILocation(line: 2593, column: 13, scope: !1432)
!9342 = !DILocation(line: 2595, column: 52, scope: !1437)
!9343 = !DILocation(line: 2595, column: 88, scope: !1437)
!9344 = !DILocation(line: 2595, column: 126, scope: !1437)
!9345 = !DILocation(line: 2595, column: 157, scope: !1437)
!9346 = !DILocation(line: 2595, column: 165, scope: !1437)
!9347 = !DILocation(line: 2595, column: 194, scope: !1437)
!9348 = !DILocation(line: 2595, column: 211, scope: !1437)
!9349 = !DILocation(line: 2595, column: 223, scope: !1437)
!9350 = !DILocation(line: 2595, column: 231, scope: !1437)
!9351 = !DILocation(line: 2595, column: 248, scope: !1437)
!9352 = !DILocation(line: 2595, column: 308, scope: !1437)
!9353 = !DILocation(line: 2595, column: 320, scope: !1437)
!9354 = !DILocation(line: 2595, column: 282, scope: !1437)
!9355 = !DILocation(line: 2595, column: 337, scope: !1437)
!9356 = !DILocation(line: 2595, column: 439, scope: !9357)
!9357 = !DILexicalBlockFile(scope: !9358, file: !457, discriminator: 4)
!9358 = !DILexicalBlockFile(scope: !9359, file: !457, discriminator: 3)
!9359 = !DILexicalBlockFile(scope: !9360, file: !457, discriminator: 2)
!9360 = distinct !DILexicalBlock(scope: !1437, file: !457, line: 2595, column: 344)
!9361 = !DILocation(line: 2595, column: 490, scope: !9360)
!9362 = !DILocation(line: 2595, column: 506, scope: !9363)
!9363 = !DILexicalBlockFile(scope: !9360, file: !457, discriminator: 1)
!9364 = !DILocation(line: 2595, column: 525, scope: !9365)
!9365 = !DILexicalBlockFile(scope: !9366, file: !457, discriminator: 6)
!9366 = !DILexicalBlockFile(scope: !1437, file: !457, discriminator: 5)
!9367 = !DILocation(line: 2595, column: 524, scope: !1437)
!9368 = !DILocation(line: 2595, column: 522, scope: !1437)
!9369 = !DILocation(line: 2595, column: 547, scope: !1437)
!9370 = !DILocation(line: 2595, column: 649, scope: !9371)
!9371 = !DILexicalBlockFile(scope: !9372, file: !457, discriminator: 10)
!9372 = !DILexicalBlockFile(scope: !9373, file: !457, discriminator: 9)
!9373 = !DILexicalBlockFile(scope: !9374, file: !457, discriminator: 8)
!9374 = distinct !DILexicalBlock(scope: !1437, file: !457, line: 2595, column: 554)
!9375 = !DILocation(line: 2595, column: 700, scope: !9374)
!9376 = !DILocation(line: 2595, column: 716, scope: !9377)
!9377 = !DILexicalBlockFile(scope: !9374, file: !457, discriminator: 7)
!9378 = !DILocation(line: 2595, column: 727, scope: !9379)
!9379 = !DILexicalBlockFile(scope: !9380, file: !457, discriminator: 12)
!9380 = !DILexicalBlockFile(scope: !1437, file: !457, discriminator: 11)
!9381 = !DILocation(line: 2595, column: 723, scope: !9374)
!9382 = !DILocation(line: 2595, column: 735, scope: !1438)
!9383 = !DILocation(line: 2595, column: 735, scope: !1437)
!9384 = !DILocation(line: 2595, column: 19, scope: !1438)
!9385 = !DILocation(line: 2595, column: 740, scope: !1438)
!9386 = !DILocation(line: 2595, column: 15, scope: !1438)
!9387 = !DILocation(line: 2595, column: 759, scope: !1438)
!9388 = !DILocation(line: 2595, column: 757, scope: !1438)
!9389 = !DILocation(line: 2595, column: 784, scope: !1438)
!9390 = !DILocation(line: 2595, column: 787, scope: !9391)
!9391 = !DILexicalBlockFile(scope: !1438, file: !457, discriminator: 13)
!9392 = !DILocation(line: 2595, column: 13, scope: !1432)
!9393 = !DILocation(line: 2596, column: 13, scope: !1438)
!9394 = !DILocation(line: 2597, column: 30, scope: !1432)
!9395 = !DILocation(line: 2597, column: 15, scope: !1432)
!9396 = !DILocation(line: 2597, column: 37, scope: !1432)
!9397 = !DILocation(line: 2597, column: 11, scope: !1432)
!9398 = !DILocation(line: 2598, column: 16, scope: !1445)
!9399 = !DILocation(line: 2598, column: 14, scope: !1445)
!9400 = !DILocation(line: 2598, column: 21, scope: !9401)
!9401 = !DILexicalBlockFile(scope: !9402, file: !457, discriminator: 2)
!9402 = !DILexicalBlockFile(scope: !1444, file: !457, discriminator: 1)
!9403 = !DILocation(line: 2598, column: 25, scope: !1444)
!9404 = !DILocation(line: 2598, column: 23, scope: !1444)
!9405 = !DILocation(line: 2598, column: 9, scope: !1445)
!9406 = !DILocation(line: 2599, column: 13, scope: !1443)
!9407 = !DILocation(line: 2599, column: 23, scope: !1443)
!9408 = !DILocation(line: 2599, column: 65, scope: !1443)
!9409 = !DILocation(line: 2599, column: 50, scope: !1443)
!9410 = !DILocation(line: 2599, column: 32, scope: !1443)
!9411 = !DILocation(line: 2599, column: 57, scope: !1443)
!9412 = !DILocation(line: 2599, column: 31, scope: !1443)
!9413 = !DILocation(line: 2600, column: 37, scope: !1443)
!9414 = !DILocation(line: 2600, column: 46, scope: !1443)
!9415 = !DILocation(line: 2600, column: 17, scope: !1443)
!9416 = !DILocation(line: 2600, column: 15, scope: !1443)
!9417 = !DILocation(line: 2601, column: 17, scope: !9418)
!9418 = distinct !DILexicalBlock(scope: !1443, file: !457, line: 2601, column: 17)
!9419 = !DILocation(line: 2601, column: 19, scope: !9418)
!9420 = !DILocation(line: 2601, column: 17, scope: !1443)
!9421 = !DILocation(line: 2603, column: 17, scope: !9418)
!9422 = !DILocation(line: 2604, column: 9, scope: !1444)
!9423 = !DILocation(line: 2604, column: 9, scope: !9402)
!9424 = !DILocation(line: 2604, column: 9, scope: !1443)
!9425 = !DILocation(line: 2598, column: 28, scope: !1444)
!9426 = !DILocation(line: 2598, column: 9, scope: !1444)
!9427 = !DILocation(line: 2605, column: 9, scope: !1432)
!9428 = !DILocation(line: 2605, column: 54, scope: !9429)
!9429 = !DILexicalBlockFile(scope: !1447, file: !457, discriminator: 1)
!9430 = !DILocation(line: 2605, column: 90, scope: !1447)
!9431 = !DILocation(line: 2605, column: 128, scope: !1447)
!9432 = !DILocation(line: 2605, column: 159, scope: !1447)
!9433 = !DILocation(line: 2605, column: 167, scope: !1447)
!9434 = !DILocation(line: 2605, column: 196, scope: !1447)
!9435 = !DILocation(line: 2605, column: 213, scope: !1447)
!9436 = !DILocation(line: 2605, column: 225, scope: !1447)
!9437 = !DILocation(line: 2605, column: 233, scope: !1447)
!9438 = !DILocation(line: 2605, column: 250, scope: !1447)
!9439 = !DILocation(line: 2605, column: 310, scope: !1447)
!9440 = !DILocation(line: 2605, column: 322, scope: !1447)
!9441 = !DILocation(line: 2605, column: 284, scope: !1447)
!9442 = !DILocation(line: 2605, column: 339, scope: !1447)
!9443 = !DILocation(line: 2605, column: 441, scope: !9444)
!9444 = !DILexicalBlockFile(scope: !9445, file: !457, discriminator: 5)
!9445 = !DILexicalBlockFile(scope: !9446, file: !457, discriminator: 4)
!9446 = !DILexicalBlockFile(scope: !9447, file: !457, discriminator: 3)
!9447 = distinct !DILexicalBlock(scope: !1447, file: !457, line: 2605, column: 346)
!9448 = !DILocation(line: 2605, column: 492, scope: !9447)
!9449 = !DILocation(line: 2605, column: 508, scope: !9450)
!9450 = !DILexicalBlockFile(scope: !9447, file: !457, discriminator: 2)
!9451 = !DILocation(line: 2605, column: 527, scope: !9452)
!9452 = !DILexicalBlockFile(scope: !9453, file: !457, discriminator: 7)
!9453 = !DILexicalBlockFile(scope: !1447, file: !457, discriminator: 6)
!9454 = !DILocation(line: 2605, column: 526, scope: !1447)
!9455 = !DILocation(line: 2605, column: 524, scope: !1447)
!9456 = !DILocation(line: 2605, column: 549, scope: !1447)
!9457 = !DILocation(line: 2605, column: 651, scope: !9458)
!9458 = !DILexicalBlockFile(scope: !9459, file: !457, discriminator: 11)
!9459 = !DILexicalBlockFile(scope: !9460, file: !457, discriminator: 10)
!9460 = !DILexicalBlockFile(scope: !9461, file: !457, discriminator: 9)
!9461 = distinct !DILexicalBlock(scope: !1447, file: !457, line: 2605, column: 556)
!9462 = !DILocation(line: 2605, column: 702, scope: !9461)
!9463 = !DILocation(line: 2605, column: 718, scope: !9464)
!9464 = !DILexicalBlockFile(scope: !9461, file: !457, discriminator: 8)
!9465 = !DILocation(line: 2605, column: 729, scope: !9466)
!9466 = !DILexicalBlockFile(scope: !9467, file: !457, discriminator: 13)
!9467 = !DILexicalBlockFile(scope: !1447, file: !457, discriminator: 12)
!9468 = !DILocation(line: 2605, column: 725, scope: !9461)
!9469 = !DILocation(line: 2605, column: 737, scope: !1448)
!9470 = !DILocation(line: 2605, column: 737, scope: !1447)
!9471 = !DILocation(line: 2605, column: 21, scope: !1448)
!9472 = !DILocation(line: 2605, column: 742, scope: !1448)
!9473 = !DILocation(line: 2605, column: 17, scope: !1448)
!9474 = !DILocation(line: 2605, column: 763, scope: !1448)
!9475 = !DILocation(line: 2605, column: 787, scope: !1448)
!9476 = !DILocation(line: 2605, column: 762, scope: !1448)
!9477 = !DILocation(line: 2605, column: 797, scope: !9478)
!9478 = !DILexicalBlockFile(scope: !1448, file: !457, discriminator: 14)
!9479 = !DILocation(line: 2605, column: 821, scope: !1448)
!9480 = !DILocation(line: 2605, column: 835, scope: !9481)
!9481 = !DILexicalBlockFile(scope: !1448, file: !457, discriminator: 15)
!9482 = !DILocation(line: 2605, column: 859, scope: !1448)
!9483 = !DILocation(line: 2605, column: 832, scope: !1448)
!9484 = !DILocation(line: 2605, column: 759, scope: !9485)
!9485 = !DILexicalBlockFile(scope: !9486, file: !457, discriminator: 17)
!9486 = !DILexicalBlockFile(scope: !1448, file: !457, discriminator: 16)
!9487 = !DILocation(line: 2605, column: 16, scope: !1449)
!9488 = !DILocation(line: 2605, column: 903, scope: !9489)
!9489 = !DILexicalBlockFile(scope: !1454, file: !457, discriminator: 18)
!9490 = !DILocation(line: 2605, column: 939, scope: !1454)
!9491 = !DILocation(line: 2605, column: 977, scope: !1454)
!9492 = !DILocation(line: 2605, column: 1008, scope: !1454)
!9493 = !DILocation(line: 2605, column: 1016, scope: !1454)
!9494 = !DILocation(line: 2605, column: 1045, scope: !1454)
!9495 = !DILocation(line: 2605, column: 1062, scope: !1454)
!9496 = !DILocation(line: 2605, column: 1074, scope: !1454)
!9497 = !DILocation(line: 2605, column: 1082, scope: !1454)
!9498 = !DILocation(line: 2605, column: 1099, scope: !1454)
!9499 = !DILocation(line: 2605, column: 1159, scope: !1454)
!9500 = !DILocation(line: 2605, column: 1171, scope: !1454)
!9501 = !DILocation(line: 2605, column: 1133, scope: !1454)
!9502 = !DILocation(line: 2605, column: 1188, scope: !1454)
!9503 = !DILocation(line: 2605, column: 1290, scope: !9504)
!9504 = !DILexicalBlockFile(scope: !9505, file: !457, discriminator: 23)
!9505 = !DILexicalBlockFile(scope: !9506, file: !457, discriminator: 22)
!9506 = !DILexicalBlockFile(scope: !9507, file: !457, discriminator: 21)
!9507 = distinct !DILexicalBlock(scope: !1454, file: !457, line: 2605, column: 1195)
!9508 = !DILocation(line: 2605, column: 1341, scope: !9507)
!9509 = !DILocation(line: 2605, column: 1357, scope: !9510)
!9510 = !DILexicalBlockFile(scope: !9507, file: !457, discriminator: 20)
!9511 = !DILocation(line: 2605, column: 1376, scope: !9512)
!9512 = !DILexicalBlockFile(scope: !9513, file: !457, discriminator: 25)
!9513 = !DILexicalBlockFile(scope: !1454, file: !457, discriminator: 24)
!9514 = !DILocation(line: 2605, column: 1375, scope: !1454)
!9515 = !DILocation(line: 2605, column: 1373, scope: !1454)
!9516 = !DILocation(line: 2605, column: 1398, scope: !1454)
!9517 = !DILocation(line: 2605, column: 1500, scope: !9518)
!9518 = !DILexicalBlockFile(scope: !9519, file: !457, discriminator: 29)
!9519 = !DILexicalBlockFile(scope: !9520, file: !457, discriminator: 28)
!9520 = !DILexicalBlockFile(scope: !9521, file: !457, discriminator: 27)
!9521 = distinct !DILexicalBlock(scope: !1454, file: !457, line: 2605, column: 1405)
!9522 = !DILocation(line: 2605, column: 1551, scope: !9521)
!9523 = !DILocation(line: 2605, column: 1567, scope: !9524)
!9524 = !DILexicalBlockFile(scope: !9521, file: !457, discriminator: 26)
!9525 = !DILocation(line: 2605, column: 1578, scope: !9526)
!9526 = !DILexicalBlockFile(scope: !9527, file: !457, discriminator: 31)
!9527 = !DILexicalBlockFile(scope: !1454, file: !457, discriminator: 30)
!9528 = !DILocation(line: 2605, column: 1574, scope: !9521)
!9529 = !DILocation(line: 2605, column: 1586, scope: !1448)
!9530 = !DILocation(line: 2605, column: 1586, scope: !1454)
!9531 = !DILocation(line: 2605, column: 870, scope: !1448)
!9532 = !DILocation(line: 2605, column: 1591, scope: !1448)
!9533 = !DILocation(line: 2605, column: 1602, scope: !1448)
!9534 = !DILocation(line: 2605, column: 869, scope: !1448)
!9535 = !DILocation(line: 2605, column: 1607, scope: !9536)
!9536 = !DILexicalBlockFile(scope: !9537, file: !457, discriminator: 32)
!9537 = !DILexicalBlockFile(scope: !1449, file: !457, discriminator: 19)
!9538 = !DILocation(line: 2605, column: 1607, scope: !9539)
!9539 = !DILexicalBlockFile(scope: !1449, file: !457, discriminator: 33)
!9540 = !DILocation(line: 2606, column: 16, scope: !1432)
!9541 = !DILocation(line: 2606, column: 9, scope: !1432)
!9542 = !DILocation(line: 2607, column: 5, scope: !1433)
!9543 = !DILocation(line: 2609, column: 39, scope: !1426)
!9544 = !DILocation(line: 2609, column: 15, scope: !1426)
!9545 = !DILocation(line: 2609, column: 13, scope: !1426)
!9546 = !DILocation(line: 2610, column: 9, scope: !1460)
!9547 = !DILocation(line: 2610, column: 17, scope: !1460)
!9548 = !DILocation(line: 2610, column: 9, scope: !1426)
!9549 = !DILocation(line: 2611, column: 9, scope: !1459)
!9550 = !DILocation(line: 2611, column: 19, scope: !1459)
!9551 = !DILocation(line: 2612, column: 9, scope: !1459)
!9552 = !DILocation(line: 2612, column: 13, scope: !1459)
!9553 = !DILocation(line: 2613, column: 52, scope: !1463)
!9554 = !DILocation(line: 2613, column: 88, scope: !1463)
!9555 = !DILocation(line: 2613, column: 126, scope: !1463)
!9556 = !DILocation(line: 2613, column: 157, scope: !1463)
!9557 = !DILocation(line: 2613, column: 165, scope: !1463)
!9558 = !DILocation(line: 2613, column: 194, scope: !1463)
!9559 = !DILocation(line: 2613, column: 211, scope: !1463)
!9560 = !DILocation(line: 2613, column: 223, scope: !1463)
!9561 = !DILocation(line: 2613, column: 231, scope: !1463)
!9562 = !DILocation(line: 2613, column: 248, scope: !1463)
!9563 = !DILocation(line: 2613, column: 308, scope: !1463)
!9564 = !DILocation(line: 2613, column: 320, scope: !1463)
!9565 = !DILocation(line: 2613, column: 282, scope: !1463)
!9566 = !DILocation(line: 2613, column: 337, scope: !1463)
!9567 = !DILocation(line: 2613, column: 439, scope: !9568)
!9568 = !DILexicalBlockFile(scope: !9569, file: !457, discriminator: 4)
!9569 = !DILexicalBlockFile(scope: !9570, file: !457, discriminator: 3)
!9570 = !DILexicalBlockFile(scope: !9571, file: !457, discriminator: 2)
!9571 = distinct !DILexicalBlock(scope: !1463, file: !457, line: 2613, column: 344)
!9572 = !DILocation(line: 2613, column: 490, scope: !9571)
!9573 = !DILocation(line: 2613, column: 506, scope: !9574)
!9574 = !DILexicalBlockFile(scope: !9571, file: !457, discriminator: 1)
!9575 = !DILocation(line: 2613, column: 525, scope: !9576)
!9576 = !DILexicalBlockFile(scope: !9577, file: !457, discriminator: 6)
!9577 = !DILexicalBlockFile(scope: !1463, file: !457, discriminator: 5)
!9578 = !DILocation(line: 2613, column: 524, scope: !1463)
!9579 = !DILocation(line: 2613, column: 522, scope: !1463)
!9580 = !DILocation(line: 2613, column: 547, scope: !1463)
!9581 = !DILocation(line: 2613, column: 649, scope: !9582)
!9582 = !DILexicalBlockFile(scope: !9583, file: !457, discriminator: 10)
!9583 = !DILexicalBlockFile(scope: !9584, file: !457, discriminator: 9)
!9584 = !DILexicalBlockFile(scope: !9585, file: !457, discriminator: 8)
!9585 = distinct !DILexicalBlock(scope: !1463, file: !457, line: 2613, column: 554)
!9586 = !DILocation(line: 2613, column: 700, scope: !9585)
!9587 = !DILocation(line: 2613, column: 716, scope: !9588)
!9588 = !DILexicalBlockFile(scope: !9585, file: !457, discriminator: 7)
!9589 = !DILocation(line: 2613, column: 727, scope: !9590)
!9590 = !DILexicalBlockFile(scope: !9591, file: !457, discriminator: 12)
!9591 = !DILexicalBlockFile(scope: !1463, file: !457, discriminator: 11)
!9592 = !DILocation(line: 2613, column: 723, scope: !9585)
!9593 = !DILocation(line: 2613, column: 735, scope: !1464)
!9594 = !DILocation(line: 2613, column: 735, scope: !1463)
!9595 = !DILocation(line: 2613, column: 19, scope: !1464)
!9596 = !DILocation(line: 2613, column: 740, scope: !1464)
!9597 = !DILocation(line: 2613, column: 15, scope: !1464)
!9598 = !DILocation(line: 2613, column: 759, scope: !1464)
!9599 = !DILocation(line: 2613, column: 757, scope: !1464)
!9600 = !DILocation(line: 2613, column: 784, scope: !1464)
!9601 = !DILocation(line: 2613, column: 787, scope: !9602)
!9602 = !DILexicalBlockFile(scope: !1464, file: !457, discriminator: 13)
!9603 = !DILocation(line: 2613, column: 13, scope: !1459)
!9604 = !DILocation(line: 2614, column: 13, scope: !1470)
!9605 = !DILocation(line: 2614, column: 18, scope: !9606)
!9606 = !DILexicalBlockFile(scope: !1469, file: !457, discriminator: 1)
!9607 = !DILocation(line: 2614, column: 28, scope: !1469)
!9608 = !DILocation(line: 2614, column: 58, scope: !1469)
!9609 = !DILocation(line: 2614, column: 76, scope: !9610)
!9610 = distinct !DILexicalBlock(scope: !1469, file: !457, line: 2614, column: 73)
!9611 = !DILocation(line: 2614, column: 93, scope: !9610)
!9612 = !DILocation(line: 2614, column: 73, scope: !9610)
!9613 = !DILocation(line: 2614, column: 103, scope: !9610)
!9614 = !DILocation(line: 2614, column: 73, scope: !1469)
!9615 = !DILocation(line: 2614, column: 73, scope: !9616)
!9616 = !DILexicalBlockFile(scope: !1469, file: !457, discriminator: 2)
!9617 = !DILocation(line: 2614, column: 134, scope: !9618)
!9618 = !DILexicalBlockFile(scope: !9610, file: !457, discriminator: 3)
!9619 = !DILocation(line: 2614, column: 152, scope: !9610)
!9620 = !DILocation(line: 2614, column: 162, scope: !9610)
!9621 = !DILocation(line: 2614, column: 187, scope: !9610)
!9622 = !DILocation(line: 2614, column: 118, scope: !9610)
!9623 = !DILocation(line: 2614, column: 206, scope: !9624)
!9624 = !DILexicalBlockFile(scope: !1470, file: !457, discriminator: 4)
!9625 = !DILocation(line: 2614, column: 206, scope: !1469)
!9626 = !DILocation(line: 2614, column: 206, scope: !9627)
!9627 = !DILexicalBlockFile(scope: !1469, file: !457, discriminator: 5)
!9628 = !DILocation(line: 2615, column: 20, scope: !1470)
!9629 = !DILocation(line: 2615, column: 13, scope: !1470)
!9630 = !DILocation(line: 2617, column: 44, scope: !1459)
!9631 = !DILocation(line: 2617, column: 53, scope: !1459)
!9632 = !DILocation(line: 2617, column: 15, scope: !1459)
!9633 = !DILocation(line: 2617, column: 13, scope: !1459)
!9634 = !DILocation(line: 2618, column: 9, scope: !1459)
!9635 = !DILocation(line: 2618, column: 54, scope: !9636)
!9636 = !DILexicalBlockFile(scope: !1472, file: !457, discriminator: 1)
!9637 = !DILocation(line: 2618, column: 90, scope: !1472)
!9638 = !DILocation(line: 2618, column: 128, scope: !1472)
!9639 = !DILocation(line: 2618, column: 159, scope: !1472)
!9640 = !DILocation(line: 2618, column: 167, scope: !1472)
!9641 = !DILocation(line: 2618, column: 196, scope: !1472)
!9642 = !DILocation(line: 2618, column: 213, scope: !1472)
!9643 = !DILocation(line: 2618, column: 225, scope: !1472)
!9644 = !DILocation(line: 2618, column: 233, scope: !1472)
!9645 = !DILocation(line: 2618, column: 250, scope: !1472)
!9646 = !DILocation(line: 2618, column: 310, scope: !1472)
!9647 = !DILocation(line: 2618, column: 322, scope: !1472)
!9648 = !DILocation(line: 2618, column: 284, scope: !1472)
!9649 = !DILocation(line: 2618, column: 339, scope: !1472)
!9650 = !DILocation(line: 2618, column: 441, scope: !9651)
!9651 = !DILexicalBlockFile(scope: !9652, file: !457, discriminator: 5)
!9652 = !DILexicalBlockFile(scope: !9653, file: !457, discriminator: 4)
!9653 = !DILexicalBlockFile(scope: !9654, file: !457, discriminator: 3)
!9654 = distinct !DILexicalBlock(scope: !1472, file: !457, line: 2618, column: 346)
!9655 = !DILocation(line: 2618, column: 492, scope: !9654)
!9656 = !DILocation(line: 2618, column: 508, scope: !9657)
!9657 = !DILexicalBlockFile(scope: !9654, file: !457, discriminator: 2)
!9658 = !DILocation(line: 2618, column: 527, scope: !9659)
!9659 = !DILexicalBlockFile(scope: !9660, file: !457, discriminator: 7)
!9660 = !DILexicalBlockFile(scope: !1472, file: !457, discriminator: 6)
!9661 = !DILocation(line: 2618, column: 526, scope: !1472)
!9662 = !DILocation(line: 2618, column: 524, scope: !1472)
!9663 = !DILocation(line: 2618, column: 549, scope: !1472)
!9664 = !DILocation(line: 2618, column: 651, scope: !9665)
!9665 = !DILexicalBlockFile(scope: !9666, file: !457, discriminator: 11)
!9666 = !DILexicalBlockFile(scope: !9667, file: !457, discriminator: 10)
!9667 = !DILexicalBlockFile(scope: !9668, file: !457, discriminator: 9)
!9668 = distinct !DILexicalBlock(scope: !1472, file: !457, line: 2618, column: 556)
!9669 = !DILocation(line: 2618, column: 702, scope: !9668)
!9670 = !DILocation(line: 2618, column: 718, scope: !9671)
!9671 = !DILexicalBlockFile(scope: !9668, file: !457, discriminator: 8)
!9672 = !DILocation(line: 2618, column: 729, scope: !9673)
!9673 = !DILexicalBlockFile(scope: !9674, file: !457, discriminator: 13)
!9674 = !DILexicalBlockFile(scope: !1472, file: !457, discriminator: 12)
!9675 = !DILocation(line: 2618, column: 725, scope: !9668)
!9676 = !DILocation(line: 2618, column: 737, scope: !1473)
!9677 = !DILocation(line: 2618, column: 737, scope: !1472)
!9678 = !DILocation(line: 2618, column: 21, scope: !1473)
!9679 = !DILocation(line: 2618, column: 742, scope: !1473)
!9680 = !DILocation(line: 2618, column: 17, scope: !1473)
!9681 = !DILocation(line: 2618, column: 763, scope: !1473)
!9682 = !DILocation(line: 2618, column: 787, scope: !1473)
!9683 = !DILocation(line: 2618, column: 762, scope: !1473)
!9684 = !DILocation(line: 2618, column: 797, scope: !9685)
!9685 = !DILexicalBlockFile(scope: !1473, file: !457, discriminator: 14)
!9686 = !DILocation(line: 2618, column: 821, scope: !1473)
!9687 = !DILocation(line: 2618, column: 835, scope: !9688)
!9688 = !DILexicalBlockFile(scope: !1473, file: !457, discriminator: 15)
!9689 = !DILocation(line: 2618, column: 859, scope: !1473)
!9690 = !DILocation(line: 2618, column: 832, scope: !1473)
!9691 = !DILocation(line: 2618, column: 759, scope: !9692)
!9692 = !DILexicalBlockFile(scope: !9693, file: !457, discriminator: 17)
!9693 = !DILexicalBlockFile(scope: !1473, file: !457, discriminator: 16)
!9694 = !DILocation(line: 2618, column: 16, scope: !1474)
!9695 = !DILocation(line: 2618, column: 903, scope: !9696)
!9696 = !DILexicalBlockFile(scope: !1479, file: !457, discriminator: 18)
!9697 = !DILocation(line: 2618, column: 939, scope: !1479)
!9698 = !DILocation(line: 2618, column: 977, scope: !1479)
!9699 = !DILocation(line: 2618, column: 1008, scope: !1479)
!9700 = !DILocation(line: 2618, column: 1016, scope: !1479)
!9701 = !DILocation(line: 2618, column: 1045, scope: !1479)
!9702 = !DILocation(line: 2618, column: 1062, scope: !1479)
!9703 = !DILocation(line: 2618, column: 1074, scope: !1479)
!9704 = !DILocation(line: 2618, column: 1082, scope: !1479)
!9705 = !DILocation(line: 2618, column: 1099, scope: !1479)
!9706 = !DILocation(line: 2618, column: 1159, scope: !1479)
!9707 = !DILocation(line: 2618, column: 1171, scope: !1479)
!9708 = !DILocation(line: 2618, column: 1133, scope: !1479)
!9709 = !DILocation(line: 2618, column: 1188, scope: !1479)
!9710 = !DILocation(line: 2618, column: 1290, scope: !9711)
!9711 = !DILexicalBlockFile(scope: !9712, file: !457, discriminator: 23)
!9712 = !DILexicalBlockFile(scope: !9713, file: !457, discriminator: 22)
!9713 = !DILexicalBlockFile(scope: !9714, file: !457, discriminator: 21)
!9714 = distinct !DILexicalBlock(scope: !1479, file: !457, line: 2618, column: 1195)
!9715 = !DILocation(line: 2618, column: 1341, scope: !9714)
!9716 = !DILocation(line: 2618, column: 1357, scope: !9717)
!9717 = !DILexicalBlockFile(scope: !9714, file: !457, discriminator: 20)
!9718 = !DILocation(line: 2618, column: 1376, scope: !9719)
!9719 = !DILexicalBlockFile(scope: !9720, file: !457, discriminator: 25)
!9720 = !DILexicalBlockFile(scope: !1479, file: !457, discriminator: 24)
!9721 = !DILocation(line: 2618, column: 1375, scope: !1479)
!9722 = !DILocation(line: 2618, column: 1373, scope: !1479)
!9723 = !DILocation(line: 2618, column: 1398, scope: !1479)
!9724 = !DILocation(line: 2618, column: 1500, scope: !9725)
!9725 = !DILexicalBlockFile(scope: !9726, file: !457, discriminator: 29)
!9726 = !DILexicalBlockFile(scope: !9727, file: !457, discriminator: 28)
!9727 = !DILexicalBlockFile(scope: !9728, file: !457, discriminator: 27)
!9728 = distinct !DILexicalBlock(scope: !1479, file: !457, line: 2618, column: 1405)
!9729 = !DILocation(line: 2618, column: 1551, scope: !9728)
!9730 = !DILocation(line: 2618, column: 1567, scope: !9731)
!9731 = !DILexicalBlockFile(scope: !9728, file: !457, discriminator: 26)
!9732 = !DILocation(line: 2618, column: 1578, scope: !9733)
!9733 = !DILexicalBlockFile(scope: !9734, file: !457, discriminator: 31)
!9734 = !DILexicalBlockFile(scope: !1479, file: !457, discriminator: 30)
!9735 = !DILocation(line: 2618, column: 1574, scope: !9728)
!9736 = !DILocation(line: 2618, column: 1586, scope: !1473)
!9737 = !DILocation(line: 2618, column: 1586, scope: !1479)
!9738 = !DILocation(line: 2618, column: 870, scope: !1473)
!9739 = !DILocation(line: 2618, column: 1591, scope: !1473)
!9740 = !DILocation(line: 2618, column: 1602, scope: !1473)
!9741 = !DILocation(line: 2618, column: 869, scope: !1473)
!9742 = !DILocation(line: 2618, column: 1607, scope: !9743)
!9743 = !DILexicalBlockFile(scope: !9744, file: !457, discriminator: 32)
!9744 = !DILexicalBlockFile(scope: !1474, file: !457, discriminator: 19)
!9745 = !DILocation(line: 2618, column: 1607, scope: !9746)
!9746 = !DILexicalBlockFile(scope: !1474, file: !457, discriminator: 33)
!9747 = !DILocation(line: 2619, column: 9, scope: !1459)
!9748 = !DILocation(line: 2619, column: 14, scope: !9749)
!9749 = !DILexicalBlockFile(scope: !1484, file: !457, discriminator: 1)
!9750 = !DILocation(line: 2619, column: 24, scope: !1484)
!9751 = !DILocation(line: 2619, column: 54, scope: !1484)
!9752 = !DILocation(line: 2619, column: 72, scope: !9753)
!9753 = distinct !DILexicalBlock(scope: !1484, file: !457, line: 2619, column: 69)
!9754 = !DILocation(line: 2619, column: 89, scope: !9753)
!9755 = !DILocation(line: 2619, column: 69, scope: !9753)
!9756 = !DILocation(line: 2619, column: 99, scope: !9753)
!9757 = !DILocation(line: 2619, column: 69, scope: !1484)
!9758 = !DILocation(line: 2619, column: 69, scope: !9759)
!9759 = !DILexicalBlockFile(scope: !1484, file: !457, discriminator: 2)
!9760 = !DILocation(line: 2619, column: 130, scope: !9761)
!9761 = !DILexicalBlockFile(scope: !9753, file: !457, discriminator: 3)
!9762 = !DILocation(line: 2619, column: 148, scope: !9753)
!9763 = !DILocation(line: 2619, column: 158, scope: !9753)
!9764 = !DILocation(line: 2619, column: 183, scope: !9753)
!9765 = !DILocation(line: 2619, column: 114, scope: !9753)
!9766 = !DILocation(line: 2619, column: 202, scope: !9767)
!9767 = !DILexicalBlockFile(scope: !1459, file: !457, discriminator: 4)
!9768 = !DILocation(line: 2619, column: 202, scope: !1484)
!9769 = !DILocation(line: 2619, column: 202, scope: !9770)
!9770 = !DILexicalBlockFile(scope: !1484, file: !457, discriminator: 5)
!9771 = !DILocation(line: 2620, column: 13, scope: !1488)
!9772 = !DILocation(line: 2620, column: 17, scope: !1488)
!9773 = !DILocation(line: 2620, column: 13, scope: !1459)
!9774 = !DILocation(line: 2621, column: 34, scope: !1487)
!9775 = !DILocation(line: 2621, column: 18, scope: !1487)
!9776 = !DILocation(line: 2621, column: 16, scope: !1487)
!9777 = !DILocation(line: 2622, column: 13, scope: !1487)
!9778 = !DILocation(line: 2622, column: 18, scope: !9779)
!9779 = !DILexicalBlockFile(scope: !1486, file: !457, discriminator: 1)
!9780 = !DILocation(line: 2622, column: 28, scope: !1486)
!9781 = !DILocation(line: 2622, column: 58, scope: !1486)
!9782 = !DILocation(line: 2622, column: 72, scope: !9783)
!9783 = distinct !DILexicalBlock(scope: !1486, file: !457, line: 2622, column: 69)
!9784 = !DILocation(line: 2622, column: 89, scope: !9783)
!9785 = !DILocation(line: 2622, column: 69, scope: !9783)
!9786 = !DILocation(line: 2622, column: 99, scope: !9783)
!9787 = !DILocation(line: 2622, column: 69, scope: !1486)
!9788 = !DILocation(line: 2622, column: 69, scope: !9789)
!9789 = !DILexicalBlockFile(scope: !1486, file: !457, discriminator: 2)
!9790 = !DILocation(line: 2622, column: 130, scope: !9791)
!9791 = !DILexicalBlockFile(scope: !9783, file: !457, discriminator: 3)
!9792 = !DILocation(line: 2622, column: 148, scope: !9783)
!9793 = !DILocation(line: 2622, column: 158, scope: !9783)
!9794 = !DILocation(line: 2622, column: 183, scope: !9783)
!9795 = !DILocation(line: 2622, column: 114, scope: !9783)
!9796 = !DILocation(line: 2622, column: 202, scope: !9797)
!9797 = !DILexicalBlockFile(scope: !1487, file: !457, discriminator: 4)
!9798 = !DILocation(line: 2622, column: 202, scope: !1486)
!9799 = !DILocation(line: 2622, column: 202, scope: !9800)
!9800 = !DILexicalBlockFile(scope: !1486, file: !457, discriminator: 5)
!9801 = !DILocation(line: 2623, column: 9, scope: !1487)
!9802 = !DILocation(line: 2624, column: 16, scope: !1459)
!9803 = !DILocation(line: 2624, column: 9, scope: !1459)
!9804 = !DILocation(line: 2625, column: 5, scope: !1460)
!9805 = !DILocation(line: 2626, column: 14, scope: !9806)
!9806 = distinct !DILexicalBlock(scope: !1460, file: !457, line: 2626, column: 14)
!9807 = !DILocation(line: 2626, column: 14, scope: !1460)
!9808 = !DILocation(line: 2627, column: 9, scope: !9806)
!9809 = !DILocation(line: 2628, column: 33, scope: !1426)
!9810 = !DILocation(line: 2628, column: 42, scope: !1426)
!9811 = !DILocation(line: 2628, column: 12, scope: !1426)
!9812 = !DILocation(line: 2628, column: 5, scope: !1426)
!9813 = !DILocation(line: 2629, column: 1, scope: !1426)
!9814 = !DILocation(line: 2567, column: 32, scope: !1811)
!9815 = !DILocation(line: 2567, column: 51, scope: !1811)
!9816 = !DILocation(line: 2569, column: 26, scope: !9817)
!9817 = distinct !DILexicalBlock(scope: !1811, file: !457, line: 2569, column: 9)
!9818 = !DILocation(line: 2569, column: 33, scope: !9817)
!9819 = !DILocation(line: 2569, column: 44, scope: !9817)
!9820 = !DILocation(line: 2569, column: 53, scope: !9817)
!9821 = !DILocation(line: 2569, column: 70, scope: !9817)
!9822 = !DILocation(line: 2569, column: 76, scope: !9817)
!9823 = !DILocation(line: 2569, column: 96, scope: !9824)
!9824 = !DILexicalBlockFile(scope: !9817, file: !457, discriminator: 1)
!9825 = !DILocation(line: 2569, column: 107, scope: !9817)
!9826 = !DILocation(line: 2569, column: 118, scope: !9817)
!9827 = !DILocation(line: 2569, column: 127, scope: !9817)
!9828 = !DILocation(line: 2569, column: 144, scope: !9817)
!9829 = !DILocation(line: 2569, column: 9, scope: !1811)
!9830 = !DILocation(line: 2571, column: 49, scope: !9831)
!9831 = distinct !DILexicalBlock(scope: !9817, file: !457, line: 2569, column: 151)
!9832 = !DILocation(line: 2571, column: 33, scope: !9831)
!9833 = !DILocation(line: 2571, column: 74, scope: !9831)
!9834 = !DILocation(line: 2571, column: 58, scope: !9831)
!9835 = !DILocation(line: 2571, column: 16, scope: !9831)
!9836 = !DILocation(line: 2571, column: 9, scope: !9831)
!9837 = !DILocation(line: 2573, column: 22, scope: !9838)
!9838 = distinct !DILexicalBlock(scope: !1811, file: !457, line: 2573, column: 9)
!9839 = !DILocation(line: 2573, column: 10, scope: !9838)
!9840 = !DILocation(line: 2573, column: 9, scope: !1811)
!9841 = !DILocation(line: 2575, column: 9, scope: !9838)
!9842 = !DILocation(line: 2576, column: 22, scope: !9843)
!9843 = distinct !DILexicalBlock(scope: !1811, file: !457, line: 2576, column: 9)
!9844 = !DILocation(line: 2576, column: 10, scope: !9843)
!9845 = !DILocation(line: 2576, column: 9, scope: !1811)
!9846 = !DILocation(line: 2579, column: 9, scope: !9843)
!9847 = !DILocation(line: 2581, column: 32, scope: !1811)
!9848 = !DILocation(line: 2581, column: 41, scope: !1811)
!9849 = !DILocation(line: 2581, column: 12, scope: !1811)
!9850 = !DILocation(line: 2581, column: 5, scope: !1811)
!9851 = !DILocation(line: 2582, column: 1, scope: !1811)
!9852 = !DILocation(line: 2632, column: 36, scope: !1489)
!9853 = !DILocation(line: 2632, column: 52, scope: !1489)
!9854 = !DILocation(line: 2634, column: 33, scope: !1489)
!9855 = !DILocation(line: 2634, column: 39, scope: !1489)
!9856 = !DILocation(line: 2634, column: 12, scope: !1489)
!9857 = !DILocation(line: 2634, column: 5, scope: !1489)
!9858 = !DILocation(line: 2638, column: 36, scope: !1493)
!9859 = !DILocation(line: 2638, column: 55, scope: !1493)
!9860 = !DILocation(line: 2640, column: 33, scope: !1493)
!9861 = !DILocation(line: 2640, column: 42, scope: !1493)
!9862 = !DILocation(line: 2640, column: 12, scope: !1493)
!9863 = !DILocation(line: 2640, column: 5, scope: !1493)
!9864 = !DILocation(line: 2698, column: 41, scope: !1513)
!9865 = !DILocation(line: 2700, column: 5, scope: !1513)
!9866 = !DILocation(line: 2700, column: 12, scope: !1513)
!9867 = !DILocation(line: 2701, column: 5, scope: !1513)
!9868 = !DILocation(line: 2701, column: 16, scope: !1513)
!9869 = !DILocation(line: 2701, column: 19, scope: !1513)
!9870 = !DILocation(line: 2702, column: 5, scope: !1513)
!9871 = !DILocation(line: 2702, column: 15, scope: !1513)
!9872 = !DILocation(line: 2703, column: 5, scope: !1513)
!9873 = !DILocation(line: 2703, column: 16, scope: !1513)
!9874 = !DILocation(line: 2705, column: 28, scope: !1513)
!9875 = !DILocation(line: 2705, column: 12, scope: !1513)
!9876 = !DILocation(line: 2705, column: 10, scope: !1513)
!9877 = !DILocation(line: 2706, column: 9, scope: !9878)
!9878 = distinct !DILexicalBlock(scope: !1513, file: !457, line: 2706, column: 9)
!9879 = !DILocation(line: 2706, column: 14, scope: !9878)
!9880 = !DILocation(line: 2706, column: 9, scope: !1513)
!9881 = !DILocation(line: 2707, column: 9, scope: !9878)
!9882 = !DILocation(line: 2711, column: 17, scope: !9883)
!9883 = distinct !DILexicalBlock(scope: !1513, file: !457, line: 2711, column: 9)
!9884 = !DILocation(line: 2711, column: 22, scope: !9883)
!9885 = !DILocation(line: 2711, column: 9, scope: !1513)
!9886 = !DILocation(line: 2712, column: 9, scope: !9887)
!9887 = distinct !DILexicalBlock(scope: !9883, file: !457, line: 2711, column: 91)
!9888 = !DILocation(line: 2713, column: 9, scope: !9887)
!9889 = !DILocation(line: 2716, column: 27, scope: !1513)
!9890 = !DILocation(line: 2716, column: 32, scope: !1513)
!9891 = !DILocation(line: 2716, column: 37, scope: !1513)
!9892 = !DILocation(line: 2716, column: 13, scope: !1513)
!9893 = !DILocation(line: 2716, column: 11, scope: !1513)
!9894 = !DILocation(line: 2717, column: 9, scope: !9895)
!9895 = distinct !DILexicalBlock(scope: !1513, file: !457, line: 2717, column: 9)
!9896 = !DILocation(line: 2717, column: 15, scope: !9895)
!9897 = !DILocation(line: 2717, column: 9, scope: !1513)
!9898 = !DILocation(line: 2718, column: 9, scope: !9899)
!9899 = distinct !DILexicalBlock(scope: !9895, file: !457, line: 2717, column: 30)
!9900 = !DILocation(line: 2719, column: 9, scope: !9899)
!9901 = !DILocation(line: 2721, column: 12, scope: !1528)
!9902 = !DILocation(line: 2721, column: 10, scope: !1528)
!9903 = !DILocation(line: 2721, column: 17, scope: !9904)
!9904 = !DILexicalBlockFile(scope: !9905, file: !457, discriminator: 2)
!9905 = !DILexicalBlockFile(scope: !1527, file: !457, discriminator: 1)
!9906 = !DILocation(line: 2721, column: 21, scope: !1527)
!9907 = !DILocation(line: 2721, column: 19, scope: !1527)
!9908 = !DILocation(line: 2721, column: 5, scope: !1528)
!9909 = !DILocation(line: 2722, column: 9, scope: !1526)
!9910 = !DILocation(line: 2722, column: 15, scope: !1526)
!9911 = !DILocation(line: 2723, column: 35, scope: !1526)
!9912 = !DILocation(line: 2723, column: 41, scope: !1526)
!9913 = !DILocation(line: 2723, column: 16, scope: !1526)
!9914 = !DILocation(line: 2723, column: 14, scope: !1526)
!9915 = !DILocation(line: 2724, column: 13, scope: !9916)
!9916 = distinct !DILexicalBlock(scope: !1526, file: !457, line: 2724, column: 13)
!9917 = !DILocation(line: 2724, column: 18, scope: !9916)
!9918 = !DILocation(line: 2724, column: 13, scope: !1526)
!9919 = !DILocation(line: 2726, column: 19, scope: !9920)
!9920 = distinct !DILexicalBlock(scope: !9916, file: !457, line: 2724, column: 33)
!9921 = !DILocation(line: 2726, column: 13, scope: !9920)
!9922 = !DILocation(line: 2726, column: 22, scope: !9920)
!9923 = !DILocation(line: 2727, column: 13, scope: !9920)
!9924 = !DILocation(line: 2729, column: 33, scope: !1526)
!9925 = !DILocation(line: 2729, column: 16, scope: !1526)
!9926 = !DILocation(line: 2729, column: 14, scope: !1526)
!9927 = !DILocation(line: 2730, column: 13, scope: !9928)
!9928 = distinct !DILexicalBlock(scope: !1526, file: !457, line: 2730, column: 13)
!9929 = !DILocation(line: 2730, column: 18, scope: !9928)
!9930 = !DILocation(line: 2730, column: 13, scope: !1526)
!9931 = !DILocation(line: 2732, column: 19, scope: !9932)
!9932 = distinct !DILexicalBlock(scope: !9928, file: !457, line: 2730, column: 33)
!9933 = !DILocation(line: 2732, column: 13, scope: !9932)
!9934 = !DILocation(line: 2732, column: 22, scope: !9932)
!9935 = !DILocation(line: 2733, column: 13, scope: !9932)
!9936 = !DILocation(line: 2735, column: 47, scope: !1526)
!9937 = !DILocation(line: 2735, column: 32, scope: !1526)
!9938 = !DILocation(line: 2735, column: 55, scope: !1526)
!9939 = !DILocation(line: 2735, column: 65, scope: !1526)
!9940 = !DILocation(line: 2735, column: 14, scope: !1526)
!9941 = !DILocation(line: 2736, column: 33, scope: !1526)
!9942 = !DILocation(line: 2736, column: 20, scope: !1526)
!9943 = !DILocation(line: 2736, column: 15, scope: !1526)
!9944 = !DILocation(line: 2736, column: 9, scope: !1526)
!9945 = !DILocation(line: 2736, column: 18, scope: !1526)
!9946 = !DILocation(line: 2737, column: 20, scope: !9947)
!9947 = distinct !DILexicalBlock(scope: !1526, file: !457, line: 2737, column: 13)
!9948 = !DILocation(line: 2737, column: 14, scope: !9947)
!9949 = !DILocation(line: 2737, column: 13, scope: !1526)
!9950 = !DILocation(line: 2738, column: 13, scope: !9951)
!9951 = distinct !DILexicalBlock(scope: !9947, file: !457, line: 2737, column: 24)
!9952 = !DILocation(line: 2739, column: 13, scope: !9951)
!9953 = !DILocation(line: 2741, column: 22, scope: !1526)
!9954 = !DILocation(line: 2741, column: 16, scope: !1526)
!9955 = !DILocation(line: 2741, column: 26, scope: !1526)
!9956 = !DILocation(line: 2741, column: 32, scope: !1526)
!9957 = !DILocation(line: 2741, column: 9, scope: !1526)
!9958 = !DILocation(line: 2742, column: 9, scope: !1526)
!9959 = !DILocation(line: 2742, column: 14, scope: !9960)
!9960 = !DILexicalBlockFile(scope: !1530, file: !457, discriminator: 1)
!9961 = !DILocation(line: 2742, column: 24, scope: !1530)
!9962 = !DILocation(line: 2742, column: 54, scope: !1530)
!9963 = !DILocation(line: 2742, column: 69, scope: !9964)
!9964 = distinct !DILexicalBlock(scope: !1530, file: !457, line: 2742, column: 66)
!9965 = !DILocation(line: 2742, column: 86, scope: !9964)
!9966 = !DILocation(line: 2742, column: 66, scope: !9964)
!9967 = !DILocation(line: 2742, column: 96, scope: !9964)
!9968 = !DILocation(line: 2742, column: 66, scope: !1530)
!9969 = !DILocation(line: 2742, column: 66, scope: !9970)
!9970 = !DILexicalBlockFile(scope: !1530, file: !457, discriminator: 2)
!9971 = !DILocation(line: 2742, column: 127, scope: !9972)
!9972 = !DILexicalBlockFile(scope: !9964, file: !457, discriminator: 3)
!9973 = !DILocation(line: 2742, column: 145, scope: !9964)
!9974 = !DILocation(line: 2742, column: 155, scope: !9964)
!9975 = !DILocation(line: 2742, column: 180, scope: !9964)
!9976 = !DILocation(line: 2742, column: 111, scope: !9964)
!9977 = !DILocation(line: 2742, column: 199, scope: !9978)
!9978 = !DILexicalBlockFile(scope: !1526, file: !457, discriminator: 4)
!9979 = !DILocation(line: 2742, column: 199, scope: !1530)
!9980 = !DILocation(line: 2742, column: 199, scope: !9981)
!9981 = !DILexicalBlockFile(scope: !1530, file: !457, discriminator: 5)
!9982 = !DILocation(line: 2743, column: 5, scope: !1527)
!9983 = !DILocation(line: 2743, column: 5, scope: !9905)
!9984 = !DILocation(line: 2743, column: 5, scope: !1526)
!9985 = !DILocation(line: 2721, column: 27, scope: !1527)
!9986 = !DILocation(line: 2721, column: 5, scope: !1527)
!9987 = !DILocation(line: 2744, column: 11, scope: !1513)
!9988 = !DILocation(line: 2744, column: 5, scope: !1513)
!9989 = !DILocation(line: 2744, column: 17, scope: !1513)
!9990 = !DILocation(line: 2746, column: 12, scope: !1513)
!9991 = !DILocation(line: 2746, column: 5, scope: !1513)
!9992 = !DILocation(line: 2749, column: 5, scope: !1513)
!9993 = !DILocation(line: 2749, column: 10, scope: !9994)
!9994 = !DILexicalBlockFile(scope: !1532, file: !457, discriminator: 1)
!9995 = !DILocation(line: 2749, column: 20, scope: !1532)
!9996 = !DILocation(line: 2749, column: 51, scope: !1532)
!9997 = !DILocation(line: 2749, column: 62, scope: !1535)
!9998 = !DILocation(line: 2749, column: 78, scope: !1535)
!9999 = !DILocation(line: 2749, column: 62, scope: !1532)
!10000 = !DILocation(line: 2749, column: 93, scope: !10001)
!10001 = !DILexicalBlockFile(scope: !1535, file: !457, discriminator: 2)
!10002 = !DILocation(line: 2749, column: 98, scope: !10003)
!10003 = !DILexicalBlockFile(scope: !1534, file: !457, discriminator: 4)
!10004 = !DILocation(line: 2749, column: 108, scope: !1534)
!10005 = !DILocation(line: 2749, column: 138, scope: !1534)
!10006 = !DILocation(line: 2749, column: 164, scope: !10007)
!10007 = distinct !DILexicalBlock(scope: !1534, file: !457, line: 2749, column: 161)
!10008 = !DILocation(line: 2749, column: 181, scope: !10007)
!10009 = !DILocation(line: 2749, column: 161, scope: !10007)
!10010 = !DILocation(line: 2749, column: 191, scope: !10007)
!10011 = !DILocation(line: 2749, column: 161, scope: !1534)
!10012 = !DILocation(line: 2749, column: 161, scope: !10013)
!10013 = !DILexicalBlockFile(scope: !1534, file: !457, discriminator: 5)
!10014 = !DILocation(line: 2749, column: 222, scope: !10015)
!10015 = !DILexicalBlockFile(scope: !10007, file: !457, discriminator: 6)
!10016 = !DILocation(line: 2749, column: 240, scope: !10007)
!10017 = !DILocation(line: 2749, column: 250, scope: !10007)
!10018 = !DILocation(line: 2749, column: 275, scope: !10007)
!10019 = !DILocation(line: 2749, column: 206, scope: !10007)
!10020 = !DILocation(line: 2749, column: 294, scope: !10021)
!10021 = !DILexicalBlockFile(scope: !1535, file: !457, discriminator: 7)
!10022 = !DILocation(line: 2749, column: 294, scope: !1534)
!10023 = !DILocation(line: 2749, column: 294, scope: !10024)
!10024 = !DILexicalBlockFile(scope: !1534, file: !457, discriminator: 8)
!10025 = !DILocation(line: 2749, column: 294, scope: !10026)
!10026 = !DILexicalBlockFile(scope: !1534, file: !457, discriminator: 9)
!10027 = !DILocation(line: 2749, column: 307, scope: !10028)
!10028 = !DILexicalBlockFile(scope: !10029, file: !457, discriminator: 10)
!10029 = !DILexicalBlockFile(scope: !1513, file: !457, discriminator: 3)
!10030 = !DILocation(line: 2749, column: 307, scope: !1532)
!10031 = !DILocation(line: 2749, column: 307, scope: !10032)
!10032 = !DILexicalBlockFile(scope: !1532, file: !457, discriminator: 11)
!10033 = !DILocation(line: 2750, column: 24, scope: !1513)
!10034 = !DILocation(line: 2750, column: 5, scope: !1513)
!10035 = !DILocation(line: 2751, column: 5, scope: !1513)
!10036 = !DILocation(line: 2752, column: 1, scope: !1513)
!10037 = !DILocation(line: 2757, column: 32, scope: !1536)
!10038 = !DILocation(line: 2759, column: 5, scope: !1536)
!10039 = !DILocation(line: 2759, column: 16, scope: !1536)
!10040 = !DILocation(line: 2760, column: 12, scope: !10041)
!10041 = distinct !DILexicalBlock(scope: !1536, file: !457, line: 2760, column: 5)
!10042 = !DILocation(line: 2760, column: 10, scope: !10041)
!10043 = !DILocation(line: 2760, column: 23, scope: !10044)
!10044 = !DILexicalBlockFile(scope: !10045, file: !457, discriminator: 2)
!10045 = !DILexicalBlockFile(scope: !10046, file: !457, discriminator: 1)
!10046 = distinct !DILexicalBlock(scope: !10041, file: !457, line: 2760, column: 5)
!10047 = !DILocation(line: 2760, column: 17, scope: !10046)
!10048 = !DILocation(line: 2760, column: 26, scope: !10046)
!10049 = !DILocation(line: 2760, column: 5, scope: !10041)
!10050 = !DILocation(line: 2761, column: 26, scope: !10051)
!10051 = distinct !DILexicalBlock(scope: !10046, file: !457, line: 2760, column: 46)
!10052 = !DILocation(line: 2761, column: 20, scope: !10051)
!10053 = !DILocation(line: 2761, column: 9, scope: !10051)
!10054 = !DILocation(line: 2762, column: 5, scope: !10051)
!10055 = !DILocation(line: 2760, column: 41, scope: !10046)
!10056 = !DILocation(line: 2760, column: 5, scope: !10046)
!10057 = !DILocation(line: 2763, column: 23, scope: !1536)
!10058 = !DILocation(line: 2763, column: 16, scope: !1536)
!10059 = !DILocation(line: 2763, column: 5, scope: !1536)
!10060 = !DILocation(line: 2764, column: 1, scope: !1536)
!10061 = !DILocation(line: 2455, column: 23, scope: !1759)
!10062 = !DILocation(line: 2455, column: 40, scope: !1759)
!10063 = !DILocation(line: 2457, column: 5, scope: !1759)
!10064 = !DILocation(line: 2457, column: 15, scope: !1759)
!10065 = !DILocation(line: 2457, column: 42, scope: !1759)
!10066 = !DILocation(line: 2457, column: 23, scope: !1759)
!10067 = !DILocation(line: 2458, column: 9, scope: !10068)
!10068 = distinct !DILexicalBlock(scope: !1759, file: !457, line: 2458, column: 9)
!10069 = !DILocation(line: 2458, column: 15, scope: !10068)
!10070 = !DILocation(line: 2458, column: 9, scope: !1759)
!10071 = !DILocation(line: 2460, column: 14, scope: !10072)
!10072 = distinct !DILexicalBlock(scope: !10073, file: !457, line: 2460, column: 13)
!10073 = distinct !DILexicalBlock(scope: !10068, file: !457, line: 2458, column: 30)
!10074 = !DILocation(line: 2460, column: 13, scope: !10073)
!10075 = !DILocation(line: 2461, column: 29, scope: !10072)
!10076 = !DILocation(line: 2461, column: 46, scope: !10072)
!10077 = !DILocation(line: 2461, column: 13, scope: !10072)
!10078 = !DILocation(line: 2462, column: 9, scope: !10073)
!10079 = !DILocation(line: 2464, column: 5, scope: !1759)
!10080 = !DILocation(line: 2464, column: 10, scope: !10081)
!10081 = !DILexicalBlockFile(scope: !1765, file: !457, discriminator: 1)
!10082 = !DILocation(line: 2464, column: 20, scope: !1765)
!10083 = !DILocation(line: 2464, column: 50, scope: !1765)
!10084 = !DILocation(line: 2464, column: 66, scope: !10085)
!10085 = distinct !DILexicalBlock(scope: !1765, file: !457, line: 2464, column: 63)
!10086 = !DILocation(line: 2464, column: 83, scope: !10085)
!10087 = !DILocation(line: 2464, column: 63, scope: !10085)
!10088 = !DILocation(line: 2464, column: 93, scope: !10085)
!10089 = !DILocation(line: 2464, column: 63, scope: !1765)
!10090 = !DILocation(line: 2464, column: 63, scope: !10091)
!10091 = !DILexicalBlockFile(scope: !1765, file: !457, discriminator: 2)
!10092 = !DILocation(line: 2464, column: 124, scope: !10093)
!10093 = !DILexicalBlockFile(scope: !10085, file: !457, discriminator: 3)
!10094 = !DILocation(line: 2464, column: 142, scope: !10085)
!10095 = !DILocation(line: 2464, column: 152, scope: !10085)
!10096 = !DILocation(line: 2464, column: 177, scope: !10085)
!10097 = !DILocation(line: 2464, column: 108, scope: !10085)
!10098 = !DILocation(line: 2464, column: 196, scope: !10099)
!10099 = !DILexicalBlockFile(scope: !1759, file: !457, discriminator: 4)
!10100 = !DILocation(line: 2464, column: 196, scope: !1765)
!10101 = !DILocation(line: 2464, column: 196, scope: !10102)
!10102 = !DILexicalBlockFile(scope: !1765, file: !457, discriminator: 5)
!10103 = !DILocation(line: 2465, column: 5, scope: !1759)
!10104 = !DILocation(line: 2466, column: 1, scope: !1759)
!10105 = !DILocation(line: 2418, column: 31, scope: !1792)
!10106 = !DILocation(line: 2418, column: 50, scope: !1792)
!10107 = !DILocation(line: 2420, column: 5, scope: !1792)
!10108 = !DILocation(line: 2420, column: 15, scope: !1792)
!10109 = !DILocation(line: 2421, column: 5, scope: !1792)
!10110 = !DILocation(line: 2421, column: 16, scope: !1792)
!10111 = !DILocation(line: 2421, column: 19, scope: !1792)
!10112 = !DILocation(line: 2422, column: 5, scope: !1792)
!10113 = !DILocation(line: 2422, column: 9, scope: !1792)
!10114 = !DILocation(line: 2424, column: 5, scope: !1792)
!10115 = !DILocation(line: 2424, column: 5, scope: !10116)
!10116 = !DILexicalBlockFile(scope: !1792, file: !457, discriminator: 1)
!10117 = !DILocation(line: 2425, column: 13, scope: !10118)
!10118 = distinct !DILexicalBlock(scope: !1804, file: !457, line: 2425, column: 13)
!10119 = !DILocation(line: 2425, column: 24, scope: !10118)
!10120 = !DILocation(line: 2425, column: 21, scope: !10118)
!10121 = !DILocation(line: 2425, column: 13, scope: !1804)
!10122 = !DILocation(line: 2426, column: 13, scope: !10118)
!10123 = !DILocation(line: 2427, column: 36, scope: !1804)
!10124 = !DILocation(line: 2427, column: 17, scope: !1804)
!10125 = !DILocation(line: 2427, column: 15, scope: !1804)
!10126 = !DILocation(line: 2428, column: 13, scope: !10127)
!10127 = distinct !DILexicalBlock(scope: !1804, file: !457, line: 2428, column: 13)
!10128 = !DILocation(line: 2428, column: 19, scope: !10127)
!10129 = !DILocation(line: 2428, column: 13, scope: !1804)
!10130 = !DILocation(line: 2429, column: 17, scope: !10131)
!10131 = distinct !DILexicalBlock(scope: !10132, file: !457, line: 2429, column: 17)
!10132 = distinct !DILexicalBlock(scope: !10127, file: !457, line: 2428, column: 34)
!10133 = !DILocation(line: 2429, column: 17, scope: !10132)
!10134 = !DILocation(line: 2430, column: 17, scope: !10131)
!10135 = !DILocation(line: 2431, column: 13, scope: !10132)
!10136 = !DILocation(line: 2433, column: 30, scope: !1804)
!10137 = !DILocation(line: 2433, column: 15, scope: !1804)
!10138 = !DILocation(line: 2433, column: 39, scope: !1804)
!10139 = !DILocation(line: 2433, column: 11, scope: !1804)
!10140 = !DILocation(line: 2434, column: 13, scope: !1803)
!10141 = !DILocation(line: 2434, column: 15, scope: !1803)
!10142 = !DILocation(line: 2434, column: 13, scope: !1804)
!10143 = !DILocation(line: 2435, column: 13, scope: !1802)
!10144 = !DILocation(line: 2435, column: 18, scope: !10145)
!10145 = !DILexicalBlockFile(scope: !1801, file: !457, discriminator: 1)
!10146 = !DILocation(line: 2435, column: 28, scope: !1801)
!10147 = !DILocation(line: 2435, column: 58, scope: !1801)
!10148 = !DILocation(line: 2435, column: 74, scope: !10149)
!10149 = distinct !DILexicalBlock(scope: !1801, file: !457, line: 2435, column: 71)
!10150 = !DILocation(line: 2435, column: 91, scope: !10149)
!10151 = !DILocation(line: 2435, column: 71, scope: !10149)
!10152 = !DILocation(line: 2435, column: 101, scope: !10149)
!10153 = !DILocation(line: 2435, column: 71, scope: !1801)
!10154 = !DILocation(line: 2435, column: 71, scope: !10155)
!10155 = !DILexicalBlockFile(scope: !1801, file: !457, discriminator: 2)
!10156 = !DILocation(line: 2435, column: 132, scope: !10157)
!10157 = !DILexicalBlockFile(scope: !10149, file: !457, discriminator: 3)
!10158 = !DILocation(line: 2435, column: 150, scope: !10149)
!10159 = !DILocation(line: 2435, column: 160, scope: !10149)
!10160 = !DILocation(line: 2435, column: 185, scope: !10149)
!10161 = !DILocation(line: 2435, column: 116, scope: !10149)
!10162 = !DILocation(line: 2435, column: 204, scope: !10163)
!10163 = !DILexicalBlockFile(scope: !1802, file: !457, discriminator: 4)
!10164 = !DILocation(line: 2435, column: 204, scope: !1801)
!10165 = !DILocation(line: 2435, column: 204, scope: !10166)
!10166 = !DILexicalBlockFile(scope: !1801, file: !457, discriminator: 5)
!10167 = !DILocation(line: 2436, column: 13, scope: !1802)
!10168 = !DILocation(line: 2439, column: 13, scope: !1808)
!10169 = !DILocation(line: 2439, column: 15, scope: !1808)
!10170 = !DILocation(line: 2439, column: 13, scope: !1804)
!10171 = !DILocation(line: 2440, column: 43, scope: !1807)
!10172 = !DILocation(line: 2440, column: 25, scope: !1807)
!10173 = !DILocation(line: 2440, column: 52, scope: !1807)
!10174 = !DILocation(line: 2440, column: 24, scope: !1807)
!10175 = !DILocation(line: 2440, column: 21, scope: !1807)
!10176 = !DILocation(line: 2441, column: 13, scope: !1807)
!10177 = !DILocation(line: 2441, column: 18, scope: !10178)
!10178 = !DILexicalBlockFile(scope: !1806, file: !457, discriminator: 1)
!10179 = !DILocation(line: 2441, column: 28, scope: !1806)
!10180 = !DILocation(line: 2441, column: 58, scope: !1806)
!10181 = !DILocation(line: 2441, column: 74, scope: !10182)
!10182 = distinct !DILexicalBlock(scope: !1806, file: !457, line: 2441, column: 71)
!10183 = !DILocation(line: 2441, column: 91, scope: !10182)
!10184 = !DILocation(line: 2441, column: 71, scope: !10182)
!10185 = !DILocation(line: 2441, column: 101, scope: !10182)
!10186 = !DILocation(line: 2441, column: 71, scope: !1806)
!10187 = !DILocation(line: 2441, column: 71, scope: !10188)
!10188 = !DILexicalBlockFile(scope: !1806, file: !457, discriminator: 2)
!10189 = !DILocation(line: 2441, column: 132, scope: !10190)
!10190 = !DILexicalBlockFile(scope: !10182, file: !457, discriminator: 3)
!10191 = !DILocation(line: 2441, column: 150, scope: !10182)
!10192 = !DILocation(line: 2441, column: 160, scope: !10182)
!10193 = !DILocation(line: 2441, column: 185, scope: !10182)
!10194 = !DILocation(line: 2441, column: 116, scope: !10182)
!10195 = !DILocation(line: 2441, column: 204, scope: !10196)
!10196 = !DILexicalBlockFile(scope: !1807, file: !457, discriminator: 4)
!10197 = !DILocation(line: 2441, column: 204, scope: !1806)
!10198 = !DILocation(line: 2441, column: 204, scope: !10199)
!10199 = !DILexicalBlockFile(scope: !1806, file: !457, discriminator: 5)
!10200 = !DILocation(line: 2442, column: 13, scope: !1807)
!10201 = !DILocation(line: 2444, column: 16, scope: !10202)
!10202 = distinct !DILexicalBlock(scope: !1804, file: !457, line: 2444, column: 9)
!10203 = !DILocation(line: 2444, column: 14, scope: !10202)
!10204 = !DILocation(line: 2444, column: 21, scope: !10205)
!10205 = !DILexicalBlockFile(scope: !10206, file: !457, discriminator: 2)
!10206 = !DILexicalBlockFile(scope: !10207, file: !457, discriminator: 1)
!10207 = distinct !DILexicalBlock(scope: !10202, file: !457, line: 2444, column: 9)
!10208 = !DILocation(line: 2444, column: 25, scope: !10207)
!10209 = !DILocation(line: 2444, column: 23, scope: !10207)
!10210 = !DILocation(line: 2444, column: 9, scope: !10202)
!10211 = !DILocation(line: 2445, column: 74, scope: !10212)
!10212 = distinct !DILexicalBlock(scope: !10207, file: !457, line: 2444, column: 33)
!10213 = !DILocation(line: 2445, column: 57, scope: !10212)
!10214 = !DILocation(line: 2445, column: 39, scope: !10212)
!10215 = !DILocation(line: 2445, column: 66, scope: !10212)
!10216 = !DILocation(line: 2445, column: 38, scope: !10212)
!10217 = !DILocation(line: 2445, column: 79, scope: !10212)
!10218 = !DILocation(line: 2445, column: 17, scope: !10212)
!10219 = !DILocation(line: 2445, column: 15, scope: !10212)
!10220 = !DILocation(line: 2446, column: 17, scope: !10221)
!10221 = distinct !DILexicalBlock(scope: !10212, file: !457, line: 2446, column: 17)
!10222 = !DILocation(line: 2446, column: 19, scope: !10221)
!10223 = !DILocation(line: 2446, column: 17, scope: !10212)
!10224 = !DILocation(line: 2447, column: 17, scope: !10221)
!10225 = !DILocation(line: 2448, column: 9, scope: !10212)
!10226 = !DILocation(line: 2444, column: 29, scope: !10207)
!10227 = !DILocation(line: 2444, column: 9, scope: !10207)
!10228 = !DILocation(line: 2449, column: 9, scope: !1804)
!10229 = !DILocation(line: 2449, column: 14, scope: !10230)
!10230 = !DILexicalBlockFile(scope: !1810, file: !457, discriminator: 1)
!10231 = !DILocation(line: 2449, column: 24, scope: !1810)
!10232 = !DILocation(line: 2449, column: 54, scope: !1810)
!10233 = !DILocation(line: 2449, column: 70, scope: !10234)
!10234 = distinct !DILexicalBlock(scope: !1810, file: !457, line: 2449, column: 67)
!10235 = !DILocation(line: 2449, column: 87, scope: !10234)
!10236 = !DILocation(line: 2449, column: 67, scope: !10234)
!10237 = !DILocation(line: 2449, column: 97, scope: !10234)
!10238 = !DILocation(line: 2449, column: 67, scope: !1810)
!10239 = !DILocation(line: 2449, column: 67, scope: !10240)
!10240 = !DILexicalBlockFile(scope: !1810, file: !457, discriminator: 2)
!10241 = !DILocation(line: 2449, column: 128, scope: !10242)
!10242 = !DILexicalBlockFile(scope: !10234, file: !457, discriminator: 3)
!10243 = !DILocation(line: 2449, column: 146, scope: !10234)
!10244 = !DILocation(line: 2449, column: 156, scope: !10234)
!10245 = !DILocation(line: 2449, column: 181, scope: !10234)
!10246 = !DILocation(line: 2449, column: 112, scope: !10234)
!10247 = !DILocation(line: 2449, column: 200, scope: !10248)
!10248 = !DILexicalBlockFile(scope: !1804, file: !457, discriminator: 4)
!10249 = !DILocation(line: 2449, column: 200, scope: !1810)
!10250 = !DILocation(line: 2449, column: 200, scope: !10251)
!10251 = !DILexicalBlockFile(scope: !1810, file: !457, discriminator: 5)
!10252 = !DILocation(line: 2450, column: 16, scope: !1804)
!10253 = !DILocation(line: 2450, column: 9, scope: !1804)
!10254 = !DILocation(line: 2452, column: 1, scope: !1792)
!10255 = !DILocation(line: 2396, column: 30, scope: !1766)
!10256 = !DILocation(line: 2399, column: 5, scope: !1766)
!10257 = !DILocation(line: 2399, column: 15, scope: !1766)
!10258 = !DILocation(line: 2401, column: 5, scope: !1766)
!10259 = !DILocation(line: 2401, column: 10, scope: !1771)
!10260 = !DILocation(line: 2401, column: 24, scope: !1771)
!10261 = !DILocation(line: 2401, column: 65, scope: !10262)
!10262 = !DILexicalBlockFile(scope: !1774, file: !457, discriminator: 1)
!10263 = !DILocation(line: 2401, column: 101, scope: !1774)
!10264 = !DILocation(line: 2401, column: 139, scope: !1774)
!10265 = !DILocation(line: 2401, column: 170, scope: !1774)
!10266 = !DILocation(line: 2401, column: 178, scope: !1774)
!10267 = !DILocation(line: 2401, column: 207, scope: !1774)
!10268 = !DILocation(line: 2401, column: 224, scope: !1774)
!10269 = !DILocation(line: 2401, column: 236, scope: !1774)
!10270 = !DILocation(line: 2401, column: 244, scope: !1774)
!10271 = !DILocation(line: 2401, column: 261, scope: !1774)
!10272 = !DILocation(line: 2401, column: 321, scope: !1774)
!10273 = !DILocation(line: 2401, column: 333, scope: !1774)
!10274 = !DILocation(line: 2401, column: 295, scope: !1774)
!10275 = !DILocation(line: 2401, column: 350, scope: !1774)
!10276 = !DILocation(line: 2401, column: 452, scope: !10277)
!10277 = !DILexicalBlockFile(scope: !10278, file: !457, discriminator: 5)
!10278 = !DILexicalBlockFile(scope: !10279, file: !457, discriminator: 4)
!10279 = !DILexicalBlockFile(scope: !10280, file: !457, discriminator: 3)
!10280 = distinct !DILexicalBlock(scope: !1774, file: !457, line: 2401, column: 357)
!10281 = !DILocation(line: 2401, column: 503, scope: !10280)
!10282 = !DILocation(line: 2401, column: 519, scope: !10283)
!10283 = !DILexicalBlockFile(scope: !10280, file: !457, discriminator: 2)
!10284 = !DILocation(line: 2401, column: 538, scope: !10285)
!10285 = !DILexicalBlockFile(scope: !10286, file: !457, discriminator: 7)
!10286 = !DILexicalBlockFile(scope: !1774, file: !457, discriminator: 6)
!10287 = !DILocation(line: 2401, column: 537, scope: !1774)
!10288 = !DILocation(line: 2401, column: 535, scope: !1774)
!10289 = !DILocation(line: 2401, column: 560, scope: !1774)
!10290 = !DILocation(line: 2401, column: 662, scope: !10291)
!10291 = !DILexicalBlockFile(scope: !10292, file: !457, discriminator: 11)
!10292 = !DILexicalBlockFile(scope: !10293, file: !457, discriminator: 10)
!10293 = !DILexicalBlockFile(scope: !10294, file: !457, discriminator: 9)
!10294 = distinct !DILexicalBlock(scope: !1774, file: !457, line: 2401, column: 567)
!10295 = !DILocation(line: 2401, column: 713, scope: !10294)
!10296 = !DILocation(line: 2401, column: 729, scope: !10297)
!10297 = !DILexicalBlockFile(scope: !10294, file: !457, discriminator: 8)
!10298 = !DILocation(line: 2401, column: 740, scope: !10299)
!10299 = !DILexicalBlockFile(scope: !10300, file: !457, discriminator: 13)
!10300 = !DILexicalBlockFile(scope: !1774, file: !457, discriminator: 12)
!10301 = !DILocation(line: 2401, column: 736, scope: !10294)
!10302 = !DILocation(line: 2401, column: 748, scope: !1771)
!10303 = !DILocation(line: 2401, column: 748, scope: !1774)
!10304 = !DILocation(line: 2401, column: 32, scope: !1771)
!10305 = !DILocation(line: 2401, column: 753, scope: !1771)
!10306 = !{!7827, !1831, i64 37}
!10307 = !DILocation(line: 2401, column: 807, scope: !1779)
!10308 = !DILocation(line: 2401, column: 843, scope: !1779)
!10309 = !DILocation(line: 2401, column: 881, scope: !1779)
!10310 = !DILocation(line: 2401, column: 912, scope: !1779)
!10311 = !DILocation(line: 2401, column: 920, scope: !1779)
!10312 = !DILocation(line: 2401, column: 949, scope: !1779)
!10313 = !DILocation(line: 2401, column: 966, scope: !1779)
!10314 = !DILocation(line: 2401, column: 978, scope: !1779)
!10315 = !DILocation(line: 2401, column: 986, scope: !1779)
!10316 = !DILocation(line: 2401, column: 1003, scope: !1779)
!10317 = !DILocation(line: 2401, column: 1063, scope: !1779)
!10318 = !DILocation(line: 2401, column: 1075, scope: !1779)
!10319 = !DILocation(line: 2401, column: 1037, scope: !1779)
!10320 = !DILocation(line: 2401, column: 1092, scope: !1779)
!10321 = !DILocation(line: 2401, column: 1194, scope: !10322)
!10322 = !DILexicalBlockFile(scope: !10323, file: !457, discriminator: 17)
!10323 = !DILexicalBlockFile(scope: !10324, file: !457, discriminator: 16)
!10324 = !DILexicalBlockFile(scope: !10325, file: !457, discriminator: 15)
!10325 = distinct !DILexicalBlock(scope: !1779, file: !457, line: 2401, column: 1099)
!10326 = !DILocation(line: 2401, column: 1245, scope: !10325)
!10327 = !DILocation(line: 2401, column: 1261, scope: !10328)
!10328 = !DILexicalBlockFile(scope: !10325, file: !457, discriminator: 14)
!10329 = !DILocation(line: 2401, column: 1280, scope: !10330)
!10330 = !DILexicalBlockFile(scope: !10331, file: !457, discriminator: 19)
!10331 = !DILexicalBlockFile(scope: !1779, file: !457, discriminator: 18)
!10332 = !DILocation(line: 2401, column: 1279, scope: !1779)
!10333 = !DILocation(line: 2401, column: 1277, scope: !1779)
!10334 = !DILocation(line: 2401, column: 1302, scope: !1779)
!10335 = !DILocation(line: 2401, column: 1404, scope: !10336)
!10336 = !DILexicalBlockFile(scope: !10337, file: !457, discriminator: 23)
!10337 = !DILexicalBlockFile(scope: !10338, file: !457, discriminator: 22)
!10338 = !DILexicalBlockFile(scope: !10339, file: !457, discriminator: 21)
!10339 = distinct !DILexicalBlock(scope: !1779, file: !457, line: 2401, column: 1309)
!10340 = !DILocation(line: 2401, column: 1455, scope: !10339)
!10341 = !DILocation(line: 2401, column: 1471, scope: !10342)
!10342 = !DILexicalBlockFile(scope: !10339, file: !457, discriminator: 20)
!10343 = !DILocation(line: 2401, column: 1482, scope: !10344)
!10344 = !DILexicalBlockFile(scope: !10345, file: !457, discriminator: 25)
!10345 = !DILexicalBlockFile(scope: !1779, file: !457, discriminator: 24)
!10346 = !DILocation(line: 2401, column: 1478, scope: !10339)
!10347 = !DILocation(line: 2401, column: 1490, scope: !1771)
!10348 = !DILocation(line: 2401, column: 1490, scope: !1779)
!10349 = !DILocation(line: 2401, column: 774, scope: !1771)
!10350 = !DILocation(line: 2401, column: 1495, scope: !1771)
!10351 = !DILocation(line: 2401, column: 1514, scope: !1771)
!10352 = !DILocation(line: 2402, column: 33, scope: !1771)
!10353 = !DILocation(line: 2402, column: 13, scope: !1771)
!10354 = !DILocation(line: 2402, column: 11, scope: !1771)
!10355 = !DILocation(line: 2403, column: 748, scope: !1771)
!10356 = !DILocation(line: 2403, column: 39, scope: !1784)
!10357 = !DILocation(line: 2403, column: 75, scope: !1784)
!10358 = !DILocation(line: 2403, column: 113, scope: !1784)
!10359 = !DILocation(line: 2403, column: 144, scope: !1784)
!10360 = !DILocation(line: 2403, column: 152, scope: !1784)
!10361 = !DILocation(line: 2403, column: 181, scope: !1784)
!10362 = !DILocation(line: 2403, column: 198, scope: !1784)
!10363 = !DILocation(line: 2403, column: 210, scope: !1784)
!10364 = !DILocation(line: 2403, column: 218, scope: !1784)
!10365 = !DILocation(line: 2403, column: 235, scope: !1784)
!10366 = !DILocation(line: 2403, column: 295, scope: !1784)
!10367 = !DILocation(line: 2403, column: 307, scope: !1784)
!10368 = !DILocation(line: 2403, column: 269, scope: !1784)
!10369 = !DILocation(line: 2403, column: 324, scope: !1784)
!10370 = !DILocation(line: 2403, column: 426, scope: !10371)
!10371 = !DILexicalBlockFile(scope: !10372, file: !457, discriminator: 4)
!10372 = !DILexicalBlockFile(scope: !10373, file: !457, discriminator: 3)
!10373 = !DILexicalBlockFile(scope: !10374, file: !457, discriminator: 2)
!10374 = distinct !DILexicalBlock(scope: !1784, file: !457, line: 2403, column: 331)
!10375 = !DILocation(line: 2403, column: 477, scope: !10374)
!10376 = !DILocation(line: 2403, column: 493, scope: !10377)
!10377 = !DILexicalBlockFile(scope: !10374, file: !457, discriminator: 1)
!10378 = !DILocation(line: 2403, column: 512, scope: !10379)
!10379 = !DILexicalBlockFile(scope: !10380, file: !457, discriminator: 6)
!10380 = !DILexicalBlockFile(scope: !1784, file: !457, discriminator: 5)
!10381 = !DILocation(line: 2403, column: 511, scope: !1784)
!10382 = !DILocation(line: 2403, column: 509, scope: !1784)
!10383 = !DILocation(line: 2403, column: 534, scope: !1784)
!10384 = !DILocation(line: 2403, column: 636, scope: !10385)
!10385 = !DILexicalBlockFile(scope: !10386, file: !457, discriminator: 10)
!10386 = !DILexicalBlockFile(scope: !10387, file: !457, discriminator: 9)
!10387 = !DILexicalBlockFile(scope: !10388, file: !457, discriminator: 8)
!10388 = distinct !DILexicalBlock(scope: !1784, file: !457, line: 2403, column: 541)
!10389 = !DILocation(line: 2403, column: 687, scope: !10388)
!10390 = !DILocation(line: 2403, column: 703, scope: !10391)
!10391 = !DILexicalBlockFile(scope: !10388, file: !457, discriminator: 7)
!10392 = !DILocation(line: 2403, column: 714, scope: !10393)
!10393 = !DILexicalBlockFile(scope: !10394, file: !457, discriminator: 12)
!10394 = !DILexicalBlockFile(scope: !1784, file: !457, discriminator: 11)
!10395 = !DILocation(line: 2403, column: 710, scope: !10388)
!10396 = !DILocation(line: 2403, column: 722, scope: !1771)
!10397 = !DILocation(line: 2403, column: 722, scope: !1784)
!10398 = !DILocation(line: 2403, column: 6, scope: !1771)
!10399 = !DILocation(line: 2403, column: 727, scope: !1771)
!10400 = !DILocation(line: 2403, column: 746, scope: !1771)
!10401 = !DILocation(line: 2403, column: 754, scope: !1766)
!10402 = !DILocation(line: 2403, column: 754, scope: !1771)
!10403 = !DILocation(line: 2403, column: 754, scope: !10404)
!10404 = !DILexicalBlockFile(scope: !1771, file: !457, discriminator: 13)
!10405 = !DILocation(line: 2404, column: 9, scope: !10406)
!10406 = distinct !DILexicalBlock(scope: !1766, file: !457, line: 2404, column: 9)
!10407 = !DILocation(line: 2404, column: 15, scope: !10406)
!10408 = !DILocation(line: 2404, column: 9, scope: !1766)
!10409 = !DILocation(line: 2405, column: 36, scope: !10410)
!10410 = distinct !DILexicalBlock(scope: !10411, file: !457, line: 2405, column: 13)
!10411 = distinct !DILexicalBlock(scope: !10406, file: !457, line: 2404, column: 30)
!10412 = !DILocation(line: 2405, column: 13, scope: !10410)
!10413 = !DILocation(line: 2405, column: 13, scope: !10411)
!10414 = !DILocation(line: 2406, column: 13, scope: !10410)
!10415 = !DILocation(line: 2407, column: 9, scope: !10411)
!10416 = !DILocation(line: 2409, column: 27, scope: !1791)
!10417 = !DILocation(line: 2409, column: 36, scope: !1791)
!10418 = !DILocation(line: 2409, column: 47, scope: !1791)
!10419 = !DILocation(line: 2409, column: 56, scope: !1791)
!10420 = !DILocation(line: 2409, column: 73, scope: !1791)
!10421 = !DILocation(line: 2409, column: 9, scope: !1766)
!10422 = !DILocation(line: 2410, column: 9, scope: !1790)
!10423 = !DILocation(line: 2410, column: 14, scope: !10424)
!10424 = !DILexicalBlockFile(scope: !1789, file: !457, discriminator: 1)
!10425 = !DILocation(line: 2410, column: 24, scope: !1789)
!10426 = !DILocation(line: 2410, column: 54, scope: !1789)
!10427 = !DILocation(line: 2410, column: 70, scope: !10428)
!10428 = distinct !DILexicalBlock(scope: !1789, file: !457, line: 2410, column: 67)
!10429 = !DILocation(line: 2410, column: 87, scope: !10428)
!10430 = !DILocation(line: 2410, column: 67, scope: !10428)
!10431 = !DILocation(line: 2410, column: 97, scope: !10428)
!10432 = !DILocation(line: 2410, column: 67, scope: !1789)
!10433 = !DILocation(line: 2410, column: 67, scope: !10434)
!10434 = !DILexicalBlockFile(scope: !1789, file: !457, discriminator: 2)
!10435 = !DILocation(line: 2410, column: 128, scope: !10436)
!10436 = !DILexicalBlockFile(scope: !10428, file: !457, discriminator: 3)
!10437 = !DILocation(line: 2410, column: 146, scope: !10428)
!10438 = !DILocation(line: 2410, column: 156, scope: !10428)
!10439 = !DILocation(line: 2410, column: 181, scope: !10428)
!10440 = !DILocation(line: 2410, column: 112, scope: !10428)
!10441 = !DILocation(line: 2410, column: 200, scope: !10442)
!10442 = !DILexicalBlockFile(scope: !1790, file: !457, discriminator: 4)
!10443 = !DILocation(line: 2410, column: 200, scope: !1789)
!10444 = !DILocation(line: 2410, column: 200, scope: !10445)
!10445 = !DILexicalBlockFile(scope: !1789, file: !457, discriminator: 5)
!10446 = !DILocation(line: 2411, column: 9, scope: !1790)
!10447 = !DILocation(line: 2413, column: 12, scope: !1766)
!10448 = !DILocation(line: 2413, column: 5, scope: !1766)
!10449 = !DILocation(line: 2414, column: 1, scope: !1766)
