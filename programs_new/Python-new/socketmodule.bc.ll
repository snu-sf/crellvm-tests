; ModuleID = 'programs_new/Python-new/socketmodule.bc.ll'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._typeobject = type { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }
%struct.PyVarObject = type { %struct._object, i64 }
%struct._object = type { i64, %struct._typeobject* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.PyNumberMethods = type { %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)* }
%struct.PySequenceMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)*, i8*, i32 (%struct._object*, i64, %struct._object*)*, i8*, i32 (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)* }
%struct.PyMappingMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)* }
%struct.PyBufferProcs = type { i32 (%struct._object*, %struct.bufferinfo*, i32)*, void (%struct._object*, %struct.bufferinfo*)* }
%struct.bufferinfo = type { i8*, %struct._object*, i64, i64, i32, i32, i8*, i64*, i64*, i64*, i8* }
%struct.PyMethodDef = type { i8*, %struct._object* (%struct._object*, %struct._object*)*, i32, i8* }
%struct.PyMemberDef = type { i8*, i32, i64, i32, i8* }
%struct.PyGetSetDef = type { i8*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, %struct._object*, i8*)*, i8*, i8* }
%struct.PyModuleDef = type { %struct.PyModuleDef_Base, i8*, i8*, i64, %struct.PyMethodDef*, i32 (%struct._object*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, void (i8*)* }
%struct.PyModuleDef_Base = type { %struct._object, %struct._object* ()*, i64, %struct._object* }
%struct.PySocketModule_APIObject = type { %struct._typeobject*, %struct._object*, %struct._object* }
%struct._longobject = type { %struct.PyVarObject, [1 x i32] }
%struct._Py_Identifier = type { %struct._Py_Identifier*, i8*, %struct._object* }
%struct.PySocketSockObject = type { %struct._object, i32, i32, i32, i32, %struct._object* ()*, double }
%struct._ts = type { %struct._ts*, %struct._ts*, %struct._is*, %struct._frame*, i32, i8, i8, i32, i32, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, %struct._object*, i64, i32, %struct._object*, void (i8*)*, i8* }
%struct._is = type { %struct._is*, %struct._ts*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, i32, i32, %struct._object* }
%struct._frame = type opaque
%union.sock_addr = type { %struct.sockaddr_storage }
%struct.sockaddr_storage = type { i16, i64, [112 x i8] }
%struct.timeval = type { i64, i64 }
%union.__SOCKADDR_ARG = type { %struct.sockaddr* }
%struct.sockaddr = type { i16, [14 x i8] }
%union.__CONST_SOCKADDR_ARG = type { %struct.sockaddr* }
%struct.PyBytesObject = type { %struct.PyVarObject, i64, [1 x i8] }
%struct.iovec = type { i8*, i64 }
%struct.PyListObject = type { %struct.PyVarObject, %struct._object**, i64 }
%struct.PyTupleObject = type { %struct.PyVarObject, [1 x %struct._object*] }
%struct.msghdr = type { i8*, i32, %struct.iovec*, i64, i8*, i64, i32 }
%struct.cmsginfo = type { i32, i32, %struct.bufferinfo }
%struct.cmsghdr = type { i64, i32, i32, [0 x i8] }
%struct.pollfd = type { i32, i16, i16 }
%struct.sockaddr_in = type { i16, i16, %struct.in_addr, [8 x i8] }
%struct.in_addr = type { i32 }
%struct.sockaddr_un = type { i16, [108 x i8] }
%struct.sockaddr_nl = type { i16, i16, i32, i32 }
%struct.sockaddr_in6 = type { i16, i16, i32, %struct.in6_addr, i32 }
%struct.in6_addr = type { %union.anon }
%union.anon = type { [4 x i32] }
%struct.sockaddr_ll = type { i16, i16, i32, i16, i8, i8, [8 x i8] }
%struct.ifreq = type { %union.anon.1, %union.anon.2 }
%union.anon.1 = type { [16 x i8] }
%union.anon.2 = type { %struct.ifmap }
%struct.ifmap = type { i64, i64, i16, i8, i8, i8 }
%struct.sockaddr_tipc = type { i16, i8, i8, %union.anon.3 }
%union.anon.3 = type { %struct.tipc_name_seq }
%struct.tipc_name_seq = type { i32, i32, i32 }
%struct.sockaddr_can = type { i16, i32, %union.anon.0 }
%union.anon.0 = type { %struct.anon }
%struct.anon = type { i32, i32 }
%struct.anon.4 = type { %struct.tipc_name, i32 }
%struct.tipc_name = type { i32, i32 }
%struct.tipc_portid = type { i32, i32 }
%struct.addrinfo = type { i32, i32, i32, i32, i32, %struct.sockaddr*, i8*, %struct.addrinfo* }
%struct.hostent = type { i8*, i8**, i32, i32, i8** }
%struct.servent = type { i8*, i8**, i32, i8* }
%struct.protoent = type { i8*, i8**, i32 }
%struct.if_nameindex = type { i32, i8* }

@PyType_Type = external global %struct._typeobject, align 8
@sock_type = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.271, i32 0, i32 0), i64 48, i64 0, void (%struct._object*)* bitcast (void (%struct.PySocketSockObject*)* @sock_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*)* @sock_repr to %struct._object* (%struct._object*)*), %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 263168, i8* getelementptr inbounds ([2086 x i8], [2086 x i8]* @sock_doc, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([27 x %struct.PyMethodDef], [27 x %struct.PyMethodDef]* @sock_methods, i32 0, i32 0), %struct.PyMemberDef* getelementptr inbounds ([5 x %struct.PyMemberDef], [5 x %struct.PyMemberDef]* @sock_memberlist, i32 0, i32 0), %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* @sock_initobj, %struct._object* (%struct._typeobject*, i64)* @PyType_GenericAlloc, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @sock_new, void (i8*)* @PyObject_Free, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@socketmodule = internal global %struct.PyModuleDef { %struct.PyModuleDef_Base { %struct._object { i64 1, %struct._typeobject* null }, %struct._object* ()* null, i64 0, %struct._object* null }, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.397, i32 0, i32 0), i8* getelementptr inbounds ([87 x i8], [87 x i8]* @socket_doc, i32 0, i32 0), i64 -1, %struct.PyMethodDef* getelementptr inbounds ([28 x %struct.PyMethodDef], [28 x %struct.PyMethodDef]* @socket_methods, i32 0, i32 0), i32 (%struct._object*)* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, void (i8*)* null }, align 8
@PyExc_OSError = external global %struct._object*, align 8
@PySocketModuleAPI = internal global %struct.PySocketModule_APIObject { %struct._typeobject* @sock_type, %struct._object* null, %struct._object* null }, align 8
@.str = private unnamed_addr constant [6 x i8] c"error\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"socket.herror\00", align 1
@socket_herror = internal global %struct._object* null, align 8
@.str.2 = private unnamed_addr constant [7 x i8] c"herror\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"socket.gaierror\00", align 1
@socket_gaierror = internal global %struct._object* null, align 8
@.str.4 = private unnamed_addr constant [9 x i8] c"gaierror\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"socket.timeout\00", align 1
@socket_timeout = internal global %struct._object* null, align 8
@.str.6 = private unnamed_addr constant [8 x i8] c"timeout\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"SocketType\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@_Py_TrueStruct = external global %struct._longobject, align 8
@.str.9 = private unnamed_addr constant [9 x i8] c"has_ipv6\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"CAPI\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"_socket.CAPI\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c"AF_UNSPEC\00", align 1
@.str.13 = private unnamed_addr constant [8 x i8] c"AF_INET\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"AF_INET6\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"AF_UNIX\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"AF_AX25\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"AF_IPX\00", align 1
@.str.18 = private unnamed_addr constant [13 x i8] c"AF_APPLETALK\00", align 1
@.str.19 = private unnamed_addr constant [10 x i8] c"AF_NETROM\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"AF_BRIDGE\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"AF_ATMPVC\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"AF_X25\00", align 1
@.str.23 = private unnamed_addr constant [8 x i8] c"AF_ROSE\00", align 1
@.str.24 = private unnamed_addr constant [10 x i8] c"AF_DECnet\00", align 1
@.str.25 = private unnamed_addr constant [11 x i8] c"AF_NETBEUI\00", align 1
@.str.26 = private unnamed_addr constant [12 x i8] c"AF_SECURITY\00", align 1
@.str.27 = private unnamed_addr constant [7 x i8] c"AF_KEY\00", align 1
@.str.28 = private unnamed_addr constant [11 x i8] c"AF_NETLINK\00", align 1
@.str.29 = private unnamed_addr constant [14 x i8] c"NETLINK_ROUTE\00", align 1
@.str.30 = private unnamed_addr constant [17 x i8] c"NETLINK_USERSOCK\00", align 1
@.str.31 = private unnamed_addr constant [17 x i8] c"NETLINK_FIREWALL\00", align 1
@.str.32 = private unnamed_addr constant [14 x i8] c"NETLINK_NFLOG\00", align 1
@.str.33 = private unnamed_addr constant [13 x i8] c"NETLINK_XFRM\00", align 1
@.str.34 = private unnamed_addr constant [15 x i8] c"NETLINK_IP6_FW\00", align 1
@.str.35 = private unnamed_addr constant [16 x i8] c"NETLINK_DNRTMSG\00", align 1
@.str.36 = private unnamed_addr constant [9 x i8] c"AF_ROUTE\00", align 1
@.str.37 = private unnamed_addr constant [7 x i8] c"AF_ASH\00", align 1
@.str.38 = private unnamed_addr constant [10 x i8] c"AF_ECONET\00", align 1
@.str.39 = private unnamed_addr constant [10 x i8] c"AF_ATMSVC\00", align 1
@.str.40 = private unnamed_addr constant [7 x i8] c"AF_SNA\00", align 1
@.str.41 = private unnamed_addr constant [8 x i8] c"AF_IRDA\00", align 1
@.str.42 = private unnamed_addr constant [9 x i8] c"AF_PPPOX\00", align 1
@.str.43 = private unnamed_addr constant [11 x i8] c"AF_WANPIPE\00", align 1
@.str.44 = private unnamed_addr constant [7 x i8] c"AF_LLC\00", align 1
@.str.45 = private unnamed_addr constant [7 x i8] c"AF_CAN\00", align 1
@.str.46 = private unnamed_addr constant [7 x i8] c"PF_CAN\00", align 1
@.str.47 = private unnamed_addr constant [7 x i8] c"AF_RDS\00", align 1
@.str.48 = private unnamed_addr constant [7 x i8] c"PF_RDS\00", align 1
@.str.49 = private unnamed_addr constant [10 x i8] c"AF_PACKET\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"PF_PACKET\00", align 1
@.str.51 = private unnamed_addr constant [12 x i8] c"PACKET_HOST\00", align 1
@.str.52 = private unnamed_addr constant [17 x i8] c"PACKET_BROADCAST\00", align 1
@.str.53 = private unnamed_addr constant [17 x i8] c"PACKET_MULTICAST\00", align 1
@.str.54 = private unnamed_addr constant [17 x i8] c"PACKET_OTHERHOST\00", align 1
@.str.55 = private unnamed_addr constant [16 x i8] c"PACKET_OUTGOING\00", align 1
@.str.56 = private unnamed_addr constant [16 x i8] c"PACKET_LOOPBACK\00", align 1
@.str.57 = private unnamed_addr constant [17 x i8] c"PACKET_FASTROUTE\00", align 1
@.str.58 = private unnamed_addr constant [8 x i8] c"AF_TIPC\00", align 1
@.str.59 = private unnamed_addr constant [18 x i8] c"TIPC_ADDR_NAMESEQ\00", align 1
@.str.60 = private unnamed_addr constant [15 x i8] c"TIPC_ADDR_NAME\00", align 1
@.str.61 = private unnamed_addr constant [13 x i8] c"TIPC_ADDR_ID\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c"TIPC_ZONE_SCOPE\00", align 1
@.str.63 = private unnamed_addr constant [19 x i8] c"TIPC_CLUSTER_SCOPE\00", align 1
@.str.64 = private unnamed_addr constant [16 x i8] c"TIPC_NODE_SCOPE\00", align 1
@.str.65 = private unnamed_addr constant [9 x i8] c"SOL_TIPC\00", align 1
@.str.66 = private unnamed_addr constant [16 x i8] c"TIPC_IMPORTANCE\00", align 1
@.str.67 = private unnamed_addr constant [19 x i8] c"TIPC_SRC_DROPPABLE\00", align 1
@.str.68 = private unnamed_addr constant [20 x i8] c"TIPC_DEST_DROPPABLE\00", align 1
@.str.69 = private unnamed_addr constant [18 x i8] c"TIPC_CONN_TIMEOUT\00", align 1
@.str.70 = private unnamed_addr constant [20 x i8] c"TIPC_LOW_IMPORTANCE\00", align 1
@.str.71 = private unnamed_addr constant [23 x i8] c"TIPC_MEDIUM_IMPORTANCE\00", align 1
@.str.72 = private unnamed_addr constant [21 x i8] c"TIPC_HIGH_IMPORTANCE\00", align 1
@.str.73 = private unnamed_addr constant [25 x i8] c"TIPC_CRITICAL_IMPORTANCE\00", align 1
@.str.74 = private unnamed_addr constant [15 x i8] c"TIPC_SUB_PORTS\00", align 1
@.str.75 = private unnamed_addr constant [17 x i8] c"TIPC_SUB_SERVICE\00", align 1
@.str.76 = private unnamed_addr constant [16 x i8] c"TIPC_SUB_CANCEL\00", align 1
@.str.77 = private unnamed_addr constant [18 x i8] c"TIPC_WAIT_FOREVER\00", align 1
@.str.78 = private unnamed_addr constant [15 x i8] c"TIPC_PUBLISHED\00", align 1
@.str.79 = private unnamed_addr constant [15 x i8] c"TIPC_WITHDRAWN\00", align 1
@.str.80 = private unnamed_addr constant [20 x i8] c"TIPC_SUBSCR_TIMEOUT\00", align 1
@.str.81 = private unnamed_addr constant [13 x i8] c"TIPC_CFG_SRV\00", align 1
@.str.82 = private unnamed_addr constant [13 x i8] c"TIPC_TOP_SRV\00", align 1
@.str.83 = private unnamed_addr constant [12 x i8] c"SOCK_STREAM\00", align 1
@.str.84 = private unnamed_addr constant [11 x i8] c"SOCK_DGRAM\00", align 1
@.str.85 = private unnamed_addr constant [9 x i8] c"SOCK_RAW\00", align 1
@.str.86 = private unnamed_addr constant [15 x i8] c"SOCK_SEQPACKET\00", align 1
@.str.87 = private unnamed_addr constant [9 x i8] c"SOCK_RDM\00", align 1
@.str.88 = private unnamed_addr constant [13 x i8] c"SOCK_CLOEXEC\00", align 1
@.str.89 = private unnamed_addr constant [14 x i8] c"SOCK_NONBLOCK\00", align 1
@.str.90 = private unnamed_addr constant [9 x i8] c"SO_DEBUG\00", align 1
@.str.91 = private unnamed_addr constant [14 x i8] c"SO_ACCEPTCONN\00", align 1
@.str.92 = private unnamed_addr constant [13 x i8] c"SO_REUSEADDR\00", align 1
@.str.93 = private unnamed_addr constant [13 x i8] c"SO_KEEPALIVE\00", align 1
@.str.94 = private unnamed_addr constant [13 x i8] c"SO_DONTROUTE\00", align 1
@.str.95 = private unnamed_addr constant [13 x i8] c"SO_BROADCAST\00", align 1
@.str.96 = private unnamed_addr constant [10 x i8] c"SO_LINGER\00", align 1
@.str.97 = private unnamed_addr constant [13 x i8] c"SO_OOBINLINE\00", align 1
@.str.98 = private unnamed_addr constant [13 x i8] c"SO_REUSEPORT\00", align 1
@.str.99 = private unnamed_addr constant [10 x i8] c"SO_SNDBUF\00", align 1
@.str.100 = private unnamed_addr constant [10 x i8] c"SO_RCVBUF\00", align 1
@.str.101 = private unnamed_addr constant [12 x i8] c"SO_SNDLOWAT\00", align 1
@.str.102 = private unnamed_addr constant [12 x i8] c"SO_RCVLOWAT\00", align 1
@.str.103 = private unnamed_addr constant [12 x i8] c"SO_SNDTIMEO\00", align 1
@.str.104 = private unnamed_addr constant [12 x i8] c"SO_RCVTIMEO\00", align 1
@.str.105 = private unnamed_addr constant [9 x i8] c"SO_ERROR\00", align 1
@.str.106 = private unnamed_addr constant [8 x i8] c"SO_TYPE\00", align 1
@.str.107 = private unnamed_addr constant [12 x i8] c"SO_PASSCRED\00", align 1
@.str.108 = private unnamed_addr constant [12 x i8] c"SO_PEERCRED\00", align 1
@.str.109 = private unnamed_addr constant [16 x i8] c"SO_BINDTODEVICE\00", align 1
@.str.110 = private unnamed_addr constant [12 x i8] c"SO_PRIORITY\00", align 1
@.str.111 = private unnamed_addr constant [10 x i8] c"SOMAXCONN\00", align 1
@.str.112 = private unnamed_addr constant [11 x i8] c"SCM_RIGHTS\00", align 1
@.str.113 = private unnamed_addr constant [16 x i8] c"SCM_CREDENTIALS\00", align 1
@.str.114 = private unnamed_addr constant [8 x i8] c"MSG_OOB\00", align 1
@.str.115 = private unnamed_addr constant [9 x i8] c"MSG_PEEK\00", align 1
@.str.116 = private unnamed_addr constant [14 x i8] c"MSG_DONTROUTE\00", align 1
@.str.117 = private unnamed_addr constant [13 x i8] c"MSG_DONTWAIT\00", align 1
@.str.118 = private unnamed_addr constant [8 x i8] c"MSG_EOR\00", align 1
@.str.119 = private unnamed_addr constant [10 x i8] c"MSG_TRUNC\00", align 1
@.str.120 = private unnamed_addr constant [11 x i8] c"MSG_CTRUNC\00", align 1
@.str.121 = private unnamed_addr constant [12 x i8] c"MSG_WAITALL\00", align 1
@.str.122 = private unnamed_addr constant [13 x i8] c"MSG_NOSIGNAL\00", align 1
@.str.123 = private unnamed_addr constant [17 x i8] c"MSG_CMSG_CLOEXEC\00", align 1
@.str.124 = private unnamed_addr constant [13 x i8] c"MSG_ERRQUEUE\00", align 1
@.str.125 = private unnamed_addr constant [12 x i8] c"MSG_CONFIRM\00", align 1
@.str.126 = private unnamed_addr constant [9 x i8] c"MSG_MORE\00", align 1
@.str.127 = private unnamed_addr constant [11 x i8] c"SOL_SOCKET\00", align 1
@.str.128 = private unnamed_addr constant [7 x i8] c"SOL_IP\00", align 1
@.str.129 = private unnamed_addr constant [8 x i8] c"SOL_TCP\00", align 1
@.str.130 = private unnamed_addr constant [8 x i8] c"SOL_UDP\00", align 1
@.str.131 = private unnamed_addr constant [13 x i8] c"SOL_CAN_BASE\00", align 1
@.str.132 = private unnamed_addr constant [12 x i8] c"SOL_CAN_RAW\00", align 1
@.str.133 = private unnamed_addr constant [8 x i8] c"CAN_RAW\00", align 1
@.str.134 = private unnamed_addr constant [13 x i8] c"CAN_EFF_FLAG\00", align 1
@.str.135 = private unnamed_addr constant [13 x i8] c"CAN_RTR_FLAG\00", align 1
@.str.136 = private unnamed_addr constant [13 x i8] c"CAN_ERR_FLAG\00", align 1
@.str.137 = private unnamed_addr constant [13 x i8] c"CAN_SFF_MASK\00", align 1
@.str.138 = private unnamed_addr constant [13 x i8] c"CAN_EFF_MASK\00", align 1
@.str.139 = private unnamed_addr constant [13 x i8] c"CAN_ERR_MASK\00", align 1
@.str.140 = private unnamed_addr constant [15 x i8] c"CAN_RAW_FILTER\00", align 1
@.str.141 = private unnamed_addr constant [19 x i8] c"CAN_RAW_ERR_FILTER\00", align 1
@.str.142 = private unnamed_addr constant [17 x i8] c"CAN_RAW_LOOPBACK\00", align 1
@.str.143 = private unnamed_addr constant [22 x i8] c"CAN_RAW_RECV_OWN_MSGS\00", align 1
@.str.144 = private unnamed_addr constant [8 x i8] c"CAN_BCM\00", align 1
@.str.145 = private unnamed_addr constant [17 x i8] c"CAN_BCM_TX_SETUP\00", align 1
@.str.146 = private unnamed_addr constant [18 x i8] c"CAN_BCM_TX_DELETE\00", align 1
@.str.147 = private unnamed_addr constant [16 x i8] c"CAN_BCM_TX_READ\00", align 1
@.str.148 = private unnamed_addr constant [16 x i8] c"CAN_BCM_TX_SEND\00", align 1
@.str.149 = private unnamed_addr constant [17 x i8] c"CAN_BCM_RX_SETUP\00", align 1
@.str.150 = private unnamed_addr constant [18 x i8] c"CAN_BCM_RX_DELETE\00", align 1
@.str.151 = private unnamed_addr constant [16 x i8] c"CAN_BCM_RX_READ\00", align 1
@.str.152 = private unnamed_addr constant [18 x i8] c"CAN_BCM_TX_STATUS\00", align 1
@.str.153 = private unnamed_addr constant [19 x i8] c"CAN_BCM_TX_EXPIRED\00", align 1
@.str.154 = private unnamed_addr constant [18 x i8] c"CAN_BCM_RX_STATUS\00", align 1
@.str.155 = private unnamed_addr constant [19 x i8] c"CAN_BCM_RX_TIMEOUT\00", align 1
@.str.156 = private unnamed_addr constant [19 x i8] c"CAN_BCM_RX_CHANGED\00", align 1
@.str.157 = private unnamed_addr constant [11 x i8] c"IPPROTO_IP\00", align 1
@.str.158 = private unnamed_addr constant [16 x i8] c"IPPROTO_HOPOPTS\00", align 1
@.str.159 = private unnamed_addr constant [13 x i8] c"IPPROTO_ICMP\00", align 1
@.str.160 = private unnamed_addr constant [13 x i8] c"IPPROTO_IGMP\00", align 1
@.str.161 = private unnamed_addr constant [13 x i8] c"IPPROTO_IPV6\00", align 1
@.str.162 = private unnamed_addr constant [13 x i8] c"IPPROTO_IPIP\00", align 1
@.str.163 = private unnamed_addr constant [12 x i8] c"IPPROTO_TCP\00", align 1
@.str.164 = private unnamed_addr constant [12 x i8] c"IPPROTO_EGP\00", align 1
@.str.165 = private unnamed_addr constant [12 x i8] c"IPPROTO_PUP\00", align 1
@.str.166 = private unnamed_addr constant [12 x i8] c"IPPROTO_UDP\00", align 1
@.str.167 = private unnamed_addr constant [12 x i8] c"IPPROTO_IDP\00", align 1
@.str.168 = private unnamed_addr constant [11 x i8] c"IPPROTO_TP\00", align 1
@.str.169 = private unnamed_addr constant [16 x i8] c"IPPROTO_ROUTING\00", align 1
@.str.170 = private unnamed_addr constant [17 x i8] c"IPPROTO_FRAGMENT\00", align 1
@.str.171 = private unnamed_addr constant [13 x i8] c"IPPROTO_RSVP\00", align 1
@.str.172 = private unnamed_addr constant [12 x i8] c"IPPROTO_GRE\00", align 1
@.str.173 = private unnamed_addr constant [12 x i8] c"IPPROTO_ESP\00", align 1
@.str.174 = private unnamed_addr constant [11 x i8] c"IPPROTO_AH\00", align 1
@.str.175 = private unnamed_addr constant [15 x i8] c"IPPROTO_ICMPV6\00", align 1
@.str.176 = private unnamed_addr constant [13 x i8] c"IPPROTO_NONE\00", align 1
@.str.177 = private unnamed_addr constant [16 x i8] c"IPPROTO_DSTOPTS\00", align 1
@.str.178 = private unnamed_addr constant [12 x i8] c"IPPROTO_PIM\00", align 1
@.str.179 = private unnamed_addr constant [13 x i8] c"IPPROTO_SCTP\00", align 1
@.str.180 = private unnamed_addr constant [12 x i8] c"IPPROTO_RAW\00", align 1
@.str.181 = private unnamed_addr constant [16 x i8] c"IPPORT_RESERVED\00", align 1
@.str.182 = private unnamed_addr constant [20 x i8] c"IPPORT_USERRESERVED\00", align 1
@.str.183 = private unnamed_addr constant [11 x i8] c"INADDR_ANY\00", align 1
@.str.184 = private unnamed_addr constant [17 x i8] c"INADDR_BROADCAST\00", align 1
@.str.185 = private unnamed_addr constant [16 x i8] c"INADDR_LOOPBACK\00", align 1
@.str.186 = private unnamed_addr constant [20 x i8] c"INADDR_UNSPEC_GROUP\00", align 1
@.str.187 = private unnamed_addr constant [22 x i8] c"INADDR_ALLHOSTS_GROUP\00", align 1
@.str.188 = private unnamed_addr constant [23 x i8] c"INADDR_MAX_LOCAL_GROUP\00", align 1
@.str.189 = private unnamed_addr constant [12 x i8] c"INADDR_NONE\00", align 1
@.str.190 = private unnamed_addr constant [11 x i8] c"IP_OPTIONS\00", align 1
@.str.191 = private unnamed_addr constant [11 x i8] c"IP_HDRINCL\00", align 1
@.str.192 = private unnamed_addr constant [7 x i8] c"IP_TOS\00", align 1
@.str.193 = private unnamed_addr constant [7 x i8] c"IP_TTL\00", align 1
@.str.194 = private unnamed_addr constant [12 x i8] c"IP_RECVOPTS\00", align 1
@.str.195 = private unnamed_addr constant [15 x i8] c"IP_RECVRETOPTS\00", align 1
@.str.196 = private unnamed_addr constant [11 x i8] c"IP_RETOPTS\00", align 1
@.str.197 = private unnamed_addr constant [16 x i8] c"IP_MULTICAST_IF\00", align 1
@.str.198 = private unnamed_addr constant [17 x i8] c"IP_MULTICAST_TTL\00", align 1
@.str.199 = private unnamed_addr constant [18 x i8] c"IP_MULTICAST_LOOP\00", align 1
@.str.200 = private unnamed_addr constant [18 x i8] c"IP_ADD_MEMBERSHIP\00", align 1
@.str.201 = private unnamed_addr constant [19 x i8] c"IP_DROP_MEMBERSHIP\00", align 1
@.str.202 = private unnamed_addr constant [25 x i8] c"IP_DEFAULT_MULTICAST_TTL\00", align 1
@.str.203 = private unnamed_addr constant [26 x i8] c"IP_DEFAULT_MULTICAST_LOOP\00", align 1
@.str.204 = private unnamed_addr constant [19 x i8] c"IP_MAX_MEMBERSHIPS\00", align 1
@.str.205 = private unnamed_addr constant [15 x i8] c"IP_TRANSPARENT\00", align 1
@.str.206 = private unnamed_addr constant [16 x i8] c"IPV6_JOIN_GROUP\00", align 1
@.str.207 = private unnamed_addr constant [17 x i8] c"IPV6_LEAVE_GROUP\00", align 1
@.str.208 = private unnamed_addr constant [20 x i8] c"IPV6_MULTICAST_HOPS\00", align 1
@.str.209 = private unnamed_addr constant [18 x i8] c"IPV6_MULTICAST_IF\00", align 1
@.str.210 = private unnamed_addr constant [20 x i8] c"IPV6_MULTICAST_LOOP\00", align 1
@.str.211 = private unnamed_addr constant [18 x i8] c"IPV6_UNICAST_HOPS\00", align 1
@.str.212 = private unnamed_addr constant [12 x i8] c"IPV6_V6ONLY\00", align 1
@.str.213 = private unnamed_addr constant [14 x i8] c"IPV6_CHECKSUM\00", align 1
@.str.214 = private unnamed_addr constant [13 x i8] c"IPV6_DSTOPTS\00", align 1
@.str.215 = private unnamed_addr constant [14 x i8] c"IPV6_HOPLIMIT\00", align 1
@.str.216 = private unnamed_addr constant [13 x i8] c"IPV6_HOPOPTS\00", align 1
@.str.217 = private unnamed_addr constant [13 x i8] c"IPV6_NEXTHOP\00", align 1
@.str.218 = private unnamed_addr constant [13 x i8] c"IPV6_PKTINFO\00", align 1
@.str.219 = private unnamed_addr constant [17 x i8] c"IPV6_RECVDSTOPTS\00", align 1
@.str.220 = private unnamed_addr constant [18 x i8] c"IPV6_RECVHOPLIMIT\00", align 1
@.str.221 = private unnamed_addr constant [17 x i8] c"IPV6_RECVHOPOPTS\00", align 1
@.str.222 = private unnamed_addr constant [17 x i8] c"IPV6_RECVPKTINFO\00", align 1
@.str.223 = private unnamed_addr constant [15 x i8] c"IPV6_RECVRTHDR\00", align 1
@.str.224 = private unnamed_addr constant [16 x i8] c"IPV6_RECVTCLASS\00", align 1
@.str.225 = private unnamed_addr constant [11 x i8] c"IPV6_RTHDR\00", align 1
@.str.226 = private unnamed_addr constant [18 x i8] c"IPV6_RTHDRDSTOPTS\00", align 1
@.str.227 = private unnamed_addr constant [18 x i8] c"IPV6_RTHDR_TYPE_0\00", align 1
@.str.228 = private unnamed_addr constant [12 x i8] c"IPV6_TCLASS\00", align 1
@.str.229 = private unnamed_addr constant [12 x i8] c"TCP_NODELAY\00", align 1
@.str.230 = private unnamed_addr constant [11 x i8] c"TCP_MAXSEG\00", align 1
@.str.231 = private unnamed_addr constant [9 x i8] c"TCP_CORK\00", align 1
@.str.232 = private unnamed_addr constant [13 x i8] c"TCP_KEEPIDLE\00", align 1
@.str.233 = private unnamed_addr constant [14 x i8] c"TCP_KEEPINTVL\00", align 1
@.str.234 = private unnamed_addr constant [12 x i8] c"TCP_KEEPCNT\00", align 1
@.str.235 = private unnamed_addr constant [11 x i8] c"TCP_SYNCNT\00", align 1
@.str.236 = private unnamed_addr constant [12 x i8] c"TCP_LINGER2\00", align 1
@.str.237 = private unnamed_addr constant [17 x i8] c"TCP_DEFER_ACCEPT\00", align 1
@.str.238 = private unnamed_addr constant [17 x i8] c"TCP_WINDOW_CLAMP\00", align 1
@.str.239 = private unnamed_addr constant [9 x i8] c"TCP_INFO\00", align 1
@.str.240 = private unnamed_addr constant [13 x i8] c"TCP_QUICKACK\00", align 1
@.str.241 = private unnamed_addr constant [13 x i8] c"TCP_FASTOPEN\00", align 1
@.str.242 = private unnamed_addr constant [15 x i8] c"EAI_ADDRFAMILY\00", align 1
@.str.243 = private unnamed_addr constant [10 x i8] c"EAI_AGAIN\00", align 1
@.str.244 = private unnamed_addr constant [13 x i8] c"EAI_BADFLAGS\00", align 1
@.str.245 = private unnamed_addr constant [9 x i8] c"EAI_FAIL\00", align 1
@.str.246 = private unnamed_addr constant [11 x i8] c"EAI_FAMILY\00", align 1
@.str.247 = private unnamed_addr constant [11 x i8] c"EAI_MEMORY\00", align 1
@.str.248 = private unnamed_addr constant [11 x i8] c"EAI_NODATA\00", align 1
@.str.249 = private unnamed_addr constant [11 x i8] c"EAI_NONAME\00", align 1
@.str.250 = private unnamed_addr constant [13 x i8] c"EAI_OVERFLOW\00", align 1
@.str.251 = private unnamed_addr constant [12 x i8] c"EAI_SERVICE\00", align 1
@.str.252 = private unnamed_addr constant [13 x i8] c"EAI_SOCKTYPE\00", align 1
@.str.253 = private unnamed_addr constant [11 x i8] c"EAI_SYSTEM\00", align 1
@.str.254 = private unnamed_addr constant [11 x i8] c"AI_PASSIVE\00", align 1
@.str.255 = private unnamed_addr constant [13 x i8] c"AI_CANONNAME\00", align 1
@.str.256 = private unnamed_addr constant [15 x i8] c"AI_NUMERICHOST\00", align 1
@.str.257 = private unnamed_addr constant [15 x i8] c"AI_NUMERICSERV\00", align 1
@.str.258 = private unnamed_addr constant [7 x i8] c"AI_ALL\00", align 1
@.str.259 = private unnamed_addr constant [14 x i8] c"AI_ADDRCONFIG\00", align 1
@.str.260 = private unnamed_addr constant [12 x i8] c"AI_V4MAPPED\00", align 1
@.str.261 = private unnamed_addr constant [11 x i8] c"NI_MAXHOST\00", align 1
@.str.262 = private unnamed_addr constant [11 x i8] c"NI_MAXSERV\00", align 1
@.str.263 = private unnamed_addr constant [10 x i8] c"NI_NOFQDN\00", align 1
@.str.264 = private unnamed_addr constant [15 x i8] c"NI_NUMERICHOST\00", align 1
@.str.265 = private unnamed_addr constant [12 x i8] c"NI_NAMEREQD\00", align 1
@.str.266 = private unnamed_addr constant [15 x i8] c"NI_NUMERICSERV\00", align 1
@.str.267 = private unnamed_addr constant [9 x i8] c"NI_DGRAM\00", align 1
@.str.268 = private unnamed_addr constant [8 x i8] c"SHUT_RD\00", align 1
@.str.269 = private unnamed_addr constant [8 x i8] c"SHUT_WR\00", align 1
@.str.270 = private unnamed_addr constant [10 x i8] c"SHUT_RDWR\00", align 1
@.str.271 = private unnamed_addr constant [15 x i8] c"_socket.socket\00", align 1
@sock_doc = internal global [2086 x i8] c"socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None) -> socket object\0A\0AOpen a socket of the given type.  The family argument specifies the\0Aaddress family; it defaults to AF_INET.  The type argument specifies\0Awhether this is a stream (SOCK_STREAM, this is the default)\0Aor datagram (SOCK_DGRAM) socket.  The protocol argument defaults to 0,\0Aspecifying the default protocol.  Keyword arguments are accepted.\0AThe socket is created as non-inheritable.\0A\0AA socket object represents one endpoint of a network connection.\0A\0AMethods of socket objects (keyword arguments not allowed):\0A\0A_accept() -- accept connection, returning new socket fd and client address\0Abind(addr) -- bind the socket to a local address\0Aclose() -- close the socket\0Aconnect(addr) -- connect the socket to a remote address\0Aconnect_ex(addr) -- connect, return an error code instead of an exception\0Adup() -- return a new socket fd duplicated from fileno()\0Afileno() -- return underlying file descriptor\0Agetpeername() -- return remote address [*]\0Agetsockname() -- return local address\0Agetsockopt(level, optname[, buflen]) -- get socket options\0Agettimeout() -- return timeout or None\0Alisten(n) -- start listening for incoming connections\0Arecv(buflen[, flags]) -- receive data\0Arecv_into(buffer[, nbytes[, flags]]) -- receive data (into a buffer)\0Arecvfrom(buflen[, flags]) -- receive data and sender's address\0Arecvfrom_into(buffer[, nbytes, [, flags])\0A  -- receive data and sender's address (into a buffer)\0Asendall(data[, flags]) -- send all data\0Asend(data[, flags]) -- send data, may not send all of it\0Asendto(data[, flags], addr) -- send data to a given address\0Asetblocking(0 | 1) -- set or clear the blocking I/O flag\0Asetsockopt(level, optname, value) -- set socket options\0Asettimeout(None | float) -- set or clear the timeout\0Ashutdown(how) -- shut down traffic in one or both directions\0Aif_nameindex() -- return all network interface indices and names\0Aif_nametoindex(name) -- return the corresponding interface index\0Aif_indextoname(index) -- return the corresponding interface name\0A\0A [*] not available on all platforms!\00", align 16
@sock_methods = internal global [27 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.274, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*)* @sock_accept to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([229 x i8], [229 x i8]* @accept_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.275, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_bind to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([226 x i8], [226 x i8]* @bind_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.276, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*)* @sock_close to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @close_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.277, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_connect to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([111 x i8], [111 x i8]* @connect_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.278, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_connect_ex to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([159 x i8], [159 x i8]* @connect_ex_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.279, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*)* @sock_detach to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([217 x i8], [217 x i8]* @detach_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.280, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*)* @sock_fileno to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @fileno_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.281, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*)* @sock_getpeername to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([136 x i8], [136 x i8]* @getpeername_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.282, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*)* @sock_getsockname to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([135 x i8], [135 x i8]* @getsockname_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.283, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_getsockopt to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([230 x i8], [230 x i8]* @getsockopt_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.284, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_listen to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([241 x i8], [241 x i8]* @listen_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.285, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_recv to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([322 x i8], [322 x i8]* @recv_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.286, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*, %struct._object*)* @sock_recv_into to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([335 x i8], [335 x i8]* @recv_into_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.287, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_recvfrom to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @recvfrom_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.288, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*, %struct._object*)* @sock_recvfrom_into to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([153 x i8], [153 x i8]* @recvfrom_into_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.289, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_send to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([209 x i8], [209 x i8]* @send_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.290, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_sendall to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([241 x i8], [241 x i8]* @sendall_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.291, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_sendto to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @sendto_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.292, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_setblocking to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([192 x i8], [192 x i8]* @setblocking_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.293, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_settimeout to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([262 x i8], [262 x i8]* @settimeout_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.294, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*)* @sock_gettimeout to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([178 x i8], [178 x i8]* @gettimeout_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.295, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_setsockopt to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([155 x i8], [155 x i8]* @setsockopt_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.296, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_shutdown to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([160 x i8], [160 x i8]* @shutdown_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.297, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_recvmsg to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([1477 x i8], [1477 x i8]* @recvmsg_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.298, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_recvmsg_into to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([1787 x i8], [1787 x i8]* @recvmsg_into_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.299, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_sendmsg to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([886 x i8], [886 x i8]* @sendmsg_doc, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@sock_memberlist = internal global [5 x %struct.PyMemberDef] [%struct.PyMemberDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.388, i32 0, i32 0), i32 1, i64 20, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.389, i32 0, i32 0) }, %struct.PyMemberDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.390, i32 0, i32 0), i32 1, i64 24, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.391, i32 0, i32 0) }, %struct.PyMemberDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.392, i32 0, i32 0), i32 1, i64 28, i32 1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.393, i32 0, i32 0) }, %struct.PyMemberDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i32 4, i64 40, i32 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.394, i32 0, i32 0) }, %struct.PyMemberDef zeroinitializer], align 16
@PyExc_ResourceWarning = external global %struct._object*, align 8
@.str.272 = private unnamed_addr constant [12 x i8] c"unclosed %R\00", align 1
@PyExc_Warning = external global %struct._object*, align 8
@.str.273 = private unnamed_addr constant [54 x i8] c"<socket object, fd=%ld, family=%d, type=%d, proto=%d>\00", align 1
@.str.274 = private unnamed_addr constant [8 x i8] c"_accept\00", align 1
@accept_doc = internal global [229 x i8] c"_accept() -> (integer, address info)\0A\0AWait for an incoming connection.  Return a new socket file descriptor\0Arepresenting the connection, and the address of the client.\0AFor IP sockets, the address info is a pair (hostaddr, port).\00", align 16
@.str.275 = private unnamed_addr constant [5 x i8] c"bind\00", align 1
@bind_doc = internal global [226 x i8] c"bind(address)\0A\0ABind the socket to a local address.  For IP sockets, the address is a\0Apair (host, port); the host must refer to the local host. For raw packet\0Asockets the address is a tuple (ifname, proto [,pkttype [,hatype]])\00", align 16
@.str.276 = private unnamed_addr constant [6 x i8] c"close\00", align 1
@close_doc = internal global [63 x i8] c"close()\0A\0AClose the socket.  It cannot be used after this call.\00", align 16
@.str.277 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@connect_doc = internal global [111 x i8] c"connect(address)\0A\0AConnect the socket to a remote address.  For IP sockets, the address\0Ais a pair (host, port).\00", align 16
@.str.278 = private unnamed_addr constant [11 x i8] c"connect_ex\00", align 1
@connect_ex_doc = internal global [159 x i8] c"connect_ex(address) -> errno\0A\0AThis is like connect(address), but returns an error code (the errno value)\0Ainstead of raising an exception when an error occurs.\00", align 16
@.str.279 = private unnamed_addr constant [7 x i8] c"detach\00", align 1
@detach_doc = internal global [217 x i8] c"detach()\0A\0AClose the socket object without closing the underlying file descriptor.\0AThe object cannot be used after this call, but the file descriptor\0Acan be reused for other purposes.  The file descriptor is returned.\00", align 16
@.str.280 = private unnamed_addr constant [7 x i8] c"fileno\00", align 1
@fileno_doc = internal global [71 x i8] c"fileno() -> integer\0A\0AReturn the integer file descriptor of the socket.\00", align 16
@.str.281 = private unnamed_addr constant [12 x i8] c"getpeername\00", align 1
@getpeername_doc = internal global [136 x i8] c"getpeername() -> address info\0A\0AReturn the address of the remote endpoint.  For IP sockets, the address\0Ainfo is a pair (hostaddr, port).\00", align 16
@.str.282 = private unnamed_addr constant [12 x i8] c"getsockname\00", align 1
@getsockname_doc = internal global [135 x i8] c"getsockname() -> address info\0A\0AReturn the address of the local endpoint.  For IP sockets, the address\0Ainfo is a pair (hostaddr, port).\00", align 16
@.str.283 = private unnamed_addr constant [11 x i8] c"getsockopt\00", align 1
@getsockopt_doc = internal global [230 x i8] c"getsockopt(level, option[, buffersize]) -> value\0A\0AGet a socket option.  See the Unix manual for level and option.\0AIf a nonzero buffersize argument is given, the return value is a\0Astring of that length; otherwise it is an integer.\00", align 16
@.str.284 = private unnamed_addr constant [7 x i8] c"listen\00", align 1
@listen_doc = internal global [241 x i8] c"listen(backlog)\0A\0AEnable a server to accept connections.  The backlog argument must be at\0Aleast 0 (if it is lower, it is set to 0); it specifies the number of\0Aunaccepted connections that the system will allow before refusing new\0Aconnections.\00", align 16
@.str.285 = private unnamed_addr constant [5 x i8] c"recv\00", align 1
@recv_doc = internal global [322 x i8] c"recv(buffersize[, flags]) -> data\0A\0AReceive up to buffersize bytes from the socket.  For the optional flags\0Aargument, see the Unix manual.  When no data is available, block until\0Aat least one byte is available or until the remote end is closed.  When\0Athe remote end is closed and all data is read, return the empty string.\00", align 16
@.str.286 = private unnamed_addr constant [10 x i8] c"recv_into\00", align 1
@recv_into_doc = internal global [335 x i8] c"recv_into(buffer, [nbytes[, flags]]) -> nbytes_read\0A\0AA version of recv() that stores its data into a buffer rather than creating \0Aa new string.  Receive up to buffersize bytes from the socket.  If buffersize \0Ais not specified (or 0), receive up to the size available in the given buffer.\0A\0ASee recv() for documentation about the flags.\00", align 16
@.str.287 = private unnamed_addr constant [9 x i8] c"recvfrom\00", align 1
@recvfrom_doc = internal global [127 x i8] c"recvfrom(buffersize[, flags]) -> (data, address info)\0A\0ALike recv(buffersize, flags) but also return the sender's address info.\00", align 16
@.str.288 = private unnamed_addr constant [14 x i8] c"recvfrom_into\00", align 1
@recvfrom_into_doc = internal global [153 x i8] c"recvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)\0A\0ALike recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.\00", align 16
@.str.289 = private unnamed_addr constant [5 x i8] c"send\00", align 1
@send_doc = internal global [209 x i8] c"send(data[, flags]) -> count\0A\0ASend a data string to the socket.  For the optional flags\0Aargument, see the Unix manual.  Return the number of bytes\0Asent; this may be less than len(data) if the network is busy.\00", align 16
@.str.290 = private unnamed_addr constant [8 x i8] c"sendall\00", align 1
@sendall_doc = internal global [241 x i8] c"sendall(data[, flags])\0A\0ASend a data string to the socket.  For the optional flags\0Aargument, see the Unix manual.  This calls send() repeatedly\0Auntil all data is sent.  If an error occurs, it's impossible\0Ato tell how much data has been sent.\00", align 16
@.str.291 = private unnamed_addr constant [7 x i8] c"sendto\00", align 1
@sendto_doc = internal global [167 x i8] c"sendto(data[, flags], address) -> count\0A\0ALike send(data, flags) but allows specifying the destination address.\0AFor IP sockets, the address is a pair (hostaddr, port).\00", align 16
@.str.292 = private unnamed_addr constant [12 x i8] c"setblocking\00", align 1
@setblocking_doc = internal global [192 x i8] c"setblocking(flag)\0A\0ASet the socket to blocking (flag is true) or non-blocking (false).\0Asetblocking(True) is equivalent to settimeout(None);\0Asetblocking(False) is equivalent to settimeout(0.0).\00", align 16
@.str.293 = private unnamed_addr constant [11 x i8] c"settimeout\00", align 1
@settimeout_doc = internal global [262 x i8] c"settimeout(timeout)\0A\0ASet a timeout on socket operations.  'timeout' can be a float,\0Agiving in seconds, or None.  Setting a timeout of None disables\0Athe timeout feature and is equivalent to setblocking(1).\0ASetting a timeout of zero is the same as setblocking(0).\00", align 16
@.str.294 = private unnamed_addr constant [11 x i8] c"gettimeout\00", align 1
@gettimeout_doc = internal global [178 x i8] c"gettimeout() -> timeout\0A\0AReturns the timeout in seconds (float) associated with socket \0Aoperations. A timeout of None indicates that timeouts on socket \0Aoperations are disabled.\00", align 16
@.str.295 = private unnamed_addr constant [11 x i8] c"setsockopt\00", align 1
@setsockopt_doc = internal global [155 x i8] c"setsockopt(level, option, value)\0A\0ASet a socket option.  See the Unix manual for level and option.\0AThe value argument can either be an integer or a string.\00", align 16
@.str.296 = private unnamed_addr constant [9 x i8] c"shutdown\00", align 1
@shutdown_doc = internal global [160 x i8] c"shutdown(flag)\0A\0AShut down the reading side of the socket (flag == SHUT_RD), the writing side\0Aof the socket (flag == SHUT_WR), or both ends (flag == SHUT_RDWR).\00", align 16
@.str.297 = private unnamed_addr constant [8 x i8] c"recvmsg\00", align 1
@recvmsg_doc = internal global [1477 x i8] c"recvmsg(bufsize[, ancbufsize[, flags]]) -> (data, ancdata, msg_flags, address)\0A\0AReceive normal data (up to bufsize bytes) and ancillary data from the\0Asocket.  The ancbufsize argument sets the size in bytes of the\0Ainternal buffer used to receive the ancillary data; it defaults to 0,\0Ameaning that no ancillary data will be received.  Appropriate buffer\0Asizes for ancillary data can be calculated using CMSG_SPACE() or\0ACMSG_LEN(), and items which do not fit into the buffer might be\0Atruncated or discarded.  The flags argument defaults to 0 and has the\0Asame meaning as for recv().\0A\0AThe return value is a 4-tuple: (data, ancdata, msg_flags, address).\0AThe data item is a bytes object holding the non-ancillary data\0Areceived.  The ancdata item is a list of zero or more tuples\0A(cmsg_level, cmsg_type, cmsg_data) representing the ancillary data\0A(control messages) received: cmsg_level and cmsg_type are integers\0Aspecifying the protocol level and protocol-specific type respectively,\0Aand cmsg_data is a bytes object holding the associated data.  The\0Amsg_flags item is the bitwise OR of various flags indicating\0Aconditions on the received message; see your system documentation for\0Adetails.  If the receiving socket is unconnected, address is the\0Aaddress of the sending socket, if available; otherwise, its value is\0Aunspecified.\0A\0AIf recvmsg() raises an exception after the system call returns, it\0Awill first attempt to close any file descriptors received via the\0ASCM_RIGHTS mechanism.\00", align 16
@.str.298 = private unnamed_addr constant [13 x i8] c"recvmsg_into\00", align 1
@recvmsg_into_doc = internal global [1787 x i8] c"recvmsg_into(buffers[, ancbufsize[, flags]]) -> (nbytes, ancdata, msg_flags, address)\0A\0AReceive normal data and ancillary data from the socket, scattering the\0Anon-ancillary data into a series of buffers.  The buffers argument\0Amust be an iterable of objects that export writable buffers\0A(e.g. bytearray objects); these will be filled with successive chunks\0Aof the non-ancillary data until it has all been written or there are\0Ano more buffers.  The ancbufsize argument sets the size in bytes of\0Athe internal buffer used to receive the ancillary data; it defaults to\0A0, meaning that no ancillary data will be received.  Appropriate\0Abuffer sizes for ancillary data can be calculated using CMSG_SPACE()\0Aor CMSG_LEN(), and items which do not fit into the buffer might be\0Atruncated or discarded.  The flags argument defaults to 0 and has the\0Asame meaning as for recv().\0A\0AThe return value is a 4-tuple: (nbytes, ancdata, msg_flags, address).\0AThe nbytes item is the total number of bytes of non-ancillary data\0Awritten into the buffers.  The ancdata item is a list of zero or more\0Atuples (cmsg_level, cmsg_type, cmsg_data) representing the ancillary\0Adata (control messages) received: cmsg_level and cmsg_type are\0Aintegers specifying the protocol level and protocol-specific type\0Arespectively, and cmsg_data is a bytes object holding the associated\0Adata.  The msg_flags item is the bitwise OR of various flags\0Aindicating conditions on the received message; see your system\0Adocumentation for details.  If the receiving socket is unconnected,\0Aaddress is the address of the sending socket, if available; otherwise,\0Aits value is unspecified.\0A\0AIf recvmsg_into() raises an exception after the system call returns,\0Ait will first attempt to close any file descriptors received via the\0ASCM_RIGHTS mechanism.\00", align 16
@.str.299 = private unnamed_addr constant [8 x i8] c"sendmsg\00", align 1
@sendmsg_doc = internal global [886 x i8] c"sendmsg(buffers[, ancdata[, flags[, address]]]) -> count\0A\0ASend normal and ancillary data to the socket, gathering the\0Anon-ancillary data from a series of buffers and concatenating it into\0Aa single message.  The buffers argument specifies the non-ancillary\0Adata as an iterable of buffer-compatible objects (e.g. bytes objects).\0AThe ancdata argument specifies the ancillary data (control messages)\0Aas an iterable of zero or more tuples (cmsg_level, cmsg_type,\0Acmsg_data), where cmsg_level and cmsg_type are integers specifying the\0Aprotocol level and protocol-specific type respectively, and cmsg_data\0Ais a buffer-compatible object holding the associated data.  The flags\0Aargument defaults to 0 and has the same meaning as for send().  If\0Aaddress is supplied and not None, it sets a destination address for\0Athe message.  The return value is the number of bytes of non-ancillary\0Adata sent.\00", align 16
@sock_accept.accept4_works = internal global i32 -1, align 4
@.str.300 = private unnamed_addr constant [10 x i8] c"timed out\00", align 1
@.str.301 = private unnamed_addr constant [27 x i8] c"getsockaddrlen: bad family\00", align 1
@_Py_NoneStruct = external global %struct._object, align 8
@.str.302 = private unnamed_addr constant [3 x i8] c"Oi\00", align 1
@.str.303 = private unnamed_addr constant [3 x i8] c"II\00", align 1
@.str.304 = private unnamed_addr constant [5 x i8] c"OiII\00", align 1
@.str.305 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.306 = private unnamed_addr constant [7 x i8] c"shbhy#\00", align 1
@.str.307 = private unnamed_addr constant [6 x i8] c"IIIII\00", align 1
@PyExc_ValueError = external global %struct._object*, align 8
@.str.308 = private unnamed_addr constant [21 x i8] c"Invalid address type\00", align 1
@.str.309 = private unnamed_addr constant [4 x i8] c"O&h\00", align 1
@.str.310 = private unnamed_addr constant [4 x i8] c"iy#\00", align 1
@.str.311 = private unnamed_addr constant [5 x i8] c"(is)\00", align 1
@.str.312 = private unnamed_addr constant [3 x i8] c"y#\00", align 1
@.str.313 = private unnamed_addr constant [22 x i8] c"AF_UNIX path too long\00", align 1
@PyExc_TypeError = external global %struct._object*, align 8
@.str.314 = private unnamed_addr constant [61 x i8] c"getsockaddrarg: AF_NETLINK address must be tuple, not %.500s\00", align 1
@.str.315 = private unnamed_addr constant [18 x i8] c"II:getsockaddrarg\00", align 1
@.str.316 = private unnamed_addr constant [58 x i8] c"getsockaddrarg: AF_INET address must be tuple, not %.500s\00", align 1
@.str.317 = private unnamed_addr constant [19 x i8] c"eti:getsockaddrarg\00", align 1
@.str.318 = private unnamed_addr constant [5 x i8] c"idna\00", align 1
@PyExc_OverflowError = external global %struct._object*, align 8
@.str.319 = private unnamed_addr constant [38 x i8] c"getsockaddrarg: port must be 0-65535.\00", align 1
@.str.320 = private unnamed_addr constant [59 x i8] c"getsockaddrarg: AF_INET6 address must be tuple, not %.500s\00", align 1
@.str.321 = private unnamed_addr constant [7 x i8] c"eti|II\00", align 1
@.str.322 = private unnamed_addr constant [44 x i8] c"getsockaddrarg: flowinfo must be 0-1048575.\00", align 1
@.str.323 = private unnamed_addr constant [60 x i8] c"getsockaddrarg: AF_PACKET address must be tuple, not %.500s\00", align 1
@.str.324 = private unnamed_addr constant [8 x i8] c"si|iiy#\00", align 1
@.str.325 = private unnamed_addr constant [41 x i8] c"Hardware address must be 8 bytes or less\00", align 1
@.str.326 = private unnamed_addr constant [45 x i8] c"getsockaddrarg: protoNumber must be 0-65535.\00", align 1
@.str.327 = private unnamed_addr constant [58 x i8] c"getsockaddrarg: AF_TIPC address must be tuple, not %.500s\00", align 1
@.str.328 = private unnamed_addr constant [35 x i8] c"IIII|I;Invalid TIPC address format\00", align 1
@.str.329 = private unnamed_addr constant [3 x i8] c"O&\00", align 1
@.str.330 = private unnamed_addr constant [31 x i8] c"AF_CAN interface name too long\00", align 1
@.str.331 = private unnamed_addr constant [41 x i8] c"getsockaddrarg: unsupported CAN protocol\00", align 1
@.str.332 = private unnamed_addr constant [27 x i8] c"getsockaddrarg: bad family\00", align 1
@.str.333 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.334 = private unnamed_addr constant [27 x i8] c"unsupported address family\00", align 1
@.str.335 = private unnamed_addr constant [38 x i8] c"wildcard resolved to multiple address\00", align 1
@.str.336 = private unnamed_addr constant [16 x i8] c"255.255.255.255\00", align 1
@.str.337 = private unnamed_addr constant [12 x i8] c"<broadcast>\00", align 1
@.str.338 = private unnamed_addr constant [26 x i8] c"address family mismatched\00", align 1
@.str.339 = private unnamed_addr constant [23 x i8] c"unknown address family\00", align 1
@.str.340 = private unnamed_addr constant [16 x i8] c"ii|i:getsockopt\00", align 1
@.str.341 = private unnamed_addr constant [31 x i8] c"getsockopt buflen out of range\00", align 1
@.str.342 = private unnamed_addr constant [9 x i8] c"n|i:recv\00", align 1
@.str.343 = private unnamed_addr constant [28 x i8] c"negative buffersize in recv\00", align 1
@sock_recv_into.kwlist = internal global [4 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.344, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.345, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.346, i32 0, i32 0), i8* null], align 16
@.str.344 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@.str.345 = private unnamed_addr constant [7 x i8] c"nbytes\00", align 1
@.str.346 = private unnamed_addr constant [6 x i8] c"flags\00", align 1
@.str.347 = private unnamed_addr constant [16 x i8] c"w*|ni:recv_into\00", align 1
@.str.348 = private unnamed_addr constant [33 x i8] c"negative buffersize in recv_into\00", align 1
@.str.349 = private unnamed_addr constant [37 x i8] c"buffer too small for requested bytes\00", align 1
@.str.350 = private unnamed_addr constant [13 x i8] c"n|i:recvfrom\00", align 1
@.str.351 = private unnamed_addr constant [32 x i8] c"negative buffersize in recvfrom\00", align 1
@sock_recvfrom_into.kwlist = internal global [4 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.344, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.345, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.346, i32 0, i32 0), i8* null], align 16
@.str.352 = private unnamed_addr constant [20 x i8] c"w*|ni:recvfrom_into\00", align 1
@.str.353 = private unnamed_addr constant [37 x i8] c"negative buffersize in recvfrom_into\00", align 1
@.str.354 = private unnamed_addr constant [48 x i8] c"nbytes is greater than the length of the buffer\00", align 1
@.str.355 = private unnamed_addr constant [3 x i8] c"nN\00", align 1
@.str.356 = private unnamed_addr constant [10 x i8] c"y*|i:send\00", align 1
@.str.357 = private unnamed_addr constant [13 x i8] c"y*|i:sendall\00", align 1
@.str.358 = private unnamed_addr constant [11 x i8] c"y*O:sendto\00", align 1
@.str.359 = private unnamed_addr constant [12 x i8] c"y*iO:sendto\00", align 1
@.str.360 = private unnamed_addr constant [43 x i8] c"sendto() takes 2 or 3 arguments (%d given)\00", align 1
@.str.361 = private unnamed_addr constant [27 x i8] c"Timeout value out of range\00", align 1
@.str.362 = private unnamed_addr constant [15 x i8] c"iii:setsockopt\00", align 1
@.str.363 = private unnamed_addr constant [16 x i8] c"iiy#:setsockopt\00", align 1
@.str.364 = private unnamed_addr constant [13 x i8] c"n|ni:recvmsg\00", align 1
@.str.365 = private unnamed_addr constant [34 x i8] c"negative buffer size in recvmsg()\00", align 1
@.str.366 = private unnamed_addr constant [37 x i8] c"invalid ancillary data buffer length\00", align 1
@PyExc_RuntimeWarning = external global %struct._object*, align 8
@.str.367 = private unnamed_addr constant [58 x i8] c"received malformed or improperly-truncated ancillary data\00", align 1
@.str.368 = private unnamed_addr constant [25 x i8] c"control message too long\00", align 1
@.str.369 = private unnamed_addr constant [4 x i8] c"iiN\00", align 1
@.str.370 = private unnamed_addr constant [5 x i8] c"NOiN\00", align 1
@cmsg_min_space.cmsg_len_end = internal constant i64 8, align 8
@.str.371 = private unnamed_addr constant [18 x i8] c"O|ni:recvmsg_into\00", align 1
@.str.372 = private unnamed_addr constant [46 x i8] c"recvmsg_into() argument 1 must be an iterable\00", align 1
@.str.373 = private unnamed_addr constant [38 x i8] c"recvmsg_into() argument 1 is too long\00", align 1
@.str.374 = private unnamed_addr constant [86 x i8] c"w*;recvmsg_into() argument 1 must be an iterable of single-segment read-write buffers\00", align 1
@.str.375 = private unnamed_addr constant [14 x i8] c"O|OiO:sendmsg\00", align 1
@.str.376 = private unnamed_addr constant [41 x i8] c"sendmsg() argument 1 must be an iterable\00", align 1
@.str.377 = private unnamed_addr constant [33 x i8] c"sendmsg() argument 1 is too long\00", align 1
@.str.378 = private unnamed_addr constant [73 x i8] c"y*;sendmsg() argument 1 must be an iterable of buffer-compatible objects\00", align 1
@.str.379 = private unnamed_addr constant [41 x i8] c"sendmsg() argument 2 must be an iterable\00", align 1
@.str.380 = private unnamed_addr constant [40 x i8] c"(iiy*):[sendmsg() ancillary data items]\00", align 1
@.str.381 = private unnamed_addr constant [30 x i8] c"ancillary data item too large\00", align 1
@.str.382 = private unnamed_addr constant [24 x i8] c"too much ancillary data\00", align 1
@PyExc_RuntimeError = external global %struct._object*, align 8
@.str.383 = private unnamed_addr constant [33 x i8] c"unexpected NULL result from %s()\00", align 1
@.str.384 = private unnamed_addr constant [14 x i8] c"CMSG_FIRSTHDR\00", align 1
@.str.385 = private unnamed_addr constant [12 x i8] c"CMSG_NXTHDR\00", align 1
@.str.386 = private unnamed_addr constant [38 x i8] c"item size out of range for CMSG_LEN()\00", align 1
@.str.387 = private unnamed_addr constant [48 x i8] c"ancillary data does not fit in calculated space\00", align 1
@.str.388 = private unnamed_addr constant [7 x i8] c"family\00", align 1
@.str.389 = private unnamed_addr constant [18 x i8] c"the socket family\00", align 1
@.str.390 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@.str.391 = private unnamed_addr constant [16 x i8] c"the socket type\00", align 1
@.str.392 = private unnamed_addr constant [6 x i8] c"proto\00", align 1
@.str.393 = private unnamed_addr constant [20 x i8] c"the socket protocol\00", align 1
@.str.394 = private unnamed_addr constant [19 x i8] c"the socket timeout\00", align 1
@sock_initobj.keywords = internal global [5 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.388, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.390, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.392, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.280, i32 0, i32 0), i8* null], align 16
@sock_cloexec_works = internal global i32 -1, align 4
@.str.395 = private unnamed_addr constant [13 x i8] c"|iiiO:socket\00", align 1
@.str.396 = private unnamed_addr constant [31 x i8] c"can't use invalid socket value\00", align 1
@defaulttimeout = internal global double -1.000000e+00, align 8
@.str.397 = private unnamed_addr constant [8 x i8] c"_socket\00", align 1
@socket_doc = internal global [87 x i8] c"Implementation module for socket operations.\0A\0ASee the socket module for documentation.\00", align 16
@socket_methods = internal global [28 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.398, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_gethostbyname, i32 1, i8* getelementptr inbounds ([107 x i8], [107 x i8]* @gethostbyname_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.399, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_gethostbyname_ex, i32 1, i8* getelementptr inbounds ([208 x i8], [208 x i8]* @ghbn_ex_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.400, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_gethostbyaddr, i32 1, i8* getelementptr inbounds ([205 x i8], [205 x i8]* @gethostbyaddr_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.401, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_gethostname, i32 4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @gethostname_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.402, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_sethostname, i32 1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @sethostname_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.403, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_getservbyname, i32 1, i8* getelementptr inbounds ([214 x i8], [214 x i8]* @getservbyname_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.404, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_getservbyport, i32 1, i8* getelementptr inbounds ([208 x i8], [208 x i8]* @getservbyport_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.405, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_getprotobyname, i32 1, i8* getelementptr inbounds ([100 x i8], [100 x i8]* @getprotobyname_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.406, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_dup, i32 8, i8* getelementptr inbounds ([178 x i8], [178 x i8]* @dup_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.407, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_socketpair, i32 1, i8* getelementptr inbounds ([314 x i8], [314 x i8]* @socketpair_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.408, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_ntohs, i32 1, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @ntohs_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.409, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_ntohl, i32 8, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @ntohl_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.410, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_htons, i32 1, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @htons_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.411, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_htonl, i32 8, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @htonl_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.412, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_inet_aton, i32 1, i8* getelementptr inbounds ([193 x i8], [193 x i8]* @inet_aton_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.413, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_inet_ntoa, i32 1, i8* getelementptr inbounds ([115 x i8], [115 x i8]* @inet_ntoa_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.414, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_inet_pton, i32 1, i8* getelementptr inbounds ([158 x i8], [158 x i8]* @inet_pton_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.415, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_inet_ntop, i32 1, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @inet_ntop_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.416, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @socket_getaddrinfo to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([166 x i8], [166 x i8]* @getaddrinfo_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.417, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_getnameinfo, i32 1, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @getnameinfo_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.418, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @socket_getdefaulttimeout to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([233 x i8], [233 x i8]* @getdefaulttimeout_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.419, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_setdefaulttimeout, i32 8, i8* getelementptr inbounds ([225 x i8], [225 x i8]* @setdefaulttimeout_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.420, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_if_nameindex, i32 4, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @if_nameindex_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.421, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_if_nametoindex, i32 1, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @if_nametoindex_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.422, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_if_indextoname, i32 8, i8* getelementptr inbounds ([100 x i8], [100 x i8]* @if_indextoname_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.423, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_CMSG_LEN, i32 1, i8* getelementptr inbounds ([497 x i8], [497 x i8]* @CMSG_LEN_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.424, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @socket_CMSG_SPACE, i32 1, i8* getelementptr inbounds ([388 x i8], [388 x i8]* @CMSG_SPACE_doc, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@.str.398 = private unnamed_addr constant [14 x i8] c"gethostbyname\00", align 1
@gethostbyname_doc = internal global [107 x i8] c"gethostbyname(host) -> address\0A\0AReturn the IP address (a string of the form '255.255.255.255') for a host.\00", align 16
@.str.399 = private unnamed_addr constant [17 x i8] c"gethostbyname_ex\00", align 1
@ghbn_ex_doc = internal global [208 x i8] c"gethostbyname_ex(host) -> (name, aliaslist, addresslist)\0A\0AReturn the true host name, a list of aliases, and a list of IP addresses,\0Afor a host.  The host argument is a string giving a host name or IP number.\00", align 16
@.str.400 = private unnamed_addr constant [14 x i8] c"gethostbyaddr\00", align 1
@gethostbyaddr_doc = internal global [205 x i8] c"gethostbyaddr(host) -> (name, aliaslist, addresslist)\0A\0AReturn the true host name, a list of aliases, and a list of IP addresses,\0Afor a host.  The host argument is a string giving a host name or IP number.\00", align 16
@.str.401 = private unnamed_addr constant [12 x i8] c"gethostname\00", align 1
@gethostname_doc = internal global [55 x i8] c"gethostname() -> string\0A\0AReturn the current host name.\00", align 16
@.str.402 = private unnamed_addr constant [12 x i8] c"sethostname\00", align 1
@sethostname_doc = internal global [46 x i8] c"sethostname(name)\0A\0ASets the hostname to name.\00", align 16
@.str.403 = private unnamed_addr constant [14 x i8] c"getservbyname\00", align 1
@getservbyname_doc = internal global [214 x i8] c"getservbyname(servicename[, protocolname]) -> integer\0A\0AReturn a port number from a service name and protocol name.\0AThe optional protocol name, if given, should be 'tcp' or 'udp',\0Aotherwise any protocol will match.\00", align 16
@.str.404 = private unnamed_addr constant [14 x i8] c"getservbyport\00", align 1
@getservbyport_doc = internal global [208 x i8] c"getservbyport(port[, protocolname]) -> string\0A\0AReturn the service name from a port number and protocol name.\0AThe optional protocol name, if given, should be 'tcp' or 'udp',\0Aotherwise any protocol will match.\00", align 16
@.str.405 = private unnamed_addr constant [15 x i8] c"getprotobyname\00", align 1
@getprotobyname_doc = internal global [100 x i8] c"getprotobyname(name) -> integer\0A\0AReturn the protocol number for the named protocol.  (Rarely used.)\00", align 16
@.str.406 = private unnamed_addr constant [4 x i8] c"dup\00", align 1
@dup_doc = internal global [178 x i8] c"dup(integer) -> integer\0A\0ADuplicate an integer socket file descriptor.  This is like os.dup(), but for\0Asockets; on some platforms os.dup() won't work for socket file descriptors.\00", align 16
@.str.407 = private unnamed_addr constant [11 x i8] c"socketpair\00", align 1
@socketpair_doc = internal global [314 x i8] c"socketpair([family[, type [, proto]]]) -> (socket object, socket object)\0A\0ACreate a pair of socket objects from the sockets returned by the platform\0Asocketpair() function.\0AThe arguments are the same as for socket() except the default family is\0AAF_UNIX if defined on the platform; otherwise, the default is AF_INET.\00", align 16
@.str.408 = private unnamed_addr constant [6 x i8] c"ntohs\00", align 1
@ntohs_doc = internal global [85 x i8] c"ntohs(integer) -> integer\0A\0AConvert a 16-bit integer from network to host byte order.\00", align 16
@.str.409 = private unnamed_addr constant [6 x i8] c"ntohl\00", align 1
@ntohl_doc = internal global [85 x i8] c"ntohl(integer) -> integer\0A\0AConvert a 32-bit integer from network to host byte order.\00", align 16
@.str.410 = private unnamed_addr constant [6 x i8] c"htons\00", align 1
@htons_doc = internal global [85 x i8] c"htons(integer) -> integer\0A\0AConvert a 16-bit integer from host to network byte order.\00", align 16
@.str.411 = private unnamed_addr constant [6 x i8] c"htonl\00", align 1
@htonl_doc = internal global [85 x i8] c"htonl(integer) -> integer\0A\0AConvert a 32-bit integer from host to network byte order.\00", align 16
@.str.412 = private unnamed_addr constant [10 x i8] c"inet_aton\00", align 1
@inet_aton_doc = internal global [193 x i8] c"inet_aton(string) -> bytes giving packed 32-bit IP representation\0A\0AConvert an IP address in string format (123.45.67.89) to the 32-bit packed\0Abinary format used in low-level network functions.\00", align 16
@.str.413 = private unnamed_addr constant [10 x i8] c"inet_ntoa\00", align 1
@inet_ntoa_doc = internal global [115 x i8] c"inet_ntoa(packed_ip) -> ip_address_string\0A\0AConvert an IP address from 32-bit packed binary format to string format\00", align 16
@.str.414 = private unnamed_addr constant [10 x i8] c"inet_pton\00", align 1
@inet_pton_doc = internal global [158 x i8] c"inet_pton(af, ip) -> packed IP address string\0A\0AConvert an IP address from string format to a packed string suitable\0Afor use with low-level network functions.\00", align 16
@.str.415 = private unnamed_addr constant [10 x i8] c"inet_ntop\00", align 1
@inet_ntop_doc = internal global [123 x i8] c"inet_ntop(af, packed_ip) -> string formatted IP address\0A\0AConvert a packed IP address of the given family to string format.\00", align 16
@.str.416 = private unnamed_addr constant [12 x i8] c"getaddrinfo\00", align 1
@getaddrinfo_doc = internal global [166 x i8] c"getaddrinfo(host, port [, family, socktype, proto, flags])\0A    -> list of (family, socktype, proto, canonname, sockaddr)\0A\0AResolve host and port into addrinfo struct.\00", align 16
@.str.417 = private unnamed_addr constant [12 x i8] c"getnameinfo\00", align 1
@getnameinfo_doc = internal global [81 x i8] c"getnameinfo(sockaddr, flags) --> (host, port)\0A\0AGet host and port for a sockaddr.\00", align 16
@.str.418 = private unnamed_addr constant [18 x i8] c"getdefaulttimeout\00", align 1
@getdefaulttimeout_doc = internal global [233 x i8] c"getdefaulttimeout() -> timeout\0A\0AReturns the default timeout in seconds (float) for new socket objects.\0AA value of None indicates that new socket objects have no timeout.\0AWhen the socket module is first imported, the default is None.\00", align 16
@.str.419 = private unnamed_addr constant [18 x i8] c"setdefaulttimeout\00", align 1
@setdefaulttimeout_doc = internal global [225 x i8] c"setdefaulttimeout(timeout)\0A\0ASet the default timeout in seconds (float) for new socket objects.\0AA value of None indicates that new socket objects have no timeout.\0AWhen the socket module is first imported, the default is None.\00", align 16
@.str.420 = private unnamed_addr constant [13 x i8] c"if_nameindex\00", align 1
@if_nameindex_doc = internal global [86 x i8] c"if_nameindex()\0A\0AReturns a list of network interface information (index, name) tuples.\00", align 16
@.str.421 = private unnamed_addr constant [15 x i8] c"if_nametoindex\00", align 1
@if_nametoindex_doc = internal global [98 x i8] c"if_nametoindex(if_name)\0A\0AReturns the interface index corresponding to the interface name if_name.\00", align 16
@.str.422 = private unnamed_addr constant [15 x i8] c"if_indextoname\00", align 1
@if_indextoname_doc = internal global [100 x i8] c"if_indextoname(if_index)\0A\0AReturns the interface name corresponding to the interface index if_index.\00", align 16
@.str.423 = private unnamed_addr constant [9 x i8] c"CMSG_LEN\00", align 1
@CMSG_LEN_doc = internal global [497 x i8] c"CMSG_LEN(length) -> control message length\0A\0AReturn the total length, without trailing padding, of an ancillary\0Adata item with associated data of the given length.  This value can\0Aoften be used as the buffer size for recvmsg() to receive a single\0Aitem of ancillary data, but RFC 3542 requires portable applications to\0Ause CMSG_SPACE() and thus include space for padding, even when the\0Aitem will be the last in the buffer.  Raises OverflowError if length\0Ais outside the permissible range of values.\00", align 16
@.str.424 = private unnamed_addr constant [11 x i8] c"CMSG_SPACE\00", align 1
@CMSG_SPACE_doc = internal global [388 x i8] c"CMSG_SPACE(length) -> buffer size\0A\0AReturn the buffer size needed for recvmsg() to receive an ancillary\0Adata item with associated data of the given length, along with any\0Atrailing padding.  The buffer space needed to receive multiple items\0Ais the sum of the CMSG_SPACE() values for their associated data\0Alengths.  Raises OverflowError if length is outside the permissible\0Arange of values.\00", align 16
@.str.425 = private unnamed_addr constant [17 x i8] c"et:gethostbyname\00", align 1
@.str.426 = private unnamed_addr constant [20 x i8] c"et:gethostbyname_ex\00", align 1
@.str.427 = private unnamed_addr constant [4 x i8] c"sOO\00", align 1
@.str.428 = private unnamed_addr constant [17 x i8] c"et:gethostbyaddr\00", align 1
@.str.429 = private unnamed_addr constant [14 x i8] c"S:sethostname\00", align 1
@.str.430 = private unnamed_addr constant [15 x i8] c"O&:sethostname\00", align 1
@.str.431 = private unnamed_addr constant [18 x i8] c"s|s:getservbyname\00", align 1
@.str.432 = private unnamed_addr constant [24 x i8] c"service/proto not found\00", align 1
@.str.433 = private unnamed_addr constant [18 x i8] c"i|s:getservbyport\00", align 1
@.str.434 = private unnamed_addr constant [37 x i8] c"getservbyport: port must be 0-65535.\00", align 1
@.str.435 = private unnamed_addr constant [21 x i8] c"port/proto not found\00", align 1
@.str.436 = private unnamed_addr constant [17 x i8] c"s:getprotobyname\00", align 1
@.str.437 = private unnamed_addr constant [19 x i8] c"protocol not found\00", align 1
@.str.438 = private unnamed_addr constant [16 x i8] c"|iii:socketpair\00", align 1
@.str.439 = private unnamed_addr constant [8 x i8] c"i:ntohs\00", align 1
@.str.440 = private unnamed_addr constant [47 x i8] c"can't convert negative number to unsigned long\00", align 1
@.str.441 = private unnamed_addr constant [24 x i8] c"int larger than 32 bits\00", align 1
@.str.442 = private unnamed_addr constant [23 x i8] c"expected int, %s found\00", align 1
@.str.443 = private unnamed_addr constant [8 x i8] c"i:htons\00", align 1
@.str.444 = private unnamed_addr constant [12 x i8] c"s:inet_aton\00", align 1
@.str.445 = private unnamed_addr constant [46 x i8] c"illegal IP address string passed to inet_aton\00", align 1
@.str.446 = private unnamed_addr constant [13 x i8] c"y#:inet_ntoa\00", align 1
@.str.447 = private unnamed_addr constant [37 x i8] c"packed IP wrong length for inet_ntoa\00", align 1
@.str.448 = private unnamed_addr constant [13 x i8] c"is:inet_pton\00", align 1
@.str.449 = private unnamed_addr constant [46 x i8] c"illegal IP address string passed to inet_pton\00", align 1
@.str.450 = private unnamed_addr constant [14 x i8] c"iy#:inet_ntop\00", align 1
@.str.451 = private unnamed_addr constant [43 x i8] c"invalid length of packed IP address string\00", align 1
@.str.452 = private unnamed_addr constant [26 x i8] c"unknown address family %d\00", align 1
@socket_getaddrinfo.kwnames = internal global [7 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.453, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.454, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.388, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.390, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.392, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.346, i32 0, i32 0), i8* null], align 16
@.str.453 = private unnamed_addr constant [5 x i8] c"host\00", align 1
@.str.454 = private unnamed_addr constant [5 x i8] c"port\00", align 1
@.str.455 = private unnamed_addr constant [20 x i8] c"OO|iiii:getaddrinfo\00", align 1
@socket_getaddrinfo.PyId_encode = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.456, i32 0, i32 0), %struct._object* null }, align 8
@.str.456 = private unnamed_addr constant [7 x i8] c"encode\00", align 1
@.str.457 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.458 = private unnamed_addr constant [48 x i8] c"getaddrinfo() argument 1 must be string or None\00", align 1
@PyLong_Type = external global %struct._typeobject, align 8
@.str.459 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.460 = private unnamed_addr constant [23 x i8] c"Int or String expected\00", align 1
@.str.461 = private unnamed_addr constant [6 x i8] c"iiisO\00", align 1
@.str.462 = private unnamed_addr constant [15 x i8] c"Oi:getnameinfo\00", align 1
@.str.463 = private unnamed_addr constant [41 x i8] c"getnameinfo() argument 1 must be a tuple\00", align 1
@.str.464 = private unnamed_addr constant [6 x i8] c"si|II\00", align 1
@.str.465 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.466 = private unnamed_addr constant [40 x i8] c"sockaddr resolved to multiple addresses\00", align 1
@.str.467 = private unnamed_addr constant [30 x i8] c"IPv4 sockaddr must be 2 tuple\00", align 1
@.str.468 = private unnamed_addr constant [3 x i8] c"ss\00", align 1
@.str.469 = private unnamed_addr constant [4 x i8] c"IO&\00", align 1
@.str.470 = private unnamed_addr constant [18 x i8] c"O&:if_nametoindex\00", align 1
@.str.471 = private unnamed_addr constant [28 x i8] c"no interface with this name\00", align 1
@.str.472 = private unnamed_addr constant [11 x i8] c"n:CMSG_LEN\00", align 1
@.str.473 = private unnamed_addr constant [33 x i8] c"CMSG_LEN() argument out of range\00", align 1
@.str.474 = private unnamed_addr constant [13 x i8] c"n:CMSG_SPACE\00", align 1
@.str.475 = private unnamed_addr constant [35 x i8] c"CMSG_SPACE() argument out of range\00", align 1

; Function Attrs: nounwind uwtable
define %struct._object* @PyInit__socket() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %m = alloca %struct._object*, align 8
  %has_ipv6 = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %0 = bitcast %struct._object** %m to i8*, !dbg !2309
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !2309
  call void @llvm.dbg.declare(metadata %struct._object** %m, metadata !819, metadata !2310), !dbg !2311
  %1 = bitcast %struct._object** %has_ipv6 to i8*, !dbg !2309
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !2309
  call void @llvm.dbg.declare(metadata %struct._object** %has_ipv6, metadata !820, metadata !2310), !dbg !2312
  %call = call i32 @os_init(), !dbg !2313
  %tobool = icmp ne i32 %call, 0, !dbg !2313
  br i1 %tobool, label %if.end, label %if.then, !dbg !2315

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !2316
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2316

if.end:                                           ; preds = %entry
  store %struct._typeobject* @PyType_Type, %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @sock_type, i32 0, i32 0, i32 0, i32 1), align 8, !dbg !2317, !tbaa !2318
  %call1 = call %struct._object* @PyModule_Create2(%struct.PyModuleDef* @socketmodule, i32 1013), !dbg !2324
  store %struct._object* %call1, %struct._object** %m, align 8, !dbg !2325, !tbaa !2326
  %2 = load %struct._object*, %struct._object** %m, align 8, !dbg !2327, !tbaa !2326
  %cmp = icmp eq %struct._object* %2, null, !dbg !2329
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !2330

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !2331
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2331

if.end.3:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !2332, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0, !dbg !2333
  %4 = load i64, i64* %ob_refcnt, align 8, !dbg !2334, !tbaa !2335
  %inc = add i64 %4, 1, !dbg !2334
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !2334, !tbaa !2335
  %5 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !2336, !tbaa !2326
  store %struct._object* %5, %struct._object** getelementptr inbounds (%struct.PySocketModule_APIObject, %struct.PySocketModule_APIObject* @PySocketModuleAPI, i32 0, i32 1), align 8, !dbg !2337, !tbaa !2338
  %6 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !2340, !tbaa !2326
  %ob_refcnt4 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0, !dbg !2341
  %7 = load i64, i64* %ob_refcnt4, align 8, !dbg !2342, !tbaa !2335
  %inc5 = add i64 %7, 1, !dbg !2342
  store i64 %inc5, i64* %ob_refcnt4, align 8, !dbg !2342, !tbaa !2335
  %8 = load %struct._object*, %struct._object** %m, align 8, !dbg !2343, !tbaa !2326
  %9 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !2344, !tbaa !2326
  %call6 = call i32 @PyModule_AddObject(%struct._object* %8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), %struct._object* %9), !dbg !2345
  %10 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !2346, !tbaa !2326
  %call7 = call %struct._object* @PyErr_NewException(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i32 0, i32 0), %struct._object* %10, %struct._object* null), !dbg !2347
  store %struct._object* %call7, %struct._object** @socket_herror, align 8, !dbg !2348, !tbaa !2326
  %11 = load %struct._object*, %struct._object** @socket_herror, align 8, !dbg !2349, !tbaa !2326
  %cmp8 = icmp eq %struct._object* %11, null, !dbg !2351
  br i1 %cmp8, label %if.then.9, label %if.end.10, !dbg !2352

if.then.9:                                        ; preds = %if.end.3
  store %struct._object* null, %struct._object** %retval, !dbg !2353
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2353

if.end.10:                                        ; preds = %if.end.3
  %12 = load %struct._object*, %struct._object** @socket_herror, align 8, !dbg !2354, !tbaa !2326
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0, !dbg !2355
  %13 = load i64, i64* %ob_refcnt11, align 8, !dbg !2356, !tbaa !2335
  %inc12 = add i64 %13, 1, !dbg !2356
  store i64 %inc12, i64* %ob_refcnt11, align 8, !dbg !2356, !tbaa !2335
  %14 = load %struct._object*, %struct._object** %m, align 8, !dbg !2357, !tbaa !2326
  %15 = load %struct._object*, %struct._object** @socket_herror, align 8, !dbg !2358, !tbaa !2326
  %call13 = call i32 @PyModule_AddObject(%struct._object* %14, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), %struct._object* %15), !dbg !2359
  %16 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !2360, !tbaa !2326
  %call14 = call %struct._object* @PyErr_NewException(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0), %struct._object* %16, %struct._object* null), !dbg !2361
  store %struct._object* %call14, %struct._object** @socket_gaierror, align 8, !dbg !2362, !tbaa !2326
  %17 = load %struct._object*, %struct._object** @socket_gaierror, align 8, !dbg !2363, !tbaa !2326
  %cmp15 = icmp eq %struct._object* %17, null, !dbg !2365
  br i1 %cmp15, label %if.then.16, label %if.end.17, !dbg !2366

if.then.16:                                       ; preds = %if.end.10
  store %struct._object* null, %struct._object** %retval, !dbg !2367
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2367

if.end.17:                                        ; preds = %if.end.10
  %18 = load %struct._object*, %struct._object** @socket_gaierror, align 8, !dbg !2368, !tbaa !2326
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0, !dbg !2369
  %19 = load i64, i64* %ob_refcnt18, align 8, !dbg !2370, !tbaa !2335
  %inc19 = add i64 %19, 1, !dbg !2370
  store i64 %inc19, i64* %ob_refcnt18, align 8, !dbg !2370, !tbaa !2335
  %20 = load %struct._object*, %struct._object** %m, align 8, !dbg !2371, !tbaa !2326
  %21 = load %struct._object*, %struct._object** @socket_gaierror, align 8, !dbg !2372, !tbaa !2326
  %call20 = call i32 @PyModule_AddObject(%struct._object* %20, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), %struct._object* %21), !dbg !2373
  %22 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !2374, !tbaa !2326
  %call21 = call %struct._object* @PyErr_NewException(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i32 0, i32 0), %struct._object* %22, %struct._object* null), !dbg !2375
  store %struct._object* %call21, %struct._object** @socket_timeout, align 8, !dbg !2376, !tbaa !2326
  %23 = load %struct._object*, %struct._object** @socket_timeout, align 8, !dbg !2377, !tbaa !2326
  %cmp22 = icmp eq %struct._object* %23, null, !dbg !2379
  br i1 %cmp22, label %if.then.23, label %if.end.24, !dbg !2380

if.then.23:                                       ; preds = %if.end.17
  store %struct._object* null, %struct._object** %retval, !dbg !2381
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2381

if.end.24:                                        ; preds = %if.end.17
  %24 = load %struct._object*, %struct._object** @socket_timeout, align 8, !dbg !2382, !tbaa !2326
  store %struct._object* %24, %struct._object** getelementptr inbounds (%struct.PySocketModule_APIObject, %struct.PySocketModule_APIObject* @PySocketModuleAPI, i32 0, i32 2), align 8, !dbg !2383, !tbaa !2384
  %25 = load %struct._object*, %struct._object** @socket_timeout, align 8, !dbg !2385, !tbaa !2326
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0, !dbg !2386
  %26 = load i64, i64* %ob_refcnt25, align 8, !dbg !2387, !tbaa !2335
  %inc26 = add i64 %26, 1, !dbg !2387
  store i64 %inc26, i64* %ob_refcnt25, align 8, !dbg !2387, !tbaa !2335
  %27 = load %struct._object*, %struct._object** %m, align 8, !dbg !2388, !tbaa !2326
  %28 = load %struct._object*, %struct._object** @socket_timeout, align 8, !dbg !2389, !tbaa !2326
  %call27 = call i32 @PyModule_AddObject(%struct._object* %27, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), %struct._object* %28), !dbg !2390
  %29 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @sock_type, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2391, !tbaa !2335
  %inc28 = add i64 %29, 1, !dbg !2391
  store i64 %inc28, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @sock_type, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2391, !tbaa !2335
  %30 = load %struct._object*, %struct._object** %m, align 8, !dbg !2392, !tbaa !2326
  %call29 = call i32 @PyModule_AddObject(%struct._object* %30, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @sock_type, i32 0, i32 0, i32 0)), !dbg !2394
  %cmp30 = icmp ne i32 %call29, 0, !dbg !2395
  br i1 %cmp30, label %if.then.31, label %if.end.32, !dbg !2396

if.then.31:                                       ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval, !dbg !2397
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2397

if.end.32:                                        ; preds = %if.end.24
  %31 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @sock_type, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2398, !tbaa !2335
  %inc33 = add i64 %31, 1, !dbg !2398
  store i64 %inc33, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @sock_type, i32 0, i32 0, i32 0, i32 0), align 8, !dbg !2398, !tbaa !2335
  %32 = load %struct._object*, %struct._object** %m, align 8, !dbg !2399, !tbaa !2326
  %call34 = call i32 @PyModule_AddObject(%struct._object* %32, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @sock_type, i32 0, i32 0, i32 0)), !dbg !2401
  %cmp35 = icmp ne i32 %call34, 0, !dbg !2402
  br i1 %cmp35, label %if.then.36, label %if.end.37, !dbg !2403

if.then.36:                                       ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval, !dbg !2404
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2404

if.end.37:                                        ; preds = %if.end.32
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object** %has_ipv6, align 8, !dbg !2405, !tbaa !2326
  %33 = load %struct._object*, %struct._object** %has_ipv6, align 8, !dbg !2406, !tbaa !2326
  %ob_refcnt38 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0, !dbg !2407
  %34 = load i64, i64* %ob_refcnt38, align 8, !dbg !2408, !tbaa !2335
  %inc39 = add i64 %34, 1, !dbg !2408
  store i64 %inc39, i64* %ob_refcnt38, align 8, !dbg !2408, !tbaa !2335
  %35 = load %struct._object*, %struct._object** %m, align 8, !dbg !2409, !tbaa !2326
  %36 = load %struct._object*, %struct._object** %has_ipv6, align 8, !dbg !2410, !tbaa !2326
  %call40 = call i32 @PyModule_AddObject(%struct._object* %35, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i32 0, i32 0), %struct._object* %36), !dbg !2411
  %37 = load %struct._object*, %struct._object** %m, align 8, !dbg !2412, !tbaa !2326
  %call41 = call %struct._object* @PyCapsule_New(i8* bitcast (%struct.PySocketModule_APIObject* @PySocketModuleAPI to i8*), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), void (%struct._object*)* null), !dbg !2414
  %call42 = call i32 @PyModule_AddObject(%struct._object* %37, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), %struct._object* %call41), !dbg !2415
  %cmp43 = icmp ne i32 %call42, 0, !dbg !2416
  br i1 %cmp43, label %if.then.44, label %if.end.45, !dbg !2417

if.then.44:                                       ; preds = %if.end.37
  store %struct._object* null, %struct._object** %retval, !dbg !2418
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2418

if.end.45:                                        ; preds = %if.end.37
  %38 = load %struct._object*, %struct._object** %m, align 8, !dbg !2419, !tbaa !2326
  %call46 = call i32 @PyModule_AddIntConstant(%struct._object* %38, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i32 0, i32 0), i64 0), !dbg !2420
  %39 = load %struct._object*, %struct._object** %m, align 8, !dbg !2421, !tbaa !2326
  %call47 = call i32 @PyModule_AddIntConstant(%struct._object* %39, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i32 0, i32 0), i64 2), !dbg !2422
  %40 = load %struct._object*, %struct._object** %m, align 8, !dbg !2423, !tbaa !2326
  %call48 = call i32 @PyModule_AddIntConstant(%struct._object* %40, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i64 10), !dbg !2424
  %41 = load %struct._object*, %struct._object** %m, align 8, !dbg !2425, !tbaa !2326
  %call49 = call i32 @PyModule_AddIntConstant(%struct._object* %41, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i64 1), !dbg !2426
  %42 = load %struct._object*, %struct._object** %m, align 8, !dbg !2427, !tbaa !2326
  %call50 = call i32 @PyModule_AddIntConstant(%struct._object* %42, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i32 0, i32 0), i64 3), !dbg !2428
  %43 = load %struct._object*, %struct._object** %m, align 8, !dbg !2429, !tbaa !2326
  %call51 = call i32 @PyModule_AddIntConstant(%struct._object* %43, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0), i64 4), !dbg !2430
  %44 = load %struct._object*, %struct._object** %m, align 8, !dbg !2431, !tbaa !2326
  %call52 = call i32 @PyModule_AddIntConstant(%struct._object* %44, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i32 0, i32 0), i64 5), !dbg !2432
  %45 = load %struct._object*, %struct._object** %m, align 8, !dbg !2433, !tbaa !2326
  %call53 = call i32 @PyModule_AddIntConstant(%struct._object* %45, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i32 0, i32 0), i64 6), !dbg !2434
  %46 = load %struct._object*, %struct._object** %m, align 8, !dbg !2435, !tbaa !2326
  %call54 = call i32 @PyModule_AddIntConstant(%struct._object* %46, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i64 7), !dbg !2436
  %47 = load %struct._object*, %struct._object** %m, align 8, !dbg !2437, !tbaa !2326
  %call55 = call i32 @PyModule_AddIntConstant(%struct._object* %47, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i64 8), !dbg !2438
  %48 = load %struct._object*, %struct._object** %m, align 8, !dbg !2439, !tbaa !2326
  %call56 = call i32 @PyModule_AddIntConstant(%struct._object* %48, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i32 0, i32 0), i64 9), !dbg !2440
  %49 = load %struct._object*, %struct._object** %m, align 8, !dbg !2441, !tbaa !2326
  %call57 = call i32 @PyModule_AddIntConstant(%struct._object* %49, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i64 10), !dbg !2442
  %50 = load %struct._object*, %struct._object** %m, align 8, !dbg !2443, !tbaa !2326
  %call58 = call i32 @PyModule_AddIntConstant(%struct._object* %50, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i32 0, i32 0), i64 11), !dbg !2444
  %51 = load %struct._object*, %struct._object** %m, align 8, !dbg !2445, !tbaa !2326
  %call59 = call i32 @PyModule_AddIntConstant(%struct._object* %51, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0), i64 12), !dbg !2446
  %52 = load %struct._object*, %struct._object** %m, align 8, !dbg !2447, !tbaa !2326
  %call60 = call i32 @PyModule_AddIntConstant(%struct._object* %52, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.25, i32 0, i32 0), i64 13), !dbg !2448
  %53 = load %struct._object*, %struct._object** %m, align 8, !dbg !2449, !tbaa !2326
  %call61 = call i32 @PyModule_AddIntConstant(%struct._object* %53, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i32 0, i32 0), i64 14), !dbg !2450
  %54 = load %struct._object*, %struct._object** %m, align 8, !dbg !2451, !tbaa !2326
  %call62 = call i32 @PyModule_AddIntConstant(%struct._object* %54, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27, i32 0, i32 0), i64 15), !dbg !2452
  %55 = load %struct._object*, %struct._object** %m, align 8, !dbg !2453, !tbaa !2326
  %call63 = call i32 @PyModule_AddIntConstant(%struct._object* %55, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i32 0, i32 0), i64 16), !dbg !2454
  %56 = load %struct._object*, %struct._object** %m, align 8, !dbg !2455, !tbaa !2326
  %call64 = call i32 @PyModule_AddIntConstant(%struct._object* %56, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.29, i32 0, i32 0), i64 0), !dbg !2456
  %57 = load %struct._object*, %struct._object** %m, align 8, !dbg !2457, !tbaa !2326
  %call65 = call i32 @PyModule_AddIntConstant(%struct._object* %57, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.30, i32 0, i32 0), i64 2), !dbg !2458
  %58 = load %struct._object*, %struct._object** %m, align 8, !dbg !2459, !tbaa !2326
  %call66 = call i32 @PyModule_AddIntConstant(%struct._object* %58, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.31, i32 0, i32 0), i64 3), !dbg !2460
  %59 = load %struct._object*, %struct._object** %m, align 8, !dbg !2461, !tbaa !2326
  %call67 = call i32 @PyModule_AddIntConstant(%struct._object* %59, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.32, i32 0, i32 0), i64 5), !dbg !2462
  %60 = load %struct._object*, %struct._object** %m, align 8, !dbg !2463, !tbaa !2326
  %call68 = call i32 @PyModule_AddIntConstant(%struct._object* %60, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.33, i32 0, i32 0), i64 6), !dbg !2464
  %61 = load %struct._object*, %struct._object** %m, align 8, !dbg !2465, !tbaa !2326
  %call69 = call i32 @PyModule_AddIntConstant(%struct._object* %61, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.34, i32 0, i32 0), i64 13), !dbg !2466
  %62 = load %struct._object*, %struct._object** %m, align 8, !dbg !2467, !tbaa !2326
  %call70 = call i32 @PyModule_AddIntConstant(%struct._object* %62, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.35, i32 0, i32 0), i64 14), !dbg !2468
  %63 = load %struct._object*, %struct._object** %m, align 8, !dbg !2469, !tbaa !2326
  %call71 = call i32 @PyModule_AddIntConstant(%struct._object* %63, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i32 0, i32 0), i64 16), !dbg !2470
  %64 = load %struct._object*, %struct._object** %m, align 8, !dbg !2471, !tbaa !2326
  %call72 = call i32 @PyModule_AddIntConstant(%struct._object* %64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.37, i32 0, i32 0), i64 18), !dbg !2472
  %65 = load %struct._object*, %struct._object** %m, align 8, !dbg !2473, !tbaa !2326
  %call73 = call i32 @PyModule_AddIntConstant(%struct._object* %65, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.38, i32 0, i32 0), i64 19), !dbg !2474
  %66 = load %struct._object*, %struct._object** %m, align 8, !dbg !2475, !tbaa !2326
  %call74 = call i32 @PyModule_AddIntConstant(%struct._object* %66, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.39, i32 0, i32 0), i64 20), !dbg !2476
  %67 = load %struct._object*, %struct._object** %m, align 8, !dbg !2477, !tbaa !2326
  %call75 = call i32 @PyModule_AddIntConstant(%struct._object* %67, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i32 0, i32 0), i64 22), !dbg !2478
  %68 = load %struct._object*, %struct._object** %m, align 8, !dbg !2479, !tbaa !2326
  %call76 = call i32 @PyModule_AddIntConstant(%struct._object* %68, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.41, i32 0, i32 0), i64 23), !dbg !2480
  %69 = load %struct._object*, %struct._object** %m, align 8, !dbg !2481, !tbaa !2326
  %call77 = call i32 @PyModule_AddIntConstant(%struct._object* %69, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.42, i32 0, i32 0), i64 24), !dbg !2482
  %70 = load %struct._object*, %struct._object** %m, align 8, !dbg !2483, !tbaa !2326
  %call78 = call i32 @PyModule_AddIntConstant(%struct._object* %70, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.43, i32 0, i32 0), i64 25), !dbg !2484
  %71 = load %struct._object*, %struct._object** %m, align 8, !dbg !2485, !tbaa !2326
  %call79 = call i32 @PyModule_AddIntConstant(%struct._object* %71, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i32 0, i32 0), i64 26), !dbg !2486
  %72 = load %struct._object*, %struct._object** %m, align 8, !dbg !2487, !tbaa !2326
  %call80 = call i32 @PyModule_AddIntConstant(%struct._object* %72, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i32 0, i32 0), i64 29), !dbg !2488
  %73 = load %struct._object*, %struct._object** %m, align 8, !dbg !2489, !tbaa !2326
  %call81 = call i32 @PyModule_AddIntConstant(%struct._object* %73, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.46, i32 0, i32 0), i64 29), !dbg !2490
  %74 = load %struct._object*, %struct._object** %m, align 8, !dbg !2491, !tbaa !2326
  %call82 = call i32 @PyModule_AddIntConstant(%struct._object* %74, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i32 0, i32 0), i64 21), !dbg !2492
  %75 = load %struct._object*, %struct._object** %m, align 8, !dbg !2493, !tbaa !2326
  %call83 = call i32 @PyModule_AddIntConstant(%struct._object* %75, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.48, i32 0, i32 0), i64 21), !dbg !2494
  %76 = load %struct._object*, %struct._object** %m, align 8, !dbg !2495, !tbaa !2326
  %call84 = call i32 @PyModule_AddIntConstant(%struct._object* %76, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.49, i32 0, i32 0), i64 17), !dbg !2496
  %77 = load %struct._object*, %struct._object** %m, align 8, !dbg !2497, !tbaa !2326
  %call85 = call i32 @PyModule_AddIntConstant(%struct._object* %77, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i32 0, i32 0), i64 17), !dbg !2498
  %78 = load %struct._object*, %struct._object** %m, align 8, !dbg !2499, !tbaa !2326
  %call86 = call i32 @PyModule_AddIntConstant(%struct._object* %78, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i32 0, i32 0), i64 0), !dbg !2500
  %79 = load %struct._object*, %struct._object** %m, align 8, !dbg !2501, !tbaa !2326
  %call87 = call i32 @PyModule_AddIntConstant(%struct._object* %79, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.52, i32 0, i32 0), i64 1), !dbg !2502
  %80 = load %struct._object*, %struct._object** %m, align 8, !dbg !2503, !tbaa !2326
  %call88 = call i32 @PyModule_AddIntConstant(%struct._object* %80, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.53, i32 0, i32 0), i64 2), !dbg !2504
  %81 = load %struct._object*, %struct._object** %m, align 8, !dbg !2505, !tbaa !2326
  %call89 = call i32 @PyModule_AddIntConstant(%struct._object* %81, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.54, i32 0, i32 0), i64 3), !dbg !2506
  %82 = load %struct._object*, %struct._object** %m, align 8, !dbg !2507, !tbaa !2326
  %call90 = call i32 @PyModule_AddIntConstant(%struct._object* %82, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.55, i32 0, i32 0), i64 4), !dbg !2508
  %83 = load %struct._object*, %struct._object** %m, align 8, !dbg !2509, !tbaa !2326
  %call91 = call i32 @PyModule_AddIntConstant(%struct._object* %83, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.56, i32 0, i32 0), i64 5), !dbg !2510
  %84 = load %struct._object*, %struct._object** %m, align 8, !dbg !2511, !tbaa !2326
  %call92 = call i32 @PyModule_AddIntConstant(%struct._object* %84, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.57, i32 0, i32 0), i64 6), !dbg !2512
  %85 = load %struct._object*, %struct._object** %m, align 8, !dbg !2513, !tbaa !2326
  %call93 = call i32 @PyModule_AddIntConstant(%struct._object* %85, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.58, i32 0, i32 0), i64 30), !dbg !2514
  %86 = load %struct._object*, %struct._object** %m, align 8, !dbg !2515, !tbaa !2326
  %call94 = call i32 @PyModule_AddIntConstant(%struct._object* %86, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.59, i32 0, i32 0), i64 1), !dbg !2516
  %87 = load %struct._object*, %struct._object** %m, align 8, !dbg !2517, !tbaa !2326
  %call95 = call i32 @PyModule_AddIntConstant(%struct._object* %87, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.60, i32 0, i32 0), i64 2), !dbg !2518
  %88 = load %struct._object*, %struct._object** %m, align 8, !dbg !2519, !tbaa !2326
  %call96 = call i32 @PyModule_AddIntConstant(%struct._object* %88, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.61, i32 0, i32 0), i64 3), !dbg !2520
  %89 = load %struct._object*, %struct._object** %m, align 8, !dbg !2521, !tbaa !2326
  %call97 = call i32 @PyModule_AddIntConstant(%struct._object* %89, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i32 0, i32 0), i64 1), !dbg !2522
  %90 = load %struct._object*, %struct._object** %m, align 8, !dbg !2523, !tbaa !2326
  %call98 = call i32 @PyModule_AddIntConstant(%struct._object* %90, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.63, i32 0, i32 0), i64 2), !dbg !2524
  %91 = load %struct._object*, %struct._object** %m, align 8, !dbg !2525, !tbaa !2326
  %call99 = call i32 @PyModule_AddIntConstant(%struct._object* %91, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.64, i32 0, i32 0), i64 3), !dbg !2526
  %92 = load %struct._object*, %struct._object** %m, align 8, !dbg !2527, !tbaa !2326
  %call100 = call i32 @PyModule_AddIntConstant(%struct._object* %92, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.65, i32 0, i32 0), i64 271), !dbg !2528
  %93 = load %struct._object*, %struct._object** %m, align 8, !dbg !2529, !tbaa !2326
  %call101 = call i32 @PyModule_AddIntConstant(%struct._object* %93, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.66, i32 0, i32 0), i64 127), !dbg !2530
  %94 = load %struct._object*, %struct._object** %m, align 8, !dbg !2531, !tbaa !2326
  %call102 = call i32 @PyModule_AddIntConstant(%struct._object* %94, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.67, i32 0, i32 0), i64 128), !dbg !2532
  %95 = load %struct._object*, %struct._object** %m, align 8, !dbg !2533, !tbaa !2326
  %call103 = call i32 @PyModule_AddIntConstant(%struct._object* %95, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.68, i32 0, i32 0), i64 129), !dbg !2534
  %96 = load %struct._object*, %struct._object** %m, align 8, !dbg !2535, !tbaa !2326
  %call104 = call i32 @PyModule_AddIntConstant(%struct._object* %96, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.69, i32 0, i32 0), i64 130), !dbg !2536
  %97 = load %struct._object*, %struct._object** %m, align 8, !dbg !2537, !tbaa !2326
  %call105 = call i32 @PyModule_AddIntConstant(%struct._object* %97, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.70, i32 0, i32 0), i64 0), !dbg !2538
  %98 = load %struct._object*, %struct._object** %m, align 8, !dbg !2539, !tbaa !2326
  %call106 = call i32 @PyModule_AddIntConstant(%struct._object* %98, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.71, i32 0, i32 0), i64 1), !dbg !2540
  %99 = load %struct._object*, %struct._object** %m, align 8, !dbg !2541, !tbaa !2326
  %call107 = call i32 @PyModule_AddIntConstant(%struct._object* %99, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.72, i32 0, i32 0), i64 2), !dbg !2542
  %100 = load %struct._object*, %struct._object** %m, align 8, !dbg !2543, !tbaa !2326
  %call108 = call i32 @PyModule_AddIntConstant(%struct._object* %100, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.73, i32 0, i32 0), i64 3), !dbg !2544
  %101 = load %struct._object*, %struct._object** %m, align 8, !dbg !2545, !tbaa !2326
  %call109 = call i32 @PyModule_AddIntConstant(%struct._object* %101, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.74, i32 0, i32 0), i64 1), !dbg !2546
  %102 = load %struct._object*, %struct._object** %m, align 8, !dbg !2547, !tbaa !2326
  %call110 = call i32 @PyModule_AddIntConstant(%struct._object* %102, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.75, i32 0, i32 0), i64 2), !dbg !2548
  %103 = load %struct._object*, %struct._object** %m, align 8, !dbg !2549, !tbaa !2326
  %call111 = call i32 @PyModule_AddIntConstant(%struct._object* %103, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.76, i32 0, i32 0), i64 4), !dbg !2550
  %104 = load %struct._object*, %struct._object** %m, align 8, !dbg !2551, !tbaa !2326
  %call112 = call i32 @PyModule_AddIntConstant(%struct._object* %104, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.77, i32 0, i32 0), i64 -1), !dbg !2552
  %105 = load %struct._object*, %struct._object** %m, align 8, !dbg !2553, !tbaa !2326
  %call113 = call i32 @PyModule_AddIntConstant(%struct._object* %105, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.78, i32 0, i32 0), i64 1), !dbg !2554
  %106 = load %struct._object*, %struct._object** %m, align 8, !dbg !2555, !tbaa !2326
  %call114 = call i32 @PyModule_AddIntConstant(%struct._object* %106, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.79, i32 0, i32 0), i64 2), !dbg !2556
  %107 = load %struct._object*, %struct._object** %m, align 8, !dbg !2557, !tbaa !2326
  %call115 = call i32 @PyModule_AddIntConstant(%struct._object* %107, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.80, i32 0, i32 0), i64 3), !dbg !2558
  %108 = load %struct._object*, %struct._object** %m, align 8, !dbg !2559, !tbaa !2326
  %call116 = call i32 @PyModule_AddIntConstant(%struct._object* %108, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.81, i32 0, i32 0), i64 0), !dbg !2560
  %109 = load %struct._object*, %struct._object** %m, align 8, !dbg !2561, !tbaa !2326
  %call117 = call i32 @PyModule_AddIntConstant(%struct._object* %109, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.82, i32 0, i32 0), i64 1), !dbg !2562
  %110 = load %struct._object*, %struct._object** %m, align 8, !dbg !2563, !tbaa !2326
  %call118 = call i32 @PyModule_AddIntConstant(%struct._object* %110, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.83, i32 0, i32 0), i64 1), !dbg !2564
  %111 = load %struct._object*, %struct._object** %m, align 8, !dbg !2565, !tbaa !2326
  %call119 = call i32 @PyModule_AddIntConstant(%struct._object* %111, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.84, i32 0, i32 0), i64 2), !dbg !2566
  %112 = load %struct._object*, %struct._object** %m, align 8, !dbg !2567, !tbaa !2326
  %call120 = call i32 @PyModule_AddIntConstant(%struct._object* %112, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.85, i32 0, i32 0), i64 3), !dbg !2568
  %113 = load %struct._object*, %struct._object** %m, align 8, !dbg !2569, !tbaa !2326
  %call121 = call i32 @PyModule_AddIntConstant(%struct._object* %113, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.86, i32 0, i32 0), i64 5), !dbg !2570
  %114 = load %struct._object*, %struct._object** %m, align 8, !dbg !2571, !tbaa !2326
  %call122 = call i32 @PyModule_AddIntConstant(%struct._object* %114, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.87, i32 0, i32 0), i64 4), !dbg !2572
  %115 = load %struct._object*, %struct._object** %m, align 8, !dbg !2573, !tbaa !2326
  %call123 = call i32 @PyModule_AddIntConstant(%struct._object* %115, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.88, i32 0, i32 0), i64 524288), !dbg !2574
  %116 = load %struct._object*, %struct._object** %m, align 8, !dbg !2575, !tbaa !2326
  %call124 = call i32 @PyModule_AddIntConstant(%struct._object* %116, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.89, i32 0, i32 0), i64 2048), !dbg !2576
  %117 = load %struct._object*, %struct._object** %m, align 8, !dbg !2577, !tbaa !2326
  %call125 = call i32 @PyModule_AddIntConstant(%struct._object* %117, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.90, i32 0, i32 0), i64 1), !dbg !2578
  %118 = load %struct._object*, %struct._object** %m, align 8, !dbg !2579, !tbaa !2326
  %call126 = call i32 @PyModule_AddIntConstant(%struct._object* %118, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.91, i32 0, i32 0), i64 30), !dbg !2580
  %119 = load %struct._object*, %struct._object** %m, align 8, !dbg !2581, !tbaa !2326
  %call127 = call i32 @PyModule_AddIntConstant(%struct._object* %119, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.92, i32 0, i32 0), i64 2), !dbg !2582
  %120 = load %struct._object*, %struct._object** %m, align 8, !dbg !2583, !tbaa !2326
  %call128 = call i32 @PyModule_AddIntConstant(%struct._object* %120, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.93, i32 0, i32 0), i64 9), !dbg !2584
  %121 = load %struct._object*, %struct._object** %m, align 8, !dbg !2585, !tbaa !2326
  %call129 = call i32 @PyModule_AddIntConstant(%struct._object* %121, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.94, i32 0, i32 0), i64 5), !dbg !2586
  %122 = load %struct._object*, %struct._object** %m, align 8, !dbg !2587, !tbaa !2326
  %call130 = call i32 @PyModule_AddIntConstant(%struct._object* %122, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.95, i32 0, i32 0), i64 6), !dbg !2588
  %123 = load %struct._object*, %struct._object** %m, align 8, !dbg !2589, !tbaa !2326
  %call131 = call i32 @PyModule_AddIntConstant(%struct._object* %123, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.96, i32 0, i32 0), i64 13), !dbg !2590
  %124 = load %struct._object*, %struct._object** %m, align 8, !dbg !2591, !tbaa !2326
  %call132 = call i32 @PyModule_AddIntConstant(%struct._object* %124, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.97, i32 0, i32 0), i64 10), !dbg !2592
  %125 = load %struct._object*, %struct._object** %m, align 8, !dbg !2593, !tbaa !2326
  %call133 = call i32 @PyModule_AddIntConstant(%struct._object* %125, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.98, i32 0, i32 0), i64 15), !dbg !2594
  %126 = load %struct._object*, %struct._object** %m, align 8, !dbg !2595, !tbaa !2326
  %call134 = call i32 @PyModule_AddIntConstant(%struct._object* %126, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.99, i32 0, i32 0), i64 7), !dbg !2596
  %127 = load %struct._object*, %struct._object** %m, align 8, !dbg !2597, !tbaa !2326
  %call135 = call i32 @PyModule_AddIntConstant(%struct._object* %127, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.100, i32 0, i32 0), i64 8), !dbg !2598
  %128 = load %struct._object*, %struct._object** %m, align 8, !dbg !2599, !tbaa !2326
  %call136 = call i32 @PyModule_AddIntConstant(%struct._object* %128, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.101, i32 0, i32 0), i64 19), !dbg !2600
  %129 = load %struct._object*, %struct._object** %m, align 8, !dbg !2601, !tbaa !2326
  %call137 = call i32 @PyModule_AddIntConstant(%struct._object* %129, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.102, i32 0, i32 0), i64 18), !dbg !2602
  %130 = load %struct._object*, %struct._object** %m, align 8, !dbg !2603, !tbaa !2326
  %call138 = call i32 @PyModule_AddIntConstant(%struct._object* %130, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.103, i32 0, i32 0), i64 21), !dbg !2604
  %131 = load %struct._object*, %struct._object** %m, align 8, !dbg !2605, !tbaa !2326
  %call139 = call i32 @PyModule_AddIntConstant(%struct._object* %131, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.104, i32 0, i32 0), i64 20), !dbg !2606
  %132 = load %struct._object*, %struct._object** %m, align 8, !dbg !2607, !tbaa !2326
  %call140 = call i32 @PyModule_AddIntConstant(%struct._object* %132, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.105, i32 0, i32 0), i64 4), !dbg !2608
  %133 = load %struct._object*, %struct._object** %m, align 8, !dbg !2609, !tbaa !2326
  %call141 = call i32 @PyModule_AddIntConstant(%struct._object* %133, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.106, i32 0, i32 0), i64 3), !dbg !2610
  %134 = load %struct._object*, %struct._object** %m, align 8, !dbg !2611, !tbaa !2326
  %call142 = call i32 @PyModule_AddIntConstant(%struct._object* %134, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.107, i32 0, i32 0), i64 16), !dbg !2612
  %135 = load %struct._object*, %struct._object** %m, align 8, !dbg !2613, !tbaa !2326
  %call143 = call i32 @PyModule_AddIntConstant(%struct._object* %135, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.108, i32 0, i32 0), i64 17), !dbg !2614
  %136 = load %struct._object*, %struct._object** %m, align 8, !dbg !2615, !tbaa !2326
  %call144 = call i32 @PyModule_AddIntConstant(%struct._object* %136, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.109, i32 0, i32 0), i64 25), !dbg !2616
  %137 = load %struct._object*, %struct._object** %m, align 8, !dbg !2617, !tbaa !2326
  %call145 = call i32 @PyModule_AddIntConstant(%struct._object* %137, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.110, i32 0, i32 0), i64 12), !dbg !2618
  %138 = load %struct._object*, %struct._object** %m, align 8, !dbg !2619, !tbaa !2326
  %call146 = call i32 @PyModule_AddIntConstant(%struct._object* %138, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.111, i32 0, i32 0), i64 128), !dbg !2620
  %139 = load %struct._object*, %struct._object** %m, align 8, !dbg !2621, !tbaa !2326
  %call147 = call i32 @PyModule_AddIntConstant(%struct._object* %139, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.112, i32 0, i32 0), i64 1), !dbg !2622
  %140 = load %struct._object*, %struct._object** %m, align 8, !dbg !2623, !tbaa !2326
  %call148 = call i32 @PyModule_AddIntConstant(%struct._object* %140, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.113, i32 0, i32 0), i64 2), !dbg !2624
  %141 = load %struct._object*, %struct._object** %m, align 8, !dbg !2625, !tbaa !2326
  %call149 = call i32 @PyModule_AddIntConstant(%struct._object* %141, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.114, i32 0, i32 0), i64 1), !dbg !2626
  %142 = load %struct._object*, %struct._object** %m, align 8, !dbg !2627, !tbaa !2326
  %call150 = call i32 @PyModule_AddIntConstant(%struct._object* %142, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.115, i32 0, i32 0), i64 2), !dbg !2628
  %143 = load %struct._object*, %struct._object** %m, align 8, !dbg !2629, !tbaa !2326
  %call151 = call i32 @PyModule_AddIntConstant(%struct._object* %143, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.116, i32 0, i32 0), i64 4), !dbg !2630
  %144 = load %struct._object*, %struct._object** %m, align 8, !dbg !2631, !tbaa !2326
  %call152 = call i32 @PyModule_AddIntConstant(%struct._object* %144, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.117, i32 0, i32 0), i64 64), !dbg !2632
  %145 = load %struct._object*, %struct._object** %m, align 8, !dbg !2633, !tbaa !2326
  %call153 = call i32 @PyModule_AddIntConstant(%struct._object* %145, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.118, i32 0, i32 0), i64 128), !dbg !2634
  %146 = load %struct._object*, %struct._object** %m, align 8, !dbg !2635, !tbaa !2326
  %call154 = call i32 @PyModule_AddIntConstant(%struct._object* %146, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.119, i32 0, i32 0), i64 32), !dbg !2636
  %147 = load %struct._object*, %struct._object** %m, align 8, !dbg !2637, !tbaa !2326
  %call155 = call i32 @PyModule_AddIntConstant(%struct._object* %147, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.120, i32 0, i32 0), i64 8), !dbg !2638
  %148 = load %struct._object*, %struct._object** %m, align 8, !dbg !2639, !tbaa !2326
  %call156 = call i32 @PyModule_AddIntConstant(%struct._object* %148, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.121, i32 0, i32 0), i64 256), !dbg !2640
  %149 = load %struct._object*, %struct._object** %m, align 8, !dbg !2641, !tbaa !2326
  %call157 = call i32 @PyModule_AddIntConstant(%struct._object* %149, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.122, i32 0, i32 0), i64 16384), !dbg !2642
  %150 = load %struct._object*, %struct._object** %m, align 8, !dbg !2643, !tbaa !2326
  %call158 = call i32 @PyModule_AddIntConstant(%struct._object* %150, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.123, i32 0, i32 0), i64 1073741824), !dbg !2644
  %151 = load %struct._object*, %struct._object** %m, align 8, !dbg !2645, !tbaa !2326
  %call159 = call i32 @PyModule_AddIntConstant(%struct._object* %151, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.124, i32 0, i32 0), i64 8192), !dbg !2646
  %152 = load %struct._object*, %struct._object** %m, align 8, !dbg !2647, !tbaa !2326
  %call160 = call i32 @PyModule_AddIntConstant(%struct._object* %152, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.125, i32 0, i32 0), i64 2048), !dbg !2648
  %153 = load %struct._object*, %struct._object** %m, align 8, !dbg !2649, !tbaa !2326
  %call161 = call i32 @PyModule_AddIntConstant(%struct._object* %153, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.126, i32 0, i32 0), i64 32768), !dbg !2650
  %154 = load %struct._object*, %struct._object** %m, align 8, !dbg !2651, !tbaa !2326
  %call162 = call i32 @PyModule_AddIntConstant(%struct._object* %154, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.127, i32 0, i32 0), i64 1), !dbg !2652
  %155 = load %struct._object*, %struct._object** %m, align 8, !dbg !2653, !tbaa !2326
  %call163 = call i32 @PyModule_AddIntConstant(%struct._object* %155, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.128, i32 0, i32 0), i64 0), !dbg !2654
  %156 = load %struct._object*, %struct._object** %m, align 8, !dbg !2655, !tbaa !2326
  %call164 = call i32 @PyModule_AddIntConstant(%struct._object* %156, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.129, i32 0, i32 0), i64 6), !dbg !2656
  %157 = load %struct._object*, %struct._object** %m, align 8, !dbg !2657, !tbaa !2326
  %call165 = call i32 @PyModule_AddIntConstant(%struct._object* %157, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.130, i32 0, i32 0), i64 17), !dbg !2658
  %158 = load %struct._object*, %struct._object** %m, align 8, !dbg !2659, !tbaa !2326
  %call166 = call i32 @PyModule_AddIntConstant(%struct._object* %158, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.131, i32 0, i32 0), i64 100), !dbg !2660
  %159 = load %struct._object*, %struct._object** %m, align 8, !dbg !2661, !tbaa !2326
  %call167 = call i32 @PyModule_AddIntConstant(%struct._object* %159, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.132, i32 0, i32 0), i64 101), !dbg !2662
  %160 = load %struct._object*, %struct._object** %m, align 8, !dbg !2663, !tbaa !2326
  %call168 = call i32 @PyModule_AddIntConstant(%struct._object* %160, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.133, i32 0, i32 0), i64 1), !dbg !2664
  %161 = load %struct._object*, %struct._object** %m, align 8, !dbg !2665, !tbaa !2326
  %call169 = call i32 @PyModule_AddIntConstant(%struct._object* %161, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.134, i32 0, i32 0), i64 2147483648), !dbg !2666
  %162 = load %struct._object*, %struct._object** %m, align 8, !dbg !2667, !tbaa !2326
  %call170 = call i32 @PyModule_AddIntConstant(%struct._object* %162, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.135, i32 0, i32 0), i64 1073741824), !dbg !2668
  %163 = load %struct._object*, %struct._object** %m, align 8, !dbg !2669, !tbaa !2326
  %call171 = call i32 @PyModule_AddIntConstant(%struct._object* %163, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.136, i32 0, i32 0), i64 536870912), !dbg !2670
  %164 = load %struct._object*, %struct._object** %m, align 8, !dbg !2671, !tbaa !2326
  %call172 = call i32 @PyModule_AddIntConstant(%struct._object* %164, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.137, i32 0, i32 0), i64 2047), !dbg !2672
  %165 = load %struct._object*, %struct._object** %m, align 8, !dbg !2673, !tbaa !2326
  %call173 = call i32 @PyModule_AddIntConstant(%struct._object* %165, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.138, i32 0, i32 0), i64 536870911), !dbg !2674
  %166 = load %struct._object*, %struct._object** %m, align 8, !dbg !2675, !tbaa !2326
  %call174 = call i32 @PyModule_AddIntConstant(%struct._object* %166, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.139, i32 0, i32 0), i64 536870911), !dbg !2676
  %167 = load %struct._object*, %struct._object** %m, align 8, !dbg !2677, !tbaa !2326
  %call175 = call i32 @PyModule_AddIntConstant(%struct._object* %167, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.140, i32 0, i32 0), i64 1), !dbg !2678
  %168 = load %struct._object*, %struct._object** %m, align 8, !dbg !2679, !tbaa !2326
  %call176 = call i32 @PyModule_AddIntConstant(%struct._object* %168, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.141, i32 0, i32 0), i64 2), !dbg !2680
  %169 = load %struct._object*, %struct._object** %m, align 8, !dbg !2681, !tbaa !2326
  %call177 = call i32 @PyModule_AddIntConstant(%struct._object* %169, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.142, i32 0, i32 0), i64 3), !dbg !2682
  %170 = load %struct._object*, %struct._object** %m, align 8, !dbg !2683, !tbaa !2326
  %call178 = call i32 @PyModule_AddIntConstant(%struct._object* %170, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.143, i32 0, i32 0), i64 4), !dbg !2684
  %171 = load %struct._object*, %struct._object** %m, align 8, !dbg !2685, !tbaa !2326
  %call179 = call i32 @PyModule_AddIntConstant(%struct._object* %171, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.144, i32 0, i32 0), i64 2), !dbg !2686
  %172 = load %struct._object*, %struct._object** %m, align 8, !dbg !2687, !tbaa !2326
  %call180 = call i32 @PyModule_AddIntConstant(%struct._object* %172, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.145, i32 0, i32 0), i64 1), !dbg !2688
  %173 = load %struct._object*, %struct._object** %m, align 8, !dbg !2689, !tbaa !2326
  %call181 = call i32 @PyModule_AddIntConstant(%struct._object* %173, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.146, i32 0, i32 0), i64 2), !dbg !2690
  %174 = load %struct._object*, %struct._object** %m, align 8, !dbg !2691, !tbaa !2326
  %call182 = call i32 @PyModule_AddIntConstant(%struct._object* %174, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.147, i32 0, i32 0), i64 3), !dbg !2692
  %175 = load %struct._object*, %struct._object** %m, align 8, !dbg !2693, !tbaa !2326
  %call183 = call i32 @PyModule_AddIntConstant(%struct._object* %175, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.148, i32 0, i32 0), i64 4), !dbg !2694
  %176 = load %struct._object*, %struct._object** %m, align 8, !dbg !2695, !tbaa !2326
  %call184 = call i32 @PyModule_AddIntConstant(%struct._object* %176, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.149, i32 0, i32 0), i64 5), !dbg !2696
  %177 = load %struct._object*, %struct._object** %m, align 8, !dbg !2697, !tbaa !2326
  %call185 = call i32 @PyModule_AddIntConstant(%struct._object* %177, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.150, i32 0, i32 0), i64 6), !dbg !2698
  %178 = load %struct._object*, %struct._object** %m, align 8, !dbg !2699, !tbaa !2326
  %call186 = call i32 @PyModule_AddIntConstant(%struct._object* %178, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.151, i32 0, i32 0), i64 7), !dbg !2700
  %179 = load %struct._object*, %struct._object** %m, align 8, !dbg !2701, !tbaa !2326
  %call187 = call i32 @PyModule_AddIntConstant(%struct._object* %179, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.152, i32 0, i32 0), i64 8), !dbg !2702
  %180 = load %struct._object*, %struct._object** %m, align 8, !dbg !2703, !tbaa !2326
  %call188 = call i32 @PyModule_AddIntConstant(%struct._object* %180, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.153, i32 0, i32 0), i64 9), !dbg !2704
  %181 = load %struct._object*, %struct._object** %m, align 8, !dbg !2705, !tbaa !2326
  %call189 = call i32 @PyModule_AddIntConstant(%struct._object* %181, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.154, i32 0, i32 0), i64 10), !dbg !2706
  %182 = load %struct._object*, %struct._object** %m, align 8, !dbg !2707, !tbaa !2326
  %call190 = call i32 @PyModule_AddIntConstant(%struct._object* %182, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.155, i32 0, i32 0), i64 11), !dbg !2708
  %183 = load %struct._object*, %struct._object** %m, align 8, !dbg !2709, !tbaa !2326
  %call191 = call i32 @PyModule_AddIntConstant(%struct._object* %183, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.156, i32 0, i32 0), i64 12), !dbg !2710
  %184 = load %struct._object*, %struct._object** %m, align 8, !dbg !2711, !tbaa !2326
  %call192 = call i32 @PyModule_AddIntConstant(%struct._object* %184, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.157, i32 0, i32 0), i64 0), !dbg !2712
  %185 = load %struct._object*, %struct._object** %m, align 8, !dbg !2713, !tbaa !2326
  %call193 = call i32 @PyModule_AddIntConstant(%struct._object* %185, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.158, i32 0, i32 0), i64 0), !dbg !2714
  %186 = load %struct._object*, %struct._object** %m, align 8, !dbg !2715, !tbaa !2326
  %call194 = call i32 @PyModule_AddIntConstant(%struct._object* %186, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.159, i32 0, i32 0), i64 1), !dbg !2716
  %187 = load %struct._object*, %struct._object** %m, align 8, !dbg !2717, !tbaa !2326
  %call195 = call i32 @PyModule_AddIntConstant(%struct._object* %187, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.160, i32 0, i32 0), i64 2), !dbg !2718
  %188 = load %struct._object*, %struct._object** %m, align 8, !dbg !2719, !tbaa !2326
  %call196 = call i32 @PyModule_AddIntConstant(%struct._object* %188, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.161, i32 0, i32 0), i64 41), !dbg !2720
  %189 = load %struct._object*, %struct._object** %m, align 8, !dbg !2721, !tbaa !2326
  %call197 = call i32 @PyModule_AddIntConstant(%struct._object* %189, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.162, i32 0, i32 0), i64 4), !dbg !2722
  %190 = load %struct._object*, %struct._object** %m, align 8, !dbg !2723, !tbaa !2326
  %call198 = call i32 @PyModule_AddIntConstant(%struct._object* %190, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.163, i32 0, i32 0), i64 6), !dbg !2724
  %191 = load %struct._object*, %struct._object** %m, align 8, !dbg !2725, !tbaa !2326
  %call199 = call i32 @PyModule_AddIntConstant(%struct._object* %191, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.164, i32 0, i32 0), i64 8), !dbg !2726
  %192 = load %struct._object*, %struct._object** %m, align 8, !dbg !2727, !tbaa !2326
  %call200 = call i32 @PyModule_AddIntConstant(%struct._object* %192, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.165, i32 0, i32 0), i64 12), !dbg !2728
  %193 = load %struct._object*, %struct._object** %m, align 8, !dbg !2729, !tbaa !2326
  %call201 = call i32 @PyModule_AddIntConstant(%struct._object* %193, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.166, i32 0, i32 0), i64 17), !dbg !2730
  %194 = load %struct._object*, %struct._object** %m, align 8, !dbg !2731, !tbaa !2326
  %call202 = call i32 @PyModule_AddIntConstant(%struct._object* %194, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.167, i32 0, i32 0), i64 22), !dbg !2732
  %195 = load %struct._object*, %struct._object** %m, align 8, !dbg !2733, !tbaa !2326
  %call203 = call i32 @PyModule_AddIntConstant(%struct._object* %195, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.168, i32 0, i32 0), i64 29), !dbg !2734
  %196 = load %struct._object*, %struct._object** %m, align 8, !dbg !2735, !tbaa !2326
  %call204 = call i32 @PyModule_AddIntConstant(%struct._object* %196, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.161, i32 0, i32 0), i64 41), !dbg !2736
  %197 = load %struct._object*, %struct._object** %m, align 8, !dbg !2737, !tbaa !2326
  %call205 = call i32 @PyModule_AddIntConstant(%struct._object* %197, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.169, i32 0, i32 0), i64 43), !dbg !2738
  %198 = load %struct._object*, %struct._object** %m, align 8, !dbg !2739, !tbaa !2326
  %call206 = call i32 @PyModule_AddIntConstant(%struct._object* %198, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.170, i32 0, i32 0), i64 44), !dbg !2740
  %199 = load %struct._object*, %struct._object** %m, align 8, !dbg !2741, !tbaa !2326
  %call207 = call i32 @PyModule_AddIntConstant(%struct._object* %199, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.171, i32 0, i32 0), i64 46), !dbg !2742
  %200 = load %struct._object*, %struct._object** %m, align 8, !dbg !2743, !tbaa !2326
  %call208 = call i32 @PyModule_AddIntConstant(%struct._object* %200, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.172, i32 0, i32 0), i64 47), !dbg !2744
  %201 = load %struct._object*, %struct._object** %m, align 8, !dbg !2745, !tbaa !2326
  %call209 = call i32 @PyModule_AddIntConstant(%struct._object* %201, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.173, i32 0, i32 0), i64 50), !dbg !2746
  %202 = load %struct._object*, %struct._object** %m, align 8, !dbg !2747, !tbaa !2326
  %call210 = call i32 @PyModule_AddIntConstant(%struct._object* %202, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.174, i32 0, i32 0), i64 51), !dbg !2748
  %203 = load %struct._object*, %struct._object** %m, align 8, !dbg !2749, !tbaa !2326
  %call211 = call i32 @PyModule_AddIntConstant(%struct._object* %203, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.175, i32 0, i32 0), i64 58), !dbg !2750
  %204 = load %struct._object*, %struct._object** %m, align 8, !dbg !2751, !tbaa !2326
  %call212 = call i32 @PyModule_AddIntConstant(%struct._object* %204, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.176, i32 0, i32 0), i64 59), !dbg !2752
  %205 = load %struct._object*, %struct._object** %m, align 8, !dbg !2753, !tbaa !2326
  %call213 = call i32 @PyModule_AddIntConstant(%struct._object* %205, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.177, i32 0, i32 0), i64 60), !dbg !2754
  %206 = load %struct._object*, %struct._object** %m, align 8, !dbg !2755, !tbaa !2326
  %call214 = call i32 @PyModule_AddIntConstant(%struct._object* %206, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.178, i32 0, i32 0), i64 103), !dbg !2756
  %207 = load %struct._object*, %struct._object** %m, align 8, !dbg !2757, !tbaa !2326
  %call215 = call i32 @PyModule_AddIntConstant(%struct._object* %207, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.179, i32 0, i32 0), i64 132), !dbg !2758
  %208 = load %struct._object*, %struct._object** %m, align 8, !dbg !2759, !tbaa !2326
  %call216 = call i32 @PyModule_AddIntConstant(%struct._object* %208, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.180, i32 0, i32 0), i64 255), !dbg !2760
  %209 = load %struct._object*, %struct._object** %m, align 8, !dbg !2761, !tbaa !2326
  %call217 = call i32 @PyModule_AddIntConstant(%struct._object* %209, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.181, i32 0, i32 0), i64 1024), !dbg !2762
  %210 = load %struct._object*, %struct._object** %m, align 8, !dbg !2763, !tbaa !2326
  %call218 = call i32 @PyModule_AddIntConstant(%struct._object* %210, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.182, i32 0, i32 0), i64 5000), !dbg !2764
  %211 = load %struct._object*, %struct._object** %m, align 8, !dbg !2765, !tbaa !2326
  %call219 = call i32 @PyModule_AddIntConstant(%struct._object* %211, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.183, i32 0, i32 0), i64 0), !dbg !2766
  %212 = load %struct._object*, %struct._object** %m, align 8, !dbg !2767, !tbaa !2326
  %call220 = call i32 @PyModule_AddIntConstant(%struct._object* %212, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.184, i32 0, i32 0), i64 4294967295), !dbg !2768
  %213 = load %struct._object*, %struct._object** %m, align 8, !dbg !2769, !tbaa !2326
  %call221 = call i32 @PyModule_AddIntConstant(%struct._object* %213, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.185, i32 0, i32 0), i64 2130706433), !dbg !2770
  %214 = load %struct._object*, %struct._object** %m, align 8, !dbg !2771, !tbaa !2326
  %call222 = call i32 @PyModule_AddIntConstant(%struct._object* %214, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.186, i32 0, i32 0), i64 3758096384), !dbg !2772
  %215 = load %struct._object*, %struct._object** %m, align 8, !dbg !2773, !tbaa !2326
  %call223 = call i32 @PyModule_AddIntConstant(%struct._object* %215, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.187, i32 0, i32 0), i64 3758096385), !dbg !2774
  %216 = load %struct._object*, %struct._object** %m, align 8, !dbg !2775, !tbaa !2326
  %call224 = call i32 @PyModule_AddIntConstant(%struct._object* %216, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.188, i32 0, i32 0), i64 3758096639), !dbg !2776
  %217 = load %struct._object*, %struct._object** %m, align 8, !dbg !2777, !tbaa !2326
  %call225 = call i32 @PyModule_AddIntConstant(%struct._object* %217, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.189, i32 0, i32 0), i64 4294967295), !dbg !2778
  %218 = load %struct._object*, %struct._object** %m, align 8, !dbg !2779, !tbaa !2326
  %call226 = call i32 @PyModule_AddIntConstant(%struct._object* %218, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.190, i32 0, i32 0), i64 4), !dbg !2780
  %219 = load %struct._object*, %struct._object** %m, align 8, !dbg !2781, !tbaa !2326
  %call227 = call i32 @PyModule_AddIntConstant(%struct._object* %219, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.191, i32 0, i32 0), i64 3), !dbg !2782
  %220 = load %struct._object*, %struct._object** %m, align 8, !dbg !2783, !tbaa !2326
  %call228 = call i32 @PyModule_AddIntConstant(%struct._object* %220, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.192, i32 0, i32 0), i64 1), !dbg !2784
  %221 = load %struct._object*, %struct._object** %m, align 8, !dbg !2785, !tbaa !2326
  %call229 = call i32 @PyModule_AddIntConstant(%struct._object* %221, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.193, i32 0, i32 0), i64 2), !dbg !2786
  %222 = load %struct._object*, %struct._object** %m, align 8, !dbg !2787, !tbaa !2326
  %call230 = call i32 @PyModule_AddIntConstant(%struct._object* %222, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.194, i32 0, i32 0), i64 6), !dbg !2788
  %223 = load %struct._object*, %struct._object** %m, align 8, !dbg !2789, !tbaa !2326
  %call231 = call i32 @PyModule_AddIntConstant(%struct._object* %223, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.195, i32 0, i32 0), i64 7), !dbg !2790
  %224 = load %struct._object*, %struct._object** %m, align 8, !dbg !2791, !tbaa !2326
  %call232 = call i32 @PyModule_AddIntConstant(%struct._object* %224, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.196, i32 0, i32 0), i64 7), !dbg !2792
  %225 = load %struct._object*, %struct._object** %m, align 8, !dbg !2793, !tbaa !2326
  %call233 = call i32 @PyModule_AddIntConstant(%struct._object* %225, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.197, i32 0, i32 0), i64 32), !dbg !2794
  %226 = load %struct._object*, %struct._object** %m, align 8, !dbg !2795, !tbaa !2326
  %call234 = call i32 @PyModule_AddIntConstant(%struct._object* %226, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.198, i32 0, i32 0), i64 33), !dbg !2796
  %227 = load %struct._object*, %struct._object** %m, align 8, !dbg !2797, !tbaa !2326
  %call235 = call i32 @PyModule_AddIntConstant(%struct._object* %227, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.199, i32 0, i32 0), i64 34), !dbg !2798
  %228 = load %struct._object*, %struct._object** %m, align 8, !dbg !2799, !tbaa !2326
  %call236 = call i32 @PyModule_AddIntConstant(%struct._object* %228, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.200, i32 0, i32 0), i64 35), !dbg !2800
  %229 = load %struct._object*, %struct._object** %m, align 8, !dbg !2801, !tbaa !2326
  %call237 = call i32 @PyModule_AddIntConstant(%struct._object* %229, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.201, i32 0, i32 0), i64 36), !dbg !2802
  %230 = load %struct._object*, %struct._object** %m, align 8, !dbg !2803, !tbaa !2326
  %call238 = call i32 @PyModule_AddIntConstant(%struct._object* %230, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.202, i32 0, i32 0), i64 1), !dbg !2804
  %231 = load %struct._object*, %struct._object** %m, align 8, !dbg !2805, !tbaa !2326
  %call239 = call i32 @PyModule_AddIntConstant(%struct._object* %231, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.203, i32 0, i32 0), i64 1), !dbg !2806
  %232 = load %struct._object*, %struct._object** %m, align 8, !dbg !2807, !tbaa !2326
  %call240 = call i32 @PyModule_AddIntConstant(%struct._object* %232, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.204, i32 0, i32 0), i64 20), !dbg !2808
  %233 = load %struct._object*, %struct._object** %m, align 8, !dbg !2809, !tbaa !2326
  %call241 = call i32 @PyModule_AddIntConstant(%struct._object* %233, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.205, i32 0, i32 0), i64 19), !dbg !2810
  %234 = load %struct._object*, %struct._object** %m, align 8, !dbg !2811, !tbaa !2326
  %call242 = call i32 @PyModule_AddIntConstant(%struct._object* %234, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.206, i32 0, i32 0), i64 20), !dbg !2812
  %235 = load %struct._object*, %struct._object** %m, align 8, !dbg !2813, !tbaa !2326
  %call243 = call i32 @PyModule_AddIntConstant(%struct._object* %235, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.207, i32 0, i32 0), i64 21), !dbg !2814
  %236 = load %struct._object*, %struct._object** %m, align 8, !dbg !2815, !tbaa !2326
  %call244 = call i32 @PyModule_AddIntConstant(%struct._object* %236, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.208, i32 0, i32 0), i64 18), !dbg !2816
  %237 = load %struct._object*, %struct._object** %m, align 8, !dbg !2817, !tbaa !2326
  %call245 = call i32 @PyModule_AddIntConstant(%struct._object* %237, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.209, i32 0, i32 0), i64 17), !dbg !2818
  %238 = load %struct._object*, %struct._object** %m, align 8, !dbg !2819, !tbaa !2326
  %call246 = call i32 @PyModule_AddIntConstant(%struct._object* %238, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.210, i32 0, i32 0), i64 19), !dbg !2820
  %239 = load %struct._object*, %struct._object** %m, align 8, !dbg !2821, !tbaa !2326
  %call247 = call i32 @PyModule_AddIntConstant(%struct._object* %239, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.211, i32 0, i32 0), i64 16), !dbg !2822
  %240 = load %struct._object*, %struct._object** %m, align 8, !dbg !2823, !tbaa !2326
  %call248 = call i32 @PyModule_AddIntConstant(%struct._object* %240, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.212, i32 0, i32 0), i64 26), !dbg !2824
  %241 = load %struct._object*, %struct._object** %m, align 8, !dbg !2825, !tbaa !2326
  %call249 = call i32 @PyModule_AddIntConstant(%struct._object* %241, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.213, i32 0, i32 0), i64 7), !dbg !2826
  %242 = load %struct._object*, %struct._object** %m, align 8, !dbg !2827, !tbaa !2326
  %call250 = call i32 @PyModule_AddIntConstant(%struct._object* %242, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.214, i32 0, i32 0), i64 59), !dbg !2828
  %243 = load %struct._object*, %struct._object** %m, align 8, !dbg !2829, !tbaa !2326
  %call251 = call i32 @PyModule_AddIntConstant(%struct._object* %243, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.215, i32 0, i32 0), i64 52), !dbg !2830
  %244 = load %struct._object*, %struct._object** %m, align 8, !dbg !2831, !tbaa !2326
  %call252 = call i32 @PyModule_AddIntConstant(%struct._object* %244, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.216, i32 0, i32 0), i64 54), !dbg !2832
  %245 = load %struct._object*, %struct._object** %m, align 8, !dbg !2833, !tbaa !2326
  %call253 = call i32 @PyModule_AddIntConstant(%struct._object* %245, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.217, i32 0, i32 0), i64 9), !dbg !2834
  %246 = load %struct._object*, %struct._object** %m, align 8, !dbg !2835, !tbaa !2326
  %call254 = call i32 @PyModule_AddIntConstant(%struct._object* %246, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.218, i32 0, i32 0), i64 50), !dbg !2836
  %247 = load %struct._object*, %struct._object** %m, align 8, !dbg !2837, !tbaa !2326
  %call255 = call i32 @PyModule_AddIntConstant(%struct._object* %247, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.219, i32 0, i32 0), i64 58), !dbg !2838
  %248 = load %struct._object*, %struct._object** %m, align 8, !dbg !2839, !tbaa !2326
  %call256 = call i32 @PyModule_AddIntConstant(%struct._object* %248, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.220, i32 0, i32 0), i64 51), !dbg !2840
  %249 = load %struct._object*, %struct._object** %m, align 8, !dbg !2841, !tbaa !2326
  %call257 = call i32 @PyModule_AddIntConstant(%struct._object* %249, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.221, i32 0, i32 0), i64 53), !dbg !2842
  %250 = load %struct._object*, %struct._object** %m, align 8, !dbg !2843, !tbaa !2326
  %call258 = call i32 @PyModule_AddIntConstant(%struct._object* %250, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.222, i32 0, i32 0), i64 49), !dbg !2844
  %251 = load %struct._object*, %struct._object** %m, align 8, !dbg !2845, !tbaa !2326
  %call259 = call i32 @PyModule_AddIntConstant(%struct._object* %251, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.223, i32 0, i32 0), i64 56), !dbg !2846
  %252 = load %struct._object*, %struct._object** %m, align 8, !dbg !2847, !tbaa !2326
  %call260 = call i32 @PyModule_AddIntConstant(%struct._object* %252, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.224, i32 0, i32 0), i64 66), !dbg !2848
  %253 = load %struct._object*, %struct._object** %m, align 8, !dbg !2849, !tbaa !2326
  %call261 = call i32 @PyModule_AddIntConstant(%struct._object* %253, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.225, i32 0, i32 0), i64 57), !dbg !2850
  %254 = load %struct._object*, %struct._object** %m, align 8, !dbg !2851, !tbaa !2326
  %call262 = call i32 @PyModule_AddIntConstant(%struct._object* %254, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.226, i32 0, i32 0), i64 55), !dbg !2852
  %255 = load %struct._object*, %struct._object** %m, align 8, !dbg !2853, !tbaa !2326
  %call263 = call i32 @PyModule_AddIntConstant(%struct._object* %255, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.227, i32 0, i32 0), i64 0), !dbg !2854
  %256 = load %struct._object*, %struct._object** %m, align 8, !dbg !2855, !tbaa !2326
  %call264 = call i32 @PyModule_AddIntConstant(%struct._object* %256, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.228, i32 0, i32 0), i64 67), !dbg !2856
  %257 = load %struct._object*, %struct._object** %m, align 8, !dbg !2857, !tbaa !2326
  %call265 = call i32 @PyModule_AddIntConstant(%struct._object* %257, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.229, i32 0, i32 0), i64 1), !dbg !2858
  %258 = load %struct._object*, %struct._object** %m, align 8, !dbg !2859, !tbaa !2326
  %call266 = call i32 @PyModule_AddIntConstant(%struct._object* %258, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.230, i32 0, i32 0), i64 2), !dbg !2860
  %259 = load %struct._object*, %struct._object** %m, align 8, !dbg !2861, !tbaa !2326
  %call267 = call i32 @PyModule_AddIntConstant(%struct._object* %259, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.231, i32 0, i32 0), i64 3), !dbg !2862
  %260 = load %struct._object*, %struct._object** %m, align 8, !dbg !2863, !tbaa !2326
  %call268 = call i32 @PyModule_AddIntConstant(%struct._object* %260, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.232, i32 0, i32 0), i64 4), !dbg !2864
  %261 = load %struct._object*, %struct._object** %m, align 8, !dbg !2865, !tbaa !2326
  %call269 = call i32 @PyModule_AddIntConstant(%struct._object* %261, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.233, i32 0, i32 0), i64 5), !dbg !2866
  %262 = load %struct._object*, %struct._object** %m, align 8, !dbg !2867, !tbaa !2326
  %call270 = call i32 @PyModule_AddIntConstant(%struct._object* %262, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.234, i32 0, i32 0), i64 6), !dbg !2868
  %263 = load %struct._object*, %struct._object** %m, align 8, !dbg !2869, !tbaa !2326
  %call271 = call i32 @PyModule_AddIntConstant(%struct._object* %263, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.235, i32 0, i32 0), i64 7), !dbg !2870
  %264 = load %struct._object*, %struct._object** %m, align 8, !dbg !2871, !tbaa !2326
  %call272 = call i32 @PyModule_AddIntConstant(%struct._object* %264, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.236, i32 0, i32 0), i64 8), !dbg !2872
  %265 = load %struct._object*, %struct._object** %m, align 8, !dbg !2873, !tbaa !2326
  %call273 = call i32 @PyModule_AddIntConstant(%struct._object* %265, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.237, i32 0, i32 0), i64 9), !dbg !2874
  %266 = load %struct._object*, %struct._object** %m, align 8, !dbg !2875, !tbaa !2326
  %call274 = call i32 @PyModule_AddIntConstant(%struct._object* %266, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.238, i32 0, i32 0), i64 10), !dbg !2876
  %267 = load %struct._object*, %struct._object** %m, align 8, !dbg !2877, !tbaa !2326
  %call275 = call i32 @PyModule_AddIntConstant(%struct._object* %267, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.239, i32 0, i32 0), i64 11), !dbg !2878
  %268 = load %struct._object*, %struct._object** %m, align 8, !dbg !2879, !tbaa !2326
  %call276 = call i32 @PyModule_AddIntConstant(%struct._object* %268, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.240, i32 0, i32 0), i64 12), !dbg !2880
  %269 = load %struct._object*, %struct._object** %m, align 8, !dbg !2881, !tbaa !2326
  %call277 = call i32 @PyModule_AddIntConstant(%struct._object* %269, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.241, i32 0, i32 0), i64 23), !dbg !2882
  %270 = load %struct._object*, %struct._object** %m, align 8, !dbg !2883, !tbaa !2326
  %call278 = call i32 @PyModule_AddIntConstant(%struct._object* %270, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.242, i32 0, i32 0), i64 -9), !dbg !2884
  %271 = load %struct._object*, %struct._object** %m, align 8, !dbg !2885, !tbaa !2326
  %call279 = call i32 @PyModule_AddIntConstant(%struct._object* %271, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.243, i32 0, i32 0), i64 -3), !dbg !2886
  %272 = load %struct._object*, %struct._object** %m, align 8, !dbg !2887, !tbaa !2326
  %call280 = call i32 @PyModule_AddIntConstant(%struct._object* %272, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.244, i32 0, i32 0), i64 -1), !dbg !2888
  %273 = load %struct._object*, %struct._object** %m, align 8, !dbg !2889, !tbaa !2326
  %call281 = call i32 @PyModule_AddIntConstant(%struct._object* %273, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.245, i32 0, i32 0), i64 -4), !dbg !2890
  %274 = load %struct._object*, %struct._object** %m, align 8, !dbg !2891, !tbaa !2326
  %call282 = call i32 @PyModule_AddIntConstant(%struct._object* %274, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.246, i32 0, i32 0), i64 -6), !dbg !2892
  %275 = load %struct._object*, %struct._object** %m, align 8, !dbg !2893, !tbaa !2326
  %call283 = call i32 @PyModule_AddIntConstant(%struct._object* %275, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.247, i32 0, i32 0), i64 -10), !dbg !2894
  %276 = load %struct._object*, %struct._object** %m, align 8, !dbg !2895, !tbaa !2326
  %call284 = call i32 @PyModule_AddIntConstant(%struct._object* %276, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.248, i32 0, i32 0), i64 -5), !dbg !2896
  %277 = load %struct._object*, %struct._object** %m, align 8, !dbg !2897, !tbaa !2326
  %call285 = call i32 @PyModule_AddIntConstant(%struct._object* %277, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.249, i32 0, i32 0), i64 -2), !dbg !2898
  %278 = load %struct._object*, %struct._object** %m, align 8, !dbg !2899, !tbaa !2326
  %call286 = call i32 @PyModule_AddIntConstant(%struct._object* %278, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.250, i32 0, i32 0), i64 -12), !dbg !2900
  %279 = load %struct._object*, %struct._object** %m, align 8, !dbg !2901, !tbaa !2326
  %call287 = call i32 @PyModule_AddIntConstant(%struct._object* %279, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.251, i32 0, i32 0), i64 -8), !dbg !2902
  %280 = load %struct._object*, %struct._object** %m, align 8, !dbg !2903, !tbaa !2326
  %call288 = call i32 @PyModule_AddIntConstant(%struct._object* %280, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.252, i32 0, i32 0), i64 -7), !dbg !2904
  %281 = load %struct._object*, %struct._object** %m, align 8, !dbg !2905, !tbaa !2326
  %call289 = call i32 @PyModule_AddIntConstant(%struct._object* %281, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.253, i32 0, i32 0), i64 -11), !dbg !2906
  %282 = load %struct._object*, %struct._object** %m, align 8, !dbg !2907, !tbaa !2326
  %call290 = call i32 @PyModule_AddIntConstant(%struct._object* %282, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.254, i32 0, i32 0), i64 1), !dbg !2908
  %283 = load %struct._object*, %struct._object** %m, align 8, !dbg !2909, !tbaa !2326
  %call291 = call i32 @PyModule_AddIntConstant(%struct._object* %283, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.255, i32 0, i32 0), i64 2), !dbg !2910
  %284 = load %struct._object*, %struct._object** %m, align 8, !dbg !2911, !tbaa !2326
  %call292 = call i32 @PyModule_AddIntConstant(%struct._object* %284, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.256, i32 0, i32 0), i64 4), !dbg !2912
  %285 = load %struct._object*, %struct._object** %m, align 8, !dbg !2913, !tbaa !2326
  %call293 = call i32 @PyModule_AddIntConstant(%struct._object* %285, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.257, i32 0, i32 0), i64 1024), !dbg !2914
  %286 = load %struct._object*, %struct._object** %m, align 8, !dbg !2915, !tbaa !2326
  %call294 = call i32 @PyModule_AddIntConstant(%struct._object* %286, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.258, i32 0, i32 0), i64 16), !dbg !2916
  %287 = load %struct._object*, %struct._object** %m, align 8, !dbg !2917, !tbaa !2326
  %call295 = call i32 @PyModule_AddIntConstant(%struct._object* %287, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.259, i32 0, i32 0), i64 32), !dbg !2918
  %288 = load %struct._object*, %struct._object** %m, align 8, !dbg !2919, !tbaa !2326
  %call296 = call i32 @PyModule_AddIntConstant(%struct._object* %288, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.260, i32 0, i32 0), i64 8), !dbg !2920
  %289 = load %struct._object*, %struct._object** %m, align 8, !dbg !2921, !tbaa !2326
  %call297 = call i32 @PyModule_AddIntConstant(%struct._object* %289, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.261, i32 0, i32 0), i64 1025), !dbg !2922
  %290 = load %struct._object*, %struct._object** %m, align 8, !dbg !2923, !tbaa !2326
  %call298 = call i32 @PyModule_AddIntConstant(%struct._object* %290, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.262, i32 0, i32 0), i64 32), !dbg !2924
  %291 = load %struct._object*, %struct._object** %m, align 8, !dbg !2925, !tbaa !2326
  %call299 = call i32 @PyModule_AddIntConstant(%struct._object* %291, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.263, i32 0, i32 0), i64 4), !dbg !2926
  %292 = load %struct._object*, %struct._object** %m, align 8, !dbg !2927, !tbaa !2326
  %call300 = call i32 @PyModule_AddIntConstant(%struct._object* %292, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.264, i32 0, i32 0), i64 1), !dbg !2928
  %293 = load %struct._object*, %struct._object** %m, align 8, !dbg !2929, !tbaa !2326
  %call301 = call i32 @PyModule_AddIntConstant(%struct._object* %293, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.265, i32 0, i32 0), i64 8), !dbg !2930
  %294 = load %struct._object*, %struct._object** %m, align 8, !dbg !2931, !tbaa !2326
  %call302 = call i32 @PyModule_AddIntConstant(%struct._object* %294, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.266, i32 0, i32 0), i64 2), !dbg !2932
  %295 = load %struct._object*, %struct._object** %m, align 8, !dbg !2933, !tbaa !2326
  %call303 = call i32 @PyModule_AddIntConstant(%struct._object* %295, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.267, i32 0, i32 0), i64 16), !dbg !2934
  %296 = load %struct._object*, %struct._object** %m, align 8, !dbg !2935, !tbaa !2326
  %call304 = call i32 @PyModule_AddIntConstant(%struct._object* %296, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.268, i32 0, i32 0), i64 0), !dbg !2936
  %297 = load %struct._object*, %struct._object** %m, align 8, !dbg !2937, !tbaa !2326
  %call305 = call i32 @PyModule_AddIntConstant(%struct._object* %297, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.269, i32 0, i32 0), i64 1), !dbg !2938
  %298 = load %struct._object*, %struct._object** %m, align 8, !dbg !2939, !tbaa !2326
  %call306 = call i32 @PyModule_AddIntConstant(%struct._object* %298, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.270, i32 0, i32 0), i64 2), !dbg !2940
  %299 = load %struct._object*, %struct._object** %m, align 8, !dbg !2941, !tbaa !2326
  store %struct._object* %299, %struct._object** %retval, !dbg !2942
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !2942

cleanup:                                          ; preds = %if.end.45, %if.then.44, %if.then.36, %if.then.31, %if.then.23, %if.then.16, %if.then.9, %if.then.2, %if.then
  %300 = bitcast %struct._object** %has_ipv6 to i8*, !dbg !2943
  call void @llvm.lifetime.end(i64 8, i8* %300) #1, !dbg !2943
  %301 = bitcast %struct._object** %m to i8*, !dbg !2943
  call void @llvm.lifetime.end(i64 8, i8* %301) #1, !dbg !2943
  %302 = load %struct._object*, %struct._object** %retval, !dbg !2943
  ret %struct._object* %302, !dbg !2943
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

; Function Attrs: nounwind uwtable
define internal i32 @os_init() #0 {
entry:
  ret i32 1, !dbg !2944
}

declare %struct._object* @PyModule_Create2(%struct.PyModuleDef*, i32) #3

declare i32 @PyModule_AddObject(%struct._object*, i8*, %struct._object*) #3

declare %struct._object* @PyErr_NewException(i8*, %struct._object*, %struct._object*) #3

declare %struct._object* @PyCapsule_New(i8*, i8*, void (%struct._object*)*) #3

declare i32 @PyModule_AddIntConstant(%struct._object*, i8*, i64) #3

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define internal void @sock_dealloc(%struct.PySocketSockObject* %s) #0 {
entry:
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %exc = alloca %struct._object*, align 8
  %val = alloca %struct._object*, align 8
  %tb = alloca %struct._object*, align 8
  %old_refcount = alloca i64, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !829, metadata !2310), !dbg !2945
  %0 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !2946, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %0, i32 0, i32 1, !dbg !2947
  %1 = load i32, i32* %sock_fd, align 4, !dbg !2947, !tbaa !2948
  %cmp = icmp ne i32 %1, -1, !dbg !2952
  br i1 %cmp, label %if.then, label %if.end.10, !dbg !2953

if.then:                                          ; preds = %entry
  %2 = bitcast %struct._object** %exc to i8*, !dbg !2954
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !2954
  call void @llvm.dbg.declare(metadata %struct._object** %exc, metadata !830, metadata !2310), !dbg !2955
  %3 = bitcast %struct._object** %val to i8*, !dbg !2954
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !2954
  call void @llvm.dbg.declare(metadata %struct._object** %val, metadata !833, metadata !2310), !dbg !2956
  %4 = bitcast %struct._object** %tb to i8*, !dbg !2954
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !2954
  call void @llvm.dbg.declare(metadata %struct._object** %tb, metadata !834, metadata !2310), !dbg !2957
  %5 = bitcast i64* %old_refcount to i8*, !dbg !2958
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !2958
  call void @llvm.dbg.declare(metadata i64* %old_refcount, metadata !835, metadata !2310), !dbg !2959
  %6 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !2960, !tbaa !2326
  %7 = bitcast %struct.PySocketSockObject* %6 to %struct._object*, !dbg !2961
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0, !dbg !2962
  %8 = load i64, i64* %ob_refcnt, align 8, !dbg !2962, !tbaa !2335
  store i64 %8, i64* %old_refcount, align 8, !dbg !2959, !tbaa !2963
  %9 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !2964, !tbaa !2326
  %10 = bitcast %struct.PySocketSockObject* %9 to %struct._object*, !dbg !2965
  %ob_refcnt1 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0, !dbg !2966
  %11 = load i64, i64* %ob_refcnt1, align 8, !dbg !2967, !tbaa !2335
  %inc = add i64 %11, 1, !dbg !2967
  store i64 %inc, i64* %ob_refcnt1, align 8, !dbg !2967, !tbaa !2335
  call void @PyErr_Fetch(%struct._object** %exc, %struct._object** %val, %struct._object** %tb), !dbg !2968
  %12 = load %struct._object*, %struct._object** @PyExc_ResourceWarning, align 8, !dbg !2969, !tbaa !2326
  %13 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !2971, !tbaa !2326
  %call = call i32 (%struct._object*, i64, i8*, ...) @PyErr_WarnFormat(%struct._object* %12, i64 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.272, i32 0, i32 0), %struct.PySocketSockObject* %13), !dbg !2972
  %tobool = icmp ne i32 %call, 0, !dbg !2972
  br i1 %tobool, label %if.then.2, label %if.end.6, !dbg !2973

if.then.2:                                        ; preds = %if.then
  %14 = load %struct._object*, %struct._object** @PyExc_Warning, align 8, !dbg !2974, !tbaa !2326
  %call3 = call i32 @PyErr_ExceptionMatches(%struct._object* %14), !dbg !2976
  %tobool4 = icmp ne i32 %call3, 0, !dbg !2976
  br i1 %tobool4, label %if.then.5, label %if.end, !dbg !2977

if.then.5:                                        ; preds = %if.then.2
  %15 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !2978, !tbaa !2326
  %16 = bitcast %struct.PySocketSockObject* %15 to %struct._object*, !dbg !2979
  call void @PyErr_WriteUnraisable(%struct._object* %16), !dbg !2980
  br label %if.end, !dbg !2980

if.end:                                           ; preds = %if.then.5, %if.then.2
  br label %if.end.6, !dbg !2981

if.end.6:                                         ; preds = %if.end, %if.then
  %17 = load %struct._object*, %struct._object** %exc, align 8, !dbg !2983, !tbaa !2326
  %18 = load %struct._object*, %struct._object** %val, align 8, !dbg !2984, !tbaa !2326
  %19 = load %struct._object*, %struct._object** %tb, align 8, !dbg !2985, !tbaa !2326
  call void @PyErr_Restore(%struct._object* %17, %struct._object* %18, %struct._object* %19), !dbg !2986
  %20 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !2987, !tbaa !2326
  %sock_fd7 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %20, i32 0, i32 1, !dbg !2988
  %21 = load i32, i32* %sock_fd7, align 4, !dbg !2988, !tbaa !2948
  %call8 = call i32 @close(i32 %21), !dbg !2989
  %22 = load i64, i64* %old_refcount, align 8, !dbg !2990, !tbaa !2963
  %23 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !2991, !tbaa !2326
  %24 = bitcast %struct.PySocketSockObject* %23 to %struct._object*, !dbg !2992
  %ob_refcnt9 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0, !dbg !2993
  store i64 %22, i64* %ob_refcnt9, align 8, !dbg !2994, !tbaa !2335
  %25 = bitcast i64* %old_refcount to i8*, !dbg !2995
  call void @llvm.lifetime.end(i64 8, i8* %25) #1, !dbg !2995
  %26 = bitcast %struct._object** %tb to i8*, !dbg !2995
  call void @llvm.lifetime.end(i64 8, i8* %26) #1, !dbg !2995
  %27 = bitcast %struct._object** %val to i8*, !dbg !2995
  call void @llvm.lifetime.end(i64 8, i8* %27) #1, !dbg !2995
  %28 = bitcast %struct._object** %exc to i8*, !dbg !2995
  call void @llvm.lifetime.end(i64 8, i8* %28) #1, !dbg !2995
  br label %if.end.10, !dbg !2996

if.end.10:                                        ; preds = %if.end.6, %entry
  %29 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !2997, !tbaa !2326
  %30 = bitcast %struct.PySocketSockObject* %29 to %struct._object*, !dbg !2998
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !2999
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !2999, !tbaa !2318
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 38, !dbg !3000
  %32 = load void (i8*)*, void (i8*)** %tp_free, align 8, !dbg !3000, !tbaa !3001
  %33 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3004, !tbaa !2326
  %34 = bitcast %struct.PySocketSockObject* %33 to %struct._object*, !dbg !3005
  %35 = bitcast %struct._object* %34 to i8*, !dbg !3005
  call void %32(i8* %35), !dbg !3006
  ret void, !dbg !3007
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_repr(%struct.PySocketSockObject* %s) #0 {
entry:
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !840, metadata !2310), !dbg !3008
  %0 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3009, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %0, i32 0, i32 1, !dbg !3010
  %1 = load i32, i32* %sock_fd, align 4, !dbg !3010, !tbaa !2948
  %conv = sext i32 %1 to i64, !dbg !3011
  %2 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3012, !tbaa !2326
  %sock_family = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %2, i32 0, i32 2, !dbg !3013
  %3 = load i32, i32* %sock_family, align 4, !dbg !3013, !tbaa !3014
  %4 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3015, !tbaa !2326
  %sock_type = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %4, i32 0, i32 3, !dbg !3016
  %5 = load i32, i32* %sock_type, align 4, !dbg !3016, !tbaa !3017
  %6 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3018, !tbaa !2326
  %sock_proto = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %6, i32 0, i32 4, !dbg !3019
  %7 = load i32, i32* %sock_proto, align 4, !dbg !3019, !tbaa !3020
  %call = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.273, i32 0, i32 0), i64 %conv, i32 %3, i32 %5, i32 %7), !dbg !3021
  ret %struct._object* %call, !dbg !3022
}

declare %struct._object* @PyObject_GenericGetAttr(%struct._object*, %struct._object*) #3

; Function Attrs: nounwind uwtable
define internal i32 @sock_initobj(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %s = alloca %struct.PySocketSockObject*, align 8
  %fdobj = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %family = alloca i32, align 4
  %type = alloca i32, align 4
  %proto = alloca i32, align 4
  %atomic_flag_works = alloca i32*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1570, metadata !2310), !dbg !3023
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1571, metadata !2310), !dbg !3024
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %kwds.addr, metadata !1572, metadata !2310), !dbg !3025
  %0 = bitcast %struct.PySocketSockObject** %s to i8*, !dbg !3026
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !3026
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s, metadata !1573, metadata !2310), !dbg !3027
  %1 = load %struct._object*, %struct._object** %self.addr, align 8, !dbg !3028, !tbaa !2326
  %2 = bitcast %struct._object* %1 to %struct.PySocketSockObject*, !dbg !3029
  store %struct.PySocketSockObject* %2, %struct.PySocketSockObject** %s, align 8, !dbg !3027, !tbaa !2326
  %3 = bitcast %struct._object** %fdobj to i8*, !dbg !3030
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !3030
  call void @llvm.dbg.declare(metadata %struct._object** %fdobj, metadata !1574, metadata !2310), !dbg !3031
  store %struct._object* null, %struct._object** %fdobj, align 8, !dbg !3031, !tbaa !2326
  %4 = bitcast i32* %fd to i8*, !dbg !3032
  call void @llvm.lifetime.start(i64 4, i8* %4) #1, !dbg !3032
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !1575, metadata !2310), !dbg !3033
  store i32 -1, i32* %fd, align 4, !dbg !3033, !tbaa !3034
  %5 = bitcast i32* %family to i8*, !dbg !3035
  call void @llvm.lifetime.start(i64 4, i8* %5) #1, !dbg !3035
  call void @llvm.dbg.declare(metadata i32* %family, metadata !1576, metadata !2310), !dbg !3036
  store i32 2, i32* %family, align 4, !dbg !3036, !tbaa !3034
  %6 = bitcast i32* %type to i8*, !dbg !3035
  call void @llvm.lifetime.start(i64 4, i8* %6) #1, !dbg !3035
  call void @llvm.dbg.declare(metadata i32* %type, metadata !1577, metadata !2310), !dbg !3037
  store i32 1, i32* %type, align 4, !dbg !3037, !tbaa !3034
  %7 = bitcast i32* %proto to i8*, !dbg !3035
  call void @llvm.lifetime.start(i64 4, i8* %7) #1, !dbg !3035
  call void @llvm.dbg.declare(metadata i32* %proto, metadata !1578, metadata !2310), !dbg !3038
  store i32 0, i32* %proto, align 4, !dbg !3038, !tbaa !3034
  %8 = bitcast i32** %atomic_flag_works to i8*, !dbg !3039
  call void @llvm.lifetime.start(i64 8, i8* %8) #1, !dbg !3039
  call void @llvm.dbg.declare(metadata i32** %atomic_flag_works, metadata !1579, metadata !2310), !dbg !3040
  store i32* @sock_cloexec_works, i32** %atomic_flag_works, align 8, !dbg !3040, !tbaa !2326
  %9 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !3041, !tbaa !2326
  %10 = load %struct._object*, %struct._object** %kwds.addr, align 8, !dbg !3043, !tbaa !2326
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %9, %struct._object* %10, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.395, i32 0, i32 0), i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @sock_initobj.keywords, i32 0, i32 0), i32* %family, i32* %type, i32* %proto, %struct._object** %fdobj), !dbg !3044
  %tobool = icmp ne i32 %call, 0, !dbg !3044
  br i1 %tobool, label %if.end, label %if.then, !dbg !3045

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, !dbg !3046
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3046

if.end:                                           ; preds = %entry
  %11 = load %struct._object*, %struct._object** %fdobj, align 8, !dbg !3047, !tbaa !2326
  %cmp = icmp ne %struct._object* %11, null, !dbg !3048
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !3049

land.lhs.true:                                    ; preds = %if.end
  %12 = load %struct._object*, %struct._object** %fdobj, align 8, !dbg !3050, !tbaa !2326
  %cmp1 = icmp ne %struct._object* %12, @_Py_NoneStruct, !dbg !3052
  br i1 %cmp1, label %if.then.2, label %if.else, !dbg !3053

if.then.2:                                        ; preds = %land.lhs.true
  %13 = load %struct._object*, %struct._object** %fdobj, align 8, !dbg !3054, !tbaa !2326
  %call3 = call i64 @PyLong_AsLong(%struct._object* %13), !dbg !3057
  %conv = trunc i64 %call3 to i32, !dbg !3058
  store i32 %conv, i32* %fd, align 4, !dbg !3059, !tbaa !3034
  %14 = load i32, i32* %fd, align 4, !dbg !3060, !tbaa !3034
  %cmp4 = icmp eq i32 %14, -1, !dbg !3062
  br i1 %cmp4, label %land.lhs.true.6, label %if.end.10, !dbg !3063

land.lhs.true.6:                                  ; preds = %if.then.2
  %call7 = call %struct._object* @PyErr_Occurred(), !dbg !3064
  %tobool8 = icmp ne %struct._object* %call7, null, !dbg !3064
  br i1 %tobool8, label %if.then.9, label %if.end.10, !dbg !3066

if.then.9:                                        ; preds = %land.lhs.true.6
  store i32 -1, i32* %retval, !dbg !3067
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3067

if.end.10:                                        ; preds = %land.lhs.true.6, %if.then.2
  %15 = load i32, i32* %fd, align 4, !dbg !3068, !tbaa !3034
  %cmp11 = icmp eq i32 %15, -1, !dbg !3070
  br i1 %cmp11, label %if.then.13, label %if.end.14, !dbg !3071

if.then.13:                                       ; preds = %if.end.10
  %16 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !3072, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.396, i32 0, i32 0)), !dbg !3074
  store i32 -1, i32* %retval, !dbg !3075
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3075

if.end.14:                                        ; preds = %if.end.10
  br label %if.end.49, !dbg !3076

if.else:                                          ; preds = %land.lhs.true, %if.end
  %17 = bitcast %struct._ts** %_save to i8*, !dbg !3077
  call void @llvm.lifetime.start(i64 8, i8* %17) #1, !dbg !3077
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1580, metadata !2310), !dbg !3078
  %call15 = call %struct._ts* @PyEval_SaveThread(), !dbg !3079
  store %struct._ts* %call15, %struct._ts** %_save, align 8, !dbg !3080, !tbaa !2326
  %18 = load i32, i32* @sock_cloexec_works, align 4, !dbg !3081, !tbaa !3034
  %cmp16 = icmp ne i32 %18, 0, !dbg !3083
  br i1 %cmp16, label %if.then.18, label %if.else.35, !dbg !3084

if.then.18:                                       ; preds = %if.else
  %19 = load i32, i32* %family, align 4, !dbg !3085, !tbaa !3034
  %20 = load i32, i32* %type, align 4, !dbg !3087, !tbaa !3034
  %or = or i32 %20, 524288, !dbg !3088
  %21 = load i32, i32* %proto, align 4, !dbg !3089, !tbaa !3034
  %call19 = call i32 @socket(i32 %19, i32 %or, i32 %21) #1, !dbg !3090
  store i32 %call19, i32* %fd, align 4, !dbg !3091, !tbaa !3034
  %22 = load i32, i32* @sock_cloexec_works, align 4, !dbg !3092, !tbaa !3034
  %cmp20 = icmp eq i32 %22, -1, !dbg !3094
  br i1 %cmp20, label %if.then.22, label %if.end.34, !dbg !3095

if.then.22:                                       ; preds = %if.then.18
  %23 = load i32, i32* %fd, align 4, !dbg !3096, !tbaa !3034
  %cmp23 = icmp sge i32 %23, 0, !dbg !3099
  br i1 %cmp23, label %if.then.25, label %if.else.26, !dbg !3100

if.then.25:                                       ; preds = %if.then.22
  store i32 1, i32* @sock_cloexec_works, align 4, !dbg !3101, !tbaa !3034
  br label %if.end.33, !dbg !3103

if.else.26:                                       ; preds = %if.then.22
  %call27 = call i32* @__errno_location() #2, !dbg !3104
  %24 = load i32, i32* %call27, align 4, !dbg !3106, !tbaa !3034
  %cmp28 = icmp eq i32 %24, 22, !dbg !3107
  br i1 %cmp28, label %if.then.30, label %if.end.32, !dbg !3108

if.then.30:                                       ; preds = %if.else.26
  store i32 0, i32* @sock_cloexec_works, align 4, !dbg !3109, !tbaa !3034
  %25 = load i32, i32* %family, align 4, !dbg !3111, !tbaa !3034
  %26 = load i32, i32* %type, align 4, !dbg !3112, !tbaa !3034
  %27 = load i32, i32* %proto, align 4, !dbg !3113, !tbaa !3034
  %call31 = call i32 @socket(i32 %25, i32 %26, i32 %27) #1, !dbg !3114
  store i32 %call31, i32* %fd, align 4, !dbg !3115, !tbaa !3034
  br label %if.end.32, !dbg !3116

if.end.32:                                        ; preds = %if.then.30, %if.else.26
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.then.25
  br label %if.end.34, !dbg !3117

if.end.34:                                        ; preds = %if.end.33, %if.then.18
  br label %if.end.37, !dbg !3118

if.else.35:                                       ; preds = %if.else
  %28 = load i32, i32* %family, align 4, !dbg !3119, !tbaa !3034
  %29 = load i32, i32* %type, align 4, !dbg !3121, !tbaa !3034
  %30 = load i32, i32* %proto, align 4, !dbg !3122, !tbaa !3034
  %call36 = call i32 @socket(i32 %28, i32 %29, i32 %30) #1, !dbg !3123
  store i32 %call36, i32* %fd, align 4, !dbg !3124, !tbaa !3034
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.35, %if.end.34
  %31 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !3125, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %31), !dbg !3126
  %32 = bitcast %struct._ts** %_save to i8*, !dbg !3127
  call void @llvm.lifetime.end(i64 8, i8* %32) #1, !dbg !3127
  %33 = load i32, i32* %fd, align 4, !dbg !3128, !tbaa !3034
  %cmp38 = icmp eq i32 %33, -1, !dbg !3130
  br i1 %cmp38, label %if.then.40, label %if.end.42, !dbg !3131

if.then.40:                                       ; preds = %if.end.37
  %call41 = call %struct._object* @set_error(), !dbg !3132
  store i32 -1, i32* %retval, !dbg !3134
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3134

if.end.42:                                        ; preds = %if.end.37
  %34 = load i32, i32* %fd, align 4, !dbg !3135, !tbaa !3034
  %35 = load i32*, i32** %atomic_flag_works, align 8, !dbg !3137, !tbaa !2326
  %call43 = call i32 @_Py_set_inheritable(i32 %34, i32 0, i32* %35), !dbg !3138
  %cmp44 = icmp slt i32 %call43, 0, !dbg !3139
  br i1 %cmp44, label %if.then.46, label %if.end.48, !dbg !3140

if.then.46:                                       ; preds = %if.end.42
  %36 = load i32, i32* %fd, align 4, !dbg !3141, !tbaa !3034
  %call47 = call i32 @close(i32 %36), !dbg !3143
  store i32 -1, i32* %retval, !dbg !3144
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3144

if.end.48:                                        ; preds = %if.end.42
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %if.end.14
  %37 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s, align 8, !dbg !3145, !tbaa !2326
  %38 = load i32, i32* %fd, align 4, !dbg !3146, !tbaa !3034
  %39 = load i32, i32* %family, align 4, !dbg !3147, !tbaa !3034
  %40 = load i32, i32* %type, align 4, !dbg !3148, !tbaa !3034
  %41 = load i32, i32* %proto, align 4, !dbg !3149, !tbaa !3034
  call void @init_sockobject(%struct.PySocketSockObject* %37, i32 %38, i32 %39, i32 %40, i32 %41), !dbg !3150
  store i32 0, i32* %retval, !dbg !3151
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3151

cleanup:                                          ; preds = %if.end.49, %if.then.46, %if.then.40, %if.then.13, %if.then.9, %if.then
  %42 = bitcast i32** %atomic_flag_works to i8*, !dbg !3152
  call void @llvm.lifetime.end(i64 8, i8* %42) #1, !dbg !3152
  %43 = bitcast i32* %proto to i8*, !dbg !3152
  call void @llvm.lifetime.end(i64 4, i8* %43) #1, !dbg !3152
  %44 = bitcast i32* %type to i8*, !dbg !3152
  call void @llvm.lifetime.end(i64 4, i8* %44) #1, !dbg !3152
  %45 = bitcast i32* %family to i8*, !dbg !3152
  call void @llvm.lifetime.end(i64 4, i8* %45) #1, !dbg !3152
  %46 = bitcast i32* %fd to i8*, !dbg !3152
  call void @llvm.lifetime.end(i64 4, i8* %46) #1, !dbg !3152
  %47 = bitcast %struct._object** %fdobj to i8*, !dbg !3152
  call void @llvm.lifetime.end(i64 8, i8* %47) #1, !dbg !3152
  %48 = bitcast %struct.PySocketSockObject** %s to i8*, !dbg !3152
  call void @llvm.lifetime.end(i64 8, i8* %48) #1, !dbg !3152
  %49 = load i32, i32* %retval, !dbg !3152
  ret i32 %49, !dbg !3152
}

declare %struct._object* @PyType_GenericAlloc(%struct._typeobject*, i64) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %new = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._typeobject** %type.addr, metadata !1599, metadata !2310), !dbg !3153
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1600, metadata !2310), !dbg !3154
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %kwds.addr, metadata !1601, metadata !2310), !dbg !3155
  %0 = bitcast %struct._object** %new to i8*, !dbg !3156
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !3156
  call void @llvm.dbg.declare(metadata %struct._object** %new, metadata !1602, metadata !2310), !dbg !3157
  %1 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8, !dbg !3158, !tbaa !2326
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 36, !dbg !3159
  %2 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8, !dbg !3159, !tbaa !3160
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8, !dbg !3161, !tbaa !2326
  %call = call %struct._object* %2(%struct._typeobject* %3, i64 0), !dbg !3158
  store %struct._object* %call, %struct._object** %new, align 8, !dbg !3162, !tbaa !2326
  %4 = load %struct._object*, %struct._object** %new, align 8, !dbg !3163, !tbaa !2326
  %cmp = icmp ne %struct._object* %4, null, !dbg !3165
  br i1 %cmp, label %if.then, label %if.end, !dbg !3166

if.then:                                          ; preds = %entry
  %5 = load %struct._object*, %struct._object** %new, align 8, !dbg !3167, !tbaa !2326
  %6 = bitcast %struct._object* %5 to %struct.PySocketSockObject*, !dbg !3169
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %6, i32 0, i32 1, !dbg !3170
  store i32 -1, i32* %sock_fd, align 4, !dbg !3171, !tbaa !2948
  %7 = load %struct._object*, %struct._object** %new, align 8, !dbg !3172, !tbaa !2326
  %8 = bitcast %struct._object* %7 to %struct.PySocketSockObject*, !dbg !3173
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %8, i32 0, i32 6, !dbg !3174
  store double -1.000000e+00, double* %sock_timeout, align 8, !dbg !3175, !tbaa !3176
  %9 = load %struct._object*, %struct._object** %new, align 8, !dbg !3177, !tbaa !2326
  %10 = bitcast %struct._object* %9 to %struct.PySocketSockObject*, !dbg !3178
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %10, i32 0, i32 5, !dbg !3179
  store %struct._object* ()* @set_error, %struct._object* ()** %errorhandler, align 8, !dbg !3180, !tbaa !3181
  br label %if.end, !dbg !3182

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct._object*, %struct._object** %new, align 8, !dbg !3183, !tbaa !2326
  %12 = bitcast %struct._object** %new to i8*, !dbg !3184
  call void @llvm.lifetime.end(i64 8, i8* %12) #1, !dbg !3184
  ret %struct._object* %11, !dbg !3185
}

declare void @PyObject_Free(i8*) #3

declare void @PyErr_Fetch(%struct._object**, %struct._object**, %struct._object**) #3

declare i32 @PyErr_WarnFormat(%struct._object*, i64, i8*, ...) #3

declare i32 @PyErr_ExceptionMatches(%struct._object*) #3

declare void @PyErr_WriteUnraisable(%struct._object*) #3

declare void @PyErr_Restore(%struct._object*, %struct._object*, %struct._object*) #3

declare i32 @close(i32) #3

declare %struct._object* @PyUnicode_FromFormat(i8*, ...) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_accept(%struct.PySocketSockObject* %s) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %addrbuf = alloca %union.sock_addr, align 8
  %newfd = alloca i32, align 4
  %addrlen = alloca i32, align 4
  %sock = alloca %struct._object*, align 8
  %addr = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %timeout = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %now = alloca %struct.timeval, align 8
  %deadline = alloca %struct.timeval, align 8
  %interval = alloca double, align 8
  %has_timeout = alloca i32, align 4
  %_save = alloca %struct._ts*, align 8
  %agg.tmp = alloca %union.__SOCKADDR_ARG, align 8
  %agg.tmp40 = alloca %union.__SOCKADDR_ARG, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp119 = alloca %struct._object*, align 8
  %_py_decref_tmp124 = alloca %struct._object*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !843, metadata !2310), !dbg !3186
  %0 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3187
  call void @llvm.lifetime.start(i64 128, i8* %0) #1, !dbg !3187
  call void @llvm.dbg.declare(metadata %union.sock_addr* %addrbuf, metadata !844, metadata !2310), !dbg !3188
  %1 = bitcast i32* %newfd to i8*, !dbg !3189
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !3189
  call void @llvm.dbg.declare(metadata i32* %newfd, metadata !845, metadata !2310), !dbg !3190
  store i32 -1, i32* %newfd, align 4, !dbg !3190, !tbaa !3034
  %2 = bitcast i32* %addrlen to i8*, !dbg !3191
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !3191
  call void @llvm.dbg.declare(metadata i32* %addrlen, metadata !846, metadata !2310), !dbg !3192
  %3 = bitcast %struct._object** %sock to i8*, !dbg !3193
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !3193
  call void @llvm.dbg.declare(metadata %struct._object** %sock, metadata !847, metadata !2310), !dbg !3194
  store %struct._object* null, %struct._object** %sock, align 8, !dbg !3194, !tbaa !2326
  %4 = bitcast %struct._object** %addr to i8*, !dbg !3195
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !3195
  call void @llvm.dbg.declare(metadata %struct._object** %addr, metadata !848, metadata !2310), !dbg !3196
  store %struct._object* null, %struct._object** %addr, align 8, !dbg !3196, !tbaa !2326
  %5 = bitcast %struct._object** %res to i8*, !dbg !3197
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !3197
  call void @llvm.dbg.declare(metadata %struct._object** %res, metadata !849, metadata !2310), !dbg !3198
  store %struct._object* null, %struct._object** %res, align 8, !dbg !3198, !tbaa !2326
  %6 = bitcast i32* %timeout to i8*, !dbg !3199
  call void @llvm.lifetime.start(i64 4, i8* %6) #1, !dbg !3199
  call void @llvm.dbg.declare(metadata i32* %timeout, metadata !850, metadata !2310), !dbg !3200
  %7 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3201, !tbaa !2326
  %call = call i32 @getsockaddrlen(%struct.PySocketSockObject* %7, i32* %addrlen), !dbg !3203
  %tobool = icmp ne i32 %call, 0, !dbg !3203
  br i1 %tobool, label %if.end, label %if.then, !dbg !3204

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !3205
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.139, !dbg !3205

if.end:                                           ; preds = %entry
  %8 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3206
  %9 = load i32, i32* %addrlen, align 4, !dbg !3207, !tbaa !3034
  %conv = zext i32 %9 to i64, !dbg !3207
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 %conv, i32 8, i1 false), !dbg !3206
  %10 = bitcast %struct.timeval* %now to i8*, !dbg !3208
  call void @llvm.lifetime.start(i64 16, i8* %10) #1, !dbg !3208
  call void @llvm.dbg.declare(metadata %struct.timeval* %now, metadata !851, metadata !2310), !dbg !3209
  %11 = bitcast %struct.timeval* %deadline to i8*, !dbg !3208
  call void @llvm.lifetime.start(i64 16, i8* %11) #1, !dbg !3208
  call void @llvm.dbg.declare(metadata %struct.timeval* %deadline, metadata !853, metadata !2310), !dbg !3210
  %12 = bitcast %struct.timeval* %deadline to i8*, !dbg !3210
  call void @llvm.memset.p0i8.i64(i8* %12, i8 0, i64 16, i32 8, i1 false), !dbg !3210
  %13 = bitcast double* %interval to i8*, !dbg !3211
  call void @llvm.lifetime.start(i64 8, i8* %13) #1, !dbg !3211
  call void @llvm.dbg.declare(metadata double* %interval, metadata !854, metadata !2310), !dbg !3212
  %14 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3213, !tbaa !2326
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %14, i32 0, i32 6, !dbg !3214
  %15 = load double, double* %sock_timeout, align 8, !dbg !3214, !tbaa !3176
  store double %15, double* %interval, align 8, !dbg !3212, !tbaa !3215
  %16 = bitcast i32* %has_timeout to i8*, !dbg !3216
  call void @llvm.lifetime.start(i64 4, i8* %16) #1, !dbg !3216
  call void @llvm.dbg.declare(metadata i32* %has_timeout, metadata !855, metadata !2310), !dbg !3217
  %17 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3218, !tbaa !2326
  %sock_timeout1 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %17, i32 0, i32 6, !dbg !3219
  %18 = load double, double* %sock_timeout1, align 8, !dbg !3219, !tbaa !3176
  %cmp = fcmp ogt double %18, 0.000000e+00, !dbg !3220
  %conv2 = zext i1 %cmp to i32, !dbg !3220
  store i32 %conv2, i32* %has_timeout, align 4, !dbg !3217, !tbaa !3034
  %19 = load i32, i32* %has_timeout, align 4, !dbg !3221, !tbaa !3034
  %tobool3 = icmp ne i32 %19, 0, !dbg !3221
  br i1 %tobool3, label %if.then.4, label %if.end.16, !dbg !3223

if.then.4:                                        ; preds = %if.end
  call void @_PyTime_gettimeofday(%struct.timeval* %now), !dbg !3224
  %20 = bitcast %struct.timeval* %deadline to i8*, !dbg !3227
  %21 = bitcast %struct.timeval* %now to i8*, !dbg !3227
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 16, i32 8, i1 false), !dbg !3227, !tbaa.struct !3228
  br label %do.body, !dbg !3229

do.body:                                          ; preds = %if.then.4
  %22 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3230, !tbaa !2326
  %sock_timeout5 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %22, i32 0, i32 6, !dbg !3233
  %23 = load double, double* %sock_timeout5, align 8, !dbg !3233, !tbaa !3176
  %conv6 = fptosi double %23 to i64, !dbg !3234
  %conv7 = sitofp i64 %conv6 to double, !dbg !3234
  %24 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3235, !tbaa !2326
  %sock_timeout8 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %24, i32 0, i32 6, !dbg !3236
  %25 = load double, double* %sock_timeout8, align 8, !dbg !3236, !tbaa !3176
  %sub = fsub double %conv7, %25, !dbg !3237
  %mul = fmul double %sub, 1.000000e+06, !dbg !3238
  %conv9 = fptosi double %mul to i64, !dbg !3239
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !3240
  %26 = load i64, i64* %tv_usec, align 8, !dbg !3241, !tbaa !3242
  %add = add i64 %26, %conv9, !dbg !3241
  store i64 %add, i64* %tv_usec, align 8, !dbg !3241, !tbaa !3242
  %27 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3244, !tbaa !2326
  %sock_timeout10 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %27, i32 0, i32 6, !dbg !3245
  %28 = load double, double* %sock_timeout10, align 8, !dbg !3245, !tbaa !3176
  %conv11 = fptosi double %28 to i64, !dbg !3246
  %tv_usec12 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !3247
  %29 = load i64, i64* %tv_usec12, align 8, !dbg !3247, !tbaa !3242
  %div = sdiv i64 %29, 1000000, !dbg !3248
  %add13 = add i64 %conv11, %div, !dbg !3249
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0, !dbg !3250
  %30 = load i64, i64* %tv_sec, align 8, !dbg !3251, !tbaa !3252
  %add14 = add i64 %30, %add13, !dbg !3251
  store i64 %add14, i64* %tv_sec, align 8, !dbg !3251, !tbaa !3252
  %tv_usec15 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !3253
  %31 = load i64, i64* %tv_usec15, align 8, !dbg !3254, !tbaa !3242
  %rem = srem i64 %31, 1000000, !dbg !3254
  store i64 %rem, i64* %tv_usec15, align 8, !dbg !3254, !tbaa !3242
  br label %do.cond, !dbg !3255

do.cond:                                          ; preds = %do.body
  br label %do.end, !dbg !3256

do.end:                                           ; preds = %do.cond
  br label %if.end.16, !dbg !3258

if.end.16:                                        ; preds = %do.end, %if.end
  br label %while.cond, !dbg !3260

while.cond:                                       ; preds = %if.end.60, %if.end.16
  br label %while.body, !dbg !3263

while.body:                                       ; preds = %while.cond
  %call17 = call i32* @__errno_location() #2, !dbg !3266
  store i32 0, i32* %call17, align 4, !dbg !3268, !tbaa !3034
  %32 = bitcast %struct._ts** %_save to i8*, !dbg !3269
  call void @llvm.lifetime.start(i64 8, i8* %32) #1, !dbg !3269
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !856, metadata !2310), !dbg !3270
  %call18 = call %struct._ts* @PyEval_SaveThread(), !dbg !3271
  store %struct._ts* %call18, %struct._ts** %_save, align 8, !dbg !3272, !tbaa !2326
  %33 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3273, !tbaa !2326
  %34 = load double, double* %interval, align 8, !dbg !3274, !tbaa !3215
  %call19 = call i32 @internal_select_ex(%struct.PySocketSockObject* %33, i32 0, double %34), !dbg !3275
  store i32 %call19, i32* %timeout, align 4, !dbg !3276, !tbaa !3034
  %35 = load i32, i32* %timeout, align 4, !dbg !3277, !tbaa !3034
  %tobool20 = icmp ne i32 %35, 0, !dbg !3277
  br i1 %tobool20, label %if.end.46, label %if.then.21, !dbg !3279

if.then.21:                                       ; preds = %while.body
  %36 = load i32, i32* @sock_accept.accept4_works, align 4, !dbg !3280, !tbaa !3034
  %cmp22 = icmp ne i32 %36, 0, !dbg !3283
  br i1 %cmp22, label %if.then.24, label %if.end.35, !dbg !3284

if.then.24:                                       ; preds = %if.then.21
  %37 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3285, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %37, i32 0, i32 1, !dbg !3287
  %38 = load i32, i32* %sock_fd, align 4, !dbg !3287, !tbaa !2948
  %__sockaddr__ = bitcast %union.__SOCKADDR_ARG* %agg.tmp to %struct.sockaddr**, !dbg !3288
  %sa = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !3289
  store %struct.sockaddr* %sa, %struct.sockaddr** %__sockaddr__, align 8, !dbg !3288, !tbaa !2326
  %coerce.dive = getelementptr %union.__SOCKADDR_ARG, %union.__SOCKADDR_ARG* %agg.tmp, i32 0, i32 0, !dbg !3290
  %39 = load %struct.sockaddr*, %struct.sockaddr** %coerce.dive, align 8, !dbg !3290
  %call25 = call i32 @accept4(i32 %38, %struct.sockaddr* %39, i32* %addrlen, i32 524288), !dbg !3290
  store i32 %call25, i32* %newfd, align 4, !dbg !3291, !tbaa !3034
  %40 = load i32, i32* %newfd, align 4, !dbg !3292, !tbaa !3034
  %cmp26 = icmp eq i32 %40, -1, !dbg !3294
  br i1 %cmp26, label %land.lhs.true, label %if.end.34, !dbg !3295

land.lhs.true:                                    ; preds = %if.then.24
  %41 = load i32, i32* @sock_accept.accept4_works, align 4, !dbg !3296, !tbaa !3034
  %cmp28 = icmp eq i32 %41, -1, !dbg !3298
  br i1 %cmp28, label %if.then.30, label %if.end.34, !dbg !3299

if.then.30:                                       ; preds = %land.lhs.true
  %call31 = call i32* @__errno_location() #2, !dbg !3300
  %42 = load i32, i32* %call31, align 4, !dbg !3302, !tbaa !3034
  %cmp32 = icmp ne i32 %42, 38, !dbg !3303
  %conv33 = zext i1 %cmp32 to i32, !dbg !3303
  store i32 %conv33, i32* @sock_accept.accept4_works, align 4, !dbg !3304, !tbaa !3034
  br label %if.end.34, !dbg !3305

if.end.34:                                        ; preds = %if.then.30, %land.lhs.true, %if.then.24
  br label %if.end.35, !dbg !3306

if.end.35:                                        ; preds = %if.end.34, %if.then.21
  %43 = load i32, i32* @sock_accept.accept4_works, align 4, !dbg !3307, !tbaa !3034
  %cmp36 = icmp eq i32 %43, 0, !dbg !3309
  br i1 %cmp36, label %if.then.38, label %if.end.45, !dbg !3310

if.then.38:                                       ; preds = %if.end.35
  %44 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3311, !tbaa !2326
  %sock_fd39 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %44, i32 0, i32 1, !dbg !3312
  %45 = load i32, i32* %sock_fd39, align 4, !dbg !3312, !tbaa !2948
  %__sockaddr__41 = bitcast %union.__SOCKADDR_ARG* %agg.tmp40 to %struct.sockaddr**, !dbg !3313
  %sa42 = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !3314
  store %struct.sockaddr* %sa42, %struct.sockaddr** %__sockaddr__41, align 8, !dbg !3313, !tbaa !2326
  %coerce.dive43 = getelementptr %union.__SOCKADDR_ARG, %union.__SOCKADDR_ARG* %agg.tmp40, i32 0, i32 0, !dbg !3315
  %46 = load %struct.sockaddr*, %struct.sockaddr** %coerce.dive43, align 8, !dbg !3315
  %call44 = call i32 @accept(i32 %45, %struct.sockaddr* %46, i32* %addrlen), !dbg !3315
  store i32 %call44, i32* %newfd, align 4, !dbg !3316, !tbaa !3034
  br label %if.end.45, !dbg !3317

if.end.45:                                        ; preds = %if.then.38, %if.end.35
  br label %if.end.46, !dbg !3318

if.end.46:                                        ; preds = %if.end.45, %while.body
  %47 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !3319, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %47), !dbg !3320
  %48 = bitcast %struct._ts** %_save to i8*, !dbg !3321
  call void @llvm.lifetime.end(i64 8, i8* %48) #1, !dbg !3321
  %49 = load i32, i32* %timeout, align 4, !dbg !3322, !tbaa !3034
  %cmp47 = icmp eq i32 %49, 1, !dbg !3324
  br i1 %cmp47, label %if.then.49, label %if.end.50, !dbg !3325

if.then.49:                                       ; preds = %if.end.46
  %50 = load %struct._object*, %struct._object** @socket_timeout, align 8, !dbg !3326, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %50, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.300, i32 0, i32 0)), !dbg !3328
  store %struct._object* null, %struct._object** %retval, !dbg !3329
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3329

if.end.50:                                        ; preds = %if.end.46
  %51 = load i32, i32* %has_timeout, align 4, !dbg !3330, !tbaa !3034
  %tobool51 = icmp ne i32 %51, 0, !dbg !3330
  br i1 %tobool51, label %lor.lhs.false, label %if.then.59, !dbg !3332

lor.lhs.false:                                    ; preds = %if.end.50
  %call52 = call i32* @__errno_location() #2, !dbg !3333
  %52 = load i32, i32* %call52, align 4, !dbg !3335, !tbaa !3034
  %cmp53 = icmp eq i32 %52, 11, !dbg !3336
  br i1 %cmp53, label %if.end.60, label %land.lhs.true.55, !dbg !3337

land.lhs.true.55:                                 ; preds = %lor.lhs.false
  %call56 = call i32* @__errno_location() #2, !dbg !3338
  %53 = load i32, i32* %call56, align 4, !dbg !3340, !tbaa !3034
  %cmp57 = icmp eq i32 %53, 11, !dbg !3341
  br i1 %cmp57, label %if.end.60, label %if.then.59, !dbg !3342

if.then.59:                                       ; preds = %land.lhs.true.55, %if.end.50
  br label %while.end, !dbg !3343

if.end.60:                                        ; preds = %land.lhs.true.55, %lor.lhs.false
  call void @_PyTime_gettimeofday(%struct.timeval* %now), !dbg !3346
  %tv_sec61 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0, !dbg !3349
  %54 = load i64, i64* %tv_sec61, align 8, !dbg !3349, !tbaa !3252
  %tv_sec62 = getelementptr inbounds %struct.timeval, %struct.timeval* %now, i32 0, i32 0, !dbg !3350
  %55 = load i64, i64* %tv_sec62, align 8, !dbg !3350, !tbaa !3252
  %sub63 = sub i64 %54, %55, !dbg !3351
  %conv64 = sitofp i64 %sub63 to double, !dbg !3352
  %tv_usec65 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !3353
  %56 = load i64, i64* %tv_usec65, align 8, !dbg !3353, !tbaa !3242
  %tv_usec66 = getelementptr inbounds %struct.timeval, %struct.timeval* %now, i32 0, i32 1, !dbg !3354
  %57 = load i64, i64* %tv_usec66, align 8, !dbg !3354, !tbaa !3242
  %sub67 = sub i64 %56, %57, !dbg !3355
  %conv68 = sitofp i64 %sub67 to double, !dbg !3356
  %mul69 = fmul double %conv68, 1.000000e-06, !dbg !3357
  %add70 = fadd double %conv64, %mul69, !dbg !3358
  store double %add70, double* %interval, align 8, !dbg !3359, !tbaa !3215
  br label %while.cond, !dbg !3360

while.end:                                        ; preds = %if.then.59
  store i32 0, i32* %cleanup.dest.slot, !dbg !3361
  br label %cleanup, !dbg !3361

cleanup:                                          ; preds = %while.end, %if.then.49
  %58 = bitcast i32* %has_timeout to i8*, !dbg !3363
  call void @llvm.lifetime.end(i64 4, i8* %58) #1, !dbg !3363
  %59 = bitcast double* %interval to i8*, !dbg !3363
  call void @llvm.lifetime.end(i64 8, i8* %59) #1, !dbg !3363
  %60 = bitcast %struct.timeval* %deadline to i8*, !dbg !3363
  call void @llvm.lifetime.end(i64 16, i8* %60) #1, !dbg !3363
  %61 = bitcast %struct.timeval* %now to i8*, !dbg !3363
  call void @llvm.lifetime.end(i64 16, i8* %61) #1, !dbg !3363
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  %62 = load i32, i32* %newfd, align 4, !dbg !3365, !tbaa !3034
  %cmp74 = icmp eq i32 %62, -1, !dbg !3367
  br i1 %cmp74, label %if.then.76, label %if.end.78, !dbg !3368

if.then.76:                                       ; preds = %cleanup.cont
  %63 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3369, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %63, i32 0, i32 5, !dbg !3370
  %64 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !3370, !tbaa !3181
  %call77 = call %struct._object* %64(), !dbg !3369
  store %struct._object* %call77, %struct._object** %retval, !dbg !3371
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.139, !dbg !3371

if.end.78:                                        ; preds = %cleanup.cont
  %65 = load i32, i32* @sock_accept.accept4_works, align 4, !dbg !3372, !tbaa !3034
  %tobool79 = icmp ne i32 %65, 0, !dbg !3372
  br i1 %tobool79, label %if.end.87, label %if.then.80, !dbg !3374

if.then.80:                                       ; preds = %if.end.78
  %66 = load i32, i32* %newfd, align 4, !dbg !3375, !tbaa !3034
  %call81 = call i32 @_Py_set_inheritable(i32 %66, i32 0, i32* null), !dbg !3378
  %cmp82 = icmp slt i32 %call81, 0, !dbg !3379
  br i1 %cmp82, label %if.then.84, label %if.end.86, !dbg !3380

if.then.84:                                       ; preds = %if.then.80
  %67 = load i32, i32* %newfd, align 4, !dbg !3381, !tbaa !3034
  %call85 = call i32 @close(i32 %67), !dbg !3383
  br label %finally, !dbg !3384

if.end.86:                                        ; preds = %if.then.80
  br label %if.end.87, !dbg !3385

if.end.87:                                        ; preds = %if.end.86, %if.end.78
  %68 = load i32, i32* %newfd, align 4, !dbg !3386, !tbaa !3034
  %conv88 = sext i32 %68 to i64, !dbg !3387
  %call89 = call %struct._object* @PyLong_FromLong(i64 %conv88), !dbg !3388
  store %struct._object* %call89, %struct._object** %sock, align 8, !dbg !3389, !tbaa !2326
  %69 = load %struct._object*, %struct._object** %sock, align 8, !dbg !3390, !tbaa !2326
  %cmp90 = icmp eq %struct._object* %69, null, !dbg !3392
  br i1 %cmp90, label %if.then.92, label %if.end.94, !dbg !3393

if.then.92:                                       ; preds = %if.end.87
  %70 = load i32, i32* %newfd, align 4, !dbg !3394, !tbaa !3034
  %call93 = call i32 @close(i32 %70), !dbg !3396
  br label %finally, !dbg !3397

if.end.94:                                        ; preds = %if.end.87
  %71 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3398, !tbaa !2326
  %sock_fd95 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %71, i32 0, i32 1, !dbg !3399
  %72 = load i32, i32* %sock_fd95, align 4, !dbg !3399, !tbaa !2948
  %sa96 = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !3400
  %73 = load i32, i32* %addrlen, align 4, !dbg !3401, !tbaa !3034
  %conv97 = zext i32 %73 to i64, !dbg !3401
  %74 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3402, !tbaa !2326
  %sock_proto = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %74, i32 0, i32 4, !dbg !3403
  %75 = load i32, i32* %sock_proto, align 4, !dbg !3403, !tbaa !3020
  %call98 = call %struct._object* @makesockaddr(i32 %72, %struct.sockaddr* %sa96, i64 %conv97, i32 %75), !dbg !3404
  store %struct._object* %call98, %struct._object** %addr, align 8, !dbg !3405, !tbaa !2326
  %76 = load %struct._object*, %struct._object** %addr, align 8, !dbg !3406, !tbaa !2326
  %cmp99 = icmp eq %struct._object* %76, null, !dbg !3408
  br i1 %cmp99, label %if.then.101, label %if.end.102, !dbg !3409

if.then.101:                                      ; preds = %if.end.94
  br label %finally, !dbg !3410

if.end.102:                                       ; preds = %if.end.94
  %77 = load %struct._object*, %struct._object** %sock, align 8, !dbg !3411, !tbaa !2326
  %78 = load %struct._object*, %struct._object** %addr, align 8, !dbg !3412, !tbaa !2326
  %call103 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %77, %struct._object* %78), !dbg !3413
  store %struct._object* %call103, %struct._object** %res, align 8, !dbg !3414, !tbaa !2326
  br label %finally, !dbg !3415

finally:                                          ; preds = %if.end.102, %if.then.101, %if.then.92, %if.then.84
  br label %do.body.104, !dbg !3416

do.body.104:                                      ; preds = %finally
  %79 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !3417
  call void @llvm.lifetime.start(i64 8, i8* %79) #1, !dbg !3417
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !859, metadata !2310), !dbg !3419
  %80 = load %struct._object*, %struct._object** %sock, align 8, !dbg !3420, !tbaa !2326
  store %struct._object* %80, %struct._object** %_py_xdecref_tmp, align 8, !dbg !3419, !tbaa !2326
  %81 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !3421, !tbaa !2326
  %cmp105 = icmp ne %struct._object* %81, null, !dbg !3422
  br i1 %cmp105, label %if.then.107, label %if.end.115, !dbg !3423

if.then.107:                                      ; preds = %do.body.104
  br label %do.body.108, !dbg !3424

do.body.108:                                      ; preds = %if.then.107
  %82 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3426
  call void @llvm.lifetime.start(i64 8, i8* %82) #1, !dbg !3426
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !861, metadata !2310), !dbg !3428
  %83 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !3429, !tbaa !2326
  store %struct._object* %83, %struct._object** %_py_decref_tmp, align 8, !dbg !3428, !tbaa !2326
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3430, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 0, !dbg !3432
  %85 = load i64, i64* %ob_refcnt, align 8, !dbg !3433, !tbaa !2335
  %dec = add i64 %85, -1, !dbg !3433
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !3433, !tbaa !2335
  %cmp109 = icmp ne i64 %dec, 0, !dbg !3434
  br i1 %cmp109, label %if.then.111, label %if.else, !dbg !3435

if.then.111:                                      ; preds = %do.body.108
  br label %if.end.112, !dbg !3436

if.else:                                          ; preds = %do.body.108
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3438, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %86, i32 0, i32 1, !dbg !3440
  %87 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3440, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %87, i32 0, i32 4, !dbg !3441
  %88 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !3441, !tbaa !3442
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3443, !tbaa !2326
  call void %88(%struct._object* %89), !dbg !3444
  br label %if.end.112

if.end.112:                                       ; preds = %if.else, %if.then.111
  %90 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3445
  call void @llvm.lifetime.end(i64 8, i8* %90) #1, !dbg !3445
  br label %do.cond.113, !dbg !3447

do.cond.113:                                      ; preds = %if.end.112
  br label %do.end.114, !dbg !3448

do.end.114:                                       ; preds = %do.cond.113
  br label %if.end.115, !dbg !3450

if.end.115:                                       ; preds = %do.end.114, %do.body.104
  %91 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !3452
  call void @llvm.lifetime.end(i64 8, i8* %91) #1, !dbg !3452
  br label %do.cond.116, !dbg !3455

do.cond.116:                                      ; preds = %if.end.115
  br label %do.end.117, !dbg !3456

do.end.117:                                       ; preds = %do.cond.116
  br label %do.body.118, !dbg !3458

do.body.118:                                      ; preds = %do.end.117
  %92 = bitcast %struct._object** %_py_xdecref_tmp119 to i8*, !dbg !3459
  call void @llvm.lifetime.start(i64 8, i8* %92) #1, !dbg !3459
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp119, metadata !864, metadata !2310), !dbg !3461
  %93 = load %struct._object*, %struct._object** %addr, align 8, !dbg !3462, !tbaa !2326
  store %struct._object* %93, %struct._object** %_py_xdecref_tmp119, align 8, !dbg !3461, !tbaa !2326
  %94 = load %struct._object*, %struct._object** %_py_xdecref_tmp119, align 8, !dbg !3463, !tbaa !2326
  %cmp120 = icmp ne %struct._object* %94, null, !dbg !3464
  br i1 %cmp120, label %if.then.122, label %if.end.136, !dbg !3465

if.then.122:                                      ; preds = %do.body.118
  br label %do.body.123, !dbg !3466

do.body.123:                                      ; preds = %if.then.122
  %95 = bitcast %struct._object** %_py_decref_tmp124 to i8*, !dbg !3468
  call void @llvm.lifetime.start(i64 8, i8* %95) #1, !dbg !3468
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp124, metadata !866, metadata !2310), !dbg !3470
  %96 = load %struct._object*, %struct._object** %_py_xdecref_tmp119, align 8, !dbg !3471, !tbaa !2326
  store %struct._object* %96, %struct._object** %_py_decref_tmp124, align 8, !dbg !3470, !tbaa !2326
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp124, align 8, !dbg !3472, !tbaa !2326
  %ob_refcnt125 = getelementptr inbounds %struct._object, %struct._object* %97, i32 0, i32 0, !dbg !3474
  %98 = load i64, i64* %ob_refcnt125, align 8, !dbg !3475, !tbaa !2335
  %dec126 = add i64 %98, -1, !dbg !3475
  store i64 %dec126, i64* %ob_refcnt125, align 8, !dbg !3475, !tbaa !2335
  %cmp127 = icmp ne i64 %dec126, 0, !dbg !3476
  br i1 %cmp127, label %if.then.129, label %if.else.130, !dbg !3477

if.then.129:                                      ; preds = %do.body.123
  br label %if.end.133, !dbg !3478

if.else.130:                                      ; preds = %do.body.123
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp124, align 8, !dbg !3480, !tbaa !2326
  %ob_type131 = getelementptr inbounds %struct._object, %struct._object* %99, i32 0, i32 1, !dbg !3482
  %100 = load %struct._typeobject*, %struct._typeobject** %ob_type131, align 8, !dbg !3482, !tbaa !2318
  %tp_dealloc132 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %100, i32 0, i32 4, !dbg !3483
  %101 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc132, align 8, !dbg !3483, !tbaa !3442
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp124, align 8, !dbg !3484, !tbaa !2326
  call void %101(%struct._object* %102), !dbg !3485
  br label %if.end.133

if.end.133:                                       ; preds = %if.else.130, %if.then.129
  %103 = bitcast %struct._object** %_py_decref_tmp124 to i8*, !dbg !3486
  call void @llvm.lifetime.end(i64 8, i8* %103) #1, !dbg !3486
  br label %do.cond.134, !dbg !3488

do.cond.134:                                      ; preds = %if.end.133
  br label %do.end.135, !dbg !3489

do.end.135:                                       ; preds = %do.cond.134
  br label %if.end.136, !dbg !3491

if.end.136:                                       ; preds = %do.end.135, %do.body.118
  %104 = bitcast %struct._object** %_py_xdecref_tmp119 to i8*, !dbg !3493
  call void @llvm.lifetime.end(i64 8, i8* %104) #1, !dbg !3493
  br label %do.cond.137, !dbg !3494

do.cond.137:                                      ; preds = %if.end.136
  br label %do.end.138, !dbg !3495

do.end.138:                                       ; preds = %do.cond.137
  %105 = load %struct._object*, %struct._object** %res, align 8, !dbg !3497, !tbaa !2326
  store %struct._object* %105, %struct._object** %retval, !dbg !3498
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.139, !dbg !3498

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.139

cleanup.139:                                      ; preds = %NewDefault, %do.end.138, %if.then.76, %if.then
  %106 = bitcast i32* %timeout to i8*, !dbg !3499
  call void @llvm.lifetime.end(i64 4, i8* %106) #1, !dbg !3499
  %107 = bitcast %struct._object** %res to i8*, !dbg !3499
  call void @llvm.lifetime.end(i64 8, i8* %107) #1, !dbg !3499
  %108 = bitcast %struct._object** %addr to i8*, !dbg !3499
  call void @llvm.lifetime.end(i64 8, i8* %108) #1, !dbg !3499
  %109 = bitcast %struct._object** %sock to i8*, !dbg !3499
  call void @llvm.lifetime.end(i64 8, i8* %109) #1, !dbg !3499
  %110 = bitcast i32* %addrlen to i8*, !dbg !3499
  call void @llvm.lifetime.end(i64 4, i8* %110) #1, !dbg !3499
  %111 = bitcast i32* %newfd to i8*, !dbg !3499
  call void @llvm.lifetime.end(i64 4, i8* %111) #1, !dbg !3499
  %112 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3499
  call void @llvm.lifetime.end(i64 128, i8* %112) #1, !dbg !3499
  %113 = load %struct._object*, %struct._object** %retval, !dbg !3499
  ret %struct._object* %113, !dbg !3499
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_bind(%struct.PySocketSockObject* %s, %struct._object* %addro) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %addro.addr = alloca %struct._object*, align 8
  %addrbuf = alloca %union.sock_addr, align 8
  %addrlen = alloca i32, align 4
  %res = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %agg.tmp = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1000, metadata !2310), !dbg !3500
  store %struct._object* %addro, %struct._object** %addro.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %addro.addr, metadata !1001, metadata !2310), !dbg !3501
  %0 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3502
  call void @llvm.lifetime.start(i64 128, i8* %0) #1, !dbg !3502
  call void @llvm.dbg.declare(metadata %union.sock_addr* %addrbuf, metadata !1002, metadata !2310), !dbg !3503
  %1 = bitcast i32* %addrlen to i8*, !dbg !3504
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !3504
  call void @llvm.dbg.declare(metadata i32* %addrlen, metadata !1003, metadata !2310), !dbg !3505
  %2 = bitcast i32* %res to i8*, !dbg !3506
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !3506
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1004, metadata !2310), !dbg !3507
  %3 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3508, !tbaa !2326
  %4 = load %struct._object*, %struct._object** %addro.addr, align 8, !dbg !3510, !tbaa !2326
  %sa = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !3511
  %call = call i32 @getsockaddrarg(%struct.PySocketSockObject* %3, %struct._object* %4, %struct.sockaddr* %sa, i32* %addrlen), !dbg !3512
  %tobool = icmp ne i32 %call, 0, !dbg !3512
  br i1 %tobool, label %if.end, label %if.then, !dbg !3513

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !3514
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3514

if.end:                                           ; preds = %entry
  %5 = bitcast %struct._ts** %_save to i8*, !dbg !3515
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !3515
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1005, metadata !2310), !dbg !3516
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !3517
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !3518, !tbaa !2326
  %6 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3519, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %6, i32 0, i32 1, !dbg !3520
  %7 = load i32, i32* %sock_fd, align 4, !dbg !3520, !tbaa !2948
  %__sockaddr__ = bitcast %union.__CONST_SOCKADDR_ARG* %agg.tmp to %struct.sockaddr**, !dbg !3521
  %sa2 = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !3522
  store %struct.sockaddr* %sa2, %struct.sockaddr** %__sockaddr__, align 8, !dbg !3521, !tbaa !2326
  %8 = load i32, i32* %addrlen, align 4, !dbg !3523, !tbaa !3034
  %coerce.dive = getelementptr %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %agg.tmp, i32 0, i32 0, !dbg !3524
  %9 = load %struct.sockaddr*, %struct.sockaddr** %coerce.dive, align 8, !dbg !3524
  %call3 = call i32 @bind(i32 %7, %struct.sockaddr* %9, i32 %8) #1, !dbg !3524
  store i32 %call3, i32* %res, align 4, !dbg !3525, !tbaa !3034
  %10 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !3526, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %10), !dbg !3527
  %11 = bitcast %struct._ts** %_save to i8*, !dbg !3528
  call void @llvm.lifetime.end(i64 8, i8* %11) #1, !dbg !3528
  %12 = load i32, i32* %res, align 4, !dbg !3529, !tbaa !3034
  %cmp = icmp slt i32 %12, 0, !dbg !3531
  br i1 %cmp, label %if.then.4, label %if.end.6, !dbg !3532

if.then.4:                                        ; preds = %if.end
  %13 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3533, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %13, i32 0, i32 5, !dbg !3534
  %14 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !3534, !tbaa !3181
  %call5 = call %struct._object* %14(), !dbg !3533
  store %struct._object* %call5, %struct._object** %retval, !dbg !3535
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3535

if.end.6:                                         ; preds = %if.end
  %15 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !3536, !tbaa !2335
  %inc = add i64 %15, 1, !dbg !3536
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !3536, !tbaa !2335
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !3537
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3537

cleanup:                                          ; preds = %if.end.6, %if.then.4, %if.then
  %16 = bitcast i32* %res to i8*, !dbg !3538
  call void @llvm.lifetime.end(i64 4, i8* %16) #1, !dbg !3538
  %17 = bitcast i32* %addrlen to i8*, !dbg !3538
  call void @llvm.lifetime.end(i64 4, i8* %17) #1, !dbg !3538
  %18 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3538
  call void @llvm.lifetime.end(i64 128, i8* %18) #1, !dbg !3538
  %19 = load %struct._object*, %struct._object** %retval, !dbg !3538
  ret %struct._object* %19, !dbg !3538
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_close(%struct.PySocketSockObject* %s) #0 {
entry:
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %fd = alloca i32, align 4
  %_save = alloca %struct._ts*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1138, metadata !2310), !dbg !3539
  %0 = bitcast i32* %fd to i8*, !dbg !3540
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !3540
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !1139, metadata !2310), !dbg !3541
  %1 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3542, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %1, i32 0, i32 1, !dbg !3543
  %2 = load i32, i32* %sock_fd, align 4, !dbg !3543, !tbaa !2948
  store i32 %2, i32* %fd, align 4, !dbg !3544, !tbaa !3034
  %cmp = icmp ne i32 %2, -1, !dbg !3545
  br i1 %cmp, label %if.then, label %if.end, !dbg !3546

if.then:                                          ; preds = %entry
  %3 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3547, !tbaa !2326
  %sock_fd1 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %3, i32 0, i32 1, !dbg !3548
  store i32 -1, i32* %sock_fd1, align 4, !dbg !3549, !tbaa !2948
  %4 = bitcast %struct._ts** %_save to i8*, !dbg !3550
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !3550
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1140, metadata !2310), !dbg !3551
  %call = call %struct._ts* @PyEval_SaveThread(), !dbg !3552
  store %struct._ts* %call, %struct._ts** %_save, align 8, !dbg !3553, !tbaa !2326
  %5 = load i32, i32* %fd, align 4, !dbg !3554, !tbaa !3034
  %call2 = call i32 @close(i32 %5), !dbg !3555
  %6 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !3556, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %6), !dbg !3557
  %7 = bitcast %struct._ts** %_save to i8*, !dbg !3558
  call void @llvm.lifetime.end(i64 8, i8* %7) #1, !dbg !3558
  br label %if.end, !dbg !3559

if.end:                                           ; preds = %if.then, %entry
  %8 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !3560, !tbaa !2335
  %inc = add i64 %8, 1, !dbg !3560
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !3560, !tbaa !2335
  %9 = bitcast i32* %fd to i8*, !dbg !3561
  call void @llvm.lifetime.end(i64 4, i8* %9) #1, !dbg !3561
  ret %struct._object* @_Py_NoneStruct, !dbg !3562
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_connect(%struct.PySocketSockObject* %s, %struct._object* %addro) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %addro.addr = alloca %struct._object*, align 8
  %addrbuf = alloca %union.sock_addr, align 8
  %addrlen = alloca i32, align 4
  %res = alloca i32, align 4
  %timeout = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1146, metadata !2310), !dbg !3563
  store %struct._object* %addro, %struct._object** %addro.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %addro.addr, metadata !1147, metadata !2310), !dbg !3564
  %0 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3565
  call void @llvm.lifetime.start(i64 128, i8* %0) #1, !dbg !3565
  call void @llvm.dbg.declare(metadata %union.sock_addr* %addrbuf, metadata !1148, metadata !2310), !dbg !3566
  %1 = bitcast i32* %addrlen to i8*, !dbg !3567
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !3567
  call void @llvm.dbg.declare(metadata i32* %addrlen, metadata !1149, metadata !2310), !dbg !3568
  %2 = bitcast i32* %res to i8*, !dbg !3569
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !3569
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1150, metadata !2310), !dbg !3570
  %3 = bitcast i32* %timeout to i8*, !dbg !3571
  call void @llvm.lifetime.start(i64 4, i8* %3) #1, !dbg !3571
  call void @llvm.dbg.declare(metadata i32* %timeout, metadata !1151, metadata !2310), !dbg !3572
  %4 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3573, !tbaa !2326
  %5 = load %struct._object*, %struct._object** %addro.addr, align 8, !dbg !3575, !tbaa !2326
  %sa = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !3576
  %call = call i32 @getsockaddrarg(%struct.PySocketSockObject* %4, %struct._object* %5, %struct.sockaddr* %sa, i32* %addrlen), !dbg !3577
  %tobool = icmp ne i32 %call, 0, !dbg !3577
  br i1 %tobool, label %if.end, label %if.then, !dbg !3578

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !3579
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3579

if.end:                                           ; preds = %entry
  %6 = bitcast %struct._ts** %_save to i8*, !dbg !3580
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !3580
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1152, metadata !2310), !dbg !3581
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !3582
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !3583, !tbaa !2326
  %7 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3584, !tbaa !2326
  %sa2 = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !3585
  %8 = load i32, i32* %addrlen, align 4, !dbg !3586, !tbaa !3034
  %call3 = call i32 @internal_connect(%struct.PySocketSockObject* %7, %struct.sockaddr* %sa2, i32 %8, i32* %timeout), !dbg !3587
  store i32 %call3, i32* %res, align 4, !dbg !3588, !tbaa !3034
  %9 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !3589, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %9), !dbg !3590
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !3591
  call void @llvm.lifetime.end(i64 8, i8* %10) #1, !dbg !3591
  %11 = load i32, i32* %timeout, align 4, !dbg !3592, !tbaa !3034
  %cmp = icmp eq i32 %11, 1, !dbg !3594
  br i1 %cmp, label %if.then.4, label %if.end.5, !dbg !3595

if.then.4:                                        ; preds = %if.end
  %12 = load %struct._object*, %struct._object** @socket_timeout, align 8, !dbg !3596, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %12, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.300, i32 0, i32 0)), !dbg !3598
  store %struct._object* null, %struct._object** %retval, !dbg !3599
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3599

if.end.5:                                         ; preds = %if.end
  %13 = load i32, i32* %res, align 4, !dbg !3600, !tbaa !3034
  %cmp6 = icmp ne i32 %13, 0, !dbg !3602
  br i1 %cmp6, label %if.then.7, label %if.end.9, !dbg !3603

if.then.7:                                        ; preds = %if.end.5
  %14 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3604, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %14, i32 0, i32 5, !dbg !3605
  %15 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !3605, !tbaa !3181
  %call8 = call %struct._object* %15(), !dbg !3604
  store %struct._object* %call8, %struct._object** %retval, !dbg !3606
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3606

if.end.9:                                         ; preds = %if.end.5
  %16 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !3607, !tbaa !2335
  %inc = add i64 %16, 1, !dbg !3607
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !3607, !tbaa !2335
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !3608
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3608

cleanup:                                          ; preds = %if.end.9, %if.then.7, %if.then.4, %if.then
  %17 = bitcast i32* %timeout to i8*, !dbg !3609
  call void @llvm.lifetime.end(i64 4, i8* %17) #1, !dbg !3609
  %18 = bitcast i32* %res to i8*, !dbg !3609
  call void @llvm.lifetime.end(i64 4, i8* %18) #1, !dbg !3609
  %19 = bitcast i32* %addrlen to i8*, !dbg !3609
  call void @llvm.lifetime.end(i64 4, i8* %19) #1, !dbg !3609
  %20 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3609
  call void @llvm.lifetime.end(i64 128, i8* %20) #1, !dbg !3609
  %21 = load %struct._object*, %struct._object** %retval, !dbg !3609
  ret %struct._object* %21, !dbg !3609
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_connect_ex(%struct.PySocketSockObject* %s, %struct._object* %addro) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %addro.addr = alloca %struct._object*, align 8
  %addrbuf = alloca %union.sock_addr, align 8
  %addrlen = alloca i32, align 4
  %res = alloca i32, align 4
  %timeout = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1179, metadata !2310), !dbg !3610
  store %struct._object* %addro, %struct._object** %addro.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %addro.addr, metadata !1180, metadata !2310), !dbg !3611
  %0 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3612
  call void @llvm.lifetime.start(i64 128, i8* %0) #1, !dbg !3612
  call void @llvm.dbg.declare(metadata %union.sock_addr* %addrbuf, metadata !1181, metadata !2310), !dbg !3613
  %1 = bitcast i32* %addrlen to i8*, !dbg !3614
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !3614
  call void @llvm.dbg.declare(metadata i32* %addrlen, metadata !1182, metadata !2310), !dbg !3615
  %2 = bitcast i32* %res to i8*, !dbg !3616
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !3616
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1183, metadata !2310), !dbg !3617
  %3 = bitcast i32* %timeout to i8*, !dbg !3618
  call void @llvm.lifetime.start(i64 4, i8* %3) #1, !dbg !3618
  call void @llvm.dbg.declare(metadata i32* %timeout, metadata !1184, metadata !2310), !dbg !3619
  %4 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3620, !tbaa !2326
  %5 = load %struct._object*, %struct._object** %addro.addr, align 8, !dbg !3622, !tbaa !2326
  %sa = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !3623
  %call = call i32 @getsockaddrarg(%struct.PySocketSockObject* %4, %struct._object* %5, %struct.sockaddr* %sa, i32* %addrlen), !dbg !3624
  %tobool = icmp ne i32 %call, 0, !dbg !3624
  br i1 %tobool, label %if.end, label %if.then, !dbg !3625

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !3626
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3626

if.end:                                           ; preds = %entry
  %6 = bitcast %struct._ts** %_save to i8*, !dbg !3627
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !3627
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1185, metadata !2310), !dbg !3628
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !3629
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !3630, !tbaa !2326
  %7 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3631, !tbaa !2326
  %sa2 = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !3632
  %8 = load i32, i32* %addrlen, align 4, !dbg !3633, !tbaa !3034
  %call3 = call i32 @internal_connect(%struct.PySocketSockObject* %7, %struct.sockaddr* %sa2, i32 %8, i32* %timeout), !dbg !3634
  store i32 %call3, i32* %res, align 4, !dbg !3635, !tbaa !3034
  %9 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !3636, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %9), !dbg !3637
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !3638
  call void @llvm.lifetime.end(i64 8, i8* %10) #1, !dbg !3638
  %11 = load i32, i32* %res, align 4, !dbg !3639, !tbaa !3034
  %cmp = icmp eq i32 %11, 4, !dbg !3641
  br i1 %cmp, label %land.lhs.true, label %if.end.7, !dbg !3642

land.lhs.true:                                    ; preds = %if.end
  %call4 = call i32 @PyErr_CheckSignals(), !dbg !3643
  %tobool5 = icmp ne i32 %call4, 0, !dbg !3643
  br i1 %tobool5, label %if.then.6, label %if.end.7, !dbg !3645

if.then.6:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval, !dbg !3646
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3646

if.end.7:                                         ; preds = %land.lhs.true, %if.end
  %12 = load i32, i32* %res, align 4, !dbg !3647, !tbaa !3034
  %conv = sext i32 %12 to i64, !dbg !3648
  %call8 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !3649
  store %struct._object* %call8, %struct._object** %retval, !dbg !3650
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3650

cleanup:                                          ; preds = %if.end.7, %if.then.6, %if.then
  %13 = bitcast i32* %timeout to i8*, !dbg !3651
  call void @llvm.lifetime.end(i64 4, i8* %13) #1, !dbg !3651
  %14 = bitcast i32* %res to i8*, !dbg !3651
  call void @llvm.lifetime.end(i64 4, i8* %14) #1, !dbg !3651
  %15 = bitcast i32* %addrlen to i8*, !dbg !3651
  call void @llvm.lifetime.end(i64 4, i8* %15) #1, !dbg !3651
  %16 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3651
  call void @llvm.lifetime.end(i64 128, i8* %16) #1, !dbg !3651
  %17 = load %struct._object*, %struct._object** %retval, !dbg !3651
  ret %struct._object* %17, !dbg !3651
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_detach(%struct.PySocketSockObject* %s) #0 {
entry:
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %fd = alloca i32, align 4
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1189, metadata !2310), !dbg !3652
  %0 = bitcast i32* %fd to i8*, !dbg !3653
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !3653
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !1190, metadata !2310), !dbg !3654
  %1 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3655, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %1, i32 0, i32 1, !dbg !3656
  %2 = load i32, i32* %sock_fd, align 4, !dbg !3656, !tbaa !2948
  store i32 %2, i32* %fd, align 4, !dbg !3654, !tbaa !3034
  %3 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3657, !tbaa !2326
  %sock_fd1 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %3, i32 0, i32 1, !dbg !3658
  store i32 -1, i32* %sock_fd1, align 4, !dbg !3659, !tbaa !2948
  %4 = load i32, i32* %fd, align 4, !dbg !3660, !tbaa !3034
  %conv = sext i32 %4 to i64, !dbg !3661
  %call = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !3662
  %5 = bitcast i32* %fd to i8*, !dbg !3663
  call void @llvm.lifetime.end(i64 4, i8* %5) #1, !dbg !3663
  ret %struct._object* %call, !dbg !3664
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_fileno(%struct.PySocketSockObject* %s) #0 {
entry:
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1193, metadata !2310), !dbg !3665
  %0 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3666, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %0, i32 0, i32 1, !dbg !3667
  %1 = load i32, i32* %sock_fd, align 4, !dbg !3667, !tbaa !2948
  %conv = sext i32 %1 to i64, !dbg !3668
  %call = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !3669
  ret %struct._object* %call, !dbg !3670
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_getpeername(%struct.PySocketSockObject* %s) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %addrbuf = alloca %union.sock_addr, align 8
  %res = alloca i32, align 4
  %addrlen = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %agg.tmp = alloca %union.__SOCKADDR_ARG, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1196, metadata !2310), !dbg !3671
  %0 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3672
  call void @llvm.lifetime.start(i64 128, i8* %0) #1, !dbg !3672
  call void @llvm.dbg.declare(metadata %union.sock_addr* %addrbuf, metadata !1197, metadata !2310), !dbg !3673
  %1 = bitcast i32* %res to i8*, !dbg !3674
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !3674
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1198, metadata !2310), !dbg !3675
  %2 = bitcast i32* %addrlen to i8*, !dbg !3676
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !3676
  call void @llvm.dbg.declare(metadata i32* %addrlen, metadata !1199, metadata !2310), !dbg !3677
  %3 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3678, !tbaa !2326
  %call = call i32 @getsockaddrlen(%struct.PySocketSockObject* %3, i32* %addrlen), !dbg !3680
  %tobool = icmp ne i32 %call, 0, !dbg !3680
  br i1 %tobool, label %if.end, label %if.then, !dbg !3681

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !3682
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3682

if.end:                                           ; preds = %entry
  %4 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3683
  %5 = load i32, i32* %addrlen, align 4, !dbg !3684, !tbaa !3034
  %conv = zext i32 %5 to i64, !dbg !3684
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 %conv, i32 8, i1 false), !dbg !3683
  %6 = bitcast %struct._ts** %_save to i8*, !dbg !3685
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !3685
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1200, metadata !2310), !dbg !3686
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !3687
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !3688, !tbaa !2326
  %7 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3689, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %7, i32 0, i32 1, !dbg !3690
  %8 = load i32, i32* %sock_fd, align 4, !dbg !3690, !tbaa !2948
  %__sockaddr__ = bitcast %union.__SOCKADDR_ARG* %agg.tmp to %struct.sockaddr**, !dbg !3691
  %sa = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !3692
  store %struct.sockaddr* %sa, %struct.sockaddr** %__sockaddr__, align 8, !dbg !3691, !tbaa !2326
  %coerce.dive = getelementptr %union.__SOCKADDR_ARG, %union.__SOCKADDR_ARG* %agg.tmp, i32 0, i32 0, !dbg !3693
  %9 = load %struct.sockaddr*, %struct.sockaddr** %coerce.dive, align 8, !dbg !3693
  %call2 = call i32 @getpeername(i32 %8, %struct.sockaddr* %9, i32* %addrlen) #1, !dbg !3693
  store i32 %call2, i32* %res, align 4, !dbg !3694, !tbaa !3034
  %10 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !3695, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %10), !dbg !3696
  %11 = bitcast %struct._ts** %_save to i8*, !dbg !3697
  call void @llvm.lifetime.end(i64 8, i8* %11) #1, !dbg !3697
  %12 = load i32, i32* %res, align 4, !dbg !3698, !tbaa !3034
  %cmp = icmp slt i32 %12, 0, !dbg !3700
  br i1 %cmp, label %if.then.4, label %if.end.6, !dbg !3701

if.then.4:                                        ; preds = %if.end
  %13 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3702, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %13, i32 0, i32 5, !dbg !3703
  %14 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !3703, !tbaa !3181
  %call5 = call %struct._object* %14(), !dbg !3702
  store %struct._object* %call5, %struct._object** %retval, !dbg !3704
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3704

if.end.6:                                         ; preds = %if.end
  %15 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3705, !tbaa !2326
  %sock_fd7 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %15, i32 0, i32 1, !dbg !3706
  %16 = load i32, i32* %sock_fd7, align 4, !dbg !3706, !tbaa !2948
  %sa8 = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !3707
  %17 = load i32, i32* %addrlen, align 4, !dbg !3708, !tbaa !3034
  %conv9 = zext i32 %17 to i64, !dbg !3708
  %18 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3709, !tbaa !2326
  %sock_proto = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %18, i32 0, i32 4, !dbg !3710
  %19 = load i32, i32* %sock_proto, align 4, !dbg !3710, !tbaa !3020
  %call10 = call %struct._object* @makesockaddr(i32 %16, %struct.sockaddr* %sa8, i64 %conv9, i32 %19), !dbg !3711
  store %struct._object* %call10, %struct._object** %retval, !dbg !3712
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3712

cleanup:                                          ; preds = %if.end.6, %if.then.4, %if.then
  %20 = bitcast i32* %addrlen to i8*, !dbg !3713
  call void @llvm.lifetime.end(i64 4, i8* %20) #1, !dbg !3713
  %21 = bitcast i32* %res to i8*, !dbg !3713
  call void @llvm.lifetime.end(i64 4, i8* %21) #1, !dbg !3713
  %22 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3713
  call void @llvm.lifetime.end(i64 128, i8* %22) #1, !dbg !3713
  %23 = load %struct._object*, %struct._object** %retval, !dbg !3713
  ret %struct._object* %23, !dbg !3713
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_getsockname(%struct.PySocketSockObject* %s) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %addrbuf = alloca %union.sock_addr, align 8
  %res = alloca i32, align 4
  %addrlen = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %agg.tmp = alloca %union.__SOCKADDR_ARG, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1204, metadata !2310), !dbg !3714
  %0 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3715
  call void @llvm.lifetime.start(i64 128, i8* %0) #1, !dbg !3715
  call void @llvm.dbg.declare(metadata %union.sock_addr* %addrbuf, metadata !1205, metadata !2310), !dbg !3716
  %1 = bitcast i32* %res to i8*, !dbg !3717
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !3717
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1206, metadata !2310), !dbg !3718
  %2 = bitcast i32* %addrlen to i8*, !dbg !3719
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !3719
  call void @llvm.dbg.declare(metadata i32* %addrlen, metadata !1207, metadata !2310), !dbg !3720
  %3 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3721, !tbaa !2326
  %call = call i32 @getsockaddrlen(%struct.PySocketSockObject* %3, i32* %addrlen), !dbg !3723
  %tobool = icmp ne i32 %call, 0, !dbg !3723
  br i1 %tobool, label %if.end, label %if.then, !dbg !3724

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !3725
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3725

if.end:                                           ; preds = %entry
  %4 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3726
  %5 = load i32, i32* %addrlen, align 4, !dbg !3727, !tbaa !3034
  %conv = zext i32 %5 to i64, !dbg !3727
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 %conv, i32 8, i1 false), !dbg !3726
  %6 = bitcast %struct._ts** %_save to i8*, !dbg !3728
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !3728
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1208, metadata !2310), !dbg !3729
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !3730
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !3731, !tbaa !2326
  %7 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3732, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %7, i32 0, i32 1, !dbg !3733
  %8 = load i32, i32* %sock_fd, align 4, !dbg !3733, !tbaa !2948
  %__sockaddr__ = bitcast %union.__SOCKADDR_ARG* %agg.tmp to %struct.sockaddr**, !dbg !3734
  %sa = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !3735
  store %struct.sockaddr* %sa, %struct.sockaddr** %__sockaddr__, align 8, !dbg !3734, !tbaa !2326
  %coerce.dive = getelementptr %union.__SOCKADDR_ARG, %union.__SOCKADDR_ARG* %agg.tmp, i32 0, i32 0, !dbg !3736
  %9 = load %struct.sockaddr*, %struct.sockaddr** %coerce.dive, align 8, !dbg !3736
  %call2 = call i32 @getsockname(i32 %8, %struct.sockaddr* %9, i32* %addrlen) #1, !dbg !3736
  store i32 %call2, i32* %res, align 4, !dbg !3737, !tbaa !3034
  %10 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !3738, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %10), !dbg !3739
  %11 = bitcast %struct._ts** %_save to i8*, !dbg !3740
  call void @llvm.lifetime.end(i64 8, i8* %11) #1, !dbg !3740
  %12 = load i32, i32* %res, align 4, !dbg !3741, !tbaa !3034
  %cmp = icmp slt i32 %12, 0, !dbg !3743
  br i1 %cmp, label %if.then.4, label %if.end.6, !dbg !3744

if.then.4:                                        ; preds = %if.end
  %13 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3745, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %13, i32 0, i32 5, !dbg !3746
  %14 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !3746, !tbaa !3181
  %call5 = call %struct._object* %14(), !dbg !3745
  store %struct._object* %call5, %struct._object** %retval, !dbg !3747
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3747

if.end.6:                                         ; preds = %if.end
  %15 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3748, !tbaa !2326
  %sock_fd7 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %15, i32 0, i32 1, !dbg !3749
  %16 = load i32, i32* %sock_fd7, align 4, !dbg !3749, !tbaa !2948
  %sa8 = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !3750
  %17 = load i32, i32* %addrlen, align 4, !dbg !3751, !tbaa !3034
  %conv9 = zext i32 %17 to i64, !dbg !3751
  %18 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3752, !tbaa !2326
  %sock_proto = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %18, i32 0, i32 4, !dbg !3753
  %19 = load i32, i32* %sock_proto, align 4, !dbg !3753, !tbaa !3020
  %call10 = call %struct._object* @makesockaddr(i32 %16, %struct.sockaddr* %sa8, i64 %conv9, i32 %19), !dbg !3754
  store %struct._object* %call10, %struct._object** %retval, !dbg !3755
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3755

cleanup:                                          ; preds = %if.end.6, %if.then.4, %if.then
  %20 = bitcast i32* %addrlen to i8*, !dbg !3756
  call void @llvm.lifetime.end(i64 4, i8* %20) #1, !dbg !3756
  %21 = bitcast i32* %res to i8*, !dbg !3756
  call void @llvm.lifetime.end(i64 4, i8* %21) #1, !dbg !3756
  %22 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !3756
  call void @llvm.lifetime.end(i64 128, i8* %22) #1, !dbg !3756
  %23 = load %struct._object*, %struct._object** %retval, !dbg !3756
  ret %struct._object* %23, !dbg !3756
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_getsockopt(%struct.PySocketSockObject* %s, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %level = alloca i32, align 4
  %optname = alloca i32, align 4
  %res = alloca i32, align 4
  %buf = alloca %struct._object*, align 8
  %buflen = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %flag = alloca i32, align 4
  %flagsize = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1212, metadata !2310), !dbg !3757
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1213, metadata !2310), !dbg !3758
  %0 = bitcast i32* %level to i8*, !dbg !3759
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !3759
  call void @llvm.dbg.declare(metadata i32* %level, metadata !1214, metadata !2310), !dbg !3760
  %1 = bitcast i32* %optname to i8*, !dbg !3761
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !3761
  call void @llvm.dbg.declare(metadata i32* %optname, metadata !1215, metadata !2310), !dbg !3762
  %2 = bitcast i32* %res to i8*, !dbg !3763
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !3763
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1216, metadata !2310), !dbg !3764
  %3 = bitcast %struct._object** %buf to i8*, !dbg !3765
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !3765
  call void @llvm.dbg.declare(metadata %struct._object** %buf, metadata !1217, metadata !2310), !dbg !3766
  %4 = bitcast i32* %buflen to i8*, !dbg !3767
  call void @llvm.lifetime.start(i64 4, i8* %4) #1, !dbg !3767
  call void @llvm.dbg.declare(metadata i32* %buflen, metadata !1218, metadata !2310), !dbg !3768
  store i32 0, i32* %buflen, align 4, !dbg !3768, !tbaa !3034
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !3769, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %5, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.340, i32 0, i32 0), i32* %level, i32* %optname, i32* %buflen), !dbg !3771
  %tobool = icmp ne i32 %call, 0, !dbg !3771
  br i1 %tobool, label %if.end, label %if.then, !dbg !3772

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !3773
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.36, !dbg !3773

if.end:                                           ; preds = %entry
  %6 = load i32, i32* %buflen, align 4, !dbg !3774, !tbaa !3034
  %cmp = icmp eq i32 %6, 0, !dbg !3775
  br i1 %cmp, label %if.then.1, label %if.end.9, !dbg !3776

if.then.1:                                        ; preds = %if.end
  %7 = bitcast i32* %flag to i8*, !dbg !3777
  call void @llvm.lifetime.start(i64 4, i8* %7) #1, !dbg !3777
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !1219, metadata !2310), !dbg !3778
  store i32 0, i32* %flag, align 4, !dbg !3778, !tbaa !3034
  %8 = bitcast i32* %flagsize to i8*, !dbg !3779
  call void @llvm.lifetime.start(i64 4, i8* %8) #1, !dbg !3779
  call void @llvm.dbg.declare(metadata i32* %flagsize, metadata !1222, metadata !2310), !dbg !3780
  store i32 4, i32* %flagsize, align 4, !dbg !3780, !tbaa !3034
  %9 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3781, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %9, i32 0, i32 1, !dbg !3782
  %10 = load i32, i32* %sock_fd, align 4, !dbg !3782, !tbaa !2948
  %11 = load i32, i32* %level, align 4, !dbg !3783, !tbaa !3034
  %12 = load i32, i32* %optname, align 4, !dbg !3784, !tbaa !3034
  %13 = bitcast i32* %flag to i8*, !dbg !3785
  %call2 = call i32 @getsockopt(i32 %10, i32 %11, i32 %12, i8* %13, i32* %flagsize) #1, !dbg !3786
  store i32 %call2, i32* %res, align 4, !dbg !3787, !tbaa !3034
  %14 = load i32, i32* %res, align 4, !dbg !3788, !tbaa !3034
  %cmp3 = icmp slt i32 %14, 0, !dbg !3790
  br i1 %cmp3, label %if.then.4, label %if.end.6, !dbg !3791

if.then.4:                                        ; preds = %if.then.1
  %15 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3792, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %15, i32 0, i32 5, !dbg !3793
  %16 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !3793, !tbaa !3181
  %call5 = call %struct._object* %16(), !dbg !3792
  store %struct._object* %call5, %struct._object** %retval, !dbg !3794
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3794

if.end.6:                                         ; preds = %if.then.1
  %17 = load i32, i32* %flag, align 4, !dbg !3795, !tbaa !3034
  %conv = sext i32 %17 to i64, !dbg !3795
  %call7 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !3796
  store %struct._object* %call7, %struct._object** %retval, !dbg !3797
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3797

cleanup:                                          ; preds = %if.end.6, %if.then.4
  %18 = bitcast i32* %flagsize to i8*, !dbg !3798
  call void @llvm.lifetime.end(i64 4, i8* %18) #1, !dbg !3798
  %19 = bitcast i32* %flag to i8*, !dbg !3798
  call void @llvm.lifetime.end(i64 4, i8* %19) #1, !dbg !3798
  br label %cleanup.36

if.end.9:                                         ; preds = %if.end
  %20 = load i32, i32* %buflen, align 4, !dbg !3799, !tbaa !3034
  %cmp10 = icmp ule i32 %20, 0, !dbg !3801
  br i1 %cmp10, label %if.then.14, label %lor.lhs.false, !dbg !3802

lor.lhs.false:                                    ; preds = %if.end.9
  %21 = load i32, i32* %buflen, align 4, !dbg !3803, !tbaa !3034
  %cmp12 = icmp ugt i32 %21, 1024, !dbg !3805
  br i1 %cmp12, label %if.then.14, label %if.end.15, !dbg !3806

if.then.14:                                       ; preds = %lor.lhs.false, %if.end.9
  %22 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !3807, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %22, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.341, i32 0, i32 0)), !dbg !3809
  store %struct._object* null, %struct._object** %retval, !dbg !3810
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.36, !dbg !3810

if.end.15:                                        ; preds = %lor.lhs.false
  %23 = load i32, i32* %buflen, align 4, !dbg !3811, !tbaa !3034
  %conv16 = zext i32 %23 to i64, !dbg !3811
  %call17 = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 %conv16), !dbg !3812
  store %struct._object* %call17, %struct._object** %buf, align 8, !dbg !3813, !tbaa !2326
  %24 = load %struct._object*, %struct._object** %buf, align 8, !dbg !3814, !tbaa !2326
  %cmp18 = icmp eq %struct._object* %24, null, !dbg !3816
  br i1 %cmp18, label %if.then.20, label %if.end.21, !dbg !3817

if.then.20:                                       ; preds = %if.end.15
  store %struct._object* null, %struct._object** %retval, !dbg !3818
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.36, !dbg !3818

if.end.21:                                        ; preds = %if.end.15
  %25 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3819, !tbaa !2326
  %sock_fd22 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %25, i32 0, i32 1, !dbg !3820
  %26 = load i32, i32* %sock_fd22, align 4, !dbg !3820, !tbaa !2948
  %27 = load i32, i32* %level, align 4, !dbg !3821, !tbaa !3034
  %28 = load i32, i32* %optname, align 4, !dbg !3822, !tbaa !3034
  %29 = load %struct._object*, %struct._object** %buf, align 8, !dbg !3823, !tbaa !2326
  %30 = bitcast %struct._object* %29 to %struct.PyBytesObject*, !dbg !3824
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %30, i32 0, i32 2, !dbg !3825
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !3826
  %call23 = call i32 @getsockopt(i32 %26, i32 %27, i32 %28, i8* %arraydecay, i32* %buflen) #1, !dbg !3827
  store i32 %call23, i32* %res, align 4, !dbg !3828, !tbaa !3034
  %31 = load i32, i32* %res, align 4, !dbg !3829, !tbaa !3034
  %cmp24 = icmp slt i32 %31, 0, !dbg !3830
  br i1 %cmp24, label %if.then.26, label %if.end.33, !dbg !3831

if.then.26:                                       ; preds = %if.end.21
  br label %do.body, !dbg !3832

do.body:                                          ; preds = %if.then.26
  %32 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3833
  call void @llvm.lifetime.start(i64 8, i8* %32) #1, !dbg !3833
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1223, metadata !2310), !dbg !3835
  %33 = load %struct._object*, %struct._object** %buf, align 8, !dbg !3836, !tbaa !2326
  store %struct._object* %33, %struct._object** %_py_decref_tmp, align 8, !dbg !3835, !tbaa !2326
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3837, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 0, !dbg !3839
  %35 = load i64, i64* %ob_refcnt, align 8, !dbg !3840, !tbaa !2335
  %dec = add i64 %35, -1, !dbg !3840
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !3840, !tbaa !2335
  %cmp27 = icmp ne i64 %dec, 0, !dbg !3841
  br i1 %cmp27, label %if.then.29, label %if.else, !dbg !3842

if.then.29:                                       ; preds = %do.body
  br label %if.end.30, !dbg !3843

if.else:                                          ; preds = %do.body
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3845, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1, !dbg !3847
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3847, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 4, !dbg !3848
  %38 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !3848, !tbaa !3442
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3849, !tbaa !2326
  call void %38(%struct._object* %39), !dbg !3850
  br label %if.end.30

if.end.30:                                        ; preds = %if.else, %if.then.29
  %40 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3851
  call void @llvm.lifetime.end(i64 8, i8* %40) #1, !dbg !3851
  br label %do.cond, !dbg !3853

do.cond:                                          ; preds = %if.end.30
  br label %do.end, !dbg !3854

do.end:                                           ; preds = %do.cond
  %41 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3856, !tbaa !2326
  %errorhandler31 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %41, i32 0, i32 5, !dbg !3857
  %42 = load %struct._object* ()*, %struct._object* ()** %errorhandler31, align 8, !dbg !3857, !tbaa !3181
  %call32 = call %struct._object* %42(), !dbg !3856
  store %struct._object* %call32, %struct._object** %retval, !dbg !3858
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.36, !dbg !3858

if.end.33:                                        ; preds = %if.end.21
  %43 = load i32, i32* %buflen, align 4, !dbg !3859, !tbaa !3034
  %conv34 = zext i32 %43 to i64, !dbg !3859
  %call35 = call i32 @_PyBytes_Resize(%struct._object** %buf, i64 %conv34), !dbg !3860
  %44 = load %struct._object*, %struct._object** %buf, align 8, !dbg !3861, !tbaa !2326
  store %struct._object* %44, %struct._object** %retval, !dbg !3862
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.36, !dbg !3862

cleanup.36:                                       ; preds = %if.end.33, %do.end, %if.then.20, %if.then.14, %cleanup, %if.then
  %45 = bitcast i32* %buflen to i8*, !dbg !3863
  call void @llvm.lifetime.end(i64 4, i8* %45) #1, !dbg !3863
  %46 = bitcast %struct._object** %buf to i8*, !dbg !3863
  call void @llvm.lifetime.end(i64 8, i8* %46) #1, !dbg !3863
  %47 = bitcast i32* %res to i8*, !dbg !3863
  call void @llvm.lifetime.end(i64 4, i8* %47) #1, !dbg !3863
  %48 = bitcast i32* %optname to i8*, !dbg !3863
  call void @llvm.lifetime.end(i64 4, i8* %48) #1, !dbg !3863
  %49 = bitcast i32* %level to i8*, !dbg !3863
  call void @llvm.lifetime.end(i64 4, i8* %49) #1, !dbg !3863
  %50 = load %struct._object*, %struct._object** %retval, !dbg !3863
  ret %struct._object* %50, !dbg !3863
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_listen(%struct.PySocketSockObject* %s, %struct._object* %arg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %backlog = alloca i32, align 4
  %res = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1229, metadata !2310), !dbg !3864
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !1230, metadata !2310), !dbg !3865
  %0 = bitcast i32* %backlog to i8*, !dbg !3866
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !3866
  call void @llvm.dbg.declare(metadata i32* %backlog, metadata !1231, metadata !2310), !dbg !3867
  %1 = bitcast i32* %res to i8*, !dbg !3868
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !3868
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1232, metadata !2310), !dbg !3869
  %2 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !3870, !tbaa !2326
  %call = call i32 @_PyLong_AsInt(%struct._object* %2), !dbg !3871
  store i32 %call, i32* %backlog, align 4, !dbg !3872, !tbaa !3034
  %3 = load i32, i32* %backlog, align 4, !dbg !3873, !tbaa !3034
  %cmp = icmp eq i32 %3, -1, !dbg !3875
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3876

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred(), !dbg !3877
  %tobool = icmp ne %struct._object* %call1, null, !dbg !3877
  br i1 %tobool, label %if.then, label %if.end, !dbg !3879

if.then:                                          ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval, !dbg !3880
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3880

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = bitcast %struct._ts** %_save to i8*, !dbg !3881
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !3881
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1233, metadata !2310), !dbg !3882
  %call2 = call %struct._ts* @PyEval_SaveThread(), !dbg !3883
  store %struct._ts* %call2, %struct._ts** %_save, align 8, !dbg !3884, !tbaa !2326
  %5 = load i32, i32* %backlog, align 4, !dbg !3885, !tbaa !3034
  %cmp3 = icmp slt i32 %5, 0, !dbg !3887
  br i1 %cmp3, label %if.then.4, label %if.end.5, !dbg !3888

if.then.4:                                        ; preds = %if.end
  store i32 0, i32* %backlog, align 4, !dbg !3889, !tbaa !3034
  br label %if.end.5, !dbg !3890

if.end.5:                                         ; preds = %if.then.4, %if.end
  %6 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3891, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %6, i32 0, i32 1, !dbg !3892
  %7 = load i32, i32* %sock_fd, align 4, !dbg !3892, !tbaa !2948
  %8 = load i32, i32* %backlog, align 4, !dbg !3893, !tbaa !3034
  %call6 = call i32 @listen(i32 %7, i32 %8) #1, !dbg !3894
  store i32 %call6, i32* %res, align 4, !dbg !3895, !tbaa !3034
  %9 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !3896, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %9), !dbg !3897
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !3898
  call void @llvm.lifetime.end(i64 8, i8* %10) #1, !dbg !3898
  %11 = load i32, i32* %res, align 4, !dbg !3899, !tbaa !3034
  %cmp7 = icmp slt i32 %11, 0, !dbg !3901
  br i1 %cmp7, label %if.then.8, label %if.end.10, !dbg !3902

if.then.8:                                        ; preds = %if.end.5
  %12 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3903, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %12, i32 0, i32 5, !dbg !3904
  %13 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !3904, !tbaa !3181
  %call9 = call %struct._object* %13(), !dbg !3903
  store %struct._object* %call9, %struct._object** %retval, !dbg !3905
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3905

if.end.10:                                        ; preds = %if.end.5
  %14 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !3906, !tbaa !2335
  %inc = add i64 %14, 1, !dbg !3906
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !3906, !tbaa !2335
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !3907
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3907

cleanup:                                          ; preds = %if.end.10, %if.then.8, %if.then
  %15 = bitcast i32* %res to i8*, !dbg !3908
  call void @llvm.lifetime.end(i64 4, i8* %15) #1, !dbg !3908
  %16 = bitcast i32* %backlog to i8*, !dbg !3908
  call void @llvm.lifetime.end(i64 4, i8* %16) #1, !dbg !3908
  %17 = load %struct._object*, %struct._object** %retval, !dbg !3908
  ret %struct._object* %17, !dbg !3908
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_recv(%struct.PySocketSockObject* %s, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %recvlen = alloca i64, align 8
  %outlen = alloca i64, align 8
  %flags = alloca i32, align 4
  %buf = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1237, metadata !2310), !dbg !3909
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1238, metadata !2310), !dbg !3910
  %0 = bitcast i64* %recvlen to i8*, !dbg !3911
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !3911
  call void @llvm.dbg.declare(metadata i64* %recvlen, metadata !1239, metadata !2310), !dbg !3912
  %1 = bitcast i64* %outlen to i8*, !dbg !3911
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !3911
  call void @llvm.dbg.declare(metadata i64* %outlen, metadata !1240, metadata !2310), !dbg !3913
  %2 = bitcast i32* %flags to i8*, !dbg !3914
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !3914
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1241, metadata !2310), !dbg !3915
  store i32 0, i32* %flags, align 4, !dbg !3915, !tbaa !3034
  %3 = bitcast %struct._object** %buf to i8*, !dbg !3916
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !3916
  call void @llvm.dbg.declare(metadata %struct._object** %buf, metadata !1242, metadata !2310), !dbg !3917
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !3918, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.342, i32 0, i32 0), i64* %recvlen, i32* %flags), !dbg !3920
  %tobool = icmp ne i32 %call, 0, !dbg !3920
  br i1 %tobool, label %if.end, label %if.then, !dbg !3921

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !3922
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3922

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %recvlen, align 8, !dbg !3923, !tbaa !2963
  %cmp = icmp slt i64 %5, 0, !dbg !3925
  br i1 %cmp, label %if.then.1, label %if.end.2, !dbg !3926

if.then.1:                                        ; preds = %if.end
  %6 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !3927, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.343, i32 0, i32 0)), !dbg !3929
  store %struct._object* null, %struct._object** %retval, !dbg !3930
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3930

if.end.2:                                         ; preds = %if.end
  %7 = load i64, i64* %recvlen, align 8, !dbg !3931, !tbaa !2963
  %call3 = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 %7), !dbg !3932
  store %struct._object* %call3, %struct._object** %buf, align 8, !dbg !3933, !tbaa !2326
  %8 = load %struct._object*, %struct._object** %buf, align 8, !dbg !3934, !tbaa !2326
  %cmp4 = icmp eq %struct._object* %8, null, !dbg !3936
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !3937

if.then.5:                                        ; preds = %if.end.2
  store %struct._object* null, %struct._object** %retval, !dbg !3938
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3938

if.end.6:                                         ; preds = %if.end.2
  %9 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !3939, !tbaa !2326
  %10 = load %struct._object*, %struct._object** %buf, align 8, !dbg !3940, !tbaa !2326
  %11 = bitcast %struct._object* %10 to %struct.PyBytesObject*, !dbg !3941
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %11, i32 0, i32 2, !dbg !3942
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !3943
  %12 = load i64, i64* %recvlen, align 8, !dbg !3944, !tbaa !2963
  %13 = load i32, i32* %flags, align 4, !dbg !3945, !tbaa !3034
  %call7 = call i64 @sock_recv_guts(%struct.PySocketSockObject* %9, i8* %arraydecay, i64 %12, i32 %13), !dbg !3946
  store i64 %call7, i64* %outlen, align 8, !dbg !3947, !tbaa !2963
  %14 = load i64, i64* %outlen, align 8, !dbg !3948, !tbaa !2963
  %cmp8 = icmp slt i64 %14, 0, !dbg !3949
  br i1 %cmp8, label %if.then.9, label %if.end.13, !dbg !3950

if.then.9:                                        ; preds = %if.end.6
  br label %do.body, !dbg !3951

do.body:                                          ; preds = %if.then.9
  %15 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3952
  call void @llvm.lifetime.start(i64 8, i8* %15) #1, !dbg !3952
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1243, metadata !2310), !dbg !3954
  %16 = load %struct._object*, %struct._object** %buf, align 8, !dbg !3955, !tbaa !2326
  store %struct._object* %16, %struct._object** %_py_decref_tmp, align 8, !dbg !3954, !tbaa !2326
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3956, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0, !dbg !3958
  %18 = load i64, i64* %ob_refcnt, align 8, !dbg !3959, !tbaa !2335
  %dec = add i64 %18, -1, !dbg !3959
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !3959, !tbaa !2335
  %cmp10 = icmp ne i64 %dec, 0, !dbg !3960
  br i1 %cmp10, label %if.then.11, label %if.else, !dbg !3961

if.then.11:                                       ; preds = %do.body
  br label %if.end.12, !dbg !3962

if.else:                                          ; preds = %do.body
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3964, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1, !dbg !3966
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !3966, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4, !dbg !3967
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !3967, !tbaa !3442
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !3968, !tbaa !2326
  call void %21(%struct._object* %22), !dbg !3969
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.11
  %23 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !3970
  call void @llvm.lifetime.end(i64 8, i8* %23) #1, !dbg !3970
  br label %do.cond, !dbg !3972

do.cond:                                          ; preds = %if.end.12
  br label %do.end, !dbg !3973

do.end:                                           ; preds = %do.cond
  store %struct._object* null, %struct._object** %retval, !dbg !3975
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3975

if.end.13:                                        ; preds = %if.end.6
  %24 = load i64, i64* %outlen, align 8, !dbg !3976, !tbaa !2963
  %25 = load i64, i64* %recvlen, align 8, !dbg !3978, !tbaa !2963
  %cmp14 = icmp ne i64 %24, %25, !dbg !3979
  br i1 %cmp14, label %if.then.15, label %if.end.17, !dbg !3980

if.then.15:                                       ; preds = %if.end.13
  %26 = load i64, i64* %outlen, align 8, !dbg !3981, !tbaa !2963
  %call16 = call i32 @_PyBytes_Resize(%struct._object** %buf, i64 %26), !dbg !3983
  br label %if.end.17, !dbg !3984

if.end.17:                                        ; preds = %if.then.15, %if.end.13
  %27 = load %struct._object*, %struct._object** %buf, align 8, !dbg !3985, !tbaa !2326
  store %struct._object* %27, %struct._object** %retval, !dbg !3986
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !3986

cleanup:                                          ; preds = %if.end.17, %do.end, %if.then.5, %if.then.1, %if.then
  %28 = bitcast %struct._object** %buf to i8*, !dbg !3987
  call void @llvm.lifetime.end(i64 8, i8* %28) #1, !dbg !3987
  %29 = bitcast i32* %flags to i8*, !dbg !3987
  call void @llvm.lifetime.end(i64 4, i8* %29) #1, !dbg !3987
  %30 = bitcast i64* %outlen to i8*, !dbg !3987
  call void @llvm.lifetime.end(i64 8, i8* %30) #1, !dbg !3987
  %31 = bitcast i64* %recvlen to i8*, !dbg !3987
  call void @llvm.lifetime.end(i64 8, i8* %31) #1, !dbg !3987
  %32 = load %struct._object*, %struct._object** %retval, !dbg !3987
  ret %struct._object* %32, !dbg !3987
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_recv_into(%struct.PySocketSockObject* %s, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %flags = alloca i32, align 4
  %pbuf = alloca %struct.bufferinfo, align 8
  %buf = alloca i8*, align 8
  %buflen = alloca i64, align 8
  %readlen = alloca i64, align 8
  %recvlen = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1269, metadata !2310), !dbg !3988
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1270, metadata !2310), !dbg !3989
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %kwds.addr, metadata !1271, metadata !2310), !dbg !3990
  %0 = bitcast i32* %flags to i8*, !dbg !3991
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !3991
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1272, metadata !2310), !dbg !3992
  store i32 0, i32* %flags, align 4, !dbg !3992, !tbaa !3034
  %1 = bitcast %struct.bufferinfo* %pbuf to i8*, !dbg !3993
  call void @llvm.lifetime.start(i64 80, i8* %1) #1, !dbg !3993
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %pbuf, metadata !1273, metadata !2310), !dbg !3994
  %2 = bitcast i8** %buf to i8*, !dbg !3995
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !3995
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !1274, metadata !2310), !dbg !3996
  %3 = bitcast i64* %buflen to i8*, !dbg !3997
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !3997
  call void @llvm.dbg.declare(metadata i64* %buflen, metadata !1275, metadata !2310), !dbg !3998
  %4 = bitcast i64* %readlen to i8*, !dbg !3997
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !3997
  call void @llvm.dbg.declare(metadata i64* %readlen, metadata !1276, metadata !2310), !dbg !3999
  %5 = bitcast i64* %recvlen to i8*, !dbg !3997
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !3997
  call void @llvm.dbg.declare(metadata i64* %recvlen, metadata !1277, metadata !2310), !dbg !4000
  store i64 0, i64* %recvlen, align 8, !dbg !4000, !tbaa !2963
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !4001, !tbaa !2326
  %7 = load %struct._object*, %struct._object** %kwds.addr, align 8, !dbg !4003, !tbaa !2326
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %6, %struct._object* %7, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.347, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @sock_recv_into.kwlist, i32 0, i32 0), %struct.bufferinfo* %pbuf, i64* %recvlen, i32* %flags), !dbg !4004
  %tobool = icmp ne i32 %call, 0, !dbg !4004
  br i1 %tobool, label %if.end, label %if.then, !dbg !4005

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !4006
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4006

if.end:                                           ; preds = %entry
  %buf1 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %pbuf, i32 0, i32 0, !dbg !4007
  %8 = load i8*, i8** %buf1, align 8, !dbg !4007, !tbaa !4008
  store i8* %8, i8** %buf, align 8, !dbg !4010, !tbaa !2326
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %pbuf, i32 0, i32 2, !dbg !4011
  %9 = load i64, i64* %len, align 8, !dbg !4011, !tbaa !4012
  store i64 %9, i64* %buflen, align 8, !dbg !4013, !tbaa !2963
  %10 = load i64, i64* %recvlen, align 8, !dbg !4014, !tbaa !2963
  %cmp = icmp slt i64 %10, 0, !dbg !4016
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !4017

if.then.2:                                        ; preds = %if.end
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4018
  %11 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !4020, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %11, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.348, i32 0, i32 0)), !dbg !4021
  store %struct._object* null, %struct._object** %retval, !dbg !4022
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4022

if.end.3:                                         ; preds = %if.end
  %12 = load i64, i64* %recvlen, align 8, !dbg !4023, !tbaa !2963
  %cmp4 = icmp eq i64 %12, 0, !dbg !4025
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !4026

if.then.5:                                        ; preds = %if.end.3
  %13 = load i64, i64* %buflen, align 8, !dbg !4027, !tbaa !2963
  store i64 %13, i64* %recvlen, align 8, !dbg !4029, !tbaa !2963
  br label %if.end.6, !dbg !4030

if.end.6:                                         ; preds = %if.then.5, %if.end.3
  %14 = load i64, i64* %buflen, align 8, !dbg !4031, !tbaa !2963
  %15 = load i64, i64* %recvlen, align 8, !dbg !4033, !tbaa !2963
  %cmp7 = icmp slt i64 %14, %15, !dbg !4034
  br i1 %cmp7, label %if.then.8, label %if.end.9, !dbg !4035

if.then.8:                                        ; preds = %if.end.6
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4036
  %16 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !4038, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %16, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.349, i32 0, i32 0)), !dbg !4039
  store %struct._object* null, %struct._object** %retval, !dbg !4040
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4040

if.end.9:                                         ; preds = %if.end.6
  %17 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4041, !tbaa !2326
  %18 = load i8*, i8** %buf, align 8, !dbg !4042, !tbaa !2326
  %19 = load i64, i64* %recvlen, align 8, !dbg !4043, !tbaa !2963
  %20 = load i32, i32* %flags, align 4, !dbg !4044, !tbaa !3034
  %call10 = call i64 @sock_recv_guts(%struct.PySocketSockObject* %17, i8* %18, i64 %19, i32 %20), !dbg !4045
  store i64 %call10, i64* %readlen, align 8, !dbg !4046, !tbaa !2963
  %21 = load i64, i64* %readlen, align 8, !dbg !4047, !tbaa !2963
  %cmp11 = icmp slt i64 %21, 0, !dbg !4049
  br i1 %cmp11, label %if.then.12, label %if.end.13, !dbg !4050

if.then.12:                                       ; preds = %if.end.9
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4051
  store %struct._object* null, %struct._object** %retval, !dbg !4053
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4053

if.end.13:                                        ; preds = %if.end.9
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4054
  %22 = load i64, i64* %readlen, align 8, !dbg !4055, !tbaa !2963
  %call14 = call %struct._object* @PyLong_FromSsize_t(i64 %22), !dbg !4056
  store %struct._object* %call14, %struct._object** %retval, !dbg !4057
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4057

cleanup:                                          ; preds = %if.end.13, %if.then.12, %if.then.8, %if.then.2, %if.then
  %23 = bitcast i64* %recvlen to i8*, !dbg !4058
  call void @llvm.lifetime.end(i64 8, i8* %23) #1, !dbg !4058
  %24 = bitcast i64* %readlen to i8*, !dbg !4058
  call void @llvm.lifetime.end(i64 8, i8* %24) #1, !dbg !4058
  %25 = bitcast i64* %buflen to i8*, !dbg !4058
  call void @llvm.lifetime.end(i64 8, i8* %25) #1, !dbg !4058
  %26 = bitcast i8** %buf to i8*, !dbg !4058
  call void @llvm.lifetime.end(i64 8, i8* %26) #1, !dbg !4058
  %27 = bitcast %struct.bufferinfo* %pbuf to i8*, !dbg !4058
  call void @llvm.lifetime.end(i64 80, i8* %27) #1, !dbg !4058
  %28 = bitcast i32* %flags to i8*, !dbg !4058
  call void @llvm.lifetime.end(i64 4, i8* %28) #1, !dbg !4058
  %29 = load %struct._object*, %struct._object** %retval, !dbg !4058
  ret %struct._object* %29, !dbg !4058
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_recvfrom(%struct.PySocketSockObject* %s, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %buf = alloca %struct._object*, align 8
  %addr = alloca %struct._object*, align 8
  %ret = alloca %struct._object*, align 8
  %flags = alloca i32, align 4
  %recvlen = alloca i64, align 8
  %outlen = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp29 = alloca %struct._object*, align 8
  %_py_decref_tmp33 = alloca %struct._object*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1280, metadata !2310), !dbg !4059
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1281, metadata !2310), !dbg !4060
  %0 = bitcast %struct._object** %buf to i8*, !dbg !4061
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !4061
  call void @llvm.dbg.declare(metadata %struct._object** %buf, metadata !1282, metadata !2310), !dbg !4062
  store %struct._object* null, %struct._object** %buf, align 8, !dbg !4062, !tbaa !2326
  %1 = bitcast %struct._object** %addr to i8*, !dbg !4063
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !4063
  call void @llvm.dbg.declare(metadata %struct._object** %addr, metadata !1283, metadata !2310), !dbg !4064
  store %struct._object* null, %struct._object** %addr, align 8, !dbg !4064, !tbaa !2326
  %2 = bitcast %struct._object** %ret to i8*, !dbg !4065
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !4065
  call void @llvm.dbg.declare(metadata %struct._object** %ret, metadata !1284, metadata !2310), !dbg !4066
  store %struct._object* null, %struct._object** %ret, align 8, !dbg !4066, !tbaa !2326
  %3 = bitcast i32* %flags to i8*, !dbg !4067
  call void @llvm.lifetime.start(i64 4, i8* %3) #1, !dbg !4067
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1285, metadata !2310), !dbg !4068
  store i32 0, i32* %flags, align 4, !dbg !4068, !tbaa !3034
  %4 = bitcast i64* %recvlen to i8*, !dbg !4069
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !4069
  call void @llvm.dbg.declare(metadata i64* %recvlen, metadata !1286, metadata !2310), !dbg !4070
  %5 = bitcast i64* %outlen to i8*, !dbg !4069
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !4069
  call void @llvm.dbg.declare(metadata i64* %outlen, metadata !1287, metadata !2310), !dbg !4071
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !4072, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.350, i32 0, i32 0), i64* %recvlen, i32* %flags), !dbg !4074
  %tobool = icmp ne i32 %call, 0, !dbg !4074
  br i1 %tobool, label %if.end, label %if.then, !dbg !4075

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !4076
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4076

if.end:                                           ; preds = %entry
  %7 = load i64, i64* %recvlen, align 8, !dbg !4077, !tbaa !2963
  %cmp = icmp slt i64 %7, 0, !dbg !4079
  br i1 %cmp, label %if.then.1, label %if.end.2, !dbg !4080

if.then.1:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !4081, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.351, i32 0, i32 0)), !dbg !4083
  store %struct._object* null, %struct._object** %retval, !dbg !4084
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4084

if.end.2:                                         ; preds = %if.end
  %9 = load i64, i64* %recvlen, align 8, !dbg !4085, !tbaa !2963
  %call3 = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 %9), !dbg !4086
  store %struct._object* %call3, %struct._object** %buf, align 8, !dbg !4087, !tbaa !2326
  %10 = load %struct._object*, %struct._object** %buf, align 8, !dbg !4088, !tbaa !2326
  %cmp4 = icmp eq %struct._object* %10, null, !dbg !4090
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !4091

if.then.5:                                        ; preds = %if.end.2
  store %struct._object* null, %struct._object** %retval, !dbg !4092
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4092

if.end.6:                                         ; preds = %if.end.2
  %11 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4093, !tbaa !2326
  %12 = load %struct._object*, %struct._object** %buf, align 8, !dbg !4094, !tbaa !2326
  %13 = bitcast %struct._object* %12 to %struct.PyBytesObject*, !dbg !4095
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %13, i32 0, i32 2, !dbg !4096
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !4097
  %14 = load i64, i64* %recvlen, align 8, !dbg !4098, !tbaa !2963
  %15 = load i32, i32* %flags, align 4, !dbg !4099, !tbaa !3034
  %call7 = call i64 @sock_recvfrom_guts(%struct.PySocketSockObject* %11, i8* %arraydecay, i64 %14, i32 %15, %struct._object** %addr), !dbg !4100
  store i64 %call7, i64* %outlen, align 8, !dbg !4101, !tbaa !2963
  %16 = load i64, i64* %outlen, align 8, !dbg !4102, !tbaa !2963
  %cmp8 = icmp slt i64 %16, 0, !dbg !4104
  br i1 %cmp8, label %if.then.9, label %if.end.10, !dbg !4105

if.then.9:                                        ; preds = %if.end.6
  br label %finally, !dbg !4106

if.end.10:                                        ; preds = %if.end.6
  %17 = load i64, i64* %outlen, align 8, !dbg !4108, !tbaa !2963
  %18 = load i64, i64* %recvlen, align 8, !dbg !4110, !tbaa !2963
  %cmp11 = icmp ne i64 %17, %18, !dbg !4111
  br i1 %cmp11, label %if.then.12, label %if.end.17, !dbg !4112

if.then.12:                                       ; preds = %if.end.10
  %19 = load i64, i64* %outlen, align 8, !dbg !4113, !tbaa !2963
  %call13 = call i32 @_PyBytes_Resize(%struct._object** %buf, i64 %19), !dbg !4116
  %cmp14 = icmp slt i32 %call13, 0, !dbg !4117
  br i1 %cmp14, label %if.then.15, label %if.end.16, !dbg !4118

if.then.15:                                       ; preds = %if.then.12
  br label %finally, !dbg !4119

if.end.16:                                        ; preds = %if.then.12
  br label %if.end.17, !dbg !4120

if.end.17:                                        ; preds = %if.end.16, %if.end.10
  %20 = load %struct._object*, %struct._object** %buf, align 8, !dbg !4121, !tbaa !2326
  %21 = load %struct._object*, %struct._object** %addr, align 8, !dbg !4122, !tbaa !2326
  %call18 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %20, %struct._object* %21), !dbg !4123
  store %struct._object* %call18, %struct._object** %ret, align 8, !dbg !4124, !tbaa !2326
  br label %finally, !dbg !4125

finally:                                          ; preds = %if.end.17, %if.then.15, %if.then.9
  br label %do.body, !dbg !4126

do.body:                                          ; preds = %finally
  %22 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !4127
  call void @llvm.lifetime.start(i64 8, i8* %22) #1, !dbg !4127
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1288, metadata !2310), !dbg !4129
  %23 = load %struct._object*, %struct._object** %buf, align 8, !dbg !4130, !tbaa !2326
  store %struct._object* %23, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4129, !tbaa !2326
  %24 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4131, !tbaa !2326
  %cmp19 = icmp ne %struct._object* %24, null, !dbg !4132
  br i1 %cmp19, label %if.then.20, label %if.end.25, !dbg !4133

if.then.20:                                       ; preds = %do.body
  br label %do.body.21, !dbg !4134

do.body.21:                                       ; preds = %if.then.20
  %25 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4136
  call void @llvm.lifetime.start(i64 8, i8* %25) #1, !dbg !4136
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1290, metadata !2310), !dbg !4138
  %26 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4139, !tbaa !2326
  store %struct._object* %26, %struct._object** %_py_decref_tmp, align 8, !dbg !4138, !tbaa !2326
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4140, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0, !dbg !4142
  %28 = load i64, i64* %ob_refcnt, align 8, !dbg !4143, !tbaa !2335
  %dec = add i64 %28, -1, !dbg !4143
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4143, !tbaa !2335
  %cmp22 = icmp ne i64 %dec, 0, !dbg !4144
  br i1 %cmp22, label %if.then.23, label %if.else, !dbg !4145

if.then.23:                                       ; preds = %do.body.21
  br label %if.end.24, !dbg !4146

if.else:                                          ; preds = %do.body.21
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4148, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1, !dbg !4150
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4150, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4, !dbg !4151
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4151, !tbaa !3442
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4152, !tbaa !2326
  call void %31(%struct._object* %32), !dbg !4153
  br label %if.end.24

if.end.24:                                        ; preds = %if.else, %if.then.23
  %33 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4154
  call void @llvm.lifetime.end(i64 8, i8* %33) #1, !dbg !4154
  br label %do.cond, !dbg !4156

do.cond:                                          ; preds = %if.end.24
  br label %do.end, !dbg !4157

do.end:                                           ; preds = %do.cond
  br label %if.end.25, !dbg !4159

if.end.25:                                        ; preds = %do.end, %do.body
  %34 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !4161
  call void @llvm.lifetime.end(i64 8, i8* %34) #1, !dbg !4161
  br label %do.cond.26, !dbg !4164

do.cond.26:                                       ; preds = %if.end.25
  br label %do.end.27, !dbg !4165

do.end.27:                                        ; preds = %do.cond.26
  br label %do.body.28, !dbg !4167

do.body.28:                                       ; preds = %do.end.27
  %35 = bitcast %struct._object** %_py_xdecref_tmp29 to i8*, !dbg !4168
  call void @llvm.lifetime.start(i64 8, i8* %35) #1, !dbg !4168
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp29, metadata !1293, metadata !2310), !dbg !4170
  %36 = load %struct._object*, %struct._object** %addr, align 8, !dbg !4171, !tbaa !2326
  store %struct._object* %36, %struct._object** %_py_xdecref_tmp29, align 8, !dbg !4170, !tbaa !2326
  %37 = load %struct._object*, %struct._object** %_py_xdecref_tmp29, align 8, !dbg !4172, !tbaa !2326
  %cmp30 = icmp ne %struct._object* %37, null, !dbg !4173
  br i1 %cmp30, label %if.then.31, label %if.end.44, !dbg !4174

if.then.31:                                       ; preds = %do.body.28
  br label %do.body.32, !dbg !4175

do.body.32:                                       ; preds = %if.then.31
  %38 = bitcast %struct._object** %_py_decref_tmp33 to i8*, !dbg !4177
  call void @llvm.lifetime.start(i64 8, i8* %38) #1, !dbg !4177
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp33, metadata !1295, metadata !2310), !dbg !4179
  %39 = load %struct._object*, %struct._object** %_py_xdecref_tmp29, align 8, !dbg !4180, !tbaa !2326
  store %struct._object* %39, %struct._object** %_py_decref_tmp33, align 8, !dbg !4179, !tbaa !2326
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8, !dbg !4181, !tbaa !2326
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 0, !dbg !4183
  %41 = load i64, i64* %ob_refcnt34, align 8, !dbg !4184, !tbaa !2335
  %dec35 = add i64 %41, -1, !dbg !4184
  store i64 %dec35, i64* %ob_refcnt34, align 8, !dbg !4184, !tbaa !2335
  %cmp36 = icmp ne i64 %dec35, 0, !dbg !4185
  br i1 %cmp36, label %if.then.37, label %if.else.38, !dbg !4186

if.then.37:                                       ; preds = %do.body.32
  br label %if.end.41, !dbg !4187

if.else.38:                                       ; preds = %do.body.32
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8, !dbg !4189, !tbaa !2326
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1, !dbg !4191
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8, !dbg !4191, !tbaa !2318
  %tp_dealloc40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 4, !dbg !4192
  %44 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc40, align 8, !dbg !4192, !tbaa !3442
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8, !dbg !4193, !tbaa !2326
  call void %44(%struct._object* %45), !dbg !4194
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.38, %if.then.37
  %46 = bitcast %struct._object** %_py_decref_tmp33 to i8*, !dbg !4195
  call void @llvm.lifetime.end(i64 8, i8* %46) #1, !dbg !4195
  br label %do.cond.42, !dbg !4197

do.cond.42:                                       ; preds = %if.end.41
  br label %do.end.43, !dbg !4198

do.end.43:                                        ; preds = %do.cond.42
  br label %if.end.44, !dbg !4200

if.end.44:                                        ; preds = %do.end.43, %do.body.28
  %47 = bitcast %struct._object** %_py_xdecref_tmp29 to i8*, !dbg !4202
  call void @llvm.lifetime.end(i64 8, i8* %47) #1, !dbg !4202
  br label %do.cond.45, !dbg !4203

do.cond.45:                                       ; preds = %if.end.44
  br label %do.end.46, !dbg !4204

do.end.46:                                        ; preds = %do.cond.45
  %48 = load %struct._object*, %struct._object** %ret, align 8, !dbg !4206, !tbaa !2326
  store %struct._object* %48, %struct._object** %retval, !dbg !4207
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4207

cleanup:                                          ; preds = %do.end.46, %if.then.5, %if.then.1, %if.then
  %49 = bitcast i64* %outlen to i8*, !dbg !4208
  call void @llvm.lifetime.end(i64 8, i8* %49) #1, !dbg !4208
  %50 = bitcast i64* %recvlen to i8*, !dbg !4208
  call void @llvm.lifetime.end(i64 8, i8* %50) #1, !dbg !4208
  %51 = bitcast i32* %flags to i8*, !dbg !4208
  call void @llvm.lifetime.end(i64 4, i8* %51) #1, !dbg !4208
  %52 = bitcast %struct._object** %ret to i8*, !dbg !4208
  call void @llvm.lifetime.end(i64 8, i8* %52) #1, !dbg !4208
  %53 = bitcast %struct._object** %addr to i8*, !dbg !4208
  call void @llvm.lifetime.end(i64 8, i8* %53) #1, !dbg !4208
  %54 = bitcast %struct._object** %buf to i8*, !dbg !4208
  call void @llvm.lifetime.end(i64 8, i8* %54) #1, !dbg !4208
  %55 = load %struct._object*, %struct._object** %retval, !dbg !4208
  ret %struct._object* %55, !dbg !4208
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_recvfrom_into(%struct.PySocketSockObject* %s, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %flags = alloca i32, align 4
  %pbuf = alloca %struct.bufferinfo, align 8
  %buf = alloca i8*, align 8
  %readlen = alloca i64, align 8
  %buflen = alloca i64, align 8
  %recvlen = alloca i64, align 8
  %addr = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1321, metadata !2310), !dbg !4209
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1322, metadata !2310), !dbg !4210
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %kwds.addr, metadata !1323, metadata !2310), !dbg !4211
  %0 = bitcast i32* %flags to i8*, !dbg !4212
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !4212
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1324, metadata !2310), !dbg !4213
  store i32 0, i32* %flags, align 4, !dbg !4213, !tbaa !3034
  %1 = bitcast %struct.bufferinfo* %pbuf to i8*, !dbg !4214
  call void @llvm.lifetime.start(i64 80, i8* %1) #1, !dbg !4214
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %pbuf, metadata !1325, metadata !2310), !dbg !4215
  %2 = bitcast i8** %buf to i8*, !dbg !4216
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !4216
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !1326, metadata !2310), !dbg !4217
  %3 = bitcast i64* %readlen to i8*, !dbg !4218
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !4218
  call void @llvm.dbg.declare(metadata i64* %readlen, metadata !1327, metadata !2310), !dbg !4219
  %4 = bitcast i64* %buflen to i8*, !dbg !4218
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !4218
  call void @llvm.dbg.declare(metadata i64* %buflen, metadata !1328, metadata !2310), !dbg !4220
  %5 = bitcast i64* %recvlen to i8*, !dbg !4218
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !4218
  call void @llvm.dbg.declare(metadata i64* %recvlen, metadata !1329, metadata !2310), !dbg !4221
  store i64 0, i64* %recvlen, align 8, !dbg !4221, !tbaa !2963
  %6 = bitcast %struct._object** %addr to i8*, !dbg !4222
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !4222
  call void @llvm.dbg.declare(metadata %struct._object** %addr, metadata !1330, metadata !2310), !dbg !4223
  store %struct._object* null, %struct._object** %addr, align 8, !dbg !4223, !tbaa !2326
  %7 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !4224, !tbaa !2326
  %8 = load %struct._object*, %struct._object** %kwds.addr, align 8, !dbg !4226, !tbaa !2326
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %7, %struct._object* %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.352, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @sock_recvfrom_into.kwlist, i32 0, i32 0), %struct.bufferinfo* %pbuf, i64* %recvlen, i32* %flags), !dbg !4227
  %tobool = icmp ne i32 %call, 0, !dbg !4227
  br i1 %tobool, label %if.end, label %if.then, !dbg !4228

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !4229
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4229

if.end:                                           ; preds = %entry
  %buf1 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %pbuf, i32 0, i32 0, !dbg !4230
  %9 = load i8*, i8** %buf1, align 8, !dbg !4230, !tbaa !4008
  store i8* %9, i8** %buf, align 8, !dbg !4231, !tbaa !2326
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %pbuf, i32 0, i32 2, !dbg !4232
  %10 = load i64, i64* %len, align 8, !dbg !4232, !tbaa !4012
  store i64 %10, i64* %buflen, align 8, !dbg !4233, !tbaa !2963
  %11 = load i64, i64* %recvlen, align 8, !dbg !4234, !tbaa !2963
  %cmp = icmp slt i64 %11, 0, !dbg !4236
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !4237

if.then.2:                                        ; preds = %if.end
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4238
  %12 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !4240, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %12, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.353, i32 0, i32 0)), !dbg !4241
  store %struct._object* null, %struct._object** %retval, !dbg !4242
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4242

if.end.3:                                         ; preds = %if.end
  %13 = load i64, i64* %recvlen, align 8, !dbg !4243, !tbaa !2963
  %cmp4 = icmp eq i64 %13, 0, !dbg !4245
  br i1 %cmp4, label %if.then.5, label %if.else, !dbg !4246

if.then.5:                                        ; preds = %if.end.3
  %14 = load i64, i64* %buflen, align 8, !dbg !4247, !tbaa !2963
  store i64 %14, i64* %recvlen, align 8, !dbg !4249, !tbaa !2963
  br label %if.end.9, !dbg !4250

if.else:                                          ; preds = %if.end.3
  %15 = load i64, i64* %recvlen, align 8, !dbg !4251, !tbaa !2963
  %16 = load i64, i64* %buflen, align 8, !dbg !4253, !tbaa !2963
  %cmp6 = icmp sgt i64 %15, %16, !dbg !4254
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !4255

if.then.7:                                        ; preds = %if.else
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4256
  %17 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !4258, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %17, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.354, i32 0, i32 0)), !dbg !4259
  store %struct._object* null, %struct._object** %retval, !dbg !4260
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4260

if.end.8:                                         ; preds = %if.else
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %if.then.5
  %18 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4261, !tbaa !2326
  %19 = load i8*, i8** %buf, align 8, !dbg !4262, !tbaa !2326
  %20 = load i64, i64* %recvlen, align 8, !dbg !4263, !tbaa !2963
  %21 = load i32, i32* %flags, align 4, !dbg !4264, !tbaa !3034
  %call10 = call i64 @sock_recvfrom_guts(%struct.PySocketSockObject* %18, i8* %19, i64 %20, i32 %21, %struct._object** %addr), !dbg !4265
  store i64 %call10, i64* %readlen, align 8, !dbg !4266, !tbaa !2963
  %22 = load i64, i64* %readlen, align 8, !dbg !4267, !tbaa !2963
  %cmp11 = icmp slt i64 %22, 0, !dbg !4268
  br i1 %cmp11, label %if.then.12, label %if.end.23, !dbg !4269

if.then.12:                                       ; preds = %if.end.9
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4270
  br label %do.body, !dbg !4271

do.body:                                          ; preds = %if.then.12
  %23 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !4272
  call void @llvm.lifetime.start(i64 8, i8* %23) #1, !dbg !4272
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1331, metadata !2310), !dbg !4274
  %24 = load %struct._object*, %struct._object** %addr, align 8, !dbg !4275, !tbaa !2326
  store %struct._object* %24, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4274, !tbaa !2326
  %25 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4276, !tbaa !2326
  %cmp13 = icmp ne %struct._object* %25, null, !dbg !4277
  br i1 %cmp13, label %if.then.14, label %if.end.20, !dbg !4278

if.then.14:                                       ; preds = %do.body
  br label %do.body.15, !dbg !4279

do.body.15:                                       ; preds = %if.then.14
  %26 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4281
  call void @llvm.lifetime.start(i64 8, i8* %26) #1, !dbg !4281
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1335, metadata !2310), !dbg !4283
  %27 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4284, !tbaa !2326
  store %struct._object* %27, %struct._object** %_py_decref_tmp, align 8, !dbg !4283, !tbaa !2326
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4285, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0, !dbg !4287
  %29 = load i64, i64* %ob_refcnt, align 8, !dbg !4288, !tbaa !2335
  %dec = add i64 %29, -1, !dbg !4288
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4288, !tbaa !2335
  %cmp16 = icmp ne i64 %dec, 0, !dbg !4289
  br i1 %cmp16, label %if.then.17, label %if.else.18, !dbg !4290

if.then.17:                                       ; preds = %do.body.15
  br label %if.end.19, !dbg !4291

if.else.18:                                       ; preds = %do.body.15
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4293, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !4295
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4295, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4, !dbg !4296
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4296, !tbaa !3442
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4297, !tbaa !2326
  call void %32(%struct._object* %33), !dbg !4298
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.18, %if.then.17
  %34 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4299
  call void @llvm.lifetime.end(i64 8, i8* %34) #1, !dbg !4299
  br label %do.cond, !dbg !4301

do.cond:                                          ; preds = %if.end.19
  br label %do.end, !dbg !4302

do.end:                                           ; preds = %do.cond
  br label %if.end.20, !dbg !4304

if.end.20:                                        ; preds = %do.end, %do.body
  %35 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !4306
  call void @llvm.lifetime.end(i64 8, i8* %35) #1, !dbg !4306
  br label %do.cond.21, !dbg !4309

do.cond.21:                                       ; preds = %if.end.20
  br label %do.end.22, !dbg !4310

do.end.22:                                        ; preds = %do.cond.21
  store %struct._object* null, %struct._object** %retval, !dbg !4312
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4312

if.end.23:                                        ; preds = %if.end.9
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4313
  %36 = load i64, i64* %readlen, align 8, !dbg !4314, !tbaa !2963
  %37 = load %struct._object*, %struct._object** %addr, align 8, !dbg !4315, !tbaa !2326
  %call24 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.355, i32 0, i32 0), i64 %36, %struct._object* %37), !dbg !4316
  store %struct._object* %call24, %struct._object** %retval, !dbg !4317
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4317

cleanup:                                          ; preds = %if.end.23, %do.end.22, %if.then.7, %if.then.2, %if.then
  %38 = bitcast %struct._object** %addr to i8*, !dbg !4318
  call void @llvm.lifetime.end(i64 8, i8* %38) #1, !dbg !4318
  %39 = bitcast i64* %recvlen to i8*, !dbg !4318
  call void @llvm.lifetime.end(i64 8, i8* %39) #1, !dbg !4318
  %40 = bitcast i64* %buflen to i8*, !dbg !4318
  call void @llvm.lifetime.end(i64 8, i8* %40) #1, !dbg !4318
  %41 = bitcast i64* %readlen to i8*, !dbg !4318
  call void @llvm.lifetime.end(i64 8, i8* %41) #1, !dbg !4318
  %42 = bitcast i8** %buf to i8*, !dbg !4318
  call void @llvm.lifetime.end(i64 8, i8* %42) #1, !dbg !4318
  %43 = bitcast %struct.bufferinfo* %pbuf to i8*, !dbg !4318
  call void @llvm.lifetime.end(i64 80, i8* %43) #1, !dbg !4318
  %44 = bitcast i32* %flags to i8*, !dbg !4318
  call void @llvm.lifetime.end(i64 4, i8* %44) #1, !dbg !4318
  %45 = load %struct._object*, %struct._object** %retval, !dbg !4318
  ret %struct._object* %45, !dbg !4318
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_send(%struct.PySocketSockObject* %s, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %buf = alloca i8*, align 8
  %len = alloca i64, align 8
  %n = alloca i64, align 8
  %flags = alloca i32, align 4
  %timeout = alloca i32, align 4
  %pbuf = alloca %struct.bufferinfo, align 8
  %cleanup.dest.slot = alloca i32
  %now = alloca %struct.timeval, align 8
  %deadline = alloca %struct.timeval, align 8
  %interval = alloca double, align 8
  %has_timeout = alloca i32, align 4
  %_save = alloca %struct._ts*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1340, metadata !2310), !dbg !4319
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1341, metadata !2310), !dbg !4320
  %0 = bitcast i8** %buf to i8*, !dbg !4321
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !4321
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !1342, metadata !2310), !dbg !4322
  %1 = bitcast i64* %len to i8*, !dbg !4323
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !4323
  call void @llvm.dbg.declare(metadata i64* %len, metadata !1343, metadata !2310), !dbg !4324
  %2 = bitcast i64* %n to i8*, !dbg !4323
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !4323
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1344, metadata !2310), !dbg !4325
  store i64 -1, i64* %n, align 8, !dbg !4325, !tbaa !2963
  %3 = bitcast i32* %flags to i8*, !dbg !4326
  call void @llvm.lifetime.start(i64 4, i8* %3) #1, !dbg !4326
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1345, metadata !2310), !dbg !4327
  store i32 0, i32* %flags, align 4, !dbg !4327, !tbaa !3034
  %4 = bitcast i32* %timeout to i8*, !dbg !4326
  call void @llvm.lifetime.start(i64 4, i8* %4) #1, !dbg !4326
  call void @llvm.dbg.declare(metadata i32* %timeout, metadata !1346, metadata !2310), !dbg !4328
  %5 = bitcast %struct.bufferinfo* %pbuf to i8*, !dbg !4329
  call void @llvm.lifetime.start(i64 80, i8* %5) #1, !dbg !4329
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %pbuf, metadata !1347, metadata !2310), !dbg !4330
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !4331, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %6, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.356, i32 0, i32 0), %struct.bufferinfo* %pbuf, i32* %flags), !dbg !4333
  %tobool = icmp ne i32 %call, 0, !dbg !4333
  br i1 %tobool, label %if.end, label %if.then, !dbg !4334

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !4335
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.57, !dbg !4335

if.end:                                           ; preds = %entry
  %buf1 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %pbuf, i32 0, i32 0, !dbg !4336
  %7 = load i8*, i8** %buf1, align 8, !dbg !4336, !tbaa !4008
  store i8* %7, i8** %buf, align 8, !dbg !4337, !tbaa !2326
  %len2 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %pbuf, i32 0, i32 2, !dbg !4338
  %8 = load i64, i64* %len2, align 8, !dbg !4338, !tbaa !4012
  store i64 %8, i64* %len, align 8, !dbg !4339, !tbaa !2963
  %9 = bitcast %struct.timeval* %now to i8*, !dbg !4340
  call void @llvm.lifetime.start(i64 16, i8* %9) #1, !dbg !4340
  call void @llvm.dbg.declare(metadata %struct.timeval* %now, metadata !1348, metadata !2310), !dbg !4341
  %10 = bitcast %struct.timeval* %deadline to i8*, !dbg !4340
  call void @llvm.lifetime.start(i64 16, i8* %10) #1, !dbg !4340
  call void @llvm.dbg.declare(metadata %struct.timeval* %deadline, metadata !1350, metadata !2310), !dbg !4342
  %11 = bitcast %struct.timeval* %deadline to i8*, !dbg !4342
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 16, i32 8, i1 false), !dbg !4342
  %12 = bitcast double* %interval to i8*, !dbg !4343
  call void @llvm.lifetime.start(i64 8, i8* %12) #1, !dbg !4343
  call void @llvm.dbg.declare(metadata double* %interval, metadata !1351, metadata !2310), !dbg !4344
  %13 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4345, !tbaa !2326
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %13, i32 0, i32 6, !dbg !4346
  %14 = load double, double* %sock_timeout, align 8, !dbg !4346, !tbaa !3176
  store double %14, double* %interval, align 8, !dbg !4344, !tbaa !3215
  %15 = bitcast i32* %has_timeout to i8*, !dbg !4347
  call void @llvm.lifetime.start(i64 4, i8* %15) #1, !dbg !4347
  call void @llvm.dbg.declare(metadata i32* %has_timeout, metadata !1352, metadata !2310), !dbg !4348
  %16 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4349, !tbaa !2326
  %sock_timeout3 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %16, i32 0, i32 6, !dbg !4350
  %17 = load double, double* %sock_timeout3, align 8, !dbg !4350, !tbaa !3176
  %cmp = fcmp ogt double %17, 0.000000e+00, !dbg !4351
  %conv = zext i1 %cmp to i32, !dbg !4351
  store i32 %conv, i32* %has_timeout, align 4, !dbg !4348, !tbaa !3034
  %18 = load i32, i32* %has_timeout, align 4, !dbg !4352, !tbaa !3034
  %tobool4 = icmp ne i32 %18, 0, !dbg !4352
  br i1 %tobool4, label %if.then.5, label %if.end.17, !dbg !4354

if.then.5:                                        ; preds = %if.end
  call void @_PyTime_gettimeofday(%struct.timeval* %now), !dbg !4355
  %19 = bitcast %struct.timeval* %deadline to i8*, !dbg !4358
  %20 = bitcast %struct.timeval* %now to i8*, !dbg !4358
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 16, i32 8, i1 false), !dbg !4358, !tbaa.struct !3228
  br label %do.body, !dbg !4359

do.body:                                          ; preds = %if.then.5
  %21 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4360, !tbaa !2326
  %sock_timeout6 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %21, i32 0, i32 6, !dbg !4363
  %22 = load double, double* %sock_timeout6, align 8, !dbg !4363, !tbaa !3176
  %conv7 = fptosi double %22 to i64, !dbg !4364
  %conv8 = sitofp i64 %conv7 to double, !dbg !4364
  %23 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4365, !tbaa !2326
  %sock_timeout9 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %23, i32 0, i32 6, !dbg !4366
  %24 = load double, double* %sock_timeout9, align 8, !dbg !4366, !tbaa !3176
  %sub = fsub double %conv8, %24, !dbg !4367
  %mul = fmul double %sub, 1.000000e+06, !dbg !4368
  %conv10 = fptosi double %mul to i64, !dbg !4369
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !4370
  %25 = load i64, i64* %tv_usec, align 8, !dbg !4371, !tbaa !3242
  %add = add i64 %25, %conv10, !dbg !4371
  store i64 %add, i64* %tv_usec, align 8, !dbg !4371, !tbaa !3242
  %26 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4372, !tbaa !2326
  %sock_timeout11 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %26, i32 0, i32 6, !dbg !4373
  %27 = load double, double* %sock_timeout11, align 8, !dbg !4373, !tbaa !3176
  %conv12 = fptosi double %27 to i64, !dbg !4374
  %tv_usec13 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !4375
  %28 = load i64, i64* %tv_usec13, align 8, !dbg !4375, !tbaa !3242
  %div = sdiv i64 %28, 1000000, !dbg !4376
  %add14 = add i64 %conv12, %div, !dbg !4377
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0, !dbg !4378
  %29 = load i64, i64* %tv_sec, align 8, !dbg !4379, !tbaa !3252
  %add15 = add i64 %29, %add14, !dbg !4379
  store i64 %add15, i64* %tv_sec, align 8, !dbg !4379, !tbaa !3252
  %tv_usec16 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !4380
  %30 = load i64, i64* %tv_usec16, align 8, !dbg !4381, !tbaa !3242
  %rem = srem i64 %30, 1000000, !dbg !4381
  store i64 %rem, i64* %tv_usec16, align 8, !dbg !4381, !tbaa !3242
  br label %do.cond, !dbg !4382

do.cond:                                          ; preds = %do.body
  br label %do.end, !dbg !4383

do.end:                                           ; preds = %do.cond
  br label %if.end.17, !dbg !4385

if.end.17:                                        ; preds = %do.end, %if.end
  br label %while.cond, !dbg !4387

while.cond:                                       ; preds = %if.end.37, %if.end.17
  br label %while.body, !dbg !4390

while.body:                                       ; preds = %while.cond
  %call18 = call i32* @__errno_location() #2, !dbg !4393
  store i32 0, i32* %call18, align 4, !dbg !4395, !tbaa !3034
  %31 = bitcast %struct._ts** %_save to i8*, !dbg !4396
  call void @llvm.lifetime.start(i64 8, i8* %31) #1, !dbg !4396
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1353, metadata !2310), !dbg !4397
  %call19 = call %struct._ts* @PyEval_SaveThread(), !dbg !4398
  store %struct._ts* %call19, %struct._ts** %_save, align 8, !dbg !4399, !tbaa !2326
  %32 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4400, !tbaa !2326
  %33 = load double, double* %interval, align 8, !dbg !4401, !tbaa !3215
  %call20 = call i32 @internal_select_ex(%struct.PySocketSockObject* %32, i32 1, double %33), !dbg !4402
  store i32 %call20, i32* %timeout, align 4, !dbg !4403, !tbaa !3034
  %34 = load i32, i32* %timeout, align 4, !dbg !4404, !tbaa !3034
  %tobool21 = icmp ne i32 %34, 0, !dbg !4404
  br i1 %tobool21, label %if.end.24, label %if.then.22, !dbg !4406

if.then.22:                                       ; preds = %while.body
  %35 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4407, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %35, i32 0, i32 1, !dbg !4409
  %36 = load i32, i32* %sock_fd, align 4, !dbg !4409, !tbaa !2948
  %37 = load i8*, i8** %buf, align 8, !dbg !4410, !tbaa !2326
  %38 = load i64, i64* %len, align 8, !dbg !4411, !tbaa !2963
  %39 = load i32, i32* %flags, align 4, !dbg !4412, !tbaa !3034
  %call23 = call i64 @send(i32 %36, i8* %37, i64 %38, i32 %39), !dbg !4413
  store i64 %call23, i64* %n, align 8, !dbg !4414, !tbaa !2963
  br label %if.end.24, !dbg !4415

if.end.24:                                        ; preds = %if.then.22, %while.body
  %40 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !4416, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %40), !dbg !4417
  %41 = bitcast %struct._ts** %_save to i8*, !dbg !4418
  call void @llvm.lifetime.end(i64 8, i8* %41) #1, !dbg !4418
  %42 = load i32, i32* %timeout, align 4, !dbg !4419, !tbaa !3034
  %cmp25 = icmp eq i32 %42, 1, !dbg !4421
  br i1 %cmp25, label %if.then.27, label %if.end.28, !dbg !4422

if.then.27:                                       ; preds = %if.end.24
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4423
  %43 = load %struct._object*, %struct._object** @socket_timeout, align 8, !dbg !4425, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %43, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.300, i32 0, i32 0)), !dbg !4426
  store %struct._object* null, %struct._object** %retval, !dbg !4427
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4427

if.end.28:                                        ; preds = %if.end.24
  %44 = load i32, i32* %has_timeout, align 4, !dbg !4428, !tbaa !3034
  %tobool29 = icmp ne i32 %44, 0, !dbg !4428
  br i1 %tobool29, label %lor.lhs.false, label %if.then.36, !dbg !4430

lor.lhs.false:                                    ; preds = %if.end.28
  %call30 = call i32* @__errno_location() #2, !dbg !4431
  %45 = load i32, i32* %call30, align 4, !dbg !4433, !tbaa !3034
  %cmp31 = icmp eq i32 %45, 11, !dbg !4434
  br i1 %cmp31, label %if.end.37, label %land.lhs.true, !dbg !4435

land.lhs.true:                                    ; preds = %lor.lhs.false
  %call33 = call i32* @__errno_location() #2, !dbg !4436
  %46 = load i32, i32* %call33, align 4, !dbg !4438, !tbaa !3034
  %cmp34 = icmp eq i32 %46, 11, !dbg !4439
  br i1 %cmp34, label %if.end.37, label %if.then.36, !dbg !4440

if.then.36:                                       ; preds = %land.lhs.true, %if.end.28
  br label %while.end, !dbg !4441

if.end.37:                                        ; preds = %land.lhs.true, %lor.lhs.false
  call void @_PyTime_gettimeofday(%struct.timeval* %now), !dbg !4444
  %tv_sec38 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0, !dbg !4447
  %47 = load i64, i64* %tv_sec38, align 8, !dbg !4447, !tbaa !3252
  %tv_sec39 = getelementptr inbounds %struct.timeval, %struct.timeval* %now, i32 0, i32 0, !dbg !4448
  %48 = load i64, i64* %tv_sec39, align 8, !dbg !4448, !tbaa !3252
  %sub40 = sub i64 %47, %48, !dbg !4449
  %conv41 = sitofp i64 %sub40 to double, !dbg !4450
  %tv_usec42 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !4451
  %49 = load i64, i64* %tv_usec42, align 8, !dbg !4451, !tbaa !3242
  %tv_usec43 = getelementptr inbounds %struct.timeval, %struct.timeval* %now, i32 0, i32 1, !dbg !4452
  %50 = load i64, i64* %tv_usec43, align 8, !dbg !4452, !tbaa !3242
  %sub44 = sub i64 %49, %50, !dbg !4453
  %conv45 = sitofp i64 %sub44 to double, !dbg !4454
  %mul46 = fmul double %conv45, 1.000000e-06, !dbg !4455
  %add47 = fadd double %conv41, %mul46, !dbg !4456
  store double %add47, double* %interval, align 8, !dbg !4457, !tbaa !3215
  br label %while.cond, !dbg !4458

while.end:                                        ; preds = %if.then.36
  store i32 0, i32* %cleanup.dest.slot, !dbg !4459
  br label %cleanup, !dbg !4459

cleanup:                                          ; preds = %while.end, %if.then.27
  %51 = bitcast i32* %has_timeout to i8*, !dbg !4461
  call void @llvm.lifetime.end(i64 4, i8* %51) #1, !dbg !4461
  %52 = bitcast double* %interval to i8*, !dbg !4461
  call void @llvm.lifetime.end(i64 8, i8* %52) #1, !dbg !4461
  %53 = bitcast %struct.timeval* %deadline to i8*, !dbg !4461
  call void @llvm.lifetime.end(i64 16, i8* %53) #1, !dbg !4461
  %54 = bitcast %struct.timeval* %now to i8*, !dbg !4461
  call void @llvm.lifetime.end(i64 16, i8* %54) #1, !dbg !4461
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4463
  %55 = load i64, i64* %n, align 8, !dbg !4464, !tbaa !2963
  %cmp51 = icmp slt i64 %55, 0, !dbg !4466
  br i1 %cmp51, label %if.then.53, label %if.end.55, !dbg !4467

if.then.53:                                       ; preds = %cleanup.cont
  %56 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4468, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %56, i32 0, i32 5, !dbg !4469
  %57 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !4469, !tbaa !3181
  %call54 = call %struct._object* %57(), !dbg !4468
  store %struct._object* %call54, %struct._object** %retval, !dbg !4470
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.57, !dbg !4470

if.end.55:                                        ; preds = %cleanup.cont
  %58 = load i64, i64* %n, align 8, !dbg !4471, !tbaa !2963
  %call56 = call %struct._object* @PyLong_FromSsize_t(i64 %58), !dbg !4472
  store %struct._object* %call56, %struct._object** %retval, !dbg !4473
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.57, !dbg !4473

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.57

cleanup.57:                                       ; preds = %NewDefault, %if.end.55, %if.then.53, %if.then
  %59 = bitcast %struct.bufferinfo* %pbuf to i8*, !dbg !4474
  call void @llvm.lifetime.end(i64 80, i8* %59) #1, !dbg !4474
  %60 = bitcast i32* %timeout to i8*, !dbg !4474
  call void @llvm.lifetime.end(i64 4, i8* %60) #1, !dbg !4474
  %61 = bitcast i32* %flags to i8*, !dbg !4474
  call void @llvm.lifetime.end(i64 4, i8* %61) #1, !dbg !4474
  %62 = bitcast i64* %n to i8*, !dbg !4474
  call void @llvm.lifetime.end(i64 8, i8* %62) #1, !dbg !4474
  %63 = bitcast i64* %len to i8*, !dbg !4474
  call void @llvm.lifetime.end(i64 8, i8* %63) #1, !dbg !4474
  %64 = bitcast i8** %buf to i8*, !dbg !4474
  call void @llvm.lifetime.end(i64 8, i8* %64) #1, !dbg !4474
  %65 = load %struct._object*, %struct._object** %retval, !dbg !4474
  ret %struct._object* %65, !dbg !4474
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_sendall(%struct.PySocketSockObject* %s, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %buf = alloca i8*, align 8
  %len = alloca i64, align 8
  %n = alloca i64, align 8
  %flags = alloca i32, align 4
  %timeout = alloca i32, align 4
  %saved_errno = alloca i32, align 4
  %pbuf = alloca %struct.bufferinfo, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1358, metadata !2310), !dbg !4475
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1359, metadata !2310), !dbg !4476
  %0 = bitcast i8** %buf to i8*, !dbg !4477
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !4477
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !1360, metadata !2310), !dbg !4478
  %1 = bitcast i64* %len to i8*, !dbg !4479
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !4479
  call void @llvm.dbg.declare(metadata i64* %len, metadata !1361, metadata !2310), !dbg !4480
  %2 = bitcast i64* %n to i8*, !dbg !4479
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !4479
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1362, metadata !2310), !dbg !4481
  store i64 -1, i64* %n, align 8, !dbg !4481, !tbaa !2963
  %3 = bitcast i32* %flags to i8*, !dbg !4482
  call void @llvm.lifetime.start(i64 4, i8* %3) #1, !dbg !4482
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1363, metadata !2310), !dbg !4483
  store i32 0, i32* %flags, align 4, !dbg !4483, !tbaa !3034
  %4 = bitcast i32* %timeout to i8*, !dbg !4482
  call void @llvm.lifetime.start(i64 4, i8* %4) #1, !dbg !4482
  call void @llvm.dbg.declare(metadata i32* %timeout, metadata !1364, metadata !2310), !dbg !4484
  %5 = bitcast i32* %saved_errno to i8*, !dbg !4482
  call void @llvm.lifetime.start(i64 4, i8* %5) #1, !dbg !4482
  call void @llvm.dbg.declare(metadata i32* %saved_errno, metadata !1365, metadata !2310), !dbg !4485
  %6 = bitcast %struct.bufferinfo* %pbuf to i8*, !dbg !4486
  call void @llvm.lifetime.start(i64 80, i8* %6) #1, !dbg !4486
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %pbuf, metadata !1366, metadata !2310), !dbg !4487
  %7 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !4488, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %7, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.357, i32 0, i32 0), %struct.bufferinfo* %pbuf, i32* %flags), !dbg !4490
  %tobool = icmp ne i32 %call, 0, !dbg !4490
  br i1 %tobool, label %if.end, label %if.then, !dbg !4491

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !4492
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4492

if.end:                                           ; preds = %entry
  %buf1 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %pbuf, i32 0, i32 0, !dbg !4493
  %8 = load i8*, i8** %buf1, align 8, !dbg !4493, !tbaa !4008
  store i8* %8, i8** %buf, align 8, !dbg !4494, !tbaa !2326
  %len2 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %pbuf, i32 0, i32 2, !dbg !4495
  %9 = load i64, i64* %len2, align 8, !dbg !4495, !tbaa !4012
  store i64 %9, i64* %len, align 8, !dbg !4496, !tbaa !2963
  br label %do.body, !dbg !4497

do.body:                                          ; preds = %do.cond, %if.end
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !4498
  call void @llvm.lifetime.start(i64 8, i8* %10) #1, !dbg !4498
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1367, metadata !2310), !dbg !4499
  %call3 = call %struct._ts* @PyEval_SaveThread(), !dbg !4500
  store %struct._ts* %call3, %struct._ts** %_save, align 8, !dbg !4501, !tbaa !2326
  %11 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4502, !tbaa !2326
  %call4 = call i32 @internal_select(%struct.PySocketSockObject* %11, i32 1), !dbg !4503
  store i32 %call4, i32* %timeout, align 4, !dbg !4504, !tbaa !3034
  store i64 -1, i64* %n, align 8, !dbg !4505, !tbaa !2963
  %12 = load i32, i32* %timeout, align 4, !dbg !4506, !tbaa !3034
  %tobool5 = icmp ne i32 %12, 0, !dbg !4506
  br i1 %tobool5, label %if.end.8, label %if.then.6, !dbg !4508

if.then.6:                                        ; preds = %do.body
  %13 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4509, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %13, i32 0, i32 1, !dbg !4511
  %14 = load i32, i32* %sock_fd, align 4, !dbg !4511, !tbaa !2948
  %15 = load i8*, i8** %buf, align 8, !dbg !4512, !tbaa !2326
  %16 = load i64, i64* %len, align 8, !dbg !4513, !tbaa !2963
  %17 = load i32, i32* %flags, align 4, !dbg !4514, !tbaa !3034
  %call7 = call i64 @send(i32 %14, i8* %15, i64 %16, i32 %17), !dbg !4515
  store i64 %call7, i64* %n, align 8, !dbg !4516, !tbaa !2963
  br label %if.end.8, !dbg !4517

if.end.8:                                         ; preds = %if.then.6, %do.body
  %18 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !4518, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %18), !dbg !4519
  %19 = bitcast %struct._ts** %_save to i8*, !dbg !4520
  call void @llvm.lifetime.end(i64 8, i8* %19) #1, !dbg !4520
  %20 = load i32, i32* %timeout, align 4, !dbg !4521, !tbaa !3034
  %cmp = icmp eq i32 %20, 1, !dbg !4523
  br i1 %cmp, label %if.then.9, label %if.end.10, !dbg !4524

if.then.9:                                        ; preds = %if.end.8
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4525
  %21 = load %struct._object*, %struct._object** @socket_timeout, align 8, !dbg !4527, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %21, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.300, i32 0, i32 0)), !dbg !4528
  store %struct._object* null, %struct._object** %retval, !dbg !4529
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4529

if.end.10:                                        ; preds = %if.end.8
  %call11 = call i32* @__errno_location() #2, !dbg !4530
  %22 = load i32, i32* %call11, align 4, !dbg !4531, !tbaa !3034
  store i32 %22, i32* %saved_errno, align 4, !dbg !4532, !tbaa !3034
  %call12 = call i32 @PyErr_CheckSignals(), !dbg !4533
  %tobool13 = icmp ne i32 %call12, 0, !dbg !4533
  br i1 %tobool13, label %if.then.14, label %if.end.15, !dbg !4535

if.then.14:                                       ; preds = %if.end.10
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4536
  store %struct._object* null, %struct._object** %retval, !dbg !4538
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4538

if.end.15:                                        ; preds = %if.end.10
  %23 = load i64, i64* %n, align 8, !dbg !4539, !tbaa !2963
  %cmp16 = icmp slt i64 %23, 0, !dbg !4541
  br i1 %cmp16, label %if.then.17, label %if.end.20, !dbg !4542

if.then.17:                                       ; preds = %if.end.15
  %24 = load i32, i32* %saved_errno, align 4, !dbg !4543, !tbaa !3034
  %cmp18 = icmp eq i32 %24, 4, !dbg !4546
  br i1 %cmp18, label %if.then.19, label %if.else, !dbg !4547

if.then.19:                                       ; preds = %if.then.17
  br label %do.cond, !dbg !4548

if.else:                                          ; preds = %if.then.17
  br label %do.end, !dbg !4549

if.end.20:                                        ; preds = %if.end.15
  %25 = load i64, i64* %n, align 8, !dbg !4550, !tbaa !2963
  %26 = load i8*, i8** %buf, align 8, !dbg !4551, !tbaa !2326
  %add.ptr = getelementptr i8, i8* %26, i64 %25, !dbg !4551
  store i8* %add.ptr, i8** %buf, align 8, !dbg !4551, !tbaa !2326
  %27 = load i64, i64* %n, align 8, !dbg !4552, !tbaa !2963
  %28 = load i64, i64* %len, align 8, !dbg !4553, !tbaa !2963
  %sub = sub i64 %28, %27, !dbg !4553
  store i64 %sub, i64* %len, align 8, !dbg !4553, !tbaa !2963
  br label %do.cond, !dbg !4554

do.cond:                                          ; preds = %if.end.20, %if.then.19
  %29 = load i64, i64* %len, align 8, !dbg !4555, !tbaa !2963
  %cmp21 = icmp sgt i64 %29, 0, !dbg !4557
  br i1 %cmp21, label %do.body, label %do.end, !dbg !4554

do.end:                                           ; preds = %do.cond, %if.else
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4558
  %30 = load i64, i64* %n, align 8, !dbg !4559, !tbaa !2963
  %cmp22 = icmp slt i64 %30, 0, !dbg !4561
  br i1 %cmp22, label %if.then.23, label %if.end.25, !dbg !4562

if.then.23:                                       ; preds = %do.end
  %31 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4563, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %31, i32 0, i32 5, !dbg !4564
  %32 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !4564, !tbaa !3181
  %call24 = call %struct._object* %32(), !dbg !4563
  store %struct._object* %call24, %struct._object** %retval, !dbg !4565
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4565

if.end.25:                                        ; preds = %do.end
  %33 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4566, !tbaa !2335
  %inc = add i64 %33, 1, !dbg !4566
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4566, !tbaa !2335
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !4567
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4567

cleanup:                                          ; preds = %if.end.25, %if.then.23, %if.then.14, %if.then.9, %if.then
  %34 = bitcast %struct.bufferinfo* %pbuf to i8*, !dbg !4568
  call void @llvm.lifetime.end(i64 80, i8* %34) #1, !dbg !4568
  %35 = bitcast i32* %saved_errno to i8*, !dbg !4568
  call void @llvm.lifetime.end(i64 4, i8* %35) #1, !dbg !4568
  %36 = bitcast i32* %timeout to i8*, !dbg !4568
  call void @llvm.lifetime.end(i64 4, i8* %36) #1, !dbg !4568
  %37 = bitcast i32* %flags to i8*, !dbg !4568
  call void @llvm.lifetime.end(i64 4, i8* %37) #1, !dbg !4568
  %38 = bitcast i64* %n to i8*, !dbg !4568
  call void @llvm.lifetime.end(i64 8, i8* %38) #1, !dbg !4568
  %39 = bitcast i64* %len to i8*, !dbg !4568
  call void @llvm.lifetime.end(i64 8, i8* %39) #1, !dbg !4568
  %40 = bitcast i8** %buf to i8*, !dbg !4568
  call void @llvm.lifetime.end(i64 8, i8* %40) #1, !dbg !4568
  %41 = load %struct._object*, %struct._object** %retval, !dbg !4568
  ret %struct._object* %41, !dbg !4568
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_sendto(%struct.PySocketSockObject* %s, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %pbuf = alloca %struct.bufferinfo, align 8
  %addro = alloca %struct._object*, align 8
  %buf = alloca i8*, align 8
  %len = alloca i64, align 8
  %arglen = alloca i64, align 8
  %addrbuf = alloca %union.sock_addr, align 8
  %addrlen = alloca i32, align 4
  %n = alloca i32, align 4
  %flags = alloca i32, align 4
  %timeout = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %now = alloca %struct.timeval, align 8
  %deadline = alloca %struct.timeval, align 8
  %interval = alloca double, align 8
  %has_timeout = alloca i32, align 4
  %_save = alloca %struct._ts*, align 8
  %agg.tmp = alloca %union.__CONST_SOCKADDR_ARG, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1372, metadata !2310), !dbg !4569
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1373, metadata !2310), !dbg !4570
  %0 = bitcast %struct.bufferinfo* %pbuf to i8*, !dbg !4571
  call void @llvm.lifetime.start(i64 80, i8* %0) #1, !dbg !4571
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %pbuf, metadata !1374, metadata !2310), !dbg !4572
  %1 = bitcast %struct._object** %addro to i8*, !dbg !4573
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !4573
  call void @llvm.dbg.declare(metadata %struct._object** %addro, metadata !1375, metadata !2310), !dbg !4574
  %2 = bitcast i8** %buf to i8*, !dbg !4575
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !4575
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !1376, metadata !2310), !dbg !4576
  %3 = bitcast i64* %len to i8*, !dbg !4577
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !4577
  call void @llvm.dbg.declare(metadata i64* %len, metadata !1377, metadata !2310), !dbg !4578
  %4 = bitcast i64* %arglen to i8*, !dbg !4577
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !4577
  call void @llvm.dbg.declare(metadata i64* %arglen, metadata !1378, metadata !2310), !dbg !4579
  %5 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !4580
  call void @llvm.lifetime.start(i64 128, i8* %5) #1, !dbg !4580
  call void @llvm.dbg.declare(metadata %union.sock_addr* %addrbuf, metadata !1379, metadata !2310), !dbg !4581
  %6 = bitcast i32* %addrlen to i8*, !dbg !4582
  call void @llvm.lifetime.start(i64 4, i8* %6) #1, !dbg !4582
  call void @llvm.dbg.declare(metadata i32* %addrlen, metadata !1380, metadata !2310), !dbg !4583
  %7 = bitcast i32* %n to i8*, !dbg !4582
  call void @llvm.lifetime.start(i64 4, i8* %7) #1, !dbg !4582
  call void @llvm.dbg.declare(metadata i32* %n, metadata !1381, metadata !2310), !dbg !4584
  store i32 -1, i32* %n, align 4, !dbg !4584, !tbaa !3034
  %8 = bitcast i32* %flags to i8*, !dbg !4582
  call void @llvm.lifetime.start(i64 4, i8* %8) #1, !dbg !4582
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1382, metadata !2310), !dbg !4585
  %9 = bitcast i32* %timeout to i8*, !dbg !4582
  call void @llvm.lifetime.start(i64 4, i8* %9) #1, !dbg !4582
  call void @llvm.dbg.declare(metadata i32* %timeout, metadata !1383, metadata !2310), !dbg !4586
  store i32 0, i32* %flags, align 4, !dbg !4587, !tbaa !3034
  %10 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !4588, !tbaa !2326
  %call = call i64 @PyTuple_Size(%struct._object* %10), !dbg !4589
  store i64 %call, i64* %arglen, align 8, !dbg !4590, !tbaa !2963
  %11 = load i64, i64* %arglen, align 8, !dbg !4591, !tbaa !2963
  br label %NodeBlock

NodeBlock:                                        ; preds = %entry
  %Pivot = icmp slt i64 %11, 3
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i64 %11, 3
  br i1 %SwitchLeaf2, label %sw.bb.2, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i64 %11, 2
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %12 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !4592, !tbaa !2326
  %call1 = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %12, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.358, i32 0, i32 0), %struct.bufferinfo* %pbuf, %struct._object** %addro), !dbg !4594
  br label %sw.epilog, !dbg !4595

sw.bb.2:                                          ; preds = %LeafBlock.1
  %13 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !4596, !tbaa !2326
  %call3 = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.359, i32 0, i32 0), %struct.bufferinfo* %pbuf, i32* %flags, %struct._object** %addro), !dbg !4597
  br label %sw.epilog, !dbg !4598

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  %14 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !4599, !tbaa !2326
  %15 = load i64, i64* %arglen, align 8, !dbg !4600, !tbaa !2963
  %call4 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %14, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.360, i32 0, i32 0), i64 %15), !dbg !4601
  store %struct._object* null, %struct._object** %retval, !dbg !4602
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.69, !dbg !4602

sw.epilog:                                        ; preds = %sw.bb.2, %sw.bb
  %call5 = call %struct._object* @PyErr_Occurred(), !dbg !4603
  %tobool = icmp ne %struct._object* %call5, null, !dbg !4603
  br i1 %tobool, label %if.then, label %if.end, !dbg !4605

if.then:                                          ; preds = %sw.epilog
  store %struct._object* null, %struct._object** %retval, !dbg !4606
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.69, !dbg !4606

if.end:                                           ; preds = %sw.epilog
  %buf6 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %pbuf, i32 0, i32 0, !dbg !4607
  %16 = load i8*, i8** %buf6, align 8, !dbg !4607, !tbaa !4008
  store i8* %16, i8** %buf, align 8, !dbg !4608, !tbaa !2326
  %len7 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %pbuf, i32 0, i32 2, !dbg !4609
  %17 = load i64, i64* %len7, align 8, !dbg !4609, !tbaa !4012
  store i64 %17, i64* %len, align 8, !dbg !4610, !tbaa !2963
  %18 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4611, !tbaa !2326
  %19 = load %struct._object*, %struct._object** %addro, align 8, !dbg !4613, !tbaa !2326
  %sa = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !4614
  %call8 = call i32 @getsockaddrarg(%struct.PySocketSockObject* %18, %struct._object* %19, %struct.sockaddr* %sa, i32* %addrlen), !dbg !4615
  %tobool9 = icmp ne i32 %call8, 0, !dbg !4615
  br i1 %tobool9, label %if.end.11, label %if.then.10, !dbg !4616

if.then.10:                                       ; preds = %if.end
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4617
  store %struct._object* null, %struct._object** %retval, !dbg !4619
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.69, !dbg !4619

if.end.11:                                        ; preds = %if.end
  %20 = bitcast %struct.timeval* %now to i8*, !dbg !4620
  call void @llvm.lifetime.start(i64 16, i8* %20) #1, !dbg !4620
  call void @llvm.dbg.declare(metadata %struct.timeval* %now, metadata !1384, metadata !2310), !dbg !4621
  %21 = bitcast %struct.timeval* %deadline to i8*, !dbg !4620
  call void @llvm.lifetime.start(i64 16, i8* %21) #1, !dbg !4620
  call void @llvm.dbg.declare(metadata %struct.timeval* %deadline, metadata !1386, metadata !2310), !dbg !4622
  %22 = bitcast %struct.timeval* %deadline to i8*, !dbg !4622
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 16, i32 8, i1 false), !dbg !4622
  %23 = bitcast double* %interval to i8*, !dbg !4623
  call void @llvm.lifetime.start(i64 8, i8* %23) #1, !dbg !4623
  call void @llvm.dbg.declare(metadata double* %interval, metadata !1387, metadata !2310), !dbg !4624
  %24 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4625, !tbaa !2326
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %24, i32 0, i32 6, !dbg !4626
  %25 = load double, double* %sock_timeout, align 8, !dbg !4626, !tbaa !3176
  store double %25, double* %interval, align 8, !dbg !4624, !tbaa !3215
  %26 = bitcast i32* %has_timeout to i8*, !dbg !4627
  call void @llvm.lifetime.start(i64 4, i8* %26) #1, !dbg !4627
  call void @llvm.dbg.declare(metadata i32* %has_timeout, metadata !1388, metadata !2310), !dbg !4628
  %27 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4629, !tbaa !2326
  %sock_timeout12 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %27, i32 0, i32 6, !dbg !4630
  %28 = load double, double* %sock_timeout12, align 8, !dbg !4630, !tbaa !3176
  %cmp = fcmp ogt double %28, 0.000000e+00, !dbg !4631
  %conv = zext i1 %cmp to i32, !dbg !4631
  store i32 %conv, i32* %has_timeout, align 4, !dbg !4628, !tbaa !3034
  %29 = load i32, i32* %has_timeout, align 4, !dbg !4632, !tbaa !3034
  %tobool13 = icmp ne i32 %29, 0, !dbg !4632
  br i1 %tobool13, label %if.then.14, label %if.end.26, !dbg !4634

if.then.14:                                       ; preds = %if.end.11
  call void @_PyTime_gettimeofday(%struct.timeval* %now), !dbg !4635
  %30 = bitcast %struct.timeval* %deadline to i8*, !dbg !4638
  %31 = bitcast %struct.timeval* %now to i8*, !dbg !4638
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 16, i32 8, i1 false), !dbg !4638, !tbaa.struct !3228
  br label %do.body, !dbg !4639

do.body:                                          ; preds = %if.then.14
  %32 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4640, !tbaa !2326
  %sock_timeout15 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %32, i32 0, i32 6, !dbg !4643
  %33 = load double, double* %sock_timeout15, align 8, !dbg !4643, !tbaa !3176
  %conv16 = fptosi double %33 to i64, !dbg !4644
  %conv17 = sitofp i64 %conv16 to double, !dbg !4644
  %34 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4645, !tbaa !2326
  %sock_timeout18 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %34, i32 0, i32 6, !dbg !4646
  %35 = load double, double* %sock_timeout18, align 8, !dbg !4646, !tbaa !3176
  %sub = fsub double %conv17, %35, !dbg !4647
  %mul = fmul double %sub, 1.000000e+06, !dbg !4648
  %conv19 = fptosi double %mul to i64, !dbg !4649
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !4650
  %36 = load i64, i64* %tv_usec, align 8, !dbg !4651, !tbaa !3242
  %add = add i64 %36, %conv19, !dbg !4651
  store i64 %add, i64* %tv_usec, align 8, !dbg !4651, !tbaa !3242
  %37 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4652, !tbaa !2326
  %sock_timeout20 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %37, i32 0, i32 6, !dbg !4653
  %38 = load double, double* %sock_timeout20, align 8, !dbg !4653, !tbaa !3176
  %conv21 = fptosi double %38 to i64, !dbg !4654
  %tv_usec22 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !4655
  %39 = load i64, i64* %tv_usec22, align 8, !dbg !4655, !tbaa !3242
  %div = sdiv i64 %39, 1000000, !dbg !4656
  %add23 = add i64 %conv21, %div, !dbg !4657
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0, !dbg !4658
  %40 = load i64, i64* %tv_sec, align 8, !dbg !4659, !tbaa !3252
  %add24 = add i64 %40, %add23, !dbg !4659
  store i64 %add24, i64* %tv_sec, align 8, !dbg !4659, !tbaa !3252
  %tv_usec25 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !4660
  %41 = load i64, i64* %tv_usec25, align 8, !dbg !4661, !tbaa !3242
  %rem = srem i64 %41, 1000000, !dbg !4661
  store i64 %rem, i64* %tv_usec25, align 8, !dbg !4661, !tbaa !3242
  br label %do.cond, !dbg !4662

do.cond:                                          ; preds = %do.body
  br label %do.end, !dbg !4663

do.end:                                           ; preds = %do.cond
  br label %if.end.26, !dbg !4665

if.end.26:                                        ; preds = %do.end, %if.end.11
  br label %while.cond, !dbg !4667

while.cond:                                       ; preds = %if.end.48, %if.end.26
  br label %while.body, !dbg !4670

while.body:                                       ; preds = %while.cond
  %call27 = call i32* @__errno_location() #2, !dbg !4673
  store i32 0, i32* %call27, align 4, !dbg !4675, !tbaa !3034
  %42 = bitcast %struct._ts** %_save to i8*, !dbg !4676
  call void @llvm.lifetime.start(i64 8, i8* %42) #1, !dbg !4676
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1389, metadata !2310), !dbg !4677
  %call28 = call %struct._ts* @PyEval_SaveThread(), !dbg !4678
  store %struct._ts* %call28, %struct._ts** %_save, align 8, !dbg !4679, !tbaa !2326
  %43 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4680, !tbaa !2326
  %44 = load double, double* %interval, align 8, !dbg !4681, !tbaa !3215
  %call29 = call i32 @internal_select_ex(%struct.PySocketSockObject* %43, i32 1, double %44), !dbg !4682
  store i32 %call29, i32* %timeout, align 4, !dbg !4683, !tbaa !3034
  %45 = load i32, i32* %timeout, align 4, !dbg !4684, !tbaa !3034
  %tobool30 = icmp ne i32 %45, 0, !dbg !4684
  br i1 %tobool30, label %if.end.35, label %if.then.31, !dbg !4686

if.then.31:                                       ; preds = %while.body
  %46 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4687, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %46, i32 0, i32 1, !dbg !4689
  %47 = load i32, i32* %sock_fd, align 4, !dbg !4689, !tbaa !2948
  %48 = load i8*, i8** %buf, align 8, !dbg !4690, !tbaa !2326
  %49 = load i64, i64* %len, align 8, !dbg !4691, !tbaa !2963
  %50 = load i32, i32* %flags, align 4, !dbg !4692, !tbaa !3034
  %__sockaddr__ = bitcast %union.__CONST_SOCKADDR_ARG* %agg.tmp to %struct.sockaddr**, !dbg !4693
  %sa32 = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !4694
  store %struct.sockaddr* %sa32, %struct.sockaddr** %__sockaddr__, align 8, !dbg !4693, !tbaa !2326
  %51 = load i32, i32* %addrlen, align 4, !dbg !4695, !tbaa !3034
  %coerce.dive = getelementptr %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %agg.tmp, i32 0, i32 0, !dbg !4696
  %52 = load %struct.sockaddr*, %struct.sockaddr** %coerce.dive, align 8, !dbg !4696
  %call33 = call i64 @sendto(i32 %47, i8* %48, i64 %49, i32 %50, %struct.sockaddr* %52, i32 %51), !dbg !4696
  %conv34 = trunc i64 %call33 to i32, !dbg !4696
  store i32 %conv34, i32* %n, align 4, !dbg !4697, !tbaa !3034
  br label %if.end.35, !dbg !4698

if.end.35:                                        ; preds = %if.then.31, %while.body
  %53 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !4699, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %53), !dbg !4700
  %54 = bitcast %struct._ts** %_save to i8*, !dbg !4701
  call void @llvm.lifetime.end(i64 8, i8* %54) #1, !dbg !4701
  %55 = load i32, i32* %timeout, align 4, !dbg !4702, !tbaa !3034
  %cmp36 = icmp eq i32 %55, 1, !dbg !4704
  br i1 %cmp36, label %if.then.38, label %if.end.39, !dbg !4705

if.then.38:                                       ; preds = %if.end.35
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4706
  %56 = load %struct._object*, %struct._object** @socket_timeout, align 8, !dbg !4708, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %56, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.300, i32 0, i32 0)), !dbg !4709
  store %struct._object* null, %struct._object** %retval, !dbg !4710
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4710

if.end.39:                                        ; preds = %if.end.35
  %57 = load i32, i32* %has_timeout, align 4, !dbg !4711, !tbaa !3034
  %tobool40 = icmp ne i32 %57, 0, !dbg !4711
  br i1 %tobool40, label %lor.lhs.false, label %if.then.47, !dbg !4713

lor.lhs.false:                                    ; preds = %if.end.39
  %call41 = call i32* @__errno_location() #2, !dbg !4714
  %58 = load i32, i32* %call41, align 4, !dbg !4716, !tbaa !3034
  %cmp42 = icmp eq i32 %58, 11, !dbg !4717
  br i1 %cmp42, label %if.end.48, label %land.lhs.true, !dbg !4718

land.lhs.true:                                    ; preds = %lor.lhs.false
  %call44 = call i32* @__errno_location() #2, !dbg !4719
  %59 = load i32, i32* %call44, align 4, !dbg !4721, !tbaa !3034
  %cmp45 = icmp eq i32 %59, 11, !dbg !4722
  br i1 %cmp45, label %if.end.48, label %if.then.47, !dbg !4723

if.then.47:                                       ; preds = %land.lhs.true, %if.end.39
  br label %while.end, !dbg !4724

if.end.48:                                        ; preds = %land.lhs.true, %lor.lhs.false
  call void @_PyTime_gettimeofday(%struct.timeval* %now), !dbg !4727
  %tv_sec49 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0, !dbg !4730
  %60 = load i64, i64* %tv_sec49, align 8, !dbg !4730, !tbaa !3252
  %tv_sec50 = getelementptr inbounds %struct.timeval, %struct.timeval* %now, i32 0, i32 0, !dbg !4731
  %61 = load i64, i64* %tv_sec50, align 8, !dbg !4731, !tbaa !3252
  %sub51 = sub i64 %60, %61, !dbg !4732
  %conv52 = sitofp i64 %sub51 to double, !dbg !4733
  %tv_usec53 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !4734
  %62 = load i64, i64* %tv_usec53, align 8, !dbg !4734, !tbaa !3242
  %tv_usec54 = getelementptr inbounds %struct.timeval, %struct.timeval* %now, i32 0, i32 1, !dbg !4735
  %63 = load i64, i64* %tv_usec54, align 8, !dbg !4735, !tbaa !3242
  %sub55 = sub i64 %62, %63, !dbg !4736
  %conv56 = sitofp i64 %sub55 to double, !dbg !4737
  %mul57 = fmul double %conv56, 1.000000e-06, !dbg !4738
  %add58 = fadd double %conv52, %mul57, !dbg !4739
  store double %add58, double* %interval, align 8, !dbg !4740, !tbaa !3215
  br label %while.cond, !dbg !4741

while.end:                                        ; preds = %if.then.47
  store i32 0, i32* %cleanup.dest.slot, !dbg !4742
  br label %cleanup, !dbg !4742

cleanup:                                          ; preds = %while.end, %if.then.38
  %64 = bitcast i32* %has_timeout to i8*, !dbg !4744
  call void @llvm.lifetime.end(i64 4, i8* %64) #1, !dbg !4744
  %65 = bitcast double* %interval to i8*, !dbg !4744
  call void @llvm.lifetime.end(i64 8, i8* %65) #1, !dbg !4744
  %66 = bitcast %struct.timeval* %deadline to i8*, !dbg !4744
  call void @llvm.lifetime.end(i64 16, i8* %66) #1, !dbg !4744
  %67 = bitcast %struct.timeval* %now to i8*, !dbg !4744
  call void @llvm.lifetime.end(i64 16, i8* %67) #1, !dbg !4744
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.4

LeafBlock.4:                                      ; preds = %cleanup
  %SwitchLeaf5 = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf5, label %cleanup.cont, label %NewDefault.3

cleanup.cont:                                     ; preds = %LeafBlock.4
  call void @PyBuffer_Release(%struct.bufferinfo* %pbuf), !dbg !4746
  %68 = load i32, i32* %n, align 4, !dbg !4747, !tbaa !3034
  %cmp62 = icmp slt i32 %68, 0, !dbg !4749
  br i1 %cmp62, label %if.then.64, label %if.end.66, !dbg !4750

if.then.64:                                       ; preds = %cleanup.cont
  %69 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4751, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %69, i32 0, i32 5, !dbg !4752
  %70 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !4752, !tbaa !3181
  %call65 = call %struct._object* %70(), !dbg !4751
  store %struct._object* %call65, %struct._object** %retval, !dbg !4753
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.69, !dbg !4753

if.end.66:                                        ; preds = %cleanup.cont
  %71 = load i32, i32* %n, align 4, !dbg !4754, !tbaa !3034
  %conv67 = sext i32 %71 to i64, !dbg !4754
  %call68 = call %struct._object* @PyLong_FromSsize_t(i64 %conv67), !dbg !4755
  store %struct._object* %call68, %struct._object** %retval, !dbg !4756
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.69, !dbg !4756

NewDefault.3:                                     ; preds = %LeafBlock.4
  br label %cleanup.69

cleanup.69:                                       ; preds = %NewDefault.3, %if.end.66, %if.then.64, %if.then.10, %if.then, %sw.default
  %72 = bitcast i32* %timeout to i8*, !dbg !4757
  call void @llvm.lifetime.end(i64 4, i8* %72) #1, !dbg !4757
  %73 = bitcast i32* %flags to i8*, !dbg !4757
  call void @llvm.lifetime.end(i64 4, i8* %73) #1, !dbg !4757
  %74 = bitcast i32* %n to i8*, !dbg !4757
  call void @llvm.lifetime.end(i64 4, i8* %74) #1, !dbg !4757
  %75 = bitcast i32* %addrlen to i8*, !dbg !4757
  call void @llvm.lifetime.end(i64 4, i8* %75) #1, !dbg !4757
  %76 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !4757
  call void @llvm.lifetime.end(i64 128, i8* %76) #1, !dbg !4757
  %77 = bitcast i64* %arglen to i8*, !dbg !4757
  call void @llvm.lifetime.end(i64 8, i8* %77) #1, !dbg !4757
  %78 = bitcast i64* %len to i8*, !dbg !4757
  call void @llvm.lifetime.end(i64 8, i8* %78) #1, !dbg !4757
  %79 = bitcast i8** %buf to i8*, !dbg !4757
  call void @llvm.lifetime.end(i64 8, i8* %79) #1, !dbg !4757
  %80 = bitcast %struct._object** %addro to i8*, !dbg !4757
  call void @llvm.lifetime.end(i64 8, i8* %80) #1, !dbg !4757
  %81 = bitcast %struct.bufferinfo* %pbuf to i8*, !dbg !4757
  call void @llvm.lifetime.end(i64 80, i8* %81) #1, !dbg !4757
  %82 = load %struct._object*, %struct._object** %retval, !dbg !4757
  ret %struct._object* %82, !dbg !4757
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_setblocking(%struct.PySocketSockObject* %s, %struct._object* %arg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %block = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1394, metadata !2310), !dbg !4758
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !1395, metadata !2310), !dbg !4759
  %0 = bitcast i64* %block to i8*, !dbg !4760
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !4760
  call void @llvm.dbg.declare(metadata i64* %block, metadata !1396, metadata !2310), !dbg !4761
  %1 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !4762, !tbaa !2326
  %call = call i64 @PyLong_AsLong(%struct._object* %1), !dbg !4763
  store i64 %call, i64* %block, align 8, !dbg !4764, !tbaa !2963
  %2 = load i64, i64* %block, align 8, !dbg !4765, !tbaa !2963
  %cmp = icmp eq i64 %2, -1, !dbg !4767
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4768

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred(), !dbg !4769
  %tobool = icmp ne %struct._object* %call1, null, !dbg !4769
  br i1 %tobool, label %if.then, label %if.end, !dbg !4771

if.then:                                          ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval, !dbg !4772
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4772

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i64, i64* %block, align 8, !dbg !4773, !tbaa !2963
  %tobool2 = icmp ne i64 %3, 0, !dbg !4773
  %cond = select i1 %tobool2, double -1.000000e+00, double 0.000000e+00, !dbg !4773
  %4 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4774, !tbaa !2326
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %4, i32 0, i32 6, !dbg !4775
  store double %cond, double* %sock_timeout, align 8, !dbg !4776, !tbaa !3176
  %5 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4777, !tbaa !2326
  %6 = load i64, i64* %block, align 8, !dbg !4778, !tbaa !2963
  %conv = trunc i64 %6 to i32, !dbg !4778
  %call3 = call i32 @internal_setblocking(%struct.PySocketSockObject* %5, i32 %conv), !dbg !4779
  %7 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4780, !tbaa !2335
  %inc = add i64 %7, 1, !dbg !4780
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4780, !tbaa !2335
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !4781
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4781

cleanup:                                          ; preds = %if.end, %if.then
  %8 = bitcast i64* %block to i8*, !dbg !4782
  call void @llvm.lifetime.end(i64 8, i8* %8) #1, !dbg !4782
  %9 = load %struct._object*, %struct._object** %retval, !dbg !4782
  ret %struct._object* %9, !dbg !4782
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_settimeout(%struct.PySocketSockObject* %s, %struct._object* %arg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %timeout = alloca double, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1405, metadata !2310), !dbg !4783
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !1406, metadata !2310), !dbg !4784
  %0 = bitcast double* %timeout to i8*, !dbg !4785
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !4785
  call void @llvm.dbg.declare(metadata double* %timeout, metadata !1407, metadata !2310), !dbg !4786
  %1 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !4787, !tbaa !2326
  %cmp = icmp eq %struct._object* %1, @_Py_NoneStruct, !dbg !4789
  br i1 %cmp, label %if.then, label %if.else, !dbg !4790

if.then:                                          ; preds = %entry
  store double -1.000000e+00, double* %timeout, align 8, !dbg !4791, !tbaa !3215
  br label %if.end.6, !dbg !4792

if.else:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !4793, !tbaa !2326
  %call = call double @PyFloat_AsDouble(%struct._object* %2), !dbg !4795
  store double %call, double* %timeout, align 8, !dbg !4796, !tbaa !3215
  %3 = load double, double* %timeout, align 8, !dbg !4797, !tbaa !3215
  %cmp1 = fcmp olt double %3, 0.000000e+00, !dbg !4799
  br i1 %cmp1, label %if.then.2, label %if.end.5, !dbg !4800

if.then.2:                                        ; preds = %if.else
  %call3 = call %struct._object* @PyErr_Occurred(), !dbg !4801
  %tobool = icmp ne %struct._object* %call3, null, !dbg !4801
  br i1 %tobool, label %if.end, label %if.then.4, !dbg !4804

if.then.4:                                        ; preds = %if.then.2
  %4 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !4805, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.361, i32 0, i32 0)), !dbg !4806
  br label %if.end, !dbg !4806

if.end:                                           ; preds = %if.then.4, %if.then.2
  store %struct._object* null, %struct._object** %retval, !dbg !4807
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4807

if.end.5:                                         ; preds = %if.else
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.then
  %5 = load double, double* %timeout, align 8, !dbg !4808, !tbaa !3215
  %6 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4809, !tbaa !2326
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %6, i32 0, i32 6, !dbg !4810
  store double %5, double* %sock_timeout, align 8, !dbg !4811, !tbaa !3176
  %7 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4812, !tbaa !2326
  %8 = load double, double* %timeout, align 8, !dbg !4813, !tbaa !3215
  %cmp7 = fcmp olt double %8, 0.000000e+00, !dbg !4814
  %conv = zext i1 %cmp7 to i32, !dbg !4814
  %call8 = call i32 @internal_setblocking(%struct.PySocketSockObject* %7, i32 %conv), !dbg !4815
  %9 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4816, !tbaa !2335
  %inc = add i64 %9, 1, !dbg !4816
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4816, !tbaa !2335
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !4817
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4817

cleanup:                                          ; preds = %if.end.6, %if.end
  %10 = bitcast double* %timeout to i8*, !dbg !4818
  call void @llvm.lifetime.end(i64 8, i8* %10) #1, !dbg !4818
  %11 = load %struct._object*, %struct._object** %retval, !dbg !4818
  ret %struct._object* %11, !dbg !4818
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_gettimeout(%struct.PySocketSockObject* %s) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1410, metadata !2310), !dbg !4819
  %0 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4820, !tbaa !2326
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %0, i32 0, i32 6, !dbg !4822
  %1 = load double, double* %sock_timeout, align 8, !dbg !4822, !tbaa !3176
  %cmp = fcmp olt double %1, 0.000000e+00, !dbg !4823
  br i1 %cmp, label %if.then, label %if.else, !dbg !4824

if.then:                                          ; preds = %entry
  %2 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4825, !tbaa !2335
  %inc = add i64 %2, 1, !dbg !4825
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4825, !tbaa !2335
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !4827
  br label %return, !dbg !4827

if.else:                                          ; preds = %entry
  %3 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4828, !tbaa !2326
  %sock_timeout1 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %3, i32 0, i32 6, !dbg !4829
  %4 = load double, double* %sock_timeout1, align 8, !dbg !4829, !tbaa !3176
  %call = call %struct._object* @PyFloat_FromDouble(double %4), !dbg !4830
  store %struct._object* %call, %struct._object** %retval, !dbg !4831
  br label %return, !dbg !4831

return:                                           ; preds = %if.else, %if.then
  %5 = load %struct._object*, %struct._object** %retval, !dbg !4832
  ret %struct._object* %5, !dbg !4832
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_setsockopt(%struct.PySocketSockObject* %s, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %level = alloca i32, align 4
  %optname = alloca i32, align 4
  %res = alloca i32, align 4
  %buf = alloca i8*, align 8
  %buflen = alloca i32, align 4
  %flag = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1413, metadata !2310), !dbg !4833
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1414, metadata !2310), !dbg !4834
  %0 = bitcast i32* %level to i8*, !dbg !4835
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !4835
  call void @llvm.dbg.declare(metadata i32* %level, metadata !1415, metadata !2310), !dbg !4836
  %1 = bitcast i32* %optname to i8*, !dbg !4837
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !4837
  call void @llvm.dbg.declare(metadata i32* %optname, metadata !1416, metadata !2310), !dbg !4838
  %2 = bitcast i32* %res to i8*, !dbg !4839
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !4839
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1417, metadata !2310), !dbg !4840
  %3 = bitcast i8** %buf to i8*, !dbg !4841
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !4841
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !1418, metadata !2310), !dbg !4842
  %4 = bitcast i32* %buflen to i8*, !dbg !4843
  call void @llvm.lifetime.start(i64 4, i8* %4) #1, !dbg !4843
  call void @llvm.dbg.declare(metadata i32* %buflen, metadata !1419, metadata !2310), !dbg !4844
  %5 = bitcast i32* %flag to i8*, !dbg !4845
  call void @llvm.lifetime.start(i64 4, i8* %5) #1, !dbg !4845
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !1420, metadata !2310), !dbg !4846
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !4847, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %6, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.362, i32 0, i32 0), i32* %level, i32* %optname, i32* %flag), !dbg !4849
  %tobool = icmp ne i32 %call, 0, !dbg !4849
  br i1 %tobool, label %if.then, label %if.else, !dbg !4850

if.then:                                          ; preds = %entry
  %7 = bitcast i32* %flag to i8*, !dbg !4851
  store i8* %7, i8** %buf, align 8, !dbg !4853, !tbaa !2326
  store i32 4, i32* %buflen, align 4, !dbg !4854, !tbaa !3034
  br label %if.end.4, !dbg !4855

if.else:                                          ; preds = %entry
  call void @PyErr_Clear(), !dbg !4856
  %8 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !4858, !tbaa !2326
  %call1 = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.363, i32 0, i32 0), i32* %level, i32* %optname, i8** %buf, i32* %buflen), !dbg !4860
  %tobool2 = icmp ne i32 %call1, 0, !dbg !4860
  br i1 %tobool2, label %if.end, label %if.then.3, !dbg !4861

if.then.3:                                        ; preds = %if.else
  store %struct._object* null, %struct._object** %retval, !dbg !4862
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4862

if.end:                                           ; preds = %if.else
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %if.then
  %9 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4863, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %9, i32 0, i32 1, !dbg !4864
  %10 = load i32, i32* %sock_fd, align 4, !dbg !4864, !tbaa !2948
  %11 = load i32, i32* %level, align 4, !dbg !4865, !tbaa !3034
  %12 = load i32, i32* %optname, align 4, !dbg !4866, !tbaa !3034
  %13 = load i8*, i8** %buf, align 8, !dbg !4867, !tbaa !2326
  %14 = load i32, i32* %buflen, align 4, !dbg !4868, !tbaa !3034
  %call5 = call i32 @setsockopt(i32 %10, i32 %11, i32 %12, i8* %13, i32 %14) #1, !dbg !4869
  store i32 %call5, i32* %res, align 4, !dbg !4870, !tbaa !3034
  %15 = load i32, i32* %res, align 4, !dbg !4871, !tbaa !3034
  %cmp = icmp slt i32 %15, 0, !dbg !4873
  br i1 %cmp, label %if.then.6, label %if.end.8, !dbg !4874

if.then.6:                                        ; preds = %if.end.4
  %16 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4875, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %16, i32 0, i32 5, !dbg !4876
  %17 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !4876, !tbaa !3181
  %call7 = call %struct._object* %17(), !dbg !4875
  store %struct._object* %call7, %struct._object** %retval, !dbg !4877
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4877

if.end.8:                                         ; preds = %if.end.4
  %18 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4878, !tbaa !2335
  %inc = add i64 %18, 1, !dbg !4878
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4878, !tbaa !2335
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !4879
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4879

cleanup:                                          ; preds = %if.end.8, %if.then.6, %if.then.3
  %19 = bitcast i32* %flag to i8*, !dbg !4880
  call void @llvm.lifetime.end(i64 4, i8* %19) #1, !dbg !4880
  %20 = bitcast i32* %buflen to i8*, !dbg !4880
  call void @llvm.lifetime.end(i64 4, i8* %20) #1, !dbg !4880
  %21 = bitcast i8** %buf to i8*, !dbg !4880
  call void @llvm.lifetime.end(i64 8, i8* %21) #1, !dbg !4880
  %22 = bitcast i32* %res to i8*, !dbg !4880
  call void @llvm.lifetime.end(i64 4, i8* %22) #1, !dbg !4880
  %23 = bitcast i32* %optname to i8*, !dbg !4880
  call void @llvm.lifetime.end(i64 4, i8* %23) #1, !dbg !4880
  %24 = bitcast i32* %level to i8*, !dbg !4880
  call void @llvm.lifetime.end(i64 4, i8* %24) #1, !dbg !4880
  %25 = load %struct._object*, %struct._object** %retval, !dbg !4880
  ret %struct._object* %25, !dbg !4880
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_shutdown(%struct.PySocketSockObject* %s, %struct._object* %arg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %how = alloca i32, align 4
  %res = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1423, metadata !2310), !dbg !4881
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !1424, metadata !2310), !dbg !4882
  %0 = bitcast i32* %how to i8*, !dbg !4883
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !4883
  call void @llvm.dbg.declare(metadata i32* %how, metadata !1425, metadata !2310), !dbg !4884
  %1 = bitcast i32* %res to i8*, !dbg !4885
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !4885
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1426, metadata !2310), !dbg !4886
  %2 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !4887, !tbaa !2326
  %call = call i32 @_PyLong_AsInt(%struct._object* %2), !dbg !4888
  store i32 %call, i32* %how, align 4, !dbg !4889, !tbaa !3034
  %3 = load i32, i32* %how, align 4, !dbg !4890, !tbaa !3034
  %cmp = icmp eq i32 %3, -1, !dbg !4892
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4893

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred(), !dbg !4894
  %tobool = icmp ne %struct._object* %call1, null, !dbg !4894
  br i1 %tobool, label %if.then, label %if.end, !dbg !4896

if.then:                                          ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval, !dbg !4897
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4897

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = bitcast %struct._ts** %_save to i8*, !dbg !4898
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !4898
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1427, metadata !2310), !dbg !4899
  %call2 = call %struct._ts* @PyEval_SaveThread(), !dbg !4900
  store %struct._ts* %call2, %struct._ts** %_save, align 8, !dbg !4901, !tbaa !2326
  %5 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4902, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %5, i32 0, i32 1, !dbg !4903
  %6 = load i32, i32* %sock_fd, align 4, !dbg !4903, !tbaa !2948
  %7 = load i32, i32* %how, align 4, !dbg !4904, !tbaa !3034
  %call3 = call i32 @shutdown(i32 %6, i32 %7) #1, !dbg !4905
  store i32 %call3, i32* %res, align 4, !dbg !4906, !tbaa !3034
  %8 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !4907, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %8), !dbg !4908
  %9 = bitcast %struct._ts** %_save to i8*, !dbg !4909
  call void @llvm.lifetime.end(i64 8, i8* %9) #1, !dbg !4909
  %10 = load i32, i32* %res, align 4, !dbg !4910, !tbaa !3034
  %cmp4 = icmp slt i32 %10, 0, !dbg !4912
  br i1 %cmp4, label %if.then.5, label %if.end.7, !dbg !4913

if.then.5:                                        ; preds = %if.end
  %11 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4914, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %11, i32 0, i32 5, !dbg !4915
  %12 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !4915, !tbaa !3181
  %call6 = call %struct._object* %12(), !dbg !4914
  store %struct._object* %call6, %struct._object** %retval, !dbg !4916
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4916

if.end.7:                                         ; preds = %if.end
  %13 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4917, !tbaa !2335
  %inc = add i64 %13, 1, !dbg !4917
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !4917, !tbaa !2335
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !4918
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4918

cleanup:                                          ; preds = %if.end.7, %if.then.5, %if.then
  %14 = bitcast i32* %res to i8*, !dbg !4919
  call void @llvm.lifetime.end(i64 4, i8* %14) #1, !dbg !4919
  %15 = bitcast i32* %how to i8*, !dbg !4919
  call void @llvm.lifetime.end(i64 4, i8* %15) #1, !dbg !4919
  %16 = load %struct._object*, %struct._object** %retval, !dbg !4919
  ret %struct._object* %16, !dbg !4919
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_recvmsg(%struct.PySocketSockObject* %s, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %bufsize = alloca i64, align 8
  %ancbufsize = alloca i64, align 8
  %flags = alloca i32, align 4
  %iov = alloca %struct.iovec, align 8
  %buf = alloca %struct._object*, align 8
  %retval1 = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1431, metadata !2310), !dbg !4920
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1432, metadata !2310), !dbg !4921
  %0 = bitcast i64* %bufsize to i8*, !dbg !4922
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !4922
  call void @llvm.dbg.declare(metadata i64* %bufsize, metadata !1433, metadata !2310), !dbg !4923
  %1 = bitcast i64* %ancbufsize to i8*, !dbg !4922
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !4922
  call void @llvm.dbg.declare(metadata i64* %ancbufsize, metadata !1434, metadata !2310), !dbg !4924
  store i64 0, i64* %ancbufsize, align 8, !dbg !4924, !tbaa !2963
  %2 = bitcast i32* %flags to i8*, !dbg !4925
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !4925
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1435, metadata !2310), !dbg !4926
  store i32 0, i32* %flags, align 4, !dbg !4926, !tbaa !3034
  %3 = bitcast %struct.iovec* %iov to i8*, !dbg !4927
  call void @llvm.lifetime.start(i64 16, i8* %3) #1, !dbg !4927
  call void @llvm.dbg.declare(metadata %struct.iovec* %iov, metadata !1436, metadata !2310), !dbg !4928
  %4 = bitcast %struct._object** %buf to i8*, !dbg !4929
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !4929
  call void @llvm.dbg.declare(metadata %struct._object** %buf, metadata !1437, metadata !2310), !dbg !4930
  store %struct._object* null, %struct._object** %buf, align 8, !dbg !4930, !tbaa !2326
  %5 = bitcast %struct._object** %retval1 to i8*, !dbg !4929
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !4929
  call void @llvm.dbg.declare(metadata %struct._object** %retval1, metadata !1438, metadata !2310), !dbg !4931
  store %struct._object* null, %struct._object** %retval1, align 8, !dbg !4931, !tbaa !2326
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !4932, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.364, i32 0, i32 0), i64* %bufsize, i64* %ancbufsize, i32* %flags), !dbg !4934
  %tobool = icmp ne i32 %call, 0, !dbg !4934
  br i1 %tobool, label %if.end, label %if.then, !dbg !4935

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !4936
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4936

if.end:                                           ; preds = %entry
  %7 = load i64, i64* %bufsize, align 8, !dbg !4937, !tbaa !2963
  %cmp = icmp slt i64 %7, 0, !dbg !4939
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !4940

if.then.2:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !4941, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.365, i32 0, i32 0)), !dbg !4943
  store %struct._object* null, %struct._object** %retval, !dbg !4944
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4944

if.end.3:                                         ; preds = %if.end
  %9 = load i64, i64* %bufsize, align 8, !dbg !4945, !tbaa !2963
  %call4 = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 %9), !dbg !4947
  store %struct._object* %call4, %struct._object** %buf, align 8, !dbg !4948, !tbaa !2326
  %cmp5 = icmp eq %struct._object* %call4, null, !dbg !4949
  br i1 %cmp5, label %if.then.6, label %if.end.7, !dbg !4950

if.then.6:                                        ; preds = %if.end.3
  store %struct._object* null, %struct._object** %retval, !dbg !4951
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !4951

if.end.7:                                         ; preds = %if.end.3
  %10 = load %struct._object*, %struct._object** %buf, align 8, !dbg !4952, !tbaa !2326
  %11 = bitcast %struct._object* %10 to %struct.PyBytesObject*, !dbg !4953
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %11, i32 0, i32 2, !dbg !4954
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !4955
  %iov_base = getelementptr inbounds %struct.iovec, %struct.iovec* %iov, i32 0, i32 0, !dbg !4956
  store i8* %arraydecay, i8** %iov_base, align 8, !dbg !4957, !tbaa !4958
  %12 = load i64, i64* %bufsize, align 8, !dbg !4960, !tbaa !2963
  %iov_len = getelementptr inbounds %struct.iovec, %struct.iovec* %iov, i32 0, i32 1, !dbg !4961
  store i64 %12, i64* %iov_len, align 8, !dbg !4962, !tbaa !4963
  %13 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !4964, !tbaa !2326
  %14 = load i32, i32* %flags, align 4, !dbg !4965, !tbaa !3034
  %15 = load i64, i64* %ancbufsize, align 8, !dbg !4966, !tbaa !2963
  %16 = bitcast %struct._object** %buf to i8*, !dbg !4967
  %call8 = call %struct._object* @sock_recvmsg_guts(%struct.PySocketSockObject* %13, %struct.iovec* %iov, i32 1, i32 %14, i64 %15, %struct._object* (i64, i8*)* @makeval_recvmsg, i8* %16), !dbg !4968
  store %struct._object* %call8, %struct._object** %retval1, align 8, !dbg !4969, !tbaa !2326
  br label %do.body, !dbg !4970

do.body:                                          ; preds = %if.end.7
  %17 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !4971
  call void @llvm.lifetime.start(i64 8, i8* %17) #1, !dbg !4971
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1439, metadata !2310), !dbg !4973
  %18 = load %struct._object*, %struct._object** %buf, align 8, !dbg !4974, !tbaa !2326
  store %struct._object* %18, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4973, !tbaa !2326
  %19 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4975, !tbaa !2326
  %cmp9 = icmp ne %struct._object* %19, null, !dbg !4976
  br i1 %cmp9, label %if.then.10, label %if.end.15, !dbg !4977

if.then.10:                                       ; preds = %do.body
  br label %do.body.11, !dbg !4978

do.body.11:                                       ; preds = %if.then.10
  %20 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4980
  call void @llvm.lifetime.start(i64 8, i8* %20) #1, !dbg !4980
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1441, metadata !2310), !dbg !4982
  %21 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !4983, !tbaa !2326
  store %struct._object* %21, %struct._object** %_py_decref_tmp, align 8, !dbg !4982, !tbaa !2326
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4984, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0, !dbg !4986
  %23 = load i64, i64* %ob_refcnt, align 8, !dbg !4987, !tbaa !2335
  %dec = add i64 %23, -1, !dbg !4987
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !4987, !tbaa !2335
  %cmp12 = icmp ne i64 %dec, 0, !dbg !4988
  br i1 %cmp12, label %if.then.13, label %if.else, !dbg !4989

if.then.13:                                       ; preds = %do.body.11
  br label %if.end.14, !dbg !4990

if.else:                                          ; preds = %do.body.11
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4992, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1, !dbg !4994
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !4994, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4, !dbg !4995
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !4995, !tbaa !3442
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !4996, !tbaa !2326
  call void %26(%struct._object* %27), !dbg !4997
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.13
  %28 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !4998
  call void @llvm.lifetime.end(i64 8, i8* %28) #1, !dbg !4998
  br label %do.cond, !dbg !5000

do.cond:                                          ; preds = %if.end.14
  br label %do.end, !dbg !5001

do.end:                                           ; preds = %do.cond
  br label %if.end.15, !dbg !5003

if.end.15:                                        ; preds = %do.end, %do.body
  %29 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !5005
  call void @llvm.lifetime.end(i64 8, i8* %29) #1, !dbg !5005
  br label %do.cond.16, !dbg !5008

do.cond.16:                                       ; preds = %if.end.15
  br label %do.end.17, !dbg !5009

do.end.17:                                        ; preds = %do.cond.16
  %30 = load %struct._object*, %struct._object** %retval1, align 8, !dbg !5011, !tbaa !2326
  store %struct._object* %30, %struct._object** %retval, !dbg !5012
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5012

cleanup:                                          ; preds = %do.end.17, %if.then.6, %if.then.2, %if.then
  %31 = bitcast %struct._object** %retval1 to i8*, !dbg !5013
  call void @llvm.lifetime.end(i64 8, i8* %31) #1, !dbg !5013
  %32 = bitcast %struct._object** %buf to i8*, !dbg !5013
  call void @llvm.lifetime.end(i64 8, i8* %32) #1, !dbg !5013
  %33 = bitcast %struct.iovec* %iov to i8*, !dbg !5013
  call void @llvm.lifetime.end(i64 16, i8* %33) #1, !dbg !5013
  %34 = bitcast i32* %flags to i8*, !dbg !5013
  call void @llvm.lifetime.end(i64 4, i8* %34) #1, !dbg !5013
  %35 = bitcast i64* %ancbufsize to i8*, !dbg !5013
  call void @llvm.lifetime.end(i64 8, i8* %35) #1, !dbg !5013
  %36 = bitcast i64* %bufsize to i8*, !dbg !5013
  call void @llvm.lifetime.end(i64 8, i8* %36) #1, !dbg !5013
  %37 = load %struct._object*, %struct._object** %retval, !dbg !5013
  ret %struct._object* %37, !dbg !5013
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_recvmsg_into(%struct.PySocketSockObject* %s, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %ancbufsize = alloca i64, align 8
  %flags = alloca i32, align 4
  %iovs = alloca %struct.iovec*, align 8
  %i = alloca i64, align 8
  %nitems = alloca i64, align 8
  %nbufs = alloca i64, align 8
  %bufs = alloca %struct.bufferinfo*, align 8
  %buffers_arg = alloca %struct._object*, align 8
  %fast = alloca %struct._object*, align 8
  %retval1 = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1538, metadata !2310), !dbg !5014
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1539, metadata !2310), !dbg !5015
  %0 = bitcast i64* %ancbufsize to i8*, !dbg !5016
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !5016
  call void @llvm.dbg.declare(metadata i64* %ancbufsize, metadata !1540, metadata !2310), !dbg !5017
  store i64 0, i64* %ancbufsize, align 8, !dbg !5017, !tbaa !2963
  %1 = bitcast i32* %flags to i8*, !dbg !5018
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !5018
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1541, metadata !2310), !dbg !5019
  store i32 0, i32* %flags, align 4, !dbg !5019, !tbaa !3034
  %2 = bitcast %struct.iovec** %iovs to i8*, !dbg !5020
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !5020
  call void @llvm.dbg.declare(metadata %struct.iovec** %iovs, metadata !1542, metadata !2310), !dbg !5021
  store %struct.iovec* null, %struct.iovec** %iovs, align 8, !dbg !5021, !tbaa !2326
  %3 = bitcast i64* %i to i8*, !dbg !5022
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !5022
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1543, metadata !2310), !dbg !5023
  %4 = bitcast i64* %nitems to i8*, !dbg !5022
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !5022
  call void @llvm.dbg.declare(metadata i64* %nitems, metadata !1544, metadata !2310), !dbg !5024
  %5 = bitcast i64* %nbufs to i8*, !dbg !5022
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !5022
  call void @llvm.dbg.declare(metadata i64* %nbufs, metadata !1545, metadata !2310), !dbg !5025
  store i64 0, i64* %nbufs, align 8, !dbg !5025, !tbaa !2963
  %6 = bitcast %struct.bufferinfo** %bufs to i8*, !dbg !5026
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !5026
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %bufs, metadata !1546, metadata !2310), !dbg !5027
  store %struct.bufferinfo* null, %struct.bufferinfo** %bufs, align 8, !dbg !5027, !tbaa !2326
  %7 = bitcast %struct._object** %buffers_arg to i8*, !dbg !5028
  call void @llvm.lifetime.start(i64 8, i8* %7) #1, !dbg !5028
  call void @llvm.dbg.declare(metadata %struct._object** %buffers_arg, metadata !1547, metadata !2310), !dbg !5029
  %8 = bitcast %struct._object** %fast to i8*, !dbg !5028
  call void @llvm.lifetime.start(i64 8, i8* %8) #1, !dbg !5028
  call void @llvm.dbg.declare(metadata %struct._object** %fast, metadata !1548, metadata !2310), !dbg !5030
  %9 = bitcast %struct._object** %retval1 to i8*, !dbg !5028
  call void @llvm.lifetime.start(i64 8, i8* %9) #1, !dbg !5028
  call void @llvm.dbg.declare(metadata %struct._object** %retval1, metadata !1549, metadata !2310), !dbg !5031
  store %struct._object* null, %struct._object** %retval1, align 8, !dbg !5031, !tbaa !2326
  %10 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5032, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %10, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.371, i32 0, i32 0), %struct._object** %buffers_arg, i64* %ancbufsize, i32* %flags), !dbg !5034
  %tobool = icmp ne i32 %call, 0, !dbg !5034
  br i1 %tobool, label %if.end, label %if.then, !dbg !5035

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5036
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5036

if.end:                                           ; preds = %entry
  %11 = load %struct._object*, %struct._object** %buffers_arg, align 8, !dbg !5037, !tbaa !2326
  %call2 = call %struct._object* @PySequence_Fast(%struct._object* %11, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.372, i32 0, i32 0)), !dbg !5039
  store %struct._object* %call2, %struct._object** %fast, align 8, !dbg !5040, !tbaa !2326
  %cmp = icmp eq %struct._object* %call2, null, !dbg !5041
  br i1 %cmp, label %if.then.3, label %if.end.4, !dbg !5042

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !5043
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5043

if.end.4:                                         ; preds = %if.end
  %12 = load %struct._object*, %struct._object** %fast, align 8, !dbg !5044, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1, !dbg !5045
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5045, !tbaa !2318
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 19, !dbg !5046
  %14 = load i64, i64* %tp_flags, align 8, !dbg !5046, !tbaa !5047
  %and = and i64 %14, 33554432, !dbg !5048
  %cmp5 = icmp ne i64 %and, 0, !dbg !5049
  br i1 %cmp5, label %cond.true, label %cond.false, !dbg !5050

cond.true:                                        ; preds = %if.end.4
  %15 = load %struct._object*, %struct._object** %fast, align 8, !dbg !5051, !tbaa !2326
  %16 = bitcast %struct._object* %15 to %struct.PyVarObject*, !dbg !5053
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %16, i32 0, i32 1, !dbg !5054
  %17 = load i64, i64* %ob_size, align 8, !dbg !5054, !tbaa !5055
  br label %cond.end, !dbg !5050

cond.false:                                       ; preds = %if.end.4
  %18 = load %struct._object*, %struct._object** %fast, align 8, !dbg !5056, !tbaa !2326
  %19 = bitcast %struct._object* %18 to %struct.PyVarObject*, !dbg !5058
  %ob_size6 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %19, i32 0, i32 1, !dbg !5059
  %20 = load i64, i64* %ob_size6, align 8, !dbg !5059, !tbaa !5055
  br label %cond.end, !dbg !5050

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %17, %cond.true ], [ %20, %cond.false ], !dbg !5050
  store i64 %cond, i64* %nitems, align 8, !dbg !5060, !tbaa !2963
  %21 = load i64, i64* %nitems, align 8, !dbg !5063, !tbaa !2963
  %cmp7 = icmp sgt i64 %21, 2147483647, !dbg !5065
  br i1 %cmp7, label %if.then.8, label %if.end.9, !dbg !5066

if.then.8:                                        ; preds = %cond.end
  %22 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !5067, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %22, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.373, i32 0, i32 0)), !dbg !5069
  br label %finally, !dbg !5070

if.end.9:                                         ; preds = %cond.end
  %23 = load i64, i64* %nitems, align 8, !dbg !5071, !tbaa !2963
  %cmp10 = icmp sgt i64 %23, 0, !dbg !5073
  br i1 %cmp10, label %land.lhs.true, label %if.end.28, !dbg !5074

land.lhs.true:                                    ; preds = %if.end.9
  %24 = load i64, i64* %nitems, align 8, !dbg !5075, !tbaa !2963
  %cmp11 = icmp ugt i64 %24, 576460752303423487, !dbg !5077
  br i1 %cmp11, label %cond.true.12, label %cond.false.13, !dbg !5078

cond.true.12:                                     ; preds = %land.lhs.true
  br label %cond.end.15, !dbg !5079

cond.false.13:                                    ; preds = %land.lhs.true
  %25 = load i64, i64* %nitems, align 8, !dbg !5081, !tbaa !2963
  %mul = mul i64 %25, 16, !dbg !5083
  %call14 = call i8* @PyMem_Malloc(i64 %mul), !dbg !5084
  %26 = bitcast i8* %call14 to %struct.iovec*, !dbg !5085
  br label %cond.end.15, !dbg !5078

cond.end.15:                                      ; preds = %cond.false.13, %cond.true.12
  %cond16 = phi %struct.iovec* [ null, %cond.true.12 ], [ %26, %cond.false.13 ], !dbg !5078
  store %struct.iovec* %cond16, %struct.iovec** %iovs, align 8, !dbg !5086, !tbaa !2326
  %cmp17 = icmp eq %struct.iovec* %cond16, null, !dbg !5089
  br i1 %cmp17, label %if.then.26, label %lor.lhs.false, !dbg !5090

lor.lhs.false:                                    ; preds = %cond.end.15
  %27 = load i64, i64* %nitems, align 8, !dbg !5091, !tbaa !2963
  %cmp18 = icmp ugt i64 %27, 115292150460684697, !dbg !5092
  br i1 %cmp18, label %cond.true.19, label %cond.false.20, !dbg !5093

cond.true.19:                                     ; preds = %lor.lhs.false
  br label %cond.end.23, !dbg !5094

cond.false.20:                                    ; preds = %lor.lhs.false
  %28 = load i64, i64* %nitems, align 8, !dbg !5095, !tbaa !2963
  %mul21 = mul i64 %28, 80, !dbg !5096
  %call22 = call i8* @PyMem_Malloc(i64 %mul21), !dbg !5097
  %29 = bitcast i8* %call22 to %struct.bufferinfo*, !dbg !5098
  br label %cond.end.23, !dbg !5093

cond.end.23:                                      ; preds = %cond.false.20, %cond.true.19
  %cond24 = phi %struct.bufferinfo* [ null, %cond.true.19 ], [ %29, %cond.false.20 ], !dbg !5093
  store %struct.bufferinfo* %cond24, %struct.bufferinfo** %bufs, align 8, !dbg !5099, !tbaa !2326
  %cmp25 = icmp eq %struct.bufferinfo* %cond24, null, !dbg !5101
  br i1 %cmp25, label %if.then.26, label %if.end.28, !dbg !5102

if.then.26:                                       ; preds = %cond.end.23, %cond.end.15
  %call27 = call %struct._object* @PyErr_NoMemory(), !dbg !5103
  br label %finally, !dbg !5105

if.end.28:                                        ; preds = %cond.end.23, %if.end.9
  br label %for.cond, !dbg !5106

for.cond:                                         ; preds = %for.inc, %if.end.28
  %30 = load i64, i64* %nbufs, align 8, !dbg !5107, !tbaa !2963
  %31 = load i64, i64* %nitems, align 8, !dbg !5112, !tbaa !2963
  %cmp29 = icmp slt i64 %30, %31, !dbg !5113
  br i1 %cmp29, label %for.body, label %for.end, !dbg !5114

for.body:                                         ; preds = %for.cond
  %32 = load %struct._object*, %struct._object** %fast, align 8, !dbg !5115, !tbaa !2326
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1, !dbg !5118
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8, !dbg !5118, !tbaa !2318
  %tp_flags31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 19, !dbg !5119
  %34 = load i64, i64* %tp_flags31, align 8, !dbg !5119, !tbaa !5047
  %and32 = and i64 %34, 33554432, !dbg !5120
  %cmp33 = icmp ne i64 %and32, 0, !dbg !5121
  br i1 %cmp33, label %cond.true.34, label %cond.false.35, !dbg !5122

cond.true.34:                                     ; preds = %for.body
  %35 = load i64, i64* %nbufs, align 8, !dbg !5123, !tbaa !2963
  %36 = load %struct._object*, %struct._object** %fast, align 8, !dbg !5125, !tbaa !2326
  %37 = bitcast %struct._object* %36 to %struct.PyListObject*, !dbg !5126
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %37, i32 0, i32 1, !dbg !5127
  %38 = load %struct._object**, %struct._object*** %ob_item, align 8, !dbg !5127, !tbaa !5128
  %arrayidx = getelementptr %struct._object*, %struct._object** %38, i64 %35, !dbg !5130
  %39 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !5130, !tbaa !2326
  br label %cond.end.38, !dbg !5122

cond.false.35:                                    ; preds = %for.body
  %40 = load i64, i64* %nbufs, align 8, !dbg !5131, !tbaa !2963
  %41 = load %struct._object*, %struct._object** %fast, align 8, !dbg !5133, !tbaa !2326
  %42 = bitcast %struct._object* %41 to %struct.PyTupleObject*, !dbg !5134
  %ob_item36 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %42, i32 0, i32 1, !dbg !5135
  %arrayidx37 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item36, i32 0, i64 %40, !dbg !5136
  %43 = load %struct._object*, %struct._object** %arrayidx37, align 8, !dbg !5136, !tbaa !2326
  br label %cond.end.38, !dbg !5122

cond.end.38:                                      ; preds = %cond.false.35, %cond.true.34
  %cond39 = phi %struct._object* [ %39, %cond.true.34 ], [ %43, %cond.false.35 ], !dbg !5122
  %44 = load i64, i64* %nbufs, align 8, !dbg !5137, !tbaa !2963
  %45 = load %struct.bufferinfo*, %struct.bufferinfo** %bufs, align 8, !dbg !5138, !tbaa !2326
  %arrayidx40 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %45, i64 %44, !dbg !5138
  %call41 = call i32 (%struct._object*, i8*, ...) @PyArg_Parse(%struct._object* %cond39, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.374, i32 0, i32 0), %struct.bufferinfo* %arrayidx40), !dbg !5139
  %tobool42 = icmp ne i32 %call41, 0, !dbg !5139
  br i1 %tobool42, label %if.end.44, label %if.then.43, !dbg !5140

if.then.43:                                       ; preds = %cond.end.38
  br label %finally, !dbg !5141

if.end.44:                                        ; preds = %cond.end.38
  %46 = load i64, i64* %nbufs, align 8, !dbg !5142, !tbaa !2963
  %47 = load %struct.bufferinfo*, %struct.bufferinfo** %bufs, align 8, !dbg !5143, !tbaa !2326
  %arrayidx45 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %47, i64 %46, !dbg !5143
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %arrayidx45, i32 0, i32 0, !dbg !5144
  %48 = load i8*, i8** %buf, align 8, !dbg !5144, !tbaa !4008
  %49 = load i64, i64* %nbufs, align 8, !dbg !5145, !tbaa !2963
  %50 = load %struct.iovec*, %struct.iovec** %iovs, align 8, !dbg !5146, !tbaa !2326
  %arrayidx46 = getelementptr %struct.iovec, %struct.iovec* %50, i64 %49, !dbg !5146
  %iov_base = getelementptr inbounds %struct.iovec, %struct.iovec* %arrayidx46, i32 0, i32 0, !dbg !5147
  store i8* %48, i8** %iov_base, align 8, !dbg !5148, !tbaa !4958
  %51 = load i64, i64* %nbufs, align 8, !dbg !5149, !tbaa !2963
  %52 = load %struct.bufferinfo*, %struct.bufferinfo** %bufs, align 8, !dbg !5150, !tbaa !2326
  %arrayidx47 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %52, i64 %51, !dbg !5150
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %arrayidx47, i32 0, i32 2, !dbg !5151
  %53 = load i64, i64* %len, align 8, !dbg !5151, !tbaa !4012
  %54 = load i64, i64* %nbufs, align 8, !dbg !5152, !tbaa !2963
  %55 = load %struct.iovec*, %struct.iovec** %iovs, align 8, !dbg !5153, !tbaa !2326
  %arrayidx48 = getelementptr %struct.iovec, %struct.iovec* %55, i64 %54, !dbg !5153
  %iov_len = getelementptr inbounds %struct.iovec, %struct.iovec* %arrayidx48, i32 0, i32 1, !dbg !5154
  store i64 %53, i64* %iov_len, align 8, !dbg !5155, !tbaa !4963
  br label %for.inc, !dbg !5156

for.inc:                                          ; preds = %if.end.44
  %56 = load i64, i64* %nbufs, align 8, !dbg !5157, !tbaa !2963
  %inc = add i64 %56, 1, !dbg !5157
  store i64 %inc, i64* %nbufs, align 8, !dbg !5157, !tbaa !2963
  br label %for.cond, !dbg !5158

for.end:                                          ; preds = %for.cond
  %57 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !5159, !tbaa !2326
  %58 = load %struct.iovec*, %struct.iovec** %iovs, align 8, !dbg !5160, !tbaa !2326
  %59 = load i64, i64* %nitems, align 8, !dbg !5161, !tbaa !2963
  %conv = trunc i64 %59 to i32, !dbg !5161
  %60 = load i32, i32* %flags, align 4, !dbg !5162, !tbaa !3034
  %61 = load i64, i64* %ancbufsize, align 8, !dbg !5163, !tbaa !2963
  %call49 = call %struct._object* @sock_recvmsg_guts(%struct.PySocketSockObject* %57, %struct.iovec* %58, i32 %conv, i32 %60, i64 %61, %struct._object* (i64, i8*)* @makeval_recvmsg_into, i8* null), !dbg !5164
  store %struct._object* %call49, %struct._object** %retval1, align 8, !dbg !5165, !tbaa !2326
  br label %finally, !dbg !5166

finally:                                          ; preds = %for.end, %if.then.43, %if.then.26, %if.then.8
  store i64 0, i64* %i, align 8, !dbg !5167, !tbaa !2963
  br label %for.cond.50, !dbg !5169

for.cond.50:                                      ; preds = %for.inc.55, %finally
  %62 = load i64, i64* %i, align 8, !dbg !5170, !tbaa !2963
  %63 = load i64, i64* %nbufs, align 8, !dbg !5174, !tbaa !2963
  %cmp51 = icmp slt i64 %62, %63, !dbg !5175
  br i1 %cmp51, label %for.body.53, label %for.end.57, !dbg !5176

for.body.53:                                      ; preds = %for.cond.50
  %64 = load i64, i64* %i, align 8, !dbg !5177, !tbaa !2963
  %65 = load %struct.bufferinfo*, %struct.bufferinfo** %bufs, align 8, !dbg !5178, !tbaa !2326
  %arrayidx54 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %65, i64 %64, !dbg !5178
  call void @PyBuffer_Release(%struct.bufferinfo* %arrayidx54), !dbg !5179
  br label %for.inc.55, !dbg !5179

for.inc.55:                                       ; preds = %for.body.53
  %66 = load i64, i64* %i, align 8, !dbg !5180, !tbaa !2963
  %inc56 = add i64 %66, 1, !dbg !5180
  store i64 %inc56, i64* %i, align 8, !dbg !5180, !tbaa !2963
  br label %for.cond.50, !dbg !5181

for.end.57:                                       ; preds = %for.cond.50
  %67 = load %struct.bufferinfo*, %struct.bufferinfo** %bufs, align 8, !dbg !5182, !tbaa !2326
  %68 = bitcast %struct.bufferinfo* %67 to i8*, !dbg !5182
  call void @PyMem_Free(i8* %68), !dbg !5183
  %69 = load %struct.iovec*, %struct.iovec** %iovs, align 8, !dbg !5184, !tbaa !2326
  %70 = bitcast %struct.iovec* %69 to i8*, !dbg !5184
  call void @PyMem_Free(i8* %70), !dbg !5185
  br label %do.body, !dbg !5186

do.body:                                          ; preds = %for.end.57
  %71 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5187
  call void @llvm.lifetime.start(i64 8, i8* %71) #1, !dbg !5187
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1550, metadata !2310), !dbg !5189
  %72 = load %struct._object*, %struct._object** %fast, align 8, !dbg !5190, !tbaa !2326
  store %struct._object* %72, %struct._object** %_py_decref_tmp, align 8, !dbg !5189, !tbaa !2326
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5191, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 0, !dbg !5193
  %74 = load i64, i64* %ob_refcnt, align 8, !dbg !5194, !tbaa !2335
  %dec = add i64 %74, -1, !dbg !5194
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5194, !tbaa !2335
  %cmp58 = icmp ne i64 %dec, 0, !dbg !5195
  br i1 %cmp58, label %if.then.60, label %if.else, !dbg !5196

if.then.60:                                       ; preds = %do.body
  br label %if.end.62, !dbg !5197

if.else:                                          ; preds = %do.body
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5199, !tbaa !2326
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 1, !dbg !5201
  %76 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8, !dbg !5201, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %76, i32 0, i32 4, !dbg !5202
  %77 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5202, !tbaa !3442
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5203, !tbaa !2326
  call void %77(%struct._object* %78), !dbg !5204
  br label %if.end.62

if.end.62:                                        ; preds = %if.else, %if.then.60
  %79 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5205
  call void @llvm.lifetime.end(i64 8, i8* %79) #1, !dbg !5205
  br label %do.cond, !dbg !5207

do.cond:                                          ; preds = %if.end.62
  br label %do.end, !dbg !5208

do.end:                                           ; preds = %do.cond
  %80 = load %struct._object*, %struct._object** %retval1, align 8, !dbg !5210, !tbaa !2326
  store %struct._object* %80, %struct._object** %retval, !dbg !5211
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5211

cleanup:                                          ; preds = %do.end, %if.then.3, %if.then
  %81 = bitcast %struct._object** %retval1 to i8*, !dbg !5212
  call void @llvm.lifetime.end(i64 8, i8* %81) #1, !dbg !5212
  %82 = bitcast %struct._object** %fast to i8*, !dbg !5212
  call void @llvm.lifetime.end(i64 8, i8* %82) #1, !dbg !5212
  %83 = bitcast %struct._object** %buffers_arg to i8*, !dbg !5212
  call void @llvm.lifetime.end(i64 8, i8* %83) #1, !dbg !5212
  %84 = bitcast %struct.bufferinfo** %bufs to i8*, !dbg !5212
  call void @llvm.lifetime.end(i64 8, i8* %84) #1, !dbg !5212
  %85 = bitcast i64* %nbufs to i8*, !dbg !5212
  call void @llvm.lifetime.end(i64 8, i8* %85) #1, !dbg !5212
  %86 = bitcast i64* %nitems to i8*, !dbg !5212
  call void @llvm.lifetime.end(i64 8, i8* %86) #1, !dbg !5212
  %87 = bitcast i64* %i to i8*, !dbg !5212
  call void @llvm.lifetime.end(i64 8, i8* %87) #1, !dbg !5212
  %88 = bitcast %struct.iovec** %iovs to i8*, !dbg !5212
  call void @llvm.lifetime.end(i64 8, i8* %88) #1, !dbg !5212
  %89 = bitcast i32* %flags to i8*, !dbg !5212
  call void @llvm.lifetime.end(i64 4, i8* %89) #1, !dbg !5212
  %90 = bitcast i64* %ancbufsize to i8*, !dbg !5212
  call void @llvm.lifetime.end(i64 8, i8* %90) #1, !dbg !5212
  %91 = load %struct._object*, %struct._object** %retval, !dbg !5212
  ret %struct._object* %91, !dbg !5212
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_sendmsg(%struct.PySocketSockObject* %s, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %ndataparts = alloca i64, align 8
  %ndatabufs = alloca i64, align 8
  %ncmsgs = alloca i64, align 8
  %ncmsgbufs = alloca i64, align 8
  %databufs = alloca %struct.bufferinfo*, align 8
  %iovs = alloca %struct.iovec*, align 8
  %addrbuf = alloca %union.sock_addr, align 8
  %msg = alloca %struct.msghdr, align 8
  %cmsgs = alloca %struct.cmsginfo*, align 8
  %controlbuf = alloca i8*, align 8
  %controllen = alloca i64, align 8
  %controllen_last = alloca i64, align 8
  %bytes_sent = alloca i64, align 8
  %addrlen = alloca i32, align 4
  %timeout = alloca i32, align 4
  %flags = alloca i32, align 4
  %data_arg = alloca %struct._object*, align 8
  %cmsg_arg = alloca %struct._object*, align 8
  %addr_arg = alloca %struct._object*, align 8
  %data_fast = alloca %struct._object*, align 8
  %cmsg_fast = alloca %struct._object*, align 8
  %retval1 = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %bufsize = alloca i64, align 8
  %space = alloca i64, align 8
  %cmsgh = alloca %struct.cmsghdr*, align 8
  %msg_len = alloca i64, align 8
  %data_len = alloca i64, align 8
  %enough_space = alloca i32, align 4
  %space161 = alloca i64, align 8
  %now = alloca %struct.timeval, align 8
  %deadline = alloca %struct.timeval, align 8
  %interval = alloca double, align 8
  %has_timeout = alloca i32, align 4
  %_save = alloca %struct._ts*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp290 = alloca %struct._object*, align 8
  %_py_decref_tmp295 = alloca %struct._object*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !657, metadata !2310), !dbg !5213
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !658, metadata !2310), !dbg !5214
  %0 = bitcast i64* %i to i8*, !dbg !5215
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !5215
  call void @llvm.dbg.declare(metadata i64* %i, metadata !659, metadata !2310), !dbg !5216
  %1 = bitcast i64* %ndataparts to i8*, !dbg !5215
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !5215
  call void @llvm.dbg.declare(metadata i64* %ndataparts, metadata !660, metadata !2310), !dbg !5217
  %2 = bitcast i64* %ndatabufs to i8*, !dbg !5215
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !5215
  call void @llvm.dbg.declare(metadata i64* %ndatabufs, metadata !661, metadata !2310), !dbg !5218
  store i64 0, i64* %ndatabufs, align 8, !dbg !5218, !tbaa !2963
  %3 = bitcast i64* %ncmsgs to i8*, !dbg !5215
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !5215
  call void @llvm.dbg.declare(metadata i64* %ncmsgs, metadata !662, metadata !2310), !dbg !5219
  %4 = bitcast i64* %ncmsgbufs to i8*, !dbg !5215
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !5215
  call void @llvm.dbg.declare(metadata i64* %ncmsgbufs, metadata !663, metadata !2310), !dbg !5220
  store i64 0, i64* %ncmsgbufs, align 8, !dbg !5220, !tbaa !2963
  %5 = bitcast %struct.bufferinfo** %databufs to i8*, !dbg !5221
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !5221
  call void @llvm.dbg.declare(metadata %struct.bufferinfo** %databufs, metadata !664, metadata !2310), !dbg !5222
  store %struct.bufferinfo* null, %struct.bufferinfo** %databufs, align 8, !dbg !5222, !tbaa !2326
  %6 = bitcast %struct.iovec** %iovs to i8*, !dbg !5223
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !5223
  call void @llvm.dbg.declare(metadata %struct.iovec** %iovs, metadata !665, metadata !2310), !dbg !5224
  store %struct.iovec* null, %struct.iovec** %iovs, align 8, !dbg !5224, !tbaa !2326
  %7 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !5225
  call void @llvm.lifetime.start(i64 128, i8* %7) #1, !dbg !5225
  call void @llvm.dbg.declare(metadata %union.sock_addr* %addrbuf, metadata !666, metadata !2310), !dbg !5226
  %8 = bitcast %struct.msghdr* %msg to i8*, !dbg !5227
  call void @llvm.lifetime.start(i64 56, i8* %8) #1, !dbg !5227
  call void @llvm.dbg.declare(metadata %struct.msghdr* %msg, metadata !686, metadata !2310), !dbg !5228
  %9 = bitcast %struct.msghdr* %msg to i8*, !dbg !5228
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 56, i32 8, i1 false), !dbg !5228
  %10 = bitcast %struct.cmsginfo** %cmsgs to i8*, !dbg !5229
  call void @llvm.lifetime.start(i64 8, i8* %10) #1, !dbg !5229
  call void @llvm.dbg.declare(metadata %struct.cmsginfo** %cmsgs, metadata !699, metadata !2310), !dbg !5230
  store %struct.cmsginfo* null, %struct.cmsginfo** %cmsgs, align 8, !dbg !5230, !tbaa !2326
  %11 = bitcast i8** %controlbuf to i8*, !dbg !5231
  call void @llvm.lifetime.start(i64 8, i8* %11) #1, !dbg !5231
  call void @llvm.dbg.declare(metadata i8** %controlbuf, metadata !700, metadata !2310), !dbg !5232
  store i8* null, i8** %controlbuf, align 8, !dbg !5232, !tbaa !2326
  %12 = bitcast i64* %controllen to i8*, !dbg !5233
  call void @llvm.lifetime.start(i64 8, i8* %12) #1, !dbg !5233
  call void @llvm.dbg.declare(metadata i64* %controllen, metadata !701, metadata !2310), !dbg !5234
  %13 = bitcast i64* %controllen_last to i8*, !dbg !5233
  call void @llvm.lifetime.start(i64 8, i8* %13) #1, !dbg !5233
  call void @llvm.dbg.declare(metadata i64* %controllen_last, metadata !702, metadata !2310), !dbg !5235
  %14 = bitcast i64* %bytes_sent to i8*, !dbg !5236
  call void @llvm.lifetime.start(i64 8, i8* %14) #1, !dbg !5236
  call void @llvm.dbg.declare(metadata i64* %bytes_sent, metadata !703, metadata !2310), !dbg !5237
  store i64 -1, i64* %bytes_sent, align 8, !dbg !5237, !tbaa !2963
  %15 = bitcast i32* %addrlen to i8*, !dbg !5238
  call void @llvm.lifetime.start(i64 4, i8* %15) #1, !dbg !5238
  call void @llvm.dbg.declare(metadata i32* %addrlen, metadata !704, metadata !2310), !dbg !5239
  %16 = bitcast i32* %timeout to i8*, !dbg !5238
  call void @llvm.lifetime.start(i64 4, i8* %16) #1, !dbg !5238
  call void @llvm.dbg.declare(metadata i32* %timeout, metadata !705, metadata !2310), !dbg !5240
  %17 = bitcast i32* %flags to i8*, !dbg !5238
  call void @llvm.lifetime.start(i64 4, i8* %17) #1, !dbg !5238
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !706, metadata !2310), !dbg !5241
  store i32 0, i32* %flags, align 4, !dbg !5241, !tbaa !3034
  %18 = bitcast %struct._object** %data_arg to i8*, !dbg !5242
  call void @llvm.lifetime.start(i64 8, i8* %18) #1, !dbg !5242
  call void @llvm.dbg.declare(metadata %struct._object** %data_arg, metadata !707, metadata !2310), !dbg !5243
  %19 = bitcast %struct._object** %cmsg_arg to i8*, !dbg !5242
  call void @llvm.lifetime.start(i64 8, i8* %19) #1, !dbg !5242
  call void @llvm.dbg.declare(metadata %struct._object** %cmsg_arg, metadata !708, metadata !2310), !dbg !5244
  store %struct._object* null, %struct._object** %cmsg_arg, align 8, !dbg !5244, !tbaa !2326
  %20 = bitcast %struct._object** %addr_arg to i8*, !dbg !5242
  call void @llvm.lifetime.start(i64 8, i8* %20) #1, !dbg !5242
  call void @llvm.dbg.declare(metadata %struct._object** %addr_arg, metadata !709, metadata !2310), !dbg !5245
  store %struct._object* null, %struct._object** %addr_arg, align 8, !dbg !5245, !tbaa !2326
  %21 = bitcast %struct._object** %data_fast to i8*, !dbg !5242
  call void @llvm.lifetime.start(i64 8, i8* %21) #1, !dbg !5242
  call void @llvm.dbg.declare(metadata %struct._object** %data_fast, metadata !710, metadata !2310), !dbg !5246
  store %struct._object* null, %struct._object** %data_fast, align 8, !dbg !5246, !tbaa !2326
  %22 = bitcast %struct._object** %cmsg_fast to i8*, !dbg !5242
  call void @llvm.lifetime.start(i64 8, i8* %22) #1, !dbg !5242
  call void @llvm.dbg.declare(metadata %struct._object** %cmsg_fast, metadata !711, metadata !2310), !dbg !5247
  store %struct._object* null, %struct._object** %cmsg_fast, align 8, !dbg !5247, !tbaa !2326
  %23 = bitcast %struct._object** %retval1 to i8*, !dbg !5242
  call void @llvm.lifetime.start(i64 8, i8* %23) #1, !dbg !5242
  call void @llvm.dbg.declare(metadata %struct._object** %retval1, metadata !712, metadata !2310), !dbg !5248
  store %struct._object* null, %struct._object** %retval1, align 8, !dbg !5248, !tbaa !2326
  %24 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !5249, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %24, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.375, i32 0, i32 0), %struct._object** %data_arg, %struct._object** %cmsg_arg, i32* %flags, %struct._object** %addr_arg), !dbg !5251
  %tobool = icmp ne i32 %call, 0, !dbg !5251
  br i1 %tobool, label %if.end, label %if.then, !dbg !5252

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !5253
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.310, !dbg !5253

if.end:                                           ; preds = %entry
  %25 = load %struct._object*, %struct._object** %addr_arg, align 8, !dbg !5254, !tbaa !2326
  %cmp = icmp ne %struct._object* %25, null, !dbg !5256
  br i1 %cmp, label %land.lhs.true, label %if.end.8, !dbg !5257

land.lhs.true:                                    ; preds = %if.end
  %26 = load %struct._object*, %struct._object** %addr_arg, align 8, !dbg !5258, !tbaa !2326
  %cmp2 = icmp ne %struct._object* %26, @_Py_NoneStruct, !dbg !5260
  br i1 %cmp2, label %if.then.3, label %if.end.8, !dbg !5261

if.then.3:                                        ; preds = %land.lhs.true
  %27 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !5262, !tbaa !2326
  %28 = load %struct._object*, %struct._object** %addr_arg, align 8, !dbg !5265, !tbaa !2326
  %sa = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !5266
  %call4 = call i32 @getsockaddrarg(%struct.PySocketSockObject* %27, %struct._object* %28, %struct.sockaddr* %sa, i32* %addrlen), !dbg !5267
  %tobool5 = icmp ne i32 %call4, 0, !dbg !5267
  br i1 %tobool5, label %if.end.7, label %if.then.6, !dbg !5268

if.then.6:                                        ; preds = %if.then.3
  br label %finally, !dbg !5269

if.end.7:                                         ; preds = %if.then.3
  %29 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !5270
  %msg_name = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 0, !dbg !5271
  store i8* %29, i8** %msg_name, align 8, !dbg !5272, !tbaa !5273
  %30 = load i32, i32* %addrlen, align 4, !dbg !5275, !tbaa !3034
  %msg_namelen = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 1, !dbg !5276
  store i32 %30, i32* %msg_namelen, align 4, !dbg !5277, !tbaa !5278
  br label %if.end.8, !dbg !5279

if.end.8:                                         ; preds = %if.end.7, %land.lhs.true, %if.end
  %31 = load %struct._object*, %struct._object** %data_arg, align 8, !dbg !5280, !tbaa !2326
  %call9 = call %struct._object* @PySequence_Fast(%struct._object* %31, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.376, i32 0, i32 0)), !dbg !5282
  store %struct._object* %call9, %struct._object** %data_fast, align 8, !dbg !5283, !tbaa !2326
  %cmp10 = icmp eq %struct._object* %call9, null, !dbg !5284
  br i1 %cmp10, label %if.then.11, label %if.end.12, !dbg !5285

if.then.11:                                       ; preds = %if.end.8
  br label %finally, !dbg !5286

if.end.12:                                        ; preds = %if.end.8
  %32 = load %struct._object*, %struct._object** %data_fast, align 8, !dbg !5287, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1, !dbg !5288
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !5288, !tbaa !2318
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 19, !dbg !5289
  %34 = load i64, i64* %tp_flags, align 8, !dbg !5289, !tbaa !5047
  %and = and i64 %34, 33554432, !dbg !5290
  %cmp13 = icmp ne i64 %and, 0, !dbg !5291
  br i1 %cmp13, label %cond.true, label %cond.false, !dbg !5292

cond.true:                                        ; preds = %if.end.12
  %35 = load %struct._object*, %struct._object** %data_fast, align 8, !dbg !5293, !tbaa !2326
  %36 = bitcast %struct._object* %35 to %struct.PyVarObject*, !dbg !5295
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %36, i32 0, i32 1, !dbg !5296
  %37 = load i64, i64* %ob_size, align 8, !dbg !5296, !tbaa !5055
  br label %cond.end, !dbg !5292

cond.false:                                       ; preds = %if.end.12
  %38 = load %struct._object*, %struct._object** %data_fast, align 8, !dbg !5297, !tbaa !2326
  %39 = bitcast %struct._object* %38 to %struct.PyVarObject*, !dbg !5299
  %ob_size14 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %39, i32 0, i32 1, !dbg !5300
  %40 = load i64, i64* %ob_size14, align 8, !dbg !5300, !tbaa !5055
  br label %cond.end, !dbg !5292

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %37, %cond.true ], [ %40, %cond.false ], !dbg !5292
  store i64 %cond, i64* %ndataparts, align 8, !dbg !5301, !tbaa !2963
  %41 = load i64, i64* %ndataparts, align 8, !dbg !5304, !tbaa !2963
  %cmp15 = icmp sgt i64 %41, 2147483647, !dbg !5306
  br i1 %cmp15, label %if.then.16, label %if.end.17, !dbg !5307

if.then.16:                                       ; preds = %cond.end
  %42 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !5308, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %42, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.377, i32 0, i32 0)), !dbg !5310
  br label %finally, !dbg !5311

if.end.17:                                        ; preds = %cond.end
  %43 = load i64, i64* %ndataparts, align 8, !dbg !5312, !tbaa !2963
  %msg_iovlen = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 3, !dbg !5313
  store i64 %43, i64* %msg_iovlen, align 8, !dbg !5314, !tbaa !5315
  %44 = load i64, i64* %ndataparts, align 8, !dbg !5316, !tbaa !2963
  %cmp18 = icmp sgt i64 %44, 0, !dbg !5318
  br i1 %cmp18, label %land.lhs.true.19, label %if.end.37, !dbg !5319

land.lhs.true.19:                                 ; preds = %if.end.17
  %45 = load i64, i64* %ndataparts, align 8, !dbg !5320, !tbaa !2963
  %cmp20 = icmp ugt i64 %45, 576460752303423487, !dbg !5321
  br i1 %cmp20, label %cond.true.21, label %cond.false.22, !dbg !5322

cond.true.21:                                     ; preds = %land.lhs.true.19
  br label %cond.end.24, !dbg !5323

cond.false.22:                                    ; preds = %land.lhs.true.19
  %46 = load i64, i64* %ndataparts, align 8, !dbg !5325, !tbaa !2963
  %mul = mul i64 %46, 16, !dbg !5327
  %call23 = call i8* @PyMem_Malloc(i64 %mul), !dbg !5328
  %47 = bitcast i8* %call23 to %struct.iovec*, !dbg !5329
  br label %cond.end.24, !dbg !5322

cond.end.24:                                      ; preds = %cond.false.22, %cond.true.21
  %cond25 = phi %struct.iovec* [ null, %cond.true.21 ], [ %47, %cond.false.22 ], !dbg !5322
  store %struct.iovec* %cond25, %struct.iovec** %iovs, align 8, !dbg !5330, !tbaa !2326
  %msg_iov = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 2, !dbg !5333
  store %struct.iovec* %cond25, %struct.iovec** %msg_iov, align 8, !dbg !5334, !tbaa !5335
  %cmp26 = icmp eq %struct.iovec* %cond25, null, !dbg !5336
  br i1 %cmp26, label %if.then.35, label %lor.lhs.false, !dbg !5337

lor.lhs.false:                                    ; preds = %cond.end.24
  %48 = load i64, i64* %ndataparts, align 8, !dbg !5338, !tbaa !2963
  %cmp27 = icmp ugt i64 %48, 115292150460684697, !dbg !5339
  br i1 %cmp27, label %cond.true.28, label %cond.false.29, !dbg !5340

cond.true.28:                                     ; preds = %lor.lhs.false
  br label %cond.end.32, !dbg !5341

cond.false.29:                                    ; preds = %lor.lhs.false
  %49 = load i64, i64* %ndataparts, align 8, !dbg !5342, !tbaa !2963
  %mul30 = mul i64 %49, 80, !dbg !5343
  %call31 = call i8* @PyMem_Malloc(i64 %mul30), !dbg !5344
  %50 = bitcast i8* %call31 to %struct.bufferinfo*, !dbg !5345
  br label %cond.end.32, !dbg !5340

cond.end.32:                                      ; preds = %cond.false.29, %cond.true.28
  %cond33 = phi %struct.bufferinfo* [ null, %cond.true.28 ], [ %50, %cond.false.29 ], !dbg !5340
  store %struct.bufferinfo* %cond33, %struct.bufferinfo** %databufs, align 8, !dbg !5346, !tbaa !2326
  %cmp34 = icmp eq %struct.bufferinfo* %cond33, null, !dbg !5347
  br i1 %cmp34, label %if.then.35, label %if.end.37, !dbg !5348

if.then.35:                                       ; preds = %cond.end.32, %cond.end.24
  %call36 = call %struct._object* @PyErr_NoMemory(), !dbg !5349
  br label %finally, !dbg !5351

if.end.37:                                        ; preds = %cond.end.32, %if.end.17
  br label %for.cond, !dbg !5352

for.cond:                                         ; preds = %for.inc, %if.end.37
  %51 = load i64, i64* %ndatabufs, align 8, !dbg !5353, !tbaa !2963
  %52 = load i64, i64* %ndataparts, align 8, !dbg !5358, !tbaa !2963
  %cmp38 = icmp slt i64 %51, %52, !dbg !5359
  br i1 %cmp38, label %for.body, label %for.end, !dbg !5360

for.body:                                         ; preds = %for.cond
  %53 = load %struct._object*, %struct._object** %data_fast, align 8, !dbg !5361, !tbaa !2326
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1, !dbg !5364
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8, !dbg !5364, !tbaa !2318
  %tp_flags40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 19, !dbg !5365
  %55 = load i64, i64* %tp_flags40, align 8, !dbg !5365, !tbaa !5047
  %and41 = and i64 %55, 33554432, !dbg !5366
  %cmp42 = icmp ne i64 %and41, 0, !dbg !5367
  br i1 %cmp42, label %cond.true.43, label %cond.false.44, !dbg !5368

cond.true.43:                                     ; preds = %for.body
  %56 = load i64, i64* %ndatabufs, align 8, !dbg !5369, !tbaa !2963
  %57 = load %struct._object*, %struct._object** %data_fast, align 8, !dbg !5371, !tbaa !2326
  %58 = bitcast %struct._object* %57 to %struct.PyListObject*, !dbg !5372
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %58, i32 0, i32 1, !dbg !5373
  %59 = load %struct._object**, %struct._object*** %ob_item, align 8, !dbg !5373, !tbaa !5128
  %arrayidx = getelementptr %struct._object*, %struct._object** %59, i64 %56, !dbg !5374
  %60 = load %struct._object*, %struct._object** %arrayidx, align 8, !dbg !5374, !tbaa !2326
  br label %cond.end.47, !dbg !5368

cond.false.44:                                    ; preds = %for.body
  %61 = load i64, i64* %ndatabufs, align 8, !dbg !5375, !tbaa !2963
  %62 = load %struct._object*, %struct._object** %data_fast, align 8, !dbg !5377, !tbaa !2326
  %63 = bitcast %struct._object* %62 to %struct.PyTupleObject*, !dbg !5378
  %ob_item45 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %63, i32 0, i32 1, !dbg !5379
  %arrayidx46 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item45, i32 0, i64 %61, !dbg !5380
  %64 = load %struct._object*, %struct._object** %arrayidx46, align 8, !dbg !5380, !tbaa !2326
  br label %cond.end.47, !dbg !5368

cond.end.47:                                      ; preds = %cond.false.44, %cond.true.43
  %cond48 = phi %struct._object* [ %60, %cond.true.43 ], [ %64, %cond.false.44 ], !dbg !5368
  %65 = load i64, i64* %ndatabufs, align 8, !dbg !5381, !tbaa !2963
  %66 = load %struct.bufferinfo*, %struct.bufferinfo** %databufs, align 8, !dbg !5382, !tbaa !2326
  %arrayidx49 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %66, i64 %65, !dbg !5382
  %call50 = call i32 (%struct._object*, i8*, ...) @PyArg_Parse(%struct._object* %cond48, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.378, i32 0, i32 0), %struct.bufferinfo* %arrayidx49), !dbg !5383
  %tobool51 = icmp ne i32 %call50, 0, !dbg !5383
  br i1 %tobool51, label %if.end.53, label %if.then.52, !dbg !5384

if.then.52:                                       ; preds = %cond.end.47
  br label %finally, !dbg !5385

if.end.53:                                        ; preds = %cond.end.47
  %67 = load i64, i64* %ndatabufs, align 8, !dbg !5386, !tbaa !2963
  %68 = load %struct.bufferinfo*, %struct.bufferinfo** %databufs, align 8, !dbg !5387, !tbaa !2326
  %arrayidx54 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %68, i64 %67, !dbg !5387
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %arrayidx54, i32 0, i32 0, !dbg !5388
  %69 = load i8*, i8** %buf, align 8, !dbg !5388, !tbaa !4008
  %70 = load i64, i64* %ndatabufs, align 8, !dbg !5389, !tbaa !2963
  %71 = load %struct.iovec*, %struct.iovec** %iovs, align 8, !dbg !5390, !tbaa !2326
  %arrayidx55 = getelementptr %struct.iovec, %struct.iovec* %71, i64 %70, !dbg !5390
  %iov_base = getelementptr inbounds %struct.iovec, %struct.iovec* %arrayidx55, i32 0, i32 0, !dbg !5391
  store i8* %69, i8** %iov_base, align 8, !dbg !5392, !tbaa !4958
  %72 = load i64, i64* %ndatabufs, align 8, !dbg !5393, !tbaa !2963
  %73 = load %struct.bufferinfo*, %struct.bufferinfo** %databufs, align 8, !dbg !5394, !tbaa !2326
  %arrayidx56 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %73, i64 %72, !dbg !5394
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %arrayidx56, i32 0, i32 2, !dbg !5395
  %74 = load i64, i64* %len, align 8, !dbg !5395, !tbaa !4012
  %75 = load i64, i64* %ndatabufs, align 8, !dbg !5396, !tbaa !2963
  %76 = load %struct.iovec*, %struct.iovec** %iovs, align 8, !dbg !5397, !tbaa !2326
  %arrayidx57 = getelementptr %struct.iovec, %struct.iovec* %76, i64 %75, !dbg !5397
  %iov_len = getelementptr inbounds %struct.iovec, %struct.iovec* %arrayidx57, i32 0, i32 1, !dbg !5398
  store i64 %74, i64* %iov_len, align 8, !dbg !5399, !tbaa !4963
  br label %for.inc, !dbg !5400

for.inc:                                          ; preds = %if.end.53
  %77 = load i64, i64* %ndatabufs, align 8, !dbg !5401, !tbaa !2963
  %inc = add i64 %77, 1, !dbg !5401
  store i64 %inc, i64* %ndatabufs, align 8, !dbg !5401, !tbaa !2963
  br label %for.cond, !dbg !5402

for.end:                                          ; preds = %for.cond
  %78 = load %struct._object*, %struct._object** %cmsg_arg, align 8, !dbg !5403, !tbaa !2326
  %cmp58 = icmp eq %struct._object* %78, null, !dbg !5405
  br i1 %cmp58, label %if.then.59, label %if.else, !dbg !5406

if.then.59:                                       ; preds = %for.end
  store i64 0, i64* %ncmsgs, align 8, !dbg !5407, !tbaa !2963
  br label %if.end.74, !dbg !5408

if.else:                                          ; preds = %for.end
  %79 = load %struct._object*, %struct._object** %cmsg_arg, align 8, !dbg !5409, !tbaa !2326
  %call60 = call %struct._object* @PySequence_Fast(%struct._object* %79, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.379, i32 0, i32 0)), !dbg !5412
  store %struct._object* %call60, %struct._object** %cmsg_fast, align 8, !dbg !5413, !tbaa !2326
  %cmp61 = icmp eq %struct._object* %call60, null, !dbg !5414
  br i1 %cmp61, label %if.then.62, label %if.end.63, !dbg !5415

if.then.62:                                       ; preds = %if.else
  br label %finally, !dbg !5416

if.end.63:                                        ; preds = %if.else
  %80 = load %struct._object*, %struct._object** %cmsg_fast, align 8, !dbg !5417, !tbaa !2326
  %ob_type64 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 1, !dbg !5418
  %81 = load %struct._typeobject*, %struct._typeobject** %ob_type64, align 8, !dbg !5418, !tbaa !2318
  %tp_flags65 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %81, i32 0, i32 19, !dbg !5419
  %82 = load i64, i64* %tp_flags65, align 8, !dbg !5419, !tbaa !5047
  %and66 = and i64 %82, 33554432, !dbg !5420
  %cmp67 = icmp ne i64 %and66, 0, !dbg !5421
  br i1 %cmp67, label %cond.true.68, label %cond.false.70, !dbg !5422

cond.true.68:                                     ; preds = %if.end.63
  %83 = load %struct._object*, %struct._object** %cmsg_fast, align 8, !dbg !5423, !tbaa !2326
  %84 = bitcast %struct._object* %83 to %struct.PyVarObject*, !dbg !5425
  %ob_size69 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %84, i32 0, i32 1, !dbg !5426
  %85 = load i64, i64* %ob_size69, align 8, !dbg !5426, !tbaa !5055
  br label %cond.end.72, !dbg !5422

cond.false.70:                                    ; preds = %if.end.63
  %86 = load %struct._object*, %struct._object** %cmsg_fast, align 8, !dbg !5427, !tbaa !2326
  %87 = bitcast %struct._object* %86 to %struct.PyVarObject*, !dbg !5429
  %ob_size71 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %87, i32 0, i32 1, !dbg !5430
  %88 = load i64, i64* %ob_size71, align 8, !dbg !5430, !tbaa !5055
  br label %cond.end.72, !dbg !5422

cond.end.72:                                      ; preds = %cond.false.70, %cond.true.68
  %cond73 = phi i64 [ %85, %cond.true.68 ], [ %88, %cond.false.70 ], !dbg !5422
  store i64 %cond73, i64* %ncmsgs, align 8, !dbg !5431, !tbaa !2963
  br label %if.end.74

if.end.74:                                        ; preds = %cond.end.72, %if.then.59
  %89 = load i64, i64* %ncmsgs, align 8, !dbg !5434, !tbaa !2963
  %cmp75 = icmp sgt i64 %89, 0, !dbg !5436
  br i1 %cmp75, label %land.lhs.true.76, label %if.end.87, !dbg !5437

land.lhs.true.76:                                 ; preds = %if.end.74
  %90 = load i64, i64* %ncmsgs, align 8, !dbg !5438, !tbaa !2963
  %cmp77 = icmp ugt i64 %90, 104811045873349725, !dbg !5440
  br i1 %cmp77, label %cond.true.78, label %cond.false.79, !dbg !5441

cond.true.78:                                     ; preds = %land.lhs.true.76
  br label %cond.end.82, !dbg !5442

cond.false.79:                                    ; preds = %land.lhs.true.76
  %91 = load i64, i64* %ncmsgs, align 8, !dbg !5444, !tbaa !2963
  %mul80 = mul i64 %91, 88, !dbg !5446
  %call81 = call i8* @PyMem_Malloc(i64 %mul80), !dbg !5447
  %92 = bitcast i8* %call81 to %struct.cmsginfo*, !dbg !5448
  br label %cond.end.82, !dbg !5441

cond.end.82:                                      ; preds = %cond.false.79, %cond.true.78
  %cond83 = phi %struct.cmsginfo* [ null, %cond.true.78 ], [ %92, %cond.false.79 ], !dbg !5441
  store %struct.cmsginfo* %cond83, %struct.cmsginfo** %cmsgs, align 8, !dbg !5449, !tbaa !2326
  %cmp84 = icmp eq %struct.cmsginfo* %cond83, null, !dbg !5452
  br i1 %cmp84, label %if.then.85, label %if.end.87, !dbg !5453

if.then.85:                                       ; preds = %cond.end.82
  %call86 = call %struct._object* @PyErr_NoMemory(), !dbg !5454
  br label %finally, !dbg !5456

if.end.87:                                        ; preds = %cond.end.82, %if.end.74
  store i64 0, i64* %controllen_last, align 8, !dbg !5457, !tbaa !2963
  store i64 0, i64* %controllen, align 8, !dbg !5458, !tbaa !2963
  br label %while.cond, !dbg !5459

while.cond:                                       ; preds = %cleanup.cont, %if.end.87
  %93 = load i64, i64* %ncmsgbufs, align 8, !dbg !5460, !tbaa !2963
  %94 = load i64, i64* %ncmsgs, align 8, !dbg !5462, !tbaa !2963
  %cmp88 = icmp slt i64 %93, %94, !dbg !5463
  br i1 %cmp88, label %while.body, label %while.end, !dbg !5459

while.body:                                       ; preds = %while.cond
  %95 = bitcast i64* %bufsize to i8*, !dbg !5464
  call void @llvm.lifetime.start(i64 8, i8* %95) #1, !dbg !5464
  call void @llvm.dbg.declare(metadata i64* %bufsize, metadata !713, metadata !2310), !dbg !5465
  %96 = bitcast i64* %space to i8*, !dbg !5464
  call void @llvm.lifetime.start(i64 8, i8* %96) #1, !dbg !5464
  call void @llvm.dbg.declare(metadata i64* %space, metadata !715, metadata !2310), !dbg !5466
  %97 = load %struct._object*, %struct._object** %cmsg_fast, align 8, !dbg !5467, !tbaa !2326
  %ob_type89 = getelementptr inbounds %struct._object, %struct._object* %97, i32 0, i32 1, !dbg !5469
  %98 = load %struct._typeobject*, %struct._typeobject** %ob_type89, align 8, !dbg !5469, !tbaa !2318
  %tp_flags90 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %98, i32 0, i32 19, !dbg !5470
  %99 = load i64, i64* %tp_flags90, align 8, !dbg !5470, !tbaa !5047
  %and91 = and i64 %99, 33554432, !dbg !5471
  %cmp92 = icmp ne i64 %and91, 0, !dbg !5472
  br i1 %cmp92, label %cond.true.93, label %cond.false.96, !dbg !5473

cond.true.93:                                     ; preds = %while.body
  %100 = load i64, i64* %ncmsgbufs, align 8, !dbg !5474, !tbaa !2963
  %101 = load %struct._object*, %struct._object** %cmsg_fast, align 8, !dbg !5476, !tbaa !2326
  %102 = bitcast %struct._object* %101 to %struct.PyListObject*, !dbg !5477
  %ob_item94 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %102, i32 0, i32 1, !dbg !5478
  %103 = load %struct._object**, %struct._object*** %ob_item94, align 8, !dbg !5478, !tbaa !5128
  %arrayidx95 = getelementptr %struct._object*, %struct._object** %103, i64 %100, !dbg !5479
  %104 = load %struct._object*, %struct._object** %arrayidx95, align 8, !dbg !5479, !tbaa !2326
  br label %cond.end.99, !dbg !5473

cond.false.96:                                    ; preds = %while.body
  %105 = load i64, i64* %ncmsgbufs, align 8, !dbg !5480, !tbaa !2963
  %106 = load %struct._object*, %struct._object** %cmsg_fast, align 8, !dbg !5482, !tbaa !2326
  %107 = bitcast %struct._object* %106 to %struct.PyTupleObject*, !dbg !5483
  %ob_item97 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %107, i32 0, i32 1, !dbg !5484
  %arrayidx98 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item97, i32 0, i64 %105, !dbg !5485
  %108 = load %struct._object*, %struct._object** %arrayidx98, align 8, !dbg !5485, !tbaa !2326
  br label %cond.end.99, !dbg !5473

cond.end.99:                                      ; preds = %cond.false.96, %cond.true.93
  %cond100 = phi %struct._object* [ %104, %cond.true.93 ], [ %108, %cond.false.96 ], !dbg !5473
  %109 = load i64, i64* %ncmsgbufs, align 8, !dbg !5486, !tbaa !2963
  %110 = load %struct.cmsginfo*, %struct.cmsginfo** %cmsgs, align 8, !dbg !5487, !tbaa !2326
  %arrayidx101 = getelementptr %struct.cmsginfo, %struct.cmsginfo* %110, i64 %109, !dbg !5487
  %level = getelementptr inbounds %struct.cmsginfo, %struct.cmsginfo* %arrayidx101, i32 0, i32 0, !dbg !5488
  %111 = load i64, i64* %ncmsgbufs, align 8, !dbg !5489, !tbaa !2963
  %112 = load %struct.cmsginfo*, %struct.cmsginfo** %cmsgs, align 8, !dbg !5490, !tbaa !2326
  %arrayidx102 = getelementptr %struct.cmsginfo, %struct.cmsginfo* %112, i64 %111, !dbg !5490
  %type = getelementptr inbounds %struct.cmsginfo, %struct.cmsginfo* %arrayidx102, i32 0, i32 1, !dbg !5491
  %113 = load i64, i64* %ncmsgbufs, align 8, !dbg !5492, !tbaa !2963
  %114 = load %struct.cmsginfo*, %struct.cmsginfo** %cmsgs, align 8, !dbg !5493, !tbaa !2326
  %arrayidx103 = getelementptr %struct.cmsginfo, %struct.cmsginfo* %114, i64 %113, !dbg !5493
  %data = getelementptr inbounds %struct.cmsginfo, %struct.cmsginfo* %arrayidx103, i32 0, i32 2, !dbg !5494
  %call104 = call i32 (%struct._object*, i8*, ...) @PyArg_Parse(%struct._object* %cond100, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.380, i32 0, i32 0), i32* %level, i32* %type, %struct.bufferinfo* %data), !dbg !5495
  %tobool105 = icmp ne i32 %call104, 0, !dbg !5495
  br i1 %tobool105, label %if.end.107, label %if.then.106, !dbg !5496

if.then.106:                                      ; preds = %cond.end.99
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5497

if.end.107:                                       ; preds = %cond.end.99
  %115 = load i64, i64* %ncmsgbufs, align 8, !dbg !5498, !tbaa !2963
  %inc108 = add i64 %115, 1, !dbg !5498
  store i64 %inc108, i64* %ncmsgbufs, align 8, !dbg !5498, !tbaa !2963
  %116 = load %struct.cmsginfo*, %struct.cmsginfo** %cmsgs, align 8, !dbg !5499, !tbaa !2326
  %arrayidx109 = getelementptr %struct.cmsginfo, %struct.cmsginfo* %116, i64 %115, !dbg !5499
  %data110 = getelementptr inbounds %struct.cmsginfo, %struct.cmsginfo* %arrayidx109, i32 0, i32 2, !dbg !5500
  %len111 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %data110, i32 0, i32 2, !dbg !5501
  %117 = load i64, i64* %len111, align 8, !dbg !5501, !tbaa !5502
  store i64 %117, i64* %bufsize, align 8, !dbg !5504, !tbaa !2963
  %118 = load i64, i64* %bufsize, align 8, !dbg !5505, !tbaa !2963
  %call112 = call i32 @get_CMSG_SPACE(i64 %118, i64* %space), !dbg !5507
  %tobool113 = icmp ne i32 %call112, 0, !dbg !5507
  br i1 %tobool113, label %if.end.115, label %if.then.114, !dbg !5508

if.then.114:                                      ; preds = %if.end.107
  %119 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !5509, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %119, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.381, i32 0, i32 0)), !dbg !5511
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5512

if.end.115:                                       ; preds = %if.end.107
  %120 = load i64, i64* %space, align 8, !dbg !5513, !tbaa !2963
  %121 = load i64, i64* %controllen, align 8, !dbg !5514, !tbaa !2963
  %add = add i64 %121, %120, !dbg !5514
  store i64 %add, i64* %controllen, align 8, !dbg !5514, !tbaa !2963
  %122 = load i64, i64* %controllen, align 8, !dbg !5515, !tbaa !2963
  %cmp116 = icmp ugt i64 %122, 2147483647, !dbg !5517
  br i1 %cmp116, label %if.then.119, label %lor.lhs.false.117, !dbg !5518

lor.lhs.false.117:                                ; preds = %if.end.115
  %123 = load i64, i64* %controllen, align 8, !dbg !5519, !tbaa !2963
  %124 = load i64, i64* %controllen_last, align 8, !dbg !5521, !tbaa !2963
  %cmp118 = icmp ult i64 %123, %124, !dbg !5522
  br i1 %cmp118, label %if.then.119, label %if.end.120, !dbg !5523

if.then.119:                                      ; preds = %lor.lhs.false.117, %if.end.115
  %125 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !5524, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %125, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.382, i32 0, i32 0)), !dbg !5526
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5527

if.end.120:                                       ; preds = %lor.lhs.false.117
  %126 = load i64, i64* %controllen, align 8, !dbg !5528, !tbaa !2963
  store i64 %126, i64* %controllen_last, align 8, !dbg !5529, !tbaa !2963
  store i32 0, i32* %cleanup.dest.slot, !dbg !5530
  br label %cleanup, !dbg !5530

cleanup:                                          ; preds = %if.end.120, %if.then.119, %if.then.114, %if.then.106
  %127 = bitcast i64* %space to i8*, !dbg !5531
  call void @llvm.lifetime.end(i64 8, i8* %127) #1, !dbg !5531
  %128 = bitcast i64* %bufsize to i8*, !dbg !5531
  call void @llvm.lifetime.end(i64 8, i8* %128) #1, !dbg !5531
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock

NodeBlock:                                        ; preds = %cleanup
  %Pivot = icmp slt i32 %cleanup.dest, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %cleanup.dest, 2
  br i1 %SwitchLeaf2, label %finally, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %while.cond, !dbg !5459

while.end:                                        ; preds = %while.cond
  %129 = load i64, i64* %ncmsgbufs, align 8, !dbg !5532, !tbaa !2963
  %cmp122 = icmp sgt i64 %129, 0, !dbg !5533
  br i1 %cmp122, label %if.then.123, label %if.end.189, !dbg !5534

if.then.123:                                      ; preds = %while.end
  %130 = bitcast %struct.cmsghdr** %cmsgh to i8*, !dbg !5535
  call void @llvm.lifetime.start(i64 8, i8* %130) #1, !dbg !5535
  call void @llvm.dbg.declare(metadata %struct.cmsghdr** %cmsgh, metadata !716, metadata !2310), !dbg !5536
  store %struct.cmsghdr* null, %struct.cmsghdr** %cmsgh, align 8, !dbg !5536, !tbaa !2326
  %131 = load i64, i64* %controllen, align 8, !dbg !5537, !tbaa !2963
  %call124 = call i8* @PyMem_Malloc(i64 %131), !dbg !5539
  store i8* %call124, i8** %controlbuf, align 8, !dbg !5540, !tbaa !2326
  %msg_control = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 4, !dbg !5541
  store i8* %call124, i8** %msg_control, align 8, !dbg !5542, !tbaa !5543
  %cmp125 = icmp eq i8* %call124, null, !dbg !5544
  br i1 %cmp125, label %if.then.126, label %if.end.128, !dbg !5545

if.then.126:                                      ; preds = %if.then.123
  %call127 = call %struct._object* @PyErr_NoMemory(), !dbg !5546
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.186, !dbg !5548

if.end.128:                                       ; preds = %if.then.123
  %132 = load i64, i64* %controllen, align 8, !dbg !5549, !tbaa !2963
  %msg_controllen = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 5, !dbg !5550
  store i64 %132, i64* %msg_controllen, align 8, !dbg !5551, !tbaa !5552
  %133 = load i8*, i8** %controlbuf, align 8, !dbg !5553, !tbaa !2326
  %134 = load i64, i64* %controllen, align 8, !dbg !5554, !tbaa !2963
  call void @llvm.memset.p0i8.i64(i8* %133, i8 0, i64 %134, i32 1, i1 false), !dbg !5555
  store i64 0, i64* %i, align 8, !dbg !5556, !tbaa !2963
  br label %for.cond.129, !dbg !5557

for.cond.129:                                     ; preds = %for.inc.183, %if.end.128
  %135 = load i64, i64* %i, align 8, !dbg !5558, !tbaa !2963
  %136 = load i64, i64* %ncmsgbufs, align 8, !dbg !5561, !tbaa !2963
  %cmp130 = icmp slt i64 %135, %136, !dbg !5562
  br i1 %cmp130, label %for.body.131, label %for.end.185, !dbg !5563

for.body.131:                                     ; preds = %for.cond.129
  %137 = bitcast i64* %msg_len to i8*, !dbg !5564
  call void @llvm.lifetime.start(i64 8, i8* %137) #1, !dbg !5564
  call void @llvm.dbg.declare(metadata i64* %msg_len, metadata !719, metadata !2310), !dbg !5565
  %138 = bitcast i64* %data_len to i8*, !dbg !5564
  call void @llvm.lifetime.start(i64 8, i8* %138) #1, !dbg !5564
  call void @llvm.dbg.declare(metadata i64* %data_len, metadata !723, metadata !2310), !dbg !5566
  %139 = load i64, i64* %i, align 8, !dbg !5567, !tbaa !2963
  %140 = load %struct.cmsginfo*, %struct.cmsginfo** %cmsgs, align 8, !dbg !5568, !tbaa !2326
  %arrayidx132 = getelementptr %struct.cmsginfo, %struct.cmsginfo* %140, i64 %139, !dbg !5568
  %data133 = getelementptr inbounds %struct.cmsginfo, %struct.cmsginfo* %arrayidx132, i32 0, i32 2, !dbg !5569
  %len134 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %data133, i32 0, i32 2, !dbg !5570
  %141 = load i64, i64* %len134, align 8, !dbg !5570, !tbaa !5502
  store i64 %141, i64* %data_len, align 8, !dbg !5566, !tbaa !2963
  %142 = bitcast i32* %enough_space to i8*, !dbg !5571
  call void @llvm.lifetime.start(i64 4, i8* %142) #1, !dbg !5571
  call void @llvm.dbg.declare(metadata i32* %enough_space, metadata !724, metadata !2310), !dbg !5572
  store i32 0, i32* %enough_space, align 4, !dbg !5572, !tbaa !3034
  %143 = load i64, i64* %i, align 8, !dbg !5573, !tbaa !2963
  %cmp135 = icmp eq i64 %143, 0, !dbg !5574
  br i1 %cmp135, label %cond.true.136, label %cond.false.144, !dbg !5575

cond.true.136:                                    ; preds = %for.body.131
  %msg_controllen137 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 5, !dbg !5576
  %144 = load i64, i64* %msg_controllen137, align 8, !dbg !5576, !tbaa !5552
  %cmp138 = icmp uge i64 %144, 16, !dbg !5578
  br i1 %cmp138, label %cond.true.139, label %cond.false.141, !dbg !5579

cond.true.139:                                    ; preds = %cond.true.136
  %msg_control140 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 4, !dbg !5580
  %145 = load i8*, i8** %msg_control140, align 8, !dbg !5580, !tbaa !5543
  %146 = bitcast i8* %145 to %struct.cmsghdr*, !dbg !5582
  br label %cond.end.142, !dbg !5579

cond.false.141:                                   ; preds = %cond.true.136
  br label %cond.end.142, !dbg !5583

cond.end.142:                                     ; preds = %cond.false.141, %cond.true.139
  %cond143 = phi %struct.cmsghdr* [ %146, %cond.true.139 ], [ null, %cond.false.141 ], !dbg !5579
  br label %cond.end.146, !dbg !5585

cond.false.144:                                   ; preds = %for.body.131
  %147 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !5588, !tbaa !2326
  %call145 = call %struct.cmsghdr* @__cmsg_nxthdr(%struct.msghdr* %msg, %struct.cmsghdr* %147) #1, !dbg !5590
  br label %cond.end.146, !dbg !5575

cond.end.146:                                     ; preds = %cond.false.144, %cond.end.142
  %cond147 = phi %struct.cmsghdr* [ %cond143, %cond.end.142 ], [ %call145, %cond.false.144 ], !dbg !5575
  store %struct.cmsghdr* %cond147, %struct.cmsghdr** %cmsgh, align 8, !dbg !5591, !tbaa !2326
  %148 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !5594, !tbaa !2326
  %cmp148 = icmp eq %struct.cmsghdr* %148, null, !dbg !5596
  br i1 %cmp148, label %if.then.149, label %if.end.153, !dbg !5597

if.then.149:                                      ; preds = %cond.end.146
  %149 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8, !dbg !5598, !tbaa !2326
  %150 = load i64, i64* %i, align 8, !dbg !5600, !tbaa !2963
  %cmp150 = icmp eq i64 %150, 0, !dbg !5601
  %cond151 = select i1 %cmp150, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.384, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.385, i32 0, i32 0), !dbg !5602
  %call152 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %149, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.383, i32 0, i32 0), i8* %cond151), !dbg !5603
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.178, !dbg !5604

if.end.153:                                       ; preds = %cond.end.146
  %151 = load i64, i64* %data_len, align 8, !dbg !5605, !tbaa !2963
  %call154 = call i32 @get_CMSG_LEN(i64 %151, i64* %msg_len), !dbg !5607
  %tobool155 = icmp ne i32 %call154, 0, !dbg !5607
  br i1 %tobool155, label %if.end.157, label %if.then.156, !dbg !5608

if.then.156:                                      ; preds = %if.end.153
  %152 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8, !dbg !5609, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %152, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.386, i32 0, i32 0)), !dbg !5611
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.178, !dbg !5612

if.end.157:                                       ; preds = %if.end.153
  %153 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !5613, !tbaa !2326
  %154 = load i64, i64* %msg_len, align 8, !dbg !5614, !tbaa !2963
  %call158 = call i32 @cmsg_min_space(%struct.msghdr* %msg, %struct.cmsghdr* %153, i64 %154), !dbg !5615
  %tobool159 = icmp ne i32 %call158, 0, !dbg !5615
  br i1 %tobool159, label %if.then.160, label %if.end.167, !dbg !5616

if.then.160:                                      ; preds = %if.end.157
  %155 = bitcast i64* %space161 to i8*, !dbg !5617
  call void @llvm.lifetime.start(i64 8, i8* %155) #1, !dbg !5617
  call void @llvm.dbg.declare(metadata i64* %space161, metadata !725, metadata !2310), !dbg !5618
  %156 = load i64, i64* %msg_len, align 8, !dbg !5619, !tbaa !2963
  %157 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !5620, !tbaa !2326
  %cmsg_len = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %157, i32 0, i32 0, !dbg !5621
  store i64 %156, i64* %cmsg_len, align 8, !dbg !5622, !tbaa !2963
  %158 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !5623, !tbaa !2326
  %call162 = call i32 @get_cmsg_data_space(%struct.msghdr* %msg, %struct.cmsghdr* %158, i64* %space161), !dbg !5625
  %tobool163 = icmp ne i32 %call162, 0, !dbg !5625
  br i1 %tobool163, label %if.then.164, label %if.end.166, !dbg !5626

if.then.164:                                      ; preds = %if.then.160
  %159 = load i64, i64* %space161, align 8, !dbg !5627, !tbaa !2963
  %160 = load i64, i64* %data_len, align 8, !dbg !5628, !tbaa !2963
  %cmp165 = icmp uge i64 %159, %160, !dbg !5629
  %conv = zext i1 %cmp165 to i32, !dbg !5629
  store i32 %conv, i32* %enough_space, align 4, !dbg !5630, !tbaa !3034
  br label %if.end.166, !dbg !5631

if.end.166:                                       ; preds = %if.then.164, %if.then.160
  %161 = bitcast i64* %space161 to i8*, !dbg !5632
  call void @llvm.lifetime.end(i64 8, i8* %161) #1, !dbg !5632
  br label %if.end.167, !dbg !5633

if.end.167:                                       ; preds = %if.end.166, %if.end.157
  %162 = load i32, i32* %enough_space, align 4, !dbg !5634, !tbaa !3034
  %tobool168 = icmp ne i32 %162, 0, !dbg !5634
  br i1 %tobool168, label %if.end.170, label %if.then.169, !dbg !5636

if.then.169:                                      ; preds = %if.end.167
  %163 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8, !dbg !5637, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %163, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.387, i32 0, i32 0)), !dbg !5639
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.178, !dbg !5640

if.end.170:                                       ; preds = %if.end.167
  %164 = load i64, i64* %i, align 8, !dbg !5641, !tbaa !2963
  %165 = load %struct.cmsginfo*, %struct.cmsginfo** %cmsgs, align 8, !dbg !5642, !tbaa !2326
  %arrayidx171 = getelementptr %struct.cmsginfo, %struct.cmsginfo* %165, i64 %164, !dbg !5642
  %level172 = getelementptr inbounds %struct.cmsginfo, %struct.cmsginfo* %arrayidx171, i32 0, i32 0, !dbg !5643
  %166 = load i32, i32* %level172, align 4, !dbg !5643, !tbaa !5644
  %167 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !5645, !tbaa !2326
  %cmsg_level = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %167, i32 0, i32 1, !dbg !5646
  store i32 %166, i32* %cmsg_level, align 4, !dbg !5647, !tbaa !3034
  %168 = load i64, i64* %i, align 8, !dbg !5648, !tbaa !2963
  %169 = load %struct.cmsginfo*, %struct.cmsginfo** %cmsgs, align 8, !dbg !5649, !tbaa !2326
  %arrayidx173 = getelementptr %struct.cmsginfo, %struct.cmsginfo* %169, i64 %168, !dbg !5649
  %type174 = getelementptr inbounds %struct.cmsginfo, %struct.cmsginfo* %arrayidx173, i32 0, i32 1, !dbg !5650
  %170 = load i32, i32* %type174, align 4, !dbg !5650, !tbaa !5651
  %171 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !5652, !tbaa !2326
  %cmsg_type = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %171, i32 0, i32 2, !dbg !5653
  store i32 %170, i32* %cmsg_type, align 4, !dbg !5654, !tbaa !3034
  %172 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !5655, !tbaa !2326
  %__cmsg_data = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %172, i32 0, i32 3, !dbg !5656
  %173 = bitcast [0 x i8]* %__cmsg_data to i8*, !dbg !5657
  %174 = load i64, i64* %i, align 8, !dbg !5658, !tbaa !2963
  %175 = load %struct.cmsginfo*, %struct.cmsginfo** %cmsgs, align 8, !dbg !5659, !tbaa !2326
  %arrayidx175 = getelementptr %struct.cmsginfo, %struct.cmsginfo* %175, i64 %174, !dbg !5659
  %data176 = getelementptr inbounds %struct.cmsginfo, %struct.cmsginfo* %arrayidx175, i32 0, i32 2, !dbg !5660
  %buf177 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %data176, i32 0, i32 0, !dbg !5661
  %176 = load i8*, i8** %buf177, align 8, !dbg !5661, !tbaa !5662
  %177 = load i64, i64* %data_len, align 8, !dbg !5663, !tbaa !2963
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %173, i8* %176, i64 %177, i32 1, i1 false), !dbg !5657
  store i32 0, i32* %cleanup.dest.slot, !dbg !5664
  br label %cleanup.178, !dbg !5664

cleanup.178:                                      ; preds = %if.end.170, %if.then.169, %if.then.156, %if.then.149
  %178 = bitcast i32* %enough_space to i8*, !dbg !5665
  call void @llvm.lifetime.end(i64 4, i8* %178) #1, !dbg !5665
  %179 = bitcast i64* %data_len to i8*, !dbg !5665
  call void @llvm.lifetime.end(i64 8, i8* %179) #1, !dbg !5665
  %180 = bitcast i64* %msg_len to i8*, !dbg !5665
  call void @llvm.lifetime.end(i64 8, i8* %180) #1, !dbg !5665
  %cleanup.dest.181 = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.4

LeafBlock.4:                                      ; preds = %cleanup.178
  %SwitchLeaf5 = icmp eq i32 %cleanup.dest.181, 0
  br i1 %SwitchLeaf5, label %cleanup.cont.182, label %NewDefault.3

cleanup.cont.182:                                 ; preds = %LeafBlock.4
  br label %for.inc.183, !dbg !5666

for.inc.183:                                      ; preds = %cleanup.cont.182
  %181 = load i64, i64* %i, align 8, !dbg !5667, !tbaa !2963
  %inc184 = add i64 %181, 1, !dbg !5667
  store i64 %inc184, i64* %i, align 8, !dbg !5667, !tbaa !2963
  br label %for.cond.129, !dbg !5668

for.end.185:                                      ; preds = %for.cond.129
  store i32 0, i32* %cleanup.dest.slot, !dbg !5669
  br label %cleanup.186, !dbg !5669

NewDefault.3:                                     ; preds = %LeafBlock.4
  br label %cleanup.186

cleanup.186:                                      ; preds = %NewDefault.3, %for.end.185, %if.then.126
  %182 = bitcast %struct.cmsghdr** %cmsgh to i8*, !dbg !5670
  call void @llvm.lifetime.end(i64 8, i8* %182) #1, !dbg !5670
  %cleanup.dest.187 = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock.11

NodeBlock.11:                                     ; preds = %cleanup.186
  %Pivot.12 = icmp slt i32 %cleanup.dest.187, 2
  br i1 %Pivot.12, label %LeafBlock.7, label %LeafBlock.9

LeafBlock.9:                                      ; preds = %NodeBlock.11
  %SwitchLeaf10 = icmp eq i32 %cleanup.dest.187, 2
  br i1 %SwitchLeaf10, label %finally, label %NewDefault.6

LeafBlock.7:                                      ; preds = %NodeBlock.11
  %SwitchLeaf8 = icmp eq i32 %cleanup.dest.187, 0
  br i1 %SwitchLeaf8, label %cleanup.cont.188, label %NewDefault.6

cleanup.cont.188:                                 ; preds = %LeafBlock.7
  br label %if.end.189, !dbg !5672

if.end.189:                                       ; preds = %cleanup.cont.188, %while.end
  %183 = bitcast %struct.timeval* %now to i8*, !dbg !5673
  call void @llvm.lifetime.start(i64 16, i8* %183) #1, !dbg !5673
  call void @llvm.dbg.declare(metadata %struct.timeval* %now, metadata !728, metadata !2310), !dbg !5674
  %184 = bitcast %struct.timeval* %deadline to i8*, !dbg !5673
  call void @llvm.lifetime.start(i64 16, i8* %184) #1, !dbg !5673
  call void @llvm.dbg.declare(metadata %struct.timeval* %deadline, metadata !738, metadata !2310), !dbg !5675
  %185 = bitcast %struct.timeval* %deadline to i8*, !dbg !5675
  call void @llvm.memset.p0i8.i64(i8* %185, i8 0, i64 16, i32 8, i1 false), !dbg !5675
  %186 = bitcast double* %interval to i8*, !dbg !5676
  call void @llvm.lifetime.start(i64 8, i8* %186) #1, !dbg !5676
  call void @llvm.dbg.declare(metadata double* %interval, metadata !739, metadata !2310), !dbg !5677
  %187 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !5678, !tbaa !2326
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %187, i32 0, i32 6, !dbg !5679
  %188 = load double, double* %sock_timeout, align 8, !dbg !5679, !tbaa !3176
  store double %188, double* %interval, align 8, !dbg !5677, !tbaa !3215
  %189 = bitcast i32* %has_timeout to i8*, !dbg !5680
  call void @llvm.lifetime.start(i64 4, i8* %189) #1, !dbg !5680
  call void @llvm.dbg.declare(metadata i32* %has_timeout, metadata !740, metadata !2310), !dbg !5681
  %190 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !5682, !tbaa !2326
  %sock_timeout190 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %190, i32 0, i32 6, !dbg !5683
  %191 = load double, double* %sock_timeout190, align 8, !dbg !5683, !tbaa !3176
  %cmp191 = fcmp ogt double %191, 0.000000e+00, !dbg !5684
  %conv192 = zext i1 %cmp191 to i32, !dbg !5684
  store i32 %conv192, i32* %has_timeout, align 4, !dbg !5681, !tbaa !3034
  %192 = load i32, i32* %has_timeout, align 4, !dbg !5685, !tbaa !3034
  %tobool193 = icmp ne i32 %192, 0, !dbg !5685
  br i1 %tobool193, label %if.then.194, label %if.end.208, !dbg !5687

if.then.194:                                      ; preds = %if.end.189
  call void @_PyTime_gettimeofday(%struct.timeval* %now), !dbg !5688
  %193 = bitcast %struct.timeval* %deadline to i8*, !dbg !5691
  %194 = bitcast %struct.timeval* %now to i8*, !dbg !5691
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %193, i8* %194, i64 16, i32 8, i1 false), !dbg !5691, !tbaa.struct !3228
  br label %do.body, !dbg !5692

do.body:                                          ; preds = %if.then.194
  %195 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !5693, !tbaa !2326
  %sock_timeout195 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %195, i32 0, i32 6, !dbg !5696
  %196 = load double, double* %sock_timeout195, align 8, !dbg !5696, !tbaa !3176
  %conv196 = fptosi double %196 to i64, !dbg !5697
  %conv197 = sitofp i64 %conv196 to double, !dbg !5697
  %197 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !5698, !tbaa !2326
  %sock_timeout198 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %197, i32 0, i32 6, !dbg !5699
  %198 = load double, double* %sock_timeout198, align 8, !dbg !5699, !tbaa !3176
  %sub = fsub double %conv197, %198, !dbg !5700
  %mul199 = fmul double %sub, 1.000000e+06, !dbg !5701
  %conv200 = fptosi double %mul199 to i64, !dbg !5702
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !5703
  %199 = load i64, i64* %tv_usec, align 8, !dbg !5704, !tbaa !3242
  %add201 = add i64 %199, %conv200, !dbg !5704
  store i64 %add201, i64* %tv_usec, align 8, !dbg !5704, !tbaa !3242
  %200 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !5705, !tbaa !2326
  %sock_timeout202 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %200, i32 0, i32 6, !dbg !5706
  %201 = load double, double* %sock_timeout202, align 8, !dbg !5706, !tbaa !3176
  %conv203 = fptosi double %201 to i64, !dbg !5707
  %tv_usec204 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !5708
  %202 = load i64, i64* %tv_usec204, align 8, !dbg !5708, !tbaa !3242
  %div = sdiv i64 %202, 1000000, !dbg !5709
  %add205 = add i64 %conv203, %div, !dbg !5710
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0, !dbg !5711
  %203 = load i64, i64* %tv_sec, align 8, !dbg !5712, !tbaa !3252
  %add206 = add i64 %203, %add205, !dbg !5712
  store i64 %add206, i64* %tv_sec, align 8, !dbg !5712, !tbaa !3252
  %tv_usec207 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !5713
  %204 = load i64, i64* %tv_usec207, align 8, !dbg !5714, !tbaa !3242
  %rem = srem i64 %204, 1000000, !dbg !5714
  store i64 %rem, i64* %tv_usec207, align 8, !dbg !5714, !tbaa !3242
  br label %do.cond, !dbg !5715

do.cond:                                          ; preds = %do.body
  br label %do.end, !dbg !5716

do.end:                                           ; preds = %do.cond
  br label %if.end.208, !dbg !5718

if.end.208:                                       ; preds = %do.end, %if.end.189
  br label %while.cond.209, !dbg !5720

while.cond.209:                                   ; preds = %if.end.232, %if.end.208
  br label %while.body.210, !dbg !5723

while.body.210:                                   ; preds = %while.cond.209
  %call211 = call i32* @__errno_location() #2, !dbg !5726
  store i32 0, i32* %call211, align 4, !dbg !5728, !tbaa !3034
  %205 = bitcast %struct._ts** %_save to i8*, !dbg !5729
  call void @llvm.lifetime.start(i64 8, i8* %205) #1, !dbg !5729
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !741, metadata !2310), !dbg !5730
  %call212 = call %struct._ts* @PyEval_SaveThread(), !dbg !5731
  store %struct._ts* %call212, %struct._ts** %_save, align 8, !dbg !5732, !tbaa !2326
  %206 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !5733, !tbaa !2326
  %207 = load double, double* %interval, align 8, !dbg !5734, !tbaa !3215
  %call213 = call i32 @internal_select_ex(%struct.PySocketSockObject* %206, i32 1, double %207), !dbg !5735
  store i32 %call213, i32* %timeout, align 4, !dbg !5736, !tbaa !3034
  %208 = load i32, i32* %timeout, align 4, !dbg !5737, !tbaa !3034
  %tobool214 = icmp ne i32 %208, 0, !dbg !5737
  br i1 %tobool214, label %if.end.217, label %if.then.215, !dbg !5739

if.then.215:                                      ; preds = %while.body.210
  %209 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !5740, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %209, i32 0, i32 1, !dbg !5741
  %210 = load i32, i32* %sock_fd, align 4, !dbg !5741, !tbaa !2948
  %211 = load i32, i32* %flags, align 4, !dbg !5742, !tbaa !3034
  %call216 = call i64 @sendmsg(i32 %210, %struct.msghdr* %msg, i32 %211), !dbg !5743
  store i64 %call216, i64* %bytes_sent, align 8, !dbg !5744, !tbaa !2963
  br label %if.end.217, !dbg !5745

if.end.217:                                       ; preds = %if.then.215, %while.body.210
  %212 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !5746, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %212), !dbg !5747
  %213 = bitcast %struct._ts** %_save to i8*, !dbg !5748
  call void @llvm.lifetime.end(i64 8, i8* %213) #1, !dbg !5748
  %214 = load i32, i32* %timeout, align 4, !dbg !5749, !tbaa !3034
  %cmp218 = icmp eq i32 %214, 1, !dbg !5751
  br i1 %cmp218, label %if.then.220, label %if.end.221, !dbg !5752

if.then.220:                                      ; preds = %if.end.217
  %215 = load %struct._object*, %struct._object** @socket_timeout, align 8, !dbg !5753, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %215, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.300, i32 0, i32 0)), !dbg !5755
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.244, !dbg !5756

if.end.221:                                       ; preds = %if.end.217
  %216 = load i32, i32* %has_timeout, align 4, !dbg !5757, !tbaa !3034
  %tobool222 = icmp ne i32 %216, 0, !dbg !5757
  br i1 %tobool222, label %lor.lhs.false.223, label %if.then.231, !dbg !5759

lor.lhs.false.223:                                ; preds = %if.end.221
  %call224 = call i32* @__errno_location() #2, !dbg !5760
  %217 = load i32, i32* %call224, align 4, !dbg !5762, !tbaa !3034
  %cmp225 = icmp eq i32 %217, 11, !dbg !5763
  br i1 %cmp225, label %if.end.232, label %land.lhs.true.227, !dbg !5764

land.lhs.true.227:                                ; preds = %lor.lhs.false.223
  %call228 = call i32* @__errno_location() #2, !dbg !5765
  %218 = load i32, i32* %call228, align 4, !dbg !5767, !tbaa !3034
  %cmp229 = icmp eq i32 %218, 11, !dbg !5768
  br i1 %cmp229, label %if.end.232, label %if.then.231, !dbg !5769

if.then.231:                                      ; preds = %land.lhs.true.227, %if.end.221
  br label %while.end.243, !dbg !5770

if.end.232:                                       ; preds = %land.lhs.true.227, %lor.lhs.false.223
  call void @_PyTime_gettimeofday(%struct.timeval* %now), !dbg !5773
  %tv_sec233 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0, !dbg !5776
  %219 = load i64, i64* %tv_sec233, align 8, !dbg !5776, !tbaa !3252
  %tv_sec234 = getelementptr inbounds %struct.timeval, %struct.timeval* %now, i32 0, i32 0, !dbg !5777
  %220 = load i64, i64* %tv_sec234, align 8, !dbg !5777, !tbaa !3252
  %sub235 = sub i64 %219, %220, !dbg !5778
  %conv236 = sitofp i64 %sub235 to double, !dbg !5779
  %tv_usec237 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !5780
  %221 = load i64, i64* %tv_usec237, align 8, !dbg !5780, !tbaa !3242
  %tv_usec238 = getelementptr inbounds %struct.timeval, %struct.timeval* %now, i32 0, i32 1, !dbg !5781
  %222 = load i64, i64* %tv_usec238, align 8, !dbg !5781, !tbaa !3242
  %sub239 = sub i64 %221, %222, !dbg !5782
  %conv240 = sitofp i64 %sub239 to double, !dbg !5783
  %mul241 = fmul double %conv240, 1.000000e-06, !dbg !5784
  %add242 = fadd double %conv236, %mul241, !dbg !5785
  store double %add242, double* %interval, align 8, !dbg !5786, !tbaa !3215
  br label %while.cond.209, !dbg !5787

while.end.243:                                    ; preds = %if.then.231
  store i32 0, i32* %cleanup.dest.slot, !dbg !5788
  br label %cleanup.244, !dbg !5788

cleanup.244:                                      ; preds = %while.end.243, %if.then.220
  %223 = bitcast i32* %has_timeout to i8*, !dbg !5790
  call void @llvm.lifetime.end(i64 4, i8* %223) #1, !dbg !5790
  %224 = bitcast double* %interval to i8*, !dbg !5790
  call void @llvm.lifetime.end(i64 8, i8* %224) #1, !dbg !5790
  %225 = bitcast %struct.timeval* %deadline to i8*, !dbg !5790
  call void @llvm.lifetime.end(i64 16, i8* %225) #1, !dbg !5790
  %226 = bitcast %struct.timeval* %now to i8*, !dbg !5790
  call void @llvm.lifetime.end(i64 16, i8* %226) #1, !dbg !5790
  %cleanup.dest.248 = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock.18

NodeBlock.18:                                     ; preds = %cleanup.244
  %Pivot.19 = icmp slt i32 %cleanup.dest.248, 2
  br i1 %Pivot.19, label %LeafBlock.14, label %LeafBlock.16

LeafBlock.16:                                     ; preds = %NodeBlock.18
  %SwitchLeaf17 = icmp eq i32 %cleanup.dest.248, 2
  br i1 %SwitchLeaf17, label %finally, label %NewDefault.13

LeafBlock.14:                                     ; preds = %NodeBlock.18
  %SwitchLeaf15 = icmp eq i32 %cleanup.dest.248, 0
  br i1 %SwitchLeaf15, label %cleanup.cont.249, label %NewDefault.13

cleanup.cont.249:                                 ; preds = %LeafBlock.14
  %227 = load i64, i64* %bytes_sent, align 8, !dbg !5792, !tbaa !2963
  %cmp250 = icmp slt i64 %227, 0, !dbg !5794
  br i1 %cmp250, label %if.then.252, label %if.end.254, !dbg !5795

if.then.252:                                      ; preds = %cleanup.cont.249
  %228 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !5796, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %228, i32 0, i32 5, !dbg !5798
  %229 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !5798, !tbaa !3181
  %call253 = call %struct._object* %229(), !dbg !5796
  br label %finally, !dbg !5799

if.end.254:                                       ; preds = %cleanup.cont.249
  %230 = load i64, i64* %bytes_sent, align 8, !dbg !5800, !tbaa !2963
  %call255 = call %struct._object* @PyLong_FromSsize_t(i64 %230), !dbg !5801
  store %struct._object* %call255, %struct._object** %retval1, align 8, !dbg !5802, !tbaa !2326
  br label %finally, !dbg !5803

finally:                                          ; preds = %LeafBlock.16, %LeafBlock.9, %LeafBlock.1, %if.end.254, %if.then.252, %if.then.85, %if.then.62, %if.then.52, %if.then.35, %if.then.16, %if.then.11, %if.then.6
  %231 = load i8*, i8** %controlbuf, align 8, !dbg !5804, !tbaa !2326
  call void @PyMem_Free(i8* %231), !dbg !5805
  store i64 0, i64* %i, align 8, !dbg !5806, !tbaa !2963
  br label %for.cond.256, !dbg !5808

for.cond.256:                                     ; preds = %for.inc.262, %finally
  %232 = load i64, i64* %i, align 8, !dbg !5809, !tbaa !2963
  %233 = load i64, i64* %ncmsgbufs, align 8, !dbg !5813, !tbaa !2963
  %cmp257 = icmp slt i64 %232, %233, !dbg !5814
  br i1 %cmp257, label %for.body.259, label %for.end.264, !dbg !5815

for.body.259:                                     ; preds = %for.cond.256
  %234 = load i64, i64* %i, align 8, !dbg !5816, !tbaa !2963
  %235 = load %struct.cmsginfo*, %struct.cmsginfo** %cmsgs, align 8, !dbg !5817, !tbaa !2326
  %arrayidx260 = getelementptr %struct.cmsginfo, %struct.cmsginfo* %235, i64 %234, !dbg !5817
  %data261 = getelementptr inbounds %struct.cmsginfo, %struct.cmsginfo* %arrayidx260, i32 0, i32 2, !dbg !5818
  call void @PyBuffer_Release(%struct.bufferinfo* %data261), !dbg !5819
  br label %for.inc.262, !dbg !5819

for.inc.262:                                      ; preds = %for.body.259
  %236 = load i64, i64* %i, align 8, !dbg !5820, !tbaa !2963
  %inc263 = add i64 %236, 1, !dbg !5820
  store i64 %inc263, i64* %i, align 8, !dbg !5820, !tbaa !2963
  br label %for.cond.256, !dbg !5821

for.end.264:                                      ; preds = %for.cond.256
  %237 = load %struct.cmsginfo*, %struct.cmsginfo** %cmsgs, align 8, !dbg !5822, !tbaa !2326
  %238 = bitcast %struct.cmsginfo* %237 to i8*, !dbg !5822
  call void @PyMem_Free(i8* %238), !dbg !5823
  br label %do.body.265, !dbg !5824

do.body.265:                                      ; preds = %for.end.264
  %239 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !5825
  call void @llvm.lifetime.start(i64 8, i8* %239) #1, !dbg !5825
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !802, metadata !2310), !dbg !5827
  %240 = load %struct._object*, %struct._object** %cmsg_fast, align 8, !dbg !5828, !tbaa !2326
  store %struct._object* %240, %struct._object** %_py_xdecref_tmp, align 8, !dbg !5827, !tbaa !2326
  %241 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !5829, !tbaa !2326
  %cmp266 = icmp ne %struct._object* %241, null, !dbg !5830
  br i1 %cmp266, label %if.then.268, label %if.end.278, !dbg !5831

if.then.268:                                      ; preds = %do.body.265
  br label %do.body.269, !dbg !5832

do.body.269:                                      ; preds = %if.then.268
  %242 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5834
  call void @llvm.lifetime.start(i64 8, i8* %242) #1, !dbg !5834
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !804, metadata !2310), !dbg !5836
  %243 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !5837, !tbaa !2326
  store %struct._object* %243, %struct._object** %_py_decref_tmp, align 8, !dbg !5836, !tbaa !2326
  %244 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5838, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %244, i32 0, i32 0, !dbg !5840
  %245 = load i64, i64* %ob_refcnt, align 8, !dbg !5841, !tbaa !2335
  %dec = add i64 %245, -1, !dbg !5841
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !5841, !tbaa !2335
  %cmp270 = icmp ne i64 %dec, 0, !dbg !5842
  br i1 %cmp270, label %if.then.272, label %if.else.273, !dbg !5843

if.then.272:                                      ; preds = %do.body.269
  br label %if.end.275, !dbg !5844

if.else.273:                                      ; preds = %do.body.269
  %246 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5846, !tbaa !2326
  %ob_type274 = getelementptr inbounds %struct._object, %struct._object* %246, i32 0, i32 1, !dbg !5848
  %247 = load %struct._typeobject*, %struct._typeobject** %ob_type274, align 8, !dbg !5848, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %247, i32 0, i32 4, !dbg !5849
  %248 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !5849, !tbaa !3442
  %249 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !5850, !tbaa !2326
  call void %248(%struct._object* %249), !dbg !5851
  br label %if.end.275

if.end.275:                                       ; preds = %if.else.273, %if.then.272
  %250 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !5852
  call void @llvm.lifetime.end(i64 8, i8* %250) #1, !dbg !5852
  br label %do.cond.276, !dbg !5854

do.cond.276:                                      ; preds = %if.end.275
  br label %do.end.277, !dbg !5855

do.end.277:                                       ; preds = %do.cond.276
  br label %if.end.278, !dbg !5857

if.end.278:                                       ; preds = %do.end.277, %do.body.265
  %251 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !5859
  call void @llvm.lifetime.end(i64 8, i8* %251) #1, !dbg !5859
  br label %do.cond.279, !dbg !5861

do.cond.279:                                      ; preds = %if.end.278
  br label %do.end.280, !dbg !5862

do.end.280:                                       ; preds = %do.cond.279
  store i64 0, i64* %i, align 8, !dbg !5864, !tbaa !2963
  br label %for.cond.281, !dbg !5866

for.cond.281:                                     ; preds = %for.inc.286, %do.end.280
  %252 = load i64, i64* %i, align 8, !dbg !5867, !tbaa !2963
  %253 = load i64, i64* %ndatabufs, align 8, !dbg !5871, !tbaa !2963
  %cmp282 = icmp slt i64 %252, %253, !dbg !5872
  br i1 %cmp282, label %for.body.284, label %for.end.288, !dbg !5873

for.body.284:                                     ; preds = %for.cond.281
  %254 = load i64, i64* %i, align 8, !dbg !5874, !tbaa !2963
  %255 = load %struct.bufferinfo*, %struct.bufferinfo** %databufs, align 8, !dbg !5875, !tbaa !2326
  %arrayidx285 = getelementptr %struct.bufferinfo, %struct.bufferinfo* %255, i64 %254, !dbg !5875
  call void @PyBuffer_Release(%struct.bufferinfo* %arrayidx285), !dbg !5876
  br label %for.inc.286, !dbg !5876

for.inc.286:                                      ; preds = %for.body.284
  %256 = load i64, i64* %i, align 8, !dbg !5877, !tbaa !2963
  %inc287 = add i64 %256, 1, !dbg !5877
  store i64 %inc287, i64* %i, align 8, !dbg !5877, !tbaa !2963
  br label %for.cond.281, !dbg !5878

for.end.288:                                      ; preds = %for.cond.281
  %257 = load %struct.bufferinfo*, %struct.bufferinfo** %databufs, align 8, !dbg !5879, !tbaa !2326
  %258 = bitcast %struct.bufferinfo* %257 to i8*, !dbg !5879
  call void @PyMem_Free(i8* %258), !dbg !5880
  %259 = load %struct.iovec*, %struct.iovec** %iovs, align 8, !dbg !5881, !tbaa !2326
  %260 = bitcast %struct.iovec* %259 to i8*, !dbg !5881
  call void @PyMem_Free(i8* %260), !dbg !5882
  br label %do.body.289, !dbg !5883

do.body.289:                                      ; preds = %for.end.288
  %261 = bitcast %struct._object** %_py_xdecref_tmp290 to i8*, !dbg !5884
  call void @llvm.lifetime.start(i64 8, i8* %261) #1, !dbg !5884
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp290, metadata !807, metadata !2310), !dbg !5886
  %262 = load %struct._object*, %struct._object** %data_fast, align 8, !dbg !5887, !tbaa !2326
  store %struct._object* %262, %struct._object** %_py_xdecref_tmp290, align 8, !dbg !5886, !tbaa !2326
  %263 = load %struct._object*, %struct._object** %_py_xdecref_tmp290, align 8, !dbg !5888, !tbaa !2326
  %cmp291 = icmp ne %struct._object* %263, null, !dbg !5889
  br i1 %cmp291, label %if.then.293, label %if.end.307, !dbg !5890

if.then.293:                                      ; preds = %do.body.289
  br label %do.body.294, !dbg !5891

do.body.294:                                      ; preds = %if.then.293
  %264 = bitcast %struct._object** %_py_decref_tmp295 to i8*, !dbg !5893
  call void @llvm.lifetime.start(i64 8, i8* %264) #1, !dbg !5893
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp295, metadata !809, metadata !2310), !dbg !5895
  %265 = load %struct._object*, %struct._object** %_py_xdecref_tmp290, align 8, !dbg !5896, !tbaa !2326
  store %struct._object* %265, %struct._object** %_py_decref_tmp295, align 8, !dbg !5895, !tbaa !2326
  %266 = load %struct._object*, %struct._object** %_py_decref_tmp295, align 8, !dbg !5897, !tbaa !2326
  %ob_refcnt296 = getelementptr inbounds %struct._object, %struct._object* %266, i32 0, i32 0, !dbg !5899
  %267 = load i64, i64* %ob_refcnt296, align 8, !dbg !5900, !tbaa !2335
  %dec297 = add i64 %267, -1, !dbg !5900
  store i64 %dec297, i64* %ob_refcnt296, align 8, !dbg !5900, !tbaa !2335
  %cmp298 = icmp ne i64 %dec297, 0, !dbg !5901
  br i1 %cmp298, label %if.then.300, label %if.else.301, !dbg !5902

if.then.300:                                      ; preds = %do.body.294
  br label %if.end.304, !dbg !5903

if.else.301:                                      ; preds = %do.body.294
  %268 = load %struct._object*, %struct._object** %_py_decref_tmp295, align 8, !dbg !5905, !tbaa !2326
  %ob_type302 = getelementptr inbounds %struct._object, %struct._object* %268, i32 0, i32 1, !dbg !5907
  %269 = load %struct._typeobject*, %struct._typeobject** %ob_type302, align 8, !dbg !5907, !tbaa !2318
  %tp_dealloc303 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %269, i32 0, i32 4, !dbg !5908
  %270 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc303, align 8, !dbg !5908, !tbaa !3442
  %271 = load %struct._object*, %struct._object** %_py_decref_tmp295, align 8, !dbg !5909, !tbaa !2326
  call void %270(%struct._object* %271), !dbg !5910
  br label %if.end.304

if.end.304:                                       ; preds = %if.else.301, %if.then.300
  %272 = bitcast %struct._object** %_py_decref_tmp295 to i8*, !dbg !5911
  call void @llvm.lifetime.end(i64 8, i8* %272) #1, !dbg !5911
  br label %do.cond.305, !dbg !5913

do.cond.305:                                      ; preds = %if.end.304
  br label %do.end.306, !dbg !5914

do.end.306:                                       ; preds = %do.cond.305
  br label %if.end.307, !dbg !5916

if.end.307:                                       ; preds = %do.end.306, %do.body.289
  %273 = bitcast %struct._object** %_py_xdecref_tmp290 to i8*, !dbg !5918
  call void @llvm.lifetime.end(i64 8, i8* %273) #1, !dbg !5918
  br label %do.cond.308, !dbg !5919

do.cond.308:                                      ; preds = %if.end.307
  br label %do.end.309, !dbg !5920

do.end.309:                                       ; preds = %do.cond.308
  %274 = load %struct._object*, %struct._object** %retval1, align 8, !dbg !5922, !tbaa !2326
  store %struct._object* %274, %struct._object** %retval, !dbg !5923
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.310, !dbg !5923

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %cleanup.310

NewDefault.6:                                     ; preds = %LeafBlock.9, %LeafBlock.7
  br label %cleanup.310

NewDefault.13:                                    ; preds = %LeafBlock.16, %LeafBlock.14
  br label %cleanup.310

cleanup.310:                                      ; preds = %NewDefault.13, %NewDefault.6, %NewDefault, %do.end.309, %if.then
  %275 = bitcast %struct._object** %retval1 to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %275) #1, !dbg !5924
  %276 = bitcast %struct._object** %cmsg_fast to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %276) #1, !dbg !5924
  %277 = bitcast %struct._object** %data_fast to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %277) #1, !dbg !5924
  %278 = bitcast %struct._object** %addr_arg to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %278) #1, !dbg !5924
  %279 = bitcast %struct._object** %cmsg_arg to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %279) #1, !dbg !5924
  %280 = bitcast %struct._object** %data_arg to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %280) #1, !dbg !5924
  %281 = bitcast i32* %flags to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 4, i8* %281) #1, !dbg !5924
  %282 = bitcast i32* %timeout to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 4, i8* %282) #1, !dbg !5924
  %283 = bitcast i32* %addrlen to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 4, i8* %283) #1, !dbg !5924
  %284 = bitcast i64* %bytes_sent to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %284) #1, !dbg !5924
  %285 = bitcast i64* %controllen_last to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %285) #1, !dbg !5924
  %286 = bitcast i64* %controllen to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %286) #1, !dbg !5924
  %287 = bitcast i8** %controlbuf to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %287) #1, !dbg !5924
  %288 = bitcast %struct.cmsginfo** %cmsgs to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %288) #1, !dbg !5924
  %289 = bitcast %struct.msghdr* %msg to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 56, i8* %289) #1, !dbg !5924
  %290 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 128, i8* %290) #1, !dbg !5924
  %291 = bitcast %struct.iovec** %iovs to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %291) #1, !dbg !5924
  %292 = bitcast %struct.bufferinfo** %databufs to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %292) #1, !dbg !5924
  %293 = bitcast i64* %ncmsgbufs to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %293) #1, !dbg !5924
  %294 = bitcast i64* %ncmsgs to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %294) #1, !dbg !5924
  %295 = bitcast i64* %ndatabufs to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %295) #1, !dbg !5924
  %296 = bitcast i64* %ndataparts to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %296) #1, !dbg !5924
  %297 = bitcast i64* %i to i8*, !dbg !5924
  call void @llvm.lifetime.end(i64 8, i8* %297) #1, !dbg !5924
  %298 = load %struct._object*, %struct._object** %retval, !dbg !5924
  ret %struct._object* %298, !dbg !5924
}

; Function Attrs: nounwind uwtable
define internal i32 @getsockaddrlen(%struct.PySocketSockObject* %s, i32* %len_ret) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %len_ret.addr = alloca i32*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !874, metadata !2310), !dbg !5925
  store i32* %len_ret, i32** %len_ret.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata i32** %len_ret.addr, metadata !875, metadata !2310), !dbg !5926
  %0 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !5927, !tbaa !2326
  %sock_family = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %0, i32 0, i32 2, !dbg !5928
  %1 = load i32, i32* %sock_family, align 4, !dbg !5928, !tbaa !3014
  br label %NodeBlock.21

NodeBlock.21:                                     ; preds = %entry
  %Pivot.22 = icmp slt i32 %1, 17
  br i1 %Pivot.22, label %NodeBlock.7, label %NodeBlock.19

NodeBlock.19:                                     ; preds = %NodeBlock.21
  %Pivot.20 = icmp slt i32 %1, 29
  br i1 %Pivot.20, label %NodeBlock.13, label %NodeBlock.17

NodeBlock.17:                                     ; preds = %NodeBlock.19
  %Pivot.18 = icmp slt i32 %1, 30
  br i1 %Pivot.18, label %sw.bb.6, label %LeafBlock.15

LeafBlock.15:                                     ; preds = %NodeBlock.17
  %SwitchLeaf16 = icmp eq i32 %1, 30
  br i1 %SwitchLeaf16, label %sw.bb.5, label %NewDefault

NodeBlock.13:                                     ; preds = %NodeBlock.19
  %Pivot.14 = icmp slt i32 %1, 21
  br i1 %Pivot.14, label %LeafBlock.9, label %LeafBlock.11

LeafBlock.11:                                     ; preds = %NodeBlock.13
  %SwitchLeaf12 = icmp eq i32 %1, 21
  br i1 %SwitchLeaf12, label %sw.bb.2, label %NewDefault

LeafBlock.9:                                      ; preds = %NodeBlock.13
  %SwitchLeaf10 = icmp eq i32 %1, 17
  br i1 %SwitchLeaf10, label %sw.bb.4, label %NewDefault

NodeBlock.7:                                      ; preds = %NodeBlock.21
  %Pivot.8 = icmp slt i32 %1, 10
  br i1 %Pivot.8, label %NodeBlock, label %NodeBlock.5

NodeBlock.5:                                      ; preds = %NodeBlock.7
  %Pivot.6 = icmp slt i32 %1, 16
  br i1 %Pivot.6, label %LeafBlock.3, label %sw.bb.1

LeafBlock.3:                                      ; preds = %NodeBlock.5
  %SwitchLeaf4 = icmp eq i32 %1, 10
  br i1 %SwitchLeaf4, label %sw.bb.3, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock.7
  %Pivot = icmp slt i32 %1, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %1, 2
  br i1 %SwitchLeaf2, label %sw.bb.2, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %1, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %2 = load i32*, i32** %len_ret.addr, align 8, !dbg !5929, !tbaa !2326
  store i32 110, i32* %2, align 4, !dbg !5932, !tbaa !3034
  store i32 1, i32* %retval, !dbg !5933
  br label %return, !dbg !5933

sw.bb.1:                                          ; preds = %NodeBlock.5
  %3 = load i32*, i32** %len_ret.addr, align 8, !dbg !5934, !tbaa !2326
  store i32 12, i32* %3, align 4, !dbg !5936, !tbaa !3034
  store i32 1, i32* %retval, !dbg !5937
  br label %return, !dbg !5937

sw.bb.2:                                          ; preds = %LeafBlock.11, %LeafBlock.1
  %4 = load i32*, i32** %len_ret.addr, align 8, !dbg !5938, !tbaa !2326
  store i32 16, i32* %4, align 4, !dbg !5940, !tbaa !3034
  store i32 1, i32* %retval, !dbg !5941
  br label %return, !dbg !5941

sw.bb.3:                                          ; preds = %LeafBlock.3
  %5 = load i32*, i32** %len_ret.addr, align 8, !dbg !5942, !tbaa !2326
  store i32 28, i32* %5, align 4, !dbg !5944, !tbaa !3034
  store i32 1, i32* %retval, !dbg !5945
  br label %return, !dbg !5945

sw.bb.4:                                          ; preds = %LeafBlock.9
  %6 = load i32*, i32** %len_ret.addr, align 8, !dbg !5946, !tbaa !2326
  store i32 20, i32* %6, align 4, !dbg !5948, !tbaa !3034
  store i32 1, i32* %retval, !dbg !5949
  br label %return, !dbg !5949

sw.bb.5:                                          ; preds = %LeafBlock.15
  %7 = load i32*, i32** %len_ret.addr, align 8, !dbg !5950, !tbaa !2326
  store i32 16, i32* %7, align 4, !dbg !5952, !tbaa !3034
  store i32 1, i32* %retval, !dbg !5953
  br label %return, !dbg !5953

sw.bb.6:                                          ; preds = %NodeBlock.17
  %8 = load i32*, i32** %len_ret.addr, align 8, !dbg !5954, !tbaa !2326
  store i32 16, i32* %8, align 4, !dbg !5956, !tbaa !3034
  store i32 1, i32* %retval, !dbg !5957
  br label %return, !dbg !5957

NewDefault:                                       ; preds = %LeafBlock.15, %LeafBlock.11, %LeafBlock.9, %LeafBlock.3, %LeafBlock.1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  %9 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !5958, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %9, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.301, i32 0, i32 0)), !dbg !5959
  store i32 0, i32* %retval, !dbg !5960
  br label %return, !dbg !5960

return:                                           ; preds = %sw.default, %sw.bb.6, %sw.bb.5, %sw.bb.4, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %10 = load i32, i32* %retval, !dbg !5961
  ret i32 %10, !dbg !5961
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #1

declare void @_PyTime_gettimeofday(%struct.timeval*) #3

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #4

declare %struct._ts* @PyEval_SaveThread() #3

; Function Attrs: nounwind uwtable
define internal i32 @internal_select_ex(%struct.PySocketSockObject* %s, i32 %writing, double %interval) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %writing.addr = alloca i32, align 4
  %interval.addr = alloca double, align 8
  %n = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %pollfd = alloca %struct.pollfd, align 4
  %timeout = alloca i32, align 4
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !880, metadata !2310), !dbg !5962
  store i32 %writing, i32* %writing.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %writing.addr, metadata !881, metadata !2310), !dbg !5963
  store double %interval, double* %interval.addr, align 8, !tbaa !3215
  call void @llvm.dbg.declare(metadata double* %interval.addr, metadata !882, metadata !2310), !dbg !5964
  %0 = bitcast i32* %n to i8*, !dbg !5965
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !5965
  call void @llvm.dbg.declare(metadata i32* %n, metadata !883, metadata !2310), !dbg !5966
  %1 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !5967, !tbaa !2326
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %1, i32 0, i32 6, !dbg !5969
  %2 = load double, double* %sock_timeout, align 8, !dbg !5969, !tbaa !3176
  %cmp = fcmp ole double %2, 0.000000e+00, !dbg !5970
  br i1 %cmp, label %if.then, label %if.end, !dbg !5971

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !5972
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5972

if.end:                                           ; preds = %entry
  %3 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !5973, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %3, i32 0, i32 1, !dbg !5975
  %4 = load i32, i32* %sock_fd, align 4, !dbg !5975, !tbaa !2948
  %cmp1 = icmp slt i32 %4, 0, !dbg !5976
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !5977

if.then.2:                                        ; preds = %if.end
  store i32 0, i32* %retval, !dbg !5978
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5978

if.end.3:                                         ; preds = %if.end
  %5 = load double, double* %interval.addr, align 8, !dbg !5979, !tbaa !3215
  %cmp4 = fcmp olt double %5, 0.000000e+00, !dbg !5981
  br i1 %cmp4, label %if.then.5, label %if.end.6, !dbg !5982

if.then.5:                                        ; preds = %if.end.3
  store i32 1, i32* %retval, !dbg !5983
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !5983

if.end.6:                                         ; preds = %if.end.3
  %6 = bitcast %struct.pollfd* %pollfd to i8*, !dbg !5984
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !5984
  call void @llvm.dbg.declare(metadata %struct.pollfd* %pollfd, metadata !884, metadata !2310), !dbg !5985
  %7 = bitcast i32* %timeout to i8*, !dbg !5986
  call void @llvm.lifetime.start(i64 4, i8* %7) #1, !dbg !5986
  call void @llvm.dbg.declare(metadata i32* %timeout, metadata !892, metadata !2310), !dbg !5987
  %8 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !5988, !tbaa !2326
  %sock_fd7 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %8, i32 0, i32 1, !dbg !5989
  %9 = load i32, i32* %sock_fd7, align 4, !dbg !5989, !tbaa !2948
  %fd = getelementptr inbounds %struct.pollfd, %struct.pollfd* %pollfd, i32 0, i32 0, !dbg !5990
  store i32 %9, i32* %fd, align 4, !dbg !5991, !tbaa !5992
  %10 = load i32, i32* %writing.addr, align 4, !dbg !5995, !tbaa !3034
  %tobool = icmp ne i32 %10, 0, !dbg !5995
  %cond = select i1 %tobool, i32 4, i32 1, !dbg !5995
  %conv = trunc i32 %cond to i16, !dbg !5995
  %events = getelementptr inbounds %struct.pollfd, %struct.pollfd* %pollfd, i32 0, i32 1, !dbg !5996
  store i16 %conv, i16* %events, align 2, !dbg !5997, !tbaa !5998
  %11 = load double, double* %interval.addr, align 8, !dbg !5999, !tbaa !3215
  %mul = fmul double %11, 1.000000e+03, !dbg !6000
  %add = fadd double %mul, 5.000000e-01, !dbg !6001
  %conv8 = fptosi double %add to i32, !dbg !6002
  store i32 %conv8, i32* %timeout, align 4, !dbg !6003, !tbaa !3034
  %12 = load i32, i32* %timeout, align 4, !dbg !6004, !tbaa !3034
  %call = call i32 @poll(%struct.pollfd* %pollfd, i64 1, i32 %12), !dbg !6005
  store i32 %call, i32* %n, align 4, !dbg !6006, !tbaa !3034
  %13 = bitcast i32* %timeout to i8*, !dbg !6007
  call void @llvm.lifetime.end(i64 4, i8* %13) #1, !dbg !6007
  %14 = bitcast %struct.pollfd* %pollfd to i8*, !dbg !6007
  call void @llvm.lifetime.end(i64 8, i8* %14) #1, !dbg !6007
  %15 = load i32, i32* %n, align 4, !dbg !6008, !tbaa !3034
  %cmp9 = icmp slt i32 %15, 0, !dbg !6010
  br i1 %cmp9, label %if.then.11, label %if.end.12, !dbg !6011

if.then.11:                                       ; preds = %if.end.6
  store i32 -1, i32* %retval, !dbg !6012
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6012

if.end.12:                                        ; preds = %if.end.6
  %16 = load i32, i32* %n, align 4, !dbg !6013, !tbaa !3034
  %cmp13 = icmp eq i32 %16, 0, !dbg !6015
  br i1 %cmp13, label %if.then.15, label %if.end.16, !dbg !6016

if.then.15:                                       ; preds = %if.end.12
  store i32 1, i32* %retval, !dbg !6017
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6017

if.end.16:                                        ; preds = %if.end.12
  store i32 0, i32* %retval, !dbg !6018
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6018

cleanup:                                          ; preds = %if.end.16, %if.then.15, %if.then.11, %if.then.5, %if.then.2, %if.then
  %17 = bitcast i32* %n to i8*, !dbg !6019
  call void @llvm.lifetime.end(i64 4, i8* %17) #1, !dbg !6019
  %18 = load i32, i32* %retval, !dbg !6019
  ret i32 %18, !dbg !6019
}

declare i32 @accept4(i32, %struct.sockaddr*, i32*, i32) #3

declare i32 @accept(i32, %struct.sockaddr*, i32*) #3

declare void @PyEval_RestoreThread(%struct._ts*) #3

declare void @PyErr_SetString(%struct._object*, i8*) #3

declare i32 @_Py_set_inheritable(i32, i32, i32*) #3

declare %struct._object* @PyLong_FromLong(i64) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @makesockaddr(i32 %sockfd, %struct.sockaddr* %addr, i64 %addrlen, i32 %proto) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %sockfd.addr = alloca i32, align 4
  %addr.addr = alloca %struct.sockaddr*, align 8
  %addrlen.addr = alloca i64, align 8
  %proto.addr = alloca i32, align 4
  %a = alloca %struct.sockaddr_in*, align 8
  %addrobj = alloca %struct._object*, align 8
  %ret = alloca %struct._object*, align 8
  %__v = alloca i16, align 2
  %__x = alloca i16, align 2
  %tmp = alloca i16, align 2
  %_py_decref_tmp = alloca %struct._object*, align 8
  %a12 = alloca %struct.sockaddr_un*, align 8
  %cleanup.dest.slot = alloca i32
  %a25 = alloca %struct.sockaddr_nl*, align 8
  %a30 = alloca %struct.sockaddr_in6*, align 8
  %addrobj32 = alloca %struct._object*, align 8
  %ret35 = alloca %struct._object*, align 8
  %__v39 = alloca i16, align 2
  %__x41 = alloca i16, align 2
  %tmp42 = alloca i16, align 2
  %__v45 = alloca i32, align 4
  %__x47 = alloca i32, align 4
  %tmp48 = alloca i32, align 4
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %a70 = alloca %struct.sockaddr_ll*, align 8
  %ifname = alloca i8*, align 8
  %ifr = alloca %struct.ifreq, align 8
  %__v84 = alloca i16, align 2
  %__x86 = alloca i16, align 2
  %tmp87 = alloca i16, align 2
  %a99 = alloca %struct.sockaddr_tipc*, align 8
  %a152 = alloca %struct.sockaddr_can*, align 8
  %ifname154 = alloca i8*, align 8
  %ifr156 = alloca %struct.ifreq, align 8
  store i32 %sockfd, i32* %sockfd.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %sockfd.addr, metadata !897, metadata !2310), !dbg !6020
  store %struct.sockaddr* %addr, %struct.sockaddr** %addr.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.sockaddr** %addr.addr, metadata !898, metadata !2310), !dbg !6021
  store i64 %addrlen, i64* %addrlen.addr, align 8, !tbaa !2963
  call void @llvm.dbg.declare(metadata i64* %addrlen.addr, metadata !899, metadata !2310), !dbg !6022
  store i32 %proto, i32* %proto.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %proto.addr, metadata !900, metadata !2310), !dbg !6023
  %0 = load i64, i64* %addrlen.addr, align 8, !dbg !6024, !tbaa !2963
  %cmp = icmp eq i64 %0, 0, !dbg !6026
  br i1 %cmp, label %if.then, label %if.end, !dbg !6027

if.then:                                          ; preds = %entry
  %1 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6028, !tbaa !2335
  %inc = add i64 %1, 1, !dbg !6028
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !6028, !tbaa !2335
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !6030
  br label %return, !dbg !6030

if.end:                                           ; preds = %entry
  %2 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !6031, !tbaa !2326
  %sa_family = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %2, i32 0, i32 0, !dbg !6032
  %3 = load i16, i16* %sa_family, align 2, !dbg !6032, !tbaa !6033
  %conv = zext i16 %3 to i32, !dbg !6031
  br label %NodeBlock.17

NodeBlock.17:                                     ; preds = %if.end
  %Pivot.18 = icmp slt i32 %conv, 16
  br i1 %Pivot.18, label %NodeBlock.5, label %NodeBlock.15

NodeBlock.15:                                     ; preds = %NodeBlock.17
  %Pivot.16 = icmp slt i32 %conv, 29
  br i1 %Pivot.16, label %NodeBlock.9, label %NodeBlock.13

NodeBlock.13:                                     ; preds = %NodeBlock.15
  %Pivot.14 = icmp slt i32 %conv, 30
  br i1 %Pivot.14, label %sw.bb.150, label %LeafBlock.11

LeafBlock.11:                                     ; preds = %NodeBlock.13
  %SwitchLeaf12 = icmp eq i32 %conv, 30
  br i1 %SwitchLeaf12, label %sw.bb.97, label %NewDefault

NodeBlock.9:                                      ; preds = %NodeBlock.15
  %Pivot.10 = icmp slt i32 %conv, 17
  br i1 %Pivot.10, label %sw.bb.23, label %LeafBlock.7

LeafBlock.7:                                      ; preds = %NodeBlock.9
  %SwitchLeaf8 = icmp eq i32 %conv, 17
  br i1 %SwitchLeaf8, label %sw.bb.68, label %NewDefault

NodeBlock.5:                                      ; preds = %NodeBlock.17
  %Pivot.6 = icmp slt i32 %conv, 2
  br i1 %Pivot.6, label %LeafBlock, label %NodeBlock

NodeBlock:                                        ; preds = %NodeBlock.5
  %Pivot = icmp slt i32 %conv, 10
  br i1 %Pivot, label %LeafBlock.1, label %LeafBlock.3

LeafBlock.3:                                      ; preds = %NodeBlock
  %SwitchLeaf4 = icmp eq i32 %conv, 10
  br i1 %SwitchLeaf4, label %sw.bb.28, label %NewDefault

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %conv, 2
  br i1 %SwitchLeaf2, label %sw.bb, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock.5
  %SwitchLeaf = icmp eq i32 %conv, 1
  br i1 %SwitchLeaf, label %sw.bb.10, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock.1
  %4 = bitcast %struct.sockaddr_in** %a to i8*, !dbg !6035
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !6035
  call void @llvm.dbg.declare(metadata %struct.sockaddr_in** %a, metadata !901, metadata !2310), !dbg !6036
  %5 = bitcast %struct._object** %addrobj to i8*, !dbg !6037
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !6037
  call void @llvm.dbg.declare(metadata %struct._object** %addrobj, metadata !904, metadata !2310), !dbg !6038
  %6 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !6039, !tbaa !2326
  %call = call %struct._object* @makeipaddr(%struct.sockaddr* %6, i32 16), !dbg !6040
  store %struct._object* %call, %struct._object** %addrobj, align 8, !dbg !6038, !tbaa !2326
  %7 = bitcast %struct._object** %ret to i8*, !dbg !6041
  call void @llvm.lifetime.start(i64 8, i8* %7) #1, !dbg !6041
  call void @llvm.dbg.declare(metadata %struct._object** %ret, metadata !905, metadata !2310), !dbg !6042
  store %struct._object* null, %struct._object** %ret, align 8, !dbg !6042, !tbaa !2326
  %8 = load %struct._object*, %struct._object** %addrobj, align 8, !dbg !6043, !tbaa !2326
  %tobool = icmp ne %struct._object* %8, null, !dbg !6043
  br i1 %tobool, label %if.then.1, label %if.end.9, !dbg !6044

if.then.1:                                        ; preds = %sw.bb
  %9 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !6045, !tbaa !2326
  %10 = bitcast %struct.sockaddr* %9 to %struct.sockaddr_in*, !dbg !6046
  store %struct.sockaddr_in* %10, %struct.sockaddr_in** %a, align 8, !dbg !6047, !tbaa !2326
  %11 = load %struct._object*, %struct._object** %addrobj, align 8, !dbg !6048, !tbaa !2326
  %12 = bitcast i16* %__v to i8*, !dbg !6049
  call void @llvm.lifetime.start(i64 2, i8* %12) #1, !dbg !6049
  call void @llvm.dbg.declare(metadata i16* %__v, metadata !906, metadata !2310), !dbg !6050
  %13 = bitcast i16* %__x to i8*, !dbg !6049
  call void @llvm.lifetime.start(i64 2, i8* %13) #1, !dbg !6049
  call void @llvm.dbg.declare(metadata i16* %__x, metadata !910, metadata !2310), !dbg !6051
  %14 = load %struct.sockaddr_in*, %struct.sockaddr_in** %a, align 8, !dbg !6052, !tbaa !2326
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1, !dbg !6053
  %15 = load i16, i16* %sin_port, align 2, !dbg !6053, !tbaa !6054
  store i16 %15, i16* %__x, align 2, !dbg !6051, !tbaa !6057
  %16 = load i16, i16* %__x, align 2, !dbg !6058, !tbaa !6057
  %17 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %16) #2, !dbg !6060, !srcloc !6061
  store i16 %17, i16* %__v, align 2, !dbg !6060, !tbaa !6057
  %18 = load i16, i16* %__v, align 2, !dbg !6062, !tbaa !6057
  store i16 %18, i16* %tmp, !dbg !6063, !tbaa !6057
  %19 = bitcast i16* %__x to i8*, !dbg !6064
  call void @llvm.lifetime.end(i64 2, i8* %19) #1, !dbg !6064
  %20 = bitcast i16* %__v to i8*, !dbg !6064
  call void @llvm.lifetime.end(i64 2, i8* %20) #1, !dbg !6064
  %21 = load i16, i16* %tmp, !dbg !6065, !tbaa !6057
  %conv2 = zext i16 %21 to i32, !dbg !6066
  %call3 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.302, i32 0, i32 0), %struct._object* %11, i32 %conv2), !dbg !6067
  store %struct._object* %call3, %struct._object** %ret, align 8, !dbg !6068, !tbaa !2326
  br label %do.body, !dbg !6069

do.body:                                          ; preds = %if.then.1
  %22 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6070
  call void @llvm.lifetime.start(i64 8, i8* %22) #1, !dbg !6070
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !911, metadata !2310), !dbg !6072
  %23 = load %struct._object*, %struct._object** %addrobj, align 8, !dbg !6073, !tbaa !2326
  store %struct._object* %23, %struct._object** %_py_decref_tmp, align 8, !dbg !6072, !tbaa !2326
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6074, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0, !dbg !6076
  %25 = load i64, i64* %ob_refcnt, align 8, !dbg !6077, !tbaa !2335
  %dec = add i64 %25, -1, !dbg !6077
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !6077, !tbaa !2335
  %cmp5 = icmp ne i64 %dec, 0, !dbg !6078
  br i1 %cmp5, label %if.then.7, label %if.else, !dbg !6079

if.then.7:                                        ; preds = %do.body
  br label %if.end.8, !dbg !6080

if.else:                                          ; preds = %do.body
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6082, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1, !dbg !6084
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6084, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4, !dbg !6085
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6085, !tbaa !3442
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6086, !tbaa !2326
  call void %28(%struct._object* %29), !dbg !6087
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  %30 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6088
  call void @llvm.lifetime.end(i64 8, i8* %30) #1, !dbg !6088
  br label %do.cond, !dbg !6090

do.cond:                                          ; preds = %if.end.8
  br label %do.end, !dbg !6091

do.end:                                           ; preds = %do.cond
  br label %if.end.9, !dbg !6093

if.end.9:                                         ; preds = %do.end, %sw.bb
  %31 = load %struct._object*, %struct._object** %ret, align 8, !dbg !6094, !tbaa !2326
  store %struct._object* %31, %struct._object** %retval, !dbg !6095
  %32 = bitcast %struct._object** %ret to i8*, !dbg !6096
  call void @llvm.lifetime.end(i64 8, i8* %32) #1, !dbg !6096
  %33 = bitcast %struct._object** %addrobj to i8*, !dbg !6096
  call void @llvm.lifetime.end(i64 8, i8* %33) #1, !dbg !6096
  %34 = bitcast %struct.sockaddr_in** %a to i8*, !dbg !6096
  call void @llvm.lifetime.end(i64 8, i8* %34) #1, !dbg !6096
  br label %return

sw.bb.10:                                         ; preds = %LeafBlock
  %35 = bitcast %struct.sockaddr_un** %a12 to i8*, !dbg !6097
  call void @llvm.lifetime.start(i64 8, i8* %35) #1, !dbg !6097
  call void @llvm.dbg.declare(metadata %struct.sockaddr_un** %a12, metadata !913, metadata !2310), !dbg !6098
  %36 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !6099, !tbaa !2326
  %37 = bitcast %struct.sockaddr* %36 to %struct.sockaddr_un*, !dbg !6100
  store %struct.sockaddr_un* %37, %struct.sockaddr_un** %a12, align 8, !dbg !6098, !tbaa !2326
  %38 = load %struct.sockaddr_un*, %struct.sockaddr_un** %a12, align 8, !dbg !6101, !tbaa !2326
  %sun_path = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %38, i32 0, i32 1, !dbg !6103
  %arrayidx = getelementptr [108 x i8], [108 x i8]* %sun_path, i32 0, i64 0, !dbg !6101
  %39 = load i8, i8* %arrayidx, align 1, !dbg !6101, !tbaa !6104
  %conv13 = sext i8 %39 to i32, !dbg !6101
  %cmp14 = icmp eq i32 %conv13, 0, !dbg !6105
  br i1 %cmp14, label %if.then.16, label %if.else.19, !dbg !6106

if.then.16:                                       ; preds = %sw.bb.10
  %40 = load i64, i64* %addrlen.addr, align 8, !dbg !6107, !tbaa !2963
  %sub = sub i64 %40, 2, !dbg !6107
  store i64 %sub, i64* %addrlen.addr, align 8, !dbg !6107, !tbaa !2963
  %41 = load %struct.sockaddr_un*, %struct.sockaddr_un** %a12, align 8, !dbg !6109, !tbaa !2326
  %sun_path17 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %41, i32 0, i32 1, !dbg !6110
  %arraydecay = getelementptr inbounds [108 x i8], [108 x i8]* %sun_path17, i32 0, i32 0, !dbg !6109
  %42 = load i64, i64* %addrlen.addr, align 8, !dbg !6111, !tbaa !2963
  %call18 = call %struct._object* @PyBytes_FromStringAndSize(i8* %arraydecay, i64 %42), !dbg !6112
  store %struct._object* %call18, %struct._object** %retval, !dbg !6113
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6113

if.else.19:                                       ; preds = %sw.bb.10
  %43 = load %struct.sockaddr_un*, %struct.sockaddr_un** %a12, align 8, !dbg !6114, !tbaa !2326
  %sun_path20 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %43, i32 0, i32 1, !dbg !6116
  %arraydecay21 = getelementptr inbounds [108 x i8], [108 x i8]* %sun_path20, i32 0, i32 0, !dbg !6114
  %call22 = call %struct._object* @PyUnicode_DecodeFSDefault(i8* %arraydecay21), !dbg !6117
  store %struct._object* %call22, %struct._object** %retval, !dbg !6118
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6118

cleanup:                                          ; preds = %if.else.19, %if.then.16
  %44 = bitcast %struct.sockaddr_un** %a12 to i8*, !dbg !6119
  call void @llvm.lifetime.end(i64 8, i8* %44) #1, !dbg !6119
  br label %return

sw.bb.23:                                         ; preds = %NodeBlock.9
  %45 = bitcast %struct.sockaddr_nl** %a25 to i8*, !dbg !6120
  call void @llvm.lifetime.start(i64 8, i8* %45) #1, !dbg !6120
  call void @llvm.dbg.declare(metadata %struct.sockaddr_nl** %a25, metadata !915, metadata !2310), !dbg !6121
  %46 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !6122, !tbaa !2326
  %47 = bitcast %struct.sockaddr* %46 to %struct.sockaddr_nl*, !dbg !6123
  store %struct.sockaddr_nl* %47, %struct.sockaddr_nl** %a25, align 8, !dbg !6121, !tbaa !2326
  %48 = load %struct.sockaddr_nl*, %struct.sockaddr_nl** %a25, align 8, !dbg !6124, !tbaa !2326
  %nl_pid = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %48, i32 0, i32 2, !dbg !6125
  %49 = load i32, i32* %nl_pid, align 4, !dbg !6125, !tbaa !6126
  %50 = load %struct.sockaddr_nl*, %struct.sockaddr_nl** %a25, align 8, !dbg !6128, !tbaa !2326
  %nl_groups = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %50, i32 0, i32 3, !dbg !6129
  %51 = load i32, i32* %nl_groups, align 4, !dbg !6129, !tbaa !6130
  %call26 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.303, i32 0, i32 0), i32 %49, i32 %51), !dbg !6131
  store %struct._object* %call26, %struct._object** %retval, !dbg !6132
  store i32 1, i32* %cleanup.dest.slot
  %52 = bitcast %struct.sockaddr_nl** %a25 to i8*, !dbg !6133
  call void @llvm.lifetime.end(i64 8, i8* %52) #1, !dbg !6133
  br label %return

sw.bb.28:                                         ; preds = %LeafBlock.3
  %53 = bitcast %struct.sockaddr_in6** %a30 to i8*, !dbg !6134
  call void @llvm.lifetime.start(i64 8, i8* %53) #1, !dbg !6134
  call void @llvm.dbg.declare(metadata %struct.sockaddr_in6** %a30, metadata !917, metadata !2310), !dbg !6135
  %54 = bitcast %struct._object** %addrobj32 to i8*, !dbg !6136
  call void @llvm.lifetime.start(i64 8, i8* %54) #1, !dbg !6136
  call void @llvm.dbg.declare(metadata %struct._object** %addrobj32, metadata !919, metadata !2310), !dbg !6137
  %55 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !6138, !tbaa !2326
  %call33 = call %struct._object* @makeipaddr(%struct.sockaddr* %55, i32 28), !dbg !6139
  store %struct._object* %call33, %struct._object** %addrobj32, align 8, !dbg !6137, !tbaa !2326
  %56 = bitcast %struct._object** %ret35 to i8*, !dbg !6140
  call void @llvm.lifetime.start(i64 8, i8* %56) #1, !dbg !6140
  call void @llvm.dbg.declare(metadata %struct._object** %ret35, metadata !920, metadata !2310), !dbg !6141
  store %struct._object* null, %struct._object** %ret35, align 8, !dbg !6141, !tbaa !2326
  %57 = load %struct._object*, %struct._object** %addrobj32, align 8, !dbg !6142, !tbaa !2326
  %tobool36 = icmp ne %struct._object* %57, null, !dbg !6142
  br i1 %tobool36, label %if.then.37, label %if.end.64, !dbg !6143

if.then.37:                                       ; preds = %sw.bb.28
  %58 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !6144, !tbaa !2326
  %59 = bitcast %struct.sockaddr* %58 to %struct.sockaddr_in6*, !dbg !6145
  store %struct.sockaddr_in6* %59, %struct.sockaddr_in6** %a30, align 8, !dbg !6146, !tbaa !2326
  %60 = load %struct._object*, %struct._object** %addrobj32, align 8, !dbg !6147, !tbaa !2326
  %61 = bitcast i16* %__v39 to i8*, !dbg !6148
  call void @llvm.lifetime.start(i64 2, i8* %61) #1, !dbg !6148
  call void @llvm.dbg.declare(metadata i16* %__v39, metadata !921, metadata !2310), !dbg !6149
  %62 = bitcast i16* %__x41 to i8*, !dbg !6148
  call void @llvm.lifetime.start(i64 2, i8* %62) #1, !dbg !6148
  call void @llvm.dbg.declare(metadata i16* %__x41, metadata !925, metadata !2310), !dbg !6150
  %63 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %a30, align 8, !dbg !6151, !tbaa !2326
  %sin6_port = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %63, i32 0, i32 1, !dbg !6152
  %64 = load i16, i16* %sin6_port, align 2, !dbg !6152, !tbaa !6153
  store i16 %64, i16* %__x41, align 2, !dbg !6150, !tbaa !6057
  %65 = load i16, i16* %__x41, align 2, !dbg !6156, !tbaa !6057
  %66 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %65) #2, !dbg !6158, !srcloc !6159
  store i16 %66, i16* %__v39, align 2, !dbg !6158, !tbaa !6057
  %67 = load i16, i16* %__v39, align 2, !dbg !6160, !tbaa !6057
  store i16 %67, i16* %tmp42, !dbg !6161, !tbaa !6057
  %68 = bitcast i16* %__x41 to i8*, !dbg !6162
  call void @llvm.lifetime.end(i64 2, i8* %68) #1, !dbg !6162
  %69 = bitcast i16* %__v39 to i8*, !dbg !6162
  call void @llvm.lifetime.end(i64 2, i8* %69) #1, !dbg !6162
  %70 = load i16, i16* %tmp42, !dbg !6163, !tbaa !6057
  %conv43 = zext i16 %70 to i32, !dbg !6164
  %71 = bitcast i32* %__v45 to i8*, !dbg !6165
  call void @llvm.lifetime.start(i64 4, i8* %71) #1, !dbg !6165
  call void @llvm.dbg.declare(metadata i32* %__v45, metadata !926, metadata !2310), !dbg !6166
  %72 = bitcast i32* %__x47 to i8*, !dbg !6165
  call void @llvm.lifetime.start(i64 4, i8* %72) #1, !dbg !6165
  call void @llvm.dbg.declare(metadata i32* %__x47, metadata !928, metadata !2310), !dbg !6167
  %73 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %a30, align 8, !dbg !6168, !tbaa !2326
  %sin6_flowinfo = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %73, i32 0, i32 2, !dbg !6169
  %74 = load i32, i32* %sin6_flowinfo, align 4, !dbg !6169, !tbaa !6170
  store i32 %74, i32* %__x47, align 4, !dbg !6167, !tbaa !3034
  %75 = load i32, i32* %__x47, align 4, !dbg !6171, !tbaa !3034
  %76 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %75) #2, !dbg !6173, !srcloc !6174
  store i32 %76, i32* %__v45, align 4, !dbg !6173, !tbaa !3034
  %77 = load i32, i32* %__v45, align 4, !dbg !6175, !tbaa !3034
  store i32 %77, i32* %tmp48, !dbg !6176, !tbaa !3034
  %78 = bitcast i32* %__x47 to i8*, !dbg !6177
  call void @llvm.lifetime.end(i64 4, i8* %78) #1, !dbg !6177
  %79 = bitcast i32* %__v45 to i8*, !dbg !6177
  call void @llvm.lifetime.end(i64 4, i8* %79) #1, !dbg !6177
  %80 = load i32, i32* %tmp48, !dbg !6178, !tbaa !3034
  %81 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %a30, align 8, !dbg !6179, !tbaa !2326
  %sin6_scope_id = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %81, i32 0, i32 4, !dbg !6180
  %82 = load i32, i32* %sin6_scope_id, align 4, !dbg !6180, !tbaa !6181
  %call49 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.304, i32 0, i32 0), %struct._object* %60, i32 %conv43, i32 %80, i32 %82), !dbg !6182
  store %struct._object* %call49, %struct._object** %ret35, align 8, !dbg !6183, !tbaa !2326
  br label %do.body.50, !dbg !6184

do.body.50:                                       ; preds = %if.then.37
  %83 = bitcast %struct._object** %_py_decref_tmp52 to i8*, !dbg !6185
  call void @llvm.lifetime.start(i64 8, i8* %83) #1, !dbg !6185
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp52, metadata !929, metadata !2310), !dbg !6187
  %84 = load %struct._object*, %struct._object** %addrobj32, align 8, !dbg !6188, !tbaa !2326
  store %struct._object* %84, %struct._object** %_py_decref_tmp52, align 8, !dbg !6187, !tbaa !2326
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !6189, !tbaa !2326
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 0, !dbg !6191
  %86 = load i64, i64* %ob_refcnt53, align 8, !dbg !6192, !tbaa !2335
  %dec54 = add i64 %86, -1, !dbg !6192
  store i64 %dec54, i64* %ob_refcnt53, align 8, !dbg !6192, !tbaa !2335
  %cmp55 = icmp ne i64 %dec54, 0, !dbg !6193
  br i1 %cmp55, label %if.then.57, label %if.else.58, !dbg !6194

if.then.57:                                       ; preds = %do.body.50
  br label %if.end.61, !dbg !6195

if.else.58:                                       ; preds = %do.body.50
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !6197, !tbaa !2326
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 1, !dbg !6199
  %88 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8, !dbg !6199, !tbaa !2318
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %88, i32 0, i32 4, !dbg !6200
  %89 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8, !dbg !6200, !tbaa !3442
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8, !dbg !6201, !tbaa !2326
  call void %89(%struct._object* %90), !dbg !6202
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  %91 = bitcast %struct._object** %_py_decref_tmp52 to i8*, !dbg !6203
  call void @llvm.lifetime.end(i64 8, i8* %91) #1, !dbg !6203
  br label %do.cond.62, !dbg !6205

do.cond.62:                                       ; preds = %if.end.61
  br label %do.end.63, !dbg !6206

do.end.63:                                        ; preds = %do.cond.62
  br label %if.end.64, !dbg !6208

if.end.64:                                        ; preds = %do.end.63, %sw.bb.28
  %92 = load %struct._object*, %struct._object** %ret35, align 8, !dbg !6209, !tbaa !2326
  store %struct._object* %92, %struct._object** %retval, !dbg !6210
  store i32 1, i32* %cleanup.dest.slot
  %93 = bitcast %struct._object** %ret35 to i8*, !dbg !6211
  call void @llvm.lifetime.end(i64 8, i8* %93) #1, !dbg !6211
  %94 = bitcast %struct._object** %addrobj32 to i8*, !dbg !6211
  call void @llvm.lifetime.end(i64 8, i8* %94) #1, !dbg !6211
  %95 = bitcast %struct.sockaddr_in6** %a30 to i8*, !dbg !6211
  call void @llvm.lifetime.end(i64 8, i8* %95) #1, !dbg !6211
  br label %return

sw.bb.68:                                         ; preds = %LeafBlock.7
  %96 = bitcast %struct.sockaddr_ll** %a70 to i8*, !dbg !6212
  call void @llvm.lifetime.start(i64 8, i8* %96) #1, !dbg !6212
  call void @llvm.dbg.declare(metadata %struct.sockaddr_ll** %a70, metadata !931, metadata !2310), !dbg !6213
  %97 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !6214, !tbaa !2326
  %98 = bitcast %struct.sockaddr* %97 to %struct.sockaddr_ll*, !dbg !6215
  store %struct.sockaddr_ll* %98, %struct.sockaddr_ll** %a70, align 8, !dbg !6213, !tbaa !2326
  %99 = bitcast i8** %ifname to i8*, !dbg !6216
  call void @llvm.lifetime.start(i64 8, i8* %99) #1, !dbg !6216
  call void @llvm.dbg.declare(metadata i8** %ifname, metadata !933, metadata !2310), !dbg !6217
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.305, i32 0, i32 0), i8** %ifname, align 8, !dbg !6217, !tbaa !2326
  %100 = bitcast %struct.ifreq* %ifr to i8*, !dbg !6218
  call void @llvm.lifetime.start(i64 40, i8* %100) #1, !dbg !6218
  call void @llvm.dbg.declare(metadata %struct.ifreq* %ifr, metadata !934, metadata !2310), !dbg !6219
  %101 = load %struct.sockaddr_ll*, %struct.sockaddr_ll** %a70, align 8, !dbg !6220, !tbaa !2326
  %sll_ifindex = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %101, i32 0, i32 2, !dbg !6222
  %102 = load i32, i32* %sll_ifindex, align 4, !dbg !6222, !tbaa !6223
  %tobool73 = icmp ne i32 %102, 0, !dbg !6220
  br i1 %tobool73, label %if.then.74, label %if.end.82, !dbg !6225

if.then.74:                                       ; preds = %sw.bb.68
  %103 = load %struct.sockaddr_ll*, %struct.sockaddr_ll** %a70, align 8, !dbg !6226, !tbaa !2326
  %sll_ifindex75 = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %103, i32 0, i32 2, !dbg !6228
  %104 = load i32, i32* %sll_ifindex75, align 4, !dbg !6228, !tbaa !6223
  %ifr_ifru = getelementptr inbounds %struct.ifreq, %struct.ifreq* %ifr, i32 0, i32 1, !dbg !6229
  %ifru_ivalue = bitcast %union.anon.2* %ifr_ifru to i32*, !dbg !6230
  store i32 %104, i32* %ifru_ivalue, align 4, !dbg !6231, !tbaa !3034
  %105 = load i32, i32* %sockfd.addr, align 4, !dbg !6232, !tbaa !3034
  %call76 = call i32 (i32, i64, ...) @ioctl(i32 %105, i64 35088, %struct.ifreq* %ifr) #1, !dbg !6234
  %cmp77 = icmp eq i32 %call76, 0, !dbg !6235
  br i1 %cmp77, label %if.then.79, label %if.end.81, !dbg !6236

if.then.79:                                       ; preds = %if.then.74
  %ifr_ifrn = getelementptr inbounds %struct.ifreq, %struct.ifreq* %ifr, i32 0, i32 0, !dbg !6237
  %ifrn_name = bitcast %union.anon.1* %ifr_ifrn to [16 x i8]*, !dbg !6238
  %arraydecay80 = getelementptr inbounds [16 x i8], [16 x i8]* %ifrn_name, i32 0, i32 0, !dbg !6239
  store i8* %arraydecay80, i8** %ifname, align 8, !dbg !6240, !tbaa !2326
  br label %if.end.81, !dbg !6241

if.end.81:                                        ; preds = %if.then.79, %if.then.74
  br label %if.end.82, !dbg !6242

if.end.82:                                        ; preds = %if.end.81, %sw.bb.68
  %106 = load i8*, i8** %ifname, align 8, !dbg !6243, !tbaa !2326
  %107 = bitcast i16* %__v84 to i8*, !dbg !6244
  call void @llvm.lifetime.start(i64 2, i8* %107) #1, !dbg !6244
  call void @llvm.dbg.declare(metadata i16* %__v84, metadata !967, metadata !2310), !dbg !6245
  %108 = bitcast i16* %__x86 to i8*, !dbg !6244
  call void @llvm.lifetime.start(i64 2, i8* %108) #1, !dbg !6244
  call void @llvm.dbg.declare(metadata i16* %__x86, metadata !969, metadata !2310), !dbg !6246
  %109 = load %struct.sockaddr_ll*, %struct.sockaddr_ll** %a70, align 8, !dbg !6247, !tbaa !2326
  %sll_protocol = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %109, i32 0, i32 1, !dbg !6248
  %110 = load i16, i16* %sll_protocol, align 2, !dbg !6248, !tbaa !6249
  store i16 %110, i16* %__x86, align 2, !dbg !6246, !tbaa !6057
  %111 = load i16, i16* %__x86, align 2, !dbg !6250, !tbaa !6057
  %112 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %111) #2, !dbg !6252, !srcloc !6253
  store i16 %112, i16* %__v84, align 2, !dbg !6252, !tbaa !6057
  %113 = load i16, i16* %__v84, align 2, !dbg !6254, !tbaa !6057
  store i16 %113, i16* %tmp87, !dbg !6255, !tbaa !6057
  %114 = bitcast i16* %__x86 to i8*, !dbg !6256
  call void @llvm.lifetime.end(i64 2, i8* %114) #1, !dbg !6256
  %115 = bitcast i16* %__v84 to i8*, !dbg !6256
  call void @llvm.lifetime.end(i64 2, i8* %115) #1, !dbg !6256
  %116 = load i16, i16* %tmp87, !dbg !6257, !tbaa !6057
  %conv88 = zext i16 %116 to i32, !dbg !6258
  %117 = load %struct.sockaddr_ll*, %struct.sockaddr_ll** %a70, align 8, !dbg !6259, !tbaa !2326
  %sll_pkttype = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %117, i32 0, i32 4, !dbg !6260
  %118 = load i8, i8* %sll_pkttype, align 1, !dbg !6260, !tbaa !6261
  %conv89 = zext i8 %118 to i32, !dbg !6259
  %119 = load %struct.sockaddr_ll*, %struct.sockaddr_ll** %a70, align 8, !dbg !6262, !tbaa !2326
  %sll_hatype = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %119, i32 0, i32 3, !dbg !6263
  %120 = load i16, i16* %sll_hatype, align 2, !dbg !6263, !tbaa !6264
  %conv90 = zext i16 %120 to i32, !dbg !6262
  %121 = load %struct.sockaddr_ll*, %struct.sockaddr_ll** %a70, align 8, !dbg !6265, !tbaa !2326
  %sll_addr = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %121, i32 0, i32 6, !dbg !6266
  %arraydecay91 = getelementptr inbounds [8 x i8], [8 x i8]* %sll_addr, i32 0, i32 0, !dbg !6265
  %122 = load %struct.sockaddr_ll*, %struct.sockaddr_ll** %a70, align 8, !dbg !6267, !tbaa !2326
  %sll_halen = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %122, i32 0, i32 5, !dbg !6268
  %123 = load i8, i8* %sll_halen, align 1, !dbg !6268, !tbaa !6269
  %conv92 = zext i8 %123 to i32, !dbg !6267
  %call93 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.306, i32 0, i32 0), i8* %106, i32 %conv88, i32 %conv89, i32 %conv90, i8* %arraydecay91, i32 %conv92), !dbg !6270
  store %struct._object* %call93, %struct._object** %retval, !dbg !6271
  store i32 1, i32* %cleanup.dest.slot
  %124 = bitcast %struct.ifreq* %ifr to i8*, !dbg !6272
  call void @llvm.lifetime.end(i64 40, i8* %124) #1, !dbg !6272
  %125 = bitcast i8** %ifname to i8*, !dbg !6272
  call void @llvm.lifetime.end(i64 8, i8* %125) #1, !dbg !6272
  %126 = bitcast %struct.sockaddr_ll** %a70 to i8*, !dbg !6272
  call void @llvm.lifetime.end(i64 8, i8* %126) #1, !dbg !6272
  br label %return

sw.bb.97:                                         ; preds = %LeafBlock.11
  %127 = bitcast %struct.sockaddr_tipc** %a99 to i8*, !dbg !6273
  call void @llvm.lifetime.start(i64 8, i8* %127) #1, !dbg !6273
  call void @llvm.dbg.declare(metadata %struct.sockaddr_tipc** %a99, metadata !970, metadata !2310), !dbg !6274
  %128 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !6275, !tbaa !2326
  %129 = bitcast %struct.sockaddr* %128 to %struct.sockaddr_tipc*, !dbg !6276
  store %struct.sockaddr_tipc* %129, %struct.sockaddr_tipc** %a99, align 8, !dbg !6274, !tbaa !2326
  %130 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6277, !tbaa !2326
  %addrtype = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %130, i32 0, i32 1, !dbg !6279
  %131 = load i8, i8* %addrtype, align 1, !dbg !6279, !tbaa !6280
  %conv100 = zext i8 %131 to i32, !dbg !6277
  %cmp101 = icmp eq i32 %conv100, 1, !dbg !6282
  br i1 %cmp101, label %if.then.103, label %if.else.113, !dbg !6283

if.then.103:                                      ; preds = %sw.bb.97
  %132 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6284, !tbaa !2326
  %addrtype104 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %132, i32 0, i32 1, !dbg !6286
  %133 = load i8, i8* %addrtype104, align 1, !dbg !6286, !tbaa !6280
  %conv105 = zext i8 %133 to i32, !dbg !6284
  %134 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6287, !tbaa !2326
  %addr106 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %134, i32 0, i32 3, !dbg !6288
  %nameseq = bitcast %union.anon.3* %addr106 to %struct.tipc_name_seq*, !dbg !6289
  %type = getelementptr inbounds %struct.tipc_name_seq, %struct.tipc_name_seq* %nameseq, i32 0, i32 0, !dbg !6290
  %135 = load i32, i32* %type, align 4, !dbg !6290, !tbaa !6291
  %136 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6293, !tbaa !2326
  %addr107 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %136, i32 0, i32 3, !dbg !6294
  %nameseq108 = bitcast %union.anon.3* %addr107 to %struct.tipc_name_seq*, !dbg !6295
  %lower = getelementptr inbounds %struct.tipc_name_seq, %struct.tipc_name_seq* %nameseq108, i32 0, i32 1, !dbg !6296
  %137 = load i32, i32* %lower, align 4, !dbg !6296, !tbaa !6297
  %138 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6298, !tbaa !2326
  %addr109 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %138, i32 0, i32 3, !dbg !6299
  %nameseq110 = bitcast %union.anon.3* %addr109 to %struct.tipc_name_seq*, !dbg !6300
  %upper = getelementptr inbounds %struct.tipc_name_seq, %struct.tipc_name_seq* %nameseq110, i32 0, i32 2, !dbg !6301
  %139 = load i32, i32* %upper, align 4, !dbg !6301, !tbaa !6302
  %140 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6303, !tbaa !2326
  %scope = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %140, i32 0, i32 2, !dbg !6304
  %141 = load i8, i8* %scope, align 1, !dbg !6304, !tbaa !6305
  %conv111 = sext i8 %141 to i32, !dbg !6303
  %call112 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.307, i32 0, i32 0), i32 %conv105, i32 %135, i32 %137, i32 %139, i32 %conv111), !dbg !6306
  store %struct._object* %call112, %struct._object** %retval, !dbg !6307
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.149, !dbg !6307

if.else.113:                                      ; preds = %sw.bb.97
  %142 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6308, !tbaa !2326
  %addrtype114 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %142, i32 0, i32 1, !dbg !6310
  %143 = load i8, i8* %addrtype114, align 1, !dbg !6310, !tbaa !6280
  %conv115 = zext i8 %143 to i32, !dbg !6308
  %cmp116 = icmp eq i32 %conv115, 2, !dbg !6311
  br i1 %cmp116, label %if.then.118, label %if.else.134, !dbg !6312

if.then.118:                                      ; preds = %if.else.113
  %144 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6313, !tbaa !2326
  %addrtype119 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %144, i32 0, i32 1, !dbg !6315
  %145 = load i8, i8* %addrtype119, align 1, !dbg !6315, !tbaa !6280
  %conv120 = zext i8 %145 to i32, !dbg !6313
  %146 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6316, !tbaa !2326
  %addr121 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %146, i32 0, i32 3, !dbg !6317
  %name = bitcast %union.anon.3* %addr121 to %struct.anon.4*, !dbg !6318
  %name122 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %name, i32 0, i32 0, !dbg !6319
  %type123 = getelementptr inbounds %struct.tipc_name, %struct.tipc_name* %name122, i32 0, i32 0, !dbg !6320
  %147 = load i32, i32* %type123, align 4, !dbg !6320, !tbaa !6321
  %148 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6324, !tbaa !2326
  %addr124 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %148, i32 0, i32 3, !dbg !6325
  %name125 = bitcast %union.anon.3* %addr124 to %struct.anon.4*, !dbg !6326
  %name126 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %name125, i32 0, i32 0, !dbg !6327
  %instance = getelementptr inbounds %struct.tipc_name, %struct.tipc_name* %name126, i32 0, i32 1, !dbg !6328
  %149 = load i32, i32* %instance, align 4, !dbg !6328, !tbaa !6329
  %150 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6330, !tbaa !2326
  %addr127 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %150, i32 0, i32 3, !dbg !6331
  %name128 = bitcast %union.anon.3* %addr127 to %struct.anon.4*, !dbg !6332
  %name129 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %name128, i32 0, i32 0, !dbg !6333
  %instance130 = getelementptr inbounds %struct.tipc_name, %struct.tipc_name* %name129, i32 0, i32 1, !dbg !6334
  %151 = load i32, i32* %instance130, align 4, !dbg !6334, !tbaa !6329
  %152 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6335, !tbaa !2326
  %scope131 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %152, i32 0, i32 2, !dbg !6336
  %153 = load i8, i8* %scope131, align 1, !dbg !6336, !tbaa !6305
  %conv132 = sext i8 %153 to i32, !dbg !6335
  %call133 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.307, i32 0, i32 0), i32 %conv120, i32 %147, i32 %149, i32 %151, i32 %conv132), !dbg !6337
  store %struct._object* %call133, %struct._object** %retval, !dbg !6338
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.149, !dbg !6338

if.else.134:                                      ; preds = %if.else.113
  %154 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6339, !tbaa !2326
  %addrtype135 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %154, i32 0, i32 1, !dbg !6341
  %155 = load i8, i8* %addrtype135, align 1, !dbg !6341, !tbaa !6280
  %conv136 = zext i8 %155 to i32, !dbg !6339
  %cmp137 = icmp eq i32 %conv136, 3, !dbg !6342
  br i1 %cmp137, label %if.then.139, label %if.else.148, !dbg !6343

if.then.139:                                      ; preds = %if.else.134
  %156 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6344, !tbaa !2326
  %addrtype140 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %156, i32 0, i32 1, !dbg !6346
  %157 = load i8, i8* %addrtype140, align 1, !dbg !6346, !tbaa !6280
  %conv141 = zext i8 %157 to i32, !dbg !6344
  %158 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6347, !tbaa !2326
  %addr142 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %158, i32 0, i32 3, !dbg !6348
  %id = bitcast %union.anon.3* %addr142 to %struct.tipc_portid*, !dbg !6349
  %node = getelementptr inbounds %struct.tipc_portid, %struct.tipc_portid* %id, i32 0, i32 1, !dbg !6350
  %159 = load i32, i32* %node, align 4, !dbg !6350, !tbaa !6351
  %160 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6353, !tbaa !2326
  %addr143 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %160, i32 0, i32 3, !dbg !6354
  %id144 = bitcast %union.anon.3* %addr143 to %struct.tipc_portid*, !dbg !6355
  %ref = getelementptr inbounds %struct.tipc_portid, %struct.tipc_portid* %id144, i32 0, i32 0, !dbg !6356
  %161 = load i32, i32* %ref, align 4, !dbg !6356, !tbaa !6357
  %162 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %a99, align 8, !dbg !6358, !tbaa !2326
  %scope145 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %162, i32 0, i32 2, !dbg !6359
  %163 = load i8, i8* %scope145, align 1, !dbg !6359, !tbaa !6305
  %conv146 = sext i8 %163 to i32, !dbg !6358
  %call147 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.307, i32 0, i32 0), i32 %conv141, i32 %159, i32 %161, i32 0, i32 %conv146), !dbg !6360
  store %struct._object* %call147, %struct._object** %retval, !dbg !6361
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.149, !dbg !6361

if.else.148:                                      ; preds = %if.else.134
  %164 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !6362, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %164, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.308, i32 0, i32 0)), !dbg !6364
  store %struct._object* null, %struct._object** %retval, !dbg !6365
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.149, !dbg !6365

cleanup.149:                                      ; preds = %if.else.148, %if.then.139, %if.then.118, %if.then.103
  %165 = bitcast %struct.sockaddr_tipc** %a99 to i8*, !dbg !6366
  call void @llvm.lifetime.end(i64 8, i8* %165) #1, !dbg !6366
  br label %return

sw.bb.150:                                        ; preds = %NodeBlock.13
  %166 = bitcast %struct.sockaddr_can** %a152 to i8*, !dbg !6367
  call void @llvm.lifetime.start(i64 8, i8* %166) #1, !dbg !6367
  call void @llvm.dbg.declare(metadata %struct.sockaddr_can** %a152, metadata !972, metadata !2310), !dbg !6368
  %167 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !6369, !tbaa !2326
  %168 = bitcast %struct.sockaddr* %167 to %struct.sockaddr_can*, !dbg !6370
  store %struct.sockaddr_can* %168, %struct.sockaddr_can** %a152, align 8, !dbg !6368, !tbaa !2326
  %169 = bitcast i8** %ifname154 to i8*, !dbg !6371
  call void @llvm.lifetime.start(i64 8, i8* %169) #1, !dbg !6371
  call void @llvm.dbg.declare(metadata i8** %ifname154, metadata !974, metadata !2310), !dbg !6372
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.305, i32 0, i32 0), i8** %ifname154, align 8, !dbg !6372, !tbaa !2326
  %170 = bitcast %struct.ifreq* %ifr156 to i8*, !dbg !6373
  call void @llvm.lifetime.start(i64 40, i8* %170) #1, !dbg !6373
  call void @llvm.dbg.declare(metadata %struct.ifreq* %ifr156, metadata !975, metadata !2310), !dbg !6374
  %171 = load %struct.sockaddr_can*, %struct.sockaddr_can** %a152, align 8, !dbg !6375, !tbaa !2326
  %can_ifindex = getelementptr inbounds %struct.sockaddr_can, %struct.sockaddr_can* %171, i32 0, i32 1, !dbg !6377
  %172 = load i32, i32* %can_ifindex, align 4, !dbg !6377, !tbaa !6378
  %tobool157 = icmp ne i32 %172, 0, !dbg !6375
  br i1 %tobool157, label %if.then.158, label %if.end.170, !dbg !6380

if.then.158:                                      ; preds = %sw.bb.150
  %173 = load %struct.sockaddr_can*, %struct.sockaddr_can** %a152, align 8, !dbg !6381, !tbaa !2326
  %can_ifindex159 = getelementptr inbounds %struct.sockaddr_can, %struct.sockaddr_can* %173, i32 0, i32 1, !dbg !6383
  %174 = load i32, i32* %can_ifindex159, align 4, !dbg !6383, !tbaa !6378
  %ifr_ifru160 = getelementptr inbounds %struct.ifreq, %struct.ifreq* %ifr156, i32 0, i32 1, !dbg !6384
  %ifru_ivalue161 = bitcast %union.anon.2* %ifr_ifru160 to i32*, !dbg !6385
  store i32 %174, i32* %ifru_ivalue161, align 4, !dbg !6386, !tbaa !3034
  %175 = load i32, i32* %sockfd.addr, align 4, !dbg !6387, !tbaa !3034
  %call162 = call i32 (i32, i64, ...) @ioctl(i32 %175, i64 35088, %struct.ifreq* %ifr156) #1, !dbg !6389
  %cmp163 = icmp eq i32 %call162, 0, !dbg !6390
  br i1 %cmp163, label %if.then.165, label %if.end.169, !dbg !6391

if.then.165:                                      ; preds = %if.then.158
  %ifr_ifrn166 = getelementptr inbounds %struct.ifreq, %struct.ifreq* %ifr156, i32 0, i32 0, !dbg !6392
  %ifrn_name167 = bitcast %union.anon.1* %ifr_ifrn166 to [16 x i8]*, !dbg !6393
  %arraydecay168 = getelementptr inbounds [16 x i8], [16 x i8]* %ifrn_name167, i32 0, i32 0, !dbg !6394
  store i8* %arraydecay168, i8** %ifname154, align 8, !dbg !6395, !tbaa !2326
  br label %if.end.169, !dbg !6396

if.end.169:                                       ; preds = %if.then.165, %if.then.158
  br label %if.end.170, !dbg !6397

if.end.170:                                       ; preds = %if.end.169, %sw.bb.150
  %176 = load i8*, i8** %ifname154, align 8, !dbg !6398, !tbaa !2326
  %177 = load %struct.sockaddr_can*, %struct.sockaddr_can** %a152, align 8, !dbg !6399, !tbaa !2326
  %can_family = getelementptr inbounds %struct.sockaddr_can, %struct.sockaddr_can* %177, i32 0, i32 0, !dbg !6400
  %178 = load i16, i16* %can_family, align 2, !dbg !6400, !tbaa !6401
  %conv171 = zext i16 %178 to i32, !dbg !6399
  %call172 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.309, i32 0, i32 0), %struct._object* (i8*)* @PyUnicode_DecodeFSDefault, i8* %176, i32 %conv171), !dbg !6402
  store %struct._object* %call172, %struct._object** %retval, !dbg !6403
  store i32 1, i32* %cleanup.dest.slot
  %179 = bitcast %struct.ifreq* %ifr156 to i8*, !dbg !6404
  call void @llvm.lifetime.end(i64 40, i8* %179) #1, !dbg !6404
  %180 = bitcast i8** %ifname154 to i8*, !dbg !6404
  call void @llvm.lifetime.end(i64 8, i8* %180) #1, !dbg !6404
  %181 = bitcast %struct.sockaddr_can** %a152 to i8*, !dbg !6404
  call void @llvm.lifetime.end(i64 8, i8* %181) #1, !dbg !6404
  br label %return

NewDefault:                                       ; preds = %LeafBlock.11, %LeafBlock.7, %LeafBlock.3, %LeafBlock.1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  %182 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !6405, !tbaa !2326
  %sa_family176 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %182, i32 0, i32 0, !dbg !6406
  %183 = load i16, i16* %sa_family176, align 2, !dbg !6406, !tbaa !6033
  %conv177 = zext i16 %183 to i32, !dbg !6405
  %184 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !6407, !tbaa !2326
  %sa_data = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %184, i32 0, i32 1, !dbg !6408
  %arraydecay178 = getelementptr inbounds [14 x i8], [14 x i8]* %sa_data, i32 0, i32 0, !dbg !6407
  %call179 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.310, i32 0, i32 0), i32 %conv177, i8* %arraydecay178, i64 14), !dbg !6409
  store %struct._object* %call179, %struct._object** %retval, !dbg !6410
  br label %return, !dbg !6410

return:                                           ; preds = %sw.default, %if.end.170, %cleanup.149, %if.end.82, %if.end.64, %sw.bb.23, %cleanup, %if.end.9, %if.then
  %185 = load %struct._object*, %struct._object** %retval, !dbg !6411
  ret %struct._object* %185, !dbg !6411
}

declare %struct._object* @PyTuple_Pack(i64, ...) #3

declare i32 @poll(%struct.pollfd*, i64, i32) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @makeipaddr(%struct.sockaddr* %addr, i32 %addrlen) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %addr.addr = alloca %struct.sockaddr*, align 8
  %addrlen.addr = alloca i32, align 4
  %buf = alloca [1025 x i8], align 16
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.sockaddr* %addr, %struct.sockaddr** %addr.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.sockaddr** %addr.addr, metadata !980, metadata !2310), !dbg !6412
  store i32 %addrlen, i32* %addrlen.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %addrlen.addr, metadata !981, metadata !2310), !dbg !6413
  %0 = bitcast [1025 x i8]* %buf to i8*, !dbg !6414
  call void @llvm.lifetime.start(i64 1025, i8* %0) #1, !dbg !6414
  call void @llvm.dbg.declare(metadata [1025 x i8]* %buf, metadata !982, metadata !2310), !dbg !6415
  %1 = bitcast i32* %error to i8*, !dbg !6416
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !6416
  call void @llvm.dbg.declare(metadata i32* %error, metadata !986, metadata !2310), !dbg !6417
  %2 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !6418, !tbaa !2326
  %3 = load i32, i32* %addrlen.addr, align 4, !dbg !6419, !tbaa !3034
  %arraydecay = getelementptr inbounds [1025 x i8], [1025 x i8]* %buf, i32 0, i32 0, !dbg !6420
  %call = call i32 @getnameinfo(%struct.sockaddr* %2, i32 %3, i8* %arraydecay, i32 1025, i8* null, i32 0, i32 1), !dbg !6421
  store i32 %call, i32* %error, align 4, !dbg !6422, !tbaa !3034
  %4 = load i32, i32* %error, align 4, !dbg !6423, !tbaa !3034
  %tobool = icmp ne i32 %4, 0, !dbg !6423
  br i1 %tobool, label %if.then, label %if.end, !dbg !6425

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %error, align 4, !dbg !6426, !tbaa !3034
  %call1 = call %struct._object* @set_gaierror(i32 %5), !dbg !6428
  store %struct._object* null, %struct._object** %retval, !dbg !6429
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6429

if.end:                                           ; preds = %entry
  %arraydecay2 = getelementptr inbounds [1025 x i8], [1025 x i8]* %buf, i32 0, i32 0, !dbg !6430
  %call3 = call %struct._object* @PyUnicode_FromString(i8* %arraydecay2), !dbg !6431
  store %struct._object* %call3, %struct._object** %retval, !dbg !6432
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6432

cleanup:                                          ; preds = %if.end, %if.then
  %6 = bitcast i32* %error to i8*, !dbg !6433
  call void @llvm.lifetime.end(i64 4, i8* %6) #1, !dbg !6433
  %7 = bitcast [1025 x i8]* %buf to i8*, !dbg !6433
  call void @llvm.lifetime.end(i64 1025, i8* %7) #1, !dbg !6433
  %8 = load %struct._object*, %struct._object** %retval, !dbg !6433
  ret %struct._object* %8, !dbg !6433
}

declare %struct._object* @Py_BuildValue(i8*, ...) #3

declare %struct._object* @PyBytes_FromStringAndSize(i8*, i64) #3

declare %struct._object* @PyUnicode_DecodeFSDefault(i8*) #3

; Function Attrs: nounwind
declare i32 @ioctl(i32, i64, ...) #5

declare i32 @getnameinfo(%struct.sockaddr*, i32, i8*, i32, i8*, i32, i32) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @set_gaierror(i32 %error) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %error.addr = alloca i32, align 4
  %v = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store i32 %error, i32* %error.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %error.addr, metadata !991, metadata !2310), !dbg !6434
  %0 = bitcast %struct._object** %v to i8*, !dbg !6435
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !6435
  call void @llvm.dbg.declare(metadata %struct._object** %v, metadata !992, metadata !2310), !dbg !6436
  %1 = load i32, i32* %error.addr, align 4, !dbg !6437, !tbaa !3034
  %cmp = icmp eq i32 %1, -11, !dbg !6439
  br i1 %cmp, label %if.then, label %if.end, !dbg !6440

if.then:                                          ; preds = %entry
  %call = call %struct._object* @set_error(), !dbg !6441
  store %struct._object* %call, %struct._object** %retval, !dbg !6442
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6442

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %error.addr, align 4, !dbg !6443, !tbaa !3034
  %3 = load i32, i32* %error.addr, align 4, !dbg !6444, !tbaa !3034
  %call1 = call i8* @gai_strerror(i32 %3) #1, !dbg !6445
  %call2 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.311, i32 0, i32 0), i32 %2, i8* %call1), !dbg !6446
  store %struct._object* %call2, %struct._object** %v, align 8, !dbg !6447, !tbaa !2326
  %4 = load %struct._object*, %struct._object** %v, align 8, !dbg !6448, !tbaa !2326
  %cmp3 = icmp ne %struct._object* %4, null, !dbg !6449
  br i1 %cmp3, label %if.then.4, label %if.end.8, !dbg !6450

if.then.4:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @socket_gaierror, align 8, !dbg !6451, !tbaa !2326
  %6 = load %struct._object*, %struct._object** %v, align 8, !dbg !6452, !tbaa !2326
  call void @PyErr_SetObject(%struct._object* %5, %struct._object* %6), !dbg !6453
  br label %do.body, !dbg !6454

do.body:                                          ; preds = %if.then.4
  %7 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6455
  call void @llvm.lifetime.start(i64 8, i8* %7) #1, !dbg !6455
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !993, metadata !2310), !dbg !6457
  %8 = load %struct._object*, %struct._object** %v, align 8, !dbg !6458, !tbaa !2326
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8, !dbg !6457, !tbaa !2326
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6459, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0, !dbg !6461
  %10 = load i64, i64* %ob_refcnt, align 8, !dbg !6462, !tbaa !2335
  %dec = add i64 %10, -1, !dbg !6462
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !6462, !tbaa !2335
  %cmp5 = icmp ne i64 %dec, 0, !dbg !6463
  br i1 %cmp5, label %if.then.6, label %if.else, !dbg !6464

if.then.6:                                        ; preds = %do.body
  br label %if.end.7, !dbg !6465

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6467, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1, !dbg !6469
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6469, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4, !dbg !6470
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6470, !tbaa !3442
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6471, !tbaa !2326
  call void %13(%struct._object* %14), !dbg !6472
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  %15 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6473
  call void @llvm.lifetime.end(i64 8, i8* %15) #1, !dbg !6473
  br label %do.cond, !dbg !6475

do.cond:                                          ; preds = %if.end.7
  br label %do.end, !dbg !6476

do.end:                                           ; preds = %do.cond
  br label %if.end.8, !dbg !6478

if.end.8:                                         ; preds = %do.end, %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !6479
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6479

cleanup:                                          ; preds = %if.end.8, %if.then
  %16 = bitcast %struct._object** %v to i8*, !dbg !6480
  call void @llvm.lifetime.end(i64 8, i8* %16) #1, !dbg !6480
  %17 = load %struct._object*, %struct._object** %retval, !dbg !6480
  ret %struct._object* %17, !dbg !6480
}

declare %struct._object* @PyUnicode_FromString(i8*) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @set_error() #0 {
entry:
  %0 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !6481, !tbaa !2326
  %call = call %struct._object* @PyErr_SetFromErrno(%struct._object* %0), !dbg !6482
  ret %struct._object* %call, !dbg !6483
}

; Function Attrs: nounwind
declare i8* @gai_strerror(i32) #5

declare void @PyErr_SetObject(%struct._object*, %struct._object*) #3

declare %struct._object* @PyErr_SetFromErrno(%struct._object*) #3

; Function Attrs: nounwind uwtable
define internal i32 @getsockaddrarg(%struct.PySocketSockObject* %s, %struct._object* %args, %struct.sockaddr* %addr_ret, i32* %len_ret) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %addr_ret.addr = alloca %struct.sockaddr*, align 8
  %len_ret.addr = alloca i32*, align 8
  %addr = alloca %struct.sockaddr_un*, align 8
  %path = alloca i8*, align 8
  %len = alloca i32, align 4
  %retval1 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  %addr42 = alloca %struct.sockaddr_nl*, align 8
  %pid = alloca i32, align 4
  %groups = alloca i32, align 4
  %addr60 = alloca %struct.sockaddr_in*, align 8
  %host = alloca i8*, align 8
  %port = alloca i32, align 4
  %result = alloca i32, align 4
  %__v = alloca i16, align 2
  %__x = alloca i16, align 2
  %tmp = alloca i16, align 2
  %addr93 = alloca %struct.sockaddr_in6*, align 8
  %host95 = alloca i8*, align 8
  %port97 = alloca i32, align 4
  %result99 = alloca i32, align 4
  %flowinfo = alloca i32, align 4
  %scope_id = alloca i32, align 4
  %__v135 = alloca i16, align 2
  %__x137 = alloca i16, align 2
  %tmp139 = alloca i16, align 2
  %__v141 = alloca i32, align 4
  %__x143 = alloca i32, align 4
  %tmp144 = alloca i32, align 4
  %addr153 = alloca %struct.sockaddr_ll*, align 8
  %ifr = alloca %struct.ifreq, align 8
  %interfaceName = alloca i8*, align 8
  %protoNumber = alloca i32, align 4
  %hatype = alloca i32, align 4
  %pkttype = alloca i32, align 4
  %haddr = alloca i8*, align 8
  %halen = alloca i32, align 4
  %__v197 = alloca i16, align 2
  %__x199 = alloca i16, align 2
  %tmp201 = alloca i16, align 2
  %atype = alloca i32, align 4
  %v1 = alloca i32, align 4
  %v2 = alloca i32, align 4
  %v3 = alloca i32, align 4
  %scope = alloca i32, align 4
  %addr225 = alloca %struct.sockaddr_tipc*, align 8
  %addr281 = alloca %struct.sockaddr_can*, align 8
  %interfaceName283 = alloca %struct._object*, align 8
  %ifr285 = alloca %struct.ifreq, align 8
  %len287 = alloca i64, align 8
  %_py_decref_tmp318 = alloca %struct._object*, align 8
  %_py_decref_tmp334 = alloca %struct._object*, align 8
  %_py_decref_tmp352 = alloca %struct._object*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1011, metadata !2310), !dbg !6484
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1012, metadata !2310), !dbg !6485
  store %struct.sockaddr* %addr_ret, %struct.sockaddr** %addr_ret.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.sockaddr** %addr_ret.addr, metadata !1013, metadata !2310), !dbg !6486
  store i32* %len_ret, i32** %len_ret.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata i32** %len_ret.addr, metadata !1014, metadata !2310), !dbg !6487
  %0 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !6488, !tbaa !2326
  %sock_family = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %0, i32 0, i32 2, !dbg !6489
  %1 = load i32, i32* %sock_family, align 4, !dbg !6489, !tbaa !3014
  br label %NodeBlock.21

NodeBlock.21:                                     ; preds = %entry
  %Pivot.22 = icmp slt i32 %1, 17
  br i1 %Pivot.22, label %NodeBlock.7, label %NodeBlock.19

NodeBlock.19:                                     ; preds = %NodeBlock.21
  %Pivot.20 = icmp slt i32 %1, 29
  br i1 %Pivot.20, label %NodeBlock.13, label %NodeBlock.17

NodeBlock.17:                                     ; preds = %NodeBlock.19
  %Pivot.18 = icmp slt i32 %1, 30
  br i1 %Pivot.18, label %sw.bb.278, label %LeafBlock.15

LeafBlock.15:                                     ; preds = %NodeBlock.17
  %SwitchLeaf16 = icmp eq i32 %1, 30
  br i1 %SwitchLeaf16, label %sw.bb.218, label %NewDefault

NodeBlock.13:                                     ; preds = %NodeBlock.19
  %Pivot.14 = icmp slt i32 %1, 21
  br i1 %Pivot.14, label %LeafBlock.9, label %LeafBlock.11

LeafBlock.11:                                     ; preds = %NodeBlock.13
  %SwitchLeaf12 = icmp eq i32 %1, 21
  br i1 %SwitchLeaf12, label %sw.bb.59, label %NewDefault

LeafBlock.9:                                      ; preds = %NodeBlock.13
  %SwitchLeaf10 = icmp eq i32 %1, 17
  br i1 %SwitchLeaf10, label %sw.bb.151, label %NewDefault

NodeBlock.7:                                      ; preds = %NodeBlock.21
  %Pivot.8 = icmp slt i32 %1, 10
  br i1 %Pivot.8, label %NodeBlock, label %NodeBlock.5

NodeBlock.5:                                      ; preds = %NodeBlock.7
  %Pivot.6 = icmp slt i32 %1, 16
  br i1 %Pivot.6, label %LeafBlock.3, label %sw.bb.41

LeafBlock.3:                                      ; preds = %NodeBlock.5
  %SwitchLeaf4 = icmp eq i32 %1, 10
  br i1 %SwitchLeaf4, label %sw.bb.91, label %NewDefault

NodeBlock:                                        ; preds = %NodeBlock.7
  %Pivot = icmp slt i32 %1, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %1, 2
  br i1 %SwitchLeaf2, label %sw.bb.59, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %1, 1
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %2 = bitcast %struct.sockaddr_un** %addr to i8*, !dbg !6490
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !6490
  call void @llvm.dbg.declare(metadata %struct.sockaddr_un** %addr, metadata !1015, metadata !2310), !dbg !6491
  %3 = bitcast i8** %path to i8*, !dbg !6492
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !6492
  call void @llvm.dbg.declare(metadata i8** %path, metadata !1018, metadata !2310), !dbg !6493
  %4 = bitcast i32* %len to i8*, !dbg !6494
  call void @llvm.lifetime.start(i64 4, i8* %4) #1, !dbg !6494
  call void @llvm.dbg.declare(metadata i32* %len, metadata !1019, metadata !2310), !dbg !6495
  %5 = bitcast i32* %retval1 to i8*, !dbg !6496
  call void @llvm.lifetime.start(i64 4, i8* %5) #1, !dbg !6496
  call void @llvm.dbg.declare(metadata i32* %retval1, metadata !1020, metadata !2310), !dbg !6497
  store i32 0, i32* %retval1, align 4, !dbg !6497, !tbaa !3034
  %6 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6498, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1, !dbg !6500
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !6500, !tbaa !2318
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 19, !dbg !6501
  %8 = load i64, i64* %tp_flags, align 8, !dbg !6501, !tbaa !5047
  %and = and i64 %8, 268435456, !dbg !6502
  %cmp = icmp ne i64 %and, 0, !dbg !6503
  br i1 %cmp, label %if.then, label %if.else, !dbg !6504

if.then:                                          ; preds = %sw.bb
  %9 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6505, !tbaa !2326
  %call = call %struct._object* @PyUnicode_EncodeFSDefault(%struct._object* %9), !dbg !6508
  store %struct._object* %call, %struct._object** %args.addr, align 8, !dbg !6509, !tbaa !2326
  %cmp2 = icmp eq %struct._object* %call, null, !dbg !6510
  br i1 %cmp2, label %if.then.3, label %if.end, !dbg !6511

if.then.3:                                        ; preds = %if.then
  store i32 0, i32* %retval, !dbg !6512
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6512

if.end:                                           ; preds = %if.then
  br label %if.end.4, !dbg !6513

if.else:                                          ; preds = %sw.bb
  %10 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6514, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0, !dbg !6515
  %11 = load i64, i64* %ob_refcnt, align 8, !dbg !6516, !tbaa !2335
  %inc = add i64 %11, 1, !dbg !6516
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !6516, !tbaa !2335
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.end
  %12 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6517, !tbaa !2326
  %call5 = call i32 (%struct._object*, i8*, ...) @PyArg_Parse(%struct._object* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.312, i32 0, i32 0), i8** %path, i32* %len), !dbg !6519
  %tobool = icmp ne i32 %call5, 0, !dbg !6519
  br i1 %tobool, label %if.end.7, label %if.then.6, !dbg !6520

if.then.6:                                        ; preds = %if.end.4
  br label %unix_out, !dbg !6521

if.end.7:                                         ; preds = %if.end.4
  %13 = load %struct.sockaddr*, %struct.sockaddr** %addr_ret.addr, align 8, !dbg !6522, !tbaa !2326
  %14 = bitcast %struct.sockaddr* %13 to %struct.sockaddr_un*, !dbg !6523
  store %struct.sockaddr_un* %14, %struct.sockaddr_un** %addr, align 8, !dbg !6524, !tbaa !2326
  %15 = load i32, i32* %len, align 4, !dbg !6525, !tbaa !3034
  %cmp8 = icmp sgt i32 %15, 0, !dbg !6527
  br i1 %cmp8, label %land.lhs.true, label %if.else.17, !dbg !6528

land.lhs.true:                                    ; preds = %if.end.7
  %16 = load i8*, i8** %path, align 8, !dbg !6529, !tbaa !2326
  %arrayidx = getelementptr i8, i8* %16, i64 0, !dbg !6529
  %17 = load i8, i8* %arrayidx, align 1, !dbg !6529, !tbaa !6104
  %conv = sext i8 %17 to i32, !dbg !6529
  %cmp9 = icmp eq i32 %conv, 0, !dbg !6531
  br i1 %cmp9, label %if.then.11, label %if.else.17, !dbg !6532

if.then.11:                                       ; preds = %land.lhs.true
  %18 = load i32, i32* %len, align 4, !dbg !6533, !tbaa !3034
  %conv12 = sext i32 %18 to i64, !dbg !6533
  %cmp13 = icmp ugt i64 %conv12, 108, !dbg !6536
  br i1 %cmp13, label %if.then.15, label %if.end.16, !dbg !6537

if.then.15:                                       ; preds = %if.then.11
  %19 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !6538, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %19, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.313, i32 0, i32 0)), !dbg !6540
  br label %unix_out, !dbg !6541

if.end.16:                                        ; preds = %if.then.11
  br label %if.end.24, !dbg !6542

if.else.17:                                       ; preds = %land.lhs.true, %if.end.7
  %20 = load i32, i32* %len, align 4, !dbg !6543, !tbaa !3034
  %conv18 = sext i32 %20 to i64, !dbg !6543
  %cmp19 = icmp uge i64 %conv18, 108, !dbg !6546
  br i1 %cmp19, label %if.then.21, label %if.end.22, !dbg !6547

if.then.21:                                       ; preds = %if.else.17
  %21 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !6548, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %21, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.313, i32 0, i32 0)), !dbg !6550
  br label %unix_out, !dbg !6551

if.end.22:                                        ; preds = %if.else.17
  %22 = load i32, i32* %len, align 4, !dbg !6552, !tbaa !3034
  %idxprom = sext i32 %22 to i64, !dbg !6553
  %23 = load %struct.sockaddr_un*, %struct.sockaddr_un** %addr, align 8, !dbg !6553, !tbaa !2326
  %sun_path = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %23, i32 0, i32 1, !dbg !6554
  %arrayidx23 = getelementptr [108 x i8], [108 x i8]* %sun_path, i32 0, i64 %idxprom, !dbg !6553
  store i8 0, i8* %arrayidx23, align 1, !dbg !6555, !tbaa !6104
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.22, %if.end.16
  %24 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !6556, !tbaa !2326
  %sock_family25 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %24, i32 0, i32 2, !dbg !6557
  %25 = load i32, i32* %sock_family25, align 4, !dbg !6557, !tbaa !3014
  %conv26 = trunc i32 %25 to i16, !dbg !6556
  %26 = load %struct.sockaddr_un*, %struct.sockaddr_un** %addr, align 8, !dbg !6558, !tbaa !2326
  %sun_family = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %26, i32 0, i32 0, !dbg !6559
  store i16 %conv26, i16* %sun_family, align 2, !dbg !6560, !tbaa !6561
  %27 = load %struct.sockaddr_un*, %struct.sockaddr_un** %addr, align 8, !dbg !6563, !tbaa !2326
  %sun_path27 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %27, i32 0, i32 1, !dbg !6564
  %28 = bitcast [108 x i8]* %sun_path27 to i8*, !dbg !6565
  %29 = load i8*, i8** %path, align 8, !dbg !6566, !tbaa !2326
  %30 = load i32, i32* %len, align 4, !dbg !6567, !tbaa !3034
  %conv28 = sext i32 %30 to i64, !dbg !6567
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 %conv28, i32 1, i1 false), !dbg !6565
  %31 = load i32, i32* %len, align 4, !dbg !6568, !tbaa !3034
  %conv29 = sext i32 %31 to i64, !dbg !6568
  %add = add i64 %conv29, 2, !dbg !6569
  %conv30 = trunc i64 %add to i32, !dbg !6568
  %32 = load i32*, i32** %len_ret.addr, align 8, !dbg !6570, !tbaa !2326
  store i32 %conv30, i32* %32, align 4, !dbg !6571, !tbaa !3034
  store i32 1, i32* %retval1, align 4, !dbg !6572, !tbaa !3034
  br label %unix_out, !dbg !6573

unix_out:                                         ; preds = %if.end.24, %if.then.21, %if.then.15, %if.then.6
  br label %do.body, !dbg !6574

do.body:                                          ; preds = %unix_out
  %33 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6575
  call void @llvm.lifetime.start(i64 8, i8* %33) #1, !dbg !6575
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1021, metadata !2310), !dbg !6577
  %34 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6578, !tbaa !2326
  store %struct._object* %34, %struct._object** %_py_decref_tmp, align 8, !dbg !6577, !tbaa !2326
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6579, !tbaa !2326
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0, !dbg !6581
  %36 = load i64, i64* %ob_refcnt31, align 8, !dbg !6582, !tbaa !2335
  %dec = add i64 %36, -1, !dbg !6582
  store i64 %dec, i64* %ob_refcnt31, align 8, !dbg !6582, !tbaa !2335
  %cmp32 = icmp ne i64 %dec, 0, !dbg !6583
  br i1 %cmp32, label %if.then.34, label %if.else.35, !dbg !6584

if.then.34:                                       ; preds = %do.body
  br label %if.end.37, !dbg !6585

if.else.35:                                       ; preds = %do.body
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6587, !tbaa !2326
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1, !dbg !6589
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8, !dbg !6589, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4, !dbg !6590
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !6590, !tbaa !3442
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !6591, !tbaa !2326
  call void %39(%struct._object* %40), !dbg !6592
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.35, %if.then.34
  %41 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !6593
  call void @llvm.lifetime.end(i64 8, i8* %41) #1, !dbg !6593
  br label %do.cond, !dbg !6595

do.cond:                                          ; preds = %if.end.37
  br label %do.end, !dbg !6596

do.end:                                           ; preds = %do.cond
  %42 = load i32, i32* %retval1, align 4, !dbg !6598, !tbaa !3034
  store i32 %42, i32* %retval, !dbg !6599
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !6599

cleanup:                                          ; preds = %do.end, %if.then.3
  %43 = bitcast i32* %retval1 to i8*, !dbg !6600
  call void @llvm.lifetime.end(i64 4, i8* %43) #1, !dbg !6600
  %44 = bitcast i32* %len to i8*, !dbg !6600
  call void @llvm.lifetime.end(i64 4, i8* %44) #1, !dbg !6600
  %45 = bitcast i8** %path to i8*, !dbg !6600
  call void @llvm.lifetime.end(i64 8, i8* %45) #1, !dbg !6600
  %46 = bitcast %struct.sockaddr_un** %addr to i8*, !dbg !6600
  call void @llvm.lifetime.end(i64 8, i8* %46) #1, !dbg !6600
  br label %return

sw.bb.41:                                         ; preds = %NodeBlock.5
  %47 = bitcast %struct.sockaddr_nl** %addr42 to i8*, !dbg !6601
  call void @llvm.lifetime.start(i64 8, i8* %47) #1, !dbg !6601
  call void @llvm.dbg.declare(metadata %struct.sockaddr_nl** %addr42, metadata !1023, metadata !2310), !dbg !6602
  %48 = bitcast i32* %pid to i8*, !dbg !6603
  call void @llvm.lifetime.start(i64 4, i8* %48) #1, !dbg !6603
  call void @llvm.dbg.declare(metadata i32* %pid, metadata !1025, metadata !2310), !dbg !6604
  %49 = bitcast i32* %groups to i8*, !dbg !6603
  call void @llvm.lifetime.start(i64 4, i8* %49) #1, !dbg !6603
  call void @llvm.dbg.declare(metadata i32* %groups, metadata !1026, metadata !2310), !dbg !6605
  %50 = load %struct.sockaddr*, %struct.sockaddr** %addr_ret.addr, align 8, !dbg !6606, !tbaa !2326
  %51 = bitcast %struct.sockaddr* %50 to %struct.sockaddr_nl*, !dbg !6607
  store %struct.sockaddr_nl* %51, %struct.sockaddr_nl** %addr42, align 8, !dbg !6608, !tbaa !2326
  %52 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6609, !tbaa !2326
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1, !dbg !6611
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8, !dbg !6611, !tbaa !2318
  %tp_flags44 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 19, !dbg !6612
  %54 = load i64, i64* %tp_flags44, align 8, !dbg !6612, !tbaa !5047
  %and45 = and i64 %54, 67108864, !dbg !6613
  %cmp46 = icmp ne i64 %and45, 0, !dbg !6614
  br i1 %cmp46, label %if.end.51, label %if.then.48, !dbg !6615

if.then.48:                                       ; preds = %sw.bb.41
  %55 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !6616, !tbaa !2326
  %56 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6618, !tbaa !2326
  %ob_type49 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 1, !dbg !6619
  %57 = load %struct._typeobject*, %struct._typeobject** %ob_type49, align 8, !dbg !6619, !tbaa !2318
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 1, !dbg !6620
  %58 = load i8*, i8** %tp_name, align 8, !dbg !6620, !tbaa !6621
  %call50 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %55, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.314, i32 0, i32 0), i8* %58), !dbg !6622
  store i32 0, i32* %retval, !dbg !6623
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56, !dbg !6623

if.end.51:                                        ; preds = %sw.bb.41
  %59 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6624, !tbaa !2326
  %call52 = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %59, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.315, i32 0, i32 0), i32* %pid, i32* %groups), !dbg !6626
  %tobool53 = icmp ne i32 %call52, 0, !dbg !6626
  br i1 %tobool53, label %if.end.55, label %if.then.54, !dbg !6627

if.then.54:                                       ; preds = %if.end.51
  store i32 0, i32* %retval, !dbg !6628
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56, !dbg !6628

if.end.55:                                        ; preds = %if.end.51
  %60 = load %struct.sockaddr_nl*, %struct.sockaddr_nl** %addr42, align 8, !dbg !6629, !tbaa !2326
  %nl_family = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %60, i32 0, i32 0, !dbg !6630
  store i16 16, i16* %nl_family, align 2, !dbg !6631, !tbaa !6632
  %61 = load i32, i32* %pid, align 4, !dbg !6633, !tbaa !3034
  %62 = load %struct.sockaddr_nl*, %struct.sockaddr_nl** %addr42, align 8, !dbg !6634, !tbaa !2326
  %nl_pid = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %62, i32 0, i32 2, !dbg !6635
  store i32 %61, i32* %nl_pid, align 4, !dbg !6636, !tbaa !6126
  %63 = load i32, i32* %groups, align 4, !dbg !6637, !tbaa !3034
  %64 = load %struct.sockaddr_nl*, %struct.sockaddr_nl** %addr42, align 8, !dbg !6638, !tbaa !2326
  %nl_groups = getelementptr inbounds %struct.sockaddr_nl, %struct.sockaddr_nl* %64, i32 0, i32 3, !dbg !6639
  store i32 %63, i32* %nl_groups, align 4, !dbg !6640, !tbaa !6130
  %65 = load i32*, i32** %len_ret.addr, align 8, !dbg !6641, !tbaa !2326
  store i32 12, i32* %65, align 4, !dbg !6642, !tbaa !3034
  store i32 1, i32* %retval, !dbg !6643
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.56, !dbg !6643

cleanup.56:                                       ; preds = %if.end.55, %if.then.54, %if.then.48
  %66 = bitcast i32* %groups to i8*, !dbg !6644
  call void @llvm.lifetime.end(i64 4, i8* %66) #1, !dbg !6644
  %67 = bitcast i32* %pid to i8*, !dbg !6644
  call void @llvm.lifetime.end(i64 4, i8* %67) #1, !dbg !6644
  %68 = bitcast %struct.sockaddr_nl** %addr42 to i8*, !dbg !6644
  call void @llvm.lifetime.end(i64 8, i8* %68) #1, !dbg !6644
  br label %return

sw.bb.59:                                         ; preds = %LeafBlock.11, %LeafBlock.1
  %69 = bitcast %struct.sockaddr_in** %addr60 to i8*, !dbg !6645
  call void @llvm.lifetime.start(i64 8, i8* %69) #1, !dbg !6645
  call void @llvm.dbg.declare(metadata %struct.sockaddr_in** %addr60, metadata !1027, metadata !2310), !dbg !6646
  %70 = bitcast i8** %host to i8*, !dbg !6647
  call void @llvm.lifetime.start(i64 8, i8* %70) #1, !dbg !6647
  call void @llvm.dbg.declare(metadata i8** %host, metadata !1029, metadata !2310), !dbg !6648
  %71 = bitcast i32* %port to i8*, !dbg !6649
  call void @llvm.lifetime.start(i64 4, i8* %71) #1, !dbg !6649
  call void @llvm.dbg.declare(metadata i32* %port, metadata !1030, metadata !2310), !dbg !6650
  %72 = bitcast i32* %result to i8*, !dbg !6649
  call void @llvm.lifetime.start(i64 4, i8* %72) #1, !dbg !6649
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1031, metadata !2310), !dbg !6651
  %73 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6652, !tbaa !2326
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 1, !dbg !6654
  %74 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8, !dbg !6654, !tbaa !2318
  %tp_flags62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %74, i32 0, i32 19, !dbg !6655
  %75 = load i64, i64* %tp_flags62, align 8, !dbg !6655, !tbaa !5047
  %and63 = and i64 %75, 67108864, !dbg !6656
  %cmp64 = icmp ne i64 %and63, 0, !dbg !6657
  br i1 %cmp64, label %if.end.70, label %if.then.66, !dbg !6658

if.then.66:                                       ; preds = %sw.bb.59
  %76 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !6659, !tbaa !2326
  %77 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6661, !tbaa !2326
  %ob_type67 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 1, !dbg !6662
  %78 = load %struct._typeobject*, %struct._typeobject** %ob_type67, align 8, !dbg !6662, !tbaa !2318
  %tp_name68 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %78, i32 0, i32 1, !dbg !6663
  %79 = load i8*, i8** %tp_name68, align 8, !dbg !6663, !tbaa !6621
  %call69 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %76, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.316, i32 0, i32 0), i8* %79), !dbg !6664
  store i32 0, i32* %retval, !dbg !6665
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.87, !dbg !6665

if.end.70:                                        ; preds = %sw.bb.59
  %80 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6666, !tbaa !2326
  %call71 = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %80, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.317, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.318, i32 0, i32 0), i8** %host, i32* %port), !dbg !6668
  %tobool72 = icmp ne i32 %call71, 0, !dbg !6668
  br i1 %tobool72, label %if.end.74, label %if.then.73, !dbg !6669

if.then.73:                                       ; preds = %if.end.70
  store i32 0, i32* %retval, !dbg !6670
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.87, !dbg !6670

if.end.74:                                        ; preds = %if.end.70
  %81 = load %struct.sockaddr*, %struct.sockaddr** %addr_ret.addr, align 8, !dbg !6671, !tbaa !2326
  %82 = bitcast %struct.sockaddr* %81 to %struct.sockaddr_in*, !dbg !6672
  store %struct.sockaddr_in* %82, %struct.sockaddr_in** %addr60, align 8, !dbg !6673, !tbaa !2326
  %83 = load i8*, i8** %host, align 8, !dbg !6674, !tbaa !2326
  %84 = load %struct.sockaddr_in*, %struct.sockaddr_in** %addr60, align 8, !dbg !6675, !tbaa !2326
  %85 = bitcast %struct.sockaddr_in* %84 to %struct.sockaddr*, !dbg !6676
  %call75 = call i32 @setipaddr(i8* %83, %struct.sockaddr* %85, i64 16, i32 2), !dbg !6677
  store i32 %call75, i32* %result, align 4, !dbg !6678, !tbaa !3034
  %86 = load i8*, i8** %host, align 8, !dbg !6679, !tbaa !2326
  call void @PyMem_Free(i8* %86), !dbg !6680
  %87 = load i32, i32* %result, align 4, !dbg !6681, !tbaa !3034
  %cmp76 = icmp slt i32 %87, 0, !dbg !6683
  br i1 %cmp76, label %if.then.78, label %if.end.79, !dbg !6684

if.then.78:                                       ; preds = %if.end.74
  store i32 0, i32* %retval, !dbg !6685
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.87, !dbg !6685

if.end.79:                                        ; preds = %if.end.74
  %88 = load i32, i32* %port, align 4, !dbg !6686, !tbaa !3034
  %cmp80 = icmp slt i32 %88, 0, !dbg !6688
  br i1 %cmp80, label %if.then.84, label %lor.lhs.false, !dbg !6689

lor.lhs.false:                                    ; preds = %if.end.79
  %89 = load i32, i32* %port, align 4, !dbg !6690, !tbaa !3034
  %cmp82 = icmp sgt i32 %89, 65535, !dbg !6692
  br i1 %cmp82, label %if.then.84, label %if.end.85, !dbg !6693

if.then.84:                                       ; preds = %lor.lhs.false, %if.end.79
  %90 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !6694, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %90, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.319, i32 0, i32 0)), !dbg !6696
  store i32 0, i32* %retval, !dbg !6697
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.87, !dbg !6697

if.end.85:                                        ; preds = %lor.lhs.false
  %91 = load %struct.sockaddr_in*, %struct.sockaddr_in** %addr60, align 8, !dbg !6698, !tbaa !2326
  %sin_family = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %91, i32 0, i32 0, !dbg !6699
  store i16 2, i16* %sin_family, align 2, !dbg !6700, !tbaa !6701
  %92 = bitcast i16* %__v to i8*, !dbg !6702
  call void @llvm.lifetime.start(i64 2, i8* %92) #1, !dbg !6702
  call void @llvm.dbg.declare(metadata i16* %__v, metadata !1032, metadata !2310), !dbg !6703
  %93 = bitcast i16* %__x to i8*, !dbg !6702
  call void @llvm.lifetime.start(i64 2, i8* %93) #1, !dbg !6702
  call void @llvm.dbg.declare(metadata i16* %__x, metadata !1034, metadata !2310), !dbg !6704
  %94 = load i32, i32* %port, align 4, !dbg !6705, !tbaa !3034
  %conv86 = trunc i32 %94 to i16, !dbg !6706
  store i16 %conv86, i16* %__x, align 2, !dbg !6704, !tbaa !6057
  %95 = load i16, i16* %__x, align 2, !dbg !6707, !tbaa !6057
  %96 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %95) #2, !dbg !6709, !srcloc !6710
  store i16 %96, i16* %__v, align 2, !dbg !6709, !tbaa !6057
  %97 = load i16, i16* %__v, align 2, !dbg !6711, !tbaa !6057
  store i16 %97, i16* %tmp, !dbg !6712, !tbaa !6057
  %98 = bitcast i16* %__x to i8*, !dbg !6713
  call void @llvm.lifetime.end(i64 2, i8* %98) #1, !dbg !6713
  %99 = bitcast i16* %__v to i8*, !dbg !6713
  call void @llvm.lifetime.end(i64 2, i8* %99) #1, !dbg !6713
  %100 = load i16, i16* %tmp, !dbg !6714, !tbaa !6057
  %101 = load %struct.sockaddr_in*, %struct.sockaddr_in** %addr60, align 8, !dbg !6715, !tbaa !2326
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %101, i32 0, i32 1, !dbg !6716
  store i16 %100, i16* %sin_port, align 2, !dbg !6717, !tbaa !6054
  %102 = load i32*, i32** %len_ret.addr, align 8, !dbg !6718, !tbaa !2326
  store i32 16, i32* %102, align 4, !dbg !6719, !tbaa !3034
  store i32 1, i32* %retval, !dbg !6720
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.87, !dbg !6720

cleanup.87:                                       ; preds = %if.end.85, %if.then.84, %if.then.78, %if.then.73, %if.then.66
  %103 = bitcast i32* %result to i8*, !dbg !6721
  call void @llvm.lifetime.end(i64 4, i8* %103) #1, !dbg !6721
  %104 = bitcast i32* %port to i8*, !dbg !6721
  call void @llvm.lifetime.end(i64 4, i8* %104) #1, !dbg !6721
  %105 = bitcast i8** %host to i8*, !dbg !6721
  call void @llvm.lifetime.end(i64 8, i8* %105) #1, !dbg !6721
  %106 = bitcast %struct.sockaddr_in** %addr60 to i8*, !dbg !6721
  call void @llvm.lifetime.end(i64 8, i8* %106) #1, !dbg !6721
  br label %return

sw.bb.91:                                         ; preds = %LeafBlock.3
  %107 = bitcast %struct.sockaddr_in6** %addr93 to i8*, !dbg !6722
  call void @llvm.lifetime.start(i64 8, i8* %107) #1, !dbg !6722
  call void @llvm.dbg.declare(metadata %struct.sockaddr_in6** %addr93, metadata !1035, metadata !2310), !dbg !6723
  %108 = bitcast i8** %host95 to i8*, !dbg !6724
  call void @llvm.lifetime.start(i64 8, i8* %108) #1, !dbg !6724
  call void @llvm.dbg.declare(metadata i8** %host95, metadata !1037, metadata !2310), !dbg !6725
  %109 = bitcast i32* %port97 to i8*, !dbg !6726
  call void @llvm.lifetime.start(i64 4, i8* %109) #1, !dbg !6726
  call void @llvm.dbg.declare(metadata i32* %port97, metadata !1038, metadata !2310), !dbg !6727
  %110 = bitcast i32* %result99 to i8*, !dbg !6726
  call void @llvm.lifetime.start(i64 4, i8* %110) #1, !dbg !6726
  call void @llvm.dbg.declare(metadata i32* %result99, metadata !1039, metadata !2310), !dbg !6728
  %111 = bitcast i32* %flowinfo to i8*, !dbg !6729
  call void @llvm.lifetime.start(i64 4, i8* %111) #1, !dbg !6729
  call void @llvm.dbg.declare(metadata i32* %flowinfo, metadata !1040, metadata !2310), !dbg !6730
  %112 = bitcast i32* %scope_id to i8*, !dbg !6729
  call void @llvm.lifetime.start(i64 4, i8* %112) #1, !dbg !6729
  call void @llvm.dbg.declare(metadata i32* %scope_id, metadata !1041, metadata !2310), !dbg !6731
  store i32 0, i32* %scope_id, align 4, !dbg !6732, !tbaa !3034
  store i32 0, i32* %flowinfo, align 4, !dbg !6733, !tbaa !3034
  %113 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6734, !tbaa !2326
  %ob_type102 = getelementptr inbounds %struct._object, %struct._object* %113, i32 0, i32 1, !dbg !6736
  %114 = load %struct._typeobject*, %struct._typeobject** %ob_type102, align 8, !dbg !6736, !tbaa !2318
  %tp_flags103 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %114, i32 0, i32 19, !dbg !6737
  %115 = load i64, i64* %tp_flags103, align 8, !dbg !6737, !tbaa !5047
  %and104 = and i64 %115, 67108864, !dbg !6738
  %cmp105 = icmp ne i64 %and104, 0, !dbg !6739
  br i1 %cmp105, label %if.end.111, label %if.then.107, !dbg !6740

if.then.107:                                      ; preds = %sw.bb.91
  %116 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !6741, !tbaa !2326
  %117 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6743, !tbaa !2326
  %ob_type108 = getelementptr inbounds %struct._object, %struct._object* %117, i32 0, i32 1, !dbg !6744
  %118 = load %struct._typeobject*, %struct._typeobject** %ob_type108, align 8, !dbg !6744, !tbaa !2318
  %tp_name109 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %118, i32 0, i32 1, !dbg !6745
  %119 = load i8*, i8** %tp_name109, align 8, !dbg !6745, !tbaa !6621
  %call110 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %116, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.320, i32 0, i32 0), i8* %119), !dbg !6746
  store i32 0, i32* %retval, !dbg !6747
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.145, !dbg !6747

if.end.111:                                       ; preds = %sw.bb.91
  %120 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6748, !tbaa !2326
  %call112 = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %120, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.321, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.318, i32 0, i32 0), i8** %host95, i32* %port97, i32* %flowinfo, i32* %scope_id), !dbg !6750
  %tobool113 = icmp ne i32 %call112, 0, !dbg !6750
  br i1 %tobool113, label %if.end.115, label %if.then.114, !dbg !6751

if.then.114:                                      ; preds = %if.end.111
  store i32 0, i32* %retval, !dbg !6752
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.145, !dbg !6752

if.end.115:                                       ; preds = %if.end.111
  %121 = load %struct.sockaddr*, %struct.sockaddr** %addr_ret.addr, align 8, !dbg !6754, !tbaa !2326
  %122 = bitcast %struct.sockaddr* %121 to %struct.sockaddr_in6*, !dbg !6755
  store %struct.sockaddr_in6* %122, %struct.sockaddr_in6** %addr93, align 8, !dbg !6756, !tbaa !2326
  %123 = load i8*, i8** %host95, align 8, !dbg !6757, !tbaa !2326
  %124 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %addr93, align 8, !dbg !6758, !tbaa !2326
  %125 = bitcast %struct.sockaddr_in6* %124 to %struct.sockaddr*, !dbg !6759
  %call116 = call i32 @setipaddr(i8* %123, %struct.sockaddr* %125, i64 28, i32 10), !dbg !6760
  store i32 %call116, i32* %result99, align 4, !dbg !6761, !tbaa !3034
  %126 = load i8*, i8** %host95, align 8, !dbg !6762, !tbaa !2326
  call void @PyMem_Free(i8* %126), !dbg !6763
  %127 = load i32, i32* %result99, align 4, !dbg !6764, !tbaa !3034
  %cmp117 = icmp slt i32 %127, 0, !dbg !6766
  br i1 %cmp117, label %if.then.119, label %if.end.120, !dbg !6767

if.then.119:                                      ; preds = %if.end.115
  store i32 0, i32* %retval, !dbg !6768
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.145, !dbg !6768

if.end.120:                                       ; preds = %if.end.115
  %128 = load i32, i32* %port97, align 4, !dbg !6769, !tbaa !3034
  %cmp121 = icmp slt i32 %128, 0, !dbg !6771
  br i1 %cmp121, label %if.then.126, label %lor.lhs.false.123, !dbg !6772

lor.lhs.false.123:                                ; preds = %if.end.120
  %129 = load i32, i32* %port97, align 4, !dbg !6773, !tbaa !3034
  %cmp124 = icmp sgt i32 %129, 65535, !dbg !6775
  br i1 %cmp124, label %if.then.126, label %if.end.127, !dbg !6776

if.then.126:                                      ; preds = %lor.lhs.false.123, %if.end.120
  %130 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !6777, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %130, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.319, i32 0, i32 0)), !dbg !6779
  store i32 0, i32* %retval, !dbg !6780
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.145, !dbg !6780

if.end.127:                                       ; preds = %lor.lhs.false.123
  %131 = load i32, i32* %flowinfo, align 4, !dbg !6781, !tbaa !3034
  %cmp128 = icmp ugt i32 %131, 1048575, !dbg !6783
  br i1 %cmp128, label %if.then.130, label %if.end.131, !dbg !6784

if.then.130:                                      ; preds = %if.end.127
  %132 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !6785, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %132, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.322, i32 0, i32 0)), !dbg !6787
  store i32 0, i32* %retval, !dbg !6788
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.145, !dbg !6788

if.end.131:                                       ; preds = %if.end.127
  %133 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !6789, !tbaa !2326
  %sock_family132 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %133, i32 0, i32 2, !dbg !6790
  %134 = load i32, i32* %sock_family132, align 4, !dbg !6790, !tbaa !3014
  %conv133 = trunc i32 %134 to i16, !dbg !6789
  %135 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %addr93, align 8, !dbg !6791, !tbaa !2326
  %sin6_family = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %135, i32 0, i32 0, !dbg !6792
  store i16 %conv133, i16* %sin6_family, align 2, !dbg !6793, !tbaa !6794
  %136 = bitcast i16* %__v135 to i8*, !dbg !6795
  call void @llvm.lifetime.start(i64 2, i8* %136) #1, !dbg !6795
  call void @llvm.dbg.declare(metadata i16* %__v135, metadata !1042, metadata !2310), !dbg !6796
  %137 = bitcast i16* %__x137 to i8*, !dbg !6795
  call void @llvm.lifetime.start(i64 2, i8* %137) #1, !dbg !6795
  call void @llvm.dbg.declare(metadata i16* %__x137, metadata !1044, metadata !2310), !dbg !6797
  %138 = load i32, i32* %port97, align 4, !dbg !6798, !tbaa !3034
  %conv138 = trunc i32 %138 to i16, !dbg !6799
  store i16 %conv138, i16* %__x137, align 2, !dbg !6797, !tbaa !6057
  %139 = load i16, i16* %__x137, align 2, !dbg !6800, !tbaa !6057
  %140 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %139) #2, !dbg !6802, !srcloc !6803
  store i16 %140, i16* %__v135, align 2, !dbg !6802, !tbaa !6057
  %141 = load i16, i16* %__v135, align 2, !dbg !6804, !tbaa !6057
  store i16 %141, i16* %tmp139, !dbg !6805, !tbaa !6057
  %142 = bitcast i16* %__x137 to i8*, !dbg !6806
  call void @llvm.lifetime.end(i64 2, i8* %142) #1, !dbg !6806
  %143 = bitcast i16* %__v135 to i8*, !dbg !6806
  call void @llvm.lifetime.end(i64 2, i8* %143) #1, !dbg !6806
  %144 = load i16, i16* %tmp139, !dbg !6807, !tbaa !6057
  %145 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %addr93, align 8, !dbg !6808, !tbaa !2326
  %sin6_port = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %145, i32 0, i32 1, !dbg !6809
  store i16 %144, i16* %sin6_port, align 2, !dbg !6810, !tbaa !6153
  %146 = bitcast i32* %__v141 to i8*, !dbg !6811
  call void @llvm.lifetime.start(i64 4, i8* %146) #1, !dbg !6811
  call void @llvm.dbg.declare(metadata i32* %__v141, metadata !1045, metadata !2310), !dbg !6812
  %147 = bitcast i32* %__x143 to i8*, !dbg !6811
  call void @llvm.lifetime.start(i64 4, i8* %147) #1, !dbg !6811
  call void @llvm.dbg.declare(metadata i32* %__x143, metadata !1047, metadata !2310), !dbg !6813
  %148 = load i32, i32* %flowinfo, align 4, !dbg !6814, !tbaa !3034
  store i32 %148, i32* %__x143, align 4, !dbg !6813, !tbaa !3034
  %149 = load i32, i32* %__x143, align 4, !dbg !6815, !tbaa !3034
  %150 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %149) #2, !dbg !6817, !srcloc !6818
  store i32 %150, i32* %__v141, align 4, !dbg !6817, !tbaa !3034
  %151 = load i32, i32* %__v141, align 4, !dbg !6819, !tbaa !3034
  store i32 %151, i32* %tmp144, !dbg !6820, !tbaa !3034
  %152 = bitcast i32* %__x143 to i8*, !dbg !6821
  call void @llvm.lifetime.end(i64 4, i8* %152) #1, !dbg !6821
  %153 = bitcast i32* %__v141 to i8*, !dbg !6821
  call void @llvm.lifetime.end(i64 4, i8* %153) #1, !dbg !6821
  %154 = load i32, i32* %tmp144, !dbg !6822, !tbaa !3034
  %155 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %addr93, align 8, !dbg !6823, !tbaa !2326
  %sin6_flowinfo = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %155, i32 0, i32 2, !dbg !6824
  store i32 %154, i32* %sin6_flowinfo, align 4, !dbg !6825, !tbaa !6170
  %156 = load i32, i32* %scope_id, align 4, !dbg !6826, !tbaa !3034
  %157 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %addr93, align 8, !dbg !6827, !tbaa !2326
  %sin6_scope_id = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %157, i32 0, i32 4, !dbg !6828
  store i32 %156, i32* %sin6_scope_id, align 4, !dbg !6829, !tbaa !6181
  %158 = load i32*, i32** %len_ret.addr, align 8, !dbg !6830, !tbaa !2326
  store i32 28, i32* %158, align 4, !dbg !6831, !tbaa !3034
  store i32 1, i32* %retval, !dbg !6832
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.145, !dbg !6832

cleanup.145:                                      ; preds = %if.end.131, %if.then.130, %if.then.126, %if.then.119, %if.then.114, %if.then.107
  %159 = bitcast i32* %scope_id to i8*, !dbg !6833
  call void @llvm.lifetime.end(i64 4, i8* %159) #1, !dbg !6833
  %160 = bitcast i32* %flowinfo to i8*, !dbg !6833
  call void @llvm.lifetime.end(i64 4, i8* %160) #1, !dbg !6833
  %161 = bitcast i32* %result99 to i8*, !dbg !6833
  call void @llvm.lifetime.end(i64 4, i8* %161) #1, !dbg !6833
  %162 = bitcast i32* %port97 to i8*, !dbg !6833
  call void @llvm.lifetime.end(i64 4, i8* %162) #1, !dbg !6833
  %163 = bitcast i8** %host95 to i8*, !dbg !6833
  call void @llvm.lifetime.end(i64 8, i8* %163) #1, !dbg !6833
  %164 = bitcast %struct.sockaddr_in6** %addr93 to i8*, !dbg !6833
  call void @llvm.lifetime.end(i64 8, i8* %164) #1, !dbg !6833
  br label %return

sw.bb.151:                                        ; preds = %LeafBlock.9
  %165 = bitcast %struct.sockaddr_ll** %addr153 to i8*, !dbg !6834
  call void @llvm.lifetime.start(i64 8, i8* %165) #1, !dbg !6834
  call void @llvm.dbg.declare(metadata %struct.sockaddr_ll** %addr153, metadata !1048, metadata !2310), !dbg !6835
  %166 = bitcast %struct.ifreq* %ifr to i8*, !dbg !6836
  call void @llvm.lifetime.start(i64 40, i8* %166) #1, !dbg !6836
  call void @llvm.dbg.declare(metadata %struct.ifreq* %ifr, metadata !1050, metadata !2310), !dbg !6837
  %167 = bitcast i8** %interfaceName to i8*, !dbg !6838
  call void @llvm.lifetime.start(i64 8, i8* %167) #1, !dbg !6838
  call void @llvm.dbg.declare(metadata i8** %interfaceName, metadata !1051, metadata !2310), !dbg !6839
  %168 = bitcast i32* %protoNumber to i8*, !dbg !6840
  call void @llvm.lifetime.start(i64 4, i8* %168) #1, !dbg !6840
  call void @llvm.dbg.declare(metadata i32* %protoNumber, metadata !1052, metadata !2310), !dbg !6841
  %169 = bitcast i32* %hatype to i8*, !dbg !6842
  call void @llvm.lifetime.start(i64 4, i8* %169) #1, !dbg !6842
  call void @llvm.dbg.declare(metadata i32* %hatype, metadata !1053, metadata !2310), !dbg !6843
  store i32 0, i32* %hatype, align 4, !dbg !6843, !tbaa !3034
  %170 = bitcast i32* %pkttype to i8*, !dbg !6844
  call void @llvm.lifetime.start(i64 4, i8* %170) #1, !dbg !6844
  call void @llvm.dbg.declare(metadata i32* %pkttype, metadata !1054, metadata !2310), !dbg !6845
  store i32 0, i32* %pkttype, align 4, !dbg !6845, !tbaa !3034
  %171 = bitcast i8** %haddr to i8*, !dbg !6846
  call void @llvm.lifetime.start(i64 8, i8* %171) #1, !dbg !6846
  call void @llvm.dbg.declare(metadata i8** %haddr, metadata !1055, metadata !2310), !dbg !6847
  store i8* null, i8** %haddr, align 8, !dbg !6847, !tbaa !2326
  %172 = bitcast i32* %halen to i8*, !dbg !6848
  call void @llvm.lifetime.start(i64 4, i8* %172) #1, !dbg !6848
  call void @llvm.dbg.declare(metadata i32* %halen, metadata !1056, metadata !2310), !dbg !6849
  store i32 0, i32* %halen, align 4, !dbg !6849, !tbaa !3034
  %173 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6850, !tbaa !2326
  %ob_type161 = getelementptr inbounds %struct._object, %struct._object* %173, i32 0, i32 1, !dbg !6852
  %174 = load %struct._typeobject*, %struct._typeobject** %ob_type161, align 8, !dbg !6852, !tbaa !2318
  %tp_flags162 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %174, i32 0, i32 19, !dbg !6853
  %175 = load i64, i64* %tp_flags162, align 8, !dbg !6853, !tbaa !5047
  %and163 = and i64 %175, 67108864, !dbg !6854
  %cmp164 = icmp ne i64 %and163, 0, !dbg !6855
  br i1 %cmp164, label %if.end.170, label %if.then.166, !dbg !6856

if.then.166:                                      ; preds = %sw.bb.151
  %176 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !6857, !tbaa !2326
  %177 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6859, !tbaa !2326
  %ob_type167 = getelementptr inbounds %struct._object, %struct._object* %177, i32 0, i32 1, !dbg !6860
  %178 = load %struct._typeobject*, %struct._typeobject** %ob_type167, align 8, !dbg !6860, !tbaa !2318
  %tp_name168 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %178, i32 0, i32 1, !dbg !6861
  %179 = load i8*, i8** %tp_name168, align 8, !dbg !6861, !tbaa !6621
  %call169 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %176, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.323, i32 0, i32 0), i8* %179), !dbg !6862
  store i32 0, i32* %retval, !dbg !6863
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.210, !dbg !6863

if.end.170:                                       ; preds = %sw.bb.151
  %180 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6864, !tbaa !2326
  %call171 = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %180, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.324, i32 0, i32 0), i8** %interfaceName, i32* %protoNumber, i32* %pkttype, i32* %hatype, i8** %haddr, i32* %halen), !dbg !6866
  %tobool172 = icmp ne i32 %call171, 0, !dbg !6866
  br i1 %tobool172, label %if.end.174, label %if.then.173, !dbg !6867

if.then.173:                                      ; preds = %if.end.170
  store i32 0, i32* %retval, !dbg !6868
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.210, !dbg !6868

if.end.174:                                       ; preds = %if.end.170
  %ifr_ifrn = getelementptr inbounds %struct.ifreq, %struct.ifreq* %ifr, i32 0, i32 0, !dbg !6869
  %ifrn_name = bitcast %union.anon.1* %ifr_ifrn to [16 x i8]*, !dbg !6870
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %ifrn_name, i32 0, i32 0, !dbg !6871
  %181 = load i8*, i8** %interfaceName, align 8, !dbg !6872, !tbaa !2326
  %call175 = call i8* @strncpy(i8* %arraydecay, i8* %181, i64 16) #1, !dbg !6873
  %ifr_ifrn176 = getelementptr inbounds %struct.ifreq, %struct.ifreq* %ifr, i32 0, i32 0, !dbg !6874
  %ifrn_name177 = bitcast %union.anon.1* %ifr_ifrn176 to [16 x i8]*, !dbg !6875
  %arrayidx178 = getelementptr [16 x i8], [16 x i8]* %ifrn_name177, i32 0, i64 15, !dbg !6876
  store i8 0, i8* %arrayidx178, align 1, !dbg !6877, !tbaa !6104
  %182 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !6878, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %182, i32 0, i32 1, !dbg !6880
  %183 = load i32, i32* %sock_fd, align 4, !dbg !6880, !tbaa !2948
  %call179 = call i32 (i32, i64, ...) @ioctl(i32 %183, i64 35123, %struct.ifreq* %ifr) #1, !dbg !6881
  %cmp180 = icmp slt i32 %call179, 0, !dbg !6882
  br i1 %cmp180, label %if.then.182, label %if.end.184, !dbg !6883

if.then.182:                                      ; preds = %if.end.174
  %184 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !6884, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %184, i32 0, i32 5, !dbg !6886
  %185 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !6886, !tbaa !3181
  %call183 = call %struct._object* %185(), !dbg !6884
  store i32 0, i32* %retval, !dbg !6887
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.210, !dbg !6887

if.end.184:                                       ; preds = %if.end.174
  %186 = load i32, i32* %halen, align 4, !dbg !6888, !tbaa !3034
  %cmp185 = icmp ugt i32 %186, 8, !dbg !6890
  br i1 %cmp185, label %if.then.187, label %if.end.188, !dbg !6891

if.then.187:                                      ; preds = %if.end.184
  %187 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !6892, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %187, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.325, i32 0, i32 0)), !dbg !6894
  store i32 0, i32* %retval, !dbg !6895
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.210, !dbg !6895

if.end.188:                                       ; preds = %if.end.184
  %188 = load i32, i32* %protoNumber, align 4, !dbg !6896, !tbaa !3034
  %cmp189 = icmp slt i32 %188, 0, !dbg !6898
  br i1 %cmp189, label %if.then.194, label %lor.lhs.false.191, !dbg !6899

lor.lhs.false.191:                                ; preds = %if.end.188
  %189 = load i32, i32* %protoNumber, align 4, !dbg !6900, !tbaa !3034
  %cmp192 = icmp sgt i32 %189, 65535, !dbg !6902
  br i1 %cmp192, label %if.then.194, label %if.end.195, !dbg !6903

if.then.194:                                      ; preds = %lor.lhs.false.191, %if.end.188
  %190 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !6904, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %190, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.326, i32 0, i32 0)), !dbg !6906
  store i32 0, i32* %retval, !dbg !6907
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.210, !dbg !6907

if.end.195:                                       ; preds = %lor.lhs.false.191
  %191 = load %struct.sockaddr*, %struct.sockaddr** %addr_ret.addr, align 8, !dbg !6908, !tbaa !2326
  %192 = bitcast %struct.sockaddr* %191 to %struct.sockaddr_ll*, !dbg !6909
  store %struct.sockaddr_ll* %192, %struct.sockaddr_ll** %addr153, align 8, !dbg !6910, !tbaa !2326
  %193 = load %struct.sockaddr_ll*, %struct.sockaddr_ll** %addr153, align 8, !dbg !6911, !tbaa !2326
  %sll_family = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %193, i32 0, i32 0, !dbg !6912
  store i16 17, i16* %sll_family, align 2, !dbg !6913, !tbaa !6914
  %194 = bitcast i16* %__v197 to i8*, !dbg !6915
  call void @llvm.lifetime.start(i64 2, i8* %194) #1, !dbg !6915
  call void @llvm.dbg.declare(metadata i16* %__v197, metadata !1057, metadata !2310), !dbg !6916
  %195 = bitcast i16* %__x199 to i8*, !dbg !6915
  call void @llvm.lifetime.start(i64 2, i8* %195) #1, !dbg !6915
  call void @llvm.dbg.declare(metadata i16* %__x199, metadata !1059, metadata !2310), !dbg !6917
  %196 = load i32, i32* %protoNumber, align 4, !dbg !6918, !tbaa !3034
  %conv200 = trunc i32 %196 to i16, !dbg !6919
  store i16 %conv200, i16* %__x199, align 2, !dbg !6917, !tbaa !6057
  %197 = load i16, i16* %__x199, align 2, !dbg !6920, !tbaa !6057
  %198 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %197) #2, !dbg !6922, !srcloc !6923
  store i16 %198, i16* %__v197, align 2, !dbg !6922, !tbaa !6057
  %199 = load i16, i16* %__v197, align 2, !dbg !6924, !tbaa !6057
  store i16 %199, i16* %tmp201, !dbg !6925, !tbaa !6057
  %200 = bitcast i16* %__x199 to i8*, !dbg !6926
  call void @llvm.lifetime.end(i64 2, i8* %200) #1, !dbg !6926
  %201 = bitcast i16* %__v197 to i8*, !dbg !6926
  call void @llvm.lifetime.end(i64 2, i8* %201) #1, !dbg !6926
  %202 = load i16, i16* %tmp201, !dbg !6927, !tbaa !6057
  %203 = load %struct.sockaddr_ll*, %struct.sockaddr_ll** %addr153, align 8, !dbg !6928, !tbaa !2326
  %sll_protocol = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %203, i32 0, i32 1, !dbg !6929
  store i16 %202, i16* %sll_protocol, align 2, !dbg !6930, !tbaa !6249
  %ifr_ifru = getelementptr inbounds %struct.ifreq, %struct.ifreq* %ifr, i32 0, i32 1, !dbg !6931
  %ifru_ivalue = bitcast %union.anon.2* %ifr_ifru to i32*, !dbg !6932
  %204 = load i32, i32* %ifru_ivalue, align 4, !dbg !6932, !tbaa !3034
  %205 = load %struct.sockaddr_ll*, %struct.sockaddr_ll** %addr153, align 8, !dbg !6933, !tbaa !2326
  %sll_ifindex = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %205, i32 0, i32 2, !dbg !6934
  store i32 %204, i32* %sll_ifindex, align 4, !dbg !6935, !tbaa !6223
  %206 = load i32, i32* %pkttype, align 4, !dbg !6936, !tbaa !3034
  %conv202 = trunc i32 %206 to i8, !dbg !6936
  %207 = load %struct.sockaddr_ll*, %struct.sockaddr_ll** %addr153, align 8, !dbg !6937, !tbaa !2326
  %sll_pkttype = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %207, i32 0, i32 4, !dbg !6938
  store i8 %conv202, i8* %sll_pkttype, align 1, !dbg !6939, !tbaa !6261
  %208 = load i32, i32* %hatype, align 4, !dbg !6940, !tbaa !3034
  %conv203 = trunc i32 %208 to i16, !dbg !6940
  %209 = load %struct.sockaddr_ll*, %struct.sockaddr_ll** %addr153, align 8, !dbg !6941, !tbaa !2326
  %sll_hatype = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %209, i32 0, i32 3, !dbg !6942
  store i16 %conv203, i16* %sll_hatype, align 2, !dbg !6943, !tbaa !6264
  %210 = load i32, i32* %halen, align 4, !dbg !6944, !tbaa !3034
  %cmp204 = icmp ne i32 %210, 0, !dbg !6946
  br i1 %cmp204, label %if.then.206, label %if.end.208, !dbg !6947

if.then.206:                                      ; preds = %if.end.195
  %211 = load %struct.sockaddr_ll*, %struct.sockaddr_ll** %addr153, align 8, !dbg !6948, !tbaa !2326
  %sll_addr = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %211, i32 0, i32 6, !dbg !6950
  %212 = bitcast [8 x i8]* %sll_addr to i8*, !dbg !6951
  %213 = load i8*, i8** %haddr, align 8, !dbg !6952, !tbaa !2326
  %214 = load i32, i32* %halen, align 4, !dbg !6953, !tbaa !3034
  %conv207 = zext i32 %214 to i64, !dbg !6953
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %212, i8* %213, i64 %conv207, i32 1, i1 false), !dbg !6951
  br label %if.end.208, !dbg !6954

if.end.208:                                       ; preds = %if.then.206, %if.end.195
  %215 = load i32, i32* %halen, align 4, !dbg !6955, !tbaa !3034
  %conv209 = trunc i32 %215 to i8, !dbg !6955
  %216 = load %struct.sockaddr_ll*, %struct.sockaddr_ll** %addr153, align 8, !dbg !6956, !tbaa !2326
  %sll_halen = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %216, i32 0, i32 5, !dbg !6957
  store i8 %conv209, i8* %sll_halen, align 1, !dbg !6958, !tbaa !6269
  %217 = load i32*, i32** %len_ret.addr, align 8, !dbg !6959, !tbaa !2326
  store i32 20, i32* %217, align 4, !dbg !6960, !tbaa !3034
  store i32 1, i32* %retval, !dbg !6961
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.210, !dbg !6961

cleanup.210:                                      ; preds = %if.end.208, %if.then.194, %if.then.187, %if.then.182, %if.then.173, %if.then.166
  %218 = bitcast i32* %halen to i8*, !dbg !6962
  call void @llvm.lifetime.end(i64 4, i8* %218) #1, !dbg !6962
  %219 = bitcast i8** %haddr to i8*, !dbg !6962
  call void @llvm.lifetime.end(i64 8, i8* %219) #1, !dbg !6962
  %220 = bitcast i32* %pkttype to i8*, !dbg !6962
  call void @llvm.lifetime.end(i64 4, i8* %220) #1, !dbg !6962
  %221 = bitcast i32* %hatype to i8*, !dbg !6962
  call void @llvm.lifetime.end(i64 4, i8* %221) #1, !dbg !6962
  %222 = bitcast i32* %protoNumber to i8*, !dbg !6962
  call void @llvm.lifetime.end(i64 4, i8* %222) #1, !dbg !6962
  %223 = bitcast i8** %interfaceName to i8*, !dbg !6962
  call void @llvm.lifetime.end(i64 8, i8* %223) #1, !dbg !6962
  %224 = bitcast %struct.ifreq* %ifr to i8*, !dbg !6962
  call void @llvm.lifetime.end(i64 40, i8* %224) #1, !dbg !6962
  %225 = bitcast %struct.sockaddr_ll** %addr153 to i8*, !dbg !6962
  call void @llvm.lifetime.end(i64 8, i8* %225) #1, !dbg !6962
  br label %return

sw.bb.218:                                        ; preds = %LeafBlock.15
  %226 = bitcast i32* %atype to i8*, !dbg !6963
  call void @llvm.lifetime.start(i64 4, i8* %226) #1, !dbg !6963
  call void @llvm.dbg.declare(metadata i32* %atype, metadata !1060, metadata !2310), !dbg !6964
  %227 = bitcast i32* %v1 to i8*, !dbg !6963
  call void @llvm.lifetime.start(i64 4, i8* %227) #1, !dbg !6963
  call void @llvm.dbg.declare(metadata i32* %v1, metadata !1062, metadata !2310), !dbg !6965
  %228 = bitcast i32* %v2 to i8*, !dbg !6963
  call void @llvm.lifetime.start(i64 4, i8* %228) #1, !dbg !6963
  call void @llvm.dbg.declare(metadata i32* %v2, metadata !1063, metadata !2310), !dbg !6966
  %229 = bitcast i32* %v3 to i8*, !dbg !6963
  call void @llvm.lifetime.start(i64 4, i8* %229) #1, !dbg !6963
  call void @llvm.dbg.declare(metadata i32* %v3, metadata !1064, metadata !2310), !dbg !6967
  %230 = bitcast i32* %scope to i8*, !dbg !6968
  call void @llvm.lifetime.start(i64 4, i8* %230) #1, !dbg !6968
  call void @llvm.dbg.declare(metadata i32* %scope, metadata !1065, metadata !2310), !dbg !6969
  store i32 2, i32* %scope, align 4, !dbg !6969, !tbaa !3034
  %231 = bitcast %struct.sockaddr_tipc** %addr225 to i8*, !dbg !6970
  call void @llvm.lifetime.start(i64 8, i8* %231) #1, !dbg !6970
  call void @llvm.dbg.declare(metadata %struct.sockaddr_tipc** %addr225, metadata !1066, metadata !2310), !dbg !6971
  %232 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6972, !tbaa !2326
  %ob_type226 = getelementptr inbounds %struct._object, %struct._object* %232, i32 0, i32 1, !dbg !6974
  %233 = load %struct._typeobject*, %struct._typeobject** %ob_type226, align 8, !dbg !6974, !tbaa !2318
  %tp_flags227 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %233, i32 0, i32 19, !dbg !6975
  %234 = load i64, i64* %tp_flags227, align 8, !dbg !6975, !tbaa !5047
  %and228 = and i64 %234, 67108864, !dbg !6976
  %cmp229 = icmp ne i64 %and228, 0, !dbg !6977
  br i1 %cmp229, label %if.end.235, label %if.then.231, !dbg !6978

if.then.231:                                      ; preds = %sw.bb.218
  %235 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !6979, !tbaa !2326
  %236 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6981, !tbaa !2326
  %ob_type232 = getelementptr inbounds %struct._object, %struct._object* %236, i32 0, i32 1, !dbg !6982
  %237 = load %struct._typeobject*, %struct._typeobject** %ob_type232, align 8, !dbg !6982, !tbaa !2318
  %tp_name233 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %237, i32 0, i32 1, !dbg !6983
  %238 = load i8*, i8** %tp_name233, align 8, !dbg !6983, !tbaa !6621
  %call234 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %235, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.327, i32 0, i32 0), i8* %238), !dbg !6984
  store i32 0, i32* %retval, !dbg !6985
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.272, !dbg !6985

if.end.235:                                       ; preds = %sw.bb.218
  %239 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !6986, !tbaa !2326
  %call236 = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %239, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.328, i32 0, i32 0), i32* %atype, i32* %v1, i32* %v2, i32* %v3, i32* %scope), !dbg !6988
  %tobool237 = icmp ne i32 %call236, 0, !dbg !6988
  br i1 %tobool237, label %if.end.239, label %if.then.238, !dbg !6989

if.then.238:                                      ; preds = %if.end.235
  store i32 0, i32* %retval, !dbg !6990
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.272, !dbg !6990

if.end.239:                                       ; preds = %if.end.235
  %240 = load %struct.sockaddr*, %struct.sockaddr** %addr_ret.addr, align 8, !dbg !6991, !tbaa !2326
  %241 = bitcast %struct.sockaddr* %240 to %struct.sockaddr_tipc*, !dbg !6992
  store %struct.sockaddr_tipc* %241, %struct.sockaddr_tipc** %addr225, align 8, !dbg !6993, !tbaa !2326
  %242 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %addr225, align 8, !dbg !6994, !tbaa !2326
  %243 = bitcast %struct.sockaddr_tipc* %242 to i8*, !dbg !6995
  call void @llvm.memset.p0i8.i64(i8* %243, i8 0, i64 16, i32 4, i1 false), !dbg !6995
  %244 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %addr225, align 8, !dbg !6996, !tbaa !2326
  %family = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %244, i32 0, i32 0, !dbg !6997
  store i16 30, i16* %family, align 2, !dbg !6998, !tbaa !6999
  %245 = load i32, i32* %scope, align 4, !dbg !7000, !tbaa !3034
  %conv240 = trunc i32 %245 to i8, !dbg !7000
  %246 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %addr225, align 8, !dbg !7001, !tbaa !2326
  %scope241 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %246, i32 0, i32 2, !dbg !7002
  store i8 %conv240, i8* %scope241, align 1, !dbg !7003, !tbaa !6305
  %247 = load i32, i32* %atype, align 4, !dbg !7004, !tbaa !3034
  %conv242 = trunc i32 %247 to i8, !dbg !7004
  %248 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %addr225, align 8, !dbg !7005, !tbaa !2326
  %addrtype = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %248, i32 0, i32 1, !dbg !7006
  store i8 %conv242, i8* %addrtype, align 1, !dbg !7007, !tbaa !6280
  %249 = load i32, i32* %atype, align 4, !dbg !7008, !tbaa !3034
  %cmp243 = icmp eq i32 %249, 1, !dbg !7010
  br i1 %cmp243, label %if.then.245, label %if.else.251, !dbg !7011

if.then.245:                                      ; preds = %if.end.239
  %250 = load i32, i32* %v1, align 4, !dbg !7012, !tbaa !3034
  %251 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %addr225, align 8, !dbg !7014, !tbaa !2326
  %addr246 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %251, i32 0, i32 3, !dbg !7015
  %nameseq = bitcast %union.anon.3* %addr246 to %struct.tipc_name_seq*, !dbg !7016
  %type = getelementptr inbounds %struct.tipc_name_seq, %struct.tipc_name_seq* %nameseq, i32 0, i32 0, !dbg !7017
  store i32 %250, i32* %type, align 4, !dbg !7018, !tbaa !6291
  %252 = load i32, i32* %v2, align 4, !dbg !7019, !tbaa !3034
  %253 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %addr225, align 8, !dbg !7020, !tbaa !2326
  %addr247 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %253, i32 0, i32 3, !dbg !7021
  %nameseq248 = bitcast %union.anon.3* %addr247 to %struct.tipc_name_seq*, !dbg !7022
  %lower = getelementptr inbounds %struct.tipc_name_seq, %struct.tipc_name_seq* %nameseq248, i32 0, i32 1, !dbg !7023
  store i32 %252, i32* %lower, align 4, !dbg !7024, !tbaa !6297
  %254 = load i32, i32* %v3, align 4, !dbg !7025, !tbaa !3034
  %255 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %addr225, align 8, !dbg !7026, !tbaa !2326
  %addr249 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %255, i32 0, i32 3, !dbg !7027
  %nameseq250 = bitcast %union.anon.3* %addr249 to %struct.tipc_name_seq*, !dbg !7028
  %upper = getelementptr inbounds %struct.tipc_name_seq, %struct.tipc_name_seq* %nameseq250, i32 0, i32 2, !dbg !7029
  store i32 %254, i32* %upper, align 4, !dbg !7030, !tbaa !6302
  br label %if.end.271, !dbg !7031

if.else.251:                                      ; preds = %if.end.239
  %256 = load i32, i32* %atype, align 4, !dbg !7032, !tbaa !3034
  %cmp252 = icmp eq i32 %256, 2, !dbg !7034
  br i1 %cmp252, label %if.then.254, label %if.else.261, !dbg !7035

if.then.254:                                      ; preds = %if.else.251
  %257 = load i32, i32* %v1, align 4, !dbg !7036, !tbaa !3034
  %258 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %addr225, align 8, !dbg !7038, !tbaa !2326
  %addr255 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %258, i32 0, i32 3, !dbg !7039
  %name = bitcast %union.anon.3* %addr255 to %struct.anon.4*, !dbg !7040
  %name256 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %name, i32 0, i32 0, !dbg !7041
  %type257 = getelementptr inbounds %struct.tipc_name, %struct.tipc_name* %name256, i32 0, i32 0, !dbg !7042
  store i32 %257, i32* %type257, align 4, !dbg !7043, !tbaa !6321
  %259 = load i32, i32* %v2, align 4, !dbg !7044, !tbaa !3034
  %260 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %addr225, align 8, !dbg !7045, !tbaa !2326
  %addr258 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %260, i32 0, i32 3, !dbg !7046
  %name259 = bitcast %union.anon.3* %addr258 to %struct.anon.4*, !dbg !7047
  %name260 = getelementptr inbounds %struct.anon.4, %struct.anon.4* %name259, i32 0, i32 0, !dbg !7048
  %instance = getelementptr inbounds %struct.tipc_name, %struct.tipc_name* %name260, i32 0, i32 1, !dbg !7049
  store i32 %259, i32* %instance, align 4, !dbg !7050, !tbaa !6329
  br label %if.end.270, !dbg !7051

if.else.261:                                      ; preds = %if.else.251
  %261 = load i32, i32* %atype, align 4, !dbg !7052, !tbaa !3034
  %cmp262 = icmp eq i32 %261, 3, !dbg !7054
  br i1 %cmp262, label %if.then.264, label %if.else.268, !dbg !7055

if.then.264:                                      ; preds = %if.else.261
  %262 = load i32, i32* %v1, align 4, !dbg !7056, !tbaa !3034
  %263 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %addr225, align 8, !dbg !7058, !tbaa !2326
  %addr265 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %263, i32 0, i32 3, !dbg !7059
  %id = bitcast %union.anon.3* %addr265 to %struct.tipc_portid*, !dbg !7060
  %node = getelementptr inbounds %struct.tipc_portid, %struct.tipc_portid* %id, i32 0, i32 1, !dbg !7061
  store i32 %262, i32* %node, align 4, !dbg !7062, !tbaa !6351
  %264 = load i32, i32* %v2, align 4, !dbg !7063, !tbaa !3034
  %265 = load %struct.sockaddr_tipc*, %struct.sockaddr_tipc** %addr225, align 8, !dbg !7064, !tbaa !2326
  %addr266 = getelementptr inbounds %struct.sockaddr_tipc, %struct.sockaddr_tipc* %265, i32 0, i32 3, !dbg !7065
  %id267 = bitcast %union.anon.3* %addr266 to %struct.tipc_portid*, !dbg !7066
  %ref = getelementptr inbounds %struct.tipc_portid, %struct.tipc_portid* %id267, i32 0, i32 0, !dbg !7067
  store i32 %264, i32* %ref, align 4, !dbg !7068, !tbaa !6357
  br label %if.end.269, !dbg !7069

if.else.268:                                      ; preds = %if.else.261
  %266 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !7070, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %266, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.308, i32 0, i32 0)), !dbg !7072
  store i32 0, i32* %retval, !dbg !7073
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.272, !dbg !7073

if.end.269:                                       ; preds = %if.then.264
  br label %if.end.270

if.end.270:                                       ; preds = %if.end.269, %if.then.254
  br label %if.end.271

if.end.271:                                       ; preds = %if.end.270, %if.then.245
  %267 = load i32*, i32** %len_ret.addr, align 8, !dbg !7074, !tbaa !2326
  store i32 16, i32* %267, align 4, !dbg !7075, !tbaa !3034
  store i32 1, i32* %retval, !dbg !7076
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.272, !dbg !7076

cleanup.272:                                      ; preds = %if.end.271, %if.else.268, %if.then.238, %if.then.231
  %268 = bitcast %struct.sockaddr_tipc** %addr225 to i8*, !dbg !7077
  call void @llvm.lifetime.end(i64 8, i8* %268) #1, !dbg !7077
  %269 = bitcast i32* %scope to i8*, !dbg !7077
  call void @llvm.lifetime.end(i64 4, i8* %269) #1, !dbg !7077
  %270 = bitcast i32* %v3 to i8*, !dbg !7077
  call void @llvm.lifetime.end(i64 4, i8* %270) #1, !dbg !7077
  %271 = bitcast i32* %v2 to i8*, !dbg !7077
  call void @llvm.lifetime.end(i64 4, i8* %271) #1, !dbg !7077
  %272 = bitcast i32* %v1 to i8*, !dbg !7077
  call void @llvm.lifetime.end(i64 4, i8* %272) #1, !dbg !7077
  %273 = bitcast i32* %atype to i8*, !dbg !7077
  call void @llvm.lifetime.end(i64 4, i8* %273) #1, !dbg !7077
  br label %return

sw.bb.278:                                        ; preds = %NodeBlock.17
  %274 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7078, !tbaa !2326
  %sock_proto = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %274, i32 0, i32 4, !dbg !7079
  %275 = load i32, i32* %sock_proto, align 4, !dbg !7079, !tbaa !3020
  br label %LeafBlock.24

LeafBlock.24:                                     ; preds = %sw.bb.278
  %.off = add i32 %275, -1
  %SwitchLeaf25 = icmp ule i32 %.off, 1
  br i1 %SwitchLeaf25, label %sw.bb.279, label %NewDefault.23

sw.bb.279:                                        ; preds = %LeafBlock.24
  %276 = bitcast %struct.sockaddr_can** %addr281 to i8*, !dbg !7080
  call void @llvm.lifetime.start(i64 8, i8* %276) #1, !dbg !7080
  call void @llvm.dbg.declare(metadata %struct.sockaddr_can** %addr281, metadata !1067, metadata !2310), !dbg !7081
  %277 = bitcast %struct._object** %interfaceName283 to i8*, !dbg !7082
  call void @llvm.lifetime.start(i64 8, i8* %277) #1, !dbg !7082
  call void @llvm.dbg.declare(metadata %struct._object** %interfaceName283, metadata !1070, metadata !2310), !dbg !7083
  %278 = bitcast %struct.ifreq* %ifr285 to i8*, !dbg !7084
  call void @llvm.lifetime.start(i64 40, i8* %278) #1, !dbg !7084
  call void @llvm.dbg.declare(metadata %struct.ifreq* %ifr285, metadata !1071, metadata !2310), !dbg !7085
  %279 = bitcast i64* %len287 to i8*, !dbg !7086
  call void @llvm.lifetime.start(i64 8, i8* %279) #1, !dbg !7086
  call void @llvm.dbg.declare(metadata i64* %len287, metadata !1072, metadata !2310), !dbg !7087
  %280 = load %struct.sockaddr*, %struct.sockaddr** %addr_ret.addr, align 8, !dbg !7088, !tbaa !2326
  %281 = bitcast %struct.sockaddr* %280 to %struct.sockaddr_can*, !dbg !7089
  store %struct.sockaddr_can* %281, %struct.sockaddr_can** %addr281, align 8, !dbg !7090, !tbaa !2326
  %282 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !7091, !tbaa !2326
  %call288 = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %282, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.329, i32 0, i32 0), i32 (%struct._object*, i8*)* @PyUnicode_FSConverter, %struct._object** %interfaceName283), !dbg !7093
  %tobool289 = icmp ne i32 %call288, 0, !dbg !7093
  br i1 %tobool289, label %if.end.291, label %if.then.290, !dbg !7094

if.then.290:                                      ; preds = %sw.bb.279
  store i32 0, i32* %retval, !dbg !7095
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.364, !dbg !7095

if.end.291:                                       ; preds = %sw.bb.279
  %283 = load %struct._object*, %struct._object** %interfaceName283, align 8, !dbg !7096, !tbaa !2326
  %284 = bitcast %struct._object* %283 to %struct.PyVarObject*, !dbg !7097
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %284, i32 0, i32 1, !dbg !7098
  %285 = load i64, i64* %ob_size, align 8, !dbg !7098, !tbaa !5055
  store i64 %285, i64* %len287, align 8, !dbg !7099, !tbaa !2963
  %286 = load i64, i64* %len287, align 8, !dbg !7100, !tbaa !2963
  %cmp292 = icmp eq i64 %286, 0, !dbg !7101
  br i1 %cmp292, label %if.then.294, label %if.else.297, !dbg !7102

if.then.294:                                      ; preds = %if.end.291
  %ifr_ifru295 = getelementptr inbounds %struct.ifreq, %struct.ifreq* %ifr285, i32 0, i32 1, !dbg !7103
  %ifru_ivalue296 = bitcast %union.anon.2* %ifr_ifru295 to i32*, !dbg !7105
  store i32 0, i32* %ifru_ivalue296, align 4, !dbg !7106, !tbaa !3034
  br label %if.end.347, !dbg !7107

if.else.297:                                      ; preds = %if.end.291
  %287 = load i64, i64* %len287, align 8, !dbg !7108, !tbaa !2963
  %cmp298 = icmp ult i64 %287, 16, !dbg !7109
  br i1 %cmp298, label %if.then.300, label %if.else.331, !dbg !7110

if.then.300:                                      ; preds = %if.else.297
  %ifr_ifrn301 = getelementptr inbounds %struct.ifreq, %struct.ifreq* %ifr285, i32 0, i32 0, !dbg !7111
  %ifrn_name302 = bitcast %union.anon.1* %ifr_ifrn301 to [16 x i8]*, !dbg !7112
  %arraydecay303 = getelementptr inbounds [16 x i8], [16 x i8]* %ifrn_name302, i32 0, i32 0, !dbg !7113
  %288 = load %struct._object*, %struct._object** %interfaceName283, align 8, !dbg !7114, !tbaa !2326
  %289 = bitcast %struct._object* %288 to %struct.PyBytesObject*, !dbg !7115
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %289, i32 0, i32 2, !dbg !7116
  %arraydecay304 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !7117
  %call305 = call i8* @strncpy(i8* %arraydecay303, i8* %arraydecay304, i64 16) #1, !dbg !7118
  %ifr_ifrn306 = getelementptr inbounds %struct.ifreq, %struct.ifreq* %ifr285, i32 0, i32 0, !dbg !7119
  %ifrn_name307 = bitcast %union.anon.1* %ifr_ifrn306 to [16 x i8]*, !dbg !7120
  %arrayidx308 = getelementptr [16 x i8], [16 x i8]* %ifrn_name307, i32 0, i64 15, !dbg !7121
  store i8 0, i8* %arrayidx308, align 1, !dbg !7122, !tbaa !6104
  %290 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7123, !tbaa !2326
  %sock_fd309 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %290, i32 0, i32 1, !dbg !7124
  %291 = load i32, i32* %sock_fd309, align 4, !dbg !7124, !tbaa !2948
  %call310 = call i32 (i32, i64, ...) @ioctl(i32 %291, i64 35123, %struct.ifreq* %ifr285) #1, !dbg !7125
  %cmp311 = icmp slt i32 %call310, 0, !dbg !7126
  br i1 %cmp311, label %if.then.313, label %if.end.330, !dbg !7127

if.then.313:                                      ; preds = %if.then.300
  %292 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7128, !tbaa !2326
  %errorhandler314 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %292, i32 0, i32 5, !dbg !7129
  %293 = load %struct._object* ()*, %struct._object* ()** %errorhandler314, align 8, !dbg !7129, !tbaa !3181
  %call315 = call %struct._object* %293(), !dbg !7128
  br label %do.body.316, !dbg !7130

do.body.316:                                      ; preds = %if.then.313
  %294 = bitcast %struct._object** %_py_decref_tmp318 to i8*, !dbg !7131
  call void @llvm.lifetime.start(i64 8, i8* %294) #1, !dbg !7131
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp318, metadata !1073, metadata !2310), !dbg !7133
  %295 = load %struct._object*, %struct._object** %interfaceName283, align 8, !dbg !7134, !tbaa !2326
  store %struct._object* %295, %struct._object** %_py_decref_tmp318, align 8, !dbg !7133, !tbaa !2326
  %296 = load %struct._object*, %struct._object** %_py_decref_tmp318, align 8, !dbg !7135, !tbaa !2326
  %ob_refcnt319 = getelementptr inbounds %struct._object, %struct._object* %296, i32 0, i32 0, !dbg !7137
  %297 = load i64, i64* %ob_refcnt319, align 8, !dbg !7138, !tbaa !2335
  %dec320 = add i64 %297, -1, !dbg !7138
  store i64 %dec320, i64* %ob_refcnt319, align 8, !dbg !7138, !tbaa !2335
  %cmp321 = icmp ne i64 %dec320, 0, !dbg !7139
  br i1 %cmp321, label %if.then.323, label %if.else.324, !dbg !7140

if.then.323:                                      ; preds = %do.body.316
  br label %if.end.327, !dbg !7141

if.else.324:                                      ; preds = %do.body.316
  %298 = load %struct._object*, %struct._object** %_py_decref_tmp318, align 8, !dbg !7143, !tbaa !2326
  %ob_type325 = getelementptr inbounds %struct._object, %struct._object* %298, i32 0, i32 1, !dbg !7145
  %299 = load %struct._typeobject*, %struct._typeobject** %ob_type325, align 8, !dbg !7145, !tbaa !2318
  %tp_dealloc326 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %299, i32 0, i32 4, !dbg !7146
  %300 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc326, align 8, !dbg !7146, !tbaa !3442
  %301 = load %struct._object*, %struct._object** %_py_decref_tmp318, align 8, !dbg !7147, !tbaa !2326
  call void %300(%struct._object* %301), !dbg !7148
  br label %if.end.327

if.end.327:                                       ; preds = %if.else.324, %if.then.323
  %302 = bitcast %struct._object** %_py_decref_tmp318 to i8*, !dbg !7149
  call void @llvm.lifetime.end(i64 8, i8* %302) #1, !dbg !7149
  br label %do.cond.328, !dbg !7151

do.cond.328:                                      ; preds = %if.end.327
  br label %do.end.329, !dbg !7152

do.end.329:                                       ; preds = %do.cond.328
  store i32 0, i32* %retval, !dbg !7154
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.364, !dbg !7154

if.end.330:                                       ; preds = %if.then.300
  br label %if.end.346, !dbg !7155

if.else.331:                                      ; preds = %if.else.297
  %303 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !7156, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %303, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.330, i32 0, i32 0)), !dbg !7157
  br label %do.body.332, !dbg !7158

do.body.332:                                      ; preds = %if.else.331
  %304 = bitcast %struct._object** %_py_decref_tmp334 to i8*, !dbg !7159
  call void @llvm.lifetime.start(i64 8, i8* %304) #1, !dbg !7159
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp334, metadata !1080, metadata !2310), !dbg !7161
  %305 = load %struct._object*, %struct._object** %interfaceName283, align 8, !dbg !7162, !tbaa !2326
  store %struct._object* %305, %struct._object** %_py_decref_tmp334, align 8, !dbg !7161, !tbaa !2326
  %306 = load %struct._object*, %struct._object** %_py_decref_tmp334, align 8, !dbg !7163, !tbaa !2326
  %ob_refcnt335 = getelementptr inbounds %struct._object, %struct._object* %306, i32 0, i32 0, !dbg !7165
  %307 = load i64, i64* %ob_refcnt335, align 8, !dbg !7166, !tbaa !2335
  %dec336 = add i64 %307, -1, !dbg !7166
  store i64 %dec336, i64* %ob_refcnt335, align 8, !dbg !7166, !tbaa !2335
  %cmp337 = icmp ne i64 %dec336, 0, !dbg !7167
  br i1 %cmp337, label %if.then.339, label %if.else.340, !dbg !7168

if.then.339:                                      ; preds = %do.body.332
  br label %if.end.343, !dbg !7169

if.else.340:                                      ; preds = %do.body.332
  %308 = load %struct._object*, %struct._object** %_py_decref_tmp334, align 8, !dbg !7171, !tbaa !2326
  %ob_type341 = getelementptr inbounds %struct._object, %struct._object* %308, i32 0, i32 1, !dbg !7173
  %309 = load %struct._typeobject*, %struct._typeobject** %ob_type341, align 8, !dbg !7173, !tbaa !2318
  %tp_dealloc342 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %309, i32 0, i32 4, !dbg !7174
  %310 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc342, align 8, !dbg !7174, !tbaa !3442
  %311 = load %struct._object*, %struct._object** %_py_decref_tmp334, align 8, !dbg !7175, !tbaa !2326
  call void %310(%struct._object* %311), !dbg !7176
  br label %if.end.343

if.end.343:                                       ; preds = %if.else.340, %if.then.339
  %312 = bitcast %struct._object** %_py_decref_tmp334 to i8*, !dbg !7177
  call void @llvm.lifetime.end(i64 8, i8* %312) #1, !dbg !7177
  br label %do.cond.344, !dbg !7179

do.cond.344:                                      ; preds = %if.end.343
  br label %do.end.345, !dbg !7180

do.end.345:                                       ; preds = %do.cond.344
  store i32 0, i32* %retval, !dbg !7182
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.364, !dbg !7182

if.end.346:                                       ; preds = %if.end.330
  br label %if.end.347

if.end.347:                                       ; preds = %if.end.346, %if.then.294
  %313 = load %struct.sockaddr_can*, %struct.sockaddr_can** %addr281, align 8, !dbg !7183, !tbaa !2326
  %can_family = getelementptr inbounds %struct.sockaddr_can, %struct.sockaddr_can* %313, i32 0, i32 0, !dbg !7184
  store i16 29, i16* %can_family, align 2, !dbg !7185, !tbaa !6401
  %ifr_ifru348 = getelementptr inbounds %struct.ifreq, %struct.ifreq* %ifr285, i32 0, i32 1, !dbg !7186
  %ifru_ivalue349 = bitcast %union.anon.2* %ifr_ifru348 to i32*, !dbg !7187
  %314 = load i32, i32* %ifru_ivalue349, align 4, !dbg !7187, !tbaa !3034
  %315 = load %struct.sockaddr_can*, %struct.sockaddr_can** %addr281, align 8, !dbg !7188, !tbaa !2326
  %can_ifindex = getelementptr inbounds %struct.sockaddr_can, %struct.sockaddr_can* %315, i32 0, i32 1, !dbg !7189
  store i32 %314, i32* %can_ifindex, align 4, !dbg !7190, !tbaa !6378
  %316 = load i32*, i32** %len_ret.addr, align 8, !dbg !7191, !tbaa !2326
  store i32 16, i32* %316, align 4, !dbg !7192, !tbaa !3034
  br label %do.body.350, !dbg !7193

do.body.350:                                      ; preds = %if.end.347
  %317 = bitcast %struct._object** %_py_decref_tmp352 to i8*, !dbg !7194
  call void @llvm.lifetime.start(i64 8, i8* %317) #1, !dbg !7194
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp352, metadata !1083, metadata !2310), !dbg !7196
  %318 = load %struct._object*, %struct._object** %interfaceName283, align 8, !dbg !7197, !tbaa !2326
  store %struct._object* %318, %struct._object** %_py_decref_tmp352, align 8, !dbg !7196, !tbaa !2326
  %319 = load %struct._object*, %struct._object** %_py_decref_tmp352, align 8, !dbg !7198, !tbaa !2326
  %ob_refcnt353 = getelementptr inbounds %struct._object, %struct._object* %319, i32 0, i32 0, !dbg !7200
  %320 = load i64, i64* %ob_refcnt353, align 8, !dbg !7201, !tbaa !2335
  %dec354 = add i64 %320, -1, !dbg !7201
  store i64 %dec354, i64* %ob_refcnt353, align 8, !dbg !7201, !tbaa !2335
  %cmp355 = icmp ne i64 %dec354, 0, !dbg !7202
  br i1 %cmp355, label %if.then.357, label %if.else.358, !dbg !7203

if.then.357:                                      ; preds = %do.body.350
  br label %if.end.361, !dbg !7204

if.else.358:                                      ; preds = %do.body.350
  %321 = load %struct._object*, %struct._object** %_py_decref_tmp352, align 8, !dbg !7206, !tbaa !2326
  %ob_type359 = getelementptr inbounds %struct._object, %struct._object* %321, i32 0, i32 1, !dbg !7208
  %322 = load %struct._typeobject*, %struct._typeobject** %ob_type359, align 8, !dbg !7208, !tbaa !2318
  %tp_dealloc360 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %322, i32 0, i32 4, !dbg !7209
  %323 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc360, align 8, !dbg !7209, !tbaa !3442
  %324 = load %struct._object*, %struct._object** %_py_decref_tmp352, align 8, !dbg !7210, !tbaa !2326
  call void %323(%struct._object* %324), !dbg !7211
  br label %if.end.361

if.end.361:                                       ; preds = %if.else.358, %if.then.357
  %325 = bitcast %struct._object** %_py_decref_tmp352 to i8*, !dbg !7212
  call void @llvm.lifetime.end(i64 8, i8* %325) #1, !dbg !7212
  br label %do.cond.362, !dbg !7214

do.cond.362:                                      ; preds = %if.end.361
  br label %do.end.363, !dbg !7215

do.end.363:                                       ; preds = %do.cond.362
  store i32 1, i32* %retval, !dbg !7217
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.364, !dbg !7217

cleanup.364:                                      ; preds = %do.end.363, %do.end.345, %do.end.329, %if.then.290
  %326 = bitcast i64* %len287 to i8*, !dbg !7218
  call void @llvm.lifetime.end(i64 8, i8* %326) #1, !dbg !7218
  %327 = bitcast %struct.ifreq* %ifr285 to i8*, !dbg !7218
  call void @llvm.lifetime.end(i64 40, i8* %327) #1, !dbg !7218
  %328 = bitcast %struct._object** %interfaceName283 to i8*, !dbg !7218
  call void @llvm.lifetime.end(i64 8, i8* %328) #1, !dbg !7218
  %329 = bitcast %struct.sockaddr_can** %addr281 to i8*, !dbg !7218
  call void @llvm.lifetime.end(i64 8, i8* %329) #1, !dbg !7218
  br label %return

NewDefault.23:                                    ; preds = %LeafBlock.24
  br label %sw.default

sw.default:                                       ; preds = %NewDefault.23
  %330 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !7219, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %330, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.331, i32 0, i32 0)), !dbg !7220
  store i32 0, i32* %retval, !dbg !7221
  br label %return, !dbg !7221

NewDefault:                                       ; preds = %LeafBlock.15, %LeafBlock.11, %LeafBlock.9, %LeafBlock.3, %LeafBlock.1, %LeafBlock
  br label %sw.default.368

sw.default.368:                                   ; preds = %NewDefault
  %331 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !7222, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %331, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.332, i32 0, i32 0)), !dbg !7223
  store i32 0, i32* %retval, !dbg !7224
  br label %return, !dbg !7224

return:                                           ; preds = %sw.default.368, %sw.default, %cleanup.364, %cleanup.272, %cleanup.210, %cleanup.145, %cleanup.87, %cleanup.56, %cleanup
  %332 = load i32, i32* %retval, !dbg !7225
  ret i32 %332, !dbg !7225
}

; Function Attrs: nounwind
declare i32 @bind(i32, %struct.sockaddr*, i32) #5

declare %struct._object* @PyUnicode_EncodeFSDefault(%struct._object*) #3

declare i32 @PyArg_Parse(%struct._object*, i8*, ...) #3

declare %struct._object* @PyErr_Format(%struct._object*, i8*, ...) #3

declare i32 @PyArg_ParseTuple(%struct._object*, i8*, ...) #3

; Function Attrs: nounwind uwtable
define internal i32 @setipaddr(i8* %name, %struct.sockaddr* %addr_ret, i64 %addr_ret_size, i32 %af) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %addr_ret.addr = alloca %struct.sockaddr*, align 8
  %addr_ret_size.addr = alloca i64, align 8
  %af.addr = alloca i32, align 4
  %hints = alloca %struct.addrinfo, align 8
  %res = alloca %struct.addrinfo*, align 8
  %error = alloca i32, align 4
  %siz = alloca i32, align 4
  %_save = alloca %struct._ts*, align 8
  %cleanup.dest.slot = alloca i32
  %__s1_len = alloca i64, align 8
  %__s2_len = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__s1 = alloca i8*, align 8
  %__result = alloca i32, align 4
  %tmp58 = alloca i32, align 4
  %__s1_len63 = alloca i64, align 8
  %__s2_len65 = alloca i64, align 8
  %tmp66 = alloca i32, align 4
  %__s172 = alloca i8*, align 8
  %__result74 = alloca i32, align 4
  %tmp112 = alloca i32, align 4
  %sin = alloca %struct.sockaddr_in*, align 8
  %sin137 = alloca %struct.sockaddr_in*, align 8
  %sin161 = alloca %struct.sockaddr_in6*, align 8
  %_save173 = alloca %struct._ts*, align 8
  store i8* %name, i8** %name.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1089, metadata !2310), !dbg !7226
  store %struct.sockaddr* %addr_ret, %struct.sockaddr** %addr_ret.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.sockaddr** %addr_ret.addr, metadata !1090, metadata !2310), !dbg !7227
  store i64 %addr_ret_size, i64* %addr_ret_size.addr, align 8, !tbaa !2963
  call void @llvm.dbg.declare(metadata i64* %addr_ret_size.addr, metadata !1091, metadata !2310), !dbg !7228
  store i32 %af, i32* %af.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %af.addr, metadata !1092, metadata !2310), !dbg !7229
  %0 = bitcast %struct.addrinfo* %hints to i8*, !dbg !7230
  call void @llvm.lifetime.start(i64 48, i8* %0) #1, !dbg !7230
  call void @llvm.dbg.declare(metadata %struct.addrinfo* %hints, metadata !1093, metadata !2310), !dbg !7231
  %1 = bitcast %struct.addrinfo** %res to i8*, !dbg !7230
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !7230
  call void @llvm.dbg.declare(metadata %struct.addrinfo** %res, metadata !1106, metadata !2310), !dbg !7232
  %2 = bitcast i32* %error to i8*, !dbg !7233
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !7233
  call void @llvm.dbg.declare(metadata i32* %error, metadata !1107, metadata !2310), !dbg !7234
  %3 = load %struct.sockaddr*, %struct.sockaddr** %addr_ret.addr, align 8, !dbg !7235, !tbaa !2326
  %4 = bitcast %struct.sockaddr* %3 to i8*, !dbg !7236
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 16, i32 1, i1 false), !dbg !7237
  %5 = load i8*, i8** %name.addr, align 8, !dbg !7238, !tbaa !2326
  %arrayidx = getelementptr i8, i8* %5, i64 0, !dbg !7238
  %6 = load i8, i8* %arrayidx, align 1, !dbg !7238, !tbaa !6104
  %conv = sext i8 %6 to i32, !dbg !7238
  %cmp = icmp eq i32 %conv, 0, !dbg !7239
  br i1 %cmp, label %if.then, label %if.end.17, !dbg !7240

if.then:                                          ; preds = %entry
  %7 = bitcast i32* %siz to i8*, !dbg !7241
  call void @llvm.lifetime.start(i64 4, i8* %7) #1, !dbg !7241
  call void @llvm.dbg.declare(metadata i32* %siz, metadata !1108, metadata !2310), !dbg !7242
  %8 = bitcast %struct.addrinfo* %hints to i8*, !dbg !7243
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 48, i32 8, i1 false), !dbg !7243
  %9 = load i32, i32* %af.addr, align 4, !dbg !7244, !tbaa !3034
  %ai_family = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %hints, i32 0, i32 1, !dbg !7245
  store i32 %9, i32* %ai_family, align 4, !dbg !7246, !tbaa !7247
  %ai_socktype = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %hints, i32 0, i32 2, !dbg !7249
  store i32 2, i32* %ai_socktype, align 4, !dbg !7250, !tbaa !7251
  %ai_flags = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %hints, i32 0, i32 0, !dbg !7252
  store i32 1, i32* %ai_flags, align 4, !dbg !7253, !tbaa !7254
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !7255
  call void @llvm.lifetime.start(i64 8, i8* %10) #1, !dbg !7255
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1111, metadata !2310), !dbg !7256
  %call = call %struct._ts* @PyEval_SaveThread(), !dbg !7257
  store %struct._ts* %call, %struct._ts** %_save, align 8, !dbg !7258, !tbaa !2326
  %call2 = call i32 @getaddrinfo(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.333, i32 0, i32 0), %struct.addrinfo* %hints, %struct.addrinfo** %res), !dbg !7259
  store i32 %call2, i32* %error, align 4, !dbg !7260, !tbaa !3034
  %11 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !7261, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %11), !dbg !7262
  %12 = bitcast %struct._ts** %_save to i8*, !dbg !7263
  call void @llvm.lifetime.end(i64 8, i8* %12) #1, !dbg !7263
  %13 = load i32, i32* %error, align 4, !dbg !7264, !tbaa !3034
  %tobool = icmp ne i32 %13, 0, !dbg !7264
  br i1 %tobool, label %if.then.3, label %if.end, !dbg !7266

if.then.3:                                        ; preds = %if.then
  %14 = load i32, i32* %error, align 4, !dbg !7267, !tbaa !3034
  %call4 = call %struct._object* @set_gaierror(i32 %14), !dbg !7269
  store i32 -1, i32* %retval, !dbg !7270
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7270

if.end:                                           ; preds = %if.then
  %15 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !7271, !tbaa !2326
  %ai_family5 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %15, i32 0, i32 1, !dbg !7272
  %16 = load i32, i32* %ai_family5, align 4, !dbg !7272, !tbaa !7247
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end
  %Pivot = icmp slt i32 %16, 10
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %16, 10
  br i1 %SwitchLeaf2, label %sw.bb.6, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %16, 2
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  store i32 4, i32* %siz, align 4, !dbg !7273, !tbaa !3034
  br label %sw.epilog, !dbg !7275

sw.bb.6:                                          ; preds = %LeafBlock.1
  store i32 16, i32* %siz, align 4, !dbg !7276, !tbaa !3034
  br label %sw.epilog, !dbg !7277

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  %17 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !7278, !tbaa !2326
  call void @freeaddrinfo(%struct.addrinfo* %17) #1, !dbg !7279
  %18 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !7280, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %18, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.334, i32 0, i32 0)), !dbg !7281
  store i32 -1, i32* %retval, !dbg !7282
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7282

sw.epilog:                                        ; preds = %sw.bb.6, %sw.bb
  %19 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !7283, !tbaa !2326
  %ai_next = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %19, i32 0, i32 7, !dbg !7285
  %20 = load %struct.addrinfo*, %struct.addrinfo** %ai_next, align 8, !dbg !7285, !tbaa !7286
  %tobool7 = icmp ne %struct.addrinfo* %20, null, !dbg !7283
  br i1 %tobool7, label %if.then.8, label %if.end.9, !dbg !7287

if.then.8:                                        ; preds = %sw.epilog
  %21 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !7288, !tbaa !2326
  call void @freeaddrinfo(%struct.addrinfo* %21) #1, !dbg !7290
  %22 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !7291, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %22, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.335, i32 0, i32 0)), !dbg !7292
  store i32 -1, i32* %retval, !dbg !7293
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7293

if.end.9:                                         ; preds = %sw.epilog
  %23 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !7294, !tbaa !2326
  %ai_addrlen = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %23, i32 0, i32 4, !dbg !7296
  %24 = load i32, i32* %ai_addrlen, align 4, !dbg !7296, !tbaa !7297
  %conv10 = zext i32 %24 to i64, !dbg !7294
  %25 = load i64, i64* %addr_ret_size.addr, align 8, !dbg !7298, !tbaa !2963
  %cmp11 = icmp ult i64 %conv10, %25, !dbg !7299
  br i1 %cmp11, label %if.then.13, label %if.end.16, !dbg !7300

if.then.13:                                       ; preds = %if.end.9
  %26 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !7301, !tbaa !2326
  %ai_addrlen14 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %26, i32 0, i32 4, !dbg !7302
  %27 = load i32, i32* %ai_addrlen14, align 4, !dbg !7302, !tbaa !7297
  %conv15 = zext i32 %27 to i64, !dbg !7301
  store i64 %conv15, i64* %addr_ret_size.addr, align 8, !dbg !7303, !tbaa !2963
  br label %if.end.16, !dbg !7304

if.end.16:                                        ; preds = %if.then.13, %if.end.9
  %28 = load %struct.sockaddr*, %struct.sockaddr** %addr_ret.addr, align 8, !dbg !7305, !tbaa !2326
  %29 = bitcast %struct.sockaddr* %28 to i8*, !dbg !7306
  %30 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !7307, !tbaa !2326
  %ai_addr = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %30, i32 0, i32 5, !dbg !7308
  %31 = load %struct.sockaddr*, %struct.sockaddr** %ai_addr, align 8, !dbg !7308, !tbaa !7309
  %32 = bitcast %struct.sockaddr* %31 to i8*, !dbg !7306
  %33 = load i64, i64* %addr_ret_size.addr, align 8, !dbg !7310, !tbaa !2963
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %32, i64 %33, i32 2, i1 false), !dbg !7306
  %34 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !7311, !tbaa !2326
  call void @freeaddrinfo(%struct.addrinfo* %34) #1, !dbg !7312
  %35 = load i32, i32* %siz, align 4, !dbg !7313, !tbaa !3034
  store i32 %35, i32* %retval, !dbg !7314
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7314

cleanup:                                          ; preds = %if.end.16, %if.then.8, %sw.default, %if.then.3
  %36 = bitcast i32* %siz to i8*, !dbg !7315
  call void @llvm.lifetime.end(i64 4, i8* %36) #1, !dbg !7315
  br label %cleanup.193

if.end.17:                                        ; preds = %entry
  %37 = bitcast i64* %__s1_len to i8*, !dbg !7316
  call void @llvm.lifetime.start(i64 8, i8* %37) #1, !dbg !7316
  call void @llvm.dbg.declare(metadata i64* %__s1_len, metadata !1113, metadata !2310), !dbg !7317
  %38 = bitcast i64* %__s2_len to i8*, !dbg !7316
  call void @llvm.lifetime.start(i64 8, i8* %38) #1, !dbg !7316
  call void @llvm.dbg.declare(metadata i64* %__s2_len, metadata !1116, metadata !2310), !dbg !7318
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.336, i32 0, i64 1) to i64), i64 ptrtoint ([16 x i8]* @.str.336 to i64)), i64 1), label %land.lhs.true, label %cond.false, !dbg !7319

land.lhs.true:                                    ; preds = %if.end.17
  store i64 15, i64* %__s2_len, align 8, !dbg !7320, !tbaa !2963
  %39 = load i64, i64* %__s2_len, align 8, !dbg !7322, !tbaa !2963
  %cmp18 = icmp ult i64 %39, 4, !dbg !7323
  br i1 %cmp18, label %cond.true, label %cond.false, !dbg !7324

cond.true:                                        ; preds = %land.lhs.true
  %40 = bitcast i8** %__s1 to i8*, !dbg !7325
  call void @llvm.lifetime.start(i64 8, i8* %40) #1, !dbg !7325
  call void @llvm.dbg.declare(metadata i8** %__s1, metadata !1117, metadata !2310), !dbg !7327
  %41 = load i8*, i8** %name.addr, align 8, !dbg !7328, !tbaa !2326
  store i8* %41, i8** %__s1, align 8, !dbg !7327, !tbaa !2326
  %42 = bitcast i32* %__result to i8*, !dbg !7329
  call void @llvm.lifetime.start(i64 4, i8* %42) #1, !dbg !7329
  call void @llvm.dbg.declare(metadata i32* %__result, metadata !1119, metadata !2310), !dbg !7330
  %43 = load i8*, i8** %__s1, align 8, !dbg !7331, !tbaa !2326
  %arrayidx22 = getelementptr i8, i8* %43, i64 0, !dbg !7331
  %44 = load i8, i8* %arrayidx22, align 1, !dbg !7331, !tbaa !6104
  %conv23 = zext i8 %44 to i32, !dbg !7331
  %45 = load i8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.336, i32 0, i32 0), align 1, !dbg !7332, !tbaa !6104
  %conv24 = zext i8 %45 to i32, !dbg !7332
  %sub = sub i32 %conv23, %conv24, !dbg !7333
  store i32 %sub, i32* %__result, align 4, !dbg !7330, !tbaa !3034
  %46 = load i64, i64* %__s2_len, align 8, !dbg !7334, !tbaa !2963
  %cmp25 = icmp ugt i64 %46, 0, !dbg !7336
  br i1 %cmp25, label %land.lhs.true.27, label %if.end.57, !dbg !7337

land.lhs.true.27:                                 ; preds = %cond.true
  %47 = load i32, i32* %__result, align 4, !dbg !7338, !tbaa !3034
  %cmp28 = icmp eq i32 %47, 0, !dbg !7340
  br i1 %cmp28, label %if.then.30, label %if.end.57, !dbg !7341

if.then.30:                                       ; preds = %land.lhs.true.27
  %48 = load i8*, i8** %__s1, align 8, !dbg !7342, !tbaa !2326
  %arrayidx31 = getelementptr i8, i8* %48, i64 1, !dbg !7342
  %49 = load i8, i8* %arrayidx31, align 1, !dbg !7342, !tbaa !6104
  %conv32 = zext i8 %49 to i32, !dbg !7342
  %50 = load i8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.336, i32 0, i64 1), align 1, !dbg !7345, !tbaa !6104
  %conv33 = zext i8 %50 to i32, !dbg !7345
  %sub34 = sub i32 %conv32, %conv33, !dbg !7346
  store i32 %sub34, i32* %__result, align 4, !dbg !7347, !tbaa !3034
  %51 = load i64, i64* %__s2_len, align 8, !dbg !7348, !tbaa !2963
  %cmp35 = icmp ugt i64 %51, 1, !dbg !7350
  br i1 %cmp35, label %land.lhs.true.37, label %if.end.56, !dbg !7351

land.lhs.true.37:                                 ; preds = %if.then.30
  %52 = load i32, i32* %__result, align 4, !dbg !7352, !tbaa !3034
  %cmp38 = icmp eq i32 %52, 0, !dbg !7354
  br i1 %cmp38, label %if.then.40, label %if.end.56, !dbg !7355

if.then.40:                                       ; preds = %land.lhs.true.37
  %53 = load i8*, i8** %__s1, align 8, !dbg !7356, !tbaa !2326
  %arrayidx41 = getelementptr i8, i8* %53, i64 2, !dbg !7356
  %54 = load i8, i8* %arrayidx41, align 1, !dbg !7356, !tbaa !6104
  %conv42 = zext i8 %54 to i32, !dbg !7356
  %55 = load i8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.336, i32 0, i64 2), align 1, !dbg !7359, !tbaa !6104
  %conv43 = zext i8 %55 to i32, !dbg !7359
  %sub44 = sub i32 %conv42, %conv43, !dbg !7360
  store i32 %sub44, i32* %__result, align 4, !dbg !7361, !tbaa !3034
  %56 = load i64, i64* %__s2_len, align 8, !dbg !7362, !tbaa !2963
  %cmp45 = icmp ugt i64 %56, 2, !dbg !7364
  br i1 %cmp45, label %land.lhs.true.47, label %if.end.55, !dbg !7365

land.lhs.true.47:                                 ; preds = %if.then.40
  %57 = load i32, i32* %__result, align 4, !dbg !7366, !tbaa !3034
  %cmp48 = icmp eq i32 %57, 0, !dbg !7368
  br i1 %cmp48, label %if.then.50, label %if.end.55, !dbg !7369

if.then.50:                                       ; preds = %land.lhs.true.47
  %58 = load i8*, i8** %__s1, align 8, !dbg !7370, !tbaa !2326
  %arrayidx51 = getelementptr i8, i8* %58, i64 3, !dbg !7370
  %59 = load i8, i8* %arrayidx51, align 1, !dbg !7370, !tbaa !6104
  %conv52 = zext i8 %59 to i32, !dbg !7370
  %60 = load i8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.336, i32 0, i64 3), align 1, !dbg !7372, !tbaa !6104
  %conv53 = zext i8 %60 to i32, !dbg !7372
  %sub54 = sub i32 %conv52, %conv53, !dbg !7373
  store i32 %sub54, i32* %__result, align 4, !dbg !7374, !tbaa !3034
  br label %if.end.55, !dbg !7375

if.end.55:                                        ; preds = %if.then.50, %land.lhs.true.47, %if.then.40
  br label %if.end.56, !dbg !7376

if.end.56:                                        ; preds = %if.end.55, %land.lhs.true.37, %if.then.30
  br label %if.end.57, !dbg !7380

if.end.57:                                        ; preds = %if.end.56, %land.lhs.true.27, %cond.true
  %61 = load i32, i32* %__result, align 4, !dbg !7384, !tbaa !3034
  store i32 %61, i32* %tmp58, !dbg !7388, !tbaa !3034
  %62 = bitcast i32* %__result to i8*, !dbg !7389
  call void @llvm.lifetime.end(i64 4, i8* %62) #1, !dbg !7389
  %63 = bitcast i8** %__s1 to i8*, !dbg !7389
  call void @llvm.lifetime.end(i64 8, i8* %63) #1, !dbg !7389
  %64 = load i32, i32* %tmp58, !dbg !7390, !tbaa !3034
  br label %cond.end, !dbg !7324

cond.false:                                       ; preds = %land.lhs.true, %if.end.17
  %65 = load i8*, i8** %name.addr, align 8, !dbg !7391, !tbaa !2326
  %call59 = call i32 @strcmp(i8* %65, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.336, i32 0, i32 0)) #1, !dbg !7394
  br label %cond.end, !dbg !7324

cond.end:                                         ; preds = %cond.false, %if.end.57
  %cond = phi i32 [ %64, %if.end.57 ], [ %call59, %cond.false ], !dbg !7324
  store i32 %cond, i32* %tmp, !dbg !7395, !tbaa !3034
  %66 = bitcast i64* %__s2_len to i8*, !dbg !7398
  call void @llvm.lifetime.end(i64 8, i8* %66) #1, !dbg !7398
  %67 = bitcast i64* %__s1_len to i8*, !dbg !7398
  call void @llvm.lifetime.end(i64 8, i8* %67) #1, !dbg !7398
  %68 = load i32, i32* %tmp, !dbg !7399, !tbaa !3034
  %cmp60 = icmp eq i32 %68, 0, !dbg !7400
  br i1 %cmp60, label %if.then.119, label %lor.lhs.false, !dbg !7401

lor.lhs.false:                                    ; preds = %cond.end
  %69 = bitcast i64* %__s1_len63 to i8*, !dbg !7402
  call void @llvm.lifetime.start(i64 8, i8* %69) #1, !dbg !7402
  call void @llvm.dbg.declare(metadata i64* %__s1_len63, metadata !1120, metadata !2310), !dbg !7403
  %70 = bitcast i64* %__s2_len65 to i8*, !dbg !7402
  call void @llvm.lifetime.start(i64 8, i8* %70) #1, !dbg !7402
  call void @llvm.dbg.declare(metadata i64* %__s2_len65, metadata !1122, metadata !2310), !dbg !7404
  br i1 icmp eq (i64 sub (i64 ptrtoint (i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.337, i32 0, i64 1) to i64), i64 ptrtoint ([12 x i8]* @.str.337 to i64)), i64 1), label %land.lhs.true.67, label %cond.false.113, !dbg !7405

land.lhs.true.67:                                 ; preds = %lor.lhs.false
  store i64 11, i64* %__s2_len65, align 8, !dbg !7406, !tbaa !2963
  %71 = load i64, i64* %__s2_len65, align 8, !dbg !7408, !tbaa !2963
  %cmp68 = icmp ult i64 %71, 4, !dbg !7409
  br i1 %cmp68, label %cond.true.70, label %cond.false.113, !dbg !7410

cond.true.70:                                     ; preds = %land.lhs.true.67
  %72 = bitcast i8** %__s172 to i8*, !dbg !7411
  call void @llvm.lifetime.start(i64 8, i8* %72) #1, !dbg !7411
  call void @llvm.dbg.declare(metadata i8** %__s172, metadata !1123, metadata !2310), !dbg !7413
  %73 = load i8*, i8** %name.addr, align 8, !dbg !7414, !tbaa !2326
  store i8* %73, i8** %__s172, align 8, !dbg !7413, !tbaa !2326
  %74 = bitcast i32* %__result74 to i8*, !dbg !7415
  call void @llvm.lifetime.start(i64 4, i8* %74) #1, !dbg !7415
  call void @llvm.dbg.declare(metadata i32* %__result74, metadata !1125, metadata !2310), !dbg !7416
  %75 = load i8*, i8** %__s172, align 8, !dbg !7417, !tbaa !2326
  %arrayidx75 = getelementptr i8, i8* %75, i64 0, !dbg !7417
  %76 = load i8, i8* %arrayidx75, align 1, !dbg !7417, !tbaa !6104
  %conv76 = zext i8 %76 to i32, !dbg !7417
  %77 = load i8, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.337, i32 0, i32 0), align 1, !dbg !7418, !tbaa !6104
  %conv77 = zext i8 %77 to i32, !dbg !7418
  %sub78 = sub i32 %conv76, %conv77, !dbg !7419
  store i32 %sub78, i32* %__result74, align 4, !dbg !7416, !tbaa !3034
  %78 = load i64, i64* %__s2_len65, align 8, !dbg !7420, !tbaa !2963
  %cmp79 = icmp ugt i64 %78, 0, !dbg !7422
  br i1 %cmp79, label %land.lhs.true.81, label %if.end.111, !dbg !7423

land.lhs.true.81:                                 ; preds = %cond.true.70
  %79 = load i32, i32* %__result74, align 4, !dbg !7424, !tbaa !3034
  %cmp82 = icmp eq i32 %79, 0, !dbg !7426
  br i1 %cmp82, label %if.then.84, label %if.end.111, !dbg !7427

if.then.84:                                       ; preds = %land.lhs.true.81
  %80 = load i8*, i8** %__s172, align 8, !dbg !7428, !tbaa !2326
  %arrayidx85 = getelementptr i8, i8* %80, i64 1, !dbg !7428
  %81 = load i8, i8* %arrayidx85, align 1, !dbg !7428, !tbaa !6104
  %conv86 = zext i8 %81 to i32, !dbg !7428
  %82 = load i8, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.337, i32 0, i64 1), align 1, !dbg !7431, !tbaa !6104
  %conv87 = zext i8 %82 to i32, !dbg !7431
  %sub88 = sub i32 %conv86, %conv87, !dbg !7432
  store i32 %sub88, i32* %__result74, align 4, !dbg !7433, !tbaa !3034
  %83 = load i64, i64* %__s2_len65, align 8, !dbg !7434, !tbaa !2963
  %cmp89 = icmp ugt i64 %83, 1, !dbg !7436
  br i1 %cmp89, label %land.lhs.true.91, label %if.end.110, !dbg !7437

land.lhs.true.91:                                 ; preds = %if.then.84
  %84 = load i32, i32* %__result74, align 4, !dbg !7438, !tbaa !3034
  %cmp92 = icmp eq i32 %84, 0, !dbg !7440
  br i1 %cmp92, label %if.then.94, label %if.end.110, !dbg !7441

if.then.94:                                       ; preds = %land.lhs.true.91
  %85 = load i8*, i8** %__s172, align 8, !dbg !7442, !tbaa !2326
  %arrayidx95 = getelementptr i8, i8* %85, i64 2, !dbg !7442
  %86 = load i8, i8* %arrayidx95, align 1, !dbg !7442, !tbaa !6104
  %conv96 = zext i8 %86 to i32, !dbg !7442
  %87 = load i8, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.337, i32 0, i64 2), align 1, !dbg !7445, !tbaa !6104
  %conv97 = zext i8 %87 to i32, !dbg !7445
  %sub98 = sub i32 %conv96, %conv97, !dbg !7446
  store i32 %sub98, i32* %__result74, align 4, !dbg !7447, !tbaa !3034
  %88 = load i64, i64* %__s2_len65, align 8, !dbg !7448, !tbaa !2963
  %cmp99 = icmp ugt i64 %88, 2, !dbg !7450
  br i1 %cmp99, label %land.lhs.true.101, label %if.end.109, !dbg !7451

land.lhs.true.101:                                ; preds = %if.then.94
  %89 = load i32, i32* %__result74, align 4, !dbg !7452, !tbaa !3034
  %cmp102 = icmp eq i32 %89, 0, !dbg !7454
  br i1 %cmp102, label %if.then.104, label %if.end.109, !dbg !7455

if.then.104:                                      ; preds = %land.lhs.true.101
  %90 = load i8*, i8** %__s172, align 8, !dbg !7456, !tbaa !2326
  %arrayidx105 = getelementptr i8, i8* %90, i64 3, !dbg !7456
  %91 = load i8, i8* %arrayidx105, align 1, !dbg !7456, !tbaa !6104
  %conv106 = zext i8 %91 to i32, !dbg !7456
  %92 = load i8, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.337, i32 0, i64 3), align 1, !dbg !7458, !tbaa !6104
  %conv107 = zext i8 %92 to i32, !dbg !7458
  %sub108 = sub i32 %conv106, %conv107, !dbg !7459
  store i32 %sub108, i32* %__result74, align 4, !dbg !7460, !tbaa !3034
  br label %if.end.109, !dbg !7461

if.end.109:                                       ; preds = %if.then.104, %land.lhs.true.101, %if.then.94
  br label %if.end.110, !dbg !7462

if.end.110:                                       ; preds = %if.end.109, %land.lhs.true.91, %if.then.84
  br label %if.end.111, !dbg !7466

if.end.111:                                       ; preds = %if.end.110, %land.lhs.true.81, %cond.true.70
  %93 = load i32, i32* %__result74, align 4, !dbg !7470, !tbaa !3034
  store i32 %93, i32* %tmp112, !dbg !7474, !tbaa !3034
  %94 = bitcast i32* %__result74 to i8*, !dbg !7475
  call void @llvm.lifetime.end(i64 4, i8* %94) #1, !dbg !7475
  %95 = bitcast i8** %__s172 to i8*, !dbg !7475
  call void @llvm.lifetime.end(i64 8, i8* %95) #1, !dbg !7475
  %96 = load i32, i32* %tmp112, !dbg !7476, !tbaa !3034
  br label %cond.end.115, !dbg !7410

cond.false.113:                                   ; preds = %land.lhs.true.67, %lor.lhs.false
  %97 = load i8*, i8** %name.addr, align 8, !dbg !7477, !tbaa !2326
  %call114 = call i32 @strcmp(i8* %97, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.337, i32 0, i32 0)) #1, !dbg !7480
  br label %cond.end.115, !dbg !7410

cond.end.115:                                     ; preds = %cond.false.113, %if.end.111
  %cond116 = phi i32 [ %96, %if.end.111 ], [ %call114, %cond.false.113 ], !dbg !7410
  store i32 %cond116, i32* %tmp66, !dbg !7481, !tbaa !3034
  %98 = bitcast i64* %__s2_len65 to i8*, !dbg !7484
  call void @llvm.lifetime.end(i64 8, i8* %98) #1, !dbg !7484
  %99 = bitcast i64* %__s1_len63 to i8*, !dbg !7484
  call void @llvm.lifetime.end(i64 8, i8* %99) #1, !dbg !7484
  %100 = load i32, i32* %tmp66, !dbg !7485, !tbaa !3034
  %cmp117 = icmp eq i32 %100, 0, !dbg !7486
  br i1 %cmp117, label %if.then.119, label %if.end.129, !dbg !7487

if.then.119:                                      ; preds = %cond.end.115, %cond.end
  %101 = bitcast %struct.sockaddr_in** %sin to i8*, !dbg !7488
  call void @llvm.lifetime.start(i64 8, i8* %101) #1, !dbg !7488
  call void @llvm.dbg.declare(metadata %struct.sockaddr_in** %sin, metadata !1126, metadata !2310), !dbg !7489
  %102 = load i32, i32* %af.addr, align 4, !dbg !7490, !tbaa !3034
  %cmp121 = icmp ne i32 %102, 2, !dbg !7492
  br i1 %cmp121, label %land.lhs.true.123, label %if.end.127, !dbg !7493

land.lhs.true.123:                                ; preds = %if.then.119
  %103 = load i32, i32* %af.addr, align 4, !dbg !7494, !tbaa !3034
  %cmp124 = icmp ne i32 %103, 0, !dbg !7496
  br i1 %cmp124, label %if.then.126, label %if.end.127, !dbg !7497

if.then.126:                                      ; preds = %land.lhs.true.123
  %104 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !7498, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %104, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.338, i32 0, i32 0)), !dbg !7500
  store i32 -1, i32* %retval, !dbg !7501
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.128, !dbg !7501

if.end.127:                                       ; preds = %land.lhs.true.123, %if.then.119
  %105 = load %struct.sockaddr*, %struct.sockaddr** %addr_ret.addr, align 8, !dbg !7502, !tbaa !2326
  %106 = bitcast %struct.sockaddr* %105 to %struct.sockaddr_in*, !dbg !7503
  store %struct.sockaddr_in* %106, %struct.sockaddr_in** %sin, align 8, !dbg !7504, !tbaa !2326
  %107 = load %struct.sockaddr_in*, %struct.sockaddr_in** %sin, align 8, !dbg !7505, !tbaa !2326
  %108 = bitcast %struct.sockaddr_in* %107 to i8*, !dbg !7506
  call void @llvm.memset.p0i8.i64(i8* %108, i8 0, i64 16, i32 1, i1 false), !dbg !7507
  %109 = load %struct.sockaddr_in*, %struct.sockaddr_in** %sin, align 8, !dbg !7508, !tbaa !2326
  %sin_family = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %109, i32 0, i32 0, !dbg !7509
  store i16 2, i16* %sin_family, align 2, !dbg !7510, !tbaa !6701
  %110 = load %struct.sockaddr_in*, %struct.sockaddr_in** %sin, align 8, !dbg !7511, !tbaa !2326
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %110, i32 0, i32 2, !dbg !7512
  %s_addr = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0, !dbg !7513
  store i32 -1, i32* %s_addr, align 4, !dbg !7514, !tbaa !7515
  store i32 4, i32* %retval, !dbg !7516
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.128, !dbg !7516

cleanup.128:                                      ; preds = %if.end.127, %if.then.126
  %111 = bitcast %struct.sockaddr_in** %sin to i8*, !dbg !7517
  call void @llvm.lifetime.end(i64 8, i8* %111) #1, !dbg !7517
  br label %cleanup.193

if.end.129:                                       ; preds = %cond.end.115
  %112 = load i32, i32* %af.addr, align 4, !dbg !7518, !tbaa !3034
  %cmp130 = icmp eq i32 %112, 0, !dbg !7519
  br i1 %cmp130, label %if.then.135, label %lor.lhs.false.132, !dbg !7520

lor.lhs.false.132:                                ; preds = %if.end.129
  %113 = load i32, i32* %af.addr, align 4, !dbg !7521, !tbaa !3034
  %cmp133 = icmp eq i32 %113, 2, !dbg !7523
  br i1 %cmp133, label %if.then.135, label %if.end.146, !dbg !7524

if.then.135:                                      ; preds = %lor.lhs.false.132, %if.end.129
  %114 = bitcast %struct.sockaddr_in** %sin137 to i8*, !dbg !7525
  call void @llvm.lifetime.start(i64 8, i8* %114) #1, !dbg !7525
  call void @llvm.dbg.declare(metadata %struct.sockaddr_in** %sin137, metadata !1128, metadata !2310), !dbg !7526
  %115 = load %struct.sockaddr*, %struct.sockaddr** %addr_ret.addr, align 8, !dbg !7527, !tbaa !2326
  %116 = bitcast %struct.sockaddr* %115 to %struct.sockaddr_in*, !dbg !7528
  store %struct.sockaddr_in* %116, %struct.sockaddr_in** %sin137, align 8, !dbg !7526, !tbaa !2326
  %117 = load %struct.sockaddr_in*, %struct.sockaddr_in** %sin137, align 8, !dbg !7529, !tbaa !2326
  %118 = bitcast %struct.sockaddr_in* %117 to i8*, !dbg !7530
  call void @llvm.memset.p0i8.i64(i8* %118, i8 0, i64 16, i32 4, i1 false), !dbg !7530
  %119 = load i8*, i8** %name.addr, align 8, !dbg !7531, !tbaa !2326
  %120 = load %struct.sockaddr_in*, %struct.sockaddr_in** %sin137, align 8, !dbg !7533, !tbaa !2326
  %sin_addr138 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %120, i32 0, i32 2, !dbg !7534
  %121 = bitcast %struct.in_addr* %sin_addr138 to i8*, !dbg !7535
  %call139 = call i32 @inet_pton(i32 2, i8* %119, i8* %121) #1, !dbg !7536
  %cmp140 = icmp sgt i32 %call139, 0, !dbg !7537
  br i1 %cmp140, label %if.then.142, label %if.end.144, !dbg !7538

if.then.142:                                      ; preds = %if.then.135
  %122 = load %struct.sockaddr_in*, %struct.sockaddr_in** %sin137, align 8, !dbg !7539, !tbaa !2326
  %sin_family143 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %122, i32 0, i32 0, !dbg !7541
  store i16 2, i16* %sin_family143, align 2, !dbg !7542, !tbaa !6701
  store i32 4, i32* %retval, !dbg !7543
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.145, !dbg !7543

if.end.144:                                       ; preds = %if.then.135
  store i32 0, i32* %cleanup.dest.slot, !dbg !7544
  br label %cleanup.145, !dbg !7544

cleanup.145:                                      ; preds = %if.end.144, %if.then.142
  %123 = bitcast %struct.sockaddr_in** %sin137 to i8*, !dbg !7545
  call void @llvm.lifetime.end(i64 8, i8* %123) #1, !dbg !7545
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.4

LeafBlock.4:                                      ; preds = %cleanup.145
  %SwitchLeaf5 = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf5, label %cleanup.cont, label %NewDefault.3

cleanup.cont:                                     ; preds = %LeafBlock.4
  br label %if.end.146, !dbg !7546

if.end.146:                                       ; preds = %cleanup.cont, %lor.lhs.false.132
  %124 = load i32, i32* %af.addr, align 4, !dbg !7547, !tbaa !3034
  %cmp147 = icmp eq i32 %124, 0, !dbg !7548
  br i1 %cmp147, label %land.lhs.true.152, label %lor.lhs.false.149, !dbg !7549

lor.lhs.false.149:                                ; preds = %if.end.146
  %125 = load i32, i32* %af.addr, align 4, !dbg !7550, !tbaa !3034
  %cmp150 = icmp eq i32 %125, 10, !dbg !7552
  br i1 %cmp150, label %land.lhs.true.152, label %if.end.170, !dbg !7553

land.lhs.true.152:                                ; preds = %lor.lhs.false.149, %if.end.146
  br i1 false, label %cond.true.153, label %cond.false.156, !dbg !7554

cond.true.153:                                    ; preds = %land.lhs.true.152
  %126 = load i8*, i8** %name.addr, align 8, !dbg !7557, !tbaa !2326
  %call154 = call i8* @__rawmemchr(i8* %126, i32 37), !dbg !7559
  %tobool155 = icmp ne i8* %call154, null, !dbg !7560
  br i1 %tobool155, label %if.end.170, label %if.then.159, !dbg !7561

cond.false.156:                                   ; preds = %land.lhs.true.152
  %127 = load i8*, i8** %name.addr, align 8, !dbg !7562, !tbaa !2326
  %call157 = call i8* @strchr(i8* %127, i32 37) #1, !dbg !7564
  %tobool158 = icmp ne i8* %call157, null, !dbg !7564
  br i1 %tobool158, label %if.end.170, label %if.then.159, !dbg !7565

if.then.159:                                      ; preds = %cond.false.156, %cond.true.153
  %128 = bitcast %struct.sockaddr_in6** %sin161 to i8*, !dbg !7566
  call void @llvm.lifetime.start(i64 8, i8* %128) #1, !dbg !7566
  call void @llvm.dbg.declare(metadata %struct.sockaddr_in6** %sin161, metadata !1131, metadata !2310), !dbg !7567
  %129 = load %struct.sockaddr*, %struct.sockaddr** %addr_ret.addr, align 8, !dbg !7568, !tbaa !2326
  %130 = bitcast %struct.sockaddr* %129 to %struct.sockaddr_in6*, !dbg !7569
  store %struct.sockaddr_in6* %130, %struct.sockaddr_in6** %sin161, align 8, !dbg !7567, !tbaa !2326
  %131 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %sin161, align 8, !dbg !7570, !tbaa !2326
  %132 = bitcast %struct.sockaddr_in6* %131 to i8*, !dbg !7571
  call void @llvm.memset.p0i8.i64(i8* %132, i8 0, i64 28, i32 4, i1 false), !dbg !7571
  %133 = load i8*, i8** %name.addr, align 8, !dbg !7572, !tbaa !2326
  %134 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %sin161, align 8, !dbg !7574, !tbaa !2326
  %sin6_addr = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %134, i32 0, i32 3, !dbg !7575
  %135 = bitcast %struct.in6_addr* %sin6_addr to i8*, !dbg !7576
  %call162 = call i32 @inet_pton(i32 10, i8* %133, i8* %135) #1, !dbg !7577
  %cmp163 = icmp sgt i32 %call162, 0, !dbg !7578
  br i1 %cmp163, label %if.then.165, label %if.end.166, !dbg !7579

if.then.165:                                      ; preds = %if.then.159
  %136 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %sin161, align 8, !dbg !7580, !tbaa !2326
  %sin6_family = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %136, i32 0, i32 0, !dbg !7582
  store i16 10, i16* %sin6_family, align 2, !dbg !7583, !tbaa !6794
  store i32 16, i32* %retval, !dbg !7584
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.167, !dbg !7584

if.end.166:                                       ; preds = %if.then.159
  store i32 0, i32* %cleanup.dest.slot, !dbg !7585
  br label %cleanup.167, !dbg !7585

cleanup.167:                                      ; preds = %if.end.166, %if.then.165
  %137 = bitcast %struct.sockaddr_in6** %sin161 to i8*, !dbg !7586
  call void @llvm.lifetime.end(i64 8, i8* %137) #1, !dbg !7586
  %cleanup.dest.168 = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock.7

LeafBlock.7:                                      ; preds = %cleanup.167
  %SwitchLeaf8 = icmp eq i32 %cleanup.dest.168, 0
  br i1 %SwitchLeaf8, label %cleanup.cont.169, label %NewDefault.6

cleanup.cont.169:                                 ; preds = %LeafBlock.7
  br label %if.end.170, !dbg !7588

if.end.170:                                       ; preds = %cleanup.cont.169, %cond.false.156, %cond.true.153, %lor.lhs.false.149
  %138 = bitcast %struct.addrinfo* %hints to i8*, !dbg !7589
  call void @llvm.memset.p0i8.i64(i8* %138, i8 0, i64 48, i32 8, i1 false), !dbg !7589
  %139 = load i32, i32* %af.addr, align 4, !dbg !7590, !tbaa !3034
  %ai_family171 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %hints, i32 0, i32 1, !dbg !7591
  store i32 %139, i32* %ai_family171, align 4, !dbg !7592, !tbaa !7247
  %140 = bitcast %struct._ts** %_save173 to i8*, !dbg !7593
  call void @llvm.lifetime.start(i64 8, i8* %140) #1, !dbg !7593
  call void @llvm.dbg.declare(metadata %struct._ts** %_save173, metadata !1134, metadata !2310), !dbg !7594
  %call174 = call %struct._ts* @PyEval_SaveThread(), !dbg !7595
  store %struct._ts* %call174, %struct._ts** %_save173, align 8, !dbg !7596, !tbaa !2326
  %141 = load i8*, i8** %name.addr, align 8, !dbg !7597, !tbaa !2326
  %call175 = call i32 @getaddrinfo(i8* %141, i8* null, %struct.addrinfo* %hints, %struct.addrinfo** %res), !dbg !7598
  store i32 %call175, i32* %error, align 4, !dbg !7599, !tbaa !3034
  %142 = load %struct._ts*, %struct._ts** %_save173, align 8, !dbg !7600, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %142), !dbg !7601
  %143 = bitcast %struct._ts** %_save173 to i8*, !dbg !7602
  call void @llvm.lifetime.end(i64 8, i8* %143) #1, !dbg !7602
  %144 = load i32, i32* %error, align 4, !dbg !7603, !tbaa !3034
  %tobool176 = icmp ne i32 %144, 0, !dbg !7603
  br i1 %tobool176, label %if.then.177, label %if.end.179, !dbg !7605

if.then.177:                                      ; preds = %if.end.170
  %145 = load i32, i32* %error, align 4, !dbg !7606, !tbaa !3034
  %call178 = call %struct._object* @set_gaierror(i32 %145), !dbg !7608
  store i32 -1, i32* %retval, !dbg !7609
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.193, !dbg !7609

if.end.179:                                       ; preds = %if.end.170
  %146 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !7610, !tbaa !2326
  %ai_addrlen180 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %146, i32 0, i32 4, !dbg !7612
  %147 = load i32, i32* %ai_addrlen180, align 4, !dbg !7612, !tbaa !7297
  %conv181 = zext i32 %147 to i64, !dbg !7610
  %148 = load i64, i64* %addr_ret_size.addr, align 8, !dbg !7613, !tbaa !2963
  %cmp182 = icmp ult i64 %conv181, %148, !dbg !7614
  br i1 %cmp182, label %if.then.184, label %if.end.187, !dbg !7615

if.then.184:                                      ; preds = %if.end.179
  %149 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !7616, !tbaa !2326
  %ai_addrlen185 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %149, i32 0, i32 4, !dbg !7617
  %150 = load i32, i32* %ai_addrlen185, align 4, !dbg !7617, !tbaa !7297
  %conv186 = zext i32 %150 to i64, !dbg !7616
  store i64 %conv186, i64* %addr_ret_size.addr, align 8, !dbg !7618, !tbaa !2963
  br label %if.end.187, !dbg !7619

if.end.187:                                       ; preds = %if.then.184, %if.end.179
  %151 = load %struct.sockaddr*, %struct.sockaddr** %addr_ret.addr, align 8, !dbg !7620, !tbaa !2326
  %152 = bitcast %struct.sockaddr* %151 to i8*, !dbg !7621
  %153 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !7622, !tbaa !2326
  %ai_addr188 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %153, i32 0, i32 5, !dbg !7623
  %154 = load %struct.sockaddr*, %struct.sockaddr** %ai_addr188, align 8, !dbg !7623, !tbaa !7309
  %155 = bitcast %struct.sockaddr* %154 to i8*, !dbg !7624
  %156 = load i64, i64* %addr_ret_size.addr, align 8, !dbg !7625, !tbaa !2963
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %152, i8* %155, i64 %156, i32 1, i1 false), !dbg !7624
  %157 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !7626, !tbaa !2326
  call void @freeaddrinfo(%struct.addrinfo* %157) #1, !dbg !7627
  %158 = load %struct.sockaddr*, %struct.sockaddr** %addr_ret.addr, align 8, !dbg !7628, !tbaa !2326
  %sa_family = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %158, i32 0, i32 0, !dbg !7629
  %159 = load i16, i16* %sa_family, align 2, !dbg !7629, !tbaa !6033
  %conv189 = zext i16 %159 to i32, !dbg !7628
  br label %NodeBlock.14

NodeBlock.14:                                     ; preds = %if.end.187
  %Pivot.15 = icmp slt i32 %conv189, 10
  br i1 %Pivot.15, label %LeafBlock.10, label %LeafBlock.12

LeafBlock.12:                                     ; preds = %NodeBlock.14
  %SwitchLeaf13 = icmp eq i32 %conv189, 10
  br i1 %SwitchLeaf13, label %sw.bb.191, label %NewDefault.9

LeafBlock.10:                                     ; preds = %NodeBlock.14
  %SwitchLeaf11 = icmp eq i32 %conv189, 2
  br i1 %SwitchLeaf11, label %sw.bb.190, label %NewDefault.9

sw.bb.190:                                        ; preds = %LeafBlock.10
  store i32 4, i32* %retval, !dbg !7630
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.193, !dbg !7630

sw.bb.191:                                        ; preds = %LeafBlock.12
  store i32 16, i32* %retval, !dbg !7632
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.193, !dbg !7632

NewDefault.9:                                     ; preds = %LeafBlock.12, %LeafBlock.10
  br label %sw.default.192

sw.default.192:                                   ; preds = %NewDefault.9
  %160 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !7633, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %160, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.339, i32 0, i32 0)), !dbg !7634
  store i32 -1, i32* %retval, !dbg !7635
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.193, !dbg !7635

NewDefault.3:                                     ; preds = %LeafBlock.4
  br label %cleanup.193

NewDefault.6:                                     ; preds = %LeafBlock.7
  br label %cleanup.193

cleanup.193:                                      ; preds = %NewDefault.6, %NewDefault.3, %sw.default.192, %sw.bb.191, %sw.bb.190, %if.then.177, %cleanup.128, %cleanup
  %161 = bitcast i32* %error to i8*, !dbg !7636
  call void @llvm.lifetime.end(i64 4, i8* %161) #1, !dbg !7636
  %162 = bitcast %struct.addrinfo** %res to i8*, !dbg !7636
  call void @llvm.lifetime.end(i64 8, i8* %162) #1, !dbg !7636
  %163 = bitcast %struct.addrinfo* %hints to i8*, !dbg !7636
  call void @llvm.lifetime.end(i64 48, i8* %163) #1, !dbg !7636
  %164 = load i32, i32* %retval, !dbg !7636
  ret i32 %164, !dbg !7636
}

declare void @PyMem_Free(i8*) #3

; Function Attrs: nounwind
declare i8* @strncpy(i8*, i8*, i64) #5

declare i32 @PyUnicode_FSConverter(%struct._object*, i8*) #3

declare i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) #3

; Function Attrs: nounwind
declare void @freeaddrinfo(%struct.addrinfo*) #5

; Function Attrs: nounwind
declare i32 @strcmp(i8*, i8*) #5

; Function Attrs: nounwind
declare i32 @inet_pton(i32, i8*, i8*) #5

declare i8* @__rawmemchr(i8*, i32) #3

; Function Attrs: nounwind
declare i8* @strchr(i8*, i32) #5

; Function Attrs: nounwind uwtable
define internal i32 @internal_connect(%struct.PySocketSockObject* %s, %struct.sockaddr* %addr, i32 %addrlen, i32* %timeoutp) #0 {
entry:
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %addr.addr = alloca %struct.sockaddr*, align 8
  %addrlen.addr = alloca i32, align 4
  %timeoutp.addr = alloca i32*, align 8
  %res = alloca i32, align 4
  %timeout = alloca i32, align 4
  %agg.tmp = alloca %union.__CONST_SOCKADDR_ARG, align 8
  %res_size = alloca i32, align 4
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1158, metadata !2310), !dbg !7637
  store %struct.sockaddr* %addr, %struct.sockaddr** %addr.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.sockaddr** %addr.addr, metadata !1159, metadata !2310), !dbg !7638
  store i32 %addrlen, i32* %addrlen.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %addrlen.addr, metadata !1160, metadata !2310), !dbg !7639
  store i32* %timeoutp, i32** %timeoutp.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata i32** %timeoutp.addr, metadata !1161, metadata !2310), !dbg !7640
  %0 = bitcast i32* %res to i8*, !dbg !7641
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !7641
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1162, metadata !2310), !dbg !7642
  %1 = bitcast i32* %timeout to i8*, !dbg !7641
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !7641
  call void @llvm.dbg.declare(metadata i32* %timeout, metadata !1163, metadata !2310), !dbg !7643
  store i32 0, i32* %timeout, align 4, !dbg !7644, !tbaa !3034
  %2 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7645, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %2, i32 0, i32 1, !dbg !7646
  %3 = load i32, i32* %sock_fd, align 4, !dbg !7646, !tbaa !2948
  %__sockaddr__ = bitcast %union.__CONST_SOCKADDR_ARG* %agg.tmp to %struct.sockaddr**, !dbg !7647
  %4 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !7647, !tbaa !2326
  store %struct.sockaddr* %4, %struct.sockaddr** %__sockaddr__, align 8, !dbg !7647, !tbaa !2326
  %5 = load i32, i32* %addrlen.addr, align 4, !dbg !7648, !tbaa !3034
  %coerce.dive = getelementptr %union.__CONST_SOCKADDR_ARG, %union.__CONST_SOCKADDR_ARG* %agg.tmp, i32 0, i32 0, !dbg !7649
  %6 = load %struct.sockaddr*, %struct.sockaddr** %coerce.dive, align 8, !dbg !7649
  %call = call i32 @connect(i32 %3, %struct.sockaddr* %6, i32 %5), !dbg !7649
  store i32 %call, i32* %res, align 4, !dbg !7650, !tbaa !3034
  %7 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7651, !tbaa !2326
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %7, i32 0, i32 6, !dbg !7652
  %8 = load double, double* %sock_timeout, align 8, !dbg !7652, !tbaa !3176
  %cmp = fcmp ogt double %8, 0.000000e+00, !dbg !7653
  br i1 %cmp, label %if.then, label %if.end.20, !dbg !7654

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %res, align 4, !dbg !7655, !tbaa !3034
  %cmp1 = icmp slt i32 %9, 0, !dbg !7656
  br i1 %cmp1, label %land.lhs.true, label %if.end.19, !dbg !7657

land.lhs.true:                                    ; preds = %if.then
  %call2 = call i32* @__errno_location() #2, !dbg !7658
  %10 = load i32, i32* %call2, align 4, !dbg !7660, !tbaa !3034
  %cmp3 = icmp eq i32 %10, 115, !dbg !7661
  br i1 %cmp3, label %if.then.4, label %if.end.19, !dbg !7662

if.then.4:                                        ; preds = %land.lhs.true
  %11 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7663, !tbaa !2326
  %call5 = call i32 @internal_select(%struct.PySocketSockObject* %11, i32 1), !dbg !7664
  store i32 %call5, i32* %timeout, align 4, !dbg !7665, !tbaa !3034
  %12 = load i32, i32* %timeout, align 4, !dbg !7666, !tbaa !3034
  %cmp6 = icmp eq i32 %12, 0, !dbg !7667
  br i1 %cmp6, label %if.then.7, label %if.else, !dbg !7668

if.then.7:                                        ; preds = %if.then.4
  %13 = bitcast i32* %res_size to i8*, !dbg !7669
  call void @llvm.lifetime.start(i64 4, i8* %13) #1, !dbg !7669
  call void @llvm.dbg.declare(metadata i32* %res_size, metadata !1164, metadata !2310), !dbg !7670
  store i32 4, i32* %res_size, align 4, !dbg !7670, !tbaa !3034
  %14 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7671, !tbaa !2326
  %sock_fd8 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %14, i32 0, i32 1, !dbg !7672
  %15 = load i32, i32* %sock_fd8, align 4, !dbg !7672, !tbaa !2948
  %16 = bitcast i32* %res to i8*, !dbg !7673
  %call9 = call i32 @getsockopt(i32 %15, i32 1, i32 4, i8* %16, i32* %res_size) #1, !dbg !7674
  %17 = load i32, i32* %res, align 4, !dbg !7675, !tbaa !3034
  %cmp10 = icmp eq i32 %17, 106, !dbg !7677
  br i1 %cmp10, label %if.then.11, label %if.end, !dbg !7678

if.then.11:                                       ; preds = %if.then.7
  store i32 0, i32* %res, align 4, !dbg !7679, !tbaa !3034
  br label %if.end, !dbg !7680

if.end:                                           ; preds = %if.then.11, %if.then.7
  %18 = load i32, i32* %res, align 4, !dbg !7681, !tbaa !3034
  %call12 = call i32* @__errno_location() #2, !dbg !7682
  store i32 %18, i32* %call12, align 4, !dbg !7683, !tbaa !3034
  %19 = bitcast i32* %res_size to i8*, !dbg !7684
  call void @llvm.lifetime.end(i64 4, i8* %19) #1, !dbg !7684
  br label %if.end.18, !dbg !7685

if.else:                                          ; preds = %if.then.4
  %20 = load i32, i32* %timeout, align 4, !dbg !7686, !tbaa !3034
  %cmp13 = icmp eq i32 %20, -1, !dbg !7688
  br i1 %cmp13, label %if.then.14, label %if.else.16, !dbg !7689

if.then.14:                                       ; preds = %if.else
  %call15 = call i32* @__errno_location() #2, !dbg !7690
  %21 = load i32, i32* %call15, align 4, !dbg !7692, !tbaa !3034
  store i32 %21, i32* %res, align 4, !dbg !7693, !tbaa !3034
  br label %if.end.17, !dbg !7694

if.else.16:                                       ; preds = %if.else
  store i32 11, i32* %res, align 4, !dbg !7695, !tbaa !3034
  br label %if.end.17

if.end.17:                                        ; preds = %if.else.16, %if.then.14
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %if.end
  br label %if.end.19, !dbg !7696

if.end.19:                                        ; preds = %if.end.18, %land.lhs.true, %if.then
  br label %if.end.20, !dbg !7697

if.end.20:                                        ; preds = %if.end.19, %entry
  %22 = load i32, i32* %res, align 4, !dbg !7698, !tbaa !3034
  %cmp21 = icmp slt i32 %22, 0, !dbg !7700
  br i1 %cmp21, label %if.then.22, label %if.end.24, !dbg !7701

if.then.22:                                       ; preds = %if.end.20
  %call23 = call i32* @__errno_location() #2, !dbg !7702
  %23 = load i32, i32* %call23, align 4, !dbg !7703, !tbaa !3034
  store i32 %23, i32* %res, align 4, !dbg !7704, !tbaa !3034
  br label %if.end.24, !dbg !7705

if.end.24:                                        ; preds = %if.then.22, %if.end.20
  %24 = load i32, i32* %timeout, align 4, !dbg !7706, !tbaa !3034
  %25 = load i32*, i32** %timeoutp.addr, align 8, !dbg !7707, !tbaa !2326
  store i32 %24, i32* %25, align 4, !dbg !7708, !tbaa !3034
  %26 = load i32, i32* %res, align 4, !dbg !7709, !tbaa !3034
  %27 = bitcast i32* %timeout to i8*, !dbg !7710
  call void @llvm.lifetime.end(i64 4, i8* %27) #1, !dbg !7710
  %28 = bitcast i32* %res to i8*, !dbg !7710
  call void @llvm.lifetime.end(i64 4, i8* %28) #1, !dbg !7710
  ret i32 %26, !dbg !7711
}

declare i32 @connect(i32, %struct.sockaddr*, i32) #3

; Function Attrs: nounwind uwtable
define internal i32 @internal_select(%struct.PySocketSockObject* %s, i32 %writing) #0 {
entry:
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %writing.addr = alloca i32, align 4
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1175, metadata !2310), !dbg !7712
  store i32 %writing, i32* %writing.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %writing.addr, metadata !1176, metadata !2310), !dbg !7713
  %0 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7714, !tbaa !2326
  %1 = load i32, i32* %writing.addr, align 4, !dbg !7715, !tbaa !3034
  %2 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7716, !tbaa !2326
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %2, i32 0, i32 6, !dbg !7717
  %3 = load double, double* %sock_timeout, align 8, !dbg !7717, !tbaa !3176
  %call = call i32 @internal_select_ex(%struct.PySocketSockObject* %0, i32 %1, double %3), !dbg !7718
  ret i32 %call, !dbg !7719
}

; Function Attrs: nounwind
declare i32 @getsockopt(i32, i32, i32, i8*, i32*) #5

declare i32 @PyErr_CheckSignals() #3

; Function Attrs: nounwind
declare i32 @getpeername(i32, %struct.sockaddr*, i32*) #5

; Function Attrs: nounwind
declare i32 @getsockname(i32, %struct.sockaddr*, i32*) #5

declare i32 @_PyBytes_Resize(%struct._object**, i64) #3

declare i32 @_PyLong_AsInt(%struct._object*) #3

declare %struct._object* @PyErr_Occurred() #3

; Function Attrs: nounwind
declare i32 @listen(i32, i32) #5

; Function Attrs: nounwind uwtable
define internal i64 @sock_recv_guts(%struct.PySocketSockObject* %s, i8* %cbuf, i64 %len, i32 %flags) #0 {
entry:
  %retval = alloca i64, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %cbuf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %outlen = alloca i64, align 8
  %timeout = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %now = alloca %struct.timeval, align 8
  %deadline = alloca %struct.timeval, align 8
  %interval = alloca double, align 8
  %has_timeout = alloca i32, align 4
  %_save = alloca %struct._ts*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1251, metadata !2310), !dbg !7720
  store i8* %cbuf, i8** %cbuf.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata i8** %cbuf.addr, metadata !1252, metadata !2310), !dbg !7721
  store i64 %len, i64* %len.addr, align 8, !tbaa !2963
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !1253, metadata !2310), !dbg !7722
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !1254, metadata !2310), !dbg !7723
  %0 = bitcast i64* %outlen to i8*, !dbg !7724
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !7724
  call void @llvm.dbg.declare(metadata i64* %outlen, metadata !1255, metadata !2310), !dbg !7725
  store i64 -1, i64* %outlen, align 8, !dbg !7725, !tbaa !2963
  %1 = bitcast i32* %timeout to i8*, !dbg !7726
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !7726
  call void @llvm.dbg.declare(metadata i32* %timeout, metadata !1256, metadata !2310), !dbg !7727
  %2 = load i64, i64* %len.addr, align 8, !dbg !7728, !tbaa !2963
  %cmp = icmp eq i64 %2, 0, !dbg !7730
  br i1 %cmp, label %if.then, label %if.end, !dbg !7731

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, !dbg !7732
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.53, !dbg !7732

if.end:                                           ; preds = %entry
  %3 = bitcast %struct.timeval* %now to i8*, !dbg !7734
  call void @llvm.lifetime.start(i64 16, i8* %3) #1, !dbg !7734
  call void @llvm.dbg.declare(metadata %struct.timeval* %now, metadata !1257, metadata !2310), !dbg !7735
  %4 = bitcast %struct.timeval* %deadline to i8*, !dbg !7734
  call void @llvm.lifetime.start(i64 16, i8* %4) #1, !dbg !7734
  call void @llvm.dbg.declare(metadata %struct.timeval* %deadline, metadata !1259, metadata !2310), !dbg !7736
  %5 = bitcast %struct.timeval* %deadline to i8*, !dbg !7736
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 16, i32 8, i1 false), !dbg !7736
  %6 = bitcast double* %interval to i8*, !dbg !7737
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !7737
  call void @llvm.dbg.declare(metadata double* %interval, metadata !1260, metadata !2310), !dbg !7738
  %7 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7739, !tbaa !2326
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %7, i32 0, i32 6, !dbg !7740
  %8 = load double, double* %sock_timeout, align 8, !dbg !7740, !tbaa !3176
  store double %8, double* %interval, align 8, !dbg !7738, !tbaa !3215
  %9 = bitcast i32* %has_timeout to i8*, !dbg !7741
  call void @llvm.lifetime.start(i64 4, i8* %9) #1, !dbg !7741
  call void @llvm.dbg.declare(metadata i32* %has_timeout, metadata !1261, metadata !2310), !dbg !7742
  %10 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7743, !tbaa !2326
  %sock_timeout1 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %10, i32 0, i32 6, !dbg !7744
  %11 = load double, double* %sock_timeout1, align 8, !dbg !7744, !tbaa !3176
  %cmp2 = fcmp ogt double %11, 0.000000e+00, !dbg !7745
  %conv = zext i1 %cmp2 to i32, !dbg !7745
  store i32 %conv, i32* %has_timeout, align 4, !dbg !7742, !tbaa !3034
  %12 = load i32, i32* %has_timeout, align 4, !dbg !7746, !tbaa !3034
  %tobool = icmp ne i32 %12, 0, !dbg !7746
  br i1 %tobool, label %if.then.3, label %if.end.15, !dbg !7748

if.then.3:                                        ; preds = %if.end
  call void @_PyTime_gettimeofday(%struct.timeval* %now), !dbg !7749
  %13 = bitcast %struct.timeval* %deadline to i8*, !dbg !7752
  %14 = bitcast %struct.timeval* %now to i8*, !dbg !7752
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 16, i32 8, i1 false), !dbg !7752, !tbaa.struct !3228
  br label %do.body, !dbg !7753

do.body:                                          ; preds = %if.then.3
  %15 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7754, !tbaa !2326
  %sock_timeout4 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %15, i32 0, i32 6, !dbg !7757
  %16 = load double, double* %sock_timeout4, align 8, !dbg !7757, !tbaa !3176
  %conv5 = fptosi double %16 to i64, !dbg !7758
  %conv6 = sitofp i64 %conv5 to double, !dbg !7758
  %17 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7759, !tbaa !2326
  %sock_timeout7 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %17, i32 0, i32 6, !dbg !7760
  %18 = load double, double* %sock_timeout7, align 8, !dbg !7760, !tbaa !3176
  %sub = fsub double %conv6, %18, !dbg !7761
  %mul = fmul double %sub, 1.000000e+06, !dbg !7762
  %conv8 = fptosi double %mul to i64, !dbg !7763
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !7764
  %19 = load i64, i64* %tv_usec, align 8, !dbg !7765, !tbaa !3242
  %add = add i64 %19, %conv8, !dbg !7765
  store i64 %add, i64* %tv_usec, align 8, !dbg !7765, !tbaa !3242
  %20 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7766, !tbaa !2326
  %sock_timeout9 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %20, i32 0, i32 6, !dbg !7767
  %21 = load double, double* %sock_timeout9, align 8, !dbg !7767, !tbaa !3176
  %conv10 = fptosi double %21 to i64, !dbg !7768
  %tv_usec11 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !7769
  %22 = load i64, i64* %tv_usec11, align 8, !dbg !7769, !tbaa !3242
  %div = sdiv i64 %22, 1000000, !dbg !7770
  %add12 = add i64 %conv10, %div, !dbg !7771
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0, !dbg !7772
  %23 = load i64, i64* %tv_sec, align 8, !dbg !7773, !tbaa !3252
  %add13 = add i64 %23, %add12, !dbg !7773
  store i64 %add13, i64* %tv_sec, align 8, !dbg !7773, !tbaa !3252
  %tv_usec14 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !7774
  %24 = load i64, i64* %tv_usec14, align 8, !dbg !7775, !tbaa !3242
  %rem = srem i64 %24, 1000000, !dbg !7775
  store i64 %rem, i64* %tv_usec14, align 8, !dbg !7775, !tbaa !3242
  br label %do.cond, !dbg !7776

do.cond:                                          ; preds = %do.body
  br label %do.end, !dbg !7777

do.end:                                           ; preds = %do.cond
  br label %if.end.15, !dbg !7779

if.end.15:                                        ; preds = %do.end, %if.end
  br label %while.cond, !dbg !7781

while.cond:                                       ; preds = %if.end.34, %if.end.15
  br label %while.body, !dbg !7784

while.body:                                       ; preds = %while.cond
  %call = call i32* @__errno_location() #2, !dbg !7787
  store i32 0, i32* %call, align 4, !dbg !7789, !tbaa !3034
  %25 = bitcast %struct._ts** %_save to i8*, !dbg !7790
  call void @llvm.lifetime.start(i64 8, i8* %25) #1, !dbg !7790
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1262, metadata !2310), !dbg !7791
  %call16 = call %struct._ts* @PyEval_SaveThread(), !dbg !7792
  store %struct._ts* %call16, %struct._ts** %_save, align 8, !dbg !7793, !tbaa !2326
  %26 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7794, !tbaa !2326
  %27 = load double, double* %interval, align 8, !dbg !7795, !tbaa !3215
  %call17 = call i32 @internal_select_ex(%struct.PySocketSockObject* %26, i32 0, double %27), !dbg !7796
  store i32 %call17, i32* %timeout, align 4, !dbg !7797, !tbaa !3034
  %28 = load i32, i32* %timeout, align 4, !dbg !7798, !tbaa !3034
  %tobool18 = icmp ne i32 %28, 0, !dbg !7798
  br i1 %tobool18, label %if.end.21, label %if.then.19, !dbg !7800

if.then.19:                                       ; preds = %while.body
  %29 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7801, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %29, i32 0, i32 1, !dbg !7803
  %30 = load i32, i32* %sock_fd, align 4, !dbg !7803, !tbaa !2948
  %31 = load i8*, i8** %cbuf.addr, align 8, !dbg !7804, !tbaa !2326
  %32 = load i64, i64* %len.addr, align 8, !dbg !7805, !tbaa !2963
  %33 = load i32, i32* %flags.addr, align 4, !dbg !7806, !tbaa !3034
  %call20 = call i64 @recv(i32 %30, i8* %31, i64 %32, i32 %33), !dbg !7807
  store i64 %call20, i64* %outlen, align 8, !dbg !7808, !tbaa !2963
  br label %if.end.21, !dbg !7809

if.end.21:                                        ; preds = %if.then.19, %while.body
  %34 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !7810, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %34), !dbg !7811
  %35 = bitcast %struct._ts** %_save to i8*, !dbg !7812
  call void @llvm.lifetime.end(i64 8, i8* %35) #1, !dbg !7812
  %36 = load i32, i32* %timeout, align 4, !dbg !7813, !tbaa !3034
  %cmp22 = icmp eq i32 %36, 1, !dbg !7815
  br i1 %cmp22, label %if.then.24, label %if.end.25, !dbg !7816

if.then.24:                                       ; preds = %if.end.21
  %37 = load %struct._object*, %struct._object** @socket_timeout, align 8, !dbg !7817, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %37, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.300, i32 0, i32 0)), !dbg !7819
  store i64 -1, i64* %retval, !dbg !7820
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7820

if.end.25:                                        ; preds = %if.end.21
  %38 = load i32, i32* %has_timeout, align 4, !dbg !7821, !tbaa !3034
  %tobool26 = icmp ne i32 %38, 0, !dbg !7821
  br i1 %tobool26, label %lor.lhs.false, label %if.then.33, !dbg !7823

lor.lhs.false:                                    ; preds = %if.end.25
  %call27 = call i32* @__errno_location() #2, !dbg !7824
  %39 = load i32, i32* %call27, align 4, !dbg !7826, !tbaa !3034
  %cmp28 = icmp eq i32 %39, 11, !dbg !7827
  br i1 %cmp28, label %if.end.34, label %land.lhs.true, !dbg !7828

land.lhs.true:                                    ; preds = %lor.lhs.false
  %call30 = call i32* @__errno_location() #2, !dbg !7829
  %40 = load i32, i32* %call30, align 4, !dbg !7831, !tbaa !3034
  %cmp31 = icmp eq i32 %40, 11, !dbg !7832
  br i1 %cmp31, label %if.end.34, label %if.then.33, !dbg !7833

if.then.33:                                       ; preds = %land.lhs.true, %if.end.25
  br label %while.end, !dbg !7834

if.end.34:                                        ; preds = %land.lhs.true, %lor.lhs.false
  call void @_PyTime_gettimeofday(%struct.timeval* %now), !dbg !7837
  %tv_sec35 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0, !dbg !7840
  %41 = load i64, i64* %tv_sec35, align 8, !dbg !7840, !tbaa !3252
  %tv_sec36 = getelementptr inbounds %struct.timeval, %struct.timeval* %now, i32 0, i32 0, !dbg !7841
  %42 = load i64, i64* %tv_sec36, align 8, !dbg !7841, !tbaa !3252
  %sub37 = sub i64 %41, %42, !dbg !7842
  %conv38 = sitofp i64 %sub37 to double, !dbg !7843
  %tv_usec39 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !7844
  %43 = load i64, i64* %tv_usec39, align 8, !dbg !7844, !tbaa !3242
  %tv_usec40 = getelementptr inbounds %struct.timeval, %struct.timeval* %now, i32 0, i32 1, !dbg !7845
  %44 = load i64, i64* %tv_usec40, align 8, !dbg !7845, !tbaa !3242
  %sub41 = sub i64 %43, %44, !dbg !7846
  %conv42 = sitofp i64 %sub41 to double, !dbg !7847
  %mul43 = fmul double %conv42, 1.000000e-06, !dbg !7848
  %add44 = fadd double %conv38, %mul43, !dbg !7849
  store double %add44, double* %interval, align 8, !dbg !7850, !tbaa !3215
  br label %while.cond, !dbg !7851

while.end:                                        ; preds = %if.then.33
  store i32 0, i32* %cleanup.dest.slot, !dbg !7852
  br label %cleanup, !dbg !7852

cleanup:                                          ; preds = %while.end, %if.then.24
  %45 = bitcast i32* %has_timeout to i8*, !dbg !7854
  call void @llvm.lifetime.end(i64 4, i8* %45) #1, !dbg !7854
  %46 = bitcast double* %interval to i8*, !dbg !7854
  call void @llvm.lifetime.end(i64 8, i8* %46) #1, !dbg !7854
  %47 = bitcast %struct.timeval* %deadline to i8*, !dbg !7854
  call void @llvm.lifetime.end(i64 16, i8* %47) #1, !dbg !7854
  %48 = bitcast %struct.timeval* %now to i8*, !dbg !7854
  call void @llvm.lifetime.end(i64 16, i8* %48) #1, !dbg !7854
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  %49 = load i64, i64* %outlen, align 8, !dbg !7856, !tbaa !2963
  %cmp48 = icmp slt i64 %49, 0, !dbg !7858
  br i1 %cmp48, label %if.then.50, label %if.end.52, !dbg !7859

if.then.50:                                       ; preds = %cleanup.cont
  %50 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7860, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %50, i32 0, i32 5, !dbg !7862
  %51 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !7862, !tbaa !3181
  %call51 = call %struct._object* %51(), !dbg !7860
  store i64 -1, i64* %retval, !dbg !7863
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.53, !dbg !7863

if.end.52:                                        ; preds = %cleanup.cont
  %52 = load i64, i64* %outlen, align 8, !dbg !7864, !tbaa !2963
  store i64 %52, i64* %retval, !dbg !7865
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.53, !dbg !7865

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.53

cleanup.53:                                       ; preds = %NewDefault, %if.end.52, %if.then.50, %if.then
  %53 = bitcast i32* %timeout to i8*, !dbg !7866
  call void @llvm.lifetime.end(i64 4, i8* %53) #1, !dbg !7866
  %54 = bitcast i64* %outlen to i8*, !dbg !7866
  call void @llvm.lifetime.end(i64 8, i8* %54) #1, !dbg !7866
  %55 = load i64, i64* %retval, !dbg !7866
  ret i64 %55, !dbg !7866
}

declare i64 @recv(i32, i8*, i64, i32) #3

declare i32 @PyArg_ParseTupleAndKeywords(%struct._object*, %struct._object*, i8*, i8**, ...) #3

declare void @PyBuffer_Release(%struct.bufferinfo*) #3

declare %struct._object* @PyLong_FromSsize_t(i64) #3

; Function Attrs: nounwind uwtable
define internal i64 @sock_recvfrom_guts(%struct.PySocketSockObject* %s, i8* %cbuf, i64 %len, i32 %flags, %struct._object** %addr) #0 {
entry:
  %retval = alloca i64, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %cbuf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %addr.addr = alloca %struct._object**, align 8
  %addrbuf = alloca %union.sock_addr, align 8
  %timeout = alloca i32, align 4
  %n = alloca i64, align 8
  %addrlen = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %now = alloca %struct.timeval, align 8
  %deadline = alloca %struct.timeval, align 8
  %interval = alloca double, align 8
  %has_timeout = alloca i32, align 4
  %_save = alloca %struct._ts*, align 8
  %agg.tmp = alloca %union.__SOCKADDR_ARG, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1302, metadata !2310), !dbg !7867
  store i8* %cbuf, i8** %cbuf.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata i8** %cbuf.addr, metadata !1303, metadata !2310), !dbg !7868
  store i64 %len, i64* %len.addr, align 8, !tbaa !2963
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !1304, metadata !2310), !dbg !7869
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !1305, metadata !2310), !dbg !7870
  store %struct._object** %addr, %struct._object*** %addr.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object*** %addr.addr, metadata !1306, metadata !2310), !dbg !7871
  %0 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !7872
  call void @llvm.lifetime.start(i64 128, i8* %0) #1, !dbg !7872
  call void @llvm.dbg.declare(metadata %union.sock_addr* %addrbuf, metadata !1307, metadata !2310), !dbg !7873
  %1 = bitcast i32* %timeout to i8*, !dbg !7874
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !7874
  call void @llvm.dbg.declare(metadata i32* %timeout, metadata !1308, metadata !2310), !dbg !7875
  %2 = bitcast i64* %n to i8*, !dbg !7876
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !7876
  call void @llvm.dbg.declare(metadata i64* %n, metadata !1309, metadata !2310), !dbg !7877
  store i64 -1, i64* %n, align 8, !dbg !7877, !tbaa !2963
  %3 = bitcast i32* %addrlen to i8*, !dbg !7878
  call void @llvm.lifetime.start(i64 4, i8* %3) #1, !dbg !7878
  call void @llvm.dbg.declare(metadata i32* %addrlen, metadata !1310, metadata !2310), !dbg !7879
  %4 = load %struct._object**, %struct._object*** %addr.addr, align 8, !dbg !7880, !tbaa !2326
  store %struct._object* null, %struct._object** %4, align 8, !dbg !7881, !tbaa !2326
  %5 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7882, !tbaa !2326
  %call = call i32 @getsockaddrlen(%struct.PySocketSockObject* %5, i32* %addrlen), !dbg !7884
  %tobool = icmp ne i32 %call, 0, !dbg !7884
  br i1 %tobool, label %if.end, label %if.then, !dbg !7885

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval, !dbg !7886
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.62, !dbg !7886

if.end:                                           ; preds = %entry
  %6 = bitcast %struct.timeval* %now to i8*, !dbg !7887
  call void @llvm.lifetime.start(i64 16, i8* %6) #1, !dbg !7887
  call void @llvm.dbg.declare(metadata %struct.timeval* %now, metadata !1311, metadata !2310), !dbg !7888
  %7 = bitcast %struct.timeval* %deadline to i8*, !dbg !7887
  call void @llvm.lifetime.start(i64 16, i8* %7) #1, !dbg !7887
  call void @llvm.dbg.declare(metadata %struct.timeval* %deadline, metadata !1313, metadata !2310), !dbg !7889
  %8 = bitcast %struct.timeval* %deadline to i8*, !dbg !7889
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 16, i32 8, i1 false), !dbg !7889
  %9 = bitcast double* %interval to i8*, !dbg !7890
  call void @llvm.lifetime.start(i64 8, i8* %9) #1, !dbg !7890
  call void @llvm.dbg.declare(metadata double* %interval, metadata !1314, metadata !2310), !dbg !7891
  %10 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7892, !tbaa !2326
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %10, i32 0, i32 6, !dbg !7893
  %11 = load double, double* %sock_timeout, align 8, !dbg !7893, !tbaa !3176
  store double %11, double* %interval, align 8, !dbg !7891, !tbaa !3215
  %12 = bitcast i32* %has_timeout to i8*, !dbg !7894
  call void @llvm.lifetime.start(i64 4, i8* %12) #1, !dbg !7894
  call void @llvm.dbg.declare(metadata i32* %has_timeout, metadata !1315, metadata !2310), !dbg !7895
  %13 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7896, !tbaa !2326
  %sock_timeout1 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %13, i32 0, i32 6, !dbg !7897
  %14 = load double, double* %sock_timeout1, align 8, !dbg !7897, !tbaa !3176
  %cmp = fcmp ogt double %14, 0.000000e+00, !dbg !7898
  %conv = zext i1 %cmp to i32, !dbg !7898
  store i32 %conv, i32* %has_timeout, align 4, !dbg !7895, !tbaa !3034
  %15 = load i32, i32* %has_timeout, align 4, !dbg !7899, !tbaa !3034
  %tobool2 = icmp ne i32 %15, 0, !dbg !7899
  br i1 %tobool2, label %if.then.3, label %if.end.15, !dbg !7901

if.then.3:                                        ; preds = %if.end
  call void @_PyTime_gettimeofday(%struct.timeval* %now), !dbg !7902
  %16 = bitcast %struct.timeval* %deadline to i8*, !dbg !7905
  %17 = bitcast %struct.timeval* %now to i8*, !dbg !7905
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 16, i32 8, i1 false), !dbg !7905, !tbaa.struct !3228
  br label %do.body, !dbg !7906

do.body:                                          ; preds = %if.then.3
  %18 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7907, !tbaa !2326
  %sock_timeout4 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %18, i32 0, i32 6, !dbg !7910
  %19 = load double, double* %sock_timeout4, align 8, !dbg !7910, !tbaa !3176
  %conv5 = fptosi double %19 to i64, !dbg !7911
  %conv6 = sitofp i64 %conv5 to double, !dbg !7911
  %20 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7912, !tbaa !2326
  %sock_timeout7 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %20, i32 0, i32 6, !dbg !7913
  %21 = load double, double* %sock_timeout7, align 8, !dbg !7913, !tbaa !3176
  %sub = fsub double %conv6, %21, !dbg !7914
  %mul = fmul double %sub, 1.000000e+06, !dbg !7915
  %conv8 = fptosi double %mul to i64, !dbg !7916
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !7917
  %22 = load i64, i64* %tv_usec, align 8, !dbg !7918, !tbaa !3242
  %add = add i64 %22, %conv8, !dbg !7918
  store i64 %add, i64* %tv_usec, align 8, !dbg !7918, !tbaa !3242
  %23 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7919, !tbaa !2326
  %sock_timeout9 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %23, i32 0, i32 6, !dbg !7920
  %24 = load double, double* %sock_timeout9, align 8, !dbg !7920, !tbaa !3176
  %conv10 = fptosi double %24 to i64, !dbg !7921
  %tv_usec11 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !7922
  %25 = load i64, i64* %tv_usec11, align 8, !dbg !7922, !tbaa !3242
  %div = sdiv i64 %25, 1000000, !dbg !7923
  %add12 = add i64 %conv10, %div, !dbg !7924
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0, !dbg !7925
  %26 = load i64, i64* %tv_sec, align 8, !dbg !7926, !tbaa !3252
  %add13 = add i64 %26, %add12, !dbg !7926
  store i64 %add13, i64* %tv_sec, align 8, !dbg !7926, !tbaa !3252
  %tv_usec14 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !7927
  %27 = load i64, i64* %tv_usec14, align 8, !dbg !7928, !tbaa !3242
  %rem = srem i64 %27, 1000000, !dbg !7928
  store i64 %rem, i64* %tv_usec14, align 8, !dbg !7928, !tbaa !3242
  br label %do.cond, !dbg !7929

do.cond:                                          ; preds = %do.body
  br label %do.end, !dbg !7930

do.end:                                           ; preds = %do.cond
  br label %if.end.15, !dbg !7932

if.end.15:                                        ; preds = %do.end, %if.end
  br label %while.cond, !dbg !7934

while.cond:                                       ; preds = %if.end.36, %if.end.15
  br label %while.body, !dbg !7937

while.body:                                       ; preds = %while.cond
  %call16 = call i32* @__errno_location() #2, !dbg !7940
  store i32 0, i32* %call16, align 4, !dbg !7942, !tbaa !3034
  %28 = bitcast %struct._ts** %_save to i8*, !dbg !7943
  call void @llvm.lifetime.start(i64 8, i8* %28) #1, !dbg !7943
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1316, metadata !2310), !dbg !7944
  %call17 = call %struct._ts* @PyEval_SaveThread(), !dbg !7945
  store %struct._ts* %call17, %struct._ts** %_save, align 8, !dbg !7946, !tbaa !2326
  %29 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !7947
  %30 = load i32, i32* %addrlen, align 4, !dbg !7948, !tbaa !3034
  %conv18 = zext i32 %30 to i64, !dbg !7948
  call void @llvm.memset.p0i8.i64(i8* %29, i8 0, i64 %conv18, i32 8, i1 false), !dbg !7947
  %31 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7949, !tbaa !2326
  %32 = load double, double* %interval, align 8, !dbg !7950, !tbaa !3215
  %call19 = call i32 @internal_select_ex(%struct.PySocketSockObject* %31, i32 0, double %32), !dbg !7951
  store i32 %call19, i32* %timeout, align 4, !dbg !7952, !tbaa !3034
  %33 = load i32, i32* %timeout, align 4, !dbg !7953, !tbaa !3034
  %tobool20 = icmp ne i32 %33, 0, !dbg !7953
  br i1 %tobool20, label %if.end.23, label %if.then.21, !dbg !7955

if.then.21:                                       ; preds = %while.body
  %34 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !7956, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %34, i32 0, i32 1, !dbg !7958
  %35 = load i32, i32* %sock_fd, align 4, !dbg !7958, !tbaa !2948
  %36 = load i8*, i8** %cbuf.addr, align 8, !dbg !7959, !tbaa !2326
  %37 = load i64, i64* %len.addr, align 8, !dbg !7960, !tbaa !2963
  %38 = load i32, i32* %flags.addr, align 4, !dbg !7961, !tbaa !3034
  %__sockaddr__ = bitcast %union.__SOCKADDR_ARG* %agg.tmp to %struct.sockaddr**, !dbg !7962
  %sa = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !7963
  store %struct.sockaddr* %sa, %struct.sockaddr** %__sockaddr__, align 8, !dbg !7962, !tbaa !2326
  %coerce.dive = getelementptr %union.__SOCKADDR_ARG, %union.__SOCKADDR_ARG* %agg.tmp, i32 0, i32 0, !dbg !7964
  %39 = load %struct.sockaddr*, %struct.sockaddr** %coerce.dive, align 8, !dbg !7964
  %call22 = call i64 @recvfrom(i32 %35, i8* %36, i64 %37, i32 %38, %struct.sockaddr* %39, i32* %addrlen), !dbg !7964
  store i64 %call22, i64* %n, align 8, !dbg !7965, !tbaa !2963
  br label %if.end.23, !dbg !7966

if.end.23:                                        ; preds = %if.then.21, %while.body
  %40 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !7967, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %40), !dbg !7968
  %41 = bitcast %struct._ts** %_save to i8*, !dbg !7969
  call void @llvm.lifetime.end(i64 8, i8* %41) #1, !dbg !7969
  %42 = load i32, i32* %timeout, align 4, !dbg !7970, !tbaa !3034
  %cmp24 = icmp eq i32 %42, 1, !dbg !7972
  br i1 %cmp24, label %if.then.26, label %if.end.27, !dbg !7973

if.then.26:                                       ; preds = %if.end.23
  %43 = load %struct._object*, %struct._object** @socket_timeout, align 8, !dbg !7974, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %43, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.300, i32 0, i32 0)), !dbg !7976
  store i64 -1, i64* %retval, !dbg !7977
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !7977

if.end.27:                                        ; preds = %if.end.23
  %44 = load i32, i32* %has_timeout, align 4, !dbg !7978, !tbaa !3034
  %tobool28 = icmp ne i32 %44, 0, !dbg !7978
  br i1 %tobool28, label %lor.lhs.false, label %if.then.35, !dbg !7980

lor.lhs.false:                                    ; preds = %if.end.27
  %call29 = call i32* @__errno_location() #2, !dbg !7981
  %45 = load i32, i32* %call29, align 4, !dbg !7983, !tbaa !3034
  %cmp30 = icmp eq i32 %45, 11, !dbg !7984
  br i1 %cmp30, label %if.end.36, label %land.lhs.true, !dbg !7985

land.lhs.true:                                    ; preds = %lor.lhs.false
  %call32 = call i32* @__errno_location() #2, !dbg !7986
  %46 = load i32, i32* %call32, align 4, !dbg !7988, !tbaa !3034
  %cmp33 = icmp eq i32 %46, 11, !dbg !7989
  br i1 %cmp33, label %if.end.36, label %if.then.35, !dbg !7990

if.then.35:                                       ; preds = %land.lhs.true, %if.end.27
  br label %while.end, !dbg !7991

if.end.36:                                        ; preds = %land.lhs.true, %lor.lhs.false
  call void @_PyTime_gettimeofday(%struct.timeval* %now), !dbg !7994
  %tv_sec37 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0, !dbg !7997
  %47 = load i64, i64* %tv_sec37, align 8, !dbg !7997, !tbaa !3252
  %tv_sec38 = getelementptr inbounds %struct.timeval, %struct.timeval* %now, i32 0, i32 0, !dbg !7998
  %48 = load i64, i64* %tv_sec38, align 8, !dbg !7998, !tbaa !3252
  %sub39 = sub i64 %47, %48, !dbg !7999
  %conv40 = sitofp i64 %sub39 to double, !dbg !8000
  %tv_usec41 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !8001
  %49 = load i64, i64* %tv_usec41, align 8, !dbg !8001, !tbaa !3242
  %tv_usec42 = getelementptr inbounds %struct.timeval, %struct.timeval* %now, i32 0, i32 1, !dbg !8002
  %50 = load i64, i64* %tv_usec42, align 8, !dbg !8002, !tbaa !3242
  %sub43 = sub i64 %49, %50, !dbg !8003
  %conv44 = sitofp i64 %sub43 to double, !dbg !8004
  %mul45 = fmul double %conv44, 1.000000e-06, !dbg !8005
  %add46 = fadd double %conv40, %mul45, !dbg !8006
  store double %add46, double* %interval, align 8, !dbg !8007, !tbaa !3215
  br label %while.cond, !dbg !8008

while.end:                                        ; preds = %if.then.35
  store i32 0, i32* %cleanup.dest.slot, !dbg !8009
  br label %cleanup, !dbg !8009

cleanup:                                          ; preds = %while.end, %if.then.26
  %51 = bitcast i32* %has_timeout to i8*, !dbg !8011
  call void @llvm.lifetime.end(i64 4, i8* %51) #1, !dbg !8011
  %52 = bitcast double* %interval to i8*, !dbg !8011
  call void @llvm.lifetime.end(i64 8, i8* %52) #1, !dbg !8011
  %53 = bitcast %struct.timeval* %deadline to i8*, !dbg !8011
  call void @llvm.lifetime.end(i64 16, i8* %53) #1, !dbg !8011
  %54 = bitcast %struct.timeval* %now to i8*, !dbg !8011
  call void @llvm.lifetime.end(i64 16, i8* %54) #1, !dbg !8011
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  %55 = load i64, i64* %n, align 8, !dbg !8013, !tbaa !2963
  %cmp50 = icmp slt i64 %55, 0, !dbg !8015
  br i1 %cmp50, label %if.then.52, label %if.end.54, !dbg !8016

if.then.52:                                       ; preds = %cleanup.cont
  %56 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8017, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %56, i32 0, i32 5, !dbg !8019
  %57 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !8019, !tbaa !3181
  %call53 = call %struct._object* %57(), !dbg !8017
  store i64 -1, i64* %retval, !dbg !8020
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.62, !dbg !8020

if.end.54:                                        ; preds = %cleanup.cont
  %58 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8021, !tbaa !2326
  %sock_fd55 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %58, i32 0, i32 1, !dbg !8023
  %59 = load i32, i32* %sock_fd55, align 4, !dbg !8023, !tbaa !2948
  %sa56 = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !8024
  %60 = load i32, i32* %addrlen, align 4, !dbg !8025, !tbaa !3034
  %conv57 = zext i32 %60 to i64, !dbg !8025
  %61 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8026, !tbaa !2326
  %sock_proto = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %61, i32 0, i32 4, !dbg !8027
  %62 = load i32, i32* %sock_proto, align 4, !dbg !8027, !tbaa !3020
  %call58 = call %struct._object* @makesockaddr(i32 %59, %struct.sockaddr* %sa56, i64 %conv57, i32 %62), !dbg !8028
  %63 = load %struct._object**, %struct._object*** %addr.addr, align 8, !dbg !8029, !tbaa !2326
  store %struct._object* %call58, %struct._object** %63, align 8, !dbg !8030, !tbaa !2326
  %tobool59 = icmp ne %struct._object* %call58, null, !dbg !8030
  br i1 %tobool59, label %if.end.61, label %if.then.60, !dbg !8031

if.then.60:                                       ; preds = %if.end.54
  store i64 -1, i64* %retval, !dbg !8032
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.62, !dbg !8032

if.end.61:                                        ; preds = %if.end.54
  %64 = load i64, i64* %n, align 8, !dbg !8033, !tbaa !2963
  store i64 %64, i64* %retval, !dbg !8034
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.62, !dbg !8034

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.62

cleanup.62:                                       ; preds = %NewDefault, %if.end.61, %if.then.60, %if.then.52, %if.then
  %65 = bitcast i32* %addrlen to i8*, !dbg !8035
  call void @llvm.lifetime.end(i64 4, i8* %65) #1, !dbg !8035
  %66 = bitcast i64* %n to i8*, !dbg !8035
  call void @llvm.lifetime.end(i64 8, i8* %66) #1, !dbg !8035
  %67 = bitcast i32* %timeout to i8*, !dbg !8035
  call void @llvm.lifetime.end(i64 4, i8* %67) #1, !dbg !8035
  %68 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !8035
  call void @llvm.lifetime.end(i64 128, i8* %68) #1, !dbg !8035
  %69 = load i64, i64* %retval, !dbg !8035
  ret i64 %69, !dbg !8035
}

declare i64 @recvfrom(i32, i8*, i64, i32, %struct.sockaddr*, i32*) #3

declare i64 @send(i32, i8*, i64, i32) #3

declare i64 @PyTuple_Size(%struct._object*) #3

declare i64 @sendto(i32, i8*, i64, i32, %struct.sockaddr*, i32) #3

declare i64 @PyLong_AsLong(%struct._object*) #3

; Function Attrs: nounwind uwtable
define internal i32 @internal_setblocking(%struct.PySocketSockObject* %s, i32 %block) #0 {
entry:
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %block.addr = alloca i32, align 4
  %_save = alloca %struct._ts*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1399, metadata !2310), !dbg !8036
  store i32 %block, i32* %block.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %block.addr, metadata !1400, metadata !2310), !dbg !8037
  %0 = load i32, i32* %block.addr, align 4, !dbg !8038, !tbaa !3034
  %tobool = icmp ne i32 %0, 0, !dbg !8038
  br i1 %tobool, label %if.then, label %if.else, !dbg !8040

if.then:                                          ; preds = %entry
  %1 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8041, !tbaa !2326
  %sock_type = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %1, i32 0, i32 3, !dbg !8042
  %2 = load i32, i32* %sock_type, align 4, !dbg !8043, !tbaa !3017
  %and = and i32 %2, -2049, !dbg !8043
  store i32 %and, i32* %sock_type, align 4, !dbg !8043, !tbaa !3017
  br label %if.end, !dbg !8041

if.else:                                          ; preds = %entry
  %3 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8044, !tbaa !2326
  %sock_type1 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %3, i32 0, i32 3, !dbg !8045
  %4 = load i32, i32* %sock_type1, align 4, !dbg !8046, !tbaa !3017
  %or = or i32 %4, 2048, !dbg !8046
  store i32 %or, i32* %sock_type1, align 4, !dbg !8046, !tbaa !3017
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = bitcast %struct._ts** %_save to i8*, !dbg !8047
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !8047
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1401, metadata !2310), !dbg !8048
  %call = call %struct._ts* @PyEval_SaveThread(), !dbg !8049
  store %struct._ts* %call, %struct._ts** %_save, align 8, !dbg !8050, !tbaa !2326
  %6 = load i32, i32* %block.addr, align 4, !dbg !8051, !tbaa !3034
  %tobool2 = icmp ne i32 %6, 0, !dbg !8052
  %lnot = xor i1 %tobool2, true, !dbg !8052
  %lnot.ext = zext i1 %lnot to i32, !dbg !8052
  store i32 %lnot.ext, i32* %block.addr, align 4, !dbg !8053, !tbaa !3034
  %7 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8054, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %7, i32 0, i32 1, !dbg !8055
  %8 = load i32, i32* %sock_fd, align 4, !dbg !8055, !tbaa !2948
  %call3 = call i32 (i32, i64, ...) @ioctl(i32 %8, i64 21537, i32* %block.addr) #1, !dbg !8056
  %9 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !8057, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %9), !dbg !8058
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !8059
  call void @llvm.lifetime.end(i64 8, i8* %10) #1, !dbg !8059
  ret i32 1, !dbg !8060
}

declare double @PyFloat_AsDouble(%struct._object*) #3

declare %struct._object* @PyFloat_FromDouble(double) #3

declare void @PyErr_Clear() #3

; Function Attrs: nounwind
declare i32 @setsockopt(i32, i32, i32, i8*, i32) #5

; Function Attrs: nounwind
declare i32 @shutdown(i32, i32) #5

; Function Attrs: nounwind uwtable
define internal %struct._object* @sock_recvmsg_guts(%struct.PySocketSockObject* %s, %struct.iovec* %iov, i32 %iovlen, i32 %flags, i64 %controllen, %struct._object* (i64, i8*)* %makeval, i8* %makeval_data) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %iov.addr = alloca %struct.iovec*, align 8
  %iovlen.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %controllen.addr = alloca i64, align 8
  %makeval.addr = alloca %struct._object* (i64, i8*)*, align 8
  %makeval_data.addr = alloca i8*, align 8
  %bytes_received = alloca i64, align 8
  %timeout = alloca i32, align 4
  %addrbuf = alloca %union.sock_addr, align 8
  %addrbuflen = alloca i32, align 4
  %msg = alloca %struct.msghdr, align 8
  %cmsg_list = alloca %struct._object*, align 8
  %retval1 = alloca %struct._object*, align 8
  %controlbuf = alloca i8*, align 8
  %cmsgh = alloca %struct.cmsghdr*, align 8
  %cmsgdatalen = alloca i64, align 8
  %cmsg_status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %now = alloca %struct.timeval, align 8
  %deadline = alloca %struct.timeval, align 8
  %interval = alloca double, align 8
  %has_timeout = alloca i32, align 4
  %_save = alloca %struct._ts*, align 8
  %bytes = alloca %struct._object*, align 8
  %tuple = alloca %struct._object*, align 8
  %tmp = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp164 = alloca %struct._object*, align 8
  %numfds = alloca i64, align 8
  %fdp = alloca i32*, align 8
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1451, metadata !2310), !dbg !8061
  store %struct.iovec* %iov, %struct.iovec** %iov.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.iovec** %iov.addr, metadata !1452, metadata !2310), !dbg !8062
  store i32 %iovlen, i32* %iovlen.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %iovlen.addr, metadata !1453, metadata !2310), !dbg !8063
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !1454, metadata !2310), !dbg !8064
  store i64 %controllen, i64* %controllen.addr, align 8, !tbaa !2963
  call void @llvm.dbg.declare(metadata i64* %controllen.addr, metadata !1455, metadata !2310), !dbg !8065
  store %struct._object* (i64, i8*)* %makeval, %struct._object* (i64, i8*)** %makeval.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object* (i64, i8*)** %makeval.addr, metadata !1456, metadata !2310), !dbg !8066
  store i8* %makeval_data, i8** %makeval_data.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata i8** %makeval_data.addr, metadata !1457, metadata !2310), !dbg !8067
  %0 = bitcast i64* %bytes_received to i8*, !dbg !8068
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !8068
  call void @llvm.dbg.declare(metadata i64* %bytes_received, metadata !1458, metadata !2310), !dbg !8069
  store i64 -1, i64* %bytes_received, align 8, !dbg !8069, !tbaa !2963
  %1 = bitcast i32* %timeout to i8*, !dbg !8070
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !8070
  call void @llvm.dbg.declare(metadata i32* %timeout, metadata !1459, metadata !2310), !dbg !8071
  %2 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !8072
  call void @llvm.lifetime.start(i64 128, i8* %2) #1, !dbg !8072
  call void @llvm.dbg.declare(metadata %union.sock_addr* %addrbuf, metadata !1460, metadata !2310), !dbg !8073
  %3 = bitcast i32* %addrbuflen to i8*, !dbg !8074
  call void @llvm.lifetime.start(i64 4, i8* %3) #1, !dbg !8074
  call void @llvm.dbg.declare(metadata i32* %addrbuflen, metadata !1461, metadata !2310), !dbg !8075
  %4 = bitcast %struct.msghdr* %msg to i8*, !dbg !8076
  call void @llvm.lifetime.start(i64 56, i8* %4) #1, !dbg !8076
  call void @llvm.dbg.declare(metadata %struct.msghdr* %msg, metadata !1462, metadata !2310), !dbg !8077
  %5 = bitcast %struct.msghdr* %msg to i8*, !dbg !8077
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 56, i32 8, i1 false), !dbg !8077
  %6 = bitcast %struct._object** %cmsg_list to i8*, !dbg !8078
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !8078
  call void @llvm.dbg.declare(metadata %struct._object** %cmsg_list, metadata !1463, metadata !2310), !dbg !8079
  store %struct._object* null, %struct._object** %cmsg_list, align 8, !dbg !8079, !tbaa !2326
  %7 = bitcast %struct._object** %retval1 to i8*, !dbg !8078
  call void @llvm.lifetime.start(i64 8, i8* %7) #1, !dbg !8078
  call void @llvm.dbg.declare(metadata %struct._object** %retval1, metadata !1464, metadata !2310), !dbg !8080
  store %struct._object* null, %struct._object** %retval1, align 8, !dbg !8080, !tbaa !2326
  %8 = bitcast i8** %controlbuf to i8*, !dbg !8081
  call void @llvm.lifetime.start(i64 8, i8* %8) #1, !dbg !8081
  call void @llvm.dbg.declare(metadata i8** %controlbuf, metadata !1465, metadata !2310), !dbg !8082
  store i8* null, i8** %controlbuf, align 8, !dbg !8082, !tbaa !2326
  %9 = bitcast %struct.cmsghdr** %cmsgh to i8*, !dbg !8083
  call void @llvm.lifetime.start(i64 8, i8* %9) #1, !dbg !8083
  call void @llvm.dbg.declare(metadata %struct.cmsghdr** %cmsgh, metadata !1466, metadata !2310), !dbg !8084
  %10 = bitcast i64* %cmsgdatalen to i8*, !dbg !8085
  call void @llvm.lifetime.start(i64 8, i8* %10) #1, !dbg !8085
  call void @llvm.dbg.declare(metadata i64* %cmsgdatalen, metadata !1467, metadata !2310), !dbg !8086
  store i64 0, i64* %cmsgdatalen, align 8, !dbg !8086, !tbaa !2963
  %11 = bitcast i32* %cmsg_status to i8*, !dbg !8087
  call void @llvm.lifetime.start(i64 4, i8* %11) #1, !dbg !8087
  call void @llvm.dbg.declare(metadata i32* %cmsg_status, metadata !1468, metadata !2310), !dbg !8088
  %12 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8089, !tbaa !2326
  %call = call i32 @getsockaddrlen(%struct.PySocketSockObject* %12, i32* %addrbuflen), !dbg !8091
  %tobool = icmp ne i32 %call, 0, !dbg !8091
  br i1 %tobool, label %if.end, label %if.then, !dbg !8092

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8093
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.231, !dbg !8093

if.end:                                           ; preds = %entry
  %13 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !8094
  %14 = load i32, i32* %addrbuflen, align 4, !dbg !8095, !tbaa !3034
  %conv = zext i32 %14 to i64, !dbg !8095
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 %conv, i32 8, i1 false), !dbg !8094
  %sa = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !8096
  %sa_family = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %sa, i32 0, i32 0, !dbg !8097
  store i16 0, i16* %sa_family, align 2, !dbg !8098, !tbaa !6033
  %15 = load i64, i64* %controllen.addr, align 8, !dbg !8099, !tbaa !2963
  %cmp = icmp slt i64 %15, 0, !dbg !8101
  br i1 %cmp, label %if.then.5, label %lor.lhs.false, !dbg !8102

lor.lhs.false:                                    ; preds = %if.end
  %16 = load i64, i64* %controllen.addr, align 8, !dbg !8103, !tbaa !2963
  %cmp3 = icmp sgt i64 %16, 2147483647, !dbg !8105
  br i1 %cmp3, label %if.then.5, label %if.end.6, !dbg !8106

if.then.5:                                        ; preds = %lor.lhs.false, %if.end
  %17 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !8107, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %17, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.366, i32 0, i32 0)), !dbg !8109
  store %struct._object* null, %struct._object** %retval, !dbg !8110
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.231, !dbg !8110

if.end.6:                                         ; preds = %lor.lhs.false
  %18 = load i64, i64* %controllen.addr, align 8, !dbg !8111, !tbaa !2963
  %cmp7 = icmp sgt i64 %18, 0, !dbg !8113
  br i1 %cmp7, label %land.lhs.true, label %if.end.14, !dbg !8114

land.lhs.true:                                    ; preds = %if.end.6
  %19 = load i64, i64* %controllen.addr, align 8, !dbg !8115, !tbaa !2963
  %call9 = call i8* @PyMem_Malloc(i64 %19), !dbg !8117
  store i8* %call9, i8** %controlbuf, align 8, !dbg !8118, !tbaa !2326
  %cmp10 = icmp eq i8* %call9, null, !dbg !8119
  br i1 %cmp10, label %if.then.12, label %if.end.14, !dbg !8120

if.then.12:                                       ; preds = %land.lhs.true
  %call13 = call %struct._object* @PyErr_NoMemory(), !dbg !8121
  store %struct._object* %call13, %struct._object** %retval, !dbg !8122
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.231, !dbg !8122

if.end.14:                                        ; preds = %land.lhs.true, %if.end.6
  %20 = bitcast %struct.timeval* %now to i8*, !dbg !8123
  call void @llvm.lifetime.start(i64 16, i8* %20) #1, !dbg !8123
  call void @llvm.dbg.declare(metadata %struct.timeval* %now, metadata !1469, metadata !2310), !dbg !8124
  %21 = bitcast %struct.timeval* %deadline to i8*, !dbg !8123
  call void @llvm.lifetime.start(i64 16, i8* %21) #1, !dbg !8123
  call void @llvm.dbg.declare(metadata %struct.timeval* %deadline, metadata !1471, metadata !2310), !dbg !8125
  %22 = bitcast %struct.timeval* %deadline to i8*, !dbg !8125
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 16, i32 8, i1 false), !dbg !8125
  %23 = bitcast double* %interval to i8*, !dbg !8126
  call void @llvm.lifetime.start(i64 8, i8* %23) #1, !dbg !8126
  call void @llvm.dbg.declare(metadata double* %interval, metadata !1472, metadata !2310), !dbg !8127
  %24 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8128, !tbaa !2326
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %24, i32 0, i32 6, !dbg !8129
  %25 = load double, double* %sock_timeout, align 8, !dbg !8129, !tbaa !3176
  store double %25, double* %interval, align 8, !dbg !8127, !tbaa !3215
  %26 = bitcast i32* %has_timeout to i8*, !dbg !8130
  call void @llvm.lifetime.start(i64 4, i8* %26) #1, !dbg !8130
  call void @llvm.dbg.declare(metadata i32* %has_timeout, metadata !1473, metadata !2310), !dbg !8131
  %27 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8132, !tbaa !2326
  %sock_timeout15 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %27, i32 0, i32 6, !dbg !8133
  %28 = load double, double* %sock_timeout15, align 8, !dbg !8133, !tbaa !3176
  %cmp16 = fcmp ogt double %28, 0.000000e+00, !dbg !8134
  %conv17 = zext i1 %cmp16 to i32, !dbg !8134
  store i32 %conv17, i32* %has_timeout, align 4, !dbg !8131, !tbaa !3034
  %29 = load i32, i32* %has_timeout, align 4, !dbg !8135, !tbaa !3034
  %tobool18 = icmp ne i32 %29, 0, !dbg !8135
  br i1 %tobool18, label %if.then.19, label %if.end.31, !dbg !8137

if.then.19:                                       ; preds = %if.end.14
  call void @_PyTime_gettimeofday(%struct.timeval* %now), !dbg !8138
  %30 = bitcast %struct.timeval* %deadline to i8*, !dbg !8141
  %31 = bitcast %struct.timeval* %now to i8*, !dbg !8141
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 16, i32 8, i1 false), !dbg !8141, !tbaa.struct !3228
  br label %do.body, !dbg !8142

do.body:                                          ; preds = %if.then.19
  %32 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8143, !tbaa !2326
  %sock_timeout20 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %32, i32 0, i32 6, !dbg !8146
  %33 = load double, double* %sock_timeout20, align 8, !dbg !8146, !tbaa !3176
  %conv21 = fptosi double %33 to i64, !dbg !8147
  %conv22 = sitofp i64 %conv21 to double, !dbg !8147
  %34 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8148, !tbaa !2326
  %sock_timeout23 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %34, i32 0, i32 6, !dbg !8149
  %35 = load double, double* %sock_timeout23, align 8, !dbg !8149, !tbaa !3176
  %sub = fsub double %conv22, %35, !dbg !8150
  %mul = fmul double %sub, 1.000000e+06, !dbg !8151
  %conv24 = fptosi double %mul to i64, !dbg !8152
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !8153
  %36 = load i64, i64* %tv_usec, align 8, !dbg !8154, !tbaa !3242
  %add = add i64 %36, %conv24, !dbg !8154
  store i64 %add, i64* %tv_usec, align 8, !dbg !8154, !tbaa !3242
  %37 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8155, !tbaa !2326
  %sock_timeout25 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %37, i32 0, i32 6, !dbg !8156
  %38 = load double, double* %sock_timeout25, align 8, !dbg !8156, !tbaa !3176
  %conv26 = fptosi double %38 to i64, !dbg !8157
  %tv_usec27 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !8158
  %39 = load i64, i64* %tv_usec27, align 8, !dbg !8158, !tbaa !3242
  %div = sdiv i64 %39, 1000000, !dbg !8159
  %add28 = add i64 %conv26, %div, !dbg !8160
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0, !dbg !8161
  %40 = load i64, i64* %tv_sec, align 8, !dbg !8162, !tbaa !3252
  %add29 = add i64 %40, %add28, !dbg !8162
  store i64 %add29, i64* %tv_sec, align 8, !dbg !8162, !tbaa !3252
  %tv_usec30 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !8163
  %41 = load i64, i64* %tv_usec30, align 8, !dbg !8164, !tbaa !3242
  %rem = srem i64 %41, 1000000, !dbg !8164
  store i64 %rem, i64* %tv_usec30, align 8, !dbg !8164, !tbaa !3242
  br label %do.cond, !dbg !8165

do.cond:                                          ; preds = %do.body
  br label %do.end, !dbg !8166

do.end:                                           ; preds = %do.cond
  br label %if.end.31, !dbg !8168

if.end.31:                                        ; preds = %do.end, %if.end.14
  br label %while.cond, !dbg !8170

while.cond:                                       ; preds = %if.end.55, %if.end.31
  br label %while.body, !dbg !8173

while.body:                                       ; preds = %while.cond
  %call32 = call i32* @__errno_location() #2, !dbg !8176
  store i32 0, i32* %call32, align 4, !dbg !8178, !tbaa !3034
  %42 = bitcast %struct._ts** %_save to i8*, !dbg !8179
  call void @llvm.lifetime.start(i64 8, i8* %42) #1, !dbg !8179
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1474, metadata !2310), !dbg !8180
  %call33 = call %struct._ts* @PyEval_SaveThread(), !dbg !8181
  store %struct._ts* %call33, %struct._ts** %_save, align 8, !dbg !8182, !tbaa !2326
  %sa34 = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !8183
  %43 = bitcast %struct.sockaddr* %sa34 to i8*, !dbg !8184
  %msg_name = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 0, !dbg !8185
  store i8* %43, i8** %msg_name, align 8, !dbg !8186, !tbaa !5273
  %44 = load i32, i32* %addrbuflen, align 4, !dbg !8187, !tbaa !3034
  %msg_namelen = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 1, !dbg !8188
  store i32 %44, i32* %msg_namelen, align 4, !dbg !8189, !tbaa !5278
  %45 = load %struct.iovec*, %struct.iovec** %iov.addr, align 8, !dbg !8190, !tbaa !2326
  %msg_iov = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 2, !dbg !8191
  store %struct.iovec* %45, %struct.iovec** %msg_iov, align 8, !dbg !8192, !tbaa !5335
  %46 = load i32, i32* %iovlen.addr, align 4, !dbg !8193, !tbaa !3034
  %conv35 = sext i32 %46 to i64, !dbg !8193
  %msg_iovlen = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 3, !dbg !8194
  store i64 %conv35, i64* %msg_iovlen, align 8, !dbg !8195, !tbaa !5315
  %47 = load i8*, i8** %controlbuf, align 8, !dbg !8196, !tbaa !2326
  %msg_control = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 4, !dbg !8197
  store i8* %47, i8** %msg_control, align 8, !dbg !8198, !tbaa !5543
  %48 = load i64, i64* %controllen.addr, align 8, !dbg !8199, !tbaa !2963
  %msg_controllen = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 5, !dbg !8200
  store i64 %48, i64* %msg_controllen, align 8, !dbg !8201, !tbaa !5552
  %49 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8202, !tbaa !2326
  %50 = load double, double* %interval, align 8, !dbg !8203, !tbaa !3215
  %call36 = call i32 @internal_select_ex(%struct.PySocketSockObject* %49, i32 0, double %50), !dbg !8204
  store i32 %call36, i32* %timeout, align 4, !dbg !8205, !tbaa !3034
  %51 = load i32, i32* %timeout, align 4, !dbg !8206, !tbaa !3034
  %tobool37 = icmp ne i32 %51, 0, !dbg !8206
  br i1 %tobool37, label %if.end.40, label %if.then.38, !dbg !8208

if.then.38:                                       ; preds = %while.body
  %52 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8209, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %52, i32 0, i32 1, !dbg !8210
  %53 = load i32, i32* %sock_fd, align 4, !dbg !8210, !tbaa !2948
  %54 = load i32, i32* %flags.addr, align 4, !dbg !8211, !tbaa !3034
  %call39 = call i64 @recvmsg(i32 %53, %struct.msghdr* %msg, i32 %54), !dbg !8212
  store i64 %call39, i64* %bytes_received, align 8, !dbg !8213, !tbaa !2963
  br label %if.end.40, !dbg !8214

if.end.40:                                        ; preds = %if.then.38, %while.body
  %55 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !8215, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %55), !dbg !8216
  %56 = bitcast %struct._ts** %_save to i8*, !dbg !8217
  call void @llvm.lifetime.end(i64 8, i8* %56) #1, !dbg !8217
  %57 = load i32, i32* %timeout, align 4, !dbg !8218, !tbaa !3034
  %cmp41 = icmp eq i32 %57, 1, !dbg !8220
  br i1 %cmp41, label %if.then.43, label %if.end.44, !dbg !8221

if.then.43:                                       ; preds = %if.end.40
  %58 = load %struct._object*, %struct._object** @socket_timeout, align 8, !dbg !8222, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %58, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.300, i32 0, i32 0)), !dbg !8224
  store i32 6, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8225

if.end.44:                                        ; preds = %if.end.40
  %59 = load i32, i32* %has_timeout, align 4, !dbg !8226, !tbaa !3034
  %tobool45 = icmp ne i32 %59, 0, !dbg !8226
  br i1 %tobool45, label %lor.lhs.false.46, label %if.then.54, !dbg !8228

lor.lhs.false.46:                                 ; preds = %if.end.44
  %call47 = call i32* @__errno_location() #2, !dbg !8229
  %60 = load i32, i32* %call47, align 4, !dbg !8231, !tbaa !3034
  %cmp48 = icmp eq i32 %60, 11, !dbg !8232
  br i1 %cmp48, label %if.end.55, label %land.lhs.true.50, !dbg !8233

land.lhs.true.50:                                 ; preds = %lor.lhs.false.46
  %call51 = call i32* @__errno_location() #2, !dbg !8234
  %61 = load i32, i32* %call51, align 4, !dbg !8236, !tbaa !3034
  %cmp52 = icmp eq i32 %61, 11, !dbg !8237
  br i1 %cmp52, label %if.end.55, label %if.then.54, !dbg !8238

if.then.54:                                       ; preds = %land.lhs.true.50, %if.end.44
  br label %while.end, !dbg !8239

if.end.55:                                        ; preds = %land.lhs.true.50, %lor.lhs.false.46
  call void @_PyTime_gettimeofday(%struct.timeval* %now), !dbg !8242
  %tv_sec56 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0, !dbg !8245
  %62 = load i64, i64* %tv_sec56, align 8, !dbg !8245, !tbaa !3252
  %tv_sec57 = getelementptr inbounds %struct.timeval, %struct.timeval* %now, i32 0, i32 0, !dbg !8246
  %63 = load i64, i64* %tv_sec57, align 8, !dbg !8246, !tbaa !3252
  %sub58 = sub i64 %62, %63, !dbg !8247
  %conv59 = sitofp i64 %sub58 to double, !dbg !8248
  %tv_usec60 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1, !dbg !8249
  %64 = load i64, i64* %tv_usec60, align 8, !dbg !8249, !tbaa !3242
  %tv_usec61 = getelementptr inbounds %struct.timeval, %struct.timeval* %now, i32 0, i32 1, !dbg !8250
  %65 = load i64, i64* %tv_usec61, align 8, !dbg !8250, !tbaa !3242
  %sub62 = sub i64 %64, %65, !dbg !8251
  %conv63 = sitofp i64 %sub62 to double, !dbg !8252
  %mul64 = fmul double %conv63, 1.000000e-06, !dbg !8253
  %add65 = fadd double %conv59, %mul64, !dbg !8254
  store double %add65, double* %interval, align 8, !dbg !8255, !tbaa !3215
  br label %while.cond, !dbg !8256

while.end:                                        ; preds = %if.then.54
  store i32 0, i32* %cleanup.dest.slot, !dbg !8257
  br label %cleanup, !dbg !8257

cleanup:                                          ; preds = %while.end, %if.then.43
  %66 = bitcast i32* %has_timeout to i8*, !dbg !8259
  call void @llvm.lifetime.end(i64 4, i8* %66) #1, !dbg !8259
  %67 = bitcast double* %interval to i8*, !dbg !8259
  call void @llvm.lifetime.end(i64 8, i8* %67) #1, !dbg !8259
  %68 = bitcast %struct.timeval* %deadline to i8*, !dbg !8259
  call void @llvm.lifetime.end(i64 16, i8* %68) #1, !dbg !8259
  %69 = bitcast %struct.timeval* %now to i8*, !dbg !8259
  call void @llvm.lifetime.end(i64 16, i8* %69) #1, !dbg !8259
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock

NodeBlock:                                        ; preds = %cleanup
  %Pivot = icmp slt i32 %cleanup.dest, 6
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %cleanup.dest, 6
  br i1 %SwitchLeaf2, label %finally, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  %70 = load i64, i64* %bytes_received, align 8, !dbg !8261, !tbaa !2963
  %cmp69 = icmp slt i64 %70, 0, !dbg !8263
  br i1 %cmp69, label %if.then.71, label %if.end.73, !dbg !8264

if.then.71:                                       ; preds = %cleanup.cont
  %71 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8265, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %71, i32 0, i32 5, !dbg !8267
  %72 = load %struct._object* ()*, %struct._object* ()** %errorhandler, align 8, !dbg !8267, !tbaa !3181
  %call72 = call %struct._object* %72(), !dbg !8265
  br label %finally, !dbg !8268

if.end.73:                                        ; preds = %cleanup.cont
  %call74 = call %struct._object* @PyList_New(i64 0), !dbg !8269
  store %struct._object* %call74, %struct._object** %cmsg_list, align 8, !dbg !8271, !tbaa !2326
  %cmp75 = icmp eq %struct._object* %call74, null, !dbg !8272
  br i1 %cmp75, label %if.then.77, label %if.end.78, !dbg !8273

if.then.77:                                       ; preds = %if.end.73
  br label %err_closefds, !dbg !8274

if.end.78:                                        ; preds = %if.end.73
  %msg_controllen79 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 5, !dbg !8275
  %73 = load i64, i64* %msg_controllen79, align 8, !dbg !8275, !tbaa !5552
  %cmp80 = icmp ugt i64 %73, 0, !dbg !8276
  br i1 %cmp80, label %cond.true, label %cond.false.87, !dbg !8277

cond.true:                                        ; preds = %if.end.78
  %msg_controllen82 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 5, !dbg !8278
  %74 = load i64, i64* %msg_controllen82, align 8, !dbg !8278, !tbaa !5552
  %cmp83 = icmp uge i64 %74, 16, !dbg !8280
  br i1 %cmp83, label %cond.true.85, label %cond.false, !dbg !8281

cond.true.85:                                     ; preds = %cond.true
  %msg_control86 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 4, !dbg !8282
  %75 = load i8*, i8** %msg_control86, align 8, !dbg !8282, !tbaa !5543
  %76 = bitcast i8* %75 to %struct.cmsghdr*, !dbg !8284
  br label %cond.end, !dbg !8281

cond.false:                                       ; preds = %cond.true
  br label %cond.end, !dbg !8285

cond.end:                                         ; preds = %cond.false, %cond.true.85
  %cond = phi %struct.cmsghdr* [ %76, %cond.true.85 ], [ null, %cond.false ], !dbg !8281
  br label %cond.end.88, !dbg !8287

cond.false.87:                                    ; preds = %if.end.78
  br label %cond.end.88, !dbg !8290

cond.end.88:                                      ; preds = %cond.false.87, %cond.end
  %cond89 = phi %struct.cmsghdr* [ %cond, %cond.end ], [ null, %cond.false.87 ], !dbg !8277
  store %struct.cmsghdr* %cond89, %struct.cmsghdr** %cmsgh, align 8, !dbg !8292, !tbaa !2326
  br label %for.cond, !dbg !8295

for.cond:                                         ; preds = %for.inc, %cond.end.88
  %77 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !8296, !tbaa !2326
  %cmp90 = icmp ne %struct.cmsghdr* %77, null, !dbg !8297
  br i1 %cmp90, label %for.body, label %for.end, !dbg !8298

for.body:                                         ; preds = %for.cond
  %78 = bitcast %struct._object** %bytes to i8*, !dbg !8299
  call void @llvm.lifetime.start(i64 8, i8* %78) #1, !dbg !8299
  call void @llvm.dbg.declare(metadata %struct._object** %bytes, metadata !1477, metadata !2310), !dbg !8300
  %79 = bitcast %struct._object** %tuple to i8*, !dbg !8299
  call void @llvm.lifetime.start(i64 8, i8* %79) #1, !dbg !8299
  call void @llvm.dbg.declare(metadata %struct._object** %tuple, metadata !1481, metadata !2310), !dbg !8301
  %80 = bitcast i32* %tmp to i8*, !dbg !8302
  call void @llvm.lifetime.start(i64 4, i8* %80) #1, !dbg !8302
  call void @llvm.dbg.declare(metadata i32* %tmp, metadata !1482, metadata !2310), !dbg !8303
  %81 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !8304, !tbaa !2326
  %call92 = call i32 @get_cmsg_data_len(%struct.msghdr* %msg, %struct.cmsghdr* %81, i64* %cmsgdatalen), !dbg !8305
  store i32 %call92, i32* %cmsg_status, align 4, !dbg !8306, !tbaa !3034
  %82 = load i32, i32* %cmsg_status, align 4, !dbg !8307, !tbaa !3034
  %cmp93 = icmp ne i32 %82, 0, !dbg !8309
  br i1 %cmp93, label %if.then.95, label %if.end.101, !dbg !8310

if.then.95:                                       ; preds = %for.body
  %83 = load %struct._object*, %struct._object** @PyExc_RuntimeWarning, align 8, !dbg !8311, !tbaa !2326
  %call96 = call i32 @PyErr_WarnEx(%struct._object* %83, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.367, i32 0, i32 0), i64 1), !dbg !8314
  %cmp97 = icmp eq i32 %call96, -1, !dbg !8315
  br i1 %cmp97, label %if.then.99, label %if.end.100, !dbg !8316

if.then.99:                                       ; preds = %if.then.95
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup.133, !dbg !8317

if.end.100:                                       ; preds = %if.then.95
  br label %if.end.101, !dbg !8318

if.end.101:                                       ; preds = %if.end.100, %for.body
  %84 = load i32, i32* %cmsg_status, align 4, !dbg !8319, !tbaa !3034
  %cmp102 = icmp slt i32 %84, 0, !dbg !8321
  br i1 %cmp102, label %if.then.104, label %if.end.105, !dbg !8322

if.then.104:                                      ; preds = %if.end.101
  store i32 8, i32* %cleanup.dest.slot
  br label %cleanup.133, !dbg !8323

if.end.105:                                       ; preds = %if.end.101
  %85 = load i64, i64* %cmsgdatalen, align 8, !dbg !8324, !tbaa !2963
  %cmp106 = icmp ugt i64 %85, 9223372036854775807, !dbg !8326
  br i1 %cmp106, label %if.then.108, label %if.end.109, !dbg !8327

if.then.108:                                      ; preds = %if.end.105
  %86 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !8328, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %86, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.368, i32 0, i32 0)), !dbg !8330
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup.133, !dbg !8331

if.end.109:                                       ; preds = %if.end.105
  %87 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !8332, !tbaa !2326
  %__cmsg_data = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %87, i32 0, i32 3, !dbg !8333
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %__cmsg_data, i32 0, i32 0, !dbg !8334
  %88 = load i64, i64* %cmsgdatalen, align 8, !dbg !8335, !tbaa !2963
  %call110 = call %struct._object* @PyBytes_FromStringAndSize(i8* %arraydecay, i64 %88), !dbg !8336
  store %struct._object* %call110, %struct._object** %bytes, align 8, !dbg !8337, !tbaa !2326
  %89 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !8338, !tbaa !2326
  %cmsg_level = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %89, i32 0, i32 1, !dbg !8339
  %90 = load i32, i32* %cmsg_level, align 4, !dbg !8339, !tbaa !3034
  %91 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !8340, !tbaa !2326
  %cmsg_type = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %91, i32 0, i32 2, !dbg !8341
  %92 = load i32, i32* %cmsg_type, align 4, !dbg !8341, !tbaa !3034
  %93 = load %struct._object*, %struct._object** %bytes, align 8, !dbg !8342, !tbaa !2326
  %call111 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.369, i32 0, i32 0), i32 %90, i32 %92, %struct._object* %93), !dbg !8343
  store %struct._object* %call111, %struct._object** %tuple, align 8, !dbg !8344, !tbaa !2326
  %94 = load %struct._object*, %struct._object** %tuple, align 8, !dbg !8345, !tbaa !2326
  %cmp112 = icmp eq %struct._object* %94, null, !dbg !8347
  br i1 %cmp112, label %if.then.114, label %if.end.115, !dbg !8348

if.then.114:                                      ; preds = %if.end.109
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup.133, !dbg !8349

if.end.115:                                       ; preds = %if.end.109
  %95 = load %struct._object*, %struct._object** %cmsg_list, align 8, !dbg !8350, !tbaa !2326
  %96 = load %struct._object*, %struct._object** %tuple, align 8, !dbg !8351, !tbaa !2326
  %call116 = call i32 @PyList_Append(%struct._object* %95, %struct._object* %96), !dbg !8352
  store i32 %call116, i32* %tmp, align 4, !dbg !8353, !tbaa !3034
  br label %do.body.117, !dbg !8354

do.body.117:                                      ; preds = %if.end.115
  %97 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8355
  call void @llvm.lifetime.start(i64 8, i8* %97) #1, !dbg !8355
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1483, metadata !2310), !dbg !8357
  %98 = load %struct._object*, %struct._object** %tuple, align 8, !dbg !8358, !tbaa !2326
  store %struct._object* %98, %struct._object** %_py_decref_tmp, align 8, !dbg !8357, !tbaa !2326
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8359, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %99, i32 0, i32 0, !dbg !8361
  %100 = load i64, i64* %ob_refcnt, align 8, !dbg !8362, !tbaa !2335
  %dec = add i64 %100, -1, !dbg !8362
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !8362, !tbaa !2335
  %cmp119 = icmp ne i64 %dec, 0, !dbg !8363
  br i1 %cmp119, label %if.then.121, label %if.else, !dbg !8364

if.then.121:                                      ; preds = %do.body.117
  br label %if.end.122, !dbg !8365

if.else:                                          ; preds = %do.body.117
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8367, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 1, !dbg !8369
  %102 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !8369, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %102, i32 0, i32 4, !dbg !8370
  %103 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !8370, !tbaa !3442
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !8371, !tbaa !2326
  call void %103(%struct._object* %104), !dbg !8372
  br label %if.end.122

if.end.122:                                       ; preds = %if.else, %if.then.121
  %105 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !8373
  call void @llvm.lifetime.end(i64 8, i8* %105) #1, !dbg !8373
  br label %do.cond.123, !dbg !8375

do.cond.123:                                      ; preds = %if.end.122
  br label %do.end.124, !dbg !8376

do.end.124:                                       ; preds = %do.cond.123
  %106 = load i32, i32* %tmp, align 4, !dbg !8378, !tbaa !3034
  %cmp125 = icmp ne i32 %106, 0, !dbg !8380
  br i1 %cmp125, label %if.then.127, label %if.end.128, !dbg !8381

if.then.127:                                      ; preds = %do.end.124
  store i32 7, i32* %cleanup.dest.slot
  br label %cleanup.133, !dbg !8382

if.end.128:                                       ; preds = %do.end.124
  %107 = load i32, i32* %cmsg_status, align 4, !dbg !8383, !tbaa !3034
  %cmp129 = icmp ne i32 %107, 0, !dbg !8385
  br i1 %cmp129, label %if.then.131, label %if.end.132, !dbg !8386

if.then.131:                                      ; preds = %if.end.128
  store i32 8, i32* %cleanup.dest.slot
  br label %cleanup.133, !dbg !8387

if.end.132:                                       ; preds = %if.end.128
  store i32 0, i32* %cleanup.dest.slot, !dbg !8388
  br label %cleanup.133, !dbg !8388

cleanup.133:                                      ; preds = %if.end.132, %if.then.131, %if.then.127, %if.then.114, %if.then.108, %if.then.104, %if.then.99
  %108 = bitcast i32* %tmp to i8*, !dbg !8389
  call void @llvm.lifetime.end(i64 4, i8* %108) #1, !dbg !8389
  %109 = bitcast %struct._object** %tuple to i8*, !dbg !8389
  call void @llvm.lifetime.end(i64 8, i8* %109) #1, !dbg !8389
  %110 = bitcast %struct._object** %bytes to i8*, !dbg !8389
  call void @llvm.lifetime.end(i64 8, i8* %110) #1, !dbg !8389
  %cleanup.dest.136 = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock.10

NodeBlock.10:                                     ; preds = %cleanup.133
  %Pivot.11 = icmp slt i32 %cleanup.dest.136, 7
  br i1 %Pivot.11, label %LeafBlock.4, label %NodeBlock.8

NodeBlock.8:                                      ; preds = %NodeBlock.10
  %Pivot.9 = icmp slt i32 %cleanup.dest.136, 8
  br i1 %Pivot.9, label %err_closefds, label %LeafBlock.6

LeafBlock.6:                                      ; preds = %NodeBlock.8
  %SwitchLeaf7 = icmp eq i32 %cleanup.dest.136, 8
  br i1 %SwitchLeaf7, label %for.end, label %NewDefault.3

LeafBlock.4:                                      ; preds = %NodeBlock.10
  %SwitchLeaf5 = icmp eq i32 %cleanup.dest.136, 0
  br i1 %SwitchLeaf5, label %cleanup.cont.137, label %NewDefault.3

cleanup.cont.137:                                 ; preds = %LeafBlock.4
  br label %for.inc, !dbg !8391

for.inc:                                          ; preds = %cleanup.cont.137
  %111 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !8392, !tbaa !2326
  %call138 = call %struct.cmsghdr* @__cmsg_nxthdr(%struct.msghdr* %msg, %struct.cmsghdr* %111) #1, !dbg !8393
  store %struct.cmsghdr* %call138, %struct.cmsghdr** %cmsgh, align 8, !dbg !8394, !tbaa !2326
  br label %for.cond, !dbg !8395

for.end:                                          ; preds = %LeafBlock.6, %for.cond
  %112 = load %struct._object* (i64, i8*)*, %struct._object* (i64, i8*)** %makeval.addr, align 8, !dbg !8396, !tbaa !2326
  %113 = load i64, i64* %bytes_received, align 8, !dbg !8397, !tbaa !2963
  %114 = load i8*, i8** %makeval_data.addr, align 8, !dbg !8398, !tbaa !2326
  %call139 = call %struct._object* %112(i64 %113, i8* %114), !dbg !8399
  %115 = load %struct._object*, %struct._object** %cmsg_list, align 8, !dbg !8400, !tbaa !2326
  %msg_flags = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 6, !dbg !8401
  %116 = load i32, i32* %msg_flags, align 4, !dbg !8401, !tbaa !8402
  %117 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8403, !tbaa !2326
  %sock_fd140 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %117, i32 0, i32 1, !dbg !8404
  %118 = load i32, i32* %sock_fd140, align 4, !dbg !8404, !tbaa !2948
  %sa141 = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !8405
  %msg_namelen142 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 1, !dbg !8406
  %119 = load i32, i32* %msg_namelen142, align 4, !dbg !8406, !tbaa !5278
  %120 = load i32, i32* %addrbuflen, align 4, !dbg !8407, !tbaa !3034
  %cmp143 = icmp ugt i32 %119, %120, !dbg !8408
  br i1 %cmp143, label %cond.true.145, label %cond.false.146, !dbg !8409

cond.true.145:                                    ; preds = %for.end
  %121 = load i32, i32* %addrbuflen, align 4, !dbg !8410, !tbaa !3034
  br label %cond.end.148, !dbg !8409

cond.false.146:                                   ; preds = %for.end
  %msg_namelen147 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 1, !dbg !8411
  %122 = load i32, i32* %msg_namelen147, align 4, !dbg !8411, !tbaa !5278
  br label %cond.end.148, !dbg !8409

cond.end.148:                                     ; preds = %cond.false.146, %cond.true.145
  %cond149 = phi i32 [ %121, %cond.true.145 ], [ %122, %cond.false.146 ], !dbg !8409
  %conv150 = zext i32 %cond149 to i64, !dbg !8412
  %123 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8415, !tbaa !2326
  %sock_proto = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %123, i32 0, i32 4, !dbg !8416
  %124 = load i32, i32* %sock_proto, align 4, !dbg !8416, !tbaa !3020
  %call151 = call %struct._object* @makesockaddr(i32 %118, %struct.sockaddr* %sa141, i64 %conv150, i32 %124), !dbg !8417
  %call152 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.370, i32 0, i32 0), %struct._object* %call139, %struct._object* %115, i32 %116, %struct._object* %call151), !dbg !8418
  store %struct._object* %call152, %struct._object** %retval1, align 8, !dbg !8419, !tbaa !2326
  %125 = load %struct._object*, %struct._object** %retval1, align 8, !dbg !8420, !tbaa !2326
  %cmp153 = icmp eq %struct._object* %125, null, !dbg !8422
  br i1 %cmp153, label %if.then.155, label %if.end.156, !dbg !8423

if.then.155:                                      ; preds = %cond.end.148
  br label %err_closefds, !dbg !8424

if.end.156:                                       ; preds = %cond.end.148
  br label %finally, !dbg !8425

finally:                                          ; preds = %LeafBlock.1, %for.end.230, %if.end.156, %if.then.71
  br label %do.body.157, !dbg !8427

do.body.157:                                      ; preds = %finally
  %126 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !8428
  call void @llvm.lifetime.start(i64 8, i8* %126) #1, !dbg !8428
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1485, metadata !2310), !dbg !8430
  %127 = load %struct._object*, %struct._object** %cmsg_list, align 8, !dbg !8431, !tbaa !2326
  store %struct._object* %127, %struct._object** %_py_xdecref_tmp, align 8, !dbg !8430, !tbaa !2326
  %128 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !8432, !tbaa !2326
  %cmp159 = icmp ne %struct._object* %128, null, !dbg !8433
  br i1 %cmp159, label %if.then.161, label %if.end.176, !dbg !8434

if.then.161:                                      ; preds = %do.body.157
  br label %do.body.162, !dbg !8435

do.body.162:                                      ; preds = %if.then.161
  %129 = bitcast %struct._object** %_py_decref_tmp164 to i8*, !dbg !8437
  call void @llvm.lifetime.start(i64 8, i8* %129) #1, !dbg !8437
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp164, metadata !1487, metadata !2310), !dbg !8439
  %130 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !8440, !tbaa !2326
  store %struct._object* %130, %struct._object** %_py_decref_tmp164, align 8, !dbg !8439, !tbaa !2326
  %131 = load %struct._object*, %struct._object** %_py_decref_tmp164, align 8, !dbg !8441, !tbaa !2326
  %ob_refcnt165 = getelementptr inbounds %struct._object, %struct._object* %131, i32 0, i32 0, !dbg !8443
  %132 = load i64, i64* %ob_refcnt165, align 8, !dbg !8444, !tbaa !2335
  %dec166 = add i64 %132, -1, !dbg !8444
  store i64 %dec166, i64* %ob_refcnt165, align 8, !dbg !8444, !tbaa !2335
  %cmp167 = icmp ne i64 %dec166, 0, !dbg !8445
  br i1 %cmp167, label %if.then.169, label %if.else.170, !dbg !8446

if.then.169:                                      ; preds = %do.body.162
  br label %if.end.173, !dbg !8447

if.else.170:                                      ; preds = %do.body.162
  %133 = load %struct._object*, %struct._object** %_py_decref_tmp164, align 8, !dbg !8449, !tbaa !2326
  %ob_type171 = getelementptr inbounds %struct._object, %struct._object* %133, i32 0, i32 1, !dbg !8451
  %134 = load %struct._typeobject*, %struct._typeobject** %ob_type171, align 8, !dbg !8451, !tbaa !2318
  %tp_dealloc172 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %134, i32 0, i32 4, !dbg !8452
  %135 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc172, align 8, !dbg !8452, !tbaa !3442
  %136 = load %struct._object*, %struct._object** %_py_decref_tmp164, align 8, !dbg !8453, !tbaa !2326
  call void %135(%struct._object* %136), !dbg !8454
  br label %if.end.173

if.end.173:                                       ; preds = %if.else.170, %if.then.169
  %137 = bitcast %struct._object** %_py_decref_tmp164 to i8*, !dbg !8455
  call void @llvm.lifetime.end(i64 8, i8* %137) #1, !dbg !8455
  br label %do.cond.174, !dbg !8457

do.cond.174:                                      ; preds = %if.end.173
  br label %do.end.175, !dbg !8458

do.end.175:                                       ; preds = %do.cond.174
  br label %if.end.176, !dbg !8460

if.end.176:                                       ; preds = %do.end.175, %do.body.157
  %138 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !8462
  call void @llvm.lifetime.end(i64 8, i8* %138) #1, !dbg !8462
  br label %do.cond.177, !dbg !8465

do.cond.177:                                      ; preds = %if.end.176
  br label %do.end.178, !dbg !8466

do.end.178:                                       ; preds = %do.cond.177
  %139 = load i8*, i8** %controlbuf, align 8, !dbg !8468, !tbaa !2326
  call void @PyMem_Free(i8* %139), !dbg !8469
  %140 = load %struct._object*, %struct._object** %retval1, align 8, !dbg !8470, !tbaa !2326
  store %struct._object* %140, %struct._object** %retval, !dbg !8471
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.231, !dbg !8471

err_closefds:                                     ; preds = %NodeBlock.8, %if.then.155, %if.then.77
  %msg_controllen179 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 5, !dbg !8472
  %141 = load i64, i64* %msg_controllen179, align 8, !dbg !8472, !tbaa !5552
  %cmp180 = icmp ugt i64 %141, 0, !dbg !8473
  br i1 %cmp180, label %cond.true.182, label %cond.false.191, !dbg !8474

cond.true.182:                                    ; preds = %err_closefds
  %msg_controllen183 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 5, !dbg !8475
  %142 = load i64, i64* %msg_controllen183, align 8, !dbg !8475, !tbaa !5552
  %cmp184 = icmp uge i64 %142, 16, !dbg !8477
  br i1 %cmp184, label %cond.true.186, label %cond.false.188, !dbg !8478

cond.true.186:                                    ; preds = %cond.true.182
  %msg_control187 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %msg, i32 0, i32 4, !dbg !8479
  %143 = load i8*, i8** %msg_control187, align 8, !dbg !8479, !tbaa !5543
  %144 = bitcast i8* %143 to %struct.cmsghdr*, !dbg !8481
  br label %cond.end.189, !dbg !8478

cond.false.188:                                   ; preds = %cond.true.182
  br label %cond.end.189, !dbg !8482

cond.end.189:                                     ; preds = %cond.false.188, %cond.true.186
  %cond190 = phi %struct.cmsghdr* [ %144, %cond.true.186 ], [ null, %cond.false.188 ], !dbg !8478
  br label %cond.end.192, !dbg !8484

cond.false.191:                                   ; preds = %err_closefds
  br label %cond.end.192, !dbg !8487

cond.end.192:                                     ; preds = %cond.false.191, %cond.end.189
  %cond193 = phi %struct.cmsghdr* [ %cond190, %cond.end.189 ], [ null, %cond.false.191 ], !dbg !8474
  store %struct.cmsghdr* %cond193, %struct.cmsghdr** %cmsgh, align 8, !dbg !8489, !tbaa !2326
  br label %for.cond.194, !dbg !8492

for.cond.194:                                     ; preds = %for.inc.228, %cond.end.192
  %145 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !8493, !tbaa !2326
  %cmp195 = icmp ne %struct.cmsghdr* %145, null, !dbg !8494
  br i1 %cmp195, label %for.body.197, label %for.end.230, !dbg !8495

for.body.197:                                     ; preds = %for.cond.194
  %146 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !8496, !tbaa !2326
  %call198 = call i32 @get_cmsg_data_len(%struct.msghdr* %msg, %struct.cmsghdr* %146, i64* %cmsgdatalen), !dbg !8497
  store i32 %call198, i32* %cmsg_status, align 4, !dbg !8498, !tbaa !3034
  %147 = load i32, i32* %cmsg_status, align 4, !dbg !8499, !tbaa !3034
  %cmp199 = icmp slt i32 %147, 0, !dbg !8501
  br i1 %cmp199, label %if.then.201, label %if.end.202, !dbg !8502

if.then.201:                                      ; preds = %for.body.197
  br label %for.end.230, !dbg !8503

if.end.202:                                       ; preds = %for.body.197
  %148 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !8504, !tbaa !2326
  %cmsg_level203 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %148, i32 0, i32 1, !dbg !8505
  %149 = load i32, i32* %cmsg_level203, align 4, !dbg !8505, !tbaa !3034
  %cmp204 = icmp eq i32 %149, 1, !dbg !8506
  br i1 %cmp204, label %land.lhs.true.206, label %if.end.223, !dbg !8507

land.lhs.true.206:                                ; preds = %if.end.202
  %150 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !8508, !tbaa !2326
  %cmsg_type207 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %150, i32 0, i32 2, !dbg !8509
  %151 = load i32, i32* %cmsg_type207, align 4, !dbg !8509, !tbaa !3034
  %cmp208 = icmp eq i32 %151, 1, !dbg !8510
  br i1 %cmp208, label %if.then.210, label %if.end.223, !dbg !8511

if.then.210:                                      ; preds = %land.lhs.true.206
  %152 = bitcast i64* %numfds to i8*, !dbg !8512
  call void @llvm.lifetime.start(i64 8, i8* %152) #1, !dbg !8512
  call void @llvm.dbg.declare(metadata i64* %numfds, metadata !1490, metadata !2310), !dbg !8513
  %153 = bitcast i32** %fdp to i8*, !dbg !8514
  call void @llvm.lifetime.start(i64 8, i8* %153) #1, !dbg !8514
  call void @llvm.dbg.declare(metadata i32** %fdp, metadata !1496, metadata !2310), !dbg !8515
  %154 = load i64, i64* %cmsgdatalen, align 8, !dbg !8516, !tbaa !2963
  %div213 = udiv i64 %154, 4, !dbg !8517
  store i64 %div213, i64* %numfds, align 8, !dbg !8518, !tbaa !2963
  %155 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !8519, !tbaa !2326
  %__cmsg_data214 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %155, i32 0, i32 3, !dbg !8520
  %arraydecay215 = getelementptr inbounds [0 x i8], [0 x i8]* %__cmsg_data214, i32 0, i32 0, !dbg !8521
  %156 = bitcast i8* %arraydecay215 to i32*, !dbg !8522
  store i32* %156, i32** %fdp, align 8, !dbg !8523, !tbaa !2326
  br label %while.cond.216, !dbg !8524

while.cond.216:                                   ; preds = %while.body.220, %if.then.210
  %157 = load i64, i64* %numfds, align 8, !dbg !8525, !tbaa !2963
  %dec217 = add i64 %157, -1, !dbg !8525
  store i64 %dec217, i64* %numfds, align 8, !dbg !8525, !tbaa !2963
  %cmp218 = icmp ugt i64 %157, 0, !dbg !8528
  br i1 %cmp218, label %while.body.220, label %while.end.222, !dbg !8524

while.body.220:                                   ; preds = %while.cond.216
  %158 = load i32*, i32** %fdp, align 8, !dbg !8529, !tbaa !2326
  %incdec.ptr = getelementptr i32, i32* %158, i32 1, !dbg !8529
  store i32* %incdec.ptr, i32** %fdp, align 8, !dbg !8529, !tbaa !2326
  %159 = load i32, i32* %158, align 4, !dbg !8530, !tbaa !3034
  %call221 = call i32 @close(i32 %159), !dbg !8531
  br label %while.cond.216, !dbg !8524

while.end.222:                                    ; preds = %while.cond.216
  %160 = bitcast i32** %fdp to i8*, !dbg !8532
  call void @llvm.lifetime.end(i64 8, i8* %160) #1, !dbg !8532
  %161 = bitcast i64* %numfds to i8*, !dbg !8532
  call void @llvm.lifetime.end(i64 8, i8* %161) #1, !dbg !8532
  br label %if.end.223, !dbg !8533

if.end.223:                                       ; preds = %while.end.222, %land.lhs.true.206, %if.end.202
  %162 = load i32, i32* %cmsg_status, align 4, !dbg !8534, !tbaa !3034
  %cmp224 = icmp ne i32 %162, 0, !dbg !8536
  br i1 %cmp224, label %if.then.226, label %if.end.227, !dbg !8537

if.then.226:                                      ; preds = %if.end.223
  br label %for.end.230, !dbg !8538

if.end.227:                                       ; preds = %if.end.223
  br label %for.inc.228, !dbg !8539

for.inc.228:                                      ; preds = %if.end.227
  %163 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh, align 8, !dbg !8540, !tbaa !2326
  %call229 = call %struct.cmsghdr* @__cmsg_nxthdr(%struct.msghdr* %msg, %struct.cmsghdr* %163) #1, !dbg !8541
  store %struct.cmsghdr* %call229, %struct.cmsghdr** %cmsgh, align 8, !dbg !8542, !tbaa !2326
  br label %for.cond.194, !dbg !8543

for.end.230:                                      ; preds = %if.then.226, %if.then.201, %for.cond.194
  br label %finally, !dbg !8544

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %cleanup.231

NewDefault.3:                                     ; preds = %LeafBlock.6, %LeafBlock.4
  br label %cleanup.231

cleanup.231:                                      ; preds = %NewDefault.3, %NewDefault, %do.end.178, %if.then.12, %if.then.5, %if.then
  %164 = bitcast i32* %cmsg_status to i8*, !dbg !8545
  call void @llvm.lifetime.end(i64 4, i8* %164) #1, !dbg !8545
  %165 = bitcast i64* %cmsgdatalen to i8*, !dbg !8545
  call void @llvm.lifetime.end(i64 8, i8* %165) #1, !dbg !8545
  %166 = bitcast %struct.cmsghdr** %cmsgh to i8*, !dbg !8545
  call void @llvm.lifetime.end(i64 8, i8* %166) #1, !dbg !8545
  %167 = bitcast i8** %controlbuf to i8*, !dbg !8545
  call void @llvm.lifetime.end(i64 8, i8* %167) #1, !dbg !8545
  %168 = bitcast %struct._object** %retval1 to i8*, !dbg !8545
  call void @llvm.lifetime.end(i64 8, i8* %168) #1, !dbg !8545
  %169 = bitcast %struct._object** %cmsg_list to i8*, !dbg !8545
  call void @llvm.lifetime.end(i64 8, i8* %169) #1, !dbg !8545
  %170 = bitcast %struct.msghdr* %msg to i8*, !dbg !8545
  call void @llvm.lifetime.end(i64 56, i8* %170) #1, !dbg !8545
  %171 = bitcast i32* %addrbuflen to i8*, !dbg !8545
  call void @llvm.lifetime.end(i64 4, i8* %171) #1, !dbg !8545
  %172 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !8545
  call void @llvm.lifetime.end(i64 128, i8* %172) #1, !dbg !8545
  %173 = bitcast i32* %timeout to i8*, !dbg !8545
  call void @llvm.lifetime.end(i64 4, i8* %173) #1, !dbg !8545
  %174 = bitcast i64* %bytes_received to i8*, !dbg !8545
  call void @llvm.lifetime.end(i64 8, i8* %174) #1, !dbg !8545
  %175 = load %struct._object*, %struct._object** %retval, !dbg !8545
  ret %struct._object* %175, !dbg !8545
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @makeval_recvmsg(i64 %received, i8* %data) #0 {
entry:
  %received.addr = alloca i64, align 8
  %data.addr = alloca i8*, align 8
  %buf = alloca %struct._object**, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  store i64 %received, i64* %received.addr, align 8, !tbaa !2963
  call void @llvm.dbg.declare(metadata i64* %received.addr, metadata !1531, metadata !2310), !dbg !8546
  store i8* %data, i8** %data.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !1532, metadata !2310), !dbg !8547
  %0 = bitcast %struct._object*** %buf to i8*, !dbg !8548
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !8548
  call void @llvm.dbg.declare(metadata %struct._object*** %buf, metadata !1533, metadata !2310), !dbg !8549
  %1 = load i8*, i8** %data.addr, align 8, !dbg !8550, !tbaa !2326
  %2 = bitcast i8* %1 to %struct._object**, !dbg !8550
  store %struct._object** %2, %struct._object*** %buf, align 8, !dbg !8549, !tbaa !2326
  %3 = load i64, i64* %received.addr, align 8, !dbg !8551, !tbaa !2963
  %4 = load %struct._object**, %struct._object*** %buf, align 8, !dbg !8553, !tbaa !2326
  %5 = load %struct._object*, %struct._object** %4, align 8, !dbg !8554, !tbaa !2326
  %6 = bitcast %struct._object* %5 to %struct.PyVarObject*, !dbg !8555
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1, !dbg !8556
  %7 = load i64, i64* %ob_size, align 8, !dbg !8556, !tbaa !5055
  %cmp = icmp slt i64 %3, %7, !dbg !8557
  br i1 %cmp, label %if.then, label %if.end, !dbg !8558

if.then:                                          ; preds = %entry
  %8 = load %struct._object**, %struct._object*** %buf, align 8, !dbg !8559, !tbaa !2326
  %9 = load i64, i64* %received.addr, align 8, !dbg !8560, !tbaa !2963
  %call = call i32 @_PyBytes_Resize(%struct._object** %8, i64 %9), !dbg !8561
  br label %if.end, !dbg !8561

if.end:                                           ; preds = %if.then, %entry
  br label %do.body, !dbg !8562

do.body:                                          ; preds = %if.end
  %10 = bitcast %struct._object** %_py_xincref_tmp to i8*, !dbg !8563
  call void @llvm.lifetime.start(i64 8, i8* %10) #1, !dbg !8563
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xincref_tmp, metadata !1534, metadata !2310), !dbg !8565
  %11 = load %struct._object**, %struct._object*** %buf, align 8, !dbg !8566, !tbaa !2326
  %12 = load %struct._object*, %struct._object** %11, align 8, !dbg !8567, !tbaa !2326
  store %struct._object* %12, %struct._object** %_py_xincref_tmp, align 8, !dbg !8565, !tbaa !2326
  %13 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8, !dbg !8568, !tbaa !2326
  %cmp1 = icmp ne %struct._object* %13, null, !dbg !8570
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !8571

if.then.2:                                        ; preds = %do.body
  %14 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8, !dbg !8572, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0, !dbg !8574
  %15 = load i64, i64* %ob_refcnt, align 8, !dbg !8575, !tbaa !2335
  %inc = add i64 %15, 1, !dbg !8575
  store i64 %inc, i64* %ob_refcnt, align 8, !dbg !8575, !tbaa !2335
  br label %if.end.3, !dbg !8576

if.end.3:                                         ; preds = %if.then.2, %do.body
  %16 = bitcast %struct._object** %_py_xincref_tmp to i8*, !dbg !8577
  call void @llvm.lifetime.end(i64 8, i8* %16) #1, !dbg !8577
  br label %do.cond, !dbg !8580

do.cond:                                          ; preds = %if.end.3
  br label %do.end, !dbg !8581

do.end:                                           ; preds = %do.cond
  %17 = load %struct._object**, %struct._object*** %buf, align 8, !dbg !8583, !tbaa !2326
  %18 = load %struct._object*, %struct._object** %17, align 8, !dbg !8584, !tbaa !2326
  %19 = bitcast %struct._object*** %buf to i8*, !dbg !8585
  call void @llvm.lifetime.end(i64 8, i8* %19) #1, !dbg !8585
  ret %struct._object* %18, !dbg !8586
}

declare i8* @PyMem_Malloc(i64) #3

declare %struct._object* @PyErr_NoMemory() #3

declare i64 @recvmsg(i32, %struct.msghdr*, i32) #3

declare %struct._object* @PyList_New(i64) #3

; Function Attrs: nounwind uwtable
define internal i32 @get_cmsg_data_len(%struct.msghdr* %msg, %struct.cmsghdr* %cmsgh, i64* %data_len) #0 {
entry:
  %retval = alloca i32, align 4
  %msg.addr = alloca %struct.msghdr*, align 8
  %cmsgh.addr = alloca %struct.cmsghdr*, align 8
  %data_len.addr = alloca i64*, align 8
  %space = alloca i64, align 8
  %cmsg_data_len = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.msghdr* %msg, %struct.msghdr** %msg.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.msghdr** %msg.addr, metadata !1503, metadata !2310), !dbg !8587
  store %struct.cmsghdr* %cmsgh, %struct.cmsghdr** %cmsgh.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.cmsghdr** %cmsgh.addr, metadata !1504, metadata !2310), !dbg !8588
  store i64* %data_len, i64** %data_len.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata i64** %data_len.addr, metadata !1505, metadata !2310), !dbg !8589
  %0 = bitcast i64* %space to i8*, !dbg !8590
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !8590
  call void @llvm.dbg.declare(metadata i64* %space, metadata !1506, metadata !2310), !dbg !8591
  %1 = bitcast i64* %cmsg_data_len to i8*, !dbg !8590
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !8590
  call void @llvm.dbg.declare(metadata i64* %cmsg_data_len, metadata !1507, metadata !2310), !dbg !8592
  %2 = load %struct.msghdr*, %struct.msghdr** %msg.addr, align 8, !dbg !8593, !tbaa !2326
  %3 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh.addr, align 8, !dbg !8595, !tbaa !2326
  %call = call i32 @cmsg_min_space(%struct.msghdr* %2, %struct.cmsghdr* %3, i64 16), !dbg !8596
  %tobool = icmp ne i32 %call, 0, !dbg !8596
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !8597

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh.addr, align 8, !dbg !8598, !tbaa !2326
  %cmsg_len = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %4, i32 0, i32 0, !dbg !8599
  %5 = load i64, i64* %cmsg_len, align 8, !dbg !8599, !tbaa !2963
  %cmp = icmp ult i64 %5, 16, !dbg !8600
  br i1 %cmp, label %if.then, label %if.end, !dbg !8601

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -1, i32* %retval, !dbg !8602
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8602

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh.addr, align 8, !dbg !8603, !tbaa !2326
  %cmsg_len1 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %6, i32 0, i32 0, !dbg !8604
  %7 = load i64, i64* %cmsg_len1, align 8, !dbg !8604, !tbaa !2963
  %sub = sub i64 %7, 16, !dbg !8605
  store i64 %sub, i64* %cmsg_data_len, align 8, !dbg !8606, !tbaa !2963
  %8 = load %struct.msghdr*, %struct.msghdr** %msg.addr, align 8, !dbg !8607, !tbaa !2326
  %9 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh.addr, align 8, !dbg !8609, !tbaa !2326
  %call2 = call i32 @get_cmsg_data_space(%struct.msghdr* %8, %struct.cmsghdr* %9, i64* %space), !dbg !8610
  %tobool3 = icmp ne i32 %call2, 0, !dbg !8610
  br i1 %tobool3, label %if.end.5, label %if.then.4, !dbg !8611

if.then.4:                                        ; preds = %if.end
  store i32 -1, i32* %retval, !dbg !8612
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8612

if.end.5:                                         ; preds = %if.end
  %10 = load i64, i64* %space, align 8, !dbg !8613, !tbaa !2963
  %11 = load i64, i64* %cmsg_data_len, align 8, !dbg !8615, !tbaa !2963
  %cmp6 = icmp uge i64 %10, %11, !dbg !8616
  br i1 %cmp6, label %if.then.7, label %if.end.8, !dbg !8617

if.then.7:                                        ; preds = %if.end.5
  %12 = load i64, i64* %cmsg_data_len, align 8, !dbg !8618, !tbaa !2963
  %13 = load i64*, i64** %data_len.addr, align 8, !dbg !8620, !tbaa !2326
  store i64 %12, i64* %13, align 8, !dbg !8621, !tbaa !2963
  store i32 0, i32* %retval, !dbg !8622
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8622

if.end.8:                                         ; preds = %if.end.5
  %14 = load i64, i64* %space, align 8, !dbg !8623, !tbaa !2963
  %15 = load i64*, i64** %data_len.addr, align 8, !dbg !8624, !tbaa !2326
  store i64 %14, i64* %15, align 8, !dbg !8625, !tbaa !2963
  store i32 1, i32* %retval, !dbg !8626
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8626

cleanup:                                          ; preds = %if.end.8, %if.then.7, %if.then.4, %if.then
  %16 = bitcast i64* %cmsg_data_len to i8*, !dbg !8627
  call void @llvm.lifetime.end(i64 8, i8* %16) #1, !dbg !8627
  %17 = bitcast i64* %space to i8*, !dbg !8627
  call void @llvm.lifetime.end(i64 8, i8* %17) #1, !dbg !8627
  %18 = load i32, i32* %retval, !dbg !8627
  ret i32 %18, !dbg !8627
}

declare i32 @PyErr_WarnEx(%struct._object*, i8*, i64) #3

declare i32 @PyList_Append(%struct._object*, %struct._object*) #3

; Function Attrs: inlinehint nounwind uwtable
define available_externally %struct.cmsghdr* @__cmsg_nxthdr(%struct.msghdr* %__mhdr, %struct.cmsghdr* %__cmsg) #6 {
entry:
  %retval = alloca %struct.cmsghdr*, align 8
  %__mhdr.addr = alloca %struct.msghdr*, align 8
  %__cmsg.addr = alloca %struct.cmsghdr*, align 8
  store %struct.msghdr* %__mhdr, %struct.msghdr** %__mhdr.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.msghdr** %__mhdr.addr, metadata !1527, metadata !2310), !dbg !8628
  store %struct.cmsghdr* %__cmsg, %struct.cmsghdr** %__cmsg.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.cmsghdr** %__cmsg.addr, metadata !1528, metadata !2310), !dbg !8629
  %0 = load %struct.cmsghdr*, %struct.cmsghdr** %__cmsg.addr, align 8, !dbg !8630, !tbaa !2326
  %cmsg_len = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %0, i32 0, i32 0, !dbg !8632
  %1 = load i64, i64* %cmsg_len, align 8, !dbg !8632, !tbaa !2963
  %cmp = icmp ult i64 %1, 16, !dbg !8633
  br i1 %cmp, label %if.then, label %if.end, !dbg !8634

if.then:                                          ; preds = %entry
  store %struct.cmsghdr* null, %struct.cmsghdr** %retval, !dbg !8635
  br label %return, !dbg !8635

if.end:                                           ; preds = %entry
  %2 = load %struct.cmsghdr*, %struct.cmsghdr** %__cmsg.addr, align 8, !dbg !8636, !tbaa !2326
  %3 = bitcast %struct.cmsghdr* %2 to i8*, !dbg !8637
  %4 = load %struct.cmsghdr*, %struct.cmsghdr** %__cmsg.addr, align 8, !dbg !8638, !tbaa !2326
  %cmsg_len1 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %4, i32 0, i32 0, !dbg !8639
  %5 = load i64, i64* %cmsg_len1, align 8, !dbg !8639, !tbaa !2963
  %add = add i64 %5, 8, !dbg !8640
  %sub = sub i64 %add, 1, !dbg !8641
  %and = and i64 %sub, -8, !dbg !8642
  %add.ptr = getelementptr i8, i8* %3, i64 %and, !dbg !8643
  %6 = bitcast i8* %add.ptr to %struct.cmsghdr*, !dbg !8644
  store %struct.cmsghdr* %6, %struct.cmsghdr** %__cmsg.addr, align 8, !dbg !8645, !tbaa !2326
  %7 = load %struct.cmsghdr*, %struct.cmsghdr** %__cmsg.addr, align 8, !dbg !8646, !tbaa !2326
  %add.ptr2 = getelementptr %struct.cmsghdr, %struct.cmsghdr* %7, i64 1, !dbg !8648
  %8 = bitcast %struct.cmsghdr* %add.ptr2 to i8*, !dbg !8649
  %9 = load %struct.msghdr*, %struct.msghdr** %__mhdr.addr, align 8, !dbg !8650, !tbaa !2326
  %msg_control = getelementptr inbounds %struct.msghdr, %struct.msghdr* %9, i32 0, i32 4, !dbg !8651
  %10 = load i8*, i8** %msg_control, align 8, !dbg !8651, !tbaa !5543
  %11 = load %struct.msghdr*, %struct.msghdr** %__mhdr.addr, align 8, !dbg !8652, !tbaa !2326
  %msg_controllen = getelementptr inbounds %struct.msghdr, %struct.msghdr* %11, i32 0, i32 5, !dbg !8653
  %12 = load i64, i64* %msg_controllen, align 8, !dbg !8653, !tbaa !5552
  %add.ptr3 = getelementptr i8, i8* %10, i64 %12, !dbg !8654
  %cmp4 = icmp ugt i8* %8, %add.ptr3, !dbg !8655
  br i1 %cmp4, label %if.then.14, label %lor.lhs.false, !dbg !8656

lor.lhs.false:                                    ; preds = %if.end
  %13 = load %struct.cmsghdr*, %struct.cmsghdr** %__cmsg.addr, align 8, !dbg !8657, !tbaa !2326
  %14 = bitcast %struct.cmsghdr* %13 to i8*, !dbg !8659
  %15 = load %struct.cmsghdr*, %struct.cmsghdr** %__cmsg.addr, align 8, !dbg !8660, !tbaa !2326
  %cmsg_len5 = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %15, i32 0, i32 0, !dbg !8661
  %16 = load i64, i64* %cmsg_len5, align 8, !dbg !8661, !tbaa !2963
  %add6 = add i64 %16, 8, !dbg !8662
  %sub7 = sub i64 %add6, 1, !dbg !8663
  %and8 = and i64 %sub7, -8, !dbg !8664
  %add.ptr9 = getelementptr i8, i8* %14, i64 %and8, !dbg !8665
  %17 = load %struct.msghdr*, %struct.msghdr** %__mhdr.addr, align 8, !dbg !8666, !tbaa !2326
  %msg_control10 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %17, i32 0, i32 4, !dbg !8667
  %18 = load i8*, i8** %msg_control10, align 8, !dbg !8667, !tbaa !5543
  %19 = load %struct.msghdr*, %struct.msghdr** %__mhdr.addr, align 8, !dbg !8668, !tbaa !2326
  %msg_controllen11 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %19, i32 0, i32 5, !dbg !8669
  %20 = load i64, i64* %msg_controllen11, align 8, !dbg !8669, !tbaa !5552
  %add.ptr12 = getelementptr i8, i8* %18, i64 %20, !dbg !8670
  %cmp13 = icmp ugt i8* %add.ptr9, %add.ptr12, !dbg !8671
  br i1 %cmp13, label %if.then.14, label %if.end.15, !dbg !8672

if.then.14:                                       ; preds = %lor.lhs.false, %if.end
  store %struct.cmsghdr* null, %struct.cmsghdr** %retval, !dbg !8673
  br label %return, !dbg !8673

if.end.15:                                        ; preds = %lor.lhs.false
  %21 = load %struct.cmsghdr*, %struct.cmsghdr** %__cmsg.addr, align 8, !dbg !8674, !tbaa !2326
  store %struct.cmsghdr* %21, %struct.cmsghdr** %retval, !dbg !8675
  br label %return, !dbg !8675

return:                                           ; preds = %if.end.15, %if.then.14, %if.then
  %22 = load %struct.cmsghdr*, %struct.cmsghdr** %retval, !dbg !8676
  ret %struct.cmsghdr* %22, !dbg !8676
}

; Function Attrs: nounwind uwtable
define internal i32 @cmsg_min_space(%struct.msghdr* %msg, %struct.cmsghdr* %cmsgh, i64 %space) #0 {
entry:
  %retval = alloca i32, align 4
  %msg.addr = alloca %struct.msghdr*, align 8
  %cmsgh.addr = alloca %struct.cmsghdr*, align 8
  %space.addr = alloca i64, align 8
  %cmsg_offset = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.msghdr* %msg, %struct.msghdr** %msg.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.msghdr** %msg.addr, metadata !1512, metadata !2310), !dbg !8677
  store %struct.cmsghdr* %cmsgh, %struct.cmsghdr** %cmsgh.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.cmsghdr** %cmsgh.addr, metadata !1513, metadata !2310), !dbg !8678
  store i64 %space, i64* %space.addr, align 8, !tbaa !2963
  call void @llvm.dbg.declare(metadata i64* %space.addr, metadata !1514, metadata !2310), !dbg !8679
  %0 = bitcast i64* %cmsg_offset to i8*, !dbg !8680
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !8680
  call void @llvm.dbg.declare(metadata i64* %cmsg_offset, metadata !1515, metadata !2310), !dbg !8681
  %1 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh.addr, align 8, !dbg !8682, !tbaa !2326
  %cmp = icmp eq %struct.cmsghdr* %1, null, !dbg !8684
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8685

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.msghdr*, %struct.msghdr** %msg.addr, align 8, !dbg !8686, !tbaa !2326
  %msg_control = getelementptr inbounds %struct.msghdr, %struct.msghdr* %2, i32 0, i32 4, !dbg !8688
  %3 = load i8*, i8** %msg_control, align 8, !dbg !8688, !tbaa !5543
  %cmp1 = icmp eq i8* %3, null, !dbg !8689
  br i1 %cmp1, label %if.then, label %if.end, !dbg !8690

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, !dbg !8691
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8691

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.msghdr*, %struct.msghdr** %msg.addr, align 8, !dbg !8692, !tbaa !2326
  %msg_controllen = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i32 0, i32 5, !dbg !8694
  %5 = load i64, i64* %msg_controllen, align 8, !dbg !8694, !tbaa !5552
  %cmp2 = icmp ult i64 %5, 0, !dbg !8695
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !8696

if.then.3:                                        ; preds = %if.end
  store i32 0, i32* %retval, !dbg !8697
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8697

if.end.4:                                         ; preds = %if.end
  %6 = load i64, i64* %space.addr, align 8, !dbg !8698, !tbaa !2963
  %cmp5 = icmp ult i64 %6, 8, !dbg !8700
  br i1 %cmp5, label %if.then.6, label %if.end.7, !dbg !8701

if.then.6:                                        ; preds = %if.end.4
  store i64 8, i64* %space.addr, align 8, !dbg !8702, !tbaa !2963
  br label %if.end.7, !dbg !8703

if.end.7:                                         ; preds = %if.then.6, %if.end.4
  %7 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh.addr, align 8, !dbg !8704, !tbaa !2326
  %8 = bitcast %struct.cmsghdr* %7 to i8*, !dbg !8705
  %9 = load %struct.msghdr*, %struct.msghdr** %msg.addr, align 8, !dbg !8706, !tbaa !2326
  %msg_control8 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %9, i32 0, i32 4, !dbg !8707
  %10 = load i8*, i8** %msg_control8, align 8, !dbg !8707, !tbaa !5543
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64, !dbg !8708
  %sub.ptr.rhs.cast = ptrtoint i8* %10 to i64, !dbg !8708
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !8708
  store i64 %sub.ptr.sub, i64* %cmsg_offset, align 8, !dbg !8709, !tbaa !2963
  %11 = load i64, i64* %cmsg_offset, align 8, !dbg !8710, !tbaa !2963
  %12 = load i64, i64* %space.addr, align 8, !dbg !8711, !tbaa !2963
  %sub = sub i64 -1, %12, !dbg !8712
  %cmp9 = icmp ule i64 %11, %sub, !dbg !8713
  br i1 %cmp9, label %land.rhs, label %land.end, !dbg !8714

land.rhs:                                         ; preds = %if.end.7
  %13 = load i64, i64* %cmsg_offset, align 8, !dbg !8715, !tbaa !2963
  %14 = load i64, i64* %space.addr, align 8, !dbg !8716, !tbaa !2963
  %add = add i64 %13, %14, !dbg !8717
  %15 = load %struct.msghdr*, %struct.msghdr** %msg.addr, align 8, !dbg !8718, !tbaa !2326
  %msg_controllen10 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %15, i32 0, i32 5, !dbg !8719
  %16 = load i64, i64* %msg_controllen10, align 8, !dbg !8719, !tbaa !5552
  %cmp11 = icmp ule i64 %add, %16, !dbg !8720
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.7
  %17 = phi i1 [ false, %if.end.7 ], [ %cmp11, %land.rhs ]
  %land.ext = zext i1 %17 to i32, !dbg !8721
  store i32 %land.ext, i32* %retval, !dbg !8723
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8723

cleanup:                                          ; preds = %land.end, %if.then.3, %if.then
  %18 = bitcast i64* %cmsg_offset to i8*, !dbg !8724
  call void @llvm.lifetime.end(i64 8, i8* %18) #1, !dbg !8724
  %19 = load i32, i32* %retval, !dbg !8724
  ret i32 %19, !dbg !8724
}

; Function Attrs: nounwind uwtable
define internal i32 @get_cmsg_data_space(%struct.msghdr* %msg, %struct.cmsghdr* %cmsgh, i64* %space) #0 {
entry:
  %retval = alloca i32, align 4
  %msg.addr = alloca %struct.msghdr*, align 8
  %cmsgh.addr = alloca %struct.cmsghdr*, align 8
  %space.addr = alloca i64*, align 8
  %data_offset = alloca i64, align 8
  %data_ptr = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.msghdr* %msg, %struct.msghdr** %msg.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.msghdr** %msg.addr, metadata !1518, metadata !2310), !dbg !8725
  store %struct.cmsghdr* %cmsgh, %struct.cmsghdr** %cmsgh.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.cmsghdr** %cmsgh.addr, metadata !1519, metadata !2310), !dbg !8726
  store i64* %space, i64** %space.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata i64** %space.addr, metadata !1520, metadata !2310), !dbg !8727
  %0 = bitcast i64* %data_offset to i8*, !dbg !8728
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !8728
  call void @llvm.dbg.declare(metadata i64* %data_offset, metadata !1521, metadata !2310), !dbg !8729
  %1 = bitcast i8** %data_ptr to i8*, !dbg !8730
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !8730
  call void @llvm.dbg.declare(metadata i8** %data_ptr, metadata !1522, metadata !2310), !dbg !8731
  %2 = load %struct.cmsghdr*, %struct.cmsghdr** %cmsgh.addr, align 8, !dbg !8732, !tbaa !2326
  %__cmsg_data = getelementptr inbounds %struct.cmsghdr, %struct.cmsghdr* %2, i32 0, i32 3, !dbg !8734
  %arraydecay = getelementptr inbounds [0 x i8], [0 x i8]* %__cmsg_data, i32 0, i32 0, !dbg !8735
  store i8* %arraydecay, i8** %data_ptr, align 8, !dbg !8736, !tbaa !2326
  %cmp = icmp eq i8* %arraydecay, null, !dbg !8737
  br i1 %cmp, label %if.then, label %if.end, !dbg !8738

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !8739
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8739

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %data_ptr, align 8, !dbg !8740, !tbaa !2326
  %4 = load %struct.msghdr*, %struct.msghdr** %msg.addr, align 8, !dbg !8741, !tbaa !2326
  %msg_control = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i32 0, i32 4, !dbg !8742
  %5 = load i8*, i8** %msg_control, align 8, !dbg !8742, !tbaa !5543
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64, !dbg !8743
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64, !dbg !8743
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !8743
  store i64 %sub.ptr.sub, i64* %data_offset, align 8, !dbg !8744, !tbaa !2963
  %6 = load i64, i64* %data_offset, align 8, !dbg !8745, !tbaa !2963
  %7 = load %struct.msghdr*, %struct.msghdr** %msg.addr, align 8, !dbg !8747, !tbaa !2326
  %msg_controllen = getelementptr inbounds %struct.msghdr, %struct.msghdr* %7, i32 0, i32 5, !dbg !8748
  %8 = load i64, i64* %msg_controllen, align 8, !dbg !8748, !tbaa !5552
  %cmp1 = icmp ugt i64 %6, %8, !dbg !8749
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !8750

if.then.2:                                        ; preds = %if.end
  store i32 0, i32* %retval, !dbg !8751
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8751

if.end.3:                                         ; preds = %if.end
  %9 = load %struct.msghdr*, %struct.msghdr** %msg.addr, align 8, !dbg !8752, !tbaa !2326
  %msg_controllen4 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %9, i32 0, i32 5, !dbg !8753
  %10 = load i64, i64* %msg_controllen4, align 8, !dbg !8753, !tbaa !5552
  %11 = load i64, i64* %data_offset, align 8, !dbg !8754, !tbaa !2963
  %sub = sub i64 %10, %11, !dbg !8755
  %12 = load i64*, i64** %space.addr, align 8, !dbg !8756, !tbaa !2326
  store i64 %sub, i64* %12, align 8, !dbg !8757, !tbaa !2963
  store i32 1, i32* %retval, !dbg !8758
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8758

cleanup:                                          ; preds = %if.end.3, %if.then.2, %if.then
  %13 = bitcast i8** %data_ptr to i8*, !dbg !8759
  call void @llvm.lifetime.end(i64 8, i8* %13) #1, !dbg !8759
  %14 = bitcast i64* %data_offset to i8*, !dbg !8759
  call void @llvm.lifetime.end(i64 8, i8* %14) #1, !dbg !8759
  %15 = load i32, i32* %retval, !dbg !8759
  ret i32 %15, !dbg !8759
}

declare %struct._object* @PySequence_Fast(%struct._object*, i8*) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @makeval_recvmsg_into(i64 %received, i8* %data) #0 {
entry:
  %received.addr = alloca i64, align 8
  %data.addr = alloca i8*, align 8
  store i64 %received, i64* %received.addr, align 8, !tbaa !2963
  call void @llvm.dbg.declare(metadata i64* %received.addr, metadata !1554, metadata !2310), !dbg !8760
  store i8* %data, i8** %data.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !1555, metadata !2310), !dbg !8761
  %0 = load i64, i64* %received.addr, align 8, !dbg !8762, !tbaa !2963
  %call = call %struct._object* @PyLong_FromSsize_t(i64 %0), !dbg !8763
  ret %struct._object* %call, !dbg !8764
}

; Function Attrs: nounwind uwtable
define internal i32 @get_CMSG_SPACE(i64 %length, i64* %result) #0 {
entry:
  %retval = alloca i32, align 4
  %length.addr = alloca i64, align 8
  %result.addr = alloca i64*, align 8
  %tmp = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i64 %length, i64* %length.addr, align 8, !tbaa !2963
  call void @llvm.dbg.declare(metadata i64* %length.addr, metadata !1560, metadata !2310), !dbg !8765
  store i64* %result, i64** %result.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata i64** %result.addr, metadata !1561, metadata !2310), !dbg !8766
  %0 = bitcast i64* %tmp to i8*, !dbg !8767
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !8767
  call void @llvm.dbg.declare(metadata i64* %tmp, metadata !1562, metadata !2310), !dbg !8768
  %1 = load i64, i64* %length.addr, align 8, !dbg !8769, !tbaa !2963
  %cmp = icmp ugt i64 %1, 2147483623, !dbg !8771
  br i1 %cmp, label %if.then, label %if.end, !dbg !8772

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !8773
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8773

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %length.addr, align 8, !dbg !8774, !tbaa !2963
  %add = add i64 %2, 8, !dbg !8775
  %sub = sub i64 %add, 1, !dbg !8776
  %and = and i64 %sub, -8, !dbg !8777
  %add1 = add i64 %and, 16, !dbg !8778
  store i64 %add1, i64* %tmp, align 8, !dbg !8779, !tbaa !2963
  %3 = load i64, i64* %tmp, align 8, !dbg !8780, !tbaa !2963
  %cmp2 = icmp ugt i64 %3, 2147483647, !dbg !8782
  br i1 %cmp2, label %if.then.4, label %lor.lhs.false, !dbg !8783

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i64, i64* %tmp, align 8, !dbg !8784, !tbaa !2963
  %5 = load i64, i64* %length.addr, align 8, !dbg !8786, !tbaa !2963
  %cmp3 = icmp ult i64 %4, %5, !dbg !8787
  br i1 %cmp3, label %if.then.4, label %if.end.5, !dbg !8788

if.then.4:                                        ; preds = %lor.lhs.false, %if.end
  store i32 0, i32* %retval, !dbg !8789
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8789

if.end.5:                                         ; preds = %lor.lhs.false
  %6 = load i64, i64* %tmp, align 8, !dbg !8790, !tbaa !2963
  %7 = load i64*, i64** %result.addr, align 8, !dbg !8791, !tbaa !2326
  store i64 %6, i64* %7, align 8, !dbg !8792, !tbaa !2963
  store i32 1, i32* %retval, !dbg !8793
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8793

cleanup:                                          ; preds = %if.end.5, %if.then.4, %if.then
  %8 = bitcast i64* %tmp to i8*, !dbg !8794
  call void @llvm.lifetime.end(i64 8, i8* %8) #1, !dbg !8794
  %9 = load i32, i32* %retval, !dbg !8794
  ret i32 %9, !dbg !8794
}

; Function Attrs: nounwind uwtable
define internal i32 @get_CMSG_LEN(i64 %length, i64* %result) #0 {
entry:
  %retval = alloca i32, align 4
  %length.addr = alloca i64, align 8
  %result.addr = alloca i64*, align 8
  %tmp = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i64 %length, i64* %length.addr, align 8, !tbaa !2963
  call void @llvm.dbg.declare(metadata i64* %length.addr, metadata !1565, metadata !2310), !dbg !8795
  store i64* %result, i64** %result.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata i64** %result.addr, metadata !1566, metadata !2310), !dbg !8796
  %0 = bitcast i64* %tmp to i8*, !dbg !8797
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !8797
  call void @llvm.dbg.declare(metadata i64* %tmp, metadata !1567, metadata !2310), !dbg !8798
  %1 = load i64, i64* %length.addr, align 8, !dbg !8799, !tbaa !2963
  %cmp = icmp ugt i64 %1, 2147483631, !dbg !8801
  br i1 %cmp, label %if.then, label %if.end, !dbg !8802

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, !dbg !8803
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8803

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %length.addr, align 8, !dbg !8804, !tbaa !2963
  %add = add i64 16, %2, !dbg !8805
  store i64 %add, i64* %tmp, align 8, !dbg !8806, !tbaa !2963
  %3 = load i64, i64* %tmp, align 8, !dbg !8807, !tbaa !2963
  %cmp1 = icmp ugt i64 %3, 2147483647, !dbg !8809
  br i1 %cmp1, label %if.then.3, label %lor.lhs.false, !dbg !8810

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i64, i64* %tmp, align 8, !dbg !8811, !tbaa !2963
  %5 = load i64, i64* %length.addr, align 8, !dbg !8813, !tbaa !2963
  %cmp2 = icmp ult i64 %4, %5, !dbg !8814
  br i1 %cmp2, label %if.then.3, label %if.end.4, !dbg !8815

if.then.3:                                        ; preds = %lor.lhs.false, %if.end
  store i32 0, i32* %retval, !dbg !8816
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8816

if.end.4:                                         ; preds = %lor.lhs.false
  %6 = load i64, i64* %tmp, align 8, !dbg !8817, !tbaa !2963
  %7 = load i64*, i64** %result.addr, align 8, !dbg !8818, !tbaa !2326
  store i64 %6, i64* %7, align 8, !dbg !8819, !tbaa !2963
  store i32 1, i32* %retval, !dbg !8820
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8820

cleanup:                                          ; preds = %if.end.4, %if.then.3, %if.then
  %8 = bitcast i64* %tmp to i8*, !dbg !8821
  call void @llvm.lifetime.end(i64 8, i8* %8) #1, !dbg !8821
  %9 = load i32, i32* %retval, !dbg !8821
  ret i32 %9, !dbg !8821
}

declare i64 @sendmsg(i32, %struct.msghdr*, i32) #3

; Function Attrs: nounwind
declare i32 @socket(i32, i32, i32) #5

; Function Attrs: nounwind uwtable
define internal void @init_sockobject(%struct.PySocketSockObject* %s, i32 %fd, i32 %family, i32 %type, i32 %proto) #0 {
entry:
  %s.addr = alloca %struct.PySocketSockObject*, align 8
  %fd.addr = alloca i32, align 4
  %family.addr = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %proto.addr = alloca i32, align 4
  store %struct.PySocketSockObject* %s, %struct.PySocketSockObject** %s.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s.addr, metadata !1588, metadata !2310), !dbg !8822
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !1589, metadata !2310), !dbg !8823
  store i32 %family, i32* %family.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %family.addr, metadata !1590, metadata !2310), !dbg !8824
  store i32 %type, i32* %type.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1591, metadata !2310), !dbg !8825
  store i32 %proto, i32* %proto.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %proto.addr, metadata !1592, metadata !2310), !dbg !8826
  %0 = load i32, i32* %fd.addr, align 4, !dbg !8827, !tbaa !3034
  %1 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8828, !tbaa !2326
  %sock_fd = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %1, i32 0, i32 1, !dbg !8829
  store i32 %0, i32* %sock_fd, align 4, !dbg !8830, !tbaa !2948
  %2 = load i32, i32* %family.addr, align 4, !dbg !8831, !tbaa !3034
  %3 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8832, !tbaa !2326
  %sock_family = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %3, i32 0, i32 2, !dbg !8833
  store i32 %2, i32* %sock_family, align 4, !dbg !8834, !tbaa !3014
  %4 = load i32, i32* %type.addr, align 4, !dbg !8835, !tbaa !3034
  %5 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8836, !tbaa !2326
  %sock_type = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %5, i32 0, i32 3, !dbg !8837
  store i32 %4, i32* %sock_type, align 4, !dbg !8838, !tbaa !3017
  %6 = load i32, i32* %proto.addr, align 4, !dbg !8839, !tbaa !3034
  %7 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8840, !tbaa !2326
  %sock_proto = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %7, i32 0, i32 4, !dbg !8841
  store i32 %6, i32* %sock_proto, align 4, !dbg !8842, !tbaa !3020
  %8 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8843, !tbaa !2326
  %errorhandler = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %8, i32 0, i32 5, !dbg !8844
  store %struct._object* ()* @set_error, %struct._object* ()** %errorhandler, align 8, !dbg !8845, !tbaa !3181
  %9 = load i32, i32* %type.addr, align 4, !dbg !8846, !tbaa !3034
  %and = and i32 %9, 2048, !dbg !8848
  %tobool = icmp ne i32 %and, 0, !dbg !8848
  br i1 %tobool, label %if.then, label %if.else, !dbg !8849

if.then:                                          ; preds = %entry
  %10 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8850, !tbaa !2326
  %sock_timeout = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %10, i32 0, i32 6, !dbg !8851
  store double 0.000000e+00, double* %sock_timeout, align 8, !dbg !8852, !tbaa !3176
  br label %if.end.3, !dbg !8850

if.else:                                          ; preds = %entry
  %11 = load double, double* @defaulttimeout, align 8, !dbg !8853, !tbaa !3215
  %12 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8855, !tbaa !2326
  %sock_timeout1 = getelementptr inbounds %struct.PySocketSockObject, %struct.PySocketSockObject* %12, i32 0, i32 6, !dbg !8856
  store double %11, double* %sock_timeout1, align 8, !dbg !8857, !tbaa !3176
  %13 = load double, double* @defaulttimeout, align 8, !dbg !8858, !tbaa !3215
  %cmp = fcmp oge double %13, 0.000000e+00, !dbg !8860
  br i1 %cmp, label %if.then.2, label %if.end, !dbg !8861

if.then.2:                                        ; preds = %if.else
  %14 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s.addr, align 8, !dbg !8862, !tbaa !2326
  %call = call i32 @internal_setblocking(%struct.PySocketSockObject* %14, i32 0), !dbg !8863
  br label %if.end, !dbg !8863

if.end:                                           ; preds = %if.then.2, %if.else
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %if.then
  ret void, !dbg !8864
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_gethostbyname(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %name = alloca i8*, align 8
  %addrbuf = alloca %union.sock_addr, align 8
  %ret = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1605, metadata !2310), !dbg !8865
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1606, metadata !2310), !dbg !8866
  %0 = bitcast i8** %name to i8*, !dbg !8867
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !8867
  call void @llvm.dbg.declare(metadata i8** %name, metadata !1607, metadata !2310), !dbg !8868
  %1 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !8869
  call void @llvm.lifetime.start(i64 128, i8* %1) #1, !dbg !8869
  call void @llvm.dbg.declare(metadata %union.sock_addr* %addrbuf, metadata !1608, metadata !2310), !dbg !8870
  %2 = bitcast %struct._object** %ret to i8*, !dbg !8871
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !8871
  call void @llvm.dbg.declare(metadata %struct._object** %ret, metadata !1609, metadata !2310), !dbg !8872
  store %struct._object* null, %struct._object** %ret, align 8, !dbg !8872, !tbaa !2326
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8873, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.425, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.318, i32 0, i32 0), i8** %name), !dbg !8875
  %tobool = icmp ne i32 %call, 0, !dbg !8875
  br i1 %tobool, label %if.end, label %if.then, !dbg !8876

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8877
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8877

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %name, align 8, !dbg !8878, !tbaa !2326
  %sa = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !8880
  %call1 = call i32 @setipaddr(i8* %4, %struct.sockaddr* %sa, i64 128, i32 2), !dbg !8881
  %cmp = icmp slt i32 %call1, 0, !dbg !8882
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !8883

if.then.2:                                        ; preds = %if.end
  br label %finally, !dbg !8884

if.end.3:                                         ; preds = %if.end
  %sa4 = bitcast %union.sock_addr* %addrbuf to %struct.sockaddr*, !dbg !8885
  %call5 = call %struct._object* @makeipaddr(%struct.sockaddr* %sa4, i32 16), !dbg !8886
  store %struct._object* %call5, %struct._object** %ret, align 8, !dbg !8887, !tbaa !2326
  br label %finally, !dbg !8888

finally:                                          ; preds = %if.end.3, %if.then.2
  %5 = load i8*, i8** %name, align 8, !dbg !8889, !tbaa !2326
  call void @PyMem_Free(i8* %5), !dbg !8890
  %6 = load %struct._object*, %struct._object** %ret, align 8, !dbg !8891, !tbaa !2326
  store %struct._object* %6, %struct._object** %retval, !dbg !8892
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8892

cleanup:                                          ; preds = %finally, %if.then
  %7 = bitcast %struct._object** %ret to i8*, !dbg !8893
  call void @llvm.lifetime.end(i64 8, i8* %7) #1, !dbg !8893
  %8 = bitcast %union.sock_addr* %addrbuf to i8*, !dbg !8893
  call void @llvm.lifetime.end(i64 128, i8* %8) #1, !dbg !8893
  %9 = bitcast i8** %name to i8*, !dbg !8893
  call void @llvm.lifetime.end(i64 8, i8* %9) #1, !dbg !8893
  %10 = load %struct._object*, %struct._object** %retval, !dbg !8893
  ret %struct._object* %10, !dbg !8893
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_gethostbyname_ex(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %name = alloca i8*, align 8
  %h = alloca %struct.hostent*, align 8
  %addr = alloca %union.sock_addr, align 8
  %sa = alloca %struct.sockaddr*, align 8
  %ret = alloca %struct._object*, align 8
  %hp_allocated = alloca %struct.hostent, align 8
  %buf = alloca [16384 x i8], align 16
  %buf_len = alloca i32, align 4
  %errnop = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1612, metadata !2310), !dbg !8894
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1613, metadata !2310), !dbg !8895
  %0 = bitcast i8** %name to i8*, !dbg !8896
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !8896
  call void @llvm.dbg.declare(metadata i8** %name, metadata !1614, metadata !2310), !dbg !8897
  %1 = bitcast %struct.hostent** %h to i8*, !dbg !8898
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !8898
  call void @llvm.dbg.declare(metadata %struct.hostent** %h, metadata !1615, metadata !2310), !dbg !8899
  %2 = bitcast %union.sock_addr* %addr to i8*, !dbg !8900
  call void @llvm.lifetime.start(i64 128, i8* %2) #1, !dbg !8900
  call void @llvm.dbg.declare(metadata %union.sock_addr* %addr, metadata !1625, metadata !2310), !dbg !8901
  %3 = bitcast %struct.sockaddr** %sa to i8*, !dbg !8902
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !8902
  call void @llvm.dbg.declare(metadata %struct.sockaddr** %sa, metadata !1626, metadata !2310), !dbg !8903
  %4 = bitcast %struct._object** %ret to i8*, !dbg !8904
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !8904
  call void @llvm.dbg.declare(metadata %struct._object** %ret, metadata !1627, metadata !2310), !dbg !8905
  store %struct._object* null, %struct._object** %ret, align 8, !dbg !8905, !tbaa !2326
  %5 = bitcast %struct.hostent* %hp_allocated to i8*, !dbg !8906
  call void @llvm.lifetime.start(i64 32, i8* %5) #1, !dbg !8906
  call void @llvm.dbg.declare(metadata %struct.hostent* %hp_allocated, metadata !1628, metadata !2310), !dbg !8907
  %6 = bitcast [16384 x i8]* %buf to i8*, !dbg !8908
  call void @llvm.lifetime.start(i64 16384, i8* %6) #1, !dbg !8908
  call void @llvm.dbg.declare(metadata [16384 x i8]* %buf, metadata !1629, metadata !2310), !dbg !8909
  %7 = bitcast i32* %buf_len to i8*, !dbg !8910
  call void @llvm.lifetime.start(i64 4, i8* %7) #1, !dbg !8910
  call void @llvm.dbg.declare(metadata i32* %buf_len, metadata !1633, metadata !2310), !dbg !8911
  store i32 16383, i32* %buf_len, align 4, !dbg !8911, !tbaa !3034
  %8 = bitcast i32* %errnop to i8*, !dbg !8912
  call void @llvm.lifetime.start(i64 4, i8* %8) #1, !dbg !8912
  call void @llvm.dbg.declare(metadata i32* %errnop, metadata !1634, metadata !2310), !dbg !8913
  %9 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8914, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %9, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.426, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.318, i32 0, i32 0), i8** %name), !dbg !8916
  %tobool = icmp ne i32 %call, 0, !dbg !8916
  br i1 %tobool, label %if.end, label %if.then, !dbg !8917

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8918
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8918

if.end:                                           ; preds = %entry
  %10 = load i8*, i8** %name, align 8, !dbg !8919, !tbaa !2326
  %sa1 = bitcast %union.sock_addr* %addr to %struct.sockaddr*, !dbg !8921
  %call2 = call i32 @setipaddr(i8* %10, %struct.sockaddr* %sa1, i64 128, i32 2), !dbg !8922
  %cmp = icmp slt i32 %call2, 0, !dbg !8923
  br i1 %cmp, label %if.then.3, label %if.end.4, !dbg !8924

if.then.3:                                        ; preds = %if.end
  br label %finally, !dbg !8925

if.end.4:                                         ; preds = %if.end
  %11 = bitcast %struct._ts** %_save to i8*, !dbg !8926
  call void @llvm.lifetime.start(i64 8, i8* %11) #1, !dbg !8926
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1635, metadata !2310), !dbg !8927
  %call5 = call %struct._ts* @PyEval_SaveThread(), !dbg !8928
  store %struct._ts* %call5, %struct._ts** %_save, align 8, !dbg !8929, !tbaa !2326
  %12 = load i8*, i8** %name, align 8, !dbg !8930, !tbaa !2326
  %arraydecay = getelementptr inbounds [16384 x i8], [16384 x i8]* %buf, i32 0, i32 0, !dbg !8931
  %13 = load i32, i32* %buf_len, align 4, !dbg !8932, !tbaa !3034
  %conv = sext i32 %13 to i64, !dbg !8932
  %call6 = call i32 @gethostbyname_r(i8* %12, %struct.hostent* %hp_allocated, i8* %arraydecay, i64 %conv, %struct.hostent** %h, i32* %errnop), !dbg !8933
  %14 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !8934, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %14), !dbg !8935
  %15 = bitcast %struct._ts** %_save to i8*, !dbg !8936
  call void @llvm.lifetime.end(i64 8, i8* %15) #1, !dbg !8936
  %sa7 = bitcast %union.sock_addr* %addr to %struct.sockaddr*, !dbg !8937
  store %struct.sockaddr* %sa7, %struct.sockaddr** %sa, align 8, !dbg !8938, !tbaa !2326
  %16 = load %struct.hostent*, %struct.hostent** %h, align 8, !dbg !8939, !tbaa !2326
  %sa8 = bitcast %union.sock_addr* %addr to %struct.sockaddr*, !dbg !8940
  %17 = load %struct.sockaddr*, %struct.sockaddr** %sa, align 8, !dbg !8941, !tbaa !2326
  %sa_family = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %17, i32 0, i32 0, !dbg !8942
  %18 = load i16, i16* %sa_family, align 2, !dbg !8942, !tbaa !6033
  %conv9 = zext i16 %18 to i32, !dbg !8941
  %call10 = call %struct._object* @gethost_common(%struct.hostent* %16, %struct.sockaddr* %sa8, i32 128, i32 %conv9), !dbg !8943
  store %struct._object* %call10, %struct._object** %ret, align 8, !dbg !8944, !tbaa !2326
  br label %finally, !dbg !8945

finally:                                          ; preds = %if.end.4, %if.then.3
  %19 = load i8*, i8** %name, align 8, !dbg !8946, !tbaa !2326
  call void @PyMem_Free(i8* %19), !dbg !8947
  %20 = load %struct._object*, %struct._object** %ret, align 8, !dbg !8948, !tbaa !2326
  store %struct._object* %20, %struct._object** %retval, !dbg !8949
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8949

cleanup:                                          ; preds = %finally, %if.then
  %21 = bitcast i32* %errnop to i8*, !dbg !8950
  call void @llvm.lifetime.end(i64 4, i8* %21) #1, !dbg !8950
  %22 = bitcast i32* %buf_len to i8*, !dbg !8950
  call void @llvm.lifetime.end(i64 4, i8* %22) #1, !dbg !8950
  %23 = bitcast [16384 x i8]* %buf to i8*, !dbg !8950
  call void @llvm.lifetime.end(i64 16384, i8* %23) #1, !dbg !8950
  %24 = bitcast %struct.hostent* %hp_allocated to i8*, !dbg !8950
  call void @llvm.lifetime.end(i64 32, i8* %24) #1, !dbg !8950
  %25 = bitcast %struct._object** %ret to i8*, !dbg !8950
  call void @llvm.lifetime.end(i64 8, i8* %25) #1, !dbg !8950
  %26 = bitcast %struct.sockaddr** %sa to i8*, !dbg !8950
  call void @llvm.lifetime.end(i64 8, i8* %26) #1, !dbg !8950
  %27 = bitcast %union.sock_addr* %addr to i8*, !dbg !8950
  call void @llvm.lifetime.end(i64 128, i8* %27) #1, !dbg !8950
  %28 = bitcast %struct.hostent** %h to i8*, !dbg !8950
  call void @llvm.lifetime.end(i64 8, i8* %28) #1, !dbg !8950
  %29 = bitcast i8** %name to i8*, !dbg !8950
  call void @llvm.lifetime.end(i64 8, i8* %29) #1, !dbg !8950
  %30 = load %struct._object*, %struct._object** %retval, !dbg !8950
  ret %struct._object* %30, !dbg !8950
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_gethostbyaddr(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %addr = alloca %union.sock_addr, align 8
  %sa = alloca %struct.sockaddr*, align 8
  %ip_num = alloca i8*, align 8
  %h = alloca %struct.hostent*, align 8
  %ret = alloca %struct._object*, align 8
  %hp_allocated = alloca %struct.hostent, align 8
  %buf = alloca [16384 x i8], align 8
  %buf_len = alloca i32, align 4
  %errnop = alloca i32, align 4
  %ap = alloca i8*, align 8
  %al = alloca i32, align 4
  %af = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1689, metadata !2310), !dbg !8951
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1690, metadata !2310), !dbg !8952
  %0 = bitcast %union.sock_addr* %addr to i8*, !dbg !8953
  call void @llvm.lifetime.start(i64 128, i8* %0) #1, !dbg !8953
  call void @llvm.dbg.declare(metadata %union.sock_addr* %addr, metadata !1691, metadata !2310), !dbg !8954
  %1 = bitcast %struct.sockaddr** %sa to i8*, !dbg !8955
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !8955
  call void @llvm.dbg.declare(metadata %struct.sockaddr** %sa, metadata !1692, metadata !2310), !dbg !8956
  %sa1 = bitcast %union.sock_addr* %addr to %struct.sockaddr*, !dbg !8957
  store %struct.sockaddr* %sa1, %struct.sockaddr** %sa, align 8, !dbg !8956, !tbaa !2326
  %2 = bitcast i8** %ip_num to i8*, !dbg !8958
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !8958
  call void @llvm.dbg.declare(metadata i8** %ip_num, metadata !1693, metadata !2310), !dbg !8959
  %3 = bitcast %struct.hostent** %h to i8*, !dbg !8960
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !8960
  call void @llvm.dbg.declare(metadata %struct.hostent** %h, metadata !1694, metadata !2310), !dbg !8961
  %4 = bitcast %struct._object** %ret to i8*, !dbg !8962
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !8962
  call void @llvm.dbg.declare(metadata %struct._object** %ret, metadata !1695, metadata !2310), !dbg !8963
  store %struct._object* null, %struct._object** %ret, align 8, !dbg !8963, !tbaa !2326
  %5 = bitcast %struct.hostent* %hp_allocated to i8*, !dbg !8964
  call void @llvm.lifetime.start(i64 32, i8* %5) #1, !dbg !8964
  call void @llvm.dbg.declare(metadata %struct.hostent* %hp_allocated, metadata !1696, metadata !2310), !dbg !8965
  %6 = bitcast [16384 x i8]* %buf to i8*, !dbg !8966
  call void @llvm.lifetime.start(i64 16384, i8* %6) #1, !dbg !8966
  call void @llvm.dbg.declare(metadata [16384 x i8]* %buf, metadata !1697, metadata !2310), !dbg !8967
  %7 = bitcast i32* %buf_len to i8*, !dbg !8968
  call void @llvm.lifetime.start(i64 4, i8* %7) #1, !dbg !8968
  call void @llvm.dbg.declare(metadata i32* %buf_len, metadata !1698, metadata !2310), !dbg !8969
  store i32 16383, i32* %buf_len, align 4, !dbg !8969, !tbaa !3034
  %8 = bitcast i32* %errnop to i8*, !dbg !8970
  call void @llvm.lifetime.start(i64 4, i8* %8) #1, !dbg !8970
  call void @llvm.dbg.declare(metadata i32* %errnop, metadata !1699, metadata !2310), !dbg !8971
  %9 = bitcast i8** %ap to i8*, !dbg !8972
  call void @llvm.lifetime.start(i64 8, i8* %9) #1, !dbg !8972
  call void @llvm.dbg.declare(metadata i8** %ap, metadata !1700, metadata !2310), !dbg !8973
  %10 = bitcast i32* %al to i8*, !dbg !8974
  call void @llvm.lifetime.start(i64 4, i8* %10) #1, !dbg !8974
  call void @llvm.dbg.declare(metadata i32* %al, metadata !1701, metadata !2310), !dbg !8975
  %11 = bitcast i32* %af to i8*, !dbg !8976
  call void @llvm.lifetime.start(i64 4, i8* %11) #1, !dbg !8976
  call void @llvm.dbg.declare(metadata i32* %af, metadata !1702, metadata !2310), !dbg !8977
  %12 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !8978, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %12, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.428, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.318, i32 0, i32 0), i8** %ip_num), !dbg !8980
  %tobool = icmp ne i32 %call, 0, !dbg !8980
  br i1 %tobool, label %if.end, label %if.then, !dbg !8981

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !8982
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !8982

if.end:                                           ; preds = %entry
  store i32 0, i32* %af, align 4, !dbg !8983, !tbaa !3034
  %13 = load i8*, i8** %ip_num, align 8, !dbg !8984, !tbaa !2326
  %14 = load %struct.sockaddr*, %struct.sockaddr** %sa, align 8, !dbg !8986, !tbaa !2326
  %15 = load i32, i32* %af, align 4, !dbg !8987, !tbaa !3034
  %call2 = call i32 @setipaddr(i8* %13, %struct.sockaddr* %14, i64 128, i32 %15), !dbg !8988
  %cmp = icmp slt i32 %call2, 0, !dbg !8989
  br i1 %cmp, label %if.then.3, label %if.end.4, !dbg !8990

if.then.3:                                        ; preds = %if.end
  br label %finally, !dbg !8991

if.end.4:                                         ; preds = %if.end
  %16 = load %struct.sockaddr*, %struct.sockaddr** %sa, align 8, !dbg !8992, !tbaa !2326
  %sa_family = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %16, i32 0, i32 0, !dbg !8993
  %17 = load i16, i16* %sa_family, align 2, !dbg !8993, !tbaa !6033
  %conv = zext i16 %17 to i32, !dbg !8992
  store i32 %conv, i32* %af, align 4, !dbg !8994, !tbaa !3034
  store i8* null, i8** %ap, align 8, !dbg !8995, !tbaa !2326
  %18 = load i32, i32* %af, align 4, !dbg !8996, !tbaa !3034
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end.4
  %Pivot = icmp slt i32 %18, 10
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %18, 10
  br i1 %SwitchLeaf2, label %sw.bb.5, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %18, 2
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %19 = load %struct.sockaddr*, %struct.sockaddr** %sa, align 8, !dbg !8997, !tbaa !2326
  %20 = bitcast %struct.sockaddr* %19 to %struct.sockaddr_in*, !dbg !8999
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %20, i32 0, i32 2, !dbg !9000
  %21 = bitcast %struct.in_addr* %sin_addr to i8*, !dbg !9001
  store i8* %21, i8** %ap, align 8, !dbg !9002, !tbaa !2326
  store i32 4, i32* %al, align 4, !dbg !9003, !tbaa !3034
  br label %sw.epilog, !dbg !9004

sw.bb.5:                                          ; preds = %LeafBlock.1
  %22 = load %struct.sockaddr*, %struct.sockaddr** %sa, align 8, !dbg !9005, !tbaa !2326
  %23 = bitcast %struct.sockaddr* %22 to %struct.sockaddr_in6*, !dbg !9006
  %sin6_addr = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %23, i32 0, i32 3, !dbg !9007
  %24 = bitcast %struct.in6_addr* %sin6_addr to i8*, !dbg !9008
  store i8* %24, i8** %ap, align 8, !dbg !9009, !tbaa !2326
  store i32 16, i32* %al, align 4, !dbg !9010, !tbaa !3034
  br label %sw.epilog, !dbg !9011

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %sw.default

sw.default:                                       ; preds = %NewDefault
  %25 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !9012, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %25, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.334, i32 0, i32 0)), !dbg !9013
  br label %finally, !dbg !9014

sw.epilog:                                        ; preds = %sw.bb.5, %sw.bb
  %26 = bitcast %struct._ts** %_save to i8*, !dbg !9015
  call void @llvm.lifetime.start(i64 8, i8* %26) #1, !dbg !9015
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1703, metadata !2310), !dbg !9016
  %call6 = call %struct._ts* @PyEval_SaveThread(), !dbg !9017
  store %struct._ts* %call6, %struct._ts** %_save, align 8, !dbg !9018, !tbaa !2326
  %27 = load i8*, i8** %ap, align 8, !dbg !9019, !tbaa !2326
  %28 = load i32, i32* %al, align 4, !dbg !9020, !tbaa !3034
  %29 = load i32, i32* %af, align 4, !dbg !9021, !tbaa !3034
  %arraydecay = getelementptr inbounds [16384 x i8], [16384 x i8]* %buf, i32 0, i32 0, !dbg !9022
  %30 = load i32, i32* %buf_len, align 4, !dbg !9023, !tbaa !3034
  %conv7 = sext i32 %30 to i64, !dbg !9023
  %call8 = call i32 @gethostbyaddr_r(i8* %27, i32 %28, i32 %29, %struct.hostent* %hp_allocated, i8* %arraydecay, i64 %conv7, %struct.hostent** %h, i32* %errnop), !dbg !9024
  %31 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9025, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %31), !dbg !9026
  %32 = bitcast %struct._ts** %_save to i8*, !dbg !9027
  call void @llvm.lifetime.end(i64 8, i8* %32) #1, !dbg !9027
  %33 = load %struct.hostent*, %struct.hostent** %h, align 8, !dbg !9028, !tbaa !2326
  %sa9 = bitcast %union.sock_addr* %addr to %struct.sockaddr*, !dbg !9029
  %34 = load i32, i32* %af, align 4, !dbg !9030, !tbaa !3034
  %call10 = call %struct._object* @gethost_common(%struct.hostent* %33, %struct.sockaddr* %sa9, i32 128, i32 %34), !dbg !9031
  store %struct._object* %call10, %struct._object** %ret, align 8, !dbg !9032, !tbaa !2326
  br label %finally, !dbg !9033

finally:                                          ; preds = %sw.epilog, %sw.default, %if.then.3
  %35 = load i8*, i8** %ip_num, align 8, !dbg !9034, !tbaa !2326
  call void @PyMem_Free(i8* %35), !dbg !9035
  %36 = load %struct._object*, %struct._object** %ret, align 8, !dbg !9036, !tbaa !2326
  store %struct._object* %36, %struct._object** %retval, !dbg !9037
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9037

cleanup:                                          ; preds = %finally, %if.then
  %37 = bitcast i32* %af to i8*, !dbg !9038
  call void @llvm.lifetime.end(i64 4, i8* %37) #1, !dbg !9038
  %38 = bitcast i32* %al to i8*, !dbg !9038
  call void @llvm.lifetime.end(i64 4, i8* %38) #1, !dbg !9038
  %39 = bitcast i8** %ap to i8*, !dbg !9038
  call void @llvm.lifetime.end(i64 8, i8* %39) #1, !dbg !9038
  %40 = bitcast i32* %errnop to i8*, !dbg !9038
  call void @llvm.lifetime.end(i64 4, i8* %40) #1, !dbg !9038
  %41 = bitcast i32* %buf_len to i8*, !dbg !9038
  call void @llvm.lifetime.end(i64 4, i8* %41) #1, !dbg !9038
  %42 = bitcast [16384 x i8]* %buf to i8*, !dbg !9038
  call void @llvm.lifetime.end(i64 16384, i8* %42) #1, !dbg !9038
  %43 = bitcast %struct.hostent* %hp_allocated to i8*, !dbg !9038
  call void @llvm.lifetime.end(i64 32, i8* %43) #1, !dbg !9038
  %44 = bitcast %struct._object** %ret to i8*, !dbg !9038
  call void @llvm.lifetime.end(i64 8, i8* %44) #1, !dbg !9038
  %45 = bitcast %struct.hostent** %h to i8*, !dbg !9038
  call void @llvm.lifetime.end(i64 8, i8* %45) #1, !dbg !9038
  %46 = bitcast i8** %ip_num to i8*, !dbg !9038
  call void @llvm.lifetime.end(i64 8, i8* %46) #1, !dbg !9038
  %47 = bitcast %struct.sockaddr** %sa to i8*, !dbg !9038
  call void @llvm.lifetime.end(i64 8, i8* %47) #1, !dbg !9038
  %48 = bitcast %union.sock_addr* %addr to i8*, !dbg !9038
  call void @llvm.lifetime.end(i64 128, i8* %48) #1, !dbg !9038
  %49 = load %struct._object*, %struct._object** %retval, !dbg !9038
  ret %struct._object* %49, !dbg !9038
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_gethostname(%struct._object* %self, %struct._object* %unused) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %unused.addr = alloca %struct._object*, align 8
  %buf = alloca [1024 x i8], align 16
  %res = alloca i32, align 4
  %_save = alloca %struct._ts*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1707, metadata !2310), !dbg !9039
  store %struct._object* %unused, %struct._object** %unused.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %unused.addr, metadata !1708, metadata !2310), !dbg !9040
  %0 = bitcast [1024 x i8]* %buf to i8*, !dbg !9041
  call void @llvm.lifetime.start(i64 1024, i8* %0) #1, !dbg !9041
  call void @llvm.dbg.declare(metadata [1024 x i8]* %buf, metadata !1709, metadata !2310), !dbg !9042
  %1 = bitcast i32* %res to i8*, !dbg !9043
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !9043
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1713, metadata !2310), !dbg !9044
  %2 = bitcast %struct._ts** %_save to i8*, !dbg !9045
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !9045
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1714, metadata !2310), !dbg !9046
  %call = call %struct._ts* @PyEval_SaveThread(), !dbg !9047
  store %struct._ts* %call, %struct._ts** %_save, align 8, !dbg !9048, !tbaa !2326
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0, !dbg !9049
  %call1 = call i32 @gethostname(i8* %arraydecay, i64 1023) #1, !dbg !9050
  store i32 %call1, i32* %res, align 4, !dbg !9051, !tbaa !3034
  %3 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9052, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %3), !dbg !9053
  %4 = bitcast %struct._ts** %_save to i8*, !dbg !9054
  call void @llvm.lifetime.end(i64 8, i8* %4) #1, !dbg !9054
  %5 = load i32, i32* %res, align 4, !dbg !9055, !tbaa !3034
  %cmp = icmp slt i32 %5, 0, !dbg !9057
  br i1 %cmp, label %if.then, label %if.end, !dbg !9058

if.then:                                          ; preds = %entry
  %call2 = call %struct._object* @set_error(), !dbg !9059
  store %struct._object* %call2, %struct._object** %retval, !dbg !9060
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9060

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr [1024 x i8], [1024 x i8]* %buf, i32 0, i64 1023, !dbg !9061
  store i8 0, i8* %arrayidx, align 1, !dbg !9062, !tbaa !6104
  %arraydecay3 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0, !dbg !9063
  %call4 = call %struct._object* @PyUnicode_DecodeFSDefault(i8* %arraydecay3), !dbg !9064
  store %struct._object* %call4, %struct._object** %retval, !dbg !9065
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9065

cleanup:                                          ; preds = %if.end, %if.then
  %6 = bitcast i32* %res to i8*, !dbg !9066
  call void @llvm.lifetime.end(i64 4, i8* %6) #1, !dbg !9066
  %7 = bitcast [1024 x i8]* %buf to i8*, !dbg !9066
  call void @llvm.lifetime.end(i64 1024, i8* %7) #1, !dbg !9066
  %8 = load %struct._object*, %struct._object** %retval, !dbg !9066
  ret %struct._object* %8, !dbg !9066
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_sethostname(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %hnobj = alloca %struct._object*, align 8
  %buf = alloca %struct.bufferinfo, align 8
  %res = alloca i32, align 4
  %flag = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1718, metadata !2310), !dbg !9067
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1719, metadata !2310), !dbg !9068
  %0 = bitcast %struct._object** %hnobj to i8*, !dbg !9069
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !9069
  call void @llvm.dbg.declare(metadata %struct._object** %hnobj, metadata !1720, metadata !2310), !dbg !9070
  %1 = bitcast %struct.bufferinfo* %buf to i8*, !dbg !9071
  call void @llvm.lifetime.start(i64 80, i8* %1) #1, !dbg !9071
  call void @llvm.dbg.declare(metadata %struct.bufferinfo* %buf, metadata !1721, metadata !2310), !dbg !9072
  %2 = bitcast i32* %res to i8*, !dbg !9073
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !9073
  call void @llvm.dbg.declare(metadata i32* %res, metadata !1722, metadata !2310), !dbg !9074
  %3 = bitcast i32* %flag to i8*, !dbg !9073
  call void @llvm.lifetime.start(i64 4, i8* %3) #1, !dbg !9073
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !1723, metadata !2310), !dbg !9075
  store i32 0, i32* %flag, align 4, !dbg !9075, !tbaa !3034
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9076, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.429, i32 0, i32 0), %struct._object** %hnobj), !dbg !9078
  %tobool = icmp ne i32 %call, 0, !dbg !9078
  br i1 %tobool, label %if.end.4, label %if.then, !dbg !9079

if.then:                                          ; preds = %entry
  call void @PyErr_Clear(), !dbg !9080
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9082, !tbaa !2326
  %call1 = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %5, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.430, i32 0, i32 0), i32 (%struct._object*, i8*)* @PyUnicode_FSConverter, %struct._object** %hnobj), !dbg !9084
  %tobool2 = icmp ne i32 %call1, 0, !dbg !9084
  br i1 %tobool2, label %if.end, label %if.then.3, !dbg !9085

if.then.3:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval, !dbg !9086
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9086

if.end:                                           ; preds = %if.then
  store i32 1, i32* %flag, align 4, !dbg !9087, !tbaa !3034
  br label %if.end.4, !dbg !9088

if.end.4:                                         ; preds = %if.end, %entry
  %6 = load %struct._object*, %struct._object** %hnobj, align 8, !dbg !9089, !tbaa !2326
  %call5 = call i32 @PyObject_GetBuffer(%struct._object* %6, %struct.bufferinfo* %buf, i32 0), !dbg !9090
  store i32 %call5, i32* %res, align 4, !dbg !9091, !tbaa !3034
  %7 = load i32, i32* %res, align 4, !dbg !9092, !tbaa !3034
  %tobool6 = icmp ne i32 %7, 0, !dbg !9092
  br i1 %tobool6, label %if.end.10, label %if.then.7, !dbg !9094

if.then.7:                                        ; preds = %if.end.4
  %buf8 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %buf, i32 0, i32 0, !dbg !9095
  %8 = load i8*, i8** %buf8, align 8, !dbg !9095, !tbaa !4008
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %buf, i32 0, i32 2, !dbg !9097
  %9 = load i64, i64* %len, align 8, !dbg !9097, !tbaa !4012
  %call9 = call i32 @sethostname(i8* %8, i64 %9) #1, !dbg !9098
  store i32 %call9, i32* %res, align 4, !dbg !9099, !tbaa !3034
  call void @PyBuffer_Release(%struct.bufferinfo* %buf), !dbg !9100
  br label %if.end.10, !dbg !9101

if.end.10:                                        ; preds = %if.then.7, %if.end.4
  %10 = load i32, i32* %flag, align 4, !dbg !9102, !tbaa !3034
  %tobool11 = icmp ne i32 %10, 0, !dbg !9102
  br i1 %tobool11, label %if.then.12, label %if.end.15, !dbg !9103

if.then.12:                                       ; preds = %if.end.10
  br label %do.body, !dbg !9104

do.body:                                          ; preds = %if.then.12
  %11 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9105
  call void @llvm.lifetime.start(i64 8, i8* %11) #1, !dbg !9105
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1724, metadata !2310), !dbg !9107
  %12 = load %struct._object*, %struct._object** %hnobj, align 8, !dbg !9108, !tbaa !2326
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8, !dbg !9107, !tbaa !2326
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9109, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0, !dbg !9111
  %14 = load i64, i64* %ob_refcnt, align 8, !dbg !9112, !tbaa !2335
  %dec = add i64 %14, -1, !dbg !9112
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !9112, !tbaa !2335
  %cmp = icmp ne i64 %dec, 0, !dbg !9113
  br i1 %cmp, label %if.then.13, label %if.else, !dbg !9114

if.then.13:                                       ; preds = %do.body
  br label %if.end.14, !dbg !9115

if.else:                                          ; preds = %do.body
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9117, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1, !dbg !9119
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9119, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4, !dbg !9120
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !9120, !tbaa !3442
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9121, !tbaa !2326
  call void %17(%struct._object* %18), !dbg !9122
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.13
  %19 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9123
  call void @llvm.lifetime.end(i64 8, i8* %19) #1, !dbg !9123
  br label %do.cond, !dbg !9125

do.cond:                                          ; preds = %if.end.14
  br label %do.end, !dbg !9126

do.end:                                           ; preds = %do.cond
  br label %if.end.15, !dbg !9128

if.end.15:                                        ; preds = %do.end, %if.end.10
  %20 = load i32, i32* %res, align 4, !dbg !9130, !tbaa !3034
  %tobool16 = icmp ne i32 %20, 0, !dbg !9130
  br i1 %tobool16, label %if.then.17, label %if.end.19, !dbg !9132

if.then.17:                                       ; preds = %if.end.15
  %call18 = call %struct._object* @set_error(), !dbg !9133
  store %struct._object* %call18, %struct._object** %retval, !dbg !9134
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9134

if.end.19:                                        ; preds = %if.end.15
  %21 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9135, !tbaa !2335
  %inc = add i64 %21, 1, !dbg !9135
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !9135, !tbaa !2335
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !9136
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9136

cleanup:                                          ; preds = %if.end.19, %if.then.17, %if.then.3
  %22 = bitcast i32* %flag to i8*, !dbg !9137
  call void @llvm.lifetime.end(i64 4, i8* %22) #1, !dbg !9137
  %23 = bitcast i32* %res to i8*, !dbg !9137
  call void @llvm.lifetime.end(i64 4, i8* %23) #1, !dbg !9137
  %24 = bitcast %struct.bufferinfo* %buf to i8*, !dbg !9137
  call void @llvm.lifetime.end(i64 80, i8* %24) #1, !dbg !9137
  %25 = bitcast %struct._object** %hnobj to i8*, !dbg !9137
  call void @llvm.lifetime.end(i64 8, i8* %25) #1, !dbg !9137
  %26 = load %struct._object*, %struct._object** %retval, !dbg !9137
  ret %struct._object* %26, !dbg !9137
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_getservbyname(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %name = alloca i8*, align 8
  %proto = alloca i8*, align 8
  %sp = alloca %struct.servent*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %__v = alloca i16, align 2
  %__x = alloca i16, align 2
  %tmp = alloca i16, align 2
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1729, metadata !2310), !dbg !9138
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1730, metadata !2310), !dbg !9139
  %0 = bitcast i8** %name to i8*, !dbg !9140
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !9140
  call void @llvm.dbg.declare(metadata i8** %name, metadata !1731, metadata !2310), !dbg !9141
  %1 = bitcast i8** %proto to i8*, !dbg !9140
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !9140
  call void @llvm.dbg.declare(metadata i8** %proto, metadata !1732, metadata !2310), !dbg !9142
  store i8* null, i8** %proto, align 8, !dbg !9142, !tbaa !2326
  %2 = bitcast %struct.servent** %sp to i8*, !dbg !9143
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !9143
  call void @llvm.dbg.declare(metadata %struct.servent** %sp, metadata !1733, metadata !2310), !dbg !9144
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9145, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.431, i32 0, i32 0), i8** %name, i8** %proto), !dbg !9147
  %tobool = icmp ne i32 %call, 0, !dbg !9147
  br i1 %tobool, label %if.end, label %if.then, !dbg !9148

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9149
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9149

if.end:                                           ; preds = %entry
  %4 = bitcast %struct._ts** %_save to i8*, !dbg !9150
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !9150
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1741, metadata !2310), !dbg !9151
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !9152
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !9153, !tbaa !2326
  %5 = load i8*, i8** %name, align 8, !dbg !9154, !tbaa !2326
  %6 = load i8*, i8** %proto, align 8, !dbg !9155, !tbaa !2326
  %call2 = call %struct.servent* @getservbyname(i8* %5, i8* %6), !dbg !9156
  store %struct.servent* %call2, %struct.servent** %sp, align 8, !dbg !9157, !tbaa !2326
  %7 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9158, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %7), !dbg !9159
  %8 = bitcast %struct._ts** %_save to i8*, !dbg !9160
  call void @llvm.lifetime.end(i64 8, i8* %8) #1, !dbg !9160
  %9 = load %struct.servent*, %struct.servent** %sp, align 8, !dbg !9161, !tbaa !2326
  %cmp = icmp eq %struct.servent* %9, null, !dbg !9163
  br i1 %cmp, label %if.then.3, label %if.end.4, !dbg !9164

if.then.3:                                        ; preds = %if.end
  %10 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !9165, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %10, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.432, i32 0, i32 0)), !dbg !9167
  store %struct._object* null, %struct._object** %retval, !dbg !9168
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9168

if.end.4:                                         ; preds = %if.end
  %11 = bitcast i16* %__v to i8*, !dbg !9169
  call void @llvm.lifetime.start(i64 2, i8* %11) #1, !dbg !9169
  call void @llvm.dbg.declare(metadata i16* %__v, metadata !1743, metadata !2310), !dbg !9170
  %12 = bitcast i16* %__x to i8*, !dbg !9169
  call void @llvm.lifetime.start(i64 2, i8* %12) #1, !dbg !9169
  call void @llvm.dbg.declare(metadata i16* %__x, metadata !1745, metadata !2310), !dbg !9171
  %13 = load %struct.servent*, %struct.servent** %sp, align 8, !dbg !9172, !tbaa !2326
  %s_port = getelementptr inbounds %struct.servent, %struct.servent* %13, i32 0, i32 2, !dbg !9173
  %14 = load i32, i32* %s_port, align 4, !dbg !9173, !tbaa !9174
  %conv = trunc i32 %14 to i16, !dbg !9176
  store i16 %conv, i16* %__x, align 2, !dbg !9171, !tbaa !6057
  %15 = load i16, i16* %__x, align 2, !dbg !9177, !tbaa !6057
  %16 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %15) #2, !dbg !9179, !srcloc !9180
  store i16 %16, i16* %__v, align 2, !dbg !9179, !tbaa !6057
  %17 = load i16, i16* %__v, align 2, !dbg !9181, !tbaa !6057
  store i16 %17, i16* %tmp, !dbg !9182, !tbaa !6057
  %18 = bitcast i16* %__x to i8*, !dbg !9183
  call void @llvm.lifetime.end(i64 2, i8* %18) #1, !dbg !9183
  %19 = bitcast i16* %__v to i8*, !dbg !9183
  call void @llvm.lifetime.end(i64 2, i8* %19) #1, !dbg !9183
  %20 = load i16, i16* %tmp, !dbg !9184, !tbaa !6057
  %conv5 = zext i16 %20 to i64, !dbg !9185
  %call6 = call %struct._object* @PyLong_FromLong(i64 %conv5), !dbg !9186
  store %struct._object* %call6, %struct._object** %retval, !dbg !9187
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9187

cleanup:                                          ; preds = %if.end.4, %if.then.3, %if.then
  %21 = bitcast %struct.servent** %sp to i8*, !dbg !9188
  call void @llvm.lifetime.end(i64 8, i8* %21) #1, !dbg !9188
  %22 = bitcast i8** %proto to i8*, !dbg !9188
  call void @llvm.lifetime.end(i64 8, i8* %22) #1, !dbg !9188
  %23 = bitcast i8** %name to i8*, !dbg !9188
  call void @llvm.lifetime.end(i64 8, i8* %23) #1, !dbg !9188
  %24 = load %struct._object*, %struct._object** %retval, !dbg !9188
  ret %struct._object* %24, !dbg !9188
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_getservbyport(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %port = alloca i32, align 4
  %proto = alloca i8*, align 8
  %sp = alloca %struct.servent*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %__v = alloca i16, align 2
  %__x = alloca i16, align 2
  %tmp = alloca i16, align 2
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1748, metadata !2310), !dbg !9189
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1749, metadata !2310), !dbg !9190
  %0 = bitcast i32* %port to i8*, !dbg !9191
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !9191
  call void @llvm.dbg.declare(metadata i32* %port, metadata !1750, metadata !2310), !dbg !9192
  %1 = bitcast i8** %proto to i8*, !dbg !9193
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !9193
  call void @llvm.dbg.declare(metadata i8** %proto, metadata !1751, metadata !2310), !dbg !9194
  store i8* null, i8** %proto, align 8, !dbg !9194, !tbaa !2326
  %2 = bitcast %struct.servent** %sp to i8*, !dbg !9195
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !9195
  call void @llvm.dbg.declare(metadata %struct.servent** %sp, metadata !1752, metadata !2310), !dbg !9196
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9197, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.433, i32 0, i32 0), i32* %port, i8** %proto), !dbg !9199
  %tobool = icmp ne i32 %call, 0, !dbg !9199
  br i1 %tobool, label %if.end, label %if.then, !dbg !9200

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9201
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9201

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %port, align 4, !dbg !9202, !tbaa !3034
  %cmp = icmp slt i32 %4, 0, !dbg !9204
  br i1 %cmp, label %if.then.2, label %lor.lhs.false, !dbg !9205

lor.lhs.false:                                    ; preds = %if.end
  %5 = load i32, i32* %port, align 4, !dbg !9206, !tbaa !3034
  %cmp1 = icmp sgt i32 %5, 65535, !dbg !9208
  br i1 %cmp1, label %if.then.2, label %if.end.3, !dbg !9209

if.then.2:                                        ; preds = %lor.lhs.false, %if.end
  %6 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !9210, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.434, i32 0, i32 0)), !dbg !9212
  store %struct._object* null, %struct._object** %retval, !dbg !9213
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9213

if.end.3:                                         ; preds = %lor.lhs.false
  %7 = bitcast %struct._ts** %_save to i8*, !dbg !9214
  call void @llvm.lifetime.start(i64 8, i8* %7) #1, !dbg !9214
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1753, metadata !2310), !dbg !9215
  %call4 = call %struct._ts* @PyEval_SaveThread(), !dbg !9216
  store %struct._ts* %call4, %struct._ts** %_save, align 8, !dbg !9217, !tbaa !2326
  %8 = bitcast i16* %__v to i8*, !dbg !9218
  call void @llvm.lifetime.start(i64 2, i8* %8) #1, !dbg !9218
  call void @llvm.dbg.declare(metadata i16* %__v, metadata !1755, metadata !2310), !dbg !9219
  %9 = bitcast i16* %__x to i8*, !dbg !9218
  call void @llvm.lifetime.start(i64 2, i8* %9) #1, !dbg !9218
  call void @llvm.dbg.declare(metadata i16* %__x, metadata !1757, metadata !2310), !dbg !9220
  %10 = load i32, i32* %port, align 4, !dbg !9221, !tbaa !3034
  %conv = trunc i32 %10 to i16, !dbg !9222
  store i16 %conv, i16* %__x, align 2, !dbg !9220, !tbaa !6057
  %11 = load i16, i16* %__x, align 2, !dbg !9223, !tbaa !6057
  %12 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %11) #2, !dbg !9225, !srcloc !9226
  store i16 %12, i16* %__v, align 2, !dbg !9225, !tbaa !6057
  %13 = load i16, i16* %__v, align 2, !dbg !9227, !tbaa !6057
  store i16 %13, i16* %tmp, !dbg !9228, !tbaa !6057
  %14 = bitcast i16* %__x to i8*, !dbg !9229
  call void @llvm.lifetime.end(i64 2, i8* %14) #1, !dbg !9229
  %15 = bitcast i16* %__v to i8*, !dbg !9229
  call void @llvm.lifetime.end(i64 2, i8* %15) #1, !dbg !9229
  %16 = load i16, i16* %tmp, !dbg !9230, !tbaa !6057
  %conv5 = zext i16 %16 to i32, !dbg !9231
  %17 = load i8*, i8** %proto, align 8, !dbg !9232, !tbaa !2326
  %call6 = call %struct.servent* @getservbyport(i32 %conv5, i8* %17), !dbg !9233
  store %struct.servent* %call6, %struct.servent** %sp, align 8, !dbg !9234, !tbaa !2326
  %18 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9235, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %18), !dbg !9236
  %19 = bitcast %struct._ts** %_save to i8*, !dbg !9237
  call void @llvm.lifetime.end(i64 8, i8* %19) #1, !dbg !9237
  %20 = load %struct.servent*, %struct.servent** %sp, align 8, !dbg !9238, !tbaa !2326
  %cmp7 = icmp eq %struct.servent* %20, null, !dbg !9240
  br i1 %cmp7, label %if.then.9, label %if.end.10, !dbg !9241

if.then.9:                                        ; preds = %if.end.3
  %21 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !9242, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %21, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.435, i32 0, i32 0)), !dbg !9244
  store %struct._object* null, %struct._object** %retval, !dbg !9245
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9245

if.end.10:                                        ; preds = %if.end.3
  %22 = load %struct.servent*, %struct.servent** %sp, align 8, !dbg !9246, !tbaa !2326
  %s_name = getelementptr inbounds %struct.servent, %struct.servent* %22, i32 0, i32 0, !dbg !9247
  %23 = load i8*, i8** %s_name, align 8, !dbg !9247, !tbaa !9248
  %call11 = call %struct._object* @PyUnicode_FromString(i8* %23), !dbg !9249
  store %struct._object* %call11, %struct._object** %retval, !dbg !9250
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9250

cleanup:                                          ; preds = %if.end.10, %if.then.9, %if.then.2, %if.then
  %24 = bitcast %struct.servent** %sp to i8*, !dbg !9251
  call void @llvm.lifetime.end(i64 8, i8* %24) #1, !dbg !9251
  %25 = bitcast i8** %proto to i8*, !dbg !9251
  call void @llvm.lifetime.end(i64 8, i8* %25) #1, !dbg !9251
  %26 = bitcast i32* %port to i8*, !dbg !9251
  call void @llvm.lifetime.end(i64 4, i8* %26) #1, !dbg !9251
  %27 = load %struct._object*, %struct._object** %retval, !dbg !9251
  ret %struct._object* %27, !dbg !9251
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_getprotobyname(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %name = alloca i8*, align 8
  %sp = alloca %struct.protoent*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1760, metadata !2310), !dbg !9252
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1761, metadata !2310), !dbg !9253
  %0 = bitcast i8** %name to i8*, !dbg !9254
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !9254
  call void @llvm.dbg.declare(metadata i8** %name, metadata !1762, metadata !2310), !dbg !9255
  %1 = bitcast %struct.protoent** %sp to i8*, !dbg !9256
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !9256
  call void @llvm.dbg.declare(metadata %struct.protoent** %sp, metadata !1763, metadata !2310), !dbg !9257
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9258, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %2, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.436, i32 0, i32 0), i8** %name), !dbg !9260
  %tobool = icmp ne i32 %call, 0, !dbg !9260
  br i1 %tobool, label %if.end, label %if.then, !dbg !9261

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9262
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9262

if.end:                                           ; preds = %entry
  %3 = bitcast %struct._ts** %_save to i8*, !dbg !9263
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !9263
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1770, metadata !2310), !dbg !9264
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !9265
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !9266, !tbaa !2326
  %4 = load i8*, i8** %name, align 8, !dbg !9267, !tbaa !2326
  %call2 = call %struct.protoent* @getprotobyname(i8* %4), !dbg !9268
  store %struct.protoent* %call2, %struct.protoent** %sp, align 8, !dbg !9269, !tbaa !2326
  %5 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9270, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %5), !dbg !9271
  %6 = bitcast %struct._ts** %_save to i8*, !dbg !9272
  call void @llvm.lifetime.end(i64 8, i8* %6) #1, !dbg !9272
  %7 = load %struct.protoent*, %struct.protoent** %sp, align 8, !dbg !9273, !tbaa !2326
  %cmp = icmp eq %struct.protoent* %7, null, !dbg !9275
  br i1 %cmp, label %if.then.3, label %if.end.4, !dbg !9276

if.then.3:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !9277, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.437, i32 0, i32 0)), !dbg !9279
  store %struct._object* null, %struct._object** %retval, !dbg !9280
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9280

if.end.4:                                         ; preds = %if.end
  %9 = load %struct.protoent*, %struct.protoent** %sp, align 8, !dbg !9281, !tbaa !2326
  %p_proto = getelementptr inbounds %struct.protoent, %struct.protoent* %9, i32 0, i32 2, !dbg !9282
  %10 = load i32, i32* %p_proto, align 4, !dbg !9282, !tbaa !9283
  %conv = sext i32 %10 to i64, !dbg !9285
  %call5 = call %struct._object* @PyLong_FromLong(i64 %conv), !dbg !9286
  store %struct._object* %call5, %struct._object** %retval, !dbg !9287
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9287

cleanup:                                          ; preds = %if.end.4, %if.then.3, %if.then
  %11 = bitcast %struct.protoent** %sp to i8*, !dbg !9288
  call void @llvm.lifetime.end(i64 8, i8* %11) #1, !dbg !9288
  %12 = bitcast i8** %name to i8*, !dbg !9288
  call void @llvm.lifetime.end(i64 8, i8* %12) #1, !dbg !9288
  %13 = load %struct._object*, %struct._object** %retval, !dbg !9288
  ret %struct._object* %13, !dbg !9288
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_dup(%struct._object* %self, %struct._object* %fdobj) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %fdobj.addr = alloca %struct._object*, align 8
  %fd = alloca i32, align 4
  %newfd = alloca i32, align 4
  %newfdobj = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1774, metadata !2310), !dbg !9289
  store %struct._object* %fdobj, %struct._object** %fdobj.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %fdobj.addr, metadata !1775, metadata !2310), !dbg !9290
  %0 = bitcast i32* %fd to i8*, !dbg !9291
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !9291
  call void @llvm.dbg.declare(metadata i32* %fd, metadata !1776, metadata !2310), !dbg !9292
  %1 = bitcast i32* %newfd to i8*, !dbg !9291
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !9291
  call void @llvm.dbg.declare(metadata i32* %newfd, metadata !1777, metadata !2310), !dbg !9293
  %2 = bitcast %struct._object** %newfdobj to i8*, !dbg !9294
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !9294
  call void @llvm.dbg.declare(metadata %struct._object** %newfdobj, metadata !1778, metadata !2310), !dbg !9295
  %3 = load %struct._object*, %struct._object** %fdobj.addr, align 8, !dbg !9296, !tbaa !2326
  %call = call i64 @PyLong_AsLong(%struct._object* %3), !dbg !9297
  %conv = trunc i64 %call to i32, !dbg !9298
  store i32 %conv, i32* %fd, align 4, !dbg !9299, !tbaa !3034
  %4 = load i32, i32* %fd, align 4, !dbg !9300, !tbaa !3034
  %cmp = icmp eq i32 %4, -1, !dbg !9302
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9303

land.lhs.true:                                    ; preds = %entry
  %call2 = call %struct._object* @PyErr_Occurred(), !dbg !9304
  %tobool = icmp ne %struct._object* %call2, null, !dbg !9304
  br i1 %tobool, label %if.then, label %if.end, !dbg !9306

if.then:                                          ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval, !dbg !9307
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9307

if.end:                                           ; preds = %land.lhs.true, %entry
  %5 = load i32, i32* %fd, align 4, !dbg !9308, !tbaa !3034
  %call3 = call i32 @_Py_dup(i32 %5), !dbg !9309
  store i32 %call3, i32* %newfd, align 4, !dbg !9310, !tbaa !3034
  %6 = load i32, i32* %newfd, align 4, !dbg !9311, !tbaa !3034
  %cmp4 = icmp eq i32 %6, -1, !dbg !9313
  br i1 %cmp4, label %if.then.6, label %if.end.7, !dbg !9314

if.then.6:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval, !dbg !9315
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9315

if.end.7:                                         ; preds = %if.end
  %7 = load i32, i32* %newfd, align 4, !dbg !9316, !tbaa !3034
  %conv8 = sext i32 %7 to i64, !dbg !9317
  %call9 = call %struct._object* @PyLong_FromLong(i64 %conv8), !dbg !9318
  store %struct._object* %call9, %struct._object** %newfdobj, align 8, !dbg !9319, !tbaa !2326
  %8 = load %struct._object*, %struct._object** %newfdobj, align 8, !dbg !9320, !tbaa !2326
  %cmp10 = icmp eq %struct._object* %8, null, !dbg !9322
  br i1 %cmp10, label %if.then.12, label %if.end.14, !dbg !9323

if.then.12:                                       ; preds = %if.end.7
  %9 = load i32, i32* %newfd, align 4, !dbg !9324, !tbaa !3034
  %call13 = call i32 @close(i32 %9), !dbg !9325
  br label %if.end.14, !dbg !9325

if.end.14:                                        ; preds = %if.then.12, %if.end.7
  %10 = load %struct._object*, %struct._object** %newfdobj, align 8, !dbg !9326, !tbaa !2326
  store %struct._object* %10, %struct._object** %retval, !dbg !9327
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9327

cleanup:                                          ; preds = %if.end.14, %if.then.6, %if.then
  %11 = bitcast %struct._object** %newfdobj to i8*, !dbg !9328
  call void @llvm.lifetime.end(i64 8, i8* %11) #1, !dbg !9328
  %12 = bitcast i32* %newfd to i8*, !dbg !9328
  call void @llvm.lifetime.end(i64 4, i8* %12) #1, !dbg !9328
  %13 = bitcast i32* %fd to i8*, !dbg !9328
  call void @llvm.lifetime.end(i64 4, i8* %13) #1, !dbg !9328
  %14 = load %struct._object*, %struct._object** %retval, !dbg !9328
  ret %struct._object* %14, !dbg !9328
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_socketpair(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %s0 = alloca %struct.PySocketSockObject*, align 8
  %s1 = alloca %struct.PySocketSockObject*, align 8
  %sv = alloca [2 x i32], align 4
  %family = alloca i32, align 4
  %type = alloca i32, align 4
  %proto = alloca i32, align 4
  %res = alloca %struct._object*, align 8
  %atomic_flag_works = alloca i32*, align 8
  %ret = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp68 = alloca %struct._object*, align 8
  %_py_decref_tmp72 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1781, metadata !2310), !dbg !9329
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1782, metadata !2310), !dbg !9330
  %0 = bitcast %struct.PySocketSockObject** %s0 to i8*, !dbg !9331
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !9331
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s0, metadata !1783, metadata !2310), !dbg !9332
  store %struct.PySocketSockObject* null, %struct.PySocketSockObject** %s0, align 8, !dbg !9332, !tbaa !2326
  %1 = bitcast %struct.PySocketSockObject** %s1 to i8*, !dbg !9331
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !9331
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s1, metadata !1784, metadata !2310), !dbg !9333
  store %struct.PySocketSockObject* null, %struct.PySocketSockObject** %s1, align 8, !dbg !9333, !tbaa !2326
  %2 = bitcast [2 x i32]* %sv to i8*, !dbg !9334
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !9334
  call void @llvm.dbg.declare(metadata [2 x i32]* %sv, metadata !1785, metadata !2310), !dbg !9335
  %3 = bitcast i32* %family to i8*, !dbg !9336
  call void @llvm.lifetime.start(i64 4, i8* %3) #1, !dbg !9336
  call void @llvm.dbg.declare(metadata i32* %family, metadata !1789, metadata !2310), !dbg !9337
  %4 = bitcast i32* %type to i8*, !dbg !9336
  call void @llvm.lifetime.start(i64 4, i8* %4) #1, !dbg !9336
  call void @llvm.dbg.declare(metadata i32* %type, metadata !1790, metadata !2310), !dbg !9338
  store i32 1, i32* %type, align 4, !dbg !9338, !tbaa !3034
  %5 = bitcast i32* %proto to i8*, !dbg !9336
  call void @llvm.lifetime.start(i64 4, i8* %5) #1, !dbg !9336
  call void @llvm.dbg.declare(metadata i32* %proto, metadata !1791, metadata !2310), !dbg !9339
  store i32 0, i32* %proto, align 4, !dbg !9339, !tbaa !3034
  %6 = bitcast %struct._object** %res to i8*, !dbg !9340
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !9340
  call void @llvm.dbg.declare(metadata %struct._object** %res, metadata !1792, metadata !2310), !dbg !9341
  store %struct._object* null, %struct._object** %res, align 8, !dbg !9341, !tbaa !2326
  %7 = bitcast i32** %atomic_flag_works to i8*, !dbg !9342
  call void @llvm.lifetime.start(i64 8, i8* %7) #1, !dbg !9342
  call void @llvm.dbg.declare(metadata i32** %atomic_flag_works, metadata !1793, metadata !2310), !dbg !9343
  store i32* @sock_cloexec_works, i32** %atomic_flag_works, align 8, !dbg !9343, !tbaa !2326
  %8 = bitcast i32* %ret to i8*, !dbg !9344
  call void @llvm.lifetime.start(i64 4, i8* %8) #1, !dbg !9344
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !1794, metadata !2310), !dbg !9345
  store i32 1, i32* %family, align 4, !dbg !9346, !tbaa !3034
  %9 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9347, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %9, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.438, i32 0, i32 0), i32* %family, i32* %type, i32* %proto), !dbg !9349
  %tobool = icmp ne i32 %call, 0, !dbg !9349
  br i1 %tobool, label %if.end, label %if.then, !dbg !9350

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9351
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9351

if.end:                                           ; preds = %entry
  %10 = bitcast %struct._ts** %_save to i8*, !dbg !9352
  call void @llvm.lifetime.start(i64 8, i8* %10) #1, !dbg !9352
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1795, metadata !2310), !dbg !9353
  %call1 = call %struct._ts* @PyEval_SaveThread(), !dbg !9354
  store %struct._ts* %call1, %struct._ts** %_save, align 8, !dbg !9355, !tbaa !2326
  %11 = load i32, i32* @sock_cloexec_works, align 4, !dbg !9356, !tbaa !3034
  %cmp = icmp ne i32 %11, 0, !dbg !9358
  br i1 %cmp, label %if.then.2, label %if.else.16, !dbg !9359

if.then.2:                                        ; preds = %if.end
  %12 = load i32, i32* %family, align 4, !dbg !9360, !tbaa !3034
  %13 = load i32, i32* %type, align 4, !dbg !9362, !tbaa !3034
  %or = or i32 %13, 524288, !dbg !9363
  %14 = load i32, i32* %proto, align 4, !dbg !9364, !tbaa !3034
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %sv, i32 0, i32 0, !dbg !9365
  %call3 = call i32 @socketpair(i32 %12, i32 %or, i32 %14, i32* %arraydecay) #1, !dbg !9366
  store i32 %call3, i32* %ret, align 4, !dbg !9367, !tbaa !3034
  %15 = load i32, i32* @sock_cloexec_works, align 4, !dbg !9368, !tbaa !3034
  %cmp4 = icmp eq i32 %15, -1, !dbg !9370
  br i1 %cmp4, label %if.then.5, label %if.end.15, !dbg !9371

if.then.5:                                        ; preds = %if.then.2
  %16 = load i32, i32* %ret, align 4, !dbg !9372, !tbaa !3034
  %cmp6 = icmp sge i32 %16, 0, !dbg !9375
  br i1 %cmp6, label %if.then.7, label %if.else, !dbg !9376

if.then.7:                                        ; preds = %if.then.5
  store i32 1, i32* @sock_cloexec_works, align 4, !dbg !9377, !tbaa !3034
  br label %if.end.14, !dbg !9379

if.else:                                          ; preds = %if.then.5
  %call8 = call i32* @__errno_location() #2, !dbg !9380
  %17 = load i32, i32* %call8, align 4, !dbg !9382, !tbaa !3034
  %cmp9 = icmp eq i32 %17, 22, !dbg !9383
  br i1 %cmp9, label %if.then.10, label %if.end.13, !dbg !9384

if.then.10:                                       ; preds = %if.else
  store i32 0, i32* @sock_cloexec_works, align 4, !dbg !9385, !tbaa !3034
  %18 = load i32, i32* %family, align 4, !dbg !9387, !tbaa !3034
  %19 = load i32, i32* %type, align 4, !dbg !9388, !tbaa !3034
  %20 = load i32, i32* %proto, align 4, !dbg !9389, !tbaa !3034
  %arraydecay11 = getelementptr inbounds [2 x i32], [2 x i32]* %sv, i32 0, i32 0, !dbg !9390
  %call12 = call i32 @socketpair(i32 %18, i32 %19, i32 %20, i32* %arraydecay11) #1, !dbg !9391
  store i32 %call12, i32* %ret, align 4, !dbg !9392, !tbaa !3034
  br label %if.end.13, !dbg !9393

if.end.13:                                        ; preds = %if.then.10, %if.else
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.then.7
  br label %if.end.15, !dbg !9394

if.end.15:                                        ; preds = %if.end.14, %if.then.2
  br label %if.end.19, !dbg !9395

if.else.16:                                       ; preds = %if.end
  %21 = load i32, i32* %family, align 4, !dbg !9396, !tbaa !3034
  %22 = load i32, i32* %type, align 4, !dbg !9398, !tbaa !3034
  %23 = load i32, i32* %proto, align 4, !dbg !9399, !tbaa !3034
  %arraydecay17 = getelementptr inbounds [2 x i32], [2 x i32]* %sv, i32 0, i32 0, !dbg !9400
  %call18 = call i32 @socketpair(i32 %21, i32 %22, i32 %23, i32* %arraydecay17) #1, !dbg !9401
  store i32 %call18, i32* %ret, align 4, !dbg !9402, !tbaa !3034
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.16, %if.end.15
  %24 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !9403, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %24), !dbg !9404
  %25 = bitcast %struct._ts** %_save to i8*, !dbg !9405
  call void @llvm.lifetime.end(i64 8, i8* %25) #1, !dbg !9405
  %26 = load i32, i32* %ret, align 4, !dbg !9406, !tbaa !3034
  %cmp20 = icmp slt i32 %26, 0, !dbg !9408
  br i1 %cmp20, label %if.then.21, label %if.end.23, !dbg !9409

if.then.21:                                       ; preds = %if.end.19
  %call22 = call %struct._object* @set_error(), !dbg !9410
  store %struct._object* %call22, %struct._object** %retval, !dbg !9411
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9411

if.end.23:                                        ; preds = %if.end.19
  %arrayidx = getelementptr [2 x i32], [2 x i32]* %sv, i32 0, i64 0, !dbg !9412
  %27 = load i32, i32* %arrayidx, align 4, !dbg !9412, !tbaa !3034
  %28 = load i32*, i32** %atomic_flag_works, align 8, !dbg !9414, !tbaa !2326
  %call24 = call i32 @_Py_set_inheritable(i32 %27, i32 0, i32* %28), !dbg !9415
  %cmp25 = icmp slt i32 %call24, 0, !dbg !9416
  br i1 %cmp25, label %if.then.26, label %if.end.27, !dbg !9417

if.then.26:                                       ; preds = %if.end.23
  br label %finally, !dbg !9418

if.end.27:                                        ; preds = %if.end.23
  %arrayidx28 = getelementptr [2 x i32], [2 x i32]* %sv, i32 0, i64 1, !dbg !9419
  %29 = load i32, i32* %arrayidx28, align 4, !dbg !9419, !tbaa !3034
  %30 = load i32*, i32** %atomic_flag_works, align 8, !dbg !9421, !tbaa !2326
  %call29 = call i32 @_Py_set_inheritable(i32 %29, i32 0, i32* %30), !dbg !9422
  %cmp30 = icmp slt i32 %call29, 0, !dbg !9423
  br i1 %cmp30, label %if.then.31, label %if.end.32, !dbg !9424

if.then.31:                                       ; preds = %if.end.27
  br label %finally, !dbg !9425

if.end.32:                                        ; preds = %if.end.27
  %arrayidx33 = getelementptr [2 x i32], [2 x i32]* %sv, i32 0, i64 0, !dbg !9426
  %31 = load i32, i32* %arrayidx33, align 4, !dbg !9426, !tbaa !3034
  %32 = load i32, i32* %family, align 4, !dbg !9427, !tbaa !3034
  %33 = load i32, i32* %type, align 4, !dbg !9428, !tbaa !3034
  %34 = load i32, i32* %proto, align 4, !dbg !9429, !tbaa !3034
  %call34 = call %struct.PySocketSockObject* @new_sockobject(i32 %31, i32 %32, i32 %33, i32 %34), !dbg !9430
  store %struct.PySocketSockObject* %call34, %struct.PySocketSockObject** %s0, align 8, !dbg !9431, !tbaa !2326
  %35 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s0, align 8, !dbg !9432, !tbaa !2326
  %cmp35 = icmp eq %struct.PySocketSockObject* %35, null, !dbg !9434
  br i1 %cmp35, label %if.then.36, label %if.end.37, !dbg !9435

if.then.36:                                       ; preds = %if.end.32
  br label %finally, !dbg !9436

if.end.37:                                        ; preds = %if.end.32
  %arrayidx38 = getelementptr [2 x i32], [2 x i32]* %sv, i32 0, i64 1, !dbg !9437
  %36 = load i32, i32* %arrayidx38, align 4, !dbg !9437, !tbaa !3034
  %37 = load i32, i32* %family, align 4, !dbg !9438, !tbaa !3034
  %38 = load i32, i32* %type, align 4, !dbg !9439, !tbaa !3034
  %39 = load i32, i32* %proto, align 4, !dbg !9440, !tbaa !3034
  %call39 = call %struct.PySocketSockObject* @new_sockobject(i32 %36, i32 %37, i32 %38, i32 %39), !dbg !9441
  store %struct.PySocketSockObject* %call39, %struct.PySocketSockObject** %s1, align 8, !dbg !9442, !tbaa !2326
  %40 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s1, align 8, !dbg !9443, !tbaa !2326
  %cmp40 = icmp eq %struct.PySocketSockObject* %40, null, !dbg !9445
  br i1 %cmp40, label %if.then.41, label %if.end.42, !dbg !9446

if.then.41:                                       ; preds = %if.end.37
  br label %finally, !dbg !9447

if.end.42:                                        ; preds = %if.end.37
  %41 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s0, align 8, !dbg !9448, !tbaa !2326
  %42 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s1, align 8, !dbg !9449, !tbaa !2326
  %call43 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct.PySocketSockObject* %41, %struct.PySocketSockObject* %42), !dbg !9450
  store %struct._object* %call43, %struct._object** %res, align 8, !dbg !9451, !tbaa !2326
  br label %finally, !dbg !9452

finally:                                          ; preds = %if.end.42, %if.then.41, %if.then.36, %if.then.31, %if.then.26
  %43 = load %struct._object*, %struct._object** %res, align 8, !dbg !9453, !tbaa !2326
  %cmp44 = icmp eq %struct._object* %43, null, !dbg !9455
  br i1 %cmp44, label %if.then.45, label %if.end.56, !dbg !9456

if.then.45:                                       ; preds = %finally
  %44 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s0, align 8, !dbg !9457, !tbaa !2326
  %cmp46 = icmp eq %struct.PySocketSockObject* %44, null, !dbg !9460
  br i1 %cmp46, label %if.then.47, label %if.end.50, !dbg !9461

if.then.47:                                       ; preds = %if.then.45
  %arrayidx48 = getelementptr [2 x i32], [2 x i32]* %sv, i32 0, i64 0, !dbg !9462
  %45 = load i32, i32* %arrayidx48, align 4, !dbg !9462, !tbaa !3034
  %call49 = call i32 @close(i32 %45), !dbg !9463
  br label %if.end.50, !dbg !9463

if.end.50:                                        ; preds = %if.then.47, %if.then.45
  %46 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s1, align 8, !dbg !9464, !tbaa !2326
  %cmp51 = icmp eq %struct.PySocketSockObject* %46, null, !dbg !9466
  br i1 %cmp51, label %if.then.52, label %if.end.55, !dbg !9467

if.then.52:                                       ; preds = %if.end.50
  %arrayidx53 = getelementptr [2 x i32], [2 x i32]* %sv, i32 0, i64 1, !dbg !9468
  %47 = load i32, i32* %arrayidx53, align 4, !dbg !9468, !tbaa !3034
  %call54 = call i32 @close(i32 %47), !dbg !9469
  br label %if.end.55, !dbg !9469

if.end.55:                                        ; preds = %if.then.52, %if.end.50
  br label %if.end.56, !dbg !9470

if.end.56:                                        ; preds = %if.end.55, %finally
  br label %do.body, !dbg !9471

do.body:                                          ; preds = %if.end.56
  %48 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !9472
  call void @llvm.lifetime.start(i64 8, i8* %48) #1, !dbg !9472
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1797, metadata !2310), !dbg !9474
  %49 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s0, align 8, !dbg !9475, !tbaa !2326
  %50 = bitcast %struct.PySocketSockObject* %49 to %struct._object*, !dbg !9476
  store %struct._object* %50, %struct._object** %_py_xdecref_tmp, align 8, !dbg !9474, !tbaa !2326
  %51 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !9477, !tbaa !2326
  %cmp57 = icmp ne %struct._object* %51, null, !dbg !9478
  br i1 %cmp57, label %if.then.58, label %if.end.64, !dbg !9479

if.then.58:                                       ; preds = %do.body
  br label %do.body.59, !dbg !9480

do.body.59:                                       ; preds = %if.then.58
  %52 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9482
  call void @llvm.lifetime.start(i64 8, i8* %52) #1, !dbg !9482
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1799, metadata !2310), !dbg !9484
  %53 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !9485, !tbaa !2326
  store %struct._object* %53, %struct._object** %_py_decref_tmp, align 8, !dbg !9484, !tbaa !2326
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9486, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 0, !dbg !9488
  %55 = load i64, i64* %ob_refcnt, align 8, !dbg !9489, !tbaa !2335
  %dec = add i64 %55, -1, !dbg !9489
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !9489, !tbaa !2335
  %cmp60 = icmp ne i64 %dec, 0, !dbg !9490
  br i1 %cmp60, label %if.then.61, label %if.else.62, !dbg !9491

if.then.61:                                       ; preds = %do.body.59
  br label %if.end.63, !dbg !9492

if.else.62:                                       ; preds = %do.body.59
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9494, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 1, !dbg !9496
  %57 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9496, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 4, !dbg !9497
  %58 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !9497, !tbaa !3442
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !9498, !tbaa !2326
  call void %58(%struct._object* %59), !dbg !9499
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.62, %if.then.61
  %60 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !9500
  call void @llvm.lifetime.end(i64 8, i8* %60) #1, !dbg !9500
  br label %do.cond, !dbg !9502

do.cond:                                          ; preds = %if.end.63
  br label %do.end, !dbg !9503

do.end:                                           ; preds = %do.cond
  br label %if.end.64, !dbg !9505

if.end.64:                                        ; preds = %do.end, %do.body
  %61 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !9507
  call void @llvm.lifetime.end(i64 8, i8* %61) #1, !dbg !9507
  br label %do.cond.65, !dbg !9510

do.cond.65:                                       ; preds = %if.end.64
  br label %do.end.66, !dbg !9511

do.end.66:                                        ; preds = %do.cond.65
  br label %do.body.67, !dbg !9513

do.body.67:                                       ; preds = %do.end.66
  %62 = bitcast %struct._object** %_py_xdecref_tmp68 to i8*, !dbg !9514
  call void @llvm.lifetime.start(i64 8, i8* %62) #1, !dbg !9514
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp68, metadata !1802, metadata !2310), !dbg !9516
  %63 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s1, align 8, !dbg !9517, !tbaa !2326
  %64 = bitcast %struct.PySocketSockObject* %63 to %struct._object*, !dbg !9518
  store %struct._object* %64, %struct._object** %_py_xdecref_tmp68, align 8, !dbg !9516, !tbaa !2326
  %65 = load %struct._object*, %struct._object** %_py_xdecref_tmp68, align 8, !dbg !9519, !tbaa !2326
  %cmp69 = icmp ne %struct._object* %65, null, !dbg !9520
  br i1 %cmp69, label %if.then.70, label %if.end.83, !dbg !9521

if.then.70:                                       ; preds = %do.body.67
  br label %do.body.71, !dbg !9522

do.body.71:                                       ; preds = %if.then.70
  %66 = bitcast %struct._object** %_py_decref_tmp72 to i8*, !dbg !9524
  call void @llvm.lifetime.start(i64 8, i8* %66) #1, !dbg !9524
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp72, metadata !1804, metadata !2310), !dbg !9526
  %67 = load %struct._object*, %struct._object** %_py_xdecref_tmp68, align 8, !dbg !9527, !tbaa !2326
  store %struct._object* %67, %struct._object** %_py_decref_tmp72, align 8, !dbg !9526, !tbaa !2326
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8, !dbg !9528, !tbaa !2326
  %ob_refcnt73 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 0, !dbg !9530
  %69 = load i64, i64* %ob_refcnt73, align 8, !dbg !9531, !tbaa !2335
  %dec74 = add i64 %69, -1, !dbg !9531
  store i64 %dec74, i64* %ob_refcnt73, align 8, !dbg !9531, !tbaa !2335
  %cmp75 = icmp ne i64 %dec74, 0, !dbg !9532
  br i1 %cmp75, label %if.then.76, label %if.else.77, !dbg !9533

if.then.76:                                       ; preds = %do.body.71
  br label %if.end.80, !dbg !9534

if.else.77:                                       ; preds = %do.body.71
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8, !dbg !9536, !tbaa !2326
  %ob_type78 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1, !dbg !9538
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type78, align 8, !dbg !9538, !tbaa !2318
  %tp_dealloc79 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 4, !dbg !9539
  %72 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc79, align 8, !dbg !9539, !tbaa !3442
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8, !dbg !9540, !tbaa !2326
  call void %72(%struct._object* %73), !dbg !9541
  br label %if.end.80

if.end.80:                                        ; preds = %if.else.77, %if.then.76
  %74 = bitcast %struct._object** %_py_decref_tmp72 to i8*, !dbg !9542
  call void @llvm.lifetime.end(i64 8, i8* %74) #1, !dbg !9542
  br label %do.cond.81, !dbg !9544

do.cond.81:                                       ; preds = %if.end.80
  br label %do.end.82, !dbg !9545

do.end.82:                                        ; preds = %do.cond.81
  br label %if.end.83, !dbg !9547

if.end.83:                                        ; preds = %do.end.82, %do.body.67
  %75 = bitcast %struct._object** %_py_xdecref_tmp68 to i8*, !dbg !9549
  call void @llvm.lifetime.end(i64 8, i8* %75) #1, !dbg !9549
  br label %do.cond.84, !dbg !9550

do.cond.84:                                       ; preds = %if.end.83
  br label %do.end.85, !dbg !9551

do.end.85:                                        ; preds = %do.cond.84
  %76 = load %struct._object*, %struct._object** %res, align 8, !dbg !9553, !tbaa !2326
  store %struct._object* %76, %struct._object** %retval, !dbg !9554
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9554

cleanup:                                          ; preds = %do.end.85, %if.then.21, %if.then
  %77 = bitcast i32* %ret to i8*, !dbg !9555
  call void @llvm.lifetime.end(i64 4, i8* %77) #1, !dbg !9555
  %78 = bitcast i32** %atomic_flag_works to i8*, !dbg !9555
  call void @llvm.lifetime.end(i64 8, i8* %78) #1, !dbg !9555
  %79 = bitcast %struct._object** %res to i8*, !dbg !9555
  call void @llvm.lifetime.end(i64 8, i8* %79) #1, !dbg !9555
  %80 = bitcast i32* %proto to i8*, !dbg !9555
  call void @llvm.lifetime.end(i64 4, i8* %80) #1, !dbg !9555
  %81 = bitcast i32* %type to i8*, !dbg !9555
  call void @llvm.lifetime.end(i64 4, i8* %81) #1, !dbg !9555
  %82 = bitcast i32* %family to i8*, !dbg !9555
  call void @llvm.lifetime.end(i64 4, i8* %82) #1, !dbg !9555
  %83 = bitcast [2 x i32]* %sv to i8*, !dbg !9555
  call void @llvm.lifetime.end(i64 8, i8* %83) #1, !dbg !9555
  %84 = bitcast %struct.PySocketSockObject** %s1 to i8*, !dbg !9555
  call void @llvm.lifetime.end(i64 8, i8* %84) #1, !dbg !9555
  %85 = bitcast %struct.PySocketSockObject** %s0 to i8*, !dbg !9555
  call void @llvm.lifetime.end(i64 8, i8* %85) #1, !dbg !9555
  %86 = load %struct._object*, %struct._object** %retval, !dbg !9555
  ret %struct._object* %86, !dbg !9555
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_ntohs(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %x1 = alloca i32, align 4
  %x2 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %__v = alloca i16, align 2
  %__x = alloca i16, align 2
  %tmp = alloca i16, align 2
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1818, metadata !2310), !dbg !9556
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1819, metadata !2310), !dbg !9557
  %0 = bitcast i32* %x1 to i8*, !dbg !9558
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !9558
  call void @llvm.dbg.declare(metadata i32* %x1, metadata !1820, metadata !2310), !dbg !9559
  %1 = bitcast i32* %x2 to i8*, !dbg !9558
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !9558
  call void @llvm.dbg.declare(metadata i32* %x2, metadata !1821, metadata !2310), !dbg !9560
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9561, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.439, i32 0, i32 0), i32* %x1), !dbg !9563
  %tobool = icmp ne i32 %call, 0, !dbg !9563
  br i1 %tobool, label %if.end, label %if.then, !dbg !9564

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9565
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9565

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %x1, align 4, !dbg !9567, !tbaa !3034
  %cmp = icmp slt i32 %3, 0, !dbg !9569
  br i1 %cmp, label %if.then.1, label %if.end.2, !dbg !9570

if.then.1:                                        ; preds = %if.end
  %4 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !9571, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.440, i32 0, i32 0)), !dbg !9573
  store %struct._object* null, %struct._object** %retval, !dbg !9574
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9574

if.end.2:                                         ; preds = %if.end
  %5 = bitcast i16* %__v to i8*, !dbg !9575
  call void @llvm.lifetime.start(i64 2, i8* %5) #1, !dbg !9575
  call void @llvm.dbg.declare(metadata i16* %__v, metadata !1822, metadata !2310), !dbg !9576
  %6 = bitcast i16* %__x to i8*, !dbg !9575
  call void @llvm.lifetime.start(i64 2, i8* %6) #1, !dbg !9575
  call void @llvm.dbg.declare(metadata i16* %__x, metadata !1824, metadata !2310), !dbg !9577
  %7 = load i32, i32* %x1, align 4, !dbg !9578, !tbaa !3034
  %conv = trunc i32 %7 to i16, !dbg !9579
  store i16 %conv, i16* %__x, align 2, !dbg !9577, !tbaa !6057
  %8 = load i16, i16* %__x, align 2, !dbg !9580, !tbaa !6057
  %9 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %8) #2, !dbg !9582, !srcloc !9583
  store i16 %9, i16* %__v, align 2, !dbg !9582, !tbaa !6057
  %10 = load i16, i16* %__v, align 2, !dbg !9584, !tbaa !6057
  store i16 %10, i16* %tmp, !dbg !9585, !tbaa !6057
  %11 = bitcast i16* %__x to i8*, !dbg !9586
  call void @llvm.lifetime.end(i64 2, i8* %11) #1, !dbg !9586
  %12 = bitcast i16* %__v to i8*, !dbg !9586
  call void @llvm.lifetime.end(i64 2, i8* %12) #1, !dbg !9586
  %13 = load i16, i16* %tmp, !dbg !9587, !tbaa !6057
  %conv3 = zext i16 %13 to i32, !dbg !9588
  store i32 %conv3, i32* %x2, align 4, !dbg !9589, !tbaa !3034
  %14 = load i32, i32* %x2, align 4, !dbg !9590, !tbaa !3034
  %conv4 = sext i32 %14 to i64, !dbg !9590
  %call5 = call %struct._object* @PyLong_FromLong(i64 %conv4), !dbg !9591
  store %struct._object* %call5, %struct._object** %retval, !dbg !9592
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9592

cleanup:                                          ; preds = %if.end.2, %if.then.1, %if.then
  %15 = bitcast i32* %x2 to i8*, !dbg !9593
  call void @llvm.lifetime.end(i64 4, i8* %15) #1, !dbg !9593
  %16 = bitcast i32* %x1 to i8*, !dbg !9593
  call void @llvm.lifetime.end(i64 4, i8* %16) #1, !dbg !9593
  %17 = load %struct._object*, %struct._object** %retval, !dbg !9593
  ret %struct._object* %17, !dbg !9593
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_ntohl(%struct._object* %self, %struct._object* %arg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %x = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %y = alloca i64, align 8
  %__v = alloca i32, align 4
  %__x = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1827, metadata !2310), !dbg !9594
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !1828, metadata !2310), !dbg !9595
  %0 = bitcast i64* %x to i8*, !dbg !9596
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !9596
  call void @llvm.dbg.declare(metadata i64* %x, metadata !1829, metadata !2310), !dbg !9597
  %1 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !9598, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !9599
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9599, !tbaa !2318
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 19, !dbg !9600
  %3 = load i64, i64* %tp_flags, align 8, !dbg !9600, !tbaa !5047
  %and = and i64 %3, 16777216, !dbg !9601
  %cmp = icmp ne i64 %and, 0, !dbg !9602
  br i1 %cmp, label %if.then, label %if.else, !dbg !9603

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !9604, !tbaa !2326
  %call = call i64 @PyLong_AsUnsignedLong(%struct._object* %4), !dbg !9605
  store i64 %call, i64* %x, align 8, !dbg !9606, !tbaa !2963
  %5 = load i64, i64* %x, align 8, !dbg !9607, !tbaa !2963
  %cmp1 = icmp eq i64 %5, -1, !dbg !9609
  br i1 %cmp1, label %land.lhs.true, label %if.end, !dbg !9610

land.lhs.true:                                    ; preds = %if.then
  %call2 = call %struct._object* @PyErr_Occurred(), !dbg !9611
  %tobool = icmp ne %struct._object* %call2, null, !dbg !9611
  br i1 %tobool, label %if.then.3, label %if.end, !dbg !9613

if.then.3:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval, !dbg !9614
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.14, !dbg !9614

if.end:                                           ; preds = %land.lhs.true, %if.then
  %6 = bitcast i64* %y to i8*, !dbg !9615
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !9615
  call void @llvm.dbg.declare(metadata i64* %y, metadata !1830, metadata !2310), !dbg !9616
  %7 = load i64, i64* %x, align 8, !dbg !9617, !tbaa !2963
  %and4 = and i64 %7, 4294967295, !dbg !9618
  store i64 %and4, i64* %y, align 8, !dbg !9619, !tbaa !2963
  %8 = load i64, i64* %y, align 8, !dbg !9620, !tbaa !2963
  %9 = load i64, i64* %x, align 8, !dbg !9622, !tbaa !2963
  %xor = xor i64 %8, %9, !dbg !9623
  %tobool5 = icmp ne i64 %xor, 0, !dbg !9623
  br i1 %tobool5, label %if.then.6, label %if.end.8, !dbg !9624

if.then.6:                                        ; preds = %if.end
  %10 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !9625, !tbaa !2326
  %call7 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %10, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.441, i32 0, i32 0)), !dbg !9626
  store %struct._object* %call7, %struct._object** %retval, !dbg !9627
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9627

if.end.8:                                         ; preds = %if.end
  %11 = load i64, i64* %y, align 8, !dbg !9628, !tbaa !2963
  store i64 %11, i64* %x, align 8, !dbg !9629, !tbaa !2963
  store i32 0, i32* %cleanup.dest.slot, !dbg !9630
  br label %cleanup, !dbg !9630

cleanup:                                          ; preds = %if.end.8, %if.then.6
  %12 = bitcast i64* %y to i8*, !dbg !9631
  call void @llvm.lifetime.end(i64 8, i8* %12) #1, !dbg !9631
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.11, !dbg !9633

if.else:                                          ; preds = %entry
  %13 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !9634, !tbaa !2326
  %14 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !9635, !tbaa !2326
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1, !dbg !9636
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8, !dbg !9636, !tbaa !2318
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 1, !dbg !9637
  %16 = load i8*, i8** %tp_name, align 8, !dbg !9637, !tbaa !6621
  %call10 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %13, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.442, i32 0, i32 0), i8* %16), !dbg !9638
  store %struct._object* %call10, %struct._object** %retval, !dbg !9639
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.14, !dbg !9639

if.end.11:                                        ; preds = %cleanup.cont
  %17 = bitcast i32* %__v to i8*, !dbg !9640
  call void @llvm.lifetime.start(i64 4, i8* %17) #1, !dbg !9640
  call void @llvm.dbg.declare(metadata i32* %__v, metadata !1834, metadata !2310), !dbg !9641
  %18 = bitcast i32* %__x to i8*, !dbg !9640
  call void @llvm.lifetime.start(i64 4, i8* %18) #1, !dbg !9640
  call void @llvm.dbg.declare(metadata i32* %__x, metadata !1836, metadata !2310), !dbg !9642
  %19 = load i64, i64* %x, align 8, !dbg !9643, !tbaa !2963
  %conv = trunc i64 %19 to i32, !dbg !9644
  store i32 %conv, i32* %__x, align 4, !dbg !9642, !tbaa !3034
  %20 = load i32, i32* %__x, align 4, !dbg !9645, !tbaa !3034
  %21 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %20) #2, !dbg !9647, !srcloc !9648
  store i32 %21, i32* %__v, align 4, !dbg !9647, !tbaa !3034
  %22 = load i32, i32* %__v, align 4, !dbg !9649, !tbaa !3034
  store i32 %22, i32* %tmp, !dbg !9650, !tbaa !3034
  %23 = bitcast i32* %__x to i8*, !dbg !9651
  call void @llvm.lifetime.end(i64 4, i8* %23) #1, !dbg !9651
  %24 = bitcast i32* %__v to i8*, !dbg !9651
  call void @llvm.lifetime.end(i64 4, i8* %24) #1, !dbg !9651
  %25 = load i32, i32* %tmp, !dbg !9652, !tbaa !3034
  %conv12 = zext i32 %25 to i64, !dbg !9653
  %call13 = call %struct._object* @PyLong_FromUnsignedLong(i64 %conv12), !dbg !9654
  store %struct._object* %call13, %struct._object** %retval, !dbg !9655
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.14, !dbg !9655

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.14

cleanup.14:                                       ; preds = %NewDefault, %if.end.11, %if.else, %if.then.3
  %26 = bitcast i64* %x to i8*, !dbg !9656
  call void @llvm.lifetime.end(i64 8, i8* %26) #1, !dbg !9656
  %27 = load %struct._object*, %struct._object** %retval, !dbg !9656
  ret %struct._object* %27, !dbg !9656
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_htons(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %x1 = alloca i32, align 4
  %x2 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %__v = alloca i16, align 2
  %__x = alloca i16, align 2
  %tmp = alloca i16, align 2
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1839, metadata !2310), !dbg !9657
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1840, metadata !2310), !dbg !9658
  %0 = bitcast i32* %x1 to i8*, !dbg !9659
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !9659
  call void @llvm.dbg.declare(metadata i32* %x1, metadata !1841, metadata !2310), !dbg !9660
  %1 = bitcast i32* %x2 to i8*, !dbg !9659
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !9659
  call void @llvm.dbg.declare(metadata i32* %x2, metadata !1842, metadata !2310), !dbg !9661
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9662, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.443, i32 0, i32 0), i32* %x1), !dbg !9664
  %tobool = icmp ne i32 %call, 0, !dbg !9664
  br i1 %tobool, label %if.end, label %if.then, !dbg !9665

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9666
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9666

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %x1, align 4, !dbg !9668, !tbaa !3034
  %cmp = icmp slt i32 %3, 0, !dbg !9670
  br i1 %cmp, label %if.then.1, label %if.end.2, !dbg !9671

if.then.1:                                        ; preds = %if.end
  %4 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !9672, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.440, i32 0, i32 0)), !dbg !9674
  store %struct._object* null, %struct._object** %retval, !dbg !9675
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9675

if.end.2:                                         ; preds = %if.end
  %5 = bitcast i16* %__v to i8*, !dbg !9676
  call void @llvm.lifetime.start(i64 2, i8* %5) #1, !dbg !9676
  call void @llvm.dbg.declare(metadata i16* %__v, metadata !1843, metadata !2310), !dbg !9677
  %6 = bitcast i16* %__x to i8*, !dbg !9676
  call void @llvm.lifetime.start(i64 2, i8* %6) #1, !dbg !9676
  call void @llvm.dbg.declare(metadata i16* %__x, metadata !1845, metadata !2310), !dbg !9678
  %7 = load i32, i32* %x1, align 4, !dbg !9679, !tbaa !3034
  %conv = trunc i32 %7 to i16, !dbg !9680
  store i16 %conv, i16* %__x, align 2, !dbg !9678, !tbaa !6057
  %8 = load i16, i16* %__x, align 2, !dbg !9681, !tbaa !6057
  %9 = call i16 asm "rorw $$8, ${0:w}", "=r,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i16 %8) #2, !dbg !9683, !srcloc !9684
  store i16 %9, i16* %__v, align 2, !dbg !9683, !tbaa !6057
  %10 = load i16, i16* %__v, align 2, !dbg !9685, !tbaa !6057
  store i16 %10, i16* %tmp, !dbg !9686, !tbaa !6057
  %11 = bitcast i16* %__x to i8*, !dbg !9687
  call void @llvm.lifetime.end(i64 2, i8* %11) #1, !dbg !9687
  %12 = bitcast i16* %__v to i8*, !dbg !9687
  call void @llvm.lifetime.end(i64 2, i8* %12) #1, !dbg !9687
  %13 = load i16, i16* %tmp, !dbg !9688, !tbaa !6057
  %conv3 = zext i16 %13 to i32, !dbg !9689
  store i32 %conv3, i32* %x2, align 4, !dbg !9690, !tbaa !3034
  %14 = load i32, i32* %x2, align 4, !dbg !9691, !tbaa !3034
  %conv4 = sext i32 %14 to i64, !dbg !9691
  %call5 = call %struct._object* @PyLong_FromLong(i64 %conv4), !dbg !9692
  store %struct._object* %call5, %struct._object** %retval, !dbg !9693
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9693

cleanup:                                          ; preds = %if.end.2, %if.then.1, %if.then
  %15 = bitcast i32* %x2 to i8*, !dbg !9694
  call void @llvm.lifetime.end(i64 4, i8* %15) #1, !dbg !9694
  %16 = bitcast i32* %x1 to i8*, !dbg !9694
  call void @llvm.lifetime.end(i64 4, i8* %16) #1, !dbg !9694
  %17 = load %struct._object*, %struct._object** %retval, !dbg !9694
  ret %struct._object* %17, !dbg !9694
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_htonl(%struct._object* %self, %struct._object* %arg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %x = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %y = alloca i64, align 8
  %__v = alloca i32, align 4
  %__x = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1848, metadata !2310), !dbg !9695
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !1849, metadata !2310), !dbg !9696
  %0 = bitcast i64* %x to i8*, !dbg !9697
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !9697
  call void @llvm.dbg.declare(metadata i64* %x, metadata !1850, metadata !2310), !dbg !9698
  %1 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !9699, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1, !dbg !9700
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9700, !tbaa !2318
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 19, !dbg !9701
  %3 = load i64, i64* %tp_flags, align 8, !dbg !9701, !tbaa !5047
  %and = and i64 %3, 16777216, !dbg !9702
  %cmp = icmp ne i64 %and, 0, !dbg !9703
  br i1 %cmp, label %if.then, label %if.else, !dbg !9704

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !9705, !tbaa !2326
  %call = call i64 @PyLong_AsUnsignedLong(%struct._object* %4), !dbg !9706
  store i64 %call, i64* %x, align 8, !dbg !9707, !tbaa !2963
  %5 = load i64, i64* %x, align 8, !dbg !9708, !tbaa !2963
  %cmp1 = icmp eq i64 %5, -1, !dbg !9710
  br i1 %cmp1, label %land.lhs.true, label %if.end, !dbg !9711

land.lhs.true:                                    ; preds = %if.then
  %call2 = call %struct._object* @PyErr_Occurred(), !dbg !9712
  %tobool = icmp ne %struct._object* %call2, null, !dbg !9712
  br i1 %tobool, label %if.then.3, label %if.end, !dbg !9714

if.then.3:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval, !dbg !9715
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.14, !dbg !9715

if.end:                                           ; preds = %land.lhs.true, %if.then
  %6 = bitcast i64* %y to i8*, !dbg !9716
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !9716
  call void @llvm.dbg.declare(metadata i64* %y, metadata !1851, metadata !2310), !dbg !9717
  %7 = load i64, i64* %x, align 8, !dbg !9718, !tbaa !2963
  %and4 = and i64 %7, 4294967295, !dbg !9719
  store i64 %and4, i64* %y, align 8, !dbg !9720, !tbaa !2963
  %8 = load i64, i64* %y, align 8, !dbg !9721, !tbaa !2963
  %9 = load i64, i64* %x, align 8, !dbg !9723, !tbaa !2963
  %xor = xor i64 %8, %9, !dbg !9724
  %tobool5 = icmp ne i64 %xor, 0, !dbg !9724
  br i1 %tobool5, label %if.then.6, label %if.end.8, !dbg !9725

if.then.6:                                        ; preds = %if.end
  %10 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !9726, !tbaa !2326
  %call7 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %10, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.441, i32 0, i32 0)), !dbg !9727
  store %struct._object* %call7, %struct._object** %retval, !dbg !9728
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9728

if.end.8:                                         ; preds = %if.end
  %11 = load i64, i64* %y, align 8, !dbg !9729, !tbaa !2963
  store i64 %11, i64* %x, align 8, !dbg !9730, !tbaa !2963
  store i32 0, i32* %cleanup.dest.slot, !dbg !9731
  br label %cleanup, !dbg !9731

cleanup:                                          ; preds = %if.end.8, %if.then.6
  %12 = bitcast i64* %y to i8*, !dbg !9732
  call void @llvm.lifetime.end(i64 8, i8* %12) #1, !dbg !9732
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.11, !dbg !9734

if.else:                                          ; preds = %entry
  %13 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !9735, !tbaa !2326
  %14 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !9736, !tbaa !2326
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1, !dbg !9737
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8, !dbg !9737, !tbaa !2318
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 1, !dbg !9738
  %16 = load i8*, i8** %tp_name, align 8, !dbg !9738, !tbaa !6621
  %call10 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %13, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.442, i32 0, i32 0), i8* %16), !dbg !9739
  store %struct._object* %call10, %struct._object** %retval, !dbg !9740
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.14, !dbg !9740

if.end.11:                                        ; preds = %cleanup.cont
  %17 = bitcast i32* %__v to i8*, !dbg !9741
  call void @llvm.lifetime.start(i64 4, i8* %17) #1, !dbg !9741
  call void @llvm.dbg.declare(metadata i32* %__v, metadata !1855, metadata !2310), !dbg !9742
  %18 = bitcast i32* %__x to i8*, !dbg !9741
  call void @llvm.lifetime.start(i64 4, i8* %18) #1, !dbg !9741
  call void @llvm.dbg.declare(metadata i32* %__x, metadata !1857, metadata !2310), !dbg !9743
  %19 = load i64, i64* %x, align 8, !dbg !9744, !tbaa !2963
  %conv = trunc i64 %19 to i32, !dbg !9745
  store i32 %conv, i32* %__x, align 4, !dbg !9743, !tbaa !3034
  %20 = load i32, i32* %__x, align 4, !dbg !9746, !tbaa !3034
  %21 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %20) #2, !dbg !9748, !srcloc !9749
  store i32 %21, i32* %__v, align 4, !dbg !9748, !tbaa !3034
  %22 = load i32, i32* %__v, align 4, !dbg !9750, !tbaa !3034
  store i32 %22, i32* %tmp, !dbg !9751, !tbaa !3034
  %23 = bitcast i32* %__x to i8*, !dbg !9752
  call void @llvm.lifetime.end(i64 4, i8* %23) #1, !dbg !9752
  %24 = bitcast i32* %__v to i8*, !dbg !9752
  call void @llvm.lifetime.end(i64 4, i8* %24) #1, !dbg !9752
  %25 = load i32, i32* %tmp, !dbg !9753, !tbaa !3034
  %conv12 = zext i32 %25 to i64, !dbg !9754
  %call13 = call %struct._object* @PyLong_FromUnsignedLong(i64 %conv12), !dbg !9755
  store %struct._object* %call13, %struct._object** %retval, !dbg !9756
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.14, !dbg !9756

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.14

cleanup.14:                                       ; preds = %NewDefault, %if.end.11, %if.else, %if.then.3
  %26 = bitcast i64* %x to i8*, !dbg !9757
  call void @llvm.lifetime.end(i64 8, i8* %26) #1, !dbg !9757
  %27 = load %struct._object*, %struct._object** %retval, !dbg !9757
  ret %struct._object* %27, !dbg !9757
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_inet_aton(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %buf = alloca %struct.in_addr, align 4
  %ip_addr = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1860, metadata !2310), !dbg !9758
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1861, metadata !2310), !dbg !9759
  %0 = bitcast %struct.in_addr* %buf to i8*, !dbg !9760
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !9760
  call void @llvm.dbg.declare(metadata %struct.in_addr* %buf, metadata !1862, metadata !2310), !dbg !9761
  %1 = bitcast i8** %ip_addr to i8*, !dbg !9762
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !9762
  call void @llvm.dbg.declare(metadata i8** %ip_addr, metadata !1863, metadata !2310), !dbg !9763
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9764, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.444, i32 0, i32 0), i8** %ip_addr), !dbg !9766
  %tobool = icmp ne i32 %call, 0, !dbg !9766
  br i1 %tobool, label %if.end, label %if.then, !dbg !9767

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9768
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9768

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ip_addr, align 8, !dbg !9769, !tbaa !2326
  %call1 = call i32 @inet_aton(i8* %3, %struct.in_addr* %buf) #1, !dbg !9771
  %tobool2 = icmp ne i32 %call1, 0, !dbg !9771
  br i1 %tobool2, label %if.then.3, label %if.end.5, !dbg !9772

if.then.3:                                        ; preds = %if.end
  %4 = bitcast %struct.in_addr* %buf to i8*, !dbg !9773
  %call4 = call %struct._object* @PyBytes_FromStringAndSize(i8* %4, i64 4), !dbg !9774
  store %struct._object* %call4, %struct._object** %retval, !dbg !9775
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9775

if.end.5:                                         ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !9776, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.445, i32 0, i32 0)), !dbg !9777
  store %struct._object* null, %struct._object** %retval, !dbg !9778
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9778

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %6 = bitcast i8** %ip_addr to i8*, !dbg !9779
  call void @llvm.lifetime.end(i64 8, i8* %6) #1, !dbg !9779
  %7 = bitcast %struct.in_addr* %buf to i8*, !dbg !9779
  call void @llvm.lifetime.end(i64 4, i8* %7) #1, !dbg !9779
  %8 = load %struct._object*, %struct._object** %retval, !dbg !9779
  ret %struct._object* %8, !dbg !9779
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_inet_ntoa(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %packed_str = alloca i8*, align 8
  %addr_len = alloca i32, align 4
  %packed_addr = alloca %struct.in_addr, align 4
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1866, metadata !2310), !dbg !9780
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1867, metadata !2310), !dbg !9781
  %0 = bitcast i8** %packed_str to i8*, !dbg !9782
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !9782
  call void @llvm.dbg.declare(metadata i8** %packed_str, metadata !1868, metadata !2310), !dbg !9783
  %1 = bitcast i32* %addr_len to i8*, !dbg !9784
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !9784
  call void @llvm.dbg.declare(metadata i32* %addr_len, metadata !1869, metadata !2310), !dbg !9785
  %2 = bitcast %struct.in_addr* %packed_addr to i8*, !dbg !9786
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !9786
  call void @llvm.dbg.declare(metadata %struct.in_addr* %packed_addr, metadata !1870, metadata !2310), !dbg !9787
  %3 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9788, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.446, i32 0, i32 0), i8** %packed_str, i32* %addr_len), !dbg !9790
  %tobool = icmp ne i32 %call, 0, !dbg !9790
  br i1 %tobool, label %if.end, label %if.then, !dbg !9791

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9792
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9792

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %addr_len, align 4, !dbg !9794, !tbaa !3034
  %conv = sext i32 %4 to i64, !dbg !9794
  %cmp = icmp ne i64 %conv, 4, !dbg !9796
  br i1 %cmp, label %if.then.2, label %if.end.3, !dbg !9797

if.then.2:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !9798, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.447, i32 0, i32 0)), !dbg !9800
  store %struct._object* null, %struct._object** %retval, !dbg !9801
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9801

if.end.3:                                         ; preds = %if.end
  %6 = bitcast %struct.in_addr* %packed_addr to i8*, !dbg !9802
  %7 = load i8*, i8** %packed_str, align 8, !dbg !9803, !tbaa !2326
  %8 = load i32, i32* %addr_len, align 4, !dbg !9804, !tbaa !3034
  %conv4 = sext i32 %8 to i64, !dbg !9804
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %7, i64 %conv4, i32 1, i1 false), !dbg !9802
  %coerce.dive = getelementptr %struct.in_addr, %struct.in_addr* %packed_addr, i32 0, i32 0, !dbg !9805
  %9 = load i32, i32* %coerce.dive, align 4, !dbg !9805
  %call5 = call i8* @inet_ntoa(i32 %9) #1, !dbg !9805
  %call6 = call %struct._object* @PyUnicode_FromString(i8* %call5), !dbg !9806
  store %struct._object* %call6, %struct._object** %retval, !dbg !9807
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9807

cleanup:                                          ; preds = %if.end.3, %if.then.2, %if.then
  %10 = bitcast %struct.in_addr* %packed_addr to i8*, !dbg !9808
  call void @llvm.lifetime.end(i64 4, i8* %10) #1, !dbg !9808
  %11 = bitcast i32* %addr_len to i8*, !dbg !9808
  call void @llvm.lifetime.end(i64 4, i8* %11) #1, !dbg !9808
  %12 = bitcast i8** %packed_str to i8*, !dbg !9808
  call void @llvm.lifetime.end(i64 8, i8* %12) #1, !dbg !9808
  %13 = load %struct._object*, %struct._object** %retval, !dbg !9808
  ret %struct._object* %13, !dbg !9808
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_inet_pton(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %af = alloca i32, align 4
  %ip = alloca i8*, align 8
  %retval1 = alloca i32, align 4
  %packed = alloca [16 x i8], align 16
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1873, metadata !2310), !dbg !9809
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1874, metadata !2310), !dbg !9810
  %0 = bitcast i32* %af to i8*, !dbg !9811
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !9811
  call void @llvm.dbg.declare(metadata i32* %af, metadata !1875, metadata !2310), !dbg !9812
  %1 = bitcast i8** %ip to i8*, !dbg !9813
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !9813
  call void @llvm.dbg.declare(metadata i8** %ip, metadata !1876, metadata !2310), !dbg !9814
  %2 = bitcast i32* %retval1 to i8*, !dbg !9815
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !9815
  call void @llvm.dbg.declare(metadata i32* %retval1, metadata !1877, metadata !2310), !dbg !9816
  %3 = bitcast [16 x i8]* %packed to i8*, !dbg !9817
  call void @llvm.lifetime.start(i64 16, i8* %3) #1, !dbg !9817
  call void @llvm.dbg.declare(metadata [16 x i8]* %packed, metadata !1878, metadata !2310), !dbg !9818
  %4 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9819, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %4, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.448, i32 0, i32 0), i32* %af, i8** %ip), !dbg !9821
  %tobool = icmp ne i32 %call, 0, !dbg !9821
  br i1 %tobool, label %if.end, label %if.then, !dbg !9822

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9823
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9823

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %af, align 4, !dbg !9825, !tbaa !3034
  %6 = load i8*, i8** %ip, align 8, !dbg !9826, !tbaa !2326
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %packed, i32 0, i32 0, !dbg !9827
  %call2 = call i32 @inet_pton(i32 %5, i8* %6, i8* %arraydecay) #1, !dbg !9828
  store i32 %call2, i32* %retval1, align 4, !dbg !9829, !tbaa !3034
  %7 = load i32, i32* %retval1, align 4, !dbg !9830, !tbaa !3034
  %cmp = icmp slt i32 %7, 0, !dbg !9832
  br i1 %cmp, label %if.then.3, label %if.else, !dbg !9833

if.then.3:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !9834, !tbaa !2326
  %call4 = call %struct._object* @PyErr_SetFromErrno(%struct._object* %8), !dbg !9836
  store %struct._object* null, %struct._object** %retval, !dbg !9837
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9837

if.else:                                          ; preds = %if.end
  %9 = load i32, i32* %retval1, align 4, !dbg !9838, !tbaa !3034
  %cmp5 = icmp eq i32 %9, 0, !dbg !9840
  br i1 %cmp5, label %if.then.6, label %if.else.7, !dbg !9841

if.then.6:                                        ; preds = %if.else
  %10 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !9842, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %10, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.449, i32 0, i32 0)), !dbg !9844
  store %struct._object* null, %struct._object** %retval, !dbg !9845
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9845

if.else.7:                                        ; preds = %if.else
  %11 = load i32, i32* %af, align 4, !dbg !9846, !tbaa !3034
  %cmp8 = icmp eq i32 %11, 2, !dbg !9848
  br i1 %cmp8, label %if.then.9, label %if.else.12, !dbg !9849

if.then.9:                                        ; preds = %if.else.7
  %arraydecay10 = getelementptr inbounds [16 x i8], [16 x i8]* %packed, i32 0, i32 0, !dbg !9850
  %call11 = call %struct._object* @PyBytes_FromStringAndSize(i8* %arraydecay10, i64 4), !dbg !9852
  store %struct._object* %call11, %struct._object** %retval, !dbg !9853
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9853

if.else.12:                                       ; preds = %if.else.7
  %12 = load i32, i32* %af, align 4, !dbg !9854, !tbaa !3034
  %cmp13 = icmp eq i32 %12, 10, !dbg !9856
  br i1 %cmp13, label %if.then.14, label %if.else.17, !dbg !9857

if.then.14:                                       ; preds = %if.else.12
  %arraydecay15 = getelementptr inbounds [16 x i8], [16 x i8]* %packed, i32 0, i32 0, !dbg !9858
  %call16 = call %struct._object* @PyBytes_FromStringAndSize(i8* %arraydecay15, i64 16), !dbg !9860
  store %struct._object* %call16, %struct._object** %retval, !dbg !9861
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9861

if.else.17:                                       ; preds = %if.else.12
  %13 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !9862, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %13, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.339, i32 0, i32 0)), !dbg !9864
  store %struct._object* null, %struct._object** %retval, !dbg !9865
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9865

cleanup:                                          ; preds = %if.else.17, %if.then.14, %if.then.9, %if.then.6, %if.then.3, %if.then
  %14 = bitcast [16 x i8]* %packed to i8*, !dbg !9866
  call void @llvm.lifetime.end(i64 16, i8* %14) #1, !dbg !9866
  %15 = bitcast i32* %retval1 to i8*, !dbg !9866
  call void @llvm.lifetime.end(i64 4, i8* %15) #1, !dbg !9866
  %16 = bitcast i8** %ip to i8*, !dbg !9866
  call void @llvm.lifetime.end(i64 8, i8* %16) #1, !dbg !9866
  %17 = bitcast i32* %af to i8*, !dbg !9866
  call void @llvm.lifetime.end(i64 4, i8* %17) #1, !dbg !9866
  %18 = load %struct._object*, %struct._object** %retval, !dbg !9866
  ret %struct._object* %18, !dbg !9866
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_inet_ntop(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %af = alloca i32, align 4
  %packed = alloca i8*, align 8
  %len = alloca i32, align 4
  %retval1 = alloca i8*, align 8
  %ip = alloca [47 x i8], align 16
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1881, metadata !2310), !dbg !9867
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1882, metadata !2310), !dbg !9868
  %0 = bitcast i32* %af to i8*, !dbg !9869
  call void @llvm.lifetime.start(i64 4, i8* %0) #1, !dbg !9869
  call void @llvm.dbg.declare(metadata i32* %af, metadata !1883, metadata !2310), !dbg !9870
  %1 = bitcast i8** %packed to i8*, !dbg !9871
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !9871
  call void @llvm.dbg.declare(metadata i8** %packed, metadata !1884, metadata !2310), !dbg !9872
  %2 = bitcast i32* %len to i8*, !dbg !9873
  call void @llvm.lifetime.start(i64 4, i8* %2) #1, !dbg !9873
  call void @llvm.dbg.declare(metadata i32* %len, metadata !1885, metadata !2310), !dbg !9874
  %3 = bitcast i8** %retval1 to i8*, !dbg !9875
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !9875
  call void @llvm.dbg.declare(metadata i8** %retval1, metadata !1886, metadata !2310), !dbg !9876
  %4 = bitcast [47 x i8]* %ip to i8*, !dbg !9877
  call void @llvm.lifetime.start(i64 47, i8* %4) #1, !dbg !9877
  call void @llvm.dbg.declare(metadata [47 x i8]* %ip, metadata !1887, metadata !2310), !dbg !9878
  %arrayidx = getelementptr [47 x i8], [47 x i8]* %ip, i32 0, i64 0, !dbg !9879
  call void @llvm.memset.p0i8.i64(i8* %arrayidx, i8 0, i64 47, i32 1, i1 false), !dbg !9880
  %5 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9881, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %5, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.450, i32 0, i32 0), i32* %af, i8** %packed, i32* %len), !dbg !9883
  %tobool = icmp ne i32 %call, 0, !dbg !9883
  br i1 %tobool, label %if.end, label %if.then, !dbg !9884

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9885
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9885

if.end:                                           ; preds = %entry
  %6 = load i32, i32* %af, align 4, !dbg !9887, !tbaa !3034
  %cmp = icmp eq i32 %6, 2, !dbg !9889
  br i1 %cmp, label %if.then.2, label %if.else, !dbg !9890

if.then.2:                                        ; preds = %if.end
  %7 = load i32, i32* %len, align 4, !dbg !9891, !tbaa !3034
  %conv = sext i32 %7 to i64, !dbg !9891
  %cmp3 = icmp ne i64 %conv, 4, !dbg !9894
  br i1 %cmp3, label %if.then.5, label %if.end.6, !dbg !9895

if.then.5:                                        ; preds = %if.then.2
  %8 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !9896, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.451, i32 0, i32 0)), !dbg !9898
  store %struct._object* null, %struct._object** %retval, !dbg !9899
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9899

if.end.6:                                         ; preds = %if.then.2
  br label %if.end.18, !dbg !9900

if.else:                                          ; preds = %if.end
  %9 = load i32, i32* %af, align 4, !dbg !9901, !tbaa !3034
  %cmp7 = icmp eq i32 %9, 10, !dbg !9903
  br i1 %cmp7, label %if.then.9, label %if.else.15, !dbg !9904

if.then.9:                                        ; preds = %if.else
  %10 = load i32, i32* %len, align 4, !dbg !9905, !tbaa !3034
  %conv10 = sext i32 %10 to i64, !dbg !9905
  %cmp11 = icmp ne i64 %conv10, 16, !dbg !9908
  br i1 %cmp11, label %if.then.13, label %if.end.14, !dbg !9909

if.then.13:                                       ; preds = %if.then.9
  %11 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !9910, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %11, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.451, i32 0, i32 0)), !dbg !9912
  store %struct._object* null, %struct._object** %retval, !dbg !9913
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9913

if.end.14:                                        ; preds = %if.then.9
  br label %if.end.17, !dbg !9914

if.else.15:                                       ; preds = %if.else
  %12 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !9915, !tbaa !2326
  %13 = load i32, i32* %af, align 4, !dbg !9917, !tbaa !3034
  %call16 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %12, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.452, i32 0, i32 0), i32 %13), !dbg !9918
  store %struct._object* null, %struct._object** %retval, !dbg !9919
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9919

if.end.17:                                        ; preds = %if.end.14
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %if.end.6
  %14 = load i32, i32* %af, align 4, !dbg !9920, !tbaa !3034
  %15 = load i8*, i8** %packed, align 8, !dbg !9921, !tbaa !2326
  %arraydecay = getelementptr inbounds [47 x i8], [47 x i8]* %ip, i32 0, i32 0, !dbg !9922
  %call19 = call i8* @inet_ntop(i32 %14, i8* %15, i8* %arraydecay, i32 47) #1, !dbg !9923
  store i8* %call19, i8** %retval1, align 8, !dbg !9924, !tbaa !2326
  %16 = load i8*, i8** %retval1, align 8, !dbg !9925, !tbaa !2326
  %tobool20 = icmp ne i8* %16, null, !dbg !9925
  br i1 %tobool20, label %if.else.23, label %if.then.21, !dbg !9927

if.then.21:                                       ; preds = %if.end.18
  %17 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !9928, !tbaa !2326
  %call22 = call %struct._object* @PyErr_SetFromErrno(%struct._object* %17), !dbg !9930
  store %struct._object* null, %struct._object** %retval, !dbg !9931
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9931

if.else.23:                                       ; preds = %if.end.18
  %18 = load i8*, i8** %retval1, align 8, !dbg !9932, !tbaa !2326
  %call24 = call %struct._object* @PyUnicode_FromString(i8* %18), !dbg !9934
  store %struct._object* %call24, %struct._object** %retval, !dbg !9935
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !9935

cleanup:                                          ; preds = %if.else.23, %if.then.21, %if.else.15, %if.then.13, %if.then.5, %if.then
  %19 = bitcast [47 x i8]* %ip to i8*, !dbg !9936
  call void @llvm.lifetime.end(i64 47, i8* %19) #1, !dbg !9936
  %20 = bitcast i8** %retval1 to i8*, !dbg !9936
  call void @llvm.lifetime.end(i64 8, i8* %20) #1, !dbg !9936
  %21 = bitcast i32* %len to i8*, !dbg !9936
  call void @llvm.lifetime.end(i64 4, i8* %21) #1, !dbg !9936
  %22 = bitcast i8** %packed to i8*, !dbg !9936
  call void @llvm.lifetime.end(i64 8, i8* %22) #1, !dbg !9936
  %23 = bitcast i32* %af to i8*, !dbg !9936
  call void @llvm.lifetime.end(i64 4, i8* %23) #1, !dbg !9936
  %24 = load %struct._object*, %struct._object** %retval, !dbg !9936
  ret %struct._object* %24, !dbg !9936
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_getaddrinfo(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %hints = alloca %struct.addrinfo, align 8
  %res = alloca %struct.addrinfo*, align 8
  %res0 = alloca %struct.addrinfo*, align 8
  %hobj = alloca %struct._object*, align 8
  %pobj = alloca %struct._object*, align 8
  %pbuf = alloca [30 x i8], align 16
  %hptr = alloca i8*, align 8
  %pptr = alloca i8*, align 8
  %family = alloca i32, align 4
  %socktype = alloca i32, align 4
  %protocol = alloca i32, align 4
  %flags = alloca i32, align 4
  %error = alloca i32, align 4
  %all = alloca %struct._object*, align 8
  %idna = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %value = alloca i64, align 8
  %_save = alloca %struct._ts*, align 8
  %single = alloca %struct._object*, align 8
  %addr = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp98 = alloca %struct._object*, align 8
  %_py_xdecref_tmp118 = alloca %struct._object*, align 8
  %_py_decref_tmp123 = alloca %struct._object*, align 8
  %_py_xdecref_tmp142 = alloca %struct._object*, align 8
  %_py_decref_tmp147 = alloca %struct._object*, align 8
  %_py_xdecref_tmp163 = alloca %struct._object*, align 8
  %_py_decref_tmp168 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1893, metadata !2310), !dbg !9937
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1894, metadata !2310), !dbg !9938
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %kwargs.addr, metadata !1895, metadata !2310), !dbg !9939
  %0 = bitcast %struct.addrinfo* %hints to i8*, !dbg !9940
  call void @llvm.lifetime.start(i64 48, i8* %0) #1, !dbg !9940
  call void @llvm.dbg.declare(metadata %struct.addrinfo* %hints, metadata !1896, metadata !2310), !dbg !9941
  %1 = bitcast %struct.addrinfo** %res to i8*, !dbg !9940
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !9940
  call void @llvm.dbg.declare(metadata %struct.addrinfo** %res, metadata !1897, metadata !2310), !dbg !9942
  %2 = bitcast %struct.addrinfo** %res0 to i8*, !dbg !9943
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !9943
  call void @llvm.dbg.declare(metadata %struct.addrinfo** %res0, metadata !1898, metadata !2310), !dbg !9944
  store %struct.addrinfo* null, %struct.addrinfo** %res0, align 8, !dbg !9944, !tbaa !2326
  %3 = bitcast %struct._object** %hobj to i8*, !dbg !9945
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !9945
  call void @llvm.dbg.declare(metadata %struct._object** %hobj, metadata !1899, metadata !2310), !dbg !9946
  store %struct._object* null, %struct._object** %hobj, align 8, !dbg !9946, !tbaa !2326
  %4 = bitcast %struct._object** %pobj to i8*, !dbg !9947
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !9947
  call void @llvm.dbg.declare(metadata %struct._object** %pobj, metadata !1900, metadata !2310), !dbg !9948
  store %struct._object* null, %struct._object** %pobj, align 8, !dbg !9948, !tbaa !2326
  %5 = bitcast [30 x i8]* %pbuf to i8*, !dbg !9949
  call void @llvm.lifetime.start(i64 30, i8* %5) #1, !dbg !9949
  call void @llvm.dbg.declare(metadata [30 x i8]* %pbuf, metadata !1901, metadata !2310), !dbg !9950
  %6 = bitcast i8** %hptr to i8*, !dbg !9951
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !9951
  call void @llvm.dbg.declare(metadata i8** %hptr, metadata !1905, metadata !2310), !dbg !9952
  %7 = bitcast i8** %pptr to i8*, !dbg !9951
  call void @llvm.lifetime.start(i64 8, i8* %7) #1, !dbg !9951
  call void @llvm.dbg.declare(metadata i8** %pptr, metadata !1906, metadata !2310), !dbg !9953
  %8 = bitcast i32* %family to i8*, !dbg !9954
  call void @llvm.lifetime.start(i64 4, i8* %8) #1, !dbg !9954
  call void @llvm.dbg.declare(metadata i32* %family, metadata !1907, metadata !2310), !dbg !9955
  %9 = bitcast i32* %socktype to i8*, !dbg !9954
  call void @llvm.lifetime.start(i64 4, i8* %9) #1, !dbg !9954
  call void @llvm.dbg.declare(metadata i32* %socktype, metadata !1908, metadata !2310), !dbg !9956
  %10 = bitcast i32* %protocol to i8*, !dbg !9954
  call void @llvm.lifetime.start(i64 4, i8* %10) #1, !dbg !9954
  call void @llvm.dbg.declare(metadata i32* %protocol, metadata !1909, metadata !2310), !dbg !9957
  %11 = bitcast i32* %flags to i8*, !dbg !9954
  call void @llvm.lifetime.start(i64 4, i8* %11) #1, !dbg !9954
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1910, metadata !2310), !dbg !9958
  %12 = bitcast i32* %error to i8*, !dbg !9959
  call void @llvm.lifetime.start(i64 4, i8* %12) #1, !dbg !9959
  call void @llvm.dbg.declare(metadata i32* %error, metadata !1911, metadata !2310), !dbg !9960
  %13 = bitcast %struct._object** %all to i8*, !dbg !9961
  call void @llvm.lifetime.start(i64 8, i8* %13) #1, !dbg !9961
  call void @llvm.dbg.declare(metadata %struct._object** %all, metadata !1912, metadata !2310), !dbg !9962
  store %struct._object* null, %struct._object** %all, align 8, !dbg !9962, !tbaa !2326
  %14 = bitcast %struct._object** %idna to i8*, !dbg !9963
  call void @llvm.lifetime.start(i64 8, i8* %14) #1, !dbg !9963
  call void @llvm.dbg.declare(metadata %struct._object** %idna, metadata !1913, metadata !2310), !dbg !9964
  store %struct._object* null, %struct._object** %idna, align 8, !dbg !9964, !tbaa !2326
  store i32 0, i32* %flags, align 4, !dbg !9965, !tbaa !3034
  store i32 0, i32* %protocol, align 4, !dbg !9966, !tbaa !3034
  store i32 0, i32* %socktype, align 4, !dbg !9967, !tbaa !3034
  store i32 0, i32* %family, align 4, !dbg !9968, !tbaa !3034
  %15 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !9969, !tbaa !2326
  %16 = load %struct._object*, %struct._object** %kwargs.addr, align 8, !dbg !9971, !tbaa !2326
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %15, %struct._object* %16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.455, i32 0, i32 0), i8** getelementptr inbounds ([7 x i8*], [7 x i8*]* @socket_getaddrinfo.kwnames, i32 0, i32 0), %struct._object** %hobj, %struct._object** %pobj, i32* %family, i32* %socktype, i32* %protocol, i32* %flags), !dbg !9972
  %tobool = icmp ne i32 %call, 0, !dbg !9972
  br i1 %tobool, label %if.end, label %if.then, !dbg !9973

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !9974
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.186, !dbg !9974

if.end:                                           ; preds = %entry
  %17 = load %struct._object*, %struct._object** %hobj, align 8, !dbg !9976, !tbaa !2326
  %cmp = icmp eq %struct._object* %17, @_Py_NoneStruct, !dbg !9978
  br i1 %cmp, label %if.then.1, label %if.else, !dbg !9979

if.then.1:                                        ; preds = %if.end
  store i8* null, i8** %hptr, align 8, !dbg !9980, !tbaa !2326
  br label %if.end.18, !dbg !9982

if.else:                                          ; preds = %if.end
  %18 = load %struct._object*, %struct._object** %hobj, align 8, !dbg !9983, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1, !dbg !9985
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !9985, !tbaa !2318
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 19, !dbg !9986
  %20 = load i64, i64* %tp_flags, align 8, !dbg !9986, !tbaa !5047
  %and = and i64 %20, 268435456, !dbg !9987
  %cmp2 = icmp ne i64 %and, 0, !dbg !9988
  br i1 %cmp2, label %if.then.3, label %if.else.8, !dbg !9989

if.then.3:                                        ; preds = %if.else
  %21 = load %struct._object*, %struct._object** %hobj, align 8, !dbg !9990, !tbaa !2326
  %call4 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %21, %struct._Py_Identifier* @socket_getaddrinfo.PyId_encode, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.457, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.318, i32 0, i32 0)), !dbg !9992
  store %struct._object* %call4, %struct._object** %idna, align 8, !dbg !9993, !tbaa !2326
  %22 = load %struct._object*, %struct._object** %idna, align 8, !dbg !9994, !tbaa !2326
  %tobool5 = icmp ne %struct._object* %22, null, !dbg !9994
  br i1 %tobool5, label %if.end.7, label %if.then.6, !dbg !9996

if.then.6:                                        ; preds = %if.then.3
  store %struct._object* null, %struct._object** %retval, !dbg !9997
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.186, !dbg !9997

if.end.7:                                         ; preds = %if.then.3
  %23 = load %struct._object*, %struct._object** %idna, align 8, !dbg !9998, !tbaa !2326
  %24 = bitcast %struct._object* %23 to %struct.PyBytesObject*, !dbg !9999
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %24, i32 0, i32 2, !dbg !10000
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !10001
  store i8* %arraydecay, i8** %hptr, align 8, !dbg !10002, !tbaa !2326
  br label %if.end.17, !dbg !10003

if.else.8:                                        ; preds = %if.else
  %25 = load %struct._object*, %struct._object** %hobj, align 8, !dbg !10004, !tbaa !2326
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1, !dbg !10006
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8, !dbg !10006, !tbaa !2318
  %tp_flags10 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 19, !dbg !10007
  %27 = load i64, i64* %tp_flags10, align 8, !dbg !10007, !tbaa !5047
  %and11 = and i64 %27, 134217728, !dbg !10008
  %cmp12 = icmp ne i64 %and11, 0, !dbg !10009
  br i1 %cmp12, label %if.then.13, label %if.else.15, !dbg !10010

if.then.13:                                       ; preds = %if.else.8
  %28 = load %struct._object*, %struct._object** %hobj, align 8, !dbg !10011, !tbaa !2326
  %call14 = call i8* @PyBytes_AsString(%struct._object* %28), !dbg !10013
  store i8* %call14, i8** %hptr, align 8, !dbg !10014, !tbaa !2326
  br label %if.end.16, !dbg !10015

if.else.15:                                       ; preds = %if.else.8
  %29 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !10016, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %29, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.458, i32 0, i32 0)), !dbg !10018
  store %struct._object* null, %struct._object** %retval, !dbg !10019
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.186, !dbg !10019

if.end.16:                                        ; preds = %if.then.13
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.end.7
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %if.then.1
  %30 = load %struct._object*, %struct._object** %pobj, align 8, !dbg !10020, !tbaa !2326
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !10021
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8, !dbg !10021, !tbaa !2318
  %cmp20 = icmp eq %struct._typeobject* %31, @PyLong_Type, !dbg !10022
  br i1 %cmp20, label %if.then.21, label %if.else.31, !dbg !10023

if.then.21:                                       ; preds = %if.end.18
  %32 = bitcast i64* %value to i8*, !dbg !10024
  call void @llvm.lifetime.start(i64 8, i8* %32) #1, !dbg !10024
  call void @llvm.dbg.declare(metadata i64* %value, metadata !1914, metadata !2310), !dbg !10025
  %33 = load %struct._object*, %struct._object** %pobj, align 8, !dbg !10026, !tbaa !2326
  %call22 = call i64 @PyLong_AsLong(%struct._object* %33), !dbg !10027
  store i64 %call22, i64* %value, align 8, !dbg !10025, !tbaa !2963
  %34 = load i64, i64* %value, align 8, !dbg !10028, !tbaa !2963
  %cmp23 = icmp eq i64 %34, -1, !dbg !10030
  br i1 %cmp23, label %land.lhs.true, label %if.end.27, !dbg !10031

land.lhs.true:                                    ; preds = %if.then.21
  %call24 = call %struct._object* @PyErr_Occurred(), !dbg !10032
  %tobool25 = icmp ne %struct._object* %call24, null, !dbg !10032
  br i1 %tobool25, label %if.then.26, label %if.end.27, !dbg !10034

if.then.26:                                       ; preds = %land.lhs.true
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10035

if.end.27:                                        ; preds = %land.lhs.true, %if.then.21
  %arraydecay28 = getelementptr inbounds [30 x i8], [30 x i8]* %pbuf, i32 0, i32 0, !dbg !10036
  %35 = load i64, i64* %value, align 8, !dbg !10037, !tbaa !2963
  %call29 = call i32 (i8*, i64, i8*, ...) @PyOS_snprintf(i8* %arraydecay28, i64 30, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.459, i32 0, i32 0), i64 %35), !dbg !10038
  %arraydecay30 = getelementptr inbounds [30 x i8], [30 x i8]* %pbuf, i32 0, i32 0, !dbg !10039
  store i8* %arraydecay30, i8** %pptr, align 8, !dbg !10040, !tbaa !2326
  store i32 0, i32* %cleanup.dest.slot, !dbg !10041
  br label %cleanup, !dbg !10041

cleanup:                                          ; preds = %if.end.27, %if.then.26
  %36 = bitcast i64* %value to i8*, !dbg !10042
  call void @llvm.lifetime.end(i64 8, i8* %36) #1, !dbg !10042
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock

NodeBlock:                                        ; preds = %cleanup
  %Pivot = icmp slt i32 %cleanup.dest, 2
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %cleanup.dest, 2
  br i1 %SwitchLeaf2, label %err, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %if.end.56, !dbg !10044

if.else.31:                                       ; preds = %if.end.18
  %37 = load %struct._object*, %struct._object** %pobj, align 8, !dbg !10045, !tbaa !2326
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1, !dbg !10047
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8, !dbg !10047, !tbaa !2318
  %tp_flags33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 19, !dbg !10048
  %39 = load i64, i64* %tp_flags33, align 8, !dbg !10048, !tbaa !5047
  %and34 = and i64 %39, 268435456, !dbg !10049
  %cmp35 = icmp ne i64 %and34, 0, !dbg !10050
  br i1 %cmp35, label %if.then.36, label %if.else.41, !dbg !10051

if.then.36:                                       ; preds = %if.else.31
  %40 = load %struct._object*, %struct._object** %pobj, align 8, !dbg !10052, !tbaa !2326
  %call37 = call i8* @PyUnicode_AsUTF8(%struct._object* %40), !dbg !10054
  store i8* %call37, i8** %pptr, align 8, !dbg !10055, !tbaa !2326
  %41 = load i8*, i8** %pptr, align 8, !dbg !10056, !tbaa !2326
  %cmp38 = icmp eq i8* %41, null, !dbg !10058
  br i1 %cmp38, label %if.then.39, label %if.end.40, !dbg !10059

if.then.39:                                       ; preds = %if.then.36
  br label %err, !dbg !10060

if.end.40:                                        ; preds = %if.then.36
  br label %if.end.55, !dbg !10061

if.else.41:                                       ; preds = %if.else.31
  %42 = load %struct._object*, %struct._object** %pobj, align 8, !dbg !10062, !tbaa !2326
  %ob_type42 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1, !dbg !10064
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type42, align 8, !dbg !10064, !tbaa !2318
  %tp_flags43 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 19, !dbg !10065
  %44 = load i64, i64* %tp_flags43, align 8, !dbg !10065, !tbaa !5047
  %and44 = and i64 %44, 134217728, !dbg !10066
  %cmp45 = icmp ne i64 %and44, 0, !dbg !10067
  br i1 %cmp45, label %if.then.46, label %if.else.49, !dbg !10068

if.then.46:                                       ; preds = %if.else.41
  %45 = load %struct._object*, %struct._object** %pobj, align 8, !dbg !10069, !tbaa !2326
  %46 = bitcast %struct._object* %45 to %struct.PyBytesObject*, !dbg !10071
  %ob_sval47 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %46, i32 0, i32 2, !dbg !10072
  %arraydecay48 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval47, i32 0, i32 0, !dbg !10073
  store i8* %arraydecay48, i8** %pptr, align 8, !dbg !10074, !tbaa !2326
  br label %if.end.54, !dbg !10075

if.else.49:                                       ; preds = %if.else.41
  %47 = load %struct._object*, %struct._object** %pobj, align 8, !dbg !10076, !tbaa !2326
  %cmp50 = icmp eq %struct._object* %47, @_Py_NoneStruct, !dbg !10078
  br i1 %cmp50, label %if.then.51, label %if.else.52, !dbg !10079

if.then.51:                                       ; preds = %if.else.49
  store i8* null, i8** %pptr, align 8, !dbg !10080, !tbaa !2326
  br label %if.end.53, !dbg !10082

if.else.52:                                       ; preds = %if.else.49
  %48 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !10083, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %48, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.460, i32 0, i32 0)), !dbg !10085
  br label %err, !dbg !10086

if.end.53:                                        ; preds = %if.then.51
  br label %if.end.54

if.end.54:                                        ; preds = %if.end.53, %if.then.46
  br label %if.end.55

if.end.55:                                        ; preds = %if.end.54, %if.end.40
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.55, %cleanup.cont
  %49 = bitcast %struct.addrinfo* %hints to i8*, !dbg !10087
  call void @llvm.memset.p0i8.i64(i8* %49, i8 0, i64 48, i32 8, i1 false), !dbg !10087
  %50 = load i32, i32* %family, align 4, !dbg !10088, !tbaa !3034
  %ai_family = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %hints, i32 0, i32 1, !dbg !10089
  store i32 %50, i32* %ai_family, align 4, !dbg !10090, !tbaa !7247
  %51 = load i32, i32* %socktype, align 4, !dbg !10091, !tbaa !3034
  %ai_socktype = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %hints, i32 0, i32 2, !dbg !10092
  store i32 %51, i32* %ai_socktype, align 4, !dbg !10093, !tbaa !7251
  %52 = load i32, i32* %protocol, align 4, !dbg !10094, !tbaa !3034
  %ai_protocol = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %hints, i32 0, i32 3, !dbg !10095
  store i32 %52, i32* %ai_protocol, align 4, !dbg !10096, !tbaa !10097
  %53 = load i32, i32* %flags, align 4, !dbg !10098, !tbaa !3034
  %ai_flags = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %hints, i32 0, i32 0, !dbg !10099
  store i32 %53, i32* %ai_flags, align 4, !dbg !10100, !tbaa !7254
  %54 = bitcast %struct._ts** %_save to i8*, !dbg !10101
  call void @llvm.lifetime.start(i64 8, i8* %54) #1, !dbg !10101
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1917, metadata !2310), !dbg !10102
  %call57 = call %struct._ts* @PyEval_SaveThread(), !dbg !10103
  store %struct._ts* %call57, %struct._ts** %_save, align 8, !dbg !10104, !tbaa !2326
  %55 = load i8*, i8** %hptr, align 8, !dbg !10105, !tbaa !2326
  %56 = load i8*, i8** %pptr, align 8, !dbg !10106, !tbaa !2326
  %call58 = call i32 @getaddrinfo(i8* %55, i8* %56, %struct.addrinfo* %hints, %struct.addrinfo** %res0), !dbg !10107
  store i32 %call58, i32* %error, align 4, !dbg !10108, !tbaa !3034
  %57 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !10109, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %57), !dbg !10110
  %58 = bitcast %struct._ts** %_save to i8*, !dbg !10111
  call void @llvm.lifetime.end(i64 8, i8* %58) #1, !dbg !10111
  %59 = load i32, i32* %error, align 4, !dbg !10112, !tbaa !3034
  %tobool59 = icmp ne i32 %59, 0, !dbg !10112
  br i1 %tobool59, label %if.then.60, label %if.end.62, !dbg !10114

if.then.60:                                       ; preds = %if.end.56
  %60 = load i32, i32* %error, align 4, !dbg !10115, !tbaa !3034
  %call61 = call %struct._object* @set_gaierror(i32 %60), !dbg !10117
  br label %err, !dbg !10118

if.end.62:                                        ; preds = %if.end.56
  %call63 = call %struct._object* @PyList_New(i64 0), !dbg !10119
  store %struct._object* %call63, %struct._object** %all, align 8, !dbg !10121, !tbaa !2326
  %cmp64 = icmp eq %struct._object* %call63, null, !dbg !10122
  br i1 %cmp64, label %if.then.65, label %if.end.66, !dbg !10123

if.then.65:                                       ; preds = %if.end.62
  br label %err, !dbg !10124

if.end.66:                                        ; preds = %if.end.62
  %61 = load %struct.addrinfo*, %struct.addrinfo** %res0, align 8, !dbg !10125, !tbaa !2326
  store %struct.addrinfo* %61, %struct.addrinfo** %res, align 8, !dbg !10126, !tbaa !2326
  br label %for.cond, !dbg !10127

for.cond:                                         ; preds = %for.inc, %if.end.66
  %62 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10128, !tbaa !2326
  %tobool67 = icmp ne %struct.addrinfo* %62, null, !dbg !10131
  br i1 %tobool67, label %for.body, label %for.end, !dbg !10131

for.body:                                         ; preds = %for.cond
  %63 = bitcast %struct._object** %single to i8*, !dbg !10132
  call void @llvm.lifetime.start(i64 8, i8* %63) #1, !dbg !10132
  call void @llvm.dbg.declare(metadata %struct._object** %single, metadata !1919, metadata !2310), !dbg !10133
  %64 = bitcast %struct._object** %addr to i8*, !dbg !10134
  call void @llvm.lifetime.start(i64 8, i8* %64) #1, !dbg !10134
  call void @llvm.dbg.declare(metadata %struct._object** %addr, metadata !1923, metadata !2310), !dbg !10135
  %65 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10136, !tbaa !2326
  %ai_addr = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %65, i32 0, i32 5, !dbg !10137
  %66 = load %struct.sockaddr*, %struct.sockaddr** %ai_addr, align 8, !dbg !10137, !tbaa !7309
  %67 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10138, !tbaa !2326
  %ai_addrlen = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %67, i32 0, i32 4, !dbg !10139
  %68 = load i32, i32* %ai_addrlen, align 4, !dbg !10139, !tbaa !7297
  %conv = zext i32 %68 to i64, !dbg !10138
  %69 = load i32, i32* %protocol, align 4, !dbg !10140, !tbaa !3034
  %call68 = call %struct._object* @makesockaddr(i32 -1, %struct.sockaddr* %66, i64 %conv, i32 %69), !dbg !10141
  store %struct._object* %call68, %struct._object** %addr, align 8, !dbg !10135, !tbaa !2326
  %70 = load %struct._object*, %struct._object** %addr, align 8, !dbg !10142, !tbaa !2326
  %cmp69 = icmp eq %struct._object* %70, null, !dbg !10144
  br i1 %cmp69, label %if.then.71, label %if.end.72, !dbg !10145

if.then.71:                                       ; preds = %for.body
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.113, !dbg !10146

if.end.72:                                        ; preds = %for.body
  %71 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10147, !tbaa !2326
  %ai_family73 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %71, i32 0, i32 1, !dbg !10148
  %72 = load i32, i32* %ai_family73, align 4, !dbg !10148, !tbaa !7247
  %73 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10149, !tbaa !2326
  %ai_socktype74 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %73, i32 0, i32 2, !dbg !10150
  %74 = load i32, i32* %ai_socktype74, align 4, !dbg !10150, !tbaa !7251
  %75 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10151, !tbaa !2326
  %ai_protocol75 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %75, i32 0, i32 3, !dbg !10152
  %76 = load i32, i32* %ai_protocol75, align 4, !dbg !10152, !tbaa !10097
  %77 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10153, !tbaa !2326
  %ai_canonname = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %77, i32 0, i32 6, !dbg !10154
  %78 = load i8*, i8** %ai_canonname, align 8, !dbg !10154, !tbaa !10155
  %tobool76 = icmp ne i8* %78, null, !dbg !10153
  br i1 %tobool76, label %cond.true, label %cond.false, !dbg !10153

cond.true:                                        ; preds = %if.end.72
  %79 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10156, !tbaa !2326
  %ai_canonname77 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %79, i32 0, i32 6, !dbg !10158
  %80 = load i8*, i8** %ai_canonname77, align 8, !dbg !10158, !tbaa !10155
  br label %cond.end, !dbg !10153

cond.false:                                       ; preds = %if.end.72
  br label %cond.end, !dbg !10159

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %80, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.305, i32 0, i32 0), %cond.false ], !dbg !10153
  %81 = load %struct._object*, %struct._object** %addr, align 8, !dbg !10161, !tbaa !2326
  %call78 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.461, i32 0, i32 0), i32 %72, i32 %74, i32 %76, i8* %cond, %struct._object* %81), !dbg !10162
  store %struct._object* %call78, %struct._object** %single, align 8, !dbg !10163, !tbaa !2326
  br label %do.body, !dbg !10164

do.body:                                          ; preds = %cond.end
  %82 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10165
  call void @llvm.lifetime.start(i64 8, i8* %82) #1, !dbg !10165
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1924, metadata !2310), !dbg !10167
  %83 = load %struct._object*, %struct._object** %addr, align 8, !dbg !10168, !tbaa !2326
  store %struct._object* %83, %struct._object** %_py_decref_tmp, align 8, !dbg !10167, !tbaa !2326
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10169, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 0, !dbg !10171
  %85 = load i64, i64* %ob_refcnt, align 8, !dbg !10172, !tbaa !2335
  %dec = add i64 %85, -1, !dbg !10172
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !10172, !tbaa !2335
  %cmp79 = icmp ne i64 %dec, 0, !dbg !10173
  br i1 %cmp79, label %if.then.81, label %if.else.82, !dbg !10174

if.then.81:                                       ; preds = %do.body
  br label %if.end.84, !dbg !10175

if.else.82:                                       ; preds = %do.body
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10177, !tbaa !2326
  %ob_type83 = getelementptr inbounds %struct._object, %struct._object* %86, i32 0, i32 1, !dbg !10179
  %87 = load %struct._typeobject*, %struct._typeobject** %ob_type83, align 8, !dbg !10179, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %87, i32 0, i32 4, !dbg !10180
  %88 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !10180, !tbaa !3442
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10181, !tbaa !2326
  call void %88(%struct._object* %89), !dbg !10182
  br label %if.end.84

if.end.84:                                        ; preds = %if.else.82, %if.then.81
  %90 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10183
  call void @llvm.lifetime.end(i64 8, i8* %90) #1, !dbg !10183
  br label %do.cond, !dbg !10185

do.cond:                                          ; preds = %if.end.84
  br label %do.end, !dbg !10186

do.end:                                           ; preds = %do.cond
  %91 = load %struct._object*, %struct._object** %single, align 8, !dbg !10188, !tbaa !2326
  %cmp85 = icmp eq %struct._object* %91, null, !dbg !10190
  br i1 %cmp85, label %if.then.87, label %if.end.88, !dbg !10191

if.then.87:                                       ; preds = %do.end
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.113, !dbg !10192

if.end.88:                                        ; preds = %do.end
  %92 = load %struct._object*, %struct._object** %all, align 8, !dbg !10193, !tbaa !2326
  %93 = load %struct._object*, %struct._object** %single, align 8, !dbg !10195, !tbaa !2326
  %call89 = call i32 @PyList_Append(%struct._object* %92, %struct._object* %93), !dbg !10196
  %tobool90 = icmp ne i32 %call89, 0, !dbg !10196
  br i1 %tobool90, label %if.then.91, label %if.end.92, !dbg !10197

if.then.91:                                       ; preds = %if.end.88
  store i32 2, i32* %cleanup.dest.slot
  br label %cleanup.113, !dbg !10198

if.end.92:                                        ; preds = %if.end.88
  br label %do.body.93, !dbg !10199

do.body.93:                                       ; preds = %if.end.92
  %94 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !10200
  call void @llvm.lifetime.start(i64 8, i8* %94) #1, !dbg !10200
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1926, metadata !2310), !dbg !10202
  %95 = load %struct._object*, %struct._object** %single, align 8, !dbg !10203, !tbaa !2326
  store %struct._object* %95, %struct._object** %_py_xdecref_tmp, align 8, !dbg !10202, !tbaa !2326
  %96 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !10204, !tbaa !2326
  %cmp94 = icmp ne %struct._object* %96, null, !dbg !10205
  br i1 %cmp94, label %if.then.96, label %if.end.110, !dbg !10206

if.then.96:                                       ; preds = %do.body.93
  br label %do.body.97, !dbg !10207

do.body.97:                                       ; preds = %if.then.96
  %97 = bitcast %struct._object** %_py_decref_tmp98 to i8*, !dbg !10209
  call void @llvm.lifetime.start(i64 8, i8* %97) #1, !dbg !10209
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp98, metadata !1928, metadata !2310), !dbg !10211
  %98 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !10212, !tbaa !2326
  store %struct._object* %98, %struct._object** %_py_decref_tmp98, align 8, !dbg !10211, !tbaa !2326
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp98, align 8, !dbg !10213, !tbaa !2326
  %ob_refcnt99 = getelementptr inbounds %struct._object, %struct._object* %99, i32 0, i32 0, !dbg !10215
  %100 = load i64, i64* %ob_refcnt99, align 8, !dbg !10216, !tbaa !2335
  %dec100 = add i64 %100, -1, !dbg !10216
  store i64 %dec100, i64* %ob_refcnt99, align 8, !dbg !10216, !tbaa !2335
  %cmp101 = icmp ne i64 %dec100, 0, !dbg !10217
  br i1 %cmp101, label %if.then.103, label %if.else.104, !dbg !10218

if.then.103:                                      ; preds = %do.body.97
  br label %if.end.107, !dbg !10219

if.else.104:                                      ; preds = %do.body.97
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp98, align 8, !dbg !10221, !tbaa !2326
  %ob_type105 = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 1, !dbg !10223
  %102 = load %struct._typeobject*, %struct._typeobject** %ob_type105, align 8, !dbg !10223, !tbaa !2318
  %tp_dealloc106 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %102, i32 0, i32 4, !dbg !10224
  %103 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc106, align 8, !dbg !10224, !tbaa !3442
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp98, align 8, !dbg !10225, !tbaa !2326
  call void %103(%struct._object* %104), !dbg !10226
  br label %if.end.107

if.end.107:                                       ; preds = %if.else.104, %if.then.103
  %105 = bitcast %struct._object** %_py_decref_tmp98 to i8*, !dbg !10227
  call void @llvm.lifetime.end(i64 8, i8* %105) #1, !dbg !10227
  br label %do.cond.108, !dbg !10229

do.cond.108:                                      ; preds = %if.end.107
  br label %do.end.109, !dbg !10230

do.end.109:                                       ; preds = %do.cond.108
  br label %if.end.110, !dbg !10232

if.end.110:                                       ; preds = %do.end.109, %do.body.93
  %106 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !10234
  call void @llvm.lifetime.end(i64 8, i8* %106) #1, !dbg !10234
  br label %do.cond.111, !dbg !10237

do.cond.111:                                      ; preds = %if.end.110
  br label %do.end.112, !dbg !10238

do.end.112:                                       ; preds = %do.cond.111
  store i32 0, i32* %cleanup.dest.slot, !dbg !10240
  br label %cleanup.113, !dbg !10240

cleanup.113:                                      ; preds = %do.end.112, %if.then.91, %if.then.87, %if.then.71
  %107 = bitcast %struct._object** %addr to i8*, !dbg !10241
  call void @llvm.lifetime.end(i64 8, i8* %107) #1, !dbg !10241
  %108 = bitcast %struct._object** %single to i8*, !dbg !10241
  call void @llvm.lifetime.end(i64 8, i8* %108) #1, !dbg !10241
  %cleanup.dest.115 = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock.8

NodeBlock.8:                                      ; preds = %cleanup.113
  %Pivot.9 = icmp slt i32 %cleanup.dest.115, 2
  br i1 %Pivot.9, label %LeafBlock.4, label %LeafBlock.6

LeafBlock.6:                                      ; preds = %NodeBlock.8
  %SwitchLeaf7 = icmp eq i32 %cleanup.dest.115, 2
  br i1 %SwitchLeaf7, label %err, label %NewDefault.3

LeafBlock.4:                                      ; preds = %NodeBlock.8
  %SwitchLeaf5 = icmp eq i32 %cleanup.dest.115, 0
  br i1 %SwitchLeaf5, label %cleanup.cont.116, label %NewDefault.3

cleanup.cont.116:                                 ; preds = %LeafBlock.4
  br label %for.inc, !dbg !10242

for.inc:                                          ; preds = %cleanup.cont.116
  %109 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10243, !tbaa !2326
  %ai_next = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %109, i32 0, i32 7, !dbg !10244
  %110 = load %struct.addrinfo*, %struct.addrinfo** %ai_next, align 8, !dbg !10244, !tbaa !7286
  store %struct.addrinfo* %110, %struct.addrinfo** %res, align 8, !dbg !10245, !tbaa !2326
  br label %for.cond, !dbg !10246

for.end:                                          ; preds = %for.cond
  br label %do.body.117, !dbg !10247

do.body.117:                                      ; preds = %for.end
  %111 = bitcast %struct._object** %_py_xdecref_tmp118 to i8*, !dbg !10248
  call void @llvm.lifetime.start(i64 8, i8* %111) #1, !dbg !10248
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp118, metadata !1931, metadata !2310), !dbg !10250
  %112 = load %struct._object*, %struct._object** %idna, align 8, !dbg !10251, !tbaa !2326
  store %struct._object* %112, %struct._object** %_py_xdecref_tmp118, align 8, !dbg !10250, !tbaa !2326
  %113 = load %struct._object*, %struct._object** %_py_xdecref_tmp118, align 8, !dbg !10252, !tbaa !2326
  %cmp119 = icmp ne %struct._object* %113, null, !dbg !10253
  br i1 %cmp119, label %if.then.121, label %if.end.135, !dbg !10254

if.then.121:                                      ; preds = %do.body.117
  br label %do.body.122, !dbg !10255

do.body.122:                                      ; preds = %if.then.121
  %114 = bitcast %struct._object** %_py_decref_tmp123 to i8*, !dbg !10257
  call void @llvm.lifetime.start(i64 8, i8* %114) #1, !dbg !10257
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp123, metadata !1933, metadata !2310), !dbg !10259
  %115 = load %struct._object*, %struct._object** %_py_xdecref_tmp118, align 8, !dbg !10260, !tbaa !2326
  store %struct._object* %115, %struct._object** %_py_decref_tmp123, align 8, !dbg !10259, !tbaa !2326
  %116 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8, !dbg !10261, !tbaa !2326
  %ob_refcnt124 = getelementptr inbounds %struct._object, %struct._object* %116, i32 0, i32 0, !dbg !10263
  %117 = load i64, i64* %ob_refcnt124, align 8, !dbg !10264, !tbaa !2335
  %dec125 = add i64 %117, -1, !dbg !10264
  store i64 %dec125, i64* %ob_refcnt124, align 8, !dbg !10264, !tbaa !2335
  %cmp126 = icmp ne i64 %dec125, 0, !dbg !10265
  br i1 %cmp126, label %if.then.128, label %if.else.129, !dbg !10266

if.then.128:                                      ; preds = %do.body.122
  br label %if.end.132, !dbg !10267

if.else.129:                                      ; preds = %do.body.122
  %118 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8, !dbg !10269, !tbaa !2326
  %ob_type130 = getelementptr inbounds %struct._object, %struct._object* %118, i32 0, i32 1, !dbg !10271
  %119 = load %struct._typeobject*, %struct._typeobject** %ob_type130, align 8, !dbg !10271, !tbaa !2318
  %tp_dealloc131 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %119, i32 0, i32 4, !dbg !10272
  %120 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc131, align 8, !dbg !10272, !tbaa !3442
  %121 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8, !dbg !10273, !tbaa !2326
  call void %120(%struct._object* %121), !dbg !10274
  br label %if.end.132

if.end.132:                                       ; preds = %if.else.129, %if.then.128
  %122 = bitcast %struct._object** %_py_decref_tmp123 to i8*, !dbg !10275
  call void @llvm.lifetime.end(i64 8, i8* %122) #1, !dbg !10275
  br label %do.cond.133, !dbg !10277

do.cond.133:                                      ; preds = %if.end.132
  br label %do.end.134, !dbg !10278

do.end.134:                                       ; preds = %do.cond.133
  br label %if.end.135, !dbg !10280

if.end.135:                                       ; preds = %do.end.134, %do.body.117
  %123 = bitcast %struct._object** %_py_xdecref_tmp118 to i8*, !dbg !10282
  call void @llvm.lifetime.end(i64 8, i8* %123) #1, !dbg !10282
  br label %do.cond.136, !dbg !10285

do.cond.136:                                      ; preds = %if.end.135
  br label %do.end.137, !dbg !10286

do.end.137:                                       ; preds = %do.cond.136
  %124 = load %struct.addrinfo*, %struct.addrinfo** %res0, align 8, !dbg !10288, !tbaa !2326
  %tobool138 = icmp ne %struct.addrinfo* %124, null, !dbg !10288
  br i1 %tobool138, label %if.then.139, label %if.end.140, !dbg !10290

if.then.139:                                      ; preds = %do.end.137
  %125 = load %struct.addrinfo*, %struct.addrinfo** %res0, align 8, !dbg !10291, !tbaa !2326
  call void @freeaddrinfo(%struct.addrinfo* %125) #1, !dbg !10292
  br label %if.end.140, !dbg !10292

if.end.140:                                       ; preds = %if.then.139, %do.end.137
  %126 = load %struct._object*, %struct._object** %all, align 8, !dbg !10293, !tbaa !2326
  store %struct._object* %126, %struct._object** %retval, !dbg !10294
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.186, !dbg !10294

err:                                              ; preds = %LeafBlock.6, %LeafBlock.1, %if.then.65, %if.then.60, %if.else.52, %if.then.39
  br label %do.body.141, !dbg !10295

do.body.141:                                      ; preds = %err
  %127 = bitcast %struct._object** %_py_xdecref_tmp142 to i8*, !dbg !10296
  call void @llvm.lifetime.start(i64 8, i8* %127) #1, !dbg !10296
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp142, metadata !1936, metadata !2310), !dbg !10298
  %128 = load %struct._object*, %struct._object** %all, align 8, !dbg !10299, !tbaa !2326
  store %struct._object* %128, %struct._object** %_py_xdecref_tmp142, align 8, !dbg !10298, !tbaa !2326
  %129 = load %struct._object*, %struct._object** %_py_xdecref_tmp142, align 8, !dbg !10300, !tbaa !2326
  %cmp143 = icmp ne %struct._object* %129, null, !dbg !10301
  br i1 %cmp143, label %if.then.145, label %if.end.159, !dbg !10302

if.then.145:                                      ; preds = %do.body.141
  br label %do.body.146, !dbg !10303

do.body.146:                                      ; preds = %if.then.145
  %130 = bitcast %struct._object** %_py_decref_tmp147 to i8*, !dbg !10305
  call void @llvm.lifetime.start(i64 8, i8* %130) #1, !dbg !10305
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp147, metadata !1938, metadata !2310), !dbg !10307
  %131 = load %struct._object*, %struct._object** %_py_xdecref_tmp142, align 8, !dbg !10308, !tbaa !2326
  store %struct._object* %131, %struct._object** %_py_decref_tmp147, align 8, !dbg !10307, !tbaa !2326
  %132 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8, !dbg !10309, !tbaa !2326
  %ob_refcnt148 = getelementptr inbounds %struct._object, %struct._object* %132, i32 0, i32 0, !dbg !10311
  %133 = load i64, i64* %ob_refcnt148, align 8, !dbg !10312, !tbaa !2335
  %dec149 = add i64 %133, -1, !dbg !10312
  store i64 %dec149, i64* %ob_refcnt148, align 8, !dbg !10312, !tbaa !2335
  %cmp150 = icmp ne i64 %dec149, 0, !dbg !10313
  br i1 %cmp150, label %if.then.152, label %if.else.153, !dbg !10314

if.then.152:                                      ; preds = %do.body.146
  br label %if.end.156, !dbg !10315

if.else.153:                                      ; preds = %do.body.146
  %134 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8, !dbg !10317, !tbaa !2326
  %ob_type154 = getelementptr inbounds %struct._object, %struct._object* %134, i32 0, i32 1, !dbg !10319
  %135 = load %struct._typeobject*, %struct._typeobject** %ob_type154, align 8, !dbg !10319, !tbaa !2318
  %tp_dealloc155 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %135, i32 0, i32 4, !dbg !10320
  %136 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc155, align 8, !dbg !10320, !tbaa !3442
  %137 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8, !dbg !10321, !tbaa !2326
  call void %136(%struct._object* %137), !dbg !10322
  br label %if.end.156

if.end.156:                                       ; preds = %if.else.153, %if.then.152
  %138 = bitcast %struct._object** %_py_decref_tmp147 to i8*, !dbg !10323
  call void @llvm.lifetime.end(i64 8, i8* %138) #1, !dbg !10323
  br label %do.cond.157, !dbg !10325

do.cond.157:                                      ; preds = %if.end.156
  br label %do.end.158, !dbg !10326

do.end.158:                                       ; preds = %do.cond.157
  br label %if.end.159, !dbg !10328

if.end.159:                                       ; preds = %do.end.158, %do.body.141
  %139 = bitcast %struct._object** %_py_xdecref_tmp142 to i8*, !dbg !10330
  call void @llvm.lifetime.end(i64 8, i8* %139) #1, !dbg !10330
  br label %do.cond.160, !dbg !10331

do.cond.160:                                      ; preds = %if.end.159
  br label %do.end.161, !dbg !10332

do.end.161:                                       ; preds = %do.cond.160
  br label %do.body.162, !dbg !10334

do.body.162:                                      ; preds = %do.end.161
  %140 = bitcast %struct._object** %_py_xdecref_tmp163 to i8*, !dbg !10335
  call void @llvm.lifetime.start(i64 8, i8* %140) #1, !dbg !10335
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp163, metadata !1941, metadata !2310), !dbg !10337
  %141 = load %struct._object*, %struct._object** %idna, align 8, !dbg !10338, !tbaa !2326
  store %struct._object* %141, %struct._object** %_py_xdecref_tmp163, align 8, !dbg !10337, !tbaa !2326
  %142 = load %struct._object*, %struct._object** %_py_xdecref_tmp163, align 8, !dbg !10339, !tbaa !2326
  %cmp164 = icmp ne %struct._object* %142, null, !dbg !10340
  br i1 %cmp164, label %if.then.166, label %if.end.180, !dbg !10341

if.then.166:                                      ; preds = %do.body.162
  br label %do.body.167, !dbg !10342

do.body.167:                                      ; preds = %if.then.166
  %143 = bitcast %struct._object** %_py_decref_tmp168 to i8*, !dbg !10344
  call void @llvm.lifetime.start(i64 8, i8* %143) #1, !dbg !10344
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp168, metadata !1943, metadata !2310), !dbg !10346
  %144 = load %struct._object*, %struct._object** %_py_xdecref_tmp163, align 8, !dbg !10347, !tbaa !2326
  store %struct._object* %144, %struct._object** %_py_decref_tmp168, align 8, !dbg !10346, !tbaa !2326
  %145 = load %struct._object*, %struct._object** %_py_decref_tmp168, align 8, !dbg !10348, !tbaa !2326
  %ob_refcnt169 = getelementptr inbounds %struct._object, %struct._object* %145, i32 0, i32 0, !dbg !10350
  %146 = load i64, i64* %ob_refcnt169, align 8, !dbg !10351, !tbaa !2335
  %dec170 = add i64 %146, -1, !dbg !10351
  store i64 %dec170, i64* %ob_refcnt169, align 8, !dbg !10351, !tbaa !2335
  %cmp171 = icmp ne i64 %dec170, 0, !dbg !10352
  br i1 %cmp171, label %if.then.173, label %if.else.174, !dbg !10353

if.then.173:                                      ; preds = %do.body.167
  br label %if.end.177, !dbg !10354

if.else.174:                                      ; preds = %do.body.167
  %147 = load %struct._object*, %struct._object** %_py_decref_tmp168, align 8, !dbg !10356, !tbaa !2326
  %ob_type175 = getelementptr inbounds %struct._object, %struct._object* %147, i32 0, i32 1, !dbg !10358
  %148 = load %struct._typeobject*, %struct._typeobject** %ob_type175, align 8, !dbg !10358, !tbaa !2318
  %tp_dealloc176 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %148, i32 0, i32 4, !dbg !10359
  %149 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc176, align 8, !dbg !10359, !tbaa !3442
  %150 = load %struct._object*, %struct._object** %_py_decref_tmp168, align 8, !dbg !10360, !tbaa !2326
  call void %149(%struct._object* %150), !dbg !10361
  br label %if.end.177

if.end.177:                                       ; preds = %if.else.174, %if.then.173
  %151 = bitcast %struct._object** %_py_decref_tmp168 to i8*, !dbg !10362
  call void @llvm.lifetime.end(i64 8, i8* %151) #1, !dbg !10362
  br label %do.cond.178, !dbg !10364

do.cond.178:                                      ; preds = %if.end.177
  br label %do.end.179, !dbg !10365

do.end.179:                                       ; preds = %do.cond.178
  br label %if.end.180, !dbg !10367

if.end.180:                                       ; preds = %do.end.179, %do.body.162
  %152 = bitcast %struct._object** %_py_xdecref_tmp163 to i8*, !dbg !10369
  call void @llvm.lifetime.end(i64 8, i8* %152) #1, !dbg !10369
  br label %do.cond.181, !dbg !10370

do.cond.181:                                      ; preds = %if.end.180
  br label %do.end.182, !dbg !10371

do.end.182:                                       ; preds = %do.cond.181
  %153 = load %struct.addrinfo*, %struct.addrinfo** %res0, align 8, !dbg !10373, !tbaa !2326
  %tobool183 = icmp ne %struct.addrinfo* %153, null, !dbg !10373
  br i1 %tobool183, label %if.then.184, label %if.end.185, !dbg !10375

if.then.184:                                      ; preds = %do.end.182
  %154 = load %struct.addrinfo*, %struct.addrinfo** %res0, align 8, !dbg !10376, !tbaa !2326
  call void @freeaddrinfo(%struct.addrinfo* %154) #1, !dbg !10377
  br label %if.end.185, !dbg !10377

if.end.185:                                       ; preds = %if.then.184, %do.end.182
  store %struct._object* null, %struct._object** %retval, !dbg !10378
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.186, !dbg !10378

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %cleanup.186

NewDefault.3:                                     ; preds = %LeafBlock.6, %LeafBlock.4
  br label %cleanup.186

cleanup.186:                                      ; preds = %NewDefault.3, %NewDefault, %if.end.185, %if.end.140, %if.else.15, %if.then.6, %if.then
  %155 = bitcast %struct._object** %idna to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 8, i8* %155) #1, !dbg !10379
  %156 = bitcast %struct._object** %all to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 8, i8* %156) #1, !dbg !10379
  %157 = bitcast i32* %error to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 4, i8* %157) #1, !dbg !10379
  %158 = bitcast i32* %flags to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 4, i8* %158) #1, !dbg !10379
  %159 = bitcast i32* %protocol to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 4, i8* %159) #1, !dbg !10379
  %160 = bitcast i32* %socktype to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 4, i8* %160) #1, !dbg !10379
  %161 = bitcast i32* %family to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 4, i8* %161) #1, !dbg !10379
  %162 = bitcast i8** %pptr to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 8, i8* %162) #1, !dbg !10379
  %163 = bitcast i8** %hptr to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 8, i8* %163) #1, !dbg !10379
  %164 = bitcast [30 x i8]* %pbuf to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 30, i8* %164) #1, !dbg !10379
  %165 = bitcast %struct._object** %pobj to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 8, i8* %165) #1, !dbg !10379
  %166 = bitcast %struct._object** %hobj to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 8, i8* %166) #1, !dbg !10379
  %167 = bitcast %struct.addrinfo** %res0 to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 8, i8* %167) #1, !dbg !10379
  %168 = bitcast %struct.addrinfo** %res to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 8, i8* %168) #1, !dbg !10379
  %169 = bitcast %struct.addrinfo* %hints to i8*, !dbg !10379
  call void @llvm.lifetime.end(i64 48, i8* %169) #1, !dbg !10379
  %170 = load %struct._object*, %struct._object** %retval, !dbg !10379
  ret %struct._object* %170, !dbg !10379
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_getnameinfo(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %sa = alloca %struct._object*, align 8
  %flags = alloca i32, align 4
  %hostp = alloca i8*, align 8
  %port = alloca i32, align 4
  %flowinfo = alloca i32, align 4
  %scope_id = alloca i32, align 4
  %hbuf = alloca [1025 x i8], align 16
  %pbuf = alloca [32 x i8], align 16
  %hints = alloca %struct.addrinfo, align 8
  %res = alloca %struct.addrinfo*, align 8
  %error = alloca i32, align 4
  %ret = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %_save = alloca %struct._ts*, align 8
  %sin6 = alloca %struct.sockaddr_in6*, align 8
  %__v = alloca i32, align 4
  %__x = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1948, metadata !2310), !dbg !10380
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !1949, metadata !2310), !dbg !10381
  %0 = bitcast %struct._object** %sa to i8*, !dbg !10382
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !10382
  call void @llvm.dbg.declare(metadata %struct._object** %sa, metadata !1950, metadata !2310), !dbg !10383
  store %struct._object* null, %struct._object** %sa, align 8, !dbg !10383, !tbaa !2326
  %1 = bitcast i32* %flags to i8*, !dbg !10384
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !10384
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !1951, metadata !2310), !dbg !10385
  %2 = bitcast i8** %hostp to i8*, !dbg !10386
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !10386
  call void @llvm.dbg.declare(metadata i8** %hostp, metadata !1952, metadata !2310), !dbg !10387
  %3 = bitcast i32* %port to i8*, !dbg !10388
  call void @llvm.lifetime.start(i64 4, i8* %3) #1, !dbg !10388
  call void @llvm.dbg.declare(metadata i32* %port, metadata !1953, metadata !2310), !dbg !10389
  %4 = bitcast i32* %flowinfo to i8*, !dbg !10390
  call void @llvm.lifetime.start(i64 4, i8* %4) #1, !dbg !10390
  call void @llvm.dbg.declare(metadata i32* %flowinfo, metadata !1954, metadata !2310), !dbg !10391
  %5 = bitcast i32* %scope_id to i8*, !dbg !10390
  call void @llvm.lifetime.start(i64 4, i8* %5) #1, !dbg !10390
  call void @llvm.dbg.declare(metadata i32* %scope_id, metadata !1955, metadata !2310), !dbg !10392
  %6 = bitcast [1025 x i8]* %hbuf to i8*, !dbg !10393
  call void @llvm.lifetime.start(i64 1025, i8* %6) #1, !dbg !10393
  call void @llvm.dbg.declare(metadata [1025 x i8]* %hbuf, metadata !1956, metadata !2310), !dbg !10394
  %7 = bitcast [32 x i8]* %pbuf to i8*, !dbg !10393
  call void @llvm.lifetime.start(i64 32, i8* %7) #1, !dbg !10393
  call void @llvm.dbg.declare(metadata [32 x i8]* %pbuf, metadata !1957, metadata !2310), !dbg !10395
  %8 = bitcast %struct.addrinfo* %hints to i8*, !dbg !10396
  call void @llvm.lifetime.start(i64 48, i8* %8) #1, !dbg !10396
  call void @llvm.dbg.declare(metadata %struct.addrinfo* %hints, metadata !1961, metadata !2310), !dbg !10397
  %9 = bitcast %struct.addrinfo** %res to i8*, !dbg !10396
  call void @llvm.lifetime.start(i64 8, i8* %9) #1, !dbg !10396
  call void @llvm.dbg.declare(metadata %struct.addrinfo** %res, metadata !1962, metadata !2310), !dbg !10398
  store %struct.addrinfo* null, %struct.addrinfo** %res, align 8, !dbg !10398, !tbaa !2326
  %10 = bitcast i32* %error to i8*, !dbg !10399
  call void @llvm.lifetime.start(i64 4, i8* %10) #1, !dbg !10399
  call void @llvm.dbg.declare(metadata i32* %error, metadata !1963, metadata !2310), !dbg !10400
  %11 = bitcast %struct._object** %ret to i8*, !dbg !10401
  call void @llvm.lifetime.start(i64 8, i8* %11) #1, !dbg !10401
  call void @llvm.dbg.declare(metadata %struct._object** %ret, metadata !1964, metadata !2310), !dbg !10402
  store %struct._object* null, %struct._object** %ret, align 8, !dbg !10402, !tbaa !2326
  store i32 0, i32* %scope_id, align 4, !dbg !10403, !tbaa !3034
  store i32 0, i32* %flowinfo, align 4, !dbg !10404, !tbaa !3034
  store i32 0, i32* %flags, align 4, !dbg !10405, !tbaa !3034
  %12 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10406, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %12, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.462, i32 0, i32 0), %struct._object** %sa, i32* %flags), !dbg !10408
  %tobool = icmp ne i32 %call, 0, !dbg !10408
  br i1 %tobool, label %if.end, label %if.then, !dbg !10409

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10410
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10410

if.end:                                           ; preds = %entry
  %13 = load %struct._object*, %struct._object** %sa, align 8, !dbg !10411, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1, !dbg !10413
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !10413, !tbaa !2318
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 19, !dbg !10414
  %15 = load i64, i64* %tp_flags, align 8, !dbg !10414, !tbaa !5047
  %and = and i64 %15, 67108864, !dbg !10415
  %cmp = icmp ne i64 %and, 0, !dbg !10416
  br i1 %cmp, label %if.end.2, label %if.then.1, !dbg !10417

if.then.1:                                        ; preds = %if.end
  %16 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8, !dbg !10418, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %16, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.463, i32 0, i32 0)), !dbg !10420
  store %struct._object* null, %struct._object** %retval, !dbg !10421
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10421

if.end.2:                                         ; preds = %if.end
  %17 = load %struct._object*, %struct._object** %sa, align 8, !dbg !10422, !tbaa !2326
  %call3 = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.464, i32 0, i32 0), i8** %hostp, i32* %port, i32* %flowinfo, i32* %scope_id), !dbg !10424
  %tobool4 = icmp ne i32 %call3, 0, !dbg !10424
  br i1 %tobool4, label %if.end.6, label %if.then.5, !dbg !10425

if.then.5:                                        ; preds = %if.end.2
  store %struct._object* null, %struct._object** %retval, !dbg !10426
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10426

if.end.6:                                         ; preds = %if.end.2
  %18 = load i32, i32* %flowinfo, align 4, !dbg !10427, !tbaa !3034
  %cmp7 = icmp ugt i32 %18, 1048575, !dbg !10429
  br i1 %cmp7, label %if.then.8, label %if.end.9, !dbg !10430

if.then.8:                                        ; preds = %if.end.6
  %19 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !10431, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %19, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.322, i32 0, i32 0)), !dbg !10433
  store %struct._object* null, %struct._object** %retval, !dbg !10434
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10434

if.end.9:                                         ; preds = %if.end.6
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %pbuf, i32 0, i32 0, !dbg !10435
  %20 = load i32, i32* %port, align 4, !dbg !10436, !tbaa !3034
  %call10 = call i32 (i8*, i64, i8*, ...) @PyOS_snprintf(i8* %arraydecay, i64 32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.465, i32 0, i32 0), i32 %20), !dbg !10437
  %21 = bitcast %struct.addrinfo* %hints to i8*, !dbg !10438
  call void @llvm.memset.p0i8.i64(i8* %21, i8 0, i64 48, i32 8, i1 false), !dbg !10438
  %ai_family = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %hints, i32 0, i32 1, !dbg !10439
  store i32 0, i32* %ai_family, align 4, !dbg !10440, !tbaa !7247
  %ai_socktype = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %hints, i32 0, i32 2, !dbg !10441
  store i32 2, i32* %ai_socktype, align 4, !dbg !10442, !tbaa !7251
  %ai_flags = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %hints, i32 0, i32 0, !dbg !10443
  store i32 4, i32* %ai_flags, align 4, !dbg !10444, !tbaa !7254
  %22 = bitcast %struct._ts** %_save to i8*, !dbg !10445
  call void @llvm.lifetime.start(i64 8, i8* %22) #1, !dbg !10445
  call void @llvm.dbg.declare(metadata %struct._ts** %_save, metadata !1965, metadata !2310), !dbg !10446
  %call11 = call %struct._ts* @PyEval_SaveThread(), !dbg !10447
  store %struct._ts* %call11, %struct._ts** %_save, align 8, !dbg !10448, !tbaa !2326
  %23 = load i8*, i8** %hostp, align 8, !dbg !10449, !tbaa !2326
  %arraydecay12 = getelementptr inbounds [32 x i8], [32 x i8]* %pbuf, i32 0, i32 0, !dbg !10450
  %call13 = call i32 @getaddrinfo(i8* %23, i8* %arraydecay12, %struct.addrinfo* %hints, %struct.addrinfo** %res), !dbg !10451
  store i32 %call13, i32* %error, align 4, !dbg !10452, !tbaa !3034
  %24 = load %struct._ts*, %struct._ts** %_save, align 8, !dbg !10453, !tbaa !2326
  call void @PyEval_RestoreThread(%struct._ts* %24), !dbg !10454
  %25 = bitcast %struct._ts** %_save to i8*, !dbg !10455
  call void @llvm.lifetime.end(i64 8, i8* %25) #1, !dbg !10455
  %26 = load i32, i32* %error, align 4, !dbg !10456, !tbaa !3034
  %tobool14 = icmp ne i32 %26, 0, !dbg !10456
  br i1 %tobool14, label %if.then.15, label %if.end.17, !dbg !10458

if.then.15:                                       ; preds = %if.end.9
  %27 = load i32, i32* %error, align 4, !dbg !10459, !tbaa !3034
  %call16 = call %struct._object* @set_gaierror(i32 %27), !dbg !10461
  br label %fail, !dbg !10462

if.end.17:                                        ; preds = %if.end.9
  %28 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10463, !tbaa !2326
  %ai_next = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %28, i32 0, i32 7, !dbg !10465
  %29 = load %struct.addrinfo*, %struct.addrinfo** %ai_next, align 8, !dbg !10465, !tbaa !7286
  %tobool18 = icmp ne %struct.addrinfo* %29, null, !dbg !10463
  br i1 %tobool18, label %if.then.19, label %if.end.20, !dbg !10466

if.then.19:                                       ; preds = %if.end.17
  %30 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !10467, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %30, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.466, i32 0, i32 0)), !dbg !10469
  br label %fail, !dbg !10470

if.end.20:                                        ; preds = %if.end.17
  %31 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10471, !tbaa !2326
  %ai_family21 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %31, i32 0, i32 1, !dbg !10472
  %32 = load i32, i32* %ai_family21, align 4, !dbg !10472, !tbaa !7247
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end.20
  %Pivot = icmp slt i32 %32, 10
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %32, 10
  br i1 %SwitchLeaf2, label %sw.bb.25, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %32, 2
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %33 = load %struct._object*, %struct._object** %sa, align 8, !dbg !10473, !tbaa !2326
  %34 = bitcast %struct._object* %33 to %struct.PyVarObject*, !dbg !10476
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %34, i32 0, i32 1, !dbg !10477
  %35 = load i64, i64* %ob_size, align 8, !dbg !10477, !tbaa !5055
  %cmp22 = icmp ne i64 %35, 2, !dbg !10478
  br i1 %cmp22, label %if.then.23, label %if.end.24, !dbg !10479

if.then.23:                                       ; preds = %sw.bb
  %36 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !10480, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %36, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.467, i32 0, i32 0)), !dbg !10482
  br label %fail, !dbg !10483

if.end.24:                                        ; preds = %sw.bb
  br label %sw.epilog, !dbg !10484

sw.bb.25:                                         ; preds = %LeafBlock.1
  %37 = bitcast %struct.sockaddr_in6** %sin6 to i8*, !dbg !10485
  call void @llvm.lifetime.start(i64 8, i8* %37) #1, !dbg !10485
  call void @llvm.dbg.declare(metadata %struct.sockaddr_in6** %sin6, metadata !1967, metadata !2310), !dbg !10486
  %38 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10487, !tbaa !2326
  %ai_addr = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %38, i32 0, i32 5, !dbg !10488
  %39 = load %struct.sockaddr*, %struct.sockaddr** %ai_addr, align 8, !dbg !10488, !tbaa !7309
  %40 = bitcast %struct.sockaddr* %39 to %struct.sockaddr_in6*, !dbg !10489
  store %struct.sockaddr_in6* %40, %struct.sockaddr_in6** %sin6, align 8, !dbg !10490, !tbaa !2326
  %41 = bitcast i32* %__v to i8*, !dbg !10491
  call void @llvm.lifetime.start(i64 4, i8* %41) #1, !dbg !10491
  call void @llvm.dbg.declare(metadata i32* %__v, metadata !1970, metadata !2310), !dbg !10492
  %42 = bitcast i32* %__x to i8*, !dbg !10491
  call void @llvm.lifetime.start(i64 4, i8* %42) #1, !dbg !10491
  call void @llvm.dbg.declare(metadata i32* %__x, metadata !1972, metadata !2310), !dbg !10493
  %43 = load i32, i32* %flowinfo, align 4, !dbg !10494, !tbaa !3034
  store i32 %43, i32* %__x, align 4, !dbg !10493, !tbaa !3034
  %44 = load i32, i32* %__x, align 4, !dbg !10495, !tbaa !3034
  %45 = call i32 asm "bswap $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %44) #2, !dbg !10497, !srcloc !10498
  store i32 %45, i32* %__v, align 4, !dbg !10497, !tbaa !3034
  %46 = load i32, i32* %__v, align 4, !dbg !10499, !tbaa !3034
  store i32 %46, i32* %tmp, !dbg !10500, !tbaa !3034
  %47 = bitcast i32* %__x to i8*, !dbg !10501
  call void @llvm.lifetime.end(i64 4, i8* %47) #1, !dbg !10501
  %48 = bitcast i32* %__v to i8*, !dbg !10501
  call void @llvm.lifetime.end(i64 4, i8* %48) #1, !dbg !10501
  %49 = load i32, i32* %tmp, !dbg !10502, !tbaa !3034
  %50 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %sin6, align 8, !dbg !10503, !tbaa !2326
  %sin6_flowinfo = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %50, i32 0, i32 2, !dbg !10504
  store i32 %49, i32* %sin6_flowinfo, align 4, !dbg !10505, !tbaa !6170
  %51 = load i32, i32* %scope_id, align 4, !dbg !10506, !tbaa !3034
  %52 = load %struct.sockaddr_in6*, %struct.sockaddr_in6** %sin6, align 8, !dbg !10507, !tbaa !2326
  %sin6_scope_id = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %52, i32 0, i32 4, !dbg !10508
  store i32 %51, i32* %sin6_scope_id, align 4, !dbg !10509, !tbaa !6181
  store i32 3, i32* %cleanup.dest.slot
  %53 = bitcast %struct.sockaddr_in6** %sin6 to i8*, !dbg !10510
  call void @llvm.lifetime.end(i64 8, i8* %53) #1, !dbg !10510
  br label %sw.epilog

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %sw.bb.25, %if.end.24
  %54 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10511, !tbaa !2326
  %ai_addr26 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %54, i32 0, i32 5, !dbg !10512
  %55 = load %struct.sockaddr*, %struct.sockaddr** %ai_addr26, align 8, !dbg !10512, !tbaa !7309
  %56 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10513, !tbaa !2326
  %ai_addrlen = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %56, i32 0, i32 4, !dbg !10514
  %57 = load i32, i32* %ai_addrlen, align 4, !dbg !10514, !tbaa !7297
  %arraydecay27 = getelementptr inbounds [1025 x i8], [1025 x i8]* %hbuf, i32 0, i32 0, !dbg !10515
  %arraydecay28 = getelementptr inbounds [32 x i8], [32 x i8]* %pbuf, i32 0, i32 0, !dbg !10516
  %58 = load i32, i32* %flags, align 4, !dbg !10517, !tbaa !3034
  %call29 = call i32 @getnameinfo(%struct.sockaddr* %55, i32 %57, i8* %arraydecay27, i32 1025, i8* %arraydecay28, i32 32, i32 %58), !dbg !10518
  store i32 %call29, i32* %error, align 4, !dbg !10519, !tbaa !3034
  %59 = load i32, i32* %error, align 4, !dbg !10520, !tbaa !3034
  %tobool30 = icmp ne i32 %59, 0, !dbg !10520
  br i1 %tobool30, label %if.then.31, label %if.end.33, !dbg !10522

if.then.31:                                       ; preds = %sw.epilog
  %60 = load i32, i32* %error, align 4, !dbg !10523, !tbaa !3034
  %call32 = call %struct._object* @set_gaierror(i32 %60), !dbg !10525
  br label %fail, !dbg !10526

if.end.33:                                        ; preds = %sw.epilog
  %arraydecay34 = getelementptr inbounds [1025 x i8], [1025 x i8]* %hbuf, i32 0, i32 0, !dbg !10527
  %arraydecay35 = getelementptr inbounds [32 x i8], [32 x i8]* %pbuf, i32 0, i32 0, !dbg !10528
  %call36 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.468, i32 0, i32 0), i8* %arraydecay34, i8* %arraydecay35), !dbg !10529
  store %struct._object* %call36, %struct._object** %ret, align 8, !dbg !10530, !tbaa !2326
  br label %fail, !dbg !10531

fail:                                             ; preds = %if.end.33, %if.then.31, %if.then.23, %if.then.19, %if.then.15
  %61 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10532, !tbaa !2326
  %tobool37 = icmp ne %struct.addrinfo* %61, null, !dbg !10532
  br i1 %tobool37, label %if.then.38, label %if.end.39, !dbg !10534

if.then.38:                                       ; preds = %fail
  %62 = load %struct.addrinfo*, %struct.addrinfo** %res, align 8, !dbg !10535, !tbaa !2326
  call void @freeaddrinfo(%struct.addrinfo* %62) #1, !dbg !10536
  br label %if.end.39, !dbg !10536

if.end.39:                                        ; preds = %if.then.38, %fail
  %63 = load %struct._object*, %struct._object** %ret, align 8, !dbg !10537, !tbaa !2326
  store %struct._object* %63, %struct._object** %retval, !dbg !10538
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10538

cleanup:                                          ; preds = %if.end.39, %if.then.8, %if.then.5, %if.then.1, %if.then
  %64 = bitcast %struct._object** %ret to i8*, !dbg !10539
  call void @llvm.lifetime.end(i64 8, i8* %64) #1, !dbg !10539
  %65 = bitcast i32* %error to i8*, !dbg !10539
  call void @llvm.lifetime.end(i64 4, i8* %65) #1, !dbg !10539
  %66 = bitcast %struct.addrinfo** %res to i8*, !dbg !10539
  call void @llvm.lifetime.end(i64 8, i8* %66) #1, !dbg !10539
  %67 = bitcast %struct.addrinfo* %hints to i8*, !dbg !10539
  call void @llvm.lifetime.end(i64 48, i8* %67) #1, !dbg !10539
  %68 = bitcast [32 x i8]* %pbuf to i8*, !dbg !10539
  call void @llvm.lifetime.end(i64 32, i8* %68) #1, !dbg !10539
  %69 = bitcast [1025 x i8]* %hbuf to i8*, !dbg !10539
  call void @llvm.lifetime.end(i64 1025, i8* %69) #1, !dbg !10539
  %70 = bitcast i32* %scope_id to i8*, !dbg !10539
  call void @llvm.lifetime.end(i64 4, i8* %70) #1, !dbg !10539
  %71 = bitcast i32* %flowinfo to i8*, !dbg !10539
  call void @llvm.lifetime.end(i64 4, i8* %71) #1, !dbg !10539
  %72 = bitcast i32* %port to i8*, !dbg !10539
  call void @llvm.lifetime.end(i64 4, i8* %72) #1, !dbg !10539
  %73 = bitcast i8** %hostp to i8*, !dbg !10539
  call void @llvm.lifetime.end(i64 8, i8* %73) #1, !dbg !10539
  %74 = bitcast i32* %flags to i8*, !dbg !10539
  call void @llvm.lifetime.end(i64 4, i8* %74) #1, !dbg !10539
  %75 = bitcast %struct._object** %sa to i8*, !dbg !10539
  call void @llvm.lifetime.end(i64 8, i8* %75) #1, !dbg !10539
  %76 = load %struct._object*, %struct._object** %retval, !dbg !10539
  ret %struct._object* %76, !dbg !10539
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_getdefaulttimeout(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1975, metadata !2310), !dbg !10540
  %0 = load double, double* @defaulttimeout, align 8, !dbg !10541, !tbaa !3215
  %cmp = fcmp olt double %0, 0.000000e+00, !dbg !10543
  br i1 %cmp, label %if.then, label %if.else, !dbg !10544

if.then:                                          ; preds = %entry
  %1 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10545, !tbaa !2335
  %inc = add i64 %1, 1, !dbg !10545
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10545, !tbaa !2335
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !10547
  br label %return, !dbg !10547

if.else:                                          ; preds = %entry
  %2 = load double, double* @defaulttimeout, align 8, !dbg !10548, !tbaa !3215
  %call = call %struct._object* @PyFloat_FromDouble(double %2), !dbg !10549
  store %struct._object* %call, %struct._object** %retval, !dbg !10550
  br label %return, !dbg !10550

return:                                           ; preds = %if.else, %if.then
  %3 = load %struct._object*, %struct._object** %retval, !dbg !10551
  ret %struct._object* %3, !dbg !10551
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_setdefaulttimeout(%struct._object* %self, %struct._object* %arg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %timeout = alloca double, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1978, metadata !2310), !dbg !10552
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !1979, metadata !2310), !dbg !10553
  %0 = bitcast double* %timeout to i8*, !dbg !10554
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !10554
  call void @llvm.dbg.declare(metadata double* %timeout, metadata !1980, metadata !2310), !dbg !10555
  %1 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !10556, !tbaa !2326
  %cmp = icmp eq %struct._object* %1, @_Py_NoneStruct, !dbg !10558
  br i1 %cmp, label %if.then, label %if.else, !dbg !10559

if.then:                                          ; preds = %entry
  store double -1.000000e+00, double* %timeout, align 8, !dbg !10560, !tbaa !3215
  br label %if.end.6, !dbg !10561

if.else:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !10562, !tbaa !2326
  %call = call double @PyFloat_AsDouble(%struct._object* %2), !dbg !10564
  store double %call, double* %timeout, align 8, !dbg !10565, !tbaa !3215
  %3 = load double, double* %timeout, align 8, !dbg !10566, !tbaa !3215
  %cmp1 = fcmp olt double %3, 0.000000e+00, !dbg !10568
  br i1 %cmp1, label %if.then.2, label %if.end.5, !dbg !10569

if.then.2:                                        ; preds = %if.else
  %call3 = call %struct._object* @PyErr_Occurred(), !dbg !10570
  %tobool = icmp ne %struct._object* %call3, null, !dbg !10570
  br i1 %tobool, label %if.end, label %if.then.4, !dbg !10573

if.then.4:                                        ; preds = %if.then.2
  %4 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8, !dbg !10574, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.361, i32 0, i32 0)), !dbg !10575
  br label %if.end, !dbg !10575

if.end:                                           ; preds = %if.then.4, %if.then.2
  store %struct._object* null, %struct._object** %retval, !dbg !10576
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10576

if.end.5:                                         ; preds = %if.else
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.then
  %5 = load double, double* %timeout, align 8, !dbg !10577, !tbaa !3215
  store double %5, double* @defaulttimeout, align 8, !dbg !10578, !tbaa !3215
  %6 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10579, !tbaa !2335
  %inc = add i64 %6, 1, !dbg !10579
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8, !dbg !10579, !tbaa !2335
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval, !dbg !10580
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10580

cleanup:                                          ; preds = %if.end.6, %if.end
  %7 = bitcast double* %timeout to i8*, !dbg !10581
  call void @llvm.lifetime.end(i64 8, i8* %7) #1, !dbg !10581
  %8 = load %struct._object*, %struct._object** %retval, !dbg !10581
  ret %struct._object* %8, !dbg !10581
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_if_nameindex(%struct._object* %self, %struct._object* %arg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %list = alloca %struct._object*, align 8
  %i = alloca i32, align 4
  %ni = alloca %struct.if_nameindex*, align 8
  %cleanup.dest.slot = alloca i32
  %ni_tuple = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp28 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !1983, metadata !2310), !dbg !10582
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !1984, metadata !2310), !dbg !10583
  %0 = bitcast %struct._object** %list to i8*, !dbg !10584
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !10584
  call void @llvm.dbg.declare(metadata %struct._object** %list, metadata !1985, metadata !2310), !dbg !10585
  %1 = bitcast i32* %i to i8*, !dbg !10586
  call void @llvm.lifetime.start(i64 4, i8* %1) #1, !dbg !10586
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1986, metadata !2310), !dbg !10587
  %2 = bitcast %struct.if_nameindex** %ni to i8*, !dbg !10588
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !10588
  call void @llvm.dbg.declare(metadata %struct.if_nameindex** %ni, metadata !1987, metadata !2310), !dbg !10589
  %call = call %struct.if_nameindex* @if_nameindex() #1, !dbg !10590
  store %struct.if_nameindex* %call, %struct.if_nameindex** %ni, align 8, !dbg !10591, !tbaa !2326
  %3 = load %struct.if_nameindex*, %struct.if_nameindex** %ni, align 8, !dbg !10592, !tbaa !2326
  %cmp = icmp eq %struct.if_nameindex* %3, null, !dbg !10594
  br i1 %cmp, label %if.then, label %if.end, !dbg !10595

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !10596, !tbaa !2326
  %call1 = call %struct._object* @PyErr_SetFromErrno(%struct._object* %4), !dbg !10598
  store %struct._object* null, %struct._object** %retval, !dbg !10599
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.52, !dbg !10599

if.end:                                           ; preds = %entry
  %call2 = call %struct._object* @PyList_New(i64 0), !dbg !10600
  store %struct._object* %call2, %struct._object** %list, align 8, !dbg !10601, !tbaa !2326
  %5 = load %struct._object*, %struct._object** %list, align 8, !dbg !10602, !tbaa !2326
  %cmp3 = icmp eq %struct._object* %5, null, !dbg !10604
  br i1 %cmp3, label %if.then.4, label %if.end.5, !dbg !10605

if.then.4:                                        ; preds = %if.end
  %6 = load %struct.if_nameindex*, %struct.if_nameindex** %ni, align 8, !dbg !10606, !tbaa !2326
  call void @if_freenameindex(%struct.if_nameindex* %6) #1, !dbg !10608
  store %struct._object* null, %struct._object** %retval, !dbg !10609
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.52, !dbg !10609

if.end.5:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !10610, !tbaa !3034
  br label %for.cond, !dbg !10611

for.cond:                                         ; preds = %for.inc, %if.end.5
  %7 = load i32, i32* %i, align 4, !dbg !10612, !tbaa !3034
  %idxprom = sext i32 %7 to i64, !dbg !10615
  %8 = load %struct.if_nameindex*, %struct.if_nameindex** %ni, align 8, !dbg !10615, !tbaa !2326
  %arrayidx = getelementptr %struct.if_nameindex, %struct.if_nameindex* %8, i64 %idxprom, !dbg !10615
  %if_index = getelementptr inbounds %struct.if_nameindex, %struct.if_nameindex* %arrayidx, i32 0, i32 0, !dbg !10616
  %9 = load i32, i32* %if_index, align 4, !dbg !10616, !tbaa !10617
  %cmp6 = icmp ne i32 %9, 0, !dbg !10619
  br i1 %cmp6, label %land.rhs, label %land.end, !dbg !10620

land.rhs:                                         ; preds = %for.cond
  %10 = load i32, i32* %i, align 4, !dbg !10621, !tbaa !3034
  %cmp7 = icmp slt i32 %10, 2147483647, !dbg !10623
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %11 = phi i1 [ false, %for.cond ], [ %cmp7, %land.rhs ]
  br i1 %11, label %for.body, label %for.end, !dbg !10624

for.body:                                         ; preds = %land.end
  %12 = bitcast %struct._object** %ni_tuple to i8*, !dbg !10626
  call void @llvm.lifetime.start(i64 8, i8* %12) #1, !dbg !10626
  call void @llvm.dbg.declare(metadata %struct._object** %ni_tuple, metadata !1993, metadata !2310), !dbg !10627
  %13 = load i32, i32* %i, align 4, !dbg !10628, !tbaa !3034
  %idxprom8 = sext i32 %13 to i64, !dbg !10629
  %14 = load %struct.if_nameindex*, %struct.if_nameindex** %ni, align 8, !dbg !10629, !tbaa !2326
  %arrayidx9 = getelementptr %struct.if_nameindex, %struct.if_nameindex* %14, i64 %idxprom8, !dbg !10629
  %if_index10 = getelementptr inbounds %struct.if_nameindex, %struct.if_nameindex* %arrayidx9, i32 0, i32 0, !dbg !10630
  %15 = load i32, i32* %if_index10, align 4, !dbg !10630, !tbaa !10617
  %16 = load i32, i32* %i, align 4, !dbg !10631, !tbaa !3034
  %idxprom11 = sext i32 %16 to i64, !dbg !10632
  %17 = load %struct.if_nameindex*, %struct.if_nameindex** %ni, align 8, !dbg !10632, !tbaa !2326
  %arrayidx12 = getelementptr %struct.if_nameindex, %struct.if_nameindex* %17, i64 %idxprom11, !dbg !10632
  %if_name = getelementptr inbounds %struct.if_nameindex, %struct.if_nameindex* %arrayidx12, i32 0, i32 1, !dbg !10633
  %18 = load i8*, i8** %if_name, align 8, !dbg !10633, !tbaa !10634
  %call13 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.469, i32 0, i32 0), i32 %15, %struct._object* (i8*)* @PyUnicode_DecodeFSDefault, i8* %18), !dbg !10635
  store %struct._object* %call13, %struct._object** %ni_tuple, align 8, !dbg !10627, !tbaa !2326
  %19 = load %struct._object*, %struct._object** %ni_tuple, align 8, !dbg !10636, !tbaa !2326
  %cmp14 = icmp eq %struct._object* %19, null, !dbg !10637
  br i1 %cmp14, label %if.then.17, label %lor.lhs.false, !dbg !10638

lor.lhs.false:                                    ; preds = %for.body
  %20 = load %struct._object*, %struct._object** %list, align 8, !dbg !10639, !tbaa !2326
  %21 = load %struct._object*, %struct._object** %ni_tuple, align 8, !dbg !10641, !tbaa !2326
  %call15 = call i32 @PyList_Append(%struct._object* %20, %struct._object* %21), !dbg !10642
  %cmp16 = icmp eq i32 %call15, -1, !dbg !10643
  br i1 %cmp16, label %if.then.17, label %if.end.39, !dbg !10644

if.then.17:                                       ; preds = %lor.lhs.false, %for.body
  br label %do.body, !dbg !10645

do.body:                                          ; preds = %if.then.17
  %22 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !10646
  call void @llvm.lifetime.start(i64 8, i8* %22) #1, !dbg !10646
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1997, metadata !2310), !dbg !10648
  %23 = load %struct._object*, %struct._object** %ni_tuple, align 8, !dbg !10649, !tbaa !2326
  store %struct._object* %23, %struct._object** %_py_xdecref_tmp, align 8, !dbg !10648, !tbaa !2326
  %24 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !10650, !tbaa !2326
  %cmp18 = icmp ne %struct._object* %24, null, !dbg !10651
  br i1 %cmp18, label %if.then.19, label %if.end.24, !dbg !10652

if.then.19:                                       ; preds = %do.body
  br label %do.body.20, !dbg !10653

do.body.20:                                       ; preds = %if.then.19
  %25 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10655
  call void @llvm.lifetime.start(i64 8, i8* %25) #1, !dbg !10655
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !2001, metadata !2310), !dbg !10657
  %26 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !10658, !tbaa !2326
  store %struct._object* %26, %struct._object** %_py_decref_tmp, align 8, !dbg !10657, !tbaa !2326
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10659, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0, !dbg !10661
  %28 = load i64, i64* %ob_refcnt, align 8, !dbg !10662, !tbaa !2335
  %dec = add i64 %28, -1, !dbg !10662
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !10662, !tbaa !2335
  %cmp21 = icmp ne i64 %dec, 0, !dbg !10663
  br i1 %cmp21, label %if.then.22, label %if.else, !dbg !10664

if.then.22:                                       ; preds = %do.body.20
  br label %if.end.23, !dbg !10665

if.else:                                          ; preds = %do.body.20
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10667, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1, !dbg !10669
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !10669, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4, !dbg !10670
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !10670, !tbaa !3442
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10671, !tbaa !2326
  call void %31(%struct._object* %32), !dbg !10672
  br label %if.end.23

if.end.23:                                        ; preds = %if.else, %if.then.22
  %33 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10673
  call void @llvm.lifetime.end(i64 8, i8* %33) #1, !dbg !10673
  br label %do.cond, !dbg !10675

do.cond:                                          ; preds = %if.end.23
  br label %do.end, !dbg !10676

do.end:                                           ; preds = %do.cond
  br label %if.end.24, !dbg !10678

if.end.24:                                        ; preds = %do.end, %do.body
  %34 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !10680
  call void @llvm.lifetime.end(i64 8, i8* %34) #1, !dbg !10680
  br label %do.cond.25, !dbg !10683

do.cond.25:                                       ; preds = %if.end.24
  br label %do.end.26, !dbg !10684

do.end.26:                                        ; preds = %do.cond.25
  br label %do.body.27, !dbg !10686

do.body.27:                                       ; preds = %do.end.26
  %35 = bitcast %struct._object** %_py_decref_tmp28 to i8*, !dbg !10687
  call void @llvm.lifetime.start(i64 8, i8* %35) #1, !dbg !10687
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp28, metadata !2004, metadata !2310), !dbg !10689
  %36 = load %struct._object*, %struct._object** %list, align 8, !dbg !10690, !tbaa !2326
  store %struct._object* %36, %struct._object** %_py_decref_tmp28, align 8, !dbg !10689, !tbaa !2326
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8, !dbg !10691, !tbaa !2326
  %ob_refcnt29 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0, !dbg !10693
  %38 = load i64, i64* %ob_refcnt29, align 8, !dbg !10694, !tbaa !2335
  %dec30 = add i64 %38, -1, !dbg !10694
  store i64 %dec30, i64* %ob_refcnt29, align 8, !dbg !10694, !tbaa !2335
  %cmp31 = icmp ne i64 %dec30, 0, !dbg !10695
  br i1 %cmp31, label %if.then.32, label %if.else.33, !dbg !10696

if.then.32:                                       ; preds = %do.body.27
  br label %if.end.36, !dbg !10697

if.else.33:                                       ; preds = %do.body.27
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8, !dbg !10699, !tbaa !2326
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1, !dbg !10701
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8, !dbg !10701, !tbaa !2318
  %tp_dealloc35 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4, !dbg !10702
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc35, align 8, !dbg !10702, !tbaa !3442
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8, !dbg !10703, !tbaa !2326
  call void %41(%struct._object* %42), !dbg !10704
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.33, %if.then.32
  %43 = bitcast %struct._object** %_py_decref_tmp28 to i8*, !dbg !10705
  call void @llvm.lifetime.end(i64 8, i8* %43) #1, !dbg !10705
  br label %do.cond.37, !dbg !10707

do.cond.37:                                       ; preds = %if.end.36
  br label %do.end.38, !dbg !10708

do.end.38:                                        ; preds = %do.cond.37
  %44 = load %struct.if_nameindex*, %struct.if_nameindex** %ni, align 8, !dbg !10710, !tbaa !2326
  call void @if_freenameindex(%struct.if_nameindex* %44) #1, !dbg !10711
  store %struct._object* null, %struct._object** %retval, !dbg !10712
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10712

if.end.39:                                        ; preds = %lor.lhs.false
  br label %do.body.40, !dbg !10713

do.body.40:                                       ; preds = %if.end.39
  %45 = bitcast %struct._object** %_py_decref_tmp41 to i8*, !dbg !10714
  call void @llvm.lifetime.start(i64 8, i8* %45) #1, !dbg !10714
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp41, metadata !2006, metadata !2310), !dbg !10716
  %46 = load %struct._object*, %struct._object** %ni_tuple, align 8, !dbg !10717, !tbaa !2326
  store %struct._object* %46, %struct._object** %_py_decref_tmp41, align 8, !dbg !10716, !tbaa !2326
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8, !dbg !10718, !tbaa !2326
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 0, !dbg !10720
  %48 = load i64, i64* %ob_refcnt42, align 8, !dbg !10721, !tbaa !2335
  %dec43 = add i64 %48, -1, !dbg !10721
  store i64 %dec43, i64* %ob_refcnt42, align 8, !dbg !10721, !tbaa !2335
  %cmp44 = icmp ne i64 %dec43, 0, !dbg !10722
  br i1 %cmp44, label %if.then.45, label %if.else.46, !dbg !10723

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49, !dbg !10724

if.else.46:                                       ; preds = %do.body.40
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8, !dbg !10726, !tbaa !2326
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1, !dbg !10728
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8, !dbg !10728, !tbaa !2318
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 4, !dbg !10729
  %51 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8, !dbg !10729, !tbaa !3442
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8, !dbg !10730, !tbaa !2326
  call void %51(%struct._object* %52), !dbg !10731
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  %53 = bitcast %struct._object** %_py_decref_tmp41 to i8*, !dbg !10732
  call void @llvm.lifetime.end(i64 8, i8* %53) #1, !dbg !10732
  br label %do.cond.50, !dbg !10734

do.cond.50:                                       ; preds = %if.end.49
  br label %do.end.51, !dbg !10735

do.end.51:                                        ; preds = %do.cond.50
  store i32 0, i32* %cleanup.dest.slot, !dbg !10737
  br label %cleanup, !dbg !10737

cleanup:                                          ; preds = %do.end.51, %do.end.38
  %54 = bitcast %struct._object** %ni_tuple to i8*, !dbg !10738
  call void @llvm.lifetime.end(i64 8, i8* %54) #1, !dbg !10738
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %LeafBlock

LeafBlock:                                        ; preds = %cleanup
  %SwitchLeaf = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf, label %cleanup.cont, label %NewDefault

cleanup.cont:                                     ; preds = %LeafBlock
  br label %for.inc, !dbg !10739

for.inc:                                          ; preds = %cleanup.cont
  %55 = load i32, i32* %i, align 4, !dbg !10740, !tbaa !3034
  %inc = add i32 %55, 1, !dbg !10740
  store i32 %inc, i32* %i, align 4, !dbg !10740, !tbaa !3034
  br label %for.cond, !dbg !10741

for.end:                                          ; preds = %land.end
  %56 = load %struct.if_nameindex*, %struct.if_nameindex** %ni, align 8, !dbg !10742, !tbaa !2326
  call void @if_freenameindex(%struct.if_nameindex* %56) #1, !dbg !10743
  %57 = load %struct._object*, %struct._object** %list, align 8, !dbg !10744, !tbaa !2326
  store %struct._object* %57, %struct._object** %retval, !dbg !10745
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.52, !dbg !10745

NewDefault:                                       ; preds = %LeafBlock
  br label %cleanup.52

cleanup.52:                                       ; preds = %NewDefault, %for.end, %if.then.4, %if.then
  %58 = bitcast %struct.if_nameindex** %ni to i8*, !dbg !10746
  call void @llvm.lifetime.end(i64 8, i8* %58) #1, !dbg !10746
  %59 = bitcast i32* %i to i8*, !dbg !10746
  call void @llvm.lifetime.end(i64 4, i8* %59) #1, !dbg !10746
  %60 = bitcast %struct._object** %list to i8*, !dbg !10746
  call void @llvm.lifetime.end(i64 8, i8* %60) #1, !dbg !10746
  %61 = load %struct._object*, %struct._object** %retval, !dbg !10746
  ret %struct._object* %61, !dbg !10746
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_if_nametoindex(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %oname = alloca %struct._object*, align 8
  %index = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2010, metadata !2310), !dbg !10747
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2011, metadata !2310), !dbg !10748
  %0 = bitcast %struct._object** %oname to i8*, !dbg !10749
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !10749
  call void @llvm.dbg.declare(metadata %struct._object** %oname, metadata !2012, metadata !2310), !dbg !10750
  %1 = bitcast i64* %index to i8*, !dbg !10751
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !10751
  call void @llvm.dbg.declare(metadata i64* %index, metadata !2013, metadata !2310), !dbg !10752
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10753, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.470, i32 0, i32 0), i32 (%struct._object*, i8*)* @PyUnicode_FSConverter, %struct._object** %oname), !dbg !10755
  %tobool = icmp ne i32 %call, 0, !dbg !10755
  br i1 %tobool, label %if.end, label %if.then, !dbg !10756

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10757
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10757

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %oname, align 8, !dbg !10758, !tbaa !2326
  %4 = bitcast %struct._object* %3 to %struct.PyBytesObject*, !dbg !10759
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %4, i32 0, i32 2, !dbg !10760
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0, !dbg !10761
  %call1 = call i32 @if_nametoindex(i8* %arraydecay) #1, !dbg !10762
  %conv = zext i32 %call1 to i64, !dbg !10762
  store i64 %conv, i64* %index, align 8, !dbg !10763, !tbaa !2963
  br label %do.body, !dbg !10764

do.body:                                          ; preds = %if.end
  %5 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10765
  call void @llvm.lifetime.start(i64 8, i8* %5) #1, !dbg !10765
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !2014, metadata !2310), !dbg !10767
  %6 = load %struct._object*, %struct._object** %oname, align 8, !dbg !10768, !tbaa !2326
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8, !dbg !10767, !tbaa !2326
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10769, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0, !dbg !10771
  %8 = load i64, i64* %ob_refcnt, align 8, !dbg !10772, !tbaa !2335
  %dec = add i64 %8, -1, !dbg !10772
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !10772, !tbaa !2335
  %cmp = icmp ne i64 %dec, 0, !dbg !10773
  br i1 %cmp, label %if.then.3, label %if.else, !dbg !10774

if.then.3:                                        ; preds = %do.body
  br label %if.end.4, !dbg !10775

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10777, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1, !dbg !10779
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !10779, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4, !dbg !10780
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !10780, !tbaa !3442
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10781, !tbaa !2326
  call void %11(%struct._object* %12), !dbg !10782
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  %13 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10783
  call void @llvm.lifetime.end(i64 8, i8* %13) #1, !dbg !10783
  br label %do.cond, !dbg !10785

do.cond:                                          ; preds = %if.end.4
  br label %do.end, !dbg !10786

do.end:                                           ; preds = %do.cond
  %14 = load i64, i64* %index, align 8, !dbg !10788, !tbaa !2963
  %cmp5 = icmp eq i64 %14, 0, !dbg !10790
  br i1 %cmp5, label %if.then.7, label %if.end.8, !dbg !10791

if.then.7:                                        ; preds = %do.end
  %15 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !10792, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %15, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.471, i32 0, i32 0)), !dbg !10794
  store %struct._object* null, %struct._object** %retval, !dbg !10795
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10795

if.end.8:                                         ; preds = %do.end
  %16 = load i64, i64* %index, align 8, !dbg !10796, !tbaa !2963
  %call9 = call %struct._object* @PyLong_FromUnsignedLong(i64 %16), !dbg !10797
  store %struct._object* %call9, %struct._object** %retval, !dbg !10798
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10798

cleanup:                                          ; preds = %if.end.8, %if.then.7, %if.then
  %17 = bitcast i64* %index to i8*, !dbg !10799
  call void @llvm.lifetime.end(i64 8, i8* %17) #1, !dbg !10799
  %18 = bitcast %struct._object** %oname to i8*, !dbg !10799
  call void @llvm.lifetime.end(i64 8, i8* %18) #1, !dbg !10799
  %19 = load %struct._object*, %struct._object** %retval, !dbg !10799
  ret %struct._object* %19, !dbg !10799
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_if_indextoname(%struct._object* %self, %struct._object* %arg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %index = alloca i64, align 8
  %name = alloca [17 x i8], align 16
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2018, metadata !2310), !dbg !10800
  store %struct._object* %arg, %struct._object** %arg.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %arg.addr, metadata !2019, metadata !2310), !dbg !10801
  %0 = bitcast i64* %index to i8*, !dbg !10802
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !10802
  call void @llvm.dbg.declare(metadata i64* %index, metadata !2020, metadata !2310), !dbg !10803
  %1 = bitcast [17 x i8]* %name to i8*, !dbg !10804
  call void @llvm.lifetime.start(i64 17, i8* %1) #1, !dbg !10804
  call void @llvm.dbg.declare(metadata [17 x i8]* %name, metadata !2021, metadata !2310), !dbg !10805
  %2 = load %struct._object*, %struct._object** %arg.addr, align 8, !dbg !10806, !tbaa !2326
  %call = call i64 @PyLong_AsUnsignedLong(%struct._object* %2), !dbg !10807
  store i64 %call, i64* %index, align 8, !dbg !10808, !tbaa !2963
  %3 = load i64, i64* %index, align 8, !dbg !10809, !tbaa !2963
  %cmp = icmp eq i64 %3, -1, !dbg !10811
  br i1 %cmp, label %if.then, label %if.end, !dbg !10812

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10813
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10813

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %index, align 8, !dbg !10814, !tbaa !2963
  %conv = trunc i64 %4 to i32, !dbg !10814
  %arraydecay = getelementptr inbounds [17 x i8], [17 x i8]* %name, i32 0, i32 0, !dbg !10816
  %call1 = call i8* @if_indextoname(i32 %conv, i8* %arraydecay) #1, !dbg !10817
  %cmp2 = icmp eq i8* %call1, null, !dbg !10818
  br i1 %cmp2, label %if.then.4, label %if.end.6, !dbg !10819

if.then.4:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !10820, !tbaa !2326
  %call5 = call %struct._object* @PyErr_SetFromErrno(%struct._object* %5), !dbg !10822
  store %struct._object* null, %struct._object** %retval, !dbg !10823
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10823

if.end.6:                                         ; preds = %if.end
  %arraydecay7 = getelementptr inbounds [17 x i8], [17 x i8]* %name, i32 0, i32 0, !dbg !10824
  %call8 = call %struct._object* @PyUnicode_DecodeFSDefault(i8* %arraydecay7), !dbg !10825
  store %struct._object* %call8, %struct._object** %retval, !dbg !10826
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10826

cleanup:                                          ; preds = %if.end.6, %if.then.4, %if.then
  %6 = bitcast [17 x i8]* %name to i8*, !dbg !10827
  call void @llvm.lifetime.end(i64 17, i8* %6) #1, !dbg !10827
  %7 = bitcast i64* %index to i8*, !dbg !10827
  call void @llvm.lifetime.end(i64 8, i8* %7) #1, !dbg !10827
  %8 = load %struct._object*, %struct._object** %retval, !dbg !10827
  ret %struct._object* %8, !dbg !10827
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_CMSG_LEN(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %length = alloca i64, align 8
  %result = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2027, metadata !2310), !dbg !10828
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2028, metadata !2310), !dbg !10829
  %0 = bitcast i64* %length to i8*, !dbg !10830
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !10830
  call void @llvm.dbg.declare(metadata i64* %length, metadata !2029, metadata !2310), !dbg !10831
  %1 = bitcast i64* %result to i8*, !dbg !10832
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !10832
  call void @llvm.dbg.declare(metadata i64* %result, metadata !2030, metadata !2310), !dbg !10833
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10834, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.472, i32 0, i32 0), i64* %length), !dbg !10836
  %tobool = icmp ne i32 %call, 0, !dbg !10836
  br i1 %tobool, label %if.end, label %if.then, !dbg !10837

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10838
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10838

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %length, align 8, !dbg !10839, !tbaa !2963
  %cmp = icmp slt i64 %3, 0, !dbg !10841
  br i1 %cmp, label %if.then.3, label %lor.lhs.false, !dbg !10842

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i64, i64* %length, align 8, !dbg !10843, !tbaa !2963
  %call1 = call i32 @get_CMSG_LEN(i64 %4, i64* %result), !dbg !10845
  %tobool2 = icmp ne i32 %call1, 0, !dbg !10845
  br i1 %tobool2, label %if.end.5, label %if.then.3, !dbg !10846

if.then.3:                                        ; preds = %lor.lhs.false, %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !10847, !tbaa !2326
  %call4 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %5, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.473, i32 0, i32 0)), !dbg !10849
  store %struct._object* null, %struct._object** %retval, !dbg !10850
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10850

if.end.5:                                         ; preds = %lor.lhs.false
  %6 = load i64, i64* %result, align 8, !dbg !10851, !tbaa !2963
  %call6 = call %struct._object* @PyLong_FromSize_t(i64 %6), !dbg !10852
  store %struct._object* %call6, %struct._object** %retval, !dbg !10853
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10853

cleanup:                                          ; preds = %if.end.5, %if.then.3, %if.then
  %7 = bitcast i64* %result to i8*, !dbg !10854
  call void @llvm.lifetime.end(i64 8, i8* %7) #1, !dbg !10854
  %8 = bitcast i64* %length to i8*, !dbg !10854
  call void @llvm.lifetime.end(i64 8, i8* %8) #1, !dbg !10854
  %9 = load %struct._object*, %struct._object** %retval, !dbg !10854
  ret %struct._object* %9, !dbg !10854
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @socket_CMSG_SPACE(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %length = alloca i64, align 8
  %result = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct._object* %self, %struct._object** %self.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %self.addr, metadata !2033, metadata !2310), !dbg !10855
  store %struct._object* %args, %struct._object** %args.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct._object** %args.addr, metadata !2034, metadata !2310), !dbg !10856
  %0 = bitcast i64* %length to i8*, !dbg !10857
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !10857
  call void @llvm.dbg.declare(metadata i64* %length, metadata !2035, metadata !2310), !dbg !10858
  %1 = bitcast i64* %result to i8*, !dbg !10859
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !10859
  call void @llvm.dbg.declare(metadata i64* %result, metadata !2036, metadata !2310), !dbg !10860
  %2 = load %struct._object*, %struct._object** %args.addr, align 8, !dbg !10861, !tbaa !2326
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.474, i32 0, i32 0), i64* %length), !dbg !10863
  %tobool = icmp ne i32 %call, 0, !dbg !10863
  br i1 %tobool, label %if.end, label %if.then, !dbg !10864

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval, !dbg !10865
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10865

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %length, align 8, !dbg !10866, !tbaa !2963
  %cmp = icmp slt i64 %3, 0, !dbg !10868
  br i1 %cmp, label %if.then.3, label %lor.lhs.false, !dbg !10869

lor.lhs.false:                                    ; preds = %if.end
  %4 = load i64, i64* %length, align 8, !dbg !10870, !tbaa !2963
  %call1 = call i32 @get_CMSG_SPACE(i64 %4, i64* %result), !dbg !10872
  %tobool2 = icmp ne i32 %call1, 0, !dbg !10872
  br i1 %tobool2, label %if.end.4, label %if.then.3, !dbg !10873

if.then.3:                                        ; preds = %lor.lhs.false, %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8, !dbg !10874, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.475, i32 0, i32 0)), !dbg !10876
  store %struct._object* null, %struct._object** %retval, !dbg !10877
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10877

if.end.4:                                         ; preds = %lor.lhs.false
  %6 = load i64, i64* %result, align 8, !dbg !10878, !tbaa !2963
  %call5 = call %struct._object* @PyLong_FromSize_t(i64 %6), !dbg !10879
  store %struct._object* %call5, %struct._object** %retval, !dbg !10880
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10880

cleanup:                                          ; preds = %if.end.4, %if.then.3, %if.then
  %7 = bitcast i64* %result to i8*, !dbg !10881
  call void @llvm.lifetime.end(i64 8, i8* %7) #1, !dbg !10881
  %8 = bitcast i64* %length to i8*, !dbg !10881
  call void @llvm.lifetime.end(i64 8, i8* %8) #1, !dbg !10881
  %9 = load %struct._object*, %struct._object** %retval, !dbg !10881
  ret %struct._object* %9, !dbg !10881
}

declare i32 @gethostbyname_r(i8*, %struct.hostent*, i8*, i64, %struct.hostent**, i32*) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @gethost_common(%struct.hostent* %h, %struct.sockaddr* %addr, i32 %alen, i32 %af) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %h.addr = alloca %struct.hostent*, align 8
  %addr.addr = alloca %struct.sockaddr*, align 8
  %alen.addr = alloca i32, align 4
  %af.addr = alloca i32, align 4
  %pch = alloca i8**, align 8
  %rtn_tuple = alloca %struct._object*, align 8
  %name_list = alloca %struct._object*, align 8
  %addr_list = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %cleanup.dest.slot = alloca i32
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %status52 = alloca i32, align 4
  %sin = alloca %struct.sockaddr_in, align 4
  %sin6 = alloca %struct.sockaddr_in6, align 4
  %_py_decref_tmp88 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp117 = alloca %struct._object*, align 8
  %_py_xdecref_tmp134 = alloca %struct._object*, align 8
  %_py_decref_tmp140 = alloca %struct._object*, align 8
  store %struct.hostent* %h, %struct.hostent** %h.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.hostent** %h.addr, metadata !1641, metadata !2310), !dbg !10882
  store %struct.sockaddr* %addr, %struct.sockaddr** %addr.addr, align 8, !tbaa !2326
  call void @llvm.dbg.declare(metadata %struct.sockaddr** %addr.addr, metadata !1642, metadata !2310), !dbg !10883
  store i32 %alen, i32* %alen.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %alen.addr, metadata !1643, metadata !2310), !dbg !10884
  store i32 %af, i32* %af.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %af.addr, metadata !1644, metadata !2310), !dbg !10885
  %0 = bitcast i8*** %pch to i8*, !dbg !10886
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !10886
  call void @llvm.dbg.declare(metadata i8*** %pch, metadata !1645, metadata !2310), !dbg !10887
  %1 = bitcast %struct._object** %rtn_tuple to i8*, !dbg !10888
  call void @llvm.lifetime.start(i64 8, i8* %1) #1, !dbg !10888
  call void @llvm.dbg.declare(metadata %struct._object** %rtn_tuple, metadata !1646, metadata !2310), !dbg !10889
  store %struct._object* null, %struct._object** %rtn_tuple, align 8, !dbg !10889, !tbaa !2326
  %2 = bitcast %struct._object** %name_list to i8*, !dbg !10890
  call void @llvm.lifetime.start(i64 8, i8* %2) #1, !dbg !10890
  call void @llvm.dbg.declare(metadata %struct._object** %name_list, metadata !1647, metadata !2310), !dbg !10891
  store %struct._object* null, %struct._object** %name_list, align 8, !dbg !10891, !tbaa !2326
  %3 = bitcast %struct._object** %addr_list to i8*, !dbg !10892
  call void @llvm.lifetime.start(i64 8, i8* %3) #1, !dbg !10892
  call void @llvm.dbg.declare(metadata %struct._object** %addr_list, metadata !1648, metadata !2310), !dbg !10893
  store %struct._object* null, %struct._object** %addr_list, align 8, !dbg !10893, !tbaa !2326
  %4 = bitcast %struct._object** %tmp to i8*, !dbg !10894
  call void @llvm.lifetime.start(i64 8, i8* %4) #1, !dbg !10894
  call void @llvm.dbg.declare(metadata %struct._object** %tmp, metadata !1649, metadata !2310), !dbg !10895
  %5 = load %struct.hostent*, %struct.hostent** %h.addr, align 8, !dbg !10896, !tbaa !2326
  %cmp = icmp eq %struct.hostent* %5, null, !dbg !10898
  br i1 %cmp, label %if.then, label %if.end, !dbg !10899

if.then:                                          ; preds = %entry
  %call = call i32* @__h_errno_location() #2, !dbg !10900
  %6 = load i32, i32* %call, align 4, !dbg !10902, !tbaa !3034
  %call1 = call %struct._object* @set_herror(i32 %6), !dbg !10903
  store %struct._object* null, %struct._object** %retval, !dbg !10904
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.155, !dbg !10904

if.end:                                           ; preds = %entry
  %7 = load %struct.hostent*, %struct.hostent** %h.addr, align 8, !dbg !10905, !tbaa !2326
  %h_addrtype = getelementptr inbounds %struct.hostent, %struct.hostent* %7, i32 0, i32 2, !dbg !10907
  %8 = load i32, i32* %h_addrtype, align 4, !dbg !10907, !tbaa !10908
  %9 = load i32, i32* %af.addr, align 4, !dbg !10910, !tbaa !3034
  %cmp2 = icmp ne i32 %8, %9, !dbg !10911
  br i1 %cmp2, label %if.then.3, label %if.end.6, !dbg !10912

if.then.3:                                        ; preds = %if.end
  %call4 = call i32* @__errno_location() #2, !dbg !10913
  store i32 97, i32* %call4, align 4, !dbg !10915, !tbaa !3034
  %10 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !10916, !tbaa !2326
  %call5 = call %struct._object* @PyErr_SetFromErrno(%struct._object* %10), !dbg !10917
  store %struct._object* null, %struct._object** %retval, !dbg !10918
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.155, !dbg !10918

if.end.6:                                         ; preds = %if.end
  %11 = load i32, i32* %af.addr, align 4, !dbg !10919, !tbaa !3034
  br label %NodeBlock

NodeBlock:                                        ; preds = %if.end.6
  %Pivot = icmp slt i32 %11, 10
  br i1 %Pivot, label %LeafBlock, label %LeafBlock.1

LeafBlock.1:                                      ; preds = %NodeBlock
  %SwitchLeaf2 = icmp eq i32 %11, 10
  br i1 %SwitchLeaf2, label %sw.bb.11, label %NewDefault

LeafBlock:                                        ; preds = %NodeBlock
  %SwitchLeaf = icmp eq i32 %11, 2
  br i1 %SwitchLeaf, label %sw.bb, label %NewDefault

sw.bb:                                            ; preds = %LeafBlock
  %12 = load i32, i32* %alen.addr, align 4, !dbg !10920, !tbaa !3034
  %conv = sext i32 %12 to i64, !dbg !10920
  %cmp7 = icmp ult i64 %conv, 16, !dbg !10923
  br i1 %cmp7, label %if.then.9, label %if.end.10, !dbg !10924

if.then.9:                                        ; preds = %sw.bb
  store %struct._object* null, %struct._object** %retval, !dbg !10925
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.155, !dbg !10925

if.end.10:                                        ; preds = %sw.bb
  br label %sw.epilog, !dbg !10926

sw.bb.11:                                         ; preds = %LeafBlock.1
  %13 = load i32, i32* %alen.addr, align 4, !dbg !10927, !tbaa !3034
  %conv12 = sext i32 %13 to i64, !dbg !10927
  %cmp13 = icmp ult i64 %conv12, 28, !dbg !10929
  br i1 %cmp13, label %if.then.15, label %if.end.16, !dbg !10930

if.then.15:                                       ; preds = %sw.bb.11
  store %struct._object* null, %struct._object** %retval, !dbg !10931
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.155, !dbg !10931

if.end.16:                                        ; preds = %sw.bb.11
  br label %sw.epilog, !dbg !10932

NewDefault:                                       ; preds = %LeafBlock.1, %LeafBlock
  br label %sw.epilog

sw.epilog:                                        ; preds = %NewDefault, %if.end.16, %if.end.10
  %call17 = call %struct._object* @PyList_New(i64 0), !dbg !10933
  store %struct._object* %call17, %struct._object** %name_list, align 8, !dbg !10935, !tbaa !2326
  %cmp18 = icmp eq %struct._object* %call17, null, !dbg !10936
  br i1 %cmp18, label %if.then.20, label %if.end.21, !dbg !10937

if.then.20:                                       ; preds = %sw.epilog
  br label %err, !dbg !10938

if.end.21:                                        ; preds = %sw.epilog
  %call22 = call %struct._object* @PyList_New(i64 0), !dbg !10939
  store %struct._object* %call22, %struct._object** %addr_list, align 8, !dbg !10941, !tbaa !2326
  %cmp23 = icmp eq %struct._object* %call22, null, !dbg !10942
  br i1 %cmp23, label %if.then.25, label %if.end.26, !dbg !10943

if.then.25:                                       ; preds = %if.end.21
  br label %err, !dbg !10944

if.end.26:                                        ; preds = %if.end.21
  %14 = load %struct.hostent*, %struct.hostent** %h.addr, align 8, !dbg !10945, !tbaa !2326
  %h_aliases = getelementptr inbounds %struct.hostent, %struct.hostent* %14, i32 0, i32 1, !dbg !10946
  %15 = load i8**, i8*** %h_aliases, align 8, !dbg !10946, !tbaa !10947
  %tobool = icmp ne i8** %15, null, !dbg !10945
  br i1 %tobool, label %if.then.27, label %if.end.46, !dbg !10948

if.then.27:                                       ; preds = %if.end.26
  %16 = load %struct.hostent*, %struct.hostent** %h.addr, align 8, !dbg !10949, !tbaa !2326
  %h_aliases28 = getelementptr inbounds %struct.hostent, %struct.hostent* %16, i32 0, i32 1, !dbg !10950
  %17 = load i8**, i8*** %h_aliases28, align 8, !dbg !10950, !tbaa !10947
  store i8** %17, i8*** %pch, align 8, !dbg !10951, !tbaa !2326
  br label %for.cond, !dbg !10952

for.cond:                                         ; preds = %for.inc, %if.then.27
  %18 = load i8**, i8*** %pch, align 8, !dbg !10953, !tbaa !2326
  %19 = load i8*, i8** %18, align 8, !dbg !10956, !tbaa !2326
  %cmp29 = icmp ne i8* %19, null, !dbg !10957
  br i1 %cmp29, label %for.body, label %for.end, !dbg !10958

for.body:                                         ; preds = %for.cond
  %20 = bitcast i32* %status to i8*, !dbg !10959
  call void @llvm.lifetime.start(i64 4, i8* %20) #1, !dbg !10959
  call void @llvm.dbg.declare(metadata i32* %status, metadata !1650, metadata !2310), !dbg !10960
  %21 = load i8**, i8*** %pch, align 8, !dbg !10961, !tbaa !2326
  %22 = load i8*, i8** %21, align 8, !dbg !10962, !tbaa !2326
  %call32 = call %struct._object* @PyUnicode_FromString(i8* %22), !dbg !10963
  store %struct._object* %call32, %struct._object** %tmp, align 8, !dbg !10964, !tbaa !2326
  %23 = load %struct._object*, %struct._object** %tmp, align 8, !dbg !10965, !tbaa !2326
  %cmp33 = icmp eq %struct._object* %23, null, !dbg !10967
  br i1 %cmp33, label %if.then.35, label %if.end.36, !dbg !10968

if.then.35:                                       ; preds = %for.body
  store i32 3, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !10969

if.end.36:                                        ; preds = %for.body
  %24 = load %struct._object*, %struct._object** %name_list, align 8, !dbg !10970, !tbaa !2326
  %25 = load %struct._object*, %struct._object** %tmp, align 8, !dbg !10971, !tbaa !2326
  %call37 = call i32 @PyList_Append(%struct._object* %24, %struct._object* %25), !dbg !10972
  store i32 %call37, i32* %status, align 4, !dbg !10973, !tbaa !3034
  br label %do.body, !dbg !10974

do.body:                                          ; preds = %if.end.36
  %26 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10975
  call void @llvm.lifetime.start(i64 8, i8* %26) #1, !dbg !10975
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1656, metadata !2310), !dbg !10977
  %27 = load %struct._object*, %struct._object** %tmp, align 8, !dbg !10978, !tbaa !2326
  store %struct._object* %27, %struct._object** %_py_decref_tmp, align 8, !dbg !10977, !tbaa !2326
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10979, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0, !dbg !10981
  %29 = load i64, i64* %ob_refcnt, align 8, !dbg !10982, !tbaa !2335
  %dec = add i64 %29, -1, !dbg !10982
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !10982, !tbaa !2335
  %cmp39 = icmp ne i64 %dec, 0, !dbg !10983
  br i1 %cmp39, label %if.then.41, label %if.else, !dbg !10984

if.then.41:                                       ; preds = %do.body
  br label %if.end.42, !dbg !10985

if.else:                                          ; preds = %do.body
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10987, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1, !dbg !10989
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !10989, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4, !dbg !10990
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !10990, !tbaa !3442
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !10991, !tbaa !2326
  call void %32(%struct._object* %33), !dbg !10992
  br label %if.end.42

if.end.42:                                        ; preds = %if.else, %if.then.41
  %34 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !10993
  call void @llvm.lifetime.end(i64 8, i8* %34) #1, !dbg !10993
  br label %do.cond, !dbg !10995

do.cond:                                          ; preds = %if.end.42
  br label %do.end, !dbg !10996

do.end:                                           ; preds = %do.cond
  %35 = load i32, i32* %status, align 4, !dbg !10998, !tbaa !3034
  %tobool43 = icmp ne i32 %35, 0, !dbg !10998
  br i1 %tobool43, label %if.then.44, label %if.end.45, !dbg !11000

if.then.44:                                       ; preds = %do.end
  store i32 3, i32* %cleanup.dest.slot
  br label %cleanup, !dbg !11001

if.end.45:                                        ; preds = %do.end
  store i32 0, i32* %cleanup.dest.slot, !dbg !11002
  br label %cleanup, !dbg !11002

cleanup:                                          ; preds = %if.end.45, %if.then.44, %if.then.35
  %36 = bitcast i32* %status to i8*, !dbg !11003
  call void @llvm.lifetime.end(i64 4, i8* %36) #1, !dbg !11003
  %cleanup.dest = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock.8

NodeBlock.8:                                      ; preds = %cleanup
  %Pivot.9 = icmp slt i32 %cleanup.dest, 3
  br i1 %Pivot.9, label %LeafBlock.4, label %LeafBlock.6

LeafBlock.6:                                      ; preds = %NodeBlock.8
  %SwitchLeaf7 = icmp eq i32 %cleanup.dest, 3
  br i1 %SwitchLeaf7, label %err, label %NewDefault.3

LeafBlock.4:                                      ; preds = %NodeBlock.8
  %SwitchLeaf5 = icmp eq i32 %cleanup.dest, 0
  br i1 %SwitchLeaf5, label %cleanup.cont, label %NewDefault.3

cleanup.cont:                                     ; preds = %LeafBlock.4
  br label %for.inc, !dbg !11004

for.inc:                                          ; preds = %cleanup.cont
  %37 = load i8**, i8*** %pch, align 8, !dbg !11005, !tbaa !2326
  %incdec.ptr = getelementptr i8*, i8** %37, i32 1, !dbg !11005
  store i8** %incdec.ptr, i8*** %pch, align 8, !dbg !11005, !tbaa !2326
  br label %for.cond, !dbg !11006

for.end:                                          ; preds = %for.cond
  br label %if.end.46, !dbg !11007

if.end.46:                                        ; preds = %for.end, %if.end.26
  %38 = load %struct.hostent*, %struct.hostent** %h.addr, align 8, !dbg !11008, !tbaa !2326
  %h_addr_list = getelementptr inbounds %struct.hostent, %struct.hostent* %38, i32 0, i32 4, !dbg !11009
  %39 = load i8**, i8*** %h_addr_list, align 8, !dbg !11009, !tbaa !11010
  store i8** %39, i8*** %pch, align 8, !dbg !11011, !tbaa !2326
  br label %for.cond.47, !dbg !11012

for.cond.47:                                      ; preds = %for.inc.106, %if.end.46
  %40 = load i8**, i8*** %pch, align 8, !dbg !11013, !tbaa !2326
  %41 = load i8*, i8** %40, align 8, !dbg !11016, !tbaa !2326
  %cmp48 = icmp ne i8* %41, null, !dbg !11017
  br i1 %cmp48, label %for.body.50, label %for.end.108, !dbg !11018

for.body.50:                                      ; preds = %for.cond.47
  %42 = bitcast i32* %status52 to i8*, !dbg !11019
  call void @llvm.lifetime.start(i64 4, i8* %42) #1, !dbg !11019
  call void @llvm.dbg.declare(metadata i32* %status52, metadata !1658, metadata !2310), !dbg !11020
  %43 = load i32, i32* %af.addr, align 4, !dbg !11021, !tbaa !3034
  br label %NodeBlock.15

NodeBlock.15:                                     ; preds = %for.body.50
  %Pivot.16 = icmp slt i32 %43, 10
  br i1 %Pivot.16, label %LeafBlock.11, label %LeafBlock.13

LeafBlock.13:                                     ; preds = %NodeBlock.15
  %SwitchLeaf14 = icmp eq i32 %43, 10
  br i1 %SwitchLeaf14, label %sw.bb.66, label %NewDefault.10

LeafBlock.11:                                     ; preds = %NodeBlock.15
  %SwitchLeaf12 = icmp eq i32 %43, 2
  br i1 %SwitchLeaf12, label %sw.bb.53, label %NewDefault.10

sw.bb.53:                                         ; preds = %LeafBlock.11
  %44 = bitcast %struct.sockaddr_in* %sin to i8*, !dbg !11022
  call void @llvm.lifetime.start(i64 16, i8* %44) #1, !dbg !11022
  call void @llvm.dbg.declare(metadata %struct.sockaddr_in* %sin, metadata !1662, metadata !2310), !dbg !11023
  %45 = bitcast %struct.sockaddr_in* %sin to i8*, !dbg !11024
  call void @llvm.memset.p0i8.i64(i8* %45, i8 0, i64 16, i32 4, i1 false), !dbg !11024
  %46 = load i32, i32* %af.addr, align 4, !dbg !11025, !tbaa !3034
  %conv55 = trunc i32 %46 to i16, !dbg !11025
  %sin_family = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 0, !dbg !11026
  store i16 %conv55, i16* %sin_family, align 2, !dbg !11027, !tbaa !6701
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 2, !dbg !11028
  %47 = bitcast %struct.in_addr* %sin_addr to i8*, !dbg !11029
  %48 = load i8**, i8*** %pch, align 8, !dbg !11030, !tbaa !2326
  %49 = load i8*, i8** %48, align 8, !dbg !11031, !tbaa !2326
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %49, i64 4, i32 1, i1 false), !dbg !11029
  %50 = bitcast %struct.sockaddr_in* %sin to %struct.sockaddr*, !dbg !11032
  %call56 = call %struct._object* @makeipaddr(%struct.sockaddr* %50, i32 16), !dbg !11033
  store %struct._object* %call56, %struct._object** %tmp, align 8, !dbg !11034, !tbaa !2326
  %51 = load i8**, i8*** %pch, align 8, !dbg !11035, !tbaa !2326
  %52 = load %struct.hostent*, %struct.hostent** %h.addr, align 8, !dbg !11037, !tbaa !2326
  %h_addr_list57 = getelementptr inbounds %struct.hostent, %struct.hostent* %52, i32 0, i32 4, !dbg !11038
  %53 = load i8**, i8*** %h_addr_list57, align 8, !dbg !11038, !tbaa !11010
  %cmp58 = icmp eq i8** %51, %53, !dbg !11039
  br i1 %cmp58, label %land.lhs.true, label %if.end.64, !dbg !11040

land.lhs.true:                                    ; preds = %sw.bb.53
  %54 = load i32, i32* %alen.addr, align 4, !dbg !11041, !tbaa !3034
  %conv60 = sext i32 %54 to i64, !dbg !11041
  %cmp61 = icmp uge i64 %conv60, 16, !dbg !11043
  br i1 %cmp61, label %if.then.63, label %if.end.64, !dbg !11044

if.then.63:                                       ; preds = %land.lhs.true
  %55 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !11045, !tbaa !2326
  %56 = bitcast %struct.sockaddr* %55 to i8*, !dbg !11046
  %57 = bitcast %struct.sockaddr_in* %sin to i8*, !dbg !11047
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %56, i8* %57, i64 16, i32 1, i1 false), !dbg !11047
  br label %if.end.64, !dbg !11047

if.end.64:                                        ; preds = %if.then.63, %land.lhs.true, %sw.bb.53
  store i32 12, i32* %cleanup.dest.slot
  %58 = bitcast %struct.sockaddr_in* %sin to i8*, !dbg !11048
  call void @llvm.lifetime.end(i64 16, i8* %58) #1, !dbg !11048
  br label %sw.epilog.80

sw.bb.66:                                         ; preds = %LeafBlock.13
  %59 = bitcast %struct.sockaddr_in6* %sin6 to i8*, !dbg !11049
  call void @llvm.lifetime.start(i64 28, i8* %59) #1, !dbg !11049
  call void @llvm.dbg.declare(metadata %struct.sockaddr_in6* %sin6, metadata !1665, metadata !2310), !dbg !11050
  %60 = bitcast %struct.sockaddr_in6* %sin6 to i8*, !dbg !11051
  call void @llvm.memset.p0i8.i64(i8* %60, i8 0, i64 28, i32 4, i1 false), !dbg !11051
  %61 = load i32, i32* %af.addr, align 4, !dbg !11052, !tbaa !3034
  %conv68 = trunc i32 %61 to i16, !dbg !11052
  %sin6_family = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %sin6, i32 0, i32 0, !dbg !11053
  store i16 %conv68, i16* %sin6_family, align 2, !dbg !11054, !tbaa !6794
  %sin6_addr = getelementptr inbounds %struct.sockaddr_in6, %struct.sockaddr_in6* %sin6, i32 0, i32 3, !dbg !11055
  %62 = bitcast %struct.in6_addr* %sin6_addr to i8*, !dbg !11056
  %63 = load i8**, i8*** %pch, align 8, !dbg !11057, !tbaa !2326
  %64 = load i8*, i8** %63, align 8, !dbg !11058, !tbaa !2326
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %64, i64 16, i32 1, i1 false), !dbg !11056
  %65 = bitcast %struct.sockaddr_in6* %sin6 to %struct.sockaddr*, !dbg !11059
  %call69 = call %struct._object* @makeipaddr(%struct.sockaddr* %65, i32 28), !dbg !11060
  store %struct._object* %call69, %struct._object** %tmp, align 8, !dbg !11061, !tbaa !2326
  %66 = load i8**, i8*** %pch, align 8, !dbg !11062, !tbaa !2326
  %67 = load %struct.hostent*, %struct.hostent** %h.addr, align 8, !dbg !11064, !tbaa !2326
  %h_addr_list70 = getelementptr inbounds %struct.hostent, %struct.hostent* %67, i32 0, i32 4, !dbg !11065
  %68 = load i8**, i8*** %h_addr_list70, align 8, !dbg !11065, !tbaa !11010
  %cmp71 = icmp eq i8** %66, %68, !dbg !11066
  br i1 %cmp71, label %land.lhs.true.73, label %if.end.78, !dbg !11067

land.lhs.true.73:                                 ; preds = %sw.bb.66
  %69 = load i32, i32* %alen.addr, align 4, !dbg !11068, !tbaa !3034
  %conv74 = sext i32 %69 to i64, !dbg !11068
  %cmp75 = icmp uge i64 %conv74, 28, !dbg !11070
  br i1 %cmp75, label %if.then.77, label %if.end.78, !dbg !11071

if.then.77:                                       ; preds = %land.lhs.true.73
  %70 = load %struct.sockaddr*, %struct.sockaddr** %addr.addr, align 8, !dbg !11072, !tbaa !2326
  %71 = bitcast %struct.sockaddr* %70 to i8*, !dbg !11073
  %72 = bitcast %struct.sockaddr_in6* %sin6 to i8*, !dbg !11074
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %71, i8* %72, i64 28, i32 1, i1 false), !dbg !11074
  br label %if.end.78, !dbg !11074

if.end.78:                                        ; preds = %if.then.77, %land.lhs.true.73, %sw.bb.66
  store i32 12, i32* %cleanup.dest.slot
  %73 = bitcast %struct.sockaddr_in6* %sin6 to i8*, !dbg !11075
  call void @llvm.lifetime.end(i64 28, i8* %73) #1, !dbg !11075
  br label %sw.epilog.80

NewDefault.10:                                    ; preds = %LeafBlock.13, %LeafBlock.11
  br label %sw.default

sw.default:                                       ; preds = %NewDefault.10
  %74 = load %struct._object*, %struct._object** @PyExc_OSError, align 8, !dbg !11076, !tbaa !2326
  call void @PyErr_SetString(%struct._object* %74, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.334, i32 0, i32 0)), !dbg !11077
  store %struct._object* null, %struct._object** %retval, !dbg !11078
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.103, !dbg !11078

sw.epilog.80:                                     ; preds = %if.end.78, %if.end.64
  %75 = load %struct._object*, %struct._object** %tmp, align 8, !dbg !11079, !tbaa !2326
  %cmp81 = icmp eq %struct._object* %75, null, !dbg !11081
  br i1 %cmp81, label %if.then.83, label %if.end.84, !dbg !11082

if.then.83:                                       ; preds = %sw.epilog.80
  store i32 3, i32* %cleanup.dest.slot
  br label %cleanup.103, !dbg !11083

if.end.84:                                        ; preds = %sw.epilog.80
  %76 = load %struct._object*, %struct._object** %addr_list, align 8, !dbg !11084, !tbaa !2326
  %77 = load %struct._object*, %struct._object** %tmp, align 8, !dbg !11085, !tbaa !2326
  %call85 = call i32 @PyList_Append(%struct._object* %76, %struct._object* %77), !dbg !11086
  store i32 %call85, i32* %status52, align 4, !dbg !11087, !tbaa !3034
  br label %do.body.86, !dbg !11088

do.body.86:                                       ; preds = %if.end.84
  %78 = bitcast %struct._object** %_py_decref_tmp88 to i8*, !dbg !11089
  call void @llvm.lifetime.start(i64 8, i8* %78) #1, !dbg !11089
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp88, metadata !1667, metadata !2310), !dbg !11091
  %79 = load %struct._object*, %struct._object** %tmp, align 8, !dbg !11092, !tbaa !2326
  store %struct._object* %79, %struct._object** %_py_decref_tmp88, align 8, !dbg !11091, !tbaa !2326
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8, !dbg !11093, !tbaa !2326
  %ob_refcnt89 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 0, !dbg !11095
  %81 = load i64, i64* %ob_refcnt89, align 8, !dbg !11096, !tbaa !2335
  %dec90 = add i64 %81, -1, !dbg !11096
  store i64 %dec90, i64* %ob_refcnt89, align 8, !dbg !11096, !tbaa !2335
  %cmp91 = icmp ne i64 %dec90, 0, !dbg !11097
  br i1 %cmp91, label %if.then.93, label %if.else.94, !dbg !11098

if.then.93:                                       ; preds = %do.body.86
  br label %if.end.97, !dbg !11099

if.else.94:                                       ; preds = %do.body.86
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8, !dbg !11101, !tbaa !2326
  %ob_type95 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 1, !dbg !11103
  %83 = load %struct._typeobject*, %struct._typeobject** %ob_type95, align 8, !dbg !11103, !tbaa !2318
  %tp_dealloc96 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %83, i32 0, i32 4, !dbg !11104
  %84 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc96, align 8, !dbg !11104, !tbaa !3442
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8, !dbg !11105, !tbaa !2326
  call void %84(%struct._object* %85), !dbg !11106
  br label %if.end.97

if.end.97:                                        ; preds = %if.else.94, %if.then.93
  %86 = bitcast %struct._object** %_py_decref_tmp88 to i8*, !dbg !11107
  call void @llvm.lifetime.end(i64 8, i8* %86) #1, !dbg !11107
  br label %do.cond.98, !dbg !11109

do.cond.98:                                       ; preds = %if.end.97
  br label %do.end.99, !dbg !11110

do.end.99:                                        ; preds = %do.cond.98
  %87 = load i32, i32* %status52, align 4, !dbg !11112, !tbaa !3034
  %tobool100 = icmp ne i32 %87, 0, !dbg !11112
  br i1 %tobool100, label %if.then.101, label %if.end.102, !dbg !11114

if.then.101:                                      ; preds = %do.end.99
  store i32 3, i32* %cleanup.dest.slot
  br label %cleanup.103, !dbg !11115

if.end.102:                                       ; preds = %do.end.99
  store i32 0, i32* %cleanup.dest.slot, !dbg !11116
  br label %cleanup.103, !dbg !11116

cleanup.103:                                      ; preds = %if.end.102, %if.then.101, %if.then.83, %sw.default
  %88 = bitcast i32* %status52 to i8*, !dbg !11117
  call void @llvm.lifetime.end(i64 4, i8* %88) #1, !dbg !11117
  %cleanup.dest.104 = load i32, i32* %cleanup.dest.slot
  br label %NodeBlock.22

NodeBlock.22:                                     ; preds = %cleanup.103
  %Pivot.23 = icmp slt i32 %cleanup.dest.104, 3
  br i1 %Pivot.23, label %LeafBlock.18, label %LeafBlock.20

LeafBlock.20:                                     ; preds = %NodeBlock.22
  %SwitchLeaf21 = icmp eq i32 %cleanup.dest.104, 3
  br i1 %SwitchLeaf21, label %err, label %NewDefault.17

LeafBlock.18:                                     ; preds = %NodeBlock.22
  %SwitchLeaf19 = icmp eq i32 %cleanup.dest.104, 0
  br i1 %SwitchLeaf19, label %cleanup.cont.105, label %NewDefault.17

cleanup.cont.105:                                 ; preds = %LeafBlock.18
  br label %for.inc.106, !dbg !11118

for.inc.106:                                      ; preds = %cleanup.cont.105
  %89 = load i8**, i8*** %pch, align 8, !dbg !11119, !tbaa !2326
  %incdec.ptr107 = getelementptr i8*, i8** %89, i32 1, !dbg !11119
  store i8** %incdec.ptr107, i8*** %pch, align 8, !dbg !11119, !tbaa !2326
  br label %for.cond.47, !dbg !11120

for.end.108:                                      ; preds = %for.cond.47
  %90 = load %struct.hostent*, %struct.hostent** %h.addr, align 8, !dbg !11121, !tbaa !2326
  %h_name = getelementptr inbounds %struct.hostent, %struct.hostent* %90, i32 0, i32 0, !dbg !11122
  %91 = load i8*, i8** %h_name, align 8, !dbg !11122, !tbaa !11123
  %92 = load %struct._object*, %struct._object** %name_list, align 8, !dbg !11124, !tbaa !2326
  %93 = load %struct._object*, %struct._object** %addr_list, align 8, !dbg !11125, !tbaa !2326
  %call109 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.427, i32 0, i32 0), i8* %91, %struct._object* %92, %struct._object* %93), !dbg !11126
  store %struct._object* %call109, %struct._object** %rtn_tuple, align 8, !dbg !11127, !tbaa !2326
  br label %err, !dbg !11128

err:                                              ; preds = %LeafBlock.20, %LeafBlock.6, %for.end.108, %if.then.25, %if.then.20
  br label %do.body.110, !dbg !11129

do.body.110:                                      ; preds = %err
  %94 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !11130
  call void @llvm.lifetime.start(i64 8, i8* %94) #1, !dbg !11130
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp, metadata !1669, metadata !2310), !dbg !11132
  %95 = load %struct._object*, %struct._object** %name_list, align 8, !dbg !11133, !tbaa !2326
  store %struct._object* %95, %struct._object** %_py_xdecref_tmp, align 8, !dbg !11132, !tbaa !2326
  %96 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !11134, !tbaa !2326
  %cmp112 = icmp ne %struct._object* %96, null, !dbg !11135
  br i1 %cmp112, label %if.then.114, label %if.end.129, !dbg !11136

if.then.114:                                      ; preds = %do.body.110
  br label %do.body.115, !dbg !11137

do.body.115:                                      ; preds = %if.then.114
  %97 = bitcast %struct._object** %_py_decref_tmp117 to i8*, !dbg !11139
  call void @llvm.lifetime.start(i64 8, i8* %97) #1, !dbg !11139
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp117, metadata !1671, metadata !2310), !dbg !11141
  %98 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8, !dbg !11142, !tbaa !2326
  store %struct._object* %98, %struct._object** %_py_decref_tmp117, align 8, !dbg !11141, !tbaa !2326
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp117, align 8, !dbg !11143, !tbaa !2326
  %ob_refcnt118 = getelementptr inbounds %struct._object, %struct._object* %99, i32 0, i32 0, !dbg !11145
  %100 = load i64, i64* %ob_refcnt118, align 8, !dbg !11146, !tbaa !2335
  %dec119 = add i64 %100, -1, !dbg !11146
  store i64 %dec119, i64* %ob_refcnt118, align 8, !dbg !11146, !tbaa !2335
  %cmp120 = icmp ne i64 %dec119, 0, !dbg !11147
  br i1 %cmp120, label %if.then.122, label %if.else.123, !dbg !11148

if.then.122:                                      ; preds = %do.body.115
  br label %if.end.126, !dbg !11149

if.else.123:                                      ; preds = %do.body.115
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp117, align 8, !dbg !11151, !tbaa !2326
  %ob_type124 = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 1, !dbg !11153
  %102 = load %struct._typeobject*, %struct._typeobject** %ob_type124, align 8, !dbg !11153, !tbaa !2318
  %tp_dealloc125 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %102, i32 0, i32 4, !dbg !11154
  %103 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc125, align 8, !dbg !11154, !tbaa !3442
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp117, align 8, !dbg !11155, !tbaa !2326
  call void %103(%struct._object* %104), !dbg !11156
  br label %if.end.126

if.end.126:                                       ; preds = %if.else.123, %if.then.122
  %105 = bitcast %struct._object** %_py_decref_tmp117 to i8*, !dbg !11157
  call void @llvm.lifetime.end(i64 8, i8* %105) #1, !dbg !11157
  br label %do.cond.127, !dbg !11159

do.cond.127:                                      ; preds = %if.end.126
  br label %do.end.128, !dbg !11160

do.end.128:                                       ; preds = %do.cond.127
  br label %if.end.129, !dbg !11162

if.end.129:                                       ; preds = %do.end.128, %do.body.110
  %106 = bitcast %struct._object** %_py_xdecref_tmp to i8*, !dbg !11164
  call void @llvm.lifetime.end(i64 8, i8* %106) #1, !dbg !11164
  br label %do.cond.130, !dbg !11167

do.cond.130:                                      ; preds = %if.end.129
  br label %do.end.131, !dbg !11168

do.end.131:                                       ; preds = %do.cond.130
  br label %do.body.132, !dbg !11170

do.body.132:                                      ; preds = %do.end.131
  %107 = bitcast %struct._object** %_py_xdecref_tmp134 to i8*, !dbg !11171
  call void @llvm.lifetime.start(i64 8, i8* %107) #1, !dbg !11171
  call void @llvm.dbg.declare(metadata %struct._object** %_py_xdecref_tmp134, metadata !1674, metadata !2310), !dbg !11173
  %108 = load %struct._object*, %struct._object** %addr_list, align 8, !dbg !11174, !tbaa !2326
  store %struct._object* %108, %struct._object** %_py_xdecref_tmp134, align 8, !dbg !11173, !tbaa !2326
  %109 = load %struct._object*, %struct._object** %_py_xdecref_tmp134, align 8, !dbg !11175, !tbaa !2326
  %cmp135 = icmp ne %struct._object* %109, null, !dbg !11176
  br i1 %cmp135, label %if.then.137, label %if.end.152, !dbg !11177

if.then.137:                                      ; preds = %do.body.132
  br label %do.body.138, !dbg !11178

do.body.138:                                      ; preds = %if.then.137
  %110 = bitcast %struct._object** %_py_decref_tmp140 to i8*, !dbg !11180
  call void @llvm.lifetime.start(i64 8, i8* %110) #1, !dbg !11180
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp140, metadata !1676, metadata !2310), !dbg !11182
  %111 = load %struct._object*, %struct._object** %_py_xdecref_tmp134, align 8, !dbg !11183, !tbaa !2326
  store %struct._object* %111, %struct._object** %_py_decref_tmp140, align 8, !dbg !11182, !tbaa !2326
  %112 = load %struct._object*, %struct._object** %_py_decref_tmp140, align 8, !dbg !11184, !tbaa !2326
  %ob_refcnt141 = getelementptr inbounds %struct._object, %struct._object* %112, i32 0, i32 0, !dbg !11186
  %113 = load i64, i64* %ob_refcnt141, align 8, !dbg !11187, !tbaa !2335
  %dec142 = add i64 %113, -1, !dbg !11187
  store i64 %dec142, i64* %ob_refcnt141, align 8, !dbg !11187, !tbaa !2335
  %cmp143 = icmp ne i64 %dec142, 0, !dbg !11188
  br i1 %cmp143, label %if.then.145, label %if.else.146, !dbg !11189

if.then.145:                                      ; preds = %do.body.138
  br label %if.end.149, !dbg !11190

if.else.146:                                      ; preds = %do.body.138
  %114 = load %struct._object*, %struct._object** %_py_decref_tmp140, align 8, !dbg !11192, !tbaa !2326
  %ob_type147 = getelementptr inbounds %struct._object, %struct._object* %114, i32 0, i32 1, !dbg !11194
  %115 = load %struct._typeobject*, %struct._typeobject** %ob_type147, align 8, !dbg !11194, !tbaa !2318
  %tp_dealloc148 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %115, i32 0, i32 4, !dbg !11195
  %116 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc148, align 8, !dbg !11195, !tbaa !3442
  %117 = load %struct._object*, %struct._object** %_py_decref_tmp140, align 8, !dbg !11196, !tbaa !2326
  call void %116(%struct._object* %117), !dbg !11197
  br label %if.end.149

if.end.149:                                       ; preds = %if.else.146, %if.then.145
  %118 = bitcast %struct._object** %_py_decref_tmp140 to i8*, !dbg !11198
  call void @llvm.lifetime.end(i64 8, i8* %118) #1, !dbg !11198
  br label %do.cond.150, !dbg !11200

do.cond.150:                                      ; preds = %if.end.149
  br label %do.end.151, !dbg !11201

do.end.151:                                       ; preds = %do.cond.150
  br label %if.end.152, !dbg !11203

if.end.152:                                       ; preds = %do.end.151, %do.body.132
  %119 = bitcast %struct._object** %_py_xdecref_tmp134 to i8*, !dbg !11205
  call void @llvm.lifetime.end(i64 8, i8* %119) #1, !dbg !11205
  br label %do.cond.153, !dbg !11206

do.cond.153:                                      ; preds = %if.end.152
  br label %do.end.154, !dbg !11207

do.end.154:                                       ; preds = %do.cond.153
  %120 = load %struct._object*, %struct._object** %rtn_tuple, align 8, !dbg !11209, !tbaa !2326
  store %struct._object* %120, %struct._object** %retval, !dbg !11210
  store i32 1, i32* %cleanup.dest.slot
  br label %cleanup.155, !dbg !11210

NewDefault.3:                                     ; preds = %LeafBlock.6, %LeafBlock.4
  br label %cleanup.155

NewDefault.17:                                    ; preds = %LeafBlock.20, %LeafBlock.18
  br label %cleanup.155

cleanup.155:                                      ; preds = %NewDefault.17, %NewDefault.3, %do.end.154, %if.then.15, %if.then.9, %if.then.3, %if.then
  %121 = bitcast %struct._object** %tmp to i8*, !dbg !11211
  call void @llvm.lifetime.end(i64 8, i8* %121) #1, !dbg !11211
  %122 = bitcast %struct._object** %addr_list to i8*, !dbg !11211
  call void @llvm.lifetime.end(i64 8, i8* %122) #1, !dbg !11211
  %123 = bitcast %struct._object** %name_list to i8*, !dbg !11211
  call void @llvm.lifetime.end(i64 8, i8* %123) #1, !dbg !11211
  %124 = bitcast %struct._object** %rtn_tuple to i8*, !dbg !11211
  call void @llvm.lifetime.end(i64 8, i8* %124) #1, !dbg !11211
  %125 = bitcast i8*** %pch to i8*, !dbg !11211
  call void @llvm.lifetime.end(i64 8, i8* %125) #1, !dbg !11211
  %126 = load %struct._object*, %struct._object** %retval, !dbg !11211
  ret %struct._object* %126, !dbg !11211
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @set_herror(i32 %h_error) #0 {
entry:
  %h_error.addr = alloca i32, align 4
  %v = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store i32 %h_error, i32* %h_error.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %h_error.addr, metadata !1681, metadata !2310), !dbg !11212
  %0 = bitcast %struct._object** %v to i8*, !dbg !11213
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !11213
  call void @llvm.dbg.declare(metadata %struct._object** %v, metadata !1682, metadata !2310), !dbg !11214
  %1 = load i32, i32* %h_error.addr, align 4, !dbg !11215, !tbaa !3034
  %2 = load i32, i32* %h_error.addr, align 4, !dbg !11216, !tbaa !3034
  %call = call i8* @hstrerror(i32 %2) #1, !dbg !11217
  %call1 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.311, i32 0, i32 0), i32 %1, i8* %call), !dbg !11218
  store %struct._object* %call1, %struct._object** %v, align 8, !dbg !11219, !tbaa !2326
  %3 = load %struct._object*, %struct._object** %v, align 8, !dbg !11220, !tbaa !2326
  %cmp = icmp ne %struct._object* %3, null, !dbg !11221
  br i1 %cmp, label %if.then, label %if.end.4, !dbg !11222

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** @socket_herror, align 8, !dbg !11223, !tbaa !2326
  %5 = load %struct._object*, %struct._object** %v, align 8, !dbg !11224, !tbaa !2326
  call void @PyErr_SetObject(%struct._object* %4, %struct._object* %5), !dbg !11225
  br label %do.body, !dbg !11226

do.body:                                          ; preds = %if.then
  %6 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !11227
  call void @llvm.lifetime.start(i64 8, i8* %6) #1, !dbg !11227
  call void @llvm.dbg.declare(metadata %struct._object** %_py_decref_tmp, metadata !1683, metadata !2310), !dbg !11229
  %7 = load %struct._object*, %struct._object** %v, align 8, !dbg !11230, !tbaa !2326
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8, !dbg !11229, !tbaa !2326
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11231, !tbaa !2326
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0, !dbg !11233
  %9 = load i64, i64* %ob_refcnt, align 8, !dbg !11234, !tbaa !2335
  %dec = add i64 %9, -1, !dbg !11234
  store i64 %dec, i64* %ob_refcnt, align 8, !dbg !11234, !tbaa !2335
  %cmp2 = icmp ne i64 %dec, 0, !dbg !11235
  br i1 %cmp2, label %if.then.3, label %if.else, !dbg !11236

if.then.3:                                        ; preds = %do.body
  br label %if.end, !dbg !11237

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11239, !tbaa !2326
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1, !dbg !11241
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8, !dbg !11241, !tbaa !2318
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4, !dbg !11242
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8, !dbg !11242, !tbaa !3442
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8, !dbg !11243, !tbaa !2326
  call void %12(%struct._object* %13), !dbg !11244
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  %14 = bitcast %struct._object** %_py_decref_tmp to i8*, !dbg !11245
  call void @llvm.lifetime.end(i64 8, i8* %14) #1, !dbg !11245
  br label %do.cond, !dbg !11247

do.cond:                                          ; preds = %if.end
  br label %do.end, !dbg !11248

do.end:                                           ; preds = %do.cond
  br label %if.end.4, !dbg !11250

if.end.4:                                         ; preds = %do.end, %entry
  %15 = bitcast %struct._object** %v to i8*, !dbg !11251
  call void @llvm.lifetime.end(i64 8, i8* %15) #1, !dbg !11251
  ret %struct._object* null, !dbg !11252
}

; Function Attrs: nounwind readnone
declare i32* @__h_errno_location() #4

; Function Attrs: nounwind
declare i8* @hstrerror(i32) #5

declare i32 @gethostbyaddr_r(i8*, i32, i32, %struct.hostent*, i8*, i64, %struct.hostent**, i32*) #3

; Function Attrs: nounwind
declare i32 @gethostname(i8*, i64) #5

declare i32 @PyObject_GetBuffer(%struct._object*, %struct.bufferinfo*, i32) #3

; Function Attrs: nounwind
declare i32 @sethostname(i8*, i64) #5

declare %struct.servent* @getservbyname(i8*, i8*) #3

declare %struct.servent* @getservbyport(i32, i8*) #3

declare %struct.protoent* @getprotobyname(i8*) #3

declare i32 @_Py_dup(i32) #3

; Function Attrs: nounwind
declare i32 @socketpair(i32, i32, i32, i32*) #5

; Function Attrs: nounwind uwtable
define internal %struct.PySocketSockObject* @new_sockobject(i32 %fd, i32 %family, i32 %type, i32 %proto) #0 {
entry:
  %fd.addr = alloca i32, align 4
  %family.addr = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %proto.addr = alloca i32, align 4
  %s = alloca %struct.PySocketSockObject*, align 8
  store i32 %fd, i32* %fd.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %fd.addr, metadata !1811, metadata !2310), !dbg !11253
  store i32 %family, i32* %family.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %family.addr, metadata !1812, metadata !2310), !dbg !11254
  store i32 %type, i32* %type.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1813, metadata !2310), !dbg !11255
  store i32 %proto, i32* %proto.addr, align 4, !tbaa !3034
  call void @llvm.dbg.declare(metadata i32* %proto.addr, metadata !1814, metadata !2310), !dbg !11256
  %0 = bitcast %struct.PySocketSockObject** %s to i8*, !dbg !11257
  call void @llvm.lifetime.start(i64 8, i8* %0) #1, !dbg !11257
  call void @llvm.dbg.declare(metadata %struct.PySocketSockObject** %s, metadata !1815, metadata !2310), !dbg !11258
  %call = call %struct._object* @PyType_GenericNew(%struct._typeobject* @sock_type, %struct._object* null, %struct._object* null), !dbg !11259
  %1 = bitcast %struct._object* %call to %struct.PySocketSockObject*, !dbg !11260
  store %struct.PySocketSockObject* %1, %struct.PySocketSockObject** %s, align 8, !dbg !11261, !tbaa !2326
  %2 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s, align 8, !dbg !11262, !tbaa !2326
  %cmp = icmp ne %struct.PySocketSockObject* %2, null, !dbg !11264
  br i1 %cmp, label %if.then, label %if.end, !dbg !11265

if.then:                                          ; preds = %entry
  %3 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s, align 8, !dbg !11266, !tbaa !2326
  %4 = load i32, i32* %fd.addr, align 4, !dbg !11267, !tbaa !3034
  %5 = load i32, i32* %family.addr, align 4, !dbg !11268, !tbaa !3034
  %6 = load i32, i32* %type.addr, align 4, !dbg !11269, !tbaa !3034
  %7 = load i32, i32* %proto.addr, align 4, !dbg !11270, !tbaa !3034
  call void @init_sockobject(%struct.PySocketSockObject* %3, i32 %4, i32 %5, i32 %6, i32 %7), !dbg !11271
  br label %if.end, !dbg !11271

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.PySocketSockObject*, %struct.PySocketSockObject** %s, align 8, !dbg !11272, !tbaa !2326
  %9 = bitcast %struct.PySocketSockObject** %s to i8*, !dbg !11273
  call void @llvm.lifetime.end(i64 8, i8* %9) #1, !dbg !11273
  ret %struct.PySocketSockObject* %8, !dbg !11274
}

declare %struct._object* @PyType_GenericNew(%struct._typeobject*, %struct._object*, %struct._object*) #3

declare i64 @PyLong_AsUnsignedLong(%struct._object*) #3

declare %struct._object* @PyLong_FromUnsignedLong(i64) #3

; Function Attrs: nounwind
declare i32 @inet_aton(i8*, %struct.in_addr*) #5

; Function Attrs: nounwind
declare i8* @inet_ntoa(i32) #5

; Function Attrs: nounwind
declare i8* @inet_ntop(i32, i8*, i8*, i32) #5

declare %struct._object* @_PyObject_CallMethodId(%struct._object*, %struct._Py_Identifier*, i8*, ...) #3

declare i8* @PyBytes_AsString(%struct._object*) #3

declare i32 @PyOS_snprintf(i8*, i64, i8*, ...) #3

declare i8* @PyUnicode_AsUTF8(%struct._object*) #3

; Function Attrs: nounwind
declare %struct.if_nameindex* @if_nameindex() #5

; Function Attrs: nounwind
declare void @if_freenameindex(%struct.if_nameindex*) #5

; Function Attrs: nounwind
declare i32 @if_nametoindex(i8*) #5

; Function Attrs: nounwind
declare i8* @if_indextoname(i32, i8*) #5

declare %struct._object* @PyLong_FromSize_t(i64) #3

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2305, !2306, !2307}
!llvm.ident = !{!2308}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.7.1 (https://github.com/llvm-mirror/clang.git 0dbefa1b83eb90f7a06b5df5df254ce32be3db4b) (git@github.com:kim-yoonseung/llvm.git e8e68907a8135028089af4d924da468e2b7257fa)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !103, subprograms: !816, globals: !2037)
!1 = !DIFile(filename: "socketmodule.c", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!2 = !{!3, !15, !20, !41, !49, !64, !97}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__socket_type", file: !4, line: 24, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "/usr/include/bits/socket_type.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!5 = !{!6, !7, !8, !9, !10, !11, !12, !13, !14}
!6 = !DIEnumerator(name: "SOCK_STREAM", value: 1)
!7 = !DIEnumerator(name: "SOCK_DGRAM", value: 2)
!8 = !DIEnumerator(name: "SOCK_RAW", value: 3)
!9 = !DIEnumerator(name: "SOCK_RDM", value: 4)
!10 = !DIEnumerator(name: "SOCK_SEQPACKET", value: 5)
!11 = !DIEnumerator(name: "SOCK_DCCP", value: 6)
!12 = !DIEnumerator(name: "SOCK_PACKET", value: 10)
!13 = !DIEnumerator(name: "SOCK_CLOEXEC", value: 524288)
!14 = !DIEnumerator(name: "SOCK_NONBLOCK", value: 2048)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !16, line: 296, size: 32, align: 32, elements: !17)
!16 = !DIFile(filename: "/usr/include/bits/socket.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!17 = !{!18, !19}
!18 = !DIEnumerator(name: "SCM_RIGHTS", value: 1)
!19 = !DIEnumerator(name: "SCM_CREDENTIALS", value: 2)
!20 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !16, line: 170, size: 32, align: 32, elements: !21)
!21 = !{!22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40}
!22 = !DIEnumerator(name: "MSG_OOB", value: 1)
!23 = !DIEnumerator(name: "MSG_PEEK", value: 2)
!24 = !DIEnumerator(name: "MSG_DONTROUTE", value: 4)
!25 = !DIEnumerator(name: "MSG_TRYHARD", value: 4)
!26 = !DIEnumerator(name: "MSG_CTRUNC", value: 8)
!27 = !DIEnumerator(name: "MSG_PROXY", value: 16)
!28 = !DIEnumerator(name: "MSG_TRUNC", value: 32)
!29 = !DIEnumerator(name: "MSG_DONTWAIT", value: 64)
!30 = !DIEnumerator(name: "MSG_EOR", value: 128)
!31 = !DIEnumerator(name: "MSG_WAITALL", value: 256)
!32 = !DIEnumerator(name: "MSG_FIN", value: 512)
!33 = !DIEnumerator(name: "MSG_SYN", value: 1024)
!34 = !DIEnumerator(name: "MSG_CONFIRM", value: 2048)
!35 = !DIEnumerator(name: "MSG_RST", value: 4096)
!36 = !DIEnumerator(name: "MSG_ERRQUEUE", value: 8192)
!37 = !DIEnumerator(name: "MSG_NOSIGNAL", value: 16384)
!38 = !DIEnumerator(name: "MSG_MORE", value: 32768)
!39 = !DIEnumerator(name: "MSG_WAITFORONE", value: 65536)
!40 = !DIEnumerator(name: "MSG_CMSG_CLOEXEC", value: 1073741824)
!41 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !42, line: 22, size: 32, align: 32, elements: !43)
!42 = !DIFile(filename: "/usr/include/linux/can/raw.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!43 = !{!44, !45, !46, !47, !48}
!44 = !DIEnumerator(name: "CAN_RAW_FILTER", value: 1)
!45 = !DIEnumerator(name: "CAN_RAW_ERR_FILTER", value: 2)
!46 = !DIEnumerator(name: "CAN_RAW_LOOPBACK", value: 3)
!47 = !DIEnumerator(name: "CAN_RAW_RECV_OWN_MSGS", value: 4)
!48 = !DIEnumerator(name: "CAN_RAW_FD_FRAMES", value: 5)
!49 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !50, line: 39, size: 32, align: 32, elements: !51)
!50 = !DIFile(filename: "/usr/include/linux/can/bcm.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!51 = !{!52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63}
!52 = !DIEnumerator(name: "TX_SETUP", value: 1)
!53 = !DIEnumerator(name: "TX_DELETE", value: 2)
!54 = !DIEnumerator(name: "TX_READ", value: 3)
!55 = !DIEnumerator(name: "TX_SEND", value: 4)
!56 = !DIEnumerator(name: "RX_SETUP", value: 5)
!57 = !DIEnumerator(name: "RX_DELETE", value: 6)
!58 = !DIEnumerator(name: "RX_READ", value: 7)
!59 = !DIEnumerator(name: "TX_STATUS", value: 8)
!60 = !DIEnumerator(name: "TX_EXPIRED", value: 9)
!61 = !DIEnumerator(name: "RX_STATUS", value: 10)
!62 = !DIEnumerator(name: "RX_TIMEOUT", value: 11)
!63 = !DIEnumerator(name: "RX_CHANGED", value: 12)
!64 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !65, line: 31, size: 32, align: 32, elements: !66)
!65 = !DIFile(filename: "/usr/include/netinet/in.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!66 = !{!67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96}
!67 = !DIEnumerator(name: "IPPROTO_IP", value: 0)
!68 = !DIEnumerator(name: "IPPROTO_HOPOPTS", value: 0)
!69 = !DIEnumerator(name: "IPPROTO_ICMP", value: 1)
!70 = !DIEnumerator(name: "IPPROTO_IGMP", value: 2)
!71 = !DIEnumerator(name: "IPPROTO_IPIP", value: 4)
!72 = !DIEnumerator(name: "IPPROTO_TCP", value: 6)
!73 = !DIEnumerator(name: "IPPROTO_EGP", value: 8)
!74 = !DIEnumerator(name: "IPPROTO_PUP", value: 12)
!75 = !DIEnumerator(name: "IPPROTO_UDP", value: 17)
!76 = !DIEnumerator(name: "IPPROTO_IDP", value: 22)
!77 = !DIEnumerator(name: "IPPROTO_TP", value: 29)
!78 = !DIEnumerator(name: "IPPROTO_DCCP", value: 33)
!79 = !DIEnumerator(name: "IPPROTO_IPV6", value: 41)
!80 = !DIEnumerator(name: "IPPROTO_ROUTING", value: 43)
!81 = !DIEnumerator(name: "IPPROTO_FRAGMENT", value: 44)
!82 = !DIEnumerator(name: "IPPROTO_RSVP", value: 46)
!83 = !DIEnumerator(name: "IPPROTO_GRE", value: 47)
!84 = !DIEnumerator(name: "IPPROTO_ESP", value: 50)
!85 = !DIEnumerator(name: "IPPROTO_AH", value: 51)
!86 = !DIEnumerator(name: "IPPROTO_ICMPV6", value: 58)
!87 = !DIEnumerator(name: "IPPROTO_NONE", value: 59)
!88 = !DIEnumerator(name: "IPPROTO_DSTOPTS", value: 60)
!89 = !DIEnumerator(name: "IPPROTO_MTP", value: 92)
!90 = !DIEnumerator(name: "IPPROTO_ENCAP", value: 98)
!91 = !DIEnumerator(name: "IPPROTO_PIM", value: 103)
!92 = !DIEnumerator(name: "IPPROTO_COMP", value: 108)
!93 = !DIEnumerator(name: "IPPROTO_SCTP", value: 132)
!94 = !DIEnumerator(name: "IPPROTO_UDPLITE", value: 136)
!95 = !DIEnumerator(name: "IPPROTO_RAW", value: 255)
!96 = !DIEnumerator(name: "IPPROTO_MAX", value: 256)
!97 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !98, line: 53, size: 32, align: 32, elements: !99)
!98 = !DIFile(filename: "/usr/include/sys/socket.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!99 = !{!100, !101, !102}
!100 = !DIEnumerator(name: "SHUT_RD", value: 0)
!101 = !DIEnumerator(name: "SHUT_WR", value: 1)
!102 = !DIEnumerator(name: "SHUT_RDWR", value: 2)
!103 = !{!104, !189, !450, !116, !453, !456, !143, !458, !176, !476, !485, !497, !521, !532, !562, !577, !585, !586, !587, !194, !595, !597, !128, !151, !599, !600, !110, !610, !611, !612, !335, !618, !627, !635, !641, !448, !196, !691}
!104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !105, size: 64, align: 64)
!105 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyObject", file: !106, line: 109, baseType: !107)
!106 = !DIFile(filename: "./Include/object.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!107 = !DICompositeType(tag: DW_TAG_structure_type, name: "_object", file: !106, line: 105, size: 128, align: 64, elements: !108)
!108 = !{!109, !117}
!109 = !DIDerivedType(tag: DW_TAG_member, name: "ob_refcnt", scope: !107, file: !106, line: 107, baseType: !110, size: 64, align: 64)
!110 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_ssize_t", file: !111, line: 177, baseType: !112)
!111 = !DIFile(filename: "./Include/pyport.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!112 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !113, line: 102, baseType: !114)
!113 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!114 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !115, line: 181, baseType: !116)
!115 = !DIFile(filename: "/usr/include/bits/types.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!116 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!117 = !DIDerivedType(tag: DW_TAG_member, name: "ob_type", scope: !107, file: !106, line: 108, baseType: !118, size: 64, align: 64, offset: 64)
!118 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !119, size: 64, align: 64)
!119 = !DICompositeType(tag: DW_TAG_structure_type, name: "_typeobject", file: !106, line: 334, size: 3200, align: 64, elements: !120)
!120 = !{!121, !127, !131, !132, !133, !138, !202, !207, !212, !213, !218, !270, !301, !313, !319, !320, !321, !323, !325, !356, !357, !358, !367, !368, !373, !374, !376, !378, !388, !398, !416, !417, !418, !420, !422, !423, !425, !430, !435, !440, !441, !442, !443, !444, !445, !446, !447, !449}
!121 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !119, file: !106, line: 335, baseType: !122, size: 192, align: 64)
!122 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyVarObject", file: !106, line: 114, baseType: !123)
!123 = !DICompositeType(tag: DW_TAG_structure_type, file: !106, line: 111, size: 192, align: 64, elements: !124)
!124 = !{!125, !126}
!125 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !123, file: !106, line: 112, baseType: !105, size: 128, align: 64)
!126 = !DIDerivedType(tag: DW_TAG_member, name: "ob_size", scope: !123, file: !106, line: 113, baseType: !110, size: 64, align: 64, offset: 128)
!127 = !DIDerivedType(tag: DW_TAG_member, name: "tp_name", scope: !119, file: !106, line: 336, baseType: !128, size: 64, align: 64, offset: 192)
!128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !129, size: 64, align: 64)
!129 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !130)
!130 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!131 = !DIDerivedType(tag: DW_TAG_member, name: "tp_basicsize", scope: !119, file: !106, line: 337, baseType: !110, size: 64, align: 64, offset: 256)
!132 = !DIDerivedType(tag: DW_TAG_member, name: "tp_itemsize", scope: !119, file: !106, line: 337, baseType: !110, size: 64, align: 64, offset: 320)
!133 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dealloc", scope: !119, file: !106, line: 341, baseType: !134, size: 64, align: 64, offset: 384)
!134 = !DIDerivedType(tag: DW_TAG_typedef, name: "destructor", file: !106, line: 308, baseType: !135)
!135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !136, size: 64, align: 64)
!136 = !DISubroutineType(types: !137)
!137 = !{null, !104}
!138 = !DIDerivedType(tag: DW_TAG_member, name: "tp_print", scope: !119, file: !106, line: 342, baseType: !139, size: 64, align: 64, offset: 448)
!139 = !DIDerivedType(tag: DW_TAG_typedef, name: "printfunc", file: !106, line: 314, baseType: !140)
!140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64, align: 64)
!141 = !DISubroutineType(types: !142)
!142 = !{!143, !104, !144, !143}
!143 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!144 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !145, size: 64, align: 64)
!145 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !113, line: 48, baseType: !146)
!146 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !147, line: 246, size: 1728, align: 64, elements: !148)
!147 = !DIFile(filename: "/usr/include/libio.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!148 = !{!149, !150, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !170, !171, !172, !173, !175, !177, !179, !183, !186, !188, !190, !191, !192, !193, !197, !198}
!149 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !146, file: !147, line: 247, baseType: !143, size: 32, align: 32)
!150 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !146, file: !147, line: 252, baseType: !151, size: 64, align: 64, offset: 64)
!151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !130, size: 64, align: 64)
!152 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !146, file: !147, line: 253, baseType: !151, size: 64, align: 64, offset: 128)
!153 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !146, file: !147, line: 254, baseType: !151, size: 64, align: 64, offset: 192)
!154 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !146, file: !147, line: 255, baseType: !151, size: 64, align: 64, offset: 256)
!155 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !146, file: !147, line: 256, baseType: !151, size: 64, align: 64, offset: 320)
!156 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !146, file: !147, line: 257, baseType: !151, size: 64, align: 64, offset: 384)
!157 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !146, file: !147, line: 258, baseType: !151, size: 64, align: 64, offset: 448)
!158 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !146, file: !147, line: 259, baseType: !151, size: 64, align: 64, offset: 512)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !146, file: !147, line: 261, baseType: !151, size: 64, align: 64, offset: 576)
!160 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !146, file: !147, line: 262, baseType: !151, size: 64, align: 64, offset: 640)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !146, file: !147, line: 263, baseType: !151, size: 64, align: 64, offset: 704)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !146, file: !147, line: 265, baseType: !163, size: 64, align: 64, offset: 768)
!163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !164, size: 64, align: 64)
!164 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !147, line: 161, size: 192, align: 64, elements: !165)
!165 = !{!166, !167, !169}
!166 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !164, file: !147, line: 162, baseType: !163, size: 64, align: 64)
!167 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !164, file: !147, line: 163, baseType: !168, size: 64, align: 64, offset: 64)
!168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !146, size: 64, align: 64)
!169 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !164, file: !147, line: 167, baseType: !143, size: 32, align: 32, offset: 128)
!170 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !146, file: !147, line: 267, baseType: !168, size: 64, align: 64, offset: 832)
!171 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !146, file: !147, line: 269, baseType: !143, size: 32, align: 32, offset: 896)
!172 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !146, file: !147, line: 273, baseType: !143, size: 32, align: 32, offset: 928)
!173 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !146, file: !147, line: 275, baseType: !174, size: 64, align: 64, offset: 960)
!174 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !115, line: 140, baseType: !116)
!175 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !146, file: !147, line: 279, baseType: !176, size: 16, align: 16, offset: 1024)
!176 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!177 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !146, file: !147, line: 280, baseType: !178, size: 8, align: 8, offset: 1040)
!178 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!179 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !146, file: !147, line: 281, baseType: !180, size: 8, align: 8, offset: 1048)
!180 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 8, align: 8, elements: !181)
!181 = !{!182}
!182 = !DISubrange(count: 1)
!183 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !146, file: !147, line: 285, baseType: !184, size: 64, align: 64, offset: 1088)
!184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !185, size: 64, align: 64)
!185 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !147, line: 155, baseType: null)
!186 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !146, file: !147, line: 294, baseType: !187, size: 64, align: 64, offset: 1152)
!187 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !115, line: 141, baseType: !116)
!188 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !146, file: !147, line: 303, baseType: !189, size: 64, align: 64, offset: 1216)
!189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !146, file: !147, line: 304, baseType: !189, size: 64, align: 64, offset: 1280)
!191 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !146, file: !147, line: 305, baseType: !189, size: 64, align: 64, offset: 1344)
!192 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !146, file: !147, line: 306, baseType: !189, size: 64, align: 64, offset: 1408)
!193 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !146, file: !147, line: 307, baseType: !194, size: 64, align: 64, offset: 1472)
!194 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !195, line: 62, baseType: !196)
!195 = !DIFile(filename: "/opt/devel/yoonseung.kim/llvm_work/build/bin/../lib/clang/3.7.1/include/stddef.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!196 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!197 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !146, file: !147, line: 309, baseType: !143, size: 32, align: 32, offset: 1536)
!198 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !146, file: !147, line: 311, baseType: !199, size: 160, align: 8, offset: 1568)
!199 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 160, align: 8, elements: !200)
!200 = !{!201}
!201 = !DISubrange(count: 20)
!202 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getattr", scope: !119, file: !106, line: 343, baseType: !203, size: 64, align: 64, offset: 512)
!203 = !DIDerivedType(tag: DW_TAG_typedef, name: "getattrfunc", file: !106, line: 316, baseType: !204)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !205, size: 64, align: 64)
!205 = !DISubroutineType(types: !206)
!206 = !{!104, !104, !151}
!207 = !DIDerivedType(tag: DW_TAG_member, name: "tp_setattr", scope: !119, file: !106, line: 344, baseType: !208, size: 64, align: 64, offset: 576)
!208 = !DIDerivedType(tag: DW_TAG_typedef, name: "setattrfunc", file: !106, line: 318, baseType: !209)
!209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !210, size: 64, align: 64)
!210 = !DISubroutineType(types: !211)
!211 = !{!143, !104, !151, !104}
!212 = !DIDerivedType(tag: DW_TAG_member, name: "tp_reserved", scope: !119, file: !106, line: 345, baseType: !189, size: 64, align: 64, offset: 640)
!213 = !DIDerivedType(tag: DW_TAG_member, name: "tp_repr", scope: !119, file: !106, line: 346, baseType: !214, size: 64, align: 64, offset: 704)
!214 = !DIDerivedType(tag: DW_TAG_typedef, name: "reprfunc", file: !106, line: 320, baseType: !215)
!215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !216, size: 64, align: 64)
!216 = !DISubroutineType(types: !217)
!217 = !{!104, !104}
!218 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_number", scope: !119, file: !106, line: 350, baseType: !219, size: 64, align: 64, offset: 768)
!219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !220, size: 64, align: 64)
!220 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyNumberMethods", file: !106, line: 278, baseType: !221)
!221 = !DICompositeType(tag: DW_TAG_structure_type, file: !106, line: 236, size: 2176, align: 64, elements: !222)
!222 = !{!223, !228, !229, !230, !231, !232, !237, !239, !240, !241, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269}
!223 = !DIDerivedType(tag: DW_TAG_member, name: "nb_add", scope: !221, file: !106, line: 241, baseType: !224, size: 64, align: 64)
!224 = !DIDerivedType(tag: DW_TAG_typedef, name: "binaryfunc", file: !106, line: 166, baseType: !225)
!225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !226, size: 64, align: 64)
!226 = !DISubroutineType(types: !227)
!227 = !{!104, !104, !104}
!228 = !DIDerivedType(tag: DW_TAG_member, name: "nb_subtract", scope: !221, file: !106, line: 242, baseType: !224, size: 64, align: 64, offset: 64)
!229 = !DIDerivedType(tag: DW_TAG_member, name: "nb_multiply", scope: !221, file: !106, line: 243, baseType: !224, size: 64, align: 64, offset: 128)
!230 = !DIDerivedType(tag: DW_TAG_member, name: "nb_remainder", scope: !221, file: !106, line: 244, baseType: !224, size: 64, align: 64, offset: 192)
!231 = !DIDerivedType(tag: DW_TAG_member, name: "nb_divmod", scope: !221, file: !106, line: 245, baseType: !224, size: 64, align: 64, offset: 256)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "nb_power", scope: !221, file: !106, line: 246, baseType: !233, size: 64, align: 64, offset: 320)
!233 = !DIDerivedType(tag: DW_TAG_typedef, name: "ternaryfunc", file: !106, line: 167, baseType: !234)
!234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !235, size: 64, align: 64)
!235 = !DISubroutineType(types: !236)
!236 = !{!104, !104, !104, !104}
!237 = !DIDerivedType(tag: DW_TAG_member, name: "nb_negative", scope: !221, file: !106, line: 247, baseType: !238, size: 64, align: 64, offset: 384)
!238 = !DIDerivedType(tag: DW_TAG_typedef, name: "unaryfunc", file: !106, line: 165, baseType: !215)
!239 = !DIDerivedType(tag: DW_TAG_member, name: "nb_positive", scope: !221, file: !106, line: 248, baseType: !238, size: 64, align: 64, offset: 448)
!240 = !DIDerivedType(tag: DW_TAG_member, name: "nb_absolute", scope: !221, file: !106, line: 249, baseType: !238, size: 64, align: 64, offset: 512)
!241 = !DIDerivedType(tag: DW_TAG_member, name: "nb_bool", scope: !221, file: !106, line: 250, baseType: !242, size: 64, align: 64, offset: 576)
!242 = !DIDerivedType(tag: DW_TAG_typedef, name: "inquiry", file: !106, line: 168, baseType: !243)
!243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !244, size: 64, align: 64)
!244 = !DISubroutineType(types: !245)
!245 = !{!143, !104}
!246 = !DIDerivedType(tag: DW_TAG_member, name: "nb_invert", scope: !221, file: !106, line: 251, baseType: !238, size: 64, align: 64, offset: 640)
!247 = !DIDerivedType(tag: DW_TAG_member, name: "nb_lshift", scope: !221, file: !106, line: 252, baseType: !224, size: 64, align: 64, offset: 704)
!248 = !DIDerivedType(tag: DW_TAG_member, name: "nb_rshift", scope: !221, file: !106, line: 253, baseType: !224, size: 64, align: 64, offset: 768)
!249 = !DIDerivedType(tag: DW_TAG_member, name: "nb_and", scope: !221, file: !106, line: 254, baseType: !224, size: 64, align: 64, offset: 832)
!250 = !DIDerivedType(tag: DW_TAG_member, name: "nb_xor", scope: !221, file: !106, line: 255, baseType: !224, size: 64, align: 64, offset: 896)
!251 = !DIDerivedType(tag: DW_TAG_member, name: "nb_or", scope: !221, file: !106, line: 256, baseType: !224, size: 64, align: 64, offset: 960)
!252 = !DIDerivedType(tag: DW_TAG_member, name: "nb_int", scope: !221, file: !106, line: 257, baseType: !238, size: 64, align: 64, offset: 1024)
!253 = !DIDerivedType(tag: DW_TAG_member, name: "nb_reserved", scope: !221, file: !106, line: 258, baseType: !189, size: 64, align: 64, offset: 1088)
!254 = !DIDerivedType(tag: DW_TAG_member, name: "nb_float", scope: !221, file: !106, line: 259, baseType: !238, size: 64, align: 64, offset: 1152)
!255 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_add", scope: !221, file: !106, line: 261, baseType: !224, size: 64, align: 64, offset: 1216)
!256 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_subtract", scope: !221, file: !106, line: 262, baseType: !224, size: 64, align: 64, offset: 1280)
!257 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_multiply", scope: !221, file: !106, line: 263, baseType: !224, size: 64, align: 64, offset: 1344)
!258 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_remainder", scope: !221, file: !106, line: 264, baseType: !224, size: 64, align: 64, offset: 1408)
!259 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_power", scope: !221, file: !106, line: 265, baseType: !233, size: 64, align: 64, offset: 1472)
!260 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_lshift", scope: !221, file: !106, line: 266, baseType: !224, size: 64, align: 64, offset: 1536)
!261 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_rshift", scope: !221, file: !106, line: 267, baseType: !224, size: 64, align: 64, offset: 1600)
!262 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_and", scope: !221, file: !106, line: 268, baseType: !224, size: 64, align: 64, offset: 1664)
!263 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_xor", scope: !221, file: !106, line: 269, baseType: !224, size: 64, align: 64, offset: 1728)
!264 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_or", scope: !221, file: !106, line: 270, baseType: !224, size: 64, align: 64, offset: 1792)
!265 = !DIDerivedType(tag: DW_TAG_member, name: "nb_floor_divide", scope: !221, file: !106, line: 272, baseType: !224, size: 64, align: 64, offset: 1856)
!266 = !DIDerivedType(tag: DW_TAG_member, name: "nb_true_divide", scope: !221, file: !106, line: 273, baseType: !224, size: 64, align: 64, offset: 1920)
!267 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_floor_divide", scope: !221, file: !106, line: 274, baseType: !224, size: 64, align: 64, offset: 1984)
!268 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inplace_true_divide", scope: !221, file: !106, line: 275, baseType: !224, size: 64, align: 64, offset: 2048)
!269 = !DIDerivedType(tag: DW_TAG_member, name: "nb_index", scope: !221, file: !106, line: 277, baseType: !238, size: 64, align: 64, offset: 2112)
!270 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_sequence", scope: !119, file: !106, line: 351, baseType: !271, size: 64, align: 64, offset: 832)
!271 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !272, size: 64, align: 64)
!272 = !DIDerivedType(tag: DW_TAG_typedef, name: "PySequenceMethods", file: !106, line: 292, baseType: !273)
!273 = !DICompositeType(tag: DW_TAG_structure_type, file: !106, line: 280, size: 640, align: 64, elements: !274)
!274 = !{!275, !280, !281, !286, !287, !288, !293, !294, !299, !300}
!275 = !DIDerivedType(tag: DW_TAG_member, name: "sq_length", scope: !273, file: !106, line: 281, baseType: !276, size: 64, align: 64)
!276 = !DIDerivedType(tag: DW_TAG_typedef, name: "lenfunc", file: !106, line: 169, baseType: !277)
!277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !278, size: 64, align: 64)
!278 = !DISubroutineType(types: !279)
!279 = !{!110, !104}
!280 = !DIDerivedType(tag: DW_TAG_member, name: "sq_concat", scope: !273, file: !106, line: 282, baseType: !224, size: 64, align: 64, offset: 64)
!281 = !DIDerivedType(tag: DW_TAG_member, name: "sq_repeat", scope: !273, file: !106, line: 283, baseType: !282, size: 64, align: 64, offset: 128)
!282 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssizeargfunc", file: !106, line: 170, baseType: !283)
!283 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !284, size: 64, align: 64)
!284 = !DISubroutineType(types: !285)
!285 = !{!104, !104, !110}
!286 = !DIDerivedType(tag: DW_TAG_member, name: "sq_item", scope: !273, file: !106, line: 284, baseType: !282, size: 64, align: 64, offset: 192)
!287 = !DIDerivedType(tag: DW_TAG_member, name: "was_sq_slice", scope: !273, file: !106, line: 285, baseType: !189, size: 64, align: 64, offset: 256)
!288 = !DIDerivedType(tag: DW_TAG_member, name: "sq_ass_item", scope: !273, file: !106, line: 286, baseType: !289, size: 64, align: 64, offset: 320)
!289 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssizeobjargproc", file: !106, line: 172, baseType: !290)
!290 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !291, size: 64, align: 64)
!291 = !DISubroutineType(types: !292)
!292 = !{!143, !104, !110, !104}
!293 = !DIDerivedType(tag: DW_TAG_member, name: "was_sq_ass_slice", scope: !273, file: !106, line: 287, baseType: !189, size: 64, align: 64, offset: 384)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "sq_contains", scope: !273, file: !106, line: 288, baseType: !295, size: 64, align: 64, offset: 448)
!295 = !DIDerivedType(tag: DW_TAG_typedef, name: "objobjproc", file: !106, line: 231, baseType: !296)
!296 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !297, size: 64, align: 64)
!297 = !DISubroutineType(types: !298)
!298 = !{!143, !104, !104}
!299 = !DIDerivedType(tag: DW_TAG_member, name: "sq_inplace_concat", scope: !273, file: !106, line: 290, baseType: !224, size: 64, align: 64, offset: 512)
!300 = !DIDerivedType(tag: DW_TAG_member, name: "sq_inplace_repeat", scope: !273, file: !106, line: 291, baseType: !282, size: 64, align: 64, offset: 576)
!301 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_mapping", scope: !119, file: !106, line: 352, baseType: !302, size: 64, align: 64, offset: 896)
!302 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !303, size: 64, align: 64)
!303 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyMappingMethods", file: !106, line: 298, baseType: !304)
!304 = !DICompositeType(tag: DW_TAG_structure_type, file: !106, line: 294, size: 192, align: 64, elements: !305)
!305 = !{!306, !307, !308}
!306 = !DIDerivedType(tag: DW_TAG_member, name: "mp_length", scope: !304, file: !106, line: 295, baseType: !276, size: 64, align: 64)
!307 = !DIDerivedType(tag: DW_TAG_member, name: "mp_subscript", scope: !304, file: !106, line: 296, baseType: !224, size: 64, align: 64, offset: 64)
!308 = !DIDerivedType(tag: DW_TAG_member, name: "mp_ass_subscript", scope: !304, file: !106, line: 297, baseType: !309, size: 64, align: 64, offset: 128)
!309 = !DIDerivedType(tag: DW_TAG_typedef, name: "objobjargproc", file: !106, line: 174, baseType: !310)
!310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !311, size: 64, align: 64)
!311 = !DISubroutineType(types: !312)
!312 = !{!143, !104, !104, !104}
!313 = !DIDerivedType(tag: DW_TAG_member, name: "tp_hash", scope: !119, file: !106, line: 356, baseType: !314, size: 64, align: 64, offset: 960)
!314 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashfunc", file: !106, line: 321, baseType: !315)
!315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !316, size: 64, align: 64)
!316 = !DISubroutineType(types: !317)
!317 = !{!318, !104}
!318 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_hash_t", file: !111, line: 186, baseType: !110)
!319 = !DIDerivedType(tag: DW_TAG_member, name: "tp_call", scope: !119, file: !106, line: 357, baseType: !233, size: 64, align: 64, offset: 1024)
!320 = !DIDerivedType(tag: DW_TAG_member, name: "tp_str", scope: !119, file: !106, line: 358, baseType: !214, size: 64, align: 64, offset: 1088)
!321 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getattro", scope: !119, file: !106, line: 359, baseType: !322, size: 64, align: 64, offset: 1152)
!322 = !DIDerivedType(tag: DW_TAG_typedef, name: "getattrofunc", file: !106, line: 317, baseType: !225)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "tp_setattro", scope: !119, file: !106, line: 360, baseType: !324, size: 64, align: 64, offset: 1216)
!324 = !DIDerivedType(tag: DW_TAG_typedef, name: "setattrofunc", file: !106, line: 319, baseType: !310)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "tp_as_buffer", scope: !119, file: !106, line: 363, baseType: !326, size: 64, align: 64, offset: 1280)
!326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !327, size: 64, align: 64)
!327 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyBufferProcs", file: !106, line: 304, baseType: !328)
!328 = !DICompositeType(tag: DW_TAG_structure_type, file: !106, line: 301, size: 128, align: 64, elements: !329)
!329 = !{!330, !351}
!330 = !DIDerivedType(tag: DW_TAG_member, name: "bf_getbuffer", scope: !328, file: !106, line: 302, baseType: !331, size: 64, align: 64)
!331 = !DIDerivedType(tag: DW_TAG_typedef, name: "getbufferproc", file: !106, line: 193, baseType: !332)
!332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !333, size: 64, align: 64)
!333 = !DISubroutineType(types: !334)
!334 = !{!143, !104, !335, !143}
!335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !336, size: 64, align: 64)
!336 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_buffer", file: !106, line: 191, baseType: !337)
!337 = !DICompositeType(tag: DW_TAG_structure_type, name: "bufferinfo", file: !106, line: 178, size: 640, align: 64, elements: !338)
!338 = !{!339, !340, !341, !342, !343, !344, !345, !346, !348, !349, !350}
!339 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !337, file: !106, line: 179, baseType: !189, size: 64, align: 64)
!340 = !DIDerivedType(tag: DW_TAG_member, name: "obj", scope: !337, file: !106, line: 180, baseType: !104, size: 64, align: 64, offset: 64)
!341 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !337, file: !106, line: 181, baseType: !110, size: 64, align: 64, offset: 128)
!342 = !DIDerivedType(tag: DW_TAG_member, name: "itemsize", scope: !337, file: !106, line: 182, baseType: !110, size: 64, align: 64, offset: 192)
!343 = !DIDerivedType(tag: DW_TAG_member, name: "readonly", scope: !337, file: !106, line: 184, baseType: !143, size: 32, align: 32, offset: 256)
!344 = !DIDerivedType(tag: DW_TAG_member, name: "ndim", scope: !337, file: !106, line: 185, baseType: !143, size: 32, align: 32, offset: 288)
!345 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !337, file: !106, line: 186, baseType: !151, size: 64, align: 64, offset: 320)
!346 = !DIDerivedType(tag: DW_TAG_member, name: "shape", scope: !337, file: !106, line: 187, baseType: !347, size: 64, align: 64, offset: 384)
!347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64, align: 64)
!348 = !DIDerivedType(tag: DW_TAG_member, name: "strides", scope: !337, file: !106, line: 188, baseType: !347, size: 64, align: 64, offset: 448)
!349 = !DIDerivedType(tag: DW_TAG_member, name: "suboffsets", scope: !337, file: !106, line: 189, baseType: !347, size: 64, align: 64, offset: 512)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !337, file: !106, line: 190, baseType: !189, size: 64, align: 64, offset: 576)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "bf_releasebuffer", scope: !328, file: !106, line: 303, baseType: !352, size: 64, align: 64, offset: 64)
!352 = !DIDerivedType(tag: DW_TAG_typedef, name: "releasebufferproc", file: !106, line: 194, baseType: !353)
!353 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !354, size: 64, align: 64)
!354 = !DISubroutineType(types: !355)
!355 = !{null, !104, !335}
!356 = !DIDerivedType(tag: DW_TAG_member, name: "tp_flags", scope: !119, file: !106, line: 366, baseType: !196, size: 64, align: 64, offset: 1344)
!357 = !DIDerivedType(tag: DW_TAG_member, name: "tp_doc", scope: !119, file: !106, line: 368, baseType: !128, size: 64, align: 64, offset: 1408)
!358 = !DIDerivedType(tag: DW_TAG_member, name: "tp_traverse", scope: !119, file: !106, line: 372, baseType: !359, size: 64, align: 64, offset: 1472)
!359 = !DIDerivedType(tag: DW_TAG_typedef, name: "traverseproc", file: !106, line: 233, baseType: !360)
!360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !361, size: 64, align: 64)
!361 = !DISubroutineType(types: !362)
!362 = !{!143, !104, !363, !189}
!363 = !DIDerivedType(tag: DW_TAG_typedef, name: "visitproc", file: !106, line: 232, baseType: !364)
!364 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !365, size: 64, align: 64)
!365 = !DISubroutineType(types: !366)
!366 = !{!143, !104, !189}
!367 = !DIDerivedType(tag: DW_TAG_member, name: "tp_clear", scope: !119, file: !106, line: 375, baseType: !242, size: 64, align: 64, offset: 1536)
!368 = !DIDerivedType(tag: DW_TAG_member, name: "tp_richcompare", scope: !119, file: !106, line: 379, baseType: !369, size: 64, align: 64, offset: 1600)
!369 = !DIDerivedType(tag: DW_TAG_typedef, name: "richcmpfunc", file: !106, line: 322, baseType: !370)
!370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !371, size: 64, align: 64)
!371 = !DISubroutineType(types: !372)
!372 = !{!104, !104, !104, !143}
!373 = !DIDerivedType(tag: DW_TAG_member, name: "tp_weaklistoffset", scope: !119, file: !106, line: 382, baseType: !110, size: 64, align: 64, offset: 1664)
!374 = !DIDerivedType(tag: DW_TAG_member, name: "tp_iter", scope: !119, file: !106, line: 385, baseType: !375, size: 64, align: 64, offset: 1728)
!375 = !DIDerivedType(tag: DW_TAG_typedef, name: "getiterfunc", file: !106, line: 323, baseType: !215)
!376 = !DIDerivedType(tag: DW_TAG_member, name: "tp_iternext", scope: !119, file: !106, line: 386, baseType: !377, size: 64, align: 64, offset: 1792)
!377 = !DIDerivedType(tag: DW_TAG_typedef, name: "iternextfunc", file: !106, line: 324, baseType: !215)
!378 = !DIDerivedType(tag: DW_TAG_member, name: "tp_methods", scope: !119, file: !106, line: 389, baseType: !379, size: 64, align: 64, offset: 1856)
!379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !380, size: 64, align: 64)
!380 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyMethodDef", file: !381, line: 40, size: 256, align: 64, elements: !382)
!381 = !DIFile(filename: "./Include/methodobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!382 = !{!383, !384, !386, !387}
!383 = !DIDerivedType(tag: DW_TAG_member, name: "ml_name", scope: !380, file: !381, line: 41, baseType: !128, size: 64, align: 64)
!384 = !DIDerivedType(tag: DW_TAG_member, name: "ml_meth", scope: !380, file: !381, line: 42, baseType: !385, size: 64, align: 64, offset: 64)
!385 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyCFunction", file: !381, line: 18, baseType: !225)
!386 = !DIDerivedType(tag: DW_TAG_member, name: "ml_flags", scope: !380, file: !381, line: 43, baseType: !143, size: 32, align: 32, offset: 128)
!387 = !DIDerivedType(tag: DW_TAG_member, name: "ml_doc", scope: !380, file: !381, line: 45, baseType: !128, size: 64, align: 64, offset: 192)
!388 = !DIDerivedType(tag: DW_TAG_member, name: "tp_members", scope: !119, file: !106, line: 390, baseType: !389, size: 64, align: 64, offset: 1920)
!389 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !390, size: 64, align: 64)
!390 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyMemberDef", file: !391, line: 18, size: 320, align: 64, elements: !392)
!391 = !DIFile(filename: "./Include/structmember.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!392 = !{!393, !394, !395, !396, !397}
!393 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !390, file: !391, line: 19, baseType: !151, size: 64, align: 64)
!394 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !390, file: !391, line: 20, baseType: !143, size: 32, align: 32, offset: 64)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !390, file: !391, line: 21, baseType: !110, size: 64, align: 64, offset: 128)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !390, file: !391, line: 22, baseType: !143, size: 32, align: 32, offset: 192)
!397 = !DIDerivedType(tag: DW_TAG_member, name: "doc", scope: !390, file: !391, line: 23, baseType: !151, size: 64, align: 64, offset: 256)
!398 = !DIDerivedType(tag: DW_TAG_member, name: "tp_getset", scope: !119, file: !106, line: 391, baseType: !399, size: 64, align: 64, offset: 1984)
!399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !400, size: 64, align: 64)
!400 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyGetSetDef", file: !401, line: 11, size: 320, align: 64, elements: !402)
!401 = !DIFile(filename: "./Include/descrobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!402 = !{!403, !404, !409, !414, !415}
!403 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !400, file: !401, line: 12, baseType: !151, size: 64, align: 64)
!404 = !DIDerivedType(tag: DW_TAG_member, name: "get", scope: !400, file: !401, line: 13, baseType: !405, size: 64, align: 64, offset: 64)
!405 = !DIDerivedType(tag: DW_TAG_typedef, name: "getter", file: !401, line: 8, baseType: !406)
!406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !407, size: 64, align: 64)
!407 = !DISubroutineType(types: !408)
!408 = !{!104, !104, !189}
!409 = !DIDerivedType(tag: DW_TAG_member, name: "set", scope: !400, file: !401, line: 14, baseType: !410, size: 64, align: 64, offset: 128)
!410 = !DIDerivedType(tag: DW_TAG_typedef, name: "setter", file: !401, line: 9, baseType: !411)
!411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !412, size: 64, align: 64)
!412 = !DISubroutineType(types: !413)
!413 = !{!143, !104, !104, !189}
!414 = !DIDerivedType(tag: DW_TAG_member, name: "doc", scope: !400, file: !401, line: 15, baseType: !151, size: 64, align: 64, offset: 192)
!415 = !DIDerivedType(tag: DW_TAG_member, name: "closure", scope: !400, file: !401, line: 16, baseType: !189, size: 64, align: 64, offset: 256)
!416 = !DIDerivedType(tag: DW_TAG_member, name: "tp_base", scope: !119, file: !106, line: 392, baseType: !118, size: 64, align: 64, offset: 2048)
!417 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dict", scope: !119, file: !106, line: 393, baseType: !104, size: 64, align: 64, offset: 2112)
!418 = !DIDerivedType(tag: DW_TAG_member, name: "tp_descr_get", scope: !119, file: !106, line: 394, baseType: !419, size: 64, align: 64, offset: 2176)
!419 = !DIDerivedType(tag: DW_TAG_typedef, name: "descrgetfunc", file: !106, line: 325, baseType: !234)
!420 = !DIDerivedType(tag: DW_TAG_member, name: "tp_descr_set", scope: !119, file: !106, line: 395, baseType: !421, size: 64, align: 64, offset: 2240)
!421 = !DIDerivedType(tag: DW_TAG_typedef, name: "descrsetfunc", file: !106, line: 326, baseType: !310)
!422 = !DIDerivedType(tag: DW_TAG_member, name: "tp_dictoffset", scope: !119, file: !106, line: 396, baseType: !110, size: 64, align: 64, offset: 2304)
!423 = !DIDerivedType(tag: DW_TAG_member, name: "tp_init", scope: !119, file: !106, line: 397, baseType: !424, size: 64, align: 64, offset: 2368)
!424 = !DIDerivedType(tag: DW_TAG_typedef, name: "initproc", file: !106, line: 327, baseType: !310)
!425 = !DIDerivedType(tag: DW_TAG_member, name: "tp_alloc", scope: !119, file: !106, line: 398, baseType: !426, size: 64, align: 64, offset: 2432)
!426 = !DIDerivedType(tag: DW_TAG_typedef, name: "allocfunc", file: !106, line: 329, baseType: !427)
!427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !428, size: 64, align: 64)
!428 = !DISubroutineType(types: !429)
!429 = !{!104, !118, !110}
!430 = !DIDerivedType(tag: DW_TAG_member, name: "tp_new", scope: !119, file: !106, line: 399, baseType: !431, size: 64, align: 64, offset: 2496)
!431 = !DIDerivedType(tag: DW_TAG_typedef, name: "newfunc", file: !106, line: 328, baseType: !432)
!432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !433, size: 64, align: 64)
!433 = !DISubroutineType(types: !434)
!434 = !{!104, !118, !104, !104}
!435 = !DIDerivedType(tag: DW_TAG_member, name: "tp_free", scope: !119, file: !106, line: 400, baseType: !436, size: 64, align: 64, offset: 2560)
!436 = !DIDerivedType(tag: DW_TAG_typedef, name: "freefunc", file: !106, line: 307, baseType: !437)
!437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !438, size: 64, align: 64)
!438 = !DISubroutineType(types: !439)
!439 = !{null, !189}
!440 = !DIDerivedType(tag: DW_TAG_member, name: "tp_is_gc", scope: !119, file: !106, line: 401, baseType: !242, size: 64, align: 64, offset: 2624)
!441 = !DIDerivedType(tag: DW_TAG_member, name: "tp_bases", scope: !119, file: !106, line: 402, baseType: !104, size: 64, align: 64, offset: 2688)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "tp_mro", scope: !119, file: !106, line: 403, baseType: !104, size: 64, align: 64, offset: 2752)
!443 = !DIDerivedType(tag: DW_TAG_member, name: "tp_cache", scope: !119, file: !106, line: 404, baseType: !104, size: 64, align: 64, offset: 2816)
!444 = !DIDerivedType(tag: DW_TAG_member, name: "tp_subclasses", scope: !119, file: !106, line: 405, baseType: !104, size: 64, align: 64, offset: 2880)
!445 = !DIDerivedType(tag: DW_TAG_member, name: "tp_weaklist", scope: !119, file: !106, line: 406, baseType: !104, size: 64, align: 64, offset: 2944)
!446 = !DIDerivedType(tag: DW_TAG_member, name: "tp_del", scope: !119, file: !106, line: 407, baseType: !134, size: 64, align: 64, offset: 3008)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "tp_version_tag", scope: !119, file: !106, line: 410, baseType: !448, size: 32, align: 32, offset: 3072)
!448 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "tp_finalize", scope: !119, file: !106, line: 412, baseType: !134, size: 64, align: 64, offset: 3136)
!450 = !DIDerivedType(tag: DW_TAG_typedef, name: "in_addr_t", file: !65, line: 140, baseType: !451)
!451 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !452, line: 51, baseType: !448)
!452 = !DIFile(filename: "/usr/include/stdint.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!453 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !454, line: 75, baseType: !455)
!454 = !DIFile(filename: "/usr/include/time.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!455 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !115, line: 148, baseType: !116)
!456 = !DIDerivedType(tag: DW_TAG_typedef, name: "SOCKET_T", file: !457, line: 114, baseType: !143)
!457 = !DIFile(filename: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1/Modules/socketmodule.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !459, size: 64, align: 64)
!459 = !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr_in", file: !65, line: 224, size: 128, align: 32, elements: !460)
!460 = !{!461, !464, !467, !471}
!461 = !DIDerivedType(tag: DW_TAG_member, name: "sin_family", scope: !459, file: !65, line: 226, baseType: !462, size: 16, align: 16)
!462 = !DIDerivedType(tag: DW_TAG_typedef, name: "sa_family_t", file: !463, line: 28, baseType: !176)
!463 = !DIFile(filename: "/usr/include/bits/sockaddr.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!464 = !DIDerivedType(tag: DW_TAG_member, name: "sin_port", scope: !459, file: !65, line: 227, baseType: !465, size: 16, align: 16, offset: 16)
!465 = !DIDerivedType(tag: DW_TAG_typedef, name: "in_port_t", file: !65, line: 96, baseType: !466)
!466 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !452, line: 49, baseType: !176)
!467 = !DIDerivedType(tag: DW_TAG_member, name: "sin_addr", scope: !459, file: !65, line: 228, baseType: !468, size: 32, align: 32, offset: 32)
!468 = !DICompositeType(tag: DW_TAG_structure_type, name: "in_addr", file: !65, line: 141, size: 32, align: 32, elements: !469)
!469 = !{!470}
!470 = !DIDerivedType(tag: DW_TAG_member, name: "s_addr", scope: !468, file: !65, line: 143, baseType: !450, size: 32, align: 32)
!471 = !DIDerivedType(tag: DW_TAG_member, name: "sin_zero", scope: !459, file: !65, line: 231, baseType: !472, size: 64, align: 8, offset: 64)
!472 = !DICompositeType(tag: DW_TAG_array_type, baseType: !473, size: 64, align: 8, elements: !474)
!473 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!474 = !{!475}
!475 = !DISubrange(count: 8)
!476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !477, size: 64, align: 64)
!477 = !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr_un", file: !478, line: 29, size: 880, align: 16, elements: !479)
!478 = !DIFile(filename: "/usr/include/sys/un.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!479 = !{!480, !481}
!480 = !DIDerivedType(tag: DW_TAG_member, name: "sun_family", scope: !477, file: !478, line: 31, baseType: !462, size: 16, align: 16)
!481 = !DIDerivedType(tag: DW_TAG_member, name: "sun_path", scope: !477, file: !478, line: 32, baseType: !482, size: 864, align: 8, offset: 16)
!482 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 864, align: 8, elements: !483)
!483 = !{!484}
!484 = !DISubrange(count: 108)
!485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !486, size: 64, align: 64)
!486 = !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr_nl", file: !487, line: 35, size: 96, align: 32, elements: !488)
!487 = !DIFile(filename: "/usr/include/linux/netlink.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!488 = !{!489, !492, !493, !496}
!489 = !DIDerivedType(tag: DW_TAG_member, name: "nl_family", scope: !486, file: !487, line: 36, baseType: !490, size: 16, align: 16)
!490 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_sa_family_t", file: !491, line: 11, baseType: !176)
!491 = !DIFile(filename: "/usr/include/linux/socket.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!492 = !DIDerivedType(tag: DW_TAG_member, name: "nl_pad", scope: !486, file: !487, line: 37, baseType: !176, size: 16, align: 16, offset: 16)
!493 = !DIDerivedType(tag: DW_TAG_member, name: "nl_pid", scope: !486, file: !487, line: 38, baseType: !494, size: 32, align: 32, offset: 32)
!494 = !DIDerivedType(tag: DW_TAG_typedef, name: "__u32", file: !495, line: 26, baseType: !448)
!495 = !DIFile(filename: "/usr/include/asm-generic/int-ll64.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!496 = !DIDerivedType(tag: DW_TAG_member, name: "nl_groups", scope: !486, file: !487, line: 39, baseType: !494, size: 32, align: 32, offset: 64)
!497 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !498, size: 64, align: 64)
!498 = !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr_in6", file: !65, line: 238, size: 224, align: 32, elements: !499)
!499 = !{!500, !501, !502, !503, !520}
!500 = !DIDerivedType(tag: DW_TAG_member, name: "sin6_family", scope: !498, file: !65, line: 240, baseType: !462, size: 16, align: 16)
!501 = !DIDerivedType(tag: DW_TAG_member, name: "sin6_port", scope: !498, file: !65, line: 241, baseType: !465, size: 16, align: 16, offset: 16)
!502 = !DIDerivedType(tag: DW_TAG_member, name: "sin6_flowinfo", scope: !498, file: !65, line: 242, baseType: !451, size: 32, align: 32, offset: 32)
!503 = !DIDerivedType(tag: DW_TAG_member, name: "sin6_addr", scope: !498, file: !65, line: 243, baseType: !504, size: 128, align: 32, offset: 64)
!504 = !DICompositeType(tag: DW_TAG_structure_type, name: "in6_addr", file: !65, line: 197, size: 128, align: 32, elements: !505)
!505 = !{!506}
!506 = !DIDerivedType(tag: DW_TAG_member, name: "__in6_u", scope: !504, file: !65, line: 206, baseType: !507, size: 128, align: 32)
!507 = !DICompositeType(tag: DW_TAG_union_type, scope: !504, file: !65, line: 199, size: 128, align: 32, elements: !508)
!508 = !{!509, !514, !516}
!509 = !DIDerivedType(tag: DW_TAG_member, name: "__u6_addr8", scope: !507, file: !65, line: 201, baseType: !510, size: 128, align: 8)
!510 = !DICompositeType(tag: DW_TAG_array_type, baseType: !511, size: 128, align: 8, elements: !512)
!511 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !452, line: 48, baseType: !473)
!512 = !{!513}
!513 = !DISubrange(count: 16)
!514 = !DIDerivedType(tag: DW_TAG_member, name: "__u6_addr16", scope: !507, file: !65, line: 203, baseType: !515, size: 128, align: 16)
!515 = !DICompositeType(tag: DW_TAG_array_type, baseType: !466, size: 128, align: 16, elements: !474)
!516 = !DIDerivedType(tag: DW_TAG_member, name: "__u6_addr32", scope: !507, file: !65, line: 204, baseType: !517, size: 128, align: 32)
!517 = !DICompositeType(tag: DW_TAG_array_type, baseType: !451, size: 128, align: 32, elements: !518)
!518 = !{!519}
!519 = !DISubrange(count: 4)
!520 = !DIDerivedType(tag: DW_TAG_member, name: "sin6_scope_id", scope: !498, file: !65, line: 244, baseType: !451, size: 32, align: 32, offset: 192)
!521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !522, size: 64, align: 64)
!522 = !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr_ll", file: !523, line: 22, size: 160, align: 32, elements: !524)
!523 = !DIFile(filename: "/usr/include/netpacket/packet.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!524 = !{!525, !526, !527, !528, !529, !530, !531}
!525 = !DIDerivedType(tag: DW_TAG_member, name: "sll_family", scope: !522, file: !523, line: 24, baseType: !176, size: 16, align: 16)
!526 = !DIDerivedType(tag: DW_TAG_member, name: "sll_protocol", scope: !522, file: !523, line: 25, baseType: !176, size: 16, align: 16, offset: 16)
!527 = !DIDerivedType(tag: DW_TAG_member, name: "sll_ifindex", scope: !522, file: !523, line: 26, baseType: !143, size: 32, align: 32, offset: 32)
!528 = !DIDerivedType(tag: DW_TAG_member, name: "sll_hatype", scope: !522, file: !523, line: 27, baseType: !176, size: 16, align: 16, offset: 64)
!529 = !DIDerivedType(tag: DW_TAG_member, name: "sll_pkttype", scope: !522, file: !523, line: 28, baseType: !473, size: 8, align: 8, offset: 80)
!530 = !DIDerivedType(tag: DW_TAG_member, name: "sll_halen", scope: !522, file: !523, line: 29, baseType: !473, size: 8, align: 8, offset: 88)
!531 = !DIDerivedType(tag: DW_TAG_member, name: "sll_addr", scope: !522, file: !523, line: 30, baseType: !472, size: 64, align: 8, offset: 96)
!532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !533, size: 64, align: 64)
!533 = !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr_tipc", file: !534, line: 176, size: 128, align: 32, elements: !535)
!534 = !DIFile(filename: "/usr/include/linux/tipc.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!535 = !{!536, !537, !538, !539}
!536 = !DIDerivedType(tag: DW_TAG_member, name: "family", scope: !533, file: !534, line: 177, baseType: !176, size: 16, align: 16)
!537 = !DIDerivedType(tag: DW_TAG_member, name: "addrtype", scope: !533, file: !534, line: 178, baseType: !473, size: 8, align: 8, offset: 16)
!538 = !DIDerivedType(tag: DW_TAG_member, name: "scope", scope: !533, file: !534, line: 179, baseType: !178, size: 8, align: 8, offset: 24)
!539 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !533, file: !534, line: 187, baseType: !540, size: 96, align: 32, offset: 32)
!540 = !DICompositeType(tag: DW_TAG_union_type, scope: !533, file: !534, line: 180, size: 96, align: 32, elements: !541)
!541 = !{!542, !547, !553}
!542 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !540, file: !534, line: 181, baseType: !543, size: 64, align: 32)
!543 = !DICompositeType(tag: DW_TAG_structure_type, name: "tipc_portid", file: !534, line: 46, size: 64, align: 32, elements: !544)
!544 = !{!545, !546}
!545 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !543, file: !534, line: 47, baseType: !494, size: 32, align: 32)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !543, file: !534, line: 48, baseType: !494, size: 32, align: 32, offset: 32)
!547 = !DIDerivedType(tag: DW_TAG_member, name: "nameseq", scope: !540, file: !534, line: 182, baseType: !548, size: 96, align: 32)
!548 = !DICompositeType(tag: DW_TAG_structure_type, name: "tipc_name_seq", file: !534, line: 56, size: 96, align: 32, elements: !549)
!549 = !{!550, !551, !552}
!550 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !548, file: !534, line: 57, baseType: !494, size: 32, align: 32)
!551 = !DIDerivedType(tag: DW_TAG_member, name: "lower", scope: !548, file: !534, line: 58, baseType: !494, size: 32, align: 32, offset: 32)
!552 = !DIDerivedType(tag: DW_TAG_member, name: "upper", scope: !548, file: !534, line: 59, baseType: !494, size: 32, align: 32, offset: 64)
!553 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !540, file: !534, line: 186, baseType: !554, size: 96, align: 32)
!554 = !DICompositeType(tag: DW_TAG_structure_type, scope: !540, file: !534, line: 183, size: 96, align: 32, elements: !555)
!555 = !{!556, !561}
!556 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !554, file: !534, line: 184, baseType: !557, size: 64, align: 32)
!557 = !DICompositeType(tag: DW_TAG_structure_type, name: "tipc_name", file: !534, line: 51, size: 64, align: 32, elements: !558)
!558 = !{!559, !560}
!559 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !557, file: !534, line: 52, baseType: !494, size: 32, align: 32)
!560 = !DIDerivedType(tag: DW_TAG_member, name: "instance", scope: !557, file: !534, line: 53, baseType: !494, size: 32, align: 32, offset: 32)
!561 = !DIDerivedType(tag: DW_TAG_member, name: "domain", scope: !554, file: !534, line: 185, baseType: !494, size: 32, align: 32, offset: 64)
!562 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !563, size: 64, align: 64)
!563 = !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr_can", file: !564, line: 131, size: 128, align: 32, elements: !565)
!564 = !DIFile(filename: "/usr/include/linux/can.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!565 = !{!566, !567, !568}
!566 = !DIDerivedType(tag: DW_TAG_member, name: "can_family", scope: !563, file: !564, line: 132, baseType: !490, size: 16, align: 16)
!567 = !DIDerivedType(tag: DW_TAG_member, name: "can_ifindex", scope: !563, file: !564, line: 133, baseType: !143, size: 32, align: 32, offset: 32)
!568 = !DIDerivedType(tag: DW_TAG_member, name: "can_addr", scope: !563, file: !564, line: 139, baseType: !569, size: 64, align: 32, offset: 64)
!569 = !DICompositeType(tag: DW_TAG_union_type, scope: !563, file: !564, line: 134, size: 64, align: 32, elements: !570)
!570 = !{!571}
!571 = !DIDerivedType(tag: DW_TAG_member, name: "tp", scope: !569, file: !564, line: 136, baseType: !572, size: 64, align: 32)
!572 = !DICompositeType(tag: DW_TAG_structure_type, scope: !569, file: !564, line: 136, size: 64, align: 32, elements: !573)
!573 = !{!574, !576}
!574 = !DIDerivedType(tag: DW_TAG_member, name: "rx_id", scope: !572, file: !564, line: 136, baseType: !575, size: 32, align: 32)
!575 = !DIDerivedType(tag: DW_TAG_typedef, name: "canid_t", file: !564, line: 39, baseType: !494)
!576 = !DIDerivedType(tag: DW_TAG_member, name: "tx_id", scope: !572, file: !564, line: 136, baseType: !575, size: 32, align: 32, offset: 32)
!577 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !578, size: 64, align: 64)
!578 = !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr", file: !16, line: 148, size: 128, align: 16, elements: !579)
!579 = !{!580, !581}
!580 = !DIDerivedType(tag: DW_TAG_member, name: "sa_family", scope: !578, file: !16, line: 150, baseType: !462, size: 16, align: 16)
!581 = !DIDerivedType(tag: DW_TAG_member, name: "sa_data", scope: !578, file: !16, line: 151, baseType: !582, size: 112, align: 8, offset: 16)
!582 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 112, align: 8, elements: !583)
!583 = !{!584}
!584 = !DISubrange(count: 14)
!585 = !DIBasicType(name: "short", size: 16, align: 16, encoding: DW_ATE_signed)
!586 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !122, size: 64, align: 64)
!587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !588, size: 64, align: 64)
!588 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyBytesObject", file: !589, line: 41, baseType: !590)
!589 = !DIFile(filename: "./Include/bytesobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!590 = !DICompositeType(tag: DW_TAG_structure_type, file: !589, line: 31, size: 320, align: 64, elements: !591)
!591 = !{!592, !593, !594}
!592 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !590, file: !589, line: 32, baseType: !122, size: 192, align: 64)
!593 = !DIDerivedType(tag: DW_TAG_member, name: "ob_shash", scope: !590, file: !589, line: 33, baseType: !318, size: 64, align: 64, offset: 192)
!594 = !DIDerivedType(tag: DW_TAG_member, name: "ob_sval", scope: !590, file: !589, line: 34, baseType: !180, size: 8, align: 8, offset: 256)
!595 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !596, size: 64, align: 64)
!596 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !598, size: 64, align: 64)
!598 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !473)
!599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !448, size: 64, align: 64)
!600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !601, size: 64, align: 64)
!601 = !DICompositeType(tag: DW_TAG_structure_type, name: "cmsghdr", file: !16, line: 239, size: 128, align: 64, elements: !602)
!602 = !{!603, !604, !605, !606}
!603 = !DIDerivedType(tag: DW_TAG_member, name: "cmsg_len", scope: !601, file: !16, line: 241, baseType: !194, size: 64, align: 64)
!604 = !DIDerivedType(tag: DW_TAG_member, name: "cmsg_level", scope: !601, file: !16, line: 246, baseType: !143, size: 32, align: 32, offset: 64)
!605 = !DIDerivedType(tag: DW_TAG_member, name: "cmsg_type", scope: !601, file: !16, line: 247, baseType: !143, size: 32, align: 32, offset: 96)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "__cmsg_data", scope: !601, file: !16, line: 249, baseType: !607, offset: 128)
!607 = !DICompositeType(tag: DW_TAG_array_type, baseType: !473, align: 8, elements: !608)
!608 = !{!609}
!609 = !DISubrange(count: -1)
!610 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !143, size: 64, align: 64)
!611 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !473, size: 64, align: 64)
!612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !613, size: 64, align: 64)
!613 = !DICompositeType(tag: DW_TAG_structure_type, name: "iovec", file: !614, line: 43, size: 128, align: 64, elements: !615)
!614 = !DIFile(filename: "/usr/include/bits/uio.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!615 = !{!616, !617}
!616 = !DIDerivedType(tag: DW_TAG_member, name: "iov_base", scope: !613, file: !614, line: 45, baseType: !189, size: 64, align: 64)
!617 = !DIDerivedType(tag: DW_TAG_member, name: "iov_len", scope: !613, file: !614, line: 46, baseType: !194, size: 64, align: 64, offset: 64)
!618 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !619, size: 64, align: 64)
!619 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyListObject", file: !620, line: 40, baseType: !621)
!620 = !DIFile(filename: "./Include/listobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!621 = !DICompositeType(tag: DW_TAG_structure_type, file: !620, line: 23, size: 320, align: 64, elements: !622)
!622 = !{!623, !624, !626}
!623 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !621, file: !620, line: 24, baseType: !122, size: 192, align: 64)
!624 = !DIDerivedType(tag: DW_TAG_member, name: "ob_item", scope: !621, file: !620, line: 26, baseType: !625, size: 64, align: 64, offset: 192)
!625 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !104, size: 64, align: 64)
!626 = !DIDerivedType(tag: DW_TAG_member, name: "allocated", scope: !621, file: !620, line: 39, baseType: !110, size: 64, align: 64, offset: 256)
!627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !628, size: 64, align: 64)
!628 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyTupleObject", file: !629, line: 33, baseType: !630)
!629 = !DIFile(filename: "./Include/tupleobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!630 = !DICompositeType(tag: DW_TAG_structure_type, file: !629, line: 25, size: 256, align: 64, elements: !631)
!631 = !{!632, !633}
!632 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !630, file: !629, line: 26, baseType: !122, size: 192, align: 64)
!633 = !DIDerivedType(tag: DW_TAG_member, name: "ob_item", scope: !630, file: !629, line: 27, baseType: !634, size: 64, align: 64, offset: 192)
!634 = !DICompositeType(tag: DW_TAG_array_type, baseType: !104, size: 64, align: 64, elements: !181)
!635 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !636, size: 64, align: 64)
!636 = !DICompositeType(tag: DW_TAG_structure_type, name: "cmsginfo", scope: !638, file: !637, line: 3451, size: 704, align: 64, elements: !812)
!637 = !DIFile(filename: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1/Modules/socketmodule.c", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!638 = !DISubprogram(name: "sock_sendmsg", scope: !637, file: !637, line: 3444, type: !639, isLocal: true, isDefinition: true, scopeLine: 3445, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_sendmsg, variables: !656)
!639 = !DISubroutineType(types: !640)
!640 = !{!104, !641, !104}
!641 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !642, size: 64, align: 64)
!642 = !DIDerivedType(tag: DW_TAG_typedef, name: "PySocketSockObject", file: !457, line: 172, baseType: !643)
!643 = !DICompositeType(tag: DW_TAG_structure_type, file: !457, line: 161, size: 384, align: 64, elements: !644)
!644 = !{!645, !646, !647, !648, !649, !650, !654}
!645 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !643, file: !457, line: 162, baseType: !105, size: 128, align: 64)
!646 = !DIDerivedType(tag: DW_TAG_member, name: "sock_fd", scope: !643, file: !457, line: 163, baseType: !456, size: 32, align: 32, offset: 128)
!647 = !DIDerivedType(tag: DW_TAG_member, name: "sock_family", scope: !643, file: !457, line: 164, baseType: !143, size: 32, align: 32, offset: 160)
!648 = !DIDerivedType(tag: DW_TAG_member, name: "sock_type", scope: !643, file: !457, line: 165, baseType: !143, size: 32, align: 32, offset: 192)
!649 = !DIDerivedType(tag: DW_TAG_member, name: "sock_proto", scope: !643, file: !457, line: 166, baseType: !143, size: 32, align: 32, offset: 224)
!650 = !DIDerivedType(tag: DW_TAG_member, name: "errorhandler", scope: !643, file: !457, line: 167, baseType: !651, size: 64, align: 64, offset: 256)
!651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !652, size: 64, align: 64)
!652 = !DISubroutineType(types: !653)
!653 = !{!104}
!654 = !DIDerivedType(tag: DW_TAG_member, name: "sock_timeout", scope: !643, file: !457, line: 170, baseType: !655, size: 64, align: 64, offset: 320)
!655 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!656 = !{!657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !686, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !715, !716, !719, !723, !724, !725, !728, !738, !739, !740, !741, !802, !804, !807, !809}
!657 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !638, file: !637, line: 3444, type: !641)
!658 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !638, file: !637, line: 3444, type: !104)
!659 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !638, file: !637, line: 3446, type: !110)
!660 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ndataparts", scope: !638, file: !637, line: 3446, type: !110)
!661 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ndatabufs", scope: !638, file: !637, line: 3446, type: !110)
!662 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ncmsgs", scope: !638, file: !637, line: 3446, type: !110)
!663 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ncmsgbufs", scope: !638, file: !637, line: 3446, type: !110)
!664 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "databufs", scope: !638, file: !637, line: 3447, type: !335)
!665 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "iovs", scope: !638, file: !637, line: 3448, type: !612)
!666 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrbuf", scope: !638, file: !637, line: 3449, type: !667)
!667 = !DIDerivedType(tag: DW_TAG_typedef, name: "sock_addr_t", file: !457, line: 155, baseType: !668)
!668 = !DICompositeType(tag: DW_TAG_union_type, name: "sock_addr", file: !457, line: 127, size: 1024, align: 64, elements: !669)
!669 = !{!670, !671, !672, !673, !674, !675, !684, !685}
!670 = !DIDerivedType(tag: DW_TAG_member, name: "in", scope: !668, file: !457, line: 128, baseType: !459, size: 128, align: 32)
!671 = !DIDerivedType(tag: DW_TAG_member, name: "sa", scope: !668, file: !457, line: 129, baseType: !578, size: 128, align: 16)
!672 = !DIDerivedType(tag: DW_TAG_member, name: "un", scope: !668, file: !457, line: 131, baseType: !477, size: 880, align: 16)
!673 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !668, file: !457, line: 134, baseType: !486, size: 96, align: 32)
!674 = !DIDerivedType(tag: DW_TAG_member, name: "in6", scope: !668, file: !457, line: 137, baseType: !498, size: 224, align: 32)
!675 = !DIDerivedType(tag: DW_TAG_member, name: "storage", scope: !668, file: !457, line: 138, baseType: !676, size: 1024, align: 64)
!676 = !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr_storage", file: !16, line: 161, size: 1024, align: 64, elements: !677)
!677 = !{!678, !679, !680}
!678 = !DIDerivedType(tag: DW_TAG_member, name: "ss_family", scope: !676, file: !16, line: 163, baseType: !462, size: 16, align: 16)
!679 = !DIDerivedType(tag: DW_TAG_member, name: "__ss_align", scope: !676, file: !16, line: 164, baseType: !196, size: 64, align: 64, offset: 64)
!680 = !DIDerivedType(tag: DW_TAG_member, name: "__ss_padding", scope: !676, file: !16, line: 165, baseType: !681, size: 896, align: 8, offset: 128)
!681 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 896, align: 8, elements: !682)
!682 = !{!683}
!683 = !DISubrange(count: 112)
!684 = !DIDerivedType(tag: DW_TAG_member, name: "ll", scope: !668, file: !457, line: 147, baseType: !522, size: 160, align: 32)
!685 = !DIDerivedType(tag: DW_TAG_member, name: "can", scope: !668, file: !457, line: 150, baseType: !563, size: 128, align: 32)
!686 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "msg", scope: !638, file: !637, line: 3450, type: !687)
!687 = !DICompositeType(tag: DW_TAG_structure_type, name: "msghdr", file: !16, line: 221, size: 448, align: 64, elements: !688)
!688 = !{!689, !690, !694, !695, !696, !697, !698}
!689 = !DIDerivedType(tag: DW_TAG_member, name: "msg_name", scope: !687, file: !16, line: 223, baseType: !189, size: 64, align: 64)
!690 = !DIDerivedType(tag: DW_TAG_member, name: "msg_namelen", scope: !687, file: !16, line: 224, baseType: !691, size: 32, align: 32, offset: 64)
!691 = !DIDerivedType(tag: DW_TAG_typedef, name: "socklen_t", file: !692, line: 274, baseType: !693)
!692 = !DIFile(filename: "/usr/include/unistd.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!693 = !DIDerivedType(tag: DW_TAG_typedef, name: "__socklen_t", file: !115, line: 198, baseType: !448)
!694 = !DIDerivedType(tag: DW_TAG_member, name: "msg_iov", scope: !687, file: !16, line: 226, baseType: !612, size: 64, align: 64, offset: 128)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "msg_iovlen", scope: !687, file: !16, line: 227, baseType: !194, size: 64, align: 64, offset: 192)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "msg_control", scope: !687, file: !16, line: 229, baseType: !189, size: 64, align: 64, offset: 256)
!697 = !DIDerivedType(tag: DW_TAG_member, name: "msg_controllen", scope: !687, file: !16, line: 230, baseType: !194, size: 64, align: 64, offset: 320)
!698 = !DIDerivedType(tag: DW_TAG_member, name: "msg_flags", scope: !687, file: !16, line: 235, baseType: !143, size: 32, align: 32, offset: 384)
!699 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmsgs", scope: !638, file: !637, line: 3455, type: !635)
!700 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "controlbuf", scope: !638, file: !637, line: 3456, type: !189)
!701 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "controllen", scope: !638, file: !637, line: 3457, type: !194)
!702 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "controllen_last", scope: !638, file: !637, line: 3457, type: !194)
!703 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bytes_sent", scope: !638, file: !637, line: 3458, type: !112)
!704 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrlen", scope: !638, file: !637, line: 3459, type: !143)
!705 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "timeout", scope: !638, file: !637, line: 3459, type: !143)
!706 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !638, file: !637, line: 3459, type: !143)
!707 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "data_arg", scope: !638, file: !637, line: 3460, type: !104)
!708 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmsg_arg", scope: !638, file: !637, line: 3460, type: !104)
!709 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr_arg", scope: !638, file: !637, line: 3460, type: !104)
!710 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "data_fast", scope: !638, file: !637, line: 3460, type: !104)
!711 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmsg_fast", scope: !638, file: !637, line: 3461, type: !104)
!712 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !638, file: !637, line: 3461, type: !104)
!713 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bufsize", scope: !714, file: !637, line: 3529, type: !194)
!714 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3528, column: 32)
!715 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "space", scope: !714, file: !637, line: 3529, type: !194)
!716 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmsgh", scope: !717, file: !637, line: 3557, type: !600)
!717 = distinct !DILexicalBlock(scope: !718, file: !637, line: 3556, column: 24)
!718 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3556, column: 9)
!719 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "msg_len", scope: !720, file: !637, line: 3575, type: !194)
!720 = distinct !DILexicalBlock(scope: !721, file: !637, line: 3574, column: 41)
!721 = distinct !DILexicalBlock(scope: !722, file: !637, line: 3574, column: 9)
!722 = distinct !DILexicalBlock(scope: !717, file: !637, line: 3574, column: 9)
!723 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "data_len", scope: !720, file: !637, line: 3575, type: !194)
!724 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "enough_space", scope: !720, file: !637, line: 3576, type: !143)
!725 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "space", scope: !726, file: !637, line: 3591, type: !194)
!726 = distinct !DILexicalBlock(scope: !727, file: !637, line: 3590, column: 55)
!727 = distinct !DILexicalBlock(scope: !720, file: !637, line: 3590, column: 17)
!728 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "now", scope: !729, file: !637, line: 3615, type: !730)
!729 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3615, column: 5)
!730 = !DIDerivedType(tag: DW_TAG_typedef, name: "_PyTime_timeval", file: !731, line: 17, baseType: !732)
!731 = !DIFile(filename: "./Include/pytime.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!732 = !DICompositeType(tag: DW_TAG_structure_type, name: "timeval", file: !733, line: 30, size: 128, align: 64, elements: !734)
!733 = !DIFile(filename: "/usr/include/bits/time.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!734 = !{!735, !736}
!735 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !732, file: !733, line: 32, baseType: !455, size: 64, align: 64)
!736 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !732, file: !733, line: 33, baseType: !737, size: 64, align: 64, offset: 64)
!737 = !DIDerivedType(tag: DW_TAG_typedef, name: "__suseconds_t", file: !115, line: 150, baseType: !116)
!738 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "deadline", scope: !729, file: !637, line: 3615, type: !730)
!739 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "interval", scope: !729, file: !637, line: 3615, type: !655)
!740 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "has_timeout", scope: !729, file: !637, line: 3615, type: !143)
!741 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !742, file: !637, line: 3616, type: !744)
!742 = distinct !DILexicalBlock(scope: !743, file: !637, line: 3616, column: 5)
!743 = distinct !DILexicalBlock(scope: !729, file: !637, line: 3615, column: 413)
!744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !745, size: 64, align: 64)
!745 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyThreadState", file: !746, line: 139, baseType: !747)
!746 = !DIFile(filename: "./Include/pystate.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!747 = !DICompositeType(tag: DW_TAG_structure_type, name: "_ts", file: !746, line: 69, size: 1536, align: 64, elements: !748)
!748 = !{!749, !751, !752, !772, !775, !776, !777, !778, !779, !780, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801}
!749 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !747, file: !746, line: 72, baseType: !750, size: 64, align: 64)
!750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !747, size: 64, align: 64)
!751 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !747, file: !746, line: 73, baseType: !750, size: 64, align: 64, offset: 64)
!752 = !DIDerivedType(tag: DW_TAG_member, name: "interp", scope: !747, file: !746, line: 74, baseType: !753, size: 64, align: 64, offset: 128)
!753 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !754, size: 64, align: 64)
!754 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyInterpreterState", file: !746, line: 44, baseType: !755)
!755 = !DICompositeType(tag: DW_TAG_structure_type, name: "_is", file: !746, line: 19, size: 832, align: 64, elements: !756)
!756 = !{!757, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771}
!757 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !755, file: !746, line: 21, baseType: !758, size: 64, align: 64)
!758 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !755, size: 64, align: 64)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "tstate_head", scope: !755, file: !746, line: 22, baseType: !750, size: 64, align: 64, offset: 64)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "modules", scope: !755, file: !746, line: 24, baseType: !104, size: 64, align: 64, offset: 128)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "modules_by_index", scope: !755, file: !746, line: 25, baseType: !104, size: 64, align: 64, offset: 192)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "sysdict", scope: !755, file: !746, line: 26, baseType: !104, size: 64, align: 64, offset: 256)
!763 = !DIDerivedType(tag: DW_TAG_member, name: "builtins", scope: !755, file: !746, line: 27, baseType: !104, size: 64, align: 64, offset: 320)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "importlib", scope: !755, file: !746, line: 28, baseType: !104, size: 64, align: 64, offset: 384)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "codec_search_path", scope: !755, file: !746, line: 30, baseType: !104, size: 64, align: 64, offset: 448)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "codec_search_cache", scope: !755, file: !746, line: 31, baseType: !104, size: 64, align: 64, offset: 512)
!767 = !DIDerivedType(tag: DW_TAG_member, name: "codec_error_registry", scope: !755, file: !746, line: 32, baseType: !104, size: 64, align: 64, offset: 576)
!768 = !DIDerivedType(tag: DW_TAG_member, name: "codecs_initialized", scope: !755, file: !746, line: 33, baseType: !143, size: 32, align: 32, offset: 640)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "fscodec_initialized", scope: !755, file: !746, line: 34, baseType: !143, size: 32, align: 32, offset: 672)
!770 = !DIDerivedType(tag: DW_TAG_member, name: "dlopenflags", scope: !755, file: !746, line: 37, baseType: !143, size: 32, align: 32, offset: 704)
!771 = !DIDerivedType(tag: DW_TAG_member, name: "builtins_copy", scope: !755, file: !746, line: 43, baseType: !104, size: 64, align: 64, offset: 768)
!772 = !DIDerivedType(tag: DW_TAG_member, name: "frame", scope: !747, file: !746, line: 76, baseType: !773, size: 64, align: 64, offset: 192)
!773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !774, size: 64, align: 64)
!774 = !DICompositeType(tag: DW_TAG_structure_type, name: "_frame", file: !746, line: 50, flags: DIFlagFwdDecl)
!775 = !DIDerivedType(tag: DW_TAG_member, name: "recursion_depth", scope: !747, file: !746, line: 77, baseType: !143, size: 32, align: 32, offset: 256)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "overflowed", scope: !747, file: !746, line: 78, baseType: !130, size: 8, align: 8, offset: 288)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "recursion_critical", scope: !747, file: !746, line: 80, baseType: !130, size: 8, align: 8, offset: 296)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "tracing", scope: !747, file: !746, line: 85, baseType: !143, size: 32, align: 32, offset: 320)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "use_tracing", scope: !747, file: !746, line: 86, baseType: !143, size: 32, align: 32, offset: 352)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "c_profilefunc", scope: !747, file: !746, line: 88, baseType: !781, size: 64, align: 64, offset: 384)
!781 = !DIDerivedType(tag: DW_TAG_typedef, name: "Py_tracefunc", file: !746, line: 54, baseType: !782)
!782 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !783, size: 64, align: 64)
!783 = !DISubroutineType(types: !784)
!784 = !{!143, !104, !773, !143, !104}
!785 = !DIDerivedType(tag: DW_TAG_member, name: "c_tracefunc", scope: !747, file: !746, line: 89, baseType: !781, size: 64, align: 64, offset: 448)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "c_profileobj", scope: !747, file: !746, line: 90, baseType: !104, size: 64, align: 64, offset: 512)
!787 = !DIDerivedType(tag: DW_TAG_member, name: "c_traceobj", scope: !747, file: !746, line: 91, baseType: !104, size: 64, align: 64, offset: 576)
!788 = !DIDerivedType(tag: DW_TAG_member, name: "curexc_type", scope: !747, file: !746, line: 93, baseType: !104, size: 64, align: 64, offset: 640)
!789 = !DIDerivedType(tag: DW_TAG_member, name: "curexc_value", scope: !747, file: !746, line: 94, baseType: !104, size: 64, align: 64, offset: 704)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "curexc_traceback", scope: !747, file: !746, line: 95, baseType: !104, size: 64, align: 64, offset: 768)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "exc_type", scope: !747, file: !746, line: 97, baseType: !104, size: 64, align: 64, offset: 832)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "exc_value", scope: !747, file: !746, line: 98, baseType: !104, size: 64, align: 64, offset: 896)
!793 = !DIDerivedType(tag: DW_TAG_member, name: "exc_traceback", scope: !747, file: !746, line: 99, baseType: !104, size: 64, align: 64, offset: 960)
!794 = !DIDerivedType(tag: DW_TAG_member, name: "dict", scope: !747, file: !746, line: 101, baseType: !104, size: 64, align: 64, offset: 1024)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "gilstate_counter", scope: !747, file: !746, line: 103, baseType: !143, size: 32, align: 32, offset: 1088)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "async_exc", scope: !747, file: !746, line: 105, baseType: !104, size: 64, align: 64, offset: 1152)
!797 = !DIDerivedType(tag: DW_TAG_member, name: "thread_id", scope: !747, file: !746, line: 106, baseType: !116, size: 64, align: 64, offset: 1216)
!798 = !DIDerivedType(tag: DW_TAG_member, name: "trash_delete_nesting", scope: !747, file: !746, line: 108, baseType: !143, size: 32, align: 32, offset: 1280)
!799 = !DIDerivedType(tag: DW_TAG_member, name: "trash_delete_later", scope: !747, file: !746, line: 109, baseType: !104, size: 64, align: 64, offset: 1344)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "on_delete", scope: !747, file: !746, line: 134, baseType: !437, size: 64, align: 64, offset: 1408)
!801 = !DIDerivedType(tag: DW_TAG_member, name: "on_delete_data", scope: !747, file: !746, line: 135, baseType: !189, size: 64, align: 64, offset: 1472)
!802 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !803, file: !637, line: 3638, type: !104)
!803 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3638, column: 8)
!804 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !805, file: !637, line: 3638, type: !104)
!805 = distinct !DILexicalBlock(scope: !806, file: !637, line: 3638, column: 101)
!806 = distinct !DILexicalBlock(scope: !803, file: !637, line: 3638, column: 67)
!807 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !808, file: !637, line: 3643, type: !104)
!808 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3643, column: 8)
!809 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !810, file: !637, line: 3643, type: !104)
!810 = distinct !DILexicalBlock(scope: !811, file: !637, line: 3643, column: 101)
!811 = distinct !DILexicalBlock(scope: !808, file: !637, line: 3643, column: 67)
!812 = !{!813, !814, !815}
!813 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !636, file: !637, line: 3452, baseType: !143, size: 32, align: 32)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !636, file: !637, line: 3453, baseType: !143, size: 32, align: 32, offset: 32)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !636, file: !637, line: 3454, baseType: !336, size: 640, align: 64, offset: 64)
!816 = !{!817, !821, !825, !836, !841, !869, !876, !893, !976, !987, !997, !998, !1007, !1085, !1136, !1144, !1154, !1171, !1177, !1187, !1191, !1194, !1202, !1210, !1227, !1235, !1247, !1265, !1278, !1298, !1319, !1338, !1356, !1370, !1392, !1397, !1403, !1408, !1411, !1421, !1429, !1444, !1497, !1508, !1516, !1523, !1529, !1536, !1552, !638, !1556, !1563, !1568, !1584, !1593, !1603, !1610, !1637, !1679, !1687, !1705, !1716, !1727, !1746, !1758, !1772, !1779, !1807, !1816, !1825, !1837, !1846, !1858, !1864, !1871, !1879, !1891, !1946, !1973, !1976, !1981, !2008, !2016, !2025, !2031}
!817 = !DISubprogram(name: "PyInit__socket", scope: !637, file: !637, line: 5765, type: !652, isLocal: false, isDefinition: true, scopeLine: 5766, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* ()* @PyInit__socket, variables: !818)
!818 = !{!819, !820}
!819 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "m", scope: !817, file: !637, line: 5767, type: !104)
!820 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "has_ipv6", scope: !817, file: !637, line: 5767, type: !104)
!821 = !DISubprogram(name: "os_init", scope: !637, file: !637, line: 5719, type: !822, isLocal: true, isDefinition: true, scopeLine: 5720, flags: DIFlagPrototyped, isOptimized: true, function: i32 ()* @os_init, variables: !824)
!822 = !DISubroutineType(types: !823)
!823 = !{!143}
!824 = !{}
!825 = !DISubprogram(name: "sock_dealloc", scope: !637, file: !637, line: 3848, type: !826, isLocal: true, isDefinition: true, scopeLine: 3849, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct.PySocketSockObject*)* @sock_dealloc, variables: !828)
!826 = !DISubroutineType(types: !827)
!827 = !{null, !641}
!828 = !{!829, !830, !833, !834, !835}
!829 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !825, file: !637, line: 3848, type: !641)
!830 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "exc", scope: !831, file: !637, line: 3851, type: !104)
!831 = distinct !DILexicalBlock(scope: !832, file: !637, line: 3850, column: 27)
!832 = distinct !DILexicalBlock(scope: !825, file: !637, line: 3850, column: 9)
!833 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "val", scope: !831, file: !637, line: 3851, type: !104)
!834 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tb", scope: !831, file: !637, line: 3851, type: !104)
!835 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "old_refcount", scope: !831, file: !637, line: 3852, type: !110)
!836 = !DISubprogram(name: "sock_repr", scope: !637, file: !637, line: 3869, type: !837, isLocal: true, isDefinition: true, scopeLine: 3870, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*)* @sock_repr, variables: !839)
!837 = !DISubroutineType(types: !838)
!838 = !{!104, !641}
!839 = !{!840}
!840 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !836, file: !637, line: 3869, type: !641)
!841 = !DISubprogram(name: "sock_accept", scope: !637, file: !637, line: 1961, type: !837, isLocal: true, isDefinition: true, scopeLine: 1962, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*)* @sock_accept, variables: !842)
!842 = !{!843, !844, !845, !846, !847, !848, !849, !850, !851, !853, !854, !855, !856, !859, !861, !864, !866}
!843 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !841, file: !637, line: 1961, type: !641)
!844 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrbuf", scope: !841, file: !637, line: 1963, type: !667)
!845 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newfd", scope: !841, file: !637, line: 1964, type: !456)
!846 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrlen", scope: !841, file: !637, line: 1965, type: !691)
!847 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sock", scope: !841, file: !637, line: 1966, type: !104)
!848 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr", scope: !841, file: !637, line: 1967, type: !104)
!849 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !841, file: !637, line: 1968, type: !104)
!850 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "timeout", scope: !841, file: !637, line: 1969, type: !143)
!851 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "now", scope: !852, file: !637, line: 1982, type: !730)
!852 = distinct !DILexicalBlock(scope: !841, file: !637, line: 1982, column: 5)
!853 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "deadline", scope: !852, file: !637, line: 1982, type: !730)
!854 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "interval", scope: !852, file: !637, line: 1982, type: !655)
!855 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "has_timeout", scope: !852, file: !637, line: 1982, type: !143)
!856 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !857, file: !637, line: 1984, type: !744)
!857 = distinct !DILexicalBlock(scope: !858, file: !637, line: 1984, column: 5)
!858 = distinct !DILexicalBlock(scope: !852, file: !637, line: 1982, column: 413)
!859 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !860, file: !637, line: 2046, type: !104)
!860 = distinct !DILexicalBlock(scope: !841, file: !637, line: 2046, column: 8)
!861 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !862, file: !637, line: 2046, type: !104)
!862 = distinct !DILexicalBlock(scope: !863, file: !637, line: 2046, column: 96)
!863 = distinct !DILexicalBlock(scope: !860, file: !637, line: 2046, column: 62)
!864 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !865, file: !637, line: 2047, type: !104)
!865 = distinct !DILexicalBlock(scope: !841, file: !637, line: 2047, column: 8)
!866 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !867, file: !637, line: 2047, type: !104)
!867 = distinct !DILexicalBlock(scope: !868, file: !637, line: 2047, column: 96)
!868 = distinct !DILexicalBlock(scope: !865, file: !637, line: 2047, column: 62)
!869 = !DISubprogram(name: "getsockaddrlen", scope: !637, file: !637, line: 1716, type: !870, isLocal: true, isDefinition: true, scopeLine: 1717, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.PySocketSockObject*, i32*)* @getsockaddrlen, variables: !873)
!870 = !DISubroutineType(types: !871)
!871 = !{!143, !641, !872}
!872 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !691, size: 64, align: 64)
!873 = !{!874, !875}
!874 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !869, file: !637, line: 1716, type: !641)
!875 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "len_ret", arg: 2, scope: !869, file: !637, line: 1716, type: !872)
!876 = !DISubprogram(name: "internal_select_ex", scope: !637, file: !637, line: 596, type: !877, isLocal: true, isDefinition: true, scopeLine: 597, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.PySocketSockObject*, i32, double)* @internal_select_ex, variables: !879)
!877 = !DISubroutineType(types: !878)
!878 = !{!143, !641, !143, !655}
!879 = !{!880, !881, !882, !883, !884, !892}
!880 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !876, file: !637, line: 596, type: !641)
!881 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "writing", arg: 2, scope: !876, file: !637, line: 596, type: !143)
!882 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "interval", arg: 3, scope: !876, file: !637, line: 596, type: !655)
!883 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !876, file: !637, line: 598, type: !143)
!884 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pollfd", scope: !885, file: !637, line: 616, type: !886)
!885 = distinct !DILexicalBlock(scope: !876, file: !637, line: 615, column: 5)
!886 = !DICompositeType(tag: DW_TAG_structure_type, name: "pollfd", file: !887, line: 39, size: 64, align: 32, elements: !888)
!887 = !DIFile(filename: "/usr/include/sys/poll.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!888 = !{!889, !890, !891}
!889 = !DIDerivedType(tag: DW_TAG_member, name: "fd", scope: !886, file: !887, line: 41, baseType: !143, size: 32, align: 32)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "events", scope: !886, file: !887, line: 42, baseType: !585, size: 16, align: 16, offset: 32)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "revents", scope: !886, file: !887, line: 43, baseType: !585, size: 16, align: 16, offset: 48)
!892 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "timeout", scope: !885, file: !637, line: 617, type: !143)
!893 = !DISubprogram(name: "makesockaddr", scope: !637, file: !637, line: 986, type: !894, isLocal: true, isDefinition: true, scopeLine: 987, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (i32, %struct.sockaddr*, i64, i32)* @makesockaddr, variables: !896)
!894 = !DISubroutineType(types: !895)
!895 = !{!104, !456, !577, !194, !143}
!896 = !{!897, !898, !899, !900, !901, !904, !905, !906, !910, !911, !913, !915, !917, !919, !920, !921, !925, !926, !928, !929, !931, !933, !934, !967, !969, !970, !972, !974, !975}
!897 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "sockfd", arg: 1, scope: !893, file: !637, line: 986, type: !456)
!898 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addr", arg: 2, scope: !893, file: !637, line: 986, type: !577)
!899 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addrlen", arg: 3, scope: !893, file: !637, line: 986, type: !194)
!900 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "proto", arg: 4, scope: !893, file: !637, line: 986, type: !143)
!901 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a", scope: !902, file: !637, line: 998, type: !458)
!902 = distinct !DILexicalBlock(scope: !903, file: !637, line: 997, column: 5)
!903 = distinct !DILexicalBlock(scope: !893, file: !637, line: 994, column: 30)
!904 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrobj", scope: !902, file: !637, line: 999, type: !104)
!905 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !902, file: !637, line: 1000, type: !104)
!906 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !907, file: !637, line: 1003, type: !176)
!907 = distinct !DILexicalBlock(scope: !908, file: !637, line: 1003, column: 64)
!908 = distinct !DILexicalBlock(scope: !909, file: !637, line: 1001, column: 22)
!909 = distinct !DILexicalBlock(scope: !902, file: !637, line: 1001, column: 13)
!910 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !907, file: !637, line: 1003, type: !176)
!911 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !912, file: !637, line: 1004, type: !104)
!912 = distinct !DILexicalBlock(scope: !908, file: !637, line: 1004, column: 16)
!913 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a", scope: !914, file: !637, line: 1012, type: !476)
!914 = distinct !DILexicalBlock(scope: !903, file: !637, line: 1011, column: 5)
!915 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a", scope: !916, file: !637, line: 1030, type: !485)
!916 = distinct !DILexicalBlock(scope: !903, file: !637, line: 1029, column: 8)
!917 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a", scope: !918, file: !637, line: 1038, type: !497)
!918 = distinct !DILexicalBlock(scope: !903, file: !637, line: 1037, column: 5)
!919 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrobj", scope: !918, file: !637, line: 1039, type: !104)
!920 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !918, file: !637, line: 1040, type: !104)
!921 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !922, file: !637, line: 1045, type: !176)
!922 = distinct !DILexicalBlock(scope: !923, file: !637, line: 1045, column: 49)
!923 = distinct !DILexicalBlock(scope: !924, file: !637, line: 1041, column: 22)
!924 = distinct !DILexicalBlock(scope: !918, file: !637, line: 1041, column: 13)
!925 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !922, file: !637, line: 1045, type: !176)
!926 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !927, file: !637, line: 1046, type: !448)
!927 = distinct !DILexicalBlock(scope: !923, file: !637, line: 1046, column: 49)
!928 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !927, file: !637, line: 1046, type: !448)
!929 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !930, file: !637, line: 1048, type: !104)
!930 = distinct !DILexicalBlock(scope: !923, file: !637, line: 1048, column: 16)
!931 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a", scope: !932, file: !637, line: 1116, type: !521)
!932 = distinct !DILexicalBlock(scope: !903, file: !637, line: 1115, column: 5)
!933 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ifname", scope: !932, file: !637, line: 1117, type: !151)
!934 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ifr", scope: !932, file: !637, line: 1118, type: !935)
!935 = !DICompositeType(tag: DW_TAG_structure_type, name: "ifreq", file: !936, line: 126, size: 320, align: 64, elements: !937)
!936 = !DIFile(filename: "/usr/include/net/if.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!937 = !{!938, !943}
!938 = !DIDerivedType(tag: DW_TAG_member, name: "ifr_ifrn", scope: !935, file: !936, line: 133, baseType: !939, size: 128, align: 8)
!939 = !DICompositeType(tag: DW_TAG_union_type, scope: !935, file: !936, line: 130, size: 128, align: 8, elements: !940)
!940 = !{!941}
!941 = !DIDerivedType(tag: DW_TAG_member, name: "ifrn_name", scope: !939, file: !936, line: 132, baseType: !942, size: 128, align: 8)
!942 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 128, align: 8, elements: !512)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "ifr_ifru", scope: !935, file: !936, line: 149, baseType: !944, size: 192, align: 64, offset: 128)
!944 = !DICompositeType(tag: DW_TAG_union_type, scope: !935, file: !936, line: 135, size: 192, align: 64, elements: !945)
!945 = !{!946, !947, !948, !949, !950, !951, !952, !953, !954, !963, !964, !965}
!946 = !DIDerivedType(tag: DW_TAG_member, name: "ifru_addr", scope: !944, file: !936, line: 137, baseType: !578, size: 128, align: 16)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "ifru_dstaddr", scope: !944, file: !936, line: 138, baseType: !578, size: 128, align: 16)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "ifru_broadaddr", scope: !944, file: !936, line: 139, baseType: !578, size: 128, align: 16)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "ifru_netmask", scope: !944, file: !936, line: 140, baseType: !578, size: 128, align: 16)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "ifru_hwaddr", scope: !944, file: !936, line: 141, baseType: !578, size: 128, align: 16)
!951 = !DIDerivedType(tag: DW_TAG_member, name: "ifru_flags", scope: !944, file: !936, line: 142, baseType: !585, size: 16, align: 16)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "ifru_ivalue", scope: !944, file: !936, line: 143, baseType: !143, size: 32, align: 32)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "ifru_mtu", scope: !944, file: !936, line: 144, baseType: !143, size: 32, align: 32)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "ifru_map", scope: !944, file: !936, line: 145, baseType: !955, size: 192, align: 64)
!955 = !DICompositeType(tag: DW_TAG_structure_type, name: "ifmap", file: !936, line: 111, size: 192, align: 64, elements: !956)
!956 = !{!957, !958, !959, !960, !961, !962}
!957 = !DIDerivedType(tag: DW_TAG_member, name: "mem_start", scope: !955, file: !936, line: 113, baseType: !196, size: 64, align: 64)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "mem_end", scope: !955, file: !936, line: 114, baseType: !196, size: 64, align: 64, offset: 64)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "base_addr", scope: !955, file: !936, line: 115, baseType: !176, size: 16, align: 16, offset: 128)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "irq", scope: !955, file: !936, line: 116, baseType: !473, size: 8, align: 8, offset: 144)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "dma", scope: !955, file: !936, line: 117, baseType: !473, size: 8, align: 8, offset: 152)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "port", scope: !955, file: !936, line: 118, baseType: !473, size: 8, align: 8, offset: 160)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "ifru_slave", scope: !944, file: !936, line: 146, baseType: !942, size: 128, align: 8)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "ifru_newname", scope: !944, file: !936, line: 147, baseType: !942, size: 128, align: 8)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "ifru_data", scope: !944, file: !936, line: 148, baseType: !966, size: 64, align: 64)
!966 = !DIDerivedType(tag: DW_TAG_typedef, name: "__caddr_t", file: !115, line: 192, baseType: !151)
!967 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !968, file: !637, line: 1127, type: !176)
!968 = distinct !DILexicalBlock(scope: !932, file: !637, line: 1127, column: 46)
!969 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !968, file: !637, line: 1127, type: !176)
!970 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a", scope: !971, file: !637, line: 1138, type: !532)
!971 = distinct !DILexicalBlock(scope: !903, file: !637, line: 1137, column: 5)
!972 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "a", scope: !973, file: !637, line: 1171, type: !562)
!973 = distinct !DILexicalBlock(scope: !903, file: !637, line: 1170, column: 5)
!974 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ifname", scope: !973, file: !637, line: 1172, type: !151)
!975 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ifr", scope: !973, file: !637, line: 1173, type: !935)
!976 = !DISubprogram(name: "makeipaddr", scope: !637, file: !637, line: 919, type: !977, isLocal: true, isDefinition: true, scopeLine: 920, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.sockaddr*, i32)* @makeipaddr, variables: !979)
!977 = !DISubroutineType(types: !978)
!978 = !{!104, !577, !143}
!979 = !{!980, !981, !982, !986}
!980 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addr", arg: 1, scope: !976, file: !637, line: 919, type: !577)
!981 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addrlen", arg: 2, scope: !976, file: !637, line: 919, type: !143)
!982 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !976, file: !637, line: 921, type: !983)
!983 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 8200, align: 8, elements: !984)
!984 = !{!985}
!985 = !DISubrange(count: 1025)
!986 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "error", scope: !976, file: !637, line: 922, type: !143)
!987 = !DISubprogram(name: "set_gaierror", scope: !637, file: !637, line: 527, type: !988, isLocal: true, isDefinition: true, scopeLine: 528, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (i32)* @set_gaierror, variables: !990)
!988 = !DISubroutineType(types: !989)
!989 = !{!104, !143}
!990 = !{!991, !992, !993}
!991 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "error", arg: 1, scope: !987, file: !637, line: 527, type: !143)
!992 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !987, file: !637, line: 529, type: !104)
!993 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !994, file: !637, line: 544, type: !104)
!994 = distinct !DILexicalBlock(scope: !995, file: !637, line: 544, column: 12)
!995 = distinct !DILexicalBlock(scope: !996, file: !637, line: 542, column: 26)
!996 = distinct !DILexicalBlock(scope: !987, file: !637, line: 542, column: 9)
!997 = !DISubprogram(name: "set_error", scope: !637, file: !637, line: 492, type: !652, isLocal: true, isDefinition: true, scopeLine: 493, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* ()* @set_error, variables: !824)
!998 = !DISubprogram(name: "sock_bind", scope: !637, file: !637, line: 2240, type: !639, isLocal: true, isDefinition: true, scopeLine: 2241, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_bind, variables: !999)
!999 = !{!1000, !1001, !1002, !1003, !1004, !1005}
!1000 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !998, file: !637, line: 2240, type: !641)
!1001 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addro", arg: 2, scope: !998, file: !637, line: 2240, type: !104)
!1002 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrbuf", scope: !998, file: !637, line: 2242, type: !667)
!1003 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrlen", scope: !998, file: !637, line: 2243, type: !143)
!1004 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !998, file: !637, line: 2244, type: !143)
!1005 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1006, file: !637, line: 2248, type: !744)
!1006 = distinct !DILexicalBlock(scope: !998, file: !637, line: 2248, column: 5)
!1007 = !DISubprogram(name: "getsockaddrarg", scope: !637, file: !637, line: 1224, type: !1008, isLocal: true, isDefinition: true, scopeLine: 1226, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.PySocketSockObject*, %struct._object*, %struct.sockaddr*, i32*)* @getsockaddrarg, variables: !1010)
!1008 = !DISubroutineType(types: !1009)
!1009 = !{!143, !641, !104, !577, !610}
!1010 = !{!1011, !1012, !1013, !1014, !1015, !1018, !1019, !1020, !1021, !1023, !1025, !1026, !1027, !1029, !1030, !1031, !1032, !1034, !1035, !1037, !1038, !1039, !1040, !1041, !1042, !1044, !1045, !1047, !1048, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1059, !1060, !1062, !1063, !1064, !1065, !1066, !1067, !1070, !1071, !1072, !1073, !1080, !1083}
!1011 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1007, file: !637, line: 1224, type: !641)
!1012 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1007, file: !637, line: 1224, type: !104)
!1013 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addr_ret", arg: 3, scope: !1007, file: !637, line: 1225, type: !577)
!1014 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "len_ret", arg: 4, scope: !1007, file: !637, line: 1225, type: !610)
!1015 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr", scope: !1016, file: !637, line: 1232, type: !476)
!1016 = distinct !DILexicalBlock(scope: !1017, file: !637, line: 1231, column: 5)
!1017 = distinct !DILexicalBlock(scope: !1007, file: !637, line: 1227, column: 29)
!1018 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "path", scope: !1016, file: !637, line: 1233, type: !151)
!1019 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !1016, file: !637, line: 1234, type: !143)
!1020 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1016, file: !637, line: 1235, type: !143)
!1021 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1022, file: !637, line: 1274, type: !104)
!1022 = distinct !DILexicalBlock(scope: !1016, file: !637, line: 1274, column: 12)
!1023 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr", scope: !1024, file: !637, line: 1282, type: !485)
!1024 = distinct !DILexicalBlock(scope: !1017, file: !637, line: 1281, column: 5)
!1025 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pid", scope: !1024, file: !637, line: 1283, type: !143)
!1026 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "groups", scope: !1024, file: !637, line: 1283, type: !143)
!1027 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr", scope: !1028, file: !637, line: 1310, type: !458)
!1028 = distinct !DILexicalBlock(scope: !1017, file: !637, line: 1309, column: 5)
!1029 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "host", scope: !1028, file: !637, line: 1311, type: !151)
!1030 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "port", scope: !1028, file: !637, line: 1312, type: !143)
!1031 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1028, file: !637, line: 1312, type: !143)
!1032 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !1033, file: !637, line: 1337, type: !176)
!1033 = distinct !DILexicalBlock(scope: !1028, file: !637, line: 1337, column: 42)
!1034 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !1033, file: !637, line: 1337, type: !176)
!1035 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr", scope: !1036, file: !637, line: 1345, type: !497)
!1036 = distinct !DILexicalBlock(scope: !1017, file: !637, line: 1344, column: 5)
!1037 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "host", scope: !1036, file: !637, line: 1346, type: !151)
!1038 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "port", scope: !1036, file: !637, line: 1347, type: !143)
!1039 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !1036, file: !637, line: 1347, type: !143)
!1040 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flowinfo", scope: !1036, file: !637, line: 1348, type: !448)
!1041 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "scope_id", scope: !1036, file: !637, line: 1348, type: !448)
!1042 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !1043, file: !637, line: 1382, type: !176)
!1043 = distinct !DILexicalBlock(scope: !1036, file: !637, line: 1382, column: 43)
!1044 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !1043, file: !637, line: 1382, type: !176)
!1045 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !1046, file: !637, line: 1383, type: !448)
!1046 = distinct !DILexicalBlock(scope: !1036, file: !637, line: 1383, column: 47)
!1047 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !1046, file: !637, line: 1383, type: !448)
!1048 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr", scope: !1049, file: !637, line: 1489, type: !521)
!1049 = distinct !DILexicalBlock(scope: !1017, file: !637, line: 1488, column: 5)
!1050 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ifr", scope: !1049, file: !637, line: 1490, type: !935)
!1051 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "interfaceName", scope: !1049, file: !637, line: 1491, type: !151)
!1052 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "protoNumber", scope: !1049, file: !637, line: 1492, type: !143)
!1053 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hatype", scope: !1049, file: !637, line: 1493, type: !143)
!1054 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pkttype", scope: !1049, file: !637, line: 1494, type: !143)
!1055 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "haddr", scope: !1049, file: !637, line: 1495, type: !151)
!1056 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "halen", scope: !1049, file: !637, line: 1496, type: !448)
!1057 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !1058, file: !637, line: 1529, type: !176)
!1058 = distinct !DILexicalBlock(scope: !1049, file: !637, line: 1529, column: 46)
!1059 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !1058, file: !637, line: 1529, type: !176)
!1060 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atype", scope: !1061, file: !637, line: 1545, type: !448)
!1061 = distinct !DILexicalBlock(scope: !1017, file: !637, line: 1544, column: 5)
!1062 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v1", scope: !1061, file: !637, line: 1545, type: !448)
!1063 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v2", scope: !1061, file: !637, line: 1545, type: !448)
!1064 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v3", scope: !1061, file: !637, line: 1545, type: !448)
!1065 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "scope", scope: !1061, file: !637, line: 1546, type: !448)
!1066 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr", scope: !1061, file: !637, line: 1547, type: !532)
!1067 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr", scope: !1068, file: !637, line: 1599, type: !562)
!1068 = distinct !DILexicalBlock(scope: !1069, file: !637, line: 1598, column: 9)
!1069 = distinct !DILexicalBlock(scope: !1017, file: !637, line: 1594, column: 32)
!1070 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "interfaceName", scope: !1068, file: !637, line: 1600, type: !104)
!1071 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ifr", scope: !1068, file: !637, line: 1601, type: !935)
!1072 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !1068, file: !637, line: 1602, type: !110)
!1073 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1074, file: !637, line: 1619, type: !104)
!1074 = distinct !DILexicalBlock(scope: !1075, file: !637, line: 1619, column: 24)
!1075 = distinct !DILexicalBlock(scope: !1076, file: !637, line: 1617, column: 58)
!1076 = distinct !DILexicalBlock(scope: !1077, file: !637, line: 1617, column: 21)
!1077 = distinct !DILexicalBlock(scope: !1078, file: !637, line: 1614, column: 62)
!1078 = distinct !DILexicalBlock(scope: !1079, file: !637, line: 1614, column: 24)
!1079 = distinct !DILexicalBlock(scope: !1068, file: !637, line: 1612, column: 17)
!1080 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1081, file: !637, line: 1625, type: !104)
!1081 = distinct !DILexicalBlock(scope: !1082, file: !637, line: 1625, column: 20)
!1082 = distinct !DILexicalBlock(scope: !1078, file: !637, line: 1622, column: 20)
!1083 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1084, file: !637, line: 1633, type: !104)
!1084 = distinct !DILexicalBlock(scope: !1068, file: !637, line: 1633, column: 16)
!1085 = !DISubprogram(name: "setipaddr", scope: !637, file: !637, line: 759, type: !1086, isLocal: true, isDefinition: true, scopeLine: 760, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i8*, %struct.sockaddr*, i64, i32)* @setipaddr, variables: !1088)
!1086 = !DISubroutineType(types: !1087)
!1087 = !{!143, !151, !577, !194, !143}
!1088 = !{!1089, !1090, !1091, !1092, !1093, !1106, !1107, !1108, !1111, !1113, !1116, !1117, !1119, !1120, !1122, !1123, !1125, !1126, !1128, !1131, !1134}
!1089 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "name", arg: 1, scope: !1085, file: !637, line: 759, type: !151)
!1090 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addr_ret", arg: 2, scope: !1085, file: !637, line: 759, type: !577)
!1091 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addr_ret_size", arg: 3, scope: !1085, file: !637, line: 759, type: !194)
!1092 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "af", arg: 4, scope: !1085, file: !637, line: 759, type: !143)
!1093 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hints", scope: !1085, file: !637, line: 761, type: !1094)
!1094 = !DICompositeType(tag: DW_TAG_structure_type, name: "addrinfo", file: !1095, line: 567, size: 384, align: 64, elements: !1096)
!1095 = !DIFile(filename: "/usr/include/netdb.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!1096 = !{!1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104}
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "ai_flags", scope: !1094, file: !1095, line: 569, baseType: !143, size: 32, align: 32)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "ai_family", scope: !1094, file: !1095, line: 570, baseType: !143, size: 32, align: 32, offset: 32)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "ai_socktype", scope: !1094, file: !1095, line: 571, baseType: !143, size: 32, align: 32, offset: 64)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "ai_protocol", scope: !1094, file: !1095, line: 572, baseType: !143, size: 32, align: 32, offset: 96)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addrlen", scope: !1094, file: !1095, line: 573, baseType: !691, size: 32, align: 32, offset: 128)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addr", scope: !1094, file: !1095, line: 574, baseType: !577, size: 64, align: 64, offset: 192)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "ai_canonname", scope: !1094, file: !1095, line: 575, baseType: !151, size: 64, align: 64, offset: 256)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "ai_next", scope: !1094, file: !1095, line: 576, baseType: !1105, size: 64, align: 64, offset: 320)
!1105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1094, size: 64, align: 64)
!1106 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1085, file: !637, line: 761, type: !1105)
!1107 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "error", scope: !1085, file: !637, line: 762, type: !143)
!1108 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "siz", scope: !1109, file: !637, line: 766, type: !143)
!1109 = distinct !DILexicalBlock(scope: !1110, file: !637, line: 765, column: 26)
!1110 = distinct !DILexicalBlock(scope: !1085, file: !637, line: 765, column: 9)
!1111 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1112, file: !637, line: 771, type: !744)
!1112 = distinct !DILexicalBlock(scope: !1109, file: !637, line: 771, column: 9)
!1113 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__s1_len", scope: !1114, file: !637, line: 813, type: !194)
!1114 = distinct !DILexicalBlock(scope: !1115, file: !637, line: 813, column: 24)
!1115 = distinct !DILexicalBlock(scope: !1085, file: !637, line: 813, column: 9)
!1116 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__s2_len", scope: !1114, file: !637, line: 813, type: !194)
!1117 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__s1", scope: !1118, file: !637, line: 813, type: !597)
!1118 = distinct !DILexicalBlock(scope: !1114, file: !637, line: 813, column: 1720)
!1119 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__result", scope: !1118, file: !637, line: 813, type: !143)
!1120 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__s1_len", scope: !1121, file: !637, line: 814, type: !194)
!1121 = distinct !DILexicalBlock(scope: !1115, file: !637, line: 814, column: 24)
!1122 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__s2_len", scope: !1121, file: !637, line: 814, type: !194)
!1123 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__s1", scope: !1124, file: !637, line: 814, type: !597)
!1124 = distinct !DILexicalBlock(scope: !1121, file: !637, line: 814, column: 1660)
!1125 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__result", scope: !1124, file: !637, line: 814, type: !143)
!1126 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sin", scope: !1127, file: !637, line: 815, type: !458)
!1127 = distinct !DILexicalBlock(scope: !1115, file: !637, line: 814, column: 2266)
!1128 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sin", scope: !1129, file: !637, line: 835, type: !458)
!1129 = distinct !DILexicalBlock(scope: !1130, file: !637, line: 834, column: 29)
!1130 = distinct !DILexicalBlock(scope: !1085, file: !637, line: 834, column: 9)
!1131 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sin", scope: !1132, file: !637, line: 850, type: !497)
!1132 = distinct !DILexicalBlock(scope: !1133, file: !637, line: 849, column: 196)
!1133 = distinct !DILexicalBlock(scope: !1085, file: !637, line: 849, column: 9)
!1134 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1135, file: !637, line: 879, type: !744)
!1135 = distinct !DILexicalBlock(scope: !1085, file: !637, line: 879, column: 5)
!1136 = !DISubprogram(name: "sock_close", scope: !637, file: !637, line: 2270, type: !837, isLocal: true, isDefinition: true, scopeLine: 2271, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*)* @sock_close, variables: !1137)
!1137 = !{!1138, !1139, !1140}
!1138 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1136, file: !637, line: 2270, type: !641)
!1139 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !1136, file: !637, line: 2272, type: !456)
!1140 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1141, file: !637, line: 2276, type: !744)
!1141 = distinct !DILexicalBlock(scope: !1142, file: !637, line: 2276, column: 9)
!1142 = distinct !DILexicalBlock(scope: !1143, file: !637, line: 2274, column: 34)
!1143 = distinct !DILexicalBlock(scope: !1136, file: !637, line: 2274, column: 9)
!1144 = !DISubprogram(name: "sock_connect", scope: !637, file: !637, line: 2396, type: !639, isLocal: true, isDefinition: true, scopeLine: 2397, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_connect, variables: !1145)
!1145 = !{!1146, !1147, !1148, !1149, !1150, !1151, !1152}
!1146 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1144, file: !637, line: 2396, type: !641)
!1147 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addro", arg: 2, scope: !1144, file: !637, line: 2396, type: !104)
!1148 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrbuf", scope: !1144, file: !637, line: 2398, type: !667)
!1149 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrlen", scope: !1144, file: !637, line: 2399, type: !143)
!1150 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1144, file: !637, line: 2400, type: !143)
!1151 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "timeout", scope: !1144, file: !637, line: 2401, type: !143)
!1152 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1153, file: !637, line: 2406, type: !744)
!1153 = distinct !DILexicalBlock(scope: !1144, file: !637, line: 2406, column: 5)
!1154 = !DISubprogram(name: "internal_connect", scope: !637, file: !637, line: 2305, type: !1155, isLocal: true, isDefinition: true, scopeLine: 2307, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.PySocketSockObject*, %struct.sockaddr*, i32, i32*)* @internal_connect, variables: !1157)
!1155 = !DISubroutineType(types: !1156)
!1156 = !{!143, !641, !577, !143, !610}
!1157 = !{!1158, !1159, !1160, !1161, !1162, !1163, !1164}
!1158 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1154, file: !637, line: 2305, type: !641)
!1159 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addr", arg: 2, scope: !1154, file: !637, line: 2305, type: !577)
!1160 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addrlen", arg: 3, scope: !1154, file: !637, line: 2305, type: !143)
!1161 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "timeoutp", arg: 4, scope: !1154, file: !637, line: 2306, type: !610)
!1162 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1154, file: !637, line: 2308, type: !143)
!1163 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "timeout", scope: !1154, file: !637, line: 2308, type: !143)
!1164 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res_size", scope: !1165, file: !637, line: 2369, type: !691)
!1165 = distinct !DILexicalBlock(scope: !1166, file: !637, line: 2365, column: 31)
!1166 = distinct !DILexicalBlock(scope: !1167, file: !637, line: 2365, column: 17)
!1167 = distinct !DILexicalBlock(scope: !1168, file: !637, line: 2363, column: 60)
!1168 = distinct !DILexicalBlock(scope: !1169, file: !637, line: 2363, column: 13)
!1169 = distinct !DILexicalBlock(scope: !1170, file: !637, line: 2362, column: 32)
!1170 = distinct !DILexicalBlock(scope: !1154, file: !637, line: 2362, column: 9)
!1171 = !DISubprogram(name: "internal_select", scope: !637, file: !637, line: 654, type: !1172, isLocal: true, isDefinition: true, scopeLine: 655, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.PySocketSockObject*, i32)* @internal_select, variables: !1174)
!1172 = !DISubroutineType(types: !1173)
!1173 = !{!143, !641, !143}
!1174 = !{!1175, !1176}
!1175 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1171, file: !637, line: 654, type: !641)
!1176 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "writing", arg: 2, scope: !1171, file: !637, line: 654, type: !143)
!1177 = !DISubprogram(name: "sock_connect_ex", scope: !637, file: !637, line: 2430, type: !639, isLocal: true, isDefinition: true, scopeLine: 2431, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_connect_ex, variables: !1178)
!1178 = !{!1179, !1180, !1181, !1182, !1183, !1184, !1185}
!1179 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1177, file: !637, line: 2430, type: !641)
!1180 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addro", arg: 2, scope: !1177, file: !637, line: 2430, type: !104)
!1181 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrbuf", scope: !1177, file: !637, line: 2432, type: !667)
!1182 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrlen", scope: !1177, file: !637, line: 2433, type: !143)
!1183 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1177, file: !637, line: 2434, type: !143)
!1184 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "timeout", scope: !1177, file: !637, line: 2435, type: !143)
!1185 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1186, file: !637, line: 2440, type: !744)
!1186 = distinct !DILexicalBlock(scope: !1177, file: !637, line: 2440, column: 5)
!1187 = !DISubprogram(name: "sock_detach", scope: !637, file: !637, line: 2290, type: !837, isLocal: true, isDefinition: true, scopeLine: 2291, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*)* @sock_detach, variables: !1188)
!1188 = !{!1189, !1190}
!1189 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1187, file: !637, line: 2290, type: !641)
!1190 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !1187, file: !637, line: 2292, type: !456)
!1191 = !DISubprogram(name: "sock_fileno", scope: !637, file: !637, line: 2464, type: !837, isLocal: true, isDefinition: true, scopeLine: 2465, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*)* @sock_fileno, variables: !1192)
!1192 = !{!1193}
!1193 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1191, file: !637, line: 2464, type: !641)
!1194 = !DISubprogram(name: "sock_getpeername", scope: !637, file: !637, line: 2507, type: !837, isLocal: true, isDefinition: true, scopeLine: 2508, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*)* @sock_getpeername, variables: !1195)
!1195 = !{!1196, !1197, !1198, !1199, !1200}
!1196 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1194, file: !637, line: 2507, type: !641)
!1197 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrbuf", scope: !1194, file: !637, line: 2509, type: !667)
!1198 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1194, file: !637, line: 2510, type: !143)
!1199 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrlen", scope: !1194, file: !637, line: 2511, type: !691)
!1200 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1201, file: !637, line: 2516, type: !744)
!1201 = distinct !DILexicalBlock(scope: !1194, file: !637, line: 2516, column: 5)
!1202 = !DISubprogram(name: "sock_getsockname", scope: !637, file: !637, line: 2478, type: !837, isLocal: true, isDefinition: true, scopeLine: 2479, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*)* @sock_getsockname, variables: !1203)
!1203 = !{!1204, !1205, !1206, !1207, !1208}
!1204 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1202, file: !637, line: 2478, type: !641)
!1205 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrbuf", scope: !1202, file: !637, line: 2480, type: !667)
!1206 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1202, file: !637, line: 2481, type: !143)
!1207 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrlen", scope: !1202, file: !637, line: 2482, type: !691)
!1208 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1209, file: !637, line: 2487, type: !744)
!1209 = distinct !DILexicalBlock(scope: !1202, file: !637, line: 2487, column: 5)
!1210 = !DISubprogram(name: "sock_getsockopt", scope: !637, file: !637, line: 2190, type: !639, isLocal: true, isDefinition: true, scopeLine: 2191, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_getsockopt, variables: !1211)
!1211 = !{!1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1222, !1223}
!1212 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1210, file: !637, line: 2190, type: !641)
!1213 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1210, file: !637, line: 2190, type: !104)
!1214 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "level", scope: !1210, file: !637, line: 2192, type: !143)
!1215 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "optname", scope: !1210, file: !637, line: 2193, type: !143)
!1216 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1210, file: !637, line: 2194, type: !143)
!1217 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1210, file: !637, line: 2195, type: !104)
!1218 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buflen", scope: !1210, file: !637, line: 2196, type: !691)
!1219 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flag", scope: !1220, file: !637, line: 2203, type: !143)
!1220 = distinct !DILexicalBlock(scope: !1221, file: !637, line: 2202, column: 22)
!1221 = distinct !DILexicalBlock(scope: !1210, file: !637, line: 2202, column: 9)
!1222 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flagsize", scope: !1220, file: !637, line: 2204, type: !691)
!1223 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1224, file: !637, line: 2222, type: !104)
!1224 = distinct !DILexicalBlock(scope: !1225, file: !637, line: 2222, column: 12)
!1225 = distinct !DILexicalBlock(scope: !1226, file: !637, line: 2221, column: 18)
!1226 = distinct !DILexicalBlock(scope: !1210, file: !637, line: 2221, column: 9)
!1227 = !DISubprogram(name: "sock_listen", scope: !637, file: !637, line: 2537, type: !639, isLocal: true, isDefinition: true, scopeLine: 2538, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_listen, variables: !1228)
!1228 = !{!1229, !1230, !1231, !1232, !1233}
!1229 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1227, file: !637, line: 2537, type: !641)
!1230 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !1227, file: !637, line: 2537, type: !104)
!1231 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "backlog", scope: !1227, file: !637, line: 2539, type: !143)
!1232 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1227, file: !637, line: 2540, type: !143)
!1233 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1234, file: !637, line: 2545, type: !744)
!1234 = distinct !DILexicalBlock(scope: !1227, file: !637, line: 2545, column: 5)
!1235 = !DISubprogram(name: "sock_recv", scope: !637, file: !637, line: 2623, type: !639, isLocal: true, isDefinition: true, scopeLine: 2624, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_recv, variables: !1236)
!1236 = !{!1237, !1238, !1239, !1240, !1241, !1242, !1243}
!1237 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1235, file: !637, line: 2623, type: !641)
!1238 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1235, file: !637, line: 2623, type: !104)
!1239 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "recvlen", scope: !1235, file: !637, line: 2625, type: !110)
!1240 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "outlen", scope: !1235, file: !637, line: 2625, type: !110)
!1241 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !1235, file: !637, line: 2626, type: !143)
!1242 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1235, file: !637, line: 2627, type: !104)
!1243 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1244, file: !637, line: 2648, type: !104)
!1244 = distinct !DILexicalBlock(scope: !1245, file: !637, line: 2648, column: 12)
!1245 = distinct !DILexicalBlock(scope: !1246, file: !637, line: 2645, column: 21)
!1246 = distinct !DILexicalBlock(scope: !1235, file: !637, line: 2645, column: 9)
!1247 = !DISubprogram(name: "sock_recv_guts", scope: !637, file: !637, line: 2577, type: !1248, isLocal: true, isDefinition: true, scopeLine: 2578, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct.PySocketSockObject*, i8*, i64, i32)* @sock_recv_guts, variables: !1250)
!1248 = !DISubroutineType(types: !1249)
!1249 = !{!110, !641, !151, !110, !143}
!1250 = !{!1251, !1252, !1253, !1254, !1255, !1256, !1257, !1259, !1260, !1261, !1262}
!1251 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1247, file: !637, line: 2577, type: !641)
!1252 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cbuf", arg: 2, scope: !1247, file: !637, line: 2577, type: !151)
!1253 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "len", arg: 3, scope: !1247, file: !637, line: 2577, type: !110)
!1254 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "flags", arg: 4, scope: !1247, file: !637, line: 2577, type: !143)
!1255 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "outlen", scope: !1247, file: !637, line: 2579, type: !110)
!1256 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "timeout", scope: !1247, file: !637, line: 2580, type: !143)
!1257 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "now", scope: !1258, file: !637, line: 2591, type: !730)
!1258 = distinct !DILexicalBlock(scope: !1247, file: !637, line: 2591, column: 5)
!1259 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "deadline", scope: !1258, file: !637, line: 2591, type: !730)
!1260 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "interval", scope: !1258, file: !637, line: 2591, type: !655)
!1261 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "has_timeout", scope: !1258, file: !637, line: 2591, type: !143)
!1262 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1263, file: !637, line: 2592, type: !744)
!1263 = distinct !DILexicalBlock(scope: !1264, file: !637, line: 2592, column: 5)
!1264 = distinct !DILexicalBlock(scope: !1258, file: !637, line: 2591, column: 413)
!1265 = !DISubprogram(name: "sock_recv_into", scope: !637, file: !637, line: 2672, type: !1266, isLocal: true, isDefinition: true, scopeLine: 2673, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*, %struct._object*)* @sock_recv_into, variables: !1268)
!1266 = !DISubroutineType(types: !1267)
!1267 = !{!104, !641, !104, !104}
!1268 = !{!1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277}
!1269 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1265, file: !637, line: 2672, type: !641)
!1270 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1265, file: !637, line: 2672, type: !104)
!1271 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwds", arg: 3, scope: !1265, file: !637, line: 2672, type: !104)
!1272 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !1265, file: !637, line: 2676, type: !143)
!1273 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pbuf", scope: !1265, file: !637, line: 2677, type: !336)
!1274 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1265, file: !637, line: 2678, type: !151)
!1275 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buflen", scope: !1265, file: !637, line: 2679, type: !110)
!1276 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "readlen", scope: !1265, file: !637, line: 2679, type: !110)
!1277 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "recvlen", scope: !1265, file: !637, line: 2679, type: !110)
!1278 = !DISubprogram(name: "sock_recvfrom", scope: !637, file: !637, line: 2798, type: !639, isLocal: true, isDefinition: true, scopeLine: 2799, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_recvfrom, variables: !1279)
!1279 = !{!1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1290, !1293, !1295}
!1280 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1278, file: !637, line: 2798, type: !641)
!1281 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1278, file: !637, line: 2798, type: !104)
!1282 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1278, file: !637, line: 2800, type: !104)
!1283 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr", scope: !1278, file: !637, line: 2801, type: !104)
!1284 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !1278, file: !637, line: 2802, type: !104)
!1285 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !1278, file: !637, line: 2803, type: !143)
!1286 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "recvlen", scope: !1278, file: !637, line: 2804, type: !110)
!1287 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "outlen", scope: !1278, file: !637, line: 2804, type: !110)
!1288 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1289, file: !637, line: 2836, type: !104)
!1289 = distinct !DILexicalBlock(scope: !1278, file: !637, line: 2836, column: 8)
!1290 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1291, file: !637, line: 2836, type: !104)
!1291 = distinct !DILexicalBlock(scope: !1292, file: !637, line: 2836, column: 95)
!1292 = distinct !DILexicalBlock(scope: !1289, file: !637, line: 2836, column: 61)
!1293 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1294, file: !637, line: 2837, type: !104)
!1294 = distinct !DILexicalBlock(scope: !1278, file: !637, line: 2837, column: 8)
!1295 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1296, file: !637, line: 2837, type: !104)
!1296 = distinct !DILexicalBlock(scope: !1297, file: !637, line: 2837, column: 96)
!1297 = distinct !DILexicalBlock(scope: !1294, file: !637, line: 2837, column: 62)
!1298 = !DISubprogram(name: "sock_recvfrom_guts", scope: !637, file: !637, line: 2743, type: !1299, isLocal: true, isDefinition: true, scopeLine: 2745, flags: DIFlagPrototyped, isOptimized: true, function: i64 (%struct.PySocketSockObject*, i8*, i64, i32, %struct._object**)* @sock_recvfrom_guts, variables: !1301)
!1299 = !DISubroutineType(types: !1300)
!1300 = !{!110, !641, !151, !110, !143, !625}
!1301 = !{!1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1313, !1314, !1315, !1316}
!1302 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1298, file: !637, line: 2743, type: !641)
!1303 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cbuf", arg: 2, scope: !1298, file: !637, line: 2743, type: !151)
!1304 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "len", arg: 3, scope: !1298, file: !637, line: 2743, type: !110)
!1305 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "flags", arg: 4, scope: !1298, file: !637, line: 2743, type: !143)
!1306 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addr", arg: 5, scope: !1298, file: !637, line: 2744, type: !625)
!1307 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrbuf", scope: !1298, file: !637, line: 2746, type: !667)
!1308 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "timeout", scope: !1298, file: !637, line: 2747, type: !143)
!1309 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1298, file: !637, line: 2748, type: !110)
!1310 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrlen", scope: !1298, file: !637, line: 2749, type: !691)
!1311 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "now", scope: !1312, file: !637, line: 2761, type: !730)
!1312 = distinct !DILexicalBlock(scope: !1298, file: !637, line: 2761, column: 5)
!1313 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "deadline", scope: !1312, file: !637, line: 2761, type: !730)
!1314 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "interval", scope: !1312, file: !637, line: 2761, type: !655)
!1315 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "has_timeout", scope: !1312, file: !637, line: 2761, type: !143)
!1316 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1317, file: !637, line: 2762, type: !744)
!1317 = distinct !DILexicalBlock(scope: !1318, file: !637, line: 2762, column: 5)
!1318 = distinct !DILexicalBlock(scope: !1312, file: !637, line: 2761, column: 413)
!1319 = !DISubprogram(name: "sock_recvfrom_into", scope: !637, file: !637, line: 2850, type: !1266, isLocal: true, isDefinition: true, scopeLine: 2851, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*, %struct._object*)* @sock_recvfrom_into, variables: !1320)
!1320 = !{!1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1335}
!1321 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1319, file: !637, line: 2850, type: !641)
!1322 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1319, file: !637, line: 2850, type: !104)
!1323 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwds", arg: 3, scope: !1319, file: !637, line: 2850, type: !104)
!1324 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !1319, file: !637, line: 2854, type: !143)
!1325 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pbuf", scope: !1319, file: !637, line: 2855, type: !336)
!1326 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1319, file: !637, line: 2856, type: !151)
!1327 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "readlen", scope: !1319, file: !637, line: 2857, type: !110)
!1328 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buflen", scope: !1319, file: !637, line: 2857, type: !110)
!1329 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "recvlen", scope: !1319, file: !637, line: 2857, type: !110)
!1330 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr", scope: !1319, file: !637, line: 2859, type: !104)
!1331 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1332, file: !637, line: 2888, type: !104)
!1332 = distinct !DILexicalBlock(scope: !1333, file: !637, line: 2888, column: 12)
!1333 = distinct !DILexicalBlock(scope: !1334, file: !637, line: 2885, column: 22)
!1334 = distinct !DILexicalBlock(scope: !1319, file: !637, line: 2885, column: 9)
!1335 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1336, file: !637, line: 2888, type: !104)
!1336 = distinct !DILexicalBlock(scope: !1337, file: !637, line: 2888, column: 100)
!1337 = distinct !DILexicalBlock(scope: !1332, file: !637, line: 2888, column: 66)
!1338 = !DISubprogram(name: "sock_send", scope: !637, file: !637, line: 3232, type: !639, isLocal: true, isDefinition: true, scopeLine: 3233, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_send, variables: !1339)
!1339 = !{!1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1350, !1351, !1352, !1353}
!1340 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1338, file: !637, line: 3232, type: !641)
!1341 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1338, file: !637, line: 3232, type: !104)
!1342 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1338, file: !637, line: 3234, type: !151)
!1343 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !1338, file: !637, line: 3235, type: !110)
!1344 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1338, file: !637, line: 3235, type: !110)
!1345 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !1338, file: !637, line: 3236, type: !143)
!1346 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "timeout", scope: !1338, file: !637, line: 3236, type: !143)
!1347 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pbuf", scope: !1338, file: !637, line: 3237, type: !336)
!1348 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "now", scope: !1349, file: !637, line: 3249, type: !730)
!1349 = distinct !DILexicalBlock(scope: !1338, file: !637, line: 3249, column: 5)
!1350 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "deadline", scope: !1349, file: !637, line: 3249, type: !730)
!1351 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "interval", scope: !1349, file: !637, line: 3249, type: !655)
!1352 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "has_timeout", scope: !1349, file: !637, line: 3249, type: !143)
!1353 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1354, file: !637, line: 3250, type: !744)
!1354 = distinct !DILexicalBlock(scope: !1355, file: !637, line: 3250, column: 5)
!1355 = distinct !DILexicalBlock(scope: !1349, file: !637, line: 3249, column: 413)
!1356 = !DISubprogram(name: "sock_sendall", scope: !637, file: !637, line: 3286, type: !639, isLocal: true, isDefinition: true, scopeLine: 3287, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_sendall, variables: !1357)
!1357 = !{!1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367}
!1358 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1356, file: !637, line: 3286, type: !641)
!1359 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1356, file: !637, line: 3286, type: !104)
!1360 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1356, file: !637, line: 3288, type: !151)
!1361 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !1356, file: !637, line: 3289, type: !110)
!1362 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1356, file: !637, line: 3289, type: !110)
!1363 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !1356, file: !637, line: 3290, type: !143)
!1364 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "timeout", scope: !1356, file: !637, line: 3290, type: !143)
!1365 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "saved_errno", scope: !1356, file: !637, line: 3290, type: !143)
!1366 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pbuf", scope: !1356, file: !637, line: 3291, type: !336)
!1367 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1368, file: !637, line: 3304, type: !744)
!1368 = distinct !DILexicalBlock(scope: !1369, file: !637, line: 3304, column: 9)
!1369 = distinct !DILexicalBlock(scope: !1356, file: !637, line: 3303, column: 8)
!1370 = !DISubprogram(name: "sock_sendto", scope: !637, file: !637, line: 3362, type: !639, isLocal: true, isDefinition: true, scopeLine: 3363, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_sendto, variables: !1371)
!1371 = !{!1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1386, !1387, !1388, !1389}
!1372 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1370, file: !637, line: 3362, type: !641)
!1373 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1370, file: !637, line: 3362, type: !104)
!1374 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pbuf", scope: !1370, file: !637, line: 3364, type: !336)
!1375 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addro", scope: !1370, file: !637, line: 3365, type: !104)
!1376 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1370, file: !637, line: 3366, type: !151)
!1377 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !1370, file: !637, line: 3367, type: !110)
!1378 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "arglen", scope: !1370, file: !637, line: 3367, type: !110)
!1379 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrbuf", scope: !1370, file: !637, line: 3368, type: !667)
!1380 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrlen", scope: !1370, file: !637, line: 3369, type: !143)
!1381 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "n", scope: !1370, file: !637, line: 3369, type: !143)
!1382 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !1370, file: !637, line: 3369, type: !143)
!1383 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "timeout", scope: !1370, file: !637, line: 3369, type: !143)
!1384 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "now", scope: !1385, file: !637, line: 3403, type: !730)
!1385 = distinct !DILexicalBlock(scope: !1370, file: !637, line: 3403, column: 5)
!1386 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "deadline", scope: !1385, file: !637, line: 3403, type: !730)
!1387 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "interval", scope: !1385, file: !637, line: 3403, type: !655)
!1388 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "has_timeout", scope: !1385, file: !637, line: 3403, type: !143)
!1389 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1390, file: !637, line: 3404, type: !744)
!1390 = distinct !DILexicalBlock(scope: !1391, file: !637, line: 3404, column: 5)
!1391 = distinct !DILexicalBlock(scope: !1385, file: !637, line: 3403, column: 413)
!1392 = !DISubprogram(name: "sock_setblocking", scope: !637, file: !637, line: 2064, type: !639, isLocal: true, isDefinition: true, scopeLine: 2065, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_setblocking, variables: !1393)
!1393 = !{!1394, !1395, !1396}
!1394 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1392, file: !637, line: 2064, type: !641)
!1395 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !1392, file: !637, line: 2064, type: !104)
!1396 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "block", scope: !1392, file: !637, line: 2066, type: !116)
!1397 = !DISubprogram(name: "internal_setblocking", scope: !637, file: !637, line: 553, type: !1172, isLocal: true, isDefinition: true, scopeLine: 554, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.PySocketSockObject*, i32)* @internal_setblocking, variables: !1398)
!1398 = !{!1399, !1400, !1401}
!1399 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1397, file: !637, line: 553, type: !641)
!1400 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "block", arg: 2, scope: !1397, file: !637, line: 553, type: !143)
!1401 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1402, file: !637, line: 566, type: !744)
!1402 = distinct !DILexicalBlock(scope: !1397, file: !637, line: 566, column: 5)
!1403 = !DISubprogram(name: "sock_settimeout", scope: !637, file: !637, line: 2093, type: !639, isLocal: true, isDefinition: true, scopeLine: 2094, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_settimeout, variables: !1404)
!1404 = !{!1405, !1406, !1407}
!1405 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1403, file: !637, line: 2093, type: !641)
!1406 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !1403, file: !637, line: 2093, type: !104)
!1407 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "timeout", scope: !1403, file: !637, line: 2095, type: !655)
!1408 = !DISubprogram(name: "sock_gettimeout", scope: !637, file: !637, line: 2127, type: !837, isLocal: true, isDefinition: true, scopeLine: 2128, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*)* @sock_gettimeout, variables: !1409)
!1409 = !{!1410}
!1410 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1408, file: !637, line: 2127, type: !641)
!1411 = !DISubprogram(name: "sock_setsockopt", scope: !637, file: !637, line: 2150, type: !639, isLocal: true, isDefinition: true, scopeLine: 2151, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_setsockopt, variables: !1412)
!1412 = !{!1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420}
!1413 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1411, file: !637, line: 2150, type: !641)
!1414 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1411, file: !637, line: 2150, type: !104)
!1415 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "level", scope: !1411, file: !637, line: 2152, type: !143)
!1416 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "optname", scope: !1411, file: !637, line: 2153, type: !143)
!1417 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1411, file: !637, line: 2154, type: !143)
!1418 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1411, file: !637, line: 2155, type: !151)
!1419 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buflen", scope: !1411, file: !637, line: 2156, type: !143)
!1420 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flag", scope: !1411, file: !637, line: 2157, type: !143)
!1421 = !DISubprogram(name: "sock_shutdown", scope: !637, file: !637, line: 3669, type: !639, isLocal: true, isDefinition: true, scopeLine: 3670, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_shutdown, variables: !1422)
!1422 = !{!1423, !1424, !1425, !1426, !1427}
!1423 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1421, file: !637, line: 3669, type: !641)
!1424 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !1421, file: !637, line: 3669, type: !104)
!1425 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "how", scope: !1421, file: !637, line: 3671, type: !143)
!1426 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1421, file: !637, line: 3672, type: !143)
!1427 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1428, file: !637, line: 3677, type: !744)
!1428 = distinct !DILexicalBlock(scope: !1421, file: !637, line: 3677, column: 5)
!1429 = !DISubprogram(name: "sock_recvmsg", scope: !637, file: !637, line: 3076, type: !639, isLocal: true, isDefinition: true, scopeLine: 3077, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_recvmsg, variables: !1430)
!1430 = !{!1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1441}
!1431 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1429, file: !637, line: 3076, type: !641)
!1432 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1429, file: !637, line: 3076, type: !104)
!1433 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bufsize", scope: !1429, file: !637, line: 3078, type: !110)
!1434 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ancbufsize", scope: !1429, file: !637, line: 3078, type: !110)
!1435 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !1429, file: !637, line: 3079, type: !143)
!1436 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "iov", scope: !1429, file: !637, line: 3080, type: !613)
!1437 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1429, file: !637, line: 3081, type: !104)
!1438 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1429, file: !637, line: 3081, type: !104)
!1439 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1440, file: !637, line: 3100, type: !104)
!1440 = distinct !DILexicalBlock(scope: !1429, file: !637, line: 3100, column: 8)
!1441 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1442, file: !637, line: 3100, type: !104)
!1442 = distinct !DILexicalBlock(scope: !1443, file: !637, line: 3100, column: 95)
!1443 = distinct !DILexicalBlock(scope: !1440, file: !637, line: 3100, column: 61)
!1444 = !DISubprogram(name: "sock_recvmsg_guts", scope: !637, file: !637, line: 2918, type: !1445, isLocal: true, isDefinition: true, scopeLine: 2921, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct.iovec*, i32, i32, i64, %struct._object* (i64, i8*)*, i8*)* @sock_recvmsg_guts, variables: !1450)
!1445 = !DISubroutineType(types: !1446)
!1446 = !{!104, !641, !612, !143, !143, !110, !1447, !189}
!1447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1448, size: 64, align: 64)
!1448 = !DISubroutineType(types: !1449)
!1449 = !{!104, !112, !189}
!1450 = !{!1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1471, !1472, !1473, !1474, !1477, !1481, !1482, !1483, !1485, !1487, !1490, !1496}
!1451 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1444, file: !637, line: 2918, type: !641)
!1452 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "iov", arg: 2, scope: !1444, file: !637, line: 2918, type: !612)
!1453 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "iovlen", arg: 3, scope: !1444, file: !637, line: 2918, type: !143)
!1454 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "flags", arg: 4, scope: !1444, file: !637, line: 2919, type: !143)
!1455 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "controllen", arg: 5, scope: !1444, file: !637, line: 2919, type: !110)
!1456 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "makeval", arg: 6, scope: !1444, file: !637, line: 2920, type: !1447)
!1457 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "makeval_data", arg: 7, scope: !1444, file: !637, line: 2920, type: !189)
!1458 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bytes_received", scope: !1444, file: !637, line: 2922, type: !112)
!1459 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "timeout", scope: !1444, file: !637, line: 2923, type: !143)
!1460 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrbuf", scope: !1444, file: !637, line: 2924, type: !667)
!1461 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrbuflen", scope: !1444, file: !637, line: 2925, type: !691)
!1462 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "msg", scope: !1444, file: !637, line: 2926, type: !687)
!1463 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmsg_list", scope: !1444, file: !637, line: 2927, type: !104)
!1464 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1444, file: !637, line: 2927, type: !104)
!1465 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "controlbuf", scope: !1444, file: !637, line: 2928, type: !189)
!1466 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmsgh", scope: !1444, file: !637, line: 2929, type: !600)
!1467 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmsgdatalen", scope: !1444, file: !637, line: 2930, type: !194)
!1468 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmsg_status", scope: !1444, file: !637, line: 2931, type: !143)
!1469 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "now", scope: !1470, file: !637, line: 2958, type: !730)
!1470 = distinct !DILexicalBlock(scope: !1444, file: !637, line: 2958, column: 5)
!1471 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "deadline", scope: !1470, file: !637, line: 2958, type: !730)
!1472 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "interval", scope: !1470, file: !637, line: 2958, type: !655)
!1473 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "has_timeout", scope: !1470, file: !637, line: 2958, type: !143)
!1474 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1475, file: !637, line: 2959, type: !744)
!1475 = distinct !DILexicalBlock(scope: !1476, file: !637, line: 2959, column: 5)
!1476 = distinct !DILexicalBlock(scope: !1470, file: !637, line: 2958, column: 413)
!1477 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bytes", scope: !1478, file: !637, line: 2988, type: !104)
!1478 = distinct !DILexicalBlock(scope: !1479, file: !637, line: 2987, column: 68)
!1479 = distinct !DILexicalBlock(scope: !1480, file: !637, line: 2986, column: 5)
!1480 = distinct !DILexicalBlock(scope: !1444, file: !637, line: 2986, column: 5)
!1481 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tuple", scope: !1478, file: !637, line: 2988, type: !104)
!1482 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !1478, file: !637, line: 2989, type: !143)
!1483 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1484, file: !637, line: 3012, type: !104)
!1484 = distinct !DILexicalBlock(scope: !1478, file: !637, line: 3012, column: 12)
!1485 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1486, file: !637, line: 3032, type: !104)
!1486 = distinct !DILexicalBlock(scope: !1444, file: !637, line: 3032, column: 8)
!1487 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1488, file: !637, line: 3032, type: !104)
!1488 = distinct !DILexicalBlock(scope: !1489, file: !637, line: 3032, column: 101)
!1489 = distinct !DILexicalBlock(scope: !1486, file: !637, line: 3032, column: 67)
!1490 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "numfds", scope: !1491, file: !637, line: 3046, type: !194)
!1491 = distinct !DILexicalBlock(scope: !1492, file: !637, line: 3045, column: 45)
!1492 = distinct !DILexicalBlock(scope: !1493, file: !637, line: 3044, column: 13)
!1493 = distinct !DILexicalBlock(scope: !1494, file: !637, line: 3040, column: 68)
!1494 = distinct !DILexicalBlock(scope: !1495, file: !637, line: 3039, column: 5)
!1495 = distinct !DILexicalBlock(scope: !1444, file: !637, line: 3039, column: 5)
!1496 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fdp", scope: !1491, file: !637, line: 3047, type: !610)
!1497 = !DISubprogram(name: "get_cmsg_data_len", scope: !637, file: !637, line: 1938, type: !1498, isLocal: true, isDefinition: true, scopeLine: 1939, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.msghdr*, %struct.cmsghdr*, i64*)* @get_cmsg_data_len, variables: !1502)
!1498 = !DISubroutineType(types: !1499)
!1499 = !{!143, !1500, !600, !1501}
!1500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !687, size: 64, align: 64)
!1501 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !194, size: 64, align: 64)
!1502 = !{!1503, !1504, !1505, !1506, !1507}
!1503 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "msg", arg: 1, scope: !1497, file: !637, line: 1938, type: !1500)
!1504 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cmsgh", arg: 2, scope: !1497, file: !637, line: 1938, type: !600)
!1505 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "data_len", arg: 3, scope: !1497, file: !637, line: 1938, type: !1501)
!1506 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "space", scope: !1497, file: !637, line: 1940, type: !194)
!1507 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmsg_data_len", scope: !1497, file: !637, line: 1940, type: !194)
!1508 = !DISubprogram(name: "cmsg_min_space", scope: !637, file: !637, line: 1881, type: !1509, isLocal: true, isDefinition: true, scopeLine: 1882, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.msghdr*, %struct.cmsghdr*, i64)* @cmsg_min_space, variables: !1511)
!1509 = !DISubroutineType(types: !1510)
!1510 = !{!143, !1500, !600, !194}
!1511 = !{!1512, !1513, !1514, !1515}
!1512 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "msg", arg: 1, scope: !1508, file: !637, line: 1881, type: !1500)
!1513 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cmsgh", arg: 2, scope: !1508, file: !637, line: 1881, type: !600)
!1514 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "space", arg: 3, scope: !1508, file: !637, line: 1881, type: !194)
!1515 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "cmsg_offset", scope: !1508, file: !637, line: 1883, type: !194)
!1516 = !DISubprogram(name: "get_cmsg_data_space", scope: !637, file: !637, line: 1916, type: !1498, isLocal: true, isDefinition: true, scopeLine: 1917, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct.msghdr*, %struct.cmsghdr*, i64*)* @get_cmsg_data_space, variables: !1517)
!1517 = !{!1518, !1519, !1520, !1521, !1522}
!1518 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "msg", arg: 1, scope: !1516, file: !637, line: 1916, type: !1500)
!1519 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "cmsgh", arg: 2, scope: !1516, file: !637, line: 1916, type: !600)
!1520 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "space", arg: 3, scope: !1516, file: !637, line: 1916, type: !1501)
!1521 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "data_offset", scope: !1516, file: !637, line: 1918, type: !194)
!1522 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "data_ptr", scope: !1516, file: !637, line: 1919, type: !151)
!1523 = !DISubprogram(name: "__cmsg_nxthdr", scope: !16, file: !16, line: 276, type: !1524, isLocal: false, isDefinition: true, scopeLine: 277, flags: DIFlagPrototyped, isOptimized: true, function: %struct.cmsghdr* (%struct.msghdr*, %struct.cmsghdr*)* @__cmsg_nxthdr, variables: !1526)
!1524 = !DISubroutineType(types: !1525)
!1525 = !{!600, !1500, !600}
!1526 = !{!1527, !1528}
!1527 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__mhdr", arg: 1, scope: !1523, file: !16, line: 276, type: !1500)
!1528 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "__cmsg", arg: 2, scope: !1523, file: !16, line: 276, type: !600)
!1529 = !DISubprogram(name: "makeval_recvmsg", scope: !637, file: !637, line: 3063, type: !1448, isLocal: true, isDefinition: true, scopeLine: 3064, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (i64, i8*)* @makeval_recvmsg, variables: !1530)
!1530 = !{!1531, !1532, !1533, !1534}
!1531 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "received", arg: 1, scope: !1529, file: !637, line: 3063, type: !112)
!1532 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "data", arg: 2, scope: !1529, file: !637, line: 3063, type: !189)
!1533 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1529, file: !637, line: 3065, type: !625)
!1534 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xincref_tmp", scope: !1535, file: !637, line: 3069, type: !104)
!1535 = distinct !DILexicalBlock(scope: !1529, file: !637, line: 3069, column: 8)
!1536 = !DISubprogram(name: "sock_recvmsg_into", scope: !637, file: !637, line: 3143, type: !639, isLocal: true, isDefinition: true, scopeLine: 3144, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.PySocketSockObject*, %struct._object*)* @sock_recvmsg_into, variables: !1537)
!1537 = !{!1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550}
!1538 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1536, file: !637, line: 3143, type: !641)
!1539 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1536, file: !637, line: 3143, type: !104)
!1540 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ancbufsize", scope: !1536, file: !637, line: 3145, type: !110)
!1541 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !1536, file: !637, line: 3146, type: !143)
!1542 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "iovs", scope: !1536, file: !637, line: 3147, type: !612)
!1543 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1536, file: !637, line: 3148, type: !110)
!1544 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "nitems", scope: !1536, file: !637, line: 3148, type: !110)
!1545 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "nbufs", scope: !1536, file: !637, line: 3148, type: !110)
!1546 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "bufs", scope: !1536, file: !637, line: 3149, type: !335)
!1547 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buffers_arg", scope: !1536, file: !637, line: 3150, type: !104)
!1548 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fast", scope: !1536, file: !637, line: 3150, type: !104)
!1549 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1536, file: !637, line: 3150, type: !104)
!1550 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1551, file: !637, line: 3190, type: !104)
!1551 = distinct !DILexicalBlock(scope: !1536, file: !637, line: 3190, column: 8)
!1552 = !DISubprogram(name: "makeval_recvmsg_into", scope: !637, file: !637, line: 3135, type: !1448, isLocal: true, isDefinition: true, scopeLine: 3136, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (i64, i8*)* @makeval_recvmsg_into, variables: !1553)
!1553 = !{!1554, !1555}
!1554 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "received", arg: 1, scope: !1552, file: !637, line: 3135, type: !112)
!1555 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "data", arg: 2, scope: !1552, file: !637, line: 3135, type: !189)
!1556 = !DISubprogram(name: "get_CMSG_SPACE", scope: !637, file: !637, line: 1861, type: !1557, isLocal: true, isDefinition: true, scopeLine: 1862, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i64, i64*)* @get_CMSG_SPACE, variables: !1559)
!1557 = !DISubroutineType(types: !1558)
!1558 = !{!143, !194, !1501}
!1559 = !{!1560, !1561, !1562}
!1560 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "length", arg: 1, scope: !1556, file: !637, line: 1861, type: !194)
!1561 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "result", arg: 2, scope: !1556, file: !637, line: 1861, type: !1501)
!1562 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !1556, file: !637, line: 1863, type: !194)
!1563 = !DISubprogram(name: "get_CMSG_LEN", scope: !637, file: !637, line: 1844, type: !1557, isLocal: true, isDefinition: true, scopeLine: 1845, flags: DIFlagPrototyped, isOptimized: true, function: i32 (i64, i64*)* @get_CMSG_LEN, variables: !1564)
!1564 = !{!1565, !1566, !1567}
!1565 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "length", arg: 1, scope: !1563, file: !637, line: 1844, type: !194)
!1566 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "result", arg: 2, scope: !1563, file: !637, line: 1844, type: !1501)
!1567 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !1563, file: !637, line: 1846, type: !194)
!1568 = !DISubprogram(name: "sock_initobj", scope: !637, file: !637, line: 3917, type: !311, isLocal: true, isDefinition: true, scopeLine: 3918, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._object*, %struct._object*, %struct._object*)* @sock_initobj, variables: !1569)
!1569 = !{!1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580}
!1570 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1568, file: !637, line: 3917, type: !104)
!1571 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1568, file: !637, line: 3917, type: !104)
!1572 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwds", arg: 3, scope: !1568, file: !637, line: 3917, type: !104)
!1573 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !1568, file: !637, line: 3919, type: !641)
!1574 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fdobj", scope: !1568, file: !637, line: 3920, type: !104)
!1575 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !1568, file: !637, line: 3921, type: !456)
!1576 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "family", scope: !1568, file: !637, line: 3922, type: !143)
!1577 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "type", scope: !1568, file: !637, line: 3922, type: !143)
!1578 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "proto", scope: !1568, file: !637, line: 3922, type: !143)
!1579 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_flag_works", scope: !1568, file: !637, line: 3926, type: !610)
!1580 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1581, file: !637, line: 4011, type: !744)
!1581 = distinct !DILexicalBlock(scope: !1582, file: !637, line: 4011, column: 9)
!1582 = distinct !DILexicalBlock(scope: !1583, file: !637, line: 3974, column: 10)
!1583 = distinct !DILexicalBlock(scope: !1568, file: !637, line: 3937, column: 9)
!1584 = !DISubprogram(name: "init_sockobject", scope: !637, file: !637, line: 705, type: !1585, isLocal: true, isDefinition: true, scopeLine: 707, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct.PySocketSockObject*, i32, i32, i32, i32)* @init_sockobject, variables: !1587)
!1585 = !DISubroutineType(types: !1586)
!1586 = !{null, !641, !456, !143, !143, !143}
!1587 = !{!1588, !1589, !1590, !1591, !1592}
!1588 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "s", arg: 1, scope: !1584, file: !637, line: 705, type: !641)
!1589 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fd", arg: 2, scope: !1584, file: !637, line: 706, type: !456)
!1590 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "family", arg: 3, scope: !1584, file: !637, line: 706, type: !143)
!1591 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "type", arg: 4, scope: !1584, file: !637, line: 706, type: !143)
!1592 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "proto", arg: 5, scope: !1584, file: !637, line: 706, type: !143)
!1593 = !DISubprogram(name: "sock_new", scope: !637, file: !637, line: 3893, type: !1594, isLocal: true, isDefinition: true, scopeLine: 3894, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @sock_new, variables: !1598)
!1594 = !DISubroutineType(types: !1595)
!1595 = !{!104, !1596, !104, !104}
!1596 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1597, size: 64, align: 64)
!1597 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyTypeObject", file: !106, line: 422, baseType: !119)
!1598 = !{!1599, !1600, !1601, !1602}
!1599 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "type", arg: 1, scope: !1593, file: !637, line: 3893, type: !1596)
!1600 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1593, file: !637, line: 3893, type: !104)
!1601 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwds", arg: 3, scope: !1593, file: !637, line: 3893, type: !104)
!1602 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "new", scope: !1593, file: !637, line: 3895, type: !104)
!1603 = !DISubprogram(name: "socket_gethostbyname", scope: !637, file: !637, line: 4195, type: !226, isLocal: true, isDefinition: true, scopeLine: 4196, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_gethostbyname, variables: !1604)
!1604 = !{!1605, !1606, !1607, !1608, !1609}
!1605 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1603, file: !637, line: 4195, type: !104)
!1606 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1603, file: !637, line: 4195, type: !104)
!1607 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "name", scope: !1603, file: !637, line: 4197, type: !151)
!1608 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addrbuf", scope: !1603, file: !637, line: 4198, type: !667)
!1609 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !1603, file: !637, line: 4199, type: !104)
!1610 = !DISubprogram(name: "socket_gethostbyname_ex", scope: !637, file: !637, line: 4348, type: !226, isLocal: true, isDefinition: true, scopeLine: 4349, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_gethostbyname_ex, variables: !1611)
!1611 = !{!1612, !1613, !1614, !1615, !1625, !1626, !1627, !1628, !1629, !1633, !1634, !1635}
!1612 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1610, file: !637, line: 4348, type: !104)
!1613 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1610, file: !637, line: 4348, type: !104)
!1614 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "name", scope: !1610, file: !637, line: 4350, type: !151)
!1615 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "h", scope: !1610, file: !637, line: 4351, type: !1616)
!1616 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1617, size: 64, align: 64)
!1617 = !DICompositeType(tag: DW_TAG_structure_type, name: "hostent", file: !1095, line: 100, size: 256, align: 64, elements: !1618)
!1618 = !{!1619, !1620, !1622, !1623, !1624}
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "h_name", scope: !1617, file: !1095, line: 102, baseType: !151, size: 64, align: 64)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "h_aliases", scope: !1617, file: !1095, line: 103, baseType: !1621, size: 64, align: 64, offset: 64)
!1621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !151, size: 64, align: 64)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "h_addrtype", scope: !1617, file: !1095, line: 104, baseType: !143, size: 32, align: 32, offset: 128)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "h_length", scope: !1617, file: !1095, line: 105, baseType: !143, size: 32, align: 32, offset: 160)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "h_addr_list", scope: !1617, file: !1095, line: 106, baseType: !1621, size: 64, align: 64, offset: 192)
!1625 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr", scope: !1610, file: !637, line: 4352, type: !667)
!1626 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sa", scope: !1610, file: !637, line: 4353, type: !577)
!1627 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !1610, file: !637, line: 4354, type: !104)
!1628 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hp_allocated", scope: !1610, file: !637, line: 4356, type: !1617)
!1629 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1610, file: !637, line: 4360, type: !1630)
!1630 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 131072, align: 8, elements: !1631)
!1631 = !{!1632}
!1632 = !DISubrange(count: 16384)
!1633 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf_len", scope: !1610, file: !637, line: 4361, type: !143)
!1634 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "errnop", scope: !1610, file: !637, line: 4362, type: !143)
!1635 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1636, file: !637, line: 4373, type: !744)
!1636 = distinct !DILexicalBlock(scope: !1610, file: !637, line: 4373, column: 5)
!1637 = !DISubprogram(name: "gethost_common", scope: !637, file: !637, line: 4220, type: !1638, isLocal: true, isDefinition: true, scopeLine: 4221, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct.hostent*, %struct.sockaddr*, i32, i32)* @gethost_common, variables: !1640)
!1638 = !DISubroutineType(types: !1639)
!1639 = !{!104, !1616, !577, !143, !143}
!1640 = !{!1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1656, !1658, !1662, !1665, !1667, !1669, !1671, !1674, !1676}
!1641 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "h", arg: 1, scope: !1637, file: !637, line: 4220, type: !1616)
!1642 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "addr", arg: 2, scope: !1637, file: !637, line: 4220, type: !577)
!1643 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "alen", arg: 3, scope: !1637, file: !637, line: 4220, type: !143)
!1644 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "af", arg: 4, scope: !1637, file: !637, line: 4220, type: !143)
!1645 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pch", scope: !1637, file: !637, line: 4222, type: !1621)
!1646 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "rtn_tuple", scope: !1637, file: !637, line: 4223, type: !104)
!1647 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "name_list", scope: !1637, file: !637, line: 4224, type: !104)
!1648 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr_list", scope: !1637, file: !637, line: 4225, type: !104)
!1649 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !1637, file: !637, line: 4226, type: !104)
!1650 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !1651, file: !637, line: 4266, type: !143)
!1651 = distinct !DILexicalBlock(scope: !1652, file: !637, line: 4265, column: 61)
!1652 = distinct !DILexicalBlock(scope: !1653, file: !637, line: 4265, column: 9)
!1653 = distinct !DILexicalBlock(scope: !1654, file: !637, line: 4265, column: 9)
!1654 = distinct !DILexicalBlock(scope: !1655, file: !637, line: 4264, column: 23)
!1655 = distinct !DILexicalBlock(scope: !1637, file: !637, line: 4264, column: 9)
!1656 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1657, file: !637, line: 4272, type: !104)
!1657 = distinct !DILexicalBlock(scope: !1651, file: !637, line: 4272, column: 16)
!1658 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "status", scope: !1659, file: !637, line: 4280, type: !143)
!1659 = distinct !DILexicalBlock(scope: !1660, file: !637, line: 4279, column: 59)
!1660 = distinct !DILexicalBlock(scope: !1661, file: !637, line: 4279, column: 5)
!1661 = distinct !DILexicalBlock(scope: !1637, file: !637, line: 4279, column: 5)
!1662 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sin", scope: !1663, file: !637, line: 4286, type: !459)
!1663 = distinct !DILexicalBlock(scope: !1664, file: !637, line: 4285, column: 13)
!1664 = distinct !DILexicalBlock(scope: !1659, file: !637, line: 4282, column: 21)
!1665 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sin6", scope: !1666, file: !637, line: 4303, type: !498)
!1666 = distinct !DILexicalBlock(scope: !1664, file: !637, line: 4302, column: 13)
!1667 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1668, file: !637, line: 4329, type: !104)
!1668 = distinct !DILexicalBlock(scope: !1659, file: !637, line: 4329, column: 12)
!1669 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1670, file: !637, line: 4338, type: !104)
!1670 = distinct !DILexicalBlock(scope: !1637, file: !637, line: 4338, column: 8)
!1671 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1672, file: !637, line: 4338, type: !104)
!1672 = distinct !DILexicalBlock(scope: !1673, file: !637, line: 4338, column: 101)
!1673 = distinct !DILexicalBlock(scope: !1670, file: !637, line: 4338, column: 67)
!1674 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1675, file: !637, line: 4339, type: !104)
!1675 = distinct !DILexicalBlock(scope: !1637, file: !637, line: 4339, column: 8)
!1676 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1677, file: !637, line: 4339, type: !104)
!1677 = distinct !DILexicalBlock(scope: !1678, file: !637, line: 4339, column: 101)
!1678 = distinct !DILexicalBlock(scope: !1675, file: !637, line: 4339, column: 67)
!1679 = !DISubprogram(name: "set_herror", scope: !637, file: !637, line: 508, type: !988, isLocal: true, isDefinition: true, scopeLine: 509, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (i32)* @set_herror, variables: !1680)
!1680 = !{!1681, !1682, !1683}
!1681 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "h_error", arg: 1, scope: !1679, file: !637, line: 508, type: !143)
!1682 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "v", scope: !1679, file: !637, line: 510, type: !104)
!1683 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1684, file: !637, line: 519, type: !104)
!1684 = distinct !DILexicalBlock(scope: !1685, file: !637, line: 519, column: 12)
!1685 = distinct !DILexicalBlock(scope: !1686, file: !637, line: 517, column: 26)
!1686 = distinct !DILexicalBlock(scope: !1679, file: !637, line: 517, column: 9)
!1687 = !DISubprogram(name: "socket_gethostbyaddr", scope: !637, file: !637, line: 4418, type: !226, isLocal: true, isDefinition: true, scopeLine: 4419, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_gethostbyaddr, variables: !1688)
!1688 = !{!1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703}
!1689 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1687, file: !637, line: 4418, type: !104)
!1690 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1687, file: !637, line: 4418, type: !104)
!1691 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr", scope: !1687, file: !637, line: 4420, type: !667)
!1692 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sa", scope: !1687, file: !637, line: 4421, type: !577)
!1693 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ip_num", scope: !1687, file: !637, line: 4422, type: !151)
!1694 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "h", scope: !1687, file: !637, line: 4423, type: !1616)
!1695 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !1687, file: !637, line: 4424, type: !104)
!1696 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hp_allocated", scope: !1687, file: !637, line: 4426, type: !1617)
!1697 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1687, file: !637, line: 4434, type: !1630)
!1698 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf_len", scope: !1687, file: !637, line: 4435, type: !143)
!1699 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "errnop", scope: !1687, file: !637, line: 4436, type: !143)
!1700 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ap", scope: !1687, file: !637, line: 4442, type: !151)
!1701 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "al", scope: !1687, file: !637, line: 4443, type: !143)
!1702 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "af", scope: !1687, file: !637, line: 4444, type: !143)
!1703 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1704, file: !637, line: 4469, type: !744)
!1704 = distinct !DILexicalBlock(scope: !1687, file: !637, line: 4469, column: 5)
!1705 = !DISubprogram(name: "socket_gethostname", scope: !637, file: !637, line: 4100, type: !226, isLocal: true, isDefinition: true, scopeLine: 4101, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_gethostname, variables: !1706)
!1706 = !{!1707, !1708, !1709, !1713, !1714}
!1707 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1705, file: !637, line: 4100, type: !104)
!1708 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "unused", arg: 2, scope: !1705, file: !637, line: 4100, type: !104)
!1709 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1705, file: !637, line: 4137, type: !1710)
!1710 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 8192, align: 8, elements: !1711)
!1711 = !{!1712}
!1712 = !DISubrange(count: 1024)
!1713 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1705, file: !637, line: 4138, type: !143)
!1714 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1715, file: !637, line: 4139, type: !744)
!1715 = distinct !DILexicalBlock(scope: !1705, file: !637, line: 4139, column: 5)
!1716 = !DISubprogram(name: "socket_sethostname", scope: !637, file: !637, line: 4160, type: !226, isLocal: true, isDefinition: true, scopeLine: 4161, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_sethostname, variables: !1717)
!1717 = !{!1718, !1719, !1720, !1721, !1722, !1723, !1724}
!1718 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1716, file: !637, line: 4160, type: !104)
!1719 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1716, file: !637, line: 4160, type: !104)
!1720 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hnobj", scope: !1716, file: !637, line: 4162, type: !104)
!1721 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1716, file: !637, line: 4163, type: !336)
!1722 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1716, file: !637, line: 4164, type: !143)
!1723 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flag", scope: !1716, file: !637, line: 4164, type: !143)
!1724 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1725, file: !637, line: 4184, type: !104)
!1725 = distinct !DILexicalBlock(scope: !1726, file: !637, line: 4184, column: 12)
!1726 = distinct !DILexicalBlock(scope: !1716, file: !637, line: 4183, column: 9)
!1727 = !DISubprogram(name: "socket_getservbyname", scope: !637, file: !637, line: 4512, type: !226, isLocal: true, isDefinition: true, scopeLine: 4513, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_getservbyname, variables: !1728)
!1728 = !{!1729, !1730, !1731, !1732, !1733, !1741, !1743, !1745}
!1729 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1727, file: !637, line: 4512, type: !104)
!1730 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1727, file: !637, line: 4512, type: !104)
!1731 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "name", scope: !1727, file: !637, line: 4514, type: !151)
!1732 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "proto", scope: !1727, file: !637, line: 4514, type: !151)
!1733 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sp", scope: !1727, file: !637, line: 4515, type: !1734)
!1734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1735, size: 64, align: 64)
!1735 = !DICompositeType(tag: DW_TAG_structure_type, name: "servent", file: !1095, line: 257, size: 256, align: 64, elements: !1736)
!1736 = !{!1737, !1738, !1739, !1740}
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "s_name", scope: !1735, file: !1095, line: 259, baseType: !151, size: 64, align: 64)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "s_aliases", scope: !1735, file: !1095, line: 260, baseType: !1621, size: 64, align: 64, offset: 64)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "s_port", scope: !1735, file: !1095, line: 261, baseType: !143, size: 32, align: 32, offset: 128)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "s_proto", scope: !1735, file: !1095, line: 262, baseType: !151, size: 64, align: 64, offset: 192)
!1741 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1742, file: !637, line: 4518, type: !744)
!1742 = distinct !DILexicalBlock(scope: !1727, file: !637, line: 4518, column: 5)
!1743 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !1744, file: !637, line: 4525, type: !176)
!1744 = distinct !DILexicalBlock(scope: !1727, file: !637, line: 4525, column: 51)
!1745 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !1744, file: !637, line: 4525, type: !176)
!1746 = !DISubprogram(name: "socket_getservbyport", scope: !637, file: !637, line: 4542, type: !226, isLocal: true, isDefinition: true, scopeLine: 4543, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_getservbyport, variables: !1747)
!1747 = !{!1748, !1749, !1750, !1751, !1752, !1753, !1755, !1757}
!1748 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1746, file: !637, line: 4542, type: !104)
!1749 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1746, file: !637, line: 4542, type: !104)
!1750 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "port", scope: !1746, file: !637, line: 4544, type: !143)
!1751 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "proto", scope: !1746, file: !637, line: 4545, type: !151)
!1752 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sp", scope: !1746, file: !637, line: 4546, type: !1734)
!1753 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1754, file: !637, line: 4555, type: !744)
!1754 = distinct !DILexicalBlock(scope: !1746, file: !637, line: 4555, column: 5)
!1755 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !1756, file: !637, line: 4556, type: !176)
!1756 = distinct !DILexicalBlock(scope: !1754, file: !637, line: 4556, column: 40)
!1757 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !1756, file: !637, line: 4556, type: !176)
!1758 = !DISubprogram(name: "socket_getprotobyname", scope: !637, file: !637, line: 4578, type: !226, isLocal: true, isDefinition: true, scopeLine: 4579, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_getprotobyname, variables: !1759)
!1759 = !{!1760, !1761, !1762, !1763, !1770}
!1760 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1758, file: !637, line: 4578, type: !104)
!1761 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1758, file: !637, line: 4578, type: !104)
!1762 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "name", scope: !1758, file: !637, line: 4580, type: !151)
!1763 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sp", scope: !1758, file: !637, line: 4581, type: !1764)
!1764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1765, size: 64, align: 64)
!1765 = !DICompositeType(tag: DW_TAG_structure_type, name: "protoent", file: !1095, line: 326, size: 192, align: 64, elements: !1766)
!1766 = !{!1767, !1768, !1769}
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "p_name", scope: !1765, file: !1095, line: 328, baseType: !151, size: 64, align: 64)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "p_aliases", scope: !1765, file: !1095, line: 329, baseType: !1621, size: 64, align: 64, offset: 64)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "p_proto", scope: !1765, file: !1095, line: 330, baseType: !143, size: 32, align: 32, offset: 128)
!1770 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1771, file: !637, line: 4584, type: !744)
!1771 = distinct !DILexicalBlock(scope: !1758, file: !637, line: 4584, column: 5)
!1772 = !DISubprogram(name: "socket_dup", scope: !637, file: !637, line: 4604, type: !226, isLocal: true, isDefinition: true, scopeLine: 4605, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_dup, variables: !1773)
!1773 = !{!1774, !1775, !1776, !1777, !1778}
!1774 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1772, file: !637, line: 4604, type: !104)
!1775 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fdobj", arg: 2, scope: !1772, file: !637, line: 4604, type: !104)
!1776 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "fd", scope: !1772, file: !637, line: 4606, type: !456)
!1777 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newfd", scope: !1772, file: !637, line: 4606, type: !456)
!1778 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "newfdobj", scope: !1772, file: !637, line: 4607, type: !104)
!1779 = !DISubprogram(name: "socket_socketpair", scope: !637, file: !637, line: 4659, type: !226, isLocal: true, isDefinition: true, scopeLine: 4660, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_socketpair, variables: !1780)
!1780 = !{!1781, !1782, !1783, !1784, !1785, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1797, !1799, !1802, !1804}
!1781 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1779, file: !637, line: 4659, type: !104)
!1782 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1779, file: !637, line: 4659, type: !104)
!1783 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s0", scope: !1779, file: !637, line: 4661, type: !641)
!1784 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s1", scope: !1779, file: !637, line: 4661, type: !641)
!1785 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sv", scope: !1779, file: !637, line: 4662, type: !1786)
!1786 = !DICompositeType(tag: DW_TAG_array_type, baseType: !456, size: 64, align: 32, elements: !1787)
!1787 = !{!1788}
!1788 = !DISubrange(count: 2)
!1789 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "family", scope: !1779, file: !637, line: 4663, type: !143)
!1790 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "type", scope: !1779, file: !637, line: 4663, type: !143)
!1791 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "proto", scope: !1779, file: !637, line: 4663, type: !143)
!1792 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1779, file: !637, line: 4664, type: !104)
!1793 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "atomic_flag_works", scope: !1779, file: !637, line: 4666, type: !610)
!1794 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !1779, file: !637, line: 4670, type: !143)
!1795 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1796, file: !637, line: 4682, type: !744)
!1796 = distinct !DILexicalBlock(scope: !1779, file: !637, line: 4682, column: 5)
!1797 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1798, file: !637, line: 4727, type: !104)
!1798 = distinct !DILexicalBlock(scope: !1779, file: !637, line: 4727, column: 8)
!1799 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1800, file: !637, line: 4727, type: !104)
!1800 = distinct !DILexicalBlock(scope: !1801, file: !637, line: 4727, column: 94)
!1801 = distinct !DILexicalBlock(scope: !1798, file: !637, line: 4727, column: 60)
!1802 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1803, file: !637, line: 4728, type: !104)
!1803 = distinct !DILexicalBlock(scope: !1779, file: !637, line: 4728, column: 8)
!1804 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1805, file: !637, line: 4728, type: !104)
!1805 = distinct !DILexicalBlock(scope: !1806, file: !637, line: 4728, column: 94)
!1806 = distinct !DILexicalBlock(scope: !1803, file: !637, line: 4728, column: 60)
!1807 = !DISubprogram(name: "new_sockobject", scope: !637, file: !637, line: 734, type: !1808, isLocal: true, isDefinition: true, scopeLine: 735, flags: DIFlagPrototyped, isOptimized: true, function: %struct.PySocketSockObject* (i32, i32, i32, i32)* @new_sockobject, variables: !1810)
!1808 = !DISubroutineType(types: !1809)
!1809 = !{!641, !456, !143, !143, !143}
!1810 = !{!1811, !1812, !1813, !1814, !1815}
!1811 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fd", arg: 1, scope: !1807, file: !637, line: 734, type: !456)
!1812 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "family", arg: 2, scope: !1807, file: !637, line: 734, type: !143)
!1813 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "type", arg: 3, scope: !1807, file: !637, line: 734, type: !143)
!1814 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "proto", arg: 4, scope: !1807, file: !637, line: 734, type: !143)
!1815 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "s", scope: !1807, file: !637, line: 736, type: !641)
!1816 = !DISubprogram(name: "socket_ntohs", scope: !637, file: !637, line: 4744, type: !226, isLocal: true, isDefinition: true, scopeLine: 4745, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_ntohs, variables: !1817)
!1817 = !{!1818, !1819, !1820, !1821, !1822, !1824}
!1818 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1816, file: !637, line: 4744, type: !104)
!1819 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1816, file: !637, line: 4744, type: !104)
!1820 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x1", scope: !1816, file: !637, line: 4746, type: !143)
!1821 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x2", scope: !1816, file: !637, line: 4746, type: !143)
!1822 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !1823, file: !637, line: 4756, type: !176)
!1823 = distinct !DILexicalBlock(scope: !1816, file: !637, line: 4756, column: 40)
!1824 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !1823, file: !637, line: 4756, type: !176)
!1825 = !DISubprogram(name: "socket_ntohl", scope: !637, file: !637, line: 4767, type: !226, isLocal: true, isDefinition: true, scopeLine: 4768, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_ntohl, variables: !1826)
!1826 = !{!1827, !1828, !1829, !1830, !1834, !1836}
!1827 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1825, file: !637, line: 4767, type: !104)
!1828 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !1825, file: !637, line: 4767, type: !104)
!1829 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !1825, file: !637, line: 4769, type: !196)
!1830 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "y", scope: !1831, file: !637, line: 4777, type: !196)
!1831 = distinct !DILexicalBlock(scope: !1832, file: !637, line: 4776, column: 9)
!1832 = distinct !DILexicalBlock(scope: !1833, file: !637, line: 4771, column: 77)
!1833 = distinct !DILexicalBlock(scope: !1825, file: !637, line: 4771, column: 9)
!1834 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !1835, file: !637, line: 4791, type: !448)
!1835 = distinct !DILexicalBlock(scope: !1825, file: !637, line: 4791, column: 52)
!1836 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !1835, file: !637, line: 4791, type: !448)
!1837 = !DISubprogram(name: "socket_htons", scope: !637, file: !637, line: 4801, type: !226, isLocal: true, isDefinition: true, scopeLine: 4802, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_htons, variables: !1838)
!1838 = !{!1839, !1840, !1841, !1842, !1843, !1845}
!1839 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1837, file: !637, line: 4801, type: !104)
!1840 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1837, file: !637, line: 4801, type: !104)
!1841 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x1", scope: !1837, file: !637, line: 4803, type: !143)
!1842 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x2", scope: !1837, file: !637, line: 4803, type: !143)
!1843 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !1844, file: !637, line: 4813, type: !176)
!1844 = distinct !DILexicalBlock(scope: !1837, file: !637, line: 4813, column: 40)
!1845 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !1844, file: !637, line: 4813, type: !176)
!1846 = !DISubprogram(name: "socket_htonl", scope: !637, file: !637, line: 4824, type: !226, isLocal: true, isDefinition: true, scopeLine: 4825, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_htonl, variables: !1847)
!1847 = !{!1848, !1849, !1850, !1851, !1855, !1857}
!1848 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1846, file: !637, line: 4824, type: !104)
!1849 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !1846, file: !637, line: 4824, type: !104)
!1850 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "x", scope: !1846, file: !637, line: 4826, type: !196)
!1851 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "y", scope: !1852, file: !637, line: 4834, type: !196)
!1852 = distinct !DILexicalBlock(scope: !1853, file: !637, line: 4833, column: 9)
!1853 = distinct !DILexicalBlock(scope: !1854, file: !637, line: 4828, column: 77)
!1854 = distinct !DILexicalBlock(scope: !1846, file: !637, line: 4828, column: 9)
!1855 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !1856, file: !637, line: 4848, type: !448)
!1856 = distinct !DILexicalBlock(scope: !1846, file: !637, line: 4848, column: 52)
!1857 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !1856, file: !637, line: 4848, type: !448)
!1858 = !DISubprogram(name: "socket_inet_aton", scope: !637, file: !637, line: 4865, type: !226, isLocal: true, isDefinition: true, scopeLine: 4866, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_inet_aton, variables: !1859)
!1859 = !{!1860, !1861, !1862, !1863}
!1860 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1858, file: !637, line: 4865, type: !104)
!1861 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1858, file: !637, line: 4865, type: !104)
!1862 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "buf", scope: !1858, file: !637, line: 4868, type: !468)
!1863 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ip_addr", scope: !1858, file: !637, line: 4878, type: !151)
!1864 = !DISubprogram(name: "socket_inet_ntoa", scope: !637, file: !637, line: 4935, type: !226, isLocal: true, isDefinition: true, scopeLine: 4936, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_inet_ntoa, variables: !1865)
!1865 = !{!1866, !1867, !1868, !1869, !1870}
!1866 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1864, file: !637, line: 4935, type: !104)
!1867 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1864, file: !637, line: 4935, type: !104)
!1868 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "packed_str", scope: !1864, file: !637, line: 4937, type: !151)
!1869 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr_len", scope: !1864, file: !637, line: 4938, type: !143)
!1870 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "packed_addr", scope: !1864, file: !637, line: 4939, type: !468)
!1871 = !DISubprogram(name: "socket_inet_pton", scope: !637, file: !637, line: 4969, type: !226, isLocal: true, isDefinition: true, scopeLine: 4970, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_inet_pton, variables: !1872)
!1872 = !{!1873, !1874, !1875, !1876, !1877, !1878}
!1873 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1871, file: !637, line: 4969, type: !104)
!1874 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1871, file: !637, line: 4969, type: !104)
!1875 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "af", scope: !1871, file: !637, line: 4971, type: !143)
!1876 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ip", scope: !1871, file: !637, line: 4972, type: !151)
!1877 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1871, file: !637, line: 4973, type: !143)
!1878 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "packed", scope: !1871, file: !637, line: 4975, type: !942)
!1879 = !DISubprogram(name: "socket_inet_ntop", scope: !637, file: !637, line: 5059, type: !226, isLocal: true, isDefinition: true, scopeLine: 5060, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_inet_ntop, variables: !1880)
!1880 = !{!1881, !1882, !1883, !1884, !1885, !1886, !1887}
!1881 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1879, file: !637, line: 5059, type: !104)
!1882 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1879, file: !637, line: 5059, type: !104)
!1883 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "af", scope: !1879, file: !637, line: 5061, type: !143)
!1884 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "packed", scope: !1879, file: !637, line: 5062, type: !151)
!1885 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "len", scope: !1879, file: !637, line: 5063, type: !143)
!1886 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "retval", scope: !1879, file: !637, line: 5064, type: !128)
!1887 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ip", scope: !1879, file: !637, line: 5066, type: !1888)
!1888 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 376, align: 8, elements: !1889)
!1889 = !{!1890}
!1890 = !DISubrange(count: 47)
!1891 = !DISubprogram(name: "socket_getaddrinfo", scope: !637, file: !637, line: 5181, type: !235, isLocal: true, isDefinition: true, scopeLine: 5182, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @socket_getaddrinfo, variables: !1892)
!1892 = !{!1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1917, !1919, !1923, !1924, !1926, !1928, !1931, !1933, !1936, !1938, !1941, !1943}
!1893 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1891, file: !637, line: 5181, type: !104)
!1894 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1891, file: !637, line: 5181, type: !104)
!1895 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "kwargs", arg: 3, scope: !1891, file: !637, line: 5181, type: !104)
!1896 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hints", scope: !1891, file: !637, line: 5185, type: !1094)
!1897 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1891, file: !637, line: 5185, type: !1105)
!1898 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res0", scope: !1891, file: !637, line: 5186, type: !1105)
!1899 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hobj", scope: !1891, file: !637, line: 5187, type: !104)
!1900 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pobj", scope: !1891, file: !637, line: 5188, type: !104)
!1901 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pbuf", scope: !1891, file: !637, line: 5189, type: !1902)
!1902 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 240, align: 8, elements: !1903)
!1903 = !{!1904}
!1904 = !DISubrange(count: 30)
!1905 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hptr", scope: !1891, file: !637, line: 5190, type: !151)
!1906 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pptr", scope: !1891, file: !637, line: 5190, type: !151)
!1907 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "family", scope: !1891, file: !637, line: 5191, type: !143)
!1908 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "socktype", scope: !1891, file: !637, line: 5191, type: !143)
!1909 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "protocol", scope: !1891, file: !637, line: 5191, type: !143)
!1910 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !1891, file: !637, line: 5191, type: !143)
!1911 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "error", scope: !1891, file: !637, line: 5192, type: !143)
!1912 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "all", scope: !1891, file: !637, line: 5193, type: !104)
!1913 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "idna", scope: !1891, file: !637, line: 5194, type: !104)
!1914 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "value", scope: !1915, file: !637, line: 5221, type: !116)
!1915 = distinct !DILexicalBlock(scope: !1916, file: !637, line: 5220, column: 59)
!1916 = distinct !DILexicalBlock(scope: !1891, file: !637, line: 5220, column: 9)
!1917 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1918, file: !637, line: 5252, type: !744)
!1918 = distinct !DILexicalBlock(scope: !1891, file: !637, line: 5252, column: 5)
!1919 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "single", scope: !1920, file: !637, line: 5265, type: !104)
!1920 = distinct !DILexicalBlock(scope: !1921, file: !637, line: 5264, column: 47)
!1921 = distinct !DILexicalBlock(scope: !1922, file: !637, line: 5264, column: 5)
!1922 = distinct !DILexicalBlock(scope: !1891, file: !637, line: 5264, column: 5)
!1923 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "addr", scope: !1920, file: !637, line: 5266, type: !104)
!1924 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1925, file: !637, line: 5274, type: !104)
!1925 = distinct !DILexicalBlock(scope: !1920, file: !637, line: 5274, column: 12)
!1926 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1927, file: !637, line: 5280, type: !104)
!1927 = distinct !DILexicalBlock(scope: !1920, file: !637, line: 5280, column: 12)
!1928 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1929, file: !637, line: 5280, type: !104)
!1929 = distinct !DILexicalBlock(scope: !1930, file: !637, line: 5280, column: 102)
!1930 = distinct !DILexicalBlock(scope: !1927, file: !637, line: 5280, column: 68)
!1931 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1932, file: !637, line: 5282, type: !104)
!1932 = distinct !DILexicalBlock(scope: !1891, file: !637, line: 5282, column: 8)
!1933 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1934, file: !637, line: 5282, type: !104)
!1934 = distinct !DILexicalBlock(scope: !1935, file: !637, line: 5282, column: 96)
!1935 = distinct !DILexicalBlock(scope: !1932, file: !637, line: 5282, column: 62)
!1936 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1937, file: !637, line: 5287, type: !104)
!1937 = distinct !DILexicalBlock(scope: !1891, file: !637, line: 5287, column: 8)
!1938 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1939, file: !637, line: 5287, type: !104)
!1939 = distinct !DILexicalBlock(scope: !1940, file: !637, line: 5287, column: 95)
!1940 = distinct !DILexicalBlock(scope: !1937, file: !637, line: 5287, column: 61)
!1941 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1942, file: !637, line: 5288, type: !104)
!1942 = distinct !DILexicalBlock(scope: !1891, file: !637, line: 5288, column: 8)
!1943 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !1944, file: !637, line: 5288, type: !104)
!1944 = distinct !DILexicalBlock(scope: !1945, file: !637, line: 5288, column: 96)
!1945 = distinct !DILexicalBlock(scope: !1942, file: !637, line: 5288, column: 62)
!1946 = !DISubprogram(name: "socket_getnameinfo", scope: !637, file: !637, line: 5304, type: !226, isLocal: true, isDefinition: true, scopeLine: 5305, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_getnameinfo, variables: !1947)
!1947 = !{!1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1961, !1962, !1963, !1964, !1965, !1967, !1970, !1972}
!1948 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1946, file: !637, line: 5304, type: !104)
!1949 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !1946, file: !637, line: 5304, type: !104)
!1950 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sa", scope: !1946, file: !637, line: 5306, type: !104)
!1951 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flags", scope: !1946, file: !637, line: 5307, type: !143)
!1952 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hostp", scope: !1946, file: !637, line: 5308, type: !151)
!1953 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "port", scope: !1946, file: !637, line: 5309, type: !143)
!1954 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "flowinfo", scope: !1946, file: !637, line: 5310, type: !448)
!1955 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "scope_id", scope: !1946, file: !637, line: 5310, type: !448)
!1956 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hbuf", scope: !1946, file: !637, line: 5311, type: !983)
!1957 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "pbuf", scope: !1946, file: !637, line: 5311, type: !1958)
!1958 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 256, align: 8, elements: !1959)
!1959 = !{!1960}
!1960 = !DISubrange(count: 32)
!1961 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "hints", scope: !1946, file: !637, line: 5312, type: !1094)
!1962 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "res", scope: !1946, file: !637, line: 5312, type: !1105)
!1963 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "error", scope: !1946, file: !637, line: 5313, type: !143)
!1964 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ret", scope: !1946, file: !637, line: 5314, type: !104)
!1965 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_save", scope: !1966, file: !637, line: 5337, type: !744)
!1966 = distinct !DILexicalBlock(scope: !1946, file: !637, line: 5337, column: 5)
!1967 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "sin6", scope: !1968, file: !637, line: 5364, type: !497)
!1968 = distinct !DILexicalBlock(scope: !1969, file: !637, line: 5363, column: 9)
!1969 = distinct !DILexicalBlock(scope: !1946, file: !637, line: 5351, column: 29)
!1970 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__v", scope: !1971, file: !637, line: 5366, type: !448)
!1971 = distinct !DILexicalBlock(scope: !1968, file: !637, line: 5366, column: 47)
!1972 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "__x", scope: !1971, file: !637, line: 5366, type: !448)
!1973 = !DISubprogram(name: "socket_getdefaulttimeout", scope: !637, file: !637, line: 5395, type: !216, isLocal: true, isDefinition: true, scopeLine: 5396, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*)* @socket_getdefaulttimeout, variables: !1974)
!1974 = !{!1975}
!1975 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1973, file: !637, line: 5395, type: !104)
!1976 = !DISubprogram(name: "socket_setdefaulttimeout", scope: !637, file: !637, line: 5413, type: !226, isLocal: true, isDefinition: true, scopeLine: 5414, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_setdefaulttimeout, variables: !1977)
!1977 = !{!1978, !1979, !1980}
!1978 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1976, file: !637, line: 5413, type: !104)
!1979 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !1976, file: !637, line: 5413, type: !104)
!1980 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "timeout", scope: !1976, file: !637, line: 5415, type: !655)
!1981 = !DISubprogram(name: "socket_if_nameindex", scope: !637, file: !637, line: 5446, type: !226, isLocal: true, isDefinition: true, scopeLine: 5447, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_if_nameindex, variables: !1982)
!1982 = !{!1983, !1984, !1985, !1986, !1987, !1993, !1997, !2001, !2004, !2006}
!1983 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !1981, file: !637, line: 5446, type: !104)
!1984 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !1981, file: !637, line: 5446, type: !104)
!1985 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "list", scope: !1981, file: !637, line: 5448, type: !104)
!1986 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "i", scope: !1981, file: !637, line: 5449, type: !143)
!1987 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ni", scope: !1981, file: !637, line: 5450, type: !1988)
!1988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1989, size: 64, align: 64)
!1989 = !DICompositeType(tag: DW_TAG_structure_type, name: "if_nameindex", file: !936, line: 33, size: 128, align: 64, elements: !1990)
!1990 = !{!1991, !1992}
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "if_index", scope: !1989, file: !936, line: 35, baseType: !448, size: 32, align: 32)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "if_name", scope: !1989, file: !936, line: 36, baseType: !151, size: 64, align: 64, offset: 64)
!1993 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "ni_tuple", scope: !1994, file: !637, line: 5465, type: !104)
!1994 = distinct !DILexicalBlock(scope: !1995, file: !637, line: 5464, column: 61)
!1995 = distinct !DILexicalBlock(scope: !1996, file: !637, line: 5464, column: 5)
!1996 = distinct !DILexicalBlock(scope: !1981, file: !637, line: 5464, column: 5)
!1997 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_xdecref_tmp", scope: !1998, file: !637, line: 5469, type: !104)
!1998 = distinct !DILexicalBlock(scope: !1999, file: !637, line: 5469, column: 16)
!1999 = distinct !DILexicalBlock(scope: !2000, file: !637, line: 5468, column: 76)
!2000 = distinct !DILexicalBlock(scope: !1994, file: !637, line: 5468, column: 13)
!2001 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2002, file: !637, line: 5469, type: !104)
!2002 = distinct !DILexicalBlock(scope: !2003, file: !637, line: 5469, column: 108)
!2003 = distinct !DILexicalBlock(scope: !1998, file: !637, line: 5469, column: 74)
!2004 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2005, file: !637, line: 5470, type: !104)
!2005 = distinct !DILexicalBlock(scope: !1999, file: !637, line: 5470, column: 16)
!2006 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2007, file: !637, line: 5474, type: !104)
!2007 = distinct !DILexicalBlock(scope: !1994, file: !637, line: 5474, column: 12)
!2008 = !DISubprogram(name: "socket_if_nametoindex", scope: !637, file: !637, line: 5487, type: !226, isLocal: true, isDefinition: true, scopeLine: 5488, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_if_nametoindex, variables: !2009)
!2009 = !{!2010, !2011, !2012, !2013, !2014}
!2010 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2008, file: !637, line: 5487, type: !104)
!2011 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2008, file: !637, line: 5487, type: !104)
!2012 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "oname", scope: !2008, file: !637, line: 5489, type: !104)
!2013 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !2008, file: !637, line: 5490, type: !196)
!2014 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "_py_decref_tmp", scope: !2015, file: !637, line: 5497, type: !104)
!2015 = distinct !DILexicalBlock(scope: !2008, file: !637, line: 5497, column: 8)
!2016 = !DISubprogram(name: "socket_if_indextoname", scope: !637, file: !637, line: 5513, type: !226, isLocal: true, isDefinition: true, scopeLine: 5514, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_if_indextoname, variables: !2017)
!2017 = !{!2018, !2019, !2020, !2021}
!2018 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2016, file: !637, line: 5513, type: !104)
!2019 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !2016, file: !637, line: 5513, type: !104)
!2020 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "index", scope: !2016, file: !637, line: 5515, type: !196)
!2021 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "name", scope: !2016, file: !637, line: 5516, type: !2022)
!2022 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 136, align: 8, elements: !2023)
!2023 = !{!2024}
!2024 = !DISubrange(count: 17)
!2025 = !DISubprogram(name: "socket_CMSG_LEN", scope: !637, file: !637, line: 5542, type: !226, isLocal: true, isDefinition: true, scopeLine: 5543, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_CMSG_LEN, variables: !2026)
!2026 = !{!2027, !2028, !2029, !2030}
!2027 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2025, file: !637, line: 5542, type: !104)
!2028 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2025, file: !637, line: 5542, type: !104)
!2029 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "length", scope: !2025, file: !637, line: 5544, type: !110)
!2030 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2025, file: !637, line: 5545, type: !194)
!2031 = !DISubprogram(name: "socket_CMSG_SPACE", scope: !637, file: !637, line: 5572, type: !226, isLocal: true, isDefinition: true, scopeLine: 5573, flags: DIFlagPrototyped, isOptimized: true, function: %struct._object* (%struct._object*, %struct._object*)* @socket_CMSG_SPACE, variables: !2032)
!2032 = !{!2033, !2034, !2035, !2036}
!2033 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "self", arg: 1, scope: !2031, file: !637, line: 5572, type: !104)
!2034 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "args", arg: 2, scope: !2031, file: !637, line: 5572, type: !104)
!2035 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "length", scope: !2031, file: !637, line: 5574, type: !110)
!2036 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "result", scope: !2031, file: !637, line: 5575, type: !194)
!2037 = !{!2038, !2039, !2040, !2041, !2042, !2046, !2051, !2052, !2056, !2060, !2064, !2068, !2072, !2076, !2080, !2084, !2088, !2092, !2096, !2100, !2102, !2106, !2110, !2111, !2115, !2119, !2120, !2124, !2128, !2132, !2136, !2140, !2144, !2146, !2150, !2154, !2158, !2163, !2165, !2166, !2167, !2188, !2192, !2196, !2200, !2204, !2208, !2212, !2216, !2220, !2221, !2225, !2226, !2230, !2234, !2235, !2236, !2237, !2241, !2245, !2249, !2253, !2257, !2265, !2269, !2273, !2277, !2281, !2285, !2289, !2290, !2294, !2298}
!2038 = !DIGlobalVariable(name: "socket_herror", scope: !0, file: !637, line: 428, type: !104, isLocal: true, isDefinition: true, variable: %struct._object** @socket_herror)
!2039 = !DIGlobalVariable(name: "socket_gaierror", scope: !0, file: !637, line: 429, type: !104, isLocal: true, isDefinition: true, variable: %struct._object** @socket_gaierror)
!2040 = !DIGlobalVariable(name: "socket_timeout", scope: !0, file: !637, line: 430, type: !104, isLocal: true, isDefinition: true, variable: %struct._object** @socket_timeout)
!2041 = !DIGlobalVariable(name: "sock_type", scope: !0, file: !637, line: 4053, type: !1597, isLocal: true, isDefinition: true, variable: %struct._typeobject* @sock_type)
!2042 = !DIGlobalVariable(name: "sock_doc", scope: !0, file: !637, line: 99, type: !2043, isLocal: true, isDefinition: true, variable: [2086 x i8]* @sock_doc)
!2043 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 16688, align: 8, elements: !2044)
!2044 = !{!2045}
!2045 = !DISubrange(count: 2086)
!2046 = !DIGlobalVariable(name: "sock_methods", scope: !0, file: !637, line: 3767, type: !2047, isLocal: true, isDefinition: true, variable: [27 x %struct.PyMethodDef]* @sock_methods)
!2047 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2048, size: 6912, align: 64, elements: !2049)
!2048 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyMethodDef", file: !381, line: 47, baseType: !380)
!2049 = !{!2050}
!2050 = !DISubrange(count: 27)
!2051 = !DIGlobalVariable(name: "accept4_works", scope: !841, file: !637, line: 1972, type: !143, isLocal: true, isDefinition: true, variable: i32* @sock_accept.accept4_works)
!2052 = !DIGlobalVariable(name: "accept_doc", scope: !0, file: !637, line: 2051, type: !2053, isLocal: true, isDefinition: true, variable: [229 x i8]* @accept_doc)
!2053 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1832, align: 8, elements: !2054)
!2054 = !{!2055}
!2055 = !DISubrange(count: 229)
!2056 = !DIGlobalVariable(name: "bind_doc", scope: !0, file: !637, line: 2257, type: !2057, isLocal: true, isDefinition: true, variable: [226 x i8]* @bind_doc)
!2057 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1808, align: 8, elements: !2058)
!2058 = !{!2059}
!2059 = !DISubrange(count: 226)
!2060 = !DIGlobalVariable(name: "close_doc", scope: !0, file: !637, line: 2284, type: !2061, isLocal: true, isDefinition: true, variable: [63 x i8]* @close_doc)
!2061 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 504, align: 8, elements: !2062)
!2062 = !{!2063}
!2063 = !DISubrange(count: 63)
!2064 = !DIGlobalVariable(name: "connect_doc", scope: !0, file: !637, line: 2420, type: !2065, isLocal: true, isDefinition: true, variable: [111 x i8]* @connect_doc)
!2065 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 888, align: 8, elements: !2066)
!2066 = !{!2067}
!2067 = !DISubrange(count: 111)
!2068 = !DIGlobalVariable(name: "connect_ex_doc", scope: !0, file: !637, line: 2454, type: !2069, isLocal: true, isDefinition: true, variable: [159 x i8]* @connect_ex_doc)
!2069 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1272, align: 8, elements: !2070)
!2070 = !{!2071}
!2071 = !DISubrange(count: 159)
!2072 = !DIGlobalVariable(name: "detach_doc", scope: !0, file: !637, line: 2297, type: !2073, isLocal: true, isDefinition: true, variable: [217 x i8]* @detach_doc)
!2073 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1736, align: 8, elements: !2074)
!2074 = !{!2075}
!2075 = !DISubrange(count: 217)
!2076 = !DIGlobalVariable(name: "fileno_doc", scope: !0, file: !637, line: 2469, type: !2077, isLocal: true, isDefinition: true, variable: [71 x i8]* @fileno_doc)
!2077 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 568, align: 8, elements: !2078)
!2078 = !{!2079}
!2079 = !DISubrange(count: 71)
!2080 = !DIGlobalVariable(name: "getpeername_doc", scope: !0, file: !637, line: 2525, type: !2081, isLocal: true, isDefinition: true, variable: [136 x i8]* @getpeername_doc)
!2081 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1088, align: 8, elements: !2082)
!2082 = !{!2083}
!2083 = !DISubrange(count: 136)
!2084 = !DIGlobalVariable(name: "getsockname_doc", scope: !0, file: !637, line: 2496, type: !2085, isLocal: true, isDefinition: true, variable: [135 x i8]* @getsockname_doc)
!2085 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1080, align: 8, elements: !2086)
!2086 = !{!2087}
!2087 = !DISubrange(count: 135)
!2088 = !DIGlobalVariable(name: "getsockopt_doc", scope: !0, file: !637, line: 2229, type: !2089, isLocal: true, isDefinition: true, variable: [230 x i8]* @getsockopt_doc)
!2089 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1840, align: 8, elements: !2090)
!2090 = !{!2091}
!2091 = !DISubrange(count: 230)
!2092 = !DIGlobalVariable(name: "listen_doc", scope: !0, file: !637, line: 2558, type: !2093, isLocal: true, isDefinition: true, variable: [241 x i8]* @listen_doc)
!2093 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1928, align: 8, elements: !2094)
!2094 = !{!2095}
!2095 = !DISubrange(count: 241)
!2096 = !DIGlobalVariable(name: "recv_doc", scope: !0, file: !637, line: 2660, type: !2097, isLocal: true, isDefinition: true, variable: [322 x i8]* @recv_doc)
!2097 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 2576, align: 8, elements: !2098)
!2098 = !{!2099}
!2099 = !DISubrange(count: 322)
!2100 = !DIGlobalVariable(name: "kwlist", scope: !1265, file: !637, line: 2674, type: !2101, isLocal: true, isDefinition: true, variable: [4 x i8*]* @sock_recv_into.kwlist)
!2101 = !DICompositeType(tag: DW_TAG_array_type, baseType: !151, size: 256, align: 64, elements: !518)
!2102 = !DIGlobalVariable(name: "recv_into_doc", scope: !0, file: !637, line: 2721, type: !2103, isLocal: true, isDefinition: true, variable: [335 x i8]* @recv_into_doc)
!2103 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 2680, align: 8, elements: !2104)
!2104 = !{!2105}
!2105 = !DISubrange(count: 335)
!2106 = !DIGlobalVariable(name: "recvfrom_doc", scope: !0, file: !637, line: 2841, type: !2107, isLocal: true, isDefinition: true, variable: [127 x i8]* @recvfrom_doc)
!2107 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1016, align: 8, elements: !2108)
!2108 = !{!2109}
!2109 = !DISubrange(count: 127)
!2110 = !DIGlobalVariable(name: "kwlist", scope: !1319, file: !637, line: 2852, type: !2101, isLocal: true, isDefinition: true, variable: [4 x i8*]* @sock_recvfrom_into.kwlist)
!2111 = !DIGlobalVariable(name: "recvfrom_into_doc", scope: !0, file: !637, line: 2898, type: !2112, isLocal: true, isDefinition: true, variable: [153 x i8]* @recvfrom_into_doc)
!2112 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1224, align: 8, elements: !2113)
!2113 = !{!2114}
!2114 = !DISubrange(count: 153)
!2115 = !DIGlobalVariable(name: "send_doc", scope: !0, file: !637, line: 3275, type: !2116, isLocal: true, isDefinition: true, variable: [209 x i8]* @send_doc)
!2116 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1672, align: 8, elements: !2117)
!2117 = !{!2118}
!2118 = !DISubrange(count: 209)
!2119 = !DIGlobalVariable(name: "sendall_doc", scope: !0, file: !637, line: 3350, type: !2093, isLocal: true, isDefinition: true, variable: [241 x i8]* @sendall_doc)
!2120 = !DIGlobalVariable(name: "sendto_doc", scope: !0, file: !637, line: 3431, type: !2121, isLocal: true, isDefinition: true, variable: [167 x i8]* @sendto_doc)
!2121 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1336, align: 8, elements: !2122)
!2122 = !{!2123}
!2123 = !DISubrange(count: 167)
!2124 = !DIGlobalVariable(name: "setblocking_doc", scope: !0, file: !637, line: 2079, type: !2125, isLocal: true, isDefinition: true, variable: [192 x i8]* @setblocking_doc)
!2125 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1536, align: 8, elements: !2126)
!2126 = !{!2127}
!2127 = !DISubrange(count: 192)
!2128 = !DIGlobalVariable(name: "settimeout_doc", scope: !0, file: !637, line: 2116, type: !2129, isLocal: true, isDefinition: true, variable: [262 x i8]* @settimeout_doc)
!2129 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 2096, align: 8, elements: !2130)
!2130 = !{!2131}
!2131 = !DISubrange(count: 262)
!2132 = !DIGlobalVariable(name: "gettimeout_doc", scope: !0, file: !637, line: 2137, type: !2133, isLocal: true, isDefinition: true, variable: [178 x i8]* @gettimeout_doc)
!2133 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1424, align: 8, elements: !2134)
!2134 = !{!2135}
!2135 = !DISubrange(count: 178)
!2136 = !DIGlobalVariable(name: "setsockopt_doc", scope: !0, file: !637, line: 2177, type: !2137, isLocal: true, isDefinition: true, variable: [155 x i8]* @setsockopt_doc)
!2137 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1240, align: 8, elements: !2138)
!2138 = !{!2139}
!2139 = !DISubrange(count: 155)
!2140 = !DIGlobalVariable(name: "shutdown_doc", scope: !0, file: !637, line: 3686, type: !2141, isLocal: true, isDefinition: true, variable: [160 x i8]* @shutdown_doc)
!2141 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1280, align: 8, elements: !2142)
!2142 = !{!2143}
!2143 = !DISubrange(count: 160)
!2144 = !DIGlobalVariable(name: "cmsg_len_end", scope: !1508, file: !637, line: 1884, type: !2145, isLocal: true, isDefinition: true, variable: i64* @cmsg_min_space.cmsg_len_end)
!2145 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !194)
!2146 = !DIGlobalVariable(name: "recvmsg_doc", scope: !0, file: !637, line: 3104, type: !2147, isLocal: true, isDefinition: true, variable: [1477 x i8]* @recvmsg_doc)
!2147 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 11816, align: 8, elements: !2148)
!2148 = !{!2149}
!2149 = !DISubrange(count: 1477)
!2150 = !DIGlobalVariable(name: "recvmsg_into_doc", scope: !0, file: !637, line: 3194, type: !2151, isLocal: true, isDefinition: true, variable: [1787 x i8]* @recvmsg_into_doc)
!2151 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 14296, align: 8, elements: !2152)
!2152 = !{!2153}
!2153 = !DISubrange(count: 1787)
!2154 = !DIGlobalVariable(name: "sendmsg_doc", scope: !0, file: !637, line: 3647, type: !2155, isLocal: true, isDefinition: true, variable: [886 x i8]* @sendmsg_doc)
!2155 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 7088, align: 8, elements: !2156)
!2156 = !{!2157}
!2157 = !DISubrange(count: 886)
!2158 = !DIGlobalVariable(name: "sock_memberlist", scope: !0, file: !637, line: 3836, type: !2159, isLocal: true, isDefinition: true, variable: [5 x %struct.PyMemberDef]* @sock_memberlist)
!2159 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2160, size: 1600, align: 64, elements: !2161)
!2160 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyMemberDef", file: !391, line: 24, baseType: !390)
!2161 = !{!2162}
!2162 = !DISubrange(count: 5)
!2163 = !DIGlobalVariable(name: "keywords", scope: !1568, file: !637, line: 3923, type: !2164, isLocal: true, isDefinition: true, variable: [5 x i8*]* @sock_initobj.keywords)
!2164 = !DICompositeType(tag: DW_TAG_array_type, baseType: !151, size: 320, align: 64, elements: !2161)
!2165 = !DIGlobalVariable(name: "sock_cloexec_works", scope: !0, file: !637, line: 3912, type: !143, isLocal: true, isDefinition: true, variable: i32* @sock_cloexec_works)
!2166 = !DIGlobalVariable(name: "defaulttimeout", scope: !0, file: !637, line: 702, type: !655, isLocal: true, isDefinition: true, variable: double* @defaulttimeout)
!2167 = !DIGlobalVariable(name: "socketmodule", scope: !0, file: !637, line: 5752, type: !2168, isLocal: true, isDefinition: true, variable: %struct.PyModuleDef* @socketmodule)
!2168 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyModuleDef", file: !2169, line: 47, size: 832, align: 64, elements: !2170)
!2169 = !DIFile(filename: "./Include/moduleobject.h", directory: "/home/yoonseung.kim/top/research/pythons/Python-3.4.1")
!2170 = !{!2171, !2179, !2180, !2181, !2182, !2184, !2185, !2186, !2187}
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "m_base", scope: !2168, file: !2169, line: 48, baseType: !2172, size: 320, align: 64)
!2172 = !DIDerivedType(tag: DW_TAG_typedef, name: "PyModuleDef_Base", file: !2169, line: 38, baseType: !2173)
!2173 = !DICompositeType(tag: DW_TAG_structure_type, name: "PyModuleDef_Base", file: !2169, line: 33, size: 320, align: 64, elements: !2174)
!2174 = !{!2175, !2176, !2177, !2178}
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "ob_base", scope: !2173, file: !2169, line: 34, baseType: !105, size: 128, align: 64)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "m_init", scope: !2173, file: !2169, line: 35, baseType: !651, size: 64, align: 64, offset: 128)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "m_index", scope: !2173, file: !2169, line: 36, baseType: !110, size: 64, align: 64, offset: 192)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "m_copy", scope: !2173, file: !2169, line: 37, baseType: !104, size: 64, align: 64, offset: 256)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "m_name", scope: !2168, file: !2169, line: 49, baseType: !128, size: 64, align: 64, offset: 320)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "m_doc", scope: !2168, file: !2169, line: 50, baseType: !128, size: 64, align: 64, offset: 384)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "m_size", scope: !2168, file: !2169, line: 51, baseType: !110, size: 64, align: 64, offset: 448)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "m_methods", scope: !2168, file: !2169, line: 52, baseType: !2183, size: 64, align: 64, offset: 512)
!2183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2048, size: 64, align: 64)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "m_reload", scope: !2168, file: !2169, line: 53, baseType: !242, size: 64, align: 64, offset: 576)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "m_traverse", scope: !2168, file: !2169, line: 54, baseType: !359, size: 64, align: 64, offset: 640)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "m_clear", scope: !2168, file: !2169, line: 55, baseType: !242, size: 64, align: 64, offset: 704)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "m_free", scope: !2168, file: !2169, line: 56, baseType: !436, size: 64, align: 64, offset: 768)
!2188 = !DIGlobalVariable(name: "socket_doc", scope: !0, file: !637, line: 5747, type: !2189, isLocal: true, isDefinition: true, variable: [87 x i8]* @socket_doc)
!2189 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 696, align: 8, elements: !2190)
!2190 = !{!2191}
!2191 = !DISubrange(count: 87)
!2192 = !DIGlobalVariable(name: "socket_methods", scope: !0, file: !637, line: 5602, type: !2193, isLocal: true, isDefinition: true, variable: [28 x %struct.PyMethodDef]* @socket_methods)
!2193 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2048, size: 7168, align: 64, elements: !2194)
!2194 = !{!2195}
!2195 = !DISubrange(count: 28)
!2196 = !DIGlobalVariable(name: "gethostbyname_doc", scope: !0, file: !637, line: 4211, type: !2197, isLocal: true, isDefinition: true, variable: [107 x i8]* @gethostbyname_doc)
!2197 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 856, align: 8, elements: !2198)
!2198 = !{!2199}
!2199 = !DISubrange(count: 107)
!2200 = !DIGlobalVariable(name: "ghbn_ex_doc", scope: !0, file: !637, line: 4407, type: !2201, isLocal: true, isDefinition: true, variable: [208 x i8]* @ghbn_ex_doc)
!2201 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1664, align: 8, elements: !2202)
!2202 = !{!2203}
!2203 = !DISubrange(count: 208)
!2204 = !DIGlobalVariable(name: "gethostbyaddr_doc", scope: !0, file: !637, line: 4499, type: !2205, isLocal: true, isDefinition: true, variable: [205 x i8]* @gethostbyaddr_doc)
!2205 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1640, align: 8, elements: !2206)
!2206 = !{!2207}
!2207 = !DISubrange(count: 205)
!2208 = !DIGlobalVariable(name: "gethostname_doc", scope: !0, file: !637, line: 4149, type: !2209, isLocal: true, isDefinition: true, variable: [55 x i8]* @gethostname_doc)
!2209 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 440, align: 8, elements: !2210)
!2210 = !{!2211}
!2211 = !DISubrange(count: 55)
!2212 = !DIGlobalVariable(name: "sethostname_doc", scope: !0, file: !637, line: 4155, type: !2213, isLocal: true, isDefinition: true, variable: [46 x i8]* @sethostname_doc)
!2213 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 368, align: 8, elements: !2214)
!2214 = !{!2215}
!2215 = !DISubrange(count: 46)
!2216 = !DIGlobalVariable(name: "getservbyname_doc", scope: !0, file: !637, line: 4528, type: !2217, isLocal: true, isDefinition: true, variable: [214 x i8]* @getservbyname_doc)
!2217 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1712, align: 8, elements: !2218)
!2218 = !{!2219}
!2219 = !DISubrange(count: 214)
!2220 = !DIGlobalVariable(name: "getservbyport_doc", scope: !0, file: !637, line: 4565, type: !2201, isLocal: true, isDefinition: true, variable: [208 x i8]* @getservbyport_doc)
!2221 = !DIGlobalVariable(name: "getprotobyname_doc", scope: !0, file: !637, line: 4594, type: !2222, isLocal: true, isDefinition: true, variable: [100 x i8]* @getprotobyname_doc)
!2222 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 800, align: 8, elements: !2223)
!2223 = !{!2224}
!2224 = !DISubrange(count: 100)
!2225 = !DIGlobalVariable(name: "dup_doc", scope: !0, file: !637, line: 4644, type: !2133, isLocal: true, isDefinition: true, variable: [178 x i8]* @dup_doc)
!2226 = !DIGlobalVariable(name: "socketpair_doc", scope: !0, file: !637, line: 4732, type: !2227, isLocal: true, isDefinition: true, variable: [314 x i8]* @socketpair_doc)
!2227 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 2512, align: 8, elements: !2228)
!2228 = !{!2229}
!2229 = !DISubrange(count: 314)
!2230 = !DIGlobalVariable(name: "ntohs_doc", scope: !0, file: !637, line: 4760, type: !2231, isLocal: true, isDefinition: true, variable: [85 x i8]* @ntohs_doc)
!2231 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 680, align: 8, elements: !2232)
!2232 = !{!2233}
!2233 = !DISubrange(count: 85)
!2234 = !DIGlobalVariable(name: "ntohl_doc", scope: !0, file: !637, line: 4794, type: !2231, isLocal: true, isDefinition: true, variable: [85 x i8]* @ntohl_doc)
!2235 = !DIGlobalVariable(name: "htons_doc", scope: !0, file: !637, line: 4817, type: !2231, isLocal: true, isDefinition: true, variable: [85 x i8]* @htons_doc)
!2236 = !DIGlobalVariable(name: "htonl_doc", scope: !0, file: !637, line: 4851, type: !2231, isLocal: true, isDefinition: true, variable: [85 x i8]* @htonl_doc)
!2237 = !DIGlobalVariable(name: "inet_aton_doc", scope: !0, file: !637, line: 4858, type: !2238, isLocal: true, isDefinition: true, variable: [193 x i8]* @inet_aton_doc)
!2238 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1544, align: 8, elements: !2239)
!2239 = !{!2240}
!2240 = !DISubrange(count: 193)
!2241 = !DIGlobalVariable(name: "inet_ntoa_doc", scope: !0, file: !637, line: 4929, type: !2242, isLocal: true, isDefinition: true, variable: [115 x i8]* @inet_ntoa_doc)
!2242 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 920, align: 8, elements: !2243)
!2243 = !{!2244}
!2244 = !DISubrange(count: 115)
!2245 = !DIGlobalVariable(name: "inet_pton_doc", scope: !0, file: !637, line: 4958, type: !2246, isLocal: true, isDefinition: true, variable: [158 x i8]* @inet_pton_doc)
!2246 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1264, align: 8, elements: !2247)
!2247 = !{!2248}
!2248 = !DISubrange(count: 158)
!2249 = !DIGlobalVariable(name: "inet_ntop_doc", scope: !0, file: !637, line: 5049, type: !2250, isLocal: true, isDefinition: true, variable: [123 x i8]* @inet_ntop_doc)
!2250 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 984, align: 8, elements: !2251)
!2251 = !{!2252}
!2252 = !DISubrange(count: 123)
!2253 = !DIGlobalVariable(name: "kwnames", scope: !1891, file: !637, line: 5183, type: !2254, isLocal: true, isDefinition: true, variable: [7 x i8*]* @socket_getaddrinfo.kwnames)
!2254 = !DICompositeType(tag: DW_TAG_array_type, baseType: !151, size: 448, align: 64, elements: !2255)
!2255 = !{!2256}
!2256 = !DISubrange(count: 7)
!2257 = !DIGlobalVariable(name: "PyId_encode", scope: !1891, file: !637, line: 5206, type: !2258, isLocal: true, isDefinition: true, variable: %struct._Py_Identifier* @socket_getaddrinfo.PyId_encode)
!2258 = !DIDerivedType(tag: DW_TAG_typedef, name: "_Py_Identifier", file: !106, line: 144, baseType: !2259)
!2259 = !DICompositeType(tag: DW_TAG_structure_type, name: "_Py_Identifier", file: !106, line: 140, size: 192, align: 64, elements: !2260)
!2260 = !{!2261, !2263, !2264}
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2259, file: !106, line: 141, baseType: !2262, size: 64, align: 64)
!2262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2259, size: 64, align: 64)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2259, file: !106, line: 142, baseType: !128, size: 64, align: 64, offset: 64)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "object", scope: !2259, file: !106, line: 143, baseType: !104, size: 64, align: 64, offset: 128)
!2265 = !DIGlobalVariable(name: "getaddrinfo_doc", scope: !0, file: !637, line: 5294, type: !2266, isLocal: true, isDefinition: true, variable: [166 x i8]* @getaddrinfo_doc)
!2266 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1328, align: 8, elements: !2267)
!2267 = !{!2268}
!2268 = !DISubrange(count: 166)
!2269 = !DIGlobalVariable(name: "getnameinfo_doc", scope: !0, file: !637, line: 5386, type: !2270, isLocal: true, isDefinition: true, variable: [81 x i8]* @getnameinfo_doc)
!2270 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 648, align: 8, elements: !2271)
!2271 = !{!2272}
!2272 = !DISubrange(count: 81)
!2273 = !DIGlobalVariable(name: "getdefaulttimeout_doc", scope: !0, file: !637, line: 5405, type: !2274, isLocal: true, isDefinition: true, variable: [233 x i8]* @getdefaulttimeout_doc)
!2274 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1864, align: 8, elements: !2275)
!2275 = !{!2276}
!2276 = !DISubrange(count: 233)
!2277 = !DIGlobalVariable(name: "setdefaulttimeout_doc", scope: !0, file: !637, line: 5435, type: !2278, isLocal: true, isDefinition: true, variable: [225 x i8]* @setdefaulttimeout_doc)
!2278 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 1800, align: 8, elements: !2279)
!2279 = !{!2280}
!2280 = !DISubrange(count: 225)
!2281 = !DIGlobalVariable(name: "if_nameindex_doc", scope: !0, file: !637, line: 5481, type: !2282, isLocal: true, isDefinition: true, variable: [86 x i8]* @if_nameindex_doc)
!2282 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 688, align: 8, elements: !2283)
!2283 = !{!2284}
!2284 = !DISubrange(count: 86)
!2285 = !DIGlobalVariable(name: "if_nametoindex_doc", scope: !0, file: !637, line: 5507, type: !2286, isLocal: true, isDefinition: true, variable: [98 x i8]* @if_nametoindex_doc)
!2286 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 784, align: 8, elements: !2287)
!2287 = !{!2288}
!2288 = !DISubrange(count: 98)
!2289 = !DIGlobalVariable(name: "if_indextoname_doc", scope: !0, file: !637, line: 5530, type: !2222, isLocal: true, isDefinition: true, variable: [100 x i8]* @if_indextoname_doc)
!2290 = !DIGlobalVariable(name: "CMSG_LEN_doc", scope: !0, file: !637, line: 5556, type: !2291, isLocal: true, isDefinition: true, variable: [497 x i8]* @CMSG_LEN_doc)
!2291 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 3976, align: 8, elements: !2292)
!2292 = !{!2293}
!2293 = !DISubrange(count: 497)
!2294 = !DIGlobalVariable(name: "CMSG_SPACE_doc", scope: !0, file: !637, line: 5587, type: !2295, isLocal: true, isDefinition: true, variable: [388 x i8]* @CMSG_SPACE_doc)
!2295 = !DICompositeType(tag: DW_TAG_array_type, baseType: !130, size: 3104, align: 8, elements: !2296)
!2296 = !{!2297}
!2297 = !DISubrange(count: 388)
!2298 = !DIGlobalVariable(name: "PySocketModuleAPI", scope: !0, file: !637, line: 5729, type: !2299, isLocal: true, isDefinition: true, variable: %struct.PySocketModule_APIObject* @PySocketModuleAPI)
!2299 = !DIDerivedType(tag: DW_TAG_typedef, name: "PySocketModule_APIObject", file: !457, line: 229, baseType: !2300)
!2300 = !DICompositeType(tag: DW_TAG_structure_type, file: !457, line: 225, size: 192, align: 64, elements: !2301)
!2301 = !{!2302, !2303, !2304}
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "Sock_Type", scope: !2300, file: !457, line: 226, baseType: !1596, size: 64, align: 64)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !2300, file: !457, line: 227, baseType: !104, size: 64, align: 64, offset: 64)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "timeout_error", scope: !2300, file: !457, line: 228, baseType: !104, size: 64, align: 64, offset: 128)
!2305 = !{i32 2, !"Dwarf Version", i32 4}
!2306 = !{i32 2, !"Debug Info Version", i32 3}
!2307 = !{i32 1, !"PIC Level", i32 2}
!2308 = !{!"clang version 3.7.1 (https://github.com/llvm-mirror/clang.git 0dbefa1b83eb90f7a06b5df5df254ce32be3db4b) (git@github.com:kim-yoonseung/llvm.git e8e68907a8135028089af4d924da468e2b7257fa)"}
!2309 = !DILocation(line: 5767, column: 5, scope: !817)
!2310 = !DIExpression()
!2311 = !DILocation(line: 5767, column: 15, scope: !817)
!2312 = !DILocation(line: 5767, column: 19, scope: !817)
!2313 = !DILocation(line: 5769, column: 10, scope: !2314)
!2314 = distinct !DILexicalBlock(scope: !817, file: !637, line: 5769, column: 9)
!2315 = !DILocation(line: 5769, column: 9, scope: !817)
!2316 = !DILocation(line: 5770, column: 9, scope: !2314)
!2317 = !DILocation(line: 5782, column: 42, scope: !817)
!2318 = !{!2319, !2323, i64 8}
!2319 = !{!"_object", !2320, i64 0, !2323, i64 8}
!2320 = !{!"long", !2321, i64 0}
!2321 = !{!"omnipotent char", !2322, i64 0}
!2322 = !{!"Simple C/C++ TBAA"}
!2323 = !{!"any pointer", !2321, i64 0}
!2324 = !DILocation(line: 5783, column: 9, scope: !817)
!2325 = !DILocation(line: 5783, column: 7, scope: !817)
!2326 = !{!2323, !2323, i64 0}
!2327 = !DILocation(line: 5784, column: 9, scope: !2328)
!2328 = distinct !DILexicalBlock(scope: !817, file: !637, line: 5784, column: 9)
!2329 = !DILocation(line: 5784, column: 11, scope: !2328)
!2330 = !DILocation(line: 5784, column: 9, scope: !817)
!2331 = !DILocation(line: 5785, column: 9, scope: !2328)
!2332 = !DILocation(line: 5787, column: 21, scope: !817)
!2333 = !DILocation(line: 5787, column: 38, scope: !817)
!2334 = !DILocation(line: 5787, column: 47, scope: !817)
!2335 = !{!2319, !2320, i64 0}
!2336 = !DILocation(line: 5788, column: 31, scope: !817)
!2337 = !DILocation(line: 5788, column: 29, scope: !817)
!2338 = !{!2339, !2323, i64 8}
!2339 = !{!"", !2323, i64 0, !2323, i64 8, !2323, i64 16}
!2340 = !DILocation(line: 5789, column: 21, scope: !817)
!2341 = !DILocation(line: 5789, column: 38, scope: !817)
!2342 = !DILocation(line: 5789, column: 47, scope: !817)
!2343 = !DILocation(line: 5790, column: 24, scope: !817)
!2344 = !DILocation(line: 5790, column: 36, scope: !817)
!2345 = !DILocation(line: 5790, column: 5, scope: !817)
!2346 = !DILocation(line: 5792, column: 40, scope: !817)
!2347 = !DILocation(line: 5791, column: 21, scope: !817)
!2348 = !DILocation(line: 5791, column: 19, scope: !817)
!2349 = !DILocation(line: 5793, column: 9, scope: !2350)
!2350 = distinct !DILexicalBlock(scope: !817, file: !637, line: 5793, column: 9)
!2351 = !DILocation(line: 5793, column: 23, scope: !2350)
!2352 = !DILocation(line: 5793, column: 9, scope: !817)
!2353 = !DILocation(line: 5794, column: 9, scope: !2350)
!2354 = !DILocation(line: 5795, column: 21, scope: !817)
!2355 = !DILocation(line: 5795, column: 38, scope: !817)
!2356 = !DILocation(line: 5795, column: 47, scope: !817)
!2357 = !DILocation(line: 5796, column: 24, scope: !817)
!2358 = !DILocation(line: 5796, column: 37, scope: !817)
!2359 = !DILocation(line: 5796, column: 5, scope: !817)
!2360 = !DILocation(line: 5797, column: 61, scope: !817)
!2361 = !DILocation(line: 5797, column: 23, scope: !817)
!2362 = !DILocation(line: 5797, column: 21, scope: !817)
!2363 = !DILocation(line: 5799, column: 9, scope: !2364)
!2364 = distinct !DILexicalBlock(scope: !817, file: !637, line: 5799, column: 9)
!2365 = !DILocation(line: 5799, column: 25, scope: !2364)
!2366 = !DILocation(line: 5799, column: 9, scope: !817)
!2367 = !DILocation(line: 5800, column: 9, scope: !2364)
!2368 = !DILocation(line: 5801, column: 21, scope: !817)
!2369 = !DILocation(line: 5801, column: 40, scope: !817)
!2370 = !DILocation(line: 5801, column: 49, scope: !817)
!2371 = !DILocation(line: 5802, column: 24, scope: !817)
!2372 = !DILocation(line: 5802, column: 39, scope: !817)
!2373 = !DILocation(line: 5802, column: 5, scope: !817)
!2374 = !DILocation(line: 5804, column: 41, scope: !817)
!2375 = !DILocation(line: 5803, column: 22, scope: !817)
!2376 = !DILocation(line: 5803, column: 20, scope: !817)
!2377 = !DILocation(line: 5805, column: 9, scope: !2378)
!2378 = distinct !DILexicalBlock(scope: !817, file: !637, line: 5805, column: 9)
!2379 = !DILocation(line: 5805, column: 24, scope: !2378)
!2380 = !DILocation(line: 5805, column: 9, scope: !817)
!2381 = !DILocation(line: 5806, column: 9, scope: !2378)
!2382 = !DILocation(line: 5807, column: 39, scope: !817)
!2383 = !DILocation(line: 5807, column: 37, scope: !817)
!2384 = !{!2339, !2323, i64 16}
!2385 = !DILocation(line: 5808, column: 21, scope: !817)
!2386 = !DILocation(line: 5808, column: 39, scope: !817)
!2387 = !DILocation(line: 5808, column: 48, scope: !817)
!2388 = !DILocation(line: 5809, column: 24, scope: !817)
!2389 = !DILocation(line: 5809, column: 38, scope: !817)
!2390 = !DILocation(line: 5809, column: 5, scope: !817)
!2391 = !DILocation(line: 5810, column: 56, scope: !817)
!2392 = !DILocation(line: 5811, column: 28, scope: !2393)
!2393 = distinct !DILexicalBlock(scope: !817, file: !637, line: 5811, column: 9)
!2394 = !DILocation(line: 5811, column: 9, scope: !2393)
!2395 = !DILocation(line: 5812, column: 52, scope: !2393)
!2396 = !DILocation(line: 5811, column: 9, scope: !817)
!2397 = !DILocation(line: 5813, column: 9, scope: !2393)
!2398 = !DILocation(line: 5814, column: 56, scope: !817)
!2399 = !DILocation(line: 5815, column: 28, scope: !2400)
!2400 = distinct !DILexicalBlock(scope: !817, file: !637, line: 5815, column: 9)
!2401 = !DILocation(line: 5815, column: 9, scope: !2400)
!2402 = !DILocation(line: 5816, column: 52, scope: !2400)
!2403 = !DILocation(line: 5815, column: 9, scope: !817)
!2404 = !DILocation(line: 5817, column: 9, scope: !2400)
!2405 = !DILocation(line: 5820, column: 14, scope: !817)
!2406 = !DILocation(line: 5824, column: 21, scope: !817)
!2407 = !DILocation(line: 5824, column: 33, scope: !817)
!2408 = !DILocation(line: 5824, column: 42, scope: !817)
!2409 = !DILocation(line: 5825, column: 24, scope: !817)
!2410 = !DILocation(line: 5825, column: 39, scope: !817)
!2411 = !DILocation(line: 5825, column: 5, scope: !817)
!2412 = !DILocation(line: 5828, column: 28, scope: !2413)
!2413 = distinct !DILexicalBlock(scope: !817, file: !637, line: 5828, column: 9)
!2414 = !DILocation(line: 5829, column: 12, scope: !2413)
!2415 = !DILocation(line: 5828, column: 9, scope: !2413)
!2416 = !DILocation(line: 5830, column: 32, scope: !2413)
!2417 = !DILocation(line: 5828, column: 9, scope: !817)
!2418 = !DILocation(line: 5831, column: 9, scope: !2413)
!2419 = !DILocation(line: 5835, column: 29, scope: !817)
!2420 = !DILocation(line: 5835, column: 5, scope: !817)
!2421 = !DILocation(line: 5837, column: 29, scope: !817)
!2422 = !DILocation(line: 5837, column: 5, scope: !817)
!2423 = !DILocation(line: 5839, column: 29, scope: !817)
!2424 = !DILocation(line: 5839, column: 5, scope: !817)
!2425 = !DILocation(line: 5842, column: 29, scope: !817)
!2426 = !DILocation(line: 5842, column: 5, scope: !817)
!2427 = !DILocation(line: 5846, column: 29, scope: !817)
!2428 = !DILocation(line: 5846, column: 5, scope: !817)
!2429 = !DILocation(line: 5849, column: 29, scope: !817)
!2430 = !DILocation(line: 5849, column: 5, scope: !817)
!2431 = !DILocation(line: 5853, column: 29, scope: !817)
!2432 = !DILocation(line: 5853, column: 5, scope: !817)
!2433 = !DILocation(line: 5857, column: 29, scope: !817)
!2434 = !DILocation(line: 5857, column: 5, scope: !817)
!2435 = !DILocation(line: 5861, column: 29, scope: !817)
!2436 = !DILocation(line: 5861, column: 5, scope: !817)
!2437 = !DILocation(line: 5865, column: 29, scope: !817)
!2438 = !DILocation(line: 5865, column: 5, scope: !817)
!2439 = !DILocation(line: 5873, column: 29, scope: !817)
!2440 = !DILocation(line: 5873, column: 5, scope: !817)
!2441 = !DILocation(line: 5876, column: 29, scope: !817)
!2442 = !DILocation(line: 5876, column: 5, scope: !817)
!2443 = !DILocation(line: 5880, column: 29, scope: !817)
!2444 = !DILocation(line: 5880, column: 5, scope: !817)
!2445 = !DILocation(line: 5884, column: 29, scope: !817)
!2446 = !DILocation(line: 5884, column: 5, scope: !817)
!2447 = !DILocation(line: 5888, column: 29, scope: !817)
!2448 = !DILocation(line: 5888, column: 5, scope: !817)
!2449 = !DILocation(line: 5892, column: 29, scope: !817)
!2450 = !DILocation(line: 5892, column: 5, scope: !817)
!2451 = !DILocation(line: 5896, column: 29, scope: !817)
!2452 = !DILocation(line: 5896, column: 5, scope: !817)
!2453 = !DILocation(line: 5900, column: 29, scope: !817)
!2454 = !DILocation(line: 5900, column: 5, scope: !817)
!2455 = !DILocation(line: 5901, column: 29, scope: !817)
!2456 = !DILocation(line: 5901, column: 5, scope: !817)
!2457 = !DILocation(line: 5908, column: 29, scope: !817)
!2458 = !DILocation(line: 5908, column: 5, scope: !817)
!2459 = !DILocation(line: 5909, column: 29, scope: !817)
!2460 = !DILocation(line: 5909, column: 5, scope: !817)
!2461 = !DILocation(line: 5914, column: 29, scope: !817)
!2462 = !DILocation(line: 5914, column: 5, scope: !817)
!2463 = !DILocation(line: 5917, column: 29, scope: !817)
!2464 = !DILocation(line: 5917, column: 5, scope: !817)
!2465 = !DILocation(line: 5925, column: 29, scope: !817)
!2466 = !DILocation(line: 5925, column: 5, scope: !817)
!2467 = !DILocation(line: 5927, column: 29, scope: !817)
!2468 = !DILocation(line: 5927, column: 5, scope: !817)
!2469 = !DILocation(line: 5935, column: 29, scope: !817)
!2470 = !DILocation(line: 5935, column: 5, scope: !817)
!2471 = !DILocation(line: 5942, column: 29, scope: !817)
!2472 = !DILocation(line: 5942, column: 5, scope: !817)
!2473 = !DILocation(line: 5946, column: 29, scope: !817)
!2474 = !DILocation(line: 5946, column: 5, scope: !817)
!2475 = !DILocation(line: 5950, column: 29, scope: !817)
!2476 = !DILocation(line: 5950, column: 5, scope: !817)
!2477 = !DILocation(line: 5954, column: 29, scope: !817)
!2478 = !DILocation(line: 5954, column: 5, scope: !817)
!2479 = !DILocation(line: 5958, column: 29, scope: !817)
!2480 = !DILocation(line: 5958, column: 5, scope: !817)
!2481 = !DILocation(line: 5962, column: 29, scope: !817)
!2482 = !DILocation(line: 5962, column: 5, scope: !817)
!2483 = !DILocation(line: 5966, column: 29, scope: !817)
!2484 = !DILocation(line: 5966, column: 5, scope: !817)
!2485 = !DILocation(line: 5970, column: 29, scope: !817)
!2486 = !DILocation(line: 5970, column: 5, scope: !817)
!2487 = !DILocation(line: 5995, column: 29, scope: !817)
!2488 = !DILocation(line: 5995, column: 5, scope: !817)
!2489 = !DILocation(line: 5999, column: 29, scope: !817)
!2490 = !DILocation(line: 5999, column: 5, scope: !817)
!2491 = !DILocation(line: 6004, column: 29, scope: !817)
!2492 = !DILocation(line: 6004, column: 5, scope: !817)
!2493 = !DILocation(line: 6007, column: 29, scope: !817)
!2494 = !DILocation(line: 6007, column: 5, scope: !817)
!2495 = !DILocation(line: 6019, column: 29, scope: !817)
!2496 = !DILocation(line: 6019, column: 5, scope: !817)
!2497 = !DILocation(line: 6022, column: 29, scope: !817)
!2498 = !DILocation(line: 6022, column: 5, scope: !817)
!2499 = !DILocation(line: 6025, column: 29, scope: !817)
!2500 = !DILocation(line: 6025, column: 5, scope: !817)
!2501 = !DILocation(line: 6028, column: 29, scope: !817)
!2502 = !DILocation(line: 6028, column: 5, scope: !817)
!2503 = !DILocation(line: 6031, column: 29, scope: !817)
!2504 = !DILocation(line: 6031, column: 5, scope: !817)
!2505 = !DILocation(line: 6034, column: 29, scope: !817)
!2506 = !DILocation(line: 6034, column: 5, scope: !817)
!2507 = !DILocation(line: 6037, column: 29, scope: !817)
!2508 = !DILocation(line: 6037, column: 5, scope: !817)
!2509 = !DILocation(line: 6040, column: 29, scope: !817)
!2510 = !DILocation(line: 6040, column: 5, scope: !817)
!2511 = !DILocation(line: 6043, column: 29, scope: !817)
!2512 = !DILocation(line: 6043, column: 5, scope: !817)
!2513 = !DILocation(line: 6047, column: 29, scope: !817)
!2514 = !DILocation(line: 6047, column: 5, scope: !817)
!2515 = !DILocation(line: 6050, column: 29, scope: !817)
!2516 = !DILocation(line: 6050, column: 5, scope: !817)
!2517 = !DILocation(line: 6051, column: 29, scope: !817)
!2518 = !DILocation(line: 6051, column: 5, scope: !817)
!2519 = !DILocation(line: 6052, column: 29, scope: !817)
!2520 = !DILocation(line: 6052, column: 5, scope: !817)
!2521 = !DILocation(line: 6054, column: 29, scope: !817)
!2522 = !DILocation(line: 6054, column: 5, scope: !817)
!2523 = !DILocation(line: 6055, column: 29, scope: !817)
!2524 = !DILocation(line: 6055, column: 5, scope: !817)
!2525 = !DILocation(line: 6056, column: 29, scope: !817)
!2526 = !DILocation(line: 6056, column: 5, scope: !817)
!2527 = !DILocation(line: 6059, column: 29, scope: !817)
!2528 = !DILocation(line: 6059, column: 5, scope: !817)
!2529 = !DILocation(line: 6060, column: 29, scope: !817)
!2530 = !DILocation(line: 6060, column: 5, scope: !817)
!2531 = !DILocation(line: 6061, column: 29, scope: !817)
!2532 = !DILocation(line: 6061, column: 5, scope: !817)
!2533 = !DILocation(line: 6062, column: 29, scope: !817)
!2534 = !DILocation(line: 6062, column: 5, scope: !817)
!2535 = !DILocation(line: 6063, column: 29, scope: !817)
!2536 = !DILocation(line: 6063, column: 5, scope: !817)
!2537 = !DILocation(line: 6065, column: 29, scope: !817)
!2538 = !DILocation(line: 6065, column: 5, scope: !817)
!2539 = !DILocation(line: 6066, column: 29, scope: !817)
!2540 = !DILocation(line: 6066, column: 5, scope: !817)
!2541 = !DILocation(line: 6067, column: 29, scope: !817)
!2542 = !DILocation(line: 6067, column: 5, scope: !817)
!2543 = !DILocation(line: 6068, column: 29, scope: !817)
!2544 = !DILocation(line: 6068, column: 5, scope: !817)
!2545 = !DILocation(line: 6071, column: 29, scope: !817)
!2546 = !DILocation(line: 6071, column: 5, scope: !817)
!2547 = !DILocation(line: 6072, column: 29, scope: !817)
!2548 = !DILocation(line: 6072, column: 5, scope: !817)
!2549 = !DILocation(line: 6075, column: 29, scope: !817)
!2550 = !DILocation(line: 6075, column: 5, scope: !817)
!2551 = !DILocation(line: 6077, column: 29, scope: !817)
!2552 = !DILocation(line: 6077, column: 5, scope: !817)
!2553 = !DILocation(line: 6078, column: 29, scope: !817)
!2554 = !DILocation(line: 6078, column: 5, scope: !817)
!2555 = !DILocation(line: 6079, column: 29, scope: !817)
!2556 = !DILocation(line: 6079, column: 5, scope: !817)
!2557 = !DILocation(line: 6080, column: 29, scope: !817)
!2558 = !DILocation(line: 6080, column: 5, scope: !817)
!2559 = !DILocation(line: 6081, column: 29, scope: !817)
!2560 = !DILocation(line: 6081, column: 5, scope: !817)
!2561 = !DILocation(line: 6082, column: 29, scope: !817)
!2562 = !DILocation(line: 6082, column: 5, scope: !817)
!2563 = !DILocation(line: 6086, column: 29, scope: !817)
!2564 = !DILocation(line: 6086, column: 5, scope: !817)
!2565 = !DILocation(line: 6087, column: 29, scope: !817)
!2566 = !DILocation(line: 6087, column: 5, scope: !817)
!2567 = !DILocation(line: 6089, column: 29, scope: !817)
!2568 = !DILocation(line: 6089, column: 5, scope: !817)
!2569 = !DILocation(line: 6090, column: 29, scope: !817)
!2570 = !DILocation(line: 6090, column: 5, scope: !817)
!2571 = !DILocation(line: 6092, column: 29, scope: !817)
!2572 = !DILocation(line: 6092, column: 5, scope: !817)
!2573 = !DILocation(line: 6095, column: 29, scope: !817)
!2574 = !DILocation(line: 6095, column: 5, scope: !817)
!2575 = !DILocation(line: 6098, column: 29, scope: !817)
!2576 = !DILocation(line: 6098, column: 5, scope: !817)
!2577 = !DILocation(line: 6102, column: 29, scope: !817)
!2578 = !DILocation(line: 6102, column: 5, scope: !817)
!2579 = !DILocation(line: 6105, column: 29, scope: !817)
!2580 = !DILocation(line: 6105, column: 5, scope: !817)
!2581 = !DILocation(line: 6108, column: 29, scope: !817)
!2582 = !DILocation(line: 6108, column: 5, scope: !817)
!2583 = !DILocation(line: 6115, column: 29, scope: !817)
!2584 = !DILocation(line: 6115, column: 5, scope: !817)
!2585 = !DILocation(line: 6118, column: 29, scope: !817)
!2586 = !DILocation(line: 6118, column: 5, scope: !817)
!2587 = !DILocation(line: 6121, column: 29, scope: !817)
!2588 = !DILocation(line: 6121, column: 5, scope: !817)
!2589 = !DILocation(line: 6127, column: 29, scope: !817)
!2590 = !DILocation(line: 6127, column: 5, scope: !817)
!2591 = !DILocation(line: 6130, column: 29, scope: !817)
!2592 = !DILocation(line: 6130, column: 5, scope: !817)
!2593 = !DILocation(line: 6133, column: 29, scope: !817)
!2594 = !DILocation(line: 6133, column: 5, scope: !817)
!2595 = !DILocation(line: 6136, column: 29, scope: !817)
!2596 = !DILocation(line: 6136, column: 5, scope: !817)
!2597 = !DILocation(line: 6139, column: 29, scope: !817)
!2598 = !DILocation(line: 6139, column: 5, scope: !817)
!2599 = !DILocation(line: 6142, column: 29, scope: !817)
!2600 = !DILocation(line: 6142, column: 5, scope: !817)
!2601 = !DILocation(line: 6145, column: 29, scope: !817)
!2602 = !DILocation(line: 6145, column: 5, scope: !817)
!2603 = !DILocation(line: 6148, column: 29, scope: !817)
!2604 = !DILocation(line: 6148, column: 5, scope: !817)
!2605 = !DILocation(line: 6151, column: 29, scope: !817)
!2606 = !DILocation(line: 6151, column: 5, scope: !817)
!2607 = !DILocation(line: 6154, column: 29, scope: !817)
!2608 = !DILocation(line: 6154, column: 5, scope: !817)
!2609 = !DILocation(line: 6157, column: 29, scope: !817)
!2610 = !DILocation(line: 6157, column: 5, scope: !817)
!2611 = !DILocation(line: 6163, column: 29, scope: !817)
!2612 = !DILocation(line: 6163, column: 5, scope: !817)
!2613 = !DILocation(line: 6166, column: 29, scope: !817)
!2614 = !DILocation(line: 6166, column: 5, scope: !817)
!2615 = !DILocation(line: 6172, column: 29, scope: !817)
!2616 = !DILocation(line: 6172, column: 5, scope: !817)
!2617 = !DILocation(line: 6175, column: 29, scope: !817)
!2618 = !DILocation(line: 6175, column: 5, scope: !817)
!2619 = !DILocation(line: 6180, column: 29, scope: !817)
!2620 = !DILocation(line: 6180, column: 5, scope: !817)
!2621 = !DILocation(line: 6187, column: 29, scope: !817)
!2622 = !DILocation(line: 6187, column: 5, scope: !817)
!2623 = !DILocation(line: 6190, column: 29, scope: !817)
!2624 = !DILocation(line: 6190, column: 5, scope: !817)
!2625 = !DILocation(line: 6198, column: 29, scope: !817)
!2626 = !DILocation(line: 6198, column: 5, scope: !817)
!2627 = !DILocation(line: 6201, column: 29, scope: !817)
!2628 = !DILocation(line: 6201, column: 5, scope: !817)
!2629 = !DILocation(line: 6204, column: 29, scope: !817)
!2630 = !DILocation(line: 6204, column: 5, scope: !817)
!2631 = !DILocation(line: 6207, column: 29, scope: !817)
!2632 = !DILocation(line: 6207, column: 5, scope: !817)
!2633 = !DILocation(line: 6210, column: 29, scope: !817)
!2634 = !DILocation(line: 6210, column: 5, scope: !817)
!2635 = !DILocation(line: 6213, column: 29, scope: !817)
!2636 = !DILocation(line: 6213, column: 5, scope: !817)
!2637 = !DILocation(line: 6216, column: 29, scope: !817)
!2638 = !DILocation(line: 6216, column: 5, scope: !817)
!2639 = !DILocation(line: 6219, column: 29, scope: !817)
!2640 = !DILocation(line: 6219, column: 5, scope: !817)
!2641 = !DILocation(line: 6228, column: 29, scope: !817)
!2642 = !DILocation(line: 6228, column: 5, scope: !817)
!2643 = !DILocation(line: 6234, column: 29, scope: !817)
!2644 = !DILocation(line: 6234, column: 5, scope: !817)
!2645 = !DILocation(line: 6237, column: 29, scope: !817)
!2646 = !DILocation(line: 6237, column: 5, scope: !817)
!2647 = !DILocation(line: 6240, column: 29, scope: !817)
!2648 = !DILocation(line: 6240, column: 5, scope: !817)
!2649 = !DILocation(line: 6243, column: 29, scope: !817)
!2650 = !DILocation(line: 6243, column: 5, scope: !817)
!2651 = !DILocation(line: 6260, column: 29, scope: !817)
!2652 = !DILocation(line: 6260, column: 5, scope: !817)
!2653 = !DILocation(line: 6263, column: 29, scope: !817)
!2654 = !DILocation(line: 6263, column: 5, scope: !817)
!2655 = !DILocation(line: 6283, column: 29, scope: !817)
!2656 = !DILocation(line: 6283, column: 5, scope: !817)
!2657 = !DILocation(line: 6290, column: 29, scope: !817)
!2658 = !DILocation(line: 6290, column: 5, scope: !817)
!2659 = !DILocation(line: 6293, column: 29, scope: !817)
!2660 = !DILocation(line: 6293, column: 5, scope: !817)
!2661 = !DILocation(line: 6296, column: 29, scope: !817)
!2662 = !DILocation(line: 6296, column: 5, scope: !817)
!2663 = !DILocation(line: 6297, column: 29, scope: !817)
!2664 = !DILocation(line: 6297, column: 5, scope: !817)
!2665 = !DILocation(line: 6300, column: 29, scope: !817)
!2666 = !DILocation(line: 6300, column: 5, scope: !817)
!2667 = !DILocation(line: 6301, column: 29, scope: !817)
!2668 = !DILocation(line: 6301, column: 5, scope: !817)
!2669 = !DILocation(line: 6302, column: 29, scope: !817)
!2670 = !DILocation(line: 6302, column: 5, scope: !817)
!2671 = !DILocation(line: 6304, column: 29, scope: !817)
!2672 = !DILocation(line: 6304, column: 5, scope: !817)
!2673 = !DILocation(line: 6305, column: 29, scope: !817)
!2674 = !DILocation(line: 6305, column: 5, scope: !817)
!2675 = !DILocation(line: 6306, column: 29, scope: !817)
!2676 = !DILocation(line: 6306, column: 5, scope: !817)
!2677 = !DILocation(line: 6309, column: 29, scope: !817)
!2678 = !DILocation(line: 6309, column: 5, scope: !817)
!2679 = !DILocation(line: 6310, column: 29, scope: !817)
!2680 = !DILocation(line: 6310, column: 5, scope: !817)
!2681 = !DILocation(line: 6311, column: 29, scope: !817)
!2682 = !DILocation(line: 6311, column: 5, scope: !817)
!2683 = !DILocation(line: 6312, column: 29, scope: !817)
!2684 = !DILocation(line: 6312, column: 5, scope: !817)
!2685 = !DILocation(line: 6315, column: 29, scope: !817)
!2686 = !DILocation(line: 6315, column: 5, scope: !817)
!2687 = !DILocation(line: 6316, column: 29, scope: !817)
!2688 = !DILocation(line: 6316, column: 5, scope: !817)
!2689 = !DILocation(line: 6317, column: 29, scope: !817)
!2690 = !DILocation(line: 6317, column: 5, scope: !817)
!2691 = !DILocation(line: 6318, column: 29, scope: !817)
!2692 = !DILocation(line: 6318, column: 5, scope: !817)
!2693 = !DILocation(line: 6319, column: 29, scope: !817)
!2694 = !DILocation(line: 6319, column: 5, scope: !817)
!2695 = !DILocation(line: 6320, column: 29, scope: !817)
!2696 = !DILocation(line: 6320, column: 5, scope: !817)
!2697 = !DILocation(line: 6321, column: 29, scope: !817)
!2698 = !DILocation(line: 6321, column: 5, scope: !817)
!2699 = !DILocation(line: 6322, column: 29, scope: !817)
!2700 = !DILocation(line: 6322, column: 5, scope: !817)
!2701 = !DILocation(line: 6323, column: 29, scope: !817)
!2702 = !DILocation(line: 6323, column: 5, scope: !817)
!2703 = !DILocation(line: 6324, column: 29, scope: !817)
!2704 = !DILocation(line: 6324, column: 5, scope: !817)
!2705 = !DILocation(line: 6325, column: 29, scope: !817)
!2706 = !DILocation(line: 6325, column: 5, scope: !817)
!2707 = !DILocation(line: 6326, column: 29, scope: !817)
!2708 = !DILocation(line: 6326, column: 5, scope: !817)
!2709 = !DILocation(line: 6327, column: 29, scope: !817)
!2710 = !DILocation(line: 6327, column: 5, scope: !817)
!2711 = !DILocation(line: 6351, column: 29, scope: !817)
!2712 = !DILocation(line: 6351, column: 5, scope: !817)
!2713 = !DILocation(line: 6356, column: 29, scope: !817)
!2714 = !DILocation(line: 6356, column: 5, scope: !817)
!2715 = !DILocation(line: 6359, column: 29, scope: !817)
!2716 = !DILocation(line: 6359, column: 5, scope: !817)
!2717 = !DILocation(line: 6364, column: 29, scope: !817)
!2718 = !DILocation(line: 6364, column: 5, scope: !817)
!2719 = !DILocation(line: 6373, column: 29, scope: !817)
!2720 = !DILocation(line: 6373, column: 5, scope: !817)
!2721 = !DILocation(line: 6376, column: 29, scope: !817)
!2722 = !DILocation(line: 6376, column: 5, scope: !817)
!2723 = !DILocation(line: 6379, column: 29, scope: !817)
!2724 = !DILocation(line: 6379, column: 5, scope: !817)
!2725 = !DILocation(line: 6384, column: 29, scope: !817)
!2726 = !DILocation(line: 6384, column: 5, scope: !817)
!2727 = !DILocation(line: 6387, column: 29, scope: !817)
!2728 = !DILocation(line: 6387, column: 5, scope: !817)
!2729 = !DILocation(line: 6390, column: 29, scope: !817)
!2730 = !DILocation(line: 6390, column: 5, scope: !817)
!2731 = !DILocation(line: 6395, column: 29, scope: !817)
!2732 = !DILocation(line: 6395, column: 5, scope: !817)
!2733 = !DILocation(line: 6404, column: 29, scope: !817)
!2734 = !DILocation(line: 6404, column: 5, scope: !817)
!2735 = !DILocation(line: 6407, column: 29, scope: !817)
!2736 = !DILocation(line: 6407, column: 5, scope: !817)
!2737 = !DILocation(line: 6410, column: 29, scope: !817)
!2738 = !DILocation(line: 6410, column: 5, scope: !817)
!2739 = !DILocation(line: 6413, column: 29, scope: !817)
!2740 = !DILocation(line: 6413, column: 5, scope: !817)
!2741 = !DILocation(line: 6416, column: 29, scope: !817)
!2742 = !DILocation(line: 6416, column: 5, scope: !817)
!2743 = !DILocation(line: 6419, column: 29, scope: !817)
!2744 = !DILocation(line: 6419, column: 5, scope: !817)
!2745 = !DILocation(line: 6422, column: 29, scope: !817)
!2746 = !DILocation(line: 6422, column: 5, scope: !817)
!2747 = !DILocation(line: 6425, column: 29, scope: !817)
!2748 = !DILocation(line: 6425, column: 5, scope: !817)
!2749 = !DILocation(line: 6431, column: 29, scope: !817)
!2750 = !DILocation(line: 6431, column: 5, scope: !817)
!2751 = !DILocation(line: 6434, column: 29, scope: !817)
!2752 = !DILocation(line: 6434, column: 5, scope: !817)
!2753 = !DILocation(line: 6437, column: 29, scope: !817)
!2754 = !DILocation(line: 6437, column: 5, scope: !817)
!2755 = !DILocation(line: 6446, column: 29, scope: !817)
!2756 = !DILocation(line: 6446, column: 5, scope: !817)
!2757 = !DILocation(line: 6455, column: 29, scope: !817)
!2758 = !DILocation(line: 6455, column: 5, scope: !817)
!2759 = !DILocation(line: 6462, column: 29, scope: !817)
!2760 = !DILocation(line: 6462, column: 5, scope: !817)
!2761 = !DILocation(line: 6476, column: 29, scope: !817)
!2762 = !DILocation(line: 6476, column: 5, scope: !817)
!2763 = !DILocation(line: 6483, column: 29, scope: !817)
!2764 = !DILocation(line: 6483, column: 5, scope: !817)
!2765 = !DILocation(line: 6488, column: 29, scope: !817)
!2766 = !DILocation(line: 6488, column: 5, scope: !817)
!2767 = !DILocation(line: 6493, column: 29, scope: !817)
!2768 = !DILocation(line: 6493, column: 5, scope: !817)
!2769 = !DILocation(line: 6498, column: 29, scope: !817)
!2770 = !DILocation(line: 6498, column: 5, scope: !817)
!2771 = !DILocation(line: 6503, column: 29, scope: !817)
!2772 = !DILocation(line: 6503, column: 5, scope: !817)
!2773 = !DILocation(line: 6508, column: 29, scope: !817)
!2774 = !DILocation(line: 6508, column: 5, scope: !817)
!2775 = !DILocation(line: 6514, column: 29, scope: !817)
!2776 = !DILocation(line: 6514, column: 5, scope: !817)
!2777 = !DILocation(line: 6519, column: 29, scope: !817)
!2778 = !DILocation(line: 6519, column: 5, scope: !817)
!2779 = !DILocation(line: 6526, column: 29, scope: !817)
!2780 = !DILocation(line: 6526, column: 5, scope: !817)
!2781 = !DILocation(line: 6529, column: 29, scope: !817)
!2782 = !DILocation(line: 6529, column: 5, scope: !817)
!2783 = !DILocation(line: 6532, column: 29, scope: !817)
!2784 = !DILocation(line: 6532, column: 5, scope: !817)
!2785 = !DILocation(line: 6535, column: 29, scope: !817)
!2786 = !DILocation(line: 6535, column: 5, scope: !817)
!2787 = !DILocation(line: 6538, column: 29, scope: !817)
!2788 = !DILocation(line: 6538, column: 5, scope: !817)
!2789 = !DILocation(line: 6541, column: 29, scope: !817)
!2790 = !DILocation(line: 6541, column: 5, scope: !817)
!2791 = !DILocation(line: 6547, column: 29, scope: !817)
!2792 = !DILocation(line: 6547, column: 5, scope: !817)
!2793 = !DILocation(line: 6550, column: 29, scope: !817)
!2794 = !DILocation(line: 6550, column: 5, scope: !817)
!2795 = !DILocation(line: 6553, column: 29, scope: !817)
!2796 = !DILocation(line: 6553, column: 5, scope: !817)
!2797 = !DILocation(line: 6556, column: 29, scope: !817)
!2798 = !DILocation(line: 6556, column: 5, scope: !817)
!2799 = !DILocation(line: 6559, column: 29, scope: !817)
!2800 = !DILocation(line: 6559, column: 5, scope: !817)
!2801 = !DILocation(line: 6562, column: 29, scope: !817)
!2802 = !DILocation(line: 6562, column: 5, scope: !817)
!2803 = !DILocation(line: 6565, column: 29, scope: !817)
!2804 = !DILocation(line: 6565, column: 5, scope: !817)
!2805 = !DILocation(line: 6568, column: 29, scope: !817)
!2806 = !DILocation(line: 6568, column: 5, scope: !817)
!2807 = !DILocation(line: 6571, column: 29, scope: !817)
!2808 = !DILocation(line: 6571, column: 5, scope: !817)
!2809 = !DILocation(line: 6574, column: 29, scope: !817)
!2810 = !DILocation(line: 6574, column: 5, scope: !817)
!2811 = !DILocation(line: 6579, column: 29, scope: !817)
!2812 = !DILocation(line: 6579, column: 5, scope: !817)
!2813 = !DILocation(line: 6582, column: 29, scope: !817)
!2814 = !DILocation(line: 6582, column: 5, scope: !817)
!2815 = !DILocation(line: 6585, column: 29, scope: !817)
!2816 = !DILocation(line: 6585, column: 5, scope: !817)
!2817 = !DILocation(line: 6588, column: 29, scope: !817)
!2818 = !DILocation(line: 6588, column: 5, scope: !817)
!2819 = !DILocation(line: 6591, column: 29, scope: !817)
!2820 = !DILocation(line: 6591, column: 5, scope: !817)
!2821 = !DILocation(line: 6594, column: 29, scope: !817)
!2822 = !DILocation(line: 6594, column: 5, scope: !817)
!2823 = !DILocation(line: 6598, column: 29, scope: !817)
!2824 = !DILocation(line: 6598, column: 5, scope: !817)
!2825 = !DILocation(line: 6602, column: 29, scope: !817)
!2826 = !DILocation(line: 6602, column: 5, scope: !817)
!2827 = !DILocation(line: 6608, column: 29, scope: !817)
!2828 = !DILocation(line: 6608, column: 5, scope: !817)
!2829 = !DILocation(line: 6611, column: 29, scope: !817)
!2830 = !DILocation(line: 6611, column: 5, scope: !817)
!2831 = !DILocation(line: 6614, column: 29, scope: !817)
!2832 = !DILocation(line: 6614, column: 5, scope: !817)
!2833 = !DILocation(line: 6617, column: 29, scope: !817)
!2834 = !DILocation(line: 6617, column: 5, scope: !817)
!2835 = !DILocation(line: 6623, column: 29, scope: !817)
!2836 = !DILocation(line: 6623, column: 5, scope: !817)
!2837 = !DILocation(line: 6626, column: 29, scope: !817)
!2838 = !DILocation(line: 6626, column: 5, scope: !817)
!2839 = !DILocation(line: 6629, column: 29, scope: !817)
!2840 = !DILocation(line: 6629, column: 5, scope: !817)
!2841 = !DILocation(line: 6632, column: 29, scope: !817)
!2842 = !DILocation(line: 6632, column: 5, scope: !817)
!2843 = !DILocation(line: 6635, column: 29, scope: !817)
!2844 = !DILocation(line: 6635, column: 5, scope: !817)
!2845 = !DILocation(line: 6638, column: 29, scope: !817)
!2846 = !DILocation(line: 6638, column: 5, scope: !817)
!2847 = !DILocation(line: 6641, column: 29, scope: !817)
!2848 = !DILocation(line: 6641, column: 5, scope: !817)
!2849 = !DILocation(line: 6644, column: 29, scope: !817)
!2850 = !DILocation(line: 6644, column: 5, scope: !817)
!2851 = !DILocation(line: 6647, column: 29, scope: !817)
!2852 = !DILocation(line: 6647, column: 5, scope: !817)
!2853 = !DILocation(line: 6650, column: 29, scope: !817)
!2854 = !DILocation(line: 6650, column: 5, scope: !817)
!2855 = !DILocation(line: 6656, column: 29, scope: !817)
!2856 = !DILocation(line: 6656, column: 5, scope: !817)
!2857 = !DILocation(line: 6664, column: 29, scope: !817)
!2858 = !DILocation(line: 6664, column: 5, scope: !817)
!2859 = !DILocation(line: 6667, column: 29, scope: !817)
!2860 = !DILocation(line: 6667, column: 5, scope: !817)
!2861 = !DILocation(line: 6670, column: 29, scope: !817)
!2862 = !DILocation(line: 6670, column: 5, scope: !817)
!2863 = !DILocation(line: 6673, column: 29, scope: !817)
!2864 = !DILocation(line: 6673, column: 5, scope: !817)
!2865 = !DILocation(line: 6676, column: 29, scope: !817)
!2866 = !DILocation(line: 6676, column: 5, scope: !817)
!2867 = !DILocation(line: 6679, column: 29, scope: !817)
!2868 = !DILocation(line: 6679, column: 5, scope: !817)
!2869 = !DILocation(line: 6682, column: 29, scope: !817)
!2870 = !DILocation(line: 6682, column: 5, scope: !817)
!2871 = !DILocation(line: 6685, column: 29, scope: !817)
!2872 = !DILocation(line: 6685, column: 5, scope: !817)
!2873 = !DILocation(line: 6688, column: 29, scope: !817)
!2874 = !DILocation(line: 6688, column: 5, scope: !817)
!2875 = !DILocation(line: 6691, column: 29, scope: !817)
!2876 = !DILocation(line: 6691, column: 5, scope: !817)
!2877 = !DILocation(line: 6694, column: 29, scope: !817)
!2878 = !DILocation(line: 6694, column: 5, scope: !817)
!2879 = !DILocation(line: 6697, column: 29, scope: !817)
!2880 = !DILocation(line: 6697, column: 5, scope: !817)
!2881 = !DILocation(line: 6700, column: 29, scope: !817)
!2882 = !DILocation(line: 6700, column: 5, scope: !817)
!2883 = !DILocation(line: 6748, column: 29, scope: !817)
!2884 = !DILocation(line: 6748, column: 5, scope: !817)
!2885 = !DILocation(line: 6751, column: 29, scope: !817)
!2886 = !DILocation(line: 6751, column: 5, scope: !817)
!2887 = !DILocation(line: 6754, column: 29, scope: !817)
!2888 = !DILocation(line: 6754, column: 5, scope: !817)
!2889 = !DILocation(line: 6757, column: 29, scope: !817)
!2890 = !DILocation(line: 6757, column: 5, scope: !817)
!2891 = !DILocation(line: 6760, column: 29, scope: !817)
!2892 = !DILocation(line: 6760, column: 5, scope: !817)
!2893 = !DILocation(line: 6763, column: 29, scope: !817)
!2894 = !DILocation(line: 6763, column: 5, scope: !817)
!2895 = !DILocation(line: 6766, column: 29, scope: !817)
!2896 = !DILocation(line: 6766, column: 5, scope: !817)
!2897 = !DILocation(line: 6769, column: 29, scope: !817)
!2898 = !DILocation(line: 6769, column: 5, scope: !817)
!2899 = !DILocation(line: 6772, column: 29, scope: !817)
!2900 = !DILocation(line: 6772, column: 5, scope: !817)
!2901 = !DILocation(line: 6775, column: 29, scope: !817)
!2902 = !DILocation(line: 6775, column: 5, scope: !817)
!2903 = !DILocation(line: 6778, column: 29, scope: !817)
!2904 = !DILocation(line: 6778, column: 5, scope: !817)
!2905 = !DILocation(line: 6781, column: 29, scope: !817)
!2906 = !DILocation(line: 6781, column: 5, scope: !817)
!2907 = !DILocation(line: 6793, column: 29, scope: !817)
!2908 = !DILocation(line: 6793, column: 5, scope: !817)
!2909 = !DILocation(line: 6796, column: 29, scope: !817)
!2910 = !DILocation(line: 6796, column: 5, scope: !817)
!2911 = !DILocation(line: 6799, column: 29, scope: !817)
!2912 = !DILocation(line: 6799, column: 5, scope: !817)
!2913 = !DILocation(line: 6802, column: 29, scope: !817)
!2914 = !DILocation(line: 6802, column: 5, scope: !817)
!2915 = !DILocation(line: 6808, column: 29, scope: !817)
!2916 = !DILocation(line: 6808, column: 5, scope: !817)
!2917 = !DILocation(line: 6814, column: 29, scope: !817)
!2918 = !DILocation(line: 6814, column: 5, scope: !817)
!2919 = !DILocation(line: 6817, column: 29, scope: !817)
!2920 = !DILocation(line: 6817, column: 5, scope: !817)
!2921 = !DILocation(line: 6823, column: 29, scope: !817)
!2922 = !DILocation(line: 6823, column: 5, scope: !817)
!2923 = !DILocation(line: 6826, column: 29, scope: !817)
!2924 = !DILocation(line: 6826, column: 5, scope: !817)
!2925 = !DILocation(line: 6829, column: 29, scope: !817)
!2926 = !DILocation(line: 6829, column: 5, scope: !817)
!2927 = !DILocation(line: 6832, column: 29, scope: !817)
!2928 = !DILocation(line: 6832, column: 5, scope: !817)
!2929 = !DILocation(line: 6835, column: 29, scope: !817)
!2930 = !DILocation(line: 6835, column: 5, scope: !817)
!2931 = !DILocation(line: 6838, column: 29, scope: !817)
!2932 = !DILocation(line: 6838, column: 5, scope: !817)
!2933 = !DILocation(line: 6841, column: 29, scope: !817)
!2934 = !DILocation(line: 6841, column: 5, scope: !817)
!2935 = !DILocation(line: 6846, column: 29, scope: !817)
!2936 = !DILocation(line: 6846, column: 5, scope: !817)
!2937 = !DILocation(line: 6853, column: 29, scope: !817)
!2938 = !DILocation(line: 6853, column: 5, scope: !817)
!2939 = !DILocation(line: 6860, column: 29, scope: !817)
!2940 = !DILocation(line: 6860, column: 5, scope: !817)
!2941 = !DILocation(line: 6895, column: 12, scope: !817)
!2942 = !DILocation(line: 6895, column: 5, scope: !817)
!2943 = !DILocation(line: 6896, column: 1, scope: !817)
!2944 = !DILocation(line: 5721, column: 5, scope: !821)
!2945 = !DILocation(line: 3848, column: 34, scope: !825)
!2946 = !DILocation(line: 3850, column: 9, scope: !832)
!2947 = !DILocation(line: 3850, column: 12, scope: !832)
!2948 = !{!2949, !2950, i64 16}
!2949 = !{!"", !2319, i64 0, !2950, i64 16, !2950, i64 20, !2950, i64 24, !2950, i64 28, !2323, i64 32, !2951, i64 40}
!2950 = !{!"int", !2321, i64 0}
!2951 = !{!"double", !2321, i64 0}
!2952 = !DILocation(line: 3850, column: 20, scope: !832)
!2953 = !DILocation(line: 3850, column: 9, scope: !825)
!2954 = !DILocation(line: 3851, column: 9, scope: !831)
!2955 = !DILocation(line: 3851, column: 19, scope: !831)
!2956 = !DILocation(line: 3851, column: 25, scope: !831)
!2957 = !DILocation(line: 3851, column: 31, scope: !831)
!2958 = !DILocation(line: 3852, column: 9, scope: !831)
!2959 = !DILocation(line: 3852, column: 20, scope: !831)
!2960 = !DILocation(line: 3852, column: 49, scope: !831)
!2961 = !DILocation(line: 3852, column: 37, scope: !831)
!2962 = !DILocation(line: 3852, column: 54, scope: !831)
!2963 = !{!2320, !2320, i64 0}
!2964 = !DILocation(line: 3853, column: 25, scope: !831)
!2965 = !DILocation(line: 3853, column: 13, scope: !831)
!2966 = !DILocation(line: 3853, column: 30, scope: !831)
!2967 = !DILocation(line: 3853, column: 9, scope: !831)
!2968 = !DILocation(line: 3854, column: 9, scope: !831)
!2969 = !DILocation(line: 3855, column: 30, scope: !2970)
!2970 = distinct !DILexicalBlock(scope: !831, file: !637, line: 3855, column: 13)
!2971 = !DILocation(line: 3856, column: 45, scope: !2970)
!2972 = !DILocation(line: 3855, column: 13, scope: !2970)
!2973 = !DILocation(line: 3855, column: 13, scope: !831)
!2974 = !DILocation(line: 3858, column: 40, scope: !2975)
!2975 = distinct !DILexicalBlock(scope: !2970, file: !637, line: 3858, column: 17)
!2976 = !DILocation(line: 3858, column: 17, scope: !2975)
!2977 = !DILocation(line: 3858, column: 17, scope: !2970)
!2978 = !DILocation(line: 3859, column: 52, scope: !2975)
!2979 = !DILocation(line: 3859, column: 39, scope: !2975)
!2980 = !DILocation(line: 3859, column: 17, scope: !2975)
!2981 = !DILocation(line: 3858, column: 53, scope: !2982)
!2982 = !DILexicalBlockFile(scope: !2975, file: !637, discriminator: 1)
!2983 = !DILocation(line: 3860, column: 23, scope: !831)
!2984 = !DILocation(line: 3860, column: 28, scope: !831)
!2985 = !DILocation(line: 3860, column: 33, scope: !831)
!2986 = !DILocation(line: 3860, column: 9, scope: !831)
!2987 = !DILocation(line: 3861, column: 22, scope: !831)
!2988 = !DILocation(line: 3861, column: 25, scope: !831)
!2989 = !DILocation(line: 3861, column: 16, scope: !831)
!2990 = !DILocation(line: 3862, column: 41, scope: !831)
!2991 = !DILocation(line: 3862, column: 23, scope: !831)
!2992 = !DILocation(line: 3862, column: 11, scope: !831)
!2993 = !DILocation(line: 3862, column: 28, scope: !831)
!2994 = !DILocation(line: 3862, column: 39, scope: !831)
!2995 = !DILocation(line: 3863, column: 5, scope: !832)
!2996 = !DILocation(line: 3863, column: 5, scope: !831)
!2997 = !DILocation(line: 3864, column: 19, scope: !825)
!2998 = !DILocation(line: 3864, column: 7, scope: !825)
!2999 = !DILocation(line: 3864, column: 24, scope: !825)
!3000 = !DILocation(line: 3864, column: 34, scope: !825)
!3001 = !{!3002, !2323, i64 320}
!3002 = !{!"_typeobject", !3003, i64 0, !2323, i64 24, !2320, i64 32, !2320, i64 40, !2323, i64 48, !2323, i64 56, !2323, i64 64, !2323, i64 72, !2323, i64 80, !2323, i64 88, !2323, i64 96, !2323, i64 104, !2323, i64 112, !2323, i64 120, !2323, i64 128, !2323, i64 136, !2323, i64 144, !2323, i64 152, !2323, i64 160, !2320, i64 168, !2323, i64 176, !2323, i64 184, !2323, i64 192, !2323, i64 200, !2320, i64 208, !2323, i64 216, !2323, i64 224, !2323, i64 232, !2323, i64 240, !2323, i64 248, !2323, i64 256, !2323, i64 264, !2323, i64 272, !2323, i64 280, !2320, i64 288, !2323, i64 296, !2323, i64 304, !2323, i64 312, !2323, i64 320, !2323, i64 328, !2323, i64 336, !2323, i64 344, !2323, i64 352, !2323, i64 360, !2323, i64 368, !2323, i64 376, !2950, i64 384, !2323, i64 392}
!3003 = !{!"", !2319, i64 0, !2320, i64 16}
!3004 = !DILocation(line: 3864, column: 54, scope: !825)
!3005 = !DILocation(line: 3864, column: 42, scope: !825)
!3006 = !DILocation(line: 3864, column: 5, scope: !825)
!3007 = !DILocation(line: 3865, column: 1, scope: !825)
!3008 = !DILocation(line: 3869, column: 31, scope: !836)
!3009 = !DILocation(line: 3884, column: 15, scope: !836)
!3010 = !DILocation(line: 3884, column: 18, scope: !836)
!3011 = !DILocation(line: 3884, column: 9, scope: !836)
!3012 = !DILocation(line: 3884, column: 27, scope: !836)
!3013 = !DILocation(line: 3884, column: 30, scope: !836)
!3014 = !{!2949, !2950, i64 20}
!3015 = !DILocation(line: 3885, column: 9, scope: !836)
!3016 = !DILocation(line: 3885, column: 12, scope: !836)
!3017 = !{!2949, !2950, i64 24}
!3018 = !DILocation(line: 3886, column: 9, scope: !836)
!3019 = !DILocation(line: 3886, column: 12, scope: !836)
!3020 = !{!2949, !2950, i64 28}
!3021 = !DILocation(line: 3882, column: 12, scope: !836)
!3022 = !DILocation(line: 3882, column: 5, scope: !836)
!3023 = !DILocation(line: 3917, column: 24, scope: !1568)
!3024 = !DILocation(line: 3917, column: 40, scope: !1568)
!3025 = !DILocation(line: 3917, column: 56, scope: !1568)
!3026 = !DILocation(line: 3919, column: 5, scope: !1568)
!3027 = !DILocation(line: 3919, column: 25, scope: !1568)
!3028 = !DILocation(line: 3919, column: 51, scope: !1568)
!3029 = !DILocation(line: 3919, column: 29, scope: !1568)
!3030 = !DILocation(line: 3920, column: 5, scope: !1568)
!3031 = !DILocation(line: 3920, column: 15, scope: !1568)
!3032 = !DILocation(line: 3921, column: 5, scope: !1568)
!3033 = !DILocation(line: 3921, column: 14, scope: !1568)
!3034 = !{!2950, !2950, i64 0}
!3035 = !DILocation(line: 3922, column: 5, scope: !1568)
!3036 = !DILocation(line: 3922, column: 9, scope: !1568)
!3037 = !DILocation(line: 3922, column: 21, scope: !1568)
!3038 = !DILocation(line: 3922, column: 41, scope: !1568)
!3039 = !DILocation(line: 3926, column: 5, scope: !1568)
!3040 = !DILocation(line: 3926, column: 10, scope: !1568)
!3041 = !DILocation(line: 3932, column: 38, scope: !3042)
!3042 = distinct !DILexicalBlock(scope: !1568, file: !637, line: 3932, column: 9)
!3043 = !DILocation(line: 3932, column: 44, scope: !3042)
!3044 = !DILocation(line: 3932, column: 10, scope: !3042)
!3045 = !DILocation(line: 3932, column: 9, scope: !1568)
!3046 = !DILocation(line: 3935, column: 9, scope: !3042)
!3047 = !DILocation(line: 3937, column: 9, scope: !1583)
!3048 = !DILocation(line: 3937, column: 15, scope: !1583)
!3049 = !DILocation(line: 3937, column: 29, scope: !1583)
!3050 = !DILocation(line: 3937, column: 32, scope: !3051)
!3051 = !DILexicalBlockFile(scope: !1583, file: !637, discriminator: 1)
!3052 = !DILocation(line: 3937, column: 38, scope: !1583)
!3053 = !DILocation(line: 3937, column: 9, scope: !1568)
!3054 = !DILocation(line: 3964, column: 42, scope: !3055)
!3055 = distinct !DILexicalBlock(scope: !3056, file: !637, line: 3963, column: 9)
!3056 = distinct !DILexicalBlock(scope: !1583, file: !637, line: 3937, column: 60)
!3057 = !DILocation(line: 3964, column: 28, scope: !3055)
!3058 = !DILocation(line: 3964, column: 18, scope: !3055)
!3059 = !DILocation(line: 3964, column: 16, scope: !3055)
!3060 = !DILocation(line: 3965, column: 17, scope: !3061)
!3061 = distinct !DILexicalBlock(scope: !3055, file: !637, line: 3965, column: 17)
!3062 = !DILocation(line: 3965, column: 20, scope: !3061)
!3063 = !DILocation(line: 3965, column: 38, scope: !3061)
!3064 = !DILocation(line: 3965, column: 41, scope: !3065)
!3065 = !DILexicalBlockFile(scope: !3061, file: !637, discriminator: 1)
!3066 = !DILocation(line: 3965, column: 17, scope: !3055)
!3067 = !DILocation(line: 3966, column: 17, scope: !3061)
!3068 = !DILocation(line: 3967, column: 17, scope: !3069)
!3069 = distinct !DILexicalBlock(scope: !3055, file: !637, line: 3967, column: 17)
!3070 = !DILocation(line: 3967, column: 20, scope: !3069)
!3071 = !DILocation(line: 3967, column: 17, scope: !3055)
!3072 = !DILocation(line: 3968, column: 33, scope: !3073)
!3073 = distinct !DILexicalBlock(scope: !3069, file: !637, line: 3967, column: 29)
!3074 = !DILocation(line: 3968, column: 17, scope: !3073)
!3075 = !DILocation(line: 3970, column: 17, scope: !3073)
!3076 = !DILocation(line: 3973, column: 5, scope: !3056)
!3077 = !DILocation(line: 4011, column: 11, scope: !1581)
!3078 = !DILocation(line: 4011, column: 26, scope: !1581)
!3079 = !DILocation(line: 4011, column: 41, scope: !1581)
!3080 = !DILocation(line: 4011, column: 39, scope: !1581)
!3081 = !DILocation(line: 4013, column: 13, scope: !3082)
!3082 = distinct !DILexicalBlock(scope: !1581, file: !637, line: 4013, column: 13)
!3083 = !DILocation(line: 4013, column: 32, scope: !3082)
!3084 = !DILocation(line: 4013, column: 13, scope: !1581)
!3085 = !DILocation(line: 4014, column: 25, scope: !3086)
!3086 = distinct !DILexicalBlock(scope: !3082, file: !637, line: 4013, column: 38)
!3087 = !DILocation(line: 4014, column: 33, scope: !3086)
!3088 = !DILocation(line: 4014, column: 38, scope: !3086)
!3089 = !DILocation(line: 4014, column: 54, scope: !3086)
!3090 = !DILocation(line: 4014, column: 18, scope: !3086)
!3091 = !DILocation(line: 4014, column: 16, scope: !3086)
!3092 = !DILocation(line: 4015, column: 17, scope: !3093)
!3093 = distinct !DILexicalBlock(scope: !3086, file: !637, line: 4015, column: 17)
!3094 = !DILocation(line: 4015, column: 36, scope: !3093)
!3095 = !DILocation(line: 4015, column: 17, scope: !3086)
!3096 = !DILocation(line: 4016, column: 21, scope: !3097)
!3097 = distinct !DILexicalBlock(scope: !3098, file: !637, line: 4016, column: 21)
!3098 = distinct !DILexicalBlock(scope: !3093, file: !637, line: 4015, column: 43)
!3099 = !DILocation(line: 4016, column: 24, scope: !3097)
!3100 = !DILocation(line: 4016, column: 21, scope: !3098)
!3101 = !DILocation(line: 4017, column: 40, scope: !3102)
!3102 = distinct !DILexicalBlock(scope: !3097, file: !637, line: 4016, column: 30)
!3103 = !DILocation(line: 4018, column: 17, scope: !3102)
!3104 = !DILocation(line: 4019, column: 28, scope: !3105)
!3105 = distinct !DILexicalBlock(scope: !3097, file: !637, line: 4019, column: 26)
!3106 = !DILocation(line: 4019, column: 27, scope: !3105)
!3107 = !DILocation(line: 4019, column: 49, scope: !3105)
!3108 = !DILocation(line: 4019, column: 26, scope: !3097)
!3109 = !DILocation(line: 4021, column: 40, scope: !3110)
!3110 = distinct !DILexicalBlock(scope: !3105, file: !637, line: 4019, column: 56)
!3111 = !DILocation(line: 4022, column: 33, scope: !3110)
!3112 = !DILocation(line: 4022, column: 41, scope: !3110)
!3113 = !DILocation(line: 4022, column: 47, scope: !3110)
!3114 = !DILocation(line: 4022, column: 26, scope: !3110)
!3115 = !DILocation(line: 4022, column: 24, scope: !3110)
!3116 = !DILocation(line: 4023, column: 17, scope: !3110)
!3117 = !DILocation(line: 4024, column: 13, scope: !3098)
!3118 = !DILocation(line: 4025, column: 9, scope: !3086)
!3119 = !DILocation(line: 4029, column: 25, scope: !3120)
!3120 = distinct !DILexicalBlock(scope: !3082, file: !637, line: 4028, column: 9)
!3121 = !DILocation(line: 4029, column: 33, scope: !3120)
!3122 = !DILocation(line: 4029, column: 39, scope: !3120)
!3123 = !DILocation(line: 4029, column: 18, scope: !3120)
!3124 = !DILocation(line: 4029, column: 16, scope: !3120)
!3125 = !DILocation(line: 4031, column: 30, scope: !1581)
!3126 = !DILocation(line: 4031, column: 9, scope: !1581)
!3127 = !DILocation(line: 4031, column: 38, scope: !1582)
!3128 = !DILocation(line: 4033, column: 13, scope: !3129)
!3129 = distinct !DILexicalBlock(scope: !1582, file: !637, line: 4033, column: 13)
!3130 = !DILocation(line: 4033, column: 16, scope: !3129)
!3131 = !DILocation(line: 4033, column: 13, scope: !1582)
!3132 = !DILocation(line: 4034, column: 13, scope: !3133)
!3133 = distinct !DILexicalBlock(scope: !3129, file: !637, line: 4033, column: 25)
!3134 = !DILocation(line: 4035, column: 13, scope: !3133)
!3135 = !DILocation(line: 4038, column: 33, scope: !3136)
!3136 = distinct !DILexicalBlock(scope: !1582, file: !637, line: 4038, column: 13)
!3137 = !DILocation(line: 4038, column: 40, scope: !3136)
!3138 = !DILocation(line: 4038, column: 13, scope: !3136)
!3139 = !DILocation(line: 4038, column: 59, scope: !3136)
!3140 = !DILocation(line: 4038, column: 13, scope: !1582)
!3141 = !DILocation(line: 4039, column: 19, scope: !3142)
!3142 = distinct !DILexicalBlock(scope: !3136, file: !637, line: 4038, column: 64)
!3143 = !DILocation(line: 4039, column: 13, scope: !3142)
!3144 = !DILocation(line: 4040, column: 13, scope: !3142)
!3145 = !DILocation(line: 4044, column: 21, scope: !1568)
!3146 = !DILocation(line: 4044, column: 24, scope: !1568)
!3147 = !DILocation(line: 4044, column: 28, scope: !1568)
!3148 = !DILocation(line: 4044, column: 36, scope: !1568)
!3149 = !DILocation(line: 4044, column: 42, scope: !1568)
!3150 = !DILocation(line: 4044, column: 5, scope: !1568)
!3151 = !DILocation(line: 4046, column: 5, scope: !1568)
!3152 = !DILocation(line: 4048, column: 1, scope: !1568)
!3153 = !DILocation(line: 3893, column: 24, scope: !1593)
!3154 = !DILocation(line: 3893, column: 40, scope: !1593)
!3155 = !DILocation(line: 3893, column: 56, scope: !1593)
!3156 = !DILocation(line: 3895, column: 5, scope: !1593)
!3157 = !DILocation(line: 3895, column: 15, scope: !1593)
!3158 = !DILocation(line: 3897, column: 11, scope: !1593)
!3159 = !DILocation(line: 3897, column: 17, scope: !1593)
!3160 = !{!3002, !2323, i64 304}
!3161 = !DILocation(line: 3897, column: 26, scope: !1593)
!3162 = !DILocation(line: 3897, column: 9, scope: !1593)
!3163 = !DILocation(line: 3898, column: 9, scope: !3164)
!3164 = distinct !DILexicalBlock(scope: !1593, file: !637, line: 3898, column: 9)
!3165 = !DILocation(line: 3898, column: 13, scope: !3164)
!3166 = !DILocation(line: 3898, column: 9, scope: !1593)
!3167 = !DILocation(line: 3899, column: 32, scope: !3168)
!3168 = distinct !DILexicalBlock(scope: !3164, file: !637, line: 3898, column: 28)
!3169 = !DILocation(line: 3899, column: 10, scope: !3168)
!3170 = !DILocation(line: 3899, column: 38, scope: !3168)
!3171 = !DILocation(line: 3899, column: 46, scope: !3168)
!3172 = !DILocation(line: 3900, column: 32, scope: !3168)
!3173 = !DILocation(line: 3900, column: 10, scope: !3168)
!3174 = !DILocation(line: 3900, column: 38, scope: !3168)
!3175 = !DILocation(line: 3900, column: 51, scope: !3168)
!3176 = !{!2949, !2951, i64 40}
!3177 = !DILocation(line: 3901, column: 32, scope: !3168)
!3178 = !DILocation(line: 3901, column: 10, scope: !3168)
!3179 = !DILocation(line: 3901, column: 38, scope: !3168)
!3180 = !DILocation(line: 3901, column: 51, scope: !3168)
!3181 = !{!2949, !2323, i64 32}
!3182 = !DILocation(line: 3902, column: 5, scope: !3168)
!3183 = !DILocation(line: 3903, column: 12, scope: !1593)
!3184 = !DILocation(line: 3904, column: 1, scope: !1593)
!3185 = !DILocation(line: 3903, column: 5, scope: !1593)
!3186 = !DILocation(line: 1961, column: 33, scope: !841)
!3187 = !DILocation(line: 1963, column: 5, scope: !841)
!3188 = !DILocation(line: 1963, column: 17, scope: !841)
!3189 = !DILocation(line: 1964, column: 5, scope: !841)
!3190 = !DILocation(line: 1964, column: 14, scope: !841)
!3191 = !DILocation(line: 1965, column: 5, scope: !841)
!3192 = !DILocation(line: 1965, column: 15, scope: !841)
!3193 = !DILocation(line: 1966, column: 5, scope: !841)
!3194 = !DILocation(line: 1966, column: 15, scope: !841)
!3195 = !DILocation(line: 1967, column: 5, scope: !841)
!3196 = !DILocation(line: 1967, column: 15, scope: !841)
!3197 = !DILocation(line: 1968, column: 5, scope: !841)
!3198 = !DILocation(line: 1968, column: 15, scope: !841)
!3199 = !DILocation(line: 1969, column: 5, scope: !841)
!3200 = !DILocation(line: 1969, column: 9, scope: !841)
!3201 = !DILocation(line: 1975, column: 25, scope: !3202)
!3202 = distinct !DILexicalBlock(scope: !841, file: !637, line: 1975, column: 9)
!3203 = !DILocation(line: 1975, column: 10, scope: !3202)
!3204 = !DILocation(line: 1975, column: 9, scope: !841)
!3205 = !DILocation(line: 1976, column: 9, scope: !3202)
!3206 = !DILocation(line: 1977, column: 5, scope: !841)
!3207 = !DILocation(line: 1977, column: 25, scope: !841)
!3208 = !DILocation(line: 1982, column: 7, scope: !852)
!3209 = !DILocation(line: 1982, column: 23, scope: !852)
!3210 = !DILocation(line: 1982, column: 28, scope: !852)
!3211 = !DILocation(line: 1982, column: 47, scope: !852)
!3212 = !DILocation(line: 1982, column: 54, scope: !852)
!3213 = !DILocation(line: 1982, column: 65, scope: !852)
!3214 = !DILocation(line: 1982, column: 68, scope: !852)
!3215 = !{!2951, !2951, i64 0}
!3216 = !DILocation(line: 1982, column: 82, scope: !852)
!3217 = !DILocation(line: 1982, column: 86, scope: !852)
!3218 = !DILocation(line: 1982, column: 100, scope: !852)
!3219 = !DILocation(line: 1982, column: 103, scope: !852)
!3220 = !DILocation(line: 1982, column: 116, scope: !852)
!3221 = !DILocation(line: 1982, column: 127, scope: !3222)
!3222 = distinct !DILexicalBlock(scope: !852, file: !637, line: 1982, column: 127)
!3223 = !DILocation(line: 1982, column: 127, scope: !852)
!3224 = !DILocation(line: 1982, column: 142, scope: !3225)
!3225 = !DILexicalBlockFile(scope: !3226, file: !637, discriminator: 1)
!3226 = distinct !DILexicalBlock(scope: !3222, file: !637, line: 1982, column: 140)
!3227 = !DILocation(line: 1982, column: 181, scope: !3226)
!3228 = !{i64 0, i64 8, !2963, i64 8, i64 8, !2963}
!3229 = !DILocation(line: 1982, column: 186, scope: !3226)
!3230 = !DILocation(line: 1982, column: 227, scope: !3231)
!3231 = !DILexicalBlockFile(scope: !3232, file: !637, discriminator: 3)
!3232 = distinct !DILexicalBlock(scope: !3226, file: !637, line: 1982, column: 189)
!3233 = !DILocation(line: 1982, column: 230, scope: !3232)
!3234 = !DILocation(line: 1982, column: 220, scope: !3232)
!3235 = !DILocation(line: 1982, column: 245, scope: !3232)
!3236 = !DILocation(line: 1982, column: 248, scope: !3232)
!3237 = !DILocation(line: 1982, column: 243, scope: !3232)
!3238 = !DILocation(line: 1982, column: 262, scope: !3232)
!3239 = !DILocation(line: 1982, column: 211, scope: !3232)
!3240 = !DILocation(line: 1982, column: 200, scope: !3232)
!3241 = !DILocation(line: 1982, column: 208, scope: !3232)
!3242 = !{!3243, !2320, i64 8}
!3243 = !{!"timeval", !2320, i64 0, !2320, i64 8}
!3244 = !DILocation(line: 1982, column: 302, scope: !3232)
!3245 = !DILocation(line: 1982, column: 305, scope: !3232)
!3246 = !DILocation(line: 1982, column: 293, scope: !3232)
!3247 = !DILocation(line: 1982, column: 339, scope: !3232)
!3248 = !DILocation(line: 1982, column: 347, scope: !3232)
!3249 = !DILocation(line: 1982, column: 318, scope: !3232)
!3250 = !DILocation(line: 1982, column: 283, scope: !3232)
!3251 = !DILocation(line: 1982, column: 290, scope: !3232)
!3252 = !{!3243, !2320, i64 0}
!3253 = !DILocation(line: 1982, column: 368, scope: !3232)
!3254 = !DILocation(line: 1982, column: 376, scope: !3232)
!3255 = !DILocation(line: 1982, column: 388, scope: !3232)
!3256 = !DILocation(line: 1982, column: 388, scope: !3257)
!3257 = !DILexicalBlockFile(scope: !3232, file: !637, discriminator: 4)
!3258 = !DILocation(line: 1982, column: 401, scope: !3259)
!3259 = !DILexicalBlockFile(scope: !3226, file: !637, discriminator: 5)
!3260 = !DILocation(line: 1982, column: 403, scope: !3261)
!3261 = !DILexicalBlockFile(scope: !3262, file: !637, discriminator: 6)
!3262 = !DILexicalBlockFile(scope: !852, file: !637, discriminator: 2)
!3263 = !DILocation(line: 1982, column: 403, scope: !3264)
!3264 = !DILexicalBlockFile(scope: !3265, file: !637, discriminator: 9)
!3265 = !DILexicalBlockFile(scope: !852, file: !637, discriminator: 7)
!3266 = !DILocation(line: 1982, column: 417, scope: !3267)
!3267 = !DILexicalBlockFile(scope: !858, file: !637, discriminator: 8)
!3268 = !DILocation(line: 1982, column: 438, scope: !858)
!3269 = !DILocation(line: 1984, column: 7, scope: !857)
!3270 = !DILocation(line: 1984, column: 22, scope: !857)
!3271 = !DILocation(line: 1984, column: 37, scope: !857)
!3272 = !DILocation(line: 1984, column: 35, scope: !857)
!3273 = !DILocation(line: 1985, column: 34, scope: !857)
!3274 = !DILocation(line: 1985, column: 40, scope: !857)
!3275 = !DILocation(line: 1985, column: 15, scope: !857)
!3276 = !DILocation(line: 1985, column: 13, scope: !857)
!3277 = !DILocation(line: 1986, column: 10, scope: !3278)
!3278 = distinct !DILexicalBlock(scope: !857, file: !637, line: 1986, column: 9)
!3279 = !DILocation(line: 1986, column: 9, scope: !857)
!3280 = !DILocation(line: 1988, column: 13, scope: !3281)
!3281 = distinct !DILexicalBlock(scope: !3282, file: !637, line: 1988, column: 13)
!3282 = distinct !DILexicalBlock(scope: !3278, file: !637, line: 1986, column: 19)
!3283 = !DILocation(line: 1988, column: 27, scope: !3281)
!3284 = !DILocation(line: 1988, column: 13, scope: !3282)
!3285 = !DILocation(line: 1989, column: 29, scope: !3286)
!3286 = distinct !DILexicalBlock(scope: !3281, file: !637, line: 1988, column: 33)
!3287 = !DILocation(line: 1989, column: 32, scope: !3286)
!3288 = !DILocation(line: 1989, column: 41, scope: !3286)
!3289 = !DILocation(line: 1989, column: 56, scope: !3286)
!3290 = !DILocation(line: 1989, column: 21, scope: !3286)
!3291 = !DILocation(line: 1989, column: 19, scope: !3286)
!3292 = !DILocation(line: 1991, column: 17, scope: !3293)
!3293 = distinct !DILexicalBlock(scope: !3286, file: !637, line: 1991, column: 17)
!3294 = !DILocation(line: 1991, column: 23, scope: !3293)
!3295 = !DILocation(line: 1991, column: 31, scope: !3293)
!3296 = !DILocation(line: 1991, column: 34, scope: !3297)
!3297 = !DILexicalBlockFile(scope: !3293, file: !637, discriminator: 1)
!3298 = !DILocation(line: 1991, column: 48, scope: !3293)
!3299 = !DILocation(line: 1991, column: 17, scope: !3286)
!3300 = !DILocation(line: 1993, column: 36, scope: !3301)
!3301 = distinct !DILexicalBlock(scope: !3293, file: !637, line: 1991, column: 55)
!3302 = !DILocation(line: 1993, column: 35, scope: !3301)
!3303 = !DILocation(line: 1993, column: 57, scope: !3301)
!3304 = !DILocation(line: 1993, column: 31, scope: !3301)
!3305 = !DILocation(line: 1994, column: 13, scope: !3301)
!3306 = !DILocation(line: 1995, column: 9, scope: !3286)
!3307 = !DILocation(line: 1996, column: 13, scope: !3308)
!3308 = distinct !DILexicalBlock(scope: !3282, file: !637, line: 1996, column: 13)
!3309 = !DILocation(line: 1996, column: 27, scope: !3308)
!3310 = !DILocation(line: 1996, column: 13, scope: !3282)
!3311 = !DILocation(line: 1997, column: 28, scope: !3308)
!3312 = !DILocation(line: 1997, column: 31, scope: !3308)
!3313 = !DILocation(line: 1997, column: 40, scope: !3308)
!3314 = !DILocation(line: 1997, column: 55, scope: !3308)
!3315 = !DILocation(line: 1997, column: 21, scope: !3308)
!3316 = !DILocation(line: 1997, column: 19, scope: !3308)
!3317 = !DILocation(line: 1997, column: 13, scope: !3308)
!3318 = !DILocation(line: 2001, column: 5, scope: !3282)
!3319 = !DILocation(line: 2002, column: 26, scope: !857)
!3320 = !DILocation(line: 2002, column: 5, scope: !857)
!3321 = !DILocation(line: 2002, column: 34, scope: !858)
!3322 = !DILocation(line: 2004, column: 9, scope: !3323)
!3323 = distinct !DILexicalBlock(scope: !858, file: !637, line: 2004, column: 9)
!3324 = !DILocation(line: 2004, column: 17, scope: !3323)
!3325 = !DILocation(line: 2004, column: 9, scope: !858)
!3326 = !DILocation(line: 2005, column: 25, scope: !3327)
!3327 = distinct !DILexicalBlock(scope: !3323, file: !637, line: 2004, column: 23)
!3328 = !DILocation(line: 2005, column: 9, scope: !3327)
!3329 = !DILocation(line: 2006, column: 9, scope: !3327)
!3330 = !DILocation(line: 2008, column: 10, scope: !3331)
!3331 = distinct !DILexicalBlock(scope: !858, file: !637, line: 2008, column: 9)
!3332 = !DILocation(line: 2008, column: 22, scope: !3331)
!3333 = !DILocation(line: 2008, column: 30, scope: !3334)
!3334 = !DILexicalBlockFile(scope: !3331, file: !637, discriminator: 1)
!3335 = !DILocation(line: 2008, column: 29, scope: !3331)
!3336 = !DILocation(line: 2008, column: 51, scope: !3331)
!3337 = !DILocation(line: 2008, column: 58, scope: !3331)
!3338 = !DILocation(line: 2008, column: 65, scope: !3339)
!3339 = !DILexicalBlockFile(scope: !3331, file: !637, discriminator: 4)
!3340 = !DILocation(line: 2008, column: 64, scope: !3331)
!3341 = !DILocation(line: 2008, column: 86, scope: !3331)
!3342 = !DILocation(line: 2008, column: 9, scope: !858)
!3343 = !DILocation(line: 2008, column: 95, scope: !3344)
!3344 = !DILexicalBlockFile(scope: !3345, file: !637, discriminator: 6)
!3345 = !DILexicalBlockFile(scope: !3331, file: !637, discriminator: 2)
!3346 = !DILocation(line: 2008, column: 102, scope: !3347)
!3347 = !DILexicalBlockFile(scope: !3348, file: !637, discriminator: 5)
!3348 = !DILexicalBlockFile(scope: !858, file: !637, discriminator: 3)
!3349 = !DILocation(line: 2008, column: 152, scope: !858)
!3350 = !DILocation(line: 2008, column: 165, scope: !858)
!3351 = !DILocation(line: 2008, column: 159, scope: !858)
!3352 = !DILocation(line: 2008, column: 142, scope: !858)
!3353 = !DILocation(line: 2008, column: 185, scope: !858)
!3354 = !DILocation(line: 2008, column: 199, scope: !858)
!3355 = !DILocation(line: 2008, column: 193, scope: !858)
!3356 = !DILocation(line: 2008, column: 175, scope: !858)
!3357 = !DILocation(line: 2008, column: 208, scope: !858)
!3358 = !DILocation(line: 2008, column: 173, scope: !858)
!3359 = !DILocation(line: 2008, column: 139, scope: !858)
!3360 = !DILocation(line: 1982, column: 403, scope: !852)
!3361 = !DILocation(line: 2008, column: 223, scope: !3362)
!3362 = !DILexicalBlockFile(scope: !841, file: !637, discriminator: 7)
!3363 = !DILocation(line: 2008, column: 223, scope: !3364)
!3364 = !DILexicalBlockFile(scope: !841, file: !637, discriminator: 8)
!3365 = !DILocation(line: 2010, column: 9, scope: !3366)
!3366 = distinct !DILexicalBlock(scope: !841, file: !637, line: 2010, column: 9)
!3367 = !DILocation(line: 2010, column: 15, scope: !3366)
!3368 = !DILocation(line: 2010, column: 9, scope: !841)
!3369 = !DILocation(line: 2011, column: 16, scope: !3366)
!3370 = !DILocation(line: 2011, column: 19, scope: !3366)
!3371 = !DILocation(line: 2011, column: 9, scope: !3366)
!3372 = !DILocation(line: 2022, column: 10, scope: !3373)
!3373 = distinct !DILexicalBlock(scope: !841, file: !637, line: 2022, column: 9)
!3374 = !DILocation(line: 2022, column: 9, scope: !841)
!3375 = !DILocation(line: 2025, column: 33, scope: !3376)
!3376 = distinct !DILexicalBlock(scope: !3377, file: !637, line: 2025, column: 13)
!3377 = distinct !DILexicalBlock(scope: !3373, file: !637, line: 2024, column: 5)
!3378 = !DILocation(line: 2025, column: 13, scope: !3376)
!3379 = !DILocation(line: 2025, column: 55, scope: !3376)
!3380 = !DILocation(line: 2025, column: 13, scope: !3377)
!3381 = !DILocation(line: 2026, column: 19, scope: !3382)
!3382 = distinct !DILexicalBlock(scope: !3376, file: !637, line: 2025, column: 60)
!3383 = !DILocation(line: 2026, column: 13, scope: !3382)
!3384 = !DILocation(line: 2027, column: 13, scope: !3382)
!3385 = !DILocation(line: 2029, column: 5, scope: !3377)
!3386 = !DILocation(line: 2032, column: 39, scope: !841)
!3387 = !DILocation(line: 2032, column: 28, scope: !841)
!3388 = !DILocation(line: 2032, column: 12, scope: !841)
!3389 = !DILocation(line: 2032, column: 10, scope: !841)
!3390 = !DILocation(line: 2033, column: 9, scope: !3391)
!3391 = distinct !DILexicalBlock(scope: !841, file: !637, line: 2033, column: 9)
!3392 = !DILocation(line: 2033, column: 14, scope: !3391)
!3393 = !DILocation(line: 2033, column: 9, scope: !841)
!3394 = !DILocation(line: 2034, column: 15, scope: !3395)
!3395 = distinct !DILexicalBlock(scope: !3391, file: !637, line: 2033, column: 29)
!3396 = !DILocation(line: 2034, column: 9, scope: !3395)
!3397 = !DILocation(line: 2035, column: 9, scope: !3395)
!3398 = !DILocation(line: 2038, column: 25, scope: !841)
!3399 = !DILocation(line: 2038, column: 28, scope: !841)
!3400 = !DILocation(line: 2038, column: 52, scope: !841)
!3401 = !DILocation(line: 2039, column: 25, scope: !841)
!3402 = !DILocation(line: 2039, column: 34, scope: !841)
!3403 = !DILocation(line: 2039, column: 37, scope: !841)
!3404 = !DILocation(line: 2038, column: 12, scope: !841)
!3405 = !DILocation(line: 2038, column: 10, scope: !841)
!3406 = !DILocation(line: 2040, column: 9, scope: !3407)
!3407 = distinct !DILexicalBlock(scope: !841, file: !637, line: 2040, column: 9)
!3408 = !DILocation(line: 2040, column: 14, scope: !3407)
!3409 = !DILocation(line: 2040, column: 9, scope: !841)
!3410 = !DILocation(line: 2041, column: 9, scope: !3407)
!3411 = !DILocation(line: 2043, column: 27, scope: !841)
!3412 = !DILocation(line: 2043, column: 33, scope: !841)
!3413 = !DILocation(line: 2043, column: 11, scope: !841)
!3414 = !DILocation(line: 2043, column: 9, scope: !841)
!3415 = !DILocation(line: 2043, column: 5, scope: !841)
!3416 = !DILocation(line: 2046, column: 5, scope: !841)
!3417 = !DILocation(line: 2046, column: 10, scope: !3418)
!3418 = !DILexicalBlockFile(scope: !860, file: !637, discriminator: 1)
!3419 = !DILocation(line: 2046, column: 20, scope: !860)
!3420 = !DILocation(line: 2046, column: 51, scope: !860)
!3421 = !DILocation(line: 2046, column: 62, scope: !863)
!3422 = !DILocation(line: 2046, column: 78, scope: !863)
!3423 = !DILocation(line: 2046, column: 62, scope: !860)
!3424 = !DILocation(line: 2046, column: 93, scope: !3425)
!3425 = !DILexicalBlockFile(scope: !863, file: !637, discriminator: 2)
!3426 = !DILocation(line: 2046, column: 98, scope: !3427)
!3427 = !DILexicalBlockFile(scope: !862, file: !637, discriminator: 4)
!3428 = !DILocation(line: 2046, column: 108, scope: !862)
!3429 = !DILocation(line: 2046, column: 138, scope: !862)
!3430 = !DILocation(line: 2046, column: 164, scope: !3431)
!3431 = distinct !DILexicalBlock(scope: !862, file: !637, line: 2046, column: 161)
!3432 = !DILocation(line: 2046, column: 181, scope: !3431)
!3433 = !DILocation(line: 2046, column: 161, scope: !3431)
!3434 = !DILocation(line: 2046, column: 191, scope: !3431)
!3435 = !DILocation(line: 2046, column: 161, scope: !862)
!3436 = !DILocation(line: 2046, column: 161, scope: !3437)
!3437 = !DILexicalBlockFile(scope: !862, file: !637, discriminator: 5)
!3438 = !DILocation(line: 2046, column: 222, scope: !3439)
!3439 = !DILexicalBlockFile(scope: !3431, file: !637, discriminator: 6)
!3440 = !DILocation(line: 2046, column: 240, scope: !3431)
!3441 = !DILocation(line: 2046, column: 250, scope: !3431)
!3442 = !{!3002, !2323, i64 48}
!3443 = !DILocation(line: 2046, column: 275, scope: !3431)
!3444 = !DILocation(line: 2046, column: 206, scope: !3431)
!3445 = !DILocation(line: 2046, column: 294, scope: !3446)
!3446 = !DILexicalBlockFile(scope: !863, file: !637, discriminator: 7)
!3447 = !DILocation(line: 2046, column: 294, scope: !862)
!3448 = !DILocation(line: 2046, column: 294, scope: !3449)
!3449 = !DILexicalBlockFile(scope: !862, file: !637, discriminator: 8)
!3450 = !DILocation(line: 2046, column: 294, scope: !3451)
!3451 = !DILexicalBlockFile(scope: !862, file: !637, discriminator: 9)
!3452 = !DILocation(line: 2046, column: 307, scope: !3453)
!3453 = !DILexicalBlockFile(scope: !3454, file: !637, discriminator: 10)
!3454 = !DILexicalBlockFile(scope: !841, file: !637, discriminator: 3)
!3455 = !DILocation(line: 2046, column: 307, scope: !860)
!3456 = !DILocation(line: 2046, column: 307, scope: !3457)
!3457 = !DILexicalBlockFile(scope: !860, file: !637, discriminator: 11)
!3458 = !DILocation(line: 2047, column: 5, scope: !841)
!3459 = !DILocation(line: 2047, column: 10, scope: !3460)
!3460 = !DILexicalBlockFile(scope: !865, file: !637, discriminator: 1)
!3461 = !DILocation(line: 2047, column: 20, scope: !865)
!3462 = !DILocation(line: 2047, column: 51, scope: !865)
!3463 = !DILocation(line: 2047, column: 62, scope: !868)
!3464 = !DILocation(line: 2047, column: 78, scope: !868)
!3465 = !DILocation(line: 2047, column: 62, scope: !865)
!3466 = !DILocation(line: 2047, column: 93, scope: !3467)
!3467 = !DILexicalBlockFile(scope: !868, file: !637, discriminator: 2)
!3468 = !DILocation(line: 2047, column: 98, scope: !3469)
!3469 = !DILexicalBlockFile(scope: !867, file: !637, discriminator: 4)
!3470 = !DILocation(line: 2047, column: 108, scope: !867)
!3471 = !DILocation(line: 2047, column: 138, scope: !867)
!3472 = !DILocation(line: 2047, column: 164, scope: !3473)
!3473 = distinct !DILexicalBlock(scope: !867, file: !637, line: 2047, column: 161)
!3474 = !DILocation(line: 2047, column: 181, scope: !3473)
!3475 = !DILocation(line: 2047, column: 161, scope: !3473)
!3476 = !DILocation(line: 2047, column: 191, scope: !3473)
!3477 = !DILocation(line: 2047, column: 161, scope: !867)
!3478 = !DILocation(line: 2047, column: 161, scope: !3479)
!3479 = !DILexicalBlockFile(scope: !867, file: !637, discriminator: 5)
!3480 = !DILocation(line: 2047, column: 222, scope: !3481)
!3481 = !DILexicalBlockFile(scope: !3473, file: !637, discriminator: 6)
!3482 = !DILocation(line: 2047, column: 240, scope: !3473)
!3483 = !DILocation(line: 2047, column: 250, scope: !3473)
!3484 = !DILocation(line: 2047, column: 275, scope: !3473)
!3485 = !DILocation(line: 2047, column: 206, scope: !3473)
!3486 = !DILocation(line: 2047, column: 294, scope: !3487)
!3487 = !DILexicalBlockFile(scope: !868, file: !637, discriminator: 7)
!3488 = !DILocation(line: 2047, column: 294, scope: !867)
!3489 = !DILocation(line: 2047, column: 294, scope: !3490)
!3490 = !DILexicalBlockFile(scope: !867, file: !637, discriminator: 8)
!3491 = !DILocation(line: 2047, column: 294, scope: !3492)
!3492 = !DILexicalBlockFile(scope: !867, file: !637, discriminator: 9)
!3493 = !DILocation(line: 2047, column: 307, scope: !3453)
!3494 = !DILocation(line: 2047, column: 307, scope: !865)
!3495 = !DILocation(line: 2047, column: 307, scope: !3496)
!3496 = !DILexicalBlockFile(scope: !865, file: !637, discriminator: 11)
!3497 = !DILocation(line: 2048, column: 12, scope: !841)
!3498 = !DILocation(line: 2048, column: 5, scope: !841)
!3499 = !DILocation(line: 2049, column: 1, scope: !841)
!3500 = !DILocation(line: 2240, column: 31, scope: !998)
!3501 = !DILocation(line: 2240, column: 44, scope: !998)
!3502 = !DILocation(line: 2242, column: 5, scope: !998)
!3503 = !DILocation(line: 2242, column: 17, scope: !998)
!3504 = !DILocation(line: 2243, column: 5, scope: !998)
!3505 = !DILocation(line: 2243, column: 9, scope: !998)
!3506 = !DILocation(line: 2244, column: 5, scope: !998)
!3507 = !DILocation(line: 2244, column: 9, scope: !998)
!3508 = !DILocation(line: 2246, column: 25, scope: !3509)
!3509 = distinct !DILexicalBlock(scope: !998, file: !637, line: 2246, column: 9)
!3510 = !DILocation(line: 2246, column: 28, scope: !3509)
!3511 = !DILocation(line: 2246, column: 50, scope: !3509)
!3512 = !DILocation(line: 2246, column: 10, scope: !3509)
!3513 = !DILocation(line: 2246, column: 9, scope: !998)
!3514 = !DILocation(line: 2247, column: 9, scope: !3509)
!3515 = !DILocation(line: 2248, column: 7, scope: !1006)
!3516 = !DILocation(line: 2248, column: 22, scope: !1006)
!3517 = !DILocation(line: 2248, column: 37, scope: !1006)
!3518 = !DILocation(line: 2248, column: 35, scope: !1006)
!3519 = !DILocation(line: 2249, column: 16, scope: !1006)
!3520 = !DILocation(line: 2249, column: 19, scope: !1006)
!3521 = !DILocation(line: 2249, column: 28, scope: !1006)
!3522 = !DILocation(line: 2249, column: 43, scope: !1006)
!3523 = !DILocation(line: 2249, column: 49, scope: !1006)
!3524 = !DILocation(line: 2249, column: 11, scope: !1006)
!3525 = !DILocation(line: 2249, column: 9, scope: !1006)
!3526 = !DILocation(line: 2250, column: 26, scope: !1006)
!3527 = !DILocation(line: 2250, column: 5, scope: !1006)
!3528 = !DILocation(line: 2250, column: 34, scope: !998)
!3529 = !DILocation(line: 2251, column: 9, scope: !3530)
!3530 = distinct !DILexicalBlock(scope: !998, file: !637, line: 2251, column: 9)
!3531 = !DILocation(line: 2251, column: 13, scope: !3530)
!3532 = !DILocation(line: 2251, column: 9, scope: !998)
!3533 = !DILocation(line: 2252, column: 16, scope: !3530)
!3534 = !DILocation(line: 2252, column: 19, scope: !3530)
!3535 = !DILocation(line: 2252, column: 9, scope: !3530)
!3536 = !DILocation(line: 2253, column: 51, scope: !998)
!3537 = !DILocation(line: 2254, column: 5, scope: !998)
!3538 = !DILocation(line: 2255, column: 1, scope: !998)
!3539 = !DILocation(line: 2270, column: 32, scope: !1136)
!3540 = !DILocation(line: 2272, column: 5, scope: !1136)
!3541 = !DILocation(line: 2272, column: 14, scope: !1136)
!3542 = !DILocation(line: 2274, column: 15, scope: !1143)
!3543 = !DILocation(line: 2274, column: 18, scope: !1143)
!3544 = !DILocation(line: 2274, column: 13, scope: !1143)
!3545 = !DILocation(line: 2274, column: 27, scope: !1143)
!3546 = !DILocation(line: 2274, column: 9, scope: !1136)
!3547 = !DILocation(line: 2275, column: 9, scope: !1142)
!3548 = !DILocation(line: 2275, column: 12, scope: !1142)
!3549 = !DILocation(line: 2275, column: 20, scope: !1142)
!3550 = !DILocation(line: 2276, column: 11, scope: !1141)
!3551 = !DILocation(line: 2276, column: 26, scope: !1141)
!3552 = !DILocation(line: 2276, column: 41, scope: !1141)
!3553 = !DILocation(line: 2276, column: 39, scope: !1141)
!3554 = !DILocation(line: 2277, column: 22, scope: !1141)
!3555 = !DILocation(line: 2277, column: 16, scope: !1141)
!3556 = !DILocation(line: 2278, column: 30, scope: !1141)
!3557 = !DILocation(line: 2278, column: 9, scope: !1141)
!3558 = !DILocation(line: 2278, column: 38, scope: !1142)
!3559 = !DILocation(line: 2279, column: 5, scope: !1142)
!3560 = !DILocation(line: 2280, column: 51, scope: !1136)
!3561 = !DILocation(line: 2282, column: 1, scope: !1136)
!3562 = !DILocation(line: 2281, column: 5, scope: !1136)
!3563 = !DILocation(line: 2396, column: 34, scope: !1144)
!3564 = !DILocation(line: 2396, column: 47, scope: !1144)
!3565 = !DILocation(line: 2398, column: 5, scope: !1144)
!3566 = !DILocation(line: 2398, column: 17, scope: !1144)
!3567 = !DILocation(line: 2399, column: 5, scope: !1144)
!3568 = !DILocation(line: 2399, column: 9, scope: !1144)
!3569 = !DILocation(line: 2400, column: 5, scope: !1144)
!3570 = !DILocation(line: 2400, column: 9, scope: !1144)
!3571 = !DILocation(line: 2401, column: 5, scope: !1144)
!3572 = !DILocation(line: 2401, column: 9, scope: !1144)
!3573 = !DILocation(line: 2403, column: 25, scope: !3574)
!3574 = distinct !DILexicalBlock(scope: !1144, file: !637, line: 2403, column: 9)
!3575 = !DILocation(line: 2403, column: 28, scope: !3574)
!3576 = !DILocation(line: 2403, column: 50, scope: !3574)
!3577 = !DILocation(line: 2403, column: 10, scope: !3574)
!3578 = !DILocation(line: 2403, column: 9, scope: !1144)
!3579 = !DILocation(line: 2404, column: 9, scope: !3574)
!3580 = !DILocation(line: 2406, column: 7, scope: !1153)
!3581 = !DILocation(line: 2406, column: 22, scope: !1153)
!3582 = !DILocation(line: 2406, column: 37, scope: !1153)
!3583 = !DILocation(line: 2406, column: 35, scope: !1153)
!3584 = !DILocation(line: 2407, column: 28, scope: !1153)
!3585 = !DILocation(line: 2407, column: 46, scope: !1153)
!3586 = !DILocation(line: 2407, column: 52, scope: !1153)
!3587 = !DILocation(line: 2407, column: 11, scope: !1153)
!3588 = !DILocation(line: 2407, column: 9, scope: !1153)
!3589 = !DILocation(line: 2408, column: 26, scope: !1153)
!3590 = !DILocation(line: 2408, column: 5, scope: !1153)
!3591 = !DILocation(line: 2408, column: 34, scope: !1144)
!3592 = !DILocation(line: 2410, column: 9, scope: !3593)
!3593 = distinct !DILexicalBlock(scope: !1144, file: !637, line: 2410, column: 9)
!3594 = !DILocation(line: 2410, column: 17, scope: !3593)
!3595 = !DILocation(line: 2410, column: 9, scope: !1144)
!3596 = !DILocation(line: 2411, column: 25, scope: !3597)
!3597 = distinct !DILexicalBlock(scope: !3593, file: !637, line: 2410, column: 23)
!3598 = !DILocation(line: 2411, column: 9, scope: !3597)
!3599 = !DILocation(line: 2412, column: 9, scope: !3597)
!3600 = !DILocation(line: 2414, column: 9, scope: !3601)
!3601 = distinct !DILexicalBlock(scope: !1144, file: !637, line: 2414, column: 9)
!3602 = !DILocation(line: 2414, column: 13, scope: !3601)
!3603 = !DILocation(line: 2414, column: 9, scope: !1144)
!3604 = !DILocation(line: 2415, column: 16, scope: !3601)
!3605 = !DILocation(line: 2415, column: 19, scope: !3601)
!3606 = !DILocation(line: 2415, column: 9, scope: !3601)
!3607 = !DILocation(line: 2416, column: 51, scope: !1144)
!3608 = !DILocation(line: 2417, column: 5, scope: !1144)
!3609 = !DILocation(line: 2418, column: 1, scope: !1144)
!3610 = !DILocation(line: 2430, column: 37, scope: !1177)
!3611 = !DILocation(line: 2430, column: 50, scope: !1177)
!3612 = !DILocation(line: 2432, column: 5, scope: !1177)
!3613 = !DILocation(line: 2432, column: 17, scope: !1177)
!3614 = !DILocation(line: 2433, column: 5, scope: !1177)
!3615 = !DILocation(line: 2433, column: 9, scope: !1177)
!3616 = !DILocation(line: 2434, column: 5, scope: !1177)
!3617 = !DILocation(line: 2434, column: 9, scope: !1177)
!3618 = !DILocation(line: 2435, column: 5, scope: !1177)
!3619 = !DILocation(line: 2435, column: 9, scope: !1177)
!3620 = !DILocation(line: 2437, column: 25, scope: !3621)
!3621 = distinct !DILexicalBlock(scope: !1177, file: !637, line: 2437, column: 9)
!3622 = !DILocation(line: 2437, column: 28, scope: !3621)
!3623 = !DILocation(line: 2437, column: 50, scope: !3621)
!3624 = !DILocation(line: 2437, column: 10, scope: !3621)
!3625 = !DILocation(line: 2437, column: 9, scope: !1177)
!3626 = !DILocation(line: 2438, column: 9, scope: !3621)
!3627 = !DILocation(line: 2440, column: 7, scope: !1186)
!3628 = !DILocation(line: 2440, column: 22, scope: !1186)
!3629 = !DILocation(line: 2440, column: 37, scope: !1186)
!3630 = !DILocation(line: 2440, column: 35, scope: !1186)
!3631 = !DILocation(line: 2441, column: 28, scope: !1186)
!3632 = !DILocation(line: 2441, column: 46, scope: !1186)
!3633 = !DILocation(line: 2441, column: 52, scope: !1186)
!3634 = !DILocation(line: 2441, column: 11, scope: !1186)
!3635 = !DILocation(line: 2441, column: 9, scope: !1186)
!3636 = !DILocation(line: 2442, column: 26, scope: !1186)
!3637 = !DILocation(line: 2442, column: 5, scope: !1186)
!3638 = !DILocation(line: 2442, column: 34, scope: !1177)
!3639 = !DILocation(line: 2447, column: 9, scope: !3640)
!3640 = distinct !DILexicalBlock(scope: !1177, file: !637, line: 2447, column: 9)
!3641 = !DILocation(line: 2447, column: 13, scope: !3640)
!3642 = !DILocation(line: 2447, column: 18, scope: !3640)
!3643 = !DILocation(line: 2447, column: 21, scope: !3644)
!3644 = !DILexicalBlockFile(scope: !3640, file: !637, discriminator: 1)
!3645 = !DILocation(line: 2447, column: 9, scope: !1177)
!3646 = !DILocation(line: 2448, column: 9, scope: !3640)
!3647 = !DILocation(line: 2451, column: 35, scope: !1177)
!3648 = !DILocation(line: 2451, column: 28, scope: !1177)
!3649 = !DILocation(line: 2451, column: 12, scope: !1177)
!3650 = !DILocation(line: 2451, column: 5, scope: !1177)
!3651 = !DILocation(line: 2452, column: 1, scope: !1177)
!3652 = !DILocation(line: 2290, column: 33, scope: !1187)
!3653 = !DILocation(line: 2292, column: 5, scope: !1187)
!3654 = !DILocation(line: 2292, column: 14, scope: !1187)
!3655 = !DILocation(line: 2292, column: 19, scope: !1187)
!3656 = !DILocation(line: 2292, column: 22, scope: !1187)
!3657 = !DILocation(line: 2293, column: 5, scope: !1187)
!3658 = !DILocation(line: 2293, column: 8, scope: !1187)
!3659 = !DILocation(line: 2293, column: 16, scope: !1187)
!3660 = !DILocation(line: 2294, column: 39, scope: !1187)
!3661 = !DILocation(line: 2294, column: 28, scope: !1187)
!3662 = !DILocation(line: 2294, column: 12, scope: !1187)
!3663 = !DILocation(line: 2295, column: 1, scope: !1187)
!3664 = !DILocation(line: 2294, column: 5, scope: !1187)
!3665 = !DILocation(line: 2464, column: 33, scope: !1191)
!3666 = !DILocation(line: 2466, column: 39, scope: !1191)
!3667 = !DILocation(line: 2466, column: 42, scope: !1191)
!3668 = !DILocation(line: 2466, column: 28, scope: !1191)
!3669 = !DILocation(line: 2466, column: 12, scope: !1191)
!3670 = !DILocation(line: 2466, column: 5, scope: !1191)
!3671 = !DILocation(line: 2507, column: 38, scope: !1194)
!3672 = !DILocation(line: 2509, column: 5, scope: !1194)
!3673 = !DILocation(line: 2509, column: 17, scope: !1194)
!3674 = !DILocation(line: 2510, column: 5, scope: !1194)
!3675 = !DILocation(line: 2510, column: 9, scope: !1194)
!3676 = !DILocation(line: 2511, column: 5, scope: !1194)
!3677 = !DILocation(line: 2511, column: 15, scope: !1194)
!3678 = !DILocation(line: 2513, column: 25, scope: !3679)
!3679 = distinct !DILexicalBlock(scope: !1194, file: !637, line: 2513, column: 9)
!3680 = !DILocation(line: 2513, column: 10, scope: !3679)
!3681 = !DILocation(line: 2513, column: 9, scope: !1194)
!3682 = !DILocation(line: 2514, column: 9, scope: !3679)
!3683 = !DILocation(line: 2515, column: 5, scope: !1194)
!3684 = !DILocation(line: 2515, column: 25, scope: !1194)
!3685 = !DILocation(line: 2516, column: 7, scope: !1201)
!3686 = !DILocation(line: 2516, column: 22, scope: !1201)
!3687 = !DILocation(line: 2516, column: 37, scope: !1201)
!3688 = !DILocation(line: 2516, column: 35, scope: !1201)
!3689 = !DILocation(line: 2517, column: 23, scope: !1201)
!3690 = !DILocation(line: 2517, column: 26, scope: !1201)
!3691 = !DILocation(line: 2517, column: 35, scope: !1201)
!3692 = !DILocation(line: 2517, column: 50, scope: !1201)
!3693 = !DILocation(line: 2517, column: 11, scope: !1201)
!3694 = !DILocation(line: 2517, column: 9, scope: !1201)
!3695 = !DILocation(line: 2518, column: 26, scope: !1201)
!3696 = !DILocation(line: 2518, column: 5, scope: !1201)
!3697 = !DILocation(line: 2518, column: 34, scope: !1194)
!3698 = !DILocation(line: 2519, column: 9, scope: !3699)
!3699 = distinct !DILexicalBlock(scope: !1194, file: !637, line: 2519, column: 9)
!3700 = !DILocation(line: 2519, column: 13, scope: !3699)
!3701 = !DILocation(line: 2519, column: 9, scope: !1194)
!3702 = !DILocation(line: 2520, column: 16, scope: !3699)
!3703 = !DILocation(line: 2520, column: 19, scope: !3699)
!3704 = !DILocation(line: 2520, column: 9, scope: !3699)
!3705 = !DILocation(line: 2521, column: 25, scope: !1194)
!3706 = !DILocation(line: 2521, column: 28, scope: !1194)
!3707 = !DILocation(line: 2521, column: 52, scope: !1194)
!3708 = !DILocation(line: 2521, column: 58, scope: !1194)
!3709 = !DILocation(line: 2522, column: 25, scope: !1194)
!3710 = !DILocation(line: 2522, column: 28, scope: !1194)
!3711 = !DILocation(line: 2521, column: 12, scope: !1194)
!3712 = !DILocation(line: 2521, column: 5, scope: !1194)
!3713 = !DILocation(line: 2523, column: 1, scope: !1194)
!3714 = !DILocation(line: 2478, column: 38, scope: !1202)
!3715 = !DILocation(line: 2480, column: 5, scope: !1202)
!3716 = !DILocation(line: 2480, column: 17, scope: !1202)
!3717 = !DILocation(line: 2481, column: 5, scope: !1202)
!3718 = !DILocation(line: 2481, column: 9, scope: !1202)
!3719 = !DILocation(line: 2482, column: 5, scope: !1202)
!3720 = !DILocation(line: 2482, column: 15, scope: !1202)
!3721 = !DILocation(line: 2484, column: 25, scope: !3722)
!3722 = distinct !DILexicalBlock(scope: !1202, file: !637, line: 2484, column: 9)
!3723 = !DILocation(line: 2484, column: 10, scope: !3722)
!3724 = !DILocation(line: 2484, column: 9, scope: !1202)
!3725 = !DILocation(line: 2485, column: 9, scope: !3722)
!3726 = !DILocation(line: 2486, column: 5, scope: !1202)
!3727 = !DILocation(line: 2486, column: 25, scope: !1202)
!3728 = !DILocation(line: 2487, column: 7, scope: !1209)
!3729 = !DILocation(line: 2487, column: 22, scope: !1209)
!3730 = !DILocation(line: 2487, column: 37, scope: !1209)
!3731 = !DILocation(line: 2487, column: 35, scope: !1209)
!3732 = !DILocation(line: 2488, column: 23, scope: !1209)
!3733 = !DILocation(line: 2488, column: 26, scope: !1209)
!3734 = !DILocation(line: 2488, column: 35, scope: !1209)
!3735 = !DILocation(line: 2488, column: 50, scope: !1209)
!3736 = !DILocation(line: 2488, column: 11, scope: !1209)
!3737 = !DILocation(line: 2488, column: 9, scope: !1209)
!3738 = !DILocation(line: 2489, column: 26, scope: !1209)
!3739 = !DILocation(line: 2489, column: 5, scope: !1209)
!3740 = !DILocation(line: 2489, column: 34, scope: !1202)
!3741 = !DILocation(line: 2490, column: 9, scope: !3742)
!3742 = distinct !DILexicalBlock(scope: !1202, file: !637, line: 2490, column: 9)
!3743 = !DILocation(line: 2490, column: 13, scope: !3742)
!3744 = !DILocation(line: 2490, column: 9, scope: !1202)
!3745 = !DILocation(line: 2491, column: 16, scope: !3742)
!3746 = !DILocation(line: 2491, column: 19, scope: !3742)
!3747 = !DILocation(line: 2491, column: 9, scope: !3742)
!3748 = !DILocation(line: 2492, column: 25, scope: !1202)
!3749 = !DILocation(line: 2492, column: 28, scope: !1202)
!3750 = !DILocation(line: 2492, column: 52, scope: !1202)
!3751 = !DILocation(line: 2492, column: 58, scope: !1202)
!3752 = !DILocation(line: 2493, column: 25, scope: !1202)
!3753 = !DILocation(line: 2493, column: 28, scope: !1202)
!3754 = !DILocation(line: 2492, column: 12, scope: !1202)
!3755 = !DILocation(line: 2492, column: 5, scope: !1202)
!3756 = !DILocation(line: 2494, column: 1, scope: !1202)
!3757 = !DILocation(line: 2190, column: 37, scope: !1210)
!3758 = !DILocation(line: 2190, column: 50, scope: !1210)
!3759 = !DILocation(line: 2192, column: 5, scope: !1210)
!3760 = !DILocation(line: 2192, column: 9, scope: !1210)
!3761 = !DILocation(line: 2193, column: 5, scope: !1210)
!3762 = !DILocation(line: 2193, column: 9, scope: !1210)
!3763 = !DILocation(line: 2194, column: 5, scope: !1210)
!3764 = !DILocation(line: 2194, column: 9, scope: !1210)
!3765 = !DILocation(line: 2195, column: 5, scope: !1210)
!3766 = !DILocation(line: 2195, column: 15, scope: !1210)
!3767 = !DILocation(line: 2196, column: 5, scope: !1210)
!3768 = !DILocation(line: 2196, column: 15, scope: !1210)
!3769 = !DILocation(line: 2198, column: 27, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !1210, file: !637, line: 2198, column: 9)
!3771 = !DILocation(line: 2198, column: 10, scope: !3770)
!3772 = !DILocation(line: 2198, column: 9, scope: !1210)
!3773 = !DILocation(line: 2200, column: 9, scope: !3770)
!3774 = !DILocation(line: 2202, column: 9, scope: !1221)
!3775 = !DILocation(line: 2202, column: 16, scope: !1221)
!3776 = !DILocation(line: 2202, column: 9, scope: !1210)
!3777 = !DILocation(line: 2203, column: 9, scope: !1220)
!3778 = !DILocation(line: 2203, column: 13, scope: !1220)
!3779 = !DILocation(line: 2204, column: 9, scope: !1220)
!3780 = !DILocation(line: 2204, column: 19, scope: !1220)
!3781 = !DILocation(line: 2205, column: 26, scope: !1220)
!3782 = !DILocation(line: 2205, column: 29, scope: !1220)
!3783 = !DILocation(line: 2205, column: 38, scope: !1220)
!3784 = !DILocation(line: 2205, column: 45, scope: !1220)
!3785 = !DILocation(line: 2206, column: 26, scope: !1220)
!3786 = !DILocation(line: 2205, column: 15, scope: !1220)
!3787 = !DILocation(line: 2205, column: 13, scope: !1220)
!3788 = !DILocation(line: 2207, column: 13, scope: !3789)
!3789 = distinct !DILexicalBlock(scope: !1220, file: !637, line: 2207, column: 13)
!3790 = !DILocation(line: 2207, column: 17, scope: !3789)
!3791 = !DILocation(line: 2207, column: 13, scope: !1220)
!3792 = !DILocation(line: 2208, column: 20, scope: !3789)
!3793 = !DILocation(line: 2208, column: 23, scope: !3789)
!3794 = !DILocation(line: 2208, column: 13, scope: !3789)
!3795 = !DILocation(line: 2209, column: 32, scope: !1220)
!3796 = !DILocation(line: 2209, column: 16, scope: !1220)
!3797 = !DILocation(line: 2209, column: 9, scope: !1220)
!3798 = !DILocation(line: 2210, column: 5, scope: !1221)
!3799 = !DILocation(line: 2211, column: 9, scope: !3800)
!3800 = distinct !DILexicalBlock(scope: !1210, file: !637, line: 2211, column: 9)
!3801 = !DILocation(line: 2211, column: 16, scope: !3800)
!3802 = !DILocation(line: 2211, column: 21, scope: !3800)
!3803 = !DILocation(line: 2211, column: 24, scope: !3804)
!3804 = !DILexicalBlockFile(scope: !3800, file: !637, discriminator: 1)
!3805 = !DILocation(line: 2211, column: 31, scope: !3800)
!3806 = !DILocation(line: 2211, column: 9, scope: !1210)
!3807 = !DILocation(line: 2212, column: 25, scope: !3808)
!3808 = distinct !DILexicalBlock(scope: !3800, file: !637, line: 2211, column: 39)
!3809 = !DILocation(line: 2212, column: 9, scope: !3808)
!3810 = !DILocation(line: 2214, column: 9, scope: !3808)
!3811 = !DILocation(line: 2216, column: 57, scope: !1210)
!3812 = !DILocation(line: 2216, column: 11, scope: !1210)
!3813 = !DILocation(line: 2216, column: 9, scope: !1210)
!3814 = !DILocation(line: 2217, column: 9, scope: !3815)
!3815 = distinct !DILexicalBlock(scope: !1210, file: !637, line: 2217, column: 9)
!3816 = !DILocation(line: 2217, column: 13, scope: !3815)
!3817 = !DILocation(line: 2217, column: 9, scope: !1210)
!3818 = !DILocation(line: 2218, column: 9, scope: !3815)
!3819 = !DILocation(line: 2219, column: 22, scope: !1210)
!3820 = !DILocation(line: 2219, column: 25, scope: !1210)
!3821 = !DILocation(line: 2219, column: 34, scope: !1210)
!3822 = !DILocation(line: 2219, column: 41, scope: !1210)
!3823 = !DILocation(line: 2220, column: 65, scope: !1210)
!3824 = !DILocation(line: 2220, column: 47, scope: !1210)
!3825 = !DILocation(line: 2220, column: 72, scope: !1210)
!3826 = !DILocation(line: 2220, column: 45, scope: !1210)
!3827 = !DILocation(line: 2219, column: 11, scope: !1210)
!3828 = !DILocation(line: 2219, column: 9, scope: !1210)
!3829 = !DILocation(line: 2221, column: 9, scope: !1226)
!3830 = !DILocation(line: 2221, column: 13, scope: !1226)
!3831 = !DILocation(line: 2221, column: 9, scope: !1210)
!3832 = !DILocation(line: 2222, column: 9, scope: !1225)
!3833 = !DILocation(line: 2222, column: 14, scope: !3834)
!3834 = !DILexicalBlockFile(scope: !1224, file: !637, discriminator: 1)
!3835 = !DILocation(line: 2222, column: 24, scope: !1224)
!3836 = !DILocation(line: 2222, column: 54, scope: !1224)
!3837 = !DILocation(line: 2222, column: 68, scope: !3838)
!3838 = distinct !DILexicalBlock(scope: !1224, file: !637, line: 2222, column: 65)
!3839 = !DILocation(line: 2222, column: 85, scope: !3838)
!3840 = !DILocation(line: 2222, column: 65, scope: !3838)
!3841 = !DILocation(line: 2222, column: 95, scope: !3838)
!3842 = !DILocation(line: 2222, column: 65, scope: !1224)
!3843 = !DILocation(line: 2222, column: 65, scope: !3844)
!3844 = !DILexicalBlockFile(scope: !1224, file: !637, discriminator: 2)
!3845 = !DILocation(line: 2222, column: 126, scope: !3846)
!3846 = !DILexicalBlockFile(scope: !3838, file: !637, discriminator: 3)
!3847 = !DILocation(line: 2222, column: 144, scope: !3838)
!3848 = !DILocation(line: 2222, column: 154, scope: !3838)
!3849 = !DILocation(line: 2222, column: 179, scope: !3838)
!3850 = !DILocation(line: 2222, column: 110, scope: !3838)
!3851 = !DILocation(line: 2222, column: 198, scope: !3852)
!3852 = !DILexicalBlockFile(scope: !1225, file: !637, discriminator: 4)
!3853 = !DILocation(line: 2222, column: 198, scope: !1224)
!3854 = !DILocation(line: 2222, column: 198, scope: !3855)
!3855 = !DILexicalBlockFile(scope: !1224, file: !637, discriminator: 5)
!3856 = !DILocation(line: 2223, column: 16, scope: !1225)
!3857 = !DILocation(line: 2223, column: 19, scope: !1225)
!3858 = !DILocation(line: 2223, column: 9, scope: !1225)
!3859 = !DILocation(line: 2225, column: 27, scope: !1210)
!3860 = !DILocation(line: 2225, column: 5, scope: !1210)
!3861 = !DILocation(line: 2226, column: 12, scope: !1210)
!3862 = !DILocation(line: 2226, column: 5, scope: !1210)
!3863 = !DILocation(line: 2227, column: 1, scope: !1210)
!3864 = !DILocation(line: 2537, column: 33, scope: !1227)
!3865 = !DILocation(line: 2537, column: 46, scope: !1227)
!3866 = !DILocation(line: 2539, column: 5, scope: !1227)
!3867 = !DILocation(line: 2539, column: 9, scope: !1227)
!3868 = !DILocation(line: 2540, column: 5, scope: !1227)
!3869 = !DILocation(line: 2540, column: 9, scope: !1227)
!3870 = !DILocation(line: 2542, column: 29, scope: !1227)
!3871 = !DILocation(line: 2542, column: 15, scope: !1227)
!3872 = !DILocation(line: 2542, column: 13, scope: !1227)
!3873 = !DILocation(line: 2543, column: 9, scope: !3874)
!3874 = distinct !DILexicalBlock(scope: !1227, file: !637, line: 2543, column: 9)
!3875 = !DILocation(line: 2543, column: 17, scope: !3874)
!3876 = !DILocation(line: 2543, column: 23, scope: !3874)
!3877 = !DILocation(line: 2543, column: 26, scope: !3878)
!3878 = !DILexicalBlockFile(scope: !3874, file: !637, discriminator: 1)
!3879 = !DILocation(line: 2543, column: 9, scope: !1227)
!3880 = !DILocation(line: 2544, column: 9, scope: !3874)
!3881 = !DILocation(line: 2545, column: 7, scope: !1234)
!3882 = !DILocation(line: 2545, column: 22, scope: !1234)
!3883 = !DILocation(line: 2545, column: 37, scope: !1234)
!3884 = !DILocation(line: 2545, column: 35, scope: !1234)
!3885 = !DILocation(line: 2548, column: 9, scope: !3886)
!3886 = distinct !DILexicalBlock(scope: !1234, file: !637, line: 2548, column: 9)
!3887 = !DILocation(line: 2548, column: 17, scope: !3886)
!3888 = !DILocation(line: 2548, column: 9, scope: !1234)
!3889 = !DILocation(line: 2549, column: 17, scope: !3886)
!3890 = !DILocation(line: 2549, column: 9, scope: !3886)
!3891 = !DILocation(line: 2550, column: 18, scope: !1234)
!3892 = !DILocation(line: 2550, column: 21, scope: !1234)
!3893 = !DILocation(line: 2550, column: 30, scope: !1234)
!3894 = !DILocation(line: 2550, column: 11, scope: !1234)
!3895 = !DILocation(line: 2550, column: 9, scope: !1234)
!3896 = !DILocation(line: 2551, column: 26, scope: !1234)
!3897 = !DILocation(line: 2551, column: 5, scope: !1234)
!3898 = !DILocation(line: 2551, column: 34, scope: !1227)
!3899 = !DILocation(line: 2552, column: 9, scope: !3900)
!3900 = distinct !DILexicalBlock(scope: !1227, file: !637, line: 2552, column: 9)
!3901 = !DILocation(line: 2552, column: 13, scope: !3900)
!3902 = !DILocation(line: 2552, column: 9, scope: !1227)
!3903 = !DILocation(line: 2553, column: 16, scope: !3900)
!3904 = !DILocation(line: 2553, column: 19, scope: !3900)
!3905 = !DILocation(line: 2553, column: 9, scope: !3900)
!3906 = !DILocation(line: 2554, column: 51, scope: !1227)
!3907 = !DILocation(line: 2555, column: 5, scope: !1227)
!3908 = !DILocation(line: 2556, column: 1, scope: !1227)
!3909 = !DILocation(line: 2623, column: 31, scope: !1235)
!3910 = !DILocation(line: 2623, column: 44, scope: !1235)
!3911 = !DILocation(line: 2625, column: 5, scope: !1235)
!3912 = !DILocation(line: 2625, column: 16, scope: !1235)
!3913 = !DILocation(line: 2625, column: 25, scope: !1235)
!3914 = !DILocation(line: 2626, column: 5, scope: !1235)
!3915 = !DILocation(line: 2626, column: 9, scope: !1235)
!3916 = !DILocation(line: 2627, column: 5, scope: !1235)
!3917 = !DILocation(line: 2627, column: 15, scope: !1235)
!3918 = !DILocation(line: 2629, column: 27, scope: !3919)
!3919 = distinct !DILexicalBlock(scope: !1235, file: !637, line: 2629, column: 9)
!3920 = !DILocation(line: 2629, column: 10, scope: !3919)
!3921 = !DILocation(line: 2629, column: 9, scope: !1235)
!3922 = !DILocation(line: 2630, column: 9, scope: !3919)
!3923 = !DILocation(line: 2632, column: 9, scope: !3924)
!3924 = distinct !DILexicalBlock(scope: !1235, file: !637, line: 2632, column: 9)
!3925 = !DILocation(line: 2632, column: 17, scope: !3924)
!3926 = !DILocation(line: 2632, column: 9, scope: !1235)
!3927 = !DILocation(line: 2633, column: 25, scope: !3928)
!3928 = distinct !DILexicalBlock(scope: !3924, file: !637, line: 2632, column: 22)
!3929 = !DILocation(line: 2633, column: 9, scope: !3928)
!3930 = !DILocation(line: 2635, column: 9, scope: !3928)
!3931 = !DILocation(line: 2639, column: 49, scope: !1235)
!3932 = !DILocation(line: 2639, column: 11, scope: !1235)
!3933 = !DILocation(line: 2639, column: 9, scope: !1235)
!3934 = !DILocation(line: 2640, column: 9, scope: !3935)
!3935 = distinct !DILexicalBlock(scope: !1235, file: !637, line: 2640, column: 9)
!3936 = !DILocation(line: 2640, column: 13, scope: !3935)
!3937 = !DILocation(line: 2640, column: 9, scope: !1235)
!3938 = !DILocation(line: 2641, column: 9, scope: !3935)
!3939 = !DILocation(line: 2644, column: 29, scope: !1235)
!3940 = !DILocation(line: 2644, column: 67, scope: !1235)
!3941 = !DILocation(line: 2644, column: 49, scope: !1235)
!3942 = !DILocation(line: 2644, column: 74, scope: !1235)
!3943 = !DILocation(line: 2644, column: 47, scope: !1235)
!3944 = !DILocation(line: 2644, column: 85, scope: !1235)
!3945 = !DILocation(line: 2644, column: 94, scope: !1235)
!3946 = !DILocation(line: 2644, column: 14, scope: !1235)
!3947 = !DILocation(line: 2644, column: 12, scope: !1235)
!3948 = !DILocation(line: 2645, column: 9, scope: !1246)
!3949 = !DILocation(line: 2645, column: 16, scope: !1246)
!3950 = !DILocation(line: 2645, column: 9, scope: !1235)
!3951 = !DILocation(line: 2648, column: 9, scope: !1245)
!3952 = !DILocation(line: 2648, column: 14, scope: !3953)
!3953 = !DILexicalBlockFile(scope: !1244, file: !637, discriminator: 1)
!3954 = !DILocation(line: 2648, column: 24, scope: !1244)
!3955 = !DILocation(line: 2648, column: 54, scope: !1244)
!3956 = !DILocation(line: 2648, column: 68, scope: !3957)
!3957 = distinct !DILexicalBlock(scope: !1244, file: !637, line: 2648, column: 65)
!3958 = !DILocation(line: 2648, column: 85, scope: !3957)
!3959 = !DILocation(line: 2648, column: 65, scope: !3957)
!3960 = !DILocation(line: 2648, column: 95, scope: !3957)
!3961 = !DILocation(line: 2648, column: 65, scope: !1244)
!3962 = !DILocation(line: 2648, column: 65, scope: !3963)
!3963 = !DILexicalBlockFile(scope: !1244, file: !637, discriminator: 2)
!3964 = !DILocation(line: 2648, column: 126, scope: !3965)
!3965 = !DILexicalBlockFile(scope: !3957, file: !637, discriminator: 3)
!3966 = !DILocation(line: 2648, column: 144, scope: !3957)
!3967 = !DILocation(line: 2648, column: 154, scope: !3957)
!3968 = !DILocation(line: 2648, column: 179, scope: !3957)
!3969 = !DILocation(line: 2648, column: 110, scope: !3957)
!3970 = !DILocation(line: 2648, column: 198, scope: !3971)
!3971 = !DILexicalBlockFile(scope: !1245, file: !637, discriminator: 4)
!3972 = !DILocation(line: 2648, column: 198, scope: !1244)
!3973 = !DILocation(line: 2648, column: 198, scope: !3974)
!3974 = !DILexicalBlockFile(scope: !1244, file: !637, discriminator: 5)
!3975 = !DILocation(line: 2649, column: 9, scope: !1245)
!3976 = !DILocation(line: 2651, column: 9, scope: !3977)
!3977 = distinct !DILexicalBlock(scope: !1235, file: !637, line: 2651, column: 9)
!3978 = !DILocation(line: 2651, column: 19, scope: !3977)
!3979 = !DILocation(line: 2651, column: 16, scope: !3977)
!3980 = !DILocation(line: 2651, column: 9, scope: !1235)
!3981 = !DILocation(line: 2654, column: 31, scope: !3982)
!3982 = distinct !DILexicalBlock(scope: !3977, file: !637, line: 2651, column: 28)
!3983 = !DILocation(line: 2654, column: 9, scope: !3982)
!3984 = !DILocation(line: 2655, column: 5, scope: !3982)
!3985 = !DILocation(line: 2657, column: 12, scope: !1235)
!3986 = !DILocation(line: 2657, column: 5, scope: !1235)
!3987 = !DILocation(line: 2658, column: 1, scope: !1235)
!3988 = !DILocation(line: 2672, column: 36, scope: !1265)
!3989 = !DILocation(line: 2672, column: 49, scope: !1265)
!3990 = !DILocation(line: 2672, column: 65, scope: !1265)
!3991 = !DILocation(line: 2676, column: 5, scope: !1265)
!3992 = !DILocation(line: 2676, column: 9, scope: !1265)
!3993 = !DILocation(line: 2677, column: 5, scope: !1265)
!3994 = !DILocation(line: 2677, column: 15, scope: !1265)
!3995 = !DILocation(line: 2678, column: 5, scope: !1265)
!3996 = !DILocation(line: 2678, column: 11, scope: !1265)
!3997 = !DILocation(line: 2679, column: 5, scope: !1265)
!3998 = !DILocation(line: 2679, column: 16, scope: !1265)
!3999 = !DILocation(line: 2679, column: 24, scope: !1265)
!4000 = !DILocation(line: 2679, column: 33, scope: !1265)
!4001 = !DILocation(line: 2682, column: 38, scope: !4002)
!4002 = distinct !DILexicalBlock(scope: !1265, file: !637, line: 2682, column: 9)
!4003 = !DILocation(line: 2682, column: 44, scope: !4002)
!4004 = !DILocation(line: 2682, column: 10, scope: !4002)
!4005 = !DILocation(line: 2682, column: 9, scope: !1265)
!4006 = !DILocation(line: 2684, column: 9, scope: !4002)
!4007 = !DILocation(line: 2685, column: 16, scope: !1265)
!4008 = !{!4009, !2323, i64 0}
!4009 = !{!"bufferinfo", !2323, i64 0, !2323, i64 8, !2320, i64 16, !2320, i64 24, !2950, i64 32, !2950, i64 36, !2323, i64 40, !2323, i64 48, !2323, i64 56, !2323, i64 64, !2323, i64 72}
!4010 = !DILocation(line: 2685, column: 9, scope: !1265)
!4011 = !DILocation(line: 2686, column: 19, scope: !1265)
!4012 = !{!4009, !2320, i64 16}
!4013 = !DILocation(line: 2686, column: 12, scope: !1265)
!4014 = !DILocation(line: 2688, column: 9, scope: !4015)
!4015 = distinct !DILexicalBlock(scope: !1265, file: !637, line: 2688, column: 9)
!4016 = !DILocation(line: 2688, column: 17, scope: !4015)
!4017 = !DILocation(line: 2688, column: 9, scope: !1265)
!4018 = !DILocation(line: 2689, column: 9, scope: !4019)
!4019 = distinct !DILexicalBlock(scope: !4015, file: !637, line: 2688, column: 22)
!4020 = !DILocation(line: 2690, column: 25, scope: !4019)
!4021 = !DILocation(line: 2690, column: 9, scope: !4019)
!4022 = !DILocation(line: 2692, column: 9, scope: !4019)
!4023 = !DILocation(line: 2694, column: 9, scope: !4024)
!4024 = distinct !DILexicalBlock(scope: !1265, file: !637, line: 2694, column: 9)
!4025 = !DILocation(line: 2694, column: 17, scope: !4024)
!4026 = !DILocation(line: 2694, column: 9, scope: !1265)
!4027 = !DILocation(line: 2696, column: 19, scope: !4028)
!4028 = distinct !DILexicalBlock(scope: !4024, file: !637, line: 2694, column: 23)
!4029 = !DILocation(line: 2696, column: 17, scope: !4028)
!4030 = !DILocation(line: 2697, column: 5, scope: !4028)
!4031 = !DILocation(line: 2700, column: 9, scope: !4032)
!4032 = distinct !DILexicalBlock(scope: !1265, file: !637, line: 2700, column: 9)
!4033 = !DILocation(line: 2700, column: 18, scope: !4032)
!4034 = !DILocation(line: 2700, column: 16, scope: !4032)
!4035 = !DILocation(line: 2700, column: 9, scope: !1265)
!4036 = !DILocation(line: 2701, column: 9, scope: !4037)
!4037 = distinct !DILexicalBlock(scope: !4032, file: !637, line: 2700, column: 27)
!4038 = !DILocation(line: 2702, column: 25, scope: !4037)
!4039 = !DILocation(line: 2702, column: 9, scope: !4037)
!4040 = !DILocation(line: 2704, column: 9, scope: !4037)
!4041 = !DILocation(line: 2708, column: 30, scope: !1265)
!4042 = !DILocation(line: 2708, column: 33, scope: !1265)
!4043 = !DILocation(line: 2708, column: 38, scope: !1265)
!4044 = !DILocation(line: 2708, column: 47, scope: !1265)
!4045 = !DILocation(line: 2708, column: 15, scope: !1265)
!4046 = !DILocation(line: 2708, column: 13, scope: !1265)
!4047 = !DILocation(line: 2709, column: 9, scope: !4048)
!4048 = distinct !DILexicalBlock(scope: !1265, file: !637, line: 2709, column: 9)
!4049 = !DILocation(line: 2709, column: 17, scope: !4048)
!4050 = !DILocation(line: 2709, column: 9, scope: !1265)
!4051 = !DILocation(line: 2711, column: 9, scope: !4052)
!4052 = distinct !DILexicalBlock(scope: !4048, file: !637, line: 2709, column: 22)
!4053 = !DILocation(line: 2712, column: 9, scope: !4052)
!4054 = !DILocation(line: 2715, column: 5, scope: !1265)
!4055 = !DILocation(line: 2718, column: 31, scope: !1265)
!4056 = !DILocation(line: 2718, column: 12, scope: !1265)
!4057 = !DILocation(line: 2718, column: 5, scope: !1265)
!4058 = !DILocation(line: 2719, column: 1, scope: !1265)
!4059 = !DILocation(line: 2798, column: 35, scope: !1278)
!4060 = !DILocation(line: 2798, column: 48, scope: !1278)
!4061 = !DILocation(line: 2800, column: 5, scope: !1278)
!4062 = !DILocation(line: 2800, column: 15, scope: !1278)
!4063 = !DILocation(line: 2801, column: 5, scope: !1278)
!4064 = !DILocation(line: 2801, column: 15, scope: !1278)
!4065 = !DILocation(line: 2802, column: 5, scope: !1278)
!4066 = !DILocation(line: 2802, column: 15, scope: !1278)
!4067 = !DILocation(line: 2803, column: 5, scope: !1278)
!4068 = !DILocation(line: 2803, column: 9, scope: !1278)
!4069 = !DILocation(line: 2804, column: 5, scope: !1278)
!4070 = !DILocation(line: 2804, column: 16, scope: !1278)
!4071 = !DILocation(line: 2804, column: 25, scope: !1278)
!4072 = !DILocation(line: 2806, column: 27, scope: !4073)
!4073 = distinct !DILexicalBlock(scope: !1278, file: !637, line: 2806, column: 9)
!4074 = !DILocation(line: 2806, column: 10, scope: !4073)
!4075 = !DILocation(line: 2806, column: 9, scope: !1278)
!4076 = !DILocation(line: 2807, column: 9, scope: !4073)
!4077 = !DILocation(line: 2809, column: 9, scope: !4078)
!4078 = distinct !DILexicalBlock(scope: !1278, file: !637, line: 2809, column: 9)
!4079 = !DILocation(line: 2809, column: 17, scope: !4078)
!4080 = !DILocation(line: 2809, column: 9, scope: !1278)
!4081 = !DILocation(line: 2810, column: 25, scope: !4082)
!4082 = distinct !DILexicalBlock(scope: !4078, file: !637, line: 2809, column: 22)
!4083 = !DILocation(line: 2810, column: 9, scope: !4082)
!4084 = !DILocation(line: 2812, column: 9, scope: !4082)
!4085 = !DILocation(line: 2815, column: 49, scope: !1278)
!4086 = !DILocation(line: 2815, column: 11, scope: !1278)
!4087 = !DILocation(line: 2815, column: 9, scope: !1278)
!4088 = !DILocation(line: 2816, column: 9, scope: !4089)
!4089 = distinct !DILexicalBlock(scope: !1278, file: !637, line: 2816, column: 9)
!4090 = !DILocation(line: 2816, column: 13, scope: !4089)
!4091 = !DILocation(line: 2816, column: 9, scope: !1278)
!4092 = !DILocation(line: 2817, column: 9, scope: !4089)
!4093 = !DILocation(line: 2819, column: 33, scope: !1278)
!4094 = !DILocation(line: 2819, column: 71, scope: !1278)
!4095 = !DILocation(line: 2819, column: 53, scope: !1278)
!4096 = !DILocation(line: 2819, column: 78, scope: !1278)
!4097 = !DILocation(line: 2819, column: 51, scope: !1278)
!4098 = !DILocation(line: 2820, column: 33, scope: !1278)
!4099 = !DILocation(line: 2820, column: 42, scope: !1278)
!4100 = !DILocation(line: 2819, column: 14, scope: !1278)
!4101 = !DILocation(line: 2819, column: 12, scope: !1278)
!4102 = !DILocation(line: 2821, column: 9, scope: !4103)
!4103 = distinct !DILexicalBlock(scope: !1278, file: !637, line: 2821, column: 9)
!4104 = !DILocation(line: 2821, column: 16, scope: !4103)
!4105 = !DILocation(line: 2821, column: 9, scope: !1278)
!4106 = !DILocation(line: 2822, column: 9, scope: !4107)
!4107 = distinct !DILexicalBlock(scope: !4103, file: !637, line: 2821, column: 21)
!4108 = !DILocation(line: 2825, column: 9, scope: !4109)
!4109 = distinct !DILexicalBlock(scope: !1278, file: !637, line: 2825, column: 9)
!4110 = !DILocation(line: 2825, column: 19, scope: !4109)
!4111 = !DILocation(line: 2825, column: 16, scope: !4109)
!4112 = !DILocation(line: 2825, column: 9, scope: !1278)
!4113 = !DILocation(line: 2828, column: 35, scope: !4114)
!4114 = distinct !DILexicalBlock(scope: !4115, file: !637, line: 2828, column: 13)
!4115 = distinct !DILexicalBlock(scope: !4109, file: !637, line: 2825, column: 28)
!4116 = !DILocation(line: 2828, column: 13, scope: !4114)
!4117 = !DILocation(line: 2828, column: 43, scope: !4114)
!4118 = !DILocation(line: 2828, column: 13, scope: !4115)
!4119 = !DILocation(line: 2830, column: 13, scope: !4114)
!4120 = !DILocation(line: 2831, column: 5, scope: !4115)
!4121 = !DILocation(line: 2833, column: 27, scope: !1278)
!4122 = !DILocation(line: 2833, column: 32, scope: !1278)
!4123 = !DILocation(line: 2833, column: 11, scope: !1278)
!4124 = !DILocation(line: 2833, column: 9, scope: !1278)
!4125 = !DILocation(line: 2833, column: 5, scope: !1278)
!4126 = !DILocation(line: 2836, column: 5, scope: !1278)
!4127 = !DILocation(line: 2836, column: 10, scope: !4128)
!4128 = !DILexicalBlockFile(scope: !1289, file: !637, discriminator: 1)
!4129 = !DILocation(line: 2836, column: 20, scope: !1289)
!4130 = !DILocation(line: 2836, column: 51, scope: !1289)
!4131 = !DILocation(line: 2836, column: 61, scope: !1292)
!4132 = !DILocation(line: 2836, column: 77, scope: !1292)
!4133 = !DILocation(line: 2836, column: 61, scope: !1289)
!4134 = !DILocation(line: 2836, column: 92, scope: !4135)
!4135 = !DILexicalBlockFile(scope: !1292, file: !637, discriminator: 2)
!4136 = !DILocation(line: 2836, column: 97, scope: !4137)
!4137 = !DILexicalBlockFile(scope: !1291, file: !637, discriminator: 4)
!4138 = !DILocation(line: 2836, column: 107, scope: !1291)
!4139 = !DILocation(line: 2836, column: 137, scope: !1291)
!4140 = !DILocation(line: 2836, column: 163, scope: !4141)
!4141 = distinct !DILexicalBlock(scope: !1291, file: !637, line: 2836, column: 160)
!4142 = !DILocation(line: 2836, column: 180, scope: !4141)
!4143 = !DILocation(line: 2836, column: 160, scope: !4141)
!4144 = !DILocation(line: 2836, column: 190, scope: !4141)
!4145 = !DILocation(line: 2836, column: 160, scope: !1291)
!4146 = !DILocation(line: 2836, column: 160, scope: !4147)
!4147 = !DILexicalBlockFile(scope: !1291, file: !637, discriminator: 5)
!4148 = !DILocation(line: 2836, column: 221, scope: !4149)
!4149 = !DILexicalBlockFile(scope: !4141, file: !637, discriminator: 6)
!4150 = !DILocation(line: 2836, column: 239, scope: !4141)
!4151 = !DILocation(line: 2836, column: 249, scope: !4141)
!4152 = !DILocation(line: 2836, column: 274, scope: !4141)
!4153 = !DILocation(line: 2836, column: 205, scope: !4141)
!4154 = !DILocation(line: 2836, column: 293, scope: !4155)
!4155 = !DILexicalBlockFile(scope: !1292, file: !637, discriminator: 7)
!4156 = !DILocation(line: 2836, column: 293, scope: !1291)
!4157 = !DILocation(line: 2836, column: 293, scope: !4158)
!4158 = !DILexicalBlockFile(scope: !1291, file: !637, discriminator: 8)
!4159 = !DILocation(line: 2836, column: 293, scope: !4160)
!4160 = !DILexicalBlockFile(scope: !1291, file: !637, discriminator: 9)
!4161 = !DILocation(line: 2836, column: 306, scope: !4162)
!4162 = !DILexicalBlockFile(scope: !4163, file: !637, discriminator: 10)
!4163 = !DILexicalBlockFile(scope: !1278, file: !637, discriminator: 3)
!4164 = !DILocation(line: 2836, column: 306, scope: !1289)
!4165 = !DILocation(line: 2836, column: 306, scope: !4166)
!4166 = !DILexicalBlockFile(scope: !1289, file: !637, discriminator: 11)
!4167 = !DILocation(line: 2837, column: 5, scope: !1278)
!4168 = !DILocation(line: 2837, column: 10, scope: !4169)
!4169 = !DILexicalBlockFile(scope: !1294, file: !637, discriminator: 1)
!4170 = !DILocation(line: 2837, column: 20, scope: !1294)
!4171 = !DILocation(line: 2837, column: 51, scope: !1294)
!4172 = !DILocation(line: 2837, column: 62, scope: !1297)
!4173 = !DILocation(line: 2837, column: 78, scope: !1297)
!4174 = !DILocation(line: 2837, column: 62, scope: !1294)
!4175 = !DILocation(line: 2837, column: 93, scope: !4176)
!4176 = !DILexicalBlockFile(scope: !1297, file: !637, discriminator: 2)
!4177 = !DILocation(line: 2837, column: 98, scope: !4178)
!4178 = !DILexicalBlockFile(scope: !1296, file: !637, discriminator: 4)
!4179 = !DILocation(line: 2837, column: 108, scope: !1296)
!4180 = !DILocation(line: 2837, column: 138, scope: !1296)
!4181 = !DILocation(line: 2837, column: 164, scope: !4182)
!4182 = distinct !DILexicalBlock(scope: !1296, file: !637, line: 2837, column: 161)
!4183 = !DILocation(line: 2837, column: 181, scope: !4182)
!4184 = !DILocation(line: 2837, column: 161, scope: !4182)
!4185 = !DILocation(line: 2837, column: 191, scope: !4182)
!4186 = !DILocation(line: 2837, column: 161, scope: !1296)
!4187 = !DILocation(line: 2837, column: 161, scope: !4188)
!4188 = !DILexicalBlockFile(scope: !1296, file: !637, discriminator: 5)
!4189 = !DILocation(line: 2837, column: 222, scope: !4190)
!4190 = !DILexicalBlockFile(scope: !4182, file: !637, discriminator: 6)
!4191 = !DILocation(line: 2837, column: 240, scope: !4182)
!4192 = !DILocation(line: 2837, column: 250, scope: !4182)
!4193 = !DILocation(line: 2837, column: 275, scope: !4182)
!4194 = !DILocation(line: 2837, column: 206, scope: !4182)
!4195 = !DILocation(line: 2837, column: 294, scope: !4196)
!4196 = !DILexicalBlockFile(scope: !1297, file: !637, discriminator: 7)
!4197 = !DILocation(line: 2837, column: 294, scope: !1296)
!4198 = !DILocation(line: 2837, column: 294, scope: !4199)
!4199 = !DILexicalBlockFile(scope: !1296, file: !637, discriminator: 8)
!4200 = !DILocation(line: 2837, column: 294, scope: !4201)
!4201 = !DILexicalBlockFile(scope: !1296, file: !637, discriminator: 9)
!4202 = !DILocation(line: 2837, column: 307, scope: !4162)
!4203 = !DILocation(line: 2837, column: 307, scope: !1294)
!4204 = !DILocation(line: 2837, column: 307, scope: !4205)
!4205 = !DILexicalBlockFile(scope: !1294, file: !637, discriminator: 11)
!4206 = !DILocation(line: 2838, column: 12, scope: !1278)
!4207 = !DILocation(line: 2838, column: 5, scope: !1278)
!4208 = !DILocation(line: 2839, column: 1, scope: !1278)
!4209 = !DILocation(line: 2850, column: 40, scope: !1319)
!4210 = !DILocation(line: 2850, column: 53, scope: !1319)
!4211 = !DILocation(line: 2850, column: 69, scope: !1319)
!4212 = !DILocation(line: 2854, column: 5, scope: !1319)
!4213 = !DILocation(line: 2854, column: 9, scope: !1319)
!4214 = !DILocation(line: 2855, column: 5, scope: !1319)
!4215 = !DILocation(line: 2855, column: 15, scope: !1319)
!4216 = !DILocation(line: 2856, column: 5, scope: !1319)
!4217 = !DILocation(line: 2856, column: 11, scope: !1319)
!4218 = !DILocation(line: 2857, column: 5, scope: !1319)
!4219 = !DILocation(line: 2857, column: 16, scope: !1319)
!4220 = !DILocation(line: 2857, column: 25, scope: !1319)
!4221 = !DILocation(line: 2857, column: 33, scope: !1319)
!4222 = !DILocation(line: 2859, column: 5, scope: !1319)
!4223 = !DILocation(line: 2859, column: 15, scope: !1319)
!4224 = !DILocation(line: 2861, column: 38, scope: !4225)
!4225 = distinct !DILexicalBlock(scope: !1319, file: !637, line: 2861, column: 9)
!4226 = !DILocation(line: 2861, column: 44, scope: !4225)
!4227 = !DILocation(line: 2861, column: 10, scope: !4225)
!4228 = !DILocation(line: 2861, column: 9, scope: !1319)
!4229 = !DILocation(line: 2864, column: 9, scope: !4225)
!4230 = !DILocation(line: 2865, column: 16, scope: !1319)
!4231 = !DILocation(line: 2865, column: 9, scope: !1319)
!4232 = !DILocation(line: 2866, column: 19, scope: !1319)
!4233 = !DILocation(line: 2866, column: 12, scope: !1319)
!4234 = !DILocation(line: 2868, column: 9, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !1319, file: !637, line: 2868, column: 9)
!4236 = !DILocation(line: 2868, column: 17, scope: !4235)
!4237 = !DILocation(line: 2868, column: 9, scope: !1319)
!4238 = !DILocation(line: 2869, column: 9, scope: !4239)
!4239 = distinct !DILexicalBlock(scope: !4235, file: !637, line: 2868, column: 22)
!4240 = !DILocation(line: 2870, column: 25, scope: !4239)
!4241 = !DILocation(line: 2870, column: 9, scope: !4239)
!4242 = !DILocation(line: 2872, column: 9, scope: !4239)
!4243 = !DILocation(line: 2874, column: 9, scope: !4244)
!4244 = distinct !DILexicalBlock(scope: !1319, file: !637, line: 2874, column: 9)
!4245 = !DILocation(line: 2874, column: 17, scope: !4244)
!4246 = !DILocation(line: 2874, column: 9, scope: !1319)
!4247 = !DILocation(line: 2876, column: 19, scope: !4248)
!4248 = distinct !DILexicalBlock(scope: !4244, file: !637, line: 2874, column: 23)
!4249 = !DILocation(line: 2876, column: 17, scope: !4248)
!4250 = !DILocation(line: 2877, column: 5, scope: !4248)
!4251 = !DILocation(line: 2877, column: 16, scope: !4252)
!4252 = distinct !DILexicalBlock(scope: !4244, file: !637, line: 2877, column: 16)
!4253 = !DILocation(line: 2877, column: 26, scope: !4252)
!4254 = !DILocation(line: 2877, column: 24, scope: !4252)
!4255 = !DILocation(line: 2877, column: 16, scope: !4244)
!4256 = !DILocation(line: 2878, column: 9, scope: !4257)
!4257 = distinct !DILexicalBlock(scope: !4252, file: !637, line: 2877, column: 34)
!4258 = !DILocation(line: 2879, column: 25, scope: !4257)
!4259 = !DILocation(line: 2879, column: 9, scope: !4257)
!4260 = !DILocation(line: 2881, column: 9, scope: !4257)
!4261 = !DILocation(line: 2884, column: 34, scope: !1319)
!4262 = !DILocation(line: 2884, column: 37, scope: !1319)
!4263 = !DILocation(line: 2884, column: 42, scope: !1319)
!4264 = !DILocation(line: 2884, column: 51, scope: !1319)
!4265 = !DILocation(line: 2884, column: 15, scope: !1319)
!4266 = !DILocation(line: 2884, column: 13, scope: !1319)
!4267 = !DILocation(line: 2885, column: 9, scope: !1334)
!4268 = !DILocation(line: 2885, column: 17, scope: !1334)
!4269 = !DILocation(line: 2885, column: 9, scope: !1319)
!4270 = !DILocation(line: 2886, column: 9, scope: !1333)
!4271 = !DILocation(line: 2888, column: 9, scope: !1333)
!4272 = !DILocation(line: 2888, column: 14, scope: !4273)
!4273 = !DILexicalBlockFile(scope: !1332, file: !637, discriminator: 1)
!4274 = !DILocation(line: 2888, column: 24, scope: !1332)
!4275 = !DILocation(line: 2888, column: 55, scope: !1332)
!4276 = !DILocation(line: 2888, column: 66, scope: !1337)
!4277 = !DILocation(line: 2888, column: 82, scope: !1337)
!4278 = !DILocation(line: 2888, column: 66, scope: !1332)
!4279 = !DILocation(line: 2888, column: 97, scope: !4280)
!4280 = !DILexicalBlockFile(scope: !1337, file: !637, discriminator: 2)
!4281 = !DILocation(line: 2888, column: 102, scope: !4282)
!4282 = !DILexicalBlockFile(scope: !1336, file: !637, discriminator: 4)
!4283 = !DILocation(line: 2888, column: 112, scope: !1336)
!4284 = !DILocation(line: 2888, column: 142, scope: !1336)
!4285 = !DILocation(line: 2888, column: 168, scope: !4286)
!4286 = distinct !DILexicalBlock(scope: !1336, file: !637, line: 2888, column: 165)
!4287 = !DILocation(line: 2888, column: 185, scope: !4286)
!4288 = !DILocation(line: 2888, column: 165, scope: !4286)
!4289 = !DILocation(line: 2888, column: 195, scope: !4286)
!4290 = !DILocation(line: 2888, column: 165, scope: !1336)
!4291 = !DILocation(line: 2888, column: 165, scope: !4292)
!4292 = !DILexicalBlockFile(scope: !1336, file: !637, discriminator: 5)
!4293 = !DILocation(line: 2888, column: 226, scope: !4294)
!4294 = !DILexicalBlockFile(scope: !4286, file: !637, discriminator: 6)
!4295 = !DILocation(line: 2888, column: 244, scope: !4286)
!4296 = !DILocation(line: 2888, column: 254, scope: !4286)
!4297 = !DILocation(line: 2888, column: 279, scope: !4286)
!4298 = !DILocation(line: 2888, column: 210, scope: !4286)
!4299 = !DILocation(line: 2888, column: 298, scope: !4300)
!4300 = !DILexicalBlockFile(scope: !1337, file: !637, discriminator: 7)
!4301 = !DILocation(line: 2888, column: 298, scope: !1336)
!4302 = !DILocation(line: 2888, column: 298, scope: !4303)
!4303 = !DILexicalBlockFile(scope: !1336, file: !637, discriminator: 8)
!4304 = !DILocation(line: 2888, column: 298, scope: !4305)
!4305 = !DILexicalBlockFile(scope: !1336, file: !637, discriminator: 9)
!4306 = !DILocation(line: 2888, column: 311, scope: !4307)
!4307 = !DILexicalBlockFile(scope: !4308, file: !637, discriminator: 10)
!4308 = !DILexicalBlockFile(scope: !1333, file: !637, discriminator: 3)
!4309 = !DILocation(line: 2888, column: 311, scope: !1332)
!4310 = !DILocation(line: 2888, column: 311, scope: !4311)
!4311 = !DILexicalBlockFile(scope: !1332, file: !637, discriminator: 11)
!4312 = !DILocation(line: 2889, column: 9, scope: !1333)
!4313 = !DILocation(line: 2892, column: 5, scope: !1319)
!4314 = !DILocation(line: 2895, column: 32, scope: !1319)
!4315 = !DILocation(line: 2895, column: 41, scope: !1319)
!4316 = !DILocation(line: 2895, column: 12, scope: !1319)
!4317 = !DILocation(line: 2895, column: 5, scope: !1319)
!4318 = !DILocation(line: 2896, column: 1, scope: !1319)
!4319 = !DILocation(line: 3232, column: 31, scope: !1338)
!4320 = !DILocation(line: 3232, column: 44, scope: !1338)
!4321 = !DILocation(line: 3234, column: 5, scope: !1338)
!4322 = !DILocation(line: 3234, column: 11, scope: !1338)
!4323 = !DILocation(line: 3235, column: 5, scope: !1338)
!4324 = !DILocation(line: 3235, column: 16, scope: !1338)
!4325 = !DILocation(line: 3235, column: 21, scope: !1338)
!4326 = !DILocation(line: 3236, column: 5, scope: !1338)
!4327 = !DILocation(line: 3236, column: 9, scope: !1338)
!4328 = !DILocation(line: 3236, column: 20, scope: !1338)
!4329 = !DILocation(line: 3237, column: 5, scope: !1338)
!4330 = !DILocation(line: 3237, column: 15, scope: !1338)
!4331 = !DILocation(line: 3239, column: 27, scope: !4332)
!4332 = distinct !DILexicalBlock(scope: !1338, file: !637, line: 3239, column: 9)
!4333 = !DILocation(line: 3239, column: 10, scope: !4332)
!4334 = !DILocation(line: 3239, column: 9, scope: !1338)
!4335 = !DILocation(line: 3240, column: 9, scope: !4332)
!4336 = !DILocation(line: 3246, column: 16, scope: !1338)
!4337 = !DILocation(line: 3246, column: 9, scope: !1338)
!4338 = !DILocation(line: 3247, column: 16, scope: !1338)
!4339 = !DILocation(line: 3247, column: 9, scope: !1338)
!4340 = !DILocation(line: 3249, column: 7, scope: !1349)
!4341 = !DILocation(line: 3249, column: 23, scope: !1349)
!4342 = !DILocation(line: 3249, column: 28, scope: !1349)
!4343 = !DILocation(line: 3249, column: 47, scope: !1349)
!4344 = !DILocation(line: 3249, column: 54, scope: !1349)
!4345 = !DILocation(line: 3249, column: 65, scope: !1349)
!4346 = !DILocation(line: 3249, column: 68, scope: !1349)
!4347 = !DILocation(line: 3249, column: 82, scope: !1349)
!4348 = !DILocation(line: 3249, column: 86, scope: !1349)
!4349 = !DILocation(line: 3249, column: 100, scope: !1349)
!4350 = !DILocation(line: 3249, column: 103, scope: !1349)
!4351 = !DILocation(line: 3249, column: 116, scope: !1349)
!4352 = !DILocation(line: 3249, column: 127, scope: !4353)
!4353 = distinct !DILexicalBlock(scope: !1349, file: !637, line: 3249, column: 127)
!4354 = !DILocation(line: 3249, column: 127, scope: !1349)
!4355 = !DILocation(line: 3249, column: 142, scope: !4356)
!4356 = !DILexicalBlockFile(scope: !4357, file: !637, discriminator: 1)
!4357 = distinct !DILexicalBlock(scope: !4353, file: !637, line: 3249, column: 140)
!4358 = !DILocation(line: 3249, column: 181, scope: !4357)
!4359 = !DILocation(line: 3249, column: 186, scope: !4357)
!4360 = !DILocation(line: 3249, column: 227, scope: !4361)
!4361 = !DILexicalBlockFile(scope: !4362, file: !637, discriminator: 3)
!4362 = distinct !DILexicalBlock(scope: !4357, file: !637, line: 3249, column: 189)
!4363 = !DILocation(line: 3249, column: 230, scope: !4362)
!4364 = !DILocation(line: 3249, column: 220, scope: !4362)
!4365 = !DILocation(line: 3249, column: 245, scope: !4362)
!4366 = !DILocation(line: 3249, column: 248, scope: !4362)
!4367 = !DILocation(line: 3249, column: 243, scope: !4362)
!4368 = !DILocation(line: 3249, column: 262, scope: !4362)
!4369 = !DILocation(line: 3249, column: 211, scope: !4362)
!4370 = !DILocation(line: 3249, column: 200, scope: !4362)
!4371 = !DILocation(line: 3249, column: 208, scope: !4362)
!4372 = !DILocation(line: 3249, column: 302, scope: !4362)
!4373 = !DILocation(line: 3249, column: 305, scope: !4362)
!4374 = !DILocation(line: 3249, column: 293, scope: !4362)
!4375 = !DILocation(line: 3249, column: 339, scope: !4362)
!4376 = !DILocation(line: 3249, column: 347, scope: !4362)
!4377 = !DILocation(line: 3249, column: 318, scope: !4362)
!4378 = !DILocation(line: 3249, column: 283, scope: !4362)
!4379 = !DILocation(line: 3249, column: 290, scope: !4362)
!4380 = !DILocation(line: 3249, column: 368, scope: !4362)
!4381 = !DILocation(line: 3249, column: 376, scope: !4362)
!4382 = !DILocation(line: 3249, column: 388, scope: !4362)
!4383 = !DILocation(line: 3249, column: 388, scope: !4384)
!4384 = !DILexicalBlockFile(scope: !4362, file: !637, discriminator: 4)
!4385 = !DILocation(line: 3249, column: 401, scope: !4386)
!4386 = !DILexicalBlockFile(scope: !4357, file: !637, discriminator: 5)
!4387 = !DILocation(line: 3249, column: 403, scope: !4388)
!4388 = !DILexicalBlockFile(scope: !4389, file: !637, discriminator: 6)
!4389 = !DILexicalBlockFile(scope: !1349, file: !637, discriminator: 2)
!4390 = !DILocation(line: 3249, column: 403, scope: !4391)
!4391 = !DILexicalBlockFile(scope: !4392, file: !637, discriminator: 9)
!4392 = !DILexicalBlockFile(scope: !1349, file: !637, discriminator: 7)
!4393 = !DILocation(line: 3249, column: 417, scope: !4394)
!4394 = !DILexicalBlockFile(scope: !1355, file: !637, discriminator: 8)
!4395 = !DILocation(line: 3249, column: 438, scope: !1355)
!4396 = !DILocation(line: 3250, column: 7, scope: !1354)
!4397 = !DILocation(line: 3250, column: 22, scope: !1354)
!4398 = !DILocation(line: 3250, column: 37, scope: !1354)
!4399 = !DILocation(line: 3250, column: 35, scope: !1354)
!4400 = !DILocation(line: 3251, column: 34, scope: !1354)
!4401 = !DILocation(line: 3251, column: 40, scope: !1354)
!4402 = !DILocation(line: 3251, column: 15, scope: !1354)
!4403 = !DILocation(line: 3251, column: 13, scope: !1354)
!4404 = !DILocation(line: 3252, column: 10, scope: !4405)
!4405 = distinct !DILexicalBlock(scope: !1354, file: !637, line: 3252, column: 9)
!4406 = !DILocation(line: 3252, column: 9, scope: !1354)
!4407 = !DILocation(line: 3258, column: 18, scope: !4408)
!4408 = distinct !DILexicalBlock(scope: !4405, file: !637, line: 3252, column: 19)
!4409 = !DILocation(line: 3258, column: 21, scope: !4408)
!4410 = !DILocation(line: 3258, column: 30, scope: !4408)
!4411 = !DILocation(line: 3258, column: 35, scope: !4408)
!4412 = !DILocation(line: 3258, column: 40, scope: !4408)
!4413 = !DILocation(line: 3258, column: 13, scope: !4408)
!4414 = !DILocation(line: 3258, column: 11, scope: !4408)
!4415 = !DILocation(line: 3260, column: 5, scope: !4408)
!4416 = !DILocation(line: 3261, column: 26, scope: !1354)
!4417 = !DILocation(line: 3261, column: 5, scope: !1354)
!4418 = !DILocation(line: 3261, column: 34, scope: !1355)
!4419 = !DILocation(line: 3262, column: 9, scope: !4420)
!4420 = distinct !DILexicalBlock(scope: !1355, file: !637, line: 3262, column: 9)
!4421 = !DILocation(line: 3262, column: 17, scope: !4420)
!4422 = !DILocation(line: 3262, column: 9, scope: !1355)
!4423 = !DILocation(line: 3263, column: 9, scope: !4424)
!4424 = distinct !DILexicalBlock(scope: !4420, file: !637, line: 3262, column: 23)
!4425 = !DILocation(line: 3264, column: 25, scope: !4424)
!4426 = !DILocation(line: 3264, column: 9, scope: !4424)
!4427 = !DILocation(line: 3265, column: 9, scope: !4424)
!4428 = !DILocation(line: 3267, column: 10, scope: !4429)
!4429 = distinct !DILexicalBlock(scope: !1355, file: !637, line: 3267, column: 9)
!4430 = !DILocation(line: 3267, column: 22, scope: !4429)
!4431 = !DILocation(line: 3267, column: 30, scope: !4432)
!4432 = !DILexicalBlockFile(scope: !4429, file: !637, discriminator: 1)
!4433 = !DILocation(line: 3267, column: 29, scope: !4429)
!4434 = !DILocation(line: 3267, column: 51, scope: !4429)
!4435 = !DILocation(line: 3267, column: 58, scope: !4429)
!4436 = !DILocation(line: 3267, column: 65, scope: !4437)
!4437 = !DILexicalBlockFile(scope: !4429, file: !637, discriminator: 4)
!4438 = !DILocation(line: 3267, column: 64, scope: !4429)
!4439 = !DILocation(line: 3267, column: 86, scope: !4429)
!4440 = !DILocation(line: 3267, column: 9, scope: !1355)
!4441 = !DILocation(line: 3267, column: 95, scope: !4442)
!4442 = !DILexicalBlockFile(scope: !4443, file: !637, discriminator: 6)
!4443 = !DILexicalBlockFile(scope: !4429, file: !637, discriminator: 2)
!4444 = !DILocation(line: 3267, column: 102, scope: !4445)
!4445 = !DILexicalBlockFile(scope: !4446, file: !637, discriminator: 5)
!4446 = !DILexicalBlockFile(scope: !1355, file: !637, discriminator: 3)
!4447 = !DILocation(line: 3267, column: 152, scope: !1355)
!4448 = !DILocation(line: 3267, column: 165, scope: !1355)
!4449 = !DILocation(line: 3267, column: 159, scope: !1355)
!4450 = !DILocation(line: 3267, column: 142, scope: !1355)
!4451 = !DILocation(line: 3267, column: 185, scope: !1355)
!4452 = !DILocation(line: 3267, column: 199, scope: !1355)
!4453 = !DILocation(line: 3267, column: 193, scope: !1355)
!4454 = !DILocation(line: 3267, column: 175, scope: !1355)
!4455 = !DILocation(line: 3267, column: 208, scope: !1355)
!4456 = !DILocation(line: 3267, column: 173, scope: !1355)
!4457 = !DILocation(line: 3267, column: 139, scope: !1355)
!4458 = !DILocation(line: 3249, column: 403, scope: !1349)
!4459 = !DILocation(line: 3267, column: 223, scope: !4460)
!4460 = !DILexicalBlockFile(scope: !1338, file: !637, discriminator: 7)
!4461 = !DILocation(line: 3267, column: 223, scope: !4462)
!4462 = !DILexicalBlockFile(scope: !1338, file: !637, discriminator: 8)
!4463 = !DILocation(line: 3269, column: 5, scope: !1338)
!4464 = !DILocation(line: 3270, column: 9, scope: !4465)
!4465 = distinct !DILexicalBlock(scope: !1338, file: !637, line: 3270, column: 9)
!4466 = !DILocation(line: 3270, column: 11, scope: !4465)
!4467 = !DILocation(line: 3270, column: 9, scope: !1338)
!4468 = !DILocation(line: 3271, column: 16, scope: !4465)
!4469 = !DILocation(line: 3271, column: 19, scope: !4465)
!4470 = !DILocation(line: 3271, column: 9, scope: !4465)
!4471 = !DILocation(line: 3272, column: 31, scope: !1338)
!4472 = !DILocation(line: 3272, column: 12, scope: !1338)
!4473 = !DILocation(line: 3272, column: 5, scope: !1338)
!4474 = !DILocation(line: 3273, column: 1, scope: !1338)
!4475 = !DILocation(line: 3286, column: 34, scope: !1356)
!4476 = !DILocation(line: 3286, column: 47, scope: !1356)
!4477 = !DILocation(line: 3288, column: 5, scope: !1356)
!4478 = !DILocation(line: 3288, column: 11, scope: !1356)
!4479 = !DILocation(line: 3289, column: 5, scope: !1356)
!4480 = !DILocation(line: 3289, column: 16, scope: !1356)
!4481 = !DILocation(line: 3289, column: 21, scope: !1356)
!4482 = !DILocation(line: 3290, column: 5, scope: !1356)
!4483 = !DILocation(line: 3290, column: 9, scope: !1356)
!4484 = !DILocation(line: 3290, column: 20, scope: !1356)
!4485 = !DILocation(line: 3290, column: 29, scope: !1356)
!4486 = !DILocation(line: 3291, column: 5, scope: !1356)
!4487 = !DILocation(line: 3291, column: 15, scope: !1356)
!4488 = !DILocation(line: 3293, column: 27, scope: !4489)
!4489 = distinct !DILexicalBlock(scope: !1356, file: !637, line: 3293, column: 9)
!4490 = !DILocation(line: 3293, column: 10, scope: !4489)
!4491 = !DILocation(line: 3293, column: 9, scope: !1356)
!4492 = !DILocation(line: 3294, column: 9, scope: !4489)
!4493 = !DILocation(line: 3295, column: 16, scope: !1356)
!4494 = !DILocation(line: 3295, column: 9, scope: !1356)
!4495 = !DILocation(line: 3296, column: 16, scope: !1356)
!4496 = !DILocation(line: 3296, column: 9, scope: !1356)
!4497 = !DILocation(line: 3303, column: 5, scope: !1356)
!4498 = !DILocation(line: 3304, column: 11, scope: !1368)
!4499 = !DILocation(line: 3304, column: 26, scope: !1368)
!4500 = !DILocation(line: 3304, column: 41, scope: !1368)
!4501 = !DILocation(line: 3304, column: 39, scope: !1368)
!4502 = !DILocation(line: 3305, column: 35, scope: !1368)
!4503 = !DILocation(line: 3305, column: 19, scope: !1368)
!4504 = !DILocation(line: 3305, column: 17, scope: !1368)
!4505 = !DILocation(line: 3306, column: 11, scope: !1368)
!4506 = !DILocation(line: 3307, column: 14, scope: !4507)
!4507 = distinct !DILexicalBlock(scope: !1368, file: !637, line: 3307, column: 13)
!4508 = !DILocation(line: 3307, column: 13, scope: !1368)
!4509 = !DILocation(line: 3313, column: 22, scope: !4510)
!4510 = distinct !DILexicalBlock(scope: !4507, file: !637, line: 3307, column: 23)
!4511 = !DILocation(line: 3313, column: 25, scope: !4510)
!4512 = !DILocation(line: 3313, column: 34, scope: !4510)
!4513 = !DILocation(line: 3313, column: 39, scope: !4510)
!4514 = !DILocation(line: 3313, column: 44, scope: !4510)
!4515 = !DILocation(line: 3313, column: 17, scope: !4510)
!4516 = !DILocation(line: 3313, column: 15, scope: !4510)
!4517 = !DILocation(line: 3315, column: 9, scope: !4510)
!4518 = !DILocation(line: 3316, column: 30, scope: !1368)
!4519 = !DILocation(line: 3316, column: 9, scope: !1368)
!4520 = !DILocation(line: 3316, column: 38, scope: !1369)
!4521 = !DILocation(line: 3317, column: 13, scope: !4522)
!4522 = distinct !DILexicalBlock(scope: !1369, file: !637, line: 3317, column: 13)
!4523 = !DILocation(line: 3317, column: 21, scope: !4522)
!4524 = !DILocation(line: 3317, column: 13, scope: !1369)
!4525 = !DILocation(line: 3318, column: 13, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4522, file: !637, line: 3317, column: 27)
!4527 = !DILocation(line: 3319, column: 29, scope: !4526)
!4528 = !DILocation(line: 3319, column: 13, scope: !4526)
!4529 = !DILocation(line: 3320, column: 13, scope: !4526)
!4530 = !DILocation(line: 3323, column: 25, scope: !1369)
!4531 = !DILocation(line: 3323, column: 24, scope: !1369)
!4532 = !DILocation(line: 3323, column: 21, scope: !1369)
!4533 = !DILocation(line: 3327, column: 13, scope: !4534)
!4534 = distinct !DILexicalBlock(scope: !1369, file: !637, line: 3327, column: 13)
!4535 = !DILocation(line: 3327, column: 13, scope: !1369)
!4536 = !DILocation(line: 3328, column: 13, scope: !4537)
!4537 = distinct !DILexicalBlock(scope: !4534, file: !637, line: 3327, column: 35)
!4538 = !DILocation(line: 3329, column: 13, scope: !4537)
!4539 = !DILocation(line: 3331, column: 13, scope: !4540)
!4540 = distinct !DILexicalBlock(scope: !1369, file: !637, line: 3331, column: 13)
!4541 = !DILocation(line: 3331, column: 15, scope: !4540)
!4542 = !DILocation(line: 3331, column: 13, scope: !1369)
!4543 = !DILocation(line: 3333, column: 17, scope: !4544)
!4544 = distinct !DILexicalBlock(scope: !4545, file: !637, line: 3333, column: 17)
!4545 = distinct !DILexicalBlock(scope: !4540, file: !637, line: 3331, column: 20)
!4546 = !DILocation(line: 3333, column: 29, scope: !4544)
!4547 = !DILocation(line: 3333, column: 17, scope: !4545)
!4548 = !DILocation(line: 3334, column: 17, scope: !4544)
!4549 = !DILocation(line: 3336, column: 17, scope: !4544)
!4550 = !DILocation(line: 3338, column: 16, scope: !1369)
!4551 = !DILocation(line: 3338, column: 13, scope: !1369)
!4552 = !DILocation(line: 3339, column: 16, scope: !1369)
!4553 = !DILocation(line: 3339, column: 13, scope: !1369)
!4554 = !DILocation(line: 3340, column: 5, scope: !1369)
!4555 = !DILocation(line: 3340, column: 14, scope: !4556)
!4556 = !DILexicalBlockFile(scope: !1356, file: !637, discriminator: 1)
!4557 = !DILocation(line: 3340, column: 18, scope: !1356)
!4558 = !DILocation(line: 3341, column: 5, scope: !1356)
!4559 = !DILocation(line: 3343, column: 9, scope: !4560)
!4560 = distinct !DILexicalBlock(scope: !1356, file: !637, line: 3343, column: 9)
!4561 = !DILocation(line: 3343, column: 11, scope: !4560)
!4562 = !DILocation(line: 3343, column: 9, scope: !1356)
!4563 = !DILocation(line: 3344, column: 16, scope: !4560)
!4564 = !DILocation(line: 3344, column: 19, scope: !4560)
!4565 = !DILocation(line: 3344, column: 9, scope: !4560)
!4566 = !DILocation(line: 3346, column: 51, scope: !1356)
!4567 = !DILocation(line: 3347, column: 5, scope: !1356)
!4568 = !DILocation(line: 3348, column: 1, scope: !1356)
!4569 = !DILocation(line: 3362, column: 33, scope: !1370)
!4570 = !DILocation(line: 3362, column: 46, scope: !1370)
!4571 = !DILocation(line: 3364, column: 5, scope: !1370)
!4572 = !DILocation(line: 3364, column: 15, scope: !1370)
!4573 = !DILocation(line: 3365, column: 5, scope: !1370)
!4574 = !DILocation(line: 3365, column: 15, scope: !1370)
!4575 = !DILocation(line: 3366, column: 5, scope: !1370)
!4576 = !DILocation(line: 3366, column: 11, scope: !1370)
!4577 = !DILocation(line: 3367, column: 5, scope: !1370)
!4578 = !DILocation(line: 3367, column: 16, scope: !1370)
!4579 = !DILocation(line: 3367, column: 21, scope: !1370)
!4580 = !DILocation(line: 3368, column: 5, scope: !1370)
!4581 = !DILocation(line: 3368, column: 17, scope: !1370)
!4582 = !DILocation(line: 3369, column: 5, scope: !1370)
!4583 = !DILocation(line: 3369, column: 9, scope: !1370)
!4584 = !DILocation(line: 3369, column: 18, scope: !1370)
!4585 = !DILocation(line: 3369, column: 26, scope: !1370)
!4586 = !DILocation(line: 3369, column: 33, scope: !1370)
!4587 = !DILocation(line: 3371, column: 11, scope: !1370)
!4588 = !DILocation(line: 3372, column: 27, scope: !1370)
!4589 = !DILocation(line: 3372, column: 14, scope: !1370)
!4590 = !DILocation(line: 3372, column: 12, scope: !1370)
!4591 = !DILocation(line: 3373, column: 13, scope: !1370)
!4592 = !DILocation(line: 3375, column: 30, scope: !4593)
!4593 = distinct !DILexicalBlock(scope: !1370, file: !637, line: 3373, column: 21)
!4594 = !DILocation(line: 3375, column: 13, scope: !4593)
!4595 = !DILocation(line: 3376, column: 13, scope: !4593)
!4596 = !DILocation(line: 3378, column: 30, scope: !4593)
!4597 = !DILocation(line: 3378, column: 13, scope: !4593)
!4598 = !DILocation(line: 3380, column: 13, scope: !4593)
!4599 = !DILocation(line: 3382, column: 26, scope: !4593)
!4600 = !DILocation(line: 3384, column: 26, scope: !4593)
!4601 = !DILocation(line: 3382, column: 13, scope: !4593)
!4602 = !DILocation(line: 3385, column: 13, scope: !4593)
!4603 = !DILocation(line: 3387, column: 9, scope: !4604)
!4604 = distinct !DILexicalBlock(scope: !1370, file: !637, line: 3387, column: 9)
!4605 = !DILocation(line: 3387, column: 9, scope: !1370)
!4606 = !DILocation(line: 3388, column: 9, scope: !4604)
!4607 = !DILocation(line: 3390, column: 16, scope: !1370)
!4608 = !DILocation(line: 3390, column: 9, scope: !1370)
!4609 = !DILocation(line: 3391, column: 16, scope: !1370)
!4610 = !DILocation(line: 3391, column: 9, scope: !1370)
!4611 = !DILocation(line: 3398, column: 25, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !1370, file: !637, line: 3398, column: 9)
!4613 = !DILocation(line: 3398, column: 28, scope: !4612)
!4614 = !DILocation(line: 3398, column: 50, scope: !4612)
!4615 = !DILocation(line: 3398, column: 10, scope: !4612)
!4616 = !DILocation(line: 3398, column: 9, scope: !1370)
!4617 = !DILocation(line: 3399, column: 9, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4612, file: !637, line: 3398, column: 67)
!4619 = !DILocation(line: 3400, column: 9, scope: !4618)
!4620 = !DILocation(line: 3403, column: 7, scope: !1385)
!4621 = !DILocation(line: 3403, column: 23, scope: !1385)
!4622 = !DILocation(line: 3403, column: 28, scope: !1385)
!4623 = !DILocation(line: 3403, column: 47, scope: !1385)
!4624 = !DILocation(line: 3403, column: 54, scope: !1385)
!4625 = !DILocation(line: 3403, column: 65, scope: !1385)
!4626 = !DILocation(line: 3403, column: 68, scope: !1385)
!4627 = !DILocation(line: 3403, column: 82, scope: !1385)
!4628 = !DILocation(line: 3403, column: 86, scope: !1385)
!4629 = !DILocation(line: 3403, column: 100, scope: !1385)
!4630 = !DILocation(line: 3403, column: 103, scope: !1385)
!4631 = !DILocation(line: 3403, column: 116, scope: !1385)
!4632 = !DILocation(line: 3403, column: 127, scope: !4633)
!4633 = distinct !DILexicalBlock(scope: !1385, file: !637, line: 3403, column: 127)
!4634 = !DILocation(line: 3403, column: 127, scope: !1385)
!4635 = !DILocation(line: 3403, column: 142, scope: !4636)
!4636 = !DILexicalBlockFile(scope: !4637, file: !637, discriminator: 1)
!4637 = distinct !DILexicalBlock(scope: !4633, file: !637, line: 3403, column: 140)
!4638 = !DILocation(line: 3403, column: 181, scope: !4637)
!4639 = !DILocation(line: 3403, column: 186, scope: !4637)
!4640 = !DILocation(line: 3403, column: 227, scope: !4641)
!4641 = !DILexicalBlockFile(scope: !4642, file: !637, discriminator: 3)
!4642 = distinct !DILexicalBlock(scope: !4637, file: !637, line: 3403, column: 189)
!4643 = !DILocation(line: 3403, column: 230, scope: !4642)
!4644 = !DILocation(line: 3403, column: 220, scope: !4642)
!4645 = !DILocation(line: 3403, column: 245, scope: !4642)
!4646 = !DILocation(line: 3403, column: 248, scope: !4642)
!4647 = !DILocation(line: 3403, column: 243, scope: !4642)
!4648 = !DILocation(line: 3403, column: 262, scope: !4642)
!4649 = !DILocation(line: 3403, column: 211, scope: !4642)
!4650 = !DILocation(line: 3403, column: 200, scope: !4642)
!4651 = !DILocation(line: 3403, column: 208, scope: !4642)
!4652 = !DILocation(line: 3403, column: 302, scope: !4642)
!4653 = !DILocation(line: 3403, column: 305, scope: !4642)
!4654 = !DILocation(line: 3403, column: 293, scope: !4642)
!4655 = !DILocation(line: 3403, column: 339, scope: !4642)
!4656 = !DILocation(line: 3403, column: 347, scope: !4642)
!4657 = !DILocation(line: 3403, column: 318, scope: !4642)
!4658 = !DILocation(line: 3403, column: 283, scope: !4642)
!4659 = !DILocation(line: 3403, column: 290, scope: !4642)
!4660 = !DILocation(line: 3403, column: 368, scope: !4642)
!4661 = !DILocation(line: 3403, column: 376, scope: !4642)
!4662 = !DILocation(line: 3403, column: 388, scope: !4642)
!4663 = !DILocation(line: 3403, column: 388, scope: !4664)
!4664 = !DILexicalBlockFile(scope: !4642, file: !637, discriminator: 4)
!4665 = !DILocation(line: 3403, column: 401, scope: !4666)
!4666 = !DILexicalBlockFile(scope: !4637, file: !637, discriminator: 5)
!4667 = !DILocation(line: 3403, column: 403, scope: !4668)
!4668 = !DILexicalBlockFile(scope: !4669, file: !637, discriminator: 6)
!4669 = !DILexicalBlockFile(scope: !1385, file: !637, discriminator: 2)
!4670 = !DILocation(line: 3403, column: 403, scope: !4671)
!4671 = !DILexicalBlockFile(scope: !4672, file: !637, discriminator: 9)
!4672 = !DILexicalBlockFile(scope: !1385, file: !637, discriminator: 7)
!4673 = !DILocation(line: 3403, column: 417, scope: !4674)
!4674 = !DILexicalBlockFile(scope: !1391, file: !637, discriminator: 8)
!4675 = !DILocation(line: 3403, column: 438, scope: !1391)
!4676 = !DILocation(line: 3404, column: 7, scope: !1390)
!4677 = !DILocation(line: 3404, column: 22, scope: !1390)
!4678 = !DILocation(line: 3404, column: 37, scope: !1390)
!4679 = !DILocation(line: 3404, column: 35, scope: !1390)
!4680 = !DILocation(line: 3405, column: 34, scope: !1390)
!4681 = !DILocation(line: 3405, column: 40, scope: !1390)
!4682 = !DILocation(line: 3405, column: 15, scope: !1390)
!4683 = !DILocation(line: 3405, column: 13, scope: !1390)
!4684 = !DILocation(line: 3406, column: 10, scope: !4685)
!4685 = distinct !DILexicalBlock(scope: !1390, file: !637, line: 3406, column: 9)
!4686 = !DILocation(line: 3406, column: 9, scope: !1390)
!4687 = !DILocation(line: 3413, column: 20, scope: !4688)
!4688 = distinct !DILexicalBlock(scope: !4685, file: !637, line: 3406, column: 19)
!4689 = !DILocation(line: 3413, column: 23, scope: !4688)
!4690 = !DILocation(line: 3413, column: 32, scope: !4688)
!4691 = !DILocation(line: 3413, column: 37, scope: !4688)
!4692 = !DILocation(line: 3413, column: 42, scope: !4688)
!4693 = !DILocation(line: 3414, column: 20, scope: !4688)
!4694 = !DILocation(line: 3414, column: 35, scope: !4688)
!4695 = !DILocation(line: 3414, column: 41, scope: !4688)
!4696 = !DILocation(line: 3413, column: 13, scope: !4688)
!4697 = !DILocation(line: 3413, column: 11, scope: !4688)
!4698 = !DILocation(line: 3416, column: 5, scope: !4688)
!4699 = !DILocation(line: 3417, column: 26, scope: !1390)
!4700 = !DILocation(line: 3417, column: 5, scope: !1390)
!4701 = !DILocation(line: 3417, column: 34, scope: !1391)
!4702 = !DILocation(line: 3419, column: 9, scope: !4703)
!4703 = distinct !DILexicalBlock(scope: !1391, file: !637, line: 3419, column: 9)
!4704 = !DILocation(line: 3419, column: 17, scope: !4703)
!4705 = !DILocation(line: 3419, column: 9, scope: !1391)
!4706 = !DILocation(line: 3420, column: 9, scope: !4707)
!4707 = distinct !DILexicalBlock(scope: !4703, file: !637, line: 3419, column: 23)
!4708 = !DILocation(line: 3421, column: 25, scope: !4707)
!4709 = !DILocation(line: 3421, column: 9, scope: !4707)
!4710 = !DILocation(line: 3422, column: 9, scope: !4707)
!4711 = !DILocation(line: 3424, column: 10, scope: !4712)
!4712 = distinct !DILexicalBlock(scope: !1391, file: !637, line: 3424, column: 9)
!4713 = !DILocation(line: 3424, column: 22, scope: !4712)
!4714 = !DILocation(line: 3424, column: 30, scope: !4715)
!4715 = !DILexicalBlockFile(scope: !4712, file: !637, discriminator: 1)
!4716 = !DILocation(line: 3424, column: 29, scope: !4712)
!4717 = !DILocation(line: 3424, column: 51, scope: !4712)
!4718 = !DILocation(line: 3424, column: 58, scope: !4712)
!4719 = !DILocation(line: 3424, column: 65, scope: !4720)
!4720 = !DILexicalBlockFile(scope: !4712, file: !637, discriminator: 4)
!4721 = !DILocation(line: 3424, column: 64, scope: !4712)
!4722 = !DILocation(line: 3424, column: 86, scope: !4712)
!4723 = !DILocation(line: 3424, column: 9, scope: !1391)
!4724 = !DILocation(line: 3424, column: 95, scope: !4725)
!4725 = !DILexicalBlockFile(scope: !4726, file: !637, discriminator: 6)
!4726 = !DILexicalBlockFile(scope: !4712, file: !637, discriminator: 2)
!4727 = !DILocation(line: 3424, column: 102, scope: !4728)
!4728 = !DILexicalBlockFile(scope: !4729, file: !637, discriminator: 5)
!4729 = !DILexicalBlockFile(scope: !1391, file: !637, discriminator: 3)
!4730 = !DILocation(line: 3424, column: 152, scope: !1391)
!4731 = !DILocation(line: 3424, column: 165, scope: !1391)
!4732 = !DILocation(line: 3424, column: 159, scope: !1391)
!4733 = !DILocation(line: 3424, column: 142, scope: !1391)
!4734 = !DILocation(line: 3424, column: 185, scope: !1391)
!4735 = !DILocation(line: 3424, column: 199, scope: !1391)
!4736 = !DILocation(line: 3424, column: 193, scope: !1391)
!4737 = !DILocation(line: 3424, column: 175, scope: !1391)
!4738 = !DILocation(line: 3424, column: 208, scope: !1391)
!4739 = !DILocation(line: 3424, column: 173, scope: !1391)
!4740 = !DILocation(line: 3424, column: 139, scope: !1391)
!4741 = !DILocation(line: 3403, column: 403, scope: !1385)
!4742 = !DILocation(line: 3424, column: 223, scope: !4743)
!4743 = !DILexicalBlockFile(scope: !1370, file: !637, discriminator: 7)
!4744 = !DILocation(line: 3424, column: 223, scope: !4745)
!4745 = !DILexicalBlockFile(scope: !1370, file: !637, discriminator: 8)
!4746 = !DILocation(line: 3425, column: 5, scope: !1370)
!4747 = !DILocation(line: 3426, column: 9, scope: !4748)
!4748 = distinct !DILexicalBlock(scope: !1370, file: !637, line: 3426, column: 9)
!4749 = !DILocation(line: 3426, column: 11, scope: !4748)
!4750 = !DILocation(line: 3426, column: 9, scope: !1370)
!4751 = !DILocation(line: 3427, column: 16, scope: !4748)
!4752 = !DILocation(line: 3427, column: 19, scope: !4748)
!4753 = !DILocation(line: 3427, column: 9, scope: !4748)
!4754 = !DILocation(line: 3428, column: 31, scope: !1370)
!4755 = !DILocation(line: 3428, column: 12, scope: !1370)
!4756 = !DILocation(line: 3428, column: 5, scope: !1370)
!4757 = !DILocation(line: 3429, column: 1, scope: !1370)
!4758 = !DILocation(line: 2064, column: 38, scope: !1392)
!4759 = !DILocation(line: 2064, column: 51, scope: !1392)
!4760 = !DILocation(line: 2066, column: 5, scope: !1392)
!4761 = !DILocation(line: 2066, column: 10, scope: !1392)
!4762 = !DILocation(line: 2068, column: 27, scope: !1392)
!4763 = !DILocation(line: 2068, column: 13, scope: !1392)
!4764 = !DILocation(line: 2068, column: 11, scope: !1392)
!4765 = !DILocation(line: 2069, column: 9, scope: !4766)
!4766 = distinct !DILexicalBlock(scope: !1392, file: !637, line: 2069, column: 9)
!4767 = !DILocation(line: 2069, column: 15, scope: !4766)
!4768 = !DILocation(line: 2069, column: 21, scope: !4766)
!4769 = !DILocation(line: 2069, column: 24, scope: !4770)
!4770 = !DILexicalBlockFile(scope: !4766, file: !637, discriminator: 1)
!4771 = !DILocation(line: 2069, column: 9, scope: !1392)
!4772 = !DILocation(line: 2070, column: 9, scope: !4766)
!4773 = !DILocation(line: 2072, column: 23, scope: !1392)
!4774 = !DILocation(line: 2072, column: 5, scope: !1392)
!4775 = !DILocation(line: 2072, column: 8, scope: !1392)
!4776 = !DILocation(line: 2072, column: 21, scope: !1392)
!4777 = !DILocation(line: 2073, column: 26, scope: !1392)
!4778 = !DILocation(line: 2073, column: 29, scope: !1392)
!4779 = !DILocation(line: 2073, column: 5, scope: !1392)
!4780 = !DILocation(line: 2075, column: 51, scope: !1392)
!4781 = !DILocation(line: 2076, column: 5, scope: !1392)
!4782 = !DILocation(line: 2077, column: 1, scope: !1392)
!4783 = !DILocation(line: 2093, column: 37, scope: !1403)
!4784 = !DILocation(line: 2093, column: 50, scope: !1403)
!4785 = !DILocation(line: 2095, column: 5, scope: !1403)
!4786 = !DILocation(line: 2095, column: 12, scope: !1403)
!4787 = !DILocation(line: 2097, column: 9, scope: !4788)
!4788 = distinct !DILexicalBlock(scope: !1403, file: !637, line: 2097, column: 9)
!4789 = !DILocation(line: 2097, column: 13, scope: !4788)
!4790 = !DILocation(line: 2097, column: 9, scope: !1403)
!4791 = !DILocation(line: 2098, column: 17, scope: !4788)
!4792 = !DILocation(line: 2098, column: 9, scope: !4788)
!4793 = !DILocation(line: 2100, column: 36, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4788, file: !637, line: 2099, column: 10)
!4795 = !DILocation(line: 2100, column: 19, scope: !4794)
!4796 = !DILocation(line: 2100, column: 17, scope: !4794)
!4797 = !DILocation(line: 2101, column: 13, scope: !4798)
!4798 = distinct !DILexicalBlock(scope: !4794, file: !637, line: 2101, column: 13)
!4799 = !DILocation(line: 2101, column: 21, scope: !4798)
!4800 = !DILocation(line: 2101, column: 13, scope: !4794)
!4801 = !DILocation(line: 2102, column: 18, scope: !4802)
!4802 = distinct !DILexicalBlock(scope: !4803, file: !637, line: 2102, column: 17)
!4803 = distinct !DILexicalBlock(scope: !4798, file: !637, line: 2101, column: 28)
!4804 = !DILocation(line: 2102, column: 17, scope: !4803)
!4805 = !DILocation(line: 2103, column: 33, scope: !4802)
!4806 = !DILocation(line: 2103, column: 17, scope: !4802)
!4807 = !DILocation(line: 2105, column: 13, scope: !4803)
!4808 = !DILocation(line: 2109, column: 23, scope: !1403)
!4809 = !DILocation(line: 2109, column: 5, scope: !1403)
!4810 = !DILocation(line: 2109, column: 8, scope: !1403)
!4811 = !DILocation(line: 2109, column: 21, scope: !1403)
!4812 = !DILocation(line: 2110, column: 26, scope: !1403)
!4813 = !DILocation(line: 2110, column: 29, scope: !1403)
!4814 = !DILocation(line: 2110, column: 37, scope: !1403)
!4815 = !DILocation(line: 2110, column: 5, scope: !1403)
!4816 = !DILocation(line: 2112, column: 51, scope: !1403)
!4817 = !DILocation(line: 2113, column: 5, scope: !1403)
!4818 = !DILocation(line: 2114, column: 1, scope: !1403)
!4819 = !DILocation(line: 2127, column: 37, scope: !1408)
!4820 = !DILocation(line: 2129, column: 9, scope: !4821)
!4821 = distinct !DILexicalBlock(scope: !1408, file: !637, line: 2129, column: 9)
!4822 = !DILocation(line: 2129, column: 12, scope: !4821)
!4823 = !DILocation(line: 2129, column: 25, scope: !4821)
!4824 = !DILocation(line: 2129, column: 9, scope: !1408)
!4825 = !DILocation(line: 2130, column: 55, scope: !4826)
!4826 = distinct !DILexicalBlock(scope: !4821, file: !637, line: 2129, column: 32)
!4827 = !DILocation(line: 2131, column: 9, scope: !4826)
!4828 = !DILocation(line: 2134, column: 35, scope: !4821)
!4829 = !DILocation(line: 2134, column: 38, scope: !4821)
!4830 = !DILocation(line: 2134, column: 16, scope: !4821)
!4831 = !DILocation(line: 2134, column: 9, scope: !4821)
!4832 = !DILocation(line: 2135, column: 1, scope: !1408)
!4833 = !DILocation(line: 2150, column: 37, scope: !1411)
!4834 = !DILocation(line: 2150, column: 50, scope: !1411)
!4835 = !DILocation(line: 2152, column: 5, scope: !1411)
!4836 = !DILocation(line: 2152, column: 9, scope: !1411)
!4837 = !DILocation(line: 2153, column: 5, scope: !1411)
!4838 = !DILocation(line: 2153, column: 9, scope: !1411)
!4839 = !DILocation(line: 2154, column: 5, scope: !1411)
!4840 = !DILocation(line: 2154, column: 9, scope: !1411)
!4841 = !DILocation(line: 2155, column: 5, scope: !1411)
!4842 = !DILocation(line: 2155, column: 11, scope: !1411)
!4843 = !DILocation(line: 2156, column: 5, scope: !1411)
!4844 = !DILocation(line: 2156, column: 9, scope: !1411)
!4845 = !DILocation(line: 2157, column: 5, scope: !1411)
!4846 = !DILocation(line: 2157, column: 9, scope: !1411)
!4847 = !DILocation(line: 2159, column: 26, scope: !4848)
!4848 = distinct !DILexicalBlock(scope: !1411, file: !637, line: 2159, column: 9)
!4849 = !DILocation(line: 2159, column: 9, scope: !4848)
!4850 = !DILocation(line: 2159, column: 9, scope: !1411)
!4851 = !DILocation(line: 2161, column: 15, scope: !4852)
!4852 = distinct !DILexicalBlock(scope: !4848, file: !637, line: 2160, column: 52)
!4853 = !DILocation(line: 2161, column: 13, scope: !4852)
!4854 = !DILocation(line: 2162, column: 16, scope: !4852)
!4855 = !DILocation(line: 2163, column: 5, scope: !4852)
!4856 = !DILocation(line: 2165, column: 9, scope: !4857)
!4857 = distinct !DILexicalBlock(scope: !4848, file: !637, line: 2164, column: 10)
!4858 = !DILocation(line: 2166, column: 31, scope: !4859)
!4859 = distinct !DILexicalBlock(scope: !4857, file: !637, line: 2166, column: 13)
!4860 = !DILocation(line: 2166, column: 14, scope: !4859)
!4861 = !DILocation(line: 2166, column: 13, scope: !4857)
!4862 = !DILocation(line: 2168, column: 13, scope: !4859)
!4863 = !DILocation(line: 2170, column: 22, scope: !1411)
!4864 = !DILocation(line: 2170, column: 25, scope: !1411)
!4865 = !DILocation(line: 2170, column: 34, scope: !1411)
!4866 = !DILocation(line: 2170, column: 41, scope: !1411)
!4867 = !DILocation(line: 2170, column: 58, scope: !1411)
!4868 = !DILocation(line: 2170, column: 63, scope: !1411)
!4869 = !DILocation(line: 2170, column: 11, scope: !1411)
!4870 = !DILocation(line: 2170, column: 9, scope: !1411)
!4871 = !DILocation(line: 2171, column: 9, scope: !4872)
!4872 = distinct !DILexicalBlock(scope: !1411, file: !637, line: 2171, column: 9)
!4873 = !DILocation(line: 2171, column: 13, scope: !4872)
!4874 = !DILocation(line: 2171, column: 9, scope: !1411)
!4875 = !DILocation(line: 2172, column: 16, scope: !4872)
!4876 = !DILocation(line: 2172, column: 19, scope: !4872)
!4877 = !DILocation(line: 2172, column: 9, scope: !4872)
!4878 = !DILocation(line: 2173, column: 51, scope: !1411)
!4879 = !DILocation(line: 2174, column: 5, scope: !1411)
!4880 = !DILocation(line: 2175, column: 1, scope: !1411)
!4881 = !DILocation(line: 3669, column: 35, scope: !1421)
!4882 = !DILocation(line: 3669, column: 48, scope: !1421)
!4883 = !DILocation(line: 3671, column: 5, scope: !1421)
!4884 = !DILocation(line: 3671, column: 9, scope: !1421)
!4885 = !DILocation(line: 3672, column: 5, scope: !1421)
!4886 = !DILocation(line: 3672, column: 9, scope: !1421)
!4887 = !DILocation(line: 3674, column: 25, scope: !1421)
!4888 = !DILocation(line: 3674, column: 11, scope: !1421)
!4889 = !DILocation(line: 3674, column: 9, scope: !1421)
!4890 = !DILocation(line: 3675, column: 9, scope: !4891)
!4891 = distinct !DILexicalBlock(scope: !1421, file: !637, line: 3675, column: 9)
!4892 = !DILocation(line: 3675, column: 13, scope: !4891)
!4893 = !DILocation(line: 3675, column: 19, scope: !4891)
!4894 = !DILocation(line: 3675, column: 22, scope: !4895)
!4895 = !DILexicalBlockFile(scope: !4891, file: !637, discriminator: 1)
!4896 = !DILocation(line: 3675, column: 9, scope: !1421)
!4897 = !DILocation(line: 3676, column: 9, scope: !4891)
!4898 = !DILocation(line: 3677, column: 7, scope: !1428)
!4899 = !DILocation(line: 3677, column: 22, scope: !1428)
!4900 = !DILocation(line: 3677, column: 37, scope: !1428)
!4901 = !DILocation(line: 3677, column: 35, scope: !1428)
!4902 = !DILocation(line: 3678, column: 20, scope: !1428)
!4903 = !DILocation(line: 3678, column: 23, scope: !1428)
!4904 = !DILocation(line: 3678, column: 32, scope: !1428)
!4905 = !DILocation(line: 3678, column: 11, scope: !1428)
!4906 = !DILocation(line: 3678, column: 9, scope: !1428)
!4907 = !DILocation(line: 3679, column: 26, scope: !1428)
!4908 = !DILocation(line: 3679, column: 5, scope: !1428)
!4909 = !DILocation(line: 3679, column: 34, scope: !1421)
!4910 = !DILocation(line: 3680, column: 9, scope: !4911)
!4911 = distinct !DILexicalBlock(scope: !1421, file: !637, line: 3680, column: 9)
!4912 = !DILocation(line: 3680, column: 13, scope: !4911)
!4913 = !DILocation(line: 3680, column: 9, scope: !1421)
!4914 = !DILocation(line: 3681, column: 16, scope: !4911)
!4915 = !DILocation(line: 3681, column: 19, scope: !4911)
!4916 = !DILocation(line: 3681, column: 9, scope: !4911)
!4917 = !DILocation(line: 3682, column: 51, scope: !1421)
!4918 = !DILocation(line: 3683, column: 5, scope: !1421)
!4919 = !DILocation(line: 3684, column: 1, scope: !1421)
!4920 = !DILocation(line: 3076, column: 34, scope: !1429)
!4921 = !DILocation(line: 3076, column: 47, scope: !1429)
!4922 = !DILocation(line: 3078, column: 5, scope: !1429)
!4923 = !DILocation(line: 3078, column: 16, scope: !1429)
!4924 = !DILocation(line: 3078, column: 25, scope: !1429)
!4925 = !DILocation(line: 3079, column: 5, scope: !1429)
!4926 = !DILocation(line: 3079, column: 9, scope: !1429)
!4927 = !DILocation(line: 3080, column: 5, scope: !1429)
!4928 = !DILocation(line: 3080, column: 18, scope: !1429)
!4929 = !DILocation(line: 3081, column: 5, scope: !1429)
!4930 = !DILocation(line: 3081, column: 15, scope: !1429)
!4931 = !DILocation(line: 3081, column: 34, scope: !1429)
!4932 = !DILocation(line: 3083, column: 27, scope: !4933)
!4933 = distinct !DILexicalBlock(scope: !1429, file: !637, line: 3083, column: 9)
!4934 = !DILocation(line: 3083, column: 10, scope: !4933)
!4935 = !DILocation(line: 3083, column: 9, scope: !1429)
!4936 = !DILocation(line: 3084, column: 9, scope: !4933)
!4937 = !DILocation(line: 3086, column: 9, scope: !4938)
!4938 = distinct !DILexicalBlock(scope: !1429, file: !637, line: 3086, column: 9)
!4939 = !DILocation(line: 3086, column: 17, scope: !4938)
!4940 = !DILocation(line: 3086, column: 9, scope: !1429)
!4941 = !DILocation(line: 3087, column: 25, scope: !4942)
!4942 = distinct !DILexicalBlock(scope: !4938, file: !637, line: 3086, column: 22)
!4943 = !DILocation(line: 3087, column: 9, scope: !4942)
!4944 = !DILocation(line: 3088, column: 9, scope: !4942)
!4945 = !DILocation(line: 3090, column: 54, scope: !4946)
!4946 = distinct !DILexicalBlock(scope: !1429, file: !637, line: 3090, column: 9)
!4947 = !DILocation(line: 3090, column: 16, scope: !4946)
!4948 = !DILocation(line: 3090, column: 14, scope: !4946)
!4949 = !DILocation(line: 3090, column: 64, scope: !4946)
!4950 = !DILocation(line: 3090, column: 9, scope: !1429)
!4951 = !DILocation(line: 3091, column: 9, scope: !4946)
!4952 = !DILocation(line: 3092, column: 55, scope: !1429)
!4953 = !DILocation(line: 3092, column: 37, scope: !1429)
!4954 = !DILocation(line: 3092, column: 62, scope: !1429)
!4955 = !DILocation(line: 3092, column: 35, scope: !1429)
!4956 = !DILocation(line: 3092, column: 9, scope: !1429)
!4957 = !DILocation(line: 3092, column: 18, scope: !1429)
!4958 = !{!4959, !2323, i64 0}
!4959 = !{!"iovec", !2323, i64 0, !2320, i64 8}
!4960 = !DILocation(line: 3093, column: 19, scope: !1429)
!4961 = !DILocation(line: 3093, column: 9, scope: !1429)
!4962 = !DILocation(line: 3093, column: 17, scope: !1429)
!4963 = !{!4959, !2320, i64 8}
!4964 = !DILocation(line: 3098, column: 32, scope: !1429)
!4965 = !DILocation(line: 3098, column: 44, scope: !1429)
!4966 = !DILocation(line: 3098, column: 51, scope: !1429)
!4967 = !DILocation(line: 3099, column: 50, scope: !1429)
!4968 = !DILocation(line: 3098, column: 14, scope: !1429)
!4969 = !DILocation(line: 3098, column: 12, scope: !1429)
!4970 = !DILocation(line: 3100, column: 5, scope: !1429)
!4971 = !DILocation(line: 3100, column: 10, scope: !4972)
!4972 = !DILexicalBlockFile(scope: !1440, file: !637, discriminator: 1)
!4973 = !DILocation(line: 3100, column: 20, scope: !1440)
!4974 = !DILocation(line: 3100, column: 51, scope: !1440)
!4975 = !DILocation(line: 3100, column: 61, scope: !1443)
!4976 = !DILocation(line: 3100, column: 77, scope: !1443)
!4977 = !DILocation(line: 3100, column: 61, scope: !1440)
!4978 = !DILocation(line: 3100, column: 92, scope: !4979)
!4979 = !DILexicalBlockFile(scope: !1443, file: !637, discriminator: 2)
!4980 = !DILocation(line: 3100, column: 97, scope: !4981)
!4981 = !DILexicalBlockFile(scope: !1442, file: !637, discriminator: 4)
!4982 = !DILocation(line: 3100, column: 107, scope: !1442)
!4983 = !DILocation(line: 3100, column: 137, scope: !1442)
!4984 = !DILocation(line: 3100, column: 163, scope: !4985)
!4985 = distinct !DILexicalBlock(scope: !1442, file: !637, line: 3100, column: 160)
!4986 = !DILocation(line: 3100, column: 180, scope: !4985)
!4987 = !DILocation(line: 3100, column: 160, scope: !4985)
!4988 = !DILocation(line: 3100, column: 190, scope: !4985)
!4989 = !DILocation(line: 3100, column: 160, scope: !1442)
!4990 = !DILocation(line: 3100, column: 160, scope: !4991)
!4991 = !DILexicalBlockFile(scope: !1442, file: !637, discriminator: 5)
!4992 = !DILocation(line: 3100, column: 221, scope: !4993)
!4993 = !DILexicalBlockFile(scope: !4985, file: !637, discriminator: 6)
!4994 = !DILocation(line: 3100, column: 239, scope: !4985)
!4995 = !DILocation(line: 3100, column: 249, scope: !4985)
!4996 = !DILocation(line: 3100, column: 274, scope: !4985)
!4997 = !DILocation(line: 3100, column: 205, scope: !4985)
!4998 = !DILocation(line: 3100, column: 293, scope: !4999)
!4999 = !DILexicalBlockFile(scope: !1443, file: !637, discriminator: 7)
!5000 = !DILocation(line: 3100, column: 293, scope: !1442)
!5001 = !DILocation(line: 3100, column: 293, scope: !5002)
!5002 = !DILexicalBlockFile(scope: !1442, file: !637, discriminator: 8)
!5003 = !DILocation(line: 3100, column: 293, scope: !5004)
!5004 = !DILexicalBlockFile(scope: !1442, file: !637, discriminator: 9)
!5005 = !DILocation(line: 3100, column: 306, scope: !5006)
!5006 = !DILexicalBlockFile(scope: !5007, file: !637, discriminator: 10)
!5007 = !DILexicalBlockFile(scope: !1429, file: !637, discriminator: 3)
!5008 = !DILocation(line: 3100, column: 306, scope: !1440)
!5009 = !DILocation(line: 3100, column: 306, scope: !5010)
!5010 = !DILexicalBlockFile(scope: !1440, file: !637, discriminator: 11)
!5011 = !DILocation(line: 3101, column: 12, scope: !1429)
!5012 = !DILocation(line: 3101, column: 5, scope: !1429)
!5013 = !DILocation(line: 3102, column: 1, scope: !1429)
!5014 = !DILocation(line: 3143, column: 39, scope: !1536)
!5015 = !DILocation(line: 3143, column: 52, scope: !1536)
!5016 = !DILocation(line: 3145, column: 5, scope: !1536)
!5017 = !DILocation(line: 3145, column: 16, scope: !1536)
!5018 = !DILocation(line: 3146, column: 5, scope: !1536)
!5019 = !DILocation(line: 3146, column: 9, scope: !1536)
!5020 = !DILocation(line: 3147, column: 5, scope: !1536)
!5021 = !DILocation(line: 3147, column: 19, scope: !1536)
!5022 = !DILocation(line: 3148, column: 5, scope: !1536)
!5023 = !DILocation(line: 3148, column: 16, scope: !1536)
!5024 = !DILocation(line: 3148, column: 19, scope: !1536)
!5025 = !DILocation(line: 3148, column: 27, scope: !1536)
!5026 = !DILocation(line: 3149, column: 5, scope: !1536)
!5027 = !DILocation(line: 3149, column: 16, scope: !1536)
!5028 = !DILocation(line: 3150, column: 5, scope: !1536)
!5029 = !DILocation(line: 3150, column: 15, scope: !1536)
!5030 = !DILocation(line: 3150, column: 29, scope: !1536)
!5031 = !DILocation(line: 3150, column: 36, scope: !1536)
!5032 = !DILocation(line: 3152, column: 27, scope: !5033)
!5033 = distinct !DILexicalBlock(scope: !1536, file: !637, line: 3152, column: 9)
!5034 = !DILocation(line: 3152, column: 10, scope: !5033)
!5035 = !DILocation(line: 3152, column: 9, scope: !1536)
!5036 = !DILocation(line: 3154, column: 9, scope: !5033)
!5037 = !DILocation(line: 3156, column: 33, scope: !5038)
!5038 = distinct !DILexicalBlock(scope: !1536, file: !637, line: 3156, column: 9)
!5039 = !DILocation(line: 3156, column: 17, scope: !5038)
!5040 = !DILocation(line: 3156, column: 15, scope: !5038)
!5041 = !DILocation(line: 3158, column: 46, scope: !5038)
!5042 = !DILocation(line: 3156, column: 9, scope: !1536)
!5043 = !DILocation(line: 3159, column: 9, scope: !5038)
!5044 = !DILocation(line: 3160, column: 32, scope: !1536)
!5045 = !DILocation(line: 3160, column: 40, scope: !1536)
!5046 = !DILocation(line: 3160, column: 51, scope: !1536)
!5047 = !{!3002, !2320, i64 168}
!5048 = !DILocation(line: 3160, column: 60, scope: !1536)
!5049 = !DILocation(line: 3160, column: 77, scope: !1536)
!5050 = !DILocation(line: 3160, column: 15, scope: !1536)
!5051 = !DILocation(line: 3160, column: 102, scope: !5052)
!5052 = !DILexicalBlockFile(scope: !1536, file: !637, discriminator: 1)
!5053 = !DILocation(line: 3160, column: 87, scope: !1536)
!5054 = !DILocation(line: 3160, column: 110, scope: !1536)
!5055 = !{!3003, !2320, i64 16}
!5056 = !DILocation(line: 3160, column: 138, scope: !5057)
!5057 = !DILexicalBlockFile(scope: !1536, file: !637, discriminator: 2)
!5058 = !DILocation(line: 3160, column: 123, scope: !1536)
!5059 = !DILocation(line: 3160, column: 146, scope: !1536)
!5060 = !DILocation(line: 3160, column: 12, scope: !5061)
!5061 = !DILexicalBlockFile(scope: !5062, file: !637, discriminator: 4)
!5062 = !DILexicalBlockFile(scope: !1536, file: !637, discriminator: 3)
!5063 = !DILocation(line: 3161, column: 9, scope: !5064)
!5064 = distinct !DILexicalBlock(scope: !1536, file: !637, line: 3161, column: 9)
!5065 = !DILocation(line: 3161, column: 16, scope: !5064)
!5066 = !DILocation(line: 3161, column: 9, scope: !1536)
!5067 = !DILocation(line: 3162, column: 25, scope: !5068)
!5068 = distinct !DILexicalBlock(scope: !5064, file: !637, line: 3161, column: 30)
!5069 = !DILocation(line: 3162, column: 9, scope: !5068)
!5070 = !DILocation(line: 3163, column: 9, scope: !5068)
!5071 = !DILocation(line: 3168, column: 9, scope: !5072)
!5072 = distinct !DILexicalBlock(scope: !1536, file: !637, line: 3168, column: 9)
!5073 = !DILocation(line: 3168, column: 16, scope: !5072)
!5074 = !DILocation(line: 3168, column: 20, scope: !5072)
!5075 = !DILocation(line: 3168, column: 44, scope: !5076)
!5076 = !DILexicalBlockFile(scope: !5072, file: !637, discriminator: 1)
!5077 = !DILocation(line: 3168, column: 52, scope: !5072)
!5078 = !DILocation(line: 3168, column: 34, scope: !5072)
!5079 = !DILocation(line: 3168, column: 34, scope: !5080)
!5080 = !DILexicalBlockFile(scope: !5072, file: !637, discriminator: 2)
!5081 = !DILocation(line: 3168, column: 158, scope: !5082)
!5082 = !DILexicalBlockFile(scope: !5072, file: !637, discriminator: 3)
!5083 = !DILocation(line: 3168, column: 166, scope: !5072)
!5084 = !DILocation(line: 3168, column: 144, scope: !5072)
!5085 = !DILocation(line: 3168, column: 127, scope: !5072)
!5086 = !DILocation(line: 3168, column: 30, scope: !5087)
!5087 = !DILexicalBlockFile(scope: !5088, file: !637, discriminator: 5)
!5088 = !DILexicalBlockFile(scope: !5072, file: !637, discriminator: 4)
!5089 = !DILocation(line: 3168, column: 195, scope: !5072)
!5090 = !DILocation(line: 3168, column: 209, scope: !5072)
!5091 = !DILocation(line: 3169, column: 44, scope: !5072)
!5092 = !DILocation(line: 3169, column: 52, scope: !5072)
!5093 = !DILocation(line: 3169, column: 34, scope: !5072)
!5094 = !DILocation(line: 3169, column: 34, scope: !5076)
!5095 = !DILocation(line: 3169, column: 152, scope: !5080)
!5096 = !DILocation(line: 3169, column: 160, scope: !5072)
!5097 = !DILocation(line: 3169, column: 138, scope: !5072)
!5098 = !DILocation(line: 3169, column: 124, scope: !5072)
!5099 = !DILocation(line: 3169, column: 30, scope: !5100)
!5100 = !DILexicalBlockFile(scope: !5082, file: !637, discriminator: 4)
!5101 = !DILocation(line: 3169, column: 186, scope: !5072)
!5102 = !DILocation(line: 3168, column: 9, scope: !1536)
!5103 = !DILocation(line: 3170, column: 9, scope: !5104)
!5104 = distinct !DILexicalBlock(scope: !5072, file: !637, line: 3169, column: 202)
!5105 = !DILocation(line: 3171, column: 9, scope: !5104)
!5106 = !DILocation(line: 3173, column: 5, scope: !1536)
!5107 = !DILocation(line: 3173, column: 12, scope: !5108)
!5108 = !DILexicalBlockFile(scope: !5109, file: !637, discriminator: 2)
!5109 = !DILexicalBlockFile(scope: !5110, file: !637, discriminator: 1)
!5110 = distinct !DILexicalBlock(scope: !5111, file: !637, line: 3173, column: 5)
!5111 = distinct !DILexicalBlock(scope: !1536, file: !637, line: 3173, column: 5)
!5112 = !DILocation(line: 3173, column: 20, scope: !5110)
!5113 = !DILocation(line: 3173, column: 18, scope: !5110)
!5114 = !DILocation(line: 3173, column: 5, scope: !5111)
!5115 = !DILocation(line: 3174, column: 44, scope: !5116)
!5116 = distinct !DILexicalBlock(scope: !5117, file: !637, line: 3174, column: 13)
!5117 = distinct !DILexicalBlock(scope: !5110, file: !637, line: 3173, column: 37)
!5118 = !DILocation(line: 3174, column: 52, scope: !5116)
!5119 = !DILocation(line: 3174, column: 63, scope: !5116)
!5120 = !DILocation(line: 3174, column: 72, scope: !5116)
!5121 = !DILocation(line: 3174, column: 89, scope: !5116)
!5122 = !DILocation(line: 3174, column: 27, scope: !5116)
!5123 = !DILocation(line: 3174, column: 132, scope: !5124)
!5124 = !DILexicalBlockFile(scope: !5116, file: !637, discriminator: 1)
!5125 = !DILocation(line: 3174, column: 116, scope: !5116)
!5126 = !DILocation(line: 3174, column: 99, scope: !5116)
!5127 = !DILocation(line: 3174, column: 124, scope: !5116)
!5128 = !{!5129, !2323, i64 24}
!5129 = !{!"", !3003, i64 0, !2323, i64 24, !2320, i64 32}
!5130 = !DILocation(line: 3174, column: 98, scope: !5116)
!5131 = !DILocation(line: 3174, column: 178, scope: !5132)
!5132 = !DILexicalBlockFile(scope: !5116, file: !637, discriminator: 2)
!5133 = !DILocation(line: 3174, column: 162, scope: !5116)
!5134 = !DILocation(line: 3174, column: 144, scope: !5116)
!5135 = !DILocation(line: 3174, column: 170, scope: !5116)
!5136 = !DILocation(line: 3174, column: 143, scope: !5116)
!5137 = !DILocation(line: 3177, column: 32, scope: !5116)
!5138 = !DILocation(line: 3177, column: 27, scope: !5116)
!5139 = !DILocation(line: 3174, column: 14, scope: !5116)
!5140 = !DILocation(line: 3174, column: 13, scope: !5117)
!5141 = !DILocation(line: 3178, column: 13, scope: !5116)
!5142 = !DILocation(line: 3179, column: 37, scope: !5117)
!5143 = !DILocation(line: 3179, column: 32, scope: !5117)
!5144 = !DILocation(line: 3179, column: 44, scope: !5117)
!5145 = !DILocation(line: 3179, column: 14, scope: !5117)
!5146 = !DILocation(line: 3179, column: 9, scope: !5117)
!5147 = !DILocation(line: 3179, column: 21, scope: !5117)
!5148 = !DILocation(line: 3179, column: 30, scope: !5117)
!5149 = !DILocation(line: 3180, column: 36, scope: !5117)
!5150 = !DILocation(line: 3180, column: 31, scope: !5117)
!5151 = !DILocation(line: 3180, column: 43, scope: !5117)
!5152 = !DILocation(line: 3180, column: 14, scope: !5117)
!5153 = !DILocation(line: 3180, column: 9, scope: !5117)
!5154 = !DILocation(line: 3180, column: 21, scope: !5117)
!5155 = !DILocation(line: 3180, column: 29, scope: !5117)
!5156 = !DILocation(line: 3181, column: 5, scope: !5117)
!5157 = !DILocation(line: 3173, column: 33, scope: !5110)
!5158 = !DILocation(line: 3173, column: 5, scope: !5110)
!5159 = !DILocation(line: 3183, column: 32, scope: !1536)
!5160 = !DILocation(line: 3183, column: 35, scope: !1536)
!5161 = !DILocation(line: 3183, column: 41, scope: !1536)
!5162 = !DILocation(line: 3183, column: 49, scope: !1536)
!5163 = !DILocation(line: 3183, column: 56, scope: !1536)
!5164 = !DILocation(line: 3183, column: 14, scope: !1536)
!5165 = !DILocation(line: 3183, column: 12, scope: !1536)
!5166 = !DILocation(line: 3183, column: 5, scope: !1536)
!5167 = !DILocation(line: 3186, column: 12, scope: !5168)
!5168 = distinct !DILexicalBlock(scope: !1536, file: !637, line: 3186, column: 5)
!5169 = !DILocation(line: 3186, column: 10, scope: !5168)
!5170 = !DILocation(line: 3186, column: 17, scope: !5171)
!5171 = !DILexicalBlockFile(scope: !5172, file: !637, discriminator: 2)
!5172 = !DILexicalBlockFile(scope: !5173, file: !637, discriminator: 1)
!5173 = distinct !DILexicalBlock(scope: !5168, file: !637, line: 3186, column: 5)
!5174 = !DILocation(line: 3186, column: 21, scope: !5173)
!5175 = !DILocation(line: 3186, column: 19, scope: !5173)
!5176 = !DILocation(line: 3186, column: 5, scope: !5168)
!5177 = !DILocation(line: 3187, column: 32, scope: !5173)
!5178 = !DILocation(line: 3187, column: 27, scope: !5173)
!5179 = !DILocation(line: 3187, column: 9, scope: !5173)
!5180 = !DILocation(line: 3186, column: 29, scope: !5173)
!5181 = !DILocation(line: 3186, column: 5, scope: !5173)
!5182 = !DILocation(line: 3188, column: 16, scope: !1536)
!5183 = !DILocation(line: 3188, column: 5, scope: !1536)
!5184 = !DILocation(line: 3189, column: 16, scope: !1536)
!5185 = !DILocation(line: 3189, column: 5, scope: !1536)
!5186 = !DILocation(line: 3190, column: 5, scope: !1536)
!5187 = !DILocation(line: 3190, column: 10, scope: !5188)
!5188 = !DILexicalBlockFile(scope: !1551, file: !637, discriminator: 1)
!5189 = !DILocation(line: 3190, column: 20, scope: !1551)
!5190 = !DILocation(line: 3190, column: 50, scope: !1551)
!5191 = !DILocation(line: 3190, column: 65, scope: !5192)
!5192 = distinct !DILexicalBlock(scope: !1551, file: !637, line: 3190, column: 62)
!5193 = !DILocation(line: 3190, column: 82, scope: !5192)
!5194 = !DILocation(line: 3190, column: 62, scope: !5192)
!5195 = !DILocation(line: 3190, column: 92, scope: !5192)
!5196 = !DILocation(line: 3190, column: 62, scope: !1551)
!5197 = !DILocation(line: 3190, column: 62, scope: !5198)
!5198 = !DILexicalBlockFile(scope: !1551, file: !637, discriminator: 2)
!5199 = !DILocation(line: 3190, column: 123, scope: !5200)
!5200 = !DILexicalBlockFile(scope: !5192, file: !637, discriminator: 3)
!5201 = !DILocation(line: 3190, column: 141, scope: !5192)
!5202 = !DILocation(line: 3190, column: 151, scope: !5192)
!5203 = !DILocation(line: 3190, column: 176, scope: !5192)
!5204 = !DILocation(line: 3190, column: 107, scope: !5192)
!5205 = !DILocation(line: 3190, column: 195, scope: !5206)
!5206 = !DILexicalBlockFile(scope: !1536, file: !637, discriminator: 4)
!5207 = !DILocation(line: 3190, column: 195, scope: !1551)
!5208 = !DILocation(line: 3190, column: 195, scope: !5209)
!5209 = !DILexicalBlockFile(scope: !1551, file: !637, discriminator: 5)
!5210 = !DILocation(line: 3191, column: 12, scope: !1536)
!5211 = !DILocation(line: 3191, column: 5, scope: !1536)
!5212 = !DILocation(line: 3192, column: 1, scope: !1536)
!5213 = !DILocation(line: 3444, column: 34, scope: !638)
!5214 = !DILocation(line: 3444, column: 47, scope: !638)
!5215 = !DILocation(line: 3446, column: 5, scope: !638)
!5216 = !DILocation(line: 3446, column: 16, scope: !638)
!5217 = !DILocation(line: 3446, column: 19, scope: !638)
!5218 = !DILocation(line: 3446, column: 31, scope: !638)
!5219 = !DILocation(line: 3446, column: 46, scope: !638)
!5220 = !DILocation(line: 3446, column: 54, scope: !638)
!5221 = !DILocation(line: 3447, column: 5, scope: !638)
!5222 = !DILocation(line: 3447, column: 16, scope: !638)
!5223 = !DILocation(line: 3448, column: 5, scope: !638)
!5224 = !DILocation(line: 3448, column: 19, scope: !638)
!5225 = !DILocation(line: 3449, column: 5, scope: !638)
!5226 = !DILocation(line: 3449, column: 17, scope: !638)
!5227 = !DILocation(line: 3450, column: 5, scope: !638)
!5228 = !DILocation(line: 3450, column: 19, scope: !638)
!5229 = !DILocation(line: 3451, column: 5, scope: !638)
!5230 = !DILocation(line: 3455, column: 8, scope: !638)
!5231 = !DILocation(line: 3456, column: 5, scope: !638)
!5232 = !DILocation(line: 3456, column: 11, scope: !638)
!5233 = !DILocation(line: 3457, column: 5, scope: !638)
!5234 = !DILocation(line: 3457, column: 12, scope: !638)
!5235 = !DILocation(line: 3457, column: 24, scope: !638)
!5236 = !DILocation(line: 3458, column: 5, scope: !638)
!5237 = !DILocation(line: 3458, column: 13, scope: !638)
!5238 = !DILocation(line: 3459, column: 5, scope: !638)
!5239 = !DILocation(line: 3459, column: 9, scope: !638)
!5240 = !DILocation(line: 3459, column: 18, scope: !638)
!5241 = !DILocation(line: 3459, column: 27, scope: !638)
!5242 = !DILocation(line: 3460, column: 5, scope: !638)
!5243 = !DILocation(line: 3460, column: 15, scope: !638)
!5244 = !DILocation(line: 3460, column: 26, scope: !638)
!5245 = !DILocation(line: 3460, column: 50, scope: !638)
!5246 = !DILocation(line: 3460, column: 74, scope: !638)
!5247 = !DILocation(line: 3461, column: 10, scope: !638)
!5248 = !DILocation(line: 3461, column: 35, scope: !638)
!5249 = !DILocation(line: 3463, column: 27, scope: !5250)
!5250 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3463, column: 9)
!5251 = !DILocation(line: 3463, column: 10, scope: !5250)
!5252 = !DILocation(line: 3463, column: 9, scope: !638)
!5253 = !DILocation(line: 3465, column: 9, scope: !5250)
!5254 = !DILocation(line: 3468, column: 9, scope: !5255)
!5255 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3468, column: 9)
!5256 = !DILocation(line: 3468, column: 18, scope: !5255)
!5257 = !DILocation(line: 3468, column: 32, scope: !5255)
!5258 = !DILocation(line: 3468, column: 35, scope: !5259)
!5259 = !DILexicalBlockFile(scope: !5255, file: !637, discriminator: 1)
!5260 = !DILocation(line: 3468, column: 44, scope: !5255)
!5261 = !DILocation(line: 3468, column: 9, scope: !638)
!5262 = !DILocation(line: 3469, column: 29, scope: !5263)
!5263 = distinct !DILexicalBlock(scope: !5264, file: !637, line: 3469, column: 13)
!5264 = distinct !DILexicalBlock(scope: !5255, file: !637, line: 3468, column: 66)
!5265 = !DILocation(line: 3469, column: 32, scope: !5263)
!5266 = !DILocation(line: 3469, column: 57, scope: !5263)
!5267 = !DILocation(line: 3469, column: 14, scope: !5263)
!5268 = !DILocation(line: 3469, column: 13, scope: !5264)
!5269 = !DILocation(line: 3470, column: 13, scope: !5263)
!5270 = !DILocation(line: 3471, column: 24, scope: !5264)
!5271 = !DILocation(line: 3471, column: 13, scope: !5264)
!5272 = !DILocation(line: 3471, column: 22, scope: !5264)
!5273 = !{!5274, !2323, i64 0}
!5274 = !{!"msghdr", !2323, i64 0, !2950, i64 8, !2323, i64 16, !2320, i64 24, !2323, i64 32, !2320, i64 40, !2950, i64 48}
!5275 = !DILocation(line: 3472, column: 27, scope: !5264)
!5276 = !DILocation(line: 3472, column: 13, scope: !5264)
!5277 = !DILocation(line: 3472, column: 25, scope: !5264)
!5278 = !{!5274, !2950, i64 8}
!5279 = !DILocation(line: 3473, column: 5, scope: !5264)
!5280 = !DILocation(line: 3477, column: 38, scope: !5281)
!5281 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3477, column: 9)
!5282 = !DILocation(line: 3477, column: 22, scope: !5281)
!5283 = !DILocation(line: 3477, column: 20, scope: !5281)
!5284 = !DILocation(line: 3479, column: 51, scope: !5281)
!5285 = !DILocation(line: 3477, column: 9, scope: !638)
!5286 = !DILocation(line: 3480, column: 9, scope: !5281)
!5287 = !DILocation(line: 3481, column: 36, scope: !638)
!5288 = !DILocation(line: 3481, column: 49, scope: !638)
!5289 = !DILocation(line: 3481, column: 60, scope: !638)
!5290 = !DILocation(line: 3481, column: 69, scope: !638)
!5291 = !DILocation(line: 3481, column: 86, scope: !638)
!5292 = !DILocation(line: 3481, column: 19, scope: !638)
!5293 = !DILocation(line: 3481, column: 111, scope: !5294)
!5294 = !DILexicalBlockFile(scope: !638, file: !637, discriminator: 1)
!5295 = !DILocation(line: 3481, column: 96, scope: !638)
!5296 = !DILocation(line: 3481, column: 124, scope: !638)
!5297 = !DILocation(line: 3481, column: 152, scope: !5298)
!5298 = !DILexicalBlockFile(scope: !638, file: !637, discriminator: 2)
!5299 = !DILocation(line: 3481, column: 137, scope: !638)
!5300 = !DILocation(line: 3481, column: 165, scope: !638)
!5301 = !DILocation(line: 3481, column: 16, scope: !5302)
!5302 = !DILexicalBlockFile(scope: !5303, file: !637, discriminator: 4)
!5303 = !DILexicalBlockFile(scope: !638, file: !637, discriminator: 3)
!5304 = !DILocation(line: 3482, column: 9, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3482, column: 9)
!5306 = !DILocation(line: 3482, column: 20, scope: !5305)
!5307 = !DILocation(line: 3482, column: 9, scope: !638)
!5308 = !DILocation(line: 3483, column: 25, scope: !5309)
!5309 = distinct !DILexicalBlock(scope: !5305, file: !637, line: 3482, column: 34)
!5310 = !DILocation(line: 3483, column: 9, scope: !5309)
!5311 = !DILocation(line: 3484, column: 9, scope: !5309)
!5312 = !DILocation(line: 3486, column: 22, scope: !638)
!5313 = !DILocation(line: 3486, column: 9, scope: !638)
!5314 = !DILocation(line: 3486, column: 20, scope: !638)
!5315 = !{!5274, !2320, i64 24}
!5316 = !DILocation(line: 3487, column: 9, scope: !5317)
!5317 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3487, column: 9)
!5318 = !DILocation(line: 3487, column: 20, scope: !5317)
!5319 = !DILocation(line: 3487, column: 24, scope: !5317)
!5320 = !DILocation(line: 3488, column: 44, scope: !5317)
!5321 = !DILocation(line: 3488, column: 56, scope: !5317)
!5322 = !DILocation(line: 3488, column: 34, scope: !5317)
!5323 = !DILocation(line: 3488, column: 34, scope: !5324)
!5324 = !DILexicalBlockFile(scope: !5317, file: !637, discriminator: 1)
!5325 = !DILocation(line: 3488, column: 162, scope: !5326)
!5326 = !DILexicalBlockFile(scope: !5317, file: !637, discriminator: 2)
!5327 = !DILocation(line: 3488, column: 174, scope: !5317)
!5328 = !DILocation(line: 3488, column: 148, scope: !5317)
!5329 = !DILocation(line: 3488, column: 131, scope: !5317)
!5330 = !DILocation(line: 3488, column: 30, scope: !5331)
!5331 = !DILexicalBlockFile(scope: !5332, file: !637, discriminator: 4)
!5332 = !DILexicalBlockFile(scope: !5317, file: !637, discriminator: 3)
!5333 = !DILocation(line: 3488, column: 15, scope: !5317)
!5334 = !DILocation(line: 3488, column: 23, scope: !5317)
!5335 = !{!5274, !2323, i64 16}
!5336 = !DILocation(line: 3488, column: 203, scope: !5317)
!5337 = !DILocation(line: 3488, column: 217, scope: !5317)
!5338 = !DILocation(line: 3489, column: 34, scope: !5317)
!5339 = !DILocation(line: 3489, column: 46, scope: !5317)
!5340 = !DILocation(line: 3489, column: 24, scope: !5317)
!5341 = !DILocation(line: 3489, column: 24, scope: !5324)
!5342 = !DILocation(line: 3489, column: 146, scope: !5326)
!5343 = !DILocation(line: 3489, column: 158, scope: !5317)
!5344 = !DILocation(line: 3489, column: 132, scope: !5317)
!5345 = !DILocation(line: 3489, column: 118, scope: !5317)
!5346 = !DILocation(line: 3489, column: 20, scope: !5331)
!5347 = !DILocation(line: 3489, column: 184, scope: !5317)
!5348 = !DILocation(line: 3487, column: 9, scope: !638)
!5349 = !DILocation(line: 3490, column: 9, scope: !5350)
!5350 = distinct !DILexicalBlock(scope: !5317, file: !637, line: 3489, column: 200)
!5351 = !DILocation(line: 3491, column: 9, scope: !5350)
!5352 = !DILocation(line: 3493, column: 5, scope: !638)
!5353 = !DILocation(line: 3493, column: 12, scope: !5354)
!5354 = !DILexicalBlockFile(scope: !5355, file: !637, discriminator: 2)
!5355 = !DILexicalBlockFile(scope: !5356, file: !637, discriminator: 1)
!5356 = distinct !DILexicalBlock(scope: !5357, file: !637, line: 3493, column: 5)
!5357 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3493, column: 5)
!5358 = !DILocation(line: 3493, column: 24, scope: !5356)
!5359 = !DILocation(line: 3493, column: 22, scope: !5356)
!5360 = !DILocation(line: 3493, column: 5, scope: !5357)
!5361 = !DILocation(line: 3494, column: 44, scope: !5362)
!5362 = distinct !DILexicalBlock(scope: !5363, file: !637, line: 3494, column: 13)
!5363 = distinct !DILexicalBlock(scope: !5356, file: !637, line: 3493, column: 49)
!5364 = !DILocation(line: 3494, column: 57, scope: !5362)
!5365 = !DILocation(line: 3494, column: 68, scope: !5362)
!5366 = !DILocation(line: 3494, column: 77, scope: !5362)
!5367 = !DILocation(line: 3494, column: 94, scope: !5362)
!5368 = !DILocation(line: 3494, column: 27, scope: !5362)
!5369 = !DILocation(line: 3494, column: 142, scope: !5370)
!5370 = !DILexicalBlockFile(scope: !5362, file: !637, discriminator: 1)
!5371 = !DILocation(line: 3494, column: 121, scope: !5362)
!5372 = !DILocation(line: 3494, column: 104, scope: !5362)
!5373 = !DILocation(line: 3494, column: 134, scope: !5362)
!5374 = !DILocation(line: 3494, column: 103, scope: !5362)
!5375 = !DILocation(line: 3494, column: 197, scope: !5376)
!5376 = !DILexicalBlockFile(scope: !5362, file: !637, discriminator: 2)
!5377 = !DILocation(line: 3494, column: 176, scope: !5362)
!5378 = !DILocation(line: 3494, column: 158, scope: !5362)
!5379 = !DILocation(line: 3494, column: 189, scope: !5362)
!5380 = !DILocation(line: 3494, column: 157, scope: !5362)
!5381 = !DILocation(line: 3497, column: 36, scope: !5362)
!5382 = !DILocation(line: 3497, column: 27, scope: !5362)
!5383 = !DILocation(line: 3494, column: 14, scope: !5362)
!5384 = !DILocation(line: 3494, column: 13, scope: !5363)
!5385 = !DILocation(line: 3498, column: 13, scope: !5362)
!5386 = !DILocation(line: 3499, column: 45, scope: !5363)
!5387 = !DILocation(line: 3499, column: 36, scope: !5363)
!5388 = !DILocation(line: 3499, column: 56, scope: !5363)
!5389 = !DILocation(line: 3499, column: 14, scope: !5363)
!5390 = !DILocation(line: 3499, column: 9, scope: !5363)
!5391 = !DILocation(line: 3499, column: 25, scope: !5363)
!5392 = !DILocation(line: 3499, column: 34, scope: !5363)
!5393 = !DILocation(line: 3500, column: 44, scope: !5363)
!5394 = !DILocation(line: 3500, column: 35, scope: !5363)
!5395 = !DILocation(line: 3500, column: 55, scope: !5363)
!5396 = !DILocation(line: 3500, column: 14, scope: !5363)
!5397 = !DILocation(line: 3500, column: 9, scope: !5363)
!5398 = !DILocation(line: 3500, column: 25, scope: !5363)
!5399 = !DILocation(line: 3500, column: 33, scope: !5363)
!5400 = !DILocation(line: 3501, column: 5, scope: !5363)
!5401 = !DILocation(line: 3493, column: 45, scope: !5356)
!5402 = !DILocation(line: 3493, column: 5, scope: !5356)
!5403 = !DILocation(line: 3503, column: 9, scope: !5404)
!5404 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3503, column: 9)
!5405 = !DILocation(line: 3503, column: 18, scope: !5404)
!5406 = !DILocation(line: 3503, column: 9, scope: !638)
!5407 = !DILocation(line: 3504, column: 16, scope: !5404)
!5408 = !DILocation(line: 3504, column: 9, scope: !5404)
!5409 = !DILocation(line: 3506, column: 42, scope: !5410)
!5410 = distinct !DILexicalBlock(scope: !5411, file: !637, line: 3506, column: 13)
!5411 = distinct !DILexicalBlock(scope: !5404, file: !637, line: 3505, column: 10)
!5412 = !DILocation(line: 3506, column: 26, scope: !5410)
!5413 = !DILocation(line: 3506, column: 24, scope: !5410)
!5414 = !DILocation(line: 3508, column: 55, scope: !5410)
!5415 = !DILocation(line: 3506, column: 13, scope: !5411)
!5416 = !DILocation(line: 3509, column: 13, scope: !5410)
!5417 = !DILocation(line: 3510, column: 36, scope: !5411)
!5418 = !DILocation(line: 3510, column: 49, scope: !5411)
!5419 = !DILocation(line: 3510, column: 60, scope: !5411)
!5420 = !DILocation(line: 3510, column: 69, scope: !5411)
!5421 = !DILocation(line: 3510, column: 86, scope: !5411)
!5422 = !DILocation(line: 3510, column: 19, scope: !5411)
!5423 = !DILocation(line: 3510, column: 111, scope: !5424)
!5424 = !DILexicalBlockFile(scope: !5411, file: !637, discriminator: 1)
!5425 = !DILocation(line: 3510, column: 96, scope: !5411)
!5426 = !DILocation(line: 3510, column: 124, scope: !5411)
!5427 = !DILocation(line: 3510, column: 152, scope: !5428)
!5428 = !DILexicalBlockFile(scope: !5411, file: !637, discriminator: 2)
!5429 = !DILocation(line: 3510, column: 137, scope: !5411)
!5430 = !DILocation(line: 3510, column: 165, scope: !5411)
!5431 = !DILocation(line: 3510, column: 16, scope: !5432)
!5432 = !DILexicalBlockFile(scope: !5433, file: !637, discriminator: 4)
!5433 = !DILexicalBlockFile(scope: !5411, file: !637, discriminator: 3)
!5434 = !DILocation(line: 3523, column: 9, scope: !5435)
!5435 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3523, column: 9)
!5436 = !DILocation(line: 3523, column: 16, scope: !5435)
!5437 = !DILocation(line: 3523, column: 20, scope: !5435)
!5438 = !DILocation(line: 3523, column: 44, scope: !5439)
!5439 = !DILexicalBlockFile(scope: !5435, file: !637, discriminator: 1)
!5440 = !DILocation(line: 3523, column: 52, scope: !5435)
!5441 = !DILocation(line: 3523, column: 34, scope: !5435)
!5442 = !DILocation(line: 3523, column: 34, scope: !5443)
!5443 = !DILexicalBlockFile(scope: !5435, file: !637, discriminator: 2)
!5444 = !DILocation(line: 3523, column: 164, scope: !5445)
!5445 = !DILexicalBlockFile(scope: !5435, file: !637, discriminator: 3)
!5446 = !DILocation(line: 3523, column: 172, scope: !5435)
!5447 = !DILocation(line: 3523, column: 150, scope: !5435)
!5448 = !DILocation(line: 3523, column: 130, scope: !5435)
!5449 = !DILocation(line: 3523, column: 30, scope: !5450)
!5450 = !DILexicalBlockFile(scope: !5451, file: !637, discriminator: 5)
!5451 = !DILexicalBlockFile(scope: !5435, file: !637, discriminator: 4)
!5452 = !DILocation(line: 3523, column: 204, scope: !5435)
!5453 = !DILocation(line: 3523, column: 9, scope: !638)
!5454 = !DILocation(line: 3524, column: 9, scope: !5455)
!5455 = distinct !DILexicalBlock(scope: !5435, file: !637, line: 3523, column: 219)
!5456 = !DILocation(line: 3525, column: 9, scope: !5455)
!5457 = !DILocation(line: 3527, column: 34, scope: !638)
!5458 = !DILocation(line: 3527, column: 16, scope: !638)
!5459 = !DILocation(line: 3528, column: 5, scope: !638)
!5460 = !DILocation(line: 3528, column: 12, scope: !5461)
!5461 = !DILexicalBlockFile(scope: !5294, file: !637, discriminator: 2)
!5462 = !DILocation(line: 3528, column: 24, scope: !638)
!5463 = !DILocation(line: 3528, column: 22, scope: !638)
!5464 = !DILocation(line: 3529, column: 9, scope: !714)
!5465 = !DILocation(line: 3529, column: 16, scope: !714)
!5466 = !DILocation(line: 3529, column: 25, scope: !714)
!5467 = !DILocation(line: 3531, column: 44, scope: !5468)
!5468 = distinct !DILexicalBlock(scope: !714, file: !637, line: 3531, column: 13)
!5469 = !DILocation(line: 3531, column: 57, scope: !5468)
!5470 = !DILocation(line: 3531, column: 68, scope: !5468)
!5471 = !DILocation(line: 3531, column: 77, scope: !5468)
!5472 = !DILocation(line: 3531, column: 94, scope: !5468)
!5473 = !DILocation(line: 3531, column: 27, scope: !5468)
!5474 = !DILocation(line: 3531, column: 142, scope: !5475)
!5475 = !DILexicalBlockFile(scope: !5468, file: !637, discriminator: 1)
!5476 = !DILocation(line: 3531, column: 121, scope: !5468)
!5477 = !DILocation(line: 3531, column: 104, scope: !5468)
!5478 = !DILocation(line: 3531, column: 134, scope: !5468)
!5479 = !DILocation(line: 3531, column: 103, scope: !5468)
!5480 = !DILocation(line: 3531, column: 197, scope: !5481)
!5481 = !DILexicalBlockFile(scope: !5468, file: !637, discriminator: 2)
!5482 = !DILocation(line: 3531, column: 176, scope: !5468)
!5483 = !DILocation(line: 3531, column: 158, scope: !5468)
!5484 = !DILocation(line: 3531, column: 189, scope: !5468)
!5485 = !DILocation(line: 3531, column: 157, scope: !5468)
!5486 = !DILocation(line: 3533, column: 33, scope: !5468)
!5487 = !DILocation(line: 3533, column: 27, scope: !5468)
!5488 = !DILocation(line: 3533, column: 44, scope: !5468)
!5489 = !DILocation(line: 3534, column: 33, scope: !5468)
!5490 = !DILocation(line: 3534, column: 27, scope: !5468)
!5491 = !DILocation(line: 3534, column: 44, scope: !5468)
!5492 = !DILocation(line: 3535, column: 33, scope: !5468)
!5493 = !DILocation(line: 3535, column: 27, scope: !5468)
!5494 = !DILocation(line: 3535, column: 44, scope: !5468)
!5495 = !DILocation(line: 3531, column: 14, scope: !5468)
!5496 = !DILocation(line: 3531, column: 13, scope: !714)
!5497 = !DILocation(line: 3536, column: 13, scope: !5468)
!5498 = !DILocation(line: 3537, column: 34, scope: !714)
!5499 = !DILocation(line: 3537, column: 19, scope: !714)
!5500 = !DILocation(line: 3537, column: 38, scope: !714)
!5501 = !DILocation(line: 3537, column: 43, scope: !714)
!5502 = !{!5503, !2320, i64 24}
!5503 = !{!"cmsginfo", !2950, i64 0, !2950, i64 4, !4009, i64 8}
!5504 = !DILocation(line: 3537, column: 17, scope: !714)
!5505 = !DILocation(line: 3540, column: 29, scope: !5506)
!5506 = distinct !DILexicalBlock(scope: !714, file: !637, line: 3540, column: 13)
!5507 = !DILocation(line: 3540, column: 14, scope: !5506)
!5508 = !DILocation(line: 3540, column: 13, scope: !714)
!5509 = !DILocation(line: 3544, column: 29, scope: !5510)
!5510 = distinct !DILexicalBlock(scope: !5506, file: !637, line: 3540, column: 47)
!5511 = !DILocation(line: 3544, column: 13, scope: !5510)
!5512 = !DILocation(line: 3545, column: 13, scope: !5510)
!5513 = !DILocation(line: 3547, column: 23, scope: !714)
!5514 = !DILocation(line: 3547, column: 20, scope: !714)
!5515 = !DILocation(line: 3548, column: 13, scope: !5516)
!5516 = distinct !DILexicalBlock(scope: !714, file: !637, line: 3548, column: 13)
!5517 = !DILocation(line: 3548, column: 24, scope: !5516)
!5518 = !DILocation(line: 3548, column: 37, scope: !5516)
!5519 = !DILocation(line: 3548, column: 40, scope: !5520)
!5520 = !DILexicalBlockFile(scope: !5516, file: !637, discriminator: 1)
!5521 = !DILocation(line: 3548, column: 53, scope: !5516)
!5522 = !DILocation(line: 3548, column: 51, scope: !5516)
!5523 = !DILocation(line: 3548, column: 13, scope: !714)
!5524 = !DILocation(line: 3549, column: 29, scope: !5525)
!5525 = distinct !DILexicalBlock(scope: !5516, file: !637, line: 3548, column: 70)
!5526 = !DILocation(line: 3549, column: 13, scope: !5525)
!5527 = !DILocation(line: 3550, column: 13, scope: !5525)
!5528 = !DILocation(line: 3552, column: 27, scope: !714)
!5529 = !DILocation(line: 3552, column: 25, scope: !714)
!5530 = !DILocation(line: 3553, column: 5, scope: !638)
!5531 = !DILocation(line: 3553, column: 5, scope: !5294)
!5532 = !DILocation(line: 3556, column: 9, scope: !718)
!5533 = !DILocation(line: 3556, column: 19, scope: !718)
!5534 = !DILocation(line: 3556, column: 9, scope: !638)
!5535 = !DILocation(line: 3557, column: 9, scope: !717)
!5536 = !DILocation(line: 3557, column: 25, scope: !717)
!5537 = !DILocation(line: 3560, column: 27, scope: !5538)
!5538 = distinct !DILexicalBlock(scope: !717, file: !637, line: 3559, column: 13)
!5539 = !DILocation(line: 3560, column: 14, scope: !5538)
!5540 = !DILocation(line: 3559, column: 43, scope: !5538)
!5541 = !DILocation(line: 3559, column: 18, scope: !5538)
!5542 = !DILocation(line: 3559, column: 30, scope: !5538)
!5543 = !{!5274, !2323, i64 32}
!5544 = !DILocation(line: 3560, column: 40, scope: !5538)
!5545 = !DILocation(line: 3559, column: 13, scope: !717)
!5546 = !DILocation(line: 3561, column: 13, scope: !5547)
!5547 = distinct !DILexicalBlock(scope: !5538, file: !637, line: 3560, column: 55)
!5548 = !DILocation(line: 3562, column: 13, scope: !5547)
!5549 = !DILocation(line: 3564, column: 30, scope: !717)
!5550 = !DILocation(line: 3564, column: 13, scope: !717)
!5551 = !DILocation(line: 3564, column: 28, scope: !717)
!5552 = !{!5274, !2320, i64 40}
!5553 = !DILocation(line: 3572, column: 16, scope: !717)
!5554 = !DILocation(line: 3572, column: 31, scope: !717)
!5555 = !DILocation(line: 3572, column: 9, scope: !717)
!5556 = !DILocation(line: 3574, column: 16, scope: !722)
!5557 = !DILocation(line: 3574, column: 14, scope: !722)
!5558 = !DILocation(line: 3574, column: 21, scope: !5559)
!5559 = !DILexicalBlockFile(scope: !5560, file: !637, discriminator: 2)
!5560 = !DILexicalBlockFile(scope: !721, file: !637, discriminator: 1)
!5561 = !DILocation(line: 3574, column: 25, scope: !721)
!5562 = !DILocation(line: 3574, column: 23, scope: !721)
!5563 = !DILocation(line: 3574, column: 9, scope: !722)
!5564 = !DILocation(line: 3575, column: 13, scope: !720)
!5565 = !DILocation(line: 3575, column: 20, scope: !720)
!5566 = !DILocation(line: 3575, column: 29, scope: !720)
!5567 = !DILocation(line: 3575, column: 46, scope: !720)
!5568 = !DILocation(line: 3575, column: 40, scope: !720)
!5569 = !DILocation(line: 3575, column: 49, scope: !720)
!5570 = !DILocation(line: 3575, column: 54, scope: !720)
!5571 = !DILocation(line: 3576, column: 13, scope: !720)
!5572 = !DILocation(line: 3576, column: 17, scope: !720)
!5573 = !DILocation(line: 3578, column: 22, scope: !720)
!5574 = !DILocation(line: 3578, column: 24, scope: !720)
!5575 = !DILocation(line: 3578, column: 21, scope: !720)
!5576 = !DILocation(line: 3578, column: 50, scope: !5577)
!5577 = !DILexicalBlockFile(scope: !720, file: !637, discriminator: 1)
!5578 = !DILocation(line: 3578, column: 65, scope: !720)
!5579 = !DILocation(line: 3578, column: 33, scope: !720)
!5580 = !DILocation(line: 3578, column: 121, scope: !5581)
!5581 = !DILexicalBlockFile(scope: !720, file: !637, discriminator: 3)
!5582 = !DILocation(line: 3578, column: 94, scope: !720)
!5583 = !DILocation(line: 3578, column: 33, scope: !5584)
!5584 = !DILexicalBlockFile(scope: !720, file: !637, discriminator: 4)
!5585 = !DILocation(line: 3578, column: 21, scope: !5586)
!5586 = !DILexicalBlockFile(scope: !5587, file: !637, discriminator: 6)
!5587 = !DILexicalBlockFile(scope: !720, file: !637, discriminator: 5)
!5588 = !DILocation(line: 3578, column: 180, scope: !5589)
!5589 = !DILexicalBlockFile(scope: !720, file: !637, discriminator: 2)
!5590 = !DILocation(line: 3578, column: 159, scope: !720)
!5591 = !DILocation(line: 3578, column: 19, scope: !5592)
!5592 = !DILexicalBlockFile(scope: !5593, file: !637, discriminator: 8)
!5593 = !DILexicalBlockFile(scope: !720, file: !637, discriminator: 7)
!5594 = !DILocation(line: 3579, column: 17, scope: !5595)
!5595 = distinct !DILexicalBlock(scope: !720, file: !637, line: 3579, column: 17)
!5596 = !DILocation(line: 3579, column: 23, scope: !5595)
!5597 = !DILocation(line: 3579, column: 17, scope: !720)
!5598 = !DILocation(line: 3580, column: 30, scope: !5599)
!5599 = distinct !DILexicalBlock(scope: !5595, file: !637, line: 3579, column: 38)
!5600 = !DILocation(line: 3582, column: 31, scope: !5599)
!5601 = !DILocation(line: 3582, column: 33, scope: !5599)
!5602 = !DILocation(line: 3582, column: 30, scope: !5599)
!5603 = !DILocation(line: 3580, column: 17, scope: !5599)
!5604 = !DILocation(line: 3583, column: 17, scope: !5599)
!5605 = !DILocation(line: 3585, column: 31, scope: !5606)
!5606 = distinct !DILexicalBlock(scope: !720, file: !637, line: 3585, column: 17)
!5607 = !DILocation(line: 3585, column: 18, scope: !5606)
!5608 = !DILocation(line: 3585, column: 17, scope: !720)
!5609 = !DILocation(line: 3586, column: 33, scope: !5610)
!5610 = distinct !DILexicalBlock(scope: !5606, file: !637, line: 3585, column: 52)
!5611 = !DILocation(line: 3586, column: 17, scope: !5610)
!5612 = !DILocation(line: 3588, column: 17, scope: !5610)
!5613 = !DILocation(line: 3590, column: 38, scope: !727)
!5614 = !DILocation(line: 3590, column: 45, scope: !727)
!5615 = !DILocation(line: 3590, column: 17, scope: !727)
!5616 = !DILocation(line: 3590, column: 17, scope: !720)
!5617 = !DILocation(line: 3591, column: 17, scope: !726)
!5618 = !DILocation(line: 3591, column: 24, scope: !726)
!5619 = !DILocation(line: 3593, column: 35, scope: !726)
!5620 = !DILocation(line: 3593, column: 17, scope: !726)
!5621 = !DILocation(line: 3593, column: 24, scope: !726)
!5622 = !DILocation(line: 3593, column: 33, scope: !726)
!5623 = !DILocation(line: 3594, column: 47, scope: !5624)
!5624 = distinct !DILexicalBlock(scope: !726, file: !637, line: 3594, column: 21)
!5625 = !DILocation(line: 3594, column: 21, scope: !5624)
!5626 = !DILocation(line: 3594, column: 21, scope: !726)
!5627 = !DILocation(line: 3595, column: 37, scope: !5624)
!5628 = !DILocation(line: 3595, column: 46, scope: !5624)
!5629 = !DILocation(line: 3595, column: 43, scope: !5624)
!5630 = !DILocation(line: 3595, column: 34, scope: !5624)
!5631 = !DILocation(line: 3595, column: 21, scope: !5624)
!5632 = !DILocation(line: 3596, column: 13, scope: !727)
!5633 = !DILocation(line: 3596, column: 13, scope: !726)
!5634 = !DILocation(line: 3597, column: 18, scope: !5635)
!5635 = distinct !DILexicalBlock(scope: !720, file: !637, line: 3597, column: 17)
!5636 = !DILocation(line: 3597, column: 17, scope: !720)
!5637 = !DILocation(line: 3598, column: 33, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5635, file: !637, line: 3597, column: 32)
!5639 = !DILocation(line: 3598, column: 17, scope: !5638)
!5640 = !DILocation(line: 3601, column: 17, scope: !5638)
!5641 = !DILocation(line: 3603, column: 39, scope: !720)
!5642 = !DILocation(line: 3603, column: 33, scope: !720)
!5643 = !DILocation(line: 3603, column: 42, scope: !720)
!5644 = !{!5503, !2950, i64 0}
!5645 = !DILocation(line: 3603, column: 13, scope: !720)
!5646 = !DILocation(line: 3603, column: 20, scope: !720)
!5647 = !DILocation(line: 3603, column: 31, scope: !720)
!5648 = !DILocation(line: 3604, column: 38, scope: !720)
!5649 = !DILocation(line: 3604, column: 32, scope: !720)
!5650 = !DILocation(line: 3604, column: 41, scope: !720)
!5651 = !{!5503, !2950, i64 4}
!5652 = !DILocation(line: 3604, column: 13, scope: !720)
!5653 = !DILocation(line: 3604, column: 20, scope: !720)
!5654 = !DILocation(line: 3604, column: 30, scope: !720)
!5655 = !DILocation(line: 3605, column: 22, scope: !720)
!5656 = !DILocation(line: 3605, column: 30, scope: !720)
!5657 = !DILocation(line: 3605, column: 13, scope: !720)
!5658 = !DILocation(line: 3605, column: 50, scope: !720)
!5659 = !DILocation(line: 3605, column: 44, scope: !720)
!5660 = !DILocation(line: 3605, column: 53, scope: !720)
!5661 = !DILocation(line: 3605, column: 58, scope: !720)
!5662 = !{!5503, !2323, i64 8}
!5663 = !DILocation(line: 3605, column: 63, scope: !720)
!5664 = !DILocation(line: 3606, column: 9, scope: !721)
!5665 = !DILocation(line: 3606, column: 9, scope: !5560)
!5666 = !DILocation(line: 3606, column: 9, scope: !720)
!5667 = !DILocation(line: 3574, column: 37, scope: !721)
!5668 = !DILocation(line: 3574, column: 9, scope: !721)
!5669 = !DILocation(line: 3607, column: 5, scope: !718)
!5670 = !DILocation(line: 3607, column: 5, scope: !5671)
!5671 = !DILexicalBlockFile(scope: !718, file: !637, discriminator: 1)
!5672 = !DILocation(line: 3607, column: 5, scope: !717)
!5673 = !DILocation(line: 3615, column: 7, scope: !729)
!5674 = !DILocation(line: 3615, column: 23, scope: !729)
!5675 = !DILocation(line: 3615, column: 28, scope: !729)
!5676 = !DILocation(line: 3615, column: 47, scope: !729)
!5677 = !DILocation(line: 3615, column: 54, scope: !729)
!5678 = !DILocation(line: 3615, column: 65, scope: !729)
!5679 = !DILocation(line: 3615, column: 68, scope: !729)
!5680 = !DILocation(line: 3615, column: 82, scope: !729)
!5681 = !DILocation(line: 3615, column: 86, scope: !729)
!5682 = !DILocation(line: 3615, column: 100, scope: !729)
!5683 = !DILocation(line: 3615, column: 103, scope: !729)
!5684 = !DILocation(line: 3615, column: 116, scope: !729)
!5685 = !DILocation(line: 3615, column: 127, scope: !5686)
!5686 = distinct !DILexicalBlock(scope: !729, file: !637, line: 3615, column: 127)
!5687 = !DILocation(line: 3615, column: 127, scope: !729)
!5688 = !DILocation(line: 3615, column: 142, scope: !5689)
!5689 = !DILexicalBlockFile(scope: !5690, file: !637, discriminator: 1)
!5690 = distinct !DILexicalBlock(scope: !5686, file: !637, line: 3615, column: 140)
!5691 = !DILocation(line: 3615, column: 181, scope: !5690)
!5692 = !DILocation(line: 3615, column: 186, scope: !5690)
!5693 = !DILocation(line: 3615, column: 227, scope: !5694)
!5694 = !DILexicalBlockFile(scope: !5695, file: !637, discriminator: 3)
!5695 = distinct !DILexicalBlock(scope: !5690, file: !637, line: 3615, column: 189)
!5696 = !DILocation(line: 3615, column: 230, scope: !5695)
!5697 = !DILocation(line: 3615, column: 220, scope: !5695)
!5698 = !DILocation(line: 3615, column: 245, scope: !5695)
!5699 = !DILocation(line: 3615, column: 248, scope: !5695)
!5700 = !DILocation(line: 3615, column: 243, scope: !5695)
!5701 = !DILocation(line: 3615, column: 262, scope: !5695)
!5702 = !DILocation(line: 3615, column: 211, scope: !5695)
!5703 = !DILocation(line: 3615, column: 200, scope: !5695)
!5704 = !DILocation(line: 3615, column: 208, scope: !5695)
!5705 = !DILocation(line: 3615, column: 302, scope: !5695)
!5706 = !DILocation(line: 3615, column: 305, scope: !5695)
!5707 = !DILocation(line: 3615, column: 293, scope: !5695)
!5708 = !DILocation(line: 3615, column: 339, scope: !5695)
!5709 = !DILocation(line: 3615, column: 347, scope: !5695)
!5710 = !DILocation(line: 3615, column: 318, scope: !5695)
!5711 = !DILocation(line: 3615, column: 283, scope: !5695)
!5712 = !DILocation(line: 3615, column: 290, scope: !5695)
!5713 = !DILocation(line: 3615, column: 368, scope: !5695)
!5714 = !DILocation(line: 3615, column: 376, scope: !5695)
!5715 = !DILocation(line: 3615, column: 388, scope: !5695)
!5716 = !DILocation(line: 3615, column: 388, scope: !5717)
!5717 = !DILexicalBlockFile(scope: !5695, file: !637, discriminator: 4)
!5718 = !DILocation(line: 3615, column: 401, scope: !5719)
!5719 = !DILexicalBlockFile(scope: !5690, file: !637, discriminator: 5)
!5720 = !DILocation(line: 3615, column: 403, scope: !5721)
!5721 = !DILexicalBlockFile(scope: !5722, file: !637, discriminator: 6)
!5722 = !DILexicalBlockFile(scope: !729, file: !637, discriminator: 2)
!5723 = !DILocation(line: 3615, column: 403, scope: !5724)
!5724 = !DILexicalBlockFile(scope: !5725, file: !637, discriminator: 9)
!5725 = !DILexicalBlockFile(scope: !729, file: !637, discriminator: 7)
!5726 = !DILocation(line: 3615, column: 417, scope: !5727)
!5727 = !DILexicalBlockFile(scope: !743, file: !637, discriminator: 8)
!5728 = !DILocation(line: 3615, column: 438, scope: !743)
!5729 = !DILocation(line: 3616, column: 7, scope: !742)
!5730 = !DILocation(line: 3616, column: 22, scope: !742)
!5731 = !DILocation(line: 3616, column: 37, scope: !742)
!5732 = !DILocation(line: 3616, column: 35, scope: !742)
!5733 = !DILocation(line: 3617, column: 34, scope: !742)
!5734 = !DILocation(line: 3617, column: 40, scope: !742)
!5735 = !DILocation(line: 3617, column: 15, scope: !742)
!5736 = !DILocation(line: 3617, column: 13, scope: !742)
!5737 = !DILocation(line: 3618, column: 10, scope: !5738)
!5738 = distinct !DILexicalBlock(scope: !742, file: !637, line: 3618, column: 9)
!5739 = !DILocation(line: 3618, column: 9, scope: !742)
!5740 = !DILocation(line: 3619, column: 30, scope: !5738)
!5741 = !DILocation(line: 3619, column: 33, scope: !5738)
!5742 = !DILocation(line: 3619, column: 48, scope: !5738)
!5743 = !DILocation(line: 3619, column: 22, scope: !5738)
!5744 = !DILocation(line: 3619, column: 20, scope: !5738)
!5745 = !DILocation(line: 3619, column: 9, scope: !5738)
!5746 = !DILocation(line: 3620, column: 26, scope: !742)
!5747 = !DILocation(line: 3620, column: 5, scope: !742)
!5748 = !DILocation(line: 3620, column: 34, scope: !743)
!5749 = !DILocation(line: 3621, column: 9, scope: !5750)
!5750 = distinct !DILexicalBlock(scope: !743, file: !637, line: 3621, column: 9)
!5751 = !DILocation(line: 3621, column: 17, scope: !5750)
!5752 = !DILocation(line: 3621, column: 9, scope: !743)
!5753 = !DILocation(line: 3622, column: 25, scope: !5754)
!5754 = distinct !DILexicalBlock(scope: !5750, file: !637, line: 3621, column: 23)
!5755 = !DILocation(line: 3622, column: 9, scope: !5754)
!5756 = !DILocation(line: 3623, column: 9, scope: !5754)
!5757 = !DILocation(line: 3625, column: 10, scope: !5758)
!5758 = distinct !DILexicalBlock(scope: !743, file: !637, line: 3625, column: 9)
!5759 = !DILocation(line: 3625, column: 22, scope: !5758)
!5760 = !DILocation(line: 3625, column: 30, scope: !5761)
!5761 = !DILexicalBlockFile(scope: !5758, file: !637, discriminator: 1)
!5762 = !DILocation(line: 3625, column: 29, scope: !5758)
!5763 = !DILocation(line: 3625, column: 51, scope: !5758)
!5764 = !DILocation(line: 3625, column: 58, scope: !5758)
!5765 = !DILocation(line: 3625, column: 65, scope: !5766)
!5766 = !DILexicalBlockFile(scope: !5758, file: !637, discriminator: 4)
!5767 = !DILocation(line: 3625, column: 64, scope: !5758)
!5768 = !DILocation(line: 3625, column: 86, scope: !5758)
!5769 = !DILocation(line: 3625, column: 9, scope: !743)
!5770 = !DILocation(line: 3625, column: 95, scope: !5771)
!5771 = !DILexicalBlockFile(scope: !5772, file: !637, discriminator: 6)
!5772 = !DILexicalBlockFile(scope: !5758, file: !637, discriminator: 2)
!5773 = !DILocation(line: 3625, column: 102, scope: !5774)
!5774 = !DILexicalBlockFile(scope: !5775, file: !637, discriminator: 5)
!5775 = !DILexicalBlockFile(scope: !743, file: !637, discriminator: 3)
!5776 = !DILocation(line: 3625, column: 152, scope: !743)
!5777 = !DILocation(line: 3625, column: 165, scope: !743)
!5778 = !DILocation(line: 3625, column: 159, scope: !743)
!5779 = !DILocation(line: 3625, column: 142, scope: !743)
!5780 = !DILocation(line: 3625, column: 185, scope: !743)
!5781 = !DILocation(line: 3625, column: 199, scope: !743)
!5782 = !DILocation(line: 3625, column: 193, scope: !743)
!5783 = !DILocation(line: 3625, column: 175, scope: !743)
!5784 = !DILocation(line: 3625, column: 208, scope: !743)
!5785 = !DILocation(line: 3625, column: 173, scope: !743)
!5786 = !DILocation(line: 3625, column: 139, scope: !743)
!5787 = !DILocation(line: 3615, column: 403, scope: !729)
!5788 = !DILocation(line: 3625, column: 223, scope: !5789)
!5789 = !DILexicalBlockFile(scope: !638, file: !637, discriminator: 7)
!5790 = !DILocation(line: 3625, column: 223, scope: !5791)
!5791 = !DILexicalBlockFile(scope: !638, file: !637, discriminator: 8)
!5792 = !DILocation(line: 3627, column: 9, scope: !5793)
!5793 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3627, column: 9)
!5794 = !DILocation(line: 3627, column: 20, scope: !5793)
!5795 = !DILocation(line: 3627, column: 9, scope: !638)
!5796 = !DILocation(line: 3628, column: 9, scope: !5797)
!5797 = distinct !DILexicalBlock(scope: !5793, file: !637, line: 3627, column: 25)
!5798 = !DILocation(line: 3628, column: 12, scope: !5797)
!5799 = !DILocation(line: 3629, column: 9, scope: !5797)
!5800 = !DILocation(line: 3631, column: 33, scope: !638)
!5801 = !DILocation(line: 3631, column: 14, scope: !638)
!5802 = !DILocation(line: 3631, column: 12, scope: !638)
!5803 = !DILocation(line: 3631, column: 5, scope: !638)
!5804 = !DILocation(line: 3634, column: 16, scope: !638)
!5805 = !DILocation(line: 3634, column: 5, scope: !638)
!5806 = !DILocation(line: 3635, column: 12, scope: !5807)
!5807 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3635, column: 5)
!5808 = !DILocation(line: 3635, column: 10, scope: !5807)
!5809 = !DILocation(line: 3635, column: 17, scope: !5810)
!5810 = !DILexicalBlockFile(scope: !5811, file: !637, discriminator: 2)
!5811 = !DILexicalBlockFile(scope: !5812, file: !637, discriminator: 1)
!5812 = distinct !DILexicalBlock(scope: !5807, file: !637, line: 3635, column: 5)
!5813 = !DILocation(line: 3635, column: 21, scope: !5812)
!5814 = !DILocation(line: 3635, column: 19, scope: !5812)
!5815 = !DILocation(line: 3635, column: 5, scope: !5807)
!5816 = !DILocation(line: 3636, column: 33, scope: !5812)
!5817 = !DILocation(line: 3636, column: 27, scope: !5812)
!5818 = !DILocation(line: 3636, column: 36, scope: !5812)
!5819 = !DILocation(line: 3636, column: 9, scope: !5812)
!5820 = !DILocation(line: 3635, column: 33, scope: !5812)
!5821 = !DILocation(line: 3635, column: 5, scope: !5812)
!5822 = !DILocation(line: 3637, column: 16, scope: !638)
!5823 = !DILocation(line: 3637, column: 5, scope: !638)
!5824 = !DILocation(line: 3638, column: 5, scope: !638)
!5825 = !DILocation(line: 3638, column: 10, scope: !5826)
!5826 = !DILexicalBlockFile(scope: !803, file: !637, discriminator: 1)
!5827 = !DILocation(line: 3638, column: 20, scope: !803)
!5828 = !DILocation(line: 3638, column: 51, scope: !803)
!5829 = !DILocation(line: 3638, column: 67, scope: !806)
!5830 = !DILocation(line: 3638, column: 83, scope: !806)
!5831 = !DILocation(line: 3638, column: 67, scope: !803)
!5832 = !DILocation(line: 3638, column: 98, scope: !5833)
!5833 = !DILexicalBlockFile(scope: !806, file: !637, discriminator: 2)
!5834 = !DILocation(line: 3638, column: 103, scope: !5835)
!5835 = !DILexicalBlockFile(scope: !805, file: !637, discriminator: 4)
!5836 = !DILocation(line: 3638, column: 113, scope: !805)
!5837 = !DILocation(line: 3638, column: 143, scope: !805)
!5838 = !DILocation(line: 3638, column: 169, scope: !5839)
!5839 = distinct !DILexicalBlock(scope: !805, file: !637, line: 3638, column: 166)
!5840 = !DILocation(line: 3638, column: 186, scope: !5839)
!5841 = !DILocation(line: 3638, column: 166, scope: !5839)
!5842 = !DILocation(line: 3638, column: 196, scope: !5839)
!5843 = !DILocation(line: 3638, column: 166, scope: !805)
!5844 = !DILocation(line: 3638, column: 166, scope: !5845)
!5845 = !DILexicalBlockFile(scope: !805, file: !637, discriminator: 5)
!5846 = !DILocation(line: 3638, column: 227, scope: !5847)
!5847 = !DILexicalBlockFile(scope: !5839, file: !637, discriminator: 6)
!5848 = !DILocation(line: 3638, column: 245, scope: !5839)
!5849 = !DILocation(line: 3638, column: 255, scope: !5839)
!5850 = !DILocation(line: 3638, column: 280, scope: !5839)
!5851 = !DILocation(line: 3638, column: 211, scope: !5839)
!5852 = !DILocation(line: 3638, column: 299, scope: !5853)
!5853 = !DILexicalBlockFile(scope: !806, file: !637, discriminator: 7)
!5854 = !DILocation(line: 3638, column: 299, scope: !805)
!5855 = !DILocation(line: 3638, column: 299, scope: !5856)
!5856 = !DILexicalBlockFile(scope: !805, file: !637, discriminator: 8)
!5857 = !DILocation(line: 3638, column: 299, scope: !5858)
!5858 = !DILexicalBlockFile(scope: !805, file: !637, discriminator: 9)
!5859 = !DILocation(line: 3638, column: 312, scope: !5860)
!5860 = !DILexicalBlockFile(scope: !5303, file: !637, discriminator: 10)
!5861 = !DILocation(line: 3638, column: 312, scope: !803)
!5862 = !DILocation(line: 3638, column: 312, scope: !5863)
!5863 = !DILexicalBlockFile(scope: !803, file: !637, discriminator: 11)
!5864 = !DILocation(line: 3639, column: 12, scope: !5865)
!5865 = distinct !DILexicalBlock(scope: !638, file: !637, line: 3639, column: 5)
!5866 = !DILocation(line: 3639, column: 10, scope: !5865)
!5867 = !DILocation(line: 3639, column: 17, scope: !5868)
!5868 = !DILexicalBlockFile(scope: !5869, file: !637, discriminator: 2)
!5869 = !DILexicalBlockFile(scope: !5870, file: !637, discriminator: 1)
!5870 = distinct !DILexicalBlock(scope: !5865, file: !637, line: 3639, column: 5)
!5871 = !DILocation(line: 3639, column: 21, scope: !5870)
!5872 = !DILocation(line: 3639, column: 19, scope: !5870)
!5873 = !DILocation(line: 3639, column: 5, scope: !5865)
!5874 = !DILocation(line: 3640, column: 36, scope: !5870)
!5875 = !DILocation(line: 3640, column: 27, scope: !5870)
!5876 = !DILocation(line: 3640, column: 9, scope: !5870)
!5877 = !DILocation(line: 3639, column: 33, scope: !5870)
!5878 = !DILocation(line: 3639, column: 5, scope: !5870)
!5879 = !DILocation(line: 3641, column: 16, scope: !638)
!5880 = !DILocation(line: 3641, column: 5, scope: !638)
!5881 = !DILocation(line: 3642, column: 16, scope: !638)
!5882 = !DILocation(line: 3642, column: 5, scope: !638)
!5883 = !DILocation(line: 3643, column: 5, scope: !638)
!5884 = !DILocation(line: 3643, column: 10, scope: !5885)
!5885 = !DILexicalBlockFile(scope: !808, file: !637, discriminator: 1)
!5886 = !DILocation(line: 3643, column: 20, scope: !808)
!5887 = !DILocation(line: 3643, column: 51, scope: !808)
!5888 = !DILocation(line: 3643, column: 67, scope: !811)
!5889 = !DILocation(line: 3643, column: 83, scope: !811)
!5890 = !DILocation(line: 3643, column: 67, scope: !808)
!5891 = !DILocation(line: 3643, column: 98, scope: !5892)
!5892 = !DILexicalBlockFile(scope: !811, file: !637, discriminator: 2)
!5893 = !DILocation(line: 3643, column: 103, scope: !5894)
!5894 = !DILexicalBlockFile(scope: !810, file: !637, discriminator: 4)
!5895 = !DILocation(line: 3643, column: 113, scope: !810)
!5896 = !DILocation(line: 3643, column: 143, scope: !810)
!5897 = !DILocation(line: 3643, column: 169, scope: !5898)
!5898 = distinct !DILexicalBlock(scope: !810, file: !637, line: 3643, column: 166)
!5899 = !DILocation(line: 3643, column: 186, scope: !5898)
!5900 = !DILocation(line: 3643, column: 166, scope: !5898)
!5901 = !DILocation(line: 3643, column: 196, scope: !5898)
!5902 = !DILocation(line: 3643, column: 166, scope: !810)
!5903 = !DILocation(line: 3643, column: 166, scope: !5904)
!5904 = !DILexicalBlockFile(scope: !810, file: !637, discriminator: 5)
!5905 = !DILocation(line: 3643, column: 227, scope: !5906)
!5906 = !DILexicalBlockFile(scope: !5898, file: !637, discriminator: 6)
!5907 = !DILocation(line: 3643, column: 245, scope: !5898)
!5908 = !DILocation(line: 3643, column: 255, scope: !5898)
!5909 = !DILocation(line: 3643, column: 280, scope: !5898)
!5910 = !DILocation(line: 3643, column: 211, scope: !5898)
!5911 = !DILocation(line: 3643, column: 299, scope: !5912)
!5912 = !DILexicalBlockFile(scope: !811, file: !637, discriminator: 7)
!5913 = !DILocation(line: 3643, column: 299, scope: !810)
!5914 = !DILocation(line: 3643, column: 299, scope: !5915)
!5915 = !DILexicalBlockFile(scope: !810, file: !637, discriminator: 8)
!5916 = !DILocation(line: 3643, column: 299, scope: !5917)
!5917 = !DILexicalBlockFile(scope: !810, file: !637, discriminator: 9)
!5918 = !DILocation(line: 3643, column: 312, scope: !5860)
!5919 = !DILocation(line: 3643, column: 312, scope: !808)
!5920 = !DILocation(line: 3643, column: 312, scope: !5921)
!5921 = !DILexicalBlockFile(scope: !808, file: !637, discriminator: 11)
!5922 = !DILocation(line: 3644, column: 12, scope: !638)
!5923 = !DILocation(line: 3644, column: 5, scope: !638)
!5924 = !DILocation(line: 3645, column: 1, scope: !638)
!5925 = !DILocation(line: 1716, column: 36, scope: !869)
!5926 = !DILocation(line: 1716, column: 50, scope: !869)
!5927 = !DILocation(line: 1718, column: 13, scope: !869)
!5928 = !DILocation(line: 1718, column: 16, scope: !869)
!5929 = !DILocation(line: 1723, column: 10, scope: !5930)
!5930 = distinct !DILexicalBlock(scope: !5931, file: !637, line: 1722, column: 5)
!5931 = distinct !DILexicalBlock(scope: !869, file: !637, line: 1718, column: 29)
!5932 = !DILocation(line: 1723, column: 18, scope: !5930)
!5933 = !DILocation(line: 1724, column: 9, scope: !5930)
!5934 = !DILocation(line: 1730, column: 13, scope: !5935)
!5935 = distinct !DILexicalBlock(scope: !5931, file: !637, line: 1729, column: 8)
!5936 = !DILocation(line: 1730, column: 21, scope: !5935)
!5937 = !DILocation(line: 1731, column: 12, scope: !5935)
!5938 = !DILocation(line: 1742, column: 10, scope: !5939)
!5939 = distinct !DILexicalBlock(scope: !5931, file: !637, line: 1741, column: 5)
!5940 = !DILocation(line: 1742, column: 18, scope: !5939)
!5941 = !DILocation(line: 1743, column: 9, scope: !5939)
!5942 = !DILocation(line: 1749, column: 10, scope: !5943)
!5943 = distinct !DILexicalBlock(scope: !5931, file: !637, line: 1748, column: 5)
!5944 = !DILocation(line: 1749, column: 18, scope: !5943)
!5945 = !DILocation(line: 1750, column: 9, scope: !5943)
!5946 = !DILocation(line: 1786, column: 10, scope: !5947)
!5947 = distinct !DILexicalBlock(scope: !5931, file: !637, line: 1785, column: 5)
!5948 = !DILocation(line: 1786, column: 18, scope: !5947)
!5949 = !DILocation(line: 1787, column: 9, scope: !5947)
!5950 = !DILocation(line: 1794, column: 10, scope: !5951)
!5951 = distinct !DILexicalBlock(scope: !5931, file: !637, line: 1793, column: 5)
!5952 = !DILocation(line: 1794, column: 18, scope: !5951)
!5953 = !DILocation(line: 1795, column: 9, scope: !5951)
!5954 = !DILocation(line: 1802, column: 10, scope: !5955)
!5955 = distinct !DILexicalBlock(scope: !5931, file: !637, line: 1801, column: 5)
!5956 = !DILocation(line: 1802, column: 18, scope: !5955)
!5957 = !DILocation(line: 1803, column: 9, scope: !5955)
!5958 = !DILocation(line: 1825, column: 25, scope: !5931)
!5959 = !DILocation(line: 1825, column: 9, scope: !5931)
!5960 = !DILocation(line: 1826, column: 9, scope: !5931)
!5961 = !DILocation(line: 1829, column: 1, scope: !869)
!5962 = !DILocation(line: 596, column: 40, scope: !876)
!5963 = !DILocation(line: 596, column: 47, scope: !876)
!5964 = !DILocation(line: 596, column: 63, scope: !876)
!5965 = !DILocation(line: 598, column: 5, scope: !876)
!5966 = !DILocation(line: 598, column: 9, scope: !876)
!5967 = !DILocation(line: 601, column: 9, scope: !5968)
!5968 = distinct !DILexicalBlock(scope: !876, file: !637, line: 601, column: 9)
!5969 = !DILocation(line: 601, column: 12, scope: !5968)
!5970 = !DILocation(line: 601, column: 25, scope: !5968)
!5971 = !DILocation(line: 601, column: 9, scope: !876)
!5972 = !DILocation(line: 602, column: 9, scope: !5968)
!5973 = !DILocation(line: 605, column: 9, scope: !5974)
!5974 = distinct !DILexicalBlock(scope: !876, file: !637, line: 605, column: 9)
!5975 = !DILocation(line: 605, column: 12, scope: !5974)
!5976 = !DILocation(line: 605, column: 20, scope: !5974)
!5977 = !DILocation(line: 605, column: 9, scope: !876)
!5978 = !DILocation(line: 606, column: 9, scope: !5974)
!5979 = !DILocation(line: 609, column: 9, scope: !5980)
!5980 = distinct !DILexicalBlock(scope: !876, file: !637, line: 609, column: 9)
!5981 = !DILocation(line: 609, column: 18, scope: !5980)
!5982 = !DILocation(line: 609, column: 9, scope: !876)
!5983 = !DILocation(line: 610, column: 9, scope: !5980)
!5984 = !DILocation(line: 616, column: 9, scope: !885)
!5985 = !DILocation(line: 616, column: 23, scope: !885)
!5986 = !DILocation(line: 617, column: 9, scope: !885)
!5987 = !DILocation(line: 617, column: 13, scope: !885)
!5988 = !DILocation(line: 619, column: 21, scope: !885)
!5989 = !DILocation(line: 619, column: 24, scope: !885)
!5990 = !DILocation(line: 619, column: 16, scope: !885)
!5991 = !DILocation(line: 619, column: 19, scope: !885)
!5992 = !{!5993, !2950, i64 0}
!5993 = !{!"pollfd", !2950, i64 0, !5994, i64 4, !5994, i64 6}
!5994 = !{!"short", !2321, i64 0}
!5995 = !DILocation(line: 620, column: 25, scope: !885)
!5996 = !DILocation(line: 620, column: 16, scope: !885)
!5997 = !DILocation(line: 620, column: 23, scope: !885)
!5998 = !{!5993, !5994, i64 4}
!5999 = !DILocation(line: 623, column: 25, scope: !885)
!6000 = !DILocation(line: 623, column: 34, scope: !885)
!6001 = !DILocation(line: 623, column: 41, scope: !885)
!6002 = !DILocation(line: 623, column: 19, scope: !885)
!6003 = !DILocation(line: 623, column: 17, scope: !885)
!6004 = !DILocation(line: 624, column: 30, scope: !885)
!6005 = !DILocation(line: 624, column: 13, scope: !885)
!6006 = !DILocation(line: 624, column: 11, scope: !885)
!6007 = !DILocation(line: 625, column: 5, scope: !876)
!6008 = !DILocation(line: 646, column: 9, scope: !6009)
!6009 = distinct !DILexicalBlock(scope: !876, file: !637, line: 646, column: 9)
!6010 = !DILocation(line: 646, column: 11, scope: !6009)
!6011 = !DILocation(line: 646, column: 9, scope: !876)
!6012 = !DILocation(line: 647, column: 9, scope: !6009)
!6013 = !DILocation(line: 648, column: 9, scope: !6014)
!6014 = distinct !DILexicalBlock(scope: !876, file: !637, line: 648, column: 9)
!6015 = !DILocation(line: 648, column: 11, scope: !6014)
!6016 = !DILocation(line: 648, column: 9, scope: !876)
!6017 = !DILocation(line: 649, column: 9, scope: !6014)
!6018 = !DILocation(line: 650, column: 5, scope: !876)
!6019 = !DILocation(line: 651, column: 1, scope: !876)
!6020 = !DILocation(line: 986, column: 23, scope: !893)
!6021 = !DILocation(line: 986, column: 48, scope: !893)
!6022 = !DILocation(line: 986, column: 61, scope: !893)
!6023 = !DILocation(line: 986, column: 74, scope: !893)
!6024 = !DILocation(line: 988, column: 9, scope: !6025)
!6025 = distinct !DILexicalBlock(scope: !893, file: !637, line: 988, column: 9)
!6026 = !DILocation(line: 988, column: 17, scope: !6025)
!6027 = !DILocation(line: 988, column: 9, scope: !893)
!6028 = !DILocation(line: 990, column: 55, scope: !6029)
!6029 = distinct !DILexicalBlock(scope: !6025, file: !637, line: 988, column: 23)
!6030 = !DILocation(line: 991, column: 9, scope: !6029)
!6031 = !DILocation(line: 994, column: 13, scope: !893)
!6032 = !DILocation(line: 994, column: 19, scope: !893)
!6033 = !{!6034, !5994, i64 0}
!6034 = !{!"sockaddr", !5994, i64 0, !2321, i64 2}
!6035 = !DILocation(line: 998, column: 9, scope: !902)
!6036 = !DILocation(line: 998, column: 29, scope: !902)
!6037 = !DILocation(line: 999, column: 9, scope: !902)
!6038 = !DILocation(line: 999, column: 19, scope: !902)
!6039 = !DILocation(line: 999, column: 40, scope: !902)
!6040 = !DILocation(line: 999, column: 29, scope: !902)
!6041 = !DILocation(line: 1000, column: 9, scope: !902)
!6042 = !DILocation(line: 1000, column: 19, scope: !902)
!6043 = !DILocation(line: 1001, column: 13, scope: !909)
!6044 = !DILocation(line: 1001, column: 13, scope: !902)
!6045 = !DILocation(line: 1002, column: 39, scope: !908)
!6046 = !DILocation(line: 1002, column: 17, scope: !908)
!6047 = !DILocation(line: 1002, column: 15, scope: !908)
!6048 = !DILocation(line: 1003, column: 39, scope: !908)
!6049 = !DILocation(line: 1003, column: 66, scope: !907)
!6050 = !DILocation(line: 1003, column: 94, scope: !907)
!6051 = !DILocation(line: 1003, column: 99, scope: !907)
!6052 = !DILocation(line: 1003, column: 127, scope: !907)
!6053 = !DILocation(line: 1003, column: 130, scope: !907)
!6054 = !{!6055, !5994, i64 2}
!6055 = !{!"sockaddr_in", !5994, i64 0, !5994, i64 2, !6056, i64 4, !2321, i64 8}
!6056 = !{!"in_addr", !2950, i64 0}
!6057 = !{!5994, !5994, i64 0}
!6058 = !DILocation(line: 1003, column: 300, scope: !6059)
!6059 = distinct !DILexicalBlock(scope: !907, file: !637, line: 1003, column: 145)
!6060 = !DILocation(line: 1003, column: 256, scope: !6059)
!6061 = !{i32 362802}
!6062 = !DILocation(line: 1003, column: 314, scope: !907)
!6063 = !DILocation(line: 1003, column: 170, scope: !6059)
!6064 = !DILocation(line: 1003, column: 319, scope: !908)
!6065 = !DILocation(line: 1003, column: 319, scope: !907)
!6066 = !DILocation(line: 1003, column: 48, scope: !908)
!6067 = !DILocation(line: 1003, column: 19, scope: !908)
!6068 = !DILocation(line: 1003, column: 17, scope: !908)
!6069 = !DILocation(line: 1004, column: 13, scope: !908)
!6070 = !DILocation(line: 1004, column: 18, scope: !6071)
!6071 = !DILexicalBlockFile(scope: !912, file: !637, discriminator: 1)
!6072 = !DILocation(line: 1004, column: 28, scope: !912)
!6073 = !DILocation(line: 1004, column: 58, scope: !912)
!6074 = !DILocation(line: 1004, column: 76, scope: !6075)
!6075 = distinct !DILexicalBlock(scope: !912, file: !637, line: 1004, column: 73)
!6076 = !DILocation(line: 1004, column: 93, scope: !6075)
!6077 = !DILocation(line: 1004, column: 73, scope: !6075)
!6078 = !DILocation(line: 1004, column: 103, scope: !6075)
!6079 = !DILocation(line: 1004, column: 73, scope: !912)
!6080 = !DILocation(line: 1004, column: 73, scope: !6081)
!6081 = !DILexicalBlockFile(scope: !912, file: !637, discriminator: 2)
!6082 = !DILocation(line: 1004, column: 134, scope: !6083)
!6083 = !DILexicalBlockFile(scope: !6075, file: !637, discriminator: 3)
!6084 = !DILocation(line: 1004, column: 152, scope: !6075)
!6085 = !DILocation(line: 1004, column: 162, scope: !6075)
!6086 = !DILocation(line: 1004, column: 187, scope: !6075)
!6087 = !DILocation(line: 1004, column: 118, scope: !6075)
!6088 = !DILocation(line: 1004, column: 206, scope: !6089)
!6089 = !DILexicalBlockFile(scope: !908, file: !637, discriminator: 4)
!6090 = !DILocation(line: 1004, column: 206, scope: !912)
!6091 = !DILocation(line: 1004, column: 206, scope: !6092)
!6092 = !DILexicalBlockFile(scope: !912, file: !637, discriminator: 5)
!6093 = !DILocation(line: 1005, column: 9, scope: !908)
!6094 = !DILocation(line: 1006, column: 16, scope: !902)
!6095 = !DILocation(line: 1006, column: 9, scope: !902)
!6096 = !DILocation(line: 1007, column: 5, scope: !903)
!6097 = !DILocation(line: 1012, column: 9, scope: !914)
!6098 = !DILocation(line: 1012, column: 29, scope: !914)
!6099 = !DILocation(line: 1012, column: 56, scope: !914)
!6100 = !DILocation(line: 1012, column: 33, scope: !914)
!6101 = !DILocation(line: 1014, column: 13, scope: !6102)
!6102 = distinct !DILexicalBlock(scope: !914, file: !637, line: 1014, column: 13)
!6103 = !DILocation(line: 1014, column: 16, scope: !6102)
!6104 = !{!2321, !2321, i64 0}
!6105 = !DILocation(line: 1014, column: 28, scope: !6102)
!6106 = !DILocation(line: 1014, column: 13, scope: !914)
!6107 = !DILocation(line: 1015, column: 21, scope: !6108)
!6108 = distinct !DILexicalBlock(scope: !6102, file: !637, line: 1014, column: 34)
!6109 = !DILocation(line: 1016, column: 46, scope: !6108)
!6110 = !DILocation(line: 1016, column: 49, scope: !6108)
!6111 = !DILocation(line: 1016, column: 59, scope: !6108)
!6112 = !DILocation(line: 1016, column: 20, scope: !6108)
!6113 = !DILocation(line: 1016, column: 13, scope: !6108)
!6114 = !DILocation(line: 1022, column: 46, scope: !6115)
!6115 = distinct !DILexicalBlock(scope: !6102, file: !637, line: 1020, column: 9)
!6116 = !DILocation(line: 1022, column: 49, scope: !6115)
!6117 = !DILocation(line: 1022, column: 20, scope: !6115)
!6118 = !DILocation(line: 1022, column: 13, scope: !6115)
!6119 = !DILocation(line: 1024, column: 5, scope: !903)
!6120 = !DILocation(line: 1030, column: 12, scope: !916)
!6121 = !DILocation(line: 1030, column: 32, scope: !916)
!6122 = !DILocation(line: 1030, column: 59, scope: !916)
!6123 = !DILocation(line: 1030, column: 36, scope: !916)
!6124 = !DILocation(line: 1031, column: 39, scope: !916)
!6125 = !DILocation(line: 1031, column: 42, scope: !916)
!6126 = !{!6127, !2950, i64 4}
!6127 = !{!"sockaddr_nl", !5994, i64 0, !5994, i64 2, !2950, i64 4, !2950, i64 8}
!6128 = !DILocation(line: 1031, column: 50, scope: !916)
!6129 = !DILocation(line: 1031, column: 53, scope: !916)
!6130 = !{!6127, !2950, i64 8}
!6131 = !DILocation(line: 1031, column: 19, scope: !916)
!6132 = !DILocation(line: 1031, column: 12, scope: !916)
!6133 = !DILocation(line: 1032, column: 8, scope: !903)
!6134 = !DILocation(line: 1038, column: 9, scope: !918)
!6135 = !DILocation(line: 1038, column: 30, scope: !918)
!6136 = !DILocation(line: 1039, column: 9, scope: !918)
!6137 = !DILocation(line: 1039, column: 19, scope: !918)
!6138 = !DILocation(line: 1039, column: 40, scope: !918)
!6139 = !DILocation(line: 1039, column: 29, scope: !918)
!6140 = !DILocation(line: 1040, column: 9, scope: !918)
!6141 = !DILocation(line: 1040, column: 19, scope: !918)
!6142 = !DILocation(line: 1041, column: 13, scope: !924)
!6143 = !DILocation(line: 1041, column: 13, scope: !918)
!6144 = !DILocation(line: 1042, column: 40, scope: !923)
!6145 = !DILocation(line: 1042, column: 17, scope: !923)
!6146 = !DILocation(line: 1042, column: 15, scope: !923)
!6147 = !DILocation(line: 1044, column: 33, scope: !923)
!6148 = !DILocation(line: 1045, column: 51, scope: !922)
!6149 = !DILocation(line: 1045, column: 79, scope: !922)
!6150 = !DILocation(line: 1045, column: 84, scope: !922)
!6151 = !DILocation(line: 1045, column: 112, scope: !922)
!6152 = !DILocation(line: 1045, column: 115, scope: !922)
!6153 = !{!6154, !5994, i64 2}
!6154 = !{!"sockaddr_in6", !5994, i64 0, !5994, i64 2, !2950, i64 4, !6155, i64 8, !2950, i64 24}
!6155 = !{!"in6_addr", !2321, i64 0}
!6156 = !DILocation(line: 1045, column: 286, scope: !6157)
!6157 = distinct !DILexicalBlock(scope: !922, file: !637, line: 1045, column: 131)
!6158 = !DILocation(line: 1045, column: 242, scope: !6157)
!6159 = !{i32 364196}
!6160 = !DILocation(line: 1045, column: 300, scope: !922)
!6161 = !DILocation(line: 1045, column: 156, scope: !6157)
!6162 = !DILocation(line: 1045, column: 305, scope: !923)
!6163 = !DILocation(line: 1045, column: 305, scope: !922)
!6164 = !DILocation(line: 1045, column: 33, scope: !923)
!6165 = !DILocation(line: 1046, column: 51, scope: !927)
!6166 = !DILocation(line: 1046, column: 73, scope: !927)
!6167 = !DILocation(line: 1046, column: 78, scope: !927)
!6168 = !DILocation(line: 1046, column: 85, scope: !927)
!6169 = !DILocation(line: 1046, column: 88, scope: !927)
!6170 = !{!6154, !2950, i64 4}
!6171 = !DILocation(line: 1046, column: 310, scope: !6172)
!6172 = distinct !DILexicalBlock(scope: !927, file: !637, line: 1046, column: 108)
!6173 = !DILocation(line: 1046, column: 270, scope: !6172)
!6174 = !{i32 364533}
!6175 = !DILocation(line: 1046, column: 317, scope: !927)
!6176 = !DILocation(line: 1046, column: 133, scope: !6172)
!6177 = !DILocation(line: 1046, column: 322, scope: !923)
!6178 = !DILocation(line: 1046, column: 322, scope: !927)
!6179 = !DILocation(line: 1047, column: 33, scope: !923)
!6180 = !DILocation(line: 1047, column: 36, scope: !923)
!6181 = !{!6154, !2950, i64 24}
!6182 = !DILocation(line: 1043, column: 19, scope: !923)
!6183 = !DILocation(line: 1043, column: 17, scope: !923)
!6184 = !DILocation(line: 1048, column: 13, scope: !923)
!6185 = !DILocation(line: 1048, column: 18, scope: !6186)
!6186 = !DILexicalBlockFile(scope: !930, file: !637, discriminator: 1)
!6187 = !DILocation(line: 1048, column: 28, scope: !930)
!6188 = !DILocation(line: 1048, column: 58, scope: !930)
!6189 = !DILocation(line: 1048, column: 76, scope: !6190)
!6190 = distinct !DILexicalBlock(scope: !930, file: !637, line: 1048, column: 73)
!6191 = !DILocation(line: 1048, column: 93, scope: !6190)
!6192 = !DILocation(line: 1048, column: 73, scope: !6190)
!6193 = !DILocation(line: 1048, column: 103, scope: !6190)
!6194 = !DILocation(line: 1048, column: 73, scope: !930)
!6195 = !DILocation(line: 1048, column: 73, scope: !6196)
!6196 = !DILexicalBlockFile(scope: !930, file: !637, discriminator: 2)
!6197 = !DILocation(line: 1048, column: 134, scope: !6198)
!6198 = !DILexicalBlockFile(scope: !6190, file: !637, discriminator: 3)
!6199 = !DILocation(line: 1048, column: 152, scope: !6190)
!6200 = !DILocation(line: 1048, column: 162, scope: !6190)
!6201 = !DILocation(line: 1048, column: 187, scope: !6190)
!6202 = !DILocation(line: 1048, column: 118, scope: !6190)
!6203 = !DILocation(line: 1048, column: 206, scope: !6204)
!6204 = !DILexicalBlockFile(scope: !923, file: !637, discriminator: 4)
!6205 = !DILocation(line: 1048, column: 206, scope: !930)
!6206 = !DILocation(line: 1048, column: 206, scope: !6207)
!6207 = !DILexicalBlockFile(scope: !930, file: !637, discriminator: 5)
!6208 = !DILocation(line: 1049, column: 9, scope: !923)
!6209 = !DILocation(line: 1050, column: 16, scope: !918)
!6210 = !DILocation(line: 1050, column: 9, scope: !918)
!6211 = !DILocation(line: 1051, column: 5, scope: !903)
!6212 = !DILocation(line: 1116, column: 9, scope: !932)
!6213 = !DILocation(line: 1116, column: 29, scope: !932)
!6214 = !DILocation(line: 1116, column: 55, scope: !932)
!6215 = !DILocation(line: 1116, column: 33, scope: !932)
!6216 = !DILocation(line: 1117, column: 9, scope: !932)
!6217 = !DILocation(line: 1117, column: 15, scope: !932)
!6218 = !DILocation(line: 1118, column: 9, scope: !932)
!6219 = !DILocation(line: 1118, column: 22, scope: !932)
!6220 = !DILocation(line: 1120, column: 13, scope: !6221)
!6221 = distinct !DILexicalBlock(scope: !932, file: !637, line: 1120, column: 13)
!6222 = !DILocation(line: 1120, column: 16, scope: !6221)
!6223 = !{!6224, !2950, i64 4}
!6224 = !{!"sockaddr_ll", !5994, i64 0, !5994, i64 2, !2950, i64 4, !5994, i64 8, !2321, i64 10, !2321, i64 11, !2321, i64 12}
!6225 = !DILocation(line: 1120, column: 13, scope: !932)
!6226 = !DILocation(line: 1121, column: 40, scope: !6227)
!6227 = distinct !DILexicalBlock(scope: !6221, file: !637, line: 1120, column: 29)
!6228 = !DILocation(line: 1121, column: 43, scope: !6227)
!6229 = !DILocation(line: 1121, column: 17, scope: !6227)
!6230 = !DILocation(line: 1121, column: 26, scope: !6227)
!6231 = !DILocation(line: 1121, column: 38, scope: !6227)
!6232 = !DILocation(line: 1122, column: 23, scope: !6233)
!6233 = distinct !DILexicalBlock(scope: !6227, file: !637, line: 1122, column: 17)
!6234 = !DILocation(line: 1122, column: 17, scope: !6233)
!6235 = !DILocation(line: 1122, column: 45, scope: !6233)
!6236 = !DILocation(line: 1122, column: 17, scope: !6227)
!6237 = !DILocation(line: 1123, column: 30, scope: !6233)
!6238 = !DILocation(line: 1123, column: 39, scope: !6233)
!6239 = !DILocation(line: 1123, column: 26, scope: !6233)
!6240 = !DILocation(line: 1123, column: 24, scope: !6233)
!6241 = !DILocation(line: 1123, column: 17, scope: !6233)
!6242 = !DILocation(line: 1124, column: 9, scope: !6227)
!6243 = !DILocation(line: 1126, column: 30, scope: !932)
!6244 = !DILocation(line: 1127, column: 48, scope: !968)
!6245 = !DILocation(line: 1127, column: 76, scope: !968)
!6246 = !DILocation(line: 1127, column: 81, scope: !968)
!6247 = !DILocation(line: 1127, column: 109, scope: !968)
!6248 = !DILocation(line: 1127, column: 112, scope: !968)
!6249 = !{!6224, !5994, i64 2}
!6250 = !DILocation(line: 1127, column: 286, scope: !6251)
!6251 = distinct !DILexicalBlock(scope: !968, file: !637, line: 1127, column: 131)
!6252 = !DILocation(line: 1127, column: 242, scope: !6251)
!6253 = !{i32 365625}
!6254 = !DILocation(line: 1127, column: 300, scope: !968)
!6255 = !DILocation(line: 1127, column: 156, scope: !6251)
!6256 = !DILocation(line: 1127, column: 305, scope: !932)
!6257 = !DILocation(line: 1127, column: 305, scope: !968)
!6258 = !DILocation(line: 1127, column: 30, scope: !932)
!6259 = !DILocation(line: 1128, column: 30, scope: !932)
!6260 = !DILocation(line: 1128, column: 33, scope: !932)
!6261 = !{!6224, !2321, i64 10}
!6262 = !DILocation(line: 1129, column: 30, scope: !932)
!6263 = !DILocation(line: 1129, column: 33, scope: !932)
!6264 = !{!6224, !5994, i64 8}
!6265 = !DILocation(line: 1130, column: 30, scope: !932)
!6266 = !DILocation(line: 1130, column: 33, scope: !932)
!6267 = !DILocation(line: 1131, column: 30, scope: !932)
!6268 = !DILocation(line: 1131, column: 33, scope: !932)
!6269 = !{!6224, !2321, i64 11}
!6270 = !DILocation(line: 1125, column: 16, scope: !932)
!6271 = !DILocation(line: 1125, column: 9, scope: !932)
!6272 = !DILocation(line: 1132, column: 5, scope: !903)
!6273 = !DILocation(line: 1138, column: 9, scope: !971)
!6274 = !DILocation(line: 1138, column: 31, scope: !971)
!6275 = !DILocation(line: 1138, column: 60, scope: !971)
!6276 = !DILocation(line: 1138, column: 35, scope: !971)
!6277 = !DILocation(line: 1139, column: 13, scope: !6278)
!6278 = distinct !DILexicalBlock(scope: !971, file: !637, line: 1139, column: 13)
!6279 = !DILocation(line: 1139, column: 16, scope: !6278)
!6280 = !{!6281, !2321, i64 2}
!6281 = !{!"sockaddr_tipc", !5994, i64 0, !2321, i64 2, !2321, i64 3, !2321, i64 4}
!6282 = !DILocation(line: 1139, column: 25, scope: !6278)
!6283 = !DILocation(line: 1139, column: 13, scope: !971)
!6284 = !DILocation(line: 1141, column: 29, scope: !6285)
!6285 = distinct !DILexicalBlock(scope: !6278, file: !637, line: 1139, column: 31)
!6286 = !DILocation(line: 1141, column: 32, scope: !6285)
!6287 = !DILocation(line: 1142, column: 29, scope: !6285)
!6288 = !DILocation(line: 1142, column: 32, scope: !6285)
!6289 = !DILocation(line: 1142, column: 37, scope: !6285)
!6290 = !DILocation(line: 1142, column: 45, scope: !6285)
!6291 = !{!6292, !2950, i64 0}
!6292 = !{!"tipc_name_seq", !2950, i64 0, !2950, i64 4, !2950, i64 8}
!6293 = !DILocation(line: 1143, column: 29, scope: !6285)
!6294 = !DILocation(line: 1143, column: 32, scope: !6285)
!6295 = !DILocation(line: 1143, column: 37, scope: !6285)
!6296 = !DILocation(line: 1143, column: 45, scope: !6285)
!6297 = !{!6292, !2950, i64 4}
!6298 = !DILocation(line: 1144, column: 29, scope: !6285)
!6299 = !DILocation(line: 1144, column: 32, scope: !6285)
!6300 = !DILocation(line: 1144, column: 37, scope: !6285)
!6301 = !DILocation(line: 1144, column: 45, scope: !6285)
!6302 = !{!6292, !2950, i64 8}
!6303 = !DILocation(line: 1145, column: 29, scope: !6285)
!6304 = !DILocation(line: 1145, column: 32, scope: !6285)
!6305 = !{!6281, !2321, i64 3}
!6306 = !DILocation(line: 1140, column: 20, scope: !6285)
!6307 = !DILocation(line: 1140, column: 13, scope: !6285)
!6308 = !DILocation(line: 1146, column: 20, scope: !6309)
!6309 = distinct !DILexicalBlock(scope: !6278, file: !637, line: 1146, column: 20)
!6310 = !DILocation(line: 1146, column: 23, scope: !6309)
!6311 = !DILocation(line: 1146, column: 32, scope: !6309)
!6312 = !DILocation(line: 1146, column: 20, scope: !6278)
!6313 = !DILocation(line: 1148, column: 29, scope: !6314)
!6314 = distinct !DILexicalBlock(scope: !6309, file: !637, line: 1146, column: 38)
!6315 = !DILocation(line: 1148, column: 32, scope: !6314)
!6316 = !DILocation(line: 1149, column: 29, scope: !6314)
!6317 = !DILocation(line: 1149, column: 32, scope: !6314)
!6318 = !DILocation(line: 1149, column: 37, scope: !6314)
!6319 = !DILocation(line: 1149, column: 42, scope: !6314)
!6320 = !DILocation(line: 1149, column: 47, scope: !6314)
!6321 = !{!6322, !2950, i64 0}
!6322 = !{!"", !6323, i64 0, !2950, i64 8}
!6323 = !{!"tipc_name", !2950, i64 0, !2950, i64 4}
!6324 = !DILocation(line: 1150, column: 29, scope: !6314)
!6325 = !DILocation(line: 1150, column: 32, scope: !6314)
!6326 = !DILocation(line: 1150, column: 37, scope: !6314)
!6327 = !DILocation(line: 1150, column: 42, scope: !6314)
!6328 = !DILocation(line: 1150, column: 47, scope: !6314)
!6329 = !{!6322, !2950, i64 4}
!6330 = !DILocation(line: 1151, column: 29, scope: !6314)
!6331 = !DILocation(line: 1151, column: 32, scope: !6314)
!6332 = !DILocation(line: 1151, column: 37, scope: !6314)
!6333 = !DILocation(line: 1151, column: 42, scope: !6314)
!6334 = !DILocation(line: 1151, column: 47, scope: !6314)
!6335 = !DILocation(line: 1152, column: 29, scope: !6314)
!6336 = !DILocation(line: 1152, column: 32, scope: !6314)
!6337 = !DILocation(line: 1147, column: 20, scope: !6314)
!6338 = !DILocation(line: 1147, column: 13, scope: !6314)
!6339 = !DILocation(line: 1153, column: 20, scope: !6340)
!6340 = distinct !DILexicalBlock(scope: !6309, file: !637, line: 1153, column: 20)
!6341 = !DILocation(line: 1153, column: 23, scope: !6340)
!6342 = !DILocation(line: 1153, column: 32, scope: !6340)
!6343 = !DILocation(line: 1153, column: 20, scope: !6309)
!6344 = !DILocation(line: 1155, column: 29, scope: !6345)
!6345 = distinct !DILexicalBlock(scope: !6340, file: !637, line: 1153, column: 38)
!6346 = !DILocation(line: 1155, column: 32, scope: !6345)
!6347 = !DILocation(line: 1156, column: 29, scope: !6345)
!6348 = !DILocation(line: 1156, column: 32, scope: !6345)
!6349 = !DILocation(line: 1156, column: 37, scope: !6345)
!6350 = !DILocation(line: 1156, column: 40, scope: !6345)
!6351 = !{!6352, !2950, i64 4}
!6352 = !{!"tipc_portid", !2950, i64 0, !2950, i64 4}
!6353 = !DILocation(line: 1157, column: 29, scope: !6345)
!6354 = !DILocation(line: 1157, column: 32, scope: !6345)
!6355 = !DILocation(line: 1157, column: 37, scope: !6345)
!6356 = !DILocation(line: 1157, column: 40, scope: !6345)
!6357 = !{!6352, !2950, i64 0}
!6358 = !DILocation(line: 1159, column: 29, scope: !6345)
!6359 = !DILocation(line: 1159, column: 32, scope: !6345)
!6360 = !DILocation(line: 1154, column: 20, scope: !6345)
!6361 = !DILocation(line: 1154, column: 13, scope: !6345)
!6362 = !DILocation(line: 1161, column: 29, scope: !6363)
!6363 = distinct !DILexicalBlock(scope: !6340, file: !637, line: 1160, column: 16)
!6364 = !DILocation(line: 1161, column: 13, scope: !6363)
!6365 = !DILocation(line: 1163, column: 13, scope: !6363)
!6366 = !DILocation(line: 1165, column: 5, scope: !903)
!6367 = !DILocation(line: 1171, column: 9, scope: !973)
!6368 = !DILocation(line: 1171, column: 30, scope: !973)
!6369 = !DILocation(line: 1171, column: 57, scope: !973)
!6370 = !DILocation(line: 1171, column: 34, scope: !973)
!6371 = !DILocation(line: 1172, column: 9, scope: !973)
!6372 = !DILocation(line: 1172, column: 15, scope: !973)
!6373 = !DILocation(line: 1173, column: 9, scope: !973)
!6374 = !DILocation(line: 1173, column: 22, scope: !973)
!6375 = !DILocation(line: 1175, column: 13, scope: !6376)
!6376 = distinct !DILexicalBlock(scope: !973, file: !637, line: 1175, column: 13)
!6377 = !DILocation(line: 1175, column: 16, scope: !6376)
!6378 = !{!6379, !2950, i64 4}
!6379 = !{!"sockaddr_can", !5994, i64 0, !2950, i64 4, !2321, i64 8}
!6380 = !DILocation(line: 1175, column: 13, scope: !973)
!6381 = !DILocation(line: 1176, column: 40, scope: !6382)
!6382 = distinct !DILexicalBlock(scope: !6376, file: !637, line: 1175, column: 29)
!6383 = !DILocation(line: 1176, column: 43, scope: !6382)
!6384 = !DILocation(line: 1176, column: 17, scope: !6382)
!6385 = !DILocation(line: 1176, column: 26, scope: !6382)
!6386 = !DILocation(line: 1176, column: 38, scope: !6382)
!6387 = !DILocation(line: 1177, column: 23, scope: !6388)
!6388 = distinct !DILexicalBlock(scope: !6382, file: !637, line: 1177, column: 17)
!6389 = !DILocation(line: 1177, column: 17, scope: !6388)
!6390 = !DILocation(line: 1177, column: 45, scope: !6388)
!6391 = !DILocation(line: 1177, column: 17, scope: !6382)
!6392 = !DILocation(line: 1178, column: 30, scope: !6388)
!6393 = !DILocation(line: 1178, column: 39, scope: !6388)
!6394 = !DILocation(line: 1178, column: 26, scope: !6388)
!6395 = !DILocation(line: 1178, column: 24, scope: !6388)
!6396 = !DILocation(line: 1178, column: 17, scope: !6388)
!6397 = !DILocation(line: 1179, column: 9, scope: !6382)
!6398 = !DILocation(line: 1182, column: 37, scope: !973)
!6399 = !DILocation(line: 1183, column: 37, scope: !973)
!6400 = !DILocation(line: 1183, column: 40, scope: !973)
!6401 = !{!6379, !5994, i64 0}
!6402 = !DILocation(line: 1181, column: 16, scope: !973)
!6403 = !DILocation(line: 1181, column: 9, scope: !973)
!6404 = !DILocation(line: 1184, column: 5, scope: !903)
!6405 = !DILocation(line: 1210, column: 30, scope: !903)
!6406 = !DILocation(line: 1210, column: 36, scope: !903)
!6407 = !DILocation(line: 1211, column: 30, scope: !903)
!6408 = !DILocation(line: 1211, column: 36, scope: !903)
!6409 = !DILocation(line: 1209, column: 16, scope: !903)
!6410 = !DILocation(line: 1209, column: 9, scope: !903)
!6411 = !DILocation(line: 1215, column: 1, scope: !893)
!6412 = !DILocation(line: 919, column: 29, scope: !976)
!6413 = !DILocation(line: 919, column: 39, scope: !976)
!6414 = !DILocation(line: 921, column: 5, scope: !976)
!6415 = !DILocation(line: 921, column: 10, scope: !976)
!6416 = !DILocation(line: 922, column: 5, scope: !976)
!6417 = !DILocation(line: 922, column: 9, scope: !976)
!6418 = !DILocation(line: 924, column: 25, scope: !976)
!6419 = !DILocation(line: 924, column: 31, scope: !976)
!6420 = !DILocation(line: 924, column: 40, scope: !976)
!6421 = !DILocation(line: 924, column: 13, scope: !976)
!6422 = !DILocation(line: 924, column: 11, scope: !976)
!6423 = !DILocation(line: 926, column: 9, scope: !6424)
!6424 = distinct !DILexicalBlock(scope: !976, file: !637, line: 926, column: 9)
!6425 = !DILocation(line: 926, column: 9, scope: !976)
!6426 = !DILocation(line: 927, column: 22, scope: !6427)
!6427 = distinct !DILexicalBlock(scope: !6424, file: !637, line: 926, column: 16)
!6428 = !DILocation(line: 927, column: 9, scope: !6427)
!6429 = !DILocation(line: 928, column: 9, scope: !6427)
!6430 = !DILocation(line: 930, column: 33, scope: !976)
!6431 = !DILocation(line: 930, column: 12, scope: !976)
!6432 = !DILocation(line: 930, column: 5, scope: !976)
!6433 = !DILocation(line: 931, column: 1, scope: !976)
!6434 = !DILocation(line: 527, column: 18, scope: !987)
!6435 = !DILocation(line: 529, column: 5, scope: !987)
!6436 = !DILocation(line: 529, column: 15, scope: !987)
!6437 = !DILocation(line: 533, column: 9, scope: !6438)
!6438 = distinct !DILexicalBlock(scope: !987, file: !637, line: 533, column: 9)
!6439 = !DILocation(line: 533, column: 15, scope: !6438)
!6440 = !DILocation(line: 533, column: 9, scope: !987)
!6441 = !DILocation(line: 534, column: 16, scope: !6438)
!6442 = !DILocation(line: 534, column: 9, scope: !6438)
!6443 = !DILocation(line: 538, column: 31, scope: !987)
!6444 = !DILocation(line: 538, column: 51, scope: !987)
!6445 = !DILocation(line: 538, column: 38, scope: !987)
!6446 = !DILocation(line: 538, column: 9, scope: !987)
!6447 = !DILocation(line: 538, column: 7, scope: !987)
!6448 = !DILocation(line: 542, column: 9, scope: !996)
!6449 = !DILocation(line: 542, column: 11, scope: !996)
!6450 = !DILocation(line: 542, column: 9, scope: !987)
!6451 = !DILocation(line: 543, column: 25, scope: !995)
!6452 = !DILocation(line: 543, column: 42, scope: !995)
!6453 = !DILocation(line: 543, column: 9, scope: !995)
!6454 = !DILocation(line: 544, column: 9, scope: !995)
!6455 = !DILocation(line: 544, column: 14, scope: !6456)
!6456 = !DILexicalBlockFile(scope: !994, file: !637, discriminator: 1)
!6457 = !DILocation(line: 544, column: 24, scope: !994)
!6458 = !DILocation(line: 544, column: 54, scope: !994)
!6459 = !DILocation(line: 544, column: 66, scope: !6460)
!6460 = distinct !DILexicalBlock(scope: !994, file: !637, line: 544, column: 63)
!6461 = !DILocation(line: 544, column: 83, scope: !6460)
!6462 = !DILocation(line: 544, column: 63, scope: !6460)
!6463 = !DILocation(line: 544, column: 93, scope: !6460)
!6464 = !DILocation(line: 544, column: 63, scope: !994)
!6465 = !DILocation(line: 544, column: 63, scope: !6466)
!6466 = !DILexicalBlockFile(scope: !994, file: !637, discriminator: 2)
!6467 = !DILocation(line: 544, column: 124, scope: !6468)
!6468 = !DILexicalBlockFile(scope: !6460, file: !637, discriminator: 3)
!6469 = !DILocation(line: 544, column: 142, scope: !6460)
!6470 = !DILocation(line: 544, column: 152, scope: !6460)
!6471 = !DILocation(line: 544, column: 177, scope: !6460)
!6472 = !DILocation(line: 544, column: 108, scope: !6460)
!6473 = !DILocation(line: 544, column: 196, scope: !6474)
!6474 = !DILexicalBlockFile(scope: !995, file: !637, discriminator: 4)
!6475 = !DILocation(line: 544, column: 196, scope: !994)
!6476 = !DILocation(line: 544, column: 196, scope: !6477)
!6477 = !DILexicalBlockFile(scope: !994, file: !637, discriminator: 5)
!6478 = !DILocation(line: 545, column: 5, scope: !995)
!6479 = !DILocation(line: 547, column: 5, scope: !987)
!6480 = !DILocation(line: 548, column: 1, scope: !987)
!6481 = !DILocation(line: 503, column: 31, scope: !997)
!6482 = !DILocation(line: 503, column: 12, scope: !997)
!6483 = !DILocation(line: 503, column: 5, scope: !997)
!6484 = !DILocation(line: 1224, column: 36, scope: !1007)
!6485 = !DILocation(line: 1224, column: 49, scope: !1007)
!6486 = !DILocation(line: 1225, column: 33, scope: !1007)
!6487 = !DILocation(line: 1225, column: 48, scope: !1007)
!6488 = !DILocation(line: 1227, column: 13, scope: !1007)
!6489 = !DILocation(line: 1227, column: 16, scope: !1007)
!6490 = !DILocation(line: 1232, column: 9, scope: !1016)
!6491 = !DILocation(line: 1232, column: 29, scope: !1016)
!6492 = !DILocation(line: 1233, column: 9, scope: !1016)
!6493 = !DILocation(line: 1233, column: 15, scope: !1016)
!6494 = !DILocation(line: 1234, column: 9, scope: !1016)
!6495 = !DILocation(line: 1234, column: 13, scope: !1016)
!6496 = !DILocation(line: 1235, column: 9, scope: !1016)
!6497 = !DILocation(line: 1235, column: 13, scope: !1016)
!6498 = !DILocation(line: 1239, column: 30, scope: !6499)
!6499 = distinct !DILexicalBlock(scope: !1016, file: !637, line: 1239, column: 13)
!6500 = !DILocation(line: 1239, column: 38, scope: !6499)
!6501 = !DILocation(line: 1239, column: 49, scope: !6499)
!6502 = !DILocation(line: 1239, column: 58, scope: !6499)
!6503 = !DILocation(line: 1239, column: 75, scope: !6499)
!6504 = !DILocation(line: 1239, column: 13, scope: !1016)
!6505 = !DILocation(line: 1240, column: 51, scope: !6506)
!6506 = distinct !DILexicalBlock(scope: !6507, file: !637, line: 1240, column: 17)
!6507 = distinct !DILexicalBlock(scope: !6499, file: !637, line: 1239, column: 82)
!6508 = !DILocation(line: 1240, column: 25, scope: !6506)
!6509 = !DILocation(line: 1240, column: 23, scope: !6506)
!6510 = !DILocation(line: 1240, column: 58, scope: !6506)
!6511 = !DILocation(line: 1240, column: 17, scope: !6507)
!6512 = !DILocation(line: 1241, column: 17, scope: !6506)
!6513 = !DILocation(line: 1242, column: 9, scope: !6507)
!6514 = !DILocation(line: 1244, column: 29, scope: !6499)
!6515 = !DILocation(line: 1244, column: 37, scope: !6499)
!6516 = !DILocation(line: 1244, column: 46, scope: !6499)
!6517 = !DILocation(line: 1245, column: 26, scope: !6518)
!6518 = distinct !DILexicalBlock(scope: !1016, file: !637, line: 1245, column: 13)
!6519 = !DILocation(line: 1245, column: 14, scope: !6518)
!6520 = !DILocation(line: 1245, column: 13, scope: !1016)
!6521 = !DILocation(line: 1246, column: 13, scope: !6518)
!6522 = !DILocation(line: 1248, column: 37, scope: !1016)
!6523 = !DILocation(line: 1248, column: 16, scope: !1016)
!6524 = !DILocation(line: 1248, column: 14, scope: !1016)
!6525 = !DILocation(line: 1250, column: 13, scope: !6526)
!6526 = distinct !DILexicalBlock(scope: !1016, file: !637, line: 1250, column: 13)
!6527 = !DILocation(line: 1250, column: 17, scope: !6526)
!6528 = !DILocation(line: 1250, column: 21, scope: !6526)
!6529 = !DILocation(line: 1250, column: 24, scope: !6530)
!6530 = !DILexicalBlockFile(scope: !6526, file: !637, discriminator: 1)
!6531 = !DILocation(line: 1250, column: 32, scope: !6526)
!6532 = !DILocation(line: 1250, column: 13, scope: !1016)
!6533 = !DILocation(line: 1252, column: 17, scope: !6534)
!6534 = distinct !DILexicalBlock(scope: !6535, file: !637, line: 1252, column: 17)
!6535 = distinct !DILexicalBlock(scope: !6526, file: !637, line: 1250, column: 38)
!6536 = !DILocation(line: 1252, column: 21, scope: !6534)
!6537 = !DILocation(line: 1252, column: 17, scope: !6535)
!6538 = !DILocation(line: 1253, column: 33, scope: !6539)
!6539 = distinct !DILexicalBlock(scope: !6534, file: !637, line: 1252, column: 46)
!6540 = !DILocation(line: 1253, column: 17, scope: !6539)
!6541 = !DILocation(line: 1255, column: 17, scope: !6539)
!6542 = !DILocation(line: 1257, column: 9, scope: !6535)
!6543 = !DILocation(line: 1262, column: 17, scope: !6544)
!6544 = distinct !DILexicalBlock(scope: !6545, file: !637, line: 1262, column: 17)
!6545 = distinct !DILexicalBlock(scope: !6526, file: !637, line: 1260, column: 9)
!6546 = !DILocation(line: 1262, column: 21, scope: !6544)
!6547 = !DILocation(line: 1262, column: 17, scope: !6545)
!6548 = !DILocation(line: 1263, column: 33, scope: !6549)
!6549 = distinct !DILexicalBlock(scope: !6544, file: !637, line: 1262, column: 47)
!6550 = !DILocation(line: 1263, column: 17, scope: !6549)
!6551 = !DILocation(line: 1265, column: 17, scope: !6549)
!6552 = !DILocation(line: 1267, column: 28, scope: !6545)
!6553 = !DILocation(line: 1267, column: 13, scope: !6545)
!6554 = !DILocation(line: 1267, column: 19, scope: !6545)
!6555 = !DILocation(line: 1267, column: 33, scope: !6545)
!6556 = !DILocation(line: 1269, column: 28, scope: !1016)
!6557 = !DILocation(line: 1269, column: 31, scope: !1016)
!6558 = !DILocation(line: 1269, column: 9, scope: !1016)
!6559 = !DILocation(line: 1269, column: 15, scope: !1016)
!6560 = !DILocation(line: 1269, column: 26, scope: !1016)
!6561 = !{!6562, !5994, i64 0}
!6562 = !{!"sockaddr_un", !5994, i64 0, !2321, i64 2}
!6563 = !DILocation(line: 1270, column: 16, scope: !1016)
!6564 = !DILocation(line: 1270, column: 22, scope: !1016)
!6565 = !DILocation(line: 1270, column: 9, scope: !1016)
!6566 = !DILocation(line: 1270, column: 32, scope: !1016)
!6567 = !DILocation(line: 1270, column: 38, scope: !1016)
!6568 = !DILocation(line: 1271, column: 20, scope: !1016)
!6569 = !DILocation(line: 1271, column: 24, scope: !1016)
!6570 = !DILocation(line: 1271, column: 10, scope: !1016)
!6571 = !DILocation(line: 1271, column: 18, scope: !1016)
!6572 = !DILocation(line: 1272, column: 16, scope: !1016)
!6573 = !DILocation(line: 1272, column: 9, scope: !1016)
!6574 = !DILocation(line: 1274, column: 9, scope: !1016)
!6575 = !DILocation(line: 1274, column: 14, scope: !6576)
!6576 = !DILexicalBlockFile(scope: !1022, file: !637, discriminator: 1)
!6577 = !DILocation(line: 1274, column: 24, scope: !1022)
!6578 = !DILocation(line: 1274, column: 54, scope: !1022)
!6579 = !DILocation(line: 1274, column: 69, scope: !6580)
!6580 = distinct !DILexicalBlock(scope: !1022, file: !637, line: 1274, column: 66)
!6581 = !DILocation(line: 1274, column: 86, scope: !6580)
!6582 = !DILocation(line: 1274, column: 66, scope: !6580)
!6583 = !DILocation(line: 1274, column: 96, scope: !6580)
!6584 = !DILocation(line: 1274, column: 66, scope: !1022)
!6585 = !DILocation(line: 1274, column: 66, scope: !6586)
!6586 = !DILexicalBlockFile(scope: !1022, file: !637, discriminator: 2)
!6587 = !DILocation(line: 1274, column: 127, scope: !6588)
!6588 = !DILexicalBlockFile(scope: !6580, file: !637, discriminator: 3)
!6589 = !DILocation(line: 1274, column: 145, scope: !6580)
!6590 = !DILocation(line: 1274, column: 155, scope: !6580)
!6591 = !DILocation(line: 1274, column: 180, scope: !6580)
!6592 = !DILocation(line: 1274, column: 111, scope: !6580)
!6593 = !DILocation(line: 1274, column: 199, scope: !6594)
!6594 = !DILexicalBlockFile(scope: !1016, file: !637, discriminator: 4)
!6595 = !DILocation(line: 1274, column: 199, scope: !1022)
!6596 = !DILocation(line: 1274, column: 199, scope: !6597)
!6597 = !DILexicalBlockFile(scope: !1022, file: !637, discriminator: 5)
!6598 = !DILocation(line: 1275, column: 16, scope: !1016)
!6599 = !DILocation(line: 1275, column: 9, scope: !1016)
!6600 = !DILocation(line: 1276, column: 5, scope: !1017)
!6601 = !DILocation(line: 1282, column: 9, scope: !1024)
!6602 = !DILocation(line: 1282, column: 29, scope: !1024)
!6603 = !DILocation(line: 1283, column: 9, scope: !1024)
!6604 = !DILocation(line: 1283, column: 13, scope: !1024)
!6605 = !DILocation(line: 1283, column: 18, scope: !1024)
!6606 = !DILocation(line: 1284, column: 38, scope: !1024)
!6607 = !DILocation(line: 1284, column: 16, scope: !1024)
!6608 = !DILocation(line: 1284, column: 14, scope: !1024)
!6609 = !DILocation(line: 1285, column: 31, scope: !6610)
!6610 = distinct !DILexicalBlock(scope: !1024, file: !637, line: 1285, column: 13)
!6611 = !DILocation(line: 1285, column: 39, scope: !6610)
!6612 = !DILocation(line: 1285, column: 50, scope: !6610)
!6613 = !DILocation(line: 1285, column: 59, scope: !6610)
!6614 = !DILocation(line: 1285, column: 76, scope: !6610)
!6615 = !DILocation(line: 1285, column: 13, scope: !1024)
!6616 = !DILocation(line: 1287, column: 17, scope: !6617)
!6617 = distinct !DILexicalBlock(scope: !6610, file: !637, line: 1285, column: 83)
!6618 = !DILocation(line: 1290, column: 31, scope: !6617)
!6619 = !DILocation(line: 1290, column: 39, scope: !6617)
!6620 = !DILocation(line: 1290, column: 49, scope: !6617)
!6621 = !{!3002, !2323, i64 24}
!6622 = !DILocation(line: 1286, column: 13, scope: !6617)
!6623 = !DILocation(line: 1291, column: 13, scope: !6617)
!6624 = !DILocation(line: 1293, column: 31, scope: !6625)
!6625 = distinct !DILexicalBlock(scope: !1024, file: !637, line: 1293, column: 13)
!6626 = !DILocation(line: 1293, column: 14, scope: !6625)
!6627 = !DILocation(line: 1293, column: 13, scope: !1024)
!6628 = !DILocation(line: 1294, column: 13, scope: !6625)
!6629 = !DILocation(line: 1295, column: 9, scope: !1024)
!6630 = !DILocation(line: 1295, column: 15, scope: !1024)
!6631 = !DILocation(line: 1295, column: 25, scope: !1024)
!6632 = !{!6127, !5994, i64 0}
!6633 = !DILocation(line: 1296, column: 24, scope: !1024)
!6634 = !DILocation(line: 1296, column: 9, scope: !1024)
!6635 = !DILocation(line: 1296, column: 15, scope: !1024)
!6636 = !DILocation(line: 1296, column: 22, scope: !1024)
!6637 = !DILocation(line: 1297, column: 27, scope: !1024)
!6638 = !DILocation(line: 1297, column: 9, scope: !1024)
!6639 = !DILocation(line: 1297, column: 15, scope: !1024)
!6640 = !DILocation(line: 1297, column: 25, scope: !1024)
!6641 = !DILocation(line: 1298, column: 10, scope: !1024)
!6642 = !DILocation(line: 1298, column: 18, scope: !1024)
!6643 = !DILocation(line: 1299, column: 9, scope: !1024)
!6644 = !DILocation(line: 1300, column: 5, scope: !1017)
!6645 = !DILocation(line: 1310, column: 9, scope: !1028)
!6646 = !DILocation(line: 1310, column: 29, scope: !1028)
!6647 = !DILocation(line: 1311, column: 9, scope: !1028)
!6648 = !DILocation(line: 1311, column: 15, scope: !1028)
!6649 = !DILocation(line: 1312, column: 9, scope: !1028)
!6650 = !DILocation(line: 1312, column: 13, scope: !1028)
!6651 = !DILocation(line: 1312, column: 19, scope: !1028)
!6652 = !DILocation(line: 1313, column: 31, scope: !6653)
!6653 = distinct !DILexicalBlock(scope: !1028, file: !637, line: 1313, column: 13)
!6654 = !DILocation(line: 1313, column: 39, scope: !6653)
!6655 = !DILocation(line: 1313, column: 50, scope: !6653)
!6656 = !DILocation(line: 1313, column: 59, scope: !6653)
!6657 = !DILocation(line: 1313, column: 76, scope: !6653)
!6658 = !DILocation(line: 1313, column: 13, scope: !1028)
!6659 = !DILocation(line: 1315, column: 17, scope: !6660)
!6660 = distinct !DILexicalBlock(scope: !6653, file: !637, line: 1313, column: 83)
!6661 = !DILocation(line: 1318, column: 31, scope: !6660)
!6662 = !DILocation(line: 1318, column: 39, scope: !6660)
!6663 = !DILocation(line: 1318, column: 49, scope: !6660)
!6664 = !DILocation(line: 1314, column: 13, scope: !6660)
!6665 = !DILocation(line: 1319, column: 13, scope: !6660)
!6666 = !DILocation(line: 1321, column: 31, scope: !6667)
!6667 = distinct !DILexicalBlock(scope: !1028, file: !637, line: 1321, column: 13)
!6668 = !DILocation(line: 1321, column: 14, scope: !6667)
!6669 = !DILocation(line: 1321, column: 13, scope: !1028)
!6670 = !DILocation(line: 1323, column: 13, scope: !6667)
!6671 = !DILocation(line: 1324, column: 35, scope: !1028)
!6672 = !DILocation(line: 1324, column: 14, scope: !1028)
!6673 = !DILocation(line: 1324, column: 13, scope: !1028)
!6674 = !DILocation(line: 1325, column: 28, scope: !1028)
!6675 = !DILocation(line: 1325, column: 53, scope: !1028)
!6676 = !DILocation(line: 1325, column: 34, scope: !1028)
!6677 = !DILocation(line: 1325, column: 18, scope: !1028)
!6678 = !DILocation(line: 1325, column: 16, scope: !1028)
!6679 = !DILocation(line: 1327, column: 20, scope: !1028)
!6680 = !DILocation(line: 1327, column: 9, scope: !1028)
!6681 = !DILocation(line: 1328, column: 13, scope: !6682)
!6682 = distinct !DILexicalBlock(scope: !1028, file: !637, line: 1328, column: 13)
!6683 = !DILocation(line: 1328, column: 20, scope: !6682)
!6684 = !DILocation(line: 1328, column: 13, scope: !1028)
!6685 = !DILocation(line: 1329, column: 13, scope: !6682)
!6686 = !DILocation(line: 1330, column: 13, scope: !6687)
!6687 = distinct !DILexicalBlock(scope: !1028, file: !637, line: 1330, column: 13)
!6688 = !DILocation(line: 1330, column: 18, scope: !6687)
!6689 = !DILocation(line: 1330, column: 22, scope: !6687)
!6690 = !DILocation(line: 1330, column: 25, scope: !6691)
!6691 = !DILexicalBlockFile(scope: !6687, file: !637, discriminator: 1)
!6692 = !DILocation(line: 1330, column: 30, scope: !6687)
!6693 = !DILocation(line: 1330, column: 13, scope: !1028)
!6694 = !DILocation(line: 1332, column: 17, scope: !6695)
!6695 = distinct !DILexicalBlock(scope: !6687, file: !637, line: 1330, column: 40)
!6696 = !DILocation(line: 1331, column: 13, scope: !6695)
!6697 = !DILocation(line: 1334, column: 13, scope: !6695)
!6698 = !DILocation(line: 1336, column: 9, scope: !1028)
!6699 = !DILocation(line: 1336, column: 15, scope: !1028)
!6700 = !DILocation(line: 1336, column: 26, scope: !1028)
!6701 = !{!6055, !5994, i64 0}
!6702 = !DILocation(line: 1337, column: 44, scope: !1033)
!6703 = !DILocation(line: 1337, column: 72, scope: !1033)
!6704 = !DILocation(line: 1337, column: 77, scope: !1033)
!6705 = !DILocation(line: 1337, column: 112, scope: !1033)
!6706 = !DILocation(line: 1337, column: 105, scope: !1033)
!6707 = !DILocation(line: 1337, column: 278, scope: !6708)
!6708 = distinct !DILexicalBlock(scope: !1033, file: !637, line: 1337, column: 123)
!6709 = !DILocation(line: 1337, column: 234, scope: !6708)
!6710 = !{i32 371397}
!6711 = !DILocation(line: 1337, column: 292, scope: !1033)
!6712 = !DILocation(line: 1337, column: 148, scope: !6708)
!6713 = !DILocation(line: 1337, column: 297, scope: !1028)
!6714 = !DILocation(line: 1337, column: 297, scope: !1033)
!6715 = !DILocation(line: 1337, column: 9, scope: !1028)
!6716 = !DILocation(line: 1337, column: 15, scope: !1028)
!6717 = !DILocation(line: 1337, column: 24, scope: !1028)
!6718 = !DILocation(line: 1338, column: 10, scope: !1028)
!6719 = !DILocation(line: 1338, column: 18, scope: !1028)
!6720 = !DILocation(line: 1339, column: 9, scope: !1028)
!6721 = !DILocation(line: 1340, column: 5, scope: !1017)
!6722 = !DILocation(line: 1345, column: 9, scope: !1036)
!6723 = !DILocation(line: 1345, column: 30, scope: !1036)
!6724 = !DILocation(line: 1346, column: 9, scope: !1036)
!6725 = !DILocation(line: 1346, column: 15, scope: !1036)
!6726 = !DILocation(line: 1347, column: 9, scope: !1036)
!6727 = !DILocation(line: 1347, column: 13, scope: !1036)
!6728 = !DILocation(line: 1347, column: 19, scope: !1036)
!6729 = !DILocation(line: 1348, column: 9, scope: !1036)
!6730 = !DILocation(line: 1348, column: 22, scope: !1036)
!6731 = !DILocation(line: 1348, column: 32, scope: !1036)
!6732 = !DILocation(line: 1349, column: 29, scope: !1036)
!6733 = !DILocation(line: 1349, column: 18, scope: !1036)
!6734 = !DILocation(line: 1350, column: 31, scope: !6735)
!6735 = distinct !DILexicalBlock(scope: !1036, file: !637, line: 1350, column: 13)
!6736 = !DILocation(line: 1350, column: 39, scope: !6735)
!6737 = !DILocation(line: 1350, column: 50, scope: !6735)
!6738 = !DILocation(line: 1350, column: 59, scope: !6735)
!6739 = !DILocation(line: 1350, column: 76, scope: !6735)
!6740 = !DILocation(line: 1350, column: 13, scope: !1036)
!6741 = !DILocation(line: 1352, column: 17, scope: !6742)
!6742 = distinct !DILexicalBlock(scope: !6735, file: !637, line: 1350, column: 83)
!6743 = !DILocation(line: 1355, column: 31, scope: !6742)
!6744 = !DILocation(line: 1355, column: 39, scope: !6742)
!6745 = !DILocation(line: 1355, column: 49, scope: !6742)
!6746 = !DILocation(line: 1351, column: 13, scope: !6742)
!6747 = !DILocation(line: 1356, column: 13, scope: !6742)
!6748 = !DILocation(line: 1358, column: 31, scope: !6749)
!6749 = distinct !DILexicalBlock(scope: !1036, file: !637, line: 1358, column: 13)
!6750 = !DILocation(line: 1358, column: 14, scope: !6749)
!6751 = !DILocation(line: 1358, column: 13, scope: !1036)
!6752 = !DILocation(line: 1361, column: 13, scope: !6753)
!6753 = distinct !DILexicalBlock(scope: !6749, file: !637, line: 1360, column: 43)
!6754 = !DILocation(line: 1363, column: 38, scope: !1036)
!6755 = !DILocation(line: 1363, column: 16, scope: !1036)
!6756 = !DILocation(line: 1363, column: 14, scope: !1036)
!6757 = !DILocation(line: 1364, column: 28, scope: !1036)
!6758 = !DILocation(line: 1364, column: 53, scope: !1036)
!6759 = !DILocation(line: 1364, column: 34, scope: !1036)
!6760 = !DILocation(line: 1364, column: 18, scope: !1036)
!6761 = !DILocation(line: 1364, column: 16, scope: !1036)
!6762 = !DILocation(line: 1366, column: 20, scope: !1036)
!6763 = !DILocation(line: 1366, column: 9, scope: !1036)
!6764 = !DILocation(line: 1367, column: 13, scope: !6765)
!6765 = distinct !DILexicalBlock(scope: !1036, file: !637, line: 1367, column: 13)
!6766 = !DILocation(line: 1367, column: 20, scope: !6765)
!6767 = !DILocation(line: 1367, column: 13, scope: !1036)
!6768 = !DILocation(line: 1368, column: 13, scope: !6765)
!6769 = !DILocation(line: 1369, column: 13, scope: !6770)
!6770 = distinct !DILexicalBlock(scope: !1036, file: !637, line: 1369, column: 13)
!6771 = !DILocation(line: 1369, column: 18, scope: !6770)
!6772 = !DILocation(line: 1369, column: 22, scope: !6770)
!6773 = !DILocation(line: 1369, column: 25, scope: !6774)
!6774 = !DILexicalBlockFile(scope: !6770, file: !637, discriminator: 1)
!6775 = !DILocation(line: 1369, column: 30, scope: !6770)
!6776 = !DILocation(line: 1369, column: 13, scope: !1036)
!6777 = !DILocation(line: 1371, column: 17, scope: !6778)
!6778 = distinct !DILexicalBlock(scope: !6770, file: !637, line: 1369, column: 40)
!6779 = !DILocation(line: 1370, column: 13, scope: !6778)
!6780 = !DILocation(line: 1373, column: 13, scope: !6778)
!6781 = !DILocation(line: 1375, column: 13, scope: !6782)
!6782 = distinct !DILexicalBlock(scope: !1036, file: !637, line: 1375, column: 13)
!6783 = !DILocation(line: 1375, column: 22, scope: !6782)
!6784 = !DILocation(line: 1375, column: 13, scope: !1036)
!6785 = !DILocation(line: 1377, column: 17, scope: !6786)
!6786 = distinct !DILexicalBlock(scope: !6782, file: !637, line: 1375, column: 33)
!6787 = !DILocation(line: 1376, column: 13, scope: !6786)
!6788 = !DILocation(line: 1379, column: 13, scope: !6786)
!6789 = !DILocation(line: 1381, column: 29, scope: !1036)
!6790 = !DILocation(line: 1381, column: 32, scope: !1036)
!6791 = !DILocation(line: 1381, column: 9, scope: !1036)
!6792 = !DILocation(line: 1381, column: 15, scope: !1036)
!6793 = !DILocation(line: 1381, column: 27, scope: !1036)
!6794 = !{!6154, !5994, i64 0}
!6795 = !DILocation(line: 1382, column: 45, scope: !1043)
!6796 = !DILocation(line: 1382, column: 73, scope: !1043)
!6797 = !DILocation(line: 1382, column: 78, scope: !1043)
!6798 = !DILocation(line: 1382, column: 113, scope: !1043)
!6799 = !DILocation(line: 1382, column: 106, scope: !1043)
!6800 = !DILocation(line: 1382, column: 279, scope: !6801)
!6801 = distinct !DILexicalBlock(scope: !1043, file: !637, line: 1382, column: 124)
!6802 = !DILocation(line: 1382, column: 235, scope: !6801)
!6803 = !{i32 373108}
!6804 = !DILocation(line: 1382, column: 293, scope: !1043)
!6805 = !DILocation(line: 1382, column: 149, scope: !6801)
!6806 = !DILocation(line: 1382, column: 298, scope: !1036)
!6807 = !DILocation(line: 1382, column: 298, scope: !1043)
!6808 = !DILocation(line: 1382, column: 9, scope: !1036)
!6809 = !DILocation(line: 1382, column: 15, scope: !1036)
!6810 = !DILocation(line: 1382, column: 25, scope: !1036)
!6811 = !DILocation(line: 1383, column: 49, scope: !1046)
!6812 = !DILocation(line: 1383, column: 71, scope: !1046)
!6813 = !DILocation(line: 1383, column: 76, scope: !1046)
!6814 = !DILocation(line: 1383, column: 83, scope: !1046)
!6815 = !DILocation(line: 1383, column: 300, scope: !6816)
!6816 = distinct !DILexicalBlock(scope: !1046, file: !637, line: 1383, column: 98)
!6817 = !DILocation(line: 1383, column: 260, scope: !6816)
!6818 = !{i32 373435}
!6819 = !DILocation(line: 1383, column: 307, scope: !1046)
!6820 = !DILocation(line: 1383, column: 123, scope: !6816)
!6821 = !DILocation(line: 1383, column: 312, scope: !1036)
!6822 = !DILocation(line: 1383, column: 312, scope: !1046)
!6823 = !DILocation(line: 1383, column: 9, scope: !1036)
!6824 = !DILocation(line: 1383, column: 15, scope: !1036)
!6825 = !DILocation(line: 1383, column: 29, scope: !1036)
!6826 = !DILocation(line: 1384, column: 31, scope: !1036)
!6827 = !DILocation(line: 1384, column: 9, scope: !1036)
!6828 = !DILocation(line: 1384, column: 15, scope: !1036)
!6829 = !DILocation(line: 1384, column: 29, scope: !1036)
!6830 = !DILocation(line: 1385, column: 10, scope: !1036)
!6831 = !DILocation(line: 1385, column: 18, scope: !1036)
!6832 = !DILocation(line: 1386, column: 9, scope: !1036)
!6833 = !DILocation(line: 1387, column: 5, scope: !1017)
!6834 = !DILocation(line: 1489, column: 9, scope: !1049)
!6835 = !DILocation(line: 1489, column: 29, scope: !1049)
!6836 = !DILocation(line: 1490, column: 9, scope: !1049)
!6837 = !DILocation(line: 1490, column: 22, scope: !1049)
!6838 = !DILocation(line: 1491, column: 9, scope: !1049)
!6839 = !DILocation(line: 1491, column: 15, scope: !1049)
!6840 = !DILocation(line: 1492, column: 9, scope: !1049)
!6841 = !DILocation(line: 1492, column: 13, scope: !1049)
!6842 = !DILocation(line: 1493, column: 9, scope: !1049)
!6843 = !DILocation(line: 1493, column: 13, scope: !1049)
!6844 = !DILocation(line: 1494, column: 9, scope: !1049)
!6845 = !DILocation(line: 1494, column: 13, scope: !1049)
!6846 = !DILocation(line: 1495, column: 9, scope: !1049)
!6847 = !DILocation(line: 1495, column: 15, scope: !1049)
!6848 = !DILocation(line: 1496, column: 9, scope: !1049)
!6849 = !DILocation(line: 1496, column: 22, scope: !1049)
!6850 = !DILocation(line: 1498, column: 31, scope: !6851)
!6851 = distinct !DILexicalBlock(scope: !1049, file: !637, line: 1498, column: 13)
!6852 = !DILocation(line: 1498, column: 39, scope: !6851)
!6853 = !DILocation(line: 1498, column: 50, scope: !6851)
!6854 = !DILocation(line: 1498, column: 59, scope: !6851)
!6855 = !DILocation(line: 1498, column: 76, scope: !6851)
!6856 = !DILocation(line: 1498, column: 13, scope: !1049)
!6857 = !DILocation(line: 1500, column: 17, scope: !6858)
!6858 = distinct !DILexicalBlock(scope: !6851, file: !637, line: 1498, column: 83)
!6859 = !DILocation(line: 1503, column: 31, scope: !6858)
!6860 = !DILocation(line: 1503, column: 39, scope: !6858)
!6861 = !DILocation(line: 1503, column: 49, scope: !6858)
!6862 = !DILocation(line: 1499, column: 13, scope: !6858)
!6863 = !DILocation(line: 1504, column: 13, scope: !6858)
!6864 = !DILocation(line: 1506, column: 31, scope: !6865)
!6865 = distinct !DILexicalBlock(scope: !1049, file: !637, line: 1506, column: 13)
!6866 = !DILocation(line: 1506, column: 14, scope: !6865)
!6867 = !DILocation(line: 1506, column: 13, scope: !1049)
!6868 = !DILocation(line: 1509, column: 13, scope: !6865)
!6869 = !DILocation(line: 1510, column: 32, scope: !1049)
!6870 = !DILocation(line: 1510, column: 41, scope: !1049)
!6871 = !DILocation(line: 1510, column: 28, scope: !1049)
!6872 = !DILocation(line: 1510, column: 52, scope: !1049)
!6873 = !DILocation(line: 1510, column: 9, scope: !1049)
!6874 = !DILocation(line: 1511, column: 13, scope: !1049)
!6875 = !DILocation(line: 1511, column: 22, scope: !1049)
!6876 = !DILocation(line: 1511, column: 9, scope: !1049)
!6877 = !DILocation(line: 1511, column: 68, scope: !1049)
!6878 = !DILocation(line: 1512, column: 19, scope: !6879)
!6879 = distinct !DILexicalBlock(scope: !1049, file: !637, line: 1512, column: 13)
!6880 = !DILocation(line: 1512, column: 22, scope: !6879)
!6881 = !DILocation(line: 1512, column: 13, scope: !6879)
!6882 = !DILocation(line: 1512, column: 45, scope: !6879)
!6883 = !DILocation(line: 1512, column: 13, scope: !1049)
!6884 = !DILocation(line: 1513, column: 13, scope: !6885)
!6885 = distinct !DILexicalBlock(scope: !6879, file: !637, line: 1512, column: 50)
!6886 = !DILocation(line: 1513, column: 16, scope: !6885)
!6887 = !DILocation(line: 1514, column: 13, scope: !6885)
!6888 = !DILocation(line: 1516, column: 13, scope: !6889)
!6889 = distinct !DILexicalBlock(scope: !1049, file: !637, line: 1516, column: 13)
!6890 = !DILocation(line: 1516, column: 19, scope: !6889)
!6891 = !DILocation(line: 1516, column: 13, scope: !1049)
!6892 = !DILocation(line: 1517, column: 27, scope: !6893)
!6893 = distinct !DILexicalBlock(scope: !6889, file: !637, line: 1516, column: 24)
!6894 = !DILocation(line: 1517, column: 11, scope: !6893)
!6895 = !DILocation(line: 1519, column: 11, scope: !6893)
!6896 = !DILocation(line: 1521, column: 13, scope: !6897)
!6897 = distinct !DILexicalBlock(scope: !1049, file: !637, line: 1521, column: 13)
!6898 = !DILocation(line: 1521, column: 25, scope: !6897)
!6899 = !DILocation(line: 1521, column: 29, scope: !6897)
!6900 = !DILocation(line: 1521, column: 32, scope: !6901)
!6901 = !DILexicalBlockFile(scope: !6897, file: !637, discriminator: 1)
!6902 = !DILocation(line: 1521, column: 44, scope: !6897)
!6903 = !DILocation(line: 1521, column: 13, scope: !1049)
!6904 = !DILocation(line: 1523, column: 17, scope: !6905)
!6905 = distinct !DILexicalBlock(scope: !6897, file: !637, line: 1521, column: 54)
!6906 = !DILocation(line: 1522, column: 13, scope: !6905)
!6907 = !DILocation(line: 1525, column: 13, scope: !6905)
!6908 = !DILocation(line: 1527, column: 37, scope: !1049)
!6909 = !DILocation(line: 1527, column: 16, scope: !1049)
!6910 = !DILocation(line: 1527, column: 14, scope: !1049)
!6911 = !DILocation(line: 1528, column: 9, scope: !1049)
!6912 = !DILocation(line: 1528, column: 15, scope: !1049)
!6913 = !DILocation(line: 1528, column: 26, scope: !1049)
!6914 = !{!6224, !5994, i64 0}
!6915 = !DILocation(line: 1529, column: 48, scope: !1058)
!6916 = !DILocation(line: 1529, column: 76, scope: !1058)
!6917 = !DILocation(line: 1529, column: 81, scope: !1058)
!6918 = !DILocation(line: 1529, column: 116, scope: !1058)
!6919 = !DILocation(line: 1529, column: 109, scope: !1058)
!6920 = !DILocation(line: 1529, column: 289, scope: !6921)
!6921 = distinct !DILexicalBlock(scope: !1058, file: !637, line: 1529, column: 134)
!6922 = !DILocation(line: 1529, column: 245, scope: !6921)
!6923 = !{i32 375447}
!6924 = !DILocation(line: 1529, column: 303, scope: !1058)
!6925 = !DILocation(line: 1529, column: 159, scope: !6921)
!6926 = !DILocation(line: 1529, column: 308, scope: !1049)
!6927 = !DILocation(line: 1529, column: 308, scope: !1058)
!6928 = !DILocation(line: 1529, column: 9, scope: !1049)
!6929 = !DILocation(line: 1529, column: 15, scope: !1049)
!6930 = !DILocation(line: 1529, column: 28, scope: !1049)
!6931 = !DILocation(line: 1530, column: 33, scope: !1049)
!6932 = !DILocation(line: 1530, column: 42, scope: !1049)
!6933 = !DILocation(line: 1530, column: 9, scope: !1049)
!6934 = !DILocation(line: 1530, column: 15, scope: !1049)
!6935 = !DILocation(line: 1530, column: 27, scope: !1049)
!6936 = !DILocation(line: 1531, column: 29, scope: !1049)
!6937 = !DILocation(line: 1531, column: 9, scope: !1049)
!6938 = !DILocation(line: 1531, column: 15, scope: !1049)
!6939 = !DILocation(line: 1531, column: 27, scope: !1049)
!6940 = !DILocation(line: 1532, column: 28, scope: !1049)
!6941 = !DILocation(line: 1532, column: 9, scope: !1049)
!6942 = !DILocation(line: 1532, column: 15, scope: !1049)
!6943 = !DILocation(line: 1532, column: 26, scope: !1049)
!6944 = !DILocation(line: 1533, column: 13, scope: !6945)
!6945 = distinct !DILexicalBlock(scope: !1049, file: !637, line: 1533, column: 13)
!6946 = !DILocation(line: 1533, column: 19, scope: !6945)
!6947 = !DILocation(line: 1533, column: 13, scope: !1049)
!6948 = !DILocation(line: 1534, column: 19, scope: !6949)
!6949 = distinct !DILexicalBlock(scope: !6945, file: !637, line: 1533, column: 25)
!6950 = !DILocation(line: 1534, column: 25, scope: !6949)
!6951 = !DILocation(line: 1534, column: 11, scope: !6949)
!6952 = !DILocation(line: 1534, column: 35, scope: !6949)
!6953 = !DILocation(line: 1534, column: 42, scope: !6949)
!6954 = !DILocation(line: 1535, column: 9, scope: !6949)
!6955 = !DILocation(line: 1536, column: 27, scope: !1049)
!6956 = !DILocation(line: 1536, column: 9, scope: !1049)
!6957 = !DILocation(line: 1536, column: 15, scope: !1049)
!6958 = !DILocation(line: 1536, column: 25, scope: !1049)
!6959 = !DILocation(line: 1537, column: 10, scope: !1049)
!6960 = !DILocation(line: 1537, column: 18, scope: !1049)
!6961 = !DILocation(line: 1538, column: 9, scope: !1049)
!6962 = !DILocation(line: 1539, column: 5, scope: !1017)
!6963 = !DILocation(line: 1545, column: 9, scope: !1061)
!6964 = !DILocation(line: 1545, column: 22, scope: !1061)
!6965 = !DILocation(line: 1545, column: 29, scope: !1061)
!6966 = !DILocation(line: 1545, column: 33, scope: !1061)
!6967 = !DILocation(line: 1545, column: 37, scope: !1061)
!6968 = !DILocation(line: 1546, column: 9, scope: !1061)
!6969 = !DILocation(line: 1546, column: 22, scope: !1061)
!6970 = !DILocation(line: 1547, column: 9, scope: !1061)
!6971 = !DILocation(line: 1547, column: 31, scope: !1061)
!6972 = !DILocation(line: 1549, column: 31, scope: !6973)
!6973 = distinct !DILexicalBlock(scope: !1061, file: !637, line: 1549, column: 13)
!6974 = !DILocation(line: 1549, column: 39, scope: !6973)
!6975 = !DILocation(line: 1549, column: 50, scope: !6973)
!6976 = !DILocation(line: 1549, column: 59, scope: !6973)
!6977 = !DILocation(line: 1549, column: 76, scope: !6973)
!6978 = !DILocation(line: 1549, column: 13, scope: !1061)
!6979 = !DILocation(line: 1551, column: 17, scope: !6980)
!6980 = distinct !DILexicalBlock(scope: !6973, file: !637, line: 1549, column: 83)
!6981 = !DILocation(line: 1554, column: 31, scope: !6980)
!6982 = !DILocation(line: 1554, column: 39, scope: !6980)
!6983 = !DILocation(line: 1554, column: 49, scope: !6980)
!6984 = !DILocation(line: 1550, column: 13, scope: !6980)
!6985 = !DILocation(line: 1555, column: 13, scope: !6980)
!6986 = !DILocation(line: 1558, column: 31, scope: !6987)
!6987 = distinct !DILexicalBlock(scope: !1061, file: !637, line: 1558, column: 13)
!6988 = !DILocation(line: 1558, column: 14, scope: !6987)
!6989 = !DILocation(line: 1558, column: 13, scope: !1061)
!6990 = !DILocation(line: 1561, column: 13, scope: !6987)
!6991 = !DILocation(line: 1563, column: 41, scope: !1061)
!6992 = !DILocation(line: 1563, column: 16, scope: !1061)
!6993 = !DILocation(line: 1563, column: 14, scope: !1061)
!6994 = !DILocation(line: 1564, column: 16, scope: !1061)
!6995 = !DILocation(line: 1564, column: 9, scope: !1061)
!6996 = !DILocation(line: 1566, column: 9, scope: !1061)
!6997 = !DILocation(line: 1566, column: 15, scope: !1061)
!6998 = !DILocation(line: 1566, column: 22, scope: !1061)
!6999 = !{!6281, !5994, i64 0}
!7000 = !DILocation(line: 1567, column: 23, scope: !1061)
!7001 = !DILocation(line: 1567, column: 9, scope: !1061)
!7002 = !DILocation(line: 1567, column: 15, scope: !1061)
!7003 = !DILocation(line: 1567, column: 21, scope: !1061)
!7004 = !DILocation(line: 1568, column: 26, scope: !1061)
!7005 = !DILocation(line: 1568, column: 9, scope: !1061)
!7006 = !DILocation(line: 1568, column: 15, scope: !1061)
!7007 = !DILocation(line: 1568, column: 24, scope: !1061)
!7008 = !DILocation(line: 1570, column: 13, scope: !7009)
!7009 = distinct !DILexicalBlock(scope: !1061, file: !637, line: 1570, column: 13)
!7010 = !DILocation(line: 1570, column: 19, scope: !7009)
!7011 = !DILocation(line: 1570, column: 13, scope: !1061)
!7012 = !DILocation(line: 1571, column: 39, scope: !7013)
!7013 = distinct !DILexicalBlock(scope: !7009, file: !637, line: 1570, column: 25)
!7014 = !DILocation(line: 1571, column: 13, scope: !7013)
!7015 = !DILocation(line: 1571, column: 19, scope: !7013)
!7016 = !DILocation(line: 1571, column: 24, scope: !7013)
!7017 = !DILocation(line: 1571, column: 32, scope: !7013)
!7018 = !DILocation(line: 1571, column: 37, scope: !7013)
!7019 = !DILocation(line: 1572, column: 40, scope: !7013)
!7020 = !DILocation(line: 1572, column: 13, scope: !7013)
!7021 = !DILocation(line: 1572, column: 19, scope: !7013)
!7022 = !DILocation(line: 1572, column: 24, scope: !7013)
!7023 = !DILocation(line: 1572, column: 32, scope: !7013)
!7024 = !DILocation(line: 1572, column: 38, scope: !7013)
!7025 = !DILocation(line: 1573, column: 40, scope: !7013)
!7026 = !DILocation(line: 1573, column: 13, scope: !7013)
!7027 = !DILocation(line: 1573, column: 19, scope: !7013)
!7028 = !DILocation(line: 1573, column: 24, scope: !7013)
!7029 = !DILocation(line: 1573, column: 32, scope: !7013)
!7030 = !DILocation(line: 1573, column: 38, scope: !7013)
!7031 = !DILocation(line: 1574, column: 9, scope: !7013)
!7032 = !DILocation(line: 1574, column: 20, scope: !7033)
!7033 = distinct !DILexicalBlock(scope: !7009, file: !637, line: 1574, column: 20)
!7034 = !DILocation(line: 1574, column: 26, scope: !7033)
!7035 = !DILocation(line: 1574, column: 20, scope: !7009)
!7036 = !DILocation(line: 1575, column: 41, scope: !7037)
!7037 = distinct !DILexicalBlock(scope: !7033, file: !637, line: 1574, column: 32)
!7038 = !DILocation(line: 1575, column: 13, scope: !7037)
!7039 = !DILocation(line: 1575, column: 19, scope: !7037)
!7040 = !DILocation(line: 1575, column: 24, scope: !7037)
!7041 = !DILocation(line: 1575, column: 29, scope: !7037)
!7042 = !DILocation(line: 1575, column: 34, scope: !7037)
!7043 = !DILocation(line: 1575, column: 39, scope: !7037)
!7044 = !DILocation(line: 1576, column: 45, scope: !7037)
!7045 = !DILocation(line: 1576, column: 13, scope: !7037)
!7046 = !DILocation(line: 1576, column: 19, scope: !7037)
!7047 = !DILocation(line: 1576, column: 24, scope: !7037)
!7048 = !DILocation(line: 1576, column: 29, scope: !7037)
!7049 = !DILocation(line: 1576, column: 34, scope: !7037)
!7050 = !DILocation(line: 1576, column: 43, scope: !7037)
!7051 = !DILocation(line: 1577, column: 9, scope: !7037)
!7052 = !DILocation(line: 1577, column: 20, scope: !7053)
!7053 = distinct !DILexicalBlock(scope: !7033, file: !637, line: 1577, column: 20)
!7054 = !DILocation(line: 1577, column: 26, scope: !7053)
!7055 = !DILocation(line: 1577, column: 20, scope: !7033)
!7056 = !DILocation(line: 1578, column: 34, scope: !7057)
!7057 = distinct !DILexicalBlock(scope: !7053, file: !637, line: 1577, column: 32)
!7058 = !DILocation(line: 1578, column: 13, scope: !7057)
!7059 = !DILocation(line: 1578, column: 19, scope: !7057)
!7060 = !DILocation(line: 1578, column: 24, scope: !7057)
!7061 = !DILocation(line: 1578, column: 27, scope: !7057)
!7062 = !DILocation(line: 1578, column: 32, scope: !7057)
!7063 = !DILocation(line: 1579, column: 33, scope: !7057)
!7064 = !DILocation(line: 1579, column: 13, scope: !7057)
!7065 = !DILocation(line: 1579, column: 19, scope: !7057)
!7066 = !DILocation(line: 1579, column: 24, scope: !7057)
!7067 = !DILocation(line: 1579, column: 27, scope: !7057)
!7068 = !DILocation(line: 1579, column: 31, scope: !7057)
!7069 = !DILocation(line: 1580, column: 9, scope: !7057)
!7070 = !DILocation(line: 1582, column: 29, scope: !7071)
!7071 = distinct !DILexicalBlock(scope: !7053, file: !637, line: 1580, column: 16)
!7072 = !DILocation(line: 1582, column: 13, scope: !7071)
!7073 = !DILocation(line: 1583, column: 13, scope: !7071)
!7074 = !DILocation(line: 1586, column: 10, scope: !1061)
!7075 = !DILocation(line: 1586, column: 18, scope: !1061)
!7076 = !DILocation(line: 1588, column: 9, scope: !1061)
!7077 = !DILocation(line: 1589, column: 5, scope: !1017)
!7078 = !DILocation(line: 1594, column: 17, scope: !1017)
!7079 = !DILocation(line: 1594, column: 20, scope: !1017)
!7080 = !DILocation(line: 1599, column: 13, scope: !1068)
!7081 = !DILocation(line: 1599, column: 34, scope: !1068)
!7082 = !DILocation(line: 1600, column: 13, scope: !1068)
!7083 = !DILocation(line: 1600, column: 23, scope: !1068)
!7084 = !DILocation(line: 1601, column: 13, scope: !1068)
!7085 = !DILocation(line: 1601, column: 26, scope: !1068)
!7086 = !DILocation(line: 1602, column: 13, scope: !1068)
!7087 = !DILocation(line: 1602, column: 24, scope: !1068)
!7088 = !DILocation(line: 1604, column: 43, scope: !1068)
!7089 = !DILocation(line: 1604, column: 20, scope: !1068)
!7090 = !DILocation(line: 1604, column: 18, scope: !1068)
!7091 = !DILocation(line: 1606, column: 35, scope: !7092)
!7092 = distinct !DILexicalBlock(scope: !1068, file: !637, line: 1606, column: 17)
!7093 = !DILocation(line: 1606, column: 18, scope: !7092)
!7094 = !DILocation(line: 1606, column: 17, scope: !1068)
!7095 = !DILocation(line: 1608, column: 17, scope: !7092)
!7096 = !DILocation(line: 1610, column: 50, scope: !1068)
!7097 = !DILocation(line: 1610, column: 35, scope: !1068)
!7098 = !DILocation(line: 1610, column: 67, scope: !1068)
!7099 = !DILocation(line: 1610, column: 17, scope: !1068)
!7100 = !DILocation(line: 1612, column: 17, scope: !1079)
!7101 = !DILocation(line: 1612, column: 21, scope: !1079)
!7102 = !DILocation(line: 1612, column: 17, scope: !1068)
!7103 = !DILocation(line: 1613, column: 21, scope: !7104)
!7104 = distinct !DILexicalBlock(scope: !1079, file: !637, line: 1612, column: 27)
!7105 = !DILocation(line: 1613, column: 30, scope: !7104)
!7106 = !DILocation(line: 1613, column: 42, scope: !7104)
!7107 = !DILocation(line: 1614, column: 13, scope: !7104)
!7108 = !DILocation(line: 1614, column: 24, scope: !1078)
!7109 = !DILocation(line: 1614, column: 28, scope: !1078)
!7110 = !DILocation(line: 1614, column: 24, scope: !1079)
!7111 = !DILocation(line: 1615, column: 40, scope: !1077)
!7112 = !DILocation(line: 1615, column: 49, scope: !1077)
!7113 = !DILocation(line: 1615, column: 36, scope: !1077)
!7114 = !DILocation(line: 1615, column: 95, scope: !1077)
!7115 = !DILocation(line: 1615, column: 77, scope: !1077)
!7116 = !DILocation(line: 1615, column: 112, scope: !1077)
!7117 = !DILocation(line: 1615, column: 75, scope: !1077)
!7118 = !DILocation(line: 1615, column: 17, scope: !1077)
!7119 = !DILocation(line: 1616, column: 21, scope: !1077)
!7120 = !DILocation(line: 1616, column: 30, scope: !1077)
!7121 = !DILocation(line: 1616, column: 17, scope: !1077)
!7122 = !DILocation(line: 1616, column: 76, scope: !1077)
!7123 = !DILocation(line: 1617, column: 27, scope: !1076)
!7124 = !DILocation(line: 1617, column: 30, scope: !1076)
!7125 = !DILocation(line: 1617, column: 21, scope: !1076)
!7126 = !DILocation(line: 1617, column: 53, scope: !1076)
!7127 = !DILocation(line: 1617, column: 21, scope: !1077)
!7128 = !DILocation(line: 1618, column: 21, scope: !1075)
!7129 = !DILocation(line: 1618, column: 24, scope: !1075)
!7130 = !DILocation(line: 1619, column: 21, scope: !1075)
!7131 = !DILocation(line: 1619, column: 26, scope: !7132)
!7132 = !DILexicalBlockFile(scope: !1074, file: !637, discriminator: 1)
!7133 = !DILocation(line: 1619, column: 36, scope: !1074)
!7134 = !DILocation(line: 1619, column: 66, scope: !1074)
!7135 = !DILocation(line: 1619, column: 90, scope: !7136)
!7136 = distinct !DILexicalBlock(scope: !1074, file: !637, line: 1619, column: 87)
!7137 = !DILocation(line: 1619, column: 107, scope: !7136)
!7138 = !DILocation(line: 1619, column: 87, scope: !7136)
!7139 = !DILocation(line: 1619, column: 117, scope: !7136)
!7140 = !DILocation(line: 1619, column: 87, scope: !1074)
!7141 = !DILocation(line: 1619, column: 87, scope: !7142)
!7142 = !DILexicalBlockFile(scope: !1074, file: !637, discriminator: 2)
!7143 = !DILocation(line: 1619, column: 148, scope: !7144)
!7144 = !DILexicalBlockFile(scope: !7136, file: !637, discriminator: 3)
!7145 = !DILocation(line: 1619, column: 166, scope: !7136)
!7146 = !DILocation(line: 1619, column: 176, scope: !7136)
!7147 = !DILocation(line: 1619, column: 201, scope: !7136)
!7148 = !DILocation(line: 1619, column: 132, scope: !7136)
!7149 = !DILocation(line: 1619, column: 220, scope: !7150)
!7150 = !DILexicalBlockFile(scope: !1075, file: !637, discriminator: 4)
!7151 = !DILocation(line: 1619, column: 220, scope: !1074)
!7152 = !DILocation(line: 1619, column: 220, scope: !7153)
!7153 = !DILexicalBlockFile(scope: !1074, file: !637, discriminator: 5)
!7154 = !DILocation(line: 1620, column: 21, scope: !1075)
!7155 = !DILocation(line: 1622, column: 13, scope: !1077)
!7156 = !DILocation(line: 1623, column: 33, scope: !1082)
!7157 = !DILocation(line: 1623, column: 17, scope: !1082)
!7158 = !DILocation(line: 1625, column: 17, scope: !1082)
!7159 = !DILocation(line: 1625, column: 22, scope: !7160)
!7160 = !DILexicalBlockFile(scope: !1081, file: !637, discriminator: 1)
!7161 = !DILocation(line: 1625, column: 32, scope: !1081)
!7162 = !DILocation(line: 1625, column: 62, scope: !1081)
!7163 = !DILocation(line: 1625, column: 86, scope: !7164)
!7164 = distinct !DILexicalBlock(scope: !1081, file: !637, line: 1625, column: 83)
!7165 = !DILocation(line: 1625, column: 103, scope: !7164)
!7166 = !DILocation(line: 1625, column: 83, scope: !7164)
!7167 = !DILocation(line: 1625, column: 113, scope: !7164)
!7168 = !DILocation(line: 1625, column: 83, scope: !1081)
!7169 = !DILocation(line: 1625, column: 83, scope: !7170)
!7170 = !DILexicalBlockFile(scope: !1081, file: !637, discriminator: 2)
!7171 = !DILocation(line: 1625, column: 144, scope: !7172)
!7172 = !DILexicalBlockFile(scope: !7164, file: !637, discriminator: 3)
!7173 = !DILocation(line: 1625, column: 162, scope: !7164)
!7174 = !DILocation(line: 1625, column: 172, scope: !7164)
!7175 = !DILocation(line: 1625, column: 197, scope: !7164)
!7176 = !DILocation(line: 1625, column: 128, scope: !7164)
!7177 = !DILocation(line: 1625, column: 216, scope: !7178)
!7178 = !DILexicalBlockFile(scope: !1082, file: !637, discriminator: 4)
!7179 = !DILocation(line: 1625, column: 216, scope: !1081)
!7180 = !DILocation(line: 1625, column: 216, scope: !7181)
!7181 = !DILexicalBlockFile(scope: !1081, file: !637, discriminator: 5)
!7182 = !DILocation(line: 1626, column: 17, scope: !1082)
!7183 = !DILocation(line: 1629, column: 13, scope: !1068)
!7184 = !DILocation(line: 1629, column: 19, scope: !1068)
!7185 = !DILocation(line: 1629, column: 30, scope: !1068)
!7186 = !DILocation(line: 1630, column: 37, scope: !1068)
!7187 = !DILocation(line: 1630, column: 46, scope: !1068)
!7188 = !DILocation(line: 1630, column: 13, scope: !1068)
!7189 = !DILocation(line: 1630, column: 19, scope: !1068)
!7190 = !DILocation(line: 1630, column: 31, scope: !1068)
!7191 = !DILocation(line: 1632, column: 14, scope: !1068)
!7192 = !DILocation(line: 1632, column: 22, scope: !1068)
!7193 = !DILocation(line: 1633, column: 13, scope: !1068)
!7194 = !DILocation(line: 1633, column: 18, scope: !7195)
!7195 = !DILexicalBlockFile(scope: !1084, file: !637, discriminator: 1)
!7196 = !DILocation(line: 1633, column: 28, scope: !1084)
!7197 = !DILocation(line: 1633, column: 58, scope: !1084)
!7198 = !DILocation(line: 1633, column: 82, scope: !7199)
!7199 = distinct !DILexicalBlock(scope: !1084, file: !637, line: 1633, column: 79)
!7200 = !DILocation(line: 1633, column: 99, scope: !7199)
!7201 = !DILocation(line: 1633, column: 79, scope: !7199)
!7202 = !DILocation(line: 1633, column: 109, scope: !7199)
!7203 = !DILocation(line: 1633, column: 79, scope: !1084)
!7204 = !DILocation(line: 1633, column: 79, scope: !7205)
!7205 = !DILexicalBlockFile(scope: !1084, file: !637, discriminator: 2)
!7206 = !DILocation(line: 1633, column: 140, scope: !7207)
!7207 = !DILexicalBlockFile(scope: !7199, file: !637, discriminator: 3)
!7208 = !DILocation(line: 1633, column: 158, scope: !7199)
!7209 = !DILocation(line: 1633, column: 168, scope: !7199)
!7210 = !DILocation(line: 1633, column: 193, scope: !7199)
!7211 = !DILocation(line: 1633, column: 124, scope: !7199)
!7212 = !DILocation(line: 1633, column: 212, scope: !7213)
!7213 = !DILexicalBlockFile(scope: !1068, file: !637, discriminator: 4)
!7214 = !DILocation(line: 1633, column: 212, scope: !1084)
!7215 = !DILocation(line: 1633, column: 212, scope: !7216)
!7216 = !DILexicalBlockFile(scope: !1084, file: !637, discriminator: 5)
!7217 = !DILocation(line: 1634, column: 13, scope: !1068)
!7218 = !DILocation(line: 1635, column: 9, scope: !1069)
!7219 = !DILocation(line: 1637, column: 29, scope: !1069)
!7220 = !DILocation(line: 1637, column: 13, scope: !1069)
!7221 = !DILocation(line: 1639, column: 13, scope: !1069)
!7222 = !DILocation(line: 1704, column: 25, scope: !1017)
!7223 = !DILocation(line: 1704, column: 9, scope: !1017)
!7224 = !DILocation(line: 1705, column: 9, scope: !1017)
!7225 = !DILocation(line: 1708, column: 1, scope: !1007)
!7226 = !DILocation(line: 759, column: 17, scope: !1085)
!7227 = !DILocation(line: 759, column: 40, scope: !1085)
!7228 = !DILocation(line: 759, column: 57, scope: !1085)
!7229 = !DILocation(line: 759, column: 76, scope: !1085)
!7230 = !DILocation(line: 761, column: 5, scope: !1085)
!7231 = !DILocation(line: 761, column: 21, scope: !1085)
!7232 = !DILocation(line: 761, column: 29, scope: !1085)
!7233 = !DILocation(line: 762, column: 5, scope: !1085)
!7234 = !DILocation(line: 762, column: 9, scope: !1085)
!7235 = !DILocation(line: 764, column: 21, scope: !1085)
!7236 = !DILocation(line: 764, column: 12, scope: !1085)
!7237 = !DILocation(line: 764, column: 5, scope: !1085)
!7238 = !DILocation(line: 765, column: 9, scope: !1110)
!7239 = !DILocation(line: 765, column: 17, scope: !1110)
!7240 = !DILocation(line: 765, column: 9, scope: !1085)
!7241 = !DILocation(line: 766, column: 9, scope: !1109)
!7242 = !DILocation(line: 766, column: 13, scope: !1109)
!7243 = !DILocation(line: 767, column: 9, scope: !1109)
!7244 = !DILocation(line: 768, column: 27, scope: !1109)
!7245 = !DILocation(line: 768, column: 15, scope: !1109)
!7246 = !DILocation(line: 768, column: 25, scope: !1109)
!7247 = !{!7248, !2950, i64 4}
!7248 = !{!"addrinfo", !2950, i64 0, !2950, i64 4, !2950, i64 8, !2950, i64 12, !2950, i64 16, !2323, i64 24, !2323, i64 32, !2323, i64 40}
!7249 = !DILocation(line: 769, column: 15, scope: !1109)
!7250 = !DILocation(line: 769, column: 27, scope: !1109)
!7251 = !{!7248, !2950, i64 8}
!7252 = !DILocation(line: 770, column: 15, scope: !1109)
!7253 = !DILocation(line: 770, column: 24, scope: !1109)
!7254 = !{!7248, !2950, i64 0}
!7255 = !DILocation(line: 771, column: 11, scope: !1112)
!7256 = !DILocation(line: 771, column: 26, scope: !1112)
!7257 = !DILocation(line: 771, column: 41, scope: !1112)
!7258 = !DILocation(line: 771, column: 39, scope: !1112)
!7259 = !DILocation(line: 773, column: 17, scope: !1112)
!7260 = !DILocation(line: 773, column: 15, scope: !1112)
!7261 = !DILocation(line: 774, column: 30, scope: !1112)
!7262 = !DILocation(line: 774, column: 9, scope: !1112)
!7263 = !DILocation(line: 774, column: 38, scope: !1109)
!7264 = !DILocation(line: 780, column: 13, scope: !7265)
!7265 = distinct !DILexicalBlock(scope: !1109, file: !637, line: 780, column: 13)
!7266 = !DILocation(line: 780, column: 13, scope: !1109)
!7267 = !DILocation(line: 781, column: 26, scope: !7268)
!7268 = distinct !DILexicalBlock(scope: !7265, file: !637, line: 780, column: 20)
!7269 = !DILocation(line: 781, column: 13, scope: !7268)
!7270 = !DILocation(line: 782, column: 13, scope: !7268)
!7271 = !DILocation(line: 784, column: 17, scope: !1109)
!7272 = !DILocation(line: 784, column: 22, scope: !1109)
!7273 = !DILocation(line: 786, column: 17, scope: !7274)
!7274 = distinct !DILexicalBlock(scope: !1109, file: !637, line: 784, column: 33)
!7275 = !DILocation(line: 787, column: 13, scope: !7274)
!7276 = !DILocation(line: 790, column: 17, scope: !7274)
!7277 = !DILocation(line: 791, column: 13, scope: !7274)
!7278 = !DILocation(line: 794, column: 26, scope: !7274)
!7279 = !DILocation(line: 794, column: 13, scope: !7274)
!7280 = !DILocation(line: 795, column: 29, scope: !7274)
!7281 = !DILocation(line: 795, column: 13, scope: !7274)
!7282 = !DILocation(line: 797, column: 13, scope: !7274)
!7283 = !DILocation(line: 799, column: 13, scope: !7284)
!7284 = distinct !DILexicalBlock(scope: !1109, file: !637, line: 799, column: 13)
!7285 = !DILocation(line: 799, column: 18, scope: !7284)
!7286 = !{!7248, !2323, i64 40}
!7287 = !DILocation(line: 799, column: 13, scope: !1109)
!7288 = !DILocation(line: 800, column: 26, scope: !7289)
!7289 = distinct !DILexicalBlock(scope: !7284, file: !637, line: 799, column: 27)
!7290 = !DILocation(line: 800, column: 13, scope: !7289)
!7291 = !DILocation(line: 801, column: 29, scope: !7289)
!7292 = !DILocation(line: 801, column: 13, scope: !7289)
!7293 = !DILocation(line: 803, column: 13, scope: !7289)
!7294 = !DILocation(line: 805, column: 13, scope: !7295)
!7295 = distinct !DILexicalBlock(scope: !1109, file: !637, line: 805, column: 13)
!7296 = !DILocation(line: 805, column: 18, scope: !7295)
!7297 = !{!7248, !2950, i64 16}
!7298 = !DILocation(line: 805, column: 31, scope: !7295)
!7299 = !DILocation(line: 805, column: 29, scope: !7295)
!7300 = !DILocation(line: 805, column: 13, scope: !1109)
!7301 = !DILocation(line: 806, column: 29, scope: !7295)
!7302 = !DILocation(line: 806, column: 34, scope: !7295)
!7303 = !DILocation(line: 806, column: 27, scope: !7295)
!7304 = !DILocation(line: 806, column: 13, scope: !7295)
!7305 = !DILocation(line: 807, column: 16, scope: !1109)
!7306 = !DILocation(line: 807, column: 9, scope: !1109)
!7307 = !DILocation(line: 807, column: 26, scope: !1109)
!7308 = !DILocation(line: 807, column: 31, scope: !1109)
!7309 = !{!7248, !2323, i64 24}
!7310 = !DILocation(line: 807, column: 40, scope: !1109)
!7311 = !DILocation(line: 808, column: 22, scope: !1109)
!7312 = !DILocation(line: 808, column: 9, scope: !1109)
!7313 = !DILocation(line: 809, column: 16, scope: !1109)
!7314 = !DILocation(line: 809, column: 9, scope: !1109)
!7315 = !DILocation(line: 810, column: 5, scope: !1110)
!7316 = !DILocation(line: 813, column: 26, scope: !1114)
!7317 = !DILocation(line: 813, column: 33, scope: !1114)
!7318 = !DILocation(line: 813, column: 43, scope: !1114)
!7319 = !DILocation(line: 813, column: 1493, scope: !1114)
!7320 = !DILocation(line: 813, column: 1506, scope: !7321)
!7321 = !DILexicalBlockFile(scope: !1114, file: !637, discriminator: 1)
!7322 = !DILocation(line: 813, column: 1536, scope: !1114)
!7323 = !DILocation(line: 813, column: 1545, scope: !1114)
!7324 = !DILocation(line: 813, column: 1350, scope: !1114)
!7325 = !DILocation(line: 813, column: 1722, scope: !7326)
!7326 = !DILexicalBlockFile(scope: !1118, file: !637, discriminator: 3)
!7327 = !DILocation(line: 813, column: 1743, scope: !1118)
!7328 = !DILocation(line: 813, column: 1790, scope: !1118)
!7329 = !DILocation(line: 813, column: 1797, scope: !1118)
!7330 = !DILocation(line: 813, column: 1810, scope: !1118)
!7331 = !DILocation(line: 813, column: 1821, scope: !1118)
!7332 = !DILocation(line: 813, column: 1831, scope: !1118)
!7333 = !DILocation(line: 813, column: 1829, scope: !1118)
!7334 = !DILocation(line: 813, column: 1900, scope: !7335)
!7335 = distinct !DILexicalBlock(scope: !1118, file: !637, line: 813, column: 1900)
!7336 = !DILocation(line: 813, column: 1909, scope: !7335)
!7337 = !DILocation(line: 813, column: 1913, scope: !7335)
!7338 = !DILocation(line: 813, column: 1916, scope: !7339)
!7339 = !DILexicalBlockFile(scope: !7335, file: !637, discriminator: 5)
!7340 = !DILocation(line: 813, column: 1925, scope: !7335)
!7341 = !DILocation(line: 813, column: 1900, scope: !1118)
!7342 = !DILocation(line: 813, column: 1945, scope: !7343)
!7343 = !DILexicalBlockFile(scope: !7344, file: !637, discriminator: 7)
!7344 = distinct !DILexicalBlock(scope: !7335, file: !637, line: 813, column: 1931)
!7345 = !DILocation(line: 813, column: 1955, scope: !7344)
!7346 = !DILocation(line: 813, column: 1953, scope: !7344)
!7347 = !DILocation(line: 813, column: 1942, scope: !7344)
!7348 = !DILocation(line: 813, column: 2025, scope: !7349)
!7349 = distinct !DILexicalBlock(scope: !7344, file: !637, line: 813, column: 2025)
!7350 = !DILocation(line: 813, column: 2034, scope: !7349)
!7351 = !DILocation(line: 813, column: 2038, scope: !7349)
!7352 = !DILocation(line: 813, column: 2041, scope: !7353)
!7353 = !DILexicalBlockFile(scope: !7349, file: !637, discriminator: 9)
!7354 = !DILocation(line: 813, column: 2050, scope: !7349)
!7355 = !DILocation(line: 813, column: 2025, scope: !7344)
!7356 = !DILocation(line: 813, column: 2070, scope: !7357)
!7357 = !DILexicalBlockFile(scope: !7358, file: !637, discriminator: 11)
!7358 = distinct !DILexicalBlock(scope: !7349, file: !637, line: 813, column: 2056)
!7359 = !DILocation(line: 813, column: 2080, scope: !7358)
!7360 = !DILocation(line: 813, column: 2078, scope: !7358)
!7361 = !DILocation(line: 813, column: 2067, scope: !7358)
!7362 = !DILocation(line: 813, column: 2150, scope: !7363)
!7363 = distinct !DILexicalBlock(scope: !7358, file: !637, line: 813, column: 2150)
!7364 = !DILocation(line: 813, column: 2159, scope: !7363)
!7365 = !DILocation(line: 813, column: 2163, scope: !7363)
!7366 = !DILocation(line: 813, column: 2166, scope: !7367)
!7367 = !DILexicalBlockFile(scope: !7363, file: !637, discriminator: 13)
!7368 = !DILocation(line: 813, column: 2175, scope: !7363)
!7369 = !DILocation(line: 813, column: 2150, scope: !7358)
!7370 = !DILocation(line: 813, column: 2193, scope: !7371)
!7371 = !DILexicalBlockFile(scope: !7363, file: !637, discriminator: 15)
!7372 = !DILocation(line: 813, column: 2203, scope: !7363)
!7373 = !DILocation(line: 813, column: 2201, scope: !7363)
!7374 = !DILocation(line: 813, column: 2190, scope: !7363)
!7375 = !DILocation(line: 813, column: 2181, scope: !7363)
!7376 = !DILocation(line: 813, column: 2269, scope: !7377)
!7377 = !DILexicalBlockFile(scope: !7378, file: !637, discriminator: 17)
!7378 = !DILexicalBlockFile(scope: !7379, file: !637, discriminator: 16)
!7379 = !DILexicalBlockFile(scope: !7358, file: !637, discriminator: 14)
!7380 = !DILocation(line: 813, column: 2271, scope: !7381)
!7381 = !DILexicalBlockFile(scope: !7382, file: !637, discriminator: 18)
!7382 = !DILexicalBlockFile(scope: !7383, file: !637, discriminator: 12)
!7383 = !DILexicalBlockFile(scope: !7344, file: !637, discriminator: 10)
!7384 = !DILocation(line: 813, column: 2273, scope: !7385)
!7385 = !DILexicalBlockFile(scope: !7386, file: !637, discriminator: 19)
!7386 = !DILexicalBlockFile(scope: !7387, file: !637, discriminator: 8)
!7387 = !DILexicalBlockFile(scope: !1118, file: !637, discriminator: 6)
!7388 = !DILocation(line: 813, column: 1928, scope: !7335)
!7389 = !DILocation(line: 813, column: 2283, scope: !1114)
!7390 = !DILocation(line: 813, column: 2283, scope: !1118)
!7391 = !DILocation(line: 813, column: 2308, scope: !7392)
!7392 = !DILexicalBlockFile(scope: !7393, file: !637, discriminator: 4)
!7393 = !DILexicalBlockFile(scope: !1114, file: !637, discriminator: 2)
!7394 = !DILocation(line: 813, column: 2290, scope: !1114)
!7395 = !DILocation(line: 813, column: 26, scope: !7396)
!7396 = !DILexicalBlockFile(scope: !7397, file: !637, discriminator: 21)
!7397 = !DILexicalBlockFile(scope: !1114, file: !637, discriminator: 20)
!7398 = !DILocation(line: 813, column: 2337, scope: !1115)
!7399 = !DILocation(line: 813, column: 2337, scope: !1114)
!7400 = !DILocation(line: 813, column: 2340, scope: !1115)
!7401 = !DILocation(line: 813, column: 2345, scope: !1115)
!7402 = !DILocation(line: 814, column: 26, scope: !1121)
!7403 = !DILocation(line: 814, column: 33, scope: !1121)
!7404 = !DILocation(line: 814, column: 43, scope: !1121)
!7405 = !DILocation(line: 814, column: 1441, scope: !1121)
!7406 = !DILocation(line: 814, column: 1454, scope: !7407)
!7407 = !DILexicalBlockFile(scope: !1121, file: !637, discriminator: 1)
!7408 = !DILocation(line: 814, column: 1480, scope: !1121)
!7409 = !DILocation(line: 814, column: 1489, scope: !1121)
!7410 = !DILocation(line: 814, column: 1310, scope: !1121)
!7411 = !DILocation(line: 814, column: 1662, scope: !7412)
!7412 = !DILexicalBlockFile(scope: !1124, file: !637, discriminator: 3)
!7413 = !DILocation(line: 814, column: 1683, scope: !1124)
!7414 = !DILocation(line: 814, column: 1730, scope: !1124)
!7415 = !DILocation(line: 814, column: 1737, scope: !1124)
!7416 = !DILocation(line: 814, column: 1750, scope: !1124)
!7417 = !DILocation(line: 814, column: 1761, scope: !1124)
!7418 = !DILocation(line: 814, column: 1771, scope: !1124)
!7419 = !DILocation(line: 814, column: 1769, scope: !1124)
!7420 = !DILocation(line: 814, column: 1836, scope: !7421)
!7421 = distinct !DILexicalBlock(scope: !1124, file: !637, line: 814, column: 1836)
!7422 = !DILocation(line: 814, column: 1845, scope: !7421)
!7423 = !DILocation(line: 814, column: 1849, scope: !7421)
!7424 = !DILocation(line: 814, column: 1852, scope: !7425)
!7425 = !DILexicalBlockFile(scope: !7421, file: !637, discriminator: 5)
!7426 = !DILocation(line: 814, column: 1861, scope: !7421)
!7427 = !DILocation(line: 814, column: 1836, scope: !1124)
!7428 = !DILocation(line: 814, column: 1881, scope: !7429)
!7429 = !DILexicalBlockFile(scope: !7430, file: !637, discriminator: 7)
!7430 = distinct !DILexicalBlock(scope: !7421, file: !637, line: 814, column: 1867)
!7431 = !DILocation(line: 814, column: 1891, scope: !7430)
!7432 = !DILocation(line: 814, column: 1889, scope: !7430)
!7433 = !DILocation(line: 814, column: 1878, scope: !7430)
!7434 = !DILocation(line: 814, column: 1957, scope: !7435)
!7435 = distinct !DILexicalBlock(scope: !7430, file: !637, line: 814, column: 1957)
!7436 = !DILocation(line: 814, column: 1966, scope: !7435)
!7437 = !DILocation(line: 814, column: 1970, scope: !7435)
!7438 = !DILocation(line: 814, column: 1973, scope: !7439)
!7439 = !DILexicalBlockFile(scope: !7435, file: !637, discriminator: 9)
!7440 = !DILocation(line: 814, column: 1982, scope: !7435)
!7441 = !DILocation(line: 814, column: 1957, scope: !7430)
!7442 = !DILocation(line: 814, column: 2002, scope: !7443)
!7443 = !DILexicalBlockFile(scope: !7444, file: !637, discriminator: 11)
!7444 = distinct !DILexicalBlock(scope: !7435, file: !637, line: 814, column: 1988)
!7445 = !DILocation(line: 814, column: 2012, scope: !7444)
!7446 = !DILocation(line: 814, column: 2010, scope: !7444)
!7447 = !DILocation(line: 814, column: 1999, scope: !7444)
!7448 = !DILocation(line: 814, column: 2078, scope: !7449)
!7449 = distinct !DILexicalBlock(scope: !7444, file: !637, line: 814, column: 2078)
!7450 = !DILocation(line: 814, column: 2087, scope: !7449)
!7451 = !DILocation(line: 814, column: 2091, scope: !7449)
!7452 = !DILocation(line: 814, column: 2094, scope: !7453)
!7453 = !DILexicalBlockFile(scope: !7449, file: !637, discriminator: 13)
!7454 = !DILocation(line: 814, column: 2103, scope: !7449)
!7455 = !DILocation(line: 814, column: 2078, scope: !7444)
!7456 = !DILocation(line: 814, column: 2121, scope: !7457)
!7457 = !DILexicalBlockFile(scope: !7449, file: !637, discriminator: 15)
!7458 = !DILocation(line: 814, column: 2131, scope: !7449)
!7459 = !DILocation(line: 814, column: 2129, scope: !7449)
!7460 = !DILocation(line: 814, column: 2118, scope: !7449)
!7461 = !DILocation(line: 814, column: 2109, scope: !7449)
!7462 = !DILocation(line: 814, column: 2193, scope: !7463)
!7463 = !DILexicalBlockFile(scope: !7464, file: !637, discriminator: 17)
!7464 = !DILexicalBlockFile(scope: !7465, file: !637, discriminator: 16)
!7465 = !DILexicalBlockFile(scope: !7444, file: !637, discriminator: 14)
!7466 = !DILocation(line: 814, column: 2195, scope: !7467)
!7467 = !DILexicalBlockFile(scope: !7468, file: !637, discriminator: 18)
!7468 = !DILexicalBlockFile(scope: !7469, file: !637, discriminator: 12)
!7469 = !DILexicalBlockFile(scope: !7430, file: !637, discriminator: 10)
!7470 = !DILocation(line: 814, column: 2197, scope: !7471)
!7471 = !DILexicalBlockFile(scope: !7472, file: !637, discriminator: 19)
!7472 = !DILexicalBlockFile(scope: !7473, file: !637, discriminator: 8)
!7473 = !DILexicalBlockFile(scope: !1124, file: !637, discriminator: 6)
!7474 = !DILocation(line: 814, column: 1864, scope: !7421)
!7475 = !DILocation(line: 814, column: 2207, scope: !1121)
!7476 = !DILocation(line: 814, column: 2207, scope: !1124)
!7477 = !DILocation(line: 814, column: 2232, scope: !7478)
!7478 = !DILexicalBlockFile(scope: !7479, file: !637, discriminator: 4)
!7479 = !DILexicalBlockFile(scope: !1121, file: !637, discriminator: 2)
!7480 = !DILocation(line: 814, column: 2214, scope: !1121)
!7481 = !DILocation(line: 814, column: 26, scope: !7482)
!7482 = !DILexicalBlockFile(scope: !7483, file: !637, discriminator: 21)
!7483 = !DILexicalBlockFile(scope: !1121, file: !637, discriminator: 20)
!7484 = !DILocation(line: 814, column: 2257, scope: !1115)
!7485 = !DILocation(line: 814, column: 2257, scope: !1121)
!7486 = !DILocation(line: 814, column: 2260, scope: !1115)
!7487 = !DILocation(line: 813, column: 9, scope: !1085)
!7488 = !DILocation(line: 815, column: 9, scope: !1127)
!7489 = !DILocation(line: 815, column: 29, scope: !1127)
!7490 = !DILocation(line: 816, column: 13, scope: !7491)
!7491 = distinct !DILexicalBlock(scope: !1127, file: !637, line: 816, column: 13)
!7492 = !DILocation(line: 816, column: 16, scope: !7491)
!7493 = !DILocation(line: 816, column: 21, scope: !7491)
!7494 = !DILocation(line: 816, column: 24, scope: !7495)
!7495 = !DILexicalBlockFile(scope: !7491, file: !637, discriminator: 1)
!7496 = !DILocation(line: 816, column: 27, scope: !7491)
!7497 = !DILocation(line: 816, column: 13, scope: !1127)
!7498 = !DILocation(line: 817, column: 29, scope: !7499)
!7499 = distinct !DILexicalBlock(scope: !7491, file: !637, line: 816, column: 33)
!7500 = !DILocation(line: 817, column: 13, scope: !7499)
!7501 = !DILocation(line: 819, column: 13, scope: !7499)
!7502 = !DILocation(line: 821, column: 37, scope: !1127)
!7503 = !DILocation(line: 821, column: 15, scope: !1127)
!7504 = !DILocation(line: 821, column: 13, scope: !1127)
!7505 = !DILocation(line: 822, column: 25, scope: !1127)
!7506 = !DILocation(line: 822, column: 16, scope: !1127)
!7507 = !DILocation(line: 822, column: 9, scope: !1127)
!7508 = !DILocation(line: 823, column: 9, scope: !1127)
!7509 = !DILocation(line: 823, column: 14, scope: !1127)
!7510 = !DILocation(line: 823, column: 25, scope: !1127)
!7511 = !DILocation(line: 827, column: 9, scope: !1127)
!7512 = !DILocation(line: 827, column: 14, scope: !1127)
!7513 = !DILocation(line: 827, column: 23, scope: !1127)
!7514 = !DILocation(line: 827, column: 30, scope: !1127)
!7515 = !{!6055, !2950, i64 4}
!7516 = !DILocation(line: 828, column: 9, scope: !1127)
!7517 = !DILocation(line: 829, column: 5, scope: !1115)
!7518 = !DILocation(line: 834, column: 9, scope: !1130)
!7519 = !DILocation(line: 834, column: 12, scope: !1130)
!7520 = !DILocation(line: 834, column: 17, scope: !1130)
!7521 = !DILocation(line: 834, column: 20, scope: !7522)
!7522 = !DILexicalBlockFile(scope: !1130, file: !637, discriminator: 1)
!7523 = !DILocation(line: 834, column: 23, scope: !1130)
!7524 = !DILocation(line: 834, column: 9, scope: !1085)
!7525 = !DILocation(line: 835, column: 9, scope: !1129)
!7526 = !DILocation(line: 835, column: 29, scope: !1129)
!7527 = !DILocation(line: 835, column: 57, scope: !1129)
!7528 = !DILocation(line: 835, column: 35, scope: !1129)
!7529 = !DILocation(line: 836, column: 16, scope: !1129)
!7530 = !DILocation(line: 836, column: 9, scope: !1129)
!7531 = !DILocation(line: 837, column: 26, scope: !7532)
!7532 = distinct !DILexicalBlock(scope: !1129, file: !637, line: 837, column: 13)
!7533 = !DILocation(line: 837, column: 33, scope: !7532)
!7534 = !DILocation(line: 837, column: 38, scope: !7532)
!7535 = !DILocation(line: 837, column: 32, scope: !7532)
!7536 = !DILocation(line: 837, column: 13, scope: !7532)
!7537 = !DILocation(line: 837, column: 48, scope: !7532)
!7538 = !DILocation(line: 837, column: 13, scope: !1129)
!7539 = !DILocation(line: 838, column: 13, scope: !7540)
!7540 = distinct !DILexicalBlock(scope: !7532, file: !637, line: 837, column: 53)
!7541 = !DILocation(line: 838, column: 18, scope: !7540)
!7542 = !DILocation(line: 838, column: 29, scope: !7540)
!7543 = !DILocation(line: 842, column: 13, scope: !7540)
!7544 = !DILocation(line: 844, column: 5, scope: !1130)
!7545 = !DILocation(line: 844, column: 5, scope: !7522)
!7546 = !DILocation(line: 844, column: 5, scope: !1129)
!7547 = !DILocation(line: 849, column: 10, scope: !1133)
!7548 = !DILocation(line: 849, column: 13, scope: !1133)
!7549 = !DILocation(line: 849, column: 18, scope: !1133)
!7550 = !DILocation(line: 849, column: 21, scope: !7551)
!7551 = !DILexicalBlockFile(scope: !1133, file: !637, discriminator: 2)
!7552 = !DILocation(line: 849, column: 24, scope: !1133)
!7553 = !DILocation(line: 849, column: 31, scope: !1133)
!7554 = !DILocation(line: 849, column: 9, scope: !7555)
!7555 = !DILexicalBlockFile(scope: !7556, file: !637, discriminator: 3)
!7556 = !DILexicalBlockFile(scope: !1085, file: !637, discriminator: 1)
!7557 = !DILocation(line: 849, column: 151, scope: !7558)
!7558 = !DILexicalBlockFile(scope: !1133, file: !637, discriminator: 4)
!7559 = !DILocation(line: 849, column: 138, scope: !1133)
!7560 = !DILocation(line: 849, column: 129, scope: !1133)
!7561 = !DILocation(line: 849, column: 51, scope: !1133)
!7562 = !DILocation(line: 849, column: 182, scope: !7563)
!7563 = !DILexicalBlockFile(scope: !1133, file: !637, discriminator: 5)
!7564 = !DILocation(line: 849, column: 164, scope: !1133)
!7565 = !DILocation(line: 849, column: 9, scope: !1085)
!7566 = !DILocation(line: 850, column: 9, scope: !1132)
!7567 = !DILocation(line: 850, column: 30, scope: !1132)
!7568 = !DILocation(line: 850, column: 59, scope: !1132)
!7569 = !DILocation(line: 850, column: 36, scope: !1132)
!7570 = !DILocation(line: 851, column: 16, scope: !1132)
!7571 = !DILocation(line: 851, column: 9, scope: !1132)
!7572 = !DILocation(line: 852, column: 27, scope: !7573)
!7573 = distinct !DILexicalBlock(scope: !1132, file: !637, line: 852, column: 13)
!7574 = !DILocation(line: 852, column: 34, scope: !7573)
!7575 = !DILocation(line: 852, column: 39, scope: !7573)
!7576 = !DILocation(line: 852, column: 33, scope: !7573)
!7577 = !DILocation(line: 852, column: 13, scope: !7573)
!7578 = !DILocation(line: 852, column: 50, scope: !7573)
!7579 = !DILocation(line: 852, column: 13, scope: !1132)
!7580 = !DILocation(line: 853, column: 13, scope: !7581)
!7581 = distinct !DILexicalBlock(scope: !7573, file: !637, line: 852, column: 55)
!7582 = !DILocation(line: 853, column: 18, scope: !7581)
!7583 = !DILocation(line: 853, column: 30, scope: !7581)
!7584 = !DILocation(line: 857, column: 13, scope: !7581)
!7585 = !DILocation(line: 859, column: 5, scope: !1133)
!7586 = !DILocation(line: 859, column: 5, scope: !7587)
!7587 = !DILexicalBlockFile(scope: !1133, file: !637, discriminator: 1)
!7588 = !DILocation(line: 859, column: 5, scope: !1132)
!7589 = !DILocation(line: 877, column: 5, scope: !1085)
!7590 = !DILocation(line: 878, column: 23, scope: !1085)
!7591 = !DILocation(line: 878, column: 11, scope: !1085)
!7592 = !DILocation(line: 878, column: 21, scope: !1085)
!7593 = !DILocation(line: 879, column: 7, scope: !1135)
!7594 = !DILocation(line: 879, column: 22, scope: !1135)
!7595 = !DILocation(line: 879, column: 37, scope: !1135)
!7596 = !DILocation(line: 879, column: 35, scope: !1135)
!7597 = !DILocation(line: 881, column: 25, scope: !1135)
!7598 = !DILocation(line: 881, column: 13, scope: !1135)
!7599 = !DILocation(line: 881, column: 11, scope: !1135)
!7600 = !DILocation(line: 890, column: 26, scope: !1135)
!7601 = !DILocation(line: 890, column: 5, scope: !1135)
!7602 = !DILocation(line: 890, column: 34, scope: !1085)
!7603 = !DILocation(line: 892, column: 9, scope: !7604)
!7604 = distinct !DILexicalBlock(scope: !1085, file: !637, line: 892, column: 9)
!7605 = !DILocation(line: 892, column: 9, scope: !1085)
!7606 = !DILocation(line: 893, column: 22, scope: !7607)
!7607 = distinct !DILexicalBlock(scope: !7604, file: !637, line: 892, column: 16)
!7608 = !DILocation(line: 893, column: 9, scope: !7607)
!7609 = !DILocation(line: 894, column: 9, scope: !7607)
!7610 = !DILocation(line: 896, column: 9, scope: !7611)
!7611 = distinct !DILexicalBlock(scope: !1085, file: !637, line: 896, column: 9)
!7612 = !DILocation(line: 896, column: 14, scope: !7611)
!7613 = !DILocation(line: 896, column: 27, scope: !7611)
!7614 = !DILocation(line: 896, column: 25, scope: !7611)
!7615 = !DILocation(line: 896, column: 9, scope: !1085)
!7616 = !DILocation(line: 897, column: 25, scope: !7611)
!7617 = !DILocation(line: 897, column: 30, scope: !7611)
!7618 = !DILocation(line: 897, column: 23, scope: !7611)
!7619 = !DILocation(line: 897, column: 9, scope: !7611)
!7620 = !DILocation(line: 898, column: 21, scope: !1085)
!7621 = !DILocation(line: 898, column: 12, scope: !1085)
!7622 = !DILocation(line: 898, column: 31, scope: !1085)
!7623 = !DILocation(line: 898, column: 36, scope: !1085)
!7624 = !DILocation(line: 898, column: 5, scope: !1085)
!7625 = !DILocation(line: 898, column: 45, scope: !1085)
!7626 = !DILocation(line: 899, column: 18, scope: !1085)
!7627 = !DILocation(line: 899, column: 5, scope: !1085)
!7628 = !DILocation(line: 900, column: 13, scope: !1085)
!7629 = !DILocation(line: 900, column: 23, scope: !1085)
!7630 = !DILocation(line: 902, column: 9, scope: !7631)
!7631 = distinct !DILexicalBlock(scope: !1085, file: !637, line: 900, column: 34)
!7632 = !DILocation(line: 905, column: 9, scope: !7631)
!7633 = !DILocation(line: 908, column: 25, scope: !7631)
!7634 = !DILocation(line: 908, column: 9, scope: !7631)
!7635 = !DILocation(line: 909, column: 9, scope: !7631)
!7636 = !DILocation(line: 911, column: 1, scope: !1085)
!7637 = !DILocation(line: 2305, column: 38, scope: !1154)
!7638 = !DILocation(line: 2305, column: 58, scope: !1154)
!7639 = !DILocation(line: 2305, column: 68, scope: !1154)
!7640 = !DILocation(line: 2306, column: 23, scope: !1154)
!7641 = !DILocation(line: 2308, column: 5, scope: !1154)
!7642 = !DILocation(line: 2308, column: 9, scope: !1154)
!7643 = !DILocation(line: 2308, column: 14, scope: !1154)
!7644 = !DILocation(line: 2310, column: 13, scope: !1154)
!7645 = !DILocation(line: 2311, column: 19, scope: !1154)
!7646 = !DILocation(line: 2311, column: 22, scope: !1154)
!7647 = !DILocation(line: 2311, column: 31, scope: !1154)
!7648 = !DILocation(line: 2311, column: 37, scope: !1154)
!7649 = !DILocation(line: 2311, column: 11, scope: !1154)
!7650 = !DILocation(line: 2311, column: 9, scope: !1154)
!7651 = !DILocation(line: 2362, column: 9, scope: !1170)
!7652 = !DILocation(line: 2362, column: 12, scope: !1170)
!7653 = !DILocation(line: 2362, column: 25, scope: !1170)
!7654 = !DILocation(line: 2362, column: 9, scope: !1154)
!7655 = !DILocation(line: 2363, column: 13, scope: !1168)
!7656 = !DILocation(line: 2363, column: 17, scope: !1168)
!7657 = !DILocation(line: 2363, column: 21, scope: !1168)
!7658 = !DILocation(line: 2363, column: 26, scope: !7659)
!7659 = !DILexicalBlockFile(scope: !1168, file: !637, discriminator: 1)
!7660 = !DILocation(line: 2363, column: 25, scope: !1168)
!7661 = !DILocation(line: 2363, column: 47, scope: !1168)
!7662 = !DILocation(line: 2363, column: 13, scope: !1169)
!7663 = !DILocation(line: 2364, column: 39, scope: !1167)
!7664 = !DILocation(line: 2364, column: 23, scope: !1167)
!7665 = !DILocation(line: 2364, column: 21, scope: !1167)
!7666 = !DILocation(line: 2365, column: 17, scope: !1166)
!7667 = !DILocation(line: 2365, column: 25, scope: !1166)
!7668 = !DILocation(line: 2365, column: 17, scope: !1167)
!7669 = !DILocation(line: 2369, column: 17, scope: !1165)
!7670 = !DILocation(line: 2369, column: 27, scope: !1165)
!7671 = !DILocation(line: 2370, column: 34, scope: !1165)
!7672 = !DILocation(line: 2370, column: 37, scope: !1165)
!7673 = !DILocation(line: 2371, column: 37, scope: !1165)
!7674 = !DILocation(line: 2370, column: 23, scope: !1165)
!7675 = !DILocation(line: 2372, column: 21, scope: !7676)
!7676 = distinct !DILexicalBlock(scope: !1165, file: !637, line: 2372, column: 21)
!7677 = !DILocation(line: 2372, column: 25, scope: !7676)
!7678 = !DILocation(line: 2372, column: 21, scope: !1165)
!7679 = !DILocation(line: 2373, column: 25, scope: !7676)
!7680 = !DILocation(line: 2373, column: 21, scope: !7676)
!7681 = !DILocation(line: 2374, column: 42, scope: !1165)
!7682 = !DILocation(line: 2374, column: 19, scope: !1165)
!7683 = !DILocation(line: 2374, column: 40, scope: !1165)
!7684 = !DILocation(line: 2375, column: 13, scope: !1166)
!7685 = !DILocation(line: 2375, column: 13, scope: !1165)
!7686 = !DILocation(line: 2376, column: 22, scope: !7687)
!7687 = distinct !DILexicalBlock(scope: !1166, file: !637, line: 2376, column: 22)
!7688 = !DILocation(line: 2376, column: 30, scope: !7687)
!7689 = !DILocation(line: 2376, column: 22, scope: !1166)
!7690 = !DILocation(line: 2377, column: 25, scope: !7691)
!7691 = distinct !DILexicalBlock(scope: !7687, file: !637, line: 2376, column: 37)
!7692 = !DILocation(line: 2377, column: 24, scope: !7691)
!7693 = !DILocation(line: 2377, column: 21, scope: !7691)
!7694 = !DILocation(line: 2378, column: 13, scope: !7691)
!7695 = !DILocation(line: 2380, column: 21, scope: !7687)
!7696 = !DILocation(line: 2381, column: 9, scope: !1167)
!7697 = !DILocation(line: 2382, column: 5, scope: !1169)
!7698 = !DILocation(line: 2384, column: 9, scope: !7699)
!7699 = distinct !DILexicalBlock(scope: !1154, file: !637, line: 2384, column: 9)
!7700 = !DILocation(line: 2384, column: 13, scope: !7699)
!7701 = !DILocation(line: 2384, column: 9, scope: !1154)
!7702 = !DILocation(line: 2385, column: 17, scope: !7699)
!7703 = !DILocation(line: 2385, column: 16, scope: !7699)
!7704 = !DILocation(line: 2385, column: 13, scope: !7699)
!7705 = !DILocation(line: 2385, column: 9, scope: !7699)
!7706 = !DILocation(line: 2388, column: 17, scope: !1154)
!7707 = !DILocation(line: 2388, column: 6, scope: !1154)
!7708 = !DILocation(line: 2388, column: 15, scope: !1154)
!7709 = !DILocation(line: 2390, column: 12, scope: !1154)
!7710 = !DILocation(line: 2391, column: 1, scope: !1154)
!7711 = !DILocation(line: 2390, column: 5, scope: !1154)
!7712 = !DILocation(line: 654, column: 37, scope: !1171)
!7713 = !DILocation(line: 654, column: 44, scope: !1171)
!7714 = !DILocation(line: 656, column: 31, scope: !1171)
!7715 = !DILocation(line: 656, column: 34, scope: !1171)
!7716 = !DILocation(line: 656, column: 43, scope: !1171)
!7717 = !DILocation(line: 656, column: 46, scope: !1171)
!7718 = !DILocation(line: 656, column: 12, scope: !1171)
!7719 = !DILocation(line: 656, column: 5, scope: !1171)
!7720 = !DILocation(line: 2577, column: 36, scope: !1247)
!7721 = !DILocation(line: 2577, column: 45, scope: !1247)
!7722 = !DILocation(line: 2577, column: 62, scope: !1247)
!7723 = !DILocation(line: 2577, column: 71, scope: !1247)
!7724 = !DILocation(line: 2579, column: 5, scope: !1247)
!7725 = !DILocation(line: 2579, column: 16, scope: !1247)
!7726 = !DILocation(line: 2580, column: 5, scope: !1247)
!7727 = !DILocation(line: 2580, column: 9, scope: !1247)
!7728 = !DILocation(line: 2586, column: 9, scope: !7729)
!7729 = distinct !DILexicalBlock(scope: !1247, file: !637, line: 2586, column: 9)
!7730 = !DILocation(line: 2586, column: 13, scope: !7729)
!7731 = !DILocation(line: 2586, column: 9, scope: !1247)
!7732 = !DILocation(line: 2588, column: 9, scope: !7733)
!7733 = distinct !DILexicalBlock(scope: !7729, file: !637, line: 2586, column: 19)
!7734 = !DILocation(line: 2591, column: 7, scope: !1258)
!7735 = !DILocation(line: 2591, column: 23, scope: !1258)
!7736 = !DILocation(line: 2591, column: 28, scope: !1258)
!7737 = !DILocation(line: 2591, column: 47, scope: !1258)
!7738 = !DILocation(line: 2591, column: 54, scope: !1258)
!7739 = !DILocation(line: 2591, column: 65, scope: !1258)
!7740 = !DILocation(line: 2591, column: 68, scope: !1258)
!7741 = !DILocation(line: 2591, column: 82, scope: !1258)
!7742 = !DILocation(line: 2591, column: 86, scope: !1258)
!7743 = !DILocation(line: 2591, column: 100, scope: !1258)
!7744 = !DILocation(line: 2591, column: 103, scope: !1258)
!7745 = !DILocation(line: 2591, column: 116, scope: !1258)
!7746 = !DILocation(line: 2591, column: 127, scope: !7747)
!7747 = distinct !DILexicalBlock(scope: !1258, file: !637, line: 2591, column: 127)
!7748 = !DILocation(line: 2591, column: 127, scope: !1258)
!7749 = !DILocation(line: 2591, column: 142, scope: !7750)
!7750 = !DILexicalBlockFile(scope: !7751, file: !637, discriminator: 1)
!7751 = distinct !DILexicalBlock(scope: !7747, file: !637, line: 2591, column: 140)
!7752 = !DILocation(line: 2591, column: 181, scope: !7751)
!7753 = !DILocation(line: 2591, column: 186, scope: !7751)
!7754 = !DILocation(line: 2591, column: 227, scope: !7755)
!7755 = !DILexicalBlockFile(scope: !7756, file: !637, discriminator: 3)
!7756 = distinct !DILexicalBlock(scope: !7751, file: !637, line: 2591, column: 189)
!7757 = !DILocation(line: 2591, column: 230, scope: !7756)
!7758 = !DILocation(line: 2591, column: 220, scope: !7756)
!7759 = !DILocation(line: 2591, column: 245, scope: !7756)
!7760 = !DILocation(line: 2591, column: 248, scope: !7756)
!7761 = !DILocation(line: 2591, column: 243, scope: !7756)
!7762 = !DILocation(line: 2591, column: 262, scope: !7756)
!7763 = !DILocation(line: 2591, column: 211, scope: !7756)
!7764 = !DILocation(line: 2591, column: 200, scope: !7756)
!7765 = !DILocation(line: 2591, column: 208, scope: !7756)
!7766 = !DILocation(line: 2591, column: 302, scope: !7756)
!7767 = !DILocation(line: 2591, column: 305, scope: !7756)
!7768 = !DILocation(line: 2591, column: 293, scope: !7756)
!7769 = !DILocation(line: 2591, column: 339, scope: !7756)
!7770 = !DILocation(line: 2591, column: 347, scope: !7756)
!7771 = !DILocation(line: 2591, column: 318, scope: !7756)
!7772 = !DILocation(line: 2591, column: 283, scope: !7756)
!7773 = !DILocation(line: 2591, column: 290, scope: !7756)
!7774 = !DILocation(line: 2591, column: 368, scope: !7756)
!7775 = !DILocation(line: 2591, column: 376, scope: !7756)
!7776 = !DILocation(line: 2591, column: 388, scope: !7756)
!7777 = !DILocation(line: 2591, column: 388, scope: !7778)
!7778 = !DILexicalBlockFile(scope: !7756, file: !637, discriminator: 4)
!7779 = !DILocation(line: 2591, column: 401, scope: !7780)
!7780 = !DILexicalBlockFile(scope: !7751, file: !637, discriminator: 5)
!7781 = !DILocation(line: 2591, column: 403, scope: !7782)
!7782 = !DILexicalBlockFile(scope: !7783, file: !637, discriminator: 6)
!7783 = !DILexicalBlockFile(scope: !1258, file: !637, discriminator: 2)
!7784 = !DILocation(line: 2591, column: 403, scope: !7785)
!7785 = !DILexicalBlockFile(scope: !7786, file: !637, discriminator: 9)
!7786 = !DILexicalBlockFile(scope: !1258, file: !637, discriminator: 7)
!7787 = !DILocation(line: 2591, column: 417, scope: !7788)
!7788 = !DILexicalBlockFile(scope: !1264, file: !637, discriminator: 8)
!7789 = !DILocation(line: 2591, column: 438, scope: !1264)
!7790 = !DILocation(line: 2592, column: 7, scope: !1263)
!7791 = !DILocation(line: 2592, column: 22, scope: !1263)
!7792 = !DILocation(line: 2592, column: 37, scope: !1263)
!7793 = !DILocation(line: 2592, column: 35, scope: !1263)
!7794 = !DILocation(line: 2593, column: 34, scope: !1263)
!7795 = !DILocation(line: 2593, column: 40, scope: !1263)
!7796 = !DILocation(line: 2593, column: 15, scope: !1263)
!7797 = !DILocation(line: 2593, column: 13, scope: !1263)
!7798 = !DILocation(line: 2594, column: 10, scope: !7799)
!7799 = distinct !DILexicalBlock(scope: !1263, file: !637, line: 2594, column: 9)
!7800 = !DILocation(line: 2594, column: 9, scope: !1263)
!7801 = !DILocation(line: 2600, column: 23, scope: !7802)
!7802 = distinct !DILexicalBlock(scope: !7799, file: !637, line: 2594, column: 19)
!7803 = !DILocation(line: 2600, column: 26, scope: !7802)
!7804 = !DILocation(line: 2600, column: 35, scope: !7802)
!7805 = !DILocation(line: 2600, column: 41, scope: !7802)
!7806 = !DILocation(line: 2600, column: 46, scope: !7802)
!7807 = !DILocation(line: 2600, column: 18, scope: !7802)
!7808 = !DILocation(line: 2600, column: 16, scope: !7802)
!7809 = !DILocation(line: 2602, column: 5, scope: !7802)
!7810 = !DILocation(line: 2603, column: 26, scope: !1263)
!7811 = !DILocation(line: 2603, column: 5, scope: !1263)
!7812 = !DILocation(line: 2603, column: 34, scope: !1264)
!7813 = !DILocation(line: 2605, column: 9, scope: !7814)
!7814 = distinct !DILexicalBlock(scope: !1264, file: !637, line: 2605, column: 9)
!7815 = !DILocation(line: 2605, column: 17, scope: !7814)
!7816 = !DILocation(line: 2605, column: 9, scope: !1264)
!7817 = !DILocation(line: 2606, column: 25, scope: !7818)
!7818 = distinct !DILexicalBlock(scope: !7814, file: !637, line: 2605, column: 23)
!7819 = !DILocation(line: 2606, column: 9, scope: !7818)
!7820 = !DILocation(line: 2607, column: 9, scope: !7818)
!7821 = !DILocation(line: 2609, column: 10, scope: !7822)
!7822 = distinct !DILexicalBlock(scope: !1264, file: !637, line: 2609, column: 9)
!7823 = !DILocation(line: 2609, column: 22, scope: !7822)
!7824 = !DILocation(line: 2609, column: 30, scope: !7825)
!7825 = !DILexicalBlockFile(scope: !7822, file: !637, discriminator: 1)
!7826 = !DILocation(line: 2609, column: 29, scope: !7822)
!7827 = !DILocation(line: 2609, column: 51, scope: !7822)
!7828 = !DILocation(line: 2609, column: 58, scope: !7822)
!7829 = !DILocation(line: 2609, column: 65, scope: !7830)
!7830 = !DILexicalBlockFile(scope: !7822, file: !637, discriminator: 4)
!7831 = !DILocation(line: 2609, column: 64, scope: !7822)
!7832 = !DILocation(line: 2609, column: 86, scope: !7822)
!7833 = !DILocation(line: 2609, column: 9, scope: !1264)
!7834 = !DILocation(line: 2609, column: 95, scope: !7835)
!7835 = !DILexicalBlockFile(scope: !7836, file: !637, discriminator: 6)
!7836 = !DILexicalBlockFile(scope: !7822, file: !637, discriminator: 2)
!7837 = !DILocation(line: 2609, column: 102, scope: !7838)
!7838 = !DILexicalBlockFile(scope: !7839, file: !637, discriminator: 5)
!7839 = !DILexicalBlockFile(scope: !1264, file: !637, discriminator: 3)
!7840 = !DILocation(line: 2609, column: 152, scope: !1264)
!7841 = !DILocation(line: 2609, column: 165, scope: !1264)
!7842 = !DILocation(line: 2609, column: 159, scope: !1264)
!7843 = !DILocation(line: 2609, column: 142, scope: !1264)
!7844 = !DILocation(line: 2609, column: 185, scope: !1264)
!7845 = !DILocation(line: 2609, column: 199, scope: !1264)
!7846 = !DILocation(line: 2609, column: 193, scope: !1264)
!7847 = !DILocation(line: 2609, column: 175, scope: !1264)
!7848 = !DILocation(line: 2609, column: 208, scope: !1264)
!7849 = !DILocation(line: 2609, column: 173, scope: !1264)
!7850 = !DILocation(line: 2609, column: 139, scope: !1264)
!7851 = !DILocation(line: 2591, column: 403, scope: !1258)
!7852 = !DILocation(line: 2609, column: 223, scope: !7853)
!7853 = !DILexicalBlockFile(scope: !1247, file: !637, discriminator: 7)
!7854 = !DILocation(line: 2609, column: 223, scope: !7855)
!7855 = !DILexicalBlockFile(scope: !1247, file: !637, discriminator: 8)
!7856 = !DILocation(line: 2610, column: 9, scope: !7857)
!7857 = distinct !DILexicalBlock(scope: !1247, file: !637, line: 2610, column: 9)
!7858 = !DILocation(line: 2610, column: 16, scope: !7857)
!7859 = !DILocation(line: 2610, column: 9, scope: !1247)
!7860 = !DILocation(line: 2613, column: 9, scope: !7861)
!7861 = distinct !DILexicalBlock(scope: !7857, file: !637, line: 2610, column: 21)
!7862 = !DILocation(line: 2613, column: 12, scope: !7861)
!7863 = !DILocation(line: 2614, column: 9, scope: !7861)
!7864 = !DILocation(line: 2616, column: 12, scope: !1247)
!7865 = !DILocation(line: 2616, column: 5, scope: !1247)
!7866 = !DILocation(line: 2617, column: 1, scope: !1247)
!7867 = !DILocation(line: 2743, column: 40, scope: !1298)
!7868 = !DILocation(line: 2743, column: 49, scope: !1298)
!7869 = !DILocation(line: 2743, column: 66, scope: !1298)
!7870 = !DILocation(line: 2743, column: 75, scope: !1298)
!7871 = !DILocation(line: 2744, column: 31, scope: !1298)
!7872 = !DILocation(line: 2746, column: 5, scope: !1298)
!7873 = !DILocation(line: 2746, column: 17, scope: !1298)
!7874 = !DILocation(line: 2747, column: 5, scope: !1298)
!7875 = !DILocation(line: 2747, column: 9, scope: !1298)
!7876 = !DILocation(line: 2748, column: 5, scope: !1298)
!7877 = !DILocation(line: 2748, column: 16, scope: !1298)
!7878 = !DILocation(line: 2749, column: 5, scope: !1298)
!7879 = !DILocation(line: 2749, column: 15, scope: !1298)
!7880 = !DILocation(line: 2751, column: 6, scope: !1298)
!7881 = !DILocation(line: 2751, column: 11, scope: !1298)
!7882 = !DILocation(line: 2753, column: 25, scope: !7883)
!7883 = distinct !DILexicalBlock(scope: !1298, file: !637, line: 2753, column: 9)
!7884 = !DILocation(line: 2753, column: 10, scope: !7883)
!7885 = !DILocation(line: 2753, column: 9, scope: !1298)
!7886 = !DILocation(line: 2754, column: 9, scope: !7883)
!7887 = !DILocation(line: 2761, column: 7, scope: !1312)
!7888 = !DILocation(line: 2761, column: 23, scope: !1312)
!7889 = !DILocation(line: 2761, column: 28, scope: !1312)
!7890 = !DILocation(line: 2761, column: 47, scope: !1312)
!7891 = !DILocation(line: 2761, column: 54, scope: !1312)
!7892 = !DILocation(line: 2761, column: 65, scope: !1312)
!7893 = !DILocation(line: 2761, column: 68, scope: !1312)
!7894 = !DILocation(line: 2761, column: 82, scope: !1312)
!7895 = !DILocation(line: 2761, column: 86, scope: !1312)
!7896 = !DILocation(line: 2761, column: 100, scope: !1312)
!7897 = !DILocation(line: 2761, column: 103, scope: !1312)
!7898 = !DILocation(line: 2761, column: 116, scope: !1312)
!7899 = !DILocation(line: 2761, column: 127, scope: !7900)
!7900 = distinct !DILexicalBlock(scope: !1312, file: !637, line: 2761, column: 127)
!7901 = !DILocation(line: 2761, column: 127, scope: !1312)
!7902 = !DILocation(line: 2761, column: 142, scope: !7903)
!7903 = !DILexicalBlockFile(scope: !7904, file: !637, discriminator: 1)
!7904 = distinct !DILexicalBlock(scope: !7900, file: !637, line: 2761, column: 140)
!7905 = !DILocation(line: 2761, column: 181, scope: !7904)
!7906 = !DILocation(line: 2761, column: 186, scope: !7904)
!7907 = !DILocation(line: 2761, column: 227, scope: !7908)
!7908 = !DILexicalBlockFile(scope: !7909, file: !637, discriminator: 3)
!7909 = distinct !DILexicalBlock(scope: !7904, file: !637, line: 2761, column: 189)
!7910 = !DILocation(line: 2761, column: 230, scope: !7909)
!7911 = !DILocation(line: 2761, column: 220, scope: !7909)
!7912 = !DILocation(line: 2761, column: 245, scope: !7909)
!7913 = !DILocation(line: 2761, column: 248, scope: !7909)
!7914 = !DILocation(line: 2761, column: 243, scope: !7909)
!7915 = !DILocation(line: 2761, column: 262, scope: !7909)
!7916 = !DILocation(line: 2761, column: 211, scope: !7909)
!7917 = !DILocation(line: 2761, column: 200, scope: !7909)
!7918 = !DILocation(line: 2761, column: 208, scope: !7909)
!7919 = !DILocation(line: 2761, column: 302, scope: !7909)
!7920 = !DILocation(line: 2761, column: 305, scope: !7909)
!7921 = !DILocation(line: 2761, column: 293, scope: !7909)
!7922 = !DILocation(line: 2761, column: 339, scope: !7909)
!7923 = !DILocation(line: 2761, column: 347, scope: !7909)
!7924 = !DILocation(line: 2761, column: 318, scope: !7909)
!7925 = !DILocation(line: 2761, column: 283, scope: !7909)
!7926 = !DILocation(line: 2761, column: 290, scope: !7909)
!7927 = !DILocation(line: 2761, column: 368, scope: !7909)
!7928 = !DILocation(line: 2761, column: 376, scope: !7909)
!7929 = !DILocation(line: 2761, column: 388, scope: !7909)
!7930 = !DILocation(line: 2761, column: 388, scope: !7931)
!7931 = !DILexicalBlockFile(scope: !7909, file: !637, discriminator: 4)
!7932 = !DILocation(line: 2761, column: 401, scope: !7933)
!7933 = !DILexicalBlockFile(scope: !7904, file: !637, discriminator: 5)
!7934 = !DILocation(line: 2761, column: 403, scope: !7935)
!7935 = !DILexicalBlockFile(scope: !7936, file: !637, discriminator: 6)
!7936 = !DILexicalBlockFile(scope: !1312, file: !637, discriminator: 2)
!7937 = !DILocation(line: 2761, column: 403, scope: !7938)
!7938 = !DILexicalBlockFile(scope: !7939, file: !637, discriminator: 9)
!7939 = !DILexicalBlockFile(scope: !1312, file: !637, discriminator: 7)
!7940 = !DILocation(line: 2761, column: 417, scope: !7941)
!7941 = !DILexicalBlockFile(scope: !1318, file: !637, discriminator: 8)
!7942 = !DILocation(line: 2761, column: 438, scope: !1318)
!7943 = !DILocation(line: 2762, column: 7, scope: !1317)
!7944 = !DILocation(line: 2762, column: 22, scope: !1317)
!7945 = !DILocation(line: 2762, column: 37, scope: !1317)
!7946 = !DILocation(line: 2762, column: 35, scope: !1317)
!7947 = !DILocation(line: 2763, column: 5, scope: !1317)
!7948 = !DILocation(line: 2763, column: 25, scope: !1317)
!7949 = !DILocation(line: 2764, column: 34, scope: !1317)
!7950 = !DILocation(line: 2764, column: 40, scope: !1317)
!7951 = !DILocation(line: 2764, column: 15, scope: !1317)
!7952 = !DILocation(line: 2764, column: 13, scope: !1317)
!7953 = !DILocation(line: 2765, column: 10, scope: !7954)
!7954 = distinct !DILexicalBlock(scope: !1317, file: !637, line: 2765, column: 9)
!7955 = !DILocation(line: 2765, column: 9, scope: !1317)
!7956 = !DILocation(line: 2772, column: 22, scope: !7957)
!7957 = distinct !DILexicalBlock(scope: !7954, file: !637, line: 2765, column: 19)
!7958 = !DILocation(line: 2772, column: 25, scope: !7957)
!7959 = !DILocation(line: 2772, column: 34, scope: !7957)
!7960 = !DILocation(line: 2772, column: 40, scope: !7957)
!7961 = !DILocation(line: 2772, column: 45, scope: !7957)
!7962 = !DILocation(line: 2773, column: 22, scope: !7957)
!7963 = !DILocation(line: 2773, column: 37, scope: !7957)
!7964 = !DILocation(line: 2772, column: 13, scope: !7957)
!7965 = !DILocation(line: 2772, column: 11, scope: !7957)
!7966 = !DILocation(line: 2775, column: 5, scope: !7957)
!7967 = !DILocation(line: 2776, column: 26, scope: !1317)
!7968 = !DILocation(line: 2776, column: 5, scope: !1317)
!7969 = !DILocation(line: 2776, column: 34, scope: !1318)
!7970 = !DILocation(line: 2778, column: 9, scope: !7971)
!7971 = distinct !DILexicalBlock(scope: !1318, file: !637, line: 2778, column: 9)
!7972 = !DILocation(line: 2778, column: 17, scope: !7971)
!7973 = !DILocation(line: 2778, column: 9, scope: !1318)
!7974 = !DILocation(line: 2779, column: 25, scope: !7975)
!7975 = distinct !DILexicalBlock(scope: !7971, file: !637, line: 2778, column: 23)
!7976 = !DILocation(line: 2779, column: 9, scope: !7975)
!7977 = !DILocation(line: 2780, column: 9, scope: !7975)
!7978 = !DILocation(line: 2782, column: 10, scope: !7979)
!7979 = distinct !DILexicalBlock(scope: !1318, file: !637, line: 2782, column: 9)
!7980 = !DILocation(line: 2782, column: 22, scope: !7979)
!7981 = !DILocation(line: 2782, column: 30, scope: !7982)
!7982 = !DILexicalBlockFile(scope: !7979, file: !637, discriminator: 1)
!7983 = !DILocation(line: 2782, column: 29, scope: !7979)
!7984 = !DILocation(line: 2782, column: 51, scope: !7979)
!7985 = !DILocation(line: 2782, column: 58, scope: !7979)
!7986 = !DILocation(line: 2782, column: 65, scope: !7987)
!7987 = !DILexicalBlockFile(scope: !7979, file: !637, discriminator: 4)
!7988 = !DILocation(line: 2782, column: 64, scope: !7979)
!7989 = !DILocation(line: 2782, column: 86, scope: !7979)
!7990 = !DILocation(line: 2782, column: 9, scope: !1318)
!7991 = !DILocation(line: 2782, column: 95, scope: !7992)
!7992 = !DILexicalBlockFile(scope: !7993, file: !637, discriminator: 6)
!7993 = !DILexicalBlockFile(scope: !7979, file: !637, discriminator: 2)
!7994 = !DILocation(line: 2782, column: 102, scope: !7995)
!7995 = !DILexicalBlockFile(scope: !7996, file: !637, discriminator: 5)
!7996 = !DILexicalBlockFile(scope: !1318, file: !637, discriminator: 3)
!7997 = !DILocation(line: 2782, column: 152, scope: !1318)
!7998 = !DILocation(line: 2782, column: 165, scope: !1318)
!7999 = !DILocation(line: 2782, column: 159, scope: !1318)
!8000 = !DILocation(line: 2782, column: 142, scope: !1318)
!8001 = !DILocation(line: 2782, column: 185, scope: !1318)
!8002 = !DILocation(line: 2782, column: 199, scope: !1318)
!8003 = !DILocation(line: 2782, column: 193, scope: !1318)
!8004 = !DILocation(line: 2782, column: 175, scope: !1318)
!8005 = !DILocation(line: 2782, column: 208, scope: !1318)
!8006 = !DILocation(line: 2782, column: 173, scope: !1318)
!8007 = !DILocation(line: 2782, column: 139, scope: !1318)
!8008 = !DILocation(line: 2761, column: 403, scope: !1312)
!8009 = !DILocation(line: 2782, column: 223, scope: !8010)
!8010 = !DILexicalBlockFile(scope: !1298, file: !637, discriminator: 7)
!8011 = !DILocation(line: 2782, column: 223, scope: !8012)
!8012 = !DILexicalBlockFile(scope: !1298, file: !637, discriminator: 8)
!8013 = !DILocation(line: 2783, column: 9, scope: !8014)
!8014 = distinct !DILexicalBlock(scope: !1298, file: !637, line: 2783, column: 9)
!8015 = !DILocation(line: 2783, column: 11, scope: !8014)
!8016 = !DILocation(line: 2783, column: 9, scope: !1298)
!8017 = !DILocation(line: 2784, column: 9, scope: !8018)
!8018 = distinct !DILexicalBlock(scope: !8014, file: !637, line: 2783, column: 16)
!8019 = !DILocation(line: 2784, column: 12, scope: !8018)
!8020 = !DILocation(line: 2785, column: 9, scope: !8018)
!8021 = !DILocation(line: 2788, column: 32, scope: !8022)
!8022 = distinct !DILexicalBlock(scope: !1298, file: !637, line: 2788, column: 9)
!8023 = !DILocation(line: 2788, column: 35, scope: !8022)
!8024 = !DILocation(line: 2788, column: 59, scope: !8022)
!8025 = !DILocation(line: 2789, column: 32, scope: !8022)
!8026 = !DILocation(line: 2789, column: 41, scope: !8022)
!8027 = !DILocation(line: 2789, column: 44, scope: !8022)
!8028 = !DILocation(line: 2788, column: 19, scope: !8022)
!8029 = !DILocation(line: 2788, column: 12, scope: !8022)
!8030 = !DILocation(line: 2788, column: 17, scope: !8022)
!8031 = !DILocation(line: 2788, column: 9, scope: !1298)
!8032 = !DILocation(line: 2790, column: 9, scope: !8022)
!8033 = !DILocation(line: 2792, column: 12, scope: !1298)
!8034 = !DILocation(line: 2792, column: 5, scope: !1298)
!8035 = !DILocation(line: 2793, column: 1, scope: !1298)
!8036 = !DILocation(line: 553, column: 42, scope: !1397)
!8037 = !DILocation(line: 553, column: 49, scope: !1397)
!8038 = !DILocation(line: 560, column: 9, scope: !8039)
!8039 = distinct !DILexicalBlock(scope: !1397, file: !637, line: 560, column: 9)
!8040 = !DILocation(line: 560, column: 9, scope: !1397)
!8041 = !DILocation(line: 561, column: 9, scope: !8039)
!8042 = !DILocation(line: 561, column: 12, scope: !8039)
!8043 = !DILocation(line: 561, column: 22, scope: !8039)
!8044 = !DILocation(line: 563, column: 9, scope: !8039)
!8045 = !DILocation(line: 563, column: 12, scope: !8039)
!8046 = !DILocation(line: 563, column: 22, scope: !8039)
!8047 = !DILocation(line: 566, column: 7, scope: !1402)
!8048 = !DILocation(line: 566, column: 22, scope: !1402)
!8049 = !DILocation(line: 566, column: 37, scope: !1402)
!8050 = !DILocation(line: 566, column: 35, scope: !1402)
!8051 = !DILocation(line: 569, column: 14, scope: !1402)
!8052 = !DILocation(line: 569, column: 13, scope: !1402)
!8053 = !DILocation(line: 569, column: 11, scope: !1402)
!8054 = !DILocation(line: 570, column: 11, scope: !1402)
!8055 = !DILocation(line: 570, column: 14, scope: !1402)
!8056 = !DILocation(line: 570, column: 5, scope: !1402)
!8057 = !DILocation(line: 584, column: 26, scope: !1402)
!8058 = !DILocation(line: 584, column: 5, scope: !1402)
!8059 = !DILocation(line: 584, column: 34, scope: !1397)
!8060 = !DILocation(line: 587, column: 5, scope: !1397)
!8061 = !DILocation(line: 2918, column: 39, scope: !1444)
!8062 = !DILocation(line: 2918, column: 56, scope: !1444)
!8063 = !DILocation(line: 2918, column: 65, scope: !1444)
!8064 = !DILocation(line: 2919, column: 23, scope: !1444)
!8065 = !DILocation(line: 2919, column: 41, scope: !1444)
!8066 = !DILocation(line: 2920, column: 31, scope: !1444)
!8067 = !DILocation(line: 2920, column: 64, scope: !1444)
!8068 = !DILocation(line: 2922, column: 5, scope: !1444)
!8069 = !DILocation(line: 2922, column: 13, scope: !1444)
!8070 = !DILocation(line: 2923, column: 5, scope: !1444)
!8071 = !DILocation(line: 2923, column: 9, scope: !1444)
!8072 = !DILocation(line: 2924, column: 5, scope: !1444)
!8073 = !DILocation(line: 2924, column: 17, scope: !1444)
!8074 = !DILocation(line: 2925, column: 5, scope: !1444)
!8075 = !DILocation(line: 2925, column: 15, scope: !1444)
!8076 = !DILocation(line: 2926, column: 5, scope: !1444)
!8077 = !DILocation(line: 2926, column: 19, scope: !1444)
!8078 = !DILocation(line: 2927, column: 5, scope: !1444)
!8079 = !DILocation(line: 2927, column: 15, scope: !1444)
!8080 = !DILocation(line: 2927, column: 40, scope: !1444)
!8081 = !DILocation(line: 2928, column: 5, scope: !1444)
!8082 = !DILocation(line: 2928, column: 11, scope: !1444)
!8083 = !DILocation(line: 2929, column: 5, scope: !1444)
!8084 = !DILocation(line: 2929, column: 21, scope: !1444)
!8085 = !DILocation(line: 2930, column: 5, scope: !1444)
!8086 = !DILocation(line: 2930, column: 12, scope: !1444)
!8087 = !DILocation(line: 2931, column: 5, scope: !1444)
!8088 = !DILocation(line: 2931, column: 9, scope: !1444)
!8089 = !DILocation(line: 2939, column: 25, scope: !8090)
!8090 = distinct !DILexicalBlock(scope: !1444, file: !637, line: 2939, column: 9)
!8091 = !DILocation(line: 2939, column: 10, scope: !8090)
!8092 = !DILocation(line: 2939, column: 9, scope: !1444)
!8093 = !DILocation(line: 2940, column: 9, scope: !8090)
!8094 = !DILocation(line: 2941, column: 5, scope: !1444)
!8095 = !DILocation(line: 2941, column: 25, scope: !1444)
!8096 = !DILocation(line: 2942, column: 20, scope: !1444)
!8097 = !DILocation(line: 2942, column: 26, scope: !1444)
!8098 = !DILocation(line: 2942, column: 36, scope: !1444)
!8099 = !DILocation(line: 2944, column: 9, scope: !8100)
!8100 = distinct !DILexicalBlock(scope: !1444, file: !637, line: 2944, column: 9)
!8101 = !DILocation(line: 2944, column: 20, scope: !8100)
!8102 = !DILocation(line: 2944, column: 24, scope: !8100)
!8103 = !DILocation(line: 2944, column: 27, scope: !8104)
!8104 = !DILexicalBlockFile(scope: !8100, file: !637, discriminator: 1)
!8105 = !DILocation(line: 2944, column: 38, scope: !8100)
!8106 = !DILocation(line: 2944, column: 9, scope: !1444)
!8107 = !DILocation(line: 2945, column: 25, scope: !8108)
!8108 = distinct !DILexicalBlock(scope: !8100, file: !637, line: 2944, column: 52)
!8109 = !DILocation(line: 2945, column: 9, scope: !8108)
!8110 = !DILocation(line: 2947, column: 9, scope: !8108)
!8111 = !DILocation(line: 2949, column: 9, scope: !8112)
!8112 = distinct !DILexicalBlock(scope: !1444, file: !637, line: 2949, column: 9)
!8113 = !DILocation(line: 2949, column: 20, scope: !8112)
!8114 = !DILocation(line: 2949, column: 24, scope: !8112)
!8115 = !DILocation(line: 2949, column: 54, scope: !8116)
!8116 = !DILexicalBlockFile(scope: !8112, file: !637, discriminator: 1)
!8117 = !DILocation(line: 2949, column: 41, scope: !8112)
!8118 = !DILocation(line: 2949, column: 39, scope: !8112)
!8119 = !DILocation(line: 2949, column: 67, scope: !8112)
!8120 = !DILocation(line: 2949, column: 9, scope: !1444)
!8121 = !DILocation(line: 2950, column: 16, scope: !8112)
!8122 = !DILocation(line: 2950, column: 9, scope: !8112)
!8123 = !DILocation(line: 2958, column: 7, scope: !1470)
!8124 = !DILocation(line: 2958, column: 23, scope: !1470)
!8125 = !DILocation(line: 2958, column: 28, scope: !1470)
!8126 = !DILocation(line: 2958, column: 47, scope: !1470)
!8127 = !DILocation(line: 2958, column: 54, scope: !1470)
!8128 = !DILocation(line: 2958, column: 65, scope: !1470)
!8129 = !DILocation(line: 2958, column: 68, scope: !1470)
!8130 = !DILocation(line: 2958, column: 82, scope: !1470)
!8131 = !DILocation(line: 2958, column: 86, scope: !1470)
!8132 = !DILocation(line: 2958, column: 100, scope: !1470)
!8133 = !DILocation(line: 2958, column: 103, scope: !1470)
!8134 = !DILocation(line: 2958, column: 116, scope: !1470)
!8135 = !DILocation(line: 2958, column: 127, scope: !8136)
!8136 = distinct !DILexicalBlock(scope: !1470, file: !637, line: 2958, column: 127)
!8137 = !DILocation(line: 2958, column: 127, scope: !1470)
!8138 = !DILocation(line: 2958, column: 142, scope: !8139)
!8139 = !DILexicalBlockFile(scope: !8140, file: !637, discriminator: 1)
!8140 = distinct !DILexicalBlock(scope: !8136, file: !637, line: 2958, column: 140)
!8141 = !DILocation(line: 2958, column: 181, scope: !8140)
!8142 = !DILocation(line: 2958, column: 186, scope: !8140)
!8143 = !DILocation(line: 2958, column: 227, scope: !8144)
!8144 = !DILexicalBlockFile(scope: !8145, file: !637, discriminator: 3)
!8145 = distinct !DILexicalBlock(scope: !8140, file: !637, line: 2958, column: 189)
!8146 = !DILocation(line: 2958, column: 230, scope: !8145)
!8147 = !DILocation(line: 2958, column: 220, scope: !8145)
!8148 = !DILocation(line: 2958, column: 245, scope: !8145)
!8149 = !DILocation(line: 2958, column: 248, scope: !8145)
!8150 = !DILocation(line: 2958, column: 243, scope: !8145)
!8151 = !DILocation(line: 2958, column: 262, scope: !8145)
!8152 = !DILocation(line: 2958, column: 211, scope: !8145)
!8153 = !DILocation(line: 2958, column: 200, scope: !8145)
!8154 = !DILocation(line: 2958, column: 208, scope: !8145)
!8155 = !DILocation(line: 2958, column: 302, scope: !8145)
!8156 = !DILocation(line: 2958, column: 305, scope: !8145)
!8157 = !DILocation(line: 2958, column: 293, scope: !8145)
!8158 = !DILocation(line: 2958, column: 339, scope: !8145)
!8159 = !DILocation(line: 2958, column: 347, scope: !8145)
!8160 = !DILocation(line: 2958, column: 318, scope: !8145)
!8161 = !DILocation(line: 2958, column: 283, scope: !8145)
!8162 = !DILocation(line: 2958, column: 290, scope: !8145)
!8163 = !DILocation(line: 2958, column: 368, scope: !8145)
!8164 = !DILocation(line: 2958, column: 376, scope: !8145)
!8165 = !DILocation(line: 2958, column: 388, scope: !8145)
!8166 = !DILocation(line: 2958, column: 388, scope: !8167)
!8167 = !DILexicalBlockFile(scope: !8145, file: !637, discriminator: 4)
!8168 = !DILocation(line: 2958, column: 401, scope: !8169)
!8169 = !DILexicalBlockFile(scope: !8140, file: !637, discriminator: 5)
!8170 = !DILocation(line: 2958, column: 403, scope: !8171)
!8171 = !DILexicalBlockFile(scope: !8172, file: !637, discriminator: 6)
!8172 = !DILexicalBlockFile(scope: !1470, file: !637, discriminator: 2)
!8173 = !DILocation(line: 2958, column: 403, scope: !8174)
!8174 = !DILexicalBlockFile(scope: !8175, file: !637, discriminator: 9)
!8175 = !DILexicalBlockFile(scope: !1470, file: !637, discriminator: 7)
!8176 = !DILocation(line: 2958, column: 417, scope: !8177)
!8177 = !DILexicalBlockFile(scope: !1476, file: !637, discriminator: 8)
!8178 = !DILocation(line: 2958, column: 438, scope: !1476)
!8179 = !DILocation(line: 2959, column: 7, scope: !1475)
!8180 = !DILocation(line: 2959, column: 22, scope: !1475)
!8181 = !DILocation(line: 2959, column: 37, scope: !1475)
!8182 = !DILocation(line: 2959, column: 35, scope: !1475)
!8183 = !DILocation(line: 2960, column: 35, scope: !1475)
!8184 = !DILocation(line: 2960, column: 20, scope: !1475)
!8185 = !DILocation(line: 2960, column: 9, scope: !1475)
!8186 = !DILocation(line: 2960, column: 18, scope: !1475)
!8187 = !DILocation(line: 2961, column: 23, scope: !1475)
!8188 = !DILocation(line: 2961, column: 9, scope: !1475)
!8189 = !DILocation(line: 2961, column: 21, scope: !1475)
!8190 = !DILocation(line: 2962, column: 19, scope: !1475)
!8191 = !DILocation(line: 2962, column: 9, scope: !1475)
!8192 = !DILocation(line: 2962, column: 17, scope: !1475)
!8193 = !DILocation(line: 2963, column: 22, scope: !1475)
!8194 = !DILocation(line: 2963, column: 9, scope: !1475)
!8195 = !DILocation(line: 2963, column: 20, scope: !1475)
!8196 = !DILocation(line: 2964, column: 23, scope: !1475)
!8197 = !DILocation(line: 2964, column: 9, scope: !1475)
!8198 = !DILocation(line: 2964, column: 21, scope: !1475)
!8199 = !DILocation(line: 2965, column: 26, scope: !1475)
!8200 = !DILocation(line: 2965, column: 9, scope: !1475)
!8201 = !DILocation(line: 2965, column: 24, scope: !1475)
!8202 = !DILocation(line: 2966, column: 34, scope: !1475)
!8203 = !DILocation(line: 2966, column: 40, scope: !1475)
!8204 = !DILocation(line: 2966, column: 15, scope: !1475)
!8205 = !DILocation(line: 2966, column: 13, scope: !1475)
!8206 = !DILocation(line: 2967, column: 10, scope: !8207)
!8207 = distinct !DILexicalBlock(scope: !1475, file: !637, line: 2967, column: 9)
!8208 = !DILocation(line: 2967, column: 9, scope: !1475)
!8209 = !DILocation(line: 2968, column: 34, scope: !8207)
!8210 = !DILocation(line: 2968, column: 37, scope: !8207)
!8211 = !DILocation(line: 2968, column: 52, scope: !8207)
!8212 = !DILocation(line: 2968, column: 26, scope: !8207)
!8213 = !DILocation(line: 2968, column: 24, scope: !8207)
!8214 = !DILocation(line: 2968, column: 9, scope: !8207)
!8215 = !DILocation(line: 2969, column: 26, scope: !1475)
!8216 = !DILocation(line: 2969, column: 5, scope: !1475)
!8217 = !DILocation(line: 2969, column: 34, scope: !1476)
!8218 = !DILocation(line: 2970, column: 9, scope: !8219)
!8219 = distinct !DILexicalBlock(scope: !1476, file: !637, line: 2970, column: 9)
!8220 = !DILocation(line: 2970, column: 17, scope: !8219)
!8221 = !DILocation(line: 2970, column: 9, scope: !1476)
!8222 = !DILocation(line: 2971, column: 25, scope: !8223)
!8223 = distinct !DILexicalBlock(scope: !8219, file: !637, line: 2970, column: 23)
!8224 = !DILocation(line: 2971, column: 9, scope: !8223)
!8225 = !DILocation(line: 2972, column: 9, scope: !8223)
!8226 = !DILocation(line: 2974, column: 10, scope: !8227)
!8227 = distinct !DILexicalBlock(scope: !1476, file: !637, line: 2974, column: 9)
!8228 = !DILocation(line: 2974, column: 22, scope: !8227)
!8229 = !DILocation(line: 2974, column: 30, scope: !8230)
!8230 = !DILexicalBlockFile(scope: !8227, file: !637, discriminator: 1)
!8231 = !DILocation(line: 2974, column: 29, scope: !8227)
!8232 = !DILocation(line: 2974, column: 51, scope: !8227)
!8233 = !DILocation(line: 2974, column: 58, scope: !8227)
!8234 = !DILocation(line: 2974, column: 65, scope: !8235)
!8235 = !DILexicalBlockFile(scope: !8227, file: !637, discriminator: 4)
!8236 = !DILocation(line: 2974, column: 64, scope: !8227)
!8237 = !DILocation(line: 2974, column: 86, scope: !8227)
!8238 = !DILocation(line: 2974, column: 9, scope: !1476)
!8239 = !DILocation(line: 2974, column: 95, scope: !8240)
!8240 = !DILexicalBlockFile(scope: !8241, file: !637, discriminator: 6)
!8241 = !DILexicalBlockFile(scope: !8227, file: !637, discriminator: 2)
!8242 = !DILocation(line: 2974, column: 102, scope: !8243)
!8243 = !DILexicalBlockFile(scope: !8244, file: !637, discriminator: 5)
!8244 = !DILexicalBlockFile(scope: !1476, file: !637, discriminator: 3)
!8245 = !DILocation(line: 2974, column: 152, scope: !1476)
!8246 = !DILocation(line: 2974, column: 165, scope: !1476)
!8247 = !DILocation(line: 2974, column: 159, scope: !1476)
!8248 = !DILocation(line: 2974, column: 142, scope: !1476)
!8249 = !DILocation(line: 2974, column: 185, scope: !1476)
!8250 = !DILocation(line: 2974, column: 199, scope: !1476)
!8251 = !DILocation(line: 2974, column: 193, scope: !1476)
!8252 = !DILocation(line: 2974, column: 175, scope: !1476)
!8253 = !DILocation(line: 2974, column: 208, scope: !1476)
!8254 = !DILocation(line: 2974, column: 173, scope: !1476)
!8255 = !DILocation(line: 2974, column: 139, scope: !1476)
!8256 = !DILocation(line: 2958, column: 403, scope: !1470)
!8257 = !DILocation(line: 2974, column: 223, scope: !8258)
!8258 = !DILexicalBlockFile(scope: !1444, file: !637, discriminator: 7)
!8259 = !DILocation(line: 2974, column: 223, scope: !8260)
!8260 = !DILexicalBlockFile(scope: !1444, file: !637, discriminator: 8)
!8261 = !DILocation(line: 2976, column: 9, scope: !8262)
!8262 = distinct !DILexicalBlock(scope: !1444, file: !637, line: 2976, column: 9)
!8263 = !DILocation(line: 2976, column: 24, scope: !8262)
!8264 = !DILocation(line: 2976, column: 9, scope: !1444)
!8265 = !DILocation(line: 2977, column: 9, scope: !8266)
!8266 = distinct !DILexicalBlock(scope: !8262, file: !637, line: 2976, column: 29)
!8267 = !DILocation(line: 2977, column: 12, scope: !8266)
!8268 = !DILocation(line: 2978, column: 9, scope: !8266)
!8269 = !DILocation(line: 2982, column: 22, scope: !8270)
!8270 = distinct !DILexicalBlock(scope: !1444, file: !637, line: 2982, column: 9)
!8271 = !DILocation(line: 2982, column: 20, scope: !8270)
!8272 = !DILocation(line: 2982, column: 37, scope: !8270)
!8273 = !DILocation(line: 2982, column: 9, scope: !1444)
!8274 = !DILocation(line: 2983, column: 9, scope: !8270)
!8275 = !DILocation(line: 2986, column: 24, scope: !1480)
!8276 = !DILocation(line: 2986, column: 39, scope: !1480)
!8277 = !DILocation(line: 2986, column: 19, scope: !1480)
!8278 = !DILocation(line: 2986, column: 64, scope: !8279)
!8279 = !DILexicalBlockFile(scope: !1480, file: !637, discriminator: 1)
!8280 = !DILocation(line: 2986, column: 79, scope: !1480)
!8281 = !DILocation(line: 2986, column: 47, scope: !1480)
!8282 = !DILocation(line: 2986, column: 135, scope: !8283)
!8283 = !DILexicalBlockFile(scope: !1480, file: !637, discriminator: 3)
!8284 = !DILocation(line: 2986, column: 108, scope: !1480)
!8285 = !DILocation(line: 2986, column: 47, scope: !8286)
!8286 = !DILexicalBlockFile(scope: !1480, file: !637, discriminator: 4)
!8287 = !DILocation(line: 2986, column: 19, scope: !8288)
!8288 = !DILexicalBlockFile(scope: !8289, file: !637, discriminator: 6)
!8289 = !DILexicalBlockFile(scope: !1480, file: !637, discriminator: 5)
!8290 = !DILocation(line: 2986, column: 19, scope: !8291)
!8291 = !DILexicalBlockFile(scope: !1480, file: !637, discriminator: 2)
!8292 = !DILocation(line: 2986, column: 16, scope: !8293)
!8293 = !DILexicalBlockFile(scope: !8294, file: !637, discriminator: 8)
!8294 = !DILexicalBlockFile(scope: !1480, file: !637, discriminator: 7)
!8295 = !DILocation(line: 2986, column: 10, scope: !1480)
!8296 = !DILocation(line: 2987, column: 10, scope: !1479)
!8297 = !DILocation(line: 2987, column: 16, scope: !1479)
!8298 = !DILocation(line: 2986, column: 5, scope: !1480)
!8299 = !DILocation(line: 2988, column: 9, scope: !1478)
!8300 = !DILocation(line: 2988, column: 19, scope: !1478)
!8301 = !DILocation(line: 2988, column: 27, scope: !1478)
!8302 = !DILocation(line: 2989, column: 9, scope: !1478)
!8303 = !DILocation(line: 2989, column: 13, scope: !1478)
!8304 = !DILocation(line: 2991, column: 47, scope: !1478)
!8305 = !DILocation(line: 2991, column: 23, scope: !1478)
!8306 = !DILocation(line: 2991, column: 21, scope: !1478)
!8307 = !DILocation(line: 2992, column: 13, scope: !8308)
!8308 = distinct !DILexicalBlock(scope: !1478, file: !637, line: 2992, column: 13)
!8309 = !DILocation(line: 2992, column: 25, scope: !8308)
!8310 = !DILocation(line: 2992, column: 13, scope: !1478)
!8311 = !DILocation(line: 2993, column: 30, scope: !8312)
!8312 = distinct !DILexicalBlock(scope: !8313, file: !637, line: 2993, column: 17)
!8313 = distinct !DILexicalBlock(scope: !8308, file: !637, line: 2992, column: 31)
!8314 = !DILocation(line: 2993, column: 17, scope: !8312)
!8315 = !DILocation(line: 2995, column: 51, scope: !8312)
!8316 = !DILocation(line: 2993, column: 17, scope: !8313)
!8317 = !DILocation(line: 2996, column: 17, scope: !8312)
!8318 = !DILocation(line: 2997, column: 9, scope: !8313)
!8319 = !DILocation(line: 2998, column: 13, scope: !8320)
!8320 = distinct !DILexicalBlock(scope: !1478, file: !637, line: 2998, column: 13)
!8321 = !DILocation(line: 2998, column: 25, scope: !8320)
!8322 = !DILocation(line: 2998, column: 13, scope: !1478)
!8323 = !DILocation(line: 2999, column: 13, scope: !8320)
!8324 = !DILocation(line: 3000, column: 13, scope: !8325)
!8325 = distinct !DILexicalBlock(scope: !1478, file: !637, line: 3000, column: 13)
!8326 = !DILocation(line: 3000, column: 25, scope: !8325)
!8327 = !DILocation(line: 3000, column: 13, scope: !1478)
!8328 = !DILocation(line: 3001, column: 29, scope: !8329)
!8329 = distinct !DILexicalBlock(scope: !8325, file: !637, line: 3000, column: 60)
!8330 = !DILocation(line: 3001, column: 13, scope: !8329)
!8331 = !DILocation(line: 3002, column: 13, scope: !8329)
!8332 = !DILocation(line: 3005, column: 53, scope: !1478)
!8333 = !DILocation(line: 3005, column: 61, scope: !1478)
!8334 = !DILocation(line: 3005, column: 51, scope: !1478)
!8335 = !DILocation(line: 3006, column: 43, scope: !1478)
!8336 = !DILocation(line: 3005, column: 17, scope: !1478)
!8337 = !DILocation(line: 3005, column: 15, scope: !1478)
!8338 = !DILocation(line: 3007, column: 43, scope: !1478)
!8339 = !DILocation(line: 3007, column: 50, scope: !1478)
!8340 = !DILocation(line: 3008, column: 36, scope: !1478)
!8341 = !DILocation(line: 3008, column: 43, scope: !1478)
!8342 = !DILocation(line: 3008, column: 54, scope: !1478)
!8343 = !DILocation(line: 3007, column: 17, scope: !1478)
!8344 = !DILocation(line: 3007, column: 15, scope: !1478)
!8345 = !DILocation(line: 3009, column: 13, scope: !8346)
!8346 = distinct !DILexicalBlock(scope: !1478, file: !637, line: 3009, column: 13)
!8347 = !DILocation(line: 3009, column: 19, scope: !8346)
!8348 = !DILocation(line: 3009, column: 13, scope: !1478)
!8349 = !DILocation(line: 3010, column: 13, scope: !8346)
!8350 = !DILocation(line: 3011, column: 29, scope: !1478)
!8351 = !DILocation(line: 3011, column: 40, scope: !1478)
!8352 = !DILocation(line: 3011, column: 15, scope: !1478)
!8353 = !DILocation(line: 3011, column: 13, scope: !1478)
!8354 = !DILocation(line: 3012, column: 9, scope: !1478)
!8355 = !DILocation(line: 3012, column: 14, scope: !8356)
!8356 = !DILexicalBlockFile(scope: !1484, file: !637, discriminator: 1)
!8357 = !DILocation(line: 3012, column: 24, scope: !1484)
!8358 = !DILocation(line: 3012, column: 54, scope: !1484)
!8359 = !DILocation(line: 3012, column: 70, scope: !8360)
!8360 = distinct !DILexicalBlock(scope: !1484, file: !637, line: 3012, column: 67)
!8361 = !DILocation(line: 3012, column: 87, scope: !8360)
!8362 = !DILocation(line: 3012, column: 67, scope: !8360)
!8363 = !DILocation(line: 3012, column: 97, scope: !8360)
!8364 = !DILocation(line: 3012, column: 67, scope: !1484)
!8365 = !DILocation(line: 3012, column: 67, scope: !8366)
!8366 = !DILexicalBlockFile(scope: !1484, file: !637, discriminator: 2)
!8367 = !DILocation(line: 3012, column: 128, scope: !8368)
!8368 = !DILexicalBlockFile(scope: !8360, file: !637, discriminator: 3)
!8369 = !DILocation(line: 3012, column: 146, scope: !8360)
!8370 = !DILocation(line: 3012, column: 156, scope: !8360)
!8371 = !DILocation(line: 3012, column: 181, scope: !8360)
!8372 = !DILocation(line: 3012, column: 112, scope: !8360)
!8373 = !DILocation(line: 3012, column: 200, scope: !8374)
!8374 = !DILexicalBlockFile(scope: !1478, file: !637, discriminator: 4)
!8375 = !DILocation(line: 3012, column: 200, scope: !1484)
!8376 = !DILocation(line: 3012, column: 200, scope: !8377)
!8377 = !DILexicalBlockFile(scope: !1484, file: !637, discriminator: 5)
!8378 = !DILocation(line: 3013, column: 13, scope: !8379)
!8379 = distinct !DILexicalBlock(scope: !1478, file: !637, line: 3013, column: 13)
!8380 = !DILocation(line: 3013, column: 17, scope: !8379)
!8381 = !DILocation(line: 3013, column: 13, scope: !1478)
!8382 = !DILocation(line: 3014, column: 13, scope: !8379)
!8383 = !DILocation(line: 3016, column: 13, scope: !8384)
!8384 = distinct !DILexicalBlock(scope: !1478, file: !637, line: 3016, column: 13)
!8385 = !DILocation(line: 3016, column: 25, scope: !8384)
!8386 = !DILocation(line: 3016, column: 13, scope: !1478)
!8387 = !DILocation(line: 3017, column: 13, scope: !8384)
!8388 = !DILocation(line: 3018, column: 5, scope: !1479)
!8389 = !DILocation(line: 3018, column: 5, scope: !8390)
!8390 = !DILexicalBlockFile(scope: !1479, file: !637, discriminator: 1)
!8391 = !DILocation(line: 3018, column: 5, scope: !1478)
!8392 = !DILocation(line: 2987, column: 60, scope: !1479)
!8393 = !DILocation(line: 2987, column: 39, scope: !1479)
!8394 = !DILocation(line: 2987, column: 37, scope: !1479)
!8395 = !DILocation(line: 2986, column: 5, scope: !1479)
!8396 = !DILocation(line: 3021, column: 30, scope: !1444)
!8397 = !DILocation(line: 3021, column: 39, scope: !1444)
!8398 = !DILocation(line: 3021, column: 55, scope: !1444)
!8399 = !DILocation(line: 3021, column: 28, scope: !1444)
!8400 = !DILocation(line: 3022, column: 28, scope: !1444)
!8401 = !DILocation(line: 3023, column: 37, scope: !1444)
!8402 = !{!5274, !2950, i64 48}
!8403 = !DILocation(line: 3024, column: 41, scope: !1444)
!8404 = !DILocation(line: 3024, column: 44, scope: !1444)
!8405 = !DILocation(line: 3024, column: 68, scope: !1444)
!8406 = !DILocation(line: 3025, column: 47, scope: !1444)
!8407 = !DILocation(line: 3025, column: 61, scope: !1444)
!8408 = !DILocation(line: 3025, column: 59, scope: !1444)
!8409 = !DILocation(line: 3025, column: 42, scope: !1444)
!8410 = !DILocation(line: 3026, column: 42, scope: !1444)
!8411 = !DILocation(line: 3026, column: 59, scope: !1444)
!8412 = !DILocation(line: 3025, column: 41, scope: !8413)
!8413 = !DILexicalBlockFile(scope: !8414, file: !637, discriminator: 2)
!8414 = !DILexicalBlockFile(scope: !1444, file: !637, discriminator: 1)
!8415 = !DILocation(line: 3027, column: 41, scope: !1444)
!8416 = !DILocation(line: 3027, column: 44, scope: !1444)
!8417 = !DILocation(line: 3024, column: 28, scope: !1444)
!8418 = !DILocation(line: 3020, column: 14, scope: !1444)
!8419 = !DILocation(line: 3020, column: 12, scope: !1444)
!8420 = !DILocation(line: 3028, column: 9, scope: !8421)
!8421 = distinct !DILexicalBlock(scope: !1444, file: !637, line: 3028, column: 9)
!8422 = !DILocation(line: 3028, column: 16, scope: !8421)
!8423 = !DILocation(line: 3028, column: 9, scope: !1444)
!8424 = !DILocation(line: 3029, column: 9, scope: !8421)
!8425 = !DILocation(line: 3028, column: 28, scope: !8426)
!8426 = !DILexicalBlockFile(scope: !8421, file: !637, discriminator: 1)
!8427 = !DILocation(line: 3032, column: 5, scope: !1444)
!8428 = !DILocation(line: 3032, column: 10, scope: !8429)
!8429 = !DILexicalBlockFile(scope: !1486, file: !637, discriminator: 1)
!8430 = !DILocation(line: 3032, column: 20, scope: !1486)
!8431 = !DILocation(line: 3032, column: 51, scope: !1486)
!8432 = !DILocation(line: 3032, column: 67, scope: !1489)
!8433 = !DILocation(line: 3032, column: 83, scope: !1489)
!8434 = !DILocation(line: 3032, column: 67, scope: !1486)
!8435 = !DILocation(line: 3032, column: 98, scope: !8436)
!8436 = !DILexicalBlockFile(scope: !1489, file: !637, discriminator: 2)
!8437 = !DILocation(line: 3032, column: 103, scope: !8438)
!8438 = !DILexicalBlockFile(scope: !1488, file: !637, discriminator: 4)
!8439 = !DILocation(line: 3032, column: 113, scope: !1488)
!8440 = !DILocation(line: 3032, column: 143, scope: !1488)
!8441 = !DILocation(line: 3032, column: 169, scope: !8442)
!8442 = distinct !DILexicalBlock(scope: !1488, file: !637, line: 3032, column: 166)
!8443 = !DILocation(line: 3032, column: 186, scope: !8442)
!8444 = !DILocation(line: 3032, column: 166, scope: !8442)
!8445 = !DILocation(line: 3032, column: 196, scope: !8442)
!8446 = !DILocation(line: 3032, column: 166, scope: !1488)
!8447 = !DILocation(line: 3032, column: 166, scope: !8448)
!8448 = !DILexicalBlockFile(scope: !1488, file: !637, discriminator: 5)
!8449 = !DILocation(line: 3032, column: 227, scope: !8450)
!8450 = !DILexicalBlockFile(scope: !8442, file: !637, discriminator: 6)
!8451 = !DILocation(line: 3032, column: 245, scope: !8442)
!8452 = !DILocation(line: 3032, column: 255, scope: !8442)
!8453 = !DILocation(line: 3032, column: 280, scope: !8442)
!8454 = !DILocation(line: 3032, column: 211, scope: !8442)
!8455 = !DILocation(line: 3032, column: 299, scope: !8456)
!8456 = !DILexicalBlockFile(scope: !1489, file: !637, discriminator: 7)
!8457 = !DILocation(line: 3032, column: 299, scope: !1488)
!8458 = !DILocation(line: 3032, column: 299, scope: !8459)
!8459 = !DILexicalBlockFile(scope: !1488, file: !637, discriminator: 8)
!8460 = !DILocation(line: 3032, column: 299, scope: !8461)
!8461 = !DILexicalBlockFile(scope: !1488, file: !637, discriminator: 9)
!8462 = !DILocation(line: 3032, column: 312, scope: !8463)
!8463 = !DILexicalBlockFile(scope: !8464, file: !637, discriminator: 10)
!8464 = !DILexicalBlockFile(scope: !1444, file: !637, discriminator: 3)
!8465 = !DILocation(line: 3032, column: 312, scope: !1486)
!8466 = !DILocation(line: 3032, column: 312, scope: !8467)
!8467 = !DILexicalBlockFile(scope: !1486, file: !637, discriminator: 11)
!8468 = !DILocation(line: 3033, column: 16, scope: !1444)
!8469 = !DILocation(line: 3033, column: 5, scope: !1444)
!8470 = !DILocation(line: 3034, column: 12, scope: !1444)
!8471 = !DILocation(line: 3034, column: 5, scope: !1444)
!8472 = !DILocation(line: 3039, column: 24, scope: !1495)
!8473 = !DILocation(line: 3039, column: 39, scope: !1495)
!8474 = !DILocation(line: 3039, column: 19, scope: !1495)
!8475 = !DILocation(line: 3039, column: 64, scope: !8476)
!8476 = !DILexicalBlockFile(scope: !1495, file: !637, discriminator: 1)
!8477 = !DILocation(line: 3039, column: 79, scope: !1495)
!8478 = !DILocation(line: 3039, column: 47, scope: !1495)
!8479 = !DILocation(line: 3039, column: 135, scope: !8480)
!8480 = !DILexicalBlockFile(scope: !1495, file: !637, discriminator: 3)
!8481 = !DILocation(line: 3039, column: 108, scope: !1495)
!8482 = !DILocation(line: 3039, column: 47, scope: !8483)
!8483 = !DILexicalBlockFile(scope: !1495, file: !637, discriminator: 4)
!8484 = !DILocation(line: 3039, column: 19, scope: !8485)
!8485 = !DILexicalBlockFile(scope: !8486, file: !637, discriminator: 6)
!8486 = !DILexicalBlockFile(scope: !1495, file: !637, discriminator: 5)
!8487 = !DILocation(line: 3039, column: 19, scope: !8488)
!8488 = !DILexicalBlockFile(scope: !1495, file: !637, discriminator: 2)
!8489 = !DILocation(line: 3039, column: 16, scope: !8490)
!8490 = !DILexicalBlockFile(scope: !8491, file: !637, discriminator: 8)
!8491 = !DILexicalBlockFile(scope: !1495, file: !637, discriminator: 7)
!8492 = !DILocation(line: 3039, column: 10, scope: !1495)
!8493 = !DILocation(line: 3040, column: 10, scope: !1494)
!8494 = !DILocation(line: 3040, column: 16, scope: !1494)
!8495 = !DILocation(line: 3039, column: 5, scope: !1495)
!8496 = !DILocation(line: 3041, column: 47, scope: !1493)
!8497 = !DILocation(line: 3041, column: 23, scope: !1493)
!8498 = !DILocation(line: 3041, column: 21, scope: !1493)
!8499 = !DILocation(line: 3042, column: 13, scope: !8500)
!8500 = distinct !DILexicalBlock(scope: !1493, file: !637, line: 3042, column: 13)
!8501 = !DILocation(line: 3042, column: 25, scope: !8500)
!8502 = !DILocation(line: 3042, column: 13, scope: !1493)
!8503 = !DILocation(line: 3043, column: 13, scope: !8500)
!8504 = !DILocation(line: 3044, column: 13, scope: !1492)
!8505 = !DILocation(line: 3044, column: 20, scope: !1492)
!8506 = !DILocation(line: 3044, column: 31, scope: !1492)
!8507 = !DILocation(line: 3044, column: 36, scope: !1492)
!8508 = !DILocation(line: 3045, column: 13, scope: !1492)
!8509 = !DILocation(line: 3045, column: 20, scope: !1492)
!8510 = !DILocation(line: 3045, column: 30, scope: !1492)
!8511 = !DILocation(line: 3044, column: 13, scope: !1493)
!8512 = !DILocation(line: 3046, column: 13, scope: !1491)
!8513 = !DILocation(line: 3046, column: 20, scope: !1491)
!8514 = !DILocation(line: 3047, column: 13, scope: !1491)
!8515 = !DILocation(line: 3047, column: 18, scope: !1491)
!8516 = !DILocation(line: 3049, column: 22, scope: !1491)
!8517 = !DILocation(line: 3049, column: 34, scope: !1491)
!8518 = !DILocation(line: 3049, column: 20, scope: !1491)
!8519 = !DILocation(line: 3050, column: 28, scope: !1491)
!8520 = !DILocation(line: 3050, column: 36, scope: !1491)
!8521 = !DILocation(line: 3050, column: 26, scope: !1491)
!8522 = !DILocation(line: 3050, column: 19, scope: !1491)
!8523 = !DILocation(line: 3050, column: 17, scope: !1491)
!8524 = !DILocation(line: 3051, column: 13, scope: !1491)
!8525 = !DILocation(line: 3051, column: 26, scope: !8526)
!8526 = !DILexicalBlockFile(scope: !8527, file: !637, discriminator: 2)
!8527 = !DILexicalBlockFile(scope: !1491, file: !637, discriminator: 1)
!8528 = !DILocation(line: 3051, column: 29, scope: !1491)
!8529 = !DILocation(line: 3052, column: 27, scope: !1491)
!8530 = !DILocation(line: 3052, column: 23, scope: !1491)
!8531 = !DILocation(line: 3052, column: 17, scope: !1491)
!8532 = !DILocation(line: 3053, column: 9, scope: !1492)
!8533 = !DILocation(line: 3053, column: 9, scope: !1491)
!8534 = !DILocation(line: 3054, column: 13, scope: !8535)
!8535 = distinct !DILexicalBlock(scope: !1493, file: !637, line: 3054, column: 13)
!8536 = !DILocation(line: 3054, column: 25, scope: !8535)
!8537 = !DILocation(line: 3054, column: 13, scope: !1493)
!8538 = !DILocation(line: 3055, column: 13, scope: !8535)
!8539 = !DILocation(line: 3056, column: 5, scope: !1493)
!8540 = !DILocation(line: 3040, column: 60, scope: !1494)
!8541 = !DILocation(line: 3040, column: 39, scope: !1494)
!8542 = !DILocation(line: 3040, column: 37, scope: !1494)
!8543 = !DILocation(line: 3039, column: 5, scope: !1494)
!8544 = !DILocation(line: 3058, column: 5, scope: !1444)
!8545 = !DILocation(line: 3059, column: 1, scope: !1444)
!8546 = !DILocation(line: 3063, column: 25, scope: !1529)
!8547 = !DILocation(line: 3063, column: 41, scope: !1529)
!8548 = !DILocation(line: 3065, column: 5, scope: !1529)
!8549 = !DILocation(line: 3065, column: 16, scope: !1529)
!8550 = !DILocation(line: 3065, column: 22, scope: !1529)
!8551 = !DILocation(line: 3067, column: 9, scope: !8552)
!8552 = distinct !DILexicalBlock(scope: !1529, file: !637, line: 3067, column: 9)
!8553 = !DILocation(line: 3067, column: 52, scope: !8552)
!8554 = !DILocation(line: 3067, column: 51, scope: !8552)
!8555 = !DILocation(line: 3067, column: 36, scope: !8552)
!8556 = !DILocation(line: 3067, column: 59, scope: !8552)
!8557 = !DILocation(line: 3067, column: 18, scope: !8552)
!8558 = !DILocation(line: 3067, column: 9, scope: !1529)
!8559 = !DILocation(line: 3068, column: 25, scope: !8552)
!8560 = !DILocation(line: 3068, column: 30, scope: !8552)
!8561 = !DILocation(line: 3068, column: 9, scope: !8552)
!8562 = !DILocation(line: 3069, column: 5, scope: !1529)
!8563 = !DILocation(line: 3069, column: 10, scope: !8564)
!8564 = !DILexicalBlockFile(scope: !1535, file: !637, discriminator: 1)
!8565 = !DILocation(line: 3069, column: 20, scope: !1535)
!8566 = !DILocation(line: 3069, column: 52, scope: !1535)
!8567 = !DILocation(line: 3069, column: 51, scope: !1535)
!8568 = !DILocation(line: 3069, column: 62, scope: !8569)
!8569 = distinct !DILexicalBlock(scope: !1535, file: !637, line: 3069, column: 62)
!8570 = !DILocation(line: 3069, column: 78, scope: !8569)
!8571 = !DILocation(line: 3069, column: 62, scope: !1535)
!8572 = !DILocation(line: 3069, column: 109, scope: !8573)
!8573 = !DILexicalBlockFile(scope: !8569, file: !637, discriminator: 2)
!8574 = !DILocation(line: 3069, column: 128, scope: !8569)
!8575 = !DILocation(line: 3069, column: 137, scope: !8569)
!8576 = !DILocation(line: 3069, column: 93, scope: !8569)
!8577 = !DILocation(line: 3069, column: 142, scope: !8578)
!8578 = !DILexicalBlockFile(scope: !8579, file: !637, discriminator: 4)
!8579 = !DILexicalBlockFile(scope: !1529, file: !637, discriminator: 3)
!8580 = !DILocation(line: 3069, column: 142, scope: !1535)
!8581 = !DILocation(line: 3069, column: 142, scope: !8582)
!8582 = !DILexicalBlockFile(scope: !1535, file: !637, discriminator: 5)
!8583 = !DILocation(line: 3070, column: 13, scope: !1529)
!8584 = !DILocation(line: 3070, column: 12, scope: !1529)
!8585 = !DILocation(line: 3071, column: 1, scope: !1529)
!8586 = !DILocation(line: 3070, column: 5, scope: !1529)
!8587 = !DILocation(line: 1938, column: 34, scope: !1497)
!8588 = !DILocation(line: 1938, column: 55, scope: !1497)
!8589 = !DILocation(line: 1938, column: 70, scope: !1497)
!8590 = !DILocation(line: 1940, column: 5, scope: !1497)
!8591 = !DILocation(line: 1940, column: 12, scope: !1497)
!8592 = !DILocation(line: 1940, column: 19, scope: !1497)
!8593 = !DILocation(line: 1942, column: 25, scope: !8594)
!8594 = distinct !DILexicalBlock(scope: !1497, file: !637, line: 1942, column: 9)
!8595 = !DILocation(line: 1942, column: 30, scope: !8594)
!8596 = !DILocation(line: 1942, column: 10, scope: !8594)
!8597 = !DILocation(line: 1942, column: 132, scope: !8594)
!8598 = !DILocation(line: 1943, column: 9, scope: !8594)
!8599 = !DILocation(line: 1943, column: 16, scope: !8594)
!8600 = !DILocation(line: 1943, column: 25, scope: !8594)
!8601 = !DILocation(line: 1942, column: 9, scope: !1497)
!8602 = !DILocation(line: 1944, column: 9, scope: !8594)
!8603 = !DILocation(line: 1945, column: 21, scope: !1497)
!8604 = !DILocation(line: 1945, column: 28, scope: !1497)
!8605 = !DILocation(line: 1945, column: 37, scope: !1497)
!8606 = !DILocation(line: 1945, column: 19, scope: !1497)
!8607 = !DILocation(line: 1946, column: 30, scope: !8608)
!8608 = distinct !DILexicalBlock(scope: !1497, file: !637, line: 1946, column: 9)
!8609 = !DILocation(line: 1946, column: 35, scope: !8608)
!8610 = !DILocation(line: 1946, column: 10, scope: !8608)
!8611 = !DILocation(line: 1946, column: 9, scope: !1497)
!8612 = !DILocation(line: 1947, column: 9, scope: !8608)
!8613 = !DILocation(line: 1948, column: 9, scope: !8614)
!8614 = distinct !DILexicalBlock(scope: !1497, file: !637, line: 1948, column: 9)
!8615 = !DILocation(line: 1948, column: 18, scope: !8614)
!8616 = !DILocation(line: 1948, column: 15, scope: !8614)
!8617 = !DILocation(line: 1948, column: 9, scope: !1497)
!8618 = !DILocation(line: 1949, column: 21, scope: !8619)
!8619 = distinct !DILexicalBlock(scope: !8614, file: !637, line: 1948, column: 33)
!8620 = !DILocation(line: 1949, column: 10, scope: !8619)
!8621 = !DILocation(line: 1949, column: 19, scope: !8619)
!8622 = !DILocation(line: 1950, column: 9, scope: !8619)
!8623 = !DILocation(line: 1952, column: 17, scope: !1497)
!8624 = !DILocation(line: 1952, column: 6, scope: !1497)
!8625 = !DILocation(line: 1952, column: 15, scope: !1497)
!8626 = !DILocation(line: 1953, column: 5, scope: !1497)
!8627 = !DILocation(line: 1954, column: 1, scope: !1497)
!8628 = !DILocation(line: 276, column: 62, scope: !1523)
!8629 = !DILocation(line: 276, column: 86, scope: !1523)
!8630 = !DILocation(line: 278, column: 16, scope: !8631)
!8631 = distinct !DILexicalBlock(scope: !1523, file: !16, line: 278, column: 7)
!8632 = !DILocation(line: 278, column: 24, scope: !8631)
!8633 = !DILocation(line: 278, column: 33, scope: !8631)
!8634 = !DILocation(line: 278, column: 7, scope: !1523)
!8635 = !DILocation(line: 280, column: 5, scope: !8631)
!8636 = !DILocation(line: 282, column: 50, scope: !1523)
!8637 = !DILocation(line: 282, column: 32, scope: !1523)
!8638 = !DILocation(line: 283, column: 16, scope: !1523)
!8639 = !DILocation(line: 283, column: 24, scope: !1523)
!8640 = !DILocation(line: 283, column: 34, scope: !1523)
!8641 = !DILocation(line: 283, column: 52, scope: !1523)
!8642 = !DILocation(line: 283, column: 57, scope: !1523)
!8643 = !DILocation(line: 283, column: 11, scope: !1523)
!8644 = !DILocation(line: 282, column: 12, scope: !1523)
!8645 = !DILocation(line: 282, column: 10, scope: !1523)
!8646 = !DILocation(line: 284, column: 26, scope: !8647)
!8647 = distinct !DILexicalBlock(scope: !1523, file: !16, line: 284, column: 7)
!8648 = !DILocation(line: 284, column: 33, scope: !8647)
!8649 = !DILocation(line: 284, column: 7, scope: !8647)
!8650 = !DILocation(line: 284, column: 59, scope: !8647)
!8651 = !DILocation(line: 284, column: 67, scope: !8647)
!8652 = !DILocation(line: 285, column: 8, scope: !8647)
!8653 = !DILocation(line: 285, column: 16, scope: !8647)
!8654 = !DILocation(line: 285, column: 6, scope: !8647)
!8655 = !DILocation(line: 284, column: 38, scope: !8647)
!8656 = !DILocation(line: 286, column: 7, scope: !8647)
!8657 = !DILocation(line: 286, column: 29, scope: !8658)
!8658 = !DILexicalBlockFile(scope: !8647, file: !16, discriminator: 1)
!8659 = !DILocation(line: 286, column: 11, scope: !8647)
!8660 = !DILocation(line: 286, column: 41, scope: !8647)
!8661 = !DILocation(line: 286, column: 49, scope: !8647)
!8662 = !DILocation(line: 286, column: 59, scope: !8647)
!8663 = !DILocation(line: 286, column: 77, scope: !8647)
!8664 = !DILocation(line: 286, column: 82, scope: !8647)
!8665 = !DILocation(line: 286, column: 36, scope: !8647)
!8666 = !DILocation(line: 287, column: 25, scope: !8647)
!8667 = !DILocation(line: 287, column: 33, scope: !8647)
!8668 = !DILocation(line: 287, column: 47, scope: !8647)
!8669 = !DILocation(line: 287, column: 55, scope: !8647)
!8670 = !DILocation(line: 287, column: 45, scope: !8647)
!8671 = !DILocation(line: 287, column: 4, scope: !8647)
!8672 = !DILocation(line: 284, column: 7, scope: !1523)
!8673 = !DILocation(line: 289, column: 5, scope: !8647)
!8674 = !DILocation(line: 290, column: 10, scope: !1523)
!8675 = !DILocation(line: 290, column: 3, scope: !1523)
!8676 = !DILocation(line: 291, column: 1, scope: !1523)
!8677 = !DILocation(line: 1881, column: 31, scope: !1508)
!8678 = !DILocation(line: 1881, column: 52, scope: !1508)
!8679 = !DILocation(line: 1881, column: 66, scope: !1508)
!8680 = !DILocation(line: 1883, column: 5, scope: !1508)
!8681 = !DILocation(line: 1883, column: 12, scope: !1508)
!8682 = !DILocation(line: 1888, column: 9, scope: !8683)
!8683 = distinct !DILexicalBlock(scope: !1508, file: !637, line: 1888, column: 9)
!8684 = !DILocation(line: 1888, column: 15, scope: !8683)
!8685 = !DILocation(line: 1888, column: 29, scope: !8683)
!8686 = !DILocation(line: 1888, column: 32, scope: !8687)
!8687 = !DILexicalBlockFile(scope: !8683, file: !637, discriminator: 1)
!8688 = !DILocation(line: 1888, column: 37, scope: !8683)
!8689 = !DILocation(line: 1888, column: 49, scope: !8683)
!8690 = !DILocation(line: 1888, column: 9, scope: !1508)
!8691 = !DILocation(line: 1889, column: 9, scope: !8683)
!8692 = !DILocation(line: 1899, column: 6, scope: !8693)
!8693 = distinct !DILexicalBlock(scope: !1508, file: !637, line: 1899, column: 6)
!8694 = !DILocation(line: 1899, column: 11, scope: !8693)
!8695 = !DILocation(line: 1899, column: 26, scope: !8693)
!8696 = !DILocation(line: 1899, column: 6, scope: !1508)
!8697 = !DILocation(line: 1900, column: 9, scope: !8693)
!8698 = !DILocation(line: 1904, column: 6, scope: !8699)
!8699 = distinct !DILexicalBlock(scope: !1508, file: !637, line: 1904, column: 6)
!8700 = !DILocation(line: 1904, column: 12, scope: !8699)
!8701 = !DILocation(line: 1904, column: 6, scope: !1508)
!8702 = !DILocation(line: 1905, column: 15, scope: !8699)
!8703 = !DILocation(line: 1905, column: 9, scope: !8699)
!8704 = !DILocation(line: 1906, column: 27, scope: !1508)
!8705 = !DILocation(line: 1906, column: 19, scope: !1508)
!8706 = !DILocation(line: 1906, column: 43, scope: !1508)
!8707 = !DILocation(line: 1906, column: 48, scope: !1508)
!8708 = !DILocation(line: 1906, column: 33, scope: !1508)
!8709 = !DILocation(line: 1906, column: 17, scope: !1508)
!8710 = !DILocation(line: 1907, column: 13, scope: !1508)
!8711 = !DILocation(line: 1907, column: 41, scope: !1508)
!8712 = !DILocation(line: 1907, column: 39, scope: !1508)
!8713 = !DILocation(line: 1907, column: 25, scope: !1508)
!8714 = !DILocation(line: 1907, column: 47, scope: !1508)
!8715 = !DILocation(line: 1908, column: 13, scope: !1508)
!8716 = !DILocation(line: 1908, column: 27, scope: !1508)
!8717 = !DILocation(line: 1908, column: 25, scope: !1508)
!8718 = !DILocation(line: 1908, column: 36, scope: !1508)
!8719 = !DILocation(line: 1908, column: 41, scope: !1508)
!8720 = !DILocation(line: 1908, column: 33, scope: !1508)
!8721 = !DILocation(line: 1907, column: 47, scope: !8722)
!8722 = !DILexicalBlockFile(scope: !1508, file: !637, discriminator: 1)
!8723 = !DILocation(line: 1907, column: 5, scope: !1508)
!8724 = !DILocation(line: 1909, column: 1, scope: !1508)
!8725 = !DILocation(line: 1916, column: 36, scope: !1516)
!8726 = !DILocation(line: 1916, column: 57, scope: !1516)
!8727 = !DILocation(line: 1916, column: 72, scope: !1516)
!8728 = !DILocation(line: 1918, column: 5, scope: !1516)
!8729 = !DILocation(line: 1918, column: 12, scope: !1516)
!8730 = !DILocation(line: 1919, column: 5, scope: !1516)
!8731 = !DILocation(line: 1919, column: 11, scope: !1516)
!8732 = !DILocation(line: 1921, column: 31, scope: !8733)
!8733 = distinct !DILexicalBlock(scope: !1516, file: !637, line: 1921, column: 9)
!8734 = !DILocation(line: 1921, column: 39, scope: !8733)
!8735 = !DILocation(line: 1921, column: 29, scope: !8733)
!8736 = !DILocation(line: 1921, column: 19, scope: !8733)
!8737 = !DILocation(line: 1921, column: 53, scope: !8733)
!8738 = !DILocation(line: 1921, column: 9, scope: !1516)
!8739 = !DILocation(line: 1922, column: 9, scope: !8733)
!8740 = !DILocation(line: 1923, column: 19, scope: !1516)
!8741 = !DILocation(line: 1923, column: 38, scope: !1516)
!8742 = !DILocation(line: 1923, column: 43, scope: !1516)
!8743 = !DILocation(line: 1923, column: 28, scope: !1516)
!8744 = !DILocation(line: 1923, column: 17, scope: !1516)
!8745 = !DILocation(line: 1924, column: 9, scope: !8746)
!8746 = distinct !DILexicalBlock(scope: !1516, file: !637, line: 1924, column: 9)
!8747 = !DILocation(line: 1924, column: 23, scope: !8746)
!8748 = !DILocation(line: 1924, column: 28, scope: !8746)
!8749 = !DILocation(line: 1924, column: 21, scope: !8746)
!8750 = !DILocation(line: 1924, column: 9, scope: !1516)
!8751 = !DILocation(line: 1925, column: 9, scope: !8746)
!8752 = !DILocation(line: 1926, column: 14, scope: !1516)
!8753 = !DILocation(line: 1926, column: 19, scope: !1516)
!8754 = !DILocation(line: 1926, column: 36, scope: !1516)
!8755 = !DILocation(line: 1926, column: 34, scope: !1516)
!8756 = !DILocation(line: 1926, column: 6, scope: !1516)
!8757 = !DILocation(line: 1926, column: 12, scope: !1516)
!8758 = !DILocation(line: 1927, column: 5, scope: !1516)
!8759 = !DILocation(line: 1928, column: 1, scope: !1516)
!8760 = !DILocation(line: 3135, column: 30, scope: !1552)
!8761 = !DILocation(line: 3135, column: 46, scope: !1552)
!8762 = !DILocation(line: 3137, column: 31, scope: !1552)
!8763 = !DILocation(line: 3137, column: 12, scope: !1552)
!8764 = !DILocation(line: 3137, column: 5, scope: !1552)
!8765 = !DILocation(line: 1861, column: 23, scope: !1556)
!8766 = !DILocation(line: 1861, column: 39, scope: !1556)
!8767 = !DILocation(line: 1863, column: 5, scope: !1556)
!8768 = !DILocation(line: 1863, column: 12, scope: !1556)
!8769 = !DILocation(line: 1867, column: 9, scope: !8770)
!8770 = distinct !DILexicalBlock(scope: !1556, file: !637, line: 1867, column: 9)
!8771 = !DILocation(line: 1867, column: 16, scope: !8770)
!8772 = !DILocation(line: 1867, column: 9, scope: !1556)
!8773 = !DILocation(line: 1868, column: 9, scope: !8770)
!8774 = !DILocation(line: 1869, column: 15, scope: !1556)
!8775 = !DILocation(line: 1869, column: 23, scope: !1556)
!8776 = !DILocation(line: 1869, column: 41, scope: !1556)
!8777 = !DILocation(line: 1869, column: 46, scope: !1556)
!8778 = !DILocation(line: 1869, column: 81, scope: !1556)
!8779 = !DILocation(line: 1869, column: 9, scope: !1556)
!8780 = !DILocation(line: 1870, column: 9, scope: !8781)
!8781 = distinct !DILexicalBlock(scope: !1556, file: !637, line: 1870, column: 9)
!8782 = !DILocation(line: 1870, column: 13, scope: !8781)
!8783 = !DILocation(line: 1870, column: 26, scope: !8781)
!8784 = !DILocation(line: 1870, column: 29, scope: !8785)
!8785 = !DILexicalBlockFile(scope: !8781, file: !637, discriminator: 1)
!8786 = !DILocation(line: 1870, column: 35, scope: !8781)
!8787 = !DILocation(line: 1870, column: 33, scope: !8781)
!8788 = !DILocation(line: 1870, column: 9, scope: !1556)
!8789 = !DILocation(line: 1871, column: 9, scope: !8781)
!8790 = !DILocation(line: 1872, column: 15, scope: !1556)
!8791 = !DILocation(line: 1872, column: 6, scope: !1556)
!8792 = !DILocation(line: 1872, column: 13, scope: !1556)
!8793 = !DILocation(line: 1873, column: 5, scope: !1556)
!8794 = !DILocation(line: 1874, column: 1, scope: !1556)
!8795 = !DILocation(line: 1844, column: 21, scope: !1563)
!8796 = !DILocation(line: 1844, column: 37, scope: !1563)
!8797 = !DILocation(line: 1846, column: 5, scope: !1563)
!8798 = !DILocation(line: 1846, column: 12, scope: !1563)
!8799 = !DILocation(line: 1848, column: 9, scope: !8800)
!8800 = distinct !DILexicalBlock(scope: !1563, file: !637, line: 1848, column: 9)
!8801 = !DILocation(line: 1848, column: 16, scope: !8800)
!8802 = !DILocation(line: 1848, column: 9, scope: !1563)
!8803 = !DILocation(line: 1849, column: 9, scope: !8800)
!8804 = !DILocation(line: 1850, column: 101, scope: !1563)
!8805 = !DILocation(line: 1850, column: 98, scope: !1563)
!8806 = !DILocation(line: 1850, column: 9, scope: !1563)
!8807 = !DILocation(line: 1851, column: 9, scope: !8808)
!8808 = distinct !DILexicalBlock(scope: !1563, file: !637, line: 1851, column: 9)
!8809 = !DILocation(line: 1851, column: 13, scope: !8808)
!8810 = !DILocation(line: 1851, column: 26, scope: !8808)
!8811 = !DILocation(line: 1851, column: 29, scope: !8812)
!8812 = !DILexicalBlockFile(scope: !8808, file: !637, discriminator: 1)
!8813 = !DILocation(line: 1851, column: 35, scope: !8808)
!8814 = !DILocation(line: 1851, column: 33, scope: !8808)
!8815 = !DILocation(line: 1851, column: 9, scope: !1563)
!8816 = !DILocation(line: 1852, column: 9, scope: !8808)
!8817 = !DILocation(line: 1853, column: 15, scope: !1563)
!8818 = !DILocation(line: 1853, column: 6, scope: !1563)
!8819 = !DILocation(line: 1853, column: 13, scope: !1563)
!8820 = !DILocation(line: 1854, column: 5, scope: !1563)
!8821 = !DILocation(line: 1855, column: 1, scope: !1563)
!8822 = !DILocation(line: 705, column: 37, scope: !1584)
!8823 = !DILocation(line: 706, column: 26, scope: !1584)
!8824 = !DILocation(line: 706, column: 34, scope: !1584)
!8825 = !DILocation(line: 706, column: 46, scope: !1584)
!8826 = !DILocation(line: 706, column: 56, scope: !1584)
!8827 = !DILocation(line: 708, column: 18, scope: !1584)
!8828 = !DILocation(line: 708, column: 5, scope: !1584)
!8829 = !DILocation(line: 708, column: 8, scope: !1584)
!8830 = !DILocation(line: 708, column: 16, scope: !1584)
!8831 = !DILocation(line: 709, column: 22, scope: !1584)
!8832 = !DILocation(line: 709, column: 5, scope: !1584)
!8833 = !DILocation(line: 709, column: 8, scope: !1584)
!8834 = !DILocation(line: 709, column: 20, scope: !1584)
!8835 = !DILocation(line: 710, column: 20, scope: !1584)
!8836 = !DILocation(line: 710, column: 5, scope: !1584)
!8837 = !DILocation(line: 710, column: 8, scope: !1584)
!8838 = !DILocation(line: 710, column: 18, scope: !1584)
!8839 = !DILocation(line: 711, column: 21, scope: !1584)
!8840 = !DILocation(line: 711, column: 5, scope: !1584)
!8841 = !DILocation(line: 711, column: 8, scope: !1584)
!8842 = !DILocation(line: 711, column: 19, scope: !1584)
!8843 = !DILocation(line: 713, column: 5, scope: !1584)
!8844 = !DILocation(line: 713, column: 8, scope: !1584)
!8845 = !DILocation(line: 713, column: 21, scope: !1584)
!8846 = !DILocation(line: 715, column: 9, scope: !8847)
!8847 = distinct !DILexicalBlock(scope: !1584, file: !637, line: 715, column: 9)
!8848 = !DILocation(line: 715, column: 14, scope: !8847)
!8849 = !DILocation(line: 715, column: 9, scope: !1584)
!8850 = !DILocation(line: 716, column: 9, scope: !8847)
!8851 = !DILocation(line: 716, column: 12, scope: !8847)
!8852 = !DILocation(line: 716, column: 25, scope: !8847)
!8853 = !DILocation(line: 720, column: 27, scope: !8854)
!8854 = distinct !DILexicalBlock(scope: !8847, file: !637, line: 719, column: 5)
!8855 = !DILocation(line: 720, column: 9, scope: !8854)
!8856 = !DILocation(line: 720, column: 12, scope: !8854)
!8857 = !DILocation(line: 720, column: 25, scope: !8854)
!8858 = !DILocation(line: 721, column: 13, scope: !8859)
!8859 = distinct !DILexicalBlock(scope: !8854, file: !637, line: 721, column: 13)
!8860 = !DILocation(line: 721, column: 28, scope: !8859)
!8861 = !DILocation(line: 721, column: 13, scope: !8854)
!8862 = !DILocation(line: 722, column: 34, scope: !8859)
!8863 = !DILocation(line: 722, column: 13, scope: !8859)
!8864 = !DILocation(line: 725, column: 1, scope: !1584)
!8865 = !DILocation(line: 4195, column: 32, scope: !1603)
!8866 = !DILocation(line: 4195, column: 48, scope: !1603)
!8867 = !DILocation(line: 4197, column: 5, scope: !1603)
!8868 = !DILocation(line: 4197, column: 11, scope: !1603)
!8869 = !DILocation(line: 4198, column: 5, scope: !1603)
!8870 = !DILocation(line: 4198, column: 17, scope: !1603)
!8871 = !DILocation(line: 4199, column: 5, scope: !1603)
!8872 = !DILocation(line: 4199, column: 15, scope: !1603)
!8873 = !DILocation(line: 4201, column: 27, scope: !8874)
!8874 = distinct !DILexicalBlock(scope: !1603, file: !637, line: 4201, column: 9)
!8875 = !DILocation(line: 4201, column: 10, scope: !8874)
!8876 = !DILocation(line: 4201, column: 9, scope: !1603)
!8877 = !DILocation(line: 4202, column: 9, scope: !8874)
!8878 = !DILocation(line: 4203, column: 19, scope: !8879)
!8879 = distinct !DILexicalBlock(scope: !1603, file: !637, line: 4203, column: 9)
!8880 = !DILocation(line: 4203, column: 40, scope: !8879)
!8881 = !DILocation(line: 4203, column: 9, scope: !8879)
!8882 = !DILocation(line: 4203, column: 66, scope: !8879)
!8883 = !DILocation(line: 4203, column: 9, scope: !1603)
!8884 = !DILocation(line: 4204, column: 9, scope: !8879)
!8885 = !DILocation(line: 4205, column: 37, scope: !1603)
!8886 = !DILocation(line: 4205, column: 11, scope: !1603)
!8887 = !DILocation(line: 4205, column: 9, scope: !1603)
!8888 = !DILocation(line: 4205, column: 5, scope: !1603)
!8889 = !DILocation(line: 4207, column: 16, scope: !1603)
!8890 = !DILocation(line: 4207, column: 5, scope: !1603)
!8891 = !DILocation(line: 4208, column: 12, scope: !1603)
!8892 = !DILocation(line: 4208, column: 5, scope: !1603)
!8893 = !DILocation(line: 4209, column: 1, scope: !1603)
!8894 = !DILocation(line: 4348, column: 35, scope: !1610)
!8895 = !DILocation(line: 4348, column: 51, scope: !1610)
!8896 = !DILocation(line: 4350, column: 5, scope: !1610)
!8897 = !DILocation(line: 4350, column: 11, scope: !1610)
!8898 = !DILocation(line: 4351, column: 5, scope: !1610)
!8899 = !DILocation(line: 4351, column: 21, scope: !1610)
!8900 = !DILocation(line: 4352, column: 5, scope: !1610)
!8901 = !DILocation(line: 4352, column: 17, scope: !1610)
!8902 = !DILocation(line: 4353, column: 5, scope: !1610)
!8903 = !DILocation(line: 4353, column: 22, scope: !1610)
!8904 = !DILocation(line: 4354, column: 5, scope: !1610)
!8905 = !DILocation(line: 4354, column: 15, scope: !1610)
!8906 = !DILocation(line: 4356, column: 5, scope: !1610)
!8907 = !DILocation(line: 4356, column: 20, scope: !1610)
!8908 = !DILocation(line: 4360, column: 5, scope: !1610)
!8909 = !DILocation(line: 4360, column: 10, scope: !1610)
!8910 = !DILocation(line: 4361, column: 5, scope: !1610)
!8911 = !DILocation(line: 4361, column: 9, scope: !1610)
!8912 = !DILocation(line: 4362, column: 5, scope: !1610)
!8913 = !DILocation(line: 4362, column: 9, scope: !1610)
!8914 = !DILocation(line: 4369, column: 27, scope: !8915)
!8915 = distinct !DILexicalBlock(scope: !1610, file: !637, line: 4369, column: 9)
!8916 = !DILocation(line: 4369, column: 10, scope: !8915)
!8917 = !DILocation(line: 4369, column: 9, scope: !1610)
!8918 = !DILocation(line: 4370, column: 9, scope: !8915)
!8919 = !DILocation(line: 4371, column: 19, scope: !8920)
!8920 = distinct !DILexicalBlock(scope: !1610, file: !637, line: 4371, column: 9)
!8921 = !DILocation(line: 4371, column: 37, scope: !8920)
!8922 = !DILocation(line: 4371, column: 9, scope: !8920)
!8923 = !DILocation(line: 4371, column: 60, scope: !8920)
!8924 = !DILocation(line: 4371, column: 9, scope: !1610)
!8925 = !DILocation(line: 4372, column: 9, scope: !8920)
!8926 = !DILocation(line: 4373, column: 7, scope: !1636)
!8927 = !DILocation(line: 4373, column: 22, scope: !1636)
!8928 = !DILocation(line: 4373, column: 37, scope: !1636)
!8929 = !DILocation(line: 4373, column: 35, scope: !1636)
!8930 = !DILocation(line: 4376, column: 21, scope: !1636)
!8931 = !DILocation(line: 4376, column: 42, scope: !1636)
!8932 = !DILocation(line: 4376, column: 47, scope: !1636)
!8933 = !DILocation(line: 4376, column: 5, scope: !1636)
!8934 = !DILocation(line: 4391, column: 26, scope: !1636)
!8935 = !DILocation(line: 4391, column: 5, scope: !1636)
!8936 = !DILocation(line: 4391, column: 34, scope: !1610)
!8937 = !DILocation(line: 4396, column: 22, scope: !1610)
!8938 = !DILocation(line: 4396, column: 8, scope: !1610)
!8939 = !DILocation(line: 4397, column: 26, scope: !1610)
!8940 = !DILocation(line: 4397, column: 41, scope: !1610)
!8941 = !DILocation(line: 4398, column: 26, scope: !1610)
!8942 = !DILocation(line: 4398, column: 30, scope: !1610)
!8943 = !DILocation(line: 4397, column: 11, scope: !1610)
!8944 = !DILocation(line: 4397, column: 9, scope: !1610)
!8945 = !DILocation(line: 4397, column: 5, scope: !1610)
!8946 = !DILocation(line: 4403, column: 16, scope: !1610)
!8947 = !DILocation(line: 4403, column: 5, scope: !1610)
!8948 = !DILocation(line: 4404, column: 12, scope: !1610)
!8949 = !DILocation(line: 4404, column: 5, scope: !1610)
!8950 = !DILocation(line: 4405, column: 1, scope: !1610)
!8951 = !DILocation(line: 4418, column: 32, scope: !1687)
!8952 = !DILocation(line: 4418, column: 48, scope: !1687)
!8953 = !DILocation(line: 4420, column: 5, scope: !1687)
!8954 = !DILocation(line: 4420, column: 17, scope: !1687)
!8955 = !DILocation(line: 4421, column: 5, scope: !1687)
!8956 = !DILocation(line: 4421, column: 22, scope: !1687)
!8957 = !DILocation(line: 4421, column: 39, scope: !1687)
!8958 = !DILocation(line: 4422, column: 5, scope: !1687)
!8959 = !DILocation(line: 4422, column: 11, scope: !1687)
!8960 = !DILocation(line: 4423, column: 5, scope: !1687)
!8961 = !DILocation(line: 4423, column: 21, scope: !1687)
!8962 = !DILocation(line: 4424, column: 5, scope: !1687)
!8963 = !DILocation(line: 4424, column: 15, scope: !1687)
!8964 = !DILocation(line: 4426, column: 5, scope: !1687)
!8965 = !DILocation(line: 4426, column: 20, scope: !1687)
!8966 = !DILocation(line: 4434, column: 5, scope: !1687)
!8967 = !DILocation(line: 4434, column: 10, scope: !1687)
!8968 = !DILocation(line: 4435, column: 5, scope: !1687)
!8969 = !DILocation(line: 4435, column: 9, scope: !1687)
!8970 = !DILocation(line: 4436, column: 5, scope: !1687)
!8971 = !DILocation(line: 4436, column: 9, scope: !1687)
!8972 = !DILocation(line: 4442, column: 5, scope: !1687)
!8973 = !DILocation(line: 4442, column: 11, scope: !1687)
!8974 = !DILocation(line: 4443, column: 5, scope: !1687)
!8975 = !DILocation(line: 4443, column: 9, scope: !1687)
!8976 = !DILocation(line: 4444, column: 5, scope: !1687)
!8977 = !DILocation(line: 4444, column: 9, scope: !1687)
!8978 = !DILocation(line: 4446, column: 27, scope: !8979)
!8979 = distinct !DILexicalBlock(scope: !1687, file: !637, line: 4446, column: 9)
!8980 = !DILocation(line: 4446, column: 10, scope: !8979)
!8981 = !DILocation(line: 4446, column: 9, scope: !1687)
!8982 = !DILocation(line: 4447, column: 9, scope: !8979)
!8983 = !DILocation(line: 4448, column: 8, scope: !1687)
!8984 = !DILocation(line: 4449, column: 19, scope: !8985)
!8985 = distinct !DILexicalBlock(scope: !1687, file: !637, line: 4449, column: 9)
!8986 = !DILocation(line: 4449, column: 27, scope: !8985)
!8987 = !DILocation(line: 4449, column: 45, scope: !8985)
!8988 = !DILocation(line: 4449, column: 9, scope: !8985)
!8989 = !DILocation(line: 4449, column: 49, scope: !8985)
!8990 = !DILocation(line: 4449, column: 9, scope: !1687)
!8991 = !DILocation(line: 4450, column: 9, scope: !8985)
!8992 = !DILocation(line: 4451, column: 10, scope: !1687)
!8993 = !DILocation(line: 4451, column: 14, scope: !1687)
!8994 = !DILocation(line: 4451, column: 8, scope: !1687)
!8995 = !DILocation(line: 4452, column: 8, scope: !1687)
!8996 = !DILocation(line: 4454, column: 13, scope: !1687)
!8997 = !DILocation(line: 4456, column: 46, scope: !8998)
!8998 = distinct !DILexicalBlock(scope: !1687, file: !637, line: 4454, column: 17)
!8999 = !DILocation(line: 4456, column: 24, scope: !8998)
!9000 = !DILocation(line: 4456, column: 51, scope: !8998)
!9001 = !DILocation(line: 4456, column: 14, scope: !8998)
!9002 = !DILocation(line: 4456, column: 12, scope: !8998)
!9003 = !DILocation(line: 4457, column: 12, scope: !8998)
!9004 = !DILocation(line: 4458, column: 9, scope: !8998)
!9005 = !DILocation(line: 4461, column: 47, scope: !8998)
!9006 = !DILocation(line: 4461, column: 24, scope: !8998)
!9007 = !DILocation(line: 4461, column: 52, scope: !8998)
!9008 = !DILocation(line: 4461, column: 14, scope: !8998)
!9009 = !DILocation(line: 4461, column: 12, scope: !8998)
!9010 = !DILocation(line: 4462, column: 12, scope: !8998)
!9011 = !DILocation(line: 4463, column: 9, scope: !8998)
!9012 = !DILocation(line: 4466, column: 25, scope: !8998)
!9013 = !DILocation(line: 4466, column: 9, scope: !8998)
!9014 = !DILocation(line: 4467, column: 9, scope: !8998)
!9015 = !DILocation(line: 4469, column: 7, scope: !1704)
!9016 = !DILocation(line: 4469, column: 22, scope: !1704)
!9017 = !DILocation(line: 4469, column: 37, scope: !1704)
!9018 = !DILocation(line: 4469, column: 35, scope: !1704)
!9019 = !DILocation(line: 4472, column: 21, scope: !1704)
!9020 = !DILocation(line: 4472, column: 25, scope: !1704)
!9021 = !DILocation(line: 4472, column: 29, scope: !1704)
!9022 = !DILocation(line: 4473, column: 24, scope: !1704)
!9023 = !DILocation(line: 4473, column: 29, scope: !1704)
!9024 = !DILocation(line: 4472, column: 5, scope: !1704)
!9025 = !DILocation(line: 4489, column: 26, scope: !1704)
!9026 = !DILocation(line: 4489, column: 5, scope: !1704)
!9027 = !DILocation(line: 4489, column: 34, scope: !1687)
!9028 = !DILocation(line: 4490, column: 26, scope: !1687)
!9029 = !DILocation(line: 4490, column: 41, scope: !1687)
!9030 = !DILocation(line: 4490, column: 61, scope: !1687)
!9031 = !DILocation(line: 4490, column: 11, scope: !1687)
!9032 = !DILocation(line: 4490, column: 9, scope: !1687)
!9033 = !DILocation(line: 4490, column: 5, scope: !1687)
!9034 = !DILocation(line: 4495, column: 16, scope: !1687)
!9035 = !DILocation(line: 4495, column: 5, scope: !1687)
!9036 = !DILocation(line: 4496, column: 12, scope: !1687)
!9037 = !DILocation(line: 4496, column: 5, scope: !1687)
!9038 = !DILocation(line: 4497, column: 1, scope: !1687)
!9039 = !DILocation(line: 4100, column: 30, scope: !1705)
!9040 = !DILocation(line: 4100, column: 46, scope: !1705)
!9041 = !DILocation(line: 4137, column: 5, scope: !1705)
!9042 = !DILocation(line: 4137, column: 10, scope: !1705)
!9043 = !DILocation(line: 4138, column: 5, scope: !1705)
!9044 = !DILocation(line: 4138, column: 9, scope: !1705)
!9045 = !DILocation(line: 4139, column: 7, scope: !1715)
!9046 = !DILocation(line: 4139, column: 22, scope: !1715)
!9047 = !DILocation(line: 4139, column: 37, scope: !1715)
!9048 = !DILocation(line: 4139, column: 35, scope: !1715)
!9049 = !DILocation(line: 4140, column: 23, scope: !1715)
!9050 = !DILocation(line: 4140, column: 11, scope: !1715)
!9051 = !DILocation(line: 4140, column: 9, scope: !1715)
!9052 = !DILocation(line: 4141, column: 26, scope: !1715)
!9053 = !DILocation(line: 4141, column: 5, scope: !1715)
!9054 = !DILocation(line: 4141, column: 34, scope: !1705)
!9055 = !DILocation(line: 4142, column: 9, scope: !9056)
!9056 = distinct !DILexicalBlock(scope: !1705, file: !637, line: 4142, column: 9)
!9057 = !DILocation(line: 4142, column: 13, scope: !9056)
!9058 = !DILocation(line: 4142, column: 9, scope: !1705)
!9059 = !DILocation(line: 4143, column: 16, scope: !9056)
!9060 = !DILocation(line: 4143, column: 9, scope: !9056)
!9061 = !DILocation(line: 4144, column: 5, scope: !1705)
!9062 = !DILocation(line: 4144, column: 25, scope: !1705)
!9063 = !DILocation(line: 4145, column: 38, scope: !1705)
!9064 = !DILocation(line: 4145, column: 12, scope: !1705)
!9065 = !DILocation(line: 4145, column: 5, scope: !1705)
!9066 = !DILocation(line: 4147, column: 1, scope: !1705)
!9067 = !DILocation(line: 4160, column: 30, scope: !1716)
!9068 = !DILocation(line: 4160, column: 46, scope: !1716)
!9069 = !DILocation(line: 4162, column: 5, scope: !1716)
!9070 = !DILocation(line: 4162, column: 15, scope: !1716)
!9071 = !DILocation(line: 4163, column: 5, scope: !1716)
!9072 = !DILocation(line: 4163, column: 15, scope: !1716)
!9073 = !DILocation(line: 4164, column: 5, scope: !1716)
!9074 = !DILocation(line: 4164, column: 9, scope: !1716)
!9075 = !DILocation(line: 4164, column: 14, scope: !1716)
!9076 = !DILocation(line: 4171, column: 27, scope: !9077)
!9077 = distinct !DILexicalBlock(scope: !1716, file: !637, line: 4171, column: 9)
!9078 = !DILocation(line: 4171, column: 10, scope: !9077)
!9079 = !DILocation(line: 4171, column: 9, scope: !1716)
!9080 = !DILocation(line: 4172, column: 9, scope: !9081)
!9081 = distinct !DILexicalBlock(scope: !9077, file: !637, line: 4171, column: 59)
!9082 = !DILocation(line: 4173, column: 31, scope: !9083)
!9083 = distinct !DILexicalBlock(scope: !9081, file: !637, line: 4173, column: 13)
!9084 = !DILocation(line: 4173, column: 14, scope: !9083)
!9085 = !DILocation(line: 4173, column: 13, scope: !9081)
!9086 = !DILocation(line: 4175, column: 13, scope: !9083)
!9087 = !DILocation(line: 4176, column: 14, scope: !9081)
!9088 = !DILocation(line: 4177, column: 5, scope: !9081)
!9089 = !DILocation(line: 4178, column: 30, scope: !1716)
!9090 = !DILocation(line: 4178, column: 11, scope: !1716)
!9091 = !DILocation(line: 4178, column: 9, scope: !1716)
!9092 = !DILocation(line: 4179, column: 10, scope: !9093)
!9093 = distinct !DILexicalBlock(scope: !1716, file: !637, line: 4179, column: 9)
!9094 = !DILocation(line: 4179, column: 9, scope: !1716)
!9095 = !DILocation(line: 4180, column: 31, scope: !9096)
!9096 = distinct !DILexicalBlock(scope: !9093, file: !637, line: 4179, column: 15)
!9097 = !DILocation(line: 4180, column: 40, scope: !9096)
!9098 = !DILocation(line: 4180, column: 15, scope: !9096)
!9099 = !DILocation(line: 4180, column: 13, scope: !9096)
!9100 = !DILocation(line: 4181, column: 9, scope: !9096)
!9101 = !DILocation(line: 4182, column: 5, scope: !9096)
!9102 = !DILocation(line: 4183, column: 9, scope: !1726)
!9103 = !DILocation(line: 4183, column: 9, scope: !1716)
!9104 = !DILocation(line: 4184, column: 9, scope: !1726)
!9105 = !DILocation(line: 4184, column: 14, scope: !9106)
!9106 = !DILexicalBlockFile(scope: !1725, file: !637, discriminator: 1)
!9107 = !DILocation(line: 4184, column: 24, scope: !1725)
!9108 = !DILocation(line: 4184, column: 54, scope: !1725)
!9109 = !DILocation(line: 4184, column: 70, scope: !9110)
!9110 = distinct !DILexicalBlock(scope: !1725, file: !637, line: 4184, column: 67)
!9111 = !DILocation(line: 4184, column: 87, scope: !9110)
!9112 = !DILocation(line: 4184, column: 67, scope: !9110)
!9113 = !DILocation(line: 4184, column: 97, scope: !9110)
!9114 = !DILocation(line: 4184, column: 67, scope: !1725)
!9115 = !DILocation(line: 4184, column: 67, scope: !9116)
!9116 = !DILexicalBlockFile(scope: !1725, file: !637, discriminator: 2)
!9117 = !DILocation(line: 4184, column: 128, scope: !9118)
!9118 = !DILexicalBlockFile(scope: !9110, file: !637, discriminator: 3)
!9119 = !DILocation(line: 4184, column: 146, scope: !9110)
!9120 = !DILocation(line: 4184, column: 156, scope: !9110)
!9121 = !DILocation(line: 4184, column: 181, scope: !9110)
!9122 = !DILocation(line: 4184, column: 112, scope: !9110)
!9123 = !DILocation(line: 4184, column: 200, scope: !9124)
!9124 = !DILexicalBlockFile(scope: !1726, file: !637, discriminator: 4)
!9125 = !DILocation(line: 4184, column: 200, scope: !1725)
!9126 = !DILocation(line: 4184, column: 200, scope: !9127)
!9127 = !DILexicalBlockFile(scope: !1725, file: !637, discriminator: 5)
!9128 = !DILocation(line: 4184, column: 200, scope: !9129)
!9129 = !DILexicalBlockFile(scope: !1725, file: !637, discriminator: 6)
!9130 = !DILocation(line: 4185, column: 9, scope: !9131)
!9131 = distinct !DILexicalBlock(scope: !1716, file: !637, line: 4185, column: 9)
!9132 = !DILocation(line: 4185, column: 9, scope: !1716)
!9133 = !DILocation(line: 4186, column: 16, scope: !9131)
!9134 = !DILocation(line: 4186, column: 9, scope: !9131)
!9135 = !DILocation(line: 4187, column: 58, scope: !1716)
!9136 = !DILocation(line: 4187, column: 5, scope: !1716)
!9137 = !DILocation(line: 4188, column: 1, scope: !1716)
!9138 = !DILocation(line: 4512, column: 32, scope: !1727)
!9139 = !DILocation(line: 4512, column: 48, scope: !1727)
!9140 = !DILocation(line: 4514, column: 5, scope: !1727)
!9141 = !DILocation(line: 4514, column: 11, scope: !1727)
!9142 = !DILocation(line: 4514, column: 18, scope: !1727)
!9143 = !DILocation(line: 4515, column: 5, scope: !1727)
!9144 = !DILocation(line: 4515, column: 21, scope: !1727)
!9145 = !DILocation(line: 4516, column: 27, scope: !9146)
!9146 = distinct !DILexicalBlock(scope: !1727, file: !637, line: 4516, column: 9)
!9147 = !DILocation(line: 4516, column: 10, scope: !9146)
!9148 = !DILocation(line: 4516, column: 9, scope: !1727)
!9149 = !DILocation(line: 4517, column: 9, scope: !9146)
!9150 = !DILocation(line: 4518, column: 7, scope: !1742)
!9151 = !DILocation(line: 4518, column: 22, scope: !1742)
!9152 = !DILocation(line: 4518, column: 37, scope: !1742)
!9153 = !DILocation(line: 4518, column: 35, scope: !1742)
!9154 = !DILocation(line: 4519, column: 24, scope: !1742)
!9155 = !DILocation(line: 4519, column: 30, scope: !1742)
!9156 = !DILocation(line: 4519, column: 10, scope: !1742)
!9157 = !DILocation(line: 4519, column: 8, scope: !1742)
!9158 = !DILocation(line: 4520, column: 26, scope: !1742)
!9159 = !DILocation(line: 4520, column: 5, scope: !1742)
!9160 = !DILocation(line: 4520, column: 34, scope: !1727)
!9161 = !DILocation(line: 4521, column: 9, scope: !9162)
!9162 = distinct !DILexicalBlock(scope: !1727, file: !637, line: 4521, column: 9)
!9163 = !DILocation(line: 4521, column: 12, scope: !9162)
!9164 = !DILocation(line: 4521, column: 9, scope: !1727)
!9165 = !DILocation(line: 4522, column: 25, scope: !9166)
!9166 = distinct !DILexicalBlock(scope: !9162, file: !637, line: 4521, column: 27)
!9167 = !DILocation(line: 4522, column: 9, scope: !9166)
!9168 = !DILocation(line: 4523, column: 9, scope: !9166)
!9169 = !DILocation(line: 4525, column: 53, scope: !1744)
!9170 = !DILocation(line: 4525, column: 81, scope: !1744)
!9171 = !DILocation(line: 4525, column: 86, scope: !1744)
!9172 = !DILocation(line: 4525, column: 114, scope: !1744)
!9173 = !DILocation(line: 4525, column: 118, scope: !1744)
!9174 = !{!9175, !2950, i64 16}
!9175 = !{!"servent", !2323, i64 0, !2323, i64 8, !2950, i64 16, !2323, i64 24}
!9176 = !DILocation(line: 4525, column: 92, scope: !1744)
!9177 = !DILocation(line: 4525, column: 286, scope: !9178)
!9178 = distinct !DILexicalBlock(scope: !1744, file: !637, line: 4525, column: 131)
!9179 = !DILocation(line: 4525, column: 242, scope: !9178)
!9180 = !{i32 455095}
!9181 = !DILocation(line: 4525, column: 300, scope: !1744)
!9182 = !DILocation(line: 4525, column: 156, scope: !9178)
!9183 = !DILocation(line: 4525, column: 305, scope: !1727)
!9184 = !DILocation(line: 4525, column: 305, scope: !1744)
!9185 = !DILocation(line: 4525, column: 28, scope: !1727)
!9186 = !DILocation(line: 4525, column: 12, scope: !1727)
!9187 = !DILocation(line: 4525, column: 5, scope: !1727)
!9188 = !DILocation(line: 4526, column: 1, scope: !1727)
!9189 = !DILocation(line: 4542, column: 32, scope: !1746)
!9190 = !DILocation(line: 4542, column: 48, scope: !1746)
!9191 = !DILocation(line: 4544, column: 5, scope: !1746)
!9192 = !DILocation(line: 4544, column: 9, scope: !1746)
!9193 = !DILocation(line: 4545, column: 5, scope: !1746)
!9194 = !DILocation(line: 4545, column: 11, scope: !1746)
!9195 = !DILocation(line: 4546, column: 5, scope: !1746)
!9196 = !DILocation(line: 4546, column: 21, scope: !1746)
!9197 = !DILocation(line: 4547, column: 27, scope: !9198)
!9198 = distinct !DILexicalBlock(scope: !1746, file: !637, line: 4547, column: 9)
!9199 = !DILocation(line: 4547, column: 10, scope: !9198)
!9200 = !DILocation(line: 4547, column: 9, scope: !1746)
!9201 = !DILocation(line: 4548, column: 9, scope: !9198)
!9202 = !DILocation(line: 4549, column: 9, scope: !9203)
!9203 = distinct !DILexicalBlock(scope: !1746, file: !637, line: 4549, column: 9)
!9204 = !DILocation(line: 4549, column: 14, scope: !9203)
!9205 = !DILocation(line: 4549, column: 18, scope: !9203)
!9206 = !DILocation(line: 4549, column: 21, scope: !9207)
!9207 = !DILexicalBlockFile(scope: !9203, file: !637, discriminator: 1)
!9208 = !DILocation(line: 4549, column: 26, scope: !9203)
!9209 = !DILocation(line: 4549, column: 9, scope: !1746)
!9210 = !DILocation(line: 4551, column: 13, scope: !9211)
!9211 = distinct !DILexicalBlock(scope: !9203, file: !637, line: 4549, column: 36)
!9212 = !DILocation(line: 4550, column: 9, scope: !9211)
!9213 = !DILocation(line: 4553, column: 9, scope: !9211)
!9214 = !DILocation(line: 4555, column: 7, scope: !1754)
!9215 = !DILocation(line: 4555, column: 22, scope: !1754)
!9216 = !DILocation(line: 4555, column: 37, scope: !1754)
!9217 = !DILocation(line: 4555, column: 35, scope: !1754)
!9218 = !DILocation(line: 4556, column: 42, scope: !1756)
!9219 = !DILocation(line: 4556, column: 70, scope: !1756)
!9220 = !DILocation(line: 4556, column: 75, scope: !1756)
!9221 = !DILocation(line: 4556, column: 110, scope: !1756)
!9222 = !DILocation(line: 4556, column: 103, scope: !1756)
!9223 = !DILocation(line: 4556, column: 276, scope: !9224)
!9224 = distinct !DILexicalBlock(scope: !1756, file: !637, line: 4556, column: 121)
!9225 = !DILocation(line: 4556, column: 232, scope: !9224)
!9226 = !{i32 456212}
!9227 = !DILocation(line: 4556, column: 290, scope: !1756)
!9228 = !DILocation(line: 4556, column: 146, scope: !9224)
!9229 = !DILocation(line: 4556, column: 295, scope: !1754)
!9230 = !DILocation(line: 4556, column: 295, scope: !1756)
!9231 = !DILocation(line: 4556, column: 24, scope: !1754)
!9232 = !DILocation(line: 4556, column: 300, scope: !1754)
!9233 = !DILocation(line: 4556, column: 10, scope: !1754)
!9234 = !DILocation(line: 4556, column: 8, scope: !1754)
!9235 = !DILocation(line: 4557, column: 26, scope: !1754)
!9236 = !DILocation(line: 4557, column: 5, scope: !1754)
!9237 = !DILocation(line: 4557, column: 34, scope: !1746)
!9238 = !DILocation(line: 4558, column: 9, scope: !9239)
!9239 = distinct !DILexicalBlock(scope: !1746, file: !637, line: 4558, column: 9)
!9240 = !DILocation(line: 4558, column: 12, scope: !9239)
!9241 = !DILocation(line: 4558, column: 9, scope: !1746)
!9242 = !DILocation(line: 4559, column: 25, scope: !9243)
!9243 = distinct !DILexicalBlock(scope: !9239, file: !637, line: 4558, column: 27)
!9244 = !DILocation(line: 4559, column: 9, scope: !9243)
!9245 = !DILocation(line: 4560, column: 9, scope: !9243)
!9246 = !DILocation(line: 4562, column: 33, scope: !1746)
!9247 = !DILocation(line: 4562, column: 37, scope: !1746)
!9248 = !{!9175, !2323, i64 0}
!9249 = !DILocation(line: 4562, column: 12, scope: !1746)
!9250 = !DILocation(line: 4562, column: 5, scope: !1746)
!9251 = !DILocation(line: 4563, column: 1, scope: !1746)
!9252 = !DILocation(line: 4578, column: 33, scope: !1758)
!9253 = !DILocation(line: 4578, column: 49, scope: !1758)
!9254 = !DILocation(line: 4580, column: 5, scope: !1758)
!9255 = !DILocation(line: 4580, column: 11, scope: !1758)
!9256 = !DILocation(line: 4581, column: 5, scope: !1758)
!9257 = !DILocation(line: 4581, column: 22, scope: !1758)
!9258 = !DILocation(line: 4582, column: 27, scope: !9259)
!9259 = distinct !DILexicalBlock(scope: !1758, file: !637, line: 4582, column: 9)
!9260 = !DILocation(line: 4582, column: 10, scope: !9259)
!9261 = !DILocation(line: 4582, column: 9, scope: !1758)
!9262 = !DILocation(line: 4583, column: 9, scope: !9259)
!9263 = !DILocation(line: 4584, column: 7, scope: !1771)
!9264 = !DILocation(line: 4584, column: 22, scope: !1771)
!9265 = !DILocation(line: 4584, column: 37, scope: !1771)
!9266 = !DILocation(line: 4584, column: 35, scope: !1771)
!9267 = !DILocation(line: 4585, column: 25, scope: !1771)
!9268 = !DILocation(line: 4585, column: 10, scope: !1771)
!9269 = !DILocation(line: 4585, column: 8, scope: !1771)
!9270 = !DILocation(line: 4586, column: 26, scope: !1771)
!9271 = !DILocation(line: 4586, column: 5, scope: !1771)
!9272 = !DILocation(line: 4586, column: 34, scope: !1758)
!9273 = !DILocation(line: 4587, column: 9, scope: !9274)
!9274 = distinct !DILexicalBlock(scope: !1758, file: !637, line: 4587, column: 9)
!9275 = !DILocation(line: 4587, column: 12, scope: !9274)
!9276 = !DILocation(line: 4587, column: 9, scope: !1758)
!9277 = !DILocation(line: 4588, column: 25, scope: !9278)
!9278 = distinct !DILexicalBlock(scope: !9274, file: !637, line: 4587, column: 27)
!9279 = !DILocation(line: 4588, column: 9, scope: !9278)
!9280 = !DILocation(line: 4589, column: 9, scope: !9278)
!9281 = !DILocation(line: 4591, column: 35, scope: !1758)
!9282 = !DILocation(line: 4591, column: 39, scope: !1758)
!9283 = !{!9284, !2950, i64 16}
!9284 = !{!"protoent", !2323, i64 0, !2323, i64 8, !2950, i64 16}
!9285 = !DILocation(line: 4591, column: 28, scope: !1758)
!9286 = !DILocation(line: 4591, column: 12, scope: !1758)
!9287 = !DILocation(line: 4591, column: 5, scope: !1758)
!9288 = !DILocation(line: 4592, column: 1, scope: !1758)
!9289 = !DILocation(line: 4604, column: 22, scope: !1772)
!9290 = !DILocation(line: 4604, column: 38, scope: !1772)
!9291 = !DILocation(line: 4606, column: 5, scope: !1772)
!9292 = !DILocation(line: 4606, column: 14, scope: !1772)
!9293 = !DILocation(line: 4606, column: 18, scope: !1772)
!9294 = !DILocation(line: 4607, column: 5, scope: !1772)
!9295 = !DILocation(line: 4607, column: 15, scope: !1772)
!9296 = !DILocation(line: 4612, column: 34, scope: !1772)
!9297 = !DILocation(line: 4612, column: 20, scope: !1772)
!9298 = !DILocation(line: 4612, column: 10, scope: !1772)
!9299 = !DILocation(line: 4612, column: 8, scope: !1772)
!9300 = !DILocation(line: 4613, column: 9, scope: !9301)
!9301 = distinct !DILexicalBlock(scope: !1772, file: !637, line: 4613, column: 9)
!9302 = !DILocation(line: 4613, column: 12, scope: !9301)
!9303 = !DILocation(line: 4613, column: 30, scope: !9301)
!9304 = !DILocation(line: 4613, column: 33, scope: !9305)
!9305 = !DILexicalBlockFile(scope: !9301, file: !637, discriminator: 1)
!9306 = !DILocation(line: 4613, column: 9, scope: !1772)
!9307 = !DILocation(line: 4614, column: 9, scope: !9301)
!9308 = !DILocation(line: 4633, column: 21, scope: !1772)
!9309 = !DILocation(line: 4633, column: 13, scope: !1772)
!9310 = !DILocation(line: 4633, column: 11, scope: !1772)
!9311 = !DILocation(line: 4634, column: 9, scope: !9312)
!9312 = distinct !DILexicalBlock(scope: !1772, file: !637, line: 4634, column: 9)
!9313 = !DILocation(line: 4634, column: 15, scope: !9312)
!9314 = !DILocation(line: 4634, column: 9, scope: !1772)
!9315 = !DILocation(line: 4635, column: 9, scope: !9312)
!9316 = !DILocation(line: 4638, column: 43, scope: !1772)
!9317 = !DILocation(line: 4638, column: 32, scope: !1772)
!9318 = !DILocation(line: 4638, column: 16, scope: !1772)
!9319 = !DILocation(line: 4638, column: 14, scope: !1772)
!9320 = !DILocation(line: 4639, column: 9, scope: !9321)
!9321 = distinct !DILexicalBlock(scope: !1772, file: !637, line: 4639, column: 9)
!9322 = !DILocation(line: 4639, column: 18, scope: !9321)
!9323 = !DILocation(line: 4639, column: 9, scope: !1772)
!9324 = !DILocation(line: 4640, column: 15, scope: !9321)
!9325 = !DILocation(line: 4640, column: 9, scope: !9321)
!9326 = !DILocation(line: 4641, column: 12, scope: !1772)
!9327 = !DILocation(line: 4641, column: 5, scope: !1772)
!9328 = !DILocation(line: 4642, column: 1, scope: !1772)
!9329 = !DILocation(line: 4659, column: 29, scope: !1779)
!9330 = !DILocation(line: 4659, column: 45, scope: !1779)
!9331 = !DILocation(line: 4661, column: 5, scope: !1779)
!9332 = !DILocation(line: 4661, column: 25, scope: !1779)
!9333 = !DILocation(line: 4661, column: 43, scope: !1779)
!9334 = !DILocation(line: 4662, column: 5, scope: !1779)
!9335 = !DILocation(line: 4662, column: 14, scope: !1779)
!9336 = !DILocation(line: 4663, column: 5, scope: !1779)
!9337 = !DILocation(line: 4663, column: 9, scope: !1779)
!9338 = !DILocation(line: 4663, column: 17, scope: !1779)
!9339 = !DILocation(line: 4663, column: 37, scope: !1779)
!9340 = !DILocation(line: 4664, column: 5, scope: !1779)
!9341 = !DILocation(line: 4664, column: 15, scope: !1779)
!9342 = !DILocation(line: 4666, column: 5, scope: !1779)
!9343 = !DILocation(line: 4666, column: 10, scope: !1779)
!9344 = !DILocation(line: 4670, column: 5, scope: !1779)
!9345 = !DILocation(line: 4670, column: 9, scope: !1779)
!9346 = !DILocation(line: 4673, column: 12, scope: !1779)
!9347 = !DILocation(line: 4677, column: 27, scope: !9348)
!9348 = distinct !DILexicalBlock(scope: !1779, file: !637, line: 4677, column: 9)
!9349 = !DILocation(line: 4677, column: 10, scope: !9348)
!9350 = !DILocation(line: 4677, column: 9, scope: !1779)
!9351 = !DILocation(line: 4679, column: 9, scope: !9348)
!9352 = !DILocation(line: 4682, column: 7, scope: !1796)
!9353 = !DILocation(line: 4682, column: 22, scope: !1796)
!9354 = !DILocation(line: 4682, column: 37, scope: !1796)
!9355 = !DILocation(line: 4682, column: 35, scope: !1796)
!9356 = !DILocation(line: 4684, column: 9, scope: !9357)
!9357 = distinct !DILexicalBlock(scope: !1796, file: !637, line: 4684, column: 9)
!9358 = !DILocation(line: 4684, column: 28, scope: !9357)
!9359 = !DILocation(line: 4684, column: 9, scope: !1796)
!9360 = !DILocation(line: 4685, column: 26, scope: !9361)
!9361 = distinct !DILexicalBlock(scope: !9357, file: !637, line: 4684, column: 34)
!9362 = !DILocation(line: 4685, column: 34, scope: !9361)
!9363 = !DILocation(line: 4685, column: 39, scope: !9361)
!9364 = !DILocation(line: 4685, column: 55, scope: !9361)
!9365 = !DILocation(line: 4685, column: 62, scope: !9361)
!9366 = !DILocation(line: 4685, column: 15, scope: !9361)
!9367 = !DILocation(line: 4685, column: 13, scope: !9361)
!9368 = !DILocation(line: 4686, column: 13, scope: !9369)
!9369 = distinct !DILexicalBlock(scope: !9361, file: !637, line: 4686, column: 13)
!9370 = !DILocation(line: 4686, column: 32, scope: !9369)
!9371 = !DILocation(line: 4686, column: 13, scope: !9361)
!9372 = !DILocation(line: 4687, column: 17, scope: !9373)
!9373 = distinct !DILexicalBlock(scope: !9374, file: !637, line: 4687, column: 17)
!9374 = distinct !DILexicalBlock(scope: !9369, file: !637, line: 4686, column: 39)
!9375 = !DILocation(line: 4687, column: 21, scope: !9373)
!9376 = !DILocation(line: 4687, column: 17, scope: !9374)
!9377 = !DILocation(line: 4688, column: 36, scope: !9378)
!9378 = distinct !DILexicalBlock(scope: !9373, file: !637, line: 4687, column: 27)
!9379 = !DILocation(line: 4689, column: 13, scope: !9378)
!9380 = !DILocation(line: 4690, column: 24, scope: !9381)
!9381 = distinct !DILexicalBlock(scope: !9373, file: !637, line: 4690, column: 22)
!9382 = !DILocation(line: 4690, column: 23, scope: !9381)
!9383 = !DILocation(line: 4690, column: 45, scope: !9381)
!9384 = !DILocation(line: 4690, column: 22, scope: !9373)
!9385 = !DILocation(line: 4692, column: 36, scope: !9386)
!9386 = distinct !DILexicalBlock(scope: !9381, file: !637, line: 4690, column: 52)
!9387 = !DILocation(line: 4693, column: 34, scope: !9386)
!9388 = !DILocation(line: 4693, column: 42, scope: !9386)
!9389 = !DILocation(line: 4693, column: 48, scope: !9386)
!9390 = !DILocation(line: 4693, column: 55, scope: !9386)
!9391 = !DILocation(line: 4693, column: 23, scope: !9386)
!9392 = !DILocation(line: 4693, column: 21, scope: !9386)
!9393 = !DILocation(line: 4694, column: 13, scope: !9386)
!9394 = !DILocation(line: 4695, column: 9, scope: !9374)
!9395 = !DILocation(line: 4696, column: 5, scope: !9361)
!9396 = !DILocation(line: 4700, column: 26, scope: !9397)
!9397 = distinct !DILexicalBlock(scope: !9357, file: !637, line: 4699, column: 5)
!9398 = !DILocation(line: 4700, column: 34, scope: !9397)
!9399 = !DILocation(line: 4700, column: 40, scope: !9397)
!9400 = !DILocation(line: 4700, column: 47, scope: !9397)
!9401 = !DILocation(line: 4700, column: 15, scope: !9397)
!9402 = !DILocation(line: 4700, column: 13, scope: !9397)
!9403 = !DILocation(line: 4702, column: 26, scope: !1796)
!9404 = !DILocation(line: 4702, column: 5, scope: !1796)
!9405 = !DILocation(line: 4702, column: 34, scope: !1779)
!9406 = !DILocation(line: 4704, column: 9, scope: !9407)
!9407 = distinct !DILexicalBlock(scope: !1779, file: !637, line: 4704, column: 9)
!9408 = !DILocation(line: 4704, column: 13, scope: !9407)
!9409 = !DILocation(line: 4704, column: 9, scope: !1779)
!9410 = !DILocation(line: 4705, column: 16, scope: !9407)
!9411 = !DILocation(line: 4705, column: 9, scope: !9407)
!9412 = !DILocation(line: 4707, column: 29, scope: !9413)
!9413 = distinct !DILexicalBlock(scope: !1779, file: !637, line: 4707, column: 9)
!9414 = !DILocation(line: 4707, column: 39, scope: !9413)
!9415 = !DILocation(line: 4707, column: 9, scope: !9413)
!9416 = !DILocation(line: 4707, column: 58, scope: !9413)
!9417 = !DILocation(line: 4707, column: 9, scope: !1779)
!9418 = !DILocation(line: 4708, column: 9, scope: !9413)
!9419 = !DILocation(line: 4709, column: 29, scope: !9420)
!9420 = distinct !DILexicalBlock(scope: !1779, file: !637, line: 4709, column: 9)
!9421 = !DILocation(line: 4709, column: 39, scope: !9420)
!9422 = !DILocation(line: 4709, column: 9, scope: !9420)
!9423 = !DILocation(line: 4709, column: 58, scope: !9420)
!9424 = !DILocation(line: 4709, column: 9, scope: !1779)
!9425 = !DILocation(line: 4710, column: 9, scope: !9420)
!9426 = !DILocation(line: 4712, column: 25, scope: !1779)
!9427 = !DILocation(line: 4712, column: 32, scope: !1779)
!9428 = !DILocation(line: 4712, column: 40, scope: !1779)
!9429 = !DILocation(line: 4712, column: 46, scope: !1779)
!9430 = !DILocation(line: 4712, column: 10, scope: !1779)
!9431 = !DILocation(line: 4712, column: 8, scope: !1779)
!9432 = !DILocation(line: 4713, column: 9, scope: !9433)
!9433 = distinct !DILexicalBlock(scope: !1779, file: !637, line: 4713, column: 9)
!9434 = !DILocation(line: 4713, column: 12, scope: !9433)
!9435 = !DILocation(line: 4713, column: 9, scope: !1779)
!9436 = !DILocation(line: 4714, column: 9, scope: !9433)
!9437 = !DILocation(line: 4715, column: 25, scope: !1779)
!9438 = !DILocation(line: 4715, column: 32, scope: !1779)
!9439 = !DILocation(line: 4715, column: 40, scope: !1779)
!9440 = !DILocation(line: 4715, column: 46, scope: !1779)
!9441 = !DILocation(line: 4715, column: 10, scope: !1779)
!9442 = !DILocation(line: 4715, column: 8, scope: !1779)
!9443 = !DILocation(line: 4716, column: 9, scope: !9444)
!9444 = distinct !DILexicalBlock(scope: !1779, file: !637, line: 4716, column: 9)
!9445 = !DILocation(line: 4716, column: 12, scope: !9444)
!9446 = !DILocation(line: 4716, column: 9, scope: !1779)
!9447 = !DILocation(line: 4717, column: 9, scope: !9444)
!9448 = !DILocation(line: 4718, column: 27, scope: !1779)
!9449 = !DILocation(line: 4718, column: 31, scope: !1779)
!9450 = !DILocation(line: 4718, column: 11, scope: !1779)
!9451 = !DILocation(line: 4718, column: 9, scope: !1779)
!9452 = !DILocation(line: 4718, column: 5, scope: !1779)
!9453 = !DILocation(line: 4721, column: 9, scope: !9454)
!9454 = distinct !DILexicalBlock(scope: !1779, file: !637, line: 4721, column: 9)
!9455 = !DILocation(line: 4721, column: 13, scope: !9454)
!9456 = !DILocation(line: 4721, column: 9, scope: !1779)
!9457 = !DILocation(line: 4722, column: 13, scope: !9458)
!9458 = distinct !DILexicalBlock(scope: !9459, file: !637, line: 4722, column: 13)
!9459 = distinct !DILexicalBlock(scope: !9454, file: !637, line: 4721, column: 28)
!9460 = !DILocation(line: 4722, column: 16, scope: !9458)
!9461 = !DILocation(line: 4722, column: 13, scope: !9459)
!9462 = !DILocation(line: 4723, column: 19, scope: !9458)
!9463 = !DILocation(line: 4723, column: 13, scope: !9458)
!9464 = !DILocation(line: 4724, column: 13, scope: !9465)
!9465 = distinct !DILexicalBlock(scope: !9459, file: !637, line: 4724, column: 13)
!9466 = !DILocation(line: 4724, column: 16, scope: !9465)
!9467 = !DILocation(line: 4724, column: 13, scope: !9459)
!9468 = !DILocation(line: 4725, column: 19, scope: !9465)
!9469 = !DILocation(line: 4725, column: 13, scope: !9465)
!9470 = !DILocation(line: 4726, column: 5, scope: !9459)
!9471 = !DILocation(line: 4727, column: 5, scope: !1779)
!9472 = !DILocation(line: 4727, column: 10, scope: !9473)
!9473 = !DILexicalBlockFile(scope: !1798, file: !637, discriminator: 1)
!9474 = !DILocation(line: 4727, column: 20, scope: !1798)
!9475 = !DILocation(line: 4727, column: 51, scope: !1798)
!9476 = !DILocation(line: 4727, column: 38, scope: !1798)
!9477 = !DILocation(line: 4727, column: 60, scope: !1801)
!9478 = !DILocation(line: 4727, column: 76, scope: !1801)
!9479 = !DILocation(line: 4727, column: 60, scope: !1798)
!9480 = !DILocation(line: 4727, column: 91, scope: !9481)
!9481 = !DILexicalBlockFile(scope: !1801, file: !637, discriminator: 2)
!9482 = !DILocation(line: 4727, column: 96, scope: !9483)
!9483 = !DILexicalBlockFile(scope: !1800, file: !637, discriminator: 4)
!9484 = !DILocation(line: 4727, column: 106, scope: !1800)
!9485 = !DILocation(line: 4727, column: 136, scope: !1800)
!9486 = !DILocation(line: 4727, column: 162, scope: !9487)
!9487 = distinct !DILexicalBlock(scope: !1800, file: !637, line: 4727, column: 159)
!9488 = !DILocation(line: 4727, column: 179, scope: !9487)
!9489 = !DILocation(line: 4727, column: 159, scope: !9487)
!9490 = !DILocation(line: 4727, column: 189, scope: !9487)
!9491 = !DILocation(line: 4727, column: 159, scope: !1800)
!9492 = !DILocation(line: 4727, column: 159, scope: !9493)
!9493 = !DILexicalBlockFile(scope: !1800, file: !637, discriminator: 5)
!9494 = !DILocation(line: 4727, column: 220, scope: !9495)
!9495 = !DILexicalBlockFile(scope: !9487, file: !637, discriminator: 6)
!9496 = !DILocation(line: 4727, column: 238, scope: !9487)
!9497 = !DILocation(line: 4727, column: 248, scope: !9487)
!9498 = !DILocation(line: 4727, column: 273, scope: !9487)
!9499 = !DILocation(line: 4727, column: 204, scope: !9487)
!9500 = !DILocation(line: 4727, column: 292, scope: !9501)
!9501 = !DILexicalBlockFile(scope: !1801, file: !637, discriminator: 7)
!9502 = !DILocation(line: 4727, column: 292, scope: !1800)
!9503 = !DILocation(line: 4727, column: 292, scope: !9504)
!9504 = !DILexicalBlockFile(scope: !1800, file: !637, discriminator: 8)
!9505 = !DILocation(line: 4727, column: 292, scope: !9506)
!9506 = !DILexicalBlockFile(scope: !1800, file: !637, discriminator: 9)
!9507 = !DILocation(line: 4727, column: 305, scope: !9508)
!9508 = !DILexicalBlockFile(scope: !9509, file: !637, discriminator: 10)
!9509 = !DILexicalBlockFile(scope: !1779, file: !637, discriminator: 3)
!9510 = !DILocation(line: 4727, column: 305, scope: !1798)
!9511 = !DILocation(line: 4727, column: 305, scope: !9512)
!9512 = !DILexicalBlockFile(scope: !1798, file: !637, discriminator: 11)
!9513 = !DILocation(line: 4728, column: 5, scope: !1779)
!9514 = !DILocation(line: 4728, column: 10, scope: !9515)
!9515 = !DILexicalBlockFile(scope: !1803, file: !637, discriminator: 1)
!9516 = !DILocation(line: 4728, column: 20, scope: !1803)
!9517 = !DILocation(line: 4728, column: 51, scope: !1803)
!9518 = !DILocation(line: 4728, column: 38, scope: !1803)
!9519 = !DILocation(line: 4728, column: 60, scope: !1806)
!9520 = !DILocation(line: 4728, column: 76, scope: !1806)
!9521 = !DILocation(line: 4728, column: 60, scope: !1803)
!9522 = !DILocation(line: 4728, column: 91, scope: !9523)
!9523 = !DILexicalBlockFile(scope: !1806, file: !637, discriminator: 2)
!9524 = !DILocation(line: 4728, column: 96, scope: !9525)
!9525 = !DILexicalBlockFile(scope: !1805, file: !637, discriminator: 4)
!9526 = !DILocation(line: 4728, column: 106, scope: !1805)
!9527 = !DILocation(line: 4728, column: 136, scope: !1805)
!9528 = !DILocation(line: 4728, column: 162, scope: !9529)
!9529 = distinct !DILexicalBlock(scope: !1805, file: !637, line: 4728, column: 159)
!9530 = !DILocation(line: 4728, column: 179, scope: !9529)
!9531 = !DILocation(line: 4728, column: 159, scope: !9529)
!9532 = !DILocation(line: 4728, column: 189, scope: !9529)
!9533 = !DILocation(line: 4728, column: 159, scope: !1805)
!9534 = !DILocation(line: 4728, column: 159, scope: !9535)
!9535 = !DILexicalBlockFile(scope: !1805, file: !637, discriminator: 5)
!9536 = !DILocation(line: 4728, column: 220, scope: !9537)
!9537 = !DILexicalBlockFile(scope: !9529, file: !637, discriminator: 6)
!9538 = !DILocation(line: 4728, column: 238, scope: !9529)
!9539 = !DILocation(line: 4728, column: 248, scope: !9529)
!9540 = !DILocation(line: 4728, column: 273, scope: !9529)
!9541 = !DILocation(line: 4728, column: 204, scope: !9529)
!9542 = !DILocation(line: 4728, column: 292, scope: !9543)
!9543 = !DILexicalBlockFile(scope: !1806, file: !637, discriminator: 7)
!9544 = !DILocation(line: 4728, column: 292, scope: !1805)
!9545 = !DILocation(line: 4728, column: 292, scope: !9546)
!9546 = !DILexicalBlockFile(scope: !1805, file: !637, discriminator: 8)
!9547 = !DILocation(line: 4728, column: 292, scope: !9548)
!9548 = !DILexicalBlockFile(scope: !1805, file: !637, discriminator: 9)
!9549 = !DILocation(line: 4728, column: 305, scope: !9508)
!9550 = !DILocation(line: 4728, column: 305, scope: !1803)
!9551 = !DILocation(line: 4728, column: 305, scope: !9552)
!9552 = !DILexicalBlockFile(scope: !1803, file: !637, discriminator: 11)
!9553 = !DILocation(line: 4729, column: 12, scope: !1779)
!9554 = !DILocation(line: 4729, column: 5, scope: !1779)
!9555 = !DILocation(line: 4730, column: 1, scope: !1779)
!9556 = !DILocation(line: 4744, column: 24, scope: !1816)
!9557 = !DILocation(line: 4744, column: 40, scope: !1816)
!9558 = !DILocation(line: 4746, column: 5, scope: !1816)
!9559 = !DILocation(line: 4746, column: 9, scope: !1816)
!9560 = !DILocation(line: 4746, column: 13, scope: !1816)
!9561 = !DILocation(line: 4748, column: 27, scope: !9562)
!9562 = distinct !DILexicalBlock(scope: !1816, file: !637, line: 4748, column: 9)
!9563 = !DILocation(line: 4748, column: 10, scope: !9562)
!9564 = !DILocation(line: 4748, column: 9, scope: !1816)
!9565 = !DILocation(line: 4749, column: 9, scope: !9566)
!9566 = distinct !DILexicalBlock(scope: !9562, file: !637, line: 4748, column: 50)
!9567 = !DILocation(line: 4751, column: 9, scope: !9568)
!9568 = distinct !DILexicalBlock(scope: !1816, file: !637, line: 4751, column: 9)
!9569 = !DILocation(line: 4751, column: 12, scope: !9568)
!9570 = !DILocation(line: 4751, column: 9, scope: !1816)
!9571 = !DILocation(line: 4752, column: 25, scope: !9572)
!9572 = distinct !DILexicalBlock(scope: !9568, file: !637, line: 4751, column: 17)
!9573 = !DILocation(line: 4752, column: 9, scope: !9572)
!9574 = !DILocation(line: 4754, column: 9, scope: !9572)
!9575 = !DILocation(line: 4756, column: 42, scope: !1823)
!9576 = !DILocation(line: 4756, column: 70, scope: !1823)
!9577 = !DILocation(line: 4756, column: 75, scope: !1823)
!9578 = !DILocation(line: 4756, column: 119, scope: !1823)
!9579 = !DILocation(line: 4756, column: 103, scope: !1823)
!9580 = !DILocation(line: 4756, column: 283, scope: !9581)
!9581 = distinct !DILexicalBlock(scope: !1823, file: !637, line: 4756, column: 128)
!9582 = !DILocation(line: 4756, column: 239, scope: !9581)
!9583 = !{i32 461660}
!9584 = !DILocation(line: 4756, column: 297, scope: !1823)
!9585 = !DILocation(line: 4756, column: 153, scope: !9581)
!9586 = !DILocation(line: 4756, column: 302, scope: !1816)
!9587 = !DILocation(line: 4756, column: 302, scope: !1823)
!9588 = !DILocation(line: 4756, column: 10, scope: !1816)
!9589 = !DILocation(line: 4756, column: 8, scope: !1816)
!9590 = !DILocation(line: 4757, column: 28, scope: !1816)
!9591 = !DILocation(line: 4757, column: 12, scope: !1816)
!9592 = !DILocation(line: 4757, column: 5, scope: !1816)
!9593 = !DILocation(line: 4758, column: 1, scope: !1816)
!9594 = !DILocation(line: 4767, column: 24, scope: !1825)
!9595 = !DILocation(line: 4767, column: 40, scope: !1825)
!9596 = !DILocation(line: 4769, column: 5, scope: !1825)
!9597 = !DILocation(line: 4769, column: 19, scope: !1825)
!9598 = !DILocation(line: 4771, column: 26, scope: !1833)
!9599 = !DILocation(line: 4771, column: 33, scope: !1833)
!9600 = !DILocation(line: 4771, column: 44, scope: !1833)
!9601 = !DILocation(line: 4771, column: 53, scope: !1833)
!9602 = !DILocation(line: 4771, column: 70, scope: !1833)
!9603 = !DILocation(line: 4771, column: 9, scope: !1825)
!9604 = !DILocation(line: 4772, column: 35, scope: !1832)
!9605 = !DILocation(line: 4772, column: 13, scope: !1832)
!9606 = !DILocation(line: 4772, column: 11, scope: !1832)
!9607 = !DILocation(line: 4773, column: 13, scope: !9608)
!9608 = distinct !DILexicalBlock(scope: !1832, file: !637, line: 4773, column: 13)
!9609 = !DILocation(line: 4773, column: 15, scope: !9608)
!9610 = !DILocation(line: 4773, column: 37, scope: !9608)
!9611 = !DILocation(line: 4773, column: 40, scope: !9612)
!9612 = !DILexicalBlockFile(scope: !9608, file: !637, discriminator: 1)
!9613 = !DILocation(line: 4773, column: 13, scope: !1832)
!9614 = !DILocation(line: 4774, column: 13, scope: !9608)
!9615 = !DILocation(line: 4777, column: 13, scope: !1831)
!9616 = !DILocation(line: 4777, column: 27, scope: !1831)
!9617 = !DILocation(line: 4779, column: 17, scope: !1831)
!9618 = !DILocation(line: 4779, column: 19, scope: !1831)
!9619 = !DILocation(line: 4779, column: 15, scope: !1831)
!9620 = !DILocation(line: 4780, column: 17, scope: !9621)
!9621 = distinct !DILexicalBlock(scope: !1831, file: !637, line: 4780, column: 17)
!9622 = !DILocation(line: 4780, column: 21, scope: !9621)
!9623 = !DILocation(line: 4780, column: 19, scope: !9621)
!9624 = !DILocation(line: 4780, column: 17, scope: !1831)
!9625 = !DILocation(line: 4781, column: 37, scope: !9621)
!9626 = !DILocation(line: 4781, column: 24, scope: !9621)
!9627 = !DILocation(line: 4781, column: 17, scope: !9621)
!9628 = !DILocation(line: 4783, column: 17, scope: !1831)
!9629 = !DILocation(line: 4783, column: 15, scope: !1831)
!9630 = !DILocation(line: 4784, column: 9, scope: !1832)
!9631 = !DILocation(line: 4784, column: 9, scope: !9632)
!9632 = !DILexicalBlockFile(scope: !1832, file: !637, discriminator: 1)
!9633 = !DILocation(line: 4786, column: 5, scope: !1832)
!9634 = !DILocation(line: 4788, column: 29, scope: !1833)
!9635 = !DILocation(line: 4790, column: 43, scope: !1833)
!9636 = !DILocation(line: 4790, column: 50, scope: !1833)
!9637 = !DILocation(line: 4790, column: 60, scope: !1833)
!9638 = !DILocation(line: 4788, column: 16, scope: !1833)
!9639 = !DILocation(line: 4788, column: 9, scope: !1833)
!9640 = !DILocation(line: 4791, column: 54, scope: !1835)
!9641 = !DILocation(line: 4791, column: 76, scope: !1835)
!9642 = !DILocation(line: 4791, column: 81, scope: !1835)
!9643 = !DILocation(line: 4791, column: 88, scope: !1835)
!9644 = !DILocation(line: 4791, column: 87, scope: !1835)
!9645 = !DILocation(line: 4791, column: 298, scope: !9646)
!9646 = distinct !DILexicalBlock(scope: !1835, file: !637, line: 4791, column: 96)
!9647 = !DILocation(line: 4791, column: 258, scope: !9646)
!9648 = !{i32 462857}
!9649 = !DILocation(line: 4791, column: 305, scope: !1835)
!9650 = !DILocation(line: 4791, column: 121, scope: !9646)
!9651 = !DILocation(line: 4791, column: 310, scope: !1825)
!9652 = !DILocation(line: 4791, column: 310, scope: !1835)
!9653 = !DILocation(line: 4791, column: 36, scope: !1825)
!9654 = !DILocation(line: 4791, column: 12, scope: !1825)
!9655 = !DILocation(line: 4791, column: 5, scope: !1825)
!9656 = !DILocation(line: 4792, column: 1, scope: !1825)
!9657 = !DILocation(line: 4801, column: 24, scope: !1837)
!9658 = !DILocation(line: 4801, column: 40, scope: !1837)
!9659 = !DILocation(line: 4803, column: 5, scope: !1837)
!9660 = !DILocation(line: 4803, column: 9, scope: !1837)
!9661 = !DILocation(line: 4803, column: 13, scope: !1837)
!9662 = !DILocation(line: 4805, column: 27, scope: !9663)
!9663 = distinct !DILexicalBlock(scope: !1837, file: !637, line: 4805, column: 9)
!9664 = !DILocation(line: 4805, column: 10, scope: !9663)
!9665 = !DILocation(line: 4805, column: 9, scope: !1837)
!9666 = !DILocation(line: 4806, column: 9, scope: !9667)
!9667 = distinct !DILexicalBlock(scope: !9663, file: !637, line: 4805, column: 50)
!9668 = !DILocation(line: 4808, column: 9, scope: !9669)
!9669 = distinct !DILexicalBlock(scope: !1837, file: !637, line: 4808, column: 9)
!9670 = !DILocation(line: 4808, column: 12, scope: !9669)
!9671 = !DILocation(line: 4808, column: 9, scope: !1837)
!9672 = !DILocation(line: 4809, column: 25, scope: !9673)
!9673 = distinct !DILexicalBlock(scope: !9669, file: !637, line: 4808, column: 17)
!9674 = !DILocation(line: 4809, column: 9, scope: !9673)
!9675 = !DILocation(line: 4811, column: 9, scope: !9673)
!9676 = !DILocation(line: 4813, column: 42, scope: !1844)
!9677 = !DILocation(line: 4813, column: 70, scope: !1844)
!9678 = !DILocation(line: 4813, column: 75, scope: !1844)
!9679 = !DILocation(line: 4813, column: 119, scope: !1844)
!9680 = !DILocation(line: 4813, column: 103, scope: !1844)
!9681 = !DILocation(line: 4813, column: 283, scope: !9682)
!9682 = distinct !DILexicalBlock(scope: !1844, file: !637, line: 4813, column: 128)
!9683 = !DILocation(line: 4813, column: 239, scope: !9682)
!9684 = !{i32 463602}
!9685 = !DILocation(line: 4813, column: 297, scope: !1844)
!9686 = !DILocation(line: 4813, column: 153, scope: !9682)
!9687 = !DILocation(line: 4813, column: 302, scope: !1837)
!9688 = !DILocation(line: 4813, column: 302, scope: !1844)
!9689 = !DILocation(line: 4813, column: 10, scope: !1837)
!9690 = !DILocation(line: 4813, column: 8, scope: !1837)
!9691 = !DILocation(line: 4814, column: 28, scope: !1837)
!9692 = !DILocation(line: 4814, column: 12, scope: !1837)
!9693 = !DILocation(line: 4814, column: 5, scope: !1837)
!9694 = !DILocation(line: 4815, column: 1, scope: !1837)
!9695 = !DILocation(line: 4824, column: 24, scope: !1846)
!9696 = !DILocation(line: 4824, column: 40, scope: !1846)
!9697 = !DILocation(line: 4826, column: 5, scope: !1846)
!9698 = !DILocation(line: 4826, column: 19, scope: !1846)
!9699 = !DILocation(line: 4828, column: 26, scope: !1854)
!9700 = !DILocation(line: 4828, column: 33, scope: !1854)
!9701 = !DILocation(line: 4828, column: 44, scope: !1854)
!9702 = !DILocation(line: 4828, column: 53, scope: !1854)
!9703 = !DILocation(line: 4828, column: 70, scope: !1854)
!9704 = !DILocation(line: 4828, column: 9, scope: !1846)
!9705 = !DILocation(line: 4829, column: 35, scope: !1853)
!9706 = !DILocation(line: 4829, column: 13, scope: !1853)
!9707 = !DILocation(line: 4829, column: 11, scope: !1853)
!9708 = !DILocation(line: 4830, column: 13, scope: !9709)
!9709 = distinct !DILexicalBlock(scope: !1853, file: !637, line: 4830, column: 13)
!9710 = !DILocation(line: 4830, column: 15, scope: !9709)
!9711 = !DILocation(line: 4830, column: 37, scope: !9709)
!9712 = !DILocation(line: 4830, column: 40, scope: !9713)
!9713 = !DILexicalBlockFile(scope: !9709, file: !637, discriminator: 1)
!9714 = !DILocation(line: 4830, column: 13, scope: !1853)
!9715 = !DILocation(line: 4831, column: 13, scope: !9709)
!9716 = !DILocation(line: 4834, column: 13, scope: !1852)
!9717 = !DILocation(line: 4834, column: 27, scope: !1852)
!9718 = !DILocation(line: 4836, column: 17, scope: !1852)
!9719 = !DILocation(line: 4836, column: 19, scope: !1852)
!9720 = !DILocation(line: 4836, column: 15, scope: !1852)
!9721 = !DILocation(line: 4837, column: 17, scope: !9722)
!9722 = distinct !DILexicalBlock(scope: !1852, file: !637, line: 4837, column: 17)
!9723 = !DILocation(line: 4837, column: 21, scope: !9722)
!9724 = !DILocation(line: 4837, column: 19, scope: !9722)
!9725 = !DILocation(line: 4837, column: 17, scope: !1852)
!9726 = !DILocation(line: 4838, column: 37, scope: !9722)
!9727 = !DILocation(line: 4838, column: 24, scope: !9722)
!9728 = !DILocation(line: 4838, column: 17, scope: !9722)
!9729 = !DILocation(line: 4840, column: 17, scope: !1852)
!9730 = !DILocation(line: 4840, column: 15, scope: !1852)
!9731 = !DILocation(line: 4841, column: 9, scope: !1853)
!9732 = !DILocation(line: 4841, column: 9, scope: !9733)
!9733 = !DILexicalBlockFile(scope: !1853, file: !637, discriminator: 1)
!9734 = !DILocation(line: 4843, column: 5, scope: !1853)
!9735 = !DILocation(line: 4845, column: 29, scope: !1854)
!9736 = !DILocation(line: 4847, column: 43, scope: !1854)
!9737 = !DILocation(line: 4847, column: 50, scope: !1854)
!9738 = !DILocation(line: 4847, column: 60, scope: !1854)
!9739 = !DILocation(line: 4845, column: 16, scope: !1854)
!9740 = !DILocation(line: 4845, column: 9, scope: !1854)
!9741 = !DILocation(line: 4848, column: 54, scope: !1856)
!9742 = !DILocation(line: 4848, column: 76, scope: !1856)
!9743 = !DILocation(line: 4848, column: 81, scope: !1856)
!9744 = !DILocation(line: 4848, column: 103, scope: !1856)
!9745 = !DILocation(line: 4848, column: 87, scope: !1856)
!9746 = !DILocation(line: 4848, column: 313, scope: !9747)
!9747 = distinct !DILexicalBlock(scope: !1856, file: !637, line: 4848, column: 111)
!9748 = !DILocation(line: 4848, column: 273, scope: !9747)
!9749 = !{i32 464814}
!9750 = !DILocation(line: 4848, column: 320, scope: !1856)
!9751 = !DILocation(line: 4848, column: 136, scope: !9747)
!9752 = !DILocation(line: 4848, column: 325, scope: !1846)
!9753 = !DILocation(line: 4848, column: 325, scope: !1856)
!9754 = !DILocation(line: 4848, column: 36, scope: !1846)
!9755 = !DILocation(line: 4848, column: 12, scope: !1846)
!9756 = !DILocation(line: 4848, column: 5, scope: !1846)
!9757 = !DILocation(line: 4849, column: 1, scope: !1846)
!9758 = !DILocation(line: 4865, column: 28, scope: !1858)
!9759 = !DILocation(line: 4865, column: 44, scope: !1858)
!9760 = !DILocation(line: 4868, column: 5, scope: !1858)
!9761 = !DILocation(line: 4868, column: 20, scope: !1858)
!9762 = !DILocation(line: 4878, column: 5, scope: !1858)
!9763 = !DILocation(line: 4878, column: 11, scope: !1858)
!9764 = !DILocation(line: 4880, column: 27, scope: !9765)
!9765 = distinct !DILexicalBlock(scope: !1858, file: !637, line: 4880, column: 9)
!9766 = !DILocation(line: 4880, column: 10, scope: !9765)
!9767 = !DILocation(line: 4880, column: 9, scope: !1858)
!9768 = !DILocation(line: 4881, column: 9, scope: !9765)
!9769 = !DILocation(line: 4889, column: 19, scope: !9770)
!9770 = distinct !DILexicalBlock(scope: !1858, file: !637, line: 4889, column: 9)
!9771 = !DILocation(line: 4889, column: 9, scope: !9770)
!9772 = !DILocation(line: 4889, column: 9, scope: !1858)
!9773 = !DILocation(line: 4890, column: 42, scope: !9770)
!9774 = !DILocation(line: 4890, column: 16, scope: !9770)
!9775 = !DILocation(line: 4890, column: 9, scope: !9770)
!9776 = !DILocation(line: 4893, column: 21, scope: !1858)
!9777 = !DILocation(line: 4893, column: 5, scope: !1858)
!9778 = !DILocation(line: 4895, column: 5, scope: !1858)
!9779 = !DILocation(line: 4927, column: 1, scope: !1858)
!9780 = !DILocation(line: 4935, column: 28, scope: !1864)
!9781 = !DILocation(line: 4935, column: 44, scope: !1864)
!9782 = !DILocation(line: 4937, column: 5, scope: !1864)
!9783 = !DILocation(line: 4937, column: 11, scope: !1864)
!9784 = !DILocation(line: 4938, column: 5, scope: !1864)
!9785 = !DILocation(line: 4938, column: 9, scope: !1864)
!9786 = !DILocation(line: 4939, column: 5, scope: !1864)
!9787 = !DILocation(line: 4939, column: 20, scope: !1864)
!9788 = !DILocation(line: 4941, column: 27, scope: !9789)
!9789 = distinct !DILexicalBlock(scope: !1864, file: !637, line: 4941, column: 9)
!9790 = !DILocation(line: 4941, column: 10, scope: !9789)
!9791 = !DILocation(line: 4941, column: 9, scope: !1864)
!9792 = !DILocation(line: 4942, column: 9, scope: !9793)
!9793 = distinct !DILexicalBlock(scope: !9789, file: !637, line: 4941, column: 74)
!9794 = !DILocation(line: 4945, column: 9, scope: !9795)
!9795 = distinct !DILexicalBlock(scope: !1864, file: !637, line: 4945, column: 9)
!9796 = !DILocation(line: 4945, column: 18, scope: !9795)
!9797 = !DILocation(line: 4945, column: 9, scope: !1864)
!9798 = !DILocation(line: 4946, column: 25, scope: !9799)
!9799 = distinct !DILexicalBlock(scope: !9795, file: !637, line: 4945, column: 42)
!9800 = !DILocation(line: 4946, column: 9, scope: !9799)
!9801 = !DILocation(line: 4948, column: 9, scope: !9799)
!9802 = !DILocation(line: 4951, column: 5, scope: !1864)
!9803 = !DILocation(line: 4951, column: 26, scope: !1864)
!9804 = !DILocation(line: 4951, column: 38, scope: !1864)
!9805 = !DILocation(line: 4953, column: 33, scope: !1864)
!9806 = !DILocation(line: 4953, column: 12, scope: !1864)
!9807 = !DILocation(line: 4953, column: 5, scope: !1864)
!9808 = !DILocation(line: 4954, column: 1, scope: !1864)
!9809 = !DILocation(line: 4969, column: 28, scope: !1871)
!9810 = !DILocation(line: 4969, column: 44, scope: !1871)
!9811 = !DILocation(line: 4971, column: 5, scope: !1871)
!9812 = !DILocation(line: 4971, column: 9, scope: !1871)
!9813 = !DILocation(line: 4972, column: 5, scope: !1871)
!9814 = !DILocation(line: 4972, column: 11, scope: !1871)
!9815 = !DILocation(line: 4973, column: 5, scope: !1871)
!9816 = !DILocation(line: 4973, column: 9, scope: !1871)
!9817 = !DILocation(line: 4975, column: 5, scope: !1871)
!9818 = !DILocation(line: 4975, column: 10, scope: !1871)
!9819 = !DILocation(line: 4979, column: 27, scope: !9820)
!9820 = distinct !DILexicalBlock(scope: !1871, file: !637, line: 4979, column: 9)
!9821 = !DILocation(line: 4979, column: 10, scope: !9820)
!9822 = !DILocation(line: 4979, column: 9, scope: !1871)
!9823 = !DILocation(line: 4980, column: 9, scope: !9824)
!9824 = distinct !DILexicalBlock(scope: !9820, file: !637, line: 4979, column: 60)
!9825 = !DILocation(line: 4991, column: 24, scope: !1871)
!9826 = !DILocation(line: 4991, column: 28, scope: !1871)
!9827 = !DILocation(line: 4991, column: 32, scope: !1871)
!9828 = !DILocation(line: 4991, column: 14, scope: !1871)
!9829 = !DILocation(line: 4991, column: 12, scope: !1871)
!9830 = !DILocation(line: 4992, column: 9, scope: !9831)
!9831 = distinct !DILexicalBlock(scope: !1871, file: !637, line: 4992, column: 9)
!9832 = !DILocation(line: 4992, column: 16, scope: !9831)
!9833 = !DILocation(line: 4992, column: 9, scope: !1871)
!9834 = !DILocation(line: 4993, column: 28, scope: !9835)
!9835 = distinct !DILexicalBlock(scope: !9831, file: !637, line: 4992, column: 21)
!9836 = !DILocation(line: 4993, column: 9, scope: !9835)
!9837 = !DILocation(line: 4994, column: 9, scope: !9835)
!9838 = !DILocation(line: 4995, column: 16, scope: !9839)
!9839 = distinct !DILexicalBlock(scope: !9831, file: !637, line: 4995, column: 16)
!9840 = !DILocation(line: 4995, column: 23, scope: !9839)
!9841 = !DILocation(line: 4995, column: 16, scope: !9831)
!9842 = !DILocation(line: 4996, column: 25, scope: !9843)
!9843 = distinct !DILexicalBlock(scope: !9839, file: !637, line: 4995, column: 29)
!9844 = !DILocation(line: 4996, column: 9, scope: !9843)
!9845 = !DILocation(line: 4998, column: 9, scope: !9843)
!9846 = !DILocation(line: 4999, column: 16, scope: !9847)
!9847 = distinct !DILexicalBlock(scope: !9839, file: !637, line: 4999, column: 16)
!9848 = !DILocation(line: 4999, column: 19, scope: !9847)
!9849 = !DILocation(line: 4999, column: 16, scope: !9839)
!9850 = !DILocation(line: 5000, column: 42, scope: !9851)
!9851 = distinct !DILexicalBlock(scope: !9847, file: !637, line: 4999, column: 25)
!9852 = !DILocation(line: 5000, column: 16, scope: !9851)
!9853 = !DILocation(line: 5000, column: 9, scope: !9851)
!9854 = !DILocation(line: 5003, column: 16, scope: !9855)
!9855 = distinct !DILexicalBlock(scope: !9847, file: !637, line: 5003, column: 16)
!9856 = !DILocation(line: 5003, column: 19, scope: !9855)
!9857 = !DILocation(line: 5003, column: 16, scope: !9847)
!9858 = !DILocation(line: 5004, column: 42, scope: !9859)
!9859 = distinct !DILexicalBlock(scope: !9855, file: !637, line: 5003, column: 26)
!9860 = !DILocation(line: 5004, column: 16, scope: !9859)
!9861 = !DILocation(line: 5004, column: 9, scope: !9859)
!9862 = !DILocation(line: 5008, column: 25, scope: !9863)
!9863 = distinct !DILexicalBlock(scope: !9855, file: !637, line: 5007, column: 12)
!9864 = !DILocation(line: 5008, column: 9, scope: !9863)
!9865 = !DILocation(line: 5009, column: 9, scope: !9863)
!9866 = !DILocation(line: 5011, column: 1, scope: !1871)
!9867 = !DILocation(line: 5059, column: 28, scope: !1879)
!9868 = !DILocation(line: 5059, column: 44, scope: !1879)
!9869 = !DILocation(line: 5061, column: 5, scope: !1879)
!9870 = !DILocation(line: 5061, column: 9, scope: !1879)
!9871 = !DILocation(line: 5062, column: 5, scope: !1879)
!9872 = !DILocation(line: 5062, column: 11, scope: !1879)
!9873 = !DILocation(line: 5063, column: 5, scope: !1879)
!9874 = !DILocation(line: 5063, column: 9, scope: !1879)
!9875 = !DILocation(line: 5064, column: 5, scope: !1879)
!9876 = !DILocation(line: 5064, column: 17, scope: !1879)
!9877 = !DILocation(line: 5066, column: 5, scope: !1879)
!9878 = !DILocation(line: 5066, column: 10, scope: !1879)
!9879 = !DILocation(line: 5072, column: 22, scope: !1879)
!9880 = !DILocation(line: 5072, column: 5, scope: !1879)
!9881 = !DILocation(line: 5074, column: 27, scope: !9882)
!9882 = distinct !DILexicalBlock(scope: !1879, file: !637, line: 5074, column: 9)
!9883 = !DILocation(line: 5074, column: 10, scope: !9882)
!9884 = !DILocation(line: 5074, column: 9, scope: !1879)
!9885 = !DILocation(line: 5075, column: 9, scope: !9886)
!9886 = distinct !DILexicalBlock(scope: !9882, file: !637, line: 5074, column: 71)
!9887 = !DILocation(line: 5078, column: 9, scope: !9888)
!9888 = distinct !DILexicalBlock(scope: !1879, file: !637, line: 5078, column: 9)
!9889 = !DILocation(line: 5078, column: 12, scope: !9888)
!9890 = !DILocation(line: 5078, column: 9, scope: !1879)
!9891 = !DILocation(line: 5079, column: 13, scope: !9892)
!9892 = distinct !DILexicalBlock(scope: !9893, file: !637, line: 5079, column: 13)
!9893 = distinct !DILexicalBlock(scope: !9888, file: !637, line: 5078, column: 18)
!9894 = !DILocation(line: 5079, column: 17, scope: !9892)
!9895 = !DILocation(line: 5079, column: 13, scope: !9893)
!9896 = !DILocation(line: 5080, column: 29, scope: !9897)
!9897 = distinct !DILexicalBlock(scope: !9892, file: !637, line: 5079, column: 44)
!9898 = !DILocation(line: 5080, column: 13, scope: !9897)
!9899 = !DILocation(line: 5082, column: 13, scope: !9897)
!9900 = !DILocation(line: 5085, column: 5, scope: !9893)
!9901 = !DILocation(line: 5085, column: 16, scope: !9902)
!9902 = distinct !DILexicalBlock(scope: !9888, file: !637, line: 5085, column: 16)
!9903 = !DILocation(line: 5085, column: 19, scope: !9902)
!9904 = !DILocation(line: 5085, column: 16, scope: !9888)
!9905 = !DILocation(line: 5086, column: 13, scope: !9906)
!9906 = distinct !DILexicalBlock(scope: !9907, file: !637, line: 5086, column: 13)
!9907 = distinct !DILexicalBlock(scope: !9902, file: !637, line: 5085, column: 26)
!9908 = !DILocation(line: 5086, column: 17, scope: !9906)
!9909 = !DILocation(line: 5086, column: 13, scope: !9907)
!9910 = !DILocation(line: 5087, column: 29, scope: !9911)
!9911 = distinct !DILexicalBlock(scope: !9906, file: !637, line: 5086, column: 45)
!9912 = !DILocation(line: 5087, column: 13, scope: !9911)
!9913 = !DILocation(line: 5089, column: 13, scope: !9911)
!9914 = !DILocation(line: 5092, column: 5, scope: !9907)
!9915 = !DILocation(line: 5093, column: 22, scope: !9916)
!9916 = distinct !DILexicalBlock(scope: !9902, file: !637, line: 5092, column: 12)
!9917 = !DILocation(line: 5094, column: 42, scope: !9916)
!9918 = !DILocation(line: 5093, column: 9, scope: !9916)
!9919 = !DILocation(line: 5095, column: 9, scope: !9916)
!9920 = !DILocation(line: 5098, column: 24, scope: !1879)
!9921 = !DILocation(line: 5098, column: 28, scope: !1879)
!9922 = !DILocation(line: 5098, column: 36, scope: !1879)
!9923 = !DILocation(line: 5098, column: 14, scope: !1879)
!9924 = !DILocation(line: 5098, column: 12, scope: !1879)
!9925 = !DILocation(line: 5099, column: 10, scope: !9926)
!9926 = distinct !DILexicalBlock(scope: !1879, file: !637, line: 5099, column: 9)
!9927 = !DILocation(line: 5099, column: 9, scope: !1879)
!9928 = !DILocation(line: 5100, column: 28, scope: !9929)
!9929 = distinct !DILexicalBlock(scope: !9926, file: !637, line: 5099, column: 18)
!9930 = !DILocation(line: 5100, column: 9, scope: !9929)
!9931 = !DILocation(line: 5101, column: 9, scope: !9929)
!9932 = !DILocation(line: 5103, column: 37, scope: !9933)
!9933 = distinct !DILexicalBlock(scope: !9926, file: !637, line: 5102, column: 12)
!9934 = !DILocation(line: 5103, column: 16, scope: !9933)
!9935 = !DILocation(line: 5103, column: 9, scope: !9933)
!9936 = !DILocation(line: 5109, column: 1, scope: !1879)
!9937 = !DILocation(line: 5181, column: 30, scope: !1891)
!9938 = !DILocation(line: 5181, column: 46, scope: !1891)
!9939 = !DILocation(line: 5181, column: 62, scope: !1891)
!9940 = !DILocation(line: 5185, column: 5, scope: !1891)
!9941 = !DILocation(line: 5185, column: 21, scope: !1891)
!9942 = !DILocation(line: 5185, column: 29, scope: !1891)
!9943 = !DILocation(line: 5186, column: 5, scope: !1891)
!9944 = !DILocation(line: 5186, column: 22, scope: !1891)
!9945 = !DILocation(line: 5187, column: 5, scope: !1891)
!9946 = !DILocation(line: 5187, column: 15, scope: !1891)
!9947 = !DILocation(line: 5188, column: 5, scope: !1891)
!9948 = !DILocation(line: 5188, column: 15, scope: !1891)
!9949 = !DILocation(line: 5189, column: 5, scope: !1891)
!9950 = !DILocation(line: 5189, column: 10, scope: !1891)
!9951 = !DILocation(line: 5190, column: 5, scope: !1891)
!9952 = !DILocation(line: 5190, column: 11, scope: !1891)
!9953 = !DILocation(line: 5190, column: 18, scope: !1891)
!9954 = !DILocation(line: 5191, column: 5, scope: !1891)
!9955 = !DILocation(line: 5191, column: 9, scope: !1891)
!9956 = !DILocation(line: 5191, column: 17, scope: !1891)
!9957 = !DILocation(line: 5191, column: 27, scope: !1891)
!9958 = !DILocation(line: 5191, column: 37, scope: !1891)
!9959 = !DILocation(line: 5192, column: 5, scope: !1891)
!9960 = !DILocation(line: 5192, column: 9, scope: !1891)
!9961 = !DILocation(line: 5193, column: 5, scope: !1891)
!9962 = !DILocation(line: 5193, column: 15, scope: !1891)
!9963 = !DILocation(line: 5194, column: 5, scope: !1891)
!9964 = !DILocation(line: 5194, column: 15, scope: !1891)
!9965 = !DILocation(line: 5196, column: 33, scope: !1891)
!9966 = !DILocation(line: 5196, column: 25, scope: !1891)
!9967 = !DILocation(line: 5196, column: 14, scope: !1891)
!9968 = !DILocation(line: 5197, column: 12, scope: !1891)
!9969 = !DILocation(line: 5198, column: 38, scope: !9970)
!9970 = distinct !DILexicalBlock(scope: !1891, file: !637, line: 5198, column: 9)
!9971 = !DILocation(line: 5198, column: 44, scope: !9970)
!9972 = !DILocation(line: 5198, column: 10, scope: !9970)
!9973 = !DILocation(line: 5198, column: 9, scope: !1891)
!9974 = !DILocation(line: 5201, column: 9, scope: !9975)
!9975 = distinct !DILexicalBlock(scope: !9970, file: !637, line: 5200, column: 47)
!9976 = !DILocation(line: 5203, column: 9, scope: !9977)
!9977 = distinct !DILexicalBlock(scope: !1891, file: !637, line: 5203, column: 9)
!9978 = !DILocation(line: 5203, column: 14, scope: !9977)
!9979 = !DILocation(line: 5203, column: 9, scope: !1891)
!9980 = !DILocation(line: 5204, column: 14, scope: !9981)
!9981 = distinct !DILexicalBlock(scope: !9977, file: !637, line: 5203, column: 36)
!9982 = !DILocation(line: 5205, column: 5, scope: !9981)
!9983 = !DILocation(line: 5205, column: 33, scope: !9984)
!9984 = distinct !DILexicalBlock(scope: !9977, file: !637, line: 5205, column: 16)
!9985 = !DILocation(line: 5205, column: 41, scope: !9984)
!9986 = !DILocation(line: 5205, column: 52, scope: !9984)
!9987 = !DILocation(line: 5205, column: 61, scope: !9984)
!9988 = !DILocation(line: 5205, column: 78, scope: !9984)
!9989 = !DILocation(line: 5205, column: 16, scope: !9977)
!9990 = !DILocation(line: 5208, column: 39, scope: !9991)
!9991 = distinct !DILexicalBlock(scope: !9984, file: !637, line: 5205, column: 85)
!9992 = !DILocation(line: 5208, column: 16, scope: !9991)
!9993 = !DILocation(line: 5208, column: 14, scope: !9991)
!9994 = !DILocation(line: 5209, column: 14, scope: !9995)
!9995 = distinct !DILexicalBlock(scope: !9991, file: !637, line: 5209, column: 13)
!9996 = !DILocation(line: 5209, column: 13, scope: !9991)
!9997 = !DILocation(line: 5210, column: 13, scope: !9995)
!9998 = !DILocation(line: 5212, column: 51, scope: !9991)
!9999 = !DILocation(line: 5212, column: 33, scope: !9991)
!10000 = !DILocation(line: 5212, column: 59, scope: !9991)
!10001 = !DILocation(line: 5212, column: 31, scope: !9991)
!10002 = !DILocation(line: 5212, column: 14, scope: !9991)
!10003 = !DILocation(line: 5213, column: 5, scope: !9991)
!10004 = !DILocation(line: 5213, column: 33, scope: !10005)
!10005 = distinct !DILexicalBlock(scope: !9984, file: !637, line: 5213, column: 16)
!10006 = !DILocation(line: 5213, column: 41, scope: !10005)
!10007 = !DILocation(line: 5213, column: 52, scope: !10005)
!10008 = !DILocation(line: 5213, column: 61, scope: !10005)
!10009 = !DILocation(line: 5213, column: 78, scope: !10005)
!10010 = !DILocation(line: 5213, column: 16, scope: !9984)
!10011 = !DILocation(line: 5214, column: 33, scope: !10012)
!10012 = distinct !DILexicalBlock(scope: !10005, file: !637, line: 5213, column: 85)
!10013 = !DILocation(line: 5214, column: 16, scope: !10012)
!10014 = !DILocation(line: 5214, column: 14, scope: !10012)
!10015 = !DILocation(line: 5215, column: 5, scope: !10012)
!10016 = !DILocation(line: 5216, column: 25, scope: !10017)
!10017 = distinct !DILexicalBlock(scope: !10005, file: !637, line: 5215, column: 12)
!10018 = !DILocation(line: 5216, column: 9, scope: !10017)
!10019 = !DILocation(line: 5218, column: 9, scope: !10017)
!10020 = !DILocation(line: 5220, column: 24, scope: !1916)
!10021 = !DILocation(line: 5220, column: 32, scope: !1916)
!10022 = !DILocation(line: 5220, column: 41, scope: !1916)
!10023 = !DILocation(line: 5220, column: 9, scope: !1891)
!10024 = !DILocation(line: 5221, column: 9, scope: !1915)
!10025 = !DILocation(line: 5221, column: 14, scope: !1915)
!10026 = !DILocation(line: 5221, column: 36, scope: !1915)
!10027 = !DILocation(line: 5221, column: 22, scope: !1915)
!10028 = !DILocation(line: 5222, column: 13, scope: !10029)
!10029 = distinct !DILexicalBlock(scope: !1915, file: !637, line: 5222, column: 13)
!10030 = !DILocation(line: 5222, column: 19, scope: !10029)
!10031 = !DILocation(line: 5222, column: 25, scope: !10029)
!10032 = !DILocation(line: 5222, column: 28, scope: !10033)
!10033 = !DILexicalBlockFile(scope: !10029, file: !637, discriminator: 1)
!10034 = !DILocation(line: 5222, column: 13, scope: !1915)
!10035 = !DILocation(line: 5223, column: 13, scope: !10029)
!10036 = !DILocation(line: 5224, column: 23, scope: !1915)
!10037 = !DILocation(line: 5224, column: 50, scope: !1915)
!10038 = !DILocation(line: 5224, column: 9, scope: !1915)
!10039 = !DILocation(line: 5225, column: 16, scope: !1915)
!10040 = !DILocation(line: 5225, column: 14, scope: !1915)
!10041 = !DILocation(line: 5226, column: 5, scope: !1916)
!10042 = !DILocation(line: 5226, column: 5, scope: !10043)
!10043 = !DILexicalBlockFile(scope: !1916, file: !637, discriminator: 1)
!10044 = !DILocation(line: 5226, column: 5, scope: !1915)
!10045 = !DILocation(line: 5226, column: 33, scope: !10046)
!10046 = distinct !DILexicalBlock(scope: !1916, file: !637, line: 5226, column: 16)
!10047 = !DILocation(line: 5226, column: 41, scope: !10046)
!10048 = !DILocation(line: 5226, column: 52, scope: !10046)
!10049 = !DILocation(line: 5226, column: 61, scope: !10046)
!10050 = !DILocation(line: 5226, column: 78, scope: !10046)
!10051 = !DILocation(line: 5226, column: 16, scope: !1916)
!10052 = !DILocation(line: 5227, column: 33, scope: !10053)
!10053 = distinct !DILexicalBlock(scope: !10046, file: !637, line: 5226, column: 85)
!10054 = !DILocation(line: 5227, column: 16, scope: !10053)
!10055 = !DILocation(line: 5227, column: 14, scope: !10053)
!10056 = !DILocation(line: 5228, column: 13, scope: !10057)
!10057 = distinct !DILexicalBlock(scope: !10053, file: !637, line: 5228, column: 13)
!10058 = !DILocation(line: 5228, column: 18, scope: !10057)
!10059 = !DILocation(line: 5228, column: 13, scope: !10053)
!10060 = !DILocation(line: 5229, column: 13, scope: !10057)
!10061 = !DILocation(line: 5230, column: 5, scope: !10053)
!10062 = !DILocation(line: 5230, column: 33, scope: !10063)
!10063 = distinct !DILexicalBlock(scope: !10046, file: !637, line: 5230, column: 16)
!10064 = !DILocation(line: 5230, column: 41, scope: !10063)
!10065 = !DILocation(line: 5230, column: 52, scope: !10063)
!10066 = !DILocation(line: 5230, column: 61, scope: !10063)
!10067 = !DILocation(line: 5230, column: 78, scope: !10063)
!10068 = !DILocation(line: 5230, column: 16, scope: !10046)
!10069 = !DILocation(line: 5231, column: 51, scope: !10070)
!10070 = distinct !DILexicalBlock(scope: !10063, file: !637, line: 5230, column: 85)
!10071 = !DILocation(line: 5231, column: 33, scope: !10070)
!10072 = !DILocation(line: 5231, column: 59, scope: !10070)
!10073 = !DILocation(line: 5231, column: 31, scope: !10070)
!10074 = !DILocation(line: 5231, column: 14, scope: !10070)
!10075 = !DILocation(line: 5232, column: 5, scope: !10070)
!10076 = !DILocation(line: 5232, column: 16, scope: !10077)
!10077 = distinct !DILexicalBlock(scope: !10063, file: !637, line: 5232, column: 16)
!10078 = !DILocation(line: 5232, column: 21, scope: !10077)
!10079 = !DILocation(line: 5232, column: 16, scope: !10063)
!10080 = !DILocation(line: 5233, column: 14, scope: !10081)
!10081 = distinct !DILexicalBlock(scope: !10077, file: !637, line: 5232, column: 43)
!10082 = !DILocation(line: 5234, column: 5, scope: !10081)
!10083 = !DILocation(line: 5235, column: 25, scope: !10084)
!10084 = distinct !DILexicalBlock(scope: !10077, file: !637, line: 5234, column: 12)
!10085 = !DILocation(line: 5235, column: 9, scope: !10084)
!10086 = !DILocation(line: 5236, column: 9, scope: !10084)
!10087 = !DILocation(line: 5247, column: 5, scope: !1891)
!10088 = !DILocation(line: 5248, column: 23, scope: !1891)
!10089 = !DILocation(line: 5248, column: 11, scope: !1891)
!10090 = !DILocation(line: 5248, column: 21, scope: !1891)
!10091 = !DILocation(line: 5249, column: 25, scope: !1891)
!10092 = !DILocation(line: 5249, column: 11, scope: !1891)
!10093 = !DILocation(line: 5249, column: 23, scope: !1891)
!10094 = !DILocation(line: 5250, column: 25, scope: !1891)
!10095 = !DILocation(line: 5250, column: 11, scope: !1891)
!10096 = !DILocation(line: 5250, column: 23, scope: !1891)
!10097 = !{!7248, !2950, i64 12}
!10098 = !DILocation(line: 5251, column: 22, scope: !1891)
!10099 = !DILocation(line: 5251, column: 11, scope: !1891)
!10100 = !DILocation(line: 5251, column: 20, scope: !1891)
!10101 = !DILocation(line: 5252, column: 7, scope: !1918)
!10102 = !DILocation(line: 5252, column: 22, scope: !1918)
!10103 = !DILocation(line: 5252, column: 37, scope: !1918)
!10104 = !DILocation(line: 5252, column: 35, scope: !1918)
!10105 = !DILocation(line: 5254, column: 25, scope: !1918)
!10106 = !DILocation(line: 5254, column: 31, scope: !1918)
!10107 = !DILocation(line: 5254, column: 13, scope: !1918)
!10108 = !DILocation(line: 5254, column: 11, scope: !1918)
!10109 = !DILocation(line: 5255, column: 26, scope: !1918)
!10110 = !DILocation(line: 5255, column: 5, scope: !1918)
!10111 = !DILocation(line: 5255, column: 34, scope: !1891)
!10112 = !DILocation(line: 5257, column: 9, scope: !10113)
!10113 = distinct !DILexicalBlock(scope: !1891, file: !637, line: 5257, column: 9)
!10114 = !DILocation(line: 5257, column: 9, scope: !1891)
!10115 = !DILocation(line: 5258, column: 22, scope: !10116)
!10116 = distinct !DILexicalBlock(scope: !10113, file: !637, line: 5257, column: 16)
!10117 = !DILocation(line: 5258, column: 9, scope: !10116)
!10118 = !DILocation(line: 5259, column: 9, scope: !10116)
!10119 = !DILocation(line: 5262, column: 16, scope: !10120)
!10120 = distinct !DILexicalBlock(scope: !1891, file: !637, line: 5262, column: 9)
!10121 = !DILocation(line: 5262, column: 14, scope: !10120)
!10122 = !DILocation(line: 5262, column: 31, scope: !10120)
!10123 = !DILocation(line: 5262, column: 9, scope: !1891)
!10124 = !DILocation(line: 5263, column: 9, scope: !10120)
!10125 = !DILocation(line: 5264, column: 16, scope: !1922)
!10126 = !DILocation(line: 5264, column: 14, scope: !1922)
!10127 = !DILocation(line: 5264, column: 10, scope: !1922)
!10128 = !DILocation(line: 5264, column: 22, scope: !10129)
!10129 = !DILexicalBlockFile(scope: !10130, file: !637, discriminator: 2)
!10130 = !DILexicalBlockFile(scope: !1921, file: !637, discriminator: 1)
!10131 = !DILocation(line: 5264, column: 5, scope: !1922)
!10132 = !DILocation(line: 5265, column: 9, scope: !1920)
!10133 = !DILocation(line: 5265, column: 19, scope: !1920)
!10134 = !DILocation(line: 5266, column: 9, scope: !1920)
!10135 = !DILocation(line: 5266, column: 19, scope: !1920)
!10136 = !DILocation(line: 5267, column: 30, scope: !1920)
!10137 = !DILocation(line: 5267, column: 35, scope: !1920)
!10138 = !DILocation(line: 5267, column: 44, scope: !1920)
!10139 = !DILocation(line: 5267, column: 49, scope: !1920)
!10140 = !DILocation(line: 5267, column: 61, scope: !1920)
!10141 = !DILocation(line: 5267, column: 13, scope: !1920)
!10142 = !DILocation(line: 5268, column: 13, scope: !10143)
!10143 = distinct !DILexicalBlock(scope: !1920, file: !637, line: 5268, column: 13)
!10144 = !DILocation(line: 5268, column: 18, scope: !10143)
!10145 = !DILocation(line: 5268, column: 13, scope: !1920)
!10146 = !DILocation(line: 5269, column: 13, scope: !10143)
!10147 = !DILocation(line: 5270, column: 41, scope: !1920)
!10148 = !DILocation(line: 5270, column: 46, scope: !1920)
!10149 = !DILocation(line: 5271, column: 13, scope: !1920)
!10150 = !DILocation(line: 5271, column: 18, scope: !1920)
!10151 = !DILocation(line: 5271, column: 31, scope: !1920)
!10152 = !DILocation(line: 5271, column: 36, scope: !1920)
!10153 = !DILocation(line: 5272, column: 13, scope: !1920)
!10154 = !DILocation(line: 5272, column: 18, scope: !1920)
!10155 = !{!7248, !2323, i64 32}
!10156 = !DILocation(line: 5272, column: 33, scope: !10157)
!10157 = !DILexicalBlockFile(scope: !1920, file: !637, discriminator: 1)
!10158 = !DILocation(line: 5272, column: 38, scope: !1920)
!10159 = !DILocation(line: 5272, column: 13, scope: !10160)
!10160 = !DILexicalBlockFile(scope: !1920, file: !637, discriminator: 2)
!10161 = !DILocation(line: 5273, column: 13, scope: !1920)
!10162 = !DILocation(line: 5270, column: 18, scope: !1920)
!10163 = !DILocation(line: 5270, column: 16, scope: !1920)
!10164 = !DILocation(line: 5274, column: 9, scope: !1920)
!10165 = !DILocation(line: 5274, column: 14, scope: !10166)
!10166 = !DILexicalBlockFile(scope: !1925, file: !637, discriminator: 1)
!10167 = !DILocation(line: 5274, column: 24, scope: !1925)
!10168 = !DILocation(line: 5274, column: 54, scope: !1925)
!10169 = !DILocation(line: 5274, column: 69, scope: !10170)
!10170 = distinct !DILexicalBlock(scope: !1925, file: !637, line: 5274, column: 66)
!10171 = !DILocation(line: 5274, column: 86, scope: !10170)
!10172 = !DILocation(line: 5274, column: 66, scope: !10170)
!10173 = !DILocation(line: 5274, column: 96, scope: !10170)
!10174 = !DILocation(line: 5274, column: 66, scope: !1925)
!10175 = !DILocation(line: 5274, column: 66, scope: !10176)
!10176 = !DILexicalBlockFile(scope: !1925, file: !637, discriminator: 2)
!10177 = !DILocation(line: 5274, column: 127, scope: !10178)
!10178 = !DILexicalBlockFile(scope: !10170, file: !637, discriminator: 3)
!10179 = !DILocation(line: 5274, column: 145, scope: !10170)
!10180 = !DILocation(line: 5274, column: 155, scope: !10170)
!10181 = !DILocation(line: 5274, column: 180, scope: !10170)
!10182 = !DILocation(line: 5274, column: 111, scope: !10170)
!10183 = !DILocation(line: 5274, column: 199, scope: !10184)
!10184 = !DILexicalBlockFile(scope: !1920, file: !637, discriminator: 4)
!10185 = !DILocation(line: 5274, column: 199, scope: !1925)
!10186 = !DILocation(line: 5274, column: 199, scope: !10187)
!10187 = !DILexicalBlockFile(scope: !1925, file: !637, discriminator: 5)
!10188 = !DILocation(line: 5275, column: 13, scope: !10189)
!10189 = distinct !DILexicalBlock(scope: !1920, file: !637, line: 5275, column: 13)
!10190 = !DILocation(line: 5275, column: 20, scope: !10189)
!10191 = !DILocation(line: 5275, column: 13, scope: !1920)
!10192 = !DILocation(line: 5276, column: 13, scope: !10189)
!10193 = !DILocation(line: 5278, column: 27, scope: !10194)
!10194 = distinct !DILexicalBlock(scope: !1920, file: !637, line: 5278, column: 13)
!10195 = !DILocation(line: 5278, column: 32, scope: !10194)
!10196 = !DILocation(line: 5278, column: 13, scope: !10194)
!10197 = !DILocation(line: 5278, column: 13, scope: !1920)
!10198 = !DILocation(line: 5279, column: 13, scope: !10194)
!10199 = !DILocation(line: 5280, column: 9, scope: !1920)
!10200 = !DILocation(line: 5280, column: 14, scope: !10201)
!10201 = !DILexicalBlockFile(scope: !1927, file: !637, discriminator: 1)
!10202 = !DILocation(line: 5280, column: 24, scope: !1927)
!10203 = !DILocation(line: 5280, column: 55, scope: !1927)
!10204 = !DILocation(line: 5280, column: 68, scope: !1930)
!10205 = !DILocation(line: 5280, column: 84, scope: !1930)
!10206 = !DILocation(line: 5280, column: 68, scope: !1927)
!10207 = !DILocation(line: 5280, column: 99, scope: !10208)
!10208 = !DILexicalBlockFile(scope: !1930, file: !637, discriminator: 2)
!10209 = !DILocation(line: 5280, column: 104, scope: !10210)
!10210 = !DILexicalBlockFile(scope: !1929, file: !637, discriminator: 4)
!10211 = !DILocation(line: 5280, column: 114, scope: !1929)
!10212 = !DILocation(line: 5280, column: 144, scope: !1929)
!10213 = !DILocation(line: 5280, column: 170, scope: !10214)
!10214 = distinct !DILexicalBlock(scope: !1929, file: !637, line: 5280, column: 167)
!10215 = !DILocation(line: 5280, column: 187, scope: !10214)
!10216 = !DILocation(line: 5280, column: 167, scope: !10214)
!10217 = !DILocation(line: 5280, column: 197, scope: !10214)
!10218 = !DILocation(line: 5280, column: 167, scope: !1929)
!10219 = !DILocation(line: 5280, column: 167, scope: !10220)
!10220 = !DILexicalBlockFile(scope: !1929, file: !637, discriminator: 5)
!10221 = !DILocation(line: 5280, column: 228, scope: !10222)
!10222 = !DILexicalBlockFile(scope: !10214, file: !637, discriminator: 6)
!10223 = !DILocation(line: 5280, column: 246, scope: !10214)
!10224 = !DILocation(line: 5280, column: 256, scope: !10214)
!10225 = !DILocation(line: 5280, column: 281, scope: !10214)
!10226 = !DILocation(line: 5280, column: 212, scope: !10214)
!10227 = !DILocation(line: 5280, column: 300, scope: !10228)
!10228 = !DILexicalBlockFile(scope: !1930, file: !637, discriminator: 7)
!10229 = !DILocation(line: 5280, column: 300, scope: !1929)
!10230 = !DILocation(line: 5280, column: 300, scope: !10231)
!10231 = !DILexicalBlockFile(scope: !1929, file: !637, discriminator: 8)
!10232 = !DILocation(line: 5280, column: 300, scope: !10233)
!10233 = !DILexicalBlockFile(scope: !1929, file: !637, discriminator: 9)
!10234 = !DILocation(line: 5280, column: 313, scope: !10235)
!10235 = !DILexicalBlockFile(scope: !10236, file: !637, discriminator: 10)
!10236 = !DILexicalBlockFile(scope: !1920, file: !637, discriminator: 3)
!10237 = !DILocation(line: 5280, column: 313, scope: !1927)
!10238 = !DILocation(line: 5280, column: 313, scope: !10239)
!10239 = !DILexicalBlockFile(scope: !1927, file: !637, discriminator: 11)
!10240 = !DILocation(line: 5281, column: 5, scope: !1921)
!10241 = !DILocation(line: 5281, column: 5, scope: !10130)
!10242 = !DILocation(line: 5281, column: 5, scope: !1920)
!10243 = !DILocation(line: 5264, column: 33, scope: !1921)
!10244 = !DILocation(line: 5264, column: 38, scope: !1921)
!10245 = !DILocation(line: 5264, column: 31, scope: !1921)
!10246 = !DILocation(line: 5264, column: 5, scope: !1921)
!10247 = !DILocation(line: 5282, column: 5, scope: !1891)
!10248 = !DILocation(line: 5282, column: 10, scope: !10249)
!10249 = !DILexicalBlockFile(scope: !1932, file: !637, discriminator: 1)
!10250 = !DILocation(line: 5282, column: 20, scope: !1932)
!10251 = !DILocation(line: 5282, column: 51, scope: !1932)
!10252 = !DILocation(line: 5282, column: 62, scope: !1935)
!10253 = !DILocation(line: 5282, column: 78, scope: !1935)
!10254 = !DILocation(line: 5282, column: 62, scope: !1932)
!10255 = !DILocation(line: 5282, column: 93, scope: !10256)
!10256 = !DILexicalBlockFile(scope: !1935, file: !637, discriminator: 2)
!10257 = !DILocation(line: 5282, column: 98, scope: !10258)
!10258 = !DILexicalBlockFile(scope: !1934, file: !637, discriminator: 4)
!10259 = !DILocation(line: 5282, column: 108, scope: !1934)
!10260 = !DILocation(line: 5282, column: 138, scope: !1934)
!10261 = !DILocation(line: 5282, column: 164, scope: !10262)
!10262 = distinct !DILexicalBlock(scope: !1934, file: !637, line: 5282, column: 161)
!10263 = !DILocation(line: 5282, column: 181, scope: !10262)
!10264 = !DILocation(line: 5282, column: 161, scope: !10262)
!10265 = !DILocation(line: 5282, column: 191, scope: !10262)
!10266 = !DILocation(line: 5282, column: 161, scope: !1934)
!10267 = !DILocation(line: 5282, column: 161, scope: !10268)
!10268 = !DILexicalBlockFile(scope: !1934, file: !637, discriminator: 5)
!10269 = !DILocation(line: 5282, column: 222, scope: !10270)
!10270 = !DILexicalBlockFile(scope: !10262, file: !637, discriminator: 6)
!10271 = !DILocation(line: 5282, column: 240, scope: !10262)
!10272 = !DILocation(line: 5282, column: 250, scope: !10262)
!10273 = !DILocation(line: 5282, column: 275, scope: !10262)
!10274 = !DILocation(line: 5282, column: 206, scope: !10262)
!10275 = !DILocation(line: 5282, column: 294, scope: !10276)
!10276 = !DILexicalBlockFile(scope: !1935, file: !637, discriminator: 7)
!10277 = !DILocation(line: 5282, column: 294, scope: !1934)
!10278 = !DILocation(line: 5282, column: 294, scope: !10279)
!10279 = !DILexicalBlockFile(scope: !1934, file: !637, discriminator: 8)
!10280 = !DILocation(line: 5282, column: 294, scope: !10281)
!10281 = !DILexicalBlockFile(scope: !1934, file: !637, discriminator: 9)
!10282 = !DILocation(line: 5282, column: 307, scope: !10283)
!10283 = !DILexicalBlockFile(scope: !10284, file: !637, discriminator: 10)
!10284 = !DILexicalBlockFile(scope: !1891, file: !637, discriminator: 3)
!10285 = !DILocation(line: 5282, column: 307, scope: !1932)
!10286 = !DILocation(line: 5282, column: 307, scope: !10287)
!10287 = !DILexicalBlockFile(scope: !1932, file: !637, discriminator: 11)
!10288 = !DILocation(line: 5283, column: 9, scope: !10289)
!10289 = distinct !DILexicalBlock(scope: !1891, file: !637, line: 5283, column: 9)
!10290 = !DILocation(line: 5283, column: 9, scope: !1891)
!10291 = !DILocation(line: 5284, column: 22, scope: !10289)
!10292 = !DILocation(line: 5284, column: 9, scope: !10289)
!10293 = !DILocation(line: 5285, column: 12, scope: !1891)
!10294 = !DILocation(line: 5285, column: 5, scope: !1891)
!10295 = !DILocation(line: 5287, column: 5, scope: !1891)
!10296 = !DILocation(line: 5287, column: 10, scope: !10297)
!10297 = !DILexicalBlockFile(scope: !1937, file: !637, discriminator: 1)
!10298 = !DILocation(line: 5287, column: 20, scope: !1937)
!10299 = !DILocation(line: 5287, column: 51, scope: !1937)
!10300 = !DILocation(line: 5287, column: 61, scope: !1940)
!10301 = !DILocation(line: 5287, column: 77, scope: !1940)
!10302 = !DILocation(line: 5287, column: 61, scope: !1937)
!10303 = !DILocation(line: 5287, column: 92, scope: !10304)
!10304 = !DILexicalBlockFile(scope: !1940, file: !637, discriminator: 2)
!10305 = !DILocation(line: 5287, column: 97, scope: !10306)
!10306 = !DILexicalBlockFile(scope: !1939, file: !637, discriminator: 4)
!10307 = !DILocation(line: 5287, column: 107, scope: !1939)
!10308 = !DILocation(line: 5287, column: 137, scope: !1939)
!10309 = !DILocation(line: 5287, column: 163, scope: !10310)
!10310 = distinct !DILexicalBlock(scope: !1939, file: !637, line: 5287, column: 160)
!10311 = !DILocation(line: 5287, column: 180, scope: !10310)
!10312 = !DILocation(line: 5287, column: 160, scope: !10310)
!10313 = !DILocation(line: 5287, column: 190, scope: !10310)
!10314 = !DILocation(line: 5287, column: 160, scope: !1939)
!10315 = !DILocation(line: 5287, column: 160, scope: !10316)
!10316 = !DILexicalBlockFile(scope: !1939, file: !637, discriminator: 5)
!10317 = !DILocation(line: 5287, column: 221, scope: !10318)
!10318 = !DILexicalBlockFile(scope: !10310, file: !637, discriminator: 6)
!10319 = !DILocation(line: 5287, column: 239, scope: !10310)
!10320 = !DILocation(line: 5287, column: 249, scope: !10310)
!10321 = !DILocation(line: 5287, column: 274, scope: !10310)
!10322 = !DILocation(line: 5287, column: 205, scope: !10310)
!10323 = !DILocation(line: 5287, column: 293, scope: !10324)
!10324 = !DILexicalBlockFile(scope: !1940, file: !637, discriminator: 7)
!10325 = !DILocation(line: 5287, column: 293, scope: !1939)
!10326 = !DILocation(line: 5287, column: 293, scope: !10327)
!10327 = !DILexicalBlockFile(scope: !1939, file: !637, discriminator: 8)
!10328 = !DILocation(line: 5287, column: 293, scope: !10329)
!10329 = !DILexicalBlockFile(scope: !1939, file: !637, discriminator: 9)
!10330 = !DILocation(line: 5287, column: 306, scope: !10283)
!10331 = !DILocation(line: 5287, column: 306, scope: !1937)
!10332 = !DILocation(line: 5287, column: 306, scope: !10333)
!10333 = !DILexicalBlockFile(scope: !1937, file: !637, discriminator: 11)
!10334 = !DILocation(line: 5288, column: 5, scope: !1891)
!10335 = !DILocation(line: 5288, column: 10, scope: !10336)
!10336 = !DILexicalBlockFile(scope: !1942, file: !637, discriminator: 1)
!10337 = !DILocation(line: 5288, column: 20, scope: !1942)
!10338 = !DILocation(line: 5288, column: 51, scope: !1942)
!10339 = !DILocation(line: 5288, column: 62, scope: !1945)
!10340 = !DILocation(line: 5288, column: 78, scope: !1945)
!10341 = !DILocation(line: 5288, column: 62, scope: !1942)
!10342 = !DILocation(line: 5288, column: 93, scope: !10343)
!10343 = !DILexicalBlockFile(scope: !1945, file: !637, discriminator: 2)
!10344 = !DILocation(line: 5288, column: 98, scope: !10345)
!10345 = !DILexicalBlockFile(scope: !1944, file: !637, discriminator: 4)
!10346 = !DILocation(line: 5288, column: 108, scope: !1944)
!10347 = !DILocation(line: 5288, column: 138, scope: !1944)
!10348 = !DILocation(line: 5288, column: 164, scope: !10349)
!10349 = distinct !DILexicalBlock(scope: !1944, file: !637, line: 5288, column: 161)
!10350 = !DILocation(line: 5288, column: 181, scope: !10349)
!10351 = !DILocation(line: 5288, column: 161, scope: !10349)
!10352 = !DILocation(line: 5288, column: 191, scope: !10349)
!10353 = !DILocation(line: 5288, column: 161, scope: !1944)
!10354 = !DILocation(line: 5288, column: 161, scope: !10355)
!10355 = !DILexicalBlockFile(scope: !1944, file: !637, discriminator: 5)
!10356 = !DILocation(line: 5288, column: 222, scope: !10357)
!10357 = !DILexicalBlockFile(scope: !10349, file: !637, discriminator: 6)
!10358 = !DILocation(line: 5288, column: 240, scope: !10349)
!10359 = !DILocation(line: 5288, column: 250, scope: !10349)
!10360 = !DILocation(line: 5288, column: 275, scope: !10349)
!10361 = !DILocation(line: 5288, column: 206, scope: !10349)
!10362 = !DILocation(line: 5288, column: 294, scope: !10363)
!10363 = !DILexicalBlockFile(scope: !1945, file: !637, discriminator: 7)
!10364 = !DILocation(line: 5288, column: 294, scope: !1944)
!10365 = !DILocation(line: 5288, column: 294, scope: !10366)
!10366 = !DILexicalBlockFile(scope: !1944, file: !637, discriminator: 8)
!10367 = !DILocation(line: 5288, column: 294, scope: !10368)
!10368 = !DILexicalBlockFile(scope: !1944, file: !637, discriminator: 9)
!10369 = !DILocation(line: 5288, column: 307, scope: !10283)
!10370 = !DILocation(line: 5288, column: 307, scope: !1942)
!10371 = !DILocation(line: 5288, column: 307, scope: !10372)
!10372 = !DILexicalBlockFile(scope: !1942, file: !637, discriminator: 11)
!10373 = !DILocation(line: 5289, column: 9, scope: !10374)
!10374 = distinct !DILexicalBlock(scope: !1891, file: !637, line: 5289, column: 9)
!10375 = !DILocation(line: 5289, column: 9, scope: !1891)
!10376 = !DILocation(line: 5290, column: 22, scope: !10374)
!10377 = !DILocation(line: 5290, column: 9, scope: !10374)
!10378 = !DILocation(line: 5291, column: 5, scope: !1891)
!10379 = !DILocation(line: 5292, column: 1, scope: !1891)
!10380 = !DILocation(line: 5304, column: 30, scope: !1946)
!10381 = !DILocation(line: 5304, column: 46, scope: !1946)
!10382 = !DILocation(line: 5306, column: 5, scope: !1946)
!10383 = !DILocation(line: 5306, column: 15, scope: !1946)
!10384 = !DILocation(line: 5307, column: 5, scope: !1946)
!10385 = !DILocation(line: 5307, column: 9, scope: !1946)
!10386 = !DILocation(line: 5308, column: 5, scope: !1946)
!10387 = !DILocation(line: 5308, column: 11, scope: !1946)
!10388 = !DILocation(line: 5309, column: 5, scope: !1946)
!10389 = !DILocation(line: 5309, column: 9, scope: !1946)
!10390 = !DILocation(line: 5310, column: 5, scope: !1946)
!10391 = !DILocation(line: 5310, column: 18, scope: !1946)
!10392 = !DILocation(line: 5310, column: 28, scope: !1946)
!10393 = !DILocation(line: 5311, column: 5, scope: !1946)
!10394 = !DILocation(line: 5311, column: 10, scope: !1946)
!10395 = !DILocation(line: 5311, column: 22, scope: !1946)
!10396 = !DILocation(line: 5312, column: 5, scope: !1946)
!10397 = !DILocation(line: 5312, column: 21, scope: !1946)
!10398 = !DILocation(line: 5312, column: 29, scope: !1946)
!10399 = !DILocation(line: 5313, column: 5, scope: !1946)
!10400 = !DILocation(line: 5313, column: 9, scope: !1946)
!10401 = !DILocation(line: 5314, column: 5, scope: !1946)
!10402 = !DILocation(line: 5314, column: 15, scope: !1946)
!10403 = !DILocation(line: 5316, column: 33, scope: !1946)
!10404 = !DILocation(line: 5316, column: 22, scope: !1946)
!10405 = !DILocation(line: 5316, column: 11, scope: !1946)
!10406 = !DILocation(line: 5317, column: 27, scope: !10407)
!10407 = distinct !DILexicalBlock(scope: !1946, file: !637, line: 5317, column: 9)
!10408 = !DILocation(line: 5317, column: 10, scope: !10407)
!10409 = !DILocation(line: 5317, column: 9, scope: !1946)
!10410 = !DILocation(line: 5318, column: 9, scope: !10407)
!10411 = !DILocation(line: 5319, column: 27, scope: !10412)
!10412 = distinct !DILexicalBlock(scope: !1946, file: !637, line: 5319, column: 9)
!10413 = !DILocation(line: 5319, column: 33, scope: !10412)
!10414 = !DILocation(line: 5319, column: 44, scope: !10412)
!10415 = !DILocation(line: 5319, column: 53, scope: !10412)
!10416 = !DILocation(line: 5319, column: 70, scope: !10412)
!10417 = !DILocation(line: 5319, column: 9, scope: !1946)
!10418 = !DILocation(line: 5320, column: 25, scope: !10419)
!10419 = distinct !DILexicalBlock(scope: !10412, file: !637, line: 5319, column: 77)
!10420 = !DILocation(line: 5320, column: 9, scope: !10419)
!10421 = !DILocation(line: 5322, column: 9, scope: !10419)
!10422 = !DILocation(line: 5324, column: 27, scope: !10423)
!10423 = distinct !DILexicalBlock(scope: !1946, file: !637, line: 5324, column: 9)
!10424 = !DILocation(line: 5324, column: 10, scope: !10423)
!10425 = !DILocation(line: 5324, column: 9, scope: !1946)
!10426 = !DILocation(line: 5326, column: 9, scope: !10423)
!10427 = !DILocation(line: 5327, column: 9, scope: !10428)
!10428 = distinct !DILexicalBlock(scope: !1946, file: !637, line: 5327, column: 9)
!10429 = !DILocation(line: 5327, column: 18, scope: !10428)
!10430 = !DILocation(line: 5327, column: 9, scope: !1946)
!10431 = !DILocation(line: 5328, column: 25, scope: !10432)
!10432 = distinct !DILexicalBlock(scope: !10428, file: !637, line: 5327, column: 29)
!10433 = !DILocation(line: 5328, column: 9, scope: !10432)
!10434 = !DILocation(line: 5330, column: 9, scope: !10432)
!10435 = !DILocation(line: 5332, column: 19, scope: !1946)
!10436 = !DILocation(line: 5332, column: 45, scope: !1946)
!10437 = !DILocation(line: 5332, column: 5, scope: !1946)
!10438 = !DILocation(line: 5333, column: 5, scope: !1946)
!10439 = !DILocation(line: 5334, column: 11, scope: !1946)
!10440 = !DILocation(line: 5334, column: 21, scope: !1946)
!10441 = !DILocation(line: 5335, column: 11, scope: !1946)
!10442 = !DILocation(line: 5335, column: 23, scope: !1946)
!10443 = !DILocation(line: 5336, column: 11, scope: !1946)
!10444 = !DILocation(line: 5336, column: 20, scope: !1946)
!10445 = !DILocation(line: 5337, column: 7, scope: !1966)
!10446 = !DILocation(line: 5337, column: 22, scope: !1966)
!10447 = !DILocation(line: 5337, column: 37, scope: !1966)
!10448 = !DILocation(line: 5337, column: 35, scope: !1966)
!10449 = !DILocation(line: 5339, column: 25, scope: !1966)
!10450 = !DILocation(line: 5339, column: 32, scope: !1966)
!10451 = !DILocation(line: 5339, column: 13, scope: !1966)
!10452 = !DILocation(line: 5339, column: 11, scope: !1966)
!10453 = !DILocation(line: 5340, column: 26, scope: !1966)
!10454 = !DILocation(line: 5340, column: 5, scope: !1966)
!10455 = !DILocation(line: 5340, column: 34, scope: !1946)
!10456 = !DILocation(line: 5342, column: 9, scope: !10457)
!10457 = distinct !DILexicalBlock(scope: !1946, file: !637, line: 5342, column: 9)
!10458 = !DILocation(line: 5342, column: 9, scope: !1946)
!10459 = !DILocation(line: 5343, column: 22, scope: !10460)
!10460 = distinct !DILexicalBlock(scope: !10457, file: !637, line: 5342, column: 16)
!10461 = !DILocation(line: 5343, column: 9, scope: !10460)
!10462 = !DILocation(line: 5344, column: 9, scope: !10460)
!10463 = !DILocation(line: 5346, column: 9, scope: !10464)
!10464 = distinct !DILexicalBlock(scope: !1946, file: !637, line: 5346, column: 9)
!10465 = !DILocation(line: 5346, column: 14, scope: !10464)
!10466 = !DILocation(line: 5346, column: 9, scope: !1946)
!10467 = !DILocation(line: 5347, column: 25, scope: !10468)
!10468 = distinct !DILexicalBlock(scope: !10464, file: !637, line: 5346, column: 23)
!10469 = !DILocation(line: 5347, column: 9, scope: !10468)
!10470 = !DILocation(line: 5349, column: 9, scope: !10468)
!10471 = !DILocation(line: 5351, column: 13, scope: !1946)
!10472 = !DILocation(line: 5351, column: 18, scope: !1946)
!10473 = !DILocation(line: 5354, column: 30, scope: !10474)
!10474 = distinct !DILexicalBlock(scope: !10475, file: !637, line: 5354, column: 13)
!10475 = distinct !DILexicalBlock(scope: !1969, file: !637, line: 5353, column: 9)
!10476 = !DILocation(line: 5354, column: 15, scope: !10474)
!10477 = !DILocation(line: 5354, column: 36, scope: !10474)
!10478 = !DILocation(line: 5354, column: 45, scope: !10474)
!10479 = !DILocation(line: 5354, column: 13, scope: !10475)
!10480 = !DILocation(line: 5355, column: 29, scope: !10481)
!10481 = distinct !DILexicalBlock(scope: !10474, file: !637, line: 5354, column: 51)
!10482 = !DILocation(line: 5355, column: 13, scope: !10481)
!10483 = !DILocation(line: 5357, column: 13, scope: !10481)
!10484 = !DILocation(line: 5359, column: 9, scope: !10475)
!10485 = !DILocation(line: 5364, column: 9, scope: !1968)
!10486 = !DILocation(line: 5364, column: 30, scope: !1968)
!10487 = !DILocation(line: 5365, column: 39, scope: !1968)
!10488 = !DILocation(line: 5365, column: 44, scope: !1968)
!10489 = !DILocation(line: 5365, column: 16, scope: !1968)
!10490 = !DILocation(line: 5365, column: 14, scope: !1968)
!10491 = !DILocation(line: 5366, column: 49, scope: !1971)
!10492 = !DILocation(line: 5366, column: 71, scope: !1971)
!10493 = !DILocation(line: 5366, column: 76, scope: !1971)
!10494 = !DILocation(line: 5366, column: 83, scope: !1971)
!10495 = !DILocation(line: 5366, column: 300, scope: !10496)
!10496 = distinct !DILexicalBlock(scope: !1971, file: !637, line: 5366, column: 98)
!10497 = !DILocation(line: 5366, column: 260, scope: !10496)
!10498 = !{i32 477037}
!10499 = !DILocation(line: 5366, column: 307, scope: !1971)
!10500 = !DILocation(line: 5366, column: 123, scope: !10496)
!10501 = !DILocation(line: 5366, column: 312, scope: !1968)
!10502 = !DILocation(line: 5366, column: 312, scope: !1971)
!10503 = !DILocation(line: 5366, column: 9, scope: !1968)
!10504 = !DILocation(line: 5366, column: 15, scope: !1968)
!10505 = !DILocation(line: 5366, column: 29, scope: !1968)
!10506 = !DILocation(line: 5367, column: 31, scope: !1968)
!10507 = !DILocation(line: 5367, column: 9, scope: !1968)
!10508 = !DILocation(line: 5367, column: 15, scope: !1968)
!10509 = !DILocation(line: 5367, column: 29, scope: !1968)
!10510 = !DILocation(line: 5369, column: 9, scope: !1969)
!10511 = !DILocation(line: 5372, column: 25, scope: !1946)
!10512 = !DILocation(line: 5372, column: 30, scope: !1946)
!10513 = !DILocation(line: 5372, column: 51, scope: !1946)
!10514 = !DILocation(line: 5372, column: 56, scope: !1946)
!10515 = !DILocation(line: 5373, column: 21, scope: !1946)
!10516 = !DILocation(line: 5373, column: 41, scope: !1946)
!10517 = !DILocation(line: 5373, column: 61, scope: !1946)
!10518 = !DILocation(line: 5372, column: 13, scope: !1946)
!10519 = !DILocation(line: 5372, column: 11, scope: !1946)
!10520 = !DILocation(line: 5374, column: 9, scope: !10521)
!10521 = distinct !DILexicalBlock(scope: !1946, file: !637, line: 5374, column: 9)
!10522 = !DILocation(line: 5374, column: 9, scope: !1946)
!10523 = !DILocation(line: 5375, column: 22, scope: !10524)
!10524 = distinct !DILexicalBlock(scope: !10521, file: !637, line: 5374, column: 16)
!10525 = !DILocation(line: 5375, column: 9, scope: !10524)
!10526 = !DILocation(line: 5376, column: 9, scope: !10524)
!10527 = !DILocation(line: 5378, column: 31, scope: !1946)
!10528 = !DILocation(line: 5378, column: 37, scope: !1946)
!10529 = !DILocation(line: 5378, column: 11, scope: !1946)
!10530 = !DILocation(line: 5378, column: 9, scope: !1946)
!10531 = !DILocation(line: 5378, column: 5, scope: !1946)
!10532 = !DILocation(line: 5381, column: 9, scope: !10533)
!10533 = distinct !DILexicalBlock(scope: !1946, file: !637, line: 5381, column: 9)
!10534 = !DILocation(line: 5381, column: 9, scope: !1946)
!10535 = !DILocation(line: 5382, column: 22, scope: !10533)
!10536 = !DILocation(line: 5382, column: 9, scope: !10533)
!10537 = !DILocation(line: 5383, column: 12, scope: !1946)
!10538 = !DILocation(line: 5383, column: 5, scope: !1946)
!10539 = !DILocation(line: 5384, column: 1, scope: !1946)
!10540 = !DILocation(line: 5395, column: 36, scope: !1973)
!10541 = !DILocation(line: 5397, column: 9, scope: !10542)
!10542 = distinct !DILexicalBlock(scope: !1973, file: !637, line: 5397, column: 9)
!10543 = !DILocation(line: 5397, column: 24, scope: !10542)
!10544 = !DILocation(line: 5397, column: 9, scope: !1973)
!10545 = !DILocation(line: 5398, column: 55, scope: !10546)
!10546 = distinct !DILexicalBlock(scope: !10542, file: !637, line: 5397, column: 31)
!10547 = !DILocation(line: 5399, column: 9, scope: !10546)
!10548 = !DILocation(line: 5402, column: 35, scope: !10542)
!10549 = !DILocation(line: 5402, column: 16, scope: !10542)
!10550 = !DILocation(line: 5402, column: 9, scope: !10542)
!10551 = !DILocation(line: 5403, column: 1, scope: !1973)
!10552 = !DILocation(line: 5413, column: 36, scope: !1976)
!10553 = !DILocation(line: 5413, column: 52, scope: !1976)
!10554 = !DILocation(line: 5415, column: 5, scope: !1976)
!10555 = !DILocation(line: 5415, column: 12, scope: !1976)
!10556 = !DILocation(line: 5417, column: 9, scope: !10557)
!10557 = distinct !DILexicalBlock(scope: !1976, file: !637, line: 5417, column: 9)
!10558 = !DILocation(line: 5417, column: 13, scope: !10557)
!10559 = !DILocation(line: 5417, column: 9, scope: !1976)
!10560 = !DILocation(line: 5418, column: 17, scope: !10557)
!10561 = !DILocation(line: 5418, column: 9, scope: !10557)
!10562 = !DILocation(line: 5420, column: 36, scope: !10563)
!10563 = distinct !DILexicalBlock(scope: !10557, file: !637, line: 5419, column: 10)
!10564 = !DILocation(line: 5420, column: 19, scope: !10563)
!10565 = !DILocation(line: 5420, column: 17, scope: !10563)
!10566 = !DILocation(line: 5421, column: 13, scope: !10567)
!10567 = distinct !DILexicalBlock(scope: !10563, file: !637, line: 5421, column: 13)
!10568 = !DILocation(line: 5421, column: 21, scope: !10567)
!10569 = !DILocation(line: 5421, column: 13, scope: !10563)
!10570 = !DILocation(line: 5422, column: 18, scope: !10571)
!10571 = distinct !DILexicalBlock(scope: !10572, file: !637, line: 5422, column: 17)
!10572 = distinct !DILexicalBlock(scope: !10567, file: !637, line: 5421, column: 28)
!10573 = !DILocation(line: 5422, column: 17, scope: !10572)
!10574 = !DILocation(line: 5423, column: 33, scope: !10571)
!10575 = !DILocation(line: 5423, column: 17, scope: !10571)
!10576 = !DILocation(line: 5425, column: 13, scope: !10572)
!10577 = !DILocation(line: 5429, column: 22, scope: !1976)
!10578 = !DILocation(line: 5429, column: 20, scope: !1976)
!10579 = !DILocation(line: 5431, column: 51, scope: !1976)
!10580 = !DILocation(line: 5432, column: 5, scope: !1976)
!10581 = !DILocation(line: 5433, column: 1, scope: !1976)
!10582 = !DILocation(line: 5446, column: 31, scope: !1981)
!10583 = !DILocation(line: 5446, column: 47, scope: !1981)
!10584 = !DILocation(line: 5448, column: 5, scope: !1981)
!10585 = !DILocation(line: 5448, column: 15, scope: !1981)
!10586 = !DILocation(line: 5449, column: 5, scope: !1981)
!10587 = !DILocation(line: 5449, column: 9, scope: !1981)
!10588 = !DILocation(line: 5450, column: 5, scope: !1981)
!10589 = !DILocation(line: 5450, column: 26, scope: !1981)
!10590 = !DILocation(line: 5452, column: 10, scope: !1981)
!10591 = !DILocation(line: 5452, column: 8, scope: !1981)
!10592 = !DILocation(line: 5453, column: 9, scope: !10593)
!10593 = distinct !DILexicalBlock(scope: !1981, file: !637, line: 5453, column: 9)
!10594 = !DILocation(line: 5453, column: 12, scope: !10593)
!10595 = !DILocation(line: 5453, column: 9, scope: !1981)
!10596 = !DILocation(line: 5454, column: 28, scope: !10597)
!10597 = distinct !DILexicalBlock(scope: !10593, file: !637, line: 5453, column: 27)
!10598 = !DILocation(line: 5454, column: 9, scope: !10597)
!10599 = !DILocation(line: 5455, column: 9, scope: !10597)
!10600 = !DILocation(line: 5458, column: 12, scope: !1981)
!10601 = !DILocation(line: 5458, column: 10, scope: !1981)
!10602 = !DILocation(line: 5459, column: 9, scope: !10603)
!10603 = distinct !DILexicalBlock(scope: !1981, file: !637, line: 5459, column: 9)
!10604 = !DILocation(line: 5459, column: 14, scope: !10603)
!10605 = !DILocation(line: 5459, column: 9, scope: !1981)
!10606 = !DILocation(line: 5460, column: 26, scope: !10607)
!10607 = distinct !DILexicalBlock(scope: !10603, file: !637, line: 5459, column: 29)
!10608 = !DILocation(line: 5460, column: 9, scope: !10607)
!10609 = !DILocation(line: 5461, column: 9, scope: !10607)
!10610 = !DILocation(line: 5464, column: 12, scope: !1996)
!10611 = !DILocation(line: 5464, column: 10, scope: !1996)
!10612 = !DILocation(line: 5464, column: 20, scope: !10613)
!10613 = !DILexicalBlockFile(scope: !10614, file: !637, discriminator: 4)
!10614 = !DILexicalBlockFile(scope: !1995, file: !637, discriminator: 1)
!10615 = !DILocation(line: 5464, column: 17, scope: !1995)
!10616 = !DILocation(line: 5464, column: 23, scope: !1995)
!10617 = !{!10618, !2950, i64 0}
!10618 = !{!"if_nameindex", !2950, i64 0, !2323, i64 8}
!10619 = !DILocation(line: 5464, column: 32, scope: !1995)
!10620 = !DILocation(line: 5464, column: 37, scope: !1995)
!10621 = !DILocation(line: 5464, column: 40, scope: !10622)
!10622 = !DILexicalBlockFile(scope: !1995, file: !637, discriminator: 2)
!10623 = !DILocation(line: 5464, column: 42, scope: !1995)
!10624 = !DILocation(line: 5464, column: 5, scope: !10625)
!10625 = !DILexicalBlockFile(scope: !1996, file: !637, discriminator: 3)
!10626 = !DILocation(line: 5465, column: 9, scope: !1994)
!10627 = !DILocation(line: 5465, column: 19, scope: !1994)
!10628 = !DILocation(line: 5466, column: 20, scope: !1994)
!10629 = !DILocation(line: 5466, column: 17, scope: !1994)
!10630 = !DILocation(line: 5466, column: 23, scope: !1994)
!10631 = !DILocation(line: 5466, column: 63, scope: !1994)
!10632 = !DILocation(line: 5466, column: 60, scope: !1994)
!10633 = !DILocation(line: 5466, column: 66, scope: !1994)
!10634 = !{!10618, !2323, i64 8}
!10635 = !DILocation(line: 5465, column: 30, scope: !1994)
!10636 = !DILocation(line: 5468, column: 13, scope: !2000)
!10637 = !DILocation(line: 5468, column: 22, scope: !2000)
!10638 = !DILocation(line: 5468, column: 36, scope: !2000)
!10639 = !DILocation(line: 5468, column: 53, scope: !10640)
!10640 = !DILexicalBlockFile(scope: !2000, file: !637, discriminator: 1)
!10641 = !DILocation(line: 5468, column: 59, scope: !2000)
!10642 = !DILocation(line: 5468, column: 39, scope: !2000)
!10643 = !DILocation(line: 5468, column: 69, scope: !2000)
!10644 = !DILocation(line: 5468, column: 13, scope: !1994)
!10645 = !DILocation(line: 5469, column: 13, scope: !1999)
!10646 = !DILocation(line: 5469, column: 18, scope: !10647)
!10647 = !DILexicalBlockFile(scope: !1998, file: !637, discriminator: 1)
!10648 = !DILocation(line: 5469, column: 28, scope: !1998)
!10649 = !DILocation(line: 5469, column: 59, scope: !1998)
!10650 = !DILocation(line: 5469, column: 74, scope: !2003)
!10651 = !DILocation(line: 5469, column: 90, scope: !2003)
!10652 = !DILocation(line: 5469, column: 74, scope: !1998)
!10653 = !DILocation(line: 5469, column: 105, scope: !10654)
!10654 = !DILexicalBlockFile(scope: !2003, file: !637, discriminator: 2)
!10655 = !DILocation(line: 5469, column: 110, scope: !10656)
!10656 = !DILexicalBlockFile(scope: !2002, file: !637, discriminator: 4)
!10657 = !DILocation(line: 5469, column: 120, scope: !2002)
!10658 = !DILocation(line: 5469, column: 150, scope: !2002)
!10659 = !DILocation(line: 5469, column: 176, scope: !10660)
!10660 = distinct !DILexicalBlock(scope: !2002, file: !637, line: 5469, column: 173)
!10661 = !DILocation(line: 5469, column: 193, scope: !10660)
!10662 = !DILocation(line: 5469, column: 173, scope: !10660)
!10663 = !DILocation(line: 5469, column: 203, scope: !10660)
!10664 = !DILocation(line: 5469, column: 173, scope: !2002)
!10665 = !DILocation(line: 5469, column: 173, scope: !10666)
!10666 = !DILexicalBlockFile(scope: !2002, file: !637, discriminator: 5)
!10667 = !DILocation(line: 5469, column: 234, scope: !10668)
!10668 = !DILexicalBlockFile(scope: !10660, file: !637, discriminator: 6)
!10669 = !DILocation(line: 5469, column: 252, scope: !10660)
!10670 = !DILocation(line: 5469, column: 262, scope: !10660)
!10671 = !DILocation(line: 5469, column: 287, scope: !10660)
!10672 = !DILocation(line: 5469, column: 218, scope: !10660)
!10673 = !DILocation(line: 5469, column: 306, scope: !10674)
!10674 = !DILexicalBlockFile(scope: !2003, file: !637, discriminator: 7)
!10675 = !DILocation(line: 5469, column: 306, scope: !2002)
!10676 = !DILocation(line: 5469, column: 306, scope: !10677)
!10677 = !DILexicalBlockFile(scope: !2002, file: !637, discriminator: 8)
!10678 = !DILocation(line: 5469, column: 306, scope: !10679)
!10679 = !DILexicalBlockFile(scope: !2002, file: !637, discriminator: 9)
!10680 = !DILocation(line: 5469, column: 319, scope: !10681)
!10681 = !DILexicalBlockFile(scope: !10682, file: !637, discriminator: 10)
!10682 = !DILexicalBlockFile(scope: !1999, file: !637, discriminator: 3)
!10683 = !DILocation(line: 5469, column: 319, scope: !1998)
!10684 = !DILocation(line: 5469, column: 319, scope: !10685)
!10685 = !DILexicalBlockFile(scope: !1998, file: !637, discriminator: 11)
!10686 = !DILocation(line: 5470, column: 13, scope: !1999)
!10687 = !DILocation(line: 5470, column: 18, scope: !10688)
!10688 = !DILexicalBlockFile(scope: !2005, file: !637, discriminator: 1)
!10689 = !DILocation(line: 5470, column: 28, scope: !2005)
!10690 = !DILocation(line: 5470, column: 58, scope: !2005)
!10691 = !DILocation(line: 5470, column: 73, scope: !10692)
!10692 = distinct !DILexicalBlock(scope: !2005, file: !637, line: 5470, column: 70)
!10693 = !DILocation(line: 5470, column: 90, scope: !10692)
!10694 = !DILocation(line: 5470, column: 70, scope: !10692)
!10695 = !DILocation(line: 5470, column: 100, scope: !10692)
!10696 = !DILocation(line: 5470, column: 70, scope: !2005)
!10697 = !DILocation(line: 5470, column: 70, scope: !10698)
!10698 = !DILexicalBlockFile(scope: !2005, file: !637, discriminator: 2)
!10699 = !DILocation(line: 5470, column: 131, scope: !10700)
!10700 = !DILexicalBlockFile(scope: !10692, file: !637, discriminator: 3)
!10701 = !DILocation(line: 5470, column: 149, scope: !10692)
!10702 = !DILocation(line: 5470, column: 159, scope: !10692)
!10703 = !DILocation(line: 5470, column: 184, scope: !10692)
!10704 = !DILocation(line: 5470, column: 115, scope: !10692)
!10705 = !DILocation(line: 5470, column: 203, scope: !10706)
!10706 = !DILexicalBlockFile(scope: !1999, file: !637, discriminator: 4)
!10707 = !DILocation(line: 5470, column: 203, scope: !2005)
!10708 = !DILocation(line: 5470, column: 203, scope: !10709)
!10709 = !DILexicalBlockFile(scope: !2005, file: !637, discriminator: 5)
!10710 = !DILocation(line: 5471, column: 30, scope: !1999)
!10711 = !DILocation(line: 5471, column: 13, scope: !1999)
!10712 = !DILocation(line: 5472, column: 13, scope: !1999)
!10713 = !DILocation(line: 5474, column: 9, scope: !1994)
!10714 = !DILocation(line: 5474, column: 14, scope: !10715)
!10715 = !DILexicalBlockFile(scope: !2007, file: !637, discriminator: 1)
!10716 = !DILocation(line: 5474, column: 24, scope: !2007)
!10717 = !DILocation(line: 5474, column: 54, scope: !2007)
!10718 = !DILocation(line: 5474, column: 73, scope: !10719)
!10719 = distinct !DILexicalBlock(scope: !2007, file: !637, line: 5474, column: 70)
!10720 = !DILocation(line: 5474, column: 90, scope: !10719)
!10721 = !DILocation(line: 5474, column: 70, scope: !10719)
!10722 = !DILocation(line: 5474, column: 100, scope: !10719)
!10723 = !DILocation(line: 5474, column: 70, scope: !2007)
!10724 = !DILocation(line: 5474, column: 70, scope: !10725)
!10725 = !DILexicalBlockFile(scope: !2007, file: !637, discriminator: 2)
!10726 = !DILocation(line: 5474, column: 131, scope: !10727)
!10727 = !DILexicalBlockFile(scope: !10719, file: !637, discriminator: 3)
!10728 = !DILocation(line: 5474, column: 149, scope: !10719)
!10729 = !DILocation(line: 5474, column: 159, scope: !10719)
!10730 = !DILocation(line: 5474, column: 184, scope: !10719)
!10731 = !DILocation(line: 5474, column: 115, scope: !10719)
!10732 = !DILocation(line: 5474, column: 203, scope: !10733)
!10733 = !DILexicalBlockFile(scope: !1994, file: !637, discriminator: 4)
!10734 = !DILocation(line: 5474, column: 203, scope: !2007)
!10735 = !DILocation(line: 5474, column: 203, scope: !10736)
!10736 = !DILexicalBlockFile(scope: !2007, file: !637, discriminator: 5)
!10737 = !DILocation(line: 5475, column: 5, scope: !1995)
!10738 = !DILocation(line: 5475, column: 5, scope: !10614)
!10739 = !DILocation(line: 5475, column: 5, scope: !1994)
!10740 = !DILocation(line: 5464, column: 57, scope: !1995)
!10741 = !DILocation(line: 5464, column: 5, scope: !1995)
!10742 = !DILocation(line: 5477, column: 22, scope: !1981)
!10743 = !DILocation(line: 5477, column: 5, scope: !1981)
!10744 = !DILocation(line: 5478, column: 12, scope: !1981)
!10745 = !DILocation(line: 5478, column: 5, scope: !1981)
!10746 = !DILocation(line: 5479, column: 1, scope: !1981)
!10747 = !DILocation(line: 5487, column: 33, scope: !2008)
!10748 = !DILocation(line: 5487, column: 49, scope: !2008)
!10749 = !DILocation(line: 5489, column: 5, scope: !2008)
!10750 = !DILocation(line: 5489, column: 15, scope: !2008)
!10751 = !DILocation(line: 5490, column: 5, scope: !2008)
!10752 = !DILocation(line: 5490, column: 19, scope: !2008)
!10753 = !DILocation(line: 5492, column: 27, scope: !10754)
!10754 = distinct !DILexicalBlock(scope: !2008, file: !637, line: 5492, column: 9)
!10755 = !DILocation(line: 5492, column: 10, scope: !10754)
!10756 = !DILocation(line: 5492, column: 9, scope: !2008)
!10757 = !DILocation(line: 5494, column: 9, scope: !10754)
!10758 = !DILocation(line: 5496, column: 63, scope: !2008)
!10759 = !DILocation(line: 5496, column: 45, scope: !2008)
!10760 = !DILocation(line: 5496, column: 72, scope: !2008)
!10761 = !DILocation(line: 5496, column: 43, scope: !2008)
!10762 = !DILocation(line: 5496, column: 13, scope: !2008)
!10763 = !DILocation(line: 5496, column: 11, scope: !2008)
!10764 = !DILocation(line: 5497, column: 5, scope: !2008)
!10765 = !DILocation(line: 5497, column: 10, scope: !10766)
!10766 = !DILexicalBlockFile(scope: !2015, file: !637, discriminator: 1)
!10767 = !DILocation(line: 5497, column: 20, scope: !2015)
!10768 = !DILocation(line: 5497, column: 50, scope: !2015)
!10769 = !DILocation(line: 5497, column: 66, scope: !10770)
!10770 = distinct !DILexicalBlock(scope: !2015, file: !637, line: 5497, column: 63)
!10771 = !DILocation(line: 5497, column: 83, scope: !10770)
!10772 = !DILocation(line: 5497, column: 63, scope: !10770)
!10773 = !DILocation(line: 5497, column: 93, scope: !10770)
!10774 = !DILocation(line: 5497, column: 63, scope: !2015)
!10775 = !DILocation(line: 5497, column: 63, scope: !10776)
!10776 = !DILexicalBlockFile(scope: !2015, file: !637, discriminator: 2)
!10777 = !DILocation(line: 5497, column: 124, scope: !10778)
!10778 = !DILexicalBlockFile(scope: !10770, file: !637, discriminator: 3)
!10779 = !DILocation(line: 5497, column: 142, scope: !10770)
!10780 = !DILocation(line: 5497, column: 152, scope: !10770)
!10781 = !DILocation(line: 5497, column: 177, scope: !10770)
!10782 = !DILocation(line: 5497, column: 108, scope: !10770)
!10783 = !DILocation(line: 5497, column: 196, scope: !10784)
!10784 = !DILexicalBlockFile(scope: !2008, file: !637, discriminator: 4)
!10785 = !DILocation(line: 5497, column: 196, scope: !2015)
!10786 = !DILocation(line: 5497, column: 196, scope: !10787)
!10787 = !DILexicalBlockFile(scope: !2015, file: !637, discriminator: 5)
!10788 = !DILocation(line: 5498, column: 9, scope: !10789)
!10789 = distinct !DILexicalBlock(scope: !2008, file: !637, line: 5498, column: 9)
!10790 = !DILocation(line: 5498, column: 15, scope: !10789)
!10791 = !DILocation(line: 5498, column: 9, scope: !2008)
!10792 = !DILocation(line: 5500, column: 25, scope: !10793)
!10793 = distinct !DILexicalBlock(scope: !10789, file: !637, line: 5498, column: 21)
!10794 = !DILocation(line: 5500, column: 9, scope: !10793)
!10795 = !DILocation(line: 5501, column: 9, scope: !10793)
!10796 = !DILocation(line: 5504, column: 36, scope: !2008)
!10797 = !DILocation(line: 5504, column: 12, scope: !2008)
!10798 = !DILocation(line: 5504, column: 5, scope: !2008)
!10799 = !DILocation(line: 5505, column: 1, scope: !2008)
!10800 = !DILocation(line: 5513, column: 33, scope: !2016)
!10801 = !DILocation(line: 5513, column: 49, scope: !2016)
!10802 = !DILocation(line: 5515, column: 5, scope: !2016)
!10803 = !DILocation(line: 5515, column: 19, scope: !2016)
!10804 = !DILocation(line: 5516, column: 5, scope: !2016)
!10805 = !DILocation(line: 5516, column: 10, scope: !2016)
!10806 = !DILocation(line: 5518, column: 35, scope: !2016)
!10807 = !DILocation(line: 5518, column: 13, scope: !2016)
!10808 = !DILocation(line: 5518, column: 11, scope: !2016)
!10809 = !DILocation(line: 5519, column: 9, scope: !10810)
!10810 = distinct !DILexicalBlock(scope: !2016, file: !637, line: 5519, column: 9)
!10811 = !DILocation(line: 5519, column: 15, scope: !10810)
!10812 = !DILocation(line: 5519, column: 9, scope: !2016)
!10813 = !DILocation(line: 5520, column: 9, scope: !10810)
!10814 = !DILocation(line: 5522, column: 24, scope: !10815)
!10815 = distinct !DILexicalBlock(scope: !2016, file: !637, line: 5522, column: 9)
!10816 = !DILocation(line: 5522, column: 31, scope: !10815)
!10817 = !DILocation(line: 5522, column: 9, scope: !10815)
!10818 = !DILocation(line: 5522, column: 37, scope: !10815)
!10819 = !DILocation(line: 5522, column: 9, scope: !2016)
!10820 = !DILocation(line: 5523, column: 28, scope: !10821)
!10821 = distinct !DILexicalBlock(scope: !10815, file: !637, line: 5522, column: 52)
!10822 = !DILocation(line: 5523, column: 9, scope: !10821)
!10823 = !DILocation(line: 5524, column: 9, scope: !10821)
!10824 = !DILocation(line: 5527, column: 38, scope: !2016)
!10825 = !DILocation(line: 5527, column: 12, scope: !2016)
!10826 = !DILocation(line: 5527, column: 5, scope: !2016)
!10827 = !DILocation(line: 5528, column: 1, scope: !2016)
!10828 = !DILocation(line: 5542, column: 27, scope: !2025)
!10829 = !DILocation(line: 5542, column: 43, scope: !2025)
!10830 = !DILocation(line: 5544, column: 5, scope: !2025)
!10831 = !DILocation(line: 5544, column: 16, scope: !2025)
!10832 = !DILocation(line: 5545, column: 5, scope: !2025)
!10833 = !DILocation(line: 5545, column: 12, scope: !2025)
!10834 = !DILocation(line: 5547, column: 27, scope: !10835)
!10835 = distinct !DILexicalBlock(scope: !2025, file: !637, line: 5547, column: 9)
!10836 = !DILocation(line: 5547, column: 10, scope: !10835)
!10837 = !DILocation(line: 5547, column: 9, scope: !2025)
!10838 = !DILocation(line: 5548, column: 9, scope: !10835)
!10839 = !DILocation(line: 5549, column: 9, scope: !10840)
!10840 = distinct !DILexicalBlock(scope: !2025, file: !637, line: 5549, column: 9)
!10841 = !DILocation(line: 5549, column: 16, scope: !10840)
!10842 = !DILocation(line: 5549, column: 20, scope: !10840)
!10843 = !DILocation(line: 5549, column: 37, scope: !10844)
!10844 = !DILexicalBlockFile(scope: !10840, file: !637, discriminator: 1)
!10845 = !DILocation(line: 5549, column: 24, scope: !10840)
!10846 = !DILocation(line: 5549, column: 9, scope: !2025)
!10847 = !DILocation(line: 5550, column: 22, scope: !10848)
!10848 = distinct !DILexicalBlock(scope: !10840, file: !637, line: 5549, column: 55)
!10849 = !DILocation(line: 5550, column: 9, scope: !10848)
!10850 = !DILocation(line: 5551, column: 9, scope: !10848)
!10851 = !DILocation(line: 5553, column: 30, scope: !2025)
!10852 = !DILocation(line: 5553, column: 12, scope: !2025)
!10853 = !DILocation(line: 5553, column: 5, scope: !2025)
!10854 = !DILocation(line: 5554, column: 1, scope: !2025)
!10855 = !DILocation(line: 5572, column: 29, scope: !2031)
!10856 = !DILocation(line: 5572, column: 45, scope: !2031)
!10857 = !DILocation(line: 5574, column: 5, scope: !2031)
!10858 = !DILocation(line: 5574, column: 16, scope: !2031)
!10859 = !DILocation(line: 5575, column: 5, scope: !2031)
!10860 = !DILocation(line: 5575, column: 12, scope: !2031)
!10861 = !DILocation(line: 5577, column: 27, scope: !10862)
!10862 = distinct !DILexicalBlock(scope: !2031, file: !637, line: 5577, column: 9)
!10863 = !DILocation(line: 5577, column: 10, scope: !10862)
!10864 = !DILocation(line: 5577, column: 9, scope: !2031)
!10865 = !DILocation(line: 5578, column: 9, scope: !10862)
!10866 = !DILocation(line: 5579, column: 9, scope: !10867)
!10867 = distinct !DILexicalBlock(scope: !2031, file: !637, line: 5579, column: 9)
!10868 = !DILocation(line: 5579, column: 16, scope: !10867)
!10869 = !DILocation(line: 5579, column: 20, scope: !10867)
!10870 = !DILocation(line: 5579, column: 39, scope: !10871)
!10871 = !DILexicalBlockFile(scope: !10867, file: !637, discriminator: 1)
!10872 = !DILocation(line: 5579, column: 24, scope: !10867)
!10873 = !DILocation(line: 5579, column: 9, scope: !2031)
!10874 = !DILocation(line: 5580, column: 25, scope: !10875)
!10875 = distinct !DILexicalBlock(scope: !10867, file: !637, line: 5579, column: 57)
!10876 = !DILocation(line: 5580, column: 9, scope: !10875)
!10877 = !DILocation(line: 5582, column: 9, scope: !10875)
!10878 = !DILocation(line: 5584, column: 30, scope: !2031)
!10879 = !DILocation(line: 5584, column: 12, scope: !2031)
!10880 = !DILocation(line: 5584, column: 5, scope: !2031)
!10881 = !DILocation(line: 5585, column: 1, scope: !2031)
!10882 = !DILocation(line: 4220, column: 32, scope: !1637)
!10883 = !DILocation(line: 4220, column: 52, scope: !1637)
!10884 = !DILocation(line: 4220, column: 62, scope: !1637)
!10885 = !DILocation(line: 4220, column: 72, scope: !1637)
!10886 = !DILocation(line: 4222, column: 5, scope: !1637)
!10887 = !DILocation(line: 4222, column: 12, scope: !1637)
!10888 = !DILocation(line: 4223, column: 5, scope: !1637)
!10889 = !DILocation(line: 4223, column: 15, scope: !1637)
!10890 = !DILocation(line: 4224, column: 5, scope: !1637)
!10891 = !DILocation(line: 4224, column: 15, scope: !1637)
!10892 = !DILocation(line: 4225, column: 5, scope: !1637)
!10893 = !DILocation(line: 4225, column: 15, scope: !1637)
!10894 = !DILocation(line: 4226, column: 5, scope: !1637)
!10895 = !DILocation(line: 4226, column: 15, scope: !1637)
!10896 = !DILocation(line: 4228, column: 9, scope: !10897)
!10897 = distinct !DILexicalBlock(scope: !1637, file: !637, line: 4228, column: 9)
!10898 = !DILocation(line: 4228, column: 11, scope: !10897)
!10899 = !DILocation(line: 4228, column: 9, scope: !1637)
!10900 = !DILocation(line: 4230, column: 22, scope: !10901)
!10901 = distinct !DILexicalBlock(scope: !10897, file: !637, line: 4228, column: 26)
!10902 = !DILocation(line: 4230, column: 21, scope: !10901)
!10903 = !DILocation(line: 4230, column: 9, scope: !10901)
!10904 = !DILocation(line: 4231, column: 9, scope: !10901)
!10905 = !DILocation(line: 4234, column: 9, scope: !10906)
!10906 = distinct !DILexicalBlock(scope: !1637, file: !637, line: 4234, column: 9)
!10907 = !DILocation(line: 4234, column: 12, scope: !10906)
!10908 = !{!10909, !2950, i64 16}
!10909 = !{!"hostent", !2323, i64 0, !2323, i64 8, !2950, i64 16, !2950, i64 20, !2323, i64 24}
!10910 = !DILocation(line: 4234, column: 26, scope: !10906)
!10911 = !DILocation(line: 4234, column: 23, scope: !10906)
!10912 = !DILocation(line: 4234, column: 9, scope: !1637)
!10913 = !DILocation(line: 4236, column: 11, scope: !10914)
!10914 = distinct !DILexicalBlock(scope: !10906, file: !637, line: 4234, column: 30)
!10915 = !DILocation(line: 4236, column: 32, scope: !10914)
!10916 = !DILocation(line: 4237, column: 28, scope: !10914)
!10917 = !DILocation(line: 4237, column: 9, scope: !10914)
!10918 = !DILocation(line: 4238, column: 9, scope: !10914)
!10919 = !DILocation(line: 4241, column: 13, scope: !1637)
!10920 = !DILocation(line: 4244, column: 13, scope: !10921)
!10921 = distinct !DILexicalBlock(scope: !10922, file: !637, line: 4244, column: 13)
!10922 = distinct !DILexicalBlock(scope: !1637, file: !637, line: 4241, column: 17)
!10923 = !DILocation(line: 4244, column: 18, scope: !10921)
!10924 = !DILocation(line: 4244, column: 13, scope: !10922)
!10925 = !DILocation(line: 4245, column: 13, scope: !10921)
!10926 = !DILocation(line: 4246, column: 9, scope: !10922)
!10927 = !DILocation(line: 4250, column: 13, scope: !10928)
!10928 = distinct !DILexicalBlock(scope: !10922, file: !637, line: 4250, column: 13)
!10929 = !DILocation(line: 4250, column: 18, scope: !10928)
!10930 = !DILocation(line: 4250, column: 13, scope: !10922)
!10931 = !DILocation(line: 4251, column: 13, scope: !10928)
!10932 = !DILocation(line: 4252, column: 9, scope: !10922)
!10933 = !DILocation(line: 4257, column: 22, scope: !10934)
!10934 = distinct !DILexicalBlock(scope: !1637, file: !637, line: 4257, column: 9)
!10935 = !DILocation(line: 4257, column: 20, scope: !10934)
!10936 = !DILocation(line: 4257, column: 37, scope: !10934)
!10937 = !DILocation(line: 4257, column: 9, scope: !1637)
!10938 = !DILocation(line: 4258, column: 9, scope: !10934)
!10939 = !DILocation(line: 4260, column: 22, scope: !10940)
!10940 = distinct !DILexicalBlock(scope: !1637, file: !637, line: 4260, column: 9)
!10941 = !DILocation(line: 4260, column: 20, scope: !10940)
!10942 = !DILocation(line: 4260, column: 37, scope: !10940)
!10943 = !DILocation(line: 4260, column: 9, scope: !1637)
!10944 = !DILocation(line: 4261, column: 9, scope: !10940)
!10945 = !DILocation(line: 4264, column: 9, scope: !1655)
!10946 = !DILocation(line: 4264, column: 12, scope: !1655)
!10947 = !{!10909, !2323, i64 8}
!10948 = !DILocation(line: 4264, column: 9, scope: !1637)
!10949 = !DILocation(line: 4265, column: 20, scope: !1653)
!10950 = !DILocation(line: 4265, column: 23, scope: !1653)
!10951 = !DILocation(line: 4265, column: 18, scope: !1653)
!10952 = !DILocation(line: 4265, column: 14, scope: !1653)
!10953 = !DILocation(line: 4265, column: 35, scope: !10954)
!10954 = !DILexicalBlockFile(scope: !10955, file: !637, discriminator: 2)
!10955 = !DILexicalBlockFile(scope: !1652, file: !637, discriminator: 1)
!10956 = !DILocation(line: 4265, column: 34, scope: !1652)
!10957 = !DILocation(line: 4265, column: 39, scope: !1652)
!10958 = !DILocation(line: 4265, column: 9, scope: !1653)
!10959 = !DILocation(line: 4266, column: 13, scope: !1651)
!10960 = !DILocation(line: 4266, column: 17, scope: !1651)
!10961 = !DILocation(line: 4267, column: 41, scope: !1651)
!10962 = !DILocation(line: 4267, column: 40, scope: !1651)
!10963 = !DILocation(line: 4267, column: 19, scope: !1651)
!10964 = !DILocation(line: 4267, column: 17, scope: !1651)
!10965 = !DILocation(line: 4268, column: 17, scope: !10966)
!10966 = distinct !DILexicalBlock(scope: !1651, file: !637, line: 4268, column: 17)
!10967 = !DILocation(line: 4268, column: 21, scope: !10966)
!10968 = !DILocation(line: 4268, column: 17, scope: !1651)
!10969 = !DILocation(line: 4269, column: 17, scope: !10966)
!10970 = !DILocation(line: 4271, column: 36, scope: !1651)
!10971 = !DILocation(line: 4271, column: 47, scope: !1651)
!10972 = !DILocation(line: 4271, column: 22, scope: !1651)
!10973 = !DILocation(line: 4271, column: 20, scope: !1651)
!10974 = !DILocation(line: 4272, column: 13, scope: !1651)
!10975 = !DILocation(line: 4272, column: 18, scope: !10976)
!10976 = !DILexicalBlockFile(scope: !1657, file: !637, discriminator: 1)
!10977 = !DILocation(line: 4272, column: 28, scope: !1657)
!10978 = !DILocation(line: 4272, column: 58, scope: !1657)
!10979 = !DILocation(line: 4272, column: 72, scope: !10980)
!10980 = distinct !DILexicalBlock(scope: !1657, file: !637, line: 4272, column: 69)
!10981 = !DILocation(line: 4272, column: 89, scope: !10980)
!10982 = !DILocation(line: 4272, column: 69, scope: !10980)
!10983 = !DILocation(line: 4272, column: 99, scope: !10980)
!10984 = !DILocation(line: 4272, column: 69, scope: !1657)
!10985 = !DILocation(line: 4272, column: 69, scope: !10986)
!10986 = !DILexicalBlockFile(scope: !1657, file: !637, discriminator: 2)
!10987 = !DILocation(line: 4272, column: 130, scope: !10988)
!10988 = !DILexicalBlockFile(scope: !10980, file: !637, discriminator: 3)
!10989 = !DILocation(line: 4272, column: 148, scope: !10980)
!10990 = !DILocation(line: 4272, column: 158, scope: !10980)
!10991 = !DILocation(line: 4272, column: 183, scope: !10980)
!10992 = !DILocation(line: 4272, column: 114, scope: !10980)
!10993 = !DILocation(line: 4272, column: 202, scope: !10994)
!10994 = !DILexicalBlockFile(scope: !1651, file: !637, discriminator: 4)
!10995 = !DILocation(line: 4272, column: 202, scope: !1657)
!10996 = !DILocation(line: 4272, column: 202, scope: !10997)
!10997 = !DILexicalBlockFile(scope: !1657, file: !637, discriminator: 5)
!10998 = !DILocation(line: 4274, column: 17, scope: !10999)
!10999 = distinct !DILexicalBlock(scope: !1651, file: !637, line: 4274, column: 17)
!11000 = !DILocation(line: 4274, column: 17, scope: !1651)
!11001 = !DILocation(line: 4275, column: 17, scope: !10999)
!11002 = !DILocation(line: 4276, column: 9, scope: !1652)
!11003 = !DILocation(line: 4276, column: 9, scope: !10955)
!11004 = !DILocation(line: 4276, column: 9, scope: !1651)
!11005 = !DILocation(line: 4265, column: 57, scope: !1652)
!11006 = !DILocation(line: 4265, column: 9, scope: !1652)
!11007 = !DILocation(line: 4277, column: 5, scope: !1654)
!11008 = !DILocation(line: 4279, column: 16, scope: !1661)
!11009 = !DILocation(line: 4279, column: 19, scope: !1661)
!11010 = !{!10909, !2323, i64 24}
!11011 = !DILocation(line: 4279, column: 14, scope: !1661)
!11012 = !DILocation(line: 4279, column: 10, scope: !1661)
!11013 = !DILocation(line: 4279, column: 33, scope: !11014)
!11014 = !DILexicalBlockFile(scope: !11015, file: !637, discriminator: 2)
!11015 = !DILexicalBlockFile(scope: !1660, file: !637, discriminator: 1)
!11016 = !DILocation(line: 4279, column: 32, scope: !1660)
!11017 = !DILocation(line: 4279, column: 37, scope: !1660)
!11018 = !DILocation(line: 4279, column: 5, scope: !1661)
!11019 = !DILocation(line: 4280, column: 9, scope: !1659)
!11020 = !DILocation(line: 4280, column: 13, scope: !1659)
!11021 = !DILocation(line: 4282, column: 17, scope: !1659)
!11022 = !DILocation(line: 4286, column: 13, scope: !1663)
!11023 = !DILocation(line: 4286, column: 32, scope: !1663)
!11024 = !DILocation(line: 4287, column: 13, scope: !1663)
!11025 = !DILocation(line: 4288, column: 30, scope: !1663)
!11026 = !DILocation(line: 4288, column: 17, scope: !1663)
!11027 = !DILocation(line: 4288, column: 28, scope: !1663)
!11028 = !DILocation(line: 4292, column: 25, scope: !1663)
!11029 = !DILocation(line: 4292, column: 13, scope: !1663)
!11030 = !DILocation(line: 4292, column: 36, scope: !1663)
!11031 = !DILocation(line: 4292, column: 35, scope: !1663)
!11032 = !DILocation(line: 4293, column: 30, scope: !1663)
!11033 = !DILocation(line: 4293, column: 19, scope: !1663)
!11034 = !DILocation(line: 4293, column: 17, scope: !1663)
!11035 = !DILocation(line: 4295, column: 17, scope: !11036)
!11036 = distinct !DILexicalBlock(scope: !1663, file: !637, line: 4295, column: 17)
!11037 = !DILocation(line: 4295, column: 24, scope: !11036)
!11038 = !DILocation(line: 4295, column: 27, scope: !11036)
!11039 = !DILocation(line: 4295, column: 21, scope: !11036)
!11040 = !DILocation(line: 4295, column: 39, scope: !11036)
!11041 = !DILocation(line: 4295, column: 42, scope: !11042)
!11042 = !DILexicalBlockFile(scope: !11036, file: !637, discriminator: 1)
!11043 = !DILocation(line: 4295, column: 47, scope: !11036)
!11044 = !DILocation(line: 4295, column: 17, scope: !1663)
!11045 = !DILocation(line: 4296, column: 33, scope: !11036)
!11046 = !DILocation(line: 4296, column: 24, scope: !11036)
!11047 = !DILocation(line: 4296, column: 17, scope: !11036)
!11048 = !DILocation(line: 4298, column: 13, scope: !1664)
!11049 = !DILocation(line: 4303, column: 13, scope: !1666)
!11050 = !DILocation(line: 4303, column: 33, scope: !1666)
!11051 = !DILocation(line: 4304, column: 13, scope: !1666)
!11052 = !DILocation(line: 4305, column: 32, scope: !1666)
!11053 = !DILocation(line: 4305, column: 18, scope: !1666)
!11054 = !DILocation(line: 4305, column: 30, scope: !1666)
!11055 = !DILocation(line: 4309, column: 26, scope: !1666)
!11056 = !DILocation(line: 4309, column: 13, scope: !1666)
!11057 = !DILocation(line: 4309, column: 38, scope: !1666)
!11058 = !DILocation(line: 4309, column: 37, scope: !1666)
!11059 = !DILocation(line: 4310, column: 30, scope: !1666)
!11060 = !DILocation(line: 4310, column: 19, scope: !1666)
!11061 = !DILocation(line: 4310, column: 17, scope: !1666)
!11062 = !DILocation(line: 4313, column: 17, scope: !11063)
!11063 = distinct !DILexicalBlock(scope: !1666, file: !637, line: 4313, column: 17)
!11064 = !DILocation(line: 4313, column: 24, scope: !11063)
!11065 = !DILocation(line: 4313, column: 27, scope: !11063)
!11066 = !DILocation(line: 4313, column: 21, scope: !11063)
!11067 = !DILocation(line: 4313, column: 39, scope: !11063)
!11068 = !DILocation(line: 4313, column: 42, scope: !11069)
!11069 = !DILexicalBlockFile(scope: !11063, file: !637, discriminator: 1)
!11070 = !DILocation(line: 4313, column: 47, scope: !11063)
!11071 = !DILocation(line: 4313, column: 17, scope: !1666)
!11072 = !DILocation(line: 4314, column: 33, scope: !11063)
!11073 = !DILocation(line: 4314, column: 24, scope: !11063)
!11074 = !DILocation(line: 4314, column: 17, scope: !11063)
!11075 = !DILocation(line: 4316, column: 13, scope: !1664)
!11076 = !DILocation(line: 4320, column: 29, scope: !1664)
!11077 = !DILocation(line: 4320, column: 13, scope: !1664)
!11078 = !DILocation(line: 4322, column: 13, scope: !1664)
!11079 = !DILocation(line: 4325, column: 13, scope: !11080)
!11080 = distinct !DILexicalBlock(scope: !1659, file: !637, line: 4325, column: 13)
!11081 = !DILocation(line: 4325, column: 17, scope: !11080)
!11082 = !DILocation(line: 4325, column: 13, scope: !1659)
!11083 = !DILocation(line: 4326, column: 13, scope: !11080)
!11084 = !DILocation(line: 4328, column: 32, scope: !1659)
!11085 = !DILocation(line: 4328, column: 43, scope: !1659)
!11086 = !DILocation(line: 4328, column: 18, scope: !1659)
!11087 = !DILocation(line: 4328, column: 16, scope: !1659)
!11088 = !DILocation(line: 4329, column: 9, scope: !1659)
!11089 = !DILocation(line: 4329, column: 14, scope: !11090)
!11090 = !DILexicalBlockFile(scope: !1668, file: !637, discriminator: 1)
!11091 = !DILocation(line: 4329, column: 24, scope: !1668)
!11092 = !DILocation(line: 4329, column: 54, scope: !1668)
!11093 = !DILocation(line: 4329, column: 68, scope: !11094)
!11094 = distinct !DILexicalBlock(scope: !1668, file: !637, line: 4329, column: 65)
!11095 = !DILocation(line: 4329, column: 85, scope: !11094)
!11096 = !DILocation(line: 4329, column: 65, scope: !11094)
!11097 = !DILocation(line: 4329, column: 95, scope: !11094)
!11098 = !DILocation(line: 4329, column: 65, scope: !1668)
!11099 = !DILocation(line: 4329, column: 65, scope: !11100)
!11100 = !DILexicalBlockFile(scope: !1668, file: !637, discriminator: 2)
!11101 = !DILocation(line: 4329, column: 126, scope: !11102)
!11102 = !DILexicalBlockFile(scope: !11094, file: !637, discriminator: 3)
!11103 = !DILocation(line: 4329, column: 144, scope: !11094)
!11104 = !DILocation(line: 4329, column: 154, scope: !11094)
!11105 = !DILocation(line: 4329, column: 179, scope: !11094)
!11106 = !DILocation(line: 4329, column: 110, scope: !11094)
!11107 = !DILocation(line: 4329, column: 198, scope: !11108)
!11108 = !DILexicalBlockFile(scope: !1659, file: !637, discriminator: 4)
!11109 = !DILocation(line: 4329, column: 198, scope: !1668)
!11110 = !DILocation(line: 4329, column: 198, scope: !11111)
!11111 = !DILexicalBlockFile(scope: !1668, file: !637, discriminator: 5)
!11112 = !DILocation(line: 4331, column: 13, scope: !11113)
!11113 = distinct !DILexicalBlock(scope: !1659, file: !637, line: 4331, column: 13)
!11114 = !DILocation(line: 4331, column: 13, scope: !1659)
!11115 = !DILocation(line: 4332, column: 13, scope: !11113)
!11116 = !DILocation(line: 4333, column: 5, scope: !1660)
!11117 = !DILocation(line: 4333, column: 5, scope: !11015)
!11118 = !DILocation(line: 4333, column: 5, scope: !1659)
!11119 = !DILocation(line: 4279, column: 55, scope: !1660)
!11120 = !DILocation(line: 4279, column: 5, scope: !1660)
!11121 = !DILocation(line: 4335, column: 38, scope: !1637)
!11122 = !DILocation(line: 4335, column: 41, scope: !1637)
!11123 = !{!10909, !2323, i64 0}
!11124 = !DILocation(line: 4335, column: 49, scope: !1637)
!11125 = !DILocation(line: 4335, column: 60, scope: !1637)
!11126 = !DILocation(line: 4335, column: 17, scope: !1637)
!11127 = !DILocation(line: 4335, column: 15, scope: !1637)
!11128 = !DILocation(line: 4335, column: 5, scope: !1637)
!11129 = !DILocation(line: 4338, column: 5, scope: !1637)
!11130 = !DILocation(line: 4338, column: 10, scope: !11131)
!11131 = !DILexicalBlockFile(scope: !1670, file: !637, discriminator: 1)
!11132 = !DILocation(line: 4338, column: 20, scope: !1670)
!11133 = !DILocation(line: 4338, column: 51, scope: !1670)
!11134 = !DILocation(line: 4338, column: 67, scope: !1673)
!11135 = !DILocation(line: 4338, column: 83, scope: !1673)
!11136 = !DILocation(line: 4338, column: 67, scope: !1670)
!11137 = !DILocation(line: 4338, column: 98, scope: !11138)
!11138 = !DILexicalBlockFile(scope: !1673, file: !637, discriminator: 2)
!11139 = !DILocation(line: 4338, column: 103, scope: !11140)
!11140 = !DILexicalBlockFile(scope: !1672, file: !637, discriminator: 4)
!11141 = !DILocation(line: 4338, column: 113, scope: !1672)
!11142 = !DILocation(line: 4338, column: 143, scope: !1672)
!11143 = !DILocation(line: 4338, column: 169, scope: !11144)
!11144 = distinct !DILexicalBlock(scope: !1672, file: !637, line: 4338, column: 166)
!11145 = !DILocation(line: 4338, column: 186, scope: !11144)
!11146 = !DILocation(line: 4338, column: 166, scope: !11144)
!11147 = !DILocation(line: 4338, column: 196, scope: !11144)
!11148 = !DILocation(line: 4338, column: 166, scope: !1672)
!11149 = !DILocation(line: 4338, column: 166, scope: !11150)
!11150 = !DILexicalBlockFile(scope: !1672, file: !637, discriminator: 5)
!11151 = !DILocation(line: 4338, column: 227, scope: !11152)
!11152 = !DILexicalBlockFile(scope: !11144, file: !637, discriminator: 6)
!11153 = !DILocation(line: 4338, column: 245, scope: !11144)
!11154 = !DILocation(line: 4338, column: 255, scope: !11144)
!11155 = !DILocation(line: 4338, column: 280, scope: !11144)
!11156 = !DILocation(line: 4338, column: 211, scope: !11144)
!11157 = !DILocation(line: 4338, column: 299, scope: !11158)
!11158 = !DILexicalBlockFile(scope: !1673, file: !637, discriminator: 7)
!11159 = !DILocation(line: 4338, column: 299, scope: !1672)
!11160 = !DILocation(line: 4338, column: 299, scope: !11161)
!11161 = !DILexicalBlockFile(scope: !1672, file: !637, discriminator: 8)
!11162 = !DILocation(line: 4338, column: 299, scope: !11163)
!11163 = !DILexicalBlockFile(scope: !1672, file: !637, discriminator: 9)
!11164 = !DILocation(line: 4338, column: 312, scope: !11165)
!11165 = !DILexicalBlockFile(scope: !11166, file: !637, discriminator: 10)
!11166 = !DILexicalBlockFile(scope: !1637, file: !637, discriminator: 3)
!11167 = !DILocation(line: 4338, column: 312, scope: !1670)
!11168 = !DILocation(line: 4338, column: 312, scope: !11169)
!11169 = !DILexicalBlockFile(scope: !1670, file: !637, discriminator: 11)
!11170 = !DILocation(line: 4339, column: 5, scope: !1637)
!11171 = !DILocation(line: 4339, column: 10, scope: !11172)
!11172 = !DILexicalBlockFile(scope: !1675, file: !637, discriminator: 1)
!11173 = !DILocation(line: 4339, column: 20, scope: !1675)
!11174 = !DILocation(line: 4339, column: 51, scope: !1675)
!11175 = !DILocation(line: 4339, column: 67, scope: !1678)
!11176 = !DILocation(line: 4339, column: 83, scope: !1678)
!11177 = !DILocation(line: 4339, column: 67, scope: !1675)
!11178 = !DILocation(line: 4339, column: 98, scope: !11179)
!11179 = !DILexicalBlockFile(scope: !1678, file: !637, discriminator: 2)
!11180 = !DILocation(line: 4339, column: 103, scope: !11181)
!11181 = !DILexicalBlockFile(scope: !1677, file: !637, discriminator: 4)
!11182 = !DILocation(line: 4339, column: 113, scope: !1677)
!11183 = !DILocation(line: 4339, column: 143, scope: !1677)
!11184 = !DILocation(line: 4339, column: 169, scope: !11185)
!11185 = distinct !DILexicalBlock(scope: !1677, file: !637, line: 4339, column: 166)
!11186 = !DILocation(line: 4339, column: 186, scope: !11185)
!11187 = !DILocation(line: 4339, column: 166, scope: !11185)
!11188 = !DILocation(line: 4339, column: 196, scope: !11185)
!11189 = !DILocation(line: 4339, column: 166, scope: !1677)
!11190 = !DILocation(line: 4339, column: 166, scope: !11191)
!11191 = !DILexicalBlockFile(scope: !1677, file: !637, discriminator: 5)
!11192 = !DILocation(line: 4339, column: 227, scope: !11193)
!11193 = !DILexicalBlockFile(scope: !11185, file: !637, discriminator: 6)
!11194 = !DILocation(line: 4339, column: 245, scope: !11185)
!11195 = !DILocation(line: 4339, column: 255, scope: !11185)
!11196 = !DILocation(line: 4339, column: 280, scope: !11185)
!11197 = !DILocation(line: 4339, column: 211, scope: !11185)
!11198 = !DILocation(line: 4339, column: 299, scope: !11199)
!11199 = !DILexicalBlockFile(scope: !1678, file: !637, discriminator: 7)
!11200 = !DILocation(line: 4339, column: 299, scope: !1677)
!11201 = !DILocation(line: 4339, column: 299, scope: !11202)
!11202 = !DILexicalBlockFile(scope: !1677, file: !637, discriminator: 8)
!11203 = !DILocation(line: 4339, column: 299, scope: !11204)
!11204 = !DILexicalBlockFile(scope: !1677, file: !637, discriminator: 9)
!11205 = !DILocation(line: 4339, column: 312, scope: !11165)
!11206 = !DILocation(line: 4339, column: 312, scope: !1675)
!11207 = !DILocation(line: 4339, column: 312, scope: !11208)
!11208 = !DILexicalBlockFile(scope: !1675, file: !637, discriminator: 11)
!11209 = !DILocation(line: 4340, column: 12, scope: !1637)
!11210 = !DILocation(line: 4340, column: 5, scope: !1637)
!11211 = !DILocation(line: 4341, column: 1, scope: !1637)
!11212 = !DILocation(line: 508, column: 16, scope: !1679)
!11213 = !DILocation(line: 510, column: 5, scope: !1679)
!11214 = !DILocation(line: 510, column: 15, scope: !1679)
!11215 = !DILocation(line: 513, column: 31, scope: !1679)
!11216 = !DILocation(line: 513, column: 58, scope: !1679)
!11217 = !DILocation(line: 513, column: 48, scope: !1679)
!11218 = !DILocation(line: 513, column: 9, scope: !1679)
!11219 = !DILocation(line: 513, column: 7, scope: !1679)
!11220 = !DILocation(line: 517, column: 9, scope: !1686)
!11221 = !DILocation(line: 517, column: 11, scope: !1686)
!11222 = !DILocation(line: 517, column: 9, scope: !1679)
!11223 = !DILocation(line: 518, column: 25, scope: !1685)
!11224 = !DILocation(line: 518, column: 40, scope: !1685)
!11225 = !DILocation(line: 518, column: 9, scope: !1685)
!11226 = !DILocation(line: 519, column: 9, scope: !1685)
!11227 = !DILocation(line: 519, column: 14, scope: !11228)
!11228 = !DILexicalBlockFile(scope: !1684, file: !637, discriminator: 1)
!11229 = !DILocation(line: 519, column: 24, scope: !1684)
!11230 = !DILocation(line: 519, column: 54, scope: !1684)
!11231 = !DILocation(line: 519, column: 66, scope: !11232)
!11232 = distinct !DILexicalBlock(scope: !1684, file: !637, line: 519, column: 63)
!11233 = !DILocation(line: 519, column: 83, scope: !11232)
!11234 = !DILocation(line: 519, column: 63, scope: !11232)
!11235 = !DILocation(line: 519, column: 93, scope: !11232)
!11236 = !DILocation(line: 519, column: 63, scope: !1684)
!11237 = !DILocation(line: 519, column: 63, scope: !11238)
!11238 = !DILexicalBlockFile(scope: !1684, file: !637, discriminator: 2)
!11239 = !DILocation(line: 519, column: 124, scope: !11240)
!11240 = !DILexicalBlockFile(scope: !11232, file: !637, discriminator: 3)
!11241 = !DILocation(line: 519, column: 142, scope: !11232)
!11242 = !DILocation(line: 519, column: 152, scope: !11232)
!11243 = !DILocation(line: 519, column: 177, scope: !11232)
!11244 = !DILocation(line: 519, column: 108, scope: !11232)
!11245 = !DILocation(line: 519, column: 196, scope: !11246)
!11246 = !DILexicalBlockFile(scope: !1685, file: !637, discriminator: 4)
!11247 = !DILocation(line: 519, column: 196, scope: !1684)
!11248 = !DILocation(line: 519, column: 196, scope: !11249)
!11249 = !DILexicalBlockFile(scope: !1684, file: !637, discriminator: 5)
!11250 = !DILocation(line: 520, column: 5, scope: !1685)
!11251 = !DILocation(line: 523, column: 1, scope: !1679)
!11252 = !DILocation(line: 522, column: 5, scope: !1679)
!11253 = !DILocation(line: 734, column: 25, scope: !1807)
!11254 = !DILocation(line: 734, column: 33, scope: !1807)
!11255 = !DILocation(line: 734, column: 45, scope: !1807)
!11256 = !DILocation(line: 734, column: 55, scope: !1807)
!11257 = !DILocation(line: 736, column: 5, scope: !1807)
!11258 = !DILocation(line: 736, column: 25, scope: !1807)
!11259 = !DILocation(line: 738, column: 9, scope: !1807)
!11260 = !DILocation(line: 737, column: 9, scope: !1807)
!11261 = !DILocation(line: 737, column: 7, scope: !1807)
!11262 = !DILocation(line: 739, column: 9, scope: !11263)
!11263 = distinct !DILexicalBlock(scope: !1807, file: !637, line: 739, column: 9)
!11264 = !DILocation(line: 739, column: 11, scope: !11263)
!11265 = !DILocation(line: 739, column: 9, scope: !1807)
!11266 = !DILocation(line: 740, column: 25, scope: !11263)
!11267 = !DILocation(line: 740, column: 28, scope: !11263)
!11268 = !DILocation(line: 740, column: 32, scope: !11263)
!11269 = !DILocation(line: 740, column: 40, scope: !11263)
!11270 = !DILocation(line: 740, column: 46, scope: !11263)
!11271 = !DILocation(line: 740, column: 9, scope: !11263)
!11272 = !DILocation(line: 741, column: 12, scope: !1807)
!11273 = !DILocation(line: 742, column: 1, scope: !1807)
!11274 = !DILocation(line: 741, column: 5, scope: !1807)
